- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Arrays, Pointers, and Strings
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数组、指针和字符串
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: So far, we’ve used very simple integers to represent data. But let’s face it,
    not everything in the world can be described as a single integer. In this chapter
    you’ll learn some of the basics of organizing your data.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用了非常简单的整数来表示数据。但是，面对现实吧，并不是所有的东西都能用一个整数来描述。在这一章中，你将学习一些组织数据的基础知识。
- en: First, you’ll learn about *arrays*, which are data structures that hold multiple
    items you can select using an integer index. I’ll also go a little beyond simple
    arrays to show you how the compiler implements arrays and how arrays implement
    strings of characters like `"Hello World!\n"`. Along the way, you’ll learn to
    work with C’s `char` type.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将学习*数组*，它是一个数据结构，可以通过整数索引选择多个项。我还会稍微超越简单的数组，展示编译器如何实现数组，以及数组如何实现像 `"Hello
    World!\n"` 这样的字符串。过程中，你将学习如何使用 C 的 `char` 类型。
- en: You’ll learn how to use memory *pointers*, which hold the address of a memory
    location, and then see how arrays and pointers are both similar and different.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学习如何使用内存*指针*，它保存内存位置的地址，然后了解数组和指针在相似之处和不同之处。
- en: You’ll also learn how to use the `const` modifier to create a variable that
    cannot be modified, better known as a *constant*. Constants help you organize
    your data by preventing unintentional changes to it.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将学习如何使用 `const` 修饰符创建一个不能被修改的变量，也就是*常量*。常量通过防止对数据的无意修改，帮助你组织数据。
- en: Arrays
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组
- en: 'You’ve already seen how to declare a basic variable, like this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到如何声明一个基本变量，例如这样：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This variable can hold only one value at a time. Yet we can also declare a
    variable that holds a set of values using an *array declaration*, which places
    the number of items to include in the array in brackets:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个变量一次只能存储一个值。然而，我们也可以声明一个变量来存储一组值，使用*数组声明*，它在方括号中指定数组包含的项数：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This code declares an array of five integers numbered 0, 1, 2, 3, and 4\. The
    element numbers are called *indices*, and the first index is 0, not 1\. To access
    individual elements of the array, we use square brackets containing an index.
    For example, the following line assigns a value of 99 to the fourth item in the
    array (the one at index 3):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码声明了一个包含五个整数的数组，编号为 0、1、2、3 和 4。数组的元素编号叫做*索引*，而第一个索引是 0，而不是 1。要访问数组中的单个元素，我们使用方括号并包含索引。例如，下面这一行将
    99 的值赋给数组中的第四个元素（索引为 3 的那个）：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There is nothing in the C language that prevents you from indexing a nonexistent
    array element, but although it is possible to use an illegal index, the results
    are not defined (meaning something bad will probably happen). For example, the
    last element of `anArray` is 4, so the following declaration is legal:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: C 语言中没有任何东西阻止你使用不存在的数组元素进行索引，但尽管可以使用非法索引，结果是未定义的（这意味着很可能会发生一些错误）。例如，`anArray`
    的最后一个元素是 4，所以以下声明是合法的：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'However, this one isn’t:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个例子并不是：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This statement tries to access an element that isn’t in the array.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句尝试访问一个不存在的数组元素。
- en: Let’s see how arrays work in action. Take a look at [Listing 6-1](#listing6-1),
    which is a program that sums the elements of an array and outputs the total.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看数组如何实际工作。查看[示例 6-1](#listing6-1)，这是一个将数组元素求和并输出总和的程序。
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 6-1: Basic array usage'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 6-1：基本数组使用
- en: We start by defining a variable, `NUMBER_ELEMENTS`, to hold the number of elements
    we have in the array. The keyword `const` tells C that this variable is not to
    be changed (more on this later).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从定义一个变量 `NUMBER_ELEMENTS` 开始，它保存数组中元素的数量。关键字 `const` 告诉 C 这个变量不能被改变（稍后会详细介绍）。
- en: We use this constant two places. The first declares the array. The second loops
    through each element of the array. While we could have instead used the value
    `5` in both of these places, doing so would have introduced a magic number into
    our code. A *magic number* is a number that appears in the program in multiple
    places but whose connection to the code is unclear. Using a magic number is risky;
    in this case, if we changed the `5` in the array declaration, we would have to
    remember to also change the `5` in the loop. By using the constant declaration,
    we define the size of the array in only one place. If we change the constant to
    `14`, we take care of every place it is used automatically.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在两个地方使用了这个常量。第一个用于声明数组。第二个用于循环遍历数组的每个元素。虽然我们本可以在这两个地方直接使用值`5`，但这样做会在代码中引入一个魔法数字。*魔法数字*是指出现在程序中的多个位置，但与代码的关系不明确的数字。使用魔法数字是有风险的；在这种情况下，如果我们更改了数组声明中的`5`，我们还需要记得更改循环中的`5`。通过使用常量声明，我们只需在一个地方定义数组的大小。如果我们将常量更改为`14`，那么它被使用的每个地方都会自动更新。
- en: Back to the code. We need to put some numbers in our array, so we do so by assigning
    a value to each of its indices. Next, we use a `for` loop to access each element
    of the array. The `for` loop statement illustrates a common C programming phrase
    for looping through an array. The loop starts at zero and continues as long as
    the index is *less than* (<) the size of the array. The index must be less than
    5, because `number[5]` is a nonexistent element.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 回到代码。我们需要在数组中放一些数字，所以我们通过为每个索引赋值来实现。接下来，我们使用`for`循环访问数组的每个元素。`for`循环语句展示了C语言中常用的遍历数组的方式。循环从零开始，只要索引*小于*（<）数组的大小，循环就会继续。索引必须小于5，因为`number[5]`是一个不存在的元素。
- en: 'Arrays can be initialized at the time of declaration, just like simple variables,
    by listing all of the elements inside curly brackets:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 数组可以在声明时初始化，就像简单的变量一样，通过在花括号中列出所有元素：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this case, the number of elements must match the size of the array or you’ll
    get a warning message.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，元素的数量必须与数组的大小匹配，否则会收到警告消息。
- en: 'C is a smart language. It can deduce the size of the array from the number
    of elements, so this declaration also works:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: C是一种智能语言。它可以根据元素的数量推断数组的大小，因此这个声明也是有效的：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Under the Hood: Pointers'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 底层原理：指针
- en: My father, C. M. Oualline, famously taught me, “There are things and there are
    pointers to things.” See [Figure 6-1](#figure6-1) for a detailed diagram of what
    this means. Although it looks simple, understanding this diagram is extremely
    important.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我的父亲C. M. Oualline曾经教导我，“有东西，也有指向东西的指针。”有关这个含义的详细示意图，请参见[图6-1](#figure6-1)。尽管看起来很简单，理解这张图是极其重要的。
- en: '![f06001](image_fi/501621c06/f06001.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![f06001](image_fi/501621c06/f06001.png)'
- en: 'Figure 6-1: Things and pointers to things'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-1：事物与指向事物的指针
- en: An integer is a thing. In fact, it is a thing that has an integer in it. A pointer
    is an address of a thing.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 整数是一个东西。实际上，它是一个包含整数的东西。指针是一个东西的地址。
- en: Things come in different sizes. A `uint64_t` integer is a relatively big thing,
    while a `uint8_t` is a small thing. The key here is that things come in different
    sizes. A pointer is a fixed size. The thing it points to can be big or small,
    but the pointer is always the same size.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 事物有不同的大小。`uint64_t`整数是一个相对较大的东西，而`uint8_t`是一个较小的东西。关键在于事物有不同的大小。指针是一个固定的大小。它所指向的东西可以大或小，但指针的大小始终是一样的。
- en: Pointers are useful for quickly accessing data structures and linking data structures
    together. In embedded programming, pointers are used to point to memory-mapped
    I/O devices, which gives the program control of the devices.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 指针对于快速访问数据结构和将数据结构连接在一起非常有用。在嵌入式编程中，指针用于指向内存映射的I/O设备，这使得程序能够控制这些设备。
- en: The big advantage of pointers is that they can point to anything. The biggest
    disadvantage is that they can point to things they shouldn’t. When that happens,
    programs start to do strange and unexpected things, so use pointers very carefully.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 指针的最大优点是它们可以指向任何东西。最大的缺点是它们可以指向不该指向的东西。当这种情况发生时，程序会开始执行奇怪和意外的操作，因此在使用指针时必须非常小心。
- en: 'To declare a pointer, use an asterisk (`*`) in the declaration to indicate
    that the variable is a pointer and not a thing:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要声明一个指针，在声明中使用星号（`*`）来表示该变量是一个指针，而不是一个东西：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The *address of* (`&`) operator changes a thing into a pointer to a thing:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*地址运算符*（`&`）将一个东西转换为指向该东西的指针：'
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now `thingPtr` points to `thing`. The *dereference* (`*`) operator turns a
    pointer back into a thing:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`thingPtr`指向`thing`。*解引用*（`*`）操作符将指针转换回一个值：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This assigns `otherThing` to the value *pointed to* by `thingPtr`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把`otherThing`赋值给`thingPtr`所*指向*的值。
- en: 'The following program shows how these operations work. In this program, we
    introduce a new `printf` conversion, `%p`, which prints pointers:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序展示了这些操作是如何工作的。在这个程序中，我们引入了一种新的`printf`转换符，`%p`，它用于打印指针：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Let’s go through this in detail. We start by declaring three things and two
    pointers. We use the suffix `Ptr` when naming all pointers to make them very obvious.
    At this point, `smallPtr` does not point to any particular thing.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析一下。我们首先声明了三个变量和两个指针。在命名所有指针时，我们使用了后缀`Ptr`，使它们非常显眼。此时，`smallPtr`并没有指向任何特定的对象。
- en: 'Before we use the pointer, let’s use our `smallThing`. Using two calls to `printf`,
    we print the value and the size of `smallThing` 1. This will output the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用指针之前，让我们先使用我们的`smallThing`。通过两次调用`printf`，我们打印了`smallThing`的值和大小 1。输出将如下所示：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now let’s take a look at the pointer 2. First, we print the value of the pointer,
    which is a memory address. We are on an x86-type machine with 64-bit pointers,
    so the value of the pointer is a 64-bit number. The actual number value comes
    from the way that memory is laid out, which we will discuss in detail in Chapter
    11. When we print `sizeof(smallPtr)`, we see that it is indeed 8 bytes or 64 bits
    long, and the value *pointed to* by `smallPtr` is `5`. All in all, these three
    calls to `printf` will print the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下指针 2。首先，我们打印指针的值，它是一个内存地址。我们使用的是一台具有 64 位指针的 x86 类型机器，因此指针的值是一个 64
    位数字。实际的数字值来自内存的布局方式，具体内容将在第 11 章中详细讨论。当我们打印`sizeof(smallPtr)`时，我们会看到它确实是 8 字节或
    64 位长，且`smallPtr`所*指向*的值是`5`。总的来说，这三次`printf`调用将打印以下内容：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We do something similar with `largePtr`. Notice that while the size of the
    thing being pointed to is different, the size of the pointer remains the same.
    The size of the pointer depends on the processor type, not the type of data being
    pointed to. On our STM32 processor, we have 32-bit addresses, so the pointer will
    be a 32-bit value. On an x64 machine with 64-bit addresses, the size of a pointer
    is 4 bytes:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对`largePtr`做了类似的操作。注意，尽管被指向对象的大小不同，但指针的大小始终不变。指针的大小取决于处理器类型，而不是所指向数据的类型。在我们的
    STM32 处理器上，地址是 32 位的，因此指针将是 32 位值。而在具有 64 位地址的 x64 机器上，指针的大小是 4 字节：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: To see what the pointers are actually pointing to, enter this program into the
    STM32 Workbench and run it using the debugger. Put a breakpoint just after everything
    has been assigned and run the program up to the breakpoint.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看指针实际指向的内容，将此程序输入 STM32 Workbench，并使用调试器运行它。在所有内容分配完毕后，设置一个断点并运行程序直到该断点。
- en: Opening the Variables panel shows us all the variables and their values (see
    [Figure 6-2](#figure6-2)).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 打开“变量”面板后，我们可以看到所有变量及其值（参见[图 6-2](#figure6-2)）。
- en: '![f06002](image_fi/501621c06/f06002.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![f06002](image_fi/501621c06/f06002.png)'
- en: 'Figure 6-2: The Variables panel with pointers'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6-2：显示指针的变量面板
- en: Usually, the value of the pointer is not that interesting. What’s more interesting
    is what it points to. Clicking the + icon expands the `smallPtr` entry, and we
    can see that `smallPtr` points to `6` (also known as the character `'\006'`).
    Similarly, we can see that `largePtr` points to `987654321`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，指针的值并不是特别有趣。更有趣的是它指向的内容。点击 + 图标可以展开`smallPtr`条目，我们可以看到`smallPtr`指向`6`（也就是字符`'\006'`）。类似地，我们可以看到`largePtr`指向`987654321`。
- en: Array and Pointer Arithmetic
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组和指针运算
- en: 'C treats array variables and pointers very much alike. Consider the following
    code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: C 将数组变量和指针视为非常相似。请看以下代码：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We’ve assigned `arrayPtr` the value of `array`, not `&array`, because C will
    automatically turn an array into a pointer when it’s used like a pointer. In fact,
    arrays and pointers are almost interchangeable, except that they are declared
    differently.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`arrayPtr`赋值为`array`，而不是`&array`，因为 C 会在数组像指针一样使用时自动将其转换为指针。事实上，数组和指针几乎是可以互换的，只不过它们的声明方式不同。
- en: 'Now let’s access an element of the array:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们访问数组的一个元素：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This syntax is the same as the following, which says to take the value of `arrayPtr`,
    add 1 to it (scaled by the size of the data being pointed to), and return the
    data pointed to by the result of this expression:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这种语法与以下内容相同，它表示获取`arrayPtr`的值，向其添加 1（按指向的数据类型大小进行缩放），并返回该表达式结果所指向的数据：
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following program demonstrates the relationship between arrays and pointers
    in more detail:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序更详细地演示了数组与指针之间的关系：
- en: '[PRE18]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The first thing this program does is print the address and contents of each
    array element in the conventional manner: by using a `for` loop to access each
    index in turn.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序首先按常规方式打印每个数组元素的地址和内容：通过使用`for`循环依次访问每个索引。
- en: 'In the next loop, we print using pointer arithmetic. Now, we need to understand
    exactly what we are dealing with. The variable `array` is an array. The expression
    `array[index]` is an integer, and the `&` (address of) operator changes an integer
    into a pointer, so `&array[index]` is a pointer. As a result, this code prints
    the following memory addresses for each element in the array:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个循环中，我们使用指针运算进行打印。现在，我们需要明确理解我们正在处理的内容。变量`array`是一个数组，表达式`array[index]`是一个整数，而`&`（取地址）运算符将一个整数转换为指针，因此`&array[index]`是一个指针。因此，这段代码会打印数组中每个元素的以下内存地址：
- en: '[PRE19]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The pointer value increases by 4, the size of an integer, each time, so `array[0]`
    is at address `0x7fffa22e0610`, and `array[1]` is at a memory location 4 bytes
    larger, at `0x7fffa22e0614`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 每次指针值增加 4，即一个整数的大小，因此`array[0]`位于地址`0x7fffa22e0610`，而`array[1]`位于比它大 4 字节的内存位置，地址为`0x7fffa22e0614`。
- en: This method uses pointer arithmetic. (We actually used pointer arithmetic in
    the first method too, but C hid it all behind our back.) With this loop, you can
    see that `arrayPtr + 1` is `0x7fffa22e0614`, which is exactly the same as `&array[1]`.
    Again, notice that with pointer arithmetic, things are automatically scaled by
    the size of the item being pointed to. In this case, the type of the data being
    pointed to is `int`, so the expression `arrayPtr + 1` is actually `arrayPtr +
    1 * sizeof(int)`, and thus `0x7fffa22e0610 + 1` is really `0x7fffa22e0610 + 1
    * sizeof(int)`, which is `0x7fffa22e0614`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法使用了指针运算。（我们实际上在第一种方法中也使用了指针运算，但 C 隐藏了这一切。）通过这个循环，你可以看到`arrayPtr + 1`是`0x7fffa22e0614`，这与`&array[1]`完全相同。再次注意，使用指针运算时，所有操作都会自动按所指向项的大小进行缩放。在这种情况下，所指向的数据类型是`int`，因此表达式`arrayPtr
    + 1`实际上是`arrayPtr + 1 * sizeof(int)`，所以`0x7fffa22e0610 + 1`实际上是`0x7fffa22e0610
    + 1 * sizeof(int)`，即`0x7fffa22e0614`。
- en: Finally, we do the same thing a third way using an incrementing pointer.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用递增指针以第三种方式执行相同的操作。
- en: Using pointers to access arrays is common, because many people think doing so
    is more efficient than using an array index. After all, computing `array[index]`
    involves an address calculation, but compiler technology has improved over the
    years. Today’s compilers are very good at generating more efficient code, so using
    pointers for array indexing is not actually more efficient.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用指针访问数组很常见，因为许多人认为这样比使用数组索引更高效。毕竟，计算`array[index]`涉及地址计算，但编译器技术多年来已经取得了很大进步。如今的编译器非常擅长生成更高效的代码，因此使用指针进行数组索引并不比直接使用数组索引更高效。
- en: Using address logic is, however, more confusing. It’s not clear what’s being
    pointed to and what the limits of the array are, so the second two methods should
    be avoided. I’ve included them in the example because there’s a lot of legacy
    code out there that uses pointer arithmetic to access arrays, and to show you
    what not to do.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用地址逻辑会更为混乱。因为不清楚指向的是何物，数组的边界在哪里，所以第二种和第三种方法应该避免。我将它们包含在示例中是因为许多遗留代码使用指针运算来访问数组，目的是告诉你应该避免这样做。
- en: Array Overflow
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组溢出
- en: C does not do *bounds checking*, meaning it does not check whether you’re trying
    to access elements outside the bounds of an array. The legal elements of a five-element
    array (`int a[5]`) are `a[0]`, `a[1]`, `a[2]`, `a[3]`, `a[4]`, but there’s nothing
    to prevent you from using illegal values such as `a[5]`, `a[6]`, `a[7]`, or even
    `a[932343]`. The trouble with the illegal values is that they are the locations
    of some other variables or data in memory. The program in [Listing 6-2](#listing6-2)
    demonstrates what happens when you go beyond the end of array (called *array overflow*).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: C 不进行*边界检查*，即它不会检查你是否尝试访问数组边界外的元素。一个五元素数组（`int a[5]`）的合法元素是`a[0]`、`a[1]`、`a[2]`、`a[3]`、`a[4]`，但没有任何东西阻止你使用非法值，如`a[5]`、`a[6]`、`a[7]`，甚至是`a[932343]`。非法值的问题在于，它们可能是内存中其他变量或数据的位置。位于[列表
    6-2](#listing6-2)中的程序演示了当你越过数组末尾时会发生什么（即*数组溢出*）。
- en: '**`array.bad.c`**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**`array.bad.c`**'
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Listing 6-2: Array overflow'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 6-2：数组溢出
- en: '*The key item to watch is `numbers2[0]`, which we set to 21 when we initialize
    it. When we print it the first time, at 1, its value is, in fact, 21\. However,
    when we print it later, at 3, it is 99\. What happened?'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*关键点是观察`numbers2[0]`，它在初始化时被设置为21。当我们第一次打印它时，它的值实际上是21。然而，当我们稍后再次打印它时，值变成了99。这是怎么回事呢？*'
- en: 'Let’s look at the output of this program:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个程序的输出：
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: From this, we see that `numbers1` is allocated the memory from `0x7ffc5e94ff00`
    to `0x7ffc5e94ff13`. The variable `numbers2` is allocated `0x7ffc5e94ff20` to
    `0x7ffc5e94ff33`. This memory layout is visually expressed in [Table 6-1](#table6-1).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 从中我们可以看到，`numbers1`的内存分配从`0x7ffc5e94ff00`到`0x7ffc5e94ff13`。变量`numbers2`的内存分配从`0x7ffc5e94ff20`到`0x7ffc5e94ff33`。这种内存布局在[表6-1](#table6-1)中有直观的表示。
- en: 'Table 6-1: Memory Layout'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 表6-1：内存布局
- en: '| **Variable** | **Address** | **Contents** |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| **变量** | **地址** | **内容** |'
- en: '| --- | --- | --- |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `numbers1` | `0x7ffc5e94ff00` | `11` |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `numbers1` | `0x7ffc5e94ff00` | `11` |'
- en: '|  | `0x7ffc5e94ff04` | `12` |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '|  | `0x7ffc5e94ff04` | `12` |'
- en: '|  | `0x7ffc5e94ff08` | `13` |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '|  | `0x7ffc5e94ff08` | `13` |'
- en: '|  | `0x7ffc5e94ff0c` | `14` |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '|  | `0x7ffc5e94ff0c` | `14` |'
- en: '|  | `0x7ffc5e94ff10` | `15` |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '|  | `0x7ffc5e94ff10` | `15` |'
- en: '| `numbers2` | `0x7ffc5e94ff20` | `21` |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `numbers2` | `0x7ffc5e94ff20` | `21` |'
- en: '|  | `0x7ffc5e94ff24` | `22` |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '|  | `0x7ffc5e94ff24` | `22` |'
- en: '|  | `0x7ffc5e94ff28` | `23` |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '|  | `0x7ffc5e94ff28` | `23` |'
- en: '|  | `0x7ffc5e94ff2c` | `24` |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '|  | `0x7ffc5e94ff2c` | `24` |'
- en: '|  | `0x7ffc5e94ff30` | `25` |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '|  | `0x7ffc5e94ff30` | `25` |'
- en: The statement at 2 in [Listing 6-2](#listing6-2) uses an illegal index, since
    `numbers1` has only five elements. So, what memory does this overwrite? From the
    output of our program, we see that the address of this value is `0x7ffc5e94ff20`.
    By a strange coincidence, this is also the address of `numbers2[0]`. Our sample
    program makes the memory corruption immediately apparent when it prints the content
    of `numbers2[0]` the second time.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单6-2](#listing6-2)中的第2行使用了非法索引，因为`numbers1`只有五个元素。那么，这个操作会覆盖什么内存呢？通过程序的输出，我们看到该值的地址是`0x7ffc5e94ff20`。巧合的是，这也是`numbers2[0]`的地址。当我们第二次打印`numbers2[0]`的内容时，我们的示例程序会立刻显示出内存损坏。'
- en: This program is a simple illustration of what can go wrong when an array overflows.
    In real life, identifying such problems is much harder. Usually, these errors
    show up as weird program behavior that occurs long after the index error, so debugging
    them is complicated. Avoid making this type of mistake.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序简单地展示了当数组溢出时可能出现的问题。在实际情况中，识别这种问题要困难得多。通常这些错误表现为程序行为异常，而且通常发生在索引错误之后很久，所以调试起来非常复杂。避免犯这种错误。
- en: 'The most common error novice C programmers make is to forget that C arrays
    start at 0 and go to `size``-1`. For example, you might write the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 初学C语言的程序员最常犯的错误是忘记C语言数组从0开始，到`size`-1。例如，你可能会写出以下代码：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If you program on Linux machines, tools such as Valgrind and the GCC address
    sanitizer will do a runtime check for array overflows. In the embedded world,
    we have no such tools, so we just have to be careful.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在Linux机器上编程，像Valgrind和GCC地址清理工具这样的工具会在运行时检查数组溢出。在嵌入式世界里，我们没有这些工具，所以只能更加小心。
- en: Characters and Strings
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符和字符串
- en: 'We’ve discussed working with numbers, but you might sometimes want to include
    other kinds of data, like text, in your programs. For this, we turn to a new variable
    type, `char`, which holds a single character enclosed in single quotes (`''`).
    For example, the following creates a `char` variable called `stop` to hold the
    character `''S''`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了如何处理数字，但有时候你可能希望在程序中包含其他类型的数据，比如文本。为此，我们引入了一种新的变量类型，`char`，它表示一个用单引号（`'`）括起来的单个字符。例如，下面的代码创建了一个名为`stop`的`char`变量，用于存储字符`'S'`：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: A *string* is an array of characters that ends with an end-of-string (`\0`)
    character. The character `\0` is known as the NUL character (with one *L*) as
    well. That’s because, during original serial communications, it signified nothing.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '*字符串*是一个以字符串结束符（`\0`）字符结尾的字符数组。字符`\0`也叫做NUL字符（一个*L*），因为在最初的串行通信中，它表示“无”。'
- en: 'To practice using strings, let’s now take a look at the following program,
    which prints the string “Hello World”:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了练习使用字符串，下面我们来看看这个程序，它打印字符串“Hello World”：
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We first define a string called `hello` with the value `"Hello World"`. This
    initialization explicitly defines every element of the string. You hardly ever
    see initializations like this in real life because C provides a shortcut that
    makes things a lot easier. (We’ll see that shortly.) This version makes everything
    obvious, which is good for learning but not for brevity.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先定义一个名为`hello`的字符串，值为`"Hello World"`。这个初始化显式地定义了字符串的每个元素。在现实生活中你几乎看不到这样的初始化，因为
    C 提供了一种简便方式，使得事情变得更加容易。（我们很快就会看到。）这个版本让一切都变得很明显，这对学习有好处，但不利于简洁。
- en: Later, we print the string using the standard C function `puts`. The `puts`
    function prints a single string and is simple, whereas `printf` can do formatting
    and is a large, complex function. The `puts` function also adds a newline, so
    we didn’t put one in our original string.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，我们使用标准的 C 函数`puts`打印字符串。`puts`函数打印单个字符串，简单易用，而`printf`可以进行格式化，并且是一个庞大复杂的函数。`puts`函数还会添加换行符，因此我们在原始字符串中没有加上换行符。
- en: 'C has a shorthand for initializing strings, allowing us to write the same declaration
    like this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: C 语言有一种简写方式来初始化字符串，允许我们像这样写相同的声明：
- en: '[PRE25]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Both statements create an array of 12 characters and initialize it. (`"Hello
    World"` contains 11 characters, and the 12th is the end-of-string character `'\0'`,
    which is automatically supplied when you use the shorthand.)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 两个语句都创建了一个包含12个字符的数组并初始化它。(`"Hello World"`包含11个字符，第12个是字符串结束符`'\0'`，当你使用简写时，C会自动提供这个字符。)
- en: 'Because arrays and pointers are very similar, you can also declare the string
    as a pointer:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 因为数组和指针非常相似，你也可以将字符串声明为指针：
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You’ll notice that we now have two `const` keywords. Things are getting a little
    tricky here. The first `const` affects the pointer; the second affects the data
    being pointed to. The following program illustrates how these work:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到我们现在有了两个`const`关键字。事情变得有点复杂了。第一个`const`影响指针，第二个`const`影响被指向的数据。以下程序展示了这些是如何工作的：
- en: '[PRE27]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This program shows every possible way `const` can be used to define a character
    pointer. We then try to modify the pointer and the data being pointed to. Depending
    on where we put `const` modifiers, some of these statements will fail and some
    will work.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序展示了`const`可以用来定义字符指针的每一种可能方式。然后我们尝试修改指针和被指向的数据。根据`const`修饰符的位置，某些语句将失败，而某些语句则会成功。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: We started this book by dealing with variables that could hold single values.
    Arrays let us deal with a set of data. This gives us much more power when it comes
    to organization.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书的开头处理了可以存储单一值的变量。数组让我们能够处理一组数据。在组织数据方面，这给了我们更大的能力。
- en: Strings are a special type of array. They hold characters and have an end-of-string
    marker to signal their end.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串是一种特殊类型的数组。它们包含字符，并且有一个字符串结束标记来指示结束。
- en: Pointers and arrays are similar in that both can be used to access a section
    of memory. Arrays are restricted by their size (although they can overflow), while
    pointers are not. C does not restrict the use of pointers, and that gives the
    language a lot of power. This power can be used for good, such as when dealing
    with memory-mapped I/O, or bad, such as when accidentally destroying random memory.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 指针和数组在某些方面相似，它们都可以用来访问一段内存。数组受其大小限制（尽管它们可能会溢出），而指针则不受此限制。C语言不限制指针的使用，这赋予了语言强大的能力。这种能力可以被用来做有益的事情，例如处理内存映射的
    I/O，也可以用来做坏事，例如意外地破坏随机内存。
- en: As we are seeing, C gives programmers the power to fully use their machines.
    But this power comes at a cost. C does not prevent you from doing something stupid.
    C gives you tools like arrays and pointers to organize your data. It’s up to you
    to do it wisely.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，C语言赋予了程序员完全使用计算机的能力。但这种能力是有代价的。C语言不会阻止你做傻事。C语言为你提供了像数组和指针这样的工具来组织数据。是否明智地使用它们，取决于你自己。
- en: Programming Problems
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程问题
- en: Write a program to find the lowest and highest numbered elements in an array
    of integers.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，查找整数数组中最低和最高编号的元素。
- en: Write a program to scan an array for duplicate numbers. The duplicated numbers
    will be in consecutive elements.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，扫描数组中的重复数字。重复的数字将出现在连续的元素中。
- en: Write a program to scan an array for duplicate numbers that may occur anywhere
    in the array.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，扫描数组中的重复数字，这些重复数字可能出现在数组的任何位置。
- en: Create a program that prints only the odd numbers of an array.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个程序，只打印数组中的奇数。
- en: Write a program that goes through a string and makes the first letter of each
    word uppercase. You’ll need to look up the standard C functions `isalpha` and
    `toupper`.*
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，遍历字符串并将每个单词的首字母转换为大写。你需要查阅标准C函数`isalpha`和`toupper`。*
