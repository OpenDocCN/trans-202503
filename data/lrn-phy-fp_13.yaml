- en: '12'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '12'
- en: CREATING STAND-ALONE PROGRAMS
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 创建独立程序
- en: '![Image](Images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common.jpg)'
- en: Up to this point, we’ve used GHCi to do all of our calculations and to show
    us the results. We’ve written fairly sophisticated source code files, but we’ve
    always loaded them into GHCi to use their functions. Haskell, however, is a full-featured,
    production-ready computer language, and it’s completely capable of compiling stand-alone
    programs that don’t require any GHCi involvement. The animations in [Chapter 13](ch13.xhtml)
    and later chapters are best carried out using stand-alone programs rather than
    GHCi.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用 GHCi 进行所有计算并显示结果。我们已经编写了相当复杂的源代码文件，但我们一直将它们加载到 GHCi 中以使用其函数。然而，Haskell
    是一种功能齐全、适合生产环境的计算机语言，完全能够编译无需任何 GHCi 参与的独立程序。[第 13 章](ch13.xhtml)及后续章节中的动画演示最好使用独立程序来执行，而不是
    GHCi。
- en: This chapter explains three different ways to make a stand-alone (executable)
    program. The most basic way uses `ghc` to produce the executable program. With
    this method, you are responsible for installing any library packages that your
    program needs. The second way uses `cabal`, which will automatically install the
    library packages your program needs, but these packages must be listed in the
    appropriate place in a configuration file. The third way uses `stack`, which does
    even more things automatically, such as installing a version of the GHC compiler
    compatible with versions of packages you request. To make a stand-alone program,
    you need to use only one of these three methods. If you are new to Haskell, you
    may find the `stack` method to be the easiest to use.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了三种不同的构建独立（可执行）程序的方法。最基本的方法是使用`ghc`来生成可执行程序。使用这种方法时，你需要自己负责安装程序所需的任何库包。第二种方法是使用`cabal`，它会自动安装程序所需的库包，但这些包必须在配置文件的适当位置列出。第三种方法是使用`stack`，它会自动执行更多操作，比如安装与你请求的包版本兼容的
    GHC 编译器版本。要创建一个独立程序，你只需使用这三种方法中的一种。如果你是 Haskell 新手，你可能会发现`stack`方法是最容易使用的。
- en: For each of the three methods, we’ll go through the steps required to produce
    an executable program (a) for a very simple program and (b) for a program that
    uses both modules we have written and modules other people have written.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这三种方法中的每一种，我们将逐步讲解如何生成一个可执行程序：（a）用于一个非常简单的程序，（b）用于一个同时使用我们编写的模块和其他人编写的模块的程序。
- en: Using GHC to Make a Stand-Alone Program
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 GHC 构建独立程序
- en: In this section, we use GHC directly to make a stand-alone program. We do this
    first for a very simple program called “Hello, world!” and then for a more complex
    program that imports modules.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们直接使用 GHC 来创建独立程序。首先，我们为一个非常简单的程序“你好，世界！”做演示，然后再为一个更复杂的程序做演示，该程序导入了模块。
- en: Hello, World!
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 你好，世界！
- en: The simplest stand-alone program people often write when learning a new language
    is called “Hello, world!” All this program does is print the words “Hello, world!”
    and exit. For many computer languages, it makes sense to learn how to write the
    “Hello, world!” program very early in the process of learning the language. However,
    in Haskell, it doesn’t make sense to learn “Hello, world!” early because the “Hello,
    world!” program is all about producing an effect, namely printing something on
    the screen, while the core of Haskell programming, and functional programming
    in general, is about pure functions that have no effect.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习一门新语言时，人们通常编写的最简单的独立程序被称为“你好，世界！”。这个程序的功能就是打印“你好，世界！”并退出。对于许多计算机语言来说，学习如何编写“你好，世界！”程序是语言学习过程中的早期步骤。然而，在
    Haskell 中，提早学习“你好，世界！”没有太大意义，因为“你好，世界！”程序的重点是产生效果，即在屏幕上打印某些内容，而 Haskell 编程的核心，甚至是函数式编程的核心，是关于纯函数的，纯函数没有副作用。
- en: 'The “Hello, world!” program in Haskell consists of two lines of code:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Haskell 中的“你好，世界！”程序由两行代码组成：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Every stand-alone program needs a function called `main`, which usually has
    type `IO ()`. We first introduced `IO ()` in [Chapter 7](ch07.xhtml) as the type
    of an impure, or effectful, function that returns no meaningful value but produces
    an effect. In general, the type `IO a` represents a value of type `a` along with
    an effect.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每个独立程序都需要一个名为`main`的函数，它通常具有类型`IO ()`。我们在[第 7 章](ch07.xhtml)中首次介绍了`IO ()`，它是一个不返回有意义值但会产生副作用的非纯函数的类型。一般来说，`IO
    a`类型表示一个类型为`a`的值以及一个副作用。
- en: The `main` function needs to produce some effect; otherwise, we wouldn’t be
    able to tell that the program actually ran. The purpose of the effectful function
    `main` is to describe to the compiler what we want the computer to *do*, and the
    type `IO ()` is the perfect type for this because it represents an effect without
    a meaningful value.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`main`函数需要产生某些效果，否则我们无法确认程序是否真正运行。`main`这个有副作用的函数的目的是向编译器描述我们希望计算机*做什么*，而`IO
    ()`类型正好适合这个目的，因为它表示一个没有实际值的副作用。'
- en: The function `putStrLn` is a Prelude function that takes a string as input,
    prints it on the screen, and advances to the next line so that any further printing
    occurs there. There is also a function called `putStr`, with the same type as
    `putStrLn`, that prints a string without advancing to the next line so that further
    printing occurs directly after the printed string. The `Ln` at the end of the
    name reminds us that the function advances to the next line after printing. The
    type of `putStrLn` shows us that it takes a string as input and produces an effect.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`putStrLn`是一个Prelude函数，它接受一个字符串作为输入，在屏幕上打印该字符串，并换行，以便任何后续打印将在新的一行显示。还有一个名为`putStr`的函数，类型与`putStrLn`相同，它打印一个字符串，但不会换行，因此后续的打印会直接跟在打印的字符串后面。名称中的`Ln`提醒我们，该函数在打印后会换行。`putStrLn`的类型显示它接受一个字符串作为输入，并产生一个效果。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Suppose we put these two lines in a source code file named *hello.hs*. If your
    operating system offers a command line, the command
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们将这两行代码放在一个名为*hello.hs*的源代码文件中。如果你的操作系统提供了命令行，命令如下：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: will compile the source code file *hello.hs* to produce an executable file,
    called *hello*, that you can run. On a Linux system, you can run the program *hello*
    from the command line with the command
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将编译源代码文件*hello.hs*，生成一个名为*hello*的可执行文件，你可以运行它。在Linux系统上，你可以通过命令行使用命令运行程序*hello*：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The dot-slash in front of the program name tells the operating system to execute
    the program called *hello* that is in the current working directory. Omitting
    the dot-slash will cause the operating system to search its standard search path
    for a program called *hello*, which it may not find if the current working directory
    is not included in the search path.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 程序名称前面的点斜杠告诉操作系统执行当前工作目录中的名为*hello*的程序。如果省略点斜杠，操作系统会在标准搜索路径中查找名为*hello*的程序，如果当前工作目录不在搜索路径中，可能找不到该程序。
- en: A Program That Imports Modules
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 一个导入模块的程序
- en: Now we look at compiling a stand-alone program that uses functions from the
    `SimpleVec` module we wrote in [Chapter 10](ch10.xhtml) and functions from the
    `Graphics` `.Gnuplot.Simple` module from the `gnuplot` package. The file *SimpleVec.hs*
    containing the source code for the `SimpleVec` module is available at [https://lpfp.io](https://lpfp.io).
    [Listing 12-1](ch12.xhtml#ch12list1) shows the stand-alone program we want to
    compile.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来编译一个独立的程序，使用我们在[第10章](ch10.xhtml)中编写的`SimpleVec`模块的函数，以及`gnuplot`包中的`Graphics`
    `.Gnuplot.Simple`模块的函数。包含`SimpleVec`模块源代码的文件*SimpleVec.hs*可以在[https://lpfp.io](https://lpfp.io)找到。[列表
    12-1](ch12.xhtml#ch12list1)展示了我们想要编译的独立程序。
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 12-1: The stand-alone program MakeTrajectoryGraph.hs, which uses functions
    from the SimpleVec module and the Graphics.Gnuplot.Simple module*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 12-1：独立程序MakeTrajectoryGraph.hs，使用了SimpleVec模块和Graphics.Gnuplot.Simple模块的函数*'
- en: The program in [Listing 12-1](ch12.xhtml#ch12list1) produces a graph of the
    trajectory of a ball thrown from the top of a building 10 m above the ground with
    an initial speed of 20 m/s at an angle 3^(0∘) above horizontal. The program produces
    a file named *projectile.png* containing the graph. To do its work, this program
    imports functions such as `projectilePos`, `xComp`, `zComp`, `iHat`, and `kHat`
    from the `SimpleVec` module of [Chapter 10](ch10.xhtml). The program also uses
    the `plotPath` function from the `Graphics.Gnuplot.Simple` module. Because the
    data constructors `Title`, `XLabel`, and so on of the `Attribute` data type are
    used, we import the `Attribute` data type with its constructors by appending the
    name of the type `Attribute` with two dots enclosed in parentheses.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 12-1](ch12.xhtml#ch12list1)中的程序生成了一个图表，展示了从离地面10米高的建筑物顶部抛出的一个球的轨迹，初速为20米/秒，抛掷角度为水平面上方3^(0∘)。程序生成了一个名为*projectile.png*的文件，包含了该图表。为了完成这项工作，程序从[第10章](ch10.xhtml)的`SimpleVec`模块导入了如`projectilePos`、`xComp`、`zComp`、`iHat`和`kHat`等函数。程序还使用了来自`Graphics.Gnuplot.Simple`模块的`plotPath`函数。由于使用了数据构造器`Title`、`XLabel`等来自`Attribute`数据类型，因此我们通过在类型名`Attribute`后附加两个冒号和括号，导入了`Attribute`数据类型及其构造器。'
- en: 'We’ll assume that the code in [Listing 12-1](ch12.xhtml#ch12list1) is contained
    in a source code file called *MakeTrajectoryGraph.hs*. To use `ghc` to compile
    the program, two things must be true:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设[清单 12-1](ch12.xhtml#ch12list1)中的代码包含在名为*MakeTrajectoryGraph.hs*的源代码文件中。要使用`ghc`编译程序，必须满足两个条件：
- en: The file *SimpleVec.hs* containing the `SimpleVec` module must be present in
    the same directory as the file *MakeTrajectoryGraph.hs* containing the main program.
    We’ll call this directory the *working directory*.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含`SimpleVec`模块的文件*SimpleVec.hs*必须与包含主程序的文件*MakeTrajectoryGraph.hs*位于同一目录。我们将这个目录称为*工作目录*。
- en: 'The working directory must have access to the `Graphics.Gnuplot.Simple` module.
    This requires that the `gnuplot` package be installed either (a) globally, so
    it can be accessed from any directory, or (b) locally, so it can be accessed from
    the working directory. To install the `gnuplot` package globally, issue the following
    command:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作目录必须能够访问`Graphics.Gnuplot.Simple`模块。这要求`gnuplot`包已被安装，（a）全局安装，以便从任何目录访问，或（b）局部安装，以便从工作目录访问。要全局安装`gnuplot`包，请发出以下命令：
- en: '[PRE5]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'On my computer, this command creates or changes the file */home/ walck/.ghc/x86_64-linux-8.10.5/environments/default*
    that contains the list of globally installed Haskell packages. To install the
    `gnuplot` package locally (in the working directory), issue the following command:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我的计算机上，此命令会创建或更改文件*/home/walck/.ghc/x86_64-linux-8.10.5/environments/default*，其中包含了全局安装的Haskell包列表。要在本地（即工作目录中）安装`gnuplot`包，请发出以下命令：
- en: '[PRE6]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This command creates or changes a file with a name such as *.ghc .environment.x86_64-linux-8.10.5*
    in the current working directory. This file contains a list of packages installed
    locally (in the current working directory). See the appendix for more information
    about installing Haskell packages.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令会在当前工作目录中创建或更改一个名为*.ghc .environment.x86_64-linux-8.10.5*的文件。该文件包含了在本地安装的包列表（即当前工作目录中的包）。有关安装Haskell包的更多信息，请参见附录。
- en: 'Once these two criteria are met, we compile the source code file *Make TrajectoryGraph.hs*
    into an executable program by issuing the following command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦满足这两个条件，我们通过发出以下命令，将源代码文件*MakeTrajectoryGraph.hs*编译成可执行程序：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This command must be issued from the same working directory that contains the
    file *MakeTrajectoryGraph.hs*, the file *SimpleVec.hs*, and access to the `Graphics.Gnuplot.Simple`
    module.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令必须从包含文件*MakeTrajectoryGraph.hs*、文件*SimpleVec.hs*并且能够访问`Graphics.Gnuplot.Simple`模块的同一工作目录中发出。
- en: 'If the compiler cannot find the `Graphics.Gnuplot.Simple` module, you will
    see an error like the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果编译器找不到`Graphics.Gnuplot.Simple`模块，你将看到如下错误：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this case, you must install the `gnuplot` package, either globally or locally,
    so it is accessible from the working directory.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，必须安装`gnuplot`包，无论是全局安装还是局部安装，这样它才可以从工作目录中访问。
- en: 'If all goes well, the compiler will produce an executable file called *Make
    TrajectoryGraph* in the current working directory. The executable file is not
    installed in any global location, so to run the program, you’ll need to give the
    full pathname of the executable file or run it from the directory in which it
    lives by prefixing the executable filename with `./`, as shown here:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，编译器将在当前工作目录下生成一个名为*Make TrajectoryGraph*的可执行文件。该可执行文件不会安装到任何全局位置，因此要运行程序，你需要提供可执行文件的完整路径名，或者通过在可执行文件名前加上`./`来从所在目录运行，如下所示：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The advantage of using `ghc` to make your executable program is there are no
    configuration files to worry about. The disadvantage is that any modules your
    program needs, whether written by you or someone else, must be accessible from
    the directory in which your program resides. As the number of library packages
    your program depends on increases, the burden of this installation increases,
    especially because versions of packages that are acceptable to your program may
    conflict with versions that are acceptable to other programs you write or to other
    library packages you want to use. The `cabal` and `stack` tools we’ll describe
    next were designed to manage this complexity, so you don’t need to deal with it
    yourself.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ghc`来生成可执行程序的好处是你不需要担心配置文件。缺点是程序所需的任何模块，不论是你自己写的还是其他人写的，都必须能够从程序所在的目录中访问。随着你的程序依赖的库包数量增加，这种安装负担也在增加，特别是因为程序可以接受的包版本可能与其他程序或你想使用的其他库包的可接受版本发生冲突。我们接下来要介绍的`cabal`和`stack`工具是为了解决这种复杂性设计的，这样你就不必亲自处理这些问题。
- en: Using Cabal to Make a Stand-Alone Program
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Cabal制作独立程序
- en: We used `cabal` to install a package in the previous section. But the `cabal`
    tool can play a larger role in your Haskell ecosystem, managing the modules and
    packages your stand-alone program needs and using versions that work together,
    even if they conflict with packages used by other projects you might have. To
    get basic information about what the `cabal` tool can do, issue the command
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们使用了`cabal`安装了一个包。但是`cabal`工具在你的Haskell生态系统中可以发挥更大的作用，它可以管理你的独立程序所需的模块和包，并使用兼容的版本，即使它们与其他项目使用的包发生冲突。要获取有关`cabal`工具可以做什么的基本信息，请输入以下命令
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: at your command prompt.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令提示符下输入。
- en: The first step in using `cabal` to manage the dependencies of your project is
    to make a fresh subdirectory that will contain the source code of your stand-alone
    program as well as some files that `cabal` needs to do its work. We create a new
    directory called *Trajectory* under the current directory using the following
    command. Use a unique name for this directory because the name will be the default
    name for the executable program as well as the project generally.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`cabal`来管理项目依赖关系的第一步是创建一个新的子目录，里面包含你的独立程序的源代码以及`cabal`执行其工作的所需文件。我们使用以下命令在当前目录下创建一个名为*Trajectory*的新目录。为这个目录使用一个唯一的名称，因为该名称将成为可执行程序的默认名称，也是项目的一般名称。
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We enter this new directory, and make it the working directory, by issuing the
    command
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们进入这个新目录，并通过输入命令使其成为工作目录
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'where `cd` stands for “change directory.” Inside this fresh directory, we issue
    the following command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`cd`代表“更改目录”。在这个新目录内，我们输入以下命令：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This creates a file called *Trajectory.cabal* and a subdirectory called *app*,
    which contains a file called *Main.hs*. Older versions of `cabal` create *Main.hs*
    in the current directory rather than in the *app* subdirectory.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为*Trajectory.cabal*的文件和一个名为*app*的子目录，其中包含一个名为*Main.hs*的文件。旧版本的`cabal`会将*Main.hs*创建在当前目录，而不是*app*子目录中。
- en: Imagining that you might want to share your code with others at some point,
    `cabal` wants you to have a file called *LICENSE* that contains the terms for
    which others may use your code. The `cabal` tool may demand that you have such
    a file before it will compile your code, so be prepared to produce one. The `cabal`
    program does not care about the contents of the *LICENSE* file, only that it exists.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你可能希望将代码与其他人共享，`cabal`要求你有一个名为*LICENSE*的文件，内容包括其他人可以使用你代码的条款。`cabal`工具可能要求你在编译代码之前有这样的文件，因此请准备好提供一个。`cabal`程序并不关心*LICENSE*文件的内容，只关心它是否存在。
- en: The file *Main.hs* is a default source code file that contains a very simple
    program. To compile it, type
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 文件*Main.hs*是一个默认的源代码文件，包含一个非常简单的程序。要编译它，请输入
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: at your command prompt while the current working directory is *Trajectory*.
    If everything goes smoothly, `cabal` will compile the code in *Main.hs*, produce
    an executable file called *Trajectory*, and make that executable file available
    globally, meaning it can be run by giving its name, *Trajectory*, rather than
    its full pathname containing the directory structure leading to the file.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令提示符下，当当前工作目录为*Trajectory*时，如果一切顺利，`cabal`将编译*Main.hs*中的代码，生成名为*Trajectory*的可执行文件，并使该可执行文件在全局可用，这意味着可以通过输入其名称*Trajectory*来运行，而不需要输入包含文件路径结构的完整路径名。
- en: We can test the executable with
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令测试可执行文件：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: and we should get a short welcome message.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们应该看到一条简短的欢迎信息。
- en: 'Moving on to using `cabal` to produce a stand-alone program for the code in
    [Listing 12-1](ch12.xhtml#ch12list1), we take a look at the file *Trajectory.cabal*.
    This is `cabal`’s configuration file that tells it how to go about compiling source
    code into executable code for the project in the current directory. The command
    `cabal` `init` shown earlier selected default values for several options when
    it created *Trajectory.cabal*. The lines we are interested in right now look something
    like the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 继续使用`cabal`为[清单12-1](ch12.xhtml#ch12list1)中的代码生成独立程序，我们查看*Trajectory.cabal*文件。这是`cabal`的配置文件，告诉它如何将源代码编译成当前目录项目的可执行代码。之前展示的`cabal`
    `init`命令在创建*Trajectory.cabal*时选择了多个选项的默认值。我们现在关注的行大致如下所示：
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The first line indicates that the name of the executable program will be *Trajectory*.
    This default name matches the name of the project directory; however, we could
    change it to something else if we wanted to. The second line gives the name of
    the source code file that has the function `main` in it. By default, this file
    is called *Main.hs* and is located in the *app* subdirectory of the *Trajectory*
    directory. The lines preceded by double hyphens are comments. The line beginning
    with `build-depends:` is a list of packages that the main program depends on.
    By default, the *.cabal* file includes only a dependence on the package `base`.
    The `base` package makes all of the Prelude functions and types available. The
    line beginning with `hs-source-dirs:` is a list of subdirectories that contain
    source files.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行表示可执行程序的名称将是*Trajectory*。这个默认名称与项目目录的名称相匹配；但是，如果我们愿意，也可以将其更改为其他名称。第二行给出了包含`main`函数的源代码文件的名称。默认情况下，这个文件被称为*Main.hs*，并位于*Trajectory*目录的*app*子目录中。由双短横线开头的行是注释。以`build-depends:`开头的行列出了主程序所依赖的包。默认情况下，*.cabal*文件只包含对`base`包的依赖。`base`包使所有Prelude函数和类型可用。以`hs-source-dirs:`开头的行是包含源文件的子目录列表。
- en: 'To compile the code in [Listing 12-1](ch12.xhtml#ch12list1), which is contained
    in the file *Make TrajectoryGraph.hs*, we need to do three things:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译[清单12-1](ch12.xhtml#ch12list1)中的代码，该代码包含在*Make TrajectoryGraph.hs*文件中，我们需要做三件事：
- en: 'Copy or move the file *MakeTrajectoryGraph.hs* into the *app* sub-directory
    of the *Trajectory* directory. Then edit *Trajectory.cabal* to change the name
    of the main source code file from *Main.hs* to *MakeTrajectoryGraph.hs*. The modified
    line in *Trajectory.cabal* looks like this:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件*MakeTrajectoryGraph.hs*复制或移动到*Trajectory*目录的*app*子目录中。然后编辑*Trajectory.cabal*，将主源代码文件的名称从*Main.hs*更改为*MakeTrajectoryGraph.hs*。修改后的*Trajectory.cabal*中的行如下所示：
- en: '[PRE17]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Copy or move the file *SimpleVec.hs* containing the `SimpleVec` module into
    the *app* subdirectory of the *Trajectory* directory. (This file, along with all
    the other modules in this book, is available at [https://lpfp.io](https://lpfp.io).)
    Then edit *Trajectory.cabal* to uncomment (remove the double hyphen) the `other-modules:`
    line and add the `SimpleVec` module (without the *.hs* extension).
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将包含`SimpleVec`模块的文件*SimpleVec.hs*复制或移动到*Trajectory*目录的*app*子目录中。（该文件以及本书中的所有其他模块可以在[https://lpfp.io](https://lpfp.io)获取。）然后编辑*Trajectory.cabal*，取消注释（去掉双短横线）`other-modules:`行，并添加`SimpleVec`模块（不带*.hs*扩展名）。
- en: '[PRE18]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Edit *Trajectory.cabal* to include `gnuplot` in the `build-depends:` line.
    This allows us to import the module `Graphics.Gnuplot.Simple` in our main program.
    With all three changes, the modified lines in *Trajectory.cabal* look like this:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑*Trajectory.cabal*，在`build-depends:`行中包含`gnuplot`。这样，我们就可以在主程序中导入模块`Graphics.Gnuplot.Simple`。做完这三项更改后，修改后的*Trajectory.cabal*中的行如下所示：
- en: '[PRE19]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: While the `base` package has bounds on the allowed versions of `base`, we have
    not given version bounds on the `gnuplot` package. The purpose of version bounds
    is to allow code that is still in development to evolve in ways that are not compatible
    with previous versions. Library package writers follow conventions stating that
    minor changes and bug fixes are indicated by small changes in the version number,
    while major changes are indicated by bigger changes in the version number. Using
    version bounds, like those with `base` just shown, is a technique designed to
    ensure you are getting the functionality you expect.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `base` 包对允许的 `base` 版本有界限，但我们并未为 `gnuplot` 包指定版本限制。版本限制的目的是允许仍在开发中的代码以与以前版本不兼容的方式演变。库包的作者遵循约定，表示小版本号变化和修复是由小的版本号变化表示的，而主要变更则通过版本号的较大变化来表示。使用版本限制，就像刚刚展示的
    `base`，是一种确保你获得期望功能的技术。
- en: Adding `gnuplot` to the list of build dependencies causes `cabal` to install
    the `gnuplot` package, but in a way that makes it private to this project, the
    project in the *Trajectory* directory. The `gnuplot` package will not be available
    in GHCi, for example, as a result of adding it to the build dependencies for this
    project. To make `gnuplot` available in GHCi, follow the instructions in the appendix.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `gnuplot` 添加到构建依赖列表中，会导致 `cabal` 安装 `gnuplot` 包，但以使其对这个项目私有的方式，即在 *Trajectory*
    目录中的项目。作为结果，`gnuplot` 包在 GHCi 中将不可用。要使 `gnuplot` 在 GHCi 中可用，请按照附录中的说明进行操作。
- en: Now reissue
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在重新发布
- en: '[PRE20]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: to recompile the program called *Trajectory*. We can test the executable with
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 重新编译名为 *Trajectory* 的程序。我们可以用以下命令测试可执行文件：
- en: '[PRE21]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: and the executable should create a file called *projectile.png*.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 可执行文件应生成一个名为 *projectile.png* 的文件。
- en: The packages, such as `gnuplot`, that `cabal` installs reside at [*https://hackage.haskell.org*](https://hackage.haskell.org).
    You can go there to search for, browse, and read documentation about any of the
    packages `cabal` can install.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`cabal` 安装的包，如 `gnuplot`，存放在 [*https://hackage.haskell.org*](https://hackage.haskell.org)
    上。你可以访问该网站搜索、浏览并阅读关于任何 `cabal` 可以安装的包的文档。'
- en: Using Stack to Make a Stand-Alone Program
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Stack 来创建独立程序
- en: The `stack` tool can manage the modules and packages your stand-alone program
    needs, using versions that work together, even if they conflict with packages
    used by other projects you might have. To get basic information about what the
    `stack` tool can do, issue the command
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`stack` 工具可以管理你的独立程序所需的模块和包，使用能够协同工作的版本，即使它们与你可能拥有的其他项目使用的包发生冲突。要获取有关 `stack`
    工具功能的基本信息，请执行以下命令'
- en: '[PRE22]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: at your command prompt.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的命令提示符下。
- en: The first step in using `stack` to manage the dependencies of a new project
    called *Trajectory* is to issue the command
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `stack` 管理名为 *Trajectory* 的新项目的依赖项的第一步是执行以下命令
- en: '[PRE23]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This will make a subdirectory with the name *Trajectory*. We enter this new
    directory, and make it the current directory, by issuing the following command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为 *Trajectory* 的子目录。我们通过执行以下命令进入这个新目录，并将其设置为当前目录：
- en: '[PRE24]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Inside this directory, we find several files and subdirectories that `stack`
    has created for us. The most important file is *Trajectory.cabal*, which contains
    important information about how your program gets compiled. The `stack` tool is
    built on top of the `cabal` tool and uses its configuration file. The most important
    lines from *Trajectory.cabal* look like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个目录中，我们可以找到 `stack` 为我们创建的几个文件和子目录。最重要的文件是 *Trajectory.cabal*，它包含关于如何编译你的程序的重要信息。`stack`
    工具是在 `cabal` 工具的基础上构建的，并使用其配置文件。*Trajectory.cabal* 中最重要的几行内容如下：
- en: '[PRE25]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Here we see two stanzas: one beginning with `library` and the other beginning
    with `executable`. The `library` stanza is in charge of the names, locations,
    and dependencies of modules we have written, such as `SimpleVec`. The names of
    modules we have written that we want `stack` to manage go under the heading `exposed-modules:`,
    and they are separated by commas if there is more than one module. The default
    program that comes with a new stack project uses only one module, named `Lib`.
    Here, we do not need to use the `other-modules:` heading; we can leave it alone.
    The directories in which our modules are located go under the heading `hs-source-dirs:`.
    By default, the subdirectory *src* under the directory *Trajectory* is the location
    for modules, and we do not need to change this. We will simply copy or move our
    modules into the *src* directory that `stack` created for us. Packages that we
    have not written but upon which our modules depend, such as `gnuplot`, are listed
    under the `build-depends:` heading.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到两个部分：一个以`library`开头，另一个以`executable`开头。`library`部分负责我们编写的模块的名称、位置和依赖项，例如`SimpleVec`。我们希望`stack`管理的模块名称放在`exposed-modules:`下，如果有多个模块，它们之间用逗号隔开。新建的`stack`项目的默认程序只使用一个模块，名为`Lib`。在这里，我们不需要使用`other-modules:`这一部分，可以保持为空。我们模块所在的目录放在`hs-source-dirs:`下。默认情况下，*Trajectory*目录下的子目录*src*是模块的存放位置，我们不需要修改这个设置。我们只需将模块复制或移动到`stack`为我们创建的*src*目录中。我们没有编写，但模块依赖的包（例如`gnuplot`）列在`build-depends:`下。
- en: The first line of the `executable` stanza indicates that the name of the executable
    program will be *Trajectory-exe*. This default name matches the name we gave the
    project; however, we could change it to something else if we wanted to. The heading
    `main-is:` is followed by the name of the source code file that has the function
    `main` in it. The default value is *Main.hs*. In the `executable` stanza, as in
    the `library` stanza, we do not need to use the `other` `-modules:` heading; we
    can leave it alone. The directories in which the source code for our executable
    (stand-alone) programs are located go under the heading `hs-source-dirs:`. By
    default, the subdirectory *app* under the directory *Trajectory* is the location
    for main program source code, and we do not need to change this. We will simply
    copy or move our code into the *app* directory that `stack` created for us. At
    present, the *app* subdirectory contains the *Main.hs* source code file.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`executable`部分的第一行表明可执行程序的名称将是*Trajectory-exe*。这个默认名称与我们为项目命名时一致，但如果需要，我们可以将其改为其他名称。`main-is:`后跟包含`main`函数的源代码文件的名称。默认值为*Main.hs*。在`executable`部分，和`library`部分一样，我们不需要使用`other-modules:`这一部分，可以保持为空。可执行文件（独立程序）源代码所在的目录放在`hs-source-dirs:`下。默认情况下，*Trajectory*目录下的子目录*app*是主程序源代码的存放位置，我们不需要更改这个设置。我们只需将代码复制或移动到`stack`为我们创建的*app*目录中。目前，*app*子目录包含*Main.hs*源代码文件。'
- en: The file *Main.hs* is a default source code file that contains a very simple
    program. To compile it, type
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 文件*Main.hs*是一个默认的源代码文件，包含一个非常简单的程序。要编译它，输入以下命令：
- en: '[PRE26]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: at your command prompt while the current working directory is *Trajectory* (the
    directory containing the *.cabal* file). If everything goes smoothly, `stack`
    will compile the code in *Main.hs*, produce an executable file called *Trajectory
    -exe*, and make that executable file available globally, so it can be run, even
    from other directories, by giving its name, *Trajectory-exe*.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令提示符下，当前工作目录是*Trajectory*（包含*.cabal*文件的目录）。如果一切顺利，`stack`将编译*Main.hs*中的代码，生成一个名为*Trajectory-exe*的可执行文件，并将该可执行文件设置为全局可用，因此即使从其他目录，也可以通过输入其名称*Trajectory-exe*来运行它。
- en: We can test the executable with
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式测试可执行文件：
- en: '[PRE27]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: and we should see a short text string appear on the screen.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们应该看到屏幕上出现一串简短的文本。
- en: 'Moving on to using `stack` to produce a stand-alone program for the code in
    [Listing 12-1](ch12.xhtml#ch12list1), contained in the file *MakeTrajectoryGraph.hs*,
    we need to do three things:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`stack`将[清单12-1](ch12.xhtml#ch12list1)中的代码，存储在文件*MakeTrajectoryGraph.hs*中，生成一个独立程序，步骤如下：
- en: 'Copy or move the file *MakeTrajectoryGraph.hs* into the *app* subdirectory
    of the *Trajectory* directory. Then edit *Trajectory.cabal* to change the name
    of the main source code file from *Main.hs* to *MakeTrajectory Graph.hs*. The
    modified line in *Trajectory.cabal* looks like this:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件 *MakeTrajectoryGraph.hs* 复制或移动到 *Trajectory* 目录下的 *app* 子目录中。然后编辑 *Trajectory.cabal*，将主源代码文件的名称从
    *Main.hs* 改为 *MakeTrajectoryGraph.hs*。修改后的 *Trajectory.cabal* 中的行如下：
- en: '[PRE28]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Copy or move the file *SimpleVec.hs* containing the `SimpleVec` module into
    the *src* subdirectory of the *Trajectory* directory. This file, along with all
    the other modules in this book, is available at [https://lpfp.io](https://lpfp.io).
    Then edit *Trajectory.cabal* to include the `SimpleVec` module in the `exposed-modules:`
    field of the `library` stanza.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将包含 `SimpleVec` 模块的文件 *SimpleVec.hs* 复制或移动到 *Trajectory* 目录下的 *src* 子目录中。该文件以及本书中的所有其他模块可以在
    [https://lpfp.io](https://lpfp.io) 获取。然后编辑 *Trajectory.cabal*，将 `SimpleVec` 模块添加到
    `library` 部分的 `exposed-modules:` 字段中。
- en: '[PRE29]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Edit *Trajectory.cabal* to include the `gnuplot` package under the `build`
    `-depends:` heading of the `executable` stanza. This allows us to import the module
    `Graphics.Gnuplot.Simple` in our main program. With all three changes, the modified
    lines in *Trajectory.cabal* look like this: [PRE30]'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 *Trajectory.cabal*，在 `executable` 部分的 `build` `-depends:` 头下包含 `gnuplot`
    包。这允许我们在主程序中导入 `Graphics.Gnuplot.Simple` 模块。做完这三项更改后，*Trajectory.cabal* 中的修改行如下：[PRE30]
- en: Keep in mind package names, not module names, need to be included in the list
    of build dependencies. When using `stack`, accidentally substituting the module
    name `Graphics.Gnuplot.Simple` for the package name `gnuplot` gives a parse error
    with no hint of what the real trouble is.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，构建依赖中需要包含的是包名，而不是模块名。当使用 `stack` 时，错误地将模块名 `Graphics.Gnuplot.Simple` 替换为包名
    `gnuplot` 会导致解析错误，并且没有任何提示告诉你真正的问题所在。
- en: Now reissue
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在重新发布
- en: '[PRE31]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: to recompile the program called *Trajectory-exe*. We can test the executable
    with
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 重新编译名为 *Trajectory-exe* 的程序。我们可以用以下命令测试该可执行文件：
- en: '[PRE32]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: and the executable should create a file called *projectile.png*.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 可执行文件应当创建一个名为 *projectile.png* 的文件。
- en: The packages, such as `gnuplot`, that `stack` installs reside at [*https://hackage.haskell.org*](https://hackage.haskell.org).
    You can go there to search for, browse, and read documentation about any of the
    packages `stack` can install.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`stack` 安装的包，例如 `gnuplot`，存放在 [*https://hackage.haskell.org*](https://hackage.haskell.org)
    上。你可以访问该网站，搜索、浏览并阅读关于 `stack` 可以安装的任何包的文档。'
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter showed three ways to produce a stand-alone Haskell program. The
    first uses `ghc`, and you must install any needed library packages yourself. The
    second uses `cabal`, which can help manage library package dependencies. The third
    uses `stack`, which can also help manage library package dependencies. In the
    next chapter, we will put these techniques to use in making animations.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 本章展示了三种生成独立 Haskell 程序的方法。第一种使用 `ghc`，你必须自己安装任何需要的库包。第二种使用 `cabal`，它可以帮助管理库包的依赖。第三种使用
    `stack`，它同样可以帮助管理库包的依赖。在下一章，我们将把这些技巧应用于制作动画。
- en: Exercises
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习
- en: '**Exercise 12.1.** The print function is useful inside a stand-alone program.
    Ask GHCi for the type of print, and GHCi will tell you that print is a function
    whose input can have any type that is an instance of Show and whose output is
    IO (), meaning that it *does* something. What print does is send the value of
    its input to your screen. You can print numbers, lists, strings, and anything
    that can be shown. You can use print inside of GHCi, but it is not needed there
    because GHCi automatically prints the value of whatever you give it.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 12.1.** print 函数在独立程序中非常有用。询问 GHCi print 的类型，GHCi 会告诉你 print 是一个函数，它的输入可以是任何
    Show 实例的类型，输出是 IO ()，意味着它*执行*某些操作。print 的作用是将输入的值输出到屏幕上。你可以打印数字、列表、字符串以及任何可以显示的内容。你可以在
    GHCi 中使用 print，但在 GHCi 中并不需要它，因为 GHCi 会自动打印你提供的值。'
- en: 'Write a stand-alone program that prints the first 21 powers of 2, starting
    with 2⁰ and ending with 2^(20). When you run your program, the output should look
    like this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个独立程序，打印前 21 个 2 的幂，从 2⁰ 到 2^(20)。当你运行程序时，输出应该如下所示：
- en: '[PRE33]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
