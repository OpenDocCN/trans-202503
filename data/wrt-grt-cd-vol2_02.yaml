- en: '**2**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2**'
- en: '**SHOULDN’T YOU LEARN ASSEMBLY LANGUAGE?**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**你不应该学习汇编语言吗？**'
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: 'Although this book will teach you how to write better code without mastering
    assembly language, the absolute best HLL programmers do know assembly, and that
    knowledge is one of the reasons they write great code. As mentioned in [Chapter
    1](ch01.xhtml#ch01), although this book can provide a 90 percent solution if you
    just want to write great HLL code, to fill in that last 10 percent you’ll need
    to learn assembly language. While teaching you assembly language is beyond the
    scope of this book, it’s still an important subject to discuss. To that end, this
    chapter will explore the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书将教你如何在不精通汇编语言的情况下编写更好的代码，但真正出色的高级语言程序员都知道汇编语言，而这种知识正是他们编写优秀代码的原因之一。如[第1章](ch01.xhtml#ch01)所提到的，尽管本书能为你提供一个90%的解决方案，帮助你编写优秀的高级语言代码，但要填补最后的10%，你需要学习汇编语言。虽然教授汇编语言超出了本书的范围，但它仍然是一个重要的主题，值得讨论。因此，本章将探讨以下内容：
- en: The problem with learning assembly language
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习汇编语言的难点
- en: High-level assemblers and how they can make learning assembly language easier
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级汇编器及其如何使学习汇编语言变得更容易
- en: How you can use real-world products like Microsoft Macro Assembler (MASM), Gas
    (Gnu Assembler), and HLA (High-Level Assembly) to easily learn assembly language
    programming
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用现实世界的工具，如 Microsoft Macro Assembler (MASM)、Gas（Gnu Assembler）和 HLA（高级汇编语言），轻松学习汇编语言编程
- en: How an assembly language programmer *thinks* (that is, the assembly language
    programming paradigm)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 汇编语言程序员如何*思考*（即汇编语言编程范式）
- en: Resources available to help you learn assembly language programming
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用的资源，帮助你学习汇编语言编程
- en: '**2.1 Benefits and Roadblocks to Learning Assembly Language**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**2.1 学习汇编语言的好处与障碍**'
- en: Learning assembly language—*really* learning assembly language—offers two benefits.
    First, you’ll gain a complete understanding of the machine code that a compiler
    can generate. By mastering assembly language, you’ll achieve the 100 percent solution
    just described and be able to write better HLL code. Second, you’ll be able to
    code critical parts of your application in assembly language when your HLL compiler
    is incapable, even with your help, of producing the best possible code. Once you’ve
    absorbed the lessons of the following chapters to hone your HLL skills, moving
    on to learn assembly language is a very good idea.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 学习汇编语言——*真正*学习汇编语言——有两个好处。首先，你将完全理解编译器能够生成的机器代码。通过掌握汇编语言，你将实现前面所述的100%解决方案，并能够编写更好的高级语言代码。其次，当你的高级语言编译器即使在你的帮助下也无法生成最佳代码时，你将能够用汇编语言编写应用程序的关键部分。掌握本书接下来的章节，磨练你的高级语言技巧后，继续学习汇编语言是一个非常好的选择。
- en: There’s one catch to learning assembly language, though. In the past, it’s been
    a long, difficult, and frustrating task. The assembly language programming paradigm
    is sufficiently different from HLL programming that most people feel like they’re
    starting over from square one when learning it. It’s very frustrating when you
    know how to do something in a programming language like C/C++, Java, Swift, Pascal,
    or Visual Basic, but you can’t yet figure out the solution in assembly language.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，学习汇编语言有一个难点。在过去，学习汇编语言是一个漫长、困难且令人沮丧的过程。汇编语言编程范式与高级语言编程有足够的差异，导致大多数人在学习汇编语言时会觉得自己像是从头开始。这非常令人沮丧，因为你已经能在
    C/C++、Java、Swift、Pascal 或 Visual Basic 等编程语言中做到某些事情，但在汇编语言中却无法找到解决方案。
- en: Most programmers like being able to apply past experience when learning something
    new. Unfortunately, traditional approaches to learning assembly language programming
    tend to force HLL programmers to forget what they’ve learned in the past. This
    book, in contrast, offers a way for you to efficiently leverage your existing
    knowledge while learning assembly language.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数程序员喜欢在学习新知识时能够应用以往的经验。不幸的是，传统的汇编语言学习方法往往迫使高级语言（HLL）程序员忘记他们过去所学的内容。与此相反，本书提供了一种方法，帮助你在学习汇编语言时高效利用现有的知识。
- en: '**2.2 How This Book Can Help**'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**2.2 本书如何提供帮助**'
- en: 'Once you’ve read through this book, there are three reasons you’ll find it
    much easier to learn assembly language:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你读完本书，你会发现有三个理由让学习汇编语言变得更加容易：
- en: You’ll be more motivated to learn it because you’ll understand why doing so
    can help you write better code.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你会更有动力去学习它，因为你会理解这样做能帮助你编写更好的代码。
- en: You’ll have had five brief primers on assembly language (80x86, PowerPC, ARM,
    Java bytecode, and Microsoft IL), so even if you’d never seen it before, you’ll
    have learned some by the time you finish this book.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你将已经学习过五个简要的汇编语言入门（80x86、PowerPC、ARM、Java字节码和微软IL），所以即使你之前从未接触过，等你读完这本书时，你也会掌握一些汇编语言的知识。
- en: You’ll have already seen how compilers emit machine code for all the common
    control and data structures, so you’ll have learned one of the most difficult
    lessons for a beginning assembly programmer—how to achieve things in assembly
    language that they already know how to do in an HLL.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你已经看到过编译器如何为所有常见的控制和数据结构生成机器代码，因此你已经学会了作为初学汇编语言程序员最困难的课题之一——如何用汇编语言实现那些在高级语言（HLL）中已经知道怎么做的事情。
- en: Though this book won’t teach you how to become an expert assembly language programmer,
    the large number of example programs that demonstrate how compilers translate
    HLLs into machine code will acquaint you with many assembly language programming
    techniques. You’ll find these useful should you decide to learn assembly language
    after reading this book.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这本书不会教你如何成为一名专家级的汇编语言程序员，但大量的示例程序展示了编译器如何将高级语言翻译成机器代码，这些将让你了解许多汇编语言编程技巧。如果你决定在阅读完这本书后学习汇编语言，你会发现这些技巧很有用。
- en: Certainly, you’ll find this book easier to read if you already know assembly
    language. However, you’ll also find assembly language easier to master once you’ve
    read this book. Since learning assembly language is probably more time-consuming
    than reading this book, the more efficient approach is to start with the book.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果你已经掌握了汇编语言，这本书会更容易阅读。然而，一旦你读完这本书，你也会发现汇编语言更容易掌握。由于学习汇编语言可能比读这本书更耗时，因此更有效的方式是先从这本书开始。
- en: '**2.3 High-Level Assemblers to the Rescue**'
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**2.3 高级汇编器的拯救**'
- en: Way back in 1995, I had a discussion with the University of California, Riverside,
    computer science department chair. I was lamenting the fact that students had
    to start over when taking the assembly course, spending precious time to relearn
    so many things. As the discussion progressed, it became clear that the problem
    wasn’t with assembly language, per se, but with the syntax of existing assemblers
    (like Microsoft Macro Assembler, or MASM). Learning assembly language entailed
    a whole lot more than learning a few machine instructions. First of all, you have
    to learn a new programming style. Mastering assembly language involves learning
    not only the semantics of a few machine instructions but also how to put those
    instructions together to solve real-world problems. And *that’s* the hard part.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 早在1995年，我与加利福尼亚大学河滨分校计算机科学系主任进行了一次讨论。我感叹学生们在学习汇编课程时不得不重新开始，浪费宝贵的时间重新学习许多内容。随着讨论的深入，问题显然并不在于汇编语言本身，而是在于现有汇编器的语法（比如微软宏汇编器，或MASM）。学习汇编语言不仅仅是学习几条机器指令。首先，你需要学习一种新的编程风格。掌握汇编语言不仅仅是理解几条机器指令的语义，更是要学会如何将这些指令组合起来解决现实世界中的问题。*这*才是最难的部分。
- en: Second, *pure* assembly language is not something you can efficiently pick up
    a few instructions at a time. Writing even the simplest programs requires considerable
    knowledge and a repertoire of a couple dozen or more machine instructions. When
    you add that repertoire to all the other machine organization topics students
    must learn in a typical assembly course, it’s often several weeks before they
    are prepared to write anything other than “spoon-fed” trivial applications in
    assembly language.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，*纯*汇编语言并不是你可以高效地一次学习几条指令的东西。即使是写最简单的程序，也需要相当的知识和一些几十条甚至更多的机器指令。当你将这些指令与学生在典型汇编课程中必须学习的所有其他机器组织知识结合时，往往需要几周的时间，才能准备好写出除了“填鸭式”简单应用程序以外的任何东西。
- en: One important feature of MASM back in 1995 was support for HLL-like control
    statements such as `.if` and `.while`. While these statements are not true machine
    instructions, they do allow students to use familiar programming constructs early
    in the course, until they’ve had time to learn enough low-level machine instructions
    that they can use them in their applications. By using these high-level constructs
    early on in the term, students can concentrate on other aspects of assembly language
    programming and not have to assimilate everything all at once. This allows them
    to start writing code much sooner in the course and, as a result, they wind up
    covering more material by the end of the term.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 1995 年 MASM 的一个重要特点是支持类似于高阶语言的控制语句，如 `.if` 和 `.while`。虽然这些语句并非真正的机器指令，但它们确实允许学生在课程初期使用熟悉的编程结构，直到他们有足够的时间学习足够的低级机器指令，以便在他们的应用中使用。通过在学期初期使用这些高级结构，学生可以集中精力学习汇编语言编程的其他方面，而不必一次性吸收所有内容。这使得他们可以在课程中更早地开始编写代码，因此到学期结束时，他们能够覆盖更多的学习内容。
- en: An assembler like MASM (32-bit v6.0 and later) that provides control statements
    similar to those found in HLLs—in addition to the traditional low-level machine
    instructions that do the same thing—is called a *high-level assembler*. In theory,
    with an appropriate textbook that teaches assembly language programming using
    these high-level assemblers, students could begin writing simple programs during
    the very first week of the course.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 像 MASM（32 位 v6.0 及更高版本）这样的汇编器提供了类似于高阶语言中控制语句的功能——除了执行相同操作的传统低级机器指令外——这种汇编器被称为*高级汇编器*。理论上，借助一本使用这些高级汇编器教授汇编语言编程的合适教材，学生可以在课程的第一周就开始编写简单的程序。
- en: The only problem with high-level assemblers like MASM is that they provide just
    a few HLL control statements and data types. Almost everything else is foreign
    to someone who is familiar with HLL programming. For example, data declarations
    in MASM are completely different from data declarations in most HLLs. Beginning
    assembly programmers still have to relearn a considerable amount of information,
    despite the presence of HLL-like control statements.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 像 MASM 这样的高级汇编器唯一的问题是，它们只提供了少数几个类似高阶语言的控制语句和数据类型。几乎所有其他内容对于熟悉高阶语言编程的人来说都是陌生的。例如，MASM
    中的数据声明与大多数高阶语言中的数据声明完全不同。尽管存在类似高阶语言的控制语句，初学汇编的程序员仍然需要重新学习大量的信息。
- en: '**2.4 High-Level Assembly Language**'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**2.4 高级汇编语言**'
- en: 'Shortly after the discussion with my department chair, it occurred to me that
    there is no reason an assembler couldn’t adopt a more high-level syntax without
    changing the semantics of assembly language. For example, consider the following
    statements in C/C++ and Pascal that declare an integer array variable:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在与我的系主任讨论之后，我意识到没有理由让汇编器不能采用更高层次的语法，而不改变汇编语言的语义。例如，考虑以下 C/C++ 和 Pascal 中声明整数数组变量的语句：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now consider the MASM declaration for the same object:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑一下 MASM 对同一对象的声明：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: While the C/C++ and Pascal declarations differ from each other, the assembly
    language version is radically different from both. A C/C++ programmer will probably
    be able to figure out the Pascal declaration even if they have never seen Pascal
    code before, and vice versa. However, Pascal and C/C++ programmers probably won’t
    be able to make heads or tails of the assembly language declaration. This is but
    one example of the problems HLL programmers face when first learning assembly
    language.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 C/C++ 和 Pascal 的声明各不相同，但汇编语言版本与两者的差异更加显著。一名 C/C++ 程序员即使从未见过 Pascal 代码，也能大致理解
    Pascal 的声明，反之亦然。然而，Pascal 和 C/C++ 程序员可能完全无法理解汇编语言的声明。这只是高阶语言（HLL）程序员在学习汇编语言时面临的一个问题。
- en: 'The sad part is that there’s really no reason a variable declaration in assembly
    language has to be so radically different from one in an HLL. It makes absolutely
    no difference in the final executable file which syntax an assembler uses for
    variable declarations. Given that, why shouldn’t an assembler use a more high-level-like
    syntax so people switching over from HLLs will find the assembler easier to learn?
    Pondering this question led me to develop a new assembly language, specifically
    geared toward teaching assembly language programming to students who had already
    mastered an HLL, called *High-Level Assembly (HLA)*. In HLA, the aforementioned
    array declaration looks like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 令人遗憾的是，汇编语言中的变量声明没有理由与高级语言中的声明如此截然不同。在最终的可执行文件中，汇编器使用何种语法来声明变量并不会造成任何差别。既然如此，为什么汇编器不使用更类似高级语言的语法，这样从高级语言转过来的程序员就能更容易学习汇编语言呢？思考这个问题让我开发了一种新的汇编语言，专门为那些已经掌握高级语言的学生设计，用于教学汇编语言编程，这种语言叫做*高级汇编语言（HLA）*。在HLA中，上述的数组声明看起来是这样的：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Though the syntax is slightly different from C/C++ and Pascal (actually, it’s
    a combination of the two), most HLL programmers can probably figure out the meaning
    of this declaration.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然语法与C/C++和Pascal略有不同（实际上，它是两者的结合），但大多数高级语言（HLL）程序员大概能理解这个声明的含义。
- en: The whole purpose of HLA’s design is to provide an assembly language programming
    environment as similar as possible to that of traditional (imperative) high-level
    programming languages, without sacrificing the capability to write *real* assembly
    language programs. Those components of the language that have nothing to do with
    machine instructions use a familiar high-level language syntax, while the machine
    instructions still map one-to-one to the underlying 80x86 machine instructions.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: HLA设计的整体目的是提供一个尽可能类似传统（命令式）高级编程语言的汇编语言编程环境，同时不牺牲编写*真实*汇编语言程序的能力。语言中与机器指令无关的部分使用熟悉的高级语言语法，而机器指令仍然与底层的80x86机器指令一一对应。
- en: Making HLA as similar as possible to various HLLs means that students learning
    assembly language programming don’t have to spend as much time assimilating a
    radically different syntax. Instead, they can apply their existing HLL knowledge,
    which makes the process of learning assembly language easier and faster.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使HLA尽可能类似于各种高级语言意味着，学习汇编语言编程的学生不需要花太多时间去适应一个截然不同的语法。相反，他们可以运用已有的高级语言知识，这使得学习汇编语言的过程更轻松、更快捷。
- en: A comfortable syntax for declarations and a few HLL-like control statements
    aren’t all you need to make learning assembly language as efficient as possible,
    however. One very common complaint about learning assembly language is that it
    provides very little support for programmers, who must constantly reinvent the
    wheel while writing assembly code. For example, when learning assembly language
    programming using MASM, you’ll quickly discover that assembly language doesn’t
    provide useful I/O facilities such as the ability to print integer values as strings
    to the user’s console. Assembly programmers are responsible for writing such code
    themselves. Unfortunately, writing a decent set of I/O routines requires sophisticated
    knowledge of assembly language programming. The only way to gain that knowledge
    is by writing a fair amount of code first, but doing so without having any I/O
    routines is difficult. Therefore, a good assembly language educational tool also
    needs to provide a set of I/O routines that allow beginning assembly programmers
    to do simple I/O tasks, like reading and writing integer values, before they have
    the programming sophistication to write such routines themselves. HLA accomplishes
    this with the *HLA Standard Library*, a collection of subroutines and macros that
    make it very easy to write complex applications.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，单单一个舒适的声明语法和一些类似高级语言的控制语句并不足以让学习汇编语言变得尽可能高效。一个关于学习汇编语言的常见抱怨是，它对程序员几乎没有任何支持，程序员必须在编写汇编代码时不断重新发明轮子。例如，当使用MASM学习汇编语言时，你会很快发现，汇编语言并没有提供有用的输入输出功能，比如将整数值作为字符串打印到用户的控制台。汇编程序员必须自己编写这样的代码。不幸的是，编写一套体面的I/O例程需要相当复杂的汇编语言编程知识。获得这些知识的唯一途径是首先编写大量的代码，但在没有I/O例程的情况下这么做是非常困难的。因此，一个好的汇编语言教育工具也需要提供一套I/O例程，允许初学的汇编程序员在自己具备编写这些例程的编程能力之前，能够完成一些简单的I/O任务，比如读取和写入整数值。HLA通过*HLA标准库*实现了这一点，HLA标准库是一个子程序和宏的集合，使得编写复杂应用程序变得非常容易。
- en: Because of HLA’s popularity and the fact that HLA is a free, open source, and
    public domain product available for Windows and Linux, this book uses HLA syntax
    for compiler-neutral examples involving assembly language. Despite the fact that
    it is now over 20 years old and supports only the 32-bit Intel instruction set,
    HLA is still an excellent way to learn assembly language programming. Although
    the latest Intel CPUs directly support 64-bit registers and operations, learning
    32-bit assembly language is just as relevant for HLL programmers as 64-bit assembly.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于HLA的流行以及它是一个免费、开源并且面向公共领域的产品，支持Windows和Linux，因此本书在涉及汇编语言的编译器无关示例时，使用了HLA语法。尽管它已经有超过20年的历史，且仅支持32位的Intel指令集，但HLA仍然是学习汇编语言编程的极好方式。虽然最新的Intel
    CPU直接支持64位寄存器和操作，但学习32位汇编语言对HLL程序员而言，依然与学习64位汇编语言同样相关。
- en: '**2.5 Thinking High-Level, Writing Low-Level**'
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**2.5 高级思维，低级编程**'
- en: The goal of HLA is to allow a beginning assembly programmer to think in HLL
    terms while writing low-level code (in other words, the exact opposite of what
    this book is trying to teach). For students first approaching assembly language,
    being able to think in high-level terms is a godsend—they can apply techniques
    they’ve already learned in other languages when faced with a particular assembly
    language programming problem. Controlling the rate at which a student has to learn
    new concepts in this way can make the educational process more efficient.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: HLA的目标是让初学者在编写低级代码时能够用高级语言的术语进行思考（换句话说，正好与本书试图教授的内容相反）。对于第一次接触汇编语言的学生来说，能够以高级语言的思维方式进行思考是一个天赐之物——他们可以在面对特定的汇编编程问题时，应用已经在其他语言中学到的技巧。以这种方式控制学生学习新概念的速度，可以使教育过程更高效。
- en: Ultimately, of course, the goal is to learn the low-level programming paradigm.
    This means gradually giving up HLL-like control structures and writing pure low-level
    code (that is, “thinking low-level and writing low-level”). Nevertheless, starting
    out by “thinking high-level while writing low-level” is a great, incremental way
    to learn assembly language programming.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，目标当然是学习低级编程范式。这意味着逐渐放弃类似高级语言（HLL）的控制结构，编写纯粹的低级代码（也就是“低级思维，低级编程”）。尽管如此，从“高层思维，低级编程”开始，是学习汇编语言编程的一个极好的渐进方式。
- en: '**2.6 The Assembly Programming Paradigm (Thinking Low-Level)**'
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**2.6 汇编编程范式（低级思维）**'
- en: It should be clear now that programming in assembly language is quite different
    from programming in common HLLs. Fortunately, for this book, you don’t need to
    be able to write assembly language programs from scratch. Nevertheless, if you
    know how assembly programs are written, you’ll be able to understand why a compiler
    emits certain code sequences. To that end, I’ll take some time here to describe
    how assembly language programmers (and compilers) “think.”
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该很清楚，汇编语言编程与常见的高级语言编程有很大的不同。幸运的是，在本书中，你不需要从头开始编写汇编语言程序。然而，如果你了解汇编程序是如何编写的，你将能够理解编译器为何生成特定的代码序列。为此，我将在这里花些时间描述汇编语言程序员（和编译器）如何“思考”。
- en: 'The most fundamental aspect of the assembly language programming paradigm—that
    is, the model for how assembly programming is accomplished—is that large projects
    are broken up into mini-tasks that the machine can handle. Fundamentally, a CPU
    can do only one tiny task at a time; this is true even for complex instruction
    set computers (CISC). Therefore, complex operations, like statements you’ll find
    in an HLL, have to be broken down into smaller components that the machine can
    execute directly. As an example, consider the following Visual Basic (VB) assignment
    statement:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 汇编语言编程范式的最基本方面——也就是汇编编程如何实现的模型——是将大项目分解为机器可以处理的小任务。从根本上讲，CPU 每次只能执行一个小任务；即使对于复杂指令集计算机（CISC）也是如此。因此，像高级语言中那样的复杂操作必须被分解成机器可以直接执行的较小组件。举个例子，考虑以下
    Visual Basic (VB) 赋值语句：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: No practical CPU will allow you to execute this entire VB statement as a single
    machine instruction. Instead, you have to break this assignment statement down
    to a sequence of machine instructions that compute individual components of it.
    For example, many CPUs provide a *subtract* instruction that lets you subtract
    one value from a machine register. Because the assignment statement in this example
    consists of three subtractions, you’ll have to break the assignment operation
    down into at least three different subtract instructions.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 没有任何实用的 CPU 会允许你将整个 VB 语句作为单个机器指令执行。相反，你必须将该赋值语句分解为一系列机器指令，计算其中的各个组成部分。例如，许多
    CPU 提供了一个*减法*指令，可以让你从机器寄存器中减去一个值。由于该示例中的赋值语句包含三个减法操作，你将需要将赋值操作分解为至少三个不同的减法指令。
- en: 'The 80x86 CPU family provides a fairly flexible subtract instruction: `sub()`.
    This particular instruction allows the following forms (in HLA syntax):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 80x86 CPU 系列提供了一个相当灵活的减法指令：`sub()`。该指令允许以下几种形式（在 HLA 语法中）：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Assuming that all of the identifiers in the original VB code represent variables,
    we can use the 80x86 `sub()` and `mov()` instructions to implement the same operation
    with the following HLA code sequence:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 假设原始 VB 代码中的所有标识符都代表变量，我们可以使用 80x86 `sub()` 和 `mov()` 指令来实现相同的操作，HLA 代码序列如下：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This code breaks down the single VB statement into five different HLA statements,
    each of which does a small part of the total calculation. The secret behind the
    assembly language programming paradigm is knowing how to break down complex operations
    like this into a simple sequence of machine instructions. We’ll take another look
    at this process in [Chapter 13](ch13.xhtml#ch13).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将单一的 VB 语句分解为五个不同的 HLA 语句，每个语句都执行总计算的一部分。汇编语言编程范式背后的秘密是知道如何将像这样的复杂操作分解为一串简单的机器指令。我们将在[第
    13 章](ch13.xhtml#ch13)中再次探讨这个过程。
- en: 'HLL control structures are another big area where complex operations are broken
    down into simpler statement sequences. For example, consider the following Pascal
    `if()` statement:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 高级语言（HLL）控制结构是另一个将复杂操作分解为简单语句序列的重要领域。例如，考虑以下 Pascal `if()` 语句：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'CPUs do not support an `if` machine instruction. Instead, you compare two values
    that set *condition-code flags* and then test the result of these condition codes
    by using *conditional jump* instructions. A common way to translate an HLL `if`
    statement into assembly language is to test the opposite condition (`i <> j`)
    and then jump over the statements that would be executed if the original condition
    (`i = j`) evaluates to `true`. For example, here’s a translation of the former
    Pascal `if` statement into HLA (using pure assembly language—that is, no HLL-like
    constructs):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: CPU不支持`if`机器指令。相反，您比较两个值，设置*条件码标志*，然后通过使用*条件跳转*指令测试这些条件码的结果。将高级语言`if`语句转换为汇编语言的常见方法是测试相反的条件（`i
    <> j`），然后跳过如果原始条件（`i = j`）评估为`true`时要执行的语句。例如，下面是将之前的Pascal `if`语句转换为HLA（使用纯汇编语言，即不使用高级语言样式的构造）的一个示例：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As the Boolean expressions in the HLL control structures increase in complexity,
    the number of corresponding machine instructions also increases. But the process
    remains the same. Later, we’ll take a look at how compilers translate HLL control
    structures into assembly language (see [Chapters 13](ch13.xhtml#ch13) and [14](ch14.xhtml#ch14)).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 随着高级语言控制结构中的布尔表达式变得越来越复杂，对应的机器指令数量也会增加。但这个过程保持不变。稍后，我们将看看编译器是如何将高级语言控制结构转换为汇编语言的（请参见[第13章](ch13.xhtml#ch13)和[第14章](ch14.xhtml#ch14)）。
- en: Passing parameters to a procedure or function, accessing those parameters, and
    then accessing other data local to that procedure or function is another area
    where assembly language is quite a bit more complex than typical HLLs. This is
    an important subject, but it’s beyond the scope of this chapter, so we’ll revisit
    it in [Chapter 15](ch15.xhtml#ch15).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将参数传递给过程或函数、访问这些参数，然后访问该过程或函数本地的其他数据，是汇编语言相较于典型的高级语言更为复杂的另一个领域。这是一个重要话题，但超出了本章的范围，因此我们将在[第15章](ch15.xhtml#ch15)中再次讨论。
- en: The bottom line is that when converting an algorithm from a high-level language,
    you have to break down the problem into much smaller pieces in order to code it
    in assembly language. As noted earlier, the good news is that you don’t have to
    figure out which machine instructions to use when all you’re doing is reading
    assembly code—the compiler (or assembly programmer) that originally created the
    code will have already done this for you. All you have to do is draw a correspondence
    between the HLL code and the assembly code. How you accomplish that is the subject
    of much of the rest of this book.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，问题的关键是，当将算法从高级语言转换时，必须将问题分解成更小的部分，以便能够在汇编语言中进行编码。如前所述，好消息是，当您只是在阅读汇编代码时，您无需自己决定使用哪些机器指令——编译器（或汇编程序员）在最初创建代码时已经为您完成了这项工作。您所需要做的只是建立高级语言代码与汇编代码之间的对应关系。如何完成这一点是本书余下部分的主要内容。
- en: '**2.7 For More Information**'
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**2.7 获取更多信息**'
- en: Bartlett, Jonathan. *Programming from the Ground Up*. Edited by Dominick Bruno,
    Jr. Self-published, 2004\. An older, free version of this book, which teaches
    assembly language programming using Gas, can be found online at *[http://www.plantation-productions.com/AssemblyLanguage/ProgrammingGroundUp-1-0-booksize.pdf](http://www.plantation-productions.com/AssemblyLanguage/ProgrammingGroundUp-1-0-booksize.pdf)*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Bartlett, Jonathan. *《从零开始编程》*. 编辑：Dominick Bruno, Jr. 自费出版，2004年。此书的较旧、免费的版本，使用Gas教授汇编语言编程，可以在网上找到：*[http://www.plantation-productions.com/AssemblyLanguage/ProgrammingGroundUp-1-0-booksize.pdf](http://www.plantation-productions.com/AssemblyLanguage/ProgrammingGroundUp-1-0-booksize.pdf)*。
- en: 'Blum, Richard. *Professional Assembly Language*. Indianapolis: Wiley, 2005.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Blum, Richard. *《专业汇编语言》*. 印第安纳波利斯：Wiley，2005年。
- en: Carter, Paul. *PC Assembly Language*. Self-published, 2019\. *[https://pacman128.github.io/static/pcasm-book.pdf](https://pacman128.github.io/static/pcasm-book.pdf)*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Carter, Paul. *《PC汇编语言》*. 自费出版，2019年。*[https://pacman128.github.io/static/pcasm-book.pdf](https://pacman128.github.io/static/pcasm-book.pdf)*。
- en: 'Duntemann, Jeff. *Assembly Language Step-by-Step*. 3rd ed. Indianapolis: Wiley,
    2009.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Duntemann, Jeff. *《汇编语言一步步》*. 第3版. 印第安纳波利斯：Wiley，2009年。
- en: 'Hyde, Randall. *The Art of Assembly Language*. 2nd ed. San Francisco: No Starch
    Press, 2010.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Hyde, Randall. *《汇编语言的艺术》*. 第2版. 旧金山：No Starch Press，2010年。
- en: '———. “Webster: The Place on the Internet to Learn Assembly.” *[http://plantation-productions.com/Webster/index.html](http://plantation-productions.com/Webster/index.html)*.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ———. “Webster：在互联网上学习汇编语言的地方。”*[http://plantation-productions.com/Webster/index.html](http://plantation-productions.com/Webster/index.html)*。
