- en: '**14**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**14**'
- en: '**CREATING CONDITIONAL WHILE LOOPS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建条件的 While 循环**'
- en: '![image](graphics/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/common01.jpg)'
- en: In [Chapter 13](ch13.html#ch13), we showed you how to use the `For` loop to
    repeat code a certain number of times. `For` loops are ideal to use when you know
    exactly how many times you want to repeat code. `While` is another Small Basic
    keyword that lets you create loops. It’s useful when you don’t know how many times
    you want to repeat a loop in advance, because `While` loops keep running code
    as long as a condition is true.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第13章](ch13.html#ch13)中，我们向你展示了如何使用`For`循环来重复执行代码一定次数。当你确切知道要重复执行多少次代码时，`For`循环是理想选择。`While`是另一个Small
    Basic的关键字，可以用来创建循环。当你事先不知道要重复多少次循环时，`While`循环非常有用，因为`While`循环会一直运行代码，直到条件为假。
- en: A `While` loop condition is similar to how your parents keep telling you to
    clean your room until it’s spotless or how you keep eating Thanksgiving turkey
    until you’re stuffed! When the loop’s condition becomes false, the loop ends,
    and the program moves on.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`While`循环的条件就像父母一直告诉你要把房间打扫得一尘不染，或者你吃感恩节火鸡直到吃撑一样！当循环的条件变为假时，循环结束，程序继续执行。'
- en: In this chapter, you’ll learn how to write `While` loops and use them to verify
    user input and make games. `While` loops are a powerful programming concept; once
    you master them, you’ll be able to make all kinds of cool applications.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何编写`While`循环，并使用它们来验证用户输入和制作游戏。`While`循环是一个强大的编程概念，一旦掌握了它们，你将能够制作各种酷炫的应用程序。
- en: '**When to Use While Loops**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**何时使用 While 循环**'
- en: Let’s say you want to make a number-guessing game that selects a random number
    between 1 and 100 and prompts a player to guess it. If the player’s guess is wrong,
    the game tells them whether their guess was higher or lower than the secret number,
    and then it asks them to guess again. The game keeps asking the player to guess
    the number until they get it right.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想制作一个数字猜谜游戏，游戏会随机选择一个1到100之间的数字，并提示玩家猜测。如果玩家猜错了，游戏会告诉他们猜测的数字是比秘密数字高还是低，然后再次提示玩家猜测。游戏会一直提示玩家猜数字，直到他们猜对为止。
- en: A `For` loop isn’t the best choice to use here, because you don’t know how many
    times it will take a player to guess the secret number. Maybe the player will
    get it right on the first try, or it might take 100 tries! `While` loops are perfect
    in cases like this one.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`For`循环不是最佳选择，因为你无法预测玩家猜测秘密数字所需的次数。也许玩家第一次就猜对了，或者可能需要猜100次！在这种情况下，`While`循环是完美的选择。
- en: In the next section, you’ll learn the `While` loop’s syntax and use it to create
    your own number-guessing game.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将学习`While`循环的语法，并用它来创建自己的数字猜谜游戏。
- en: '**Writing a While Loop**'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写 While 循环**'
- en: Try out the code in [Listing 14-1](ch14.html#ch14ex1).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请尝试[清单 14-1](ch14.html#ch14ex1)中的代码。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 14-1: Number-guessing game*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 14-1：数字猜谜游戏*'
- en: 'The program randomly selects a number from 1 to 100 and assigns it to `num`
    (line 2). Then a variable called `ans`, which will hold the player’s guess, is
    created and set to 0 (line 3). We set this initial value to 0 because we need
    it to be different from the correct answer. Let’s take a closer look at the first
    line of the `While` loop (line 4):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 程序随机选择一个1到100之间的数字，并将其赋值给`num`（第2行）。然后，创建一个名为`ans`的变量，用来保存玩家的猜测，并将其初始化为0（第3行）。我们将初始值设置为0，因为它需要与正确答案不同。让我们仔细看看`While`循环的第一行（第4行）：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This piece of code simply says, “As long as `ans` is not equal to `num`, run
    the statement(s) between the `While` and the `EndWhile` keywords.”
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的意思是，“只要`ans`不等于`num`，就执行`While`和`EndWhile`之间的语句。”
- en: First, the test condition (`ans <> num`) is evaluated. If it’s true, the program
    runs the statements in the loop’s body and keeps repeating until the condition
    becomes false. When the test condition becomes false, the loop ends, and the program
    moves to the next statement after the `EndWhile` keyword. The flowchart in [Figure
    14-1](ch14.html#ch14fig1) illustrates how the `While` loop works.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，测试条件（`ans <> num`）会被评估。如果为真，程序会执行循环体内的语句，并继续重复，直到条件变为假。当测试条件变为假时，循环结束，程序继续执行`EndWhile`关键字后的下一条语句。图[14-1](ch14.html#ch14fig1)的流程图展示了`While`循环的工作原理。
- en: '![image](graphics/f14-01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f14-01.jpg)'
- en: '*Figure 14-1: Flowchart of the* `While` *loop*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 14-1：`While` 循环的流程图*'
- en: In the number-guessing game, when the program runs line 4 for the first time,
    the condition (`ans <> num`) is true (because we know that `num` can’t be 0),
    and the loop runs the statements in its body (lines 5–13). During each iteration
    of the loop, the player is prompted to enter a guess (line 5), which is saved
    into the variable `ans` (line 6). The code then compares the player’s guess with
    the secret number. If the player guessed correctly (line 7), the code displays
    `Good Job! You get sprinkles!` and moves to the statement after `EndIf`. In this
    example, it finds `EndWhile`, which takes your program back to check the condition
    of the `While` loop. Because `ans` is now equal to `num`, the test condition is
    false and the `While` loop terminates, ending the program (because there are no
    statements after `EndWhile`).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在数字猜谜游戏中，当程序第一次执行第4行时，条件（`ans <> num`）为真（因为我们知道`num`不可能是0），因此循环执行其主体中的语句（第5到13行）。在循环的每次迭代中，玩家被提示输入一个猜测（第5行），该猜测保存在变量`ans`中（第6行）。然后，代码将玩家的猜测与秘密数字进行比较。如果玩家猜对了（第7行），代码会显示`Good
    Job! You get sprinkles!`并跳转到`EndIf`后的语句。在这个例子中，它找到`EndWhile`，将程序带回检查`While`循环的条件。由于`ans`现在等于`num`，测试条件为假，`While`循环终止，程序结束（因为`EndWhile`后没有语句）。
- en: If the player’s guess was incorrect, the code checks whether the guess was higher
    than the secret number (line 9). If it’s higher, the program displays `Too High.
    Lower your standards.` Then the loop goes for another round. If the player’s guess
    is lower than the secret number (the `Else` statement on line 11), the program
    displays `Too Low. Aim for the stars!` (line 12) and starts another round.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家的猜测不正确，代码会检查猜测是否高于秘密数字（第9行）。如果是高于的，程序会显示`Too High. Lower your standards.`然后进入下一轮。如果玩家的猜测低于秘密数字（第11行的`Else`语句），程序会显示`Too
    Low. Aim for the stars!`（第12行），并开始另一轮。
- en: 'Here is an example of a rather lucky user playing the game:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个运气相当好的用户玩游戏的例子：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Play this game several times to see how it works!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 多玩几次这个游戏，看看它是如何工作的！
- en: '**NOTE**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Although it’s not required by Small Basic, we’ll make programs easier to read
    by using parentheses around the* `While` *loop’s condition and indenting the body
    of a* `While` *loop.*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*尽管Small Basic并没有强制要求这样做，我们为了让程序更易读，通常会在`While`循环的条件周围加上括号，并缩进`While`循环的主体部分。*'
- en: In the next section, we’ll show you how to use a `While` loop to check data
    entered by a user.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将展示如何使用`While`循环检查用户输入的数据。
- en: '**TRY IT OUT 14-1**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**试试看 14-1**'
- en: How much wood could a woodchuck chuck if a woodchuck could chuck wood? Open
    the *Woodchuck.sb* file from this chapter’s folder, and run it to answer this
    age-old question. Then figure out some ways to improve the program.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一只土拨鼠能扔木头，那么它能扔多少木头呢？打开本章文件夹中的*Woodchuck.sb*文件，运行它来回答这个古老的问题。然后想出一些方法来改进程序。
- en: '**Validating Your Inputs**'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**验证您的输入**'
- en: When you write a program that reads data from a user, you should always check
    the input data before continuing with your program. This is called *validation*.
    In this section, we’ll show you how to use `While` loops to ensure that your user
    enters the correct input to your program.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写一个需要从用户处读取数据的程序时，应该始终在继续执行程序之前检查输入的数据。这被称为*验证*。在本节中，我们将向你展示如何使用`While`循环来确保用户输入正确的数据。
- en: Let’s say you need the user to enter a number between 1 and 5 (including 1 or
    5). If they enter a number less than 1 or greater than 5, you need to prompt them
    to re-enter a number. [Listing 14-2](ch14.html#ch14ex2) shows you how to use a
    `While` loop to achieve this.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你需要用户输入一个1到5之间的数字（包括1和5）。如果他们输入的数字小于1或大于5，你需要提示他们重新输入一个数字。[Listing 14-2](ch14.html#ch14ex2)展示了如何使用`While`循环来实现这一点。
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 14-2: Using a* `While` *loop to check the input number*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 14-2：使用* `While` *循环检查输入的数字*'
- en: Line 2 sets the variable `num` (which will hold the number entered by the user)
    to –1\. This makes the condition of the `While` loop (line 4) true, so the loop’s
    body runs at least once. Although the loop in this example runs fine without the
    initialization statement on line 2 (because the variable `num` will be seen as
    0), we recommend that you always initialize your variables and not rely on their
    default values. This will help you prevent future mistakes.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 第2行将变量`num`（用于存储用户输入的数字）设置为-1。这使得`While`循环的条件（第4行）为真，因此循环的主体至少执行一次。虽然在这个例子中，如果没有第2行的初始化语句（因为变量`num`会被认为是0），循环依然能正常运行，但我们建议你始终初始化变量，而不要依赖它们的默认值。这将帮助你避免未来的错误。
- en: The program prompts the user for a number and assigns their input to the `num`
    variable (lines 5–6). Then the loop runs again. If `num` is less than 1 or greater
    than 5 (the user entered an invalid number), the loop’s body runs again, prompting
    the user to re-enter the number. If `num` is between 1 and 5 (inclusive), the
    loop ends, and the program moves to line 8 to display the number.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序提示用户输入一个数字，并将他们的输入赋值给`num`变量（第5–6行）。然后循环再次执行。如果`num`小于1或大于5（用户输入了无效数字），循环体会再次执行，提示用户重新输入数字。如果`num`在1到5之间（包括1和5），循环结束，程序跳到第8行显示数字。
- en: '**TIP**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: '*Make sure you initialize any variable before you use it in a* `While` *loop’s
    test condition. If you don’t, your program might skip over the loop entirely!*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*确保在`While`循环的测试条件中使用任何变量之前对其进行初始化。如果不初始化，程序可能会跳过循环！*'
- en: Now you know how to verify user input using a `While` loop.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何使用`While`循环验证用户输入了。
- en: '**TRY IT OUT 14-2**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试一下 14-2**'
- en: Write a program that asks a user whether they think SpongeBob could become Santa,
    and then prompt them to enter `Y` (for yes) or `N` (for no). They can also enter
    `y` or `n`. Write a `While` loop that only accepts `Y`, `y`, `N`, or `n` as valid
    inputs. Then tell the user what they did wrong each time.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，询问用户是否认为海绵宝宝能成为圣诞老人，然后提示他们输入`Y`（是）或`N`（否）。他们也可以输入`y`或`n`。编写一个`While`循环，仅接受`Y`、`y`、`N`或`n`作为有效输入。每次用户输入错误时，告诉他们哪里出了问题。
- en: '**Infinite Loops**'
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**无限循环**'
- en: If a `While` loop’s condition doesn’t become false, the loop runs forever, creating
    an *infinite loop*. Sometimes this can cause a problem, but sometimes infinite
    loops are useful, such as when you want to make a game run forever.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`While`循环的条件始终不为假，循环将永远运行，形成*无限循环*。有时这会导致问题，但有时无限循环很有用，比如当你想让游戏永远运行时。
- en: 'But how do you create an infinite loop in Small Basic? There are a few ways
    to do this, but here is a common shortcut that many Small Basic programmers use:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如何在 Small Basic 中创建无限循环呢？有几种方法可以做到这一点，但这是许多 Small Basic 程序员常用的快捷方式：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this code, the loop’s condition is always true; the loop never stops, and
    it displays `Loop forever!` forever. To see this in action, you’ll program a simple
    game that quizzes kids on their addition skills. The complete code is shown in
    [Listing 14-3](ch14.html#ch14ex3). Run this program to see how it works.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，循环的条件始终为真；循环永不停止，并且永远显示`Loop forever!`。要查看这一点，你将编写一个简单的游戏，测试孩子们的加法技能。完整代码见[清单
    14-3](ch14.html#ch14ex3)。运行这个程序，看看它是如何工作的。
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 14-3: A program that quizzes a user with addition problems*'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 14-3：一个向用户提问加法题目的程序*'
- en: In lines 3 and 4, `num1` and `num2` are set to random numbers between 1 and
    10\. Line 5 adds them together to set the correct answer. Line 6 asks the user
    for the correct answer. Line 7 gets the user’s answer. Line 8 checks whether the
    answer is true, and if it is, line 9 tells them they’re right. Otherwise, line
    11 tells them the correct answer. The game runs forever. When the user wants to
    quit, they can close the application by clicking the X icon in the upper-right
    corner of the application’s window.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3和第4行，`num1`和`num2`被设置为1到10之间的随机数字。第5行将它们相加得到正确答案。第6行提示用户输入正确答案。第7行获取用户的答案。第8行检查答案是否正确，如果正确，第9行告诉他们答案正确。否则，第11行告诉他们正确答案是什么。游戏将一直运行。当用户想退出时，可以通过点击应用程序窗口右上角的X图标关闭应用程序。
- en: '**TIP**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: '*You can use a* `Goto` *statement inside a* `While` *loop to jump to a label
    outside the loop in order to break out of the loop.*'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可以在`While`循环内使用`Goto`语句跳转到循环外的标签，以便退出循环。*'
- en: Now it’s time to put what you’ve learned in this chapter to work by designing
    a complete game. Head to the fridge to get plenty of brain food before reading
    on!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候将你在本章所学的内容付诸实践，设计一个完整的游戏了。在继续阅读之前，去冰箱拿些大脑食品吧！
- en: '**TRY IT OUT 14-3**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试一下 14-3**'
- en: Change the *AddTutor.sb* program so it won’t give the correct answer to the
    player when they get it wrong. Instead, have the program tell the player that
    their answer is incorrect and let them try again.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 更改*AddTutor.sb*程序，以便当玩家答错时不提供正确答案。相反，程序应告诉玩家他们的答案是错误的，并让他们再试一次。
- en: '**Create a Rock-Paper-Scissors Game**'
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**创建一个石头剪刀布游戏**'
- en: In this section, you’ll create a rock-paper-scissors game in which a user plays
    against the computer. [Figure 14-2](ch14.html#ch14fig2) shows the user interface
    for this game. The three buttons represent rock, paper, and scissors. The player
    chooses one by clicking it. Then the computer randomly picks an action. The rules
    that determine the winner are paper beats rock, rock beats scissors, and scissors
    beats paper.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，你将创建一个石头剪刀布游戏，玩家与计算机对战。[图14-2](ch14.html#ch14fig2)显示了这个游戏的用户界面。三个按钮分别代表石头、布和剪刀。玩家通过点击其中一个按钮来做出选择。然后计算机随机选择一个动作。决定胜者的规则是布胜石头，石头胜剪刀，剪刀胜布。
- en: '![image](graphics/f14-02.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f14-02.jpg)'
- en: '*Figure 14-2: The user interface for the rock-paper-scissors game*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14-2：石头剪刀布游戏的用户界面*'
- en: Images *P1*, *P2*, and *P3* show the player’s selection, and images *C1*, *C2*,
    and *C3* show the computer’s choice. Images *W0*, *W1*, *W2*, and *W3* show the
    result of each round of the game. Everything else you see in [Figure 14-2](ch14.html#ch14fig2)
    is part of the background image, including the rock, paper, and scissors images
    that represent the three buttons.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图像*P1*、*P2*和*P3*显示玩家的选择，图像*C1*、*C2*和*C3*显示计算机的选择。图像*W0*、*W1*、*W2*和*W3*显示每轮游戏的结果。在[图14-2](ch14.html#ch14fig2)中，除了背景图像外，你还可以看到代表三种按钮的石头、布和剪刀图像。
- en: '***Step 1: Open the Startup File***'
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步骤1：打开启动文件***'
- en: Open the file *RockPaper_Incomplete.sb* from this chapter’s folder and follow
    along. The folder includes all the images you need for this game. The startup
    file, shown in [Listing 14-4](ch14.html#ch14ex4), contains the main part of the
    game. It also contains empty placeholders for all the subroutines you need to
    add.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 打开本章文件夹中的*RockPaper_Incomplete.sb*文件并跟随操作。该文件夹包含了你玩这个游戏所需的所有图像。启动文件显示在[清单14-4](ch14.html#ch14ex4)中，包含了游戏的主要部分。它还包含了你需要添加的所有子程序的空占位符。
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 14-4: Setting up the window and choice*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单14-4：设置窗口和选择*'
- en: 'If you run the program now, all you’ll see is the background image because
    you haven’t created any of the subroutines yet. You’ll get there, but first let’s
    check out the setup and main loop of the game. First, the size of the graphics
    window is set, and the background image is drawn (lines 2–8). The variable `choice1`
    holds the player’s choice: `0` means unknown, `1` means rock, `2` means paper,
    and `3` means scissors. To start, we set `choice1` to `0`, because the player
    hasn’t made a choice yet (line 9). Then we register a handler for the `MouseDown`
    event to be able to find out when the player clicks one of the three buttons (line
    10). Then the game’s main loop starts (lines 12–22).'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在运行程序，你看到的只有背景图像，因为你还没有创建任何子程序。你会做到的，但首先让我们来看看游戏的设置和主循环。首先，设置图形窗口的大小，然后绘制背景图像（第2–8行）。变量`choice1`保存玩家的选择：`0`表示未知，`1`表示石头，`2`表示布，`3`表示剪刀。为了开始，我们将`choice1`设置为`0`，因为玩家还没有做出选择（第9行）。接着，我们为`MouseDown`事件注册一个处理器，以便能够得知玩家何时点击三个按钮中的一个（第10行）。然后，游戏的主循环开始（第12–22行）。
- en: The loop continuously checks the value of `choice1`. As you’ll see in a moment,
    this variable is changed by the `OnMouseDown()` subroutine when the player makes
    a choice. If `choice1` is 0, the loop waits for 10 milliseconds (line 21) and
    checks again. Using a loop makes the program wait for `choice1` to become a value
    other than 0 (this is called *polling*; it’s similar to asking “Are we there yet?”
    during a long trip). When `choice1` becomes a value other than 0 (line 13), the
    body of the `If` block is executed (lines 14–19). We draw image `W3` to show a
    blank result (lines 14–15). Next, we set the computer’s choice, `choice2`, to
    a random value between 1 and 3 (line 16). Then we call `SwitchImages()` to show
    the images that correspond to `choice1` and `choice2` (line 17). Then we call
    `ShowWinner()` to show the result of this round of the game (line 18). Finally,
    we set `choice1` back to `0` to tell the `OnMouseDown()` subroutine that the main
    loop is ready for another round of the game (line 19).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 循环持续检查`choice1`的值。正如你马上会看到的，当玩家做出选择时，`OnMouseDown()`子程序会改变这个变量。如果`choice1`是0，循环会等待10毫秒（第21行），然后再次检查。使用循环可以让程序等待`choice1`变为非0值（这叫做*轮询*；类似于长途旅行中反复问“我们到了吗？”）。当`choice1`变为非0值时（第13行），`If`块的主体会被执行（第14–19行）。我们绘制图像`W3`来显示一个空的结果（第14–15行）。接下来，我们将计算机的选择`choice2`设置为1到3之间的随机值（第16行）。然后，我们调用`SwitchImages()`来显示与`choice1`和`choice2`相对应的图像（第17行）。接着，我们调用`ShowWinner()`来显示这一轮游戏的结果（第18行）。最后，我们将`choice1`重置为`0`，告诉`OnMouseDown()`子程序主循环已经准备好进行新的一轮游戏（第19行）。
- en: Next, you’ll add each subroutine one at a time.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将逐个添加每个子程序。
- en: '***Step 2: Add the MouseDown Handler***'
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步骤 2：添加 MouseDown 处理程序***'
- en: Now let’s handle the `MouseDown` event to figure out the player’s choice. Add
    the `OnMouseDown()` subroutine in [Listing 14-5](ch14.html#ch14ex5) to the bottom
    of the program.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来处理 `MouseDown` 事件，确定玩家的选择。在程序的底部添加 [清单14-5](ch14.html#ch14ex5) 中的 `OnMouseDown()`
    子程序。
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 14-5: Checking the choice the user clicked*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单14-5：检查用户点击的选择*'
- en: Small Basic calls this subroutine when the player clicks anywhere in the graphics
    window. First, the subroutine checks the value of `choice1` (line 2). If `choice1`
    is `0`, the subroutine checks where the player clicked to see whether they clicked
    one of the three buttons. If `choice1` is not 0, that means the main loop is still
    processing the player’s last choice, so the subroutine just ignores the mouse
    click. This way your game won’t get confused if the player clicks all over the
    place.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 小基础语言会在玩家点击图形窗口的任何地方时调用这个子程序。首先，子程序会检查 `choice1` 的值（第2行）。如果 `choice1` 的值为 `0`，子程序会检查玩家点击的位置，看看他们是否点击了三个按钮之一。如果
    `choice1` 不是 0，这意味着主循环仍在处理玩家的上一个选择，所以子程序会忽略这次鼠标点击。这样，即使玩家在窗口的各个位置乱点击，游戏也不会混乱。
- en: To see whether the player clicks one of the three image buttons, the subroutine
    checks the vertical position of the click (line 4). If it’s within the range of
    the images, the subroutine checks the horizontal position (line 6). The `If/ElseIf`
    ladder then compares the horizontal position with the left and right edges of
    each image and sets `choice1` accordingly (lines 6–12).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看玩家是否点击了三个图片按钮之一，子程序会检查点击的垂直位置（第4行）。如果点击位置在图片的范围内，子程序会检查水平位置（第6行）。接着，`If/ElseIf`
    结构会将水平位置与每个图片的左右边缘进行比较，并相应地设置 `choice1`（第6到12行）。
- en: '**TIP**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: '*If you want to find out the exact positions of the three image buttons, add
    this code to your program:*'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你想知道三个图片按钮的准确位置，可以将这段代码添加到你的程序中：*'
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Move the mouse over the background image to see the coordinates displayed
    in the text window. Don’t forget to delete this code before you share your game
    with your friends!*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*将鼠标移到背景图片上，可以看到文本窗口中显示的坐标。别忘了在和朋友分享游戏之前删除这段代码！*'
- en: '***Step 3: Switch the Images***'
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步骤 3：切换图片***'
- en: When the player makes a choice, you need to show the computer’s pick so they
    know the computer isn’t cheating. To create some excitement, you’ll animate the
    images before showing the final choices. Add the `SwitchImages()` subroutine in
    [Listing 14-6](ch14.html#ch14ex6).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家做出选择后，你需要显示电脑的选择，这样他们就知道电脑没有作弊。为了增加一些兴奋感，你将在显示最终选择前先播放图片动画。在[清单14-6](ch14.html#ch14ex6)中添加
    `SwitchImages()` 子程序。
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 14-6: Switching images for a visual effect*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单14-6：切换图片以实现视觉效果*'
- en: '`SwitchImages()` starts by switching the images for the player and the computer
    10 times very quickly for a fun visual effect (lines 2–9). Then the code shows
    the images that correspond to `choice1` and `choice2` by appending a number to
    the letters `P` and `C`, which represent the names of the images.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`SwitchImages()` 子程序首先会快速切换玩家和电脑的图片 10 次，制造一个有趣的视觉效果（第2到9行）。然后，代码会通过在 `P` 和
    `C` 字母后附加数字来显示与 `choice1` 和 `choice2` 对应的图片，这两个字母分别代表图片的名称。'
- en: Run the code to test it. When you click any of the three image buttons, the
    player and the computer selections will change 10 times before landing on the
    images that correspond to the actual choices. (Don’t flip images too quickly,
    or you’ll get a headache!)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码进行测试。当你点击任何一个图片按钮时，玩家和电脑的选择会在最终显示实际选择的图片之前变化 10 次。（不要翻得太快，不然会头晕！）
- en: '***Step 4: Announce the Winner***'
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步骤 4：宣布获胜者***'
- en: The last part of the game, the `ShowWinner()` subroutine, checks the result
    and displays the winner. Add the `ShowWinner()` subroutine in [Listing 14-7](ch14.html#ch14ex7).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏的最后部分，`ShowWinner()` 子程序会检查结果并显示获胜者。在[清单14-7](ch14.html#ch14ex7)中添加 `ShowWinner()`
    子程序。
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 14-7: Checking who won to display the right image*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单14-7：检查谁赢了并显示正确的图片*'
- en: This subroutine compares the values of `choice1` and `choice2` using an `If/ElseIf`
    ladder and decides which image (`img`) to display (lines 3–17). Remember that
    choice `1` means rock, `2` means paper, and `3` means scissors. Then, line 19
    draws the selected image.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个子程序使用 `If/ElseIf` 结构比较 `choice1` 和 `choice2` 的值，并决定显示哪张图片（`img`）（第3到17行）。记住，选择
    `1` 代表石头，`2` 代表剪刀，`3` 代表布。然后，第19行会绘制选定的图片。
- en: '**TRY IT OUT 14-4**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**动手试试 14-4**'
- en: See if you can turn the rock-paper-scissors game into a two-player game!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 看看你是否能够将剪刀石头布游戏改成两人游戏！
- en: '**Programming Challenges**'
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程挑战**'
- en: If you get stuck, check out *[http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)*
    for the solutions and for more resources and review questions for teachers and
    students.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到困难，可以访问 *[http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)*
    查找解决方案，并获取更多的资源以及适用于教师和学生的复习题目。
- en: Open the file *Race_Incomplete.sb* from this chapter’s folder. This application
    simulates a race between two players. When you run the program, you’ll see the
    following interface. Follow the comments provided in the application’s source
    code to write the missing code and complete the application.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开本章文件夹中的*Race_Incomplete.sb*文件。这个应用程序模拟了两名玩家之间的比赛。当你运行程序时，你将看到以下界面。请根据应用程序源代码中的注释，编写缺失的代码并完成应用程序。
- en: '![image](graphics/f0205-01.jpg)'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f0205-01.jpg)'
- en: Open the file *SimpleSlot.sb* from this chapter’s folder. This program simulates
    a simple slot machine, as shown in the following figure. When you click the mouse,
    the game displays three objects at random. If all three objects are alike, you
    win $20\. If two are alike, you win $5; otherwise, you lose $1\. After playing
    the game, study the code and explain how the program works.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开本章文件夹中的*SimpleSlot.sb*文件。这个程序模拟了一个简单的老虎机，如下图所示。当你点击鼠标时，游戏会随机显示三个物体。如果三个物体相同，你赢得$20。如果两个物体相同，你赢得$5；否则，你将输掉$1。玩完游戏后，研究代码并解释程序的工作原理。
- en: '![image](graphics/f0205-02.jpg)'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f0205-02.jpg)'
- en: Open the file *Space.sb* from this chapter’s folder. In this game, you shoot
    at a UFO flying across the top of the screen (see the following figure). Use the
    left and right arrow keys to move, and press the spacebar to shoot. You have only
    100 shots, and the game tracks your score. Think of some ways to improve the game
    and add them.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开本章文件夹中的*Space.sb*文件。在这个游戏中，你需要射击飞过屏幕顶部的UFO（见下图）。使用左右箭头键移动，按空格键射击。你只有100发子弹，游戏会记录你的得分。想一想可以改进游戏的方式并添加进去。
- en: '![image](graphics/f0205-03.jpg)'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f0205-03.jpg)'
