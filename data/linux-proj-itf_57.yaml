- en: 'Chapter 57. Sockets: UNIX Domain'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 57 章：套接字：UNIX 域
- en: This chapter looks at the use of UNIX domain sockets, which allow communication
    between processes on the same host system. We discuss the use of both stream and
    datagram sockets in the UNIX domain. We also describe the use of file permissions
    to control access to UNIX domain sockets, the use of *socketpair()* to create
    a pair of connected UNIX domain sockets, and the Linux abstract socket namespace.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讲解了 UNIX 域套接字的使用，这些套接字允许同一主机系统上的进程之间进行通信。我们讨论了在 UNIX 域中使用流套接字和数据报套接字的方式。还介绍了使用文件权限控制对
    UNIX 域套接字的访问，使用 *socketpair()* 创建一对连接的 UNIX 域套接字，以及 Linux 的抽象套接字命名空间。
- en: 'UNIX Domain Socket Addresses: *struct sockaddr_un*'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UNIX 域套接字地址：*struct sockaddr_un*
- en: 'In the UNIX domain, a socket address takes the form of a pathname, and the
    domain-specific socket address structure is defined as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 UNIX 域中，套接字地址的形式为路径名，特定于该域的套接字地址结构定义如下：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The prefix *sun_* in the fields of the *sockaddr_un* structure has nothing to
    do with Sun Microsystems; rather, it derives from *socket unix*.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*sockaddr_un* 结构体中的前缀 *sun_* 与 Sun Microsystems 无关，而是源自 *socket unix*。'
- en: SUSv3 doesn’t specify the size of the *sun_path* field. Early BSD implementations
    used 108 and 104 bytes, and one contemporary implementation (HP-UX 11) uses 92
    bytes. Portable applications should code to this lower value, and use *snprintf()*
    or *strncpy()* to avoid buffer overruns when writing into this field.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3 没有指定 *sun_path* 字段的大小。早期的 BSD 实现使用 108 字节和 104 字节，而一个现代实现（HP-UX 11）使用
    92 字节。可移植的应用程序应使用这个较小的值，并使用 *snprintf()* 或 *strncpy()* 来避免在写入该字段时出现缓冲区溢出。
- en: In order to bind a UNIX domain socket to an address, we initialize a *sockaddr_un*
    structure, and then pass a (cast) pointer to this structure as the *addr* argument
    to *bind()*, and specify *addrlen* as the size of the structure, as shown in [Example 57-1](ch57.html#binding_a_unix_domain_socket
    "Example 57-1. Binding a UNIX domain socket").
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将 UNIX 域套接字绑定到一个地址，我们初始化一个 *sockaddr_un* 结构体，然后将该结构体的（强制转换后的）指针作为 *bind()*
    的 *addr* 参数，并将 *addrlen* 指定为该结构体的大小，如 [示例 57-1](ch57.html#binding_a_unix_domain_socket
    "示例 57-1. 绑定 UNIX 域套接字") 所示。
- en: Example 57-1. Binding a UNIX domain socket
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 57-1：绑定 UNIX 域套接字
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The use of the *memset()* call in [Example 57-1](ch57.html#binding_a_unix_domain_socket
    "Example 57-1. Binding a UNIX domain socket") ensures that all of the structure
    fields have the value 0\. (The subsequent *strncpy()* call takes advantage of
    this by specifying its final argument as one less than the size of the *sun_path*
    field, to ensure that this field always has a terminating null byte.) Using *memset()*
    to zero out the entire structure, rather than initializing individual fields,
    ensures that any nonstandard fields that are provided by some implementations
    are also initialized to 0.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [示例 57-1](ch57.html#binding_a_unix_domain_socket "示例 57-1. 绑定 UNIX 域套接字")
    中使用 *memset()* 函数确保所有结构体字段的值都为 0。（后续的 *strncpy()* 调用利用这一点，指定其最后一个参数为 *sun_path*
    字段大小减一，以确保该字段始终有一个终止的空字节。）使用 *memset()* 清零整个结构体，而不是单独初始化各个字段，可以确保某些实现提供的非标准字段也被初始化为
    0。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The BSD-derived function *bzero()* is an alternative to *memset()* for zeroing
    the contents of a structure. SUSv3 specifies *bzero()* and the related *bcopy()*
    (which is similar to *memmove()*), but marks both functions LEGACY, noting that
    *memset()* and *memmove()* are preferred. SUSv4 removes the specifications of
    *bzero()* and *bcopy()*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 衍生自 BSD 的 *bzero()* 函数是 *memset()* 的替代方法，用于将结构体内容清零。SUSv3 规定了 *bzero()* 和相关的
    *bcopy()*（类似于 *memmove()*），但将这两个函数标记为遗留功能，指出应该优先使用 *memset()* 和 *memmove()*。SUSv4
    删除了对 *bzero()* 和 *bcopy()* 的规定。
- en: 'When used to bind a UNIX domain socket, *bind()* creates an entry in the file
    system. (Thus, a directory specified as part of the socket pathname needs to be
    accessible and writable.) The ownership of the file is determined according to
    the usual rules for file creation ([Ownership of New Files](ch15.html#ownership_of_new_files
    "Ownership of New Files")). The file is marked as a socket. When *stat()* is applied
    to this pathname, it returns the value `S_IFSOCK` in the file-type component of
    the *st_mode* field of the *stat* structure ([Retrieving File Information: *stat()*](ch15.html#retrieving_file_information_colon_stat_o
    "Retrieving File Information: stat()")). When listed with *ls -l*, a UNIX domain
    socket is shown with the type *s* in the first column, and *ls -F* appends an
    equal sign (=) to the socket pathname.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当用来绑定 UNIX 域套接字时，*bind()* 会在文件系统中创建一个条目。（因此，作为套接字路径名一部分的目录需要是可访问且可写的。）文件的所有权根据创建文件的常规规则来确定（[新文件的所有权](ch15.html#ownership_of_new_files
    "新文件的所有权")）。该文件被标记为一个套接字。当对该路径名应用 *stat()* 时，它会在 *stat* 结构的 *st_mode* 字段中的文件类型组件返回值
    `S_IFSOCK`（[获取文件信息：*stat()*](ch15.html#retrieving_file_information_colon_stat_o
    "获取文件信息：stat()")）。用 *ls -l* 列出时，UNIX 域套接字在第一列显示为类型 *s*，而 *ls -F* 会在套接字路径名后附加一个等号（=）。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Although UNIX domain sockets are identified by pathnames, I/O on these sockets
    doesn’t involve operations on the underlying device.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 UNIX 域套接字是通过路径名进行标识的，但对这些套接字的 I/O 操作并不涉及底层设备的操作。
- en: 'The following points are worth noting about binding a UNIX domain socket:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定 UNIX 域套接字时有几个要点需要注意：
- en: We can’t bind a socket to an existing pathname (*bind()* fails with the error
    `EADDRINUSE`).
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不能将套接字绑定到已存在的路径名（*bind()* 会因错误 `EADDRINUSE` 失败）。
- en: It is usual to bind a socket to an absolute pathname, so that the socket resides
    at a fixed address in the file system. Using a relative pathname is possible,
    but unusual, because it requires an application that wants to *connect()* to this
    socket to know the current working directory of the application that performs
    the *bind()*.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常会将套接字绑定到一个绝对路径名，这样套接字就会在文件系统中驻留在一个固定地址。虽然使用相对路径名也是可能的，但不常见，因为它要求想要 *connect()*
    到该套接字的应用程序知道执行 *bind()* 的应用程序的当前工作目录。
- en: A socket may be bound to only one pathname; conversely, a pathname can be bound
    to only one socket.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个套接字只能绑定到一个路径名；反之，一个路径名也只能绑定到一个套接字。
- en: We can’t use *open()* to open a socket.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不能使用 *open()* 打开一个套接字。
- en: When the socket is no longer required, its pathname entry can (and generally
    should) be removed using *unlink()* (or *remove()*).
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当套接字不再需要时，可以（且通常应该）使用 *unlink()*（或 *remove()*）删除其路径名条目。
- en: In most of our example programs, we bind UNIX domain sockets to pathnames in
    the `/tmp` directory, because this directory is normally present and writable
    on every system. This makes it easy for the reader to run these programs without
    needing to first edit the socket pathnames. Be aware, however, that this is generally
    not a good design technique. As pointed out in [Pitfalls When Performing File
    Operations and File I/O](ch38.html#pitfalls_when_performing_file_operations "Pitfalls
    When Performing File Operations and File I/O"), creating files in publicly writable
    directories such as `/tmp` can lead to various security vulnerabilities. For example,
    by creating a pathname in `/tmp` with the same name as that used by the application
    socket, we can create a simple denial-of-service attack. Real-world applications
    should *bind()* UNIX domain sockets to absolute pathnames in suitably secured
    directories.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的大多数示例程序中，我们将 UNIX 域套接字绑定到 `/tmp` 目录中的路径名，因为该目录通常在每个系统上都存在且是可写的。这使得读者可以轻松运行这些程序，而无需先编辑套接字路径名。然而，请注意，这通常不是一个好的设计技巧。正如在[执行文件操作和文件
    I/O 时的陷阱](ch38.html#pitfalls_when_performing_file_operations "执行文件操作和文件 I/O 时的陷阱")中指出的那样，在像
    `/tmp` 这样的公共可写目录中创建文件可能会导致各种安全漏洞。例如，通过在 `/tmp` 中创建一个与应用程序套接字使用的名称相同的路径名，我们可以创建一个简单的拒绝服务攻击。实际应用程序应将
    *bind()* UNIX 域套接字绑定到适当安全的目录中的绝对路径名。
- en: Stream Sockets in the UNIX Domain
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UNIX 域中的流套接字
- en: 'We now present a simple client-server application that uses stream sockets
    in the UNIX domain. The client program ([Example 57-4](ch57.html#a_simple_unix_domain_stream_socket_clien
    "Example 57-4. A simple UNIX domain stream socket client")) connects to the server,
    and uses the connection to transfer data from its standard input to the server.
    The server program ([Example 57-3](ch57.html#a_simple_unix_domain_stream_socket_serve
    "Example 57-3. A simple UNIX domain stream socket server")) accepts client connections,
    and transfers all data sent on the connection by the client to standard output.
    The server is a simple example of an *iterative* server—a server that handles
    one client at a time before proceeding to the next client. (We consider server
    design in more detail in [Chapter 60](ch60.html "Chapter 60. Sockets: Server Design").)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在展示一个简单的客户端-服务器应用程序，它使用 UNIX 域中的流套接字。客户端程序（[示例 57-4](ch57.html#a_simple_unix_domain_stream_socket_clien
    "示例 57-4. 一个简单的 UNIX 域流套接字客户端")）连接到服务器，并利用该连接将数据从其标准输入传输到服务器。服务器程序（[示例 57-3](ch57.html#a_simple_unix_domain_stream_socket_serve
    "示例 57-3. 一个简单的 UNIX 域流套接字服务器")）接受客户端连接，并将客户端通过连接发送的所有数据传输到标准输出。该服务器是一个简单的*迭代式*服务器——它一次处理一个客户端，然后再处理下一个客户端。（我们在[第
    60 章](ch60.html "第 60 章. 套接字：服务器设计")中会更详细地讨论服务器设计。）
- en: '[Example 57-2](ch57.html#header_file_for_us_underscore_xfr_unders "Example 57-2. Header
    file for us_xfr_sv.c and us_xfr_cl.c") is the header file used by both of these
    programs.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 57-2](ch57.html#header_file_for_us_underscore_xfr_unders "示例 57-2. 用于 us_xfr_sv.c
    和 us_xfr_cl.c 的头文件") 是这两个程序都使用的头文件。'
- en: Example 57-2. Header file for `us_xfr_sv.c` and `us_xfr_cl.c`
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 57-2. `us_xfr_sv.c` 和 `us_xfr_cl.c` 的头文件
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the following pages, we first present the source code of the server and client,
    and then discuss the details of these programs and show an example of their use.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的页面中，我们首先展示服务器和客户端的源代码，然后讨论这些程序的细节，并展示它们的使用示例。
- en: Example 57-3. A simple UNIX domain stream socket server
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 57-3. 一个简单的 UNIX 域流套接字服务器
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Example 57-4. A simple UNIX domain stream socket client
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 57-4. 一个简单的 UNIX 域流套接字客户端
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The server program is shown in [Example 57-3](ch57.html#a_simple_unix_domain_stream_socket_serve
    "Example 57-3. A simple UNIX domain stream socket server"). The server performs
    the following steps:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器程序如[示例 57-3](ch57.html#a_simple_unix_domain_stream_socket_serve "示例 57-3.
    一个简单的 UNIX 域流套接字服务器")所示。服务器执行以下步骤：
- en: Create a socket.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个套接字。
- en: Remove any existing file with the same pathname as that to which we want to
    bind the socket.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除任何与我们希望绑定套接字的路径名相同的现有文件。
- en: Construct an address structure for the server’s socket, bind the socket to that
    address, and mark the socket as a listening socket.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为服务器的套接字构建一个地址结构，将套接字绑定到该地址，并将其标记为监听套接字。
- en: 'Execute an infinite loop to handle incoming client requests. Each loop iteration
    performs the following steps:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行一个无限循环来处理传入的客户端请求。每次循环迭代执行以下步骤：
- en: Accept a connection, obtaining a new socket, *cfd*, for the connection.
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受一个连接，获取一个新的套接字，*cfd*，用于该连接。
- en: Read all of the data from the connected socket and write it to standard output.
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从已连接的套接字读取所有数据并将其写入标准输出。
- en: Close the connected socket *cfd*.
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭已连接的套接字*cfd*。
- en: The server must be terminated manually (e.g., by sending it a signal).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器必须手动终止（例如，通过向其发送信号）。
- en: 'The client program ([Example 57-4](ch57.html#a_simple_unix_domain_stream_socket_clien
    "Example 57-4. A simple UNIX domain stream socket client")) performs the following
    steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端程序（[示例 57-4](ch57.html#a_simple_unix_domain_stream_socket_clien "示例 57-4.
    一个简单的 UNIX 域流套接字客户端")）执行以下步骤：
- en: Create a socket.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个套接字。
- en: Construct the address structure for the server’s socket and connect to the socket
    at that address.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为服务器的套接字构建地址结构，并连接到该地址的套接字。
- en: Execute a loop that copies its standard input to the socket connection. Upon
    encountering end-of-file in its standard input, the client terminates, with the
    result that its socket is closed and the server sees end-of-file when reading
    from the socket on the other end of the connection.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行一个循环，将标准输入复制到套接字连接中。遇到标准输入的文件结束符时，客户端终止，结果是它的套接字被关闭，服务器在从连接另一端的套接字读取时看到文件结束符。
- en: 'The following shell session log demonstrates the use of these programs. We
    begin by running the server in the background:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个展示如何使用这些程序的 shell 会话日志。我们首先在后台运行服务器：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We then create a test file to be used as input for the client, and run the
    client:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建一个测试文件，用作客户端的输入，并运行客户端：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'At this point, the child has completed. Now we terminate the server as well,
    and check that the server’s output matches the client’s input:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，子进程已经完成。现在我们也终止服务器，并检查服务器的输出是否与客户端的输入匹配：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The *diff* command produces no output, indicating that the input and output
    files are identical.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*diff* 命令不会产生任何输出，表示输入文件和输出文件是相同的。'
- en: Note that after the server terminates, the socket pathname continues to exist.
    This is why the server uses *remove()* to remove any existing instance of the
    socket pathname before calling *bind()*. (Assuming we have appropriate permissions,
    this *remove()* call would remove any type of file with this pathname, even if
    it wasn’t a socket.) If we did not do this, then the *bind()* call would fail
    if a previous invocation of the server had already created this socket pathname.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在服务器终止后，套接字路径名仍然存在。这就是为什么服务器在调用 *bind()* 之前使用 *remove()* 删除任何已存在的套接字路径名的原因。（假设我们有适当的权限，此
    *remove()* 调用将删除任何类型的文件，即使它不是套接字。）如果我们不这么做，*bind()* 调用将失败，如果之前的服务器调用已经创建了这个套接字路径名。
- en: Datagram Sockets in the UNIX Domain
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UNIX 域中的数据报套接字
- en: In the generic description of datagram sockets that we provided in [Datagram
    Sockets](ch56.html#datagram_sockets "Datagram Sockets"), we stated that communication
    using datagram sockets is unreliable. This is the case for datagrams transferred
    over a network. However, for UNIX domain sockets, datagram transmission is carried
    out within the kernel, and is reliable. All messages are delivered in order and
    unduplicated.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们提供的 [数据报套接字](ch56.html#datagram_sockets "数据报套接字")的通用描述中，我们说明了使用数据报套接字的通信是不可靠的。这适用于通过网络传输的数据报。然而，对于
    UNIX 域套接字，数据报传输是在内核中进行的，因此是可靠的。所有消息都会按顺序且不重复地交付。
- en: Maximum datagram size for UNIX domain datagram sockets
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: UNIX 域数据报套接字的最大数据报大小
- en: SUSv3 doesn’t specify a maximum size for datagrams sent via a UNIX domain socket.
    On Linux, we can send quite large datagrams. The limits are controlled via the
    `SO_SNDBUF` socket option and various `/proc` files, as described in the *socket(7)*
    manual page. However, some other UNIX implementations impose lower limits, such
    as 2048 bytes. Portable applications employing UNIX domain datagram sockets should
    consider imposing a low upper limit on the size of datagrams used.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3 并没有规定通过 UNIX 域套接字发送的数据报的最大大小。在 Linux 上，我们可以发送相当大的数据报。限制由 `SO_SNDBUF` 套接字选项和各种
    `/proc` 文件控制，如 *socket(7)* 手册页中所述。然而，一些其他的 UNIX 实现会施加较低的限制，例如 2048 字节。使用 UNIX
    域数据报套接字的便携式应用程序应考虑对使用的数据报大小施加一个较低的上限。
- en: Example program
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例程序
- en: '[Example 57-6](ch57.html#a_simple_unix_domain_datagram_server "Example 57-6. A
    simple UNIX domain datagram server") and [Example 57-7](ch57.html#a_simple_unix_domain_datagram_client
    "Example 57-7. A simple UNIX domain datagram client") show a simple client-server
    application using UNIX domain datagram sockets. Both of these programs make use
    of the header file shown in [Example 57-5](ch57.html#header_file_used_by_ud_underscore_ucase
    "Example 57-5. Header file used by ud_ucase_sv.c and ud_ucase_cl.c").'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 57-6](ch57.html#a_simple_unix_domain_datagram_server "示例 57-6. 一个简单的 UNIX
    域数据报服务器") 和 [示例 57-7](ch57.html#a_simple_unix_domain_datagram_client "示例 57-7.
    一个简单的 UNIX 域数据报客户端") 展示了一个使用 UNIX 域数据报套接字的简单客户端-服务器应用程序。这两个程序都使用了 [示例 57-5](ch57.html#header_file_used_by_ud_underscore_ucase
    "示例 57-5. `ud_ucase_sv.c` 和 `ud_ucase_cl.c` 使用的头文件") 中显示的头文件。'
- en: Example 57-5. Header file used by `ud_ucase_sv.c` and `ud_ucase_cl.c`
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 57-5. `ud_ucase_sv.c` 和 `ud_ucase_cl.c` 使用的头文件
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The server program ([Example 57-6](ch57.html#a_simple_unix_domain_datagram_server
    "Example 57-6. A simple UNIX domain datagram server")) first creates a socket
    and binds it to a well-known address. (Beforehand, the server unlinks the pathname
    matching that address, in case the pathname already exists.) The server then enters
    an infinite loop, using *recvfrom()* to receive datagrams from clients, converting
    the received text to uppercase, and returning the converted text to the client
    using the address obtained via *recvfrom()*.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器程序（[示例 57-6](ch57.html#a_simple_unix_domain_datagram_server "示例 57-6. 一个简单的
    UNIX 域数据报服务器")）首先创建一个套接字并将其绑定到一个已知地址。（在此之前，服务器会先删除与该地址匹配的路径名，以防路径名已存在。）然后服务器进入一个无限循环，使用
    *recvfrom()* 从客户端接收数据报，将接收到的文本转换为大写，并通过 *recvfrom()* 获得的地址将转换后的文本返回给客户端。
- en: The client program ([Example 57-7](ch57.html#a_simple_unix_domain_datagram_client
    "Example 57-7. A simple UNIX domain datagram client")) creates a socket and binds
    the socket to an address, so that the server can send its reply. The client address
    is made unique by including the client’s process ID in the pathname. The client
    then loops, sending each of its command-line arguments as a separate message to
    the server. After sending each message, the client reads the server response and
    displays it on standard output.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端程序（[示例57-7](ch57.html#a_simple_unix_domain_datagram_client "示例57-7. 一个简单的UNIX域数据报客户端")）创建一个套接字并将其绑定到一个地址，以便服务器可以发送回复。通过在路径名中包含客户端的进程ID，使客户端地址具有唯一性。然后客户端进入循环，将每个命令行参数作为单独的消息发送给服务器。在发送每个消息后，客户端读取服务器的响应并在标准输出上显示。
- en: Example 57-6. A simple UNIX domain datagram server
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 示例57-6。一个简单的UNIX域数据报服务器
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Example 57-7. A simple UNIX domain datagram client
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 示例57-7。一个简单的UNIX域数据报客户端
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following shell session log demonstrates the use of the server and client
    programs:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下shell会话日志演示了服务器和客户端程序的使用：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The second invocation of the client program was designed to show that when a
    *recvfrom()* call specifies a *length* (`BUF_SIZE`, defined in [Example 57-5](ch57.html#header_file_used_by_ud_underscore_ucase
    "Example 57-5. Header file used by ud_ucase_sv.c and ud_ucase_cl.c") with the
    value 10) that is shorter than the message size, the message is silently truncated.
    We can see that this truncation occurred, because the server prints a message
    saying it received just 10 bytes, while the message sent by the client consisted
    of 12 bytes.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端程序的第二次调用旨在演示，当*recvfrom()*调用指定一个比消息大小短的*length*（`BUF_SIZE`，在[示例57-5](ch57.html#header_file_used_by_ud_underscore_ucase
    "示例57-5. ud_ucase_sv.c和ud_ucase_cl.c使用的头文件")中定义，值为10）时，消息会被静默截断。我们可以看到发生了这种截断，因为服务器打印了一个消息，表示它接收到了10个字节，而客户端发送的消息包含12个字节。
- en: UNIX Domain Socket Permissions
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UNIX域套接字权限
- en: 'The ownership and permissions of the socket file determine which processes
    are able to communicate with that socket:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 套接字文件的所有权和权限决定了哪些进程可以与该套接字进行通信：
- en: To connect to a UNIX domain stream socket, write permission is required on the
    socket file.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要连接到UNIX域流套接字，必须对套接字文件具有写权限。
- en: To send a datagram to a UNIX domain datagram socket, write permission is required
    on the socket file.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要向UNIX域数据报套接字发送数据报，必须对套接字文件具有写权限。
- en: In addition, execute (search) permission is required on each of the directories
    in the socket pathname.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，需要在套接字路径名中的每个目录上具有执行（搜索）权限。
- en: By default, a socket is created (by *bind()*) with all permissions granted to
    owner (user), group, and other. To change this, we can precede the call to *bind()*
    with a call to *umask()* to disable the permissions that we do not wish to grant.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，套接字由*bind()*创建，所有权限都授予所有者（用户）、组和其他人。为了更改此设置，我们可以在调用*bind()*之前使用*umask()*来禁用我们不希望授予的权限。
- en: Some systems ignore the permissions on the socket file (SUSv3 allows this).
    Thus, we can’t portably use socket file permissions to control access to the socket,
    although we can portably use permissions on the hosting directory for this purpose.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有些系统忽略了套接字文件的权限（SUSv3允许这种情况）。因此，我们无法便捷地使用套接字文件的权限来控制对套接字的访问，尽管我们可以便捷地使用托管目录的权限来实现这一目的。
- en: 'Creating a Connected Socket Pair: *socketpair()*'
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个连接的套接字对：*socketpair()*
- en: Sometimes, it is useful for a single process to create a pair of sockets and
    connect them together. This could be done using two calls to *socket()*, a call
    to *bind()*, and then either calls to *listen()*, *connect()*, and *accept()*
    (for stream sockets), or a call to *connect()* (for datagram sockets). The *socketpair()*
    system call provides a shorthand for this operation.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，单个进程创建一对套接字并将它们连接在一起是有用的。这可以通过两次调用*socket()*，一次调用*bind()*，然后调用*listen()*、*connect()*和*accept()*（对于流套接字），或者调用*connect()*（对于数据报套接字）来完成。*socketpair()*系统调用提供了这种操作的简写。
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Returns 0 on success, or -1 on error
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 成功时返回0，出错时返回-1
- en: This *socketpair()* system call can be used only in the UNIX domain; that is,
    *domain* must be specified as `AF_UNIX`. (This restriction applies on most implementations,
    and is logical, since the socket pair is created on a single host system.) The
    socket *type* may be specified as either `SOCK_DGRAM` or `SOCK_STREAM`. The *protocol*
    argument must be specified as 0\. The *sockfd* array returns the file descriptors
    referring to the two connected sockets.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 该*socketpair()*系统调用只能在UNIX域中使用；即，*域*必须指定为`AF_UNIX`。（此限制适用于大多数实现，并且是合乎逻辑的，因为套接字对是在单个主机系统上创建的。）套接字*类型*可以指定为`SOCK_DGRAM`或`SOCK_STREAM`。*协议*参数必须指定为0。*sockfd*数组返回指向两个连接套接字的文件描述符。
- en: Specifying *type* as `SOCK_STREAM` creates the equivalent of a bidirectional
    pipe (also known as a *stream pipe*). Each socket can be used for both reading
    and writing, and separate data channels flow in each direction between the two
    sockets. (On BSD-derived implementations, *pipe()* is implemented as a call to
    *socketpair()*.)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 指定*类型*为`SOCK_STREAM`会创建一个双向管道的等效物（也称为*流管道*）。每个套接字既可以用于读取，也可以用于写入，并且在两个套接字之间，每个方向都有独立的数据通道流动。（在BSD派生的实现中，*pipe()*被实现为对*socketpair()*的调用。）
- en: Typically, a socket pair is used in a similar fashion to a pipe. After the *socketpair()*
    call, the process then creates a child via *fork()*. The child inherits copies
    of the parent’s file descriptors, including the descriptors referring to the socket
    pair. Thus, the parent and child can use the socket pair for IPC.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，套接字对的使用方式类似于管道。调用*socketpair()*之后，进程通过*fork()*创建一个子进程。子进程继承了父进程的文件描述符副本，包括指向套接字对的描述符。因此，父子进程可以使用套接字对进行进程间通信（IPC）。
- en: One way in which the use of *socketpair()* differs from creating a pair of connected
    sockets manually is that the sockets are not bound to any address. This can help
    us avoid a whole class of security vulnerabilities, since the sockets are not
    visible to any other process.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*socketpair()*的一个方式与手动创建一对连接套接字的区别在于，这些套接字不绑定任何地址。这有助于避免一类安全漏洞，因为这些套接字对其他进程不可见。
- en: Note
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Starting with kernel 2.6.27, Linux provides a second use for the *type* argument,
    by allowing two nonstandard flags to be ORed with the socket type. The `SOCK_CLOEXEC`
    flag causes the kernel to enable the close-on-exec flag (`FD_CLOEXEC`) for the
    two new file descriptors. This flag is useful for the same reasons as the *open()*
    `O_CLOEXEC` flag described in [File descriptor number returned by *open()*](ch04.html#file_descriptor_number_returned_by-id1
    "File descriptor number returned by open()"). The `SOCK_NONBLOCK` flag causes
    the kernel to set the `O_NONBLOCK` flag on both underlying open file descriptions,
    so that future I/O operations on the socket will be nonblocking. This saves additional
    calls to *fcntl()* to achieve the same result.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 从内核2.6.27开始，Linux为*类型*参数提供了第二种用途，允许两个非标准标志与套接字类型进行“或”操作。`SOCK_CLOEXEC`标志会导致内核为两个新的文件描述符启用close-on-exec标志（`FD_CLOEXEC`）。该标志的用途与[*open()*的`O_CLOEXEC`](ch04.html#file_descriptor_number_returned_by-id1
    "open()返回的文件描述符号")标志相同。`SOCK_NONBLOCK`标志会导致内核为两个底层打开的文件描述符设置`O_NONBLOCK`标志，从而使未来对该套接字的I/O操作变为非阻塞。这省去了额外调用*fcntl()*以达到相同结果的需求。
- en: The Linux Abstract Socket Namespace
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux抽象套接字命名空间
- en: 'The so-called *abstract namespace* is a Linux-specific feature that allows
    us to bind a UNIX domain socket to a name without that name being created in the
    file system. This provides a few potential advantages:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 所谓的*抽象命名空间*是一个特定于Linux的功能，它允许我们将UNIX域套接字绑定到一个名称，而无需该名称在文件系统中创建。这提供了一些潜在的优势：
- en: We don’t need to worry about possible collisions with existing names in the
    file system.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不需要担心与文件系统中现有名称可能发生的冲突。
- en: It is not necessary to unlink the socket pathname when we have finished using
    the socket. The abstract name is automatically removed when the socket is closed.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不需要在使用完套接字后取消链接套接字路径名。抽象名称会在套接字关闭时自动删除。
- en: We don’t need to create a file-system pathname for the socket. This may be useful
    in a *chroot* environment, or if we don’t have write access to a file system.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不需要为套接字创建文件系统路径名。这在*chroot*环境中可能非常有用，或者当我们没有对文件系统的写入权限时。
- en: To create an abstract binding, we specify the first byte of the *sun_path* field
    as a null byte (`\0`). This distinguishes abstract socket names from conventional
    UNIX domain socket pathnames, which consist of a string of one or more nonnull
    bytes terminated by a null byte. The name of the abstract socket is then defined
    by the remaining bytes (including any null bytes) in *sun_path* up to the length
    defined for the size of the address structure (i.e., *addrlen - sizeof(sa_family_t)*).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建抽象绑定，我们将 *sun_path* 字段的第一个字节指定为空字节（`\0`）。这区分了抽象套接字名称和传统 UNIX 域套接字路径名，后者由一个或多个非空字节组成，且以空字节结尾。抽象套接字的名称由
    *sun_path* 中剩余的字节（包括任何空字节）定义，直到地址结构的大小所定义的长度（即 *addrlen - sizeof(sa_family_t)*）为止。
- en: '[Example 57-8](ch57.html#creating_an_abstract_socket_binding "Example 57-8. Creating
    an abstract socket binding") demonstrates the creation of an abstract socket binding.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 57-8](ch57.html#creating_an_abstract_socket_binding "示例 57-8. 创建抽象套接字绑定")展示了抽象套接字绑定的创建。'
- en: Example 57-8. Creating an abstract socket binding
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 57-8. 创建抽象套接字绑定
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The fact that an initial null byte is used to distinguish an abstract socket
    name from a conventional socket name can have an unusual consequence. Suppose
    that the variable *name* happens to point to a zero-length string and that we
    attempt to bind a UNIX domain socket to a *sun_path* initialized as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用初始空字节来区分抽象套接字名称和传统套接字名称可能会带来一种不同寻常的后果。假设变量*name*恰好指向一个零长度的字符串，并且我们尝试将一个 UNIX
    域套接字绑定到如下初始化的*sun_path*：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: On Linux, we’ll inadvertently create an abstract socket binding. However, such
    a code sequence is probably unintentional (i.e., a bug). On other UNIX implementations,
    the subsequent *bind()* would fail.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上，我们会不经意地创建一个抽象套接字绑定。然而，这样的代码序列可能是无意的（即，一个 bug）。在其他 UNIX 实现中，后续的 *bind()*
    调用将失败。
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: UNIX domain sockets allow communication between applications on the same host.
    The UNIX domain supports both stream and datagram sockets.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: UNIX 域套接字允许同一主机上的应用程序之间进行通信。UNIX 域支持流式套接字和数据报套接字。
- en: A UNIX domain socket is identified by a pathname in the file system. File permissions
    can be used to control access to a UNIX domain socket.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: UNIX 域套接字通过文件系统中的路径名进行标识。可以使用文件权限来控制对 UNIX 域套接字的访问。
- en: 'The *socketpair()* system call creates a pair of connected UNIX domain sockets.
    This avoids the need for multiple system calls to create, bind, and connect the
    sockets. A socket pair is normally used in a similar fashion to a pipe: one process
    creates the socket pair and then forks to create a child that inherits descriptors
    referring to the sockets. The two processes can then communicate via the socket
    pair.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*socketpair()* 系统调用创建一对连接的 UNIX 域套接字。这避免了多个系统调用来创建、绑定和连接套接字。套接字对通常像管道一样使用：一个进程创建套接字对，然后通过分叉（fork）创建一个子进程，子进程继承指向套接字的描述符。然后，两个进程可以通过套接字对进行通信。'
- en: The Linux-specific abstract socket namespace allows us to bind a UNIX domain
    socket to a name that doesn’t appear in the file system.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 特有的抽象套接字命名空间允许我们将 UNIX 域套接字绑定到一个在文件系统中不存在的名称。
- en: Further information
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 进一步的信息
- en: Refer to the sources of further information listed in [Further Information](ch59.html#further_information-id81
    "Further Information").
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考[进一步的信息](ch59.html#further_information-id81 "进一步的信息")中列出的资料来源。
- en: Exercises
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: In [Datagram Sockets in the UNIX Domain](ch57.html#datagram_sockets_in_the_unix_domain
    "Datagram Sockets in the UNIX Domain"), we noted that UNIX domain datagram sockets
    are reliable. Write programs to show that if a sender transmits datagrams to a
    UNIX domain datagram socket faster than the receiver reads them, then the sender
    is eventually blocked, and remains blocked until the receiver reads some of the
    pending datagrams.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[UNIX 域中的数据报套接字](ch57.html#datagram_sockets_in_the_unix_domain "UNIX 域中的数据报套接字")中，我们提到
    UNIX 域数据报套接字是可靠的。编写程序证明，如果发送方比接收方读取数据报的速度更快，那么发送方最终会被阻塞，并且会一直被阻塞，直到接收方读取一些待处理的数据报。
- en: Rewrite the programs in [Example 57-3](ch57.html#a_simple_unix_domain_stream_socket_serve
    "Example 57-3. A simple UNIX domain stream socket server") (`us_xfr_sv.c`) and
    [Example 57-4](ch57.html#a_simple_unix_domain_stream_socket_clien "Example 57-4. A
    simple UNIX domain stream socket client") (`us_xfr_cl.c`) to use the Linux-specific
    abstract socket namespace ([The Linux Abstract Socket Namespace](ch57.html#the_linux_abstract_socket_namespace
    "The Linux Abstract Socket Namespace")).
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将[示例 57-3](ch57.html#a_simple_unix_domain_stream_socket_serve "示例 57-3. 简单的
    UNIX 域流套接字服务器")（`us_xfr_sv.c`）和[示例 57-4](ch57.html#a_simple_unix_domain_stream_socket_clien
    "示例 57-4. 简单的 UNIX 域流套接字客户端")（`us_xfr_cl.c`）中的程序重写为使用 Linux 特有的抽象套接字命名空间([The
    Linux Abstract Socket Namespace](ch57.html#the_linux_abstract_socket_namespace
    "The Linux Abstract Socket Namespace"))。
- en: Reimplement the sequence-number server and client of [A Client-Server Application
    Using FIFOs](ch44.html#a_client-server_application_using_fifos "A Client-Server
    Application Using FIFOs") using UNIX domain stream sockets.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 UNIX 域流套接字重新实现[A Client-Server Application Using FIFOs](ch44.html#a_client-server_application_using_fifos
    "A Client-Server Application Using FIFOs")中的序列号服务器和客户端。
- en: Suppose that we create two UNIX domain datagram sockets bound to the paths `/somepath/a`
    and `/somepath/b`, and that we connect the socket `/somepath/a` to `/somepath/b`.
    What happens if we create a third datagram socket and try to send (*sendto()*)
    a datagram via that socket to `/somepath/a`? Write a program to determine the
    answer. If you have access to other UNIX systems, test the program on those systems
    to see if the answer differs.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设我们创建了两个绑定到路径`/somepath/a`和`/somepath/b`的 UNIX 域数据报套接字，并将套接字`/somepath/a`连接到`/somepath/b`。如果我们创建第三个数据报套接字并尝试通过该套接字向`/somepath/a`发送(*sendto()*)一个数据报，会发生什么？编写一个程序来确定答案。如果你可以访问其他
    UNIX 系统，在这些系统上测试程序，看看答案是否不同。
