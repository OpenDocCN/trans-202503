- en: <samp class="SANS_Dogma_OT_Bold_B_11">APPENDIX</samp> <samp class="SANS_Dogma_OT_Bold_B_11">FURTHER
    READING</samp>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_11">附录</samp> <samp class="SANS_Dogma_OT_Bold_B_11">进一步阅读</samp>
- en: <samp class="SANS_Futura_Std_Bold_B_11">Chapter 1</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">第1章</samp>
- en: The simplified equations for projectile motion used in the examples are explained
    on Wikipedia at [*https://<wbr>en<wbr>.wikipedia<wbr>.org<wbr>/wiki<wbr>/Projectile<wbr>_motion*](https://en.wikipedia.org/wiki/Projectile_motion).
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例中使用的简化投射运动方程可以在Wikipedia上的[*https://<wbr>en<wbr>.wikipedia<wbr>.org<wbr>/wiki<wbr>/Projectile<wbr>_motion*](https://en.wikipedia.org/wiki/Projectile_motion)中找到详细解释。
- en: Frances Buontempo’s *Genetic Algorithms and Machine Learning for Programmers*
    (Pragmatic Bookshelf, 2019) has a whole section on ballistics. This chapter’s
    initial example was taken from that book and then abused for didactic reasons.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Frances Buontempo的*《程序员的遗传算法与机器学习》*（Pragmatic Bookshelf, 2019）专门有一章讨论弹道学。本章的初始示例来源于该书，并为教学目的做了适当的修改。
- en: 'You can find out more about the problem of primitive obsession, and its antidotes,
    here:'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在这里了解更多关于原始痴迷问题及其解决方法：
- en: “Primitive Obsession” wiki page, [*https://<wbr>wiki<wbr>.c2<wbr>.com<wbr>/<wbr>?PrimitiveObsession*](https://wiki.c2.com/?PrimitiveObsession)
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “原始痴迷”wiki页面，[*https://<wbr>wiki<wbr>.c2<wbr>.com<wbr>/<wbr>?PrimitiveObsession*](https://wiki.c2.com/?PrimitiveObsession)
- en: Refactoring Guru website, [*https://<wbr>refactoring<wbr>.guru<wbr>/smells<wbr>/primitive<wbr>-obsession*](https://refactoring.guru/smells/primitive-obsession)
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Refactoring Guru网站，[*https://<wbr>refactoring<wbr>.guru<wbr>/smells<wbr>/primitive<wbr>-obsession*](https://refactoring.guru/smells/primitive-obsession)
- en: Fit wiki page, [*http://<wbr>fit<wbr>.c2<wbr>.com<wbr>/wiki<wbr>.cgi<wbr>?WholeValue*](http://fit.c2.com/wiki.cgi?WholeValue)
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fit wiki页面，[*http://<wbr>fit<wbr>.c2<wbr>.com<wbr>/wiki<wbr>.cgi?w<WholeValue*](http://fit.c2.com/wiki.cgi?WholeValue)
- en: “The CHECKS Pattern Language of Information Integrity,” by Ward Cunningham,
    [*http://<wbr>c2<wbr>.com<wbr>/ppr<wbr>/checks<wbr>.xhtml*](http://c2.com/ppr/checks.xhtml)
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “信息完整性检查模式语言”，Ward Cunningham著，[*http://<wbr>c2<wbr>.com<wbr>/ppr<wbr>/checks<wbr>.xhtml*](http://c2.com/ppr/checks.xhtml)
- en: 'The Quantity pattern is described in Martin Fowler’s *Analysis Patterns: Reusable
    Object Models* (Addison-Wesley Professional, 1996). The Primitive Obsession code
    smell is identified in his book *Refactoring: Improving the Design of Existing
    Code* (Addison-Wesley Professional, 2018).'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数量模式在Martin Fowler的*《分析模式：可重用的对象模型》*（Addison-Wesley Professional, 1996）中有详细描述。原始痴迷代码异味在他的书《重构：改善现有代码的设计》*（Addison-Wesley
    Professional, 2018）*中被指出。
- en: 'Mixing up the units of values in calculations can have serious consequences;
    see “When NASA Lost a Spacecraft Due to a Metric Math Mistake” by Ajay Harish:
    [*https://<wbr>www<wbr>.simscale<wbr>.com<wbr>/blog<wbr>/2017<wbr>/12<wbr>/nasa<wbr>-mars<wbr>-climate<wbr>-orbiter<wbr>-metric<wbr>/*](https://www.simscale.com/blog/2017/12/nasa-mars-climate-orbiter-metric/).'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在计算中混淆值的单位可能会产生严重后果；参见Ajay Harish的文章《NASA由于度量数学错误丧失了一艘航天器》：[*https://<wbr>www<wbr>.simscale<wbr>.com<wbr>/blog<wbr>/2017<wbr>/12<wbr>/nasa<wbr>-mars<wbr>-climate<wbr>-orbiter<wbr>-metric<wbr>/*](https://www.simscale.com/blog/2017/12/nasa-mars-climate-orbiter-metric/)。
- en: Kevlin Henney’s book *97 Things Every Programmer Should Know* (O’Reilly, 2010)
    has lots of good advice on this general subject and many others. Representing
    domain concepts in the code is nicely captured by Dan North in Chapter 11, and
    by Einar Landre in Chapter 65.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kevlin Henney的书籍*《程序员必知的97件事》*（O'Reilly, 2010）提供了许多关于这一主题以及其他多个主题的宝贵建议。领域概念在代码中的表示在第11章由Dan
    North巧妙地阐述，在第65章由Einar Landre进行了更深入的探讨。
- en: 'Henney also looks at Value Object, Whole Value, Class Factory Method, and other
    patterns for values in “Patterns in Java,” which applies equally well to C#: [*https://<wbr>www<wbr>.slideshare<wbr>.net<wbr>/Kevlin<wbr>/value<wbr>-added<wbr>-43542768*](https://www.slideshare.net/Kevlin/value-added-43542768).
    Also see his paper “Factory and Disposal Methods: A Complementary and Symmetric
    Pair of Patterns,” from the 2003 VikingPLoP (Pattern Languages of Programs) conference,
    at [*https://<wbr>www<wbr>.researchgate<wbr>.net<wbr>/publication<wbr>/238075361*](https://www.researchgate.net/publication/238075361).'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Henney还在《Java中的模式》一书中探讨了值对象、整体值、类工厂方法和其他值模式，这些模式同样适用于C#：[*https://<wbr>www<wbr>.slideshare<wbr>.net<wbr>/Kevlin<wbr>/value<wbr>-added<wbr>-43542768*](https://www.slideshare.net/Kevlin/value-added-43542768)。还可以参考他在2003年VikingPLoP（程序模式语言）大会上的论文《工厂和处置方法：互补且对称的模式对》，链接：[*https://<wbr>www<wbr>.researchgate<wbr>.net<wbr>/publication<wbr>/238075361*](https://www.researchgate.net/publication/238075361)。
- en: 'It has long been recognized that keeping objects simple helps in creating programs
    that are understandable. The single responsibility principle—the *S* in SOLID—is
    perhaps the most well-known guidance on this: [*https://<wbr>en<wbr>.wikipedia<wbr>.org<wbr>/wiki<wbr>/SOLID*](https://en.wikipedia.org/wiki/SOLID).'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长期以来，人们已认识到保持对象简洁有助于创建易于理解的程序。单一责任原则——即SOLID中的*S*——可能是最著名的指导原则：[*https://<wbr>en<wbr>.wikipedia<wbr>.org<wbr>/wiki<wbr>/SOLID*](https://en.wikipedia.org/wiki/SOLID)。
- en: 'However, the benefits of separate responsibilities were recognized in the 1970s,
    if not earlier, when Edsger Dijkstra wrote about separating concerns:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，关于分离职责的好处早在1970年代就已被认识到，甚至更早，当时埃兹格·迪克斯特拉就曾写过关于分离关注点的文章：
- en: “The Effective Arrangement of Logical Systems,” [*https://<wbr>www<wbr>.cs<wbr>.utexas<wbr>.edu<wbr>/users<wbr>/EWD<wbr>/transcriptions<wbr>/EWD05xx<wbr>/EWD562<wbr>.xhtml*](https://www.cs.utexas.edu/users/EWD/transcriptions/EWD05xx/EWD562.xhtml)
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “逻辑系统的有效排列，” [*https://<wbr>www<wbr>.cs<wbr>.utexas<wbr>.edu<wbr>/users<wbr>/EWD<wbr>/transcriptions<wbr>/EWD05xx<wbr>/EWD562<wbr>.xhtml*](https://www.cs.utexas.edu/users/EWD/transcriptions/EWD05xx/EWD562.xhtml)
- en: “On the Role of Scientific Thought,” [*https://<wbr>www<wbr>.cs<wbr>.utexas<wbr>.edu<wbr>/users<wbr>/EWD<wbr>/transcriptions<wbr>/EWD04xx<wbr>/EWD447<wbr>.xhtml*](https://www.cs.utexas.edu/users/EWD/transcriptions/EWD04xx/EWD447.xhtml)
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “科学思维的作用，” [*https://<wbr>www<wbr>.cs<wbr>.utexas<wbr>.edu<wbr>/users<wbr>/EWD<wbr>/transcriptions<wbr>/EWD04xx<wbr>/EWD447<wbr>.xhtml*](https://www.cs.utexas.edu/users/EWD/transcriptions/EWD04xx/EWD447.xhtml)
- en: <samp class="SANS_Futura_Std_Bold_B_11">Chapter 2</samp>
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">第2章</samp>
- en: 'The Common Type System is summarized in the following Microsoft documentation:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公共类型系统在以下微软文档中有总结：
- en: '[*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/programming<wbr>-guide<wbr>/types<wbr>/#the<wbr>-common<wbr>-type<wbr>-system*](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/#the-common-type-system)'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/programming<wbr>-guide<wbr>/types<wbr>/#the<wbr>-common<wbr>-type<wbr>-system*](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/#the-common-type-system)'
- en: '[*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/standard<wbr>/base<wbr>-types<wbr>/common<wbr>-type<wbr>-system*](https://docs.microsoft.com/en-us/dotnet/standard/base-types/common-type-system)'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/standard<wbr>/base<wbr>-types<wbr>/common<wbr>-type<wbr>-system*](https://docs.microsoft.com/en-us/dotnet/standard/base-types/common-type-system)'
- en: The Microsoft documentation for the language rules around struct types is at
    [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/language<wbr>-specification<wbr>/structs*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/structs).
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软关于结构类型语言规则的文档可以在 [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/language<wbr>-specification<wbr>/structs*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/structs)
    中找到。
- en: More information on the behavior of <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Threading.Monitor</samp>
    with respect to lock objects can be found at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/api<wbr>/system<wbr>.threading<wbr>.monitor<wbr>?view<wbr>=net<wbr>-6<wbr>.0#Lock*](https://docs.microsoft.com/en-us/dotnet/api/system.threading.monitor?view=net-6.0#Lock).
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 <samp class="SANS_TheSansMonoCd_W5Regular_11">System.Threading.Monitor</samp>
    在锁定对象方面的行为的更多信息，可以在 [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/api<wbr>/system<wbr>.threading<wbr>.monitor<wbr>?view<wbr>=net<wbr>-6<wbr>.0#Lock*](https://docs.microsoft.com/en-us/dotnet/api/system.threading.monitor?view=net-6.0#Lock)
    中找到。
- en: The specific overload resolution rules regarding optional parameters are explained
    at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/programming<wbr>-guide<wbr>/classes<wbr>-and<wbr>-structs<wbr>/named<wbr>-and<wbr>-optional<wbr>-arguments#overload<wbr>-resolution*](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments#overload-resolution).
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于可选参数的特定重载解析规则，请参见 [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/programming<wbr>-guide<wbr>/classes<wbr>-and<wbr>-structs<wbr>/named<wbr>-and<wbr>-optional<wbr>-arguments#overload<wbr>-resolution*](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments#overload-resolution)。
- en: Eric Lippert explains *why* initializers for read-only fields and constructors
    run in the order they do at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-gb<wbr>/archive<wbr>/blogs<wbr>/ericlippert<wbr>/why<wbr>-do<wbr>-initializers<wbr>-run<wbr>-in<wbr>-the<wbr>-opposite<wbr>-order<wbr>-as<wbr>-constructors<wbr>-part<wbr>-one*](https://docs.microsoft.com/en-gb/archive/blogs/ericlippert/why-do-initializers-run-in-the-opposite-order-as-constructors-part-one).
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eric Lippert 解释了 *为什么* 只读字段和构造函数的初始化器按它们的顺序执行，详情请见 [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-gb<wbr>/archive<wbr>/blogs<wbr>/ericlippert<wbr>/why<wbr>-do<wbr>-initializers<wbr>-run<wbr>-in<wbr>-the<wbr>-opposite<wbr>-order<wbr>-as<wbr>-constructors<wbr>-part<wbr>-one*](https://docs.microsoft.com/en-gb/archive/blogs/ericlippert/why-do-initializers-run-in-the-opposite-order-as-constructors-part-one)。
- en: 'Lippert has written extensively on the subject of value types in C#, including
    the following:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lippert 已经广泛撰写了关于 C# 中值类型的相关内容，包括以下内容：
- en: “The Truth About Value Types,” [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-gb<wbr>/archive<wbr>/blogs<wbr>/ericlippert<wbr>/the<wbr>-truth<wbr>-about<wbr>-value<wbr>-types*](https://docs.microsoft.com/en-gb/archive/blogs/ericlippert/the-truth-about-value-types)
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “关于值类型的真相，” [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-gb<wbr>/archive<wbr>/blogs<wbr>/ericlippert<wbr>/the<wbr>-truth<wbr>-about<wbr>-value<wbr>-types*](https://docs.microsoft.com/en-gb/archive/blogs/ericlippert/the-truth-about-value-types)
- en: “The Stack Is an Implementation Detail, Part One,” [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-gb<wbr>/archive<wbr>/blogs<wbr>/ericlippert<wbr>/the<wbr>-stack<wbr>-is<wbr>-an<wbr>-implementation<wbr>-detail<wbr>-part<wbr>-one*](https://docs.microsoft.com/en-gb/archive/blogs/ericlippert/the-stack-is-an-implementation-detail-part-one)
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “栈是实现细节，第一部分，” [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-gb<wbr>/archive<wbr>/blogs<wbr>/ericlippert<wbr>/the<wbr>-stack<wbr>-is<wbr>-an<wbr>-implementation<wbr>-detail<wbr>-part<wbr>-one*](https://docs.microsoft.com/en-gb/archive/blogs/ericlippert/the-stack-is-an-implementation-detail-part-one)
- en: “The Stack Is an Implementation Detail, Part Two,” [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-gb<wbr>/archive<wbr>/blogs<wbr>/ericlippert<wbr>/the<wbr>-stack<wbr>-is<wbr>-an<wbr>-implementation<wbr>-detail<wbr>-part<wbr>-two*](https://docs.microsoft.com/en-gb/archive/blogs/ericlippert/the-stack-is-an-implementation-detail-part-two)
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “栈是实现细节，第二部分，” [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-gb<wbr>/archive<wbr>/blogs<wbr>/ericlippert<wbr>/the<wbr>-stack<wbr>-is<wbr>-an<wbr>-implementation<wbr>-detail<wbr>-part<wbr>-two*](https://docs.microsoft.com/en-gb/archive/blogs/ericlippert/the-stack-is-an-implementation-detail-part-two)
- en: Nullable reference types are documented by Microsoft at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/nullable<wbr>-references*](https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references).
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可空引用类型的文档由 Microsoft 发布，详情请见 [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/nullable<wbr>-references*](https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references)。
- en: Additionally, Jon Skeet blogs about his early experiences with nullable reference
    types at [*https://<wbr>codeblog<wbr>.jonskeet<wbr>.uk<wbr>/2018<wbr>/04<wbr>/21<wbr>/first<wbr>-steps<wbr>-with<wbr>-nullable<wbr>-reference<wbr>-types<wbr>/*](https://codeblog.jonskeet.uk/2018/04/21/first-steps-with-nullable-reference-types/).
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，Jon Skeet 在他的博客中分享了他关于可空引用类型的早期经验，访问 [*https://<wbr>codeblog<wbr>.jonskeet<wbr>.uk<wbr>/2018<wbr>/04<wbr>/21<wbr>/first<wbr>-steps<wbr>-with<wbr>-nullable<wbr>-reference<wbr>-types<wbr>/*](https://codeblog.jonskeet.uk/2018/04/21/first-steps-with-nullable-reference-types/)。
- en: Tony Hoare made his famous apology for the <samp class="SANS_TheSansMonoCd_W5Regular_11">null</samp>
    reference at the QCon conference in 2009\. The abstract is available at [*https://<wbr>qconlondon<wbr>.com<wbr>/london<wbr>-2009<wbr>/qconlondon<wbr>.com<wbr>/london<wbr>-2009<wbr>/presentation<wbr>/Null%2bReferences<wbr>_%2bThe%2bBillion%2bDollar%2bMistake<wbr>.xhtml*](https://qconlondon.com/london-2009/qconlondon.com/london-2009/presentation/Null%2bReferences_%2bThe%2bBillion%2bDollar%2bMistake.xhtml).
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tony Hoare 在2009年的 QCon 大会上为 <samp class="SANS_TheSansMonoCd_W5Regular_11">null</samp>
    引用问题做出了著名的道歉。摘要可在 [*https://<wbr>qconlondon<wbr>.com<wbr>/london<wbr>-2009<wbr>/qconlondon<wbr>.com<wbr>/london<wbr>-2009<wbr>/presentation<wbr>/Null%2bReferences<wbr>_%2bThe%2bBillion%2bDollar%2bMistake<wbr>.xhtml*](https://qconlondon.com/london-2009/qconlondon.com/london-2009/presentation/Null%2bReferences_%2bThe%2bBillion%2bDollar%2bMistake.xhtml)
    查阅。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Chapter 3</samp>
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">第3章</samp>
- en: The C# Language Specification describes the variable categories at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/language<wbr>-specification<wbr>/variables*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/variables).
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C#语言规范中描述了变量类别，网址为：[*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/language<wbr>-specification<wbr>/variables*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/variables)。
- en: The rules regarding definite assignment are also described in the C# Language
    Reference at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/language<wbr>-specification<wbr>/variables#94<wbr>-definite<wbr>-assignment*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/variables#94-definite-assignment).
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于确定性赋值的规则，也可以在C#语言参考中找到，地址为：[*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/language<wbr>-specification<wbr>/variables#94<wbr>-definite<wbr>-assignment*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/variables#94-definite-assignment)。
- en: Jon Skeet looks at parameter passing by reference and by value in his blog at
    [*https://<wbr>jonskeet<wbr>.uk<wbr>/csharp<wbr>/parameters<wbr>.xhtml*](https://jonskeet.uk/csharp/parameters.xhtml).
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jon Skeet在他的博客中探讨了按引用和按值传递参数的方式：[*https://<wbr>jonskeet<wbr>.uk<wbr>/csharp<wbr>/parameters<wbr>.xhtml*](https://jonskeet.uk/csharp/parameters.xhtml)。
- en: The third edition of *C# in Depth* by Jon Skeet (Manning, 2014) has a detailed
    analysis of closures in Chapters 5 and 16.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jon Skeet的《*C#深度剖析*》（Manning，2014年）第5章和第16章详细分析了闭包。
- en: 'Closures are not new to C#, but their behavior has changed in some ways; capturing
    a loop variable is one example. Eric Lippert’s blog has a good article on the
    rationale behind the *old* (pre–C# v5) behavior of capturing loop variables in
    function objects: [*https://<wbr>ericlippert<wbr>.com<wbr>/2009<wbr>/11<wbr>/12<wbr>/closing<wbr>-over<wbr>-the<wbr>-loop<wbr>-variable<wbr>-considered<wbr>-harmful<wbr>-part<wbr>-one<wbr>/*](https://ericlippert.com/2009/11/12/closing-over-the-loop-variable-considered-harmful-part-one/).'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 闭包在C#中并不新鲜，但它们的行为在某些方面发生了变化；捕获循环变量就是一个例子。Eric Lippert的博客中有一篇很好的文章，解释了捕获循环变量（在函数对象中）的*旧*行为（C#
    v5之前的行为）的背后原因：[*https://<wbr>ericlippert<wbr>.com<wbr>/2009<wbr>/11<wbr>/12<wbr>/closing<wbr>-over<wbr>-the<wbr>-loop<wbr>-variable<wbr>-considered-harmful<wbr>-part<wbr>-one<wbr>/*](https://ericlippert.com/2009/11/12/closing-over-the-loop-variable-considered-harmful-part-one/)。
- en: An overview of several C# features for efficient code, including read-only structs
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">in</samp> parameters, is at
    [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/write<wbr>-safe<wbr>-efficient<wbr>-code*](https://docs.microsoft.com/en-us/dotnet/csharp/write-safe-efficient-code).
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于高效代码的几种C#特性，包括只读结构体和<samp class="SANS_TheSansMonoCd_W5Regular_11">in</samp>参数的概述，可以参考：[*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/write<wbr>-safe<wbr>-efficient<wbr>-code*](https://docs.microsoft.com/en-us/dotnet/csharp/write-safe-efficient-code)。
- en: The C# Programming Guide describes ref returns and ref locals at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/programming<wbr>-guide<wbr>/classes<wbr>-and<wbr>-structs<wbr>/ref<wbr>-returns*](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/ref-returns).
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C#编程指南在[*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/programming<wbr>-guide<wbr>/classes<wbr>-and<wbr>-structs<wbr>/ref<wbr>-returns*](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/ref-returns)中描述了ref返回值和ref局部变量。
- en: Although ref returns and ref locals weren’t introduced until C# v7.0, the idea
    has been around much longer, as Eric Lippert explains at [*https://<wbr>ericlippert<wbr>.com<wbr>/2011<wbr>/06<wbr>/23<wbr>/ref<wbr>-returns<wbr>-and<wbr>-ref<wbr>-locals<wbr>/*](https://ericlippert.com/2011/06/23/ref-returns-and-ref-locals/).
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管ref返回值和ref局部变量直到C# v7.0才被引入，但这种思想早已有之，正如Eric Lippert在[*https://<wbr>ericlippert<wbr>.com<wbr>/2011<wbr>/06<wbr>/23<wbr>/ref<wbr>-returns<wbr>-and<wbr>-ref<wbr>-locals<wbr>/*](https://ericlippert.com/2011/06/23/ref-returns-and-ref-locals/)中所解释的那样。
- en: Vladimir Sadov examines the rules around whether a ref local is safe to return
    at [*http://<wbr>mustoverride<wbr>.com<wbr>/safe<wbr>-to<wbr>-return<wbr>/*](http://mustoverride.com/safe-to-return/).
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vladimir Sadov在[*http://<wbr>mustoverride<wbr>.com<wbr>/safe<wbr>-to<wbr>-return<wbr>/*](http://mustoverride.com/safe-to-return/)中研究了ref局部变量是否可以安全返回的规则。
- en: The operation of the garbage collector is a complex topic, but a good starting
    point is the Microsoft documentation at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/standard<wbr>/garbage<wbr>-collection<wbr>/fundamentals*](https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals).
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垃圾回收器的运作是一个复杂的话题，但一个很好的起点是微软文档中的[*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/standard<wbr>/garbage<wbr>-collection<wbr>/fundamentals*](https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals)。
- en: Andrew Hunter also describes garbage collection in his blog at [*https://<wbr>www<wbr>.red<wbr>-gate<wbr>.com<wbr>/simple<wbr>-talk<wbr>/development<wbr>/dotnet<wbr>-development<wbr>/understanding<wbr>-garbage<wbr>-collection<wbr>-in<wbr>-net<wbr>/*](https://www.red-gate.com/simple-talk/development/dotnet-development/understanding-garbage-collection-in-net/).
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Andrew Hunter 也在他的博客中描述了垃圾回收：[ *https://<wbr>www<wbr>.red<wbr>-gate<wbr>.com<wbr>/simple<wbr>-talk<wbr>/development<wbr>/dotnet<wbr>-development<wbr>/understanding<wbr>-garbage<wbr>-collection<wbr>-in<wbr>-net<wbr>/*](https://www.red-gate.com/simple-talk/development/dotnet-development/understanding-garbage-collection-in-net/)。
- en: The Microsoft documentation on value tuple support from C# v7.0 onward is at
    [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/builtin<wbr>-types<wbr>/value<wbr>-tuples*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-tuples).
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软关于 C# 7.0 及以后的值元组支持的文档在 [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/builtin<wbr>-types<wbr>/value<wbr>-tuples*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-tuples)。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Chapter 4</samp>
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">第4章</samp>
- en: Eric Lippert has written extensively about value types and touches on modifying
    returned values at [*https://<wbr>ericlippert<wbr>.com<wbr>/2008<wbr>/05<wbr>/14<wbr>/mutating<wbr>-readonly<wbr>-structs<wbr>/*](https://ericlippert.com/2008/05/14/mutating-readonly-structs/).
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eric Lippert 曾广泛撰写关于值类型的内容，并在 [*https://<wbr>ericlippert<wbr>.com<wbr>/2008<wbr>/05<wbr>/14<wbr>/mutating<wbr>-readonly<wbr>-structs<wbr>/*](https://ericlippert.com/2008/05/14/mutating-readonly-structs/)
    中讨论了修改返回值的情况。
- en: 'Lippert examines the construction of value types and the use of an intermediate
    temporary instance in this post: [*https://<wbr>ericlippert<wbr>.com<wbr>/2010<wbr>/10<wbr>/11<wbr>/debunking<wbr>-another<wbr>-myth<wbr>-about<wbr>-value<wbr>-types<wbr>/*](https://ericlippert.com/2010/10/11/debunking-another-myth-about-value-types/).'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lippert 在这篇文章中探讨了值类型的构建和使用临时中间实例的情况：[ *https://<wbr>ericlippert<wbr>.com<wbr>/2010<wbr>/10<wbr>/11<wbr>/debunking<wbr>-another<wbr>-myth<wbr>-about<wbr>-value<wbr>-types<wbr>/*](https://ericlippert.com/2010/10/11/debunking-another-myth-about-value-types/)。
- en: The C# Language Specification on object creation can be read online at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/language<wbr>-specification<wbr>/expressions#117152<wbr>-object<wbr>-creation<wbr>-expressions*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/expressions#117152-object-creation-expressions).
    Object initializers are covered at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/language<wbr>-specification<wbr>/expressions#117153<wbr>-object<wbr>-initializers*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/expressions#117153-object-initializers).
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C# 语言规范中关于对象创建的内容可以在 [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/language<wbr>-specification<wbr>/expressions#117152<wbr>-object<wbr>-creation<wbr>-expressions*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/expressions#117152-object-creation-expressions)
    上在线阅读。对象初始化器的内容可以在 [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/language<wbr>-specification<wbr>/expressions#117153<wbr>-object<wbr>-initializers*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/expressions#117153-object-initializers)
    上找到。
- en: The Microsoft documentation on casts, including a link to user-defined conversion
    methods, is at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/programming<wbr>-guide<wbr>/types<wbr>/casting<wbr>-and<wbr>-type<wbr>-conversions#implicit<wbr>-conversions*](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions#implicit-conversions).
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软关于类型转换的文档，包括用户定义的转换方法的链接，可以在 [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/programming<wbr>-guide<wbr>/types<wbr>/casting<wbr>-and<wbr>-type<wbr>-conversions#implicit<wbr>-conversions*](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions#implicit-conversions)
    中查看。
- en: Jon Skeet investigates read-only fields in his blog at [*https://<wbr>codeblog<wbr>.jonskeet<wbr>.uk<wbr>/2014<wbr>/07<wbr>/16<wbr>/micro<wbr>-optimization<wbr>-the<wbr>-surprising<wbr>-inefficiency<wbr>-of<wbr>-readonly<wbr>-fields<wbr>/*](https://codeblog.jonskeet.uk/2014/07/16/micro-optimization-the-surprising-inefficiency-of-readonly-fields/).
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jon Skeet 在他的博客中研究了只读字段，地址是 [*https://<wbr>codeblog<wbr>.jonskeet<wbr>.uk<wbr>/2014<wbr>/07<wbr>/16<wbr>/micro<wbr>-optimization<wbr>-the<wbr>-surprising<wbr>-inefficiency<wbr>-of<wbr>-readonly<wbr>-fields<wbr>/*](https://codeblog.jonskeet.uk/2014/07/16/micro-optimization-the-surprising-inefficiency-of-readonly-fields/)。
- en: The Microsoft documentation for <samp class="SANS_TheSansMonoCd_W5Regular_11">in</samp>
    parameters ([*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/keywords<wbr>/in<wbr>-parameter<wbr>-modifier*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/in-parameter-modifier))
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">ref readonly</samp> return values
    and locals ([*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/keywords<wbr>/ref#reference<wbr>-return<wbr>-values*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref#reference-return-values))
    has good information on the caveats and rules for correctly using them.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软关于 <samp class="SANS_TheSansMonoCd_W5Regular_11">in</samp> 参数的文档（[*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/keywords<wbr>/in<wbr>-parameter<wbr>-modifier*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/in-parameter-modifier)）以及
    <samp class="SANS_TheSansMonoCd_W5Regular_11">ref readonly</samp> 返回值和局部变量的文档（[*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/keywords<wbr>/ref#reference<wbr>-return<wbr>-values*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref#reference-return-values)）提供了关于正确使用它们的注意事项和规则。
- en: Sergey Tepliakov’s blog has some enlightening articles on <samp class="SANS_TheSansMonoCd_W5Regular_11">in</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">ref readonly</samp> performance
    too, at [*https://<wbr>devblogs<wbr>.microsoft<wbr>.com<wbr>/premier<wbr>-developer<wbr>/the<wbr>-in<wbr>-modifier<wbr>-and<wbr>-the<wbr>-readonly<wbr>-structs<wbr>-in<wbr>-c<wbr>/*](https://devblogs.microsoft.com/premier-developer/the-in-modifier-and-the-readonly-structs-in-c/)
    and [*https://<wbr>devblogs<wbr>.microsoft<wbr>.com<wbr>/premier<wbr>-developer<wbr>/performance<wbr>-traps<wbr>-of<wbr>-ref<wbr>-locals<wbr>-and<wbr>-ref<wbr>-returns<wbr>-in<wbr>-c<wbr>/*](https://devblogs.microsoft.com/premier-developer/performance-traps-of-ref-locals-and-ref-returns-in-c/).
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sergey Tepliakov 的博客上也有一些关于 <samp class="SANS_TheSansMonoCd_W5Regular_11">in</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">ref readonly</samp> 性能的启发性文章，链接如下：[*https://<wbr>devblogs<wbr>.microsoft<wbr>.com<wbr>/premier<wbr>-developer<wbr>/the<wbr>-in<wbr>-modifier<wbr>-and<wbr>-the<wbr>-readonly<wbr>-structs<wbr>-in<wbr>-c<wbr>/*](https://devblogs.microsoft.com/premier-developer/the-in-modifier-and-the-readonly-structs-in-c/)
    和 [*https://<wbr>devblogs<wbr>.microsoft<wbr>.com<wbr>/premier<wbr>-developer<wbr>/performance<wbr>-traps<wbr>-of<wbr>-ref<wbr>-locals<wbr>-and<wbr>-ref<wbr>-returns<wbr>-in<wbr>-c<wbr>/*](https://devblogs.microsoft.com/premier-developer/performance-traps-of-ref-locals-and-ref-returns-in-c/)。
- en: The quote from Donald Knuth is from his ACM Turing Award lecture in 1974\. He
    went on to say—much more famously—that “premature optimization is the root of
    all evil.” The full text is available at [*https://<wbr>dl<wbr>.acm<wbr>.org<wbr>/doi<wbr>/10<wbr>.1145<wbr>/1283920<wbr>.1283929*](https://dl.acm.org/doi/10.1145/1283920.1283929).
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Donald Knuth 的名言出自他1974年的ACM图灵奖演讲。他更为著名的补充是：“过早的优化是万恶之源。”完整的文本可以在[*https://<wbr>dl<wbr>.acm<wbr>.org<wbr>/doi<wbr>/10<wbr>.1145<wbr>/1283920<wbr>.1283929*](https://dl.acm.org/doi/10.1145/1283920.1283929)找到。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Chapter 5</samp>
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">第5章</samp>
- en: 'Eric Lippert’s blog post on the subject of <samp class="SANS_TheSansMonoCd_W5Regular_11">null</samp>
    is enlightening: [*https://<wbr>ericlippert<wbr>.com<wbr>/2013<wbr>/07<wbr>/25<wbr>/what<wbr>-is<wbr>-the<wbr>-type<wbr>-of<wbr>-the<wbr>-null<wbr>-literal<wbr>/*](https://ericlippert.com/2013/07/25/what-is-the-type-of-the-null-literal/).'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eric Lippert 关于 <samp class="SANS_TheSansMonoCd_W5Regular_11">null</samp> 主题的博客文章非常有启发性：[*https://<wbr>ericlippert<wbr>.com<wbr>/2013<wbr>/07<wbr>/25<wbr>/what<wbr>-is<wbr>-the<wbr>-type<wbr>-of<wbr>-the<wbr>-null<wbr>-literal<wbr>/*](https://ericlippert.com/2013/07/25/what-is-the-type-of-the-null-literal/)。
- en: String interning is documented by Microsoft at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/api<wbr>/system<wbr>.string<wbr>.intern<wbr>?view<wbr>=net<wbr>-5<wbr>.0*](https://docs.microsoft.com/en-us/dotnet/api/system.string.intern?view=net-5.0).
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串驻留由微软在[*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/api<wbr>/system<wbr>.string<wbr>.intern<wbr>?view<wbr>=net<wbr>-5<wbr>.0*](https://docs.microsoft.com/en-us/dotnet/api/system.string.intern?view=net-5.0)中进行了文档化。
- en: A variety of articles address floating-point representation and the pitfalls
    that can arise. Frances Buontempo gives an overview with examples and further
    references for those who want to dig deeper in her *Overload* article “Floating
    Point Fun and Frolics” at [*https://<wbr>accu<wbr>.org<wbr>/journals<wbr>/overload<wbr>/17<wbr>/91<wbr>/buontempo<wbr>_1558*](https://accu.org/journals/overload/17/91/buontempo_1558).
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有多篇文章讨论了浮点数的表示和可能出现的陷阱。弗朗西斯·博恩坦波（Frances Buontempo）在她的*Overload*文章《浮点数的趣味与滑稽》中提供了概述，并为那些想深入研究的人提供了例子和更多参考，网址为
    [*https://<wbr>accu<wbr>.org<wbr>/journals<wbr>/overload<wbr>/17<wbr>/91<wbr>/buontempo<wbr>_1558*](https://accu.org/journals/overload/17/91/buontempo_1558)。
- en: 'Richard Harris has written extensively about floating-point comparisons and
    arithmetic. This series of *Overload* articles examines the common alternatives
    to IEEE-754 floating-point:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理查德·哈里斯（Richard Harris）对浮点数比较和算术有广泛的写作。这系列的*Overload*文章探讨了IEEE-754浮点数的常见替代方案：
- en: “You’re Going To Have To Think!,” [*https://<wbr>accu<wbr>.org<wbr>/journals<wbr>/overload<wbr>/18<wbr>/99<wbr>/harris<wbr>_1702*](https://accu.org/journals/overload/18/99/harris_1702)
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “你将不得不思考！”， [*https://<wbr>accu<wbr>.org<wbr>/journals<wbr>/overload<wbr>/18<wbr>/99<wbr>/harris<wbr>_1702*](https://accu.org/journals/overload/18/99/harris_1702)
- en: “Why Fixed Point Won’t Cure Your Floating Point Blues,” [*https://<wbr>accu<wbr>.org<wbr>/journals<wbr>/overload<wbr>/18<wbr>/100<wbr>/harris<wbr>_1717*](https://accu.org/journals/overload/18/100/harris_1717)
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “为什么定点数不能治愈你的浮点数烦恼，” [*https://<wbr>accu<wbr>.org<wbr>/journals<wbr>/overload<wbr>/18<wbr>/100<wbr>/harris<wbr>_1717*](https://accu.org/journals/overload/18/100/harris_1717)
- en: “Why Rationals Won’t Cure Your Floating Point Blues,” [*https://<wbr>accu<wbr>.org<wbr>/journals<wbr>/overload<wbr>/19<wbr>/101<wbr>/harris<wbr>_1986*](https://accu.org/journals/overload/19/101/harris_1986)
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “为什么有理数不能治愈你的浮点数烦恼，” [*https://<wbr>accu<wbr>.org<wbr>/journals<wbr>/overload<wbr>/19<wbr>/101<wbr>/harris<wbr>_1986*](https://accu.org/journals/overload/19/101/harris_1986)
- en: “Why Computer Algebra Won’t Cure Your Floating Point Blues,” [*https://<wbr>accu<wbr>.org<wbr>/journals<wbr>/overload<wbr>/19<wbr>/102<wbr>/harris<wbr>_1979*](https://accu.org/journals/overload/19/102/harris_1979)
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “为什么计算机代数不能治愈你的浮点数烦恼，” [*https://<wbr>accu<wbr>.org<wbr>/journals<wbr>/overload<wbr>/19<wbr>/102<wbr>/harris<wbr>_1979*](https://accu.org/journals/overload/19/102/harris_1979)
- en: “Why Interval Arithmetic Won’t Cure Your Floating Point Blues,” [*https://<wbr>accu<wbr>.org<wbr>/journals<wbr>/overload<wbr>/19<wbr>/103<wbr>/harris<wbr>_1974*](https://accu.org/journals/overload/19/103/harris_1974)
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “为什么区间算术不能治愈你的浮点数烦恼，” [*https://<wbr>accu<wbr>.org<wbr>/journals<wbr>/overload<wbr>/19<wbr>/103<wbr>/harris<wbr>_1974*](https://accu.org/journals/overload/19/103/harris_1974)
- en: A comparison of C#’s floating-point types can be found in the Microsoft documentation
    at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/language<wbr>-specification<wbr>/types#floating<wbr>-point<wbr>-types*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/types#floating-point-types).
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软文档中有关于C#浮点类型的比较，网址为 [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/language<wbr>-specification<wbr>/types#floating<wbr>-point<wbr>-types*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/types#floating-point-types)。
- en: The Microsoft documentation gives an overview of the constant pattern at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/operators<wbr>/patterns#constant<wbr>-pattern*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/patterns#constant-pattern).
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软文档中提供了常量模式的概述，网址为 [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/operators<wbr>/patterns#constant<wbr>-pattern*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/patterns#constant-pattern)。
- en: The declaration pattern is described in the Microsoft documentation at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/operators<wbr>/patterns#declaration<wbr>-and<wbr>-type<wbr>-patterns*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/patterns#declaration-and-type-patterns).
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明模式在微软文档中有描述，网址为 [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/operators<wbr>/patterns#declaration<wbr>-and<wbr>-type<wbr>-patterns*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/patterns#declaration-and-type-patterns)。
- en: Nullable value type operator overloads are described in the C# Language Specification,
    which has a short remark about <samp class="SANS_TheSansMonoCd_W5Regular_11">operator==</samp>,
    at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/builtin<wbr>-types<wbr>/nullable<wbr>-value<wbr>-types#lifted<wbr>-operators*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-value-types#lifted-operators).
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可空值类型操作符重载在 C# 语言规范中有所描述，其中简短提到 <samp class="SANS_TheSansMonoCd_W5Regular_11">operator==</samp>，可参考
    [*https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-value-types#lifted-operators*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-value-types#lifted-operators)。
- en: The C# Language Specification also has a section on nullable reference types
    at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/builtin<wbr>-types<wbr>/nullable<wbr>-reference<wbr>-types*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-reference-types).
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C# 语言规范中还有一部分内容讨论了可空引用类型，详见 [*https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-reference-types*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-reference-types)。
- en: 'Lippert has a great series of blogs about nullable value types starting here:
    [*https://<wbr>ericlippert<wbr>.com<wbr>/2012<wbr>/12<wbr>/20<wbr>/nullable<wbr>-micro<wbr>-optimizations<wbr>-part<wbr>-one<wbr>/*](https://ericlippert.com/2012/12/20/nullable-micro-optimizations-part-one/).'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lippert 有一系列关于可空值类型的精彩博客，从这里开始：[*https://ericlippert.com/2012/12/20/nullable-micro-optimizations-part-one/*](https://ericlippert.com/2012/12/20/nullable-micro-optimizations-part-one/)。
- en: Lippert examines the concept of lifted operators at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/archive<wbr>/blogs<wbr>/ericlippert<wbr>/what<wbr>-exactly<wbr>-does<wbr>-lifted<wbr>-mean*](https://docs.microsoft.com/en-us/archive/blogs/ericlippert/what-exactly-does-lifted-mean).
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lippert 在 [*https://docs.microsoft.com/en-us/archive/blogs/ericlippert/what-exactly-does-lifted-mean*](https://docs.microsoft.com/en-us/archive/blogs/ericlippert/what-exactly-does-lifted-mean)
    中探讨了提升操作符的概念。
- en: '*MSDN Magazine* looks at why value tuples aren’t immutable at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/archive<wbr>/msdn<wbr>-magazine<wbr>/2018<wbr>/june<wbr>/csharp<wbr>-tuple<wbr>-trouble<wbr>-why<wbr>-csharp<wbr>-tuples<wbr>-get<wbr>-to<wbr>-break<wbr>-the<wbr>-guidelines*](https://docs.microsoft.com/en-us/archive/msdn-magazine/2018/june/csharp-tuple-trouble-why-csharp-tuples-get-to-break-the-guidelines).'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*MSDN Magazine* 探讨了为何值元组不是不可变的，详见 [*https://docs.microsoft.com/en-us/archive/msdn-magazine/2018/june/csharp-tuple-trouble-why-csharp-tuples-get-to-break-the-guidelines*](https://docs.microsoft.com/en-us/archive/msdn-magazine/2018/june/csharp-tuple-trouble-why-csharp-tuples-get-to-break-the-guidelines)。'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Chapter 6</samp>
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">第6章</samp>
- en: For an in-depth look at value types in modeling complex systems, see Dirk Bäumer
    et al., “Values in Object Systems,” *Ubilab Technical Report*, [*https://<wbr>riehle<wbr>.org<wbr>/computer<wbr>-science<wbr>/research<wbr>/1998<wbr>/ubilab<wbr>-tr<wbr>-1998<wbr>-10<wbr>-1<wbr>.pdf*](https://riehle.org/computer-science/research/1998/ubilab-tr-1998-10-1.pdf).
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 若要深入了解建模复杂系统中的值类型，请参见 Dirk Bäumer 等人著作的《面向对象系统中的值》[*Ubilab技术报告*](https://riehle.org/computer-science/research/1998/ubilab-tr-1998-10-1.pdf)。
- en: Kevlin Henney covers the taxonomy of object types and offers other valuable
    insights regarding object comparisons in C++ and C# at [*https://<wbr>www<wbr>.slideshare<wbr>.net<wbr>/Kevlin<wbr>/objects<wbr>-of<wbr>-value*](https://www.slideshare.net/Kevlin/objects-of-value).
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kevlin Henney 讲解了对象类型的分类法，并提供了关于 C++ 和 C# 中对象比较的其他有价值的见解，见 [*https://www.slideshare.net/Kevlin/objects-of-value*](https://www.slideshare.net/Kevlin/objects-of-value)。
- en: Martin Fowler describes the anemic domain model at [*https://<wbr>www<wbr>.martinfowler<wbr>.com<wbr>/bliki<wbr>/AnemicDomainModel<wbr>.xhtml*](https://www.martinfowler.com/bliki/AnemicDomainModel.xhtml).
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Martin Fowler 在 [*https://www.martinfowler.com/bliki/AnemicDomainModel.xhtml*](https://www.martinfowler.com/bliki/AnemicDomainModel.xhtml)
    中描述了贫血领域模型。
- en: Fowler describes aliasing an object causing bugs at [*https://<wbr>www<wbr>.martinfowler<wbr>.com<wbr>/bliki<wbr>/AliasingBug<wbr>.xhtml*](https://www.martinfowler.com/bliki/AliasingBug.xhtml).
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fowler 在 [*https://www.martinfowler.com/bliki/AliasingBug.xhtml*](https://www.martinfowler.com/bliki/AliasingBug.xhtml)
    中描述了对象别名引发的错误。
- en: 'Aliasing is not a new idea, either, as you can see in Eric S. Raymond’s The
    Jargon File: [*http://<wbr>www<wbr>.catb<wbr>.org<wbr>/jargon<wbr>/html<wbr>/A<wbr>/aliasing<wbr>-bug<wbr>.xhtml*](http://www.catb.org/jargon/html/A/aliasing-bug.xhtml).'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 别名（Aliasing）也不是一个新思想，正如你可以在Eric S. Raymond的《行话文件》中看到的：[*http://www.catb.org/jargon/html/A/aliasing-bug.xhtml*](http://www.catb.org/jargon/html/A/aliasing-bug.xhtml)。
- en: 'Scott Stanchfield’s article on the perils of using a language that has no concept
    of pass-by value is quite old and focused on the Java of the era, but still enlightening:
    [*http://<wbr>www<wbr>.javadude<wbr>.com<wbr>/articles<wbr>/passbyvalue<wbr>.htm*](http://www.javadude.com/articles/passbyvalue.htm).'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scott Stanchfield关于使用没有值传递概念的语言的风险的文章虽然已经很老，且主要关注那个时代的Java，但仍然充满启发性：[*http://www.javadude.com/articles/passbyvalue.htm*](http://www.javadude.com/articles/passbyvalue.htm)。
- en: The contract for <samp class="SANS_TheSansMonoCd_W5Regular_11">IComparable</samp>
    implementations is described in the Microsoft documentation at [*https://docs.microsoft.com/en-us/dotnet/api/system.icomparable-1.compareto?view=net-5.0#notes-to-implementers*](https://docs.microsoft.com/en-us/dotnet/api/system.icomparable-1.compareto?view=net-5.0#notes-to-implementers).
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">IComparable</samp>实现的契约在Microsoft文档中描述，参见：[*https://docs.microsoft.com/en-us/dotnet/api/system.icomparable-1.compareto?view=net-5.0#notes-to-implementers*](https://docs.microsoft.com/en-us/dotnet/api/system.icomparable-1.compareto?view=net-5.0#notes-to-implementers)。
- en: 'Henney looks at some patterns for value types, including symmetry, in this
    conference paper: [*https://<wbr>www<wbr>.researchgate<wbr>.net<wbr>/publication<wbr>/244405850<wbr>_The<wbr>_Good<wbr>_the<wbr>_Bad<wbr>_and<wbr>_the<wbr>_Koyaanisqatsi<wbr>_Consideration<wbr>_of<wbr>_Some<wbr>_Patterns<wbr>_for<wbr>_Value<wbr>_Objects*](https://www.researchgate.net/publication/244405850_The_Good_the_Bad_and_the_Koyaanisqatsi_Consideration_of_Some_Patterns_for_Value_Objects).'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Henney在这篇会议论文中讨论了一些值类型的模式，包括对称性：[*https://www.researchgate.net/publication/244405850_The_Good_the_Bad_and_the_Koyaanisqatsi_Consideration_of_Some_Patterns_for_Value_Objects*](https://www.researchgate.net/publication/244405850_The_Good_the_Bad_and_the_Koyaanisqatsi_Consideration_of_Some_Patterns_for_Value_Objects)。
- en: Scott Meyers wrote seminal books that will be recognized instantly by C++ programmers
    everywhere, but he has much to say that’s relevant to programmers in any language.
    In particular, *Effective C*++, 3rd edition (Addison-Wesley, 2005), and *More
    Effective C*++ (Addison-Wesley, 1996) look at making interfaces easy to use correctly
    and hard to use incorrectly, as well as the benefits of moving functions outside
    of the class.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scott Meyers写了许多经典著作，C++程序员会立刻认出它们，但他有许多对任何语言的程序员都很有意义的见解。特别是《Effective C++》第三版（Addison-Wesley,
    2005年）和《More Effective C++》（Addison-Wesley, 1996年）探讨了如何使接口既容易正确使用，又难以错误使用，以及将函数移出类的好处。
- en: Intransitive or non-transitive dice are a fun way to explore and challenge the
    idea of less-than and intrinsic ordering; see the Rosetta Code site at [*https://<wbr>rosettacode<wbr>.org<wbr>/wiki<wbr>/Non<wbr>-transitive<wbr>_dice*](https://rosettacode.org/wiki/Non-transitive_dice).
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不可传递或非传递骰子是探索和挑战“小于”和内在排序思想的一种有趣方式；请参阅Rosetta Code网站：[*https://rosettacode.org/wiki/Non-transitive_dice*](https://rosettacode.org/wiki/Non-transitive_dice)。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Chapter 7</samp>
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">第七章</samp>
- en: For the Microsoft Developer Network (MSDN) advice on overriding the <samp class="SANS_TheSansMonoCd_W5Regular_11">Equals</samp>
    method for values, see [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/programming<wbr>-guide<wbr>/statements<wbr>-expressions<wbr>-operators<wbr>/how<wbr>-to<wbr>-define<wbr>-value<wbr>-equality<wbr>-for<wbr>-a<wbr>-type*](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/how-to-define-value-equality-for-a-type).
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Microsoft开发者网络（MSDN）关于重写值的<samp class="SANS_TheSansMonoCd_W5Regular_11">Equals</samp>方法的建议，参见：[*https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/how-to-define-value-equality-for-a-type*](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/how-to-define-value-equality-for-a-type)。
- en: 'This 2005 *MSDN Magazine* article on the internals of how the CLR manages object
    instances, although clearly out-of-date now, is still enlightening: [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/archive<wbr>/msdn<wbr>-magazine<wbr>/2005<wbr>/may<wbr>/net<wbr>-framework<wbr>-internals<wbr>-how<wbr>-the<wbr>-clr<wbr>-creates<wbr>-runtime<wbr>-objects*](https://docs.microsoft.com/en-us/archive/msdn-magazine/2005/may/net-framework-internals-how-the-clr-creates-runtime-objects).
    For a more recent analysis by Adam Sitnik, see [*https://<wbr>adamsitnik<wbr>.com<wbr>/Value<wbr>-Types<wbr>-vs<wbr>-Reference<wbr>-Types<wbr>/*](https://adamsitnik.com/Value-Types-vs-Reference-Types/).'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这篇2005年关于CLR如何管理对象实例的文章，虽然现在显得有些过时，但仍然具有启发性，链接：[*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/archive<wbr>/msdn<wbr>-magazine<wbr>/2005<wbr>/may<wbr>/net<wbr>-framework<wbr>-internals<wbr>-how<wbr>-the<wbr>-clr<wbr>-creates<wbr>-runtime<wbr>-objects*](https://docs.microsoft.com/en-us/archive/msdn-magazine/2005/may/net-framework-internals-how-the-clr-creates-runtime-objects)。关于Adam
    Sitnik的更近期分析，请参见：[*https://<wbr>adamsitnik<wbr>.com<wbr>/Value<wbr>-Types<wbr>-vs<wbr>-Reference<wbr>-Types<wbr>/*](https://adamsitnik.com/Value-Types-vs-Reference-Types/)。
- en: For a detailed analysis of the kinds of polymorphism, see “On Understanding
    Types, Data Abstraction, and Polymorphism” by Luca Cardelli and Peter Wegner in
    *Computing Surveys*, [*http://<wbr>lucacardelli<wbr>.name<wbr>/Papers<wbr>/OnUnderstanding<wbr>.A4<wbr>.pdf*](http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf).
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关多态性种类的详细分析，请参阅Luca Cardelli和Peter Wegner在《*Computing Surveys*》中发表的《理解类型、数据抽象和多态性》（On
    Understanding Types, Data Abstraction, and Polymorphism）一文，链接：[*http://<wbr>lucacardelli<wbr>.name<wbr>/Papers<wbr>/OnUnderstanding<wbr>.A4<wbr>.pdf*](http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf)。
- en: For a formal definition of subtyping, see “A Behavioral Notion of Subtyping”
    by Barbara H. Liskov and Jeannette M. Wing, *ACM Transactions on Programming Languages
    and Systems*, [*https://<wbr>dl<wbr>.acm<wbr>.org<wbr>/doi<wbr>/10<wbr>.1145<wbr>/197320<wbr>.197383*](https://dl.acm.org/doi/10.1145/197320.197383).
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于子类型的正式定义，请参阅Barbara H. Liskov和Jeannette M. Wing在《*ACM Transactions on Programming
    Languages and Systems*》上发表的《子类型的行为概念》（A Behavioral Notion of Subtyping），链接：[*https://<wbr>dl<wbr>.acm<wbr>.org<wbr>/doi<wbr>/10<wbr>.1145<wbr>/197320<wbr>.197383*](https://dl.acm.org/doi/10.1145/197320.197383)。
- en: 'Eric Lippert discusses the Liskov substitutability principle more generally
    in a series of articles starting here: [*https://<wbr>ericlippert<wbr>.com<wbr>/2015<wbr>/04<wbr>/27<wbr>/wizards<wbr>-and<wbr>-warriors<wbr>-part<wbr>-one<wbr>/*](https://ericlippert.com/2015/04/27/wizards-and-warriors-part-one/).'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eric Lippert在一系列文章中更为全面地讨论了Liskov替代原则，系列文章从这里开始：[*https://<wbr>ericlippert<wbr>.com<wbr>/2015<wbr>/04<wbr>/27<wbr>/wizards<wbr>-and<wbr>-warriors<wbr>-part<wbr>-one<wbr>/*](https://ericlippert.com/2015/04/27/wizards-and-warriors-part-one/)。
- en: Lippert argues that all equality can be derived simply from a conforming implementation
    of <samp class="SANS_TheSansMonoCd_W5Regular_11">CompareTo</samp> at [*https://<wbr>www<wbr>.informit<wbr>.com<wbr>/articles<wbr>/article<wbr>.aspx<wbr>?p<wbr>=2425867*](https://www.informit.com/articles/article.aspx?p=2425867).
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lippert认为，所有的相等性都可以简单地通过符合要求的<code>CompareTo</code>实现来推导，链接：[*https://<wbr>www<wbr>.informit<wbr>.com<wbr>/articles<wbr>/article<wbr>.aspx<wbr>?p<wbr>=2425867*](https://www.informit.com/articles/article.aspx?p=2425867)。
- en: 'This article by Kevlin Henney on strings and value types is based on the C++
    string, but many of the observations are relevant to C#: [*https://<wbr>www<wbr>.slideshare<wbr>.net<wbr>/Kevlin<wbr>/highly<wbr>-strung*](https://www.slideshare.net/Kevlin/highly-strung).'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kevlin Henney关于字符串和值类型的这篇文章基于C++的字符串，但许多观察对C#同样适用，链接：[*https://<wbr>www<wbr>.slideshare<wbr>.net<wbr>/Kevlin<wbr>/highly<wbr>-strung*](https://www.slideshare.net/Kevlin/highly-strung)。
- en: The term *seam* is usually attributed to Michael Feathers from his book *Working
    Effectively with Legacy Code* (Pearson, 2004). The relevant chapter is available
    online at [*https://<wbr>www<wbr>.informit<wbr>.com<wbr>/articles<wbr>/article<wbr>.aspx<wbr>?p<wbr>=359417&seqNum<wbr>=2*](https://www.informit.com/articles/article.aspx?p=359417&seqNum=2).
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*seam*（缝隙）这个术语通常归功于Michael Feathers，他在其著作《*与遗留代码有效合作*》（Working Effectively
    with Legacy Code，Pearson，2004）中进行了阐述。相关章节可以在线访问，链接：[*https://<wbr>www<wbr>.informit<wbr>.com<wbr>/articles<wbr>/article<wbr>.aspx<wbr>?p<wbr>=359417&seqNum<wbr>=2*](https://www.informit.com/articles/article.aspx?p=359417&seqNum=2)。'
- en: Mock objects have been a feature of object-oriented unit testing for a long
    time, and Wikipedia has a good overview at [*https://<wbr>en<wbr>.wikipedia<wbr>.org<wbr>/wiki<wbr>/Mock<wbr>_object*](https://en.wikipedia.org/wiki/Mock_object).
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟对象（Mock objects）作为面向对象单元测试的一个重要特性，已经存在很长时间，Wikipedia上有一个很好的概述，链接：[*https://<wbr>en<wbr>.wikipedia<wbr>.org<wbr>/wiki<wbr>/Mock<wbr>_object*](https://en.wikipedia.org/wiki/Mock_object)。
- en: Gerard Meszaros describes the more general concept of a test double in his book
    *xUnit Test Patterns* (Addison-Wesley, 2007) and online at [*http://<wbr>xunitpatterns<wbr>.com<wbr>/Test%20Double<wbr>.xhtml*](http://xunitpatterns.com/Test%20Double.xhtml).
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gerard Meszaros 在他的书《*xUnit 测试模式*》（Addison-Wesley，2007年）中，以及在网上的 [*http://<wbr>xunitpatterns<wbr>.com<wbr>/Test%20Double<wbr>.xhtml*](http://xunitpatterns.com/Test%20Double.xhtml)
    中描述了测试双重体（test double）的更一般概念。
- en: Henney makes a case against the term *reuse* at [*https://<wbr>kevlinhenney<wbr>.medium<wbr>.com<wbr>/simplicity<wbr>-before<wbr>-generality<wbr>-use<wbr>-before<wbr>-reuse<wbr>-722a8f967eb9*](https://kevlinhenney.medium.com/simplicity-before-generality-use-before-reuse-722a8f967eb9).
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Henney 在 [*https://<wbr>kevlinhenney<wbr>.medium<wbr>.com<wbr>/simplicity<wbr>-before<wbr>-generality<wbr>-use<wbr>-before<wbr>-reuse<wbr>-722a8f967eb9*](https://kevlinhenney.medium.com/simplicity-before-generality-use-before-reuse-722a8f967eb9)
    中对术语 *reuse* 提出了反对意见。
- en: For a summary of C# v8.0 ranges that includes the related specification for
    a generalized <samp class="SANS_TheSansMonoCd_W5Regular_11">index</samp> operator,
    see the Microsoft documentation at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/proposals<wbr>/csharp<wbr>-8<wbr>.0<wbr>/ranges*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/ranges).
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 C# v8.0 范围的总结，包括与通用的 <samp class="SANS_TheSansMonoCd_W5Regular_11">index</samp>
    运算符相关的规范，请参见微软文档 [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/proposals<wbr>/csharp<wbr>-8<wbr>.0<wbr>/ranges*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/ranges)。
- en: The calculation for relative luminance was lifted approximately from the International
    Telecommunication Union Radiocommunication Sector (ITU-R) recommendation on Wikipedia
    at [*https://<wbr>en<wbr>.wikipedia<wbr>.org<wbr>/wiki<wbr>/Luma<wbr>_(video)*](https://en.wikipedia.org/wiki/Luma_(video),
    but it’s used in this chapter only to demonstrate implicit conversions.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相对亮度的计算大约来自国际电信联盟无线电通信部门（ITU-R）推荐的 Wikipedia 页面 [*https://<wbr>en<wbr>.wikipedia<wbr>.org<wbr>/wiki<wbr>/Luma<wbr>_(video)*](https://en.wikipedia.org/wiki/Luma_(video))，但本章仅用于演示隐式转换。
- en: C# has a few ways to represent conversions between types. Lippert’s description
    of <samp class="SANS_TheSansMonoCd_W5Regular_11">is</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">as</samp>
    is at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/archive<wbr>/blogs<wbr>/ericlippert<wbr>/is<wbr>-is<wbr>-as<wbr>-or<wbr>-is<wbr>-as<wbr>-is*](https://docs.microsoft.com/en-us/archive/blogs/ericlippert/is-is-as-or-is-as-is)
    and [*https://<wbr>ericlippert<wbr>.com<wbr>/2013<wbr>/05<wbr>/30<wbr>/what<wbr>-the<wbr>-meaning<wbr>-of<wbr>-is<wbr>-is<wbr>/*](https://ericlippert.com/2013/05/30/what-the-meaning-of-is-is/).
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C# 有几种方式表示类型之间的转换。Lippert 对 <samp class="SANS_TheSansMonoCd_W5Regular_11">is</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">as</samp> 的描述可参见 [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/archive<wbr>/blogs<wbr>/ericlippert<wbr>/is<wbr>-is<wbr>-as<wbr>-or<wbr>-is<wbr>-as<wbr>-is*](https://docs.microsoft.com/en-us/archive/blogs/ericlippert/is-is-as-or-is-as-is)
    和 [*https://<wbr>ericlippert<wbr>.com<wbr>/2013<wbr>/05<wbr>/30<wbr>/what<wbr>-the<wbr>-meaning<wbr>-of<wbr>-is<wbr>-is<wbr>/*](https://ericlippert.com/2013/05/30/what-the-meaning-of-is-is/)。
- en: 'These articles by Henney are targeted at C++ programmers, but the principles
    are broadly applicable in any object-oriented language, including C#: [*https://<wbr>www<wbr>.slideshare<wbr>.net<wbr>/Kevlin<wbr>/promoting<wbr>-polymorphism*](https://www.slideshare.net/Kevlin/promoting-polymorphism)
    and [*https://<wbr>www<wbr>.slideshare<wbr>.net<wbr>/Kevlin<wbr>/substitutability*](https://www.slideshare.net/Kevlin/substitutability).'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Henney 的这些文章主要面向 C++ 程序员，但其中的原则广泛适用于任何面向对象的编程语言，包括 C#： [*https://<wbr>www<wbr>.slideshare<wbr>.net<wbr>/Kevlin<wbr>/promoting<wbr>-polymorphism*](https://www.slideshare.net/Kevlin/promoting-polymorphism)
    和 [*https://<wbr>www<wbr>.slideshare<wbr>.net<wbr>/Kevlin<wbr>/substitutability*](https://www.slideshare.net/Kevlin/substitutability)。
- en: The rules for overload resolution can be found in the C# Language Specification
    at [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/language<wbr>-specification<wbr>/expressions#1164<wbr>-overload<wbr>-resolution*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/expressions#1164-overload-resolution).
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重载解析的规则可以在 C# 语言规范中找到，链接：[*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/language<wbr>-reference<wbr>/language<wbr>-specification<wbr>/expressions#1164<wbr>-overload<wbr>-resolution*](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/expressions#1164-overload-resolution)。
- en: Jon Skeet has blogged about overloading at [*https://<wbr>csharpindepth<wbr>.com<wbr>/articles<wbr>/Overloading*](https://csharpindepth.com/articles/Overloading).
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jon Skeet 在他的博客中介绍了重载的内容，访问地址为 [*https://<wbr>csharpindepth<wbr>.com<wbr>/articles<wbr>/Overloading*](https://csharpindepth.com/articles/Overloading)。
- en: Lippert looks at some interesting gotchas with respect to overload resolution
    at [*https://<wbr>ericlippert<wbr>.com<wbr>/2006<wbr>/04<wbr>/05<wbr>/odious<wbr>-ambiguous<wbr>-overloads<wbr>-part<wbr>-one<wbr>/*](https://ericlippert.com/2006/04/05/odious-ambiguous-overloads-part-one/)
    and [*https://<wbr>ericlippert<wbr>.com<wbr>/2006<wbr>/04<wbr>/06<wbr>/odious<wbr>-ambiguous<wbr>-overloads<wbr>-part<wbr>-two<wbr>/*](https://ericlippert.com/2006/04/06/odious-ambiguous-overloads-part-two/).
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lippert 讨论了关于重载解析的一些有趣问题，相关内容可以在以下链接中找到：[*https://<wbr>ericlippert<wbr>.com<wbr>/2006<wbr>/04<wbr>/05<wbr>/odious<wbr>-ambiguous<wbr>-overloads<wbr>-part<wbr>-one<wbr>/*](https://ericlippert.com/2006/04/05/odious-ambiguous-overloads-part-one/)
    和 [*https://<wbr>ericlippert<wbr>.com<wbr>/2006<wbr>/04<wbr>/06<wbr>/odious<wbr>-ambiguous<wbr>-overloads<wbr>-part<wbr>-two<wbr>/*](https://ericlippert.com/2006/04/06/odious-ambiguous-overloads-part-two/)。
- en: 'For a high-level description of record types in C# v9.0, see the Microsoft
    documentation: [*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/whats<wbr>-new<wbr>/csharp<wbr>-9#record<wbr>-types*](https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9#record-types).'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 C# 9.0 中记录类型的高级描述，请参阅微软文档：[*https://<wbr>docs<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/dotnet<wbr>/csharp<wbr>/whats<wbr>-new<wbr>/csharp<wbr>-9#record<wbr>-types*](https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9#record-types)。
- en: 'Type builders are a variation on the Factory pattern. See Erich Gamma et al.,
    *Design Patterns: Elements of Reusable Object-Oriented Software* (Addison-Wesley,
    1995).'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '类型构建器是工厂模式的一种变体。详见 Erich Gamma 等人所著的 *Design Patterns: Elements of Reusable
    Object-Oriented Software*（Addison-Wesley, 1995）。'
- en: 'Henney describes mutable companions and other value object patterns in his
    paper “The Good, the Bad, and the Koyaanisqatsi: Consideration of Some Patterns
    for Value Objects,” from the 2003 VikingPLoP (Pattern Languages of Programs) conference,
    at [*https://<wbr>www<wbr>.researchgate<wbr>.net<wbr>/publication<wbr>/244405850*](https://www.researchgate.net/publication/244405850).'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Henney 在他的论文《The Good, the Bad, and the Koyaanisqatsi: Consideration of Some
    Patterns for Value Objects》中描述了可变伴随对象及其他值对象模式，该论文发表于 2003 年 VikingPLoP（程序模式语言）会议，论文链接为
    [*https://<wbr>www<wbr>.researchgate<wbr>.net<wbr>/publication<wbr>/244405850*](https://www.researchgate.net/publication/244405850)。'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Chapter 8</samp>
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">第8章</samp>
- en: One example of an intentionally slow algorithm is the bogosort, which is sometimes
    used as a simple way to deliberately keep a CPU busy; Wikipedia has details at
    [*https://<wbr>en<wbr>.wikipedia<wbr>.org<wbr>/wiki<wbr>/Bogosort*](https://en.wikipedia.org/wiki/Bogosort).
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有意设计为慢速的算法是 bogosort，通常用作一种简单方法来故意保持 CPU 占用；维基百科有相关详细信息，链接为 [*https://<wbr>en<wbr>.wikipedia<wbr>.org<wbr>/wiki<wbr>/Bogosort*](https://en.wikipedia.org/wiki/Bogosort)。
- en: One popular library to benchmark code for performance measurement is BenchmarkDotNet,
    described at [*https://<wbr>benchmarkdotnet<wbr>.org*](https://benchmarkdotnet.org).
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于基准测试性能的流行库是 BenchmarkDotNet，相关介绍请见 [*https://<wbr>benchmarkdotnet<wbr>.org*](https://benchmarkdotnet.org)。
- en: 'Joe Duffy’s blog about performance and optimization is now more than a decade
    old but still thought-provoking, and the principles remain relevant: [*http://<wbr>joeduffyblog<wbr>.com<wbr>/2010<wbr>/09<wbr>/06<wbr>/the<wbr>-premature<wbr>-optimization<wbr>-is<wbr>-evil<wbr>-myth<wbr>/*](http://joeduffyblog.com/2010/09/06/the-premature-optimization-is-evil-myth/).'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Joe Duffy 关于性能与优化的博客已经有十多年历史，但仍然发人深省，且其原则至今仍具有相关性，链接为：[*http://<wbr>joeduffyblog<wbr>.com<wbr>/2010<wbr>/09<wbr>/06<wbr>/the<wbr>-premature<wbr>-optimization<wbr>-is<wbr>-evil<wbr>-myth<wbr>/*](http://joeduffyblog.com/2010/09/06/the-premature-optimization-is-evil-myth/)。
- en: The Microsoft documentation for the <samp class="SANS_TheSansMonoCd_W5Regular_11">ValueType</samp>
    override of <samp class="SANS_TheSansMonoCd_W5Regular_11">Equals</samp> is at
    [*https://docs.microsoft.com/en-us/dotnet/api/system.valuetype.equals?view=net-6.0*](https://docs.microsoft.com/en-us/dotnet/api/system.valuetype.equals?view=net-6.0).
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 <samp class="SANS_TheSansMonoCd_W5Regular_11">ValueType</samp> 重写的 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Equals</samp> 方法，微软文档可在 [*https://docs.microsoft.com/en-us/dotnet/api/system.valuetype.equals?view=net-6.0*](https://docs.microsoft.com/en-us/dotnet/api/system.valuetype.equals?view=net-6.0)
    查阅。
- en: 'Sergey Tepliakov’s blog has a wealth of information on why overriding <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Equals</samp> is so important, and some
    good advice and interesting background on <samp class="SANS_TheSansMonoCd_W5Regular_11">ValueType.GetHashCode</samp>:
    [*https://<wbr>devblogs<wbr>.microsoft<wbr>.com<wbr>/premier<wbr>-developer<wbr>/performance<wbr>-implications<wbr>-of<wbr>-default<wbr>-struct<wbr>-equality<wbr>-in<wbr>-c<wbr>/*](https://devblogs.microsoft.com/premier-developer/performance-implications-of-default-struct-equality-in-c/).'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sergey Tepliakov的博客提供了大量关于为何重写<samp class="SANS_TheSansMonoCd_W5Regular_11">Equals</samp>方法如此重要的信息，并给出了一些关于<samp
    class="SANS_TheSansMonoCd_W5Regular_11">ValueType.GetHashCode</samp>的良好建议和有趣的背景知识：[*https://<wbr>devblogs<wbr>.microsoft<wbr>.com<wbr>/premier<wbr>-developer<wbr>/performance<wbr>-implications<wbr>-of<wbr>-default<wbr>-struct<wbr>-equality<wbr>-in<wbr>-c<wbr>/*](https://devblogs.microsoft.com/premier-developer/performance-implications-of-default-struct-equality-in-c/)。
- en: For the .NET 6 implementation of the default <samp class="SANS_TheSansMonoCd_W5Regular_11">GetHashCode</samp>
    method, see [*https://<wbr>github<wbr>.com<wbr>/dotnet<wbr>/runtime<wbr>/blob<wbr>/release<wbr>/6<wbr>.0<wbr>/src<wbr>/coreclr<wbr>/vm<wbr>/comutilnative<wbr>.cpp#L1878*](https://github.com/dotnet/runtime/blob/release/6.0/src/coreclr/vm/comutilnative.cpp#L1878).
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关.NET 6中默认<samp class="SANS_TheSansMonoCd_W5Regular_11">GetHashCode</samp>方法的实现，请参见[*https://<wbr>github<wbr>.com<wbr>/dotnet<wbr>/runtime<wbr>/blob<wbr>/release<wbr>/6<wbr>.0<wbr>/src<wbr>/coreclr<wbr>/vm<wbr>/comutilnative<wbr>.cpp#L1878*](https://github.com/dotnet/runtime/blob/release/6.0/src/coreclr/vm/comutilnative.cpp#L1878)。
- en: The default equality for structs is defined in <samp class="SANS_TheSansMonoCd_W5Regular_11">ValueType</samp>
    at [*https://<wbr>github<wbr>.com<wbr>/dotnet<wbr>/runtime<wbr>/blob<wbr>/release<wbr>/6<wbr>.0<wbr>/src<wbr>/coreclr<wbr>/System<wbr>.Private<wbr>.CoreLib<wbr>/src<wbr>/System<wbr>/ValueType<wbr>.cs#L21*](https://github.com/dotnet/runtime/blob/release/6.0/src/coreclr/System.Private.CoreLib/src/System/ValueType.cs#L21).
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构体的默认相等性在<samp class="SANS_TheSansMonoCd_W5Regular_11">ValueType</samp>中定义，详见[*https://<wbr>github<wbr>.com<wbr>/dotnet<wbr>/runtime<wbr>/blob<wbr>/release<wbr>/6<wbr>.0<wbr>/src<wbr>/coreclr<wbr>/System<wbr>.Private<wbr>.CoreLib<wbr>/src<wbr>/System<wbr>/ValueType<wbr>.cs#L21*](https://github.com/dotnet/runtime/blob/release/6.0/src/coreclr/System.Private.CoreLib/src/System/ValueType.cs#L21)。
- en: Niklaus Wirth’s documentation for Project Oberon can be found at [*https://<wbr>people<wbr>.inf<wbr>.ethz<wbr>.ch<wbr>/wirth<wbr>/ProjectOberon<wbr>/PO<wbr>.System<wbr>.pdf*](https://people.inf.ethz.ch/wirth/ProjectOberon/PO.System.pdf).
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Niklaus Wirth的Project Oberon文档可以在[*https://<wbr>people<wbr>.inf<wbr>.ethz<wbr>.ch<wbr>/wirth<wbr>/ProjectOberon<wbr>/PO<wbr>.System<wbr>.pdf*](https://people.inf.ethz.ch/wirth/ProjectOberon/PO.System.pdf)找到。
