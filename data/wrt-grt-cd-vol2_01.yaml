- en: '**1**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1**'
- en: '**THINKING LOW-LEVEL, WRITING HIGH-LEVEL**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**低级思维，高级编程**'
- en: '*If you want to write the best high-level language code, learn assembly language.*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你想编写最好的高级语言代码，学习汇编语言吧。*'
- en: '*—Common programming advice*'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*—常见的编程建议*'
- en: '![image](../images/common01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: 'This book doesn’t teach anything revolutionary. Rather, it describes a time-tested,
    well-proven approach to writing great code—understanding how the code you write
    will actually execute on a real machine. The journey to that understanding begins
    with this chapter. In it, we’ll explore these topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书并没有教授任何革命性的东西。而是描述了一种经过时间考验、验证过的方法来编写优秀的代码——理解你编写的代码如何在真实机器上执行。通向这一理解的旅程始于这一章。在这一章中，我们将探讨以下主题：
- en: Misconceptions programmers have about the code quality produced by typical compilers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序员对典型编译器生成的代码质量的误解
- en: Why learning assembly language is still a good idea
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么学习汇编语言仍然是一个好主意
- en: How to think in low-level terms while writing HLL code
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在编写高级语言代码时如何保持低级思维
- en: So, without further ado, let’s begin!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，事不宜迟，让我们开始吧！
- en: '**1.1 Misconceptions About Compiler Quality**'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**1.1 关于编译器质量的误解**'
- en: In the early days of the personal computer revolution, high-performance software
    was written in assembly language. As time passed, optimizing compilers for high-level
    languages were improved, and their authors began claiming that the performance
    of compiler-generated code was within 10 to 50 percent of hand-optimized assembly
    code. Such proclamations ushered the ascent of HLLs for PC application development,
    sounding the death knell for assembly language. Many programmers began citing
    statistics like “my compiler achieves 90 percent of assembly’s speed, so it’s
    insane to use assembly language.” The problem is that they never bothered to write
    hand-optimized assembly versions of their applications to check their claims.
    Often, their assumptions about their compiler’s performance were wrong. Worse
    still, as compilers for languages such as C and C++ matured to the point that
    they were producing very good output code, programmers began favoring more high-level
    languages, such as Java, Python, and Swift, that were either interpreted (or semi-interpreted)
    or had very immature code generators producing terrible output code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在个人计算机革命的初期，高性能软件是用汇编语言编写的。随着时间的推移，优化编译器不断改进，编译器的作者们开始声称，编译器生成的代码的性能与手工优化的汇编代码相差10%到50%。这样的声明推动了高级语言在PC应用程序开发中的兴起，并敲响了汇编语言的丧钟。许多程序员开始引用诸如“我的编译器达到了汇编语言速度的90%，所以用汇编语言简直是疯狂”的统计数据。问题是，他们从未费心去编写手工优化的汇编版本应用程序来验证他们的说法。通常，他们对编译器性能的假设是错误的。更糟糕的是，当像C和C++这样的语言的编译器成熟到能够生成非常好的输出代码时，程序员们开始偏好那些高级语言，如Java、Python和Swift，这些语言要么是解释型（或半解释型）的，要么是拥有非常不成熟的代码生成器，生成糟糕的输出代码。
- en: The authors of optimizing compilers weren’t lying. Under the right conditions,
    an optimizing compiler *can* produce code that is almost as good as hand-optimized
    assembly language. However, the HLL code has to be written in an appropriate way
    to achieve these performance levels. Writing HLL code in this manner requires
    a firm understanding of how computers operate and execute software.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 优化编译器的作者们并没有说谎。在合适的条件下，优化编译器*可以*生成几乎与手工优化的汇编语言代码一样优秀的代码。然而，高级语言（HLL）代码必须以合适的方式编写，才能达到这些性能水平。以这种方式编写高级语言代码需要对计算机如何操作和执行软件有深刻的理解。
- en: '**1.2 Why Learning Assembly Language Is Still a Good Idea**'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**1.2 为什么学习汇编语言仍然是一个好主意**'
- en: When programmers first began giving up assembly language in favor of using HLLs,
    they generally understood the low-level ramifications of the HLL they were using
    and could choose their HLL statements appropriately. Unfortunately, the generation
    of computer programmers that followed them did not have the benefit of mastering
    assembly language. As a result, they were not equipped to wisely choose statements
    and data structures that HLLs could efficiently translate into machine code. Their
    applications, if measured against the performance of a comparable hand-optimized
    assembly language program, surely proved inferior.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序员们首次放弃汇编语言，转而使用高级语言时，他们通常理解所使用的高级语言的低级影响，并能够适当地选择高级语言语句。不幸的是，随后的程序员一代并没有掌握汇编语言的优势。因此，他们并没有能力明智地选择那些能够高效转化为机器代码的语句和数据结构。如果将他们的应用程序与相应的手工优化汇编语言程序的性能进行比较，结果无疑会证明其性能更差。
- en: 'Veteran programmers who recognized this problem offered sage advice to the
    new programmers: “If you want to learn how to write good HLL code, you need to
    learn assembly language.” By learning assembly language, programmers can understand
    the low-level implications of their code and make informed decisions about the
    best way to write applications in an HLL.^([1](footnotes.xhtml#ch1fn1)) [Chapter
    2](ch02.xhtml#ch02) will discuss assembly language further.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 资深程序员意识到这个问题后，向新程序员提供了明智的建议：“如果你想学会写出优秀的高级语言代码，你需要学习汇编语言。”通过学习汇编语言，程序员可以理解他们代码的低级含义，并做出关于如何在高级语言中编写应用程序的明智决策。^([1](footnotes.xhtml#ch1fn1))
    [第2章](ch02.xhtml#ch02)将进一步讨论汇编语言。
- en: '**1.3 Why Learning Assembly Language Isn’t Absolutely Necessary**'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**1.3 为什么学习汇编语言并非绝对必要**'
- en: While it’s a good idea for any well-rounded programmer to learn to program in
    assembly language, it isn’t a necessary condition for writing great, efficient
    code. What’s most important is to understand how HLLs translate statements into
    machine code so that you can choose appropriate HLL statements. And while one
    way to do this is to become an expert assembly language programmer, that approach
    requires considerable time and effort.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管任何全面的程序员学习编程汇编语言是个好主意，但这并不是写出优秀、高效代码的必要条件。最重要的是理解高级语言如何将语句翻译成机器代码，以便你可以选择合适的高级语言语句。虽然成为汇编语言的专家是一种方法，但这种方法需要相当多的时间和精力。
- en: 'The question, then, is, “Can a programmer just study the low-level nature of
    the machine and improve the HLL code they write without becoming an expert assembly
    programmer in the process?” The answer, given the preceding point, is a qualified
    yes. That’s the purpose of this book: to teach you what you need to know to write
    great code without having to become an expert assembly language programmer.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，问题是：“程序员是否可以仅研究机器的低级性质，改善他们编写的高级语言代码，而不必成为汇编语言专家？”根据前述观点，答案是有条件的肯定。这本书的目的就是教你写出优秀代码所需的知识，而不必成为汇编语言专家。
- en: '**1.4 Thinking Low-Level**'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**1.4 从低级角度思考**'
- en: 'When Java was first becoming popular in the late 1990s, the language received
    complaints like the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当Java在1990年代末期开始流行时，这门语言收到了以下类似的抱怨：
- en: Java’s interpreted code is forcing me to take a lot more care when writing software;
    I can’t get away with using linear searches the way I could in C/C++. I have to
    use good (and more difficult to implement) algorithms like binary search.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Java的解释性代码让我在编写软件时需要更加小心；我不能像在C/C++中那样使用线性查找。我必须使用像二分查找这样良好（且实现更困难）的算法。
- en: 'Such statements demonstrate the major problem with using optimizing compilers:
    they allow programmers to get lazy. Although optimizing compilers have made tremendous
    strides over the past several decades, none of them can make up for poorly written
    HLL source code.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些语句展示了使用优化编译器的主要问题：它们使程序员变得懒惰。尽管优化编译器在过去几十年取得了巨大进展，但没有任何一个编译器能够弥补编写不良高级语言源代码的问题。
- en: 'Of course, many novice HLL programmers read about how marvelous the optimization
    algorithms are in modern compilers and assume that the compiler will produce efficient
    code regardless of what it’s fed. However, that’s not the case: although compilers
    can do a great job of translating well-written HLL code into efficient machine
    code, poorly written source code stymies the compiler’s optimization algorithms.
    In fact, it’s not uncommon to hear C/C++ programmers praising their compiler,
    never realizing how poor a job it’s actually doing because of how they’ve written
    their code. The problem is that they’ve never actually looked at the machine code
    the compiler produces from their HLL source code. They assume that the compiler
    is doing a great job because they’ve been told that compilers produce code that’s
    almost as good as what an expert assembly language programmer can produce.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，许多初学者高级语言（HLL）程序员读过关于现代编译器优化算法多么神奇的文章，并假设编译器无论输入什么都会生成高效的代码。然而，事实并非如此：尽管编译器在将编写良好的高级语言代码转换为高效机器代码方面做得很好，但编写不良的源代码会妨碍编译器的优化算法。事实上，常常能听到C/C++程序员称赞他们的编译器，却从未意识到由于他们编写的代码方式，编译器实际上做得很差。问题在于，他们从未真正查看过编译器从高级语言源代码生成的机器代码。他们假设编译器做得很好，因为他们被告知编译器生成的代码几乎与专家的汇编语言程序员所能生成的代码一样好。
- en: '**1.4.1 Compilers Are Only as Good as the Source Code You Feed Them**'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**1.4.1 编译器的好坏取决于你提供的源代码**'
- en: It goes without saying that a compiler won’t change your algorithms in order
    to improve your software’s performance. For example, if you use a linear search
    rather than a binary search, you can’t expect the compiler to use a better algorithm
    for you. Certainly, the optimizer may improve the speed of your linear search
    by a constant factor (for example, double or triple the speed of your code), but
    this improvement may be nothing compared to using a better algorithm. In fact,
    it’s very easy to show that, given a sufficiently large database, a binary search
    processed by an interpreter with no optimization will run faster than a linear
    search algorithm processed by the best compiler.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 不用说，编译器不会改变你的算法来提高软件的性能。例如，如果你使用线性搜索而不是二分搜索，你不能指望编译器为你使用更好的算法。当然，优化器可能会通过一个常数因子（比如让你的代码速度加倍或三倍）来提高线性搜索的速度，但这种提高可能和使用更好的算法相比微不足道。实际上，很容易证明，在数据库足够大的情况下，通过没有优化的解释器执行二分搜索会比通过最佳编译器执行线性搜索更快。
- en: '**1.4.2 How to Help the Compiler Produce Better Machine Code**'
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**1.4.2 如何帮助编译器生成更好的机器代码**'
- en: Let’s assume that you’ve chosen the best possible algorithm(s) for your application
    and you’ve spent the extra money to get the best compiler available. Is there
    something you can do to write HLL code that is more efficient than you would otherwise
    produce? Generally, the answer is yes.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经为你的应用程序选择了最好的算法，并且你花费额外的费用购买了最好的编译器。有没有办法让你写的高级语言代码比你平常编写的更高效？一般来说，答案是肯定的。
- en: One of the best-kept secrets in the compiler world is that most compiler benchmarks
    are rigged. Most real-world compiler benchmarks specify an algorithm to use, but
    they leave it up to the compiler vendors to actually implement the algorithm in
    their particular language. These compiler vendors generally know how their compilers
    behave when fed certain code sequences, so they will write the code sequence that
    produces the best possible executable.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器世界中一个最被保密的秘密就是，大多数编译器基准测试都是被操控的。大多数真实世界中的编译器基准测试都会指定一个算法，但具体的算法实现由编译器厂商来完成，并且这些厂商通常知道他们的编译器在处理特定代码序列时的表现，因此他们会编写出能生成最佳可执行文件的代码序列。
- en: Some may feel that this is cheating, but it’s really not. If a compiler is capable
    of producing that same code sequence under normal circumstances (that is, the
    code generation trick wasn’t developed specifically for the benchmark), there’s
    nothing wrong with showing off its performance. And if the compiler vendor can
    pull little tricks like this, so can you. By carefully choosing the statements
    you use in your HLL source code, you can “manually optimize” the machine code
    the compiler produces.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人可能觉得这是一种作弊行为，但其实并不是。如果编译器能够在正常情况下生成相同的代码序列（也就是说，这种代码生成技巧并不是专门为基准测试开发的），那么展示其性能是完全没有问题的。而且，如果编译器厂商能够使用类似的小技巧，那么你也完全可以。通过精心选择你在高级语言源代码中使用的语句，你可以“手动优化”编译器生成的机器代码。
- en: Several levels of manual optimization are possible. At the most abstract level,
    you can optimize a program by selecting a better algorithm for the software. This
    technique is independent of the compiler and the language.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 手动优化有多个层级。在最抽象的层面上，你可以通过为软件选择更好的算法来优化程序。这种技术与编译器和语言无关。
- en: Dropping down a level of abstraction, the next step is to manually optimize
    your code based on the HLL that you’re using while keeping the optimizations independent
    of the particular implementation of that language. While such optimizations may
    not apply to other languages, they should apply across different compilers for
    the same language.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 降低抽象级别，下一步就是根据你使用的高级语言来手动优化代码，同时保持优化与该语言的具体实现无关。虽然这种优化可能不适用于其他语言，但它应该适用于同一种语言的不同编译器。
- en: Dropping down yet another level, you can start thinking about structuring the
    code so that the optimizations are applicable only to a certain vendor or perhaps
    only to a specific version of a compiler.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 降低到另一个层次，你可以开始考虑如何构造代码，使得优化仅适用于某个特定的编译器厂商，或者仅适用于某个特定版本的编译器。
- en: Finally, at perhaps the lowest level, you can consider the machine code that
    the compiler emits and adjust how you write statements in an HLL to force the
    compiler to generate some sequence of machine instructions. The Linux kernel is
    an example of this approach. Legend has it that the kernel developers were constantly
    tweaking the C code they wrote in the Linux kernel in order to control the 80x86
    machine code that the GNU C Compiler (GCC) was producing.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在可能的最低层次，你可以考虑编译器发出的机器代码，并调整在 HLL 中编写语句的方式，以迫使编译器生成某些机器指令序列。Linux 内核就是这种方法的一个例子。传说中，内核开发者不断调整他们在
    Linux 内核中编写的 C 代码，以控制 GNU C 编译器（GCC）所生成的 80x86 机器代码。
- en: 'Although this development process may be a bit overstated, one thing is for
    sure: programmers who employ it will produce the best possible machine code from
    a compiler. This is the type of code that’s comparable to what decent assembly
    language programmers produce, and the kind of compiler output that HLL programmers
    like to cite when arguing that compilers produce code that’s comparable to handwritten
    assembly. The fact that most people do not go to these extremes to write their
    HLL code never enters into the argument. Nevertheless, the fact remains that carefully
    written HLL code can be nearly as efficient as decent assembly code.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个开发过程可能有些被夸大，但有一点是肯定的：采用这种方法的程序员将能够从编译器中生成最优的机器代码。这种代码与合格的汇编语言程序员所写的代码相当，也是高级语言（HLL）程序员在辩论时提到的，认为编译器生成的代码可以与手写汇编语言相媲美的那种编译器输出。大多数人并不会为了编写
    HLL 代码而走到这些极端，这点从未被提出作为论点。然而，事实仍然是，精心编写的 HLL 代码可以接近于高效的汇编代码。
- en: Will compilers ever produce code that is as good as or better than what an expert
    assembly language programmer can write? The correct answer is no; after all, an
    expert assembly language programmer can always look at a compiler’s output and
    improve on that. However, careful programmers writing code in HLLs like C/C++
    can come close if they write their program such that the compiler can easily translate
    it into efficient machine code. Thus, the real question is, “How do I write my
    HLL code so that the compiler can translate it most efficiently?” Well, answering
    that question is the subject of this book. But the short answer is, “Think in
    assembly; write in a high-level language.” Let’s take a quick look at how to do
    that.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器是否会生成和专家级汇编语言程序员所写的代码一样好，甚至更好？正确答案是否定的；毕竟，专家级汇编语言程序员总能查看编译器的输出并加以改进。然而，精心编写代码的程序员，如果使用像
    C/C++ 这样的 HLL，仍然可以接近这一目标，只要他们编写的程序能够让编译器轻松地将其转换为高效的机器代码。因此，真正的问题是：“我该如何编写 HLL
    代码，使编译器能够最有效地转换它？”嗯，回答这个问题正是本书的主题。但简短的答案是：“用汇编语言思考；用高级语言编写。”我们来快速看看如何做到这一点。
- en: '**1.4.3 How to Think in Assembly While Writing HLL Code**'
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**1.4.3 在编写 HLL 代码时如何思考汇编语言**'
- en: HLL compilers translate statements in that language to a sequence of one or
    more machine language (or assembly language) instructions. The amount of space
    in memory that an application consumes, and the amount of time that an application
    spends in execution, are directly related to the number and type of machine instructions
    that the compiler emits.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: HLL 编译器将该语言中的语句翻译为一个或多个机器语言（或汇编语言）指令的序列。应用程序在内存中占用的空间大小，以及应用程序执行时所花费的时间，直接与编译器发出的机器指令的数量和类型相关。
- en: 'However, the fact that you can achieve the same result with two different code
    sequences in an HLL does not imply that the compiler generates the same sequence
    of machine instructions for each approach. The HLL `if` and `switch/case` statements
    are classic examples. Most introductory programming texts suggest that a chain
    of `if-elseif-else` statements is equivalent to a `switch/case` statement. Consider
    the following trivial C example:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可以通过两种不同的代码序列在 HLL 中实现相同的结果，这并不意味着编译器为每种方法生成相同的机器指令序列。HLL 中的 `if` 和 `switch/case`
    语句就是经典的例子。大多数入门编程教材都建议将一连串的 `if-elseif-else` 语句等同于 `switch/case` 语句。考虑以下简单的 C
    语言示例：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Although these two code sequences might be semantically equivalent (that is,
    they compute the same result), there is no guarantee that the compiler will generate
    the same sequence of machine instructions for both.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这两个代码序列在语义上可能是等效的（也就是说，它们计算相同的结果），但不能保证编译器会为两者生成相同的机器指令序列。
- en: Which one will be better? Unless you understand how the compiler translates
    statements like these into machine code, and have a basic knowledge of the different
    efficiencies between various machines, you probably can’t answer that. Programmers
    who fully understand how a compiler will translate these two sequences can evaluate
    both and then judiciously choose one based on the quality of the expected output
    code.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 哪一个会更好呢？除非你了解编译器如何将这些语句转换为机器代码，并且对不同机器之间的效率差异有基本的了解，否则你可能无法回答这个问题。完全理解编译器如何转换这两个序列的程序员可以对它们进行评估，然后根据预期输出代码的质量明智地选择其中一个。
- en: 'By thinking in low-level terms when writing HLL code, a programmer can help
    an optimizing compiler approach the level of code quality achieved by hand-optimized
    assembly language code. Sadly, the converse is usually true as well: if a programmer
    does not consider the low-level ramifications of their HLL code, the compiler
    will rarely generate the best possible machine code.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在编写HLL代码时使用低级术语，程序员可以帮助优化编译器接近手工优化的汇编语言代码所达到的代码质量水平。遗憾的是，通常情况相反：如果程序员没有考虑HLL代码的低级影响，编译器很少会生成最优的机器代码。
- en: '**1.5 Writing High-Level**'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**1.5 编写高级语言代码**'
- en: One problem with thinking in low-level terms while writing high-level code is
    that it’s almost as much work to write HLL code this way as it is to write assembly
    code. This negates many of the familiar benefits of writing programs in HLLs,
    such as faster development time, better readability, and easier maintenance. If
    you’re sacrificing the benefits of writing applications in an HLL, why not simply
    write them in assembly language to begin with?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写高级语言代码时，如果用低级术语思考，其中一个问题是，按这种方式编写HLL代码几乎和编写汇编代码一样费劲。这消除了编写HLL程序时许多熟悉的好处，比如更快的开发时间、更好的可读性和更容易的维护。如果你正在牺牲使用HLL编写应用程序的好处，为什么不干脆从一开始就用汇编语言编写呢？
- en: As it turns out, thinking in low-level terms won’t lengthen your overall project
    schedule as much as you would expect. Although it does slow down the initial coding
    process, the resulting HLL code will still be readable and portable, and it will
    maintain the other attributes of well-written, great code. But more importantly,
    it will also gain some efficiency that it wouldn’t otherwise have. Once the code
    is written, you won’t have to constantly think about it in low-level terms during
    the maintenance and enhancement phases of the Software Development Life Cycle
    (SDLC). In short, thinking in low-level terms during the initial software development
    stage retains the advantages of both low-level and high-level coding (efficiency
    plus ease of maintenance) without the corresponding disadvantages.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，使用低级术语思考并不会像你预期的那样大幅延长整体项目的进度。虽然它确实会减缓初期的编码过程，但最终生成的高级语言（HLL）代码仍然是可读的、可移植的，并且能够保持良好代码的其他特性。但更重要的是，它还会获得一些本来没有的效率。一旦代码编写完成，在软件开发生命周期（SDLC）的维护和增强阶段，你就不必再用低级术语去思考它了。简而言之，在初期软件开发阶段使用低级术语思考，既保留了低级和高级编码的优势（效率加上易于维护），又避免了相应的缺点。
- en: '**1.6 Language-Neutral Approach**'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**1.6 跨语言的方法**'
- en: Although this book assumes you are conversant in at least one imperative language,
    it is not entirely language specific; its concepts transcend whatever programming
    language(s) you’re using. To help make the examples more accessible, the programming
    examples we’ll use will rotate among several languages, such as C/C++, Pascal,
    BASIC, Java, Swift, and assembly. When presenting examples, I’ll explain exactly
    how the code operates so that even if you’re unfamiliar with the specific programming
    language, you’ll be able to understand its operation by reading the accompanying
    description.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本书假设你至少熟悉一种命令式语言，但它并不是完全针对某一种语言的；其概念跨越了你使用的任何编程语言。为了帮助使示例更易理解，我们将使用多种语言的编程示例，诸如C/C++、Pascal、BASIC、Java、Swift和汇编语言。在展示示例时，我会详细解释代码的运行方式，这样即使你不熟悉特定的编程语言，也能通过阅读附带的描述理解其运作方式。
- en: 'This book uses the following languages and compilers in various examples:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 本书在各种示例中使用了以下语言和编译器：
- en: '**C/C++:** GCC and Microsoft’s Visual C++'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C/C++：** GCC和微软的Visual C++'
- en: '**Pascal:** Borland’s Delphi, and Free Pascal'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pascal：** Borland的Delphi和Free Pascal'
- en: '**Assembly language:** Microsoft’s MASM, HLA (High-Level Assembly), and Gas
    (the GNU Assembler)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**汇编语言：** 微软的MASM、HLA（高级汇编语言）和Gas（GNU汇编器）'
- en: '**Basic:** Microsoft’s Visual Basic'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Basic：** 微软的Visual Basic'
- en: 'If you’re not comfortable working with assembly language, don’t worry: the
    primer on 80x86 assembly language and the online reference (*[http://www.writegreatcode.com/](http://www.writegreatcode.com/)*)
    will allow you to read compiler output. If you’d like to extend your knowledge
    of assembly language, see the resources listed at the end of this chapter.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不习惯使用汇编语言，不用担心：80x86汇编语言的入门教程和在线参考 (*[http://www.writegreatcode.com/](http://www.writegreatcode.com/)*
    )将帮助你读取编译器输出。如果你想扩展你对汇编语言的了解，可以查看本章末尾列出的资源。
- en: '**1.7 Additional Tips**'
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**1.7 额外提示**'
- en: 'No single book can completely cover everything you need to know in order to
    write great code. This book, therefore, concentrates on the areas that are most
    pertinent for writing great software, providing the 90 percent solution for those
    who are interested in writing the best possible code. To get that last 10 percent
    you’ll need additional help. Here are some suggestions:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 没有一本书能完全涵盖写出优秀代码所需的所有知识。因此，这本书专注于编写优秀软件最相关的领域，为那些有兴趣编写最佳代码的人提供90%的解决方案。要获得剩下的10%，您需要额外的帮助。以下是一些建议：
- en: '**Become an expert assembly language programmer.** Fluency in at least one
    assembly language will fill in many missing details that you just won’t get from
    this book. As noted, the purpose of this book is to teach you how to write the
    best possible code *without* actually becoming an assembly language programmer.
    However, the extra effort will improve your ability to think in low-level terms.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**成为一名精通汇编语言的程序员。** 至少精通一种汇编语言，将填补许多从这本书中无法获得的细节。如前所述，本书的目的是教你如何编写最佳代码，*而不是*成为一名汇编语言程序员。然而，额外的努力将提高你以低级语言思考的能力。'
- en: '**Study compiler construction theory.** Although this is an advanced topic
    in computer science, there’s no better way to understand how compilers generate
    code than to study the theory behind compilers. While there’s a wide variety of
    textbooks on this subject, many of them require considerable prerequisite knowledge.
    Carefully review any book before you purchase it in order to determine if it was
    written at an appropriate level for your skill set. You can also search online
    to find some excellent web tutorials.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**学习编译器构造理论。** 虽然这是计算机科学中的一个高级话题，但没有比研究编译器背后的理论更好的方式来理解编译器如何生成代码。尽管有许多关于这个主题的教材，其中一些需要相当的先备知识。在购买任何书籍之前，请仔细审查，确定它是否以适合您技能水平的方式编写。您还可以在线搜索一些优秀的网络教程。'
- en: '**Study advanced computer architecture.** Machine organization and assembly
    language programming are a subset of the study of computer architecture. While
    you may not need to know how to design your own CPUs, studying computer architecture
    may help you discover additional ways to improve the HLL code that you write.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**学习高级计算机架构。** 机器组织和汇编语言编程是计算机架构学习的一个子集。虽然你可能不需要知道如何设计自己的CPU，但学习计算机架构可能帮助你发现改进你编写的高级语言（HLL）代码的其他方法。'
- en: '**1.8 For More Information**'
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**1.8 获取更多信息**'
- en: 'Duntemann, Jeff. *Assembly Language Step-by-Step*. 3rd ed. Indianapolis: Wiley,
    2009.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Duntemann, Jeff. *《汇编语言逐步教程》*（第3版）。印第安纳波利斯：Wiley，2009年。
- en: 'Hennessy, John L., and David A. Patterson. *Computer Architecture: A Quantitative
    Approach*. 5th ed. Waltham, MA: Morgan Kaufmann, 2012.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Hennessy, John L.，David A. Patterson. *《计算机架构：定量方法》*（第5版）。沃尔瑟姆，马萨诸塞州：Morgan
    Kaufmann，2012年。
- en: 'Hyde, Randall. *The Art of Assembly Language*. 2nd ed. San Francisco: No Starch
    Press, 2010.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Hyde, Randall. *《汇编语言的艺术》*（第2版）。旧金山：No Starch Press，2010年。
