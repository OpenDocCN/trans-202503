- en: '**8**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**8**'
- en: '**Three Helpings of Pi**'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**三份圆周率**'
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common.jpg)'
- en: The number *π* (pi) represents the ratio of a circle’s circumference (the distance
    all the way around the circle’s “rim”) to its diameter (the straight line distance
    from one side of the circle through its center to the other side). Remarkably,
    the value of this ratio is the same no matter what size the circle is. Other properties
    of a circle, like its area, depend on its size, but not *π*; as the size of the
    circle increases, the ratio of the increasing circumference to the increasing
    diameter remains constant.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 数字*π*（圆周率）表示圆的周长（圆的“边缘”全程的距离）与其直径（从圆的一侧通过圆心到另一侧的直线距离）之间的比率。值得注意的是，这个比率的值无论圆的大小如何都相同。圆的其他属性，如面积，依赖于它的大小，但*π*不受影响；随着圆的增大，增加的周长与增加的直径之比保持不变。
- en: You can think of measurements of circumference and diameter as being given in
    a common length unit, like centimeters or inches. In the ratio, the units of these
    measurements cancel out, leaving *π* as a pure number, dimensionless. It’s often
    approximated as 3.14, but the digits beyond the decimal point actually continue
    on forever, without repeating. Over the years, mathematicians have devised lots
    of different ways to calculate *π*, with varying degrees of accuracy. In this
    chapter, we’ll consider a few such techniques, using algebra, geometry, and even
    number theory.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将周长和直径的测量值看作是用一个常见的长度单位表示的，比如厘米或英寸。在这个比率中，这些测量值的单位会相互抵消，从而使*π*成为一个纯粹的数字，没有单位。*π*通常被近似为3.14，但小数点后的数字实际上会一直延续下去，并且不会重复。多年来，数学家们提出了许多不同的方法来计算*π*，其准确度各不相同。在本章中，我们将探讨几种这样的技巧，涉及代数、几何，甚至数论。
- en: How Archimedes Calculated Pi
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阿基米德如何计算圆周率
- en: Let’s first explore an approach to calculating *π* used by the ancient Greek
    mathematician Archimedes. Start by drawing a circle, then draw an *inscribed*
    polygon, a shape that fits completely inside the circle with its corners just
    touching the circle’s rim. Next, draw a *circumscribed* polygon, a shape that
    completely surrounds the circle such that the midpoint of each side touches the
    rim of the circle. The two polygons should have the same number of sides, and
    they should be *regular* polygons, meaning all their sides are of equal length.
    [Figure 8-1](ch08.xhtml#ch8fig1) shows what this drawing might look like.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先探讨一下古希腊数学家阿基米德用来计算*π*的方法。首先画一个圆，然后画一个*内切*多边形，这是一个完全位于圆内的形状，其顶点恰好接触圆的边缘。接下来，画一个*外切*多边形，这是一个完全包围圆的形状，其每条边的中点都接触圆的边缘。两个多边形应该具有相同的边数，并且应该是*规则*多边形，这意味着它们的所有边长相等。[图
    8-1](ch08.xhtml#ch8fig1)展示了这种绘图可能的样子。
- en: Notice that the perimeter of the inscribed (purple) hexagon is smaller than
    the circumference of the circle, and the perimeter of the circumscribed (black)
    hexagon is larger than the circumference of the circle. This means we can use
    the perimeters of these two hexagons to find lower and upper bounds for the value
    of *π*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，内切（紫色）六边形的周长小于圆的周长，而外切（黑色）六边形的周长大于圆的周长。这意味着我们可以使用这两个六边形的周长来找到*π*的上下界。
- en: The figure doesn’t specify length units, so let’s say the circle has a radius
    of *r* = 1\. A circle with a radius of 1 is called a *unit circle*. This unit
    circle has a circumference of *C* = 2*πr* = 2*π*. The inscribed hexagon is made
    up of six equilateral triangles with side length 1, so by summing the lengths
    of the outer edges of the triangles we can determine that the size of the perimeter
    of the inscribed hexagon is 6\. This in turn tells us that 2*π* > 6, so *π* >
    3.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图中没有指定长度单位，所以我们假设圆的半径为*r* = 1。半径为1的圆叫做*单位圆*。这个单位圆的周长为*C* = 2*πr* = 2*π*。内切六边形由六个边长为1的等边三角形组成，因此通过求和三角形外边的长度，我们可以得出内切六边形的周长为6。这进一步告诉我们2*π*
    > 6，因此*π* > 3。
- en: '![Image](../images/pg172_Image_208.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/pg172_Image_208.jpg)'
- en: '*Figure 8-1: Inscribed and circumscribed hexagons*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-1：内切和外切六边形*'
- en: With a little bit of trigonometry, we can calculate that the circumscribed hexagon
    has sides of length (2![Image](../images/pg172_Image_209.jpg)) / 3, so the size
    of its perimeter is (6 ⋅ 2![Image](../images/pg172_Image_209.jpg)) / 3\. This
    equals 4![Image](../images/pg172_Image_209.jpg), and if 2*π* < 4![Image](../images/pg172_Image_209.jpg),
    then *π* < 2![Image](../images/pg172_Image_209.jpg), or approximately 3.4642.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 利用一点三角学，我们可以计算出外接六边形的边长为 (2![Image](../images/pg172_Image_209.jpg)) / 3，因此其周长为
    (6 ⋅ 2![Image](../images/pg172_Image_209.jpg)) / 3。这等于 4![Image](../images/pg172_Image_209.jpg)，如果
    2*π* < 4![Image](../images/pg172_Image_209.jpg)，那么 *π* < 2![Image](../images/pg172_Image_209.jpg)，即大约是
    3.4642。
- en: We now know that *π* is between 3 and 3.4642\. To get a little more precision,
    let’s try doubling the number of sides of the inscribed and circumscribed polygons.
    As the number of sides increases, the inner and outer polygons nestle closer to
    the circle. [Figure 8-2](ch08.xhtml#ch8fig2) shows what happens when we go from
    6 sides to 12, for example.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道，*π* 介于 3 和 3.4642 之间。为了获得更精确的值，让我们尝试将内切和外接多边形的边数翻倍。随着边数的增加，内外多边形会越来越接近圆形。[图
    8-2](ch08.xhtml#ch8fig2) 展示了从 6 边形增加到 12 边形时发生的情况。
- en: 'As the polygons get closer and closer to the circle, their perimeters *converge*
    on the value of 2*π*. Archimedes went from 6- to 12- to 24- to 48- to 96-sided
    polygons and reached an approximation for *π* that was the best known for centuries:
    223 / 71 < *π* < 22 / 7.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 随着多边形越来越接近圆形，它们的周长会 *收敛* 到 2*π* 的值。阿基米德从 6 边形开始，逐步增加到 12 边形、24 边形、48 边形、96 边形，最终得到了一个被称为最精确的
    *π* 近似值，持续了几个世纪：223 / 71 < *π* < 22 / 7。
- en: '![Image](../images/pg172_Image_210.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg172_Image_210.jpg)'
- en: '*Figure 8-2: Inscribed and circumscribed 12-sided polygons*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-2：内切和外接 12 边形*'
- en: 'Archimedes arrived at his approximation by developing a recurrence rule for
    tracking how the perimeters change when you double the number of sides of the
    two polygons. The recurrence takes *a*[*n*] and *b*[*n*], the old upper and lower
    bounds of *π*, and calculates the new upper and lower bounds after the doubling,
    *a*[*n* + 1] and *b*[*n* + 1], as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 阿基米德通过发展一种递推规则来跟踪当两种多边形的边数翻倍时周长的变化，从而得到了他的近似值。这个递推公式以 *a*[*n*] 和 *b*[*n*] 为输入，即*π*的旧上界和下界，计算出新的上界和下界，即
    *a*[*n* + 1] 和 *b*[*n* + 1]，其公式如下：
- en: '![Image](../images/pg172_Image_211.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg172_Image_211.jpg)'
- en: For example, to go from our initial hexagons, where *a*[1] = 2![Image](../images/pg172_Image_209.jpg)
    and *b*[1] = 3, to the 12-sided polygons, we calculate
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，从我们最初的六边形（*a*[1] = 2![Image](../images/pg172_Image_209.jpg) 和 *b*[1] = 3）开始，到
    12 边形，我们的计算过程为：
- en: '![Image](../images/pg173_Image_212.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg173_Image_212.jpg)'
- en: 'and:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 并且：
- en: '![Image](../images/pg173_Image_213.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg173_Image_213.jpg)'
- en: This tells us that *π* must be between 3.10583 and 3.21539.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉我们，*π* 必须介于 3.10583 和 3.21539 之间。
- en: The calculation for *a*[*n* + 1] is called the *harmonic mean* of *a*[*n*] and
    *b*[*n*]. The calculation for *b*[*n* + 1] is the *geometric mean* of *a*[*n*
    + 1] and *b*[*n*]. You can find more details about what these terms mean and how
    Archimedes used trigonometry to derive his recurrence at *[https://mathworld.wolfram.com/ArchimedesRecurrenceFormula.html](https://mathworld.wolfram.com/ArchimedesRecurrenceFormula.html)*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*a*[*n* + 1] 的计算被称为 *a*[*n*] 和 *b*[*n*] 的 *调和平均数*。*b*[*n* + 1] 的计算是 *a*[*n*
    + 1] 和 *b*[*n*] 的 *几何平均数*。你可以在 *[https://mathworld.wolfram.com/ArchimedesRecurrenceFormula.html](https://mathworld.wolfram.com/ArchimedesRecurrenceFormula.html)*
    上找到更多关于这些术语的详细解释，以及阿基米德是如何使用三角学推导他的递推公式的。'
- en: 'Project 30: Archimedes’s Recurrence'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 项目 30：阿基米德递推法
- en: In this project, we’ll program Archimedes’s recurrence in Scratch in order to
    calculate an approximation of *π*. We’ll start with hexagons, which, as we’ve
    established, give an upper bound *a*[1] of 2![Image](../images/pg172_Image_209.jpg)
    and a lower bound *b*[1] of 3\. Then, we’ll have the number of sides double from
    there. [Figure 8-3](ch08.xhtml#ch8fig3) shows the code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将在 Scratch 中编程实现阿基米德的递推公式，以计算*π*的近似值。我们将从六边形开始，正如我们已经确定的，它们给出了上界 *a*[1]
    为 2![Image](../images/pg172_Image_209.jpg) 和下界 *b*[1] 为 3。然后，我们将使边数从此开始翻倍。[图 8-3](ch08.xhtml#ch8fig3)
    展示了代码。
- en: '![Image](../images/pg173_Image_214.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg173_Image_214.jpg)'
- en: '*Figure 8-3: Calculating *π* starting from inscribed and circumscribed hexagons*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-3：从内切和外接六边形计算 *π**'
- en: After setting the starting values for the upper and lower bounds ❶, we use a
    loop to calculate new values until the results are equal ➋, meaning we’ve reached
    the highest level of accuracy that Scratch can support. We store the upper bounds
    in list `A` and the lower bounds in list `B`. In the loop, notice how we calculate
    the new value of `a` first so we can use it in our calculation of `b`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置了上界和下界的起始值❶之后，我们使用一个循环计算新值，直到结果相等➋，这意味着我们已经达到了Scratch支持的最高精度。我们将上界存储在列表`A`中，将下界存储在列表`B`中。在循环中，注意我们先计算`a`的新值，这样我们就可以在计算`b`时使用它。
- en: The Results
  id: totrans-29
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 结果
- en: '[Figure 8-4](ch08.xhtml#ch8fig4) shows the contents of the `A` and `B` lists
    after running the program.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[图8-4](ch08.xhtml#ch8fig4)展示了运行程序后`A`和`B`列表的内容。'
- en: '![Image](../images/pg174_Image_215.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg174_Image_215.jpg)'
- en: '*Figure 8-4: Starting with hexagons and converging to π*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-4：从六边形开始并收敛到π*'
- en: 'It takes just 27 cycles of the loop for us to hit the accuracy limits of Scratch’s
    floating-point representation. At this point, the values of the bounds converge
    on 3.141592653589792\. You can check that the first several digits are right if
    you remember the mnemonic “How I need a shake, chocolate of course, after the
    heavy lectures involving quantum mechanics.” Count the letters in each word to
    get the first 15 digits of *π*: “How I need” is 3, 1, 4, and so on.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 只需27个循环，我们就能达到Scratch浮点数表示的精度限制。此时，边界的值收敛到3.141592653589792\. 如果你记得记忆法“我需要一杯冰沙，当然是巧克力口味的，在那些涉及量子力学的沉重讲座后”，你可以检查前几个数字是否正确。通过数每个单词的字母数，你可以得到*π*的前15个数字：“How
    I need”对应3, 1, 4，依此类推。
- en: Hacking the Code
  id: totrans-34
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 破解代码
- en: The side-doubling recurrence works even if we don’t start with hexagons. Suppose
    we approximate the circumference of a circle with inscribed and circumscribed
    squares, as in [Figure 8-5](ch08.xhtml#ch8fig5).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们不从六边形开始，边长翻倍的递归依然有效。假设我们用内切和外接正方形来近似圆的周长，如[图8-5](ch08.xhtml#ch8fig5)所示。
- en: '![Image](../images/pg175_Image_216.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg175_Image_216.jpg)'
- en: '*Figure 8-5: Using squares to approximate circumference*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-5：使用正方形来近似周长*'
- en: If the circle still has a radius of 1, the outer square has a perimeter of 8\.
    By the Pythagorean theorem, the inner square has sides of length ![Image](../images/pg175_Image_217.jpg).
    Since the circle has a circumference of 2*π*, the first estimate is therefore
    2![Image](../images/pg175_Image_217.jpg) < *π* < 4\. To run the recurrence from
    there, just replace the two blocks setting the initial values of `a` and `b` (see
    [Figure 8-3](ch08.xhtml#ch8fig3) ❶ on [page 153](ch08.xhtml#page_153)) with the
    blocks in [Figure 8-6](ch08.xhtml#ch8fig6).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果圆的半径仍为1，则外接正方形的周长为8。根据勾股定理，内切正方形的边长为![Image](../images/pg175_Image_217.jpg)。由于圆的周长为2*π*，因此第一个估算值为2![Image](../images/pg175_Image_217.jpg)
    < *π* < 4\. 要从这里运行递归，只需将设置`a`和`b`初始值的两个模块（参见[图8-3](ch08.xhtml#ch8fig3) ❶，[第153页](ch08.xhtml#page_153)）替换为[图8-6](ch08.xhtml#ch8fig6)中的模块。
- en: '![Image](../images/pg175_Image_218.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg175_Image_218.jpg)'
- en: '*Figure 8-6: New initial values for the recurrence*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-6：递归的新的初始值*'
- en: '[Figure 8-7](ch08.xhtml#ch8fig7) shows the result of running the program with
    these new starting values.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[图8-7](ch08.xhtml#ch8fig7)展示了使用这些新起始值运行程序的结果。'
- en: '![Image](../images/pg175_Image_219.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg175_Image_219.jpg)'
- en: '*Figure 8-7: Starting with squares and converging to π*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-7：从正方形开始并收敛到π*'
- en: Even though the recurrence starts with wider bounds, it quickly converges, once
    again taking 27 cycles to hit Scratch’s accuracy limit.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管递归从更宽的范围开始，但它很快就会收敛，再次需要27个循环才能达到Scratch的精度限制。
- en: '![Image](../images/pg26_Image_12.jpg) Programming Challenge'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](../images/pg26_Image_12.jpg) 编程挑战'
- en: '**8.1**Figure out the initial values for the recurrence if you start with inscribed
    and circumscribed triangles. Since the first doubling of sides goes from triangles
    to hexagons, the output from the second line on should be the same as in [Figure
    8-4](ch08.xhtml#ch8fig4).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**8.1**如果从内切和外接三角形开始，计算递归的初始值。由于边长的第一次翻倍是从三角形到六边形，因此从第二行开始的输出应与[图8-4](ch08.xhtml#ch8fig4)中的结果相同。'
- en: Estimating Pi from the Area of a Circle
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从圆的面积估算π
- en: Another way to calculate *π* is to use *A* = *πr*², the formula for the area
    of a circle. Imagine you’ve drawn a circle with a radius of *r* on top of a grid,
    with its center at point (0, 0). Any point (*x*, *y*) inside the circle will satisfy
    the inequality *x*² + *y*² < *r*². Say we focus only on points whose coordinates
    are integers. These are known as *lattice points*. We can think of each lattice
    point as the lower-left corner of a *unit square*, a square with a side length
    *s* = 1 and area *s*² = 1\. Counting the number of lattice points inside the circle
    (the ones that satisfy the *x*² + *y*² < *r*² inequality) gives us an approximation
    of the area of the circle. [Figure 8-8](ch08.xhtml#ch8fig8) shows an example of
    how this works, for a circle with a radius of 4.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 计算*π*的另一种方法是使用公式*A* = *πr*²，表示圆的面积。假设你在一个网格上绘制了一个半径为*r*的圆，圆心位于点(0, 0)。圆内的任何点(*x*,
    *y*)都满足不等式*x*² + *y*² < *r*²。假设我们只关注坐标为整数的点，这些点被称为*格点*。我们可以将每个格点视为一个*单位正方形*的左下角，这个正方形的边长为*s*
    = 1，面积为*s*² = 1。通过计数圆内的格点（即满足*x*² + *y*² < *r*²不等式的点），我们可以得到圆面积的近似值。[图 8-8](ch08.xhtml#ch8fig8)展示了如何使用这种方法，示例为半径为4的圆。
- en: '![Image](../images/pg176_Image_220.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg176_Image_220.jpg)'
- en: '*Figure 8-8: Lattice points in a circle with a radius of 4*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-8：半径为4的圆内的格点*'
- en: 'The lattice points inside the circle are shown as purple dots. There are 45
    in all. Each lattice point marks the lower-left corner of a yellow unit square.
    A few of these squares extend beyond the circle, but this is offset by the parts
    of the circle that the squares don’t cover. On balance, we can say that the circle
    has an approximate area of 45, the same as the area covered by the yellow squares.
    We know the area of a circle is *πr*², so dividing 45 by *r*² gives us an estimated
    value for *π*: 45 / 16 = 2.8125.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 圆内的格点以紫色点显示，总共有45个。每个格点标记着一个黄色单位正方形的左下角。这些正方形中的一些超出了圆的范围，但这一点被圆中未被正方形覆盖的部分所抵消。综合来看，我们可以说圆的面积大约是45，和黄色正方形覆盖的面积相同。我们知道圆的面积是*πr*²，因此将45除以*r*²得到一个估算值：45
    / 16 = 2.8125。
- en: 'If we also count the four lattice points that fall directly on the perimeter
    of the circle—points (4, 0), (0, 4), (–4, 0), and (–4, 0)—we can get a better
    approximation: 49 / 16 = 3.0625\. We could get even closer by using a bigger circle.
    This is because the area of the circle grows in proportion to the square of the
    radius, but the error comes only from the squares around the circumference, the
    number of which grows only in proportion to the first power of the radius. So
    the bigger the circle is, the less the error is relative to the overall area.
    In our next project, we’ll see how much we can improve our estimate by increasing
    the size of the radius, with Scratch handling the calculations for us.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们还统计四个恰好位于圆周上的格点——点(4, 0)、(0, 4)、(–4, 0)和(–4, 0)——我们可以得到更精确的估算值：49 / 16 =
    3.0625。通过使用更大的圆，我们可以进一步提高精度。这是因为圆的面积与半径的平方成比例增长，而误差仅来自圆周围的正方形，圆周上正方形的数量仅与半径的线性关系成比例增长。因此，圆越大，相对于总面积的误差越小。在我们的下一个项目中，我们将看到如何通过增加半径的大小来提高估算值，同时使用Scratch来处理计算。
- en: 'Project 31: Using the Lattice Point Tally'
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 项目31：使用格点计数
- en: '[Figure 8-9](ch08.xhtml#ch8fig9) shows some Scratch code that prompts for a
    radius and counts lattice points in the resulting circle to approximate *π*. The
    output keeps track of both the number of lattice points that satisfy the condition
    *x*² + *y*² < *r*² and the resulting estimated value of *π*.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 8-9](ch08.xhtml#ch8fig9)展示了一些Scratch代码，提示输入半径并在生成的圆内计数格点，以估算*π*。输出会记录满足条件*x*²
    + *y*² < *r*²的格点数量以及由此得到的*π*估算值。'
- en: '![Image](../images/pg177_Image_221.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg177_Image_221.jpg)'
- en: '*Figure 8-9: Counting lattice points to determine π*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-9：通过计数格点来估算π*'
- en: We first ask for a value for the circle’s radius. Then, we use two nested loops
    ❶ to step through the rows and columns of lattice points in a square circumscribed
    around the circle. We start in the top-right corner of the square, where `x` and
    `y` both equal the radius *r*, and work toward the bottom-left corner, where they
    equal –*r*. For each pair of coordinates, we check if the point is in the circle
    ➋ and increment the lattice count if it is. At the end, we divide the lattice
    count by the square of the radius to get the approximation of *π*.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要求圆的半径值。然后，使用两个嵌套循环 ❶ 遍历围绕圆形的方形网格中的行和列。我们从方形的右上角开始，在那里 `x` 和 `y` 都等于半径 *r*，然后向左下角移动，直到它们等于
    –*r*。对于每一对坐标，我们检查该点是否在圆内 ➋，如果是，则增加格点计数。最后，我们将格点计数除以半径的平方，从而得到 *π* 的近似值。
- en: The Results
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 结果
- en: '[Figure 8-10](ch08.xhtml#ch8fig10) shows the result of running the program
    for a circle with a radius of 1,000.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 8-10](ch08.xhtml#ch8fig10) 显示了运行程序的结果，计算半径为 1,000 的圆形。'
- en: '![Image](../images/pg178_Image_222.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/pg178_Image_222.jpg)'
- en: '*Figure 8-10: Counting lattice points in a circle with* r *= 1,000*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-10: 计算半径为* r * = 1,000 的圆内的格点数*'
- en: This approximation of *π* is accurate up to the first four decimal places. Much
    better!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 *π* 的近似值精确到小数点后四位。效果好多了！
- en: Hacking the Code
  id: totrans-63
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 破解代码
- en: For a circle with a radius of *r*, the program in [Figure 8-9](ch08.xhtml#ch8fig9)
    has to check (2*r*)² lattice points. When *r* = 1,000, that’s 4 million points
    to check, which takes a little while. The delay gets worse as the circle gets
    bigger. If *r* = 10,000, for example, there will be 400 million points to check,
    and you’ll be waiting a very long time for your results.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于半径为 *r* 的圆，[图 8-9](ch08.xhtml#ch8fig9) 中的程序需要检查 (2*r*)² 个格点。当 *r* = 1,000
    时，需要检查 400 万个点，这需要一些时间。随着圆形变大，延迟会更长。例如，当 *r* = 10,000 时，将需要检查 4 亿个点，你将需要等待很长时间才能得到结果。
- en: But why check *all* the points? We can sample a smaller number of randomly selected
    lattice points and use those to make a guess about the overall area of the circle.
    [Figure 8-11](ch08.xhtml#ch8fig11) shows how.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 但为什么要检查 *所有* 的点呢？我们可以随机选择较少的格点，并使用这些点来估计圆的总体面积。[图 8-11](ch08.xhtml#ch8fig11)
    显示了这个方法。
- en: '![Image](../images/pg179_Image_223.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/pg179_Image_223.jpg)'
- en: '*Figure 8-11: Sampling random lattice points to determine π*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-11: 通过采样随机格点来确定 π*'
- en: 'The variable `tries` controls the `repeat` loop ❶ and determines how many random
    points to check. I recommend setting it to about 10 times the radius of the circle.
    We can confine ourselves to looking only at points in the first quadrant of the
    grid, where the coordinates are positive integers, by picking random `x` and `y`
    values between `0` and `radius` ➋. If the point falls within the circle, we update
    the lattice count as before. With enough tries, we should see the following equivalence:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 变量 `tries` 控制 `repeat` 循环 ❶，并决定检查多少个随机点。我建议将其设置为圆半径的 10 倍左右。我们可以限制自己只查看网格的第一象限中的点，在该象限中坐标是正整数，通过选择
    `0` 到 `radius` 之间的随机 `x` 和 `y` 值 ➋。若点位于圆内，则如前更新格点计数。通过足够多的尝试，我们应该能够看到以下等式：
- en: '![Image](../images/pg179_Image_224.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/pg179_Image_224.jpg)'
- en: 'The left side of this equivalence is the ratio of “hits” (lattice points in
    the circle) to the total number of points sampled. The right side is the ratio
    of one-fourth of the circle’s area (the part of the circle in the first quadrant
    of the grid) to the square of its radius. Think of *r*² here as the area of the
    first-quadrant square containing all the points we can possibly sample. Substituting
    *A* for *πr*² and solving for *π*, we get:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 该等式的左侧是“命中”（圆内的格点）与总采样点数的比率。右侧是圆面积四分之一的比率（位于网格第一象限的圆部分）与半径平方的比率。这里的 *r*² 可看作包含所有我们可能采样的点的第一象限方形的面积。将
    *A* 代入 *πr*² 并解出 *π*，得到：
- en: '![Image](../images/pg179_Image_225.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/pg179_Image_225.jpg)'
- en: We use this equation at the end of the program to estimate *π*. [Figure 8-12](ch08.xhtml#ch8fig12)
    shows an example result, with a radius of 10,000 and 100,000 randomly sampled
    points.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在程序的最后使用这个公式来估算 *π*。[图 8-12](ch08.xhtml#ch8fig12) 显示了一个示例结果，半径为 10,000，随机采样了
    100,000 个点。
- en: '![Image](../images/pg180_Image_226.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/pg180_Image_226.jpg)'
- en: '*Figure 8-12: Estimating π through random trials*'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-12: 通过随机试验估算 π*'
- en: Your output from this program will probably be different every time you run
    it, since the random number generator determines the choice of points to test.
    Still, the result we got here is pretty close, and it’s calculated much more quickly
    than it would have been if the program had checked every single lattice point
    in the circle.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你从这个程序中得到的输出每次运行时可能都会不同，因为随机数生成器决定了测试点的选择。不过，我们这里得到的结果非常接近，而且比程序检查圆中每一个格点要快得多。
- en: '![Image](../images/pg26_Image_12.jpg) Programming Challenge'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](../images/pg26_Image_12.jpg) 编程挑战'
- en: '**8.2**There’s a subtle difference between these two versions of the `pick
    random` block:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**8.2**这两个版本的`pick random`模块之间有一个微妙的差别：'
- en: '![Image](../images/pg180_Image_227.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg180_Image_227.jpg)'
- en: Embed each block in a little bit of code that reports the result to see how
    they behave. The version with `1` returns integer values, so asking for values
    between 0 and 1 gives 0 about half the time and 1 about half the time. The version
    with `1.0` returns values between 0 and 1, which aren’t necessarily integers.
    If we don’t have integer (*x, y*) coordinates, then we don’t have true lattice
    points, but does that matter? See if the code in [Figure 8-11](ch08.xhtml#ch8fig11)
    still works if the randomly chosen points don’t have integer coordinates.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 将每个模块嵌入一小段代码，以报告结果，看看它们的表现如何。带有`1`的版本返回整数值，因此请求0到1之间的值时，大约一半时间会得到0，另一半时间会得到1。带有`1.0`的版本返回的是0到1之间的值，这些值不一定是整数。如果我们没有整数的(*x,
    y*)坐标，那么我们就没有真正的格点，但这有关系吗？看看[图 8-11](ch08.xhtml#ch8fig11)中的代码，如果随机选择的点没有整数坐标，代码是否还能正常工作。
- en: Approximating Pi with Relative Primes
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用相对素数逼近π
- en: The number *π* shows up in many places in mathematics that seem to be far removed
    from circles and geometry. One interesting formula involving *π* relates back
    to the idea of common divisors from [Chapters 2](ch02.xhtml#ch02) and [3](ch03.xhtml#ch03).
    Remember that a *common divisor* of two integers is a number that’s a divisor
    of each one. If the only common divisor that two integers have is 1, then the
    two integers are said to be *relatively prime*.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 数字*π*在许多看似与圆形和几何学无关的地方出现。一个有趣的涉及*π*的公式回溯到[第2章](ch02.xhtml#ch02)和[第3章](ch03.xhtml#ch03)中的公因数的概念。记住，两个整数的*公因数*是一个能整除这两个整数的数。如果这两个整数唯一的公因数是1，那么这两个整数被称为*相对素数*。
- en: Here’s a geometric way to interpret relative primes. Suppose you’re standing
    at the origin of a coordinate plane, at the point (0, 0), looking out at the lattice
    points. You can see most of them, but some are blocked because there’s another
    lattice point in the way. For example, [Figure 8-13](ch08.xhtml#ch8fig13) marks
    the *visible lattice points* in the first quadrant as purple dots. The straight
    black lines show that the point (1, 1) blocks the points (2, 2), (3, 3), and so
    on; the point (2, 1) blocks (4, 2) and (6, 3); and the point (3, 2) blocks (6,
    4).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一种几何方法来解释相对素数。假设你站在坐标平面的原点(0, 0)，面朝格点。你可以看到大部分格点，但有些被挡住了，因为有另一个格点在前面。例如，[图
    8-13](ch08.xhtml#ch8fig13)标出了第一象限内的*可见格点*，这些格点用紫色圆点表示。黑色直线显示了点(1, 1)挡住了点(2, 2)、(3,
    3)等等；点(2, 1)挡住了(4, 2)和(6, 3)；点(3, 2)挡住了(6, 4)。
- en: '![Image](../images/pg181_Image_228.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg181_Image_228.jpg)'
- en: '*Figure 8-13: Visible and hidden lattice points*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-13：可见和被遮挡的格点*'
- en: The coordinates of the visible points, such as (1, 1), (7, 2), and (3, 8), are
    relatively prime. The coordinates of blocked points, such as (6, 8) and (2, 4),
    are not. The 8×8 square shown in [Figure 8-13](ch08.xhtml#ch8fig13) has 44 visible
    lattice points in it out of 64 points total, so the proportion that are visible
    is 44 / 64 ≈ 0.6875\. This tells us the proportion of pairs of numbers between
    1 and 8 that are relatively prime.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 可见点的坐标，如(1, 1)、(7, 2)和(3, 8)，是相对素数。被遮挡的点坐标，如(6, 8)和(2, 4)，则不是。[图 8-13](ch08.xhtml#ch8fig13)中显示的8×8方格里有44个可见格点，共64个格点，因此可见格点的比例是44
    / 64 ≈ 0.6875。这告诉我们1到8之间的数字对中有相对素数的比例。
- en: Now suppose we expand the size of the square. What happens to the number of
    visible lattice points and to the number of relatively prime pairs? Both numbers
    grow, of course, but in a very specific way. As the size of the square grows,
    the proportion of the square’s lattice points that are visible approaches a limiting
    value of about 0.608\. The amazing thing is that this number has a value related
    to *π*. It’s 6/*π*². The reason for this is a little too advanced for this book
    (if you’re interested, it has to do with the Riemann zeta function), but we can
    still explore how the ratio behaves and use it to estimate the value of *π*.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们扩大了正方形的大小。可见的格点数和相对素数对的数量会发生什么变化呢？这两个数字当然都会增长，但以非常特定的方式增长。随着正方形大小的增加，正方形中可见格点所占比例会趋近于大约
    0.608 的极限值。令人惊讶的是，这个数字与*π*相关。它是 6/*π*²。之所以这样，是因为这个原因稍微有些复杂，不适合在本书中讨论（如果你有兴趣，它与黎曼
    ζ 函数有关），但我们仍然可以探讨该比率的变化，并利用它来估算*π*的值。
- en: 'Project 32: Using Only Visible Lattice Points'
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 项目 32：仅使用可见的格点
- en: Let’s write a program that counts the number of visible lattice points within
    a first-quadrant square of a given size and uses that count to calculate an approximation
    of *π*. (We’re using a square here rather than a circle because it’s easier to
    generate the points in a square with nested loops.) Since each visible point’s
    coordinates will be relatively prime, we can use the custom `gcd` (greatest common
    divisor) block we created for [Project 9](ch02.xhtml#ch02lev14) back in [Chapter
    2](ch02.xhtml#ch02) to help (see [Figure 2-17](ch02.xhtml#ch2fig17) on [page 38](ch02.xhtml#page_38)
    for the block definition). If the GCD of a set of coordinates is 1, we’ve found
    a visible lattice point. [Figure 8-14](ch08.xhtml#ch8fig14) shows the code.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个程序，计算给定大小的第一象限正方形内可见格点的数量，并使用该计数来计算*π*的近似值。（我们这里使用正方形而不是圆形，因为在正方形中使用嵌套循环生成格点更容易。）由于每个可见格点的坐标将是相对素数，我们可以使用我们为[项目
    9](ch02.xhtml#ch02lev14)在[第二章](ch02.xhtml#ch02)中创建的自定义 `gcd`（最大公约数）块来帮助（查看[图 2-17](ch02.xhtml#ch2fig17)，它的定义在[第
    38 页](ch02.xhtml#page_38)）。如果一组坐标的最大公约数是 1，我们就找到了一个可见的格点。[图 8-14](ch08.xhtml#ch8fig14)
    显示了代码。
- en: '![Image](../images/pg182_Image_229.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg182_Image_229.jpg)'
- en: '*Figure 8-14: Approximating π by counting visible lattice points*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-14：通过计算可见格点来近似*π**'
- en: We prompt for a quadrant size, then test all lattice points within the square
    with lower-left corner (`1`, `1`) and upper-right corner (`size`, `size`) using
    nested loops ❶. We start at (1,1) so we’re always calculating GCDs of pairs of
    positive integers. For every visible lattice point whose coordinates yield a GCD
    of `1`, we increment the `count` variable.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提示输入象限的大小，然后使用嵌套循环 ❶ 测试正方形内所有格点，正方形的左下角是（`1`，`1`），右上角是（`size`，`size`）。我们从（1,1）开始，这样我们总是在计算一对正整数的
    GCD。对于每一个其坐标的 GCD 为 `1` 的可见格点，我们递增 `count` 变量。
- en: 'After the loops are completed, we use the value of `count` to approximate *π*.
    We already know the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 循环完成后，我们使用 `count` 的值来近似*π*。我们已经知道以下内容：
- en: '![Image](../images/pg182_Image_230.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg182_Image_230.jpg)'
- en: 'Solving for *π*, we get:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 解出*π*，我们得到：
- en: '![Image](../images/pg183_Image_231.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg183_Image_231.jpg)'
- en: We make this calculation at the end of the program ➋.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在程序结束时进行这一计算 ➋。
- en: The Results
  id: totrans-97
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 结果
- en: It’s fun to run this program for a fairly large square, say `size = 1000`, and
    watch Scratch Cat take a few seconds to tally the points as they’re counted. [Figure
    8-15](ch08.xhtml#ch8fig15) shows the results. As before, the larger the sample
    size, the more accurate the approximation is likely to be.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个程序并对一个相当大的正方形进行计算，比如 `size = 1000`，然后观看 Scratch Cat 在几秒钟内统计格点数量，十分有趣。*图
    8-15* 显示了结果。如之前所说，样本越大，近似结果越精确。
- en: '![Image](../images/pg183_Image_232.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg183_Image_232.jpg)'
- en: '*Figure 8-15: Visible lattice points in a square of size 1,000*'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-15：大小为 1,000 的正方形中的可见格点*'
- en: Once again, the value of *π* is accurate for at least the first few decimal
    places.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，*π*的值至少在前几位小数上是准确的。
- en: '![Image](../images/pg26_Image_12.jpg) Programming Challenges'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](../images/pg26_Image_12.jpg) 编程挑战'
- en: '**8.3**The series behind the visible lattice point enumeration is:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**8.3** 可见格点枚举背后的序列是：'
- en: '*π*²/6 = 1 + 1/4 + 1/9 + 1/16 + . . . + 1/*n*² + . . .'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '*π*²/6 = 1 + 1/4 + 1/9 + 1/16 + . . . + 1/*n*² + . . .'
- en: 'Use Scratch to check this out by working out the first several partial sums:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Scratch 来验证这一点，尝试计算前几个部分和：
- en: 1, 1 + 1/4, 1 + 1/4 + 1/9, . . .
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 1, 1 + 1/4, 1 + 1/4 + 1/9, . . .
- en: '**8.4**A formula for *π* involving an infinite series is *π*/4 = 1 – 1/3 +
    1/5 – 1/7 + . . . . This is sometimes called the *Gregory series*. Program Scratch
    to use this formula to get the first few digits of *π*.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**8.4**涉及无穷级数的*π*公式为*π*/4 = 1 – 1/3 + 1/5 – 1/7 + ……。这有时被称为*格雷戈里级数*。编写Scratch程序，使用这个公式来计算*π*的前几个数字。'
- en: '**8.5**The series in Challenge 8.3 consists of all positive terms, while the
    Gregory series has terms that alternate between positive and negative. Compare
    how many terms of each series it takes to get a value of *π* that’s accurate to
    three decimal places. In general, alternating series converge much more slowly
    than series of positive terms.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**8.5**挑战 8.3 中的级数由所有正项组成，而格雷戈里级数的项在正负之间交替。比较每个级数需要多少项才能得到精确到小数点后三位的*π*值。一般来说，交替级数的收敛速度比正项级数慢得多。'
- en: '**8.6**In [Project 31](ch08.xhtml#ch08lev6), we used two versions of the area
    calculation to approximate *π*: one using every point in the square and one sampling
    points at random. Try applying a similar random approach to [Project 32](ch08.xhtml#ch08lev10).
    Examine a random sampling of lattice points, count how many have relatively prime
    coordinates, and use that count to approximate *π*.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**8.6**在[项目 31](ch08.xhtml#ch08lev6)中，我们使用了两种区域计算方法来近似*π*：一种是使用正方形中的每个点，另一种是随机抽样点。尝试将类似的随机方法应用于[项目
    32](ch08.xhtml#ch08lev10)。检查随机抽样的格点，计算有多少点的坐标是互质的，并使用该计数来近似*π*。'
- en: Conclusion
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: The number *π* comes up in lots of places in math, which leads to many different
    techniques for calculating its approximate value. Because of the limits of the
    IEEE 754 floating-point representation, Scratch can’t express *π* exactly. But
    then again, neither can we, since the digits of *π* go on forever! With Scratch
    Cat’s help, though, we can easily approximate its value in various ways, with
    up to 15 or 16 digits of accuracy.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 数字*π*在数学中出现的地方很多，这也导致了许多不同的计算方法来近似它的值。由于IEEE 754浮点表示的限制，Scratch无法精确表示*π*。不过我们也做不到这一点，因为*π*的数字是无限延续的！不过，在Scratch
    Cat的帮助下，我们可以用多种方式轻松近似*π*的值，精度可以达到15或16位。
