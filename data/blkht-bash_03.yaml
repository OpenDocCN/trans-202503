- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 3 SETTING UP A HACKING LAB
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3 设置一个黑客实验室
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: In this chapter, you’ll set up a lab environment containing hacking tools and
    an intentionally vulnerable target. You’ll use this lab in chapter exercises,
    but you can also turn to it whenever you need to write, stage, and test a bash
    script before running it against real targets.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将设置一个包含黑客工具和有意漏洞目标的实验室环境。您将在章节练习中使用此实验室，但您也可以在需要在真实目标运行之前编写、设置和测试bash脚本时使用它。
- en: The locally deployed target and its assets mimic the production environment
    of a mock internet hosting company called ACME Infinity Servers, which has its
    own fake employees, customers, and data. This fabricated internet hosting company
    and its customers will provide you with a diverse range of intentionally vulnerable
    applications, user accounts, and infrastructure that you can practice attacking
    in later chapters.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本地部署的目标及其资产模仿了名为ACME Infinity Servers的模拟互联网托管公司的生产环境，该公司拥有自己的虚构员工、客户和数据。这个虚构的互联网托管公司及其客户将为您提供各种有意漏洞的应用程序、用户帐户和基础设施，供您在后续章节中进行攻击实践。
- en: 'The lab will be fully contained in a Kali virtual machine. This virtual machine
    will require the following minimum specifications: at least 4GB of RAM, at least
    40GB of storage, and an internet connection.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 实验室将完全部署在一个Kali虚拟机中。该虚拟机将需要以下最低配置：至少4GB的RAM，至少40GB的存储空间，以及一个互联网连接。
- en: Security Lab Precautions
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全实验室预防措施
- en: 'Follow these guidelines to reduce the risks associated with building and operating
    a hacking lab:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '遵循这些指南，以减少构建和运行黑客实验室相关风险： '
- en: Avoid connecting the lab directly to the internet. Hacking lab environments
    typically run vulnerable code or outdated software. While these vulnerabilities
    are great for hands-on learning, they could pose risks to your network, computer,
    and data if they become accessible from the internet. Instead, we recommend working
    through the book when connected to local networks that you trust or operating
    offline after the lab is set up.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免直接将实验室连接到互联网。黑客实验室环境通常运行漏洞代码或过时软件。尽管这些漏洞对于实际学习非常有帮助，但如果它们从互联网变得可访问，可能会对您的网络、计算机和数据构成风险。相反，我们建议在连接到您信任的本地网络时通过本书工作，或者在设置实验室后离线操作。
- en: Deploy the lab in a virtual environment by using a hypervisor. Separating the
    lab environment from your primary operating system is generally a good idea, as
    it prevents conflicts that could potentially break other software on your computer.
    We recommend using a virtualization tool to ensure this separation. In the next
    section, you’ll install the lab in a Kali virtual machine.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用虚拟化管理程序在虚拟环境中部署实验室。将实验室环境与您的主操作系统分开通常是个好主意，因为这样可以防止可能会破坏计算机上其他软件的冲突。我们建议使用虚拟化工具来确保这种分离。在下一节中，您将在Kali虚拟机中安装实验室。
- en: Take frequent snapshots of your virtual machine. *Snapshots* are backups of
    your virtual machine that allow you to restore it to a previous state. Lab environments
    often won’t stay stable after you attack them, so take snapshots whenever your
    lab is in a stable state.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经常对你的虚拟机进行快照。*快照*是虚拟机的备份，允许你将其恢复到先前的状态。实验室环境经常在攻击后不会保持稳定，因此请在实验室稳定状态时随时进行快照。
- en: With these best practices in mind, let’s get our hands dirty and our lab up
    and running!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在遵循这些最佳实践的基础上，让我们开始动手，让我们的实验室运行起来吧！
- en: Installing Kali
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Kali
- en: '*Kali* is a Linux distribution created for penetration testing. Based on Debian,
    it was designed by OffSec. We’ll use Kali as our lab’s operating system because
    it comes bundled with some of the libraries, dependencies, and tools we’ll need.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*Kali*是一个专为渗透测试而创建的Linux发行版。基于Debian，由OffSec设计。我们将使用Kali作为我们实验室的操作系统，因为它预装了我们需要的某些库、依赖和工具。'
- en: Your Kali machine will play two roles in the lab environment. First, it will
    act as the host responsible for running the target networks and machines against
    which you’ll run your scripts. Second, it will serve as the hacking machine from
    which you’ll perform your attacks.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您的Kali机器在实验室环境中将扮演两个角色。首先，它将作为主机负责运行目标网络和机器，对这些目标运行您的脚本。其次，它将作为黑客机器，您将从中执行攻击。
- en: You can find an x64 version of the Kali virtual machine images for the VMware
    Workstation and Oracle VirtualBox hypervisors at *[https://www.kali.org/get-kali/#kali-platforms](https://www.kali.org/get-kali/#kali-platforms)*.
    Pick the hypervisor of your choice and follow the official installation instructions
    at *[https://www.kali.org/docs/installation/](https://www.kali.org/docs/installation/)*
    to install it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 *[https://www.kali.org/get-kali/#kali-platforms](https://www.kali.org/get-kali/#kali-platforms)*
    找到适用于 VMware Workstation 和 Oracle VirtualBox 超级管理程序的 Kali 虚拟机的 x64 版本。选择您喜欢的超级管理程序，并按照
    *[https://www.kali.org/docs/installation/](https://www.kali.org/docs/installation/)*
    上的官方安装说明进行安装。
- en: After completing the installation process, you should see the Kali login screen
    shown in [Figure 3-1](chapter3.xhtml#fig3-1). Kali ships with a default user account
    named *kali* whose password is *kali*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 完成安装过程后，您应该会看到如 [图 3-1](chapter3.xhtml#fig3-1) 所示的 Kali 登录界面。Kali 配备了一个名为 *kali*
    的默认用户帐户，密码是 *kali*。
- en: '![](../images/pg53.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/pg53.jpg)'
- en: 'Figure 3-1: The Kali login screen'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-1：Kali 登录界面
- en: After logging in to Kali, you need to make sure it’s up to date. To access the
    terminal, open the **Applications** menu, and in the search bar, enter **terminal
    emulator**. Click the corresponding application.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到 Kali 后，您需要确保系统是最新的。要访问终端，请打开 **应用程序** 菜单，在搜索栏中输入 **terminal emulator**。点击相应的应用程序。
- en: 'Let’s use a few commands to update your software repositories and upgrade your
    installed packages. In the terminal window, enter the following commands:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用几个命令来更新您的软件仓库并升级已安装的包。在终端窗口中，输入以下命令：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When you use sudo, Kali will ask for your password. This is the same password
    you used to log in to the virtual machine, *kali*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用 sudo 时，Kali 会要求您输入密码。这与您登录虚拟机时使用的密码相同，密码是 *kali*。
- en: 'Newer Kali releases use the Z Shell (zsh) by default, so ensure that bash is
    the default shell for the *kali* user with this command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 更新版 Kali 默认使用 Z Shell（zsh），因此请确保 bash 是 *kali* 用户的默认 shell，可以通过以下命令进行设置：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, enable your new default shell by running the following command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过运行以下命令启用您的新默认 shell：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Moving forward, we’ll use this Kali machine for all tasks we cover in the book.
    We recommend keeping the terminal window open, as you’ll need it for additional
    installations very soon.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在本书中使用此 Kali 机器进行所有任务。我们建议保持终端窗口打开，因为您很快就会需要它来进行其他安装。
- en: The Target Environment
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标环境
- en: 'Now it’s time to install the machines and networks that will make up the simulated
    target. You can perform this installation in two ways: manually or with an automated
    script.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候安装构成模拟目标的机器和网络了。您可以通过两种方式执行此安装：手动安装或使用自动化脚本。
- en: 'We encourage you to set up your lab manually at least once by following the
    instructions in this section. This will allow you to familiarize yourself with
    the lab’s core components and practice running commands on the command line. However,
    if you ever need to redeploy the lab from scratch in a fresh installation of Kali,
    you can do so by cloning the repository at *[https://github.com/dolevf/Black-Hat-Bash](https://github.com/dolevf/Black-Hat-Bash)*
    and running make init:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们鼓励您至少手动设置一次实验室，按照本节中的说明进行操作。这将帮助您熟悉实验室的核心组件，并练习在命令行中运行命令。然而，如果您需要在 Kali 的全新安装中重新部署实验室，您可以通过克隆
    *[https://github.com/dolevf/Black-Hat-Bash](https://github.com/dolevf/Black-Hat-Bash)*
    仓库并运行 `make init` 来完成。
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This script should install all the lab’s dependencies, containers, and hacking
    utilities, enabling you to skip the instructions in this section and in “Installing
    Additional Hacking Tools” on [page 61](#pg_61). You must execute the script in
    a Kali virtual machine that meets the system requirements described in the introduction
    to this chapter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本应该会安装所有实验室所需的依赖项、容器和黑客工具，您可以跳过本节和“安装其他黑客工具”中的说明，后者见 [第 61 页](#pg_61)。您必须在符合本章开头描述的系统要求的
    Kali 虚拟机中执行此脚本。
- en: Installing Docker and Docker Compose
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Docker 和 Docker Compose
- en: We’ll build the lab environment by using *Docker*, a tool for deploying and
    managing containers. *Containers* package code and its dependencies so an application
    can run reliably in various environments. We’ll also use *Docker Compose*, a special
    Docker utility for building and managing multiple Docker containers through a
    single YAML file known as a *Compose file*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 *Docker* 来构建实验室环境，Docker 是一个部署和管理容器的工具。*容器* 打包代码及其依赖项，使应用程序能够在各种环境中可靠运行。我们还将使用
    *Docker Compose*，这是一个特殊的 Docker 工具，通过一个名为 *Compose 文件* 的单一 YAML 文件来构建和管理多个 Docker
    容器。
- en: 'Let’s first configure our sources to use Debian’s current stable version of
    Docker’s community edition, *docker-ce*, using the following commands. We use
    printf to add Docker’s Advanced Package Tool (APT) repository to the APT package-source
    database file. The tee command reads from the standard input stream and writes
    to a file:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们配置源以使用Debian当前稳定版的Docker社区版，*docker-ce*，通过以下命令。我们使用printf将Docker的高级包工具（APT）仓库添加到APT包源数据库文件中。tee命令从标准输入流读取并写入文件：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, download and import Docker’s keyring to ensure that the repository is
    validated and all packages installed from that repository are cryptographically
    verified. Use curl to download the key and pipe it to the gpg command, which will
    then store it in the required folder:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，下载并导入Docker的密钥环，以确保仓库已验证，且从该仓库安装的所有软件包都是加密验证的。使用curl下载密钥并将其通过管道传递给gpg命令，后者将其存储在所需的文件夹中：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, run another update to refresh the repository database and install
    the Docker components:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，运行另一个更新命令以刷新仓库数据库并安装Docker组件：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To verify that you have Docker Compose running correctly, use the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证您的Docker Compose是否正确运行，请使用以下命令：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, make sure the Docker process will automatically start upon system reboot
    by running this command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过运行此命令，确保Docker进程在系统重启时自动启动：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Docker requires the use of sudo, which can get a little inconvenient. If you
    want to avoid having to enter sudo before executing Docker-related commands, add
    the *kali* user to the *docker* Linux group:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Docker需要使用sudo，这可能会有些不方便。如果您希望在执行Docker相关命令时避免每次都输入sudo，请将*kali*用户添加到*docker*
    Linux组：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Once you’ve done this, you shouldn’t need sudo to run Docker commands. For these
    changes to take effect, you must log out of and back in to Kali.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您不再需要使用sudo来运行Docker命令。为了使这些更改生效，您必须退出并重新登录到Kali系统。
- en: Cloning the Book’s Repository
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 克隆书籍的仓库
- en: You can find the lab’s files in the book’s GitHub repository at *[https://github.com/dolevf/Black-Hat-Bash](https://github.com/dolevf/Black-Hat-Bash)*.
    This repository contains the Docker configurations needed to build the lab, as
    well as all the bash scripts mentioned in the later chapters of this book.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在书籍的GitHub仓库中找到实验室的文件，地址为* [https://github.com/dolevf/Black-Hat-Bash](https://github.com/dolevf/Black-Hat-Bash)*。该仓库包含构建实验室所需的Docker配置以及本书后续章节中提到的所有bash脚本。
- en: 'Kali comes preloaded with Git, which you can use to clone and download the
    repository. To do so, run the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Kali预装了Git，您可以使用它来克隆和下载仓库。为此，请运行以下命令：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, move into the repository’s root directory and take a quick look at its
    contents:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，进入仓库的根目录，并快速查看其内容：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see in the output, the repository’s contents are organized into directories
    for each of the book’s chapters. The repository also includes a *lab* directory,
    which we’ll use to set up the lab in the next section.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在输出中看到的，仓库的内容按每章的目录组织。仓库还包括一个*lab*目录，我们将在下一节中使用它来设置实验室。
- en: Deploying Docker Containers
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署Docker容器
- en: 'The contents of the *lab* directory in the book’s repository control all networking
    infrastructure, machines, and applications used within the lab. This directory
    includes a *Makefile* file. By running this script with the help argument, you
    can see that it is used to deploy, tear down, rebuild, clean, and check the status
    of our environment:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 书籍仓库中*lab*目录的内容控制了实验室中使用的所有网络基础设施、机器和应用程序。该目录包括一个*Makefile*文件。通过运行该脚本并加上帮助参数，您可以看到它用于部署、拆卸、重建、清理和检查我们环境的状态：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let’s start by using the deploy argument to create the lab. Note that you will
    need sudo permissions to execute the deployment, so you’ll be prompted for your
    *kali* user password:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先使用deploy参数来创建实验室。请注意，您需要sudo权限来执行部署，因此系统会提示您输入*kali*用户密码：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The initial deployment of the lab environment will take a few minutes to complete.
    To monitor the progress of the installation, you’ll need to open a new terminal
    session and tail the logfile located under */var/log/lab-install.log*, like so:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 实验环境的初始部署将需要几分钟才能完成。为了监控安装进度，您需要打开一个新的终端会话并查看位于*/var/log/lab-install.log*的日志文件，例如：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: When the tail -f (follow) command is used against a file, it provides a live
    view of any new lines added to the end of the file. This is useful for keeping
    an eye on logfiles, which frequently have new information written to them.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 tail -f（跟随）命令对文件进行操作时，它会提供对文件末尾添加的新行的实时视图。这对于监视日志文件非常有用，因为日志文件经常会写入新信息。
- en: '> NOTE'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '> 注意'
- en: '*Because the lab setup downloads software such as operating system images and
    other applications, this deployment could take some time, depending on your network
    connection and the computer’s resources allocated to the host running the lab.*'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*由于实验室设置会下载操作系统镜像和其他应用程序等软件，因此根据您的网络连接和分配给运行实验室的主机的计算机资源，部署可能需要一些时间。*'
- en: Testing and Verifying the Containers
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试和验证容器
- en: 'Once the logfile indicates the process is complete, it should tell you whether
    the lab was set up correctly. We can also run a few commands to verify this. First,
    let’s execute a status check by using the make command, this time with the test
    argument. If all the checks pass, you should get the following output:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦日志文件显示进程完成，它应该告诉您实验室是否已正确设置。我们还可以运行一些命令来验证这一点。首先，使用 make 命令执行状态检查，这次使用 test
    参数。如果所有检查通过，您应该会看到以下输出：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can also list all our lab’s running Docker containers with the docker ps
    command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 docker ps 命令列出所有正在运行的实验室 Docker 容器：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You should get a similar output, though the containers won’t necessarily be
    in the same order.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会得到类似的输出，尽管容器的顺序不一定相同。
- en: NOTE
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*For convenience, you can also use the* make status *command, which is identical
    to* make test*, to check whether the lab is up and running.*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*为了方便起见，您还可以使用* make status *命令，它与* make test *命令相同，用于检查实验室是否正在正常运行。*'
- en: The Network Architecture
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络架构
- en: The lab consists of eight machines running in Docker containers, as well as
    two networks. Most of the machines are assigned to one of the two networks, and
    we’ll use them to facilitate various hacking scenarios in later chapters.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 实验室由八台运行在 Docker 容器中的机器和两个网络组成。大多数机器被分配到这两个网络中的一个，我们将利用它们在后续章节中进行各种黑客场景的测试。
- en: The networks within the lab are connected to Kali via Docker’s bridged networking
    mode. [Figure 3-2](chapter3.xhtml#fig3-2) shows the details of this network architecture.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 实验室中的网络通过 Docker 的桥接网络模式连接到 Kali。 [图 3-2](chapter3.xhtml#fig3-2) 展示了该网络架构的详细信息。
- en: '![](../images/pg58.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/pg58.jpg)'
- en: 'Figure 3-2: The lab’s network architecture'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-2：实验室的网络架构
- en: You can also find this diagram in the book’s repository at *[https://github.com/dolevf/Black-Hat-Bash/blob/master/lab/lab-network-diagram.png](https://github.com/dolevf/Black-Hat-Bash/blob/master/lab/lab-network-diagram.png)*.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在本书的代码库中找到此图：[https://github.com/dolevf/Black-Hat-Bash/blob/master/lab/lab-network-diagram.png](https://github.com/dolevf/Black-Hat-Bash/blob/master/lab/lab-network-diagram.png)。
- en: The Public Network
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 公共网络
- en: The network on the left side of [Figure 3-2](chapter3.xhtml#fig3-2) is the public
    network, where our fake internet hosting company, ACME Infinity Servers, hosts
    its customers’ websites and resources. The two company websites you’ll find in
    this network belong to ACME Impact Alliance and ACME Hyper Branding.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 3-2](chapter3.xhtml#fig3-2) 左侧的网络是公共网络，我们的虚拟互联网托管公司 ACME Infinity Servers
    在此托管其客户的网站和资源。您将在此网络中找到的两个公司网站分别属于 ACME Impact Alliance 和 ACME Hyper Branding。'
- en: The public network has an IP address Classless Inter-Domain Routing (CIDR) range
    of 172.16.10.0/24 and contains four machines (whose names are prefixed with *p-*).
    It is also public facing, meaning we’ll likely test the machines with access to
    this network before any other, as they constitute possible entry points into the
    network.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 公共网络的 IP 地址无类域间路由（CIDR）范围为 172.16.10.0/24，并包含四台机器（其名称以*p-*为前缀）。它也是面向公共的，这意味着我们可能会首先测试具有该网络访问权限的机器，因为它们可能是进入网络的入口点。
- en: The Corporate Network
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 企业网络
- en: The second network is the corporate network. ACME Infinity Servers uses this
    private network to host its supporting infrastructure on the backend. As you can
    see, the corporate network has an IP address CIDR range of 10.1.0.0/24 and contains
    four machines (whose names are prefixed with *c-*).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个网络是企业网络。ACME Infinity Servers 使用该私有网络来托管其后端支持基础设施。如您所见，企业网络的 IP 地址 CIDR 范围是
    10.1.0.0/24，并包含四台机器（其名称以*c-*为前缀）。
- en: This network is not public facing, meaning the machines in this network don’t
    have internet connectivity. Therefore, we won’t test them until we’re able to
    take over one or more of the machines on the public network, which will serve
    as our launchpad to the corporate network.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此网络不面向公众，这意味着该网络中的机器没有互联网连接。因此，在能够接管公共网络中的一台或多台机器之前，我们不会对其进行测试，这将作为我们进入企业网络的起点。
- en: Kali Network Interfaces
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kali 网络接口
- en: 'Kali has two network interfaces used to facilitate connections to both lab
    networks. We can use the *br_public* network interface to access the public network
    and the *br_corporate* network interface to access the corporate network. You
    can validate that both interfaces are online and configured to use the correct
    network address by running the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Kali 有两个网络接口，用于连接实验室的两个网络。我们可以使用 *br_public* 网络接口访问公共网络，使用 *br_corporate* 网络接口访问企业网络。您可以通过运行以下命令验证两个接口是否在线并配置为使用正确的网络地址：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Verify that the IP addresses match those shown at ❶ and ❷ before moving on.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请验证 IP 地址是否与 ❶ 和 ❷ 中显示的匹配。
- en: The Machines
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 机器
- en: The eight machines that make up the lab environment follow a simple naming convention.
    The first character of the name indicates the network that the machine belongs
    to. For example, if the machine name starts with a *p*, it belongs to the public
    network; likewise, if it starts with a *c*, it belongs to the corporate network.
    The next word describes the machine’s functions or main technology stack, such
    as *web*, *ftp*, *jumpbox*, or *redis*. Finally, a number is used to distinguish
    similar machines, such as *p-web-01* and *p-web-02*.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 实验室环境中的八台机器遵循简单的命名约定。名称的第一个字符指示了机器所属的网络。例如，如果机器名称以 *p* 开头，则属于公共网络；同样，如果以 *c*
    开头，则属于企业网络。接下来的单词描述了机器的功能或主要技术栈，如 *web*、*ftp*、*jumpbox* 或 *redis*。最后，使用数字来区分类似的机器，例如
    *p-web-01* 和 *p-web-02*。
- en: Each machine provides unique applications, services, and user accounts that
    we can learn about and break into. Later chapters describe these machines in more
    detail, but [Table 3-1](chapter3.xhtml#tab3-1) provides some high-level information
    about them.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 每台机器提供独特的应用程序、服务和用户帐户，我们可以了解和入侵。后续章节将更详细地描述这些机器，但[表格 3-1](chapter3.xhtml#tab3-1)
    提供了一些高级信息。
- en: 'Table 3-1: Lab Machine Details'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '表 3-1: 实验室机器详细信息'
- en: '| Name | Public IP | Corporate IP | Hostname |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 公共 IP | 企业 IP | 主机名 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Kali host | 172.16.10.1 | 10.1.0.1 | — |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| Kali 主机 | 172.16.10.1 | 10.1.0.1 | — |'
- en: '| p-web-01 | 172.16.10.10 | — | p-web-01.acme-infinity-servers.com |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| p-web-01 | 172.16.10.10 | — | p-web-01.acme-infinity-servers.com |'
- en: '| p-ftp-01 | 172.16.10.11 | — | p-ftp-01.acme-infinity-servers.com |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| p-ftp-01 | 172.16.10.11 | — | p-ftp-01.acme-infinity-servers.com |'
- en: '| p-web-02 | 172.16.10.12 | 10.1.0.11 | p-web-02.acme-infinity-servers.com
    |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| p-web-02 | 172.16.10.12 | 10.1.0.11 | p-web-02.acme-infinity-servers.com
    |'
- en: '| c-jumpbox-01 | 172.16.10.13 | 10.1.0.12 | c-jumpbox-01.acme-infinity-servers.com
    |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| c-jumpbox-01 | 172.16.10.13 | 10.1.0.12 | c-jumpbox-01.acme-infinity-servers.com
    |'
- en: '| c-backup-01 | — | 10.1.0.13 | c-backup-01.acme-infinity-servers.com |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| c-backup-01 | — | 10.1.0.13 | c-backup-01.acme-infinity-servers.com |'
- en: '| c-redis-01 | — | 10.1.0.14 | c-redis-01.acme-infinity-servers.com |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| c-redis-01 | — | 10.1.0.14 | c-redis-01.acme-infinity-servers.com |'
- en: '| c-db-01 | — | 10.1.0.15 | c-db-01.acme-infinity-servers.com |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| c-db-01 | — | 10.1.0.15 | c-db-01.acme-infinity-servers.com |'
- en: '| c-db-02 | — | 10.1.0.16 | c-db-02.acme-infinity-servers.com |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| c-db-02 | — | 10.1.0.16 | c-db-02.acme-infinity-servers.com |'
- en: When you perform penetration tests from Kali, keep in mind that you may sometimes
    see Kali’s own IP addresses, 172.16.10.1 and 10.1.0.1, pop up in certain tool
    results. We won’t be testing those.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当您从 Kali 执行渗透测试时，请记住有时可能会看到 Kali 自己的 IP 地址，即 172.16.10.1 和 10.1.0.1，在某些工具结果中出现。我们不会对这些地址进行测试。
- en: Managing the Lab
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理实验室
- en: Now that you’ve set up your lab and taken a close look at its components, you’ll
    learn how to tear it down, start it, and rebuild it if needed.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经设置好您的实验室并仔细查看了其组成部分，接下来将学习如何拆除它，启动它，并在需要时重新构建它。
- en: Shutting Down
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关闭
- en: 'When you’re not using the lab environment, turning it off is good practice.
    To shut down all the containers running in the lab, run the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当您不使用实验室环境时，关闭它是一个好的实践。要关闭实验室中运行的所有容器，请运行以下命令：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You should receive a list of all stopped containers, as well as the removed
    networks and volumes, as shown here:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该收到所有已停止容器的列表，以及删除的网络和卷的列表，如下所示：
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: To restart your containers, simply rerun the deploy command mentioned in “Deploying
    Docker Containers” on [page 56](#pg_56).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要重新启动你的容器，只需重新运行 “部署 Docker 容器” 中提到的部署命令，[第 56 页](#pg_56)。
- en: Removing
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移除
- en: 'To completely remove the lab environment from your Kali machine, you can run
    the clean command. This will destroy all containers and their images:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全从 Kali 机器中移除实验室环境，可以运行 clean 命令。这将销毁所有容器及其镜像：
- en: '[PRE20]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: After running the command, you should receive a confirmation that the lab environment
    has been destroyed.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 运行命令后，你应该会收到一个确认消息，表示实验室环境已被销毁。
- en: Rebuilding
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重建
- en: 'When we execute a rebuild, the lab will first shut down all running containers,
    delete volumes, and remove all container images before running a new deployment.
    To execute the rebuild, run the following command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行重建时，实验室将首先关闭所有运行中的容器，删除卷，并移除所有容器镜像，然后才会进行新的部署。要执行重建，请运行以下命令：
- en: '[PRE21]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: If you rebuild the lab, you’ll lose any data you saved inside your containers.
    Rebuilding is useful when something goes wrong during installation. Maybe, halfway
    through it, you lost your network connection, and the lab reported a failed state.
    The rebuild command allows you to wipe and install the lab environment from scratch.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你重建实验室，你将丢失所有保存在容器中的数据。重建在安装过程中出现问题时非常有用。比如，安装过程中途中失去网络连接，实验室报告出现故障状态。重建命令允许你从头开始清除并安装实验室环境。
- en: Accessing Individual Lab Machines
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问单个实验室机器
- en: As you progress through the book, you’ll compromise the machines in the lab
    environment. However, obtaining full access to a machine often takes multiple
    attempts. Sometimes you may need to troubleshoot an issue or reproduce a post-compromise
    activity, and you won’t want to repeat the steps you performed to obtain access.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你逐步深入本书，你将会攻破实验室环境中的机器。然而，获得对一台机器的完全访问权限通常需要多次尝试。有时候你可能需要排查一个问题，或者重现一次攻破后的操作，而你并不想重复获取访问权限时所执行的步骤。
- en: 'To gain shell access to any individual lab machine, you can run the following
    Docker command:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得对任何单个实验室机器的 shell 访问权限，可以运行以下 Docker 命令：
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: MACHINE-NAME represents the name of a lab machine, such as *p-web-01* or *p-jumpstation-01*
    (or any other machine from [Table 3-1](chapter3.xhtml#tab3-1) that starts with
    *p-* or *c-*). The Docker command will drop you into a bash shell, at which point
    you can execute any command you like. To exit, simply enter exit at the prompt
    or close the terminal session’s window.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: MACHINE-NAME 代表实验室机器的名称，例如 *p-web-01* 或 *p-jumpstation-01*（或 [表 3-1](chapter3.xhtml#tab3-1)
    中的任何其他以 *p-* 或 *c-* 开头的机器）。Docker 命令将让你进入 bash shell，在这里你可以执行任何你想要的命令。要退出，只需在提示符下输入
    exit 或关闭终端会话窗口。
- en: We highly recommend you compromise the machines as intended before taking these
    convenient shortcuts, however.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们强烈建议你在采取这些方便的快捷方式之前，按照预期攻破机器。
- en: Installing Additional Hacking Tools
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装额外的黑客工具
- en: 'Most of the tools we’ll use in this book come preinstalled in Kali, and we’ll
    introduce them upon first use. However, we’ll need several tools that aren’t installed
    by default, so let’s install them here. First, create a new directory for your
    tools:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中大多数工具都已预先安装在 Kali 中，我们会在首次使用时介绍它们。不过，我们需要安装一些默认未安装的工具，所以我们在这里进行安装。首先，为你的工具创建一个新目录：
- en: '[PRE23]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now use the instructions in the following sections to install each tool.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用以下章节中的指令来安装每个工具。
- en: WhatWeb
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: WhatWeb
- en: '*WhatWeb*, developed by Andrew Horton and Brendan Coles, is a Ruby-based web
    scanner. Using a plug-in-based system, it’s designed to identify the software
    running a target website.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '*WhatWeb* 是由 Andrew Horton 和 Brendan Coles 开发的基于 Ruby 的 Web 扫描器。它采用插件系统，旨在识别目标网站上运行的软件。'
- en: WhatWeb can fingerprint websites and their application stack by using its database
    of known application signatures. WhatWeb can also identify particular content
    management systems and blogging platforms (such as WordPress), web cameras, web
    application firewalls, and more. As of this writing, WhatWeb has over 1,800 plug-ins.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: WhatWeb 可以通过使用其已知应用程序签名数据库，对网站及其应用程序栈进行指纹识别。WhatWeb 还可以识别特定的内容管理系统和博客平台（如 WordPress）、网络摄像头、Web
    应用防火墙等。截至目前，WhatWeb 拥有超过 1800 个插件。
- en: 'To install WhatWeb, simply run the following command in the terminal:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 WhatWeb，只需在终端中运行以下命令：
- en: '[PRE24]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Verify that WhatWeb can operate successfully by running the whatweb command
    with the -h (help) argument:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 -h（帮助）参数运行 whatweb 命令，验证 WhatWeb 是否能够正常运行：
- en: '[PRE25]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We’ll use WhatWeb later in the book when we perform reconnaissance activities.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书后面，我们将使用WhatWeb进行侦察活动。
- en: RustScan
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RustScan
- en: '*RustScan* is a lightning-fast port scanner written in the Rust programming
    language by Autumn (Bee) Skerritt (@bee_sec_san). Some claim that RustScan can
    scan all 65,000 ports on a target in seconds!'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '*RustScan* 是一个由秋天（Bee）Skerritt（@bee_sec_san）编写的超快端口扫描器，使用Rust编程语言编写。有些人声称，RustScan可以在几秒钟内扫描目标的所有65,000个端口！'
- en: 'We’ll use RustScan’s Docker version. To do this, we first need to pull its
    image onto the Kali machine:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用RustScan的Docker版本。为此，我们首先需要将其镜像拉取到Kali机器上：
- en: '[PRE26]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Once you’ve built RustScan, run a quick test to ensure that it’s working properly:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你构建了RustScan，运行一个快速测试来确保它正常工作：
- en: '[PRE27]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This command is quite long, as it relies on using Docker to start a dedicated
    RustScan container. In “Assigning Aliases to Hacking Tools” on [page 66](#pg_66),
    we’ll create a shortcut command that will run RustScan for us.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令相当长，因为它依赖于使用Docker启动一个专门的RustScan容器。在“为黑客工具分配别名”一节中，[第66页](#pg_66)，我们将创建一个快捷命令来为我们运行RustScan。
- en: We will use RustScan for port scanning purposes in later chapters.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后续章节中使用RustScan进行端口扫描。
- en: Nuclei
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Nuclei
- en: '*Nuclei* is a vulnerability scanner written in the Go programming language
    by ProjectDiscovery, a company that builds popular open source hacking tools.
    Nuclei works by sending requests to targets defined by a YAML template file. The
    hacking community has published thousands of Nuclei templates supporting several
    protocols, including Transmission Control Protocol (TCP), Domain Name System (DNS),
    HTTP, raw sockets, file, headless, and more. You can find these templates at *[https://github.com/projectdiscovery/nuclei-templates](https://github.com/projectdiscovery/nuclei-templates)*.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '*Nuclei* 是一个由ProjectDiscovery公司编写的用Go编程语言编写的漏洞扫描器，ProjectDiscovery是一个开发流行开源黑客工具的公司。Nuclei通过发送请求到由YAML模板文件定义的目标来工作。黑客社区发布了数千个支持多种协议的Nuclei模板，包括传输控制协议（TCP）、域名系统（DNS）、HTTP、原始套接字、文件、无头等。你可以在*[https://github.com/projectdiscovery/nuclei-templates](https://github.com/projectdiscovery/nuclei-templates)*找到这些模板。'
- en: 'Install Nuclei by running the following installation command:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下安装命令来安装Nuclei：
- en: '[PRE28]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To verify that Nuclei is correctly installed, run a help command:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证Nuclei是否正确安装，运行帮助命令：
- en: '[PRE29]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The first time you run Nuclei, it automatically creates a *nuclei-templates*
    directory in the user’s home folder and downloads all the publicly available Nuclei
    templates.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次运行Nuclei时，它会自动在用户的主文件夹中创建一个*nuclei-templates*目录，并下载所有公开可用的Nuclei模板。
- en: We will use Nuclei to find vulnerabilities in the lab, as well as for writing
    custom vulnerability checks.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Nuclei在实验室中查找漏洞，并编写自定义漏洞检查。
- en: dirsearch
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: dirsearch
- en: '*dirsearch* is a multithreaded tool used to find common paths on web servers.
    dirsearch is available in Kali’s software repositories, so to install it, run
    the following command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '*dirsearch* 是一个多线程工具，用于查找Web服务器上的常见路径。dirsearch可在Kali的软件下载库中找到，因此要安装它，请运行以下命令：'
- en: '[PRE30]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To verify that dirsearch is correctly installed, run a help command:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证dirsearch是否正确安装，运行帮助命令：
- en: '[PRE31]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We will use dirsearch for information-gathering purposes in later chapters.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后续章节中使用dirsearch进行信息收集。
- en: Linux Exploit Suggester 2
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linux Exploit Suggester 2
- en: The *Linux Exploit Suggester 2* is a next-generation tool based on the original
    Linux Exploit Suggester. Written in Perl and developed by Jonathan Donas, it includes
    several exploits you can use to potentially compromise vulnerable Linux kernel
    versions.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '*Linux Exploit Suggester 2* 是一个基于原始Linux Exploit Suggester的下一代工具。由Jonathan
    Donas编写，使用Perl语言开发，包含了多个漏洞，您可以利用它们来潜在地攻破易受攻击的Linux内核版本。'
- en: 'To install it, first clone the repository to your *tools* directory:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装它，首先将仓库克隆到你的*tools*目录：
- en: '[PRE32]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To verify that Linux Exploit Suggester 2 is installed correctly, run a help
    command:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证Linux Exploit Suggester 2是否正确安装，运行帮助命令：
- en: '[PRE33]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: We will use Linux Exploiter Suggester 2 to enumerate kernel exploits later in
    the book.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书后面使用Linux Exploiter Suggester 2来枚举内核漏洞。
- en: Gitjacker
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Gitjacker
- en: '*Gitjacker* is a data-extraction tool that targets web applications whose *.git*
    directory has been mistakenly uploaded. Before you can install Gitjacker, you’ll
    first need to install jq, a command line JSON processor:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '*Gitjacker* 是一个数据提取工具，专门针对那些不小心上传了*.git*目录的Web应用程序。在安装Gitjacker之前，你需要先安装jq，这是一个命令行JSON处理工具：'
- en: '[PRE34]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Next, download the Gitjacker install script and move the executable to the
    tools directory:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，下载Gitjacker安装脚本，并将可执行文件移动到工具目录：
- en: '[PRE35]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Finally, verify that Gitjacker is working properly by running the following
    help command:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过运行以下帮助命令验证Gitjacker是否正常工作：
- en: '[PRE36]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We will use Gitjacker to identify misconfigured Git repositories later in the
    book.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书后面使用Gitjacker来识别配置错误的Git存储库。
- en: pwncat
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pwncat
- en: '*pwncat* is a Python-based command-and-control library for capturing and interacting
    with remote shells, developed by Caleb Stewart and John Hammond. Once pwncat receives
    a shell connection from a remote compromised host, it acts as an exploitation
    platform from which commands can be sent and attacks can be launched.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '*pwncat*是由Caleb Stewart和John Hammond开发的基于Python的命令与控制库，用于捕获和与远程shell进行交互。一旦pwncat从远程受损主机接收到一个shell连接，它将作为一个利用平台，用于发送命令和发起攻击。'
- en: 'To install pwncat, run this command:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装pwncat，请运行此命令：
- en: '[PRE37]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To verify that the library was installed correctly, use the following:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证库是否已正确安装，请使用以下命令：
- en: '[PRE38]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We will use pwncat for penetration-testing purposes later in the book. In some
    cases, pwncat-cs may be found under *~/.local/bin* and can be called directly
    by its full path: *~/.local/bin/pwncat-cs*.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书后面使用pwncat进行渗透测试。在某些情况下，pwncat-cs可能会在*~/.local/bin*下找到，并且可以通过其完整路径直接调用：*~/.local/bin/pwncat-cs*。
- en: LinEnum
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: LinEnum
- en: '*LinEnum* is a bash script written by Owen Shearing for enumerating local information
    on a Linux host. We can use wget to grab the script from its GitHub repository:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '*LinEnum*是Owen Shearing编写的用于枚举Linux主机上本地信息的bash脚本。我们可以使用wget从其GitHub存储库获取该脚本：'
- en: '[PRE39]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'To verify that the script is working correctly, make it executable and run
    the following help command:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证脚本是否正常工作，请使其可执行并运行以下帮助命令：
- en: '[PRE40]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: We will use LinEnum to enumerate systems for misconfigurations later in the
    book.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书后面使用LinEnum来枚举系统的配置错误。
- en: unix-privesc-check
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: unix-privesc-check
- en: The *unix-privesc-check* shell script, written by pentestmonkey, collects information
    from a host in an attempt to find misconfigurations and ways to escalate privileges.
    The script is written to support many flavors of Linux and Unix systems and does
    not require any dependencies, which makes it convenient to run.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '*unix-privesc-check*脚本由pentestmonkey编写，用于从主机收集信息，以寻找配置错误和提升特权的方法。该脚本编写以支持许多Linux和Unix系统的变种，并且不需要任何依赖项，这使得运行起来非常方便。'
- en: 'By default, the script comes bundled with Kali, and you should find it in */usr/bin/unix-privesc-check*:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，该脚本与Kali捆绑在一起，您应该在*/usr/bin/unix-privesc-check*找到它：
- en: '[PRE41]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Optionally, you can create a copy of it in the *tools* directory for easier
    access, should you need to copy it later to any of the lab’s machines:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，您可以在*tools*目录中创建其副本，以便在需要时将其复制到实验室的任何计算机上：
- en: '[PRE42]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'If the script isn’t available on your Kali machine, you can download it directly
    from APT:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果该脚本在您的Kali机器上不可用，您可以直接从APT下载：
- en: '[PRE43]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Verify that you can run it successfully with the following command:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令验证您能够成功运行它：
- en: '[PRE44]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: We will use *unix-privesc-check* to identify privilege escalation opportunities
    later in the book.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用*unix-privesc-check*在本书后面识别权限提升机会。
- en: Assigning Aliases to Hacking Tools
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分配别名给黑客工具
- en: Tools that are installed through third-party repositories such as GitHub sometimes
    won’t have setup files that make running them easier. We can assign these tools
    bash aliases as shorthand references so that we won’t need to enter the full directory
    path every time we run them.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 通过第三方存储库（如GitHub）安装的工具有时不会有设置文件，使得运行它们变得更加容易。我们可以为这些工具分配bash别名作为简写引用，这样每次运行它们时就不需要输入完整的目录路径了。
- en: 'Assign custom aliases by using the following commands. These commands will
    be written to your *~/.bashrc* file, which will execute when you open a new terminal
    session:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下命令分配自定义别名。这些命令将被写入您的*~/.bashrc*文件，在您打开新终端会话时执行：
- en: '[PRE45]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: RustScan and Gitjacker now have aliases.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: RustScan和Gitjacker现在都有别名。
- en: At this point, you should have a fully functioning bash hacking lab. Now would
    be a good time to take a snapshot of your Kali virtual machine so you can restore
    it to this clean state. Taking snapshots regularly is a good idea, especially
    whenever you make significant configuration changes or deploy new tools to your
    virtual lab.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该拥有一个完全功能的bash黑客实验室。现在是将您的Kali虚拟机拍摄快照的好时机，这样您可以将其恢复到这个干净状态。定期拍摄快照是个好主意，特别是每当您进行重要配置更改或向您的虚拟实验室部署新工具时。
- en: Summary
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, you built your hacking lab, which consists of a dedicated Kali
    virtual machine running several intentionally vulnerable Docker containers and
    hacking utilities. We also discussed managing your lab environment by tearing
    it down, cleaning it up, and rebuilding it.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你搭建了你的黑客实验室，该实验室由一个专用的 Kali 虚拟机组成，运行多个故意存在漏洞的 Docker 容器和黑客工具。我们还讨论了如何通过拆除、清理和重建实验室环境来管理它。
- en: We’ll use this lab in all hands-on exercises moving forward. If you encounter
    problems, we encourage you to keep an eye on the book’s GitHub repository (*[https://github.com/dolevf/Black-Hat-Bash](https://github.com/dolevf/Black-Hat-Bash)*),
    where we maintain the source code responsible for keeping your lab up to date.
    In the next chapter, you’ll use these tools to perform reconnaissance and gather
    information about remote targets.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在所有动手练习中使用这个实验室。如果你遇到问题，我们建议你关注本书的 GitHub 仓库 (*[https://github.com/dolevf/Black-Hat-Bash](https://github.com/dolevf/Black-Hat-Bash)*)，我们在这里维护着更新实验室所需的源代码。在下一章中，你将使用这些工具进行侦察并收集有关远程目标的信息。
