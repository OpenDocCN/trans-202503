- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: I²C Variants
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: I²C 变种
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: This chapter briefly describes several variants of the I²C bus, including the
    System Management Bus (SMBus), VESA DDC and E-DDC, ACCESS.bus, and two-wire interface.
    For the most part, these variants apply a protocol on top of the physical two-wire
    interface of the I²C bus, defining messages and other data flowing across the
    bus.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章简要介绍了几种 I²C 总线的变种，包括系统管理总线（SMBus）、VESA DDC 和 E-DDC、ACCESS.bus 和两线接口。这些变种大多数是在
    I²C 总线的物理两线接口之上应用协议，定义了流经总线的消息和其他数据。
- en: Going into detail on such protocol extensions is generally beyond the scope
    of this book. Nevertheless, this chapter gives an overview of those protocols
    (and information for other specific bus variants) and explains where you can find
    more information about these variants. We begin with the SMBus protocol, which
    deserves the most in-depth discussion, since it is widely used in computer systems.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 详细讲解这些协议扩展通常超出了本书的范围。然而，本章提供了这些协议（以及其他特定总线变种）概述，并说明了你可以在哪里找到更多关于这些变种的信息。我们首先讨论
    SMBus 协议，因为它广泛应用于计算机系统，值得深入讨论。
- en: 5.1 SMBus
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.1 SMBus
- en: The *SMBus* was originally developed by Intel and Duracell as a means for managing
    battery power in computer-based systems. SMBus v1.0 and v1.1 dealt with low-power
    devices such as battery power management systems, while SMBus v2.0 added high-power
    devices to the specification.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*SMBus* 最初由英特尔和杜拉塞尔共同开发，旨在管理计算机系统中的电池电力。SMBus v1.0 和 v1.1 处理低功耗设备，如电池电力管理系统，而
    SMBus v2.0 则将高功耗设备添加到规范中。'
- en: It might seem unnecessary to devote a whole section to the SMBus implementation
    of the I²C bus, since there are few SMBus peripherals and most embedded software
    designers don’t spend much time on battery management, the SMBus’s main use. However,
    Linux I²C support, including the Raspberry Pi, provides API functions based on
    the SMBus protocol. For that reason alone, this slightly more-than-brief coverage
    of the SMBus is worthwhile. Furthermore, of all the I²C extensions and variants,
    the SMBus is by far the most common.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 可能看起来不需要专门为 I²C 总线的 SMBus 实现单独设立一节内容，因为支持 SMBus 的外设很少，而且大多数嵌入式软件设计师不会花太多时间在电池管理上，SMBus
    的主要用途就是电池管理。然而，Linux 的 I²C 支持，包括树莓派，提供了基于 SMBus 协议的 API 函数。仅仅因为这一点，这一稍多于简要的 SMBus
    介绍是值得的。此外，在所有 I²C 扩展和变种中，SMBus 绝对是最常见的。
- en: Most of the few peripheral ICs that support the SMBus protocol will behave like
    standard I²C peripherals if you ignore the information in this chapter and simply
    program them according to their datasheets. Many devices support some aspects
    of the SMBus protocol even though they do not support the full protocol. Many
    of the MCP23017 GPIO expander’s command sequences, for example, follow the SMBus
    protocol in this chapter (see Chapter 13). Therefore, having an understanding
    of the SMBus can help you with many peripherals out there, even if they don’t
    fully support the SMBus specification.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数支持 SMBus 协议的外设 IC，如果忽略本章中的信息，按照数据手册编程，它们的行为与标准 I²C 外设相同。许多设备虽然不支持完整的协议，但仍然支持
    SMBus 协议的某些方面。例如，MCP23017 GPIO 扩展器的许多命令序列遵循本章中的 SMBus 协议（见第 13 章）。因此，即使某些外设并未完全支持
    SMBus 规范，理解 SMBus 也有助于你处理许多外设。
- en: 5.1.1 Differences Between SMBus and Standard I²C
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.1.1 SMBus 与标准 I²C 的区别
- en: 'Though it’s based on the I²C bus, the SMBus places some additional requirements
    on the I²C signals:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 SMBus 基于 I²C 总线，但它对 I²C 信号提出了一些额外的要求：
- en: The clock—SMBCLK, the SMBus name for SCL—must be between 10 kHz and 100 kHz.
    In particular, note that SMBus does not support arbitrary clock stretching (below
    10 kHz). Later versions of the SMBus specification also support 400-kHz and 1-MHz
    signals.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时钟——SMBCLK，即 SMBus 对 SCL 的命名——必须在 10 kHz 到 100 kHz 之间。特别需要注意的是，SMBus 不支持任意的时钟拉伸（低于
    10 kHz）。SMBus 规范的后续版本还支持 400 kHz 和 1 MHz 的信号。
- en: SMBus v3.0 supports signal voltages in the range of 1.8 V to 5 V. Also, SMBus
    explicitly states that a logic 0 is less than 0.8 V and a logic 1 is greater than
    1.35 V.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SMBus v3.0 支持的信号电压范围是 1.8 V 到 5 V。此外，SMBus 明确指出，逻辑 0 小于 0.8 V，逻辑 1 大于 1.35 V。
- en: SMBus specifies a clock low timeout of 35 msec (about 15 Hz, assuming a 50 percent
    duty cycle). The I²C standard specifies no such timeout.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SMBus 规范规定了 35 毫秒的时钟低电平超时（大约 15 Hz，假设占空比为 50%）。而 I²C 标准没有此类超时要求。
- en: SMBus specifies both rise and fall times for bus signals; the I²C standard provides
    no such specifications (other than bus capacitance, which affects rise and fall
    times).
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SMBus 为总线信号规定了上升时间和下降时间；I²C 标准没有提供这样的规格（除了总线电容，它会影响上升时间和下降时间）。
- en: NAK behavior is different between I²C and SMBus.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NAK 行为在 I²C 和 SMBus 之间有所不同。
- en: SMBus devices must always acknowledge the receipt of their address on the I²C
    bus; standard I²C protocol doesn’t require this (for example, if the device is
    busy doing something else).
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SMBus 设备必须始终确认在 I²C 总线上接收到它们的地址；标准 I²C 协议不要求这样做（例如，如果设备正在忙于执行其他操作）。
- en: 'The SMBus supports three types of devices on the bus: controllers, peripherals,
    and a single, special version of a controller known as the *host*.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SMBus 支持总线上三种类型的设备：控制器、外设，以及一种特殊版本的控制器，称为 *主机*。
- en: All devices on the SMBus must have a unique ID associated with them.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有 SMBus 设备必须具有与之关联的唯一 ID。
- en: SMBus v2.0 introduced the concept of a dynamically assigned device address.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SMBus v2.0 引入了动态分配设备地址的概念。
- en: SMBus supports optional hardware signals, SMBAlert and SMBSuspend, that can
    create interrupts or suspend operations for low-power operation.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SMBus 支持可选的硬件信号 SMBAlert 和 SMBSuspend，这些信号可以生成中断或挂起操作以实现低功耗操作。
- en: The SMBus also reserves certain device addresses for purposes such as prototype
    devices, far beyond the number that the I²C bus reserves for special use. The
    SMBus also supports dynamically specified device addresses, allowing devices to
    choose their addresses during operation.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: SMBus 还为诸如原型设备等目的保留了某些设备地址，远远超过 I²C 总线为特殊用途保留的地址数量。SMBus 还支持动态指定的设备地址，允许设备在操作过程中选择其地址。
- en: On top of the hardware differences, the SMBus specification calls out several
    protocol changes, including features for transferring blocks of data, bus-specific
    commands, and device enumeration. The SMBus specification provides more details
    (link provided in “For More Information” at the end of this chapter).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 除了硬件差异之外，SMBus 规范还指出了几项协议变更，包括用于传输数据块、总线特定命令和设备枚举的功能。SMBus 规范提供了更多的细节（更多信息请参见本章末尾的“更多信息”链接）。
- en: 5.1.2 SMBus Electrical Specifications
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.1.2 SMBus 电气规格
- en: As noted previously, the SMBus SMBCLK signal must operate between 10 kHz and
    maximum bus speed (100 kHz, 400 kHz, or 1 MHz). In reality, most modern SMBus
    implementations operate at 50 kHz or faster. NXP’s documentation (see the SMBus
    quick start guide in “For More Information”) states that a system must not reduce
    the clock frequency to the minimum speed even in response to clock stretching
    on the part of peripheral devices. In addition, SMBus devices must be ready to
    operate within 500 msec after power is applied.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，SMBus 的 SMBCLK 信号必须在 10 kHz 至最大总线速度（100 kHz、400 kHz 或 1 MHz）之间工作。实际上，大多数现代
    SMBus 实现运行在 50 kHz 或更快的速度。NXP 的文档（见“更多信息”中的 SMBus 快速入门指南）指出，系统不得因外设设备的时钟拉伸而将时钟频率降低至最小速度。此外，SMBus
    设备必须在加电后的 500 毫秒内准备好工作。
- en: The SMBus has better electrical specifications than the standard I²C bus. It
    defines a logic 0 on the clock or data lines as 0.8 V or less and a logic 1 as
    1.35 V or greater.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: SMBus 的电气规格优于标准 I²C 总线。它将时钟或数据线上的逻辑 0 定义为 0.8 V 或更低，将逻辑 1 定义为 1.35 V 或更高。
- en: 5.1.3 SMBus Reserved Addresses
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.1.3 SMBus 保留地址
- en: The SMBus reserves several addresses above and beyond the I²C reserved addresses
    (see section 2.5, “Special Addresses,” in Chapter 2). In addition to these addresses,
    the SMBus reserves 7-bit addresses 0x08 for SMBus host devices, 0x0C for SMBus
    alert responses, and 0x61 for the SMBus device default address. The SMBus specification
    also reserves certain device address for specific purposes, as described in [Table
    5-1](#table5-1).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: SMBus 保留了 I²C 保留地址之上的几个地址（见第 2 章 2.5 节，“特殊地址”）。除了这些地址外，SMBus 还保留了 7 位地址 0x08
    用于 SMBus 主机设备，0x0C 用于 SMBus 警报响应，以及 0x61 用于 SMBus 设备默认地址。SMBus 规范还为特定用途保留了某些设备地址，如[表
    5-1](#table5-1)所示。
- en: 'Table 5-1: Reserved SMBus Device Addresses'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 表 5-1：保留的 SMBus 设备地址
- en: '| Address bits | Description |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 地址位 | 描述 |'
- en: '| --- | --- |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 0001-000 | SMBus host |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 0001-000 | SMBus 主机 |'
- en: '| 0001-001 | Smart battery charger |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 0001-001 | 智能电池充电器 |'
- en: '| 0001-010 | Smart battery selector or smart battery system manager |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 0001-010 | 智能电池选择器或智能电池系统管理器 |'
- en: '| Address bits | Description |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 地址位 | 描述 |'
- en: '| 0001-011 | Smart battery |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 0001-011 | 智能电池 |'
- en: '| 0001-100 | SMBus alert response |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 0001-100 | SMBus 警报响应 |'
- en: '| 0101-000 | ACCESS.bus host |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 0101-000 | ACCESS.bus 主机 |'
- en: '| 0101-100 | Originally reserved for LCD contrast controllers (may be reassigned
    in future versions of the SMBus) |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 0101-100 | 最初为 LCD 对比度控制器保留（可能在 SMBus 的未来版本中重新分配） |'
- en: '| 0101-101 | Originally reserved for CCFL backlight controllers (may be reassigned
    in future versions of the SMBus) |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 0101-101 | 最初为 CCFL 背光控制器保留（可能在 SMBus 的未来版本中重新分配） |'
- en: '| 0110-111 | ACCESS.bus default address |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 0110-111 | ACCESS.bus 默认地址 |'
- en: '| 1000-0xx | Originally reserved for PCMCIA socket controllers (may be reassigned
    in future versions of the SMBus) |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 1000-0xx | 最初为 PCMCIA 插座控制器保留（可能在 SMBus 的未来版本中重新分配） |'
- en: '| 1000-100 | Originally reserved for VGA graphics controllers (may be reassigned
    in future versions of the SMBus) |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 1000-100 | 最初为 VGA 图形控制器保留（可能在 SMBus 的未来版本中重新分配） |'
- en: '| 1001-0xx | Unrestricted addresses |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 1001-0xx | 无限制地址 |'
- en: '| 1100-001 | SMBus device default address |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 1100-001 | SMBus 设备默认地址 |'
- en: Please consult the SMBus documentation to see if there are any additions to
    this list. Later versions of the SMBus standard may add device addresses to this
    list.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 SMBus 文档查看此列表是否有任何新增项。SMBus 标准的后续版本可能会将设备地址添加到此列表中。
- en: 5.1.4 SMBus Protocol Commands
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.1.4 SMBus 协议命令
- en: The standard I²C bus protocol specifies only the address byte, and R/W bit,
    format. It does not define any further data appearing on the bus. In contrast,
    the SMBus protocol defines several different command formats including Quick Command,
    Send Byte, Receive Byte, Write Byte, Write Word, Read Byte, Read Word, Process
    Call, Block Read, and Block Write.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 标准 I²C 总线协议只定义了地址字节和 R/W 位格式。它没有定义总线上出现的任何进一步数据。相比之下，SMBus 协议定义了几种不同的命令格式，包括快速命令、发送字节、接收字节、写字节、写字、读字节、读字、处理调用、块读取和块写入。
- en: SMBus devices do not have to implement all the SMBus protocol commands—only
    those that are relevant to the particular device. If a device supports the Quick
    Command, it likely supports only that command. Similarly, if the device supports
    the Read Byte command and the Send Byte command, it likely supports only those
    two commands. The remaining SMBus protocol commands include an extra *command
    byte*; this byte can specify the particular command protocol to use. The following
    subsections define each of these command types.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: SMBus 设备不必实现所有 SMBus 协议命令—只需要实现与特定设备相关的命令。如果设备支持快速命令，它可能只支持该命令。类似地，如果设备支持读字节命令和发送字节命令，它可能只支持这两个命令。其余的
    SMBus 协议命令包括一个额外的*命令字节*；该字节可以指定要使用的特定命令协议。以下子节定义了每种命令类型。
- en: 5.1.4.1 SMBus Quick Commands
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 5.1.4.1 SMBus 快速命令
- en: SMBus Quick Commands are simple 1-bit commands built into the R/W bit of the
    address byte (see [Figure 5-1](#figure5-1)). The Quick Commands transmit a single
    bit to the peripheral device that can be used to turn the device on or off or
    perform some other operation based on a single bit of binary data.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: SMBus 快速命令是内建于地址字节的 R/W 位中的简单1位命令（参见[图 5-1](#figure5-1)）。快速命令将一个单个位传输到外设，外设可以基于这一位的二进制数据来开启或关闭设备，或执行其他操作。
- en: '![](image_fi/502468c05/f05002.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c05/f05002.png)'
- en: 'Figure 5-1: Quick Command format'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-1：快速命令格式
- en: There is no additional data beyond the address byte sent to the device with
    a Quick Command.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 快速命令中除了地址字节外，不会向设备发送额外的数据。
- en: 5.1.4.2 SMBus Send Byte and Read Byte Commands
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 5.1.4.2 SMBus 发送字节和读字节命令
- en: The SMBus Send Byte and Read Byte commands include 1 byte of data after the
    address byte. The R/W bit of the address byte specifies the particular command
    (read or write; see [Figure 5-2](#figure5-2)).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: SMBus 发送字节和读字节命令在地址字节后包含1字节数据。地址字节的 R/W 位指定特定的命令（读或写；参见[图 5-2](#figure5-2)）。
- en: '![](image_fi/502468c05/f05001.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c05/f05001.png)'
- en: 'Figure 5-2: Send or Read Byte command format'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-2：发送或读取字节命令格式
- en: With a Send Byte command, the host/controller device transmits the second byte
    to the peripheral; with the Read Byte command, the peripheral places the data
    on the SMBDAT (SDA) line to be read by the host/controller device.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在发送字节命令中，主机/控制器设备将第二个字节传输到外设；在读字节命令中，外设将数据放置在 SMBDAT（SDA）线上供主机/控制器设备读取。
- en: 5.1.4.3 SMBus Read Byte and Read Word Commands
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 5.1.4.3 SMBus 读字节和读字命令
- en: The SMBus Read Byte command allows you to read a single byte of data from a
    peripheral device with no way to specify what byte data you’re reading. That command
    is useful for simple devices that return a single byte value, such as reading
    a single set of eight digital I/O pins. The SMBus Read Byte and Word commands,
    on the other hand, include a special command byte that allows you to specify parameter
    information to select the particular byte you want to read. This could be, for
    example, a register or memory address or other selection or control information.
    The sequence for a Read Byte command appears in [Figure 5-3](#figure5-3).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: SMBus 读取字节命令允许你从外设设备中读取单个字节的数据，但无法指定你正在读取的字节数据。这个命令对于返回单个字节值的简单设备很有用，比如读取一组
    8 位数字 I/O 引脚。另一方面，SMBus 读取字节和读取字命令包括一个特殊的命令字节，允许你指定参数信息，从而选择你想要读取的特定字节。这可能是一个寄存器或内存地址，或者其他选择或控制信息。读取字节命令的序列见[图
    5-3](#figure5-3)。
- en: '![](image_fi/502468c05/f05003.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c05/f05003.png)'
- en: 'Figure 5-3: Read Byte command format'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-3：读取字节命令格式
- en: The sequence for a Read Word command appears in [Figure 5-4](#figure5-4).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 读取字命令的序列见[图 5-4](#figure5-4)。
- en: '![](image_fi/502468c05/f05004.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c05/f05004.png)'
- en: 'Figure 5-4: Read Word command format'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-4：读取字命令格式
- en: Because the controller must first write the command byte to the peripheral device,
    the Read Byte and Read Word commands begin with a write operation (bit 0 of the
    address byte contains a 0). Then the sequence must include a restart operation
    followed by a second address byte with bit 0 containing a 1 (for read). Then the
    controller reads the next byte or word (depending on the command) from the peripheral
    device.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于控制器必须首先将命令字节写入外设设备，读取字节和读取字命令以写操作开始（地址字节的第 0 位为 0）。接着，序列必须包含一个重启操作，之后是第二个地址字节，其中第
    0 位为 1（表示读取）。然后，控制器从外设设备中读取下一个字节或字（取决于命令）。
- en: Not all devices support both Read Byte and Read Word commands. The peripheral
    device’s design determines whether the controller can read a single byte, a word,
    or both. If the device supports reading both bytes and words using this command,
    then the controller must somehow specify whether it wants to read a byte or a
    word from the device, typically using a bit within the command byte.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有设备都支持读取字节和读取字命令。外设设备的设计决定了控制器是否可以读取单个字节、一个字，或两者都可以。如果设备支持使用此命令读取字节和字，那么控制器必须以某种方式指定是否要从设备中读取字节或字，通常是通过命令字节中的某个位来实现。
- en: 5.1.4.4 SMBus Write Byte and Write Word Commands
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 5.1.4.4 SMBus 写字节和写字命令
- en: The SMBus Write Byte and Write Word commands also include a command byte that
    allows you to specify parameter information to select the particular byte or word
    you want to write to the peripheral. This could be a register or memory address
    or other selection or control information. The sequence for a Write Byte command
    appears in [Figure 5-5](#figure5-5).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: SMBus 写字节和写字命令也包括一个命令字节，允许你指定参数信息，从而选择你想要写入外设的特定字节或字。这可能是一个寄存器或内存地址，或者其他选择或控制信息。写字节命令的序列见[图
    5-5](#figure5-5)。
- en: '![](image_fi/502468c05/f05005.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c05/f05005.png)'
- en: 'Figure 5-5: Write Byte command format'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-5：写入字节命令格式
- en: The sequence for a Write Word command appears in [Figure 5-6](#figure5-6).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 写入字命令的序列见[图 5-6](#figure5-6)。
- en: '![](image_fi/502468c05/f05006.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c05/f05006.png)'
- en: 'Figure 5-6: Write Word command format'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-6：写入字命令格式
- en: Because the controller is strictly writing to the peripheral device, there is
    no need for the restart command and the extra address-R/W byte in these sequences.
    As for the Read Byte and Read Word commands, the device’s design determines whether
    it supports the Write Byte, Write Word, or both commands. If the device supports
    both byte and word writes, then presumably the controller must somehow specify
    the size to write within the command byte.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 因为控制器严格地向外设设备写入数据，所以这些序列中不需要重启命令和额外的地址读/写字节。至于读取字节和读取字命令，设备的设计决定了是否支持写字节、写字或两者都支持。如果设备支持字节和字的写操作，那么控制器必须以某种方式在命令字节中指定写入的大小。
- en: 5.1.4.5 SMBus Block Read Command
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 5.1.4.5 SMBus 块读取命令
- en: Although most SMBus transactions involve reading or writing a single byte or
    word, a few devices support larger data transfers. The SMBus Block Read command
    handles reading blocks of data. As for the Read Byte and Read Word command, the
    controller transmits an address byte (with the LO bit equal to 0 to denote a write
    operation) followed by a command byte. Then the controller sends a repeated start
    operation followed by an address byte with the LO bit equal to 1 (to denote a
    read). The peripheral responds by sending a byte containing the byte count followed
    by that many data bytes, as shown in [Figure 5-7](#figure5-7).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大多数 SMBus 事务涉及读取或写入单个字节或字，但少数设备支持更大的数据传输。SMBus 块读命令处理数据块的读取。与读字节和读字命令一样，控制器会先传输一个地址字节（LO
    位为 0，表示写操作），接着是一个命令字节。然后，控制器会发送一个重复启动操作，后跟一个地址字节，LO 位为 1（表示读取）。外围设备响应并发送一个字节，包含字节计数值，接着发送相应数量的数据字节，如[图
    5-7](#figure5-7)所示。
- en: The peripheral specifies how many bytes it is returning in the byte count value.
    In theory, it is possible for the controller to specify how many bytes it wants
    to read by providing this count as part of the command byte field. However, the
    peripheral’s design determines who specifies the number of bytes returned; it
    could be a fixed value or a programmed value.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 外围设备通过字节计数值来指定它返回多少字节。理论上，控制器可以通过在命令字节字段中提供字节计数来指定它想要读取的字节数。然而，外围设备的设计决定了由谁来指定返回的字节数；这个值可能是固定的，也可能是编程的值。
- en: '![](image_fi/502468c05/f05007.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c05/f05007.png)'
- en: 'Figure 5-7: Block Read sequence'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-7：块读序列
- en: 5.1.4.6 SMBus Block Write Command
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 5.1.4.6 SMBus 块写命令
- en: Of course, the SMBus provides a Block Write complement to the Block Read command.
    The command is a bit simpler than the Block Read command, as you don’t have to
    reverse the data direction after sending the command byte. [Figure 5-8](#figure5-8)
    provides the write sequence.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，SMBus 提供了一个与块读命令互补的块写命令。这个命令比块读命令更简单，因为在发送命令字节后，不需要反转数据方向。[图 5-8](#figure5-8)提供了写操作的顺序。
- en: '![](image_fi/502468c05/f05008.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c05/f05008.png)'
- en: 'Figure 5-8: Block Write sequence'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-8：块写序列
- en: Because there is no need to resend the device address with a new R/W bit, this
    sequence is shorter (and more efficient) than the Block Read command operation.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 因为不需要重新发送设备地址并改变 R/W 位，这个序列比块读命令操作更短（也更高效）。
- en: 5.2 VESA DDC and E-DDC
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.2 VESA DDC 和 E-DDC
- en: The VESA DDC (obsolete) and E-DDC (modern) interfaces allow communication between
    a host (computer) system and a display monitor (the VESA device). The DDC/E-DDC
    (hereafter E-DDC) is a two-wire communication bus built on the I²C bus. The E-DDC
    protocol allows the host system to determine monitor information, set display
    parameters such as brightness, and perform other operations.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: VESA DDC（过时）和 E-DDC（现代）接口允许主机（计算机）系统与显示器（VESA 设备）之间进行通信。DDC/E-DDC（以下简称 E-DDC）是一种基于
    I²C 总线的两线通信总线。E-DDC 协议允许主机系统获取显示器信息、设置显示参数（如亮度），并执行其他操作。
- en: Displays that are compatible with VESA E-DDC look like I²C peripherals on the
    I²C bus. In particular, compatible devices can respond to the (8-bit) addresses
    0xA0, 0xA1, 0xA4, or 0xA5 and a command register at address 0x60\. The host (computer)
    exchanges information with the display through these addresses. For the most part,
    this is display identification and parameter information.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 与 VESA E-DDC 兼容的显示器在 I²C 总线上看起来像 I²C 外围设备。特别是，兼容设备可以响应（8 位）地址 0xA0、0xA1、0xA4
    或 0xA5，以及地址为 0x60 的命令寄存器。主机（计算机）通过这些地址与显示器交换信息。大部分情况下，这些信息是显示器的标识和参数信息。
- en: VESA specifies I²C signaling only in the VGA, HDMI, and DVI interfaces. DisplayPort
    interfaces use a different mechanism for transferring data between the host computer
    and the display device. See the VESA E-DDC specifications for more details (link
    in “For More Information”).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: VESA 仅在 VGA、HDMI 和 DVI 接口中指定了 I²C 信号。DisplayPort 接口使用不同的机制来在主机计算机和显示设备之间传输数据。有关更多详细信息，请参阅
    VESA E-DDC 规范（“更多信息”中的链接）。
- en: 5.3 ACCESS.bus
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.3 ACCESS.bus
- en: The ACCESS.bus system was an early, pre-USB attempt to allow the attachment
    of low-speed peripheral devices such as keyboards and mice to a computer system.
    The intent was to support hot-pluggable devices that could be attached and removed
    without powering down the system, unlike AT and PS-2 keyboards of that era. ACCESS.bus
    was based on the I²C bus, supporting up to 125 devices.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: ACCESS.bus系统是早期在USB出现之前尝试将低速外围设备如键盘和鼠标连接到计算机系统上的一种方式。其目的是支持热插拔设备，可以在不关闭系统的情况下连接和移除设备，不同于当时的AT和PS-2键盘。ACCESS.bus基于I²C总线，支持最多125个设备。
- en: As USB arrived about a year later, interest in ACCESS.bus quickly diminished,
    though it did become the basis for the VESA DDC communication system (and the
    obsolete Apple Desktop Bus).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 随着USB大约一年后到来，ACCESS.bus的兴趣迅速减少，尽管它成为了VESA DDC通信系统的基础（以及已经废弃的Apple Desktop Bus）。
- en: 5.4 Two-Wire Interface and Two-Wire Serial Interface
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.4 两线接口和两线串行接口
- en: '*Two-wire interface (TWI)* and *two-wire serial interface (TWSI)* are names
    that various manufacturers use to avoid trademark and compliance issues with I²C.
    Some manufacturers will often use TWI when their devices don’t completely support
    the full I²C standard—if a device doesn’t support the START byte, for example.
    Some people use this term if the bus doesn’t support multiple controllers, clock
    stretching, or other I²C features. In general, if you see this term being used,
    you can probably assume that the device doesn’t fully support the I²C standard,
    though it will likely work fine in your application if you aren’t relying on cutting-edge
    features.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*两线接口（TWI）*和*两线串行接口（TWSI）*是不同厂商用来避免与I²C的商标和合规性问题而采用的名称。当设备不完全支持完整的I²C标准时，一些厂商会使用TWI—例如，如果设备不支持START字节时。有些人也会在总线不支持多个控制器、时钟拉伸或其他I²C功能时使用这个术语。一般来说，如果你看到这个术语，通常可以假设设备不完全支持I²C标准，尽管如果你不依赖尖端功能，它在你的应用中可能仍然能正常工作。'
- en: 5.5 Chapter Summary
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.5 小结
- en: This chapter briefly covered various protocol extensions to the I²C bus including
    the SMBus, VESA (DDC and E-DDC), ACCESS.bus, and the TWI. Of these, the SMBus
    and VESA bus are commonly used today. The SMBus is largely employed for system
    power management, and the VESA variants are used to control video displays.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 本章简要介绍了I²C总线的各种协议扩展，包括SMBus、VESA（DDC和E-DDC）、ACCESS.bus和TWI。其中，SMBus和VESA总线今天仍然被广泛使用。SMBus主要用于系统电源管理，而VESA变体则用于控制视频显示。
- en: The SMBus protocol is significant because Linux’s I²C support is based on it.
    Therefore, this chapter spent considerable time discussing several SMBus commands,
    including Quick Commands, Send and Read Byte commands, Read Byte and Read Word
    commands, Write Byte and Write Word commands, and Block Read and Block Write commands.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: SMBus协议之所以重要，是因为Linux的I²C支持基于它。因此，本章花费了大量时间讨论了几种SMBus命令，包括快速命令、发送和读取字节命令、读取字节和读取字命令、写入字节和写入字命令，以及块读取和块写入命令。
- en: Unless you are dealing with the specific device categories these higher-level
    protocols support, it’s unlikely you’ll need more than a passing familiarity with
    these protocols. Nevertheless, it is important to understand that, at their core,
    these protocols are still based on the venerable I²C bus.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你处理的是这些高级协议所支持的特定设备类别，否则你不太可能需要对这些协议有更深入的了解。尽管如此，理解它们的核心仍然是基于久负盛名的I²C总线这一点非常重要。
