- en: '0'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '0'
- en: Preparing for Your Security Tests
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为你的安全测试做准备
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: API security testing does not quite fit into the mold of a general penetration
    test, nor does it fit into that of a web application penetration test. Due to
    the size and complexity of many organizations’ API attack surfaces, API penetration
    testing is its own unique service. In this chapter I will discuss the features
    of APIs that you should include in your test and document prior to your attack.
    The content in this chapter will help you gauge the amount of activity required
    for an engagement, ensure that you plan to test all features of the target APIs,
    and help you avoid trouble.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: API 安全测试并不完全符合一般渗透测试的模式，也不完全符合 Web 应用渗透测试的模式。由于许多组织的 API 攻击面规模和复杂性，API 渗透测试是一个独特的服务。在本章中，我将讨论你在攻击前应该包括在测试中的
    API 特性，并进行文档记录。本章内容将帮助你评估进行合作所需的活动量，确保你计划测试目标 API 的所有特性，并帮助你避免麻烦。
- en: 'API penetration testing requires a well-developed *scope*, or an account of
    the targets and features of what you are allowed to test, that ensures the client
    and tester have a mutual understanding of the work being done. Scoping an API
    security testing engagement comes down to a few factors: your methodology, the
    magnitude of the testing, the target features, any restrictions on testing, your
    reporting requirements, and whether you plan to conduct remediation testing.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: API 渗透测试需要一个充分发展的*范围*，即允许你测试的目标和特征的描述，确保客户和测试者对所做的工作有共同的理解。API 安全测试的范围包括几个因素：你的方法论、测试的规模、目标特性、测试的任何限制、报告要求，以及是否计划进行修复测试。
- en: Receiving Authorization
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接受授权
- en: Before you attack APIs, it is supremely important that you receive a signed
    contract that includes the scope of the engagement and grants you authorization
    to attack the client’s resources within a specific time frame.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在攻击 API 之前，极其重要的是你必须收到一份签署的合同，其中包括合作范围，并授权你在特定时间范围内攻击客户的资源。
- en: For an API penetration test, this contract can take the form of a signed statement
    of work (SOW) that lists the approved targets, ensuring that you and your client
    agree on the service they want you to provide. This includes coming to an agreement
    over which aspects of an API will be tested, determining any exclusions, and setting
    up an agreed-upon time to perform testing.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 API 渗透测试，合同可以采取签署的工作声明（SOW）形式，列出已批准的目标，确保你和你的客户就他们希望你提供的服务达成一致。这包括就将测试哪些
    API 方面达成协议，确定任何排除项，并设置约定的时间进行测试。
- en: Double-check that the person signing the contract is a representative of the
    target client who is in a position to authorize testing. Also make sure the assets
    to be tested are owned by the client; otherwise, you will need to rinse and repeat
    these instructions with the proper owner. Remember to take into consideration
    the location where the client is hosting their APIs and whether they are truly
    in a position to authorize testing against both the software and the hardware.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细检查签署合同的人是否为目标客户的代表，且有权授权测试。还要确保待测试的资产属于客户；否则，你需要与正确的所有者重新执行这些指令。记得考虑客户托管其
    API 的位置，以及他们是否确实有权对软件和硬件进行测试授权。
- en: Some organizations can be too restrictive with their scoping documentation.
    If you have the opportunity to develop the scope, I recommend that, in your own
    calm words, you kindly explain to your clients that the criminals have no scope
    or limitations. Real criminals do not consider other projects that are consuming
    IT resources; they do not avoid the subnet with sensitive production servers or
    care about hacking at inconvenient times of day. Make an effort to convince your
    client of the value of having a less-restrictive engagement and then work with
    them to document the particulars.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有些组织在范围文档上可能过于严格。如果你有机会制定范围，我建议你用自己冷静的语言，友善地向客户解释，犯罪分子是没有范围或限制的。真正的罪犯不会考虑其他消耗
    IT 资源的项目；他们不会避免包含敏感生产服务器的子网，也不会在不方便的时间避免进行攻击。努力说服客户理解进行不那么严格的合作的价值，然后与他们合作记录具体事项。
- en: Meet with the client, spell out exactly what is going to happen, and then document
    it exactly in the contract, reminder emails, or notes. If you stick to the documented
    agreement for the services requested, you should be operating legally and ethically.
    However, it is probably worth reducing your risk by consulting with a lawyer or
    your legal department.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 与客户会面，明确说明将要发生的事情，然后将其准确地记录在合同、提醒邮件或笔记中。如果你遵守所请求服务的书面协议，你应该是合法且符合道德的。然而，减少风险的做法可能是与律师或法务部门进行咨询。
- en: Threat Modeling an API Test
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API 测试的威胁建模
- en: '*Threat modeling* is the process used to map out the threats to an API provider.
    If you model an API penetration test based on a relevant threat, you’ll be able
    to choose tools and techniques directed at that attack. The best tests of an API
    will be those that align with actual threats to the API provider.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*威胁建模*是用来绘制 API 提供者威胁的过程。如果你根据相关威胁来建模 API 渗透测试，你将能够选择针对该攻击的工具和技术。最有效的 API 测试是那些与实际威胁相匹配的测试。'
- en: A *threat actor* is the adversary or attacker of the API. The adversary can
    be anyone, from a member of the public who stumbles upon the API with little to
    no knowledge of the application to a customer using the application, a rogue business
    partner, or an insider who knows quite a bit about the application. To perform
    a test that provides the most value to the security of the API, it is ideal to
    map out the probable adversary as well as their hacking techniques.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*威胁行为者*是 API 的对手或攻击者。对手可以是任何人，从偶然发现 API 并对应用程序知之甚少的公众成员，到使用该应用程序的客户、不法商业伙伴或了解应用程序很多内容的内部人员。为了进行一项对
    API 安全性最有价值的测试，理想的做法是绘制出可能的对手及其黑客技术。'
- en: 'Your testing method should follow directly from the threat actor’s perspective,
    as this perspective should determine the information you are given about your
    target. If the threat actor knows nothing about the API, they will need to perform
    research to determine the ways in which they might target the application. However,
    a rogue business partner or insider threat may know quite a bit about the application
    already without any reconnaissance. To address these distinctions, there are three
    basic penetration testing approaches: black box, gray box, and white box.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你的测试方法应直接来源于威胁行为者的视角，因为这个视角应决定你所获得的关于目标的信息。如果威胁行为者对 API 一无所知，他们将需要进行研究以确定他们可能如何攻击应用程序。然而，一个不法的商业伙伴或内部威胁可能已经知道关于应用程序的很多信息，而无需进行侦察。为了应对这些不同情况，存在三种基本的渗透测试方法：黑盒、灰盒和白盒。
- en: Black box testing models the threat of an opportunistic attacker—someone who
    may have stumbled across the target organization or its API. In a truly black
    box API engagement, the client would not disclose any information about their
    attack surface to the tester. You will likely start your engagement with nothing
    more than the name of the company that signed the SOW. From there, the testing
    effort will involve conducting reconnaissance using open-source intelligence (OSINT)
    to learn as much about the target organization as possible. You might uncover
    the target’s attack surface by using a combination of search engine research,
    social media, public financial records, and DNS information to learn as much as
    you can about the organization’s domain. The tools and techniques for this approach
    are covered in much more detail in Chapter 6. Once you’ve conducted OSINT, you
    should have compiled a list of target IP addresses, URLs, and API endpoints that
    you can present to the client for review. The client should look at your target
    list and then authorize testing.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 黑盒测试模拟了机会攻击者的威胁——这种攻击者可能偶然发现了目标组织或其 API。在一个真正的黑盒 API 测试中，客户不会向测试者透露任何关于攻击面的信息。你可能从仅知道签署
    SOW（服务工作说明书）的公司名称开始你的测试工作。从这里开始，测试工作将包括利用开源情报（OSINT）进行侦察，尽可能多地了解目标组织。你可能通过结合使用搜索引擎研究、社交媒体、公开财务记录和
    DNS 信息，来发现目标的攻击面，了解尽可能多关于该组织域名的信息。这种方法的工具和技术将在第 6 章中有更详细的介绍。一旦你完成了 OSINT，你应该已经整理出一份目标
    IP 地址、URL 和 API 端点的清单，可以呈交给客户进行审查。客户应查看你的目标清单，然后授权进行测试。
- en: A gray box test is a more informed engagement that seeks to reallocate time
    spent on reconnaissance and instead invest it in active testing. When performing
    a gray box test, you’ll mimic a better-informed attacker. You will be provided
    information such as which targets are in and out of scope as well as access to
    API documentation and perhaps a basic user account. You might also be allowed
    to bypass certain network perimeter security controls.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 灰箱测试是一种更为信息丰富的参与方式，旨在重新分配侦察上花费的时间，将更多时间投入到主动测试中。在进行灰箱测试时，你将模仿一个信息更为充分的攻击者。你会获得一些信息，例如哪些目标在范围内，哪些目标超出范围，还可能访问
    API 文档，甚至可能会获得一个基础用户账户。你可能还会被允许绕过某些网络外围安全控制。
- en: Bug bounty programs often fall somewhere on the spectrum between black box and
    gray box testing. A bug bounty program is an engagement where a company allows
    hackers to test its web applications for vulnerabilities, and successful findings
    result in the host company providing a bounty payment to the finder. Bug bounties
    aren’t entirely “black box” because the bounty hunter is provided with approved
    targets, targets that are out of scope, types of vulnerabilities that are rewarded,
    and allowed types of attacks. With these restrictions in place, bug bounty hunters
    are only limited by their own resources, so they decide how much time is spent
    on reconnaissance in comparison to other techniques. If you are interested in
    learning more about bug bounty hunting, I highly recommend Vickie Li’s *Bug Bounty
    Bootcamp* ([https://nostarch.com/bug-bounty-bootcamp](https://nostarch.com/bug-bounty-bootcamp)).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞悬赏计划通常介于黑箱测试和灰箱测试之间。漏洞悬赏计划是一种参与方式，公司允许黑客测试其 Web 应用程序的漏洞，成功发现漏洞后，主办公司会向发现者支付悬赏金。漏洞悬赏并不完全是“黑箱”测试，因为悬赏猎人会被提供一些已批准的测试目标、超出范围的目标、会奖励的漏洞类型以及允许的攻击方式。由于有了这些限制，漏洞悬赏猎人仅受限于自身的资源，因此他们可以自行决定在侦察与其他技术之间分配多少时间。如果你有兴趣深入了解漏洞悬赏狩猎，我强烈推荐
    Vickie Li 的 *漏洞悬赏训练营*（[https://nostarch.com/bug-bounty-bootcamp](https://nostarch.com/bug-bounty-bootcamp)）。
- en: In a white box approach, the client discloses as much information as possible
    about the inner workings of their environment. In addition to the information
    provided for gray box testing, this might include access to application source
    code, design information, the software development kit (SDK) used to develop the
    application, and more. White box testing models the threat of an inside attacker—someone
    who knows the inner workings of the organization and has access to the actual
    source code. The more information you are provided in a white box engagement,
    the more thoroughly the target will be tested.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在白箱方法中，客户会尽可能披露他们环境的内部工作原理。除了灰箱测试提供的信息外，这还可能包括访问应用程序源代码、设计信息、用于开发应用程序的软件开发工具包（SDK）等。白箱测试模拟的是内部攻击者的威胁——一个了解组织内部工作原理并且有实际源代码访问权限的人。你在白箱测试中获得的信息越多，目标就会被越彻底地测试。
- en: The customer’s decision to make the engagement white box, black box, or somewhere
    in between should be based on a threat model and threat intelligence. Using threat
    modeling, work with your customer to profile the organization’s likeliest attacker.
    For example, say you’re working with a small business that is politically inconsequential;
    it isn’t part of a supply chain for a more important company and doesn’t provide
    an essential service. In that case, it would be absurd to assume that the organization’s
    adversary is a well-funded advanced persistent threat (APT) like a nation-state.
    Using the techniques of an APT against this small business would be like using
    a drone strike on a petty thief. Instead, to provide the client with the most
    value, you should use threat modeling to craft a realistic threat. In this case,
    the likeliest attacker might be an opportunistic, medium-skilled individual who
    has stumbled upon the organization’s website and is likely to run only published
    exploits against known vulnerabilities. The testing method that fits the opportunistic
    attacker would be a limited black box test.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 客户决定将参与范围设定为白盒测试、黑盒测试，还是介于两者之间的方式，应基于威胁模型和威胁情报。通过使用威胁建模，与客户一起确定该组织最可能的攻击者。例如，假设你正在与一个小型企业合作，该企业在政治上无关紧要；它不是一个更重要公司的供应链的一部分，也不提供基本服务。在这种情况下，假设该组织的对手是一个资金充足的先进持续威胁（APT），如一个国家级黑客组织，显然是不合理的。对这个小企业使用
    APT 的技术就像对一个小偷使用无人机打击。相反，为了给客户提供最大价值，你应该使用威胁建模来制定一个现实的威胁。在这种情况下，最可能的攻击者可能是一个机会主义、技能中等的个人，他偶然发现了该组织的网站，并可能只会利用已知漏洞的公开利用工具。适合这种机会主义攻击者的测试方法是有限的黑盒测试。
- en: The most effective way to model a threat for a client is to conduct a survey
    with them. The survey will need to reveal the client’s scope of exposure to attacks,
    their economic significance, their political involvement, whether they are involved
    in any supply chains, whether they offer essential services, and whether there
    are other potential motives for a criminal to want to attack them. You can develop
    your own survey or put one together from existing professional resources like
    MITRE ATT&CK ([https://attack.mitre.org](https://attack.mitre.org)) or OWASP ([https://cheatsheetseries.owasp.org/cheatsheets/Threat_Modeling_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Threat_Modeling_Cheat_Sheet.html)).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为客户制定威胁模型的最有效方式是与他们进行问卷调查。调查需要揭示客户面临的攻击暴露范围、其经济重要性、政治参与度、是否参与任何供应链、是否提供基本服务以及是否有其他潜在的动机可能促使犯罪分子攻击他们。你可以自行开发调查问卷，或者根据现有的专业资源（如
    MITRE ATT&CK（[https://attack.mitre.org](https://attack.mitre.org)）或 OWASP（[https://cheatsheetseries.owasp.org/cheatsheets/Threat_Modeling_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Threat_Modeling_Cheat_Sheet.html)））制作问卷。
- en: The testing method you select will determine much of the remaining scoping effort.
    Since black box testers are provided with very little information about scoping,
    the remaining scoping items are relevant for gray box and white box testing.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你选择的测试方法将决定剩余的大部分范围工作。由于黑盒测试人员通常只提供非常有限的范围信息，剩余的范围项目对于灰盒测试和白盒测试更为相关。
- en: Which API Features You Should Test
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你应该测试的 API 特性
- en: One of the main goals of scoping an API security engagement is to discover the
    quantity of work you’ll have to do as part of your test. As such, you must find
    out how many unique API endpoints, methods, versions, features, authentication
    and authorization mechanisms, and privilege levels you’ll need to test. The magnitude
    of the testing can be determined through interviews with the client, a review
    of the relevant API documentation, and access to API collections. Once you have
    the requested information, you should be able to gauge how many hours it will
    take to effectively test the client’s APIs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 确定 API 安全测试的范围的主要目标之一是发现你需要执行的工作量。因此，你必须找出需要测试的唯一 API 端点、方法、版本、功能、认证与授权机制以及权限级别的数量。测试的规模可以通过与客户的访谈、审查相关的
    API 文档和访问 API 集合来确定。一旦你获得了所需的信息，你应该能够评估出测试客户 API 所需的小时数。
- en: API Authenticated Testing
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: API 认证测试
- en: Determine how the client wants to handle the testing of authenticated and unauthenticated
    users. The client may want to have you test different API users and roles to see
    if there are vulnerabilities present in any of the different privilege levels.
    The client may also want you to test a process they use for authentication and
    the authorization of users. When it comes to API weaknesses, many of the detrimental
    vulnerabilities are discovered in authentication and authorization. In a black
    box situation, you would need to figure out the target’s authentication process
    and seek to become authenticated.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 确定客户希望如何处理经过身份验证和未经过身份验证的用户的测试。客户可能希望你测试不同的 API 用户和角色，以查看是否在不同的权限级别中存在漏洞。客户也可能希望你测试他们用于身份验证和用户授权的过程。对于
    API 弱点来说，许多有害的漏洞通常出现在身份验证和授权中。在黑盒测试中，你需要弄清楚目标的身份验证过程，并设法进行身份验证。
- en: Web Application Firewalls
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Web 应用防火墙
- en: In a white box engagement, you will want to be aware of any web application
    firewalls (WAFs) that may be in use. A *WAF* is a common defense mechanism for
    web applications and APIs. A WAF is a device that controls the network traffic
    that reaches the API. If a WAF has been set up properly, you will find out quickly
    during testing when access to the API is lost after performing a simple scan.
    WAFs can be great at limiting unexpected requests and stopping an API security
    test in its tracks. An effective WAF will detect the frequency of requests or
    request failures and ban your testing device.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在白盒测试中，你需要注意是否有 Web 应用防火墙（WAF）在使用。*WAF* 是 Web 应用和 API 的一种常见防御机制。WAF 是一种控制到达
    API 的网络流量的设备。如果 WAF 设置得当，你会在测试过程中很快发现当进行简单扫描后，访问 API 被拒绝。WAF 对限制意外请求和阻止 API 安全测试非常有效。一个有效的
    WAF 会检测请求的频率或请求失败，并封禁你的测试设备。
- en: In gray box and white box engagements, the client will likely reveal the WAF
    to you, at which point you will have some decisions to make. While opinions diverge
    on whether organizations should relax security for the sake of making testing
    more effective, a layered cybersecurity defense is key to effectively protecting
    organizations. In other words, no one should put all their eggs into the WAF basket.
    Given enough time, a persistent attacker could learn the boundaries of the WAF,
    figure out how to bypass it, or use a zero-day vulnerability that renders it irrelevant.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在灰盒和白盒测试中，客户可能会将 WAF 向你公开，此时你将面临一些决策。关于是否应该为了提高测试的有效性而放松安全性，意见分歧，但分层的网络安全防御是有效保护组织的关键。换句话说，任何人都不应该将所有的“鸡蛋”都放在
    WAF 这一个篮子里。给足够的时间，持续的攻击者可能会学会 WAF 的边界，找出绕过它的方法，或者利用一个使其无效的零日漏洞。
- en: Ideally, the client would allow your attacking IP address to bypass the WAF
    or adjust their typical level of boundary security so that you can test the security
    controls that will be exposed to their API consumers. As discussed earlier, making
    plans and decisions like this is really about threat modeling. The best tests
    of an API will be those that align with actual threats to the API provider. To
    get a test that provides the most value to the security of the API, it is ideal
    to map out the probable adversary and their hacking techniques. Otherwise, you’ll
    find yourself testing the effectiveness of the API provider’s WAF rather than
    the effectiveness of their API security controls.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，客户会允许你的攻击 IP 地址绕过 WAF，或者调整他们的边界安全级别，以便你可以测试暴露给 API 消费者的安全控制。如前所述，做出此类计划和决策实际上是进行威胁建模。最好的
    API 测试是那些与 API 提供者的实际威胁相一致的测试。为了得到对 API 安全最有价值的测试，理想的做法是绘制出可能的对手及其黑客技巧。否则，你会发现自己在测试
    API 提供者的 WAF 有效性，而不是他们的 API 安全控制的有效性。
- en: Mobile Application Testing
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移动应用测试
- en: Many organizations have mobile applications that expand the attack surface.
    Moreover, mobile apps often rely on APIs to transmit data within the application
    and to supporting servers. You can test these APIs through manual code review,
    automated source code analysis, and dynamic analysis. *Manual* code review involves
    accessing the mobile application’s source code and searching for potential vulnerabilities.
    *Automated* source code analysis is similar, except it uses automated tools to
    assist in the search for vulnerabilities and interesting artifacts. Finally, *dynamic*
    analysis is the testing of the application while it is running. Dynamic analysis
    includes intercepting the mobile app’s client API requests and the server API
    responses and then attempting to find weaknesses that can be exploited.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 许多组织拥有移动应用程序，这些应用程序扩展了攻击面。此外，移动应用程序通常依赖于API在应用程序内和支持服务器之间传输数据。你可以通过手动代码审查、自动源代码分析和动态分析来测试这些API。*手动*代码审查涉及访问移动应用程序的源代码，并寻找潜在的漏洞。*自动化*源代码分析类似，区别在于它使用自动化工具来帮助寻找漏洞和有趣的工件。最后，*动态*分析是在应用程序运行时进行测试。动态分析包括拦截移动应用程序的客户端API请求和服务器API响应，然后尝试找出可以被利用的弱点。
- en: Auditing API Documentation
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 审计API文档
- en: An API’s *documentation* is a manual that describes how to use the API and includes
    authentication requirements, user roles, usage examples, and API endpoint information.
    Good documentation is essential to the commercial success of any self-sufficient
    API. Without effective API documentation, businesses would have to rely on training
    to support their consumers. For these reasons, you can bet that your target APIs
    have documentation.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: API的*文档*是一本描述如何使用该API的手册，包括身份验证要求、用户角色、使用示例和API端点信息。良好的文档对于任何自给自足API的商业成功至关重要。如果没有有效的API文档，企业将不得不依赖培训来支持他们的消费者。正因如此，你可以肯定你的目标API会有文档。
- en: Yet, this documentation can be riddled with inaccuracies, outdated information,
    and information disclosure vulnerabilities. As an API hacker, you should search
    for your target’s API documentation and use it to your advantage. In gray box
    and white box testing, an API documentation audit should be included within the
    scope. A review of the documentation will improve the security of the target APIs
    by exposing weaknesses, including business logic flaws.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些文档可能充满了不准确、过时的信息和信息泄露漏洞。作为API黑客，你应该搜索目标的API文档，并利用它为自己谋取优势。在灰盒和白盒测试中，API文档审计应该纳入测试范围。审查文档可以通过暴露漏洞（包括业务逻辑缺陷）来提升目标API的安全性。
- en: Rate Limit Testing
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 速率限制测试
- en: '*Rate limiting* is a restriction on the number of requests an API consumer
    can make within a given time frame. It is enforced by an API provider’s web servers,
    firewall, or web application firewall and serves two important purposes for API
    providers: it allows for the monetization of APIs and prevents the overconsumption
    of the provider’s resources. Because rate limiting is an essential factor that
    allows organizations to monetize their APIs, you should include it in your scope
    during API engagements.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*速率限制*是对API消费者在给定时间范围内可以发出的请求数量的限制。它由API提供方的网络服务器、防火墙或Web应用程序防火墙强制执行，主要有两个重要目的：它允许API提供方通过API变现，并防止过度消耗提供方的资源。由于速率限制是允许组织通过API获利的关键因素，因此在API交互过程中你应该将其纳入测试范围。'
- en: For example, a business might allow a free-tier API user to make one request
    per hour. Once that request is made, the consumer would be kept from making any
    other request for an hour. However, if the user pays this business a fee, they
    could make hundreds of requests per hour. Without adequate controls in place,
    these non-paying API consumers could find ways to skip the toll and consume as
    much data as often as they please.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，一家企业可能允许免费层API用户每小时发起一次请求。一旦请求发出，消费者将无法在一小时内发起其他请求。然而，如果用户支付该企业费用，他们每小时就可以发起数百次请求。如果没有足够的控制措施，这些不付费的API消费者可能会找到绕过限制的方式，随意消费数据。
- en: Rate limit testing is not the same as denial of service (DoS) testing. DoS testing
    consists of attacks that are intended to disrupt services and make the systems
    and applications unavailable to users. Whereas DoS testing is meant to assess
    how resilient an organization’s computing resources are, rate limit testing seeks
    to bypass restrictions that limit the quantity of requests sent within a given
    time frame. Attempting to bypass rate limiting will not necessarily cause a disruption
    to services. Instead, bypassing rate limiting could aid in other attacks and demonstrate
    a weakness in an organization’s method of monetizing its API.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 限速测试不同于拒绝服务（DoS）测试。DoS 测试是指旨在干扰服务并使系统和应用无法提供给用户的攻击。与此不同，DoS 测试旨在评估一个组织计算资源的韧性，而限速测试则试图绕过限制请求数量的限制，即在给定时间框架内发送的请求数量。绕过限速并不一定会导致服务中断，反而可能有助于其他攻击，并展示组织在其
    API 获利方式上的弱点。
- en: 'Typically, an organization publishes its API’s request limits in the API documentation.
    It will read something like the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，组织会在 API 文档中发布其 API 的请求限制，内容可能类似于以下内容：
- en: You may make *X* requests within a *Y* time frame. If you exceed this limit,
    you will get a *Z* response from our web server.
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你可以在 *X* 时间框架内发送 *Y* 请求。如果你超过这个限制，你将从我们的 Web 服务器收到 *Z* 响应。
- en: Twitter, for example, limits requests based on your authorization once you’re
    authenticated. The first tier can make 15 requests every 15 minutes, and the next
    tier can make 180 requests every 15 minutes. If you exceed your request limit,
    you will be sent an HTTP Error 420, as shown in [Figure 0-1](#figure0-1).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Twitter 会根据你的授权对请求进行限制，一旦你通过身份验证，第一级别每 15 分钟可以发送 15 个请求，下一层级每 15 分钟可以发送 180
    个请求。如果你超过了请求限制，你将收到 HTTP 错误 420，如 [图 0-1](#figure0-1) 所示。
- en: '![Screenshot of Twitter developer documentation describing a 420 HTTP error
    named Enhance Your Calm. The description reads “Returned when an app is being
    rate limited for making too many requests.”](image_fi/502444c00/f00001.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![Twitter 开发者文档中描述 420 HTTP 错误的截图，名为“Enhance Your Calm”。描述中写道：“当应用因发送过多请求而被限速时返回此错误。”](image_fi/502444c00/f00001.png)'
- en: 'Figure 0-1: Twitter HTTP status code from [https://developer.twitter.com/en/docs](https://developer.twitter.com/en/docs)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 0-1：来自 [https://developer.twitter.com/en/docs](https://developer.twitter.com/en/docs)
    的 Twitter HTTP 状态码
- en: If insufficient security controls are in place to limit access to an API, the
    API provider will lose money from consumers cheating the system, incur additional
    costs due to the use of additional host resources, and find themselves vulnerable
    to DoS attacks.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有足够的安全控制来限制对 API 的访问，API 提供者将因消费者作弊而失去收入，因使用额外的主机资源而产生额外成本，并且可能面临 DoS 攻击的风险。
- en: Restrictions and Exclusions
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制和排除
- en: Unless otherwise specified in penetration testing authorization documentation,
    you should assume that you won’t be performing DoS and distributed DoS (DDoS)
    attacks. In my experience, being authorized to do so is pretty rare. When DoS
    testing is authorized, it is clearly spelled out in formal documentation. Also,
    with the exception of certain adversary emulation engagements, penetration testing
    and social engineering are typically kept as separate exercises. That being said,
    always check whether you can use social engineering attacks (such as phishing,
    vishing, and smishing) when penetration testing.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 除非渗透测试授权文档中另有说明，否则你应假设自己不会执行 DoS 和分布式 DoS（DDoS）攻击。根据我的经验，获得授权进行此类操作的情况非常罕见。当
    DoS 测试被授权时，通常会在正式文档中明确说明。此外，除非是某些对手模拟演习，渗透测试和社会工程通常是两个独立的活动。因此，在进行渗透测试时，务必检查是否可以使用社会工程攻击（如钓鱼、语音钓鱼和短信钓鱼）。
- en: By default, no bug bounty program accepts attempts at social engineering, DoS
    or DDoS attacks, attacks of customers, and access of customer data. In situations
    where you could perform an attack against a user, programs normally suggest creating
    multiple accounts and, when the relevant opportunity arises, attacking your own
    test accounts.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，没有任何漏洞奖励计划接受社会工程攻击、DoS 或 DDoS 攻击、攻击客户或访问客户数据的行为。在你可以对用户执行攻击的情况下，程序通常建议创建多个账户，并在相关机会出现时攻击你自己的测试账户。
- en: Additionally, particular programs or clients may spell out known issues. Certain
    aspects of an API might be considered a security finding but may also be an intended
    convenience feature. For example, a forgot-your-password function could display
    a message that lets the end user know whether their email or password is incorrect;
    this same function could grant an attacker the ability to brute-force valid usernames
    and emails. The organization may have already decided to accept this risk and
    does not wish for you to test it.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，特定的程序或客户可能会列出已知的问题。API 的某些方面可能被认为是安全漏洞，但也可能是为了便利而故意设计的功能。例如，忘记密码功能可能会显示一条消息，告知最终用户其电子邮件或密码是否正确；这同样的功能可能赋予攻击者暴力破解有效用户名和电子邮件的能力。组织可能已经决定接受这种风险，并且不希望你进行测试。
- en: Pay close attention to any exclusions or restrictions in the contract. When
    it comes to APIs, the program may allow for testing of specific sections of a
    given API and may restrict certain paths within an approved API. For example,
    a banking API provider may share resources with a third party and may not have
    authorization to allow testing. Thus, they may spell out that you can attack the
    */api/accounts* endpoint but not */api/shared/accounts*. Alternatively, the target’s
    authentication process may be through a third party that you are not authorized
    to attack. You will need to pay close attention to the scope in order to perform
    legal authorized testing.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要特别注意合同中的任何排除条款或限制条款。在涉及 API 时，程序可能只允许测试特定部分的 API，并可能限制在已批准的 API 中某些路径的访问。例如，银行
    API 提供商可能与第三方共享资源，而可能没有授权允许进行测试。因此，他们可能会明确说明你可以攻击 */api/accounts* 端点，但不能攻击 */api/shared/accounts*。另外，目标的身份验证过程可能通过一个你没有授权攻击的第三方进行。你需要特别关注测试范围，以便进行合法的授权测试。
- en: Security Testing Cloud APIs
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全测试云 API
- en: Modern web applications are often hosted in the cloud. When you attack a cloud-hosted
    web application, you’re actually attacking the physical servers of cloud providers
    (likely Amazon, Google, or Microsoft). Each cloud provider has its own set of
    penetration testing terms and services that you’ll want to become familiar with.
    As of 2021, cloud providers have generally become friendlier toward penetration
    testers, and far fewer of them require authorization submissions. Still, some
    cloud-hosted web applications and APIs will require you to obtain penetration
    testing authorization, such as for an organization’s Salesforce APIs.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现代 Web 应用程序通常托管在云端。当你攻击一个云托管的 Web 应用程序时，实际上是在攻击云服务提供商的物理服务器（可能是 Amazon、Google
    或 Microsoft）。每个云服务提供商都有自己的一套渗透测试条款和服务，你需要熟悉这些内容。到 2021 年为止，云服务提供商普遍变得更加友好对待渗透测试人员，且需要授权提交的情况大大减少。不过，仍然有一些云托管的
    Web 应用程序和 API 需要你获得渗透测试授权，例如某些组织的 Salesforce API。
- en: You should always know the current requirements of the target cloud provider
    before attacking. The following list describes the policies of the most common
    providers.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行攻击之前，你应始终了解目标云服务提供商当前的要求。以下列表描述了最常见的提供商的政策。
- en: '**Amazon Web Services (AWS)** AWS has greatly improved its stance on penetration
    testing. As of this writing, AWS allows its customers to perform all sorts of
    security testing, with the exception of DNS zone walking, DoS or DDoS attacks,
    simulated DoS or DDoS attacks, port flooding, protocol flooding, and request flooding.
    For any exceptions to this, you must email AWS and request permission to conduct
    testing. If you are requesting an exception, make sure to include your testing
    dates, any accounts and assets involved, your phone number, and a description
    of your proposed attack.'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Amazon Web Services (AWS)** AWS 在渗透测试方面已经大大改善了其立场。截至目前，AWS 允许其客户进行各种安全测试，除了
    DNS 区域遍历、DoS 或 DDoS 攻击、模拟 DoS 或 DDoS 攻击、端口泛洪、协议泛洪和请求泛洪等行为。对于任何不允许的行为，你必须发送电子邮件给
    AWS 并请求进行测试的许可。如果你请求一个例外，确保包括你的测试日期、涉及的账户和资产、电话号码以及你提议的攻击描述。'
- en: '**Google Cloud Platform (GCP)** Google simply states that you do not need to
    request permission or notify the company to perform penetration testing. However,
    Google also states that you must remain compliant with its acceptable use policy
    (AUP) and terms of service (TOS) and stay within your authorized scope. The AUP
    and TOS prohibit illegal actions, phishing, spam, distributing malicious or destructive
    files (such as viruses, worms, and Trojan horses), and interruption to GCP services.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Google Cloud Platform (GCP)** Google简单声明，在进行渗透测试时，无需向公司请求许可或通知公司。然而，Google也声明，你必须遵守其可接受使用政策（AUP）和服务条款（TOS），并且保持在授权范围内。AUP和TOS禁止非法行为、网络钓鱼、垃圾邮件、分发恶意或破坏性文件（如病毒、蠕虫和木马），以及中断GCP服务。'
- en: '**Microsoft Azure** Microsoft takes the hacker-friendly approach and does not
    require you to notify the company before testing. In addition, it has a “Penetration
    Testing Rules of Engagement” page that spells out exactly what sort of penetration
    testing is permitted ([https://www.microsoft.com/en-us/msrc/pentest-rules-of-engagement](https://www.microsoft.com/en-us/msrc/pentest-rules-of-engagement)).'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Microsoft Azure** Microsoft采取了对黑客友好的方式，不要求在测试之前通知公司。此外，它还提供了“渗透测试参与规则”页面，明确规定了允许进行哪些类型的渗透测试（[https://www.microsoft.com/en-us/msrc/pentest-rules-of-engagement](https://www.microsoft.com/en-us/msrc/pentest-rules-of-engagement)）。'
- en: At least for now, cloud providers are taking a favorable stance toward penetration
    testing activities. As long as you stay up-to-date with the provider’s terms,
    you should be operating legally if you only test targets you are authorized to
    hack and avoid attacks that could cause an interruption to services.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 至少目前，云服务提供商对渗透测试活动持积极态度。只要你遵守服务提供商的条款，确保只测试你被授权攻击的目标，并避免进行可能导致服务中断的攻击，你应该是合法的。
- en: DoS Testing
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DoS 测试
- en: I mentioned that DoS attacks are often off the table. Work with the client to
    understand their risk appetite for the given engagement. You should treat DOS
    testing as an opt-in service for clients who want to test the performance and
    reliability of their infrastructure. Otherwise, work with the customer to see
    what they’re willing to allow.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我提到过DoS攻击通常不在测试范围内。与客户合作，了解他们在特定参与中的风险承受能力。你应该将DoS测试视为一种可选服务，提供给那些希望测试其基础设施性能和可靠性的客户。否则，与客户合作，看看他们愿意允许什么。
- en: DoS attacks represent a huge threat against the security of APIs. An intentional
    or accidental DoS attack will disrupt the services provided by the target organization,
    making the API or web application inaccessible. An unplanned business interruption
    like this is usually a triggering factor for an organization to pursue legal recourse.
    Therefore, be careful to perform only the testing that you are authorized to perform!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: DoS攻击对API安全构成巨大的威胁。故意或偶然的DoS攻击将中断目标组织提供的服务，使得API或Web应用程序无法访问。这样的突发性业务中断通常是组织寻求法律追索的触发因素。因此，务必小心，仅进行你被授权执行的测试！
- en: 'Ultimately, whether a client accepts DoS testing as part of the scope depends
    on the organization’s *risk appetite*, or the amount of risk an organization is
    willing to take on to achieve its purpose. Understanding an organization’s risk
    appetite can help you tailor your testing. If an organization is cutting-edge
    and has a lot of confidence in its security, it may have a big appetite for risk.
    An engagement tailored to a large appetite for risk would involve connecting to
    every feature and running all the exploits you want. On the opposite side of the
    spectrum are the very risk-averse organizations. Engagements for these organizations
    will be like walking on eggshells. This sort of engagement will have many details
    in the scope: any machine you are able to attack will be spelled out, and you
    may need to ask permission before running certain exploits.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，是否将DoS测试作为测试范围的一部分取决于客户的*风险承受能力*，即组织为实现目标愿意承担的风险程度。了解组织的风险承受能力可以帮助你量身定制测试。如果一个组织处于前沿，且对其安全性充满信心，那么它可能对风险有较大的承受能力。针对较大风险承受能力的参与将涉及连接到每个功能，并运行你想要的所有漏洞攻击。相反，位于风险谱系另一端的是极为风险规避的组织。这类组织的参与就像是走在蛋壳上。此类参与的范围会有许多细节：你能够攻击的任何机器都将被明确列出，并且你可能需要在运行某些漏洞时先获得许可。
- en: Reporting and Remediation Testing
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 报告与修复测试
- en: To your client, the most valuable aspect of your testing is the report you submit
    to communicate your findings about the effectiveness of their API security controls.
    The report should spell out the vulnerabilities you discovered during your testing
    and explain to the client how they can perform remediation to improve the security
    of their APIs.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你的客户来说，最有价值的部分是你提交的报告，它将传达你关于他们API安全控制有效性的发现。报告应详细列出你在测试过程中发现的漏洞，并向客户解释如何进行修复，以提高他们API的安全性。
- en: The final thing to check when scoping is whether the API provider would like
    remediation testing. Once the client has their report, they should attempt to
    fix their API vulnerabilities. Performing a retest of the previous findings will
    validate that the vulnerabilities were successfully remediated. Retesting could
    probe exclusively the weak spots, or it could be a full retest to see if any changes
    applied to the API introduced new weaknesses.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后需要检查的内容是API提供商是否希望进行修复测试。一旦客户获得了报告，他们应该尝试修复API漏洞。对之前发现的问题进行重新测试将验证漏洞是否已成功修复。重新测试可以仅探测薄弱点，或者进行全面的重新测试，查看对API所做的更改是否引入了新的弱点。
- en: A Note on Bug Bounty Scope
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于漏洞赏金范围的说明
- en: If you hope to hack professionally, a great way to get your foot in the door
    is to become a bug bounty hunter. Organizations like BugCrowd and HackerOne have
    created platforms that make it easy for anyone to make an account and start hunting.
    In addition, many organizations run their own bug bounty programs, including Google,
    Microsoft, Apple, Twitter, and GitHub. These programs include plenty of API bug
    bounties, many of which have additional incentives. For example, the Files.com
    bug bounty program hosted on BugCrowd includes API-specific bounties, as shown
    in [Figure 0-2](#figure0-2).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望成为一名职业黑客，一个很好的入门方式是成为一个漏洞赏金猎人。像BugCrowd和HackerOne这样的组织已经创建了平台，使任何人都可以轻松创建账户并开始寻找漏洞。此外，许多组织也自行运营漏洞赏金计划，包括Google、Microsoft、Apple、Twitter和GitHub。这些计划中包含了大量的API漏洞赏金，许多还提供额外奖励。例如，Files.com在BugCrowd上托管的漏洞赏金计划就包括针对API的漏洞赏金，如[图0-2](#figure0-2)所示。
- en: '![Screenshot of a web page with the text “Considering the higher business impact
    of issues affecting the following targets, we are offering a 10% bonus on valid
    submissions (severity P2-P4) for them: app.files.com, your-assigned-subdomain.files.com,
    and REST API.” A table lists the payouts for various vulnerability severities
    for each target.](image_fi/502444c00/f00002.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![网页截图，文本显示：“考虑到以下目标受影响问题的更高业务影响，我们为有效提交（严重性P2-P4）提供10%的奖金：app.files.com、your-assigned-subdomain.files.com和REST
    API。” 表格列出了各个目标的不同漏洞严重性对应的奖励。](image_fi/502444c00/f00002.png)'
- en: 'Figure 0-2: The Files.com bug bounty program on BugCrowd, one of many to incentivize
    API-related findings'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图0-2：Files.com在BugCrowd上的漏洞赏金计划，这是许多激励API相关发现的计划之一
- en: 'In bug bounty programs, you should pay attention to two contracts: the terms
    of service for the bug bounty provider and the scope of the program. Violating
    either of these contracts could result not only in getting banned from the bug
    bounty provider but legal trouble as well. The bounty provider’s terms of service
    will contain important information about earning bounties, reporting findings,
    and the relationship between the bounty provider, testers, researchers, and hackers
    who participate and the target.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在漏洞赏金计划中，你应关注两个合同：漏洞赏金提供方的服务条款和计划的范围。违反其中任何一项合同不仅可能导致被漏洞赏金提供方封禁，还可能引发法律问题。漏洞赏金提供方的服务条款将包含有关赚取赏金、报告发现以及赏金提供方、测试者、研究人员和参与者与目标之间关系的重要信息。
- en: The scope will equip you with the target APIs, descriptions, reward amounts,
    rules of engagement, reporting requirements, and restrictions. For API bug bounties,
    the scope will often include the API documentation or a link to the docs. [Table
    0-1](#table0-1) lists some of the primary bug bounty considerations you should
    understand before testing.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 范围将提供目标API、描述、奖励金额、参与规则、报告要求以及限制。对于API漏洞赏金，范围通常包括API文档或文档的链接。[表0-1](#table0-1)列出了在测试前需要了解的一些主要漏洞赏金注意事项。
- en: 'Table 0-1: Bug Bounty Testing Considerations'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 表0-1：漏洞赏金测试注意事项
- en: '| **Targets** | URLs that are approved for testing and rewards. Pay attention
    to the subdomains listed, as some may be out of scope. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| **目标** | 被批准进行测试和奖励的URL。请注意列出的子域名，因为有些可能不在范围内。 |'
- en: '| **Disclosure terms** | The rules regarding your ability to publish your findings.
    |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| **披露条款** | 关于你发布发现的能力的规则。 |'
- en: '| **Exclusions** | URLs that are excluded from testing and rewards. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| **排除项** | 不包括在测试和奖励范围内的URL。 |'
- en: '| **Testing restrictions** | Restrictions on the types of vulnerabilities the
    organization will reward. Often, you must be able to prove that your finding can
    be leveraged in a real-world attack by providing evidence of exploitation. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| **测试限制** | 对组织将奖励的漏洞类型的限制。通常，你必须能够证明你的发现可以在现实世界的攻击中得到利用，通过提供漏洞利用的证据来证明。 |'
- en: '| **Legal** | Additional government regulations and laws that apply due to
    the organization’s, customers’, and data center’s locations. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| **法律** | 由于组织、客户和数据中心的地理位置，适用的额外政府法规和法律。 |'
- en: If you are new to bug hunting, I recommend checking out BugCrowd University,
    which has an introduction video and page dedicated to API security testing by
    Sadako ([https://www.bugcrowd.com/resources/webinars/api-security-testing-for-hackers](https://www.bugcrowd.com/resources/webinars/api-security-testing-for-hackers)).
    Also, check out *Bug Bounty Bootcamp* (No Starch Press, 2021), which is one of
    the best resources out there to get you started in bug bounties. It even has a
    chapter on API hacking!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是漏洞挖掘新手，我建议你查看BugCrowd大学，这里有一段由Sadako制作的关于API安全测试的介绍视频和页面（[https://www.bugcrowd.com/resources/webinars/api-security-testing-for-hackers](https://www.bugcrowd.com/resources/webinars/api-security-testing-for-hackers)）。另外，别忘了查看*Bug
    Bounty Bootcamp*（No Starch Press, 2021），这是一本非常适合入门漏洞赏金的资源，它甚至有一章专门讲解API黑客攻击！
- en: Make sure you understand the potential rewards, if any, of each type of vulnerability
    before you spend time and effort on it. For example, I’ve seen bug bounties claimed
    for a valid exploitation of rate limiting that the bug bounty host considered
    spam. Review past disclosure submissions to see if the organization was combative
    or unwilling to pay out for what seemed like valid submissions. In addition, focus
    on the successful submissions that received bounties. What type of evidence did
    the bug hunter provide, and how did they report their finding in a way that made
    it easy for the organization to see the bug as valid?
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在投入时间和精力之前了解每种类型漏洞的潜在奖励（如果有的话）。例如，我曾见过一个漏洞赏金被认为是垃圾邮件的有效速率限制利用。查看过去的披露提交，看看组织是否表现出抵触情绪，或者是否不愿为看似有效的提交支付奖励。此外，关注那些成功获得赏金的提交。漏洞猎人提供了什么类型的证据？他们是如何报告发现的，以便让组织轻松地确认漏洞是有效的？
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, I reviewed the components of the API security testing scope.
    Developing the scope of an API engagement should help you understand the method
    of testing to deploy as well as the magnitude of the engagement. You should also
    reach an understanding of what can and can’t be tested as well as what tools and
    techniques will be used in the engagement. If the testing aspects have been clearly
    spelled out and you test within those specifications, you’ll be set up for a successful
    API security testing engagement.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我回顾了API安全测试范围的组成部分。制定API测试范围应该帮助你理解要部署的测试方法以及测试的范围。你还应该明确什么可以测试，什么不能测试，以及在测试过程中将使用哪些工具和技术。如果测试方面已经明确规定，并且你在这些规格内进行测试，你将为成功的API安全测试奠定基础。
- en: In the next chapter, I will cover the web application functionality you will
    need to understand in order to know how web APIs work. If you already understand
    web application basics, move on to Chapter 2, where I cover the technical anatomy
    of APIs.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我将介绍你需要了解的Web应用程序功能，以便理解Web API是如何工作的。如果你已经掌握了Web应用程序的基础知识，可以直接跳到第2章，在那里我将讲解API的技术结构。
