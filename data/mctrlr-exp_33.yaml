- en: '**H  Unsorted Attacks**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**H  未排序攻击**'
- en: '**H.1 PIC16C84 PicBuster**'
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**H.1 PIC16C84 PicBuster**'
- en: The third chapter of McCormac (1996) describes a few firmware extraction exploits
    from the early days of TV piracy. Of particular interest is a trick against the
    PIC16C84, the very first PIC to include electrically erasable EEPROM memory rather
    than OTP ROM or UV erasable EPROM. Like the PICs we saw in [Chapter 19](ch19.xhtml#ch19),
    a protection fuse is implemented with the same floating gate transistor as the
    EEPROM bits.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: McCormac（1996）的第三章描述了早期电视盗版时代的一些固件提取漏洞。特别有趣的是针对 PIC16C84 的技巧，这是第一款包含电擦除 EEPROM
    存储器的 PIC，而不是 OTP ROM 或 UV 擦除 EPROM。就像我们在[第 19 章](ch19.xhtml#ch19)中看到的 PIC 一样，保护保险丝使用与
    EEPROM 位相同的浮动门晶体管。
- en: The trick involves the difference between the supply voltage VDD and the programming
    voltage on the !MCLR pin. In normal operation, VDD should be less than 7.5V and
    !MCLR should be less than 14V, relative to ground on VSS. This technique does
    not work against earlier chips, which lacked an electrical erase feature.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这个技巧涉及到 VDD 电源电压与 !MCLR 引脚编程电压之间的差异。在正常操作中，VDD 应该小于 7.5V，!MCLR 应该小于 14V，相对于
    VSS 地面电压。这种技术对早期芯片无效，因为它们没有电擦除功能。
- en: To exploit the PIC16C84, the chip is electrically mass erased at the wrong voltage.
    The VDD pin is held at 13.5V, just 0.5V less than VPP. VDD is then dropped to
    the standard 5V and switched off for ten to twenty seconds before being powered
    back on, allowing data to be read.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了利用 PIC16C84，芯片在错误的电压下进行电擦除。VDD 引脚保持在 13.5V，仅比 VPP 低 0.5V。然后将 VDD 电压降至标准 5V，并关闭
    10 到 20 秒，再重新开机，这样可以读取数据。
- en: '**H.2 PIC Checksums**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**H.2 PIC 校验和**'
- en: PIC microcontrollers implement a checksum that leaks information from locked
    chips, and in some cases you can clear—but not set—bits by performing a second
    programming. Kaljević (1997) documents the checksum algorithm and a technique
    for zeroing coefficients of that checksum to reveal specific bits of the source
    program.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: PIC 微控制器实现了一种校验和，可以泄漏来自锁定芯片的信息，在某些情况下，通过执行第二次编程，你可以清除—但不能设置—位。Kaljević（1997）记录了校验和算法，并介绍了一种将该校验和系数归零的技术，以揭示源程序中的特定位。
- en: On 14-bit models like the PIC16, Kaljević begins by the checksum algorithm,
    ![image](../images/f0394-01.jpg) where *a* is the higher seven bits and *b* the
    lower seven bits of a 14-bit instruction word. ![image](../images/f0394-02.jpg)
    is the XNOR operator, ∽ is inversion, and ⊕ is the XOR operator. *s* is freely
    readable from the chip over the normal ICSP protocol, and the game is to reveal
    the unknown bits in *a* and *b*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在像 PIC16 这样的 14 位模型上，Kaljević 从校验和算法开始，![image](../images/f0394-01.jpg)，其中 *a*
    是 14 位指令字的高 7 位，*b* 是低 7 位。![image](../images/f0394-02.jpg) 是 XNOR 运算符，∽ 表示反转，⊕
    表示 XOR 运算符。*s* 可以通过正常的 ICSP 协议自由读取，关键是揭示 *a* 和 *b* 中的未知位。
- en: Knowing *s*, he points out that overwriting the word with `0b11-111110000000`
    to zero *b* will give us ![image](../images/f0394-03.jpg), or just the inverse
    of *a*. It follows that *s* = *ã* ⊕ b = *s*[1] ⊕ *b*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 知道 *s* 后，他指出，通过将字写入 `0b11-111110000000` 来清零 *b*，我们将得到 ![image](../images/f0394-03.jpg)，即
    *a* 的反转。因此，*s* = *ã* ⊕ b = *s*[1] ⊕ *b*。
- en: Then we can declare that *b* = (*s* ⊕ *s*[1]) & `0x7f` and also that ![image](../images/f0394-03a.jpg)
    & `0x7f`. The fully reconstructed word from *s* and *s*[1] is easily computed
    for 14-bit PICs such as the PIC16C61, 62, 64, 65, 71, 73, 74, and 84.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以声明 *b* = (*s* ⊕ *s*[1]) & `0x7f`，并且 ![image](../images/f0394-03a.jpg)
    & `0x7f`。从 *s* 和 *s*[1] 重构的完整字可以轻松计算出适用于 PIC16C61、62、64、65、71、73、74 和 84 等 14
    位 PIC 的字。
- en: '![image](../images/f0394-03b.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0394-03b.jpg)'
- en: For 12-bit parallel programmed chips in the PIC12 series, the checksum algorithm
    is different. Here, *s* = *a* ⊕ *b* ⊕ *c* where *a* is the upper nybble, *b* the
    middle nybble, and *c* the lower nybble of the instruction word.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 PIC12 系列中的 12 位并行编程芯片，校验和算法有所不同。在这里，*s* = *a* ⊕ *b* ⊕ *c*，其中 *a* 是指令字的高四位，*b*
    是中间四位，*c* 是低四位。
- en: Instead of one write, as in the 14-bit chips, two writes are performed. After
    the first write of `0x0ff0` zeroes *c*, we see *s*[1] = *a* ⊕ *b*. We can then
    make a second write of `0x0f00` to zero *b*, leaving *s*[2] = *a*. Tying it all
    together, for twelve bit chips with observations of *s*, *s*[1] and *s*[2], our
    original instruction word is revealed with *a* = *s*[2], *b* = *s*[2] ⊕ *s*[1],
    and *c* = *s*[1] ⊕ *s*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 与 14 位芯片中的一次写入不同，这里执行了两次写入。在第一次写入 `0x0ff0` 以清零 *c* 后，我们看到 *s*[1] = *a* ⊕ *b*。接着，我们可以进行第二次写入
    `0x0f00` 来清零 *b*，留下 *s*[2] = *a*。将所有内容串联起来，对于具有 *s*、*s*[1] 和 *s*[2] 的 12 位芯片，我们的原始指令字将被揭示，其中
    *a* = *s*[2]，*b* = *s*[2] ⊕ *s*[1]，*c* = *s*[1] ⊕ *s*。
- en: '*w* = (*s*[2] & `0xf00`) + ((*s*[2] ⊕ *s*[1]) & `0xf0`) + ((*s*[1] ⊕ *s*) &
    `0xf`)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*w* = (*s*[2] & `0xf00`) + ((*s*[2] ⊕ *s*[1]) & `0xf0`) + ((*s*[1] ⊕ *s*) &
    `0xf`)'
- en: As for performing the writes, the paper becomes a little hard to follow. On
    the PIC16C71 and 61 models, the first 64 words of memory can simply be overwritten.
    *b* is zeroed and the algorithm for recovery gives those words with no ambiguity,
    but the rest of memory cannot be written so easily.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 至于如何执行写入，这篇论文变得有些难以理解。在PIC16C71和61型号中，前64个内存单元可以直接被覆盖。*b*被清零，恢复算法可以无歧义地恢复这些字，但其他内存则不能这么容易地写入。
- en: To program an already-locked chip in order to clear bits, he recommends over-volting
    the chip, then if that fails, overheating it, and if even that is not enough,
    also giving it a limited exposure to ultraviolet light. The voltage trick—perhaps
    related to the one in [Chapter H.1](app08.xhtml#app08_1)—is to power the chip
    at between six and nine volts while strictly limiting current to 100mA. Failing
    that, he suggests holding the temperature at 110 ^°C, being careful never to go
    above 140 ^°C.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编程一个已经被锁定的芯片以清除位，他建议先给芯片加电压，如果失败，再进行过热处理，如果还不够，再暴露在有限的紫外线下。这个电压技巧——可能与[H.1章](app08.xhtml#app08_1)中的类似——是将芯片的电压设置在6到9伏之间，同时严格限制电流为100mA。如果这仍然无效，他建议保持温度在110
    ^°C，并小心不要超过140 ^°C。
- en: If that is insufficient, he proposes exposing the die and calibrating the UV
    light power such that it takes ten minutes to erase a PIC. Then, at 110 ^°C, running
    thirty second exposures until the protection bit becomes set, allowing writes.
    `0x3f80` is then written to every word of memory, and the chip slowly cooled down
    to −20 ^°C. At this point, the protection bit will fall back to zero. Writes will
    no longer be allowed, but the cleared bits from the writes will also be zero.
    *s*[1] can then be read out of the locked chip.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这还不够，他提出通过暴露芯片并调整紫外线光的功率，使得擦除一个PIC芯片需要十分钟。然后，在110 ^°C的温度下，进行每次30秒的紫外线照射，直到保护位被设置，允许写入。接着，`0x3f80`被写入每个内存单元，芯片逐渐冷却到−20
    ^°C。此时，保护位将恢复为零。写入将不再被允许，但来自写入的清除位也会被置为零。*s*[1] 可以从锁定的芯片中读取出来。
- en: One further trick is described only in x86 assembly code to write `0b11111111000000`,
    which sets *b* to either `0x40` or `0x00`. This leaves a puzzle in decoding, and
    some helpful notes are given as to which of two possible instruction words would
    be the right guess.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个进一步的技巧仅在x86汇编代码中描述，用来写入`0b11111111000000`，这会将*b*设置为`0x40`或`0x00`。这给解码留下了一个难题，并提供了一些有用的注释，说明哪两个可能的指令字是正确的猜测。
- en: '**H.3 ESP32 TOCTOU for XIP**'
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**H.3 ESP32 TOCTOU用于XIP**'
- en: The ESP32 series from Espressif supports an execute-in-place (XiP) mode, in
    which instructions are fetched directly from SPI flash without first being copied
    into internal SRAM. This allows more RAM to be used by the application, at the
    cost of a slower execution speed.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Espressif的ESP32系列支持执行就地（XiP）模式，在该模式下，指令直接从SPI闪存中获取，而不是先复制到内部SRAM中。这使得应用程序可以使用更多的RAM，代价是执行速度变慢。
- en: Code is validated and a signature checked before execution, but Magesh (2023)
    describes a time-of-check to time-of-use (TOCTOU) attack against the signature
    validation by swapping between two SPI flash chips at runtime. This allows the
    signed code to be successfully measured before the unsigned code is executed.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行之前，代码会被验证并检查签名，但Magesh（2023）描述了一种时检查到时使用（TOCTOU）攻击，通过在运行时交换两个SPI闪存芯片来攻击签名验证。这使得签名代码能够在未签名代码执行之前成功地进行测量。
- en: Magesh notes that this trick does not work when flash encryption (AES XTS) is
    enabled, but he expects that an attacker might still exploit an encrypted image
    by randomizing a single page until a needed behavior is found, keeping all other
    pages intact.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Magesh指出，当启用闪存加密（AES XTS）时，这个技巧不起作用，但他预计攻击者可能通过随机化一个页面，直到找到所需行为，来利用加密图像，同时保持其他页面不变。
- en: '**H.4 DS5002 Chosen Ciphertext**'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**H.4 DS5002选择密文**'
- en: The DS5002 from Dallas Semiconductor is an early and creative attempt at code
    readout protection. Code is held encrypted in external memory, with the key held
    internally in battery backed SRAM. This creates an awkward situation for arcade
    game repairs, as the batteries in existing devices will eventually die. Without
    an exploit, the code needed to run the game will die with it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 来自达拉斯半导体的DS5002是早期并富有创意的代码读取保护尝试。代码保存在外部存储器中，并被加密，密钥则保存在内部的电池备份SRAM中。这对街机游戏修复造成了尴尬的局面，因为现有设备中的电池最终会耗尽。如果没有漏洞，运行游戏所需的代码也会随着电池的死去而消失。
- en: This chip’s instruction set is 8051\. Encryption occurs one byte at a time,
    independent of all other bytes but unique to that address. The transformation
    is the same for both opcodes and parameters.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这款芯片的指令集是 8051。加密是逐字节进行的，与其他字节无关，但与该地址是唯一对应的。无论是操作码还是参数，转换方式都是相同的。
- en: In addition to encryption, the DS5002 also performs dummy reads during cycles
    when the memory bus might otherwise be idle. The values fetched from these addresses
    are not used for anything; they only exist to confuse us.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 除了加密，DS5002 在内存总线可能处于空闲状态时还会执行虚拟读取。这些地址读取的值没有任何实际用途，只是为了迷惑我们。
- en: The DS5002 is also available as a module in sealed epoxy with a battery back-up.
    [Figures H.1](app08.xhtml#chHfig1) and [H.2](app08.xhtml#chHfig2) show this module
    in surface microscopy and X-ray.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: DS5002 也有封装成带电池备份的密封环氧模块版本。[图 H.1](app08.xhtml#chHfig1) 和 [H.2](app08.xhtml#chHfig2)
    展示了该模块的表面显微镜和 X 光图像。
- en: Kuhn (1996) and Kuhn (1998) presented a cryptographic attack against the chip,
    by first backing up a copy of the external SRAM and then feeding guesses into
    the CPU, watching the address change in response.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Kuhn（1996）和 Kuhn（1998）提出了一种针对该芯片的密码学攻击，首先备份外部 SRAM 的副本，然后将猜测的值输入到 CPU 中，观察地址的变化。
- en: For example, you might make a guess that a particular instruction is a branch.
    Because the addresses are scrambled, you can’t know that your guess is right just
    from the next address fetched. But if you change a parameter byte, almost every
    value will branch the addresses into a different direction.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可能猜测某条指令是分支指令。由于地址是加密的，你不能仅凭下一个获取的地址来确定你的猜测是否正确。但如果你改变一个参数字节，几乎每个值都会将地址分支到不同的方向。
- en: The point of the attack is to take that little piece of information, then use
    it to wedge apart many bytes of chosen ciphertext with known content, allowing
    us to execute arbitrary code.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击的关键在于获取那一点信息，并用它来分裂许多具有已知内容的选定密文字节，从而允许我们执行任意代码。
- en: You should also understand that bytes are encrypted individually and that they
    don’t impact later bytes. We don’t quite know how a byte will be scrambled, but
    for any specific address we can build up a table of bytes. The table is a unique
    mapping of a cipher byte to a clear byte, and the table does not change when the
    preceding byte in memory changes. As you’ll soon see, we don’t much care about
    the address that holds each byte. Instead, we care about forcing those bytes to
    known values and building lookup tables that let us choose the right ciphertext
    for specific plaintext.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该了解，每个字节是单独加密的，并且它们不会影响后续字节。我们并不完全知道每个字节将如何被加密，但对于每个特定地址，我们可以构建一个字节表格。该表格是一个唯一的加密字节与明文字节的映射，并且当内存中前一个字节发生变化时，表格不会改变。正如你很快会看到的，我们并不太关心每个字节所在的地址。相反，我们关心的是强制这些字节变成已知值，并构建查找表，从而让我们选择适合特定明文的密文。
- en: Wilhelmsen and Kirkegaard (2017) presents a more modern implementation of the
    same attack, and being written in a less academic style, it’s easier to follow.
    They describe a number of complications, with far less math.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Wilhelmsen 和 Kirkegaard（2017）提出了一种更现代的同类攻击实现，由于其写作风格较为通俗易懂，因此更容易理解。他们描述了许多复杂的情况，且数学内容远少于前者。
- en: '![Image](../images/f0398-01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0398-01.jpg)'
- en: 'Figure H.1: Dallas DS5002'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 H.1：Dallas DS5002
- en: '![Image](../images/f0399-01.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0399-01.jpg)'
- en: 'Figure H.2: Dallas DS5002 Module in X-ray'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 H.2：Dallas DS5002 模块的 X 光图像
- en: Many 8051 instructions take a few clock cycles to execute after being fetched.
    The DS5002 fetches unrelated instructions during this time to confuse an outside
    observer, making my earlier description a bit oversimplified.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 8051 指令在获取后需要几个时钟周期才能执行。DS5002 在这段时间内会获取与之无关的指令，以迷惑外部观察者，这使得我之前的描述显得有些过于简化。
- en: Also, the interrupt table is held in internal SRAM so the attacker can’t know
    when interrupts have been fired. This matters a lot at reset time.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，中断表保存在内部 SRAM 中，因此攻击者无法知道中断何时被触发。这在重置时尤为重要。
- en: It’s necessary to know when the first real instruction is fetched, because the
    first observed access might be a dummy read. They do this by attempting all 256
    values at that address, and if none of those values change the subsequent memory
    accesses, they then know that the byte is a dummy and might freely be ignored.
    This is repeated until they’ve identified the first real instruction.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 确定第一次真实指令何时被提取是必要的，因为首次观察到的访问可能是虚拟读取。他们通过尝试该地址上的所有256个值来实现这一点，如果这些值没有改变随后的内存访问，他们就知道该字节是虚拟的，可以自由忽略。这个过程会重复进行，直到他们识别出第一次真实的指令。
- en: Having identified the location of the first instruction byte, they next need
    to produce some bytes of their own to fit there. Because the DS5002 sets Port
    3 to `FF` at reset, they can brute-force 05 b0 (`inc p3`) as the first two instruction
    bytes to flip Port 3 back to `00`. And I mean that they brute-force it; there
    are only 65,536 combinations.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定了第一个指令字节的位置之后，他们接下来需要制作一些字节来适应那里。由于DS5002在重置时将Port 3设置为`FF`，他们可以通过暴力破解`05
    b0`（`inc p3`）作为前两个指令字节，将Port 3反转回`00`。我指的是暴力破解它；只有65,536种组合。
- en: 'At this point, they have one ciphertext/plaintext mapping of the first two
    bytes but don’t yet have other mappings, so they can’t arbitrarily change them.
    To get a mapping for the third byte, they brute-force the first byte until they
    get `75`, the opcode for `mov iram addr, #data`, at which point they can run `75
    b0 xx` to write all 256 values of cleartext into Port 3\. Now the third byte is
    completely cracked, even though only two values are mapped for the first byte
    and just one value for the second byte.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '在这一点上，他们已经得到了前两个字节的一个密文/明文映射，但还没有其他的映射，因此不能随意更改它们。为了得到第三个字节的映射，他们暴力破解第一个字节，直到得到`75`，即`mov
    iram addr, #data`的操作码，此时他们可以执行`75 b0 xx`将所有256个明文值写入Port 3。现在，第三个字节完全破解，尽管对于第一个字节只映射了两个值，对于第二个字节仅映射了一个值。'
- en: They then adjust the first byte until it becomes anything like a `nop` and adjust
    the second byte until it becomes `75`. Then they can scan every value of the fourth
    byte just as they did the third! Repeating this gives them a few bytes of shellcode
    that they can force into the chip, preceded by two `nop` bytes that don’t much
    matter.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，他们调整第一个字节，直到它变成类似`nop`的指令，并调整第二个字节，直到它变成`75`。接着，他们可以像第三个字节那样扫描第四个字节的每个值！重复这一过程，他们能够得到一些shellcode字节，并可以将其强制写入芯片，前面是两个不重要的`nop`字节。
- en: 'Finally, they insert little bits of shellcode. This one gives them the boundary
    between code and data memories:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，他们插入了一些小的shellcode。这个代码给出了代码和数据内存之间的边界：
- en: '![Image](../images/f0401-01.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0401-01.jpg)'
- en: 'This one dumps the code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个用来转储代码：
- en: '![Image](../images/f0401-02.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0401-02.jpg)'
- en: 'And this one dumps the data:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个用来转储数据：
- en: '![Image](../images/f0401-03.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0401-03.jpg)'
- en: There are a lot of resets involved in this attack, but they report just two
    minutes to brute-force the first range of instructions and just four minutes to
    dump 32 kilobytes of firmware.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个攻击涉及大量的重置操作，但他们报告仅用了两分钟就通过暴力破解了第一组指令，并且只用了四分钟就转储了32千字节的固件。
- en: '**H.5 SAMA5 CMAC, SPA, Keys**'
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**H.5 SAMA5 CMAC, SPA, 密钥**'
- en: Janushkevich (2020) describes three vulnerabilities in the Microchip (née Atmel)
    SAMA5 series of secure microcontrollers.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Janushkevich（2020）描述了Microchip（前身为Atmel）SAMA5系列安全微控制器中的三个漏洞。
- en: This series contains a boot monitor called SAM Boot Assistance (SAM-BA) that
    allows authenticated and encrypted applets to be uploaded and then executed. These
    applets are often used as drivers, implementing support for new memory devices
    in RAM-loadable modules to keep the bootloader small, while relying upon cipher-based
    message authentication code (CMAC) authentication to keep things secure.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 该系列包含一个名为SAM Boot Assistance（SAM-BA）的引导监控程序，允许上传经过认证和加密的小程序并执行。这些小程序通常用作驱动程序，在RAM加载模块中实现对新内存设备的支持，以保持引导加载程序的体积较小，同时依赖基于密码的消息认证码（CMAC）认证来保证安全性。
- en: 'Note well: CMAC authentication is often thought of as a fast alternative to
    public-key signatures. When things go well, CMAC offers authentication in far
    less time than public-key signatures. Unlike signatures, things can go quite poorly
    because CMAC depends upon a shared secret key that either party can leak. Think
    of it like a letter: if we were writing to one another with public-key cryptography,
    my signature would guarantee that the letter came from someone with a key that
    only I should have access to and that only I might leak to a third-party. But
    if we use CMAC to authenticate our letters, you *and* I have access to the authentication
    key. *Either* of us might leak that key to a third-party.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意：CMAC 身份验证通常被认为是公钥签名的快速替代方案。当一切顺利时，CMAC 提供的身份验证比公钥签名要快得多。与签名不同，CMAC 可能会出现很大问题，因为
    CMAC 依赖于共享的秘密密钥，而任一方都可能泄漏该密钥。可以将其想象成一封信：如果我们使用公钥加密通信，我的签名将保证信件来自于只有我可以访问的密钥，并且只有我才可能将其泄漏给第三方。但如果我们使用
    CMAC 来验证我们的信件，你*和*我都可以访问身份验证密钥。*我们中的任何一个*都可能将该密钥泄漏给第三方。
- en: Some chips include SAM-BA in ROM. Others have no ROM and instead link the boot
    assistance monitor to flash memory. A GPIO pin configures the bootloader entry,
    and SAM-BA supports both UART and USB communications to the host computer. The
    standard procedure is that when the configuration pin is low at reset or the application’s
    reset vector is `0xffffffff`, the boot-loader will first attempt enumeration over
    USB and then fall back to a UART console.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一些芯片将 SAM-BA 包含在 ROM 中。其他芯片没有 ROM，而是将启动辅助监视器链接到闪存。一个 GPIO 引脚配置引导加载程序入口，SAM-BA
    支持通过 UART 和 USB 与主机计算机通信。标准程序是，当配置引脚在复位时为低电平或应用程序的复位向量为 `0xffffffff` 时，启动加载程序将首先尝试通过
    USB 枚举，然后回退到 UART 控制台。
- en: SAM-BA has a fancy GUI client and TCL scripting library, but for the first bug,
    we’ll stick to the text protocol of the UART variant. Microchip documents loading
    a secure applet with the following transactions, where `applet.cip` is an encrypted
    and signed applet binary that is 9,870 bytes in size.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: SAM-BA 具有一个华丽的 GUI 客户端和 TCL 脚本库，但对于第一个漏洞，我们将坚持使用 UART 变体的文本协议。Microchip 文档中载入安全小程序的过程包括以下交易，其中
    `applet.cip` 是一个加密并签名的小程序二进制文件，大小为 9,870 字节。
- en: '![Image](../images/f0402-01.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0402-01.jpg)'
- en: During this procedure, the `SAPT` command handler loads the applet to `0x220000`
    in SRAM, checks the CMAC authentication, and decrypts the applet in place. The
    result of the authentication check is placed in a global variable. If the CMAC
    were wrong, the latter `CACK` message would include an error code and the global
    variable would indicate a bad authentication.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，`SAPT` 命令处理程序将小程序加载到 SRAM 的 `0x220000` 地址，检查 CMAC 身份验证，并在原地解密小程序。身份验证检查的结果被放置在一个全局变量中。如果
    CMAC 错误，后续的 `CACK` 消息将包含错误代码，并且全局变量将指示身份验证失败。
- en: After the applet is loaded, the `SMBX` command is used to load the mailbox.
    `mailbox.bin` is neither encrypted nor signed, and it loads to the mailbox area
    within the application image at `0x22-0004`. A matching command, `RMBX`, will
    retrieve the mailbox after execution, to allow for bidirectional communication.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 小程序加载完成后，`SMBX` 命令用于加载邮件箱。`mailbox.bin` 既没有加密也没有签名，它被加载到应用程序镜像中的邮件箱区域，地址为 `0x22-0004`。一个匹配的命令，`RMBX`，将在执行后检索邮件箱，以支持双向通信。
- en: '![Image](../images/f0403-01.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0403-01.jpg)'
- en: Now that the applet is loaded, the `EAPP` command can be used to execute the
    applet against the mailbox message. In addition to the mailbox, `SFIL` and `RFIL`
    commands exit to send or receive a file from the device.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 小程序加载完成后，`EAPP` 命令可以用来执行小程序并处理邮件箱消息。除了邮件箱之外，`SFIL` 和 `RFIL` 命令可用于向设备发送或接收文件。
- en: '![Image](../images/f0403-02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0403-02.jpg)'
- en: Now that we’ve covered the basics of the tutorial, let’s peek at the first exploitable
    bug. Janushkevich first notes that the `RMBX` command allows the mailbox to be
    retrieved even when it has not been loaded. Because the mailbox and the applet
    overlap, this allows him to read back part of the applet from memory.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经覆盖了教程的基础内容，让我们来看看第一个可利用的漏洞。Janushkevich 首先注意到，`RMBX` 命令允许即使在邮件箱尚未加载的情况下，也能检索到邮件箱。因为邮件箱和小程序重叠，这使得他可以从内存中读取小程序的部分内容。
- en: He then tried first a signed, encrypted applet and an unsigned, unencrypted
    applet. `RMBX` returned pieces of the first applet in cleartext, showing that
    it was decrypted to memory before being executed. The unsigned applet also had
    pieces returned from the mailbox without corruption, implying that when CMAC validation
    fails, the unvalidated message remains in memory without being scrambled by decryption.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，他首先尝试了一个已签名、已加密的小程序和一个未签名、未加密的小程序。`RMBX`返回了第一个小程序的明文部分，显示它在执行前被解密到内存中。未签名的小程序也有部分从邮箱中返回而没有损坏，这意味着当CMAC验证失败时，未验证的消息仍然保留在内存中，没有被解密过程混淆。
- en: Finally, he tried executing the applet with `EAPP`, `SFIL`, and `RFIL`. All
    three—I shit you not—executed the unencrypted, unsigned applet without complaint.
    It seems that the `SAPT` command records that the authentication failed, but the
    commands that execute the applet do not bother to check that variable. This is
    tracked as CVE-2020-12787.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，他尝试了用`EAPP`、`SFIL`和`RFIL`执行小程序。这三者——我不是开玩笑——都无故执行了未加密、未签名的小程序。似乎`SAPT`命令记录了身份验证失败，但执行小程序的命令并未检查这个变量。这被记录为CVE-2020-12787。
- en: As a second attack, he attached a ChipWhisperer to a modified SAMA5D2-XULT dev
    kit to take a look at the power consumption when that chip performs CMAC authentication.
    By identifying a point in time when power traces wildly diverge based upon a carry-in
    subtraction of a provided CMAC word from the computed word, he is able to leak
    bits of the correct CMAC of the message, starting from the most significant bit
    and working his way down to the least. In 1,300 power measurements or twenty minutes,
    this lets him forge a CMAC authentication for bootstrapping an image, loading
    a SAM-BA applet, or installing a key. This is tracked as CVE-2020-12788.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第二次攻击，他将一个ChipWhisperer连接到修改过的SAMA5D2-XULT开发板上，查看当该芯片执行CMAC身份验证时的功耗。通过识别一个时刻，当功耗跟随提供的CMAC词与计算出的词之间的进位减法发生剧烈变化时，他能够泄漏消息的正确CMAC的位，从最重要的位开始，一直到最不重要的位。在1,300次功率测量或二十分钟内，这使他能够伪造一个CMAC身份验证，用于引导镜像的启动、加载SAM-BA小程序或安装密钥。这被记录为CVE-2020-12788。
- en: 'His third attack against this series is simple but brutal: the CMAC keys used
    by this bootloader are hardcoded and can be dumped by an applet using the vulnerabilities
    we’ve already discussed. These keys were verified by decrypting published applets,
    allowing for their reverse engineering and, perhaps someday, their exploitation.
    CVE-2020-12789.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 他对这一系列的第三次攻击既简单又残酷：该引导加载程序使用的CMAC密钥是硬编码的，并且可以通过利用我们已经讨论过的漏洞，由小程序进行转储。这些密钥通过解密已发布的小程序进行验证，从而实现逆向工程，也许有朝一日可以被利用。这被记录为CVE-2020-12789。
