- en: '**2 STM32F217 DFU Exit**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2 STM32F217 DFU 退出**'
- en: 'Reported privately in Goodspeed (2012) to ST Microelectronics, this chapter
    is the first public description of a remote code execution exploit for the STM32F217,
    STM32F407, and other chips in the family with mask ROM implementations of the
    USB device firmware update (DFU) protocol. This bug is nice because it’s so straightforward:
    the DFU implementation restricts access to reading and writing memory of a locked
    chip, but changing the target address and executing the application are both freely
    allowed.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 Goodspeed（2012）私下向 STMicroelectronics 报告，本章是首次公开描述 STM32F217、STM32F407 以及其他系列芯片在采用
    USB 设备固件更新（DFU）协议的掩码 ROM 实现时的远程代码执行漏洞。这个漏洞的好处在于它非常简单：DFU 实现限制了对加密芯片内存的读取和写入，但更改目标地址和执行应用程序则是完全允许的。
- en: To dump a locked chip’s memory, we’ll first use JTAG to place some shellcode
    into unused SRAM, then reset the chip and use DFU over USB to execute that shellcode,
    dumping all of memory out of the GPIO pins. The bootloader’s dialect of the DFU
    protocol is documented in STMicro (2010); be sure to keep that handy as you read
    this.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要提取加密芯片的内存，我们首先使用 JTAG 将一些 Shell 代码放入未使用的 SRAM 中，然后重置芯片并通过 USB 使用 DFU 执行该 Shell
    代码，从 GPIO 引脚输出所有内存内容。引导加载程序使用的 DFU 协议方言在 STMicro（2010）中有文档说明；在阅读本章节时请务必随时查阅。
- en: '![Image](../images/f0016-01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0016-01.jpg)'
- en: 'Figure 2.1: STM32F217'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1：STM32F217
- en: '![Image](../images/f0017-01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0017-01.jpg)'
- en: 'Figure 2.2: Simplified STM32F217 Memory Map'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2：简化版 STM32F217 内存映射
- en: '**JTAG and Bootloaders**'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**JTAG 和引导加载程序**'
- en: 'Like most STM32 chips discussed in this book, the STM32F217 has three protection
    levels: 0, 1, and 2\. Level 0 is unprotected, and if a device is in this level,
    you can simply read out the firmware and close this book. Level 2 allows no debugging
    of any kind, and devices in that level are often attacked by first downgrading
    protection to Level 1.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书讨论的大多数 STM32 芯片一样，STM32F217 也有三个保护级别：0、1 和 2。级别 0 无保护，如果设备处于此级别，你可以直接读取固件并关上这本书。级别
    2 不允许任何形式的调试，通常攻击者会首先通过降级保护到级别 1 来对该级别的设备进行攻击。
- en: Level 1 is a middle ground, and the one you’ll most often find in production
    devices. In this mode, attaching a JTAG debugger will disable access to flash
    memory but preserve access to the CPU, to RAM, and to ROM. There is also the ability
    to downgrade from Level 1 to Level 0, at the cost of mass erasing flash memory
    and destroying whatever might be held there. Developers like this mode because
    failure analysis remains possible, but they are still told that their firmware
    will remain safe against extraction.^([1](footnotes.xhtml#ch2fn1))
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 级别 1 是一个折中的方式，也是你在生产设备中最常见的模式。在此模式下，连接 JTAG 调试器将禁用对闪存的访问，但仍然可以访问 CPU、RAM 和 ROM。还可以从级别
    1 降级到级别 0，但这会导致闪存被全部擦除，并摧毁其中的所有数据。开发者喜欢这种模式，因为失败分析仍然是可能的，同时他们也被告知固件将保持安全，防止被提取。^([1](footnotes.xhtml#ch2fn1))
- en: The STM32F217 also has three bootloaders in ROM, one each for accepting firmware
    updates by UART, USB DFU, and CAN bus. These three bootloaders share very little
    code with one another, and they implement the Level 1 protections in *software*,
    rather than relying on the hardware protections that exist when connecting a JTAG
    debugger. This is good for us, because it means that if we can trick any one of
    these three bootloaders into reading flash memory, we’ll be able to choose that
    bootloader and dump the chip’s firmware.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: STM32F217 还在 ROM 中包含了三个引导加载程序，分别用于通过 UART、USB DFU 和 CAN 总线接受固件更新。这三个引导加载程序之间几乎没有共享代码，它们在*软件*中实现了级别
    1 的保护，而不是依赖于连接 JTAG 调试器时存在的硬件保护。这对我们来说是有利的，因为这意味着如果我们能够诱使这三个引导加载程序中的任何一个读取闪存，我们就可以选择该引导加载程序并提取芯片的固件。
- en: '**The USB DFU Bootloader**'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**USB DFU 引导加载程序**'
- en: This chapter’s bug is found in the DFU bootloader, which is accessed over USB.
    I began by writing a DFU client compatible with the chip, then used that to dump
    the ROM at `0x1fff0000` for reverse engineering in order to learn all the rules.^([2](footnotes.xhtml#ch2fn2))
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的漏洞出现在通过 USB 访问的 DFU 引导加载程序中。我首先编写了一个与芯片兼容的 DFU 客户端，然后用它提取了位于 `0x1fff0000`
    的 ROM 进行逆向工程，以便了解所有规则。^([2](footnotes.xhtml#ch2fn2))
- en: I’ll briefly cover the DFU protocol here, but the original documentation in
    Henry et al. (2004) is what you should read to really understand or implement
    the protocol.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在此简要介绍 DFU 协议，但要真正理解或实现该协议，应该阅读 Henry 等人（2004）的原始文档。
- en: 'The first thing to know is that DFU supports the following seven requests:
    `Detach`, `Download`, `Upload`, `Get Status`, `Clear Status`, `Get State`, and
    `Abort`. Addressing is handled by a block index, rather than an address, and this
    block index is relative to an address pointer.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先需要了解的是，DFU支持以下七个请求：`Detach`、`Download`、`Upload`、`Get Status`、`Clear Status`、`Get
    State`和`Abort`。寻址是通过块索引来处理的，而不是地址，这个块索引相对于地址指针。
- en: Most high level commands are implemented by calling `Upload` or `Download`,
    followed by `Get Status` to learn the result of the transaction.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数高级命令是通过调用`Upload`或`Download`实现的，接着使用`Get Status`来了解事务的结果。
- en: Block indexes begin at 2 for data transactions, rather than 0 or 1 as we might
    expect. If you upload 32 bytes to index 2, they will be written to the address
    pointer. Uploading 32 bytes to index 3 will write them 32 bytes after the address
    pointer, and uploading 64 bytes to the same index will write them 64 bytes after
    the address pointer.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 块索引从2开始用于数据事务，而不是我们预期的0或1。如果你将32个字节上传到索引2，它们将被写入地址指针。将32个字节上传到索引3将把它们写入地址指针之后的32个字节，上传64个字节到相同的索引将把它们写入地址指针之后的64个字节。
- en: An index of 1 is never used. Index 0 indicates a special block, where the first
    byte is one of a few secret commands. Downloading `[0x41]` will mass erase all
    flash memory. An empty string, `[]`, will detach the DFU session and execute the
    application at the target address. Downloading `[0x21, 0x1c, 0x32, 0x00, 0x08]`
    will set the target address pointer to `0x0800321c`. Downloading `[0x92]` will
    first mass erase all of memory, then also unlock the chip to RDP Level 0.^([3](footnotes.xhtml#ch2fn3))
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 索引1从不使用。索引0表示一个特殊块，其中第一个字节是几个秘密命令之一。下载`[0x41]`将会批量擦除所有闪存。一个空字符串`[]`将断开DFU会话，并执行目标地址的应用程序。下载`[0x21,
    0x1c, 0x32, 0x00, 0x08]`将把目标地址指针设置为`0x0800321c`。下载`[0x92]`将首先批量擦除所有内存，然后还会解锁芯片到RDP
    Level 0。^([3](footnotes.xhtml#ch2fn3))
- en: '![Image](../images/f0020-01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0020-01.jpg)'
- en: 'Figure 2.3: DFU Session, from Henry et al. (2004).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3：DFU会话，来自Henry等人（2004年）。
- en: '![Image](../images/f0020-02.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0020-02.jpg)'
- en: 'Figure 2.4: Zero Block DNLOAD Extensions from STMicro (2010)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4：STMicro的零块DNLOAD扩展（2010年）
- en: You can lock the chip by downloading `[0xFF, 0xFF]` to target address `0x1fffc000`.
    In this case, the index is 2 and we are writing to the specified address, not
    to the special zero block.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将`[0xFF, 0xFF]`下载到目标地址`0x1fffc000`来锁定芯片。在这种情况下，索引为2，我们正在写入指定的地址，而不是写入特殊的零块。
- en: 'Once the chip is locked to RDP Level 1, a connection to the DFU ROM is restricted
    in the following ways: You cannot `Upload` or `Download` except from certain special
    addresses. Special commands at index 0 are individually allowed or denied. Of
    particular interest is that you may still set the address pointer, and you may
    exit the DFU ROM.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦芯片被锁定到RDP Level 1，连接到DFU ROM的权限将受到以下限制：除非从某些特殊地址，否则不能进行`Upload`或`Download`操作。索引0处的特殊命令将单独允许或拒绝。特别需要关注的是，你仍然可以设置地址指针，并且你可以退出DFU
    ROM。
- en: '**The Bug**'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**错误**'
- en: After all that background information, the bug itself isn’t complicated. First,
    JTAG allows us to write an application into unused SRAM, where it will persist
    after a reset of the chip re-connects flash memory and begins to execute the DFU
    bootloader from ROM. Second, the DFU bootloader allows us to set the address pointer
    despite the lock, and when we exit the bootloader, execution continues to the
    application at the target of the pointer!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了所有这些背景信息后，错误本身并不复杂。首先，JTAG允许我们将应用程序写入未使用的SRAM中，并且该应用程序在芯片重置后仍然会保留，在此时闪存被重新连接并开始从ROM执行DFU引导加载程序。其次，DFU引导加载程序允许我们设置地址指针，尽管存在锁定，当我们退出引导加载程序时，执行将继续到指针指向的目标应用程序！
- en: In practical terms, this means that if the address pointer is set to `0x20003000`,
    the bootloader will jump at exit to the value stored in `0x20003004`. This address
    was chosen because it happens to be in SRAM and unused by the DFU bootloader,
    so that it won’t be overwritten by the bootloader’s stack or global variables.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从实际角度来看，这意味着如果地址指针设置为`0x20003000`，引导加载程序将在退出时跳转到存储在`0x20003004`的值。选择这个地址是因为它恰好位于SRAM中，并且DFU引导加载程序未使用该地址，因此它不会被引导加载程序的堆栈或全局变量覆盖。
- en: The shellcode that we execute from SRAM is rather simple. It transmits all flash
    memory in a loop using the SPI protocol, with pin PG6 as MOSI and pin PG8 as CLK.
    This is nice and easy to capture with a logic analyzer, as shown in [Figure 2.6](ch02.xhtml#ch2fig6).
    If these pins also have LEDs, they will blink to indicate a successful exploit.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从 SRAM 执行的 shellcode 相当简单。它通过 SPI 协议循环传输所有闪存数据，使用 PG6 引脚作为 MOSI，PG8 引脚作为 CLK。这很容易通过逻辑分析仪捕获，如[图
    2.6](ch02.xhtml#ch2fig6)所示。如果这些引脚上也有 LED，它们将闪烁以表示成功利用。
- en: Because our output format is essentially SPI bus traffic, we can use a logic
    analyzer’s SPI decoder to extract the firmware image from the recording.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的输出格式本质上是 SPI 总线流量，我们可以使用逻辑分析仪的 SPI 解码器从记录中提取固件镜像。
- en: '**Exploitation**'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**利用**'
- en: ST Micro has patched the bug in recent revisions, so a little reverse engineering
    of your target’s ROM might be a good idea to verify that the bug is present. A
    better exploit should be possible by loading 2kB into the USB frame buffer, then
    executing the part of them that is not clobbered by shorter commands.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: ST Micro 已经在最近的修订版本中修复了这个漏洞，因此对目标 ROM 进行一些逆向工程可能是一个不错的主意，以验证该漏洞是否存在。通过将 2KB
    加载到 USB 帧缓冲区中，然后执行其中未被较短命令覆盖的部分，应该能够实现更好的利用。
- en: While this particular exploit only works from RDP Level 1, a glitching attack
    such as the one described in [Chapter E.5](app05.xhtml#app05_5) can downgrade
    the protection from Level 2 to Level 1.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个特定的漏洞只适用于 RDP Level 1，但如[第 E.5 章](app05.xhtml#app05_5)中所描述的故障攻击可以将保护从 Level
    2 降级到 Level 1。
- en: '![Image](../images/f0023-01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0023-01.jpg)'
- en: 'Figure 2.5: STM32 Shellcode'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '图 2.5: STM32 Shellcode'
- en: '![Image](../images/f0024-01.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0024-01.jpg)'
- en: 'Figure 2.6: STM32F217 Firmware Dump'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '图 2.6: STM32F217 固件转储'
