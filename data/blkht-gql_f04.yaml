- en: Foreword
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: Today, building software and systems is a lot like assembling an IKEA kitchen—on
    your front lawn. People are taking parsers, utilities, and other components originally
    intended for use with trusted data by a person on their own command line, and
    exposing them to the internet. With each new query language and interpreter/parser
    combination (GraphQL being one of the more recent), the old becomes new again.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，构建软件和系统有点像在你的前院组装宜家厨房。人们正在将解析器、实用程序和其他最初用于由个人在其自己的命令行上使用的受信任数据的组件，暴露在互联网上。随着每种新的查询语言和解释器/解析器组合（GraphQL是其中较新的一种），旧事物变得新起来。
- en: Vulnerability classes like denial of service (DoS), injection, information disclosure,
    and authentication/authorization bypasses have persisted in pretty much every
    data format and language parsed with regular expressions over the course of my
    career. Some of this is because inherent weaknesses exist in the underlying technology
    that aren’t well understood by developers of new languages. But it’s more than
    a technology problem that makes these classes of vulnerabilities hard to solve.
    It’s an ecosystem problem.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我职业生涯中，像拒绝服务（DoS）、注入、信息泄露以及认证/授权绕过这样的漏洞类型，几乎出现在使用正则表达式解析的每一种数据格式和语言中。其中一些问题源于底层技术中存在的固有弱点，这些弱点并未被新语言开发者充分理解。但这些漏洞类别难以解决不仅仅是技术问题，更是生态系统问题。
- en: 'In most cases, because of the inherent design of the components being exposed
    to the internet, layering security controls on top of them is challenging to do
    without losing functionality or efficiency. Take regular expressions themselves:
    the ability to self-reference and back-reference is what makes them so powerful,
    but that same ability also creates an inherent DoS risk. To parse a statement,
    a regular expression can back-reference or self-reference as many times as necessary.
    Yet for an attacker, *necessary* might mean *until you pay me to stop*.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，由于暴露在互联网上的组件的固有设计，要在不损失功能或效率的情况下添加安全控制层是具有挑战性的。以正则表达式为例：其自引用和反向引用的能力使其非常强大，但这种能力也同时带来固有的DoS风险。为了解析一个语句，正则表达式可以反复进行自引用或反向引用。然而对于攻击者来说，“必要”可能意味着“除非你付我停止为止”。
- en: Developers can reasonably assume that command line users working on their own
    systems will submit well-formulated requests, designed to end in computationally
    reasonable times. After all, who would DoS themselves, except by accident? But
    that foundational assumption doesn’t hold true on the internet. Even for those
    incredibly rare people who consider and understand how online threats invalidate
    the fundamental design assumptions of the component they’re reusing, compensating
    for a design decision is tricky. More commonly, people don’t even know there’s
    a problem to consider.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者可以合理地假设在自己系统上工作的命令行用户将提交良好格式化的请求，并设计使其在计算合理时间内结束。毕竟，除了偶然之外，谁会自己DoS自己呢？但这一基础假设在互联网上不成立。即使对于那些极少数考虑和理解在线威胁如何使得其正在重用的组件的基本设计假设失效的人们，弥补设计决策也是棘手的。更普遍的情况是，人们甚至不知道存在这样的问题需要考虑。
- en: Then you have the fact that usability is a thing. Most of our internet-facing
    technology is supposed to be forgiving in the case of errors so that our lowest-common-denominator
    internet users can handle it. It should be autocorrecting so that errors are handled
    gracefully. And, at the same time, that technology needs to be secure against
    the most technically savvy, bored, or determined attackers. No effective self-correcting
    and communicative system can also keep a person from inferring that data is correct
    or has been corrected. A shrewd user with no prior knowledge of the system can
    often infer the data it contains by making a short series of educated guesses
    and abusing the communicative aspects of the technology. This ability to infer
    and then confirm is the source of many subtle information disclosure risks.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可用性也是一个问题。我们大部分面向互联网的技术应当对错误宽容处理，以便最普通的互联网用户能够应对。它应当能够自动校正，使错误得到优雅处理。同时，这些技术需要对抗最富技术挑战的、无聊的或决心很大的攻击者。没有有效的自校正和沟通系统也能阻止一个人推断数据是否正确或已被更正。一个精明的用户在不了解系统的情况下，通常可以通过一系列有根据的猜测并滥用技术的沟通特性推断其包含的数据。这种推断和确认能力是许多微妙信息泄露风险的根源。
- en: In a broader sense, many of the specifications for these data formats and languages
    are insecure as a consequence of the design process. Standards for things like
    PDFs and images often include a mishmash of requirements dictated by the biggest
    vendors at the time that the standard was made. The core specification contains
    what the vendors could agree on, while optional items accommodate each vendor’s
    peculiar features and design decisions. The patchwork created by committees with
    vested interests doesn’t exactly inspire the group to think about security. And
    as data becomes the new currency, committees are almost deliberately adding privacy
    and security risks to standards so that companies can continue to perform data
    collection (and profit accordingly).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 从更广泛的角度来看，这些数据格式和语言的许多规范由于设计过程的缘故本身就不安全。像 PDF 和图像这样的标准通常包含了由当时最大供应商所主导的一堆需求。这些标准的核心规范包含了供应商们能够达成一致的内容，而可选项则容纳了每个供应商特有的功能和设计决策。由有利益关系的委员会所编制的拼凑方案，显然并不会激励小组去思考安全问题。随着数据成为新的货币，委员会几乎是故意在标准中加入隐私和安全风险，以便公司能够继续进行数据收集（并从中获利）。
- en: Lastly, education about these issues is sorely lacking, which brings us back
    to this book. If you’re learning how to attack interpreted query languages and
    data formats for the first time, this book should give you the foundational approaches
    to do more than just hack GraphQL. The same techniques, thought processes, and
    issue classes described in the book will likely serve your career for the next
    decade and beyond.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于这些问题的教育普遍不足，这也是我们回到本书的原因。如果你是第一次学习如何攻击解释型查询语言和数据格式，那么本书应该为你提供了扎实的基础方法，让你不止是破解
    GraphQL。书中描述的相同技术、思维过程和问题类别，可能会为你未来十年甚至更长时间的职业生涯提供帮助。
- en: If you’re reading this book to better understand GraphQL (or skimming it in
    the mad rush to prepare for your next assignment), you’ll find it to be a great
    briefing created by two people who have had to do their own fair share of hacking
    and who know the information you’ll need. This includes a useful checklist of
    issues to look out for, insight into a bunch of little gotchas, and GraphQL-specific
    quirks and subtleties that would otherwise take you a lot of time and research
    to uncover.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你阅读这本书是为了更好地理解 GraphQL（或者在为下一个任务做匆忙准备时浏览它），你会发现它是由两位曾亲自进行过大量黑客实践的人编写的精彩简报，书中包含了你需要的信息。这包括一份有用的检查清单，提醒你需要注意的问题，洞察一些小的陷阱，以及
    GraphQL 特有的怪癖和细节，这些东西否则可能需要你花费大量时间和精力去研究。
- en: Nick Aleks and Dolev Farhi have both used this information to break and build
    complex systems, so they can describe the builder’s perspective as well as the
    breaker’s, an angle often missing in hacking books. Their insights into the GraphQL
    ecosystem should help quickly elevate your work beyond *finding the vulnerability*
    and allow you to move to an adversarial simulation or threat-hunting approach.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Nick Aleks 和 Dolev Farhi 都曾利用这些信息来破解和构建复杂的系统，因此他们能够从建设者和破坏者的角度进行描述，这是许多黑客书籍中常常缺失的视角。他们对
    GraphQL 生态系统的洞察力应该能帮助你迅速将工作提升到*发现漏洞*之外，并能够转向对抗性模拟或威胁狩猎的方法。
- en: And if you’re ever working on a new framework, this book will be a great resource
    for helping you change your little part of the ecosystem. By studying common technical
    problems and understanding GraphQL’s ecosystem challenges, hopefully you’ll pick
    up tips on what to avoid and concepts that will translate into more secure design
    decisions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在开发一个新的框架，本书将是帮助你改变生态系统中小部分的宝贵资源。通过研究常见的技术问题并理解 GraphQL 生态系统中的挑战，希望你能学到一些避免问题的技巧，并能掌握能够转化为更安全设计决策的概念。
- en: Opheliar Chan
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Opheliar Chan
- en: OWASP Toronto chapter lead
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP 多伦多分会负责人
