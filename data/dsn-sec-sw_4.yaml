- en: Afterword
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后记
- en: We are called to be architects of the future, not its victims.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们被召唤成为未来的建筑师，而不是它的受害者。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —R. Buckminster Fuller
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —R·巴克敏斯特·富勒
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: Having watched computing evolve over the last 50 years, I have learned that
    attempting to predict the future is folly. However, to conclude this book I would
    like to offer my thoughts about future directions in security that I think would
    be valuable, unlikely as some of them may be. The following are by no means predictions,
    but rather possibilities that would constitute significant progress.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去50年里看着计算技术发展，我已经明白，试图预测未来是愚蠢的。然而，为了总结本书，我想提出我关于安全领域未来方向的想法，尽管其中一些可能不太可能实现。我接下来的观点绝非预测，而是一些能够构成重大进展的可能性。
- en: The nascent internet received a wake-up call in 1988 when the Morris worm first
    demonstrated the potential power of online malware and how it can spread by exploiting
    existing vulnerabilities. More than 30 years later, though we have made astounding
    progress on many fronts, I wonder if we have fully understood these risks and
    prioritized our mitigation efforts sufficiently. Reports of attacks and private
    data disclosures are still commonplace, and no end is in sight. Sometimes, it
    seems that the attackers are having a field day while the defenders are frantically
    treading water. And it’s important to bear in mind that many incidents are kept
    secret, or may even persist undetected, so the reality is almost certainly worse
    than we know. In large part, we’ve learned to live with vulnerable software.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 新生的互联网在1988年迎来了一个警钟，当时莫里斯蠕虫首次展示了在线恶意软件的潜在威力，以及它如何通过利用现有漏洞传播。30多年过去了，尽管我们在许多方面取得了惊人的进展，但我仍然怀疑我们是否已经完全理解这些风险，并足够重视减轻风险的工作。攻击和私人数据泄露的报道仍然屡见不鲜，且看不到尽头。有时，似乎攻击者正在畅快攻击，而防御者却在拼命应对。而且值得记住的是，许多事件是保密的，甚至可能在未被察觉的情况下持续存在，所以现实情况几乎肯定比我们知道的更糟。很大程度上，我们已经学会了与脆弱的软件共存。
- en: 'What’s remarkable is that, despite our imperfect systems continuing to be compromised,
    everything somehow manages to keep going. Perhaps this is why security problems
    persist: the status quo is good enough. But even though I understand the cool
    logic of returns on investment, deep down I just don’t accept that. I believe
    that when, as an industry, we accept the current state of affairs as the best
    we can do, we block real progress. Justifying additional work in the interest
    of security is always difficult because we rarely learn about failed attacks,
    or even what particular lines of defense were effective.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，尽管我们不完美的系统不断遭到破坏，一切 somehow 仍然能够持续运作。也许这就是安全问题持续存在的原因：现状“足够好”。但是，即使我理解投资回报的冷静逻辑，内心深处我仍然无法接受这一点。我相信，当我们作为一个行业接受现状为我们能做的最好时，我们就会阻碍真正的进步。为了安全而进行额外工作的辩护总是很困难，因为我们很少了解失败的攻击，甚至无法知道哪些防御措施是有效的。
- en: This concluding chapter sketches out promising future directions to raise the
    level of our collective software security game. The first section recapitulates
    the core themes of the book, summarizing how you can apply the methods in this
    book to good effect. The remainder of this chapter envisions further innovations
    and future best practices, and is more speculative. A discussion of mobile device
    data protection provides an example of how much more needs to be done to actually
    deliver effective security in the “last mile.” I hope the conceptual and practical
    ideas in this book spark your interest in this vital and evolving field, and serve
    as a springboard for your own efforts in making software secure.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章总结了提升我们集体软件安全水平的有前景的未来方向。第一部分回顾了本书的核心主题，总结了如何有效地应用本书中的方法。接下来的部分设想了进一步的创新和未来的最佳实践，更具推测性。关于移动设备数据保护的讨论提供了一个例子，展示了在“最后一公里”上实际交付有效安全所需做的工作还有多少。我希望本书中的概念性和实践性思路能够激发你对这一重要且不断发展的领域的兴趣，并为你在软件安全方面的努力提供跳板。
- en: Call to Action
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动号召
- en: The great aim of education is not knowledge but action.
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 教育的伟大目标不是知识，而是行动。
- en: ''
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Herbert Spencer
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —赫伯特·斯宾塞
- en: 'This book is built around promoting two simple ideas that I believe will result
    in better software security: involving everyone building the software in promoting
    its security, and integrating a security perspective and strategy from the requirements
    and design stage. I entreat readers of this book to help lead the charge.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本书围绕着两个简单的观点展开，我相信这将有助于提高软件安全性：让所有参与软件开发的人都参与到促进软件安全的工作中，并且从需求和设计阶段就将安全角度与策略整合进来。我恳请本书的读者们带头推动这一变革。
- en: 'In addition, a continuing focus on the quality of the software we create will
    contribute to better security, because fewer bugs mean fewer exploitable bugs.
    High-quality software requires work: competent designs, careful coding, comprehensive
    testing, and complete documentation, all kept up to date as the software evolves.
    Developers, as well as end users, must continue to push for higher standards of
    quality and polish to ensure this focus is maintained.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，持续关注我们所创建软件的质量将有助于提高安全性，因为较少的漏洞意味着较少可被利用的漏洞。高质量的软件需要付出努力：包括有竞争力的设计、细心的编码、全面的测试以及完整的文档，所有这些都需要随着软件的演进而保持更新。开发人员和最终用户都必须不断推动更高的质量和精细化标准，以确保这一关注点能够持续保持。
- en: Security Is Everyone’s Job
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全是每个人的责任
- en: 'Security analysis is best done by people who deeply understand the software.
    This book lays out the conceptual basis for good security practice, empowering
    any software professional to understand the security facets of design, learn about
    secure coding, and more. Instead of asking experts to find and fix vulnerabilities
    because security has been largely neglected, let’s all pitch in to ensure at least
    a modest baseline is met for all the software we produce. We can then rely on
    experts for the more arcane and technical security work, where their skills are
    best applied. Here’s the rationale:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 安全分析最好由深刻理解软件的人来做。本书阐述了良好安全实践的概念基础，使任何软件专业人员都能理解设计的安全方面，学习安全编码等内容。与其让专家来发现并修复因为安全性大多被忽视而产生的漏洞，不如大家一起努力，确保我们生产的所有软件至少达到一个基本的安全标准。然后，我们可以依赖专家来处理那些更为复杂和技术性的安全工作，这正是他们技能的最佳应用领域。以下是其逻辑：
- en: However well expert consultants know security, as outsiders, they cannot fully
    understand the software and its requirements in context, including how it must
    operate within the culture of an enterprise and its end users.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管专家顾问精通安全，但作为外部人员，他们无法完全理解软件及其需求的背景，包括它如何在企业文化和最终用户的使用环境中运作。
- en: Security works best when it’s integral to the entire software lifecycle, but
    it isn’t practical to engage security consultants for the long haul.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性在整个软件生命周期中最为有效，但长期聘请安全顾问并不现实。
- en: Skilled software security professionals are in high demand, difficult to find,
    and hard to schedule on short notice. Hiring them is expensive.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟练的软件安全专业人员需求量大，难以找到，且在短时间内很难安排工作。雇佣他们的成本也很高。
- en: Security thinking is not difficult, but it is abstract and may feel unfamiliar
    at first. Most vulnerabilities tend to be obvious in hindsight; nonetheless, we
    seem to make the same mistakes over and over. The trick, of course, is seeing
    the potential problem before it manifests. This book presents any number of methods
    to help you learn how to do just that. The good news is that nobody is perfect
    at this, so starting out with even a small contribution is better than nothing.
    Over time, you will get better at it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 安全思维并不难，但它是抽象的，起初可能会觉得不熟悉。大多数漏洞事后看来往往是显而易见的；然而，我们似乎总是一次又一次地犯相同的错误。当然，诀窍在于在问题显现之前就能够发现潜在的风险。本书提供了许多方法，帮助你学习如何做到这一点。好消息是，没有人能做到完美，所以即使从小处着手，也比什么都不做要好。随着时间的推移，你会越来越擅长此道。
- en: Broader security participation is best understood as a team effort, where every
    individual does the part that they do best. The idea is not that each individual
    can handle the entire job alone, but rather that the combined input of team members
    with a diverse set of skills synergistically produces the best result. Whatever
    your part is in producing, maintaining, or supporting a software product, focus
    on that as your primary contribution. But it’s also valuable to consider the security
    of related components, and double-check the work of your teammates to ensure they
    haven’t overlooked something. Even if your role is a small one, you just might
    spot a vital flaw, just as a soccer goalie occasionally scores a goal.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 更广泛的安全参与最好理解为一种团队合作，每个个体都发挥他们最擅长的部分。关键的观点不是每个个体能够独自完成整个工作，而是团队成员以多样化的技能相互协作，从而产生最佳的结果。无论你在生产、维护或支持软件产品中扮演什么角色，专注于你的主要贡献部分。但同时，考虑相关组件的安全性，并仔细检查团队成员的工作，确保他们没有忽视任何问题，也是非常有价值的。即使你的角色很小，你也可能发现一个至关重要的缺陷，就像足球门将偶尔会进球一样。
- en: It’s important to be clear that outside expertise is valuable for performing
    tasks such as gap analysis or penetration testing, for balancing organizational
    capacity, and as “fresh eyes” with deep experience. However, specialist consultants
    should supplement solid in-house security understanding and well-grounded practice,
    rather than being called in to carry the security burden alone. And even if specialists
    do contribute to the overall security stance, they go off to other engagements
    at the end of the day. As such, it’s always best to have as many people as possible
    on the team responsible for the software be thinking about security regularly.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 需要明确的是，外部专家对于执行任务如差距分析或渗透测试、平衡组织能力以及作为具有深厚经验的“新眼睛”非常有价值。然而，专业顾问应该补充扎实的内部安全理解和良好的实践，而不是仅仅承担起安全的重担。即使专家确实为整体安全状态做出贡献，他们也会在一天结束后去参与其他项目。因此，最好的做法是让尽可能多的团队成员在负责软件的过程中定期考虑安全问题。
- en: Baking in Security
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全性内置
- en: Bridges, roads, buildings, factories, ships, dams, harbors, and rockets are
    all designed and meticulously reviewed to ensure quality and safety, and only
    then built. In any other engineering field, it’s acknowledged that refining a
    design on paper is better than retrofitting security measures after the fact.
    Yet most software is built first and then secured later.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 桥梁、道路、建筑物、工厂、船舶、大坝、港口和火箭等都经过设计并仔细审查，以确保质量和安全，只有在确认无误后才开始建造。在任何其他工程领域，大家都承认在纸上精细打磨设计比事后再加装安全措施要好。然而，大多数软件都是先建造出来，之后再进行安全加固。
- en: A central premise of this book, which the author has seen proven in industry
    time and again, is that earlier security diligence saves time and reaps significant
    rewards, improving the quality of the result. When designs thoroughly consider
    security, implementers have a much easier job of delivering a secure solution.
    Structuring components to facilitate security makes it easy to anticipate potential
    issues.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的一个核心前提是，作者在行业中屡次看到的事实：早期的安全审慎可以节省时间并带来显著的回报，提升结果的质量。当设计充分考虑到安全性时，实施者能够更容易地交付一个安全的解决方案。将安全性融入组件的结构设计使得预测潜在问题变得容易。
- en: The worst-case scenario, and most compelling reason for front-loading security
    into the design phase (“moving left,” in popular industry jargon), is to avoid
    by-design security flaws. Designed-in security flaws—whether in componentization,
    API structure, protocol design, or any other aspect of architecture—are potentially
    devastating, because they are nearly impossible to fix after the fact without
    breaking compatibility. Catching and fixing these problems early is the best way
    to avoid painful and time-consuming reactive redesigns.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最坏的情况，也是将安全前置到设计阶段（业界流行的术语是“向左移动”）的最有力理由，就是为了避免设计中的安全漏洞。设计时引入的安全漏洞——无论是在组件化、API结构、协议设计，还是架构的其他方面——都可能是灾难性的，因为事后修复几乎不可能而且会破坏兼容性。及早发现和修复这些问题是避免痛苦且费时的反应性重设计的最佳方法。
- en: Good security design decisions have greater benefits that often go unrecognized.
    The essence of good design is minimalism without compromising necessary functionality.
    Applied to security, this means the design minimizes the area of the attack surface
    and critical component interactions, which in turn means there are fewer opportunities
    for implementers to make mistakes.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的安全设计决策通常会带来更大的好处，尽管这些好处往往未被注意到。良好设计的本质是简约而不妥协必要的功能。应用到安全时，这意味着设计最小化攻击面和关键组件的交互区域，这也意味着开发者在实现过程中犯错的机会更少。
- en: Security-focused design reviews are important because functional reviews of
    software designs take a different perspective and ask questions that don’t consider
    security. “Does it fulfill all the necessary requirements? Will it be easy to
    operate and maintain? Is there a better way?” In fact, an insecure design can
    easily pass all these tests with flying colors while being vulnerable to devastating
    attacks. Supplementing design review with a security assessment vets the security
    of the design by understanding the threats it faces and considering how it might
    fail or be abused.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 专注于安全的设计评审非常重要，因为软件设计的功能评审通常会从不同的角度出发，提出一些忽视安全性的问题。“它是否满足所有必要的要求？操作和维护是否简便？有没有更好的方法？”事实上，一个不安全的设计完全可以顺利通过所有这些测试，而仍然容易受到毁灭性攻击。通过安全评估来补充设计评审，可以通过了解面临的威胁并考虑设计可能如何失败或被滥用，从而验证设计的安全性。
- en: The implementation side of software security consists of learning about, and
    vigilantly avoiding, the many potential ways of inadvertently creating vulnerabilities,
    or at least mitigating those common pitfalls. Secure designs minimize the opportunities
    for the implementation to introduce vulnerabilities, but it can never magically
    make software bulletproof. Developers must be diligent not to undermine security
    by stepping into any number of potential traps.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 软件安全的实现方面包括学习并警惕避免多种潜在的方式，以免无意中创建漏洞，或者至少尽量避免常见的陷阱。安全设计通过最小化实现过程中可能引入漏洞的机会来减少风险，但它永远无法让软件做到万无一失。开发人员必须小心谨慎，避免踏入任何可能的陷阱，避免破坏安全性。
- en: Security is a process that runs through the entire lifecycle of a software system,
    from conception to its inevitable retirement. Digital systems are complex and
    fragile, and as software “eats the world,” we become increasingly dependent on
    it. We are imperfect humans using imperfect components to build good-enough systems
    for imperfect people. But just because perfection is unattainable does not mean
    we cannot progress. Instead, it means that every bug fixed, every design improved,
    and every security test case added help in ways big and small to make systems
    more trustworthy.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 安全是贯穿整个软件系统生命周期的一个过程，从构思到最终的退休。数字系统复杂且脆弱，随着软件“吞噬”世界，我们变得越来越依赖它。我们是使用不完美组件来构建足够好的系统以应对不完美人的不完美的普通人。但正因为完美无法达到，并不意味着我们不能进步。相反，这意味着每一个修复的漏洞、每一个改进的设计、每一个新增的安全测试用例，都能在大大小小的方面帮助让系统变得更加可信。
- en: Future Security
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来的安全
- en: The future depends on what you do today.
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 未来取决于你今天所做的事情。
- en: ''
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Mahatma Gandhi
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —圣雄甘地
- en: This book is built around the methods of improving security that I have practiced
    and seen work consistently, but there is much more to do beyond this. The following
    subsections sketch a few ideas that I think are promising. Although these notions
    require additional development, I believe they may lead to significant further
    advances.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 本书围绕我实践过并且一直有效的安全改进方法展开，但除了这些之外，仍有很多需要做的事情。以下小节概述了我认为有前景的一些想法。尽管这些观念需要进一步发展，但我相信它们可能会带来显著的进展。
- en: 'Artificial intelligence or other advanced technologies offer much promise,
    but my intuition is that a lot of the work needed is of the “chop wood, carry
    water” variety. One way we can all contribute is by working to ensure the quality
    of the software we produce, because it is from bugs that vulnerabilities arise.
    Second, as our systems grow in power and scope, complexity necessarily grows,
    but we must manage it so as not to be overwhelmed. Third, in researching this
    book, I was disappointed (but not surprised) by the dearth of solid data about
    the state of the world’s software and how secure it is: surely, more transparency
    will enable a clearer view to better guide us forward. Fourth, authenticity, trust,
    and responsibility are the bedrock of how the software community works together
    safely, yet modern mechanisms that implement these are largely ad hoc and unreliable—advances
    in these areas could be game changers.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 人工智能或其他先进技术提供了很大的潜力，但我的直觉是，很多所需的工作属于“劈柴、挑水”类型的工作。我们每个人都能贡献的一种方式是，通过确保我们所生产的软件质量，因为正是从错误中产生了漏洞。其次，随着我们的系统在能力和范围上增长，复杂性也必然增加，但我们必须进行管理，以免不堪重负。第三，在研究这本书时，我对世界软件状况及其安全性缺乏确凿数据感到失望（但并不惊讶）：毫无疑问，更多的透明度将有助于我们更清晰地前进。第四，真实性、信任和责任是软件社区安全合作的基石，然而，实施这些机制的现代方式大多是临时和不可靠的——在这些领域的进展可能会改变游戏规则。
- en: Improving Software Quality
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提高软件质量
- en: “The programmers get paid to put the bugs in, and they get paid to take the
    bugs out.” This was one of the most memorable observations I heard as a Microsoft
    program manager 25 years ago, and this attitude about the inevitability of bugs
    still prevails, with little danger of changing any time soon. But bugs are the
    building blocks of vulnerabilities, so it’s important to be aware of the full
    cost of buggy software.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: “程序员们拿钱去加入错误，也拿钱去修复错误。” 这是我在 25 年前作为微软程序经理时听到的最令人难忘的观察之一，而这种对错误不可避免性的态度至今仍然存在，短期内似乎没有改变的风险。但错误是漏洞的构建块，因此了解有缺陷的软件的全部成本非常重要。
- en: One way to improve security is to augment the traditional bug triage by also
    considering whether each bug could possibly be part of an attack chain, and prioritizing
    fixing those where this seems more likely and the stakes are high. Even if just
    a fraction of these bug fixes closes an actual vulnerability, I would argue that
    these efforts are entirely worthwhile.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 改善安全性的一种方法是通过增加传统的错误筛查，考虑每个错误是否可能是攻击链的一部分，并优先修复那些可能性较高且风险较大的错误。即使只有一小部分错误修复关闭了一个实际漏洞，我认为这些努力是完全值得的。
- en: Managing Complexity
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 管理复杂性
- en: An evolving system increases its complexity unless work is done to reduce it.
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个不断发展的系统会增加其复杂性，除非采取措施将其减少。
- en: ''
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Meir Lehman
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —梅尔·莱曼
- en: As software systems grow larger, managing the resultant complexity becomes more
    challenging, and these systems risk becoming more fragile. The most reliable systems
    succeed by compartmentalizing complexity within components that present simple
    interfaces, loosely coupled in fault-tolerant configurations. Large web services
    achieve high resiliency by distributing requests over a number of machines that
    perform specific functions to synthesize the whole response. Designed with built-in
    redundancy, in the event of a failure or timeout, the system can retry using a
    different machine if necessary.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 随着软件系统规模的增大，管理由此产生的复杂性变得更加具有挑战性，这些系统也面临变得更加脆弱的风险。最可靠的系统通过将复杂性划分为具有简单接口的组件，并以松耦合的容错配置进行组织，从而取得成功。大型
    web 服务通过在多台机器之间分配请求来实现高弹性，这些机器执行特定功能以合成完整的响应。设计时考虑到冗余，在发生故障或超时的情况下，系统可以在必要时通过不同的机器重新尝试。
- en: Compartmentalizing the respective security models of the many components of
    a large information system is a basic requirement for success. Subtle interactions
    between the assembled components may influence security, making the task of securing
    the system massively harder as interdependencies compound. In addition to excellent
    testing, well-documented security requirements and dependencies are important
    first lines of defense when dealing with a complex system.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将大型信息系统中多个组件的各自安全模型进行隔离是成功的基本要求。组装组件之间的微妙相互作用可能影响安全性，使得保护系统的任务变得更加困难，因为相互依赖性不断加剧。除了优秀的测试外，良好文档化的安全要求和依赖关系是处理复杂系统时重要的第一道防线。
- en: From Minimizing to Maximizing Transparency
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从最小化到最大化透明度
- en: 'Perhaps the bleakest assessment of the state of software security derives from
    this (variously attributed) aphorism: “If you can’t measure it, you can’t improve
    it.” Lamentably, there is a dearth of measurements of the quality of the world’s
    software, in particular regarding security. Public knowledge of security vulnerabilities
    is limited to a subset of cases: software that is open source, public releases
    of proprietary software (usually requiring reverse engineering of binaries), or
    instances when a researcher finds flaws and goes public with a detailed analysis.
    Few enterprises would even consider making public the full details of their software
    security track record. As an industry, we learn little from security incidents
    because full details are rarely disclosed—which is in no small part due to fear.
    While this fear is not unfounded, it needs to be balanced against the potential
    value to the greater community of more informative disclosure.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 或许对软件安全现状最为悲观的评价来源于这个（被不同人归于）格言：“如果你不能衡量它，你就不能改进它。”遗憾的是，世界上关于软件质量，尤其是安全性的衡量标准匮乏。公众对安全漏洞的了解仅限于几个案例：开源软件、专有软件的公开版本（通常需要逆向工程二进制文件），或是研究人员发现漏洞并公开详细分析的情况。很少有企业会考虑公开其软件安全记录的完整细节。作为一个行业，我们从安全事件中学到的东西很少，因为完整的细节很少被披露——这在很大程度上是因为恐惧。虽然这种恐惧并非没有根据，但它需要与更广泛社区从更具信息量的披露中获得的潜在价值相平衡。
- en: 'Even when we accept the barriers that exist to a full public disclosure of
    all security vulnerabilities, there is much room for improvement. The security
    update disclosures for major operating systems typically lack useful detail at
    the expense of their users, who would likely find additional information useful
    in responding to and assessing risk. In the author’s opinion, major software companies
    often obscure the information they do provide to the point of doublespeak. Here
    are a few examples from a recent operating system security update:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们接受公开披露所有安全漏洞的障碍，仍然有很大的改进空间。主要操作系统的安全更新披露通常缺乏有用的细节，这对用户造成了不利影响，因为用户可能会发现额外的信息有助于响应和评估风险。在作者看来，主要的软件公司常常对它们所提供的信息进行掩盖，甚至到达了双重表述的地步。以下是最近一个操作系统安全更新中的一些例子：
- en: “A logic issue was addressed with improved restrictions.” (This applies to almost
    any security bug.)
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “通过改进限制解决了一个逻辑问题。”（这几乎适用于任何安全漏洞。）
- en: “A buffer overflow issue was addressed with improved memory handling.” (How
    is it possible to fix a buffer overflow any other way?)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “通过改进内存处理解决了一个缓冲区溢出问题。”（除了改进内存处理，还有什么方法可以修复缓冲区溢出问题呢？）
- en: “A validation issue was addressed with improved input sanitization.” (Again,
    this can be said of any input validation vulnerability.)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “通过改进输入消毒解决了一个验证问题。”（同样，这可以说是任何输入验证漏洞的描述。）
- en: This lack of detail has become reflexive with too many products; it harms customers,
    and the software security community would benefit from more informative disclosure.
    Software publishers can almost always provide additional information without compromising
    future security. Realistically, adversaries are going to analyze changes in the
    updates and glean basic details, so useless release notes only deprive honest
    customers of important details. Responsible software providers of the future would
    do better to begin with full disclosure, then redact it as necessary so as to
    not weaken security. Better yet, after the risk of exploit is past, it should
    be safe to disclose additional details held in abeyance that would be valuable
    to our understanding of the security of major commercial software products, if
    only in the rearview mirror.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这种缺乏细节的情况已经成为许多产品的惯例；它损害了客户的利益，软件安全社区也会从更具信息量的披露中受益。软件发布者几乎总是可以提供额外的信息，而不损害未来的安全性。实际上，敌对者会分析更新中的变化并提取基本细节，因此无用的发布说明只会剥夺诚实客户获得重要信息的机会。未来负责任的软件供应商最好从完全披露开始，然后根据需要进行删减，以免削弱安全性。更好的是，在利用风险过后，应该安全地披露那些尚未公开的额外细节，这些细节对于我们理解主要商业软件产品的安全性是有价值的，即使只是从事后视角来看。
- en: 'Providing detailed reporting of vulnerabilities may be embarrassing, because
    in hindsight the problem is usually blatantly obvious, but I maintain that honestly
    confronting these lapses is healthy and productive. The learning potential from
    a full disclosure is significant enough that if we are serious about security
    for the long term, we need greater transparency. As a customer, I would be much
    more impressed with a software vendor whose security fix release notes included:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 提供漏洞的详细报告可能会让人尴尬，因为回顾时问题通常显而易见，但我认为，诚实地面对这些疏漏是健康且富有成效的。从完全公开中学习的潜力非常大，如果我们认真对待长期的安全性，就需要更大的透明度。作为客户，我会对一个软件供应商更有好感，如果他们的安全修复发布说明包括：
- en: Dates that the bug was reported, triaged, fixed, tested, and released, with
    an explanation of any untoward delays.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误报告、分类、修复、测试和发布的日期，并解释任何不正常的延迟原因。
- en: A description of when and how the vulnerability was created (for example, a
    careless edit, ignorance of the security implications, miscommunication, or a
    malicious attack).
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述漏洞是何时以及如何产生的（例如，疏忽的编辑、对安全影响的无知、沟通失误或恶意攻击）。
- en: Information about whether the commit that contained the flawed code was reviewed.
    If so, how was it missed; if not, why not?
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于包含缺陷代码的提交是否经过审查的信息。如果有，为什么会错过；如果没有，为什么没有审查？
- en: An account of whether there was an effort to look for similar flaws of the same
    kind. If so, what was found?
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否有努力寻找类似缺陷的记录。如果有，发现了什么？
- en: Details of any precautions taken to prevent regression or similar flaws in the
    future.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采取的任何预防措施，以防止将来出现回归或类似的缺陷。
- en: Shifting the industry toward a culture of sharing more forthcoming disclosures
    of vulnerabilities, their causes, and their mitigations enables us all to learn
    from these incidents. Without much detail or context, these disclosures are just
    going through the motions and benefit no one.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将行业推动向分享更多漏洞、其原因和缓解措施的文化转变，使我们所有人都能从这些事件中学习。如果没有足够的细节或背景，这些披露只是走个过场，无法为任何人带来益处。
- en: A great example of best practice is the National Transportation Safety Board,
    which publishes detailed reports that the aviation industry as well as pilots
    can follow to learn from accidents. For many reasons software cannot simply follow
    that process, but it serves as a model to aspire to. Ideally, leading software
    makers should see public disclosure as an opportunity to explain exactly what
    happened behind the scenes, demonstrating their competence and professionalism
    in responding. This would not only aid broad learning and prevention of similar
    problems in other products, but help rebuild trust in their products.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践的一个很好的例子是国家运输安全委员会（NTSB），该委员会发布了详细的报告，航空业和飞行员可以遵循这些报告，从事故中学习。由于多种原因，软件不能简单地遵循这一过程，但它为我们提供了一个值得效仿的榜样。理想情况下，领先的软件制造商应将公开披露视为一个机会，准确解释幕后发生了什么，展示他们在响应中的能力和专业性。这不仅有助于广泛学习并防止其他产品中出现类似问题，还有助于重建用户对其产品的信任。
- en: Improving Software Authenticity, Trust, and Responsibility
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进软件的真实性、信任和责任
- en: Large modern software systems are built from many components, all of which must
    be authentic and built by trustworthy entities, from secure subcomponents, using
    a secure tool stack. This chain continues on and on, literally to the dawn of
    modern digital computing. The security of our systems depends on the security
    of all these iterations that have built up our modern software stack, yet the
    exact chains of descent have by now faded into the mists of computing history,
    back to a few early self-compiling compilers that began it all. The classic paper
    “[Reflections on Trusting Trust](https://www.cs.cmu.edu/~rdriley/487/papers/Thompson_1984_ReflectionsonTrustingTrust.pdf)”
    by Ken Thompson elegantly demonstrates how security depends on all of this history,
    as well as how hard it can be to find malware once it’s deeply embedded. How do
    we really know that something untoward isn’t lurking in there?
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现代大型软件系统由许多组件构建而成，这些组件必须是可信的，由可靠的实体构建，使用安全的子组件和安全的工具栈。这个链条不断延续，追溯到现代数字计算的黎明。我们系统的安全性依赖于所有这些构建我们现代软件栈的迭代的安全性，但这些传承的具体链条已经逐渐消失在计算历史的迷雾中，回溯到最初的几款自编译编译器，正是它们开始了这一切。Ken
    Thompson的经典论文《[Reflections on Trusting Trust](https://www.cs.cmu.edu/~rdriley/487/papers/Thompson_1984_ReflectionsonTrustingTrust.pdf)》优雅地展示了安全性如何依赖于这些历史，以及当恶意软件深度嵌入后，它是多么难以被发现。我们怎么知道有什么不良代码潜藏其中呢？
- en: The tools necessary to ensure the integrity of how our software is built are
    by now freely available, and it’s reasonable to assume they work as advertised.
    However, their use tends to be dismayingly ad hoc and manual, making the process
    susceptible to human error, if not potential sabotage. Sometimes people understandably
    skip checking just to save time. Consider, for example, validating the legitimacy
    of a *nix distribution. After downloading an image from a trusted website, you
    would also download the separate authoritative keys and checksum files, then use
    a few commands (obtained from a trustworthy source) to verify it all. Only after
    these checks all pass should installation proceed. But in practice, how thoroughly
    are administrators actually performing these extra steps, especially when instances
    of these checks failing for a major distro are unheard of? And even if they always
    are, we have no record of it as assurance.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 确保我们软件构建完整性的必要工具现在已经免费提供，而且可以合理假设它们如宣传所述运作。然而，它们的使用往往显得临时和手动，使得过程容易受到人为错误的影响，甚至潜在的破坏。比如，人们有时为了节省时间，理所当然地跳过了检查。举个例子，验证*nix发行版的合法性。在从一个可信的网站下载镜像文件后，你还需要下载单独的授权密钥和校验和文件，然后使用一些命令（来自可信来源）来验证这些文件。只有在所有检查都通过后，才可以进行安装。但实际上，管理员们究竟多彻底地执行了这些额外步骤，尤其是当大型发行版的这些检查失败的情况鲜有耳闻时呢？即使他们每次都执行这些检查，我们也没有任何记录来做保障。
- en: Today, software publishers sign released code, but the signature only assures
    the integrity of the bits against tampering. There is an implication that signed
    code is trustworthy, yet any subsequent discovery of vulnerabilities in no way
    invalidates the signature, so that is not a safe interpretation at all.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当前，软件发布者会对发布的代码进行签名，但签名仅能保证数据完整性，防止篡改。这意味着签名的代码是可信的，但如果后续发现漏洞，这并不会使签名失效，因此这根本不是什么安全的解读。
- en: In the future, better tools, including auditable records of the chain of authenticity,
    could provide a higher assurance of integrity, informing the trust decisions and
    dependencies that the security of our systems relies on. New computers, for example,
    should include a software manifest documenting that the operating system, drivers,
    applications, and so on are authentic. Documenting and authenticating the software
    bill of materials of components and the build environment require a major effort,
    but we shouldn’t let the difficulty deter us from starting with a subset of the
    complete solution and incrementally improving over time. If we start getting serious
    about software provenance and authenticity, we can do a much better job of providing
    assurance that important software releases are built from secure components, and
    the future will thank us.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来，更好的工具，包括可审计的真实性链记录，可以提供更高的完整性保障，帮助做出信任决策并处理依赖，这些都是我们系统安全所依赖的。举例来说，新型计算机应该包括一个软件清单，记录操作系统、驱动程序、应用程序等是否真实可靠。记录并认证软件材料清单及其组件的构建环境需要大量的工作，但我们不应因其困难而放弃从部分解决方案入手，并随着时间逐步改进。如果我们开始认真对待软件来源和真实性，我们就能更好地确保重要的软件版本是基于安全组件构建的，未来也将感谢我们。
- en: Delivering the Last Mile
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成最后一英里
- en: The longest mile is the last mile home.
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 最漫长的一英里是最后一英里回家的路。
- en: ''
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Anonymous
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —匿名
- en: If you diligently follow every best practice, apply the techniques described
    in this book, code with attention to avoid footguns, perform reviews, thoroughly
    test, and fully document the complete system, I wish that I could say your work
    will be perfectly secure. But of course, it’s more complicated than that. Not
    only is security work never finished, but even well-designed and well-engineered
    systems can still fall short of delivering the intended levels of security in
    the real world.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认真遵循每个最佳实践，应用本书中描述的技巧，注意避开常见的编程陷阱，进行代码审查，全面测试，并完全记录整个系统，我希望能说你的工作是完全安全的。但当然，这要复杂得多。安全工作永远没有终点，甚至设计良好、工程精湛的系统，在现实世界中也可能未能提供预期的安全水平。
- en: The “last mile,” a term taken from the telecommunications and transportation
    industries, refers to the challenge of connecting individual customers to the
    network. This is often the most expensive and hardest part of delivering services.
    For example, an internet service provider might already have high-speed fiber
    infrastructure in your neighborhood, but acquiring each new customer requires
    a service call, possibly running cables, and installing a modem. None of this
    scales well, and the time and expense become significant additional upfront investments.
    In much the same way, deploying a well-designed, secure system is often only the
    beginning of actually delivering real security.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: “最后一公里”这一术语来源于电信和交通行业，指的是将单个客户连接到网络的挑战。这通常是提供服务中最昂贵、最困难的部分。例如，一个互联网服务提供商可能已经在你的社区铺设了高速光纤基础设施，但获取每个新客户需要一次服务访问，可能还需要铺设电缆并安装调制解调器。所有这些都无法很好地扩展，而且时间和费用成为了巨大的前期投资。同样地，部署一个设计良好的安全系统通常只是实际实现真正安全性的开始。
- en: 'To understand these “last mile” challenges for security, let’s take an in-depth
    look at the current state of the art of mobile device data security through the
    lens of a simple question: “If I lose my phone, can someone else read its contents?”
    After years of intensive engineering effort resulting in a powerful suite of well-built
    modern crypto technology, the answer, even for today’s high-end phones, seems
    to be, “Yes, they probably can get most of your data.” As this is perhaps the
    largest single software security effort in recent times, it’s important to understand
    where it falls short and why.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解这些“最后一公里”安全挑战，我们可以通过一个简单的问题来深入了解当前移动设备数据安全的技术现状：“如果我丢失了手机，其他人能读取其中的内容吗？”经过多年的密集工程努力，开发出一套功能强大的现代加密技术，今天高端手机的答案似乎是：“是的，他们很可能能获取你大部分的数据。”由于这是近年来最大规模的单一软件安全努力，因此了解其不足之处和原因变得非常重要。
- en: 'The following discussion is based on the 2021 paper “[Data Security on Mobile
    Devices: Current State of the Art, Open Problems, and Proposed Solutions](https://securephones.io/),”
    written by three security researchers at Johns Hopkins University. The report
    describes several important ways that delivering robust software security often
    remains elusive. I will simplify the discussion greatly in the interests of highlighting
    the larger lessons for security that this example teaches.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下讨论基于2021年论文“[移动设备的数据安全：当前的技术现状、开放问题与提出的解决方案](https://securephones.io/)”，该论文由约翰·霍普金斯大学的三位安全研究员撰写。报告描述了几种重要的方式，表明实现强大软件安全性通常仍然是难以捉摸的。我将大大简化讨论，以突出这个例子所教给我们的更大的安全性教训。
- en: 'First, let’s talk about levels of data protection. Mobile apps do all kinds
    of useful things—too much for a single encryption regime to work for everything—so
    mobile operating systems provide a range of choices. The iOS platform offers three
    levels of data protection that differ mainly in how aggressively they minimize
    the time window that encryption keys are present in memory to facilitate access
    to protected data. You can think of this as analogous to how often a bank vault
    door is left open. Opening the big, heavy door in the morning and shutting it
    only at closing time provides the staff convenient access throughout the day,
    but it also means the vault is more exposed to intrusion when not in use. By contrast,
    if the staff has to find the bank manager to open the vault every time they need
    to enter, they trade that convenience for increased security: the vault is securely
    locked most of the time. For a mobile device, asking the user to unlock the encryption
    keys (by password, fingerprint, or facial recognition) in order to access protected
    data roughly corresponds to asking the bank manager to open the vault.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们来谈谈数据保护的级别。移动应用程序做了许多有用的事情——多到一个单一的加密方案无法涵盖所有内容——因此移动操作系统提供了一系列选择。iOS平台提供了三个级别的数据保护，主要在于它们如何通过减少加密密钥在内存中存在的时间窗口来提高对保护数据的访问效率。你可以将其类比为银行金库门开关的频率。早上打开沉重的大门，直到闭店时间才关门，提供了全天方便的访问，但这也意味着在不使用时金库更容易受到入侵。相反，如果工作人员每次需要进入金库时都要找银行经理开门，他们便在增加安全性的同时放弃了便捷性：金库大部分时间都是安全上锁的。对于移动设备来说，要求用户解锁加密密钥（通过密码、指纹或面部识别）以访问受保护数据，基本上相当于要求银行经理开金库门。
- en: Under the highest level of protection, the encryption keys are only available
    while the phone is unlocked and in use. While very secure, this is a hindrance
    for most apps, because they lose access to data when the device is locked. For
    example, consider a calendar app that reminds you when it’s time for a meeting.
    A locked phone renders the app unable to access calendar data. Background operations,
    including syncing, will also be blocked during the locked state. This means that
    if an event were added to your calendar while the phone was locked, then you would
    fail to get the notification unless you happened to unlock the phone beforehand
    so it could sync. Even the least restrictive protection class, known as *After
    First Unlock (AFU)*, which requires user credentials to reconstitute encryption
    keys after booting, presents serious limitations. As the name suggests, a freshly
    rebooted device would not have encryption keys available, so a calendar notification
    would be blocked then, too.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在最高级别的保护下，加密密钥仅在手机解锁并使用时可用。虽然这种保护非常安全，但对大多数应用程序来说却是一种障碍，因为当设备锁定时，它们无法访问数据。例如，考虑一个日历应用程序，它会在开会时间到来时提醒你。锁定的手机会导致该应用程序无法访问日历数据。后台操作，包括同步，也会在锁定状态下被阻止。这意味着，如果在手机锁定时向日历中添加了一个事件，那么除非你提前解锁手机进行同步，否则你将无法收到通知。即使是最不限制的保护类别——*首次解锁后（AFU）*——也存在严重的限制。正如其名称所示，重新启动后的设备将无法获得加密密钥，因此日历通知也会被阻止。
- en: We can imagine designing apps to work around these restrictions by partitioning
    data into separate stores under different protection classes, depending on when
    it is needed. Perhaps for a calendar, the time would be unprotected so as to be
    available, so the notification would vaguely say, “You have a meeting at 4 PM,”
    requiring the user to unlock the device to get the details. Notifications lacking
    titles would be annoying, but users also expect their calendars to be encrypted
    for privacy, so a trade-off is necessary. The sensitivity of this information
    may vary between users and depend on the specifics of the meeting, but making
    the user explicitly decide in each case isn’t workable either, because people
    expect their apps to work on their own. In the end, most apps opt for increased
    access to the data they manage, and end up using lower levels of data protection—or,
    often, none at all.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以设想通过将数据划分到不同的保护类别下，依据何时需要来设计应用程序，以绕过这些限制。也许对于日历来说，时间可以不受保护，以便随时可用，这样通知就会模糊地显示“你有一个下午4点的会议”，需要用户解锁设备才能查看详细信息。缺少标题的通知可能会让人烦恼，但用户也希望他们的日历是加密的以保护隐私，因此需要做出权衡。这些信息的敏感性可能因用户而异，也可能取决于会议的具体情况，但让用户在每个情况下明确决定并不可行，因为人们希望应用程序能够自动运行。最终，大多数应用程序选择增加对其管理的数据的访问权限，最终使用较低级别的数据保护——或者，通常根本没有使用保护。
- en: When most apps operate under the “no protection” option for convenience, all
    that data is a sitting duck for exfiltration if the attacker can inspect the device.
    It isn’t easy, but as the Johns Hopkins report details, sophisticated techniques
    often find a way into memory. With AFU protection, all the attacker needs to do
    is find the encryption key, which, since devices spend most of their time in this
    state, is often sitting in memory.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当大多数应用程序为了便利性而在“无保护”选项下运行时，所有这些数据都是攻击者轻易窃取的目标，只要攻击者能够检查设备。虽然不容易，但正如约翰霍普金斯报告所详细描述的，复杂的技术通常能够找到进入内存的方式。开启AFU保护后，攻击者所需要做的只是找到加密密钥，而由于设备大部分时间处于这种状态，密钥通常会保存在内存中。
- en: Confidential messaging apps are the main exception to the rule; they use the
    “complete protection” class. Given their special purpose, users are predisposed
    to put up with the missing functionality when the device is locked and the extra
    effort required to use them. These are a minority of apps, comprising a tiny proportion
    of locally stored user data, yet most phone users (those who even think about
    security at all) probably believe all of their data is secure.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 保密消息应用程序是这一规则的主要例外；它们使用“完全保护”类别。考虑到它们的特殊用途，用户往往愿意忍受设备锁定时缺失的功能以及使用它们所需的额外努力。这些应用程序仅占少数，占本地存储用户数据的比例微乎其微，但大多数手机用户（即使是那些对安全有所关注的人）可能认为他们所有的数据都是安全的。
- en: As if the picture wasn’t already bleak enough, let’s consider how important
    cloud integration is for many apps, and how it is antithetical to strong data
    protection. The cloud computing model has revolutionized modern computing, and
    we are now accustomed to having ubiquitously connected datacenters at our fingertips,
    with web search, real-time translation, image and audio storage, and any number
    of other services instantly available. Functionality such as searching our photo
    collections for people using facial recognition vastly exceeds even the considerable
    compute power of modern devices, so it very much depends on the cloud. The cloud
    data model also makes multi-device access easy (no more syncing), and if we lose
    a device, the data is safely stored in the cloud so all we need to do is buy new
    hardware. But in order to leverage the power of the cloud, we must entrust it
    with our data instead of locking it down with encryption on our devices.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 好像情况还不够糟糕一样，让我们再考虑一下云集成对许多应用的重要性，以及它与强数据保护之间的矛盾。云计算模型已经彻底改变了现代计算，我们现在习惯了能够随时随地访问无处不在的连接数据中心，进行网页搜索、实时翻译、图像和音频存储，以及其他各种服务。像使用面部识别搜索我们照片集中的人物这样的功能，远远超出了现代设备的计算能力，因此它非常依赖于云。云数据模型还使得多设备访问变得简单（不再需要同步），而且如果我们丢失了设备，数据就安全地存储在云端，因此我们只需购买新硬件。但为了利用云的强大功能，我们必须将数据交给云，而不是通过在设备上加密来锁定数据。
- en: Of course, all of this seamless data access is antithetical to strong data protection,
    particularly in the case of a lost cloud-connected phone. Most mobile devices
    have persistent cloud data access, so whoever recovers the device potentially
    has access to the stored data too. That data most likely isn’t encrypted; even
    if we tried to envision, say, a photo app that stored end-to-end encrypted data
    in the cloud, that would mean only opaque blobs of bits could be stored, so we’d
    lose the power of the cloud to search or provide photo sharing. And since the
    decryption key would have to be strictly held on the device, multi-device access
    scenarios would be difficult. Also, if something happened to the key on the device,
    all the data in the cloud would potentially be useless. For all these reasons,
    apps that rely on the cloud almost completely opt out of encrypted data protection.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，所有这些无缝的数据访问与强数据保护是相对立的，特别是在丢失连接到云的手机的情况下。大多数移动设备都具有持久的云数据访问功能，因此任何找回该设备的人都有可能访问存储的数据。这些数据很可能没有加密；即使我们设想一个例如存储端到端加密数据的照片应用，那也意味着只能存储不透明的位数据，这样我们就失去了云端搜索或提供照片共享功能的能力。而且由于解密密钥必须严格保存在设备上，多设备访问的场景会变得困难。如果设备上的密钥出了问题，云中的所有数据也可能变得无用。基于这些原因，依赖云的应用几乎完全放弃了加密数据保护。
- en: We’ve only scratched the surface of the full technical details of the effectiveness
    of data protection in mobile devices here, but for our purposes, the outlines
    of the more general problem should be clear. Mobile devices exist in a rich and
    complicated ecosystem, and unless data protection works for all components and
    scenarios, it quickly becomes infeasible to use. The best advice remains to not
    use your phone for anything that you wouldn’t greatly mind possibly leaking if
    you lose it.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里仅仅触及了移动设备数据保护效果的技术细节，但对于我们的目的而言，更一般的问题轮廓应该已经很清晰了。移动设备存在于一个丰富且复杂的生态系统中，除非数据保护能涵盖所有组件和场景，否则它很快就变得不可行。最好的建议仍然是，避免在手机上存储任何一旦丢失可能会泄露的个人信息。
- en: The lessons of this story that I want to emphasize go beyond the design of mobile
    device encryption, and in broad outlines apply to any large systems seeking to
    deliver security. The point is that despite diligent design, with a rich set of
    features for data protection, it’s all too easy to fall short of fully delivering
    security in the last mile. Having a powerful security model is only effective
    if developers use it, and when users understand its benefits. Achieving effective
    security requires providing a useful balance of features that work with, instead
    of against, apps. All the data that needs protection must get it, and interactions
    with or dependencies on infrastructure (such as the cloud in this example) shouldn’t
    undermine its effectiveness. Finally, all of this must integrate with typical
    work flows so that end users are contributing to, rather than fighting, security
    mechanisms.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我想强调的这个故事的教训不仅仅局限于移动设备加密的设计，而是广泛适用于任何寻求提供安全的大型系统。关键是，尽管进行了细致的设计，并提供了丰富的数据保护功能，但在最后一公里提供完整安全的工作往往会落空。拥有强大的安全模型只有在开发人员使用它并且用户理解其好处时才有效。实现有效的安全性需要提供一个既能与应用程序合作而非对抗的、有用的功能平衡。所有需要保护的数据都必须得到保护，且与基础设施（如此例中的云）之间的交互或依赖不应削弱其有效性。最后，所有这些必须与典型的工作流集成，以便终端用户为安全机制做出贡献，而非与之对抗。
- en: Years ago I witnessed a case of falling short on the last mile with the release
    of the .NET Framework. The security team worked hard getting Code Access Security
    (CAS)—described in Chapter 3—into this new programming platform, but failed to
    evangelize its use enough. Recall that CAS requires that managed code be granted
    permissions to perform privileged operations and then assert them when needed—an
    ideal tool for the Least Privilege pattern. Unfortunately, outside of the runtime
    team, developers perceived this as a burden and failed to see the feature’s security
    benefit. As a result, instead of using the fine-grained permissions that the system
    provided only where needed, applications would typically assert full privilege
    once, at the start of the program, and then operate entirely without restrictions.
    This worked functionally, but meant that applications ran under excess permissions—with
    the bank vault door always open, if you will—resulting in any vulnerabilities
    being far more exposed to risk than they would have been if CAS had been used
    as intended.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 多年前，我亲眼目睹了在.NET框架发布时的最后一公里失败。安全团队在将代码访问安全（CAS）——第3章中描述——引入这个新的编程平台时做了大量努力，但未能足够推动其使用。回想一下，CAS要求托管代码被授予权限来执行特权操作，并在需要时进行断言——这是实现最小特权模式的理想工具。不幸的是，除了运行时团队之外，开发人员将其视为一种负担，并未看到该功能的安全益处。因此，应用程序通常不是在需要的地方使用系统提供的细粒度权限，而是在程序开始时断言完全的权限，然后完全不受限制地运行。这样做在功能上是有效的，但意味着应用程序以过多的权限运行——可以说，就像银行金库的门始终敞开一样——使得任何漏洞都比如果按预期使用CAS时暴露的风险更大。
- en: These considerations are representative of the challenges that all systems face,
    and are a big reason why security work is never really done. Having built a great
    solution, we need to ensure that it is understood by developers as well as users,
    that it is actually used, and that it is used properly. Software has a way of
    getting used in novel ways its makers never anticipated, and as we learn about
    these cases, it’s important to consider the security ramifications and, if necessary,
    adapt. All of these factors and more are essential to building secure systems
    that really work.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这些考虑因素代表了所有系统面临的挑战，也是安全工作永远无法完成的一个重要原因。构建出一个优秀的解决方案后，我们需要确保开发人员和用户都能理解它，确保它被实际使用，并且使用得当。软件总是会以其创造者未曾预料的方式被使用，而在了解这些案例时，考虑安全的后果并在必要时做出调整非常重要。所有这些因素及更多因素对于构建真正有效的安全系统都是至关重要的。
- en: Conclusion
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Software has the unique and auspicious property of consisting entirely of bits—it’s
    just a bunch of 0s and 1s—so we can literally conjure it out of thin air. The
    materials are free and available in unlimited quantities, so our imagination and
    creativity are the only limiting factors. This is equally true for the forces
    of good as it is for those who seek to harm, so both the promise and the daunting
    challenge are unbounded.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 软件具有一个独特且幸运的特性，那就是它完全由比特组成——它只是一些0和1——所以我们可以字面上从空气中创造它。材料是免费的，且可以无限量获取，因此我们的想象力和创造力是唯一的限制因素。这对于善良的力量和寻求伤害的人来说都是如此，因此，既有希望也有严峻的挑战是无边界的。
- en: This chapter provided a call to action and some forward-looking ideas. When
    developing software, consider security implications early in the process, and
    get more people thinking about security to provide more diverse perspectives on
    the topic. An increased awareness of security leads to healthy skepticism and
    vigilance throughout the software lifecycle. Lessen your dependence on manual
    checking, and provide more automated verification. Keep auditable records of all
    key decisions and actions along the way to realizing a system, so the security
    properties of the system are well defined. Choose components wisely, but also
    test assumptions and important properties of the system. Reduce fragility; manage
    complexity and change. When vulnerabilities arise, investigate their root causes,
    learn from them, and proactively reduce the risk going forward. Critically examine
    realistic scenarios and work toward delivering security to the last mile. Publish
    the details as fully as is responsible so others can learn from the issues you
    encounter and how you respond. Iterate relentlessly in small steps to improve
    security and honor privacy.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了行动号召和一些前瞻性的想法。在开发软件时，务必在早期考虑安全性影响，并让更多的人思考安全问题，以便提供更多元化的视角。提高安全意识有助于在整个软件生命周期内保持健康的怀疑态度和警觉性。减少对手动检查的依赖，提供更多的自动化验证。保留所有关键决策和行动的可审计记录，以便系统的安全性得以明确定义。明智地选择组件，同时测试假设和系统的重要属性。减少脆弱性；管理复杂性和变化。当漏洞出现时，调查其根本原因，从中学习，并主动减少未来的风险。批判性地审视现实场景，并致力于将安全带到最后一公里。尽可能负责地公开细节，以便其他人可以从您遇到的问题以及您的应对中学习。不断地以小步伐迭代，改善安全性并尊重隐私。
- en: Thank you for joining me on this trek through the hills and valleys of software
    security. We certainly did not cover every inch, but you should now have a grasp
    of the lay of the land. I hope you have found useful ideas herein and, with a
    better understanding of the topic, that you will begin to put them into practice.
    This book isn’t *the* answer, but it offers *some* answers to raising the bar
    on software security. Most importantly, please don your “security hat” from time
    to time and apply these concepts and techniques in your own work, starting today.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您与我一同踏上这段穿越软件安全的山丘和山谷之旅。我们当然没有涵盖每一个细节，但现在您应该对这个领域有了初步的了解。我希望您在其中发现了有用的想法，并且通过更深入的理解，开始将它们付诸实践。这本书不是*唯一的*答案，但它提供了*一些*提高软件安全性的答案。最重要的是，请不时地戴上您的“安全帽”，并将这些概念和技巧应用到您的工作中，从今天开始。
