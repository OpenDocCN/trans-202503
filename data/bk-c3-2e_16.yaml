- en: '**16**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**16**'
- en: '**VALUES AND SIZING**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**值和尺寸**'
- en: '![Image](graphics/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/common-01.jpg)'
- en: Much of CSS3, from its many new selectors to layout and font properties, is
    designed to give you more granular control over presentation than was available
    in CSS2.1\. That control will be even more evident in this chapter, as I introduce
    new value functions and units, as well as methods to calculate dimensions automatically.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3 的许多新特性，从新的选择器到布局和字体属性，都是为了给你比 CSS2.1 提供更多的展示控制。这种控制将在本章中更加明显，我将介绍新的值函数和单位，以及自动计算尺寸的方法。
- en: '**Relative Length Units**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**相对长度单位**'
- en: In CSS a *relative length unit* is one whose value is relative to another property.
    The two relative units in CSS2.1 are `em`, which is calculated from the `font-size`
    property of an element, and `ex`, which is calculated from the x-height of the
    element’s font (see “[`font-size-adjust`](ch05.html#ch05leve1sec62)” on [page
    56](ch05.html#page_56)).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CSS 中，*相对长度单位* 是指其值相对于其他属性的单位。CSS2.1 中的两个相对单位是 `em`，它是根据元素的 `font-size` 属性计算的，和
    `ex`，它是根据元素字体的 x-height（参见 “[`font-size-adjust`](ch05.html#ch05leve1sec62)” 在
    [第 56 页](ch05.html#page_56)）计算的。
- en: CSS3 expands the range of relative units, which are no longer relative solely
    to an element’s font size. The new units are defined in the Values and Units Module
    (*[http://www.w3.org/TR/css-values/](http://www.w3.org/TR/css-values/)*).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3 扩展了相对单位的范围，这些单位不再仅仅相对于元素的字体大小。新单位定义在“值和单位模块”（*[http://www.w3.org/TR/css-values/](http://www.w3.org/TR/css-values/)*）中。
- en: '***Root-Relative Units***'
  id: totrans-7
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***根相对单位***'
- en: The first new unit introduced in CSS3 is the `rem`, or *root em*. It behaves
    like the `em` unit from CSS2.1, but instead of being relative to the `font-size`
    value of the current element, it’s relative to the `font-size` value of the document
    root (the `html` element).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3 中引入的第一个新单位是 `rem`，或称 *根 em*。它的行为类似于 CSS2.1 中的 `em` 单位，但不同的是，它不是相对于当前元素的
    `font-size` 值，而是相对于文档根元素（`html` 元素）的 `font-size` 值。
- en: 'Although `em` is quite useful, it’s not without its drawbacks, which become
    most apparent when nesting elements. To illustrate the problem, I’ll use this
    markup:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 `em` 很有用，但也不是没有缺点，尤其是在嵌套元素时，这些缺点会变得更加明显。为了说明这个问题，我将使用以下标记：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'and this simple style rule:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以及这个简单的样式规则：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you presume that the root `font-size` of the document is the common browser
    default of 16px, the first `li` element will have a calculated `font-size` of
    32px (16 multiplied by 2). But the `font-size` of the `li` elements nested inside
    the first would be calculated relative to the inherited value, making them 64px
    (32 multiplied by 2).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果假设文档的根`font-size`是常见的浏览器默认值 16px，那么第一个 `li` 元素的计算`font-size`将是 32px（16 乘以
    2）。但嵌套在第一个 `li` 内的 `li` 元素的 `font-size` 将相对于继承的值计算，使得它们的字体大小为 64px（32 乘以 2）。
- en: 'This is where the `rem` unit becomes essential. Here’s the same code as the
    previous example, only now using the `rem` in place of the `em` unit:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这时，`rem` 单位变得至关重要。这里是与前一个示例相同的代码，只不过这次使用了 `rem` 替代了 `em` 单位：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Again, presuming a root `font-size` of 16px, the first `li` has a calculated
    `font-size` of 32px. This time, however, the `font-size` of the nested `li` elements
    is also relative to the root value, the same as their parent. And no matter how
    many nested layers down you go, that value is always relative to the root.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 同样假设根 `font-size` 为 16px，第一个 `li` 的计算 `font-size` 为 32px。然而，这时嵌套的 `li` 元素的 `font-size`
    也相对于根值计算，与它们的父元素相同。无论嵌套层级如何，这个值始终相对于根元素。
- en: '***Viewport-Relative Units***'
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***视口相对单位***'
- en: When building responsively, developers tend to use percentage values for layout
    elements, as they scale fluidly across the range of different screen sizes that
    websites need to cater to. Percentages are useful at a top level, but—as you just
    saw with `em` units—you can run into difficulties when using percentages with
    nested elements.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建响应式设计时，开发人员往往使用百分比值来进行布局，因为它们可以在不同屏幕尺寸的范围内流畅缩放，以适应各种网站需求。百分比在顶层非常有用，但正如你刚才看到的，使用
    `em` 单位时，在嵌套元素中使用百分比可能会遇到困难。
- en: 'This code illustrates the problem:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码说明了问题：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, imagine that `.parent` is 75 percent of the viewport width, and you want
    `.child` to be 65 percent of the viewport width—not the width of its parent. To
    do this, you have to divide 65 by 75, giving you a result of 86.666 (percent).
    This calculation is simple enough, but the deeper the nesting goes, the more complex
    the calculations become.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设 `.parent` 占视口宽度的 75％，你希望 `.child` 占视口宽度的 65％——而不是它父元素的宽度。要做到这一点，你需要将 65
    除以 75，得到 86.666（百分比）。这个计算相对简单，但嵌套层次越深，计算就会变得越复杂。
- en: 'A better solution is to use CSS3’s viewport-relative units—`vh` and `vw`—which
    represent viewport height and width, respectively. Each unit of value represents
    1 percent of the appropriate viewport dimension: 1vh is 1 percent of the viewport
    height, and 1vw is 1 percent of the viewport width. For example, the following
    code makes an element 75 percent of the viewport width and 50 percent of its height:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更好的解决方案是使用 CSS3 的视口相对单位——`vh` 和 `vw`，它们分别表示视口的高度和宽度。每个单位的值代表适当视口维度的 1％：1vh
    是视口高度的 1％，1vw 是视口宽度的 1％。例如，以下代码使元素占视口宽度的 75％，高度的 50％：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The advantage of using these units is that when elements are nested, the units
    remain relative to the viewport. So, in the case of my previous example, to make
    `.child` 65 percent of the total viewport width, you simply do this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些单位的好处是，当元素嵌套时，这些单位仍然相对视口。因此，在我之前的例子中，要让 `.child` 占视口总宽度的 65％，只需这样做：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: No calculation required!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要计算！
- en: 'Another pair of supplemental units is available, too: `vmax` is equivalent
    to whichever is the greater value of `vh` and `vw`, and `vmin` is equivalent to
    the lesser value. For instance, if the viewport were 480×640, the height would
    be greater, so `vmax` would be equivalent to `vh`, and `vmin` would be equal to
    `vw`. Swap the viewport dimensions (640×480), and `vmax` and `vmin` reverse their
    values.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一对补充单位可用：`vmax` 等于 `vh` 和 `vw` 中较大的一个值，`vmin` 等于较小的值。例如，如果视口为 480×640，视口高度较大，那么
    `vmax` 等于 `vh`，而 `vmin` 等于 `vw`。如果交换视口的尺寸（640×480），那么 `vmax` 和 `vmin` 的值就会互换。
- en: 'So if you presume a viewport of 480×640, in the following code snippet, element
    `*E*` is 640px wide, and element `*F*` is 480px wide:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 假设视口为 480×640，在以下代码片段中，元素`*E*`的宽度为 640px，元素`*F*`的宽度为 480px：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The utility of `vmax` and `vmin` is in ensuring an element remains proportional
    to the viewport regardless of orientation—useful when that orientation can easily
    change, such as on a mobile or tablet device.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`vmax` 和 `vmin` 的作用是确保元素在任何方向下都能保持与视口的比例关系——当方向可能轻松变化时非常有用，比如在移动设备或平板上。'
- en: Internet Explorer 9 implemented `vmin` as the `vm` unit, but neither it nor
    IE10 supports `vmax` (support was added in IE11). Many older smartphone browsers
    don’t support these properties, although newer versions (such as iOS 6.0 and Android
    4.4 and above) do (though often without support for `vmax`, most notably in iOS
    as of this writing).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Internet Explorer 9 实现了 `vmin` 作为 `vm` 单位，但它和 IE10 都不支持 `vmax`（在 IE11 中才开始支持）。许多旧版智能手机浏览器不支持这些属性，尽管较新版本（如
    iOS 6.0 和 Android 4.4 及以上版本）支持它们（尽管通常不支持 `vmax`，特别是在 iOS 中，截至目前为止）。
- en: '**Calculated Values**'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**计算值**'
- en: One of the biggest changes in CSS3 lies in the way that lengths can be declared.
    In CSS2.1, lengths are always a single value plus a unit, and if calculations
    are required (say, subtracting the width of a border from a total width), the
    developer has to do the calculation. But in CSS3, the browser performs the calculations.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3 的最大变化之一在于长度声明的方式。在 CSS2.1 中，长度总是一个数值加上一个单位，如果需要计算（例如，减去边框宽度以得到总宽度），开发者必须手动计算。但在
    CSS3 中，浏览器会自动进行计算。
- en: 'CSS calculations are performed with the `calc()` function. You can use this
    function anywhere you use the common value units—length, angle, number, and so
    on. It takes as an argument any mathematical expression using those common value
    units and four basic operands: `+` (addition), `-` (subtraction), `*` (multiplication),
    and `/` (division).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 计算通过 `calc()` 函数进行。你可以在使用常见值单位（如长度、角度、数字等）的任何地方使用此函数。它的参数是使用这些常见值单位和四个基本运算符（`+`（加法）、`-`（减法）、`*`（乘法）和
    `/`（除法））的任何数学表达式。
- en: 'The `calc()` function is especially useful when mixing units. For example,
    you could create an expression to calculate the width of an element (as a percentage)
    minus its border (as an `em`) like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`calc()` 函数在混合单位时特别有用。例如，你可以创建一个表达式来计算元素的宽度（作为百分比），减去它的边框（作为 `em` 单位），像这样：'
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Addition and subtraction can be performed with any units, but when using multiplication,
    at least one argument on either side of the operand must be a unitless number.
    In the case of division, the argument *after* the operand must be a unitless number.
    Here are examples of how to perform both multiplication and division:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 加法和减法可以使用任何单位进行运算，但在进行乘法时，操作数两侧至少有一个参数必须是无单位的数字。对于除法，*操作数之后*的参数必须是无单位的数字。以下是如何进行乘法和除法的示例：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can use parentheses in expressions to show computational order. For example,
    the following code shows an expression that performs three calculations:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在表达式中使用括号来显示计算顺序。例如，以下代码展示了一个进行三次计算的表达式：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The expression first multiplies 10 percent by 5, and then adds it to the result
    of 15 percent multiplied by 2\. This setup works fine, but it’s is not immediately
    apparent when you look at it, and given a quite complex calculation could be difficult
    indeed to immediately understand. The expression becomes easier when written with
    parentheses:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 该表达式首先将 10% 乘以 5，然后将其加到 15% 乘以 2 的结果上。这个设置很好，但乍一看并不容易理解，考虑到复杂的计算，可能确实难以立即明白。将其写成带有括号的形式后，表达式就容易理解了：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can also use nested `calc()` functions to achieve the same result.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用嵌套的`calc()`函数来实现相同的结果。
- en: 'When using multiplication or division in an expression, you must insert a single
    whitespace character around the operand—failing to do this means the expression
    is invalid and the property will be ignored. The following code shows an expression
    written twice: the first one is invalid because it has no space around the operand;
    the second is correctly formatted and, therefore, valid.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在表达式中使用乘法或除法时，你必须在操作数周围插入一个空格字符——如果没有这样做，表达式将无效，属性也会被忽略。以下代码展示了两次写出的表达式：第一个是无效的，因为操作数周围没有空格；第二个是格式正确的，因此有效。
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Sizing Elements**'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**元素尺寸**'
- en: The size of an element is generally set using the `width` or `height` properties
    or their `max*-*` and `min*-*` variants, together with either an absolute (`px`),
    relative (`em`), or percentage value. Although these options are good enough for
    most day-to-day use, I often find times when I wish the box model were a little
    more flexible or aware of the elements around it. CSS3 introduces new properties
    and values aimed at providing this extra flexibility through a box-model toggle
    and new content-aware sizing methods.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 元素的大小通常通过`width`或`height`属性来设置，或者通过它们的`max*-*`和`min*-*`变体，结合绝对值（`px`）、相对值（`em`）或百分比值。虽然这些选项对于大多数日常使用来说已经足够，但我常常发现有时候我希望盒模型能更灵活一些，或者能更好地感知周围的元素。CSS3引入了新的属性和值，旨在通过盒模型切换和新的内容感知尺寸方法提供这种额外的灵活性。
- en: '***Box Sizing***'
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***盒模型尺寸***'
- en: 'For many years, Internet Explorer implemented its box model in contravention
    of the W3C spec. The W3C model dictated that the `width` value was the width of
    the content box and that any padding and borders were extra. In IE’s model, on
    the other hand, the `width` value was equal to the total width of the element
    including any padding and borders. Consider these style rules:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，Internet Explorer 实现的盒模型违反了 W3C 规范。W3C 模型规定 `width` 值表示内容框的宽度，任何填充和边框都是额外的。而在
    IE 的模型中，`width` 值等于元素的总宽度，包括任何填充和边框。请看以下样式规则：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the IE model, the content box would be 70px wide, whereas in the W3C model,
    it would be the full 100px.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IE 模型中，内容框的宽度为70px，而在 W3C 模型中，它则是完整的100px。
- en: 'Although the standard model is more logical, at times the IE model is more
    convenient to use. In CSS3, you can opt to use the IE model with the `box-sizing`
    property, which is described in the CSS3 Basic User Interface Module (*[http://www.w3.org/TR/css3-ui/](http://www.w3.org/TR/css3-ui/)*).
    The syntax is as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然标准模型更为逻辑，但有时 IE 模型更方便使用。在 CSS3 中，你可以选择使用 IE 模型，方法是使用 `box-sizing` 属性，详细说明可以参考
    CSS3 基本用户界面模块（*[http://www.w3.org/TR/css3-ui/](http://www.w3.org/TR/css3-ui/)*）。其语法如下：
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The default keyword is `content-box`, which means apply the specified `width`
    or `height` to the content box only, as in the W3C model. In contrast, the alternative
    value `border-box` means any specified length should also include any padding
    and border boxes.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 默认关键字是`content-box`，这意味着只将指定的`width`或`height`应用于内容框，就像在 W3C 模型中一样。相比之下，替代值`border-box`意味着任何指定的长度都应包括任何填充和边框框。
- en: '[Figure 16-1](ch16.html#ch16fig1) shows the difference. The top example uses
    the W3C box model, whereas the bottom one has the `border-box` value applied.
    As you can see, the total width of the lower example is equal to the content box
    of the upper.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 16-1](ch16.html#ch16fig1) 显示了两者的区别。顶部示例使用了 W3C 盒模型，而底部示例应用了 `border-box`
    值。正如你所看到的，底部示例的总宽度等于顶部示例的内容框宽度。'
- en: '![Image](graphics/f16-01.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f16-01.jpg)'
- en: '*Figure 16-1: Comparing values for* `*box-sizing*`*: the default* `*content-box*`
    *(top) and* `*border-box*` *(bottom)*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-1：比较 `*box-sizing*` 值：默认的 `*content-box*` *(顶部) 和 `*border-box*` *(底部)*'
- en: '**NOTE**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Some people prefer to set a global style rule to apply* `*border-box*` *to
    all elements. I prefer to apply the rule only as required.*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*有些人喜欢设置一个全局样式规则，将* `*border-box*` *应用于所有元素。我更倾向于根据需要才应用这个规则。*'
- en: '***Intrinsic and Extrinsic Sizing***'
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***内在与外在尺寸***'
- en: One challenge in web layout is that elements are ignorant of their content and
    the context in which they’re used—in other words, without JavaScript, an element
    is not aware of the dimensions of its child or parent elements. CSS3 introduces
    a new concept that changes that equation a bit with the addition of *intrinsic*
    and *extrinsic* sizing. Intrinsic sizing is based on an element’s children, and
    extrinsic sizing is based on the size of the parent element. These sizing models
    are defined in the CSS3 Intrinsic & Extrinsic Sizing Module (*[http://dev.w3.org/csswg/css-sizing/](http://dev.w3.org/csswg/css-sizing/)*).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页布局中，一个挑战是元素对其内容以及使用上下文毫无感知——换句话说，若没有 JavaScript，元素无法感知其子元素或父元素的尺寸。CSS3 引入了一个新概念，通过添加*内在*和*外在*尺寸，稍微改变了这个局面。内在尺寸基于元素的子元素，而外在尺寸基于父元素的尺寸。这些尺寸模型在
    CSS3 内在与外在尺寸模块中有所定义（*[http://dev.w3.org/csswg/css-sizing/](http://dev.w3.org/csswg/css-sizing/)*）。
- en: 'All of the intrinsic and extrinsic sizing models are applied using a keyword
    value on the `width` or `height` properties (and their `min-` and `max-` variants).
    For example, this listing shows how a new sizing model would be applied to `width`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所有内在和外在尺寸模型都通过在 `width` 或 `height` 属性上使用关键词值来应用（以及它们的 `min-` 和 `max-` 变体）。例如，以下列表展示了如何将新尺寸模型应用于
    `width`：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**max-content and min-content**'
  id: totrans-64
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**max-content 和 min-content**'
- en: 'The first new keyword values, `max-content` and `min-content`, are intrinsic
    values that make an element as wide or as high as the largest (`max-content`)
    or smallest (`min-content`) item of content (in text, the width of the longest
    word) it contains. Consider this markup of an `img` and `p` element inside a containing
    `div`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个新关键词值，`max-content` 和 `min-content`，是内在值，它们让元素的宽度或高度与其包含的内容中最大（`max-content`）或最小（`min-content`）项的大小相同（对于文本来说，就是最长单词的宽度）。考虑以下包含
    `img` 和 `p` 元素的 `div` 元素标记：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Say the `img` element has a width of 200px and the width of the `p` is 300px.
    If the `div` element had a `width` value of `max-content`, it would be just wide
    enough to contain the `p`, and if it had a value of `min-content`, it would be
    just wide enough to fit the `img` and the text in the `p` would wrap.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 `img` 元素的宽度为 200px，`p` 的宽度为 300px。如果 `div` 元素的 `width` 值为 `max-content`，它将刚好足够宽以容纳
    `p`，而如果其值为 `min-content`，它将刚好足够宽以容纳 `img`，且 `p` 中的文本会换行。
- en: Compare the results shown in [Figure 16-2](ch16.html#ch16fig2). The container
    element on the left has the `max-content` value applied, which makes it as wide
    as the widest child (the `p`), whereas the one on the right has `min-content`
    applied, which makes it as wide as the narrowest child (the `img`).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 比较 [图 16-2](ch16.html#ch16fig2) 中显示的结果。左侧的容器元素应用了 `max-content` 值，这使它的宽度与最宽的子元素（`p`）相同，而右侧的容器元素应用了
    `min-content`，使它的宽度与最窄的子元素（`img`）相同。
- en: '![Image](graphics/f16-02.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f16-02.jpg)'
- en: '*Figure 16-2: The* `*max-content*` *value (left) makes the element as wide
    as its widest child, whereas* `*min-content*` *(right) makes the element as wide
    as its narrowest child.*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-2：* `*max-content*` *值（左）使元素宽度与其最宽的子元素相同，而* `*min-content*` *(右) 使元素宽度与其最窄的子元素相同。*'
- en: '**NOTE**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*As of this writing, the current desktop and mobile versions of Chrome, Firefox,
    and Safari support these keywords, although each requires vendor prefixes (namely*`*-moz-min-content*`
    *and* `*-webkit-min-content*`*). Support is not currently present in Internet
    Explorer or older smartphones.*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*截至目前，当前的桌面和移动版本的 Chrome、Firefox 和 Safari 支持这些关键词，尽管每个浏览器需要厂商前缀（即 `*-moz-min-content*`
    和 `*-webkit-min-content*`）。目前，Internet Explorer 和旧版智能手机不支持这些关键词。*'
- en: '**fit-content**'
  id: totrans-73
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**fit-content**'
- en: 'The next intrinsic keyword value is potentially the most useful. Called `fit-content`,
    it sizes an element just as floated elements or table cells do: An element will
    expand to be just wide enough to contain its content, unless the maximum width
    of the element is reached, in which case, the content will wrap.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个内在关键字值可能是最有用的。它叫做 `fit-content`，它让元素像浮动元素或表格单元格一样调整大小：元素将扩展，刚好足够容纳其内容，除非元素的最大宽度已达到，此时，内容将换行。
- en: '[Figure 16-3](ch16.html#ch16fig3) compares the effect of `fit-content` to `max-content`
    and `min-content`. The box at the top left has `fit-content` applied, and the
    content wraps when it reaches the limit of the parent container. In contrast,
    the box at the top right has `max-content` applied, so it should expand to fit
    its content—however, the box now exceeds the width of its parent container, which
    has an `overflow` value of `hidden`, meaning the box is clipped.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 16-3](ch16.html#ch16fig3) 比较了 `fit-content` 与 `max-content` 和 `min-content`
    的效果。左上方的框使用了 `fit-content`，当内容达到父容器的限制时，内容会换行。相反，右上方的框使用了 `max-content`，因此它会扩展以适应内容——然而，该框现在超出了父容器的宽度，父容器的
    `overflow` 属性值为 `hidden`，意味着该框被裁剪了。'
- en: The box at bottom left also has `fit-content` applied, so the container resizes
    to fit the width of the content; the box at the bottom right has `min-content`
    applied, so the container is only as wide as the `img` element and the text content
    wraps.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 左下角的框也应用了 `fit-content`，因此容器会调整大小以适应内容的宽度；右下角的框应用了 `min-content`，因此容器的宽度仅与 `img`
    元素一样，文本内容会换行。
- en: '![Image](graphics/f16-03.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f16-03.jpg)'
- en: '*Figure 16-3: The* `*fit-content*` *value, compared to* `*max-content*` *and*
    `*min-content*`'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-3：* `*fit-content*` *值，与* `*max-content*` *和* `*min-content*` *进行比较*'
- en: '**fill**'
  id: totrans-79
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**fill**'
- en: The final keyword in the spec is named `fill`. (But in Firefox it’s `available`
    and in Chrome it’s `fill-available`!) This extrinsic value makes an element fill
    all available space along the height or width of its parent.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 规范中的最后一个关键字叫做 `fill`。（但在 Firefox 中是 `available`，在 Chrome 中是 `fill-available`！）这个外部值使元素填充其父容器的可用高度或宽度。
- en: 'Say you want to make an inline-block `p` element, with border and padding,
    expand to be as wide as its parent. Generally, you would apply these rules:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想让一个带有边框和内边距的内联块级 `p` 元素，扩展到和它的父元素一样宽。通常，你会应用以下规则：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As you know, however, an element’s “real” width also includes padding and border,
    so, in this case, the `p` element would overflow its parent. One solution is to
    use the `box-sizing` property (see “[Box Sizing](ch16.html#ch16leve1sec213)” on
    [page 203](ch16.html#page_203)), but you may have good reasons for keeping the
    standard box model, so a better alternative is to use intrinsic sizing:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，正如你所知，一个元素的“真实”宽度还包括内边距和边框，因此，在这种情况下，`p` 元素会超出其父容器的范围。一种解决方案是使用 `box-sizing`
    属性（请参见 “[Box Sizing](ch16.html#ch16leve1sec213)” 在 [第 203 页](ch16.html#page_203)），但你可能有充分的理由保持标准的盒模型，所以更好的替代方案是使用内在尺寸：
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The result is shown in [Figure 16-4](ch16.html#ch16fig4); the inline-block element,
    with border and padding, is resized to fill the available space in its parent.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如 [图 16-4](ch16.html#ch16fig4) 所示；带有边框和内边距的内联块元素被调整大小以填充其父容器中的可用空间。
- en: '![Image](graphics/f16-04.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f16-04.jpg)'
- en: '*Figure 16-4: Using the* `*fill*` *value for* `*width*` *makes the inline-block
    caption shown here fill the available width of its parent.*'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-4：使用* `*fill*` *值来设置* `*width*` *使得如图所示的内联块标题填充其父容器的可用宽度。*'
- en: '**Summary**'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter, I’ve discussed value units that are relative to a root font
    size and the viewport, dynamic calculations of values, and CSS3 ways to size elements
    based on their content and context. I’ve also discussed the CSS3 switch to a different
    box model.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我讨论了与根字体大小和视口相关的值单位、动态计算值以及基于内容和上下文对元素进行尺寸调整的 CSS3 方法。我还讨论了 CSS3 对不同盒模型的切换。
- en: Although units and sizing methods may seem like an unglamorous aspect of CSS,
    they offer you fine-grained control over your layouts, which is always welcome.
    Because websites are viewed on such a variety of different devices, for an element
    to be aware of its viewport, content, and context, so it presents content in the
    most appropriate way, is extremely valuable.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然单位和尺寸方法可能看起来是 CSS 中不太引人注目的部分，但它们能为你提供对布局的精细控制，这是非常值得欢迎的。由于网站会在各种不同的设备上查看，能让元素感知其视口、内容和上下文，并以最合适的方式呈现内容，是极其有价值的。
- en: '**Values and Sizing: Browser Support**'
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**值和尺寸：浏览器支持**'
- en: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
- en: '| Root-relative units | Yes | Yes | Yes | Yes |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 根元素相对单位 | 是 | 是 | 是 | 是 |'
- en: '| Viewport-relative units | Yes | Yes | Yes^([*](ch16.html#footnote35a)) |
    IE9^([†](ch16.html#footnote36a)), IE10^([‡](ch16.html#footnote37a)) |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 视口相对单位 | 是 | 是 | 是^([*](ch16.html#footnote35a)) | IE9^([†](ch16.html#footnote36a))，IE10^([‡](ch16.html#footnote37a))
    |'
- en: '| Calculated values | Yes | Yes | Yes | Yes |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| 计算值 | 是 | 是 | 是 | 是 |'
- en: '| Box sizing | Yes | Yes | Yes | Yes |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 盒子模型尺寸 | 是 | 是 | 是 | 是 |'
- en: '| Intrinsic/extrinsic sizing | Yes^([§](ch16.html#footnote38a)) | Yes^([§](ch16.html#footnote38a))
    | Yes^([§](ch16.html#footnote38a)) | No |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 内部/外部尺寸 | 是^([§](ch16.html#footnote38a)) | 是^([§](ch16.html#footnote38a))
    | 是^([§](ch16.html#footnote38a)) | 否 |'
- en: '[*](ch16.html#footnote_35a) Buggy support for `vh` in iOS'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[*](ch16.html#footnote_35a) iOS中的`vh`支持有问题'
- en: '[†](ch16.html#footnote_36a) Supports `vm` instead of `vmin`, no support for
    `vmax`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[†](ch16.html#footnote_36a) 支持`vm`代替`vmin`，不支持`vmax`'
- en: '[‡](ch16.html#footnote_37a) No support for `vmax`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[‡](ch16.html#footnote_37a) 不支持`vmax`'
- en: '[§](ch16.html#footnote_38a) With vendor prefix'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[§](ch16.html#footnote_38a) 带有供应商前缀'
