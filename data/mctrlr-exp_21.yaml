- en: '**21  CMOS VLSI Interlude**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**21  CMOS VLSI插曲**'
- en: Way back in [Chapter 18](ch18.xhtml#ch18), we took a step away from breaking
    chips to quickly study how dice were packaged. We saw that after being sawn apart,
    dice were glued to a lead frame and then wire bonded to pins. The entire frame
    was then encased in epoxy, after which the pins would be bent to the right shape
    and the excess of the frame would be cut away. In this chapter, we’ll take a deeper
    look into how chips are designed and manufactured. This won’t be as thorough as
    a real book on VLSI, so please study one of those books if you need to know this
    in detail.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 很早在[第18章](ch18.xhtml#ch18)中，我们就暂时不讨论破坏芯片，而是快速研究了晶圆如何被封装。我们看到，芯片被锯开后，会被粘在一个引线框架上，并通过导线与引脚连接。整个框架随后被包裹在环氧树脂中，然后引脚被弯曲成正确的形状，框架的多余部分则被切除。在本章中，我们将深入探讨芯片是如何设计和制造的。这不会像关于超大规模集成电路（VLSI）的专门书籍那样详细，如果你需要详细了解，可以阅读相关书籍。
- en: Very large scale integration (VLSI) is the technology by which millions or even
    billions of metal oxide semiconductor (MOS) transistors are placed onto microchips.
    These transistors are combined into a few hundred unique logical units called
    *basic blocks*, which are small sets of transistors that implement a particular
    function, like a logic gate or a memory cell. Those blocks are placed and routed
    to form intellectual property (IP) blocks of a VLSI chip. Larger IP blocks would
    be things like the CPU, SRAM, mask ROM, and flash ROM. IP blocks might be designed
    by hand, or they might be designed in a high-level language like Verilog or VHDL.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 超大规模集成电路（VLSI）技术是将数百万甚至数十亿个金属氧化物半导体（MOS）晶体管集成到微芯片中的技术。这些晶体管被组合成几百个独特的逻辑单元，称为*基本模块*，这些模块是实现特定功能的小型晶体管集合，如逻辑门或存储单元。这些模块被放置并连接形成VLSI芯片的知识产权（IP）模块。较大的IP模块包括CPU、SRAM、掩膜ROM和闪存ROM。IP模块可以手动设计，也可以通过高级语言如Verilog或VHDL进行设计。
- en: That explanation works a high level, but important details are missing. What
    does a basic block look like for logic, and are memories also constructed out
    of these blocks? Let’s take a look and see.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解释在高层次上是有效的，但重要的细节被省略了。逻辑的基本模块是什么样的，存储器也是由这些模块构建的吗？让我们来看看。
- en: '**Process Layers**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**工艺层**'
- en: We learned in [Chapter 18](ch18.xhtml#ch18) that lithography is used to place
    chemical layers onto a wafer and then selectively etch them away. These are stacked
    in a consistent order for any given process, and in this section we will cover
    the stack as it is ordered after manufacturing. This is somewhat different than
    the order in which they are manufactured, as the fab sometimes digs down through
    a layer to place a different layer lower in the chip.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第18章](ch18.xhtml#ch18)中学到，光刻技术用于将化学层放置到硅片上，然后选择性地将其蚀刻掉。这些层按给定工艺的顺序堆叠，并且在本节中，我们将介绍这些层在制造后按顺序堆叠的方式。这与它们的制造顺序有所不同，因为在制造过程中，晶圆厂有时会通过一层材料向下挖掘，以便将另一层放置在芯片的更低位置。
- en: The process starts with a large wafer made out of silicon. Layers are stacked
    onto the *frontside* of the silicon, while the *backside* of the silicon remains
    blank. In most encapsulated chips, the frontside faces away from the circuit board,
    but there are exceptions like the MYK82 chip that we’ll dump in [Chapter 24](ch24.xhtml#ch24).
    Some devices with wafer-level chip-scale packaging (WL-CSP) have no encapsulation;
    they place solder balls on the frontside of the die.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程从一块由硅制成的大硅片开始。层被堆叠到硅片的*正面*，而硅片的*背面*保持为空白。在大多数封装芯片中，正面朝向远离电路板的一侧，但也有例外，例如我们将在[第24章](ch24.xhtml#ch24)中讨论的MYK82芯片。一些采用晶圆级芯片规模封装（WL-CSP）的设备没有封装，它们将焊球放置在芯片的正面。
- en: Pure silicon isn’t very useful for doing things, so even though we start with
    pure silicon, we usually dope it into *n-type* or *p-type*. These are named for
    their charge, with n-type having a negative charge and p-type having a positive
    charge.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 纯硅在做很多事情时并不非常有用，因此，尽管我们开始时使用纯硅，但我们通常会将其掺杂成*n型*或*p型*。这些名称与它们的电荷类型有关，n型带负电荷，而p型带正电荷。
- en: At the very bottom, we have a p-type *substrate* layer that covers the entire
    surface area of the wafer. NMOS transistors can be placed directly on this substrate,
    but PMOS transistors must be placed inside an *n-well*, which is dug into the
    substrate. We’ll come back to the difference between NMOS and PMOS transistors
    in a bit.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在最底部，我们有一层p型*衬底*，它覆盖了整个硅片的表面。NMOS晶体管可以直接放置在这个衬底上，但PMOS晶体管必须放置在一个*n-well*中，这个n-well是挖掘到衬底中的。稍后我们将回到NMOS和PMOS晶体管之间的区别。
- en: Above the p-substrate and the n-well, we have a *diffusion* layer that holds
    both n-type and p-type silicon at roughly the same depth. These are *implanted*
    into the exposed p-substrate or n-well by firing charged ions through a mask.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 p-基片和 n-井上方，我们有一个*扩散*层，它将 n 型和 p 型硅大致保持在相同的深度。这些通过掩膜将带电离子注入到暴露的 p-基片或 n-井中，形成*掺杂*层。
- en: Above the diffusion layer, we have *polysilicon*. Polysilicon is most important
    as the inputs of NMOS and PMOS transistors. Wherever you see a polysilicon trace
    between two of the same diffusion type (p or n), that’s a transistor. In digital
    logic, it’s easiest to think of a transistor as a switch; current flow between
    the diffusions is turned on and off by the input on the polysilicon.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在扩散层上方，我们有*多晶硅*。多晶硅最重要的作用是作为 NMOS 和 PMOS 晶体管的输入。无论何时你看到两个相同扩散类型（p 或 n）之间的多晶硅轨迹，那就是一个晶体管。在数字逻辑中，最容易将晶体管看作开关；通过多晶硅上的输入，电流在扩散层之间的流动被打开或关闭。
- en: Above the polysilicon, we have metal layers that are used to wire pieces of
    the chip together. In the Seventies, there would be just one metal layer. The
    open source SKY130 process has five metal layers, and the MOSIS 200 nm process
    has six. Processes with nine and ten layers became common by 2003\. In old chips,
    this metal would be a aluminum (Al) but now copper (Cu) is quite common.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在多晶硅上方，我们有金属层，用于将芯片的各个部分连接起来。在 70 年代，通常只有一层金属。开放源代码的 SKY130 工艺有五层金属，而 MOSIS
    200 纳米工艺有六层。从 2003 年开始，具有九层和十层的工艺变得常见。在旧的芯片中，这些金属通常是铝（Al），但现在铜（Cu）已经相当普遍。
- en: SKY130 and MOSIS are both reasonably open processes. This is the exception rather
    than the rule, and for many chips that you look at, you will not have the luxury
    of low-level process documentation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: SKY130 和 MOSIS 都是相对开放的工艺。这种情况是例外而非常态，对于许多芯片来说，你无法享受低级别的工艺文档。
- en: Chips with multiple metal layers will be routed much like a printed circuit
    board, but on chips with just one metal layer, it’s common to see metal routed
    to a short length of polysilicon without a transistor. This is a means of crossing
    wires without connecting them.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 具有多层金属的芯片将像印刷电路板一样进行布线，但对于只有一层金属的芯片，通常可以看到金属被布置到一段短的多晶硅上而没有晶体管。这是一种跨越电路而不连接它们的方式。
- en: It’s not exactly a separate layer, but you will notice that sometimes metal
    gets a little darker over polysilicon or diffusion. This is a *contact* or *via*
    between layers.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个完全独立的层，但你会注意到，有时金属在多晶硅或扩散层上方会显得更暗。这是*接触*或*过孔*，用于连接各层之间。
- en: I’ve skipped a few layers to focus on what’s important for reverse engineering
    and to keep the explanation generic to many foundries. These include oxide layers
    to insulate between the functional layers, cap layers that are used to build capacitors
    from metal layers, and other doohickies that are not fundamental to CMOS but are
    handy for making chips in the real world. To learn more about these for any real
    process, you will need to find the documentation from the process development
    kit of the relevant foundry.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我跳过了一些层，专注于反向工程中重要的部分，并保持对许多代工厂的通用解释。这些包括用于隔离各功能层之间的氧化层，用于由金属层构建电容器的封装层，以及其他在
    CMOS 中并不基本但在实际芯片制造中非常有用的元件。要了解任何实际工艺中的更多信息，你需要查找相关代工厂的工艺开发工具包中的文档。
- en: '![Image](../images/f0196-01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0196-01.jpg)'
- en: 'Figure 21.1: SKY130 NMOS Transistor Cross Section'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21.1：SKY130 NMOS 晶体管横截面
- en: '![Image](../images/f0196-02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0196-02.jpg)'
- en: 'Figure 21.2: SKY130 PMOS Transistor Cross Section'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21.2：SKY130 PMOS 晶体管横截面
- en: '![Image](../images/f0197-01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0197-01.jpg)'
- en: 'Figure 21.3: CMOS Inverter Schematic'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21.3：CMOS 反相器电路图
- en: '**NMOS and PMOS Transistors**'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**NMOS 和 PMOS 晶体管**'
- en: 'Now that we understand the layers and the order in which they are stacked,
    let’s take a look at how to build useful logic out of these pieces. CMOS logic
    is built from two types of transistors: NMOS and PMOS.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们理解了各个层次以及它们的堆叠顺序，让我们来看一下如何用这些组件构建有用的逻辑。CMOS 逻辑是由两种类型的晶体管构建的：NMOS 和 PMOS。
- en: NMOS transistors conduct when the input is high, pulling the output down to
    low voltage. PMOS transistors conduct when the input is low, pulling the output
    up to high voltage. Any given gate will have both types of transistors, balanced
    so that the NMOS transistors are pulling up when the output is high and the PMOS
    transistors are pulling down when the output is low.^([1](footnotes.xhtml#ch21fn1))
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: NMOS晶体管在输入高电平时导通，将输出拉低至低电压。PMOS晶体管在输入低电平时导通，将输出拉高至高电压。任何给定的栅极都会包含这两种类型的晶体管，它们之间的平衡使得NMOS晶体管在输出为高时拉高电平，而PMOS晶体管在输出为低时拉低电平。^([1](footnotes.xhtml#ch21fn1))
- en: To make a transistor, a line of polysilicon is placed on a diffusion, separating
    it in half. The polysilicon is the input or *gate* connection, controlling current
    flow between the two halves of the diffusion, which we call the *source* and the
    *drain*. This structure with n-type diffusion over a p-substrate is an NMOS transistor,
    and the same structure with p-type diffusion over an n-well is a PMOS transistor.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了制造一个晶体管，首先将一条多晶硅放置在一个扩散区上，将其分成两半。多晶硅是输入或*栅极*连接，控制电流在扩散区的两半之间流动，我们将其称为*源极*和*漏极*。这种结构，n型扩散区位于p型衬底上，构成了NMOS晶体管，而同样的结构，p型扩散区位于n-well上，则构成PMOS晶体管。
- en: See [Figures 21.1](ch21.xhtml#ch21fig1) and [21.2](ch21.xhtml#ch21fig2) for
    cross sections of transistors in the SKY130 process, including some extra details
    that I’ve skipped in this explanation. In those figures, `N` and `P` describe
    the diffusion traces that become the source and drain of the transistor. The gate
    of the transistor is the polysilicon trace that sits above and between them.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见[图21.1](ch21.xhtml#ch21fig1)和[21.2](ch21.xhtml#ch21fig2)，其中展示了SKY130工艺中的晶体管横截面，包括一些在此解释中我跳过的额外细节。在这些图中，`N`和`P`描述了扩散区，它们分别成为晶体管的源极和漏极。晶体管的栅极是位于它们之间的多晶硅线。
- en: On particularly old chips, you will find that NMOS transistors are used alone,
    with pull-up resistors in lieu of PMOS transistors. This isn’t efficient by modern
    standards, but it was quite functional and saved the step of having to place an
    n-well layer or p-type diffusion at fabrication.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在特别老的芯片上，你会发现仅使用NMOS晶体管，并且用上拉电阻代替PMOS晶体管。按照现代标准来看，这种做法效率不高，但在当时非常实用，并且节省了在制造过程中需要放置n-well层或p型扩散区的步骤。
- en: These two transistor types are enough to build any form of digital logic, but
    there’s a third, called a *floating gate transistor*, that’s found in EPROM and
    flash memory. Floating gate transistors are much like NMOS, except that there
    are two layers of polysilicon stacked on top of one another. The upper polysilicon
    is the *control* gate, while the lower one is the floating gate. By *floating*,
    we mean that it is electrically disconnected and holds a charge that can be read
    through the source and the drain.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种晶体管类型足以构建任何形式的数字逻辑，但还有第三种类型，称为*浮动栅极晶体管*，它存在于EPROM和闪存中。浮动栅极晶体管与NMOS非常相似，唯一不同的是它们有两层多晶硅堆叠在一起。上层多晶硅是*控制*栅极，而下层则是浮动栅极。所谓*浮动*，意味着它在电气上是断开的，并且持有可以通过源极和漏极读取的电荷。
- en: To emphasize that everything changes with the process, I should tell you that
    the floating gate is sometimes made out of silicon nitride in a technology called
    SONOS. This is very important for flash memory quality and density, but it is
    a complication that we won’t pay much attention to in this book.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了强调一切都会随着工艺发生变化，我应该告诉你，浮动栅极有时是由氮化硅制成的，这种技术称为SONOS。这对闪存的质量和密度非常重要，但这是一个复杂因素，在本书中我们不会过多关注。
- en: A floating gate transistor is *programmed* to a zero or *erased* to a one. Programming
    is performed by holding the source and the drain low while setting the gate high;
    this adds electrons to the floating gate and makes the transistor less conductive
    between the source and the drain. Erasure is performed the opposite way, setting
    both diffusions high while the control gate is low, so that electrons flow out
    of the floating gate and the transistor is more conductive between the diffusions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 浮动栅极晶体管被*编程*为零或*擦除*为一。编程通过在源极和漏极保持低电平，同时将栅极设置为高电平进行；这样会向浮动栅极添加电子，使得晶体管在源极和漏极之间的导电性降低。擦除则是相反的过程，通过将两个扩散区设置为高电平，同时控制栅极为低电平，从而使电子从浮动栅极流出，使得晶体管在两个扩散区之间的导电性增加。
- en: Floating gate transistors can also be erased by ultraviolet light, as we saw
    in [Chapter 19](ch19.xhtml#ch19). In the early days, devices would use this as
    their only form of erasure, and those without quartz windows were effectively
    single-use. Later chips added circuitry for electrical erasure, eliminating the
    need for ultraviolet erasure in development.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 漂浮栅极晶体管也可以通过紫外线光进行擦除，就像我们在[第19章](ch19.xhtml#ch19)中看到的那样。在早期，设备会使用这种方式进行唯一的擦除，没有石英窗口的设备基本上是一次性的。后来，芯片加入了电擦除电路，消除了在开发过程中需要紫外线擦除的需求。
- en: '**Basic Blocks**'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**基本模块**'
- en: So now we understand that particular shapes will make transistors, that CMOS
    is built from two complementary types of transistors, and that an entire microchip’s
    behavior is defined by microscopic shapes on the die.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们理解了特定的形状会构成晶体管，CMOS由两种互补类型的晶体管构成，整个微芯片的行为由晶圆上的微观形状定义。
- en: Chip designers usually first choose a company that’s going to fabricate their
    chip, and then choose a process design kit (PDK) from the list of processes that
    the factory or *fab* supports. For any given process, a PDK must be written to
    describe the basic blocks of the process along with simulation data about their
    characteristics, such as timing and voltage range.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 芯片设计师通常首先选择一个将要制造芯片的公司，然后从工厂或*工艺厂*支持的工艺列表中选择一个过程设计套件(PDK)。对于任何给定的工艺，都必须编写PDK来描述该工艺的基本模块，并提供关于其特性（如时序和电压范围）的仿真数据。
- en: A few design kits were published for use in university courses or for multi-project
    wafers such as MOSIS. More recently, the 130 nm process that Cypress used around
    2001 has been open sourced as the SKY130 PDK. If you ever wonder what a cell might
    look like, it’s handy to render that cell from a few of these PDKs to see how
    they implement it. There’s no guarantee that your process will look similar, of
    course.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一些设计套件被发布，用于大学课程或像MOSIS这样的多项目晶圆。最近，Cypress大约在2001年使用的130纳米工艺作为SKY130 PDK开源。如果你曾想知道一个单元可能是什么样子，渲染一些来自这些PDK的单元看看它们是如何实现的非常方便。当然，无法保证你的工艺会相似。
- en: '[Figure 21.4](ch21.xhtml#ch21fig4) is a simplified rendering of a CMOS inverter
    for the SKY130 process, taken from an example by Matt Venn.^([2](footnotes.xhtml#ch21fn2))
    The input *A* comes on the small metal piece on the left side of the block, the
    output *Q* on the longer metal piece on the right side. Voltage comes from the
    top and ground from the bottom, just like the schematic of the same inverter in
    [Figure 21.3](ch21.xhtml#ch21fig3). This cell is viewed from above, and if you
    look carefully, you should see that the PMOS transistor at the top matches the
    cross section in [Figure 21.2](ch21.xhtml#ch21fig2) and the NMOS transistor at
    the bottom matches the cross section in [Figure 21.1](ch21.xhtml#ch21fig1).'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[图21.4](ch21.xhtml#ch21fig4)是简化版的CMOS反相器示意图，采用的是SKY130工艺，由Matt Venn提供的示例所示。输入*A*位于块左侧的小金属片上，输出*Q*位于右侧较长的金属片上。电压来自顶部，地来自底部，就像[图21.3](ch21.xhtml#ch21fig3)中相同反相器的电路图一样。这个单元是从上方观察的，如果仔细看，你应该会看到，顶部的PMOS晶体管与[图21.2](ch21.xhtml#ch21fig2)中的截面相匹配，底部的NMOS晶体管与[图21.1](ch21.xhtml#ch21fig1)中的截面相匹配。'
- en: '![Image](../images/f0200-01.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0200-01.jpg)'
- en: 'Figure 21.4: CMOS Inverter Layout'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图21.4：CMOS反相器布局
- en: The PDK will include thousands of these cells to represent digital logic gates,
    flip-flops and passives like resistors and capacitors. Many of these are variants
    for lower power or faster reaction time, so only a few hundred of them will make
    it into a given design. They usually appear in regular rows for the convenience
    of the power rails, with metal layer wires connecting them to one another. Where
    this is arranged by VLSI software with no obvious rhyme or reason, we call it
    a *sea of gates*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: PDK将包括成千上万的这些单元，以表示数字逻辑门、触发器以及像电阻和电容这样的无源元件。许多这些单元是为了降低功耗或提高反应速度而设计的，因此只有几百个单元会出现在给定的设计中。它们通常排列在规则的行列中，以便于电源轨的连接，金属层的电线将它们连接在一起。当这些安排由VLSI软件处理时，看起来没有明显的规律，我们称之为*门海*。
- en: '**Large Structures**'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**大型结构**'
- en: Finally, we should consider the case of large structures. Basic blocks can be
    placed and routed to form any logic you’d like, but the result is far from efficient
    when implementing things like memories.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们应该考虑大型结构的情况。基本模块可以放置并布线以形成任何你想要的逻辑，但在实现像内存这样的功能时，结果远非高效。
- en: Instead, chip designers will use a compiler of sorts to produce a memory of
    just the dimensions that are needed. This is not only useful for densely packing
    the bits of a memory, but also for ensuring that the memory meets timing and electrical
    requirements. See Guthaus et al. (2016) for an open source example of a RAM compiler
    and Walker (2023) for an extension of that compiler that supports mask ROMs.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，芯片设计师会使用某种编译器来生成正好符合需要的内存尺寸。这不仅有助于密集地打包内存的位，还可以确保内存满足时序和电气要求。请参见 Guthaus
    等人（2016）的开源 RAM 编译器示例，以及 Walker（2023）对该编译器的扩展，支持掩模 ROM。
- en: Reading these papers, you’ll see that memories often scale poorly, working just
    fine at one size but collapsing in performance as they grow just a few sizes larger.
    When you see microcontrollers with a small memory size repeated multiple times,
    such as some members of the TMS320 family, this is why.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读这些论文时，你会看到内存往往扩展性差，在某个尺寸下工作正常，但当其尺寸稍微增大时，性能就会急剧下降。当你看到一些微控制器有多个小内存尺寸时，比如 TMS320
    系列的一些成员，原因就在这里。
- en: In [Chapter 22](ch22.xhtml#ch22), we will see how to extract the contents of
    ROMs by chemically revealing them and then processing the photographs. Fear not,
    it’s a lot easier than reverse engineering the rest of the chip.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 22 章](ch22.xhtml#ch22) 中，我们将看到如何通过化学方法揭示 ROM 的内容，然后处理这些照片。别担心，这比反向工程芯片的其他部分容易多了。
- en: '**Reverse Engineering**'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**反向工程**'
- en: By this point, you should understand that a chip’s logic is made from standard
    cells. These cells are tiled onto the design and then wired together in the metal
    layers, and perhaps also with a little polysilicon. If we can photograph these
    and annotate them, why not reverse engineer the logic of the chip?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 到这时，你应该明白一个芯片的逻辑是由标准单元构成的。这些单元被排布在设计中，然后在金属层中连接在一起，也许还会用到一些多晶硅。如果我们能拍摄这些并做标注，为什么不反向工程芯片的逻辑呢？
- en: Reverse engineering the chip logic usually begins with identifying basic blocks
    on photographs of a delayered chip. After a basic block is reverse engineered
    once, the same shape can be identified across the chip to identify all other copies
    of the block. Once the blocks have been identifying, the wiring between basic
    blocks can then be traced and decoded into the digital logic that it implements.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 反向工程芯片逻辑通常从识别去层化芯片照片上的基本模块开始。一旦基本模块被反向工程，便可以在芯片上识别相同形状，从而识别所有该模块的副本。模块识别完后，就可以追踪基本模块之间的连接，并解码成其实现的数字逻辑。
- en: Degate is an open source CAD tool for doing this sort of work, first building
    a library of basic blocks. It has demo projects for a DECT telephone’s controller
    chip and the Legic Prime RFID tag, each of which is decomposed into Verilog code
    that matches the device behavior.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Degate 是一个开源 CAD 工具，用于执行此类工作，首先构建一个基本模块库。它有演示项目，分别是 DECT 电话的控制芯片和 Legic Prime
    RFID 标签，每个项目都被分解成与设备行为相匹配的 Verilog 代码。
- en: It’s also possible to perform the reverse engineering with layered image editing
    software like Inkscape. Layer images of the 6502 can be found in Visual6502 (2010),
    from which the project recovered all gates into an accurate simulation. For Yamaha’s
    OPEN series of FM audio synthesizer chips, Raki (2024) offers SVG files describing
    the standard cells and wiring, as well as reverse engineered schematics.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用像 Inkscape 这样的分层图像编辑软件进行反向工程。6502 的分层图像可以在 Visual6502（2010）中找到，从中该项目恢复了所有门并生成了准确的仿真。对于
    Yamaha 的 OPEN 系列 FM 音频合成器芯片，Raki（2024）提供了描述标准单元和布线的 SVG 文件，以及反向工程的电路图。
