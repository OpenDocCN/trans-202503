- en: '**13'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**13'
- en: MEMORY VULNERABILITIES**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 内存漏洞**
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: Every application relies on computer memory to store and execute the application’s
    code. A *memory vulnerability* exploits a bug in the application’s memory management.
    The attack results in unintended behavior that could enable an attacker to inject
    and execute their own commands.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每个应用程序都依赖计算机内存来存储和执行应用程序的代码。*内存漏洞*是利用应用程序内存管理中的错误的攻击。攻击导致意外的行为，可能使攻击者能够注入并执行他们自己的命令。
- en: Memory vulnerabilities occur in programming languages where developers are responsible
    for applications’ memory management, such as in C and C++. Other languages, like
    Ruby, Python, PHP, and Java, manage memory allocation for developers, making these
    languages less susceptible to memory bugs.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 内存漏洞通常发生在开发人员负责应用程序内存管理的编程语言中，如C和C++。其他语言如Ruby、Python、PHP和Java则为开发人员管理内存分配，因此这些语言对内存漏洞的易受攻击性较低。
- en: Before performing any dynamic action in C or C++, a developer must ensure that
    the proper amount of memory is allocated for the action. For example, suppose
    you’re coding a dynamic banking application that allows users to import transactions.
    When the application runs, you have no idea how many transactions users will import.
    Some could import one, and others might import a thousand. In languages without
    memory management, you must check the number of transactions being imported and
    then allocate the appropriate memory for them. When a developer doesn’t take into
    account how much memory they need for an application, bugs such as buffer overflows
    can occur.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行任何C或C++中的动态操作之前，开发人员必须确保为该操作分配了足够的内存。例如，假设你正在编写一个动态银行应用程序，允许用户导入交易记录。当应用程序运行时，你无法预知用户会导入多少交易记录。有人可能只导入一条记录，也有人可能导入一千条。在没有内存管理的语言中，你必须检查导入的交易记录数，然后为它们分配适当的内存。当开发人员没有考虑到为应用程序分配所需的内存时，就可能发生如缓冲区溢出之类的错误。
- en: 'Finding and exploiting memory vulnerabilities is complex, and entire books
    have been written on the subject. For this reason, this chapter only provides
    an introduction to the topic by covering just two of the many memory vulnerabilities:
    buffer overflows and read out of bounds vulnerabilities. If you’re interested
    in learning more, I recommend reading *Hacking: The Art of Exploitation* by Jon
    Erickson or *A Bug Hunter’s Diary: A Guided Tour Through the Wilds of Software
    Security* by Tobias Klein; both are available from No Starch Press.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '查找和利用内存漏洞是复杂的，关于这个主题已经写了整本书。因此，本章仅通过介绍其中两种内存漏洞——缓冲区溢出和越界读取漏洞——来简要介绍该主题。如果你有兴趣深入了解，建议阅读Jon
    Erickson的《Hacking: The Art of Exploitation》或Tobias Klein的《A Bug Hunter’s Diary:
    A Guided Tour Through the Wilds of Software Security》；这两本书都可以在No Starch Press购买。'
- en: '**Buffer Overflows**'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**缓冲区溢出**'
- en: A *buffer overflow* vulnerability is a bug where an application writes data
    that is too big for the memory (the *buffer*) allocated for that data. Buffer
    overflows lead to unpredictable program behavior at best and serious vulnerabilities
    at worst. When an attacker can control the overflow to execute their own code,
    they can potentially compromise the application or, depending on user permissions,
    even the server. This type of vulnerability is similar to the RCE examples in
    [Chapter 12](ch12.xhtml#ch12).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*缓冲区溢出*漏洞是指应用程序写入的数据超过了为该数据分配的内存（即*缓冲区*）。缓冲区溢出会导致程序行为不可预测，最严重的情况下还可能导致严重的安全漏洞。当攻击者能够控制溢出并执行他们自己的代码时，他们可能会危及应用程序，甚至根据用户权限，危及服务器。这种漏洞类似于[第12章](ch12.xhtml#ch12)中的RCE示例。'
- en: 'Buffer overflows usually occur when a developer forgets to check the size of
    the data being written to a variable. They can also occur when a developer makes
    a mistake calculating how much memory the data requires. Because these errors
    can happen any number of ways, we’ll just examine one type—a *length check omission*.
    In the C programming language, omitted length checks commonly involve functions
    that alter memory, such as `strcpy()` and `memcpy()`. But these checks can also
    occur when developers use memory allocation functions, such as `malloc()` or `calloc()`.
    The function `strcpy()` (and `memcpy()`) takes two parameters: a buffer to copy
    data to and the data to copy. Here’s an example in C:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲区溢出通常发生在开发者忘记检查写入变量的数据大小时。当开发者计算数据所需内存时出错，也可能发生溢出。由于这些错误可能通过多种方式发生，我们这里只检查其中一种——*缺少长度检查*。在C语言中，缺少长度检查通常涉及会改变内存的函数，如`strcpy()`和`memcpy()`。但这些检查也可能发生在开发者使用内存分配函数时，如`malloc()`或`calloc()`。`strcpy()`（和`memcpy()`）函数有两个参数：一个用于复制数据的缓冲区和要复制的数据。以下是C语言中的一个例子：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this example, the string `src` ➊ is set to the string `"hello world"`, which
    is 11 characters long, including the space. This code allocates 16 bytes to `src`
    and `dest` ➋ (each character is 1 byte). Because each character requires 1 byte
    of memory and strings must end with a null byte (`\0`), the `"hello world"` string
    requires a total of 12 bytes, which fit within the 16-byte allocation. The `strcpy()`
    function then takes the string in `src` and copies it into `dest` ➌. The `printf`
    statements at ➍ print the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，字符串`src` ➊被设置为字符串`"hello world"`，它的长度是11个字符，包括空格。此代码为`src`和`dest` ➋分配了16个字节（每个字符1个字节）。因为每个字符需要1个字节的内存，并且字符串必须以空字节（`\0`）结尾，`"hello
    world"`字符串总共需要12个字节，这在16字节的分配范围内。接着，`strcpy()`函数将`src`中的字符串复制到`dest` ➌。在➍处的`printf`语句输出如下：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This code works as expected, but what if someone wanted to really emphasize
    that greeting? Consider this example:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码按预期工作，但如果有人真的想强调这个问候语呢？考虑这个例子：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here, five exclamation marks are added, bringing the total character count
    of the string up to 16\. The developer remembered that all strings must end with
    a null byte (`\0`) in C. They’ve allocated 17 bytes to `src` ➊ but forgot to do
    the same for `dest` ➋. After compiling and running the program, the developer
    would see this output:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，添加了五个感叹号，使得字符串的总字符数达到了16个。开发者记得所有字符串在C语言中必须以空字节（`\0`）结尾。他们为`src` ➊分配了17个字节，但忘记为`dest`
    ➋做相同的操作。在编译并运行程序后，开发者将看到如下输出：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `src` variable is empty despite being assigned `'hello world!!!!!'`. This
    happens because of how C allocates *stack memory*. Stack memory addresses are
    assigned incrementally, so a variable defined earlier in the program will have
    a lower memory address than a variable defined after it. In this case, `src` is
    added to the memory stack, followed by `dest`. When the overflow occurs, the 17
    characters for `'hello world!!!!!!'` are written to the `dest` variable, but the
    string’s null byte (`\0`) overflows into the first character of the `src` variable.
    Because null bytes denote the end of a string, `src` appears to be empty.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`src`变量被赋值为`'hello world!!!!!'`，但它为空。这是因为C语言是如何分配*栈内存*的。栈内存地址是递增分配的，所以程序中较早定义的变量会拥有比后面定义的变量更低的内存地址。在这个例子中，`src`被加入到内存栈中，接着是`dest`。当溢出发生时，17个字符的`'hello
    world!!!!!!'`被写入到`dest`变量中，但字符串的空字节（`\0`）溢出到`src`变量的第一个字符处。因为空字节表示字符串的结束，`src`就显得是空的。
- en: '[Figure 13-1](ch13.xhtml#ch13fig01) illustrates what the stack looks like as
    each line of code executes from ➊ to ➌.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[图13-1](ch13.xhtml#ch13fig01)展示了每行代码从 ➊ 到 ➌ 执行时栈的状态。'
- en: '![image](../images/13fig01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/13fig01.jpg)'
- en: '*Figure 13-1: How memory overflows from dest to src*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*图13-1：内存如何从dest溢出到src*'
- en: In [Figure 13-1](ch13.xhtml#ch13fig01), `src` is added to the stack and 17 bytes
    are allocated to the variable, which are labeled in the figure starting from 0
    ➊. Next, `dest` is added to the stack but is only allocated 16 bytes ➋. When `src`
    is copied to `dest`, the last byte that would have been stored in `dest` overflows
    into the first byte of `src` (byte 0) ➌. This makes the first byte of `src` into
    a null byte.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图13-1](ch13.xhtml#ch13fig01)中，`src`被加入栈中并为该变量分配了17个字节，图中从0 ➊开始标注。接着，`dest`被加入栈中，但只分配了16个字节
    ➋。当`src`被复制到`dest`时，本应存储在`dest`中的最后一个字节溢出到`src`的第一个字节（字节0） ➌。这使得`src`的第一个字节变成了空字节。
- en: 'If you added another exclamation mark to `src` and updated the length to 18,
    the output would look like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在`src`中再添加一个感叹号，并将长度更新为18，输出将如下所示：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `dest` variable would only hold `'hello world!!!!!'`, and the final exclamation
    mark and null byte would overflow into `src`. This would make `src` appear as
    though it only held the string `'!'`. The memory shown in [Figure 13-1](ch13.xhtml#ch13fig01)
    ➌ would change to look like [Figure 13-2](ch13.xhtml#ch13fig02).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`dest`变量只会保存`''hello world!!!!!''`，最后的感叹号和空字节将溢出到`src`。这将使`src`看起来仿佛只包含了字符串`''!''`。[图13-1](ch13.xhtml#ch13fig01)➌中的内存将发生变化，变得像[图13-2](ch13.xhtml#ch13fig02)那样。'
- en: '![image](../images/13fig02.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/13fig02.jpg)'
- en: '*Figure 13-2: Two characters overflow from dest to src*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*图13-2：两个字符从dest溢出到src*'
- en: But what if the developer forgot about the null byte and used the exact length
    of the string, as follows?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果开发者忘记了空字节并使用了字符串的确切长度，情况会怎样呢？
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The developer counts the number of characters in the string without the null
    byte and allocates 12 bytes for the `src` and `dest` strings at ➊ and ➋. The rest
    of the program copies the `src` string into `dest` and prints the results, as
    the previous programs did. Let’s say the developer runs this code on their 64-bit
    processor.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者在不考虑空字节的情况下计算字符串中的字符数，并在➊和➋位置分别为`src`和`dest`字符串分配12个字节。程序的其余部分将`src`字符串复制到`dest`中并打印结果，像之前的程序那样。假设开发者在64位处理器上运行这段代码。
- en: 'Because the null byte overflowed from `dest` in the previous examples, you
    might expect that `src` would become an empty string. But the program’s output
    would be the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在之前的示例中空字节溢出到`dest`，你可能会认为`src`会变成一个空字符串。但程序的输出将如下所示：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: On modern 64-bit processors, this code would not cause unexpected behavior or
    a buffer overflow. The minimum memory allocation on 64-bit machines is 16 bytes
    (because of memory alignment design, which is beyond the scope of this book).
    On 32-bit systems, it’s 8 bytes. Because `hello world!` requires only 13 bytes,
    including the null byte, it doesn’t overflow the minimum 16 bytes allocated to
    the `dest` variable.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代的64位处理器上，这段代码不会引起意外行为或缓冲区溢出。64位机器上的最小内存分配是16字节（由于内存对齐设计，超出了本书的讨论范围）。在32位系统中，是8字节。由于`hello
    world!`只需要13字节，包括空字节，因此它不会溢出为`dest`变量分配的最小16字节。
- en: '**Read Out of Bounds**'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**越界读取**'
- en: In contrast, the *read out of bounds* vulnerability can allow attackers to read
    data outside a memory boundary. This vulnerability occurs when an application
    reads too much memory for a given variable or action. Reading out of bounds might
    leak sensitive information.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，*越界读取*漏洞可以让攻击者读取超出内存边界的数据。这个漏洞发生在应用程序读取了给定变量或操作的过多内存时。越界读取可能会泄露敏感信息。
- en: A famous read out of bounds vulnerability is the *OpenSSL Heartbleed bug*, which
    was disclosed in April 2014\. OpenSSL is a software library that allows application
    servers to securely communicate over networks without fear of eavesdroppers. Through
    OpenSSL, applications can identify the server at the other end of the communication.
    Heartbleed allowed attackers to read arbitrary data during communications, such
    as server private keys, session data, passwords, and so on, through OpenSSL’s
    server identification process.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一个著名的越界读取漏洞是*OpenSSL Heartbleed漏洞*，它在2014年4月被披露。OpenSSL是一个软件库，它允许应用程序服务器通过网络安全地进行通信，不用担心窃听者。通过OpenSSL，应用程序可以识别通信对端的服务器。Heartbleed允许攻击者在通信过程中读取任意数据，比如服务器的私钥、会话数据、密码等等，通过OpenSSL的服务器标识过程。
- en: The vulnerability makes use of OpenSSL’s heartbeat request functionality, which
    sends a message to a server. The server then returns the same message to the requester
    to verify that both servers are in communication. Heartbeat requests might include
    a length parameter, which is the factor that led to the vulnerability. Vulnerable
    versions of OpenSSL allocated memory for the server’s return message based on
    the length parameter sent with the request rather than the actual size of the
    message to be echoed back.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个漏洞利用了OpenSSL的心跳请求功能，该功能向服务器发送消息，然后服务器返回相同的消息给请求者，以验证两台服务器的通信。心跳请求可能包含一个长度参数，而这个参数正是导致漏洞的因素。易受攻击的OpenSSL版本会根据请求中发送的长度参数分配内存给服务器的返回消息，而不是根据实际需要回显的消息大小。
- en: As a result, an attacker could exploit Heartbleed by sending a heartbeat request
    with a large length parameter. Let’s say a message was 100 bytes, and an attacker
    sent 1,000 bytes as the length of the message. Any vulnerable servers the attacker
    sent the message to would read the 100 bytes of the intended message and an additional
    900 bytes of arbitrary memory. The information included in the arbitrary data
    depends on the vulnerable server’s running processes and memory layout at the
    time of the request processing.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，攻击者可以通过发送一个包含大长度参数的心跳请求来利用Heartbleed漏洞。假设一条消息是100字节，而攻击者发送了1000字节作为消息的长度。任何攻击者将此消息发送到的易受攻击的服务器都会读取预定的100字节消息以及另外900字节的任意内存。包括在这些任意数据中的信息取决于易受攻击服务器在处理请求时的运行进程和内存布局。
- en: '**PHP ftp_genlist() Integer Overflow**'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**PHP ftp_genlist() 整数溢出**'
- en: '**Difficulty:** High'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 高'
- en: '**URL:** N/A'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**网址：** 不适用'
- en: '**Source:** *[https://bugs.php.net/bug.php?id=69545/](https://bugs.php.net/bug.php?id=69545/)*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://bugs.php.net/bug.php?id=69545/](https://bugs.php.net/bug.php?id=69545/)*'
- en: '**Date reported:** April 28, 2015'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2015年4月28日'
- en: '**Bounty paid:** $500'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**悬赏金额：** $500'
- en: Languages that manage memory for developers are not immune to memory vulnerabilities.
    Although PHP automatically manages memory, the language is written in C, which
    does require memory management. As a result, built-in PHP functions could be vulnerable
    to memory vulnerabilities. Such was the case when Max Spelsberg discovered a buffer
    overflow in PHP’s FTP extension.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 管理内存的编程语言并非免疫于内存漏洞。尽管PHP自动管理内存，但该语言是用C编写的，而C确实需要手动管理内存。因此，内建的PHP函数可能会受到内存漏洞的影响。正如Max
    Spelsberg发现PHP FTP扩展中的缓冲区溢出问题一样。
- en: PHP’s FTP extension reads incoming data, such as files, to track the size and
    number of lines received in the `ftp_genlist()` function. Variables for size and
    lines were initialized as unsigned integers. On a 32-bit machine, unsigned integers
    have a maximum memory allocation of 2^(32) bytes (4,294,967,295 bytes or 4GB).
    So if an attacker sent more than 2^(32) bytes, the buffers would overflow.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: PHP的FTP扩展会读取传入的数据，如文件，来跟踪`ftp_genlist()`函数接收的数据大小和行数。大小和行数的变量被初始化为无符号整数。在32位机器上，无符号整数的最大内存分配为2^(32)字节（4,294,967,295字节或4GB）。因此，如果攻击者发送超过2^(32)字节的数据，缓冲区将发生溢出。
- en: As part of his proof of concept, Spelsberg provided the PHP code to start an
    FTP server and Python code to connect to it. Once the connection was made, his
    Python client sent 2^(32) + 1 bytes over the socket connection to the FTP server.
    The PHP FTP server crashed because Spelsberg had overridden memory, similar to
    what happened in the previously discussed buffer overflow example.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 作为概念验证的一部分，Spelsberg提供了PHP代码来启动FTP服务器以及Python代码来连接到该服务器。连接建立后，他的Python客户端通过套接字连接向FTP服务器发送了2^(32)
    + 1字节的数据。由于Spelsberg覆盖了内存，类似于前面讨论的缓冲区溢出例子，PHP FTP服务器崩溃了。
- en: '***Takeaways***'
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***要点***'
- en: Buffer overflows are a well-known and well-documented vulnerability type, but
    you can still find them in applications that manage their own memory. Even if
    an application you’re testing isn’t coded in C or C++, you might still discover
    a buffer overflow if the application is coded in a language that is written in
    another language vulnerable to memory management bugs. In those cases, look for
    places where variable length checks have been omitted.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲区溢出是一种众所周知且有详尽文档记录的漏洞类型，但你仍然可以在那些自行管理内存的应用程序中发现它们。即使你测试的应用程序不是用C或C++编写的，如果应用程序是用其他可能容易出现内存管理错误的语言编写的，你仍然可能发现缓冲区溢出。在这种情况下，检查是否有遗漏的变量长度检查。
- en: '**Python Hotshot Module**'
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Python Hotshot模块**'
- en: '**Difficulty:** High'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 高'
- en: '**URL:** N/A'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**网址：** 不适用'
- en: '**Source:** *[http://bugs.python.org/issue24481](http://bugs.python.org/issue24481)*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[http://bugs.python.org/issue24481](http://bugs.python.org/issue24481)*'
- en: '**Date reported:** June 20, 2015'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2015年6月20日'
- en: '**Bounty paid:** $500'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**悬赏金额：** $500'
- en: Like PHP, the Python programming language is traditionally written in C. In
    fact, sometimes it’s referred to as CPython (Python versions written in other
    languages, including Jython, PyPy, and so on, also exist). The Python hotshot
    module is a replacement for the existing Python profile module. The hotshot module
    describes how often and for how long various parts of a program execute. Hotshot
    is written in C, so it has a smaller performance impact than the existing profile
    module. But in June 2015, John Leitch discovered a buffer overflow in the code
    that allowed an attacker to copy a string from one memory location to another.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 像 PHP 一样，Python 编程语言传统上是用 C 语言编写的。事实上，有时它被称为 CPython（也存在其他用不同语言编写的 Python 版本，包括
    Jython、PyPy 等）。Python 的 hotshot 模块是现有 Python profile 模块的替代品。hotshot 模块描述了程序各个部分执行的频率和持续时间。由于
    hotshot 是用 C 语言编写的，它的性能影响比现有的 profile 模块更小。但在 2015 年 6 月，John Leitch 发现代码中存在缓冲区溢出漏洞，攻击者可以将一个字符串从一个内存位置复制到另一个位置。
- en: 'The vulnerable code called the method `memcpy()`, which copies a specified
    number of bytes of memory from one location to another. For example, the vulnerable
    code could have looked like the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 脆弱的代码调用了`memcpy()`方法，它将指定数量的内存字节从一个位置复制到另一个位置。例如，脆弱的代码可能看起来像下面这样：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `memcpy()` method takes three parameters: a destination, a source, and
    the number of bytes to copy. In this example, those values are the variables `self->buffer
    + self->index` (the sum of the buffer and index lengths), `s`, and `len`, respectively.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`memcpy()` 方法接受三个参数：目标、源和要复制的字节数。在这个例子中，这些值分别是变量 `self->buffer + self->index`（缓冲区和索引长度的总和）、`s`
    和 `len`。'
- en: The `self->buffer` destination variable would always have a fixed length. But
    `s`, the source variable, could be any length. This meant that when executing
    the copy function, `memcpy()` wouldn’t validate the size of the buffer it was
    writing to. An attacker could pass the function a string longer than the number
    of bytes allocated to copy. The string would be written to the destination and
    overflow, so it would continue writing past the intended buffer and into other
    memory.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`self->buffer` 目标变量的长度始终是固定的。但 `s`，源变量的长度可能是任意的。这意味着，在执行复制函数时，`memcpy()` 并不会验证它写入的缓冲区的大小。攻击者可以将比分配的字节数更长的字符串传递给该函数。该字符串会被写入目标并溢出，因此它会继续写入超出预定缓冲区的内存。'
- en: '***Takeaways***'
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***要点***'
- en: One method of finding buffer overflows is to look for the functions `strcpy()`
    and `memcpy()`. If you find these functions, validate that they have proper buffer
    length checks. You’ll need to work backward from code that you find to confirm
    you can control the source and destination to overflow the allocated memory.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 查找缓冲区溢出的一种方法是查找函数`strcpy()`和`memcpy()`。如果找到了这些函数，请验证它们是否进行了适当的缓冲区长度检查。你需要从找到的代码开始向后追溯，以确认你能够控制源和目标，进而溢出分配的内存。
- en: '**Libcurl Read Out of Bounds**'
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Libcurl 读取越界**'
- en: '**Difficulty:** High'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**Difficulty:** 高'
- en: '**URL:** N/A'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL:** N/A'
- en: '**Source:** *[http://curl.haxx.se/docs/adv_20141105.html](http://curl.haxx.se/docs/adv_20141105.html)*'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**Source:** *[http://curl.haxx.se/docs/adv_20141105.html](http://curl.haxx.se/docs/adv_20141105.html)*'
- en: '**Date reported:** November 5, 2014'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**Date reported:** 2014 年 11 月 5 日'
- en: '**Bounty paid:** $1,000'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bounty paid:** $1,000'
- en: Libcurl is a free, client-side URL transfer library that the cURL command line
    tool uses to transfer data. Symeon Paraschoudis discovered a vulnerability in
    the libcurl `curl_easy_duphandle` function that could have been exploited to exfiltrate
    sensitive data.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Libcurl 是一个免费的客户端 URL 传输库，cURL 命令行工具使用它来传输数据。Symeon Paraschoudis 发现了 libcurl
    `curl_easy_duphandle` 函数中的一个漏洞，该漏洞可能被利用来外泄敏感数据。
- en: When performing a transfer with libcurl, you can pass data to send with a `POST`
    request using the `CURLOPT_POSTFIELDS` flag. But performing this action doesn’t
    guarantee the data will be preserved during the action. To ensure the data is
    not changed while it’s sent with the `POST` request, another flag, `CURLOPT_COPYPOSTFIELDS`,
    copies the data’s contents and sends the copy with the `POST` request. The memory
    area’s size is set through another variable named `CURLOPT_POSTFIELDSIZE`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 libcurl 进行传输时，你可以通过 `CURLOPT_POSTFIELDS` 标志传递数据进行 `POST` 请求。但执行此操作并不保证数据在操作过程中保持不变。为了确保数据在通过
    `POST` 请求发送时不被更改，另一个标志 `CURLOPT_COPYPOSTFIELDS` 会复制数据的内容，并将副本与 `POST` 请求一起发送。内存区域的大小通过另一个名为
    `CURLOPT_POSTFIELDSIZE` 的变量来设置。
- en: 'To copy the data, cURL would allocate memory. But the internal libcurl function
    that duplicated the data had two problems: first, copying the `POST` data incorrectly
    would cause libcurl to treat the `POST` data buffer as a C string. Libcurl would
    assume the `POST` data ended with a null byte. When the data didn’t, libcurl would
    continue reading the string beyond the allocated memory until it found a null
    byte. This could result in libcurl copying a string that was too small (if a null
    byte was included in the middle of the `POST` body), too large, or might crash
    the application. Second, after duplicating the data, libcurl didn’t update where
    it was supposed to read the data from. This was an issue: between the time libcurl
    duplicated the data and read from the data, the memory could have been cleared
    or reused for other purposes. If either of these events happened, the location
    could have contained data not mean to be sent.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了复制数据，cURL 会分配内存。但复制数据的内部 libcurl 函数有两个问题：首先，错误地复制 `POST` 数据会导致 libcurl 将 `POST`
    数据缓冲区视为 C 字符串。libcurl 会假设 `POST` 数据以空字节结尾。当数据没有以空字节结尾时，libcurl 会继续读取字符串，直到它找到空字节，这可能导致
    libcurl 复制一个太小（如果空字节出现在 `POST` 主体中间）、太大的字符串，或者可能导致应用崩溃。其次，在复制数据后，libcurl 没有更新它应该读取数据的位置。这个问题出现在：在
    libcurl 复制数据和读取数据之间，内存可能已经被清除或重新用于其他目的。如果发生了这些事件，位置可能包含一些不应该被发送的数据。
- en: '***Takeaways***'
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***重点总结***'
- en: The cURL tool is a very popular and stable library for transferring data over
    networks. Despite its popularity, it still has bugs. Any functionality involved
    in copying memory is a great place to begin looking for memory bugs. Like the
    other memory examples, read out of bounds vulnerabilities are tough to discover.
    But if you start by searching for commonly vulnerable functions, you’ll be more
    likely to find a bug.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: cURL 工具是一个非常流行且稳定的库，用于通过网络传输数据。尽管它很受欢迎，但仍然存在一些 bug。任何涉及复制内存的功能都是寻找内存 bug 的好地方。与其他内存相关的问题一样，越界读取漏洞很难发现。但是，如果你从查找常见的易受攻击函数开始，你更有可能找到
    bug。
- en: '**Summary**'
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Memory vulnerabilities can allow attackers to read leaked data or run their
    own code, but these vulnerabilities are difficult to find. Modern programming
    languages are less susceptible to memory vulnerabilities because they handle their
    own memory allocation. But applications written in languages that require the
    developer to allocate memory are still susceptible to memory bugs. To discover
    memory vulnerabilities, you need knowledge of memory management, which can be
    complex and might even depend on hardware. If you want to search for these types
    of exploits, I recommend you also read other books dedicated entirely to the topic.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 内存漏洞可能允许攻击者读取泄露的数据或运行他们自己的代码，但这些漏洞很难被发现。现代编程语言较少受到内存漏洞的影响，因为它们会处理自己的内存分配。但使用需要开发者手动分配内存的编程语言编写的应用程序仍然容易受到内存
    bug 的影响。要发现内存漏洞，你需要了解内存管理，这可能是复杂的，甚至可能依赖于硬件。如果你想搜索这些类型的漏洞，我建议你还阅读一些专门研究这个话题的书籍。
