- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: 'Long Range Radio: LPWAN'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 长距离无线电：LPWAN
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: '*Low-Power Wide Area Network (LPWAN)* is a group of wireless, low-power, wide
    area network technologies designed for long-range communications at a low bit
    rate. These networks can reach more than six miles, and their power consumption
    is so low that their batteries can last up to 20 years. In addition, the overall
    technology cost is relatively cheap. LPWANs can use licensed or unlicensed frequencies
    and include proprietary or open standard protocols.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*低功耗广域网（LPWAN）* 是一类无线、低功耗、广域网技术，专为低比特率的远程通信设计。这些网络的通信距离可以超过六英里，而且它们的功耗非常低，以至于电池可以持续长达
    20 年。此外，整体技术成本相对较低。LPWAN 可以使用许可或非许可频率，并包括专有或开放标准协议。'
- en: LPWAN technologies are common in IoT systems, such as smart cities, infrastructure,
    and logistics. They’re used in place of cables or in cases where it could be insecure
    to plug nodes directly into the main network. For example, in infrastructure,
    LPWAN sensors often measure river flood levels or pressure on water pipes. In
    logistics, sensors might report temperatures from refrigerated units inside containers
    carried by ships or trucks.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: LPWAN 技术在物联网系统中很常见，如智能城市、基础设施和物流。它们代替电缆使用，或在可能不安全直接将节点插入主网络的情况下使用。例如，在基础设施中，LPWAN
    传感器常用于测量河流洪水水位或水管的压力。在物流中，传感器可能会报告冷藏单元内的温度，这些单元通常位于运输船或卡车的集装箱内。
- en: In this chapter, we focus on one of the main LPWAN radio technologies, *Long
    Range (LoRa),* because it’s popular in multiple countries and has an open source
    specification called LoRaWAN. It’s used for a variety of critical purposes, such
    as railway level crossings, burglar alarms, Industrial Control System (ICS) monitoring,
    natural disaster communication, and even receiving messages from space. We first
    demonstrate how to use and program simple devices to send, receive, and capture
    LoRa radio traffic. Then we move up one layer and show you how to decode LoRaWAN
    packets, as well as how LoRaWAN networks work. Additionally, we provide an overview
    of various attacks that are possible against this technology and demonstrate a
    bit-flipping attack.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们重点介绍 LPWAN 无线技术中的一种主要技术——*Long Range (LoRa)*，因为它在多个国家非常流行，并且具有一个名为 LoRaWAN
    的开放源代码规范。它用于多种关键用途，如铁路平交道口、入侵报警、工业控制系统（ICS）监测、自然灾害通信，甚至接收来自太空的消息。我们首先展示如何使用和编程简单设备来发送、接收和捕获
    LoRa 无线电流量。然后，我们提高一个层次，向您展示如何解码 LoRaWAN 数据包，以及 LoRaWAN 网络是如何工作的。此外，我们还提供了对可能针对该技术进行的各种攻击的概述，并演示了一个比特翻转攻击。
- en: LPWAN, LoRa, and LoRaWAN
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LPWAN、LoRa 和 LoRaWAN
- en: LoRa is one of three main LPWAN modulation technologies. The other two are *Ultra
    Narrowband (UNB)* and *NarrowBand (NB-IoT).* LoRa is *spread spectrum*, meaning
    devices transmit the signal on a bandwidth larger than the frequency content of
    the original information; it uses a bit rateranging from 0.3Kbps to 50Kbps per
    channel. *UNB* uses a very narrow bandwidth, and *NB-IoT* leverages existing cellular
    infrastructure, such as the global network operator Sigfox, which is the biggest
    player. These different LPWAN technologies offer varying levels of security. Most
    of them include network and device or subscriber authentication, identity protection,
    advanced standard encryption (AES), message confidentiality, and key provisioning.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: LoRa 是三种主要 LPWAN 调制技术之一。另两种是 *Ultra Narrowband (UNB)* 和 *NarrowBand (NB-IoT)*。LoRa
    是 *扩频*，这意味着设备在比原始信息的频率内容更大的带宽上传输信号；它使用的比特率范围从每个通道 0.3Kbps 到 50Kbps。*UNB* 使用非常窄的带宽，而
    *NB-IoT* 则利用现有的蜂窝基础设施，如全球网络运营商 Sigfox，这是最大的参与者。这些不同的 LPWAN 技术提供了不同级别的安全性。它们中的大多数包括网络和设备或订阅者身份认证、身份保护、先进的标准加密（AES）、消息机密性和密钥配置。
- en: When people in the IoT industry talk about LoRa, they’re usually referring to
    the combination of LoRa and LoRaWAN. *LoRa* is a proprietary modulation scheme
    patented by Semtech and licensed to others. In the seven-layer OSI model of computer
    networking, LoRa defines the physical layer, which involves the radio interface,
    whereas LoRaWAN defines the layers above it. LoRaWAN is an open standard maintained
    by LoRa Alliance, a nonprofit association of more than 500 member companies.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当物联网行业的人们谈论 LoRa 时，他们通常是指 LoRa 和 LoRaWAN 的结合。*LoRa* 是由 Semtech 公司专利的专有调制方案，并授权给其他公司使用。在计算机网络的七层
    OSI 模型中，LoRa 定义了物理层，涉及无线电接口，而 LoRaWAN 定义了其上的各个层次。LoRaWAN 是由 LoRa 联盟维护的开放标准，这个联盟是一个由
    500 多个会员公司组成的非营利性协会。
- en: LoRaWAN networks are composed of nodes, gateways, and network servers ([Figure
    13-1](#figure13-1)).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: LoRaWAN网络由节点、网关和网络服务器组成（见[图13-1](#figure13-1)）。
- en: '![f13001](Images/f13001.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![f13001](Images/f13001.png)'
- en: 'Figure 13-1: LoRaWAN network architecture'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图13-1：LoRaWAN网络架构
- en: '*Nodes* are small, cheap devices that communicate with the gateways using the
    LoRaWAN protocol. *Gateways* are slightly larger, more expensive devices that
    act as middlemen to relay data between the nodes and the network server, with
    which they communicate over any kind of standard IP connection. (This IP connection
    can be cellular, Wi-Fi, or so on.) The *network server* is then sometimes connected
    to an *application server*, which implements logic upon receiving messages from
    a node. For example, if the node is reporting a temperature value above a certain
    threshold, the server could reply with commands to the node and take appropriate
    action (for instance, open a valve). LoRaWAN networks use a *star-of-stars topology*,
    which means that multiple nodes can talk to one or more gateways, which talk to
    one network server.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*节点*是与网关使用LoRaWAN协议通信的小型、廉价设备。*网关*是稍大且更贵的设备，作为中介转发数据，在节点和网络服务器之间进行通信，这些设备通过任何标准的IP连接进行通信。（这种IP连接可以是蜂窝网络、Wi-Fi等。）*网络服务器*有时会与*应用服务器*连接，当接收到来自节点的消息时，应用服务器会执行逻辑。例如，如果节点报告的温度值超过某个阈值，服务器可以向节点发送指令并采取适当的行动（例如，打开阀门）。LoRaWAN网络采用*星型拓扑*，这意味着多个节点可以与一个或多个网关通信，而网关与一个网络服务器进行通信。'
- en: Capturing LoRa Traffic
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 捕获LoRa流量
- en: In this section, we’ll demonstrate how to capture LoRa traffic. By doing so,
    you’ll learn how to use the CircuitPython programming language and interact with
    simple hardware tools. Various tools can capture LoRa signals, but we selected
    those that demonstrate techniques you might use for other IoT hacking tasks.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将演示如何捕获LoRa流量。通过这个过程，你将学习如何使用CircuitPython编程语言并与简单的硬件工具互动。虽然有多种工具可以捕获LoRa信号，但我们选择了那些能够展示你在其他物联网黑客任务中可能使用的技术的工具。
- en: 'For this exercise, we’ll use three components:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用三个组件：
- en: '**LoStik** An open source USB LoRa device (available from [https://ronoth.com/lostik/](https://ronoth.com/lostik/)).
    LoStik uses either the Microchip modules RN2903 (US) or RN2483 (EU), depending
    on which International Telecommunications Union (ITU) region you’re in. Make sure
    you get the one that covers your region.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**LoStik** 一款开源USB LoRa设备（可从[https://ronoth.com/lostik/](https://ronoth.com/lostik/)购买）。LoStik使用Microchip模块RN2903（美国）或RN2483（欧洲），具体取决于你所在的国际电信联盟（ITU）区域。请确保选择适合你区域的版本。'
- en: '**CatWAN USB Stick** An open source USB stick compatible with LoRa and LoRaWAN
    (available at [https://electroniccats.com/store/catwan-usb-stick/](https://electroniccats.com/store/catwan-usb-stick/)).'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**CatWAN USB Stick** 一款开源的USB设备，兼容LoRa和LoRaWAN（可在[https://electroniccats.com/store/catwan-usb-stick/](https://electroniccats.com/store/catwan-usb-stick/)购买）。'
- en: '**Heltec LoRa 32** An ESP32 development board for LoRa ([https://heltec.org/project/wifi-lora-32/](https://heltec.org/project/wifi-lora-32/)).
    ESP32 boards are low-cost, low-power microcontrollers.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Heltec LoRa 32** 一款用于LoRa的ESP32开发板 ([https://heltec.org/project/wifi-lora-32/](https://heltec.org/project/wifi-lora-32/))。ESP32开发板是低成本、低功耗的微控制器。'
- en: We’ll make the LoStik into a receiver and the Heltec board into a sender and
    then have them talk to each other using LoRa. We’ll then set up the CatWAN stick
    as a sniffer to capture the LoRa traffic.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把LoStik设置为接收器，把Heltec开发板设置为发送器，然后让它们通过LoRa进行通信。接着，我们将配置CatWAN USB Stick作为嗅探器来捕获LoRa流量。
- en: Setting Up the Heltec LoRa 32 Development Board
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置Heltec LoRa 32开发板
- en: We’ll start by programming the Heltec board using the Arduino IDE. Return to
    Chapter 7 for an introduction to the Arduino.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先使用Arduino IDE编程Heltec开发板。请返回第7章了解Arduino的简介。
- en: 'Install the IDE if you don’t already have it, then add the Heltec libraries
    for Arduino-ESP32\. These will let you program ESP32 boards, such as the Heltec
    LoRa module, using the Arduino IDE. To accomplish the installs, click **File**▶**Preferences**▶**Settings**,
    and then click the **Additional Boards Manager URLs** button. Add the following
    URL in the list: [https://resource.heltec.cn/download/package_heltec_esp32_index.json](https://resource.heltec.cn/download/package_heltec_esp32_index.json),
    and click **OK**. Then click **ToolsBoardBoards **Manager**. Search for **Heltec
    ESP32** and click **Install** on the Heltec ESP32 Series Dev-boards by Heltec
    Automation option that should appear. We specifically used version 0.0.2-rc1.**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有安装 IDE，请先安装它，然后添加 Arduino-ESP32 的 Heltec 库。这些库将允许你使用 Arduino IDE 对 ESP32
    开发板（如 Heltec LoRa 模块）进行编程。要完成安装，请点击 **File**▶**Preferences**▶**Settings**，然后点击
    **Additional Boards Manager URLs** 按钮。在列表中添加以下 URL：[https://resource.heltec.cn/download/package_heltec_esp32_index.json](https://resource.heltec.cn/download/package_heltec_esp32_index.json)，然后点击
    **OK**。接着点击 **ToolsBoardBoards Manager**。搜索 **Heltec ESP32**，点击应出现的 Heltec Automation
    提供的 Heltec ESP32 Series Dev-boards 选项上的 **Install**。我们使用的是版本 0.0.2-rc1。**
- en: '**The next step is to install the *Heltec ESP32* library. Click **Sketch**▶**Include
    Library**▶**Manage Libraries**. Then search for “Heltec ESP32” and click **Install**
    on the Heltec ESP32 Dev-Boards by Heltec Automation option. We used version 1.0.8.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**下一步是安装 *Heltec ESP32* 库。点击 **Sketch**▶**Include Library**▶**Manage Libraries**。然后搜索“Heltec
    ESP32”，点击 Heltec Automation 提供的 Heltec ESP32 Dev-Boards 选项上的 **Install**。我们使用的是版本
    1.0.8。**'
- en: To check where the libraries are saved, click **File**▶**Preferences**▶**Sketchbook
    location**. On Linux, the directory listed there is typically */home/<username>/Arduino*
    where you should find a subfolder called *libraries* containing libraries like
    “Heltec ESP32 Dev Boards.”
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看库文件的保存位置，点击 **File**▶**Preferences**▶**Sketchbook location**。在 Linux 上，那里列出的目录通常是
    */home/<username>/Arduino*，你应该能在该目录下找到名为 *libraries* 的子文件夹，其中包含像“Heltec ESP32
    Dev Boards”这样的库。
- en: You’ll also probably need to install the *UART bridge VCP driver* so the Heltec
    board appears as a serial port when you connect it to your computer. You can get
    the drivers at [https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers/](https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers/).
    If you’re running Linux, make sure you select the proper version for the kernel
    you’re running. The release notes include instructions on how to compile the kernel
    module.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还需要安装 *UART 桥接 VCP 驱动程序*，以便在连接 Heltec 板到计算机时，Heltec 板能够显示为一个串行端口。你可以在 [https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers/](https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers/)
    获取驱动程序。如果你使用的是 Linux，请确保选择与你正在运行的内核版本相匹配的驱动程序。发布说明中包括了如何编译内核模块的说明。
- en: 'Note that if you’re logged in as a nonroot user, you might need to add your
    username to the group that has read and write access to the */dev/ttyACM** and
    */dev/ttyUSB** special device files. You’ll need this to access the Serial Monitor
    functionality from within the Arduino IDE. Open a terminal and enter this command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果你以非 root 用户身份登录，可能需要将你的用户名添加到具有读写权限的 */dev/ttyACM* 和 */dev/ttyUSB* 特殊设备文件所在的组。你需要这样做，才能在
    Arduino IDE 中访问串行监视器功能。打开终端并输入以下命令：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This output means that the group owner of the file is *dialout* (it might differ
    in your distribution), so you need to add your username to this group:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输出意味着文件的组所有者是 *dialout*（你的发行版可能不同），因此你需要将你的用户名添加到该组：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Users belonging to the dialout group have full and direct access to serial ports
    on the system. Once you add your username to the group, you should have the access
    you need for this step.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 属于 dialout 组的用户可以完全直接访问系统上的串行端口。一旦将你的用户名添加到该组，你应该就能获得进行此步骤所需的访问权限。
- en: Programming the Heltec Module
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编程 Heltec 模块
- en: To program the Heltec module, we’ll connect it to a USB port in our computer.
    Make sure you’ve first connected the detachable antenna to the main module. Otherwise,
    you might damage the board ([Figure 13-2](#figure13-2)).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要编程 Heltec 模块，我们将其连接到计算机的 USB 端口。确保你已经将可拆卸的天线连接到主模块上。否则，你可能会损坏开发板（[图 13-2](#figure13-2)）。
- en: '![f13002](Images/f13002.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![f13002](Images/f13002.png)'
- en: 'Figure 13-2: The Heltec Wi-Fi LoRa 32 (V2) is based on ESP32 and SX127x and
    supports Wi-Fi, BLE, LoRa, and LoRaWAN. The arrow indicates where to connect the
    antenna.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13-2：Heltec Wi-Fi LoRa 32 (V2) 基于 ESP32 和 SX127x，支持 Wi-Fi、BLE、LoRa 和 LoRaWAN。箭头指示了天线连接的位置。
- en: In the Arduino IDE, select the board by clicking **Tools**▶**Board**▶**WiFi
    LoRa 32 (V2)**, as shown in [Figure 13-3](#figure13-3).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Arduino IDE 中，点击 **工具**▶**开发板**▶**WiFi LoRa 32 (V2)**，如[图 13-3](#figure13-3)所示，选择开发板。
- en: '![f13003](Images/f13003.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![f13003](Images/f13003.png)'
- en: 'Figure 13-3: Select the correct board in the Arduino IDE: WiFi LoRa 32(V2).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13-3：在 Arduino IDE 中选择正确的开发板：WiFi LoRa 32(V2)。
- en: Next, we’ll start writing an Arduino program to make the Heltec module act as
    a LoRa packets sender. The code will configure the Heltec module radio and send
    simple LoRa payloads in a loop. Click **File**▶**New** and paste the code from
    [Listing 13-1](#listing13-1) into the file.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将开始编写 Arduino 程序，使 Heltec 模块作为 LoRa 数据包发送器。代码将配置 Heltec 模块的无线电，并循环发送简单的
    LoRa 负载。点击 **文件**▶**新建**，然后将来自[清单 13-1](#listing13-1)的代码粘贴到文件中。
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 13-1: The Arduino code that allows the Heltec LoRa module to act as
    a basic LoRa packet sender'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 13-1：使 Heltec LoRa 模块作为基本 LoRa 数据包发送器的 Arduino 代码。
- en: We first include the Heltec libraries, which contain functions for interfacing
    with the OLED display on the board and the SX127x LoRa node chips. We’re using
    the US version of LoRa, so we define the frequency to be 915 MHz.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先包含 Heltec 库，其中包含与开发板上的 OLED 显示屏和 SX127x LoRa 芯片进行接口的函数。我们使用的是 LoRa 的美国版本，因此我们将频率定义为
    915 MHz。
- en: We call the `setup()` function 1, which, remember, gets called once when an
    Arduino sketch begins. Here, we’re using it to initialize the Heltec module and
    its OLED display. The four boolean values in `Heltec.begin` enable the board’s
    display; the LoRa radio; the serial interface, which allows you to see output
    from the device using the Serial Monitor, explained shortly; and PABOOST (the
    high-power transmitter). The last argument sets the frequency used to transmit
    signals. The rest of the commands inside `setup()` initialize and set up the OLED
    display.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用 `setup()` 函数 1，记住，这个函数只会在 Arduino 程序开始时调用一次。在这里，我们用它来初始化 Heltec 模块及其 OLED
    显示屏。`Heltec.begin` 中的四个布尔值启用开发板的显示屏；LoRa 无线电；串行接口，这样你就可以使用串行监视器查看设备输出，稍后会解释；以及
    PABOOST（高功率发射器）。最后一个参数设置了用于传输信号的频率。`setup()` 中的其他命令初始化并设置 OLED 显示屏。
- en: Like `setup()`, the `loop()` function 2 is a built-in Arduino function and it
    runs indefinitely, so this is where we place our main logic. We begin each loop
    by printing the string `Sending packet:`, followed by a counter on the OLED display
    to keep track of how many LoRa packets we’ve sent so far.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `setup()` 类似，`loop()` 函数 2 是一个内置的 Arduino 函数，它会无限循环执行，所以我们将主要逻辑放在这里。我们从打印字符串
    `Sending packet:` 开始，每发送一个数据包后，OLED 显示屏上会显示一个计数器，用来跟踪我们发送了多少个 LoRa 数据包。
- en: 'Next, we start the process of sending a LoRa packet 3. The next four commands
    4 configure the LoRa radio: they disable the *cyclic redundancy check (CRC)* on
    the LoRa header (by default, a CRC isn’t used), set a spreading factor of 7, set
    the transmission power to a maximum value of 20, and add the actual payload (with
    the `LoRa.print()` function from the *Heltec* library) to the packet. The *CRC*
    is an error-detecting value of fixed length that helps the receiver check for
    packet corruption. The *spreading factor* determines the duration of a LoRa packet
    on air. SF7 is the shortest time on air, and SF12 is the longest. Each step up
    in spreading factor doubles the time it takes on air to transmit the same amount
    of data. Although slower, higher spreading factors can be used for a longer range.
    The *transmission power* is the amount of power in watts of radio frequency energy
    that the LoRa radio will produce; the higher it is, the stronger the signal will
    be. We then send the packet by calling `LoRa.endPacket()`5.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们开始发送 LoRa 数据包 3 的过程。接下来的四个命令 4 配置 LoRa 无线电：它们禁用 LoRa 头部的 *循环冗余检查（CRC）*（默认情况下不使用
    CRC），设置扩频因子为 7，设置最大传输功率为 20，并使用 *Heltec* 库中的 `LoRa.print()` 函数将实际负载添加到数据包中。*CRC*
    是一种固定长度的错误检测值，帮助接收方检查数据包是否损坏。*扩频因子* 决定了 LoRa 数据包在空中的持续时间。SF7 是空中时间最短的，而 SF12 是最长的。每增加一级扩频因子，空中传输相同数据所需的时间就会翻倍。虽然较慢，但较高的扩频因子可以用来实现更长的传输距离。*传输功率*
    是 LoRa 无线电产生的无线电频率能量的功率值，以瓦特为单位；其值越高，信号越强。然后，我们通过调用 `LoRa.endPacket()` 5 来发送数据包。
- en: Finally, we increase the packet `counter` and turn the LED on the Heltec board
    on and off to indicate we just sent another LoRa packet 6.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们增加数据包的 `counter` 并开启或关闭 Heltec 开发板上的 LED，以表示我们刚刚发送了另一个 LoRa 数据包 6。
- en: To better understand our Arduino program, we recommend that you read the *Heltec
    ESP32 LoRa* library code and API documentation at [https://github.com/HelTecAutomation/Heltec_ESP32/tree/master/src/lora/](https://github.com/HelTecAutomation/Heltec_ESP32/tree/master/src/lora/).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解我们的Arduino程序，我们建议你阅读*Heltec ESP32 LoRa*库代码及API文档，地址为[https://github.com/HelTecAutomation/Heltec_ESP32/tree/master/src/lora/](https://github.com/HelTecAutomation/Heltec_ESP32/tree/master/src/lora/)。
- en: Testing the LoRa Sender
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试LoRa发送器
- en: To try the code, upload it to the Heltec board. Make sure you’ve selected the
    correct port in the Arduino IDE. Click **Tools**▶**Port** and select the USB port
    to which the Heltec is connected. Normally, this should be */dev/ttyUSB0* or in
    some cases */dev/ttyACM0\.*
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要尝试代码，请将其上传到Heltec板。确保你在Arduino IDE中选择了正确的端口。点击**Tools**▶**Port**，选择Heltec连接的USB端口。通常，这应该是*/dev/ttyUSB0*，或者在某些情况下是*/dev/ttyACM0*。
- en: At this point, you can open the Serial Monitor console by clicking **Tools**▶**Serial
    Monitor**. We’ve redirected most output to the board’s OLED display, so the serial
    console isn’t that necessary in this exercise.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可以通过点击**Tools**▶**Serial Monitor**打开串行监视器控制台。我们已将大多数输出重定向到板子的OLED显示屏，因此在此练习中串行控制台并不那么必要。
- en: Then click **Sketch**▶**Upload**, which should compile, upload, and run the
    code in the board. You should now see the packet counter on the board’s screen,
    as shown in [Figure 13-4](#figure13-4).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击**Sketch**▶**Upload**，这将编译、上传并运行板上的代码。你现在应该能在板子的屏幕上看到数据包计数器，如[图13-4](#figure13-4)所示。
- en: '![f13004](Images/f13004.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![f13004](Images/f13004.png)'
- en: 'Figure 13-4: The Heltec board running our code and displaying the packet number
    currently being sent'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图13-4：运行我们代码的Heltec板，显示当前发送的数据包数量
- en: Setting Up the LoStik
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置LoStik
- en: 'To receive packets from the Heltec board, we’ll now set up the LoStik as a
    LoRa receiver ([Figure 13-5](#figure13-5)). We used the RN2903 (US) version of
    the LoStik, which covers the United States, Canada, and South America. We advise
    you to consult the following map showing the LoRaWAN (and LoRa) frequency plans
    and regulations by country at The Things Network project: [https://www.thethingsnetwork.org/docs/lorawan/frequencies-by-country.html](https://www.thethingsnetwork.org/docs/lorawan/frequencies-by-country.html)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了接收来自Heltec板的数据包，我们现在将LoStik设置为LoRa接收器（[图13-5](#figure13-5)）。我们使用了LoStik的RN2903（美国）版本，适用于美国、加拿大和南美。我们建议你查阅The
    Things Network项目提供的以下地图，了解各国的LoRaWAN（和LoRa）频率规划与法规：[https://www.thethingsnetwork.org/docs/lorawan/frequencies-by-country.html](https://www.thethingsnetwork.org/docs/lorawan/frequencies-by-country.html)
- en: '![f13005](Images/f13005.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![f13005](Images/f13005.png)'
- en: 'Figure 13-5: The LoStik comes in two versions: the RN2903 (US) and RN2483 (EU)
    modules by Microchip. Make sure you select the right one for your ITU region.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图13-5：LoStik有两个版本：Microchip的RN2903（美国）和RN2483（欧洲）模块。确保为你的ITU区域选择正确的版本。
- en: 'To download and experiment with some of the code examples provided by the LoStik’s
    developer, you can run this line:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 若要下载并尝试一些LoStik开发者提供的代码示例，你可以运行以下命令：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To run the examples, you’ll need Python 3 and the `pyserial` package. You can
    install the latter by pointing the `pip` package manager to the *requirements.txt*
    file inside the *examples* directory:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 若要运行示例，你需要Python 3以及`pyserial`包。你可以通过将`pip`包管理器指向*examples*目录中的*requirements.txt*文件来安装后者：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When you plug the LoStik into your computer, enter the following command to
    see which device file descriptor it was assigned to:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将LoStik插入计算机时，输入以下命令查看它被分配到哪个设备文件描述符：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It should be assigned to */dev/ttyUSB0* if you don’t have any other peripheral
    devices attached.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有连接其他外部设备，它应该被分配为*/dev/ttyUSB0*。
- en: Writing the LoRa Receiver Code
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写LoRa接收器代码
- en: In a text editor, like Vim, enter the following Python script, which lets LoStik
    act as a basic LoRa receiver. The code will send configuration commands to the
    LoRa radio chip (RN2903) in the LoStik through the serial interface to make it
    listen for certain kinds of LoRa traffic and print the received packet data to
    the terminal. [Listing 13-2](#listing13-2) shows our code.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑器（如Vim）中，输入以下Python脚本，让LoStik充当基本的LoRa接收器。该代码将通过串行接口向LoStik中的LoRa无线电芯片（RN2903）发送配置命令，使其监听某些类型的LoRa流量并将接收到的数据包打印到终端。[清单13-2](#listing13-2)展示了我们的代码。
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 13-2: A Python script that lets LoStik act as a basic LoRa receiver'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 清单13-2：一个Python脚本，让LoStik充当基本的LoRa接收器
- en: The Python script first imports the necessary modules 1, including the `serial`
    classes `LineReader` and `ReaderThread` from the `pyserial` package. These two
    classes will help us implement a serial port read loop using threads. Next, we
    set up a very basic command line argument parser 2 through which we’ll pass the
    device file descriptor for the serial port (for example, */dev/ttyUSB0*) as the
    only argument to our program. We define `PrintLines`3, a subclass of `serial.threaded.LineReader`,``which
    our `ReaderThread` object will use. This class implements the program’s main logic.
    We initialize all the LoStik radio settings inside `connection_made`4, because
    it’s called when the thread is started.``
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Python 脚本首先导入必要的模块 1，包括从 `pyserial` 包中导入的 `serial` 类 `LineReader` 和 `ReaderThread`。这两个类将帮助我们使用线程实现串口读取循环。接下来，我们设置一个非常基础的命令行参数解析器
    2，通过它我们将串口的设备文件描述符（例如，*/dev/ttyUSB0*）作为唯一参数传递给我们的程序。我们定义了 `PrintLines`3，一个 `serial.threaded.LineReader`
    的子类，``我们的 `ReaderThread` 对象将使用这个类。该类实现了程序的主要逻辑。我们在 `connection_made`4 中初始化所有 LoStik
    无线电设置，因为它是在线程启动时被调用的。``
- en: '[PRE7]**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE7]**'
