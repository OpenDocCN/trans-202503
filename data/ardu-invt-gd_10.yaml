- en: 9 Drag Race Timer
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9 拖车计时器
- en: In [Project 4](ch04.xhtml#ch04), you built a reaction timer to measure how fast
    you can hit a button. In this project, you’ll build on the techniques you learned
    there to make a race timer for a Hot Wheels-inspired race track (see [Figure 9-1](ch09.xhtml#ch09fig01)).
    We’ll show you how to display the finish time on a small, portable LCD screen
    so that you can detach your project from your computer. We’ll also show you how
    to hack this project to add a second track and indicator lamps (LEDs) to show
    which car has won. Are you ready?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[项目 4](ch04.xhtml#ch04)中，你制作了一个反应计时器来测量你按下按钮的速度。在这个项目中，你将基于那里的技巧，制作一个用于 Hot
    Wheels 启发的赛道的计时器（见[图 9-1](ch09.xhtml#ch09fig01)）。我们将向你展示如何在一个小型便携式 LCD 屏幕上显示完赛时间，这样你就可以将项目从电脑上分离出来。我们还将展示如何修改这个项目，增加第二条赛道和指示灯（LED）来显示哪辆车获胜。你准备好了吗？
- en: '**FIGURE 9-1:** The completed Drag Race Timer'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9-1：** 完成的拖车计时器'
- en: '![Image](../images/fig9_1.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig9_1.jpg)'
- en: '**MATERIALS TO GATHER**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**所需材料**'
- en: 'Many of the parts used in this project will be familiar to you already (see
    [Figures 9-2](ch09.xhtml#ch09fig02) and [9-3](ch09.xhtml#ch09fig03)). We’ll introduce
    only one new part: the 16 × 2 character LCD that you’ll use to display your race
    time directly, rather than displaying it in the Serial Monitor on your computer
    screen.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目使用的许多部件你可能已经熟悉（见[图 9-2](ch09.xhtml#ch09fig02)和[9-3](ch09.xhtml#ch09fig03)）。我们只会介绍一个新部件：16
    × 2 字符 LCD，你将用它直接显示比赛时间，而不是在电脑屏幕的串行监视器中显示。
- en: '**NOTE**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*In “[Going Further](ch09.xhtml#ch09lev1sec9)” on page [273](ch09.xhtml#page_273),
    we’ll show you how to modify your Drag Race Timer so you can race two cars and
    display the winning time. The standard SparkFun Inventor’s Kit includes one photoresistor
    (SEN-09088), but you’ll need two for this final hack. Thankfully, the photoresistor
    is a pretty inexpensive part, so you could either buy another one or partner with
    a friend who has an Inventor’s Kit to build the two-player version.*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*在“[深入了解](ch09.xhtml#ch09lev1sec9)”第[273](ch09.xhtml#page_273)页，我们将展示如何修改你的拖车计时器，使你可以竞速两辆车并显示获胜时间。标准的
    SparkFun 发明者套件包括一个光敏电阻（SEN-09088），但你需要两个来完成这个最终的修改。幸运的是，光敏电阻是一个相当便宜的元件，所以你可以购买另一个，或者和拥有发明者套件的朋友合作，做出双人版本。*'
- en: '**Electronic Parts**'
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**电子元件**'
- en: • One SparkFun RedBoard (DEV-13975), Arduino Uno (DEV-11021), or any other Arduino-compatible
    board
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个 SparkFun RedBoard (DEV-13975)，Arduino Uno (DEV-11021)，或任何其他兼容的 Arduino
    板
- en: • One USB Mini-B cable (CAB-11301 or your board’s USB cable)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: • 一根 USB Mini-B 电缆 (CAB-11301 或你的板载 USB 电缆)
- en: • One solderless breadboard (PRT-12002)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个无焊接面包板 (PRT-12002)
- en: • One 10 kΩ resistor, or two if you want to build the two-player version (COM-08374,
    or COM-11508 for a pack of 20)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个 10 kΩ 电阻，如果你想做双人版本，则需要两个 (COM-08374，或者 COM-11508，一包 20 个)
- en: • One photoresistor (SEN-09088), or two* if you want to build the two-player
    version
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个光敏电阻（SEN-09088），如果你想做双人版本则需要两个*
- en: • One push button (COM-10302)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个按键开关 (COM-10302)
- en: • One 10 kΩ potentiometer (COM-09806)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个 10 kΩ 可调电阻 (COM-09806)
- en: • One 16 × 2 character LCD (LCD-00255)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个 16 × 2 字符 LCD (LCD-00255)
- en: • One submicro size servo motor (ROB-09065)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个微型伺服电机 (ROB-09065)
- en: • Male-to-male jumper wires (PRT-11026)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: • 公对公跳线 (PRT-11026)
- en: • Male-to-female jumper wires (PRT-09140*)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: • 公对母跳线 (PRT-09140*)
- en: '**NOTE**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The parts marked with an asterisk (*) do not come with the standard SparkFun
    Inventor’s Kit but are available in the separate add-on kit.*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*标记有星号（*）的部件不包含在标准的 SparkFun 发明者套件中，但可以在单独的附加包中购买。*'
- en: '**FIGURE 9-2:** Components for the Drag Race Timer'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9-2：** 拖车计时器的组件'
- en: '![Image](../images/fig9_2.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig9_2.jpg)'
- en: '**Other Materials and Tools**'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**其他材料和工具**'
- en: • Craft knife
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: • 工艺刀
- en: • Metal ruler
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: • 金属尺
- en: • Needle-nose pliers
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: • 钳子
- en: • Wire cutters
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: • 线切割钳
- en: • Masking tape
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: • 纸胶带
- en: • Glue (hot glue gun or craft glue)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: • 胶水（热熔胶枪或手工胶水）
- en: • Cardboard (about 8.5 × 11 inches), a small cardboard box, or thick cardstock
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: • 硬纸板（约 8.5 × 11 英寸），一个小纸盒，或厚卡纸
- en: • Bamboo skewer
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: • 竹签
- en: • Enclosure template (see [Figure 9-15](ch09.xhtml#ch09fig15) on page [266](ch09.xhtml#page_266))
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: • 外壳模板（见[图 9-15](ch09.xhtml#ch09fig15)，第[266](ch09.xhtml#page_266)页）
- en: • Hot Wheels or other small toy cars to race (not shown)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: • Hot Wheels 或其他小型玩具车进行竞速（未显示）
- en: • (Optional) Toy car race track (not shown)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: • （可选）玩具车赛道（未显示）
- en: '**FIGURE 9-3:** Recommended tools and materials'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9-3：** 推荐的工具和材料'
- en: '![Image](../images/fig9_3.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig9_3.jpg)'
- en: In previous projects, we’ve used the Serial Monitor to display information sent
    from the Arduino on your computer. In this project, we’ll show you how to add
    an LCD directly to your project, a skill well worth learning. The LCD requires
    a lot of wires, but don’t worry— we’ll take it one step at a time. After you’ve
    mastered the use of this part, you can go back and add it to some of your past
    projects to make them fully portable!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的项目中，我们使用串口监视器将Arduino发送的信息显示到计算机上。在这个项目中，我们将教你如何将LCD直接添加到你的项目中，这是一个值得学习的技能。LCD需要许多连接线，但不用担心——我们将一步一步地教你。当你掌握了这个部分的使用后，你可以将其添加到你过去的一些项目中，使它们完全便携！
- en: '**NEW COMPONENT: THE 16 × 2 CHARACTER LCD**'
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**新组件：16 × 2字符LCD**'
- en: '*LCD* is short for *liquid crystal display*. Invented over 40 years ago, liquid
    crystal technology is used in digital watches, alarm clocks, projectors, televisions,
    computer monitors, and more.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*LCD*是*液晶显示*的缩写。液晶技术发明已有40多年，广泛应用于数字手表、闹钟、投影仪、电视、计算机显示器等设备中。'
- en: The LCD you’ll use in this project is a simple *monochromatic* display, meaning
    it displays only one color. Beneath the screen of the display is a layer of liquid
    crystal. This is a unique chemical that, when a small electric current is applied
    to it, changes from transparent to opaque. Combined with a backlight or a reflective
    mirror, liquid crystal is used to build very simple displays. Light comes through
    or is blocked depending on which areas of the liquid crystal electricity is applied
    to—which means you can make shapes if you can control the current.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在这个项目中使用的LCD是一个简单的*单色*显示屏，意味着它只能显示一种颜色。显示屏下方有一层液晶。液晶是一种独特的化学物质，当施加微小电流时，它会从透明变为不透明。结合背光或反射镜，液晶可以用于构建非常简单的显示器。光线的通过或阻挡取决于电流施加在液晶的哪个区域——这意味着如果你能控制电流，就能制作出图形。
- en: The 16 × 2 character LCD displays up to 32 characters of information, each of
    which is broken down into a 5 × 8 pixel matrix. Each individual pixel can be made
    either opaque or transparent depending on the applied electric current, controlled
    by the Arduino. The letter *A*, for example, will display on the LCD screen when
    the yellow pixels in [Figure 9-4](ch09.xhtml#ch09fig04) are made opaque.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 16 × 2字符LCD显示最多32个字符的信息，每个字符被分解为一个5 × 8像素矩阵。每个单独的像素可以根据施加的电流改变透明度，由Arduino控制。例如，当[图9-4](ch09.xhtml#ch09fig04)中的黄色像素变为不透明时，字母*A*将在LCD屏幕上显示。
- en: '**FIGURE 9-4:** The uppercase letter *A* represented on a 5 × 8 pixel matrix'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9-4：** 5 × 8像素矩阵上表示的大写字母*A*'
- en: '![Image](../images/fig9_4.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig9_4.jpg)'
- en: There are 40 individual pixels in a single character, each controlled by the
    Arduino, meaning there are 1,280 different control lines! Thankfully, the LCD
    used in this project has a special parallel interface LCD driver IC by Hitachi
    called the HD44780\. This chip allows you to display almost any character on the
    screen using just six control lines from the Arduino. [Figure 9-5](ch09.xhtml#ch09fig05)
    shows the pins on an LCD.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 单个字符包含40个独立像素，每个像素都由Arduino控制，这意味着有1280条不同的控制线！幸运的是，这个项目中使用的LCD配备了日立公司生产的特殊并行接口LCD驱动IC——HD44780。这个芯片允许你仅通过六条来自Arduino的控制线在屏幕上显示几乎任何字符。[图9-5](ch09.xhtml#ch09fig05)显示了LCD上的引脚。
- en: '**FIGURE 9-5:** A simple 16 × 2 character LCD'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9-5：** 一个简单的16 × 2字符LCD'
- en: '![Image](../images/fig9_5.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig9_5.jpg)'
- en: '**NOTE**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The LCD can use up to eight pins for data (d0–d7), but the way we are going
    to use the LCD, it only uses four. These are labeled d4–d7.*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*LCD*可以使用最多八个引脚来传输数据（d0–d7），但我们将要使用的LCD仅使用四个引脚，这些引脚标记为d4–d7。'
- en: The LCD has a total of 16 pins, but this project uses only pins 1–6 and 11–16\.
    The pins are numbered 1 through 16 from left to right (with the pins at the top
    of the screen). [Table 9-1](ch09.xhtml#ch09tab01) describes each of the pins on
    the LCD. In some datasheets you might see a line over a label, as with the ![Image](../images/251fig01.jpg)
    label on pin 5\. This line indicates that the feature is an *active low*, which
    means the pin is activated at low voltage. So, in this case, when you want to
    write to the LCD, pin 5 needs to be set to `LOW`. We’ll discuss this more in “[Connect
    the Data and Control Wiring](ch09.xhtml#ch09lev2sec5)” on page [255](ch09.xhtml#page_255).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: LCD共有16个引脚，但本项目只使用引脚1–6和11–16。引脚从左到右编号为1至16（顶部的引脚）。[表9-1](ch09.xhtml#ch09tab01)描述了LCD上每个引脚的功能。在一些数据表中，你可能会看到标签上有一条线，例如引脚5上的![Image](../images/251fig01.jpg)标签。这个线条表示该特性是*低电平有效*，意味着该引脚在低电压时被激活。因此，在这种情况下，当你想写入LCD时，引脚5需要设置为`LOW`。我们将在“[连接数据和控制电路](ch09.xhtml#ch09lev2sec5)”一节中详细讨论这一点，见第[255页](ch09.xhtml#page_255)。
- en: '**TABLE 9-1:** Pin descriptions for 16 × 2 character LCD'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**表9-1:** 16 × 2字符LCD引脚描述'
- en: '| **PIN** | **DESCRIPTION** |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| **引脚** | **描述** |'
- en: '| 1 | Ground (GND) |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 地（GND） |'
- en: '| 2 | VDD power for the LCD (5 V) |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 2 | LCD电源（5V） |'
- en: '| 3 | Contrast adjust (0–5 V) |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 对比度调整（0–5V） |'
- en: '| 4 | Register select (RS) |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 寄存器选择（RS） |'
- en: '| 5 | ![Image](../images/252fig01.jpg) |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 5 | ![Image](../images/252fig01.jpg) |'
- en: '| 6 | Enable |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 启用 |'
- en: '| 7–10 | Data lines d0–d3 (not used) |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 7–10 | 数据线d0–d3（未使用） |'
- en: '| 11–14 | Data lines d4–d7 (data transferred in 4 bits at a time) |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 11–14 | 数据线d4–d7（每次传输4位数据） |'
- en: '| 15 | Backlight power (5 V) |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 15 | 背光电源（5V） |'
- en: '| 16 | Backlight ground (GND) |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 16 | 背光接地（GND） |'
- en: Rather than having to control each of the 40 pixels for each character separately,
    the HD44780 driver chip interprets data sent over by the Arduino using four data
    lines and two control lines and converts this into the character to display. To
    further simplify the interface, the Arduino community has written an LCD library
    for writing code to the LCD. We’ll look at that in the code.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 与其单独控制每个字符的40个像素，HD44780驱动芯片通过四个数据线和两个控制线来解释Arduino发送的数据，并将其转换为显示的字符。为了进一步简化接口，Arduino社区编写了一个LCD库，用于向LCD写入代码。我们将在代码中查看这一点。
- en: '**DRAG RACE TIMER OPERATION**'
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**拖拉赛计时器操作**'
- en: Before we start wiring the electronics, let’s discuss how the sketch will function.
    We designed this race timer so that when we push a button the servo moves up,
    opening the starting gate that allows the car to roll down the track. At the same
    time, the Arduino records the starting time and waits to see when the car reaches
    the photoresistor at the bottom of the track, which uses the same light-sensor
    circuit used in the Night-Light in [Project 5](ch05.xhtml#ch05). You’ll embed
    the light sensor in the center of the track so that when the car passes over it,
    it will create a shadow that the Arduino can detect. When the Arduino detects
    the shadow, it will record the stopping time and calculate the total time as the
    stopping time minus the starting time. If this seems similar to the Reaction Timer
    from [Project 4](ch04.xhtml#ch04), that’s because it is!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始连接电子元件之前，让我们讨论一下草图的功能。我们设计这个赛车计时器时，当按下按钮时，舵机向上移动，打开起始门，允许赛车沿赛道下坡。同时，Arduino记录起始时间，并等待看到赛车何时到达赛道底部的光敏电阻处，那里使用的是[项目5](ch05.xhtml#ch05)中的相同光传感器电路。你将把光传感器嵌入赛道的中心，这样当赛车经过时，它会投下一个阴影，Arduino可以检测到。当Arduino检测到阴影时，它将记录停止时间，并计算总时间，即停止时间减去起始时间。如果这听起来像是[项目4](ch04.xhtml#ch04)中的反应计时器，那是因为它确实是！
- en: '**BUILD THE LCD CIRCUIT**'
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建LCD电路**'
- en: You’ll start by building the LCD circuit. The LCD has 16 pins in total, but
    you’ll use just 12 of them. [Figure 9-6](ch09.xhtml#ch09fig06) shows the schematic
    for the LCD wiring.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你将从构建LCD电路开始。LCD共有16个引脚，但你只会使用其中的12个。[图9-6](ch09.xhtml#ch09fig06)展示了LCD电路连接的原理图。
- en: '**FIGURE 9-6:** Schematic diagram of LCD wiring'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9-6:** LCD电路连接的原理图'
- en: '![Image](../images/fig9_6.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig9_6.jpg)'
- en: With 16 pins, the LCD will take up 16 rows on the breadboard, so you’ll have
    to be careful about positioning with this project. You’ll mount the LCD in the
    first 16 rows on the right side of the breadboard. Be sure to connect the power
    and ground from the Arduino to the power and ground rails on the left side of
    the breadboard.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: LCD 有 16 个引脚，占用面包板的 16 行，因此在进行此项目时需要小心布置。你将把 LCD 安装在面包板右侧的前 16 行。确保将 Arduino
    的电源和地线连接到面包板左侧的电源和地线轨道。
- en: Note that the pins on the LCD are not labeled. As we walk you through wiring
    it up, we’ll refer to the pins on the LCD in order, starting with pin 1 at the
    bottom.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，LCD 上的引脚没有标注。在我们引导你完成接线时，我们将按顺序提到 LCD 上的引脚，从底部的 1 号引脚开始。
- en: '**Power the LCD**'
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**为 LCD 供电**'
- en: The LCD has two separate power supplies for the backlight and for the control
    logic. You’ll need to wire these separately.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: LCD 有两个独立的电源，一个用于背光，另一个用于控制逻辑。你需要将这两者分开接线。
- en: Connect pin 1 of the LCD to GND and pin 2 of the LCD to 5 V using the power
    rails on the breadboard. This provides power for the LCD’s control circuitry and
    the HD44780 LCD driver chip. Next, connect pin 15 on the LCD to 5 V and pin 16
    on the LCD to GND, again using the power rails. These two connections power the
    LCD’s built-in backlight (see [Figure 9-7](ch09.xhtml#ch09fig07)).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 将 LCD 的 1 号引脚连接到 GND，LCD 的 2 号引脚连接到 5 V，使用面包板上的电源轨道。这为 LCD 的控制电路和 HD44780 LCD
    驱动芯片提供电源。接下来，将 LCD 的 15 号引脚连接到 5 V，LCD 的 16 号引脚连接到 GND，再次使用电源轨道。这两个连接为 LCD 内置的背光提供电源（参见
    [图 9-7](ch09.xhtml#ch09fig07)）。
- en: '**FIGURE 9-7:** Connect the power for the LCD and the backlight.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9-7：** 连接 LCD 的电源和背光。'
- en: '![Image](../images/fig9_7.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig9_7.jpg)'
- en: '**Control the Contrast**'
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**控制对比度**'
- en: 'You can adjust the contrast on the LCD screen. To do so, you control the voltage
    on pin 3 of the LCD using a simple voltage divider circuit with a potentiometer,
    similar to what you did for the Balance Beam in [Project 6](ch06.xhtml#ch06).
    Recall that a potentiometer is the same thing as a variable resistor: it has three
    pins, and as you turn the knob the resistance between the center pin and either
    of the end pins changes. If you connect the top and bottom pins of the potentiometer
    to 5 V and GND, you have a variable voltage divider where the voltage on the center
    pin will vary between 5 V and GND depending on how far you turn the knob (see
    [Figure 9-8](ch09.xhtml#ch09fig08)).'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以调整 LCD 屏幕的对比度。为此，你可以使用电位器控制 LCD 3 号引脚上的电压，电位器与平衡梁中的电压分压电路类似（参见 [项目 6](ch06.xhtml#ch06)）。回想一下，电位器与可变电阻是相同的：它有三个引脚，当你旋转旋钮时，中间引脚与任一端引脚之间的电阻发生变化。如果你将电位器的顶部和底部引脚连接到
    5 V 和 GND，你就得到一个可变电压分压器，其中中心引脚上的电压会根据旋钮的旋转程度在 5 V 和 GND 之间变化（参见 [图 9-8](ch09.xhtml#ch09fig08)）。
- en: '**FIGURE 9-8:** Potentiometer schematic connected up as a variable voltage
    divider'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9-8：** 电位器示意图，作为可变电压分压器连接'
- en: '![Image](../images/fig9_8.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig9_8.jpg)'
- en: Add the potentiometer to the breadboard just below the LCD. Connect the outside
    pins of the potentiometer to 5 V and GND, and connect the center pin to pin 3
    on the LCD for the contrast control.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 将电位器添加到面包板上，位于 LCD 下方。将电位器的外部引脚连接到 5 V 和 GND，将中间引脚连接到 LCD 的 3 号引脚，用于对比度控制。
- en: Now all you need to do is add the data and control wiring for the LCD.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你只需要添加 LCD 的数据和控制线路。
- en: '**Connect the Data and Control Wiring**'
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接数据和控制线路**'
- en: You need seven more wires to connect to the LCD, including four data lines and
    three control lines. Pin 5 on the LCD is the read/write functionality that allows
    the Arduino to read from and write data to the display. You’re only going to use
    this read/write connection to send data to the LCD, or write to the device, so
    you can connect this to ground, known as “tying the pin low.” If you look back
    at [Table 9-1](ch09.xhtml#ch09tab01), you’ll notice that the ![Image](../images/251fig01.jpg)
    label has a line over *Write*. As we mentioned earlier, this notation is often
    used in datasheets and documentation to indicate that a low signal will activate
    this feature. A low input is equivalent to ground, so add a wire to connect pin
    5 of the LCD to GND, as shown in [Figure 9-9](ch09.xhtml#ch09fig09).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要另外七根电缆来连接LCD，包括四条数据线和三条控制线。LCD的引脚5是读/写功能，允许Arduino读取和向显示器写入数据。你只需使用这个读/写连接来向LCD发送数据，或者写入设备，所以你可以将它连接到地（GND），也就是“将引脚接地”。如果你查看[表9-1](ch09.xhtml#ch09tab01)，你会注意到标签上有一条线覆盖着*写入*（Write）。如前所述，这种符号通常在数据表和文档中使用，表示低电平信号将激活该功能。低输入等同于地，因此请添加一根电缆将LCD的引脚5连接到GND，如[图9-9](ch09.xhtml#ch09fig09)所示。
- en: '**FIGURE 9-9:** Connect pin 5 of the LCD to GND for the ![Image](../images/255fig01.jpg)
    control.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9-9：** 将LCD的引脚5连接到GND进行![图片](../images/255fig01.jpg)控制。'
- en: '![Image](../images/fig9_9.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig9_9.jpg)'
- en: The final six wires will connect the LCD to the Arduino. Pins 11–14 on the LCD
    are the four data lines the Arduino will use to send information to the LCD. Connect
    these to the Arduino pins 10, 11, 12, and 13, as shown in [Figure 9-10](ch09.xhtml#ch09fig10).
    The wires should go straight across from the Arduino board to the LCD without
    crossing.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的六根电缆将连接LCD和Arduino。LCD的引脚11到14是Arduino用来向LCD发送信息的四条数据线。将这些引脚连接到Arduino的引脚10、11、12和13，如[图9-10](ch09.xhtml#ch09fig10)所示。电缆应直接从Arduino板连接到LCD，避免交叉。
- en: The last two connections are Enable at pin 6 and Register Select at pin 4\.
    The Enable pin is used to signal the data transfer to the LCD, and the Register
    Select pin determines whether the data represents a character to display or an
    instruction, like clearing the screen or moving the cursor; this gives you greater
    control over what’s displayed on the screen. Connect pin 9 on the Arduino to pin
    6 on the LCD, and pin 8 on the Arduino to pin 4 on the LCD, as shown in [Figure
    9-10](ch09.xhtml#ch09fig10).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后两条连接是引脚6的使能（Enable）和引脚4的寄存器选择（Register Select）。使能引脚用于向LCD发出数据传输信号，寄存器选择引脚决定数据是表示要显示的字符还是指令，如清除屏幕或移动光标；这能让你更好地控制屏幕上显示的内容。将Arduino的引脚9连接到LCD的引脚6，将Arduino的引脚8连接到LCD的引脚4，如[图9-10](ch09.xhtml#ch09fig10)所示。
- en: '**FIGURE 9-10:** Final wiring of the LCD circuit'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9-10：** LCD电路的最终接线'
- en: '![Image](../images/fig9_10.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig9_10.jpg)'
- en: '[Table 9-2](ch09.xhtml#ch09tab02) shows the LCD screen connections to help
    you make sure you have everything connected correctly.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[表9-2](ch09.xhtml#ch09tab02)显示了LCD屏幕的连接，帮助你确保所有连接正确。'
- en: '**TABLE 9-2:** LCD pin connections'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**表9-2：** LCD引脚连接'
- en: '| **LCD PIN** | **CONNECTION** |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| **LCD引脚** | **连接** |'
- en: '| 16 | GND |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 16 | 地 (GND) |'
- en: '| 15 | 5 V |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| 15 | 5V |'
- en: '| 14 | Arduino pin 13 |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 14 | Arduino 引脚 13 |'
- en: '| 13 | Arduino pin 12 |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 13 | Arduino 引脚 12 |'
- en: '| 12 | Arduino pin 11 |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 12 | Arduino 引脚 11 |'
- en: '| 11 | Arduino pin 10 |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 11 | Arduino 引脚 10 |'
- en: '| 10 | N/A |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 10 | 不适用 |'
- en: '| 9 | N/A |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| 9 | 不适用 |'
- en: '| 8 | N/A |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 不适用 |'
- en: '| 7 | N/A |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 不适用 |'
- en: '| 6 | Arduino pin 9 |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 6 | Arduino 引脚 9 |'
- en: '| 5 | GND |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 地 (GND) |'
- en: '| 4 | Arduino pin 8 |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 4 | Arduino 引脚 8 |'
- en: '| 3 | Middle pin of potentiometer |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 电位器的中间引脚 |'
- en: '| 2 | 5 V |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 5V |'
- en: '| 1 | GND |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 地 (GND) |'
- en: '**Test the LCD**'
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**测试LCD**'
- en: Before you wire up more of the circuit, test it to make sure it’s working as
    expected so far. Connect your Arduino to your computer.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在接线之前，先测试一下，确保电路到目前为止按预期工作。将Arduino连接到计算机。
- en: As soon as you apply power, the backlight should turn on. Try turning the potentiometer
    knob. Even with nothing displayed on the LCD, you should see the contrast of the
    screen change as you twist, from all dark at its lowest to 32 brightly lit rectangles
    at its highest.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦供电，背光应该会亮起。尝试旋转电位器旋钮。即使LCD上没有显示任何内容，你也应该能看到屏幕对比度的变化，从最暗到最高时显示32个明亮的矩形。
- en: If you don’t see this, double-check the wiring. Make sure that all of the power
    connections to the LCD match [Table 9-2](ch09.xhtml#ch09tab02).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有看到此内容，请仔细检查接线。确保所有电源连接到LCD的接线与[表9-2](ch09.xhtml#ch09tab02)中的内容一致。
- en: Once you have the LCD working, copy the code from [Listing 9-1](ch09.xhtml#ch09ex01)
    into Arduino and upload it to your device. This simple example should display
    the text *SparkFun Arduino* on the first line and a running counter on the second
    line.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你让 LCD 工作，复制 [Listing 9-1](ch09.xhtml#ch09ex01) 中的代码到 Arduino，并上传到你的设备。这段简单的示例应该会在第一行显示文本
    *SparkFun Arduino*，在第二行显示一个运行的计数器。
- en: '**LISTING 9-1:** Test code to display text and a running `millis()` counter
    to the LCD'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 9-1:** 用于在 LCD 上显示文本和运行的 `millis()` 计数器的测试代码'
- en: '[PRE0]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let’s take a look at what’s going on in this example. First, it includes the
    *LiquidCrystal.h* library ➊ created by the Arduino community to simplify the six
    different control and data lines. This will make it easier for you to send instructions
    to the LCD.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这个示例中发生了什么。首先，它包含了 Arduino 社区创建的 *LiquidCrystal.h* 库 ➊，这个库简化了六个不同的控制和数据线。这将使你更容易向
    LCD 发送指令。
- en: 'Next, this code creates an object named `lcd` that uses the LiquidCrystal library
    ➋. Notice that this time when you create the object, you pass it a set of parameters
    that correspond with the LCD pins: the Register Select, Enable, and four data
    pins. This is where you configure which pin controls each function on the LCD.
    In some documentation, you may see this command as `LiquidCrystal lcd(RS, Enable,
    d4, d5, d6, d7)`.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，这段代码创建了一个名为 `lcd` 的对象，使用了 LiquidCrystal 库 ➋。注意，这次在创建对象时，你传递了一组参数，对应 LCD
    的引脚：寄存器选择、使能引脚和四个数据引脚。这是你配置每个功能对应的引脚的地方。在某些文档中，你可能会看到这个命令写作 `LiquidCrystal lcd(RS,
    Enable, d4, d5, d6, d7)`。
- en: You may be wondering why we don’t use four of the LCD pins. This LCD is able
    to transfer data on either four or eight data lines. According to the datasheet
    on the LCD, when you use four data lines, you use the top four pins on the LCD—the
    pins labeled d4, d5, d6, and d7\. While it takes the Arduino twice as long to
    transfer data to the LCD this way, this helps to keep the circuit as simple as
    possible, and remember, the Arduino operates with a 16 MHz clock. That’s really
    fast!
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道为什么我们不使用 LCD 的四个引脚。这个 LCD 可以通过四个或八个数据线传输数据。根据 LCD 的数据手册，当你使用四个数据线时，你需要使用
    LCD 上方的四个引脚——标记为 d4、d5、d6 和 d7 的引脚。虽然这种方式传输数据到 LCD 需要 Arduino 花费两倍的时间，但它有助于保持电路尽可能简单，记住，Arduino
    的时钟频率是 16 MHz。这可是非常快的！
- en: The LiquidCrystal library has around 20 different commands that simplify control
    of this LCD. In this example, we’ll show you a few basic commands that allow you
    to configure the screen size, clear the screen, display information, and move
    the cursor.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: LiquidCrystal 库有大约 20 个不同的命令，可以简化对这个 LCD 的控制。在这个示例中，我们会向你展示一些基本命令，允许你配置屏幕大小、清空屏幕、显示信息和移动光标。
- en: The `setup()` part of the sketch has a few instructions that will run just once
    when the Arduino starts up. The first of these is `lcd.begin(16, 2);` ➌, which
    sets up the size of the LCD as a 16 × 2 character LCD, allowing the library to
    correctly wrap text and move from one line to the next.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`setup()` 部分的代码包含了一些只会在 Arduino 启动时运行一次的指令。其中第一个是 `lcd.begin(16, 2);` ➌，它将
    LCD 设置为 16 × 2 字符 LCD，使得库可以正确地换行并从一行移到下一行。'
- en: The next instruction, `lcd.clear();` ➍, allows you to clear the screen before
    providing new text to display. It also resets the position of the cursor to the
    first character on the first line of the screen. Without this, the LCD would retain
    the last thing displayed.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 下一条指令，`lcd.clear();` ➍，允许你在显示新文本之前清空屏幕。它还会将光标的位置重置到屏幕第一行的第一个字符。如果没有这条指令，LCD
    会保留上次显示的内容。
- en: Then, the command `lcd.print("SparkFun Arduino");` ➎ displays the text *SparkFun
    Arduino* on the LCD. Because the `lcd.clear()` instruction just cleared the screen,
    this text will appear on the first line of the display. This string of text is
    exactly 16 characters long and should fill the entire first line of the LCD. This
    command is similar to `Serial.print()`, but with `lcd.print()` you don’t need
    to be connected to a computer or have the Serial Monitor open to see text and
    information from your device.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，命令 `lcd.print("SparkFun Arduino");` ➎ 会在 LCD 上显示文本 *SparkFun Arduino*。由于
    `lcd.clear()` 指令刚刚清空了屏幕，这段文本将出现在显示的第一行。这段文本正好是 16 个字符长，应该填满 LCD 的第一行。这个命令类似于 `Serial.print()`，但使用
    `lcd.print()` 时，你不需要连接到计算机或者打开串口监视器，就能看到来自设备的文本和信息。
- en: The `loop()` refreshes the screen with new information each time it repeats.
    First it moves the cursor to the second line of the LCD using `lcd.setCursor(0,
    1);` ➏ so it doesn’t overwrite the *SparkFun Arduino* text on the first line.
    The two numbers used in the `setCursor()` method indicate the position of the
    character (0) and the row (1). As is common in a lot of programming environments,
    Arduino counts starting with an index of 0, not 1.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`loop()` 每次重复时都会用新信息刷新屏幕。首先，它使用 `lcd.setCursor(0, 1);` ➏ 将光标移动到 LCD 的第二行，以免覆盖第一行的
    *SparkFun Arduino* 文本。`setCursor()` 方法中的两个数字指示字符的位置（0）和行数（1）。像很多编程环境一样，Arduino
    的计数是从 0 开始的，而不是从 1 开始。'
- en: '**NOTE**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The LiquidCrystal library only works with character LCD displays. Graphic
    LCD screens are also available, but they use a different library called OpenGLCD,
    which allows you to display graphics such as lines, rectangles, and circles as
    well as text.*'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*LiquidCrystal 库只适用于字符型 LCD 显示屏。图形 LCD 屏幕也有提供，但它们使用一个不同的库，叫做 OpenGLCD，它允许你显示图形，如线条、矩形和圆形，以及文本。*'
- en: Finally, the sketch prints a counter ➐ using another `lcd.print()` instruction.
    This counter uses the `millis()` function, which reports the number of milliseconds
    since the Arduino was powered on. Dividing this value by 1,000 shows a counter
    in seconds. We will use a similar technique for the race timer.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，草图使用另一个 `lcd.print()` 指令打印一个计数器 ➐。这个计数器使用 `millis()` 函数，它报告自 Arduino 通电以来的毫秒数。将这个值除以
    1,000，就可以得到秒数的计数器。我们将在比赛计时器中使用类似的技巧。
- en: Now, can you figure out how to change the text to display your name on the first
    line? How about changing the time display to show the time elapsed in minutes
    instead of seconds? Play around with the code example until you’re comfortable
    with displaying data to the LCD. With just six GPIO pins from your Arduino, you
    can add an LCD readout to any project!
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你能弄清楚如何更改文本，使得第一行显示你的名字吗？如何将时间显示改为以分钟为单位而不是秒数？多试试这个代码示例，直到你熟悉如何在 LCD 上显示数据。只需要
    Arduino 的六个 GPIO 引脚，你就能将 LCD 显示器添加到任何项目中！
- en: This example demonstrates the most commonly used instructions in the Arduino
    LiquidCrystal library, but if you want to check out the other commands that you
    can use, see *[https://www.arduino.cc/en/Reference/LiquidCrystal/](https://www.arduino.cc/en/Reference/LiquidCrystal/).*
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例演示了 Arduino LiquidCrystal 库中最常用的指令，但如果你想查看其他可以使用的命令，请参考 *[https://www.arduino.cc/en/Reference/LiquidCrystal/](https://www.arduino.cc/en/Reference/LiquidCrystal/)。*
- en: Now that you have the LCD circuit working, it’s time to add the button, servo,
    and light-sensor circuit.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经使 LCD 电路工作，接下来是添加按钮、伺服电机和光传感器电路。
- en: '**ADD THE REST OF THE ELECTRONICS**'
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加其余的电子元件**'
- en: 'The Drag Race Timer will use a few parts that you’ve already put together in
    previous projects: a push button to start the race, a servo to control the starting
    gate for the car, and a photo resistor to detect when the car reaches the end
    of the track. [Figure 9-11](ch09.xhtml#ch09fig11) shows schematic diagrams of
    these three additional components.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 拖拉赛计时器将使用你在之前的项目中已经组装好的几个部件：一个用于开始比赛的按钮，一个用于控制汽车起跑门的伺服电机，和一个用于检测汽车到达赛道终点的光敏电阻。[图
    9-11](ch09.xhtml#ch09fig11)展示了这三个附加组件的原理图。
- en: '**FIGURE 9-11:** Schematic diagrams for additional components in the Drag Race
    Timer'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9-11：** 拖拉赛计时器中附加组件的原理图'
- en: '![Image](../images/fig9_11.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig9_11.jpg)'
- en: Place a push button on the breadboard so that two legs are on either side of
    the center divide, and connect two of the legs on one side to pin 5 on the Arduino
    and GND. The parts will fill up most of the breadboard, so pay close attention
    to the rows on the breadboard and how the components are connected. To save space,
    this project uses the push button without the external pull-up resistor used in
    [Project 4](ch04.xhtml#ch04) with the Reaction Timer. Instead, we’ll enable a
    pull-up resistor in the code.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个按钮放置在面包板上，使其两腿分别位于中心分隔线的两侧，并将一侧的两个引脚连接到 Arduino 的引脚 5 和 GND。部件将填满面包板的大部分空间，因此请密切注意面包板上的行以及各个组件的连接方式。为了节省空间，本项目使用了没有外部上拉电阻的按钮，这与
    [项目 4](ch04.xhtml#ch04) 中反应计时器的做法不同。相反，我们将在代码中启用上拉电阻。
- en: Next, connect the servo motor that will open the starting gate. Using three
    male-to-male jumper wires, connect the signal wire (either yellow or white) to
    pin 4 on the Arduino, the red wire to the 5 V rail, and the black wire to the
    GND rail.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，连接将打开起跑闸门的伺服电机。使用三根公对公跳线，将信号线（黄色或白色）连接到 Arduino 的 4 号引脚，将红线连接到 5 V 电源轨，将黑线连接到
    GND 电源轨。
- en: Finally, add the light-sensor circuit with a voltage divider circuit. Connect
    one end of a photoresistor to the 5 V power rail and the other end to the GND
    power rail, via a 10 kΩ pull-down resistor placed directly in the power rail.
    Connect the row that has both the photoresistor and the 10 kΩ pull-up resistor
    to pin A0 on the Arduino. This circuit should look similar to the circuit you
    used in the Night-Light in [Project 5](ch05.xhtml#ch05).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，添加光传感器电路并连接一个电压分压电路。将光敏电阻的一端连接到 5 V 电源轨，另一端通过一个 10 kΩ 的下拉电阻连接到 GND 电源轨。将同时连接光敏电阻和
    10 kΩ 上拉电阻的这一行连接到 Arduino 的 A0 引脚。这个电路应该与 [项目 5](ch05.xhtml#ch05) 中的夜光电路相似。
- en: There are a lot of components in this circuit, so take your time and double-check
    your wiring against the diagram in [Figure 9-12](ch09.xhtml#ch09fig12).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这个电路包含很多组件，所以请慢慢来，并仔细核对你的接线是否与[图 9-12](ch09.xhtml#ch09fig12)中的图示一致。
- en: '**FIGURE 9-12:** Complete electronics for the Drag Race Timer, including a
    starting button and gate'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9-12：** 拖拉赛计时器的完整电子电路，包括起始按钮和闸门'
- en: '![Image](../images/fig9_12.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig9_12.jpg)'
- en: '**PROGRAM THE DRAG RACE TIMER**'
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程拖拉赛计时器**'
- en: Now let’s put it all together. Start a new sketch, and enter the code from [Listing
    9-2](ch09.xhtml#ch09ex02) or download it from *[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*.
    This example will bring together several concepts and ideas we’ve used separately
    in past projects.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将所有内容整合在一起。启动一个新的草图，并输入[清单 9-2](ch09.xhtml#ch09ex02)中的代码，或者从 *[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*
    下载该代码。这个示例将结合我们在过去项目中单独使用过的几个概念和思想。
- en: '**LISTING 9-2:** Drag Race Timer sketch'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 9-2：** 拖拉赛计时器草图'
- en: '[PRE1]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let’s take a look at how all this works. First, the sketch includes two libraries
    using the `#include` directive ➊, *LiquidCrystal.h* and *Servo.h*. Next, it initializes
    a `LiquidCrystal` object named `lcd`, similar to [Listing 9-1](ch09.xhtml#ch09ex01),
    and a `Servo` object named `startingGate` ➋.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下这一切是如何工作的。首先，草图通过 `#include` 指令 ➊ 引入了两个库，*LiquidCrystal.h* 和 *Servo.h*。接下来，它初始化了一个名为
    `lcd` 的 `LiquidCrystal` 对象，类似于[清单 9-1](ch09.xhtml#ch09ex01)，以及一个名为 `startingGate`
    的 `Servo` 对象 ➋。
- en: Then, the sketch declares a set of constants for the pin connections used for
    the button, servo, and photoresistor circuits ➌. This means that, as you make
    changes and modifications, if you need to move a wire to a different pin on the
    Arduino, you’ll only have to change a single number in the code. The last constant,
    a threshold value named `darkThreshold`, is used to set the light level to detect
    when the car is blocking the light sensor. Here it’s set to `500`, roughly in
    the middle of the range of 0–1023, but you may need to adjust this value to suit
    the environment of your own room.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，草图声明了一组常量，用于连接按钮、电动机和光敏电阻电路的引脚 ➌。这样一来，在你进行更改和修改时，如果需要将某根线移到 Arduino 的不同引脚，只需在代码中更改一个数字即可。最后一个常量是一个名为
    `darkThreshold` 的阈值，用于设置检测汽车是否遮挡光传感器时的光照水平。这里将其设置为 `500`，大约处于 0–1023 范围的中间，但你可能需要根据自己房间的环境调整这个值。
- en: Next, the sketch declares a few variables ➍. The `finishSensor1` variable is
    used to store the raw value of the photoresistor sensor. The next variable, `finishFlag`,
    is a *state variable*, which is used to keep track of what state the sketch is
    in. The `finishFlag` variable is initialized to `false` and is used to indicate
    when the race is over (like the flag waved at the finish line to mark the winner
    of a Formula One race). We’ll set it later in the code based on the input value
    from the sensor. The next three variables are used to calculate the race time
    using the built-in `millis()` timer in Arduino.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，草图声明了一些变量 ➍。`finishSensor1` 变量用于存储光敏电阻传感器的原始值。下一个变量 `finishFlag` 是一个*状态变量*，用于跟踪草图当前的状态。`finishFlag`
    变量初始化为 `false`，用于表示比赛是否结束（就像在一级方程式比赛中挥动的终点旗帜，标志着比赛的胜者）。我们稍后将在代码中根据传感器的输入值来设置它。接下来的三个变量用于通过
    Arduino 内置的 `millis()` 定时器来计算比赛时间。
- en: Now, the `setup()` part of the code sets up the button pin to use an internal
    pull-up resistor that’s built into the Arduino by declaring the pin mode as an
    `INPUT_PULLUP` ➎. This trick removes the need for the external pull-up resistor
    used in [Project 4](ch04.xhtml#ch04).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，代码的`setup()`部分通过声明引脚模式为`INPUT_PULLUP`➎来设置按钮引脚，使用内建的上拉电阻。这一技巧消除了在[项目 4](ch04.xhtml#ch04)中使用外部上拉电阻的需要。
- en: Next, the sketch initializes the servo motor and sets its default position to
    `0`. This will be the position of the starting gate when it’s down.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，草图初始化舵机并将其默认位置设置为`0`。这将是起跑门下降时的位置。
- en: The sketch then displays a little information to the LCD ➏ to let the user know
    how to start the race. These few lines of code set up the LCD, clear the screen,
    and display two lines of text. Be careful that your text is limited to 16 characters
    per line; any more than 16, and your characters will run off the screen to the
    right. The code then waits for a button press using the blocking `while()` loop
    technique ➐ used in the Reaction Timer; this blocks the sketch from proceeding
    until the button is pressed. When the button is pressed, `digitalRead(buttonPin)`
    will read `LOW` and the code will move the servo to the up position and set the
    `startTime` variable.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 草图然后将一些信息显示到LCD➏上，告知用户如何开始比赛。这几行代码设置LCD，清空屏幕，并显示两行文本。请小心，文本每行限制在16个字符以内；超过16个字符，文本会超出屏幕显示到右侧。接着，代码通过使用`while()`循环技术➐等待按钮按下，这种技术在反应计时器中使用，它会阻止草图继续，直到按钮被按下。当按钮被按下时，`digitalRead(buttonPin)`会读取为`LOW`，然后代码将舵机移动到上升位置并设置`startTime`变量。
- en: In the `loop()`, the sketch reads the light sensor and stores its current reading
    to the variable `finishSensor1` ➑. The sensor will be embedded at the end of the
    ramp. The car will roll over it as it crosses the finish line, covering the sensor
    and blocking most of the light. Similar to the Night-Light sketch in [Project
    5](ch05.xhtml#ch05), the sketch will compare the value of the sensor to the `darkThreshold`
    value.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在`loop()`中，草图读取光传感器并将当前读数存储到变量`finishSensor1`➑。传感器将被嵌入在坡道的尽头。当汽车越过终点线时，它将滚过传感器，遮挡大部分光线，类似于[项目
    5](ch05.xhtml#ch05)中的夜灯草图，草图会将传感器的值与`darkThreshold`值进行比较。
- en: '**NOTE**'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Your sensor needs to be in a decently lit area so that the contrast between
    the sensor being lit and being shaded is great enough to cause that drop in voltage.
    Be aware that overhead lights can create a false detection if your body casts
    a shadow over the sensor. If you want to make sure that the sensor works well,
    get a small desk lamp and set it over the sensor.*'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '*你的传感器需要放在一个光线适中的区域，以便传感器被照亮和被遮挡时的对比度足够大，能够引起电压的下降。请注意，天花板灯光可能会在你身体的阴影投射到传感器时导致虚假检测。如果你想确保传感器工作良好，可以拿一盏小台灯，把它放在传感器上方。*'
- en: Remember that in the time it takes the car to pass the sensor, the `loop()`
    may repeat several times. Because we only want to look for the first moment the
    car crosses the finish line, the sketch uses a compound `if()` statement ➒ to
    capture the moment when the `finishFlag` variable is `false` *and* the finish
    sensor is blocked (that is, its value is less than `darkThreshold`). The `&&`
    indicates a logical AND (see “[Compound Logic Operators](ch09.xhtml#ch09sb02)”
    on page [264](ch09.xhtml#page_264)). Pay careful attention to the number of parentheses
    used in the `if()` statement—they indicate order of operation and how the logic
    is used.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，在汽车通过传感器的时间里，`loop()`可能会重复几次。因为我们只想捕捉到汽车越过终点线的第一个时刻，草图使用了一个复合`if()`语句➒来捕捉`finishFlag`变量为`false`
    *并且* 终点传感器被遮挡的时刻（即其值小于`darkThreshold`）。`&&`表示逻辑与（参见[复合逻辑运算符](ch09.xhtml#ch09sb02)在第[264](ch09.xhtml#page_264)页）。请特别注意`if()`语句中使用的括号数量——它们表示运算顺序以及逻辑如何运作。
- en: Now, inside the `if()` statement, the `finishFlag` state variable switches to
    `true`. Because the `finishFlag` state variable is now set to `true`, the compound
    `if()` statement will only catch the first moment the car crosses the sensor.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`if()`语句内部，`finishFlag`状态变量切换为`true`。因为`finishFlag`状态变量现在设置为`true`，所以复合`if()`语句只会捕捉到汽车越过传感器的第一个时刻。
- en: The sketch then records the stopping time and calculates the elapsed race time.
    Finally, the sketch prints the race time to the LCD.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 草图接着记录停止时间并计算经过的比赛时间。最后，草图将比赛时间打印到LCD上。
- en: The `raceTime` variable is declared as a `float` (floating-point variable) so
    it can store numbers with decimals. By default, the `lcd.print()` method will
    display two decimal places of precision for a floating-point value, but you can
    add a second parameter to the `lcd.print()` method to specify more or less. At
    ➓, the sketch calculates the number of seconds elapsed by dividing the millisecond
    count by 1,000\. The extra `3` in the instruction `lcd.print(raceTime / 1000,
    3);` tells Arduino to display three values past the decimal point, so the time
    will be accurate to the millisecond. Don’t forget the last two curly brackets
    in the code. Double-check to make sure that your code matches [Listing 9-2](ch09.xhtml#ch09ex02),
    and upload the sketch to your device.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`raceTime` 变量被声明为 `float`（浮动点数变量），以便它可以存储带有小数的数字。默认情况下，`lcd.print()` 方法会显示浮动点数值的两位小数精度，但你可以向
    `lcd.print()` 方法添加第二个参数来指定更多或更少的小数位数。在 ➓ 中，草图通过将毫秒数除以 1,000 来计算已过去的秒数。指令 `lcd.print(raceTime
    / 1000, 3);` 中的额外 `3` 告诉 Arduino 显示小数点后三位数，因此时间将精确到毫秒。不要忘记代码中的最后两个大括号。请仔细检查确保代码与
    [清单 9-2](ch09.xhtml#ch09ex02) 相符，并将草图上传到设备。'
- en: '**COMPOUND LOGIC OPERATORS**'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**复合逻辑运算符**'
- en: 'In Chapter 4, we introduced simple logical comparison operators to compare
    two values. Recall that logic comparisons or expressions can only be either true
    or false. In programming, there are times when you need to compare multiple conditions
    together; for example, when you need to run some code only when a variable is
    false AND a sensor value is less than the threshold: `((finishFlag == false) &&
    (finishSensor1 < darkThreshold))`. Here, notice that the logic comparisons are
    grouped together in parentheses on either side of the compound AND (`&&`).'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 4 章中，我们介绍了用于比较两个值的简单逻辑比较运算符。回想一下，逻辑比较或表达式的结果只能是 `true` 或 `false`。在编程中，有时需要同时比较多个条件；例如，当你需要在一个变量为
    false 且传感器值小于阈值时才执行某段代码：`((finishFlag == false) && (finishSensor1 < darkThreshold))`。这里，注意到逻辑比较被括号分组在复合
    AND (`&&`) 的两侧。
- en: A combination of two or more logic comparisons is known as a *compound logic
    expression*. Expressions are *evaluated* (or read) from left to right. To keep
    everything together and observe the correct order of operations, it’s a good idea
    to use parentheses to separate out the individual expressions. The two main operators
    used to combine logic expressions are AND and OR, which are described in the following
    table.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 两个或多个逻辑比较的组合称为 *复合逻辑表达式*。表达式是从左到右 *评估*（或读取）的。为了保持所有内容在一起并遵守正确的运算顺序，使用括号分隔各个表达式是一个好主意。用来组合逻辑表达式的两种主要运算符是
    AND 和 OR，如下表所示。
- en: '| **SYMBOL** | **COMPOUND OPERATOR** | **DESCRIPTION** |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| **符号** | **复合运算符** | **描述** |'
- en: '| `(*expression A*) && (*expression B*)` | AND | Both `*expression A*` and
    `*expression B*` must be `true`. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `(*表达式 A*) && (*表达式 B*)` | AND | `*表达式 A*` 和 `*表达式 B*` 必须都为 `true`。 |'
- en: '| (`*expression A*) &#124;&#124; (*expression B*)` | OR | Either `*expression
    A*` or `*expression B*` must be `true`. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| (`*表达式 A*) &#124;&#124; (*表达式 B*)` | OR | `*表达式 A*` 或 `*表达式 B*` 必须为 `true`。
    |'
- en: '**A QUICK TEST**'
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**快速测试**'
- en: If you have everything wired up correctly and the code uploaded successfully,
    you’ll hear the servo motor move to the 0 degree position and see a message displayed
    on the LCD, as shown in [Figure 9-13](ch09.xhtml#ch09fig13). If the text is garbled
    or otherwise incorrect, double-check the wiring of the LCD, push button, and light
    sensor.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的一切连接正确且代码上传成功，你将听到伺服电机移动到 0 度位置，并看到 LCD 上显示的信息，如 [图 9-13](ch09.xhtml#ch09fig13)
    所示。如果文本出现乱码或其他错误，请仔细检查 LCD、按钮和光传感器的连接。
- en: '**FIGURE 9-13:** LCD display text at the start of the race'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9-13：** 比赛开始时的 LCD 显示文本'
- en: '![Image](../images/fig9_13.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig9_13.jpg)'
- en: Push the button and see what happens. The servo motor should move, and the display
    should change to the message “Go!” Now, cover the photoresistor with your finger.
    The LCD should display the time elapsed since you pressed the button and covered
    the photo-resistor ([Figure 9-14](ch09.xhtml#ch09fig14)).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 按下按钮，看看会发生什么。伺服电机应该移动，显示屏应该变更为 “Go!” 的信息。现在，用手指遮住光敏电阻。LCD 屏幕应该显示自按下按钮并遮住光敏电阻后的经过时间（见
    [图 9-14](ch09.xhtml#ch09fig14)）。
- en: With the electronics all working properly, it’s time to build the starting gate
    and track. If the sensor is not behaving as expected, try changing the `darkThreshold`
    value. If it’s too sensitive or triggering immediately, reduce the value of `darkThreshold`.
    If it’s not reacting when you cover up the sensor, try increasing the value. After
    you’ve made these changes, reupload your code and test it again.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当电子元件都正常工作时，是时候搭建起跑门和赛道了。如果传感器没有按预期工作，可以尝试更改`darkThreshold`值。如果传感器太敏感或立即触发，减小`darkThreshold`值。如果覆盖传感器时它没有反应，可以尝试增大该值。做完这些更改后，重新上传代码并再次测试。
- en: '**FIGURE 9-14:** LCD display with time elapsed'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9-14：** LCD显示屏与经过的时间'
- en: '![Image](../images/fig9_14.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig9_14.jpg)'
- en: '**BUILD THE DRAG RACE TRACK**'
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建拖拉赛道**'
- en: The Drag Race Track includes a starting tower with a rotating gate that controls
    the release of the car onto the track. For the track, you can either use a section
    of a toy car race track or build your own from cardstock. The template for the
    tower is shown in [Figure 9-15](ch09.xhtml#ch09fig15). You can download a PDF
    of this template from *[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 拖拉赛道包括一个起跑塔和一个旋转门，控制汽车进入赛道。对于赛道，你可以使用一段玩具赛车赛道，也可以从卡纸上自制。塔的模板如[图9-15](ch09.xhtml#ch09fig15)所示。你可以从*
    [https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*下载这个模板的PDF文件。
- en: '**FIGURE 9-15:** Template of cardboard cutout pieces for starting gate (not
    full size)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9-15：** 起跑门的纸板模板（非实际尺寸）'
- en: '![Image](../images/fig9_15.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig9_15.jpg)'
- en: '**Build the Starting Tower**'
  id: totrans-176
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**搭建起跑塔**'
- en: Carefully cut the template out from a sheet of cardboard (see [Figure 9-16](ch09.xhtml#ch09fig16)).
    The template has an opening for mounting the servo on one side and a hole on the
    other to mount the bamboo skewer axle for the starting gate. The other pieces
    are the support beams and the starting gate.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 小心地从纸板上剪下模板（见[图9-16](ch09.xhtml#ch09fig16)）。模板一侧有一个孔用于安装伺服器，另一侧有一个孔用于安装起跑门的竹签轴心。其他部件包括支撑梁和起跑门。
- en: '**FIGURE 9-16:** Trace the template and carefully cut out the pieces using
    a sharp craft knife.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9-16：** 按模板描线并小心地用锋利的工艺刀剪下部件。'
- en: '![Image](../images/fig9_16.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig9_16.jpg)'
- en: With the pieces cut out, first mount the servo in the opening, labeled in [Figure
    9-15](ch09.xhtml#ch09fig15). Insert the servo from the outside of the support
    beam so that the servo horn faces in toward the car. You can use the small screws
    included with the servo, or a small amount of glue, to secure the servo in place
    as shown in [Figure 9-17](ch09.xhtml#ch09fig17). Don’t attach the servo horn just
    yet. You’ll attach that to the starting gate in the next step.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在切好部件后，首先将伺服器安装在[图9-15](ch09.xhtml#ch09fig15)中标记的开口处。从支撑梁外侧插入伺服器，使伺服器舵轮朝向车子。你可以使用随伺服器附带的小螺丝，或者少量胶水将伺服器固定到位，如[图9-17](ch09.xhtml#ch09fig17)所示。暂时不要安装伺服器舵轮，下一步会将其安装到起跑门上。
- en: '**FIGURE 9-17:** Securing the servo using hot glue'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9-17：** 使用热胶固定伺服器'
- en: '![Image](../images/fig9_17.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig9_17.jpg)'
- en: Now, glue the two support beams in place. The lower support beam will insert
    into the slots cut into each of the side pieces. The top support beam should fit
    right into the notch on the top of each side piece. Use a small dab of glue to
    secure each of these pieces in place. When you’re done, you should have a starting
    support tower like the one in [Figure 9-18](ch09.xhtml#ch09fig18).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将两根支撑梁粘合到位。下部支撑梁将插入每个侧面切口中的槽口。上部支撑梁应准确地嵌入每个侧面顶部的缺口中。使用少量胶水将这些部件固定到位。完成后，你应该拥有一个类似于[图9-18](ch09.xhtml#ch09fig18)所示的起始支撑塔。
- en: '**FIGURE 9-18:** Adding the support beams'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9-18：** 添加支撑梁'
- en: '![Image](../images/fig9_18.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig9_18.jpg)'
- en: '**Assemble the Starting Gate**'
  id: totrans-186
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**组装起跑门**'
- en: To build the starting gate, you’ll need a piece of cardboard that is 2.5 × 1
    inches and a short length of bamboo skewer or thin coffee stirring rod. This will
    serve as an axle for the starting gate. To start, add a small bead of glue to
    the edge of the starting gate piece, and glue the servo horn on so that the hub
    hangs just off the edge, as shown in [Figure 9-19](ch09.xhtml#ch09fig19).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要搭建起跑门，你需要一块2.5 × 1英寸的纸板和一根短小的竹签或细长的咖啡搅拌棒。这将作为起跑门的轴心。首先，在起跑门的边缘涂上一小滴胶水，并将伺服器舵轮固定，使其中心悬挂在边缘之外，如[图9-19](ch09.xhtml#ch09fig19)所示。
- en: '**FIGURE 9-19:** Gluing the servo horn onto the edge of the starting gate'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9-19：** 将伺服器舵盘粘贴到起始门的边缘'
- en: '![Image](../images/fig9_19.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig9_19.jpg)'
- en: Cut down the bamboo skewer to 3.5 inches. Place a line of glue along the edge,
    and line the axle up with the hub of the servo horn, as shown in [Figure 9-20](ch09.xhtml#ch09fig20).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 将竹签剪至 3.5 英寸长。在边缘涂上一条胶水，并将车轴与伺服器的舵盘对齐，如[图 9-20](ch09.xhtml#ch09fig20)所示。
- en: '**FIGURE 9-20:** Gluing the axle to the starting gate'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9-20：** 将车轴粘贴到起始门上'
- en: '![Image](../images/fig9_20.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig9_20.jpg)'
- en: Plug in your Arduino and push the reset button to reset the position of the
    servo. Remember that the code will start off with the servo in the 0 degree position;
    this will be the down position, where the starting gate is holding the car in
    place. To place the starting gate into the support tower, first insert the axle
    into the hole on the side piece opposite of the servo, as shown in [Figure 9-21](ch09.xhtml#ch09fig21).
    Keep in mind that when the gate opens, it will rotate clockwise.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 插入你的 Arduino 并按下重置按钮来重置伺服器的位置。记住，代码开始时伺服器处于 0 度位置；这是下垂位置，起始门将车子固定在原地。要将起始门放入支撑塔，首先将车轴插入与伺服器相对的侧面孔中，如[图
    9-21](ch09.xhtml#ch09fig21)所示。记住，当门打开时，它会顺时针旋转。
- en: '**FIGURE 9-21:** Inserting the axle into the side piece for the starting gate'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9-21：** 将车轴插入起始门的侧面孔中'
- en: '![Image](../images/fig9_21.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig9_21.jpg)'
- en: The finished starting tower with the gate is shown in [Figure 9-22](ch09.xhtml#ch09fig22).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的起始塔和门如[图 9-22](ch09.xhtml#ch09fig22)所示。
- en: '**FIGURE 9-22:** Completed starting tower'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9-22：** 完成的起始塔'
- en: '![Image](../images/fig9_22.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig9_22.jpg)'
- en: Now you need a track. You can use a standard Hot Wheels track, which will fit
    on the lower support, or build your own track. If you want to use a Hot Wheels
    track, skip ahead to “[Add the Photoresistor](ch09.xhtml#ch09lev2sec10)” on page
    [270](ch09.xhtml#page_270).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你需要一个轨道。你可以使用标准的 Hot Wheels 轨道，这会适合安装到下方支撑架上，或者自己制作轨道。如果你想使用 Hot Wheels 轨道，可以跳到
    “[添加光敏电阻](ch09.xhtml#ch09lev2sec10)” 的部分，参见第 [270](ch09.xhtml#page_270) 页。
- en: '**Build Your Own Track**'
  id: totrans-200
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**自己制作轨道**'
- en: To build your own track, you’ll need at least one sheet of cardstock, cut down
    to 3.5 × 11 inches. You can make several lengths of track and tape them together
    for a longer track, but for our example, we’ll just use a single track.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要制作自己的轨道，你需要至少一张 3.5 × 11 英寸的卡纸。你可以制作几段轨道并将它们粘贴在一起，形成更长的轨道，但在我们的例子中，我们只使用一段轨道。
- en: You’ll fold two side rails on the track. On each side, measure and mark a line
    that is a quarter inch from the edge. Now, fold along the lines so that you have
    a quarter-inch lip on each side of your track. (It’s often helpful to use a metal
    ruler or the edge of a table to make a nice straight fold in cardstock.) The lip
    will keep your car from flying off the track and also adds a small amount of structural
    integrity. Your track should look similar to the one pictured in [Figure 9-23](ch09.xhtml#ch09fig23).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将轨道的两侧边缘折叠。每一侧，都要量测并标记离边缘一英寸四分之一的位置。现在，沿着这些线折叠，使轨道的每一侧都有一个四分之一英寸的凸缘。（使用金属尺子或桌边来帮助折叠卡纸，通常能够得到一条整齐的折痕。）这个凸缘将防止你的汽车飞出轨道，并且增加一点结构强度。你的轨道应该类似于[图
    9-23](ch09.xhtml#ch09fig23)所示的样子。
- en: Now, using a small handheld hole punch, make a hole about a half inch from the
    end of your track for your photoresistor. If you don’t have a hole punch, a craft
    knife or sharp pencil will also work. Just be careful when cutting through the
    paper, and always use a cutting mat when using a knife. The hole needs to be just
    large enough for the head of the photoresistor to fit inside.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用一个小型手持打孔器，在轨道末端大约半英寸的位置打一个孔，用来安装光敏电阻。如果你没有打孔器，工艺刀或尖锐的铅笔也可以使用。只要小心切割纸张，并且使用切割垫来保护桌面。孔的大小需要刚好能容纳光敏电阻的头部。
- en: '**FIGURE 9-23:** Completed track with two sides folded up'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9-23：** 完成的轨道，两个边缘已经折叠起来'
- en: '![Image](../images/fig9_23.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig9_23.jpg)'
- en: '**Add the Photoresistor**'
  id: totrans-206
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**添加光敏电阻**'
- en: Whether you’re using a homemade track or a standard toy track, the next step
    is to add the photoresistor at the bottom of the ramp. The photoresistor will
    be your finish-line sensor. (There is a small hole at the end of a standard Hot
    Wheels track, slightly smaller than the diameter of the photoresistor sensor.
    Thankfully, the plastic track is flexible enough that you can simply press the
    head of the photo-resistor through this hole.)
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你使用的是自制赛道还是标准玩具赛道，下一步是将光敏电阻添加到坡道底部。光敏电阻将充当你的终点线传感器。（标准Hot Wheels赛道的末端有一个小孔，直径略小于光敏电阻传感器的直径。幸运的是，塑料赛道足够柔韧，你可以直接将光敏电阻的头部按压通过这个孔。）
- en: Remove the photoresistor from the breadboard and bend the legs at a right angle
    along the head so that it looks like [Figure 9-24](ch09.xhtml#ch09fig24).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 将光敏电阻从面包板上取下，并将引脚弯曲成直角，使其看起来像[图9-24](ch09.xhtml#ch09fig24)所示。
- en: '**FIGURE 9-24:** Bend the head of the photoresistor at a right angle.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9-24：** 将光敏电阻的头部弯曲成直角。'
- en: '![Image](../images/fig9_24.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig9_24.jpg)'
- en: Insert the head of the photoresistor through the hole in your track. Make sure
    that the photoresistor does not stick out too much, or your car will catch on
    it; the car should be able to roll over the sensor without interference. With
    the legs bent at right angles, you should be able to tape them down securely to
    the bottom side of the track, as shown in [Figure 9-25](ch09.xhtml#ch09fig25).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 将光敏电阻的头部插入赛道上的孔中。确保光敏电阻没有突出太多，否则小车会卡住它；小车应该能够不受干扰地滚过传感器。将电阻的引脚弯曲成直角后，你应该能够像[图9-25](ch09.xhtml#ch09fig25)所示，安全地将它们固定在赛道的底部。
- en: '**FIGURE 9-25:** Securing the photo resistor to the race track'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9-25：** 将光敏电阻固定到赛道上'
- en: '![Image](../images/fig9_25.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig9_25.jpg)'
- en: Reconnect the photoresistor to your breadboard using a pair of male-to-female
    jumper wires. If you extended the track too far and can’t reach the breadboard,
    add more male-to-female jumpers to extend your wires as needed.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一对母对公跳线将光敏电阻重新连接到面包板。如果你将赛道延伸得太远，无法到达面包板，可以根据需要添加更多的母对公跳线来延长连接线。
- en: '**FEEL THE NEED FOR SPEED? CALCULATING AVERAGE SPEED**'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '**想要感受极速吗？计算平均速度**'
- en: With this project you can accurately measure how long it takes the car to roll
    down the ramp and cross the finish line, but you don’t know how *fast* the car
    is moving—or do you?
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个项目，你可以准确测量小车从坡道上滚下来并穿过终点线所需的时间，但你不知道小车的*速度*——还是知道的？
- en: Well, you have the total time it takes for the car to reach the bottom of the
    track, and you know the length of the track. With these two pieces of information,
    you can *estimate* how fast the car is moving. We describe this as an estimate
    because it’s really an average speed, as opposed to the exact speed of your car
    when it meets the sensor at the bottom of the ramp. If you watch as the car rolls
    down, you’ll see that it starts at the top of the ramp unmoving, then moves slowly,
    and then continues to speed up as it goes down the track.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，你已经知道小车到达赛道底部所需的总时间，并且知道赛道的长度。通过这两条信息，你可以*估算*小车的运动速度。我们之所以称之为估算，是因为这实际上是一个平均速度，而不是小车到达坡道底部传感器时的确切速度。如果你观察小车滚下坡道，你会看到它从坡道顶部开始时没有移动，然后慢慢移动，接着在下坡过程中继续加速。
- en: Average speed is defined as distance traveled per unit of time. So, to find
    the average speed, you need to measure the length of the track and divide this
    value by the time elapsed.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 平均速度定义为单位时间内行驶的距离。因此，要找到平均速度，你需要测量赛道的长度，并将该值除以经过的时间。
- en: '![Image](../images/272fig01.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/272fig01.jpg)'
- en: Our track measures about 8.5 inches from the starting gate to the finish-line
    sensor, and in our last test we had a time of 0.581 seconds. If we divide these
    two numbers, we get an average speed of 14.6 inches per second.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的赛道从起点门到终点传感器的长度大约是8.5英寸，在我们上一次测试中，时间为0.581秒。如果将这两个数字相除，我们得到的平均速度是14.6英寸每秒。
- en: '![Image](../images/272fig02.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/272fig02.jpg)'
- en: Remember that this is the *average* speed of the car. For our simple setup with
    a straight ramp, this is roughly how fast the car is moving at the middle of the
    ramp, and since it wasn’t moving at the top of the ramp, this means it was moving
    at twice this speed at the bottom of the ramp. How fast is your car moving?
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，这是小车的*平均*速度。对于我们的简单直坡设置，这大致是小车在坡道中部的运动速度，由于小车在坡道顶部时并未移动，这意味着在坡道底部时，小车的速度是这个速度的两倍。你的车移动得有多快？
- en: '**Test and Troubleshoot**'
  id: totrans-223
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**测试与故障排除**'
- en: Finally, rest the end of your race track without the photoresistor on the starting
    tower so that the ramp extends past the tower by about the length of your toy
    car (see [Figure 9-26](ch09.xhtml#ch09fig26)). This will be the starting position.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将赛道的末端没有光敏电阻的部分放置在起始塔旁边，使坡道大约延伸出塔的长度，约等于玩具车的长度（见[图9-26](ch09.xhtml#ch09fig26)）。这将是起始位置。
- en: '**FIGURE 9-26:** Finished Drag Race Timer with car ready to launch'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9-26：** 完成的拖车计时器，车已准备好发车'
- en: '![Image](../images/fig9_26.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../images/fig9_26.jpg)'
- en: If you haven’t already done so, plug the Arduino back into your computer or
    into a power source. Push the reset button to make sure that the sketch starts
    over, and find your favorite Matchbox or Hot Wheels car and set it behind the
    starting gate. Push the starting button and watch your car go!
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有这样做，将Arduino重新连接到您的计算机或电源上。按下重置按钮，确保草图重新启动，然后找出您最喜欢的火柴盒车或Hot Wheels车，并将其放在起跑门后面。按下起跑按钮，观看您的车起跑！
- en: How long did it take to reach the bottom? On our track, our toy cars took just
    over 0.5 seconds. Try a few different cars, or invite some friends over to see
    whose car is the fastest. If you tape a few pennies to your car, does it go faster?
    Experiment and see how different things affect the drag race time of your car.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 到达终点花了多长时间？在我们的赛道上，我们的玩具车用了超过0.5秒的时间。尝试几种不同的车，或者邀请一些朋友来看谁的车更快。如果你在车上粘上一些硬币，它会更快吗？进行实验，看看不同的东西如何影响你的赛车时间。
- en: '**GOING FURTHER**'
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步扩展**'
- en: In this project, we introduced you to using the LCD to display information directly
    from your Arduino sketch. Here are a few ideas of how you can take what you’ve
    done in this project further.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们向您介绍了如何使用LCD直接显示来自Arduino草图的信息。以下是一些如何进一步拓展此项目的想法。
- en: '**Hack**'
  id: totrans-231
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**改装**'
- en: Racing against yourself is only so much fun. Let’s look at how to add a second
    track and have two cars race against each other. (See [Figure 9-27](ch09.xhtml#ch09fig27).)
    For this hack, you’ll need an extra photoresistor, which isn’t included in the
    standard SparkFun Inventor’s Kit. Find a friend who also has a kit, buy one separately,
    or find one in the additional parts kit for this book.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 与自己比赛的乐趣是有限的。让我们看看如何添加第二个赛道，并让两辆车互相比赛。（见[图9-27](ch09.xhtml#ch09fig27)）对于这个改装，您需要一个额外的光敏电阻，这个电阻在标准的SparkFun
    Inventor’s Kit中没有包含。可以找一个也有此工具包的朋友，单独购买一个，或者在本书的附加零件包中找到一个。
- en: First you need to create a separate finish-line sensor circuit. We were able
    to sneak in one more photoresistor and a pull-down resistor circuit near the bottom
    of the breadboard, as shown in [Figure 9-28](ch09.xhtml#ch09fig28). Connect the
    second photoresistor circuit to pin 2 on the Arduino through a 10 kΩ pull-down
    resistor, and connect the other leg to the 5 V power rail.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要创建一个独立的终点传感器电路。我们能够在面包板的底部附近插入一个光敏电阻和一个下拉电阻电路，如[图9-28](ch09.xhtml#ch09fig28)所示。通过一个10
    kΩ下拉电阻将第二个光敏电阻电路连接到Arduino的2号引脚，并将另一个引脚连接到5V电源轨。
- en: Place the photoresistor in the second track, and add male-to-female jumper wires
    to connect this to your circuit on the breadboard. Set your second track next
    to the first one on the starting tower. Now, it’s time to upload some new code
    that will use both sensors. You only need to add a few extra lines to allow for
    the two cars to race. Download the *P9_TwoCarDragRaceTimer.ino* file from *[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*
    and open it.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 将光敏电阻放置在第二个轨道上，并添加公对母跳线将其连接到面包板上的电路。将第二个轨道放置在第一个轨道旁边，放置在起始塔上。现在，是时候上传一些新的代码，以便同时使用这两个传感器。您只需添加几行额外的代码，允许两辆车进行比赛。从*[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*下载*P9_TwoCarDragRaceTimer.ino*文件并打开它。
- en: Let’s take a look at the additions to this code. First, the code adds a new
    constant and variable for the second photoresistor finishline sensor, `finishSensor2Pin`
    and `finishSensor2`.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看此代码的新增部分。首先，代码为第二个光敏电阻终点传感器添加了一个新常量和变量，`finishSensor2Pin`和`finishSensor2`。
- en: 'Then, it checks which sensor was crossed first using a compound `if()` statement.
    If car #1 crosses first, `finishSensor1` will be `0` and `finishSensor2` will
    still be `1`. Inside this `if()` statement, instructions display the winning information
    to the LCD and set the state variable, `finishFlag`, to `true`.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它通过复合`if()`语句检查哪个传感器首先被跨越。如果车#1首先到达，`finishSensor1`将为`0`，而`finishSensor2`仍为`1`。在这个`if()`语句内部，指令将获胜信息显示到LCD屏幕上，并将状态变量`finishFlag`设置为`true`。
- en: 'The `else-if()` statement checks whether car #2 crosses the finish line first;
    in this case, `finishSensor2` will be `0` and `finishSensor1` will still be `1`.
    In the unlikely event that both cars do actually cross the line at the same time,
    this code does nothing. See if you can figure out how to add a draw feature in
    the event of a tie.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`else-if()` 语句检查车 #2 是否首先穿越终点线；在这种情况下，`finishSensor2` 将为 `0`，而 `finishSensor1`
    仍然为 `1`。如果两辆车确实同时穿越终点线，这段代码什么也不做。看看你能否想出如何在平局时添加一个平局功能。'
- en: The code is full of comments to help explain more. Now, upload the code to your
    board and race! Whose car is fastest?
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中有很多注释来帮助解释更多内容。现在，上传代码到你的开发板并开始竞赛！谁的车最快？
- en: '**FIGURE 9-27:** Drag Race Timer with two race tracks'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9-27：** 拖曳赛计时器，带有两条赛道'
- en: '![Image](../images/fig9_27.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig9_27.jpg)'
- en: '**FIGURE 9-28:** Adding a second photo-resistor for racing two cars at the
    same time'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9-28：** 添加第二个光敏电阻，用于同时竞赛两辆车'
- en: '![Image](../images/fig9_28.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig9_28.jpg)'
- en: '**Modify**'
  id: totrans-243
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**修改**'
- en: Now that you’ve seen how to use the LCD circuit, try going back and adding an
    LCD to one of the projects you’ve already built. In any of the projects where
    you used the Serial Monitor to display information, like the Reaction Timer from
    [Project 4](ch04.xhtml#ch04) or the Tiny Desktop Greenhouse in [Project 7](ch07.xhtml#ch07),
    you can replace the Serial Monitor with the LCD.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了如何使用 LCD 电路，试着回去并给你已经完成的项目添加一个 LCD。在任何你用串行监视器显示信息的项目中，比如[第 4 项目](ch04.xhtml#ch04)的反应计时器或[第
    7 项目](ch07.xhtml#ch07)的小型桌面温室，你都可以将串行监视器替换为 LCD。
- en: You’ll need to check the wiring and the pin configuration used; you’ll need
    six GPIO pins from your Arduino to control the LCD. If you want to see an example
    of the Reaction Timer project that uses the LCD, take a look at the tutorial we
    created on our InventorSpace at *[https://invent.sparkfun.com/cwists/preview/1145-sik-lcd-reaction-timer/](https://invent.sparkfun.com/cwists/preview/1145-sik-lcd-reaction-timer/)*.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要检查电路连接和使用的引脚配置；你需要从你的 Arduino 获取六个 GPIO 引脚来控制 LCD。如果你想看到一个使用 LCD 的反应计时器项目示例，可以查看我们在
    InventorSpace 上创建的教程，* [https://invent.sparkfun.com/cwists/preview/1145-sik-lcd-reaction-timer/](https://invent.sparkfun.com/cwists/preview/1145-sik-lcd-reaction-timer/)
    *。
