- en: '9'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '9'
- en: 'PI SPY PART 2: WI-FI AND BLUETOOTH TRACKING'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: PI SPY PART 2：WI-FI和蓝牙跟踪
- en: YOU CAN USE YOUR NEW RASPBERRY PI SKILLS TO SPY ON WHOEVER IS IN YOUR HOUSE
    BY LOCATING SIGNALS FROM THEIR TECHNOLOGY. ALMOST EVERYONE HAS A SMARTPHONE, TABLET,
    OR ANOTHER DEVICE THAT TRANSMITS A LOT OF UNSEEN DATA IN THEIR VICINITY. YOU’LL
    USE THIS DATA TO DETECT WHO IS AROUND.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以利用你新的Raspberry Pi技能，通过定位设备的信号来窃听屋内每个人的动态。几乎每个人都有智能手机、平板电脑或其他设备，这些设备会在周围传输大量未被察觉的数据。你将利用这些数据来检测谁在周围。
- en: You’ll use your Raspberry Pi to detect devices through both your internet router
    and Bluetooth. You’ll send data from your Raspberry Pi to each device via the
    internet router or Bluetooth and retrieve information including the device’s name,
    the device’s type, whether it’s connected, and then whether the person who owns
    the device is around. This assumes that each device is owned by one person and
    not, say, shared among the family. Otherwise, knowing who’s around is much harder!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用Raspberry Pi通过互联网路由器和蓝牙来检测设备。你会通过互联网路由器或蓝牙将数据从Raspberry Pi发送到每个设备，并检索包括设备名称、设备类型、是否已连接以及设备所属者是否在附近等信息。这假设每个设备由一个人拥有，而不是例如在家庭成员之间共享。否则，要知道谁在附近会变得更难！
- en: You’ll then create an LED visual display board indicator, or *status board*,
    that lights up when a user is in the home and goes off when the user is absent
    ([Figure 9-1](ch09.xhtml#ch09fig01)).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你将创建一个LED视觉显示板指示器，或称为*状态板*，当用户在家时，它会亮起，而当用户不在时，它会熄灭（如[图9-1](ch09.xhtml#ch09fig01)所示）。
- en: '![Image](../images/09fig01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/09fig01.jpg)'
- en: '**FIGURE 9-1** A finished status board'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9-1** 完成的状态板'
- en: WHAT YOU’LL NEED
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你将需要的东西
- en: Raspberry Pi Zero W or Raspberry Pi 4 (suggested)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raspberry Pi Zero W或Raspberry Pi 4（推荐）
- en: 10 female-to-female jumper wires
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 10根母对母跳线
- en: 5 LEDs—or the same number of LEDs as devices you want to track
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5个LED灯——或者与想要跟踪的设备数量相同的LED灯数量
- en: 5 resistors (220 to 330 ohms)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5个电阻（220到330欧姆）
- en: Cardboard
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纸板
- en: Pictures (optional)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图片（可选）
- en: Masking tape (optional)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 胶带（可选）
- en: Push button
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮
- en: You can use pictures of your family members or, to disguise the purpose of the
    status board, random pictures to represent each family member, as I have in [Figure
    9-1](ch09.xhtml#ch09fig01).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用家人照片，或者为了掩盖状态板的用途，使用随机图片来代表每个家庭成员，正如我在[图9-1](ch09.xhtml#ch09fig01)中所示。
- en: CREATING YOUR STATUS BOARD
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建你的状态板
- en: Let’s begin by creating the status board that will indicate who is in the vicinity.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从创建状态板开始，它将显示谁在附近。
- en: If you have one, the Raspberry Pi Zero W is the best size for mounting onto
    the back of your status board, because it’s the smallest Pi. If you’re using a
    bigger Pi, such as the model 4, you might have to put it next to the status board
    on a sturdy surface. However, if you do use the Zero W, you may find it easier
    to make the project by using a model 4 and then transfering the SD card to your
    Pi Zero W.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有，Raspberry Pi Zero W是最适合安装到状态板背后的尺寸，因为它是最小的Pi。如果你使用的是更大的Pi，如型号4，你可能需要将它放置在状态板旁边的坚固表面上。然而，如果你使用Zero
    W，你可能会发现使用型号4来做这个项目更容易，然后将SD卡转移到Pi Zero W上。
- en: Wiring Up the LEDs
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: LED连接线
- en: Take one of the five LEDs and locate the longer (positive) leg. Wrap one leg
    from a resistor around this LED leg so that it’s tight and secure, as shown in
    [Figure 9-2](ch09.xhtml#ch09fig02). Now attach one end of a female-to-female jumper
    wire to the shorter (negative) leg of the LED. Attach the other female-to-female
    jumper wire to the resistor wire. Repeat this step for all five LEDs.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 取一个LED，找到较长的（正极）引脚。将一个电阻的引脚绕在这个LED的引脚上，使其紧密固定，如[图9-2](ch09.xhtml#ch09fig02)所示。然后，将一根母对母跳线的一端连接到LED的短引脚（负极）。将另一根母对母跳线的一端连接到电阻的引脚。对于所有五个LED，重复这个步骤。
- en: '![Image](../images/09fig02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/09fig02.jpg)'
- en: '**FIGURE 9-2** Wiring up an LED'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9-2** LED连接线'
- en: Adding the LEDs to the Board
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将LED灯添加到面板
- en: On the cardboard you’re using for your status board, lightly mark each location
    where you want to place an LED. If you’re attaching the Raspberry Pi to the board,
    ensure that you leave enough space for the Pi and all the wires. Carefully pierce
    a small hole in the board at each previously marked location to hold each LED
    in place. You can use a pen or screwdriver to do this. Push each LED through a
    hole. Stick them down with masking tape to keep things neat and tidy, as well
    as to reduce the possibility of the wires touching each other and causing a short-out.
    The back of your status board should look similar to [Figure 9-3](ch09.xhtml#ch09fig03).
    Each of the numbers refers to the GPIO pin that the LED is connected to. (See
    the table on the next page for the GPIO pin numbers.) For example, the LED on
    the left, LED 1, is connected to GPIO 4.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在你用于状态板的纸板上，轻轻标记出你想要放置每个LED的位置。如果你将树莓派固定在板上，确保为树莓派和所有的电线留出足够的空间。小心地在每个已标记的位置上打一个小孔，以固定每个LED。你可以使用笔或螺丝刀来完成此操作。将每个LED推入孔中，并用胶带将其固定，以保持整洁，同时减少电线相互接触造成短路的可能性。你状态板的背面应类似于[图
    9-3](ch09.xhtml#ch09fig03)。每个数字对应LED连接到的GPIO引脚。（请参见下一页的GPIO引脚编号表。）例如，左侧的LED 1连接到GPIO
    4。
- en: '![Image](../images/09fig03.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/09fig03.jpg)'
- en: '**FIGURE 9-3** Attaching the LEDs to the status board'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9-3** 将LED连接到状态板'
- en: You can now add your own touches to the front of the board. Perhaps add photos
    to represent the members of your home, and decorate it to suit your style and
    taste.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以为电路板的前面添加个人风格。也许可以添加一些照片来代表你家中的成员，并根据你的风格和口味装饰它。
- en: Connecting the LEDs to the Raspberry Pi
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 连接LED到树莓派
- en: To power each LED, you need to take the longer, positive leg that has the resistor
    wrapped around it and attach its jumper wire to a GPIO pin. (Any one will work
    fine, but I suggest using the ones in the following table.) Then take the shorter,
    negative leg and attach its jumper wire to a ground GPIO pin labeled *GND*. [Figure
    9-4](ch09.xhtml#ch09fig04) shows these connections. The GND pins are located at
    physical pins 6, 9, 14, 20, 25, 30, 34, and 39\. You can use any of these.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为每个LED供电，你需要将较长的正极引脚（上面绕着电阻）与跳线连接到一个GPIO引脚。（任何一个都可以，但我建议使用下表中的引脚。）然后，将较短的负极引脚与跳线连接到标记为*GND*的接地GPIO引脚。[图
    9-4](ch09.xhtml#ch09fig04)展示了这些连接。GND引脚位于物理引脚6、9、14、20、25、30、34和39。你可以使用其中的任何一个。
- en: '![Image](../images/09fig04.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/09fig04.jpg)'
- en: '**FIGURE 9-4** Connecting an LED to the Raspberry Pi'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9-4** 连接LED到树莓派'
- en: Now do the same for all your other LEDs to wire them up to the Raspberry Pi
    board ([Figure 9-5](ch09.xhtml#ch09fig05)). The following table shows which GPIO
    pins to use.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为你的其他所有LED进行同样的操作，将它们连接到树莓派板上（见[图 9-5](ch09.xhtml#ch09fig05)）。下表显示了每个GPIO引脚应使用的情况。
- en: '| **ITEM** | **GPIO** |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| **项目** | **GPIO** |'
- en: '| --- | --- |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| LED 1 | 4 |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| LED 1 | 4 |'
- en: '| LED 2 | 18 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| LED 2 | 18 |'
- en: '| LED 3 | 24 |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| LED 3 | 24 |'
- en: '| LED 4 | 7 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| LED 4 | 7 |'
- en: '| LED 5 | 26 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| LED 5 | 26 |'
- en: '| Shutdown button | 16 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 关闭按钮 | 16 |'
- en: The last set of wires is for the shutdown button, which, when pressed, will
    power down the Raspberry Pi. Add a jumper wire to GPIO 16 and another one to a
    GND pin. If you need to, you can connect the LED to any of the pins, except for
    the 3V and 5V pins (1, 2, 4, and 17), depending on where your LEDs and Pi are
    positioned on the board. For example, if your Raspberry Pi is in the middle of
    the board, you may want to use GPIO 2, 3, 4, 14, 15, or 18 for the LEDs located
    to the right side and 13, 19, 26, 16, 20, or 21 for LEDs on the left. The other
    end of the LED is attached to one of the ground pins to complete the circuit.
    If you do use different GPIO numbers or add more LEDs, take note of each GPIO
    pin number and its corresponding LED, as you’ll need them later when you code
    with Python.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一组电线是用于关闭按钮的，按下时将关闭树莓派的电源。将一根跳线连接到GPIO 16，另一根连接到GND引脚。如果需要，你可以将LED连接到任何引脚，除了3V和5V引脚（1、2、4和17），具体取决于你的LED和树莓派在板上的位置。例如，如果你的树莓派位于板子的中间，你可能会想为位于右侧的LED使用GPIO
    2、3、4、14、15或18，为位于左侧的LED使用13、19、26、16、20或21。LED的另一端连接到一个接地引脚，以完成电路。如果你使用不同的GPIO编号或添加更多的LED，请注意每个GPIO引脚编号及其对应的LED，因为在用Python编程时你需要它们。
- en: '![Image](../images/09fig05.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/09fig05.jpg)'
- en: '**FIGURE 9-5** Wiring up all the LEDs and the button'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9-5** 连接所有LED和按钮'
- en: Attaching the Raspberry Pi
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装树莓派
- en: Most Raspberry Pis come with four small screw points, one in each corner of
    the board. These are perfect for mounting the Pi onto the status board. You can
    use either small screws to screw the Pi in place or adhesive glue dots to secure
    it. Use the screws if you want to remove the Raspberry Pi and use it for something
    else in the future.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数树莓派配有四个小螺丝孔，分别位于板子的四个角落。这些螺丝孔非常适合将树莓派安装到状态板上。你可以使用小螺丝将树莓派固定，或者使用粘性胶点来固定它。如果你希望以后能够拆卸树莓派并将其用于其他用途，建议使用螺丝。
- en: TRACKING DEVICES WITH IP ADDRESSES
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用IP地址跟踪设备
- en: 'First, you’ll set the Pi to track your house members through their IP addresses.
    Take a moment to consider the enormous number of devices that use the internet:
    mobile phones, smart TVs, game consoles, smart watches, refrigerators, cars, tablets,
    and alarm systems, just to name a few. With so many devices connected, how does
    the correct data get to the correct device? How does the data for a video you’re
    streaming, for example, know to be sent to your tablet while someone else in the
    house is checking email or listening to music?'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要设置树莓派，通过其IP地址跟踪你家庭成员的设备。稍微考虑一下，使用互联网的设备数量是多么庞大：手机、智能电视、游戏机、智能手表、冰箱、汽车、平板电脑和报警系统，仅举几例。在这么多设备连接的情况下，正确的数据如何发送到正确的设备呢？比如你正在流式播放一个视频，数据如何知道应该发送到你的平板，而不是家里其他人正在查看电子邮件或听音乐的设备上？
- en: 'Well, every device connected to the internet is given an Internet Protocol
    (IP) address. From the outside, these addresses work similarly to zip codes: they
    indicate a set of devices within a certain *network*—your network will be your
    shared internet connection. From inside this network, each device is given its
    own unique IP address so the router knows what information to send where.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 每个连接到互联网的设备都会分配一个互联网协议（IP）地址。从外部来看，这些地址的作用类似于邮政编码：它们表示一组在特定*网络*内的设备——你的网络就是你共享的互联网连接。从这个网络内部，每个设备都会分配一个唯一的IP地址，以便路由器知道将信息发送到哪里。
- en: 'An IP address is made up of four sets of numbers: for example, 192.168.1.24\.
    At last count, about 340 trillion trillion trillion IPv6 addresses were in use!^([1](footnote.xhtml#ch09fn01))'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: IP地址由四组数字组成：例如，192.168.1.24。根据最新统计，大约340万亿万亿万亿个IPv6地址正在使用中！^([1](footnote.xhtml#ch09fn01))
- en: You’ll use the individual IP addresses of the devices on your network to check
    whether each device is nearby. Because your Raspberry Pi is connected to your
    home network, it will have its own IP address. Let’s discover what that is.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用你网络中设备的单独IP地址来检查每个设备是否在附近。由于你的树莓派连接到家庭网络，它也会有自己的IP地址。让我们来查找它是什么。
- en: FINDING YOUR IP ADDRESS
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找你的IP地址
- en: 'Open the terminal and enter the following, which should give you some information
    about your network:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端，输入以下命令，这将为你提供一些关于网络的信息：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This displays the IP address of your Raspberry Pi. In [Figure 9-6](ch09.xhtml#ch09fig06),
    my IP address is 192.168.1.171.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这会显示你树莓派的IP地址。在[图9-6](ch09.xhtml#ch09fig06)中，我的IP地址是192.168.1.171。
- en: '![Image](../images/09fig06.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/09fig06.jpg)'
- en: '**FIGURE 9-6** Getting the Raspberry Pi’s IP address'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9-6** 获取树莓派的IP地址'
- en: FINDING THE IP ADDRESSES OF OTHER DEVICES
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找其他设备的IP地址
- en: There are two methods for finding the IP addresses of the other devices on your
    network. The first is to use an app such as Fing from your phone or tablet, and
    the second is to use a program called Nmap from your Pi.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以找到你网络中其他设备的IP地址。第一种是使用类似Fing的应用程序，通过你的手机或平板进行扫描，第二种是通过树莓派上名为Nmap的程序进行扫描。
- en: Using Fing
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用Fing
- en: '*Fing* will scan your router and network and return all the IP addresses, plus
    the name and the manufacturer of all connected devices. Write down this information
    so you can use it later in the program code. If you want to take this simpler
    route, download Fing to your phone or other device, and follow instructions at
    *[www.fing.io](http://www.fing.io)*.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*Fing* 会扫描你的路由器和网络，并返回所有IP地址，同时列出所有连接设备的名称和制造商。记下这些信息，方便稍后在程序代码中使用。如果你想选择这种更简单的方式，可以在手机或其他设备上下载Fing，并按照*
    [www.fing.io](http://www.fing.io) *上的说明进行操作。'
- en: Using Nmap
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用Nmap
- en: 'Alternatively, you can write a small Python program on your Pi to scan and
    return the addresses. This has an advantage: you can copy and paste the numbers
    straight into the main program and not risk mistyping them. To do this, you’ll
    use a program called Nmap.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你也可以在树莓派上写一个简单的Python程序来扫描并返回地址。这有一个优势：你可以将数字直接复制粘贴到主程序中，而不用担心打错。为此，你将使用一个叫做Nmap的程序。
- en: Installing Nmap
  id: totrans-64
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 安装Nmap
- en: '*Nmap (Network Mapper)* is a scanner used to discover devices and services
    on a computer network. Nmap sends a specific packet of data to the router and
    then analyzes the responses to build a table of information about the connected
    devices. From this table, the program builds a map of your network. To install
    Nmap, open the terminal window and enter the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*Nmap (网络映射器)* 是一个用于发现计算机网络中设备和服务的扫描器。Nmap 向路由器发送一个特定的数据包，然后分析响应以构建关于连接设备的信息表。从这个表中，程序构建出你的网络地图。要安装
    Nmap，打开终端窗口并输入以下内容：'
- en: '[PRE1]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Nmap commands are executed from the terminal, so to use Python and the features
    of Nmap, you need to install a Python wrapper. A *wrapper* is a program that enables
    you to write Python code in the terminal to control some software. In the terminal,
    enter this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap 命令通过终端执行，因此要使用 Python 和 Nmap 的功能，你需要安装一个 Python 封装程序。*封装程序*是一个程序，它允许你在终端中编写
    Python 代码来控制某些软件。在终端中，输入以下命令：
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Writing a Program to Find the IP Addresses
  id: totrans-69
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 编写程序以查找 IP 地址
- en: Now that you have Nmap installed, you can write a Python program to search for
    the IP addresses of connected devices. Open IDLE and start a new Python file.
    Add the code in [Listing 9-1](ch09.xhtml#ch09ex01) and save it. Before you run
    it, make sure your own phone or other device is connected to the router, because
    you’ll use your device as the tester for the final code.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经安装了 Nmap，可以编写一个 Python 程序来搜索连接设备的 IP 地址。打开 IDLE，创建一个新的 Python 文件。添加 [Listing
    9-1](ch09.xhtml#ch09ex01) 中的代码并保存。在运行之前，确保你的手机或其他设备已连接到路由器，因为你将使用自己的设备作为最终代码的测试器。
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**LISTING 9-1** Nmap scanning program'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 9-1** Nmap 扫描程序'
- en: Start by importing the `nmap` library ❶ and then create the variable `nm` to
    hold the `PortScanner()` function ❷ from the `nmap` library. This function, as
    you might have guessed, scans ports!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 首先导入 `nmap` 库 ❶，然后创建变量 `nm` 来保存 `nmap` 库中的 `PortScanner()` 函数 ❷。正如你可能猜到的，这个函数用于扫描端口！
- en: Next, add the code to scan the router ❸. Most routers have a generic IP address
    that’s standard across all of them. This line scans all IP addresses in the range
    from 192.168.1.0 to 192.168.1.24 and then retrieves the data that each IP address
    holds about the connected devices.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加代码以扫描路由器 ❸。大多数路由器都有一个通用的 IP 地址，这个地址在所有路由器中是标准的。这行代码扫描从 192.168.1.0 到 192.168.1.24
    范围内的所有 IP 地址，然后检索每个 IP 地址持有的关于连接设备的数据。
- en: However, you may need to check the IP range for your particular router and change
    the range to reflect this. For example, your router’s IP address range may start
    from 192.168.0.1, or you may have configured your own custom range. If in doubt,
    refer to the service provider’s guidance and documentation.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可能需要检查特定路由器的 IP 范围，并更改该范围以反映这一点。例如，你的路由器的 IP 地址范围可能从 192.168.0.1 开始，或者你可能已经配置了自己的自定义范围。如果不确定，请参考服务提供商的指导和文档。
- en: Now use a `for` loop to cycle through all the hosts (the devices) that have
    been found ❹. This will provide you with the IP address as well as the name of
    each device that is currently connected to the router or was previously connected
    (many routers keep a list of all previously connected devices).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用 `for` 循环遍历所有找到的主机（设备） ❹。这将为你提供每个当前连接到路由器或之前连接的设备的 IP 地址及其名称（许多路由器会保存所有曾连接过的设备列表）。
- en: The list you retrieve provides lots of details about the devices, so you’ll
    print this out ❺ to help you identify each device. Once you’ve entered and saved
    the program, press **F5** to run it and you’ll be presented with a list of connected
    devices and IP addresses in the Python editor window, like the one in [Listing
    9-2](ch09.xhtml#ch09ex02).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你获取的列表提供了关于设备的详细信息，所以你会打印出来 ❺ 以帮助你识别每个设备。一旦输入并保存了程序，按 **F5** 运行，你将在 Python 编辑器窗口中看到连接设备及其
    IP 地址的列表，就像 [Listing 9-2](ch09.xhtml#ch09ex02) 中的那样。
- en: '[PRE4]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**LISTING 9-2** The IP addresses that have been found'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 9-2** 已找到的 IP 地址'
- en: Copy and paste your details into a text document or a new Python file. If you
    paste into a Python file, remember to add a `#` before each line to comment it
    out—this will stop any errors when the program runs. Now, try to identify whom
    each device belongs to and note the additional information next to the device
    name. You might be able to make the identification from the device name, or you
    could quickly check who is in the house and use a process of elimination. For
    example, if you have two iPhone users in the house, and one phone is showing up,
    check the model number. If a person is out, you know that any phone that shows
    up is not theirs. Some users will make it easy for you by using their real name
    for their device name. You should also make a note of which device is yours.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的详细信息复制并粘贴到文本文件或新的Python文件中。如果你粘贴到Python文件中，请记得在每行前加上`#`，将其注释掉——这样程序运行时就不会出现错误。现在，尝试确定每个设备属于谁，并在设备名称旁边记录额外的信息。你可能能够通过设备名称来识别，或者你可以快速检查家里谁在，并使用排除法。例如，如果家里有两个iPhone用户，而只有一部手机出现，检查型号。如果某个人不在家，你就知道显示出来的手机不是他们的。有些用户会通过使用自己的真实姓名作为设备名称来简化识别。你还应该记录下哪个设备是你自己的。
- en: Remember that in an ideal situation, the devices will be connected to the router
    and will return the current IP address. But IP addresses can change when the router
    is turned off or reset, so any devices in your home that are turned off may show
    up as their previous IP address. It’s best to wait until they go back online before
    you collect the addresses.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，在理想情况下，设备将连接到路由器，并返回当前的IP地址。但IP地址在路由器关闭或重置时可能会发生变化，因此家中关闭的设备可能会显示其以前的IP地址。最好等到设备重新上线后再收集地址。
- en: WRITING THE STATUS BOARD CODE
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写状态板代码
- en: Now that you have a list of IP addresses, devices, and users, you can create
    the program that combines this information with the electronics in your status
    board to spy on who is present in your home. If you’re using a Pi Zero W, you’ll
    need to SSH in (see “Accessing the Raspberry Pi via SSH” on [page 25](ch01.xhtml#page_25))
    or use a remote desktop application to access your Pi. Otherwise, you could write
    and test the code in this section on a Raspberry Pi and then transfer its SD card
    to your Pi Zero W.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经拥有了IP地址、设备和用户的列表，你可以创建一个程序，将这些信息与状态板中的电子元件结合起来，监控谁在你家中。如果你使用的是Pi Zero W，你需要通过SSH连接（参见“通过SSH访问Raspberry
    Pi”章节，[第25页](ch01.xhtml#page_25)）或使用远程桌面应用程序访问你的Pi。否则，你可以在Raspberry Pi上编写并测试本节代码，然后将其SD卡转移到Pi
    Zero W中。
- en: In Python code, you’d typically group common elements like LEDs together. Our
    code, though, will make more sense if you group the code by each person or device;
    that way, you can easily add LEDs and check for more people. That’s what you’ll
    do here.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python代码中，通常会将LED等常见元素归为一组。然而，如果你按每个人或设备来分组代码，我们的代码会更有意义；这样，你可以轻松添加LED并检查更多的人。这就是你在这里要做的。
- en: This program uses the `gpiozero` library and the `PingServer()` class, which
    sends out pings. But what is a ping? You can think of a *ping* as a request that’s
    sent to your router. The request is made up of packets of data, represented as
    a string of zeros and ones, which request information from your router about all
    of the devices that are connected to it. The router then sends that information
    back to your Pi and the Python program. In this project, the data is sent back
    to your Raspberry Pi. You’ll use this information to find out who is around.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序使用了`gpiozero`库和`PingServer()`类，它会发送ping请求。那么，ping是什么呢？你可以将*ping*看作是发送到路由器的请求。该请求由数据包组成，表示为一串零和一，目的是请求路由器提供关于所有连接设备的信息。路由器随后将这些信息发送回你的Pi和Python程序。在这个项目中，数据会被返回到你的Raspberry
    Pi。你将使用这些信息来找出谁在附近。
- en: Setting Up and Identifying the First Device
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置并识别第一个设备
- en: Open your Python editor and add the code shown in [Listing 9-3](ch09.xhtml#ch09ex03).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的Python编辑器，添加[LISTING 9-3](ch09.xhtml#ch09ex03)中显示的代码。
- en: Then save it as *wifi_spy.py*.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将其保存为*wifi_spy.py*。
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**LISTING 9-3** Setting up and finding the first device'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 9-3** 设置和查找第一个设备'
- en: First, import the required functions ❶ from the `gpiozero` library. You need
    `PingServer()` to retrieve the data from the router, the `LED` class to control
    the LEDs, and the `Button` module to add the button function to shut down the
    board.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从`gpiozero`库导入所需的函数❶。你需要`PingServer()`来从路由器获取数据，`LED`类来控制LED，`Button`模块来添加关闭板的按钮功能。
- en: You also need to import `check_call()` from the `subprocess` library ❷. This
    lets you use commands in the terminal to control the Raspberry Pi, and you’ll
    use this to let you shut down the Pi from the terminal.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要从`subprocess`库中导入`check_call()`❷。这使你可以使用终端命令来控制Raspberry Pi，并将用来从终端关闭Pi。
- en: Finally, import `pause` from the `signal` library so you can keep the program
    running continuously ❸.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，从`signal`库中导入`pause`，以便让程序持续运行❸。
- en: Next, create a `shutdown()` function that holds the code for shutting down the
    Pi ❹. This uses the `check_call()` command to run the command `sudo poweroff`,
    which turns off the Pi.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个`shutdown()`函数，包含关闭Pi的代码❹。该函数使用`check_call()`命令运行`sudo poweroff`，用于关闭Pi。
- en: Now you can start detecting people! I’ve put in a comment to help keep track
    of each person that the device and LED in the status board refers to; you should
    change this comment to reflect the first device in your house.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以开始检测人员了！我已经添加了一个注释来帮助你跟踪设备和状态板上的每个LED所对应的人；你应该修改这个注释，来反映你家中第一个设备的信息。
- en: Create a variable to hold the details of the first IP address you check ❺. You
    should name the variable after the user of the device, which you figured out in
    “Finding the IP Addresses of Other Devices” on [page 147](ch09.xhtml#page_147).
    This variable contains the command to ping the router and the device’s IP address.
    In place of the IP address I’ve put here, take the first IP address from the list
    you got earlier using Fing or Nmap and place that in the brackets, remembering
    the quote marks.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个变量，用于存储你检查的第一个IP地址的详细信息❺。你应该根据设备的使用者命名这个变量，这个信息你可以在“查找其他设备的IP地址”章节的[第147页](ch09.xhtml#page_147)中找到。该变量包含ping路由器和设备IP地址的命令。在这里，我填写的是IP地址，你应当将之前通过Fing或Nmap获得的第一个IP地址放在括号内，并记得保留引号。
- en: The last line identifies which GPIO pin is used by this person’s LED ❻. Each
    individual should have their own LED, so here Frank is assigned the LED attached
    to GPIO pin 4.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行标识了该人员LED使用的GPIO引脚❻。每个个人应该有自己独立的LED，因此这里将Frank分配到连接GPIO引脚4的LED。
- en: Finding the Rest of the Devices
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 查找其他设备
- en: Now you’ll use the same code structure to set up the variables for the other
    device IP addresses you want to check and assign an LED to each device. Add the
    lines of code from [Listing 9-4](ch09.xhtml#ch09ex04) to the bottom of your program.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将使用相同的代码结构，设置你想要检查的其他设备IP地址的变量，并为每个设备分配一个LED。将[列表9-4](ch09.xhtml#ch09ex04)中的代码行添加到程序的底部。
- en: '[PRE6]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**LISTING 9-4** Assigning LEDs to each device'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表9-4** 为每个设备分配LED'
- en: As before, you create a variable to hold the results of each ping, indicating
    the name of the person who owns the device. Remember to replace each variable
    name with a name in your household, and replace each IP address with the corresponding
    IP address you collected earlier ❶.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如同之前，你创建一个变量来保存每个ping的结果，指示设备所有者的姓名。记得将每个变量名替换成你家中的名字，并将每个IP地址替换为之前收集的相应IP地址❶。
- en: If you can’t locate enough devices, still add the code for each variable listed
    here and just use an IP address you already used. This will turn on multiple LEDs
    at once, but it will mean you can test that the wiring and the program code are
    working correctly. Once you have it all working, you can go back and delete or
    comment out those lines if you want.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你找不到足够的设备，仍然添加每个变量对应的代码，并使用已经使用过的IP地址。这将同时点亮多个LED，但这意味着你可以测试电路和程序代码是否正常工作。一旦一切都能正常运行，你可以回过头来删除或注释掉那些代码行。
- en: Adding Delays, Responding to Data, and Adding the Button
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加延迟、响应数据，并添加按钮
- en: Finally, you add the concluding section of the program code, shown in [Listing
    9-5](ch09.xhtml#ch09ex05). This will put a delay between the pings for each person.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，添加程序代码的结尾部分，如[列表9-5](ch09.xhtml#ch09ex05)所示。此部分将在每个设备的ping之间添加延迟。
- en: You delay between each ping because pinging the router too many times will create
    a lot of traffic and slow the network. You might get caught! Also, a person isn’t
    likely to leave the house and return every second, so you can run the check once
    a minute.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你在每次ping之间设置延迟，因为频繁ping路由器会产生大量流量并拖慢网络速度。你可能会被发现！而且，通常情况下，人们不会每秒钟都进出家门，所以你可以每分钟检查一次。
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**LISTING 9-5** Adding delays between pings'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表9-5** 在ping之间添加延迟'
- en: Replace the names I’ve used here with the names you used for your variables,
    and then list the delay in seconds as I’ve done ❶. If you find your network is
    still running slow or you want to run the checks less frequently, increase the
    number of seconds for the delays. For example, you could increase the delays to
    300, as a user is likely to be online for a while. Note that some smartphones
    may appear disconnected from your network when the phone screen locks.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 将我在这里使用的名称替换为你为变量使用的名称，然后列出我所做的延迟秒数 ❶。如果你发现网络仍然很慢，或者你希望检查频率较低，可以增加延迟的秒数。例如，你可以将延迟时间增加到300秒，因为用户可能会在线较长时间。请注意，某些智能手机在屏幕锁定时可能会显示与网络断开连接。
- en: Next the program needs to respond to the ping data. If the IP address sent in
    the ping is located on the router and confirmed as live, the corresponding LED
    is turned on ❷. If the IP address isn’t found, then the device isn’t found, and
    the LED is turned off.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，程序需要响应ping数据。如果ping中发送的IP地址在路由器上，并且确认是活跃的，那么对应的LED会亮起 ❷。如果找不到该IP地址，则说明设备没有找到，LED会熄灭。
- en: Finally, you set up the button to initiate the shutdown sequence ❸. You set
    this to GPIO pin 16 (if you used a different pin, make sure you put that GPIO
    pin number here).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你设置了按钮来启动关机序列 ❸。你将其设置为GPIO引脚16（如果你使用了不同的引脚，确保在这里填写相应的GPIO引脚编号）。
- en: The value in `hold_time` refers to how long the button must be held down to
    trigger the shutdown sequence ❹. This program sets the time to 2 seconds so that
    accidentally pressing the button for a moment won’t shut down the program. (You
    have to hold the button down for at least 2 seconds.) The `when_held` checks whether
    the button is being pressed and runs the function to shut down the Raspberry Pi
    and turn off the status board if it is.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`hold_time`中的值指的是按钮必须按住多久才能触发关机序列 ❹。这个程序将时间设置为2秒，以防止误按按钮导致程序关闭。（你必须至少按住按钮2秒钟。）`when_held`检查按钮是否被按下，如果是，它会运行关机功能，关闭树莓派并关闭状态板。'
- en: Finally, use `pause()` ❺ to keep the program looping forever. That concludes
    the main program structure and status board hardware setup!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用`pause()` ❺使程序永远循环。这就完成了主程序结构和状态板硬件的设置！
- en: Running the Program
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运行程序
- en: Let’s give it a whirl! To check that the program code is working correctly,
    press **F5**. This will prompt you to save your program, and then it will execute.
    Depending on who is around and which devices are connected, you should see some
    of the LEDs light up.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试看！要检查程序代码是否正常工作，按下**F5**。这将提示你保存程序，然后执行。根据周围的人和连接的设备，你应该能看到一些LED灯亮起。
- en: Make sure your own device is on and connected to the router. To test whether
    the code is responding, turn off your device or set it to flight mode. You should
    see your own LED turn off! Remember that the code runs once a minute, so it might
    not turn off straight away.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的设备已开机并连接到路由器。为了测试代码是否响应，关闭你的设备或设置为飞行模式。你应该会看到自己的LED灯熄灭！记住，代码每分钟运行一次，所以可能不会立即熄灭。
- en: Troubleshooting
  id: totrans-117
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 故障排除
- en: 'If the status board doesn’t appear to work correctly, check for these common
    culprits:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果状态板似乎无法正常工作，检查以下常见问题：
- en: Are any devices connected to the router?
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是否有设备连接到路由器？
- en: Are your LEDs faulty?
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的LED灯有故障吗？
- en: Have you wired up the LEDs correctly? (Check that the positive/negative legs
    are connected the correct way.)
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你是否正确连接了LED灯？（检查正负极脚是否正确连接。）
- en: Does the LED pin number match the pin number used in the code?
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LED引脚编号是否与代码中使用的引脚编号匹配？
- en: Are you using the right IP address for each user in your house?
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你是否为家中每个用户使用了正确的IP地址？
- en: Is the correct LED assigned to the correct user?
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是否将正确的LED分配给了正确的用户？
- en: SETTING UP THE CODE TO RUN AUTOMATICALLY
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置代码自动运行
- en: The last step of the project is to configure the program to run automatically
    so that your status board responds when the Raspberry Pi boots up. Once you have
    your program working and the status board functioning correctly, you can remove
    your monitor and attach the Raspberry Pi to the status board. Then, to start up
    the status board, simply plug in the power to your Raspberry Pi. To turn it off,
    press the shutdown button or touch the two wires together, and your Raspberry
    Pi will start the process of shutting down.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的最后一步是配置程序以便自动运行，这样您的状态板在 Raspberry Pi 启动时会做出响应。一旦您的程序正常工作，状态板也能正常运行，您可以移除显示器并将
    Raspberry Pi 连接到状态板上。然后，要启动状态板，只需插入 Raspberry Pi 的电源。要关闭它，按下关机按钮或将两根电线触碰在一起，您的
    Raspberry Pi 将开始关闭过程。
- en: Using Cron to Autostart the Program
  id: totrans-127
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 Cron 自动启动程序
- en: To start up your status board automatically, you need to schedule the Python
    program to execute on boot-up. This uses *cron*, a simple time-based job-scheduling
    tool named after the Greek word for time, *chronos*. This tool enables you to
    create rules for triggering tasks automatically at specific times. For example,
    you might set rules to download files every hour, run an update every day at 4
    PM, or send an email at the same time each week.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要使状态板在启动时自动启动，您需要安排 Python 程序在启动时执行。这使用了*cron*，一个基于时间的简单作业调度工具，其名称源自希腊语“时间”（*chronos*）。该工具使您能够创建规则，在特定时间自动触发任务。例如，您可以设置规则，每小时下载文件，每天下午
    4 点运行更新，或每周同一时间发送电子邮件。
- en: You create these rules in a *crontab* (short for *cron table*) file, a simple
    text file that contains the task’s instructions and, most important, the time
    to trigger the task.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 您在一个*crontab*（*cron 表*的缩写）文件中创建这些规则，这是一个包含任务指令的简单文本文件，最重要的是，包含触发任务的时间。
- en: Before you add this task to the crontab file, you need to know where your *wifi_spy.py*
    program is saved in your Pi system. Unless you saved yours somewhere in particular,
    this location will probably be */home/pi/wifi_spy.py*. Note the correct file path
    of *wifi_spy.**py*, and then you’ll edit the crontab.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在将此任务添加到 crontab 文件之前，您需要知道 *wifi_spy.py* 程序在 Pi 系统中的保存位置。除非您将文件保存到了某个特定位置，否则该位置可能是
    */home/pi/wifi_spy.py*。请注意正确的文件路径 *wifi_spy.py*，然后您可以编辑 crontab。
- en: 'Open the terminal and enter this:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并输入以下命令：
- en: '[PRE8]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will open the cron console ([Figure 9-7](ch09.xhtml#ch09fig07)).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开 cron 控制台（[图 9-7](ch09.xhtml#ch09fig07)）。
- en: '![Image](../images/09fig07.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/09fig07.jpg)'
- en: '**FIGURE 9-7** The crontab'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9-7** crontab'
- en: The terminal should give you three methods of editing the cron file. Select
    option 2 to open the nano text editor—you’ll use this because it’s the simplest.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 终端应该给您三种编辑 cron 文件的方法。选择选项 2 以打开 nano 文本编辑器——您将使用此编辑器，因为它最简单。
- en: This should open the cron file in nano, and you should see a load of code already
    there that looks something like [Listing 9-6](ch09.xhtml#ch09ex06).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会在 nano 中打开 cron 文件，您应该会看到其中已有的一些代码，看起来类似于[清单 9-6](ch09.xhtml#ch09ex06)。
- en: '[PRE9]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**LISTING 9-6** Startup code in the crontab file'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 9-6** crontab 文件中的启动代码'
- en: 'Scroll to the bottom of the text and locate the black space, and right at the
    end add the following line of code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 向下滚动到文本底部，找到黑色区域，在最后添加以下代码行：
- en: '[PRE10]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The command is easy to understand: it states that on rebooting the Raspberry
    Pi, run Python in super user mode, open the *home/**pi* folder, and execute the
    program called *wifi_spy.py*. Make sure that you replace the filename with the
    name of your file, if required, and that the correct folder path is used.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令很容易理解：它声明在 Raspberry Pi 重启时，以超级用户模式运行 Python，打开*home/**pi* 文件夹，并执行名为 *wifi_spy.py*
    的程序。确保如果需要，您将文件名替换为您的文件名，并且使用正确的文件夹路径。
- en: The `&` syntax at the end of the line of code is telling cron to run your program
    in the background so you can still do other things with your Raspberry Pi.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 代码行末尾的 `&` 语法告诉 cron 在后台运行您的程序，这样您仍然可以用 Raspberry Pi 做其他事情。
- en: Once you have checked the code you added to the crontab file and are confident
    that it’s correct, press CTRL-X to save and exit the file. Now, each time you
    boot up or reboot your Raspberry Pi, the crontab file will run and execute the
    status board program.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您检查过添加到 crontab 文件中的代码并确认它正确无误，请按 CTRL-X 保存并退出文件。现在，每次启动或重启 Raspberry Pi 时，crontab
    文件都会运行并执行状态板程序。
- en: If you ever want to stop the program from automatically running, open the crontab
    file again from the terminal by using `crontab –e`, and comment out or delete
    the line of code that you added. Then save the file and reboot.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想停止程序自动运行，可以通过终端再次打开 crontab 文件，使用 `crontab –e`，然后注释掉或删除你添加的那行代码。接着保存文件并重启。
- en: Rebooting to the Command Line
  id: totrans-146
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 重启到命令行
- en: 'Because the status board is designed to run *headless* (without a screen or
    monitor), you don’t need the Raspberry Pi to boot to the desktop, as this takes
    longer and will use more memory and processing power than is necessary. Instead,
    you’ll configure the Pi to boot to the command line. Open the terminal window
    and enter this:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 由于状态板设计为 *无头模式*（没有屏幕或显示器），你不需要让 Raspberry Pi 启动到桌面环境，因为这会消耗更多的时间、内存和处理能力。相反，你可以配置
    Pi 启动到命令行界面。打开终端窗口并输入以下命令：
- en: '[PRE11]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This should bring up the Configuration tool in your terminal, as shown in [Figure
    9-8](ch09.xhtml#ch09fig08). Select the third option, **3** **Boot Options**, and
    press ENTER. Then select **B1 Desktop / CLI** and then the **B1 Console** option.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示终端中的配置工具，如 [图 9-8](ch09.xhtml#ch09fig08) 所示。选择第三个选项，**3** **启动选项**，然后按回车。接着选择
    **B1 桌面 / CLI**，再选择 **B1 控制台** 选项。
- en: '![Image](../images/09fig08.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/09fig08.jpg)'
- en: '**FIGURE 9-8** Booting to the command line option'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9-8** 启动到命令行选项'
- en: Once this is set, use the down arrow key to select **<Finish>** and press ENTER.
    You’ll be prompted to save the config file and reboot. Select **Yes**, and your
    Pi will restart. When it boots up again, the status board program should load.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 设置完成后，使用下方向键选择 **<Finish>** 并按回车。系统会提示你保存配置文件并重启。选择 **Yes**，你的 Pi 将会重启。重启后，状态板程序应该会加载。
- en: Now for a visual indicator of who is around, plug in the power source, and your
    status board will tell you. You may need to wait a minute or two while the Pi
    connects to the router. Remove the HDMI cable from your Raspberry Pi, as you’re
    now truly headless!
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了显示周围的人员信息，插入电源，你的状态板会告诉你。你可能需要等待一两分钟，直到 Pi 连接到路由器。移除 Raspberry Pi 上的 HDMI
    电缆，因为你现在真正处于无头模式！
- en: TRACKING DEVICES WITH BLUETOOTH
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用蓝牙跟踪设备
- en: In this section, you’ll look at how to spy on who is around by using Bluetooth
    instead of Wi-Fi. Similar to the way you used IP addresses to track devices, you
    can use the Raspberry Pi to scan for Bluetooth data transmissions and retrieve
    the address of the device. This address can then be used to trigger the relevant
    LED on your status board.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，你将学习如何通过蓝牙而不是 Wi-Fi 跟踪周围的设备。类似于你使用 IP 地址来跟踪设备的方式，你可以使用 Raspberry Pi 扫描蓝牙数据传输并获取设备的地址。然后，可以使用这个地址触发状态板上的相关
    LED 灯。
- en: What Is Bluetooth?
  id: totrans-156
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 什么是蓝牙？
- en: '*Bluetooth* is the industry name for the standard range of radio waves between
    2.402 and 2.480 GHz, used to enable devices to communicate wirelessly with each
    other over short distances of around 100–200 m. As with all technology, Bluetooth
    is always evolving, and the latest Bluetooth 4 technology can communicate over
    distances up to 200 m. Bluetooth requires little battery power, making it ideal
    for use on mobile devices.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '*蓝牙* 是行业中对 2.402 至 2.480 GHz 范围内的无线电波的标准名称，用于让设备在短距离（大约 100-200 米）内无线通信。像所有技术一样，蓝牙也在不断发展，最新的蓝牙
    4 技术可以实现最远 200 米的通信。蓝牙功耗低，非常适合在移动设备上使用。'
- en: Every device with Bluetooth is assigned its own unique address, with the format
    D2:72:F6:87:D2:8A. Because each address is unique to the device, if you get the
    address and know who owns each device, you can track people! From a security perspective,
    I recommend you remove or edit the addresses if you intend to share your program
    code or show others how it works.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 每个蓝牙设备都有自己独特的地址，格式为 D2:72:F6:87:D2:8A。因为每个地址都是设备独有的，所以如果你获得了地址并知道每个设备的拥有者，就可以追踪到人员！从安全角度考虑，如果你打算分享程序代码或向他人展示如何使用，建议你删除或编辑这些地址。
- en: Turning On the Raspberry Pi Bluetooth
  id: totrans-159
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 打开 Raspberry Pi 蓝牙
- en: The Raspberry Pi and Pi Zero W both come with Bluetooth hardware ready. If you
    have an older model Pi, you can still use this hack, but you’ll need to purchase
    a Bluetooth USB dongle and attach it via one of the USB ports.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi 和 Pi Zero W 都自带蓝牙硬件。如果你使用的是旧款 Pi，仍然可以使用这个方法，但你需要购买一个蓝牙 USB 加密狗并通过
    USB 端口连接。
- en: To turn on Bluetooth on your Pi, locate the standard Bluetooth symbol at the
    top right of the desktop, click the symbol, and select **Turn On Bluetooth**.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Pi上打开Bluetooth，找到桌面右上角的标准Bluetooth图标，点击该图标，然后选择**打开Bluetooth**。
- en: The good news is that to find Bluetooth-enabled devices nearby, you don’t need
    to be connected to them–that would be a bit of a giveaway. If you have your own
    device handy, turn on and enable Bluetooth. Then return to your Pi, click the
    Bluetooth icon, and select the option **Make Discoverable**. The Bluetooth icon
    will start flashing green. Click the Bluetooth icon again and select the **Add
    Devices** option. A new window should open, and the Bluetooth hardware will begin
    scanning and searching for devices. Eventually, you’ll end up with a list of all
    nearby devices with Bluetooth enabled!
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，为了找到附近的Bluetooth设备，你不需要与它们连接——否则就有点暴露了。如果你手头有自己的设备，打开并启用Bluetooth。然后返回到你的Pi，点击Bluetooth图标，选择**使设备可发现**选项。Bluetooth图标会开始闪烁绿色。再次点击Bluetooth图标，选择**添加设备**选项。一个新窗口应该会打开，Bluetooth硬件将开始扫描并寻找设备。最终，你将得到一份所有启用了Bluetooth的附近设备的列表！
- en: To collect Bluetooth addresses for the devices, you’ll write a simple Python
    script as you did when searching for IP addresses. The program scans for addresses,
    adds each address to a list, and then prints the list to the Python console. First
    you need to install some libraries.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 为了收集设备的Bluetooth地址，你将编写一个简单的Python脚本，就像你搜索IP地址时做的一样。该程序会扫描地址，将每个地址添加到列表中，然后将列表打印到Python控制台。首先，你需要安装一些库。
- en: 'To install the required Python libraries, open the terminal window and enter
    the following commands:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装所需的Python库，打开终端窗口并输入以下命令：
- en: '[PRE12]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When the three programs have finished downloading and installing, reboot your
    Raspberry Pi.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当这三个程序下载并安装完成后，重启你的Raspberry Pi。
- en: So let’s see which Bluetooth-enabled devices are in your home. Open a new Python
    file and copy the program in [Listing 9-7](ch09.xhtml#ch09ex07). Save it as *bluetooth_finder.py*.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们看看你家里有哪些支持Bluetooth的设备。打开一个新的Python文件，复制[Listing 9-7](ch09.xhtml#ch09ex07)中的程序。保存为*bluetooth_finder.py*。
- en: '[PRE13]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**LISTING 9-7** Using Bluetooth to discover devices'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 9-7** 使用Bluetooth发现设备'
- en: This code controls the Bluetooth hardware to search for nearby devices that
    are transmitting a Bluetooth signal. Then it creates a nicely organized list of
    the addresses and prints them out.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码控制Bluetooth硬件来搜索附近传输Bluetooth信号的设备。然后，它会创建一个组织良好的地址列表，并将其打印出来。
- en: The output should look something like [Listing 9-8](ch09.xhtml#ch09ex08).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该类似于[Listing 9-8](ch09.xhtml#ch09ex08)中的内容。
- en: '[PRE14]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**LISTING 9-8** Output from scan'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 9-8** 扫描输出'
- en: Once you have the program copied, you can use it to copy and paste the addresses
    or write them down to use them for your status board. Remember to check which
    address corresponds with which device, and carry out a little testing to ensure
    that you have the correct address for each person.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你复制了程序，可以用它复制并粘贴地址，或者将其写下来用于你的状态板。记得检查每个地址对应的是哪个设备，并进行一些测试，以确保你为每个人都找到了正确的地址。
- en: Writing the Status Board Code
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写状态板代码
- en: Now that you can locate Bluetooth devices and you have addresses for nearby
    devices, you can use these as ID codes to trigger the LEDs on your status board.
    This code will come in a few pieces so I can explain how each bit works. First,
    let’s set up some essentials.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以定位Bluetooth设备，并且你已经拥有了附近设备的地址，可以将这些地址用作ID代码，触发状态板上的LED。代码会分几部分给出，以便我能逐步解释每一部分的工作原理。首先，让我们设置一些基本内容。
- en: Importing and Setting Up the LEDs
  id: totrans-177
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 导入并设置LED
- en: Let’s import the packages you need and set up the LEDs. Copy the program code
    in [Listing 9-9](ch09.xhtml#ch09ex09) into a new Python file and name it *bluetooth_status_board.py*.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们导入所需的包并设置LED。将[Listing 9-9](ch09.xhtml#ch09ex09)中的程序代码复制到一个新的Python文件中，并命名为*bluetooth_status_board.py*。
- en: '[PRE15]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**LISTING 9-9** The first part of the Bluetooth status board code'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 9-9** Bluetooth状态板代码的第一部分'
- en: Start the program by importing the `Bluetooth` library, followed by the `LED`
    and `Button` classes to control the status LEDs and the shutdown button ❶, respectively.
    Then import the `subprocess` library so you can use `check_call()` from the terminal,
    as you did with the Wi-Fi version. Use the `sleep()` function to add delays or
    pauses in the program.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 通过导入`Bluetooth`库启动程序，然后依次导入控制状态LED和关机按钮❶的`LED`和`Button`类。接着导入`subprocess`库，以便你能像Wi-Fi版本中那样从终端使用`check_call()`。使用`sleep()`函数为程序添加延迟或暂停。
- en: Next, create the `shutdown()` function ❷ and have it use `check_call()` to call
    the command `sudo shutdown` from the terminal, which will tell the Raspberry Pi
    to power off ❸.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，创建`shutdown()`函数 ❷，并让它使用`check_call()`来调用终端命令`sudo shutdown`，这将指示树莓派关机 ❸。
- en: Then assign each LED on the status board to a GPIO pin ❹. You also assign the
    button to pin 16.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将状态板上的每个LED分配给一个GPIO引脚 ❹。你还将按钮分配给引脚16。
- en: Adding the Searching Code
  id: totrans-184
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 添加搜索代码
- en: Now you’ll add the code to search for the Bluetooth addresses you collected!
    You’ll use the searching code from [Listing 9-7](ch09.xhtml#ch09ex07) to find
    devices that have Bluetooth enabled and then turn on the status board LED if the
    corresponding Bluetooth address is found. Add the code in [Listing 9-10](ch09.xhtml#ch09ex10)
    to the bottom of your current *bluetooth_sta**tus_board.py* file.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将添加代码来搜索你收集的蓝牙地址！你将使用[Listing 9-7](ch09.xhtml#ch09ex07)中的搜索代码来查找已启用蓝牙的设备，然后如果找到对应的蓝牙地址，将点亮状态板上的LED。将[Listing
    9-10](ch09.xhtml#ch09ex10)中的代码添加到你当前的*bluetooth_status_board.py*文件底部。
- en: '[PRE16]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**LISTING 9-10** Searching for your first two addresses'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 9-10** 搜索你的前两个地址'
- en: First, add the code to detect nearby Bluetooth devices and create a list of
    the found addresses ❶. This time you don’t need to print this data, so comment
    out the print lines.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，添加代码以检测附近的蓝牙设备并创建一个已找到的地址列表 ❶。这次你不需要打印这些数据，所以可以注释掉打印语句。
- en: Then search for the particular addresses you found earlier! As with the IP addresses,
    assign a particular Bluetooth address to a variable (using the name of the person
    the Bluetooth address belongs to as the variable name), look up the Bluetooth
    address ❷, and add a time delay of 5 seconds to allow the devices to send and
    receive the required data.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 然后搜索你之前找到的特定地址！与IP地址一样，将特定的蓝牙地址分配给一个变量（使用蓝牙地址所属人的名字作为变量名），查找蓝牙地址 ❷，并添加一个5秒的延迟，以允许设备发送和接收所需的数据。
- en: The next line ❸ checks whether the address for the target associated with LED
    1 (in this case, `liz`) has been discovered, meaning the device is present in
    the house. If the address has been found, the value for the variable will not
    be `None`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行 ❸ 检查是否已发现与LED 1（此处为`liz`）关联的目标地址，意味着该设备已出现在房间内。如果已找到该地址，则变量的值不为`None`。
- en: The line at ❹ is for testing purposes and can be commented out of your final
    program. If the Bluetooth address has been found, the corresponding LED, the first
    LED on the status board, will be turned on using `led1.on()` ❺.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 第❹行用于测试，可以从最终程序中注释掉。如果已找到蓝牙地址，状态板上的第一个LED灯将使用`led1.on()` ❺点亮。
- en: If the Bluetooth address isn’t found during the search, the LED is set to off,
    and the program passes on to the next check ❻.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在搜索过程中没有找到蓝牙地址，LED灯将关闭，程序将继续进行下一个检查 ❻。
- en: Adding More Targets
  id: totrans-193
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 添加更多目标
- en: To add more targets, copy [Listing 9-11](ch09.xhtml#ch09ex11) and paste it into
    your program again, changing the Bluetooth address to another you found and also
    remembering to change the variable name and the LED number. Keep the same level
    of indentation on these lines of code.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加更多目标，请复制[Listing 9-11](ch09.xhtml#ch09ex11)，并将其粘贴到你的程序中，改变蓝牙地址为你找到的另一个地址，同时记得更改变量名和LED编号。保持这些代码行的缩进级别不变。
- en: '[PRE17]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**LISTING 9-11** Adding more targets'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 9-11** 添加更多目标'
- en: If you have fewer devices, you can use fewer targets in your code, or you can
    use your own Bluetooth address multiple times to test that the wiring and the
    LEDs are functioning correctly.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设备较少，你可以在代码中使用更少的目标，或者可以多次使用你自己的蓝牙地址来测试电路和LED是否正常工作。
- en: Shutting Down
  id: totrans-198
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 关闭程序
- en: The concluding section of the code, shown in [Listing 9-12](ch09.xhtml#ch09ex12),
    sets up the shutdown button.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的结尾部分，显示在[Listing 9-12](ch09.xhtml#ch09ex12)，设置了关闭按钮。
- en: '[PRE18]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**LISTING 9-12** Setting up the shutdown button'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 9-12** 设置关闭按钮'
- en: Add the `if button.is_pressed:` code to check whether the button has been pressed
    ❶. If it has, the `shutdown()` function will run ❷. This will turn the status
    board off, and your Raspberry Pi will shut down.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`if button.is_pressed:`代码来检查按钮是否被按下 ❶。如果按下，`shutdown()`函数将执行 ❷。这将关闭状态板，且树莓派将关闭。
- en: This completes the code for using Bluetooth addresses to trigger your status
    board. Now save the program code and test that it’s working correctly. You might
    also want to edit the crontab file by using the instructions in “Using Cron to
    Autostart the Program” on [page 155](ch09.xhtml#page_155) so that this program
    runs on startup instead of the IP address finder. To ensure accuracy, run either
    the IP or the Bluetooth search, and not both at the same time.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了使用蓝牙地址来触发状态板的代码。现在保存程序代码并测试它是否正常工作。你还可能希望通过使用“使用 Cron 自动启动程序”部分中的指示来编辑 crontab
    文件，[页面 155](ch09.xhtml#page_155)，让该程序在启动时运行，而不是 IP 地址查找器。为了确保准确性，请分别运行 IP 查找器或蓝牙查找器，而不是同时运行两者。
- en: Well done! You’ve used either Wi-Fi and IP addresses to track a mobile device
    or Bluetooth to get information about the devices that are near you. Or you may
    have done both! You then created a visual status board on which an LED lights
    up only whenever a particular device is located, meaning that the owner of the
    device is likely nearby. Once you’ve added pictures or written the names of the
    people who own each device, you now have a nice, easy way to see who is about.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 做得好！你已经使用了 Wi-Fi 和 IP 地址来追踪移动设备，或者通过蓝牙获取附近设备的信息。或者你可能两者都使用了！然后你创建了一个视觉状态板，只有当某个特定设备被定位时，LED
    灯才会亮起，这意味着该设备的所有者可能就在附近。一旦你添加了设备所有者的照片或写下他们的名字，你就能轻松地看到谁在附近。
- en: WRAPPING UP
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: 'Once your status board is up and running, you may want to add features to the
    project. To get your inventive juices flowing, you could try some of the following:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的状态板开始运行，你可能想为这个项目添加更多功能。为了激发你的创造力，你可以尝试以下一些内容：
- en: Assign different colors for each target.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个目标分配不同的颜色。
- en: Add more LEDs.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加更多 LED。
- en: Make the LEDs flash.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让 LED 闪烁。
- en: Build a bigger status board.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建一个更大的状态板。
- en: Add a sound that plays when a device is detected.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备被检测到时播放声音。
