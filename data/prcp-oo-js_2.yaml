- en: Chapter 2. Functions
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第二章 函数
- en: As discussed in [Chapter 1](ch01.html "Chapter 1. Primitive and Reference Types"),
    functions are actually objects in JavaScript. The defining characteristic of a
    function—what distinguishes it from any other object—is the presence of an *internal
    property* named `[[Call]]`. Internal properties are not accessible via code but
    rather define the behavior of code as it executes. ECMAScript defines multiple
    internal properties for objects in JavaScript, and these internal properties are
    indicated by double-square-bracket notation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [第一章](ch01.html "第一章：原始类型和引用类型") 中所讨论的，函数实际上是 JavaScript 中的对象。函数的定义特征——将其与其他对象区分开来——是存在一个名为
    `[[Call]]` 的 *内部属性*。内部属性无法通过代码访问，而是定义了代码执行时的行为。ECMAScript 为 JavaScript 中的对象定义了多个内部属性，这些内部属性通过双中括号表示。
- en: The `[[Call]]` property is unique to functions and indicates that the object
    can be executed. Because only functions have this property, the `typeof` operator
    is defined by ECMAScript to return `"function"` for any object with a `[[Call]]`
    property. That led to some confusion in the past, because some browsers also included
    a `[[Call]]` property for regular expressions, which were thus incorrectly identified
    as functions. All browsers now behave the same, so `typeof` no longer identifies
    regular expressions as functions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`[[Call]]` 属性是函数特有的，表示该对象可以被执行。因为只有函数具有这个属性，所以 ECMAScript 定义了 `typeof` 运算符，对于任何具有
    `[[Call]]` 属性的对象，`typeof` 返回 `"function"`。这曾导致一些混淆，因为某些浏览器也为正则表达式添加了 `[[Call]]`
    属性，因此它们被错误地识别为函数。现在所有浏览器的行为一致，所以 `typeof` 不再将正则表达式识别为函数。'
- en: This chapter discusses the various ways that functions are defined and executed
    in JavaScript. Because functions are objects, they behave differently than functions
    in other languages, and this behavior is central to a good understanding of JavaScript.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了在 JavaScript 中定义和执行函数的各种方式。由于函数是对象，它们的行为与其他语言中的函数不同，这种行为对于深入理解 JavaScript
    至关重要。
- en: Declarations vs. Expressions
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明与表达式
- en: 'There are actually two literal forms of functions. The first is a *function
    declaration*, which begins with the `function` keyword and includes the name of
    the function immediately following it. The contents of the function are enclosed
    in braces, as shown in this declaration:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上有两种字面量形式的函数。第一种是 *函数声明*，它以 `function` 关键字开头，并紧接着是函数的名称。函数的内容被包含在大括号中，如下面的声明所示：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The second form is a *function expression*, which doesn’t require a name after
    `function`. These functions are considered anonymous because the function object
    itself has no name. Instead, function expressions are typically referenced via
    a variable or property, as in this expression:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种形式是 *函数表达式*，它不需要在 `function` 后面指定名称。这些函数被视为匿名函数，因为函数对象本身没有名称。相反，函数表达式通常通过变量或属性进行引用，如以下表达式所示：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code actually assigns a function value to the variable `add`. The function
    expression is almost identical to the function declaration except for the missing
    name and the semicolon at the end. Assignment expressions typically end with a
    semicolon, just as if you were assigning any other value.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码实际上将一个函数值赋给了变量 `add`。函数表达式与函数声明几乎相同，唯一不同的是缺少名称和结尾的分号。赋值表达式通常以分号结束，就像你在赋值任何其他值时一样。
- en: 'Although these two forms are quite similar, they differ in a very important
    way. Function declarations are *hoisted* to the top of the context (either the
    function in which the declaration occurs or the global scope) when the code is
    executed. That means you can actually define a function after it is used in code
    without generating an error. For example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这两种形式非常相似，但它们在一个非常重要的方面有所不同。函数声明会在代码执行时被 *提升* 到上下文的顶部（无论是函数内部还是全局作用域）。这意味着你实际上可以在代码中使用函数之后再定义它，而不会产生错误。例如：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This code might look like it will cause an error, but it works just fine. That’s
    because the JavaScript engine hoists the function declaration to the top and actually
    executes the code as if it were written like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码看起来像是会导致错误，但实际上它是可以正常运行的。这是因为 JavaScript 引擎将函数声明提升到顶部，并实际上按照如下方式执行代码：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Function hoisting happens only for function declarations because the function
    name is known ahead of time. Function expressions, on the other hand, cannot be
    hoisted because the functions can be referenced only through a variable. So this
    code causes an error:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 函数提升只会发生在函数声明中，因为函数名在使用之前是已知的。另一方面，函数表达式不能提升，因为这些函数只能通过变量来引用。因此，以下代码会导致错误：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As long as you always define functions before using them, you can use either
    function declarations or function expressions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 只要你始终在使用函数之前定义它们，就可以使用函数声明或函数表达式。
- en: Functions as Values
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数作为值
- en: 'Because JavaScript has first-class functions, you can use them just as you
    do any other objects. You can assign them to variables, add them to objects, pass
    them to other functions as arguments, and return them from functions. Basically,
    you can use a function anywhere you would use any other reference value. This
    makes JavaScript functions incredibly powerful. Consider the following example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 JavaScript 具有一等函数，你可以像使用其他对象一样使用它们。你可以将它们赋值给变量，添加到对象中，将它们作为参数传递给其他函数，甚至从函数中返回。基本上，你可以在任何需要引用值的地方使用函数。这使得
    JavaScript 的函数功能极其强大。考虑以下示例：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this code, there is a function declaration for `sayHi` ❶. A variable named
    `sayHi2` is then created and assigned the value of `sayHi` ❷. Both `sayHi` and
    `sayHi2` are now pointing to the same function, and that means either can be executed,
    with the same result. To understand why this happens, take a look at the same
    code rewritten to use the `Function` constructor:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，`sayHi` ❶ 是一个函数声明。接着，创建了一个名为 `sayHi2` 的变量，并将 `sayHi` 的值赋给它 ❷。此时，`sayHi`
    和 `sayHi2` 都指向同一个函数，这意味着两者都可以执行，且结果相同。为了理解为什么会这样，请看一下重写后的代码，使用了 `Function` 构造器：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `Function` constructor makes it more explicit that `sayHi` can be passed
    around just like any other object. When you keep in mind that functions are objects,
    a lot of the behavior starts to make sense.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`Function` 构造器使得 `sayHi` 可以像其他对象一样被传递得更加明确。当你记住函数也是对象时，许多行为就开始变得有意义。'
- en: For instance, you can pass a function into another function as an argument.
    The `sort()` method on JavaScript arrays accepts a comparison function as an optional
    parameter. The comparison function is called whenever two values in the array
    must be compared. If the first value is smaller than the second, the comparison
    function must return a negative number. If the first value is larger than the
    second, the function must return a positive number. If the two values are equal,
    the function should return zero.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以将一个函数作为参数传递给另一个函数。JavaScript 数组上的 `sort()` 方法接受一个可选的比较函数作为参数。每当数组中的两个值需要进行比较时，都会调用该比较函数。如果第一个值小于第二个值，比较函数必须返回一个负数。如果第一个值大于第二个值，函数必须返回一个正数。如果两个值相等，函数应该返回零。
- en: 'By default, `sort()` converts every item in an array to a string and then performs
    a comparison. That means you can’t accurately sort an array of numbers without
    specifying a comparison function. For example, you need to include a comparison
    function to accurately sort an array of numbers, such as:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`sort()` 会将数组中的每个项转换为字符串，然后进行比较。这意味着在没有指定比较函数的情况下，你无法准确地对数字数组进行排序。例如，你需要提供一个比较函数来准确排序数字数组，例如：
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example, the comparison function ❶ that is passed into `sort()` is actually
    a function expression. Note that there is no name for the function; it exists
    only as a reference that is passed into another function (making it an *anonymous
    function*). Subtracting the two values returns the correct result from the comparison
    function.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，传入 `sort()` 的比较函数 ❶ 实际上是一个函数表达式。注意，这个函数没有名称，它只是作为引用传递给另一个函数（因此它是一个*匿名函数*）。通过减去两个值，可以从比较函数中返回正确的结果。
- en: Compare that to the second call to `sort()` ❷, which does not use a comparison
    function. The order of the array is different than expected, as 1 is followed
    by 10\. This is because the default comparison converts all values to strings
    before comparing them.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 将其与第二次调用 `sort()` ❷ 进行比较，后者没有使用比较函数。数组的顺序与预期不同，因为 1 后面跟着 10。这是因为默认的比较会在比较之前将所有值转换为字符串。
- en: Parameters
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数
- en: Another unique aspect of JavaScript functions is that you can pass any number
    of parameters to any function without causing an error. That’s because function
    parameters are actually stored as an array-like structure called `arguments`.
    Just like a regular JavaScript array, `arguments` can grow to contain any number
    of values. The values are referenced via numeric indices, and there is a `length`
    property to determine how many values are present.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 函数的另一个独特之处在于，你可以向任何函数传递任意数量的参数，而不会导致错误。这是因为函数的参数实际上是以类似数组的结构 `arguments`
    存储的。就像常规的 JavaScript 数组一样，`arguments` 可以增长以包含任意数量的值。可以通过数字索引引用这些值，并且有一个 `length`
    属性来确定有多少个值存在。
- en: The `arguments` object is automatically available inside any function. This
    means named parameters in a function exist mostly for convenience and don’t actually
    limit the number of arguments that a function can accept.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`arguments` 对象在任何函数内部都是自动可用的。这意味着函数中的命名参数主要是为了方便，而并不会真正限制函数可以接受的参数数量。'
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*The arguments object is not an instance of Array and therefore doesn’t have
    the same methods as an array; Array.isArray(arguments) always returns false.*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*`arguments` 对象不是 Array 的实例，因此没有与数组相同的方法；Array.isArray(arguments) 总是返回 false。*'
- en: On the other hand, JavaScript doesn’t ignore the named parameters of a function
    either. The number of arguments a function expects is stored on the function’s
    `length` property. Remember, a function is actually just an object, so it can
    have properties. The `length` property indicates the function’s *arity*, or the
    number of parameters it expects. Knowing the function’s arity is important in
    JavaScript because functions won’t throw an error if you pass in too many or too
    few parameters.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，JavaScript 并不会忽略函数的命名参数。函数期望的参数个数存储在函数的 `length` 属性中。记住，函数实际上只是一个对象，因此它可以拥有属性。`length`
    属性表示函数的*参数个数*，即它期望的参数数量。在 JavaScript 中，了解函数的参数个数很重要，因为如果传入的参数过多或过少，函数并不会抛出错误。
- en: 'Here’s a simple example using `arguments` and function arity; note that the
    number of arguments passed to the function has no effect on the reported arity:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个使用 `arguments` 和函数参数个数的简单示例；请注意，传递给函数的参数个数不会影响报告的参数个数：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This example first defines the `reflect()` function using a single named parameter,
    but there is no error when a second parameter is passed into the function. Also,
    the `length` property is `1` because there is a single named parameter. The `reflect()`
    function is then redefined with no named parameters; it returns `arguments[0]`,
    which is the first argument that is passed in. This new version of the function
    works exactly the same as the previous version, but its `length` is `0`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例首先使用单个命名参数定义了 `reflect()` 函数，但当传入第二个参数时并不会报错。此外，`length` 属性为 `1`，因为有一个命名参数。然后，`reflect()`
    函数被重新定义为没有命名参数；它返回 `arguments[0]`，即传入的第一个参数。这个新版本的函数与之前的版本完全相同，但它的 `length` 为
    `0`。
- en: The first implementation of `reflect()` is much easier to understand because
    it uses a named argument (as you would in other languages). The version that uses
    the `arguments` object can be confusing because there are no named arguments,
    and you must read the body of the function to determine if arguments are used.
    That is why many developers prefer to avoid using `arguments` unless necessary.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`reflect()` 的第一次实现更容易理解，因为它使用了命名参数（就像在其他语言中一样）。使用 `arguments` 对象的版本可能会让人困惑，因为没有命名参数，必须阅读函数体才能确定是否使用了参数。这就是为什么许多开发人员除非必要，否则倾向于避免使用
    `arguments`。'
- en: Sometimes, however, using `arguments` is actually more effective than naming
    parameters. For instance, suppose you want to create a function that accepts any
    number of parameters and returns their sum. You can’t use named parameters because
    you don’t know how many you will need, so in this case, using `arguments` is the
    best option.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时使用 `arguments` 实际上比命名参数更有效。例如，假设你想创建一个函数，接受任意数量的参数并返回它们的和。你无法使用命名参数，因为你不知道需要多少个参数，因此在这种情况下，使用
    `arguments` 是最佳选择。
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `sum()` function accepts any number of parameters and adds them together
    by iterating over the values in `arguments` with a `while` loop. This is exactly
    the same as if you had to add together an array of numbers. The function even
    works when no parameters are passed in, because `result` is initialized with a
    value of `0`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`sum()` 函数接受任意数量的参数，并通过使用 `while` 循环遍历 `arguments` 中的值将它们加在一起。这与你必须将一组数字相加是完全相同的。即使没有传入参数，该函数也能正常工作，因为
    `result` 初始化为 `0`。'
- en: Overloading
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重载
- en: Most object-oriented languages support *function overloading*, which is the
    ability of a single function to have multiple *signatures*. A function signature
    is made up of the function name plus the number and type of parameters the function
    expects. Thus, a single function can have one signature that accepts a single
    string argument and another that accepts two numeric arguments. The language determines
    which version of a function to call based on the arguments that are passed in.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数面向对象的语言支持 *函数重载*，即单个函数可以拥有多个 *签名*。函数签名由函数名称加上函数期望的参数数量和类型组成。因此，一个函数可以有一个接受单个字符串参数的签名，也可以有一个接受两个数字参数的签名。语言会根据传入的参数来确定调用哪个版本的函数。
- en: 'As mentioned previously, JavaScript functions can accept any number of parameters,
    and the types of parameters a function takes aren’t specified at all. That means
    JavaScript functions don’t actually have signatures. A lack of function signatures
    also means a lack of function overloading. Look at what happens when you try to
    declare two functions with the same name:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，JavaScript 函数可以接受任意数量的参数，并且函数接受的参数类型根本没有指定。这意味着 JavaScript 函数实际上没有签名。没有函数签名也意味着没有函数重载。看看当你尝试声明两个同名函数时会发生什么：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If this were another language, the output of `sayMessage("Hello!")` would likely
    be `"Hello!"`. In JavaScript, however, when you define multiple functions with
    the same name, the one that appears last in your code wins. The earlier function
    declarations are completely removed, and the last is the one that is used. Once
    again, it helps to think about this situation using objects:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是另一种语言，`sayMessage("Hello!")` 的输出可能会是 `"Hello!"`。然而，在 JavaScript 中，当你定义多个同名函数时，最后一个出现在代码中的函数会“获胜”。之前的函数声明会完全被删除，最后的那个函数会被使用。再次强调，使用对象来理解这种情况会很有帮助：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Looking at the code this way makes it clear why the previous code didn’t work.
    A function object is being assigned to `sayMessage` twice in a row, so it makes
    sense that the first function object would be lost.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这样看代码可以清楚地说明为什么之前的代码没有工作。一个函数对象被连续两次赋值给 `sayMessage`，所以可以理解第一个函数对象会被丢失。
- en: 'The fact that functions don’t have signatures in JavaScript doesn’t mean you
    can’t mimic function overloading. You can retrieve the number of parameters that
    were passed in by using the `arguments` object, and you can use that information
    to determine what to do. For example:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中函数没有签名并不意味着你不能模拟函数重载。你可以使用 `arguments` 对象来获取传入的参数数量，并利用这些信息来决定要做什么。例如：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this example, the `sayMessage()` function behaves differently based on the
    number of parameters that were passed in. If no parameters are passed in (`arguments.length
    === 0`), then a default message is used. Otherwise, the first parameter is used
    as the message. This is a little more involved than function overloading in other
    languages, but the end result is the same. If you really want to check for different
    data types, you can use `typeof` and `instanceof`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`sayMessage()` 函数根据传入的参数数量行为不同。如果没有传入参数（`arguments.length === 0`），则使用默认消息。否则，使用第一个参数作为消息。这比其他语言中的函数重载稍微复杂一些，但最终结果是相同的。如果你真的想检查不同的数据类型，可以使用
    `typeof` 和 `instanceof`。
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*In practice, checking the named parameter against undefined is more common
    than relying on arguments.length.*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*在实践中，检查命名参数是否为 undefined 比依赖 `arguments.length` 更常见。*'
- en: Object Methods
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象方法
- en: As mentioned in [Chapter 1](ch01.html "Chapter 1. Primitive and Reference Types"),
    you can add and remove properties from objects at any time. When a property value
    is actually a function, the property is considered a method. You can add a method
    to an object in the same way that you would add a property. For example, in the
    following code, the `person` variable is assigned an object literal with a `name`
    property and a method called `sayName`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如在[第1章](ch01.html "第1章. 原始类型和引用类型")中提到的，你可以随时向对象添加和删除属性。当属性值实际上是一个函数时，该属性就被视为方法。你可以像添加属性一样向对象添加方法。例如，在以下代码中，`person`
    变量被赋值为一个包含 `name` 属性和一个名为 `sayName` 的方法的对象字面量。
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note that the syntax for a data property and a method is exactly the same—an
    identifier followed by a colon and the value. In the case of `sayName`, the value
    just happens to be a function. You can then call the method directly from the
    object as in `person.sayName("Nicholas")`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，数据属性和方法的语法是完全相同的——一个标识符后跟冒号和值。在 `sayName` 的情况下，值恰好是一个函数。你可以像 `person.sayName("Nicholas")`
    这样直接从对象调用该方法。
- en: The this Object
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`this` 对象'
- en: You may have noticed something strange in the previous example. The `sayName()`
    method references `person.name` directly, which creates tight coupling between
    the method and the object. This is problematic for a number of reasons. First,
    if you change the variable name, you also need to remember to change the reference
    to that name in the method. Second, this sort of tight coupling makes it difficult
    to use the same function for different objects. Fortunately, JavaScript has a
    way around this issue.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能在前面的示例中注意到了一些奇怪的地方。`sayName()` 方法直接引用了 `person.name`，这导致了方法和对象之间的紧密耦合。这样存在一些问题。首先，如果你更改了变量名，你还需要记得在方法中也更改对该名称的引用。其次，这种紧密耦合使得同一个函数难以在不同对象之间复用。幸运的是，JavaScript
    提供了一种解决这个问题的方法。
- en: 'Every scope in JavaScript has a `this` object that represents the calling object
    for the function. In the global scope, `this` represents the global object (`window`
    in web browsers). When a function is called while attached to an object, the value
    of `this` is equal to that object by default. So, instead of directly referencing
    an object inside a method, you can reference `this` instead. For example, you
    can rewrite the code from the previous example to use `this`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的每个作用域都有一个 `this` 对象，表示调用该函数的对象。在全局作用域中，`this` 代表全局对象（在网页浏览器中为 `window`）。当函数与对象绑定时，`this`
    的值默认等于该对象。因此，你可以在方法中使用 `this` 来代替直接引用对象。例如，你可以将前一个示例中的代码重写为使用 `this`：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This code works the same as the earlier version, but this time, `sayName()`
    references `this` instead of `person`. That means you can easily change the name
    of the variable or even reuse the function on different objects.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的运行方式与早期版本相同，但这次 `sayName()` 引用了 `this` 而不是 `person`。这意味着你可以轻松地更改变量名，甚至在不同的对象上重用该函数。
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this example, a function called `sayName` is defined first. Then, two object
    literals are created that assign `sayName` to be equal to the `sayNameForAll`
    function. Functions are just reference values, so you can assign them as property
    values on any number of objects. When `sayName()` is called on `person1`, it outputs
    `"Nicholas"`; when called on `person2`, it outputs `"Greg"`. That’s because `this`
    is set when the function is called, so `this.name` is accurate.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，首先定义了一个名为 `sayName` 的函数。然后，创建了两个对象字面量，并将 `sayName` 赋值为 `sayNameForAll`
    函数。函数本身只是引用值，因此你可以将它们作为属性值分配给任意数量的对象。当在 `person1` 上调用 `sayName()` 时，它输出 `"Nicholas"`；而在
    `person2` 上调用时，输出 `"Greg"`。这是因为当函数被调用时，`this` 被设置，因此 `this.name` 是准确的。
- en: The last part of this example defines a global variable called `name`. When
    `sayNameForAll()` is called directly, it outputs `"Michael"` because the global
    variable is considered a property of the global object.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例的最后一部分定义了一个名为 `name` 的全局变量。当直接调用 `sayNameForAll()` 时，它输出 `"Michael"`，因为全局变量被认为是全局对象的一个属性。
- en: Changing this
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改 `this`
- en: The ability to use and manipulate the `this` value of functions is key to good
    object-oriented programming in JavaScript. Functions can be used in many different
    contexts, and they need to be able to work in each situation. Even though `this`
    is typically assigned automatically, you can change its value to achieve different
    goals. There are three function methods that allow you to change the value of
    `this`. (Remember that functions are objects, and objects can have methods, so
    functions can, too.)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用和操作函数的`this`值是 JavaScript 中良好的面向对象编程的关键。函数可以在许多不同的上下文中使用，并且需要能够在每种情况下都能正常工作。尽管`this`通常会自动分配，你仍然可以改变它的值以实现不同的目标。有三种函数方法可以让你改变`this`的值。（记住，函数是对象，而对象可以有方法，所以函数也可以有方法。）
- en: The call() Method
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`call()`方法'
- en: 'The first function method for manipulating `this` is `call()`, which executes
    the function with a particular `this` value and with specific parameters. The
    first parameter of `call()` is the value to which `this` should be equal when
    the function is executed. All subsequent parameters are the parameters that should
    be passed into the function. For example, suppose you update `sayNameForAll()`
    to take a parameter:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 操作`this`的第一个函数方法是`call()`，它以特定的`this`值和具体的参数执行函数。`call()`的第一个参数是执行函数时`this`应该等于的值。所有后续的参数是应该传入函数的参数。例如，假设你更新了`sayNameForAll()`来接受一个参数：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In this example, `sayNameForAll()` accepts one parameter that is used as a label
    to the output value. The function is then called three times. Notice that there
    are no parentheses after the function name because it is accessed as an object
    rather than as code to execute. The first function call uses the global `this`
    and passes in the parameter `"global"` to output `"global:Michael"`. The same
    function is called two more times, once each for `person1` and `person2`. Because
    the `call()` method is being used, you don’t need to add the function directly
    onto each object—you explicitly specify the value of `this` instead of letting
    the JavaScript engine do it automatically.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`sayNameForAll()`接受一个参数，这个参数作为输出值的标签。然后，这个函数被调用了三次。请注意，在函数名称后没有括号，因为它作为对象被访问，而不是作为代码来执行。第一次函数调用使用了全局的`this`，并传入参数`"global"`来输出`"global:Michael"`。同样的函数被再调用了两次，分别用于`person1`和`person2`。因为使用的是`call()`方法，所以你不需要直接将函数添加到每个对象上——你显式指定了`this`的值，而不是让
    JavaScript 引擎自动处理。
- en: The apply() Method
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`apply()`方法'
- en: 'The second function method you can use to manipulate `this` is `apply()`. The
    `apply()` method works exactly the same as `call()` except that it accepts only
    two parameters: the value for `this` and an array or array-like object of parameters
    to pass to the function (that means you can use an `arguments` object as the second
    parameter). So, instead of individually naming each parameter using `call()`,
    you can easily pass arrays to `apply()` as the second argument. Otherwise, `call()`
    and `apply()` behave identically. This example shows the `apply()` method in action:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用来操作`this`的第二种函数方法是`apply()`。`apply()`方法的工作原理与`call()`完全相同，只是它只接受两个参数：`this`的值和要传递给函数的参数数组或类数组对象（这意味着你可以使用`arguments`对象作为第二个参数）。因此，与你使用`call()`时逐个命名每个参数不同，你可以轻松地将数组作为第二个参数传递给`apply()`。否则，`call()`和`apply()`的行为是完全相同的。这个例子展示了`apply()`方法的使用：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This code takes the previous example and replaces `call()` with `apply()`; the
    result is exactly the same. The method you use typically depends on the type of
    data you have. If you already have an array of data, use `apply()`; if you just
    have individual variables, use `call()`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将前面的例子中的`call()`替换为`apply()`；结果完全相同。你通常使用哪种方法取决于你拥有的数据类型。如果你已经有了一个数组数据，使用`apply()`；如果只有单独的变量，使用`call()`。
- en: The bind() Method
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`bind()`方法'
- en: The third function method for changing `this` is `bind()`. This method was added
    in ECMAScript 5, and it behaves quite differently than the other two. The first
    argument to `bind()` is the `this` value for the new function. All other arguments
    represent named parameters that should be permanently set in the new function.
    You can still pass in any parameters that aren’t permanently set later.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 改变`this`的第三种方法是`bind()`。该方法在 ECMAScript 5 中被添加，并且它的行为与其他两种方法有很大不同。`bind()`的第一个参数是新函数的`this`值。所有其他参数表示应该在新函数中永久设置的命名参数。你仍然可以在稍后传入未永久设置的任何参数。
- en: The following code shows two examples that use `bind()`. You create the `sayNameForPerson1()`
    function by binding the `this` value to `person1`, while `sayNameForPerson2()`
    binds `this` to `person2` and binds the first parameter as `"person2"`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了两个使用 `bind()` 的例子。你通过将 `this` 的值绑定到 `person1` 来创建 `sayNameForPerson1()`
    函数，而 `sayNameForPerson2()` 则将 `this` 绑定到 `person2` 并将第一个参数绑定为 `"person2"`。
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: No parameters are bound for `sayNameForPerson1()` ❶, so you still need to pass
    in the label for the output. The function `sayNameForPerson2()` not only binds
    `this` to `person2` but also binds the first parameter as `"person2"` ❷. That
    means you can call `sayNameForPerson2()` without passing in any additional arguments.
    The last part of this example adds `sayNameForPerson1()` onto `person2` with the
    name `sayName` ❸. The function is bound, so the value of `this` doesn’t change
    even though `sayNameForPerson1` is now a function on `person2`. The method still
    outputs the value of `person1.name`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`sayNameForPerson1()` ❶ 没有绑定任何参数，所以你仍然需要传入输出的标签。函数 `sayNameForPerson2()` 不仅将
    `this` 绑定到 `person2`，还将第一个参数绑定为 `"person2"` ❷。这意味着你可以调用 `sayNameForPerson2()`
    而不需要传入任何额外的参数。这个例子的最后部分将 `sayNameForPerson1()` 添加到 `person2` 上，命名为 `sayName` ❸。该函数已被绑定，因此即使
    `sayNameForPerson1` 现在是 `person2` 上的一个函数，`this` 的值也不会改变。该方法仍然输出 `person1.name`
    的值。'
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: JavaScript functions are unique in that they are also objects, meaning they
    can be accessed, copied, overwritten, and generally treated just like any other
    object value. The biggest difference between a JavaScript function and other objects
    is a special internal property, `[[Call]]`, which contains the execution instructions
    for the function. The `typeof` operator looks for this internal property on an
    object, and if it finds it, returns `"function"`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 函数的独特之处在于它们本身也是对象，这意味着它们可以像任何其他对象一样被访问、复制、覆盖和处理。JavaScript 函数与其他对象之间最大的区别是一个特殊的内部属性
    `[[Call]]`，它包含函数的执行指令。`typeof` 运算符会在对象上查找这个内部属性，如果找到了，就会返回 `"function"`。
- en: 'There are two function literal forms: declarations and expressions. Function
    declarations contain the function name to the right of the `function` keyword
    and are hoisted to the top of the context in which they are defined. Function
    expressions are used where other values can also be used, such as assignment expressions,
    function parameters, or the return value of another function.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 函数字面量有两种形式：声明和表达式。函数声明包含在 `function` 关键字右侧的函数名，并且会被提升到定义它们的上下文的顶部。函数表达式用于可以使用其他值的地方，例如赋值表达式、函数参数或另一个函数的返回值。
- en: Because functions are objects, there is a `Function` constructor. You can create
    new functions with the `Function` constructor, but this isn’t generally recommended
    because it can make your code harder to understand and debugging much more difficult.
    That said, you will likely run into its usage from time to time in situations
    where the true form of the function isn’t known until runtime.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因为函数是对象，所以有一个 `Function` 构造函数。你可以通过 `Function` 构造函数创建新的函数，但通常不推荐这样做，因为这可能会使代码更难理解，调试也变得更加困难。尽管如此，在某些情况下你可能会遇到它的使用，这些情况通常是在函数的真实形式直到运行时才会知道。
- en: You need a good grasp of functions to understand how object- oriented programming
    works in JavaScript. Because JavaScript has no concept of a class, functions and
    other objects are all you have to work with to achieve aggregation and inheritance.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要很好地掌握函数的使用，才能理解 JavaScript 中面向对象编程的工作原理。由于 JavaScript 没有类的概念，因此函数和其他对象是你实现聚合和继承的唯一工具。
