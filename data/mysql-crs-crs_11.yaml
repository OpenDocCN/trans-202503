- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Inserting, Updating, and Deleting Data
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 插入、更新和删除数据
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: In this chapter, you’ll learn to insert, update, and delete data from tables.
    You’ll practice ways to insert data from one table to another, use queries to
    update or delete data from a table, and create a table that automatically increments
    a numeric value into a column as you insert rows.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何插入、更新和删除表中的数据。你将练习将数据从一个表插入到另一个表，使用查询来更新或删除表中的数据，并创建一个在插入行时自动递增数字值的表。
- en: Inserting Data
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插入数据
- en: So far, you’ve been querying data from tables. But how did the data get into
    the tables in the first place? Typically, you insert data using the `insert` statement.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你一直是在查询表中的数据。那么，这些数据是如何最初进入表中的呢？通常，你是通过`insert`语句来插入数据的。
- en: Adding rows to a table with the `insert` statement is known as *populating*
    a table. You specify the name of the table, the names of the columns you want
    to insert values into, and the values you want to insert.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`insert`语句向表中添加行称为*填充*表格。你需要指定表的名称、你要插入值的列名，以及你想要插入的值。
- en: 'Here you insert a row of data into the `arena` table, which contains information
    about various arena names, locations, and capacities:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你向`arena`表插入了一行数据，其中包含关于不同竞技场名称、位置和容量的信息：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: First, you specify that you want to insert a row into the `arena` table ❶, and
    that your data will go into the `arena_id`, `arena_name`, `location`, and `seating_capacity`
    columns ❷. You then list the values you want to insert under the `values` keyword
    in the same order in which you listed the columns ❸. You surround, or wrap, the
    values `Madison Square Garden` and `New York` in quotes because they are character
    strings ❹.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要指定你要将一行数据插入到`arena`表中❶，并且你的数据将填入`arena_id`、`arena_name`、`location`和`seating_capacity`这几列❷。然后，你在`values`关键字下列出你想插入的值，顺序与列名一致❸。你需要将`Madison
    Square Garden`和`New York`这两个值用引号括起来，因为它们是字符串❹。
- en: When you run this `insert` statement, MySQL returns the message `1 row(s) affected`
    to let you know that one row was inserted into the table.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行此`insert`语句时，MySQL会返回`1 row(s) affected`的信息，告诉你表中已插入了一行数据。
- en: 'You can then query your `arena` table to confirm the new row looks as you intended:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以查询你的`arena`表，确认新插入的行符合预期：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The result is:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The row was inserted, and the columns and their values appear as you expected.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 行已成功插入，列及其值如你所预期的那样显示。
- en: Inserting Null Values
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插入`null`值
- en: 'When you want to insert a null value into a column, you have two options. First,
    you can list the column name and use the `null` keyword as the value to insert.
    For example, if you want to add a row to the `arena` table for the `Dean Smith
    Center` but don’t know its seating capacity, you can write an `insert` statement
    like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想要插入一个`null`值到某列时，你有两个选择。首先，你可以列出该列名，并使用`null`关键字作为要插入的值。例如，如果你想向`arena`表中添加一行`Dean
    Smith Center`的数据，但不知道它的座位容量，你可以像这样编写`insert`语句：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The second option is to omit the column name entirely. As an alternative to
    the preceding `insert` statement, you can omit the `seating_capacity` column from
    your list of columns and provide no value for it in your list of values:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种选择是完全省略列名。作为前面`insert`语句的替代方案，你可以将`seating_capacity`列从列名列表中省略，并且在值列表中不为该列提供任何值：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Since you didn’t insert a value into the `seating_capacity` column, MySQL will
    set it to `null` by default. You can see the row that was inserted using this
    query:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你没有向`seating_capacity`列插入任何值，MySQL将默认将其设置为`null`。你可以通过以下查询查看插入的行：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The result is:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `seating_capacity` column will be set to `null` regardless of which approach
    you take.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你采用哪种方法，`seating_capacity`列的值都会被设置为`null`。
- en: If the `seating_capacity` column had been defined as `not null` when you created
    the table, you wouldn’t be allowed to insert a null value using either approach
    (see [Chapter 2](c02.xhtml)).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在创建表时，`seating_capacity`列已被定义为`not null`，则无论采用哪种方法，你都不允许插入`null`值（参见[第2章](c02.xhtml)）。
- en: Inserting Multiple Rows at Once
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一次插入多行数据
- en: 'When you want to insert multiple rows, you can either insert one row at a time
    or insert them as a group. Let’s start with the first approach. Here’s how you
    insert three arenas into the `arena` table using individual `insert` statements:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想要插入多行数据时，你可以选择一次插入一行，或者将它们作为一组插入。我们先从第一种方法开始。以下是如何通过单独的`insert`语句向`arena`表插入三条数据：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You could achieve the same results by combining all three rows into one `insert`
    statement:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过将所有三行合并成一个 `insert` 语句来达到相同的效果：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To insert multiple rows at once, surround each row’s values with parentheses
    and use a comma between each set of values. MySQL will insert all three rows into
    the table and give you the message `3 row(s) affected` to let you know that all
    three rows were inserted.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 若要一次插入多行，需将每行的值用括号括起来，并在每组值之间使用逗号。MySQL 将会把所有三行插入到表中，并给出消息 `3 row(s) affected`，表示所有三行已成功插入。
- en: Inserting Without Listing Column Names
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不列出列名的插入
- en: 'You can also insert data into a table without specifying the column names.
    Since you’re inserting four values and the `arena` table only has four columns,
    you could replace the `insert` statement that lists the column names with one
    that does not:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在不指定列名的情况下向表中插入数据。由于你要插入四个值，而 `arena` 表只有四列，你可以用不列出列名的 `insert` 语句替代列出列名的语句：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: MySQL is able to determine which columns to insert the values into because you’ve
    provided the data in the same order as the columns in your table.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 能够确定将值插入到哪些列中，因为你提供的数据顺序与表中的列顺序相同。
- en: Although omitting the column names saves you some typing, it’s best practice
    to list them. At some point in the future, you might add a fifth column to the
    `arena` table. If you don’t list your columns, making that change would break
    your `insert` statements because you’d be trying to insert four values into a
    table with five columns.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然省略列名可以减少一些打字工作，但最佳实践是列出它们。将来你可能会向 `arena` 表中添加一个第五列。如果不列出列名，进行该更改时会破坏你的 `insert`
    语句，因为你会试图将四个值插入到一个有五个列的表中。
- en: Inserting Sequences of Numbers
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插入数字序列
- en: You might want to insert sequential numbers into a table column, such as in
    the `arena` table where the first row of the `arena_id` column should have the
    value `1`, the next row of the `arena_id` column should have the value `2`, the
    next row should have a value of `3`, and so on. MySQL provides an easy way to
    do that by letting you define a column with the `auto_increment` attribute. The
    `auto_increment` attribute is particularly useful for a primary key column—that
    is, the column that uniquely identifies the rows in a table.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想将连续的数字插入到表的某个列中，比如在 `arena` 表中，`arena_id` 列的第一行应该为 `1`，第二行应该为 `2`，第三行应该为
    `3`，以此类推。MySQL 提供了一种简单的方法，让你通过定义带有 `auto_increment` 属性的列来实现这一点。`auto_increment`
    属性特别适用于主键列——即唯一标识表中行的列。
- en: 'Let’s look at how it works. Select everything from the `arena` table you’ve
    created thus far:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看它是如何工作的。从你到目前为止创建的 `arena` 表中选择所有内容：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The results are:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can see that each arena has its own `arena_id` that is one larger than the
    value for the arena that was inserted before it.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到每个竞技场都有自己的 `arena_id`，它比之前插入的竞技场的 `arena_id` 大 1。
- en: 'When you inserted the values in the `arena_id` column, you found the highest
    `arena_id` already in the table and added 1 to it when inserting the next row.
    For example, when you inserted the row for the `Staples Center`, you hardcoded
    the `arena_id` as `6` because the previous `arena_id` was `5`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 `arena_id` 列中插入值时，你需要先找到表中已存在的最大 `arena_id`，然后在插入下一行时将其加 1。例如，当你为 `Staples
    Center` 插入行时，你硬编码了 `arena_id` 为 `6`，因为前一个 `arena_id` 是 `5`：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This approach won’t work very well in a real production database where many
    new rows are being created quickly. A better approach is to have MySQL manage
    that work for you by defining the `arena_id` column with `auto_increment` when
    you create the table. Let’s try it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法在实际的生产数据库中效果不好，因为在生产环境下，很多新的行会迅速被创建。一个更好的方法是让 MySQL 通过在创建表时定义带有 `auto_increment`
    的 `arena_id` 列来为你处理这项工作。我们来试试吧。
- en: 'Drop the `arena` table and re-create it using `auto_increment` for the `arena_id`
    column:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 删除 `arena` 表，并使用 `auto_increment` 重新创建它以适配 `arena_id` 列：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now when you insert rows into the table, you won’t have to deal with inserting
    data into the `arena_id` column. You can insert data into the other columns and
    MySQL will automatically increment the `arena_id` column for you with each new
    row that you insert. Your `insert` statements should look like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你向表中插入行时，你就不需要再处理 `arena_id` 列的数据插入了。你只需要插入其他列的数据，MySQL 会自动为每个新插入的行递增 `arena_id`
    列。你的 `insert` 语句应该是这样的：
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You didn’t list `arena_id` as one of the columns in your list of columns, nor
    did you provide a value for `arena_id` in your list of values. Take a look at
    the rows in the table after MySQL runs your `insert` statements:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你没有在列的列表中列出`arena_id`作为一列，也没有在值的列表中提供`arena_id`的值。看看在MySQL运行你的`insert`语句后表中的行：
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The results are:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can see, MySQL automatically incremented the values for the `arena_id`
    column.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，MySQL自动为`arena_id`列的值进行了递增。
- en: Only one column per table can be defined with `auto_increment`, and it has to
    be the primary key column (or a column that is part of the primary key).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 每个表格只能定义一个`auto_increment`列，并且该列必须是主键列（或主键的一部分）。
- en: When inserting a value into a column defined with `auto_increment`, MySQL will
    always insert a higher number, but there can be gaps between the numbers. For
    example, you could end up with `arena_id` 22, 23, and then 29 in your table. The
    reasons for this have to do with the storage engine your database is using, how
    your MySQL server is configured, and other factors that are beyond the scope of
    this book, so just know that a column defined with `auto_increment` will always
    result in an ascending list of numbers.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当向一个定义了`auto_increment`的列插入值时，MySQL会始终插入一个更大的数字，但这些数字之间可能会有间隙。例如，你的表格可能会出现`arena_id`为22、23，然后是29的情况。造成这种情况的原因与数据库使用的存储引擎、MySQL服务器的配置以及其他超出本书范围的因素有关，因此请记住，定义为`auto_increment`的列始终会生成递增的数字列表。
- en: Inserting Data Using a Query
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用查询插入数据
- en: 'You can insert data into a table based on values returned from a query. For
    example, say the `large_building` table has data you want to add to your `arena`
    table. The `large_building` table was created with these data types:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以基于查询返回的值将数据插入到表格中。例如，假设`large_building`表中有你想添加到`arena`表的数据。`large_building`表是使用以下数据类型创建的：
- en: '[PRE17]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'It contains this data:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含以下数据：
- en: '[PRE18]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'For your purposes, you don’t care about the first row in the table, because
    `Wanda Inn` is a hotel, not an arena. You can write a query to return the arena
    data from the other rows in the `large_building` table like so:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对你来说，你并不关心表格中的第一行数据，因为`Wanda Inn`是一个酒店，而不是一个竞技场。你可以编写查询，从`large_building`表中的其他行返回竞技场的数据，如下所示：
- en: '[PRE19]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The results are:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE20]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can then use that query as the basis for an `insert` statement to insert
    these rows into the `arena` table:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以使用该查询作为`insert`语句的基础，将这些行数据插入到`arena`表中：
- en: '[PRE21]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'MySQL inserts the two rows that were returned from your query into the `arena`
    table. You can query the `arena` table to see the new rows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL将从查询中返回的两行数据插入到`arena`表中。你可以查询`arena`表以查看新插入的行：
- en: '[PRE22]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here are the results with the new rows included:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是包含新行的结果：
- en: '[PRE23]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `insert` statement added arenas `7` and `8` to the existing data in the
    `arena` table.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`insert`语句将竞技场`7`和`8`添加到`arena`表中的现有数据中。'
- en: Using a Query to Create and Populate a New Table
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用查询创建并填充新表
- en: 'The `create table as` syntax allows you to create and populate a table in one
    step. Here you create a new table called `new_arena` and insert rows into it at
    the same time:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`create table as`语法允许你在一步操作中创建并填充表格。在这里，你创建了一个名为`new_arena`的新表，并同时插入行数据：'
- en: '[PRE24]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This statement creates a table called `new_arena` based on the results of the
    preceding `large_building` query. Now query the new table:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 该语句根据前面的`large_building`查询结果创建了一个名为`new_arena`的表格。现在查询新表：
- en: '[PRE25]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The results are:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE26]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The `new_arena` table is created with the same column names and data types
    as the `large_building` table. You can confirm the data types by describing the
    table with the `desc` keyword:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`new_arena`表与`large_building`表具有相同的列名和数据类型。你可以使用`desc`关键字描述表格，以确认数据类型：'
- en: '[PRE27]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The results are:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE28]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can also use `create table` to make a copy of a table. For example, you
    might save the current state of the `arena` table by making a copy of it and calling
    the new table `arena_` with the current date appended to it, like so:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`create table`复制一个表格。例如，你可以通过复制`arena`表并将新表命名为`arena_`，后面加上当前日期来保存`arena`表的当前状态，如下所示：
- en: '[PRE29]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Before you add or remove columns from the `arena` table, you might want to ensure
    you have your original data saved in a second table first. This is useful when
    you’re about to make major changes to a table, but it may not be practical to
    make a copy of a very large table.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在你添加或删除`arena`表的列之前，你可能希望先确保你已将原始数据保存在第二个表格中。当你即将对表格进行重大更改时，这一点尤其有用，但如果表格非常大，可能不切实际去复制整个表格。
- en: Updating Data
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新数据
- en: Once you have data in your tables, you’ll likely want to make changes to it
    over time. MySQL’s `update` statement allows you to modify existing data.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的表中有了数据，你可能会想要随着时间推移对其进行修改。MySQL的`update`语句允许你修改现有数据。
- en: 'Arenas are notorious for having their names changed, and the arenas in your
    table are no exception. Here you change the `arena_name` value for `arena_id 6`
    from `Staples Center` to `Crypto.com Arena` using the `update` statement:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 场馆因名称变更而臭名昭著，你表中的场馆也不例外。在这里，你通过`update`语句将`arena_id 6`的`arena_name`值从`Staples
    Center`更改为`Crypto.com Arena`：
- en: '[PRE30]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: First, you use the `set` keyword to set column values in the table. Here you
    are setting the `arena_name` column’s value to `Crypto.com Arena`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你使用`set`关键字来设置表中列的值。在这里，你将`arena_name`列的值设置为`Crypto.com Arena`。
- en: 'Next, you specify which row(s) you want updated in the `where` clause. In this
    case, you chose to update the row based on the `arena_id` column with a value
    of `6`, but you could have updated that same row based on another column. For
    example, you can update the row based on the `arena_name` column instead:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你在`where`子句中指定要更新的行。在这种情况下，你选择根据`arena_id`列值为`6`来更新行，但你也可以根据其他列来更新相同的行。例如，你可以根据`arena_name`列来更新这一行：
- en: '[PRE31]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Or, since you have only one arena in Los Angeles listed, you can update the
    row using the `location` column:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，由于你在洛杉矶只列出了一个场馆，你可以使用`location`列来更新这一行：
- en: '[PRE32]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: It’s important that you craft your `where` clauses carefully because any rows
    that match the criteria specified there will be updated. For example, if there
    are five arenas with a `location` of `Los Angeles`, this `update` statement will
    rename all five to `Crypto.com Arena`, whether or not that’s what you intended.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 精心编写`where`子句非常重要，因为任何符合该子句中指定条件的行都将被更新。例如，如果有五个场馆的`location`为`Los Angeles`，那么这个`update`语句将把这五个场馆的名称全部更改为`Crypto.com
    Arena`，无论这是否是你原本的意图。
- en: It’s usually best to update rows based on a primary key column. When you created
    the `arena` table, you defined the `arena_id` column as the primary key of the
    table. That means there will only be one row in the table for an `arena_id` of
    `6`, so if you use the syntax `where arena_id = 6`, you can be confident you’re
    updating only that row.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，最好根据主键列来更新行。当你创建`arena`表时，你已将`arena_id`列定义为表的主键。这意味着表中会有唯一的一行对于`arena_id`为`6`，因此如果你使用语法`where
    arena_id = 6`，你可以确保只更新这一行。
- en: Using a primary key in your `where` clause is also best practice because primary
    key columns are indexed. Indexed columns are typically faster at finding rows
    in the table than unindexed columns.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在`where`子句中使用主键也是最佳实践，因为主键列是已建立索引的。已建立索引的列通常在查找表中的行时比未建立索引的列要快。
- en: Updating Multiple Rows
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新多个行
- en: 'To update multiple rows, you can use a `where` clause that matches more than
    one row. Here you update the seating capacity of all arenas with an `arena_id`
    greater than `3`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新多个行，你可以使用匹配多行的`where`子句。在这里，你更新了所有`arena_id`大于`3`的场馆的座位容量：
- en: '[PRE33]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: MySQL updates arenas `4`, `5`, and `6` to have `seating_capacity` values of
    20,000.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL将场馆`4`、`5`和`6`的`seating_capacity`值更新为20,000。
- en: 'If you remove your `where` clause entirely, all rows in your table will be
    updated:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你完全移除`where`子句，那么表中的所有行都会被更新：
- en: '[PRE34]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If you `select * from arena` now, you can see that all arenas have a seating
    capacity of 15,000:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在执行`select * from arena`，你会发现所有场馆的座位容量都是15,000：
- en: '[PRE35]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In this example, it’s apparent that you forgot to use a `where` clause to limit
    the number of rows to update.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，很明显你忘记使用`where`子句来限制更新的行数。
- en: Updating Multiple Columns
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新多个列
- en: 'You can update more than one column with one `update` statement by separating
    the column names with a comma:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过用逗号分隔列名，在一个`update`语句中更新多个列：
- en: '[PRE36]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Here, you’ve updated both the `arena_name` and the `seating_capacity` column
    values for the row that has an `arena_id` of `6`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你已更新了`arena_name`和`seating_capacity`列的值，针对的是`arena_id`为`6`的那一行。
- en: Deleting Data
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除数据
- en: 'To remove data from your tables, you use the `delete` statement. You can delete
    one row at a time, multiple rows, or all rows with one `delete` statement. You
    use the `where` clause to specify which rows you want to delete. Here, you delete
    the row with an `arena_id` of `2`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要从表中删除数据，你可以使用`delete`语句。你可以一次删除一行、多行或使用一个`delete`语句删除所有行。你使用`where`子句来指定要删除的行。在这里，你删除了`arena_id`为`2`的那一行：
- en: '[PRE37]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'After you run this `delete` statement, select the remaining rows from the table
    like so:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在你执行完这个`delete`语句后，可以像这样从表中选择剩余的行：
- en: '[PRE38]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The result is:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE39]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: You can see that the row containing the `arena_id` of `2` has been deleted.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，包含`arena_id`为`2`的行已经被删除。
- en: 'In [Chapter 7](c07.xhtml), you learned about using `like` for simple pattern
    matches. You can do that here to delete all arenas that have the word `Arena`
    in their name:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第七章](c07.xhtml)中，你学习了如何使用`like`进行简单的模式匹配。你可以在这里使用它删除所有名称中包含`Arena`的场馆：
- en: '[PRE40]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Select the remaining rows from the table:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 从表中选择剩余的行：
- en: '[PRE41]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The result is:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE42]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The two rows containing `Philippine Arena` and `Crypto.com Arena` are no longer
    in the table.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 包含`Philippine Arena`和`Crypto.com Arena`的两行已不再存在于表中。
- en: 'If you write a `delete` statement and the `where` clause doesn’t match any
    rows, no rows will be deleted:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你编写了一个`delete`语句，并且`where`子句没有匹配任何行，那么就不会删除任何行：
- en: '[PRE43]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This statement won’t delete any rows because there aren’t any with an `arena_id`
    of `459237`. MySQL won’t produce an error message, but it will tell you `0 row(s)
    affected`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句不会删除任何行，因为没有`arena_id`为`459237`的行。MySQL不会产生错误消息，但会告诉你`0 row(s) affected`。
- en: 'To delete all rows from the table, you can use a `delete` statement without
    a `where` clause:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除表中的所有行，你可以使用不带`where`子句的`delete`语句：
- en: '[PRE44]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This statement removes all rows from the table.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句会删除表中的所有行。
- en: Truncating and Dropping a Table
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 截断和删除表格
- en: '*Truncating* a table removes all the rows but keeps the table intact. It has
    the same effect as using `delete` without a `where` clause, but it’s typically
    faster.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '*截断*表会删除所有行，但保留表本身。它的效果与使用不带`where`子句的`delete`相同，但通常更快。'
- en: 'You can truncate a table using the `truncate table` command, like so:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`truncate table`命令来截断表，如下所示：
- en: '[PRE45]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Once the statement runs, the table will still exist but there will be no rows
    in it.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦语句执行完毕，表格仍然存在，但其中将没有任何行。
- en: 'If you want to remove both the table and all of its data, you can use the `drop
    table` command:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想删除表及其所有数据，你可以使用`drop table`命令：
- en: '[PRE46]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: If you try to select from the `arena` table now, MySQL will display a message
    saying the table doesn’t exist.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在尝试从`arena`表中选择数据，MySQL会显示一条消息，说明该表不存在。
- en: Summary
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter you looked at inserting, updating, and deleting data from a
    table. You saw how to insert null values and quickly create or delete entire tables.
    In the next chapter, you’ll learn the benefits of using table-like structures
    called *views*.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学习了如何插入、更新和删除表中的数据。你了解了如何插入空值，并快速创建或删除整个表。在下一章，你将学习使用类似表的结构——*视图*——的好处。
