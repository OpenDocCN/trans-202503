- en: '**2**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2**'
- en: '**TELEPORTING WITH VARIABLES**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用变量进行瞬间传送**'
- en: '![image](graphics/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/common01.jpg)'
- en: Are you ready to control your Minecraft world with the power of Python? In this
    chapter, you’ll take a brief tour through the basics of Python. Then you’ll put
    your new skills to the test and create your own teleportation tour of your Minecraft
    world!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你准备好用Python的力量控制你的《Minecraft》世界了吗？在这一章中，你将简要了解Python的基础知识。然后你将把新学到的技能付诸实践，创建属于你自己的《Minecraft》世界瞬间传送之旅！
- en: The concepts described in this chapter aren’t specific to Minecraft Python,
    so you’ll be able to use them in any Python program that you create.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中描述的概念不仅限于《Minecraft》Python，因此你可以在任何你创建的Python程序中使用它们。
- en: '**WHAT IS A PROGRAM?**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**什么是程序？**'
- en: A *program* is a set of instructions that makes your computer do a specific
    task or tasks. Imagine a stopwatch app on a mobile phone. The stopwatch program
    has instructions that tell it what to do when you press start and stop. It also
    has instructions that display the time on the screen as it’s being counted. Some
    guy or gal programmed that stopwatch to work.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*程序*是一组指令，让你的计算机执行特定的任务。想象一下手机上的计时器应用。计时器程序有指令，告诉它当你按下开始和停止按钮时应该做什么。它还有指令，会在屏幕上显示计时结果。某个人或某个女孩编写了这个计时器程序。'
- en: Millions of programs are used every day all around the world. A phone’s messaging
    app is a program, traffic lights are controlled by programs, and even computer
    games like Minecraft are programs.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 每天全球有数百万个程序在被使用。手机的消息应用是一个程序，交通灯是由程序控制的，甚至像《Minecraft》这样的计算机游戏也是程序。
- en: In this book, you’ll learn the fundamentals of programming and how to write
    programs to make your ideas come to life in Minecraft.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，你将学习编程的基本原理，并学会如何编写程序，让你的创意在《Minecraft》中得以实现。
- en: '**STORING DATA WITH VARIABLES**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用变量存储数据**'
- en: 'Let’s start by learning how to store data with variables. *Variables* let you
    store data to use later in a program. *Data* is any information you might want
    to record, such as numbers, names, any kind of text, lists of items, and so on.
    For example, here’s a variable called `pickaxes` that stores the number value
    `12`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从学习如何使用变量存储数据开始。*变量*让你存储数据，以便稍后在程序中使用。*数据*是任何你可能想记录的信息，例如数字、名字、任何类型的文本、物品清单等。例如，下面是一个名为`pickaxes`的变量，它存储了数字值`12`：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Variables can store numbers, words, and even complete sentences, such as “Get
    out of here, Creeper!” You can also change variables, which lets you do some pretty
    neat things in Minecraft. In fact, shortly you’ll use variables to take advantage
    of the power of teleportation!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 变量可以存储数字、单词，甚至完整的句子，例如“快滚开，苦力怕！”你还可以修改变量，这让你在《Minecraft》中做一些非常酷的事情。事实上，很快你就会利用变量来发挥瞬间传送的强大力量！
- en: 'To create a variable in Python, you’ll use a variable name, an equal sign (`=`),
    and a value. Let’s say you’re about to take off on a grand adventure through many
    Minecraft biomes; you’ll want to bring a lot of food with you. You can represent
    food as a variable. For example, in the following Python shell, `bread` is the
    variable name and `145` is the value:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Python中创建一个变量，你需要使用变量名、等号（`=`）和一个值。假设你即将开始一次穿越《Minecraft》多个生物群落的伟大冒险；你会想带上很多食物。你可以将食物表示为一个变量。例如，在以下的Python终端中，`bread`是变量名，`145`是它的值：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The variable’s name is always on the left of the equal sign, and the value you
    want to store is always on the right, as shown in [Figure 2-1](ch02.html#ch2fig1).
    This Python code line *declares* the variable `bread` and *assigns* the value
    `145` to it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 变量的名称总是位于等号的左侧，而你想要存储的值则总是在右侧，如[图 2-1](ch02.html#ch2fig1)所示。这行Python代码*声明*了变量`bread`并*赋值*`145`给它。
- en: '![image](graphics/f02-01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-01.jpg)'
- en: '*Figure 2-1: Parts of a variable declaration. You must be very hungry if you
    have 145 loaves of bread.*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-1：变量声明的部分。如果你有145块面包，那一定是非常饿了。*'
- en: 'After you’ve declared a variable and assigned it a value, you can enter the
    name of the variable into the Python shell to check what it’s holding:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在你声明一个变量并为其赋值之后，你可以在Python终端输入变量名，查看它所存储的内容：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can use almost any name for a variable, but it’s best to use a name that
    describes the variable’s purpose so you’ll understand what’s going on in your
    program. Although it’s not a rule, you should start variable names with a lowercase
    letter instead of a capital letter. This is a style that Python programmers follow,
    and it’s good practice for you to follow, too, so others can easily read your
    code if you ever want to share it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你几乎可以为变量起任何名字，但最好使用一个能描述变量用途的名字，这样你就能理解程序中的内容。虽然这不是强制规则，但你应该用小写字母开始变量名，而不是大写字母。这是Python程序员遵循的风格，遵循这个风格对你也有好处，这样别人如果需要查看你的代码时会更容易理解。
- en: '**NOTE**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Although the value of a variable is* stored, *it is not* saved. *The value
    of a variable is stored in the computer’s temporary memory, meaning that when
    the computer is switched off or the program stops running, the value of the variable
    is no longer stored. Try closing IDLE and then opening it again. When you try
    to get the value of* `bread`, *what happens?*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*虽然变量的值是*存储的，*但它并没有*被保存。*变量的值保存在计算机的临时内存中，这意味着当计算机关闭或程序停止运行时，变量的值将不再被保存。试试关闭IDLE再重新打开它。当你尝试获取`bread`的值时，*会发生什么？*'
- en: '**THE STRUCTURE OF PROGRAMMING LANGUAGES**'
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编程语言的结构**'
- en: '*Syntax* is the set of rules that describes the grammar and punctuation of
    a programming language, similar to the grammar and punctuation in a human language.
    Once you understand Python’s syntax, you’ll be better able to write programs that
    a computer can follow; however, if you don’t use correct syntax, the computer
    won’t understand what you’re telling it to do.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*语法*是一组规则，用来描述编程语言的语法和标点，类似于人类语言中的语法和标点。一旦你理解了Python的语法，你就能更好地编写计算机能够理解的程序；然而，如果你不使用正确的语法，计算机将无法理解你让它做什么。'
- en: Think of a single instruction in your code as a sentence. To end a sentence
    in English, you use a period (called a full stop in the United Kingdom). Instead
    of a period, Python uses a new line to indicate the end of an instruction and
    the start of the next. Each instruction on a new line is called a *statement*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 想把你代码中的每一条指令当做一个句子来看。在英语中，句子以句号（在英国叫作“full stop”）结束。而Python使用新的一行来表示一条指令的结束和下一条指令的开始。每行上的指令称为*语句*。
- en: 'For example, say you want to keep track of how many pickaxes, iron ore blocks,
    and cobblestone blocks you have. In the Python shell, you’d write it like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，假设你想跟踪你拥有多少个镐、铁矿块和圆石块。在Python解释器中，你会这样写：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[Figure 2-2](ch02.html#ch2fig2) shows what this looks like in the Python shell.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2-2](ch02.html#ch2fig2)展示了在Python解释器中这是什么样子的。'
- en: '![image](graphics/f02-02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-02.jpg)'
- en: '*Figure 2-2: Entering code in the Python shell*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-2：在Python解释器中输入代码*'
- en: 'Notice that each statement is on its own line. Because of the new lines, Python
    will understand that you want to keep track of three different items. But if you
    don’t put each statement on a new line, Python gets confused and gives you a syntax
    error:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，每条语句都在自己的行上。由于有了新的一行，Python会理解你想跟踪三项不同的内容。但是如果你没有把每条语句放在新的一行，Python会感到困惑，并且给你语法错误：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: A *syntax error* is Python’s way of telling you it doesn’t understand. Python
    won’t be able to follow these instructions because it doesn’t know where one statement
    ends and another begins.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*语法错误*是Python告诉你它无法理解的方式。Python无法执行这些指令，因为它不知道哪一条语句结束，哪一条语句开始。'
- en: 'Python also won’t know what to do if you start lines with a space:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在行首加上空格，Python也不会知道该怎么做：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you look closely, you’ll see that the code has spaces at the beginning of
    the line. When you get an unexpected indent syntax error, like the one here, you’ll
    know that your line of code starts with spaces when it shouldn’t.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细观察，你会发现代码的每一行开头都有空格。当你遇到意外的缩进语法错误时，比如这里的错误，你就知道你的代码行开头有不该有的空格。
- en: Python is very picky about how you write code. If you get a syntax error when
    entering the examples in this book, check your work carefully. Most likely, you’ll
    find a small mistake.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Python对代码的书写非常挑剔。如果你在输入本书中的示例时遇到语法错误，请仔细检查你的代码。很可能，你会发现一个小错误。
- en: '**SYNTAX RULES FOR VARIABLES**'
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**变量的语法规则**'
- en: 'You need to know a few syntax rules for naming variables so Python can understand
    them:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要了解一些变量命名的语法规则，这样Python才能理解它们：
- en: • Don’t include symbols in your variable names, except for underscores (`_`),
    or you’ll get a syntax error.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: • 变量名中不要包含符号，除了下划线（`_`），否则你会遇到语法错误。
- en: • Don’t start a variable name with a number, as in `9bread`. Using numbers elsewhere
    in a variable name is fine, as in `bread9`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: • 变量名不能以数字开头，例如 `9bread`。在变量名的其他位置使用数字是可以的，例如 `bread9`。
- en: '• You don’t need to add spaces on either side of the equal sign: your program
    will run fine without them. But they do make the code easier to read, so it’s
    a good idea to add them.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: • 你不需要在等号两边添加空格：即使没有空格，你的程序也会正常运行。但空格会让代码更易读，所以最好加上它们。
- en: Variables are very handy. Next, you’ll learn how to change the value of variables,
    and then you’ll be ready to teleport your player!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 变量非常方便。接下来，你将学习如何更改变量的值，然后你就能准备好传送你的玩家了！
- en: '**CHANGING THE VALUES OF VARIABLES**'
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**更改变量的值**'
- en: 'You can change the value of a variable at any time in the same way you’d declare
    a variable. For example, say you meet five Minecraft cats and you want to save
    this value as a variable. First you declare a variable, `cats`, and assign the
    value `5` to it, which would look like this in a Python shell:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像声明变量一样随时更改变量的值。例如，假设你遇到五只Minecraft猫，并且想将这个值保存为变量。你首先声明一个变量 `cats`，并将值 `5`
    赋给它，在Python交互式命令行中会是这样的：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Later you meet five more cats and decide you want to update this value. What
    happens if you change the value of `cats` to 10?
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 后来你遇到了五只猫，并决定想更新这个值。如果你将 `cats` 的值更改为 10，会发生什么呢？
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When you ask Python for the new value of `cats`, it’s no longer `5`! Now when
    you use the `cats` variable in a program, it will use the new value of `10`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当你向Python请求 `cats` 的新值时，它不再是 `5`！现在，当你在程序中使用 `cats` 变量时，它将使用新值 `10`。
- en: 'There are many types of data that you can store in variables. *Data types*
    tell the computer how to work with a particular piece of data. I’ll start by discussing
    one of the types you’ll use most often: integers. Later in the chapter, I’ll also
    introduce the floats data type.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在变量中存储许多类型的数据。*数据类型* 告诉计算机如何处理特定的数据。我将首先讨论你最常使用的一种类型：整数。稍后在本章中，我还将介绍浮点数数据类型。
- en: '**INTEGERS**'
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**整数**'
- en: '*Integers* are positive or negative whole numbers. Values such as 10, 32, –6,
    194689, and –5 are integers, but 3.14 and 6.025 are not.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*整数* 是正数或负数的整数。像 10、32、–6、194689 和 –5 这样的值是整数，但 3.14 和 6.025 不是。'
- en: You probably use integers every day without even thinking about it, even in
    Minecraft! For example, you might see 12 cows on a hillside while you’re on your
    way to mine 5 diamonds with 2 fresh apples in your inventory. All those numbers
    are integers.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能每天都在不经意间使用整数，即使是在Minecraft中！例如，你可能在去采矿时看到山坡上的12只牛，身上带着2个新鲜的苹果和5颗钻石。这些数字都是整数。
- en: 'Let’s say you have five pigs in your Minecraft world and you want to write
    a program that uses the number of pigs in some way. In Python, you’d declare an
    integer variable to represent the number of pigs:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你在Minecraft世界里有五只猪，你想编写一个程序以某种方式使用这些猪的数量。在Python中，你可以声明一个整数变量来表示猪的数量：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can also store negative values in variables. For example, to say the temperature
    is negative five degrees, you would set a variable like so:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在变量中存储负值。例如，要表示温度是零下五度，你可以这样设置变量：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To use Python variables and integers with Minecraft, complete the first mission.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Minecraft中使用Python变量和整数，请完成第一个任务。
- en: '**MISSION #1: TELEPORT THE PLAYER**'
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务 #1: 传送玩家**'
- en: In this mission, you’ll explore how variables work by teleporting your player
    to a new location using integers.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，你将通过使用整数将玩家传送到新位置，来探索变量是如何工作的。
- en: 'As shown in [Figure 2-3](ch02.html#ch2fig3), your player has a *position* in
    the Minecraft world that is represented by three *coordinates*: `x`, `y`, and
    `z`. The letter `y` represents height, and `x` and `z` represent horizontal positions
    on a flat plane.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图 2-3](ch02.html#ch2fig3)所示，你的玩家在Minecraft世界中有一个*位置*，由三个*坐标*表示：`x`、`y` 和 `z`。字母
    `y` 代表高度，而 `x` 和 `z` 代表平面上的水平位置。
- en: '![image](graphics/f02-03.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f02-03.jpg)'
- en: '*Figure 2-3: 3D coordinates*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-3: 3D坐标*'
- en: If you’re using the Raspberry Pi version of the game, the player’s position
    is given by three numbers in the top-left corner of the game window, which you
    can see in [Figure 2-4](ch02.html#ch2fig4). If you’re using the desktop edition
    of the game, you can see the player’s coordinates by pressing F3 and finding the
    first line in the second block of text on the left, labeled *XYZ*, as shown in
    [Figure 2-5](ch02.html#ch2fig5).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Raspberry Pi 版游戏，玩家的位置由游戏窗口左上角的三个数字表示，你可以在 [图 2-4](ch02.html#ch2fig4)
    中看到。如果你使用的是桌面版游戏，可以通过按 F3 来查看玩家的坐标，并在左侧第二块文本的第一行找到标有 *XYZ* 的位置，如 [图 2-5](ch02.html#ch2fig5)
    所示。
- en: Move your player around the game and watch the position numbers change; the
    coordinates should update in real time as the player walks. Pretty cool, right?
    But walking long distances takes a long time. Why spend so much time walking when
    you can change positions instantly using Python? Let’s look at how to do this.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏中移动玩家并观察位置数字的变化；坐标应该会实时更新，当玩家行走时，坐标会即时变化。很酷吧？不过，走很远的路需要很长时间。为什么要花那么多时间走路，当你可以通过
    Python 立即改变位置呢？让我们来看看如何实现这一点。
- en: '![image](graphics/f02-04.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-04.jpg)'
- en: '*Figure 2-4: The player’s position displayed in Minecraft: Pi Edition*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-4：Minecraft: Pi Edition 中显示的玩家位置*'
- en: '![image](graphics/f02-05.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-05.jpg)'
- en: '*Figure 2-5: The player’s position displayed in the desktop edition of Minecraft*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-5：桌面版 Minecraft 中显示的玩家位置*'
- en: 'Switch on your computer or Raspberry Pi and follow these steps:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的计算机或 Raspberry Pi，并按照以下步骤操作：
- en: Open IDLE and click **File** ▸ **New File** (or **New Window** on some computers).
    You can see the empty text editor window in [Figure 2-6](ch02.html#ch2fig6). If
    you’re using a Raspberry Pi or have more than one version of Python installed
    on your computer, make sure you use Python 3, not Python 2.7.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 IDLE，点击 **文件** ▸ **新建文件**（或某些计算机上是 **新建窗口**）。你可以在 [图 2-6](ch02.html#ch2fig6)
    中看到空的文本编辑器窗口。如果你使用的是 Raspberry Pi 或计算机上安装了多个版本的 Python，请确保使用 Python 3，而不是 Python
    2.7。
- en: '![image](graphics/f02-06.jpg)'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f02-06.jpg)'
- en: '*Figure 2-6: A new text editor window in IDLE*'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 2-6：IDLE 中的新文本编辑器窗口*'
- en: When the new window appears, click **File** ▸ **Save As**.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当新窗口出现时，点击 **文件** ▸ **另存为**。
- en: Create a new folder called *variables* inside the *Minecraft Python* folder
    that you created in [Chapter 1](ch01.html#ch01).
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 [第 1 章](ch01.html#ch01) 中创建的 *Minecraft Python* 文件夹内，创建一个名为 *variables* 的新文件夹。
- en: Open the *variables* folder, name your file *teleport.py*, and click **Save**.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 *variables* 文件夹，命名你的文件为 *teleport.py*，然后点击 **保存**。
- en: 'Now that you’re working in IDLE’s text editor, add the following two lines
    of code at the top of your program:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你在 IDLE 的文本编辑器中工作，将以下两行代码添加到程序的顶部：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: These lines connect your program to Minecraft; you’ll use them in every program
    that interacts with Minecraft. Next, create three integer variables called `x`,
    `y`, and `z`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行代码将你的程序与 Minecraft 连接；你将在每个与 Minecraft 交互的程序中使用它们。接下来，创建三个整数变量，分别命名为 `x`、`y`
    和 `z`。
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: These variables represent the position that you want to teleport your player
    to. For now, set these variables to 10, 110, and 12, as shown here.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变量表示你想要传送玩家到的位置。现在，将这些变量的值设为 10、110 和 12，如下所示。
- en: 'Then enter the following line of code, which will transport the player:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后输入以下代码行，这将传送玩家：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `setTilePos()` part of the program is a *function*, which is a prewritten
    and reusable piece of code. The `setTilePos(x, y, z)` function tells Minecraft
    to change the player’s position using the three variables you just set. The values
    inside the parentheses are called *arguments*. You *passed* the variables you
    just created to the function as arguments so the function can use the values of
    `x`, `y`, and `z` when it runs.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 程序中的 `setTilePos()` 部分是一个 *函数*，它是一个预先编写且可重用的代码块。`setTilePos(x, y, z)` 函数告诉 Minecraft
    使用你刚刚设置的三个变量来改变玩家的位置。括号中的值叫做 *参数*。你将刚才创建的变量作为参数传递给函数，以便函数在执行时使用 `x`、`y` 和 `z`
    的值。
- en: '**WARNING**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*If you’re using a Raspberry Pi, don’t use values larger than 127 or smaller
    than –127 for the* `x` *and* `z` *variables. The Minecraft Pi world is small,
    and numbers outside this range will crash the game.*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你使用的是 Raspberry Pi，请不要为* `x` *和* `z` *变量使用大于 127 或小于 -127 的值。Minecraft Pi
    版的世界很小，超出此范围的数字会导致游戏崩溃。*'
- en: '[Listing 2-1](ch02.html#ch2ex1) contains the full code to teleport your player,
    which you can also see in [Figure 2-7](ch02.html#ch2fig7):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 2-1](ch02.html#ch2ex1) 包含了完整的代码，用于传送玩家，你也可以在 [图 2-7](ch02.html#ch2fig7)
    中看到：'
- en: '*teleport.py*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*teleport.py*'
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 2-1: The finished teleport code*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*代码清单 2-1：完成的传送代码*'
- en: To make this program easier to understand, I’ve included some *comments* ➊.
    Comments are useful statements in code that describe what the code does but are
    ignored by Python. In other words, when you run the program, Python passes commented
    lines without doing anything. A single-line comment begins with a hash mark (`#`).
    My comments describe what each part of *teleport.py* does. It’s a good habit to
    write comments in your code so you can remember what the parts of your program
    do when you return to them later.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让这个程序更容易理解，我在代码中加入了一些 *注释* ➊。注释是代码中的有用语句，用来描述代码的功能，但 Python 会忽略它们。换句话说，当你运行程序时，Python
    会跳过注释的行而不执行任何操作。单行注释以井号（`#`）开始。我的注释描述了 *teleport.py* 中每个部分的功能。养成在代码中写注释的习惯，这样当你回到程序时，可以帮助你记住每个部分的作用。
- en: '[Figure 2-7](ch02.html#ch2fig7) shows the completed program written in IDLE’s
    text editor.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2-7](ch02.html#ch2fig7) 显示了在 IDLE 文本编辑器中编写的完整程序。'
- en: '![image](graphics/f02-07.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-07.jpg)'
- en: '*Figure 2-7: The completed program in IDLE’s text editor*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-7：在 IDLE 文本编辑器中的完整程序*'
- en: 'Now let’s run the program! Follow these steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们运行程序！按照以下步骤操作：
- en: Open Minecraft by clicking the desktop icon.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击桌面图标打开 Minecraft。
- en: If you’re using a Raspberry Pi, click **Start Game** and **Create a New World**.
    If you’re using the desktop edition of Minecraft, open the game world using the
    instructions in “[Running Spigot and Creating a Game](ch01.html#ch01lev2sec05)”
    on [page 7](ch01.html#page_7) for Windows and on [page 16](ch01.html#page_16)
    for Mac.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用的是 Raspberry Pi，点击 **开始游戏** 和 **创建新世界**。如果你使用的是桌面版 Minecraft，请根据 [第 7 页](ch01.html#page_7)
    Windows 系统和 [第 16 页](ch01.html#page_16) Mac 系统中的“[运行 Spigot 和创建游戏](ch01.html#ch01lev2sec05)”中的说明打开游戏世界。
- en: After the world has been generated, press the ESC key (or TAB if you’re using
    a Raspberry Pi) to release the mouse. You can now move the mouse outside of the
    Minecraft window or double-click the Minecraft window to reselect the game. [Figure
    2-8](ch02.html#ch2fig8) shows the IDLE and Minecraft windows on my computer.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 世界生成后，按 ESC 键（如果你使用的是 Raspberry Pi，请按 TAB）来释放鼠标。你现在可以将鼠标移到 Minecraft 窗口外，或者双击
    Minecraft 窗口重新选择游戏。[图 2-8](ch02.html#ch2fig8) 显示了我电脑上的 IDLE 和 Minecraft 窗口。
- en: '![image](graphics/f02-08.jpg)'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f02-08.jpg)'
- en: '*Figure 2-8: This is how I like to arrange my Minecraft and IDLE text editor
    windows.*'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 2-8：这是我喜欢的 Minecraft 和 IDLE 文本编辑器窗口的排列方式。*'
- en: Click the IDLE text editor window that has your *teleport.py* program.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击包含 *teleport.py* 程序的 IDLE 文本编辑器窗口。
- en: Click **Run** ▸ **Run Module** or press F5. If you haven’t saved the program,
    IDLE will always ask if you want to save before running. Click **OK** to save
    the program. If you click Cancel, the program won’t run.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **运行** ▸ **运行模块** 或按 F5。如果你还没有保存程序，IDLE 会在运行前询问是否保存。点击 **确定** 来保存程序。如果点击“取消”，程序将不会运行。
- en: '**NOTE**'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*When you’re running programs from IDLE on a Raspberry Pi, a dialog asking
    you to save your program might appear and hide itself behind the Minecraft window.
    If you think IDLE has frozen, it might be that the dialog is hiding. Just minimize
    the Minecraft window and click OK in the IDLE dialog. After clicking OK, maximize
    the Minecraft window.*'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '*当你在 Raspberry Pi 上从 IDLE 运行程序时，可能会弹出一个要求你保存程序的对话框，并且它可能会隐藏在 Minecraft 窗口后面。如果你认为
    IDLE 已经冻结，可能是对话框被隐藏了。只需最小化 Minecraft 窗口，然后在 IDLE 对话框中点击“确定”。点击“确定”后，最大化 Minecraft
    窗口。*'
- en: Well done! Your program should now run, and after a few seconds, your player
    should be teleported to coordinates (10, 110, 12), as shown in [Figure 2-9](ch02.html#ch2fig9).
    Your world isn’t the same as mine, so you’ll see some differences when you run
    it on your computer.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 做得好！现在你的程序应该能够运行了，几秒钟后，玩家应该会被传送到坐标 (10, 110, 12)，如 [图 2-9](ch02.html#ch2fig9)
    所示。你的世界可能和我的不一样，所以你在自己电脑上运行时会看到一些不同的地方。
- en: '**BONUS OBJECTIVE: JUMP AROUND**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**附加目标：跳跃**'
- en: Do you think you’ve got the hang of teleportation? Try replacing `x`, `y`, and
    `z` with other integers to see where your player ends up! Try negative values,
    too!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你觉得你已经掌握了传送技能吗？试着将 `x`、`y` 和 `z` 替换为其他整数，看看玩家会出现在什么位置！也可以尝试使用负值！
- en: '![image](graphics/f02-09.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-09.jpg)'
- en: '*Figure 2-9: I’ve teleported from my house to position (10, 110, 12), which
    is above a swamp. Look out below!*'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-9：我已经从我的房子传送到了位置 (10, 110, 12)，那里位于一个沼泽上方。小心下面！*'
- en: '**FLOATS**'
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**浮动**'
- en: Not all numbers are whole numbers. Decimal points are used to represent values
    that can’t be described with whole numbers. For example, you might have half (0.5)
    of an apple. Numbers that use decimal points are called *floating point numbers*,
    or *floats*. This is another data type that Python uses. Floating point numbers
    are used instead of integers when you want to be more precise. Floats can also
    represent whole numbers (as in `3.0`), but integers can’t represent numbers with
    decimal places.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 不是所有数字都是整数。小数点用于表示无法用整数描述的值。例如，你可能只有一个苹果的一半（0.5）。使用小数点的数字被称为*浮点数*，或*浮动数*。这是
    Python 使用的另一种数据类型。当你需要更高精度时，浮点数就代替了整数。浮点数也可以表示整数（如`3.0`），但整数不能表示带小数部分的数字。
- en: You might have noticed that your player’s position coordinates (as shown in
    [Figures 2-4](ch02.html#ch2fig4) and [2-5](ch02.html#ch2fig5)) include decimals,
    which means they’re floats!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，玩家的位置坐标（如[图 2-4](ch02.html#ch2fig4)和[图 2-5](ch02.html#ch2fig5)所示）包含小数，这意味着它们是浮点数！
- en: 'In Python, you declare a float variable in the same way that you declare an
    integer variable. For example, to set the variable `x` to `1.34`, you’d write
    this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，声明浮点变量的方式和声明整数变量的方式相同。例如，要将变量`x`设置为`1.34`，你可以这样写：
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To create a negative float, put a minus sign (`-`) before the value:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个负浮点数，可以在数值前加上负号（`-`）：
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the next mission, you’ll gain even more control over your teleportation powers
    by using floats to teleport the player to precise locations.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个任务中，你将通过使用浮点数将玩家传送到精确位置，获得对传送能力的更大控制。
- en: '**MISSION #2: GO EXACTLY WHERE YOU WANT**'
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务 #2: 精确到你想要的位置**'
- en: 'You learned how to set the player’s position using integers, but you can set
    the player’s position more accurately if you use floats. In this mission, we’ll
    revise the program from [Mission #1](ch02.html#ch02lev2sec05) to teleport the
    player using a float value:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '你已经学习了如何使用整数设置玩家的位置，但如果使用浮点数，你可以更精确地设置玩家的位置。在这个任务中，我们将修改[任务 #1](ch02.html#ch02lev2sec05)中的程序，通过使用浮点值来传送玩家：'
- en: In IDLE, open the *teleport.py* program ([page 34](ch02.html#page_34)) by clicking
    **File** ▸ **Open** and selecting the file from your *variables* folder.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 IDLE 中，打开*teleport.py*程序（见[第34页](ch02.html#page_34)），通过点击**文件** ▸ **打开**并从你的*variables*文件夹中选择该文件。
- en: Save a copy of the program as *teleportPrecise.py* in your *variables* folder.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将程序另存为*teleportPrecise.py*，保存在你的*variables*文件夹中。
- en: In the *teleportPrecise.py* file, change the `x`, `y`, and `z` variables to
    use floats instead of integers. That is, change the values of `x`, `y`, and `z`
    from 10, 110, and 12 to 10.0, 110.0, and 12.0.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在*teleportPrecise.py*文件中，将`x`、`y`和`z`变量更改为使用浮点数，而不是整数。也就是说，将`x`、`y`和`z`的值从10、110和12更改为10.0、110.0和12.0。
- en: Change the last line of code to `mc.player.setPos(x, y, z)` by removing the
    word `Tile`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码的最后一行改为`mc.player.setPos(x, y, z)`，去掉`Tile`这个词。
- en: Save the program.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存程序。
- en: Open a Minecraft world and run the code.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个 Minecraft 世界并运行代码。
- en: 'The final result should look like this:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果应该如下所示：
- en: '*teleportPrecise.py*'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*teleportPrecise.py*'
- en: '[PRE16]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Notice the difference between `mc.player.setPos(x, y, z)`, used here, and `mc.player.setTilePos(x,
    y, z)`, used in [Listing 2-1](ch02.html#ch2ex1). The `setTilePos()` function uses
    integers to tell the game the position of the block that you want to teleport
    to. The `setPos()` function is a little different—it uses floats to tell the game
    the position of the block as well as the precise position *on* that block that
    you want to teleport to. Using my program, I teleported to the top of my tower,
    as shown in [Figure 2-10](ch02.html#ch2fig10).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这里使用的`mc.player.setPos(x, y, z)`与[清单 2-1](ch02.html#ch2ex1)中使用的`mc.player.setTilePos(x,
    y, z)`的区别。`setTilePos()`函数使用整数告诉游戏你想要传送到的方块的位置。而`setPos()`函数稍有不同——它使用浮点数告诉游戏方块的位置，以及你想要传送到该方块上*具体的位置*。通过我的程序，我传送到了我的塔顶，如[图
    2-10](ch02.html#ch2fig10)所示。
- en: '![image](graphics/f02-10.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-10.jpg)'
- en: '*Figure 2-10: I’ve teleported myself to the top of my tower, using floats to
    be very precise.*'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-10: 我已将自己传送到塔顶，使用浮点数来做到非常精确。*'
- en: '**BONUS OBJECTIVE: TELEPORT ACCURATELY**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**附加目标：精确传送**'
- en: Change the values of the `x`, `y`, and `z` variables using a mixture of positive
    and negative floats and run the program. Then, change the decimal values slightly
    from your new ones. What happens?
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 使用混合的正负浮点数更改`x`、`y`和`z`变量的值，并运行程序。然后，稍微调整这些新值的十进制部分。会发生什么？
- en: '**SLOWING DOWN TELEPORTATION USING THE TIME MODULE**'
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**通过时间模块减慢传送速度**'
- en: Python runs your code as fast as possible. But you can slow down the action
    by making your programs wait a certain number of seconds before continuing.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Python 运行代码的速度尽可能快。但是你可以通过让程序在继续执行之前等待一定的秒数来放慢动作。
- en: 'To use time in your programs, you need the `time` module, which contains a
    set of prewritten functions relating to time. To use the `time` module, add the
    following line of code to the top of your programs:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要在你的程序中使用时间，你需要 `time` 模块，它包含了一组与时间相关的预编写函数。要使用 `time` 模块，在你的程序顶部添加以下代码：
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Order is very important when you’re using the `time` module and the `sleep()`
    function, which is part of the `time` module. The `sleep()` function will make
    a program wait a specified number of seconds before continuing. You must always
    import the `time` module before you use the `sleep()` function. If you don’t,
    Python won’t be able to find the `sleep()` function and will be so confused that
    it will stop your program from running. This is why it’s best to import any module
    you use at the top of your code. All of your `import` statements will be grouped
    together at the top of the program. For example, I usually include the lines of
    code to connect to Minecraft first, and then add the `import time` statement on
    the third line.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `time` 模块和 `sleep()` 函数时，顺序非常重要，`sleep()` 函数是 `time` 模块的一部分。`sleep()` 函数会使程序等待指定的秒数后再继续。如果你不先导入
    `time` 模块，Python 将找不到 `sleep()` 函数，它会变得如此困惑，以至于会停止程序运行。这就是为什么最好在代码的顶部导入你使用的任何模块的原因。你所有的
    `import` 语句都会被集中在程序的顶部。例如，我通常首先包括连接到 Minecraft 的代码，然后在第三行添加 `import time` 语句。
- en: 'Here is an example of how to use the `sleep()` function:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何使用 `sleep()` 函数的示例：
- en: '[PRE18]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This line of code pauses your program for five seconds. You can use any number,
    including integers and floats, as the following example shows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行代码将使程序暂停五秒钟。你可以使用任何数字，包括整数和浮动数值，如以下示例所示：
- en: '[PRE19]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: When your program reaches this line of code, it will wait 0.2 seconds. Now that
    you can control the flow of time, you’re ready for the next mission!
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序到达这一行代码时，它将等待 0.2 秒。现在你可以控制时间的流动了，准备好迎接下一个任务！
- en: '**MISSION #3: TELEPORTATION TOUR**'
  id: totrans-144
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务 #3：传送门之旅**'
- en: The beauty of teleportation in Minecraft is that you can send your player anywhere.
    Using all the skills you’ve learned so far, you’ll send your player on an automated
    tour of your entire Minecraft world!
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Minecraft 中传送的美妙之处在于你可以把玩家传送到任何地方。利用到目前为止学到的所有技能，你将让玩家在整个 Minecraft 世界中进行自动化旅游！
- en: 'In this mission, you’ll practice changing the values of variables by modifying
    the code from [Mission #1](ch02.html#ch02lev2sec05) ([page 31](ch02.html#page_31))
    to teleport the player to several locations across the map. The player will teleport
    to one location, wait a few seconds, and then teleport to another location.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '在这个任务中，你将通过修改[任务 #1](ch02.html#ch02lev2sec05)中的代码（[第31页](ch02.html#page_31)）来练习更改变量的值，将玩家传送到地图上的多个位置。玩家将传送到一个位置，等待几秒钟，然后传送到另一个位置。'
- en: In IDLE, open the *teleport.py* program ([page 34](ch02.html#page_34)) by clicking
    **File** ▸ **Open** and selecting the file from your *variables* folder.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 IDLE 中，通过点击 **文件** ▸ **打开**，并从你的 *variables* 文件夹中选择文件，打开 *teleport.py* 程序（[第34页](ch02.html#page_34)）。
- en: Save a copy of the program as *tour.py* in your *variables* folder.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将程序保存为 *tour.py* 文件到你的 *variables* 文件夹中。
- en: Just after the code that connects your program to Minecraft, add `import time`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在连接程序与 Minecraft 的代码之后，添加 `import time`。
- en: At the end of the program, add `time.sleep(10)`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在程序的末尾添加 `time.sleep(10)`。
- en: Copy the lines with the `x`, `y`, and `z` variables and the `setTilePos()` function
    and paste them at the end of the program, so those lines appear twice.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制包含 `x`、`y` 和 `z` 变量以及 `setTilePos()` 函数的行，并将它们粘贴到程序的末尾，这样这些行将出现两次。
- en: Change the values of both sets of `x`, `y`, and `z` variables to any numbers
    you want. You can find the coordinates for any position in your game by moving
    there and writing down the player’s coordinates like you did earlier in this chapter.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个 `x`、`y` 和 `z` 变量的值更改为你想要的任何数字。你可以通过移动到游戏中的某个位置并像本章前面所做的那样记录玩家的坐标，来找到游戏中任何位置的坐标。
- en: Save the program.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存程序。
- en: Open a Minecraft world and run the code.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个 Minecraft 世界并运行代码。
- en: 'The final result should look like this, with new coordinates filled in:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的结果应该像这样，填入新的坐标：
- en: '*tour.py*'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '*tour.py*'
- en: '[PRE20]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The player should teleport to the first location, wait 10 seconds, and then
    teleport to the second location, as shown in [Figure 2-11](ch02.html#ch2fig11).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家应该传送到第一个位置，等待 10 秒钟，然后传送到第二个位置，如[图 2-11](ch02.html#ch2fig11)所示。
- en: '**BONUS OBJECTIVE: MORE TELEPORTATION**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**额外目标：更多的传送**'
- en: Copy the *tour.py* code to move the player as many times as you want. Replace
    the `10` in the function `time.sleep(10)` with a different value. You could even
    use a different number for each `sleep()` function so your player waits a different
    amount of time at each location.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 复制*tour.py*代码，重复移动玩家多次。将函数`time.sleep(10)`中的`10`替换为不同的值。你甚至可以为每个`sleep()`函数使用不同的数字，让你的玩家在每个位置等待不同的时间。
- en: Then edit the code so that between teleports, only one of the `x`, `y`, and
    `z` variables changes. You don’t have to change every variable every time! Try
    using floats instead of integers, too.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 然后编辑代码，使得在两次传送之间，只有 `x`、`y` 和 `z` 中的一个变量发生变化。每次都修改所有变量是不必要的！尝试使用浮点数而不是整数。
- en: '![image](graphics/f02-11.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-11.jpg)'
- en: '*Figure 2-11: I’ve set the coordinates in my program to teleport to my house
    and then to teleport to the desert.*'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-11：我已在程序中设置坐标，使玩家先传送到我的房子，然后再传送到沙漠。*'
- en: '**DEBUGGING**'
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**调试**'
- en: Everyone makes mistakes; often, even the best programmers don’t get their code
    right the first time. Writing a program that works is just one skill that a good
    programmer needs. Fixing programs when they don’t work is another essential skill.
    This process is called *debugging*, and each problem in a misbehaving program
    is called a *bug*. In this section, you’ll learn tips and tricks to fix all your
    future programs.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都会犯错；即使是最优秀的程序员也不可能第一次就写对代码。写出一个能够正常运行的程序是一个好程序员需要的技能，而在程序无法正常运行时进行修复是另一个至关重要的技能。这个过程叫做*调试*，在一个出现问题的程序中，每个问题都叫做*bug*。在本节中，你将学习修复所有未来程序的技巧和方法。
- en: Bugs can completely stop a program from running, or they can make the program
    behave in an unexpected way. When a program doesn’t run, Python will show you
    an error message, such as the one in [Figure 2-12](ch02.html#ch2fig12).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 错误可以完全阻止程序运行，或者使程序以意想不到的方式运行。当程序无法运行时，Python 会显示错误信息，比如[图 2-12](ch02.html#ch2fig12)中的错误信息。
- en: '![image](graphics/f02-12.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-12.jpg)'
- en: '*Figure 2-12: Python gives me an error message because I didn’t stick to Python’s
    syntax.*'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-12：Python 给我提示错误，因为我没有遵循 Python 的语法。*'
- en: 'In [Figure 2-12](ch02.html#ch2fig12) you can see that I’ve entered some code
    in the Python shell, and it has returned an error message. A lot of information
    is displayed in the error message, but based on the last line (`NameError: name
    ''x'' is not defined`) I can tell that something is wrong with my `x` variable.
    Specifically, the `x` variable has not been defined. To fix this, I need to add
    an extra line of code that defines the `x` variable, like so:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '在[图 2-12](ch02.html#ch2fig12)中，你可以看到我在 Python shell 中输入了一些代码，并且它返回了一个错误信息。错误信息中显示了很多内容，但根据最后一行（`NameError:
    name ''x'' is not defined`），我可以判断是我的`x`变量出了问题。具体来说，`x`变量没有被定义。为了解决这个问题，我需要添加一行代码来定义`x`变量，像这样：'
- en: '[PRE21]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This line will fix the error message, but it doesn’t mean all errors will be
    fixed.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行代码将修复错误信息，但这并不意味着所有的错误都会被修复。
- en: Bugs that allow the program to run but cause it to behave strangely won’t show
    an error message, but you’ll know something is wrong when your program produces
    an unexpected result. For example, if you forget to write a line of code in your
    teleportation programs, such as `setTilePos()`, the program will run without any
    errors, but the player won’t change position. That’s not a very useful teleportation
    program!
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 允许程序运行但导致它行为异常的错误不会显示错误信息，但当程序产生意外结果时，你就会知道出了问题。例如，如果你忘记在传送程序中写一行代码，比如`setTilePos()`，程序会正常运行，但玩家的位置不会改变。这可不是一个有用的传送程序！
- en: '**WARNING**'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*Typos are among the most common causes of bugs. Spelling something in a way
    the computer doesn’t expect can stop your program from running. Be careful, and
    make sure your spelling and capitalization are correct!*'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '*拼写错误是导致程序出错的常见原因之一。拼写错误会让计算机无法理解，从而阻止程序的运行。小心，确保你的拼写和大小写正确！*'
- en: '**MISSION #4: FIX THE BUGGY TELEPORTATION**'
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务 #4：修复有问题的传送**'
- en: In this mission, you’ll debug two programs. The first program, [Listing 2-2](ch02.html#ch2ex2),
    is similar to *teleport.py* ([page 34](ch02.html#page_34)), but this version has
    five mistakes. Open a new file in the IDLE text editor, copy [Listing 2-2](ch02.html#ch2ex2)
    into it, and save it as *teleportBug1.py*.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，你将调试两个程序。第一个程序，[清单 2-2](ch02.html#ch2ex2)，与*teleport.py*（[第34页](ch02.html#page_34)）类似，但这个版本有五个错误。在IDLE文本编辑器中打开一个新文件，将[清单
    2-2](ch02.html#ch2ex2)复制到其中，并保存为*teleportBug1.py*。
- en: '*teleportBug1.py*'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '*teleportBug1.py*'
- en: '[PRE22]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '*Listing 2-2: A broken version of the teleport program*'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 2-2：损坏版的传送程序*'
- en: 'To debug this program, complete the following steps:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要调试这个程序，完成以下步骤：
- en: Run *teleportBug1.py*.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行*teleportBug1.py*。
- en: When you get an error message, read the last line for a hint about what’s wrong.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你遇到错误消息时，阅读最后一行，获取关于问题的提示。
- en: Correct the bug and run the code again.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修正错误并再次运行代码。
- en: Keep correcting the bugs until the program teleports the player to a new location.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续修复程序中的错误，直到程序将玩家传送到新的位置。
- en: '**HINT**'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: '*Don’t forget to double-check that you’re actually calling the* `setTilePos()`
    *function!*'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '*不要忘记仔细检查你是否实际调用了* `setTilePos()` *函数！*'
- en: Let’s try debugging another program. The version of *teleport.py* in [Listing
    2-3](ch02.html#ch2ex3) runs, but for some reason, the player doesn’t teleport
    to the specified position. Copy [Listing 2-3](ch02.html#ch2ex3) into an IDLE file
    and save it as *teleportBug2.py*.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试调试另一个程序。[清单 2-3](ch02.html#ch2ex3)中的*teleport.py*可以运行，但由于某些原因，玩家没有传送到指定的位置。将[清单
    2-3](ch02.html#ch2ex3)复制到IDLE文件中，并保存为*teleportBug2.py*。
- en: '*teleportBug2.py*'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '*teleportBug2.py*'
- en: '[PRE23]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '*Listing 2-3: The teleport program with bugs*'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 2-3：带有错误的传送程序*'
- en: Unlike with *teleportBug1.py*, you won’t get any error messages when you run
    the program. To fix this program, you’ll need to read the code until you find
    the mistake. The program should teleport the player to position (10, 110, –12).
    Run the program and check the coordinates that the player has teleported to. This
    might help you debug the program and identify the problem with it.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 与*teleportBug1.py*不同，运行该程序时你不会收到任何错误消息。要修复该程序，你需要阅读代码直到找到错误。程序应该将玩家传送到位置(10,
    110, -12)。运行程序并检查玩家被传送到的坐标。这可能帮助你调试程序并找出问题所在。
- en: When you’ve squashed all the bugs in these two programs, add a comment to each
    to explain what the problems were. Jotting down problems you encounter in debugging
    can help you remember to watch out for similar bugs in the future.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 当你修复了这两个程序中的所有错误后，给每个程序添加注释，解释问题所在。记录调试过程中遇到的问题，可以帮助你记住以后要注意类似的错误。
- en: '**WHAT YOU LEARNED**'
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: 'Congratulations! You’ve written your first Python programs to control a Minecraft
    player through the power of variables and functions. You explored two data types
    (integers and floats), controlled time, and debugged broken programs. You also
    learned two useful functions specific to the Minecraft Python API: `setPos()`
    and `setTilePos()`.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你！你已经写出了第一个Python程序，通过变量和函数控制Minecraft玩家。你探索了两种数据类型（整数和浮点数），控制了时间，并调试了损坏的程序。你还学会了Minecraft
    Python API中两个非常有用的函数：`setPos()`和`setTilePos()`。
- en: In [Chapter 3](ch03.html#ch03), you’ll master the art of speed building in Minecraft,
    using mathematical operations and functions that set blocks!
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](ch03.html#ch03)中，你将掌握Minecraft中的快速建造技巧，使用数学运算和设置方块的函数！
