- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Accepting User Input with Touchscreens
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 接受触摸屏的用户输入
- en: In this chapter you will
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将
- en: Learn how to connect a resistive touchscreen to your Arduino
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何将电阻式触摸屏连接到 Arduino
- en: Discover the values that can be returned from the touchscreen
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索触摸屏可以返回的值
- en: Create a simple on/off touch switch
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的开关
- en: Learn how to use the `map()` function
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用 `map()` 函数
- en: Create an on/off touch switch with a dimmer-style control
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个带有调光控制的开关
- en: 'We see touchscreens everywhere today: on smartphones, tablets, and even portable
    video game systems. So why not use a touchscreen to accept input from an Arduino
    user?'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，我们随处可见触摸屏：在智能手机、平板电脑甚至便携式游戏机上。那么为什么不使用触摸屏来接收 Arduino 用户的输入呢？
- en: Touchscreens
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 触摸屏
- en: Touchscreens can be quite expensive, but we’ll use an inexpensive model available
    from Adafruit (part numbers 333 and 3575), originally designed for the Nintendo
    DS game console.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 触摸屏可能相当昂贵，但我们将使用一款价格便宜的型号，来自 Adafruit（零件号 333 和 3575），最初为 Nintendo DS 游戏机设计。
- en: This touchscreen, which measures about 2.45 by 3 inches, is shown in [Figure
    12-1](#figure12-1).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个触摸屏的尺寸大约是 2.45 x 3 英寸，如 [图 12-1](#figure12-1) 所示。
- en: '![f12001](image_fi/500587c12/f12001.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![f12001](image_fi/500587c12/f12001.png)'
- en: 'Figure 12-1: A touchscreen mounted on a solderless breadboard'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12-1：安装在无焊接面包板上的触摸屏
- en: Notice the horizontal ribbon cable connected to the small circuit board on the
    right. This *breakout board* is used to attach the Arduino and the breadboard
    to the touchscreen. The header pins included with the breakout board will need
    to be soldered before use. [Figure 12-2](#figure12-2) shows a close-up of the
    breakout board.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注意右侧小电路板上连接的水平排线。这个 *扩展板* 用来将 Arduino 和面包板连接到触摸屏。扩展板附带的插针需要在使用前进行焊接。[图 12-2](#figure12-2)
    显示了扩展板的特写。
- en: '![f12002](image_fi/500587c12/f12002.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![f12002](image_fi/500587c12/f12002.png)'
- en: 'Figure 12-2: The touchscreen breakout board'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12-2：触摸屏扩展板
- en: Connecting the Touchscreen
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接触摸屏
- en: Connect the touchscreen breakout board to an Arduino as shown in [Table 12-1](#table12-1).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 按照 [表 12-1](#table12-1) 中的说明将触摸屏扩展板连接到 Arduino。
- en: 'Table 12-1: Touchscreen Breakout Board Connections'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 表 12-1：触摸屏扩展板连接
- en: '| **Breakout board pin** | **Arduino pin** |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| **扩展板引脚** | **Arduino 引脚** |'
- en: '| --- | --- |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| X− | A3 |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| X− | A3 |'
- en: '| Y+ | A2 |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| Y+ | A2 |'
- en: '| X+ | A1 |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| X+ | A1 |'
- en: '| Y− | A0 |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| Y− | A0 |'
- en: 'Project #33: Addressing Areas on the Touchscreen'
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #33：在触摸屏上处理区域'
- en: The touchscreen has two layers of resistive coating between the top layer of
    plastic film and the bottom layer of glass. One coating acts as the x-axis, and
    the other is the y-axis. As current passes through each coating, the resistance
    of the coating varies depending on where it has been touched; when the current
    is measured, the x and y positions of the touched area can be determined.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 触摸屏有两层电阻涂层，位于上层塑料膜和下层玻璃之间。一层涂层作为 x 轴，另一层作为 y 轴。当电流通过每层涂层时，涂层的电阻会根据触摸位置的不同而变化；通过测量电流，可以确定触摸区域的
    x 和 y 坐标。
- en: In this project, we’ll use the Arduino to record touched locations on the screen.
    We’ll also have it convert information from the touches into integers that represent
    areas of the screen.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将使用 Arduino 来记录触摸屏上的触摸位置。我们还将把触摸信息转换为表示屏幕区域的整数。
- en: The Hardware
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'The following hardware is required:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下硬件是必需的：
- en: One Adafruit touchscreen, part 333
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块 Adafruit 触摸屏，零件号 333
- en: One Adafruit breakout board, part 3575
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块 Adafruit 扩展板，零件号 3575
- en: Male-to-male jumper wires
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公对公跳线
- en: One solderless breadboard
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个无焊接面包板
- en: Arduino and USB cable
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino 和 USB 电缆
- en: Connect the touchscreen as described in [Table 12-1](#table12-1) and connect
    the Arduino to the PC via the USB cable.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 按照 [表 12-1](#table12-1) 中的说明连接触摸屏，并通过 USB 电缆将 Arduino 连接到 PC。
- en: The Sketch
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'Enter and upload the following sketch:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并上传以下草图：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The functions `readX()` and `readY()` at 1 and 2 read the current from the touchscreen’s
    resistive layers, measure it using `analogRead()`, and return the read values.
    The sketch rapidly runs these two functions to provide the real-time position
    of the screen area being touched and displays this information in the Serial Monitor
    at 3 and 4. (The `delay(5)` in each function is required to allow the input/output
    pins time to change their states.)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `readX()` 和 `readY()` 在 1 和 2 位置读取触摸屏电阻层的电流，使用 `analogRead()` 测量并返回读取的值。该草图快速运行这两个函数，以提供触摸的屏幕区域的实时位置，并在
    3 和 4 位置的串口监视器中显示这些信息。（每个函数中的 `delay(5)` 是必要的，以允许输入/输出引脚有时间改变其状态。）
- en: Testing the Sketch
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试草图
- en: To test the sketch, watch the Serial Monitor window while you touch the screen
    and notice how the x and y values change as you move your finger around the screen.
    Also take note of the values displayed when the screen is not being touched, as
    shown in [Figure 12-3](#figure12-3).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 测试草图时，触摸屏幕并观察串口监视器窗口，注意当你在屏幕上移动手指时，x 和 y 的值是如何变化的。同时注意当屏幕未被触摸时显示的值，如 [图 12-3](#figure12-3)
    所示。
- en: '![f12003](image_fi/500587c12/f12003.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![f12003](image_fi/500587c12/f12003.png)'
- en: 'Figure 12-3: Values that appear when the touchscreen is not touched'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12-3：触摸屏未触摸时显示的值
- en: You can use the values that display when you’re not touching the screen in your
    sketch to detect when the screen is not being touched. Also, displays may vary
    slightly, so it is important to map out your own unit so you have an understanding
    of its display boundaries.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在草图中使用当未触摸屏幕时显示的值，来检测屏幕是否未被触摸。此外，显示可能会略有不同，因此映射出你自己设备的显示范围非常重要。
- en: Mapping the Touchscreen
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 映射触摸屏
- en: You can plot the coordinates for each corner of your touchscreen by touching
    the corners of the screen and recording the values returned, as shown in [Figure
    12-4](#figure12-4).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过触摸屏幕的每个角并记录返回的值，来绘制触摸屏每个角的坐标，如 [图 12-4](#figure12-4) 所示。
- en: '![f12004](image_fi/500587c12/f12004.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![f12004](image_fi/500587c12/f12004.png)'
- en: 'Figure 12-4: A touchscreen map'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12-4：触摸屏地图
- en: After you’ve created your touchscreen map, you can mathematically divide it
    into smaller regions, which you can then use with `if` statements to cause specific
    actions to occur depending on where the screen is touched. We’ll do that in Project
    34.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了触摸屏地图后，你可以将其数学上划分为更小的区域，然后使用 `if` 语句根据触摸屏幕的位置来触发特定的操作。在项目 34 中我们会这么做。
- en: 'Project #34: Creating a Two-Zone On/Off Touch Switch'
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #34：创建一个双区开/关触摸开关'
- en: In this project, we’ll use our touchscreen map to create an on/off switch. Start
    by dividing the touchscreen in half vertically, as shown in [Figure 12-5](#figure12-5).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将使用触摸屏地图来创建一个开/关开关。首先，像 [图 12-5](#figure12-5) 所示，垂直地将触摸屏分成两半。
- en: The Arduino will determine which zone of the screen was touched by comparing
    the recorded coordinates of the touch to the boundaries of each half of the screen.
    When the zone has been determined, the code responds by returning `on` or `off`
    (though it could also send an on or off signal to a device).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino 将通过将触摸记录的坐标与屏幕每一半的边界进行比较，来确定触摸的是屏幕的哪个区域。当区域确定后，代码通过返回 `on` 或 `off` 来响应（尽管它也可以向设备发送开或关的信号）。
- en: '![f12005](image_fi/500587c12/f12005.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![f12005](image_fi/500587c12/f12005.png)'
- en: 'Figure 12-5: On/off switch map'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12-5：开/关开关地图
- en: The Sketch
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'Enter and upload the following sketch:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并上传以下草图：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Understanding the Sketch
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解草图
- en: The two `if` statements used in `void loop()` check for a touch on the left
    or right side of the screen. If the left side is touched, the touch is detected
    as an “on” press at 1. If the right side is touched (an “off” press), the touch
    is detected at 2.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `void loop()` 中使用的两个 `if` 语句检查屏幕左侧或右侧的触摸。如果左侧被触摸，则触摸被检测为“开”按下（1）。如果右侧被触摸（“关”按下），则触摸被检测为（2）。
- en: Testing the Sketch
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试草图
- en: The output of this sketch is shown in [Figure 12-6](#figure12-6). The status
    of the switch and the coordinates are shown after each screen touch.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图的输出如 [图 12-6](#figure12-6) 所示。开关的状态和坐标在每次触摸屏幕后显示。
- en: '![f12006](image_fi/500587c12/f12006.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![f12006](image_fi/500587c12/f12006.png)'
- en: 'Figure 12-6: Output from Project 34'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12-6：项目 34 的输出
- en: Using the map() Function
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 map() 函数
- en: There may come a time when you need to convert an integer that falls within
    one range into a value that falls into another range. For example, the x values
    of your touchscreen might run from 100 to 900, but you might have to translate
    that to a range of 0 to 255 to control an 8-bit output.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能需要将一个整数从一个范围转换为另一个范围。例如，触摸屏的 x 值可能从 100 到 900，但你可能需要将其转换为 0 到 255 的范围，以控制一个
    8 位输出。
- en: 'To do this we use the `map()` function, which is laid out as:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们使用 `map()` 函数，其布局如下：
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For example, to translate 450 on the touchscreen to the range 0–255, you would
    use this code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要将触摸屏上的 450 转换到 0-255 范围，你可以使用以下代码：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This would give `x` a value of 95\. You’ll use the `map()` function in Project
    35.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给`x`一个值 95。你将在项目 35 中使用 `map()` 函数。
- en: 'Project #35: Creating a Three-Zone Touch Switch'
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #35：创建三区触摸开关'
- en: In this project, we’ll create a three-zone touch switch for an LED on digital
    pin 3 that turns the LED on or off and adjusts the brightness from 0 to 255 using
    PWM (as explained in Chapter 3).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将为数字引脚 3 上的 LED 创建一个三区触摸开关，它可以控制 LED 的开关状态并通过 PWM 调节亮度，从 0 到 255（如第三章所述）。
- en: The Touchscreen Map
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 触摸屏地图
- en: Our touchscreen map is shown in [Figure 12-7](#figure12-7).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的触摸屏地图如[图 12-7](#figure12-7)所示。
- en: '![f12007](image_fi/500587c12/f12007.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![f12007](image_fi/500587c12/f12007.png)'
- en: 'Figure 12-7: Touchscreen map for a three-zone touch switch'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12-7：三区触摸开关的触摸屏地图
- en: The touchscreen map is divided into off and on zones and a brightness control
    zone. We measure the values returned by the touchscreen to determine which part
    has been touched, then react accordingly.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 触摸屏地图分为关机区、开机区和亮度控制区。我们测量触摸屏返回的值，以确定哪个区域被触摸，然后作出相应反应。
- en: The Sketch
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'Enter and upload the following sketch:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并上传以下草图：
- en: '[PRE4]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Understanding the Sketch
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解草图
- en: Like the sketch for the two-zone map, this sketch will check for touches in
    the on and off zones (which are now smaller, because half the screen is reserved
    for the brightness zone) at 2 and 3 and for any touches above the horizontal divider,
    which we’ll use to determine brightness, at 4. If the screen is touched in the
    brightness area, the position on the x-axis is converted to a relative value for
    PWM using the `map()` function at 1, and the LED is adjusted accordingly using
    the function `setBrightness()`*.*
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 与两区地图的草图类似，这个草图将检查在开机区和关机区的触摸（现在更小，因为一半屏幕已分配给亮度控制区），分别在 2 和 3 处检查，同时在水平分隔线以上的任何触摸我们用来确定亮度，在
    4 处检查。如果触摸屏触摸到了亮度区域，则使用 `map()` 函数在 1 处将 x 轴上的位置转换为相对值，用于 PWM 控制，LED 将根据 `setBrightness()`*
    函数进行调节。
- en: You can use these same functions to create any number of switches or sliders
    with this simple and inexpensive touchscreen. Furthermore, you could create your
    own library to easily return X and Y values and control the brightness in any
    sketch you write in the future.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这些相同的函数来创建任意数量的开关或滑块，使用这个简单且便宜的触摸屏。此外，你还可以创建自己的库，以便轻松返回 X 和 Y 值，并在未来写的任何草图中控制亮度。
- en: Looking Ahead
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展望未来
- en: This chapter introduced you to the touchscreen, another way of accepting user
    data and controlling your Arduino. In the next chapter, we’ll focus on the Arduino
    board itself, learn about some of the different versions available, and create
    our own version on a solderless breadboard.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了触摸屏，另一种接受用户数据并控制 Arduino 的方式。在下一章，我们将重点讲解 Arduino 板本身，了解一些不同版本的 Arduino，并在无焊接面包板上创建我们自己的版本。
