- en: Chapter 7. Selectively Printing and Deleting Lines
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第7章 选择性地打印和删除行
- en: In this chapter, we’ll examine various one-liners that print and delete certain
    lines. These one-liners will, for example, print repeated lines, print the shortest
    line in a file, and print lines that match certain patterns.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究各种打印和删除特定行的单行代码。这些单行代码将例如打印重复的行、打印文件中最短的行，以及打印匹配某些模式的行。
- en: But every one-liner that prints certain lines can also be viewed as one that
    deletes the lines that aren’t printed. For example, a one-liner that prints all
    unique lines deletes all repeated lines. I’ll discuss only the one-liners that
    print something, rather than delete something, because one is always the inverse
    of the other.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，每个打印特定行的单行代码也可以被视为删除那些未打印的行。例如，一个打印所有唯一行的单行代码会删除所有重复的行。我只讨论打印内容的单行代码，而不是删除内容的单行代码，因为一个总是另一个的反操作。
- en: 7.1 Print the first line of a file (emulate head -1)
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.1 打印文件的第一行（模拟`head -1`）
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This one-liner is quite simple. Perl reads the first line into the `$_` variable,
    thanks to the `-n` option, and then calls `print` to print the contents of the
    `$_` variable. Then it just exits. That’s it. The first line is printed and that’s
    what you want.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行代码非常简单。由于`-n`选项，Perl将第一行读取到`$_`变量中，然后调用`print`打印`$_`变量的内容。然后它就退出了。就这样。第一行被打印，这正是你想要的。
- en: 'You might also say that this one-liner deletes all lines except the first one.
    But don’t worry. This particular one-liner won’t delete the contents of the file
    unless you also specify the `-i` command-line argument, like this:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以说这个单行代码删除了除了第一行之外的所有行。但不用担心。这个特定的单行代码不会删除文件内容，除非你还指定了`-i`命令行参数，像这样：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As I explained in [Chapter 1](ch01.html "Chapter 1. Introduction to Perl One-Liners")
    and in one-liner 6.1 on page 59, the `-i` argument edits the file in-place. In
    this case, all the lines in the file would be deleted except for the first. When
    using `-i`, always specify a backup extension to it, like this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在[第1章](ch01.html "第1章：Perl单行代码简介")和第59页的单行代码6.1中所解释的，`-i`参数会就地编辑文件。在这种情况下，文件中的所有行都会被删除，除了第一行。使用`-i`时，务必指定一个备份扩展名，像这样：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will create a backup file *file.bak* before the contents are overwritten.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在内容被覆盖之前创建一个备份文件*file.bak*。
- en: You can add the `-i` command-line argument to any of the one-liners to change
    the file content. If you don’t use the `-i` argument, the one-liners simply print
    the new content of the file to screen rather than modifying the file.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以向任何单行代码添加`-i`命令行参数来更改文件内容。如果不使用`-i`参数，单行代码只会将文件的新内容打印到屏幕上，而不会修改文件。
- en: 7.2 Print the first 10 lines of a file (emulate head -10)
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.2 打印文件的前10行（模拟`head -10`）
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This one-liner uses the `$.` special variable, which stands for “the current
    line number.” Each time Perl reads in a line, it increments `$.` by 1, so clearly
    this one-liner simply prints the first 10 lines.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行代码使用了`$.`特殊变量，它表示“当前行号”。每当Perl读取一行时，它会将`$.`增加1，因此很明显，这个单行代码只是打印前10行。
- en: 'This one-liner can also be written without the `if` statement:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行代码也可以不使用`if`语句来编写：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, `print` is called only if the Boolean expression `$. <= 10` is true, and
    this expression is true only if the current line number is less than or equal
    to 10.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，只有当布尔表达式`$. <= 10`为真时才会调用`print`，这个表达式只有在当前行号小于或等于10时才为真。
- en: 'Another, though somewhat trickier, way to do this is with the range operator
    (`..`) in the scalar context:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种稍微复杂一些的方法是使用标量上下文中的范围操作符（`..`）：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The range operator in the scalar context returns a Boolean value. The operator
    is *bistable*, like a flip-flop, and emulates the *line-range* (comma) operator
    in sed, awk, and various text editors. Its value is false as long as its left
    operand is false. Once the left operand is true, the range operator is true until
    the right operand is true, after which the range operator becomes false again.
    As a result, this bistable operator becomes true at the first line, stays true
    until the tenth line, and then becomes and remains false.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 标量上下文中的范围操作符返回一个布尔值。这个操作符是*双稳态*的，像一个触发器，模拟了sed、awk以及各种文本编辑器中的*行范围*（逗号）操作符。只要左操作数为假，操作符的值就是假。一旦左操作数为真，范围操作符为真，直到右操作数为真，此时范围操作符又变为假。因此，这个双稳态操作符在第一行时变为真，保持真直到第十行，然后变为假并保持为假。
- en: 'A fourth option is to follow the first example in this chapter:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第四种选择是遵循本章中的第一个示例：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, I put a condition on `exit`, which is that the current line (which I just
    printed) is number 10.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我对`exit`加了一个条件，即当前行（我刚刚打印的行）是第10行。
- en: 7.3 Print the last line of a file (emulate tail -1)
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.3 打印文件的最后一行（模拟`tail -1`）
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Printing the last line of a file is trickier than printing the first line, because
    you never know which is the last line. As a result, you always have to keep the
    line you just read in memory. In this one-liner, you always save the current line
    held in `$_` into the `$last` variable. When the Perl program ends, it executes
    the code in the `END` block, which prints the last line read.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 打印文件的最后一行比打印第一行要复杂，因为你永远无法知道哪一行是最后一行。因此，你总是需要将刚刚读取的行保存在内存中。在这个单行代码中，你会将当前行`$_`保存到`$last`变量中。当Perl程序结束时，它会执行`END`块中的代码，打印最后一行读取的内容。
- en: 'Here’s another way to do this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有另一种做法：
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This one-liner uses the `eof` (or end-of-file) function, which returns 1 if
    the next read returns the end-of-file. Because the next read after the last line
    in the file will return the end-of-file, this one-liner does the job. The next
    read means that Perl will attempt to read a character from the current file, and
    if reading the character fails, it will signal that the end-of-file has been reached,
    meaning the whole file has been read. If the read succeeds, Perl secretly puts
    the character back in the input stream as if nothing had happened.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行代码使用了`eof`（或文件结束）函数，它会返回1，如果下一个读取操作返回文件结尾。因为在文件的最后一行之后，下一次读取将返回文件结尾，所以这个单行代码可以完成任务。下一次读取意味着Perl会尝试从当前文件中读取一个字符，如果读取失败，它会发出到达文件结尾的信号，表示整个文件已被读取。如果读取成功，Perl会悄悄地将该字符放回输入流，就好像什么都没有发生一样。
- en: 7.4 Print the last 10 lines of a file (emulate tail -10)
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.4 打印文件的最后10行（模拟`tail -10`）
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This one-liner is a bit tricky. Here, you push each line to the `@a` array and
    then replace `@a` with a slice of itself if the list contains more than 10 elements.
    The phrase `@a = @a[@a-10..$#a]` means “replace `@a` with the last 10 elements
    of `@a`.” The bit `@a-10` causes `@a` to be evaluated in the scalar context, and
    thus it returns the number of elements in the array minus 10\. The expression
    `$#a` is the last index in the `@a` array. And finally, `@a[@a-10..$#a]` slices
    (returns) the last 10 elements of the array, with which it overwrites `@a` itself
    so it always contains only the last 10 elements.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行代码有点复杂。在这里，你将每一行推入`@a`数组，然后如果数组中包含超过10个元素，就用其最后10个元素替换`@a`。表达式`@a = @a[@a-10..$#a]`的意思是“用`@a`的最后10个元素替换`@a`”。`@a-10`会使`@a`在标量上下文中进行求值，因此返回数组元素的数量减去10。表达式`$#a`是`@a`数组的最后一个索引。最后，`@a[@a-10..$#a]`进行切片（返回）数组的最后10个元素，并用它来覆盖`@a`，使其始终只包含最后10个元素。
- en: For example, suppose `@a` contains `(line1, line2, line3, line4)`, and you want
    to print the last four lines of the file. When you read the fifth line, the array
    becomes `(line1, line2, line3, line4, line5)`, and the value of `@a-4` is 1 because
    `@a` in the scalar context is 5\. But the value of `$#a` is 4 because it’s the
    last index in the array. Therefore when you take the slice `@a[@a-4..$#a]`, it
    becomes `@a[1..4]`, which drops the front element from the array, and the `@a`
    array becomes `(line2, line3, line4, line5)`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设`@a`包含`(line1, line2, line3, line4)`，你想打印文件的最后四行。当你读取到第五行时，数组变成了`(line1,
    line2, line3, line4, line5)`，而`@a-4`的值是1，因为`@a`在标量上下文中是5。但`$#a`的值是4，因为它是数组的最后一个索引。因此，当你取切片`@a[@a-4..$#a]`时，它变成了`@a[1..4]`，这会丢弃数组的第一个元素，`@a`数组变成了`(line2,
    line3, line4, line5)`。
- en: 'A simpler way to write this is with `shift`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更简单的写法是使用`shift`：
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This one-liner doesn’t need to slice `@a` because you can guarantee that if
    `@a > 10`, then `@a == 11`. `shift` is an operator that removes the first element
    of an array. So in this loop, you can simply shift off the first stored line when
    you have more than 10 lines.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行代码不需要对`@a`进行切片，因为你可以保证，如果`@a > 10`，那么`@a == 11`。`shift`是一个操作符，用于移除数组的第一个元素。所以在这个循环中，当你有超过10行时，你可以简单地移除存储的第一行。
- en: 7.5 Print only lines that match a regular expression
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.5 打印匹配正则表达式的行
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This one-liner tests to see whether the current line matches `/regex/`. If so,
    the `/regex/` match succeeds and `print` is called.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行代码测试当前行是否匹配`/regex/`。如果匹配成功，`/regex/`的匹配就会成功，并且调用`print`。
- en: 'Instead of using `&&`, you can also use `if` to reverse the `/regex/` and `print`
    statements:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用`if`来替代`&&`，反转`/regex/`和`print`语句：
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 7.6 Print only lines that do not match a regular expression
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.6 打印不匹配正则表达式的行
- en: '[PRE13]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This one-liner inverts the previous one-liner. Here, I test to see that the
    line doesn’t match `/regex/` by inverting the match via the `!` operator. If the
    line doesn’t match, I call `print` to print the line.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这段单行代码是对前面那段单行代码的反转。这里，我通过`!`操作符反转匹配，测试该行是否不匹配`/regex/`。如果不匹配，我调用`print`来打印该行。
- en: 'You can also write this the other way around:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以反过来写：
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And you can also use `unless` instead of `if !`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`unless`代替`if !`：
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Another way to write this is to apply De Morgan’s law to `!/regex/ && print`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种写法是将德摩根定律应用到`!/regex/ && print`：
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 7.7 Print every line preceding a line that matches a regular expression
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.7 打印每一行，前面有匹配正则表达式的行
- en: '[PRE17]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This one-liner prints a line when it is above a line that matches `/regex/`.
    Let’s walk through it, beginning at the last statement, `$last = $_`, which saves
    each line in the `$last` variable. Suppose the next line is read and it matches
    `/regex/`. Because the previous line is saved in `$last`, the one-liner simply
    prints it. The series of `&&` means first that the regular expression must match
    and second that `$last` must be a true value. (Blank lines are still printed because
    they contain the newline character.)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这段单行代码会在匹配`/regex/`的行上面打印一行。我们从最后一个语句`$last = $_`开始，它将每一行保存到`$last`变量中。假设下一行被读取并且匹配了`/regex/`。由于上一行已保存在`$last`中，这段单行代码会直接打印出来。`&&`系列操作符的意思是，首先正则表达式必须匹配，其次`$last`必须为真值。（空行仍然会被打印，因为它们包含换行符。）
- en: 'Say you have a file with four lines:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个包含四行的文件：
- en: '[PRE18]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'and you want to print all lines above those that match `magic`. You can do
    this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想打印所有匹配`magic`的行上方的行，可以这样做：
- en: '[PRE19]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'and the one-liner will print:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 该单行代码将打印：
- en: '[PRE20]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 7.8 Print every line following a line that matches a regular expression
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.8 打印每一行，前面紧跟着匹配正则表达式的行
- en: '[PRE21]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here, I set the variable `$p` to 1 if the current line matches the regular expression.
    The fact that the variable `$p` is 1 indicates that the next line should be printed.
    Now, when the next line is read in and `$p` is set, that line is printed and `$p`
    is reset to 0\. Quite simple.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我将变量`$p`设置为1，如果当前行匹配正则表达式。变量`$p`为1表示下一行应该被打印。现在，当下一行被读取并且`$p`被设置时，当前行会被打印，`$p`会被重置为0。非常简单。
- en: 'Let’s say you have this four-line file:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有这样一个四行的文件：
- en: '[PRE22]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'and you want to print all lines below those that match `science`. Do this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想打印所有匹配`science`的行下方的行，可以这样做：
- en: '[PRE23]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The one-liner will print:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 该单行代码将打印：
- en: '[PRE24]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If you want to write this with `&&` and avoid using `if` and curly brackets,
    do this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用`&&`来编写这段代码并避免使用`if`和大括号，可以这样做：
- en: '[PRE25]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can also be very smart about this and simplify this one-liner to the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以聪明地简化这段单行代码，变成以下内容：
- en: '[PRE26]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: If the current line matches `science`, then variable `$p` is set to a true value
    and the next line gets printed. If the current line doesn’t match `science`, then
    `$p` becomes undefined and the next line doesn’t get printed.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前行匹配`science`，则变量`$p`被设置为真值，下一行将被打印。如果当前行不匹配`science`，则`$p`变为未定义，下一行不被打印。
- en: 7.9 Print lines that match regular expressions AAA and BBB in any order
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.9 打印以任意顺序匹配正则表达式AAA和BBB的行
- en: '[PRE27]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This one-liner tests to see whether a line matches two regular expressions.
    If a line matches `/AAA/` and `/BBB/`, it’s printed. Specifically, this one-liner
    prints the line *foo AAA bar BBB baz* because it contains both *AAA* and *BBB*,
    but it won’t print the line *foo AAA bar AAA* because it doesn’t contain *BBB*.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这段单行代码测试一行是否同时匹配两个正则表达式。如果一行同时匹配`/AAA/`和`/BBB/`，它就会被打印。具体来说，这段单行代码会打印包含`*AAA*`和`*BBB*`的行，例如`foo
    AAA bar BBB baz`，但不会打印`foo AAA bar AAA`，因为它不包含`*BBB*`。
- en: 7.10 Print lines that don’t match regular expressions AAA and BBB
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.10 打印不匹配正则表达式AAA和BBB的行
- en: '[PRE28]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This one-liner is almost the same as the previous one. Here, I test to see if
    a line doesn’t match both regular expressions. If it doesn’t match `/AAA/` or
    `/BBB/`, it prints.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这段单行代码几乎与之前的一模一样。这里，我测试一行是否不匹配两个正则表达式。如果它既不匹配`/AAA/`也不匹配`/BBB/`，它就会被打印。
- en: 7.11 Print lines that match regular expression AAA followed by BBB followed
    by CCC
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.11 打印匹配正则表达式AAA后接BBB再接CCC的行
- en: '[PRE29]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Here, I simply chain the regular expressions `AAA`, `BBB`, and `CCC` with `.*`,
    which means “match anything or nothing at all.” If `AAA` is followed by `BBB`,
    which is followed by `CCC`, the line prints. For example, this one-liner matches
    and prints strings like *123**AAA**880**BBB**222**CCC**, x**AAA**y**BBB**z**CCC***,
    and ***AAABBBCCC***.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我将正则表达式 `AAA`、`BBB` 和 `CCC` 用 `.*` 连接在一起，`.*` 的意思是“匹配任何东西或什么都不匹配”。如果 `AAA`
    后跟 `BBB`，再后跟 `CCC`，该行就会打印。例如，这个单行代码会匹配并打印类似 *123**AAA**880**BBB**222**CCC**、x**AAA**y**BBB**z**CCC***
    和 ***AAABBBCCC*** 这样的字符串。
- en: 7.12 Print lines that are at least 80 characters long
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.12 打印至少80个字符的行
- en: '[PRE30]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This one-liner prints all lines that are at least 80 characters long. In Perl,
    you can sometimes omit the parentheses `()` for function calls, so here I’ve omitted
    them for the `length` function call. In fact, the invocations `length`, `length()`,
    and `length($_)` are all the same as far as Perl is concerned.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行代码打印所有至少包含80个字符的行。在 Perl 中，有时可以省略函数调用的括号 `()`，所以这里我省略了 `length` 函数的括号。事实上，调用
    `length`、`length()` 和 `length($_)` 对于 Perl 来说是等效的。
- en: 'If you don’t want to count line endings, you can turn on automatic handling
    of line endings with `-l`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想计算行尾，可以通过 `-l` 打开行尾的自动处理：
- en: '[PRE31]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This switch ensures that a blank line has zero length, whereas it usually has
    length 1 or 2, depending on the file format. (UNIX newlines have length 1; Windows
    newlines have length 2.)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个开关确保空白行的长度为零，而空白行通常有长度1或2，具体取决于文件格式。（UNIX 换行符的长度为1；Windows 换行符的长度为2。）
- en: 7.13 Print lines that are fewer than 80 characters long
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.13 打印少于80个字符的行
- en: '[PRE32]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This one-liner reverses the previous one. It checks to see whether the length
    of a line is less than 80 characters. Again, you use `-l` if you don’t want the
    line endings to be counted.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行代码是前一个的反转。它检查一行的长度是否少于80个字符。同样，如果你不想计算行尾，使用 `-l`。
- en: 7.14 Print only line 13
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.14 只打印第13行
- en: '[PRE33]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: As I explained in one-liner 7.2 on page 70, the `$.` special variable stands
    for “the current line number.” Therefore, if `$.` has a value of 13, this one-liner
    prints the line and exits.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在第70页的单行代码 7.2 中解释的那样，`$.` 特殊变量表示“当前行号”。因此，如果 `$.` 的值是13，这个单行代码会打印该行并退出。
- en: 7.15 Print all lines except line 27
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.15 打印除第27行外的所有行
- en: '[PRE34]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: As in the previous one-liner, this one checks to see whether the line number
    of the current line is 27\. If a line is not 27, it prints; if it is, it doesn’t
    print.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 与前一个单行代码类似，这个代码检查当前行的行号是否为27。如果行号不是27，它会打印；如果是，它就不打印。
- en: 'You can accomplish the same thing by reversing `print` and `$. != 27` and using
    the `if` statement modifier—just like this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过交换 `print` 和 `$. != 27` 并使用 `if` 语句修饰符来实现相同的效果—就像这样：
- en: '[PRE35]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Or you can use `unless`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以使用 `unless`：
- en: '[PRE36]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 7.16 Print only lines 13, 19, and 67
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.16 只打印第13、19和67行
- en: '[PRE37]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This one-liner prints only lines 13, 19, and 67\. It doesn’t print any other
    lines. Here’s how it works: It calls `print` if the current line number, stored
    in the `$.` variable, is 13, 19, or 67\. You can use any line numbers to print
    specific lines. For example, to print the lines 13, 19, 88, 290, and 999, you
    do this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行代码只会打印第13、19和67行。它不会打印其他行。其工作原理是：如果当前行号（存储在 `$.` 变量中）是13、19或67，它会调用 `print`。你可以使用任何行号来打印特定的行。例如，要打印第13、19、88、290和999行，你可以这样做：
- en: '[PRE38]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If you want to print more lines, you can put them in a separate array and then
    test whether `$.` is in this array:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想打印更多的行，可以将它们放入一个单独的数组中，然后测试 `$.` 是否在这个数组中：
- en: '[PRE39]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This one-liner uses `grep` to test if the current line `$.` is in the `@lines`
    array. If the current line number is found in the `@lines` array, the `grep` function
    returns a list of one element that contains the current line number and this list
    evaluates to true. If the current line number is not found in the `@lines` array,
    the `grep` function returns an empty list that evaluates to false.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行代码使用 `grep` 测试当前行 `$.` 是否在 `@lines` 数组中。如果当前行号在 `@lines` 数组中找到，`grep` 函数会返回一个包含当前行号的元素列表，并且这个列表的值为真。如果当前行号不在
    `@lines` 数组中，`grep` 函数会返回一个空列表，值为假。
- en: 7.17 Print all lines from 17 to 30
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.17 打印第17到30行的所有行
- en: '[PRE40]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: In this one-liner, the `$.` variable stands for the current line number. As
    a result, the one-liner checks to see whether the current line number is greater
    than or equal to 17 and less than or equal to 30.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个单行代码中，`$.` 变量代表当前行号。因此，单行代码检查当前行号是否大于等于17且小于等于30。
- en: 'You can do the same thing using the flip-flop operator, which is explained
    in one-liner 7.2 on page 70\. The flip-flop operator operates on `$.` when used
    with integers:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用翻转操作符执行相同的操作，翻转操作符在第7.2节的第70页中有说明。当与整数一起使用时，翻转操作符作用于`$.`：
- en: '[PRE41]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 7.18 Print all lines between two regular expressions (including the lines that
    match)
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.18 打印两个正则表达式之间的所有行（包括匹配的行）
- en: '[PRE42]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This one-liner uses the flip-flop operator (explained in one-liner 7.2 on page
    70). When used with integers, the operands are tested against the `$.` variable.
    When used with regular expressions, the operands are tested against the current
    line, stored in the `$_` variable. Initially the operator returns false. When
    a line matches `regex1`, the operator flips and starts returning true until another
    line matches `regex2`. At that point, the operator returns true for the last time
    and then flips to the false state. From now on the operator returns false. This
    one-liner, therefore, prints all lines between (and including) the lines that
    match `regex1` and `regex2`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行代码使用了翻转操作符（在第7.2节的第70页中有说明）。当与整数一起使用时，操作数会与`$.`变量进行比较。当与正则表达式一起使用时，操作数会与当前行进行比较，当前行存储在`$_`变量中。操作符最初返回`false`。当一行与`regex1`匹配时，操作符翻转并开始返回`true`，直到另一行与`regex2`匹配。此时，操作符最后一次返回`true`，然后翻转回`false`状态。从此以后，操作符将一直返回`false`。因此，这一行代码打印所有在`regex1`和`regex2`匹配的行之间（包括匹配的行）。
- en: 7.19 Print the longest line
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.19 打印最长的行
- en: '[PRE43]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This one-liner keeps the longest line seen so far in the `$l` variable. If the
    length of the current line `$_` exceeds the length of the longest line, the value
    in `$l` is replaced with the value of the current line. Before exiting, the `END`
    block is executed, and it prints the longest line value that’s held in `$l`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行代码将迄今为止看到的最长行保存在`$l`变量中。如果当前行`$_`的长度超过了最长行的长度，则将`$l`中的值替换为当前行的值。在程序结束前，`END`块会被执行，并打印保存在`$l`中的最长行值。
- en: Remember to use `-l` if you want to prevent the newline characters from counting
    toward the line length.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想防止换行符计入行长，请记得使用`-l`选项。
- en: 7.20 Print the shortest line
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.20 打印最短的行
- en: '[PRE44]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This one-liner is the opposite of the previous one. Because it’s finding the
    shortest line and `$s` is not defined for the first line, you have to set its
    value to the first line explicitly through `$s = $_ if $. == 1`. Then it simply
    does the opposite of the previous one-liner. That is, it checks to see whether
    the current line is the shortest line so far and, if so, assigns it to `$s`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行代码是上一行的相反操作。因为它查找的是最短的行，并且对于第一行，`$s`尚未定义，你需要显式地通过`$s = $_ if $. == 1`将其值设置为第一行。然后它就简单地执行与上一行代码相反的操作。也就是说，它检查当前行是否是迄今为止最短的行，如果是，就将其赋值给`$s`。
- en: 7.21 Print all lines containing digits
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.21 打印所有包含数字的行
- en: '[PRE45]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'This one-liner uses the regular expression `\d` (which stands for “a digit”)
    to see whether a line contains a digit. If so, the check succeeds, and the line
    is printed. For example, this line would be printed because it contains digits:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码使用正则表达式`\d`（表示“一个数字”）来检查一行是否包含数字。如果包含，检查成功，行就会被打印。例如，这一行会被打印，因为它包含数字：
- en: '[PRE46]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'However, this line wouldn’t be printed because it doesn’t contain digits:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这一行不会被打印，因为它不包含数字：
- en: '[PRE47]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 7.22 Print all lines containing only digits
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.22 打印所有只包含数字的行
- en: '[PRE48]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'In this one-liner, the regular expression `^\d+$` means “match a line if it
    contains only digits from the beginning until the end.” For example, this line
    would be printed because it contains only digits:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行代码中，正则表达式`^\d+$`表示“如果一行从头到尾只包含数字，则匹配该行”。例如，这一行会被打印，因为它只包含数字：
- en: '[PRE49]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'However, this line wouldn’t be printed because it also contains some characters:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这一行不会被打印，因为它还包含一些字符：
- en: '[PRE50]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'You can also invert the `^\d$` regular expression and use `\D`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以反转`^\d$`的正则表达式，改用`\D`：
- en: '[PRE51]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This one-liner is great for developing your logical reasoning because it uses
    logical negation twice. Here, the line prints only if it does *not* contain a
    non-numeric character. In other words, it prints only if all the characters are
    numeric. (Notice that I used the `-l` command-line argument for this one-liner
    because of the newline character at the end of the line. If I didn’t use `-l`,
    the line would contain the newline character—a non-numeric character—and it wouldn’t
    be printed.)
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行代码非常适合培养你的逻辑推理能力，因为它使用了两次逻辑否定。在这里，只有当一行*不*包含非数字字符时，行才会被打印。换句话说，只有当所有字符都是数字时，它才会打印。（注意，我在这个单行代码中使用了`-l`命令行参数，因为行末有换行符。如果我不使用`-l`，那么这一行就会包含换行符—一个非数字字符—因此不会被打印。）
- en: 7.23 Print all lines containing only alphabetic characters
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.23 打印所有只包含字母字符的行
- en: '[PRE52]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: This one-liner checks to see whether a line contains only alphabetic characters.
    If so, it prints the line. The `[[:alpha:]]` stands for “any alphabetic character.”
    And `[[:alpha:]]+` stands for “all alphabetic characters.”
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行代码检查一行是否只包含字母字符。如果是，它会打印该行。`[[:alpha:]]`表示“任何字母字符”。而`[[:alpha:]]+`表示“所有字母字符”。
- en: 7.24 Print every second line
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.24 打印每隔一行
- en: '[PRE53]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: This one-liner prints the first, third, fifth, and seventh lines (and so on).
    It does so because `$. % 2` is true when the current line number is odd and false
    when the current line number is even.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行代码打印第一、第三、第五、第七行（依此类推）。它之所以这样做，是因为`$. % 2`在当前行号为奇数时为真，在当前行号为偶数时为假。
- en: 7.25 Print every second line, beginning with the second line
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.25 从第二行开始打印每隔一行
- en: '[PRE54]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: This one-liner is like previous one, except it prints the second, fourth, sixth,
    and eighth lines (and so on) because `$. % 2 == 0` is true when the current line
    number is even.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行代码类似于前一个，只是它打印第二、第四、第六、第八行（依此类推），因为`$. % 2 == 0`在当前行号为偶数时为真。
- en: 'Alternatively, you can simply invert the test from the previous example:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以简单地反转前一个例子中的测试条件：
- en: '[PRE55]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 7.26 Print all repeated lines only once
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.26 只打印所有重复的行一次
- en: '[PRE56]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: This one-liner tracks the lines it has seen so far and counts the number of
    times it has seen the lines previously. If it sees a line a second time, it prints
    the line because `++$a{$_} == 2` is true. If it sees a line more than two times,
    it does nothing because the count for this line is greater than 2.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行代码跟踪它已经看到的行，并计算每行出现的次数。如果它第二次看到一行，它会打印该行，因为`++$a{$_} == 2`为真。如果它看到一行超过两次，它就什么也不做，因为该行的计数大于2。
- en: 7.27 Print all unique lines
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.27 打印所有唯一的行
- en: '[PRE57]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: This one-liner prints a line only if the hash value `$a{$_}` for that line is
    false. Every time Perl reads in a line, it increments `$a{$_}`, which ensures
    that this one-liner prints only never-before-seen lines.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行代码只有在该行的哈希值`$a{$_}`为假时才打印该行。每次 Perl 读取一行时，它会增加`$a{$_}`的值，从而确保这个单行代码只打印从未出现过的行。
