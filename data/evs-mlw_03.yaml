- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">2</samp> <samp class="SANS_Dogma_OT_Bold_B_11">MALWARE
    TRIAGE AND BEHAVIORAL ANALYSIS</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">2</samp> <samp class="SANS_Dogma_OT_Bold_B_11">恶意软件筛查与行为分析</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: In this chapter, you’ll learn the basics of malware analysis, which, along with
    the next chapter, should give you a solid foundation for learning everything in
    the rest of this book. We’ll begin by walking through the malware analysis process,
    starting with initial triage of suspicious files. Then, we’ll dig into automated
    analysis in a sandbox environment, before wrapping up with a discussion of behavioral
    analysis in a virtual machine. As we progress through the chapter, I’ll point
    out areas in the malware triage and behavioral-analysis process that are especially
    relevant to investigating evasive malware. I’ll be focusing mostly on Windows
    executable files in this chapter and throughout this book.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习恶意软件分析的基础知识，这些内容与下一章一起，将为你学习本书余下部分的所有内容打下坚实的基础。我们将从恶意软件分析过程入手，首先进行可疑文件的初步筛查。然后，我们将深入探讨在沙箱环境中的自动化分析，最后讨论在虚拟机中的行为分析。随着章节的进展，我会指出恶意软件筛查和行为分析过程中，特别涉及到规避恶意软件调查的相关领域。本章及整本书中，我将主要聚焦于Windows可执行文件。
- en: As I noted in the introduction, this book assumes you already have at least
    a beginner’s knowledge of malware analysis. This chapter therefore provides only
    the basic information required to quickly get you up to speed, and it skims over
    concepts that will be discussed in more detail in later chapters. I’ll point you
    to those chapters where appropriate.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在导言中所提到的，本书假设你已经具备至少初级的恶意软件分析知识。因此，本章仅提供了快速让你掌握基础知识所需的基本信息，并略过了将在后续章节中详细讨论的概念。在适当的地方，我会指出相关章节。
- en: Let’s get into it, starting with the importance of the analysis environment.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从分析环境的重要性开始，进入正题。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Analysis Environment</samp>
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">分析环境</samp>
- en: Building a safe and effective analysis environment is critical for successful
    malware analysis. You should put some thought into your analysis environment and
    tailor it to your needs. Malware analysts and researchers often use virtual machines
    and sandboxes, which offer a controlled environment in which to monitor the malware’s
    behavior. As a result, malware is increasingly using virtual machine and sandbox
    detection and circumvention techniques.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个安全且高效的分析环境对于成功的恶意软件分析至关重要。你应该认真考虑你的分析环境，并根据自己的需求进行定制。恶意软件分析师和研究人员通常使用虚拟机和沙箱，它们提供了一个受控的环境，用于监视恶意软件的行为。因此，恶意软件越来越多地使用虚拟机和沙箱检测与规避技术。
- en: Before we go further, it’s important to establish some definitions. A *virtual
    machine (VM)* emulates a physical computer but runs entirely within an application
    known as a *hypervisor*. The hypervisor provides a sort of container that allows
    safe execution of malicious code and safe detonation of malware. A *malware analysis
    sandbox* is typically (but not always) a type of VM that is configured to automatically
    analyze malware and produce a report or assessment of the malware’s behaviors,
    capabilities, and properties. Some examples of sandboxes are the open source sandbox
    Cuckoo and the proprietary sandboxes Joe Sandbox and Any.Run. The main point here
    is that nearly all malware sandboxes are VMs, but not every VM is configured to
    be a malware sandbox.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入之前，明确一些定义是非常重要的。*虚拟机（VM）*模拟物理计算机，但完全运行在一个被称为*虚拟机管理程序（hypervisor）*的应用程序内。虚拟机管理程序提供了一种容器，允许恶意代码的安全执行和恶意软件的安全引爆。*恶意软件分析沙箱*通常（但并非总是）是一种配置为自动分析恶意软件并生成报告或评估恶意软件行为、能力和属性的虚拟机。沙箱的例子包括开源沙箱Cuckoo以及专有沙箱Joe
    Sandbox和Any.Run。关键点在于，几乎所有的恶意软件沙箱都是虚拟机，但并不是每个虚拟机都被配置为恶意软件沙箱。
- en: A typical malware analysis lab environment often consists of a host system and
    one or more VMs and sandboxes. The host system stores and runs the analysis VMs
    and sandboxes, and it may have Windows, Linux, or macOS as well as a hypervisor
    installed. The operating system and software configured on the VMs and sandboxes
    depend on the type of malware the analyst is investigating. For Windows malware
    analysis, for example, the analyst might have VMs running Windows 7, Windows 10,
    and Windows 11, as well as many specialized malware analysis tools.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的恶意软件分析实验环境通常包括一台主机系统和一个或多个虚拟机（VM）以及沙箱。主机系统存储并运行分析虚拟机和沙箱，并且可能安装有Windows、Linux或macOS操作系统以及虚拟机监控程序（hypervisor）。虚拟机和沙箱上配置的操作系统和软件取决于分析师正在研究的恶意软件类型。例如，对于Windows恶意软件分析，分析师可能会有运行Windows
    7、Windows 10和Windows 11的虚拟机，以及许多专门的恶意软件分析工具。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">WARNING</samp>
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">警告</samp>
- en: ''
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*If you’re a beginner malware analyst, I highly recommend that you take a look
    at [Appendix A](appendix-A.xhtml) to get an idea of lab setup and safety before
    delving into malware analysis. Malware analysis carries risks, and it’s important
    to limit them as much as possible.*'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*如果你是一个初学者恶意软件分析师，我强烈建议你在深入恶意软件分析之前先查看[附录A](appendix-A.xhtml)，了解实验室的设置和安全性。恶意软件分析存在风险，重要的是尽可能减少这些风险。*'
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Malware Analysis Process</samp>
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">恶意软件分析过程</samp>
- en: 'Imagine that you’re a malware analyst and you’re given an unknown file to investigate.
    This file could have no additional context, or it could be part of a larger breach
    and an ongoing incident response investigation. Either way, you must answer the
    following questions:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你是一个恶意软件分析师，你收到一个未知的文件进行调查。这个文件可能没有任何额外的上下文，或者它可能是一个更大规模入侵事件的一部分，正在进行中的事件响应调查。无论如何，你都必须回答以下问题：
- en: What type of file is this?
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个文件是什么类型的文件？
- en: When the file is opened, what does it do?
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当文件被打开时，它会做什么？
- en: Upon execution, what types of artifacts does the file create?
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行后，该文件会创建哪些类型的痕迹？
- en: Does the executed file attempt to connect to the internet or communicate on
    the local network? If so, to which IP addresses or domains?
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行的文件是否尝试连接互联网或在本地网络上进行通信？如果是，它连接到哪些IP地址或域名？
- en: Does the executed file exhibit signs of potential malicious activity, such as
    hiding itself on the infected system, attempting to steal sensitive data, or attempting
    to detect malware analysis tools?
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被执行的文件是否表现出潜在恶意活动的迹象，如在感染的系统上隐藏自己、试图窃取敏感数据或试图检测恶意软件分析工具？
- en: If this file is malicious in nature, what are its capabilities and intentions?
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果这个文件具有恶意性质，它的能力和意图是什么？
- en: 'These are questions that a good malware analysis process will help you answer.
    The exact process can differ from analyst to analyst, however. Expert analysts
    may deviate quite a bit from the many documented malware analysis processes, while
    beginner analysts might prefer to stick with a clear path. Most published malware
    analysis processes boil down to the same thing: start with the basics and slowly
    add in more advanced techniques as needed. For the remainder of this chapter,
    I’ll discuss the first stages of malware analysis, or malware triage, followed
    by manual behavioral analysis. In the next chapter, I’ll dive into the later stages
    of the malware analysis process.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题是一个良好的恶意软件分析过程帮助你解答的。具体过程可能因分析师而异。然而，专家分析师可能会偏离许多已记录的恶意软件分析过程，而初学者分析师可能更倾向于遵循清晰的路径。大多数已发布的恶意软件分析过程都归结为同一件事：从基础开始，随着需要逐步加入更先进的技术。在本章的其余部分，我将讨论恶意软件分析的初期阶段，即恶意软件筛查，接着是手动行为分析。在下一章中，我将深入探讨恶意软件分析过程的后期阶段。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Initial Malware Triage</samp>
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">恶意软件初步筛查</samp>
- en: The word *triage* originates from the field of medicine, where patients are
    assessed (triaged) when there aren’t enough resources to treat all of them simultaneously.
    Patients with severe wounds are treated first, while those with minor scrapes
    and bruises can be treated later. Triaging malware is a similar concept. When
    faced with several different pieces of malware to investigate (during an incident,
    for example), an analyst must first triage the files to get an initial assessment
    of their behaviors before choosing which sample to investigate first.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*分类*一词源自医学领域，当资源不足以同时治疗所有患者时，医务人员会对患者进行评估（分类）。重伤患者会优先治疗，而轻微擦伤和淤青的患者可以稍后治疗。恶意软件的分类是类似的概念。当面对多个不同的恶意软件样本需要调查时（例如在一次事件处理中），分析人员必须首先对这些文件进行初步分类，以评估它们的行为，然后决定首先调查哪个样本。'
- en: There are several objectives when it comes to initial triage. First, you need
    to determine what type of file you’re dealing with. Is it a Microsoft Excel document?
    A PDF? A script? An executable? The answer informs the rest of the malware analysis
    process. Second, you need to obtain as much information about the file as possible.
    For example, is the file known to public malware repositories and other researchers?
    This will help drive the third objective, which is to determine whether the file
    is malicious, and if so, what class of malware it is. Ransomware? Infostealer?
    Finally, you should have a basic understanding of the file’s capabilities. One
    of the primary objectives of initial triage is to help you determine your next
    steps in investigating the malware sample.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 初步分类时有几个目标。首先，你需要确定你正在处理的文件类型。它是Microsoft Excel文档？PDF？脚本？可执行文件？答案将影响接下来的恶意软件分析过程。其次，你需要尽可能多地获取有关该文件的信息。例如，该文件是否为公众恶意软件库和其他研究人员所知？这将帮助推动第三个目标，即确定文件是否恶意，如果是的话，它属于哪一类恶意软件。勒索软件？信息窃取者？最后，你应该对文件的功能有一个基本的了解。初步分类的一个主要目标是帮助你确定接下来的恶意软件样本调查步骤。
- en: '> <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '> <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>'
- en: '*In the following subsections, I’ll walk you through the basic file triage
    steps for a threat investigation. If you wish to follow along, you can download
    the malware file from VirusTotal or MalShare using the following file hash:*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*在接下来的小节中，我将带你了解威胁调查中的基本文件分类步骤。如果你希望跟着一起操作，可以使用以下文件哈希从VirusTotal或MalShare下载恶意软件文件：*'
- en: 'SHA256: 8348b0756633b675ff22ed3b840497f2393e8d9587f8933ac2469d689c16368a'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'SHA256: 8348b0756633b675ff22ed3b840497f2393e8d9587f8933ac2469d689c16368a'
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Identifying the File
    Type</samp>
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">识别文件类型</samp>
- en: One of the most basic but important steps of malware analysis is identifying
    the file type, which will inform how you’ll approach your analysis, the tools
    you’ll use, and the order of the steps you’ll take. A file’s type is signified
    by its *magic bytes* or *signature*, one or more bytes of data at the beginning
    of the file. You can view the magic bytes in a hex editor such as McAfee FileInsight.
    The file shown in [Figure 2-1](chapter2.xhtml#fig2-1) has the magic bytes <samp
    class="SANS_TheSansMonoCd_W5Regular_11">4D 5A</samp> (<samp class="SANS_TheSansMonoCd_W5Regular_11">MZ</samp>
    in ASCII), which is common for PE files.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件分析中最基本但最重要的步骤之一就是识别文件类型，这将决定你如何开展分析、使用哪些工具，以及采取哪些步骤的顺序。文件的类型由其*魔术字节*或*签名*表示，即文件开头的一或多个字节数据。你可以通过十六进制编辑器（如McAfee
    FileInsight）查看魔术字节。图[2-1](chapter2.xhtml#fig2-1)中展示的文件具有魔术字节<samp class="SANS_TheSansMonoCd_W5Regular_11">4D
    5A</samp>（在ASCII中为<samp class="SANS_TheSansMonoCd_W5Regular_11">MZ</samp>），这是PE文件常见的标识。
- en: '![](../images/fig2-1.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-1.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-1: A PE header viewed
    in a hex editor</samp>'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-1：在十六进制编辑器中查看PE头部</samp>
- en: '[Table 2-1](chapter2.xhtml#tab2-1) lists some other common signatures, and
    you can find even more by searching “list of file signatures” on Wikipedia.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 2-1](chapter2.xhtml#tab2-1)列出了其他一些常见签名，你还可以通过在维基百科上搜索“文件签名列表”找到更多。'
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 2-1:</samp> <samp class="SANS_Futura_Std_Book_11">Common
    File Signatures</samp>
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 2-1：</samp> <samp class="SANS_Futura_Std_Book_11">常见文件签名</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Signature (ASCII)</samp> | <samp
    class="SANS_Futura_Std_Heavy_B_11">Magic bytes</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">File
    type</samp> |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">签名（ASCII）</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">魔数字节</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">文件类型</samp> |'
- en: '| --- | --- | --- |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">7z</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">¼</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">¯''</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">37
    7A BC AF 27 1C</samp> | <samp class="SANS_Futura_Std_Book_11">7z archive</samp>
    |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">7z</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">¼</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">¯''</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">37
    7A BC AF 27 1C</samp> | <samp class="SANS_Futura_Std_Book_11">7z 压缩包</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ELF</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">7F
    45 4C 46</samp> | <samp class="SANS_Futura_Std_Book_11">Executable and Linkable
    Format (ELF), an executable file type used in Unix- based systems</samp> |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ELF</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">7F
    45 4C 46</samp> | <samp class="SANS_Futura_Std_Book_11">可执行与链接格式（ELF），一种在 Unix
    系统中使用的可执行文件类型</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">%PDF-</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">25
    50 44 46 2D</samp> | <samp class="SANS_Futura_Std_Book_11">PDF file</samp> |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">%PDF-</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">25
    50 44 46 2D</samp> | <samp class="SANS_Futura_Std_Book_11">PDF 文件</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">{\rtf1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">7B
    5C 72 74 66 31</samp> | <samp class="SANS_Futura_Std_Book_11">Rich Text Format
    (RTF) document</samp> |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">{\rtf1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">7B
    5C 72 74 66 31</samp> | <samp class="SANS_Futura_Std_Book_11">富文本格式（RTF）文档</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">PK</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">50
    4B 03 04</samp> | <samp class="SANS_Futura_Std_Book_11">ZIP file (and other files
    that use the</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">.zip</samp>
    <samp class="SANS_Futura_Std_Book_11">format, such as many Microsoft Office files)</samp>
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">PK</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">50
    4B 03 04</samp> | <samp class="SANS_Futura_Std_Book_11">ZIP 文件（以及其他使用</samp> <samp
    class="SANS_Futura_Std_Book_Oblique_I_11">.zip</samp> <samp class="SANS_Futura_Std_Book_11">格式的文件，如许多
    Microsoft Office 文件）</samp> |'
- en: 'In addition to a hex editor, you can use the <samp class="SANS_TheSansMonoCd_W5Regular_11">file</samp>
    command to identify the file type in Linux. This tool reads the file’s signature
    and displays it in a human-readable format. Simply run the <samp class="SANS_TheSansMonoCd_W7Bold_B_11">file</samp>
    command with the malware file as an input parameter:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 除了十六进制编辑器，你还可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">file</samp> 命令在
    Linux 中识别文件类型。这个工具读取文件的签名并以人类可读的格式显示它。只需运行 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">file</samp>
    命令，并将恶意文件作为输入参数：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can see in the output shown here, this file is indeed an executable,
    specifically a Windows 32-bit PE file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在这里显示的输出中所见，该文件确实是一个可执行文件，具体来说是一个 Windows 32 位 PE 文件：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">file</samp> command is a good
    general-purpose tool for identifying many common file formats, including non-PE
    files such as documents and archives. For PE files specifically, PE static analysis
    tools, or what I call *PE triage tools*, can come in handy. CFF Explorer ([*https://<wbr>ntcore<wbr>.com*](https://ntcore.com)),
    for example, is a great initial analysis tool because it provides information
    such as file size and file creation timestamps, some of which you can see in [Figure
    2-2](chapter2.xhtml#fig2-2).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">file</samp> 命令是一个非常好的通用工具，用于识别许多常见的文件格式，包括非PE文件，如文档和归档文件。对于PE文件，PE静态分析工具，或者我所称的*PE筛查工具*，非常有用。以
    CFF Explorer（[*https://<wbr>ntcore<wbr>.com*](https://ntcore.com)）为例，它是一个很好的初步分析工具，因为它提供了诸如文件大小和文件创建时间戳等信息，这些信息可以在[图
    2-2](chapter2.xhtml#fig2-2)中看到。
- en: '![](../images/fig2-2.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-2.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-2: An executable file
    loaded into CFF Explorer</samp>'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-2：加载到 CFF Explorer 中的可执行文件</samp>
- en: You may have noticed other information about the file in [Figure 2-2](chapter2.xhtml#fig2-2),
    such as the Import Directory and Section Headers tabs on the left. I’ll discuss
    more of these attributes later in this chapter and in the following chapter. Note
    the cryptic-looking MD5 and SHA-1 fields at the bottom right. These are file hashes,
    which we’ll discuss next.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到在[图 2-2](chapter2.xhtml#fig2-2)中有关于文件的其他信息，例如左侧的导入目录和区段头标签。我将在本章和接下来的章节中讨论更多这些属性。注意右下角看似晦涩的MD5和SHA-1字段。这些是文件的哈希值，我们接下来会讨论。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Obtaining the File’s
    Hash</samp>
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">获取文件的哈希值</samp>
- en: A file’s *hash* is a sort of fingerprint in that it is unique to that file.
    When a file is run through a hashing algorithm, the algorithm generates a fixed-size
    sequence of characters. The exact size depends on which hashing algorithm is used.
    The most common file-hashing algorithms used for malware analysis are MD5, SHA-1,
    and (the most recent and reliable of the three) SHA256.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的*哈希*是一种指纹，因为它是该文件独有的。当文件经过哈希算法处理时，该算法会生成一个固定大小的字符序列。确切的大小取决于使用的哈希算法。用于恶意软件分析的最常见文件哈希算法是MD5、SHA-1和（其中最现代且最可靠的）SHA256。
- en: In [Figure 2-3](chapter2.xhtml#fig2-3), the file’s MD5 hash is <samp class="SANS_TheSansMonoCd_W5Regular_11">C37CFC5C7EFD645BEE48ED745EC12906</samp>
    and its SHA-1 hash is <samp class="SANS_TheSansMonoCd_W5Regular_11">D2DD576536813A87CDC00E87FAC65DA75FB36A0F</samp>.
    These hash values uniquely identify this file. Note that MD5 is an older algorithm,
    but it’s still in use today. MD5 and SHA-1 have a risk of *collisions*, meaning
    that two or more files could have the same hash value; this is very rare, but
    it still happens. We won’t go into hash collisions here; suffice to say, if you
    spot two completely different files with the same signature, you likely have encountered
    a collision.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 2-3](chapter2.xhtml#fig2-3)中，文件的MD5哈希值是<samp class="SANS_TheSansMonoCd_W5Regular_11">C37CFC5C7EFD645BEE48ED745EC12906</samp>，其SHA-1哈希值是<samp
    class="SANS_TheSansMonoCd_W5Regular_11">D2DD576536813A87CDC00E87FAC65DA75FB36A0F</samp>。这些哈希值唯一标识此文件。请注意，MD5是一个较老的算法，但今天仍在使用。MD5和SHA-1有发生*碰撞*的风险，这意味着两个或更多文件可能拥有相同的哈希值；这种情况非常罕见，但仍然会发生。我们在这里不讨论哈希碰撞；可以简单地说，如果你发现两个完全不同的文件具有相同的签名，那么你很可能遇到了碰撞。
- en: Once you’ve obtained the file’s hash, you can use it to get additional information
    about the file from other sources. Let’s look at how that works.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你获得了文件的哈希值，就可以利用它从其他来源获取更多有关文件的信息。我们来看看它是如何工作的。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Triaging with VirusTotal</samp>
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">使用VirusTotal进行筛查</samp>
- en: 'VirusTotal ([*https://<wbr>www<wbr>.virustotal<wbr>.com*](https://www.virustotal.com))
    is a publicly available platform for malware triage and analysis. No account is
    required, so anyone can upload files to get a quick assessment. VirusTotal runs
    the uploaded file against 60+ anti-malware software vendors to get the overall
    detection rate of the file, runs the file in a sandbox environment (which we’ll
    discuss shortly), and retrieves additional information on the file from multiple
    sources. A typical VirusTotal assessment can include the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: VirusTotal（[*https://<wbr>www<wbr>.virustotal<wbr>.com*](https://www.virustotal.com)）是一个公开可用的恶意软件筛查和分析平台。无需账户，任何人都可以上传文件以获得快速评估。VirusTotal会将上传的文件与60多个反恶意软件供应商的软件进行比对，以获得该文件的总体检测率，且会将文件在沙箱环境中运行（我们稍后会讨论沙箱），并从多个来源获取有关文件的附加信息。典型的VirusTotal评估可能包括以下内容：
- en: The number of anti-malware detections for the file (the *detection rate*)
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件的反恶意软件检测数量（*检测率*）
- en: Sandbox reports from the file
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自文件的沙箱报告
- en: The file’s metadata (file creator, creation date, and so on)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件的元数据（文件创建者、创建日期等）
- en: Digital certificates associated with the file
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与文件相关的数字证书
- en: Yara rule matches (we’ll discuss Yara later in this chapter)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yara规则匹配（我们稍后会在本章讨论Yara）
- en: Many other useful pieces of information
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多其他有用的信息
- en: One key advantage of VirusTotal is its ability to query the very large malware
    database for a hash. You can simply paste the hash into VirusTotal, and it will
    run a passive query for the file, providing all the information as if you’d uploaded
    the file yourself. As long as the file is in the database, VirusTotal will provide
    a report on it. Running the SHA-1 hash for our malware file from [Figure 2-2](chapter2.xhtml#fig2-2)
    (<samp class="SANS_TheSansMonoCd_W5Regular_11">D2DD576536813A87CDC00E87FAC65DA75FB36A0F</samp>)
    returns the report shown in [Figure 2-3](chapter2.xhtml#fig2-3).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: VirusTotal 的一个主要优点是它可以查询非常大的恶意软件数据库中的哈希值。你只需将哈希值粘贴到 VirusTotal 中，它将为该文件执行被动查询，提供所有信息，就像你自己上传文件一样。只要文件在数据库中，VirusTotal
    就会提供该文件的报告。运行我们来自 [图 2-2](chapter2.xhtml#fig2-2) 的恶意软件文件的 SHA-1 哈希值（<samp class="SANS_TheSansMonoCd_W5Regular_11">D2DD576536813A87CDC00E87FAC65DA75FB36A0F</samp>）会返回如
    [图 2-3](chapter2.xhtml#fig2-3) 所示的报告。
- en: '![](../images/fig2-3.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-3.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-3: The VirusTotal
    report for the file from [Figure 2-2](chapter2.xhtml#fig2-2)</samp>'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-3：来自 [图 2-2](chapter2.xhtml#fig2-2)
    的文件的 VirusTotal 报告</samp>
- en: You can see that this file has a detection rate of 56/68, meaning that 56 out
    of 68 anti-malware software vendors classify this file as malicious. From this
    information, we can conclude that the file is highly likely to be malware. In
    addition to the file’s detection rate, some vendors include the malware’s class
    and family name. Based on the report, we can make an educated guess that the malware
    family is potentially *Ave Maria*, a common variant of remote access trojan and
    infostealer. Note, however, that the malware classifications from VirusTotal aren’t
    always correct. The malware file may be packed, leading to a false classification.
    [Chapter 17](chapter17.xhtml) will discuss packing in great detail.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到该文件的检测率为 56/68，这意味着 68 个反恶意软件软件供应商中有 56 个将该文件分类为恶意文件。根据这些信息，我们可以得出结论，这个文件很有可能是恶意软件。除了文件的检测率外，一些供应商还会提供恶意软件的类别和家族名称。根据报告，我们可以合理推测这个恶意软件家族很可能是
    *Ave Maria*，这是一种常见的远程访问木马和信息盗窃者变种。然而需要注意的是，来自 VirusTotal 的恶意软件分类并不总是准确的。恶意软件文件可能被打包过，这可能导致错误分类。[第
    17 章](chapter17.xhtml)将详细讨论打包技术。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*Querying VirusTotal for a file hash is always a good idea. But before actually
    uploading a file there, you should consider the risks of the file being publicly
    available on the VirusTotal platform. Ask yourself: Does this file contain sensitive
    information, such as data about me or my company? Is this file part of an active
    investigation involving my company? Will uploading this file alert the malware
    authors that their malware was discovered and is being actively analyzed? Remember,
    malicious actors are watching VirusTotal too.*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*查询 VirusTotal 中的文件哈希值始终是一个好主意。但在实际上传文件之前，你应该考虑文件在 VirusTotal 平台上公开可用的风险。问问自己：这个文件是否包含敏感信息，例如关于我或我公司的数据？这个文件是否是涉及我公司的正在进行的调查的一部分？上传这个文件是否会让恶意软件作者知道他们的恶意软件已经被发现并正在被积极分析？请记住，恶意行为者也在关注
    VirusTotal。*'
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Querying Search Engines
    and Other Resources</samp>
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">查询搜索引擎和其他资源</samp>
- en: Along with VirusTotal, search engines can be powerful tools for malware triage.
    Simply paste the malware’s hash or filename (if it is unique) into your search
    engine of choice and see what information is returned. If the file is already
    known, you may get valuable information about it from other online malware repositories
    and sandboxes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 与 VirusTotal 一起，搜索引擎可以成为恶意软件分类的强大工具。只需将恶意软件的哈希值或文件名（如果它是唯一的）粘贴到你选择的搜索引擎中，查看返回的相关信息。如果该文件已知，你可能会从其他在线恶意软件库和沙箱中获取到有价值的信息。
- en: Querying Google for our malware’s SHA-1 hash returns the results shown in [Figure
    2-4](chapter2.xhtml#fig2-4).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Google 查询我们恶意软件的 SHA-1 哈希值，返回了如 [图 2-4](chapter2.xhtml#fig2-4) 所示的结果。
- en: '![](../images/fig2-4.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-4.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-4: Querying our malware
    SHA-1 hash with Google</samp>'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-4：使用 Google 查询我们的恶意软件 SHA-1
    哈希值</samp>
- en: It seems this file is already quite well known! MalwareBazaar, a great resource
    for malware analysts and researchers, has some information on this file. Joe Sandbox
    (which I’ll talk about later in this chapter) also seems to already know of it.
    Exploring these resources may help you better understand the file and its capabilities
    even before you analyze it yourself, saving you quite a bit of time and effort.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来这个文件已经相当有名了！MalwareBazaar 是恶意软件分析师和研究人员的一个很好的资源，它上面有关于这个文件的一些信息。Joe Sandbox（我将在本章稍后介绍）似乎也已经知道这个文件了。探索这些资源可能帮助你在自己分析文件之前，更好地理解它及其功能，从而节省相当多的时间和精力。
- en: Now you should have at least a basic idea of what the file is and possibly even
    what malware family it belongs to, depending on whether it’s available in public
    repositories. If the file is unknown, you’ll need to dig deeper to determine its
    capabilities and behaviors. But that’s the fun part of malware analysis! Let’s
    look at how to investigate an unknown file.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该至少对文件是什么有一个基本的了解，甚至可能知道它属于哪个恶意软件家族，具体取决于它是否在公开仓库中可用。如果文件是未知的，你需要进一步挖掘，以确定它的功能和行为。但这正是恶意软件分析的有趣部分！让我们看看如何调查一个未知文件。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Identifying and Classifying
    Unknown Malware with Yara</samp>
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">使用 Yara 识别和分类未知恶意软件</samp>
- en: 'Yara ([*http://<wbr>virustotal<wbr>.github<wbr>.io<wbr>/yara<wbr>/*](http://virustotal.github.io/yara/))
    allows you to create signature definitions (called *rules*) designed to match
    on an unidentified file. These signature definitions can be in the form of strings,
    byte sequences, or other properties. The following code (available at [*https://<wbr>github<wbr>.com<wbr>/bartblaze<wbr>/Yara<wbr>-rules<wbr>/blob<wbr>/master<wbr>/rules<wbr>/crimeware<wbr>/AveMaria<wbr>.yar*](https://github.com/bartblaze/Yara-rules/blob/master/rules/crimeware/AveMaria.yar))
    shows an abridged version of a Yara rule written to detect Ave Maria:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Yara（[*http://<wbr>virustotal<wbr>.github<wbr>.io<wbr>/yara<wbr>/*](http://virustotal.github.io/yara/)）允许你创建用于匹配未识别文件的签名定义（称为
    *规则*）。这些签名定义可以是字符串、字节序列或其他属性的形式。以下代码（可以在 [*https://<wbr>github<wbr>.com<wbr>/bartblaze<wbr>/Yara<wbr>-rules<wbr>/blob<wbr>/master<wbr>/rules<wbr>/crimeware<wbr>/AveMaria<wbr>.yar*](https://github.com/bartblaze/Yara-rules/blob/master/rules/crimeware/AveMaria.yar)
    上找到）展示了一个简化版本的 Yara 规则，用于检测 Ave Maria：
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This Yara rule is specifically designed to match on samples that may be related
    to the Ave Maria / Warzone RAT. It will match on any file that contains three
    or more of the strings in the <samp class="SANS_TheSansMonoCd_W5Regular_11">strings</samp>
    section. Let’s run this Yara rule on our analysis sample. To run a Yara rule,
    use the following syntax (the <samp class="SANS_TheSansMonoCd_W5Regular_11">-s</samp>
    parameter shows the exact string matches in the malware file):'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Yara 规则专门设计用于匹配可能与 Ave Maria / Warzone RAT 相关的样本。它会匹配任何包含 <samp class="SANS_TheSansMonoCd_W5Regular_11">strings</samp>
    部分中三个或更多字符串的文件。让我们在我们的分析样本上运行这个 Yara 规则。要运行 Yara 规则，请使用以下语法（<samp class="SANS_TheSansMonoCd_W5Regular_11">-s</samp>
    参数显示恶意文件中的精确字符串匹配）：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Running this Yara rule on our sample returns the following results:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的样本上运行这个 Yara 规则返回了以下结果：
- en: '[PRE4]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It looks like we have a match! The line that begins with <samp class="SANS_TheSansMonoCd_W5Regular_11">AveMaria</samp>
    shows us that there was a successful match, and the lines following it show exactly
    which strings from the rule matched on our suspicious file.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们匹配成功了！以 <samp class="SANS_TheSansMonoCd_W5Regular_11">AveMaria</samp> 开头的这一行显示了成功匹配的信息，后续的行显示了规则中的哪些字符串在我们的可疑文件上匹配。
- en: Yara rules can help you quickly obtain valuable information about the file you’re
    dealing with and potentially even identify its associated malware family. For
    more information on Yara, see [*https://<wbr>yara<wbr>.readthedocs<wbr>.io<wbr>/en<wbr>/stable<wbr>/*](https://yara.readthedocs.io/en/stable/).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Yara 规则可以帮助你快速获取关于你处理的文件的宝贵信息，甚至可能识别出其相关的恶意软件家族。欲了解更多有关 Yara 的信息，请参见 [*https://<wbr>yara<wbr>.readthedocs<wbr>.io<wbr>/en<wbr>/stable<wbr>/*](https://yara.readthedocs.io/en/stable/)。
- en: Now, let’s take a look at how to assess an unknown file based on its static
    properties.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何根据文件的静态属性来评估一个未知文件。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Analyzing Static Properties</samp>
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">分析静态属性</samp>
- en: You can learn a lot about an unknown file by inspecting its static properties.
    Some of these properties were discussed in “The PE File Format” on [page 13](chapter1.xhtml#pg_13).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查文件的静态属性，你可以学到很多关于未知文件的信息。关于这些属性的一些内容已在《PE 文件格式》一文中讨论，详见 [第 13 页](chapter1.xhtml#pg_13)。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Strings</samp>
  id: totrans-87
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">字符串</samp>
- en: '*Strings* are sequences of characters in various file types. Sometimes strings
    are human-readable text, and sometimes they’re simply a sequence of bytes. Either
    way, they can be a great starting point for inspecting an unknown file. The simplest
    way to extract strings from a file is to use the <samp class="SANS_TheSansMonoCd_W5Regular_11">strings</samp>
    command line tool in Linux. This tool scans the file and attempts to locate and
    interpret strings of binary data into human-readable form:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*字符串*是各种文件类型中的字符序列。有时，字符串是人类可读的文本，有时则仅仅是字节的序列。无论哪种情况，它们都是检查未知文件的一个很好的起点。提取文件中的字符串最简单的方法是使用
    Linux 中的 <samp class="SANS_TheSansMonoCd_W5Regular_11">strings</samp> 命令行工具。该工具扫描文件并尝试定位并将二进制数据的字符串转换为人类可读的形式：'
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Note that by default, the strings command will only output ASCII strings. Another
    type of string, unicode (or wide), can be extracted by using the following command:
    <samp class="SANS_TheSansMonoCd_W5Regular_11">strings -e l suspicious.exe</samp>.
    The output already reveals some interesting things:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，默认情况下，strings 命令仅会输出 ASCII 字符串。另一种类型的字符串，即 Unicode（或宽字符），可以通过以下命令提取：<samp
    class="SANS_TheSansMonoCd_W5Regular_11">strings -e l suspicious.exe</samp>。输出结果已经揭示了一些有趣的内容：
- en: '[PRE6]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Most notably, there’s a reference to <samp class="SANS_TheSansMonoCd_W5Regular_11">warzone160</samp>.
    Running a quick search engine query reveals that this is very likely related to
    the Ave Maria or Warzone RAT malware family, as you can see in [Figure 2-5](chapter2.xhtml#fig2-5).
    This is a good example of integrating open source intelligence (OSINT) into your
    malware analysis process.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最引人注目的是，存在对 <samp class="SANS_TheSansMonoCd_W5Regular_11">warzone160</samp>
    的引用。快速搜索引擎查询表明，这很可能与 Ave Maria 或 Warzone RAT 恶意软件家族有关，正如你在 [图 2-5](chapter2.xhtml#fig2-5)
    中所看到的。这是将开放源代码情报（OSINT）集成到恶意软件分析过程中的一个很好的例子。
- en: '![](../images/fig2-5.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-5.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-5: An OSINT investigation
    for embedded strings in malware</samp>'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-5：在恶意软件中嵌入字符串的 OSINT 调查</samp>
- en: For executable files specifically, PE tools such as PEStudio can be very useful.
    PEStudio not only extracts various string formats from the executable but also
    orders and classifies those strings based on certain characteristics, as you can
    see in [Figure 2-6](chapter2.xhtml#fig2-6).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 对于可执行文件，PE 工具如 PEStudio 非常有用。PEStudio 不仅提取可执行文件中的各种字符串格式，还根据特定特征对这些字符串进行排序和分类，正如你在
    [图 2-6](chapter2.xhtml#fig2-6) 中所看到的。
- en: '![](../images/fig2-6.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-6.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-6: String classification
    in PEStudio</samp>'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-6：PEStudio 中的字符串分类</samp>
- en: 'PEStudio has discovered several notable strings: possible privilege escalation
    capabilities (<samp class="SANS_TheSansMonoCd_W5Regular_11">Elevation:Administrator</samp>),
    a command line command (<samp class="SANS_TheSansMonoCd_W5Regular_11">cmd.exe</samp>)
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">powershell</samp> and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">wmic</samp> references, as well as references
    to SMTP services and passwords (<samp class="SANS_TheSansMonoCd_W5Regular_11">SMTP</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">POP</samp>, and so on). From these
    strings, you might infer that this file has capabilities to elevate its privileges
    from a standard user to an administrator; invoke Windows tools such as *cmd.exe*,
    PowerShell, and WMIC; and use SMTP for network communication. The useful pieces
    of information you discover in strings can help guide you during your investigation,
    giving you clues about a malware file’s intentions.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: PEStudio 已经发现了几条值得注意的字符串：可能的权限提升能力 (<samp class="SANS_TheSansMonoCd_W5Regular_11">Elevation:Administrator</samp>)，一个命令行命令
    (<samp class="SANS_TheSansMonoCd_W5Regular_11">cmd.exe</samp>) 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">powershell</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">wmic</samp> 引用，还有对 SMTP 服务和密码的引用
    (<samp class="SANS_TheSansMonoCd_W5Regular_11">SMTP</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">POP</samp>
    等等)。从这些字符串中，你可能推测该文件具备将权限从普通用户提升为管理员的能力；调用 Windows 工具，如 *cmd.exe*、PowerShell 和
    WMIC；并使用 SMTP 进行网络通信。你在字符串中发现的有用信息可以帮助你在调查过程中提供线索，了解恶意软件文件的意图。
- en: 'Two additional tools that are very useful for string analysis are FLOSS and
    StringSifter. FLOSS ([*https://<wbr>github<wbr>.com<wbr>/mandiant<wbr>/flare<wbr>-floss*](https://github.com/mandiant/flare-floss))
    is a tool for identifying and extracting *obfuscated* strings—that is, strings
    that are being intentionally obscured to prevent prying eyes from viewing the
    data. Here’s an excerpt of FLOSS’s output for a different suspect file:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 另外两个对字符串分析非常有用的工具是 FLOSS 和 StringSifter。FLOSS（[*https://<wbr>github<wbr>.com<wbr>/mandiant<wbr>/flare<wbr>-floss*](https://github.com/mandiant/flare-floss)）是一个用于识别和提取*混淆*字符串的工具——即那些故意被掩盖以防止外部窥探数据的字符串。以下是
    FLOSS 针对另一个可疑文件的输出摘录：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this case, FLOSS was able to decode some notable obfuscated strings including
    a filepath (<samp class="SANS_TheSansMonoCd_W5Regular_11">C:\Program Files\Office\W0rd.exe</samp>),
    a command line tool reference (<samp class="SANS_TheSansMonoCd_W5Regular_11">taskkill</samp>),
    and what could be a Windows function that the malware will import at a later point
    (<samp class="SANS_TheSansMonoCd_W5Regular_11">ZwQueryInformationProcess</samp>).
    In [Chapter 16](chapter16.xhtml), I’ll discuss methods with which malware can
    obfuscate data, and I’ll also discuss how we can use FLOSS to reveal that data.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，FLOSS 成功解码了一些显著的混淆字符串，包括一个文件路径（<samp class="SANS_TheSansMonoCd_W5Regular_11">C:\Program
    Files\Office\W0rd.exe</samp>）、一个命令行工具引用（<samp class="SANS_TheSansMonoCd_W5Regular_11">taskkill</samp>），以及恶意软件可能稍后导入的一个
    Windows 函数（<samp class="SANS_TheSansMonoCd_W5Regular_11">ZwQueryInformationProcess</samp>）。在[第
    16 章](chapter16.xhtml)中，我将讨论恶意软件如何混淆数据的方法，并讨论如何利用 FLOSS 来揭示这些数据。
- en: StringSifter ([*https://<wbr>github<wbr>.com<wbr>/mandiant<wbr>/stringsifter*](https://github.com/mandiant/stringsifter))
    takes the output from another string extraction tool, such as the aforementioned
    strings and FLOSS tools, and ranks and sorts the strings by their usefulness for
    and relevance to malware analysts. I won’t discuss StringSifter more in this book,
    but it can be very helpful for quickly analyzing a large set of strings.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: StringSifter（[*https://<wbr>github<wbr>.com<wbr>/mandiant<wbr>/stringsifter*](https://github.com/mandiant/stringsifter)）接收来自其他字符串提取工具的输出，如前述的字符串和
    FLOSS 工具，并根据它们对恶意软件分析人员的有用性和相关性对字符串进行排名和排序。我在本书中不会进一步讨论 StringSifter，但它在快速分析大量字符串时非常有帮助。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Imports and Exports</samp>
  id: totrans-103
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">导入和导出</samp>
- en: As [Chapter 1](chapter1.xhtml) explained, imports are libraries and functions
    that the executable file is using, while exports are functions that the executable
    provides to other functions or programs for their use. Imports and exports can
    be used to get hints about the executable file’s intent. For example, if the file
    is importing libraries such as *Winhttp.dll*, we can make an educated guess (but
    always confirm!) that it may attempt to contact a remote server, such as a command
    and control server.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 正如[第 1 章](chapter1.xhtml)所解释的，导入是可执行文件正在使用的库和函数，而导出是可执行文件为其他函数或程序提供的函数。导入和导出可以用来获取有关可执行文件意图的线索。例如，如果该文件导入了像*Winhttp.dll*这样的库，我们可以做出合理的猜测（但一定要确认！），它可能尝试联系远程服务器，如命令与控制服务器。
- en: Once again, PEStudio can extract imports and exports from malware and display
    that information to you in an organized way, as demonstrated in [Figure 2-7](chapter2.xhtml#fig2-7).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，PEStudio 可以从恶意软件中提取导入和导出的信息，并以有组织的方式向你展示这些信息，如[图 2-7](chapter2.xhtml#fig2-7)所示。
- en: '![](../images/fig2-7.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-7.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-7: Function imports
    listed in PEStudio</samp>'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-7：PEStudio 中列出的函数导入</samp>
- en: Here we can see the various Windows functions that this malware is importing
    and is likely to call during its execution. Some of the functions of special interest
    are the <samp class="SANS_TheSansMonoCd_W5Regular_11">BCrypt*</samp> functions
    (possibly used to encrypt or decrypt data), <samp class="SANS_TheSansMonoCd_W5Regular_11">WriteProcessMemory</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">CreateRemoteThread</samp> (which
    may be used as part of process injection), and <samp class="SANS_TheSansMonoCd_W5Regular_11">WriteFile</samp>
    (which is used to write data to a file). Although not definitive evidence of a
    file’s maliciousness or capabilities, these functions are more clues that we can
    use during the malware analysis process.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到这个恶意软件导入的各种 Windows 函数，并且很可能在执行过程中会调用它们。值得特别关注的函数有<samp class="SANS_TheSansMonoCd_W5Regular_11">BCrypt*</samp>函数（可能用于加密或解密数据）、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">WriteProcessMemory</samp>和<samp class="SANS_TheSansMonoCd_W5Regular_11">CreateRemoteThread</samp>（可能用于作为进程注入的一部分），以及<samp
    class="SANS_TheSansMonoCd_W5Regular_11">WriteFile</samp>（用于向文件写入数据）。尽管这些并不能作为文件恶意性或能力的决定性证据，但它们是我们在恶意软件分析过程中可以利用的线索。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Metadata and Other Information</samp>
  id: totrans-109
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">元数据和其他信息</samp>
- en: Finally, the file’s metadata can give us clues about its intentions. PEStudio
    can show the file’s timestamps, which may represent when the file was first compiled.
    Also, it can show information about the programming language the file was written
    in, the various sections of the PE file, and even the embedded certificates that
    may have been used to sign the file. In short, you can gather a wealth of additional
    information about a file using PE file analysis tools such as PEStudio. Be aware,
    however, that malware authors can alter and fake metadata, as we’ll explore later
    in this book.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，文件的元数据可以为我们提供有关其意图的线索。PEStudio 可以显示文件的时间戳，这可能表示文件首次编译的时间。它还可以显示有关文件编程语言的信息、PE
    文件的各个部分，甚至是可能用于签署文件的嵌入证书。简而言之，你可以使用像 PEStudio 这样的 PE 文件分析工具收集关于文件的丰富附加信息。然而需要注意的是，恶意软件作者可以篡改和伪造元数据，正如本书稍后将讨论的那样。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Automated Malware Triage with Sandboxes</samp>
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">使用沙箱的自动化恶意软件分诊</samp>
- en: After initially assessing your suspect file, you likely will still have questions.
    Even if you were able to determine what malware family the sample belongs to based
    on your initial analysis, you may still need to quickly identify its capabilities
    and extract key information. A good option is to use a malware analysis sandbox,
    which can provide a lot of information about the sample’s purpose, capabilities,
    and behaviors.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在最初评估可疑文件后，你可能仍然会有一些问题。即使你通过初步分析能够确定该样本属于哪种恶意软件家族，你仍然可能需要快速识别其能力并提取关键信息。一个好的选择是使用恶意软件分析沙箱，它可以提供关于样本目的、能力和行为的很多信息。
- en: Malware analysis sandboxes are used to automate parts of the malware analysis
    process, especially initial triage. When a file is submitted to an automated sandbox,
    it is detonated (that is, executed) and its actions on the system are closely
    monitored. Automated sandboxes often produce a report of the file’s behaviors
    and capabilities after analysis.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件分析沙箱用于自动化恶意软件分析过程中的部分步骤，特别是初步的分诊。当一个文件被提交到自动化沙箱时，它会被引爆（即执行），并且它对系统的行为会被密切监控。自动化沙箱通常会在分析后生成一个报告，列出文件的行为和能力。
- en: At the time of this writing, there are a myriad of sandboxes, each with different
    features. There are too many good sandboxes to list, but [Table 2-2](chapter2.xhtml#tab2-2)
    lists some I have experience with and feel are worth mentioning. Many of these
    sandboxes allow you to upload files free of cost, but some have a limit on the
    number of files you are able to submit or other limitations for their free tiers.
    Note that the first two items in the list (CAPE and Cuckoo) are not commercial,
    so you’ll need to download the projects from GitHub and build them yourself. Additionally,
    take note that Cuckoo, at this time of writing, is not maintained anymore, but
    the project authors are working on a newer version.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，市面上有许多沙盒，每个沙盒都有不同的特点。虽然有太多优秀的沙盒无法一一列举，但[表 2-2](chapter2.xhtml#tab2-2)列出了我有过使用经验并且认为值得提及的一些。许多沙盒允许你免费上传文件，但也有一些对于提交文件的数量或其他免费层级存在限制。请注意，列表中的前两个项目（CAPE
    和 Cuckoo）并非商业化产品，因此你需要从 GitHub 上下载这些项目并自行构建。此外，请注意，Cuckoo 在本文撰写时已经不再维护，但项目作者正在开发一个新版。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 2-2:</samp> <samp class="SANS_Futura_Std_Book_11">Commercial
    and Free Sandboxing Options</samp>
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 2-2：</samp> <samp class="SANS_Futura_Std_Book_11">商业化和免费沙盒选项</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Name</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Type</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Source</samp> |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">名称</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">类型</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">来源</samp> |'
- en: '| --- | --- | --- |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| <samp class="SANS_Futura_Std_Book_11">CAPE</samp> | <samp class="SANS_Futura_Std_Book_11">Free,
    open source</samp> | [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/kevoreilly/CAPEv2</samp><samp
    class="SANS_Futura_Std_Book_Oblique_I_11">https://capev2.readthedocs.io/</samp>](https://github.com/kevoreilly/CAPEv2https://capev2.readthedocs.io/)
    |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">CAPE</samp> | <samp class="SANS_Futura_Std_Book_11">免费，开源</samp>
    | [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/kevoreilly/CAPEv2</samp><samp
    class="SANS_Futura_Std_Book_Oblique_I_11">https://capev2.readthedocs.io/</samp>](https://github.com/kevoreilly/CAPEv2https://capev2.readthedocs.io/)
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Cuckoo</samp> | <samp class="SANS_Futura_Std_Book_11">Free,
    open source</samp> | [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/cuckoosandbox</samp>](https://github.com/cuckoosandbox)
    |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">Cuckoo</samp> | <samp class="SANS_Futura_Std_Book_11">免费，开源</samp>
    | [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/cuckoosandbox</samp>](https://github.com/cuckoosandbox)
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Hatching Triage</samp> | <samp class="SANS_Futura_Std_Book_11">Commercial,
    free to submit files</samp> | [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://tria.ge</samp>](https://tria.ge)
    |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">Hatching Triage</samp> | <samp class="SANS_Futura_Std_Book_11">商业化，免费提交文件</samp>
    | [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://tria.ge</samp>](https://tria.ge)
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Hybrid Analysis</samp> | <samp class="SANS_Futura_Std_Book_11">Commercial,
    free to submit files</samp> | [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://www.hybrid-analysis.com</samp>](https://www.hybrid-analysis.com)
    |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">Hybrid Analysis</samp> | <samp class="SANS_Futura_Std_Book_11">商业化，免费提交文件</samp>
    | [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://www.hybrid-analysis.com</samp>](https://www.hybrid-analysis.com)
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Intezer</samp> | <samp class="SANS_Futura_Std_Book_11">Commercial,
    free to submit files</samp> | [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://www.intezer.com</samp>](https://www.intezer.com)
    |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">Intezer</samp> | <samp class="SANS_Futura_Std_Book_11">商业化，免费提交文件</samp>
    | [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://www.intezer.com</samp>](https://www.intezer.com)
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Joe Sandbox</samp> | <samp class="SANS_Futura_Std_Book_11">Commercial,
    free to submit files</samp> | [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://www.joesecurity.org/</samp>](https://www.joesecurity.org/)
    |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">Joe Sandbox</samp> | <samp class="SANS_Futura_Std_Book_11">商业化，免费提交文件</samp>
    | [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://www.joesecurity.org/</samp>](https://www.joesecurity.org/)
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">UnpacMe</samp> | <samp class="SANS_Futura_Std_Book_11">Commercial,
    free to submit files</samp> | [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://www.unpac.me/</samp>](https://www.unpac.me/)
    |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">UnpacMe</samp> | <samp class="SANS_Futura_Std_Book_11">商业化，免费提交文件</samp>
    | [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://www.unpac.me/</samp>](https://www.unpac.me/)
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">VirusTotal</samp> | <samp class="SANS_Futura_Std_Book_11">Commercial,
    free to submit files</samp> | [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://www.virustotal.com</samp>](https://www.virustotal.com)
    |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">VirusTotal</samp> | <samp class="SANS_Futura_Std_Book_11">商业，免费提交文件</samp>
    | [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://www.virustotal.com</samp>](https://www.virustotal.com)
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">VMRay</samp> | <samp class="SANS_Futura_Std_Book_11">Commercial</samp>
    | [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://www.vmray.com</samp>](https://www.vmray.com)
    |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">VMRay</samp> | <samp class="SANS_Futura_Std_Book_11">商业</samp>
    | [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://www.vmray.com</samp>](https://www.vmray.com)
    |'
- en: As with VirusTotal submissions, anything you submit to a public sandbox is immediately
    available to other researchers and the world. Make every effort to ensure the
    file you’re submitting doesn’t contain sensitive personal or business information,
    and consider the impact on the investigation if the sample is made available to
    the public.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 与 VirusTotal 提交一样，任何你提交到公共沙箱的文件都会立即对其他研究人员和全球开放。请尽力确保你提交的文件不包含敏感的个人或商业信息，并考虑样本公开后对调查的影响。
- en: '[Figure 2-8](chapter2.xhtml#fig2-8) shows the result of submitting our malware
    file to a Cuckoo sandbox instance.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2-8](chapter2.xhtml#fig2-8) 显示了将我们的恶意软件文件提交到 Cuckoo 沙箱实例后的结果。'
- en: '![](../images/fig2-8.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-8.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-8: A malware summary
    in the Cuckoo sandbox</samp>'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-8：Cuckoo 沙箱中的恶意软件汇总</samp>
- en: This Cuckoo summary page has quite a bit of useful information, such as basic
    file information (file type, size, hashes, and so on), the detection score (“10
    out of 10!”), and even Yara signatures. It seems that Cuckoo’s Yara engine is
    detecting this sample as possibly Gh0st or Ave Maria / Warzone. In comparison,
    Joe Sandbox reports that this sample is Ave Maria, as you can see in [Figure 2-9](chapter2.xhtml#fig2-9).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Cuckoo 汇总页面包含了很多有用的信息，如基本的文件信息（文件类型、大小、哈希值等）、检测分数（“10 满分！”）甚至是 Yara 签名。似乎
    Cuckoo 的 Yara 引擎将这个样本检测为可能是 Gh0st 或 Ave Maria / Warzone。相比之下，Joe Sandbox 报告这个样本为
    Ave Maria，正如你在[图 2-9](chapter2.xhtml#fig2-9)中看到的那样。
- en: '![](../images/fig2-9.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-9.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-9: A malware overview
    in Joe Sandbox</samp>'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-9：Joe Sandbox 中的恶意软件概览</samp>
- en: Simply knowing that this malware is likely associated with Ave Maria is helpful.
    This example also demonstrates that detonating a sample in more than one sandbox
    environment is never a bad idea. Sometimes different sandboxes can give different
    results, creating a more complete picture of the malware. Let’s inspect this sample
    in a bit more depth in Joe Sandbox. The malware’s process tree, shown in [Figure
    2-10](chapter2.xhtml#fig2-10), is a fundamental piece of information when you’re
    analyzing malware samples in a sandbox.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅知道这个恶意软件很可能与 Ave Maria 有关，就已经非常有帮助。这个例子还表明，在多个沙箱环境中触发一个样本从来都不是坏主意。有时，不同的沙箱会给出不同的结果，从而提供更完整的恶意软件图景。让我们在
    Joe Sandbox 中更深入地检查这个样本。恶意软件的进程树，如[图 2-10](chapter2.xhtml#fig2-10)所示，是在沙箱中分析恶意软件样本时的基本信息。
- en: '![](../images/fig2-10.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-10.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-10: The malware’s
    process tree in Joe Sandbox</samp>'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-10：Joe Sandbox 中恶意软件的进程树</samp>
- en: This process tree shows the original malware executable’s process (*cY7cusWGCA.exe*)
    as well as all spawned child processes, which gives us some insight into the malware’s
    capabilities and behaviors. Notably, the PowerShell process is executing the command
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Add-MpPreference -ExclusionPath
    C:\</samp>. This command adds the malware to the Windows Defender exclusion list,
    effectively bypassing anti-malware controls.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这个进程树显示了原始恶意软件可执行文件的进程（*cY7cusWGCA.exe*）以及所有派生的子进程，这为我们提供了关于恶意软件能力和行为的一些洞察。特别地，PowerShell
    进程正在执行命令 <samp class="SANS_TheSansMonoCd_W5Regular_11">Add-MpPreference -ExclusionPath
    C:\</samp>。此命令将恶意软件添加到 Windows Defender 的排除列表中，从而有效绕过了反恶意软件控制。
- en: Also, the Anti Debugging section in Joe Sandbox, shown in [Figure 2-11](chapter2.xhtml#fig2-11),
    illustrates some of the techniques that this sample may be using to detect and
    defend against debuggers.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Joe Sandbox 中的反调试部分，如[图 2-11](chapter2.xhtml#fig2-11)所示，展示了这个样本可能使用的一些技术，用于检测并防御调试器。
- en: '![](../images/fig2-11.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-11.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-11: The malware’s
    anti-debugging techniques in Joe Sandbox</samp>'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-11：恶意软件在Joe Sandbox中的反调试技术</samp>
- en: It appears that this malware sample may be using techniques such as dynamic
    library loading, manually reading the PEB, and calling <samp class="SANS_TheSansMonoCd_W5Regular_11">GetProcessHeap</samp>
    to detect debuggers.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来这个恶意软件样本可能使用了动态库加载、手动读取PEB以及调用<samp class="SANS_TheSansMonoCd_W5Regular_11">GetProcessHeap</samp>等技术来检测调试器。
- en: You can also see that Joe Sandbox has detected the use of several potential
    host defense evasion techniques, such as process injection and adding exclusions
    to Windows Defender (see [Figure 2-12](chapter2.xhtml#fig2-12)).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以看到Joe Sandbox已检测到使用了几种潜在的主机防御绕过技术，如进程注入和向Windows Defender添加排除项（见[图 2-12](chapter2.xhtml#fig2-12)）。
- en: '![](../images/fig2-12.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-12.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-12: Defense evasion
    techniques identified in Joe Sandbox</samp>'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-12：在Joe Sandbox中识别的防御绕过技术</samp>
- en: Anti-debugging and defense evasion techniques will be discussed in greater detail
    in [Chapter 10](chapter10.xhtml) and [Part IV](part4.xhtml), respectively.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 反调试和防御绕过技术将在[第10章](chapter10.xhtml)和[第4部分](part4.xhtml)中分别详细讨论。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-146
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*Using sandboxes is always a wise first step in identifying and locating malware
    evasion techniques so that you can later circumvent them if necessary. Keep in
    mind, however, that sandbox results may be inconclusive or even incorrect. Always
    manually investigate sandbox results to verify the findings.*'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用沙箱总是识别和定位恶意软件绕过技术的明智第一步，这样你在必要时可以绕过它们。然而，请记住，沙箱的结果可能是没有定论的，甚至可能是错误的。始终手动检查沙箱结果以验证发现的内容。*'
- en: Finally, employing sandboxes is a great way to quickly extract *indicators of
    compromise (IOCs)* from malware samples. IOCs can be network artifacts (such as
    communication to a specific domain or IP address, or a specific HTTP header) or
    host artifacts (such as a specific filename or registry key modification, or suspicious
    command line execution) that you can use later to detect this malware and prevent
    it from infecting further hosts. For more information on what is and isn’t an
    IOC, visit [*https://<wbr>www<wbr>.crowdstrike<wbr>.com<wbr>/cybersecurity<wbr>-101<wbr>/indicators<wbr>-of<wbr>-compromise<wbr>/*](https://www.crowdstrike.com/cybersecurity-101/indicators-of-compromise/).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用沙箱是一种快速提取*妥协指标（IOCs）*的好方法。IOC可以是网络伪迹（例如，向特定域名或IP地址发送的通信，或特定的HTTP头部）或主机伪迹（例如，特定的文件名或注册表键修改，或可疑的命令行执行），这些都可以帮助你后续检测该恶意软件并防止其进一步感染主机。关于什么是和什么不是IOC的更多信息，请访问
    [*https://<wbr>www<wbr>.crowdstrike<wbr>.com<wbr>/cybersecurity<wbr>-101<wbr>/indicators<wbr>-of<wbr>-compromise<wbr>/*](https://www.crowdstrike.com/cybersecurity-101/indicators-of-compromise/)。
- en: The Joe Sandbox environment was able to extract the command and control IP address
    from this sample, as shown in [Figure 2-13](chapter2.xhtml#fig2-13).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Joe Sandbox环境能够从这个样本中提取出命令控制IP地址，如[图 2-13](chapter2.xhtml#fig2-13)所示。
- en: '![](../images/fig2-13.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-13.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-13: A malware configuration
    extracted by Joe Sandbox</samp>'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-13：Joe Sandbox提取的恶意软件配置</samp>
- en: After analyzing the malware sample in a few sandboxes, we now have a fairly
    good assessment of many of its capabilities and behaviors. This malware sample
    is likely a variant of Ave Maria, and it is able to communicate with a command
    and control address (making it likely to download additional payloads), detect
    analysis tools such as debuggers, and evade host defenses using process injection
    and anti-malware bypass techniques. Depending on your malware analysis objectives
    for this investigation, this may be enough information for you. However, to understand
    a malware sample in detail, we must dive deeper.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在沙箱中分析恶意软件样本后，我们现在已经对其许多能力和行为有了相当好的评估。这个恶意软件样本很可能是Ave Maria的变种，能够与命令控制地址通信（这意味着它很可能会下载额外的负载），检测调试工具等分析工具，并通过进程注入和反恶意软件绕过技术来逃避主机防御。根据你此次调查的恶意软件分析目标，这些信息可能已经足够。然而，要详细了解一个恶意软件样本，我们需要深入研究。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Interactive Behavioral Analysis</samp>
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">交互式行为分析</samp>
- en: Sandbox results can provide most of the information an analyst needs to determine
    a given malware’s intent, purpose, and potential impact, but key questions will
    likely remain unanswered. Many malware sandboxes are designed for quick-and-dirty
    analysis and initial assessment, and sometimes they don’t contain the detailed
    information that you may need during the investigation. Also, sandboxes can’t
    be easily modified on the fly to tailor the environment to the running malware,
    so their results may be incomplete, especially if the malware is using advanced
    sandbox detection and circumvention techniques.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 沙箱结果可以提供分析师判断恶意软件意图、目的和潜在影响所需的大部分信息，但关键问题可能仍然没有答案。许多恶意软件沙箱是为了快速而粗略的分析和初步评估而设计的，有时它们不会包含在调查过程中可能需要的详细信息。此外，沙箱无法轻松地动态修改，以根据正在运行的恶意软件调整环境，因此它们的结果可能不完整，尤其是当恶意软件使用了高级的沙箱检测和规避技术时。
- en: '*Interactive behavioral analysis* is a fancy term for manually detonating and
    monitoring malware in a controlled environment, rather than relying solely on
    fully automated detonation in a sandbox such as Cuckoo. Interactive behavioral
    analysis is a much more manual and, well, interactive process, giving you more
    freedom. This interactive analysis is typically conducted in a VM.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '*交互式行为分析*是一个花哨的术语，用于指手动引爆和监控恶意软件在受控环境中的行为，而不是仅仅依赖于像 Cuckoo 这样的沙箱进行完全自动化的引爆。交互式行为分析是一个更加手动、互动的过程，给予你更多的自由。这种交互分析通常是在虚拟机中进行的。'
- en: One of the key reasons to use interactive behavioral analysis is that, if the
    malware sample is using sandbox detection techniques, you can attempt to thwart
    them by emulating a real user or otherwise giving the malware something it’s looking
    for. For example, malware may be searching for a specific file on the victim’s
    system, and since we fully control the interactive environment, we can provide
    this file so that the malware can continue executing. Fully automated sandboxes
    often fail in this regard.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 使用交互式行为分析的一个关键原因是，如果恶意软件样本使用了沙箱检测技术，你可以通过模拟真实用户或向恶意软件提供它寻找的东西来尝试破坏这些检测。例如，恶意软件可能会在受害者的系统上搜索特定的文件，而由于我们完全控制交互环境，我们可以提供这个文件，让恶意软件继续执行。完全自动化的沙箱在这方面通常会失败。
- en: 'The tools we’ll explore are freely available. If you wish to follow along,
    you’ll need to download and install the following tools in a VM environment:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要探索的工具是免费的。如果你想跟着操作，你需要在虚拟机环境中下载并安装以下工具：
- en: Procmon ([*https://<wbr>learn<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/sysinternals<wbr>/*](https://learn.microsoft.com/en-us/sysinternals/))
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Procmon ([*https://<wbr>learn<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/sysinternals<wbr>/*](https://learn.microsoft.com/en-us/sysinternals/))
- en: Process Hacker ([*https://<wbr>processhacker<wbr>.sourceforge<wbr>.io*](https://processhacker.sourceforge.io))
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Process Hacker ([*https://<wbr>processhacker<wbr>.sourceforge<wbr>.io*](https://processhacker.sourceforge.io))
- en: Fiddler ([*https://<wbr>www<wbr>.telerik<wbr>.com<wbr>/fiddler*](https://www.telerik.com/fiddler))
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fiddler ([*https://<wbr>www<wbr>.telerik<wbr>.com<wbr>/fiddler*](https://www.telerik.com/fiddler))
- en: Wireshark ([*https://<wbr>www<wbr>.wireshark<wbr>.org*](https://www.wireshark.org))
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wireshark ([*https://<wbr>www<wbr>.wireshark<wbr>.org*](https://www.wireshark.org))
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-162
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*For this analysis example, we’ll be working with a malware sample that you
    can find on VirusTotal or MalShare using the following hash:*'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '*在这个分析示例中，我们将使用一个恶意软件样本，你可以通过以下哈希值在 VirusTotal 或 MalShare 上找到该样本：*'
- en: 'SHA256: 9bbc55f519b5c2bd5f57c0e081a60d079b44243841bf0bc76eadf50a902aaa61'
  id: totrans-164
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'SHA256: 9bbc55f519b5c2bd5f57c0e081a60d079b44243841bf0bc76eadf50a902aaa61'
- en: '#### <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Monitoring Malware
    Behaviors</samp>'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '#### <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">监控恶意软件行为</samp>'
- en: A large part of interactive behavioral analysis is monitoring the malware’s
    behaviors or actions on the victim host. A popular tool for this is Process Monitor
    (Procmon), which is part of the Sysinternals suite. Procmon can capture many details
    of actions the malware takes on the host, such as spawning processes, reading
    and writing files and registries, and attempting to connect to the network. [Figure
    2-14](chapter2.xhtml#fig2-14) shows the process tree in Procmon of a suspicious
    Microsoft Word file.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 交互式行为分析的一个重要部分是监控恶意软件在受害主机上的行为或操作。一个常用的工具是 Process Monitor（Procmon），它是 Sysinternals
    套件的一部分。Procmon 可以捕获恶意软件在主机上执行的许多操作细节，比如创建进程、读取和写入文件及注册表、以及尝试连接网络等。[图 2-14](chapter2.xhtml#fig2-14)
    显示了 Procmon 中一个可疑 Microsoft Word 文件的进程树。
- en: '![](../images/fig2-14.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-14.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-14: Analyzing a malware
    sample’s process tree in Procmon</samp>'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图2-14：在Procmon中分析恶意软件样本的进程树</samp>
- en: You can see that *WINWORD.EXE* (Microsoft Word) is spawning a suspicious process
    (*rundll32.exe*), a result that is always worth investigating further. The process
    tree can also be used to analyze parent-child process relationships and spot code
    injection mechanisms. We’ll discuss code injection in [Chapter 12](chapter12.xhtml).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，*WINWORD.EXE*（Microsoft Word）正在生成一个可疑的进程（*rundll32.exe*），这是一个值得进一步调查的结果。进程树还可以用来分析父子进程关系并发现代码注入机制。我们将在[第12章](chapter12.xhtml)讨论代码注入。
- en: By inspecting the Files section of Procmon, we can see that this file is creating
    some suspect additional files (see [Figure 2-15](chapter2.xhtml#fig2-15)).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查Procmon的文件部分，我们可以看到这个文件正在创建一些可疑的附加文件（参见[图2-15](chapter2.xhtml#fig2-15)）。
- en: '![](../images/fig2-15.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-15.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-15: Viewing suspicious
    file writes in Procmon</samp>'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图2-15：在Procmon中查看可疑的文件写入</samp>
- en: The main thing to notice here is the <samp class="SANS_TheSansMonoCd_W5Regular_11">WriteFile</samp>
    operations, followed by the path where the file is being written. These two files
    (*diplo.ioe* and *flex.xz*) should be further inspected during analysis.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的主要是<samp class="SANS_TheSansMonoCd_W5Regular_11">WriteFile</samp>操作，后面跟着文件写入的路径。在分析过程中，这两个文件（*diplo.ioe*和*flex.xz*）应该进一步检查。
- en: Similarly, [Figure 2-16](chapter2.xhtml#fig2-16) shows Procmon’s Registry tab.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，[图2-16](chapter2.xhtml#fig2-16)显示了Procmon的注册表选项卡。
- en: '![](../images/fig2-16.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-16.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-16: Viewing registry
    queries in Procmon</samp>'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图2-16：在Procmon中查看注册表查询</samp>
- en: The *rundll32.exe* process shown here is executing a <samp class="SANS_TheSansMonoCd_W5Regular_11">RegQueryValue</samp>
    operation, which indicates that it is reading several registry values on the host.
    The registry keys it’s particularly interested in all seem to be related to domain,
    hostname, and network adapter information. Registry-reading operations are not
    necessarily malicious, as all Windows applications must read different hives in
    the registry for normal operation, but sometimes they can hint at what the malware
    is trying to accomplish. In the case of targeted and evasive malware, as you’ll
    see throughout this book, it may be enumerating the registry and filesystem and
    searching for a specific value or pattern, such as a specific hostname or filepath.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示的*rundll32.exe*进程正在执行<samp class="SANS_TheSansMonoCd_W5Regular_11">RegQueryValue</samp>操作，这表明它正在读取主机上的多个注册表值。它特别感兴趣的注册表项似乎都与域、主机名和网络适配器信息相关。读取注册表操作不一定是恶意的，因为所有Windows应用程序都必须读取注册表中的不同分支才能正常运行，但有时它们可能会暗示恶意软件的目的。在本书中你将看到，对于有针对性和规避性的恶意软件，它可能在枚举注册表和文件系统，寻找特定的值或模式，例如特定的主机名或文件路径。
- en: Procmon is always a good first step in interactive behavior analysis. Suspicious
    activities revealed in Procmon can help further guide your investigation. For
    example, if the malware is writing to a strange file or reading a suspect registry
    key, part of interactive analysis is investigating those paths on the fly!
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Procmon始终是交互式行为分析的一个不错的起点。在Procmon中揭示的可疑活动可以帮助进一步指导你的调查。例如，如果恶意软件正在写入一个奇怪的文件或读取一个可疑的注册表项，交互式分析的一部分就是实时调查这些路径！
- en: Another tool for interactive analysis is Process Hacker, which, along with similar
    tools such as Process Explorer, can be used to inspect the process tree, investigate
    the malware process’s memory, and more. Memory inspection is a particularly useful
    task; you can do it by right-clicking the target process, selecting **Properties**,
    and then selecting the **Memory** tab. You can even query memory for specific
    string patterns. Searching for <samp class="SANS_TheSansMonoCd_W5Regular_11">http</samp>
    is always a good start, as you can see in [Figure 2-17](chapter2.xhtml#fig2-17).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个用于交互式分析的工具是Process Hacker，它与类似的工具（如Process Explorer）一起，可以用来检查进程树、调查恶意软件进程的内存等。内存检查是一个特别有用的任务；你可以通过右键点击目标进程，选择**属性**，然后选择**内存**选项卡来进行检查。你甚至可以查询内存中特定的字符串模式。搜索<samp
    class="SANS_TheSansMonoCd_W5Regular_11">http</samp>是一个不错的开始，正如你在[图2-17](chapter2.xhtml#fig2-17)中看到的那样。
- en: '![](../images/fig2-17.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-17.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-17: Querying process
    memory for a string pattern in Process Hacker</samp>'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-17：在Process Hacker中查询进程内存中的字符串模式</samp>
- en: The memory strings shown here contain some suspect data. We can see several
    URLs for domains such as *armerinin.com* and *siguages.ru*, which should be further
    investigated. The malware could be using these domains for command and control
    or downloading additional malware. Let’s test that theory.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 显示的内存字符串包含一些可疑数据。我们可以看到多个域名的URL，比如*armerinin.com*和*siguages.ru*，这些应该进一步调查。恶意软件可能正在使用这些域名进行命令与控制，或者下载更多恶意软件。让我们来验证这个理论。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Inspecting Malware
    Network Traffic</samp>
  id: totrans-183
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">检查恶意软件网络流量</samp>
- en: 'Many malware samples will at some point attempt to connect to a remote server
    on the internet. They may do this for a variety of reasons, including the following:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 许多恶意软件样本会在某些时候尝试连接到互联网的远程服务器。它们这样做可能有多种原因，包括以下几点：
- en: To download additional malicious files, payloads, and modules
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载附加的恶意文件、有效负载和模块
- en: To communicate with a command and control server, requesting further instructions
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与命令与控制服务器通信，请求进一步指令
- en: To send stolen information, such as credentials or files, to a remote server
    (often called *exfiltration*)
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将窃取的信息（如凭证或文件）发送到远程服务器（通常称为*外泄*）
- en: To determine whether the infected host is currently connected to the internet
    or to get the host’s public IP address (often used as a sandbox detection and
    evasion technique)
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定受感染主机是否当前已连接到互联网，或获取主机的公共IP地址（通常用于沙盒检测和规避技术）
- en: No matter the reason, it’s important to identify when and to whom the malware
    is connecting. A *web proxy* is a type of tool that can intercept and manipulate
    network traffic being sent to and from the host, and it serves as a great malware
    analysis tool. The web proxy Fiddler, shown in [Figure 2-18](chapter2.xhtml#fig2-18),
    has captured some suspicious malware internet connection attempts.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 无论出于什么原因，识别恶意软件连接的时间和目标非常重要。*Web代理*是一种可以拦截和操控主机与外界之间网络流量的工具，它是一个非常好的恶意软件分析工具。Web代理Fiddler，如[图
    2-18](chapter2.xhtml#fig2-18)所示，捕获了一些可疑的恶意软件互联网连接尝试。
- en: '![](../images/fig2-18.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-18.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-18: Malware internet
    connection attempts in the Fiddler web proxy</samp>'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-18：Fiddler Web代理中的恶意软件互联网连接尝试</samp>
- en: You can see that Fiddler has intercepted web requests to *api.ipify.org*, as
    well as three additional sites (*armerinin.com*, *houniant.ru*, and *siguages.ru*).
    If you query VirusTotal for the latter three domains, you’ll probably see that
    they’re rated as malicious. (They are at the time of this writing, anyway.) The
    malware is likely attempting to download additional malware from one of these
    domains. The *api.ipify.org* site simply returns a host’s external, public IP
    address. Why would the malware want to contact it? One possibility is that the
    malware is actually trying to obtain the host’s public IP address to identify
    its hosting country. Another possible reason is to determine whether the host
    is online at all. Both pieces of information can be used for anti-analysis and
    evasion, and I’ll discuss the associated techniques in greater depth throughout
    the book.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到Fiddler拦截了对*api.ipify.org*的网页请求，以及另外三个网站（*armerinin.com*、*houniant.ru*和*siguages.ru*）。如果你在VirusTotal上查询这三个域名，你很可能会看到它们被标记为恶意。（至少在写作时它们是这样标记的。）这个恶意软件很可能试图从这些域名之一下载更多的恶意软件。*api.ipify.org*网站只是返回主机的外部公共IP地址。为什么恶意软件要联系这个网站？一种可能性是恶意软件实际上是在尝试获取主机的公共IP地址，以确定其托管的国家。另一种可能的原因是确定主机是否在线。以上两种信息都可以用于反分析和规避，我将在本书中深入讨论相关技术。
- en: The popular network monitoring tool Wireshark can also be used to capture internet
    connection activity. Additionally, Wireshark can capture general network activity,
    such as traffic not destined for the internet, like host-to-host communication
    on a local network. [Figure 2-19](chapter2.xhtml#fig2-19) displays some of this
    malware sample’s network connectivity in Wireshark.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 流行的网络监控工具Wireshark也可以用来捕获互联网连接活动。此外，Wireshark还可以捕获一般的网络活动，例如不指向互联网的流量，比如局域网内的主机对主机通信。[图
    2-19](chapter2.xhtml#fig2-19)展示了这个恶意软件样本在Wireshark中的部分网络连接情况。
- en: '![](../images/fig2-19.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-19.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-19: Malware DNS requests
    captured in Wireshark</samp>'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图2-19：在Wireshark中捕获的恶意软件DNS请求</samp>
- en: You can easily spot the DNS requests to the same hostnames that Fiddler found.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以轻松地发现DNS请求，它们指向Fiddler发现的相同主机名。
- en: It’s helpful to inspect HTTP and other protocol traffic in more detail. To view
    the web traffic, right-click an HTTP request and select **Follow****TCP Stream**.
    You should see the HTTP POST request originating from this malware sample, as
    shown in [Figure 2-20](chapter2.xhtml#fig2-20).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 详细检查HTTP和其他协议的流量是很有帮助的。要查看网页流量，右键点击HTTP请求并选择**跟踪****TCP流**。你应该会看到来自这个恶意软件样本的HTTP
    POST请求，如[图2-20](chapter2.xhtml#fig2-20)所示。
- en: '![](../images/fig2-20.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig2-20.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-20: An HTTP POST request
    from the malware</samp>'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图2-20：来自恶意软件的HTTP POST请求</samp>
- en: This sample is sending data such as the victim’s hostname, the IP address, and
    a unique identifier to its infrastructure (*siguages.ru*). Interestingly, the
    malware is also sending its *botnet ID* (in this case, “2209 _ubm”), which is
    an identifier assigned to a network of compromised computers. While this malware
    sends its data unencrypted, malware may also use encrypted channels for communication
    between the victim and its command and control infrastructure. This makes inspecting
    traffic in a web proxy or tool such as Wireshark more challenging. As we continue
    through the book, we’ll take a closer look at some of these techniques and how
    to overcome them.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这个样本正在向其基础设施（*siguages.ru*）发送数据，如受害者的主机名、IP 地址和唯一标识符。值得注意的是，恶意软件还在发送它的*僵尸网络ID*（在这个例子中是“2209
    _ubm”），这是分配给受感染计算机网络的标识符。虽然这个恶意软件以未加密的形式发送数据，但恶意软件也可能通过加密通道与受害者和其指挥控制基础设施之间进行通信。这使得通过Web代理或像Wireshark这样的工具检查流量变得更加困难。随着我们继续阅读本书，我们将更详细地了解一些这些技术以及如何克服它们。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-201
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*Many malware families try to determine whether a host is connected to the
    internet before infecting it as a sandbox evasion technique. If you’re investigating
    the malware in an offline (non-internet-connected) VM, you’ll likely want to use
    a tool that “fakes” network services, such as FakeNet or INetSim. I discuss these
    tools briefly in [Appendix A](appendix-A.xhtml).*  ### <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '*许多恶意软件家族在感染主机之前会尝试确定主机是否连接到互联网，作为沙箱规避技术。如果你在离线（无互联网连接）的虚拟机中调查恶意软件，你可能需要使用一个“伪装”网络服务的工具，如FakeNet或INetSim。我在[附录A](appendix-A.xhtml)中简要讨论了这些工具。*  ###
    <samp class="SANS_Futura_Std_Bold_B_11">总结</samp>'
- en: This chapter covered the basics of triaging a malware sample to get a quick
    assessment and determine the next steps of your analysis. We discussed how automated
    malware sandboxes can be used as part of this process, as well as how to manually
    investigate malware behaviors in a controlled VM environment to understand them
    in greater detail. In the next chapter, we’ll look at how code analysis can supplement
    these triage and behavioral-analysis techniques.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了快速评估恶意软件样本并确定下一步分析步骤的基本方法。我们讨论了如何将自动化恶意软件沙箱用作此过程的一部分，以及如何在受控虚拟机环境中手动调查恶意软件行为，以便更详细地了解它们。在下一章中，我们将探讨代码分析如何补充这些初步分析和行为分析技术。
