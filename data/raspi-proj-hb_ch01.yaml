- en: '**1'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1'
- en: Blinking an LED**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使 LED 闪烁**
- en: In this first project, you’ll connect an LED to your Pi and make it blink with
    a python script. Learning how to blink an LED using the GPIO pins is an important
    step in your Pi education; once you know how to control an LED, you can control
    practically any output, whether it’s a motor, a lamp, or even a toaster.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第一个项目中，你将把一个LED连接到你的树莓派，并通过一个Python脚本使它闪烁。学习如何通过GPIO引脚控制LED闪烁是你树莓派教育的重要步骤；一旦你学会了如何控制LED，你就可以控制几乎任何输出设备，无论是马达、灯泡，还是甚至是烤面包机。
- en: '![image](../images/f0037-01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0037-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需部件**'
- en: Raspberry Pi
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派
- en: Breadboard
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板
- en: 5 mm LED
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 5 毫米 LED
- en: 330 Ω resistor
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 330 Ω 电阻
- en: Jumper wires
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线
- en: '**INTRODUCING THE GPIO PINS**'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍 GPIO 引脚**'
- en: The *General Purpose Input/Output (GPIO)* pins allow you to connect electronic
    hardware, like LEDs and sensors, to your Pi. They can be used to both read and
    send information, allowing your Pi to interact with the real world.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*通用输入/输出（GPIO）* 引脚允许你将电子硬件（如LED和传感器）连接到你的树莓派。它们可以用于读取和发送信息，使得你的树莓派能够与真实世界进行互动。'
- en: The Raspberry Pi 3 Model B board has a double row of 40 GPIO pins, shown in
    [Figure 1-1](ch01.xhtml#ch01fig1). This layout is the same for the Pi 2 Model
    B and Pi 1 Model B+, but slightly different from the Pi 1 Model A and B, which
    have only the first 26 pins. Check the [“Raspberry Pi GPIO Pin Guide”](app01.xhtml#app01)
    on [page 261](app01.xhtml#page_261) if you’re using a board other than the Raspberry
    Pi 3 Model B.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派 3 型 B 主板有一排 40 个GPIO引脚，见[图 1-1](ch01.xhtml#ch01fig1)。这个布局与树莓派 2 型 B 和树莓派
    1 型 B+相同，但与树莓派 1 型 A 和 B 略有不同，后者只有前 26 个引脚。如果你使用的是其他型号的树莓派，可以查阅[“树莓派 GPIO 引脚指南”](app01.xhtml#app01)（见[第261页](app01.xhtml#page_261)）。
- en: '![image](../images/f0038-01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0038-01.jpg)'
- en: '**FIGURE 1-1:** Raspberry Pi GPIO layout'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1-1：** 树莓派 GPIO 布局'
- en: 'There are two ways to refer to a GPIO pin: its name (which is known as GPIO
    numbering or Broadcom numbering) or by its corresponding pin number (which is
    known as physical numbering). For example, GPIO 25 corresponds to pin 22\. Throughout
    this book, we''ll refer to GPIO pins by their names. GPIO pins can be set to HIGH,
    which outputs 3.3 V and turns a component on, or LOW, which outputs 0 V and turns
    the component off.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方式可以引用一个GPIO引脚：通过其名称（称为GPIO编号或Broadcom编号）或通过其对应的引脚号（称为物理编号）。例如，GPIO 25 对应于引脚22。本书中，我们将通过GPIO引脚的名称来引用它们。GPIO引脚可以设置为HIGH，输出3.3V并打开组件，或设置为LOW，输出0V并关闭组件。
- en: '| **FUNCTION** | **NAME** | **NUMBER** | **NUMBER** | **NAME** | **FUNCTION**
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| **功能** | **名称** | **编号** | **编号** | **名称** | **功能** |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| DC power | 3.3 V | 1 | 2 | 5 V | DC power |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 直流电源 | 3.3 V | 1 | 2 | 5 V | 直流电源 |'
- en: '| SDA1, I²C | GPIO 2 | 3 | 4 | 5 V | DC power |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| SDA1, I²C | GPIO 2 | 3 | 4 | 5 V | 直流电源 |'
- en: '| SCL1, I²C | GPIO 3 | 5 | 6 | GND |  |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| SCL1, I²C | GPIO 3 | 5 | 6 | GND |  |'
- en: '| GPIO_GCLK | GPIO 4 | 7 | 8 | GPIO 14 | TXD0 |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| GPIO_GCLK | GPIO 4 | 7 | 8 | GPIO 14 | TXD0 |'
- en: '|  | GND | 9 | 10 | GPIO 15 | RXD0 |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '|  | GND | 9 | 10 | GPIO 15 | RXD0 |'
- en: '| GPIO_GEN0 | GPIO 17 | 11 | 12 | GPIO 18 | GPIO_GEN1 |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| GPIO_GEN0 | GPIO 17 | 11 | 12 | GPIO 18 | GPIO_GEN1 |'
- en: '| GPIO_GEN2 | GPIO 27 | 13 | 14 | GND |  |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| GPIO_GEN2 | GPIO 27 | 13 | 14 | GND |  |'
- en: '| GPIO_GEN3 | GPIO 22 | 15 | 16 | GPIO 23 | GPIO_GEN4 |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| GPIO_GEN3 | GPIO 22 | 15 | 16 | GPIO 23 | GPIO_GEN4 |'
- en: '| **FUNCTION** | **NAME** | **NUMBER** | **NUMBER** | **NAME** | **FUNCTION**
    |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| **功能** | **名称** | **编号** | **编号** | **名称** | **功能** |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| DC power | 3.3 V | 17 | 18 | GPIO 24 | GPIO_GEN5 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 直流电源 | 3.3 V | 17 | 18 | GPIO 24 | GPIO_GEN5 |'
- en: '| SPI_MOSI | GPIO 10 | 19 | 20 | GND |  |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| SPI_MOSI | GPIO 10 | 19 | 20 | GND |  |'
- en: '| SPI_MISO | GPIO 9 | 21 | 22 | GPIO 25 | GPIO_GEN6 |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| SPI_MISO | GPIO 9 | 21 | 22 | GPIO 25 | GPIO_GEN6 |'
- en: '| SPI_CLK | GPIO 11 | 23 | 24 | GPIO 8 | SPI_CE0_N |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| SPI_CLK | GPIO 11 | 23 | 24 | GPIO 8 | SPI_CE0_N |'
- en: '|  | GND | 25 | 26 | GPIO 7 | SPI_CE1_N |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '|  | GND | 25 | 26 | GPIO 7 | SPI_CE1_N |'
- en: '| I²C ID EEPROM | DNC | 27 | 28 | DNC | I²C ID EEPROM |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| I²C ID EEPROM | DNC | 27 | 28 | DNC | I²C ID EEPROM |'
- en: '|  | GPIO 5 | 29 | 30 | GND |  |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|  | GPIO 5 | 29 | 30 | GND |  |'
- en: '|  | GPIO 6 | 31 | 32 | GPIO 12 |  |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '|  | GPIO 6 | 31 | 32 | GPIO 12 |  |'
- en: '|  | GPIO 13 | 33 | 34 | GND |  |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '|  | GPIO 13 | 33 | 34 | GND |  |'
- en: '|  | GPIO 19 | 35 | 36 | GPIO 16 |  |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '|  | GPIO 19 | 35 | 36 | GPIO 16 |  |'
- en: '|  | GPIO 26 | 37 | 38 | GPIO 20 |  |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '|  | GPIO 26 | 37 | 38 | GPIO 20 |  |'
- en: '|  | GND | 39 | 40 | GPIO 21 |  |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '|  | GND | 39 | 40 | GPIO 21 |  |'
- en: '**WARNING**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*The GPIO pins are designed to work at 3.3 V, so if you connect them to higher
    voltages, you’ll permanently damage your Raspberry Pi.*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*GPIO引脚设计为3.3V工作，因此如果将它们连接到更高电压，会永久损坏你的树莓派。*'
- en: The pins highlighted in gray, pins 27 and 28, are DNC, or “do not connect,”
    pins. The Raspberry Pi also has eight GND (ground) pins—highlighted in black in
    the table—for connecting ground to your circuits. There are four power pins, two
    5 V pins and two 3.3 V—highlighted in red and orange, respectively—to supply power.
    Several pins have special features; for example, the pins highlighted in yellow
    are used in serial peripheral interface (SPI) communication, and the ones highlighted
    in green are used for inter-integrated circuit (I²C) communication. You’ll learn
    about these communication protocols in [Project 3](ch03.xhtml#ch03) and [Project
    7](ch07.xhtml#ch07), respectively.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 表格中灰色高亮的引脚27和28是DNC引脚，表示“不可连接”。树莓派还有八个GND（地）引脚——在表格中用黑色高亮显示——用于将地线连接到电路中。还有四个电源引脚，两个5V引脚和两个3.3V引脚——分别用红色和橙色高亮显示——用于提供电源。有些引脚具有特殊功能；例如，黄色高亮的引脚用于串行外设接口（SPI）通信，绿色高亮的引脚用于集成电路间通信（I²C）。你将在[项目3](ch03.xhtml#ch03)和[项目7](ch07.xhtml#ch07)中分别学习这些通信协议。
- en: '**INTRODUCING LEDs**'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍LED**'
- en: LEDs come in a wide variety of sizes, shapes, and colors, and some can even
    mix colors to produce almost any color. In this project you’ll use a simple 5
    mm red LED.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: LED有各种尺寸、形状和颜色，一些LED甚至可以混合颜色，产生几乎任何颜色。在本项目中，你将使用一个简单的5毫米红色LED。
- en: An *LED*, or *light-emitting diode*, is—as its name suggests—a diode that emits
    light. Diodes are electronic components that have *polarity*, meaning they allow
    current to flow in only one direction, from positive to negative. LEDs, like all
    diodes, have a positive connection known as an *anode*, and a negative connection
    known as a *cathode*. The two legs, or *leads*, on LEDs are different lengths
    to help you identify which is positive and which is negative, illustrated in [Figure
    1-2](ch01.xhtml#ch01fig2). The longer lead is the anode (+) and the shorter lead
    is the cathode (–).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*LED*，即*发光二极管*，顾名思义，是一种能够发光的二极管。二极管是一种具有*极性*的电子元件，意味着它们只允许电流朝一个方向流动，从正极流向负极。像所有二极管一样，LED有一个正连接，称为*阳极*，还有一个负连接，称为*阴极*。LED的两根引脚长度不同，帮助你区分正负极，见[图1-2](ch01.xhtml#ch01fig2)。较长的引脚是阳极（+），较短的引脚是阴极（–）。'
- en: '![image](../images/f0040-01.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0040-01.jpg)'
- en: '**FIGURE 1-2:** A 5 mm red LED'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1-2：** 一个5毫米红色LED'
- en: FINDING THE RIGHT RESISTOR
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择合适的电阻器
- en: 'LEDs can handle only so much current before they overload and burn out, which
    can potentially damage the LED and even the Pi board. To prevent this, you must
    always connect LEDs in series with a *resistor*: a small component that limits
    the amount of current passing through it.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: LED只能承受一定量的电流，超过该电流会导致LED过载并烧毁，这可能会损坏LED甚至损坏树莓派主板。为了防止这种情况发生，你必须始终将LED与*电阻器*串联连接：电阻器是一个小型元件，能够限制通过它的电流量。
- en: Resistors come in all sorts of values, and you need one that’s strong enough
    to protect your component without being so strong that it limits the component’s
    capabilities. For example, a stronger resistor can dull the light an LED gives
    off. The appropriate resistance value depends on the LED you’re using—most LEDs
    you’ll use in electronics can handle a maximum current rating of 20 mA. For the
    LED in this project, picking up a resistor of any value between 220 Ω and 470
    Ω is fine, and within this range, a lower resistance value will result in a slightly
    brighter LED.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 电阻器有各种不同的数值，你需要选择一个足够强大的电阻器来保护你的元件，但又不能强到限制元件的性能。例如，一个较强的电阻器可能会使LED发出的光变暗。适当的电阻值取决于你使用的LED——大多数电子设备中使用的LED的最大电流额定值为20
    mA。对于本项目中的LED，选择220 Ω到470 Ω之间的任何一个电阻值都可以，在这个范围内，较低的电阻值会使LED稍微亮一点。
- en: '**NOTE**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We recommend that you purchase a 1/4 W resistor assortment that spans a wide
    range of resistance values. These will meet most of your needs.*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们建议你购买一套1/4 W电阻器，涵盖广泛的电阻值范围。这将满足你大部分的需求。*'
- en: The resistance value is indicated by the color bands on the resistor. Resistors
    usually have four bands, as shown in [Figure 1-3](ch01.xhtml#ch01fig3). The first
    two represent the first two digits of the value. The third is a multiplier representing
    the number of zeros after the first two digits. The fourth is the *tolerance*
    of the resistance, which notes the percentage that the actual resistance might
    be above or below the given value. For example, a 330 Ω resistor with a 5 percent
    tolerance might be any value between 313.5 Ω and 346.5 Ω.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 电阻值由电阻器上的色环表示。电阻器通常有四个色环，如[图1-3](ch01.xhtml#ch01fig3)所示。前两个色环表示数值的前两位数字，第三个色环是一个乘数，表示前两位数字后面的零的数量，第四个色环表示电阻的*公差*，即实际电阻值可能偏高或偏低的百分比。例如，一个330
    Ω的电阻，公差为5%，实际电阻值可能在313.5 Ω和346.5 Ω之间。
- en: '![image](../images/f0040-02.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0040-02.jpg)'
- en: '**FIGURE 1-3:** A 330 Ω resistor'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1-3：** 一个330 Ω的电阻'
- en: If you need help identifying a resistor, check the resistor color card in [“Decoding
    Resistor Values”](app02.xhtml#app02) on [page 264](app02.xhtml#page_264).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要帮助识别电阻器，请查阅[《解码电阻值》](app02.xhtml#app02)中的电阻卡，在[第264页](app02.xhtml#page_264)可以找到。
- en: '**WIRING THE CIRCUIT**'
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**布线电路**'
- en: Now you’re ready to build your first circuit. All the projects in this book
    use a *solderless breadboard*, which gives you an inexpensive and easy way to
    build circuits without having to connect the components using solder. If you’ve
    never used a breadboard before, make sure to read [“How Does a Breadboard Work?”](ch01.xhtml#ch01box1)
    on [page 42](ch01.xhtml#page_42) before beginning.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经准备好构建你的第一个电路了。本书中的所有项目都使用*无焊接面包板*，这是一种便宜且简便的方式，可以在不使用焊接连接组件的情况下构建电路。如果你以前从未使用过面包板，开始之前请务必阅读[《面包板是如何工作的？》](ch01.xhtml#ch01box1)一节，位于[第42页](ch01.xhtml#page_42)。
- en: To wire an LED to the Raspberry Pi, follow these next steps. Use the wiring
    diagram in [Figure 1-4](ch01.xhtml#ch01fig4) as a reference, and review [Figure
    1-1](ch01.xhtml#ch01fig1) for pin locations if you need to.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要将LED连接到树莓派，请按照以下步骤操作。使用[图1-4](ch01.xhtml#ch01fig4)中的接线图作为参考，如果需要的话，也可以查看[图1-1](ch01.xhtml#ch01fig1)以获取引脚位置。
- en: Connect a blue breadboard rail to one of the Raspberry Pi GND pins (pins 6,
    9, 14, 20, 25, 30, 34, and 39 all provide GND).
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将蓝色面包板电源轨连接到树莓派的一个GND引脚（引脚6、9、14、20、25、30、34和39都提供GND）。
- en: Insert the LED into the breadboard.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将LED插入面包板。
- en: Insert the 330 Ω resistor into the breadboard so that one side is connected
    to the LED anode (the longer, positive lead).
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将330 Ω电阻插入面包板，使其一端连接到LED的阳极（较长的正极引脚）。
- en: Connect the other side of the resistor to GPIO 25 (pin 22) with a jumper wire.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将电阻的另一端连接到GPIO 25（引脚22）。
- en: Connect the LED cathode (the shorter, negative lead) to the GND power rail.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将LED的阴极（较短的负极引脚）连接到GND电源轨。
- en: '![image](../images/f0041-01.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0041-01.jpg)'
- en: '**LISTING 1-1:** Wiring an LED to the Raspberry Pi. The LED lead with a bend
    in it is the anode.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单1-1：** 将LED连接到树莓派。弯曲的LED引脚是阳极。'
- en: We’ve given you instructions on where to place the resistor, but really it doesn’t
    matter whether it’s connected to the anode or cathode as long as it is connected
    to one. You might wonder why we didn’t just connect the LED cathode directly to
    pin 6 (GND), since we only need the GND rail for that one connection. The reason
    is that it’s good practice to use the breadboard GND rails, which will become
    more useful in more advanced circuits.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经给你提供了电阻器放置的位置说明，但实际上它是否连接到阳极或阴极并不重要，只要它连接到其中一个即可。你可能会想，为什么我们不直接将LED的阴极连接到引脚6（GND）呢，因为只需要那个GND轨就能完成连接。原因是，使用面包板的GND轨是一种良好的做法，这在更复杂的电路中会变得更有用。
- en: '**HOW DOES A BREADBOARD WORK?**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**面包板是如何工作的？**'
- en: Wiring a circuit using a breadboard is as easy as plugging and unplugging components.
    A breadboard has rows of holes that connect with copper strips underneath, so
    you just need to insert the components into those holes and then use jumper wires
    to connect them. The breadboard holes are connected to each other in a specific
    way, shown here by the orange lines.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用面包板布线电路就像插拔组件一样简单。面包板上有一排排孔，这些孔通过底下的铜条连接在一起，因此你只需将组件插入这些孔中，然后使用跳线将它们连接起来。面包板的孔之间有特定的连接方式，如图中的橙色线所示。
- en: '![image](../images/f0042-01.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0042-01.jpg)'
- en: 'Each individual line is electrically isolated from the others. The horizontal
    lines are the *power rails*, used to connect the power supply: the blue rails
    are used to connect GND and the red rails to connect power. In the middle of the
    breadboard is a divide that splits the rows on either side. You should place your
    components in these rows. Components in the same row, on the same side of the
    center divide, will be connected by the copper strips beneath.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 每个独立的行之间是电气隔离的。水平线是*电源轨*，用于连接电源：蓝色轨道用于连接GND，红色轨道用于连接电源。在面包板的中间有一个分隔区，将两边的行分开。你应该把组件放置在这些行中。在同一行、同一侧的组件会通过下面的铜条连接。
- en: '**WRITING THE SCRIPT**'
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写脚本**'
- en: To keep all your projects organized, create a folder called *Projects* in your
    desktop environment to save all your projects’ scripts. Inside the newly created
    folder, create a new folder called *LEDs* where you’ll save the LED projects in
    this book.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持所有项目的组织性，在你的桌面环境中创建一个名为*Projects*的文件夹，用来保存所有项目的脚本。在新创建的文件夹内，创建一个名为*LEDs*的新文件夹，用来保存本书中的LED项目。
- en: 'In simple terms, the blinking LED project works as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，闪烁LED项目的工作原理如下：
- en: The LED turns on for 1 second—GPIO 25 set to HIGH.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LED亮起1秒钟——GPIO 25设置为HIGH。
- en: The LED turns off for 1 second—GPIO 25 set to LOW.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LED熄灭1秒钟——GPIO 25设置为LOW。
- en: The LED is on again for 1 second—GPIO 25 set to HIGH.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LED再次亮起1秒钟——GPIO 25设置为HIGH。
- en: The LED is off again for 1 second—GPIO 25 set to LOW.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LED再次熄灭1秒钟——GPIO 25设置为LOW。
- en: This pattern continues until you tell the program to stop.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模式会一直持续，直到你告诉程序停止。
- en: Throughout this book, we’ll control the Raspberry Pi GPIOs using a Python library
    called gpiozero. The gpiozero library provides a collection of interfaces for
    everyday components like LEDs, buttons, potentiometers, sensors, and much more.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用名为gpiozero的Python库来控制树莓派的GPIO。gpiozero库提供了一组接口，用于控制日常组件，如LED、按钮、电位器、传感器等。
- en: '**Entering the Script**'
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**进入脚本**'
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Copy the following code to the Python Editor and save the script as *blinking_led.py*
    inside the *LEDs* folder (remember that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**Python 3 (IDLE)**，并进入**文件** ▸ **新建文件**来创建一个新的脚本。将以下代码复制到Python编辑器，并将脚本保存为*blinking_led.py*，保存在*LEDs*文件夹内（记住你可以在*
    [https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*下载所有脚本）：
- en: '[PRE0]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There’s quite a lot going on here, so we’ll go through each major code section
    one at a time.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多内容，我们将逐一讲解每个主要的代码部分。
- en: '**Importing Libraries**'
  id: totrans-85
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**导入库**'
- en: At ➊ you import `LED` from the gpiozero library to control the GPIO that the
    LED is connected to. Then you import the `sleep()` function from the `time` module
    ➋.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你从gpiozero库导入`LED`，以控制LED连接的GPIO。然后你从`time`模块导入`sleep()`函数➋。
- en: '**Declaring the Pin**'
  id: totrans-87
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**声明引脚**'
- en: At ➌ you create an `LED` object called `led` that refers to GPIO 25, which is
    the GPIO the LED is connected to. When you create and use this `LED` object, Python
    knows GPIO 25 is an output and thus should be set to HIGH or LOW. After this declaration,
    you can use `led` to refer to your GPIO 25.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在➌处，你创建一个名为`led`的`LED`对象，指向GPIO 25，这是LED连接的GPIO。创建并使用这个`LED`对象时，Python知道GPIO
    25是一个输出，因此应该设置为HIGH或LOW。声明之后，你可以使用`led`来引用你的GPIO 25。
- en: '**Starting the while Loop**'
  id: totrans-89
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**启动while循环**'
- en: At ➎ you start a `while` loop with the condition `True`, which means this loop
    will run forever until you stop the program yourself. The lines of code that follow
    the loop declaration are indented, telling Python that this is the content of
    the loop to be run as long as the `while` condition is met.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在➎处，你开始一个`while`循环，条件是`True`，这意味着这个循环将永远运行，直到你自己停止程序。紧随循环声明之后的代码行会缩进，告诉Python这些是循环的内容，只要`while`条件满足就会执行。
- en: '**Setting the Digital Output**'
  id: totrans-91
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**设置数字输出**'
- en: Next you need to set the digital output for the LED. You use the `led.on()`
    function ➏ to set GPIO 25 to HIGH, turning the LED on, and the `led.off()` function
    ➑ to set GPIO 25 to LOW, turning the LED off. There is a pause of 1 second between
    each LED state using the `sleep()` function ➐, which creates the blinking effect.
    The code stops where it is and waits for the amount of time specified in the `delay`
    variable (given in seconds) ➍ before proceeding to the next line of code. This
    allows you to keep the LED on or off for a given period of time.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要为LED设置数字输出。你可以使用`led.on()`函数 ➏ 将GPIO 25设置为高电平，打开LED，使用`led.off()`函数 ➑
    将GPIO 25设置为低电平，关闭LED。每次LED状态变化时，使用`sleep()`函数 ➐ 暂停1秒，形成闪烁效果。代码在此停下，等待`delay`变量中指定的时间（以秒为单位）
    ➍ 后继续执行下一行代码。这样，你就可以让LED在给定的时间内保持开或关状态。
- en: '**Running the Script**'
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**运行脚本**'
- en: To run the script, first save it and then press **F5** or go to **Run** ▸ **Run
    Module**. Your circuit should look something like Figure 1-5, with your LED turning
    on and off every second. To stop the running program, press CTRL-C.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行脚本，首先保存它，然后按**F5**或点击**运行** ▸ **运行模块**。你的电路应该类似于图1-5，LED每秒钟闪烁一次。要停止正在运行的程序，按CTRL-C。
- en: '![image](../images/f0044-01.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0044-01.jpg)'
- en: '**FIGURE 1-4:** The completed project'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1-4：** 完成的项目'
- en: Congratulations—you’ve just built your first working project!
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你——你刚刚完成了第一个可工作的项目！
- en: '**TAKING IT FURTHER**'
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步拓展**'
- en: 'The best way to learn electronics and programming is by experimenting. Here
    are two simple ideas for modifications you could try:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 学习电子学和编程的最佳方式是通过实验。这里有两个你可以尝试的简单修改建议：
- en: Change the delay time in the script.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改脚本中的延迟时间。
- en: Modify the circuit and script to control more than one LED.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改电路和脚本以控制多个LED。
- en: See if you can use what you learned in this project to figure out each task.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 看看你能否利用在这个项目中学到的知识完成每个任务。
