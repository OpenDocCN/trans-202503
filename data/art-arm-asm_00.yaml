- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: INTRODUCTION
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: Welcome to *The Art of ARM Assembly*. This book will teach you how to program
    64-bit ARM CPUs, such as those found in modern Apple macOS machines, ARM-based
    Linux systems (including the Raspberry Pi with a 64-bit version of Raspberry Pi
    OS, previously known as Raspbian, which I’ll just call Pi OS), and even mobile
    devices such as iPhones, iPads, and some Android devices. With the arrival of
    the ARM-based Apple macOS systems, the need to learn and understand 64-bit ARM
    assembly language increased dramatically, leading me to write this book. However,
    I’ve made the source code and other information in this book as portable as possible
    so that it applies to all 64-bit ARM machines.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎阅读 *The Art of ARM Assembly*。本书将教你如何编写 64 位 ARM CPU 程序，如现代 Apple macOS 机器中使用的
    ARM CPU，基于 ARM 的 Linux 系统（包括带有 64 位 Raspberry Pi OS 版本的 Raspberry Pi，以前称为 Raspbian，我简称为
    Pi OS），甚至是 iPhone、iPad 以及部分 Android 设备等移动设备。随着 ARM 架构的 Apple macOS 系统的到来，学习和理解
    64 位 ARM 汇编语言的需求急剧增加，这也促使我写了这本书。然而，我已尽可能使本书中的源代码和其他信息具有便携性，以便它适用于所有 64 位 ARM 机器。
- en: This book is a sister volume to *The Art of 64-Bit Assembly*, which was, itself,
    a rewrite of *The Art of Assembly Language Programming* (*AoA*). *AoA* was a project
    I began way back in 1989 as a tool for teaching 80x86 (x86) assembly-language
    programming to students at California State Polytechnic University, Pomona, and
    the University of California, Riverside. For over 25 years, *AoA* served as a
    guide for learning x86 assembly language programming. During that time, other
    processors came and went, but x86 remained king of the hill in personal computers
    and high-end workstations, and x86 assembly language remained the de facto assembly
    language to learn. However, ARM-based PCs became mainstream with the introduction
    of the Apple M1-based systems (and later Apple machines), so the need to learn
    ARM assembly language programming is increasing.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书是 *The Art of 64-Bit Assembly* 的姊妹篇，而 *The Art of 64-Bit Assembly* 本身是 *The
    Art of Assembly Language Programming*（*AoA*）的重写版本。*AoA* 是我在 1989 年开始的一个项目，旨在为加利福尼亚州立理工大学（Pomona）和加利福尼亚大学河滨分校的学生教授
    80x86（x86）汇编语言编程。25 多年来，*AoA* 一直是学习 x86 汇编语言编程的指南。在这段时间里，其他处理器有来有去，但 x86 依然是个人计算机和高端工作站的主流，而
    x86 汇编语言也始终是学习的事实标准。然而，随着基于 ARM 的 Apple M1 系统（以及后来的 Apple 机器）的出现，ARM 架构的个人计算机逐渐成为主流，因此学习
    ARM 汇编语言编程的需求大幅增加。
- en: This book was written using *The Art of 64-Bit Assembly* as a model for the
    material to cover. Anyone who has read my earlier books will find this book to
    be very familiar at a high level. Of course, the ARM instructions and assemblers—either
    the GNU assembler (Gas) or Apple’s Clang assembler (largely compatible with Gas)—are
    quite different from the x86 instructions and the Microsoft Macro Assembler (MASM).
    The low-level presentation and programming techniques are therefore also somewhat
    different.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的编写以 *The Art of 64-Bit Assembly* 为模型，涵盖了类似的内容。任何读过我早期书籍的人都会觉得这本书在高层次上非常熟悉。当然，ARM
    指令和汇编器——无论是 GNU 汇编器（Gas）还是 Apple 的 Clang 汇编器（与 Gas 大部分兼容）——与 x86 指令和微软宏汇编器（MASM）有很大不同。因此，底层的呈现和编程技巧也有所不同。
- en: 0.1 A Brief History of the ARM CPU
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.1 ARM CPU 的简史
- en: The ARM CPU has a long and storied history. It was first developed by Acorn
    Computers Ltd. in late 1983 as a replacement for the venerable 8-bit 6502 CPU
    used in its BBC Micro system. *ARM* originally stood for *Acorn RISC Machine*,
    though this was later changed to *Advanced RISC Machine* (*RISC* stands for *reduced
    instruction set computer*). That original design was largely a mind meld between
    the design described in the early University of California, Berkeley, RISC design
    and the 6502 CPU. For this reason, many would argue that the ARM initially wasn’t
    a pure RISC design. We might think of the ARM as the spiritual successor to the
    6502, inheriting many of the 6502’s features.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: ARM CPU 拥有悠久而丰富的历史。它最初由 Acorn Computers Ltd. 于 1983 年底开发，作为其 BBC Micro 系统中使用的老旧
    8 位 6502 CPU 的替代品。*ARM* 最初代表的是 *Acorn RISC Machine*，但后来改为 *Advanced RISC Machine*（*RISC*
    代表 *精简指令集计算机*）。最初的设计在很大程度上是加州大学伯克利分校早期 RISC 设计与 6502 CPU 设计的结合。因此，许多人认为 ARM 起初并不是一个纯粹的
    RISC 设计。我们可以将 ARM 看作是 6502 的精神继承者，继承了许多 6502 的特点。
- en: In many respects, the ARM CPU is modeled on the 6502 CPU’s notion of a reduced
    instruction set computer. In the original RISC design, each instruction was designed
    to do as little work as possible so it would require less hardware support and
    could run faster. Pure RISC architectures, for example, generally don’t use condition
    code bits (as setting condition codes after the execution of an instruction would
    require the CPU do extra work), and use fixed-size machine instruction encodings
    (typically 32 bits). The 6502, on the other hand, attempted to reduce the total
    *number* of machine instructions as much as possible.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多方面，ARM CPU 的设计借鉴了 6502 CPU 对简化指令集计算机的理解。在最初的 RISC 设计中，每条指令的设计都力求做最少的工作，以便减少对硬件的支持需求并提高运行速度。纯
    RISC 架构通常不使用条件码位（因为在执行指令后设置条件码需要 CPU 做额外的工作），并且使用固定大小的机器指令编码（通常为 32 位）。而 6502
    则试图尽可能减少机器指令的*数量*。
- en: Additionally, the original ARM supported both 16-bit and 32-bit instruction
    encodings. While pure RISC CPUs try to maximize the number of general-purpose
    registers (generally 32), the original ARM design supported only 16\. Furthermore,
    the ARM used one of the general-purpose registers as the program counter, which
    allows for all kinds of programming tricks but creates problems for pure RISC
    designs (such as handling exceptions). Finally, the ARM partially supported a
    hardware stack, something you don’t see on pure RISC machines. Nevertheless, “pure”
    or not, the ARM design outlasted all the other RISC CPUs of that era.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，原始的 ARM 支持 16 位和 32 位指令编码。虽然纯 RISC CPU 尝试最大化通用寄存器的数量（通常是 32 个），但原始的 ARM 设计仅支持
    16 个寄存器。此外，ARM 使用一个通用寄存器作为程序计数器，这使得可以进行各种编程技巧，但也给纯 RISC 设计带来了问题（如处理异常）。最后，ARM
    部分支持硬件堆栈，这是纯 RISC 机器上看不到的功能。尽管如此，不管是“纯粹”还是“非纯粹”，ARM 设计比那个时代的所有其他 RISC CPU 更加长久。
- en: Over the years, the ARM CPU variants have largely been used in mobile and embedded
    applications, with the vast majority of ARM CPUs winding up in mobile phones and
    tablets. However, one notable use is in the Raspberry Pi computer system (with
    over 61 million units sold as of this writing). In addition to the Pi, millions
    of ARM-based Arduino-compatible and other single-board computers (such as the
    Teensy series) have been sold. At the time of writing, the Raspberry Pi Foundation
    released the Raspberry Pi Pico, an ARM-based microcontroller board for $4 (US),
    selling more than 4 million of these devices by January 2024.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，ARM CPU 变种主要应用于移动和嵌入式领域，绝大多数 ARM CPU 最终应用于手机和平板电脑。然而，有一个显著的应用是在树莓派计算机系统中（截至撰写时，已经销售超过
    6100 万台）。除了树莓派，数百万台基于 ARM 的兼容 Arduino 的单板计算机（如 Teensy 系列）也已售出。截至撰写时，树莓派基金会发布了树莓派
    Pico，一款基于 ARM 的微控制器板，售价 4 美元（美国），到 2024 年 1 月已售出超过 400 万台此类设备。
- en: 0.2 Why Learn ARM Assembly?
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.2 为什么要学习 ARM 汇编？
- en: RISC CPUs were designed to be programmed using high-level languages (especially
    C/C++). Very few programs of note have been written in RISC assembly language
    (though the original ARM Basic is a good counterexample). The main reason assembly
    language is taught in colleges and universities is to teach *machine organization*
    (an introduction to the machine’s architecture). In addition, some applications
    (or, at the very least, portions of some applications) can benefit from an assembly
    language implementation. Speed and space are the two main reasons for using assembly
    language, though it is also true that certain algorithms are more easily written
    in assembly language (particularly bit-handling operations).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: RISC CPU 的设计初衷是使用高级语言（特别是 C/C++）进行编程。很少有著名的程序是用 RISC 汇编语言编写的（尽管原始的 ARM Basic
    是一个很好的反例）。在大学和学院中教授汇编语言的主要原因是为了教授*机器组织*（即对机器架构的介绍）。此外，一些应用程序（或者至少是某些应用程序的部分）可以从汇编语言实现中获益。速度和空间是使用汇编语言的两个主要原因，尽管某些算法确实更容易用汇编语言编写（特别是位处理操作）。
- en: Finally, learning assembly language can help you write much better high-level
    language code. After all, a compiler for a language like C/C++ translates that
    high-level source code into assembly language. Understanding the underlying machine
    language will help you write better high-level language (HLL) code because you
    can avoid inefficient HLL constructs. This understanding can also be helpful when
    debugging or optimizing HLL code. Sometimes you must look at the code that the
    compiler generated to understand a bug or inefficiency.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，学习汇编语言有助于你编写更高质量的高级语言代码。毕竟，像C/C++这样的语言的编译器将高级源代码翻译成汇编语言。理解底层的机器语言将帮助你编写更好的高级语言（HLL）代码，因为你可以避免低效的HLL结构。这种理解在调试或优化HLL代码时也非常有用。有时，你必须查看编译器生成的代码，才能理解某个bug或效率低下的问题。
- en: So why a book on ARM assembly language in particular? Until the Apple Silicon
    M1 CPU came along, the only common personal computer using an ARM CPU was the
    Raspberry Pi. While the Pi was popular, it generally wasn’t being used in schools
    to teach machine organization and assembly language programming. A few hobbyists
    were probably interested in picking up ARM assembly language on their own, but
    most Pi programmers were using Scratch or Python, with the hard-core types programming
    in C/C++. While mobile devices such as iPhones, iPads, and Android phones and
    tablets are also popular, developers rarely consider switching from Objective-C,
    Swift, or Java into assembly language for applications on those devices.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么特别要写一本关于ARM汇编语言的书呢？直到苹果硅M1 CPU问世之前，唯一使用ARM CPU的常见个人电脑就是树莓派。虽然树莓派很受欢迎，但它通常并未在学校中用于教授计算机组织和汇编语言编程。一些业余爱好者可能会自学ARM汇编语言，但大多数树莓派程序员使用的是Scratch或Python，而硬核玩家则使用C/C++编程。尽管iPhone、iPad和安卓手机、平板等移动设备也很受欢迎，但开发者很少会考虑从Objective-C、Swift或Java切换到汇编语言来为这些设备的应用程序编程。
- en: However, once Apple released M1-based Mac minis, MacBooks, and iMacs, the situation
    changed. Interest in low-level programming on ARMs spiked, because now ARM assembly
    could be taught in colleges and universities on “normal” machines. Apple has sold
    more A-series (iPad and iPhone) and M-series (iPad and Mac) systems than Raspberry
    Pi since they were introduced. It is conceivable that Apple will have sold around
    a billion ARM-based personal computers and mobile devices by the time you’re reading
    this.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一旦苹果发布了基于M1的Mac mini、MacBook和iMac，情况发生了变化。由于现在ARM汇编语言可以在“普通”机器上教授，ARM低级编程的兴趣激增。自从A系列（iPad和iPhone）和M系列（iPad和Mac）系统推出以来，苹果销售的数量超过了树莓派。可以预见的是，到你阅读这本书时，苹果可能已经售出了约十亿台基于ARM的个人电脑和移动设备。
- en: Given these developments, a lot more people are going to be interested in assembly
    language programming on ARM CPUs. If you want to be able to write high-performance,
    efficient, and small code on this new crop of devices, learning ARM assembly language
    is the place to start.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这些发展，越来越多的人将对在ARM CPU上进行汇编语言编程感兴趣。如果你希望能够在这批新设备上编写高性能、高效且体积小的代码，那么学习ARM汇编语言是开始的好地方。
- en: 0.3 Why Learn 64-Bit ARM?
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3 为什么要学习64位ARM？
- en: Although the original ARM was a 32-bit CPU, Arm Holdings—the outfit that licenses
    the ARM design—introduced a 64-bit version in 2011\. Apple introduced its 32-bit
    iPhone 5 a few years after that. Since then, most mobile and personal computer
    devices (including the Raspberry Pi 3, 4, and 400) have used 64-bit CPUs, while
    embedded devices have largely stuck with the 32-bit CPU variants. Code written
    for 32-bit CPUs is generally more memory efficient than that for 64-bit CPUs;
    unless an application requires more than 4GB, using a 32-bit instruction set is
    usually better.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管最初的ARM是32位CPU，但授权ARM设计的公司Arm Holdings在2011年推出了64位版本。苹果在几年后推出了其32位的iPhone 5。从那时起，大多数移动设备和个人计算机（包括树莓派3、4和400）都使用了64位CPU，而嵌入式设备则大多坚持使用32位CPU版本。为32位CPU编写的代码通常比为64位CPU编写的代码更节省内存；除非应用程序需要超过4GB的内存，否则使用32位指令集通常更好。
- en: 'Nevertheless, for high-performance computing, 64 bits is definitely the future.
    Why is this the case? Can’t 64-bit ARM CPUs run the older 32-bit code? The answer
    is a qualified yes. For example, the Raspberry Pi provides a 32-bit OS that runs
    only 32-bit code, even when running on a 64-bit CPU such as on the Pi 3, 4, or
    400\. However, the 64-bit ARM CPUs (ARMv8 or AARCH64, informally abbreviated to
    ARM64) operate in one of two modes: 32-bit or 64-bit. When in 32-bit mode, they
    execute the 32-bit instruction set; when in 64-bit mode, they execute the 64-bit
    instruction set. Though these instruction sets have some similarities, they are
    not the same. Thus, when operating in one of these modes, you cannot execute the
    instructions from the other mode.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，对于高性能计算，64位无疑是未来。为什么会这样呢？难道64位ARM处理器不能运行旧的32位代码吗？答案是有条件的“是”。例如，Raspberry
    Pi提供了一个32位操作系统，即使在64位CPU（如Pi 3、4或400）上运行，它也只运行32位代码。然而，64位ARM处理器（ARMv8或AARCH64，简称ARM64）有两种工作模式：32位模式和64位模式。当处于32位模式时，它们执行32位指令集；而在64位模式下，它们执行64位指令集。尽管这两种指令集有一些相似之处，但它们并不相同。因此，当操作处于某个模式时，不能执行来自另一个模式的指令。
- en: Given the incompatibility of the two instruction sets, this book focuses on
    64-bit ARM assembly language. Since you can’t program the Apple M1 (and later)
    in 32-bit ARM assembly language, teaching 32-bit alone would be a nonstarter.
    Why not teach both? While knowing 32-bit assembly language would help readers
    who want to write code for the 32-bit Pi OS and other embedded single-board microcontrollers,
    this book aims to teach fundamentals. Teaching two different instruction sets
    complicates the educational experience; better to do one thing well (64-bit assembly)
    rather than two things poorly. Teaching both 32-bit and 64-bit assembly is almost
    like trying to teach x86-64 and ARM in the same book; it’s just too much to take
    in all at once. Moreover, the 32-bit operating modes will likely fade away entirely
    over time. As I write this, ARM has already introduced a variant that supports
    only 64-bit code; I expect all future desktop-class processors will head in this
    direction.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这两种指令集不兼容，本书重点讲解64位ARM汇编语言。因为你无法在Apple M1（及之后的版本）上使用32位ARM汇编语言进行编程，单独教授32位汇编语言是不可行的。为什么不同时教授两者呢？虽然学习32位汇编语言对想要为32位Pi操作系统及其他嵌入式单板微控制器编写代码的读者有帮助，但本书的目标是教授基础知识。教授两种不同的指令集会让教育体验变得复杂；与其两者都做得不好，不如专注于做好一件事（64位汇编）。同时教授32位和64位汇编语言几乎就像是试图在同一本书中教授x86-64和ARM；一次性学习太多内容是不现实的。此外，32位操作模式可能会随着时间的推移完全消失。当我写这篇文章时，ARM已经推出了只支持64位代码的变种；我预计未来所有桌面级处理器都会朝这个方向发展。
- en: '> NOTE'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '> 注意'
- en: '*Although concentrating on 64-bit ARM assembly language for desktop-class and
    mobile machines (such as iPhones) makes sense, some will want to learn 32-bit
    ARM assembly language to work with embedded devices. Arduino-based single-board
    computers (SBCs), Raspberry Pi Pico SBCs, and many other classes of ARM-based
    embedded systems use 32-bit ARM variants. Furthermore, if you’re operating a Raspberry
    Pi using a 32-bit version of Pi OS, you’ll need to use 32-bit ARM assembly language.
    For that reason,* The Art of ARM Assembly, Volume 2*, will cover 32-bit ARM assembly
    language on those systems.*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*虽然专注于桌面级和移动设备（如iPhone）上的64位ARM汇编语言是合理的，但一些人可能希望学习32位ARM汇编语言，以便与嵌入式设备一起使用。基于Arduino的单板计算机（SBC）、Raspberry
    Pi Pico SBC以及许多其他基于ARM的嵌入式系统使用32位ARM变种。此外，如果你在使用32位版本的Pi OS操作Raspberry Pi，那么你需要使用32位ARM汇编语言。因此，*《ARM汇编语言艺术（第二卷）》*将涵盖这些系统上的32位ARM汇编语言。*'
- en: 0.4 Expectations and Prerequisites
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.4 期望与前提条件
- en: This book assumes that you are already comfortable programming in an HLL such
    as C/C++ (preferred), Python, Swift, Java, Pascal, Ruby, BASIC, or another object-oriented
    or imperative (procedural) programming language. Although many programmers have
    successfully learned assembly language as their very first programming language,
    I recommend that you learn to *program* first, then learn assembly language programming.
    This book makes use of several HLL examples (typically in C/C++ or Pascal). The
    examples are generally simple, so you should be able to understand them if you
    know a different HLL.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本书假设你已经能够熟练使用高级语言（HLL）进行编程，例如C/C++（首选）、Python、Swift、Java、Pascal、Ruby、BASIC或其他面向对象或命令式（过程式）编程语言。尽管许多程序员成功地将汇编语言作为他们的第一种编程语言学习，但我建议你先学习如何*编程*，然后再学习汇编语言编程。本书使用了若干个高级语言（HLL）的例子（通常是C/C++或Pascal）。这些例子通常很简单，所以如果你了解其他HLL语言，应该能够理解它们。
- en: This book also assumes you’re comfortable with the edit/compile/test/debug cycle
    during program development. You should be familiar with source code editors and
    using standard software development tools, as I won’t explain how to edit source
    files.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本书还假设你已经熟悉在程序开发过程中进行编辑/编译/测试/调试的循环。你应该熟悉源代码编辑器和使用标准软件开发工具，因为我不会解释如何编辑源文件。
- en: 'A wide variety of 64-bit ARM systems are out there, and I aimed to make this
    book applicable to as many of them as possible. To that end, every example program
    in this book has been tested on each of the following systems:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 市面上有各种各样的 64 位 ARM 系统，我的目标是使本书适用于尽可能多的系统。为此，本书中的每个示例程序都已在以下系统上进行测试：
- en: Apple M1-based Mac systems such as the Mac mini M1 and Mac mini M2\. The book’s
    example code was tested on the mini M1 but should work on any of the ARM-based
    MacBooks or iMacs, as well as future M*x* systems.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 Apple M1 的 Mac 系统，如 Mac mini M1 和 Mac mini M2。书中的示例代码已经在 mini M1 上进行测试，但应适用于任何基于
    ARM 的 MacBook 或 iMac，以及未来的 M*x* 系统。
- en: Raspberry Pi 3, 4, 400, and 5 systems (and future 64-bit-capable Pi systems)
    running the 64-bit version of Pi OS.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raspberry Pi 3、4、400 和 5 系统（以及未来支持 64 位的 Pi 系统），运行 64 位版本的 Pi OS。
- en: PINE64 system including the Pinebook, Pinebook Pro, and ROCKPro 64.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PINE64 系统，包括 Pinebook、Pinebook Pro 和 ROCKPro 64。
- en: Almost any 64-bit ARM-based Linux system.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几乎任何 64 位 ARM 架构的 Linux 系统。
- en: NVIDIA Jetson Nano systems.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NVIDIA Jetson Nano 系统。
- en: In theory, it should be possible to apply the information in this book to ARM-based
    Windows machines (such as the Surface Laptop Copilot+). Unfortunately, Microsoft’s
    software development tools, particularly its assembler, are based on the original
    ARM assembly syntax defined by Arm (the company), not Gas. While Microsoft’s *armasm64*
    is a better tool in many respects (as it uses standard ARM assembly language syntax),
    everyone else uses Gas syntax. The machine instructions are more or less the same
    between the two sets of assemblers, but the other statements (known as *assembler
    directives* or *pseudo-opcodes*) are completely different. Therefore, example
    programs written in Gas will not assemble under *armasm64*, and vice versa. Since
    trying to present both syntax forms in example programs would be just as confusing
    as trying to teach 32- and 64-bit programming simultaneously, I stick to Gas syntax
    in my examples.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，应该可以将本书中的信息应用到基于 ARM 的 Windows 机器（如 Surface Laptop Copilot+）上。不幸的是，微软的软件开发工具，特别是其汇编器，是基于
    Arm（公司）定义的原始 ARM 汇编语法，而不是 Gas。虽然微软的 *armasm64* 在许多方面是更好的工具（因为它使用标准的 ARM 汇编语言语法），但其他人都使用
    Gas 语法。两种汇编器之间的机器指令大致相同，但其他语句（被称为 *汇编指令* 或 *伪操作码*）完全不同。因此，用 Gas 编写的示例程序在 *armasm64*
    下无法汇编，反之亦然。由于在示例程序中同时展示两种语法形式与同时教授 32 位和 64 位编程一样令人困惑，因此我在示例中坚持使用 Gas 语法。
- en: 0.5 Source Code
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.5 源代码
- en: 'This book contains considerable ARM assembly language (and some C/C++) source
    code that typically comes in one of three forms: code snippets, single assembly
    language procedures or functions (modules), or full-blown programs.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 本书包含了大量的 ARM 汇编语言（以及一些 C/C++）源代码，通常以三种形式之一呈现：代码片段、单个汇编语言过程或函数（模块）或完整程序。
- en: '*Code snippets* are fragments of a program; they are not stand-alone, and you
    cannot compile them by using an ARM assembler (or a C++ compiler, in the case
    of C/C++ source code). They exist to make a point or provide a small example of
    a particular programming technique. Here is a typical example:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*代码片段*是程序的片段；它们不是独立的，无法使用 ARM 汇编器（或在 C/C++ 源代码的情况下使用 C++ 编译器）进行编译。它们存在的目的是阐明某个观点或提供某种特定编程技巧的简短示例。以下是一个典型的示例：'
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The vertical ellipses denote arbitrary code that could appear in their place.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直省略号表示可以替代其位置的任意代码。
- en: '*Modules* are small blocks of code that can be compiled but won’t run on their
    own. Modules typically contain a function that will be called by another program.
    Here is a typical example:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*模块*是可以编译但无法独立运行的小块代码。模块通常包含一个将被另一个程序调用的函数。以下是一个典型的示例：'
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Full-blown programs are called *listings* in this book, and I refer to them
    by listing number or filename. A typical filename usually takes the form *Listing*C*-*N*.S*,
    where C is the chapter number and N is a listing number within that chapter. For
    example, the following *Listing1-1.S* is the first listing that appears in [Chapter
    1](chapter1.xhtml):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中完整的程序被称为 *listings*，我通过列表编号或文件名引用它们。典型的文件名通常采用 *Listing*C*-*N*.S* 的形式，其中
    C 是章节编号，N 是该章节中的列表编号。例如，以下 *Listing1-1.S* 是出现在 [第1章](chapter1.xhtml)中的第一个列表：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Although most listings take the form *Listing*C*-*N*.S*, some (especially those
    from external sources) simply consist of a descriptive filename, such as the *aoaa.inc*
    header file used by most of the sample programs in this book.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大多数列表的格式为 *Listing*C*-*N*.S*，但有些（尤其是来自外部来源的）仅由描述性文件名组成，例如本书大多数示例程序使用的 *aoaa.inc*
    头文件。
- en: All listings are available in electronic form at *[https://<wbr>artofarm<wbr>.randallhyde<wbr>.com](https://artofarm.randallhyde.com)*,
    either individually or as a ZIP file containing all the listings found in this
    book. That page also contains support information for this book, including errata
    and PowerPoint slides for instructors.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的列表都可以在电子版中找到，网址是 *[https://<wbr>artofarm<wbr>.randallhyde<wbr>.com](https://artofarm.randallhyde.com)*，可以单独下载，也可以作为一个包含本书所有列表的
    ZIP 文件下载。该页面还包含本书的支持信息，包括勘误表和供讲师使用的 PowerPoint 演示文稿。
- en: Most of the programs in this book run from a command line. These examples typically
    use the bash shell interpreter. Therefore, every build command and sample output
    will typically have the text prefix $ or % before any command you would type from
    the keyboard on the command line. Under macOS, the default shell (command line)
    program is zsh. It prints a percent sign (%) rather than $ as the prompt character.
    If you are completely unfamiliar with the Linux or macOS command line, please
    see [Appendix D](appendix-D.xhtml) for a quick introduction to the command line
    interpreter.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的大多数程序都是通过命令行运行的。这些示例通常使用 bash shell 解释器。因此，每个构建命令和示例输出通常会在您键入的命令前加上 $ 或
    % 前缀。在 macOS 下，默认的 shell（命令行）程序是 zsh，它使用百分号（%）而不是美元符号（$）作为提示符。如果您完全不熟悉 Linux 或
    macOS 的命令行，请参见 [附录 D](appendix-D.xhtml)，以便快速了解命令行解释器。
- en: Unless otherwise noted, all source code appearing in this book is covered under
    the Creative Commons 4.0 license. You may freely use that code in your own projects
    as per the Creative Commons license. See *[https://<wbr>creativecommons<wbr>.org<wbr>/licenses<wbr>/by<wbr>/4<wbr>.0<wbr>/](https://creativecommons.org/licenses/by/4.0/)*
    for more details.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，本书中出现的所有源代码均受 Creative Commons 4.0 许可协议保护。根据 Creative Commons 许可协议，您可以自由地在自己的项目中使用这些代码。更多详情请参见
    *[https://<wbr>creativecommons<wbr>.org<wbr>/licenses<wbr>/by<wbr>/4<wbr>.0<wbr>/](https://creativecommons.org/licenses/by/4.0/)*。
- en: 0.6 Typography and Pedantry
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.6 排版和迂腐
- en: Computer books have a habit of abusing the English language. This book is no
    exception. Whenever source code snippets appear in the middle of an English sentence,
    a conflict often arises between the grammar rules of the programming language
    and English. This section describes my choices for differentiating syntactical
    rules in English versus programming languages, in addition to a few other conventions.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机书籍有一个习惯，就是滥用英语语言，本书也不例外。每当源代码片段出现在英语句子中间时，编程语言的语法规则与英语语法规则之间往往会产生冲突。本节将描述我在区分英语与编程语言语法规则时所做的选择，以及一些其他约定。
- en: First, this book uses a monospaced font to denote any text that appears as part
    of a program source file. This includes variable and procedure functions, program
    output, and user input to a program. Therefore, when you see something like get,
    you know that the book is describing an identifier in a program, not commanding
    you to get something.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，本书使用等宽字体表示程序源文件中的任何文本。这包括变量、过程函数、程序输出以及用户输入。因此，当您看到类似 get 这样的内容时，您知道本书是在描述程序中的标识符，而不是命令您去获取某些东西。
- en: 'A few logic operations have names that also have common English meanings: AND,
    OR, and NOT. When using these terms as logic functions, this book uses all caps
    to help differentiate otherwise-confusing English statements. When using these
    terms as English, this book uses the standard typeset font. The fourth logic operator,
    exclusive or (XOR), doesn’t normally appear in English statements, but this book
    still capitalizes it.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一些逻辑操作有着与英语中常见的含义相同的名称：AND、OR 和 NOT。使用这些术语作为逻辑函数时，本书采用全大写字母来帮助区分可能会引起混淆的英语表述。使用这些术语作为英语单词时，本书使用标准的排版字体。第四个逻辑运算符，异或（XOR），通常不会出现在英语句子中，但本书仍然将其大写。
- en: In general, I always try to define any acronym or abbreviation the first time
    I use it. If I haven’t used the term in a while, I will often redefine it on that
    usage. The glossary in [Appendix B](appendix-B.xhtml) also includes most of the
    acronyms appearing in this book.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，我总是尽量在第一次使用缩写或简称时进行定义。如果我有一段时间没有使用某个术语，我会在重新使用时再进行一次定义。[附录B](appendix-B.xhtml)中的术语表也包括了书中大多数出现的缩写。
- en: 0.7 Organization
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.7 组织结构
- en: This book is organized into 4 parts comprising 16 chapters and [6](chapter6.xhtml)
    appendixes.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 本书分为4个部分，共16章和[6](chapter6.xhtml)个附录。
- en: '[Part I](part1.xhtml), Machine Organization, covers data types and machine
    architecture for the ARM processor:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第一部分](part1.xhtml)**，机器组织，介绍了 ARM 处理器的数据类型和机器架构：'
- en: '**[Chapter 1](chapter1.xhtml): Hello, World of Assembly Language**    Teaches
    you a small handful of instructions so you can experiment with the software development
    tools and write simple little programs.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第1章](chapter1.xhtml)：你好，汇编语言的世界**    教授你一些基本的指令，让你可以试验软件开发工具并编写简单的小程序。'
- en: '**[Chapter 2](chapter2.xhtml): Data Representation and Operations**    Discusses
    the internal representation of simple data types such as integers, characters,
    and Boolean values. It also discusses the various arithmetic and logical operations
    possible on these data types. This chapter also introduces some basic ARM assembly
    language operand formats.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第2章](chapter2.xhtml)：数据表示与运算**    讨论了整数、字符和布尔值等简单数据类型的内部表示。它还讨论了对这些数据类型可以进行的各种算术和逻辑运算。本章还介绍了一些基本的
    ARM 汇编语言操作数格式。'
- en: '**[Chapter 3](chapter3.xhtml): Memory Access and Organization**    Discusses
    how the ARM organizes main memory. It explains the layout of memory and how to
    declare and access memory variables. It also introduces the ARM’s methods for
    accessing memory and the stack (a place to store temporary values).'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第3章](chapter3.xhtml)：内存访问与组织**    讨论了 ARM 如何组织主内存。它解释了内存布局以及如何声明和访问内存变量。它还介绍了
    ARM 访问内存和栈（用于存储临时值）的方法。'
- en: '**[Chapter 4](chapter4.xhtml): Constants, Variables, and Data Types**    Describes
    how to declare named constants in assembly language, how to declare and use pointers,
    and the use of composite data structures such as strings, arrays, structs (records),
    and unions.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第4章](chapter4.xhtml)：常量、变量和数据类型**    描述了如何在汇编语言中声明命名常量，如何声明和使用指针，以及如何使用复合数据结构，如字符串、数组、结构体（记录）和联合。'
- en: '[Part II](part2.xhtml), Basic Assembly Language, provides the basic tools and
    instructions you need to write assembly language programs.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第二部分](part2.xhtml)**，基础汇编语言，提供了编写汇编语言程序所需的基本工具和指令。'
- en: '**[Chapter 5](chapter5.xhtml): Procedures**    Covers the instructions and
    syntax you need to write your own assembly language functions (procedures). This
    chapter describes how to pass arguments (parameters) to functions and return function
    results. It also describes how to declare (and use) local or automatic variables
    that you allocate on the stack.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第5章](chapter5.xhtml)：过程**    介绍了编写你自己的汇编语言函数（过程）所需的指令和语法。本章描述了如何将参数传递给函数并返回函数结果。它还描述了如何声明（并使用）你在栈上分配的局部或自动变量。'
- en: '**[Chapter 6](chapter6.xhtml): Arithmetic**    Explains the basic integer arithmetic
    and logical operations in ARM assembly language. It also describes how to convert
    arithmetic expressions from an HLL into ARM assembly language. Finally, this chapter
    covers floating-point arithmetic using the hardware-based floating-point instructions.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第6章](chapter6.xhtml)：算术**    解释了 ARM 汇编语言中的基本整数算术和逻辑运算。它还描述了如何将算术表达式从高级语言（HLL）转换为
    ARM 汇编语言。最后，本章介绍了使用硬件支持的浮点指令进行浮点算术运算。'
- en: '**[Chapter 7](chapter7.xhtml): Low-Level Control Structures**    Describes
    how to implement HLL-like control structures such as if, elseif, else, while,
    do...while (repeat...until), for, and switch in ARM assembly language. This chapter
    also touches on optimizing loops and other code in assembly language.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第7章](chapter7.xhtml)：低级控制结构**    描述了如何在ARM汇编语言中实现类似高级语言（HLL）的控制结构，如if、elseif、else、while、do...while（repeat...until）、for和switch。本章还涉及了汇编语言中优化循环和其他代码的方法。'
- en: '[Part III](part3.xhtml), Advanced Assembly Language, covers more advanced assembly
    language operations.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[第三部分](part3.xhtml)，高级汇编语言，涵盖了更高级的汇编语言操作。'
- en: '**[Chapter 8](chapter8.xhtml): Advanced Arithmetic**    Explores extended-precision
    arithmetic, mixed-mode arithmetic, and other advanced arithmetic operations.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第8章](chapter8.xhtml)：高级算术**    探讨了扩展精度算术、混合模式算术以及其他高级算术运算。'
- en: '**[Chapter 9](chapter9.xhtml): Numeric Conversion**    Provides a very useful
    set of library functions you can use to convert numeric values to string format
    and convert string values to numeric format.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第9章](chapter9.xhtml)：数值转换**    提供了一组非常有用的库函数，你可以使用它们将数值转换为字符串格式，或将字符串转换为数值格式。'
- en: '**[Chapter 10](chapter10.xhtml): Table Lookups**    Describes how to use memory-based
    lookup tables (arrays) to accelerate certain computations.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第10章](chapter10.xhtml)：表格查找**    描述如何使用基于内存的查找表（数组）来加速某些计算。'
- en: '**[Chapter 11](chapter11.xhtml): Neon and SIMD Programming**    Discusses the
    ARM Advanced SIMD instruction set that allows you to speed up certain applications
    by operating on multiple pieces of data at once.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第11章](chapter11.xhtml)：Neon和SIMD编程**    讨论了ARM高级SIMD指令集，通过同时操作多个数据项来加速某些应用程序。'
- en: '**[Chapter 12](chapter12.xhtml): Bit Manipulation**    Describes various operations
    and functions that allow you to manipulate data at the bit level in ARM assembly
    language.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第12章](chapter12.xhtml)：位操作**    描述了在ARM汇编语言中执行位级数据操作的各种操作和函数。'
- en: '**[Chapter 13](chapter13.xhtml): Macros and the Gas Compile-Time Language**    Covers
    the Gas macro facilities. Macros are powerful constructs enabling you to design
    your own assembly language statements that expand to a large number of individual
    ARM assembly language instructions.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第13章](chapter13.xhtml)：宏和Gas编译时语言**    介绍了Gas宏功能。宏是强大的构造，允许你设计自己的汇编语言语句，这些语句会扩展为大量单独的ARM汇编语言指令。'
- en: '**[Chapter 14](chapter14.xhtml): String Operations**    Explains the use and
    creation of various character string library functions in ARM assembly language.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第14章](chapter14.xhtml)：字符串操作**    解释了在ARM汇编语言中使用和创建各种字符字符串库函数。'
- en: '**[Chapter 15](chapter15.xhtml): Managing Complex Projects**    Describes how
    to create libraries of assembly language code, and build those libraries by using
    makefiles (along with a discussion of the make language).'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第15章](chapter15.xhtml)：管理复杂项目**    描述了如何创建汇编语言代码库，并通过使用makefile构建这些库（同时讨论make语言）。'
- en: '**[Chapter 16](chapter16.xhtml): Stand-Alone Assembly Language Programs**    Shows
    how to write assembly language applications that don’t use the C/C++ standard
    library for I/O and other operations. This chapter includes system call examples
    for both Linux (Pi OS) and macOS.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第16章](chapter16.xhtml)：独立汇编语言程序**    展示了如何编写不使用C/C++标准库进行I/O和其他操作的汇编语言应用程序。本章包括适用于Linux（Pi
    OS）和macOS的系统调用示例。'
- en: '[Part IV](part4.xhtml), Reference Materials, provides reference information,
    including a table listing the full ASCII character set, a glossary, instructions
    for installing and using Gas on your system, an introduction to the bash shell
    interpreter, useful C/C++ functions you can call from your assembly language programs,
    and answers to the questions at the end of each chapter.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[第四部分](part4.xhtml)，参考资料，提供了参考信息，包括列出完整ASCII字符集的表格、词汇表、安装和使用Gas的系统说明、bash shell解释器简介、你可以在汇编语言程序中调用的有用C/C++函数，以及每章末尾问题的答案。'
