- en: '**INTRODUCTION**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**引言**'
- en: '![Image](../images/pg23_Image_2.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/pg23_Image_2.jpg)'
- en: This book introduces the concepts of how computer hardware works from a programmer’s
    point of view. The hardware is controlled by a set of *machine instructions*.
    The way these instructions control the hardware is called the *instruction set
    architecture (ISA)*. A programmer’s job is to design a sequence of these instructions
    that causes the hardware to perform operations to solve a problem.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书从程序员的角度介绍了计算机硬件是如何工作的概念。硬件由一组*机器指令*控制。这些指令控制硬件的方式被称为*指令集架构（ISA）*。程序员的工作是设计这些指令的序列，使硬件执行操作来解决问题。
- en: Nearly all computer programs are written in a high-level language. Some of these
    languages are general-purpose, and others are geared toward specific applications.
    But they are all intended to provide a programmer with a set of programming constructs
    more suitable for solving problems in human terms than working directly with the
    ISA and the details of the hardware.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有计算机程序都是用高级语言编写的。部分语言是通用的，其他语言则针对特定应用。但它们的共同目的是为程序员提供一组编程结构，这些结构更适合用人类的方式来解决问题，而不是直接与ISA和硬件细节打交道。
- en: '**Who This Book Is For**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**本书适合谁阅读**'
- en: Have you ever wondered what’s going on “under the hood” when you write a program
    in a high-level language? You know that computers can be programmed to make decisions,
    but how do they do that? You probably know that data is stored in bits, but what
    does that mean when storing a decimal number? My goal in this book is to answer
    these and many other questions about how computers work. We’ll be looking at both
    the hardware components and the machine-level instructions used to control the
    hardware.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾想过，当你用高级语言编写程序时，“幕后”发生了什么？你知道计算机可以编程来做决策，但它们是如何做到的呢？你可能知道数据是以位存储的，但当存储一个十进制数字时，这意味着什么？我在本书中的目标是回答这些问题以及更多关于计算机如何工作的疑问。我们将同时探讨硬件组件和用于控制硬件的机器级指令。
- en: I’ll assume that you know the basics of how to program in a high-level language,
    but you don’t need to be an expert programmer. After discussing the hardware components,
    we’ll look at and write lots of programs in *assembly language*, the language
    that translates directly into machine instructions.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设你知道如何用高级语言进行编程的基础知识，但你不需要是专家程序员。在讨论硬件组件后，我们将学习并编写大量的*汇编语言*程序，这是一种直接转化为机器指令的语言。
- en: Writing in assembly language is a tedious, error-prone, time-consuming process,
    so it should be avoided whenever possible. The best language for most programming
    projects on a Raspberry Pi is Python, which is included with Raspberry Pi OS and
    has excellent support for electronics projects. Python is very good at isolating
    us from the tedium of writing in assembly language. However, our goal here is
    to study programming concepts, not to create applications, so we’ll mainly be
    using C as our high-level language.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 编写汇编语言是一个繁琐、容易出错、耗时的过程，因此应尽量避免。对于大多数树莓派上的编程项目，最佳语言是Python，它随树莓派操作系统一起提供，并且在电子项目上有很好的支持。Python非常适合让我们远离编写汇编语言的繁琐。然而，我们在这里的目标是研究编程概念，而不是创建应用程序，所以我们主要使用C作为高级语言。
- en: '**About This Book**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**关于本书**'
- en: 'The guidelines I followed in creating this book are:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我在编写本书时遵循的指南是：
- en: Learning is easier if it builds on concepts you already know.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果学习建立在你已经知道的概念上，那么学习就会更容易。
- en: Real-world hardware and software make a more interesting platform for learning
    theoretical concepts.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现实世界中的硬件和软件为学习理论概念提供了一个更有趣的平台。
- en: The tools used for learning should be inexpensive and readily available.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于学习的工具应该是廉价且易于获得的。
- en: '***The Programming in the Book***'
  id: totrans-13
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***本书中的编程***'
- en: This book is based on the AArch64 architecture, which is the 64-bit version
    of the ARM architecture. It supports both the 64-bit A64 and 32-bit A32 instruction
    sets.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本书基于AArch64架构，这是ARM架构的64位版本。它同时支持64位的A64和32位的A32指令集。
- en: All the programming in the book was done using the GNU programming environment
    running under the 64-bit Raspberry Pi OS. All the programs have been tested on
    both my Raspberry Pi 3 and my Raspberry Pi 5\. [Chapter 20](ch20.xhtml) includes
    a section on assembly language programming of the general-purpose input/output
    (GPIO) pins on the Raspberry Pi 5, which differs significantly from earlier Raspberry
    Pi models.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有编程都使用在 64 位 Raspberry Pi OS 下运行的 GNU 编程环境完成。所有程序都在我的 Raspberry Pi 3 和
    Raspberry Pi 5 上进行了测试。[第 20 章](ch20.xhtml)包括一节关于在 Raspberry Pi 5 上进行通用输入/输出（GPIO）引脚汇编语言编程的内容，这与早期的
    Raspberry Pi 模型有显著不同。
- en: Because Python is so good at isolating us from the computer’s ISA, we’re using
    C as our high-level language, with some C++ in [Chapter 18](ch18.xhtml). The GNU
    programming tools make it easy for us to see how C and C++ use the ISA. Don’t
    worry if you don’t know C/C++; all our C/C++ programming will be very simple,
    and I’ll explain what you need to know as we go.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Python 能很好地将我们与计算机的指令集架构（ISA）隔离，我们使用 C 作为我们的高级语言，部分 C++ 内容出现在[第 18 章](ch18.xhtml)。GNU
    编程工具使我们能够轻松地看到 C 和 C++ 如何使用 ISA。如果你不懂 C/C++，也不用担心；我们的 C/C++ 编程非常简单，我会在过程中向你解释所需的知识。
- en: 'An important issue arises when learning assembly language: using the keyboard
    and terminal screen in an application. Programming input from a keyboard and output
    to a screen is complex, well beyond the expertise of a beginner. The GNU programming
    environment includes the C standard library. In keeping with the “real-world”
    criterion of this book, we’ll use the functions in that library, which are easily
    called from assembly language, to use the keyboard and screen in our applications.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 学习汇编语言时有一个重要问题：在应用程序中使用键盘和终端屏幕。通过键盘输入和屏幕输出的编程非常复杂，远超初学者的水平。GNU 编程环境包括 C 标准库。为了符合本书的“现实世界”标准，我们将使用该库中的函数，这些函数可以从汇编语言中轻松调用，用于在我们的应用程序中操作键盘和屏幕。
- en: '***Why Read This Book?***'
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***为什么要阅读本书？***'
- en: Given that there are many excellent high-level languages that allow you to write
    programs without being concerned with how machine instructions control the hardware,
    you may wonder why you should learn the material in this book. All high-level
    languages are ultimately translated into machine instructions that control the
    hardware. Understanding what the hardware does and how the instructions control
    it helps you understand the capabilities and limitations of the computer. I believe
    this understanding can make you a better programmer, even when you are working
    with a high-level language.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于有许多优秀的高级语言可以让你编写程序，而无需关心机器指令如何控制硬件，你可能会想知道为什么要学习本书中的内容。所有高级语言最终都会被转换为控制硬件的机器指令。理解硬件的工作原理以及指令如何控制硬件，有助于你理解计算机的能力和局限性。我相信这种理解能够让你成为一个更好的程序员，即使你使用的是高级语言。
- en: There are many other reasons to learn assembly language, though. If your interests
    take you into *systems programming*—writing parts of an operating system, writing
    a compiler, or even designing another higher-level language—these endeavors typically
    require an understanding at the assembly language level. And if your primary interest
    is in the hardware, I think it’s important to understand how a program will use
    that hardware.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，学习汇编语言还有许多其他原因。如果你的兴趣在于*系统编程*——编写操作系统的部分功能、编写编译器，甚至设计另一种更高级的语言——这些工作通常需要在汇编语言层面上有所了解。如果你的主要兴趣在硬件方面，我认为理解程序如何使用硬件是很重要的。
- en: 'There are also many challenging opportunities in programming *embedded systems*,
    or systems in which the computer has a dedicated task. These systems form integral
    parts of our daily lives: think cell phones, home appliances, automobiles, HVAC
    systems, medical devices, and more. Embedded systems are an essential component
    of Internet of Things (IoT) technologies. Programming them often requires an understanding
    of how the computer interacts with various hardware devices at the assembly language
    level.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在*嵌入式系统*编程中也有许多具有挑战性的机会，嵌入式系统是指计算机有专门任务的系统。这些系统是我们日常生活中的重要组成部分：比如手机、家电、汽车、暖通空调系统、医疗设备等。嵌入式系统是物联网（IoT）技术的核心组件。编程这些系统通常需要理解计算机如何在汇编语言层面与各种硬件设备交互。
- en: Finally, if you already know assembly language for another processor, this book
    will serve as a primer for reading the ARM manuals.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你已经了解其他处理器的汇编语言，本书将作为你阅读 ARM 手册的入门书。
- en: '***Chapter Organization***'
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***章节组织***'
- en: The book is roughly organized into three parts, focusing on mathematics and
    logic, hardware, and software. The mathematics and logic part is intended to give
    you the necessary language to discuss the concepts. The hardware part is an introduction
    to the components used to construct a computer.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本书大致分为三部分，分别侧重于数学与逻辑、硬件和软件。数学与逻辑部分旨在为您提供讨论概念所需的语言。硬件部分是对构建计算机所用组件的介绍。
- en: These first two parts provide the background for discussing how software controls
    the hardware. We’ll look at each of the basic programming constructs in the C
    programming language, with some C++ toward the end of the book. Then we’ll look
    at how the compiler translates the C/C++ code into assembly language. I’ll also
    show you how a programmer might program the same constructs directly in assembly
    language.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 前两部分提供了讨论软件如何控制硬件的背景。我们将查看C编程语言中的每个基本编程结构，书的最后部分会涉及一些C++内容。然后，我们将研究编译器如何将C/C++代码翻译为汇编语言。我还将向您展示程序员如何直接在汇编语言中编写相同的结构。
- en: '**[Chapter 1: Setting the Stage](ch01.xhtml)**   Describes the three fundamental
    subsystems of a computer and how they’re connected. This chapter also discusses
    setting up the programming tools used in the book.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第1章：设置舞台](ch01.xhtml)**   介绍计算机的三个基本子系统及其连接方式。本章还讨论了设置本书中使用的编程工具。'
- en: '**[Chapter 2: Data Storage Formats](ch02.xhtml)**   Shows how unsigned integers
    are stored using the binary and hexadecimal number systems and how characters
    are stored in ASCII code. In this chapter, we’ll write our first C program and
    use the `gdb` debugger to explore these concepts.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第2章：数据存储格式](ch02.xhtml)**   展示了如何使用二进制和十六进制数字系统存储无符号整数，以及如何使用ASCII码存储字符。在本章中，我们将编写第一个C程序，并使用`gdb`调试器来探索这些概念。'
- en: '**[Chapter 3: Computer Arithmetic](ch03.xhtml)**   Describes the addition and
    subtraction of unsigned and signed integers and explains the limits of using a
    fixed number of bits to represent integers.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第3章：计算机算术](ch03.xhtml)**   介绍无符号和有符号整数的加法和减法，并解释使用固定数量的位表示整数的限制。'
- en: '**[Chapter 4: Boolean Algebra](ch04.xhtml)**   Describes Boolean algebra operators
    and functions and discusses function minimization using algebraic tools and Karnaugh
    maps.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第4章：布尔代数](ch04.xhtml)**   介绍了布尔代数运算符和函数，并讨论了使用代数工具和卡诺图进行函数最小化。'
- en: '**[Chapter 5: Logic Gates](ch05.xhtml)**   Begins with an introduction to electronics,
    then discusses logic gates and how they’re built using complementary metal-oxide
    semiconductor (CMOS) transistors.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第5章：逻辑门](ch05.xhtml)**   以电子学的介绍为开篇，随后讨论了逻辑门及其如何使用互补金属氧化物半导体（CMOS）晶体管构建。'
- en: '**[Chapter 6: Combinational Logic Circuits](ch06.xhtml)**   Discusses logic
    circuits that have no memory, including adders, decoders, multiplexers, and programmable
    logic devices.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第6章：组合逻辑电路](ch06.xhtml)**   讨论了没有记忆功能的逻辑电路，包括加法器、解码器、多路复用器和可编程逻辑设备。'
- en: '**[Chapter 7: Sequential Logic Circuits](ch07.xhtml)**   Discusses clocked
    and unclocked logic circuits that maintain a memory, as well as circuit design
    using state transition tables and state diagrams.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第7章：时序逻辑电路](ch07.xhtml)**   讨论了保持记忆的时钟逻辑电路和非时钟逻辑电路，以及使用状态转换表和状态图进行电路设计。'
- en: '**[Chapter 8: Memory](ch08.xhtml)**   Describes the memory hierarchy (cloud,
    mass storage, main memory, cache, and CPU registers) and discusses memory hardware
    designs for registers, SRAM, and DRAM.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第8章：内存](ch08.xhtml)**   介绍了内存层次结构（云存储、大容量存储、主内存、缓存和CPU寄存器），并讨论了用于寄存器、SRAM和DRAM的内存硬件设计。'
- en: '**[Chapter 9: Central Processing Unit](ch09.xhtml)**   Gives an overview of
    CPU subsystems. This chapter also explains the instruction execution cycle and
    the main A64 registers and shows how to view register contents in the `gdb` debugger.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第9章：中央处理单元](ch09.xhtml)**   概述了CPU子系统。本章还解释了指令执行周期和主要的A64寄存器，并展示了如何在`gdb`调试器中查看寄存器内容。'
- en: '**[Chapter 10: Programming in Assembly Language](ch10.xhtml)**   Looks at the
    minimal C function, both as compiler-generated assembly language and as written
    directly in assembly language. This chapter covers assembler directives and first
    instructions. I give an example of using the text user interface of `gdb` as a
    learning tool.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第10章：汇编语言编程](ch10.xhtml)**   介绍了最小的C函数，既有编译器生成的汇编语言，也有直接用汇编语言编写的版本。本章涵盖了汇编指令和第一个指令的使用。我举了一个例子，展示如何使用`gdb`的文本用户界面作为学习工具。'
- en: '**[Chapter 11: Inside the](ch11.xhtml)**   main **Function**   Describes passing
    arguments in registers, position-independent code, and use of the call stack for
    passing the return address and automatic local variables.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第11章：主函数内部](ch11.xhtml)**  描述了如何在寄存器中传递参数、位置无关代码以及如何使用调用栈传递返回地址和自动局部变量。'
- en: '**[Chapter 12: Instruction Details](ch12.xhtml)**   Looks at how instructions
    are coded at the bit level. This chapter also discusses how addresses needed by
    instructions are computed, as well as algorithms of assembler and linker programs.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第12章：指令细节](ch12.xhtml)**  探讨了指令如何在位级别进行编码。本章还讨论了指令所需地址是如何计算的，以及汇编器和链接器程序的算法。'
- en: '**[Chapter 13: Control Flow Constructs](ch13.xhtml)**   Covers assembly language
    implementation of program flow control with `while`, `do-while`, `for`, `if-else`,
    and `switch` constructs.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第13章：控制流结构](ch13.xhtml)**  介绍了如何在汇编语言中实现程序流控制，包括 `while`、`do-while`、`for`、`if-else`
    和 `switch` 结构。'
- en: '**[Chapter 14: Inside Subfunctions](ch14.xhtml)**   Describes how functions
    access external variables (global, pass by value, pass by pointer, and pass by
    reference) and summarizes the structure of the stack frame.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第14章：子函数内部](ch14.xhtml)**  描述了函数如何访问外部变量（全局变量、按值传递、按指针传递和按引用传递），并总结了栈帧的结构。'
- en: '**[Chapter 15: Special Uses of Subfunctions](ch15.xhtml)**   Shows how recursion
    works. This chapter discusses using assembly language to access CPU hardware features
    that are not directly accessible in high-level languages, using a separate function
    or inline assembly.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第15章：子函数的特殊用途](ch15.xhtml)**  展示了递归是如何工作的。本章讨论了如何使用汇编语言访问高层语言中无法直接访问的 CPU
    硬件特性，通过单独的函数或内联汇编来实现。'
- en: '**[Chapter 16: Bitwise Logic, Multiplication, and Division Instructions](ch16.xhtml)**   Describes
    bit masking, shifting bits, and the multiplication and division instructions.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第16章：位运算、乘法和除法指令](ch16.xhtml)**  描述了位掩码、位移操作以及乘法和除法指令。'
- en: '**[Chapter 17: Data Structures](ch17.xhtml)**   Explains how arrays and records
    (`struct`s) are implemented and accessed in a program at the assembly language
    level.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第17章：数据结构](ch17.xhtml)**  解释了如何在汇编语言层面实现和访问数组和记录（`struct`）。'
- en: '**[Chapter 18: Object-Oriented Programming](ch18.xhtml)**   Shows how `struct`s
    are used as objects in C++.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第18章：面向对象编程](ch18.xhtml)**  展示了如何在 C++ 中将 `struct` 用作对象。'
- en: '**[Chapter 19: Fractional Numbers](ch19.xhtml)**   Describes fixed-point and
    floating-point numbers, the IEEE 754 standard, and a few A64 floating-point instructions.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第19章：分数数字](ch19.xhtml)**  描述了定点数和浮点数、IEEE 754 标准以及一些 A64 浮点指令。'
- en: '**[Chapter 20: Input/Output](ch20.xhtml)**   Compares I/O with memory and bus
    timing, describes memory-mapped I/O, and shows how to program the GPIO on the
    Raspberry Pi, both in C and in assembly language. This chapter also gives a rough
    sketch of polled I/O programming and discusses interrupt-driven and direct memory
    access I/O.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第20章：输入/输出](ch20.xhtml)**  比较了 I/O 与内存和总线时序，描述了内存映射 I/O，并展示了如何在树莓派上编程 GPIO，既有
    C 语言实现，也有汇编语言实现。本章还简要介绍了轮询 I/O 编程，并讨论了中断驱动和直接内存访问 I/O。'
- en: '**[Chapter 21: Exceptions and Interrupts](ch21.xhtml)**   Briefly describes
    how AArch64 handles exceptions and interrupts. The chapter includes an example
    of using the `svc` instruction to do system calls without using the C runtime
    environment.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第21章：异常与中断](ch21.xhtml)**  简要描述了 AArch64 如何处理异常和中断。本章包括了使用 `svc` 指令进行系统调用的示例，而不依赖
    C 运行时环境。'
- en: '**Efficient Use of This Book**'
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**本书的高效使用方法**'
- en: I’ve organized this book in such a way that you should be able to learn the
    material efficiently by following a few simple guidelines.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我已将本书的内容按照一种方式组织，你应该能够通过遵循几个简单的指南高效地学习这些材料。
- en: Many sections have “Your Turn” exercises at the end that give you the opportunity
    to practice working with the material presented in the main body of the section.
    These are intended as exercises, not tests. I have provided answers and my solutions
    to most of them online, at *[https://rgplantz.github.io](https://rgplantz.github.io)*.
    If you are an instructor using this book, sorry, you will have to make up your
    own exam questions! Many of the exercises have fairly obvious extensions that
    instructors can use to create class assignments.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 许多章节的结尾都有“你的练习”环节，给你提供了练习与章节正文材料相关内容的机会。这些练习是为了帮助你练习，而不是测试。我已经在网上提供了大多数问题的答案和我的解法，网址是
    *[https://rgplantz.github.io](https://rgplantz.github.io)*。如果你是使用这本书的讲师，抱歉，你得自己出题！许多练习都有相对明显的扩展，讲师可以用它们来创建课堂作业。
- en: 'To make efficient use of these exercises, I recommend an iterative process:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了高效利用这些练习，我推荐一个迭代的过程：
- en: Try to solve the problem on your own. Spend some time on it, but don’t let yourself
    get stuck for too long.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试自己解决问题。花点时间，但不要让自己卡住太久。
- en: If the answer doesn’t come to you, peek at my solution. In some cases, I give
    a hint before providing the full solution.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果答案没有立即浮现，查看我的解法。在某些情况下，我会在提供完整解法之前给出提示。
- en: Return to step 1, armed with some knowledge of how an experienced assembly language
    programmer might approach the solution.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到第一步，带着一些关于经验丰富的汇编语言程序员如何接近问题解决方案的知识。
- en: One thing I strongly urge you to do is type the code in yourself. This physical
    activity will help you to learn the material faster. If nothing else, it forces
    you to read every character in the code. There is no advantage to copying and
    pasting code from my online solutions; frankly, none of the programs in this book
    have any real-world usefulness. The code is provided for your own exercising,
    so please use it in that spirit.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议你自己输入代码。这一动手操作将帮助你更快地掌握材料。如果没有其他好处，至少它迫使你阅读代码中的每一个字符。从我的在线解法中复制粘贴代码并没有什么好处；坦白说，本书中的所有程序在现实世界中并没有实际用途。代码是提供给你自己练习的，因此请以此心态来使用它。
- en: This hands-on approach also applies to the mathematics in the first few chapters,
    which includes converting numbers between several number bases. Any good calculator
    will do that easily, but the actual conversion is not the point. The point is
    to learn how data values can be represented in bit patterns, and using paper and
    pencil to work through the arithmetic will help you get a feel for these patterns.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这种动手实践的方法同样适用于前几章中的数学内容，其中包括在不同数字进制之间进行转换。任何一款好的计算器都能轻松完成这项任务，但实际的转换并不是重点。重点是学习数据值如何通过位模式表示，使用纸和笔进行计算将帮助你感受这些模式。
- en: We’ll start in [Chapter 1](ch01.xhtml) by taking a high-level overview of the
    major subsystems of a computer. Then I’ll describe how I set up the programming
    environment on my two Raspberry Pis, a 3 and a 5, to create and run the programs
    in this book.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第1章](ch01.xhtml)开始，先概述计算机的主要子系统。接着，我将描述如何在我的两台树莓派（3型和5型）上设置编程环境，以便创建和运行本书中的程序。
