- en: Chapter 9. Authentication
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 认证
- en: Identity is a core concept in any social network, and *authentication* is the
    act of identifying yourself to a system. You want users to be able to sign up
    for new accounts and log into your application. Although gems like devise and
    authlogic provide complete authentication systems for Rails applications, in this
    chapter, you’ll get your hands dirty by building your own system instead.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 身份是任何社交网络中的核心概念，而*认证*是向系统证明你身份的行为。你希望用户能够注册新账户并登录到你的应用程序。尽管像 devise 和 authlogic
    这样的宝石为 Rails 应用程序提供了完整的认证系统，但在本章中，你将亲自动手构建自己的系统。
- en: In addition to the signup, login, and logout actions, you’ll also add methods
    for getting the current logged-in user’s identity and redirecting anonymous users
    to the login page. This authentication system will require controllers and views,
    so before starting, let’s take a moment to add a little style to your site with
    the Bootstrap framework.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 除了注册、登录和登出操作外，你还需要添加获取当前登录用户身份和将匿名用户重定向到登录页面的方法。这个认证系统将需要控制器和视图，因此在开始之前，先花点时间使用
    Bootstrap 框架为你的站点添加一些样式。
- en: Bootstrap
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap
- en: Bootstrap is an open source frontend framework originally created at Twitter.
    It provides a collection of CSS and JavaScript files that you can incorporate
    into a website to provide pleasant typography, a responsive layout that works
    in both desktop and mobile browsers, and features such as modal dialogs, drop-down
    menus, and tooltips. Full documentation for Bootstrap is online at *[http://getbootstrap.com/](http://getbootstrap.com/).*
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 是一个开源前端框架，最初由 Twitter 创建。它提供了一组 CSS 和 JavaScript 文件，你可以将其集成到网站中，以提供愉悦的排版、适应桌面和移动浏览器的响应式布局，以及模态对话框、下拉菜单、工具提示等功能。Bootstrap
    的完整文档可以在线访问，地址是*[http://getbootstrap.com/](http://getbootstrap.com/)*。
- en: You could download the Bootstrap framework and manually integrate the CSS and
    JavaScript files into your application, but the bootstrap-sass gem can do all
    of that for you. Since you’re already building your own authentication system,
    save yourself some work here—edit your application’s *Gemfile* and add this gem.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以下载 Bootstrap 框架并手动将 CSS 和 JavaScript 文件集成到你的应用程序中，但 bootstrap-sass gem 可以为你完成所有这些工作。既然你已经在构建自己的认证系统，这里可以省点力——编辑你的应用程序的*Gemfile*并添加这个
    gem。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then run the **`bin/bundle install`** command to update the installed gems.
    Now that the gem is installed, you need to make a few changes to your CSS and
    JavaScript files to include Bootstrap. First, update *app/assets/stylesheets/application.css,*
    as shown here:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行**`bin/bundle install`**命令以更新已安装的 gem。现在 gem 安装完成，你需要对 CSS 和 JavaScript
    文件做一些修改以包含 Bootstrap。首先，更新*app/assets/stylesheets/application.css*，如下所示：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This code includes the Bootstrap CSS files in your application. Next, include
    the Bootstrap JavaScript files by editing *app/assets/javascripts/application.js*
    and adding this line to the end of the file:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将 Bootstrap CSS 文件包含到你的应用程序中。接下来，通过编辑 *app/assets/javascripts/application.js*
    文件并将这行代码添加到文件末尾，来包含 Bootstrap 的 JavaScript 文件：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, update the application layout to use Bootstrap styles. Open the file
    *app/ views/layouts/application.html.erb* and change the contents of the body
    like so:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，更新应用程序布局以使用 Bootstrap 样式。打开文件*app/views/layouts/application.html.erb*，并像下面这样更改页面主体的内容：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `div` with `class="container"` wraps the contents of the page ➊ and provides
    margins that adjust based on the screen’s width, making your site look sharp on
    both desktop and mobile screens. The `yield` statement ➋ is used by Rails to insert
    the contents of the view template into the layout.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 带有 `class="container"` 的 `div` 包裹着页面的内容 ➊，并提供根据屏幕宽度调整的边距，使得你的站点在桌面和移动屏幕上看起来都很清晰。`yield`
    语句 ➋ 被 Rails 用来将视图模板的内容插入到布局中。
- en: Now that you have the stylesheets, JavaScript, and basic layout in place, you
    are all set to start using Bootstrap.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了样式表、JavaScript 和基本的布局，你可以开始使用 Bootstrap 了。
- en: The Authentication System
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证系统
- en: The purpose of the authentication system is to identify the current user and
    only display pages the user wants to see or is authorized to see. You’ll use a
    combination of an email address and password to identify users. Email addresses
    are a good choice because they are globally unique. No two people have the same
    email address.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 认证系统的目的是识别当前用户，并仅显示用户想要查看或被授权查看的页面。你将使用电子邮件地址和密码的组合来识别用户。电子邮件地址是一个不错的选择，因为它们是全球唯一的。没有两个用户会拥有相同的电子邮件地址。
- en: In your application, anonymous users are only allowed to see pages for logging
    in or signing up for a new account. Every other page should be restricted.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的应用程序中，匿名用户只能查看用于登录或注册新账户的页面。其他所有页面都应该受到限制。
- en: Post Index and Show
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 帖子索引与展示
- en: 'Before you start building the authentication system, you need data to protect
    from anonymous users. Let’s add the `index` and `show` pages for the `Post` models
    created in the last chapter. First, you need to add controller actions. Open the
    file *app/controllers/posts_controller.rb* in your editor and add these `index`
    and `show` methods:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始构建认证系统之前，你需要保护的数据来自匿名用户。我们先为上章创建的`Post`模型添加`index`和`show`页面。首先，添加控制器操作。打开文件*app/controllers/posts_controller.rb*并添加以下`index`和`show`方法：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: These two actions are similar to the `index` and `show` actions in the blog
    from [Chapter 4](ch04.html "Chapter 4. Controllers"). The `index` action ➊ retrieves
    all posts from the database and assigns them to the `@posts` variable. It then
    renders the view at *app/ views/posts/index.html.erb*. The `show` action ➋ finds
    the requested post using the `id` from the `params` hash, assigns it to `@post`,
    and renders the view at *app/ views/posts/show.html.erb*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个操作类似于博客中的`index`和`show`操作，参见[第4章](ch04.html "第4章. 控制器")。`index`操作 ➊ 从数据库中检索所有帖子并将其分配给`@posts`变量，然后渲染*app/views/posts/index.html.erb*视图。`show`操作
    ➋ 使用`params`哈希中的`id`找到请求的帖子，将其分配给`@post`，并渲染*app/views/posts/show.html.erb*视图。
- en: 'Now you need to create corresponding view templates for these actions. Create
    a new file named *app/views/posts/index.html.erb* and add the following code:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你需要为这些操作创建相应的视图模板。创建一个名为*app/views/posts/index.html.erb*的新文件，并添加以下代码：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `index` view adds a header ➊ using the Bootstrap `page-header` class and
    renders the collection `@posts` ➋ using partials.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`index`视图使用Bootstrap的`page-header`类 ➊ 添加了一个标题，并使用部分渲染了`@posts`集合 ➋。'
- en: Because you’re using partials to render the posts, add those next; you’ll need
    a partial for each post type—of which there are two—so you need two partial files.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你使用部分来渲染帖子，接下来添加这些部分；你将为每种帖子类型添加一个部分——目前有两种类型——因此你需要两个部分文件。
- en: 'First, create the file *app/views/text_posts/_text_post.html.erb* and open
    it for editing:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建文件*app/views/text_posts/_text_post.html.erb*并打开进行编辑：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This partial uses Bootstrap’s panel component to display a `TextPost`. The `panel`
    class ➊ adds a gray border around the content. The `panel-heading` class ➋ adds
    a light gray background. The `title` is then rendered inside an `h3` element with
    `<%= text_post.title %>` ➌. The `panel-body` class ➍ adds padding to match the
    heading. The post author and body are rendered in this section.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个部分使用了Bootstrap的面板组件来显示`TextPost`。`panel`类 ➊ 在内容周围添加了灰色边框。`panel-heading`类
    ➋ 添加了浅灰色背景。然后，`title`被渲染在`<h3>`元素中，内容为`<%= text_post.title %>` ➌。`panel-body`类
    ➍ 为了匹配标题添加了内边距。帖子作者和正文在此部分中渲染。
- en: 'Then create the file *app/views/image_posts/_image_post.html.erb* with the
    following content. The `ImagePost` partial is just a slight variation on the `TextPost`
    partial:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建文件*app/views/image_posts/_image_post.html.erb*，并添加以下内容。`ImagePost`部分与`TextPost`部分稍有不同：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This partial uses the ERB `image_tag` helper to add an image tag with the source
    set to `image_post.url` ➊, the location of the image. This line also adds Bootstrap’s
    `img-responsive` class to the image, which causes it to scale automatically based
    on the browser width.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个部分使用ERB的`image_tag`助手来添加一个图像标签，其源设置为`image_post.url` ➊，即图像的存储位置。该行还为图像添加了Bootstrap的`img-responsive`类，使其根据浏览器宽度自动缩放。
- en: 'With these views in place, start the Rails server and look at the application:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好这些视图后，启动Rails服务器并查看应用程序：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now go to *http://localhost:3000/posts* in your web browser. The `Post index`
    view should look similar to [Figure 9-1](ch09.html#post_index_view "Figure 9-1. The
    Post index view"), depending on how many posts you created in the Rails console.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在浏览器中访问*http://localhost:3000/posts*。`Post index`视图应该类似于[图9-1](ch09.html#post_index_view
    "图9-1. 帖子索引视图")，具体取决于你在Rails控制台中创建了多少个帖子。
- en: '![The Post index view](httpatomoreillycomsourcenostarchimages2169088.png.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![帖子索引视图](httpatomoreillycomsourcenostarchimages2169088.png.jpg)'
- en: Figure 9-1. The *Post index view*
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-1. *帖子索引视图*
- en: You created two posts in the previous chapter, and your application’s `Post
    index` view currently shows those two posts. You didn’t add titles in the last
    chapter, so the headings are blank.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你在上一章创建了两个帖子，当前应用程序的`Post index`视图显示了这两个帖子。由于在上一章没有添加标题，因此标题为空。
- en: 'Now that the `Post` partials have been created, the `Post show` view can also
    use those partials. Create the new file *app/views/posts/show.html.erb* with the
    following content:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`Post`部分已创建，`Post show`视图也可以使用这些部分。创建新文件*app/views/posts/show.html.erb*并添加以下内容：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `show` view is similar to the `index` view with two exceptions. It renders
    a single post ➊ instead of a collection of posts, and it includes a button ➋ that
    links back to the posts index page.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`show`视图与`index`视图类似，有两个区别。它渲染单个帖子 ➊，而不是帖子集合，并且包含一个按钮 ➋，该按钮链接回帖子索引页面。'
- en: Go to *http://localhost:3000/posts/1* to see it in action, as in [Figure 9-2](ch09.html#post_show_view
    "Figure 9-2. The Post show view").
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 访问*http://localhost:3000/posts/1*查看实际效果，如[图9-2](ch09.html#post_show_view "图9-2. 帖子显示视图")所示。
- en: '![The Post show view](httpatomoreillycomsourcenostarchimages2169090.png.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![帖子显示视图](httpatomoreillycomsourcenostarchimages2169090.png.jpg)'
- en: Figure 9-2. The *Post show view*
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-2. *帖子显示视图*
- en: Now that the application has actions and views for displaying posts, let’s move
    on to adding authentication to protect these actions from anonymous users.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应用程序已经有了用于显示帖子（posts）的操作和视图，接下来让我们添加身份验证，保护这些操作不被匿名用户访问。
- en: Sign Up
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册
- en: Here, you’ll implement a user sign-up process that asks for an email address,
    password, and password confirmation. If the user enters an email address that
    isn’t already in the database and provides passwords that match, the system will
    create a new `User` and thank the user for signing up.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你将实现一个用户注册流程，要求输入电子邮件地址、密码和密码确认。如果用户输入的电子邮件地址尚未存在于数据库中，并且密码匹配，系统将创建一个新的`User`并感谢用户注册。
- en: You can already store the new user’s email address because you have a string
    field named `email` in the `users` table. You need to be more careful, however,
    with passwords. Never store a user’s password in plain text. Instead, store a
    hashed version of the password, known as a *password digest*. The secure password
    feature in Rails provides built-in support for password hashing, using a hashing
    algorithm called bcrypt. Bcrypt is a secure one-way hash.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经能够存储新用户的电子邮件地址，因为在`users`表中有一个名为`email`的字符串字段。然而，你需要更加小心地处理密码。绝对不要以明文形式存储用户密码。相反，应存储密码的哈希版本，这称为*密码摘要*。Rails的安全密码功能提供了对密码哈希的内建支持，使用一种叫做bcrypt的哈希算法。Bcrypt是一种安全的单向哈希算法。
- en: You can enable the secure password feature by calling the method `has_secure_password`
    in a Rails model. This method adds the `password` and `password_confirmation`
    attributes to the model and expects the model to have a string field named `password_digest`.
    It adds validations that require matching `password` and `password_confirmation`
    attributes on creation. If these attributes match, it automatically hashes the
    password and stores it in the `password_digest` field.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在Rails模型中调用`has_secure_password`方法来启用安全密码功能。该方法为模型添加了`password`和`password_confirmation`属性，并要求模型具有一个名为`password_digest`的字符串字段。它添加了验证，要求在创建时`password`和`password_confirmation`属性必须匹配。如果这两个属性匹配，系统会自动对密码进行哈希并将其存储在`password_digest`字段中。
- en: First, edit your application’s *Gemfile* and add the bcrypt gem. Because many
    applications include an authentication system, a commented-out line is already
    available for this gem. Remove the hash mark at the beginning of that line and
    save the file.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，编辑应用程序的*Gemfile*并添加bcrypt gem。因为许多应用程序包含身份验证系统，所以该gem的注释行已存在。去掉该行前面的注释符号并保存文件。
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Anytime you change the *Gemfile*, you also need to run the `bin/bundle install`
    command to update the gems installed on your system:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 每次更改*Gemfile*时，你还需要运行`bin/bundle install`命令，以更新系统上安装的gem：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The next step is to add the `password_digest` field to the `users` table and
    run the database migration with `bin/rake db:migrate` so you can store the user’s
    hashed password:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是向`users`表添加`password_digest`字段，并运行数据库迁移命令`bin/rake db:migrate`，这样你就可以存储用户的哈希密码：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now you need to turn on the secure password feature for the `User` model. Open
    *app/models/user.rb* and add the line `has_secure_password` below the `has_many`
    associations you added in the last chapter. While you’re editing that file, also
    add `presence` and `uniqueness` validations for the email field:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你需要为`User`模型启用安全密码功能。打开*app/models/user.rb*并在上章添加的`has_many`关联下方添加`has_secure_password`行。在编辑该文件时，还需要为电子邮件字段添加`presence`和`uniqueness`验证：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The default route for creating a new user is *http://localhost:3001/users/new*.
    That works, but a custom route such as *http://localhost:3001/signup* might be
    easier to remember.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新用户的默认路由是 *http://localhost:3001/users/new*。这个路由有效，但像 *http://localhost:3001/signup*
    这样的自定义路由可能更容易记住。
- en: Edit *config/routes.rb* and add a route for the sign-up page. After a user signs
    up for an account or logs in to your application, you want to redirect the user
    to the home page. So set the `root` route to the `posts index` page while you’re
    editing this file.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 *config/routes.rb* 并为注册页面添加路由。在用户注册账户或登录到应用程序后，你希望将用户重定向到主页。因此，在编辑此文件时，将
    `root` 路由设置为 `posts index` 页面。
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Open *app/controllers/users_controller.rb* and add the necessary actions to
    `UsersController` for creating new `Users`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 *app/controllers/users_controller.rb* 并为 `UsersController` 添加创建新 `Users`
    的必要操作：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `new` method ➊ instantiates an empty new `User` object and renders the sign-up
    form. The `create` method ➋ instantiates a `User` object using the parameters
    passed from the form. Then, if the user can be saved, it redirects the user to
    the root of the site and displays a welcome message. Otherwise, it renders the
    new user form again.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`new` 方法 ➊ 实例化一个空的新的 `User` 对象并渲染注册表单。`create` 方法 ➋ 使用表单传递的参数实例化一个 `User` 对象。如果用户可以保存，它会将用户重定向到网站根目录并显示欢迎消息。否则，它会重新渲染新用户表单。'
- en: Now that the controller actions are in place, add the sign-up form in *app/views/users/new.html.erb:*
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在控制器操作已到位，接下来在 *app/views/users/new.html.erb* 中添加注册表单：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The first half of this form displays error messages ➊, if any. The form uses
    a `div` with the Bootstrap class `form-group` to group labels and inputs ➋, and
    adds the class `form-control` to input controls ➌. Bootstrap uses these classes
    to apply styles to the form.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 该表单的前半部分显示错误消息 ➊（如果有）。表单使用具有 Bootstrap 类 `form-group` 的 `div` 来将标签和输入控件分组 ➋，并且为输入控件添加了
    `form-control` 类 ➌。Bootstrap 使用这些类来为表单应用样式。
- en: Go to *http://localhost:3000/signup* in your web browser to see the sign-up
    form, as in [Figure 9-3](ch09.html#sign-up_form "Figure 9-3. The sign-up form").
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中访问 *http://localhost:3000/signup* 以查看注册表单，如 [图 9-3](ch09.html#sign-up_form
    "图 9-3. 注册表单") 所示。
- en: '![The sign-up form](httpatomoreillycomsourcenostarchimages2169092.png.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![注册表单](httpatomoreillycomsourcenostarchimages2169092.png.jpg)'
- en: Figure 9-3. The sign-up form
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9-3. 注册表单
- en: 'In the `create` action, you added a flash message to welcome new users, but
    your views don’t have a place for displaying flash messages yet. Bootstrap includes
    an `alert` class that’s perfect for displaying flash messages. Open the application
    layout at *app/views/layouts/application.html.erb* and add a section for flash
    messages, as shown here:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `create` 动作中，你为新用户添加了一个闪现消息以表示欢迎，但你的视图中还没有显示闪现消息的地方。Bootstrap 包含一个非常适合显示闪现消息的
    `alert` 类。打开 *app/views/layouts/application.html.erb* 的应用布局，并按照下面的示例添加一个闪现消息的区域：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This application uses two different kinds of flash messages: A `notice` message
    ➊ indicates success. A `notice` is shown in green using Bootstrap’s `alert-success`
    class. An `alert` message ➋ indicates an error. An `alert` is shown in red using
    the Bootstrap `alert-danger` class.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 本应用使用了两种不同类型的闪现消息：`notice` 消息 ➊ 表示成功。`notice` 消息使用 Bootstrap 的 `alert-success`
    类显示为绿色。`alert` 消息 ➋ 表示错误。`alert` 消息使用 Bootstrap 的 `alert-danger` 类显示为红色。
- en: In the last chapter, you didn’t add email addresses or passwords to the users
    you created. If you want to log in using `alice` or `bob`, you can update their
    accounts in the Rails console.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你没有为创建的用户添加电子邮件地址或密码。如果你想使用 `alice` 或 `bob` 登录，可以在 Rails 控制台中更新他们的帐户。
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: After starting the Rails console with `bin/rails console`, find the `User` by
    `id` ➊. Then assign values for the `email`, `password`, and `password_confirmation`
    ➋. Finally, save the `User` with `alice.save` ➌. Repeat these steps for the other
    `User`. Make sure the `email` for each user is unique.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 `bin/rails console` 启动 Rails 控制台后，通过 `id` 查找 `User` ➊。然后为 `email`、`password`
    和 `password_confirmation` 赋值 ➋。最后，使用 `alice.save` 保存 `User` ➌。为另一个 `User` 重复这些步骤。确保每个用户的
    `email` 唯一。
- en: Now that you’ve seen how to create a form for users to sign up for an account,
    let’s explore how to let them log in.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了如何为用户创建一个注册账户的表单，接下来我们来看看如何让他们登录。
- en: Log In
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 登录
- en: A user signing up for an account fills out a form like the one in [Figure 9-3](ch09.html#sign-up_form
    "Figure 9-3. The sign-up form") and creates a new user record in the database.
    On the other hand, there is no model that represents a login, and a login doesn’t
    create a record in the database. Instead, the user’s identity is stored in the
    *session*, a small amount of data used to identify requests from a particular
    browser to the web server.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 用户注册账户时，填写类似 [图 9-3](ch09.html#sign-up_form "图 9-3. 注册表单") 中的表单，并在数据库中创建一个新的用户记录。另一方面，登录没有模型表示，登录不会在数据库中创建记录。相反，用户的身份存储在
    *session* 中，这是用于标识从特定浏览器到 Web 服务器的请求的小量数据。
- en: Sessions
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 会话
- en: In general, web servers are *stateless*. That is, they don’t remember the identity
    of a user from one request to the next. You must add this functionality, which
    you do by storing the currently logged-in user’s `user_id` in the session.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Web 服务器是 *无状态的*。也就是说，它们不会记住用户从一次请求到下一次请求的身份。您必须添加此功能，即通过将当前登录用户的 `user_id`
    存储在会话中来实现。
- en: Rails stores session information in a cookie by default. Session cookies are
    signed and encrypted to prevent tampering. Users can’t see the data stored in
    their session cookie.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 默认将会话信息存储在一个 cookie 中。会话 cookie 已签名并加密，以防篡改。用户无法查看存储在其会话 cookie 中的数据。
- en: 'Session values in Rails are stored using key-value pairs, and they’re accessed
    like a hash:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 中的会话值使用键值对存储，并像哈希一样访问：
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This command stores `@user.id` in a cookie on the current user’s computer. That
    cookie is automatically sent to the server with every request to your application.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将 `@user.id` 存储在当前用户计算机上的一个 cookie 中。该 cookie 会随每个请求自动发送到服务器。
- en: When a user successfully logs in to your site, you need to store the `user_id`
    in the `session`. Then you look for a `user_id` in the `session` on every request.
    If a `user_id` is found and a `User` record matches that `id`, then you know that
    user is authenticated. Otherwise, you should redirect the user to the login page.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户成功登录到您的网站时，您需要将 `user_id` 存储在 `session` 中。然后，您需要在每个请求中查找 `session` 中的 `user_id`。如果找到了
    `user_id` 并且 `User` 记录与该 `id` 匹配，那么您就知道该用户已通过身份验证。否则，您应将用户重定向到登录页面。
- en: Implementation
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现
- en: 'Now let’s implement the login process. First, use the Rails generator to create
    a `sessions` controller:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们实现登录过程。首先，使用 Rails 生成器创建一个 `sessions` 控制器：
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, open *config/routes.rb*. Add a new resource called `:sessions` and add
    routes for login and logout:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开 *config/routes.rb*。添加一个新的资源 `:sessions`，并添加登录和登出的路由：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, create a new file named *app/views/sessions/new.html.erb* and add the
    login form:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个名为 *app/views/sessions/new.html.erb* 的新文件，并添加登录表单：
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Notice that I’m using `form_tag` ➊ here instead of `form_for`. The sign-up process
    used `form_for` because that form was associated with the `User` model. Use `form_tag`
    now because the login form is not associated with a model.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我在这里使用的是 `form_tag` ➊ 而不是 `form_for`。注册过程使用了 `form_for`，因为该表单与 `User` 模型关联。现在使用
    `form_tag`，因为登录表单与任何模型无关。
- en: 'The sessions controller handles login and logout. Edit *app/controllers/ sessions_controller.rb*
    to add these actions:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 会话控制器处理登录和登出。编辑 *app/controllers/sessions_controller.rb* 以添加以下操作：
- en: '[PRE23]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `new` method ➊ renders the login form. The controller action doesn’t need
    to do anything. Remember that actions render a view file matching their name by
    default. In this case, the `new` method renders the view at */app/views/sessions/new.html.erb*.
    The `create` method ➋ looks for a user record by email address. If it finds a
    matching user and that user can be authenticated with the provided password, it
    stores the `user_id` in the session and redirects to the home page. Otherwise,
    it adds an error message to the flash and redisplays the login form. The `destroy`
    method ➌ clears the `user_id` stored in the session and redirects to the home
    page.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`new` 方法 ➊ 渲染登录表单。控制器操作无需做任何事情。请记住，操作默认会呈现与其名称匹配的视图文件。在这种情况下，`new` 方法会渲染位于
    */app/views/sessions/new.html.erb* 的视图。`create` 方法 ➋ 通过电子邮件地址查找用户记录。如果找到了匹配的用户，并且该用户能够通过提供的密码进行身份验证，它会将
    `user_id` 存储在会话中并重定向到主页。否则，它会将错误消息添加到 flash 中并重新显示登录表单。`destroy` 方法 ➌ 清除存储在会话中的
    `user_id` 并重定向到主页。'
- en: Go to *http://localhost:3000/login* to see the login form shown in [Figure 9-4](ch09.html#login_form
    "Figure 9-4. The login form").
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 *http://localhost:3000/login* 查看在 [图 9-4](ch09.html#login_form "图 9-4. 登录表单")
    中显示的登录表单。
- en: '![The login form](httpatomoreillycomsourcenostarchimages2169094.png.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![登录表单](httpatomoreillycomsourcenostarchimages2169094.png.jpg)'
- en: Figure 9-4. The login form
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9-4. 登录表单
- en: Users can log in and log out now, but the rest of the application has no way
    to know anything about the current user. As you add features to the application,
    the identity of the current user will be used frequently. For example, the application
    uses the current user to decide which posts to display and to assign ownership
    to any new posts or comments created. Now let’s add the methods needed to make
    the authentication system available to the rest of the application.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 用户现在可以登录和登出，但应用程序的其余部分无法知道当前用户的任何信息。当你向应用程序添加新功能时，当前用户的身份将被频繁使用。例如，应用程序使用当前用户来决定显示哪些帖子，并将所有新的帖子或评论分配给当前用户。接下来，让我们添加使身份验证系统可供应用程序其余部分使用的方法。
- en: Current User
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当前用户
- en: 'First, you need to be able to identify the currently logged-in user. Add the
    `current_user` method to `ApplicationController` in *app/controllers/application
    _controller.rb* and make it a `helper` method. That way, it will be available
    in all controllers and views, laying the groundwork for other parts of the app
    to access the currently logged-in user:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要能够识别当前登录的用户。在 *app/controllers/application_controller.rb* 中将 `current_user`
    方法添加到 `ApplicationController` 中，并使其成为一个 `helper` 方法。这样，它将在所有控制器和视图中可用，为应用程序中的其他部分访问当前登录的用户奠定基础：
- en: '[PRE24]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `current_user` method returns a `User` object representing the currently
    logged-in user. This method returns `nil` when no one is logged in, so you can
    also use it in conditional statements that should have different results when
    no user is logged in.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`current_user` 方法返回一个 `User` 对象，表示当前登录的用户。当没有用户登录时，该方法返回 `nil`，因此你也可以在条件语句中使用它，当没有用户登录时会产生不同的结果。'
- en: 'For example, use the `current_user` method to add a logout link when a user
    is logged in or show links to log in and sign up when no one is logged in. Open
    *app/views/layouts/application.html.erb* and add this code just above the `yield`
    statement:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用 `current_user` 方法在用户已登录时添加登出链接，或者在没有用户登录时显示登录和注册的链接。打开 *app/views/layouts/application.html.erb*
    文件，并将此代码添加到 `yield` 语句上方：
- en: '[PRE25]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Now logged-in users should see a link to log out, and anonymous users should
    see links to either log in or sign up.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，已登录用户应该看到一个登出链接，而匿名用户应该看到登录或注册的链接。
- en: Authenticate User
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证用户
- en: In any social app, certain pages should not be available to anonymous users.
    The last thing you need is a way to restrict pages so only authenticated users
    can view them. You can do this with the Rails `before_action` method.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何社交应用程序中，某些页面不应该对匿名用户开放。你需要的最后一件事是限制页面，使得只有经过身份验证的用户才能查看它们。你可以使用 Rails 的 `before_action`
    方法来实现这一点。
- en: A `before_action` is a method that runs automatically before any other action
    in the controller. These methods are sometimes used to remove duplication by loading
    data needed by several different actions. A `before_action` can also halt the
    current request by rendering or redirecting to another location.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`before_action` 是一个在控制器中其他任何动作之前自动执行的方法。这些方法有时用于通过加载多个不同操作所需的数据来消除重复。`before_action`
    还可以通过渲染或重定向到另一个位置来终止当前请求。'
- en: 'Create a method named `authenticate_user!` that redirects to the login page
    if there is no current user. Add this method to the `ApplicationController` in
    *app/controllers/application_controller.rb* so it is available in all controllers:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `authenticate_user!` 的方法，如果没有当前用户，则将其重定向到登录页面。将此方法添加到 *app/controllers/application_controller.rb*
    中的 `ApplicationController`，这样它将在所有控制器中可用：
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Because you set the `posts index` page as the home page of your application,
    let’s try this method in the posts controller. Open the file *app/controllers/posts_controller.rb*
    and add a `before_action`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你将 `posts index` 页面设置为应用程序的主页，接下来我们在帖子控制器中尝试这个方法。打开 *app/controllers/posts_controller.rb*
    文件并添加一个 `before_action`：
- en: '[PRE27]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now if an anonymous user tries to access the home page, he or she should be
    redirected to the login page automatically. Be sure you don’t add this `before_action`
    to the sessions page. If you do, anonymous users won’t be able to access the login
    page!
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果匿名用户尝试访问首页，他或她应该会自动被重定向到登录页面。确保不要将此 `before_action` 添加到会话页面。如果这样做，匿名用户将无法访问登录页面！
- en: Use Current User
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用当前用户
- en: Now that your application knows who’s logged in, you can change the home page
    to display only posts authored by the current user or anyone the current user
    is following. This type of home page is usually arranged in chronological order
    and called a *timeline*.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的应用程序知道了谁已经登录，你可以将主页更改为仅显示当前用户创建的帖子或当前用户关注的任何人发布的帖子。此类主页通常按时间顺序排列，称为 *时间线*。
- en: 'The first thing you need to do is add a method to the `User` model to return
    a `user_id` list that you can use to query posts. Let’s call this method `timeline_user_ids`.
    Open the file *app/models/user.rb* and add this method near the end:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要做的第一件事是为`User`模型添加一个方法，返回一个`user_id`列表，用于查询帖子。我们称这个方法为`timeline_user_ids`。打开*app/models/user.rb*文件，并在文件末尾添加此方法：
- en: '[PRE28]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `has_many :leaders` association added in [Chapter 8](ch08.html "Chapter 8. Advanced
    Active Record") automatically adds a method called `leader_ids` that returns an
    array of the `id` values of this user’s leaders—or the people whose posts the
    user is following. The `timeline_user_ids` method adds the current user’s `id`
    to the array returned by `leader_ids` and returns the new array ➊, which should
    contain every user you want to display on the timeline.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](ch08.html "第8章. 高级Active Record")中添加的`has_many :leaders`关联会自动添加一个名为`leader_ids`的方法，该方法返回一个包含该用户领导者（即用户关注的人的`id`值）`id`的数组。`timeline_user_ids`方法将当前用户的`id`添加到`leader_ids`返回的数组中，并返回新的数组➊，该数组应包含你想在时间轴上显示的每个用户。
- en: 'Now open *app/controllers/posts_controller.rb* and update the `index` action
    to use this method:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开*app/controllers/posts_controller.rb*并更新`index`动作以使用这个方法：
- en: '[PRE29]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Instead of just fetching every post with `Post.all`, the `index` action first
    obtains the list of `user_ids` returned by `current_user.timeline_user_ids`. It
    then initializes `@posts` to include every post that should be in the timeline
    based on those ids. Also add an `order` clause because timelines are shown in
    reverse chronological order.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 与其直接使用`Post.all`获取所有帖子，`index`动作首先获取`current_user.timeline_user_ids`返回的`user_ids`列表。然后，它初始化`@posts`，包括所有应该出现在时间轴中的帖子，并根据这些id筛选。还需要添加`order`子句，因为时间轴是按逆时间顺序显示的。
- en: Log in to see the `Post index` page in [Figure 9-5](ch09.html#post_index_view_after_login
    "Figure 9-5. The Post index view after login").
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后查看[图9-5](ch09.html#post_index_view_after_login "图9-5. 登录后的Post索引视图")页面。
- en: '![The Post index view after login](httpatomoreillycomsourcenostarchimages2169096.png.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![登录后的Post索引视图](httpatomoreillycomsourcenostarchimages2169096.png.jpg)'
- en: Figure 9-5. The Post index view after login
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-5. 登录后的Post索引视图
- en: Click the Log Out link and confirm that you’re redirected to the Log In page.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 点击注销链接，并确认你被重定向到登录页面。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Your application is really starting to take shape now. You have some pretty
    good-looking styles in place thanks to Bootstrap. Users can now sign up, log in,
    and log out. You can also restrict access to pages based on whether a user is
    authenticated.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用程序现在真的是开始成型了。得益于Bootstrap，你已经有了一些相当不错的样式。用户现在可以注册、登录和注销。你还可以根据用户是否通过身份验证来限制对页面的访问。
- en: You’ve written a lot of code, but so far you’ve only tested it by clicking around
    in the browser. This isn’t too bad when you only have a few actions to test. As
    the number of actions in your application grows, however, this sort of testing
    gets tedious.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你写了很多代码，但到目前为止你只是通过在浏览器中点击来测试它。当你只有少数几个动作需要测试时，这还不算太糟。但随着应用程序中的动作增多，这种测试方式会变得繁琐。
- en: In the next chapter, you’ll learn about automated testing of models and controllers.
    We’ll look at the default test framework already included by Rails, write tests
    for various parts of the application, and learn a little about test-driven development.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何进行模型和控制器的自动化测试。我们将研究Rails自带的默认测试框架，编写针对应用程序各部分的测试，并了解一些关于测试驱动开发的内容。
- en: Exercises
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: '| Q: | 1\. You added a post `show` action and view, but currently you can’t
    get to the page for an individual post without typing in the URL. Use the Rails
    `time_ago_in_words` helper to create a link to the post in the `TextPost` and
    `ImagePost` partials based on the `created_at` field. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 问题： | 1\. 你添加了一个帖子`show`动作和视图，但目前无法通过输入URL访问单个帖子的页面。使用Rails的`time_ago_in_words`助手，在`TextPost`和`ImagePost`部分中，根据`created_at`字段创建一个指向帖子的链接。
    |'
- en: '| Q: | 2\. Add comments to posts. The process is similar to adding comments
    to the blog at the end of [Chapter 5](ch05.html "Chapter 5. Views"). First, update
    the post `show` page at *app/views/posts/show.html.erb* to render a collection
    of comments and a form for adding a new comment at the bottom as shown here:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '| 问题： | 2\. 为帖子添加评论。这个过程与[第5章](ch05.html "第5章. 视图")结束时为博客添加评论类似。首先，更新*app/views/posts/show.html.erb*中的帖子`show`页面，在底部渲染评论集合并显示添加新评论的表单，如下所示：'
- en: '[PRE30]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The form includes the `post_id` of the current post in a hidden field ➊. Next,
    add the `create` action to `CommentsController` at *app/controllers/ comments_controller.rb:*
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 表单包括当前帖子`post_id`的隐藏字段 ➊。接下来，在*app/controllers/comments_controller.rb*中添加`create`动作：|
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Also add the private `comment_params` method to `CommentsController`. In addition
    to the comment `body`, also permit the `post_id` passed in `params`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 还要在`CommentsController`中添加私有的`comment_params`方法。除了评论`body`，还要允许在`params`中传递的`post_id`：|
- en: '[PRE32]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Make sure only authenticated users can access this controller. Finally, create
    the comment partial *app/views/comments/_comment.html.erb*. This partial needs
    to show the name of the user who added the comment and the comment’s body. |
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 确保只有经过身份验证的用户才能访问这个控制器。最后，创建评论部分 *app/views/comments/_comment.html.erb*。这个部分需要显示添加评论的用户的名字以及评论的内容。|
- en: '| Q: | 3\. How secure is the authentication system? Look at the `password_digest`
    field for a `User`. Also, examine the cookie placed on your computer after you
    log in to the application. Can you figure out the data contained in either of
    these? |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| 问：| 3\. 认证系统的安全性如何？查看`password_digest`字段中一个`User`的内容。还要检查你登录应用后放置在电脑上的cookie。你能猜出这两者中包含的数据吗？|'
