- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Table Lookups
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 表查找
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: This chapter discusses how to speed up or reduce the complexity of computations
    by using table lookups. Back in the early days of x86 programming, replacing expensive
    computations with table lookups was a common way to improve program performance.
    Today, memory speeds in modern systems limit performance gains that can be obtained
    by using table lookups. However, for complex calculations, this is still a viable
    technique for writing high-performance code. This chapter demonstrates the space/speed
    trade-offs when using table lookups.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了如何通过使用表查找来加速或减少计算的复杂性。在早期的x86编程中，用表查找替代昂贵的计算是提高程序性能的常用方法。今天，现代系统中的内存速度限制了通过表查找获得的性能提升。然而，对于复杂的计算，这仍然是编写高性能代码的可行技术。本章演示了使用表查找时的空间/速度权衡。
- en: 10.1 Tables
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.1 表
- en: 'To an assembly language programmer, a *table* is an array containing initialized
    values that do not change once created. In assembly language, you can use tables
    for a variety of purposes: computing functions, controlling program flow, or simply
    looking things up. In general, tables provide a fast mechanism for performing
    an operation at the expense of space in your program (the extra space holds the
    tabular data). In this section, we’ll explore some of the many possible uses of
    tables in an assembly language program.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于汇编语言程序员来说，*表*是一个包含初始化值的数组，一旦创建后这些值不会变化。在汇编语言中，你可以使用表进行多种用途：计算函数、控制程序流，或者只是进行查找。一般来说，表提供了一种快速执行操作的机制，代价是程序中的空间（额外的空间用于存储表格数据）。在本节中，我们将探讨表在汇编语言程序中的一些可能用途。
- en: 10.1.1 Function Computation via Table Lookup
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 10.1.1 通过表查找计算函数
- en: A simple-looking high-level-language arithmetic expression can be equivalent
    to a considerable amount of x86-64 assembly language code and, therefore, could
    be expensive to compute. Assembly language programmers often precompute many values
    and use a table lookup of those values to speed up their programs. This has the
    advantage of being easier, and it’s often more efficient as well.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个看似简单的高级语言算术表达式可能等同于相当多的x86-64汇编语言代码，因此可能计算代价很高。汇编语言程序员通常会预先计算许多值，并使用这些值的表查找来加速程序。这种方法的优点是更容易，而且通常效率更高。
- en: 'Consider the following Pascal statement:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下Pascal语句：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This Pascal `if` statement converts the `character` variable’s value from lowercase
    to uppercase if `character` is in the range `a` to `z`. The MASM code that does
    the same thing requires a total of seven machine instructions, as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Pascal的`if`语句将`character`变量的值从小写字母转换为大写字母，如果`character`位于`a`到`z`的范围内。执行相同操作的MASM代码需要七条机器指令，如下所示：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Using a table lookup, however, allows you to reduce this sequence to just four
    instructions:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用表查找可以将这段序列减少到仅四条指令：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `xlat`, or translate, instruction does the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`xlat`，或称翻译指令，执行以下操作：'
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This instruction uses the current value of the AL register as an index into
    the array whose base address is found in RBX. It fetches the byte at that index
    in the array and copies that byte into the AL register. Intel calls this instruction
    *translate* because programmers typically use it to translate characters from
    one form to another by using a lookup table, exactly the way we are using it here.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这条指令使用当前的AL寄存器值作为索引，查找在RBX中找到的数组的基地址。它获取数组中该索引位置的字节，并将该字节复制到AL寄存器中。英特尔称这条指令为*翻译*，因为程序员通常使用它通过查找表将字符从一种形式转换为另一种形式，就像我们在这里使用它一样。
- en: In the previous example, `CnvrtLower` is a 256-byte table that contains the
    values 0 to 60h at indices 0 to 60h, 41h to 5Ah at indices 61h to 7Ah, and 7Bh
    to 0FFh at indices 7Bh to 0FFh. Therefore, if AL contains a value in the range
    0 to 60h or 7Ah to 0FFh, the `xlat` instruction returns the same value, effectively
    leaving AL unchanged. However, if AL contains a value in the range 61h to 7Ah
    (the ASCII codes for a to z), then the `xlat` instruction replaces the value in
    AL with a value in the range 41h to 5Ah (the ASCII codes for A to Z), thereby
    converting lowercase to uppercase.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`CnvrtLower`是一个256字节的表，在0到60h的索引位置存储值0到60h，在61h到7Ah的索引位置存储值41h到5Ah，在7Bh到0FFh的索引位置存储值7Bh到0FFh。因此，如果AL中包含的值位于0到60h或7Ah到0FFh范围内，`xlat`指令返回相同的值，实际上AL保持不变。但是，如果AL中包含的值位于61h到7Ah（即ASCII码a到z的范围），则`xlat`指令会将AL中的值替换为41h到5Ah范围内的值（即ASCII码A到Z的范围），从而将小写字母转换为大写字母。
- en: 'As the complexity of a function increases, the performance benefits of the
    table-lookup method increase dramatically. While you would almost never use a
    lookup table to convert lowercase to uppercase, consider what happens if you want
    to swap cases; for example, via computation:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 随着函数复杂度的增加，查找表方法的性能优势大幅提升。虽然你几乎不会使用查找表将小写字母转换为大写字母，但考虑一下如果你想要交换字母大小写会发生什么；例如，通过计算：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This code has 13 machine instructions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码有13条机器指令。
- en: 'The table-lookup code to compute this same function is as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 计算这个相同函数的查找表代码如下：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, when using a table lookup to compute a function, only the table
    changes; the code remains the same.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，当使用查找表来计算一个函数时，只有表格发生变化；代码保持不变。
- en: 10.1.1.1 Function Domains and Range
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 10.1.1.1 函数的定义域和值域
- en: Functions computed via table lookup have a limited *domain* (the set of possible
    input values they accept), because each element in the domain of a function requires
    an entry in the lookup table. For example, our previous uppercase/lowercase conversion
    functions have the 256-character extended ASCII character set as their domain.
    A function such as `sin` or `cos` accepts the (infinite) set of real numbers as
    possible input values. You won’t find it very practical to implement a function
    via table lookup whose domain is the set of real numbers, because you must limit
    the domain to a small set.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查找表计算的函数具有有限的*定义域*（它们接受的可能输入值的集合），因为函数的定义域中的每个元素都需要在查找表中有一项。例如，我们之前的大小写转换函数，其定义域是256字符的扩展ASCII字符集。像`sin`或`cos`这样的函数接受的是实数集（无限大）作为可能的输入值。你不会发现通过查找表实现一个定义域为实数集的函数很实用，因为你必须将定义域限制为一个较小的集合。
- en: Most lookup tables are quite small, usually 10 to 256 entries. Rarely do lookup
    tables grow beyond 1000 entries. Most programmers don’t have the patience to create
    (and verify the correctness) of a 1000-entry table (though see “Generating Tables”
    on page 590 for a discussion of generating tables programmatically).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数查找表都非常小，通常只有10到256项。查找表很少超过1000项。大多数程序员没有耐心去创建（并验证正确性）一个1000项的查找表（不过，参见第590页的“生成查找表”部分，讨论如何通过编程生成查找表）。
- en: Another limitation of functions based on lookup tables is that the elements
    in the domain must be fairly contiguous. Table lookups use the input value to
    a function as an index into the table, and return the value at that entry in the
    table. A function that accepts values 0, 100, 1000, and 10,000 would require 10,001
    different elements in the lookup table because of the range of input values. Therefore,
    you cannot efficiently create such a function via a table lookup. Throughout this
    section on tables, we’ll assume that the domain of the function is a fairly contiguous
    set of values.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 基于查找表的函数的另一个限制是，定义域中的元素必须相当连续。查找表使用输入值作为查找表的索引，并返回该表项中的值。一个接受0、100、1000和10,000这些值的函数，由于输入值的范围，会需要10,001个不同的元素在查找表中。因此，你无法通过查找表有效地创建这样一个函数。在本节关于查找表的内容中，我们假设函数的定义域是一个相当连续的值集。
- en: The *range* of a function is the set of possible output values it produces.
    From the perspective of a table lookup, a function’s range determines the size
    of each table entry. For example, if a function’s range is the integer values
    0 through 255, then each table entry requires a single byte; if the range is 0
    through 65,535, each table entry requires 2 bytes, and so on.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的*值域*是它产生的所有可能输出值的集合。从查找表的角度来看，函数的值域决定了每个表项的大小。例如，如果函数的值域是整数值0到255，那么每个表项需要一个字节；如果值域是0到65,535，那么每个表项需要2个字节，依此类推。
- en: 'The best functions you can implement via table lookups are those whose domain
    and range are always 0 to 255 (or a subset of this range). Any such function can
    be computed using the same two instructions: `lea rbx, table` and `xlat`. The
    only thing that ever changes is the lookup table. The uppercase/lowercase conversion
    routines presented earlier are good examples of such a function.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查找表实现的最佳函数是那些定义域和值域始终为0到255（或该范围的子集）的函数。任何这样的函数都可以通过相同的两条指令来计算：`lea rbx, table`和`xlat`。唯一改变的只是查找表。之前展示的大小写转换例程就是这样一个好例子。
- en: 'You cannot (conveniently) use the `xlat` instruction to compute a function
    value once the range or domain of the function takes on values outside 0 to 255\.
    There are three situations to consider:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦函数的范围或域超出了0到255，你就不能（方便地）使用`xlat`指令来计算函数值。需要考虑三种情况：
- en: The domain is outside 0 to 255, but the range is within 0 to 255.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 域超出了0到255，但范围在0到255之间。
- en: The domain is inside 0 to 255, but the range is outside 0 to 255.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 域在0到255之间，但范围超出了0到255。
- en: Both the domain and range of the function take on values outside 0 to 255.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数的域和范围都超出了0到255。
- en: We will consider these cases in the following sections.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中考虑这些情况。
- en: 10.1.1.2 Domain Outside 0 to 255, Range Within 0 to 255
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 10.1.1.2 域超出0到255，范围在0到255之间
- en: If the domain of a function is outside 0 to 255, but the range of the function
    falls within this set of values, our lookup table will require more than 256 entries,
    but we can represent each entry with a single byte. Therefore, the lookup table
    can be an array of bytes. Other than those lookups that can use the `xlat` instruction,
    functions falling into this class are the most efficient. The following Pascal
    function invocation
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个函数的域超出了0到255，但函数的范围落在该值集内，我们的查找表将需要超过256个条目，但每个条目可以用一个字节表示。因此，查找表可以是一个字节数组。除了那些可以使用`xlat`指令的查找，属于此类别的函数是最有效的。以下的Pascal函数调用
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: where `Func` is
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`Func`是
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'is easily converted to the following MASM code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 可以很容易地转换为以下的MASM代码：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This code loads the function parameter into RDX, uses this value (in the range
    0 to ??) as an index into the `FuncTable` table, fetches the byte at that location,
    and stores the result into `B`. Obviously, the table must contain a valid entry
    for each possible value of `X`. For example, suppose you wanted to map a cursor
    position on an 80×25 text-based video display in the range 0 to 1999 (there are
    2000 character positions on an 80×25 video display) to its `X` (0 to 79) or `Y`
    (0 to 24) coordinate on the screen. You could compute the `X` coordinate via the
    function
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将函数参数加载到RDX寄存器中，使用该值（范围为0到??）作为索引访问`FuncTable`表，提取该位置的字节，并将结果存储到`B`中。显然，表中必须包含每个可能的`X`值的有效条目。例如，假设你想将一个80×25文本视频显示器上的光标位置（范围为0到1999，80×25显示器上有2000个字符位置）映射到屏幕上的`X`（0到79）或`Y`（0到24）坐标。你可以通过以下函数计算`X`坐标
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: and the `Y` coordinate with the formula
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 和`Y`坐标通过公式
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '(where `Posn` is the cursor position on the screen). This can be computed using
    this x86-64 code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: （其中`Posn`是屏幕上的光标位置）。这可以通过以下x86-64代码计算：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'However, the `div` instruction on the x86-64 is very slow. If you need to do
    this computation for every character you write to the screen, you will seriously
    degrade the speed of your video-display code. The following code, which realizes
    these two functions via table lookup, may improve the performance of your code
    considerably:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，x86-64上的`div`指令非常慢。如果你需要对每个写入屏幕的字符进行此计算，将严重降低视频显示代码的速度。以下代码通过表查找实现这两个功能，可能会显著提高代码的性能：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Keep in mind that loading a value into ECX automatically zero-extends that value
    into RCX. Therefore, the `movzx` instruction in this code sequence actually zero-extends
    `Posn` into RCX, not just ECX.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，将值加载到ECX寄存器中会自动将该值零扩展到RCX寄存器。因此，这段代码中的`movzx`指令实际上会将`Posn`零扩展到RCX，而不仅仅是ECX。
- en: 'If you’re willing to live with the limitations of the `LARGEADDRESSAWARE:NO`
    linking option (see “Large Address Unaware Applications” in Chapter 3), you can
    simplify this code somewhat:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意接受`LARGEADDRESSAWARE:NO`链接选项的限制（请参见第3章中的《大地址不可知应用程序》），你可以稍微简化这段代码：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 10.1.1.3 Domain in 0 to 255 and Range Outside 0 to 255, or Both Outside 0 to
    255
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 10.1.1.3 域在0到255之间，范围超出0到255，或两者都超出0到255
- en: If the domain of a function is within 0 to 255, but the range is outside this
    set, the lookup table will contain 256 or fewer entries, but each entry will require
    2 or more bytes. If both the range and domains of the function are outside 0 to
    255, each entry will require 2 or more bytes and the table will contain more than
    256 entries.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个函数的域在0到255之间，但范围超出了这个范围，查找表将包含256个或更少的条目，但每个条目将需要2个或更多字节。如果函数的范围和域都超出了0到255，那么每个条目将需要2个或更多字节，且表将包含超过256个条目。
- en: 'Recall from Chapter 4 that the formula for indexing into a single-dimensional
    array (of which a `table` is a special case) is as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾第4章，索引一个一维数组（其中`table`是一个特例）的公式如下：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If elements in the range of the function require 2 bytes, you must multiply
    the index by 2 before indexing into the table. Likewise, if each entry requires
    3, 4, or more bytes, the index must be multiplied by the size of each table entry
    before being used as an index into the table. For example, suppose you have a
    function, `F(``x``)`, defined by the following (pseudo) Pascal declaration:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数的值域中的元素需要2个字节，那么在索引表格之前，必须将索引乘以2。同样，如果每个条目需要3、4或更多字节，则必须将索引乘以每个表项的大小，然后才能作为索引使用。例如，假设你有一个由以下（伪）Pascal声明定义的函数，`F(``x``)`：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can create this function by using the following x86-64 code (and, of course,
    the appropriate table named `F`):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下x86-64代码创建此函数（当然，还需要适当命名的表`F`）：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If you can live with the limitations of `LARGEADDRESSAWARE:NO`, you can reduce
    this as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你可以接受`LARGEADDRESSAWARE:NO`的限制，你可以按如下方式减少：
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Any function whose domain is small and mostly contiguous is a good candidate
    for computation via table lookup. In some cases, noncontiguous domains are acceptable
    as well, as long as the domain can be coerced into an appropriate set of values
    (an example you’ve already seen is processing `switch` statement expressions).
    Such operations, called *conditioning*, are the subject of the next section.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 任何域较小且大多数是连续的函数都是通过表查找计算的良好候选。某些情况下，非连续的域也是可以接受的，只要可以将域强制转换为适当的值集（你已经看到的一个例子是处理`switch`语句表达式）。这种操作称为*条件化*，是下一节的主题。
- en: 10.1.1.4 Domain Conditioning
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 10.1.1.4 域条件化
- en: '*Domain conditioning* is taking a set of values in the domain of a function
    and massaging them so that they are more acceptable as inputs to that function.
    Consider the following function:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*域条件化*是指对函数域中的一组值进行处理，使其更容易作为该函数的输入。考虑以下函数：'
- en: '[PRE18]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This says that the (computer) function `sin(``x``)` is equivalent to the (mathematical)
    function sin *x* where
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着（计算机）函数`sin(``x``)`等价于（数学）函数sin *x*，其中
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As we know, sine is a circular function, which will accept any real-value input.
    The formula used to compute sine, however, accepts only a small set of these values.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，正弦是一个圆形函数，它可以接受任何实数输入。然而，用于计算正弦的公式只接受这一小部分值。
- en: 'This range limitation doesn’t present any real problems; by simply computing
    `sin(``x` `mod (2 * pi))`, we can compute the sine of any input value. Modifying
    an input value so that we can easily compute a function is called *conditioning
    the input*. In the preceding example, we computed `x` `mod 2 * pi` and used the
    result as the input to the `sin` function. This truncates `x` to the domain `sin`
    needs without affecting the result. We can apply input conditioning to table lookups
    as well. In fact, scaling the index to handle word entries is a form of input
    conditioning. Consider the following Pascal function:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这种范围限制不会带来任何实际问题；只需计算`sin(``x`` mod (2 * pi))`，我们就可以计算任何输入值的正弦。修改输入值以便能够轻松计算函数的过程称为*输入条件化*。在前面的例子中，我们计算了`x`
    `mod 2 * pi`并将结果作为`sin`函数的输入。这将`x`截断到`sin`所需的域，而不会影响结果。我们也可以将输入条件化应用于表查找。事实上，将索引缩放以处理字节条目就是一种输入条件化。考虑以下Pascal函数：
- en: '[PRE20]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This function computes a value for `x` in the range 0 to 4 and returns 0 if
    `x` is outside this range. Since `x` can take on 65,536 different values (being
    a 16-bit word), creating a table containing 65,536 words where only the first
    five entries are nonzero seems to be quite wasteful. However, we can still compute
    this function by using a table lookup if we use input conditioning. The following
    assembly language code presents this principle:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数计算0到4范围内的`x`的值，如果`x`超出此范围，则返回0。由于`x`可以取65,536个不同的值（是16位字），创建一个包含65,536个字的表，其中只有前五个条目非零，似乎是相当浪费的。然而，如果我们使用输入条件化，我们仍然可以通过表查找计算这个函数。以下汇编语言代码展示了这一原理：
- en: '[PRE21]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This code checks to see if `x` ``is outside the range 0 to 4\. If so, it manually
    sets AX to 0; otherwise, it looks up the function value through the `val` table.
    With input conditioning, you can implement several functions that would otherwise
    be impractical to do via table lookup.``
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码检查`x`是否超出了0到4的范围。如果是，它会手动将AX设置为0；否则，它会通过`val`表查找函数值。通过输入条件化，你可以实现一些通过表查找否则难以实现的函数。
- en: '[PRE22]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
