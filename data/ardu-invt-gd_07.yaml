- en: 6 Balance Beam
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6 平衡梁
- en: In this project, you’ll build a desktop balance beam game using a turn knob
    and a servo motor (a small motor capable of making precise movements). The aim
    of the game is to roll a ball back and forth along the beam without it falling
    off. You’ll do this by using the turn knob to control the position of the servo.
    As the servo moves, so will the beam! Ready to get started?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用旋转旋钮和舵机电机（能够进行精确运动的小型电机）构建一个桌面平衡梁游戏。游戏的目标是让小球在梁上来回滚动，而不掉下去。你将通过旋转旋钮来控制舵机的位置。舵机移动时，梁也会随之移动！准备好开始了吗？
- en: '[Figure 6-1](ch06.xhtml#ch06fig01) shows the finished project. This is a simple
    mechanism that is made entirely of cardboard and a few household materials.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[图6-1](ch06.xhtml#ch06fig01)显示了完成的项目。这是一个完全由纸板和一些家庭材料制成的简单机制。'
- en: '**FIGURE 6-1:** The finished Balance Beam project'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-1：** 完成的平衡梁项目'
- en: '![Image](../images/fig6_1.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig6_1.jpg)'
- en: '**MATERIALS TO GATHER**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**收集材料**'
- en: 'The circuit for this project uses relatively few parts, though we will introduce
    two new pieces of hardware: the servo motor and the potentiometer. Take a look
    at the electronic parts and other materials you’ll need, shown in [Figures 6-2](ch06.xhtml#ch06fig02)
    through [6-4](ch06.xhtml#ch06fig04).'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目的电路使用的零件相对较少，不过我们将介绍两种新的硬件：舵机电机和电位器。请查看[图6-2](ch06.xhtml#ch06fig02)至[6-4](ch06.xhtml#ch06fig04)中展示的电子零件和其他材料。
- en: '**Electronic Parts**'
  id: totrans-7
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**电子零件**'
- en: • One SparkFun RedBoard (DEV-13975), Arduino Uno (DEV-11021), or any other Arduino-compatible
    board
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个SparkFun RedBoard (DEV-13975)、Arduino Uno (DEV-11021) 或任何其他兼容的Arduino板
- en: • One USB Mini-B cable (CAB-11301 or your board’s USB cable; not shown)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: • 一根USB Mini-B电缆（CAB-11301或你板子的USB电缆；未显示）
- en: • One solderless breadboard (PRT-12002)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个无焊面包板（PRT-12002）
- en: • One 10 kΩ potentiometer (COM-09806)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个10 kΩ电位器（COM-09806）
- en: • One submicro size servo motor (ROB-09065)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个微型舵机电机（ROB-09065）
- en: • Male-to-male jumper wires (PRT-11026)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: • 公对公跳线（PRT-11026）
- en: '**NOTE**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*All of the parts used in this project are standard in the SparkFun Inventor’s
    Kit.*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*本项目中使用的所有零件均为SparkFun发明者套件中的标准配件。*'
- en: '**FIGURE 6-2:** Components for the Balance Beam'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-2：** 平衡梁的组件'
- en: '![Image](../images/fig6_2.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig6_2.jpg)'
- en: '**Other Materials and Tools**'
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**其他材料和工具**'
- en: • Pencil or marker
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: • 铅笔或马克笔
- en: • Craft knife
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: • 工艺刀
- en: • Metal ruler
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: • 金属直尺
- en: • Needle-nose pliers
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: • 钳形钳
- en: • Wire cutters
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: • 线切割钳
- en: • Glue (hot glue gun or craft glue)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: • 胶水（热熔胶枪或工艺胶水）
- en: • Mini screwdriver
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: • 微型螺丝刀
- en: • Scissors (not shown)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: • 剪刀（未显示）
- en: • (Optional) Drill and 1/4-inch, 1/8-inch, and 1/16-inch bits
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: • （可选）电钻以及1/4英寸、1/8英寸和1/16英寸钻头
- en: • Two sheets of cardboard (roughly 8.5 × 11 inches in size)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: • 两张纸板（大约8.5 × 11英寸）
- en: • Balance Beam template (see [Figure 6-16](ch06.xhtml#ch06fig16) on page [167](ch06.xhtml#page_167))
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: • 平衡梁模板（请参见[图6-16](ch06.xhtml#ch06fig16)在[第167页](ch06.xhtml#page_167)）
- en: • One bamboo skewer
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: • 一根竹签
- en: • One small drinking straw (the bamboo skewer should fit into the straw loosely)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: • 一根小饮料吸管（竹签应该能够松松地插入吸管中）
- en: • One ping-pong ball
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个乒乓球
- en: • One medium-size paper clip
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个中型回形针
- en: '**FIGURE 6-3:** Recommended building materials'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-3：** 推荐的建筑材料'
- en: '![Image](../images/fig6_3.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig6_3.jpg)'
- en: '**FIGURE 6-4:** Recommended tools'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-4：** 推荐工具'
- en: '![Image](../images/fig6_4.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig6_4.jpg)'
- en: '**NEW COMPONENTS**'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**新组件**'
- en: In the previous projects, you’ve mostly used your Arduino to control LEDs, but
    now it’s time to branch out and explore other components. This project introduces
    a new sensor, called a *potentiometer*, and motors, specifically the *servo motor*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的项目中，你主要使用Arduino来控制LED，但现在是时候拓展并探索其他组件了。本项目介绍了一种新的传感器，叫做*电位器*，以及电机，特别是*舵机电机*。
- en: '**The Potentiometer**'
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**电位器**'
- en: In this project, you’ll use a potentiometer to control the movement of the Balance
    Beam. A potentiometer is a kind of sensor known as a *variable resistor*, which
    just means it’s a resistor whose value can vary.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用电位器来控制平衡梁的运动。电位器是一种被称为*可变电阻*的传感器，这意味着它是一个电阻器，其值可以变化。
- en: A potentiometer generally has three legs or connection points and is represented
    by the symbol shown in [Figure 6-5](ch06.xhtml#ch06fig05).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一个电位器通常有三个接脚或连接点，并由[图6-5](ch06.xhtml#ch06fig05)所示的符号表示。
- en: '**FIGURE 6-5:** Schematic diagram for a potentiometer'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-5：** 电位器的电路图'
- en: '![Image](../images/fig6_5.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig6_5.jpg)'
- en: Potentiometers come in many shapes and sizes, a few of which are shown in [Figure
    6-6](ch06.xhtml#ch06fig06). Some look like turn knobs, some are sliders, and others
    require a small screwdriver to manipulate. Regardless of their appearance, they
    all work in the same way. And they are all around you—at home, you might find
    them in the dimmer switch of your dining room light, in the volume knob on your
    stereo, or inside devices like DVD players.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 电位器有多种形状和尺寸，部分如[图6-6](ch06.xhtml#ch06fig06)所示。有些看起来像旋钮，有些是滑块，还有一些需要小螺丝刀来调节。无论它们的外观如何，它们的工作原理都是一样的。而且它们无处不在——在家里，你可能会在餐厅灯的调光开关、立体声音响的音量旋钮或DVD播放器等设备中找到它们。
- en: '**FIGURE 6-6:** Various shapes and sizes of potentiometers. We’ll be using
    the one on the left.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-6：** 各种形状和尺寸的电位器。我们将使用左侧的那个。'
- en: '![Image](../images/fig6_6.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6_6.jpg)'
- en: A potentiometer has a fixed resistance between the two opposite legs marked
    A and B in [Figure 6-7](ch06.xhtml#ch06fig07). Potentiometers can come in all
    sorts of resistance values, but for this project you’ll use a 10 kΩ potentiometer.
    As you turn the knob or move the slider, the third leg of the potentiometer (marked
    C), called the *wiper*, moves up or down the resistor, and the resistance between
    B and C changes. It’s this resistance value that’s applied to the circuit.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一个电位器在[图6-7](ch06.xhtml#ch06fig07)中标记为A和B的两条对面脚之间具有固定的电阻值。电位器有各种电阻值，但在这个项目中，你将使用一个10
    kΩ的电位器。当你转动旋钮或移动滑块时，电位器的第三条脚（标记为C），称为*刮臂*，会在电阻器上向上或向下移动，B和C之间的电阻值会发生变化。正是这个电阻值被应用到电路中。
- en: If you turn the knob clockwise, the wiper moves toward A and the resistance
    between C and B increases; if you turn the knob counterclockwise, the wiper moves
    toward B and the resistance decreases. [Figure 6-7](ch06.xhtml#ch06fig07) shows
    how moving the wiper affects the resistance.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你顺时针转动旋钮，刮臂会向A移动，C和B之间的电阻增加；如果你逆时针转动旋钮，刮臂会向B移动，电阻减小。[图6-7](ch06.xhtml#ch06fig07)展示了刮臂移动如何影响电阻。
- en: '**FIGURE 6-7:** Various positions on a potentiometer'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-7：** 电位器的各种位置'
- en: '![Image](../images/fig6_7.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6_7.jpg)'
- en: If you connect A to 5 V, B to GND, and C to an analog input pin on your Arduino,
    this circuit starts to resemble the voltage divider you used in [Project 5](ch05.xhtml#ch05).
    As you turn the knob, you can vary the voltage on C between 0 V and 5 V. This
    setup is also sometimes called an *adjustable voltage divider.*
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将A接到5V，B接到GND，将C接到Arduino的模拟输入引脚，那么这个电路就开始类似于你在[项目5](ch05.xhtml#ch05)中使用的电压分压器。当你转动旋钮时，你可以调节C端的电压，范围在0V和5V之间。这种设置有时也被称为*可调电压分压器*。
- en: '**The Servo Motor**'
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**伺服电机**'
- en: A servo motor (or just *servo* for short) is a special type of motor designed
    to rotate an arm (or *horn*) to a particular angle, which you will determine in
    your sketch. Most servo motors have a given range of 180 degrees, though some
    can rotate a full 360 degrees; these are called *continuous rotation servos*.
    In this project, you’ll be using a standard 180-degree hobby servo, shown in [Figure
    6-8](ch06.xhtml#ch06fig08).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 伺服电机（简称*伺服*）是一种特殊类型的电机，旨在将一个臂（或*角度控制器*）旋转到一个特定角度，这个角度你将在草图中确定。大多数伺服电机的旋转范围为180度，但有些可以旋转360度；这些称为*连续旋转伺服电机*。在这个项目中，你将使用一个标准的180度爱好者伺服电机，如[图6-8](ch06.xhtml#ch06fig08)所示。
- en: '**FIGURE 6-8:** A standard hobby servo'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-8：** 标准爱好者伺服电机'
- en: '![Image](../images/fig6_8.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6_8.jpg)'
- en: Servo motors are used in thousands of different products, from model cars and
    airplanes to the speedometer in your car and the robotic arms that built it.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 伺服电机广泛应用于成千上万种不同的产品，从模型车和飞机到你车上的速度计，再到制造它的机器人手臂。
- en: What’s inside that black box? We opened one up so you don’t have to—see [Figure
    6-9](ch06.xhtml#ch06fig09).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 黑色盒子里是什么？我们已经打开了一个，省得你自己动手——见[图6-9](ch06.xhtml#ch06fig09)。
- en: '**FIGURE 6-9:** The inside of a servo motor'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-9：** 伺服电机内部结构'
- en: '![Image](../images/fig6_9.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6_9.jpg)'
- en: 'Inside a servo are three main parts: the motor, gear train, and control circuit.
    When voltage is applied to the motor, it turns the gear train, which turns the
    hub of the servo motor. The rotational position of the hub is controlled by the
    control circuit. Part of the gear train is a potentiometer that rotates as the
    motor rotates. Remember that a potentiometer is a simple sensor that changes resistance
    based on how much it rotates, and when it’s connected up as an adjustable voltage
    divider, the voltage varies as the potentiometer rotates. The control circuit
    reads both the value in the input signal coming into the servo (from the Arduino,
    in this case) and the potentiometer value and compares them. When the two values
    are equal, the motor stops and holds its position.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在伺服电机内部，有三个主要部件：电机、齿轮传动和控制电路。当电压施加到电机上时，它会驱动齿轮传动，从而转动伺服电机的转轴。转轴的旋转位置由控制电路控制。齿轮传动的一部分是电位器，它随着电机的旋转而旋转。记住，电位器是一个简单的传感器，根据旋转的多少来改变电阻，当它作为可调电压分压器连接时，电压会随着电位器的旋转而变化。控制电路读取输入信号（此时来自
    Arduino）和电位器值，并对比它们。当两个值相等时，电机停止并保持其位置。
- en: A servo motor relies on PWM, a concept we introduced in “[Create More Colors
    with `analogWrite()`](ch05.xhtml#ch05lev1sec6)” on page [138](ch05.xhtml#page_138).
    To control the position of a servo, the Arduino sends out a PWM signal that pulses
    every 20 ms. The width of the pulse corresponds to a specific rotational position
    for the servo motor. [Figure 6-10](ch06.xhtml#ch06fig10) illustrates this by showing
    the minimum PWM pulse widths for 0 degrees of a servo, the midpoint of 90 degrees,
    and the maximum of 180 degrees. Similar to blinking an LED, you can use the Arduino
    to create a very short pulse that is on for 1 ms and off for 19 ms to move the
    servo to an angle of 0 degrees.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一个伺服电机依赖于 PWM，这是我们在 “[使用 `analogWrite()` 创建更多颜色](ch05.xhtml#ch05lev1sec6)” 中介绍的一个概念，见第
    [138](ch05.xhtml#page_138) 页。为了控制伺服电机的位置，Arduino 会发出每 20 毫秒脉冲一次的 PWM 信号。脉冲的宽度对应于伺服电机的特定旋转位置。[图
    6-10](ch06.xhtml#ch06fig10) 通过显示伺服电机 0 度、90 度的中点和 180 度最大位置的最小 PWM 脉冲宽度来说明这一点。类似于闪烁
    LED，你可以使用 Arduino 创建一个非常短的脉冲，持续 1 毫秒开，19 毫秒关，将伺服电机移动到 0 度的角度。
- en: '**FIGURE 6-10:** The PWM duty cycles for the standard range of a servo'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-10：** 标准伺服电机范围的 PWM 占空比'
- en: '![Image](../images/fig6_10.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig6_10.jpg)'
- en: 'To set the angle of a servo motor to 0 degrees, you could use code like the
    following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要将伺服电机的角度设置为 0 度，你可以使用如下代码：
- en: '[PRE0]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This code drives pin 9 `HIGH` for 1 ms, and then immediately sets the pin `LOW`
    for 19 ms. As soon as the 19 ms are over, it has to drive the pin `HIGH` again
    for 1 ms to maintain the timing cycle. If your code is busy managing timing like
    this, you can’t add anything else to it without affecting the timing of the pulses
    and control of the servo. Thankfully, the Arduino has a trick to simplify the
    way you control the servo motor: using a *library*. A library is a file containing
    extra code that you can use with your sketch to perform specific tasks or make
    it easier to use particular parts. The Servo library handles all of the pulse
    timing needed to drive the servo motor to a specific angle.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将引脚 9 设置为 `HIGH` 持续 1 毫秒，然后立即将引脚设置为 `LOW` 持续 19 毫秒。一旦 19 毫秒过去，它需要再次将引脚设置为
    `HIGH` 持续 1 毫秒，以维持定时周期。如果你的代码忙于管理像这样的定时，你就无法在不影响脉冲的定时和伺服控制的情况下添加任何其他内容。幸运的是，Arduino
    有一个简便的技巧来简化伺服电机的控制方式：使用一个*库*。库是一个包含额外代码的文件，你可以将其与草图一起使用，以执行特定任务或更方便地使用某些部件。Servo
    库处理了所有驱动伺服电机到特定角度所需的脉冲定时。
- en: In this project, you’ll be using the Arduino to move a balance beam based on
    the voltage output of a sensor—your potentiometer. The code will use the voltage
    reading of the sensor to set the appropriate pulse width length for a given rotation
    for the servo, which will determine the angle of the beam.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用 Arduino 根据传感器——你的电位器——的电压输出来移动一个平衡梁。代码将使用传感器的电压读数来设置伺服电机在给定旋转角度下的脉冲宽度，从而决定梁的角度。
- en: The good news is that the Arduino, and more specifically the Servo library,
    does all of the hard work for you! It is great to understand how the pulse width
    controls the position of the servo, but, in the end, the software takes care of
    it for you.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，Arduino，特别是 Servo 库，已经为你完成了所有的繁重工作！了解脉冲宽度如何控制伺服电机的位置是很有意义的，但最终，软件会为你处理这些。
- en: '**BUILD THE BALANCE BEAM PROTOTYPE**'
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建平衡梁原型**'
- en: Now that you know the theory, you’ll build the circuit for the Balance Beam.
    You’ll start by connecting the servo, and then you’ll add a potentiometer; [Figure
    6-11](ch06.xhtml#ch06fig11) shows the full circuit.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您了解了理论部分，接下来您将构建平衡梁的电路。您将从连接伺服电机开始，然后添加可变电阻器；[图 6-11](ch06.xhtml#ch06fig11)展示了完整的电路。
- en: 'Notice that the servo has a single three-pin female header. To connect this
    to your circuit, you’ll need to use male-to-male jumper wires. Take three short
    male-to-male jumper wires and connect these to the female pins, as shown in [Figure
    6-12](ch06.xhtml#ch06fig12). It’s good practice to use the colors that correspond
    to the servo wires to make it easier to see which is which: black, red, and white
    represent the ground, power, and signal lines, respectively. Now, hook the servo
    up to the Arduino.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，伺服电机有一个三针母头。为了将其连接到电路，您需要使用母对母跳线。取三根短的母对母跳线，将它们连接到母针，如[图 6-12](ch06.xhtml#ch06fig12)所示。为了方便区分各个引脚，可以使用与伺服电机线缆颜色相对应的跳线：黑色、红色和白色分别代表地线、电源线和信号线。现在，将伺服电机连接到
    Arduino。
- en: '**FIGURE 6-11:** Balance Beam prototype circuit'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-11：** 平衡梁原型电路'
- en: '![Image](../images/fig6_11.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig6_11.jpg)'
- en: '**FIGURE 6-12:** Adding male-to-male jumper wire extensions to the servo motor'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-12：** 向伺服电机添加母对母跳线延长线'
- en: '![Image](../images/fig6_12.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig6_12.jpg)'
- en: 'The circuit connection is pretty simple: connect 5 V and GND from the Arduino
    to the power rails on the left side of the breadboard. Connect the servo’s ground
    (black) wire to the ground rail on the breadboard and the power (red) wire to
    the 5 V rail. Connect the signal wire directly to pin 9 on the Arduino. A complete
    diagram is shown in [Figure 6-13](ch06.xhtml#ch06fig13).'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 电路连接非常简单：将 Arduino 的 5 V 和 GND 连接到面包板左侧的电源轨道。将伺服电机的地线（黑色）连接到面包板的地线轨道，电源线（红色）连接到
    5 V 轨道。将信号线直接连接到 Arduino 的 9 号引脚。完整的电路图请参见[图 6-13](ch06.xhtml#ch06fig13)。
- en: '**FIGURE 6-13:** Servo hooked up to signal, power, and ground'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-13：** 伺服电机连接到信号、电源和地线'
- en: '![Image](../images/fig6_13.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig6_13.jpg)'
- en: Finally, add the servo *horn* onto the hub of the servo. Horns are different-shaped
    arms for a servo that rotate with the hub to make it easier to use and attach
    things to the servo. At this point, select any one of the horns that come with
    the servo, and press-fit it onto the hub of the servo, as shown in [Figure 6-14](ch06.xhtml#ch06fig14).
    You will add a specific horn later, but for now we just want to make it easier
    to see rotation.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将伺服电机的*旋钮*安装到伺服电机的中心轴上。旋钮是伺服电机的不同形状的臂，与中心轴一起旋转，使得使用和安装物品更加方便。此时，选择伺服电机附带的任意一个旋钮，并将其按压安装到伺服电机的中心轴上，如[图
    6-14](ch06.xhtml#ch06fig14)所示。稍后您会安装特定的旋钮，但现在我们只需要让旋转更容易看到。
- en: '**FIGURE 6-14:** Press-fitting a servo horn from the included options'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-14：** 按压安装伺服电机的旋钮（来自附带选项）'
- en: '![Image](../images/fig6_14.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig6_14.jpg)'
- en: If the servo starts moving or acting erratically, simply disconnect its black
    wire from the ground rail to stop it. It’s good safety practice to keep the black
    wire disconnected until you upload code.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果伺服电机开始移动或表现异常，只需将其黑色线缆从地线轨道中断开即可停止伺服电机。为了安全起见，在上传代码之前，最好保持黑色线缆断开。
- en: Now, wire up the potentiometer. The breadboard has plenty of room, so place
    the potentiometer anywhere you like, making sure each leg is in its own row. Connect
    the two outside pins to the 5 V and ground rails, with the center pin connected
    to analog input pin A0 directly on the Arduino, as shown in [Figure 6-15](ch06.xhtml#ch06fig15).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，接入可变电阻器。面包板上有足够的空间，您可以将可变电阻器放置在任何位置，确保每个引脚都在自己的行中。将两侧的引脚连接到 5 V 和地线轨道，中央引脚直接连接到
    Arduino 的模拟输入引脚 A0，如[图 6-15](ch06.xhtml#ch06fig15)所示。
- en: '**FIGURE 6-15:** The full Balance Beam circuit'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-15：** 完整的平衡梁电路'
- en: '![Image](../images/fig6_15.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig6_15.jpg)'
- en: At the moment, you just have a servo connected to a potentiometer. To give the
    project its balancing powers, you need to program it.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您只连接了一个伺服电机和一个可变电阻器。为了赋予项目平衡的功能，您需要编写程序。
- en: '**PROGRAM THE BALANCE BEAM**'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程平衡梁**'
- en: To use the servo with an Arduino, you need to use the Servo library— which,
    as mentioned earlier, is a collection of prewritten code that expands the commands
    and capabilities of the code in your sketch. It gives you more features and functions
    to work with and simplifies using external hardware with your Arduino. For example,
    the Servo library includes code that attaches the servo to a specific Arduino
    pin, moves the servo to specific angles, and even detaches the servo from a pin.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Arduino 上使用伺服电机，你需要使用 Servo 库——正如前面提到的，这是一个预先编写的代码集合，扩展了你草图中代码的命令和功能。它为你提供了更多的功能和特性，简化了使用外部硬件与
    Arduino 进行交互。例如，Servo 库包括将伺服电机连接到特定 Arduino 引脚的代码，将伺服电机移动到特定角度，甚至从引脚上断开伺服电机。
- en: Before you program the full project, you’ll upload a quick test sketch to check
    that your servo is working correctly.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在你编写完整项目之前，你可以上传一个快速测试草图，检查你的伺服电机是否正常工作。
- en: '**Test the Servo**'
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**测试伺服电机**'
- en: 'Here’s a simple example sketch for controlling your servo. Start a new sketch
    by selecting **File ▸ New**, and then enter the sketch in [Listing 6-1](ch06.xhtml#ch06ex01):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个控制伺服电机的简单示例草图。通过选择 **文件 ▸ 新建** 来开始一个新的草图，然后在 [Listing 6-1](ch06.xhtml#ch06ex01)
    中输入草图：
- en: '**LISTING 6-1:** A servo “Hello world”'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 6-1:** 一个伺服电机的“Hello world”'
- en: '[PRE1]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To use the Servo library, call `#include<Servo.h>` ➊, which tells the Arduino
    to include the *Servo.h* file containing the Servo library code. This adds the
    functions and definitions of the library to the sketch. Notice that this is one
    of the rare instances where there isn’t a semicolon at the end of the line. In
    Arduino programming, the `#` symbol indicates that the following code is a *preprocessor
    directive*, a special piece of code that should be executed before the rest of
    the sketch. When you compile a sketch, the first thing that runs is the *preprocessor*,
    which searches for any lines that start with a `#` symbol and don’t end with the
    semicolon and runs those lines first. The `#include` directive tells the preprocessor
    to include all of the code in the named file before compiling the code in your
    sketch.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Servo 库，首先调用 `#include<Servo.h>` ➊，这告诉 Arduino 包含包含 Servo 库代码的*Servo.h*
    文件。这将库的功能和定义添加到草图中。请注意，这是少数几个没有在行尾加分号的情况之一。在 Arduino 编程中，`#` 符号表示接下来的代码是*预处理指令*，这是一段特殊的代码，应该在草图的其余部分执行之前先执行。当你编译一个草图时，首先运行的是*预处理器*，它会查找所有以
    `#` 符号开头并且没有分号结尾的行，并首先执行这些行。`#include` 指令告诉预处理器在编译草图中的代码之前包含命名文件中的所有代码。
- en: You can also use the drop-down menu to add a library by selecting **Sketch ▸
    Include Library…** and then selecting the library you want to use (in this case,
    **Servo**). This will automatically add the `#include` statement to your sketch.
    This option is great if you can’t remember the precise syntax of the `#include`
    command or the library name—for example, when you use a library for the first
    time.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用下拉菜单通过选择 **草图 ▸ 引入库...** 来添加一个库，然后选择你想使用的库（在这个例子中是 **Servo**）。这将自动将 `#include`
    语句添加到你的草图中。如果你不记得 `#include` 命令或库名称的确切语法，这个选项非常有用——例如，当你第一次使用某个库时。
- en: The library allows you to create a type of data structure called an *object*.
    An object is simply a container for variables and functions that are predefined.
    Functions that are associated with the object are referred to as *methods*. In
    this sketch, the line `Servo myServo;` creates a new `Servo` object named `myServo`
    ➋.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 该库允许你创建一种名为*对象*的数据结构。对象只是一个包含预定义变量和函数的容器。与对象关联的函数被称为*方法*。在这个草图中，`Servo myServo;`
    这一行创建了一个名为 `myServo` 的新的 `Servo` 对象 ➋。
- en: You can give an object any name you like, but we recommend using a descriptive
    name, like `myServo`, so it’s recognizable. Now you can use that name to reference
    all the servo commands that are available to you in the Servo library. For example,
    the method `myServo.attach()` tells the Arduino which pin the servo is attached
    to. If you had multiple servos, each one would get a unique name so that you could
    control all of them independently.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以给对象取任何你喜欢的名字，但我们建议使用具有描述性的名称，如 `myServo`，这样更容易识别。现在，你可以使用这个名字来引用 Servo 库中所有可用的伺服电机命令。例如，方法
    `myServo.attach()` 告诉 Arduino 伺服电机连接到哪个引脚。如果你有多个伺服电机，每个电机都会有一个唯一的名称，这样你就可以独立控制它们。
- en: As an example, think of a robot arm that moves at the shoulder, elbow, and wrist,
    using a servo for each joint. The code for it would create three `Servo` objects
    named `shoulderServo`, `elbowServo`, and `wristServo` so that you could position
    each one accurately and at a different orientation from the others. Each one of
    those `Servo` objects would have its own set of methods that you could use separately.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，想象一个机器人臂，它在肩部、肘部和手腕处使用伺服电机。它的代码会创建三个 `Servo` 对象，分别命名为 `shoulderServo`、`elbowServo`
    和 `wristServo`，这样你就可以精确地定位每个关节，并使它们的角度不同。每个 `Servo` 对象都有自己的一组方法，可以单独使用。
- en: For the Balance Beam, you’ll use only one servo. The setup of the sketch tells
    the Arduino that you have a servo attached to pin 9 with the method `myServo.attach(9)`
    ➌. It then tells the Arduino to move the servo to a position of 90 degrees via
    the method `myServo.write(90)` ➍. The Servo library converts the angle in degrees
    of rotation to the appropriate pulse width behind the scenes. This is built into
    the `write()` method.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于平衡梁，你只需要使用一个伺服电机。草图的设置告诉 Arduino，你在 9 号引脚上连接了一个伺服电机，方法是 `myServo.attach(9)`
    ➌。然后它会告诉 Arduino 将伺服电机移动到 90 度的位置，方法是 `myServo.write(90)` ➍。伺服库会在后台将旋转的角度转换为适当的脉冲宽度。这是
    `write()` 方法内置的功能。
- en: Now, plug the black wire of your servo into ground and upload your code to the
    Arduino, and the servo will rotate to 90 degrees. It’s safe for now to leave your
    servo wired up.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将伺服电机的黑色线接入地线，并将代码上传到 Arduino，伺服电机将旋转至 90 度。此时将伺服电机连接好是安全的。
- en: '**NOTE**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Although the servo’s full range of motion is 180 degrees, we recommend keeping
    the* *`write()`* *value between 10 and 170 degrees, especially for servos with
    plastic gears. Overextending a servo’s range can do irreparable damage.*'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*尽管伺服电机的运动范围为 180 度，我们建议将* *`write()`* *的值保持在 10 至 170 度之间，特别是对于塑料齿轮的伺服电机。过度拉伸伺服电机的范围可能会造成无法修复的损害。*'
- en: To move the servo again, just pass another number within the bounds of the servo’s
    range of motion (10–170) to the `write()` method and upload the sketch again.
    Play with your servo for a bit, passing in different values.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要再次移动伺服电机，只需将伺服电机运动范围内的另一个数字（10–170）传递给 `write()` 方法，并重新上传草图。稍微玩一下伺服电机，传递不同的数值。
- en: Okay, so you know how to get the servo to move just once. Now, here’s some code
    that really gets it moving. [Listing 6-2](ch06.xhtml#ch06ex02) moves the control
    of the servo into a loop and repeats a motion.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，你现在知道如何让伺服电机只动一次了。现在，下面的代码让它开始真正地动起来。[列表 6-2](ch06.xhtml#ch06ex02)将伺服电机的控制放入一个循环中，并重复动作。
- en: '**LISTING 6-2:** Servo blink sketch'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 6-2：** 伺服电机闪烁草图'
- en: '[PRE2]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This piece of code is a servo version of the blink sketch from [Project 1](ch01.xhtml#ch01).
    The servo moves to 10 degrees, waits for 1 second, moves to 170 degrees, waits
    for 1 second, and then repeats. We fondly refer to this as “robot march,” because
    when you have 20+ people doing it at once, it sounds like a robot army marching
    to take over the world.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码是[项目 1](ch01.xhtml#ch01)中的闪烁草图的伺服电机版本。伺服电机先移动到 10 度，等待 1 秒钟，再移动到 170 度，等待
    1 秒钟，然后重复这个过程。我们亲切地称之为“机器人行军”，因为当你有 20 多个人同时做这个动作时，它听起来像是一支机器人军队在行进，准备征服世界。
- en: Wow! You’re on a roll here. But servos really become interesting when you can
    control the servo yourself, without having to reprogram it each time. It’s time
    to get the potentiometer involved.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！你真的进展很快。伺服电机变得更有趣的是，当你能够自己控制伺服电机，而无需每次重新编程它时。现在，是时候让电位器参与进来了。
- en: '**Complete the Balance Beam Sketch**'
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**完成平衡梁草图**'
- en: 'For the final sketch, you’ll program the potentiometer to control the rotation
    of the servo. Modify your sketch as shown in [Listing 6-3](ch06.xhtml#ch06ex03):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最终的草图，你将编程电位器来控制伺服电机的旋转。按照 [列表 6-3](ch06.xhtml#ch06ex03) 所示修改你的草图：
- en: '**LISTING 6-3:** Using the `map()` function to control a servo with a potentiometer'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 6-3：** 使用 `map()` 函数通过电位器控制伺服电机'
- en: '[PRE3]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This sketch reads the value of the potentiometer, translates it into an angle
    value, and then writes that value to the servo. There are some new commands in
    here, so we’ll go over it step-by-step.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图读取电位器的值，将其转换为角度值，然后将该值写入伺服电机。这里有一些新的命令，我们将一步一步地讲解。
- en: The top portion of this code looks just like the first two example listings.
    It includes the Servo library and creates a `Servo` object named `myServo`. It
    also declares two global variables ➊ named `potVal` and `anglePosition`. These
    variables will be used to store the raw value of the potentiometer and a calculated
    angle position for the servo, respectively.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的顶部部分与前两个例子列表非常相似。它包含了Servo库并创建了一个名为`myServo`的`Servo`对象。它还声明了两个全局变量➊，分别是`potVal`和`anglePosition`。这些变量将用于分别存储电位器的原始值和计算得出的伺服电机角度位置。
- en: In the `loop()` function, the variable `potVal` stores the raw analog-to-digital
    converter value from the `analogRead(A0)` function. As you turn the knob on the
    potentiometer, the voltage on the wiper pin will vary between 0 V and 5 V. Remember
    that `analogRead()` will convert a voltage from 0 V to 5 V to a number between
    0 and 1,023\. However, the values 0 to 1,023 aren’t very useful for controlling
    the servo. As we mentioned before, the servo needs to stay between 10 and 170
    degrees.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在`loop()`函数中，变量`potVal`存储来自`analogRead(A0)`函数的原始模拟到数字转换值。当你旋转电位器上的旋钮时，擦拭脚的电压会在0V到5V之间变化。记住，`analogRead()`会将0V到5V的电压转换为0到1,023之间的数字。然而，0到1,023的数值对于控制伺服电机并不十分有用。正如我们之前提到的，伺服电机需要保持在10到170度之间。
- en: 'Thankfully, Arduino has a built-in `map()` function that allows you to take
    one range of numbers and find the equivalent value in a different range. The variable
    `anglePosition` stores an angle position that is calculated from `potVal` using
    the `map()` function ➋. The `map()` function uses five parameters: `map(input,
    fromLow, fromHigh, toLow, toHigh)`. In this example, it maps the value of `potVal`
    from the range of 0 to 1,023 to a new range of 10 to 170\. This is a really nifty
    function in Arduino that makes scaling and translating between value ranges super
    easy!'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Arduino有一个内置的`map()`函数，允许你将一个数值范围映射到另一个范围。变量`anglePosition`存储一个角度位置，这个位置是通过`map()`函数从`potVal`计算得出的➋。`map()`函数使用五个参数：`map(input,
    fromLow, fromHigh, toLow, toHigh)`。在这个例子中，它将`potVal`的值从0到1,023的范围映射到10到170的新范围。这是Arduino中一个非常方便的函数，使得数值范围的缩放和转换变得非常简单！
- en: The sketch also adds a short delay of 20 ms to give the servo enough time to
    move before it reads the potentiometer again. A 20 ms delay is the minimum delay
    that the servo needs. You may also recall that it’s the time period of the PWM
    signal that’s used to control the angle.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图还增加了一个短暂的20毫秒延迟，给伺服电机足够的时间移动，然后再读取电位器的值。20毫秒的延迟是伺服电机所需的最小延迟。你可能还记得，它是用来控制角度的PWM信号的时间周期。
- en: Once you have this sketch updated, upload it to your Arduino. Now when you turn
    the potentiometer, the servo moves with it. Pretty sweet! Next you’ll take your
    newfound superpower and build a balancing game out of it.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你更新了这个草图，将其上传到你的Arduino。现在，当你旋转电位器时，伺服电机会随着它一起移动。非常酷！接下来，你将利用你刚获得的超能力，基于它构建一个平衡游戏。
- en: '**BUILD THE BALANCE BEAM**'
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**制作平衡木**'
- en: With this cool way to control a servo, we thought it would be fun to create
    a desktop game. You’ll create a balance beam that you control using the potentiometer
    and servo. A ping-pong ball will roll on the balance beam, and your goal is to
    get the ball as close as possible to the ends of the beam without it falling off.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种控制伺服电机的酷方法，我们认为创建一个桌面游戏会非常有趣。你将创建一个平衡木，并通过电位器和伺服电机来控制它。一个乒乓球会在平衡木上滚动，而你的目标是让乒乓球尽可能靠近平衡木的两端而不掉下来。
- en: '**Cut Out the Parts**'
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**剪裁各部分**'
- en: Download the template provided at *[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*
    (shown in [Figure 6-16](ch06.xhtml#ch06fig16)), print it out, and then trace it
    onto your cardboard. We designed this project to fit on as small a piece of cardboard
    as we could.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 下载提供的模板，地址是 *[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*（如[图6-16](ch06.xhtml#ch06fig16)所示），打印出来，然后将其描摹到你的纸板上。我们设计这个项目时，尽量将它缩小到尽可能小的纸板上。
- en: '**FIGURE 6-16:** Balance Beam frame template (not full size)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-16：** 平衡木框架模板（非全尺寸）'
- en: '![Image](../images/fig6_16.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig6_16.jpg)'
- en: Using a craft knife, cut all the solid lines along the perimeter of each shape,
    as well as the cut-out for the motor mount. Don’t score any of the pieces just
    yet; you’ll do that as you go along. Remember to exercise safety when cutting.
    Use a metal ruler and a sharp craft knife, as shown in [Figure 6-17](ch06.xhtml#ch06fig17),
    and take your time. Use a drill or a craft knife to make the six different holes
    in this design. If you’re using a drill, you’ll need a 1/4-inch drill bit for
    the screwdriver access hole, a 1/8-inch drill bit for the axle holes, and a 1/16-inch
    drill bit for the armature mount hole and the two motor mount holes.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 使用工艺刀沿每个形状的周边线切割所有实线，以及电机支架的切割线。现在不要刻划任何部件；你将在后续过程中逐步进行。记住在切割时要注意安全。使用金属尺和锋利的工艺刀，如[图
    6-17](ch06.xhtml#ch06fig17)所示，并且要慢慢进行。使用钻机或工艺刀制作设计中六个不同的孔。如果使用钻机，你将需要一个 1/4 英寸的钻头来打入螺丝刀的通道孔，一个
    1/8 英寸的钻头来打入轴孔，和一个 1/16 英寸的钻头来打入支架安装孔和两个电机安装孔。
- en: '**FIGURE 6-17:** Cutting out the frame pieces from the template'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-17：** 从模板中裁剪框架部件'
- en: '![Image](../images/fig6_17.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6_17.jpg)'
- en: Once you’ve finished cutting, you should have six pieces like those shown in
    [Figure 6-18](ch06.xhtml#ch06fig18).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 完成切割后，你应该会得到六个像[图 6-18](ch06.xhtml#ch06fig18)中所示的部件。
- en: '**FIGURE 6-18:** All cardboard parts cut out'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-18：** 所有纸板部件已裁剪'
- en: '![Image](../images/fig6_18.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6_18.jpg)'
- en: '**Build the Beam**'
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**制作梁**'
- en: Take the longest piece, which will be the actual beam, and carefully score the
    dotted line that runs along its length. This will allow you to curve the beam
    so that it cradles the ball. We designed the template so that the beam is 11 inches
    long, the length of a standard sheet of 8.5 × 11-inch paper.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 取最长的一块，它将作为实际的梁，并小心地在其长度上沿虚线刻划。这将使你能够弯曲梁，使其托住球体。我们设计了这个模板，使得梁的长度为 11 英寸，等于标准
    8.5 × 11 英寸纸张的长度。
- en: Next, prepare the armature mount. This is a small trapezoidal piece about 2
    1/4 inches wide by 1 inch tall. You will use this piece to connect the servo motor
    to the beam. Score it and bend it into a right angle, as shown in [Figure 6-19](ch06.xhtml#ch06fig19).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，准备支架安装。这是一个小的梯形纸片，宽约 2 1/4 英寸，高 1 英寸。你将使用这块纸片将伺服电机连接到梁上。沿着它刻划并将其弯成直角，如[图
    6-19](ch06.xhtml#ch06fig19)所示。
- en: '**FIGURE 6-19:** Preparing the armature mount'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-19：** 准备支架安装'
- en: '![Image](../images/fig6_19.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6_19.jpg)'
- en: Next, cut down the drinking straw so that it’s 1 3/4 inches long, and glue it
    down along the center line of the beam, as shown in [Figure 6-20](ch06.xhtml#ch06fig20).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，剪短吸管，使其长度为 1 3/4 英寸，并将其粘在梁的中心线上，如[图 6-20](ch06.xhtml#ch06fig20)所示。
- en: '**FIGURE 6-20:** Gluing down the straw at the midpoint of the beam'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-20：** 将吸管粘在梁的中点'
- en: '![Image](../images/fig6_20.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6_20.jpg)'
- en: Now, glue down the half of the armature mount without the drilled hole. This
    goes just to the left of the drinking straw, as shown in [Figure 6-21](ch06.xhtml#ch06fig21);
    make sure the half with the hole is facing you when the straw is at the right.
    This is important so that it fits with the servo mounting arm.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将没有钻孔的支架安装半部粘在吸管旁边，如[图 6-21](ch06.xhtml#ch06fig21)所示；确保带孔的那一半面朝向你，当吸管在右侧时。这个位置很重要，以便它能与伺服电机的安装臂配合。
- en: '**FIGURE 6-21:** Gluing the armature mount to the beam'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-21：** 将支架安装到梁上'
- en: '![Image](../images/fig6_21.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6_21.jpg)'
- en: Next, bend the sides of the beam up to form a cradle that will hold the ball,
    as shown in [Figure 6-22](ch06.xhtml#ch06fig22).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将梁的两侧弯起，形成一个托住球体的摇篮，如[图 6-22](ch06.xhtml#ch06fig22)所示。
- en: '**FIGURE 6-22:** Bending the sides of the beam to form a cradle'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-22：** 弯曲梁的两侧以形成摇篮'
- en: '![Image](../images/fig6_22.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6_22.jpg)'
- en: Use the smaller trapezoidal pieces to secure the ends of the beam and hold the
    beam together to keep the shape of the cradle. We suggest using a hot glue gun
    so that the pieces are secure, like in [Figure 6-23](ch06.xhtml#ch06fig23).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 使用较小的梯形纸片来固定梁的两端，并将梁固定在一起，以保持摇篮的形状。我们建议使用热熔胶枪，这样部件就能牢固地固定，正如在[图 6-23](ch06.xhtml#ch06fig23)中所示。
- en: '**FIGURE 6-23:** Gluing the end pieces onto the beam'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-23：** 将端部件粘贴到梁上'
- en: '![Image](../images/fig6_23.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6_23.jpg)'
- en: Next, use the wire cutters to cut down the bamboo skewer to about 3 1/4 inches.
    We suggest using the blunt end of the skewer. Insert the bamboo skewer into the
    drinking straw to form the axle for the balance beam ([Figure 6-24](ch06.xhtml#ch06fig24)).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用剪线钳将竹签剪成大约 3 1/4 英寸长。我们建议使用竹签的钝端。将竹签插入饮料吸管中，形成平衡梁的轴心（如[图 6-24](ch06.xhtml#ch06fig24)所示）。
- en: '**FIGURE 6-24:** Positioning the cut bamboo skewer so that it sticks out evenly
    on both sides'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-24：** 将剪好的竹签定位，使其两侧均匀突出'
- en: '![Image](../images/fig6_24.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6_24.jpg)'
- en: '**Build the Base and Attach the Servo**'
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**构建底座并安装伺服电机**'
- en: Now you’ll build the base of the balance beam. Score the sides of the base pieces,
    as shown in [Figure 6-25](ch06.xhtml#ch06fig25), so that you can bend them into
    shape.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将开始制作平衡梁的底座。按照[图 6-25](ch06.xhtml#ch06fig25)所示，打槽以便将底座部件弯曲成形。
- en: '**FIGURE 6-25:** Scoring the sides of the base pieces'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-25：** 打槽底座部件的两侧'
- en: '![Image](../images/fig6_25.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6_25.jpg)'
- en: After scoring, bend the sides to form a U shape as shown in [Figure 6-26](ch06.xhtml#ch06fig26).
    Repeat this for both pieces.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在打槽后，将两侧弯曲形成 U 形，如[图 6-26](ch06.xhtml#ch06fig26)所示。对两个部件重复此操作。
- en: '**FIGURE 6-26:** Bending the sides'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-26：** 弯曲底座部件的两侧'
- en: '![Image](../images/fig6_26.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6_26.jpg)'
- en: Before gluing together the base, you’ll mount the servo motor. Remove the servo
    motor from the breadboard circuit. There is a small, square cutout in one of the
    templates that should match the submicro-sized servo perfectly. Insert the servo
    so that the motor is facing inward, as shown in [Figure 6-27](ch06.xhtml#ch06fig27).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在将底座粘合之前，你需要先安装伺服电机。将伺服电机从面包板电路中取出。模板中有一个小的方形切口，应该刚好适合超小型伺服电机。将伺服电机插入，使电机面朝内，如[图
    6-27](ch06.xhtml#ch06fig27)所示。
- en: '**FIGURE 6-27:** Inserting the servo motor'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-27：** 插入伺服电机'
- en: '![Image](../images/fig6_27.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6_27.jpg)'
- en: Your servo should have come with three small screws, one short and the other
    two longer. Use the two longer screws to secure the servo motor in place, like
    in [Figure 6-28](ch06.xhtml#ch06fig28). If you don’t have screws, you can also
    use a small amount of hot glue to secure the motor.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 你的伺服电机应附带三颗小螺丝，其中一颗较短，另外两颗较长。使用两颗较长的螺丝将伺服电机固定在位，如[图 6-28](ch06.xhtml#ch06fig28)所示。如果没有螺丝，你也可以使用少量热熔胶来固定电机。
- en: '**FIGURE 6-28:** Securing the servo motor in place using the two longer screws'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-28：** 使用两颗较长的螺丝将伺服电机固定到位'
- en: '![Image](../images/fig6_28.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6_28.jpg)'
- en: Now, select a servo horn that’s about 0.5 inches long and single sided. Gently
    push this into place on the end of the servo motor, as shown in [Figure 6-29](ch06.xhtml#ch06fig29).
    Once you have it securely on the servo, orient the servo to 0 degrees. Gently
    rotate the servo counterclockwise with your fingers until it stops. You’ll hear
    the little gears inside the servo turn. Make sure that you move the servo slowly;
    the gears are often made of plastic and can break.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，选择一个约 0.5 英寸长的单面伺服电机齿轮。轻轻地将其推入伺服电机的末端，如[图 6-29](ch06.xhtml#ch06fig29)所示。确保它已经牢固安装在伺服电机上，然后将伺服电机调整到
    0 度。用手指轻轻地将伺服电机逆时针旋转，直到停止。你会听到伺服电机内的小齿轮转动。确保慢慢移动伺服电机；齿轮通常是塑料制的，可能会破裂。
- en: '**FIGURE 6-29:** Attaching the single-sided servo horn'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-29：** 安装单面伺服电机齿轮'
- en: '![Image](../images/fig6_29.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6_29.jpg)'
- en: With the servo horn rotated as far as it can go counterclockwise, remove the
    horn and reposition it so that it is pointed straight up, as shown in [Figure
    6-30](ch06.xhtml#ch06fig30). This will make it easier to connect the linkage to
    the beam.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当伺服电机齿轮旋转到最大逆时针位置时，取下齿轮并重新安装，使其朝上，如[图 6-30](ch06.xhtml#ch06fig30)所示。这将使连接连杆到梁上变得更容易。
- en: '**FIGURE 6-30:** Servo horn aligned at 0 degrees'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-30：** 将伺服电机齿轮调整到 0 度位置'
- en: '![Image](../images/fig6_30.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6_30.jpg)'
- en: Finally, secure the horn in place using the last small screw that comes with
    the servo to ensure that the horn does not accidentally pop out. The horn may
    turn as you tighten the screw. This is okay—it won’t damage anything, but you
    may want to hold the servo horn in place with your fingers when tightening the
    screw to keep the horn from rotating. If you lost the screw, it’s not a big deal;
    you can leave it out and just reattach the horn if it does slip out. If you have
    to reposition the servo arm, you’ll need to remove this screw, which is why we
    included a hole on the other side of the base template.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用伺服电机附带的最后一颗小螺丝将号角固定到位，以确保号角不会意外弹出。拧紧螺丝时，号角可能会旋转。没关系——这不会损坏任何部件，但你可能希望在拧紧螺丝时用手指固定号角，以防止号角旋转。如果你丢失了螺丝，也不用担心；你可以不使用螺丝，若号角滑出，只需重新安装即可。如果需要重新定位伺服电机臂，你需要拆下这颗螺丝，这也是为什么我们在底座模板的另一侧加了一个孔。
- en: Next, you need a linkage to connect the servo horn to the beam. To make this,
    you’ll shape a medium-size paper clip with a pair of needle-nose pliers. [Figure
    6-31](ch06.xhtml#ch06fig31) shows all the steps of this process.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要一个联动装置，将伺服电机号角与梁连接起来。为此，你需要使用一把尖嘴钳将一只中等大小的回形针弯曲成型。[图6-31](ch06.xhtml#ch06fig31)展示了整个过程的步骤。
- en: '**FIGURE 6-31:** The steps to cutting, bending, and shaping the servo linkage'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-31：** 切割、弯曲和塑形伺服电机联动的步骤'
- en: '![Image](../images/fig6_31.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig6_31.jpg)'
- en: '**1.** Use the pliers to straighten the paper clip out, leaving all but the
    small hook on one end.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**1.** 使用钳子将回形针拉直，保持一端的小钩子。'
- en: '**2.** Trim the paper clip down so that it is about 2 inches long from one
    end to the other.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**2.** 将回形针修剪至大约2英寸长。'
- en: '**3.** Bend the straight end of the paper clip away from the hook at about
    1 1/2 inches from the hooked end.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**3.** 将回形针的一端从钩子处大约1 1/2英寸的位置弯开。'
- en: '**4.** Add the final bend to create another hook about 3/8 inches deep. When
    complete, the servo linkage should be about 1 1/2 inches long ([Figure 6-32](ch06.xhtml#ch06fig32)).
    This length is perfect given the geometry of our template. If you’re designing
    your own enclosure, you might have to play around with this length a bit to get
    the servo horn connected to the beam properly.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**4.** 进行最后的弯曲，形成一个大约3/8英寸深的小钩子。完成后，伺服电机联动的长度应约为1 1/2英寸（[图6-32](ch06.xhtml#ch06fig32)）。考虑到我们模板的几何形状，这个长度刚好合适。如果你设计的是自己的外壳，可能需要稍微调整这个长度，以确保伺服电机号角能正确连接到梁上。'
- en: '**FIGURE 6-32:** Final bend in the paper clip linkage'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-32：** 回形针联动的最终弯曲'
- en: '![Image](../images/fig6_32.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig6_32.jpg)'
- en: '**Final Assembly**'
  id: totrans-181
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**最终组装**'
- en: Now for the final assembly! First, glue together the two base pieces. Glue two
    of the square tabs together, starting with the side opposite the servo motor ([Figures
    6-33](ch06.xhtml#ch06fig33) and [6-34](ch06.xhtml#ch06fig34)). This will give
    you room to get your hands in there and connect the servo horn linkage.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是最后的组装步骤！首先，将两块底座粘合在一起。将两个方形卡片的两端粘合，先从与伺服电机相对的侧面开始（[图6-33](ch06.xhtml#ch06fig33)和[6-34](ch06.xhtml#ch06fig34)）。这样你就可以腾出空间将手放入并连接伺服电机号角的联动装置。
- en: '**FIGURE 6-33:** The best way to adhere two pieces together is to use a snake
    or S-shaped pattern with the glue.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-33：** 最好的粘接两件物品的方法是使用蛇形或S形胶水图案。'
- en: '![Image](../images/fig6_33.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig6_33.jpg)'
- en: '**FIGURE 6-34:** Secure the far side of the base first.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-34：** 首先固定底座的远端。'
- en: '![Image](../images/fig6_34.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig6_34.jpg)'
- en: With the servo side open, take the original hooked end of the bent paper clip
    linkage and hook it through the last hole on the servo horn, as shown in [Figure
    6-35](ch06.xhtml#ch06fig35).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在伺服电机一侧保持开放，拿起弯曲回形针的原始钩端，将其钩入伺服电机号角的最后一个孔，如[图6-35](ch06.xhtml#ch06fig35)所示。
- en: '**FIGURE 6-35:** Hooking the paper clip through the last hole in the servo
    horn'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-35：** 将回形针挂过伺服电机号角的最后一个孔'
- en: '![Image](../images/fig6_35.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig6_35.jpg)'
- en: '**FOUR-BAR LINKAGES AND CONNECTING SERVOS TO DO COOL THINGS**'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**四连杆联动与将伺服电机连接至完成任务**'
- en: 'The mechanism used to turn the rotational movement of the servo horn into the
    up-and-down movement of the balance beam is called a *four-bar linkage*. We designed
    this template so that the length of the linkage should be about 1 1/2 inches,
    and it assumes that the servo horn is 1/2 inch long. We used these measurements
    to calculate the movements of the servo and beam. If you’re picturing circles,
    arcs, pivot points, and a lot of crazy geometry, don’t worry: we’ve done all the
    hard stuff already. The following figure shows a four-bar linkage in action, with
    the linkage itself and the pivot of the beam highlighted.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 将伺服电机旋转运动转化为平衡梁上下运动的机制叫做*四杆联动*。我们设计了这个模板，使联动的长度大约为1 1/2英寸，并假设伺服电机的转盘长度为1/2英寸。我们使用这些测量值来计算伺服电机和梁的运动。如果你脑海中浮现出圆圈、弧线、支点以及大量复杂的几何形状，不用担心：我们已经完成了所有的复杂部分。下图展示了四杆联动的工作原理，其中联动和梁的支点被突出显示。
- en: '![Image](../images/177fig01.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/177fig01.jpg)'
- en: Four-bar linkages are an amazing way of converting the rotation of an object
    (like the servo) into a different motion (like the up-and-down motion of the beam).
    Engineers and roboticists use these kinds of mechanisms and linkages all the time
    to make things move.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 四杆联动是将物体的旋转运动（例如伺服电机的旋转）转换为不同运动（如梁的上下运动）的一种神奇方式。工程师和机器人专家经常使用这些机制和联动来让物体移动。
- en: Hook the other end of the linkage through the hole in the armature mount, as
    shown in [Figure 6-36](ch06.xhtml#ch06fig36).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 将联动装置的另一端通过电枢支架上的孔挂入，如[图6-36](ch06.xhtml#ch06fig36)所示。
- en: '**FIGURE 6-36:** Hooking the other end of the paper clip linkage to the armature
    mount'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-36：** 将回形针联动的另一端挂到电枢支架上'
- en: '![Image](../images/fig6_36.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6_36.jpg)'
- en: Now, insert the axle through one side of the base, carefully line up the second
    side, insert the axle through the matching hole, and glue the tabs at the other
    end of the base together ([Figures 6-37](ch06.xhtml#ch06fig37) and [6-38](ch06.xhtml#ch06fig38)).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将轴插入底座的一侧，小心地对齐另一侧，插入轴并通过匹配的孔，然后将底座另一端的标签粘合在一起（[图6-37](ch06.xhtml#ch06fig37)
    和 [6-38](ch06.xhtml#ch06fig38)）。
- en: '**FIGURE 6-37:** Mounting the balance beam to the base'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-37：** 将平衡梁安装到底座上'
- en: '![Image](../images/fig6_37.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6_37.jpg)'
- en: '**FIGURE 6-38:** Completed Balance Beam project'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-38：** 完成的平衡梁项目'
- en: '![Image](../images/fig6_38.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6_38.jpg)'
- en: Finally, connect the servo motor back to the breadboard circuit ([Figure 6-39](ch06.xhtml#ch06fig39)).
    Power up your Arduino, and the servo motor should move into place. Turn the potentiometer
    and test to make sure that the linkage and the pivot points all move as expected.
    If they don’t, check that everything is still in place and nothing has fallen
    out.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将伺服电机重新连接到面包板电路中（[图6-39](ch06.xhtml#ch06fig39)）。给Arduino供电，伺服电机应自动调整到正确的位置。旋转电位器并进行测试，确保联动和支点都按预期移动。如果没有，检查所有组件是否仍在原位，并确保没有掉落任何部件。
- en: As a final step, we suggest an extra rectangular base support piece. The base
    should measure about 2 × 3.75 inches. Insert this piece at the base of your enclosure
    to add extra support.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后一步，我们建议添加一个额外的矩形底座支撑件。底座应大约为2 × 3.75英寸。将这块支撑件插入你的外壳底部，以增加额外的支撑。
- en: '**FIGURE 6-39:** Reconnecting the servo motor to the breadboard circuit'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-39：** 将伺服电机重新连接到面包板电路'
- en: '![Image](../images/fig6_39.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig6_39.jpg)'
- en: With that, your project is complete! Now, find a ping-pong ball or marble and
    test your skills of control and precision. You now have a game to play when you
    should be doing something a little more productive. How many times can you roll
    the ball back and forth before dropping it? Challenge a friend, and see who’s
    better!
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，你的项目已经完成！现在，找一个乒乓球或弹珠，测试你的控制和精度技能。你现在有了一个游戏，当你应该做一些更有生产力的事情时，可以玩一玩。你能在不掉落的情况下将球来回滚动多少次？挑战一个朋友，看看谁更厉害！
- en: '**GOING FURTHER**'
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步探索**'
- en: This project is a great introduction to the world of servos and libraries in
    Arduino. There’s a lot of potential here, so we would like to share some launching
    points for you to play with servos.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目是了解Arduino中伺服电机和库的一个很好的入门。这里有很大的潜力，我们希望分享一些起点，供你玩转伺服电机。
- en: '**Hack**'
  id: totrans-209
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**黑客**'
- en: Swap out the potentiometer with the light sensor circuit from [Project 5](ch05.xhtml#ch05).
    You’ll have to include a 10 kΩ resistor and adjust the scaling values you use.
    Now, move your hand up and down above the light sensor to control the ball. Go
    challenge a friend! Are you better with the light sensor or the potentiometer?
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 将电位器替换为来自[项目5](ch05.xhtml#ch05)的光传感器电路。你需要添加一个10 kΩ电阻，并调整你使用的缩放值。现在，把手上下移动在光传感器上方来控制球的运动。去挑战一下你的朋友吧！你是更擅长使用光传感器还是电位器呢？
- en: '**Modify**'
  id: totrans-211
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**修改**'
- en: You can add an “autopilot” mode for your Balance Beam that will balance the
    ball on its own. To do this, you’re going to add a switch to your circuit. As
    you saw in [Project 5](ch05.xhtml#ch05), a switch is similar to a push button
    in that it makes or breaks a connection in a circuit, but in a switch the connection
    stays in place until it is switched again. The switch you’ll use is called a *single-pole,
    double-throw (SPDT)* switch, shown in [Figure 6-40](ch06.xhtml#ch06fig40). This
    is a fancy way of saying there’s a single common pin and two options that it can
    be connected to. When the switch is in the leftmost position, it connects the
    center pin and the left pin. When the switch is in the rightmost position, it
    connects the center pin and the right pin.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为你的平衡梁添加一个“自动驾驶”模式，让它自动平衡球。为此，你需要在电路中添加一个开关。正如你在[项目5](ch05.xhtml#ch05)中看到的，开关类似于按钮，能够在电路中接通或断开连接，但在开关中，连接会保持不变，直到再次切换。你将使用的开关称为*单刀双掷（SPDT）*开关，如[图6-40](ch06.xhtml#ch06fig40)所示。这是一个专业术语，意味着有一个公共引脚和两个可以连接的选项。当开关处于最左边位置时，它连接中心引脚和左边引脚；当开关处于最右边位置时，它连接中心引脚和右边引脚。
- en: '**FIGURE 6-40:** The single-pole, double-throw switch'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-40：** 单刀双掷开关'
- en: '![Image](../images/fig6_40.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig6_40.jpg)'
- en: This switch, when wired correctly, will act as an on-off switch, allowing you
    to read whether it is set on 5 V or ground. Place the switch in the breadboard,
    making sure each leg gets its own row of holes. We placed ours at the top of the
    breadboard in [Figure 6-41](ch06.xhtml#ch06fig41). As with the potentiometer,
    connect the two outer pins of the switch to the 5 V and ground power rails of
    the breadboard using two shorter jumper wires. Use a third jumper wire to connect
    the center pin of the switch to pin 12 of the Arduino. A complete diagram of this
    circuit is shown in [Figure 6-41](ch06.xhtml#ch06fig41).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 当正确接线时，这个开关将充当开关，允许你读取它是设置为5V还是接地。将开关放置在面包板上，确保每个引脚都有自己的接孔。我们将开关放置在面包板的顶部，如[图6-41](ch06.xhtml#ch06fig41)所示。与电位器相似，使用两根较短的跳线将开关的两个外侧引脚连接到面包板的5V和接地电源轨。使用第三根跳线将开关的中心引脚连接到Arduino的第12引脚。该电路的完整示意图见[图6-41](ch06.xhtml#ch06fig41)。
- en: '**FIGURE 6-41:** The final circuit with the mode selection switch'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-41：** 带有模式选择开关的最终电路'
- en: '![Image](../images/fig6_41.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig6_41.jpg)'
- en: The center pin is the signal pin and will read either `HIGH` or `LOW` depending
    on the position of the switch. You’ll use this paired with some basic logic to
    switch between manual control, which uses the potentiometer, and autopilot, which
    sets the servo to move back and forth on its own.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 中心引脚是信号引脚，会根据开关的位置读取`HIGH`或`LOW`。你将使用这个信号引脚与一些基本逻辑配合，切换手动控制（使用电位器）和自动驾驶（使舵机自行前后移动）模式。
- en: From the book’s resources at *[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*,
    upload the *P6_AutoBalanceBeam.ino* sketch to your Arduino. Take a look at the
    comments in the sketch to see how it works.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 从本书的资源网站*[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*下载并上传*P6_AutoBalanceBeam.ino*草图到你的Arduino。查看草图中的注释，了解它是如何工作的。
- en: 'Remember that if the beam’s not centered when you switch autopilot on, the
    ball will likely fall off. It may take a few tries, but when you get it, it looks
    like magic! Take a look at a video of ours running here: *[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，如果在切换自动驾驶模式时光束没有居中，球很可能会掉下来。可能需要尝试几次，但当你成功时，它看起来就像魔法一样！看看我们的视频，展示了这里运行的情况：[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)。
