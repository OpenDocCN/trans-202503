- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: 2D Graphics and Animation
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 2D图形与动画
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: 'Sketch 27: Saving an Image and Adjusting Transparency'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图27：保存图像并调整透明度
- en: 'We are going to write a sketch that will allow the user to select a color in
    an image that will become transparent, and then save the image as a GIF. We can
    save any `PImage` in a file, just as most image files can be read into a `PImage`.
    If `img` is a `PImage` variable, we can save it as a file using this function
    call:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写一个草图，让用户选择图像中的一个颜色使其变为透明，然后将图像保存为GIF格式。我们可以将任何`PImage`保存为文件，就像大多数图像文件可以被读入`PImage`一样。如果`img`是一个`PImage`变量，我们可以通过以下函数调用将其保存为文件：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The parameter is the name of the file to be created. In the situation above,
    it will create a file named *image.jpg* and save the pixels of the `PImage` in
    JPEG format. The format is conveniently determined by the last three letters of
    the filename: *.jpg* for a JPEG file, *.gif* for a GIF file, *.png* for a PNG
    file, and so on. If no `PImage` variable is given, Processing saves the image
    that appears in the sketch window.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 参数是要创建的文件名。在上面的情况下，它将创建一个名为*image.jpg*的文件，并将`PImage`的像素以JPEG格式保存。文件格式由文件名的最后三个字母方便地确定：*.jpg*表示JPEG文件，*.gif*表示GIF文件，*.png*表示PNG文件，等等。如果没有给定`PImage`变量，Processing将保存出现在草图窗口中的图像。
- en: For this sketch, the first step is to read and display the image. Next, we position
    the mouse over a pixel with the color we want to make transparent, and click the
    button. Finally, we save the image in a format that allows transparency (GIF).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个草图，第一步是读取并显示图像。接下来，我们将鼠标放置在一个我们希望透明的像素上，然后点击按钮。最后，我们将图像保存为支持透明的格式（GIF）。
- en: In Sketch 2 I mentioned transparent colors. We can set a fourth color component,
    referred to as alpha, to a value between 0 (completely transparent) and 255 (completely
    opaque), as long as the `PImage` color format allows transparency; the format
    that does this is `ARGB`. In this sketch, when the image is read in, we make a
    copy as in the previous sketch, but using `ARGB` as the color format. When we
    click the mouse button, the program looks at the pixel at the cursor’s coordinates
    and adds an alpha value of 0 to the color coordinates. Then the color in the `PImage`
    is updated with the new alpha value.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在草图2中，我提到了透明颜色。我们可以设置第四个颜色分量，称为alpha，它的值在0（完全透明）和255（完全不透明）之间，只要`PImage`颜色格式允许透明；支持透明的格式是`ARGB`。在这个草图中，当图像被读取时，我们像之前的草图那样制作一个副本，但使用`ARGB`作为颜色格式。当我们点击鼠标按钮时，程序查看光标坐标处的像素，并将透明度值0添加到颜色坐标中。然后，`PImage`中的颜色会更新为新的透明度值。
- en: 'The original image that we read from the file is a variable named `img1`; the
    copy that includes alpha values is `img2`. Processing makes a copy of the image
    using the following statement, as we do at 2:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从文件中读取的原始图像是一个名为`img1`的变量；包括alpha值的副本是`img2`。Processing使用以下语句制作图像的副本，正如我们在步骤2中所做的那样：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This creates an empty image of the correct size, and now we must copy all of
    the pixels from `img1` into `img2`. When we do so, the pixels in `img2` have the
    alpha component, because it was specified in the `createImage()` call. When a
    mouse click specifies a background color, all pixels of that color are given an
    alpha value of 0 1. Then `img2` is saved in a file named *out.gif*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个正确大小的空图像，现在我们必须将所有像素从`img1`复制到`img2`。当我们这样做时，`img2`中的像素会带有alpha组件，因为它是在`createImage()`调用中指定的。当鼠标点击指定了背景颜色时，所有该颜色的像素都会被赋予alpha值0
    1。然后，`img2`会保存为一个名为*out.gif*的文件。
- en: The program ends with a call to `exit()`, because otherwise it would continue
    to save the same file again and again.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 程序以调用`exit()`结束，因为否则它会不断地保存同一个文件。
- en: Why is it important to set a transparent background for an image? Computer games!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么为图像设置透明背景很重要？计算机游戏！
- en: 'Sketch 28: Bouncing an Object in a Window'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图28：在窗口中反弹一个对象
- en: This sketch illustrates a good way to check whether an object is within a sketch
    window (though it is only completely accurate when the object is circular). The
    object here is a circle, or a ball if you prefer. The program moves the ball,
    and when the ball reaches the window boundary (the “wall”), it bounces, or reverses
    direction.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图展示了检查一个对象是否在草图窗口内的一个好方法（尽管只有当对象是圆形时，它才完全准确）。这里的对象是一个圆形，或者如果你喜欢，可以是一个球。程序移动这个球，当球到达窗口边界（“墙”）时，它会反弹或改变方向。
- en: A simple test establishes whether the ball has exceeded the boundary. In the
    case of the right boundary wall, for example, it’s whether `x + radius > width`
    2, where `x` is the ball’s center position, `radius` is the ball’s radius, and
    `width` is the width of the window. If the ball is moving slowly enough, we can
    simply reverse the direction of motion when the ball passes this test by changing
    `dx` (the amount the ball moves horizontally between each frame) to `-dx`. However,
    this approach isn’t completely accurate, and it gets worse when the ball moves
    at high speeds. Why? Because the ball will move past the boundary before the program
    determines that it has reached the boundary. Consider the situation in [Figure
    28-1](#figure28-1).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的测试可以确定球是否超过了边界。例如，在右边界的情况，测试条件是`x + radius > width` 2，其中`x`是球的中心位置，`radius`是球的半径，`width`是窗口的宽度。如果球移动得足够慢，我们可以在球通过这个测试时通过将`dx`（球每帧水平移动的距离）改为`-dx`来简单地反转运动方向。然而，这种方法并不完全准确，当球以高速移动时情况会变得更糟。为什么？因为球会在程序判断它是否到达边界之前越过边界。请参考[图28-1](#figure28-1)中的情况。
- en: '![f28001](Images/f28001.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![f28001](Images/f28001.png)'
- en: 'Figure 28-1: A fast-moving ball might overshoot a boundary before you can tell
    it to bounce back.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图28-1：一个快速移动的球可能会在你告诉它反弹之前越过边界。
- en: If the chosen `dx` value has the ball moving several diameters per frame, it
    can easily be on the left of the wall in one frame and on the right of the wall
    in the next. At some time in between, it must have collided with the wall. In
    that case, the amount the ball has overshot the wall should be found, and the
    ball should be placed an equivalent distance to the left of the wall, to simulate
    a bounce. We calculate that distance as `delta` (Δ), and it equals `(x + radius)
    - width` 1 for a circle. Given this distance, the ball’s new, post-bounce x position
    is `width - delta - radius` 3, as shown at the bottom of [Figure 28-1](#figure28-1).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择的`dx`值使得球每帧移动多个直径，它可能在一帧内越过墙壁的左侧，而在下一帧越过墙壁的右侧。在这个过程中，球必须与墙壁发生碰撞。此时，应该找出球越过墙壁的距离，并将球放置在墙壁左侧的相应距离位置，以模拟反弹。我们计算这个距离为`delta`（Δ），对于一个圆形，它等于`(x
    + radius) - width` 1。根据这个距离，球的新反弹后的x位置是`width - delta - radius` 3，如[图28-1](#figure28-1)底部所示。
- en: At the left side of the window, we know the ball has overshot the boundary when
    `x < radius` 4. In this case, we reposition the ball by setting `x` to `(2 * radius)
    - x` 5, and we reverse the ball’s direction of motion.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在窗口的左侧，当`x < radius` 4时，我们知道球已经越过了边界。在这种情况下，我们通过将`x`设置为`(2 * radius) - x` 5来重新定位球，并反转球的运动方向。
- en: The vertical (*y*) situation is symmetrical 6.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直（*y*）方向是对称的6。
- en: 'Sketch 29: Basic Sprite Graphics'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图29：基本精灵图形
- en: We can combine the previous two sketches to show how programmers move sprites
    about in computer games. A sprite is a relatively low-resolution graphic that
    represents an object in a game. Sprites are usually primitive shapes or imported
    images. If the latter, the sprite image must have a transparent color so that
    we can see the background behind the sprite; otherwise the sprite would look like
    a rectangle of solid color with an image within it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将之前的两个草图结合起来，展示程序员如何在计算机游戏中移动精灵。精灵是表示游戏中物体的低分辨率图形。精灵通常是原始形状或导入的图像。如果是后者，精灵图像必须具有透明颜色，这样我们才能看到精灵背后的背景；否则，精灵看起来就像是一个实心颜色的矩形，里面有一张图像。
- en: This sketch uses the rocket of Sketch 27 as the sprite and the code of Sketch
    28 to move it about in the window. The rocket will move over a background image
    of stars to complete the game-like appearance.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图使用了草图27中的火箭作为精灵，并使用草图28中的代码来在窗口中移动它。火箭将在星空背景图像上移动，以完成类似游戏的外观。
- en: 'The test to see whether the rocket has reached a side differs from the circle
    example because the sprite is a rectangular image drawn from the upper-left corner,
    and the distance to the boundary differs between left/right and up/down. The test
    against the left edge is nearly the same as before, but the offset by the radius
    is missing because the x-coordinate is on the left side of the sprite and not
    at its center 2:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 判断火箭是否到达边界的测试与圆形示例不同，因为精灵是从左上角绘制的矩形图像，左右和上下边界之间的距离不同。左边缘的测试几乎与之前相同，但由于x坐标位于精灵的左侧，而不是在其中心，因此缺少半径的偏移量2：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The test on the right is different because the entire width of the sprite is
    also to the right of the coordinate `px` 1:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧的测试有所不同，因为精灵的整个宽度也位于坐标`px`的右侧 1：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: So `px+sprite.width` is the coordinate for the right side of the sprite.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所以`px+sprite.width`是精灵右侧的坐标。
- en: The checks are symmetrical for the y-coordinate 3.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于y坐标的检查是对称的 3。
- en: 'Sketch 30: Detecting Sprite-Sprite Collisions'
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图 30：检测精灵与精灵的碰撞
- en: It is a relatively simple matter to decide whether a sprite is still within
    a window, because the size of the window remains fixed and the window doesn’t
    move. But what if there were many sprites moving at the same time? How would we
    determine if any two had collided when both were moving? The situation of circular
    objects is the simplest and is a general solution, so this sketch will handle
    an arbitrary number of circular objects (balls) that will bounce off the boundaries
    and each other.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 判断一个精灵是否仍在窗口内是相对简单的，因为窗口的大小保持固定且窗口不会移动。但是，如果有多个精灵同时移动呢？我们如何确定两个精灵在同时移动的情况下是否发生了碰撞？圆形物体的情况是最简单的，也是一个通用的解决方案，因此本草图将处理任意数量的圆形物体（球），这些球会在边界和彼此之间反弹。
- en: 'The coordinates of each ball will be stored in the `xpos[]` and `ypos[]` arrays
    1. Drawing object `i` is simple 2:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 每个球的坐标将存储在`xpos[]`和`ypos[]`数组中 1。绘制对象`i`是简单的 2：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Any two objects collide if they get nearer to each other than twice the radius,
    or in this case 10 pixels. These are the steps in the sketch:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个物体的距离小于两倍半径（在此情况下为10像素），它们就会发生碰撞。这是草图中的步骤：
- en: Define positions and speeds (`dx`, `dy`) for each of `nballs` objects.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个`nballs`对象定义位置和速度（`dx`，`dy`）。
- en: Each step (frame) is defined by a call to `draw()`. First, draw a circle at
    each location `xpos[i]`, `ypos[i]` 2.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每一步（帧）由调用`draw()`来定义。首先，在每个位置`xpos[i]`，`ypos[i]`绘制一个圆 2。
- en: 'Change the position: `xpos[i] = xpos[i] + dx[i]`, and the same for `y` 3.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 改变位置：`xpos[i] = xpos[i] + dx[i]`，`y`同理 3。
- en: Check for a collision with the boundary (bounce), and if there is one, implement
    the reaction to the collision. A bounce? An explosion? 4.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查是否与边界发生碰撞（反弹），如果有碰撞，则实现碰撞反应。反弹？爆炸？ 4。
- en: For each ball, check the distance between it and every other ball. If the distance
    is less than twice the radius, then change the direction of both balls (implementing
    a collision as a bounce) 5.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于每个球，检查它与其他每个球之间的距离。如果距离小于两倍半径，则改变两个球的方向（将碰撞实现为反弹） 5。
- en: And that’s it. The `bounce()` function 6 is a little different from the previous
    one, but it effectively does the same thing. The `distance()` function calculates
    the Euclidean distance between the two balls, as you saw in Sketch 24\. If two
    balls overlap after bouncing, they could stick together until they collide with
    another ball.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。`bounce()`函数 6 与之前的有所不同，但它基本上完成了相同的事情。`distance()`函数计算两个球之间的欧几里得距离，就像你在草图
    24 中看到的那样。如果两个球在反弹后重叠，它们可能会粘在一起，直到碰到另一个球。
- en: '![f30001](Images/f30001.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![f30001](Images/f30001.png)'
- en: 'Figure 30-1: The enclosing circle for a rectangular object'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 30-1：矩形物体的包围圆
- en: 'Sketch 31: Animation—Generating TV Static'
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图 31：动画—生成电视噪声
- en: 'We have used random numbers before, in Sketches 8 and 30\. Random numbers serve
    a few important functions in games, simulations, and other software:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前在草图 8 和 30 中使用了随机数。随机数在游戏、模拟和其他软件中有几个重要功能：
- en: Nature uses unpredictable forms and shapes. Placing trees in a forest in a two-dimensional
    grid is a giveaway that there was a mind at work in the planting. This does not
    happen in nature. Instead, trees in a forest have an average distance from each
    other and seem otherwise to form a random collection.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大自然使用不可预测的形式和形状。在二维网格中布置森林中的树木，显然是有人为种植的迹象。这在自然界中是不会发生的。相反，森林中的树木彼此之间有一个平均距离，并且看起来是随机分布的。
- en: Intelligent creatures do not behave predictably. Cars on a freeway that all
    behave in the same manner look very odd. Cars have random distances from each
    other, random speeds, and random behaviors within a possible range.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能生物的行为并不完全可预测。在高速公路上，如果所有的汽车行为相同，看起来会非常奇怪。汽车之间有随机的距离，随机的速度，以及可能范围内的随机行为。
- en: When playing poker or craps, the cards and dice ought to display random values,
    or the game is simply no fun.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩扑克或掷骰子时，牌和骰子应该显示随机值，否则游戏就没有趣味了。
- en: This sketch draws a television set that looks as if it were tuned to a vacant
    channel. What is seen on the screen used to be called *snow*, and it is really
    pixels created by random voltages from signals received from space and various
    local electronic and electrical devices. We cannot predict what the TV will receive
    at any particular moment, so we draw a 2D set of random grey pixel values. This
    set of values changes every time the screen updates. There is an impression of
    random motion, rapid flashing of spots on the screen, but no organized images.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图绘制了一个电视机，看起来好像调到了一频道没有信号。屏幕上看到的图像曾被称为*雪花*，实际上是由随机电压信号产生的像素，这些信号来自太空和各种本地电子电气设备。我们无法预测电视在任何特定时刻会收到什么信号，因此我们绘制了一组2D随机灰色像素值。这些值每次屏幕更新时都会变化，给人一种随机运动的印象，快速闪烁的点在屏幕上，但没有组织的图像。
- en: 'First, we display a background image of a TV set 1 and then set the pixels
    within the screen section to random black/white values each time `draw()` is called
    3:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们显示一个电视机背景图像1，然后在每次调用`draw()`时，将屏幕部分的像素设置为随机的黑白值3：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To make it appear as though a channel were poorly tuned in, we could display
    an image faintly over the static by setting the alpha for the image to a low value,
    perhaps 30 or so. The static would be visible through the image. The `tint()`
    function changes the color and transparency of whatever is drawn from then on,
    so we could use it to change the transparency of the channel image, as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让频道显示得像是调节不当，我们可以在静态画面上淡淡地显示一张图像，将图像的alpha值设置为较低的值，或许是30左右。图像后面的静态将可见。`tint()`函数会改变从此之后绘制的内容的颜色和透明度，所以我们可以用它来改变频道图像的透明度，代码如下：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The parameters to `tint()` are color coordinates, the first three being RGB
    and the fourth transparency (alpha). In the preceding example, the color is white
    (no actual tint) but the transparency is 127, which is half transparent.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`tint()`的参数是颜色坐标，前三个是RGB值，第四个是透明度（alpha）。在前面的例子中，颜色是白色（没有实际的色调），但透明度是127，即半透明。'
- en: In the code for this sketch, the tint and TV image are commented out. To see
    the image, remove the comment characters from those two lines 2.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在此草图的代码中，`tint`和电视图像被注释掉。要查看图像，请去掉这两行代码前的注释符号2。
- en: 'Sketch 32: Frame Animation'
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图32：帧动画
- en: Animation involves displaying a sequence of still images on the screen at such
    a rate that the human visual system interpolates changes in position in the images
    and perceives motion. It is an illusion, in much the same way that any motion
    picture is an illusion. The previous sketch animated a display in a very basic
    manner, creating the illusion of random TV images by generating them with code.
    Most animations require that an image sequence be created by an artist and then
    displayed as a sequence.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 动画涉及在屏幕上以一定的速率显示一系列静态图像，人的视觉系统通过插值图像中位置的变化，感知到运动。这是一种错觉，就像任何电影都是一种错觉。之前的草图通过代码生成随机电视图像，以非常基础的方式创建了动画，呈现了图像的错觉。大多数动画需要由艺术家创建一组图像序列，然后按顺序显示它们。
- en: For a Processing sketch to display an animation, the program has to read in
    the images (frames) to be displayed and then display them one after the other.
    The set of frames can be stored in an array of `PImage` values, one per frame.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要让Processing草图显示动画，程序必须读取要显示的图像（帧），然后将它们依次显示。图像帧可以存储在一个`PImage`类型的数组中，每帧一个元素。
- en: The two examples in this sketch use an image sequence that represents the gait
    of a human; the 11 images compose one entire cycle of a single step, and repeating
    them makes it appear as if the character is walking.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图中的两个示例使用了一个表示人类步态的图像序列；这11张图像组成了一个完整的步伐周期，重复这些图像就能让人物看起来像是在走路。
- en: Example A
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例A
- en: Eleven images, named *a000.bmp* through *a010.bmp*, represent the animation.
    The program reads the images into consecutive elements of the `frames` array 1.
    The `draw()` function displays the next image in sequence each time it’s called,
    increasing an index variable `n` from 0 to 10 and decreasing it to 0 again repeatedly
    2.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 十一张图像，从*a000.bmp*到*a010.bmp*，代表动画。程序将这些图像读取到`frames`数组的连续元素中1。每次调用`draw()`函数时，它会显示下一个图像，依次增加索引变量`n`从0到10，然后再次减小到0，循环往复2。
- en: Example B
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例B
- en: In Example A we needed to know in advance how many images belonged to the animation.
    In Example B we only require that the names of the files begin with *a000.bmp*
    and that the number increases by one for consecutive images. When the program
    fails to read an image file, as indicated by the fact that `loadImage()` returns
    `null`, the program presumes that all of the images have been loaded 1. The program
    counts the images as they are read and then displays them as before.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例A中，我们需要提前知道动画中包含多少个图像。在示例B中，我们只要求文件名以*a000.bmp*开头，并且连续图像的编号递增。当程序无法读取图像文件时（通过`loadImage()`返回`null`来指示），程序假设所有图像已加载完毕1。程序会在读取图像时进行计数，并像之前一样显示它们。
- en: The loop within which the images are loaded has a `break` 2 statement in it
    to escape the loop when `null` is detected.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 加载图像的循环中有一个`break`2语句，当检测到`null`时退出循环。
- en: 'Sketch 33: Flood Fill—Filling in Complex Shapes'
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图 33：洪水填充——填充复杂形状
- en: Drawing a rectangle or ellipse that is filled with a particular color is easy
    to do in Processing. You simply specify a fill color using the `fill()` function
    and then draw the shape. However, there’s no function for filling an arbitrary
    shape or region, so let’s make one. It has the advantage of showing you how filling
    is done in general.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在Processing中，绘制一个填充特定颜色的矩形或椭圆是很简单的。你只需使用`fill()`函数指定填充颜色，然后绘制形状。然而，没有用于填充任意形状或区域的函数，因此我们自己来实现一个。这不仅可以展示如何在一般情况下进行填充，还有其他优点。
- en: This sketch reads an image with a white background that contains regions outlined
    with black (though you can use other colors). The regions do not have to be regular
    polygons, but they should be closed, in that there is an inside and an outside,
    with no gaps in the edges. When the user clicks on a pixel, the region surrounding
    that pixel will be filled with a random color.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图读取了一张具有白色背景的图像，图像中包含用黑色（当然也可以用其他颜色）勾画的区域。这些区域不需要是规则的多边形，但它们应该是封闭的，即有内部和外部，且边缘没有间隙。当用户点击一个像素时，该像素周围的区域会被填充为随机颜色。
- en: The pixel that is clicked on has a color, the background color (`bgcolor` in
    the sketch). A random color will be selected for the fill color (variable `fillColor`).
    The goal is to set all of the pixels within the region that currently have the
    background color value to the fill color. The first step is to set the selected
    pixel to the fill color, followed by setting all neighboring pixels repeatedly,
    until no more candidates remain.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 被点击的像素有一个颜色，即背景颜色（草图中的`bgcolor`）。系统将选择一个随机颜色作为填充颜色（变量`fillColor`）。目标是将所有当前具有背景颜色值的像素设置为填充颜色。第一步是将选定的像素设置为填充颜色，然后重复设置所有相邻像素，直到没有更多候选像素。
- en: After the first pixel is changed, every background-colored pixel that is a neighbor
    of it is also set to the fill color 1. A neighbor is defined as a pixel that is
    immediately adjacent either vertically or horizontally. Then all of the pixels
    are scanned again, and any background pixel that is a neighbor of a fill-colored
    pixel is set to the fill color. The process is shown in [Figure 33-1](#figure33-1).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个像素被改变后，所有与之相邻的背景色像素也会被设置为填充颜色1。相邻像素被定义为与其垂直或水平相邻的像素。然后，所有像素会再次被扫描，任何与填充色像素相邻的背景像素都会被设置为填充色。该过程如[图
    33-1](#figure33-1)所示。
- en: '![f33001](Images/f33001.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![f33001](Images/f33001.png)'
- en: 'Figure 33-1: Filling in neighboring pixels'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 33-1：填充相邻像素
- en: The process is repeated until no change is made. The process stops at the boundary
    because boundary pixels do not have the background color and are not changed.
    This is not the only method for implementing a fill, nor is it the fastest, but
    it is probably the easiest to comprehend.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程会一直重复，直到没有变化为止。过程会在边界处停止，因为边界像素没有背景颜色且不会改变。这不是实现填充的唯一方法，也不是最快的方法，但可能是最容易理解的方法。
- en: The `mouseReleased()` function sets the values of the `bgColor` and `fillColor`
    variables and sets the first (seed) pixel to the fill color 3. The `nay()` function
    returns true if the pixel indicated by the parameters is a neighbor to a fill-colored
    pixel 2. Each time `draw()` is called (once per frame), it displays one iteration
    of the filling process, so the process appears animated.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`mouseReleased()`函数设置`bgColor`和`fillColor`变量的值，并将第一个（种子）像素设置为填充颜色3。`nay()`函数如果参数所指示的像素是填充色像素的邻居，则返回`true`2。每次调用`draw()`函数（每帧调用一次）时，它都会显示填充过程的一个迭代，因此过程看起来像是动画。'
