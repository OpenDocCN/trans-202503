- en: '**22  Mask ROM Photography**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**22  掩膜ROM摄影**'
- en: Some chips store their program bits as markings on the masks that lithographically
    draw the microchip. We call this a mask ROM, to distinguish it from EEPROM, flash
    ROM, and other field-programmable technologies. In this chapter, we’ll go over
    the theory behind photographing these ROMs to extract their bits, and in the following
    chapters we’ll work out examples of real targets from beginning to end.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 有些芯片将它们的程序位存储为掩膜上的标记，这些掩膜是光刻绘制微芯片的。我们称这种ROM为掩膜ROM，以区别于EEPROM、闪存ROM以及其他现场可编程技术。本章将讨论拍摄这些ROM以提取其位的理论，接下来的章节将以从头到尾的实例来解析真实的目标。
- en: 'Mask ROMs come in three types: via, diffusion, and implant. These are quite
    different chemically and physically, but in extracting them, we just need to understand
    them well enough to make the bits visible. [Table 22.1](ch22.xhtml#ch22tab1) lists
    a number of microcontrollers and their ROM processes.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 掩膜ROM有三种类型：通孔、扩散和植入。这些在化学和物理上差异很大，但在提取它们时，我们只需要足够了解它们，以便使位变得可见。[表 22.1](ch22.xhtml#ch22tab1)列出了许多微控制器及其ROM过程。
- en: '*Via* or *contact* ROMs use a via between layers to mark a bit. These aren’t
    very efficient for layout space, but they are quite easy to decode because the
    bits are clearly visible when you find them. Many of them, such as those in the
    Nintendo Game Boy, are even visible from the surface without delayering!'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*通过*或*接触*ROM使用通过层之间的通孔来标记一个位。这些在布局空间方面效率不高，但它们非常容易解码，因为当你找到它们时，位是清晰可见的。许多ROM，例如任天堂游戏机的Game
    Boy，甚至可以在不去除层次的情况下直接从表面看到！'
- en: '*Diffusion* ROMs are lower in the chip. Bits here are marked by the presence
    of a diffusion pool making a working transistor, or the absence of the diffusion
    pool breaking that transistor. Because they are so low, you almost always need
    to delayer the chip to see them, but there’s little risk of damaging the chip
    during the process.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*扩散* ROM位于芯片较低的位置。这里的位通过扩散池的存在或其缺失来标记，从而使晶体管工作或破坏晶体管。由于它们位于较低的位置，你几乎总是需要去层才能看到它们，但在这个过程中损坏芯片的风险很小。'
- en: '*Implant* ROMs are the most frustrating of these three. Bits are encoded by
    an additional ion implant in an otherwise working transistor, and by some infernal
    coincidence the damaged and undamaged transistors are exactly the same color!
    These ROMs generally require delayering to the inside of the bits, then staining
    a difference into their coloring with a Dash etch, which we will discuss shortly.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*嵌入式* ROM 是这三种中最让人沮丧的。位是通过在一个正常工作的晶体管中附加离子植入来编码的，而由于某种该死的巧合，损坏和未损坏的晶体管颜色完全相同！这些ROM通常需要去层到位的内部，然后使用Dash蚀刻法将其着色差异显现出来，我们稍后会讨论这一点。'
- en: '|  Model  | ROM Type |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '|  模型  | ROM 类型 |'
- en: '| TMS1000 | Via |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| TMS1000 | 通孔 |'
- en: '| Game Boy | Via |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| Game Boy | 通孔 |'
- en: '| T44C080C | Via |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| T44C080C | 通孔 |'
- en: '| TMS320C15 | Via |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| TMS320C15 | 通孔 |'
- en: '| MSP430F1, F2, F4 | Via |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| MSP430F1, F2, F4 | 通孔 |'
- en: '| 6500/1 | Diffusion |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 6500/1 | 扩散 |'
- en: '| EMZ1001 | Diffusion |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| EMZ1001 | 扩散 |'
- en: '| MYK82 | Diffusion |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| MYK82 | 扩散 |'
- en: '| Tengen Rabbit | Diffusion |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| Tengen Rabbit | 扩散 |'
- en: '| TMS32C10NL | Diffusion |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| TMS32C10NL | 扩散 |'
- en: '| HCS300 | Diffusion |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| HCS300 | 扩散 |'
- en: '| Z8 | Diffusion |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| Z8 | 扩散 |'
- en: '| SM590 | Implant |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| SM590 | 嵌入式 |'
- en: '| MK3870 | Implant |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| MK3870 | 嵌入式 |'
- en: '| TLCS-47 (TMP47) | Implant |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| TLCS-47 (TMP47) | 嵌入式 |'
- en: 'Table 22.1: Example ROM Types'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '表 22.1: ROM 类型示例'
- en: There are of course as many ways to encode bits as there are unique shapes invented
    by the silicon wizards. I use these broad categories to describe the effort required
    for bit extraction, but there are of course ROMs with markings on the metal layers
    instead of the via layer, which are also surface visible. Like anything in reverse
    engineering, let’s use this abstraction until it ceases to be useful, then dig
    a little deeper to see what’s inside.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有很多方法可以编码位，就像硅工匠发明的独特形状一样。我使用这些宽泛的类别来描述提取位所需的努力，但当然也有一些ROM，其标记在金属层上而不是通孔层上，这些也能从表面看到。就像逆向工程中的一切一样，我们先使用这个抽象概念，直到它不再有用，再深入挖掘，看看里面的情况。
- en: '**Microscopy**'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**显微镜学**'
- en: Once the chip is ready, we’ll need to photograph it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦芯片准备好，我们需要拍摄它。
- en: You will need a metallurgical microscope, which is one in which the column of
    light comes down through the lens to reflect back from the die. Microscopes that
    send light up through the sample are great for biology, but they will not help
    to photograph an opaque microchip.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一台冶金显微镜，它的光柱通过镜头垂直照射到芯片上并反射回来。那种将光从样品上方发送的显微镜非常适合生物学，但对于拍摄不透明的微芯片毫无帮助。
- en: A camera is also required. While it’s possible to get decent pictures from a
    lens adapter on a monocular microscope, it’s much easier to use a trinocular scope
    so that your own eyes can find the target and the camera is only required at the
    end for the photos.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要一台相机。虽然通过单目显微镜的镜头适配器可以获得不错的图片，但使用三目显微镜要更容易，这样你的眼睛可以找到目标，只有在拍照时才需要用到相机。
- en: It’s generally impossible to zoom out enough to keep the whole image in frame
    while also keeping its details in focus, so we instead photograph a series of
    shots that overlap one another. These can be combined after the fact with panorama
    software, such as Hugin.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通常不可能将图像缩小到足够小的程度，以便同时保持图像的细节和整体框架，所以我们通常会拍摄一系列相互重叠的照片。拍摄后可以使用全景软件（如Hugin）将这些照片合并。
- en: This photography can be quite tedious at the limits of your scope’s capabilities,
    so I generally try to first make a whole-chip panorama at minimum magnification
    and then follow that with high-magnification panoramas of my area of interest,
    such as the ROM. A million thanks to John McMaster for selling me a microscope
    with a motorized stage, so all of my photographs now have consistent spacing and
    filenames that indicate the row and column.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这种摄影在显微镜能力的极限下可能会非常繁琐，所以我通常会先在最低放大倍率下拍摄整片芯片的全景，然后再用高倍率拍摄我感兴趣的区域，例如ROM。非常感谢John
    McMaster，感谢他卖给我一台带有电动舞台的显微镜，因此我现在的所有照片都具有一致的间距和文件名，文件名显示了行和列。
- en: '**Delayering with Hydrofluoric Acid**'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用氟化氢酸去层**'
- en: To delayer a chip, I heat it in dilute hydrofluoric acid (HF), which is available
    over the counter in the States as Whink or Rust-Go branded rust stain remover.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要去除芯片的层，我将它加热到稀释的氟化氢酸（HF）中，在美国可以通过Whink或Rust-Go品牌的生锈去除剂买到。
- en: Hydrofluoric acid is dangerous to your bones, and it will damage them without
    giving the courtesy of much skin pain. Be very careful if you mess with this stuff,
    and do not skimp on safety.^([1](footnotes.xhtml#ch22fn1)) Another hassle with
    hydrofluoric acid is that we are using it because it attacks glass, so we can’t
    very well use a glass beaker to hold the reaction. Plastic beakers, or plastic
    centrifuge tubes, are critical here.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 氟化氢酸对你的骨骼有危险，它会在没有太多皮肤疼痛感的情况下损害你的骨骼。如果你处理这种物质，请非常小心，并且不要忽视安全措施。^([1](footnotes.xhtml#ch22fn1))
    氟化氢酸的另一个麻烦是，我们使用它是因为它会攻击玻璃，所以我们不能用玻璃烧杯来容纳反应。此时塑料烧杯或塑料离心管非常重要。
- en: As the HF attacks your target, you’ll see some bubbles as it reacts to metals.
    The first flurry of bubbles usually indicates the top metal layer, and in reactions
    where you need to get a particular depth into the chip, it’s often handy to delayer
    many chips at once and to sort them after the fact to find your right depth.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当氟化氢酸攻击目标时，你会看到一些气泡，这是因为它与金属发生反应。第一波气泡通常表示顶部金属层，在需要达到特定深度的反应中，通常很有帮助的是同时去层多个芯片，然后在事后对它们进行排序，以找到适当的深度。
- en: You might notice that the metal layers lift off of the chip rather than dissolving
    into a liquid. A little agitation is helpful to get these away from the die, so
    that they don’t mask your delayering reactions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到金属层会从芯片上剥离，而不是溶解成液体。轻轻搅动有助于将这些金属层从芯片上移开，以免它们遮挡去层反应。
- en: '**Dash Etching for Implant ROMs**'
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Dash蚀刻用于植入型ROM**'
- en: For implant ROMs, where the bits are identical in color, we need to give them
    different colors in order to photograph them. This is accomplished after delayering
    by a Dash etch, which is best described in Beck (1998) and McMaster (2019).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于植入型ROM，其中的位是相同颜色的，我们需要为它们赋予不同的颜色以便拍摄。这是通过使用Dash蚀刻在去层后完成的，最佳描述可以参考Beck（1998）和McMaster（2019）。
- en: Delayering here can be quite confusing, as you can’t really see how close we
    are to the implants that we’d like to photograph. It might help to delayer many
    samples, returning those that haven’t been sufficiently delayered to the bath.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的去层可能会让人感到困惑，因为你无法真正看到我们距离想要拍摄的植入体有多近。你可以尝试去层多个样本，并将那些没有充分去层的样本送回浴槽。
- en: The Dash etch consists of three parts. Hydrofluoric acid and nitric acid attack
    the silicon, while acetic acid (HAc) buffers the reaction to slow it down. When
    the ratios are right, p-type doping will slightly tip this reaction in favor of
    oxidization, causing the p-type silicon to turn brown faster than the n-type silicon
    does.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Dash蚀刻由三部分组成。氟化氢酸和硝酸攻击硅，而醋酸（HAc）则缓冲反应并减缓其速度。当比例合适时，p型掺杂将稍微偏向氧化反应，导致p型硅比n型硅更快地变为棕色。
- en: I perform this with John McMaster’s Rust-Go solution, which is made from 3mL
    of 65% HNO[3], 4mL of 12% HF (Rust-Go), and 8mL of acetic acid. The final proportions
    are roughly 4.3% HNO[3] and 3.2% HF; the remainder of the solution is HAc and
    H[2]O to buffer the reaction.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用John McMaster的Rust-Go溶液进行此操作，该溶液由3mL的65% HNO[3]、4mL的12% HF（Rust-Go）和8mL的醋酸组成。最终的比例大约是4.3%的HNO[3]和3.2%的HF；溶液的其余部分是HAc和H[2]O，用于缓冲反应。
- en: Beck recommends a solution of 3mL 65% HNO[3], 1mL 48% HF, and 10 mL to 12 mL
    98% HAc. McMaster himself has moved on to this mixture, and I only hesitate to
    follow because HF is a nasty poison.^([2](footnotes.xhtml#ch22fn2))
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Beck推荐使用的溶液由3mL 65% HNO[3]、1mL 48% HF和10 mL至12 mL 98% HAc组成。McMaster自己已经转向了这种混合物，而我仅仅因为HF是一种有毒的毒药而犹豫不决。^([2](footnotes.xhtml#ch22fn2))
- en: Whichever solution is used, the already delayered die is placed into it under
    a bright light, such as that from a halogen fiber lamp. A minute or two under
    the light will darken the chip in splotches, and if you’re lucky, the ones will
    stand out as much darker than the zeroes.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 无论使用哪种方法，已经去层的芯片会被放置在明亮的光源下进行观察，例如来自卤素光纤灯的光。光照一两分钟后，芯片的某些部分会变暗，如果幸运的话，数字“1”会比“0”显得更加暗。
- en: '![Image](../images/f0208-01.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0208-01.jpg)'
- en: 'Figure 22.1: TMP47C434N Implant ROM'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22.1：TMP47C434N 植入ROM
- en: It is absolutely critical to keep the metal content low during these reactions.
    You mustn’t have any metal salts from a delayering reaction on your glassware,
    and you mustn’t have any remnant of the lead frame beneath the die. Quite often,
    you can even see markings on the edge of the die from your tweezers during the
    reaction.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些反应过程中，保持金属含量低是至关重要的。你不能让去层反应中的任何金属盐留在玻璃器皿上，也不能让任何残留的铅框在芯片下方留下。通常，你甚至可以看到反应过程中镊子在芯片边缘留下的痕迹。
- en: '[Figure 22.1](ch22.xhtml#ch22fig1) shows the datasheet description of the TMP47C-434N’s
    font implant ROM, along with a die photograph from my lab after staining the bits
    with a Dash etch. Notice how the Dash etch leads to uneven contrast; some are
    much darker or lighter than others.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 22.1](ch22.xhtml#ch22fig1)展示了TMP47C-434N的字体植入ROM的数据表描述，并附有我实验室拍摄的芯片照片，这些位通过Dash蚀刻处理后被染色。请注意，Dash蚀刻导致了对比度的不均匀；有些部分比其他部分要暗得多或亮得多。'
- en: '**From Photographs to Bits**'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**从照片到位**'
- en: After capturing the bits photographically, it’s necessary to extract the bits
    digitally. One way to do this is by carefully writing them down, patiently marking
    each one or zero without losing your place or losing your mind. Another way is
    to let software do the boring work. “Work smarter, not harder,” as Coach Crigger
    would tell me back in high school.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在拍摄了位图像后，有必要将这些位数字化提取。做到这一点的一种方法是仔细手工写下每一位，耐心地标记每一个零或一，同时不丢失位置或失去耐心。另一种方法是让软件来做这项枯燥的工作。正如Crigger教练在高中时常对我说的：“聪明地工作，而不是拼命工作。”
- en: An early public example of this is Rompar from Laurie (2013), a Python application
    written to mark the bits in a MARC4 microcontroller from a car’s key fob. More
    recently, Bitractor from Gerlinsky (2019) and my own Mask ROM Tool from Goodspeed
    (2024), both in C`++`. These three tools vary dramatically in their implementation
    and usage, but the general principle is to come up with a matrix of bit positions,
    then to sample the color of each bit to determine the difference between the ones
    and the zeroes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一个早期的公开示例是Laurie（2013）的Rompar，这是一个用Python编写的应用程序，用于标记汽车钥匙遥控器中MARC4微控制器的位。最近，Gerlinsky（2019）的Bitractor和我自己在Goodspeed（2024）发布的Mask
    ROM Tool，都是用C`++`编写的。这三种工具在实现和使用上有很大差异，但它们的基本原理是先得出一个位位置矩阵，然后采样每个位的颜色，以确定“1”和“0”之间的区别。
- en: '![Image](../images/f0210-01.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0210-01.jpg)'
- en: 'Figure 22.2: MYK82 Bits in the Diffusion Layer'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22.2：MYK82 在扩散层中的位
- en: '![Image](../images/f0210-02.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0210-02.jpg)'
- en: 'Figure 22.3: Color Distributions from the MYK82 ROM'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22.3：MYK82 ROM中的颜色分布
- en: When you try this yourself, you will find that a naive sampling strategy is
    surprisingly effective. Most bits can be correctly decoded by a threshold in one
    color channel, usually red or green. It helps to improve those odds by drawing
    a histogram of samples in each color channel, to ensure that there is a clean
    bimodal separation between the ones and zeroes and that your threshold is set
    between the two groups.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当你自己尝试时，你会发现简单的采样策略出奇有效。大多数位可以通过一个颜色通道的阈值来正确解码，通常是红色或绿色。通过绘制每个颜色通道的样本直方图来提高这种成功率，以确保“1”和“0”之间有清晰的双峰分离，并确保你的阈值设定在这两组之间。
- en: For a concrete example, [Figure 22.2](ch22.xhtml#ch22fig2) shows a closeup of
    bits from the NSA’s MYK82 that we’ll discuss in detail and whose ROM we will dump
    in [Chapter 24](ch24.xhtml#ch24). You’ll see bits between the central squares
    and the horizontal wires as a rectangular box that’s darker than its surroundings.
    [Figure 22.3](ch22.xhtml#ch22fig3) shows just how much darker the ones are than
    the zeroes in the red channel, a total separation with no bits on the threshold
    and very few near it. Green has a separation that is nearly as good, but the blue
    channel shows no real separation.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以一个具体的例子，[图22.2](ch22.xhtml#ch22fig2)展示了NSA的MYK82比特的特写，我们将在[第24章](ch24.xhtml#ch24)中详细讨论并提取它的ROM。在图中，你会看到中央方块和水平导线之间的比特，呈现为一个比周围更暗的矩形框。[图22.3](ch22.xhtml#ch22fig3)展示了红色通道中，1与0之间的对比有多明显，完全分离，阈值处没有比特，且几乎没有比特接近阈值。绿色通道的分离几乎同样好，而蓝色通道则没有明显的分离。
- en: In cases where a clean bimodal separation does not exist in any color channel,
    it can help to create one by image preprocessing or by sampling more than a single
    pixel. In my tool, I have sampling techniques that return the darkest of each
    color channel in a thin horizontal or vertical strip. This is particularly effective
    for over-etched diffusion ROMs, where bits have a bordering color but any color
    difference in the center of the bit has already been etched away.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何颜色通道中如果没有干净的二分法分隔，图像预处理或通过采样多个像素来创建分隔可能会有所帮助。在我的工具中，我有一些采样技术，它们返回每个颜色通道中最暗的部分，通常是薄的水平或垂直条带。这对过度蚀刻的扩散ROM特别有效，在这些ROM中，比特的边缘有颜色，但比特中心的任何颜色差异已经被蚀刻掉。
- en: While the available bit-marking tools have many differences, they have all standardized
    on ASCII art as an export format. Generally, the wider axis is arbitrarily defined
    as X to fit with computer monitor dimensions, and you can expect some rotations
    to be necessary before decoding the bits.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然现有的比特标记工具之间存在许多差异，但它们都统一使用ASCII艺术作为导出格式。通常，较宽的轴被任意定义为X轴，以适应计算机显示器的尺寸，你可能需要进行一些旋转才能解码这些比特。
- en: '**From Bits to Bytes**'
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**从比特到字节**'
- en: After extracting the bits in the physical order, you’ll need to rearrange them
    into bytes in the logical order. Before we jump into the tools that make this
    less painful, let’s discuss a little about why the bits are in such a confusing
    order to begin with.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在从物理顺序提取比特后，你需要将它们重新排列成逻辑顺序的字节。在我们开始讨论一些可以减轻这个过程痛苦的工具之前，先让我们来讨论一下比特最初为什么会以如此混乱的顺序排列。
- en: In natural languages, we have considerable variety in our writing. Some languages
    are written from left to right, while others are written from right to left. Some
    represent words by groups of letters, some use ideograms, and a few mix these
    concepts, building one larger symbol out of smaller ones to represent a word.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在自然语言中，我们的书写方式有很大的多样性。有些语言从左到右书写，而有些则从右到左。有些语言通过字母组合来表示单词，有些则使用表意符号，还有一些语言混合了这些概念，通过将小符号组合成更大的符号来表示一个单词。
- en: ROMs also have some common rules and infinite variety in the arrangement, but
    there is one concept that they almost never implement. They almost never group
    the bits of a byte together, instead preferring to scatter them into eight columns,
    separated from one another for physical convenience.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: ROM也有一些常见的规则和无限多样的排列方式，但几乎有一个概念是它们从未实现过的。它们几乎从不将一个字节的比特聚集在一起，而是更倾向于将它们分散到八列中，以便于物理上的便利。
- en: To figure out the ordering of bits, one method is to very carefully study the
    bits of a ROM and to try out different patterns until they make sense. If you
    see 16 columns in a 16-bit microcontroller, for example, you might guess that
    one bit is taken from each column to make a word. Checking all of the words in
    both the top row and the bottom row might reveal an entry point of the program,
    making the entirety of the layout make sense.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要弄清楚比特的排列顺序，一种方法是非常仔细地研究ROM的比特，并尝试不同的模式，直到它们有意义为止。例如，在一个16位的微控制器中，如果你看到16列，你可能会猜测每列提取一个比特来构成一个字。检查顶部行和底部行的所有字，可能会揭示出程序的入口点，从而使整个布局变得有意义。
- en: Gerlinsky (2019) introduces BitViewer, a tool in [Figure 22.4](ch22.xhtml#ch22fig4)
    that graphically displays bits, adjusting their organization so that a human operator
    can explore their meaning. After loading a bitstream, you can choose how tall
    and wide bit pixels are, how much spacing to put between them, and how many to
    group into a major column. Bits are selected individually or grouped into columns
    and rows, allowing an operator to spot patterns that reveal the ROM contents.
    This is much less painful than doing the same on graph paper.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Gerlinsky（2019）介绍了 BitViewer，这是一个工具，见[图 22.4](ch22.xhtml#ch22fig4)，它以图形方式显示比特，调整它们的组织方式，以便操作员能够探索其含义。加载比特流后，你可以选择比特像素的高度和宽度、它们之间的间距以及每列中的比特数量。比特可以单独选择或按列和行分组，这使得操作员能够发现揭示
    ROM 内容的模式。这比在图表纸上做同样的事情要轻松得多。
- en: '![Image](../images/f0213-01.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0213-01.jpg)'
- en: 'Figure 22.4: BitViewer from Gerlinsky (2019)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22.4：来自 Gerlinsky（2019）的 BitViewer
- en: '![Image](../images/f0213-02.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0213-02.jpg)'
- en: 'Figure 22.5: MaskRomTool from Goodspeed (2024)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22.5：来自 Goodspeed（2024）的 MaskRomTool
- en: '|  cols-downl  | First bit is top left, then move down,'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '|  cols-downl  | 第一个比特位于左上角，然后向下移动，'
- en: then move right. |
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后向右移动。 |
- en: '| cols-downr | First bit is top right, then move down,'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '| cols-downr | 第一个比特位于右上角，然后向下移动，'
- en: then move left. |
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后向左移动。 |
- en: '| cols-left | First bit is top right, then move left,'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '| cols-left | 第一个比特位于右上角，然后向左移动，'
- en: then move down. |
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后向下移动。 |
- en: '| cols-right | First bit is top left, then move right,'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '| cols-right | 第一个比特位于左上角，然后向右移动，'
- en: then move down. |
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后向下移动。 |
- en: '| squeeze-lr | `byte&0xAA` use cols-left, `byte&0x55` use cols-right. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| squeeze-lr | `byte&0xAA` 使用 cols-left，`byte&0x55` 使用 cols-right。 |'
- en: 'Table 22.2: Zorrom Decoding Strategies'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 表 22.2：Zorrom 解码策略
- en: McMaster (2018) takes another approach in a program called Zorrom. It implements
    decoding strategies for a number of known chips, along with a series of transformations
    such as a flip on the X axis, rotating the bit matrix and inverting the bits.
    When you are lucky, which is about half the time, it can correctly solve the decoding
    given just the bits themselves and a guess at a few bits or bytes.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: McMaster（2018）采用了另一种方法，称为 Zorrom。它实现了多种已知芯片的解码策略，并提供了一系列转换功能，如 X 轴翻转、比特矩阵旋转以及比特反转。幸运的时候，大约一半的时间，它可以仅凭比特流和对几个比特或字节的猜测正确地解码。
- en: Zorrom’s decoding strategies are listed in [Table 22.2](ch22.xhtml#ch22tab2).
    To apply a strategy, first divide the bit columns into eight groups and then sample
    one bit from each group to form a byte, with the least significant bit being the
    one on the left. So for the cols-downr strategy, your first byte would be formed
    from the top right bit of every group. Your second byte would have its bits just
    beneath those of the first, and after sampling a bit from every row of the groups,
    you would move one bit column to the right and start again from the top.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Zorrom 的解码策略列出在[表 22.2](ch22.xhtml#ch22tab2)中。要应用策略，首先将比特列分成八组，然后从每一组中取出一个比特组成一个字节，最不重要的比特位于左侧。所以，对于
    cols-downr 策略，第一个字节将由每组的右上角比特组成。第二个字节的比特位于第一个字节的下方，在从每组的每行取出一个比特后，你会向右移动一列比特并从顶部重新开始。
- en: It doesn’t bother to support decoding strategies that start from the bottom
    of the group or that place the most significant bit on the left. These are handled
    by the existing strategies, after rotations and an optional flip on the X axis.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 它不支持从组的底部开始解码或将最重要的比特放在左侧的解码策略。这些由现有策略处理，在旋转和 X 轴翻转后执行。
- en: My own solution to bit decoding is called GatoROM, which runs both as a CLI
    tool and as a C`++` library. A GUI extension to my Mask ROM Tool from Goodspeed
    (2024) was then written using the library. It is shamelessly inspired by McMaster’s
    tool, implementing all of the necessary transformations for compatibility with
    his solver.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我自己的比特解码解决方案叫做 GatoROM，它既可以作为一个 CLI 工具运行，也可以作为一个 C`++` 库运行。随后，使用该库编写了我从 Goodspeed（2024）获得的
    Mask ROM 工具的 GUI 扩展。它无耻地借鉴了 McMaster 的工具，实现了所有必要的转换，以便与他的解码器兼容。
- en: Used as a library, `void*` pointers allow a bidirectional association between
    the physically ordered bits and the logically ordered bytes of the ROM. You can
    select bytes in the hex viewer and then ask the software to highlight them in
    the GUI. This is incredibly handy when implementing new decoding strategies for
    chips that don’t quite fit the existing ones.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 作为库使用时，`void*` 指针可以实现物理顺序的位与逻辑顺序的字节之间的双向关联。你可以在十六进制查看器中选择字节，然后让软件在图形用户界面（GUI）中高亮显示它们。当为不完全符合现有解码策略的芯片实现新的解码策略时，这非常方便。
- en: Whatever tooling you use to decode a ROM, the end result is a flat binary file
    containing the bytes. When you first get a meaningful decoding, be a little suspicious
    of its ordering, as small ordering mistakes might not be noticed until the ROM
    is disassembled and reverse engineered.^([3](footnotes.xhtml#ch22fn3))
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你使用什么工具解码 ROM，最终结果都是一个包含字节的平面二进制文件。当你首次得到有意义的解码结果时，应该对其顺序保持一定的怀疑，因为小的顺序错误可能直到
    ROM 被反汇编并进行逆向工程时才会被发现。^([3](footnotes.xhtml#ch22fn3))
