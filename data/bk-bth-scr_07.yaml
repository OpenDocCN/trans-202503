- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 6 INTEGER AND FLOAT DATA TYPES
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6 整数与浮点数据类型
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: In [Chapter 5](chapter5.xhtml), I detailed string and boolean data types. In
    this chapter, I’ll pivot to numeric data types, specifically the integer and floating-point
    data types, investigating them in great detail. Batch handles integers with ease,
    whether they be of the decimal, hexadecimal, or octal variants.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](chapter5.xhtml)中，我详细介绍了字符串和布尔数据类型。在这一章中，我将转向数值数据类型，特别是整数和浮点数据类型，并对它们进行深入研究。批处理能够轻松处理整数，无论是十进制、十六进制还是八进制变体。
- en: However, floating-point numbers are similar to booleans in that Batch doesn’t
    actually support them explicitly as a data type. But once again, that limitation
    affords the imaginative Batch coder with an opportunity to be inventive, and that’s
    exactly what we’ll do before this chapter is done.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，浮点数和布尔值类似，因为批处理实际上并不显式支持它们作为数据类型。但再一次，这个限制为富有创意的批处理程序员提供了发挥想象力的机会，这正是我们在本章结束之前将要做的。
- en: An Octals Case Study
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 八进制案例研究
- en: 'August 1, some year in the aughts: I can’t remember the exact year, but of
    the month and date I am quite certain, for reasons that will be clear by the end
    of this chapter.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 8月1日，某个“零零年代”的年份：我记不清确切的年份，但对于月份和日期我是非常确定的，原因到本章结束时就会明了。
- en: I was still relatively new to Batch, but I knew more than many, so a co-worker
    came to me with a task with which he had been struggling. In the Batch code he
    needed to determine the prior day’s date given only the current date. That’s pretty
    straightforward for most days of the year, but it becomes complicated when today’s
    date is the first of the month. Months have different lengths; New Year’s Day
    poses a unique challenge; leap years happen every four years, except for when
    they don’t.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我当时还相对较新于批处理，但我知道的比许多人都多，所以一个同事找到了我，帮忙处理他一直在挣扎的任务。在这段批处理代码中，他需要根据当前日期来确定前一天的日期。对于大部分日期来说，这个任务相当简单，但当今天是月初时，情况就变得复杂了。因为每个月的天数不同；新年的第一天是一个独特的挑战；闰年每四年发生一次，除了不发生的情况。
- en: This initial event occurred in February, maybe March, and it was an interesting
    little exercise that I coded up and tested. Like any good coder, I tested the
    first day of the year and the last. I also tested the first day of a handful of
    months, particularly the extremes, like January and December. I tested March 1
    for several different years, not because I was coding this around February but
    because of the peculiarities of leap years. In short order, I handed over the
    code and moved on to other projects.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个初步事件发生在2月，可能是3月，这是一个有趣的小练习，我写了代码并进行了测试。像所有优秀的程序员一样，我测试了每年第一天和最后一天。我还测试了几个极端月份的第一天，特别是像一月和十二月这样的月份。我测试了不同年份的3月1日，不是因为我是在2月编写这段代码，而是因为闰年的特殊性。不久后，我将代码交了出去，转向了其他项目。
- en: The code worked great for about six months. Then on August 1 it suddenly didn’t.
    I don’t remember the downstream consequence, but my co-worker spent a good chunk
    of time tracking down the root cause. He eventually zeroed in on my bat file but
    couldn’t figure out why it stopped working on that day. His boss would hear none
    of it—code doesn’t work for half of a year and then just blow up. My co-worker
    must have made some sort of change that broke the process, and he was challenged
    to find it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 代码在大约六个月内运行得很好。然后在8月1日，它突然就不工作了。我不记得后续的结果是什么，但我的同事花了大量时间追踪根本原因。他最终锁定了我的批处理文件，但无法弄清楚为什么它在那天停止工作。他的老板根本不听这些解释——代码能正常运行半年，然后突然崩溃。我的同事一定做了某种更改，导致了这个问题，他被挑战去找到这个更改。
- en: That search ended up wasting half of his workday, but after much due diligence
    he finally brought the failure to me. I opened the execution log, found the results
    of the logic that attempted to find the date before 08/01, and ...
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这次搜索最终浪费了他半天的工作时间，但经过大量细致的工作，他终于将问题带给了我。我打开执行日志，找到了试图查找08/01之前日期的逻辑结果，然后...
- en: 'I looked skyward, raised my hands, and with Shatnerian melodrama screamed,
    “OCTAL!” I am embellishing, slightly—the moment was not as dramatic as Khan stranding
    Captain Kirk (played by William Shatner with Shakespearean flair) in the center
    of a dead planet in *Star Trek II: The Wrath of Khan*, but for me at least it
    was quite memorable.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我抬头望向天空，举起双手，带着沙特纳式的戏剧化大声喊道：“八进制！”我有些夸张——那一刻并没有像《星际迷航II：可汗的愤怒》中可汗将柯克舰长（由威廉·沙特纳以莎士比亚式的风格演绎）困在一颗死去的星球中心那样戏剧化，但至少对我来说那一刻是相当难忘的。
- en: What in the execution log upset me so? Let’s find out, but before delving into
    octals, I’ll start with integers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 执行日志中到底有什么让我不高兴的地方？让我们来看看，但在深入研究八进制之前，我将从整数开始。
- en: Integers
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 整数
- en: 'We have already used the set command for alphanumeric values, but it’s also
    used for arithmetic with the /A option. Recall what happens with a statement such
    as this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用set命令处理字母数字值，但它也可以通过/A选项用于算术运算。回想一下，像这样的语句会发生什么：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The variable denoted by x is set to the text 4+5.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: x所表示的变量被设置为文本4+5。
- en: 'Using the /A option turns it into an *arithmetic* set command, so the following
    results in the x variable being set to the number 9:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用/A选项会将其转换为*算术*设置命令，因此以下命令将x变量设置为数字9：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The /A option transforms the set command into a means to perform addition and
    other arithmetic operations. Those previous values are obviously hardcoded as
    numeric.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: /A选项将set命令转化为执行加法和其他算术运算的工具。那些先前的值显然是硬编码为数字的。
- en: A slightly more interesting example involves setting variables to numeric values
    and then adding them via the set /A command, as shown in [Listing 6-1](#Lis6-1).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一个稍微有趣一点的例子是将变量设置为数字值，然后通过set /A命令将它们相加，如[列表 6-1](#Lis6-1)所示。
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 6-1: Adding two numeric variables via the set /A command'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 6-1：通过set /A命令添加两个数字变量
- en: The console output is The sum is 9., and [Listing 6-1](#Lis6-1) demonstrates
    that the /A option has altered the set command significantly—three times. First
    and most obviously, arithmetic is unlocked. Second, there are spaces around the
    equal sign, and in [Chapter 2](chapter2.xhtml) I made a rather large point of
    the danger of doing that. To demonstrate, this command lacking the /A option
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台输出为“和是9”，并且[列表 6-1](#Lis6-1)展示了/A选项显著改变了set命令——三次。首先也是最明显的，解锁了算术。第二，等号两边有空格，而在[第2章](chapter2.xhtml)中，我曾经大篇幅讲过空格带来的危险。为了说明这一点，这个没有使用/A选项的命令：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: does not set myVar to X. It sets a variable with a six-character name, myVar
    with a trailing space, to the two-character value of a space followed by X. By
    comparison, the /A option makes the set command behave more like an assignment
    operator of a modern language in that spaces in the command are not treated as
    parts of variable names or values; refreshingly, they are just spaces.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 并没有将myVar设置为X，而是将一个六字符的变量myVar（后面跟着空格）设置为一个由空格和X组成的两字符值。相比之下，/A选项使得set命令更像现代编程语言中的赋值操作符，因为命令中的空格不会被视为变量名或值的一部分；令人耳目一新的是，它们只是空格。
- en: 'These three commands are all functionally equivalent; each sets myVar to 7:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个命令在功能上是等价的；每个命令都将myVar设置为7：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To get the desired result without the /A option, spaces cannot exist around
    the equal sign. However, with the /A option they can exist, but they also aren’t
    required, which is the second significant difference unlocked with the /A option.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 若不使用/A选项，等号两边不能有空格。然而，使用/A选项时，可以有空格，但空格不是必需的，这就是/A选项解锁的第二个重要区别。
- en: 'The third difference in [Listing 6-1](#Lis6-1) is that the variables nbr1 and
    nbr2 are not surrounded by percent signs. Hence, the /A option allows you to resolve
    variables without the ubiquitous delimiters. In a nod to flexibility, you still
    can use the percent signs and embedded spaces, or not, so these four statements
    are logically equivalent:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 6-1](#Lis6-1)中的第三个区别在于变量nbr1和nbr2没有被百分号包围。因此，/A选项允许你在没有常见分隔符的情况下解析变量。为了灵活性考虑，你仍然可以使用百分号和嵌入空格，或者不使用，所以这四个语句在逻辑上是等价的：'
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The spaces make the code much more readable, so I advise against the last two
    options in the previous code. The first option is the cleanest, but some people
    are so used to having percent signs surround variables that the second option
    might provide comforting consistency.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 空格使代码更加易读，因此我不建议使用之前代码中的最后两个选项。第一个选项最简洁，但有些人已经习惯了变量周围有百分号，第二个选项或许能提供一种让人感到安稳的一致性。
- en: 'Let’s take one more pass at the set /A command from [Listing 6-1](#Lis6-1),
    but this time, executed at the very beginning of a bat file:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再来看一遍[列表 6-1](#Lis6-1)中的set /A命令，不过这次它会在批处理文件的最开始执行：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The resulting value of sum written to the console will be 0. Because nbr1 and
    nbr2 are not yet defined, unset variables used in the numeric context are considered
    to be zero, unlike unset variables used in the alphanumeric context, which default
    to null. Since neither is set, the arithmetic 0 + 0 results in 0.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台输出的求和结果将是0。由于nbr1和nbr2尚未定义，未设置的变量在数值上下文中默认视为0，而与此不同的是，在字母数字上下文中未设置的变量默认视为null。由于两者都未设置，算术0
    + 0的结果为0。
- en: WARNING
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '*The range of permissible integers includes the values –2,147,483,648 through
    2,147,483,647, inclusive. Batch stores numbers as 32-bit signed fields, so any
    integer will take on one of these 2**^(32)* *values. This rarely poses a problem,
    but because the code is not compiled, take care to ensure that the data being
    processed conforms to the limitation. The code won’t abort, nor will it hang;
    it’ll simply fail to calculate the correct value. Batch is not the preferred language
    for macroeconomics.*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*允许的整数范围包括从-2,147,483,648到2,147,483,647（包含这两个值）。批量算术将数字存储为32位带符号字段，因此任何整数将属于这些2**^(32)*
    *个值。这通常不会导致问题，但由于代码不是编译型的，需要注意确保正在处理的数据符合这一限制。代码不会中止，也不会挂起；它只是无法计算出正确的值。批量算术不是宏观经济学的首选语言。*'
- en: Batch Arithmetic
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 批量算术
- en: 'Batch arithmetic does more than simple addition. The following listing shows
    the five primary arithmetic operations (addition, subtraction, multiplication,
    division, and modulo division) and their syntaxes:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 批量算术不仅仅是简单的加法。以下列表展示了五种主要的算术运算（加法、减法、乘法、除法和取模运算）及其语法：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The operators are similar to those in other programming languages, but note
    the double percent sign for modulo division. The help command shows a single percent
    sign, but the correct Batch syntax requires two. (In reality, the modulo character
    is just a single percent sign, but the first percent sign is actually *escaping*
    the second. If this doesn’t make much sense right now, hold that thought for [Chapter
    14](chapter14.xhtml), but use two characters for now.)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些运算符与其他编程语言类似，但请注意取模除法的双百分号。帮助命令显示的是单一的百分号，但正确的批量语法需要两个百分号。（实际上，取模字符只是单一的百分号，但第一个百分号实际上是*转义*第二个。如果现在这并不太容易理解，可以等到[第14章](chapter14.xhtml)再深入了解，但现在就使用两个符号。）
- en: 'Now let’s execute these arithmetic commands, but first we’ll define the two
    operands, nbr1 and nbr2. The results are shown to the right of each statement
    as a comment (as mentioned previously, the ampersand separates two commands, and
    the second one can be a rem command):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来执行这些算术命令，但首先我们要定义两个操作数nbr1和nbr2。每条语句右侧的结果作为注释显示（如前所述，&符号用于分隔两个命令，第二个命令可以是rem命令）：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The addition, subtraction, and multiplication operations produce no surprises,
    but dividing 7 by 2 returns 3 rather than 3.5, because Batch arithmetic handles
    only integers and truncates the decimal portion of the result. Dividing 19 by
    10 doesn’t yield 1.9, and it won’t even return the rounded value of 2\. The intermediate
    result of 1.9 is truncated to 1.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 加法、减法和乘法操作没有什么意外的结果，但将7除以2的结果是3，而不是3.5，因为批量算术只处理整数，并且会截断结果的小数部分。将19除以10不会得到1.9，甚至不会返回四舍五入后的值2\。1.9的中间结果会被截断为1。
- en: Modulo is a useful operator that returns the remainder. Modulo *n* returns the
    values 0 through *n* – 1, so the modulo 2 operation returns 0 for even numbers
    because 2/2, 4/2, 6/2, and so on are integers and do not produce a remainder.
    Odd numbers return 1, because 3/2, 5/2, 7/2, and so on all have a remainder of
    1.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 取模是一个有用的运算符，用于返回余数。取模*n*返回的值是从0到*n* - 1，因此取模2操作对于偶数返回0，因为2/2、4/2、6/2等的结果都是整数，不会产生余数。奇数则返回1，因为3/2、5/2、7/2等都有余数1。
- en: Oddly, Batch doesn’t support the exponential or power function, which is a source
    of frustration for some but an impetus for creativity for others. You can create
    a routine that takes in a base and an exponent and returns the exponential result
    (and I’ll do just that in [Chapter 18](chapter18.xhtml)).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 奇怪的是，批量算术不支持指数或幂函数，这对一些人来说是一个令人沮丧的缺陷，但对另一些人来说则是激发创意的动力。你可以创建一个例程，输入基数和指数并返回指数结果（我将在[第18章](chapter18.xhtml)中这样做）。
- en: Augmented Assignment Operators
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 增强赋值运算符
- en: '*Augmented assignment operators* can streamline the code when you want to add
    a number to a variable and store the result in that same variable. The most obvious
    example is a simple counter where you might want to increment a variable by one
    for each execution of the set command, for example:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*增量赋值运算符* 可以简化代码，当你希望将一个数字添加到变量并将结果存储在同一变量中时。最明显的例子是一个简单的计数器，可能在每次执行 set 命令时都想将一个变量递增
    1，例如：'
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: I intentionally chose a verbose and cumbersome variable name because try as
    we coders might, they sometimes become nearly unavoidable.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我故意选择了一个冗长且笨重的变量名，因为无论我们这些程序员怎么努力，它们有时几乎是不可避免的。
- en: 'The following syntax is logically identical, condensed, and easier to comprehend:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下语法在逻辑上等价、简洁，并且更易理解：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The next command adds 17 to a far more succinctly named variable:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个命令将 17 添加到一个更简洁命名的变量中：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Likewise, the following set commands subtract 2, multiply by 2, divide by 2,
    and perform modulo 2 division, respectively:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，以下的 set 命令分别减去 2、乘以 2、除以 2，并执行模 2 除法：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Again, note the double percent signs for the modulo division. Many experienced
    Batch coders don’t know that the augmented assignment operators are available
    in Batch, wrongly assuming that they exist only in more modern languages, but
    they do exist, and you should use them when appropriate.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 再次注意模除运算符的双百分号。许多经验丰富的 Batch 程序员并不知道增量赋值运算符在 Batch 中是可用的，错误地认为它们只存在于现代编程语言中，但它们确实存在，且在适当时应该使用。
- en: Order of Operation
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运算顺序
- en: 'You can do more complex arithmetic with the order of operation rules from mathematics.
    You might have learned the PEMDAS acronym in a pre-algebra class (or “Please Excuse
    My Dear Aunt Sally” as a mnemonic) for “parentheses, exponents, multiplication
    and division, and addition and subtraction.” For Batch we have PMDAS, which is
    a whole lot harder to pronounce, but as mentioned, exponents aren’t supported
    (maybe the mnemonic “Please Make Dessert Aunt Sally” will catch on). Let’s take
    this example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用数学中的运算顺序规则进行更复杂的算术运算。你可能在代数预备课程中学过 PEMDAS 首字母缩略词（或者用“请原谅我亲爱的莎莉阿姨”作为记忆法），表示“括号、指数、乘法和除法、加法和减法”。在
    Batch 中，我们使用 PMDAS，它发音困难，但如前所述，指数运算并不被支持（也许“请做甜点莎莉阿姨”这一记忆法能流行起来）。让我们看这个例子：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: First, the 1 and the 2 are added to make 3 because they are in parentheses,
    even though addition and subtraction are last in the order of operation. Multiplication
    and division share the same hierarchy, so the interpreter performs them from left
    to right. The 3 leading the expression is multiplied by the 3 from the addition,
    giving us 9, and 9 is then divided by 4, resulting in 2.25. Actually, that’s truncated,
    so it’s simply 2. Finally, subtract 5, and -3 is the result.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，1 和 2 被加在一起得 3，因为它们在括号内，尽管加法和减法在运算顺序中排在最后。乘法和除法具有相同的优先级，因此解释器会从左到右执行它们。表达式开头的
    3 与加法中的 3 相乘，得到 9，然后 9 被 4 除，结果是 2.25。实际上，这是截断的，所以结果是 2。最后，减去 5，结果是 -3。
- en: 'This example is pedagogical only, because it would be far simpler just to set
    nbr to -3. In practice, a mix of hardcoded numbers and variables will be used.
    For example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子仅用于教学，因为直接将 nbr 设置为 -3 会更简单。实际上，会使用硬编码数字和变量的混合。例如：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The outer parentheses here are unnecessary by the rules of PMDAS, but they make
    the statement more readable.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 PMDAS 规则，这里外部的括号是多余的，但它们使得语句更易读。
- en: 'Augmented assignment operators can also work with more complex expressions.
    These two statements are logically identical:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 增量赋值运算符也可以与更复杂的表达式一起使用。以下两个语句在逻辑上是等价的：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In both commands the variable nbr is being incremented by a mathematical expression
    also containing nbr, with the only difference being that the second command uses
    the augmented assignment operator. Based on the order of operations, both add
    4 to the variable, double it, and subtract –5\. (Subtracting –5 is equivalent
    to adding 5.) Ultimately, the result of this expression is the amount by which
    nbr is incremented.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个命令中，变量 nbr 都在通过包含 nbr 的数学表达式递增，唯一的区别是第二个命令使用了增量赋值运算符。根据运算顺序，两者都会给变量加 4，然后将其翻倍，最后减去
    -5（减去 -5 等同于加 5）。最终，这个表达式的结果是 nbr 增加的量。
- en: Octal and Hexadecimal Arithmetic
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 八进制与十六进制运算
- en: Batch supports both octal and hexadecimal arithmetic. Both number systems are
    more similar to the way a computer *thinks* than base 10, so it’s useful for a
    coder to understand them and be able to use them.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Batch支持八进制和十六进制算术运算。这两种数制比十进制更接近计算机的*思维*方式，因此对程序员来说，理解它们并能够使用它们是很有帮助的。
- en: 'The decimal number system is base 10 and uses the digits 0 to 9\. There is
    no digit for 10; instead, there are two digits: a new place value starts with
    1, while the ones place restarts at 0, hence 10\. In contrast, the *octal number
    system* is base 8, using the digits 0 to 7\. Adding 1 to the octal 7 does not
    produce 8, because 8 (and 9) are meaningless characters in the octal number system.
    Instead, the octal number 10 (pronounced “one-zero” because it is not “ten”) is
    equivalent to the decimal number 8\. Likewise, the octal 11 is equal to the decimal
    9, and so on.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 十进制数系统是基数为10，使用数字0到9。没有代表10的数字；相反，有两个数字：新的位值从1开始，而个位数从0重新开始，因此是10。与此相反，*八进制数系统*是基数为8，使用数字0到7。将1加到八进制的7不会得到8，因为8（和9）在八进制数系统中是无意义的字符。相反，八进制数10（发音为“一零”，因为它不是“十”）等于十进制数8。同样，八进制数11等于十进制数9，依此类推。
- en: 'The *hexadecimal number system* is base 16, so it has the opposite problem
    of octal: it needs 16 unique digits, more than the 10 used in most human number
    systems on account of our having evolved to possess five digits on each of two
    hands. After counting from 0 to 9, we have the “numbers” A, B, C, D, E, and F.
    The hexadecimal number B is equal to the decimal number 11, the hexadecimal F
    is equal to the decimal 15, and the hexadecimal 10 is equal to the decimal 16.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*十六进制数系统*是基数为16，因此它和八进制面临相反的问题：它需要16个独特的数字，超过了大多数人类数制中使用的10个数字，因为我们是进化出了每只手有五个手指的结构。从0数到9后，我们有了“数字”A、B、C、D、E和F。十六进制的B等于十进制的11，十六进制的F等于十进制的15，十六进制的10等于十进制的16。'
- en: 'Batch can perform arithmetic with octal, hexadecimal, and/or decimal inputs,
    while always returning the answer as a decimal. Hexadecimal numbers are preceded
    with 0x, and octal numbers are preceded with 0 alone. Hence, these two variables
    are assigned octal and hexadecimal values, respectively:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Batch可以进行八进制、十六进制和/或十进制输入的算术运算，并始终以十进制返回结果。十六进制数前面会加上0x，而八进制数前面则单独加0。因此，这两个变量分别被赋予八进制和十六进制的值：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Regardless of the base of the operands—decimal, octal, or hexadecimal— Batch
    always stores the result as a decimal. To demonstrate, first take this example:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 无论操作数的基数是十进制、八进制还是十六进制，Batch总是将结果存储为十进制。为了演示，首先看这个例子：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The numerals 7 and 1 are being added as decimals and octals. The decimal result
    is obviously 8\. The sum of the two octal numbers is octal 10 (“one-zero,” not
    decimal 10), but the interpreter immediately stores the value as a decimal 8\.
    In this example, decimals and octals behave the same way, but that’s not always
    true.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 数字7和1作为十进制和八进制相加。十进制的结果显然是8。两个八进制数的和是八进制10（“一零”，而不是十进制10），但解释器会立即将其作为十进制8存储。在这个例子中，十进制和八进制表现相同，但这并不总是这样。
- en: 'Now take this example:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看这个例子：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The decimal addition yields decimal 13, while the octal addition yields octal
    13 (“one-three,” not decimal 13). Remember, the octal number system has no 8 or
    9\. Octal 10 is decimal 8, and in this example octal 13 is decimal 11\. Therefore,
    in Batch, 11 + 2 = 13, but 011 + 02 = 013 = 11, so the following result is displayed:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 十进制加法得到十进制13，而八进制加法得到八进制13（“一三”，而不是十进制13）。记住，八进制数系统没有8或9。八进制10是十进制8，在这个例子中，八进制13是十进制11。因此，在Batch中，11
    + 2 = 13，但011 + 02 = 013 = 11，所以下面显示的结果是：
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The interpreter can even handle arithmetic with a mixture of decimal and octal
    values. The decimal addition of 10 + 10 is 20, and the octal addition of 010 +
    010 is 16\. When adding a decimal and an octal, say 10 + 010, Batch gives the
    correct result of 18\. Usually, this type of arithmetic is done by accident, but
    sometimes savvy coders will use this to their advantage, and it’s good to know
    that it’s possible.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 解释器甚至可以处理十进制和八进制值混合的算术运算。十进制的10 + 10是20，而八进制的010 + 010是16。当将十进制和八进制相加时，比如10
    + 010，Batch会给出正确的结果18。通常，这种类型的算术是偶然发生的，但有时精明的程序员会利用这一点，了解它是可能的也是很有用的。
- en: 'In a similar fashion, these values are treated as hexadecimals:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以类似的方式，这些值被视为十六进制：
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: With this multiplication, 0xA is equal to decimal 10, and 0x14 is four more
    than 16 when converted to decimal. After this statement executes, the variable
    is equal to 200, the product of 10 and 20.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这次乘法，0xA 等于十进制的 10，而 0x14 转换为十进制时比 16 大 4。执行此语句后，变量的值为 200，10 和 20 的积。
- en: Octals and hexadecimals can be powerful tools; however, be careful to ensure
    that there are no leading zeros if you are intending to do decimal arithmetic.
    Since hexadecimals start with 0x, accidentally performing hexadecimal arithmetic
    is far more difficult, but unknowingly performing octal arithmetic because of
    a seemingly innocuous leading zero is exceedingly easy.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 八进制和十六进制可以是强大的工具；但是，如果你打算做十进制算术运算，务必小心确保没有前导零。由于十六进制以 0x 开头，因此不小心进行十六进制运算要困难得多，但由于一个看似无害的前导零不知不觉地进行八进制运算则极为容易。
- en: NOTE
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*Because math is all around us, you’ll find boxes containing various examples
    of bat file arithmetic in [Chapters 16](chapter16.xhtml), [18](chapter18.xhtml),
    and [21](chapter21.xhtml). Batch also has arithmetic operators for bit manipulation:
    bitwise and, bitwise or, bitwise exclusive or, logical shift left, and logical
    shift right. I’ll wait until [Chapter 30](chapter30.xhtml) to explore them because
    these operators use some special characters that have other uses and because many
    experienced coders have never manipulated a bit in compiled code, much less Batch.*'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*因为数学无处不在，你会在[第16章](chapter16.xhtml)、[第18章](chapter18.xhtml)和[第21章](chapter21.xhtml)中找到包含各种批处理文件算术运算示例的框。Batch
    还具有用于位操作的算术运算符：按位与、按位或、按位异或、逻辑左移和逻辑右移。我将等到[第30章](chapter30.xhtml)再探索它们，因为这些运算符使用一些具有其他用途的特殊字符，而且许多有经验的程序员从未在编译代码中操作过位，更不用说在批处理文件中了。*'
- en: Floating-Point Numbers
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 浮动点数
- en: Batch doesn’t explicitly handle floating-point numbers—that is, non-integer
    rational numbers. In fact, if extensive processing is to be done on such numbers,
    there are better tools to use than Batch. It would be analogous to digging a foundation
    for a house with a spade shovel. It can be done, but only by the most austere
    ascetic. If the task is big enough, write some compiled code and call it from
    the bat file, but when some lightweight floating-point arithmetic needs to be
    done, Batch can handle it, just as you can use the spade shovel to plant a couple
    tulip bulbs in the front yard.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 批处理不明确处理浮动点数——也就是非整数有理数。事实上，如果需要对这样的数字进行大量处理，使用比批处理更好的工具。它就像是用铁锹挖掘房屋地基。虽然可以做到，但只有最严谨的苦行者才能完成。如果任务足够大，可以编写一些编译代码并从批处理文件中调用，但当只需要做一些轻量级的浮动点算术时，Batch
    可以处理，就像你可以用铁锹在前院种几个郁金香球茎一样。
- en: 'Keep in mind that all Batch variables are really just glorified strings. We
    can easily assign a couple of variables floating-point values—that is, some numbers
    with a period for the decimal point. Here are two amounts in dollars and cents:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，所有批处理变量实际上只是华丽的字符串。我们可以很容易地为几个变量赋予浮动点值——也就是带有小数点的数字。以下是两笔金额，单位为美元和美分：
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If these were integers, we could simply add them with the set /A command. Let’s
    try it and see what happens:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些是整数，我们可以简单地使用 set /A 命令将它们相加。让我们试试，看会发生什么：
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The result is the value 3 being stored in the sum, not the hoped-for 4.49. The
    decimal part of each number is completely ignored, resulting in the sum of the
    integers 1 and 2.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是 3 存储在总和中，而不是期待的 4.49。每个数字的小数部分完全被忽略，导致 1 和 2 的整数和。
- en: 'We need to remove the decimal place, do the arithmetic, and restore the decimal
    place. Multiplying each amount by 100 would do the trick, but again, Batch isn’t
    going to allow that. Since the floating-point value is just a disguised string,
    however, we can remove the decimal point with the syntax described in the previous
    chapter:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要去掉小数点，进行算术运算，再恢复小数点。将每个金额乘以 100 就能解决这个问题，但批处理不会允许这样做。不过，由于浮动点值实际上只是一个伪装的字符串，我们可以使用上一章中描述的语法去掉小数点：
- en: '[PRE23]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now the amounts are 199 and 250. This set /A command results in 449:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在金额是 199 和 250。此 set /A 命令的结果是 449：
- en: '[PRE24]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To restore the decimal, we can’t simply divide by 100—once again, that works
    only for integers—but we can use more of the string-parsing logic from the previous
    chapter. Using substringing, the following set command resets the variable to
    a concatenation of three items: everything but the last two bytes of the number,
    a hardcoded decimal place (or a dot), and the last two bytes of the number:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了恢复小数，我们不能仅仅除以100——这仅适用于整数——但是我们可以使用上一章中的字符串解析逻辑。通过子字符串提取，以下set命令将变量重置为三个项目的连接：数字的前面部分（去掉最后两个字节），一个硬编码的小数点（或点），以及数字的最后两个字节：
- en: '[PRE25]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Finally, the variable written to the console has been set to 4.49.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，写入控制台的变量被设置为4.49。
- en: Multiplication works the same way. If you buy that new computer for $499 with
    no payments for the first year and an interest rate of 19 percent, how much will
    you owe a year from now? The interest rate translates to a factor of 1.19, but
    again we must remove the decimal place. After finding the product of two integers,
    we restore the decimal place by inserting it before the last two bytes, as shown
    in [Listing 6-2](#Lis6-2).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 乘法的工作方式相同。如果你以499美元购买那台新电脑，第一年无需支付款项，利率为19%，那么一年后你将欠多少钱？利率转化为1.19的倍数，但我们仍然必须去掉小数点。在找到两个整数的乘积后，我们通过在最后两个字节前插入小数点来恢复小数，如[列表6-2](#Lis6-2)所示。
- en: '[PRE26]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Listing 6-2: Multiplication of an integer and a floating-point number'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 列表6-2：整数与浮动小数的乘法
- en: The product of 593.81 might make you reconsider the financing plan.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 593.81的乘积可能会让你重新考虑融资计划。
- en: The goal of every coder should be to write “bullet-proof” code. Unfortunately,
    the previous offering is more of a cotton mesh than Kevlar, and there are a number
    of batveats to discuss. We’ve made several assumptions, and if any one of them
    is violated, the code will break. The addition assumes that both numbers have
    two decimal places; 1.9 instead of 1.90 will throw off the result by a factor
    of 10\. A non-numeric character, other than the decimal place, will cause issues,
    and a leading zero on the value will trigger octal arithmetic. The multiplication
    is even more complicated. [Listing 6-2](#Lis6-2) contains an integer amount, but
    if amt had been expressed in dollars and cents, the product would have resulted
    in four decimal places, not two. To represent the result as dollars and cents,
    the last two bytes should be truncated—or better yet, rounded.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 每个程序员的目标应该是编写“防弹”的代码。不幸的是，之前的代码更像是棉网而不是凯夫拉尔，并且有许多警告需要讨论。我们做了几个假设，如果其中任何一个被违反，代码就会出错。加法假设两个数字都包含两位小数；1.9而不是1.90会使结果偏差10倍。除了小数点外，任何非数字字符都会引发问题，值前面的零会触发八进制运算。乘法则更为复杂。[列表6-2](#Lis6-2)包含一个整数，但如果amt表示的是美元和分，乘积将会有四个小数位，而不是两个。为了表示美元和分，应该去掉最后两个字节——或者更好地说，进行四舍五入。
- en: I won’t go into these nuances here for the simple reason that if the inputs
    are not consistent and data validation is required, Batch floating-point arithmetic
    may not be the optimal solution. Coding for all possible situations would be tedious
    at best. What’s important is that the coder understands the options at hand. If
    all the values have a consistent number of decimal places, one can do the arithmetic
    with just a few lines of code. On the rare instance when I have resorted to using
    the floating-point data type in Batch, it has been for a very specific task involving
    consistent data. Break out that spade shovel, but only when appropriate.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里不会深入探讨这些细节，原因很简单，如果输入数据不一致并且需要数据验证，批处理中的浮动小数算术可能不是最佳解决方案。为所有可能的情况编写代码无疑是繁琐的。重要的是，程序员要了解现有的选项。如果所有的值都具有一致的小数位数，则可以通过几行代码进行运算。当我在批处理程序中不得不使用浮动小数类型时，通常是为了处理涉及一致数据的特定任务。拿出那把铁锹，但只在合适的时候。
- en: An Octals Case Study, Continued
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 八进制案例研究，继续
- en: 'So, what exactly did I find in that execution log on that first day of August
    of a year early in the millennium? In the bat file, today’s date was formatted
    as CCYYMMDD, for instance 20050801, which was broken down into three discrete
    fields:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我在千年初的8月1日的执行日志中到底发现了什么呢？在批处理文件中，今天的日期被格式化为CCYYMMDD，例如20050801，并且被分解为三个独立的字段：
- en: '[PRE27]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If todaysDay is anything other than 01, we simply subtract 1 from the eight-digit
    number and move on. But when it is 01, we need to do some additional arithmetic.
    Considering just the month logic (and understanding that there’ll be some special
    logic for January), we must subtract 1 to determine the prior month:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果todaysDay不是01，我们只需从八位数中减去1，然后继续。但当它是01时，我们需要进行一些额外的算术运算。仅考虑月份的逻辑（并且理解1月会有一些特殊逻辑），我们必须减去1来确定前一个月份：
- en: '[PRE28]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: When todaysMonth is 03, the month is 2; when todaysMonth is 07, the month is
    6. But when todaysMonth is 08 as it is on August 1, the month in the previous
    arithmetic resolves to the value of -1.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当todaysMonth是03时，月份为2；当todaysMonth是07时，月份为6。但当todaysMonth是08（即8月1日）时，前面的算术结果会变成-1。
- en: The interpreter sees the leading 0 and treats the arithmetic as octal arithmetic.
    Octal understands only the digits 0 through 7, so when the interpreter sees 8,
    it considers the character to be as foreign as “ohkuh” (the numeral corresponding
    to eight in the Vulcan language) and simply ignores it. Ultimately, the set /A
    command assigns the mathematical result of what remains of the expression, which
    is -1, to the month variable. This value ends up breaking the date logic, and
    we fail to get the desired date of July 31.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 解释器看到前导0，并将算术视为八进制运算。八进制只理解数字0到7，所以当解释器看到8时，它会认为这个字符像“ohkuh”一样陌生（“ohkuh”是瓦肯语言中数字8的发音），并简单地忽略它。最终，`set
    /A`命令将表达式中剩余部分的数学结果（即-1）赋值给月份变量。这个值最终打破了日期逻辑，导致我们无法获得所需的7月31日日期。
- en: “OCTAL!”
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: “八进制！”
- en: 'Using substringing and the if command, I inserted this one-line fix to strip
    the leading zero, if present, off the value of the todaysMonth variable:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 使用子字符串提取和`if`命令，我插入了这一行代码来去除todaysMonth变量中可能存在的前导零：
- en: '[PRE29]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The code worked fine for years to come, even on the firsts of August and September.
    If the original code hadn’t been run on August 1, it would have failed if run
    on September 1, since September is denoted by 09. But what if the code hadn’t
    been run on either of those days? When would it fail next? On October 1, the month
    would be denoted as 10. The interpreter would have treated that like a decimal,
    and the code would have performed as expected. So, the firsts of August and September
    are the only dates capable of breaking the code.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码在未来几年都能正常工作，甚至在8月和9月的1号。如果原始代码没有在8月1日运行，那么在9月1日运行时会失败，因为9月被表示为09。但如果代码没有在这两天运行呢？下一次会在哪一天失败呢？在10月1日，月份会被表示为10。解释器会把它当作十进制数处理，因此代码会按预期执行。所以，8月和9月的1号是唯一能打破这段代码的日期。
- en: Be very aware of octal.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要非常注意八进制。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, I discussed numeric data types and how they are treated in
    Batch. Unlike most other languages, Batch variables are not defined as a certain
    data type. Intrinsically, all variables are simple strings, but when that string
    contains a number, it can be treated as numeric.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我讨论了数值数据类型以及它们在批处理中的处理方式。与大多数其他编程语言不同，批处理变量并没有定义为某种特定的数据类型。从本质上讲，所有变量都是简单的字符串，但当该字符串包含一个数字时，它可以被视为数值。
- en: Addition, subtraction, multiplication, division, and even modulo division work
    on decimal integers with relative ease, using the order of operation rules you
    likely learned in school. Octal and hexadecimal integers are also supported, although
    octal arithmetic can all too easily be invoked in error. Take it from my personal
    experience and ensure that your decimal integers are not prefixed with any zeros.
    Augmented assignment operators offer a handy and underutilized tool for incrementing
    integers.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 加法、减法、乘法、除法，甚至取模运算都能很容易地在十进制整数上进行，按照你可能在学校里学过的运算顺序规则。八进制和十六进制整数也得到了支持，尽管八进制运算容易被误用。根据我的个人经验，确保你的十进制整数没有前导零。增强赋值运算符提供了一种方便且未充分利用的工具，用于递增整数。
- en: The floating-point numeric data type isn’t supported in Batch, but you’ve learned
    that with a little work, you can perform some lightweight arithmetic on numbers
    with a decimal point.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 批处理中不支持浮动点数数据类型，但你已经学会了，通过一些小技巧，可以对带小数点的数字进行一些简单的算术运算。
- en: Changing gears, I’ll discuss file movements in the next chapter. An immensely
    useful feature of Batch is the creating, copying, moving, renaming, and deleting
    of files and directories.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 转变话题，我将在下一章讨论文件操作。批处理的一个非常有用的功能是创建、复制、移动、重命名和删除文件和目录。
