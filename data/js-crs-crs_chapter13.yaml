- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">13</samp> <samp class="SANS_Dogma_OT_Bold_B_11">WRITING</samp>
    <samp class="SANS_Dogma_OT_Bold_B_11">A</samp> <samp class="SANS_Dogma_OT_Bold_B_11">SONG</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">13</samp> <samp class="SANS_Dogma_OT_Bold_B_11">写作</samp>
    <samp class="SANS_Dogma_OT_Bold_B_11">一首</samp> <samp class="SANS_Dogma_OT_Bold_B_11">歌曲</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.png)'
- en: 'You’ve now learned enough about the basics of Tone.js and sound synthesis to
    write a simple song. Our song is going to be made up of a few instruments: the
    drums we developed in the previous chapter, the trumpet sampler, two different
    synth bass parts, and some chords played on another synth.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学到了足够的 Tone.js 基础和声音合成的知识，能够写出一首简单的歌曲。我们的歌曲将由几个乐器组成：上一章中开发的鼓，喇叭采样器，两个不同的合成贝斯部分，以及另一个合成器上演奏的和弦。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Getting Organized</samp>
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">组织结构</samp>
- en: 'Our song will reuse a lot of the code from the previous chapter, but we’ll
    reorganize it to make it easier to follow how the song is built. The *index.html*
    file will be exactly the same as in [Chapter 12](chapter12.xhtml), but we’ll start
    from scratch with a new *script.js* file, which we’ll organize into four logical
    sections:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的歌曲将重用上一章中的许多代码，但我们会对其进行重组，使得跟踪歌曲的构建过程更加容易。*index.html* 文件将与[第 12 章](chapter12.xhtml)中的完全相同，但我们将从头开始创建一个新的
    *script.js* 文件，并将其组织成四个逻辑部分：
- en: '**Instruments**    For instantiating and setting up the instruments'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**乐器**    用于实例化和设置乐器'
- en: '**Sequencing**    For creating the looping sequences of notes to be played'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**序列化**    用于创建循环播放的音符序列'
- en: '**Song**    For scheduling the start and end of each sequence'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**歌曲**    用于安排每个序列的开始和结束'
- en: '**Event Handling**    The code that handles the click event that starts playing
    the song'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件处理**    处理启动歌曲播放的点击事件的代码'
- en: We’ll set off each of these four sections with a multiline comment to make the
    *script.js* file easier to navigate. [Listing 13-1](#Lis13-1) shows what these
    comments look like. You can add them to the file now, in this order.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用多行注释来标记这四个部分，以便更容易导航 *script.js* 文件。[清单 13-1](#Lis13-1) 显示了这些注释的样子。你现在可以按照这个顺序将它们添加到文件中。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-1: The comments
    delineating the main sections of</samp> <samp class="SANS_Futura_Std_Book_11">script.js</samp>'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 13-1：标明</samp> <samp class="SANS_Futura_Std_Book_11">script.js</samp>的主要部分的注释
- en: Throughout the chapter, as we build up the song, I’ll tell you to add each new
    piece of code to the end of a particular section. These comments will enable you
    to quickly find exactly where the new code should go.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，当我们构建歌曲时，我会告诉你将每个新代码片段添加到特定部分的末尾。这些注释将帮助你快速找到新代码应放置的位置。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Event Handling</samp>
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">事件处理</samp>
- en: 'Let’s start by writing the Event Handling section of *script.js*. This code
    is almost identical to the code we wrote at the beginning of the previous chapter:
    it creates a click event listener that toggles the style of the Play button and
    “Playing” paragraph when the user clicks the button, and makes the Tone.js calls
    necessary to start playing the song. Enter the contents of [Listing 13-2](#Lis13-2)
    in the Event Handling section of the code.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从编写 *script.js* 中的事件处理部分开始。这段代码几乎与我们在上一章开头编写的代码相同：它创建了一个点击事件监听器，在用户点击按钮时切换播放按钮和“正在播放”段落的样式，并调用必要的
    Tone.js 方法来开始播放歌曲。将[清单 13-2](#Lis13-2)中的内容输入到代码的事件处理部分。
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-2: The event handling
    code</samp>'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 13-2：事件处理代码</samp>
- en: One important difference in this code compared to [Listing 12-2](chapter12.xhtml#Lis12-2)
    is that we use Tone.Transport.position to set the starting position of the transport
    before we call Tone.Transport.start ❶. Here we’ve set the starting position to
    "0:0:0", which is the default, so this call isn’t strictly necessary. However,
    including this line of code makes it easy to modify the starting position if you
    don’t want to have to listen to the whole song every time you add a new element
    to it. For example, if you wanted to skip the first 20 bars, you could change
    the value of Tone.Transport.position to "20:0:0".
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与[Feynman学习方法](https://wiki.example.org/feynmans_learning_method)相比，这段代码的一个重要区别是，我们使用Tone.Transport.position在调用Tone.Transport.start
    ❶之前设置传输的起始位置。在这里，我们将起始位置设置为"0:0:0"，这是默认值，因此这行代码严格来说并不是必须的。然而，包含这行代码可以方便你在添加新元素时修改起始位置，这样就不必每次都听完整首歌曲。例如，如果你想跳过前20小节，你可以将Tone.Transport.position的值更改为"20:0:0"。
- en: Unlike in the previous chapter, all the code to create the instruments and sequences
    will live outside of the event handler. That code can all be executed before the
    user presses Play. Only the Tone.start call has to be inside the handler for the
    song to work correctly. We could even move the Tone.Transport lines outside of
    the handler if we wanted, but it feels more natural to have those come after Tone.start.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一章不同，所有创建乐器和序列的代码都放在事件处理程序之外。所有这些代码都可以在用户按下播放按钮之前执行。只有Tone.start调用必须放在事件处理程序内，歌曲才能正常工作。如果我们愿意，甚至可以将Tone.Transport的相关代码移到事件处理程序之外，但在Tone.start之后执行这些代码更自然。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Making the Drumbeat</samp>
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">制作鼓点</samp>
- en: Now let’s create the drumbeat to underlay the song. We’ll use the same hi-hat,
    snare, and kick sounds we created in the last chapter. First we’ll declare those
    instruments, as shown in [Listing 13-3](#Lis13-3). Add this code to the Instruments
    section of *script.js*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建伴随歌曲的鼓点。我们将使用上一章中创建的相同的踩镲、小军鼓和低音鼓声。首先，我们将声明这些乐器，如[Listing 13-3](#Lis13-3)所示。将这段代码添加到*script.js*的乐器部分。
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-3: Declaring the
    drums</samp>'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-3: 声明鼓组</samp>'
- en: 'This code is identical to the code we wrote in the previous chapter, but to
    keep it a little more organized I’ve moved all of the drum setup code, including
    the reverb effect, into a single function called mkDrums (for “make drums”) ❶.
    This function returns an object with the three drums ❷. We’re using a new form
    of syntax for creating this object called *object literal shorthand syntax*. With
    this shorthand syntax, instead of typing out {hiHat: hiHat, snare: snare, kick:
    kick}, we just type {hiHat, snare, kick}. This works only if the property names
    are the same as the variable names.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '这段代码与我们在上一章编写的代码相同，但为了保持代码的组织性，我将所有的鼓组设置代码，包括混响效果，移动到一个名为mkDrums（“制作鼓组”）的单独函数中❶。这个函数返回一个包含三种鼓的对象❷。我们使用了一种新的语法来创建这个对象，叫做*对象字面量简写语法*。使用这种简写语法，我们不需要输入{hiHat:
    hiHat, snare: snare, kick: kick}，而只需输入{hiHat, snare, kick}。这种写法只有在属性名与变量名相同的情况下才有效。'
- en: Now that we’ve declared the drums, we’ll create the actual drumbeat pattern.
    We’ll use the same one-bar pattern that we developed in the previous chapter,
    with hi-hats on every eighth note and kick and snare sounds alternating every
    quarter note. Add [Listing 13-4](#Lis13-4) to the Sequencing section of the code.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经声明了鼓组，接下来我们将创建实际的鼓点模式。我们将使用在上一章中开发的相同的单小节模式，每个八分音符上都有踩镲声，低音鼓和小军鼓声每个四分音符交替出现。将[Listing
    13-4](#Lis13-4)添加到代码的序列部分。
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-4: The drumbeat
    sequences</samp>'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-4: 鼓点序列</samp>'
- en: Again, this is identical to code we wrote in [Chapter 12](chapter12.xhtml).
    We start with a helper function, mkSequence ❶, that takes in a pattern of x’s
    and dots and turns it into note information that Tone.Sequence can use. Then we
    store the patterns we want in a drumPattern object ❷ and generate the sequences
    for each instrument with Tone.Sequence.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这段代码与我们在[第12章](chapter12.xhtml)中编写的代码相同。我们从一个辅助函数mkSequence ❶开始，它接收一个由x和点组成的模式，并将其转换为Tone.Sequence可以使用的音符信息。然后，我们将想要的模式存储在drumPattern对象❷中，并使用Tone.Sequence为每个乐器生成序列。
- en: All that’s left to do to create the drumbeat is to schedule the sequences to
    play on loop for most of the duration of the song, as shown in [Listing 13-5](#Lis13-5).
    Add this code to the Song section of the *script.js* file.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 创建鼓点所剩下的工作就是安排序列循环播放，持续大部分歌曲时长，如[列表 13-5](#Lis13-5)所示。将这段代码添加到 *script.js* 文件的
    Song 部分。
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-5: Scheduling the
    drumbeat sequences</samp>'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 13-5：安排鼓点序列</samp>
- en: Here we tell the drums to start at the beginning of the song and keep playing
    for 44 bars. Load the page and click **Play,** and you should hear the same drums
    as before, but for much longer. When you get tired of listening, reload the page
    to stop the drums playing.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们告诉鼓在歌曲的开始处启动并持续演奏 44 小节。加载页面并点击 **Play**，你应该会听到和之前一样的鼓声，但会持续更长时间。当你听腻了时，可以重新加载页面停止鼓声的播放。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Adding the Bass Lines</samp>
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">添加低音线</samp>
- en: Next we’re going to add a couple of bass synths and have them play two separate
    bass lines. First we’ll create the synths, by adding the code in [Listing 13-6](#Lis13-6)
    to the end of the Instruments section (just before the Sequencing section).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加几个低音合成器，并让它们演奏两个独立的低音线。首先，我们通过将 [列表 13-6](#Lis13-6) 中的代码添加到 Instruments
    部分的末尾（紧接着 Sequencing 部分之前）来创建这些合成器。
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-6: Creating the
    bass instruments</samp>'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 13-6：创建低音乐器</samp>
- en: Here we declare two bass instruments called lowBass and highBass. Both use a
    synth we haven’t seen yet, called an FMSynth. *FM* is short for *frequency modulation*,
    and *FM synthesis* involves using one oscillator to modulate, or modify, the frequency
    of another oscillator. This kind of synthesis yields a richer sound than a plain
    oscillator, and it makes a good bass synth. There are a lot of parameters that
    can be modified in Tone.FMSynth (for example, the amount of modulation applied,
    the relationship between the frequencies of the two oscillators, the waveforms
    of the two oscillators, and so on), but we’ll mostly stick to the default values.
    All we’ll do is set the oscillator type ("triangle" for "lowBass" ❶ and "square"
    for highBass ❷), as well as the envelope and volume.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们声明了两个低音乐器，分别叫做 lowBass 和 highBass。它们都使用了一种我们尚未见过的合成器，叫做 FMSynth。*FM* 是
    *频率调制*（Frequency Modulation）的缩写，*FM 合成* 涉及使用一个振荡器来调制或修改另一个振荡器的频率。这种合成方式比单一振荡器产生的声音更丰富，也非常适合作为低音合成器。Tone.FMSynth
    中有很多可以调整的参数（例如，调制的程度、两个振荡器之间的频率关系、振荡器的波形等等），但我们将主要使用默认值。我们所做的仅仅是设置振荡器类型（"triangle"
    为 "lowBass" ❶ 和 "square" 为 highBass ❷），以及包络和音量。
- en: 'For generating the bass sequences, we’re going to use a slightly different
    technique from our current mkSequence helper function. That helper is great for
    things like drums, where you need only a single character to determine whether
    a note is played or not, but it doesn’t work for a bass line where we want to
    provide note names, which have at least two characters (like C3 or F#4). One notation
    we might choose for writing out a sequence could be something like:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成低音序列，我们将采用一种与当前的 mkSequence 辅助函数略有不同的技术。这个辅助函数非常适合用于像鼓这样的场景，在那里你只需要一个字符来决定一个音符是否被演奏，但它不适用于低音线，我们需要提供音符名称，而这些名称至少有两个字符（如
    C3 或 F#4）。我们可能选择的一种表示序列的方式可以是这样的：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The vertical pipe characters are used as divisions, and between each pair of
    pipes is either a note we want to play or a blank space, which represents a silence.
    (The sequence written out here is the start of the bass line for Ben E. King’s
    “Stand by Me.”)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直的管道字符用于分隔，每对管道之间是我们想要演奏的音符或空格，空格表示沉默。（这里写出的序列是 Ben E. King 的《Stand by Me》中的低音线的开头。）
- en: '[Listing 13-7](#Lis13-7) gives the definition of mkPipeSequence, which we’ll
    use for sequencing our bass lines. It takes a string like the one for “Stand by
    Me” and converts it into an array of note names and nulls. Insert this function
    into the Sequencing section of *script.js*, just after the definition of mkSequence.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 13-7](#Lis13-7) 给出了 mkPipeSequence 的定义，我们将用它来为低音线编排序列。它接收像《Stand by Me》中的字符串，并将其转换成音符名称和空值的数组。将此函数插入到
    *script.js* 的 Sequencing 部分，紧接着 mkSequence 的定义。'
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-7: The mkPipeSequence
    function</samp>'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 13-7：mkPipeSequence 函数</samp>
- en: This function uses split("|") to split the string by the pipe character. Using
    the “Stand by Me” example, this would give the array ["C3", " ", " ", "C3", "
    ", " ", "G2", "B2"]. We then map over each of these values. The trim method ❶
    removes any whitespace from the start or end of a string, so " ".trim() results
    in " ", an empty string. We replace any empty strings with nulls in the returned
    array and pass the note names through unchanged, resulting in a return value of
    ["C3", null, null, "C3", null, null, "G2", "B2"].
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数使用split("|")通过管道符分割字符串。以“Stand by Me”为例，这将返回数组["C3", " ", " ", "C3", " ",
    " ", "G2", "B2"]。然后我们对这些值进行映射。trim方法❶会去除字符串两端的任何空白，因此" ".trim()会返回""，一个空字符串。我们将返回数组中的所有空字符串替换为null，并将音符名称原样传递，最终返回值为["C3",
    null, null, "C3", null, null, "G2", "B2"]。
- en: Next we want to create the actual sequences for the two bass lines (we won’t
    be borrowing from “Stand by Me” here). Add the code in [Listing 13-8](#Lis13-8)
    to the end of the Sequencing section.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们要为两个低音线创建实际的序列（这里我们不会借用“Stand by Me”）。将[清单 13-8](#Lis13-8)中的代码添加到Sequencing部分的末尾。
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-8: The bass sequences</samp>'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 13-8：低音序列</samp>
- en: 'There are two bass parts here: the low one just plays three eighth notes per
    bar, while the high one plays eighth notes continuously.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个低音部分：低音部分每小节播放三个八分音符，而高音部分则连续播放八分音符。
- en: Finally, we need to schedule these sequences against the transport, as shown
    in [Listing 13-9](#Lis13-9). This code should be added to the end of the Song
    section.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要将这些序列与传输进行调度，如[清单 13-9](#Lis13-9)所示。此代码应添加到Song部分的末尾。
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-9: Scheduling the
    bass sequences</samp>'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 13-9：调度低音序列</samp>
- en: The low sequence starts at the beginning, and the high sequence starts after
    four bars. Both continue looping until partway through the 48th bar. This way,
    the bass parts will continue for a few bars after the drums stop.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 低音序列从一开始就启动，高音序列在四小节后开始。两者都将继续循环，直到48小节中途为止。这样，低音部分将在鼓声停止后继续几小节。
- en: If you now refresh the page and hit Play, you’ll hear the beginnings of a song!
    Not only do we have drums and bass, but we have some very basic structure, with
    the second bass line coming in after four bars and the drums ending before the
    bass. That bass solo at the end is by far the most dramatic part of the song as
    it currently stands. To hear just that part, you can modify the value of Tone.Transport.Position
    in the Event Handling section of the code. If you set it to "40:0:0" and reload,
    you’ll skip to the last eight bars of the song.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在刷新页面并点击播放，你将听到歌曲的开头！我们不仅有鼓和低音，还有一些非常基础的结构，第二个低音部分在四小节后加入，而鼓声在低音之前结束。当前歌曲中，最后的低音独奏是最具戏剧性的部分。要单独听这一部分，你可以在代码的事件处理部分修改Tone.Transport.Position的值。如果将其设置为“40:0:0”并重新加载，你将跳到歌曲的最后八小节。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Adding Chords</samp>
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">添加和弦</samp>
- en: Next we’ll fill out the song with some chords. This song will have two separate
    chord sequences, which we’ll schedule for different times in the song to give
    it some more structure and variety.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为歌曲添加一些和弦。这首歌将有两个独立的和弦序列，我们将为歌曲中的不同时间安排它们，以增加结构性和多样性。
- en: First we need to create the instrument that will play the chords. The code for
    this is in [Listing 13-10](#Lis13-10); insert this at the end of the Instruments
    section.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建播放和弦的乐器。相关代码在[清单 13-10](#Lis13-10)中；将其插入到乐器部分的末尾。
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-10: The chord synth</samp>'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 13-10：和弦合成器</samp>
- en: We need a PolySynth because the instrument will be playing more than one note
    at a time (that’s what a chord is). The PolySynth is based on a regular Synth,
    using the default amplitude envelope and a triangle wave oscillator.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个PolySynth，因为该乐器将同时播放多个音符（这就是和弦）。PolySynth基于常规的Synth，使用默认的振幅包络和三角波振荡器。
- en: Next we’ll create the sequencing code for the chords. Rather than writing a
    chord out manually each time we want to play it in a sequence, we’ll create some
    named chords, and then create sequences using those chord names. Insert the code
    in [Listing 13-11](#Lis13-11) at the end of the Sequencing section.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为和弦创建编排代码。与其每次想要在序列中播放一个和弦时手动写出它，我们将创建一些命名的和弦，然后使用这些和弦名称创建序列。将[列表13-11](#Lis13-11)中的代码插入到编排部分的末尾。
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-11: Sequencing the
    chords</samp>'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表13-11：和弦编排</samp>
- en: The first thing we do is create an object called chords with the four chords
    that we’ll be sequencing ❶. We could call them anything, but for simplicity I’m
    using the numbers 1, 2, 3, and 4 to refer to the chords (though note that because
    these are object keys, the numbers are interpreted as strings). Each chord number
    corresponds to an array of note names, which is the format our PolySynth requires.
    The two chord sequences will just be various orderings of these four chords.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个名为chords的对象，包含我们将要编排的四个和弦 ❶。我们可以给它们任何名字，但为了简化，我使用数字1、2、3和4来表示这些和弦（不过请注意，由于这些是对象的键，数字会被当作字符串处理）。每个和弦编号对应一个音符名称的数组，这是PolySynth所需的格式。这两个和弦序列只是这四个和弦的不同排列。
- en: Next comes a helper function for playing the chords ❷. This playChord function
    takes the time to play the chord and the name of the chord as a string (one of
    the numbers 1 through 4). Then it looks in the chords object and retrieves the
    array of notes keyed by the given chord name ❸. The function ends by calling triggerAttackRelease
    on the chordSynth, passing the array of note names. Because it’s a PolySynth,
    our chordSynth instrument is able to play all the notes in the chord at once.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一个用于播放和弦的辅助函数 ❷。这个playChord函数接受播放和弦的时间和和弦的名称（作为字符串，取值为1到4中的一个）。然后，它在chords对象中查找并提取由给定和弦名称键入的音符数组
    ❸。函数的最后会调用triggerAttackRelease方法来触发和弦合成器，传入音符名称的数组。由于它是PolySynth，我们的和弦合成器可以同时演奏和弦中的所有音符。
- en: Finally, we make the two sequences, called chordSequence1 ❹ and chordSequence2
    ❺. The callback for both of these sequences is our playChord function. We’re also
    using the same mkSequence helper we used for sequencing the drums earlier, but
    in this case the values in the string are either dots (silence) or chord names.
    Unlike with our bass lines, mkSequence works here because each chord name is a
    single character, and we have our playChord function to reinterpret the chord
    names as pitches. As with the drums, we’re passing "8n" as the last argument to
    Tone.Sequence, meaning that each dot or chord name is an eighth note. The first
    sequence is 32 eighth notes long, or 4 bars. The second sequence is 16 eighth
    notes long, or 2 bars.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建了两个序列，分别叫做chordSequence1 ❹和chordSequence2 ❺。这两个序列的回调函数都是我们的playChord函数。我们还使用了之前用于编排鼓点的mkSequence辅助函数，但在这里，字符串中的值要么是点（静默），要么是和弦名称。与低音线不同，mkSequence在这里可以正常工作，因为每个和弦名称都是一个单独的字符，我们有playChord函数来将和弦名称重新解释为音高。与鼓点一样，我们将"8n"作为最后一个参数传递给Tone.Sequence，这意味着每个点或和弦名称代表一个八分音符。第一个序列有32个八分音符长，或者4小节。第二个序列有16个八分音符长，或者2小节。
- en: Now we’ll actually schedule the sequences against the transport. Add the code
    in [Listing 13-12](#Lis13-12) to the end of the Song section.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将真正安排这些序列与时间轨道的同步。将[列表13-12](#Lis13-12)中的代码添加到Song部分的末尾。
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-12: Scheduling the
    chord sequences</samp>'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表13-12：安排和弦序列</samp>
- en: The first sequence starts playing after 8 bars and repeats through the end of
    bar 24, which is 16 bars, or four complete loops of the first sequence. Then the
    second sequence takes over and runs through bar 32; this is 8 bars, or four complete
    loops of the second sequence. Finally, the first sequence returns, playing through
    bar 40; this is also 8 bars, or two complete loops of the first sequence.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个序列在8小节后开始播放，并持续播放到第24小节结束，这时已经播放了16小节，或者说是第一个序列的四个完整循环。接下来，第二个序列接管，持续播放到第32小节；这时播放了8小节，或者是第二个序列的四个完整循环。最后，第一个序列重新回归，播放到第40小节；这也是8小节，或者是第一个序列的两个完整循环。
- en: Try refreshing your browser and listening to the song again. Make sure to set
    Tone.Transport.position to "0:0:0" in the event handler to play from the beginning.
    If you don’t want to wait eight bars for the chords to come in, set it to "8:0:0"
    to start playing where the chords start.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试刷新浏览器并再次聆听歌曲。确保在事件处理程序中将 Tone.Transport.position 设置为 "0:0:0" 来从头开始播放。如果你不想等八小节才能进入和弦，设置为
    "8:0:0" 就能从和弦开始播放。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Playing a Tune</samp>
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">播放旋律</samp>
- en: Now that we have drums, bass, and chords, the only thing our song is missing
    is a tune. We’re going to use the trumpet sampler we created in the last chapter,
    and we’ll sequence the notes using Tone.Part, which lets us easily schedule the
    timing of each note in the tune separately.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了鼓、贝斯和和弦，我们的歌曲唯一缺少的就是旋律。我们将使用在上一章创建的小号采样器，并使用 Tone.Part 来安排音符，通过它我们可以轻松地分别安排旋律中每个音符的时机。
- en: First we’ll create the sampler, like we did in [Chapter 12](chapter12.xhtml).
    Add the code in [Listing 13-13](#Lis13-13) to the end of the Instruments section.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们会创建采样器，就像在[第12章](chapter12.xhtml)中做的那样。将[列表13-13](#Lis13-13)中的代码添加到乐器部分的末尾。
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-13: Declaring the
    trumpet sampler</samp>'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表13-13：声明小号采样器</samp>
- en: Here we’re creating a Tone.Sampler instrument with the same three samples as
    in the previous chapter. Note, however, that we’re no longer using the sampler’s
    onload property to tell it what to do once the samples have been downloaded. This
    is a bit of a cheat, but I know that the trumpets aren’t going to play at the
    beginning of the song, and I’m banking on the fact that by the time they come
    in, the samples will have downloaded. The proper thing to do would be to hide
    the Play button until the samples have finished downloading, but that would add
    extra complexity to this project.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个 Tone.Sampler 乐器，使用与上一章相同的三个样本。不过，请注意，我们不再使用采样器的 onload 属性来告诉它在样本下载完成后应该做什么。这有点偷懒，但我知道小号不会在歌曲开始时演奏，我依赖于在它们进入时样本已经下载完成。正确的做法是隐藏播放按钮，直到样本下载完成，但那样会增加项目的复杂性。
- en: '[Listing 13-14](#Lis13-14) shows the code for sequencing the notes of the tune.
    Add this code to the end of the Sequencing section.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表13-14](#Lis13-14)展示了为旋律安排音符的代码。将此代码添加到安排部分的末尾。'
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-14: Sequencing the
    tune</samp>'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表13-14：旋律音符安排</samp>
- en: 'As a reminder, the Tone.Part constructor takes two arguments: a callback to
    play for each time/note pair, and a list of time/note pairs. Here, the callback
    plays a long note ("1n", or a whole bar) on the trumpet sampler for every time/note
    pair. The first note is played at "0:0:0" and the second is played two beats later,
    at "0:2:0". Because the notes are about four beats long, they will overlap—I did
    this intentionally to add some interest to the tune.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒一下，Tone.Part 构造函数接受两个参数：一个用于播放每个时间/音符对的回调函数和一个时间/音符对的列表。在这里，回调函数会为每个时间/音符对在小号采样器上播放一个长音符（"1n"，即一个完整的小节）。第一个音符在
    "0:0:0" 播放，第二个音符则在两拍后播放，即 "0:2:0"。由于音符大约四拍长，它们会重叠——我故意这么做，以增加旋律的趣味性。
- en: The tune won’t play yet because we haven’t said *when* to play it. Even though
    each note has a time, these times are relative to when the part is scheduled to
    begin. To schedule the part, we just have to add some code to the end of the Song
    section, as shown in [Listing 13-15](#Lis13-15).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这首曲子还不会播放，因为我们还没有指定*何时*播放。即使每个音符都有一个时间，这些时间是相对于部分开始安排的时间而言的。为了安排这个部分，我们只需在歌曲部分的末尾添加一些代码，如[列表13-15](#Lis13-15)所示。
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-15: Scheduling the
    trumpet part</samp>'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表13-15：安排小号部分</samp>
- en: Unlike the sequences we scheduled so far, the part doesn’t loop, so it doesn’t
    need a stop time. We’re telling Tone.js to start the trumpet part after 16 bars,
    which means that all the times given in the part are relative to "16:0:0". We
    can add the two times together to get the actual time when each note is scheduled
    (for example, "4:2:0" + "16:0:0" is "20:2:0").
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们到目前为止安排的序列不同，这一部分没有循环，因此不需要停止时间。我们告诉 Tone.js 在16小节后开始小号部分，这意味着该部分中的所有时间都相对于"16:0:0"。我们可以将两个时间加在一起，得到每个音符的实际安排时间（例如，"4:2:0"
    + "16:0:0" 就是 "20:2:0"）。
- en: Now you can listen to the complete song! Don’t forget to reset Tone .Transport.position
    to "0:0:0" before you refresh the page.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以听完整首歌曲了！在刷新页面之前，别忘了将 Tone.Transport.position 重置为 "0:0:0"。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Complete Code</samp>
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">完整代码</samp>
- en: We’ve been adding code all over the file, so just in case you got something
    mixed up, or if you just want to see how it should all look, [Listing 13-16](#Lis13-16)
    gives the entire contents of *script.js*.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在文件中各个地方添加了代码，所以如果你把某些内容弄混了，或者只是想看看最终效果，[清单 13-16](#Lis13-16)给出了*script.js*的完整内容。
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-16: The complete
    code</samp>'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 13-16：完整代码</samp>
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">总结</samp>
- en: In this chapter, you coded a song in JavaScript! Now that you’re used to working
    with Tone.js, you can use it to make your own song. Another fun thing to try is
    algorithmic music, where instead of writing out a fixed song, you write code that
    semirandomly produces new music each time it runs. One simple way to try this
    out is to come up with a list of nice-sounding chords, and then randomly choose
    which one to play on any given beat (you could use Tone.Loop to accomplish this,
    as we did in [Listing 12-12](chapter12.xhtml#Lis12-12) in the previous chapter).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你用 JavaScript 编写了一首歌！现在你已经习惯使用 Tone.js，你可以用它来创作自己的歌曲。另一个有趣的尝试是算法音乐，在这种方式下，你不是写出固定的歌曲，而是编写代码，每次运行时都会随机生成新的音乐。一种简单的尝试方法是列出一组听起来不错的和弦，然后随机选择某个和弦在某个特定的节拍上演奏（你可以使用
    Tone.Loop 来实现这一点，就像我们在[清单 12-12](chapter12.xhtml#Lis12-12)中所做的那样）。
