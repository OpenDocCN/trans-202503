- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">1</samp> <samp class="SANS_Dogma_OT_Bold_B_11">MULTIPLE
    BUTTONS WITH ONE ANALOG INPUT</samp>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">1</samp> <samp class="SANS_Dogma_OT_Bold_B_11">使用一个模拟输入读取多个按钮</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: Rather than using multiple digital inputs for multiple buttons, you can read
    many buttons with just one analog input pin. This not only reduces the number
    of input/output (I/O) pins used on your Arduino but can also save you money since
    you won’t need any external integrated circuits (ICs), such as shift registers
    or port expanders.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与其使用多个数字输入来读取多个按钮，你可以通过一个模拟输入引脚读取多个按钮。这不仅减少了Arduino上使用的输入/输出（I/O）引脚数量，还可以节省你的开支，因为你不需要任何外部集成电路（IC），例如移位寄存器或端口扩展器。
- en: 'In this chapter, you’ll learn to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习：
- en: Use voltage dividers and buttons to create different voltages, differentiating
    buttons connected to an analog-to-digital converter (ADC) pin
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用电压分压器和按钮创建不同的电压，区分连接到模拟到数字转换器（ADC）引脚的按钮
- en: Read three or six buttons with one analog input
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一个模拟输入读取三个或六个按钮
- en: Build a 12-button keypad that can be read with one analog input
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个12按钮键盘，可以通过一个模拟输入读取
- en: <samp class="SANS_Futura_Std_Bold_B_11">Voltage Dividers</samp>
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">电压分压器</samp>
- en: The multiple-button method used in this chapter is based on your Arduino’s analog-to-digital
    converter (ADC) pins, which return a value relative to the voltage being connected
    to the ADC pin. Recall that your Arduino Uno or compatible board has six ADC pins,
    as shown in [Figure 1-1](chapter1.xhtml#fig1-1).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用的多按钮方法基于你的Arduino的模拟到数字转换器（ADC）引脚，这些引脚返回与连接到ADC引脚的电压相关的值。回想一下，你的Arduino
    Uno或兼容板有六个ADC引脚，如[图1-1](chapter1.xhtml#fig1-1)所示。
- en: '![A PHOTO OF THE ARDUINO UNO’S ANALOG INPUT PINS](../images/fig1-1.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![Arduino Uno模拟输入引脚的照片](../images/fig1-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-1: Analog inputs on
    the Arduino Uno</samp>'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图1-1：Arduino Uno的模拟输入</samp>
- en: 'To build circuits that allow for reading up to 12 buttons at once via a single
    ADC pin, you’ll need to use *voltage division*: the process of using two or more
    resistors to reduce a larger voltage to multiple smaller voltages, which the Arduino
    can read one at a time via an analog input pin. [Figure 1-2](chapter1.xhtml#fig1-2)
    shows how you’d use two resistors for this purpose.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 若要构建电路，以便通过一个ADC引脚一次读取最多12个按钮，你需要使用*电压分压*：即使用两个或更多电阻将较大的电压分压成多个较小的电压，Arduino可以通过模拟输入引脚逐个读取这些电压。[图1-2](chapter1.xhtml#fig1-2)展示了如何使用两个电阻来实现这一目的。
- en: '![A SCHEMATIC OF A BASIC VOLTAGE DIVIDER](../images/fig1-2.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![基本电压分压器的原理图](../images/fig1-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-2: The schematic for
    a basic voltage divider</samp>'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图1-2：基本电压分压器的原理图</samp>
- en: 'You can calculate the output voltage (V[out]) with the following formula:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下公式计算输出电压（V[out]）：
- en: '![](../images/pg2-1.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/pg2-1.png)'
- en: Substituting resistors of the same value and any voltage will result in an output
    voltage V[out] that is half the input voltage V[in]. For example, if both R1 and
    R2 are 1 kΩ and you have a 5 V input voltage, the calculation is V[out] = 5 (1,000
    / (1,000 + 1,000)), giving you a V[out] of 2.5 V.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 用相同值的电阻和任何电压替代时，将导致输出电压V[out]为输入电压V[in]的一半。例如，如果R1和R2都是1 kΩ，并且你有一个5 V的输入电压，那么计算为V[out]
    = 5 (1,000 / (1,000 + 1,000))，这将得到2.5 V的V[out]。
- en: Resistors don’t have an exact value; the more accurate the resistor, the more
    difficult it is to manufacture. You can choose between resistors of various tolerances,
    such as 5 percent or 1 percent. For example, a 1 kΩ, 1 percent resistor has a
    value between 990 and 1,010 Ω. When building voltage dividers or circuits in general,
    always try to use resistors with a 1 percent tolerance—they aren’t much more expensive
    than 5 percent resistors, and your results will be more accurate.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 电阻没有精确的值；电阻越精确，制造起来就越困难。你可以选择不同公差的电阻，例如5%或1%。例如，一个1 kΩ、1%公差的电阻，其值在990和1,010
    Ω之间。在构建电压分压器或一般电路时，尽量使用公差为1%的电阻——它们与5%电阻相比价格差不多，但你的结果会更精确。
- en: When building a voltage divider, ensure that your resistors can handle the power
    you plan to run through them. For example, if you’re using 0.25 W resistors and
    need to divide 24 V DC into 12 V, you can draw only 20 mA through the divider
    at most. Use the formula *W* = *V* × *A* (Watts = Volts (DC) × Amps (current))
    to help you calculate how much power is used.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建电压分压器时，确保你的电阻能够承受你计划通过它们的功率。例如，如果你使用的是 0.25 W 的电阻，并且需要将 24 V DC 分压为 12 V，你最多只能通过分压器流过
    20 mA 的电流。使用公式 *W* = *V* × *A*（瓦特 = 电压（DC）× 电流（安培））来帮助你计算消耗的功率。
- en: Combining the example voltage divider in [Figure 1-2](chapter1.xhtml#fig1-2)
    with two buttons results in the circuit shown in [Figure 1-3](chapter1.xhtml#fig1-3).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将 [图 1-2](chapter1.xhtml#fig1-2) 中的示例电压分压器与两个按钮结合，得到如 [图 1-3](chapter1.xhtml#fig1-3)
    所示的电路。
- en: '![A SCHEMATIC FOR THE VOLTAGE DIVIDER CONTROLLED BY TWO BUTTONS](../images/fig1-3.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![由两个按钮控制的电压分压器原理图](../images/fig1-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-3: A voltage divider
    with two buttons</samp>'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 1-3：带有两个按钮的电压分压器</samp>
- en: When you press the first button, the voltage at point A should be 2.5 V DC,
    as the current flows from the 5 V source and is divided by the two resistors.
    When you press the second button, the voltage measured at point B should be 0
    V DC, as B is connected directly to GND. If you connect points A and B to an analog
    input, you should be able to detect which button has been pressed, as the values
    returned by the ADC will be different for each button (in theory, the values should
    be 512 for button 1 and 0 for button 2). You’re reading two buttons with only
    one input!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当你按下第一个按钮时，A 点的电压应为 2.5 V DC，因为电流从 5 V 电源流出并通过两个电阻分压。当按下第二个按钮时，B 点的电压应为 0 V
    DC，因为 B 点直接连接到 GND。如果你将 A 点和 B 点连接到模拟输入端口，你应该能够检测到按下的是哪个按钮，因为 ADC 返回的值对于每个按钮会有所不同（理论上，按钮
    1 的值应该为 512，按钮 2 的值应该为 0）。你只用一个输入端口读取了两个按钮的状态！
- en: If you press two or more buttons at the same time, another voltage—determined
    by the combination of resistor dividers relative to the buttons pressed—should
    be returned to the ADC. The simplest way to determine the value is to build the
    circuit and test for yourself. With voltage division, you can use a series of
    buttons and resistors of the same value to generate different output voltages
    that your Arduino’s analog input can read, enabling you to differentiate between
    each button.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你同时按下两个或更多按钮，另一个电压—由按下的按钮与电阻分压器的组合决定—应返回给 ADC。确定值的最简单方法是搭建电路并进行测试。通过电压分压，你可以使用一系列相同值的按钮和电阻，生成不同的输出电压，使得
    Arduino 的模拟输入能够读取，从而区分每个按钮。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #1: Three Buttons with One
    Analog Input</samp>'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #1：三个按钮与一个模拟输入</samp>'
- en: 'Let’s start with a simple example of multiple button use: reading three buttons
    with one analog input. You’ll need the following parts for this project:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个简单的多按钮使用示例开始：通过一个模拟输入读取三个按钮。你需要以下零件来完成此项目：
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块 Arduino Uno 或兼容板及 USB 电缆
- en: Three 1 kΩ, 0.25 W, 1 percent resistors
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三个 1 kΩ、0.25 W、1% 的电阻
- en: One 10 kΩ, 0.25 W, 1 percent resistor
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 10 kΩ、0.25 W、1% 的电阻
- en: Three tactile buttons
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三个触觉按钮
- en: A solderless breadboard
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个无焊接面包板
- en: Male-to-male jumper wires
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公对公跳线
- en: Assemble the circuit as shown in [Figure 1-4](chapter1.xhtml#fig1-4) on the
    solderless breadboard and connect the points labeled 5V, GND, and A0 to the Arduino’s
    5V, GND, and A0 pins, respectively.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 按照 [图 1-4](chapter1.xhtml#fig1-4) 所示的电路在无焊接面包板上组装电路，并将标有 5V、GND 和 A0 的点分别连接到
    Arduino 的 5V、GND 和 A0 引脚。
- en: '![A SCHEMATIC FOR PROJECT #1](../images/fig1-4.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #1 的原理图](../images/fig1-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-4: The circuit for
    Project #1</samp>'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 1-4：项目 #1 的电路</samp>'
- en: 'Now enter and upload the code for Project #1 to your Arduino. Wait a moment;
    then open the Serial Monitor in the Arduino IDE and start pressing the buttons
    one at a time. When you aren’t pressing any buttons, the value returned by the
    ADC should hover around 1,010\. Experiment with pressing buttons 1, 2, and 3 to
    return different values, as shown in [Figure 1-5](chapter1.xhtml#fig1-5).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '现在输入并上传项目 #1 的代码到你的 Arduino。稍等片刻，然后在 Arduino IDE 中打开串口监视器，开始依次按下按钮。当你没有按下任何按钮时，ADC
    返回的值应保持在大约 1,010 左右。试着按下按钮 1、2 和 3，查看不同的返回值，如 [图 1-5](chapter1.xhtml#fig1-5) 所示。'
- en: '![A SCREENSHOT OF A SERIAL MONITOR DISPLAYING THE EXAMPLE PROJECT #1 OUTPUT](../images/fig1-5.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![显示示例项目 #1 输出的串口监视器截图](../images/fig1-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-5: Example output
    from Project #1</samp>'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 1-5：项目 #1 的示例输出</samp>'
- en: 'Let’s take a look at the code to see how this works:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代码，了解它是如何工作的：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The code in Project #1 takes the value measured by analog pin A0 ❶ and displays
    it on the Serial Monitor ❷. This is to demonstrate the different analog values
    generated by the three-button circuit. After you upload the code, open the Serial
    Monitor and start pressing buttons. The example returned a value between 700 and
    704 when button 1 was pressed, between 383 and 385 when button 2 was pressed,
    and 0 when button 3 was pressed. Your values may vary slightly because of the
    tolerance of the resistors.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '项目 #1 中的代码读取模拟引脚 A0 ❶ 测得的值，并在串口监视器 ❷ 上显示出来。这是为了演示三按钮电路生成的不同模拟值。上传代码后，打开串口监视器并开始按下按钮。当按下按钮
    1 时，示例返回的值介于 700 和 704 之间；按下按钮 2 时，值介于 383 和 385 之间；按下按钮 3 时，值为 0。由于电阻的公差，您的值可能会略有不同。'
- en: As you press buttons, the current flows through at least one resistor as your
    R1 and, depending on the button pressed, through none or some of the resistors,
    which act as voltage dividers.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当按下按钮时，电流至少会通过一个电阻作为您的 R1，并且根据所按的按钮，电流会通过某些电阻，这些电阻作为电压分压器。
- en: Using the resistor divider formula, you can calculate that pressing button 1
    gives an R1 value of 1 kΩ and an R2 value of 2 kΩ (the sum of the resistors below
    the junction with the button). Using V[out] = 5 (2,000 / (1,000 + 2,000)), the
    theoretical voltage presented to the ADC is 3.33 V. If you press button 2, V[out]
    = 5 (1,000 / (1,000 + 2,000)) results in 1.66 V. If you press button 3, V[out]
    = 5 (0 / (3,000 + 0)) results in 0 V, as the ADC is simply connecting straight
    to GND.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用电阻分压公式，您可以计算出按下按钮 1 时，R1 值为 1 kΩ，R2 值为 2 kΩ（按钮连接点以下的电阻之和）。使用 V[out] = 5 (2,000
    / (1,000 + 2,000))，理论上呈现给 ADC 的电压为 3.33 V。如果按下按钮 2，则 V[out] = 5 (1,000 / (1,000
    + 2,000)) 结果为 1.66 V。如果按下按钮 3，则 V[out] = 5 (0 / (3,000 + 0)) 结果为 0 V，因为 ADC 直接连接到
    GND。
- en: Finally, if you press no buttons, the value the ADC returns should hover above
    1,010\. The project enables this using the 10 kΩ pullup resistor in the circuit,
    which bridges the 5 V supply to the analog input. Without this resistor, the ADC
    would “float,” reporting random values that may fall into the ranges of the other
    buttons. This is important, as we need a constant value range to be returned when
    no buttons are pressed.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果没有按下任何按钮，ADC 返回的值应接近 1,010。该项目通过电路中的 10 kΩ 上拉电阻实现此功能，电阻将 5V 电源与模拟输入连接。如果没有这个电阻，ADC
    将“浮动”，报告随机值，这些值可能会落入其他按钮的范围内。这一点很重要，因为我们需要在没有按下任何按钮时返回一个恒定的值范围。
- en: In practice, the values returned by the ADC will vary a little. For example,
    the 5V pin on the Arduino (if powered via USB) measures slightly less, as some
    voltage is lost through the microcontroller, which affects the calculation in
    the ADC code. Always test your code with the Arduino powered by your intended
    power supply (USB or external DC power) to ensure accuracy with button-reading
    code.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 实际操作中，ADC 返回的值会有些许变化。例如，Arduino 的 5V 引脚（如果通过 USB 供电）测得的值略低，因为一些电压在微控制器中损失，这会影响
    ADC 代码中的计算。始终使用您预期的电源（USB 或外部 DC 电源）为 Arduino 供电，并测试代码，以确保按钮读取代码的准确性。
- en: Now that you’ve experimented with three buttons, let’s try a more complex design.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经实验了三个按钮，我们来尝试一个更复杂的设计。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #2: Six Buttons with One Analog
    Input</samp>'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #2：六个按钮与一个模拟输入</samp>'
- en: 'This project reads six buttons from one analog pin, with an improved sketch
    for button status reporting. You’ll need the following parts:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目通过一个模拟引脚读取六个按钮，并提供改进的按钮状态报告草图。您将需要以下部件：
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块 Arduino Uno 或兼容板以及 USB 电缆
- en: Six 1 kΩ, 0.25 W, 1 percent resistors
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 六只 1 kΩ、0.25 W、1% 的电阻
- en: One 1 kΩ, 0.25 W, 1 percent resistor
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一只 1 kΩ、0.25 W、1% 的电阻
- en: Six tactile buttons
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 六个触觉按钮
- en: A solderless breadboard
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块无焊接面包板
- en: Male-to-male jumper wires
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公对公跳线
- en: Assemble the circuit as shown in [Figure 1-6](chapter1.xhtml#fig1-6) on the
    solderless breadboard and connect the points labeled 5V, GND, and A0 to the Arduino’s
    5V, GND, and A0 pins, respectively.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 按照 [图 1-6](chapter1.xhtml#fig1-6) 所示，在无焊接面包板上组装电路，并将标记为 5V、GND 和 A0 的点分别连接到
    Arduino 的 5V、GND 和 A0 引脚。
- en: '![THE SCHEMATIC FOR PROJECT #2’S CIRCUIT](../images/fig1-6.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #2 的电路原理图](../images/fig1-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-6: The circuit for
    Project #2</samp>'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图1-6：项目 #2 的电路</samp>'
- en: 'Now enter and upload the following sketch to your Arduino:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在输入并上传以下草图到你的Arduino：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To simplify using the button circuit, the custom <samp class="SANS_TheSansMonoCd_W5Regular_11">analogButton()</samp>
    function ❶ returns the number of the button being pressed, or 0 if nothing is
    pressed. The function takes the reading from analog pin A0 ❷ and compares it against
    the expected ranges returned for each button press ❸. The sketch returns the button
    number as the result of the <samp class="SANS_TheSansMonoCd_W5Regular_11">analogButton()</samp>
    function ❹. The custom function in the main loop checks for a button press ❺,
    while a <samp class="SANS_TheSansMonoCd_W5Regular_11">switch…case</samp> function
    acts on different button presses ❻.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化按钮电路的使用，自定义的 <samp class="SANS_TheSansMonoCd_W5Regular_11">analogButton()</samp>
    函数 ❶ 返回被按下的按钮编号，如果没有按钮被按下，则返回0。该函数从模拟引脚A0 ❷ 获取读数，并将其与每个按钮按下时返回的期望范围进行比较 ❸。该草图返回按钮编号，作为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">analogButton()</samp> 函数的结果 ❹。主循环中的自定义函数检查按钮是否被按下
    ❺，而 <samp class="SANS_TheSansMonoCd_W5Regular_11">switch…case</samp> 函数则根据不同的按钮按下执行相应操作
    ❻。
- en: 'Your required ranges from the analog input will vary; use the sketch from Project
    #1 to determine the exact ranges required for use in this project.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '你从模拟输入获取的所需范围会有所不同；使用项目 #1 中的草图来确定本项目中需要使用的确切范围。'
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #3: A 12-Button Keypad with
    One Analog Input</samp>'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #3：一个带有一个模拟输入的12按钮键盘</samp>'
- en: 'This project expands the circuit in Project #2 to 12 buttons to create a larger
    final design that uses its own Arduino library. Using this library reduces the
    code required in the main sketch used to read the buttons. It’s possible to build
    this circuit on a solderless breadboard, but I recommend you download the PCB
    files for this project and make your own permanent version.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '本项目将项目 #2 的电路扩展至12个按钮，创建一个更大的最终设计，并使用自己的Arduino库。使用这个库可以减少读取按钮所需的主草图中的代码。虽然可以在无焊接面包板上搭建这个电路，但我推荐你下载本项目的PCB文件并制作一个永久版。'
- en: 'If you’re using the breadboard, you’ll need the following parts:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用面包板，你将需要以下部件：
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Arduino Uno或兼容板和USB线
- en: Twelve 1 kΩ, 0.25 W, 1 percent resistors
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 十二个1 kΩ, 0.25 W, 1% 的电阻
- en: One 10 kΩ, 0.25 W, 1 percent resistor
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个10 kΩ, 0.25 W, 1% 的电阻
- en: Twelve tactile buttons
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 十二个触觉按钮
- en: A solderless breadboard
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个无焊接面包板
- en: Male-to-male jumper wires
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公对公跳线
- en: 'If you’re using the PCB, you’ll need the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用PCB，你将需要以下部件：
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Arduino Uno或兼容板和USB线
- en: Twelve 1 kΩ, 0.25 W, 1 percent resistors
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 十二个1 kΩ, 0.25 W, 1% 的电阻
- en: One 1 kΩ, 0.25 W, 1 percent resistor
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个1 kΩ, 0.25 W, 1% 的电阻
- en: Twelve 6 × 6 × 4.3 mm tactile buttons
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 十二个6 × 6 × 4.3 mm 触觉按钮
- en: 1 × 3 inline 2.54 mm header pins
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 × 3 排 2.54 mm 排头针
- en: Male-to-female jumper wires
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公对母跳线
- en: '[Figure 1-7](chapter1.xhtml#fig1-7) shows the schematic for this project.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[图1-7](chapter1.xhtml#fig1-7) 显示了本项目的电路原理图。'
- en: '![THE SCHEMATIC FOR PROJECT #3](../images/fig1-7.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #3 的电路原理图](../images/fig1-7.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-7: The schematic for
    Project #3</samp>'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图1-7：项目 #3 的电路原理图</samp>'
- en: If you’re building the PCB circuit, the parts are labeled so you can easily
    position the components on the PCB, as shown in [Figure 1-8](chapter1.xhtml#fig1-8).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在构建PCB电路，部件上会有标签，帮助你将组件准确放置在PCB上，如[图1-8](chapter1.xhtml#fig1-8)所示。
- en: '![THE TOP SIDE OF THE PCB FOR PROJECT #3](../images/fig1-8.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #3 的PCB顶面](../images/fig1-8.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-8: The top of the
    PCB for Project #3</samp>'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图1-8：项目 #3 的PCB顶面</samp>'
- en: Fit and solder the resistors and then the buttons. In general, when assembling
    circuits on PCBs, always start with the lowest-height parts first, and then work
    toward the largest or bulkiest items. The inline header pins are usually sold
    in strips of 40 pins, so you’ll need to trim off a 3-pin section to use with this
    project.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 安装并焊接电阻后再安装按钮。通常，在PCB上组装电路时，应首先从最低高度的部件开始，然后逐步安装较大或较重的部件。排头针通常以40针为一条出售，因此你需要修剪出一段3针的部分来使用于本项目。
- en: Once assembled, your project should resemble the board shown in [Figure 1-9](chapter1.xhtml#fig1-9).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦组装完成，您的项目应该类似于[图1-9](chapter1.xhtml#fig1-9)所示的电路板。
- en: '![THE COMPLETED TOP SIDE OF THE PROJECT #3 PCB](../images/fig1-9.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![项目#3 PCB的完成正面](../images/fig1-9.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-9: The completed Project
    #3 PCB</samp>'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图1-9：完成的项目#3 PCB</samp>
- en: Now connect your circuit to the Arduino via the 5V, GND, and A0 pins, as in
    [Figure 1-10](chapter1.xhtml#fig1-10).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照[图1-10](chapter1.xhtml#fig1-10)所示，通过5V、GND和A0引脚将电路连接到Arduino。
- en: '![A PHOTO OF A KEYPAD CONNECTED TO THE ARDUINO UNO](../images/fig1-10.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![连接到 Arduino Uno 的键盘照片](../images/fig1-10.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-10: Keypad connected
    to the Arduino Uno</samp>'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图1-10：连接到Arduino Uno的键盘</samp>
- en: 'Next, determine the analog values for each button to insert into the library’s
    source file by uploading the sketch from Project #1\. Open the Serial Monitor
    and press each button in turn, noting the value with the monitor. You can use
    these figures to make ranges for the library for this project.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过从项目#1上传草图，确定每个按钮的模拟值，并将其插入到库的源文件中。打开串行监视器，依次按下每个按钮，并记录监视器显示的值。您可以使用这些值为该项目创建库的范围。
- en: 'To simplify using the keypad, install the following analogkeypad library, whose
    three files are listed next. (For a refresher on writing and installing your own
    Arduino library, see [Appendix A](appendix.xhtml).) The following code is the
    source file; use the sketch from Project #1 and the keypad for this project to
    determine your <samp class="SANS_TheSansMonoCd_W5Regular_11">ADCvalue</samp> ranges.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化键盘的使用，安装以下模拟键盘库，接下来的三个文件列出了该库的内容。（有关编写和安装您自己的Arduino库的详细信息，请参见[附录A](appendix.xhtml)。）以下代码是源文件；使用项目#1中的草图和本项目的键盘来确定您的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">ADCvalue</samp>范围。
- en: '[PRE2]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here’s the header file:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是头文件：
- en: '[PRE3]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here’s the *KEYWORDS.TXT* file:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这是*KEYWORDS.TXT*文件：
- en: '[PRE4]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'With the library installed, upload the matching sketch for Project #3:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 安装库后，上传项目#3的匹配草图：
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This sketch has the same results as Project #2 but allows for additional buttons
    in the main loop. It first includes the analogkeypad library ❶ and starts an instance
    of the keypad; next it retrieves the button number pressed via the library function
    ❷. The sketch then sends the button number to the Serial Monitor in the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">switch…case</samp> function ❸.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图的结果与项目#2相同，但允许在主循环中添加更多按钮。它首先包含模拟键盘库❶，并启动键盘的一个实例；接下来，通过库函数❷获取按下的按钮编号。然后，草图将按钮编号发送到串行监视器，在<samp
    class="SANS_TheSansMonoCd_W5Regular_11">switch…case</samp>函数❸中显示。
- en: Once you have uploaded the sketch, open the Serial Monitor and press the buttons
    in turn. This should result in output like that shown in [Figure 1-11](chapter1.xhtml#fig1-11).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 上传草图后，打开串行监视器并依次按下按钮。这应该会产生类似于[图1-11](chapter1.xhtml#fig1-11)所示的输出。
- en: '![A SCREENSHOT OF AN EXAMPLE OUTPUT IN THE SERIAL MONITOR](../images/fig1-11.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![串行监视器中示例输出的截图](../images/fig1-11.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 1-11: Example output
    from Project #3</samp>'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图1-11：项目#3的示例输出</samp>
- en: You can use this sketch in your own projects, simply interrogating the keypad
    when required as you use the library and <samp class="SANS_TheSansMonoCd_W5Regular_11">readKeypad()</samp>
    function.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在自己的项目中使用此草图，只需在需要时查询键盘，同时使用库和<samp class="SANS_TheSansMonoCd_W5Regular_11">readKeypad()</samp>函数。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*In your own projects that incorporate the sketches from this chapter, you
    can use Arduino types other than the Uno, as long as they have an analog input.
    If your board runs on 3.3 V instead of 5 V, use the Project #1 sketch to determine
    the analog values to use for your circuit before updating the custom function
    in Project #2 or the library used in Project #3.*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*在您自己的项目中，如果使用了本章的草图，可以使用除Uno以外的其他Arduino类型，只要它们有模拟输入。如果您的电路板使用3.3V而不是5V，请在更新项目#2中的自定义函数或项目#3中使用的库之前，使用项目#1中的草图来确定电路所需的模拟值。*'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">继续</samp>
- en: 'In this chapter, you learned to build a circuit that allows your Arduino to
    read the status of one of up to 12 buttons using only one analog input pin. In
    the next chapter, you’ll learn another way to improve project efficiency: simultaneously
    reading and writing digital I/O pins using port manipulation.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了构建一个电路，使得你的 Arduino 仅使用一个模拟输入引脚就能读取多达12个按钮的状态。在下一章中，你将学习另一种提高项目效率的方法：通过端口操作同时读取和写入数字
    I/O 引脚。
