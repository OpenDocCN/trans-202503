- en: '16'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '16'
- en: CONFIGURATION AND SECRETS
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 配置与机密
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: Any high-quality application is designed so that key configuration items can
    be injected at runtime rather than being embedded in the source code. When we
    move our application components to containers, we need a way to tell the container
    runtime what configuration information to inject to ensure that our application
    components behave the way they should.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 任何高质量的应用程序都设计为可以在运行时注入关键配置项，而不是将其嵌入源代码中。当我们将应用程序组件迁移到容器时，我们需要一种方法来告诉容器运行时需要注入哪些配置信息，以确保我们的应用程序组件按预期行为运行。
- en: 'Kubernetes provides two primary resource types for injecting this configuration
    information: ConfigMap and Secret. These two resources are very similar in capability
    but have slightly different use cases.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 提供了两种主要的资源类型用于注入这些配置信息：ConfigMap 和 Secret。这两种资源在功能上非常相似，但有些许不同的使用场景。
- en: Injecting Configuration
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注入配置
- en: When we looked at container runtimes in [Part I](part01.xhtml#part01), we saw
    that we could pass environment variables to our containers. Of course, as Kubernetes
    manages the container runtime for us, we’ll first need to pass that information
    to Kubernetes, which will then pass it to the container runtime for us.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在[第一部分](part01.xhtml#part01)中查看容器运行时时，我们看到可以将环境变量传递给我们的容器。当然，由于 Kubernetes
    为我们管理容器运行时，我们首先需要将这些信息传递给 Kubernetes，然后 Kubernetes 再将其传递给容器运行时。
- en: '**NOTE**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The example repository for this book is at* [https://github.com/book-of-kubernetes/examples](https://github.com/book-of-kubernetes/examples).
    *See “Running Examples” on [page xx](ch00.xhtml#ch00lev1sec2) for details on getting
    set up.*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*本书的示例代码库位于* [https://github.com/book-of-kubernetes/examples](https://github.com/book-of-kubernetes/examples)。*有关设置的详细信息，请参阅[第xx页](ch00.xhtml#ch00lev1sec2)中的“运行示例”。*'
- en: 'For simple configuration injection, we can provide environment variables directly
    from the Pod specification. We saw an example of this in Pod form when we created
    a PostgreSQL server in [Chapter 10](ch10.xhtml#ch10). Here’s a PostgreSQL Deployment
    with a similar configuration in its embedded Pod specification:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于简单的配置注入，我们可以直接从 Pod 规范中提供环境变量。当我们在[第10章](ch10.xhtml#ch10)创建 PostgreSQL 服务器时，就看到了一个类似的
    Pod 示例。下面是一个 PostgreSQL 部署示例，其中的 Pod 规范包含了类似的配置：
- en: '*pgsql.yaml*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*pgsql.yaml*'
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When we provide environment variables directly in the Deployment, those environment
    variables are stored directly in the YAML file and in the cluster’s configuration
    for that Deployment. There are two important problems with embedding environment
    variables in this manner. First, we’re reducing flexibility because we can’t specify
    a new value for the environment variable without changing the Deployment YAML
    file. Second, the password is visible in plaintext directly in the Deployment
    YAML file. YAML files are often checked in to source control, so we’re going to
    have a hard time adequately protecting the password.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们直接在 Deployment 中提供环境变量时，这些环境变量会直接存储在 YAML 文件中，以及该 Deployment 的集群配置中。以这种方式嵌入环境变量有两个重要问题。首先，我们降低了灵活性，因为我们无法在不更改
    Deployment YAML 文件的情况下指定环境变量的新值。其次，密码以明文形式直接显示在 Deployment YAML 文件中。YAML 文件通常会被检查到源代码管理中，因此我们很难充分保护密码。
- en: '**GITOPS**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**GITOPS**'
- en: The reason that the YAML files that define Kubernetes resources are often checked
    in to source control is that this is by far the best way to manage an application
    deployment. GitOps is a best practice by which all configuration is kept in a
    Git repository. This includes the cluster configuration, additional infrastructure
    components including load balancers, ingress controller, and storage plug-ins,
    as well as all of the information to build, assemble, and deploy applications.
    GitOps provides a log of changes to the cluster configuration, avoids configuration
    drift that can occur over time, and ensures consistency between development, test,
    and production environments. Not only that, but GitOps tools like FluxCD and ArgoCD
    can be used to watch changes to a Git repository and automatically pull the latest
    configuration to update a cluster.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 Kubernetes 资源的 YAML 文件之所以经常被提交到源代码管理，是因为这是管理应用程序部署的最佳方式。GitOps 是一种最佳实践，通过这种方式，所有配置都保存在
    Git 仓库中。这包括集群配置、额外的基础设施组件，如负载均衡器、入口控制器和存储插件，以及构建、组合和部署应用程序所需的所有信息。GitOps 提供了集群配置变更的日志，避免了随着时间推移可能发生的配置漂移，并确保开发、测试和生产环境之间的一致性。不仅如此，像
    FluxCD 和 ArgoCD 这样的 GitOps 工具可以用来监控 Git 仓库的变化，并自动拉取最新配置来更新集群。
- en: Let’s first look at moving the configuration out of the Deployment; then we’ll
    consider how best to protect the password.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们来看一下如何将配置移出 Deployment；然后我们再考虑如何最好地保护密码。
- en: Externalizing Configuration
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 配置外部化
- en: Embedding configuration in the Deployment makes the resource definition less
    reusable. If, for example, we wanted to deploy a PostgreSQL server for both test
    and production versions of our application, it would be useful to reuse the same
    Deployment to avoid duplication and to avoid configuration drift between the two
    versions. However, for security, we would not want to use the same password in
    both environments.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 将配置嵌入到 Deployment 中会使资源定义变得不那么可重用。例如，如果我们想为应用程序的测试版本和生产版本部署 PostgreSQL 服务器，重用相同的
    Deployment 可以避免重复，并防止两个版本之间的配置漂移。然而，出于安全考虑，我们不希望在这两个环境中使用相同的密码。
- en: 'It’s better if we externalize the configuration by storing it in a separate
    resource and referring to it from the Deployment. To enable this, Kubernetes offers
    the *ConfigMap* resource. A ConfigMap specifies a set of key–value pairs that
    can be referenced when specifying a Pod. For example, we can define our PostgreSQL
    configuration this way:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的做法是通过将配置存储在单独的资源中并从 Deployment 中引用它来实现配置外部化。为此，Kubernetes 提供了 *ConfigMap*
    资源。ConfigMap 指定了一组键值对，可以在指定 Pod 时引用。例如，我们可以这样定义 PostgreSQL 配置：
- en: '*pgsql-cm.yaml*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*pgsql-cm.yaml*'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By storing this configuration information in a ConfigMap, it is no longer directly
    part of the Deployment YAML file or the cluster configuration for the Deployment.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将这些配置信息存储在 ConfigMap 中，它不再是 Deployment YAML 文件或 Deployment 集群配置的一部分。
- en: After we’ve defined our ConfigMap, we can reference it in our Deployment, as
    demonstrated in [Listing 16-1](ch16.xhtml#ch16list1).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们定义好 ConfigMap 后，可以在我们的 Deployment 中引用它，如 [示例 16-1](ch16.xhtml#ch16list1)
    中所示。
- en: '*pgsql-ext-cfg.yaml*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*pgsql-ext-cfg.yaml*'
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 16-1: PostgreSQL with ConfigMap*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 16-1：带 ConfigMap 的 PostgreSQL*'
- en: In place of the `env` field, we have an `envFrom` field that specifies one or
    more ConfigMaps to serve as environment variables for the container. All of the
    key–value pairs in the ConfigMap will become environment variables.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `env` 字段的位置，我们有一个 `envFrom` 字段，用于指定一个或多个 ConfigMap，作为容器的环境变量。ConfigMap 中的所有键值对将成为环境变量。
- en: This has the same effect as specifying one or more environment variables directly
    in the Deployment, but our Deployment specification is now reusable. The Deployment
    will look for the identified ConfigMap in its own Namespace, so we can have multiple
    Deployments from the same specification in separate Namespaces, and each can be
    configured differently.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这与直接在 Deployment 中指定一个或多个环境变量具有相同的效果，但我们的 Deployment 规范现在是可重用的。Deployment 将在其自己的
    Namespace 中查找已识别的 ConfigMap，因此我们可以在不同的 Namespaces 中从相同的规范创建多个 Deployments，每个都可以有不同的配置。
- en: This use of Namespace isolation to prevent naming conflicts, together with the
    Namespace-scoped security controls we saw in [Chapter 11](ch11.xhtml#ch11) and
    the Namespace-scoped quotas we saw in [Chapter 14](ch14.xhtml#ch14), allows a
    single cluster to be used for many different purposes, by many different groups,
    a concept known as *multitenancy*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这种通过使用命名空间隔离来防止命名冲突的方法，结合我们在[第 11 章](ch11.xhtml#ch11)中看到的命名空间范围的安全控制和我们在[第 14
    章](ch14.xhtml#ch14)中看到的命名空间范围的配额，使得单个集群可以被多个不同的团队用于不同的目的，这个概念被称为*多租户*。
- en: 'Let’s create this Deployment and see how Kubernetes injects the configuration.
    First, let’s create the actual Deployment:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建这个部署并查看 Kubernetes 如何注入配置。首先，让我们创建实际的部署：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This command completes successfully because the Deployment has been created
    in the cluster, but Kubernetes will not be able to start any Pods because the
    ConfigMap is missing:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令成功完成，因为部署已经在集群中创建，但 Kubernetes 无法启动任何 Pod，因为缺少 ConfigMap：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we now create the ConfigMap, we see that the Pod is then created:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在创建 ConfigMap，我们会看到 Pod 被创建：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'It can take a minute or so for Kubernetes to determine that the ConfigMap is
    available and start the Pod. As soon as the Pod is running, we can verify that
    the environment variables were injected based on the data in the ConfigMap:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 可能需要一分钟左右的时间来确定 ConfigMap 是否可用并启动 Pod。一旦 Pod 启动，我们可以验证环境变量是否根据 ConfigMap
    中的数据被注入：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The command `env` prints out all of the environment variables associated with
    a process. Because Kubernetes provides the same environment variables to our `/bin/sh`
    process as it provided to our main PostgreSQL process, we know that the environment
    variable was set as expected. It’s important to note, however, that even though
    we can change the ConfigMap at any time, doing so will not cause the Deployment
    to update its Pods; the application will not automatically pick up any environment
    variable changes. Instead, we need to apply some configuration change to the Deployment
    to cause it to create new Pods.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`env` 命令会打印出与进程关联的所有环境变量。因为 Kubernetes 向我们的 `/bin/sh` 进程提供了与主 PostgreSQL 进程相同的环境变量，所以我们知道环境变量已经按预期设置。然而，值得注意的是，即使我们可以随时更改
    ConfigMap，这样做也不会导致部署更新其 Pods；应用程序不会自动获取任何环境变量的变化。相反，我们需要对部署进行一些配置更改，促使它创建新的 Pods。'
- en: Although the configuration has been externalized, we still are not protecting
    it. Let’s do that next.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管配置已经被外部化，但我们仍然没有保护它。接下来我们来做这个操作。
- en: Protecting Secrets
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 保护机密
- en: When protecting secrets, thinking through the nature of the protection that
    makes sense is important. For example, we might need to protect authentication
    information that our application uses to connect to a database. However, given
    that the application itself needs that information to make the connection, anyone
    who can inspect the inner details of the application is going to be able to extract
    those credentials.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在保护机密数据时，思考保护措施的性质非常重要。例如，我们可能需要保护我们的应用程序用来连接数据库的身份验证信息。然而，鉴于应用程序本身需要这些信息才能建立连接，任何能够检查应用程序内部细节的人都会能够提取这些凭证。
- en: As we saw in [Chapter 11](ch11.xhtml#ch11), Kubernetes provides fine-grained
    access control over each individual resource type in a given Namespace. To enable
    protection of secrets, Kubernetes provides a separate resource type, *Secret*.
    This way, access to secrets can be limited to only those users who require access,
    a principle known as *least privilege*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第 11 章](ch11.xhtml#ch11)中看到的，Kubernetes 对每种资源类型提供细粒度的访问控制。为了保护机密数据，Kubernetes
    提供了一个单独的资源类型，*Secret*。通过这种方式，只有那些需要访问的用户才能访问机密数据，这一原则被称为*最小权限*。
- en: One more advantage to the Secret resource type is that it uses base64 encoding
    for all of its data, with automatic decoding when the data is provided to the
    Pod, which simplifies the storage of binary data.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Secret 资源类型的另一个优点是，它对所有数据使用 base64 编码，并在数据提供给 Pod 时自动解码，这简化了二进制数据的存储。
- en: '**ENCRYPTING SECRET DATA**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**加密机密数据**'
- en: By default, data stored in a Secret is base64 encoded but is not encrypted.
    It is possible to encrypt secret data, and doing so is good practice for a production
    cluster, but remember that the data must be decrypted so that it can be provided
    to the Pod. For this reason, anyone who can control what Pods exist in a namespace
    can access secret data, as can any cluster administrators who can access the underlying
    container runtime. This is true even if the secret data is encrypted when stored.
    Proper access controls are essential to keep a cluster secure.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，存储在 Secret 中的数据是 base64 编码的，但没有加密。可以加密密钥数据，且在生产集群中这样做是一个良好的实践，但请记住，数据必须解密才能提供给
    Pod。因此，任何能够控制某个命名空间中 Pod 存在的人都能访问 Secret 数据，任何能够访问底层容器运行时的集群管理员也能访问。这一点即便是 Secret
    数据在存储时进行了加密也同样成立。适当的访问控制对于保持集群的安全至关重要。
- en: 'A Secret definition looks almost identical to a ConfigMap definition:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Secret 的定义几乎与 ConfigMap 的定义完全相同：
- en: '*pgsql-secret.yaml*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*pgsql-secret.yaml*'
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The one obvious difference is the resource type of Secret rather than ConfigMap.
    However, there is a subtle difference as well. When we define this Secret, we
    place the key–value pairs in a field called `stringData` rather than just `data`.
    This tells Kubernetes that we are providing unencoded strings. When it creates
    the Secret, Kubernetes will encode the strings for us:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一明显的区别是 Secret 的资源类型，而不是 ConfigMap。然而，也有一个微妙的差别。当我们定义这个 Secret 时，我们将键值对放置在一个名为
    `stringData` 的字段中，而不是仅仅使用 `data`。这告诉 Kubernetes 我们提供的是未编码的字符串。当 Kubernetes 创建
    Secret 时，它会为我们编码这些字符串：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Even though we specified the data using the field `stringData` and an unencoded
    string, the actual Secret uses the field `data` and stores the value using base64
    encoding. We can also do the base64 encoding ourselves. In that case, we place
    the value directly into the `data` field:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们使用字段 `stringData` 并提供了未编码的字符串来指定数据，实际的 Secret 仍然使用字段 `data` 并使用 base64 编码存储值。我们也可以自己进行
    base64 编码。在这种情况下，我们直接将值放入 `data` 字段：
- en: '*pgsql-secret-2.yaml*'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*pgsql-secret-2.yaml*'
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This approach is necessary to define binary content for the Secret in order
    for us to be able to supply that binary content as part of a YAML resource definition.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法对于定义 Secret 的二进制内容是必要的，以便我们能够将该二进制内容作为 YAML 资源定义的一部分提供。
- en: 'We use a Secret in a Deployment definition in exactly the same way we use a
    ConfigMap:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Deployment 定义中使用 Secret 的方式与使用 ConfigMap 完全相同：
- en: '*pgsql-ext-sec.yaml*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*pgsql-ext-sec.yaml*'
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The only change is the use of `secretRef` in place of `configMapRef`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的变化是用 `secretRef` 代替了 `configMapRef`。
- en: 'To test this, let’s apply this new Deployment configuration:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这个，我们可以应用这个新的 Deployment 配置：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'From the perspective of our Pod, the behavior is exactly the same. Kubernetes
    handles the base64 decoding, making the decoded value visible to our Pod:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的 Pod 的角度来看，行为完全相同。Kubernetes 处理 base64 解码，使解码后的值对我们的 Pod 可见：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As before, we use the `env` command to show that the `POSTGRES_PASSWORD` environment
    variable was set as expected. The Pod sees the same behavior whether we specify
    the environment variable directly or use a ConfigMap or Secret.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如之前所示，我们使用 `env` 命令来验证 `POSTGRES_PASSWORD` 环境变量是否按预期设置。无论我们是直接指定环境变量，还是使用 ConfigMap
    或 Secret，Pod 都会看到相同的行为。
- en: 'Before we move on, let’s delete this Deployment:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，让我们删除这个 Deployment：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Using ConfigMaps and Secrets, we have the ability to externalize environment
    variable configuration for our application so that our Deployment specification
    can be reusable and to facilitate fine-grained access control over secret data.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ConfigMap 和 Secret，我们可以将应用程序的环境变量配置外部化，从而使我们的 Deployment 规范可重用，并便于对密钥数据进行精细化访问控制。
- en: Injecting Files
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注入文件
- en: Of course, environment variables are not the only way we commonly configure
    applications. We also need a way to provide configuration files. We can do that
    using the same ConfigMap and Secret resources we’ve seen already.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，环境变量并不是我们常见的唯一配置应用程序的方式。我们还需要一种方式来提供配置文件。我们可以使用我们已经看到的相同的 ConfigMap 和 Secret
    资源来实现。
- en: Any files we inject in this way override files that exist in the container image,
    which means that we can supply the container image with a sensible default configuration
    and then override that configuration with each container we run. This makes it
    much easier to reuse container images.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式注入的任何文件都会覆盖容器镜像中存在的文件，这意味着我们可以为容器镜像提供一个合理的默认配置，然后通过每次运行容器来覆盖该配置。这大大简化了容器镜像的重用。
- en: The ability to specify file content in a ConfigMap and then mount it in a container
    is immediately useful for configuration files, but we can also use it to update
    the NGINX web server example we showed in [Chapter 15](ch15.xhtml#ch15). As we’ll
    see, with this version we can declare our HTML content solely using Kubernetes
    resource YAML files, with no need for console commands to copy content into a
    PersistentVolume.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 能够在ConfigMap中指定文件内容，然后将其挂载到容器中，立即对配置文件非常有用，但我们也可以利用它更新我们在[第15章](ch15.xhtml#ch15)中展示的NGINX
    web服务器示例。正如我们将看到的，通过这个版本，我们可以仅使用Kubernetes资源的YAML文件来声明HTML内容，而无需通过控制台命令将内容复制到PersistentVolume中。
- en: 'The first step is to define a ConfigMap with the HTML content we want to serve:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是定义一个包含我们想要提供的HTML内容的ConfigMap：
- en: '*nginx-cm.yaml*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*nginx-cm.yaml*'
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The key part of the key–value pair is used to specify the desired filename,
    in this case *index.html*. For ease of reading, we use a pipe character (`|`)
    to start a YAML multiline string. This string continues as long as the following
    lines are indented, or until the end of the YAML file. We can define multiple
    files in this way by just adding more keys to the ConfigMap.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 键值对中的关键部分用于指定所需的文件名，在这种情况下是*index.html*。为了便于阅读，我们使用管道字符(`|`)来开始YAML多行字符串。只要后续行保持缩进，或者直到YAML文件结束，这个字符串就会继续。我们可以通过添加更多的键来定义多个文件。
- en: 'In the Deployment we saw in [Listing 16-1](ch16.xhtml#ch16list1), we specified
    the ConfigMap as the source of environment variables. Here, we specify it as the
    source of a volume mount:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们在[清单 16-1](ch16.xhtml#ch16list1)中看到的部署中，我们将ConfigMap指定为环境变量的来源。在这里，我们将它指定为卷挂载的来源：
- en: '*nginx-deploy.yaml*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*nginx-deploy.yaml*'
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This volume definition looks similar to the one we saw in [Chapter 15](ch15.xhtml#ch15).
    As before, the volume specification comes in two parts. The `volume` field specifies
    where the volume comes from, in this case the ConfigMap. The `volumeMounts` allows
    us to specify the path in the container where the files should be made available.
    In addition to making it possible to use the same volume in multiple containers
    in a Pod, this also means that we can share the same syntax when mounting persistent
    volumes and when mounting the configuration as files in the container filesystem.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个卷定义看起来与我们在[第15章](ch15.xhtml#ch15)中看到的类似。和之前一样，卷规范分为两部分。`volume`字段指定了卷的来源，在这种情况下是ConfigMap。`volumeMounts`让我们指定容器中文件应该挂载到的路径。除了使我们能够在Pod中的多个容器之间使用相同的卷外，这还意味着我们在挂载持久卷和将配置作为文件挂载到容器文件系统时可以共享相同的语法。
- en: 'Let’s create the ConfigMap and then get this Deployment started:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先创建ConfigMap，然后启动这个部署：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After the Pod is running, we can see that the file content is as expected,
    and NGINX is serving our HTML file:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在Pod运行后，我们可以看到文件内容符合预期，NGINX正在服务我们的HTML文件：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The output looks similar to what we saw in [Chapter 15](ch15.xhtml#ch15) when
    we provided the HTML content as a PersistentVolume, but we were able to avoid
    the effort of attaching the PersistentVolume and then copying content into it.
    In practice, both approaches have value, as maintaining a ConfigMap with a large
    amount of data would be unwieldy.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 输出看起来与我们在[第15章](ch15.xhtml#ch15)中看到的相似，当时我们将HTML内容提供为PersistentVolume，但我们能够避免附加PersistentVolume并将内容复制到其中的工作。实际上，这两种方法都有其价值，因为维护一个包含大量数据的ConfigMap会显得笨重。
- en: 'To make the contents of the ConfigMap appear as files in a directory, Kubernetes
    is writing out the contents of the ConfigMap to the host filesystem and then mounting
    the directory from the host into the container. This means that the specific directory
    shows up as part of the output for the `mount` command inside the container:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让ConfigMap的内容作为文件出现在目录中，Kubernetes会将ConfigMap的内容写到主机文件系统中，然后将该目录从主机挂载到容器中。这意味着特定目录会作为`mount`命令在容器内输出的一部分显示：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `mount` command reports that the directory */usr/share/nginx/html* is a
    separately mounted path coming from the host’s primary disk */dev/sda1*.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`mount`命令报告显示，目录*/usr/share/nginx/html*是一个来自主机主硬盘*/dev/sda1*的单独挂载路径。'
- en: 'We’re finished with the NGINX Deployment, so go ahead and delete it:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了NGINX的部署，接下来删除它：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Next, let’s look at how ConfigMap and Secret information is stored in a typical
    Kubernetes cluster so that we can see where `kubelet` is getting this content.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看ConfigMap和Secret信息在典型的Kubernetes集群中是如何存储的，这样我们就可以看到`kubelet`从哪里获取这些内容。
- en: Cluster Configuration Repository
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集群配置仓库
- en: Although it’s possible to run a Kubernetes cluster with different choices of
    configuration repository, most Kubernetes clusters use `etcd` as the backing store
    for all cluster configuration data. This includes not only the ConfigMap and Secret
    storage but also all of the other cluster resources and the current cluster state.
    Kubernetes also uses `etcd` to elect a leader when running in a highly available
    configuration with multiple API servers.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以选择不同的配置仓库来运行Kubernetes集群，但大多数Kubernetes集群使用`etcd`作为所有集群配置数据的后端存储。这不仅包括ConfigMap和Secret存储，还包括所有其他集群资源和当前集群状态。Kubernetes还使用`etcd`来在多个API服务器的高可用配置下选举领导者。
- en: Although `etcd` is generally stable and reliable, node failures can lead to
    cases in which the `etcd` cluster can’t reestablish itself and elect a leader.
    Our purpose in demonstrating `etcd` is not just to see how configuration data
    is stored, but also to provide some valuable background into an essential cluster
    component that an administrator might need to debug.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`etcd`通常是稳定和可靠的，但节点故障可能导致`etcd`集群无法重新建立并选举出领导者。我们展示`etcd`的目的不仅仅是为了查看配置数据如何存储，还旨在提供一些有价值的背景信息，帮助管理员在需要调试时理解这一重要的集群组件。
- en: For all of our example clusters, `etcd` is installed on the same nodes as the
    API server, which is common in smaller clusters. In large clusters, running `etcd`
    on separate nodes to allow it to scale separately from the Kubernetes control
    plane is common.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们所有的示例集群，`etcd`与API服务器安装在同一节点上，这在小型集群中是很常见的。在大型集群中，将`etcd`运行在独立的节点上，使其可以与Kubernetes控制平面分开扩展，这也是常见的做法。
- en: To explore the contents of the `etcd` backing store, we’ll use `etcdctl`, a
    command line client designed for controlling and troubleshooting `etcd`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了探索`etcd`后端存储的内容，我们将使用`etcdctl`，这是一个为控制和排查`etcd`问题而设计的命令行客户端。
- en: Using etcdctl
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用`etcdctl`
- en: We need to tell `etcdctl` where our `etcd` server instance is located and how
    to authenticate to it. For authentication, we’ll use the same client certificate
    that the API server uses.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要告诉`etcdctl`我们的`etcd`服务器实例位于何处，以及如何进行认证。为了认证，我们将使用与API服务器相同的客户端证书。
- en: For convenience, we can set environment variables that `etcdctl` will read,
    so we don’t need to pass in those values via the command line with every command.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，我们可以设置`etcdctl`将读取的环境变量，这样我们就不必在每个命令中通过命令行传递这些值。
- en: 'Here are the environment variables we need:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们需要的环境变量：
- en: '*etcd-env*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*etcd-env*'
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'These variables configure `etcdctl` as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变量配置`etcdctl`如下：
- en: ETCDCTL_API Use version 3 of the `etcd` API. With recent versions of `etcd`,
    only version 3 is supported.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: ETCDCTL_API 使用`etcd` API的版本3。对于近期的`etcd`版本，仅支持版本3。
- en: ETCDCTL_CACERT Verify the `etcd` host using the provided certificate authority.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: ETCDCTL_CACERT 使用提供的证书授权验证`etcd`主机。
- en: ETCDCTL_CERT Authenticate to `etcd` using this certificate.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ETCDCTL_CERT 使用此证书认证到`etcd`。
- en: ETCDCTL_KEY Authenticate to `etcd` using this private key.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: ETCDCTL_KEY 使用这个私钥认证到`etcd`。
- en: ETCDCTL_ENDPOINTS Connect to `etcd` at this URL. While `etcd` is running on
    all three nodes, we only need one node to talk to it.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: ETCDCTL_ENDPOINTS 通过此URL连接到`etcd`。尽管`etcd`运行在所有三个节点上，我们只需要与其中一个节点进行通信。
- en: 'In our example, these environment variables are conveniently stored in a script
    in */opt* so that we can load them for use with upcoming commands:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，这些环境变量方便地存储在*/opt*中的一个脚本中，以便我们加载它们并用于后续命令：
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can now use `etcdctl` commands to inspect the cluster and the configuration
    data it’s storing. Let’s begin by listing only the cluster members:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用`etcdctl`命令来检查集群及其存储的配置数据。我们先从仅列出集群成员开始：
- en: '[PRE22]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As expected, each of the control plane nodes has an instance of `etcd`. For
    a highly available configuration, we need to run at least three instances, and
    we need a majority of those instances to be running for the cluster to be healthy.
    This `etcdctl` command is a good first step to determine whether the cluster has
    any failed nodes.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，每个控制平面节点都有一个`etcd`实例。对于高可用配置，我们需要至少运行三个实例，并且需要大多数实例运行才能保证集群的健康。这个`etcdctl`命令是判断集群是否有故障节点的第一步。
- en: 'As long as the cluster is healthy, we can store and retrieve data. Within `etcd`,
    information is stored in key–value pairs. Keys are specified as paths in a hierarchy.
    We can list the paths that have content:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 只要集群保持健康，我们就可以存储和检索数据。在`etcd`中，信息是以键值对的形式存储的。键是作为路径在层次结构中指定的。我们可以列出有内容的路径：
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `--prefix` flag tells `etcdctl` to get all keys that start with `/`, whereas
    `--keys-only` ensures that we print only the keys to prevent being overwhelmed
    with data. Still, a lot of information is returned, including all of the various
    Kubernetes resource types that we’ve described in this book. Also included are
    the ConfigMaps and Secrets we just created.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`--prefix` 标志告诉 `etcdctl` 获取所有以 `/` 开头的键，而 `--keys-only` 确保我们只打印出键，防止数据过载。然而，仍然会返回大量信息，包括我们在本书中描述的所有
    Kubernetes 资源类型。还包括我们刚刚创建的 ConfigMaps 和 Secrets。'
- en: Deciphering Data in etcd
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 解密 `etcd` 中的数据
- en: We can generally rely on Kubernetes to store the correct configuration data
    in `etcd`, and we can rely on `kubectl` to see the current cluster configuration.
    However, it is useful to know how the underlying data store works in case we need
    to inspect the configuration when the cluster is down or in an anomalous state.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常可以依赖 Kubernetes 将正确的配置信息存储在 `etcd` 中，并且可以依赖 `kubectl` 查看当前的集群配置。然而，了解底层数据存储的工作原理是很有用的，以防我们需要在集群故障或异常状态时检查配置。
- en: To save storage space and bandwidth, both `etcd` and Kubernetes use the `protobuf`
    library, a language-neutral binary data format. Because we’re using `etcdctl`
    to retrieve data from `etcd`, we can ask it to return data in JSON format, instead;
    however, that JSON data will include an embedded `protobuf` structure with the
    data from Kubernetes, so we’ll need to decode that as well.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了节省存储空间和带宽，`etcd` 和 Kubernetes 都使用 `protobuf` 库，这是一个语言中立的二进制数据格式。由于我们正在使用 `etcdctl`
    从 `etcd` 获取数据，我们可以要求它以 JSON 格式返回数据；然而，JSON 数据将包含一个嵌入的 `protobuf` 结构，其中包含 Kubernetes
    的数据，因此我们还需要解码它。
- en: 'Let’s begin by examining the JSON format for a Kubernetes Secret in `etcd`.
    We’ll send the output through `jq` for formatting:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先检查 `etcd` 中 Kubernetes Secret 的 JSON 格式。我们将通过 `jq` 进行格式化输出：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The `kvs` field has the key–value pair that Kubernetes stored for this Secret.
    The value for the key is a simple base64-encoded string:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`kvs` 字段包含 Kubernetes 为此 Secret 存储的键值对。该键的值是一个简单的 base64 编码字符串：'
- en: '[PRE25]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We use `jq` to extract just the key’s value and return it in raw format (without
    quotes), and then we use `base64` to decode the string.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `jq` 提取键的值，并以原始格式（无引号）返回，然后使用 `base64` 解码该字符串。
- en: Of course, the interesting part of this key–value pair is the value because
    it contains the actual Kubernetes Secret. Although the value is also base64 encoded,
    we need to do a bit more detangling to access its information.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个键值对中有趣的部分是值，因为它包含了实际的 Kubernetes Secret。尽管该值也是 base64 编码的，但我们需要做更多的解开处理才能访问其信息。
- en: 'After we decode the base 64 value, we’ll have a `protobuf` message. However,
    it has a magic prefix that Kubernetes uses to allow for future changes in the
    storage format. We can see that prefix if we look at the first few bytes of the
    decoded value:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在解码 base64 值后，我们将得到一个 `protobuf` 消息。然而，它有一个 Kubernetes 使用的魔术前缀，以允许未来存储格式的更改。如果我们查看解码值的前几个字节，就可以看到该前缀：
- en: '[PRE26]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We use `head` to retrieve the first 10 bytes of the decoded value and then use
    `xxd` to see a hex dump. The first few bytes are `k8s` followed by an ASCII null
    character. The rest of the data, starting with byte 5, is the actual `protobuf`
    message.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `head` 获取解码值的前 10 个字节，然后使用 `xxd` 查看十六进制转储。前几个字节是 `k8s`，后跟一个 ASCII 空字符。从第
    5 字节开始的其余数据是实际的 `protobuf` 消息。
- en: 'Let’s run one more command to actually decode the `protobuf` message using
    the `protoc` tool:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再运行一个命令，使用 `protoc` 工具实际解码 `protobuf` 消息：
- en: '[PRE27]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `protoc` tool is mostly used for generating source code to read and write
    `protobuf` messages, but it’s also handy for message decoding. As we can see,
    within the `protobuf` message is all of the data Kubernetes stores for this Secret,
    including the resource version and type, the resource name and namespace, and
    the data. This illustrates, as mentioned earlier, that access to the hosts on
    which Kubernetes runs provides access to all of the secret data in the cluster.
    Even if we configured Kubernetes to encrypt data before storing it in `etcd`,
    the encryption keys themselves need to be stored unencrypted in `etcd` so that
    the API server can use them.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`protoc` 工具主要用于生成源代码来读取和写入 `protobuf` 消息，但它在消息解码方面也非常有用。正如我们所看到的，在 `protobuf`
    消息中包含了 Kubernetes 为此 Secret 存储的所有数据，包括资源版本和类型、资源名称和命名空间，以及数据。这说明，如前所述，访问 Kubernetes
    运行的主机就可以访问集群中的所有密钥数据。即使我们将 Kubernetes 配置为在存储到 `etcd` 之前加密数据，密钥本身也需要以未加密的形式存储在
    `etcd` 中，以便 API 服务器可以使用它们。'
- en: Final Thoughts
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最后的思考
- en: With the ability to provide either environment variables or files to Pods, ConfigMaps
    and Secrets allow us to externalize the configuration of our containers, which
    makes it possible to reuse both Kubernetes resource definitions such as Deployments
    and container images in a variety of applications.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 通过为 Pods 提供环境变量或文件的能力，ConfigMaps 和 Secrets 使我们能够将容器的配置外部化，这使得我们可以在各种应用程序中重用
    Kubernetes 资源定义，例如 Deployments 和容器镜像。
- en: At the same time, we need to be aware of how Kubernetes stores this configuration
    data and how it provides it to containers. Anyone with the right role can access
    configuration data using `kubectl`; anyone with access to the host running the
    container can access it from the container runtime; and anyone with the right
    authentication information can access it directly from `etcd`. For a production
    cluster, it’s critical that all of these mechanisms are correctly secured.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，我们需要意识到 Kubernetes 是如何存储这些配置数据的，以及它是如何将这些数据提供给容器的。任何拥有正确角色的人都可以使用`kubectl`访问配置数据；任何可以访问运行容器的主机的人都可以从容器运行时访问这些数据；任何拥有正确认证信息的人都可以直接从`etcd`中访问它。对于生产集群，确保这些机制的安全性至关重要。
- en: So far, we’ve seen how Kubernetes stores built-in cluster resource data in `etcd`,
    but Kubernetes can also store any kind of custom resource data we might choose
    to declare. In the next chapter, we’ll explore how custom resource definitions
    enable us to add new behavior to a Kubernetes cluster in the form of operators.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到 Kubernetes 如何在 `etcd` 中存储内建的集群资源数据，但 Kubernetes 也可以存储我们可能选择声明的任何自定义资源数据。在下一章中，我们将探讨自定义资源定义如何使我们能够通过运维工具在
    Kubernetes 集群中添加新的行为。
