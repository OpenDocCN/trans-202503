- en: '**2**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2**'
- en: '**HOW THE INTERNET WORKS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**互联网如何工作**'
- en: '![image](Images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common01.jpg)'
- en: To become an expert on web security, you need a firm grasp of the internet’s
    underlying web technologies and protocols. This chapter examines the Internet
    Protocol Suite, which dictates how computers exchange data over the web. You’ll
    also learn about stateful connections and encryption, which are key elements of
    the modern web. I’ll highlight where security holes tend to appear along the way.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要成为网络安全专家，你需要扎实掌握互联网基础的网络技术和协议。本章将探讨互联网协议套件，它规定了计算机如何在网络上交换数据。你还将了解有状态连接和加密，这些都是现代网络的关键元素。我将重点指出安全漏洞可能出现的地方。
- en: '**The Internet Protocol Suite**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**互联网协议套件**'
- en: In the early days of the internet, data exchange wasn’t reliable. The first
    message sent over the *Advanced Research Projects Agency Network (ARPANET)*, the
    predecessor to the internet, was a `LOGIN` command destined for a remote computer
    at Stanford University. The network sent the first two letters, `LO`, and then
    crashed. This was a problem for the US military, which was looking for a way to
    connect remote computers so that they could continue to exchange information even
    if a Soviet nuclear strike took various parts of the network offline.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网早期，数据交换并不可靠。首条通过*高级研究计划局网络（ARPANET）*发送的消息是一个`LOGIN`命令，目标是斯坦福大学的远程计算机。网络发送了前两个字母`LO`，然后崩溃了。这对美国军方来说是个问题，因为他们希望找到一种方式将远程计算机连接起来，以便即使苏联的核打击使网络的各个部分下线，也能继续交换信息。
- en: To address this problem, the network engineers developed the *Transmission Control
    Protocol (TCP)* to ensure a reliable exchange of information between computers.
    TCP is one of about 20 network protocols that are collectively referred to as
    the *internet protocol suite*. When a computer sends a message to another machine
    via TCP, the message is split into data packets that are sent toward their eventual
    destination with a destination address. The computers that make up the internet
    push each packet toward the destination without having to process the whole message.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，网络工程师开发了*传输控制协议（TCP）*，以确保计算机之间的信息可靠交换。TCP是约20种网络协议中的一种，这些协议共同构成了*互联网协议套件*。当计算机通过TCP向另一台计算机发送消息时，消息会被拆分成数据包，并带有目标地址，朝着最终的目的地发送。组成互联网的计算机将每个数据包推向目标，而无需处理整个消息。
- en: Once the recipient computer receives the packets, it assembles them back into
    a usable order according to the *sequence number* on each packet. Every time the
    recipient receives a packet, it sends a receipt. If the recipient fails to acknowledge
    receipt of a packet, the sender resends that packet, possibly along a different
    network path. In this way, TCP allows computers to deliver data across a network
    that is expected to be unreliable.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦接收计算机收到数据包，它会根据每个数据包上的*序列号*将它们重新组装成可用的顺序。每次接收方收到一个数据包时，它都会发送确认。如果接收方未能确认收到某个数据包，发送方会重新发送该数据包，可能通过不同的网络路径。在这种方式下，TCP使计算机能够在预期不可靠的网络中传输数据。
- en: TCP has undergone significant improvements as the internet has grown. Packets
    are now sent with a *checksum* that allows recipients to detect data corruption
    and determine whether packets need to be resent. Senders also preemptively adjust
    the rate at which they send data according to how fast it’s being consumed. (Internet
    servers are usually magnitudes more powerful than the clients that receive their
    messages, so they need to be careful not to overwhelm the client’s capacity.)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 随着互联网的发展，TCP经历了显著的改进。现在，数据包会带有*校验和*，使接收方能够检测数据损坏并判断是否需要重新发送数据包。发送方还会根据数据的消费速度预先调整发送速率。（互联网服务器通常比接收消息的客户端强大得多，因此它们需要小心不要超负荷客户端的处理能力。）
- en: '**NOTE**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*TCP remains the most common protocol because of its delivery guarantees, but
    nowadays, several other protocols are also used over the internet. The* User Datagram
    Protocol (UDP)*, for instance, is a newer protocol that deliberately allows packets
    to be dropped so that data can be streamed at a constant rate. UDP is commonly
    used for streaming live video, since consumers prefer a few dropped frames over
    having their feed delayed when the network gets congested.*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*TCP 由于其交付保障仍然是最常用的协议，但如今，互联网还使用了其他几种协议。比如*用户数据报协议 (UDP)* 是一种更新的协议，故意允许丢失数据包，以便可以保持数据以恒定速率流传。UDP
    通常用于直播视频流，因为用户更愿意接受几帧丢失，而不是在网络拥堵时视频延迟。*'
- en: '***Internet Protocol Addresses***'
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***互联网协议地址***'
- en: Data packets on the internet are sent to *Internet Protocol (IP) addresses*,
    numbers assigned to individual internet-connected computers. Each IP address must
    be unique, so new IP addresses are issued in a structured fashion.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网中的数据包会被发送到*互联网协议 (IP) 地址*，这些地址分配给每一台联网的计算机。每个 IP 地址必须是唯一的，因此新的 IP 地址会以结构化的方式发布。
- en: At the highest level, the *Internet Corporation for Assigned Names and Numbers
    (ICANN)* allots blocks of IP addresses to regional authorities. These regional
    authorities then grant the blocks of addresses to *internet service providers
    (ISPs)* and hosting companies within their region. When you connect your browser
    to the internet, your ISP assigns your computer an IP address that stays fixed
    for a few months. (ISPs tend to rotate IP addresses for clients periodically.)
    Similarly, companies that host content on the internet are assigned an IP address
    for each server they connect to the network.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在最高层级，*互联网名称与数字地址分配机构 (ICANN)* 将 IP 地址块分配给区域性管理机构。这些区域性管理机构再将地址块分配给其区域内的*互联网服务提供商
    (ISP)* 和托管公司。当你连接到互联网时，ISP 会为你的计算机分配一个固定几个月的 IP 地址。（ISP 通常会定期轮换客户端的 IP 地址。）同样，托管互联网内容的公司会为它们连接到网络的每个服务器分配一个
    IP 地址。
- en: 'IP addresses are binary numbers, generally written in *IP version 4 (IPv4)*
    syntax, which allows for 2^(32) (4,294,967,296) addresses. Google’s domain name
    server, for instance, has the address `8.8.8.8`. Because IPv4 addresses are getting
    used up at a rate that isn’t sustainable, the internet is shifting to *IP version
    6 (IPv6)* addresses to allow for more connected devices, represented as eight
    groups of four hexadecimal digits separated by colons (for example: `2001:0db8:0000:0042:0000:8a2e:0370:7334`).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: IP 地址是二进制数字，通常采用*IP 版本 4 (IPv4)* 语法表示，允许 2^(32)（4,294,967,296）个地址。例如，Google
    的域名服务器的地址是 `8.8.8.8`。由于 IPv4 地址的使用速度不可持续，互联网正在转向*IP 版本 6 (IPv6)* 地址，以支持更多连接的设备，IPv6
    地址由八组四个十六进制数字组成，用冒号分隔（例如：`2001:0db8:0000:0042:0000:8a2e:0370:7334`）。
- en: '***The Domain Name System***'
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***域名系统***'
- en: Browsers and other internet-connected software can recognize and route traffic
    to IP addresses, but IP addresses aren’t particularly memorable for humans. To
    make website addresses friendlier to users, we use a global directory called the
    *Domain Name System (DNS)* to translate human-readable *domains* like *[example.com](http://example.com)*
    to IP addresses like `93.184.216.119`. Domain names are simply placeholders for
    IP addresses. Domain names, like IP addresses, are unique, and have to be registered
    before use with private organizations called *domain registrars*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器和其他联网软件能够识别并将流量路由到 IP 地址，但 IP 地址对人类来说并不容易记住。为了让网站地址对用户更友好，我们使用一个全球目录——*域名系统
    (DNS)*，将人类可读的*域名*（例如 *[example.com](http://example.com)*) 翻译为 IP 地址，如 `93.184.216.119`。域名只是
    IP 地址的占位符。域名和 IP 地址一样是唯一的，在使用之前必须通过叫做*域名注册商*的私人机构进行注册。
- en: When browsers encounter a domain name for the first time, they use a local *domain
    name server* (typically hosted by an ISP) to look it up, and then cache the result
    to prevent time-consuming lookups in the future. This caching behavior means that
    new domains or changes to existing domains take a while to propagate on the internet.
    Exactly how long this propagation takes is controlled by the *time-to-live (TTL)*
    variable, which is set on the DNS record and instructs DNS caches when to expire
    the record. DNS caching enables a type of attack called *DNS poisoning*, whereby
    a local DNS cache is deliberately corrupted so that data is routed to a server
    controlled by an attacker.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器第一次遇到一个域名时，它们会使用本地*域名服务器*（通常由ISP托管）进行查询，然后将结果缓存，以防止未来进行耗时的查询。这种缓存行为意味着新域名或现有域名的更改需要一段时间才能在互联网上传播。具体传播时间由*生存时间（TTL）*变量控制，该变量设置在DNS记录上并指示DNS缓存何时过期。DNS缓存使得一种名为*DNS劫持*的攻击成为可能，即本地DNS缓存被故意破坏，导致数据被路由到攻击者控制的服务器。
- en: In addition to returning IP addresses for particular domains, domain name servers
    host records that can describe domain aliases via *canonical name (CNAME) records*
    that allow multiple domain names to point to the same IP address. DNS can also
    help route email by using *mail exchange (MX)* records. We’ll examine how DNS
    records can help combat unsolicited email (spam) in [Chapter 16](ch16.xhtml#ch16).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 除了为特定域名返回IP地址外，域名服务器还托管可以通过*规范名称（CNAME）记录*描述域别名的记录，从而允许多个域名指向同一个IP地址。DNS还可以通过使用*邮件交换（MX）*记录帮助路由电子邮件。我们将在[第16章](ch16.xhtml#ch16)中探讨DNS记录如何帮助应对垃圾邮件（spam）。
- en: '**Application Layer Protocols**'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**应用层协议**'
- en: TCP allows two computers to reliably exchange data on the internet, but it doesn’t
    dictate how the data being sent should be interpreted. For that to happen, both
    computers need to agree to exchange information through another, higher-level
    protocol in the suite. Protocols that build on top of TCP (or UDP) are called
    *application layer protocols*. [Figure 2-1](ch02.xhtml#ch2fig1) illustrates how
    application layer protocols sit above TCP in the internet protocol suite.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: TCP允许两台计算机在互联网上可靠地交换数据，但它并没有规定发送的数据应该如何解释。为了实现这一点，双方计算机需要通过协议套件中的另一个更高层的协议达成一致来交换信息。建立在TCP（或UDP）之上的协议被称为*应用层协议*。[图2-1](ch02.xhtml#ch2fig1)展示了应用层协议如何位于TCP之上，构成互联网协议套件的一部分。
- en: The lower-level protocols of the internet protocol suite provide basic data
    routing over a network, while the higher-level protocols in the application layer
    provide more structure for applications exchanging data. Many types of applications
    use TCP as a transport mechanism on the internet. For example, emails are sent
    using the Simple Mail Transport Protocol (SMTP), instant messaging software often
    uses the Extensible Messaging and Presence Protocol (XMPP), file servers make
    downloads available via the File Transfer Protocol (FTP), and web servers use
    the HyperText Transfer Protocol (HTTP). Because the web is our chief focus, let’s
    look at HTTP in more detail.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网协议套件的低层协议提供网络上的基本数据路由，而应用层的高层协议为应用程序交换数据提供了更多的结构。许多类型的应用程序在互联网上使用TCP作为传输机制。例如，电子邮件通过简单邮件传输协议（SMTP）发送，即时通讯软件通常使用可扩展消息与状态协议（XMPP），文件服务器通过文件传输协议（FTP）提供下载，网页服务器则使用超文本传输协议（HTTP）。由于我们主要关注的是Web，接下来我们将更详细地了解HTTP。
- en: '![image](Images/02fig01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/02fig01.jpg)'
- en: '*Figure 2-1: The various layers that make up the internet protocol suite*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-1：构成互联网协议套件的各个层次*'
- en: '***HyperText Transfer Protocol***'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***超文本传输协议***'
- en: Web servers use the *HyperText Transfer Protocol (HTTP*) to transport web pages
    and their resources to *user agents* such as web browsers. In an HTTP conversation,
    the user agent generates *requests* for particular resources. Web servers, expecting
    these requests, return *responses* containing either the requested resource, or
    an error code if the request can’t be fulfilled. Both HTTP requests and responses
    are plaintext messages, though they’re often sent in compressed and encrypted
    form. All of the exploits described in this book use HTTP in some fashion, so
    it’s worth knowing how the requests and responses that make up HTTP conversations
    work in detail.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Web 服务器使用 *超文本传输协议（HTTP）* 将网页及其资源传输到 *用户代理*，例如 web 浏览器。在 HTTP 会话中，用户代理会生成特定资源的
    *请求*。Web 服务器在接收到这些请求后，会返回 *响应*，其中包含请求的资源，或者如果请求无法完成，则返回错误代码。HTTP 请求和响应都是纯文本消息，尽管它们通常以压缩和加密的形式发送。本书中描述的所有攻击方法都以某种方式使用
    HTTP，因此了解构成 HTTP 会话的请求和响应的工作原理是很有价值的。
- en: '**HTTP Requests**'
  id: totrans-26
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**HTTP 请求**'
- en: 'An HTTP request sent by a browser consists of the following elements:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器发送的 HTTP 请求包含以下元素：
- en: '**Method** Also known as a *verb*, this describes the action that the user
    agent wants the server to perform.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**方法** 也叫做 *动词*，用于描述用户代理希望服务器执行的操作。'
- en: '**Universal resource locator (URL)** This describes the resource being manipulated
    or fetched.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**统一资源定位符（URL）** 这描述了被操作或获取的资源。'
- en: '**Headers** These supply metadata such as the type of content the user agent
    is expecting or whether it accepts compressed responses.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**头部** 这些提供了元数据，如用户代理期望的内容类型或是否接受压缩响应。'
- en: '**Body** This optional component contains any extra data that needs to be sent
    to the server.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**主体** 这个可选组件包含任何需要发送到服务器的额外数据。'
- en: '[Listing 2-1](ch02.xhtml#ch2list1) shows an HTTP request.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 2-1](ch02.xhtml#ch2list1) 显示了一个 HTTP 请求。'
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 2-1: A simple HTTP request*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 2-1：一个简单的 HTTP 请求*'
- en: The method ❶ and the URL ❷ appear on the first line. These are followed by HTTP
    headers on separate lines. The `User-Agent` header ❸ tells the website the type
    of browser that is making the request. The `Accept` header ❹ tells the website
    the type of content the browser is expecting.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 方法 ❶ 和 URL ❷ 出现在第一行。接下来是 HTTP 头，它们分别出现在不同的行。`User-Agent` 头 ❸ 告诉网站发出请求的浏览器类型。`Accept`
    头 ❹ 告诉网站浏览器期望的内容类型。
- en: 'Requests that use the `GET` method—called `GET` requests for short—are the
    most common type of request on the internet. `GET` requests fetch a particular
    resource on the web server, identified by a specific URL. The response to a `GET`
    request will contain a resource: perhaps a web page, an image, or even the results
    of a search request. The example request in [Listing 2-1](ch02.xhtml#ch2list1)
    represents an attempt to load the home page of *[example.com](http://example.com)*,
    and would be generated when a user types *[example.com](http://example.com)* in
    the browser’s navigation bar.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `GET` 方法的请求——简称为 `GET` 请求——是互联网上最常见的请求类型。`GET` 请求会获取 web 服务器上的特定资源，该资源通过特定的
    URL 进行标识。`GET` 请求的响应会包含一个资源：可能是一个网页、一张图片，甚至是搜索请求的结果。[清单 2-1](ch02.xhtml#ch2list1)
    中的示例请求表示尝试加载 *[example.com](http://example.com)* 的首页，并且当用户在浏览器的导航栏中输入 *[example.com](http://example.com)*
    时会生成该请求。
- en: If the browser needs to send information to the server, rather than just fetch
    data, it typically uses a `POST` request. When you fill out a form on a web page
    and submit it, the browser sends a `POST` request. Because `POST` requests contain
    information sent to the server, the browser sends that information in a *request
    body*, after the HTTP headers.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果浏览器需要向服务器发送信息，而不仅仅是获取数据，它通常会使用 `POST` 请求。当你在网页上填写表单并提交时，浏览器会发送一个 `POST` 请求。因为
    `POST` 请求包含发送到服务器的信息，浏览器会将这些信息放在 *请求体* 中，在 HTTP 头之后发送。
- en: In [Chapter 8](ch08.xhtml#ch08), you’ll see why it’s important to use `POST`
    rather than `GET` requests when sending data to your server. Websites that erroneously
    use `GET` requests for doing anything other than retrieving resources are vulnerable
    to cross-site request forgery attacks.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 8 章](ch08.xhtml#ch08) 中，你将看到为什么在向服务器发送数据时，使用 `POST` 而不是 `GET` 请求很重要。错误地使用
    `GET` 请求来执行除获取资源外的其他操作的站点容易受到跨站请求伪造攻击。
- en: When writing a website, you may also encounter `PUT`, `PATCH`, and `DELETE`
    requests. These are used to upload, edit, or delete resources on the server, respectively,
    and are typically triggered by JavaScript embedded in a web page. [Table 2-1](ch02.xhtml#ch2tab01)
    documents a handful of other methods that are worth knowing about.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写网站时，你还可能遇到 `PUT`、`PATCH` 和 `DELETE` 请求。这些请求分别用于上传、编辑或删除服务器上的资源，通常由嵌入在网页中的
    JavaScript 触发。[表 2-1](ch02.xhtml#ch2tab01) 记录了其他一些值得了解的方法。
- en: '**Table 2-1:** The Lesser-Known HTTP Methods'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 2-1：** 较少为人知的 HTTP 方法'
- en: '| **HTTP method** | **Function and implementation** |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| **HTTP 方法** | **功能和实现** |'
- en: '| `HEAD` | A `HEAD` request retrieves the same information as a `GET` request,
    but instructs the server to return the response without a body (in other words,
    the useful part). If you implement a `GET` method on your web server, the server
    will generally respond to `HEAD` requests automatically. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `HEAD` | `HEAD` 请求检索与 `GET` 请求相同的信息，但指示服务器返回没有主体的响应（换句话说，就是没有有效的部分）。如果你在
    web 服务器上实现了 `GET` 方法，服务器通常会自动响应 `HEAD` 请求。 |'
- en: '| `CONNECT` | `CONNECT` initiates two-way communications. You’ll use it in
    your HTTP client code if you ever have to connect through a proxy. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `CONNECT` | `CONNECT` 启动双向通信。如果你需要通过代理连接，您将在 HTTP 客户端代码中使用它。 |'
- en: '| `OPTIONS` | Sending an `OPTIONS` request lets a user agent ask what other
    methods are supported by a resource. Your web server will generally respond to
    `OPTIONS` requests by inferring which other methods you have implemented. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `OPTIONS` | 发送 `OPTIONS` 请求允许用户代理询问某个资源支持哪些其他方法。你的 web 服务器通常会根据你实现的其他方法自动响应
    `OPTIONS` 请求。 |'
- en: '| `TRACE` | A response to a `TRACE` request will contain an exact copy of the
    original HTTP request, so the client can see what (if any) alterations were made
    by intermediate servers. This sounds useful, but it’s generally recommended that
    you turn off `TRACE` requests in your web server, because they can act as a security
    hole. For instance, they can allow malicious JavaScript injected into a page to
    access cookies that have been deliberately made inaccessible to JavaScript. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `TRACE` | 对 `TRACE` 请求的响应将包含原始 HTTP 请求的精确副本，这样客户端就可以看到是否有中间服务器进行了修改。听起来很有用，但通常建议你在
    web 服务器中禁用 `TRACE` 请求，因为它们可能成为安全漏洞。例如，它们可能允许注入到页面中的恶意 JavaScript 访问故意对 JavaScript
    隐藏的 cookies。 |'
- en: Once a web server receives an HTTP request, it replies to the user agent with
    an HTTP response. Let’s break down how responses are structured.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 web 服务器收到 HTTP 请求，它会用 HTTP 响应回复用户代理。我们来解析一下响应的结构。
- en: '**HTTP Responses**'
  id: totrans-47
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**HTTP 响应**'
- en: HTTP responses sent back by a web server begin with a protocol description,
    a three-digit *status code*, and, typically, a *status message* that indicates
    whether the request can be fulfilled. The response also contains headers providing
    metadata that instructs the browser how to treat the content. Finally, most responses
    contain a body that itself contains the requested resource. [Listing 2-2](ch02.xhtml#ch2list2)
    shows the contents of a simple HTTP response.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由 web 服务器返回的 HTTP 响应以协议描述、三位数的 *状态码* 开头，通常还包括 *状态信息*，表示请求是否能够被完成。响应还包含头部，提供指示浏览器如何处理内容的元数据。最后，大多数响应包含一个主体，其中包含所请求的资源。[清单
    2-2](ch02.xhtml#ch2list2) 显示了一个简单的 HTTP 响应的内容。
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 2-2: An HTTP response from* [example.com](http://example.com), *the
    world’s least interesting website*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 2-2：来自* [example.com](http://example.com) 的 HTTP 响应，*世界上最无聊的网站*'
- en: 'The response begins with the protocol description ❶, the status code ❷, and
    the status message ❸. Status codes formatted as `2xx` indicate that the request
    was understood, accepted, and responded to. Codes formatted as `3xx` redirect
    the client to a different URL. Codes formatted as `4xx` indicate a client error:
    the browser generated an apparently invalid request. (The most common error of
    this type is `HTTP 404 Not Found`). Codes formatted as `5xx` indicate a server
    error: the request was valid, but the server was unable to fulfill the request.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 响应以协议描述 ❶、状态码 ❷ 和状态信息 ❸ 开头。状态码格式为 `2xx` 表示请求被理解、接受并已回应。格式为 `3xx` 的代码会将客户端重定向到不同的
    URL。格式为 `4xx` 的代码表示客户端错误：浏览器生成了一个看似无效的请求。（这种错误最常见的是 `HTTP 404 Not Found`）。格式为
    `5xx` 的代码表示服务器错误：请求是有效的，但服务器无法完成请求。
- en: Next are the HTTP headers ❹. Almost all HTTP responses include a `Content-Type`
    header that indicates the kind of data being returned. Responses to `GET` requests
    also often contain a `Cache-Control` header to indicate that the client should
    cache large resources (for example, images) locally.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是 HTTP 头部 ❹。几乎所有 HTTP 响应都包括一个 `Content-Type` 头部，表示返回的数据类型。响应 `GET` 请求时，通常还会包含一个
    `Cache-Control` 头部，指示客户端应当将大资源（例如图像）本地缓存。
- en: If the HTTP response is successful, the body contains the resource the client
    was trying to access—often *HyperText Markup Language (HTML)* ❺ describing the
    structure of the requested web page. In this case, the response contains styling
    information ❻ as well as the page content itself ❼. Other types of responses may
    return JavaScript code, Cascading Style Sheets (CSS) used for styling HTML, or
    binary data in the body.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 HTTP 响应成功，正文将包含客户端试图访问的资源——通常是*超文本标记语言（HTML）* ❺，描述了请求的网页的结构。在这种情况下，响应包含了样式信息
    ❻ 以及页面内容本身 ❼。其他类型的响应可能返回 JavaScript 代码、用于样式化 HTML 的层叠样式表（CSS）或正文中的二进制数据。
- en: '**Stateful Connections**'
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**有状态连接**'
- en: Web servers typically deal with many user agents at once, but HTTP does nothing
    to distinguish which requests are coming from which user agent. This wasn’t an
    important consideration in the early days of the internet, because web pages were
    largely read-only. Modern websites, however, often allow users to log in and will
    track their activity as they visit and interact with different pages. To allow
    for this, HTTP conversations need to be made stateful. A connection or conversation
    between a client and a server is *stateful* when they perform a “handshake” and
    continue to send packets back and forth until one of the communicating parties
    decides to terminate the connection.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Web 服务器通常同时处理多个用户代理，但 HTTP 本身并没有区分哪些请求来自哪个用户代理。在互联网的早期，这并不是一个重要的考虑因素，因为网页大多是只读的。然而，现代网站通常允许用户登录，并会跟踪他们在访问和与不同页面互动时的活动。为了实现这一点，HTTP
    会话需要变得有状态。当客户端和服务器之间的连接或会话是*有状态*的，它们会进行“握手”，并继续交换数据包，直到其中一方决定终止连接。
- en: When a web server wants to keep track of which user it’s responding to with
    each request, and thus achieve a stateful HTTP conversation, it needs to establish
    a mechanism to track the user agent as it makes the subsequent requests. The entire
    conversation between a particular user agent and a web server is called an *HTTP
    session*. The most common way of tracking sessions is for the server to send back
    a `Set-Cookie` header in the initial HTTP response. This asks the user agent receiving
    the response to store a *cookie*, a small snippet of text data pertaining to that
    particular web domain. The user agent then returns the same data in the `Cookie`
    header of any subsequent HTTP request to the web server. If implemented correctly,
    the contents of the cookie being passed back and forth uniquely identify the user
    agent and hence establish the HTTP session.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个 Web 服务器想要跟踪它响应的用户，并从而实现有状态的 HTTP 会话时，它需要建立一种机制来跟踪用户代理在后续请求中的活动。特定用户代理与 Web
    服务器之间的整个对话称为*HTTP 会话*。最常见的跟踪会话的方式是，服务器在初始 HTTP 响应中返回一个 `Set-Cookie` 头部。这要求接收响应的用户代理存储一个*cookie*，它是与该特定
    Web 域相关的小段文本数据。然后，用户代理会在任何后续 HTTP 请求的 `Cookie` 头部中返回相同的数据给 Web 服务器。如果实现正确，往返传递的
    cookie 内容唯一标识了用户代理，从而建立了 HTTP 会话。
- en: Session information contained in cookies is a juicy target for hackers. If an
    attacker steals another user’s cookie, they can pretend to be that user on the
    website. Similarly, if an attacker successfully persuades a website to accept
    a forged cookie, they can impersonate any user they please. We’ll look at various
    methods of stealing and forging cookies in [Chapter 10](ch10.xhtml#ch10).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在 cookies 中的会话信息是黑客的一个美味目标。如果攻击者窃取了另一个用户的 cookie，他们就可以冒充该用户在网站上活动。同样，如果攻击者成功说服网站接受伪造的
    cookie，他们就能冒充任何他们想要的用户。在[第 10 章](ch10.xhtml#ch10)中，我们将探讨窃取和伪造 cookie 的各种方法。
- en: '**Encryption**'
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**加密**'
- en: When the web was first invented, HTTP requests and responses were sent in plaintext
    form, which meant they could be read by anyone intercepting the data packets;
    this kind of interception is known as a *man-in-the-middle attack*. Because private
    communication and online transactions are common on the modern web, web servers
    and browsers protect their users from such attacks by using *encryption*, a method
    of disguising the contents of messages from prying eyes by encoding them during
    transmission.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当互联网最初发明时，HTTP请求和响应是以明文形式发送的，这意味着任何拦截数据包的人都可以读取它们；这种拦截方式被称为*中间人攻击*。由于现代网络中私人通信和在线交易变得普遍，网页服务器和浏览器通过使用*加密*来保护用户免受此类攻击，方法是通过传输过程中对消息内容进行编码，以防止被窥探者读取。
- en: To secure their communications, web servers and browsers send requests and responses
    by using *Transport Layer Security (TLS)*, a method of encryption that provides
    both privacy and data integrity. TLS ensures that packets intercepted by a third
    party can’t be decrypted without the appropriate encryption keys. It also ensures
    that any attempt to tamper with the packets will be detectable, which ensures
    data integrity.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保通信安全，网页服务器和浏览器使用*传输层安全（TLS）*来发送请求和响应，这是一种提供隐私和数据完整性的加密方法。TLS确保被第三方拦截的数据包在没有适当加密密钥的情况下无法解密。它还确保任何篡改数据包的尝试都可以被检测到，从而保证数据完整性。
- en: HTTP conversations conducted using TLS are called *HTTP Secure (HTTPS)*. HTTPS
    requires the client and server to perform a *TLS handshake* in which both parties
    agree on an encryption method (a cipher) and exchange encryption keys. Once the
    handshake is complete, any further messages (both requests and responses) will
    be opaque to outsiders.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TLS进行的HTTP对话被称为*HTTP安全（HTTPS）*。HTTPS要求客户端和服务器执行*TLS握手*，在此过程中双方就加密方法（即密码算法）达成一致并交换加密密钥。一旦握手完成，任何进一步的消息（包括请求和响应）都将对外界不可见。
- en: Encryption is a complex topic but is key to securing your website. We’ll examine
    how to enable encryption for your website in [Chapter 13](ch13.xhtml#ch13).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 加密是一个复杂的话题，但对于保护你的网站至关重要。我们将在[第13章](ch13.xhtml#ch13)中讨论如何为你的网站启用加密。
- en: '**Summary**'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter, you learned about the plumbing of the internet. TCP enables
    reliable communication between internet-connected computers that each have an
    IP address. The Domain Name System provides human-readable aliases for IP addresses.
    HTTP builds on top of TCP to send HTTP requests from user agents (such as web
    browsers) to web servers, which in turn reply with HTTP responses. Each request
    is sent to a specific URL, and you learned about various types of HTTP methods.
    Web servers respond with status codes, and send back cookies to initiate stateful
    connections. Finally, encryption (in the form of HTTPS) can be used to secure
    communication between a user agent and a web server.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了互联网的基础架构。TCP使得具有IP地址的互联网连接计算机之间可以可靠地进行通信。域名系统为IP地址提供了人类可读的别名。HTTP建立在TCP之上，从用户代理（如网页浏览器）向网页服务器发送HTTP请求，网页服务器再回复HTTP响应。每个请求都发送到特定的URL，并且你学习了各种类型的HTTP方法。网页服务器通过状态码回应，并发送回cookies以建立有状态连接。最后，*加密*（以HTTPS的形式）可用于保护用户代理和网页服务器之间的通信安全。
- en: In the next chapter, you’ll take a look at what happens when a web browser receives
    an HTTP response—how a web page is rendered, and how user actions can generate
    more HTTP requests.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将了解当网页浏览器接收到HTTP响应时会发生什么——网页是如何呈现的，以及用户的操作如何生成更多的HTTP请求。
