- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Building a Weather Database
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 构建天气数据库
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: In this project, you’ll build a weather database for a trucking company. The
    company transports items up and down the East Coast of the United States and needs
    a way to get the current weather for the major cities its drivers travel to.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将为一家卡车公司构建一个天气数据库。该公司在美国东海岸上下运输物品，需要一种方法来获取驾驶员前往的主要城市的当前天气情况。
- en: The company already has a MySQL database set up that contains trucking data,
    but you need to add a new database detailing the current weather conditions for
    areas the truckers drive through. This will allow you to incorporate weather data
    into the existing trucking application to show the weather’s impact on scheduling
    and warn drivers of hazardous conditions like black ice, snow, and extreme temperatures.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 公司已经设置了一个包含卡车数据的MySQL数据库，但是你需要添加一个新的数据库，详细描述卡车司机驾驶经过的当前天气情况。这将允许你将天气数据整合到现有的卡车应用程序中，以显示天气对调度的影响，并警告驾驶员有关黑冰、雪和极端温度等危险条件。
- en: You’ll get these weather data files from a third-party company that provides
    weather data. That company has agreed to send you a CSV file every hour. Recall
    from [Chapter 14](c14.xhtml) that a CSV file is a text file that contains data
    and uses a comma as the delimiter between fields.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你将从一个第三方公司获取这些天气数据文件。该公司已同意每小时发送给你一个CSV文件。从 [第14章](c14.xhtml) 回忆，CSV文件是一个文本文件，包含数据，并使用逗号作为字段之间的分隔符。
- en: The company providing the weather data will use FTP (File Transfer Protocol),
    a standard communication protocol that allows files to be transferred between
    computers, to deliver the *weather.csv* file to your */home/weather_load/ directory
    on one of your Linux servers. The data file will arrive approximately every hour,
    but there can be delays, meaning the files may not arrive exactly at hourly intervals.
    For that reason, you’ll write a program that will run every 5 minutes to check
    for the file and load it into your database when it’s available.*
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 提供天气数据的公司将使用FTP（文件传输协议），这是一种标准的通信协议，允许在计算机之间传输文件，将 *weather.csv* 文件发送到你的Linux服务器的
    */home/weather_load/ 目录。数据文件将大约每小时到达一次，但可能会有延迟，这意味着文件可能不会准确地每小时到达。因此，你将编写一个程序，每5分钟运行一次，检查文件是否可用，并在其可用时将其加载到你的数据库中。*
- en: '*Once you’ve reviewed the necessary technologies, you’ll begin your project
    by creating a new database called `weather` with two tables: `current_weather_load`
    and `current_weather`. You’ll load the data from the file into the `current_weather_load`
    table. Once you ensure that the data loads without any problems, you’ll copy the
    data from `current_weather_load` to the `current_weather` table, which is the
    table that your trucking application will use. You can find the *weather.csv*
    data file at [https://github.com/ricksilva/mysql_cc/tree/main/chapter_16](https://github.com/ricksilva/mysql_cc/tree/main/chapter_16).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*一旦你审查了必要的技术，你将通过创建一个名为`weather`的新数据库开始你的项目，其中包含两个表：`current_weather_load`和`current_weather`。你将从文件中加载数据到`current_weather_load`表中。一旦确保数据加载没有任何问题，你将把数据从`current_weather_load`复制到`current_weather`表中，这是你的卡车应用程序将使用的表。你可以在
    [https://github.com/ricksilva/mysql_cc/tree/main/chapter_16](https://github.com/ricksilva/mysql_cc/tree/main/chapter_16)
    找到 *weather.csv* 数据文件。'
- en: Technologies You’ll Use
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你将使用的技术
- en: For this project, you’ll use other technologies in addition to MySQL, including
    cron and Bash. These technologies allow you to schedule the loading of your weather
    data, check whether the data file is available, and create a logfile containing
    any load errors.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，除了MySQL，你还将使用cron和Bash等其他技术。这些技术允许你安排加载天气数据，检查数据文件是否可用，并创建包含任何加载错误的日志文件。
- en: cron
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: cron
- en: In order to schedule a script to run every 5 minutes, you’ll use *cron*, a scheduler
    available on Unix-like operating systems (Unix, Linux, and macOS). It is also
    available on Windows through the Windows Subsystem for Linux (WSL), which lets
    you run a Linux environment on a Windows computer. To install WSL, enter `wsl
    --install` on the command line.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安排一个脚本每5分钟运行一次，你将使用 *cron*，这是一种在类Unix操作系统（Unix、Linux 和 macOS）上可用的调度程序。它也可以通过Windows子系统来在Windows上使用，该子系统允许你在Windows计算机上运行Linux环境。要安装WSL，请在命令行中输入
    `wsl --install`。
- en: The tasks that you schedule in cron are called *cron jobs*, and they run in
    the background, not attached to a terminal. You can schedule jobs by adding them
    to a configuration file called the *crontab* (*cron table*) file.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你在 cron 中安排的任务称为 *cron jobs*，它们在后台运行，而不是与终端连接。你可以通过将任务添加到名为 *crontab* (*cron
    表*) 的配置文件中来安排任务。
- en: You can get a list of your scheduled cron jobs by typing `crontab -l`. If you
    need to edit your crontab configuration file, type `crontab -e`. The `-e` option
    will open a text editor where you can add, modify, or delete jobs from your crontab
    file.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过输入 `crontab -l` 获取已安排的 cron 任务列表。如果你需要编辑 crontab 配置文件，可以输入 `crontab -e`。`-e`
    选项将打开文本编辑器，你可以在其中添加、修改或删除 crontab 文件中的任务。
- en: 'To schedule a cron job, you must provide six pieces of information, in this
    order:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要安排一个 cron 任务，你必须提供六项信息，按照以下顺序：
- en: Minute (0–59)
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分钟 (0–59)
- en: Hour (0–23)
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 小时 (0–23)
- en: Day of the month (1–31)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 日期 (1–31)
- en: Month (1–12)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 月份 (1–12)
- en: Day of the week (0–6) (Sunday to Saturday)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一周中的天数 (0–6) （星期天到星期六）
- en: The command or script to run
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行的命令或脚本
- en: 'For example, if you wanted to schedule a script called *pi_day.sh* to run,
    you’d type `crontab -e` and add a crontab entry that looks like this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你想安排一个名为 *pi_day.sh* 的脚本运行，你可以输入 `crontab -e` 并添加一个类似下面的 crontab 条目：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With this cron job in place, the *pi_day.sh* script in the */usr/local/bin/*
    directory will execute every year on March 14 at 3:14 AM. Since the day of the
    week has been set to `*` (the wildcard), the job will execute on whatever day
    of the week March 14th happens to be on that year.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好这个 cron 任务后，位于 */usr/local/bin/* 目录中的 *pi_day.sh* 脚本将每年 3 月 14 日凌晨 3:14 执行一次。由于星期几已设置为
    `*`（通配符），该任务将在每年 3 月 14 日所在的任意星期几执行。
- en: Bash
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Bash
- en: '*Bash* is a shell and command language available in Unix and Linux environments.
    You could use any number of tools or languages, but I’ve chosen Bash because of
    its popularity and relative simplicity. Bash scripts usually have the extension
    *.sh*, like *pi_day.sh* in the preceding example. In this chapter’s project, you’ll
    write a Bash script called *weather.sh* that cron will run every 5 minutes. This
    script will check if a new data file has arrived and call SQL scripts to load
    the data into your database if it has.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*Bash* 是一种在 Unix 和 Linux 环境中可用的 shell 和命令语言。你可以使用多种工具或语言，但我选择了 Bash，因为它的流行性和相对简洁。Bash
    脚本通常以 *.sh* 为扩展名，像前面示例中的 *pi_day.sh*。在本章的项目中，你将编写一个名为 *weather.sh* 的 Bash 脚本，cron
    每 5 分钟运行一次。这个脚本将检查是否有新数据文件到达，并在有新文件时调用 SQL 脚本将数据加载到数据库中。'
- en: SQL Scripts
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL 脚本
- en: SQL scripts are text files that contain SQL commands. For this project, you’ll
    write two SQL scripts called *load_weather.sql* and *copy_weather.sql*. The *load_weather.sql*
    script will load the data from the CSV file into the `current_weather_load` table
    and alert you to any load issues. The *copy_weather.sql* script will copy the
    weather data from the `current_weather_load` table to the `current_weather` table.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 脚本是包含 SQL 命令的文本文件。对于这个项目，你将编写两个 SQL 脚本，分别是 *load_weather.sql* 和 *copy_weather.sql*。*load_weather.sql*
    脚本将数据从 CSV 文件加载到 `current_weather_load` 表中，并在出现加载问题时提醒你。*copy_weather.sql* 脚本将把天气数据从
    `current_weather_load` 表复制到 `current_weather` 表中。
- en: Project Overview
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目概述
- en: You’ll schedule a cron job to run the *weather.sh* script every 5 minutes. If
    a new *weather.csv* data file exists, it will be loaded into the `current_weather_load`
    table. If it is loaded without errors, the data in the `current_weather_load`
    table will be copied to the `current_weather` table, where it will be used by
    your application. [Figure 16-1](#figure16-1) shows the flow of the project.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你将安排一个 cron 任务，每 5 分钟运行一次 *weather.sh* 脚本。如果存在新的 *weather.csv* 数据文件，它将被加载到 `current_weather_load`
    表中。如果没有错误地加载数据，`current_weather_load` 表中的数据将被复制到 `current_weather` 表中，供你的应用使用。[图
    16-1](#figure16-1) 显示了该项目的流程。
- en: '![](image_fi/503007c16/f16001.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c16/f16001.png)'
- en: 'Figure 16-1: An overview of your weather project'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16-1：你的天气项目概览
- en: If there isn’t a new *weather.csv* file available, the *weather.sh* script exits
    without running the rest of the commands in the Bash script that load the data
    and log errors. If the file was loaded and there aren’t any errors in *load_weather.log*,
    the Bash script will call *copy_weather.sql* to copy the data you just loaded
    in the `current_weather_load` table to the `current_weather` table.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有新的 *weather.csv* 文件可用，*weather.sh* 脚本将退出，不会运行 Bash 脚本中剩余的加载数据和记录错误的命令。如果文件已加载且
    *load_weather.log* 中没有错误，Bash 脚本将调用 *copy_weather.sql* 将你刚刚加载的 `current_weather_load`
    表中的数据复制到 `current_weather` 表中。
- en: The Data File
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据文件
- en: 'Since the trucking company travels up and down the US East Coast, you’ve requested
    the weather for the following locations:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 由于卡车公司在美国东海岸上下来回行驶，你已经请求以下地点的天气数据：
- en: Portland, Maine
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 波特兰，缅因州
- en: Boston, Massachusetts
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 波士顿，马萨诸塞州
- en: Providence, Rhode Island
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 普罗维登斯，罗德岛州
- en: New York, New York
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纽约，纽约州
- en: Philadelphia, Pennsylvania
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 费城，宾夕法尼亚州
- en: Washington, DC
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 华盛顿特区
- en: Richmond, Virginia
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 里士满，弗吉尼亚州
- en: Raleigh, North Carolina
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 罗利，北卡罗来纳州
- en: Charleston, South Carolina
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查尔斯顿，南卡罗来纳州
- en: Jacksonville, Florida
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 杰克逊维尔，佛罗里达州
- en: Miami, Florida
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迈阿密，佛罗里达州
- en: The CSV data file will include the fields listed in [Table 16-1](#table16-1).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: CSV 数据文件将包括 [表16-1](#table16-1) 中列出的字段。
- en: 'Table 16-1: Fields in the CSV Data File'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 表16-1：CSV 数据文件中的字段
- en: '| **Field name** | **Description** |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| **字段名称** | **描述** |'
- en: '| --- | --- |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `station_id` | The ID for the weather station where this data originated
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `station_id` | 该数据来源的天气站ID |'
- en: '| `station_city` | The city where the weather station is located |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `station_city` | 天气站所在的城市 |'
- en: '| `station_state` | A two-character code for the state where the weather station
    is located |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `station_state` | 天气站所在州的两位字符代码 |'
- en: '| `station_lat` | The latitude of this weather station |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `station_lat` | 天气站的纬度 |'
- en: '| `station_lon` | The longitude of this weather station |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `station_lon` | 天气站的经度 |'
- en: '| `as_of_datetime` | The date and time that the data was gathered |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `as_of_datetime` | 数据收集的日期和时间 |'
- en: '| `temp` | The temperature |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `temp` | 温度 |'
- en: '| `feels_like` | The temperature that it currently “feels like” |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `feels_like` | 当前“体感温度” |'
- en: '| `wind` | The wind velocity (in kilometers per hour) |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `wind` | 风速（单位：千米每小时） |'
- en: '| `wind_direction` | The direction of the wind |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `wind_direction` | 风的方向 |'
- en: '| `precipitation` | Precipitation in the last hour (in millimeters) |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `precipitation` | 过去一小时的降水量（单位：毫米） |'
- en: '| `pressure` | Barometric pressure |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `pressure` | 大气压力 |'
- en: '| `visibility` | The distance that can be clearly seen (in miles) |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `visibility` | 能清晰看到的距离（单位：英里） |'
- en: '| `humidity` | The percentage of relative humidity in the air |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `humidity` | 空气中的相对湿度百分比 |'
- en: '| `weather_desc` | A text description of the current weather |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `weather_desc` | 当前天气的文字描述 |'
- en: '| `sunrise` | The time that the sun rises at this location today |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `sunrise` | 今日该地点的日出时间 |'
- en: '| `sunset` | The time that the sun sets at this location today |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `sunset` | 今日该地点的日落时间 |'
- en: Approximately every hour, a CSV file containing the data for the locations that
    you requested will be delivered to you. The CSV file should look similar to [Figure
    16-2](#figure16-2).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 大约每小时，你请求的位置的数据将通过 CSV 文件发送给你。CSV 文件的格式应类似于 [图16-2](#figure16-2)。
- en: '![](image_fi/503007c16/f16002.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c16/f16002.png)'
- en: 'Figure 16-2: The *weather.csv* data file'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图16-2：*weather.csv* 数据文件
- en: The file has one row for each of the 11 weather stations you requested, with
    every field delimited by a comma.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件为你请求的 11 个天气站的每一个生成一行，每个字段都用逗号分隔。
- en: Creating the Weather Tables
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建天气表
- en: 'Create a MySQL database called `weather` to store the weather data:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `weather` 的 MySQL 数据库，用于存储天气数据：
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now you’ll create a table called `current_weather_load` to load the CSV file
    data into. The `_load` suffix makes it clear that this table is for loading data
    about the current weather.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将创建一个名为 `current_weather_load` 的表格，用于加载 CSV 文件中的数据。`_load` 后缀表明该表格是用于加载当前天气数据的。
- en: '[Listing 16-1](#listing16-1) shows the SQL statement to create the `current_weather_load`
    table.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 16-1](#listing16-1) 显示了创建 `current_weather_load` 表的 SQL 语句。'
- en: '[PRE2]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 16-1: Creating the `current_weather_load` table'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 16-1：创建 `current_weather_load` 表
- en: 'Now create a second table called `current_weather` with the same structure
    as `current_weather_load`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建第二个表，名为 `current_weather`，其结构与 `current_weather_load` 相同：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: With these two tables in place, you now have a table that you can load the CSV
    file to, as well as a final, user-facing table that you’ll copy the weather data
    to once you are confident it has loaded cleanly.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这两个表之后，你就可以将 CSV 文件加载到一个表中，同时在确保数据加载干净后，你还将把天气数据复制到一个最终的、面向用户的表格中。
- en: Let’s go over [Listing 16-1](#listing16-1) in more detail.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看一下 [清单 16-1](#listing16-1)。
- en: Data Types
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据类型
- en: You should always choose data types for the columns that match the data in the
    CSV file as closely as possible. For example, you define the `station_id`, `temp`,
    `feels_like`, `wind`, and `humidity` columns as `int` data types since they will
    come to you as numeric values without a decimal point. You define `station_lat`,
    `station_lon`, `precipitation`, `pressure`, and `visibility` as `decimal` data
    types because they will contain decimal points.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该始终为列选择与CSV文件中的数据尽可能匹配的数据类型。例如，你将`station_id`、`temp`、`feels_like`、`wind`和`humidity`列定义为`int`数据类型，因为它们将作为不带小数点的数字值传入。你将`station_lat`、`station_lon`、`precipitation`、`pressure`和`visibility`定义为`decimal`数据类型，因为它们将包含小数点。
- en: You should also consider how large the column values could be. For example,
    you define the `station_lat` column as `decimal(6,4)` because latitudes need to
    store numbers with up to two digits before the decimal point and four digits after
    the decimal point. You define `station_lon` as `decimal(7,4)` because it represents
    a longitude, which needs to store up to *three* digits before the decimal point
    and four digits after it. A longitude column needs to be able to hold a larger
    value than a latitude column.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该考虑列值的大小。例如，你将`station_lat`列定义为`decimal(6,4)`，因为纬度需要存储小数点前最多两位和小数点后四位的数字。你将`station_lon`定义为`decimal(7,4)`，因为经度需要存储小数点前最多*三*位和小数点后四位的数字。经度列需要能够存储比纬度列更大的数值。
- en: You have to get creative with the `as_of_dt` column. Its data comes to you in
    the format `YYYYMMDD hh:mm`. MySQL doesn’t have a data type that stores data in
    this format, so you create the `as_of_dt` column with a data type of `datetime`.
    When you load the data file into your load table, you’ll convert this value to
    the `datetime` format. (We’ll discuss how in the next section.)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要为`as_of_dt`列动动脑筋。它的数据以`YYYYMMDD hh:mm`的格式给你。MySQL没有存储这种格式数据的数据类型，因此你创建了一个`as_of_dt`列，并为其设置了`datetime`数据类型。当你将数据文件加载到加载表时，你将把这个值转换为`datetime`格式。（我们将在下一节讨论如何处理这个问题。）
- en: The `station_state` column will always contain two characters, so you define
    it as `char(2)`. Since the `station_city` and `weather_desc` columns will have
    a variable number of characters, you define both as a `varchar` containing up
    to 100 characters. No city or description should have more than 100 characters,
    so if you get a value for those columns that is larger than 100, you can safely
    say the data is incorrect.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`station_state`列将始终包含两个字符，因此你将其定义为`char(2)`。由于`station_city`和`weather_desc`列的字符数是可变的，你将这两列定义为`varchar`类型，最多包含100个字符。没有城市或描述的字符数应该超过100，所以如果你在这些列中获得超过100的值，你可以放心地认为数据是错误的。'
- en: The `sunrise` and `sunset` values come to you formatted as times with the hour
    and the minute provided. You use the `time` data type for those values, even though
    you aren’t being sent the seconds in the data file. You’ll load the values into
    columns with the `time` data type and let the seconds automatically default to
    zeros. For example, you’ll load the value `17:06` and it will be saved in the
    table as `17:06:00`. This will work fine for your purposes since your application
    doesn’t need to track the sunrise and sunset time down to the second.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`sunrise`和`sunset`值将以小时和分钟的格式提供给你。你为这些值使用`time`数据类型，即使数据文件中没有秒数。你将这些值加载到具有`time`数据类型的列中，并让秒数自动默认为零。例如，你将加载值`17:06`，它将被保存为`17:06:00`。这对你的用途来说完全可行，因为你的应用程序不需要精确到秒的日出和日落时间。'
- en: Constraints
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 约束
- en: You create a primary key on the `station_id` column to enforce uniqueness. If
    the data file comes to you with two records for the same weather station, you
    don’t want to load both records. Setting `station_id` as the primary key will
    prevent the second row from being loaded and will produce a warning message alerting
    you to a problem in the data file.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你在`station_id`列上创建主键以确保唯一性。如果数据文件中有两条记录来自同一个气象站，你不希望加载这两条记录。将`station_id`设置为主键将阻止第二行数据的加载，并生成警告信息，提醒你数据文件存在问题。
- en: You add some other constraints to your columns as quality checks of the data
    that will be loaded into the table.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你为列添加了一些其他约束，作为加载到表中的数据质量检查。
- en: 'The `station_lat` column must be in the range of a valid latitude value: –90.0000
    to 90.0000\. You already defined `station_lat` with a data type of `decimal(6,4)`
    so there can be only six total digits, with four digits after the decimal point,
    but that won’t prevent an invalid value like `95.5555` from being written to the
    column. Adding a `check` constraint will enforce that the value is in the appropriate
    range. This allows you to store all legitimate latitude values in your column
    and reject any values outside of that range. Similarly, the `station_lon` column
    must be in the range of a valid longitude value: –180.0000 to 180.0000.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`station_lat`列必须在有效的纬度值范围内：–90.0000到90.0000。你已经将`station_lat`定义为`decimal(6,4)`数据类型，这样总共有六个数字，其中四个小数位，但这并不能阻止像`95.5555`这样的无效值被写入该列。添加`check`约束将强制要求该值在适当的范围内。这样可以确保只存储合法的纬度值，并拒绝任何超出该范围的值。同样，`station_lon`列必须在有效的经度值范围内：–180.0000到180.0000。'
- en: The `wind_direction` column also has a `check` constraint to ensure that it
    contains only one of 16 possible values that you provided in a list (`N` for North,
    `SE` for Southeast, `NNW` for North-Northwest, and so on).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`wind_direction`列也有一个`check`约束，确保该列只包含你在列表中提供的16个可能值之一（例如`N`表示北，`SE`表示东南，`NNW`表示北北西，等等）。'
- en: The other `check` constraints ensure that your data is within reasonable ranges
    for weather data. For example, a temperature outside of the range of –50 degrees
    to 150 degrees Fahrenheit is likely a mistake, so you’ll reject it. Humidity is
    a percentage, so you enforce that it must be within the range of 0 to 100.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 其他`check`约束确保你的数据在天气数据的合理范围内。例如，温度超出-50华氏度到150华氏度的范围可能是一个错误，所以你会拒绝它。湿度是百分比，因此你要求它必须在0到100之间。
- en: You also declare some of the columns in your load table with the `not null`
    constraint. These columns are so important that you want your load to fail if
    they are not provided. The `station_id` column must not be null since it is the
    primary key of the table.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你还在加载表中的一些列上声明了`not null`约束。这些列非常重要，若未提供这些数据，加载将会失败。`station_id`列必须是非空的，因为它是该表的主键。
- en: You define `station_lat` and `station_lon` as `not null` because you want to
    plot the weather station’s location on a map in your trucking application. You
    want to show each weather station’s current temperature, visibility, and conditions
    at the right map location, and you can’t do that if the station’s latitude and
    longitude aren’t provided.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你将`station_lat`和`station_lon`定义为`not null`，因为你希望在你的卡车运输应用中绘制天气站的位置地图。你希望在地图上显示每个天气站的当前温度、能见度和天气状况，如果没有提供该站的纬度和经度，就无法实现这一点。
- en: The `temperature`, `visibility`, and `weather_desc` columns are also key pieces
    of data for this project, and thus you define them as `not null` as well.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`temperature`、`visibility`和`weather_desc`列也是本项目中的关键数据，因此你也将它们定义为`not null`。'
- en: Loading the Data File
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载数据文件
- en: Before you create the *weather.sh* Bash script that checks if a new CSV weather
    file is available, you’ll write the *load_weather.sql* SQL script that will load
    the CSV file into your `current_weather_load` table (see [Listing 16-2](#listing16-2)).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在你创建*weather.sh* Bash脚本之前，该脚本检查是否有新的CSV天气文件可用，你将编写*load_weather.sql* SQL脚本，将CSV文件加载到`current_weather_load`表中（请参见[Listing
    16-2](#listing16-2)）。
- en: '[PRE4]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 16-2: The *load_weather.sql* script'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 16-2：*load_weather.sql*脚本
- en: First, you set your current database to the `weather` database and delete all
    rows from the `current_weather_load` table that may have been left over from a
    previous load.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将当前数据库设置为`weather`数据库，并删除`current_weather_load`表中可能残留的上次加载的数据行。
- en: Then you use the `load data` command you saw in Chapter 14 to load the *weather.csv*
    file into the `current_weather_load` table. Because you’re loading a comma-separated
    file, you need to specify `fields terminated by ','` ❶ so that `load data` knows
    where one field ends and the next field begins. You specify that the data file
    is called *weather.csv* and is in the */home/weather_load/* directory.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你使用在第14章中看到的`load data`命令，将*weather.csv*文件加载到`current_weather_load`表中。因为你正在加载一个以逗号分隔的文件，所以你需要指定`fields
    terminated by ','` ❶，这样`load data`就知道每个字段的结束位置，以及下一个字段的开始位置。你指定数据文件名为*weather.csv*，并且文件位于*/home/weather_load/*目录下。
- en: 'Within parentheses, you list all the columns in the table that you want the
    data fields loaded into, with one exception: instead of loading a value directly
    from the file into the `as_of_dt` column, you load it into a variable called `@aod`
    ❷. This variable holds the value of the `as of date` as it is formatted in the
    CSV file, which, as mentioned earlier, is `YYYYMMDD hh:mm`. You convert the value
    of the `@aod` variable from a string to a `datetime` data type using MySQL’s `str_to_date()`
    function ❸. You use the format specifiers `%Y`, `%m`, `%d`, `%H`, and `%i` to
    specify the format of the string. By specifying `str_to_date(@aod,''%Y%m%d %H:%i'')`,
    you’re saying the `@aod` variable is made up of the following parts:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在括号内，你列出了所有你希望加载数据字段的表格列，只有一个例外：你不是直接从文件将值加载到 `as_of_dt` 列，而是将其加载到一个名为 `@aod`
    的变量中❷。该变量保存的是 CSV 文件中格式化的 `as of date` 值，如前所述，其格式为 `YYYYMMDD hh:mm`。你使用 MySQL
    的 `str_to_date()` 函数❸将 `@aod` 变量的值从字符串转换为 `datetime` 数据类型。你使用格式说明符 `%Y`、`%m`、`%d`、`%H`
    和 `%i` 来指定字符串的格式。通过指定 `str_to_date(@aod,'%Y%m%d %H:%i')`，你表示 `@aod` 变量由以下部分组成：
- en: '`%Y`, a four-digit year'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%Y`，四位数的年份'
- en: '`%m`, a two-digit month'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%m`，两位数的月份'
- en: '`%d`, a two-digit day'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%d`，两位数的日期'
- en: A space
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个空格
- en: '`%H`, a two-digit hour (0–23)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%H`，两位数的小时（0–23）'
- en: A colon
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个冒号
- en: '`%i`, a two-digit minute (0–59)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%i`，两位数的分钟（0–59）'
- en: With this information, the `str_to_date()` function has what it needs to convert
    the `@aod` string to the `as_of_date datetime` field in the `current_weather_load`
    table.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些信息，`str_to_date()` 函数就能够将 `@aod` 字符串转换为 `current_weather_load` 表中的 `as_of_date
    datetime` 字段。
- en: Next, you check if there were any problems loading the data. The `show warnings`
    command ❹ lists any errors, warnings, or notes from the last command that you
    ran. If problems in the data file caused your `load data` command to fail, `show
    warnings` will tell you what the problem was.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你检查加载数据时是否存在任何问题。`show warnings` 命令❹列出你上次运行命令时的任何错误、警告或备注。如果数据文件中的问题导致 `load
    data` 命令失败，`show warnings` 会告诉你问题所在。
- en: Then, you add a query as a second check that the data loaded properly ❺. In
    this query, you get a list of all the weather stations that had data the last
    time you wrote data into the `current_weather` table. If any of those weather
    stations aren’t in the `current_weather_load` table you just loaded, that likely
    means weather station data was missing from your data file or there was a problem
    with that weather station’s data that caused it not to load. In either case, you
    want to be notified.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你添加了一个查询作为第二次检查，确保数据已正确加载❺。在这个查询中，你列出所有上次你将数据写入 `current_weather` 表时的天气站。如果这些天气站中的任何一个不在你刚加载的
    `current_weather_load` 表中，这可能意味着数据文件中缺少了该天气站的数据，或者该天气站的数据存在问题，导致数据未能加载。在任何一种情况下，你都希望能够收到通知。
- en: You’ve now written your *load_weather.sql* script to notify you of any problems
    with loading the data. If *load_weather.sql* runs and no output is created, the
    data was loaded into the `current_weather_load` table without a problem.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经编写了 *load_weather.sql* 脚本，来通知你加载数据时是否有任何问题。如果 *load_weather.sql* 执行后没有任何输出，则表示数据已经成功加载到
    `current_weather_load` 表中。
- en: Copying the Data to Your Final Table
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将数据复制到最终表
- en: Once the data is loaded from the CSV data file into your `current_weather_load`
    table without issue, you’ll run another SQL script called *copy_weather.sql* to
    copy the data to your final `current_weather` table ([Listing 16-3](#listing16-3)).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据从 CSV 数据文件成功加载到 `current_weather_load` 表中，你将运行另一个名为 *copy_weather.sql* 的
    SQL 脚本，将数据复制到最终的 `current_weather` 表中（[列表 16-3](#listing16-3)）。
- en: '[PRE5]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 16-3: The *copy_weather.sql* script'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-3：*copy_weather.sql* 脚本
- en: This SQL script sets your current database to the `weather` database, deletes
    all old rows from the `current_weather` table, and loads the `current_weather`
    table with the data from the `current_weather_load` table.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 该 SQL 脚本将当前数据库设置为 `weather` 数据库，删除 `current_weather` 表中的所有旧行，并从 `current_weather_load`
    表加载数据到 `current_weather` 表中。
- en: Now that you have your SQL scripts written, you can write the Bash script that
    calls them ([Listing 16-4](#listing16-4)).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经编写了 SQL 脚本，可以编写调用它们的 Bash 脚本（[列表 16-4](#listing16-4)）。
- en: '[PRE6]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 16-4: The *weather.sh* script'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-4：*weather.sh* 脚本
- en: The first line of a Bash script ❶ is known as a *shebang*. It tells the system
    that the interpreter to use for the commands in this file is in the */bin/bash*
    directory.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Bash 脚本的第一行❶称为 *shebang*。它告诉系统，这个文件中的命令应该使用位于 */bin/bash* 目录中的解释器。
- en: Next, you use the `cd` command to change directories to */home/weather/* ❷.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用`cd`命令切换到*/home/weather/*目录❷。
- en: In your first `if` statement ❸, you check if the *weather.csv* file exists.
    In Bash scripts, `if` statements start with `if` and end with `fi`. The `-f` command
    checks if a file exists, and `!` is the syntax for `not`. The statement `if [
    ! -f weather.csv ]` checks if the *weather.csv* file does not exist. If it doesn’t,
    that means you don’t have a new CSV data file to load, so you `exit` the Bash
    script and provide an exit code of `0`. By convention, you provide an exit code
    of `0` for success or `1` to signal an error. Exiting the Bash script here prevents
    the rest of the script from running; you don’t need to run the rest of the script,
    since you don’t have a data file to process.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个`if`语句❸中，检查*weather.csv*文件是否存在。在Bash脚本中，`if`语句以`if`开始，以`fi`结束。`-f`命令用于检查文件是否存在，`!`是表示`not`的语法。语句`if
    [ ! -f weather.csv ]`用于检查*weather.csv*文件是否不存在。如果不存在，意味着没有新的CSV数据文件可以加载，因此会退出Bash脚本并返回退出码`0`。按照惯例，退出码`0`表示成功，`1`表示错误。在这里退出Bash脚本，防止脚本继续执行；因为没有数据文件可供处理，所以不需要执行后续脚本。
- en: You use the MySQL command line client ❹ (the `mysql` command, described in [Chapter
    14](c14.xhtml)) to run the *load_weather.sql* SQL script. If the *load_weather.sql*
    script has any problems loading the data to the `current_weather_load` table,
    you’ll log those problems to a file called *load_weather.log*.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MySQL命令行客户端❹（`mysql`命令，详见[第14章](c14.xhtml)）运行*load_weather.sql* SQL脚本。如果*load_weather.sql*脚本在加载数据到`current_weather_load`表时出现问题，您将把这些问题记录到一个名为*load_weather.log*的文件中。
- en: In Bash, the left arrow (`<`) and right arrow (`>`) are used for *redirection*,
    which lets you take your input from a file and write your output to another file.
    The syntax `< load_weather.sql` tells the MySQL command line client to run the
    commands from the *load_weather.sql* script. The syntax `> load_weather.log` says
    to write any output to the *load_weather.log* file.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在Bash中，左箭头（`<`）和右箭头（`>`）用于*重定向*，它们允许你从文件中获取输入并将输出写入另一个文件。语法`< load_weather.sql`告诉MySQL命令行客户端从*load_weather.sql*脚本中运行命令。语法`>
    load_weather.log`表示将任何输出写入*load_weather.log*文件。
- en: The `local_infile=1` option lets you run the `load data` command (used in the
    *load_weather.sql* script) using data files on your local computer, as opposed
    to data files on the server where MySQL is installed. This may be unnecessary
    in your environment, depending upon your configuration settings. (Your DBA can
    set this option as a configuration parameter using the command `set global local_infile
    = on`.)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`local_infile=1`选项允许你使用本地计算机上的数据文件（而不是安装MySQL的服务器上的数据文件）运行`load data`命令（该命令在*load_weather.sql*脚本中使用）。根据你的配置设置，这在你的环境中可能不是必须的。（你的DBA可以通过命令`set
    global local_infile = on`将此选项设置为配置参数。）'
- en: The `-h` option tells the MySQL command line client which host server MySQL
    is installed on. In this case, `-h 127.0.0.1` indicates that your MySQL host server
    is the same computer that you’re currently using to run the script. Also known
    as *localhost*, 127.0.0.1 is the IP address for the current (local) computer.
    You could also simply type `-h` `localhost` here.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`-h`选项告诉MySQL命令行客户端MySQL安装的主机服务器。在这种情况下，`-h 127.0.0.1`表示MySQL主机服务器与当前正在运行脚本的计算机相同。也被称为*localhost*，127.0.0.1是当前（本地）计算机的IP地址。你也可以在这里直接输入`-h`
    `localhost`。'
- en: Next, you provide the database name, `weather`; your MySQL user ID, `trucking`;
    and your password, `Roger`. Oddly, MySQL doesn’t allow a space after the `-p`,
    so enter your password without a preceding space.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，提供数据库名称`weather`，你的MySQL用户ID`trucking`，以及密码`Roger`。奇怪的是，MySQL不允许`-p`后面有空格，因此输入密码时不要在前面加空格。
- en: 'You use the `-s` option to run your SQL script in *silent mode*. This prevents
    the script from giving you too much information in your output. For example, if
    no data gets loaded for the Boston weather station, you want to see the message
    `No data loaded for 375: Boston` in your *load_weather.log* file. But without
    the `-s`, the logfile will also show the beginning of the `select` statement that
    produced that message:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '使用`-s`选项以*静默模式*运行SQL脚本。这可以防止脚本在输出中显示过多的信息。例如，如果波士顿气象站没有加载数据，您希望在*load_weather.log*文件中看到`No
    data loaded for 375: Boston`的消息。但如果没有`-s`，日志文件还会显示生成该消息的`select`语句的开始部分：'
- en: '[PRE7]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Using `-s` prevents the text `concat(''No data loaded for '',station_id,'':
    '',station_city)` from being written to *load_weather.log*.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '使用`-s`选项可以防止文本`concat(''No data loaded for '',station_id,'': '',station_city)`写入*load_weather.log*文件中。'
- en: In Bash, the backslash character (`\`) lets you continue your command on the
    next line. After the `-s`, you use a backslash and continue on the next line because
    your line of code was so long.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在Bash中，反斜杠字符（`\`）允许你将命令继续到下一行。`-s`后，你使用反斜杠继续下一行，因为你的代码行太长了。
- en: Next, your Bash script checks to see if any load problems are listed in the
    *load_weather.log* file ❺. In an `if` statement, `-s` checks to see if the file
    size is greater than 0 bytes. You only want to load the data into your final table,
    `current_weather`, if there were no problems loading the data into your load table,
    `current_weather_load`. In other words, you’ll only copy the data to the `current_weather`
    table when the *load_weather.log* file is empty, or 0 bytes. You check that the
    logfile doesn’t have a size greater than 0 using the syntax `if [ ! -s load_weather.log
    ]`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你的Bash脚本检查是否在*load_weather.log*文件中列出了任何加载问题❺。在`if`语句中，`-s`检查文件大小是否大于0字节。只有当数据没有问题加载到`current_weather_load`加载表格时，你才会将数据加载到最终表格`current_weather`中。换句话说，只有当*load_weather.log*文件为空或大小为0字节时，才会将数据复制到`current_weather`表格。你通过使用语法`if
    [ ! -s load_weather.log ]`来检查日志文件的大小是否大于0。
- en: Finally, in the last line of the *weather.sh* Bash script, you rename the *weather.csv*
    file, adding the current date and time as a suffix. For example, you’ll rename
    *weather.csv* to *weather.csv.20240412210125* so that the next time your Bash
    script is run, it won’t try to reload the same *weather.csv* file ❻. The `mv`
    command stands for *move*, and is used to rename or move files to another directory.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在*weather.sh* Bash脚本的最后一行，你将重命名*weather.csv*文件，添加当前日期和时间作为后缀。例如，你将*weather.csv*重命名为*weather.csv.20240412210125*，这样下次运行Bash脚本时，它就不会再尝试重新加载相同的*weather.csv*文件❻。`mv`命令代表*move*，用于重命名或将文件移动到另一个目录。
- en: Now let’s check out the results. If you are sent a *weather.csv* data file with
    valid data, running the *load_weather.sql* script will result in the `current_weather_load`
    table getting populated with values. This should look similar to [Figure 16-3](#figure16-3).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下结果。如果你收到一个包含有效数据的*weather.csv*数据文件，运行*load_weather.sql*脚本将导致`current_weather_load`表格填充数据。这应该类似于[图16-3](#figure16-3)。
- en: The data in your `current_weather_load` table looks good. All 11 rows that were
    in the CSV data file are now in the table, and the values look reasonable for
    all of your columns.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你在`current_weather_load`表中的数据看起来很好。CSV数据文件中的所有11行现在都已存入表格，并且所有列的值看起来合理。
- en: On the other hand, if you’re sent a *weather.csv* data file with duplicate values,
    or with values that are in the wrong format or out of range, the result of running
    the *load_weather.sql* script will be that your *load_weather.log* file will contain
    a list of the problems.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果你收到的*weather.csv*数据文件包含重复值，或者值格式不正确或超出范围，运行*load_weather.sql*脚本的结果是你的*load_weather.log*文件会包含问题列表。
- en: '![](image_fi/503007c16/f16003.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c16/f16003.png)'
- en: 'Figure 16-3: The `current_weather_load` table'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图16-3：`current_weather_load`表格
- en: Assuming you got valid data and *copy_weather.sql* ran, the `current_weather`
    table should match [Figure 16-3](#figure16-3).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你收到了有效数据并且*copy_weather.sql*已运行，`current_weather`表格应该与[图16-3](#figure16-3)一致。
- en: Next, you’ll create the schedule to run this Bash script using cron.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将使用cron创建调度任务来运行这个Bash脚本。
- en: Scheduling the Bash Script on cron
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在cron上调度Bash脚本
- en: 'Using the command `crontab -e`, create the following crontab entry:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命令`crontab -e`，创建以下的crontab条目：
- en: '[PRE8]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `*/5` in the `minutes` column tells cron to run this job every 5 minutes.
    You can use the wildcard (`*`) character for all the other values (hour, day of
    month, month, and day of week, respectively), since you want the script to run
    for all hours, months, days, and days of the week. [Figure 16-4](#figure16-4)
    shows what each piece of the crontab entry means.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`*/5`在`minutes`列中告诉cron每5分钟运行一次这个任务。你可以对所有其他值（小时、月、日期和星期几）使用通配符（`*`）字符，因为你希望脚本在所有小时、月份、日期和星期几运行。[图16-4](#figure16-4)展示了每个crontab条目部分的含义。'
- en: '![](image_fi/503007c16/f16004.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c16/f16004.png)'
- en: 'Figure 16-4: Scheduling *weather.sh* on cron to run every 5 minutes'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图16-4：将*weather.sh*脚本调度到cron上每5分钟运行一次
- en: You then save the crontab file and exit the text editor that was launched by
    the `crontab -e` command.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你保存crontab文件并退出由`crontab -e`命令启动的文本编辑器。
- en: Alternative Approaches
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替代方法
- en: As the saying goes, there are many ways to skin a cat. Likewise, there are many
    other ways you could have approached this project using what you’ve learned so
    far.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 正如谚语所说，有很多种方法可以剥猫皮。同样，你可以使用到目前为止学到的知识，用许多其他方式来处理这个项目。
- en: You could have loaded the data from the CSV file directly to the final `current_weather`
    table, but using an interim load table enables you to correct any data issues
    behind the scenes without affecting user-facing data. If the CSV file comes to
    you with data problems like duplicate records, incorrectly formatted column values,
    or out-of-range values, your load into the `current_weather_load` table will fail.
    While you work with the CSV file supplier to get a corrected file, your application
    will continue using the existing data in the `current_weather` table and your
    users won’t be affected (though the weather data they see won’t be as up to date
    as it normally would be).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你本可以直接将数据从CSV文件加载到最终的`current_weather`表中，但使用临时加载表可以让你在后台修正任何数据问题，而不影响面向用户的数据。如果CSV文件中存在重复记录、格式不正确的列值或超出范围的值等数据问题，那么加载到`current_weather_load`表中的操作会失败。在你与CSV文件供应商合作获得修正文件的同时，你的应用程序将继续使用`current_weather`表中的现有数据，用户不会受到影响（尽管他们看到的天气数据不会像通常那样是最新的）。
- en: If your weather data provider had an *application programming interface (API)*
    available, you could have received this weather data from an API rather than loading
    a CSV data file. An API is another way to exchange data between two systems, but
    an in-depth discussion is beyond the scope of this book.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的天气数据提供者提供了*应用程序编程接口（API）*，你本可以通过API接收天气数据，而不是加载CSV数据文件。API是两种系统之间交换数据的另一种方式，但深入讨论API超出了本书的范围。
- en: You created a primary key and several other constraints on your `current_weather_load`
    table. You wouldn’t do this in cases where you need to load a large number of
    records from a file into a table. For performance reasons, you’d choose to load
    the data into a table that has no constraints. As each row is being written into
    the table, MySQL needs to check that the constraints aren’t being violated, which
    takes time. In your weather project, however, there were only 11 rows being loaded,
    so the load time was almost instantaneous even with the constraints.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你在`current_weather_load`表上创建了主键和其他约束。在需要从文件加载大量记录到表中的情况下，你不会这么做。出于性能考虑，你会选择将数据加载到没有约束的表中。因为在每一行写入表时，MySQL需要检查约束是否被违反，这会消耗时间。然而，在你的天气项目中，只有11行数据被加载，所以即使有约束，加载时间几乎是瞬时的。
- en: You could have added a line of code to the Bash script, *weather.sh*, to have
    it notify you and the data provider by email or text whenever there’s a problem
    loading the data. This wasn’t included in the project because it requires a bit
    of setup. To learn more, use the `man` command to look up the `mailx`, `mail`,
    or `sendmail` commands (for example, `man mailx`).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你本可以在Bash脚本*weather.sh*中添加一行代码，以便每当加载数据时出现问题时，通过电子邮件或短信通知你和数据提供者。这个功能没有包含在项目中，因为它需要一些设置。想了解更多，可以使用`man`命令查阅`mailx`、`mail`或`sendmail`命令（例如，`man
    mailx`）。
- en: Also, your database credentials are hardcoded in your *weather.sh* Bash script
    so that the script can call the MySQL command line client. When you load the data,
    MySQL gives you the warning `Using a password on the command line interface can
    be insecure`. It would be worth restructuring the code so that it hides your database
    user ID and password or using the `mysql_config_editor` utility shown in [Chapter
    14](c14.xhtml).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你的数据库凭证被硬编码在*weather.sh* Bash脚本中，以便脚本可以调用MySQL命令行客户端。当你加载数据时，MySQL会给出警告`Using
    a password on the command line interface can be insecure`。值得重新构建代码，使其隐藏你的数据库用户ID和密码，或者使用[第14章](c14.xhtml)中展示的`mysql_config_editor`工具。
- en: Summary
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this project, you scheduled a cron job to execute a Bash script that checks
    for the arrival of a CSV data file containing current weather data. When the file
    arrived, you loaded it into your MySQL database. You also checked for problems
    loading the data and, once it loaded cleanly, transferred the data to your final
    weather table.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你安排了一个cron作业来执行一个Bash脚本，该脚本检查包含当前天气数据的CSV数据文件是否已到达。当文件到达时，你将其加载到MySQL数据库中。你还检查了加载数据时是否存在问题，并且在数据成功加载后，将数据转移到最终的天气表中。
- en: In the next project, you’ll use triggers to track changes to voter data in a
    MySQL database.*
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个项目中，你将使用触发器来跟踪MySQL数据库中选民数据的变化。
