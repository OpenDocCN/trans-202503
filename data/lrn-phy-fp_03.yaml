- en: '2'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '2'
- en: WRITING BASIC FUNCTIONS
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 编写基本函数
- en: '![Image](Images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/common.jpg)'
- en: The function is the central idea of functional programming. In this chapter,
    we’ll learn how to define functions and constants and how to use those functions
    and constants in GHCi. We’ll discuss the language we use to talk about functions,
    and we’ll see how communicating with computers often requires more precision than
    communicating with people. We’ll then introduce Haskell’s system of *anonymous
    functions*, which are functions without a name. After a brief glimpse of Haskell’s
    type system (which we’ll describe more in [Chapter 3](ch03.xhtml)), we’ll show
    how the function composition operator can be used to compose functions. Finally,
    we’ll show the kind of error you get if you use a name that has not been defined.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 函数是函数式编程的核心概念。在本章中，我们将学习如何定义函数和常量，以及如何在 GHCi 中使用这些函数和常量。我们将讨论用于描述函数的语言，并且我们将看到，与计算机交流通常比与人类交流要求更多的精确性。然后，我们将介绍
    Haskell 的*匿名函数*系统，这些函数没有名称。在简要了解 Haskell 的类型系统后（我们将在[第 3 章](ch03.xhtml)中详细描述），我们将展示如何使用函数组合运算符来组合函数。最后，我们将展示如果使用未定义的名称会出现什么样的错误。
- en: Constants, Functions, and Types
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常量、函数和类型
- en: 'Programming in Haskell is a process of defining functions. Functions express
    to the computer how to calculate something we want. Haskell functions are much
    like mathematical functions: they take inputs and produce an output that depends
    on the inputs. Like mathematical functions, Haskell functions have a domain, describing
    the kind of entities that can be used as input, and a codomain (sometimes called
    range), describing the kind of entities that will be produced as output.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 用 Haskell 编程的过程是定义函数的过程。函数向计算机表达我们想要计算的内容。Haskell 函数与数学函数非常相似：它们接受输入，并生成一个依赖于输入的输出。与数学函数类似，Haskell
    函数有一个定义域，描述可以作为输入的实体类型，还有一个值域（有时称为范围），描述将会生成的输出实体类型。
- en: Unlike mathematical functions, Haskell functions must be *constructive*. They
    must give a clear, well-defined recipe for constructing the output from the inputs.
    Abelson and Sussman, in their wonderful book *Structure and Interpretation of
    Computer Programs* [**[3](bib.xhtml#bib3)**], note that the square root function,
    defined as a number that is nonnegative and squares to equal the input, is a perfectly
    legitimate mathematical function. But this definition does not give a recipe for
    how to construct the square root from the input, so it cannot be made into a Haskell
    function. Fortunately, there are other definitions of square root that are constructive
    and can be made into Haskell functions.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 与数学函数不同，Haskell 函数必须是*构造性的*。它们必须提供一个清晰、明确的构造输出的步骤，基于输入。Abelson 和 Sussman 在他们的精彩著作《*计算机程序的结构与解释*》[**[3](bib.xhtml#bib3)**]中提到，平方根函数的定义是一个非负数，且其平方等于输入值，这是一个完全合法的数学函数。但这个定义并没有提供如何从输入构造平方根的步骤，因此无法转化为一个
    Haskell 函数。幸运的是，存在一些其他的平方根定义是构造性的，可以转化为 Haskell 函数。
- en: There is a way to define functions inside GHCi, but since we’ll want to use
    most functions we define more than once, it’s better to define our functions in
    a *source code file*, also called a *program file*, and then load that file into
    GHCi.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种方法可以在 GHCi 中定义函数，但由于我们通常希望定义的函数能被多次使用，因此最好将函数定义在*源代码文件*中，也叫做*程序文件*，然后将该文件加载到
    GHCi 中。
- en: We’ll need a text editor to create such a file. Examples of popular text editors
    are GNU Emacs, Vim, and gedit.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个文本编辑器来创建这样的文件。常见的文本编辑器包括 GNU Emacs、Vim 和 gedit。
- en: Word processing programs you might use to type a letter or a document are not
    appropriate for this purpose because they store the text you type with additional
    information (such as font type and size) that will make no sense to the Haskell
    compiler.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能用来输入信件或文档的文字处理程序并不适用于这个目的，因为它们在你输入的文本中存储了额外的信息（如字体类型和大小），这些信息对Haskell编译器来说是没有意义的。
- en: 'Using a text editor, let’s create a file named *first.hs* for our first program.
    (The *.hs* extension indicates a Haskell program.) Put the following lines in
    the file:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用文本编辑器，让我们创建一个名为*first.hs*的文件，来编写我们的第一个程序。（*.hs* 扩展名表示一个 Haskell 程序。）在文件中写入以下内容：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This program file defines a constant and a function. The lines that begin with
    a double hyphen are *comments*. The Haskell compiler ignores any line that begins
    with a double hyphen; in fact, it ignores whatever is written after a double hyphen
    until the end of the line, unless the double hyphen is part of a string or certain
    other special environments. Comments are meant to help humans read the code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序文件定义了一个常量和一个函数。以双连字符开头的行是*注释*。Haskell 编译器会忽略任何以双连字符开头的行；事实上，它会忽略双连字符之后直到行尾的所有内容，除非双连字符是字符串或某些其他特殊环境的一部分。注释的目的是帮助人类阅读代码。
- en: The first two non-comment lines of the file define the constant *e*, the base
    of natural logarithms. Unlike *π*, *e* is not included in the Haskell Prelude.
    The line
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的前两行非注释部分定义了常量*e*，自然对数的底数。与*π*不同，*e*并不包含在 Haskell 的预置库中。
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: declares the *type* of `e` to be `Double`. A *type* is a description of commonality
    in how entities can be used. Every expression in Haskell has a type, which tells
    the compiler about the situations in which the expression can be used and the
    situations in which it cannot. For example, the `Double` type tells the compiler
    that `e` is an approximation of a real number, sometimes called a floating-point
    number. The name `Double` is used for historical reasons to mean a *double-precision*
    floating-point number. This type of number is capable of about 15 decimal digits
    of precision, compared with a single-precision number that is capable of about
    seven decimal digits of precision. Haskell has a type `Float` for single-precision
    numbers. Unless there is a compelling reason to do otherwise, we’ll always use
    type `Double` for our (approximations of) real numbers.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 声明了`e`的*类型*为`Double`。*类型*是对实体如何使用的共性的描述。Haskell 中的每个表达式都有一个类型，它告诉编译器在什么情况下该表达式可以使用，在哪些情况下不能使用。例如，`Double`类型告诉编译器`e`是一个实数的近似值，通常称为浮动点数。`Double`这个名称是出于历史原因，意味着*双精度*浮动点数。这种类型的数字可以达到大约15位小数精度，而单精度数字大约只能达到7位小数精度。Haskell
    中有一个类型`Float`用于单精度数字。除非有充分的理由，否则我们总是使用`Double`类型来表示我们的（实数的）近似值。
- en: In addition to `Double`, there are several other types we might want to use.
    Haskell has a type `Int` for small integers (up to at least a few billion) and
    a type `Integer` for arbitrary-size integers. [Chapter 3](ch03.xhtml) is all about
    types.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`Double`，我们可能还想使用其他一些类型。Haskell 有一个类型`Int`用于小整数（至少到几十亿），以及一个类型`Integer`用于任意大小的整数。[第3章](ch03.xhtml)专门讲解类型。
- en: Let’s get back to our *first.hs* program file. As we said earlier, the first
    non-comment line of the file declares the type of the name `e` to be `Double`.
    This kind of line, with a name followed by a double colon followed by a type,
    is called a *type signature*. We may also call such a line a *declaration*, because
    it declares the name `e` to have type `Double`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们的*first.hs*程序文件。正如我们之前所说，文件的第一行非注释部分声明了`e`的类型为`Double`。这种类型的行，以一个名称后跟双冒号然后是类型，被称为*类型签名*。我们也可以称这样的行为*声明*，因为它声明了名称`e`具有类型`Double`。
- en: The second non-comment line of the file actually *defines* `e`. Here, we use
    the built-in function `exp` applied to the number `1` to produce the constant
    `e`. Remember that we don’t need parentheses to apply a function to an argument.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的第二行非注释部分实际上是*定义*了`e`。在这里，我们使用内置函数`exp`对数字`1`进行应用，得到常数`e`。请记住，我们在应用函数到参数时不需要使用括号。
- en: Next, we have a type signature for the function `square`. The type of `square`
    is declared to be `Double -> Double`. A type containing an arrow is called a *function
    type*. (Function types will be explored in more detail in the next chapter.) It
    says that `square` is a function that takes a `Double` as input and produces a
    `Double` as output. The last line defines the function `square`. Note the `**`
    operator used for exponentiation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有了函数`square`的类型签名。`square`的类型被声明为`Double -> Double`。包含箭头的类型被称为*函数类型*。（函数类型将在下一章中更详细地探讨。）这表示`square`是一个接收`Double`作为输入并输出一个`Double`的函数。最后一行定义了函数`square`。请注意用于指数运算的`**`运算符。
- en: To load this program file into GHCi, use GHCi’s `:load` command (`:l` for short).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此程序文件加载到 GHCi 中，请使用 GHCi 的`:load`命令（简称`:l`）。
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After we load *first.hs*, the GHCi prompt changes from `Prelude>` to `*Main>`.
    This indicates that our program file has been successfully loaded and given the
    default name `Main`. We now have access to the constant and function defined in
    the file.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 加载*first.hs*文件后，GHCi提示符会从`Prelude>`变为`*Main>`。这表明我们的程序文件已成功加载，并且被赋予了默认名称`Main`。我们现在可以访问文件中定义的常量和函数。
- en: The names `e` and `square` defined in the file *first.hs* are examples of *variable
    identifiers* in Haskell. Variable identifiers must begin with a lowercase letter,
    followed by zero or more uppercase letters, lowercase letters, digits, underscores,
    and single quotes. Names that begin with an uppercase letter are reserved for
    types, type classes (which we’ll discuss in [Chapter 8](ch08.xhtml)), and module
    names.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 文件*first.hs*中定义的`e`和`square`是Haskell中的*变量标识符*的示例。变量标识符必须以小写字母开头，后跟零个或多个大写字母、小写字母、数字、下划线和单引号。以大写字母开头的名称保留给类型、类型类（我们将在[第8章](ch08.xhtml)中讨论）和模块名称。
- en: If you forget or don’t know the type of something, you can ask GHCi for the
    type with the `:type` command (`:t` for short).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你忘记了某个东西的类型，或者不知道它的类型，可以通过GHCi的`:type`命令（简写为`:t`）询问类型。
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The notation used for defining a function in Haskell is similar to mathematical
    notation in some ways and different in a few others. Let’s comment on the differences.
    [Table 2-1](ch02.xhtml#ch2tab1) shows a few examples.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在Haskell中定义函数的符号在某些方面与数学符号类似，在其他方面则有所不同。让我们来讨论这些不同之处。[表2-1](ch02.xhtml#ch2tab1)展示了一些示例。
- en: '**Table 2-1:** Comparison of Function Definitions in Traditional Mathematical
    Notation with Function Definitions in Haskell'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**表2-1：** 传统数学符号定义的函数与Haskell定义的函数对比'
- en: '| **Mathematical definition** | **Haskell definition** |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| **数学定义** | **Haskell定义** |'
- en: '| --- | --- |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| *f*(*x*) = *x*³ | `f x = x**3` |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| *f*(*x*) = *x*³ | `f x = x**3` |'
- en: '| *f*(*x*) = 3*x*² – 4*x* + 5 | `f x = 3 * x**2 - 4 * x + 5` |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| *f*(*x*) = 3*x*² – 4*x* + 5 | `f x = 3 * x**2 - 4 * x + 5` |'
- en: '| *g*(*x*) = cos 2*x* | `g x = cos (2 * x)` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| *g*(*x*) = cos 2*x* | `g x = cos (2 * x)` |'
- en: '| *v*(*t*) = 10*t* + 20 | `v t = 10 * t + 20` |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| *v*(*t*) = 10*t* + 20 | `v t = 10 * t + 20` |'
- en: '| *h*(*x*) = *e*^(*–x*) | `h x = exp (-x)` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| *h*(*x*) = *e*^(*–x*) | `h x = exp (-x)` |'
- en: First, notice that traditional mathematical notation (and some computer algebra
    systems) use juxtaposition to represent multiplication. For example, 2*x* means
    2 multiplied by *x*, just because the symbols are next to each other. Haskell
    requires use of the multiplication operator `*`. In Haskell, juxtaposition means
    function application.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请注意传统的数学符号（以及某些计算机代数系统）使用相邻符号表示乘法。例如，2*x*表示2乘以*x*，仅仅因为这些符号放在一起。Haskell需要使用乘法运算符`*`。在Haskell中，相邻符号表示的是函数应用。
- en: Next, notice that traditional mathematical notation requires that function arguments
    be put in parentheses after the function name. This is true for function definitions
    (compare *f* (*x*) = *x*³ with Haskell’s `f x = x**3`) as well as function applications
    (compare *f* (2) with Haskell’s `f 2`). Haskell does not require parentheses in
    function definition or application. Haskell uses parentheses to indicate the order
    of operations.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，请注意传统数学符号要求函数参数必须放在函数名后面的小括号内。这对于函数定义（比较*f* (*x*) = *x*³与Haskell的`f x =
    x**3`）以及函数应用（比较*f* (2)与Haskell的`f 2`）都是如此。而Haskell在函数定义和应用中并不需要括号。Haskell使用括号来表示运算顺序。
- en: Lastly, traditional mathematical notation tries to get away with single-letter
    function names, such as *f* . Haskell allows single-letter function names, but
    it is much more common to use a multi-letter word for a function name (such as
    `square` above), especially when the word can serve as a good description of what
    the function does.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，传统的数学符号通常使用单个字母的函数名，例如*f*。Haskell允许使用单个字母的函数名，但更常见的是使用多个字母组成的函数名（例如上面的`square`），尤其是当这个词能很好地描述函数的功能时。
- en: How We Talk About Functions
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何讨论函数
- en: 'Suppose we define a function *f* as *f* (*x*) = *x*² – 3*x* + 2\. It’s common
    in mathematics and physics to speak of “the function *f* (*x*).” Haskell invites
    us to think a bit more carefully and precisely about this bad habit. (Well, it
    really *requires* us to think more carefully about it, but it’s always nicer to
    be invited than required, no?) Instead of saying “the function *f* (*x*),” we
    should say one of the following, depending on what we mean:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们定义一个函数 *f* 为 *f* (*x*) = *x*² – 3*x* + 2。在数学和物理中，常常会说“函数 *f* (*x*)”。Haskell
    鼓励我们更仔细、更准确地思考这一常见的习惯。（实际上，它要求我们更仔细地思考这一点，但总是更好的是被邀请，而不是被要求，不是吗？）与其说“函数 *f* (*x*)”，我们应该根据具体含义说出以下之一：
- en: The function *f*
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数 *f*
- en: The value *f* (*x*)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值 *f* (*x*)
- en: Given a number *x*, the value of the function *f* at *x*
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定一个数字 *x*，函数 *f* 在 *x* 处的值
- en: The second and third bullet points are two ways of saying the same thing. The
    first bullet point is saying something different from the second and third.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 第二点和第三点是两种表达相同意思的方式。第一点则与第二点和第三点表达的含义不同。
- en: What’s wrong with saying “the function *f* (*x*)?” It’s common in mathematics
    and physics to use “the function *f*” and “the function *f* (*x*)” interchangeably,
    with the second expression merely indicating explicitly that *f* depends on *x*.
    We think of mathematical notation as being a precise representation of an idea,
    but this is a case where the commonly used notation is not precise.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 说“函数 *f* (*x*)”有什么问题？在数学和物理中，通常将“函数 *f*”与“函数 *f* (*x*)”互换使用，后者只是明确地表示 *f* 依赖于
    *x*。我们通常认为数学符号是某个概念的精确表示，但在这种情况下，常用的符号并不精确。
- en: One reason for shunning the language “the function *f* (*x*)” is that if *f*
    (*x*) = *x*² – 3*x* + 2, then *f* (*y*) = ^(*y*2) – 3*y* + 2\. The letter *x*
    really has nothing to do with the function *f* . Granted, we need *some* letter
    to use to make the definition, but it doesn’t matter which one. We call *x* a
    *dummy variable* when it’s used to define something else.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 避免使用“函数 *f* (*x*)”这个表述的一个原因是，如果 *f* (*x*) = *x*² – 3*x* + 2，那么 *f* (*y*) = ^(*y*²)
    – 3*y* + 2。字母 *x* 与函数 *f* 实际上没有任何关系。当然，我们需要*某个*字母来定义，但其实哪个字母都无所谓。当 *x* 用于定义其他内容时，我们称其为*虚拟变量*。
- en: In Haskell, we say *f* (*x*) when we want to evaluate the function *f* using
    the input *x*. We say *f* when we want to speak about the function itself, not
    evaluate it (that is, not give it any input). What else is there to do with a
    function except give it an input? Well, you could *integrate* the function between
    given limits. You could *differentiate* the function to obtain another function.
    You could, in some cases, apply the function twice. In short, there are many things
    we might want to do with a function other than simply evaluating it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Haskell 中，当我们想要通过输入 *x* 来求值函数 *f* 时，我们说 *f* (*x*)。当我们想谈论函数本身，而不是求值时（即不给它任何输入），我们说
    *f*。那除了给函数输入，我们还能做什么呢？嗯，你可以在给定的区间内*积分*该函数。你也可以*求导*该函数得到另一个函数。在某些情况下，你还可以将该函数应用两次。简而言之，除了简单地求值外，我们可能还想对一个函数做很多其他事情。
- en: Haskell’s type system helps us understand the key distinction between *f* and
    *f* (*x*). The variable *x* is a number, so it has a type like `Double`. Now *f*
    is a function, so it has a type like `Double -> Double`. Finally, *f* (*x*) means
    the function *f* evaluated at the number *x*, so *f* (*x*) has type `Double`.
    Things that have type `Double -> Double` are functions. Things that have type
    `Double` are numbers. The table below summarizes these distinctions.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Haskell 的类型系统帮助我们理解 *f* 和 *f* (*x*) 之间的关键区别。变量 *x* 是一个数字，因此它具有类似 `Double` 的类型。而
    *f* 是一个函数，因此它的类型是 `Double -> Double`。最后，*f* (*x*) 表示函数 *f* 在数字 *x* 处的值，所以 *f*
    (*x*) 的类型是 `Double`。类型为 `Double -> Double` 的是函数，类型为 `Double` 的是数字。下表总结了这些区别。
- en: '| **Math notation** | **Haskell notation** | **Haskell type** |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| **数学符号** | **Haskell符号** | **Haskell类型** |'
- en: '| --- | --- | --- |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| *f* | `f` | `Double -> Double` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| *f* | `f` | `Double -> Double` |'
- en: '| *f* (3) | `f 3` | `Double` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| *f* (3) | `f 3` | `Double` |'
- en: '| *f* (*x*) | `f x` | `Double` |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| *f* (*x*) | `f x` | `Double` |'
- en: Computers are notorious for being inflexible in understanding what a person
    means. Computers look at exactly what you say, and they give warnings and errors
    if your input doesn’t meet their requirements for format and interpretation. Most
    of the time, this is a pain in the neck. We would like to have an assistant that
    understands what we mean and does what we want.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机在理解人类的意思方面因其不灵活性而臭名昭著。计算机会精确地检查你所说的内容，如果你的输入不符合它们的格式和解释要求，它们会给出警告和错误。大多数时候，这让人非常头疼。我们希望能有一个理解我们意思并按照我们希望去做的助手。
- en: However, in the case of types and functions, Haskell’s inflexibility is a great
    teaching aid. Haskell is helping us to organize our thinking so we will be prepared
    to do more complex things in a structured and organized way. In [Chapter 6](ch06.xhtml),
    which covers higher-order functions, we’ll see examples of how careful thinking
    about types and functions allows us to encode more complex ideas simply and easily.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在类型和函数的情况下，Haskell的严格性是一个很好的教学辅助工具。Haskell帮助我们组织思维，以便我们能够以结构化和有序的方式准备进行更复杂的操作。在[第6章](ch06.xhtml)中，我们将看到关于类型和函数的精心思考如何使我们能够简单而轻松地编码更复杂的思想。
- en: When we use Haskell, we make a trade-off. We agree to use language in a precise
    and careful way (the compiler is going to check us on this), and in exchange,
    we’ll be able to say things in the language that are rather complex and difficult
    to say in a language that accommodates imprecision. Thus, we’ll be able expose
    the essential structure of a physical theory like Newtonian mechanics.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用Haskell时，我们做出了一个权衡。我们同意以一种精确而谨慎的方式使用语言（编译器会检查我们），作为交换，我们可以在语言中表达一些在容忍不精确的语言中难以表达的复杂内容。因此，我们能够揭示像牛顿力学这样的物理理论的基本结构。
- en: Anonymous Functions
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 匿名函数
- en: Haskell provides a way to specify a function without naming it. For example,
    the function that squares its argument can be written as `\x -> x**2`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Haskell提供了一种无需命名即可指定函数的方式。例如，平方其参数的函数可以写作`\x -> x**2`。
- en: A function specified in this way is called an *anonymous function* or a *lambda
    function* after the lambda calculus developed by Alonzo Church in the 1930s. (Church
    was Alan Turing’s PhD advisor.) The backslash character (`\`) was thought by Haskell’s
    creators to look a bit like the lowercase Greek letter lambda (*λ*).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式指定的函数称为*匿名函数*或*λ函数*，其名称来源于20世纪30年代阿隆佐·丘奇（Alonzo Church）发展出的λ演算。（丘奇是艾伦·图灵（Alan
    Turing）的博士导师。）Haskell的创作者认为反斜杠字符（`\`）看起来有点像希腊字母小写lambda（*λ*）。
- en: '[Table 2-2](ch02.xhtml#ch2tab2) shows examples of mathematical functions written
    as lambda functions. This is an alternative way to define the functions in [Table
    2-1](ch02.xhtml#ch2tab1).'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[表2-2](ch02.xhtml#ch2tab2)展示了以λ函数形式书写的数学函数示例。这是[表2-1](ch02.xhtml#ch2tab1)中函数定义的另一种方式。'
- en: '**Table 2-2:** Comparison of Function Definitions in Traditional Mathematical
    Notation with Lambda Functions Defined in Haskell'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**表2-2：** 传统数学符号函数定义与在Haskell中定义的λ函数的对比'
- en: '| **Mathematical function** | **Haskell lambda function** |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| **数学函数** | **Haskell λ函数** |'
- en: '| --- | --- |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| *f* (*x*) = *x*³ | `f = \x -> x**3` |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| *f* (*x*) = *x*³ | `f = \x -> x**3` |'
- en: '| *f* (*x*) = 3*x*² – 4*x* + 5 | `f = \x -> 3 * x**2 - 4 * x + 5` |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| *f* (*x*) = 3*x*² – 4*x* + 5 | `f = \x -> 3 * x**2 - 4 * x + 5` |'
- en: '| *g*(*x*) = cos 2*x* | `g = \x -> cos (2 * x)` |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| *g*(*x*) = cos 2*x* | `g = \x -> cos (2 * x)` |'
- en: '| *v*(*t*) = 10*t* + 20 | `v = \t -> 10 * t + 20` |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| *v*(*t*) = 10*t* + 20 | `v = \t -> 10 * t + 20` |'
- en: '| *h*(*x*) = *e*^(*–x*) | `h = \x -> exp (-x)` |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| *h*(*x*) = *e*^(*–x*) | `h = \x -> exp (-x)` |'
- en: The real power of lambda functions comes from using them in places where we
    need a function but don’t want to spend the effort (that is, a declaration and
    a definition) to name a new function. We’ll see examples of how this is useful
    in [Chapter 6](ch06.xhtml), where we discuss higher-order functions that take
    other functions as input. These other functions are sometimes conveniently expressed
    as anonymous functions.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: λ函数的真正优势在于，我们可以在需要一个函数但又不想花费精力（即不想声明和定义）来命名新函数的地方使用它们。我们将在[第6章](ch06.xhtml)中看到如何利用这一点，在该章中我们讨论了接受其他函数作为输入的高阶函数。这些其他函数有时可以方便地表示为匿名函数。
- en: We can apply the anonymous squaring function `\x -> x**2` to the argument 3
    by writing `(\x -> x**2) 3` at the GHCi prompt.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在GHCi提示符下写`(\x -> x**2) 3`来将匿名平方函数`\x -> x**2`应用于参数3。
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice that when we write `\x -> x**2`, we are *not* defining what `x` is. Instead
    we are saying that if we temporarily allow `x` to stand for the argument of the
    function (such as `3` above), we have a rule for determining the value of the
    function applied to the argument. The same remark is true of (named) mathematical
    functions; when we define *f* (*x*) = *x*², this is a definition for *f*, not
    a definition for *x*. The function `\x -> x**2` is the same as the function `\y
    -> y**2`; the variable we use to name the argument is not important. Both are
    the function that squares its argument.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当我们写 `\x -> x**2` 时，我们*并没有*定义`x`是什么。相反，我们是在说，如果我们暂时允许`x`代表函数的参数（如上面的`3`），我们就有一个规则来确定应用该函数于该参数时的结果。对于（命名的）数学函数也有类似的说法；当我们定义
    *f* (*x*) = *x*² 时，这是对 *f* 的定义，而不是对 *x* 的定义。函数 `\x -> x**2` 与函数 `\y -> y**2` 是相同的；我们用来命名参数的变量并不重要。两者都是将其参数平方的函数。
- en: '[Table 2-3](ch02.xhtml#ch2tab3) shows examples of the application of anonymous
    functions to an argument.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[表2-3](ch02.xhtml#ch2tab3)展示了匿名函数应用于一个参数的例子。'
- en: '**Table 2-3:** Examples of Applying Anonymous Functions to an Argument'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**表2-3：** 应用匿名函数于参数的例子'
- en: '| **Expression** |  | **Evaluates to** |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| **表达式** |  | **求值结果** |'
- en: '| --- | --- | --- |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `(\x -> x**2) 3` | ⇝ | 9.0 |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `(\x -> x**2) 3` | ⇝ | 9.0 |'
- en: '| `(\y -> y**2) 3` | ⇝ | 9.0 |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `(\y -> y**2) 3` | ⇝ | 9.0 |'
- en: '| `(\x -> x**3) 3` | ⇝ | 27.0 |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `(\x -> x**3) 3` | ⇝ | 27.0 |'
- en: '| `(\x -> 3 * x**2 - 4 * x + 5) 3` | ⇝ | 20.0 |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `(\x -> 3 * x**2 - 4 * x + 5) 3` | ⇝ | 20.0 |'
- en: '| `(\x -> cos (2 * x)) pi` | ⇝ | 1.0 |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `(\x -> cos (2 * x)) pi` | ⇝ | 1.0 |'
- en: '| `(\t -> 10 * t + 20) 3` | ⇝ | 50 |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `(\t -> 10 * t + 20) 3` | ⇝ | 50 |'
- en: '| `(\x -> exp (-x)) (log 2)` | ⇝ | 0.5 |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `(\x -> exp (-x)) (log 2)` | ⇝ | 0.5 |'
- en: These examples can be evaluated at the GHCi prompt.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这些例子可以在 GHCi 提示符下进行求值。
- en: Composing Functions
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组合函数
- en: Writing cos² *x* is shorthand for (cos *x*)², which means “take the cosine of
    *x* and then square the result.” When we use the output of one function *f* as
    the input to another function *g*, we are *composing* the two functions to produce
    a new function. We write *g* ∘*f*, called *g after f*, for the function that applies
    *f* to its input and then applies *g* to the result.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 写 cos² *x* 是 (cos *x*)² 的简写，意思是“先取 *x* 的余弦值，再对结果平方。”当我们将一个函数 *f* 的输出作为另一个函数
    *g* 的输入时，我们是在*组合*这两个函数来生成一个新函数。我们写 *g* ∘*f*，称为*g after f*，表示先将 *f* 应用于其输入，再将 *g*
    应用于结果。
- en: '![Image](Images/021equ01.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/021equ01.jpg)'
- en: 'The *function composition operator* (`.`) from [Table 1-2](ch01.xhtml#ch1tab2)
    serves the role that ∘ serves in mathematical notation. The following four functions
    are equivalent ways of defining the cosine squared function:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 来自[表1-2](ch01.xhtml#ch1tab2)的*函数组合运算符* (`.`) 扮演着数学符号中∘的角色。以下四个函数是定义余弦平方函数的等价方式：
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The first function, `cosSq`, defines the square of the cosine of a number in
    the most straightforward way. It’s clear from the parentheses that the cosine
    acts on `x` first, and then the function `square` gets applied. The second function,
    `cosSq'`, does the same thing, but it uses the function application operator `$`
    instead of parentheses (see “The Application Operator” in [Chapter 1](ch01.xhtml)
    ). The third function, `cosSq''`, shows how the composition operator can be used
    to compose the functions `square` and `cos`. The expression `square . cos` is
    like the *g* ∘*f* on the left side of Equation 2.1, where `square` plays the role
    of *g* and `cos` plays the role of *f* . The fourth function, `cosSq'''`, shows
    how Haskell lets us define a function without mentioning the argument to which
    it will be applied. Such a definition is called *point-free style*. If *h* is
    the function defined by *h*(*x*) = *g*(*f* (*x*)), mathematical notation allows
    us to alternatively define *h* by *h* = *g* ∘*f*. The function `cosSq''` expresses
    the former definition, and the function `cosSq'''` expresses the latter. If you
    feel the need to define a cosine squared function, any of the four functions would
    be perfectly acceptable. The choice is a matter of style. The last definition
    is my favorite because of its concision.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个函数`cosSq`以最直接的方式定义了一个数字的余弦平方。从括号中可以清楚地看出，余弦首先作用于`x`，然后应用函数`square`。第二个函数`cosSq'`做了同样的事情，但它使用了函数应用操作符`$`而不是括号（参见[第1章](ch01.xhtml)中的“函数应用操作符”）。第三个函数`cosSq''`展示了如何使用组合操作符将函数`square`和`cos`组合起来。表达式`square
    . cos`就像方程2.1左侧的*g* ∘*f*，其中`square`充当*g*的角色，`cos`充当*f*的角色。第四个函数`cosSq'''`展示了Haskell如何让我们定义一个不提及其应用参数的函数。这种定义方式称为*无点风格*。如果*h*是由*h*(*x*)
    = *g*(*f* (*x*))定义的函数，那么数学符号允许我们将*h*定义为*h* = *g* ∘*f*。函数`cosSq''`表达了前一种定义，而函数`cosSq'''`表达了后一种定义。如果你需要定义一个余弦平方函数，四个函数中的任何一个都是完全可接受的。选择只是风格问题。最后一个定义是我最喜欢的，因为它简洁。
- en: The definitions just shown are examples of Haskell’s delightful feature of allowing
    tick marks (single quotes) in identifiers. This is nice because it supports our
    mathematical usage of the concise “*x* prime” for something that is related to
    *x*.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 上面显示的定义是Haskell一个令人愉快的特性——允许在标识符中使用撇号（单引号）的示例。这很棒，因为它支持我们在数学中使用简洁的“*x* prime”表示与*x*相关的事物。
- en: The function composition operator can be used between any two functions in which
    the output type of the first function applied matches the input type of the second.
    In practice, the function composition operator often serves as a way to avoid
    naming a new function. If the functions `square` and `cos` are available, there
    is really no need to make any of the four definitions because `square . cos` is
    a perfectly good function that can be used anywhere `cosSq` can be.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 函数组合操作符可以用于任何两个函数，其中第一个函数的输出类型与第二个函数的输入类型匹配。在实践中，函数组合操作符通常作为一种避免命名新函数的方式。如果`square`和`cos`这两个函数可用，那么实际上没有必要做出任何四个定义中的任何一个，因为`square
    . cos`是一个完全有效的函数，可以在任何需要`cosSq`的地方使用。
- en: Variable Not in Scope Error
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量不在作用域错误
- en: One of the simplest types of error comes from using a name that has not been
    defined. If we ask GHCi for the value of `x` without having defined `x`, we’ll
    get a “Variable not in scope” error.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的一种错误类型是使用了一个未定义的名称。如果我们请求GHCi输出`x`的值而没有定义`x`，我们将得到一个“变量不在作用域”错误。
- en: '[PRE6]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The *scope* of a name is the set of situations in which the name can be used
    and properly understood by the compiler. The “Variable not in scope” error might
    be better called “name not recognized.” Any name the compiler expects to recognize
    but doesn’t will produce this error. The error comes from the use of a name we
    haven’t defined or haven’t told the compiler where to find. This applies to functions,
    constants, and local variables (which we will introduce later)—essentially any
    entity that can have a name. Common identifiers, such as `x`, can be reused, and
    there are ways to unambiguously control which `x` we are referring to at a particular
    point in our program.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名称的*作用域*是指可以使用该名称并且编译器能够正确理解的情况集合。 “变量不在作用域”错误可能更适合称为“名称无法识别”。任何编译器预期能识别但无法识别的名称都会产生此错误。该错误源于使用了一个我们未定义的名称，或者没有告诉编译器在哪里可以找到该名称。这适用于函数、常量和局部变量（我们稍后会介绍）——基本上是任何可以拥有名称的实体。常见标识符，例如`x`，可以重复使用，而且有办法在程序的特定位置明确控制我们指的是哪个`x`。
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how to define functions in a source code file and load
    them into GHCi to use them. We showed how anonymous functions can be used in places
    where we need a function but don’t want to name it. The need for and usefulness
    of anonymous functions will become clearer in [Chapter 6](ch06.xhtml). The function
    composition operator can be used to compose any two functions in which the output
    type of the first matches the input type of the second. We saw how a “Variable
    not in scope” error can arise when the computer thinks it should know the meaning
    of a name but doesn’t. In the next chapter, we’ll look more deeply into Haskell’s
    system of types, which provides a powerful tool to organize our thinking and reflect
    that organization in our writing.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在源代码文件中定义函数并将其加载到GHCi中使用。我们展示了如何在需要函数但又不想命名它的地方使用匿名函数。匿名函数的需求和实用性将在[第6章](ch06.xhtml)中更加明确。函数组合运算符可以用于组合任意两个函数，其中第一个函数的输出类型与第二个函数的输入类型匹配。我们看到，当计算机认为应该知道一个名字的含义但又没有时，可能会出现“变量不在作用域”错误。在下一章中，我们将更深入地了解Haskell的类型系统，它为我们组织思维并在写作中反映这种组织提供了强大的工具。
- en: Exercises
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习
- en: '**Exercise 2.1.** In a Haskell program file (a new file with a new name that
    ends in *.hs*), define the function ![Image](Images/023equ01.jpg). As we did for
    the function `square`, give both a type signature and a function definition. Then
    load this file into GHCi and check that *f* (0) gives 1, *f* (1) gives about 1.414,
    and *f* (3) gives 2.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 2.1.** 在一个Haskell程序文件中（一个新的文件，文件名以*.hs*结尾），定义函数 ![Image](Images/023equ01.jpg)。就像我们为函数`square`做的那样，给出类型签名和函数定义。然后将该文件加载到GHCi中，检查
    *f* (0) 是否等于1，*f* (1) 是否约等于1.414，以及 *f* (3) 是否等于2。'
- en: '**Exercise 2.2.** Consider throwing a rock straight upward from the ground
    at 30 m/s. Ignoring air resistance, find an expression *y*(*t*) for the height
    of the rock as a function of time.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 2.2.** 假设从地面将一块石头以30米/秒的速度直线上抛。忽略空气阻力，找到石头的高度 *y*(*t*) 作为时间的函数。'
- en: Add on to your program file *first.hs* by writing a function
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的程序文件*first.hs*中添加一个函数
- en: '[PRE7]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: that accepts as input the time (after the rock was thrown) in seconds and gives
    as output the height of the rock in meters.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接受时间（从抛出石头开始的秒数）作为输入，输出石头的高度（单位：米）。
- en: '**Exercise 2.3.** Continuing with the rock example, write a function'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 2.3.** 继续使用石头的例子，编写一个函数'
- en: '[PRE8]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: that accepts as input the time (after the rock was thrown) in seconds and gives
    as output the upward velocity of the rock in meters per second. (A downward velocity
    should be returned as a negative number.)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接受时间（从抛出石头开始的秒数）作为输入，输出石头的上升速度（单位：米/秒）。（向下的速度应该返回负数。）
- en: '**Exercise 2.4.** Define a function `sinDeg` that computes the sine of an angle
    given in degrees. Test your function by evaluating `sinDeg 30`.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 2.4.** 定义一个函数`sinDeg`，计算给定角度（单位：度）的正弦值。通过计算`sinDeg 30`来测试你的函数。'
- en: '**Exercise 2.5.** Write Haskell function definitions for the following mathematical
    functions. In each case, write a type signature (the type should be `Double ->
    Double` for each function) and a function definition. You will need to pick alternative
    names for some of these functions because Haskell functions must begin with a
    lowercase letter. Do not use more than two levels of nested parentheses.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 2.5.** 编写Haskell函数定义，表示以下数学函数。在每种情况下，写出类型签名（每个函数的类型应为`Double -> Double`）和函数定义。你需要为这些函数选择其他名称，因为Haskell函数必须以小写字母开头。不要使用超过两个括号嵌套的函数。'
- en: (a) ![Image](Images/024equ01.jpg)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](Images/024equ01.jpg)'
- en: (b) *g*(*y*) = *e^y* + 8^(*y*)
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: (b) *g*(*y*) = *e^y* + 8^(*y*)
- en: (c) ![Image](Images/024equ02.jpg)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](Images/024equ02.jpg)'
- en: (d) ![Image](Images/024equ03.jpg)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](Images/024equ03.jpg)'
- en: (e) ![Image](Images/024equ04.jpg)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](Images/024equ04.jpg)'
- en: (f) ![Image](Images/024equ05.jpg)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](Images/024equ05.jpg)'
- en: (g) ![Image](Images/024equ06.jpg)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](Images/024equ06.jpg)'
- en: (h) ![Image](Images/024equ07.jpg)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](Images/024equ07.jpg)'
- en: '**Exercise 2.6.**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 2.6.**'
- en: (a) Express ![Image](Images/024equ08.jpg) as an anonymous function.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: (a) 将![Image](Images/024equ08.jpg)表示为匿名函数。
- en: (b) Write an expression that applies the anonymous function from part (a) to
    the argument 0.8\. What result do you get from GHCi?
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: (b) 写一个表达式，将部分（a）中的匿名函数应用于参数0.8。你从GHCi得到什么结果？
