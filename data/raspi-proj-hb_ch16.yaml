- en: '**16'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**16**'
- en: Connecting your Electronics to the Web**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的电子设备连接到互联网**
- en: In this project you’ll create your own Internet of Things web server you can
    use to control a lamp remotely from your phone. The simple web server you’ll build
    can then be added to other projects so you can control other electronic appliances.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将创建自己的物联网 web 服务器，可以用它来通过手机远程控制灯。你将构建的简单 web 服务器之后可以添加到其他项目中，从而控制其他电子设备。
- en: '![image](../images/f0196-01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0196-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需零件**'
- en: Raspberry Pi
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派
- en: Relay module HL-52S
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 继电器模块 HL-52S
- en: 12 V lamp and holder
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 12 V 灯及其支架
- en: 12 V power adapter
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 12 V 电源适配器
- en: Male DC bar rel power jack
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 公头 DC 条形电源插座
- en: Plastic box enclosure
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 塑料盒外壳
- en: Jumper wires
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线
- en: '**SOFTWARE REQUIRED**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需软件**'
- en: Flask framework
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 框架
- en: In this project you’re going to create your own web server to control your electronics
    through a browser. You’ll control a 12 V lamp using a dynamic web page with buttons.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将创建一个自己的 web 服务器，通过浏览器控制电子设备。你将使用动态网页和按钮来控制一个 12 V 灯。
- en: '**INTRODUCING WEB SERVERS**'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍 web 服务器**'
- en: A web server is a computer that provides web pages. It stores the website’s
    files, including all HTML documents and related assets like images, CSS style
    sheets, fonts, and video. It also brings those files to the user’s device web
    browser when the user makes a request to the server’s URL.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: web 服务器是一台提供网页的计算机。它存储网站的文件，包括所有的 HTML 文档及相关资源如图片、CSS 样式表、字体和视频。当用户请求服务器的 URL
    时，它也将这些文件传送到用户设备的网页浏览器中。
- en: When you access a web page in your browser, you’re actually sending a request
    via *Hypertext Transfer Protocol (HTTP)* to a server. This is simply a process
    for requesting and returning information on the internet. The server sends back
    the web page you requested—also through HTTP.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在浏览器中访问一个网页时，实际上是在通过*超文本传输协议（HTTP）*向服务器发送请求。这仅仅是一个请求和返回互联网上信息的过程。服务器会通过 HTTP
    将你请求的网页返回给你。
- en: In this project you’ll use your Raspberry Pi to host a web server on the local
    network, as illustrated in [Figure 16-1](ch16.xhtml#ch16fig1).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用树莓派在本地网络上托管 web 服务器，如[图 16-1](ch16.xhtml#ch16fig1)所示。
- en: '![image](../images/f0197-01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0197-01.jpg)'
- en: '**FIGURE 16-1:** Your Raspberry Pi running a web server'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 16-1：** 运行 web 服务器的树莓派'
- en: As a server, your Raspberry Pi can provide some output through its GPIO pins.
    In other words, using a browser on your local network, you can access the Pi web
    server to remotely control the GPIOs and turn something on.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 作为服务器，树莓派可以通过其 GPIO 引脚提供一些输出。换句话说，通过你本地网络上的浏览器，你可以访问树莓派的 web 服务器，远程控制 GPIO 引脚并打开某些设备。
- en: Web servers can serve *static* or *dynamic* content. The content of a static
    website doesn’t change unless you edit its HTML file. The website built in [Project
    15](ch15.xhtml#ch15) is an example of a static website. With a dynamic website,
    the content changes based on user interactions. In this project, you’ll create
    a dynamic website that controls and shows the current state of a 12 V lamp connected
    to a relay, which we’ll look at more closely in a second.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: web 服务器可以提供*静态*或*动态*内容。静态网站的内容除非你编辑 HTML 文件，否则不会改变。[项目 15](ch15.xhtml#ch15)中构建的网站就是一个静态网站的例子。动态网站则根据用户的交互来改变内容。在这个项目中，你将创建一个动态网站，来控制并显示连接到继电器的
    12 V 灯的当前状态，稍后我们会更详细地讨论。
- en: '**NOTE**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Only devices that are connected to the same router as your Pi can access a
    web page hosted in your Pi through a browser. Accessing your web server from*
    outside *your network is more difficult. You can make your Raspberry Pi web server
    accessible from any computer anywhere by using a technique called* router port
    forwarding, *but that subject is beyond the book’s scope.*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*只有与树莓派连接到同一个路由器的设备，才能通过浏览器访问托管在树莓派上的网页。从*外部*访问你的 web 服务器更加困难。你可以通过使用一种叫做*路由器端口转发*的技术，让任何地方的计算机都能访问你的树莓派
    web 服务器，但这个主题超出了本书的范围。*'
- en: '**INTRODUCING THE RELAY MODULE**'
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍继电器模块**'
- en: A *relay* is an electrically operated switch that can be turned on or off, letting
    the current go through or not, and can be controlled with low voltages, like the
    3.3 V provided by the Raspberry Pi. The relay module you’ll use in this project
    has two relays—the two blue cubes shown in [Figure 16-2](ch16.xhtml#ch16fig2).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*继电器*是一种电控开关，可以开关，允许电流通过或不通过，并且可以用低电压（例如树莓派提供的 3.3 V）来控制。你将在这个项目中使用的继电器模块有两个继电器——即[图
    16-2](ch16.xhtml#ch16fig2)中显示的两个蓝色方块。'
- en: '![image](../images/f0198-01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0198-01.jpg)'
- en: '**FIGURE 16-2:** Relay module with two channels'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**图16-2：** 带有两个通道的继电器模块'
- en: The six pins on the left side of the relay module connect high voltage, and
    the pins on the right side connect the component that requires low voltage—the
    Raspberry Pi GPIOs.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 继电器模块左侧的六个引脚连接高电压，右侧的引脚连接需要低电压的组件——树莓派的GPIO引脚。
- en: '**Relay Pinout**'
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**继电器引脚图**'
- en: 'The high-voltage side has two connectors, each with three sockets: *common
    (COM)*, *normally closed (NC)*, and *normally open (NO)*. The normally closed
    configuration is used when you want the relay to be closed by default, meaning
    the current is flowing unless you send a signal from the Pi to the relay module
    to open the circuit and stop the current. The normally open configuration works
    the other way around: the relay is always open, so the circuit is broken unless
    you send a signal from the Pi to close it.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 高电压侧有两个连接器，每个连接器有三个插座：*公共端（COM）*、*常闭端（NC）*和*常开端（NO）*。当你希望继电器默认闭合时，使用常闭配置，意味着电流在默认情况下流动，除非你从树莓派发送信号到继电器模块，打开电路并停止电流。常开配置则相反：继电器默认处于断开状态，电路断开，除非你从树莓派发送信号使其闭合。
- en: The low-voltage side has a set of four pins and a set of three pins. The first
    set consists of VCC and GND to power up the module, and input 1 (IN1) and input
    2 (IN2) to control the bottom and top relays, respectively. The second set of
    pins consists of GND, VCC, and JD-VCC pins. The JD-VCC pin powers the electromagnet
    of the relay. Notice that the module has a jumper cap connecting the VCC and JD-VCC
    pins; the one shown here is blue, but yours may be a different color.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 低电压侧有一组四个引脚和一组三个引脚。第一组由VCC和GND组成，用于为模块供电，输入1（IN1）和输入2（IN2）分别控制底部和顶部的继电器。第二组引脚由GND、VCC和JD-VCC引脚组成。JD-VCC引脚为继电器的电磁铁供电。注意，模块上有一个跳线帽将VCC和JD-VCC引脚连接在一起；这里显示的是蓝色的，但你的可能是不同的颜色。
- en: The jumper cap allows you to choose whether the circuit is physically connected
    to the Pi circuit or not, and you can choose to have it on or not. With the jumper
    cap on, the VCC and JD-VCC pins are connected. That means the relay electromagnet
    is directly powered from the Pi’s power pin, so the relay module and the Raspberry
    Pi circuits are not physically isolated from each other. This is the configuration
    we’ll use. Without the jumper cap, you need to provide an independent power source
    to power up the relay’s electromagnet through the JD-VCC pin. That configuration
    physically isolates the relays from the Raspberry Pi with the module’s built-in
    optocoupler, which prevents damage to the Pi in case of electrical spikes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线帽允许你选择电路是否与树莓派电路物理连接，你可以选择是否启用它。启用跳线帽时，VCC和JD-VCC引脚连接在一起。这意味着继电器电磁铁直接由树莓派的电源引脚供电，因此继电器模块和树莓派电路之间没有物理隔离。这是我们将使用的配置。如果没有跳线帽，你需要提供独立的电源通过JD-VCC引脚为继电器的电磁铁供电。该配置通过模块内置的光耦合器将继电器与树莓派物理隔离，在发生电气波动时，可以防止对树莓派造成损害。
- en: '**THE OPTOCOUPLER**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**光耦合器**'
- en: We won’t go into too much detail about the optocoupler. It is basically a component
    that allows you to send signals between two isolated circuits so that you can
    control high voltages with low voltages without actually having a physical connection
    between those two circuits. The optocoupler makes the “connection” between the
    circuits using an LED that emits light and a phototransistor that receives the
    light and then activates or deactivates the relay.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入讨论光耦合器。它基本上是一个允许你在两个隔离电路之间发送信号的组件，从而可以使用低电压控制高电压，而这两个电路之间并没有实际的物理连接。光耦合器通过一个发光二极管（LED）发光和一个光电晶体管接收光信号，从而激活或停用继电器，完成电路“连接”。
- en: '**Relay Usage**'
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**继电器使用**'
- en: You’ll use a normally open configuration for this project. You want to light
    the lamp only when you choose to, so the circuit should be broken until you say
    otherwise. For this, you use the COM and NO sockets.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目将使用常开配置。你只希望在选择时点亮灯泡，因此电路应保持断开，直到你另行指示。为此，你将使用COM和NO插座。
- en: In a normally open configuration, there is no contact between the COM and NO
    sockets unless you trigger the relay. The relay is triggered when the input goes
    below about 2 V. That means if you send a LOW signal from the Pi, the relay turns
    on, and if you send a HIGH signal, the relay turns off; this is called *inverted
    logic*. You’ll control just one relay, so you’ll connect IN1 to one of the Pi’s
    GPIO pins.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在常开配置中，COM和NO插座之间没有接触，除非触发继电器。继电器在输入电压降到约2V时被触发。这意味着如果你从树莓派发送一个低电平信号，继电器会启动；如果发送高电平信号，继电器会关闭；这被称为*反向逻辑*。你将只控制一个继电器，因此你需要将IN1连接到树莓派的一个GPIO引脚。
- en: '**WARNING**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*If you’re not comfortable dealing with higher voltages like 12 V, but you
    want to do the project, you can replace the relay module with an LED. You’ll also
    need to make some minor changes to the Python script, since the relay works with
    inverted logic and the LED doesn’t.*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你不习惯处理像12V这样的高电压，但又想做这个项目，你可以将继电器模块替换为LED。你还需要对Python脚本做一些小的修改，因为继电器使用反向逻辑，而LED则不使用。*'
- en: The hardware for the project involves connecting an AC 12 V power adapter that
    can provide 1 A to a relay module to control a 12 V lamp. We’ll use a DC barrel
    power jack to make the connections between the adapter and the relay easier. The
    barrel jack connects perfectly to the power adapter terminal, as shown in [Figure
    16-3](ch16.xhtml#ch16fig3).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目的硬件涉及将一个能够提供1A的AC 12V电源适配器连接到继电器模块，以控制12V灯具。我们将使用直流插头电源来简化适配器与继电器之间的连接。直流插头与电源适配器端子完美连接，如[图16-3](ch16.xhtml#ch16fig3)所示。
- en: '![image](../images/f0199-01.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0199-01.jpg)'
- en: '**FIGURE 16-3:** Power adapter terminal and DC barrel power jack'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**图16-3：** 电源适配器端子与直流插头电源'
- en: '**PROJECT OVERVIEW**'
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**项目概览**'
- en: Before getting into building this project, let’s go through a quick overview
    so you better understand each step (see [Figure 16-4](ch16.xhtml#ch16fig4)). You
    should also know the basics of HTML and CSS, so we recommend that you complete
    [Project 15](ch15.xhtml#ch15) if you haven’t already before moving on.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始搭建该项目之前，让我们先浏览一下项目概览，以便更好地理解每个步骤（见[图16-4](ch16.xhtml#ch16fig4)）。你还应该了解HTML和CSS的基础知识，如果你还没有完成[项目15](ch15.xhtml#ch15)，我们建议先完成它再继续进行。
- en: '![image](../images/f0200-01.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0200-01.jpg)'
- en: '**FIGURE 16-4:** Project overview'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**图16-4：** 项目概览'
- en: You’ll create your web server with Flask, a Python web framework, by creating
    a file called *app.py*. When you access the Raspberry Pi IP address, port 80,
    your web browser requests the web page files stored in your Raspberry Pi—*index.html*
    and *style.css*—and then displays the web page. Your web page will have ON and
    OFF buttons that trigger an event that turns the lamp on and off, respectively.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用Flask，一个Python网页框架，通过创建名为*app.py*的文件来搭建你的Web服务器。当你访问树莓派的IP地址，端口80时，浏览器会请求存储在树莓派中的网页文件——*index.html*和*style.css*——并显示网页。你的网页上将有“开”和“关”按钮，分别触发打开和关闭灯的事件。
- en: '**WIRING THE CIRCUIT**'
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**电路接线**'
- en: For safety reasons, you’ll want to place your relay inside a plastic box enclosure.
    You may need to drill some holes in the plastic box for the wires—one hole for
    the Pi wires, another for the lamp wires, and one for the power adapter. [Figure
    16-5](ch16.xhtml#ch16fig5) shows how the enclosure looks without the lid. The
    Raspberry Pi wires will go through a hole on the lid.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安全起见，你应该将继电器放入一个塑料盒内。你可能需要在塑料盒上钻一些孔，用来放置电线——一个孔用于树莓派的电线，另一个用于灯具的电线，还有一个孔用于电源适配器。[图16-5](ch16.xhtml#ch16fig5)展示了没有盖子的盒子外观。树莓派的电线将通过盖子上的一个孔。
- en: '![image](../images/f0200-02.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0200-02.jpg)'
- en: '**FIGURE 16-5:** Circuit with the relay in a plastic box enclosure'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**图16-5：** 继电器放置在塑料盒中的电路'
- en: '**NOTE**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Make sure you have the jumper cap on the JD-VCC and VCC pins.*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*确保在JD-VCC和VCC引脚上安装跳线帽。*'
- en: 'With your Pi powered *off*, follow these instructions to build the circuit:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在树莓派电源*关闭*的情况下，按照以下说明搭建电路：
- en: Connect one of the lamp holder terminals to the negative (–) terminal on the
    DC barrel power jack.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将灯座的一个端子连接到直流插头电源的负极（–）端子。
- en: Connect the DC barrel power jack positive (+) terminal to the relay COM socket.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将直流插头电源的正极（+）端子连接到继电器的COM插座。
- en: Connect the other lamp terminal to the relay NO socket. You need a screwdriver
    to connect the relay sockets tightly.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将另一个灯端子连接到继电器的NO插座。你需要使用螺丝刀将继电器的插座紧密连接。
- en: Follow the table to wire the Raspberry Pi to the relay, and make sure your completed
    setup matches [Figure 16-6](ch16.xhtml#ch16fig6).
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据表格连接树莓派与继电器，确保你的连接与[图 16-6](ch16.xhtml#ch16fig6)一致。
- en: '| **RELAY** | **RASPBERRY PI** |'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **继电器** | **树莓派** |'
- en: '| --- | --- |'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| VCC | 5 V |'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| VCC | 5 V |'
- en: '| IN2 | Don’t connect |'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| IN2 | 不连接 |'
- en: '| IN1 | GPIO 17 |'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| IN1 | GPIO 17 |'
- en: '| GND | GND |'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| GND | GND |'
- en: '![image](../images/f0201-01.jpg)'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0201-01.jpg)'
- en: '**FIGURE 16-6:** Controlling a 12 V lamp with the Raspberry Pi using a relay'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 16-6：** 使用继电器控制树莓派的 12 V 灯'
- en: '**WARNING**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*Do not touch the relay or any live wires while they are connected to 12 V.
    If something isn’t working and you decide to make changes to the circuit, remove
    the 12 V power adapter plug from the socket before touching anything.*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*在继电器或任何接通 12 V 的电线连接时，切勿触碰它们。如果出现故障并决定对电路进行更改，请在触摸任何物品之前先拔掉 12 V 电源适配器插头。*'
- en: After completing the circuit and double-checking all the connections, apply
    power to the Raspberry Pi, connect a 12 V power adapter to the DC barrel power
    jack, and apply power by plugging the 12 V power adapter into a wall socket.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成电路并仔细检查所有连接后，为树莓派供电，将 12 V 电源适配器连接到直流电源接口，并通过插入墙面插座为适配器供电。
- en: If you want to control an LED instead, use the [Project 1](ch01.xhtml#ch01)
    schematic diagram on [page 41](ch01.xhtml#page_41) as a reference, connecting
    the LED to GPIO 17.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想控制 LED，可以使用[项目 1](ch01.xhtml#ch01)原理图，参考[第 41 页](ch01.xhtml#page_41)，将 LED
    连接到 GPIO 17。
- en: '**PREPARING YOUR PI TO RUN A WEB SERVER**'
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**准备你的 PI 来运行 Web 服务器**'
- en: The Raspberry Pi supports a number of web servers, but we’re going to use Flask,
    a Python web framework, to turn the Pi into a dynamic web server.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派支持多种 Web 服务器，但我们将使用 Flask，一个 Python Web 框架，把树莓派变成一个动态 Web 服务器。
- en: '**Installing Flask**'
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**安装 Flask**'
- en: 'To install Flask, you need to have pip, a tool to install libraries from the
    Python Package Index. Open the terminal and run the following commands to update
    your Pi and install pip:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Flask，你需要先安装 pip，这是一个从 Python 包索引安装库的工具。打开终端，运行以下命令以更新你的 Pi 并安装 pip：
- en: '[PRE0]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then use pip to install Flask and its dependencies by entering the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用 pip 安装 Flask 及其依赖项，输入以下命令：
- en: '[PRE1]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If Flask installs correctly, the terminal will display the message `successfully
    installed Flask`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Flask 安装成功，终端会显示消息 `successfully installed Flask`。
- en: '**Organizing Your Files**'
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**整理文件**'
- en: Keeping your files organized is essential in this project because Flask needs
    your files structured in a particular way to work correctly. Create a folder specifically
    for this project called *Project_16* inside the *Web_Applications* folder. Then
    create the folders and files you’ll need by following the structure shown in [Figure
    16-7](ch16.xhtml#ch16fig7).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中保持文件的组织性非常重要，因为 Flask 需要按照特定的结构来管理文件。首先在 *Web_Applications* 文件夹内创建一个专门用于这个项目的文件夹，命名为
    *Project_16*。然后根据[图 16-7](ch16.xhtml#ch16fig7)所示的结构创建需要的文件夹和文件。
- en: '![image](../images/f0202-01.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0202-01.jpg)'
- en: '**FIGURE 16-7:** Files and folders structure'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 16-7：** 文件和文件夹结构'
- en: Create the *index.html* and *style.css* files using the Text Editor and the
    *app.py* file using Python 3 (IDLE). The *static* folder will store static files
    like the CSS file. The *templates* folder will store files that can be changed;
    for example, the *index.html* file is a template that dynamically changes the
    relay status label according to user input.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用文本编辑器创建 *index.html* 和 *style.css* 文件，并使用 Python 3 (IDLE) 创建 *app.py* 文件。*static*
    文件夹将存储静态文件，如 CSS 文件。*templates* 文件夹将存储可以更改的文件；例如，*index.html* 文件是一个模板，能根据用户输入动态更改继电器状态标签。
- en: '**WRITING THE SCRIPTS**'
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写脚本**'
- en: 'You’ll need to write three scripts for this project: a Python script that will
    create your Pi web server, an HTML file that builds your web page, and a CSS file
    to style your web page.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要为这个项目编写三个脚本：一个 Python 脚本，用来创建树莓派的 web 服务器，一个 HTML 文件，用来构建网页，一个 CSS 文件，用来为网页添加样式。
- en: '**Creating the Web Server**'
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建 Web 服务器**'
- en: To create the web server, open your *app.py* file, currently empty, and enter
    the code in [Listing 16-1](ch16.xhtml#ch16list1). This code creates the web server
    on Raspberry Pi port 80 and generates a web page that you can access on the local
    network, from any web browser. You can download all the code used throughout this
    project at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建 Web 服务器，打开你的*app.py*文件（目前为空），并输入[列表 16-1](ch16.xhtml#ch16list1)中的代码。该代码在
    Raspberry Pi 80 端口创建 Web 服务器，并生成一个你可以通过任何 Web 浏览器在本地网络上访问的网页。你可以在此处下载整个项目中使用的所有代码：*[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*
- en: '**LISTING 16-1:** Creating a web server with Flask'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 16-1：** 使用 Flask 创建一个 Web 服务器'
- en: '[PRE2]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: First you import the needed libraries ➊, and then you create a Flask object
    called `app` ➋. You initialize the relay on GPIO 17 ➌ and set the relay as *off*
    by default. The relay works with inverted logic, so you use `relay.on()` to turn
    it off.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你导入所需的库 ➊，然后创建一个名为`app`的 Flask 对象 ➋。你在 GPIO 17 上初始化继电器 ➌，并将继电器默认设置为*关闭*。继电器采用反向逻辑，因此你使用`relay.on()`将其关闭。
- en: The `@app.route('/')` decorator ➍ runs the `main()` function when someone accesses
    the root URL—the main Pi IP address of the server. In Python, a *decorator* starts
    with the `@` symbol and goes above a function definition. A decorator is basically
    a function that takes in another function, but you don’t need to worry about this
    for the moment.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`@app.route(''/'')` 装饰器 ➍ 在有人访问根 URL —— 服务器的主 Pi IP 地址时运行 `main()` 函数。在 Python
    中，*装饰器*以`@`符号开始，位于函数定义之上。装饰器本质上是一个接受另一个函数的函数，但目前你不需要担心这个。'
- en: You render the *index.html* file to the web browser and print the current relay
    state, using the `relay_state` variable value on the HTML file ➎. Then you add
    a dynamic route with `action` as a variable ➏. This runs the `control()` function
    when someone accesses the dynamic route. If the action from the URL is `on`, the
    program turns the relay on and saves the current relay state ➐. This means when
    you access your Raspberry Pi IP address followed by `/on` (for example, `http://192.168.1.112/on`),
    the relay turns on. You’ll fetch your own IP address shortly.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你将 *index.html* 文件渲染到 Web 浏览器，并使用 HTML 文件中的 `relay_state` 变量值打印当前继电器状态 ➎。然后，你添加一个动态路由，将
    `action` 作为变量 ➏。当有人访问该动态路由时，它将运行 `control()` 函数。如果 URL 中的操作是 `on`，程序将打开继电器并保存当前继电器状态
    ➐。这意味着当你访问 Raspberry Pi 的 IP 地址并跟上 `/on`（例如`http://192.168.1.112/on`）时，继电器将打开。稍后你将获取你自己的
    IP 地址。
- en: If the action from the URL is `off`, the program turns the relay off and saves
    the current relay state. The server is listening on port 80 and the debug is set
    to `True` to report any errors ➑.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 URL 的操作是`off`，程序将关闭继电器并保存当前继电器的状态。服务器正在监听80端口，并将调试模式设置为`True`以报告任何错误 ➑。
- en: '**Writing the HTML File**'
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写 HTML 文件**'
- en: '[Listing 16-2](ch16.xhtml#ch16list2) is a simple HTML document that structures
    the web page. Feel free to add more paragraphs and headings to personalize it
    using what you learned in [Project 15](ch15.xhtml#ch15). Copy this code to your
    *index.html* file, which should be located in the *templates* folder as shown
    earlier in [Figure 16-7](ch16.xhtml#ch16fig7).'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 16-2](ch16.xhtml#ch16list2)是一个简单的 HTML 文档，结构化了网页。你可以根据在[项目 15](ch15.xhtml#ch15)中学到的内容，随意添加更多段落和标题来个性化它。将此代码复制到你的*index.html*文件中，该文件应该位于*templates*文件夹中，如[图
    16-7](ch16.xhtml#ch16fig7)所示。'
- en: '**LISTING 16-2:** Writing the HTML file for your web page'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 16-2：** 为你的网页编写 HTML 文件'
- en: '[PRE3]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is a simple HTML structure, and we won’t go into too much detail in this
    HTML code, because you should already be familiar with most of it from [Project
    15](ch15.xhtml#ch15). You can always refer back to that project for a refresher.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的 HTML 结构，我们不会在此 HTML 代码中深入讨论太多，因为你应该已经在[项目 15](ch15.xhtml#ch15)中对大部分内容有所了解。你随时可以参考该项目以复习。
- en: The `<meta>` tag and the given attributes make your web page responsive in any
    mobile browser ➊. With this tag, the browser will render the width of the page
    to the width of the mobile screen. At line ➋, between double curly brackets `{{
    }}`, is `relay_state`, the variable we’re using in *app.py* to save the current
    relay state. This paragraph displays the state saved in the `relay_state` variable.
    When you click the ON button, you are redirected to `/on` root ➌, which turns
    the relay on, as seen in *app.py*. When you click the OFF button, you are redirected
    to the `/off` root ➍, which turns the relay off.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`<meta>`标签及其给定的属性使你的网页在任何移动浏览器中响应式设计➊。使用这个标签，浏览器会将页面宽度调整为移动屏幕的宽度。在➋行中，双大括号`{{
    }}`之间的是`relay_state`，这是我们在*app.py*中用来保存当前继电器状态的变量。这个段落显示的是保存在`relay_state`变量中的状态。当你点击“开”按钮时，你会被重定向到`/on`根路径➌，它会开启继电器，正如在*app.py*中所看到的。当你点击“关”按钮时，你会被重定向到`/off`根路径➍，它会关闭继电器。'
- en: '**Writing the CSS File**'
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写CSS文件**'
- en: '[Listing 16-3](ch16.xhtml#ch16list3) styles your web page. This is just an
    example of how you can style your page; you can edit the properties as you like.
    Your *style.css* file should be inside the *static* folder, as you saw earlier
    in [Figure 16-7](ch16.xhtml#ch16fig7).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单16-3](ch16.xhtml#ch16list3)为你的网页添加样式。这只是你如何为页面添加样式的一个示例；你可以根据需要编辑属性。你的*style.css*文件应位于*static*文件夹中，正如你在[图16-7](ch16.xhtml#ch16fig7)中看到的那样。'
- en: '**LISTING 16-3:** Styling the web page with CSS'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单16-3：** 使用CSS为网页添加样式'
- en: '[PRE4]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In summary, we’ve set font sizes for the heading 2 and the paragraph ➊. Then,
    we’ve aligned all our page body ➋. Finally, we’ve edited the appearance of the
    ON and OFF buttons ➌.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，我们为标题2和段落➊设置了字体大小。然后，我们对页面主体进行了对齐➋。最后，我们编辑了开启和关闭按钮的外观➌。
- en: '**Launching Your Web Server**'
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**启动你的网页服务器**'
- en: 'With the Python script, HTML file, and CSS file completed, it’s time to run
    your web server. Open the terminal window and navigate to the *Project_16* folder
    by entering this command:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了Python脚本、HTML文件和CSS文件后，接下来是运行你的网页服务器。打开终端窗口，进入*Project_16*文件夹，输入以下命令：
- en: '[PRE5]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, run *app.py* with the following line:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下命令运行*app.py*：
- en: '[PRE6]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Your web server is now running. Open any browser on the local network and enter
    your Raspberry Pi IP address.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你的网页服务器现在正在运行。打开任何在本地网络上的浏览器，输入你的树莓派IP地址。
- en: 'To find your Pi’s IP address, go to the terminal and enter the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到树莓派的IP地址，请打开终端并输入以下命令：
- en: '[PRE7]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This prints the Pi’s IP address.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印树莓派的IP地址。
- en: With your circuit ready and your server running, open a browser and navigate
    to your Raspberry Pi IP address. Your browser will display the web server page.
    Now click the buttons to remotely control the lamp! [Figure 16-8](ch16.xhtml#ch16fig8)
    shows the web page in a smartphone’s browser.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好电路并启动服务器后，打开浏览器并导航到树莓派的IP地址。浏览器将显示网页服务器页面。现在点击按钮来远程控制灯！[图16-8](ch16.xhtml#ch16fig8)展示了在智能手机浏览器中的网页。
- en: '![image](../images/f0207-01.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0207-01.jpg)'
- en: '**FIGURE 16-8:** Raspberry Pi web server page on a smartphone’s browser'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**图16-8：** 在智能手机浏览器中查看树莓派网页服务器页面'
- en: To stop the web server, simply press CTRL-C.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止网页服务器，只需按下CTRL-C。
- en: '**TAKING IT FURTHER**'
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步扩展**'
- en: 'In this project, you learned how to use a relay and how to set up a web server
    to serve a web page, as well as put your HTML and CSS skills into practice. Here
    are some ideas for taking these concepts further:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你学习了如何使用继电器以及如何设置网页服务器来提供网页，还将HTML和CSS技能付诸实践。以下是将这些概念进一步拓展的一些想法：
- en: Edit this project to control more than one output.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑这个项目，以控制多个输出。
- en: Edit the CSS and HTML files to suit your own tastes.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑CSS和HTML文件，以适应你自己的喜好。
- en: Control other electronic appliances.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制其他电子设备。
- en: Edit previous projects to control lamps connected to relays instead of LEDs.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑以前的项目，以控制连接到继电器的灯，而不是LED。
