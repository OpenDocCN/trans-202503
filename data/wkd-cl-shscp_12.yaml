- en: '**11**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**11**'
- en: '**OS X SCRIPTS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**OS X脚本**'
- en: '![image](../images/common4.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common4.jpg)'
- en: One of the most important changes in the world of Unix and Unix-like operating
    systems was the release of the completely rewritten OS X system, built atop a
    reliable Unix core called Darwin. Darwin is an open source Unix based on BSD Unix.
    If you know your Unix at all, the first time you open the Terminal application
    in OS X, you’ll doubtless swoon with delight. Everything you’d want, from development
    tools to standard Unix utilities, is included in the latest generation of Mac
    computers, with a gorgeous GUI quite capable of hiding all that power for people
    who aren’t ready for it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Unix及类Unix操作系统世界中的一个重要变化是完全重写的OS X系统的发布，这个系统建立在一个可靠的Unix内核上，名为Darwin。Darwin是一个基于BSD
    Unix的开源Unix系统。如果你了解Unix，当你第一次在OS X中打开Terminal应用程序时，你无疑会欣喜若狂。最新一代的Mac电脑包括了你需要的一切，从开发工具到标准的Unix工具，配备了一个美丽的图形界面，非常适合那些还未准备好使用这些强大功能的用户。
- en: There are significant differences between OS X and Linux/Unix, however, so it’s
    good to learn some OS X tweaks that can help you in your day-to-day interaction.
    For example, OS X has an interesting command line application called `open`, which
    allows you to launch graphical applications from the command line. But `open`
    isn’t very flexible. If you want to open, say, Microsoft Excel, entering `open
    excel` won’t work because `open` is picky and expects you to enter `open -a "Microsoft
    Excel"`. Later in this chapter, we’ll write a wrapper script to work around this
    picky behavior.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，OS X和Linux/Unix之间存在显著的差异，因此学习一些可以帮助你日常操作的OS X技巧是很有用的。例如，OS X有一个有趣的命令行应用程序叫做`open`，它允许你从命令行启动图形应用程序。但`open`并不十分灵活。如果你想打开微软Excel，输入`open
    excel`是行不通的，因为`open`比较挑剔，它期待你输入`open -a "Microsoft Excel"`。在本章后面，我们将编写一个包装脚本来绕过这个挑剔的行为。
- en: '**FIXING OS X LINE ENDINGS**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**修复OS X行尾问题**'
- en: Here’s another occasional situation that’s made easier with a small tweak. If
    you work on the command line with files created for the GUI side of the Mac, you’ll
    find that the end-of-line character in these files isn’t the same as the character
    you need when working on the command line. In technical parlance, OS X systems
    have end-of-line carriage returns (using `\r` notation), while the Unix side wants
    line feeds (an `\n`). So instead of output in which each line is displayed one
    after the other, a Mac file will show up in the Terminal without the proper line
    breaks.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有另一种偶尔会遇到的情况，通过小小的调整可以变得更简单。如果你在命令行中处理为Mac的图形界面创建的文件，你会发现这些文件中的行尾字符与命令行需要的字符不一样。从技术术语来说，OS
    X系统使用回车符（`\r`表示法）作为行尾，而Unix系统则使用换行符（`\n`）。所以，Mac文件在终端中显示时不会有适当的换行。
- en: Have a file that’s suffering from this problem? Here’s what you’d see if you
    tried to use `cat` to output the file contents.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个文件正遭遇这个问题吗？如果你尝试使用`cat`命令输出文件内容，你会看到下面的结果。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Yet you know that the file is not empty. To see that there’s content, use the
    `-v` flag to `cat`, which makes all otherwise hidden control characters visible.
    Now you see something like this:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但你知道这个文件并不是空的。要查看其中有内容，使用`cat`命令的`-v`标志，它会使所有隐藏的控制字符可见。现在你会看到如下内容：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Clearly there’s something wrong! Fortunately, it’s easy to use `tr` to replace
    the carriage returns with the proper newlines.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 显然出了点问题！幸运的是，使用`tr`命令将回车符替换为正确的换行符非常简单。
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once this is applied to the sample file, things make more sense.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将这个应用到示例文件，事情就变得更加明了。
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you open a Unix file in a Mac application like Microsoft Word and it looks
    all wonky, you can also switch end-of-line characters in the other direction—toward
    an Aqua application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在像Microsoft Word这样的Mac应用程序中打开一个Unix文件，并且它看起来非常混乱，你也可以将行尾字符转换到另一个方向——转向Aqua应用程序。
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Well, that’s just one of the little differences you’ll see in OS X. We’ll have
    to deal with these quirks, but we’ll also be able to take advantage of OS X’s
    nicer features.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这只是你在OS X中会看到的一些小差异之一。我们必须处理这些小怪癖，但也可以利用OS X的一些更好特性。
- en: Let’s jump in, shall we?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧，好吗？
- en: '**#79 Automating screencapture**'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#79 自动化屏幕截图**'
- en: If you’ve used a Mac for any length of time, you’ve learned that it has a builtin
    screen capture capability that you access by pressing ![image](../images/common2.jpg)-SHIFT-3\.
    You can also use the OS X utilities `Preview` or `Grab`, located in the Applications
    and Utilities folders, respectively, and there are excellent third-party choices
    too.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用Mac电脑已经有一段时间了，你应该知道它内置了屏幕截图功能，通过按下![image](../images/common2.jpg)-SHIFT-3就能激活。你还可以使用OS
    X中的实用工具`Preview`或`Grab`，它们分别位于“应用程序”和“实用工具”文件夹中，也有很多出色的第三方工具可以选择。
- en: 'But did you know that there’s a command line alternative? The super useful
    program `screencapture` can take shots of the current screen and save them to
    the Clipboard or to a specific named file (in JPEG or TIFF format). Enter the
    command with an undefined argument and you’ll see the basics of its operation,
    as shown here:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 但是你知道吗，其实有一个命令行的替代方案？这个超级有用的程序` screencapture `可以截取当前屏幕的截图，并将其保存到剪贴板或者指定的文件中（JPEG或TIFF格式）。输入没有定义参数的命令，你将看到它的基本操作，如下所示：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This is an application begging for a wrapper script. For example, to take a
    shot of the screen 30 seconds in the future, you could use this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常需要包装脚本的应用程序。例如，要在30秒后截取屏幕截图，你可以使用以下命令：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: But let’s make something more interesting, shall we?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，让我们做些更有趣的事情，好吗？
- en: '***The Code***'
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: '[Listing 11-1](ch11.xhtml#ch11ex1) shows how we can automate the `screencapture`
    utility so it captures screenshots a bit more stealthily.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 11-1](ch11.xhtml#ch11ex1) 显示了我们如何自动化` screencapture `工具，以便它能更加隐秘地截取屏幕截图。'
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 11-1: The* `*screencapture2*` *wrapper script*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 11-1：`*screencapture2*`包装脚本*'
- en: '***How It Works***'
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***工作原理***'
- en: 'This will take a screenshot every `$freq` seconds ➊ for up to `$maxshots` captures
    (with a default of every 60 seconds for 30 captures). The output is a series of
    JPEG files sequentially numbered starting at 0\. This could be very useful for
    training purposes or perhaps if you’re suspicious that someone has been using
    your computer while you’re at lunch: set this up, and you can review what occurred
    without anyone being the wiser.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在每个`$freq`秒 ➊ 截取一张截图，直到达到`$maxshots`次截图（默认为每60秒截取一次，总共30次）。输出是一系列的JPEG文件，按顺序编号，从0开始。这对训练目的非常有用，或者如果你怀疑有人在你午休时使用了你的电脑：设置这个，然后你可以在没有人察觉的情况下回顾发生的事情。
- en: 'The last section of the script is interesting: it optionally produces an animated
    GIF one-third the size of the original by using the ImageMagick `convert` tool
    ➋. This is a handy way of reviewing the images all at once. We’ll use ImageMagick
    a lot more in [Chapter 14](ch14.xhtml#ch14)! You may not have this command by
    default on your OS X system, but by using a package manager like `brew`, you can
    install it with a single command (`brew install imagemagick`).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的最后部分很有趣：它可选择通过使用ImageMagick的`convert`工具 ➋ 生成一个原始图像大小的三分之一的动画GIF。这是一个非常方便的方式，可以一次性查看所有图像。在[第14章](ch14.xhtml#ch14)中，我们会更多地使用ImageMagick！你可能在OS
    X系统上没有默认安装这个命令，但是通过使用像`brew`这样的包管理工具，你可以通过一个命令安装它（`brew install imagemagick`）。
- en: '***Running the Script***'
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: 'Because this code is designed to run stealthily in the background, the basic
    invocation is easy:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这段代码是设计用来在后台隐秘运行的，所以基本的调用方式很简单：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'That’s all there is to it. Easy. As an example, to specify how many shots to
    take (30) and when to take them (every 5 seconds), you could start the `screencapture2`
    script like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这么简单。作为示例，要指定截取多少次截图（30次）以及何时截取（每5秒一次），你可以像这样启动`screencapture2`脚本：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '***The Results***'
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结果***'
- en: Running the script results in zero output, but new files do show up, as shown
    in [Listing 11-2](ch11.xhtml#ch11ex2). (If you specify the `-a` animate flag,
    you’ll get an additional result.)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本不会有任何输出，但会出现新文件，如[列表 11-2](ch11.xhtml#ch11ex2)所示。（如果你指定了`-a`动画标志，你将会看到额外的结果。）
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 11-2: The images of a screen that was captured over a period of time
    by* `*screencapture2*`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 11-2：通过`*screencapture2*`捕捉的屏幕图像，记录了一个时间段内的截图*'
- en: '***Hacking the Script***'
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***破解脚本***'
- en: For a long-term screen-monitoring tool, you’ll want to find some means of checking
    when the screen actually changes so you’re not wasting hard drive space with uninteresting
    screenshots. There are third-party solutions that should allow `screencapture`
    to run for much longer periods, saving the history of when the screen actually
    changes rather than dozens—or hundreds—of copies of the same unchanged screen.
    (Note that if you have a clock display on your screen, every single screen capture
    will be slightly different, making it much harder to avoid this problem!)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个长期的屏幕监视工具，你需要找到一种方法来检查屏幕何时真正发生变化，这样就不会用无趣的屏幕截图浪费硬盘空间。有一些第三方解决方案可以让`screencapture`运行更长时间，保存屏幕实际变化的历史，而不是保存成百上千份相同的、未改变的屏幕截图。（请注意，如果你的屏幕上有时钟显示，每一张屏幕截图都会稍微不同，这会让你更难避免这个问题！）
- en: With this capability, you could have “monitor ON” and “monitor OFF” as a wrapper
    that starts the capture sequence and analyzes whether any of the images differ
    from the first capture. But if you were using this script’s GIFs to create an
    online training tutorial, you might use finer-grained controls to set the length
    of capture, using that period of time as a command line argument.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 借助这个功能，你可以将“monitor ON”和“monitor OFF”作为一个包装器，启动捕捉序列并分析图像是否与第一次捕捉的不同。但是，如果你使用这个脚本的GIF来制作在线培训教程，你可能会使用更精细的控制来设置捕捉的时长，并将这一时长作为命令行参数。
- en: '**#80 Setting the Terminal Title Dynamically**'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#80 动态设置终端标题**'
- en: '[Listing 11-3](ch11.xhtml#ch11ex3) is a fun little script for OS X users who
    like to work in the Terminal application. Instead of having to use the **Terminal**
    ![image](../images/common3.jpg) **Preferences** ![image](../images/common3.jpg)
    **Profiles** ![image](../images/common3.jpg) **Window** dialog to set or change
    the window title, you can use this script to change it whenever you like. In this
    example, we’ll make the Terminal window’s title just a bit more useful by including
    the present working directory in it.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[列出 11-3](ch11.xhtml#ch11ex3)是一个有趣的小脚本，适用于喜欢在终端应用程序中工作的 OS X 用户。你不再需要使用**终端**
    ![image](../images/common3.jpg) **偏好设置** ![image](../images/common3.jpg) **配置文件**
    ![image](../images/common3.jpg) **窗口**对话框来设置或更改窗口标题，而是可以使用此脚本随时更改它。在这个例子中，我们将通过将当前工作目录包含在内，让终端窗口的标题变得更加实用。'
- en: '***The Code***'
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 11-3: The* `*titleterm*` *script*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*列出 11-3：* `*titleterm*` *脚本*'
- en: '***How It Works***'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***它是如何工作的***'
- en: The Terminal application has a variety of secret escape codes that it understands,
    and the `titleterm` script sends a sequence of `ESC ] 0; title BEL` ➊, which changes
    the title to the specified value.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 终端应用程序有多种它能识别的秘密转义码，而`titleterm`脚本会发送一串`ESC ] 0; title BEL` ➊，这会将标题更改为指定的值。
- en: '***Running the Script***'
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: To change the title of the Terminal window, simply enter the new title you desire
    as the argument to `titleterm`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改终端窗口的标题，只需将你想要的标题作为参数输入`titleterm`即可。
- en: '***The Results***'
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结果***'
- en: There’s no apparent output from the command, as [Listing 11-4](ch11.xhtml#ch11ex4)
    shows.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 命令没有明显的输出，正如[列出 11-4](ch11.xhtml#ch11ex4)所示。
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 11-4: Running the* `*titleterm*` *script to set the terminal title
    to that of the current directory*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*列出 11-4：运行* `*titleterm*` *脚本，将终端标题设置为当前目录的标题*'
- en: However, it instantly changes the title of the Terminal window to the present
    working directory.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它会立即将终端窗口的标题更改为当前工作目录。
- en: '***Hacking the Script***'
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***破解脚本***'
- en: 'With one small addition to your login script (*.bash_profile* or something
    else, depending on what login shell you have), you can automatically have the
    Terminal window title always show the current working directory. To make this
    code show your current working directory, for example, you can use this at `tcsh`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在登录脚本（* .bash_profile * 或根据你使用的登录 shell 选择其他文件）中添加一个小的修改，就可以让终端窗口的标题自动显示当前的工作目录。例如，要使这段代码显示你当前的工作目录，你可以在`tcsh`中使用以下代码：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Or this at `bash`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在`bash`中使用这个：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Just drop one of the commands above into your login script, and starting the
    next time you open up a Terminal window, you’ll find that your window title changes
    each time you move into a new directory. Darn helpful.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 只需将上述命令之一放入登录脚本中，从下次打开终端窗口开始，你会发现每次进入新目录时，窗口标题都会发生变化。真是非常有用。
- en: '**#81 Producing Summary Listings of iTunes Libraries**'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#81 生成 iTunes 库的汇总列表**'
- en: If you’ve used iTunes for any length of time, you’re sure to have a massive
    list of music, audiobooks, movies, and TV shows. Unfortunately, for all its wonderful
    capabilities, iTunes doesn’t have an easy way to export a list of your music in
    a succinct and easy-to-read format. Fortunately, it’s not hard to write a script
    that offers this functionality, as [Listing 11-5](ch11.xhtml#ch11ex5) shows. This
    script does rely on the “Share iTunes XML with other applications” feature of
    iTunes being enabled, so before running this script, ensure that it’s enabled
    in the iTunes preferences.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 iTunes 已有一段时间，肯定会有一个庞大的音乐、有声书、电影和电视节目列表。不幸的是，尽管 iTunes 功能强大，但并没有一个简单的方法以简洁易读的格式导出你的音乐列表。幸运的是，编写一个提供此功能的脚本并不困难，[列表
    11-5](ch11.xhtml#ch11ex5) 就展示了这个脚本。这个脚本依赖于 iTunes 的“与其他应用程序共享 iTunes XML”功能，因此在运行此脚本之前，确保在
    iTunes 偏好设置中启用了此功能。
- en: '***The Code***'
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*Listing 11-5: The* `*ituneslist*` *script*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 11-5：* `*ituneslist*` *脚本*'
- en: '***How It Works***'
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***工作原理***'
- en: Like many modern computer applications, iTunes expects its music library to
    be in a standard location—in this case *~/Music/iTunes/iTunes Media/*— but allows
    you to move it elsewhere if you want. The script needs to be able to ascertain
    the different location, and that’s done by extracting the `Music Folder` field
    value from the iTunes preferences file. That’s what the pipe at ➊ accomplishes.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 像许多现代计算机应用程序一样，iTunes 希望其音乐库位于一个标准位置——在这个例子中是 *~/Music/iTunes/iTunes Media/*——但也允许你将其移到其他位置。脚本需要能够确定不同的位置，这可以通过从
    iTunes 偏好设置文件中提取 `Music Folder` 字段值来完成。这正是 ➊ 处管道命令的作用。
- en: 'The preferences file (`$ituneconfig`) is an XML data file, so some chopping
    is necessary to identify the exact `Music Folder` field value. Here’s what the
    `iTunes Media` value in Dave’s iTunes config file looks like:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 偏好设置文件（`$ituneconfig`）是一个 XML 数据文件，因此需要一些切割操作来确定准确的 `Music Folder` 字段值。以下是 Dave
    的 iTunes 配置文件中 `iTunes Media` 值的样子：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `iTunes Media` value is actually stored as a fully qualified URL, interestingly
    enough, so we need to chop off the *file://localhost/* prefix. This is the job
    of the first `cut` command. Finally, because many directories in OS X include
    spaces, and because the `Music Folder` field is saved as a URL, all spaces in
    that field are mapped to `%20` sequences and have to be restored to spaces by
    the `sed` invocation before proceeding.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`iTunes Media` 值实际上是以完全限定的 URL 存储的，颇为有趣，因此我们需要去掉 *file://localhost/* 前缀。这是第一个
    `cut` 命令的工作。最后，由于许多 OS X 目录中包含空格，且 `Music Folder` 字段以 URL 格式保存，该字段中的所有空格都被映射为
    `%20` 序列，必须通过 `sed` 命令将其还原为空格，然后才能继续操作。'
- en: With the `Music Folder` name determined, it’s now easy to generate music lists
    on two Mac systems and then use the `diff` command to compare them, making it
    a breeze to see which albums are unique to one or the other system and perhaps
    to sync them up.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 确定了 `Music Folder` 名称后，现在可以很容易地在两台 Mac 系统上生成音乐列表，然后使用 `diff` 命令进行比较，这使得查看哪些专辑是某一系统独有的变得轻松，或许可以进行同步。
- en: '***Running the Script***'
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: There are no command arguments or flags to this script.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本没有命令参数或标志。
- en: '***The Results***'
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结果***'
- en: If you have a large music collection, the output from the script can be large.
    [Listing 11-6](ch11.xhtml#ch11ex6) shows the first 15 lines of the output from
    Dave’s music collection.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个庞大的音乐收藏，脚本的输出可能会非常大。[列表 11-6](ch11.xhtml#ch11ex6) 显示了 Dave 音乐收藏输出的前 15
    行。
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '*Listing 11-6: Running the* `*ituneslist*` *script to print the top items in
    an iTunes collection*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 11-6：运行* `*ituneslist*` *脚本以打印 iTunes 收藏中的顶级项目*'
- en: '***Hacking the Script***'
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***修改脚本***'
- en: All right, this isn’t about hacking the script per se, but because the iTunes
    library directory is saved as a fully qualified URL, it would be interesting to
    experiment with having a web-accessible iTunes directory and then using the URL
    of that directory as the `Music Folder` value in the XML file. . . .
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这不完全是关于修改脚本本身的，但由于 iTunes 库目录是作为完全限定的 URL 存储的，尝试将 iTunes 目录设为可以通过 Web 访问的目录，并将该目录的
    URL 作为 XML 文件中的 `Music Folder` 值，应该会很有趣......
- en: '**#82 Fixing the open Command**'
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#82 修复 open 命令**'
- en: One neat innovation with OS X is the addition of the `open` command, which allows
    you to easily launch the appropriate application for just about any type of file,
    whether it’s a graphics image, a PDF document, or an Excel spreadsheet. The problem
    with `open` is that it’s a bit quirky. If you want it to launch a named application,
    you have to include the `-a` flag. And if you don’t specify the exact application
    name, it will complain and fail. This is a perfect job for a wrapper script like
    the one in [Listing 11-7](ch11.xhtml#ch11ex7).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: OS X 的一项有趣创新是增加了 `open` 命令，它可以让你轻松启动几乎任何类型文件的相应应用程序，无论是图形图像、PDF 文档还是 Excel 表格。`open`
    命令的问题在于它有些古怪。如果你想让它启动一个指定的应用程序，你必须包含 `-a` 标志。如果你没有指定准确的应用程序名称，它会报错并失败。这正是像 [清单
    11-7](ch11.xhtml#ch11ex7) 中的封装脚本可以解决的问题。
- en: '***The Code***'
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '*Listing 11-7: The* `*open2*` *script*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 11-7：* `*open2*` *脚本*'
- en: '***How It Works***'
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***工作原理***'
- en: This script revolves around the zero and nonzero return codes, with the `open`
    program having a zero return code upon success and a nonzero return code upon
    failure ➊.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本围绕零返回码和非零返回码展开，其中 `open` 程序在成功时返回零代码，在失败时返回非零代码 ➊。
- en: If the supplied argument is not a filename, the first conditional fails, and
    the script tests whether the supplied argument is a valid application name by
    adding `a`. If the second conditional fails, the script uses a `case` statement
    ➋ to test for common nicknames that people use to refer to popular applications.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供的参数不是文件名，第一个条件判断会失败，脚本会通过添加 `a` 来测试提供的参数是否是有效的应用程序名称。如果第二个条件判断失败，脚本会使用 `case`
    语句 ➋ 来检查人们常用来指代流行应用程序的常见昵称。
- en: It even offers a friendly message when it matches a nickname, just before launching
    the named application.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 它甚至会在匹配到昵称时提供友好的提示信息，然后再启动指定的应用程序。
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '***Running the Script***'
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: The `open2` script expects one or more filenames or application names to be
    specified on the command line.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`open2` 脚本要求在命令行中指定一个或多个文件名或应用程序名称。'
- en: '***The Results***'
  id: totrans-96
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结果***'
- en: Without this wrapper, an attempt to open the application Microsoft Word fails.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有这个封装程序，尝试打开 Microsoft Word 应用程序会失败。
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Rather a scary error message, though it occurred only because the user did
    not supply the `-a` flag. The same invocation with the `open2` script shows that
    it is no longer necessary to remember the `-a` flag:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管出现了一条相当吓人的错误信息，但那仅仅是因为用户没有提供 `-a` 标志。使用 `open2` 脚本相同的调用则表明，不再需要记住 `-a` 标志：
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'No output is good: the application launched and ready to use. In addition,
    the series of nicknames for common OS X applications means that while `open -a
    word` definitely won’t work, `open2 word` works just fine.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 没有输出是好事：应用程序已启动并准备就绪。此外，常见 OS X 应用程序的昵称系列意味着，虽然 `open -a word` 绝对无法使用，但 `open2
    word` 则能正常工作。
- en: '***Hacking the Script***'
  id: totrans-102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***修改脚本***'
- en: This script could be considerably more useful if the nickname list were tailored
    to your specific needs or the needs of your user community. That should be easily
    accomplished!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果昵称列表根据你的具体需求或用户社区的需求进行了定制，这个脚本会变得更加有用。那应该很容易做到！
