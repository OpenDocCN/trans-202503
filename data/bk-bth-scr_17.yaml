- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 16 CODE BLOCKS
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16 代码块
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: 'A *code block* can sometimes be a rather generic term, referring to some amorphous
    section of a program or a few lines of code. In Batch, it’s a well-defined entity:
    one or more commands in between a set of open and close parentheses. A prominent
    example is the code often executed when an if command is true.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*代码块* 有时是一个相当通用的术语，指的是程序中的某个模糊部分或几行代码。在Batch中，它是一个明确定义的实体：一组在一对圆括号之间的命令。一个显著的例子是当if命令为真时经常执行的代码。'
- en: That seems simple enough, but it’s far more difficult to use a code block properly
    and wisely than it is to define it. A very powerful feature of Batch is that delayed
    expansion allows you to resolve variables in two distinct ways inside a code block,
    but the uninitiated often misinterpret that functionality as a bug. In this chapter,
    I’ll detail all the intricacies involved, and you’ll also learn how code blocks,
    specifically naked code blocks, provide an interesting technique for allowing
    a variable to survive code of limited scope. If that doesn’t yet sound impressive,
    I’m confident that it will soon.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来很简单，但实际上，正确且明智地使用代码块远比定义它要困难得多。Batch的一个非常强大的功能是延迟扩展，它允许你在代码块内部以两种不同的方式解析变量，但初学者往往将这种功能误解为一个bug。在本章中，我将详细介绍所有涉及的复杂问题，另外你还会学到如何使用代码块，特别是裸代码块，提供一种有趣的技术，使变量能够在有限范围的代码中生存。如果这听起来还不够令人印象深刻，我相信很快你会觉得它非常有用。
- en: Resolving Variables in a Code Block
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在代码块中解析变量
- en: I discussed in detail the process of setting and resolving a variable in [Chapter
    2](chapter2.xhtml), but those rules change inside of a code block. As I’ll soon
    demonstrate, this is a great feature of Batch, but it’s often misunderstood and
    can result in a perplexed and cranky coder. Even after many years of Batch coding,
    it’s still easy to stumble into this particular issue from time to time. While
    I usually find and fix the issue relatively quickly (after letting out an audible
    “D’oh!”), it can lead to hours of frustration for more novice coders. This batveat
    is best described with an example.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我在[第二章](chapter2.xhtml)中详细讨论了设置和解析变量的过程，但这些规则在代码块内部会有所不同。正如我很快将展示的那样，这是Batch的一个伟大功能，但它经常被误解，并可能导致程序员感到困惑和烦躁。即使是在多年的Batch编码经验之后，偶尔我也会碰到这个问题。虽然我通常能够相对迅速地找到并修复这个问题（在发出一声“哎呀！”后），但对于初学者来说，这可能会导致数小时的沮丧。这种警告最好通过一个示例来说明。
- en: On many occasions, co-workers have presented me with an apparently simple code
    snippet such as the one in [Listing 16-1](#Lis16-1).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，同事们向我展示了一些看似简单的代码片段，比如[列表16-1](#Lis16-1)中的代码。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 16-1: A variable set and resolved in a code block ... and a mystery'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 列表16-1：在代码块中设置并解析的变量...以及一个谜团
- en: 'The code block is accompanied by an exasperated query:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块旁边跟着一条令人沮丧的提问：
- en: A variable has an initial setting, but I’m resetting it to something else and
    it doesn’t seem to “take.” I’m setting the price of a 50-inch TV to $450, and
    I know that the bSale boolean is true because the echo to the console happens,
    but the variable’s not being reset to $350\. The echo command writes out $450\.
    It’s as if the first command inside the code block doesn’t execute while the second
    one does. Crazy, huh? To test this theory, I moved only the echo command from
    inside the if command code block to just after it. Suddenly, I get the sale price
    to display like I wanted, but that’s not a solution because I want to execute
    the command only if there’s a sale. I even tried not setting the variable prior
    to the if command, but then it resolved to nothing at all. Ugh! This makes no
    sense. What’s going on?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一个变量有一个初始值，但我将其重设为另一个值，然而它似乎并没有“生效”。我将一台50英寸电视的价格设置为450美元，且我知道bSale布尔值为真，因为控制台确实输出了信息，但是变量的值并没有被重设为350美元。回显命令输出了450美元。这就像是代码块中的第一条命令没有执行，而第二条却执行了。疯狂吧？为了验证这个理论，我将回显命令从if命令代码块内部移动到其后面。突然，我得到了我想要的销售价格显示，但这并不是解决方法，因为我只想在有促销的情况下执行命令。我甚至尝试在if命令之前不设置变量，但结果它什么都没有。唉！这太不合逻辑了。到底发生了什么？
- en: 'The quick and much too brief reply is, “Replace the percent signs with exclamation
    marks.” The only change needed to [Listing 16-1](#Lis16-1) is the resolution of
    price at the end of the echo command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 简短且过于简略的回答是：“将百分号替换为感叹号。”对[列表16-1](#Lis16-1)所需的唯一更改就是在回显命令的末尾解析价格：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The result is what the confounded coder had expected all along:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 结果正是那位困惑的程序员一直预料的：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After the coder incredulously tries and sees the exclamation marks work, they
    typically return more peeved than relieved and with the combination of another
    query and a new complaint: “Sometimes you use percent signs to resolve a variable,
    and at other times, you use exclamation marks. What kind of a programmatical sadist
    would dream this up? Isn’t Batch esoteric enough? When I set a variable, I expect
    it to be set. Period. What possible use could this have?” The only variations
    in this diatribe are in its intensity and level of vulgarity. These comments are
    from a very subdued and pious co-worker. Before addressing the question of this
    feature’s use, I owe you a far better explanation of what’s going on with the
    price variable.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序员难以置信地尝试并看到感叹号生效时，他们通常会感到更加恼火而非宽慰，并带着另一个问题和新的抱怨返回：“有时候你用百分号来解析一个变量，而有时又用感叹号。什么样的编程
    sadist 会想到这个？难道 Batch 还不够深奥吗？当我设置一个变量时，我希望它被设置好。就这样。它有什么用？”这种抨击的唯一变化就是其强度和粗俗程度。这些评论来自一位非常温和且虔诚的同事。在回答这个功能用途的问题之前，我得先给你更好的解释，说明价格变量发生了什么。
- en: The coexistence of two values of a variable is another application of delayed
    expansion, first introduced in [Chapter 3](chapter3.xhtml), which allows for the
    resolution of variables at either parse time or execution time. When a variable
    is set inside a code block, you can think of it as having two values at one time.
    One is the current value to which it was set in the code block, resolved at execution
    time. The other is the value assigned to it as it entered the code block, resolved
    at parse time.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个变量同时拥有两个值是延迟展开的另一个应用，延迟展开首次在[第 3 章](chapter3.xhtml)中介绍，它允许在解析时或执行时解析变量。当一个变量在代码块内被设置时，你可以认为它此时拥有两个值。一个是它在代码块中设置时的当前值，在执行时解析。另一个是它进入代码块时被赋予的值，在解析时解析。
- en: If a variable simultaneously has two distinct values, we need two different
    means of resolving the variable. To that end, *percent signs are the delimiter
    for revealing its value as it entered the code block*, and *exclamation marks
    are the delimiter for retrieving its current value inside of the code block*.
    The code can reset a variable multiple times in the code block, and percent sign
    delimiters will still resolve it to its state before entering the code block.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个变量同时有两个不同的值，我们就需要两种不同的方式来解析这个变量。为此，*百分号是用于揭示其进入代码块时的值的分隔符*，而*感叹号是用于获取其在代码块内当前值的分隔符*。代码可以多次重设一个变量，而百分号分隔符仍然会将它解析为进入代码块之前的状态。
- en: The upshot is that at the time of the echo command in [Listing 16-1](#Lis16-1),
    %price% resolves to $450, and !price! resolves to $350.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，在[列表 16-1](#Lis16-1)中的 echo 命令时，%price% 被解析为 $450，而 !price! 被解析为 $350。
- en: Despite my co-worker’s protestation, this isn’t sadistic at all; it actually
    represents a fascinating feature that’s lacking in most programming languages.
    The ability for a single variable to hold two values may be hard to grasp, but
    once understood, it offers many possibilities. To demonstrate, I’ll alter the
    message written to the console in [Listing 16-1](#Lis16-1). Instead of just giving
    the sale price, it would be easier to see the savings by showing both the original
    and sale prices. I’m using the same price variable for both values in [Listing
    16-2](#Lis16-2)—once resolved with percent signs and once with exclamation marks.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我的同事表示抗议，这根本不是什么虐待狂行为；它实际上代表了一个在大多数编程语言中缺乏的有趣特性。一个变量能够持有两个值可能很难理解，但一旦理解，它会带来许多可能性。为了演示，我将修改在[列表
    16-1](#Lis16-1)中写入控制台的消息。与其仅仅给出销售价格，展示原价和销售价格，显示节省的金额会更容易理解。我在[列表 16-2](#Lis16-2)中为这两个值使用了相同的价格变量——一次使用百分号解析，一次使用感叹号解析。
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 16-2: A variable resolved to two distinct values'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-2：一个变量解析为两个不同的值
- en: 'This makes a great deal of sense intrinsically because both values are in fact
    a *price*; one is the original price, and the other is the sale price. You could
    have used two different variables, perhaps origPrice and salePrice, but coders
    with a discerning eye might describe [Listing 16-2](#Lis16-2) as elegant, the
    greatest of all possible praises of its author, especially after seeing the output:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这一点从本质上来说是有意义的，因为这两个值实际上都是一个*价格*；一个是原始价格，另一个是销售价格。你本可以使用两个不同的变量，也许是 origPrice
    和 salePrice，但具有敏锐眼光的程序员可能会称[列表 16-2](#Lis16-2)为优雅，这是对作者的最高赞誉，尤其是在看到输出结果之后：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This feature allows the imaginative coder many possibilities. You might have
    a counter or a variable tallying up numbers, both updated inside of a loop. (In
    the next few chapters, I’ll finally get to the for command and looping.) While
    inside that loop, you might want access to the original counter or tally value
    for comparison. A data condition in some iterations of the loop might alert you
    to the fact that the loop shouldn’t have been processed. Without this feature,
    you’ll need to execute the loop once for validation and another time for the core
    logic. With delayed expansion, you’ll need only one loop, and at any point you
    can restore all variables to their original values and abandon the loop.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特性为富有想象力的编码者提供了许多可能性。你可能有一个计数器或一个变量在循环内部累计数字（在接下来的几章中，我将最终介绍 for 命令和循环）。在该循环内部，你可能需要访问原始的计数器或累计值以进行比较。循环的某些迭代中的数据条件可能会提醒你该循环本不该被处理。如果没有这个特性，你需要先执行一次循环进行验证，再执行一次处理核心逻辑。而有了延迟扩展，你只需一个循环，在任何时刻，你可以将所有变量恢复到原始值并退出循环。
- en: This does beg the question as to what happens in nested code blocks. Are there
    three active values for a variable defined inside an if command code block nested
    inside another if command code block? No. There are exactly two values; one is
    its value before entering the outermost code block, and the other is its current
    value inside the code blocks, regardless of the level of nesting.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这就引出了一个问题：嵌套代码块中会发生什么？在一个 if 命令的代码块内嵌套另一个 if 命令代码块时，是否会有三个活动的变量值？不会。只有两个值；一个是进入最外层代码块之前的值，另一个是代码块内部的当前值，无论嵌套层次如何。
- en: 'F. Scott Fitzgerald famously wrote, “The test of a first-rate intelligence
    is the ability to hold two opposing ideas in mind at the same time and still retain
    the ability to function.” I’ve insulted the interpreter’s intelligence in past
    chapters, but Batch’s ability to function in this duality does suggest that I
    may have been too harsh. Maybe the interpreter can handle advanced topics, even
    theoretical physics. The SchrodingersCat variable can simultaneously hold two
    values: alive and dead.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: F. Scott Fitzgerald 曾著名写道：“一流的智慧的考验是能够同时持有两个相反的观点，并且仍然保持功能。”在之前的章节中，我曾侮辱过解释器的智力，但
    Batch 在这种二元性中的功能能力确实表明我可能过于苛刻了。也许解释器能处理更高级的话题，甚至是理论物理学。SchrodingersCat 变量可以同时保存两个值：生与死。
- en: The Naked Code Block
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 裸代码块
- en: In the prior examples, I dealt only with variables inside the code block of
    an if command, but everything previously discussed in this chapter applies to
    any code block. Remember that a code block is really just one or more commands
    inside a set of parentheses.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的例子中，我仅处理了 if 命令代码块中的变量，但本章之前讨论的内容适用于任何代码块。请记住，代码块实际上只是一个或多个命令放在一对圆括号内。
- en: Another example of a code block is the code that comes after the else keyword
    of an if command. I’ve already hinted that the for command uses code blocks, and
    those code blocks can become very complex with nesting and with multiple variables
    being assigned and reassigned often. That’s why this chapter is the final prerequisite
    to the upcoming discussion on the most significant Batch command. But code blocks
    don’t have to be associated with a command at all.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个代码块的例子是 if 命令的 else 关键字后面的代码。我之前已经提到过，for 命令使用代码块，这些代码块可能会非常复杂，包含嵌套和频繁赋值与重新赋值的多个变量。这就是为什么这一章是接下来的讨论最重要
    Batch 命令的最后先决条件。但是代码块不一定非得与命令关联。
- en: A *naked code block* is created as its own entity and not associated with a
    command such as the if or for. For instance, we can rewrite the if command from
    [Listing 16-2](#Lis16-2) without the if and the conditional clause. The naked
    code block in [Listing 16-3](#Lis16-3) looks a bit odd at first, but notice that
    everything is identical except that I have removed the text if %bSale%.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 *裸代码块* 是作为其自身的实体创建的，而不是与 if 或 for 等命令相关联。例如，我们可以在没有 if 和条件子句的情况下重写 [列表16-2](#Lis16-2)
    中的 if 命令。[列表16-3](#Lis16-3) 中的裸代码块刚开始看起来有些奇怪，但请注意，除了删除了文本 if %bSale% 外，其他一切都与之前相同。
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 16-3: A naked code block where price has two values'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 列表16-3：一个裸代码块，其中价格有两个值
- en: This code is still setting the price variable to the original price before entering
    the code block, where we reset the variable to the sale price.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码仍然在进入代码块之前将价格变量设置为原始价格，而在代码块内，我们将该变量重置为销售价格。
- en: 'In the output we see the same text including both prices, with the only difference
    being that the code always writes the following to the console, because what was
    conditional logic now executes unconditionally:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，我们看到相同的文本，包括两个价格，唯一的区别是代码总是将以下内容写入控制台，因为原本是条件逻辑的部分现在无条件执行：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To truly demonstrate the power of these parentheses, simply remove them and
    examine the effect. That’s exactly what I’ve done here, and I didn’t even realign
    the indenting, although doing so would have absolutely no effect on the result.
    Compare this to [Listing 16-3](#Lis16-3):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要真正展示这些括号的威力，只需移除它们并检查效果。这正是我在这里所做的，而且我甚至没有重新对齐缩进，尽管这么做对结果没有任何影响。将其与 [清单 16-3](#Lis16-3)
    进行对比：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In practice, this code makes no sense. The fact that we’re setting the variable
    on one line and resetting it on the very next completely obviates the first set
    command, which might as well be commented out or deleted. The price variable now
    has a single value, and percent signs and exclamation marks both resolve the variable
    to its sole value of $350, resulting in the nonsensical output:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这段代码没有意义。我们在一行中设置变量，并在接下来的紧接一行中重置它，这完全废除了第一个 set 命令，那个命令不如注释掉或删除。现在，price
    变量只有一个值，百分号符号和感叹号都将变量解析为其唯一值 $350，导致输出不合逻辑：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The set of parentheses had a marked effect on the code listing. They created
    a naked code block, allowing the variable to have two values, each accessible
    with different delimiters. Without the parentheses, the code is junk.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这组括号对代码清单产生了显著影响。它们创建了一个裸代码块，使得变量可以具有两个值，每个值可以通过不同的分隔符访问。没有括号时，代码就是废话。
- en: When using a naked code block, it’s good form to always line up the open and
    close parentheses in the same column on unadulterated lines with the code in the
    code block indented as if it followed an if command. You could rewrite [Listing
    16-3](#Lis16-3) with the second set command on the same line as the open parenthesis
    and the close parenthesis trailing the echo command, but doing so would make the
    code very difficult to read. (I don’t even want to show it.) If you’re coding
    a naked code block, there’s probably a good reason for it, and if you hide its
    existence, an elegant solution suddenly turns cryptic.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用裸代码块时，保持打开和关闭括号在同一列，并确保代码块中的代码按需缩进，就像它跟随一个 if 命令一样，这是一种良好的编码风格。你可以将 [清单 16-3](#Lis16-3)
    中的第二个 set 命令与打开括号放在同一行，并将关闭括号放在 echo 命令后面，但这样做会让代码变得非常难以阅读。（我甚至不想展示它。）如果你在编写裸代码块时，可能有充分的理由这么做，如果你隐藏了它的存在，那么一个优雅的解决方案突然就变得难以理解。
- en: 'One good reason for using a naked code block is to swap the values of two variables
    without an intermediate variable. This code turns fact into fiction and fiction
    into fact better than any politician:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用裸代码块的一个很好的理由是交换两个变量的值，而不需要中介变量。这个代码将 fact 转换为 fiction，将 fiction 转换为 fact，做得比任何政治家都好：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The first set command is simply resetting the fact variable, but the second
    set command isn’t using this updated value when it resets fiction. Instead, the
    percent signs resolve fact to its value before entering the naked code block.
    The interpreter reads and parses both set commands—and resolves both variables—before
    setting either variable. If you were to remove the parentheses, both variables
    would take on the value initially defined as fiction, completely defeating the
    value swap.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 set 命令只是重置了 fact 变量，但第二个 set 命令在重置 fiction 时并没有使用这个更新后的值。相反，百分号符号在进入裸代码块之前将
    fact 解析为其值。解释器在设置任何变量之前会读取并解析这两个 set 命令——并解析两个变量。如果你删除了括号，两个变量都会采用最初定义为 fiction
    的值，从而完全失败了值交换。
- en: Surviving an endlocal Command
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生存于一个 endlocal 命令
- en: 'Any code block, but specifically the naked code block, has another very useful
    purpose: allowing a variable to survive an endlocal command. In [Chapter 3](chapter3.xhtml),
    you learned that all variables between a setlocal command and an endlocal command
    will revert to their prior state once the endlocal executes. This wonderful Batch
    feature ensures that a called routine doesn’t step on variables that might be
    used by the caller, but it raises a very pertinent question. How can that called
    routine return a result if nothing can survive its endlocal command?'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 任何代码块，尤其是裸代码块，还有一个非常有用的功能：让变量在 `endlocal` 命令之后依然生存。在[第3章](chapter3.xhtml)中，你学到了所有在
    `setlocal` 命令和 `endlocal` 命令之间的变量都会在 `endlocal` 执行后恢复到它们的先前状态。这个很棒的批处理功能确保被调用的例程不会覆盖可能由调用者使用的变量，但它也提出了一个非常关键的问题。如果
    `endlocal` 命令后什么都不能存活，那被调用的例程如何返回结果呢？
- en: The “Problem” with the endlocal Command
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`endlocal` 命令的“问题”'
- en: To demonstrate the problem, the routine shown in [Listing 16-4](#Lis16-4) accepts
    a monetary amount as dollars and cents as its first parameter and attempts to
    pass back that amount with a 6 percent sales tax added as its second parameter.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这个问题，[清单16-4](#Lis16-4) 中的例程接受一个以美元和美分表示的货币金额作为第一个参数，并尝试将加上 6% 销售税后的金额作为第二个参数返回。
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Listing 16-4: Some good math wasted'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 清单16-4：浪费的好数学
- en: For now, don’t get bogged down in the math. (See the “An Arithmetic Digression
    for My Fellow Math Geeks” box for those details.) Pertinent to this discussion,
    the :AddTax routine starts with a setlocal command, followed by six set commands.
    The last set command ❶ assigns the result of the arithmetic to the second parameter,
    but the endlocal command ❷ immediately wipes it out. Nothing’s returned. I’m trying
    to protect or hide changes to the first five variables from being seen by the
    code outside of the routine, but I also want to let this last variable through.
    As of yet, I’m unsuccessful.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，不要被数学问题困住。（有关详细信息，请参阅“给我数学极客朋友的算术插曲”框。）与此讨论相关的是，`:AddTax` 例程以 `setlocal`
    命令开始，随后是六个 `set` 命令。最后一个 `set` 命令 ❶ 将算术结果分配给第二个参数，但 `endlocal` 命令 ❷ 紧接着就清除了它。没有任何返回。我试图保护或隐藏对前五个变量的更改，使其不被例程外的代码看到，但我也希望让这个最后一个变量通过。到目前为止，我没有成功。
- en: 'After some contemplation, it might make sense to reverse the commands before
    the goto :eof:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 经过一番深思熟虑，倒退命令可能在 `goto :eof` 之前有意义。
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: But alas, that doesn’t work either. Now, the wTaxDec variable doesn’t survive
    the endlocal, so this logic most likely sets the return parameter to nothing at
    all (or whatever value wTaxDec was set to prior to the routine). It’s a different
    manifestation of the same issue; nothing set between the setlocal and the endlocal
    survives.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 可惜，这个方法也不行。现在，`wTaxDec` 变量在 `endlocal` 后消失了，所以这个逻辑很可能将返回参数设置为“无”（或者 `wTaxDec`
    在例程之前设置的值）。这是同一问题的不同表现；在 `setlocal` 和 `endlocal` 之间设置的内容都不会保存。
- en: The Naked Code Block Solution
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 裸代码块解决方案
- en: 'The simple addition of two parentheses (and some indentation for readability)
    creates a code block starting with an endlocal command—and solves the problem.
    Compare this to [Listing 16-4](#Lis16-4):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 只需简单地添加两个括号（并加上一些缩进以提高可读性），就可以创建一个以 `endlocal` 命令开始的代码块——并解决问题。与[清单16-4](#Lis16-4)相比：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The open parenthesis starts the code block. The endlocal command wipes out the
    *current* state of the five variables, returning them to their pre-setlocal states.
    Now it gets interesting. Exclamation marks resolve a variable to its current state
    inside the code block, but percent signs resolve a variable to its state at the
    beginning of the code block before the endlocal executed. Hence, !wTaxDec! resolves
    to nothing (or junk), but %wTaxDec% resolves to the value to which it was assigned
    just before the code block, and that’s the value I’m assigning to the second parameter
    just before getting out of the routine.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 左括号开始了代码块。`endlocal` 命令清除了五个变量的*当前*状态，将它们恢复到 `setlocal` 之前的状态。现在，事情变得有趣了。感叹号会将变量解析为代码块内部的当前状态，而百分号会将变量解析为代码块开始前的状态，即
    `endlocal` 执行之前的值。因此，`!wTaxDec!` 解析为无（或垃圾），但 `%wTaxDec%` 解析为代码块前赋值的那个值，而那正是我在离开例程之前分配给第二个参数的值。
- en: The upshot is that there’s a narrow window inside the naked code block—between
    the endlocal and the close parenthesis—where we can resolve these five variables
    with percent signs. I’ve capitalized on this window by using percent signs to
    resolve the only one that I want, assigning its value to the return parameter.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 关键点是，在裸代码块内有一个狭窄的窗口——从 endlocal 到右括号之间——我们可以通过百分号解析这五个变量。我利用这个窗口，通过百分号解析出我需要的唯一一个变量，并将其值赋给返回参数。
- en: 'Now we just need to call the routine to see it work:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要调用例程来查看它的效果：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following output shows the 6 percent sales tax successfully added to the
    original amount:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出展示了成功将 6% 的销售税添加到原始金额中：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This example sets a parameter being returned by a routine, but a routine isn’t
    a requirement of this technique. At any point in a bat file, you can hide variables
    by invoking a setlocal command. In the following example, two variables, survive
    and persist, survive the endlocal in the code block, but extinct does not:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子设置了一个由例程返回的参数，但例程并不是这种技术的必需部分。在批处理文件的任何位置，你都可以通过调用 setlocal 命令来隐藏变量。在以下示例中，两个变量
    survive 和 persist 在代码块中的 endlocal 之后依然存在，但 extinct 变量则不会：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This code block is similar to the prior example, but there are two pertinent
    differences. First, it’s preserving multiple variables. Second, the set commands
    look redundant—each variable is being set to its own resolved value. The current
    value of each variable is null after the endlocal, but the last two set commands
    are restoring the variable’s own values from just before the code block.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码块类似于之前的示例，但有两个相关的不同之处。首先，它保留了多个变量。其次，set 命令看起来是多余的——每个变量都被设置为其自身的解析值。每个变量的当前值在
    endlocal 后是空的，但最后两个 set 命令将变量在代码块之前的值恢复过来。
- en: This technique is simple yet unintuitive. An endlocal command starts a naked
    code block, followed by one or more set commands assigning variables, often to
    themselves. The world outside of the naked code block can now use the shared variables,
    but not any unshared variables. If you want to do this assignment conditionally,
    simply place an if command with the conditional clause of your choosing around
    the set command inside the naked code block.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个技巧简单却不直观。endlocal 命令开始了一个裸代码块，接着是一条或多条 set 命令赋值变量，通常是赋值给它们自己。裸代码块外部的世界现在可以使用共享的变量，但不能使用任何未共享的变量。如果你希望有条件地进行赋值，只需在裸代码块中的
    set 命令周围加上 if 命令和你选择的条件子句。
- en: 'I must admit that there’s an alternative solution for this task not involving
    the naked code block. Part of me regrets even sharing it, but I will because you
    might just run across it someday. You can also make these two variables survive
    an endlocal by replacing the prior naked code block with these three commands
    on this one very ugly line of code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须承认，对于这个任务，还有一种不涉及裸代码块的替代方案。我的一部分心情有些后悔分享它，但我还是会分享，因为你可能某天会遇到它。你也可以通过将之前的裸代码块替换为这行非常丑陋的三条命令，使这两个变量在
    endlocal 之后仍然生效：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Adding a space or two after each command separator (&) might make this a bit
    more readable, but not nearly enough. Use the naked code block.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个命令分隔符（&）后添加一个或两个空格可能会使其更具可读性，但远远不够。请使用裸代码块。
- en: Summary
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned exactly how variables are resolved in code blocks.
    The next time you hear someone say, “Use exclamation marks inside and percent
    signs outside of a code block,” I hope that you’ll have the knowledge to add a
    little more depth to the conversation. Now that you’ve learned the nuances concerning
    delayed expansion and variable resolution in a code block, you won’t just manage
    to make something work; you’ll be able to use both values contained in a variable
    where appropriate. I also introduced the naked code block and demonstrated its
    crucial role in allowing variables to survive an endlocal command.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何在代码块中解析变量。下次当你听到有人说，“在代码块内使用感叹号，外部使用百分号”时，我希望你能有足够的知识为这场对话增添一些深度。现在你已经学会了延迟扩展和变量解析在代码块中的细微差别，你不仅能让某些东西工作，还能在适当的地方使用变量中的两个值。我还介绍了裸代码块，并展示了它在允许变量在
    endlocal 命令后依然存在方面的重要作用。
- en: Next up is the long-awaited for command. We now have everything in place to
    explore this greatly important Batch command in [Part II](part2.xhtml).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是久违的命令。现在我们已经准备好深入探讨这个非常重要的批处理命令，在[第二部分](part2.xhtml)中。
