- en: '**8**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**8**'
- en: '**READING AND WRITING FILES**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**读取和写入文件**'
- en: '![image](../images/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common-01.jpg)'
- en: 'Now I’ll cover one more fundamental aspect of working with R: loading and saving
    data in an active workspace by reading and writing files. Typically, to work with
    a large data set, you’ll need to read in the data from an external file, whether
    it’s stored as plain text, in a spreadsheet file, or on a website. R provides
    command line functions you can use to import these data sets, usually as a data
    frame object. You can also export data frames from R by writing a new file on
    your computer, plus you can save any plots you create as image files. In this
    chapter, I’ll go over some useful command-based read and write operations for
    importing and exporting data.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我将介绍使用 R 的另一个基本方面：通过读取和写入文件在活动工作区加载和保存数据。通常，要处理一个大数据集，你需要从外部文件读取数据，无论它是存储为纯文本、电子表格文件，还是托管在网站上。R
    提供了命令行函数，可以用来导入这些数据集，通常是作为数据框对象。你还可以通过在计算机上写入新文件的方式，从 R 导出数据框，此外，你还可以将创建的任何图表保存为图像文件。在本章中，我将介绍一些有用的基于命令的读写操作，用于导入和导出数据。
- en: '**8.1 R-Ready Data Sets**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**8.1 R 准备好的数据集**'
- en: First, let’s take a brief look at some of the data sets that are built into
    the software or are part of user-contributed packages. These data sets are useful
    samples to practice with and to experiment with functionality.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们简要看看一些内置于软件中的数据集或属于用户贡献包的数据集。这些数据集是用来练习和实验功能的有用示例。
- en: Enter `data()` at the prompt to bring up a window listing these ready-to-use
    data sets along with a one-line description. These data sets are organized in
    alphabetical order by name and grouped by package (the exact list that appears
    will depend on what contributed packages have been installed from CRAN; see [Section
    A.2](app01.xhtml#app01lev1sec97)).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在提示符下输入`data()`，会弹出一个窗口，列出这些准备好的数据集，并提供简短的描述。这些数据集按名称的字母顺序组织，并按包分组（显示的确切列表将取决于从
    CRAN 安装的贡献包；请参阅[第 A.2 节](app01.xhtml#app01lev1sec97)）。
- en: '***8.1.1 Built-in Data Sets***'
  id: totrans-7
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***8.1.1 内置数据集***'
- en: 'There are a number of data sets contained within the built-in, automatically
    loaded package `datasets`. To see a summary of the data sets contained in the
    package, you can use the `library` function as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的、自动加载的包`datasets`中包含了多个数据集。要查看该包中包含的数据集摘要，你可以使用`library`函数，如下所示：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: R-ready data sets have a corresponding help file where you can find important
    details about the data and how it’s organized. For example, one of the built-in
    data sets is named `ChickWeight`. If you enter `?ChickWeight` at the prompt, you’ll
    see the window in [Figure 8-1](ch08.xhtml#ch8fig1).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: R 准备好的数据集有一个对应的帮助文件，你可以在其中找到关于数据及其组织方式的重要细节。例如，内置的数据集之一叫做`ChickWeight`。如果你在提示符下输入`?ChickWeight`，你会看到[图
    8-1](ch08.xhtml#ch8fig1)中的窗口。
- en: '![image](../images/f08-01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f08-01.jpg)'
- en: '*Figure 8-1: The help file for the* `ChickWeight` *data set*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-1：`ChickWeight`数据集的帮助文件*'
- en: As you can see, this file explains the variables and their values; it notes
    that the data are stored in a data frame with 578 rows and 4 columns. Since the
    objects in `datasets` are built in, all you have to do to access `ChickWeight`
    is enter its name at the prompt. Let’s look at the first 15 records.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这个文件解释了变量及其值，并指出数据存储在一个具有 578 行和 4 列的数据框中。由于`datasets`中的对象是内置的，你只需要在提示符下输入`ChickWeight`的名称就可以访问它。让我们来看一下前
    15 条记录。
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can treat this data set like any other data frame you’ve created in R—note
    the use of `[1:15,]` to access the desired rows from such an object, as detailed
    in [Section 5.2.1](ch05.xhtml#ch05lev2sec52).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像处理 R 中创建的任何其他数据框一样处理这个数据集——注意使用`[1:15,]`来访问这个对象中所需的行，具体细节请参考[第 5.2.1 节](ch05.xhtml#ch05lev2sec52)。
- en: '***8.1.2 Contributed Data Sets***'
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***8.1.2 贡献的数据集***'
- en: 'There are many more R-ready data sets that come as part of contributed packages.
    To access them, first install and load the relevant package. Consider the data
    set `ice.river`, which is in the contributed package `tseries` by Trapletti and
    Hornik ([2013](ref.xhtml#ref67)). First, you have to install the package, which
    you can do by running the line `install.packages("tseries")` at the prompt. Then,
    to access the components of the package, load it using `library`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多作为贡献包的一部分提供的 R 准备好的数据集。要访问它们，首先安装并加载相关的包。考虑一下数据集`ice.river`，它位于 Trapletti
    和 Hornik（[2013](ref.xhtml#ref67)）的贡献包`tseries`中。首先，你需要安装该包，可以通过在提示符下运行`install.packages("tseries")`来实现。然后，使用`library`加载包，以访问包的组成部分：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now you can enter `library(help="tseries")` to see the list of data sets in
    this package, and you can enter `?ice.river` to find more details about the data
    set you want to work with here. The help file describes `ice.river` as a “time
    series object” comprised of river flow, precipitation, and temperature measurements—data
    initially reported in Tong ([1990](ref.xhtml#ref66)). To access this object itself,
    you must explicitly load it using the `data` function. Then you can work with
    `ice.river` in your workspace as usual. Here are the first five records:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以输入`library(help="tseries")`来查看该包中数据集的列表，并且您可以输入`?ice.river`来查找更多关于您想要使用的数据集的详细信息。帮助文件将`ice.river`描述为一个“时间序列对象”，包含河流流量、降水量和温度的测量数据——这些数据最初由Tong（[1990](ref.xhtml#ref66)）报道。要访问该对象本身，您必须显式加载它，使用`data`函数。然后，您可以像平常一样在工作空间中操作`ice.river`。以下是前五条记录：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The availability and convenience of these R-ready data sets make it easy to
    test code, and I’ll use them in subsequent chapters for demonstrations. To analyze
    your own data, however, you’ll often have to import them from some external file.
    Let’s see how to do that.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些适用于R的数据集的可用性和便利性使得测试代码变得简单，我将在随后的章节中使用它们进行演示。然而，要分析自己的数据，您通常需要从某个外部文件导入它们。让我们来看一下如何操作。
- en: '**8.2 Reading in External Data Files**'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**8.2 读取外部数据文件**'
- en: R has a variety of functions for reading characters from stored files and making
    sense of them. You’ll look at how to read *table-format* files, which are among
    the easiest for R to read and import.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: R有多种函数可以从存储的文件中读取字符并理解它们。您将看到如何读取*表格格式*文件，它们是R最容易读取和导入的文件之一。
- en: '***8.2.1 The Table Format***'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***8.2.1 表格格式***'
- en: Table-format files are best thought of as plain-text files with three key features
    that fully define how R should read the data.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 表格格式的文件最好理解为纯文本文件，具有三个关键特征，这些特征完全定义了R如何读取数据。
- en: '**Header** If a *header* is present, it’s always the first line of the file.
    This optional feature is used to provide names for each column of data. When importing
    a file into R, you need to tell the software whether a header is present so that
    it knows whether to treat the first line as variable names or, alternatively,
    observed data values.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**标题** 如果存在*标题*，它总是文件的第一行。这个可选特性用于为每一列数据提供名称。在将文件导入R时，您需要告诉软件是否存在标题，以便它知道是否将第一行视为变量名，或者作为观察到的数据值。'
- en: '**Delimiter** The all-important *delimiter* is a character used to separate
    the entries in each line. The delimiter character cannot be used for anything
    else in the file. This tells R when a specific entry begins and ends (in other
    words, its exact position in the table).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**分隔符** 极其重要的*分隔符*是用于分隔每行条目的字符。分隔符字符在文件中不能用于其他任何用途。这告诉R一个特定的条目何时开始和结束（换句话说，它在表格中的确切位置）。'
- en: '**Missing value** This is another unique character string used exclusively
    to denote a missing value. When reading the file, R will turn these entries into
    the form it recognizes: `NA`.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**缺失值** 这是另一个独特的字符字符串，用来专门表示缺失值。在读取文件时，R会将这些条目转换为它识别的形式：`NA`。'
- en: Typically, these files have a *.txt* extension (highlighting the plain-text
    style) or *.csv* (for *comma-separated values*).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这些文件的扩展名是*.txt*（强调纯文本样式）或*.csv*（用于*逗号分隔值*）。
- en: Let’s try an example, using a variation on the data frame `mydata` as defined
    at the end of [Section 5.2.2](ch05.xhtml#ch05lev2sec53). [Figure 8-2](ch08.xhtml#ch8fig2)
    shows an appropriate table-format file called *mydatafile.txt*, which has the
    data from that data frame with a few values now marked as missing. This data file
    can be found on the book’s website at *[https://www.nostarch.com/bookofr/](https://www.nostarch.com/bookofr/)*,
    or you can create it yourself from [Figure 8-2](ch08.xhtml#ch8fig2) using a text
    editor.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一个例子，使用在[第5.2.2节](ch05.xhtml#ch05lev2sec53)末尾定义的数据框`mydata`的变体。[图8-2](ch08.xhtml#ch8fig2)展示了一个名为*mydatafile.txt*的合适的表格格式文件，其中包含该数据框的数据，并且现在标记了一些缺失值。这个数据文件可以在本书网站上找到，网址是*
    [https://www.nostarch.com/bookofr/](https://www.nostarch.com/bookofr/)*，或者您可以使用文本编辑器从[图8-2](ch08.xhtml#ch8fig2)自行创建它。
- en: '![image](../images/f08-02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f08-02.jpg)'
- en: '*Figure 8-2: A plain-text table-format file*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-2：一个纯文本表格格式文件*'
- en: 'Note that the first line is the header, the values are delimited with a single
    space, and missing values are denoted with an asterisk (`*`). Also, note that
    each new record is required to start on a new line. Suppose you’re handed this
    plain-text file for data analysis in R. The ready-to-use command `read.table`
    imports table-format files, producing a data frame object, as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，第一行是标题，值之间用单个空格分隔，缺失的值用星号（`*`）表示。同时，请注意每个新记录必须从新的一行开始。假设你被交给了一个用于数据分析的纯文本文件，在
    R 中可以使用现成的命令 `read.table` 导入表格格式的文件，生成一个数据框对象，如下所示：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In a call to `read.table`, `file` takes a character string with the filename
    and folder location (using forward slashes), `header` is a logical value telling
    R whether `file` has a header (`TRUE` in this case), `sep` takes a character string
    providing the delimiter (a single space, `" "`, in this case), and `na.strings`
    requests the characters used to denote missing values (`"*"` in this case).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用 `read.table` 时，`file` 参数接受一个包含文件名和文件夹位置的字符字符串（使用正斜杠），`header` 是一个逻辑值，告诉
    R `file` 是否有标题（此处为 `TRUE`），`sep` 接受一个字符字符串，提供分隔符（此处为单个空格 `" "`），而 `na.strings`
    用于指定缺失值所表示的字符（此处为 `"*"`）。
- en: If you’re reading in multiple files and don’t want to type the entire folder
    location each time, it’s possible to first set your working directory via `setwd`
    ([Section 1.2.3](ch01.xhtml#ch01lev2sec08)) and then simply use the filename and
    its extension as the character string supplied to the `file` argument. However,
    both approaches require you to know exactly where your file is located when you’re
    working at the R prompt. Fortunately, R possesses some useful additional tools
    should you forget your file’s precise location. You can view textual output of
    the contents of any folder by using `list.files`. The following example betrays
    the messiness of my local user directory.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要读取多个文件，并且不想每次都输入完整的文件夹位置，可以先通过 `setwd` 设置工作目录（见[第 1.2.3 节](ch01.xhtml#ch01lev2sec08)），然后只需使用文件名及其扩展名作为传递给
    `file` 参数的字符字符串。然而，这两种方法都要求你在 R 提示符下工作时确切知道文件的位置。幸运的是，R 还有一些有用的附加工具，可以帮助你记住文件的具体位置。如果你忘记了文件的准确位置，可以通过
    `list.files` 查看任何文件夹的文本输出。以下示例展示了我的本地用户目录的混乱状态。
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: One important feature to note here, though, is that it can be difficult to distinguish
    between files and folders. Files will typically have an extension, and folders
    won’t; however, `WISE-P2L` is a file that happens to have no extension and looks
    no different from any of the listed folders.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的一个重要特点是，文件和文件夹之间可能很难区分。文件通常会有扩展名，而文件夹则没有；然而，`WISE-P2L` 是一个没有扩展名的文件，看起来与任何列出的文件夹没有区别。
- en: You can also find files interactively from R. The `file.choose` command opens
    your filesystem viewer directly from the R prompt—just as any other program does
    when you want to open something. Then, you can navigate to the folder of interest,
    and after you select your file (see [Figure 8-3](ch08.xhtml#ch8fig3)), only a
    character string is returned.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过 R 交互式地查找文件。`file.choose` 命令直接从 R 提示符打开你的文件系统浏览器——就像任何其他程序在你想打开某个文件时一样。然后，你可以浏览到感兴趣的文件夹，选择文件后（见[图
    8-3](ch08.xhtml#ch8fig3)），只会返回一个字符字符串。
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![image](../images/f08-03.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f08-03.jpg)'
- en: '*Figure 8-3: My local file navigator opened as the result of a call to* `file.choose`*.
    When the file of interest is opened, the R command returns the full file path
    to that file as a character string.*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-3：在调用* `file.choose` *时打开的我的本地文件浏览器。当感兴趣的文件被打开时，R 命令返回该文件的完整文件路径作为字符字符串。*'
- en: 'This command is particularly useful, as it returns the character string of
    the directory in precisely the format that’s required for a command such as `read.table`.
    So, calling the following line and selecting *mydatafile.txt*, as in [Figure 8-3](ch08.xhtml#ch8fig3),
    will produce an identical result to the explicit use of the file path in `file`,
    shown earlier:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令特别有用，因为它返回的目录字符字符串正是用于像 `read.table` 这样的命令所要求的格式。因此，调用以下命令并选择 *mydatafile.txt*（如[图
    8-3](ch08.xhtml#ch8fig3)所示），将产生与之前明确使用文件路径在 `file` 中的结果完全相同：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If your file has been successfully loaded, you should be returned to the R prompt
    without receiving any error messages. You can check this with a call to `mydatafile`,
    which should return the data frame. When importing data into data frames, keep
    in mind the difference between character string observations and factor observations.
    No factor attribute information is stored in the plain-text file, but `read.table`
    will convert non-numeric values into factors by default. Here, you want to keep
    some of your data saved as strings, so set `stringsAsFactors=FALSE`, which prevents
    R from treating all non-numeric elements as factors. This way, `person`, `sex`,
    and `funny` are all stored as character strings.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件已经成功加载，您应该会返回到 R 提示符，并且不会收到任何错误消息。您可以通过调用`mydatafile`来检查这一点，它应该返回数据框。当将数据导入数据框时，请记住字符型观察值与因子型观察值之间的区别。纯文本文件中不会存储因子属性信息，但`read.table`默认会将非数字值转换为因子。在这里，您希望将一些数据保存为字符串，因此设置`stringsAsFactors=FALSE`，以防止
    R 将所有非数字元素视为因子。这样，`person`、`sex`和`funny`都将作为字符型字符串存储。
- en: You can then overwrite `sex` and `funny` with factor versions of themselves
    if you want them as that data type.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果您希望将`sex`和`funny`作为因子类型的数据，可以将它们覆盖为因子版本。
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '***8.2.2 Spreadsheet Workbooks***'
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***8.2.2 电子表格工作簿***'
- en: Next, let’s examine some ubiquitous spreadsheet software file formats. The standard
    file format for Microsoft Office Excel is *.xls* or *.xlsx*. In general, these
    files are not directly compatible with R. There are some contributed package functions
    that attempt to bridge this gap—see, for example, `gdata` by Warnes et al. ([2014](ref.xhtml#ref71))
    or `XLConnect` by Mirai Solutions GmbH ([2014](ref.xhtml#ref47))—but it’s generally
    preferable to first export the spreadsheet file to a table format, such as CSV.
    Consider the hypothetical data from [Exercise 7.1](ch07.xhtml#ch7exc1) (b), which
    has been stored in an Excel file called *spreadsheetfile.xlsx*, shown in [Figure
    8-4](ch08.xhtml#ch8fig4).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们来看看一些常见的电子表格软件文件格式。Microsoft Office Excel 的标准文件格式是 *.xls* 或 *.xlsx*。通常，这些文件不能直接与
    R 兼容。有一些贡献的包函数试图填补这个空白——例如，Warnes 等人（[2014](ref.xhtml#ref71)）的`gdata`或 Mirai Solutions
    GmbH（[2014](ref.xhtml#ref47)）的`XLConnect`——但通常最好先将电子表格文件导出为表格格式，如 CSV。考虑一下来自[练习
    7.1](ch07.xhtml#ch7exc1)（b）中的假设数据，它已存储在名为*spreadsheetfile.xlsx*的 Excel 文件中，如[图
    8-4](ch08.xhtml#ch8fig4)所示。
- en: '![image](../images/f08-04.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f08-04.jpg)'
- en: '*Figure 8-4: A spreadsheet file of the data from [Exercise 7.1](ch07.xhtml#ch7exc1)
    (b)*'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-4：来自 [练习 7.1](ch07.xhtml#ch7exc1)（b）数据的电子表格文件*'
- en: To read this spreadsheet with R, you should first convert it to a table format.
    In Excel, File → Save As... provides a wealth of options. Save the spreadsheet
    as a comma-separated file, called *spreadsheet.csv*. R has a shortcut version
    of `read.table`, `read.csv`, for these files.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要用 R 读取这个电子表格，首先需要将其转换为表格格式。在 Excel 中，点击 文件 → 另存为... 提供了许多选项。将电子表格保存为逗号分隔的文件，命名为*spreadsheet.csv*。R
    有一个简化版本的`read.table`，即`read.csv`，用于处理这些文件。
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, the `file` argument again specifies the desired file, which has no header,
    so `header=FALSE`. You set `stringsAsFactors=TRUE` because you do want to treat
    the `sex` variable (the only non-numeric variable) as a factor. There are no missing
    values, so you don’t need to specify `na.strings` (though if there were, this
    argument is simply used in the same way as earlier), and by definition, *.csv*
    files are comma-delimited, which `read.csv` correctly implements by default, so
    you don’t need the `sep` argument. The resulting data frame, `spread`, can then
    be printed in your R console.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`file`参数再次指定所需的文件，该文件没有头部，因此`header=FALSE`。你设置`stringsAsFactors=TRUE`，因为你确实希望将`sex`变量（唯一的非数字变量）视为因子。文件中没有缺失值，因此不需要指定`na.strings`（尽管如果有缺失值，可以像之前一样使用该参数），并且*.csv*文件本身是以逗号分隔的，`read.csv`默认正确实现了这一点，因此不需要`sep`参数。最终的数据框`spread`可以在
    R 控制台中打印出来。
- en: As you can see, reading tabular data into R is fairly straightforward—you just
    need to be aware of how the data file is headed and delimited and how missing
    entries are identified. The simple table format is a natural and common way for
    data sets to be stored, but if you need to read in a file with a more complicated
    structure, R and its contributed packages make available some more sophisticated
    functions. See, for example, the documentation for the `scan` and `readLines`
    functions, which provide advanced control over how to parse a file. You can also
    find documentation on `read.table` and `read.csv` by accessing `?read.table` from
    the prompt.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，将表格数据读取到 R 中相当简单——你只需要注意数据文件的标题和分隔符，以及如何标识缺失值。简单的表格格式是数据集常见的存储方式，但如果你需要读取结构更复杂的文件，R
    及其贡献的包提供了一些更复杂的函数。例如，可以查看 `scan` 和 `readLines` 函数的文档，这些函数提供了对文件解析的高级控制。你也可以通过在提示符下访问
    `?read.table` 来查阅 `read.table` 和 `read.csv` 的文档。
- en: '***8.2.3 Web-Based Files***'
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***8.2.3 基于网络的文件***'
- en: With an Internet connection, R can read in files from a website with the same
    `read.table` command. All the same rules concerning headers, delimiters, and missing
    values remain in place; you just have to specify the URL address of the file instead
    of a local folder location.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在有互联网连接的情况下，R 可以使用相同的`read.table`命令从网站读取文件。有关标题、分隔符和缺失值的所有相同规则依然适用；你只需指定文件的
    URL 地址，而不是本地文件夹路径。
- en: As an example, you’ll use the online repository of data sets made available
    by the *Journal of Statistics Education (JSE)* through the American Statistical
    Association at *[http://www.amstat.org/publications/jse/jse_data_archive.htm](http://www.amstat.org/publications/jse/jse_data_archive.htm)*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，你将使用美国统计协会通过*《统计教育期刊（JSE）》*提供的在线数据集库，地址为*[http://www.amstat.org/publications/jse/jse_data_archive.htm](http://www.amstat.org/publications/jse/jse_data_archive.htm)*。
- en: One of the first files linked to at the top of this page is the table-format
    data set *4cdata.txt* (*[http://www.amstat.org/publications/jse/v9n2/4cdata.txt](http://www.amstat.org/publications/jse/v9n2/4cdata.txt)*),
    which contains data on the characteristics of 308 diamonds from an analysis by
    Chu ([2001](ref.xhtml#ref13)) based on an advertisement in a Singaporean newspaper.
    [Figure 8-5](ch08.xhtml#ch8fig5) shows the data.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 本页面顶部链接的第一个文件是表格格式的数据集*4cdata.txt*（*[http://www.amstat.org/publications/jse/v9n2/4cdata.txt](http://www.amstat.org/publications/jse/v9n2/4cdata.txt)*），该文件包含基于新加坡报纸广告的
    Chu（[2001](ref.xhtml#ref13)）对 308 顆钻石特征的分析数据。[图 8-5](ch08.xhtml#ch8fig5)显示了这些数据。
- en: You can look at the documentation file (*4c.txt*) and the accompanying article
    linked from the JSE site for details on what is recorded in this table. Note that
    of the five columns, the first and fifth are numeric, and the others would be
    well represented by factors. The delimiter is blank whitespace, there’s no header,
    and there are no missing values (so you don’t have to specify a value used to
    represent them).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查看文档文件（*4c.txt*）和 JSE 网站上链接的相关文章，以了解此表中记录的具体内容。请注意，五列数据中，第一列和第五列为数值型，其他列则可以用因子来表示。分隔符是空白字符，没有标题，也没有缺失值（因此你不需要指定表示缺失值的标记）。
- en: '![image](../images/f08-05.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f08-05.jpg)'
- en: '*Figure 8-5: A table-format data file found online*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-5：在线找到的表格格式数据文件*'
- en: 'With this in mind, you can create a data frame directly from the R prompt simply
    with the following lines:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 记住这一点后，你可以通过以下几行直接从 R 提示符创建数据框：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Note that you haven’t supplied any extra values in this call to `read.table`
    because the defaults all work just fine. Because there’s no header in the table,
    you can leave the default `header` value `FALSE`. The default value for `sep`
    is `""`, meaning whitespace (not to be confused with `" "`, meaning an explicit
    space character), which is exactly what this table uses. The default value for
    `stringsAsFactors` is `TRUE`, which is what you want for your character string
    columns. Following the import, you can supply names (based on the information
    in the documentation) to each column as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你在调用 `read.table` 时没有提供额外的值，因为默认值已经足够好。由于表格中没有标题，因此你可以保持默认的 `header` 值为
    `FALSE`。`sep` 的默认值是 `""`，表示空白字符（不要与 `" "` 混淆，后者表示明确的空格字符），这正是此表使用的分隔符。`stringsAsFactors`
    的默认值为 `TRUE`，这正是你希望在字符列中使用的设置。导入后，你可以根据文档中的信息为每一列指定列名，如下所示：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Viewing the first five records shows that the data frame is displayed as you
    intended.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 查看前五条记录可以看到数据框按你预期的方式显示。
- en: '***8.2.4 Other File Formats***'
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***8.2.4 其他文件格式***'
- en: There are other file formats besides *.txt* or *.csv* files that can be read
    into R, such as the data file format *.dat*. These files can also be imported
    using `read.table`, though they may contain extra information at the top that
    must be skipped using the optional `skip` argument. The `skip` argument asks for
    the number of lines at the top of the file that should be ignored before R begins
    the import.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 *.txt* 或 *.csv* 文件之外，还有其他文件格式可以导入 R，例如数据文件格式 *.dat*。这些文件也可以使用 `read.table`
    导入，尽管它们可能包含一些顶部的额外信息，必须使用可选的 `skip` 参数跳过。`skip` 参数指定文件顶部应该忽略的行数，在 R 开始导入之前。
- en: As mentioned in [Section 8.2.2](ch08.xhtml#ch08lev2sec74), there are also contributed
    packages that can cope with other statistical software files; however, if there
    are multiple worksheets within a file it can complicate things. The R package
    `foreign` ([R Core Team, 2015](ref.xhtml#ref52)), available from CRAN, provides
    support for reading data files used by statistical programs such as Stata, SAS,
    Minitab, and SPSS.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第 8.2.2 节](ch08.xhtml#ch08lev2sec74)中所述，还有一些贡献包可以处理其他统计软件的文件；然而，如果文件中有多个工作表，这可能会使事情变得复杂。CRAN
    上的 R 包 `foreign`（[R Core Team, 2015](ref.xhtml#ref52)）提供了对 Stata、SAS、Minitab 和
    SPSS 等统计程序使用的数据文件的读取支持。
- en: Other contributed packages on CRAN can help R handle files from various database
    management systems (DBMSs). For example, the `RODBC` package ([Ripley and Lapsley,
    2013](ref.xhtml#ref54)) lets you query Microsoft Access databases and return the
    results as a data frame object. Other interfaces include the packages `RMySQL`
    ([James and DebRoy, 2012](ref.xhtml#ref35)) and `RJDBC` ([Urbanek, 2013](ref.xhtml#ref68)).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: CRAN 上的其他贡献包可以帮助 R 处理来自各种数据库管理系统（DBMS）的文件。例如，`RODBC` 包（[Ripley 和 Lapsley, 2013](ref.xhtml#ref54)）让你查询
    Microsoft Access 数据库，并将结果作为数据框对象返回。其他接口包括 `RMySQL` 包（[James 和 DebRoy, 2012](ref.xhtml#ref35)）和
    `RJDBC` 包（[Urbanek, 2013](ref.xhtml#ref68)）。
- en: '**8.3 Writing Out Data Files and Plots**'
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**8.3 写出数据文件和图表**'
- en: Writing out new files from data frame objects with R is just as easy as reading
    in files. R’s vector-oriented behavior is a fast and convenient way to recode
    data sets, so it’s perfect for reading in data, restructuring it, and writing
    it back out to a file.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据框对象中写出新文件和读取文件一样简单。R 的向量化行为是一种快速便捷的方式来重新编码数据集，因此它非常适合读取数据、重新结构化数据并将其写回文件。
- en: '***8.3.1 Data Sets***'
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***8.3.1 数据集***'
- en: 'The function for writing table-format files to your computer is `write.table`.
    You supply a data frame object as `x`, and this function writes its contents to
    a new file with a specified name, delimiter, and missing value string. For example,
    the following line takes the `mydatafile` object from [Section 8.2](ch08.xhtml#ch08lev1sec28)
    and writes it to a file:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 用于将表格格式文件写入计算机的函数是 `write.table`。你提供一个数据框对象作为 `x`，该函数将其内容写入一个指定名称、分隔符和缺失值字符串的新文件。例如，以下代码将
    [第 8.2 节](ch08.xhtml#ch08lev1sec28)中的 `mydatafile` 对象写入一个文件：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You provide `file` with the folder location, ending in the filename you want
    for your new data file. This command creates a new table-format file called *somenewfile.txt*
    in the specified folder location, delimited by `@` and with missing values denoted
    with `??` (because you’re actually creating a new file, the `file.choose` command
    doesn’t tend to be used here). Since `mydatafile` has variable names, these are
    automatically written to the file as a header. The optional logical argument `quote`
    determines whether to encapsulate each non-numeric entry in double quotes (if
    you explicitly need them in your file for, say, formatting requirements of other
    software); request no quotes by setting the argument to `FALSE`. Another optional
    logical argument, `row.names`, asks whether to include the row names of `mydatafile`
    (in this example, this would just be the numbers `1` to `6`), which you also omit
    with `FALSE`. The resulting file, shown in [Figure 8-6](ch08.xhtml#ch8fig6), can
    be opened in a text editor.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你提供 `file` 参数，指定文件夹位置，并以你想要的文件名结束。这条命令将在指定的文件夹位置创建一个新的表格格式文件，名为 *somenewfile.txt*，以
    `@` 作为分隔符，缺失值用 `??` 表示（因为你实际上是在创建一个新文件，因此通常不会使用 `file.choose` 命令）。由于 `mydatafile`
    包含变量名，这些变量名会自动作为文件头写入文件。可选的逻辑参数 `quote` 决定是否将每个非数字条目用双引号括起来（例如，如果你需要它们用于其他软件的格式要求）；通过将该参数设置为
    `FALSE`，可以请求不使用引号。另一个可选的逻辑参数 `row.names` 用于决定是否将 `mydatafile` 的行名包含在文件中（在本例中，即为
    `1` 到 `6` 的数字），如果不需要行名，可以设置为 `FALSE`。生成的文件，如[图 8-6](ch08.xhtml#ch8fig6)所示，可以在文本编辑器中打开。
- en: Like `read.csv`, `write.csv` is a shortcut version of the `write.table` function
    designed specifically for *.csv* files.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 `read.csv`，`write.csv` 是 `write.table` 函数的简化版本，专为 *.csv* 文件设计。
- en: '![image](../images/f08-06.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f08-06.jpg)'
- en: '*Figure 8-6: The contents of* somenewfile.txt'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-6：* somenewfile.txt *的内容*'
- en: '***8.3.2 Plots and Graphics Files***'
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***8.3.2 绘图和图形文件***'
- en: 'Plots can also be written directly to a file. In [Chapter 7](ch07.xhtml#ch07),
    you created and displayed plots in an active graphics device. This graphics device
    needn’t be a screen window; it can be a specified file. Instead of displaying
    the plot immediately on the screen, you can have R follow these steps: open a
    “file” graphics device, run any plotting commands to create the final plot, and
    close the device. R supports direct writing to *.jpeg*, *.bmp*, *.png*, and *.tiff*
    files using functions of the same names. For example, the following code uses
    these three steps to create a *.jpeg* file:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 绘图也可以直接写入文件中。在[第 7 章](ch07.xhtml#ch07)中，你在活动的图形设备中创建并展示了绘图。这个图形设备不一定是屏幕窗口；它可以是指定的文件。你可以让
    R 按照以下步骤进行操作：打开一个“文件”图形设备，执行任何绘图命令以创建最终图形，然后关闭设备。R 支持使用相同名称的函数直接写入 *.jpeg*、*.bmp*、*.png*
    和 *.tiff* 文件。例如，以下代码使用这三个步骤来创建一个 *.jpeg* 文件：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The file graphics device is opened by a call to `jpeg`, where you provide the
    intended name of the file and its folder location as `filename`. By default, the
    dimensions of the device are set to 480 × 480 pixels, but here you change them
    to 600 × 600\. You could also set these dimensions by supplying other units (inches,
    centimeters, or millimeters) to `width` and `height` and by specifying the unit
    with an optional `units` argument. Once the file is opened, you execute any R
    plotting commands you need in order to create the image—this example plots some
    points and then includes some additional points with a second command. The final
    graphical result is silently written to the specified file just as it would have
    been displayed on the screen. When you’ve finished plotting, you must explicitly
    close the file device with a call to `dev.off()`, which prints information on
    the remaining active device (here, “null device” can be loosely interpreted as
    “nothing is left open”). If `dev.off()` isn’t called, then R will continue to
    output any subsequent plotting commands to the file, and possibly overwrite what
    you have there. The left plot in [Figure 8-7](ch08.xhtml#ch8fig7) shows the resulting
    file created in this example.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 文件图形设备通过调用 `jpeg` 打开，在其中你提供文件的预期名称和其文件夹位置作为 `filename`。默认情况下，设备的尺寸设置为 480 ×
    480 像素，但在这里你将其更改为 600 × 600。你也可以通过为 `width` 和 `height` 提供其他单位（英寸、厘米或毫米），并通过可选的
    `units` 参数指定单位来设置这些尺寸。一旦文件被打开，你就可以执行任何必要的 R 绘图命令来创建图像——这个例子绘制了一些点，然后通过第二个命令添加了一些额外的点。最终的图形结果会默默地写入指定的文件，就像它会显示在屏幕上一样。当你完成绘图后，必须明确地通过调用
    `dev.off()` 关闭文件设备，这将打印出有关剩余活动设备的信息（这里，“null device”可以粗略解释为“没有打开的设备”）。如果没有调用 `dev.off()`，R
    将继续将任何后续的绘图命令输出到文件中，可能会覆盖你在文件中已有的内容。[图 8-7](ch08.xhtml#ch8fig7)的左图展示了在此示例中创建的文件。
- en: '![image](../images/f08-07.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f08-07.jpg)'
- en: '*Figure 8-7: R plots that have been written directly to disk: a* .jpeg *version
    (left) and a* .pdf *version (right) of the same plotting commands*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-7：直接写入磁盘的 R 绘图：* .jpeg *版本（左）和* .pdf *版本（右）来自相同绘图命令*'
- en: 'You can also store R plots as other file types, such as PDFs (using the `pdf`
    function) and EPS files (using the `postscript` function). Though some argument
    names and default values are different for these functions, they follow the same
    basic premise. You specify a folder location, a filename, and width and height
    dimensions; enter your plotting commands; and then close the device with `dev.off()`.
    The right panel of [Figure 8-7](ch08.xhtml#ch8fig7) shows the *.pdf* file created
    with the following code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将 R 绘图存储为其他文件类型，如 PDF（使用 `pdf` 函数）和 EPS 文件（使用 `postscript` 函数）。虽然这些函数的一些参数名称和默认值不同，但它们遵循相同的基本原理。你需要指定文件夹位置、文件名以及宽度和高度的尺寸；输入你的绘图命令；然后使用
    `dev.off()` 关闭设备。[图 8-7](ch08.xhtml#ch8fig7)的右面板展示了使用以下代码创建的 *.pdf* 文件：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, you use the same plotting commands as before, and there are just a few
    minor differences in the code. The argument for the file is `file` (as opposed
    to `filename`), and the units for `width` and `height` default to inches in `pdf`.
    The difference of appearance between the two images in [Figure 8-7](ch08.xhtml#ch8fig7)
    results primarily from these differences in width and height.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您使用了与之前相同的绘图命令，只是在代码中有一些小的差异。文件的参数是`file`（而不是`filename`），`width`和`height`的单位在`pdf`中默认为英寸。[图
    8-7](ch08.xhtml#ch8fig7)中两张图像的外观差异主要来自这些宽度和高度的差异。
- en: This same process also works for `ggplot2` images. True to style, however, `ggplot2`
    provides a convenient alternative. The `ggsave` function can be used to write
    the most recently plotted `ggplot2` graphic to file and performs the device open/close
    action in one line.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程同样适用于`ggplot2`图像。然而，忠于其风格，`ggplot2`提供了一个方便的替代方法。`ggsave`函数可以用来将最近绘制的`ggplot2`图形写入文件，并在一行代码中执行设备的打开/关闭操作。
- en: For example, the following code creates and displays a `ggplot2` object from
    a simple data set.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码创建并显示了一个来自简单数据集的`ggplot2`对象。
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, to save this plot to a file, all you need is the following line:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要将这个图保存到文件中，您只需要以下一行代码：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This writes the image to a *.png* file in the specified `filename` directory.
    (Note that dimensions are reported if you don’t explicitly set them using `width`
    and `height`; these will vary depending on the size of your graphics device.)
    The result is shown in [Figure 8-8](ch08.xhtml#ch8fig8).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把图像写入指定`filename`目录下的*.png*文件中。（注意，如果您没有通过`width`和`height`明确设置它们，尺寸将会被报告；这些尺寸会根据您的图形设备大小而有所不同。）结果如[图
    8-8](ch08.xhtml#ch8fig8)所示。
- en: '![image](../images/f08-08.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f08-08.jpg)'
- en: '*Figure 8-8: The* .png *file created using* `ggplot2`*’s* `ggsave` *command*'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-8：使用* `ggplot2` *的* `ggsave` *命令创建的* .png *文件*'
- en: Beyond just being concise, `ggsave` is convenient in a few other ways. For one,
    you can use the same command to create a variety of image file types—the type
    is simply determined by the extension you supply in the `filename` argument. Also,
    `ggsave` has a range of optional arguments if you want to control the size of
    the image and the quality or scaling of the graphic.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 除了简洁，`ggsave`在其他几个方面也很方便。首先，您可以使用相同的命令创建各种图像文件类型——类型仅由您在`filename`参数中提供的扩展名决定。此外，`ggsave`具有一系列可选参数，如果您想控制图像的大小、质量或图形的缩放，它们也可以提供帮助。
- en: For more details on saving images from base R graphics, see the `?jpeg`, `?pdf`,
    and `?postscript` help files. You can consult `?ggsave` for more on saving images
    with `ggplot2`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 关于从基础 R 图形保存图像的更多细节，请参阅 `?jpeg`、`?pdf` 和 `?postscript` 帮助文件。如果要了解如何使用`ggplot2`保存图像，请参考`?ggsave`。
- en: '**8.4 Ad Hoc Object Read/Write Operations**'
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**8.4 临时对象的读写操作**'
- en: For the typical R user, the most common input/output operations will probably
    revolve around data sets and plot images. But if you need to read or write other
    kinds of R objects, such as lists or arrays, you’ll need the `dput` and `dget`
    commands, which can handle objects in a more ad hoc style.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于典型的 R 用户，最常见的输入/输出操作可能围绕数据集和图像文件展开。但是，如果您需要读取或写入其他类型的 R 对象，如列表或数组，您将需要`dput`和`dget`命令，它们可以以更临时的方式处理对象。
- en: 'Suppose, for example, you create this list in the current session:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 假设，例如，您在当前会话中创建了这个列表：
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This object can itself be written to a file, which is useful if you want to
    pass it to a colleague or open it in a new R session elsewhere. Using `dput`,
    the following line stores the object as a plain-text file that is interpretable
    by R:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 该对象本身可以写入文件，这在您希望将其传递给同事或在其他地方的新的 R 会话中打开时非常有用。使用`dput`，以下代码将对象存储为一个纯文本文件，R
    可以解释该文件：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In technical terms, this command creates an American Standard Code for Information
    Interchange (ASCII) representation of the object. As you call `dput`, the object
    you want to write is specified as `x`, and the folder location and name of the
    new plain-text file are passed to `file`. [Figure 8-9](ch08.xhtml#ch8fig9) shows
    the contents of the resulting file.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术角度讲，这个命令创建了一个对象的美国标准信息交换码（ASCII）表示。通过调用`dput`，您要写入的对象被指定为`x`，新纯文本文件的位置和名称传递给`file`。[图
    8-9](ch08.xhtml#ch8fig9)展示了结果文件的内容。
- en: '![image](../images/f08-09.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f08-09.jpg)'
- en: '*Figure 8-9:* myRobject.txt *created by using* `dput` *on* `somelist`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-9：* myRobject.txt *是使用* `dput` *对* `somelist` *操作后创建的*'
- en: Notice that `dput` stores all of the members of the object plus any other relevant
    information, such as attributes. The third element of `somelist`, for example,
    is an ordered factor, so it isn’t enough to simply represent it in the text file
    as a stand-alone vector.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`dput` 存储了对象的所有成员以及其他相关信息，如属性。例如，`somelist` 的第三个元素是一个有序因子，因此仅将其作为独立向量表示在文本文件中是不够的。
- en: Now, let’s say you want to import this list into an R workspace. If a file has
    been created with `dput`, then it can be read into any other workspace using `dget`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设你想将这个列表导入到 R 工作空间。如果已经通过 `dput` 创建了一个文件，那么可以使用 `dget` 将其读取到任何其他工作空间。
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You read the object from the *myRobject.txt* file using `dget` and assign it
    to `newobject`. This object is the same as the original R object `somelist`, with
    all structures and attributes present.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过 `dget` 从 *myRobject.txt* 文件中读取该对象，并将其赋值给 `newobject`。这个对象与原始的 R 对象 `somelist`
    相同，所有结构和属性都完整保留。
- en: There are some drawbacks to using these commands. For starters, `dput` is not
    as reliable a command as `write.table` because it’s sometimes quite difficult
    for R to create the necessary plain-text representation for an object (fundamental
    object classes typically cause no problems, but complex user-defined classes can).
    Also, because they need to store structural information, files created using `dput`
    are relatively inefficient both in terms of required space and in terms of how
    long it takes to execute read and write operations. This becomes more noticeable
    for objects that contain a lot of data. Nevertheless, `dput` and `dget` are useful
    ways to store or transfer specific objects without having to save an entire workspace.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些命令有一些缺点。首先，`dput` 不是像 `write.table` 那样可靠的命令，因为 R 有时很难为一个对象创建必要的纯文本表示（基本对象类通常没有问题，但复杂的用户自定义类可能会有问题）。另外，由于它们需要存储结构信息，使用
    `dput` 创建的文件在所需空间和执行读写操作所需时间上相对低效。对于包含大量数据的对象，这一点尤为明显。尽管如此，`dput` 和 `dget` 仍然是存储或传输特定对象的有用方式，而不必保存整个工作空间。
- en: '**Exercise 8.1**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 8.1**'
- en: 'In R’s built-in `datasets` library is the data frame `quakes`. Make sure you
    can access this object and view the corresponding help file to get an idea of
    what this data represents. Then, do the following:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 R 的内置 `datasets` 库中，有一个数据框 `quakes`。确保你能够访问这个对象并查看相应的帮助文件，以了解这个数据的含义。然后，执行以下操作：
- en: Select only those records that correspond to a magnitude (`mag`) of greater
    than or equal to `5` and write them to a table-format file called *q5.txt* in
    an existing folder on your machine. Use a delimiting character of `!` and do not
    include any row names.
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅选择那些 `mag`（震级）大于或等于 `5` 的记录，并将它们写入一个名为 *q5.txt* 的表格格式文件，该文件存放在你机器上的一个现有文件夹中。使用
    `!` 作为分隔符，并且不要包含任何行名。
- en: Read the file back into your R workspace, naming the object `q5.dframe`.
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件重新读取到 R 工作空间中，命名为 `q5.dframe`。
- en: 'In the contributed package `car`, there’s a data frame called `Duncan`, which
    provides historical data on perceived job prestige in 1950\. Install the `car`
    package and access the `Duncan` data set and its help file. Then, do the following:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在贡献包 `car` 中，有一个数据框 `Duncan`，提供了 1950 年对工作声望的历史数据。安装 `car` 包并访问 `Duncan` 数据集及其帮助文件。然后，执行以下操作：
- en: Write R code that will plot `education` on the *x*-axis and `income` on the
    *y*-axis, with both *x*- and *y*-axis limits fixed to be [0,100]. Provide appropriate
    axis labels. For jobs with a `prestige` value of less than or equal to `80`, use
    a black ○ as the point character. For jobs with `prestige` greater than 80, use
    a blue •.
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写 R 代码，将 `education` 显示在 *x* 轴上，`income` 显示在 *y* 轴上，并将 *x* 轴和 *y* 轴的范围固定为 [0,100]。提供适当的轴标签。对于
    `prestige` 值小于或等于 `80` 的职业，使用黑色 ○ 作为点符号。对于 `prestige` 大于 80 的职业，使用蓝色 •。
- en: Add a legend explaining the difference between the two types of points and then
    save a 500 × 500 pixel *.png* file of the image.
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个图例，解释两种点符号的区别，然后保存一个 500 × 500 像素的 *.png* 文件。
- en: 'Create a list called `exer` that contains the three data sets `quakes`, `q5.dframe`,
    and `Duncan`. Then, do the following:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `exer` 的列表，其中包含三个数据集：`quakes`、`q5.dframe` 和 `Duncan`。然后，执行以下操作：
- en: Write the list object directly to disk, calling it *Exercise8-1.txt*. Briefly
    inspect the contents of the file in a text editor.
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将列表对象直接写入磁盘，命名为 *Exercise8-1.txt*。在文本编辑器中简要检查文件内容。
- en: Read *Exercise8-1.txt* back into your workspace; call the resulting object `list.of.dataframes`.
    Check that `list.of.dataframes` does indeed contain the three data frame objects.
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新读取*Exercise8-1.txt*文件到工作空间中；将结果对象命名为`list.of.dataframes`。检查`list.of.dataframes`确实包含这三个数据框对象。
- en: In [Section 7.4.3](ch07.xhtml#ch07lev2sec70), you created a `ggplot2` graphic
    of 20 observations displayed as the bottom image of [Figure 7-11](ch07.xhtml#ch7fig11)
    on [page 144](ch07.xhtml#page_144). Use `ggsave` to save a copy of this plot as
    a *.tiff* file.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[第7.4.3节](ch07.xhtml#ch07lev2sec70)中，你创建了一个`ggplot2`图形，显示了20个观测值，作为[图7-11](ch07.xhtml#ch7fig11)中底部图像，位于[第144页](ch07.xhtml#page_144)。使用`ggsave`将该图表保存为*.tiff*文件。
- en: '**Important Code in This Chapter**'
  id: totrans-125
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**本章重要代码**'
- en: '| **Function/operator** | **Brief description** | **First occurrence** |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| **函数/操作符** | **简要描述** | **首次出现** |'
- en: '| --- | --- | --- |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `data` | Load contributed data set | [Section 8.1.2](ch08.xhtml#ch08lev2sec72),
    [p. 149](ch08.xhtml#page_149) |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `data` | 加载贡献的数据集 | [第8.1.2节](ch08.xhtml#ch08lev2sec72), [第149页](ch08.xhtml#page_149)
    |'
- en: '| `read.table` | Import table-format data file | [Section 8.2.1](ch08.xhtml#ch08lev2sec73),
    [p. 151](ch08.xhtml#page_151) |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `read.table` | 导入表格格式数据文件 | [第8.2.1节](ch08.xhtml#ch08lev2sec73), [第151页](ch08.xhtml#page_151)
    |'
- en: '| `list.files` | Print specific folder contents | [Section 8.2.1](ch08.xhtml#ch08lev2sec73),
    [p. 151](ch08.xhtml#page_151) |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `list.files` | 打印特定文件夹内容 | [第8.2.1节](ch08.xhtml#ch08lev2sec73), [第151页](ch08.xhtml#page_151)
    |'
- en: '| `file.choose` | Interactive file selection | [Section 8.2.1](ch08.xhtml#ch08lev2sec73),
    [p. 152](ch08.xhtml#page_152) |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `file.choose` | 交互式文件选择 | [第8.2.1节](ch08.xhtml#ch08lev2sec73), [第152页](ch08.xhtml#page_152)
    |'
- en: '| `read.csv` | Import comma-delimited file | [Section 8.2.2](ch08.xhtml#ch08lev2sec74),
    [p. 153](ch08.xhtml#page_153) |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `read.csv` | 导入逗号分隔的文件 | [第8.2.2节](ch08.xhtml#ch08lev2sec74), [第153页](ch08.xhtml#page_153)
    |'
- en: '| `write.table` | Write table-format file to disk | [Section 8.3.1](ch08.xhtml#ch08lev2sec77),
    [p. 156](ch08.xhtml#page_156) |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `write.table` | 将表格格式文件写入磁盘 | [第8.3.1节](ch08.xhtml#ch08lev2sec77), [第156页](ch08.xhtml#page_156)
    |'
- en: '| `jpeg`, `bmp`, `png`, `tiff` | Write image/plot file to disk | [Section 8.3.2](ch08.xhtml#ch08lev2sec78),
    [p. 157](ch08.xhtml#page_157) |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `jpeg`, `bmp`, `png`, `tiff` | 将图像/图表文件写入磁盘 | [第8.3.2节](ch08.xhtml#ch08lev2sec78),
    [第157页](ch08.xhtml#page_157) |'
- en: '| `dev.off` | Close file graphics device | [Section 8.3.2](ch08.xhtml#ch08lev2sec78),
    [p. 157](ch08.xhtml#page_157) |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `dev.off` | 关闭文件图形设备 | [第8.3.2节](ch08.xhtml#ch08lev2sec78), [第157页](ch08.xhtml#page_157)
    |'
- en: '| `pdf`, `postscript` | Write image/plot file to disk | [Section 8.3.2](ch08.xhtml#ch08lev2sec78),
    [p. 158](ch08.xhtml#page_158) |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `pdf`, `postscript` | 将图像/图表文件写入磁盘 | [第8.3.2节](ch08.xhtml#ch08lev2sec78),
    [第158页](ch08.xhtml#page_158) |'
- en: '| `ggsave` | Write `ggplot2` plot file to disk | [Section 8.3.2](ch08.xhtml#ch08lev2sec78),
    [p. 159](ch08.xhtml#page_159) |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `ggsave` | 将`ggplot2`图表文件写入磁盘 | [第8.3.2节](ch08.xhtml#ch08lev2sec78), [第159页](ch08.xhtml#page_159)
    |'
- en: '| `dput` | Write R object to file (ASCII) | [Section 8.4](ch08.xhtml#ch08lev1sec30),
    [p. 160](ch08.xhtml#page_160) |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `dput` | 将R对象写入文件（ASCII格式） | [第8.4节](ch08.xhtml#ch08lev1sec30), [第160页](ch08.xhtml#page_160)
    |'
- en: '| `dget` | Import ASCII object file | [Section 8.4](ch08.xhtml#ch08lev1sec30),
    [p. 161](ch08.xhtml#page_161) |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `dget` | 导入ASCII对象文件 | [第8.4节](ch08.xhtml#ch08lev1sec30), [第161页](ch08.xhtml#page_161)
    |'
