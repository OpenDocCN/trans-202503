- en: '**1'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1**'
- en: SETTING THE STAGE**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**设置环境**'
- en: '![Image](../images/pg23_Image_2.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/pg23_Image_2.jpg)'
- en: We’ll start with a brief overview of how computer hardware can be thought of
    as organized into three subsystems. The goal of this chapter is to make sure we
    have a common framework for discussing how things are organized and how they fit
    together. Working within this framework, you’ll learn how a program is created
    and executed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先简要概述计算机硬件如何组织成三个子系统。 本章的目标是确保我们有一个共同的框架来讨论事物是如何组织的以及它们是如何相互配合的。在这个框架内，你将学习到如何创建和执行程序。
- en: There is a fair amount of programming in this book. To help you prepare for
    this, the chapter ends with a section describing how to set up a programming environment,
    using my system as an example.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中有相当一部分编程内容。为了帮助你做好准备，本章结尾部分将描述如何设置编程环境，以我的系统为例进行讲解。
- en: '**Computer Subsystems**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**计算机子系统**'
- en: 'You can think of computer hardware as consisting of three separate subsystems:
    the *central processing unit (CPU)*, *memory*, and *input/output (I/O)*. These
    are connected with *buses*, as shown in [Figure 1-1](ch01.xhtml#ch1fig1).'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将计算机硬件视为由三个独立的子系统组成：*中央处理单元 (CPU)*、*内存*和*输入/输出 (I/O)*。这些子系统通过*总线*连接，如[图1-1](ch01.xhtml#ch1fig1)所示。
- en: '![Image](../images/pg30_Image_3.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/pg30_Image_3.jpg)'
- en: '*Figure 1-1: The subsystems of a computer*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-1：计算机的子系统*'
- en: 'Let’s take each of these elements in turn:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一介绍这些元素：
- en: '**Central processing unit (CPU)**   Controls the flow of data to and from memory
    and I/O devices. The CPU performs arithmetic and logical operations on the data.
    It can decide the order of operations based on the results of arithmetic and logic
    operations. It contains a small amount of very fast memory.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**中央处理单元 (CPU)**   控制数据在内存和I/O设备之间的流动。CPU对数据执行算术和逻辑操作。它可以根据算术和逻辑操作的结果决定操作的顺序。它包含少量非常快速的内存。'
- en: '**Memory**   Provides storage that is readily accessible to the CPU and I/O
    devices for the instructions to the CPU and the data they manipulate.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**内存**   为CPU和I/O设备提供便于访问的存储空间，用于存储指令和处理的数据。'
- en: '**Input/output (I/O)**   Communicates with the outside world and with mass
    storage devices (for example, the disk, network, USB, and printer).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入/输出 (I/O)**   与外部世界和大容量存储设备（例如磁盘、网络、USB和打印机）进行通信。'
- en: '**Bus**   A physical communication pathway with a protocol specifying exactly
    how the pathway is used.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**总线**   是一条物理通信路径，具有指定如何使用该路径的协议。'
- en: As indicated by the arrows in [Figure 1-1](ch01.xhtml#ch1fig1), signals can
    flow in either direction on the buses. The *address bus* is used to specify a
    memory location or an I/O device. Program data and program instructions flow on
    the *data bus*. The *control bus* carries signals that specify how each of the
    subsystems should be using the signals on the other buses.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图1-1](ch01.xhtml#ch1fig1)中的箭头所示，信号可以在总线上双向流动。*地址总线*用于指定内存位置或I/O设备。程序数据和程序指令通过*数据总线*流动。*控制总线*传输指定如何使用其他总线上的信号的控制信号。
- en: The buses shown in [Figure 1-1](ch01.xhtml#ch1fig1) indicate logical groupings
    of the signals that must pass between the three subsystems. A given bus implementation
    might not have physically separate paths for each of the three types of signals.
    For example, if you have ever installed a graphics card in a computer, it probably
    used the Peripheral Component Interconnect Express (PCI-E) bus. The same physical
    connections on the PCI-E bus carry addresses and data, but at different times.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[图1-1](ch01.xhtml#ch1fig1)中的总线显示了必须在三个子系统之间传递的信号的逻辑分组。给定的总线实现可能没有为每种类型的信号提供物理上独立的路径。例如，如果你曾经在计算机中安装过显卡，它可能使用了外设组件互联快速（PCI-E）总线。PCI-E总线上的相同物理连接同时传输地址和数据，但在不同的时间传输。'
- en: '**Creating and Executing a Program**'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**创建和执行程序**'
- en: A *program* consists of a sequence of machine instructions stored in memory.
    A *machine instruction* causes the computer to perform a specific operation and
    can be thought of as the native language of the computer.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*程序*由一系列存储在内存中的机器指令组成。*机器指令*使计算机执行特定操作，可以将其视为计算机的原生语言。
- en: When we create a new program, we use an *editor* to write the *source code*
    for the program, usually in a high-level language such as Python, Java, C++, or
    C. Python continues to be one of the top programming languages. It’s also the
    most commonly used language for programming the Raspberry Pi.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建一个新程序时，我们使用*编辑器*编写程序的*源代码*，通常使用高级语言如Python、Java、C++或C。Python仍然是最流行的编程语言之一，也是编程树莓派时最常用的语言。
- en: 'To create a program in Python, we use an editor to write the program and store
    it in a source code file. Then, we use the `python` command to execute our program.
    For example, to execute the Python program called *my_program.py*, we would use
    the following command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Python中创建一个程序，我们使用编辑器编写程序并将其存储在源代码文件中。然后，我们使用`python`命令来执行我们的程序。例如，要执行名为*my_program.py*的Python程序，我们会使用以下命令：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This command invokes the Python program, which is an *interpreter* that translates
    each Python language statement into machine instructions and tells the computer
    to execute it. Each time we want to execute our program, we need to use the `python`
    command to interpret our source code and execute it.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令调用Python程序，它是一个*解释器*，将每条Python语言语句翻译成机器指令，并告诉计算机执行它。每次我们想要执行程序时，都需要使用`python`命令来解释源代码并执行它。
- en: Python and other interpreted languages do a good job of hiding the machine language
    from us. However, our goal in this book is to see how a program uses machine language
    to control the computer, so we’ll use C for our programming, which will make it
    easier for us to see the machine code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Python和其他解释型语言做得很好，它们将机器语言隐藏在我们面前。然而，本书的目标是让我们了解程序如何使用机器语言来控制计算机，因此我们将使用C语言进行编程，这样更容易让我们看到机器代码。
- en: 'As with Python, we use an editor to write a program in C and store it in a
    source code file. We then use a *compiler* to translate the C source code into
    machine language. Instead of translating and executing each statement one at a
    time, a compiler considers all the statements in a source code file when figuring
    out how to best translate them into machine code. The resulting machine code is
    stored in an *object* file. One or more object files can be linked together to
    produce an *executable* file, which is what we use to run our program. For example,
    we can compile a program named *my_program.c* with the command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 和Python一样，我们使用编辑器编写C语言程序并将其存储在源代码文件中。然后，我们使用*编译器*将C源代码翻译成机器语言。与逐条翻译和执行每条语句不同，编译器会在翻译之前考虑源代码文件中的所有语句，以找出最优的机器码翻译方式。最终的机器代码会存储在*目标*文件中。一个或多个目标文件可以链接在一起，生成一个*可执行*文件，这就是我们用来运行程序的文件。例如，我们可以使用以下命令编译名为*my_program.c*的程序：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To execute our program, we use:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行我们的程序，我们使用：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Don’t worry if you don’t know C. I’ll explain the features we need as we go
    through the book.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不懂C语言也不用担心，我会在本书中逐步解释我们所需要的功能。
- en: Whether they come from an interpreter program or an executable file, the machine
    instructions that make up the program are loaded into memory. Most programs include
    some constant data that is also loaded into memory. The CPU executes the program
    by reading, or *fetching*, each instruction from memory and executing it. The
    data is also fetched as needed by the program.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 无论它们来自解释器程序还是可执行文件，组成程序的机器指令都会被加载到内存中。大多数程序还包含一些常量数据，这些数据也会被加载到内存中。CPU通过读取或*获取*每条指令来执行程序，并执行它。数据也会根据程序需要被获取。
- en: When the CPU is ready to execute the next instruction in the program, the location
    of that instruction in memory is placed on the address bus. The CPU also places
    a *read* signal on the control bus. The memory subsystem responds by placing the
    instruction on the data bus, from where the CPU can copy it. The same sequence
    of events takes place if the CPU is instructed to read data from memory.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当CPU准备执行程序中的下一条指令时，它会将该指令在内存中的位置放到地址总线上。CPU还会在控制总线上放置*读取*信号。内存子系统会响应，通过将指令放到数据总线上，CPU可以从中复制指令。如果CPU被指示从内存中读取数据，也会发生相同的事件顺序。
- en: If the CPU is instructed to store data in memory, it places the data on the
    data bus, places the location in memory where the data is to be stored on the
    address bus, and places a *write* signal on the control bus. The memory subsystem
    responds by copying the data on the data bus into the specified memory location.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果CPU被指示将数据存储到内存中，它会将数据放到数据总线上，将数据要存储的位置放到地址总线上，并将*写入*信号放到控制总线上。内存子系统会通过将数据总线上的数据复制到指定的内存位置来响应。
- en: Most programs also access I/O devices. Some of these are meant to interact with
    humans, such as a keyboard, mouse, or screen. Others are meant for machine-readable
    I/O, such as a disk. I/O devices are very slow compared to the CPU and memory,
    and they vary widely in their timing characteristics. Because of their timing
    characteristics, data transfers between I/O devices and the CPU and memory must
    be explicitly programmed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数程序还会访问 I/O 设备。其中一些是与人类互动的设备，如键盘、鼠标或屏幕；另一些是机器可读的 I/O 设备，如磁盘。与 CPU 和内存相比，I/O
    设备的速度非常慢，并且它们的时序特性差异很大。由于这些时序特性，I/O 设备与 CPU 和内存之间的数据传输必须显式编程。
- en: Programming an I/O device requires a thorough understanding of how the device
    works and how it interacts with the CPU and memory. We’ll look at some of the
    general concepts near the end of the book. Meanwhile, nearly every program we
    write in this book will use at least the terminal screen, which is an output device.
    The operating system includes functions to perform I/O, and the C runtime environment
    provides a library of application-oriented functions to access the operating system’s
    I/O functions. We’ll use these C library functions to perform most of our I/O
    operations and leave I/O programming to more advanced books.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 编程 I/O 设备需要深入了解设备的工作原理以及它如何与 CPU 和内存交互。我们将在书的后面部分探讨一些通用概念。同时，我们在本书中编写的几乎每个程序都会使用至少一个终端屏幕，它是一个输出设备。操作系统包括执行
    I/O 的功能，C 运行时环境提供了一个库，其中包含访问操作系统 I/O 功能的应用程序功能。我们将使用这些 C 库函数执行大部分 I/O 操作，并将 I/O
    编程留给更高级的书籍。
- en: These few paragraphs are intended to provide you with a general overview of
    how computer hardware is organized. Before exploring these concepts in more depth,
    the next section will help you set up the tools you’ll need for the programming
    covered in the rest of the book.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这几段旨在为你提供计算机硬件组织的总体概述。在深入探索这些概念之前，下一节将帮助你设置你在本书其余部分编程所需的工具。
- en: '**The Programming Environment**'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程环境**'
- en: In this section, I’ll describe how I set up my Raspberry Pi to do all the programming
    described in this book. If you’re setting up a Raspberry Pi, I also recommend
    reading the “Set Up Your Raspberry Pi” section of the Raspberry Pi documentation
    at *[https://www.raspberrypi.com/documentation/computers/getting-started.html](https://www.raspberrypi.com/documentation/computers/getting-started.html)*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，我将描述如何设置我的树莓派，以便进行本书中描述的所有编程。如果你正在设置树莓派，我还建议你阅读树莓派文档中的“设置你的树莓派”一节，网址是*[https://www.raspberrypi.com/documentation/computers/getting-started.html](https://www.raspberrypi.com/documentation/computers/getting-started.html)*。
- en: I’m using the officially supported operating system, Raspberry Pi OS, which
    is based on the Debian distribution of Linux. You must use the 64-bit version
    for the programming in this book; the 32-bit version will not work. Other operating
    systems available for the Raspberry Pi may not support the programming we’ll be
    doing.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用的是官方支持的操作系统——树莓派操作系统（Raspberry Pi OS），它基于 Debian Linux 发行版。你必须使用 64 位版本来进行本书中的编程，32
    位版本将无法使用。其他可用于树莓派的操作系统可能不支持我们将要进行的编程。
- en: Instead of a hard drive or solid-state drive, the Raspberry Pi uses a micro
    SD card for secondary storage. I used Raspberry Pi Imager to set up my micro SD
    card (it’s available at *[https://www.raspberrypi.com/software/](https://www.raspberrypi.com/software/)*,
    with a short video showing how this is done). When you run Raspberry Pi Imager,
    select **Raspberry Pi OS (other)** and then **Raspberry Pi OS Full (64-bit)**.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派（Raspberry Pi）使用的是 micro SD 卡作为辅助存储，而不是硬盘或固态硬盘。我使用了树莓派映像器（Raspberry Pi Imager）来设置我的
    micro SD 卡（可以在*[https://www.raspberrypi.com/software/](https://www.raspberrypi.com/software/)*
    下载，并附有简短的视频教程）。运行树莓派映像器时，选择**Raspberry Pi OS (其他)**，然后选择**Raspberry Pi OS 完整版（64位）**。
- en: The full version includes software tools you’ll need for the programming in
    this book. You should use the latest version and keep your system updated. This
    might install newer versions of the software development tools than are available
    at the time of writing this book. You may see some differences from the code listings
    in the book, but any variations should be small.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 完整版本包括你进行本书编程所需的软件工具。你应当使用最新版本，并保持系统更新。这可能会安装比本书编写时可用的版本更新的软件开发工具。你可能会看到与书中的代码列表略有不同，但任何差异应该很小。
- en: Raspberry Pi OS uses the `bash` shell program to accept keyboard commands and
    pass them to the operating system. If you’re new to the command line, I’ll show
    you the basic commands you need as we go through the book. You’ll be much more
    productive if you take the time to become familiar with using the command line.
    To learn more, I recommend William Shotts’s *The Linux Command Line*, 2nd edition
    (No Starch Press, 2019).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi OS 使用 `bash` shell 程序来接受键盘命令并将其传递给操作系统。如果你对命令行不熟悉，随着本书的进行，我会向你展示你需要的基本命令。如果你花时间熟悉命令行的使用，你将更加高效。欲了解更多内容，我推荐
    William Shotts 的 *The Linux Command Line*，第二版（No Starch Press，2019）。
- en: You should also become familiar with the documentation provided in Linux for
    the programming tools we’ll be using. The simplest is the help system built into
    most programs. You access help by typing the name of the program with only the
    `--help` option. For example, `gcc --help` brings up a list of the command line
    options you can use with `gcc`, with a brief description of what each does.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该熟悉 Linux 为我们将要使用的编程工具提供的文档。最简单的是大多数程序内置的帮助系统。你可以通过输入程序名称并仅使用 `--help` 选项来访问帮助。例如，`gcc
    --help` 会列出你可以与 `gcc` 一起使用的命令行选项，并简要描述每个选项的功能。
- en: Most Linux programs include a manual, usually called a *man page*, that provides
    more complete documentation than the help facility. You can read it by using the
    `man` command followed by the name of the program. For example, `man man` brings
    up the man page for the `man` program.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Linux 程序都包含手册，通常称为 *man 页*，它提供比帮助功能更完整的文档。你可以通过使用 `man` 命令并跟随程序名称来查看。例如，`man
    man` 会显示 `man` 程序的 man 页。
- en: 'GNU programs come with even more complete documentation that can be read with
    the `info` program. You can install the Raspberry Pi OS `info` package on your
    system with the following command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: GNU 程序附带更完整的文档，可以使用`info`程序进行阅读。你可以通过以下命令在你的系统上安装 Raspberry Pi OS `info` 包：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once it’s installed, you can read about `info` with the following command,
    which generates the output shown:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你可以通过以下命令查看有关 `info` 的信息，命令将生成如下所示的输出：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Items beginning with `*` and ending with `::` are hyperlinks to other pages
    in the manual. Use the arrow keys on your keyboard to put the cursor any place
    within such an item and press ENTER to bring up that page.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以`*`开头并以`::`结尾的项目是指向手册中其他页面的超链接。你可以使用键盘上的箭头键将光标放置在这些项目的任何位置，然后按下 ENTER 键以打开该页面。
- en: 'I had to install the following Raspberry Pi OS packages to get the `info` documentation
    for the programming tools we’ll be using:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得我们将要使用的编程工具的`info`文档，我需要安装以下 Raspberry Pi OS 包：
- en: binutils-doc   This adds useful documentation for the GNU assembler `as` (sometimes
    called `gas`).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: binutils-doc   这为 GNU 汇编器 `as`（有时称为 `gas`）添加了有用的文档。
- en: gcc-doc   This adds useful documentation for the GNU `gcc` compiler.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: gcc-doc   这为 GNU `gcc` 编译器添加了有用的文档。
- en: The packages you need to get these features may differ depending on the version
    of the operating system you are using.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要的这些功能的包可能会根据你使用的操作系统版本有所不同。
- en: In most cases, I’ve compiled the programs with no optimization (the `-O0` option)
    because the goal is to study concepts, not to create the most efficient code.
    The examples should work with most versions of `gcc`, `g++`, and `as` that are
    installed with Raspberry Pi OS. However, the machine code generated by the compiler
    may differ, depending on its specific configuration and version. You will begin
    seeing compiler-generated assembly language about halfway through the book. Any
    differences should be consistent as you continue through the rest of the book.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，我编译程序时没有进行优化（使用了`-O0`选项），因为目标是学习概念，而不是创建最高效的代码。这些示例应适用于安装了 Raspberry
    Pi OS 的大多数版本的 `gcc`、`g++` 和 `as`。然而，编译器生成的机器代码可能会有所不同，具体取决于编译器的配置和版本。在本书进行到一半时，你将开始看到编译器生成的汇编语言。任何差异应在接下来的章节中保持一致。
- en: You will need to use a text editor for your programming. Do not use a word processor.
    Word processors add a lot of hidden control characters to format the text. These
    hidden characters confuse compilers and assemblers, causing them to not work.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要使用文本编辑器进行编程，而不是使用文字处理软件。文字处理软件会在文本中添加许多隐藏的控制字符来格式化文本。这些隐藏字符会干扰编译器和汇编器，导致它们无法正常工作。
- en: 'Several excellent text editors exist for the Raspberry Pi, each with its own
    personality. I recommend trying several and deciding which one you prefer. A few
    options are preinstalled with Raspberry Pi OS. If you right-click a text file,
    you will get your choice of the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi 上有几款优秀的文本编辑器，每款编辑器都有自己的特色。我建议你尝试几款，并决定你最喜欢哪一款。Raspberry Pi OS 预装了一些选项。如果你右键点击一个文本文件，你可以选择以下编辑器之一：
- en: '**Geany**   This is the default editor for programming. It opens if you simply
    double-click a source code file. The Geany editor provides many useful features
    in an integrated development environment (IDE).'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**Geany**  这是默认的编程编辑器。你只需双击一个源代码文件，它就会自动打开。Geany 编辑器在集成开发环境（IDE）中提供了许多有用的功能。'
- en: '**Text Editor**   The actual editor is Mousepad. It’s a very minimal editor
    lacking many features that are useful for writing program code.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**文本编辑器**  实际的编辑器是 Mousepad。这是一个非常简洁的编辑器，缺少许多对编写程序代码有用的功能。'
- en: '**Vim**   The Vim editor is an improved version of the Vi editor, which was
    created for Unix in 1976\. It provides a command line user interface that is mode-oriented.
    Text is manipulated through keyboard commands. Several commands place Vim in “text
    insert” mode. The ESC key is used to return to command mode.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**Vim**  Vim 编辑器是 Vi 编辑器的改进版，Vi 编辑器是为 1976 年的 Unix 系统创建的。它提供了一种面向模式的命令行用户界面。文本通过键盘命令进行操作。若干命令将
    Vim 切换到“文本插入”模式。按 ESC 键可以返回到命令模式。'
- en: Raspberry Pi OS also comes with the Thonny IDE preinstalled. The tools it includes
    are intended primarily for Python programming.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi OS 还预装了 Thonny IDE。它所包含的工具主要用于 Python 编程。
- en: 'Another popular editor is Emacs. You can install it on your Raspberry Pi with
    the following command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个流行的编辑器是 Emacs。你可以使用以下命令在 Raspberry Pi 上安装它：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can use Emacs from the command line or through a graphical user interface.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过命令行或图形用户界面使用 Emacs。
- en: 'My favorite editor is Visual Studio Code (VS Code). VS Code is free and available
    for all common platforms; you can learn more about it at *[https://code.visualstudio.com](https://code.visualstudio.com)*.
    It’s also in the Raspberry Pi OS package repositories and can be installed with
    the following command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我最喜欢的编辑器是 Visual Studio Code（VS Code）。VS Code 是免费的，适用于所有常见平台；你可以在 *[https://code.visualstudio.com](https://code.visualstudio.com)*
    了解更多信息。它也包含在 Raspberry Pi OS 的软件包库中，可以通过以下命令进行安装：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When installed, it shows up as Visual Studio Code when you right-click a text
    file. VS Code uses a graphic user interface for editing. It also allows you to
    open a terminal window to use the command line.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，右键点击一个文本文件时会显示 Visual Studio Code。VS Code 使用图形用户界面进行编辑，同时允许你打开终端窗口使用命令行。
- en: 'The names of the programs mentioned here are `geany`, `mousepad`, `vim`, `thonny`,
    `emacs`, and `code`. To launch any of these editors from the command line, give
    the name of the program followed by the name of the file you wish to open. For
    example, you can use VS Code to create the Python program in “Your Turn” [exercise
    1.1](ch01.xhtml#ch1exe1) with the following command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这里提到的程序名称包括 `geany`、`mousepad`、`vim`、`thonny`、`emacs` 和 `code`。要通过命令行启动这些编辑器中的任何一个，输入程序名称后跟你想要打开的文件名。例如，你可以使用
    VS Code 创建“轮到你了”[练习 1.1](ch01.xhtml#ch1exe1)中的 Python 程序，命令如下：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If the file *hello_world.py* does not yet exist, VS Code will create it when
    you save your work. If the file does exist, VS Code will open it for you to work
    on.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件 *hello_world.py* 尚不存在，VS Code 在你保存工作时会创建它。如果文件已经存在，VS Code 会打开它供你继续编辑。
- en: I installed VS Code on my Windows 11 laptop. It allows me to log on to my Raspberry
    Pi, do all my editing in the editing panel, and open a terminal panel for compiling
    and executing my programs. You don’t need to install VS Code on your Raspberry
    Pi for this.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我在我的 Windows 11 笔记本上安装了 VS Code。它允许我登录到我的 Raspberry Pi，在编辑面板中完成所有编辑工作，并打开终端面板来编译和执行我的程序。你不需要在
    Raspberry Pi 上安装 VS Code。
- en: Geany, Vim, and VS Code are all good choices for the programming covered in
    this book. If you’re already comfortable with a text editor on the Raspberry Pi,
    I recommend sticking with that. Don’t spend too much time trying to pick the “best”
    one.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Geany、Vim 和 VS Code 都是本书中涉及的编程的不错选择。如果你已经习惯使用 Raspberry Pi 上的某个文本编辑器，我建议你继续使用它。不要花太多时间去选择“最佳”编辑器。
- en: '**YOUR TURN**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**轮到你了**'
- en: 1.1     Make sure that you understand the Raspberry Pi you’ll be using for the
    programming in this book. What CPU does it use? How much memory does it have?
    What are the I/O devices connected to it? Which editor will you be using?
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 1.1    确保你了解本书中将使用的树莓派。它使用什么 CPU？它有多少内存？有哪些 I/O 设备连接到它？你将使用哪个编辑器？
- en: '1.2     Create the following Python program in a file named *hello_world.py*
    and execute it:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 1.2    在一个名为 *hello_world.py* 的文件中创建以下 Python 程序并执行它：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What files were created in this exercise?
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中创建了哪些文件？
- en: '1.3     Write the following C program in a file named *hello_world.c*, then
    compile and execute it:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 1.3    在一个名为 *hello_world.c* 的文件中编写以下 C 程序，然后编译并执行它：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: What files were created in this exercise?
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中创建了哪些文件？
- en: '**What You’ve Learned**'
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: '**Central processing unit (CPU)**  The subsystem that controls most of the
    activities of the computer. It also contains a small amount of very fast memory.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**中央处理单元（CPU）**  控制计算机大多数活动的子系统。它还包含少量非常快速的内存。'
- en: '**Memory**   The subsystem that provides storage for programs and data.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**内存**  提供程序和数据存储的子系统。'
- en: '**Input/output (I/O)**   The subsystem that provides a means of communication
    with the outside world and with mass storage devices.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入/输出（I/O）**  提供与外部世界和大容量存储设备通信的子系统。'
- en: '**Bus**   A communication pathway between the CPU, memory, and I/O.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**总线**  CPU、内存和 I/O 之间的通信通道。'
- en: '**Program execution**   An overview of how the three subsystems and the buses
    are used when a program is run.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**程序执行**  了解在程序运行时，三个子系统和总线是如何使用的概况。'
- en: '**Programming environment**   An example of how to set up the tools needed
    to do the programming in this book.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**编程环境**  设置进行本书编程所需工具的示例。'
- en: In the next chapter, you will start learning how data is stored in a computer,
    get an introduction to programming in C, and start learning how to use the debugger
    as a learning tool.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将开始学习数据如何存储在计算机中，了解 C 语言编程，并开始学习如何将调试器作为学习工具使用。
