- en: '13'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '13'
- en: 'MIRROR, MIRROR: THE SOCIAL MEDIA STATUS MIRROR'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 镜子，镜子：社交媒体状态镜
- en: IN THIS CHAPTER, YOU’LL CREATE A SOCIAL MEDIA STATUS MIRROR, A MODERN-DAY TWIST
    ON THE CLASSIC “MIRROR, MIRROR ON THE WALL” FROM THE *SNOW WHITE* FAIRYTALE. IMAGINE
    THAT YOU’RE GETTING READY TO GO OUT AND WANT TO KNOW WHAT YOUR FRIENDS ARE POSTING
    ONLINE. OR MAYBE YOUR FAVORITE TEAM IS PLAYING, AND YOU WANT TO FOLLOW ALL THE
    ACTION WHILE YOU GET READY IN THE MORNING.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你将创建一个社交媒体状态镜，这是经典童话《白雪公主》中“镜子，镜子，墙上的镜子”的现代版。想象一下，你正准备外出，想知道朋友们在网上发布了什么。或者，也许你最喜欢的队伍正在比赛，而你希望在早晨准备的时候随时了解比赛动态。
- en: The social media status mirror can help in either situation. All you have to
    do is enter a keyword in the Python program. Then, whenever a tweet containing
    the keyword appears in your social media timeline, an array of LEDs will flash
    several times before the mirror reads you the tweet. The LEDs inform you of incoming
    messages. If you set your personal Twitter handle as the keyword, the mirror will
    read out any tweet that mentions you and tell you the name of the user who wrote
    the tweet.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 社交媒体状态镜可以帮助解决这两种情况。你只需在 Python 程序中输入一个关键词。然后，每当包含该关键词的推文出现在你的社交媒体时间线上时，一排 LED
    灯将闪烁几次，随后镜子会读出这条推文。LED 灯会提醒你有新消息。如果你将个人的 Twitter 账号作为关键词，镜子会读出任何提到你的推文，并告诉你是谁发的推文。
- en: You can customize the project by choosing a colored set of LEDs or even animal-,
    car-, or fruit-shaped LEDs. Or, instead of attaching the LEDs to a mirror, as
    shown in [Figure 13-1](ch13.xhtml#ch13fig01), you could attach them to a picture,
    notice board, bookcase, or window frame. I recommend using the Raspberry Pi Zero
    for this project, because it’s small and discreet, making it easy to hide. It
    also has built-in Wi-Fi, which you’ll need to stream data from your Twitter account.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过选择一套彩色 LED 灯，甚至是动物、汽车或水果形状的 LED 来定制这个项目。或者，你可以选择不将 LED 灯安装在镜子上，正如[图 13-1](ch13.xhtml#ch13fig01)所示，而是将它们安装在图片、公告板、书架或窗框上。我推荐使用
    Raspberry Pi Zero 来做这个项目，因为它小巧而隐蔽，易于隐藏。它还内置了 Wi-Fi，这是你从 Twitter 账户流式传输数据所必需的。
- en: '![Image](../images/13fig01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig01.jpg)'
- en: '**FIGURE 13-1** Create your social media status mirror.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 13-1** 创建你的社交媒体状态镜。'
- en: WHAT YOU’LL NEED
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你需要的材料
- en: 'Here are a few items you’ll need to complete the project:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是完成该项目所需的一些物品：
- en: Raspberry Pi Zero W (recommended)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raspberry Pi Zero W（推荐）
- en: Set of battery-powered LEDs (3.3V maximum)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一套电池供电的 LED 灯（最大 3.3V）
- en: Twitter account
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twitter 账号
- en: Speaker
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扬声器
- en: USB battery
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB 电池
- en: Jumper wires
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线
- en: NPN (Negative-Positive-Negative) transistor (a 2N 2222)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NPN（三极管：负-正-负，型号 2N 2222）
- en: 1K ohm resistor
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1K 欧姆电阻
- en: Soldering iron and solder, or alligator clips, or aluminum foil
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 焊接铁和焊锡，或鳄鱼夹，或铝箔
- en: Mirror (or any other object you want to attach the lights to)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 镜子（或你想安装灯光的任何物品）
- en: Small breadboard (optional)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小面包板（可选）
- en: You’ll need to think about the type of speaker you’ll use. You could use a simple
    portable speaker with the standard audio jack and cable. But then you can’t use
    the Raspberry Pi Zero, although that’s not an issue unless you have a small mirror
    that can’t mount a larger Pi board. Another option is to use a Bluetooth-enabled
    speaker, similar to the setup in [Chapter 10](ch10.xhtml#ch10). The Pi Zero W
    is Bluetooth enabled, which means you can stream audio directly to a speaker.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要考虑使用哪种类型的扬声器。你可以使用一个简单的便携式扬声器，配有标准音频插孔和电缆。但这样你就不能使用 Raspberry Pi Zero，除非你有一个小型镜子，无法安装较大的
    Pi 板。另一个选择是使用支持蓝牙的扬声器，就像[第 10 章](ch10.xhtml#ch10)中的设置一样。Pi Zero W 支持蓝牙，这意味着你可以直接将音频流式传输到扬声器。
- en: PREPARING THE EQUIPMENT
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备设备
- en: This project has a few parts, so before you start coding it, you’ll set up your
    speaker, teach the Raspberry Pi to read text out loud via the speaker, wire the
    status LEDs, and connect your Pi to Twitter.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目有几个部分，所以在开始编写代码之前，你需要设置扬声器，教 Raspberry Pi 通过扬声器朗读文本，连接状态 LED 灯，并将你的 Pi 连接到
    Twitter。
- en: Connecting the Speaker
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 连接扬声器
- en: To connect a speaker to the project, you have two options. If you’re *not* using
    the Pi Zero, you can use the built-in audio jack. Connect your speaker via a standard
    3.5 mm jack cable to the back headphone jack on the Raspberry Pi, which is located
    next to the HDMI port. Plug in your Raspberry Pi and boot it up; then return to
    the desktop. Locate the audio icon at the top of the desktop and right-click it.
    Select **Analog** from the audio output drop-down menu. Now all audio will be
    played through your speaker.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要将扬声器连接到项目中，你有两个选择。如果你*没有*使用 Pi Zero，你可以使用内置的音频插孔。通过标准的 3.5 毫米插孔电缆，将扬声器连接到 Raspberry
    Pi 后面的耳机插孔，该插孔位于 HDMI 端口旁边。插入你的 Raspberry Pi 并启动它；然后返回桌面。找到桌面顶部的音频图标并右键点击它。从音频输出下拉菜单中选择
    **模拟**。现在所有音频将通过你的扬声器播放。
- en: If you’re using a Bluetooth speaker, turn on the Bluetooth software on your
    Pi by clicking the Bluetooth icon at the top right of the screen. Then turn on
    your Bluetooth speaker. Click the Bluetooth icon again, and select **Add a Device**
    from the drop-down menu. The Raspberry Pi will attempt to locate all Bluetooth-enabled
    devices, including your speaker. Make sure you enable the Bluetooth settings on
    your speaker to make it discoverable.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是蓝牙扬声器，通过点击屏幕右上角的蓝牙图标打开 Pi 上的蓝牙软件。然后打开蓝牙扬声器。再次点击蓝牙图标，从下拉菜单中选择 **添加设备**。Raspberry
    Pi 将尝试查找所有启用蓝牙的设备，包括你的扬声器。确保在扬声器上启用蓝牙设置，使其可以被发现。
- en: When found, the speaker will appear in the pop-up window. Select it from the
    list and click **Pair** to establish a connection between your Raspberry Pi and
    the Bluetooth speaker.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当找到扬声器时，它将在弹出窗口中显示。从列表中选择它并点击 **配对**，以建立 Raspberry Pi 和蓝牙扬声器之间的连接。
- en: Once the connection is confirmed, click the audio icon and select your Bluetooth
    speaker from the drop-down menu. The two devices will attempt to pair and establish
    a connection again. Once the speaker has been set up, your Raspberry Pi should
    always automatically locate and connect to this speaker.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦连接确认，点击音频图标并从下拉菜单中选择你的蓝牙扬声器。两个设备将再次尝试配对并建立连接。一旦扬声器设置完成，你的 Raspberry Pi 应该会自动查找并连接到此扬声器。
- en: Teaching the Pi to Read Text Out Loud
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 教授 Pi 朗读文本
- en: For the Raspberry Pi to read your tweets aloud, you need to create a text-to-speech
    program. This program converts written text into audio and then plays it. You
    can use the program to read any type of text, including text messages, emails,
    or weather updates. So you could easily adapt this project to read other information
    to you as you get ready!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要让 Raspberry Pi 朗读你的推文，你需要创建一个文本转语音程序。这个程序将书面文字转换为音频并播放。你可以使用该程序朗读任何类型的文本，包括短信、电子邮件或天气更新。所以，当你准备好时，你可以轻松调整这个项目，让它朗读其他信息给你听！
- en: 'Open the terminal window and install `espeak` by entering the following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端窗口并通过输入以下命令安装 `espeak`：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then open Python and start a new program. Enter the following code and save
    it as *espeak_test.py*:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后打开 Python 并开始一个新程序。输入以下代码并将其保存为 *espeak_test.py*：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Be sure to replace the message between the quotation marks with your own message.
    Save the program and run it. You should now have a talking Raspberry Pi—well,
    a Raspberry Pi with a text-to-speech program. Experiment and add your own messages.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将引号中的消息替换为你自己的消息。保存程序并运行它。你现在应该拥有一个会说话的 Raspberry Pi——好吧，一个带有文本转语音程序的 Raspberry
    Pi。进行实验并添加你自己的消息。
- en: Preparing the LEDs
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 准备 LED 灯
- en: Now you’ll set up the LEDs and write a program to control them. Your set of
    battery-powered LEDs should be in a loop with the battery pack attached, as shown
    in [Figure 13-2](ch13.xhtml#ch13fig02). The LEDs will be powered by the battery
    pack, and you will use the Raspberry Pi as a switch that will open and close the
    circuit, turning the LEDs off and on. Ensure that the batteries you use provide
    no more than 3V, which is two AA or AAA batteries.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将设置 LED 并编写一个程序来控制它们。你的电池供电 LED 应该与电池包一起循环使用，如 [图 13-2](ch13.xhtml#ch13fig02)
    所示。LED 将由电池包供电，而你将使用 Raspberry Pi 作为开关，打开和关闭电路，控制 LED 的开关。确保你使用的电池提供的电压不超过 3V，这相当于两节
    AA 或 AAA 电池。
- en: '![Image](../images/13fig02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig02.jpg)'
- en: '**FIGURE 13-2** Battery-powered LEDs'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 13-2** 电池供电 LED'
- en: To prepare the battery-powered LEDs, use a pair of scissors to cut through the
    ground wire. You can identify the ground wire by tracing the wires back to the
    battery pack and finding the wire connected to the negative terminal (the one
    where the flat side of the battery fits), as shown in [Figure 13-3](ch13.xhtml#ch13fig03).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备电池供电的 LED，使用剪刀剪断接地线。你可以通过追溯电线回到电池包，找到连接到负极端子（即电池平面一侧的连接处）的电线，从而识别接地线，如[图
    13-3](ch13.xhtml#ch13fig03)所示。
- en: '![Image](../images/13fig03.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig03.jpg)'
- en: '**FIGURE 13-3** Finding the ground wire'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 13-3** 找到接地线'
- en: Leave a couple of inches of wire still attached to the battery pack. Strip the
    insulation from both of the ends so a little of the wire is exposed.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 留下几英寸的电线仍然连接在电池包上。剥去两端的绝缘层，使电线的一部分裸露出来。
- en: Using a single female-to-male jumper wire, attach or solder one of the female
    ends to one of the ends of the stripped wire. Attach a second female-to-male jumper
    wire to the end of the other stripped wire. The battery pack should look something
    like [Figure 13-4](ch13.xhtml#ch13fig04).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一根单独的母对公跳线，将其中一端的母头连接或焊接到剥线的一端。将第二根母对公跳线连接到另一根剥线的末端。电池包的外观应该类似于[图 13-4](ch13.xhtml#ch13fig04)。
- en: '![Image](../images/13fig04.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig04.jpg)'
- en: '**FIGURE 13-4** Attach one jumper wire to each of the wire ends that have been
    cut.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 13-4** 将一根跳线连接到每根被剪断的线的末端。'
- en: '**NOTE**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you don’t have access to a soldering iron, you can attach an alligator
    clip to the end of the wire and then clamp the other end onto the jumper wire.
    Or, you can wrap the ends of the wires in aluminum foil.*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你没有焊接工具，可以将鳄鱼夹夹到电线的一端，然后将另一端夹在跳线的末端。或者，你也可以用铝箔包裹电线的两端。*'
- en: Using the NPN Transistor
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 NPN 晶体管
- en: 'The NPN transistor acts as a switch to cut the current from the batteries to
    the LEDs. Without the transistor, the LEDs will still receive some current from
    the battery pack, which means that the LEDs will glow slightly even when they
    are supposed to be off. The NPN transistor has three legs: the *emitter* on the
    left, the *base* in the middle, and the *collector* on the right. [Figure 13-5](ch13.xhtml#ch13fig05)
    shows the transistor from the front, which is its flat side.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: NPN 晶体管充当开关，用于切断电池到 LED 的电流。如果没有晶体管，LED 仍然会从电池包接收到一些电流，这意味着即使 LED 应该关闭时，它们也会微弱地发光。NPN
    晶体管有三个引脚：*发射极*在左侧，*基极*在中间，*集电极*在右侧。[图 13-5](ch13.xhtml#ch13fig05)显示的是晶体管的正面，即其平面侧。
- en: '![Image](../images/13fig05.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig05.jpg)'
- en: '**FIGURE 13-5** NPN transistor'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 13-5** NPN 晶体管'
- en: To set up the circuit, you’ll connect the ground wire from the batteries to
    the emitter and then connect the other part of the ground wire (which you created
    by cutting the ground wire in half) to the collector. You’ll use the Raspberry
    Pi GPIO to turn on the base, allowing you to flip the switch in the transistor
    and turn the LEDs on and off.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置电路，你需要将电池的接地线连接到发射极，然后将接地线的另一部分（通过剪断接地线获得的）连接到集电极。你将使用树莓派 GPIO 来打开基极，从而翻转晶体管中的开关，实现
    LED 的开关控制。
- en: Preparing the Circuit
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 准备电路
- en: Attach the two ends of the jumper wires to the NPN by connecting the left wire
    to the left emitter leg of the NPN transistor and the right wire to the right
    collector leg of the NPN transistor ([Figure 13-6](ch13.xhtml#ch13fig06)). The
    NPN transistor acts as a switch by controlling the current that passes through
    the circuit. By stopping the current flow, the NPN transistor breaks the circuit,
    so the current from the battery pack can’t reach the LEDs and they go out, as
    though you turned them off. Attach the 1K ohm resistor to the middle base leg
    of the transistor. You need the resistor to avoid damaging the Raspberry Pi GPIO
    pin when the transistor is operating.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 将跳线的两端连接到 NPN 晶体管，通过将左侧的跳线连接到 NPN 晶体管的左侧发射极引脚，将右侧的跳线连接到 NPN 晶体管的右侧集电极引脚（[图 13-6](ch13.xhtml#ch13fig06)）。NPN
    晶体管通过控制电路中通过的电流来充当开关。通过停止电流流动，NPN 晶体管切断了电路，使得来自电池包的电流无法到达 LED，因此 LED 熄灭，就像你把它们关掉了一样。将
    1K 欧姆电阻连接到晶体管的中间基极引脚。需要这个电阻以避免在晶体管工作时损坏树莓派的 GPIO 引脚。
- en: '![Image](../images/13fig06.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig06.jpg)'
- en: '**FIGURE 13-6** Setting up the circuit'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 13-6** 设置电路'
- en: Use a female-to-female wire to connect the other end of the resistor to pin
    GPIO 3, which is the pin that provides the current to close the circuit. Then
    use a male-to-female wire to connect the left emitter leg of the transistor to
    a ground pin on the Raspberry Pi. Conveniently, there is one directly to the right
    of GPIO 3, physical pin 6.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一根女性到女性的电缆将电阻的另一端连接到GPIO 3针脚，这是提供电流以关闭电路的针脚。然后，使用一根男性到女性的电缆将晶体管的左侧发射极引脚连接到树莓派的地面针脚。方便的是，GPIO
    3的右侧紧挨着有一个地面针脚，即物理针脚6。
- en: Testing the LEDs
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试LED
- en: Open your Python editor and enter the test program in [Listing 13-1](ch13.xhtml#ch13ex01).
    This code is similar to the program you used in [Chapter 3](ch03.xhtml#ch03) when
    creating the hot glue night-light. It tells the program which GPIO pin the wire
    is attached to and then turns on that pin. This creates a circuit via the GND
    pin, allowing the batteries to power the LEDs.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的Python编辑器并输入[清单 13-1](ch13.xhtml#ch13ex01)中的测试程序。这个代码与[第3章](ch03.xhtml#ch03)中创建热熔胶夜灯时使用的程序相似。它告诉程序哪一个GPIO针脚连接了电线，然后打开该针脚。这通过GND针脚创建一个电路，允许电池为LED供电。
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**LISTING 13-1** Creating a circuit to light the LEDs'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 13-1** 创建一个电路来点亮LED'
- en: 'Save and run the program, and turn on the battery pack. The LEDs on the wire
    will flash on and then off once per second. If the lights stay on permanently,
    swap the two wires: attach the GPIO 3 wire to a GND pin and the GND wire to GPIO
    3.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并运行程序，然后打开电池组。电线上的LED灯会每秒闪烁一次。如果灯光一直亮着不灭，交换两根电缆：将GPIO 3线连接到GND针脚，将GND线连接到GPIO
    3。
- en: Once you’ve gotten the LEDs to work properly, you’re ready to begin creating
    your social media status mirror. But don’t attach the LEDs to your mirror, picture,
    or shelf yet. Instead, you’ll test the project by using your monitor to observe
    the tweets streaming in and the actions the program takes in response.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你使LED正常工作，你就可以开始创建你的社交媒体状态镜子了。但不要急于将LED附着到镜子、照片或架子上。相反，你将通过使用显示器来观察推文流和程序对其做出的反应。
- en: SETTING UP YOUR TWITTER DEVELOPER ACCOUNT
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置你的Twitter开发者账户
- en: To access Twitter from your Raspberry Pi with Python, you’ll need to sign up
    and register for a developer account and then create an app. Then you can generate
    unique keys and tokens, which you’ll use in your program code to authorize communication
    between your Raspberry Pi and Twitter. These keys and tokens identify you as a
    user, enabling you to stream your timeline and post tweets by using Python code.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过Python从树莓派访问Twitter，你需要注册一个开发者账户并创建一个应用程序。然后，你可以生成唯一的密钥和令牌，在程序代码中使用它们来授权树莓派和Twitter之间的通信。这些密钥和令牌将你识别为用户，从而允许你通过Python代码流式传输你的时间线并发布推文。
- en: First, make sure you have a working Twitter account. You can use an existing
    account, but if you don’t have an account, sign up for one at [*https://www.twitter.com/*](https://www.twitter.com/).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确保你有一个有效的Twitter账户。你可以使用现有账户，但如果没有账户，可以在[*https://www.twitter.com/*](https://www.twitter.com/)上注册。
- en: Once you’ve set up your account, head over to [*https://developer.twitter.com/*](https://developer.twitter.com/)
    and click **Apply** at the top right of the page ([Figure 13-7](ch13.xhtml#ch13fig07)).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好账户后，访问[*https://developer.twitter.com/*](https://developer.twitter.com/)并点击页面右上角的**申请**按钮（[图
    13-7](ch13.xhtml#ch13fig07)）。
- en: '![Image](../images/13fig07.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig07.jpg)'
- en: '**FIGURE 13-7** The Twitter Developer website'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 13-7** Twitter开发者网站'
- en: 'You should then be presented with a page containing a number of APIs: these
    are a selection of programming codes and functions that enable you to interact
    with Twitter.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你将看到一个包含多个API的页面：这些是用于与Twitter交互的编程代码和功能的集合。
- en: Choose **Standard APIs** and click **Apply for a developer account** ([Figure
    13-8](ch13.xhtml#ch13fig08)). This account is free and perfect for the mirror
    hack requirements. You’ll be asked to enter your Twitter username and password
    to create an account. If already have a developer account and are returning to
    create your own version of the hack, you can click **Sign in** instead.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**标准API**并点击**申请开发者账户**（[图 13-8](ch13.xhtml#ch13fig08)）。这个账户是免费的，非常适合镜像黑客的要求。你将被要求输入你的Twitter用户名和密码以创建账户。如果你已经有了开发者账户并且回来创建你自己的黑客版本，可以点击**登录**。
- en: '![Image](../images/13fig08.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig08.jpg)'
- en: '**FIGURE 13-8** Select the **Standard APIs** option.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 13-8** 选择**标准API**选项。'
- en: Next, you’ll begin the process of validating your developer account. The first
    stage requires you to enter a valid mobile phone number. This is purely a security
    feature so Twitter can send you confirmation texts to authorize the account. Click
    **Add a valid phone number** ([Figure 13-9](ch13.xhtml#ch13fig09)).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将开始验证您的开发者账户。第一步要求您输入一个有效的手机号码。这纯粹是一个安全功能，以便 Twitter 可以向您发送确认短信来授权账户。点击**添加有效的手机号码**（[图
    13-9](ch13.xhtml#ch13fig09)）。
- en: '![Image](../images/13fig09.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig09.jpg)'
- en: '**FIGURE 13-9** Add a valid phone number.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 13-9** 添加有效的手机号码。'
- en: Enter the appropriate details for your region, enter your phone number, and
    click **Next** ([Figure 13-10](ch13.xhtml#ch13fig10)). A verification code should
    be sent to your phone via a text message.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 输入适合您所在地区的详细信息，输入您的电话号码，然后点击**下一步**（[图 13-10](ch13.xhtml#ch13fig10)）。一个验证代码将通过短信发送到您的手机。
- en: '![Image](../images/13fig10.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig10.jpg)'
- en: '**FIGURE 13-10** Enter your details.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 13-10** 输入您的详细信息。'
- en: When you receive the text, open it. Then enter the confirmation code into the
    verification phone number window shown in [Figure 13-11](ch13.xhtml#ch13fig11),
    and click **Verify**.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当您收到短信时，请打开它。然后将确认码输入到[图 13-11](ch13.xhtml#ch13fig11)中显示的验证手机号窗口，并点击**验证**。
- en: '![Image](../images/13fig11.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig11.jpg)'
- en: '**FIGURE 13-11** Enter the code that you receive on your phone.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 13-11** 输入您在手机上收到的代码。'
- en: On completion, you should see a message stating your phone number is now verified
    ([Figure 13-12](ch13.xhtml#ch13fig12)). Click **Continue**.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您应该看到一条消息，说明您的电话号码已成功验证（[图 13-12](ch13.xhtml#ch13fig12)）。点击**继续**。
- en: '![Image](../images/13fig12.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig12.jpg)'
- en: '**FIGURE 13-12** Twitter verifies your phone number.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 13-12** Twitter 验证您的电话号码。'
- en: 'The second stage of the verification asks you to select whom you’re requesting
    access for ([Figure 13-13](ch13.xhtml#ch13fig13)): select the second option, **I
    am requesting access for my own personal use**. Then add a name for your account,
    which will be your developer account’s username. You can use your own name—for
    example, Dan’s Twitter—or use your Twitter account name. Select your primary country
    of operation, which must be where you’re located and where you’re running your
    mirror hack. Then click **Continue**.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 验证的第二步要求您选择请求访问的对象（[图 13-13](ch13.xhtml#ch13fig13)）：选择第二个选项，**我为个人使用请求访问**。然后为您的账户添加一个名称，这将是您的开发者账户的用户名。您可以使用自己的名字——例如，Dan
    的 Twitter——或者使用您的 Twitter 账户名。选择您的主要运营国家/地区，这必须是您所在的位置以及运行镜像黑客的地方。然后点击**继续**。
- en: '![Image](../images/13fig13.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig13.jpg)'
- en: '**FIGURE 13-13** Name your developer account.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 13-13** 为您的开发者账户命名。'
- en: In the third stage, Twitter will request information about the use of your project.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三阶段，Twitter 将要求提供有关您项目使用的信息。
- en: In the first *What use case(s) are you interested in?* question ([Figure 13-14](ch13.xhtml#ch13fig14)),
    select **Chatbots and automation**.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个*您感兴趣的用例是什么？*问题中（[图 13-14](ch13.xhtml#ch13fig14)），选择**聊天机器人和自动化**。
- en: '![Image](../images/13fig14.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig14.jpg)'
- en: '**FIGURE 13-14** Select the areas you’re interested in.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 13-14** 选择您感兴趣的领域。'
- en: 'You should then be prompted to answer further questions about the purpose of
    what you’re building. Here are the four questions you need to answer:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将被提示回答更多关于您正在构建的内容目的的问题。以下是您需要回答的四个问题：
- en: What are you using the Twitter API for?
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您使用 Twitter API的目的是什么？
- en: Do you intend to analyze tweets?
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您打算分析推文吗？
- en: Would you like to retweet content?
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您希望转发内容吗？
- en: How will the data be displayed?
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据将如何显示？
- en: The web page displays a simple guide that includes advice and some example responses,
    which you can use to create your own answers.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 网页显示了一个简单的指南，其中包括一些建议和示例回答，您可以用它们来创建自己的回答。
- en: You need to write at least 300 characters when answering these questions. This
    sounds like a lot, but if you use the model responses, it’s easy to achieve the
    required number. A useful reminder is displayed in red under the box that disappears
    when you’ve written the total number of required characters.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 回答这些问题时，您需要写至少 300 个字符。这听起来很多，但如果使用模型回答，就很容易达到所需的字符数。红色的提示会显示在框下，直到您写满所需字符数时才会消失。
- en: 'Here’s the example I added:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我添加的示例：
- en: I’m using Twitter’s APIs to collect tweets and mentions from my timeline and
    then read them out.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在使用 Twitter 的 API 来收集我时间线上的推文和提及内容，然后将它们读出来。
- en: The build does not analyze the tweets.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 该构建不会分析推文。
- en: The build will not tweet, retweet, like, or interact with other users or their
    content. It will only stream tweets that contain my username from my timeline.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 此构建不会发推、转发、点赞或与其他用户及其内容互动。它只会从我的时间轴中流式传输包含我的用户名的推文。
- en: Tweets will be converted from text to speech and read out.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 推文将从文本转化为语音并朗读出来。
- en: You can add more details and customize your answers for your version of the
    hack.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以添加更多细节并自定义你的黑客版本答案。
- en: Under the question *Will your product, service, or analysis make Twitter content
    or derived information available to a government entity?*, select **No**, and
    then click **Continue**.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在问题 *你的产品、服务或分析是否会让政府机构获取 Twitter 内容或衍生信息？* 下，选择 **否**，然后点击 **继续**。
- en: In the fourth stage, you’ll be presented with the terms and conditions ([Figure
    13-15](ch13.xhtml#ch13fig15)), which you can read if you want to. Then scroll
    to the bottom of the page, select the box to accept the terms, and click **Submit
    application**.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在第四阶段，你将看到条款和条件 ([图 13-15](ch13.xhtml#ch13fig15))，如果需要可以阅读。然后滚动到页面底部，选择框以接受条款，并点击
    **提交申请**。
- en: '![Image](../images/13fig15.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig15.jpg)'
- en: '**FIGURE 13-15** Confirm that you accept the terms and conditions.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 13-15** 确认你接受条款和条件。'
- en: You should receive a verification email from the Twitter Developer team. Open
    this email and click **Confirm your email**. Well done! You’ve completed the application
    process and should be redirected to the API developer page.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会收到来自 Twitter 开发者团队的验证电子邮件。打开此邮件并点击 **确认你的电子邮件**。干得好！你已经完成了申请过程，并应被重定向到 API
    开发者页面。
- en: SETTING UP YOUR TWITTER APP
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置你的 Twitter 应用程序
- en: Once your developer account is set up and verified, you can create your app.
    For this, you’ll add a few details about your project and then generate a set
    of unique, random codes called *keys*. You’ll use the keys in the Python program
    to enable you to connect to your Twitter account and manage your tweets. Begin
    by selecting the **Create an app** option ([Figure 13-16](ch13.xhtml#ch13fig16)).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的开发者账户设置并验证完毕，你就可以创建你的应用程序。为此，你需要输入一些项目的详细信息，然后生成一组独特的随机代码，称为 *密钥*。你将在 Python
    程序中使用这些密钥，以便连接到你的 Twitter 账户并管理你的推文。开始时选择 **创建一个应用程序** 选项 ([图 13-16](ch13.xhtml#ch13fig16))。
- en: '![Image](../images/13fig16.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig16.jpg)'
- en: '**FIGURE 13-16** Getting started'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 13-16** 开始使用'
- en: '**Create a new app:** The next page of the website shows you any existing Twitter
    apps you’ve already created and presents you with the option of creating a new
    app. Click the **Create an app** button ([Figure 13-17](ch13.xhtml#ch13fig17)).![Image](../images/13fig17.jpg)'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建一个新应用程序：** 网站的下一页将显示你已经创建的所有现有 Twitter 应用程序，并向你展示创建新应用程序的选项。点击 **创建一个应用程序**
    按钮 ([图 13-17](ch13.xhtml#ch13fig17))。![Image](../images/13fig17.jpg)'
- en: '**FIGURE 13-17** Creating a new app'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 13-17** 创建一个新的应用程序'
- en: '**Register the details of your new app:** Enter the app’s name (for example,
    *mirror* or *social media mirror*). You’ll use this name to identify your project
    the next time you log in. In the next box, enter a short description of the project
    to let others know what your app does ([Figure 13-18](ch13.xhtml#ch13fig18)).![Image](../images/13fig18.jpg)'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**注册你的新应用程序的详细信息：** 输入应用程序的名称（例如，*mirror* 或 *social media mirror*）。你将使用这个名称在下次登录时识别你的项目。在下一个框中，输入项目的简短描述，让其他人了解你的应用程序的功能
    ([图 13-18](ch13.xhtml#ch13fig18))。![Image](../images/13fig18.jpg)'
- en: '**FIGURE 13-18** Adding details for your app'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 13-18** 为你的应用程序添加详细信息'
- en: You’ll also need to enter a website address. If you have your own website, enter
    its address here. If you don’t, you can enter your Twitter account’s web address,
    which is usually *[https://www.twitter.com/your_user_name/](https://www.twitter.com/your_user_name/)*.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你还需要输入一个网站地址。如果你有自己的官方网站，请在这里输入。如果没有，你可以输入你的 Twitter 账户的网址，通常是 *[https://www.twitter.com/your_user_name/](https://www.twitter.com/your_user_name/)*。
- en: Make sure the Enable sign in with Twitter option is deselected, and skip the
    other URL and website prompts. Also, leave the Callback URLs entry blank and agree
    to the Developer Agreement by selecting the box. Click the **Create your Twitter
    application** button.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保取消选择“启用使用 Twitter 登录”选项，跳过其他 URL 和网站提示。同时，保持回调 URL 为空，并通过勾选框同意开发者协议。点击 **创建你的
    Twitter 应用程序** 按钮。
- en: In the last box, enter a short summary of how you’ll use the app. I added a
    short description of what the social media status mirror hack does. Then click
    **Create**. You should be presented with two further options; select **Permissions**
    first ([Figure 13-19](ch13.xhtml#ch13fig19)).
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在最后一个框中，输入你将如何使用这个应用的简短总结。我添加了关于社交媒体状态镜像黑客功能的简短描述。然后点击**创建**。接下来会出现两个选项；首先选择**权限**
    ([图 13-19](ch13.xhtml#ch13fig19))。
- en: '![Image](../images/13fig19.jpg)'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](../images/13fig19.jpg)'
- en: '**FIGURE 13-19** Select the access permissions that you require.'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 13-19** 选择你所需的访问权限。'
- en: You’ll need to select the type of access that your app requires. *Read only*
    enables you to read tweets from your timeline, and *Read and write* enables you
    to read and send your own tweets. Select the **Read and write** option, although
    it might already be set by default.
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你需要选择你的应用所需的访问类型。*仅读取* 允许你从时间线中读取推文，而 *读取与写入* 允许你读取并发送自己的推文。选择**读取与写入**选项，尽管它可能已经是默认设置。
- en: Creating the Access Keys and Tokens
  id: totrans-125
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建访问密钥和令牌
- en: 'The final option window presents you with your API keys and access tokens ([Figure
    13-20](ch13.xhtml#ch13fig20)). These enable your Raspberry Pi to interact with
    Twitter through Python. Record the following keys and tokens:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的选项窗口会显示你的 API 密钥和访问令牌 ([图 13-20](ch13.xhtml#ch13fig20))。这些使你的 Raspberry Pi
    能够通过 Python 与 Twitter 互动。记录以下密钥和令牌：
- en: '**Consumer key** Identifies you and your app as a unique user'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**消费者密钥** 用于识别你和你的应用作为独特的用户'
- en: '**Consumer secret** Use this like a password'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**消费者密钥** 将此作为密码使用'
- en: '**Access token** A code you’ll use in your program later'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**访问令牌** 你将在程序中使用的代码'
- en: '**Access token secret** Used with your access token to authorize a connection
    with your Twitter app'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**访问令牌密钥** 与你的访问令牌一起使用，用于授权与 Twitter 应用的连接'
- en: '![Image](../images/13fig20.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/13fig20.jpg)'
- en: '**FIGURE 13-20** Generate your keys and tokens.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 13-20** 生成你的密钥和令牌。'
- en: To create the access token and access token secret, click **Create**.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建访问令牌和访问令牌密钥，点击**创建**。
- en: It’s important that you keep these keys and tokens secure. If you forget your
    access token or token secret, or they become compromised, you can click **Regenerate**
    to create a new token and API key set. Remember that you’ll need to use these
    in your Python program code, so note them down somewhere safe.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 保护这些密钥和令牌非常重要。如果你忘记了访问令牌或令牌密钥，或者它们被泄露了，你可以点击**重新生成**来创建一个新的令牌和 API 密钥集。记得你将在
    Python 程序中使用这些密钥，所以一定要把它们记录在一个安全的地方。
- en: You’ve now completed the setup procedures for the Twitter app. You’re ready
    to send your first tweet by using your Raspberry Pi. Keep in mind that you can
    use your credentials for other projects too.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经完成了 Twitter 应用的设置程序。你准备好使用 Raspberry Pi 发送你的第一条推文了。记住，你也可以将这些凭证用于其他项目。
- en: PROGRAMMING YOUR RASPBERRY PI WITH THE APP
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用应用编程你的 Raspberry Pi
- en: Before you start coding your main program, you’ll create a few test programs
    so you can learn how to send and read tweets by using the Raspberry Pi. This is
    a useful skill that you can use and adapt for other projects in the future! It’s
    also a simple and quick method to test that the configuration is working.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编写主程序之前，你将创建一些测试程序，以便你学习如何使用 Raspberry Pi 发送和读取推文。这是一项有用的技能，你可以在未来的其他项目中使用和调整！它也是一种简单快速的方法来测试配置是否正常工作。
- en: Sending Your First Tweet
  id: totrans-138
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 发送你的第一条推文
- en: To send your first tweet, you’ll need to use a new Python library called `tweepy`,
    which enables your program to communicate with Twitter.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要发送你的第一条推文，你需要使用一个新的 Python 库 `tweepy`，它使你的程序能够与 Twitter 通信。
- en: '**Install** **`tweepy`:** Boot your Raspberry Pi and open the terminal window.
    Then enter the following command:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装** **`tweepy`：** 启动你的 Raspberry Pi 并打开终端窗口。然后输入以下命令：'
- en: '[PRE3]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Send a tweet:** You’ll create a Python program to post a tweet from your
    Raspberry Pi to your Twitter timeline. The tweet will appear on your public timeline
    immediately, so be aware of what you send. Open your Python editor, start a new
    file and save it as *Sending.py*, and enter the code in [Listing 13-2](ch13.xhtml#ch13ex02).'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**发送推文：** 你将创建一个 Python 程序，将推文从你的 Raspberry Pi 发布到你的 Twitter 时间线。推文会立即出现在你的公共时间线上，所以要注意你发送的内容。打开你的
    Python 编辑器，创建一个新文件并保存为 *Sending.py*，然后输入 [示例 13-2](ch13.xhtml#ch13ex02) 中的代码。'
- en: '[PRE4]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**LISTING 13-2** Writing and posting a tweet by using a Raspberry Pi'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**示例 13-2** 使用 Raspberry Pi 编写并发布推文'
- en: Start the program by importing the `sys` and `subprocess` modules, which is
    a package for working with URLs. Also, import `urllib`, which is a module of URLs,
    or website addresses. This Python module lets you send data to and from your Twitter
    account via a specific URL for your app. Then import `time` and `tweepy` ❶.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过导入 `sys` 和 `subprocess` 模块来启动程序，`subprocess` 是一个用于处理 URL 的包。同时，导入 `urllib`，这是一个处理
    URL 或网站地址的模块。这个 Python 模块允许你通过特定的 URL 将数据发送到你的 Twitter 账户并接收数据。接着导入 `time` 和 `tweepy`
    ❶。
- en: Next, enter your consumer key ❷, consumer secret ❸, access token ❹, and access
    token secret ❺. At ❻, ❼, and ❽, authorize your Twitter account, your app, and
    the Raspberry Pi, respectively. This grants you access to your Twitter account.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，输入你的消费者密钥 ❷、消费者密钥密文 ❸、访问令牌 ❹ 和访问令牌密文 ❺。在 ❻、❼ 和 ❽ 处，分别授权你的 Twitter 账户、你的应用程序和
    Raspberry Pi。这将允许你访问你的 Twitter 账户。
- en: Use the function `api.update_status()` ❾ to post your message; type the message
    between the quotation marks. Then print a confirmation that the tweet has been
    sent.
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用函数 `api.update_status()` ❾ 发布你的消息；将消息输入在引号之间。然后打印一条确认推文已发送的消息。
- en: '**Run the program:** Before running the program, make sure you’ve entered your
    own message; then press **F5** to save and execute the code. The tweet will post,
    so check your Twitter timeline.'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**运行程序：** 在运行程序之前，确保你已经输入了自己的消息；然后按 **F5** 保存并执行代码。推文会发布，记得检查你的 Twitter 时间线。'
- en: '**(Optional) Change the Twitter Handle:** If you want to use another user’s
    Twitter handle to send them a mention, just add their Twitter handle in the parentheses,
    before your message; for example, `api.update_status(''@dan_aldred, Tweet sent
    from my Pi'').` It’s really that easy. You can’t post the same tweet twice because
    Twitter will consider this spam. When you run this program again, ensure that
    you change the message on line ❾.'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**（可选）更改 Twitter 账号：** 如果你想使用其他用户的 Twitter 账号发送提及，只需在括号中添加他们的 Twitter 账号，然后再输入你的消息；例如，`api.update_status(''@dan_aldred,
    Tweet sent from my Pi'')`。就是这么简单。你不能发布相同的推文两次，因为 Twitter 会认为这是垃圾邮件。当你再次运行程序时，确保更改
    ❾ 处的消息。'
- en: Reading Tweets
  id: totrans-150
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 阅读推文
- en: To read messages and mentions from your Twitter timeline, you’ll download the
    latest tweets from the Twitter users you follow and print them in the Python console
    window. Return to your previous program, *Sending.py*, and save it with a new
    filename of *Timeline.py*. Update the file so it matches the code in [Listing
    13-3](ch13.xhtml#ch13ex03).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 Twitter 时间线读取消息和提及，你需要下载你关注的 Twitter 用户的最新推文，并将它们打印在 Python 控制台窗口中。返回到你之前的程序
    *Sending.py*，并将其保存为新文件名 *Timeline.py*。更新该文件，使其与 [Listing 13-3](ch13.xhtml#ch13ex03)
    中的代码一致。
- en: '[PRE5]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**LISTING 13-3** Reading tweets from your Twitter timeline'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 13-3** 从 Twitter 时间线读取推文'
- en: The first section of the program, which is identical to the start of the previous
    program, *Sending.py*, controls the authentication and authorization to Twitter.
    You don’t need to adjust these lines unless you’ve changed your key and token
    details.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的第一部分，与之前的程序 *Sending.py* 相同，用于控制对 Twitter 的身份验证和授权。除非你更改了密钥和令牌的详细信息，否则无需调整这些行。
- en: You delete all the lines of code that appear after `api = tweepy.API(auth)`.
    (Don’t worry about losing your *Sending.py* program, because you’ve saved it under
    a different name.) Add the code at ❶, which pulls all the tweets from your public
    timeline and stores them in a variable named `public_tweets`. Next, use a `for`
    loop ❷ to cycle through each of the tweets.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 删除 `api = tweepy.API(auth)` 后面的所有代码行。（不用担心丢失 *Sending.py* 程序，因为你已经将其保存为不同的名称。）添加
    ❶ 处的代码，它会从你的公共时间线拉取所有推文，并将它们存储在名为 `public_tweets` 的变量中。接下来，使用 `for` 循环 ❷ 遍历每一条推文。
- en: Then use the `try` and `except` method, which tries to run the next part of
    the program ❸ and, if it can’t, runs the `except` code at ❼ and ❽. The reason
    is that sometimes tweets contain symbols and characters that the Python code can’t
    interpret, like emojis. Without the code at ❸ and ❼, your program would crash
    and return a message saying it can’t display the text. With the exception, you
    give your code something to do other than crash.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用 `try` 和 `except` 方法，它尝试运行程序的下一部分 ❸，如果不能执行，则运行 ❼ 和 ❽ 处的 `except` 代码。原因是有时候推文包含一些
    Python 代码无法解释的符号和字符，例如表情符号。如果没有 ❸ 和 ❼ 处的代码，程序将崩溃并返回一条消息，提示无法显示文本。通过异常处理，你让代码在不能运行时执行其他操作，而不是崩溃。
- en: In the next step, print each tweet ❹. Add a short delay ❺ to give you time to
    read each post. You might want to make this delay longer than 2 seconds (say,
    5 seconds).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，打印每条推文 ❹。添加一个短暂的延迟 ❺，以便你有时间阅读每条帖子。你可能希望将此延迟时间设置为超过 2 秒（例如，设置为 5 秒）。
- en: Skip a line before printing the next tweet ❻. This makes reading each tweet
    a little easier. It also makes the presentation neater, so you don’t have an overwhelming
    sea of text. Then add the `except` statement at ❼ and a message to inform you
    that it can’t display the tweet ❽. Save the file as *Timeline.py* and run the
    program as before. You now have a Python Twitter timeline reader ([Figure 13-21](ch13.xhtml#ch13fig21))!
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在打印下一条推文之前跳过一行 ❻。这样可以让阅读每条推文变得稍微容易一些。它还使得展示更加整洁，不会让你陷入大量的文本中。然后在❼处添加`except`语句，并添加一个信息来通知你无法显示该推文
    ❽。将文件保存为*Timeline.py*并像之前一样运行程序。现在你有了一个Python Twitter时间轴阅读器（[图13-21](ch13.xhtml#ch13fig21)）！
- en: '![Image](../images/13fig21.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig21.jpg)'
- en: '**FIGURE 13-21** Printing tweets from your timeline'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**图13-21** 从你的时间轴打印推文'
- en: Streaming Tweets Automatically
  id: totrans-161
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 自动流式传输推文
- en: 'When running the *Timeline.py* program, you might have noticed that it downloads
    only the first 20 tweets from your timeline. It also prints only tweets that were
    posted before you started running the program: it won’t automatically download
    any new tweets received while running the program. This isn’t very useful if you
    want to retrieve your tweets in real time or check for a keyword.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行*Timeline.py*程序时，你可能注意到它只下载了时间轴上的前20条推文。它还只打印在你开始运行程序之前发布的推文：它不会自动下载在程序运行期间收到的新推文。如果你想实时获取推文或检查某个关键字，这就不太有用了。
- en: One solution is to use a `while` loop that requests the tweets from your timeline
    every 20 seconds or so. But the problem with this is that Twitter limits your
    number of downloads, because it wants to block spam bots. Each time you request
    and download the data, Twitter logs that information. If you request data too
    many times per hour, your program might time out, and you’ll have wait a while
    before you can request your timeline data again.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一种解决方案是使用`while`循环，每隔大约20秒请求一次时间轴上的推文。但是这个问题在于Twitter会限制你的下载次数，因为它希望阻止垃圾邮件机器人。每次请求并下载数据时，Twitter都会记录这些信息。如果你每小时请求数据的次数过多，程序可能会超时，你需要等待一段时间才能再次请求时间轴数据。
- en: 'A better solution is to create a class to stream the tweets. This significantly
    reduces the number of requests, so Twitter won’t time out your program. This method
    also allows you to stream the tweets as they’re posted to your timeline. Each
    time a new tweet arrives while the program is running, Python prints it to the
    shell window. Let’s create a class now:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的解决方案是创建一个类来流式传输推文。这大大减少了请求的数量，因此Twitter不会让你的程序超时。此方法还允许你在推文发布到时间轴时进行流式传输。每次新推文到达时，程序运行时，Python会将其打印到Shell窗口。现在我们来创建一个类：
- en: '**Stream tweets with a class:** Open *Timeline.py* and save it as *Stream_Tweets.py*.
    Edit the file so it matches the code in [Listing 13-4](ch13.xhtml#ch13ex04).'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用类流式传输推文：** 打开*Timeline.py*并将其保存为*Stream_Tweets.py*。编辑文件使其与[列表13-4](ch13.xhtml#ch13ex04)中的代码匹配。'
- en: '[PRE6]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**LISTING 13-4** Using a class to stream tweets'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**列表13-4** 使用类流式传输推文'
- en: As with the previous programs, begin by importing the required modules, as well
    as your keys and tokens, to authenticate and authorize your Twitter account and
    app.
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与之前的程序一样，首先导入所需的模块，以及你的密钥和令牌，以便验证和授权你的Twitter账户和应用程序。
- en: Then create a new class called `Social_Media_Mirror_StreamListener`, which uses
    the streaming features of the Python `tweepy` library ❶. Create a function that
    streams the tweets and checks for your trigger word ❷. The code `status.text`
    retrieves all the tweets on your timeline. Store these in the variable `tweet_to_check`
    ❸.
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后创建一个新的类，命名为`Social_Media_Mirror_StreamListener`，该类使用Python `tweepy`库的流式功能
    ❶。创建一个函数来流式传输推文并检查触发词 ❷。代码`status.text`可以获取你时间轴上的所有推文。将这些推文存储在变量`tweet_to_check`中
    ❸。
- en: Next, check for your trigger word by using `.find()`. Combine this with the
    `tweet_to_check` variable to search for your trigger word in each streamed tweet.
    Replace the trigger word *`@Dan_Aldred`* in my example with your own Twitter handle,
    a keyword, or a hashtag that will be the indicator to turn on the LEDs. The program
    then checks for your keyword and, if it finds it, returns the numerical position
    of your keyword in the tweet. If the keyword isn’t present in the tweet, the program
    returns a value of -1 and stores it in the `does_the_tweet_contain_key_word` variable
    ❹. You print the positional value of the keyword at ❺. If the keyword is contained
    within the tweet, a value of 0 or greater is returned to the variable on line
    ❹.
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，使用 `.find()` 检查触发词。将这个方法与 `tweet_to_check` 变量结合，搜索每个流式推文中的触发词。在我的示例中，将触发词
    *`@Dan_Aldred`* 替换为你自己的Twitter账号、关键词或一个用于触发LED灯的标签。程序接着检查关键词，如果找到它，就返回关键词在推文中的数字位置。如果推文中没有关键词，程序会返回值-1，并将其存储在
    `does_the_tweet_contain_key_word` 变量中 ❹。你会在 ❺ 处打印关键词的位置值。如果推文中包含该关键词，返回值将为0或更大，并存储在第❹行的变量中。
- en: '**Search for the keyword:** The following section of the program checks the
    tweets for the keyword. Add the code in [Listing 13-5](ch13.xhtml#ch13ex05) to
    your program.'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**搜索关键词：** 程序的以下部分检查推文中是否包含关键词。将[Listing 13-5](ch13.xhtml#ch13ex05)中的代码添加到你的程序中。'
- en: '[PRE7]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**LISTING 13-5** Checking the stream of tweets for your keyword'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**LISTING 13-5** 检查推文流中的关键词'
- en: First, check the incoming tweet for your trigger word by seeing whether the
    trigger word’s placement value is equal to or greater than 0 ❶. If it is greater
    than or equal to 0, the trigger word is somewhere in the tweet. For example, if
    the value is 0, the word is at the very start of the tweet. If the value is 7,
    the keyword is found at position 7 in the tweet.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，通过查看触发词的位置信息是否大于或等于0 ❶，来检查传入的推文是否包含触发词。如果该值大于或等于0，表示触发词在推文中的某个位置。例如，如果该值为0，说明触发词位于推文的最开始。如果该值为7，说明关键词位于推文的第7个位置。
- en: Next, grab the Twitter handle of the user who included your trigger word ❷ and
    print it ❸.
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，获取包含触发词的用户的Twitter账号 ❷，并打印出来 ❸。
- en: In the final program, you’ll also use the keywords as triggers to turn on the
    LED lights. That would normally happen at this point in the program, but because
    you haven’t added the code for the LEDs yet, you’ll just add a test statement
    indicating this ❹.
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在最终的程序中，你还将使用关键词作为触发器来开启LED灯。通常这个操作会发生在程序的这一点，但由于你还没有添加LED的代码，所以此时只会添加一个测试语句来表示这一点
    ❹。
- en: Then you add a response for cases when the trigger word isn’t found in the tweet.
    The response occurs if the value is -1\. If that happens, you add a notification
    that the lights are off ❺ ❻ before a short pause of 1 second ❼. This completes
    the main function of the streaming program.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，在推文中没有找到触发词的情况下，添加响应代码。该响应会在值为-1时触发。如果发生这种情况，你需要添加一个通知，表示灯光已关闭 ❺ ❻，然后稍作暂停，约1秒钟
    ❼。这就完成了流式处理程序的主要功能。
- en: '**Start the streaming:** The final step is to start the streaming. Add the
    code in [Listing 13-6](ch13.xhtml#ch13ex06).'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**启动流式处理：** 最后一步是启动流式处理。将[Listing 13-6](ch13.xhtml#ch13ex06)中的代码添加到你的程序中。'
- en: '[PRE8]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**LISTING 13-6** Starting the streaming'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**LISTING 13-6** 启动流式处理'
- en: Create a variable called `myStreamListener` to combine and hold the details
    of your authorization to the Twitter app and the `Social_Media_Mirror_StreamListener()`
    function you coded in the previous steps ❶. Then combine these functions to authenticate
    your credentials and deploy the stream ❷.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个名为 `myStreamListener` 的变量，用于组合并保存你对Twitter应用的授权信息以及之前步骤中编写的 `Social_Media_Mirror_StreamListener()`
    函数 ❶。然后将这些功能组合在一起，认证你的凭据并部署流 ❷。
- en: To stream the timeline for the correct Twitter account, you need to add the
    ID number of the Twitter account ❸. You find this number by opening *[https://tweeterid.com/](https://tweeterid.com/)*
    and entering the account name you want to track ([Figure 13-22](ch13.xhtml#ch13fig22)).
    Place the ID number it returns in line ❸. You can add your own account to ensure
    that you pick up mentions and messages that are sent to you; you can also search
    for your favorite celebrity accounts, friends and family, or the hashtag for a
    trending event.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要流式获取正确Twitter账号的时间线，你需要添加Twitter账号的ID号码 ❸。你可以通过打开 *[https://tweeterid.com/](https://tweeterid.com/)*
    并输入你想要追踪的账号名来找到这个号码（见[图13-22](ch13.xhtml#ch13fig22)）。将返回的ID号放入第❸行。你可以添加自己的账号，以确保接收到提到你的消息和提及；你也可以搜索你喜欢的名人账号、朋友和家人，或者某个趋势事件的标签。
- en: '![Image](../images/13fig22.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig22.jpg)'
- en: '**FIGURE 13-22** Finding out the ID number of Twitter accounts'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '**FIGURE 13-22** 查找Twitter账户的ID号'
- en: Save and run your *Stream_Tweets.py* program. You can test it by mentioning
    your keyword in a tweet (or getting a friend to do it). Experiment with different
    placements of the keyword to see how the program responds. Then move on to the
    final section of code, where we’ll combine this program with the LEDs and audio
    to complete the social media status mirror.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并运行你的*Stream_Tweets.py*程序。你可以通过在推文中提到你的关键词来测试它（或者让朋友来做）。尝试将关键词放在不同的位置，看看程序的反应。然后进入代码的最后一部分，我们将把这个程序与LED灯和音频结合，完成社交媒体状态镜像。
- en: THE FINAL PROGRAM
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最终程序
- en: To complete the project, you’ll combine the code for streaming the tweets that
    contain your keyword with the code to flash the LEDs and read the tweets out loud.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成项目，你将把包含关键词的推文流代码与使LED闪烁并朗读推文的代码结合起来。
- en: Starting the Final Program
  id: totrans-188
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 启动最终程序
- en: Start a new program file and save it as *Social_Media_Mirror.py*. This code
    combines the code you used in [Listings 13-4](ch13.xhtml#ch13ex04) and [13-5](ch13.xhtml#ch13ex05)
    to complete the program.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 开始一个新的程序文件，并将其保存为*Social_Media_Mirror.py*。此代码结合了你在[Listings 13-4](ch13.xhtml#ch13ex04)和[13-5](ch13.xhtml#ch13ex05)中使用的代码，完成程序。
- en: '[PRE9]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**LISTING 13-7** Starting the final program'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 13-7** 启动最终程序'
- en: Import the `espeak()` function ❶, which you use to read the tweets aloud. Then
    import the `LED` class from the `gpiozero` library ❷. You use this to turn the
    GPIO pin on or off, controlling the battery power to the LEDs. Assign pin GPIO
    3 to the LED ❸. Use this pin to turn the lights on and off. Next, turn off the
    LED ❹ so the light won’t turn on every time the program resets.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 导入`espeak()`函数❶，用它来朗读推文。然后从`gpiozero`库中导入`LED`类❷。你使用它来打开或关闭GPIO引脚，从而控制LED的电池电源。将GPIO
    3引脚分配给LED ❸。使用这个引脚来控制灯的开关。接下来，关闭LED❹，这样每次程序重置时灯不会亮起。
- en: Adding the Main Program Code
  id: totrans-193
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加主程序代码
- en: Now you’ll add the main program code *Social_Media_Mirror.py*.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将添加主程序代码*Social_Media_Mirror.py*。
- en: '[PRE10]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**LISTING 13-8** Adding code to make the LEDs flash'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 13-8** 添加代码使LED闪烁'
- en: 'Use the code at ❶ again to turn off the LED, and then add the `try` and `except`
    method ❷ (as you did in [Listing 13-3](ch13.xhtml#ch13ex03)) to prevent your program
    from crashing if the tweet contains unknown characters, symbols, or usually emojis
    that cannot be displayed as text. Next, flash the lights by turning on the LEDs,
    waiting a few seconds, and then turning them off. The code at ❸ is merely an example
    and makes the lights flash faster until they stay on. You can adapt this code
    to suit your own preferences: make them stay lit for 5 seconds or flash them only
    a single time. In the program in [Listing 13-8](ch13.xhtml#ch13ex08), the LEDs
    stay on while the message is read aloud. Change values in `time.sleep()` ❸ to
    change the pattern of the LEDs. For example, `time.sleep(10)` will keep the LEDs
    on for 10 seconds and then turn them off.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用❶处的代码关闭LED灯，然后添加`try`和`except`方法❷（如你在[Listing 13-3](ch13.xhtml#ch13ex03)中所做的），以防止推文中包含无法作为文本显示的未知字符、符号或表情符号时程序崩溃。接下来，点亮LED灯，等待几秒钟，然后关闭它们。❸处的代码仅为示例，能够使灯光闪烁更快，直到保持常亮。你可以根据自己的喜好调整这段代码：让灯保持点亮5秒钟，或者只闪烁一次。在[Listing
    13-8](ch13.xhtml#ch13ex08)中的程序中，LED在朗读消息时保持点亮。通过更改`time.sleep()`中的值❸来改变LED的模式。例如，`time.sleep(10)`会让LED保持点亮10秒钟，然后关闭。
- en: Use the `espeak.synth()` function to read the name of the Twitter user who sent
    you a tweet containing your Twitter name ❹. Combine this code with the word `said`
    ❺ so when the program reads a tweet (by me, for example), it starts by announcing,
    “@Dan_Aldred said.” Add a small delay at ❻. Then make the program read the tweet
    ❼ before adding a final delay ❽ and turning off the LEDs ❾. Turning off the lights
    indicates that the message has been received and relayed.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`espeak.synth()`函数读取发送包含你Twitter名字的推文的Twitter用户的名字 ❹。将此代码与单词`said` ❺结合，这样当程序读取一条推文（比如我的推文）时，它会首先宣布：“@Dan_Aldred
    said”。在❻处添加一个小延迟。然后让程序读取推文 ❼，再添加最后的延迟 ❽并关闭LED灯 ❾。关闭灯光表示消息已被接收并转发。
- en: If you receive a tweet that doesn’t contain your keyword, flash the LEDs once
    to indicate that there’s been a new post to your timeline but not a specific message
    of interest ❿. Then add the final line of code that authorizes your Twitter credentials
    and streams, in real time, the tweets from your Twitter timeline. Your program
    checks them for the keyword and responds in the set manner.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你收到一条没有包含你关键词的推文，闪烁一次 LED 来表示你的时间线有新帖子，但并不是一个具体的感兴趣的消息❿。然后添加最后一行代码，授权你的 Twitter
    凭证，并实时流式传输你的 Twitter 时间线中的推文。你的程序会检查这些推文是否包含关键词，并以设定的方式做出响应。
- en: Add the end lines of the program in [Listing 13-9](ch13.xhtml#ch13ex09) to begin
    the streaming and complete the main program code.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 [Listing 13-9](ch13.xhtml#ch13ex09) 中的结束行代码，开始流式传输并完成主程序代码。
- en: '[PRE11]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**LISTING 13-9** Ending the program'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 13-9** 结束程序'
- en: Save the *Social_Media_Mirror.py* code and run it. To test it, load your Twitter
    feed on another device and mention your Twitter username or keyword in a tweet.
    Watch the LEDs light up when you get a new message, and then listen as the message
    is read to you. Contact your friends and get them to try it too.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 保存 *Social_Media_Mirror.py* 代码并运行它。要进行测试，可以在另一台设备上加载你的 Twitter 动态并在推文中提到你的 Twitter
    用户名或关键词。观察 LED 灯在收到新消息时闪烁，然后听到消息被朗读出来。联系你的朋友，让他们也试试看。
- en: Remember that you can also replace your Twitter ID with the ID of your favorite
    Twitter account or users. Use the website *[https://tweeterid.com/](https://tweeterid.com/)*
    to look up the ID number. You can also replace the ID code with keywords like
    *No Starch*. When you’re testing your program, remember that if you send a duplicate
    of the same message, Twitter will consider this spam, so ensure that you change
    your test word.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你还可以将你的 Twitter ID 替换为你喜欢的 Twitter 账户或用户的 ID。使用网站 *[https://tweeterid.com/](https://tweeterid.com/)*
    来查找 ID 号码。你也可以将 ID 代码替换为像 *No Starch* 这样的关键字。在测试程序时，记住如果你发送相同的消息重复内容，Twitter 会将其视为垃圾信息，所以一定要更改你的测试词。
- en: Automatically Starting the Twitter Stream
  id: totrans-205
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 自动启动 Twitter 流
- en: Once you’re happy with the project, you can set the program to automatically
    run when you power up the Raspberry Pi. You do this by configuring a *crontab*
    file, as you did for other projects in the book.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你对项目感到满意，你可以设置程序在树莓派开机时自动运行。你可以通过配置一个 *crontab* 文件来实现，就像在本书的其他项目中做的那样。
- en: 'Open the terminal and enter the following command to open the cron console:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并输入以下命令来打开 cron 控制台：
- en: '[PRE12]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The console will present you with three methods of editing the *crontab* file.
    Select option 2 and press ENTER to open the *crontab* file with the nano text
    editor.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台将为你提供三种编辑 *crontab* 文件的方法。选择选项 2 并按 ENTER，使用 nano 文本编辑器打开 *crontab* 文件。
- en: 'Scroll to the bottom of the text in the crontab file and locate the blank space.
    Then add the following line of code:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动到 crontab 文件的底部，找到空白区域。然后添加以下代码行：
- en: '[PRE13]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The command states that every time the Raspberry Pi reboots, it should run Python
    in superuser mode, open the *home/pi/* folder, and execute your program. Replace
    the *name_of_your_program.py* with the name that you saved your program as.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令表示每次树莓派重新启动时，都应该以超级用户模式运行 Python，打开 *home/pi/* 文件夹，并执行你的程序。将 *name_of_your_program.py*
    替换为你保存程序时的名称。
- en: The `&` at the end of the line of code tells your program to run in the background,
    so you can do other tasks with your Raspberry Pi at the same time.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 代码行末尾的 `&` 告诉你的程序在后台运行，这样你就可以同时进行其他任务。
- en: Once you have checked the command details and are confident that they’re correct,
    press CTRL-X to save and exit the *crontab* file. Now each time you turn on or
    reboot your Raspberry Pi, the *crontab* file will run, starting the *Social_Media_Mirror.py*
    program, and your social media status mirror will be ready.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你检查了命令详情，并确认它们是正确的，按 CTRL-X 保存并退出 *crontab* 文件。现在，每次你打开或重新启动树莓派时，*crontab*
    文件都会运行，启动 *Social_Media_Mirror.py* 程序，你的社交媒体状态镜像就绪。
- en: 'If you want to stop the program from automatically running, open the *crontab*
    file again from the terminal by entering this command:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想停止程序的自动运行，可以通过在终端中输入以下命令再次打开 *crontab* 文件：
- en: '[PRE14]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Then delete the line of code that you added. Save the file and reboot.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 然后删除你添加的代码行。保存文件并重新启动。
- en: PUTTING IT ALL TOGETHER
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 汇总所有内容
- en: Now that all the hardware is working, you can add the LEDs to the mirror—or
    to any other object you’ve chosen. (You could also make a social media shelf.)
    Make sure your speaker and LEDs are attached, and then attach the battery pack
    to the back of the mirror ([Figure 13-23](ch13.xhtml#ch13fig23)). You could glue
    it to the back of the frame or use double-sided tape. Remember to leave the battery
    door facing outward so you can change the batteries if required. Then hang your
    mirror and wait for your messages to come through.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有硬件都已正常工作，你可以将LED灯添加到镜子上——或者其他你选择的任何物体上。（你也可以制作一个社交媒体架。）确保扬声器和LED灯已连接好，然后将电池包附着在镜子背面（[图13-23](ch13.xhtml#ch13fig23)）。你可以将它粘贴在框架的背面，或者使用双面胶带。记得将电池仓朝外放置，这样在需要时可以更换电池。然后挂上你的镜子，等待消息传入。
- en: '![Image](../images/13fig23.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/13fig23.jpg)'
- en: '**FIGURE 13-23** Attach the Pi and battery pack to the back of your mirror.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '**图13-23** 将Pi和电池包连接到镜子背面。'
- en: WRAPPING UP
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 项目总结
- en: 'To develop your project further, try one or more of the following:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步开发你的项目，尝试以下一个或多个方法：
- en: Change the LED flashing pattern by altering the time.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过改变时间来更改LED闪烁模式。
- en: Add a music or fanfare MP3 file that plays before each tweet is read out loud.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一段音乐或庆祝的MP3文件，在每条推文朗读之前播放。
- en: Combine the project with the glue light in [Chapter 3](ch03.xhtml#ch03) or wire
    another set of LEDs that respond to a particular second trigger word.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将该项目与[第3章](ch03.xhtml#ch03)中的粘合光结合，或者接入另一组LED灯，使其响应特定的第二触发词。
