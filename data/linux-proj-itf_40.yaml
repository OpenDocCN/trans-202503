- en: Chapter 40. Login Accounting
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 40 章 登录账户管理
- en: Login accounting is concerned with recording which users are currently logged
    in to the system, and recording past logins and logouts. This chapter looks at
    the login accounting files and the library functions used to retrieve and update
    the information they contain. We also describe the steps that an application providing
    a login service should perform in order to update these files when a user logs
    in and out.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 登录账户管理主要关注记录哪些用户当前登录系统，以及记录过去的登录和登出信息。本章讨论登录账户管理文件以及用于检索和更新这些文件内容的库函数。我们还描述了提供登录服务的应用程序在用户登录和登出时，应该执行哪些步骤来更新这些文件。
- en: Overview of the `utmp` and `wtmp` Files
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`utmp` 和 `wtmp` 文件概述'
- en: 'UNIX systems maintain two data files containing information about users logging
    in and out of the system:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: UNIX 系统维护着两个数据文件，记录有关用户登录和登出的信息：
- en: The `utmp` file maintains a record of users currently logged in to the system
    (as well as certain other information that we describe later). As each user logs
    in, a record is written to the `utmp` file. One of the fields in this record,
    *ut_user*, records the login name of the user. This record is later erased on
    logout. Programs such as *who(1)* use the information in the `utmp` file to display
    a list of currently logged-in users.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utmp` 文件记录了当前登录系统的用户信息（以及稍后会描述的其他信息）。每当有用户登录时，都会在 `utmp` 文件中写入一条记录。记录中的一个字段
    *ut_user* 记录了该用户的登录名。用户登出时，这条记录会被删除。诸如 *who(1)* 之类的程序会使用 `utmp` 文件中的信息来显示当前登录的用户列表。'
- en: The `wtmp` file is an audit trail of all user logins and logouts (as well as
    certain other information that we describe later). On each login, a record containing
    the same information as is written to the `utmp` file is appended to the `wtmp`
    file. On logout, a further record is appended to the file. This record contains
    the same information, except that the *ut_user* field is zeroed out. The *last(1)*
    command can be used to display and filter the contents of the `wtmp` file.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wtmp` 文件记录了所有用户的登录和登出日志（以及一些稍后会描述的其他信息）。每次登录时，包含与写入 `utmp` 文件相同信息的记录都会被追加到
    `wtmp` 文件中。登出时，另一个记录会被追加到文件中。这个记录包含相同的信息，除了 *ut_user* 字段被清零。可以使用 *last(1)* 命令来显示和过滤
    `wtmp` 文件的内容。'
- en: On Linux, the `utmp` file resides at `/var/run/utmp`, and the `wtmp` file resides
    at `/var/log/wtmp`. In general, applications don’t need to know about these pathnames,
    since they are compiled into *glibc*. Programs that do need to refer to the locations
    of these files should use the `_PATH_UTMP` and `_PATH_WTMP` pathname constants,
    defined in `<paths.h>` (and `<utmpx.h>`), rather than explicitly coding pathnames
    into the program.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 系统中，`utmp` 文件位于 `/var/run/utmp`，`wtmp` 文件位于 `/var/log/wtmp`。一般来说，应用程序不需要知道这些路径，因为它们已经被编译进了
    *glibc* 中。需要引用这些文件位置的程序应该使用 `_PATH_UTMP` 和 `_PATH_WTMP` 路径常量，这些常量定义在 `<paths.h>`（和
    `<utmpx.h>`）中，而不是将路径硬编码到程序中。
- en: Note
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: SUSv3 doesn’t standardize any symbolic names for the pathnames of the `utmp`
    and `wtmp` files. The names `_PATH_UTMP` and `_PATH_WTMP` are used on Linux and
    the BSDs. Many other UNIX implementations instead define the constants `UTMP_FILE`
    and `WTMP_FILE` for these pathnames. Linux also defines these names in `<utmp.h>`,
    but doesn’t define them in `<utmpx.h>` or `<paths.h>`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3 并没有为 `utmp` 和 `wtmp` 文件的路径标准化任何符号名称。`_PATH_UTMP` 和 `_PATH_WTMP` 这些名称在
    Linux 和 BSD 系统中使用。许多其他 UNIX 实现则定义了常量 `UTMP_FILE` 和 `WTMP_FILE` 来表示这些路径。Linux 也在
    `<utmp.h>` 中定义了这些名称，但并未在 `<utmpx.h>` 或 `<paths.h>` 中定义它们。
- en: The *utmpx* API
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*utmpx* API'
- en: The `utmp` and `wtmp` files have been present in the UNIX system since early
    times, but underwent steady evolution and divergence across various UNIX implementations,
    especially BSD versus System V. System V Release 4 greatly extended the API, in
    the process creating a new (parallel) *utmpx* structure and associated `utmpx`
    and `wtmpx` files. The letter *x* was likewise included in the names of header
    files and additional functions for processing these new files. Many other UNIX
    implementations also added their own extensions to the API.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`utmp` 和 `wtmp` 文件自 UNIX 系统早期以来就存在，但随着不同 UNIX 实现的演变，尤其是 BSD 与 System V 的差异，它们经历了持续的发展和分化。System
    V Release 4 极大扩展了 API，在此过程中创建了一个新的（平行的）*utmpx* 结构以及相关的 `utmpx` 和 `wtmpx` 文件。字母
    *x* 同样被包含在头文件和处理这些新文件的附加函数的名称中。许多其他 UNIX 实现也对 API 添加了自己的扩展。'
- en: In this chapter, we describe the Linux *utmpx* API, which is a hybrid of the
    BSD and System V implementations. Linux doesn’t follow System V in creating parallel
    `utmpx` and `wtmpx` files; instead, the `utmp` and `wtmp` files contain all of
    the required information. However, for compatibility with other UNIX implementations,
    Linux provides both the traditional *utmp* and the System V-derived *utmpx* APIs
    for accessing the contents of these files. On Linux, these two APIs return exactly
    the same information. (One of the few differences between the two APIs is that
    the *utmp* API contains reentrant versions of a few functions, while the *utmpx*
    API does not.) However, we confine our discussion to the utmpx interface, since
    that is the API specified in SUSv3 and is thus preferred for portability to other
    UNIX implementations.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍 Linux 的 *utmpx* API，它是 BSD 和 System V 实现的混合体。Linux 并没有像 System V
    那样创建并行的 `utmpx` 和 `wtmpx` 文件；相反，`utmp` 和 `wtmp` 文件包含所有所需的信息。然而，为了与其他 UNIX 实现兼容，Linux
    提供了传统的 *utmp* 和基于 System V 的 *utmpx* API 来访问这些文件的内容。在 Linux 上，这两个 API 返回完全相同的信息。（这两个
    API 之间为数不多的差异之一是，*utmp* API 包含一些函数的可重入版本，而 *utmpx* API 则没有。）然而，我们将讨论限定于 utmpx
    接口，因为它是 SUSv3 规范中指定的 API，因此更适合于移植到其他 UNIX 实现。
- en: The SUSv3 specification doesn’t cover all aspects of the `utmpx` API (e.g.,
    the locations of the `utmp` and `wtmp` files are not specified). The precise contents
    of the login accounting files differ somewhat across implementations, and various
    implementations provide additional login accounting functions that are not specified
    in SUSv3.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3 规范没有涵盖 `utmpx` API 的所有方面（例如，`utmp` 和 `wtmp` 文件的位置未指定）。登录记账文件的精确内容在不同实现中有所不同，而且各种实现提供了未在
    SUSv3 中指定的附加登录记账功能。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '[Chapter 17](ch17.html "Chapter 17. Access Control Lists") of [Frisch, 2002]
    summarizes some of the variations in the location and use of the `wtmp` and `utmp`
    files across different UNIX implementations. It also describes the use of the
    *ac(1)* command, which can be used to summarize login information from the `wtmp`
    file.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[第17章](ch17.html "第17章. 访问控制列表") [Frisch, 2002] 总结了不同 UNIX 实现中 `wtmp` 和 `utmp`
    文件的存储位置及使用上的一些变体。它还描述了 *ac(1)* 命令的使用，该命令可用于总结 `wtmp` 文件中的登录信息。'
- en: The *utmpx* Structure
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*utmpx* 结构体'
- en: The `utmp` and `wtmp` files consist of *utmpx* records. The *utmpx* structure
    is defined in `<utmpx.h>`, as shown in [Example 40-1](ch40.html#definition_of_the_utmpx_structure
    "Example 40-1. Definition of the utmpx structure").
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`utmp` 和 `wtmp` 文件由 *utmpx* 记录组成。*utmpx* 结构体在 `<utmpx.h>` 中定义，如 [示例 40-1](ch40.html#definition_of_the_utmpx_structure
    "示例 40-1. utmpx 结构体定义") 所示。'
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The SUSv3 specification of the *utmpx* structure doesn’t include the *ut_host*,
    *ut_exit*, *ut_session*, or *ut_addr_v6* fields. The *ut_host* and *ut_exit* fields
    are present on most other implementations; *ut_session* is present on a few other
    implementations; and *ut_addr_v6* is Linux-specific. SUSv3 specifies the *ut_line*
    and *ut_user* fields, but leaves their lengths unspecified.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3 规范中的 *utmpx* 结构体不包括 *ut_host*、*ut_exit*、*ut_session* 或 *ut_addr_v6* 字段。*ut_host*
    和 *ut_exit* 字段在大多数其他实现中都有；*ut_session* 字段在一些其他实现中存在；*ut_addr_v6* 是 Linux 特有的。SUSv3
    规范中指定了 *ut_line* 和 *ut_user* 字段，但未指定其长度。
- en: The *int32_t* data type used to define the *ut_addr_v6* field of the *utmpx*
    structure is a 32-bit integer.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 用于定义 *utmpx* 结构体中 *ut_addr_v6* 字段的 *int32_t* 数据类型是一个 32 位整数。
- en: Example 40-1. Definition of the *utmpx* structure
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 40-1. *utmpx* 结构体定义
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Each of the string fields in the *utmpx* structure is null-terminated unless
    it completely fills the corresponding array.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*utmpx* 结构体中的每个字符串字段都以空字符结尾，除非它完全填充了相应的数组。'
- en: For login processes, the information stored in the *ut_line* and *ut_id* fields
    is derived from the name of the terminal device. The *ut_line* field contains
    the complete filename of the terminal device. The *ut_id* field contains the suffix
    part of the filename—that is, the string following *tty*, *pts*, or *pty* (the
    last two are for System-V and BSD-style pseudoterminals, respectively). Thus,
    for the terminal `/dev/tty2`, *ut_line* would be *tty2* and *ut_id* would be *2*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于登录进程，存储在 *ut_line* 和 *ut_id* 字段中的信息来源于终端设备的名称。*ut_line* 字段包含终端设备的完整文件名。*ut_id*
    字段包含文件名的后缀部分——即 *tty*、*pts* 或 *pty* 后面的字符串（后两个是用于 System-V 和 BSD 风格的伪终端）。因此，对于终端
    `/dev/tty2`，*ut_line* 将是 *tty2*，而 *ut_id* 将是 *2*。
- en: In a windowing environment, some terminal emulators use the *ut_session* field
    to record the session ID for the terminal window. (Refer to [Sessions](ch34.html#sessions
    "Sessions") for an explanation of session IDs.)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在窗口环境中，一些终端仿真器使用 *ut_session* 字段记录终端窗口的会话 ID。（有关会话 ID 的解释，请参见 [Sessions](ch34.html#sessions
    "Sessions")。）
- en: 'The *ut_type* field is an integer defining the type of record being written
    to the file. The following set of constants (with their corresponding numeric
    values shown in parentheses) can be used as values for this field:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*ut_type* 字段是一个整数，用于定义写入文件的记录类型。以下常量集合（其对应的数字值见括号内）可作为该字段的值：'
- en: '`EMPTY` (0)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`EMPTY` (0)'
- en: This record doesn’t contain valid accounting information.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 该记录不包含有效的记账信息。
- en: '`RUN_LVL` (1)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`RUN_LVL` (1)'
- en: This record indicates a change in the system’s run-level during system startup
    or shutdown. (Information about run-levels can be found in the *init(8)* manual
    page.) The `_GNU_SOURCE` feature test macro must be defined in order to obtain
    the definition of this constant from `<utmpx.h>`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 该记录表示系统在启动或关机过程中运行级别的变化。（有关运行级别的信息，请参见 *init(8)* 手册页面。）必须定义 `_GNU_SOURCE` 特性测试宏，才能从
    `<utmpx.h>` 中获取该常量的定义。
- en: '`BOOT_TIME` (2)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`BOOT_TIME` (2)'
- en: This record contains the time of system boot in the *ut_tv* field. The usual
    author of `RUN_LVL` and `BOOT_TIME` records is *init*. These records are written
    to both the `utmp` file and the `wtmp` file.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 该记录包含系统启动时间，记录在 *ut_tv* 字段中。`RUN_LVL` 和 `BOOT_TIME` 记录通常由 *init* 生成。这些记录会写入
    `utmp` 文件和 `wtmp` 文件。
- en: '`NEW_TIME` (3)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`NEW_TIME` (3)'
- en: This record contains the new time after a system clock change, recorded in the
    *ut_tv* field.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 该记录包含系统时钟更改后的新时间，记录在 *ut_tv* 字段中。
- en: '`OLD_TIME` (4)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`OLD_TIME` (4)'
- en: This record contains the old time before a system clock change, recorded in
    the *ut_tv* field. Records of type `OLD_TIME` and `NEW_TIME` are written to the
    `utmp` and `wtmp` files by the NTP (or a similar) daemon when it makes changes
    to the system clock.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 该记录包含系统时钟更改前的旧时间，记录在 *ut_tv* 字段中。`OLD_TIME` 和 `NEW_TIME` 类型的记录由 NTP（或类似）守护进程在更改系统时钟时写入
    `utmp` 和 `wtmp` 文件。
- en: '`INIT_PROCESS` (5)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`INIT_PROCESS` (5)'
- en: This is a record for a process spawned by *init*, such as a *getty* process.
    Refer to the *inittab(5)* manual page for details.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个由 *init* 生成的进程记录，例如 *getty* 进程。有关详细信息，请参见 *inittab(5)* 手册页面。
- en: '`LOGIN_PROCESS` (6)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`LOGIN_PROCESS` (6)'
- en: This is a record for a session leader process for a user login, such as a *login(1)*
    process.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用户登录的会话领导进程记录，如 *login(1)* 进程。
- en: '`USER_PROCESS` (7)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`USER_PROCESS` (7)'
- en: This is a record for a user process, usually a login session, with the username
    appearing in the *ut_user* field. The login session may have been started by *login(1)*
    or by some application offering a remote login facility, such as *ftp* or *ssh*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用户进程记录，通常是一个登录会话，用户名会出现在 *ut_user* 字段中。该登录会话可能是由 *login(1)* 启动的，也可能是由某个提供远程登录功能的应用程序启动的，比如
    *ftp* 或 *ssh*。
- en: '`DEAD_PROCESS` (8)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`DEAD_PROCESS` (8)'
- en: This record identifies a process that has exited.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 该记录标识一个已退出的进程。
- en: 'We show the numeric values of these constants because various applications
    depend on the constants having the above numerical order. For example, in the
    source code of the *agetty* program, we find checks such as the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们展示这些常量的数字值，因为不同的应用程序依赖于这些常量的数字顺序。例如，在 *agetty* 程序的源代码中，我们可以看到类似以下的检查：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Records of the type `INIT_PROCESS` usually correspond to invocations of *getty(8)*
    (or a similar program, such as *agetty(8)* or *mingetty(8)*). On system boot,
    the *init* process creates a child for each terminal line and virtual console,
    and each child execs the *getty* program. The *getty* program opens the terminal,
    prompts the user for a login name, and then execs *login(1)*. After successfully
    validating the user and performing various other steps, *login* forks a child
    that execs the user’s login shell. The complete life of such a login session is
    represented by four records written to the `wtmp` file in the following order:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`INIT_PROCESS` 类型的记录通常对应于 *getty(8)*（或类似程序，如 *agetty(8)* 或 *mingetty(8)*）的调用。在系统启动时，*init*
    进程为每个终端行和虚拟控制台创建一个子进程，每个子进程执行 *getty* 程序。*getty* 程序打开终端，提示用户输入登录名，然后执行 *login(1)*。在成功验证用户并执行其他各种操作后，*login*
    会生成一个子进程，该进程执行用户的登录 shell。一个完整的登录会话生命周期会通过以下四条记录写入 `wtmp` 文件，顺序如下：'
- en: an `INIT_PROCESS` record, written by *init*;
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由 *init* 写入的 `INIT_PROCESS` 记录；
- en: a `LOGIN_PROCESS` record, written by *getty*;
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由 *getty* 写入的 `LOGIN_PROCESS` 记录；
- en: a `USER_PROCESS` record, written by *login*; and
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个由*login*写入的`USER_PROCESS`记录；以及
- en: a `DEAD_PROCESS` record, written by *init* when it detects the death of the
    child *login* process (which occurs on user logout).
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个由*init*写入的`DEAD_PROCESS`记录，当它检测到子进程*login*（用户注销时发生）终止时。
- en: Further details on the operation of *getty* and *login* during user login can
    be found in [Chapter 9](ch09.html "Chapter 9. Process Credentials") of [Stevens
    & Rago, 2005].
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有关*getty*和*login*在用户登录期间操作的更多细节，请参见[第9章](ch09.html "第9章。进程凭证")，[Stevens & Rago,
    2005]。
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Some versions of *init* spawn the *getty* process before updating the `wtmp`
    file. Consequently, *init* and *getty* race with each other to update the `wtmp`
    file, with the result that the `INIT_PROCESS` and `LOGIN_PROCESS` records may
    be written in the opposite order from that described in the main text.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 某些版本的*init*在更新`wtmp`文件之前启动*getty*进程。因此，*init*和*getty*会相互竞争更新`wtmp`文件，结果是`INIT_PROCESS`和`LOGIN_PROCESS`记录的写入顺序可能与正文中描述的顺序相反。
- en: Retrieving Information from the `utmp` and `wtmp` Files
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从`utmp`和`wtmp`文件中检索信息
- en: The functions described in this section retrieve records from files containing
    *utmpx*-format records. By default, these functions use the standard `utmp` file,
    but this can be changed using the *utmpxname()* function (described below).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中描述的函数从包含*utmpx*格式记录的文件中检索记录。默认情况下，这些函数使用标准的`utmp`文件，但可以使用*utmpxname()*函数（如下所述）进行更改。
- en: These functions employ the notion of a *current location* within the file from
    which they are retrieving records. This location is updated by each function.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数采用文件中的*当前位置*的概念来检索记录。每个函数都会更新该位置。
- en: The *setutxent()* function rewinds the `utmp` file to the beginning.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*setutxent()*函数将`utmp`文件回到文件开头。'
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Normally, we should call *setutxent()* before employing any of the *getutx*()*
    functions (described below). This prevents possible confusion that might result
    if some third-party function that we have called has previously made use of these
    functions. Depending on the task being performed, it may also be necessary to
    call *setutxent()* again at appropriate points later in a program.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在使用任何*getutx*()函数（下面描述）之前，我们应该调用*setutxent()*。这样可以防止如果我们调用的某些第三方函数之前已经使用了这些函数而导致的可能混乱。根据执行的任务，可能还需要在程序的适当位置再次调用*setutxent()*。
- en: The *setutxent()* function and the *getutx*()* functions open the `utmp` file
    if it is not already open. When we have finished using the file, we can close
    it with the *endutxent()* function.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*setutxent()*函数和*getutx*()函数在`utmp`文件尚未打开时，会打开该文件。当我们完成使用该文件后，可以通过*endutxent()*函数关闭它。'
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The *getutxent()*, *getutxid()*, and *getutxline()* functions read a record
    from the `utmp` file and return a pointer to a (statically allocated) *utmpx*
    structure.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*getutxent()*、*getutxid()*和*getutxline()*函数从`utmp`文件中读取一条记录，并返回指向（静态分配的）*utmpx*结构的指针。'
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All return a pointer to a statically allocated *utmpx* structure, or `NULL`
    if no matching record or EOF was encountered
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 所有函数都返回指向静态分配的*utmpx*结构的指针，或者如果没有匹配的记录或遇到EOF，则返回`NULL`。
- en: The *getutxent()* function retrieves the next sequential record from the `utmp`
    file. The *getutxid()* and *getutxline()* functions perform searches, starting
    from the current file location, for a record matching the criteria specified in
    the *utmpx* structure pointed to by the *ut* argument.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*getutxent()*函数从`utmp`文件中检索下一个顺序记录。*getutxid()*和*getutxline()*函数从当前位置开始搜索，与*utmpx*结构中由*ut*参数指向的条件匹配的记录。'
- en: 'The *getutxid()* function searches the `utmp` file for a record based on the
    values specified in the *ut_type* and *ut_id* fields of the *ut* argument:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*getutxid()*函数根据*ut*参数中*ut_type*和*ut_id*字段指定的值，在`utmp`文件中搜索记录：'
- en: If the *ut_type* field is `RUN_LVL`, `BOOT_TIME`, `NEW_TIME`, or `OLD_TIME`,
    then *getutxid()* finds the next record whose *ut_type* field matches the specified
    value. (Records of these types don’t correspond to user logins.) This permits
    searches for records of changes to the system time and run-level.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果*ut_type*字段是`RUN_LVL`、`BOOT_TIME`、`NEW_TIME`或`OLD_TIME`，则*getutxid()*会查找下一个其*ut_type*字段与指定值匹配的记录。（这些类型的记录与用户登录无关。）这允许查找系统时间和运行级别变化的记录。
- en: If the *ut_type* field is one of the remaining valid values (`INIT_PROCESS`,
    `LOGIN_PROCESS`, `USER_PROCESS`, or `DEAD_PROCESS`), then *getutxent()* finds
    the next record whose *ut_type* field matches *any* of these values and whose
    *ut_id* field matches that specified in its *ut* argument. This permits scanning
    the file for records corresponding to a particular terminal.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 *ut_type* 字段是剩余的有效值之一（`INIT_PROCESS`、`LOGIN_PROCESS`、`USER_PROCESS` 或 `DEAD_PROCESS`），则
    *getutxent()* 会查找下一个记录，其 *ut_type* 字段匹配 *任何* 这些值，并且其 *ut_id* 字段与 *ut* 参数中指定的值匹配。这允许扫描文件中与特定终端相关的记录。
- en: The *getutxline()* function searches forward for a record whose *ut_type* field
    is either `LOGIN_PROCESS` or `USER_PROCESS`, and whose *ut_line* field matches
    that specified in the *ut* argument. This is useful for finding records corresponding
    to user logins.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*getutxline()* 函数会向前搜索一个记录，其 *ut_type* 字段为 `LOGIN_PROCESS` 或 `USER_PROCESS`，并且其
    *ut_line* 字段与 *ut* 参数中指定的值匹配。这对于查找与用户登录相关的记录非常有用。  '
- en: Both *getutxid()* and *getutxline()* return `NULL` if the search fails (i.e.,
    end-of-file is encountered without finding a matching record).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '如果搜索失败（即在遇到文件结束符时未找到匹配记录），则 *getutxid()* 和 *getutxline()* 都会返回 `NULL`。  '
- en: 'On some UNIX implementations, *getutxline()* and *getutxid()* treat the static
    area used for returning the *utmpx* structure as a kind of cache. If they determine
    that the record placed in this cache by a previous *getutx*()* call matches the
    criteria specified in ut, then no file read is performed; the call simply returns
    the same record once more (SUSv3 permits this behavior). Therefore, to prevent
    the same record from being repeatedly returned when calling *getutxline()* and
    *getutxid()* within a loop, we must zero out this static data structure, using
    code such as the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '在某些 UNIX 实现中，*getutxline()* 和 *getutxid()* 将用于返回 *utmpx* 结构的静态区域视为一种缓存。如果它们确定由先前的
    *getutx*() 调用放入此缓存的记录与 *ut* 中指定的标准匹配，则不会执行文件读取操作；调用仅会再次返回相同的记录（SUSv3 允许这种行为）。因此，为了防止在循环中多次调用
    *getutxline()* 和 *getutxid()* 时重复返回相同的记录，我们必须清除这个静态数据结构，可以使用如下代码：  '
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The *glibc* implementation doesn’t perform this type of caching, but we should
    nevertheless employ this technique for the sake of portability.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*glibc* 实现不执行这种类型的缓存，但为了可移植性，我们仍然应该采用这种技术。  '
- en: Note
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '注意  '
- en: Because the *getutx*()* functions return a pointer to a statically allocated
    structure, they are not reentrant. The GNU C library provides reentrant versions
    of the traditional *utmp* functions (*getutent_r()*, *getutid_r()*, and *getutline_r()*),
    but doesn’t provide reentrant versions of their *utmpx* counterparts. (SUSv3 doesn’t
    specify the reentrant versions.)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '因为 *getutx*() 函数返回一个指向静态分配结构的指针，所以它们是不可重入的。GNU C 库提供了传统的 *utmp* 函数的重入版本（*getutent_r()*、*getutid_r()*
    和 *getutline_r()*），但没有提供它们的 *utmpx* 对应函数的重入版本。（SUSv3 并未指定重入版本。）  '
- en: By default, all of the *getutx*()* functions work on the standard `utmp` file.
    If we want to use another file, such as the `wtmp` file, then we must first call
    *utmpxname()*, specifying the desired pathname.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '默认情况下，所有 *getutx*() 函数都作用于标准的 `utmp` 文件。如果我们想使用其他文件，如 `wtmp` 文件，则必须首先调用 *utmpxname()*，指定所需的路径名。  '
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '注意  '
- en: Returns 0 on success, or -1 on error
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '成功时返回 0，错误时返回 -1  '
- en: The *utmpxname()* function merely records a copy of the pathname given to it.
    It doesn’t open the file, but does close any file previously opened by one of
    the other calls. This means that *utmpxname()* doesn’t return an error if an invalid
    pathname is specified. Instead, when one of the *getutx*()* functions is later
    called, it will return an error (i.e., `NULL`, with *errno* set to `ENOENT`) when
    it fails to open the file.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*utmpxname()* 函数仅记录给定路径名的副本。它不会打开文件，但会关闭任何之前由其他调用打开的文件。这意味着，如果指定了无效的路径名，*utmpxname()*
    不会返回错误。相反，当稍后调用某个 *getutx*() 函数时，如果未能打开文件，它将返回错误（即 `NULL`，并将 *errno* 设置为 `ENOENT`）。  '
- en: Note
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '注意  '
- en: Although not specified in SUSv3, most UNIX implementations provide *utmpxname()*
    or the analogous *utmpname()* function.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '尽管 SUSv3 中未指定，但大多数 UNIX 实现都提供 *utmpxname()* 或类似的 *utmpname()* 函数。  '
- en: Example program
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '示例程序  '
- en: 'The program in [Example 40-2](ch40.html#displaying_the_contents_of_a_utmpx-forma
    "Example 40-2. Displaying the contents of a utmpx-format file") uses some of the
    functions described in this section to dump the contents of a *utmpx*-format file.
    The following shell session log demonstrates the results when we use this program
    to dump the contents of `/var/run/utmp` (the default used by these functions if
    *utmpxname()* is not called):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 40-2](ch40.html#displaying_the_contents_of_a_utmpx-forma "示例 40-2. 显示 *utmpx*
    格式文件的内容") 中的程序使用了本节中描述的一些函数来转储 *utmpx* 格式文件的内容。以下 shell 会话日志演示了当我们使用该程序转储 `/var/run/utmp`（如果未调用
    *utmpxname()*，这些函数使用的默认值）内容时的结果：'
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For brevity, we edited out much of the output produced by the program. The lines
    matching `tty1` to `tty5` are for logins on virtual consoles (`/dev/tty[1-6]`).
    The last line of output is for an *xterm* session on a pseudoterminal.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，我们编辑掉了程序生成的大部分输出。匹配 `tty1` 到 `tty5` 的行是虚拟控制台（`/dev/tty[1-6]`）上的登录记录。最后一行输出是伪终端上的
    *xterm* 会话。
- en: The following output produced by dumping `/var/log/wtmp` shows that when a user
    logs in and out, two records are written to the `wtmp` file. (We edited out all
    of the other output produced by the program.) By searching sequentially through
    the `wtmp` file (using *getutxline()*), these records can be matched via the *ut_line*
    field.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下通过转储 `/var/log/wtmp` 所生成的输出显示了当用户登录和注销时，两个记录会被写入 `wtmp` 文件。（我们编辑掉了程序生成的其他输出。）通过顺序搜索
    `wtmp` 文件（使用 *getutxline()*），这些记录可以通过 *ut_line* 字段匹配。
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Example 40-2. Displaying the contents of a *utmpx*-format file
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 40-2. 显示 *utmpx* 格式文件的内容
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Retrieving the Login Name: *getlogin()*'
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取登录名：*getlogin()*
- en: The *getlogin()* function returns the name of the user logged in on the controlling
    terminal of the calling process. This function uses the information maintained
    in the `utmp` file.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*getlogin()* 函数返回在调用进程的控制终端上登录的用户的用户名。该函数使用保存在 `utmp` 文件中的信息。'
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Returns pointer to username string, or `NULL` on error
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 返回指向用户名字符串的指针，或在发生错误时返回 `NULL`
- en: The *getlogin()* function calls *ttyname()* ([Terminal Identification](ch62.html#terminal_identification
    "Terminal Identification")) to find the name of the terminal associated with the
    calling process’s standard input. It then searches the `utmp` file for a record
    whose *ut_line* value matches this terminal name. If a matching record is found,
    then *getlogin()* returns the *ut_user* string from that record.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*getlogin()* 函数调用 *ttyname()* ([终端标识](ch62.html#terminal_identification "终端标识"))
    来查找与调用进程的标准输入相关联的终端的名称。然后，它在 `utmp` 文件中搜索一个记录，该记录的 *ut_line* 值与该终端名称匹配。如果找到匹配的记录，*getlogin()*
    会返回该记录中的 *ut_user* 字符串。'
- en: If a match is not found or an error occurs, then *getlogin()* returns `NULL`
    and sets *errno* to indicate the error. One reason *getlogin()* may fail is that
    the process doesn’t have a terminal associated with its standard input (`ENOTTY`),
    perhaps because it is daemon. Another possibility is that this terminal session
    is not recorded in `utmp`; for example, some software terminal emulators don’t
    create entries in the `utmp` file.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未找到匹配项或发生错误，*getlogin()* 会返回 `NULL` 并设置 *errno* 以指示错误。*getlogin()* 失败的一个原因可能是进程没有与标准输入相关联的终端（`ENOTTY`），可能是因为它是守护进程。另一个可能的原因是该终端会话未记录在
    `utmp` 中；例如，一些软件终端模拟器不会在 `utmp` 文件中创建条目。
- en: Even in the (unusual) case where a user ID has multiple login names in `/etc/passwd`,
    *getlogin()* is able to return the actual username that was used to log in on
    this terminal because it relies on the `utmp` file. By contrast, using *getpwuid(getuid())*
    always retrieves the first matching record from `/etc/passwd`, regardless of the
    name that was used to log in.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在用户 ID 在 `/etc/passwd` 中有多个登录名的（不常见）情况下，*getlogin()* 仍然能够返回实际用于在该终端登录的用户名，因为它依赖于
    `utmp` 文件。相比之下，使用 *getpwuid(getuid())* 总是从 `/etc/passwd` 中检索到第一个匹配的记录，而不管登录时使用的是什么名字。
- en: Note
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A reentrant version of *getlogin()* is specified by SUSv3, in the form of *getlogin_r()*,
    and this function is provided by *glibc*.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*getlogin()* 的可重入版本由 SUSv3 规定，形式为 *getlogin_r()*，该函数由 *glibc* 提供。'
- en: The `LOGNAME` environment variable can also be used to find a user’s login name.
    However, the value of this variable can be changed by the user, which means that
    it can’t be used to securely identify a user.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`LOGNAME` 环境变量也可以用来查找用户的登录名。然而，该变量的值可以被用户更改，这意味着它不能用于安全地标识用户。'
- en: Updating the `utmp` and `wtmp` Files for a Login Session
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新登录会话的 `utmp` 和 `wtmp` 文件
- en: 'When writing an application that creates a login session (in the manner of,
    say, *login* or *sshd*), we should update the `utmp` and `wtmp` files as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写创建登录会话的应用程序时（例如像 *login* 或 *sshd* 这样的程序），我们应当按照如下方式更新 `utmp` 和 `wtmp` 文件：
- en: On login, a record should be written to the `utmp` file to indicate that this
    user logged in. The application must check whether a record for this terminal
    already exists in the `utmp` file. If a previous record exists, it is overwritten;
    otherwise, a new record is appended to the file. Often, calling *pututxline()*
    (described shortly) is enough to ensure that these steps are correctly performed
    (see [Example 40-3](ch40.html#updating_the_utmp_greater_than_and_wtmp "Example 40-3. Updating
    the utmp and wtmp files") for an example). The output *utmpx* record should have
    at least the *ut_type*, *ut_user*, *ut_tv*, *ut_pid*, *ut_id*, and *ut_line* fields
    filled in. The *ut_type* field should be set to `USER_PROCESS`. The *ut_id* field
    should contain the suffix of the name of the device (i.e., the terminal or pseudoterminal)
    on which the user is logging in, and the *ut_line* field should contain the name
    of the login device, with the leading `/dev/` string removed. (Examples of the
    contents of these two fields are shown in the sample runs of the program in [Example 40-2](ch40.html#displaying_the_contents_of_a_utmpx-forma
    "Example 40-2. Displaying the contents of a utmpx-format file").) A record containing
    exactly the same information is appended to the `wtmp` file.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在登录时，应向 `utmp` 文件写入一条记录，表示该用户已登录。应用程序必须检查该终端的记录是否已经存在于 `utmp` 文件中。如果存在先前的记录，则覆盖该记录；否则，追加一条新记录到文件中。通常，调用
    *pututxline()*（稍后将描述）足以确保这些步骤正确执行（有关示例，请参见 [Example 40-3](ch40.html#updating_the_utmp_greater_than_and_wtmp
    "Example 40-3. 更新 utmp 和 wtmp 文件")）。输出的 *utmpx* 记录应至少填写 *ut_type*、*ut_user*、*ut_tv*、*ut_pid*、*ut_id*
    和 *ut_line* 字段。*ut_type* 字段应设置为 `USER_PROCESS`。*ut_id* 字段应包含设备名称的后缀（即用户登录的终端或伪终端的名称），而
    *ut_line* 字段应包含登录设备的名称，并去掉前缀 `/dev/` 字符串。（这些字段内容的示例可以参见程序在 [Example 40-2](ch40.html#displaying_the_contents_of_a_utmpx-forma
    "Example 40-2. 显示 utmpx 格式文件的内容") 中的示例运行。）一条包含完全相同信息的记录会追加到 `wtmp` 文件中。
- en: Note
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The terminal name acts (via the *ut_line* and *ut_id* fields) as a unique key
    for records in the `utmp` file.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 终端名称（通过 *ut_line* 和 *ut_id* 字段）充当 `utmp` 文件中记录的唯一标识符。
- en: On logout, the record previously written to the `utmp` file should be erased.
    This is done by creating a record with *ut_type* set to `DEAD_PROCESS`, and with
    the same *ut_id* and *ut_line* values as the record written during login, but
    with the *ut_user* field zeroed out. This record is written over the earlier record.
    A copy of the same record is appended to the `wtmp` file.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在登出时，之前写入 `utmp` 文件的记录应该被删除。这是通过创建一条 *ut_type* 设置为 `DEAD_PROCESS` 的记录来完成的，记录中的
    *ut_id* 和 *ut_line* 值与登录时写入的记录相同，但 *ut_user* 字段被置零。这条记录将覆盖先前的记录。相同的记录副本会追加到 `wtmp`
    文件中。
- en: Note
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If we fail to clean up the *utmp* record on logout, perhaps because of a program
    crash, then, on the next reboot, *init* automatically cleans up the record, setting
    its *ut_type* to `DEAD_PROCESS` and zeroing out various other fields of the record.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们未能在登出时清理 *utmp* 记录，可能是因为程序崩溃，那么在下次重启时，*init* 会自动清理该记录，将其 *ut_type* 设置为 `DEAD_PROCESS`，并将记录的其他字段置零。
- en: The `utmp` and `wtmp` files are normally protected so that only privileged users
    can perform updates on these files. The accuracy of *getlogin()* depends on the
    integrity of the `utmp` file. For this, as well as other reasons, the permissions
    on the `utmp` and `wtmp` files should never be set to allow writing by unprivileged
    users.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`utmp` 和 `wtmp` 文件通常是受保护的，只有特权用户才能对这些文件进行更新。*getlogin()* 的准确性取决于 `utmp` 文件的完整性。因此，出于这个原因以及其他原因，`utmp`
    和 `wtmp` 文件的权限绝不能设置为允许非特权用户写入。'
- en: What qualifies as a login session? As we might expect, logins via *login*, *telnet*,
    and *ssh* are recorded in the login accounting files. Most *ftp* implementations
    also create login accounting records. However, are login accounting records created
    for each terminal window started on the system or for invocations of *su*, for
    example? The answer to that question varies across UNIX implementations.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 什么算作登录会话？正如我们所料，*login*、*telnet* 和 *ssh* 登录会话会被记录在登录账务文件中。大多数 *ftp* 实现也会创建登录账务记录。然而，系统上每个启动的终端窗口，或者像
    *su* 这样的调用，是否也会创建登录账务记录呢？这个问题的答案在不同的 UNIX 实现中有所不同。
- en: Note
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Under some terminal emulator programs (e.g., *xterm*), command-line options
    or other mechanisms can be used to determine whether the program updates the login
    accounting files.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些终端仿真程序（例如 *xterm*）下，可以使用命令行选项或其他机制来确定程序是否更新登录记账文件。
- en: The *pututxline()* function writes the *utmpx* structure pointed to by *ut*
    into the `/var/run/utmp` file (or an alternative file if *utmpxname()* was previously
    called).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '*pututxline()* 函数将 *utmpx* 结构（由 *ut* 指向）写入 `/var/run/utmp` 文件（如果之前调用了 *utmpxname()*，则写入替代文件）。'
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Returns pointer to copy of successfully updated record on success, or `NULL`
    on error
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 成功时返回指向已成功更新记录的指针，出错时返回 `NULL`
- en: Before writing the record, *pututxline()* first uses *getutxid()* to search
    forward for a record that may be overwritten. If such a record is found, it is
    overwritten; otherwise, a new record is appended to the end of the file. In many
    cases, an application precedes a call to *pututxline()* by a call to one of the
    *getutx*()* functions, which sets the current file location to the correct record—that
    is, one matching the *getutxid()*-style criteria in the *utmpx* structure pointed
    to by *ut*. If *pututxline()* determines that this has occurred, it doesn’t call
    *getutxid()*.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在写入记录之前，*pututxline()* 首先使用 *getutxid()* 向前查找可能被覆盖的记录。如果找到这样的记录，它将被覆盖；否则，一个新记录将追加到文件的末尾。在许多情况下，应用程序会在调用
    *pututxline()* 之前调用其中一个 *getutx*() 函数，该函数将当前文件位置设置为正确的记录——即匹配 *getutxid()* 风格条件的
    *utmpx* 结构，该结构由 *ut* 指向。如果 *pututxline()* 确定这种情况发生，它就不会调用 *getutxid()*。
- en: Note
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If *pututxline()* makes an internal call to *getutxid()*, this call doesn’t
    change the static area used by the *getutx*()* functions to return the *utmpx*
    structure. SUSv3 requires this behavior from an implementation.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *pututxline()* 内部调用了 *getutxid()*，此调用不会改变 *getutx*() 函数返回的 *utmpx* 结构所使用的静态区域。SUSv3
    要求实现必须具备这种行为。
- en: When updating the `wtmp` file, we simply open the file and append a record to
    it. Because this is a standard operation, *glibc* encapsulates it in the *updwtmpx()*
    function.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 `wtmp` 文件时，我们只需打开文件并追加记录。由于这是一个标准操作，*glibc* 将其封装在 *updwtmpx()* 函数中。
- en: '[PRE12]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The *updwtmpx()* function appends the *utmpx* record pointed to by *ut* to the
    file specified in *wtmpx_file*.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*updwtmpx()* 函数将 *ut* 指向的 *utmpx* 记录追加到 *wtmpx_file* 指定的文件中。'
- en: SUSv3 doesn’t specify *updwtmpx()*, and it appears on only a few other UNIX
    implementations. Other implementations provide related functions—*login(3)*, *logout(3)*,
    and *logwtmp(3)*—which are also in *glibc* and described in the manual pages.
    If such functions are not present, we need to write our own equivalents. (The
    implementation of these functions is not complex.)
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3 没有指定 *updwtmpx()*，它只出现在一些其他 UNIX 实现中。其他实现提供相关函数——*login(3)*、*logout(3)*
    和 *logwtmp(3)*——这些函数也包含在 *glibc* 中，并在手册页中描述。如果没有这些函数，我们需要编写自己的等效函数。（这些函数的实现并不复杂。）
- en: Example program
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例程序
- en: '[Example 40-3](ch40.html#updating_the_utmp_greater_than_and_wtmp "Example 40-3. Updating
    the utmp and wtmp files") uses the functions described in this section to update
    the `utmp` and `wtmp` files. This program performs the required updates to `utmp`
    and `wtmp` in order to log in the user named on the command line, and then, after
    sleeping a few seconds, log them out again. Normally, such actions would be associated
    with the creation and termination of a login session for a user. This program
    uses *ttyname()* to retrieve the name of the terminal device associated with a
    file descriptor. We describe *ttyname()* in [Terminal Identification](ch62.html#terminal_identification
    "Terminal Identification").'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 40-3](ch40.html#updating_the_utmp_greater_than_and_wtmp "示例 40-3. 更新 utmp
    和 wtmp 文件") 使用本节描述的函数来更新 `utmp` 和 `wtmp` 文件。此程序执行所需的更新操作，以便在命令行上登录指定的用户，然后在休眠几秒钟后将其注销。通常，这样的操作与用户登录会话的创建和终止相关联。此程序使用
    *ttyname()* 来检索与文件描述符关联的终端设备的名称。我们在 [终端识别](ch62.html#terminal_identification "终端识别")
    中描述了 *ttyname()*。'
- en: 'The following shell session log demonstrates the operation of the program in
    [Example 40-3](ch40.html#updating_the_utmp_greater_than_and_wtmp "Example 40-3. Updating
    the utmp and wtmp files"). We assume privilege in order to be able to update the
    login accounting files, and then use the program to create a record for the user
    *mtk*:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 shell 会话日志演示了 [示例 40-3](ch40.html#updating_the_utmp_greater_than_and_wtmp
    "示例 40-3. 更新 utmp 和 wtmp 文件") 中程序的操作。我们假设具备权限以便能够更新登录记账文件，然后使用该程序为用户 *mtk* 创建一个记录：
- en: '[PRE13]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'While the *utmpx_login* program was sleeping, we typed *Control-Z* to suspend
    the program and push it into the background. Next, we use the program in [Example 40-2](ch40.html#displaying_the_contents_of_a_utmpx-forma
    "Example 40-2. Displaying the contents of a utmpx-format file") to examine the
    contents of the `utmp` file:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当 *utmpx_login* 程序正在休眠时，我们按下了 *Control-Z*，将程序挂起并推入后台。接下来，我们使用 [示例 40-2](ch40.html#displaying_the_contents_of_a_utmpx-forma
    "示例 40-2. 显示 utmpx 格式文件的内容") 中的程序来检查 `utmp` 文件的内容：
- en: '[PRE14]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Above, we used the *who(1)* command to show that the output of *who* derives
    from *utmp*.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，我们使用 *who(1)* 命令显示 *who* 的输出来自 *utmp*。
- en: 'Next we use our program to examine the contents of the `wtmp` file:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用我们的程序来检查 `wtmp` 文件的内容：
- en: '[PRE15]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Above, we used the *last(1)* command to show that the output of last derives
    from `wtmp`. (For brevity, we have edited the output of the *dump_utmpx* and *last*
    commands in this shell session log to remove lines of output that are irrelevant
    to our discussion.)
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，我们使用了 *last(1)* 命令来显示 `last` 的输出来自 `wtmp`。（为了简洁，我们已编辑此 shell 会话日志中的 *dump_utmpx*
    和 *last* 命令的输出，去除了与我们讨论无关的输出行。）
- en: Next, we use the *fg* command to resume the *utmpx_login* program in the foreground.
    It subsequently writes logout records to the `utmp` and `wtmp` files.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用 *fg* 命令将 *utmpx_login* 程序恢复到前台。随后，它将注销记录写入 `utmp` 和 `wtmp` 文件。
- en: '[PRE16]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We then once more examine the contents of the `utmp` file. We see that the
    `utmp` record was overwritten:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们再次检查 `utmp` 文件的内容。我们看到 `utmp` 记录被覆盖了：
- en: '[PRE17]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The final line of output shows that *who* ignored the `DEAD_PROCESS` record.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行输出显示 *who* 忽略了 `DEAD_PROCESS` 记录。
- en: 'When we examine the `wtmp` file, we see that the `wtmp` record was superseded:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们检查 `wtmp` 文件时，我们看到 `wtmp` 记录被替代了：
- en: '[PRE18]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The final line of output above demonstrates that *last* matches the login and
    logout records in `wtmp` to show the starting and ending times of the completed
    login session.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的最后一行输出演示了 *last* 如何匹配 `wtmp` 中的登录和注销记录，以显示已完成登录会话的开始和结束时间。
- en: Example 40-3. Updating the `utmp` and `wtmp` files
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 40-3. 更新 `utmp` 和 `wtmp` 文件
- en: '[PRE19]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `lastlog` File
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`lastlog` 文件'
- en: The `lastlog` file records the time each user last logged in to the system.
    (This is different from the `wtmp` file, which records all logins and logouts
    by all users.) Among other things, the `lastlog` file allows the *login* program
    to inform users (at the start of a new login session) when they last logged in.
    In addition to updating `utmp` and `wtmp`, applications providing login services
    should also update `lastlog`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`lastlog` 文件记录了每个用户最后一次登录系统的时间。（这与 `wtmp` 文件不同，后者记录了所有用户的所有登录和注销。）其中，`lastlog`
    文件使得 *login* 程序能够在用户开始新登录会话时通知他们最后一次登录的时间。除了更新 `utmp` 和 `wtmp` 文件外，提供登录服务的应用程序还应该更新
    `lastlog`。'
- en: As with the `utmp` and `wtmp` files, there is variation in the location and
    format of the `lastlog` file. (A few UNIX implementations don’t provide this file.)
    On Linux, this file resides at `/var/log/lastlog`, and a constant, `_PATH_LASTLOG`,
    is defined in `<paths.h>` to point to this location. Like the `utmp` and `wtmp`
    files, the `lastlog` file is normally protected so that it can be read by all
    users but can be updated only by privileged processes.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `utmp` 和 `wtmp` 文件一样，`lastlog` 文件的位置和格式有所不同。（一些 UNIX 实现没有提供此文件。）在 Linux 上，该文件位于
    `/var/log/lastlog`，并且在 `<paths.h>` 中定义了一个常量 `_PATH_LASTLOG` 来指向此位置。与 `utmp` 和
    `wtmp` 文件一样，`lastlog` 文件通常是受保护的，使得所有用户可以读取，但只有特权进程才能更新。
- en: 'The records in the `lastlog` file have the following format (defined in `<lastlog.h>`):'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`lastlog` 文件中的记录具有以下格式（定义在 `<lastlog.h>` 中）：'
- en: '[PRE20]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Note that these records don’t include a username or user ID. Instead, the `lastlog`
    file consists of a series of records that are indexed by user ID. Thus, to find
    the `lastlog` record for user ID 1000, we would seek to byte *(1000 * sizeof(struct
    lastlog))* of the file. This is demonstrated in [Example 40-4](ch40.html#displaying_information_from_the_lastlog
    "Example 40-4. Displaying information from the lastlog file"), a program that
    allows us to view the `lastlog` records for the user(s) listed on its command
    line. This is similar to the functionality offered by the *lastlog(1)* command.
    Here is an example of the output produced by running this program:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些记录不包括用户名或用户 ID。相反，`lastlog` 文件由一系列按用户 ID 索引的记录组成。因此，要找到用户 ID 为 1000 的
    `lastlog` 记录，我们需要定位到文件的第 *(1000 * sizeof(struct lastlog))* 字节。这在 [示例 40-4](ch40.html#displaying_information_from_the_lastlog
    "示例 40-4. 从 lastlog 文件中显示信息") 中演示了，程序允许我们查看命令行上列出的用户的 `lastlog` 记录。这与 *lastlog(1)*
    命令提供的功能相似。以下是运行此程序时输出的示例：
- en: '[PRE21]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Performing updates on `lastlog` is similarly a matter of opening the file, seeking
    to the correct location, and performing a write.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 `lastlog` 文件的方法与打开文件、定位到正确位置并进行写入相似。
- en: Note
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: 'Since the `lastlog` file is indexed by user ID, it is not possible to distinguish
    logins under different usernames that have the same user ID. (In [The Password
    File: `/etc/passwd`](ch08.html#the_password_file_colon__solidus_etc_sol "The Password
    File: /etc/passwd"), we noted that it is possible, though unusual, to have multiple
    login names with the same user ID.)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `lastlog` 文件是按用户 ID 索引的，因此无法区分具有相同用户 ID 的不同用户名的登录。（在 [密码文件：`/etc/passwd`](ch08.html#the_password_file_colon__solidus_etc_sol
    "密码文件：/etc/passwd") 中，我们提到过，虽然不常见，但可以有多个登录名对应相同的用户 ID。）
- en: Example 40-4. Displaying information from the `lastlog` file
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 40-4. 从 `lastlog` 文件中显示信息
- en: '[PRE22]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Summary
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'Login accounting records the users currently logged in, as well as all past
    logins. This information is maintained in three files: the `utmp` file, which
    maintains a record of all currently logged-in users; the `wtmp` file, which is
    an audit trail of all logins and logouts; and the `lastlog` file, which records
    the time of last login for each user. Various commands, such as *who* and *last*,
    use the information in these files.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 登录记录会记录当前登录的用户以及所有过去的登录信息。这些信息保存在三个文件中：`utmp` 文件，记录所有当前登录的用户；`wtmp` 文件，是所有登录和登出的审计跟踪；以及
    `lastlog` 文件，记录每个用户的最后登录时间。各种命令，如 *who* 和 *last*，都使用这些文件中的信息。
- en: The C library provides functions to retrieve and update the information in the
    login accounting files. Applications providing login services should use these
    functions to update the login accounting files, so that commands depending on
    this information operate correctly.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: C 库提供了用于检索和更新登录记录文件信息的函数。提供登录服务的应用程序应使用这些函数来更新登录记录文件，以便依赖这些信息的命令能够正确运行。
- en: Further information
  id: totrans-161
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更多信息
- en: Aside from the *utmp(5)* manual page, the most useful place to find further
    information about the login accounting functions is in the source code of the
    various applications that use these functions. See, for example, the sources of
    *mingetty* (or *agetty*), *login*, *init*, *telnet*, *ssh*, and *ftp*.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 *utmp(5)* 手册页面，关于登录记录功能的更多信息，最有用的地方是那些使用这些功能的各种应用程序的源代码。例如，可以查看 *mingetty*（或
    *agetty*）、*login*、*init*、*telnet*、*ssh* 和 *ftp* 的源代码。
- en: Exercises
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: 'Implement *getlogin()*. As noted in [Retrieving the Login Name: *getlogin()*](ch40.html#retrieving_the_login_name_colon_getlogin
    "Retrieving the Login Name: getlogin()"), *getlogin()* may not work correctly
    for processes running under some software terminal emulators; in that case, test
    from a virtual console instead.'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现 *getlogin()*。如在 [获取登录名：*getlogin()*](ch40.html#retrieving_the_login_name_colon_getlogin
    "获取登录名：getlogin()") 中所述，*getlogin()* 可能无法正确工作，尤其是在某些软件终端模拟器下运行的进程中；在这种情况下，请尝试从虚拟控制台进行测试。
- en: Modify the program in [Example 40-3](ch40.html#updating_the_utmp_greater_than_and_wtmp
    "Example 40-3. Updating the utmp and wtmp files") (`utmpx_login.c`) so that it
    updates the `lastlog` file in addition to the `utmp` and `wtmp` files.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 [示例 40-3](ch40.html#updating_the_utmp_greater_than_and_wtmp "示例 40-3. 更新
    utmp 和 wtmp 文件") (`utmpx_login.c`) 中的程序，使其除了更新 `utmp` 和 `wtmp` 文件外，还更新 `lastlog`
    文件。
- en: Read the manual pages for *login(3)*, *logout(3)*, and *logwtmp(3)*. Implement
    these functions.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阅读 *login(3)*、*logout(3)* 和 *logwtmp(3)* 的手册页面。实现这些功能。
- en: Implement a simple version of *who(1)*.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个简单版本的 *who(1)* 命令。
