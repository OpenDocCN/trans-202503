- en: '## **9'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '## **9**'
- en: CROSS-REFERENCES**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**交叉引用**'
- en: '![Image](Images/com.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/com.jpg)'
- en: Two common questions asked while reverse engineering a binary are “Where is
    this function called from?” and “Which functions access this data?” These and
    other similar questions seek to identify and catalog the references to and from
    various resources in a program. The following two examples serve to show the usefulness
    of such questions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在逆向工程一个二进制文件时，两个常见的问题是“这个函数从哪里被调用？”和“哪些函数访问了这个数据？”这些以及其他类似的问题旨在识别并列出程序中对各种资源的引用。以下两个示例展示了这些问题的实用性。
- en: '**Example 1**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 1**'
- en: 'While you are reviewing the large number of ASCII strings in a particular binary,
    you see a string that seems particularly suspicious: “Pay within 72 hours or the
    recovery key will be destroyed and your data will remain encrypted forever.” On
    its own, this string is just circumstantial evidence. It in no way confirms that
    the binary has the capability or intent to execute a crypto ransomware attack.
    The answer to the question “Where is this string referenced in the binary?” would
    help you to quickly track down the program location(s) that makes use of the string.
    This information, in turn, should assist you in locating any related crypto ransomware
    code that uses the string or to demonstrate that the string, in this context,
    is benign.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在查看某个二进制文件中的大量ASCII字符串时，发现了一个特别可疑的字符串：“72小时内付款，否则恢复密钥将被销毁，您的数据将永远保持加密状态。”单凭这个字符串，不能作为确凿证据。它并不能确认该二进制文件具备执行加密勒索攻击的能力或意图。问题“这个字符串在二进制文件中的哪里被引用？”的答案，将帮助你迅速找到使用该字符串的程序位置。这些信息反过来应帮助你定位任何相关的加密勒索代码，或者证明这个字符串在这个上下文中是无害的。
- en: '**Example 2**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 2**'
- en: You have located a function containing a stack-allocated buffer that can be
    overflowed, possibly leading to exploitation of the program, and you want to determine
    if this is actually possible. If you want to develop and demonstrate an exploit,
    the function is useless to you unless you can get it to execute. This leads to
    the question “Which functions call this vulnerable function?” as well as additional
    questions regarding the nature of the data that those functions may pass to the
    vulnerable function. This line of reasoning must continue as you work your way
    back up potential call chains to find one that you can influence to demonstrate
    that the overflow is exploitable.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经定位到一个包含堆栈分配缓冲区的函数，该缓冲区可能会发生溢出，进而导致程序被利用，你想确定这种情况是否真的可能发生。如果你想开发并展示一个利用漏洞的攻击，除非你能够让这个函数执行，否则它对你来说是没用的。这就引出了一个问题：“哪些函数调用了这个易受攻击的函数？”以及关于这些函数可能传递给易受攻击函数的数据性质的其他问题。在你向上回溯潜在的调用链时，这一思路必须继续，以找出一个你可以影响的链路，证明溢出是可以被利用的。
- en: '**Referencing Basics**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**引用基础**'
- en: Ghidra can help you analyze both of these cases (and many others) through its
    extensive mechanisms for displaying and accessing reference information. In this
    chapter, we discuss the types of references that Ghidra makes available, the tools
    for accessing reference information, and ways to interpret that information. In
    [Chapter 10](ch10.xhtml#ch10), we will use Ghidra’s graphing capabilities to examine
    visual representations of reference relationships.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Ghidra可以帮助你分析这两种情况（以及许多其他情况），通过其丰富的机制来展示和访问引用信息。在本章中，我们将讨论Ghidra提供的引用类型、用于访问引用信息的工具以及如何解读这些信息。在[第10章](ch10.xhtml#ch10)中，我们将使用Ghidra的图形功能来检查引用关系的可视化表示。
- en: All references obey the same general traffic rules. Associated with each reference
    is the notion of a direction. All references are made from one address to another
    address. If you are familiar with graph theory, you can think of addresses as
    nodes (or *vertices*) in a directed graph, and references as the *edges* that
    identify directed connections between the nodes. [Figure 9-1](ch09.xhtml#fig9_1)
    provides a quick refresher on basic graph terminology. In this simple graph, three
    nodes—A, B, and C—are connected by two directed edges.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所有引用都遵循相同的一般流量规则。每个引用都与一个方向的概念相关。所有引用都是从一个地址指向另一个地址。如果你熟悉图论，你可以将地址视为有向图中的节点（或*顶点*），而引用则是标识节点间有向连接的*边*。[图
    9-1](ch09.xhtml#fig9_1)提供了基本图形术语的快速回顾。在这个简单的图中，三个节点——A、B 和 C——通过两条有向边连接。
- en: Directed edges are represented by arrows to indicate the allowable direction
    of travel along the edge. In [Figure 9-1](ch09.xhtml#fig9_1), travel from A to
    B is possible, but travel from B to A is not, similar to a one-way street. If
    the arrows were bidirectional, travel in either direction would be acceptable.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有向边通过箭头表示，以指示沿边的允许方向。在[图9-1](ch09.xhtml#fig9_1)中，从A到B是可能的，但从B到A则不行，类似于单行道。如果箭头是双向的，那么两个方向的旅行都是可以接受的。
- en: 'Ghidra has two basic categories of references: forward references and back
    references (each with subcategories as well). The back references are the less
    complex of the two types and are likely to be used most frequently in reverse
    engineering. Back references, also referred to as *cross-references*, provide
    a means to navigate between locations in the listing such as code and data.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Ghidra有两大类引用：正向引用和反向引用（每类还可细分）。反向引用是两类中较为简单的一种，并且在逆向工程中更为常见。反向引用，也叫做*交叉引用*，提供了一种在列表中的位置（如代码和数据）之间导航的方式。
- en: '![image](Images/fig9-1.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig9-1.jpg)'
- en: '*Figure 9-1: Directed graph with three nodes and two edges*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-1：具有三个节点和两条边的有向图*'
- en: '#### ***Cross-References (Back References)***'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '#### ***交叉引用（反向引用）***'
- en: Back references within Ghidra are often referred to simply as *XREFs*, which
    is a mnemonic for the term *cross-reference*. Within this text, we use the term
    *XREF* only when referring to the specific sequence of characters (XREF) in a
    Ghidra listing, menu item, or dialog. In all other cases, we stick to the more
    general term *cross-reference* when referring to back references. Let’s start
    by looking at specific examples of XREFs in Ghidra before moving on to a more
    comprehensive example.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ghidra中，反向引用通常被简称为*XREFs*，这是*cross-reference*（交叉引用）一词的助记符。在本文中，我们仅在指代Ghidra列表、菜单项或对话框中的特定字符序列（XREF）时使用术语*XREF*。在其他情况下，我们使用更通用的术语*cross-reference*来指代反向引用。在进入更全面的示例之前，我们先看一下Ghidra中具体的XREF示例。
- en: '**Example 1: Basic XREFs**'
  id: totrans-17
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**示例1：基本XREF**'
- en: 'Let’s begin by examining some of the XREFs that we encountered in `demo_stackframe`
    (see [Chapter 6](ch06.xhtml#ch06)) and use the following listing to understand
    the associated format and meaning:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过检查在`demo_stackframe`中遇到的一些XREF（请参见[第6章](ch06.xhtml#ch06)）来理解相关的格式和含义：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Ghidra not only indicates that there is a cross-reference with the indicator
    `XREF` ➊ but also shows the number of cross-references with an index value following
    `XREF`. This part of the cross-reference (for example, `XREF[2]:`) is called the
    *XREF header*. Examining the headers in the listing, we can see that most of the
    cross-references have only one referring address, but a few have more.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Ghidra不仅通过指示符`XREF` ➊表示存在交叉引用，还通过`XREF`后面的索引值显示交叉引用的数量。交叉引用的这一部分（例如`XREF[2]:`）称为*XREF头*。通过检查列表中的头部，我们可以看到大多数交叉引用只有一个引用地址，但也有一些有多个。
- en: Following the header is the address associated with the cross-reference ➋, which
    is a navigable object. Following the address, there is a type indicator in parentheses
    ➌. For data cross-references (which is the case in this example), the valid types
    are `R` (indicating that the variable is read at the corresponding XREF address),
    `W` (indicating that the variable is being written to), and `*` (indicating that
    an address of a location is being taken as a pointer). In summary, *data cross-references*
    are identified in the listing where the data is declared, and associated XREF
    entries provide links to the locations where the data is referenced.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 紧跟在头部之后的是与交叉引用相关的地址 ➋，这是一个可导航的对象。在地址之后，括号内有一个类型指示符 ➌。对于数据交叉引用（本示例即为此情况），有效的类型有`R`（表示变量在对应的XREF地址被读取），`W`（表示变量正在写入），以及`*`（表示一个位置的地址被作为指针使用）。总而言之，*数据交叉引用*在声明数据的位置进行标识，相关的XREF条目提供了指向数据被引用位置的链接。
- en: '**FORMATTING XREFS**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**格式化XREF**'
- en: As with most items you encounter in the Listing window, you can control the
    attributes associated with the cross-reference display. Selecting Edit ▸ Tool
    Options opens the editable options for the CodeBrowser. Since an XREF is part
    of the Listing window, the XREFs Field can be found within the Listing Fields
    folder. When it is selected, it will open the dialog shown in [Figure 9-2](ch09.xhtml#fig9_2)
    (here with default options). If you were to change Maximum Number of XREFs to
    Display to 2, the header for all cross-references exceeding this number would
    be displayed as `XREF[more]`. The option to display nonlocal namespaces allows
    you to quickly identify all of the cross-references that are not within the current
    function’s body. All of the options are explained in Ghidra Help.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与你在 Listing 窗口中遇到的大多数项目一样，你可以控制与交叉引用显示相关的属性。选择 编辑 ▸ 工具选项 打开可编辑的 CodeBrowser
    选项。由于 XREF 是 Listing 窗口的一部分，XREF 字段可以在 Listing 字段文件夹中找到。选中后，它会打开如[图 9-2](ch09.xhtml#fig9_2)所示的对话框（此处为默认选项）。如果你将“最大显示
    XREF 数量”更改为 2，则所有超过此数字的交叉引用头将显示为 `XREF[more]`。显示非本地命名空间的选项可以帮助你快速识别所有不在当前函数体内的交叉引用。所有选项的详细说明请参见
    Ghidra 帮助。
- en: '![image](Images/fig9-2.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig9-2.jpg)'
- en: '*Figure 9-2: XREFs Field edit window showing defaults*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-2：显示默认设置的 XREF 字段编辑窗口*'
- en: 'The listing also contains a *code cross-reference* ➍. Code cross-references
    are a very important concept, as they facilitate Ghidra’s generation of function
    graphs and function call graphs, which are the focus of [Chapter 10](ch10.xhtml#ch10).
    A code cross-reference is used to indicate that an instruction transfers or may
    transfer control to another instruction. The manner in which instructions transfer
    control is referred to as a *flow*. Flows may be any of three basic types: sequential,
    jump, or call. Jump and call flows can be further divided according to whether
    the target address is a near or far address.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中还包含一个 *代码交叉引用* ➍。代码交叉引用是一个非常重要的概念，因为它们促进了 Ghidra 的函数图和函数调用图的生成，这也是[第 10 章](ch10.xhtml#ch10)的重点内容。代码交叉引用用于表示一条指令将控制权转移或可能转移到另一条指令。指令转移控制的方式被称为
    *流*。流可以分为三种基本类型：顺序流、跳转流或调用流。跳转流和调用流可以进一步根据目标地址是近地址还是远地址来区分。
- en: 'A *sequential flow* is the simplest flow type, as it represents linear flow
    from one instruction to the next. This is the default execution flow for all nonbranching
    instructions such as `ADD`. There are no special display indicators for sequential
    flows other than the order in which instructions are listed in the disassembly:
    if instruction A has a sequential flow to instruction B, then instruction B will
    immediately follow instruction A in the disassembly listing.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*顺序流* 是最简单的流类型，因为它表示从一条指令到下一条指令的线性流动。这是所有非分支指令（如 `ADD`）的默认执行流。顺序流没有特殊的显示指示符，唯一的标识是指令在反汇编中的排列顺序：如果指令
    A 有一个顺序流指向指令 B，那么指令 B 将紧跟在反汇编列表中的指令 A 后面。'
- en: '**Example 2: Jump and Call XREFs**'
  id: totrans-28
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**示例 2：跳转和调用 XREF**'
- en: 'Let’s take a quick look at a new example containing code cross-references that
    demonstrate jumps and calls. As with data cross-references, code cross-references
    also have an associated XREF entry in the Listing window. The following listing
    shows information associated with the function `main`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一个包含代码交叉引用的新示例，展示跳转和调用的情况。与数据交叉引用一样，代码交叉引用也在 Listing 窗口中有一个相关的 XREF 条目。以下列出了与
    `main` 函数相关的信息：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can clearly identify the three XREFs associated with the stack variable
    ➊ as well as the XREF associated with the function itself ➋. Let’s decode the
    meaning of the XREF, `entry:0040121e(c)`*.* The address (or in this case, identifier)
    before the colon indicates the referring (or source) entity. In this case, control
    is transferred from `entry`. To the right of the colon is the specific address
    within `entry` that is the source of the cross-reference. The suffix `(c)` indicates
    that this is a `CALL` to `main`. Stated simply, the cross-reference says, “`main`
    is called from address `0040121e` within `entry`.”
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以清楚地识别与堆栈变量 ➊ 相关的三个 XREF，以及与函数本身 ➋ 相关的 XREF。我们来解码 XREF 的含义，`entry:0040121e(c)`*.*
    冒号前的地址（或者在这个例子中是标识符）表示引用（或源）实体。在这种情况下，控制从 `entry` 转移。冒号右侧是 `entry` 中具体的地址，是交叉引用的来源。后缀
    `(c)` 表示这是对 `main` 的 `CALL`。简单来说，交叉引用的意思是，“`main` 是从 `entry` 中的地址 `0040121e` 被调用的。”
- en: 'If we double-click the cross-reference address to follow the link, we are taken
    to the specified address within `entry` where we can examine the call. While the
    XREF is a unidirectional link, we can quickly return to `main` by double-clicking
    the function name (`main`) or using the backward navigation arrow in the CodeBrowser
    toolbar:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们双击交叉引用地址以跟随链接，我们将被带到 `entry` 中指定的地址，在那里可以查看调用。虽然 XREF 是单向链接，但我们可以通过双击函数名（`main`）或使用
    CodeBrowser 工具栏中的向后导航箭头快速返回到 `main`。
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the following listing, the `(j)` suffix on the XREF indicates that this
    labeled location is the target of a `JUMP`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下的列表中，XREF 上的 `(j)` 后缀表示该标记位置是 `JUMP` 的目标：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Similar to the previous example, we can double-click the XREF address ➋ to navigate
    to the statement that transferred control. We can return by double-clicking the
    associated label ➊.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于之前的示例，我们可以双击 XREF 地址 ➋ 来导航到转移控制的语句。我们可以通过双击相关的标签 ➊ 返回。
- en: '#### ***References Example***'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '#### ***引用示例***'
- en: 'Let’s walk through an example from source code to disassembly to demonstrate
    many types of cross-references. The following program, *simple_flows.c*, contains
    various operations that exercise Ghidra’s cross-referencing features, as noted
    in the comment text:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个源代码到反汇编的示例，展示多种类型的交叉引用。以下程序 *simple_flows.c* 包含了多个操作，展示了 Ghidra 的交叉引用功能，如注释文本所示：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Code Cross-References**'
  id: totrans-40
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**代码交叉引用**'
- en: '[Listing 9-1](ch09.xhtml#exa9_1) shows the disassembly of the preceding program.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 9-1](ch09.xhtml#exa9_1) 显示了前面程序的反汇编。'
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 9-1: Disassembly of main in* simple_flows.exe'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 9-1：* simple_flows.exe 中 main 函数的反汇编'
- en: Every instruction other than `JMP` ➍ and `RET` ➏ has an associated sequential
    flow to its immediate successor. Instructions used to invoke functions, such as
    the x86 `CALL` instruction ➌, are assigned a *call flow*, indicating transfer
    of control to the target function. Call flows are noted by XREFs at the target
    function (the destination address of the flow). The disassembly of the `callflow`
    function referenced in [Listing 9-1](ch09.xhtml#exa9_1) is shown in [Listing 9-2](ch09.xhtml#exa9_2).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `JMP` ➍ 和 `RET` ➏ 指令之外，每条指令都与其紧随其后的指令存在关联的顺序流。用于调用函数的指令，如 x86 的 `CALL` 指令
    ➌，会被分配一个 *调用流*，表示控制转移到目标函数。调用流通过 XREF 在目标函数处标记（即流的目标地址）。在 [列表 9-1](ch09.xhtml#exa9_1)
    中引用的 `callflow` 函数的反汇编展示在 [列表 9-2](ch09.xhtml#exa9_2) 中。
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 9-2: Disassembly of the* callflow *function*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 9-2：* callflow *函数的反汇编*'
- en: '**EXTRA XREFS?**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**额外的 XREF？**'
- en: 'Every now and again, you see something in a listing that seems anomalous. [Listing
    9-2](ch09.xhtml#exa9_2) has two pointer XREFs, `0040010c(*)` and `004001e4(*)`,
    that are not easily explained. We immediately understood the two XREFs that we
    could trace back to the calls to `callflow` in `main`. What are the other two
    XREFs? It turns out that these are an interesting artifact of this particular
    code. This program was compiled for Windows, which results in a PE file, and the
    two anomalous XREFs take us to the PE header in the Headers section of the listing.
    The two reference addresses (including the associated bytes) are shown here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 时不时地，你会在列表中看到一些似乎异常的内容。[列表 9-2](ch09.xhtml#exa9_2) 中有两个指针 XREF，`0040010c(*)`
    和 `004001e4(*)`，它们不容易解释。我们立即理解了两个 XREF，可以追溯到 `main` 中对 `callflow` 的调用。那另外两个 XREF
    是什么呢？事实证明，这些是该特定代码的有趣现象。这个程序是为 Windows 编译的，因此生成了一个 PE 文件，而这两个异常的 XREF 带我们进入了列表中
    Headers 部分的 PE 头。这里显示了这两个引用地址（包括相关字节）：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Why is this function referenced in the PE header? A quick Google search can
    help us understand what is happening: `callflow` just happens to be the very first
    thing in the text section, and the two PE fields indirectly reference the start
    of the text section, hence the unanticipated XREFs associated with the `callflow`
    function.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这个函数在 PE 头中被引用？一个快速的 Google 搜索可以帮助我们理解发生了什么：`callflow`恰好是文本段中的第一个内容，而两个 PE
    字段间接地引用了文本段的起始位置，因此与 `callflow` 函数相关的 XREF 是出乎意料的。
- en: 'In this example, we see that `callflow` is called twice from `main`: once from
    address `00401030` and again from address `00401054`. Cross-references resulting
    from function calls are distinguished by the suffix `(c)`. The source location
    displayed in the cross-references indicates both the address from which the call
    is being made and the function that contains the call.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们看到`callflow`被`main`调用了两次：一次来自地址`00401030`，另一次来自地址`00401054`。由函数调用引起的交叉引用通过后缀`(c)`进行区分。交叉引用中显示的源位置既表示调用的地址，也表示包含该调用的函数。
- en: A *jump flow* is assigned to each unconditional and conditional branch instruction.
    Conditional branches are also assigned sequential flows to account for control
    flow when the branch is not taken; unconditional branches have no associated sequential
    flow because the branch is always taken. Jump flows are associated with jump-style
    cross-references displayed at the target of the `JNZ` ➎ in [Listing 9-1](ch09.xhtml#exa9_1).
    As with call-style cross-references, jump cross-references display the address
    of the referring location (the source of the jump). Jump cross-references are
    distinguished by the `(j)` suffix.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 每个无条件和条件分支指令都分配了一个*跳转流*。条件分支还会分配顺序流，以处理分支未被执行时的控制流；无条件分支没有关联的顺序流，因为该分支总是会被执行。跳转流与显示在[清单9-1](ch09.xhtml#exa9_1)中的`JNZ`
    ➎目标处的跳转式交叉引用相关。与调用式交叉引用一样，跳转交叉引用显示引用位置的地址（跳转的来源）。跳转交叉引用通过`(j)`后缀加以区分。
- en: '**BASIC BLOCKS**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**基本块**'
- en: In program analysis, a *basic block* is a maximal sequence of instructions that
    executes, without branching, from beginning to end. Each basic block therefore
    has a single entry point (the first instruction in the block) and a single exit
    point (the last instruction in the block). The first instruction in a basic block
    is often the target of a branching instruction, while the last instruction is
    often a branch instruction. The first instruction may be the target of multiple
    code cross-references. Other than the first instruction, no other instruction
    within a basic block can be the target of a code cross-reference. The last instruction
    of a basic block may be the source of multiple code cross-references, such as
    a conditional jump, or it may flow into an instruction that is the target of multiple
    code cross-references (which, by definition, must begin a new basic block).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序分析中，*基本块*是一个最大化的指令序列，从头到尾执行且不发生分支。因此，每个基本块都有一个入口点（块中的第一条指令）和一个出口点（块中的最后一条指令）。基本块中的第一条指令通常是分支指令的目标，而最后一条指令通常是分支指令。第一条指令可能是多个代码交叉引用的目标。除了第一条指令外，基本块中的其他任何指令都不能成为代码交叉引用的目标。基本块的最后一条指令可能是多个代码交叉引用的来源，例如条件跳转，或者它可能流向一个作为多个代码交叉引用目标的指令（根据定义，这必须开始一个新的基本块）。
- en: '**Data Cross-References**'
  id: totrans-55
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**数据交叉引用**'
- en: '*Data cross-references* are used to track how data is accessed within a binary.
    The three most commonly encountered types of data cross-references indicate when
    a location is being read, when a location is being written, and when the address
    of a location is being taken. The global variables from the previous sample program
    are shown in [Listing 9-3](ch09.xhtml#exa9_3), as they provide several examples
    of data cross-references.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*数据交叉引用*用于跟踪二进制文件中数据的访问方式。最常见的三种数据交叉引用类型分别表示何时读取某个位置、何时写入某个位置以及何时获取某个位置的地址。之前示例程序中的全局变量在[清单9-3](ch09.xhtml#exa9_3)中展示，因为它们提供了多个数据交叉引用的示例。'
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 9-3: Global variables referenced in* simple_flows.c'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单9-3：在* simple_flows.c 中引用的全局变量'
- en: A *read cross-reference* indicates that the contents of a memory location are
    being read. Read cross-references can originate only from an instruction address
    but may refer to any program location. The global variable `read_it` is read twice
    in [Listing 9-1](ch09.xhtml#exa9_1). The associated cross-reference comments shown
    in this listing indicate exactly which locations in `main` are referencing `read_it`
    and are recognizable as read cross-references from the `(R)` suffix. The read
    performed on `read_it` ➋ in [Listing 9-1](ch09.xhtml#exa9_1) is a 32-bit read
    into the `ECX` register, which leads Ghidra to format `read_it` as an `undefined4`
    (a 4-byte value of unspecified type). Ghidra often attempts to infer the size
    of a data item based on how the item is manipulated by code throughout a binary.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*读取交叉引用*表示正在读取内存位置的内容。读取交叉引用只能来自指令地址，但可以引用任何程序位置。全局变量`read_it`在[清单9-1](ch09.xhtml#exa9_1)中被读取了两次。该清单中显示的相关交叉引用注释准确地指示了`main`中哪些位置引用了`read_it`，并且可以通过后缀`(R)`识别为读取交叉引用。在[清单9-1](ch09.xhtml#exa9_1)中对`read_it`的读取➋是一次32位的读取操作，结果存储在`ECX`寄存器中，这导致Ghidra将`read_it`格式化为`undefined4`（一个4字节的未指定类型的值）。Ghidra通常会尝试根据代码在二进制文件中的操作推断数据项的大小。'
- en: The global variable `write_it` is referenced three times in [Listing 9-1](ch09.xhtml#exa9_1).
    Associated *write cross-references* are generated and displayed as comments for
    the `write_it` variable, indicating the program locations that modify the contents
    of the variable. Write cross-references utilize the `(W)` suffix. In this case,
    Ghidra did not format `write_it` as a 4-byte variable even though there seems
    to be enough information to do so. As with read cross-references, write cross-references
    can originate only from a program instruction but may reference any program location.
    Generally, a write cross-reference that targets a program instruction byte is
    indicative of self-modifying code and is frequently encountered in malware de-obfuscation
    routines.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 全局变量`write_it`在[清单9-1](ch09.xhtml#exa9_1)中被引用了三次。相关的*写入交叉引用*被生成并作为注释显示在`write_it`变量旁边，指示修改该变量内容的程序位置。写入交叉引用使用`(W)`后缀。在这种情况下，尽管似乎有足够的信息，Ghidra并没有将`write_it`格式化为4字节变量。与读取交叉引用一样，写入交叉引用只能来源于程序指令，但可能引用任何程序位置。通常，针对程序指令字节的写入交叉引用表明是自修改代码，并且在恶意软件去混淆程序中经常遇到。
- en: The third type of data cross-reference, a *pointer cross-reference*, indicates
    that the address of a location is being used (rather than the content of the location).
    The address of global variable `ref_it` is taken ➊ in [Listing 9-1](ch09.xhtml#exa9_1),
    resulting in the pointer cross-reference at `ref_it` in [Listing 9-3](ch09.xhtml#exa9_3),
    as indicated by the suffix `(*)`. Pointer cross-references are commonly the result
    of address derivations either in code or in data. As you saw in [Chapter 8](ch08.xhtml#ch08),
    array access operations are typically implemented by adding an offset to the starting
    address of the array, and the first address in most global arrays can often be
    recognized by the presence of a pointer cross-reference. For this reason, most
    string literals (strings being arrays of characters in C/C++) are the targets
    of pointer cross-references.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种数据交叉引用，*指针交叉引用*，表示正在使用位置的地址（而不是位置的内容）。全局变量`ref_it`的地址在[清单9-1](ch09.xhtml#exa9_1)中被获取➊，这导致了[清单9-3](ch09.xhtml#exa9_3)中`ref_it`的指针交叉引用，如后缀`(*)`所示。指针交叉引用通常是代码或数据中的地址推导的结果。如你在[第8章](ch08.xhtml#ch08)中看到的，数组访问操作通常通过向数组起始地址添加偏移量来实现，并且大多数全局数组的第一个地址通常可以通过存在指针交叉引用来识别。因此，大多数字符串字面量（在C/C++中，字符串是字符数组）是指针交叉引用的目标。
- en: 'Unlike read and write cross-references, which can originate only from instruction
    locations, pointer cross-references can originate from either instruction locations
    or data locations. An example of pointers that can originate from a program’s
    data section is any table of addresses (such as a vftable, which results in the
    generation of a pointer cross-reference from each entry in the table to the corresponding
    virtual function). Let’s see this in context using the `SubClass` example from
    [Chapter 8](ch08.xhtml#ch08). The disassembly for the vftable for `SubClass` is
    shown here:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 与只能从指令位置起源的读写交叉引用不同，指针交叉引用可以从指令位置或数据位置起源。来自程序数据区的指针交叉引用的一个例子是任何地址表（例如虚函数表 vftable，生成指向每个条目的指针交叉引用，指向相应的虚函数）。让我们通过
    [第 8 章](ch08.xhtml#ch08) 中的 `SubClass` 示例来看这个问题。下面显示的是 `SubClass` 的虚函数表的反汇编：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here you see that the data item at location `0040814c` ➊ is a pointer to `BaseClass::vfunc2`.
    Navigating to `BaseClass::vfunc2` presents us with the following listing:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到位于 `0040814c` 位置的 ➊ 数据项是指向 `BaseClass::vfunc2` 的指针。导航到 `BaseClass::vfunc2`
    会显示以下列表：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Unlike most functions, this function has no code cross-references. Instead,
    we see two pointer cross-references indicating that the address of the function
    is derived in two locations. The second XREF ➋ refers back to the `SubClass` vftable
    entry discussed earlier. Following the first XREF ➊ would lead us to the vftable
    for `BaseClass`, which also contains a pointer to this virtual function.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数函数不同，这个函数没有代码交叉引用。相反，我们看到两个指针交叉引用，表示该函数的地址在两个位置派生。第二个 XREF ➋ 回溯到之前讨论的 `SubClass`
    的虚函数表（vftable）条目。跟踪第一个 XREF ➊ 将引导我们到 `BaseClass` 的虚函数表，其中也包含指向这个虚函数的指针。
- en: This example demonstrates that C++ virtual functions are rarely called directly
    and are usually not the target of a call cross-reference. Because of the way vftables
    are created, all C++ virtual functions will be referred to by at least one vftable
    entry and will always be the target of at least one pointer cross-reference. (Remember
    that overriding a virtual function is not mandatory.)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子展示了 C++ 虚函数很少直接调用，通常也不是调用交叉引用的目标。由于虚函数表的创建方式，所有 C++ 虚函数将至少通过一个虚函数表条目进行引用，并且总会是至少一个指针交叉引用的目标。（记住，重写虚函数并不是强制性的。）
- en: When a binary contains sufficient information, Ghidra is able to locate vftables
    for you. Any vftables that Ghidra finds are listed as an entry under the vftable’s
    corresponding class entry within the *Classes* folder of the Symbol Tree. Clicking
    a vftable in the Symbol Tree window navigates you to the vftable location in the
    program’s data section.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当二进制文件包含足够的信息时，Ghidra 能够为你定位虚函数表。Ghidra 找到的任何虚函数表都会作为条目列出在符号树（Symbol Tree）中
    *Classes* 文件夹下，且该条目对应的类条目下。点击符号树窗口中的虚函数表将引导你到程序数据区的虚函数表位置。
- en: '### **Reference Management Windows**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '### **引用管理窗口**'
- en: By now, you’ve probably noticed that XREF annotations are quite common in the
    Listing window. This is no accident, as the links formed by cross-references are
    the glue that hold a program together. Cross-references tell the story of intra-
    and inter-functional dependencies, and most successful reverse engineering efforts
    demand a comprehensive understanding of their behavior. The sections that follow
    move beyond the basic display and navigational usefulness of cross-references
    to introduce several options for managing cross-references within Ghidra.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你可能已经注意到 XREF 注释在列出窗口中非常常见。这绝非偶然，因为交叉引用形成的链接是将一个程序连接在一起的“粘合剂”。交叉引用讲述了内部和外部功能依赖关系的故事，而大多数成功的逆向工程工作需要对这些行为有全面的理解。接下来的章节将超越交叉引用的基本显示和导航功能，介绍几种在
    Ghidra 中管理交叉引用的选项。
- en: '***XRefs Window***'
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***XRefs 窗口***'
- en: 'You can use XREF headers to learn more about a particular cross-reference,
    as shown in the following listing:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 XREF 头部来了解更多关于特定交叉引用的信息，如以下列表所示：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Double-clicking the `XREF[2]` header ➊ will bring up the associated XRefs window
    shown in [Figure 9-3](ch09.xhtml#fig9_3) with a more detailed listing of the cross-references.
    By default, the window shows the location, label (if applicable), referring disassembly,
    and reference type.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 双击 `XREF[2]` 头部 ➊ 将弹出关联的 XRefs 窗口，如 [图 9-3](ch09.xhtml#fig9_3) 所示，详细列出了交叉引用。默认情况下，窗口显示位置、标签（如果适用）、引用的反汇编代码和引用类型。
- en: '![image](Images/fig9-3.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig9-3.jpg)'
- en: '*Figure 9-3: XRefs window*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-3：XRefs 窗口*'
- en: '#### ***References To***'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '#### ***引用到***'
- en: Another window that can be helpful in understanding the program flow is the
    References To window. Right-clicking any address in the Listing window and choosing
    **References** ▸ **Show Reference to Address** brings up the window shown in [Figure
    9-4](ch09.xhtml#fig9_4).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有助于理解程序流程的窗口是“引用到”窗口。在列表窗口中右键点击任何地址，选择**引用** ▸ **显示引用地址**，就会弹出如[图9-4](ch09.xhtml#fig9_4)所示的窗口。
- en: '![image](Images/fig9-4.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig9-4.jpg)'
- en: '*Figure 9-4: References To window*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-4：引用到窗口*'
- en: In this example, we have selected the starting address of the `helper` function.
    Within this window, you can navigate to the associated location by clicking any
    entry in the window.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们选择了`helper`函数的起始地址。在这个窗口中，你可以通过点击窗口中的任何条目来导航到相关位置。
- en: '***Symbol References***'
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***符号引用***'
- en: Another reference view that was introduced in “[The Symbol Table and Symbol
    References Windows](ch05.xhtml#ch05lev85)” on [page 82](ch05.xhtml#page_82) is
    the combination of the Symbol Table and Symbol Reference windows. By default,
    when you choose Window ▸ Symbol References, you get two related windows. One displays
    every symbol in the entire symbol table. The other displays the associated references
    to the symbols. Selecting any entry in the Symbol Table window (function, vftable,
    and so on) causes the associated symbol references to be displayed in the Symbol
    References window.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第82页](ch05.xhtml#page_82)的“[符号表和符号引用窗口](ch05.xhtml#ch05lev85)”中介绍的另一个参考视图是符号表和符号引用窗口的组合。默认情况下，当你选择“窗口
    ▸ 符号引用”时，会显示两个相关的窗口。一个显示整个符号表中的每个符号，另一个显示与符号相关的引用。在符号表窗口中选择任何条目（例如函数、vftable等）会导致在符号引用窗口中显示相关的符号引用。
- en: Reference lists can be used to rapidly identify every location from which a
    particular function is called. For example, many people consider the C `strcpy`
    function to be dangerous as it copies a source array of characters, up to and
    including the associated null termination character, to a destination array, with
    no checks whatsoever that the destination array is large enough to hold all of
    the characters from the source. You could locate any one call to `strcpy` in your
    listing and use the aforementioned method to open the References To window, but
    if you don’t want to take the time to find `strcpy` used somewhere in the binary,
    you can open the Symbol References window and quickly locate `strcpy` and all
    associated references.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 引用列表可用于快速识别从哪个位置调用了特定的函数。例如，许多人认为C语言的`strcpy`函数是危险的，因为它会将源字符数组（包括关联的空字符终止符）复制到目标数组中，而根本没有检查目标数组是否足够大以容纳源数组中的所有字符。你可以在列表中定位到任何一个`strcpy`的调用，并使用上述方法打开“引用到”窗口，但如果你不想花时间在二进制文件中找到`strcpy`的使用位置，可以打开符号引用窗口，快速定位到`strcpy`及其所有相关引用。
- en: '***Advanced Reference Manipulation***'
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***高级引用操作***'
- en: At the start of this chapter, we equated the term *back reference* with *cross-reference*
    and briefly mentioned that Ghidra also has *forward references*, of which there
    are two types. *Inferred forward references* are generally added to the listing
    automatically and correspond one-for-one to back references, although inferred
    forward references are travelled in the opposite direction. In other words, we
    traverse back references from a target address back to a source address, and we
    traverse inferred forward references from a source address forward to a target
    address.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章开始时，我们将*回引用*与*交叉引用*等同，并简要提到Ghidra还具有*前向引用*，其中有两种类型。*推断前向引用*通常会自动添加到列表中，并与回引用一一对应，尽管推断前向引用是沿相反方向遍历的。换句话说，我们从目标地址回溯到源地址时遍历回引用，而我们从源地址向前遍历到目标地址时则遍历推断前向引用。
- en: The second type is an *explicit forward reference*. There are several types
    of explicit forward references, and their management is much more complex than
    other cross-references. The types of explicit forward references include memory
    references, external references, stack references, and register references. In
    addition to viewing references, Ghidra allows you to add and edit a variety of
    reference types.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种类型是*显式前向引用*。显式前向引用有多种类型，它们的管理比其他交叉引用复杂得多。显式前向引用的类型包括内存引用、外部引用、栈引用和寄存器引用。除了查看引用外，Ghidra还允许你添加和编辑各种类型的引用。
- en: You may need to add your own cross-references when Ghidra’s static analysis
    cannot determine jump or call targets that are computed at runtime, but you know
    the target from other analysis. In the following code, which we last saw in [Chapter
    8](ch08.xhtml#ch08), a virtual function is called.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Ghidra 的静态分析无法确定在运行时计算出的跳转或调用目标，但你通过其他分析知道目标时，你可能需要手动添加交叉引用。在以下代码中，我们在[第 8
    章](ch08.xhtml#ch08)中最后看到过，它调用了一个虚函数。
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The value held in `EAX` ➋ depends on the value of the pointer passed in `param_1`
    ➊. As a result, Ghidra does not have enough information to create a cross-reference
    linking `00010744` (the address of the `CALL` instruction) to the target of the
    call. Manually adding a cross-reference (to `SubClass::vfunc3` for example) would,
    among other things, link the target functions into a call graph, thereby improving
    Ghidra’s analysis of the program. Right-clicking the call ➋ and selecting **References**
    ▸ **Add Reference from** opens the dialog shown in [Figure 9-5](ch09.xhtml#fig9_5).
    This dialog is also available through the References ▸ Add/Edit option.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`EAX` ➋ 中存储的值取决于通过 `param_1` ➊ 传递的指针的值。因此，Ghidra 没有足够的信息来创建交叉引用，将 `00010744`（`CALL`
    指令的地址）与调用的目标关联。手动添加交叉引用（例如，指向 `SubClass::vfunc3`）将使目标函数被链接到调用图中，从而改善 Ghidra 对程序的分析。右键点击调用
    ➋ 并选择 **引用** ▸ **从中添加引用** 打开如[图 9-5](ch09.xhtml#fig9_5)所示的对话框。此对话框也可以通过“引用” ▸
    “添加/编辑”选项访问。'
- en: '![image](Images/fig9-5.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig9-5.jpg)'
- en: '*Figure 9-5: The Add Reference dialog*'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-5：添加引用对话框*'
- en: Specify the address of the target function as the To Address setting and make
    sure that the correct setting for Ref-Type is selected. When you close the dialog
    with the Add button, Ghidra creates the reference, and a new `(c)` cross-reference
    appears at the target address. More information on forward references, including
    the remaining reference types as well as reference manipulation, can be found
    in Ghidra Help.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 将目标函数的地址指定为“目标地址”设置，并确保已选择正确的引用类型设置。当你点击“添加”按钮关闭对话框时，Ghidra 会创建引用，并在目标地址处出现新的`(c)`交叉引用。关于正向引用的更多信息，包括剩余的引用类型和引用操作，请参见
    Ghidra 帮助文档。
- en: '**Summary**'
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: References are powerful tools to help you understand how artifacts within a
    binary are related. We discussed cross-references in detail and introduced some
    other capabilities associated with references that will be visited again in later
    chapters. In the next chapter, we look at visual representations of references
    and how the resulting graphs can help us better understand the control flows within
    functions and the relationships between functions in our binaries.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 引用是强大的工具，可以帮助你理解二进制文件中各个构件之间的关系。我们详细讨论了交叉引用，并介绍了与引用相关的其他一些功能，这些功能将在后续章节中再次讨论。在下一章中，我们将探讨引用的可视化表示，以及生成的图表如何帮助我们更好地理解函数内的控制流以及二进制文件中函数之间的关系。
