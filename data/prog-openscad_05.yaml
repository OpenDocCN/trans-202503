- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Modules
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 模块
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: In this chapter, you’ll learn how to turn complex designs into more manageable
    components called modules. *Modules* are separate sections of code that organize
    a collection of stand-alone statements, and they’re particularly useful for two
    reasons. If your code is long and complicated, using modules can break your code
    into smaller subsections, which helps make your code more readable. And if your
    design has duplicate or similar shapes, you can use a single module to define
    the shape, reducing the amount of code you need to write to create complex designs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何将复杂的设计转化为更易管理的组件，这些组件被称为模块。*模块*是代码的独立部分，它们组织了一系列独立的语句，特别有两个好处。如果你的代码很长且复杂，使用模块可以将代码分解成更小的子部分，有助于提高代码的可读性。如果你的设计中有重复或相似的形状，你可以使用一个模块来定义该形状，从而减少需要编写的代码量，便于创建复杂的设计。
- en: This chapter also describes how to use variables and parameters to customize
    your modules. Finally, we’ll explain how to group similar modules into a separate
    file (often called a *library*) to make it easier to organize designs, share designs,
    and use designs others have created.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还介绍了如何使用变量和参数来自定义你的模块。最后，我们将解释如何将相似的模块分组到一个单独的文件中（通常称为*库*），以便更容易地组织设计、共享设计并使用别人创建的设计。
- en: Simplifying Code with Modules
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简化代码与模块
- en: To understand how using modules might simplify your code, let’s take another
    look at the code for drawing the cross-shaped cookie cutter ([Figure 5-1](#figure5-1))you
    built in Chapter 3.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解使用模块如何简化你的代码，让我们再看看你在第3章中构建的十字形饼干切割器的代码（[图 5-1](#figure5-1)）。
- en: '![f05001](image_fi/279547c05/f05001.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![f05001](image_fi/279547c05/f05001.png)'
- en: 'Figure 5-1: The cross-shaped cookie cutter'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-1：十字形饼干切割器
- en: We’ve reproduced the code in [Listing 5-1](#listing5-1). Do you see any repeated
    code?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将代码复制到[列表 5-1](#listing5-1)中。你能看到任何重复的代码吗？
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 5-1: The original cross-shaped cookie cutter program'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-1：原始的十字形饼干切割器程序
- en: The cookie cutter is made by taking the difference of two crosses, so the `square`
    commands to create the cross shape are repeated twice. Duplicate code almost always
    causes problems, because any change you make to a shape’s dimensions must be made
    twice (or however many times the code is duplicated). If you forget to change
    every instance, you’ll need to spend time fixing it later, or worse, end up with
    lasting mistakes in your design.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个饼干切割器是通过取两个十字形的差来制作的，因此`square`命令用于创建十字形的代码被重复了两次。重复的代码几乎总是会导致问题，因为你对形状的尺寸所做的任何更改都必须重复进行（或者根据代码被重复的次数）。如果你忘记修改每个实例，你将不得不花时间修复它，或者更糟糕的是，最终在设计中留下长期的错误。
- en: 'To improve this design, you can use a module to create a cross shape, and then
    use that module to create each of the two crosses. The following pseudocode shows
    the syntax of a module definition:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了改进这个设计，你可以使用一个模块来创建一个十字形，然后利用这个模块来创建两个十字形。以下伪代码展示了模块定义的语法：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Use the `module` keyword to start defining a new module. Then give the module
    a name that describes the new shape you are creating. Module names have the same
    restrictions as variable names, meaning you can only use lowercase and uppercase
    letters, underscores, or the digits 0 to 9\. A good name should help readers understand
    what the module does without making them read the actual code that defines the
    module. Following the `ModuleName`, add an empty pair of parentheses followed
    by the code enclosed in curly brackets. The code you write inside the curly brackets
    is no different from any other OpenSCAD code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`module`关键字开始定义一个新模块。然后给模块起个名字，描述你正在创建的新形状。模块名的限制与变量名相同，这意味着你只能使用小写和大写字母、下划线或数字0到9。一个好的名字应该能帮助读者理解模块的功能，而不需要他们阅读定义模块的实际代码。在`ModuleName`后添加一对空的括号，接着是用大括号括起来的代码。你在大括号内写的代码与任何其他OpenSCAD代码没有区别。
- en: 'The module definition will stand alone as a separate section of your design.
    So, defining a module won’t actually draw the new shape. It’s simply a recipe
    that describes how to create a shape. To see the shape, you must create it by
    inserting the module name into your design, just as you would to create any other
    shape. Here’s the syntax for using a module:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 模块定义将作为设计的一个独立部分存在。因此，定义一个模块并不会实际绘制出新的形状。它仅仅是一个描述如何创建形状的配方。要看到这个形状，你必须通过将模块名插入到你的设计中来创建它，就像创建其他任何形状一样。下面是使用模块的语法：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A module is an example of a programmer-defined shape. In fact, all the OpenSCAD
    commands you have used so far, including `sphere`, `cylinder`, and `linear_extrude`,
    are actually modules that are built into the language. An implied `union` operation
    occurs when shapes are combined within a module, so you can transform and combine
    the shape(s) generated by a module with any operation you’ve seen so far.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 模块是程序员定义的形状的示例。事实上，迄今为止你使用过的所有OpenSCAD命令，包括`sphere`、`cylinder`和`linear_extrude`，实际上都是内置于语言中的模块。当形状在模块内结合时，会隐式发生`union`操作，因此你可以使用你到目前为止见过的任何操作来变换和组合模块生成的形状。
- en: Write some new code for your cookie cutter by creating a `cross` module, as
    shown in [Listing 5-2](#listing5-2).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建一个`cross`模块来为你的饼干切割器编写一些新代码，如[示例5-2](#listing5-2)所示。
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 5-2: The new cross-shaped cookie cutter program, improved with a module'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 5-2：使用模块改进的新十字形饼干切割器程序
- en: Use the `module` keyword to start the definition of the new shape. Give it the
    name `cross` 1 to describe the shape you’re creating. In curly brackets following
    the name, enter the code for the shapes that define the cross 2. Finally, tell
    OpenSCAD to draw the cross by using the module name followed by a set of parentheses
    3 4. Notice that you use the `cross` module twice, so you can subtract one cross
    shape from the other with the `difference` operation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`module`关键字开始定义新形状。给它起名为`cross` 1，以描述你正在创建的形状。在名称后面的花括号中，输入定义十字形状的代码 2。最后，使用模块名称后跟一对括号
    3 4，告诉OpenSCAD绘制该十字形。注意，你使用了两次`cross`模块，因此你可以用`difference`操作将一个十字形从另一个中减去。
- en: Splitting Your Design into Multiple Files
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将设计拆分成多个文件
- en: Sometimes when creating a new design, you’ll want to reuse a component from
    a previous project. A good way to organize this is to make the component into
    a module. Putting this module definition into a separate file will allow you to
    easily use it in both designs. Saving modules separately helps you find and reuse
    your new shapes in as many projects as you like, as well as easily share them
    with others. Also, if you make improvements to a module defined in a file that
    is used by several designs, those improvements will be applied the next time you
    open each design. Organizing module definitions into separate files is often called
    creating a *library*, especially when a new file has multiple related modules
    defined within it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有时在创建新设计时，你可能想要重用先前项目中的一个组件。一个很好的组织方法是将该组件做成一个模块。将这个模块定义放到一个单独的文件中，可以让你在两个设计中轻松使用它。单独保存模块有助于你在多个项目中查找并重用新形状，也可以轻松地与他人分享它们。而且，如果你对一个由多个设计使用的文件中定义的模块进行了改进，那么这些改进将在你下次打开每个设计时自动应用。将模块定义组织成单独的文件通常被称为创建一个*库*，特别是当一个新文件中定义了多个相关模块时。
- en: 'To learn how to save your module in a separate file, let’s split the cross-shaped
    cookie-cutter design into two files. We’ll use one file to define a cross shape,
    and then use that module in the second file to create a cookie cutter. First,
    create two empty OpenSCAD files: *cross-module.scad* and *cookie-cutter.scad*.
    Make sure you save the two files in the same folder so OpenSCAD can find the two
    files. Also, note that these filenames were chosen to clearly indicate the purpose
    of each file. Carefully choosing your filenames will help you organize your projects
    in the future, especially as you build more and more OpenSCAD projects.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何将模块保存在单独的文件中，我们将十字形饼干切割器设计拆分为两个文件。我们将使用一个文件来定义十字形状，然后在第二个文件中使用该模块来创建饼干切割器。首先，创建两个空的OpenSCAD文件：*cross-module.scad*和*cookie-cutter.scad*。确保将这两个文件保存在同一个文件夹中，以便OpenSCAD可以找到这两个文件。此外，注意这些文件名是为了清楚地表明每个文件的用途而选择的。仔细选择文件名将有助于你在将来组织你的项目，特别是当你构建越来越多的OpenSCAD项目时。
- en: 'In *cross-module.scad*, copy the module definition from [Listing 5-2](#listing5-2),
    including the curly brackets, and then paste it into the file you just created.
    Be sure to save *cross-module.scad* after you’ve pasted the code so that OpenSCAD
    can use the newest version when you connect the files. The new *cross-module.scad*
    file should contain only the following code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在*cross-module.scad*中，复制[示例5-2](#listing5-2)中的模块定义，包括花括号，然后将其粘贴到你刚刚创建的文件中。确保在粘贴代码后保存*cross-module.scad*，这样OpenSCAD就能在连接文件时使用最新版本。新的*cross-module.scad*文件应仅包含以下代码：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now in *cookie-cutter.scad*, remove the module definition and add the following
    line at the top of your file:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在*cookie-cutter.scad*中，移除模块定义并在文件顶部添加以下一行：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Instead of typing the module definition in *cookie-cutter.scad*, the first line
    tells OpenSCAD to use code from *cross-module.scad*. This is what provides the
    definition for the cross shape.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要在*cookie-cutter.scad*中键入模块定义，第一行代码告诉OpenSCAD使用*cross-module.scad*中的代码。这提供了交叉形状的定义。
- en: 'The `use` keyword tells OpenSCAD to load the modules from a different file.
    The syntax for the `use` keyword is as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`use`关键字告诉OpenSCAD从另一个文件加载模块。`use`关键字的语法如下：'
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After the `use` keyword, add *angle brackets* (`< >`), and inside the angle
    brackets, specify the name of the *.scad* file you want to use. If the file you
    want to use is not in the same folder as your main design file, specify either
    the absolute or relative path to the file. A `use` statement allows you to use
    the module definitions from the file, but it will not immediately result in any
    shape being drawn.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在`use`关键字后，添加*尖括号*（`< >`），并在尖括号内指定你想使用的*.scad*文件的名称。如果你想使用的文件不在与主设计文件相同的文件夹中，指定该文件的绝对路径或相对路径。`use`语句允许你使用文件中的模块定义，但它不会立即绘制任何形状。
- en: 'Generating a preview of *cookie-cutter.scad* will now produce the same shape
    as in [Figure 5-1](#figure5-1). However, generating a preview of *cross-module.scad*
    will not produce any shape. That is because *cross-module.scad* currently only
    contains a definition of the cross module. In order to see what the cross shape
    looks like by generating a preview of *cross-module.scad*, you need to add a statement
    to draw the cross:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 生成*cookie-cutter.scad*的预览现在会产生与[图 5-1](#figure5-1)中相同的形状。然而，生成*cross-module.scad*的预览不会产生任何形状。这是因为*cross-module.scad*目前只包含`cross`模块的定义。为了通过生成*cross-module.scad*的预览来查看交叉形状，你需要添加一个语句来绘制交叉形状：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Adding Parameters to Your Modules
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向你的模块添加参数
- en: Because shapes come in different sizes, you’ll likely want your modules to allow
    for some variation. You already know that built-in OpenSCAD modules, like `sphere`,
    can take a parameter,such as `sphere(r=30);`, where the parameter specifies the
    sphere’s radius. You can add such parameters to your own modules as well.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 因为形状有不同的尺寸，你可能希望你的模块允许一些变动。你已经知道，内置的OpenSCAD模块，比如`sphere`，可以接受一个参数，如`sphere(r=30);`，其中参数指定了球体的半径。你也可以向自己的模块添加这样的参数。
- en: 'The following pseudocode shows the full syntax for specifying a module, including
    parameters:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下伪代码展示了指定模块的完整语法，包括参数：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Instead of leaving the parentheses after the module definition empty, add a
    `parameterName`, which is a placeholder for a value that you’ll provide whenever
    you use the module. You can also give each parameter a `defaultValue`, so if the
    user of a module doesn’t specify a value for a parameter, the module will use
    the default value instead. Providing a default value allows people to use the
    module without having to specify all parameters, which can be beneficial when
    experimenting with a module, or it can hide distracting details when the default
    value is a common choice. To create multiple parameters, specify multiple parameter
    names, separated by commas, and be sure to give each parameter a different name.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 不要将模块定义后的括号留空，而是添加一个`parameterName`，这是一个占位符，用于存放你在使用模块时提供的值。你还可以为每个参数提供一个`defaultValue`，这样，如果模块的使用者没有为某个参数指定值，模块将使用默认值。提供默认值使得人们在使用模块时无需指定所有参数，这在实验模块时非常有用，或者当默认值是常见选择时，它可以隐藏分散注意力的细节。要创建多个参数，指定多个参数名，用逗号分隔，并确保每个参数有不同的名称。
- en: You may have noticed that parameters look a lot like variables. In fact, inside
    a module, parameters behave as if they were variables. It’s good practice to give
    parameters names that describe their purpose. As with variables and module names,
    parameter names can only include letters, underscores, or numbers.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，参数看起来很像变量。事实上，在模块内部，参数表现得就像变量一样。最佳实践是给参数命名，以描述其用途。与变量和模块名称一样，参数名称只能包含字母、下划线或数字。
- en: '[Listing 5-3](#listing5-3) shows how to add parameters to the `cross` module:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 5-3](#listing5-3)展示了如何向`cross`模块添加参数：'
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Listing 5-3: Defining the `cross` module with parameters'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 5-3：使用参数定义`cross`模块
- en: Inside the parentheses, you add the `width` and `length` parameters, which define
    the width and length of each arm of the cross.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在括号内，添加`width`和`length`参数，这些参数定义了交叉形状每个臂的宽度和长度。
- en: To create a cross shape with the `cross` module, provide specific values for
    each parameter each time you use the module, as shown in [Listing 5-4](#listing5-4).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`cross`模块创建一个十字形，每次使用该模块时提供每个参数的具体值，如[清单 5-4](#listing5-4)所示。
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Listing 5-4: Specifying values for the `cross` module'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 5-4：指定 `cross` 模块的值
- en: The order of the numbers indicates which should be interpreted as the width
    of the cross and which should be interpreted as the length of the cross. Since
    the `width` parameter comes first in the definition of the module, the first number
    in the parentheses is assigned to the `width` parameter, and the second number
    is assigned to the `length` parameter.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 数字的顺序表示应解释为十字的宽度还是长度。由于`width`参数在模块定义中排在前面，括号中的第一个数字被分配给`width`参数，第二个数字分配给`length`参数。
- en: 'OpenSCAD also allows you to name your parameters explicitly when you use a
    module, which can be helpful when you create a shape with a large number of parameters
    (and keeping track of the order becomes unwieldy):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSCAD 还允许你在使用模块时显式命名参数，这在创建具有大量参数的形状时很有帮助（因为跟踪顺序会变得困难）：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When you use a module and name your parameters, the order of the parameters
    is not important. Switching the order of the length and width parameters does
    not affect the appearance of the shape:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用模块并命名参数时，参数的顺序并不重要。交换长度和宽度参数的顺序不会影响形状的外观：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now the module is truly dynamic; you can use it to create cookie cutters of
    any size ([Figure 5-2](#figure5-2)).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在模块真正变得动态；你可以用它来创建任何大小的饼干模具（[图 5-2](#figure5-2)）。
- en: '![f05002](image_fi/279547c05/f05002.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![f05002](image_fi/279547c05/f05002.png)'
- en: 'Figure 5-2: A variety of cookie cutters, each created with different parameters'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-2：各种饼干模具，每个模具都是使用不同参数创建的
- en: Building a LEGO Brick
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建一个 LEGO 积木
- en: In this section, we’ll walk through a complex modeling project that uses parameters,
    modules, and `for` loops in a single design. You’ll design a LEGO brick shape
    that has two studs in one direction and any number of studs in the other direction.
    *Studs* are the small bumps on the top of a LEGO brick that fit into other LEGO
    bricks to hold them together. [Figure 5-3](#figure5-3) shows a LEGO brick with
    two rows and four studs per row.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过一个复杂的建模项目，使用参数、模块和`for`循环进行单一设计。你将设计一个 LEGO 积木形状，具有一个方向的两个圆头和另一个方向上任意数量的圆头。*圆头*是
    LEGO 积木顶部的小凸起，能够与其他 LEGO 积木配合固定它们。[图 5-3](#figure5-3)显示了一个有两排、每排四个圆头的 LEGO 积木。
- en: '![f05003](image_fi/279547c05/f05003.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![f05003](image_fi/279547c05/f05003.png)'
- en: 'Figure 5-3: A LEGO brick with a 2×4 grid of studs'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-3：具有 2×4 网格圆头的 LEGO 积木
- en: Before coding a complicated design like this, sketching a few hand-drawn versions
    of your shape can help you gain a firm understanding of the dimensions and patterns
    that exist within the shape ([Figure 5-4](#figure5-4)).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写像这样的复杂设计代码之前，先手绘几份你形状的草图，可以帮助你深入理解形状中的尺寸和模式（[图 5-4](#figure5-4)）。
- en: '![f05004](image_fi/279547c05/f05004.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![f05004](image_fi/279547c05/f05004.png)'
- en: 'Figure 5-4: A hand-drawn exploration of the dimensions of LEGO bricks of various
    sizes'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-4：手绘的各种尺寸 LEGO 积木的尺寸探索图
- en: 'The dimensions of LEGO bricks are readily available online. We’ve taken our
    dimensions from Wikipedia:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: LEGO 积木的尺寸可以在网上轻松找到。我们从维基百科获取了我们的尺寸：
- en: The height of a brick is 9.6 mm.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块积木的高度是 9.6 毫米。
- en: The height of a stud is 1.7 mm.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 圆头的高度是 1.7 毫米。
- en: The diameter of a stud is 4.8 mm.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 圆头的直径是 4.8 毫米。
- en: Each new stud adds 8 mm to the width of the brick to accommodate not only the
    diameter of a stud, but also the empty space surrounding a stud. The length of
    a brick is also dependent on the number of studs. You’ll generate only bricks
    with two rows of studs, which implies a fixed brick length of 16 mm for this example.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 每新增一个圆头，积木的宽度增加 8 毫米，不仅是为了容纳圆头的直径，还有圆头周围的空隙。积木的长度也取决于圆头的数量。在这个例子中，你将只生成有两排圆头的积木，这意味着该积木的固定长度为
    16 毫米。
- en: Exploring a variety of hand-drawn LEGO shapes makes it easier to identify the
    OpenSCAD statements necessary for defining a LEGO brick module.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 探索各种手绘的 LEGO 形状，可以更容易地识别定义 LEGO 积木模块所需的 OpenSCAD 语句。
- en: '[Listing 5-5](#listing5-5) defines a LEGO brick module.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 5-5](#listing5-5) 定义了 LEGO 积木模块。'
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Listing 5-5: Drawing a LEGO brick with modules'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 5-5：使用模块绘制 LEGO 积木
- en: Start by creating a module named `LEGObrick` with a `studs_per_row` parameter.
    This parameter represents the number of studs along the top of the LEGO brick,
    which determines the overall width along the x-axis of the brick. LEGO bricks
    come in different sizes, so this parameter will be useful as a way to reuse the
    same module to draw a variety of brick sizes. We chose to set a default value
    of 4 studs per row, but this is an arbitrary choice.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个名为`LEGObrick`的模块，并带有一个`studs_per_row`参数。这个参数表示LEGO积木顶部的圆点数，它决定了积木在x轴上的整体宽度。LEGO积木有不同的尺寸，因此这个参数将有助于重用相同的模块来绘制多种尺寸的积木。我们选择将每行4个圆点作为默认值，但这是一个任意选择。
- en: 'A variable called `width` is created to keep track of the overall width of
    the brick, which is based on `studs_per_row`. Each additional stud increases the
    width of the brick by 8 mm:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`width`的变量，用于跟踪积木的整体宽度，它是基于`studs_per_row`的。每增加一个圆点，积木的宽度增加8 mm：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Other dimensions of the LEGO brick remain fixed, unrelated to the number of
    studs per row:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: LEGO积木的其他尺寸保持固定，和每行的圆点数无关：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'A `for` loop is used to draw each repeated stud in its proper position:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`for`循环将每个重复的圆点绘制到正确的位置：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Inside the `for` loop, the variable `x_position` keeps track of the x position
    of each stud. The first stud is centered at x = 4 mm 1, and each additional stud
    is positioned 8 mm 2 away from the previous stud. Similarly, the last stud in
    each row is centered 4 mm from the overall width of the brick 3. Two rows of studs
    are drawn with the exact same values on the x-axis. Since we’re restricting ourselves
    to just two studs on the y-axis, it’s easier to position the rows explicitly at
    y = 4 mm and y = 12 mm instead of using a second loop.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在`for`循环中，变量`x_position`跟踪每个圆点的x位置。第一个圆点位于x = 4 mm 1处，每个额外的圆点距离前一个圆点8 mm 2。类似地，每行中的最后一个圆点位于砖块整体宽度的4
    mm位置 3。两行圆点在x轴上绘制时，使用了完全相同的值。由于我们将y轴限制为只有两个圆点，所以直接将两行显式定位在y = 4 mm和y = 12 mm处，比使用第二个循环更简单。
- en: The `LEGObrick` module is now complete, which means you can use it to create
    LEGO bricks of various sizes, like the ones in [Figure 5-5](#figure5-5).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`LEGObrick`模块现在已经完成，这意味着你可以使用它来创建不同大小的LEGO积木，就像[图5-5](#figure5-5)中展示的那样。'
- en: '![f05005](image_fi/279547c05/f05005.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![f05005](image_fi/279547c05/f05005.png)'
- en: 'Figure 5-5: A variety of LEGO bricks created with the same `LEGObrick` module'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-5：使用相同的`LEGObrick`模块创建的各种LEGO积木
- en: This module is only a simplified design of a LEGO brick, however; it won’t function
    as a real brick would, because the current design doesn’t include an interior
    mechanism on the bottom of the brick for snapping bricks together. We leave that
    as a challenge for you.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块仅仅是一个简化版的LEGO积木设计；然而，它并不会像真实的积木那样工作，因为当前的设计没有包含积木底部用于连接积木的内置机制。我们将这个挑战留给你。
- en: Sharing and Collaborating
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 共享与协作
- en: If you save your modules in separate files, you can reuse your new shapes in
    multiple designs, as you saw earlier in this chapter. Keeping your modules separate
    also allows you to share common design components with other people or use other
    people’s components instead of building everything yourself. Splitting a design
    into multiple modules allows you to collaborate more easily.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将模块保存在不同的文件中，你可以像本章前面所展示的那样，在多个设计中重用这些新的形状。保持模块独立还允许你与其他人共享公共设计组件，或者使用他人的组件，而不是自己从头开始构建所有内容。将设计拆分成多个模块可以让你更容易进行协作。
- en: Let’s walk through a possible collaboration. Say you and a friend want to work
    together to make a 3D animation of a LEGO castle. To save time, you decide to
    split the design into two tasks that can be completed in parallel using two different
    computers. Your friend decides to design a module that will draw a LEGO brick
    shape, while you will be in charge of designing a castle that is made from LEGO
    brick shapes.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个可能的协作案例。假设你和一个朋友想要一起制作一个LEGO城堡的3D动画。为了节省时间，你们决定将设计拆分成两个任务，并且可以在两台不同的计算机上并行完成。你的朋友决定设计一个绘制LEGO积木形状的模块，而你将负责设计一个由LEGO积木形状构成的城堡。
- en: 'You and your friend first decide what the `LEGO` module should look like. You
    agree on a name for the module (`LEGObrick`), any necessary parameters and their
    defaults (`studs_per_row`), with a default of three studs, and the basic shape
    and size of each brick (24 × 16 × 9.6 mm for a 3×2 brick). Your friend then goes
    off and builds a simple version of the `LEGObrick` module in a file called *LEGObrick-module.scad*,
    shown in [Figure 5-6](#figure5-6):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你和你的朋友首先决定`LEGO`模块应是什么样的。你们商定了模块的名称（`LEGObrick`）、任何必要的参数及其默认值（`studs_per_row`），默认值为三颗凸点，以及每块砖的基本形状和尺寸（一个3×2砖的尺寸为24
    × 16 × 9.6毫米）。然后，你的朋友开始在名为*LEGObrick-module.scad*的文件中构建`LEGObrick`模块的简化版，如[图 5-6](#figure5-6)所示：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![f05006](image_fi/279547c05/f05006.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![f05006](image_fi/279547c05/f05006.png)'
- en: 'Figure 5-6: A simple version of the `LEGObrick` module'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-6：`LEGObrick`模块的简化版
- en: Even though the `LEGObrick` module isn’t complete (this simple version of the
    module doesn’t have studs yet), you can still use it as a building block to start
    creating the castle design in a file called *castle-wall.scad*, as shown in [Figure
    5-7](#figure5-7).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 即使`LEGObrick`模块尚未完成（该简化版模块尚未包含凸起的圆点），你仍然可以将其作为构建块，在名为*castle-wall.scad*的文件中开始创建城墙设计，如[图
    5-7](#figure5-7)所示。
- en: '![f05007](image_fi/279547c05/f05007.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![f05007](image_fi/279547c05/f05007.png)'
- en: 'Figure 5-7: A wall of the LEGO castle that uses a basic version of the `LEGObrick`
    module'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-7：使用基本版`LEGObrick`模块的LEGO城堡墙壁
- en: Meanwhile, your friend keeps working on the `LEGObrick` module, and every time
    it improves, your friend shares their new version of *LEGObrick-module.scad* with
    you. Because OpenSCAD designs are plaintext files (with a *.scad* extension),
    you can share them by emailing the files as attachments, copying and pasting OpenSCAD
    code directly from email or other documents, or by using more advanced services
    like GitHub to make designs public. 3D design-sharing websites also exist. One
    of the more popular ones, which supports OpenSCAD directly, is Thingiverse ([https://thingiverse.com/](https://thingiverse.com/)).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，你的朋友继续改进`LEGObrick`模块，每次改进后，他们会将更新版本的*LEGObrick-module.scad*分享给你。由于OpenSCAD设计是纯文本文件（.scad扩展名），你可以通过电子邮件附件共享文件、直接从电子邮件或其他文档中复制粘贴OpenSCAD代码，或者使用像GitHub这样的高级服务来公开设计。也有一些专门的3D设计分享网站，其中一个更受欢迎的网站，直接支持OpenSCAD，是Thingiverse（[https://thingiverse.com/](https://thingiverse.com/)）。
- en: Every time your friend shares an updated version of *LEGObrick-module.scad*,
    you replace your old version of the file with the new version. Your castle design
    in *castle-wall.scad* will update to use the newest definition of `LEGObrick`
    each time you Preview or Render your castle code. Over time, your design may look
    more like the one shown in [Figure 5-8](#figure5-8).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你的朋友分享更新版本的*LEGObrick-module.scad*时，你都需要将旧版本的文件替换为新版本。每次你预览或渲染你的城堡代码时，位于*castle-wall.scad*中的城堡设计都会更新为使用最新的`LEGObrick`定义。随着时间推移，你的设计可能会看起来更像[图
    5-8](#figure5-8)所示的样子。
- en: '![f05008](image_fi/279547c05/f05008.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![f05008](image_fi/279547c05/f05008.png)'
- en: 'Figure 5-8: Building the castle by using the updated `LEGObrick` module'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-8：使用更新版`LEGObrick`模块构建城堡
- en: This collaboration strategy saves you time, because you and your friend can
    work on the `LEGObrick` module and castle design simultaneously. You don’t have
    to wait for your friend to finish a part before you can make progress on your
    own part, while your friend can see how small changes in their module design effect
    the overall castle design.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这种协作策略节省了时间，因为你和你的朋友可以同时在`LEGObrick`模块和城堡设计上工作。你不必等你的朋友完成某一部分才能开始自己的部分，同时你的朋友也可以看到他们的模块设计中小的变动如何影响整体城堡设计。
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to organize your design into smaller logical
    components by using modules, which can make your OpenSCAD code more readable,
    facilitate collaboration, and help you customize your design.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何通过使用模块将设计组织成更小的逻辑组件，这样可以让你的OpenSCAD代码更易读，便于协作，并帮助你定制设计。
- en: 'When using modules, remember these key concepts:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模块时，请记住以下关键概念：
- en: 'Module definitions have three parts: a name, a parameter list, and a body.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块定义包括三个部分：名称、参数列表和主体。
- en: The body of the module contains a collection of OpenSCAD statements that define
    the unique shape of the module.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块的主体包含一组OpenSCAD语句，定义了模块的独特形状。
- en: To use a module, create the shape by using the name of the module in your design.
    If your module isn’t showing up, check that you’re actually using the name of
    the module in your code statements; it’s possible you’ve only defined the module.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用模块，在设计中通过模块的名称创建形状。如果模块没有显示出来，检查一下你是否在代码语句中真正使用了模块名称；可能你只是定义了模块。
- en: When designing a module, choose module names and parameters that obviously describe
    their purpose, so someone using your module won’t need to read your module definition
    to know what it does. This can also help you later if you have forgotten the module’s
    details.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设计模块时，选择能够清晰描述其目的的模块名称和参数，这样使用你模块的人就无需阅读模块定义便能了解其功能。如果你以后忘记了模块的细节，这也会对你有所帮助。
- en: Parameters are useful for specifying a module’s characteristics. Identifying
    which variables should be included as parameters is an important part of designing
    a module.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数对于指定模块的特性非常有用。确定哪些变量应该作为参数包含是设计模块的重要部分。
- en: Specifying default values for parameters is a useful way to make some parameters
    optional.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为参数指定默认值是一种使某些参数变为可选的有用方法。
- en: Separating your module definition into other files helps you use the module
    in other OpenSCAD designs. You can also group related modules into a library.
    As with modules and variables, choose filenames that adequately describe their
    purpose.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将模块定义分离到其他文件中有助于你在其他OpenSCAD设计中使用该模块。你还可以将相关模块组织到一个库中。与模块和变量一样，选择能够充分描述其目的的文件名。
- en: Connecting your design to a module with the `use` keyword won’t immediately
    add new shapes to your design. You have to explicitly use the module in your code
    to see the new shape.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`use`关键字将你的设计与模块连接起来不会立即将新形状添加到你的设计中。你必须在代码中明确使用该模块才能看到新形状。
- en: It’s common practice to draw the shape defined by a module at the top of a module
    definition file. This is helpful for testing purposes.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模块定义文件的顶部绘制由模块定义的形状是常见做法，这对于测试非常有帮助。
- en: Try searching online for examples of OpenSCAD modules to see more examples of
    user-defined shapes. You can learn a lot by inspecting and tinkering with other
    people’s solutions, especially when it comes to figuring out which parameters
    to include.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在线搜索OpenSCAD模块的示例，看看更多用户定义的形状。通过检查和修改其他人的解决方案，你可以学到很多，尤其是在确定应该包含哪些参数时。
