- en: Chapter 2. F# Interactive
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 2 章. F# Interactive
- en: If the prospect of doing true functional programming against the .NET Framework
    isn’t compelling enough, the productivity gains available through F# Interactive
    (FSI) should be. FSI is a *read-evaluate-print loop (REPL)* utility you can use
    to explore problem domains and test code as you write. It also doubles as a script
    host that allows you to leverage the elegance of F# and the power of the .NET
    Framework to automate common tasks. How can a compiled language like F# be used
    interactively? Because behind the scenes FSI compiles its input to dynamically
    generate assemblies.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用 .NET Framework 进行真正的函数式编程的前景还不足够吸引你，那么 F# Interactive (FSI) 带来的生产力提升一定会。FSI
    是一个 *读取-评估-打印循环 (REPL)* 工具，你可以用它来探索问题领域，并在编写代码时进行测试。它还兼任脚本宿主，允许你利用 F# 的优雅和 .NET
    Framework 的强大功能来自动化常见任务。像 F# 这样的编译语言如何能互动式地使用呢？因为在幕后，FSI 会将输入编译成动态生成的程序集。
- en: Running F# Interactive
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行 F# Interactive
- en: 'There are two ways to work in FSI: via the F# Interactive window in Visual
    Studio or the *fsi.exe* console application. The choice is usually one of convenience.
    I typically prefer to work in the F# Interactive window because it easily integrates
    into my Visual Studio development workflow. I generally use the window for exploratory
    tasks and reserve the console for script execution.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 FSI 中工作有两种方式：通过 Visual Studio 中的 F# Interactive 窗口或 *fsi.exe* 控制台应用程序。选择通常是基于方便性。我通常更喜欢在
    F# Interactive 窗口中工作，因为它能轻松融入我的 Visual Studio 开发工作流。我一般用这个窗口进行探索性任务，而将控制台保留用于脚本执行。
- en: To open the F# Interactive window in Visual Studio, press CTRL-ALT-F; you should
    see a prompt like that shown in [Figure 2-1](ch02.html#fhash_interactive_window_in_visual_studi
    "Figure 2-1. The F# Interactive window in Visual Studio 2013"). By default, *fsi.exe*
    is available only through the Visual Studio command prompt shortcuts and not through
    the basic Windows command prompt. If you want to make *fsi.exe* available from
    another prompt, you’ll need to add its location to your path environment variable.
    By default, F# is installed to *%PROGRAMFILES(x86)%\Microsoft SDKs\F#\3.0\Framework\v4.0\*
    (*%PROGRAMFILES%* on 32-bit systems).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Visual Studio 中打开 F# Interactive 窗口，请按 CTRL-ALT-F；你应该看到如[图 2-1](ch02.html#fhash_interactive_window_in_visual_studi
    "图 2-1. Visual Studio 2013 中的 F# Interactive 窗口")所示的提示。默认情况下，*fsi.exe* 只能通过 Visual
    Studio 命令提示符快捷方式访问，而不能通过基本的 Windows 命令提示符访问。如果你希望通过其他命令提示符访问 *fsi.exe*，需要将其位置添加到你的路径环境变量中。默认情况下，F#
    安装在 *%PROGRAMFILES(x86)%\Microsoft SDKs\F#\3.0\Framework\v4.0\*（在 32 位系统上为 *%PROGRAMFILES%*）中。
- en: '![The F# Interactive window in Visual Studio 2013](httpatomoreillycomsourcenostarchimages1981206.png.jpg)Figure 2-1. The
    F# Interactive window in Visual Studio 2013'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '![Visual Studio 2013 中的 F# Interactive 窗口](httpatomoreillycomsourcenostarchimages1981206.png.jpg)图
    2-1. Visual Studio 2013 中的 F# Interactive 窗口'
- en: 'In addition to just opening the Interactive window, you can send code to the
    window with ALT-ENTER, in which case the results from executing that code will
    also be shown. This makes it very easy to test new concepts: If you’re not sure
    how well something will work, you can typically try it immediately by writing
    a bit of code, sending it to FSI, and inspecting the result.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 除了打开 Interactive 窗口外，你还可以使用 ALT-ENTER 将代码发送到窗口，在这种情况下，执行该代码的结果也会显示出来。这使得测试新概念变得非常容易：如果你不确定某个功能是否有效，通常可以通过写一点代码，发送到
    FSI，并检查结果来立即尝试。
- en: Sending code from the text editor isn’t the only way to evaluate expressions
    in FSI; you can also run code directly from its prompt. This flexibility is great
    for productivity because you can work on a block of code in the text editor, send
    it to FSI, and then experiment with it interactively in the FSI window itself.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 从文本编辑器发送代码并不是在 FSI 中评估表达式的唯一方式；你也可以直接从其提示符运行代码。这种灵活性对于提高生产力非常有帮助，因为你可以在文本编辑器中处理一段代码，将其发送到
    FSI，然后在 FSI 窗口中与之互动，进行实验。
- en: There is an important difference between entering code directly in the Interactive
    window versus sending code from the text editor. When you send code from the editor,
    it’s compiled and executed automatically, whereas code entered directly won’t
    execute until you terminate it with a double semicolon pattern (`;;`). For example,
    to perform simple addition you could either enter `1 + 1` into the text editor
    and send it to FSI, or enter `1 + 1;;` directly at the FSI prompt. Both approaches
    yield the same result, but because double semicolons must be used to denote the
    end of the code input, FSI lets you enter and execute multiple lines of code directly
    at the prompt.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 直接在交互式窗口中输入代码与从文本编辑器发送代码之间有一个重要区别。当你从编辑器发送代码时，它会自动编译并执行，而直接输入的代码在没有使用双分号模式（`;;`）终止时不会执行。例如，要执行简单的加法，你可以将
    `1 + 1` 输入到文本编辑器并发送到 FSI，或者直接在 FSI 提示符下输入 `1 + 1;;`。这两种方法的结果相同，但由于必须使用双分号来表示代码输入的结束，FSI
    允许你直接在提示符下输入并执行多行代码。
- en: Note
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*Even though multiple-line entry at the prompt is possible, it’s often more
    trouble than it’s worth because if you make a silly typing mistake you must start
    over. I tend to use single-line statements at the prompt as much as possible.
    (Fortunately, recovering from such mistakes is usually just a matter of correcting
    the mistake and trying again.)*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*尽管在提示符下可以输入多行代码，但通常这会带来更多麻烦，因为一旦发生打字错误，你必须重新开始。我倾向于尽可能使用单行语句在提示符下进行操作。（幸运的是，从这样的错误中恢复通常只是修正错误并重新尝试。）*'
- en: F# Interactive Output
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: F# 交互式输出
- en: 'One thing that makes FSI so useful is that it reports back everything that
    it does. Whenever you execute code in FSI, it displays `val` followed by the identifier
    name, data type, and value for each binding it creates. For example, when you
    define and invoke a function, FSI will create two bindings: one for the function
    itself and one for the result, as shown here.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使 FSI 如此有用的一个特点是它会报告它所做的所有事情。每当你在 FSI 中执行代码时，它会显示 `val`，后面跟着标识符名称、数据类型和它所创建的每个绑定的值。例如，当你定义并调用一个函数时，FSI
    会创建两个绑定：一个是函数本身，另一个是结果，如下所示。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The it Identifier
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: it 标识符
- en: You don’t always have to explicitly define bindings in FSI; in most interactive
    sessions you can simply evaluate an expression. For example, you can call the
    `add` function without defining the `sum` identifier like this.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 FSI 中，你不总是需要显式定义绑定；在大多数交互式会话中，你可以直接评估一个表达式。例如，你可以直接调用 `add` 函数，而无需像这样定义 `sum`
    标识符。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When you don’t explicitly name something (as when performing a simple calculation
    or checking the output of a function), FSI automatically binds the result to the
    `it` identifier. You can refer to `it` in subsequent evaluations but be aware
    that, as in *Highlander*, there can be only one; whenever FSI implicitly binds
    something, the value is replaced. You can see this behavior by evaluating multiple
    expressions without explicitly binding the results to an identifier, as shown
    here.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当你没有显式命名某个东西时（例如进行简单计算或检查函数输出时），FSI 会自动将结果绑定到 `it` 标识符。你可以在后续评估中引用 `it`，但请注意，正如
    *Highlander* 中所说，只有一个；每当 FSI 隐式绑定某个东西时，该值会被替换。你可以通过评估多个表达式而不显式将结果绑定到标识符来看到这种行为，如下所示。
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The bottom line when it comes to the `it` identifier is love it, use it, but
    don’t rely on it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `it` 标识符的关键是：喜爱它、使用它，但不要依赖它。
- en: Playing in the Sandbox
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在沙盒中玩耍
- en: Even when running within Visual Studio, FSI is a sandbox that’s isolated from
    and completely unaware of any code you haven’t explicitly told it about. This
    isolation provides a layer of protection between “work” and “play,” but it also
    means that in order for it to be useful you’ll need ways to interact with the
    outside world. For this we turn to directives.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在 Visual Studio 中运行，FSI 也是一个沙盒，它与任何你没有明确告诉它的代码完全隔离并且不知情。这种隔离提供了一层“工作”和“娱乐”之间的保护，但也意味着为了让它有用，你需要与外部世界进行交互。为此，我们使用指令。
- en: FSI provides several directives that you can invoke in an interactive session
    or a script. Among these are directives for refreshing your memory about which
    directives are available, loading code from other F# source files, referencing
    assemblies, and even providing some performance statistics.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: FSI 提供了几个指令，可以在交互式会话或脚本中调用。其中包括用于刷新你记忆的指令，加载其他 F# 源文件中的代码，引用程序集，甚至提供一些性能统计信息。
- en: '#help'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '#help'
- en: If you forget any of the directives, you can invoke the `#help` directive at
    the FSI prompt for a listing of available directives and a brief description of
    each.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你忘记了任何指令，可以在 FSI 提示符下调用`#help`指令，以获取可用指令的列表以及每个指令的简要描述。
- en: '#quit'
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '#quit'
- en: If you need to get out of FSI from the command prompt, use the `#quit` directive
    to end the session. Although you can use `#quit` within the FSI window in Visual
    Studio, I suggest using the Reset Interactive Session context menu item shown
    in [Figure 2-2](ch02.html#reset_interactive_session_context_menu_i "Figure 2-2. Reset
    Interactive Session context menu item") because it clears previous output and
    begins a new session automatically.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要从命令提示符退出 FSI，可以使用`#quit`指令结束会话。尽管你可以在 Visual Studio 的 FSI 窗口中使用`#quit`，但我建议使用[图
    2-2](ch02.html#reset_interactive_session_context_menu_i "图 2-2. 重置交互式会话上下文菜单项")中显示的重置交互式会话上下文菜单项，因为它会清除之前的输出，并自动开始一个新的会话。
- en: '![Reset Interactive Session context menu item](httpatomoreillycomsourcenostarchimages1981208.png.jpg)Figure 2-2. Reset
    Interactive Session context menu item'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![重置交互式会话上下文菜单项](httpatomoreillycomsourcenostarchimages1981208.png.jpg)图 2-2.
    重置交互式会话上下文菜单项'
- en: '#load'
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '#load'
- en: One way to load existing code into an FSI session is with the `#load` directive
    as shown next. The `#load` directive accepts one or more string parameters containing
    the absolute or relative paths to external source files. FSI should load, compile,
    and execute the listed files (in order) and make their contents available in the
    current session.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 加载现有代码到 FSI 会话的一种方法是使用如下面所示的`#load`指令。`#load`指令接受一个或多个字符串参数，这些参数包含外部源文件的绝对路径或相对路径。FSI
    应该加载、编译并执行列出的文件（按顺序），并使其内容在当前会话中可用。
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Loading Made Easy
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 轻松加载
- en: The F# project templates in Visual Studio encourage you to load multiple files
    by including a script that you can update to include any new files. By keeping
    this script synchronized with your project structure, you can easily load code
    from your project into FSI and experiment away.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 中的 F# 项目模板鼓励你通过包含一个脚本来加载多个文件，你可以更新该脚本以包含任何新文件。通过保持该脚本与项目结构同步，你可以轻松地将代码从项目加载到
    FSI 并进行实验。
- en: Although you can include multiple source files in a single `#load` directive,
    it’s often easier to include each with a separate directive. The reason is that
    if you’re actively working on one of the files and you break something, the compiler
    highlights the entire directive as a problem. By using multiple directives, you
    can more quickly isolate the troublesome file.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以在单个`#load`指令中包含多个源文件，但通常更容易为每个文件使用单独的指令。原因是，如果你正在积极编辑其中一个文件并且出现错误，编译器会将整个指令标记为问题。通过使用多个指令，你可以更快地定位问题文件。
- en: '#r'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '#r'
- en: 'The `#r` directive is to assemblies what the `#load` directive is to source
    files. You can use `#r` to reference any .NET assembly (with the usual restrictions
    around target framework and platform). If the assembly you need is already located
    in one of the folders included in the assembly search path, identify it by name
    or you’ll need to include the full path. For example, if you need to load `System.Configuration`,
    you can use:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`#r`指令对于程序集的作用就像`#load`指令对源文件的作用一样。你可以使用`#r`来引用任何 .NET 程序集（遵循目标框架和平台的通常限制）。如果你需要的程序集已经位于程序集搜索路径中某个文件夹中，你可以通过名称来识别它，否则你需要包含完整路径。例如，如果你需要加载`System.Configuration`，你可以使用：'
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: FSI responds with the full path of each assembly it loads in this manner.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: FSI 会回应加载的每个程序集的完整路径。
- en: '#I'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '#I'
- en: When you need to reference multiple assemblies from a folder that is not already
    included in the search path, you can add the folder to the assembly search path
    in FSI with the `#I` directive.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要引用一个尚未包含在搜索路径中的文件夹中的多个程序集时，你可以使用`#I`指令将该文件夹添加到 FSI 的程序集搜索路径中。
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Once the folder is added to the search path, you should be able to reference
    assemblies in it by name instead of by their full path.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦文件夹被添加到搜索路径中，你应该能够通过名称而不是完整路径来引用其中的程序集。
- en: '#time'
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '#time'
- en: The `#time` directive provides extra visibility into what your code is doing
    by printing some statistics along with its output. You can enable timing information
    by using the `#time` directive with the `on` string argument.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`#time`指令通过在输出中打印一些统计信息，为你的代码提供额外的可见性。你可以通过使用带有`on`字符串参数的`#time`指令来启用计时信息。'
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With timing enabled, the statistics will be computed each time code is executed
    in FSI. These statistics include real time, CPU time, and the number of garbage
    collection operations over all three generations. For example, to help optimize
    a slow function you could invoke it with timing enabled and see something like
    this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 启用计时后，每次在 FSI 中执行代码时，统计信息都会被计算出来。这些统计信息包括实时、CPU 时间和垃圾回收操作的次数，涵盖所有三代。例如，为了帮助优化一个慢函数，您可以启用计时来调用它，并看到类似这样的输出：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When you’re done with the statistics and no longer want to see them in the FSI
    output, disable them with the `#time` directive and the `off` string argument.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当您完成统计并且不再希望在 FSI 输出中看到它们时，可以使用 `#time` 指令和 `off` 字符串参数禁用它们。
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Scripting
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 脚本编写
- en: As F# is a .NET language, most of your F# code will be placed in .*fs* files
    and compiled into assemblies to be used by larger applications. When coupled with
    FSI, though, F# can serve as a scripting language so you can leverage its power
    to automate common tasks with full support from the .NET Framework.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 F# 是一种 .NET 语言，您的大多数 F# 代码将放在 .*fs* 文件中，并编译成程序集，以供大型应用程序使用。然而，当与 FSI 配合使用时，F#
    可以作为脚本语言，利用它的强大功能来自动化常见任务，并且完全支持 .NET Framework。
- en: For example, say you want to concatenate several PDF files into one document.
    You could write a console application for this, but it’s trivial to write it as
    a script using the open source PDFsharp library to manipulate the individual PDFs.
    That script would take about 30 lines of code, including blank lines. By providing
    terse syntax and exposing the power of the .NET Framework, F# is ideal for such
    a task.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设您想将多个 PDF 文件合并成一个文档。您可以为此编写一个控制台应用程序，但使用开源的 PDFsharp 库来操作单个 PDF 文件，编写脚本则更为简便。该脚本大约需要
    30 行代码（包括空行）。F# 提供简洁的语法，并且能够发挥 .NET Framework 的强大功能，非常适合这种任务。
- en: Creating scripts as .*fsx* files offers a few benefits. For one, the directives
    described in [Playing in the Sandbox](ch02.html#playing_in_the_sandbox "Playing
    in the Sandbox") are FSI features, so they aren’t allowed in standard source files.
    Also, because .*fsx* files are associated with *fsi.exe*, you can execute them
    directly from a shell context menu as shown in [Figure 2-3](ch02.html#run_with_fhash_interactive_context_menu
    "Figure 2-3. Run with F# Interactive context menu item"). This makes it easy to
    run scripts like the PDF concatenation as needed.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 .*fsx* 文件作为脚本有几个好处。首先，[《沙箱中的操作》](ch02.html#playing_in_the_sandbox "Playing
    in the Sandbox") 中描述的指令是 FSI 特性，因此它们不能出现在标准源文件中。此外，由于 .*fsx* 文件与 *fsi.exe* 相关联，您可以直接通过
    shell 上下文菜单执行它们，如[图 2-3](ch02.html#run_with_fhash_interactive_context_menu "Figure
    2-3. Run with F# Interactive context menu item")所示。这使得像 PDF 合并这样的脚本可以根据需要轻松运行。
- en: '![Run with F# Interactive context menu item](httpatomoreillycomsourcenostarchimages1981210.png.jpg)Figure 2-3. Run
    with F# Interactive context menu item'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![Run with F# Interactive context menu item](httpatomoreillycomsourcenostarchimages1981210.png.jpg)图
    2-3. 使用 F# Interactive 上下文菜单项运行'
- en: To add scripts to a project, select the project in Solution Explorer, press
    CTRL-SHIFT-A to open the **Add New Item** dialog, and select **F# Script File**
    as shown in [Figure 2-4](ch02.html#adding_an_fhash_script_file_to_a_project "Figure 2-4. Adding
    an F# script file to a project").
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要将脚本添加到项目中，请在解决方案资源管理器中选择项目，按 CTRL-SHIFT-A 打开 **添加新项** 对话框，然后选择 **F# 脚本文件**，如[图
    2-4](ch02.html#adding_an_fhash_script_file_to_a_project "Figure 2-4. Adding an
    F# script file to a project")所示。
- en: '![Adding an F# script file to a project](httpatomoreillycomsourcenostarchimages1981212.png.jpg)Figure 2-4. Adding
    an F# script file to a project'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '![Adding an F# script file to a project](httpatomoreillycomsourcenostarchimages1981212.png.jpg)图
    2-4. 将 F# 脚本文件添加到项目中'
- en: To quickly create a standalone .*fsx* file in Visual Studio 2013, press CTRL-N
    to open the **New File** dialog, select **Script** from the menu on the left,
    and locate the **F# Script File** option as shown in [Figure 2-5](ch02.html#creating_a_standalone_fhash_script_file
    "Figure 2-5. Creating a standalone F# script file").
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Visual Studio 2013 中快速创建独立的 .*fsx* 文件，请按 CTRL-N 打开 **新建文件** 对话框，选择左侧菜单中的
    **脚本**，然后找到 **F# 脚本文件** 选项，如[图 2-5](ch02.html#creating_a_standalone_fhash_script_file
    "Figure 2-5. Creating a standalone F# script file")所示。
- en: '![Creating a standalone F# script file](httpatomoreillycomsourcenostarchimages1981214.png.jpg)Figure 2-5. Creating
    a standalone F# script file'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![Creating a standalone F# script file](httpatomoreillycomsourcenostarchimages1981214.png.jpg)图
    2-5. 创建独立的 F# 脚本文件'
- en: F# Interactive Options
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: F# Interactive 选项
- en: In addition to the directives discussed in [Playing in the Sandbox](ch02.html#playing_in_the_sandbox
    "Playing in the Sandbox"), FSI provides several command-line options that allow
    you to control it. Some of these options offer alternatives to the functionality
    of the FSI directives, while others control compiler behavior. I won’t cover all
    of the available options here, but I will highlight the ones you’re most likely
    to use. (For a complete listing of FSI options, run **`fsi.exe –help`**.) These
    options apply regardless of whether you’re running FSI through the command prompt
    or the F# Interactive window. To set the options in Visual Studio, go to **Tools**
    ◂ **Options**, find **F# Tools** in the list on the left, and type the new options
    into the **F# Interactive options** text box as shown in [Figure 2-6](ch02.html#setting_fhash_interactive_options
    "Figure 2-6. Setting F# Interactive options").
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在[沙盒中玩耍](ch02.html#playing_in_the_sandbox "沙盒中玩耍")一章中讨论的指令外，FSI 还提供了几个命令行选项，允许你控制它的行为。这些选项中有些提供了
    FSI 指令功能的替代方案，而另一些则控制编译器的行为。我不会在这里介绍所有可用的选项，但我会重点讲解你最有可能使用的选项。（要查看 FSI 选项的完整列表，请运行**`fsi.exe
    –help`**。）这些选项适用于你通过命令提示符还是 F# Interactive 窗口运行 FSI。要在 Visual Studio 中设置选项，请转到**工具**
    ◂ **选项**，在左侧列表中找到**F# 工具**，然后将新选项输入到**F# Interactive 选项**文本框中，如[图 2-6](ch02.html#setting_fhash_interactive_options
    "图 2-6. 设置 F# Interactive 选项")所示。
- en: '![Setting F# Interactive options](httpatomoreillycomsourcenostarchimages1981216.png.jpg)Figure 2-6. Setting
    F# Interactive options'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![设置 F# Interactive 选项](httpatomoreillycomsourcenostarchimages1981216.png.jpg)图
    2-6. 设置 F# Interactive 选项'
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*The F# Interactive options setting in Visual Studio is a global setting. Changing
    it will affect all instances of the window.*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*Visual Studio 中的 F# Interactive 选项设置是全局设置。更改它将影响所有窗口实例。*'
- en: --load
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: --load
- en: 'The `--load` option is the command-line equivalent of the `#load` directive.
    It allows you to specify external source files for FSI to compile and load into
    the session at startup, like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`--load`选项是`#load`指令的命令行等价物。它允许你在 FSI 会话启动时指定外部源文件供 FSI 编译并加载，例如：'
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `--load` option doesn’t process any directives in the specified file, so
    if any directives must be evaluated use the `--use` option instead.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`--load`选项不会处理指定文件中的任何指令，因此如果需要评估任何指令，请改用`--use`选项。'
- en: --use
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: --use
- en: Like `--load`, the `--use` option loads external source files, but it also processes
    directives such as `#load` or `#I` upon loading the file.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 与`--load`一样，`--use`选项加载外部源文件，但它还会在加载文件时处理诸如`#load`或`#I`之类的指令。
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: --reference
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: --reference
- en: Just as you can use `--load` or `--use` to import a source file, you can use
    the `--reference` option (or its short form, `-r`) to reference an external assembly.
    This has the same effect as the `#r` directive.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你可以使用`--load`或`--use`导入源文件一样，你也可以使用`--reference`选项（或其简写形式`-r`）来引用外部程序集。这与`#r`指令的效果相同。
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As with the `#r` directive, be sure to include the full path to the assembly
    if it’s not in a location already included in the search path.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与`#r`指令一样，如果程序集不在已包含的搜索路径中，请确保包括程序集的完整路径。
- en: --lib
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: --lib
- en: The `--lib` option serves the same role as the `#I` directive by adding the
    specified folder to the assembly search path. Its short form is `-I`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`--lib`选项的作用与`#I`指令相同，都是将指定的文件夹添加到程序集搜索路径中。它的简写是`-I`。'
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: --define
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: --define
- en: As with other .NET languages, F# allows you to define conditional compilation
    symbols (like the predefined `DEBUG` and `RELEASE` symbols in Visual Studio) that
    can affect how code is compiled. To define symbols for use within an FSI session,
    use the `--define` option.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他 .NET 语言一样，F# 允许你定义条件编译符号（如 Visual Studio 中预定义的`DEBUG`和`RELEASE`符号），这些符号会影响代码的编译方式。要在
    FSI 会话中定义符号，请使用`--define`选项。
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: FSI and the F# compiler automatically define certain symbols for you, depending
    on how your code is compiled. For example, when you are running code compiled
    in an FSI session, whether by entering it at a prompt, sending it from the text
    editor, or importing another file, FSI defines the `INTERACTIVE` symbol. Directly
    compiled F# code gets the `COMPILED` symbol instead. These symbols become important
    when code must behave differently under an FSI session than in a compiled assembly
    due to environmental differences.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: FSI 和 F# 编译器会根据代码的编译方式自动为你定义某些符号。例如，当你在 FSI 会话中运行编译后的代码时，无论是通过提示符输入，还是从文本编辑器发送，或导入另一个文件，FSI
    都会定义`INTERACTIVE`符号。直接编译的 F# 代码则会得到`COMPILED`符号。这些符号在代码必须根据环境差异在 FSI 会话和编译后的程序集之间表现不同的情况下变得非常重要。
- en: --exec
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: --exec
- en: By default the FSI process doesn’t terminate when it finishes evaluating a script.
    To force it to quit rather than return you to the FSI prompt, specify the `--exec`
    option.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，FSI进程在评估完脚本后不会终止。要强制其退出而不是返回FSI提示符，可以指定`--exec`选项。
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, when the script completes you’ll automatically be returned to the command
    prompt.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当脚本完成时，您将自动返回命令提示符。
- en: --
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: --
- en: If your code expects command-line arguments, you can send them to FSI with the
    `--` option; this is essentially a delimiter that tells FSI to treat all remaining
    arguments as arguments to the code rather than to FSI itself.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的代码需要命令行参数，可以通过`--`选项将它们传递给FSI；这实际上是一个分隔符，告诉FSI将所有剩余的参数视为代码的参数，而非FSI本身的参数。
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When code that’s dependent on command-line arguments might be executed from
    either an FSI session or a compiled assembly, you should use the `INTERACTIVE`
    and `COMPILED` symbols to ensure that the parameters are read correctly. For example,
    in a typical .NET application you’d use `System.Environment.GetCommandLineArgs()`
    to resolve the arguments. The same holds true for `COMPILED` code, but in `INTERACTIVE`
    code the execution process is actually FSI rather than your assembly. Therefore,
    the `GetCommandLineArgs` method returns all arguments passed to the FSI process
    rather than only the ones intended for your script! To account for this difference,
    interactive code should typically call `fsi.CommandLineArgs` instead. You can
    easily change this behavior with conditional compilation, like this.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当依赖命令行参数的代码可能从FSI会话或已编译程序集执行时，您应该使用`INTERACTIVE`和`COMPILED`符号来确保正确读取参数。例如，在典型的.NET应用程序中，您会使用`System.Environment.GetCommandLineArgs()`来解析参数。对于`COMPILED`代码也是如此，但在`INTERACTIVE`代码中，执行过程实际上是FSI而不是您的程序集。因此，`GetCommandLineArgs`方法返回的是传递给FSI进程的所有参数，而不仅仅是用于脚本的参数！为了适应这个差异，交互式代码通常应该调用`fsi.CommandLineArgs`。您可以通过条件编译轻松改变这种行为，如下所示。
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Fortunately, both functions return the same result: a string array that includes
    the script/executable name as the first item. This greatly simplifies any argument-parsing
    code you have, because the end result is the same.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，两个函数返回相同的结果：一个字符串数组，其中第一个项目是脚本/可执行文件的名称。这极大简化了任何参数解析代码，因为最终结果是一样的。
- en: --quiet
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: --quiet
- en: Depending on what your script is doing, FSI can be pretty chatty and sometimes
    results can get lost in the noise. To tell FSI to be quiet, use the `--quiet`
    option.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 根据脚本的功能，FSI可能会输出大量信息，有时结果会被噪音掩盖。要让FSI保持安静，可以使用`--quiet`选项。
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `--quiet` option suppresses virtually everything FSI would normally output,
    including bindings, file loads, and assembly references (but not statistics when
    timing is enabled). FSI will still display error messages and anything your code
    sends to the console.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`--quiet`选项将抑制FSI通常会输出的几乎所有内容，包括绑定、文件加载和程序集引用（但如果启用计时，统计信息除外）。FSI仍然会显示错误信息和任何代码发送到控制台的内容。'
- en: --optimize
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: --optimize
- en: The `--optimize` option controls whether compiler optimizations will be applied
    to the code. It’s enabled by default in Visual Studio.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`--optimize`选项控制是否对代码应用编译器优化。它在Visual Studio中默认启用。'
- en: --tailcalls
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: --tailcalls
- en: We’ll look at tail recursion in detail in [Chapter 5](ch05.html "Chapter 5. Let’s
    Get Functional"), but for now just know that the `--tailcalls` option controls
    whether the compiler will optimize for tail-recursive functions. This option is
    enabled by default in FSI.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第5章](ch05.html "第5章. 让我们开始函数式编程")中详细讨论尾递归，但现在只需知道`--tailcalls`选项控制编译器是否对尾递归函数进行优化。此选项在FSI中默认启用。
- en: Summary
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter you’ve learned how F#’s REPL tool, F# Interactive, can help
    you explore a problem and find a path to the solution. You’ve also learned how
    you can customize the behavior of FSI through directives and command-line options.
    In the next chapter, we’ll begin exploring the F# language itself by learning
    about a variety of key features that apply regardless of whether you’re programming
    in a functional, object-oriented, or imperative style.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何使用F#的REPL工具F# Interactive来帮助您探索问题并找到解决方案。您还了解了如何通过指令和命令行选项自定义FSI的行为。在下一章，我们将通过学习一些关键特性来开始探索F#语言本身，无论您是采用函数式、面向对象还是命令式编程风格，这些特性都是通用的。
