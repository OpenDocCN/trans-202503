- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Clickjacking
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 点击劫持
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: '*Clickjacking*, or user-interface redressing, is an attack that tricks users
    into clicking a malicious button that has been made to look legitimate. Attackers
    achieve this by using HTML page-overlay techniques to hide one web page within
    another. Let’s discuss this fun-to-exploit vulnerability, why it’s a problem,
    and how you can find instances of it.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*点击劫持*，或者用户界面重定向，是一种通过伪装按钮为合法的恶意按钮来诱使用户点击的攻击。攻击者通过使用HTML页面叠加技术将一个网页隐藏在另一个网页中，从而实现这一点。让我们讨论这个有趣且易于利用的漏洞，为什么它是个问题，以及你如何发现它的实例。'
- en: Note that clickjacking is rarely considered in scope for bug bounty programs,
    as it usually involves a lot of user interaction on the victim’s part. Many programs
    explicitly list clickjacking as out of scope, so be sure to check the program’s
    policies before you start hunting! However, some programs still accept them if
    you can demonstrate the impact of the clickjacking vulnerability. We will look
    at an accepted report later in the chapter.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，点击劫持在漏洞奖励计划中很少被视为有效漏洞，因为它通常涉及大量的用户交互。许多计划明确将点击劫持列为不在范围内，所以在开始漏洞发现之前，务必查看计划的政策！然而，如果你能证明点击劫持漏洞的影响，某些计划仍然接受这类报告。我们将在本章后面讨论一个已被接受的报告。
- en: Mechanisms
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机制
- en: 'Clickjacking relies on an HTML feature called an *iframe*. HTML iframes allow
    developers to embed one web page within another by placing an `<iframe>` tag on
    the page, and then specifying the URL to frame in the tag’s `src` attribute. For
    example, save the following page as an HTML file and open it with a browser:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 点击劫持依赖于一个叫做*iframe*的HTML特性。HTML iframe允许开发者通过在页面中放置`<iframe>`标签并在标签的`src`属性中指定要嵌套的URL，来将一个网页嵌入到另一个网页中。例如，保存以下页面为HTML文件并用浏览器打开：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You should see a web page that looks like [Figure 8-1](#figure8-1). Notice that
    a box places *www.example.com* in one area of the larger page.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到一个看起来像[图8-1](#figure8-1)的网页。注意，一个框将*www.example.com*放置在更大页面的一个区域中。
- en: '![f08001](image_fi/501546c08/f08001.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![f08001](image_fi/501546c08/f08001.png)'
- en: 'Figure 8-1: If the iframe is not blank, the page specified in the iframe’s
    `src` attribute can be framed!'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-1：如果iframe不是空白的，iframe的`src`属性中指定的页面可以被嵌套！
- en: Some web pages can’t be framed. If you place a page that can’t be framed within
    an iframe, you should see a blank iframe, as in [Figure 8-2](#figure8-2).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有些网页无法被嵌套。如果你将一个无法嵌套的页面放入一个iframe中，你应该会看到一个空白的iframe，如[图8-2](#figure8-2)所示。
- en: '![f08002](image_fi/501546c08/f08002.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![f08002](image_fi/501546c08/f08002.png)'
- en: 'Figure 8-2: If the iframe is blank, the iframe source cannot be framed.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-2：如果iframe是空白的，iframe源无法被嵌套。
- en: 'Iframes are useful for many things. The online advertisements you often see
    at the top or sides of web pages are examples of iframes; companies use these
    to include a premade ad in your social media or blog. Iframes also allow you to
    embed other internet resources, like videos and audio, in your web pages. For
    example, this iframe allows you to embed a YouTube video in an external site:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Iframe有很多用途。你在网页顶部或侧边常看到的在线广告就是iframe的例子；公司使用这些来在你的社交媒体或博客中嵌入预制的广告。Iframe还允许你在网页中嵌入其他互联网资源，比如视频和音频。例如，这个iframe允许你在外部网站中嵌入YouTube视频：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Iframes have made our internet a more vibrant and interactive place. But they
    can also be a danger to the framed web page because they introduce the possibilities
    of a clickjacking attack. Let’s say that *example.com* is a banking site that
    includes a page for transferring your money with a click of a button. You can
    access the balance transfer page with the URL *https://www.example.com/transfer_money*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Iframe使得我们的互联网更加生动和互动。但它们也可能对被嵌套的网页构成危险，因为它们引入了点击劫持攻击的可能性。假设*example.com*是一个银行网站，它包含一个可以通过点击按钮转账的页面。你可以通过URL*https://www.example.com/transfer_money*访问余额转账页面。
- en: 'This URL accepts two parameters: the recipient account ID and the transfer
    amount. If you visit the URL with these parameters present, such as *https://www.example.com/transfer_money?recipient=RECIPIENT_ACCOUNT&amount=AMOUNT_TO_TRANSFER*,
    the HTML form on the page will appear prefilled ([Figure 8-3](#figure8-3)). All
    you have to do is to click the Submit button, and the HTML form will initiate
    the transfer request.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个URL接受两个参数：收款人账户ID和转账金额。如果你访问带有这些参数的URL，例如*https://www.example.com/transfer_money?recipient=RECIPIENT_ACCOUNT&amount=AMOUNT_TO_TRANSFER*，页面上的HTML表单将会预填充（[图8-3](#figure8-3)）。你只需要点击提交按钮，HTML表单将发起转账请求。
- en: '![f08003](image_fi/501546c08/f08003.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![f08003](image_fi/501546c08/f08003.png)'
- en: 'Figure 8-3: The balance transfer page with the HTTP POST parameters prefilled'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-3：预填充了 HTTP POST 参数的余额转账页面
- en: 'Now imagine that an attacker embeds this sensitive banking page in an iframe
    on their own site, like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在想象一下，一个攻击者将这个敏感的银行页面嵌入到自己网站的 iframe 中，就像这样：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This iframe embeds the URL for the balance transfer page. It also passes in
    the URL parameters to prefill the transfer recipient and amount. The attacker
    hides this iframe on a website that appears to be harmless, then tricks the user
    into clicking a button on the sensitive page. To achieve this, they overlay multiple
    HTML elements in a way that obscures the banking form. Take a look at this HTML
    page, for example:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 iframe 嵌入了余额转账页面的 URL。它还传递了 URL 参数，以便预填充转账接收人和金额。攻击者将这个 iframe 隐藏在一个看似无害的网站上，然后诱使用户点击敏感页面上的一个按钮。为了实现这一点，他们通过将多个
    HTML 元素重叠，以一种遮挡银行表单的方式进行布局。看一下这个 HTML 页面，举个例子：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can see that we’ve added a `<style>` tag at the top of the HTML page. Anything
    between `<style>` tags is CSS code used to specify the styling of HTML elements,
    such as font color, element size, and transparency. We can style HTML elements
    by assigning them IDs and referencing these in our style sheet.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，我们在 HTML 页面顶部添加了一个 `<style>` 标签。任何位于 `<style>` 标签之间的内容都是用于指定 HTML 元素样式的
    CSS 代码，例如字体颜色、元素大小和透明度。我们可以通过为 HTML 元素分配 ID 并在样式表中引用这些 ID 来设置样式。
- en: Here, we set the position of our decoy element to `absolute` to make the decoy
    site overlap with the iframe containing the victim site 3. Without the `absolute`
    position directive, HTML would display these elements on separate parts of the
    screen. The decoy element includes a Subscribe to Newsletter button, and we carefully
    position the iframe so the Transfer Balance button sits directly on top of this
    Subscribe button, using new lines created by HTML’s line break tag `<br>` 5 6.
    We then make the iframe invisible by setting its opacity to a very low value 1.
    Finally, we set the z-index of the iframe to a higher value than the decoys 2
    4. The *z-index* sets the stack order of different HTML elements. If two HTML
    elements overlap, the one with the highest z-index will be on top.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将诱饵元素的位置设置为 `absolute`，使得诱饵页面与包含受害者网站的 iframe 重叠。没有 `absolute` 位置指令时，HTML
    会将这些元素显示在屏幕的不同位置。诱饵元素包括一个“订阅新闻通讯”按钮，我们精心调整 iframe 的位置，使得转账余额按钮直接覆盖在这个订阅按钮上，使用
    HTML 的换行标签 `<br>` 创建新的行。然后，我们通过将 iframe 的透明度设置为非常低的值 1，使其变得不可见。最后，我们将 iframe 的
    z-index 设置为比诱饵元素更高的值。*z-index* 设置了不同 HTML 元素的堆叠顺序。如果两个 HTML 元素重叠，z-index 值较大的元素会显示在上面。
- en: By setting these CSS properties for the victim site iframe and decoy form, we
    get a page that looks like it’s for subscribing to a newsletter, but contains
    an invisible form that transfers the user’s money into the attacker’s account.
    Let’s turn the opacity of the iframe back to `opacity``:1` to see how the page
    is actually laid out. You can see that the Transfer Balance button is located
    directly on top of the Subscribe to Newsletter button ([Figure 8-4](#figure8-4)).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过为受害者网站的 iframe 和诱饵表单设置这些 CSS 属性，我们得到了一个看起来像是订阅新闻通讯的页面，但其中包含一个隐形的表单，将用户的资金转入攻击者的账户。让我们将
    iframe 的透明度设置回 `opacity:1`，以查看页面的实际布局。你可以看到，转账余额按钮正好位于“订阅新闻通讯”按钮的正上方（[图 8-4](#figure8-4)）。
- en: '![f08004](image_fi/501546c08/f08004.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![f08004](image_fi/501546c08/f08004.png)'
- en: 'Figure 8-4: The Transfer Balance button lies directly on top of the Subscribe
    button. Victims think they’re subscribing to a newsletter, but they’re actually
    clicking the button to authorize a balance transfer.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-4：转账余额按钮正好位于“订阅按钮”上方。受害者以为自己在订阅新闻通讯，但实际上他们正在点击授权转账余额的按钮。
- en: Once we reset the opacity of the iframe to `opacity:0.00001` to make the sensitive
    form invisible, the site looks like a normal newsletter page ([Figure 8-5](#figure8-5)).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将 iframe 的透明度重置为 `opacity:0.00001`，使得敏感表单不可见，网站看起来就像一个正常的新闻通讯页面（[图 8-5](#figure8-5)）。
- en: '![f08005](image_fi/501546c08/f08005.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![f08005](image_fi/501546c08/f08005.png)'
- en: 'Figure 8-5: The attacker tricks users into clicking the button by making the
    sensitive form invisible.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-5：攻击者通过将敏感表单设为不可见来欺骗用户点击按钮。
- en: 'If the user is logged into the banking site, they’ll be logged into the iframe
    too, so the banking site’s server will recognize the requests sent by the iframe
    as legit. When the user clicks the seemingly harmless button, they’re executing
    a balance transfer on *example.com*! They’ll have accidentally transferred $5,000
    from their bank account balance to the attacker’s account instead of subscribing
    to a newsletter. This is why we call this attack *user-interface redressing* or
    *clickjacking*: the attacker redressed the user interface to hijack user clicks,
    repurposing the clicks meant for their page and using them on a victim site.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户已登录到银行网站，他们也将登录到 iframe 中，因此银行网站的服务器会将由 iframe 发送的请求视为合法。当用户点击看似无害的按钮时，他们实际上在
    *example.com* 执行了余额转账！他们不小心将 5,000 美元从银行账户余额转账到了攻击者的账户，而不是订阅新闻邮件。这就是为什么我们称这种攻击为
    *用户界面重塑* 或 *点击劫持*：攻击者通过重塑用户界面来劫持用户的点击，将原本属于他们页面的点击用在了受害者网站上。
- en: This is a simplified example. In reality, payment applications will not be implemented
    this way, because it would violate data security standards. Another thing to remember
    is that the presence of an easy-to-prevent vulnerability on a critical functionality,
    like a clickjacking vulnerability on the balance transfer page, is a symptom that
    the application does not follow the best practices of secure development. This
    example application is likely to contain other vulnerabilities, and you should
    test it extensively.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简化的示例。实际上，支付应用程序不会以这种方式实现，因为这会违反数据安全标准。另一个需要记住的事情是，关键功能上存在一个容易防止的漏洞，例如在余额转账页面上的点击劫持漏洞，表明该应用程序没有遵循安全开发的最佳实践。这个示例应用程序可能还包含其他漏洞，你应该对其进行广泛的测试。
- en: Prevention
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预防
- en: Two conditions must be met for a clickjacking vulnerability to happen. First,
    the vulnerable page has to have functionality that executes a state-changing action
    on the user’s behalf. A *state-changing action* causes changes to the user’s account
    in some way, such as changing the user’s account settings or personal data. Second,
    the vulnerable page has to allow itself to be framed by an iframe on another site.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 点击劫持漏洞发生必须满足两个条件。首先，漏洞页面必须具有在用户的代理下执行状态更改操作的功能。*状态更改操作* 会以某种方式更改用户的账户，例如更改用户的账户设置或个人数据。其次，漏洞页面必须允许被其他网站的
    iframe 框架化。
- en: The HTTP response header `X-Frame-Options` lets web pages indicate whether the
    page’s contents can be rendered in an iframe. Browsers will follow the directive
    of the header provided. Otherwise, pages are frameable by default.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 响应头 `X-Frame-Options` 允许网页指示该页面的内容是否可以在 iframe 中渲染。浏览器将遵循该头部提供的指令。否则，页面默认是可以被框架化的。
- en: 'This header offers two options: `DENY` and `SAMEORIGIN`. If a page is served
    with the `DENY` option, it cannot be framed at all. The `SAMEORIGIN` option allows
    framing from pages of the same origin: pages that share the same protocol, host,
    and port.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个头部提供了两个选项：`DENY` 和 `SAMEORIGIN`。如果页面使用 `DENY` 选项，则该页面无法被框架化。`SAMEORIGIN` 选项允许来自相同源的页面进行框架化：即共享相同协议、主机和端口的页面。
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To prevent clickjacking on sensitive actions, the site should serve one of these
    options on all pages that contain state-changing actions.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止敏感操作上的点击劫持，网站应该在包含状态更改操作的所有页面上提供其中一个选项。
- en: 'The `Content-Security-Policy` response header is another possible defense against
    clickjacking. This header’s `frame-ancestors` directive allows sites to indicate
    whether a page can be framed. For example, setting the directive to `''none''`
    will prevent any site from framing the page, whereas setting the directive to
    `''self''` will allow the current site to frame the page:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`Content-Security-Policy` 响应头是另一种可能的防御点击劫持的方法。该头的 `frame-ancestors` 指令允许网站指示页面是否可以被框架化。例如，将该指令设置为
    `''none''` 将阻止任何网站框架化该页面，而将指令设置为 `''self''` 则允许当前站点框架化该页面：'
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Setting `frame-ancestors` to a specific origin will allow that origin to frame
    the content. This header will allow the current site, as well as any page on the
    subdomains of *example.com*, to frame its contents:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `frame-ancestors` 设置为特定的来源将允许该来源框架化内容。此头部将允许当前站点以及 *example.com* 的任何子域上的页面框架化其内容：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Besides implementing `X-Frame-Options` and the `Content-Security-Policy` to
    ensure that sensitive pages cannot be framed, another way of protecting against
    clickjacking is with `SameSite` cookies. A web application instructs the user’s
    browser to set cookies via a `Set-Cookie` header. For example, this header will
    make the client browser set the value of the cookie `PHPSESSID` to `UEhQU0VTU0lE`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 除了实现`X-Frame-Options`和`Content-Security-Policy`以确保敏感页面不能被框架嵌入外，另一种防止点击劫持的方法是使用`SameSite`
    Cookies。Web应用程序通过`Set-Cookie`头指示用户的浏览器设置Cookies。例如，以下头部会使客户端浏览器将Cookie `PHPSESSID`的值设置为`UEhQU0VTU0lE`：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In addition to the basic `cookie_name=cookie_value` designation, the `Set-Cookie`
    header allows several optional flags you can use to protect your users’ cookies.
    One of them is the `SameSite` flag, which helps prevent clickjacking attacks.
    When the `SameSite` flag on a cookie is set to `Strict` or `Lax`, that cookie
    won''t be sent in requests made within a third-party iframe:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基本的`cookie_name=cookie_value`指定外，`Set-Cookie`头还允许多个可选标志来保护用户的Cookies。其中之一是`SameSite`标志，它有助于防止点击劫持攻击。当Cookie的`SameSite`标志设置为`Strict`或`Lax`时，该Cookie在通过第三方iframe发出的请求中将不会被发送：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This means that any clickjacking attack that requires the victim to be authenticated,
    like the banking example we mentioned earlier, would not work, even if no HTTP
    response header restricts framing, because the victim won’t be authenticated in
    the clickjacked request.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着任何需要受害者认证的点击劫持攻击，例如我们之前提到的银行示例，即使没有HTTP响应头限制框架嵌入，也无法成功，因为受害者在点击劫持的请求中不会被认证。
- en: Hunting for Clickjacking
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 点击劫持的狩猎
- en: Find clickjacking vulnerabilities by looking for pages on the target site that
    contain sensitive state-changing actions and can be framed.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查找包含敏感状态改变操作并且可以被框架嵌入的页面，来发现点击劫持漏洞。
- en: 'Step 1: Look for State-Changing Actions'
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第1步：查找状态改变的操作
- en: Clickjacking vulnerabilities are valuable only when the target page contains
    state-changing actions. You should look for pages that allow users to make changes
    to their accounts, like changing their account details or settings. Otherwise,
    even if an attacker can hijack user clicks, they can’t cause any damage to the
    website or the user’s account. That’s why you should start by spotting the state-changing
    actions on a site.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 点击劫持漏洞只有在目标页面包含状态改变操作时才有价值。你应寻找那些允许用户更改其帐户的页面，如更改帐户详情或设置的页面。否则，即使攻击者能够劫持用户的点击，也无法对网站或用户的账户造成任何损害。这就是为什么你应该从识别网站上的状态改变操作开始。
- en: 'For example, let’s say you’re testing a subdomain of *example.com* that handles
    banking functionalities at *bank.example.com*. Go through all the functionalities
    of the web application, click all the links, and write down all the state-changing
    options, along with the URL of the pages they’re hosted on:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你正在测试*example.com*的子域，它在*bank.example.com*上处理银行功能。浏览整个Web应用程序，点击所有链接，并记录下所有的状态改变选项，以及它们所在页面的URL：
- en: '**State-changing requests on ***bank.example.com*****'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**在***bank.example.com*****上的状态改变请求'
- en: 'Change password: *bank.example.com/password_change*'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改密码：*bank.example.com/password_change*
- en: 'Transfer balance: *bank.example.com/transfer_money*'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转账余额：*bank.example.com/transfer_money*
- en: 'Unlink external account: *bank.example.com/unlink*'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消链接外部账户：*bank.example.com/unlink*
- en: You should also check that the action can be achieved via clicks alone. Clickjacking
    allows you to forge only a user’s clicks, not their keyboard actions. Attacks
    that require users to explicitly type in values are possible, but generally not
    feasible because they require so much social engineering. For example, on this
    banking page, if the application requires users to explicitly type the recipient
    account and transfer amount instead of loading them from a URL parameter, attacking
    it with clickjacking would not be feasible.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应检查该操作是否仅通过点击即可完成。点击劫持只能伪造用户的点击，而不能伪造他们的键盘操作。需要用户显式输入值的攻击是可能的，但通常不可行，因为它们需要大量的社会工程学。例如，在这个银行页面上，如果应用程序要求用户显式输入收款账户和转账金额，而不是从URL参数加载这些信息，那么使用点击劫持攻击将不可行。
- en: 'Step 2: Check the Response Headers'
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第2步：检查响应头
- en: Then go through each of the state-changing functionalities you’ve found and
    revisit the pages that contain them. Turn on your proxy and intercept the HTTP
    response that contains that web page. See if the page is being served with the
    `X-Frame-Options` or `Content-Security-Policy` header.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，逐一查看你找到的每个状态更改功能，并重新访问包含这些功能的页面。打开你的代理，拦截包含该网页的 HTTP 响应。查看该页面是否带有 `X-Frame-Options`
    或 `Content-Security-Policy` 响应头。
- en: If the page is served without any of these headers, it may be vulnerable to
    clickjacking. And if the state-changing action requires users to be logged in
    when it is executed, you should also check if the site uses `SameSite` cookies.
    If it does, you won’t be able to exploit a clickjacking attack on the site’s features
    that require authentication.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果该页面没有任何这些响应头，可能会容易受到点击劫持攻击。如果状态更改操作要求用户登录才能执行，你还应该检查该站点是否使用了 `SameSite` cookies。如果使用了，你将无法利用点击劫持攻击该站点需要身份验证的功能。
- en: Although setting HTTP response headers is the best way to prevent these attacks,
    the website might have more obscure safeguards in place. For example, a technique
    called *frame-busting* uses JavaScript code to check if the page is in an iframe,
    and if it’s framed by a trusted site. Frame-busting is an unreliable way to protect
    against clickjacking. In fact, frame-busting techniques can often be bypassed,
    as I will demonstrate later in this chapter.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管设置 HTTP 响应头是防止这些攻击的最佳方法，但网站可能已经实施了更为隐蔽的保护措施。例如，一种名为 *frame-busting* 的技术通过
    JavaScript 代码来检查页面是否在 iframe 中，并且是否被一个受信任的网站框架嵌套。框架破坏是一种不可靠的防止点击劫持的方式。事实上，框架破坏技术常常可以被绕过，正如我将在本章后面展示的那样。
- en: 'You can confirm that a page is frameable by creating an HTML page that frames
    the target page. If the target page shows up in the frame, the page is frameable.
    This piece of HTML code is a good template:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过创建一个 HTML 页面来框架嵌套目标页面，从而确认页面是否可以被框架嵌套。如果目标页面显示在框架中，那么该页面是可以被框架嵌套的。这段 HTML
    代码是一个不错的模板：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Step 3: Confirm the Vulnerability'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第三步：确认漏洞
- en: Confirm the vulnerability by executing a clickjacking attack on your test account.
    You should try to execute the state-changing action through the framed page you
    just constructed and see if the action succeeds. If you can trigger the action
    via clicks alone through the iframe, the action is vulnerable to clickjacking.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对你的测试账户执行点击劫持攻击来确认漏洞。你应该尝试通过你刚刚构建的框架页面执行状态更改操作，并查看操作是否成功。如果你能通过点击仅在 iframe
    中触发该操作，那么该操作就容易受到点击劫持攻击。
- en: Bypassing Protections
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绕过保护
- en: Clickjacking isn’t possible when the site implements the proper protections.
    If a modern browser displays an `X-Frame-Options` protected page, chances are
    you can’t exploit clickjacking on the page, and you’ll have to find another vulnerability,
    such as XSS or CSRF, to achieve the same results. Sometimes, however, the page
    won’t show up in your test iframe even though it lacks the headers that prevent
    clickjacking. If the website itself fails to implement complete clickjacking protections,
    you might be able to bypass the mitigations.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当站点实施了适当的保护时，点击劫持是不可行的。如果现代浏览器显示一个带有 `X-Frame-Options` 保护的页面，你就不能在该页面上利用点击劫持，必须找到其他漏洞，如
    XSS 或 CSRF，以实现相同的效果。然而，有时即使页面缺少防止点击劫持的响应头，该页面也不会在你的测试 iframe 中显示。如果网站本身未能实施完整的点击劫持防护，你可能能够绕过这些缓解措施。
- en: 'Here’s an example of what you can try if the website uses frame-busting techniques
    instead of HTTP response headers and `SameSite` cookies: find a loophole in the
    frame-busting code. For instance, developers commonly make the mistake of comparing
    only the top frame to the current frame when trying to detect whether the protected
    page is framed by a malicious page. If the top frame has the same origin as the
    framed page, developers may allow it, because they deem the framing site’s domain
    to be safe. Essentially, the protection’s code has this structure:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果网站使用了框架破坏技术而不是 HTTP 响应头和 `SameSite` cookies，以下是你可以尝试的一个例子：找到框架破坏代码中的漏洞。例如，开发人员常犯的错误是在尝试检测受保护页面是否被恶意页面框架嵌套时，仅仅将顶层框架与当前框架进行比较。如果顶层框架与被框架页面具有相同的来源，开发人员可能会允许这种情况，因为他们认为框架站点的域是安全的。从本质上讲，保护代码的结构如下：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If that is the case, search for a location on the victim site that allows you
    to embed custom iframes. For example, many social media sites allows users to
    share links on their profile. These features often work by embedding the URL in
    an iframe to display information and a thumbnail of the link. Other common features
    that require custom iframes are those that allow you to embed videos, audio, images,
    and custom advertisements and web page builders.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这种情况，搜索受害者网站上允许嵌入自定义iframe的位置。例如，许多社交媒体网站允许用户在个人资料中分享链接。这些功能通常通过将URL嵌入iframe中来显示信息和链接的缩略图。其他常见的需要自定义iframe的功能包括允许嵌入视频、音频、图片、自定义广告和网页构建器。
- en: If you find one of these features, you might be able to bypass clickjacking
    protection by using the *double iframe trick*. This trick works by framing your
    malicious page within a page in the victim’s domain. First, construct a page that
    frames the victim’s targeted functionality. Then place the entire page in an iframe
    hosted by the victim site ([Figure 8-6](#figure8-6)).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你找到这些功能中的某一个，你可能能够通过使用*双重iframe技巧*绕过点击劫持保护。这个技巧的原理是将你的恶意页面嵌套在受害者域名中的页面内。首先，构建一个页面，该页面嵌套受害者的目标功能。然后将整个页面放入受害者网站托管的iframe中（见[图
    8-6](#figure8-6)）。
- en: '![f08006](image_fi/501546c08/f08006.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![f08006](image_fi/501546c08/f08006.png)'
- en: 'Figure 8-6: You can try to place your site in an iframe hosted by the victim
    site to bypass improper frame checking.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-6：你可以尝试将你的网站放入由受害者网站托管的iframe中，以绕过不正确的框架检查。
- en: This way, both `top.location` and `self.location` point to *victim.com*. The
    frame-busting code would determine that the innermost *victim.com* page is framed
    by another *victim.com* page within its domain, and therefore deem the framing
    safe. The intermediary attacker page would go undetected.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，`top.location` 和 `self.location` 都指向 *victim.com*。防止框架破坏的代码会判断最内层的 *victim.com*
    页面被另一个 *victim.com* 页面在同一域内嵌套，因此认为这种嵌套是安全的。中介的攻击者页面将不会被发现。
- en: Always ask yourself if the developer may have missed any edge cases while implementing
    protection mechanisms. Can you exploit these edge cases to your advantage?
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 总是问问自己，开发者在实施保护机制时是否可能遗漏了某些边界情况。你能利用这些边界情况为自己谋取利益吗？
- en: Let’s take a look at an example report. Periscope is a live streaming video
    application, and on July 10, 2019, it was found to be vulnerable to a clickjacking
    vulnerability. You can find the disclosed bug report at [https://hackerone.com/reports/591432/](https://hackerone.com/reports/591432/).
    *The site was using the* `X-Frame-Options ALLOW-FROM` directive to prevent clickjacking.
    This directive lets pages specify the URLs that are allowed to frame it, but it’s
    an obsolete directive that isn’t supported by many browsers. This means that all
    features on the subdomains *https://canary-web.pscp.tv* and *https://canary-web.periscope.tv*
    were vulnerable to clickjacking if the victim was using a browser that didn’t
    support the directive, such as the latest Chrome, Firefox, and Safari browsers.
    Since Periscope’s account settings page allows users to deactivate their accounts,
    an attacker could, for example, frame the settings page and trick users into deactivating
    their accounts.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看一个示例报告。Periscope 是一个直播视频应用程序，2019年7月10日，发现其存在点击劫持漏洞。你可以在 [https://hackerone.com/reports/591432/](https://hackerone.com/reports/591432/)
    找到公开的漏洞报告。*该网站使用了* `X-Frame-Options ALLOW-FROM` 指令来防止点击劫持。这个指令允许页面指定可以嵌套它的URL，但它是一个过时的指令，许多浏览器不再支持。这意味着如果受害者使用的是不支持该指令的浏览器，如最新的
    Chrome、Firefox 和 Safari 浏览器，那么子域名 *https://canary-web.pscp.tv* 和 *https://canary-web.periscope.tv*
    上的所有功能都容易受到点击劫持攻击。由于 Periscope 的账户设置页面允许用户停用账户，攻击者可以通过将设置页面嵌套在iframe中，诱使用户停用他们的账户。
- en: Escalating the Attack
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提升攻击
- en: Websites often serve pages without clickjacking protection. As long as the page
    doesn’t contain exploitable actions, the lack of clickjacking protection isn’t
    considered a vulnerability. On the other hand, if the frameable page contains
    sensitive actions, the impact of clickjacking would be correspondingly severe.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 网站经常提供没有点击劫持保护的页面。只要页面不包含可利用的操作，缺乏点击劫持保护通常不会被认为是漏洞。另一方面，如果可嵌套的页面包含敏感操作，点击劫持的影响就会相应地严重。
- en: Focus on the application’s most critical functionalities to achieve maximum
    business impact. For example, let’s say a site has two frameable pages. The first
    page contains a button that performs transfers of the user’s bank balance, while
    the second contains a button that changes the user’s theme color on the website.
    While both of these pages contain clickjacking vulnerabilities, the impact of
    a clickjacking bug is significantly higher on the first page than on the second.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 专注于应用程序的最关键功能，以实现最大的商业影响。例如，假设一个网站有两个可嵌套的页面。第一个页面包含一个执行用户银行余额转账的按钮，而第二个页面包含一个更改用户网站主题颜色的按钮。虽然这两个页面都存在点击劫持漏洞，但第一个页面的点击劫持漏洞影响远大于第二个页面。
- en: 'You can also combine multiple clickjacking vulnerabilities or chain clickjacking
    with other bugs to pave the way to more severe security issues. For instance,
    applications often send or disclose information according to user preferences.
    If you can change these settings via clickjacking, you can often induce sensitive
    information disclosures. Let’s say that *bank.example.com* contains multiple clickjacking
    vulnerabilities. One of them allows attackers to change an account’s billing email,
    and another one allows attackers to send an account summary to its billing email.
    The malicious page’s HTML looks like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将多个点击劫持漏洞组合起来，或者将点击劫持与其他漏洞链式结合，开辟更严重的安全问题。例如，应用程序通常会根据用户的偏好发送或披露信息。如果你能通过点击劫持改变这些设置，通常就能诱导敏感信息泄露。假设*bank.example.com*包含多个点击劫持漏洞。其中一个允许攻击者更改账户的账单电子邮件，另一个允许攻击者将账户摘要发送到其账单电子邮件。恶意页面的HTML如下所示：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You could first change the victim’s billing email to your own email, then make
    the victim send an account summary to your email address to leak the information
    contained in the account summary report. Depending on what the account summary
    discloses, you might be able to collect data including the street address, phone
    numbers, and credit card information associated with the account! Note that for
    this attack to succeed, the victim user would have to click the attacker’s site
    twice.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以首先将受害者的账单电子邮件更改为你自己的电子邮件地址，然后让受害者将账户摘要发送到你的电子邮件地址，从而泄露账户摘要报告中的信息。根据账户摘要披露的内容，你可能能够收集到包括街道地址、电话号码和与账户关联的信用卡信息！请注意，为了使此攻击成功，受害者用户必须点击攻击者网站两次。
- en: A Note on Delivering the Clickjacking Payload
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于点击劫持负载的交付说明
- en: Often in bug bounty reports, you’ll need to show companies that real attackers
    could effectively exploit the vulnerability you found. That means you need to
    understand how attackers can exploit clickjacking bugs in the wild.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在漏洞悬赏报告中，你通常需要向公司展示，攻击者如何有效地利用你发现的漏洞。这意味着你需要了解攻击者如何在现实环境中利用点击劫持漏洞。
- en: Clickjacking vulnerabilities rely on user interaction. For the attack to succeed,
    the attacker would have to construct a site that is convincing enough for users
    to click. This usually isn’t difficult, since users don’t often take precautions
    before clicking web pages. But if you want your attack to become more convincing,
    check out the Social-Engineer Toolkit ([https://github.com/trustedsec/social-engineer-toolkit/](https://github.com/trustedsec/social-engineer-toolkit/)).
    This set of tools can, among other things, help you clone famous websites and
    use them for malicious purposes. You can then place the iframe on the cloned website.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 点击劫持漏洞依赖于用户交互。为了使攻击成功，攻击者必须构建一个足够具吸引力的网站，促使用户点击。通常这并不难，因为用户在点击网页时往往不会采取预防措施。但如果你希望你的攻击更具说服力，可以查看社交工程工具包（[https://github.com/trustedsec/social-engineer-toolkit/](https://github.com/trustedsec/social-engineer-toolkit/)）。这个工具集可以做很多事情，其中之一是帮助你克隆著名网站并用于恶意目的。然后，你可以将iframe放置在克隆的网站上。
- en: In my experience, the most effective location in which to place the hidden button
    is directly on top of a Please Accept That This Site Uses Cookies! pop-up. Users
    usually click this button to close the window without much thought.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，最有效的隐藏按钮位置是在“请接受本网站使用Cookies！”弹窗的正上方。用户通常会点击此按钮以关闭窗口，而不会多加思考。
- en: Finding Your First Clickjacking Vulnerability!
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 找到你的第一个点击劫持漏洞！
- en: 'Now that you know what clickjacking bugs are, how to exploit them, and how
    to escalate them, go find your first clickjacking vulnerability! Follow the steps
    described in this chapter:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了点击劫持漏洞是什么，如何利用它们以及如何升级它们，快去找到你的第一个点击劫持漏洞吧！按照本章所述的步骤进行：
- en: Spot the state-changing actions on the website and keep a note of their URL
    locations. Mark the ones that require only mouse clicks to execute for further
    testing.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找出网站上会改变状态的操作，并记录下它们的URL位置。标记出那些只需要鼠标点击即可执行的操作，供进一步测试使用。
- en: Check these pages for the `X-Frame-Options`, `Content-Security-Policy` header,
    and a `SameSite` session cookie. If you can’t spot these protective features,
    the page might be vulnerable!
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查这些页面的`X-Frame-Options`、`Content-Security-Policy`头信息以及`SameSite`会话cookie。如果你无法找到这些保护特性，那么该页面可能存在漏洞！
- en: Craft an HTML page that frames the target page, and load that page in a browser
    to see if the page has been framed.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 制作一个HTML页面，将目标页面嵌套其中，并在浏览器中加载该页面，查看页面是否已被嵌套。
- en: Confirm the vulnerability by executing a simulated clickjacking attack on your
    own test account.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过对自己测试账户执行模拟的点击劫持攻击来确认该漏洞的存在。
- en: Craft a sneaky way of delivering your payload to end users, and consider the
    larger impact of the vulnerability.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计一种巧妙的方式将你的有效载荷传递给最终用户，并考虑该漏洞可能带来的更大影响。
- en: Draft your first clickjacking report!
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 撰写你的第一次点击劫持报告！
