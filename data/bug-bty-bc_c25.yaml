- en: '25'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '25'
- en: Automatic Vulnerability Discovery Using Fuzzers
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Fuzzer自动发现漏洞
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: Whenever I approach a new target, I prefer to search for bugs manually. Manual
    testing is great for discovering new and unexpected attack vectors. It can also
    help you learn new security concepts in depth. But manual testing also takes a
    lot of time and effort, so as with automating reconnaissance, you should strive
    to automate at least part of the process of finding bugs. Automated testing can
    help you tease out a large number of bugs within a short time frame.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我接触到一个新的目标时，我更倾向于手动寻找漏洞。手动测试对于发现新的和意想不到的攻击途径非常有用。它还可以帮助你深入学习新的安全概念。但手动测试也需要大量的时间和精力，因此，就像自动化侦察一样，你应该尽力至少自动化一部分漏洞发现过程。自动化测试可以帮助你在短时间内发现大量漏洞。
- en: In fact, the best-performing bug bounty hunters automate most of their hacking
    process. They automate their recon, and write programs that constantly look for
    vulnerabilities on the targets of their choice. Whenever their tools notify them
    of a potential vulnerability, they immediately verify and report it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，表现最好的漏洞赏金猎人通常会自动化大部分黑客过程。他们自动化他们的侦察工作，并编写程序，持续寻找他们选择目标的漏洞。每当他们的工具通知他们可能存在漏洞时，他们会立即进行验证并报告。
- en: Bugs discovered through an automation technique called *fuzzing*, or *fuzz testing*,
    now account for a majority of new CVE entries. While often associated with the
    development of binary exploits, fuzzing can also be used for discovering vulnerabilities
    in web applications. In this chapter, we’ll talk a bit about fuzzing web applications
    by using two tools, Burp intruder and Wfuzz, and about what it can help you achieve.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一种名为*模糊测试*（或*模糊测试技术*）的自动化技术发现的漏洞，现在占据了大多数新的CVE条目。虽然模糊测试通常与二进制漏洞开发相关联，但它也可以用于发现Web应用程序中的漏洞。在本章中，我们将讨论如何使用两个工具，Burp
    Intruder和Wfuzz，来进行Web应用程序的模糊测试，以及它能帮助你实现什么目标。
- en: What Is Fuzzing?
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是模糊测试？
- en: '*Fuzzing* is the process of sending a wide range of invalid and unexpected
    data to an application and monitoring the application for exceptions. Sometimes
    hackers craft this invalid data for a specific purpose; other times, they generate
    it randomly or by using algorithms. In both cases, the goal is to induce unexpected
    behavior, like crashes, and then check if the error leads to an exploitable bug.
    Fuzzing is particularly useful for exposing bugs like memory leaks, control flow
    issues, and race conditions. For example, you can fuzz compiled binaries for vulnerabilities
    by using tools like the American Fuzzy Lop, or AFL ([https://github.com/google/AFL/](https://github.com/google/AFL/)).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*模糊测试*是向应用程序发送各种无效和意外数据并监视应用程序异常的过程。有时，黑客会为特定目的精心制作这些无效数据；其他时候，他们会随机生成这些数据或使用算法生成。在这两种情况下，目标都是诱发意外行为，如崩溃，然后检查错误是否导致可利用的漏洞。模糊测试尤其有助于揭示像内存泄漏、控制流问题和竞态条件这样的漏洞。例如，你可以使用像American
    Fuzzy Lop（AFL）这样的工具对已编译的二进制文件进行模糊测试，寻找漏洞（[https://github.com/google/AFL/](https://github.com/google/AFL/)）。'
- en: There are many kinds of fuzzing, each optimized for testing a specific type
    of issue in an application. *Web application fuzzing* is a technique that attempts
    to expose common web vulnerabilities, like injection issues, XSS, and authentication
    bypass.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 模糊测试有很多种，每一种都针对应用程序中的特定问题进行优化。*Web应用程序模糊测试*是一种技术，旨在揭示常见的Web漏洞，如注入问题、跨站脚本（XSS）和身份验证绕过。
- en: How a Web Fuzzer Works
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web Fuzzer的工作原理
- en: Web fuzzers automatically generate malicious requests by inserting the payloads
    of common vulnerabilities into web application injection points. They then fire
    off these requests and keep track of the server’s responses.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Web模糊测试工具会自动生成恶意请求，通过将常见漏洞的有效载荷插入Web应用程序的注入点。然后，它们会发送这些请求，并追踪服务器的响应。
- en: 'To better understand this process, let’s take a look at how the open source
    web application fuzzer Wfuzz ([https://github.com/xmendez/wfuzz/](https://github.com/xmendez/wfuzz/))
    works. When provided with a wordlist and an endpoint, Wfuzz replaces all locations
    marked `FUZZ` with strings from the wordlist. For example, the following Wfuzz
    command will replace the instance of `FUZZ` inside the URL with every string in
    the *common_paths.txt* wordlist:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这个过程，让我们来看一下开源Web应用程序模糊测试工具Wfuzz（[https://github.com/xmendez/wfuzz/](https://github.com/xmendez/wfuzz/)）是如何工作的。当提供一个字典文件和一个端点时，Wfuzz会将所有标记为`FUZZ`的位置替换为字典中的字符串。例如，以下Wfuzz命令将会把URL中的`FUZZ`替换为*common_paths.txt*字典中的每个字符串：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should provide a different wordlist for each type of vulnerability you
    scan for. For instance, you can make the fuzzer behave like a directory enumerator
    by supplying it with a wordlist of common filepaths. As a result, Wfuzz will generate
    requests that enumerate the paths on *example.com*:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该为你扫描的每种漏洞类型提供不同的词表。例如，你可以通过提供一个常见文件路径的词表，使模糊测试工具像目录枚举工具一样工作。这样，Wfuzz 将生成枚举
    *example.com* 路径的请求：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can also make the fuzzer act like an IDOR scanner by providing it with
    potential ID values:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过提供潜在的 ID 值，使模糊测试工具像一个 IDOR 扫描器一样工作：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Say that *ids.txt* is a list of numeric IDs. If *example.com/view_inbox* is
    the endpoint used to access different users’ email inboxes, this command will
    cause Wfuzz to generate a series of requests that try to access other users’ inboxes,
    such as the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 *ids.txt* 是一个数字 ID 列表。如果 *example.com/view_inbox* 是用来访问不同用户邮箱的端点，那么这个命令将导致
    Wfuzz 生成一系列请求，尝试访问其他用户的邮箱，例如以下内容：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once you receive the server’s responses, you can analyze them to see if there
    really is a file in that particular path, or if you can access the email inbox
    of another user. As you can see, unlike vulnerability scanners, fuzzers are quite
    flexible in the vulnerabilities they test for. You can customize them to their
    fullest extent by specifying different payloads and injection points.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你收到服务器的响应，你可以分析这些响应，看看在特定路径中是否真的有文件，或者是否能够访问另一个用户的邮箱。如你所见，与漏洞扫描器不同，模糊测试工具在测试漏洞时非常灵活。你可以通过指定不同的有效载荷和注入点来最大程度地自定义它们。
- en: The Fuzzing Process
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模糊测试过程
- en: Now let’s go through the steps that you can take to integrate fuzzing into your
    hacking process! When you approach a target, how do you start fuzzing it? The
    process of fuzzing an application can be broken into four steps. You can start
    by determining the endpoints you can fuzz within an application. Then, decide
    on the payload list and start fuzzing. Finally, monitor the results of your fuzzer
    and look for anomalies.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看如何将模糊测试整合到你的黑客过程中的步骤！当你接近一个目标时，如何开始对其进行模糊测试？模糊测试应用程序的过程可以分为四个步骤。你可以首先确定应用程序中可以进行模糊测试的端点。然后，决定有效载荷列表并开始模糊测试。最后，监控你的模糊测试工具的结果，并寻找异常。
- en: 'Step 1: Determine the Data Injection Points'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 1：确定数据注入点
- en: The first thing to do when fuzzing a web application is to identify the ways
    a user can provide input to the application. What are the endpoints that take
    user input? What are the parameters used? What headers does the application use?
    You can think of these parameters and headers as *data injection points* or *data
    entry points*, since these are the locations at which an attacker can inject data
    into an application.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在对 Web 应用程序进行模糊测试时，首先要做的事情是识别用户如何向应用程序提供输入。有哪些端点接受用户输入？使用了哪些参数？应用程序使用了哪些头部？你可以将这些参数和头部视为
    *数据注入点* 或 *数据输入点*，因为这些是攻击者可以将数据注入应用程序的位置。
- en: 'By now, you should already have an intuition of which vulnerabilities you should
    look for on various user input opportunities. For example, when you see a numeric
    ID, you should test for IDOR, and when you see a search bar, you should test for
    reflected XSS. Classify the data injection points you’ve found on the target according
    to the vulnerabilities they are prone to:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你应该已经对在不同用户输入机会中应该寻找哪些漏洞有了直觉。例如，当你看到一个数字 ID 时，应该测试 IDOR，当你看到一个搜索框时，应该测试反射型
    XSS。根据数据注入点可能容易受到的漏洞，将你在目标上找到的数据注入点分类：
- en: '**Data entry points to test for IDORs**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试 IDOR 的数据输入点**'
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Data entry points to test for XSS**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试 XSS 的数据输入点**'
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Step 2: Decide on the Payload List'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 2：决定有效载荷列表
- en: After you’ve identified the data injection points and the vulnerabilities that
    you might be able to exploit with each one, determine what data to feed to each
    injection point. You should fuzz each injection point with common payloads of
    the most likely vulnerabilities. Feeding XSS payloads and SQL injection payloads
    into most data entry points is also worthwhile.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在你识别了数据注入点和可能利用每个点的漏洞之后，确定要向每个注入点提供的数据。你应该用常见的有效载荷对每个注入点进行模糊测试，以测试最可能的漏洞。将 XSS
    有效载荷和 SQL 注入有效载荷输入大多数数据输入点也是值得的。
- en: Using a good payload list is essential to finding vulnerabilities with fuzzers.
    I recommend downloading SecLists by Daniel Miessler ([https://github.com/danielmiessler/SecLists/](https://github.com/danielmiessler/SecLists/))
    and Big List of Naughty Strings by Max Woolf ([https://github.com/minimaxir/big-list-of-naughty-strings/](https://github.com/minimaxir/big-list-of-naughty-strings/))
    for a pretty comprehensive payload list useful for fuzzing web applications. Among
    other features, these lists include payloads for the most common web vulnerabilities,
    such as XXS, SQL injection, and XXE. Another good wordlist database for both enumeration
    and vulnerability fuzzing is FuzzDB ([https://github.com/fuzzdb-project/fuzzdb/](https://github.com/fuzzdb-project/fuzzdb/)).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一个好的负载列表对于通过模糊测试发现漏洞至关重要。我推荐下载由Daniel Miessler提供的SecLists（[https://github.com/danielmiessler/SecLists/](https://github.com/danielmiessler/SecLists/)）和由Max
    Woolf提供的Big List of Naughty Strings（[https://github.com/minimaxir/big-list-of-naughty-strings/](https://github.com/minimaxir/big-list-of-naughty-strings/)），它们是一个非常全面的负载列表，适用于模糊测试Web应用程序。除了其他功能，这些列表包括针对最常见Web漏洞（如XXS、SQL注入和XXE）的负载。另一个适用于枚举和漏洞模糊测试的好词典数据库是FuzzDB（[https://github.com/fuzzdb-project/fuzzdb/](https://github.com/fuzzdb-project/fuzzdb/)）。
- en: Besides using known payloads, you might try generating payloads randomly. In
    particular, create extremely long payloads, payloads that contain odd characters
    of various encodings, and payloads that contain certain special characters, like
    the newline character, the line-feed character, and more. By feeding the application
    garbage data like this, you might be able to detect unexpected behavior and discover
    new classes of vulnerabilities!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用已知的负载外，你还可以尝试随机生成负载。特别是，创建极长的负载，包含各种编码的奇怪字符的负载，或者包含某些特殊字符的负载，如换行符、回车符等。通过向应用程序提供这样的垃圾数据，你可能能够发现意外的行为并发现新的漏洞类别！
- en: 'You can use bash scripts, which you learned about in Chapter 5, to automate
    the generation of random payloads. How would you generate a string of a random
    length that includes specific special characters? Hint: you can use a `for` loop
    or the file */dev/random* on Unix systems.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用在第5章中学到的bash脚本，来自动生成随机负载。你将如何生成一个包含特定特殊字符的随机长度字符串？提示：你可以使用`for`循环或Unix系统上的文件*/dev/random*。
- en: 'Step 3: Fuzz'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第3步：模糊测试
- en: Next, systematically feed your payload list to the data entry points of the
    application. There are several ways of doing this, depending on your needs and
    programming skills. The simplest way to automate fuzzing is to use the Burp intruder
    ([Figure 25-1](#figure25-1)). The intruder offers a fuzzer with a graphical user
    interface (GUI) that seamlessly integrates with your Burp proxy. Whenever you
    encounter a request you’d like to fuzz, you can right-click it and choose **Send
    to Intruder**.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，系统地将你的负载列表传递到应用程序的数据输入点。根据你的需求和编程技能，有几种方法可以做到这一点。最简单的自动化模糊测试方式是使用Burp intruder（[图
    25-1](#figure25-1)）。Burp intruder 提供了一个具有图形用户界面（GUI）的模糊测试工具，并与Burp代理无缝集成。每当你遇到一个想要进行模糊测试的请求时，可以右键点击它并选择**发送到
    Intruder**。
- en: In the Intruder tab, you can configure your fuzzer settings, select your data
    injection points and payload list, and start fuzzing. To add a part of the request
    as a data injection point, highlight the portion of the request and click **Add**
    on the right side of the window.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在Intruder标签页中，你可以配置模糊测试器设置，选择数据注入点和负载列表，并开始模糊测试。要将请求的某一部分作为数据注入点，请突出显示请求的部分，并点击窗口右侧的**添加**。
- en: '![f25001](image_fi/501546c25/f25001.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![f25001](image_fi/501546c25/f25001.png)'
- en: 'Figure 25-1: The Burp intruder payload position selection'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 25-1：Burp intruder 负载位置选择
- en: Then either select a predefined list of payloads or generate payload lists in
    the Payloads tab ([Figure 25-2](#figure25-2)). For example, you could generate
    list of numbers or randomly generated alphanumeric strings.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，选择一个预定义的负载列表或在Payloads标签页中生成负载列表（[图 25-2](#figure25-2)）。例如，你可以生成数字列表或随机生成的字母数字字符串。
- en: '![f25002](image_fi/501546c25/f25002.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![f25002](image_fi/501546c25/f25002.png)'
- en: 'Figure 25-2: Selecting the payload list in Burp intruder'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 25-2：在 Burp intruder 中选择负载列表
- en: 'Burp intruder is easy to use, but it has a downside: the free version of Burp
    limits the fuzzer’s functionality, and time-throttles its attacks, meaning that
    it slows your fuzzing and limits the number of requests you can send over a certain
    period of time. You’ll be able to send only a certain number of requests per minute,
    making the intruder a lot less efficient than a non-time-throttled fuzzer. Unless
    you need a GUI or have the professional version of Burp, you’re better off using
    an open source fuzzer like OWASP ZAP’s fuzzer or Wfuzz. You’ll learn how to fuzz
    a target with Wfuzz in “Fuzzing with Wfuzz” later on this page.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Burp intruder 使用起来很方便，但它也有一个缺点：Burp 的免费版本限制了模糊测试工具的功能，并且对攻击进行时间限制，这意味着它会减缓你的模糊测试并限制你在一定时间内可以发送的请求数量。你每分钟只能发送有限数量的请求，这使得
    intruder 的效率低于没有时间限制的模糊测试工具。除非你需要图形界面或者拥有 Burp 的专业版，否则你最好使用开源的模糊测试工具，如 OWASP ZAP
    的 fuzzer 或 Wfuzz。在本页稍后，你将学习如何使用 Wfuzz 对目标进行模糊测试。
- en: Note that sometimes throttling your fuzzers will be necessary to prevent disruption
    to the application’s operations. This shouldn’t be an issue for bigger companies,
    but you could accidentally launch a DoS attack on smaller companies without scaling
    architectures if you fuzz their applications without time throttling. Always use
    caution and obtain permission from the company when conducting fuzz testing!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，有时为了防止干扰应用程序的正常运行，你可能需要限制模糊测试工具的速度。对于大型公司来说，这通常不是问题，但如果你没有进行时间限制地对小型公司的应用程序进行模糊测试，可能会意外地发起
    DoS 攻击。进行模糊测试时，请始终小心并获得公司的许可！
- en: 'Step 4: Monitor the Results'
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 4：监控结果
- en: Analyze the results your fuzzer returned, looking for patterns and anomalies
    in the server responses. What to look for depends on the payload set you used
    and the vulnerability you’re hoping to find. For example, when you’re using a
    fuzzer to find filepaths, status codes are a good indicator of whether a file
    is present. If the returned status code for a pathname is in the 200 range, you
    might have discovered a valid path. If the status code is 404, on the other hand,
    the filepath probably isn’t valid.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 分析你的模糊测试工具返回的结果，寻找服务器响应中的模式和异常。需要寻找的内容取决于你使用的负载集和你希望发现的漏洞。例如，当你使用模糊测试工具来查找文件路径时，状态码是判断文件是否存在的一个好指标。如果某个路径名的返回状态码在
    200 范围内，你可能发现了一个有效路径。而如果状态码是 404，那么这个文件路径可能是无效的。
- en: When fuzzing for SQL injection, you might want to look for a change in response
    content length or time. If the returned content for a certain payload is longer
    than that of other payloads, it might indicate that your payload was able to influence
    the database’s operation and change what it returned. On the other hand, if you’re
    using a payload list that induces time delays in an application, check whether
    any of the payloads make the server respond more slowly than average. Use the
    knowledge you learned in this book to identify key indicators that a vulnerability
    is present.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行 SQL 注入模糊测试时，你可能需要观察响应内容长度或时间的变化。如果某个负载返回的内容比其他负载的内容要长，这可能表明你的负载成功地影响了数据库的操作并改变了返回的内容。另一方面，如果你使用的负载列表会引起应用程序的时间延迟，检查是否有任何负载让服务器的响应速度比平时更慢。运用你在本书中学到的知识来识别潜在漏洞的关键指标。
- en: Fuzzing with Wfuzz
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Wfuzz 进行模糊测试
- en: 'Now that you understand the general approach to take, let’s walk through a
    hands-on example using Wfuzz, which you can install by using this command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了大致的操作方法，让我们通过一个实际的例子来演示如何使用 Wfuzz，安装命令如下：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Fuzzing is useful in both the recon phase and the hunting phase: you can use
    fuzzing to enumerate filepaths, brute-force authentication, test for common web
    vulnerabilities, and more.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 模糊测试在信息收集阶段和漏洞猎杀阶段都非常有用：你可以使用模糊测试来列举文件路径、暴力破解认证、测试常见的 Web 漏洞等。
- en: Path Enumeration
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 路径枚举
- en: 'During the recon stage, try using Wfuzz to enumerate filepaths on a server.
    Here’s a command you can use to enumerate filepaths on *example.com*:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在信息收集阶段，尝试使用 Wfuzz 枚举服务器上的文件路径。以下是你可以用来枚举 *example.com* 上文件路径的命令：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `-w` flag option specifies the wordlist to use for enumeration. In this
    case, you should pick a good path enumeration wordlist designed for the technology
    used by your target. The `-f` flag specifies the output file location. Here, we
    store our results into a file named *output.txt* in the current directory. The
    `--hc 404` option tells Wfuzz to exclude any response that has a 404 status code.
    Remember that this code stands for File Not Found. With this filter, we can easily
    drop URLs that don’t point to a valid file or directory from the results list.
    The `--follow` flag tells Wfuzz to follow all HTTP redirections so that our result
    shows the URL’s actual destination.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`-w` 标志选项指定用于枚举的字典。在这种情况下，你应该选择一个为目标使用的技术设计的良好的路径枚举字典。`-f` 标志指定输出文件的位置。在这里，我们将结果存储到当前目录下名为
    *output.txt* 的文件中。`--hc 404` 选项告诉 Wfuzz 排除任何返回 404 状态码的响应。记住，这个状态码代表文件未找到。通过这个过滤器，我们可以轻松地从结果列表中去除那些指向无效文件或目录的
    URL。`--follow` 标志告诉 Wfuzz 跟随所有 HTTP 重定向，以便我们的结果显示 URL 的实际目的地。'
- en: 'Let’s run the command using a simple wordlist to see what we can find on *facebook.com*.
    For our purposes, let’s use a wordlist comprising just four words, called *wordlist.txt*:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用一个简单的字典运行命令，看看能在 *facebook.com* 上找到什么。为了我们的目的，我们使用一个仅包含四个单词的字典，名为 *wordlist.txt*：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Run this command to enumerate paths on Facebook:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令以枚举 Facebook 上的路径：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let’s take a look at the results. From left to right, a Wfuzz report has the
    following columns for each request: Request ID, HTTP Response Code, Response Length
    in Lines, Response Length in Words, Response Length in Characters, and the Payload
    Used:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下结果。从左到右，Wfuzz 报告每个请求的列包括：请求 ID、HTTP 响应码、响应行数、响应字数、响应字符数和使用的有效负载：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can see that these results contain only one response. This is because we
    filtered out irrelevant results. Since we dropped all 404 responses, we can now
    focus on the URLs that point to actual paths. It looks like */secure* returned
    a 200 OK status code and is a valid path on *facebook.com*.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，这些结果只包含一个响应。这是因为我们过滤掉了不相关的结果。由于我们已经去除了所有 404 响应，现在可以集中精力关注那些指向实际路径的 URL。看起来
    *facebook.com* 上的 */secure* 返回了 200 OK 状态码，是一个有效的路径。
- en: Brute-Forcing Authentication
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 暴力破解认证
- en: Once you’ve gathered valid filepaths on the target, you might find that some
    of the pages on the server are protected. Most of the time, these pages will have
    a 403 Forbidden response code. What can you do then?
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你收集到目标的有效文件路径，可能会发现服务器上的某些页面受到保护。大多数情况下，这些页面会返回 403 Forbidden 响应码。那么该怎么办呢？
- en: 'Well, you could try to brute-force the authentication on the page. For example,
    sometimes pages use HTTP’s *basic* authentication scheme as access control. In
    this case, you can use Wfuzz to fuzz the authentication headers, using the `-H`
    flag to specify custom headers:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，你可以尝试暴力破解页面上的认证。例如，有些页面使用 HTTP 的 *basic* 认证方案作为访问控制。在这种情况下，你可以使用 Wfuzz 来模糊化认证头部，使用
    `-H` 标志指定自定义头部：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The basic authentication scheme uses a header named `Authorization` to transfer
    credentials that are the base64-encoded strings of username and password pairs.
    For example, if your username and password were `admin` and `password`, your authentication
    string would be `base64("admin:password")`, or `YWRtaW46cGFzc3dvcmQ=`. You could
    generate authentication strings from common username and password pairs by using
    a script, then feed them to your target’s protected pages by using Wfuzz.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 基本认证方案使用一个名为 `Authorization` 的头部，传输经过 base64 编码的用户名和密码对。例如，如果你的用户名和密码是 `admin`
    和 `password`，那么你的认证字符串就是 `base64("admin:password")`，即 `YWRtaW46cGFzc3dvcmQ=`。你可以通过使用脚本从常见的用户名和密码对生成认证字符串，然后通过
    Wfuzz 将它们提交到目标的受保护页面。
- en: 'Another way to brute-force basic authentication is to use Wfuzz’s `--basic`
    option. This option automatically constructs authentication strings to brute-force
    basic authentication, given an input list of usernames and passwords. In Wfuzz,
    you can mark different injection points with `FUZZ`, `FUZ2Z`, `FUZ3Z`, and so
    on. These injection points will be fuzzed with the first, second, and third wordlist
    passed in, respectively. Here’s a command you can use to fuzz the username and
    password field at the same time:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种暴力破解基本认证的方法是使用 Wfuzz 的 `--basic` 选项。此选项自动构造认证字符串来暴力破解基本认证，给定一个包含用户名和密码的输入列表。在
    Wfuzz 中，你可以用 `FUZZ`、`FUZ2Z`、`FUZ3Z` 等标记不同的注入点。这些注入点将分别用传递进来的第一个、第二个和第三个字典中的单词进行模糊处理。以下是你可以用来同时模糊化用户名和密码字段的命令：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The *usernames.txt* file contains two usernames: `admin` and `administrator`.
    The *passwords.txt* file contains three passwords: `secret`, `pass`, and `password`.
    As you can see, Wfuzz sends a request for each username and password combination
    from your lists:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*usernames.txt* 文件包含两个用户名：`admin` 和 `administrator`。*passwords.txt* 文件包含三个密码：`secret`、`pass`
    和 `password`。如你所见，Wfuzz 会为你列表中的每个用户名和密码组合发送请求：'
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Other ways to bypass authentication by using brute-forcing include switching
    out the `User-Agent` header or forging custom headers used for authentication.
    You could accomplish all of these by using Wfuzz to brute-force HTTP request headers.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 其他绕过身份验证的方法包括更改 `User-Agent` 头或伪造用于身份验证的自定义头。你可以通过使用 Wfuzz 来暴力破解 HTTP 请求头完成这些操作。
- en: Testing for Common Web Vulnerabilities
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试常见的 Web 漏洞
- en: 'Finally, Wfuzz can help you automatically test for common web vulnerabilities.
    First of all, you can use Wfuzz to fuzz URL parameters and test for vulnerabilities
    like IDOR and open redirects. Fuzz URL parameters by placing a `FUZZ` keyword
    in the URL. For example, if a site uses a numeric ID for chat messages, test various
    IDs by using this command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Wfuzz 可以帮助你自动测试常见的 Web 漏洞。首先，你可以使用 Wfuzz 对 URL 参数进行模糊测试，检测类似 IDOR 和开放重定向等漏洞。通过在
    URL 中放置 `FUZZ` 关键字来模糊测试 URL 参数。例如，如果一个网站使用数字 ID 来表示聊天消息，可以使用以下命令测试各种 ID：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Then find valid IDs by examining the response codes or content length of the
    response and see if you can access the messages of others. The IDs that point
    to valid pages usually return a 200 response code or a longer web page.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过检查响应代码或响应内容长度来查找有效的 ID，看看你是否能够访问他人的消息。指向有效页面的 ID 通常返回 200 响应代码或更长的网页。
- en: 'You can also insert payloads into redirect parameters to test for an open redirect:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将有效载荷插入重定向参数中，以测试是否存在开放重定向：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To check if a payload causes a redirect, turn on Wfuzz’s follow (`--follow`)
    and verbose (`-v`) options. The follow option instructs Wfuzz to follow redirects.
    The verbose option shows more detailed results, including whether redirects occurred
    during the request. See if you can construct a payload that redirects users to
    your site:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查有效载荷是否会导致重定向，打开 Wfuzz 的跟随（`--follow`）和详细输出（`-v`）选项。跟随选项指示 Wfuzz 跟随重定向。详细输出选项显示更详细的结果，包括请求过程中是否发生了重定向。看看你是否能构造一个将用户重定向到你网站的有效载荷：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Finally, test for vulnerabilities such as XSS and SQL injection by fuzzing URL
    parameters, POST parameters, or other user input locations with common payload
    lists.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，测试像 XSS 和 SQL 注入这样的漏洞，通过模糊测试 URL 参数、POST 参数或其他用户输入位置，使用常见的有效载荷列表。
- en: 'When testing for XSS by using Wfuzz, try creating a list of scripts that redirect
    the user to your page, and then turn on the verbose option to monitor for any
    redirects. Alternatively, you can use Wfuzz content filters to check for XSS payloads
    reflected. The `--filter` flag lets you set a result filter. An especially useful
    filter is `content~``STRING`, which returns responses that contain whatever `STRING`
    is:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Wfuzz 测试 XSS 时，尝试创建一个脚本列表，将用户重定向到你的页面，然后打开详细输出选项来监控是否有重定向发生。或者，你可以使用 Wfuzz
    内容过滤器来检查是否有反射的 XSS 有效载荷。`--filter` 标志让你设置一个结果过滤器。一个特别有用的过滤器是 `content~``STRING`，它返回包含
    `STRING` 的响应：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: For SQL injection vulnerabilities, try using a premade SQL injection wordlist
    and monitor for anomalies in the response time, response code, or response length
    of each payload. If you use SQL injection payloads that include time delays, look
    for long response times. If most payloads return a certain response code but one
    does not, investigate that response further to see if there’s a SQL injection
    there. A longer response length might also be an indication that you were able
    to extract data from the database.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 SQL 注入漏洞，尝试使用现成的 SQL 注入单词列表，并监控每个有效载荷的响应时间、响应代码或响应长度的异常。如果你使用包含时间延迟的 SQL
    注入有效载荷，注意查看长时间的响应。如果大多数有效载荷返回某个特定的响应代码，而其中一个没有，进一步调查该响应以查看是否存在 SQL 注入漏洞。较长的响应长度也可能是你成功从数据库中提取数据的迹象。
- en: 'The following command tests for SQL injection using the wordlist *sqli.txt*.
    You can specify POST body data with the `-d` flag:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令使用单词列表 *sqli.txt* 测试 SQL 注入。你可以使用 `-d` 标志指定 POST 请求体数据：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: More About Wfuzz
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多关于 Wfuzz 的信息
- en: Wfuzz has many more advanced options, filters, and customizations that you can
    take advantage of. Used to its full potential, Wfuzz can automate the most tedious
    parts of your workflow and help you find more bugs. For more cool Wfuzz tricks,
    read its documentation at [https://wfuzz.readthedocs.io/](https://wfuzz.readthedocs.io/).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Wfuzz 还有许多更高级的选项、过滤器和自定义功能，你可以充分利用。充分发挥 Wfuzz 的潜力，它可以自动化你工作流程中最繁琐的部分，帮助你找到更多的漏洞。想了解更多酷炫的
    Wfuzz 技巧，可以查看它的文档：[https://wfuzz.readthedocs.io/](https://wfuzz.readthedocs.io/)。
- en: Fuzzing vs. Static Analysis
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模糊测试与静态分析
- en: 'In Chapter 22, I discussed the effectiveness of source code review for discovering
    web vulnerabilities. You might now be wondering: why not just perform a static
    analysis of the code? Why conduct fuzz testing at all?'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在第22章中，我讨论了源代码审查在发现 Web 漏洞中的有效性。你现在可能会想：为什么不直接对代码进行静态分析？为什么还要进行模糊测试呢？
- en: Static code analysis is an invaluable tool for identifying bugs and improper
    programming practices that attackers can exploit. However, static analysis has
    its limitations.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 静态代码分析是发现漏洞和不当编程习惯的宝贵工具，攻击者可以利用这些漏洞。然而，静态分析也有其局限性。
- en: First, it evaluates an application in a non-live state. Performing code review
    on an application won’t let you simulate how the application will react when it’s
    running live and clients are interacting with it, and it’s very difficult to predict
    all the possible malicious inputs an attacker can provide.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，它是在非实时状态下评估应用程序。对应用程序进行代码审查无法模拟应用程序在实时运行时的反应，也很难预测攻击者可能提供的所有恶意输入。
- en: Static code analysis also requires access to the application’s source code.
    When you’re doing a black-box test, as in a bug bounty scenario, you probably
    won’t be able to obtain the source code unless you can leak the application’s
    source code or identify the open source components the application is using. This
    makes fuzzing a great way of adding to your testing methodology, since you won’t
    need the source code to fuzz an application.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 静态代码分析也需要访问应用程序的源代码。当你进行黑盒测试时，比如在漏洞赏金场景中，你可能无法获得源代码，除非你能够泄露应用程序的源代码或识别出应用程序使用的开源组件。这使得模糊测试成为一种很好的补充测试方法，因为你不需要源代码就能对应用程序进行模糊测试。
- en: Pitfalls of Fuzzing
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模糊测试的陷阱
- en: Of course, fuzzing isn’t a magic cure-all solution for all bug detection. This
    technique has certain limitations, one of which is rate-limiting by the server.
    During a remote, black-box engagement, you might not be able to send in large
    numbers of payloads to the application without the server detecting your activity,
    or you hitting some kind of rate limit. This can cause your testing to slow down
    or the server might ban you from the service.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，模糊测试并不是万能的解决方案，它在漏洞检测方面也有一定的局限性，其中之一是服务器的速率限制。在远程黑盒测试中，你可能无法向应用程序发送大量有效载荷，而不被服务器检测到你的活动，或触发某种速率限制。这可能会导致你的测试变慢，或者服务器可能会将你封禁。
- en: 'In a black-box test, it can also be difficult to accurately evaluate the impact
    of the bug found through fuzzing, since you don’t have access to the code and
    so are getting a limited sample of the application’s behavior. You’ll often need
    to conduct further manual testing to classify the bug’s validity and significance.
    Think of fuzzing as a metal detector: it merely points you to the suspicious spots.
    In the end, you need to inspect more closely to see if you have found something
    of value.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在黑盒测试中，通过模糊测试发现的漏洞可能也很难准确评估其影响，因为你无法访问源代码，因此只能获取应用程序行为的有限样本。你通常需要进行进一步的手动测试，才能分类漏洞的有效性和重要性。可以将模糊测试视为金属探测器：它只是指引你发现可疑的地方，最终你需要仔细检查，看看是否找到了有价值的东西。
- en: Another limitation involves the classes of bugs that fuzzing can find. Although
    fuzzing is good at finding certain basic vulnerabilities like XSS and SQL injection,
    and can sometimes aid in the discovery of new bug types, it isn’t much help in
    detecting business logic errors, or bugs that require multiple steps to exploit.
    These complex bugs are a big source of potential attacks and still need to be
    teased out manually. While fuzzing should be an essential part of your testing
    process, it should by no means be the only part of it.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个局限性涉及模糊测试能够发现的漏洞类别。虽然模糊测试擅长发现一些基本的漏洞，比如 XSS 和 SQL 注入，并且有时能帮助发现新的漏洞类型，但在检测业务逻辑错误或需要多个步骤才能利用的漏洞时帮助不大。这些复杂的漏洞是潜在攻击的主要来源，仍然需要手动排查。虽然模糊测试应该是你测试流程的一个重要部分，但绝不应是唯一的部分。
- en: Adding to Your Automated Testing Toolkit
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向你的自动化测试工具包添加新工具
- en: Automated testing tools like fuzzers or scanners can help you discover some
    bugs, but they often hinder your learning progress if you don’t take the time
    to understand how each tool in your testing toolkit works. Thus, before adding
    a tool to your workflow, be sure to take time to read the tool’s documentation
    and understand how it works. You should do this for all the recon and testing
    tools you use.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 像模糊测试工具或扫描器这样的自动化测试工具可以帮助你发现一些漏洞，但如果你没有花时间理解测试工具包中每个工具的工作原理，它们往往会妨碍你的学习进程。因此，在将工具添加到你的工作流程之前，一定要花时间阅读该工具的文档，并理解其工作原理。你应该对你使用的所有侦查和测试工具做同样的事情。
- en: Besides reading the tool’s documentation, I also recommend reading its source
    code if it’s open source. This can teach you about the methodologies of other
    hackers and provide insight into how the best hackers in the field approach their
    testing. Finally, by learning how others automate hacking, you’ll begin learning
    how to write your own tools as well.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 除了阅读工具的文档外，我还建议你阅读其源代码，特别是如果它是开源的。这可以让你了解其他黑客的方法论，并提供关于领域内顶级黑客如何进行测试的洞察。最后，通过学习其他人如何自动化黑客攻击，你将开始学习如何编写自己的工具。
- en: 'Here’s a challenge for you: read the source code of the tools Sublist3r ([https://github.com/aboul3la/Sublist3r/](https://github.com/aboul3la/Sublist3r/))
    and Wfuzz ([https://github.com/xmendez/wfuzz/](https://github.com/xmendez/wfuzz/)).
    These are both easy-to-understand tools written in Python. Sublist3r is a subdomain
    enumeration tool, while Wfuzz is a web application fuzzer. How does Sublist3r
    approach subdomain enumeration? How does Wfuzz fuzz web applications? Can you
    write down their application logic, starting from the point at which they receive
    an input target and ending when they output their results? Can you rewrite the
    functionalities they implement using a different approach?'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个挑战：阅读工具Sublist3r（[https://github.com/aboul3la/Sublist3r/](https://github.com/aboul3la/Sublist3r/)）和Wfuzz（[https://github.com/xmendez/wfuzz/](https://github.com/xmendez/wfuzz/)）的源代码。这两个工具都是用Python编写的，容易理解。Sublist3r是一个子域名枚举工具，而Wfuzz是一个Web应用程序模糊测试工具。Sublist3r是如何进行子域名枚举的？Wfuzz是如何对Web应用程序进行模糊测试的？你能把它们的应用逻辑写下来吗？从它们接收输入目标的那一刻开始，直到输出结果为止。你能否使用不同的方法重新编写它们实现的功能？
- en: 'Once you’ve gained a solid understanding of how your tools work, try to modify
    them to add new features! If you think others would find your feature useful,
    you could contribute to the open source project: propose that your feature be
    added to the official version of the tool.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你对工具的工作原理有了扎实的理解，尝试修改它们以添加新功能！如果你认为别人会觉得你的功能有用，你可以为开源项目做出贡献：提议将你的功能添加到工具的官方版本中。
- en: Understanding how your tools and exploits work is the key to becoming a master
    hacker. Good luck and happy hacking!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 了解你的工具和漏洞利用的工作原理是成为一名大师级黑客的关键。祝你好运，快乐黑客！
