- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Attacking Mobile Applications
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击移动应用
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: Today, you can use your mobile phone to control practically everything in your
    home. Imagine that it’s date night with your partner. You’ve prepared dinner,
    placed it in the oven, and set the cooking instructions on your phone, which you
    also use to regularly monitor its progress. Then you adjust the ventilation, heating,
    and cooling, which you also control through an app on your phone. You use your
    phone to set the TV to play some background music. (You lost your TV remote three
    years ago and never bothered to look for it.) You also use an app to dim the IoT-enabled
    lights. Everything is perfect.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，你可以使用手机控制家里几乎所有的设备。想象一下，今天是你和伴侣的约会之夜。你准备了晚餐，将其放入烤箱，并通过手机设置了烹饪指令，手机还会定期监控其进展。接着，你通过手机调整通风、加热和制冷系统。你还用手机设置电视播放一些背景音乐。（你三年前丢了电视遥控器，至今没再找过。）你还用一个应用调节IoT智能灯光的亮度。一切都很完美。
- en: 'But if everything in your house is controlled by your phone, anyone who has
    compromised your phone can also control your home. In this chapter, we provide
    an overview of threats and vulnerabilities common to IoT companion mobile apps.
    Then we perform an analysis of two intentionally insecure apps: the OWASP iGoat
    app for iOS and the InsecureBankV2 app for Android.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你家中的一切都由手机控制，那么任何一位攻破你手机的人也能控制你的家。在本章中，我们概述了IoT伴随移动应用中常见的威胁和漏洞。然后，我们分析了两个故意存在安全漏洞的应用：iOS平台的OWASP
    iGoat应用和Android平台的InsecureBankV2应用。
- en: Because we’re nearing the end of the book, we move quickly through the many
    vulnerabilities these apps contain, all while referencing many tools and analysis
    methods. We encourage you to explore each of the tools and techniques in more
    detail on your own.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们已接近本书的尾声，所以我们快速浏览了这些应用中包含的众多漏洞，同时引用了许多工具和分析方法。我们鼓励你自行深入探索每一个工具和技术。
- en: Threats in IoT Mobile Apps
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IoT移动应用中的威胁
- en: Mobile apps bring their own ecosystem of threats to the IoT-enabled world. In
    this section, we’ll walk through a process similar to the threat modeling methodology
    in Chapter 2 to investigate the main threats that mobile apps introduce against
    our IoT device.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用为IoT支持的世界带来了自身的威胁生态系统。在这一部分，我们将通过类似于第2章中的威胁建模方法，探讨移动应用带来的主要威胁，尤其是针对我们的IoT设备。
- en: Because designing the threat model isn’t the main target of this chapter, we
    won’t perform a full analysis on the components we identify. Instead, we’ll examine
    the generic threat categories related to mobile devices and then identify the
    relevant vulnerabilities.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本章的主要目标并非设计威胁模型，我们不会对所识别的组件进行全面分析。相反，我们将审视与移动设备相关的一般威胁类别，并识别相关的漏洞。
- en: Breaking Down the Architecture into Components
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将架构分解为组件
- en: '[Figure 14-1](#figure14-1) shows the basic components of an IoT mobile app
    environment.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[图14-1](#figure14-1)展示了IoT移动应用环境的基本组成部分。'
- en: '![f14001](Images/f14001.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![f14001](Images/f14001.png)'
- en: 'Figure 14-1: Breaking down the IoT companion mobile app environment'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-1：分解IoT伴随移动应用环境
- en: We separate the mobile app from the platform-specific ecosystem and hardware-related
    functionalities. We also take into account the process of installing an IoT companion
    mobile app from an app store, the communication of this app with the IoT device,
    the vendor’s infrastructure, and any potential third-party service provider.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将移动应用与平台特定的生态系统和硬件相关功能分开。我们还考虑了从应用商店安装IoT伴随移动应用的过程，应用与IoT设备的通信、供应商的基础设施，以及任何潜在的第三方服务提供商。
- en: Identifying Threats
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 识别威胁
- en: 'Now we’ll identify two kinds of threats to mobile app environments: general
    threats affecting mobile devices and threats affecting the Android and iOS environments
    specifically.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将识别移动应用环境中的两种威胁：一般影响移动设备的威胁和专门影响Android与iOS环境的威胁。
- en: General Mobile Device Threats
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 一般移动设备威胁
- en: The main characteristic of a mobile device is its portability. You can easily
    carry a phone everywhere, and as a result, it can be easily lost or stolen. Even
    if people steal phones for the device’s value, adversaries could retrieve sensitive
    personal data stored in the IoT companion app storage. Or, they could attempt
    to circumvent a weak or broken authentication control in the app to gain remote
    access to the associated IoT device. Device owners who remain logged into their
    IoT companion app accounts will make the process much easier for the attackers.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备的主要特点是其便携性。您可以轻松携带手机到任何地方，因此它很容易丢失或被盗。即使人们偷窃手机是为了设备的价值，攻击者也可能从物联网伴侣应用的存储中获取敏感的个人数据。或者，他们可能尝试绕过应用中弱或损坏的身份验证控制，远程访问关联的物联网设备。若设备所有者仍然登录其物联网伴侣应用账户，这将大大简化攻击者的攻击过程。
- en: In addition, mobile devices are usually connected to untrusted networks, such
    as the random Wi-Fi public hotspots in cafes and hotel rooms, opening the way
    for a variety of network attacks (such as man-in-the-middle attacks or network
    sniffing). The IoT companion apps are typically designed to perform network connections
    to the vendor’s infrastructure, cloud services, and the IoT device. Adversaries
    can exfiltrate or tamper with the exchanged data if these apps are operating in
    insecure networks.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，移动设备通常连接到不受信任的网络，例如咖啡馆和酒店房间中的随机Wi-Fi公共热点，这为各种网络攻击（如中间人攻击或网络嗅探）提供了机会。物联网伴侣应用通常设计为与供应商的基础设施、云服务和物联网设备进行网络连接。如果这些应用在不安全的网络中运行，攻击者可以窃取或篡改交换的数据。
- en: The app could also work as a bridge between the IoT device and the vendor’s
    API, third-party providers, and cloud platforms. These external systems could
    introduce new threats regarding the protection of the exchanged sensitive data.
    Attackers can target and exploit publicly accessible services or misconfigured
    infrastructure components to gain remote access and extract the stored data.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用还可能作为物联网设备与供应商的API、第三方提供商和云平台之间的桥梁。这些外部系统可能引入关于保护交换的敏感数据的新威胁。攻击者可以攻击和利用公开访问的服务或配置错误的基础设施组件，以获得远程访问并提取存储的数据。
- en: The actual procedure of installing the app might also be susceptible to attacks.
    Not all IoT companion apps come from an official mobile app store. Many mobile
    devices let you install apps from third-party stores or apps that aren’t necessarily
    signed by a valid developer’s certificate. Adversaries exploit this issue to deliver
    fake versions of the apps that contain malicious functionalities.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 安装应用的实际过程也可能容易受到攻击。并非所有物联网伴侣应用都来自官方的移动应用商店。许多移动设备允许您从第三方商店安装应用，或安装那些不一定由有效开发者证书签名的应用。攻击者利用这一问题分发包含恶意功能的假冒应用版本。
- en: Android and iOS Threats
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Android和iOS威胁
- en: Now let’s investigate the threats related to the Android and iOS platforms.
    [Figure 14-2](#figure14-2) shows the ecosystems for both platforms.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们研究与Android和iOS平台相关的威胁。[图14-2](#figure14-2)展示了这两个平台的生态系统。
- en: 'The software for both platforms includes three layers: a lower layer containing
    the operating system and interfaces to the device resources; an intermediate layer
    consisting of the libraries and application frameworks that provide most of the
    API functionality; and an applications layer, in which the custom apps and a set
    of system apps reside. The applications layer is responsible for letting the user
    interact with the mobile device.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个平台的软件包括三个层次：底层包含操作系统和与设备资源的接口；中间层由提供大部分API功能的库和应用框架组成；应用层则包含定制应用程序和一组系统应用程序。应用层负责让用户与移动设备进行交互。
- en: '![f14002](Images/f14002.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![f14002](Images/f14002.png)'
- en: 'Figure 14-2: The Android and iOS ecosystems'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-2：Android和iOS生态系统
- en: Both platforms offer flexibility to developers and users. For example, users
    might want to install customized software, such as games and extensions developed
    by untrusted programmers. Adversaries can trick users into installing malware
    camouflaged as legit apps, and these apps can interact with an IoT companion app
    in malicious ways. Additionally, the platforms have rich development environments,
    but reckless or untrained developers sometimes fail to protect sensitive data
    by inappropriately using the inherited device-specific security controls, or in
    certain cases, even disabling them.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 两个平台都为开发人员和用户提供了灵活性。例如，用户可能希望安装定制软件，如由不受信任的程序员开发的游戏和扩展程序。攻击者可以欺骗用户安装伪装成合法应用程序的恶意软件，这些应用程序可能以恶意方式与
    IoT 配套应用程序进行交互。此外，这些平台提供了丰富的开发环境，但不谨慎或未经过培训的开发人员有时会因为不恰当地使用继承的设备特定安全控制，甚至在某些情况下禁用它们，从而未能保护敏感数据。
- en: 'Certain platforms, such as Android, suffer from another threat: the quantity
    of different available devices that run the platform. Many of these devices use
    outdated versions of the platform operating system that contain known vulnerabilities,
    introducing a *software fragmentation* problem. It’s nearly impossible for a developer
    to keep track of and mitigate all these issues as well as identify them. Also,
    attackers can identify, target, and abuse ill-protected IoT companion apps by
    exploiting specific device inconsistencies. For example, APIs related to security
    controls, such as fingerprint authentication, might not always have the expected
    behavior due to hardware differences. Multiple manufacturers offer device hardware
    for Android with different specs and security baseline standards. These vendors
    are also responsible for maintaining and deploying their own custom *Read-Only
    Memory (ROM),* which amplifies the fragmentation problem. Users expect a well-tested,
    robust, and secure software, but instead, the developers build upon the not-so-reliable
    API of an unpredictable environment.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 某些平台，如 Android，面临另一种威胁：运行该平台的不同设备数量。许多这些设备使用过时版本的操作系统，这些版本包含已知的漏洞，从而引发了*软件碎片化*问题。开发人员几乎不可能跟踪并缓解所有这些问题，也很难识别它们。此外，攻击者可以通过利用特定设备的不一致性，识别、针对并滥用保护不力的
    IoT 配套应用程序。例如，涉及安全控制的 API，如指纹认证，可能由于硬件差异而无法始终如预期般工作。多家厂商为 Android 提供设备硬件，其规格和安全基准标准各不相同。这些厂商还负责维护并部署其自定义的*只读存储器（ROM）*，这加剧了碎片化问题。用户期望获得经过充分测试、强大且安全的软件，但开发人员却在一个不可预测的环境中建立在不太可靠的
    API 上。
- en: Android and iOS Security Controls
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android 和 iOS 安全控制
- en: Android and iOS platforms inc**l**ude a number of security controls that are
    integrated into critical components of their architectures. [Figure 14-3](#figure14-3)
    summarizes these controls.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Android 和 iOS 平台包括多个集成到其架构关键组件中的安全控制。[图 14-3](#figure14-3) 总结了这些控制措施。
- en: '![f14003](Images/f14003.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![f14003](Images/f14003.png)'
- en: 'Figure 14-3: Integrated security controls in mobile platform architectures'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-3：移动平台架构中的集成安全控制
- en: The following sections walk through these controls in detail.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下章节将详细介绍这些控制措施。
- en: Data Protection and Encrypted Filesystem
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据保护与加密文件系统
- en: 'To protect application and user data, the platforms must request consent for
    interactions between different platform components that affect user data from
    all the involved entities: the users (through prompts and notifications), the
    developers (through the use of certain API calls), and the platform (by providing
    certain functionalities and making sure the system behaves as expected).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护应用程序和用户数据，这些平台必须请求涉及用户数据的不同平台组件之间的交互的同意，涉及的各方包括：用户（通过提示和通知）、开发人员（通过使用特定的
    API 调用）以及平台（通过提供某些功能并确保系统按预期行为运行）。
- en: To protect data at rest, Android and iOS use *file-based encryption (FBE)* and
    *full disk encryption (FDE)*, and to protect data in transit, the platforms can
    encrypt all transmissions. But both of these controls are left up to developers
    to implement by using the appropriate parameters in the provided APIs. Versions
    of Android prior to 7.0 don’t support FBE, and those prior to 4.4 don’t even support
    FDE. On the iOS platform, you can achieve file encryption even when the device
    is changing states (for example, if the device is initiated or unlocked or if
    the user has been authenticated at least once).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护静态数据，Android和iOS使用*基于文件的加密（FBE）*和*全盘加密（FDE）*，而为了保护传输中的数据，这些平台可以加密所有传输。但这两种控制措施都由开发者通过使用提供的API中的适当参数来实现。在Android
    7.0之前的版本不支持FBE，而4.4之前的版本甚至不支持FDE。在iOS平台上，即使设备正在改变状态（例如，设备启动或解锁，或者用户至少已通过身份验证一次），也可以实现文件加密。
- en: Application Sandbox, Secure IPC, and Services
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用沙箱、安全IPC和服务
- en: Android and iOS also isolate platform components. Both platforms use Unix-style
    permissions, enforced by the kernel, to achieve a discretionary access control
    and form an application sandbox. On Android, each app runs as its own user with
    its own UID. A sandbox also exists for system processes and services, including
    the phone, Wi-Fi, and Bluetooth stack. Android also has a mandatory access control
    that dictates the allowed actions per process or set of processes using Security
    Enhanced Linux (SE-Linux). On the other hand, all iOS apps run as the same user
    (named “mobile”), but each app is isolated in a sandbox similar to Android’s and
    given access only to its own part of the filesystem. Additionally, the iOS kernel
    prohibits apps from making certain system calls. Both platforms embrace an app-specific,
    permissions-style approach to allow secure interprocess communication and access
    on shared data (Android Permissions, iOS entitlements). These permissions are
    declared in the app’s development phase and granted at the installation or execution
    time. Both platforms also implement similar isolation on the kernel layer by reducing
    access to drivers or sandboxing the drivers’ code.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Android和iOS还会隔离平台组件。两个平台都使用Unix风格的权限，通过内核强制执行，以实现自主访问控制并形成应用沙箱。在Android上，每个应用作为其自己的用户运行，并拥有自己的UID。系统进程和服务（包括电话、Wi-Fi和蓝牙堆栈）也存在沙箱。Android还具有强制访问控制，使用安全增强Linux（SE-Linux）来规定每个进程或一组进程允许的操作。另一方面，所有iOS应用都作为相同的用户（名为“mobile”）运行，但每个应用都被隔离在一个类似于Android的沙箱中，只能访问其自己的文件系统部分。此外，iOS内核禁止应用程序进行某些系统调用。两个平台都采用特定应用的权限风格方法，以允许安全的进程间通信和访问共享数据（Android权限，iOS权限）。这些权限在应用开发阶段声明，并在安装或执行时授予。两个平台还通过减少对驱动程序的访问或将驱动程序代码进行沙箱化，在内核层面实施类似的隔离。
- en: Application Signatures
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用签名
- en: Both platforms use app signatures to verify that the applications haven’t been
    tampered with. The approved developers must generate these signatures before submitting
    an app to the platform’s official app store, but there are differences in the
    way that the signature verification algorithm works and the time that the signature
    validation occurs. In addition, the Android platform allows users to install apps
    from any developer by enabling the “unknown sources” options setting in the application
    settings. Android device vendors also install their own custom application store
    that might not necessarily comply with this restriction. In contrast, the iOS
    platform only allows you to install apps created by developers who are part of
    an authorized organization, using enterprise certificates, or who are also the
    device owners.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 两个平台都使用应用签名来验证应用程序是否被篡改。经过批准的开发者必须在将应用提交到平台的官方应用商店之前生成这些签名，但签名验证算法的工作方式和验证时间存在差异。此外，Android平台允许用户通过在应用设置中启用“未知来源”选项，安装任何开发者的应用。Android设备厂商还会安装自己定制的应用商店，这些商店可能不一定遵守这一限制。相比之下，iOS平台只允许你安装由授权组织的开发者创建的应用，使用企业证书，或者由设备拥有者创建的应用。
- en: User Authentication
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户身份验证
- en: Both platforms authenticate the user, usually based on knowledge factors (for
    example, by requesting a PIN, a pattern, or a user-defined password), using biometrics
    (such as fingerprints, iris scans, or face recognition), or even using behavioral
    approaches (like unlocking the device in trusted locations or when associating
    with trusted devices). The authentication control typically involves software
    and hardware components, although some Android devices are equipped with no such
    hardware component. The developers can verify the existence of this hardware using
    specialized API calls that the Android platform framework provides. In both platforms,
    developers can ignore the platform-provided, hardware-backed user authentication
    or perform their own custom client-side authentication control in the software
    layer, degrading the security performance.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 两个平台都会对用户进行身份验证，通常基于知识因素（例如，通过请求PIN码、图案或用户定义的密码），使用生物识别技术（如指纹、虹膜扫描或面部识别），甚至使用行为学方法（比如在受信任的位置解锁设备或与受信任的设备配对）。身份验证控制通常涉及软件和硬件组件，尽管某些Android设备没有此类硬件组件。开发者可以通过Android平台框架提供的专用API调用来验证这些硬件的存在。在这两个平台上，开发者可以忽略平台提供的硬件支持的用户身份验证，或者在软件层面执行自定义的客户端身份验证控制，从而降低安全性表现。
- en: Isolated Hardware Components and Keys Management
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 隔离硬件组件和密钥管理
- en: Modern devices isolate platform components in the hardware layer to prevent
    a compromised kernel from having full control of the hardware. They protect certain
    security-related functionalities, such as key storage and operations, using isolated
    hardware implementations. For example, they may use a *trusted platform module*,
    an isolated hardware component specifically created to perform fixed crypto operations;a
    *trusted execution environment*, a reprogrammable component located in a secure
    area of the main processor; or separate *tamper-resistant hardware* hosted in
    discrete hardware alongside the main processor. To support financial transactions,
    certain devices also have a secure element that executes code in the form of Java
    applets and can securely host confidential data.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现代设备在硬件层面上隔离平台组件，以防止被破坏的内核完全控制硬件。它们通过使用隔离的硬件实现来保护某些与安全相关的功能，如密钥存储和操作。例如，它们可能会使用*受信平台模块*，这是一种专门用于执行固定加密操作的隔离硬件组件；*受信执行环境*，这是位于主处理器安全区域的可重编程组件；或单独的*防篡改硬件*，它与主处理器一起存在于离散的硬件中。为了支持金融交易，某些设备还具有一个安全元素，用于以Java小程序的形式执行代码，并且可以安全地托管机密数据。
- en: Some device vendors use customized implementations of these technologies. For
    example, the latest Apple devices use the *Secure Enclave*, a separate hardware
    component capable of hosting code and data and performing authentication operations.
    The latest Google devices use a tamper-resistant hardware chip named *Titan M*
    with similar capabilities. ARM-based main chipsets support a trusted execution
    environment named *TrustZone*, and Intel-based main chipsets support one named
    *SGX*. These isolated hardware components implement the platforms’ key storage
    functionalities. But it’s up to the developers to use the correct API calls to
    safely leverage the trusted keystores.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一些设备厂商使用这些技术的定制实现。例如，最新的苹果设备使用*安全加密区*，这是一个独立的硬件组件，能够托管代码和数据并执行身份验证操作。最新的Google设备使用名为*Titan
    M*的防篡改硬件芯片，具备类似的功能。基于ARM的主芯片组支持名为*TrustZone*的受信执行环境，而基于Intel的主芯片组则支持名为*SGX*的环境。这些隔离硬件组件实现了平台的密钥存储功能。但开发者需要使用正确的API调用，才能安全地利用受信密钥存储。
- en: Verified and Secure Boot
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 已验证和安全启动
- en: Additionally, both platforms use software components that are verified during
    the boot phase when the operating system loads. *Secure boot* verifies the device’s
    bootloader and the software of certain isolated hardware implementations, initiating
    a hardware Root of Trust. In Android-based platforms, *Android Verified Boot*
    is responsible for verifying the software components, and in iOS-based platforms,
    *SecureRom* has that responsibility.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这两个平台都使用在操作系统加载时经过验证的软件组件。*安全启动*验证设备的引导加载程序和某些隔离硬件实现的软件，启动硬件信任根。在基于Android的平台中，*Android验证启动*负责验证软件组件，而在基于iOS的平台中，*SecureRom*则承担这一职责。
- en: Analyzing iOS Applications
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析iOS应用
- en: 'In this section, we’ll investigate an open source mobile app for iOS: the OWASP
    iGoat project ([https://github.com/OWASP/igoat/](https://github.com/OWASP/igoat/)).
    Although not an IoT companion app, the iGoat project contains identical business
    logic and uses similar functionalities to many apps for IoT devices. We’ll focus
    only on uncovering vulnerabilities that might exist in IoT companion apps.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将研究一个适用于 iOS 的开源移动应用：OWASP iGoat 项目（[https://github.com/OWASP/igoat/](https://github.com/OWASP/igoat/)）。尽管它不是一个物联网伴侣应用，但
    iGoat 项目包含相同的业务逻辑，并使用许多物联网设备应用相似的功能。我们将专注于揭示可能存在于物联网伴侣应用中的漏洞。
- en: The iGoat mobile app ([Figure 14-4](#figure14-4)) contains a series of challenges
    based on common mobile app vulnerabilities. The user can navigate to each challenge
    and interact with the deliberately vulnerable component to extract hidden secret
    flags or tamper with the app’s functionality.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: iGoat 移动应用程序 ([图 14-4](#figure14-4)) 包含一系列基于常见移动应用漏洞的挑战。用户可以导航到每个挑战并与故意设计为脆弱的组件进行交互，以提取隐藏的秘密标志或篡改应用程序的功能。
- en: '![f14004](Images/f14004.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![f14004](Images/f14004.png)'
- en: 'Figure 14-4: Categories in the iGoat mobile app'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-4：iGoat 移动应用中的类别
- en: Preparing the Testing Environment
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备测试环境
- en: 'To test iGoat, you’ll need an Apple desktop or laptop, which you’ll use to
    set up an iOS simulator in the Xcode IDE. You can only install Xcode on macOS
    through the Mac App Store. You should also install the Xcode command line tools
    using the `xcode-select` command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试 iGoat，您需要一台 Apple 台式机或笔记本电脑，在 Xcode IDE 中设置 iOS 模拟器。您只能通过 Mac App Store
    在 macOS 上安装 Xcode。您还应该使用 `xcode-select` 命令安装 Xcode 命令行工具：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now create your first simulator using the following `xcrun` command, which
    allows you to run the Xcode development tools:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用以下 `xcrun` 命令创建您的第一个模拟器，该命令允许您运行 Xcode 开发工具：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first parameter, named `simctl`, allows you to interact with iOS simulators.
    The `create` parameter creates a new simulator with the name of the parameter
    that follows. The last two parameters specify the device type, which in our case
    is an iPhone X, and the iOS runtime, which is iOS 12.2\. You can install other
    iOS runtimes by opening Xcode, clicking the **Preferences** option, and then choosing
    one of the available iOS simulators in the **Components** tab ([Figure 14-5](#figure14-5)).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数 `simctl` 允许您与 iOS 模拟器进行交互。`create` 参数创建一个新模拟器，名称由紧随其后的参数指定。最后两个参数指定设备类型，在我们的例子中是
    iPhone X，以及 iOS 运行时版本，具体是 iOS 12.2。您可以通过打开 Xcode、点击 **Preferences** 选项，然后在 **Components**
    标签中选择一个可用的 iOS 模拟器来安装其他 iOS 运行时（[图 14-5](#figure14-5)）。
- en: '![f14005](Images/f14005.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![f14005](Images/f14005.png)'
- en: 'Figure 14-5: Installing iOS runtimes'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-5：安装 iOS 运行时
- en: 'Boot and open your first simulator using the following commands:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令启动并打开您的第一个模拟器：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, use the `git` command to download the source code from the repository,
    navigate to the iGoat application folder, and compile the application for the
    simulated device using the `xcodebuild` command. Then install the generated binary
    in the booted simulator:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用 `git` 命令从仓库下载源代码，导航到 iGoat 应用程序文件夹，并使用 `xcodebuild` 命令为模拟设备编译该应用程序。然后，将生成的二进制文件安装到已启动的模拟器中：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can find the application identifier either by checking the last lines of
    the `xcodebuild` command or by navigating to the *~/Library/Developer/Xcode/DerivedData/*
    folder.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过检查 `xcodebuild` 命令的最后几行，或者导航到 *~/Library/Developer/Xcode/DerivedData/*
    文件夹来找到应用程序标识符。
- en: Extracting and Re-Signing an IPA
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提取和重新签名 IPA
- en: If you already have an iOS device you use for testing with an installed app
    that you want to examine, you’ll have to extract the app differently. All iOS
    apps exist in an archive file called an *iOS App Store Package (IPA)*. In the
    past, earlier versions of iTunes (up to 12.7.*x*) permitted users to extract the
    IPAs for apps acquired through the App Store. Also, in previous iOS versions up
    to 8.3, you could extract an IPA from the local filesystem using software such
    as iFunBox or the iMazing tool. But these aren’t official methods and might not
    support the latest iOS platforms.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经拥有用于测试的 iOS 设备，并且安装了您想要检查的应用程序，那么您需要以不同的方式提取该应用程序。所有 iOS 应用都存在于一个称为 *iOS
    应用商店包（IPA）* 的归档文件中。过去，早期版本的 iTunes（直到 12.7.*x*）允许用户提取通过 App Store 获取的应用的 IPA。此外，在
    iOS 8.3 之前的版本中，您可以使用像 iFunBox 或 iMazing 工具等软件从本地文件系统提取 IPA。但是这些不是官方方法，可能不支持最新的
    iOS 平台。
- en: 'Instead, use a jailbroken device to extract the app’s folder from the filesystem
    or attempt to find the application already decrypted by another user in an online
    repository. For example, to extract the *iGoat.app* folder from a jailbroken device,
    navigate to the Applications folder and search for the subfolder that contains
    the app:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，可以使用越狱设备从文件系统中提取应用的文件夹，或者尝试在在线仓库中查找其他用户已经解密的应用。例如，要从越狱设备中提取 *iGoat.app* 文件夹，可以进入
    Applications 文件夹并搜索包含该应用的子文件夹：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you installed the application through the App Store, the main binary will
    be encrypted. To decrypt the IPA from the device memory, use a publicly available
    tool, such as Clutch ([http://github.com/KJCracks/Clutch/](http://github.com/KJCracks/Clutch/)):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你通过 App Store 安装了应用，主二进制文件将会被加密。要从设备内存中解密 IPA，可以使用一个公开可用的工具，比如 Clutch（[http://github.com/KJCracks/Clutch/](http://github.com/KJCracks/Clutch/)）：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You might also have an IPA that isn’t signed for your device, either because
    a software vendor provided it to you or because you’ve extracted this IPA in one
    of the previously mentioned ways. In this case, the easiest way to install it
    in your testing device is to re-sign it using a personal Apple developer account
    with a tool like Cydia Impactor ([http://www.cydiaimpactor.com](http://www.cydiaimpactor.com)*/*)
    or node-applesign ([https://github.com/nowsecure/node-applesign/](https://github.com/nowsecure/node-applesign/)).
    This method is common for installing apps, such as unc0ver, that perform jailbroken
    functions.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能也会有一个未为你的设备签名的 IPA，可能是软件供应商提供的，或者你已经通过之前提到的某种方式提取了这个 IPA。在这种情况下，安装到测试设备的最简单方法是使用像
    Cydia Impactor（[http://www.cydiaimpactor.com](http://www.cydiaimpactor.com)*/*）或
    node-applesign（[https://github.com/nowsecure/node-applesign/](https://github.com/nowsecure/node-applesign/)）这样的工具，使用个人的
    Apple 开发者账号重新签名。这个方法通常用于安装像 unc0ver 这样的应用，它执行越狱功能。
- en: Static Analysis
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 静态分析
- en: The first step of our analysis is to examine the created IPA archive file. This
    bundle is nothing more than a ZIP file, so start by unzipping it using the following
    command.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们分析的第一步是检查创建的 IPA 档案文件。这个包实际上只是一个 ZIP 文件，因此可以通过以下命令解压缩它。
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The most important files in the unzipped folder are the *information property
    list file* (named*Info.plist*1), which is a structured file that contains configuration
    information for the application, and the executable file 2, which has the same
    name as the application. You’ll also see other resource files that live outside
    of the main application’s executable file.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 解压后的文件夹中最重要的文件是 *信息属性列表文件*（名为 *Info.plist*1），这是一个结构化的文件，包含了应用的配置信息，还有一个与应用同名的可执行文件
    2。你还会看到其他一些资源文件，它们存放在主应用的可执行文件外部。
- en: Open the information property list file. A common suspicious finding here is
    the existence of registered URL schemes ([Figure 14-6](#figure14-6)).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 打开信息属性列表文件。一个常见的可疑发现是注册的 URL Scheme 存在（[图 14-6](#figure14-6)）。
- en: '![f14006](Images/f14006.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![f14006](Images/f14006.png)'
- en: 'Figure 14-6: A registered URL scheme in the information property list file'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-6：信息属性列表文件中的注册 URL Scheme
- en: A *URL scheme* mainly allows a user to open a specific app interface from other
    apps. Adversaries might attempt to exploit these by making the device execute
    unwanted actions in the vulnerable app when it loads this interface. We’ll have
    to test the URL schemes for this vulnerability later in the dynamic analysis phase.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*URL scheme* 主要允许用户从其他应用打开特定的应用界面。攻击者可能试图利用这些漏洞，通过让设备在加载该界面时在脆弱的应用中执行不需要的操作。我们稍后会在动态分析阶段测试这些
    URL Scheme 是否存在此类漏洞。'
- en: Inspecting the Property List Files for Sensitive Data
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查属性列表文件中的敏感数据
- en: Let’s look at the rest of the property list files (the files with the extension
    *.plist*), which store serialized objects and often hold user settings or other
    sensitive data. For example, in the iGoat app, the *Credentials.plist* file contains
    sensitive data related to the authentication control. You can read this file using
    the Plutil tool, which converts the *.plist*`file to XML:`
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来看其余的属性列表文件（以 *.plist* 扩展名结尾的文件），这些文件存储序列化的对象，通常包含用户设置或其他敏感数据。例如，在 iGoat
    应用中，*Credentials.plist* 文件包含与身份验证控制相关的敏感数据。你可以使用 Plutil 工具读取这个文件，它会将 *.plist*
    文件转换为 XML 格式：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
