- en: Part I
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一部分
- en: Embedded Programming
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式编程
- en: Let me describe a “simple” embedded system. It is a battery-powered processor
    housed in a pendant worn around someone’s neck. When the end user has an emergency,
    they press the button and the computer sends a radio signal to a receiver that
    makes an emergency call.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我描述一个“简单”的嵌入式系统。它是一个电池供电的处理器，放置在一个佩戴在某人脖子上的挂坠中。当最终用户遇到紧急情况时，他们按下按钮，计算机会向接收器发送一个无线电信号，从而发出紧急呼叫。
- en: Sounds simple . . . except you have to send a precise set of pulses to the radio
    so it will generate the proper signal. The system must periodically check the
    battery and send battery information to the base station as well, which serves
    two purposes. First, when the battery starts to get a little low, the alarm company
    is notified and sends the end user a new pendant. Second, if the base station
    doesn’t receive a periodic signal, the alarm company knows that something is wrong
    with the pendant.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来很简单……除了你必须向无线电发送一组精确的脉冲，以便它能生成正确的信号。系统还必须定期检查电池并将电池信息发送给基站，这有两个目的。首先，当电池电量开始降低时，报警公司会收到通知，并向最终用户发送新的挂坠。其次，如果基站没有接收到定期信号，报警公司会知道挂坠出了问题。
- en: This type of program is typical in the embedded world. It’s small, must be precise,
    and doesn’t use a lot of outside resources.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的程序在嵌入式世界中是典型的。它小巧、必须精确，并且不依赖太多外部资源。
- en: In this section of the book, you’ll learn about basic C syntax and programming.
    We also go through in detail what the C compiler does so you can precisely control
    what your program does. To have this precise control, you need to know what the
    compiler is doing behind your back.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的这一部分，你将学习基本的C语言语法和编程技巧。我们还会详细讲解C语言编译器的工作原理，以便你能精确控制程序的执行。要实现这种精确控制，你需要了解编译器在你不注意时做了什么。
- en: Embedded programming presents its own unique debugging challenges. Fortunately,
    tools like the JTAG debugging interface make things easier, but still, debugging
    an embedded system can be quite difficult.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式编程带来了独特的调试挑战。幸运的是，像JTAG调试接口这样的工具使得事情变得更容易，但即便如此，调试嵌入式系统仍然可能相当困难。
- en: One of the most basic and common debugging methods is to put `printf` statements
    in your code. This is somewhat difficult when doing embedded programming, as there’s
    no place to send printed output. We’ll cover how to use serial I/O to get printed
    data out of the embedded system for debugging and logging.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本且常见的调试方法之一是将`printf`语句放入代码中。这在嵌入式编程中有些困难，因为没有地方可以发送打印输出。我们将介绍如何使用串行输入/输出将打印数据从嵌入式系统中取出，用于调试和日志记录。
- en: And finally, in this part of the book, you’ll learn about interrupt programming.
    Interrupts allow you to perform I/O efficiently, but they also allow you to create
    race conditions and other random bugs if not done right. Design is extremely important
    here because interrupt problems can be quite debug-resistant.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在本书的这一部分，你将学习中断编程。中断使得你可以高效地进行输入/输出操作，但如果操作不当，它也可能导致竞态条件和其他随机的错误。在这里，设计至关重要，因为中断问题可能相当难以调试。
- en: Welcome to the world of embedded programming. Have fun.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到嵌入式编程的世界。祝你玩得开心。
