- en: '9'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '9'
- en: TESTING WITH PESTER
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Pester进行测试
- en: '![Images](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common.jpg)'
- en: 'There’s no way around it: you need to test your code. It’s easy to assume your
    code has no flaws; it’s even easier to be proven wrong. When you test with Pester,
    you can stop assuming and start knowing.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 无法回避：你需要测试你的代码。很容易认为你的代码没有缺陷；但更容易的事是，证明你错了。当你使用Pester进行测试时，你可以停止假设，开始了解。
- en: Testing has been a feature of traditional software development for decades.
    But while concepts like *unit*, *functional*, *integration*, and *acceptance*
    testing may be familiar to seasoned software developers, they’re relatively new
    to scripters—those of us who want to automate with PowerShell but don’t hold a
    software engineer job title. Since many organizations are depending more on PowerShell
    code to run critical production systems, we’ll take a page from the programming
    world and apply it to PowerShell.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 测试已经成为传统软件开发的一个特点，已经有几十年历史了。但是，尽管像*单元测试*、*功能测试*、*集成测试*和*验收测试*这样的概念对于经验丰富的软件开发人员来说很熟悉，但对于脚本编写者——那些想用PowerShell自动化但不拥有软件工程师职位的人来说，这些概念相对较新。由于许多组织越来越依赖PowerShell代码来运行关键的生产系统，我们将借鉴编程世界的经验，并将其应用到PowerShell中。
- en: In this chapter, you’ll learn how to create tests for your scripts and modules
    so you can be sure your code works, and stays working when you’ve changed it.
    You’ll do this with the testing framework known as Pester.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何为你的脚本和模块创建测试，这样你就可以确保代码正常工作，并在你更改代码时保持其稳定性。你将通过被称为Pester的测试框架来实现这一点。
- en: Introducing Pester
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引入Pester
- en: '*Pester* is an open source testing PowerShell module available in the PowerShell
    Gallery. Because it’s effective, and written in PowerShell, it’s become the de
    facto standard for testing in PowerShell. It allows you to write multiple types
    of tests, including unit, integration, and acceptance tests. If these test names
    don’t ring a bell, don’t worry. In this book, we’ll use Pester only to test environmental
    changes such as whether a virtual machine was created with the right name, whether
    IIS was installed, or whether the proper operating system was installed. We’ll
    refer to these tests as *infrastructure tests*.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*Pester*是一个开源的PowerShell测试模块，能够在PowerShell Gallery中获取。由于其高效且用PowerShell编写，它已经成为PowerShell测试的事实标准。它允许你编写多种类型的测试，包括单元测试、集成测试和验收测试。如果这些测试名称让你感到陌生，别担心。在本书中，我们将仅使用Pester测试一些环境变化，比如虚拟机是否使用正确的名称创建、IIS是否安装、操作系统是否正确安装。我们将这些测试称为*基础设施测试*。'
- en: We won’t cover how to test for things like whether a function was called, whether
    a variable was set correctly, or whether a script returned a specific object type—that’s
    all in the world of *unit testing*. If you’re curious about unit testing with
    Pester and want to learn how to use Pester in different situations, check out
    *The Pester Book* (LeanPub, 2019, *[https://leanpub.com/pesterbook/](https://leanpub.com/pesterbook/)*),
    which explains just about everything you need to know about testing with PowerShell.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会涵盖如何测试诸如函数是否被调用、变量是否被正确设置或脚本是否返回特定对象类型之类的内容——这些都属于*单元测试*的范畴。如果你对Pester中的单元测试感兴趣，并想学习如何在不同情况下使用Pester，可以查阅*Pester书籍*（LeanPub，2019年，*[https://leanpub.com/pesterbook/](https://leanpub.com/pesterbook/)*），该书几乎解释了你需要了解的所有关于PowerShell测试的内容。
- en: Pester Basics
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Pester基础知识
- en: To use Pester, you must first get it installed. If you have Windows 10, Pester
    is installed by default, but it’s also available in the PowerShell Gallery if
    you’re on another Windows operating system. If you’re on Windows 10, chances are
    Pester will be outdated anyway, so you might as well grab the latest copy from
    the PowerShell Gallery. Since Pester is available via the PowerShell Gallery,
    you can run `Install-Module -Name Pester` to download and install it. Once installed,
    it will have all the commands you need.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Pester，你必须先安装它。如果你使用的是Windows 10，Pester默认已经安装，但如果你使用的是其他Windows操作系统，它也可以通过PowerShell
    Gallery获取。如果你使用的是Windows 10，Pester很可能已经过时了，因此你最好从PowerShell Gallery获取最新版本。由于Pester通过PowerShell
    Gallery提供，你可以运行`Install-Module -Name Pester`来下载并安装它。安装后，它将包含你需要的所有命令。
- en: It’s worth repeating that you’ll be using Pester to write and run infrastructure
    tests, which are meant to validate any expected changes a script performs against
    its environment. For example, you might run an infrastructure test after creating
    a new file path by using `Test-Path` to ensure that the file path was created.
    Infrastructure tests are safeguards put in place to confirm that your code did
    what you expected it to do.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，你将使用 Pester 来编写和运行基础设施测试，目的是验证脚本对环境所做的任何预期更改。例如，在通过 `Test-Path` 创建一个新文件路径后，你可能会运行一个基础设施测试来确保文件路径已被创建。基础设施测试是一种保障措施，用来确认你的代码按预期执行了任务。
- en: A Pester File
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 一个 Pester 文件
- en: In its most basic form, a Pester test script consists of a PowerShell script
    ending in *.Tests.ps1*. You can name the main script anything you like; the naming
    convention and test structure are entirely up to you. Here, you’ll name the script
    *Sample.Tests.ps1*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在最基本的形式中，Pester 测试脚本由一个以 *.Tests.ps1* 结尾的 PowerShell 脚本组成。你可以随意命名主脚本；命名约定和测试结构完全由你决定。在这里，你将脚本命名为
    *Sample.Tests.ps1*。
- en: The basic structure of a Pester test script is one or more `describe` blocks
    that each contain (optional) `context` blocks that each contain `it` blocks that
    each contain assertions. If that was a lot to process, [Listing 9-1](ch09.xhtml#ch9list1)
    provides a visual guide.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Pester 测试脚本的基本结构是一个或多个 `describe` 块，每个 `describe` 块包含（可选的）`context` 块，每个 `context`
    块又包含 `it` 块，而每个 `it` 块包含断言。如果这听起来有点复杂， [列表 9-1](ch09.xhtml#ch9list1) 提供了一个视觉指南。
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 9-1: A basic Pester test structure*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 9-1：基础 Pester 测试结构*'
- en: Let’s go through each of these parts.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一了解这些部分。
- en: The describe Block
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`describe` 块'
- en: A `describe` block is a way to group like tests together. In [Listing 9-2](ch09.xhtml#ch9list2),
    you create a `describe` block called `IIS`, which you could use to include all
    the code to test things like Windows features, app pools, and websites.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe` 块是一种将相似测试分组在一起的方法。在 [列表 9-2](ch09.xhtml#ch9list2) 中，你创建了一个名为 `IIS`
    的 `describe` 块，它可以用于包括所有测试 Windows 功能、应用池和网站的代码。'
- en: The basic syntax for a `describe` block is the word `describe` followed by a
    name, in single quotes, followed by an opening and closing curly bracket.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe` 块的基本语法是单词 `describe` 后跟一个名称（用单引号括起来），然后是一个开括号和闭括号。'
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 9-2: A Pester `describe` block*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 9-2：Pester `describe` 块*'
- en: 'Although this structure looks like an `if/then` condition, don’t be fooled!
    This is a scriptblock that is passed to the `describe` function under the covers.
    Note that if you’re the type who prefers curly brackets on a new line, you’re
    out of luck: the opening curly bracket must come on the same line as the `describe`
    keyword.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个结构看起来像是一个 `if/then` 条件，但不要被误导！这是一个传递给 `describe` 函数的脚本块。请注意，如果你是那种喜欢将大括号放在新行上的人，你可能会失望：开大括号必须与
    `describe` 关键字在同一行。
- en: The context Block
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`context` 块'
- en: Once you create the `describe` block, you can add an optional `context` block.
    The `context` block groups together similar `it` blocks, which helps organize
    tests when infrastructure testing. In [Listing 9-3](ch09.xhtml#ch9list3), you’ll
    add a `context` block that will contain all the tests for Windows features. It’s
    a good idea to classify tests this way in `context` blocks to more easily manage
    them.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了 `describe` 块，你可以添加一个可选的 `context` 块。`context` 块将类似的 `it` 块组合在一起，这有助于在进行基础设施测试时组织测试。在
    [列表 9-3](ch09.xhtml#ch9list3) 中，你将添加一个 `context` 块，它将包含所有与 Windows 功能相关的测试。将测试按这种方式分类在
    `context` 块中是个好主意，可以更轻松地管理它们。
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 9-3: A Pester `context` block*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 9-3：Pester `context` 块*'
- en: Although optional, the `context` block will become invaluable later when you’ve
    created tests to test dozens or hundreds of components!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `context` 块是可选的，但当你创建了数十个或数百个组件的测试时，它将变得极为重要！
- en: The it Block
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`it` 块'
- en: Now let’s add an `it` block inside the `context` block. An `it` block is a smaller
    component that labels the actual test. Its syntax, shown in [Listing 9-4](ch09.xhtml#ch9list4),
    has a name followed by a block, just as you saw with the `describe` block.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在 `context` 块中添加一个 `it` 块。`it` 块是一个更小的组件，用于标记实际的测试。其语法如 [列表 9-4](ch09.xhtml#ch9list4)
    所示，包含一个名称后跟一个块，就像你在 `describe` 块中看到的那样。
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 9-4: A Pester `describe` block with a `context` and `it` block*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 9-4：带有 `context` 和 `it` 块的 Pester `describe` 块*'
- en: Notice that so far, you more or less just added different labels for the test,
    in varying scopes. In the next section, you’ll add the test itself.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，到目前为止，你更多的是为测试添加了不同的标签，并且这些标签的作用范围有所不同。在接下来的部分，你将添加实际的测试内容。
- en: Assertions
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 断言
- en: Inside the `it` block, you include one or more assertions. An *assertion* can
    be thought of as the actual test, or the code that compares the expected state
    to an actual state. The most common assertion in Pester is the `should` assertion.
    The `should` assertion has different operators that can be used with it, such
    as `be`, `bein`, `belessthan`, and so on. If you’d like a full list of available
    operators, the Pester wiki (*[https://github.com/pester/Pester/wiki/](https://github.com/pester/Pester/wiki/)*)
    has a full list.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `it` 块内，你包含了一个或多个断言。*断言* 可以看作是实际的测试，或者是比较预期状态和实际状态的代码。Pester 中最常见的断言是 `should`
    断言。`should` 断言有不同的运算符可以与之配合使用，如 `be`、`bein`、`belessthan` 等。如果你想查看完整的运算符列表，Pester
    的 Wiki (*[https://github.com/pester/Pester/wiki/](https://github.com/pester/Pester/wiki/)*)
    提供了完整的列表。
- en: 'In our IIS example, let’s check whether the app pool named `test` was created
    on our server. To do that, you first have to write the code to find the current
    state of the `Web-Server` Windows feature on the server (we’ll call it `WEBSRV1`).
    After a little investigation by browsing through the available PowerShell commands
    with `Get-Command` and sifting through the `Get-WindowsFeature` command’s help
    text, you find that the code to do so looks like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 IIS 示例中，我们来检查名为 `test` 的应用池是否已在我们的服务器上创建。为此，你首先需要编写代码来查找服务器上 `Web-Server`
    Windows 特性的当前状态（我们将其称为 `WEBSRV1`）。经过一些调查，浏览可用的 PowerShell 命令并筛选 `Get-WindowsFeature`
    命令的帮助文档后，你发现完成此操作的代码如下：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You know that if the `Web-Server` feature is installed, the `Installed` property
    will return `True`; otherwise, it will return `False`. Knowing this, you can then
    assert that when you run this `Get-WindowsFeature` command, you expect the `Installed`
    property to be `True`. You want to test whether this command’s output will *be*
    equal to `True`. You can represent this scenario inside an `it` block, as shown
    in [Listing 9-5](ch09.xhtml#ch9list5).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道，如果安装了 `Web-Server` 特性，`Installed` 属性将返回 `True`；否则，它将返回 `False`。知道这一点后，你可以断言，当你运行这个
    `Get-WindowsFeature` 命令时，你期望 `Installed` 属性为 `True`。你想测试这个命令的输出是否*等于* `True`。你可以在
    `it` 块中表示这种情况，如[示例 9-5](ch09.xhtml#ch9list5)所示。
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 9-5: Asserting a test condition with Pester*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 9-5：使用 Pester 断言测试条件*'
- en: Here, you created a rudimentary Pester test to test whether a Windows feature
    is installed. You first enter the test you want to run, and then pass the results
    of that test through the pipeline to your testing condition, which, in this case,
    is `should be $true`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你创建了一个基础的 Pester 测试，用来测试 Windows 特性是否已安装。你首先输入你想要运行的测试，然后通过管道将测试结果传递给你的测试条件，在本例中是
    `should be $true`。
- en: There’s much more to writing Pester tests, and I encourage you to learn the
    details via *The Pester Book* (*[https://leanpub.com/pesterbook/](https://leanpub.com/pesterbook/)*)
    or perhaps a series of articles on 4sysops (*[https://4sysops.com/archives/powershell-pester-testing-getting-started/](https://4sysops.com/archives/powershell-pester-testing-getting-started/)*).
    This should be enough for you to be able to read the tests I provide with this
    book. Once you finish this book, writing your own Pester tests will be a good
    way to test your PowerShell skills.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 编写 Pester 测试还有更多内容，我鼓励你通过 *《Pester 手册》* (*[https://leanpub.com/pesterbook/](https://leanpub.com/pesterbook/)*)
    或者通过 4sysops 上的一系列文章 (*[https://4sysops.com/archives/powershell-pester-testing-getting-started/](https://4sysops.com/archives/powershell-pester-testing-getting-started/)*）来学习更多细节。这些内容应该足够让你理解我在本书中提供的测试。一旦你完成这本书，编写自己的
    Pester 测试将是测试你 PowerShell 技能的一个好方法。
- en: You have a Pester script now. And of course, once you have a script, you need
    to run it!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了一个 Pester 脚本。当然，一旦你有了脚本，你需要运行它！
- en: Executing a Pester Test
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 执行 Pester 测试
- en: The most common way to execute tests with Pester is by using the `Invoke-Pester`
    command. This command is a part of the Pester module and allows the tester to
    pass it a path to the test script, which Pester will then interpret and execute,
    as in [Listing 9-6](ch09.xhtml#ch9list6).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Pester 执行测试的最常见方法是使用 `Invoke-Pester` 命令。这个命令是 Pester 模块的一部分，允许测试者传递测试脚本的路径，Pester
    然后会解释并执行该脚本，如[示例 9-6](ch09.xhtml#ch9list6)所示。
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 9-6: Running a Pester test*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 9-6：运行 Pester 测试*'
- en: You can see that the `Invoke-Pester` command has executed the *Sample.Tests.ps1*
    script and has provided basic information such as displaying the name of the `describe`
    block, the result of the test, as well as a summary of all the tests that ran
    during that test run. Note that the `Invoke-Pester` command will always show a
    summary of the status of each test performed. In this case, the `installs the
    Web-Server Windows feature` test was successful, indicated by the `+` symbol and
    a green output.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，`Invoke-Pester`命令已执行了*Sample.Tests.ps1*脚本，并提供了基本信息，如显示`describe`块的名称、测试结果，以及在该测试运行期间执行的所有测试的摘要。请注意，`Invoke-Pester`命令将始终显示每个执行的测试状态摘要。在本例中，`installs
    the Web-Server Windows feature`测试成功，通过`+`符号和绿色输出进行指示。
- en: Summary
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter covered the basics of the Pester testing framework. You downloaded,
    installed, and built a simple Pester test. This should help you understand how
    a Pester test is structured and how to execute it. In the coming chapters, you’ll
    use this framework over and over again. You’ll be adding lots of `describe` blocks,
    `it` blocks, and various assertions, but the basic structure will remain relatively
    unchanged.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了Pester测试框架的基础知识。你已经下载、安装并构建了一个简单的Pester测试。这应该帮助你理解Pester测试的结构以及如何执行它。在接下来的章节中，你将反复使用这个框架。你将添加大量的`describe`块、`it`块和各种断言，但基本结构将保持相对不变。
- en: This wraps up our final chapter of [Part I](part1.xhtml#part1). You’ve seen
    the fundamental syntax and concepts you’ll use when scripting with PowerShell.
    Now let’s get to the good stuff in [Part II](part2.xhtml#part2), where you’ll
    get hands-on experience and start looking at real-world problems!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着我们[第一部分](part1.xhtml#part1)的最后一章结束。你已经了解了在使用PowerShell编写脚本时需要用到的基本语法和概念。现在，让我们进入[第二部分](part2.xhtml#part2)，开始动手实践，解决实际问题！
