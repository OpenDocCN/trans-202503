- en: Chapter 4. Staying in the Loop
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 留在环线上
- en: Ruby on Monorails
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 红宝石单轨列车
- en: “Well,” said the King, “all this adventuring’s gotten me as hungry as a lumberjack.
    And I haven’t eaten anything since my breakfast of parched oats!”
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: “好了，”国王说道，“这一场冒险让我饿得像个伐木工。自从早餐吃了些干烤燕麦后，我就什么都没吃了！”
- en: “It’s about lunchtime,” said Ruben. “What’s there to eat?”
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: “快到午饭时间了，”鲁本说道，“有什么吃的吗？”
- en: “Nothing here,” said the King gloomily. “I’m afraid I pretty much wrecked the
    Royal Kitchen and Royal Pantry when I turned the palace upside-down looking for
    my string, and I don’t think the cooks have quite gotten everything back in order
    yet.”
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: “这里什么都没有，”国王沮丧地说道，“我怕是把皇家厨房和皇家储藏室弄得一团糟了，毕竟我把整个宫殿翻了一遍找我的线，厨师们大概还没有把一切恢复到原来的样子。”
- en: “We can go out!” said Scarlet. “I’m sure there are good places to eat in the
    kingdom outside the palace walls.”
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: “我们可以出去了！”斯卡雷特说道，“我肯定宫殿外的王国有很多好地方可以吃饭。”
- en: The King nodded vigorously. “Of course!” he said. “We’ll take the Loop to the
    Hashery. It’s my favorite restaurant!”
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 国王用力点了点头，“当然！”他说，“我们坐环线去哈舍里吧。那是我最喜欢的餐厅！”
- en: “What’s the Loop?” asked Scarlet.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: “什么是环线？”斯卡雷特问道。
- en: “I’m glad you asked,” said the King, who was busy pulling on his finest traveling
    cloak and overbritches. “The Loop is the monorail—a sort of train—that runs throughout
    the kingdom, taking my subjects anywhere they’d like to go. It’s only a few stops
    to the Hashery from here!”
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: “很高兴你问了，”国王一边忙着穿上自己最好的旅行披风和裤子一边说道，“环线就是那种单轨列车，遍布王国各地，能带着我的臣民去任何他们想去的地方。从这里到哈舍里只有几个站！”
- en: “Couldn’t we take a royal carriage or something?” asked Ruben.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: “我们不能坐个皇家马车之类的吗？”鲁本问道。
- en: “Where’s the fun in that?” replied the King. “Now hurry up—the next Loop train
    should be arriving outside the palace in just a few minutes.”
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: “这样有什么好玩的吗？”国王回答道，“赶快吧——下一趟环线列车应该马上就会抵达宫殿外面。”
- en: The King, Scarlet, and Ruben left the King’s study and traveled through corridor
    after corridor of the palace, stepping over and around cooks, maids, butlers,
    handymen, and a host of other palace employees who were busy righting all the
    things the King had flipped upside-down in his mad search for his string. Finally,
    they arrived at the great wooden gate of the palace, and a pair of very strong-looking
    attendants saluted smartly and pulled the doors open for the trio.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 国王、斯卡雷特和鲁本离开了国王的书房，穿过一个又一个走廊，绕过忙碌的厨师、女佣、管家、杂工和其他一大批宫殿工作人员，他们正在忙着把国王在疯狂寻找自己的线时翻转的所有东西恢复原状。最终，他们来到了宫殿的大木门前，两个看起来非常强壮的侍卫礼貌地行礼并为三人拉开了门。
- en: “Where’s the Loop stop?” Ruben asked, blinking in the sudden sunshine.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: “环线的站在哪里？”鲁本问，突然被阳光晃得睁不开眼。
- en: “Just over there,” said the King, and pointed to a large metal platform at the
    top of a small hill near the palace entrance. “See that rail? The Loop train runs
    on that. It’ll come up to the platform in a few minutes, then head out toward
    the east side of the kingdom.”
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: “就在那儿，”国王指着宫殿入口附近一个小山丘顶上的大金属平台说道，“看到那条铁轨了吗？环线列车就是在上面运行的。几分钟后，它就会到达平台，然后驶向王国的东边。”
- en: “It’s so high up!” said Scarlet. “Is it safe?”
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: “真高啊！”斯卡雷特说道，“这样安全吧？”
- en: “Absolutely!” said the King. “You’ll see.”
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: “绝对安全！”国王说道，“你们很快就知道了。”
- en: After a few minutes of walking, the King, Scarlet, and Ruben arrived at the
    platform. Just as Ruben was about to ask how long the train would take to get
    there, a bright red metal train car whizzed up to the platform, and the door opened
    with a gentle *whoosh*. “Aha! Here we are,” said the King. “All aboard!”
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 走了几分钟后，国王、斯卡雷特和鲁本到达了平台。就在鲁本准备问列车到达需要多长时间时，一辆明亮的红色金属列车飞速驶到平台，车门发出轻柔的*嗖*的一声开了。“哈哈！我们到了，”国王说道，“全员登车！”
- en: The doors closed quickly behind them, and with barely a sound, the Loop train
    sped away from the palace station. Ruben looked around. “There’s no one here!”
    he said. “A car to ourselves!” He spread out on a plastic bench along one side
    of the train car.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 门在他们身后迅速关上，几乎没有任何声音，环线列车便迅速驶离了宫殿站。鲁本四下张望，“这里一个人都没有！”他说，“我们有一辆车！自己一个人！”他在车厢的一侧塑料长椅上伸展开来。
- en: “No one *at all*,” said Scarlet. “Not even a conductor. How’s that possible?”
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: “一个人*都没有*，”斯卡雷特说道，“连个指挥员都没有。怎么可能？”
- en: “No need for a conductor!” said the King. “The Loop is fully automatic. It runs
    entirely on Ruby!”
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: “不需要指挥员！”国王说道，“环线是完全自动化的。它完全靠红宝石驱动！”
- en: “Rails running on Ruby?” said Ruben. “Awesome!”
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: “在红宝石上铺铁轨？”鲁本说道，“太棒了！”
- en: “I’m not so sure,” said Scarlet. “We saw how well the Flowmatic Something-or-Other
    worked without someone keeping an eye on it.”
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: “我可不这么认为，”斯嘉丽说道。“我们看到没有人盯着的情况下，Flowmatic Something-or-Other 是如何工作的。”
- en: “Oh, I don’t think there’s anything to worry about,” said the King. “The Loop
    has run for years without any sort of problem.”
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: “哦，我觉得没什么好担心的，”国王说道。“环线已经运行了好多年，从来没有出过问题。”
- en: Ruben pressed his nose to the glass. “We’ll be there in no time!” he said. “It
    looks like the Loop is heading nonstop to the Hashery.”
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 鲁本把鼻子贴在玻璃上。“我们很快就到了！”他说，“看起来环线正不停地朝哈舍里驶去。”
- en: “What do you mean?” said the King.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: “你是什么意思？”国王问道。
- en: “We’ve passed two other platforms without stopping—this is great! Well, maybe
    not so great for the people on those other platforms, but, you know, more Hashery
    for us.”
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: “我们已经错过了两个车站—这太棒了！嗯，也许对那些在其他车站的人不太好，但，你懂的，对我们来说，更多的哈舍里。”
- en: The King’s eyes went wide. “The Loop should stop at every station if there are
    people waiting!” he said. “Something must be wrong if we’re skipping any.”
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 国王的眼睛瞪大了。“如果有人在等车，环线应该在每个车站停靠！”他说，“如果我们跳过任何一个站，肯定是出了问题！”
- en: “Nothing to worry about, huh?” said Scarlet. “We’re stuck on an out-of-control
    train!”
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: “没什么好担心的，是吧？”斯嘉丽说道。“我们现在被困在一辆失控的火车上！”
- en: “Awesome!” said Ruben.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: “太棒了！”鲁本说道。
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159993.png.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2159993.png.jpg)'
- en: “Now, now,” said the King. “If this morning’s been any indication, I’m sure
    there’s a Computing Contraption around here somewhere that we can pry into to
    get an idea of what’s going on.” All three quickly scanned the train, looking
    for hidden compartments or mysterious devices. It wasn’t long before Ruben spotted
    a square of metallic mesh with a small red button beside it. When he pressed the
    button, the mesh grid slid up with a slight squeak, revealing the cheerful glow
    of an IRB `>>` prompt.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: “好了，好了，”国王说道。“如果今天早上的情况有任何指示的话，我相信这里肯定有某个计算装置，我们可以打开它看看发生了什么。”三人很快扫视着火车，寻找隐藏的隔间或神秘设备。不久后，鲁本发现了一个金属网格的方块，旁边有一个小红按钮。当他按下按钮时，金属网格轻微地吱吱作响，滑了起来，露出了
    IRB `>>` 提示符的欢快光芒。
- en: “Found it!” said Ruben, waving Scarlet and the King over.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: “找到了！”鲁本挥手让斯嘉丽和国王过来。
- en: “Great!” said Scarlet. “Let’s see if we can figure out a way to stop this thing.”
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: “太好了！”斯嘉丽说道。“让我们看看能不能找出一个方法来让这个东西停下来。”
- en: “Make it quick!” said the King. “We don’t want to miss our stop. The Hashery
    serves breakfast all day, but if you get there late, sometimes they run out of
    the best dishes. Like hash!”
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: “快点！”国王说道。“我们可不想错过我们的站。哈舍里全天供应早餐，但如果你晚到，有时候他们会卖完最好的菜肴。比如哈希！”
- en: Scarlet was busy inspecting the Ruby code on the Computing Contraption’s screen.
    “Oh no!” she said. “It looks like we’re caught in an *infinite loop*!”
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 斯嘉丽正忙着检查计算装置屏幕上的 Ruby 代码。“哦不！”她说道。“看起来我们陷入了*无限循环*！”
- en: “Sweet breakfast gravy!” cried the King. “What’s that?”
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: “真是美味的早餐肉汁！”国王叫道。“那是什么？”
- en: while Loops
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: while 循环
- en: “An infinite loop is a Ruby instruction that never ends,” said Ruben. “In Ruby,
    a *loop* is a bit of code that runs repeatedly, doing whatever its instructions
    tell it to until it’s supposed to stop. But if you give it a stopping condition
    that never happens, the code runs forever!”
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: “无限循环是一个永远不会结束的 Ruby 指令，”鲁本说道。“在 Ruby 中，*循环*是一段会反复执行的代码，它会按照指令执行，直到应该停止为止。但如果给它设置一个永远不会发生的停止条件，代码就会永远运行！”
- en: “Take a look,” said Scarlet. “It looks like the code that drives the train will
    never stop running!” When the King squinted at the screen, this is what he saw.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: “看看这个，”斯嘉丽说道。“看起来驱动火车的代码永远不会停止运行！”当国王眯起眼睛看屏幕时，他看到了这样的画面。
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*Just read these next few examples—don’t try them out in IRB. These little
    bits of code (shown in gray) would only work as part of a longer program.*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*只需阅读接下来的几个例子——不要在 IRB 中尝试它们。这些小段代码（以灰色显示）只能作为更长程序的一部分运行。*'
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: “I think I’ve heard of this,” said the King. “This loop is a *while loop*, a
    bit of code that repeats *while* some condition is true. But since this loop starts
    with `while true`, and `true` is always `true`, the loop will call the `drive_train_forward`
    method forever!”
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: “我想我听说过这个，”国王说道。“这个环线是一个*while循环*，是一段在某个条件为真时会重复执行的代码。但由于这个循环以`while true`开始，而`true`总是`true`，所以这个循环会永远调用`drive_train_forward`方法！”
- en: “Exactly,” said Scarlet. “We need a way to tell the loop to stop.”
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: “没错，”斯嘉丽说道。“我们需要一种方式告诉环线停下来。”
- en: “What about this?” Ruben said, pointing to a yellowed piece of paper tucked
    next to the Computing Contraption’s screen. The King bent forward to read it.
    “‘A Very Brief Guide to the Loop and Its Machinations,’” he quoted. “This looks
    promising!”
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: “那这个怎么样？”鲁本指着一张夹在计算机装置屏幕旁边的泛黄纸张说。国王低下头去读。“‘关于循环及其机制的简短指南’，”他引用道。“这看起来很有前景！”
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159995.png.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2159995.png.jpg)'
- en: “It says here that there’s not only a `drive_train_forward` method but also
    a `stop_train` method, which should stop the train for us,” Ruben said. “Try using
    that!”
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: “这里写着不仅有`drive_train_forward`方法，还有`stop_train`方法，它应该能让列车停下来，”鲁本说。“试试这个！”
- en: '“Sure thing!” said Scarlet. She quickly changed the code in the Computing Contraption
    to:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: “没问题！”斯嘉丽说。她迅速修改了计算机装置中的代码：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As soon as she pressed ENTER, the train made a deep, sad *boooooop* that faded
    away in just under a second, and as the sound trailed off, the train began to
    slow. Before they knew it, their train car was standing perfectly still on the
    monorail track.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当她按下回车键的瞬间，列车发出了一个深沉而悲伤的*boooooop*声，声音不到一秒钟就消失了，随着声音的渐隐，列车开始减速。没过多久，他们的列车车厢在单轨道上完全停了下来。
- en: “Nice work!” said Ruben.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: “干得好！”鲁本说。
- en: “Well, you did stop the train,” said the King. “But take a look out that window.”
    Ruben and Scarlet ran to where the King pointed and looked out the window at the
    front of the car. Their hearts sank. “We’re stuck between platforms!” said Scarlet.
    “I can’t even see the next one on the track ahead.”
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，你确实让列车停下来了，”国王说。“但是看看窗外。”鲁本和斯嘉丽跑到国王指的地方，朝车厢前方的窗户望去。看到这一幕，他们的心一下子沉了下来。“我们卡在两个站台之间！”斯嘉丽说。“我甚至看不到前方轨道上的下一个站台。”
- en: “Let’s take a look at the Very Brief Guide again,” Ruben said. “If whoever designed
    the Loop program built in a `drive_train_forward` and a `stop_train` method, maybe
    she also built in a way of figuring out whether the train is at a platform.”
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: “我们再看看那本简短指南，”鲁本说。“如果设计循环程序的人内建了`drive_train_forward`和`stop_train`方法，也许她还设计了一个方法来判断列车是否在站台上。”
- en: 'Scarlet and Ruben returned to the Computing Contraption and looked over the
    Very Brief Guide to the Loop and Its Machinations. Meanwhile, the King wondered
    aloud: “If the loop was an infinite loop, why did the train stop for us at all?
    Shouldn’t it have whizzed by like it did at the other stations?”'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 斯嘉丽和鲁本回到计算机装置旁，再次翻阅《关于循环及其机制的简短指南》。与此同时，国王若有所思地说道：“如果这个循环是一个无限循环，为什么列车竟然会为我们停下来？难道它不应该像其他站点那样呼啸而过吗？”
- en: “I don’t know,” said Ruben. “But remember how Haldo said there might have been
    another program in the kingdom that caused the Mysterious Pipe to overflow? Maybe
    there was some code running somewhere that told the Loop train to stop for us.”
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: “我不知道，”鲁本说。“但是记得哈尔多说过王国里可能有另一个程序导致神秘管道溢出吗？也许某个地方有代码在运行，它告诉列车为我们停下。”
- en: “Maybe,” said the King, “but what code, and why? And who wrote it? This is getting
    stranger and stranger by the minute.”
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: “也许吧，”国王说，“但是什么代码，为什么？还有，谁写的？这一切越来越奇怪了。”
- en: “I think I’ve found something we can use,” said Scarlet. “It says here that
    the Loop program also has an `at_stop?` method. If we call that the right way,
    we should be able to move forward when we’re between stops, then stop when we
    get to a platform!”
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: “我想我找到可以用的东西了，”斯嘉丽说。“这里写着循环程序里也有一个`at_stop?`方法。如果我们用对了方法调用它，应该能在我们处于两个站点之间时前进，然后在到达站台时停下来！”
- en: “Great!” said Ruben. “And I think I know just how to do it.” He stepped up to
    the Computing Contraption and began to type.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: “太好了！”鲁本说。“我想我知道怎么做了。”他说着走向计算机装置并开始敲字。
- en: “Don’t forget an `end` for your `while` loop,” Scarlet said. “Just like for
    `if`/`elsif`/`else`, loops need an `end`.”
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: “别忘了给你的`while`循环加上`end`，”斯嘉丽说。“就像`if`/`elsif`/`else`一样，循环也需要`end`。”
- en: “I know, I know,” said Ruben. “There, I think this’ll do it.”
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: “我知道，我知道，”鲁本说。“好了，我想这就能解决了。”
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: “Hold on just a moment,” said the King. “What’s that `break` bit do?”
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: “等一下，”国王说。“那个`break`是什么意思？”
- en: “That tells the `while` loop to immediately stop,” said Ruben. “Otherwise, we’ll
    just `stop_train` or `drive_train_forward` forever!”
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: “那会让`while`循环立即停止，”鲁本说。“否则，我们就会一直`stop_train`或`drive_train_forward`下去！”
- en: “It seems we need a way to fix that,” grumbled the King.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: “看来我们需要一种方法来修复这个问题，”国王抱怨道。
- en: “I think this new code will do the trick,” Ruben said. He pressed ENTER, and
    the train whirred to life. In less than a minute, the train pulled into the next
    platform and eased to a halt.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: “我想这段新代码会解决问题，”鲁本说道。他按下了ENTER，火车开始启动。在不到一分钟的时间里，火车驶入下一个平台并缓缓停下。
- en: “We did it!” said the King. “And we’re at East Bumpspark station! The Hashery
    is just two more stops from here, at the New Mixico platform.”
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: “我们成功了！”国王说道，“而且我们到了东部Bumpspark车站！The Hashery离这里只有两个站，下一站就是New Mixico平台。”
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159997.png.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2159997.png.jpg)'
- en: “Great! We’ll be there in no time,” said Ruben. But the train just sat there
    at the East Bumpspark station, doors open, without a soul on the platform. The
    King, Scarlet, and Ruben stood around awkwardly for a minute or two before the
    King cleared his throat to break the silence.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: “太棒了！我们很快就能到达了，”鲁本说道。但是火车只是在东部Bumpspark车站停着，车门开着，平台上一个人也没有。国王、斯嘉丽和鲁本尴尬地站了几分钟，直到国王清了清嗓子打破了沉默。
- en: “Well,” he said. “It looks like we figured out how to stop the train at a platform,
    but it’s not restarting for some reason. Shall we take a second look at the code?”
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，”他说，“看起来我们已经弄明白了如何在一个平台上停下火车，但它没有重新启动，似乎出了点问题。我们要不要再看一遍代码？”
- en: “Way ahead of you,” Scarlet said. “And I think I know what the trouble is—in
    our `while` loop, we give the Loop program an instruction to stop if it’s at a
    station and to proceed if it isn’t. Well, we’re at a station, and the Loop is
    doing *exactly* what we’re telling it to do—it’s stopped! We never wrote anything
    in our loop to tell the train to start again after stopping.”
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: “早就想到了，”斯嘉丽说道，“我想我知道问题出在哪里了——在我们的`while`循环中，我们给Loop程序的指令是：如果在车站就停下，如果不在车站就继续前进。嗯，我们现在在一个车站，Loop正*完全*按照我们告诉它做的事情——它停下了！我们在循环中从来没有写任何东西告诉火车停下来后如何重新启动。”
- en: '“You’re right!” said Ruben. “We need to rewrite the program. Maybe something
    like this?” And he typed:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: “你说得对！”鲁本说道，“我们需要重写程序，也许像这样？”他打字道：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '“That `!at_stop?` looks a bit ugly to me,” Scarlet said. “And Ruby is all about
    writing beautiful code. Maybe something like this?” She took her turn at the Computing
    Contraption:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: “那个`!at_stop?`对我来说有点丑，”斯嘉丽说道，“而Ruby的目标就是写出漂亮的代码。也许像这样？”她轮到使用计算装置：
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: “Just like `if` has an `unless`, `while` has an `until`,” Scarlet said. “This
    says that *until* we reach a stop, we should keep driving the train forward.”
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: “就像`if`有`unless`，`while`也有`until`，”斯嘉丽说道，“这意味着*直到*我们到达停靠点之前，我们应该继续推动火车前进。”
- en: '“That does look much nicer,” said the King, “but we still have a problem: we’re
    currently at a stop, so the program won’t move us forward! And even if it does,
    we’ll just move forward to the next station and stop, with nothing in the program
    telling the train to start again.”'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: “那确实看起来好看多了，”国王说道，“但是我们仍然有个问题：我们目前在一个停靠点，所以程序不会让我们继续前进！即使它能前进，我们也只会到下一个车站停下，而程序中没有任何指令告诉火车如何重新启动。”
- en: “You’re exactly right,” said Scarlet. “We need some way of telling Ruby to move
    from stop to stop until there are no more stops on the line. Ruben, do you see
    anything on the list that would tell the train to keep going from one station
    to the next?”
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: “你完全正确，”斯嘉丽说道，“我们需要某种方式让Ruby从一个停靠点到另一个停靠点，直到线路上没有更多停靠点。鲁本，你看到清单上有什么能告诉火车从一个车站到下一个车站继续前进的东西吗？”
- en: “Well,” said Ruben, “It says here that Ruby’s `next` method can be used in the
    Loop program to move from one station to another, but I’m not totally sure how
    we could do that. There’s an example in the Very Brief Guide to the Loop and Its
    Machinations, but it has all these weird-looking square brackets in it. Have you
    ever seen those before?”
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，”鲁本说道，“这里说Ruby的`next`方法可以在Loop程序中用来从一个车站移动到另一个车站，但我不完全确定我们该怎么做。‘Loop与其机制简明指南’中有一个例子，但里面有一些看起来奇怪的方括号。你以前见过这些吗？”
- en: Arrays
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组
- en: While Scarlet explains those funky-looking brackets to Ruben, I’ll take a minute
    to explain them to you. (Scarlet could have explained just as well, but I was
    getting a little antsy.)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在斯嘉丽向鲁本解释那些看起来奇怪的括号时，我会先花点时间给你们解释一下它们。（斯嘉丽也可以解释得很好，但我有点着急了。）
- en: 'What Ruben’s describing looks like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 鲁本描述的情况看起来是这样的：
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'A bunch of Ruby objects between square brackets (`[]`) and separated by commas
    (`,`) is called an *array*. Arrays are basically just lists! For example, you
    could make a Ruby grocery list with an array, like so:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一堆用方括号(`[]`)括起来并由逗号(`,`)分隔的Ruby对象叫做*数组*。数组基本上就是列表！比如，你可以用数组来创建一个Ruby购物清单，如下所示：
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can put anything in a Ruby array: strings, numbers, Booleans, or even other
    lists! This is a handy way to set a single variable equal to a whole bunch of
    values. We’ll talk more about arrays in the next chapter, but the important thing
    to know for now is that arrays can be used with really handy methods (called *iterators*,
    but don’t worry about memorizing that word right away) that let you *iterate through*—that
    is, go over—each element in the array. Examples are the best way to learn, so
    try this code in IRB now to see the results:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将任何东西放入Ruby数组中：字符串、数字、布尔值，甚至是其他列表！这是一种方便的方式，将一个变量设置为多个值的集合。我们将在下一章进一步讨论数组，但现在需要知道的重点是，数组可以与非常方便的方法一起使用（这些方法叫做*迭代器*，不过不用担心现在就记住这个词），让你可以*遍历*——也就是说，逐个处理——数组中的每个元素。例子是学习的最好方式，现在就试试在IRB中运行这段代码，看看结果：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will print out:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这将会输出：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You see the whole array at the end because even though `for` will print only
    what you asked, it gives you back the whole array in case you did something to
    change it. (We didn’t.)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你在最后看到整个数组，因为即使`for`只会打印你要求的内容，它仍然会返回整个数组，以防你做了什么改变它的操作。（我们并没有做什么。）
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159999.png.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2159999.png.jpg)'
- en: 'The `next` method is built into Ruby and does exactly what it sounds like:
    it moves on to the next item in the array immediately, without calling any other
    code. In this example, since the string `"bread"` has a length of 5 and `"a festive
    hat for all occasions"` has a length of 31 (both odd numbers), `next` gets called,
    and these items in the list don’t get printed out (remember, `next` goes immediately
    to the next item in the list, skipping any other code before its `end`). Since
    `"cheese"` and `"grapes"` each have lengths of 6—an even number—and since `next`
    is only called if the number of letters is odd, the `puts` statement gets called,
    and the item names are printed out.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`next`方法是Ruby内置的，正如它的名字所示：它立即跳到数组中的下一个项，而不调用其他代码。在这个例子中，由于字符串`"bread"`的长度是5，`"a
    festive hat for all occasions"`的长度是31（这两个都是奇数），因此会调用`next`，这些列表项就不会被打印出来（记住，`next`会直接跳到列表中的下一个项，跳过`end`之前的其他代码）。由于`"cheese"`和`"grapes"`的长度都是6——偶数——并且`next`只有在字母数是奇数时才会被调用，因此会调用`puts`语句，打印出项名称。'
- en: As for that brand-new `for`/`in` bit you just saw, I’ll leave it to Scarlet
    and Ruben to explain that. It sounds like Ruben’s got the hang of arrays and iterators,
    so let’s check out the example he’s working on in the Loop program.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 至于你刚才看到的全新`for`/`in`部分，我就交给Scarlet和Ruben来解释了。看起来Ruben已经掌握了数组和迭代器的使用，所以让我们看看他在“Loop”程序中正在做的例子。
- en: Putting Arrays and Loops into Action
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数组和循环付诸实践
- en: “I think I understand,” Ruben said. “So arrays are just lists of things—strings,
    numbers, anything we like—and we can set them to a single variable name if we
    want. Not only that, but we can use loops and iterators to go over the entire
    array so we can do something for each item, or *element*, in the array if we want.”
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: “我想我明白了，”Ruben说，“所以数组只是事物的列表——字符串、数字、任何我们喜欢的东西——我们可以将它们设置为一个单独的变量名。如果我们想的话。不仅如此，我们还可以使用循环和迭代器遍历整个数组，这样我们就能对数组中的每一项，或者说*元素*，做某些操作。”
- en: '“Exactly,” said Scarlet. “Can I have a look at what you’re typing in IRB?”
    Ruben nodded and turned the Computing Contraption’s display toward Scarlet. This
    is what she saw:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: “没错，”Scarlet说，“我能看看你在IRB中输入的内容吗？”Ruben点点头，把计算装置的显示屏转向Scarlet。这是她看到的内容：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: “Good!” said Scarlet. “But what’s going on with that `for`/`in` part? Is that
    a kind of loop, like `while`?”
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: “很好！”Scarlet说，“但是那个`for`/`in`部分是怎么回事？那是像`while`那样的循环吗？”
- en: “Sort of,” said Ruben. “Basically it’s telling Ruby, ‘Hey! *For* each thing
    *in* this array, carry out the instructions before the `end`. So, in this case,
    for each stop in the `stops` list, go to the next one if the stop has no people
    waiting there.”
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: “算是吧，”Ruben说，“基本上，它告诉Ruby，‘嘿！*对于*这个数组中的每个元素，执行`end`之前的指令。所以，在这个例子中，对于`stops`列表中的每一个停靠点，如果那里没有人等候，就跳到下一个停靠点。’”
- en: “Okay,” said Scarlet. “One more question—I saw you define the `stops` variable
    and set it to an array, but I didn’t see you assign the `stop` variable anywhere.
    Why’s that?”
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: “好的，”Scarlet说，“还有一个问题——我看到你定义了`stops`变量并将其设置为数组，但我没有看到你在哪里赋值给`stop`变量。为什么？”
- en: “That’s just a cool shortcut Ruby lets you take. See, as you go through the
    array, Ruby moves from each item to the next, and it makes it a lot easier if
    you can give each item a temporary name while you’re working on it. Since this
    ‘temporary’ variable only matters inside the `for` loop, you don’t have to declare
    it—you just say something like `for stop in stops`, and Ruby knows that `stop`
    will take on the value of each item in the `stops` array in turn. In fact, you
    can give that variable any name you want, like `item` or `thingy` or `elf_with_a_pet_ham`,
    but `stop` makes the most sense, I think.”
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: “这只是 Ruby 给你提供的一个很酷的快捷方式。你看，当你遍历数组时，Ruby 会从一个项移动到下一个项，如果你能在处理时为每个项临时起个名字，那会方便很多。由于这个‘临时’变量只在
    `for` 循环内有效，所以你不需要声明它——你只需要写类似 `for stop in stops` 的代码，Ruby 就知道 `stop` 会依次取 `stops`
    数组中每个项的值。事实上，你可以给这个变量任何名字，比如 `item` 或 `thingy` 或 `elf_with_a_pet_ham`，但是我觉得 `stop`
    是最有意义的。”
- en: '“I think so, too,” said Scarlet. “But something about that `for` loop looks
    weird to me. I’ve read a lot of Ruby code by now, and I don’t see many `for` loops
    floating around. I do see a lot of these, though!” And she started typing into
    the Computing Contraption:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: “我也这么觉得，”Scarlet 说。“不过我总觉得那个 `for` 循环有点奇怪。我已经读了很多 Ruby 代码了，可是我不常看到 `for` 循环。可是我倒是看到很多这样的！”然后她开始在计算机上打字：
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: “Whoa!” said Ruben. “What’s that? Does it do the same thing as my `for` loop?”
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: “哇！”Ruben 说。“那是什么？它跟我的 `for` 循环做的是不是一样的事？”
- en: “Yup!” said Scarlet. “And it’s only a tiny bit different, but much nicer looking.
    Instead of the `for`/`in` part, we can just call the `each` method directly on
    the `stops` variable. Then we have exactly the same code as before, only it’s
    between `do` and `end` instead of `for`/`in` and `end`. The `do`/`end` bit actually
    comes up a lot in Ruby, and it’s called a *block*.”
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: “没错！”Scarlet 说。“虽然它只有一点点不同，但看起来更漂亮。我们可以直接在 `stops` 变量上调用 `each` 方法，而不是使用 `for`/`in`
    部分。这样我们就得到了和之前完全一样的代码，只不过它是放在 `do` 和 `end` 之间，而不是 `for`/`in` 和 `end` 之间。`do`/`end`
    这一部分在 Ruby 中其实很常见，它被称为 *块*。”
- en: “Okay,” said Ruben, “that makes sense. But what about the `stop` between the
    two vertical lines? Is that like the ‘temporary’ `stop` variable from my `for`
    loop?”
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: “明白了，”Ruben 说，“这很有道理。那 `stop` 在两个竖线之间是什么意思？它是不是像我 `for` 循环中的那个‘临时’ `stop` 变量？”
- en: '“Exactly,” Scarlet said. “You can think of those vertical lines as being like
    the sides of a little window that we move along the array: as we put the box over
    each element in the array, `stop` is temporarily set to the value of that element.”'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: “没错，”Scarlet 说。“你可以把那些竖线看作是一个小窗口的边界，我们将其沿着数组移动：当我们把窗口覆盖到数组中的每个元素时，`stop` 就临时被设置为该元素的值。”
- en: '“In fact,” she continued, “You can even write it a bit shorter. Ruby lets you
    use curly brackets instead of `do`/`end`, and since we have only one line of code
    in our block, it looks even more elegant with the brackets.” She typed into IRB:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: “事实上，”她继续说道，“你甚至可以把它写得简短一些。Ruby 允许你使用大括号代替 `do`/`end`，而且因为我们在代码块中只有一行代码，用大括号看起来更简洁。”她在
    IRB 中输入：
- en: '[PRE11]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: “This is all very fascinating,” said the King, “but will the code *work*? Will
    we be able to get to New Mixico station before we all starve to death, or—heaven
    forbid!—the Hashery runs out of hash?”
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: “这一切都很迷人，”国王说，“但是代码 *能不能* 工作？我们能在饿死之前赶到 New Mixico 站，或者——天哪！——Hashery 会不会没了哈希？”
- en: “I think we’re all set!” said Ruben. “And I have a feeling we’ll talk a lot
    more about arrays and blocks after we’ve had a good meal. Ready, Scarlet?” Scarlet
    nodded, and on the count of three, they pushed ENTER together. The Loop train
    car vibrated to life, the doors *whooshed* shut, and the car moved on to the Endertromb
    Avenue station. The three held their breath as the car doors opened, the car idled
    . . . and the doors slid shut again! The King began to clap as the car moved on
    to New Mixico station, and he didn’t stop clapping until they left the train,
    walked down the stairs leading from the platform to the street, and made their
    way toward the cherry-red doors of the Hashery.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: “我想我们都准备好了！”Ruben 说。“我感觉我们在吃过一顿好饭后，还会继续讨论数组和块。准备好了吗，Scarlet？”Scarlet 点了点头，他们在三秒钟倒数后同时按下了
    ENTER。Loop 列车开始震动，车门 *嗖* 一声关上，列车继续开向 Endertromb Avenue 站。三人屏住呼吸，车门打开，列车停了一会儿……然后车门再次滑动关闭！国王开始鼓掌，直到他们离开列车，走下从月台到街道的楼梯，朝着
    Hashery 的樱桃红色门走去。
- en: Your Project, Should You Choose to Accept It
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您的项目，如果您选择接受
- en: After a careful review of the Loop by the Loop Authority Council for the King,
    the members of the Council have determined that the Loop *does*, in fact, need
    a conductor (if only to look after the program and ensure it doesn’t end up in
    any more infinite loops). Surprisingly, no one volunteered for the position, so
    I went ahead and volunteered you! That’s just the sort of guy I am.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 经过Loop权威委员会审查，委员会成员们确认Loop*确实*需要一位列车长（即便是仅仅为了照看程序并确保它不再进入无限循环）。令人惊讶的是，没有人自愿担任这个职位，所以我决定自告奋勇让你来担任！这就是我这个人。
- en: Conducting trains is big business, but I think it’s safe to start small. We’ll
    just work on a program to report whether the Loop stops at a requested station,
    and if it does, list all the stops before the requested stop so passengers will
    know how many stations to expect before theirs. Let’s begin by making a new file
    called loop_the_loop.rb. (As always, peek back at [Chapter 1](../Text/ch01.html
    "Chapter 1. What This Book’s About") if you don’t remember how to do this, or
    ask your local adult for help.) Then open your file and type the following code.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 操作列车是个大生意，但我认为从小做起是安全的。我们先来做一个程序，用来报告Loop是否会停在一个请求的车站，如果会，它会列出所有在请求站之前的站点，乘客就可以知道他们的车站前还要经过多少个站。我们从创建一个名为loop_the_loop.rb的新文件开始。（如果你不记得怎么做，可以回去看看[第1章](../Text/ch01.html
    "第1章. 本书介绍")，或者请你的当地成人帮忙。）然后打开文件，输入以下代码。
- en: loop_the_loop.rb
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: loop_the_loop.rb
- en: '[PRE12]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: There are a few new bits here, but nothing you can’t handle!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些新的内容，但没有什么是你不能应付的！
- en: 'First, we set a couple of variables: `we_wanna_ride` is `true`, and `stops`
    is set to an array of strings ➊. Next, we create a `while` loop with `we_wanna_ride`
    (which starts as `true`) as the condition ➋. Inside the loop, we use `print` to
    print some text on the screen and `gets.chomp` to get the user’s answer ➌.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们设置了几个变量：`we_wanna_ride`为`true`，`stops`设置为一个字符串数组 ➊。接着，我们创建了一个`while`循环，以`we_wanna_ride`（它开始时为`true`）作为条件
    ➋。在循环内，我们使用`print`在屏幕上打印一些文字，并用`gets.chomp`获取用户的回答 ➌。
- en: The `include?` method ➍ is new! It simply returns `true` if the array has an
    element that matches `destination` and `false` otherwise. (This is really handy
    for quickly checking whether an object you want is in a given array.)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`include?`方法 ➍是新的！它会返回`true`，如果数组中有一个元素与`destination`匹配，否则返回`false`。（这个方法对于快速检查你想要的对象是否在给定数组中非常有用。）'
- en: 'The next part at ➎ is a little trickier:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分在➎稍微有点复杂：
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You’ve already seen the `stops.each do |stop| ... end` part, and the `break
    if stop == destination` part does exactly what you’d guess: it *breaks* out of
    the loop as soon as the Loop reaches a stop that equals the destination the passenger
    wants. It prints out each element before it makes this check, though, so it will
    always print out at least one stop if that stop is in the array.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经见过`stops.each do |stop| ... end`这一部分，而`break if stop == destination`部分的作用正如你所猜的那样：它在Loop到达乘客想要的目的地站时，*跳出*循环。不过，在执行这个检查之前，它会先打印出每个元素，所以如果那个站点在数组中，它至少会打印出一个站点。
- en: 'You can test out your conductor program by typing **`ruby loop_the_loop.rb`**
    at the command line and pressing ENTER. You should see something like this (of
    course, you’ll probably pick different stops than I did):'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在命令行输入**`ruby loop_the_loop.rb`**并按下ENTER来测试你的列车程序。你应该会看到类似这样的输出（当然，你可能会选择与我不同的站点）：
- en: '[PRE14]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can keep rerunning it with different input to see how the output changes
    each time!
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过不同的输入反复运行程序，看看每次输出是如何变化的！
- en: 'If you want to make your program even more elaborate, here are some other things
    to think about:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让程序更加复杂一点，这里有一些其他的想法：
- en: Right now, the program will keep prompting the user for input as long as the
    user keeps asking for train stops that are in the `stops` array. How might you
    update the program to run only once, even if it recognizes a stop?
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，程序会一直提示用户输入，只要用户继续输入`stops`数组中的车站。你怎么更新程序，让它即使识别到车站，也只运行一次呢？
- en: 'How could you handle accepting lowercase letters for destinations? (Hint: This
    will be a lot like one of the extra steps you might have taken for your last project.)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你怎么处理接受小写字母作为目的地的问题呢？（提示：这将与上一个项目中你可能采取的某个额外步骤类似。）
- en: What if a passenger is going the other way on the train (for instance, from
    Mal Abochny to East Bumpspark)? How could you update your program to work in both
    directions? Even trickier, what if the train route is a big circle (meaning if
    a passenger goes from East Bumpspark to Mal Abochny, the next stop after Mal Abochny
    should be East Bumpspark again)? How could you update your program to print out
    the right list of train stops if a passenger wants to go all the way around the
    circle?
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个乘客正在乘坐相反方向的火车（例如，从 Mal Abochny 到 East Bumpspark）怎么办？你如何更新你的程序使其能在两个方向上都工作？更棘手的是，如果火车路线是一个大圆圈（意味着，如果一个乘客从
    East Bumpspark 去 Mal Abochny，那么在 Mal Abochny 后的下一站应该再次是 East Bumpspark）呢？你如何更新你的程序，打印出正确的火车停靠列表，如果乘客想要绕整个圆圈走一圈？
- en: You Know This!
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你知道这个！
- en: I threw a lot at you in this chapter, but if you’re conducting trains after
    reading it, I’m pretty sure you know your stuff. Let’s review what we looked at.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这一章中给了你很多信息，但如果你在读完它后还能驾驭火车，我敢肯定你已经掌握了要领。让我们回顾一下我们所学的内容。
- en: We covered *while loops*, which are loops that contain some code between `while`
    and `end` and will continue to run that code as long as the `while` condition
    is `true`. (Beware—if there’s no way for the condition to become `false`, the
    loop will go on forever and create an *infinite loop*!)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讲解了*while 循环*，它是包含一些代码的循环，位于`while`和`end`之间，只要`while`条件为`true`，代码就会继续执行。（小心——如果条件永远无法变为`false`，循环将永远执行下去，造成*无限循环*！）
- en: 'We saw that, just like `if` has an `unless`, `while` has an `until`. If you
    can write:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到，就像`if`有`unless`，`while`也有`until`。如果你能写出：
- en: '[PRE15]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'then you can also write:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你也可以写：
- en: '[PRE16]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We also saw that when using a loop or an *iterator* (which is just Ruby code
    that loops over items in a list), we could call the `next` method to skip certain
    elements based on an `if`/`elsif`/`else` or `unless` statement.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到，当使用循环或*迭代器*（它只是 Ruby 代码，用于遍历列表中的项目）时，我们可以调用`next`方法，根据`if`/`elsif`/`else`或`unless`语句跳过某些元素。
- en: 'We talked a little bit about arrays, which are basically just Ruby lists, and
    how we can put anything we want inside them. An array looks like this:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简要讨论了数组，它基本上就是 Ruby 列表，以及如何将任何我们想要的东西放入其中。一个数组看起来是这样的：
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We learned that we could use a *for loop* or the `each` method to *iterate*,
    or go over, an array, and while they work exactly the same, the `each` method
    is more common in Ruby.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何使用*for 循环*或`each`方法来*迭代*（或遍历）一个数组，虽然它们的工作方式完全相同，但`each`方法在 Ruby 中更为常见。
- en: 'A `for` loop looks like this:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`for`循环是这样的：
- en: '[PRE18]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'And iterating with `each` looks like this:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`each`迭代看起来是这样的：
- en: '[PRE19]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Finally, we learned a bit about *blocks*. Ruby blocks are just regular Ruby
    code sandwiched between either `do`/`end` or curly brackets (`{}`). Some methods,
    like `each`, take blocks, and we’ll learn way more about those after a hearty
    helping of Ruby know-how at the Hashery.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们学习了一些关于*块*的内容。Ruby 块就是常规的 Ruby 代码，夹在`do`/`end`或花括号（`{}`）之间。像`each`这样的某些方法会接收块，我们将在深入学习
    Ruby 的 Hashery 课程后，进一步了解这些内容。
