- en: '**18'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**18'
- en: APPLICATION LOGIC AND CONFIGURATION VULNERABILITIES**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 应用逻辑和配置漏洞**
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: Unlike the previous bugs covered in this book, which rely on the ability to
    submit malicious input, application logic and configuration vulnerabilities take
    advantage of mistakes made by developers. *Application logic* vulnerabilities
    occur when a developer makes a coding logic mistake that an attacker can exploit
    to perform some unintended action. *Configuration* vulnerabilities occur when
    a developer misconfigures a tool, framework, third-party service, or other program
    or code in a way that results in a vulnerability.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书中之前介绍的漏洞不同，后者依赖于提交恶意输入的能力，应用逻辑和配置漏洞则利用了开发者的错误。*应用逻辑* 漏洞发生在开发者在编码逻辑时犯错，攻击者可以利用这个漏洞执行一些未预期的操作。*配置*
    漏洞发生在开发者错误配置了工具、框架、第三方服务或其他程序或代码，从而导致了漏洞。
- en: Both vulnerabilities involve exploiting bugs from decisions a developer made
    when coding or configuring a website. The impact is often an attacker having unauthorized
    access to some resource or action. But because these vulnerabilities result from
    coding and configuration decisions, they can be difficult to describe. The best
    way to understand these vulnerabilities is to walk through an example.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个漏洞都涉及到利用开发者在编写代码或配置网站时所做的决策中的错误。这类漏洞的影响通常是攻击者能够未经授权访问某些资源或执行某些操作。但由于这些漏洞源自编码和配置决策，因此它们可能很难描述。理解这些漏洞的最好方式是通过一个例子来分析。
- en: In March 2012, Egor Homakov reported to the Ruby on Rails team that its default
    configuration for the Rails project was insecure. At the time, when a developer
    installed a new Rails site, the code Rails generated by default would accept all
    parameters submitted to a controller action to create or update database records.
    In other words, a default installation would allow anyone to send an HTTP request
    to update any user object’s user ID, username, password, and creation date parameters
    regardless of whether the developer meant for them to be updatable. This example
    is commonly referred to as a *mass assignment* vulnerability because all parameters
    can be used to assign to object records.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 2012 年 3 月，Egor Homakov 向 Ruby on Rails 团队报告了其默认配置存在不安全的问题。当时，当开发者安装一个新的 Rails
    网站时，Rails 默认生成的代码会接受所有提交给控制器动作的参数，用于创建或更新数据库记录。换句话说，默认安装将允许任何人发送 HTTP 请求来更新任何用户对象的用户
    ID、用户名、密码和创建日期参数，无论开发者是否希望这些参数是可更新的。这个例子通常被称为 *批量赋值* 漏洞，因为所有参数都可以用来赋值给对象记录。
- en: This behavior was well-known within the Rails community but few appreciated
    the risk it posed. Rails core developers believed that web developers should be
    responsible for closing this security gap and defining which parameters a site
    accepts to create and update records. You can read some of the discussion at *[https://github.com/rails/rails/issues/5228/](https://github.com/rails/rails/issues/5228/)*.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为在 Rails 社区内是众所周知的，但很少有人意识到它所带来的风险。Rails 核心开发者认为，应该由 web 开发者负责关闭这一安全漏洞，并定义站点接受哪些参数来创建和更新记录。你可以阅读一些相关讨论，链接请见
    *[https://github.com/rails/rails/issues/5228/](https://github.com/rails/rails/issues/5228/)*。
- en: The Rails core developers disagreed with Homakov’s assessment, so Homakov exploited
    the bug on GitHub (a large site developed with Rails). He guessed an accessible
    parameter that was used to update the creation date of GitHub issues. He included
    the creation date parameter in an HTTP request and submitted an issue with a creation
    date years in the future. This shouldn’t have been possible for a GitHub user.
    He also updated GitHub’s SSH access keys to gain access to the official GitHub
    code repository—a critical vulnerability.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 核心开发者不同意 Homakov 的评估，因此 Homakov 在 GitHub（一个使用 Rails 开发的大型网站）上利用了这个漏洞。他猜测到一个可访问的参数，该参数被用来更新
    GitHub 问题的创建日期。他将创建日期参数包含在 HTTP 请求中，并提交了一个创建日期设定在未来几年的问题。这本不该是 GitHub 用户能够做到的事情。他还更新了
    GitHub 的 SSH 访问密钥，以获取对官方 GitHub 代码库的访问权限——这是一个严重的漏洞。
- en: In response, the Rails community reconsidered its position and started requiring
    developers to whitelist parameters. Now, the default configuration won’t accept
    parameters unless a developer marks them as safe.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为回应，Rails 社区重新考虑了其立场，并开始要求开发者列出白名单参数。现在，默认配置不会接受任何参数，除非开发者将其标记为安全。
- en: The GitHub example combines application logic and configuration vulnerabilities.
    The GitHub developers were expected to add security precautions, but because they
    used the default configuration, they created a vulnerability.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub的例子结合了应用程序逻辑和配置漏洞。GitHub开发人员本应添加安全防护措施，但由于他们使用了默认配置，结果导致了一个漏洞。
- en: Application logic and configuration vulnerabilities might be tougher to find
    than the vulnerabilities previously covered in this book (not that any of the
    others are easy). That’s because they rely on creative thinking about coding and
    configuration decisions. The more you know about the internal workings of various
    frameworks, the more easily you’ll find these types of vulnerabilities. For example,
    Homakov knew the site was built with Rails and how Rails handled user input by
    default. In other examples, I’ll show how bug reporters invoked direct API calls,
    scanned thousands of IPs for misconfigured servers, and discovered functionality
    not intended to be publicly accessible. These vulnerabilities require background
    knowledge of web frameworks and investigative skills, so I’ll focus on reports
    that will help you develop this knowledge rather than reports with a high payout.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序逻辑和配置漏洞可能比本书前面涉及的漏洞更难发现（并不是说其他漏洞就容易）。这是因为它们依赖于对编码和配置决策的创造性思考。你对各种框架的内部工作原理了解得越多，你就越容易发现这类漏洞。例如，Homakov知道该网站是用Rails构建的，并且了解Rails默认如何处理用户输入。在其他例子中，我会展示报告人如何调用直接API请求，扫描成千上万的IP寻找配置错误的服务器，并发现本不应公开访问的功能。这些漏洞需要有一定的Web框架背景知识和调查技能，因此我会重点介绍那些能帮助你培养这些知识的报告，而不是那些奖金高的报告。
- en: '**Bypassing Shopify Administrator Privileges**'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**绕过Shopify管理员权限**'
- en: '**Difficulty:** Low'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 低'
- en: '**URL:** *<shop>.myshopify.com/admin/mobile_devices.json*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL:** *<shop>.myshopify.com/admin/mobile_devices.json*'
- en: '**Source:** *[https://hackerone.com/reports/100938/](https://hackerone.com/reports/100938/)*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://hackerone.com/reports/100938/](https://hackerone.com/reports/100938/)*'
- en: '**Date reported:** November 22, 2015'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2015年11月22日'
- en: '**Bounty paid:** $500'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖金支付：** $500'
- en: 'Like GitHub, Shopify is built using the Ruby on Rails framework. Rails is popular
    because, when you develop a site with it, the framework handles many common and
    repetitive tasks, such as parsing parameters, routing requests, serving files,
    and so on. But Rails doesn’t provide permissions handling by default. Instead,
    developers must code their own permissions handling or install a third-party gem
    with that functionality (*gems* are Ruby libraries). As a result, when hacking
    Rails applications, it’s always a good idea to test user permissions: you might
    find application logic vulnerabilities, as you would when searching for IDOR vulnerabilities.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 和GitHub一样，Shopify是使用Ruby on Rails框架构建的。Rails很受欢迎，因为当你用它开发一个网站时，框架会处理许多常见和重复的任务，比如解析参数、路由请求、服务文件等等。但Rails默认并不提供权限管理。开发人员必须编写自己的权限管理代码，或者安装一个具有该功能的第三方gem（*gems*是Ruby的库）。因此，在进行Rails应用程序的黑客攻击时，测试用户权限总是一个好主意：你可能会发现应用程序逻辑漏洞，就像寻找IDOR漏洞时一样。
- en: In this case, rms, the reporter, noticed that Shopify defined a user permission
    called Settings. This permission allowed administrators to add phone numbers to
    the application through an HTML form when placing orders on the site. Users without
    this permission weren’t given a field to submit a phone number on the user interface
    (UI).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个案例中，报告人rms注意到Shopify定义了一个名为Settings的用户权限。该权限允许管理员通过HTML表单在网站上提交订单时将电话号码添加到应用程序中。没有这个权限的用户，在用户界面（UI）中不会显示提交电话号码的字段。
- en: By using Burp as a proxy to record the HTTP requests made to Shopify, rms found
    the endpoint that HTTP requests for the HTML form were being sent to. Next, rms
    logged into an account that was assigned the Settings permission, added a phone
    number, and then removed that number. Burp’s history tab recorded the HTTP request
    to add the phone number, which was sent to the */admin/mobile_numbers.json* endpoint.
    Then rms removed the Settings permission from the user account. At this point,
    the user account shouldn’t have been permitted to add a phone number.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用Burp作为代理记录发送到Shopify的HTTP请求，rms找到了HTML表单请求发送的端点。接下来，rms登录了一个被分配了Settings权限的账户，添加了一个电话号码，然后删除了该号码。Burp的历史选项卡记录了添加电话号码的HTTP请求，该请求发送到了*/admin/mobile_numbers.json*端点。然后rms从该用户账户中移除了Settings权限。此时，用户账户应该不能再添加电话号码了。
- en: Using the Burp Repeater tool, rms bypassed the HTML form and sent the same HTTP
    request to */admin/mobile_number.json* while still logged into the account without
    the Settings permission. The response indicated a success, and placing a test
    order on Shopify confirmed that the notification was sent to the phone number.
    The Settings permission had removed only the frontend UI element where users could
    enter phone numbers. But the Settings permission wasn’t blocking a user without
    permissions from submitting a phone number on the site’s backend.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Burp Repeater 工具，rms 绕过了 HTML 表单，并在仍然登录账户且没有设置权限的情况下，向 */admin/mobile_number.json*
    发送了相同的 HTTP 请求。响应显示成功，且在 Shopify 上下单测试时确认通知已发送到手机号码。设置权限仅移除了前端 UI 元素，用户无法在界面上输入电话号码。但该权限并未阻止没有权限的用户通过站点后端提交电话号码。
- en: '***Takeaways***'
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***总结要点***'
- en: When you’re working on Rails applications, be sure to test all user permissions
    because Rails doesn’t handle that functionality by default. Developers must implement
    user permissions, so it’s easy for them to forget to add a permission check. Additionally,
    it’s always a good idea to proxy your traffic. That way, you can easily identify
    endpoints and replay HTTP requests that might not be available through the website’s
    UI.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理 Rails 应用时，一定要测试所有用户权限，因为 Rails 默认并不处理这些功能。开发人员必须自行实现用户权限，所以他们可能会忘记添加权限检查。此外，代理流量总是一个好主意。这样，你可以轻松识别端点并重放可能无法通过网站
    UI 获得的 HTTP 请求。
- en: '**Bypassing Twitter Account Protections**'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**绕过 Twitter 账户保护**'
- en: '**Difficulty:** Easy'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 简单'
- en: '**URL:** *[https://twitter.com](https://twitter.com)*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**网址：** *[https://twitter.com](https://twitter.com)*'
- en: '**Source:** N/A'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** 无'
- en: '**Date reported:** October 2016'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2016年10月'
- en: '**Bounty paid:** $560'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**悬赏金额：** $560'
- en: When you’re testing, make sure you consider the differences between an application’s
    website and its mobile versions. There could be application logic differences
    between the two experiences. When developers don’t properly consider these differences,
    they could create vulnerabilities, which is what occurred in this report.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试时，一定要考虑应用程序的网页版本与移动版本之间的差异。两者之间可能存在应用逻辑上的不同。当开发人员没有充分考虑这些差异时，就可能会产生漏洞，这就是本报告中所发生的情况。
- en: In the fall of 2016, Aaron Ullger noticed that when he logged into Twitter from
    an unrecognized IP address and browser for the first time, the Twitter website
    required additional information before authentication. The information Twitter
    requested was typically an email or phone number associated with the account.
    This security feature was meant to ensure that if your account login were compromised,
    an attacker couldn’t access the account if they didn’t have that additional information.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 2016年秋季，Aaron Ullger 发现，当他第一次从一个未被识别的 IP 地址和浏览器登录 Twitter 时，Twitter 网站要求提供额外的信息才能进行认证。Twitter
    要求的信息通常是与账户关联的电子邮件或电话号码。这个安全功能旨在确保，如果你的账户登录信息被泄露，攻击者在没有额外信息的情况下无法访问账户。
- en: But during his tests, Ullger used his phone to connect to a VPN, which assigned
    the device a new IP address. He would have been prompted for additional information
    when signing in from an unrecognized IP address on a browser, but he was never
    prompted to do so on his phone. This meant that if attackers compromised his account,
    they could avoid the additional security checks by using the mobile application
    to log in. In addition, attackers could view the user’s email address and phone
    number within the app, which would allow them to log in through the website.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 但在他的测试中，Ullger 使用手机连接到 VPN，给设备分配了一个新的 IP 地址。当从未被识别的 IP 地址和浏览器登录时，他本应被要求提供额外信息，但他在手机上从未被要求提供这些信息。这意味着，如果攻击者劫持了他的账户，他们可以通过移动应用绕过额外的安全检查。此时，攻击者还可以在应用中查看用户的电子邮件地址和电话号码，从而通过网站登录。
- en: In response, Twitter validated and fixed the issue, awarding Ullger $560.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 作为回应，Twitter 验证并修复了该问题，向 Ullger 支付了 $560。
- en: '***Takeaways***'
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***总结要点***'
- en: Consider whether security-related behaviors are consistent across platforms
    when you access an application using different methods. In this case, Ullger only
    tested the application’s browser and mobile versions. But other websites might
    use third-party apps or API endpoints.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过不同方式访问应用程序时，考虑安全相关的行为是否在各个平台之间保持一致。在本例中，Ullger 只测试了应用程序的浏览器和移动版本。但其他网站可能还会使用第三方应用或
    API 端点。
- en: '**HackerOne Signal Manipulation**'
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**HackerOne 信号操控**'
- en: '**Difficulty:** Low'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 低'
- en: '**URL:** *hackerone.com/reports/<X>*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL：** *hackerone.com/reports/<X>*'
- en: '**Source:** *[https://hackerone.com/reports/106305](https://hackerone.com/reports/106305)*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://hackerone.com/reports/106305](https://hackerone.com/reports/106305)*'
- en: '**Date reported:** December 21, 2015'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2015年12月21日'
- en: '**Bounty paid:** $500'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**支付的悬赏金：** $500'
- en: When developing a site, programmers will likely test new features they implement.
    But they might neglect to test rare types of input or how the feature they’re
    developing interacts with other parts of the site. When you’re testing, focus
    on these areas, and especially on edge cases, which are easy ways developers might
    accidentally introduce application logic vulnerabilities.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发网站时，程序员通常会测试他们实现的新功能。但他们可能忽略测试罕见类型的输入，或者新功能与网站其他部分的交互方式。测试时，重点关注这些领域，尤其是边缘案例，这些是开发人员可能会无意中引入应用程序逻辑漏洞的简单方式。
- en: At the end of 2015, HackerOne introduced new functionality to its platform called
    Signal, which shows a hacker’s average reputation based on the resolved reports
    they’ve submitted. For example, reports closed as spam receive –10 reputation,
    not applicable receive –5, informative receive 0, and resolved receive 7\. The
    closer your Signal is to 7, the better.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 2015年底，HackerOne 在其平台上引入了一项新功能，名为 Signal，用于显示黑客根据已解决报告的平均声誉。例如，关闭为垃圾邮件的报告会获得
    -10 声誉，不适用的报告获得 -5，信息性报告得 0，已解决的报告得 7。你的 Signal 越接近 7，表现就越好。
- en: In this case, the reporter Ashish Padelkar recognized that a person could manipulate
    this statistic by self-closing reports. Self-closing is a separate feature that
    allows hackers to retract their report if they made a mistake, and it sets the
    report to 0 reputation. Padelkar realized that HackerOne was using the 0 from
    self-closed reports to calculate Signal. So anyone with a negative Signal could
    raise their average by self-closing reports.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个案例中，报告者 Ashish Padelkar 发现，用户可以通过自闭报告来操控这一统计数据。自闭报告是一个独立的功能，允许黑客在犯错时撤回他们的报告，并将该报告的声誉设为
    0。Padekar 意识到 HackerOne 正在使用自闭报告中的 0 来计算 Signal。因此，任何拥有负面 Signal 的人都可以通过自闭报告来提高他们的平均声誉。
- en: As a result, HackerOne removed self-closed reports from Signal calculations
    and awarded Padelkar a $500 bounty.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，HackerOne 从 Signal 计算中移除了自闭报告，并向 Padekar 发放了 $500 的悬赏金。
- en: '***Takeaways***'
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***要点***'
- en: 'Keep an eye out for new site functionality: it represents an opportunity to
    test new code and could cause bugs even in existing functionality. In this example,
    the interaction of self-closed reports and the new Signal feature resulted in
    unintended consequences.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 留意新网站功能：它代表着测试新代码的机会，并且可能会在现有功能中引发错误。在这个例子中，自闭报告与新功能 Signal 的交互产生了意想不到的后果。
- en: '**HackerOne Incorrect S3 Bucket Permissions**'
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**HackerOne 不正确的 S3 存储桶权限**'
- en: '**Difficulty:** Medium'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 中等'
- en: '**URL:** *[REDACTED].s3.amazonaws.com*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL:** *[REDACTED].s3.amazonaws.com*'
- en: '**Source:** *[https://hackerone.com/reports/128088/](https://hackerone.com/reports/128088/)*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://hackerone.com/reports/128088/](https://hackerone.com/reports/128088/)*'
- en: '**Date reported:** April 3, 2016'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2016年4月3日'
- en: '**Bounty paid:** $2,500'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**支付的悬赏金：** $2,500'
- en: It’s easy to assume every bug in an application has been found before you’ve
    even started testing. But don’t overestimate a site’s security or what other hackers
    have tested. I had to overcome this mindset when testing for an application configuration
    vulnerability on HackerOne.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易假设在你开始测试之前，应用程序中的每个漏洞都已经被发现了。但不要高估一个站点的安全性，也不要以为其他黑客已经测试过了。我在 HackerOne 上测试一个应用配置漏洞时，就不得不克服这种心态。
- en: I noticed that Shopify had disclosed reports about misconfigured Amazon Simple
    Store Services (S3) buckets and decided to see whether I could find similar bugs.
    S3 is a file management service from Amazon Web Services (AWS) that many platforms
    use to store and serve static content, such as images. Like all AWS services,
    S3 has complex permissions that are easy to misconfigure. At the time of this
    report, permissions included the ability to read, write, and read/write. The write
    and read/write permissions meant that anyone with an AWS account could modify
    files, even if that file was stored in a private bucket.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我注意到 Shopify 已公开了关于配置错误的 Amazon Simple Store Services (S3) 存储桶的报告，于是决定看看我能否找到类似的漏洞。S3
    是 Amazon Web Services (AWS) 提供的一项文件管理服务，许多平台使用它来存储和提供静态内容，如图像。像所有 AWS 服务一样，S3
    拥有复杂的权限，容易配置错误。在此报告发布时，权限包括读取、写入和读写权限。写入和读写权限意味着任何拥有 AWS 账户的人都可以修改文件，即使该文件存储在私有存储桶中。
- en: 'While looking for bugs on the HackerOne website, I realized the platform was
    serving user images from an S3 bucket named `hackerone-profile-photos`. The bucket
    name gave me a clue to the naming convention HackerOne was using for buckets.
    To learn more about compromising S3 buckets, I started looking at previous reports
    of similar bugs. Unfortunately, the reports I found about misconfigured S3 buckets
    didn’t include how reporters found the buckets or how they had validated their
    vulnerability. I searched for information on the web instead and found two blog
    posts: *[https://community.rapid7.com/community/infosec/blog/2013/03/27/1951-open-s3-buckets/](https://community.rapid7.com/community/infosec/blog/2013/03/27/1951-open-s3-buckets/)*
    and *[https://digi.ninja/projects/bucket_finder.php/](https://digi.ninja/projects/bucket_finder.php/)*.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HackerOne 网站上寻找漏洞时，我意识到平台从一个名为 `hackerone-profile-photos` 的 S3 桶中提供用户图片。桶名给了我一个线索，表明
    HackerOne 使用了某种命名规范来命名桶。为了深入了解如何妥协 S3 桶，我开始查看之前类似漏洞的报告。不幸的是，我找到的关于配置错误的 S3 桶的报告并没有说明报告者是如何发现这些桶的，也没有说明他们是如何验证漏洞的。于是，我转向网络查找信息，发现了两篇博客文章：*[https://community.rapid7.com/community/infosec/blog/2013/03/27/1951-open-s3-buckets/](https://community.rapid7.com/community/infosec/blog/2013/03/27/1951-open-s3-buckets/)*
    和 *[https://digi.ninja/projects/bucket_finder.php/](https://digi.ninja/projects/bucket_finder.php/)*。
- en: The Rapid7 article details their approach to discovering publicly readable S3
    buckets using *fuzzing*. To do so, the team gathered a list of valid S3 bucket
    names and generated a wordlist of common permutations, like `backup`, `images`,
    `files`, `media` and so on. The two lists gave them thousands of bucket name combinations
    to test access to using the AWS command line tools. The second blog post includes
    a script called *bucket_finder* that accepts a word list of possible bucket names
    and checks whether each bucket in the list exists. If the bucket does exist, it
    attempts to read the contents using the AWS command line tools.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Rapid7 文章详细介绍了他们如何使用 *模糊测试* 来发现公开可读的 S3 桶。为此，团队收集了一个有效的 S3 桶名列表，并生成了一个常见变体的词汇表，如
    `backup`、`images`、`files`、`media` 等等。两个列表为他们提供了数千个桶名组合，团队使用 AWS 命令行工具测试访问这些桶。第二篇博客文章中包含了一个名为
    *bucket_finder* 的脚本，它接受一个可能的桶名词汇表，并检查列表中的每个桶是否存在。如果桶确实存在，脚本会尝试使用 AWS 命令行工具读取其内容。
- en: 'I created a list of potential bucket names for HackerOne, such as `hackerone`,
    `hackerone.marketing`, `hackerone.attachments`, `hackerone.users`, `hackerone.files`,
    and so on. I gave the list to the *bucket_finder* tool and it found a few buckets,
    but none were publicly readable. However, I noticed that the script didn’t test
    if they were publicly writeable. To test that, I created and attempted to copy
    a text file to the first bucket I found using the command `aws s3 mv test.txt
    s3://hackerone.marketing`. This resulted in the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我为 HackerOne 创建了一个潜在的桶名列表，如 `hackerone`、`hackerone.marketing`、`hackerone.attachments`、`hackerone.users`、`hackerone.files`
    等等。我将这个列表提供给 *bucket_finder* 工具，它找到了一些桶，但没有一个是公开可读的。然而，我注意到脚本没有测试它们是否是公开可写的。为了测试这一点，我创建并尝试将一个文本文件复制到我找到的第一个桶中，使用命令
    `aws s3 mv test.txt s3://hackerone.marketing`。结果如下：
- en: '[PRE0]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Trying the next one, `aws s3 mv test.txt s3://hackerone.files`, resulted in
    this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试下一个桶 `aws s3 mv test.txt s3://hackerone.files`，结果是：
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Success! Next, I tried to delete the file using the command `aws s3 rm s3://hackerone.files/test.txt`
    and received another success.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！接下来，我尝试使用命令 `aws s3 rm s3://hackerone.files/test.txt` 删除文件，并再次成功。
- en: 'I was able to write and delete files from a bucket. An attacker could theoretically
    move a malicious file into that bucket so a HackerOne staff member might access
    it. As I was writing my report, I realized I couldn’t confirm that HackerOne owned
    the bucket because Amazon lets users register any bucket name. I wasn’t sure whether
    to report without ownership confirmation, but I figured: what the hell. Within
    hours, HackerOne confirmed the report, fixed it, and discovered other misconfigured
    buckets. To HackerOne’s credit, when it awarded the bounty, it factored in the
    additional buckets and increased my payout.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我能够从一个桶中写入和删除文件。理论上，攻击者可以将一个恶意文件放入这个桶中，供 HackerOne 的工作人员访问。当我在写报告时，我意识到我无法确认
    HackerOne 是否拥有这个桶，因为亚马逊允许用户注册任何桶名。我不确定是否应该在没有确认所有权的情况下报告，但我想，反正试试看吧。几小时后，HackerOne
    确认了报告并修复了漏洞，还发现了其他配置错误的桶。值得称赞的是，HackerOne 在发放奖金时，考虑到了额外的桶，并增加了我的奖励。
- en: '***Takeaways***'
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***要点***'
- en: 'HackerOne is an awesome team: the hacker-minded developers know common vulnerabilities
    to look out for. But even the best developer can make mistakes. Don’t be intimidated
    and shy away from testing an application or feature. As you’re testing, focus
    on third-party tools that are easily misconfigured. Additionally, if you find
    write-ups or publicly accessible reports about new concepts, try to understand
    how those reporters discovered the vulnerability. In this case, doing so was a
    matter of researching how people were finding and exploiting S3 misconfigurations.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: HackerOne是一个了不起的团队：拥有黑客思维的开发者们了解常见的漏洞并能够识别。但即使是最优秀的开发者也可能犯错。不要因为害怕而回避测试应用程序或功能。在测试过程中，重点关注那些容易配置错误的第三方工具。此外，如果你找到有关新概念的报告或公开报告，试着理解那些报告者是如何发现漏洞的。在这种情况下，关键是研究人们是如何发现并利用S3配置错误的。
- en: '**Bypassing GitLab Two-Factor Authentication**'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**绕过GitLab双因素认证**'
- en: '**Difficulty:** Medium'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 中等'
- en: '**URL:** N/A'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL:** 不适用'
- en: '**Source:** *[https://hackerone.com/reports/128085/](https://hackerone.com/reports/128085/)*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://hackerone.com/reports/128085/](https://hackerone.com/reports/128085/)*'
- en: '**Date reported:** April 3, 2016'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2016年4月3日'
- en: '**Bounty paid:** N/A'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖励支付：** 不适用'
- en: '*Two-factor authentication (2FA)* is a security feature that adds a second
    step to website login processes. Traditionally, when logging into a website, users
    only enter their username and password to be authenticated. With 2FA, the site
    requires an additional authentication step beyond a password. Commonly, sites
    will send an authorization code via email, text, or an authenticator app that
    the user must enter after they’ve submitted their username and password. These
    systems can be tough to implement correctly and are good candidates for application
    logic vulnerability testing.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*双因素认证（2FA）* 是一种安全功能，它在网站登录过程中增加了第二个步骤。传统上，用户登录网站时只需输入用户名和密码进行身份验证。而在启用2FA的情况下，网站要求在输入密码之外进行额外的身份验证步骤。通常，网站会通过电子邮件、短信或身份验证器应用程序发送授权码，用户在提交用户名和密码后必须输入该授权码。这些系统可能很难正确实现，因此是应用逻辑漏洞测试的良好候选对象。'
- en: 'On April 3, 2016, Jobert Abma found a vulnerability in GitLab. It allowed an
    attacker to log into a target’s account without knowing the target’s password
    when 2FA was enabled. Abma noticed that once a user entered their username and
    password during the sign-in process, a code would be sent to the user. Submitting
    the code to the site would result in the following `POST` request:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 2016年4月3日，Jobert Abma在GitLab中发现了一个漏洞。该漏洞允许攻击者在启用2FA时，不知道目标用户的密码也能登录目标账户。Abma注意到，在用户输入用户名和密码后，网站会向用户发送一个验证码。用户提交验证码后，系统会发出以下`POST`请求：
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `POST` request would include an OTP token ➊ that authenticates the user
    for the second step of 2FA. An OTP token would be generated only after the user
    has already entered their username and password, but if an attacker attempted
    to log in to their own account, they could intercept the request using a tool
    like Burp and add a different username to the request. This would change the account
    they were being logged in to. For example, the attacker could attempt to log in
    to the user account called `john` as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`POST`请求将包括一个OTP令牌➊，该令牌用于验证用户进行2FA的第二步。OTP令牌仅在用户已输入用户名和密码后生成，但如果攻击者试图登录自己的账户，他们可以使用Burp等工具拦截请求，并将请求中的用户名替换为另一个用户名。这将改变他们登录的账户。例如，攻击者可以尝试如下方式登录名为`john`的用户账户：'
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `user[login]` request tells the GitLab website that a user has attempted
    to log in with their username and password, even when the user has not attempted
    to log in. The GitLab website would generate an OTP token for `john` regardless,
    which the attacker could guess and submit to the site. If the attacker guessed
    the correct OTP token, they could log in without having ever known the password.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`user[login]`请求告诉GitLab网站，用户即使没有尝试登录，也已使用其用户名和密码进行过登录尝试。无论如何，GitLab网站都会为`john`生成一个OTP令牌，攻击者可以猜测并提交给网站。如果攻击者猜中了正确的OTP令牌，他们就能在从未知道密码的情况下登录。'
- en: One caveat of this bug is that an attacker had to either know or guess a valid
    OTP token for the target. An OTP token changes every 30 seconds and is only generated
    when a user is logging in or a `user[login]` request is submitted. Exploiting
    this vulnerability would be difficult. Nonetheless, GitLab confirmed and fixed
    the vulnerability within two days of the report.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个漏洞的一个警告是，攻击者必须知道或猜测目标的有效 OTP 令牌。OTP 令牌每 30 秒变化一次，且仅在用户登录或提交 `user[login]`
    请求时生成。利用这个漏洞是非常困难的。不过，GitLab 在报告后两天内确认并修复了这个漏洞。
- en: '***Takeaways***'
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***要点***'
- en: Two-factor authentication is a tricky system to get right. When you notice a
    site is using it, be sure to test its functionalities, such as any token lifetimes,
    maximum number of attempts limitations, and so on. Also, check whether expired
    tokens can be reused, the likelihood of guessing a token, and other token vulnerabilities.
    GitLab is an open source application, and Abma likely found this issue by reviewing
    the source code because he identified the error in the code for developers in
    his report. Nonetheless, watch for HTTP responses that reveal parameters you can
    potentially include in HTTP requests, like Abma did.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 双因素认证是一个难以完美实现的系统。当你发现某个网站使用双因素认证时，一定要测试其功能，例如令牌的有效期、最大尝试次数限制等。还要检查过期的令牌是否可以重用，猜测令牌的可能性以及其他令牌漏洞。GitLab
    是一个开源应用程序，Abma 很可能通过审查源代码发现了这个问题，因为他在报告中识别了代码中开发人员的错误。尽管如此，仍需留意 HTTP 响应，这些响应可能会泄露你可以在
    HTTP 请求中包含的参数，就像 Abma 所做的那样。
- en: '**Yahoo! PHP Info Disclosure**'
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Yahoo! PHP 信息泄露**'
- en: '**Difficulty:** Medium'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 中等'
- en: '**URL:** *http://nc10.n9323.mail.ne1.yahoo.com/phpinfo.php/*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL：** *http://nc10.n9323.mail.ne1.yahoo.com/phpinfo.php/*'
- en: '**Source:** *[https://blog.it-securityguard.com/bugbounty-yahoo-phpinfo-php-disclosure-2/](https://blog.it-securityguard.com/bugbounty-yahoo-phpinfo-php-disclosure-2/)*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://blog.it-securityguard.com/bugbounty-yahoo-phpinfo-php-disclosure-2/](https://blog.it-securityguard.com/bugbounty-yahoo-phpinfo-php-disclosure-2/)*'
- en: '**Date reported:** October 16, 2014'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2014 年 10 月 16 日'
- en: '**Bounty paid:** N/A'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**悬赏金额：** 暂无'
- en: This report wasn’t awarded a bounty like the others in this chapter. But it
    demonstrates the importance of network scanning and automation for finding application
    configuration vulnerabilities. In October 2014, Patrik Fehrenbach of HackerOne
    found a Yahoo! server that returned the contents of the `phpinfo` function. The
    `phpinfo` function outputs information about the current state of PHP. This information
    includes compilation options and extensions, the version number, information about
    the server and environment, HTTP headers, and so on. Because every system is set
    up differently, `phpinfo` is commonly used to check configuration settings and
    the predefined variables available on a given system. This type of detailed information
    should not be publicly accessible on production systems, because it gives attackers
    significant insight into a target’s infrastructure.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这份报告没有像本章中的其他报告那样获得悬赏。但它展示了网络扫描和自动化在发现应用配置漏洞中的重要性。2014 年 10 月，HackerOne 的 Patrik
    Fehrenbach 发现了一台返回 `phpinfo` 函数内容的 Yahoo! 服务器。`phpinfo` 函数输出当前 PHP 状态的信息。这些信息包括编译选项和扩展、版本号、服务器和环境信息、HTTP
    头等。由于每个系统的设置不同，`phpinfo` 通常用于检查系统上的配置设置和预定义变量。这种详细的信息不应在生产系统上公开，因为它可以让攻击者深入了解目标的基础设施。
- en: Additionally, although Fehrenbach didn’t mention this, note that `phpinfo` will
    include the contents of `httponly` cookies. If a domain has an XSS vulnerability
    *and* a URL disclosing the contents of `phpinfo`, an attacker could use the XSS
    to make an HTTP request to the URL. Because the contents of `phpinfo` are disclosed,
    the attacker could steal the `httponly` cookie. This exploit is possible because
    the malicious JavaScript could read the HTTP response body with the value, even
    though it’s not permitted to read the cookie directly.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，尽管费伦巴赫没有提到这一点，但请注意，`phpinfo` 会包含 `httponly` cookie 的内容。如果一个域存在 XSS 漏洞 *并且*
    有一个 URL 会泄露 `phpinfo` 的内容，攻击者可以利用 XSS 发起对该 URL 的 HTTP 请求。由于 `phpinfo` 的内容被泄露，攻击者可以窃取
    `httponly` cookie。这个漏洞之所以存在，是因为恶意 JavaScript 可以读取包含该值的 HTTP 响应体，即使它无法直接读取 cookie。
- en: 'To discover this vulnerability, Fehrenbach pinged *[yahoo.com](http://yahoo.com)*,
    which returned 98.138.253.109\. He used the `whois` command line tool on the IP,
    which returned the following record:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了发现这个漏洞，费伦巴赫对 *[yahoo.com](http://yahoo.com)* 进行了 ping 操作，返回了 98.138.253.109。他使用了
    `whois` 命令行工具查询该 IP，返回了以下记录：
- en: '[PRE4]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The first line confirms that Yahoo! owns a large block of IP addresses from
    98.136.0.0 to 98.139.255.255 or 98.136.0.0/14, which is 260,000 unique IP addresses.
    That’s a lot of potential targets! Using the following simple bash script, Fehrenbach
    searched for the IP address’s `phpinfo` files:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行确认了Yahoo!拥有从98.136.0.0到98.139.255.255（或98.136.0.0/14）的一个大块IP地址，共计260,000个唯一IP地址。这是大量潜在的目标！使用以下简单的bash脚本，Fehrenbach搜索了IP地址的`phpinfo`文件：
- en: '[PRE5]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The code at ➊ enters a `for` loop that iterates through all the possible numbers
    for each range in each pair of braces. The first IP tested would be 98.136.0.0,
    then 98.136.0.1, then 98.136.0.2, and so on through 98.139.255.255\. Each IP address
    would be stored in the variable `ipa`. The code at ➋ uses the `wget` command line
    tool to make a `GET` request to the IP address being tested by replacing `${ipa}`
    with the current value of the IP address in the `for` loop. The `-t` flag denotes
    the number of times the `GET` request should be retried when unsuccessful, which
    in this case is `1`. The `-T` flag denotes the number of seconds to wait before
    considering the request to have timed out. Running his script, Fehrenbach found
    the URL *http://nc10.n9323.mail.ne1.yahoo.com* had the `phpinfo` function enabled.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 代码在➊处进入一个`for`循环，该循环遍历每对大括号中的每个范围的所有可能数字。第一个测试的IP将是98.136.0.0，然后是98.136.0.1，再然后是98.136.0.2，依此类推，直到98.139.255.255。每个IP地址都会存储在变量`ipa`中。代码在➋处使用`wget`命令行工具对正在测试的IP地址发出`GET`请求，通过将`${ipa}`替换为`for`循环中当前IP地址的值。`-t`标志表示在请求失败时应重试的次数，在此情况下为`1`。`-T`标志表示在考虑请求超时之前等待的秒数。运行他的脚本后，Fehrenbach发现网址*http://nc10.n9323.mail.ne1.yahoo.com*启用了`phpinfo`功能。
- en: '***Takeaways***'
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***关键要点***'
- en: When you’re hacking, consider a company’s entire infrastructure fair game unless
    you’re told it’s out of scope. Although this report didn’t pay a bounty, you can
    employ similar techniques to find some significant payouts. Additionally, look
    for ways to automate your testing. You’ll often need to write scripts or use tools
    to automate processes. For example, the 260,000 potential IP addresses Fehrenbach
    found would have been impossible to test manually.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当你进行黑客攻击时，除非明确告诉你某个部分不在范围内，否则可以把公司的整个基础设施视为合法目标。虽然这份报告没有支付赏金，但你可以采用类似的技巧来寻找一些可观的奖金。此外，寻找自动化测试的方法。你通常需要编写脚本或使用工具来自动化过程。例如，Fehrenbach发现的260,000个潜在IP地址，如果手动测试是不可能完成的。
- en: '**HackerOne Hacktivity Voting**'
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**HackerOne Hacktivity 投票**'
- en: '**Difficulty:** Medium'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 中等'
- en: '**URL:** *[https://hackerone.com/hacktivity/](https://hackerone.com/hacktivity/)*'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**网址：** *[https://hackerone.com/hacktivity/](https://hackerone.com/hacktivity/)*'
- en: '**Source:** *[https://hackerone.com/reports/137503/](https://hackerone.com/reports/137503/)*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://hackerone.com/reports/137503/](https://hackerone.com/reports/137503/)*'
- en: '**Date reported:** May 10, 2016'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2016年5月10日'
- en: '**Bounty paid:** Swag'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**赏金支付：** 礼品'
- en: Although this report technically didn’t uncover a security vulnerability, it’s
    a great example of how to use JavaScript files to find new functionality to test.
    In the spring of 2016, HackerOne had been developing functionality to allow hackers
    to vote on reports. This feature wasn’t enabled in the user interface and shouldn’t
    have been available to use.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这份报告从技术上讲并没有发现安全漏洞，但它是一个很好的例子，展示了如何使用JavaScript文件来寻找新的功能进行测试。在2016年春季，HackerOne一直在开发一项功能，允许黑客对报告进行投票。这个功能在用户界面中并未启用，本不应当被使用。
- en: HackerOne uses the React framework to render its website, so much of its functionality
    is defined in JavaScript. One common way of using React to build functionality
    is to enable UI elements based on responses from the servers. For example, a site
    might enable admin-related functionality, such as a Delete button, based on whether
    the server identifies a user as an administrator. But the server might not verify
    that an HTTP request invoked via the UI was made by a legitimate administrator.
    According to the report, the hacker, apok, tested whether disabled UI elements
    could still be used to make HTTP requests. The hacker modified HackerOne’s HTTP
    responses to change any false value to true, likely using a proxy like Burp. Doing
    so revealed new UI buttons for voting on reports, which invoked `POST` requests
    when clicked.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: HackerOne 使用 React 框架来渲染其网站，因此它的大部分功能都定义在 JavaScript 中。使用 React 构建功能的一个常见方法是根据服务器的响应启用
    UI 元素。例如，网站可能会根据服务器是否识别某个用户为管理员来启用与管理员相关的功能，如删除按钮。但服务器可能不会验证通过 UI 发起的 HTTP 请求是否由合法管理员发起。根据报告，黑客
    apok 测试了禁用的 UI 元素是否仍然可以用来发起 HTTP 请求。黑客修改了 HackerOne 的 HTTP 响应，将所有错误值改为正确，可能是通过像
    Burp 这样的代理实现的。这样就揭示了新的 UI 按钮，点击后会发起 `POST` 请求，用于报告投票。
- en: 'Other ways of discovering hidden UI features would be to use the browser developer
    tools or a proxy like Burp to search for the word `POST` within the JavaScript
    files to identify HTTP requests the site uses. Searching for URLs is an easy way
    to find new functionality without having to browse through the entire application.
    In this case, the JavaScript file included the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 发现隐藏的 UI 功能的其他方法是使用浏览器开发者工具或像 Burp 这样的代理，搜索 JavaScript 文件中的 `POST` 字段，以识别该站点使用的
    HTTP 请求。搜索 URL 是发现新功能的简便方法，无需浏览整个应用程序。在此情况下，JavaScript 文件包含以下内容：
- en: '[PRE6]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see, there are two paths for the voting functionality through the
    two URLs at ➊ and ➋. At the time of this report, you could perform `POST` requests
    to these URL endpoints. Then you could vote on the reports despite the functionality
    not being available or complete.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，投票功能通过 ➊ 和 ➋ 的两个 URL 路径提供。在此报告时，你可以对这些 URL 端点执行 `POST` 请求。然后你可以投票，尽管该功能尚未可用或完成。
- en: '***Takeaways***'
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***收获***'
- en: When a site relies on JavaScript, especially on frameworks like React, AngularJS,
    and so on, using JavaScript files is a great way to find more areas of the application
    to test. Using JavaScript files can save you time and might help you identify
    hidden endpoints. Use tools like *[https://github.com/nahamsec/JSParser](https://github.com/nahamsec/JSParser)*
    to make tracking JavaScript files over time easier.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个站点依赖 JavaScript，特别是像 React、AngularJS 等框架时，使用 JavaScript 文件是发现更多应用程序测试区域的好方法。使用
    JavaScript 文件可以节省时间，还可能帮助你识别隐藏的端点。使用像 *[https://github.com/nahamsec/JSParser](https://github.com/nahamsec/JSParser)*
    这样的工具可以让你更容易地追踪 JavaScript 文件的变化。
- en: '**Accessing PornHub’s Memcache Installation**'
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**访问 PornHub 的 Memcache 安装**'
- en: '**Difficulty:** Medium'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 中等'
- en: '**URL:** *[stage.pornhub.com](http://stage.pornhub.com)*'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL：** *[stage.pornhub.com](http://stage.pornhub.com)*'
- en: '**Source:** *[https://blog.zsec.uk/pwning-pornhub/](https://blog.zsec.uk/pwning-pornhub/)*'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://blog.zsec.uk/pwning-pornhub/](https://blog.zsec.uk/pwning-pornhub/)*'
- en: '**Date reported:** March 1, 2016'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2016 年 3 月 1 日'
- en: '**Bounty paid:** $2,500'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖励支付：** $2,500'
- en: In March 2016, Andy Gill was working on the PornHub bug bounty program, which
    had a scope of **.pornhub.com* domains. This meant all the site’s subdomains were
    in scope and eligible for a bounty. Using a custom list of common subdomain names,
    Gill discovered 90 PornHub subdomains.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 2016 年 3 月，Andy Gill 正在参与 PornHub 的漏洞奖励计划，该计划涵盖 **.pornhub.com* 域名。这意味着该站点的所有子域名都在范围内，并有资格获得奖励。使用常见子域名的自定义列表，Gill
    发现了 90 个 PornHub 子域名。
- en: It would have been time-consuming to visit all of these sites, so as Fehrenbach
    did in the earlier example, Gill automated the process using EyeWitness. EyeWitness
    captures screenshots of websites and provides a report of open 80, 443, 8080,
    and 8443 ports (which are common HTTP and HTTPS ports). Networking and ports are
    beyond the scope of this book, but by opening a port, the server can use software
    to send and receive internet traffic.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 访问这些网站会非常耗时，因此正如 Fehrenbach 在前面的示例中所做的那样，Gill 使用 EyeWitness 自动化了这个过程。EyeWitness
    捕获网站截图，并提供开放 80、443、8080 和 8443 端口的报告（这些是常见的 HTTP 和 HTTPS 端口）。网络和端口超出了本书的范围，但通过打开端口，服务器可以使用软件发送和接收互联网流量。
- en: 'This task didn’t reveal much, so Gill focused on *[stage.pornhub.com](http://stage.pornhub.com)*
    because staging and development servers are more likely to be misconfigured. To
    begin, he used the command line tool `nslookup` to get the IP address of the site.
    This returned the following record:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这个任务并没有揭示太多信息，所以 Gill 专注于 *[stage.pornhub.com](http://stage.pornhub.com)*，因为临时和开发服务器更容易出现配置错误。首先，他使用命令行工具
    `nslookup` 获取该站点的 IP 地址。返回的记录如下：
- en: '[PRE7]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The address is the notable value ➊ because it shows the IP address of *[stage.pornhub.com](http://stage.pornhub.com)*.
    Next, Gill used the tool Nmap to scan the server for open ports using the command
    `nmap -sV -p- 31.192.117.70 -oA stage__ph -T4`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 地址是显著的值 ➊，因为它显示了 *[stage.pornhub.com](http://stage.pornhub.com)* 的 IP 地址。接下来，Gill
    使用工具 Nmap 扫描服务器的开放端口，使用的命令是 `nmap -sV -p- 31.192.117.70 -oA stage__ph -T4`。
- en: 'The first flag (`-sV`) in the command enables version detection. If an open
    port is found, Nmap attempts to determine what software is running on it. The
    `–p-` flag instructs Nmap to scan all 65,535 possible ports (by default, Nmap
    only scans the most popular 1,000 ports). Next, the command lists the IP to scan:
    the IP of *[stage.pornhub.com](http://stage.pornhub.com)* (`31.192.117.70`) in
    this case. Then the flag `-oA` outputs the results of the scan as all three major
    output formats, which are normal, grepable, and XML. In addition, the command
    includes a base filename `stage__ph` for the output files. The final flag, `-T4`,
    makes Nmap run a bit faster. The default value is 3: the value 1 is the slowest
    and 5 is the fastest setting. Slower scans can evade intrusion detection systems,
    and faster scans require more bandwidth and might be less accurate. When Gill
    ran the command, he received the following result:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 命令中的第一个标志（`-sV`）启用版本检测。如果发现开放端口，Nmap 会尝试确定该端口上运行的软件。`–p-` 标志指示 Nmap 扫描所有 65,535
    个可能的端口（默认情况下，Nmap 仅扫描最常用的 1,000 个端口）。接下来，命令列出了要扫描的 IP：在本例中是 *[stage.pornhub.com](http://stage.pornhub.com)*
    (`31.192.117.70`)。然后，`-oA` 标志将扫描结果输出为三种主要输出格式，分别是普通格式、可 grep 格式和 XML 格式。此外，命令还包括了一个基础文件名
    `stage__ph` 作为输出文件的名称。最后一个标志 `-T4` 让 Nmap 运行得更快。默认值是 3：值 1 最慢，值 5 最快。较慢的扫描可以避开入侵检测系统，而较快的扫描则需要更多带宽，并可能不那么准确。当
    Gill 运行该命令时，他收到了以下结果：
- en: '[PRE8]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The key part of the report is that port 60893 is open and running what Nmap
    identifies as `memcache` ➊. Memcache is a caching service that uses key-value
    pairs to store arbitrary data. Typically, it’s used to increase the speed of websites
    by serving content faster through the cache.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 报告的关键部分是端口 60893 开放，并且 Nmap 识别它为运行 `memcache` ➊。Memcache 是一种缓存服务，它使用键值对来存储任意数据。通常，它用于通过缓存加速网站内容的传递，从而提高网站的访问速度。
- en: Finding this port open isn’t a vulnerability, but it’s definitely a red flag.
    The reason is that Memcache’s installation guides recommend making it publicly
    inaccessible as a security precaution. Gill then used the command line utility
    Netcat to attempt a connection. He wasn’t prompted for authentication, which is
    an application configuration vulnerability, so Gill was able to run harmless stats
    and version commands to confirm his access.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 发现该端口开放并不是一个漏洞，但绝对是一个警示信号。原因是 Memcache 的安装指南推荐将其设置为公共不可访问，以作为安全预防措施。随后，Gill
    使用命令行工具 Netcat 尝试建立连接。他没有被要求进行身份验证，这是一个应用程序配置漏洞，因此 Gill 能够运行无害的统计和版本命令来确认他的访问权限。
- en: The severity of accessing a Memcache server depends on what information it’s
    caching and how an application is using that information.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 Memcache 服务器的严重性取决于它缓存了什么信息以及应用程序如何使用这些信息。
- en: '***Takeaways***'
  id: totrans-124
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***收获***'
- en: Subdomains and broader network configurations represent great potential for
    hacking. If a program is including a broad scope or all subdomains in its bug
    bounty program, you can enumerate subdomains. As a result, you might find attack
    surfaces that others haven’t tested. This is particularly helpful when you’re
    looking for application configuration vulnerabilities. It’s worth your time to
    become familiar with tools like EyeWitness and Nmap, which can automate enumeration
    for you.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 子域名和更广泛的网络配置代表了黑客攻击的巨大潜力。如果一个程序的漏洞奖励计划涵盖了广泛的范围或所有子域名，你可以枚举子域名。因此，你可能会发现别人没有测试过的攻击面。这对于查找应用程序配置漏洞特别有帮助。花时间熟悉像
    EyeWitness 和 Nmap 这样的工具是值得的，它们可以为你自动化枚举过程。
- en: '**Summary**'
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Discovering application logic and configuration vulnerabilities requires you
    to watch for opportunities to interact with an application in different ways.
    The Shopify and Twitter examples demonstrate this well. Shopify wasn’t validating
    permissions during HTTP requests. Similarly, Twitter omitted security checks on
    its mobile application. Both involved testing the sites from different vantage
    points.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 发现应用程序逻辑和配置漏洞需要你寻找与应用程序以不同方式互动的机会。Shopify和Twitter的例子很好地展示了这一点。Shopify在HTTP请求中没有验证权限。同样，Twitter在其移动应用程序中省略了安全检查。两者都涉及从不同角度测试这些网站。
- en: Another trick to locating logic and configuration vulnerabilities is to find
    the surface areas of an application you can explore. For example, new functionality
    is a great entry point for these vulnerabilities. It always provides a good opportunity
    to find bugs in general. New code presents the chance for you to test edge cases
    or the new code’s interaction with existing functionality. You can also delve
    into a site’s JavaScript source code to discover functional changes that wouldn’t
    be visible in the site’s UI.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 定位逻辑和配置漏洞的另一个技巧是寻找你可以探索的应用程序表面区域。例如，新的功能是这些漏洞的一个很好的切入点。它总是提供一个发现错误的好机会。新代码提供了测试边缘情况或新代码与现有功能交互的机会。你还可以深入挖掘一个网站的JavaScript源代码，发现那些在网站UI中无法看到的功能变化。
- en: Hacking can be time-consuming, so it’s important to learn tools that automate
    your work. Examples in this chapter included small bash scripts, Nmap, EyeWitness,
    and *bucket_finder*. You’ll find more tools in [Appendix A](app01.xhtml#app01).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客攻击可能非常耗时，因此学习能够自动化工作流程的工具非常重要。本章中的示例包括小型bash脚本、Nmap、EyeWitness和*bucket_finder*。你可以在[附录A](app01.xhtml#app01)中找到更多工具。
