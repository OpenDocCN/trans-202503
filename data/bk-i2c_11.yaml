- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Arduino I²C Programming
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino I²C 编程
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: This first chapter on I²C programming will start by discussing the Arduino platform,
    since it’s probably safe to say that more lines of I²C code have been written
    for the Arduino than for any other.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的 I²C 编程将从讨论 Arduino 平台开始，因为可以说为 Arduino 编写的 I²C 代码行数可能超过了其他任何平台。
- en: 'This chapter covers the following information:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下内容：
- en: An introduction to basic I²C programming
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础 I²C 编程介绍
- en: A discussion of the Wire programming model that the Arduino library and IDE
    uses
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论 Arduino 库和 IDE 使用的 Wire 编程模型
- en: Arduino I²C read and write operations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino I²C 读写操作
- en: Accessing multiple I²C ports on various Arduino devices
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问多个 I²C 端口的不同 Arduino 设备
- en: This book tends to use Arduino *sketches* (programs) as the basis for generic
    examples, so a good understanding of Arduino I²C programming will be invaluable
    as you continue through subsequent chapters.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本书倾向于以 Arduino *草图*（程序）为基础来举例，所以在接下来的章节中，深入理解 Arduino I²C 编程将对你大有帮助。
- en: 8.1 Basic I²C Programming
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.1 基础 I²C 编程
- en: In Chapter 2, you learned that an I²C transmission begins with the output of
    a start condition followed by an address-R/W byte, followed by zero or more bytes
    of data, and, finally, end with a stop condition. The controller places these
    data bytes on the I²C bus, either by bit banging or by some hardware registers.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 2 章中，你学习了 I²C 传输开始于输出起始条件，接着是地址-读写字节，接下来是零个或多个数据字节，最后以停止条件结束。控制器将这些数据字节放到
    I²C 总线上，可能是通过位运算或某些硬件寄存器实现的。
- en: The only parts of this transmission that are common to all I²C devices are the
    start condition, the very first address byte, and the stop condition. Any bytes
    the controller transmits after the address byte until a stop condition comes along
    are specific to the peripheral responding to the address in the address byte.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这次传输中唯一对所有 I²C 设备通用的部分是起始条件、第一次地址字节和停止条件。控制器在地址字节后直到遇到停止条件之前传输的任何字节都是特定于响应该地址字节的外设的。
- en: 'The MCP4725 supports several command formats based on data you transmit immediately
    after the address byte. The programming examples in this part of the book will
    use only one of those commands: the *Fast Mode Write command*. This command requires
    3 bytes on the I²C bus, as shown in [Table 8-1](#table8-1).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: MCP4725 支持几种基于你在地址字节后立即传输的数据的命令格式。本书中的编程示例将只使用其中一种命令：*快速模式写入命令*。该命令在 I²C 总线上需要
    3 个字节，如 [表 8-1](#table8-1) 所示。
- en: 'Table 8-1: Fast Mode Write Command'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '表 8-1: 快速模式写入命令'
- en: '| **First byte** | **Second byte** | **Third byte** |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| **第一个字节** | **第二个字节** | **第三个字节** |'
- en: '| --- | --- | --- |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Address | HO DAC value | LO DAC value |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 地址 | 高位 DAC 值 | 低位 DAC 值 |'
- en: '| `aaaa aaax` | `0000 hhhh` | `llll llll` |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `aaaa aaax` | `0000 hhhh` | `llll llll` |'
- en: In [Table 8-1](#table8-1), the `aaaa aaa` bits are the MCP4725 address. These
    will be `1100cba` where bits `c` and `b` are hard-coded into the IC itself and
    `a` comes from the address line on the chip. This corresponds to addresses 0x60
    through 0x67\. (Keep in mind that the I²C protocol shifts these address bits one
    position to the left and expects the R/W bit in bit 0\. For this reason, the address
    byte will actually contain the values 0xC0 through 0xCF, depending on the IC address
    and the state of the R/W line.) The `hhhh llll llll` bits are the 12 bits to write
    to the digital-to-analog conversion circuitry. The HO 4 bits of the second byte
    must contain zeros (they specify the Fast Mode Write command and power-down mode).
    Assuming a 5-V power supply to the chip, the 3-byte sequence *0xC0, 0x00, 0x00*
    (the 3 bytes from [Table 8-1](#table8-1)) will write the 12-bit value 0x000 to
    the DAC at address 0x60, which will cause 0 V to appear on the DAC’s output. Writing
    the 3-byte sequence *0xC0, 0x08, 0x00* will put 2.5 V on the output pin. Writing
    the 3-byte sequence *0xC0, 0x0F, 0xFF* will put 5 V on the analog output pin.
    In general, a value between 0x000 and 0xFFF (linearly) maps to a voltage between
    0 V and 5 V on the DAC analog output. All you need is some way of placing these
    3 bytes on the I²C bus.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在[表8-1](#table8-1)中，`aaaa aaa`位是MCP4725的地址。这些地址位是`1100cba`，其中`c`和`b`是硬编码到IC中的，而`a`来自芯片上的地址线。它对应于地址0x60至0x67。（请记住，I²C协议将这些地址位左移一位，并期望R/W位在第0位。因此，地址字节实际上会包含值0xC0到0xCF，具体取决于IC的地址和R/W线的状态。）`hhhh
    llll llll`位是要写入数字到模拟转换电路的12位数据。第二个字节的高4位必须为零（它们指定快速模式写入命令和关机模式）。假设芯片使用5V电源，3字节序列*0xC0,
    0x00, 0x00*（来自[表8-1](#table8-1)的3个字节）将把12位值0x000写入地址0x60的DAC，这将使DAC的输出端出现0V。写入3字节序列*0xC0,
    0x08, 0x00*将把2.5V输出到输出引脚。写入3字节序列*0xC0, 0x0F, 0xFF*将把5V输出到模拟输出引脚。通常，0x000到0xFFF之间的值（线性）映射到DAC模拟输出端的0V到5V之间的电压。您只需要通过某种方式将这3个字节放置到I²C总线上。
- en: 'Whereas the DAC uses the HO 4 bits of the second byte to specify the command
    (0b0000 is the Fast Mode Write command), the DAC read command is simpler still.
    The R/W bit in the address byte is all the MCP4725 needs to determine how to respond.
    It responds by returning 5 bytes: the first is some status information (which
    you can ignore until Chapter 15, where I discuss the MCP4725 in detail), the second
    byte contains the HO 8 bits of the last value written to the DAC, and the third
    byte contains the LO 4 bits of the last value written in bits 4 through 7 (and
    bits 0 through 3 don’t contain any valid data). The fourth and fifth bytes contain
    some status information and the 14 bits held in the on-chip EEPROM (see Chapter
    15 for more information about the EEPROM).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 而DAC使用第二个字节的高4位来指定命令（0b0000是快速模式写入命令），DAC的读取命令更简单。地址字节中的R/W位就是MCP4725确定如何响应的全部内容。它通过返回5个字节来响应：第一个是一些状态信息（在第15章中我会详细讨论MCP4725之前，您可以忽略它），第二个字节包含写入DAC的最后一个值的高8位，第三个字节包含写入的最后一个值的低4位（第4至第7位），而第0至第3位不包含任何有效数据。第四和第五个字节包含一些状态信息和芯片内EEPROM中存储的14位（有关EEPROM的更多信息，请参见第15章）。
- en: How you place bytes on the I²C bus and how you read data from the I²C bus entirely
    depends on the system, library functions, and operating system (if any) you’re
    using. This chapter discusses I²C on the Arduino; therefore, we’re going to consider
    how to read and write data on the I²C bus using the Arduino library code.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您如何将字节放置到I²C总线上以及如何从I²C总线上读取数据，完全取决于您使用的系统、库函数和操作系统（如果有的话）。本章讨论了Arduino上的I²C，因此我们将考虑如何使用Arduino库代码在I²C总线上读取和写入数据。
- en: 8.2 Basic Wire Programming
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.2 基本的Wire编程
- en: 'The Arduino library responsible for I²C communication is the Wire library.
    I²C communication functions are not built into the Arduino language (which is
    really just C++ with some default include files). Instead, you have to enable
    the Arduino I²C library code by including the following statement near the beginning
    of your program’s source file:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 负责I²C通信的Arduino库是Wire库。I²C通信功能并未内置于Arduino语言中（Arduino语言实际上只是C++，并附带了一些默认的包含文件）。相反，您需要通过在程序源文件的开头附近包含以下语句来启用Arduino的I²C库代码：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that *Wire.h* must have an uppercase *W* on certain operating systems (Linux,
    in particular).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在某些操作系统（尤其是Linux）中，*Wire.h*必须以大写的*W*开头。
- en: The *Wire.h* header file creates a singleton class object named `Wire` that
    you can use to access the class functions. You do not have to declare this object
    in your programs; the header file automatically does this for you. The following
    sections describe the various available `Wire` functions.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*Wire.h*头文件创建了一个名为`Wire`的单例类对象，你可以使用它来访问类的函数。你不需要在程序中声明这个对象；头文件会自动为你完成这项工作。接下来的章节将介绍各种可用的`Wire`函数。'
- en: 8.2.1 Wire Utility Functions
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.2.1 Wire实用函数
- en: The `Wire.begin()` function initializes the Arduino Wire (I²C) library. You
    must call this function once before executing any other functions in the Wire
    library. The convention is to call this function in the Arduino `setup()` function.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`Wire.begin()`函数初始化Arduino的Wire（I²C）库。在执行Wire库中的任何其他函数之前，必须先调用此函数。通常约定是在Arduino的`setup()`函数中调用此函数。'
- en: Without a parameter, `Wire.begin()` will initialize the library to work as a
    controller device on the I²C bus. If you specify a 7-bit integer as an argument,
    this will initialize the library to operate as a peripheral device on the I²C
    bus.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不带参数，`Wire.begin()`将初始化库，使其作为I²C总线上的控制器设备工作。如果你指定一个7位整数作为参数，则会初始化库，使其作为I²C总线上的外设设备工作。
- en: The `Wire.setClock()` function allows you to change the I²C clock frequency,
    supplied as an integer parameter. This call is optional; the default clock speed
    is 100 kHz. Most Arduino boards will support 100,000 or 400,000 as the argument.
    A few high-performance boards might support 3,400,000 (high-speed mode). A few
    will also support 10,000 (low-speed mode on the SMBus).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`Wire.setClock()`函数允许你更改I²C时钟频率，并通过整数参数传递。此调用是可选的；默认时钟频率为100 kHz。大多数Arduino板支持100,000或400,000作为参数。一些高性能板可能支持3,400,000（高速模式）。还有一些支持10,000（SMBus上的低速模式）。'
- en: Keep in mind that all peripherals and CPU(s) on the I²C bus must be capable
    of supporting the clock speed you select. That is, you must set a clock speed
    that is no faster than the slowest peripheral on the bus.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，I²C总线上的所有外设和CPU必须能够支持你选择的时钟频率。也就是说，你必须设置一个不快于总线上最慢外设的时钟频率。
- en: 8.2.2 Wire Read Operations
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.2.2 Wire读操作
- en: 'The `Wire.requestFrom()` function reads data from an I²C peripheral device.
    There are two forms of the `Wire.requestFrom()` function call:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`Wire.requestFrom()`函数用于从I²C外设设备读取数据。`Wire.requestFrom()`函数调用有两种形式：'
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In each of these calls, `address` is the 7-bit peripheral address, `size` is
    the number of bytes to read from the device, and the optional `stopCond` argument
    specifies whether the function issues a stop condition (if true) after receiving
    the bytes. If false, then the function sends a restart condition. If the optional
    `stopCode` argument is not present, the function uses `true` as the default value
    (to issue a stop condition after receiving the data).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些调用中，`address`是7位外设地址，`size`是要从设备读取的字节数， 可选的`stopCond`参数指定是否在接收到字节后发出停止条件（如果为true）。如果为false，则函数会发送重启条件。如果没有提供可选的`stopCode`参数，函数将使用默认值`true`（在接收到数据后发出停止条件）。
- en: 'Once the controller receives the data from the peripheral, an application can
    read that data using the `Wire.read()` and `Wire.available()` functions. The `Wire.available()`
    function returns the number of bytes left in the internal receive buffer, while
    the `Wire.read()` function reads a single byte from the buffer. Typically, you
    would use these two functions to read all the data from the internal buffer using
    a loop such as the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦控制器接收到外设的数据，应用程序可以使用`Wire.read()`和`Wire.available()`函数读取这些数据。`Wire.available()`函数返回内部接收缓冲区中剩余的字节数，而`Wire.read()`函数从缓冲区读取一个字节。通常，你会使用这两个函数，通过以下类似的循环来读取内部缓冲区中的所有数据：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There is no guarantee that the peripheral will actually transmit the number
    of bytes requested in the call to the `Wire.requestFrom()` function—the peripheral
    could return *less* data. Therefore, it is always important to use the `Wire.available()`
    function to determine exactly how much data is in the internal buffer; don’t automatically
    assume it’s the amount you requested.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 无法保证外设在调用`Wire.requestFrom()`函数时实际上会传输请求的字节数——外设可能返回*更少*的数据。因此，始终使用`Wire.available()`函数来准确判断内部缓冲区中的数据量；不要自动假设它是你请求的数量。
- en: The peripheral determines the actual amount of data it returns to the controller.
    In almost all cases, the amount of data is fixed and is specified in the datasheet
    for the peripheral (or by the peripheral’s design). In theory, a peripheral could
    return a variable amount of data. How you retrieve such data is determined by
    the peripheral’s design and is beyond the scope of this chapter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 外设决定返回给控制器的实际数据量。在几乎所有情况下，数据量是固定的，并在外设的数据手册中指定（或由外设设计确定）。理论上，外设也可以返回可变数量的数据。如何获取这些数据由外设的设计决定，超出了本章的讨论范围。
- en: To read data from a peripheral device, a controller must transmit the peripheral
    address and an R/W bit equal to 1 to that peripheral. The `Wire.requestFrom()`
    function handles this. After that, the peripheral will transmit its data bytes.
    The Arduino controller will receive those bytes and buffer them to be read later.
    Note, however, that the full read operation takes place with the execution of
    the `Wire.requestFrom()` function.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要从外设设备读取数据，控制器必须向该外设传输外设地址和R/W位（该位等于1）。`Wire.requestFrom()`函数处理此操作。之后，外设将传输其数据字节。Arduino控制器将接收这些字节并将其缓冲，以便稍后读取。然而，请注意，完整的读取操作是在执行`Wire.requestFrom()`函数时进行的。
- en: 8.2.3 Wire Write Operations
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.2.3 I²C写操作
- en: A controller can write data to a peripheral using the `Wire.beginTransmission()`,
    `Wire.endTransmission()`, and `Wire.write()` functions. The `beginTransmission()`
    and `endTransmission()` functions bracket a sequence of write operations.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器可以使用`Wire.beginTransmission()`、`Wire.endTransmission()`和`Wire.write()`函数向外设写入数据。`beginTransmission()`和`endTransmission()`函数将一系列写操作括起来。
- en: 'The `Wire.beginTransmission()` function takes the following form:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`Wire.beginTransmission()`函数具有以下形式：'
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: where `address` is the 7-bit peripheral address. This function call builds the
    first byte of the data transmission consisting of the address and a clear R/W
    bit.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，`address`是7位外设地址。此函数调用构建数据传输的第一个字节，包括地址和清晰的R/W位。
- en: 'There are three forms of the `Wire.write()` function:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`Wire.write()`函数有三种形式：'
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The first form appends a single byte to an internal buffer for transmission
    to the peripheral. The second form adds all the characters in a string (not including
    the zero-terminating byte) to the internal buffer for transmission to the peripheral.
    The third form copies some bytes from a byte array to the internal buffer (the
    second argument specifies the number of bytes to copy).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种形式将一个字节附加到内部缓冲区，以便传输到外设。第二种形式将字符串中的所有字符（不包括零终止字节）添加到内部缓冲区，以便传输到外设。第三种形式将字节数组中的一些字节复制到内部缓冲区（第二个参数指定要复制的字节数）。
- en: 'The `Wire.endTransmission()` function takes the address byte and data bytes
    from the internal buffer and transmits them over the I²C bus. This function call
    takes two forms:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`Wire.endTransmission()`函数从内部缓冲区获取地址字节和数据字节，并通过I²C总线进行传输。此函数调用有两种形式：'
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The first form transmits the data in the internal buffer and follows that transmission
    with a stop condition. The second form uses the single Boolean argument to determine
    whether it should send a stop condition (`true`) after transmitting the data (the
    next read or write operation will begin with a restart if `stopCond` is `false`).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种形式传输内部缓冲区中的数据，并在传输后发送停止条件。第二种形式使用单个布尔值参数来决定在传输数据后是否发送停止条件（如果`stopCond`为`false`，则下一个读写操作将从重启开始）。
- en: Remember that the actual data transmission does not take place until the execution
    of the `Wire.endTransmission()` function call. The other calls simply build up
    an internal buffer for later transmission.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，实际的数据传输直到执行`Wire.endTransmission()`函数调用时才会发生。其他调用只是将数据积累到内部缓冲区，以便稍后传输。
- en: 8.2.4 Wire Peripheral Functions
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.2.4 外设总线函数
- en: 'The Arduino functions up to this point have assumed that the Arduino is acting
    as an I²C bus controller device. You can also program an Arduino to act as a peripheral
    device. The Arduino library provides two functions for this purpose:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，Arduino函数假设Arduino充当I²C总线控制器设备。你也可以编程让Arduino充当外设设备。Arduino库提供了两个函数用于此目的：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the first function, `inHandler` is a pointer to a function with the following
    prototype: `void inHandler( int numBytes )`. In the second, `outHandler` is a
    pointer to a function with the following prototype: `void outHandler()`.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个函数中，`inHandler`是指向具有以下原型的函数的指针：`void inHandler( int numBytes )`。在第二个函数中，`outHandler`是指向具有以下原型的函数的指针：`void
    outHandler()`。
- en: The Arduino system will call `outHandler` whenever the (external) controller
    device requests data. The `outHandler` function will then use the `Wire.beginTransmission()`,
    `Wire.endTransmission()`, and `Wire.write()` functions to transmit data from the
    peripheral back to the (external) controller. The `inHandler` function will use
    the `Wire.begin()`, `Wire.available()`, and `Wire.read()` functions to retrieve
    data from the controller device.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 每当（外部）控制器设备请求数据时，Arduino系统将调用`outHandler`。然后，`outHandler`函数将使用`Wire.beginTransmission()`、`Wire.endTransmission()`和`Wire.write()`函数将外设的数据传输回（外部）控制器。`inHandler`函数将使用`Wire.begin()`、`Wire.available()`和`Wire.read()`函数从控制器设备检索数据。
- en: 8.3 Arduino I²C Write Example
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.3 Arduino I²C写入示例
- en: The program in [Listing 8-1](#listing8-1) demonstrates using the I²C bus to
    talk to a SparkFun MCP4725 DAC breakout board. This program was written for and
    tested on a Teensy 3.2, though it should work with any compatible Arduino device
    (with slightly different timings).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单8-1](#listing8-1)中的程序演示了如何使用I²C总线与SparkFun MCP4725 DAC扩展板进行通信。该程序为Teensy
    3.2编写并进行了测试，尽管它也应适用于任何兼容的Arduino设备（只是时序略有不同）。'
- en: The program generates a continuous triangle wave by continuously incrementing
    the DAC output from 0x0 to 0xfff (12 bits) and then decrementing from 0xfff back
    to 0x0\. As you will see, this program produces a triangle wave with slightly
    less than a 2.4-second period (around 0.42 Hz) when running on my setup (your
    mileage may vary). This frequency is determined by the amount of time it takes
    to write 8,189 12-bit values to the DAC. Since each transmission requires 3 bytes
    (address, HO byte and command, and LO byte), plus start and stop condition timings,
    it takes around 35 bit times at 100 kHz (10 µsec per bit time) to transfer each
    value.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序通过不断地将DAC输出从0x0增至0xfff（12位），然后再从0xfff减至0x0，生成连续的三角波。正如你所看到的，当在我的设置上运行时，该程序生成的三角波周期略小于2.4秒（大约0.42
    Hz）（你的结果可能会有所不同）。该频率由将8,189个12位数值写入DAC所需的时间决定。由于每次传输需要3个字节（地址、HO字节和命令、LO字节），再加上起始和停止条件的时序，在100
    kHz下，每传输一个值需要大约35个比特时间（每个比特时间为10微秒）。
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`Wire.beginTransmission()` initializes the Wire package to begin accepting
    data for (later) transmission on the I²C bus ❶. The `Wire.write()` function copies
    data to transmit to the internal `Wire` buffers for later transmission on the
    I²C bus ❷. After that, `Wire.endTransmission()` instructs the device to actually
    begin transmitting the data in the internal `Wire` buffers onto the I²C bus ❸.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`Wire.beginTransmission()`初始化Wire库以开始接收数据，并准备在I²C总线上进行（后续的）传输❶。`Wire.write()`函数将数据复制到用于稍后传输的内部`Wire`缓冲区❷。之后，`Wire.endTransmission()`指示设备实际上开始将内部`Wire`缓冲区中的数据传输到I²C总线上❸。'
- en: '[Figure 8-1](#figure8-1) shows one of the DAC 3-byte transmissions appearing
    on the I²C bus during the execution of the program in [Listing 8-1](#listing8-1)
    (this particular transmission was writing 0x963 to the DAC).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[图8-1](#figure8-1)显示了程序在执行[清单8-1](#listing8-1)时，在I²C总线上出现的一个DAC 3字节传输（该传输是将0x963写入DAC）。'
- en: '![](image_fi/502468c08/f08001.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c08/f08001.png)'
- en: 'Figure 8-1: Sample I²C output during triangle wave transmission'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-1：三角波传输过程中的I²C输出示例
- en: As you can see in the oscilloscope output appearing in [Figure 8-2](#figure8-2),
    it takes approximately 2.4 seconds for a full cycle (one rising edge and one falling
    edge) of the triangle wave. Using the logic analyzer, I was able to determine
    that each 3-byte transmission took slightly less than 300 µsec, which roughly
    matches what you see on the oscilloscope output in [Figure 8-2](#figure8-2). Note
    that the timing between transmissions isn’t constant and will vary by several
    microseconds between transmissions. This means 300 µsec is not a hard transmission
    time for 3 bytes.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在[图8-2](#figure8-2)中出现的示波器输出中所看到的，三角波的一个完整周期（一个上升沿和一个下降沿）大约需要2.4秒。使用逻辑分析仪，我能够确定每个3字节传输所需的时间略小于300微秒，这大致与你在[图8-2](#figure8-2)的示波器输出中看到的情况相符。需要注意的是，传输之间的时序并不恒定，每次传输之间的时间差会有几个微秒的波动。这意味着300微秒并不是3字节传输的固定时间。
- en: The maximum frequency this software can produce based on a 100-kHz bus speed
    is approximately 0.4 Hz. To produce a higher frequency value, you would need to
    run the I²C bus at a higher clock frequency (for example, 400 kHz) or reduce the
    number of values you write to the DAC per unit time (for example, you can double
    the frequency by incrementing the loop counter by two rather than one).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个软件基于100 kHz总线速度能够产生的最大频率大约为0.4 Hz。为了产生更高的频率值，您需要将I²C总线运行在更高的时钟频率（例如400 kHz），或者减少每单位时间写入DAC的值的数量（例如，您可以通过将循环计数器增量设置为2而不是1来将频率加倍）。
- en: '![](image_fi/502468c08/f08002.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c08/f08002.png)'
- en: 'Figure 8-2: Triangle wave output from MCP4725'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-2：来自MCP4725的三角波输出
- en: The code in [Listing 8-1](#listing8-1) gives up the I²C bus after each DAC transmission.
    If there were other controllers on the same bus talking to different peripherals,
    this would further reduce the maximum clock frequency of the triangle wave (not
    to mention that it would add some distortion to the triangle wave if there were
    many pauses in the output sequence to the DAC). In theory, you could prevent this
    distortion by refusing to yield the I²C bus during the transmission; however,
    given the vast number of transmissions required here, the only reasonable solution
    to producing an undistorted triangle wave would be to ensure that the MCP4725
    was the only device on the I²C bus.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 8-1](#listing8-1)中的代码在每次DAC传输后都会释放I²C总线。如果总线上有其他控制器与不同的外设进行通信，这将进一步降低三角波的最大时钟频率（更不用说，如果输出序列中有很多暂停，可能会对三角波产生一些失真）。理论上，您可以通过在传输期间拒绝释放I²C总线来防止这种失真；然而，考虑到这里所需的传输数量，要生成无失真的三角波，唯一合理的解决方案是确保MCP4725是I²C总线上唯一的设备。'
- en: 8.4 Arduino I²C Read Example
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.4 Arduino I²C读取示例
- en: Fundamentally, a DAC is an (analog) output-only device. You write a value to
    the DAC registers and an analog voltage magically appears on the analog output
    pin. Reading from a DAC doesn’t make much sense. That said, the MCP4725 IC does
    support I²C read operations. A read command returns 5 bytes.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 从根本上说，DAC是一个（模拟）仅输出的设备。您将一个值写入DAC寄存器，并且模拟电压会神奇地出现在模拟输出引脚上。从DAC读取没有太大意义。话虽如此，MCP4725芯片确实支持I²C读取操作。一个读取命令会返回5个字节。
- en: 'To read a value from the MCP4725, simply place the device’s address on the
    I²C bus with the R/W line high. The MCP4725 will respond by returning 5 bytes:
    the first byte will be status information, the next two will be the last DAC value
    written, and the last pair of bytes will be the EEPROM value. The EEPROM stores
    a default value to initialize the analog output pin when the device powers up,
    before any digital value is written to the chip. See Chapter 15 for more details.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要从MCP4725读取值，只需将设备的地址放置到I²C总线上，并将R/W线拉高。MCP4725会响应并返回5个字节：第一个字节为状态信息，接下来的两个字节是最后写入的DAC值，最后一对字节是EEPROM值。EEPROM存储一个默认值，用于在设备上电时初始化模拟输出引脚，在写入任何数字值到芯片之前。更多详细信息请参见第15章。
- en: The program in [Listing 8-2](#listing8-2) demonstrates an I²C read operation.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 8-2](#listing8-2)中的程序演示了一个I²C读取操作。'
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The following is the output from the program in [Listing 8-2](#listing8-2).
    Note that the output is valid only for my particular setup. Other MCP4725 boards
    may have different EEPROM values. Furthermore, the previous DAC value output is
    specific to the last write on my particular system (this was probably the last
    output written from [Listing 8-1](#listing8-1), when I uploaded the program in
    [Listing 8-2](#listing8-2) while the previous program was running).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是来自[清单 8-2](#listing8-2)程序的输出。请注意，输出仅对我特定的设置有效。其他MCP4725板可能有不同的EEPROM值。此外，先前的DAC值输出是特定于我特定系统上最后一次写入的（这可能是[清单
    8-1](#listing8-1)中的最后一次输出，当时我在上一个程序运行时上传了[清单 8-2](#listing8-2)中的程序）。
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The only thing interesting in this output is that I had programmed the MCP4725’s
    EEPROM to initialize the output pin to 2.5 V on power-up (the halfway point with
    a 5-V power supply).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个输出中唯一有趣的事情是，我已编程MCP4725的EEPROM，在上电时将输出引脚初始化为2.5V（在5V电源下的中间值）。
- en: 8.5 Arduino I²C Peripheral Example
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.5 Arduino I²C外设示例
- en: The previous two sections described read and write operations from the perspective
    of a controller device. This section describes how to create an Arduino system
    that behaves as an I²C peripheral device. In particular, the source code appearing
    in [Listing 8-3](#listing8-3) simulates an MCP4725 DAC device using a Teensy 3.2
    module. The Teensy 3.2 has an on-board, 12-bit DAC connected to pin A14\. Writing
    a value between 0x000 and 0xfff produces a voltage between 0 V and +3.3 V on that
    pin. The code in [Listing 8-3](#listing8-3) associates `rcvISR` (and ISR) with
    the data received interrupt. When data arrives, the system automatically calls
    this routine and passes it the number of bytes received on the I²C bus.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 前两节从控制器设备的角度描述了读写操作。本节描述了如何创建一个作为I²C外设设备的Arduino系统。特别是，[列表8-3](#listing8-3)中的源代码使用Teensy
    3.2模块模拟MCP4725 DAC设备。Teensy 3.2具有一个板载12位DAC，连接到A14引脚。写入0x000到0xfff之间的值会在该引脚产生0V到+3.3V之间的电压。[列表8-3](#listing8-3)中的代码将`rcvISR`（和ISR）与数据接收中断相关联。当数据到达时，系统会自动调用此例程，并传递I²C总线上接收到的字节数。
- en: The `rcvISR` interrupt service routine (ISR) fetches the bytes transmitted to
    the peripheral from the controller, constructs the 12-bit DAC output value from
    those bytes, and then writes the 12 bits to the DAC output (using the Arduino
    `analogWrite()` function). Once the output is complete, the code waits for the
    next transmission to occur. Just like a debug and test feature, this program writes
    a string to the `Serial` output every 10 seconds so you can verify that the program
    is still running.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`rcvISR`中断服务例程（ISR）从控制器接收传输到外设的字节，构建这些字节的12位DAC输出值，然后将这12位写入DAC输出（使用Arduino的`analogWrite()`函数）。输出完成后，代码等待下一个传输的发生。就像一个调试和测试功能，这个程序每10秒钟将一个字符串写入`Serial`输出，以便你可以验证程序是否仍在运行。'
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: I connected the SCL, SDA, and Gnd pins of two Teensy 3.2 devices together (using
    a Teensy and an Arduino also works). On one of the units, I programmed the DAC
    output code similar to that found in [Listing 8-1](#listing8-1). On the other,
    I programmed the code in [Listing 8-3](#listing8-3). I put an oscilloscope on
    the A14 pin on the Teensy running the peripheral code ([Listing 8-3](#listing8-3)).
    The output appears in [Figure 8-3](#figure8-3). Note that the peaks on the triangle
    waves are between 0.0 V and 3.3 V (rather than 0 V and 5 V in [Figure 8-2](#figure8-2))
    because the Teensy is a 3.3-V device.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我将两个Teensy 3.2设备的SCL、SDA和Gnd引脚连接在一起（使用Teensy和Arduino也可以）。在其中一个单元上，我编写了类似于[列表8-1](#listing8-1)中找到的DAC输出代码。在另一个单元上，我编写了[列表8-3](#listing8-3)中的代码。我将示波器连接到运行外设代码（[列表8-3](#listing8-3)）的Teensy的A14引脚上。输出如[图8-3](#figure8-3)所示。请注意，三角波的峰值在0.0V和3.3V之间（而不是[图8-2](#figure8-2)中的0V和5V），因为Teensy是一个3.3V设备。
- en: '![](image_fi/502468c08/f08003.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c08/f08003.png)'
- en: 'Figure 8-3: Triangle wave output from the Teensy 3.2 A14 pin'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-3：Teensy 3.2 A14引脚的三角波输出
- en: '[Figure 8-4](#figure8-4) shows a small section of the output when some clock
    stretching occurs.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[图8-4](#figure8-4)显示了发生时钟拉伸时输出的一个小片段。'
- en: '![](image_fi/502468c08/f08004.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502468c08/f08004.png)'
- en: 'Figure 8-4: A stretched clock signal reduces the triangle wave frequency.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-4：拉伸的时钟信号降低了三角波的频率。
- en: As you can see in [Figure 8-4](#figure8-4), the clock is stretched to 8.4 µsec
    after the transmission of the byte.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图8-4](#figure8-4)所示，时钟在字节传输后被拉伸到8.4微秒。
- en: 8.6 Multiple I²C Port Programming
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.6 多I²C端口编程
- en: The standard Arduino library assumes that only a single I`2`C bus is on the
    board (based on the hardware of the Arduino Uno). Many Arduino-compatible boards
    provide multiple I²C buses. This allows you to spread your I²C devices across
    multiple buses, allowing them to run faster, or to, perhaps, include two devices
    with the same address without having to resort to using an I²C bus multiplexer.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的Arduino库假设板子上只有一个I`2`C总线（基于Arduino Uno的硬件）。许多Arduino兼容板提供多个I²C总线。这使你可以将I²C设备分布在多个总线上，从而让它们运行得更快，或者可能在不使用I²C总线多路复用器的情况下，连接两个具有相同地址的设备。
- en: The standard Arduino library does not support multiple I²C buses; however, devices
    that do provide them will often provide some special library code that lets you
    access the additional I²C buses in the system. The Arduino convention when there
    are multiple instances of a device is to use a numeric suffix after the name to
    designate a particular device. In the case of the I²C bus, those device names
    are `Wire` (for the first, or 0th, port), `Wire1`, `Wire2`, and so on.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 标准 Arduino 库不支持多个 I²C 总线；然而，支持多个 I²C 总线的设备通常会提供一些特殊的库代码，让您能够访问系统中的额外 I²C 总线。对于多个设备实例的
    Arduino 约定，是在设备名称后加上数字后缀以指定特定的设备。在 I²C 总线的情况下，这些设备名称分别是 `Wire`（表示第一个或 0 号端口）、`Wire1`、`Wire2`
    等等。
- en: 'For example, to write a sequence of bytes to the second I²C port, you might
    use code like the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要向第二个 I²C 端口写入一系列字节，您可以使用如下代码：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The mechanism for achieving this is hardware and system specific. Check the
    documentation for your particular SBC to see how this is done.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这一机制的方法是硬件和系统特定的。请查阅您特定单板计算机（SBC）的文档，了解如何实现此功能。
- en: 8.7 Chapter Summary
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.7 本章总结
- en: The Arduino library provides the `Wire` object to support I²C bus transactions.
    This chapter described the basic `Wire` functions available in the Arduino library,
    including those to initialize the I²C library, choose the I²C clock frequency,
    initiate a read from an I²C peripheral, read peripheral data placed in the internal
    buffer, initialize a buffer for transmission to a peripheral, and more.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino 库提供了 `Wire` 对象来支持 I²C 总线事务。本章描述了 Arduino 库中可用的基本 `Wire` 函数，包括初始化 I²C
    库、选择 I²C 时钟频率、发起从 I²C 外设读取、读取存放在内部缓冲区中的外设数据、初始化用于传输到外设的缓冲区等功能。
- en: This chapter also included several real-world examples of I`2`C communication
    using the SparkFun MCP4725.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还包含了使用 SparkFun MCP4725 进行 I`2`C 通信的多个实际示例。
