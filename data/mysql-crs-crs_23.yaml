- en: '18'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '18'
- en: Protecting Salary Data with Views
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用视图保护工资数据
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: In this project, you’ll use views to hide sensitive salary data in an employee
    table. The company in question has one database user from each department (Human
    Resources, Marketing, Accounting, Technology, and Legal) who is allowed access
    to most employee data. However, only users from Human Resources should be able
    to access the employees’ salaries.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用视图来隐藏员工表中的敏感工资数据。该公司在每个部门（人力资源、营销、会计、技术和法律）都有一个数据库用户，他们被允许访问大多数员工数据。然而，只有人力资源的用户可以访问员工的工资数据。
- en: Views can hide sensitive data, but they can also be used to simplify access
    to a complex query, or to select just the relevant data in a table—for example,
    to show just the table’s rows for a particular department.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 视图可以隐藏敏感数据，但也可以用于简化对复杂查询的访问，或选择表中仅相关的数据——例如，只显示某个特定部门的表行。
- en: Creating the employee Table
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建员工表
- en: 'Start by creating your `business` database:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建你的`business`数据库：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, create an `employee` table that stores information about each employee
    in the company, including full name, job title, and salary:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个`employee`表，用于存储公司中每个员工的信息，包括全名、职位和工资：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Since you created the `employee_id` column as `auto_increment`, you don’t need
    to provide an `employee_id` value when inserting new rows into the `employee`
    table. MySQL keeps track of that for you, and makes sure that the `employee_id`
    value gets higher with each row you insert. Add the following data to your table:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你将`employee_id`列设置为`auto_increment`，因此在向`employee`表中插入新行时，不需要提供`employee_id`的值。MySQL会为你跟踪该值，并确保每插入一行，`employee_id`值会递增。将以下数据添加到你的表中：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, query the table to see the inserted rows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，查询表以查看插入的行：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The result is as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `employee` table data looks good, but you want to hide the `salary` column
    from everyone except the Human Resources user so that coworkers can’t access one
    another’s sensitive information.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`employee`表的数据看起来不错，但你希望隐藏`salary`列，除人力资源用户外，其他人不能访问同事的敏感信息。'
- en: Creating the View
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建视图
- en: 'Instead of allowing all database users to access the `employee` table, you’ll
    let them access a view called `v_employee` that has the columns from the `employee`
    table minus the `salary` column. As discussed in [Chapter 10](c10.xhtml), a view
    is a virtual table based on a query. Create the view like so:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你将不允许所有数据库用户访问`employee`表，而是让他们访问一个名为`v_employee`的视图，该视图包含`employee`表中的所有列，除了`salary`列。如[第10章](c10.xhtml)所讨论，视图是基于查询的虚拟表。创建视图的方法如下：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You’ve left out the `salary` column from the `select` statement, so it shouldn’t
    appear in your result once you query your view:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你在`select`语句中遗漏了`salary`列，因此当你查询视图时，结果中不应出现该列：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The result is as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As expected, the `v_employee` view contains every column except for `salary`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，`v_employee`视图包含除了`salary`以外的每一列。
- en: Next, you’ll change the permissions of the `employee` database to allow Human
    Resources to make changes in the underlying `employee` table. Since `v_employee`
    is a view, the changes to `employee` will be immediately reflected there.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将更改`employee`数据库的权限，以允许人力资源部门在底层`employee`表中进行更改。由于`v_employee`是视图，`employee`表的更改将在视图中立即反映出来。
- en: Controlling Permissions
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制权限
- en: To adjust the permissions in your database, you’ll use the `grant` command,
    which grants privileges to MySQL database users and controls which users can access
    which tables.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了调整数据库中的权限，你将使用`grant`命令，该命令授予MySQL数据库用户特权，并控制哪些用户可以访问哪些表。
- en: 'You have one database user per department: `accounting_user`, `marketing_user`,
    `legal_user`, `technology_user`, and `hr_user`. Grant access to the `employee`
    table to only `hr_user` by entering the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每个部门有一个数据库用户：`accounting_user`、`marketing_user`、`legal_user`、`technology_user`和`hr_user`。通过输入以下命令，只授予`hr_user`对`employee`表的访问权限：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You’ve granted `hr_user` the ability to select, delete, insert, and update
    rows in the `employee` table in the `business` database. You won’t grant that
    access to the users from other departments. For example, if `accounting_user`
    tries to query the `employee` table, they’ll get the following error message:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你已授予`hr_user`在`business`数据库中选择、删除、插入和更新`employee`表的权限。你不会将这些权限授予其他部门的用户。例如，如果`accounting_user`尝试查询`employee`表，他们将收到以下错误消息：
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now you’ll grant select access to your `v_employee` view to your users from
    all of your departments:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将授予所有部门的用户对 `v_employee` 视图的查询访问权限：
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: All of your departments’ users can select from the `v_employee` view to access
    the employee data they need.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所有部门的用户都可以从 `v_employee` 视图中选择数据，以访问他们需要的员工信息。
- en: For this project, you can grant privileges using the `root` superuser account
    that was created when you installed MySQL (see [Chapter 1](c01.xhtml)). In a live
    production environment, your DBA would typically create other accounts rather
    than using `root`, which has all privileges and can do anything. In a professional
    setting, very few people know the `root` password. A DBA can also define permissions
    to a *role* and then add or remove users as members of that role, but a detailed
    discussion of roles is beyond the scope of this book.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，您可以使用安装 MySQL 时创建的 `root` 超级用户帐户授予权限（请参见 [第1章](c01.xhtml)）。在实际生产环境中，您的数据库管理员（DBA）通常会创建其他帐户，而不是使用具有所有权限并可以做任何事的
    `root` 帐户。在专业环境中，很少有人知道 `root` 密码。DBA 还可以将权限定义为一个 *角色*，然后将用户添加或移除该角色的成员，但关于角色的详细讨论超出了本书的范围。
- en: Using MySQL Workbench to Test User Access
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 MySQL Workbench 测试用户访问权限
- en: You’ll use MySQL Workbench with this project and connect as `root` to create
    the database, tables, and departments’ users. Then, you’ll create separate connections
    as `hr_user` and `accounting_user` to see how their access differs.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在这个项目中使用 MySQL Workbench，并作为 `root` 连接以创建数据库、表格和部门用户。然后，您将分别创建 `hr_user` 和
    `accounting_user` 的连接，查看他们的访问权限有何不同。
- en: First, create a connection for the `root` user, using the password that you
    created when you installed MySQL. To create the connection, click the `+` icon
    next to the text MySQL Connections on the Welcome to MySQL Workbench screen, as
    shown in [Figure 18-1](#figure18-1).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为 `root` 用户创建一个连接，使用安装 MySQL 时创建的密码。要创建连接，请点击欢迎界面上 MySQL Connections 文字旁边的
    `+` 图标，如 [图18-1](#figure18-1) 所示。
- en: '![](image_fi/503007c18/f18001.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c18/f18001.png)'
- en: 'Figure 18-1: Creating a MySQL Workbench connection'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图18-1：创建 MySQL Workbench 连接
- en: 'The Setup New Connection window will open, as shown in [Figure 18-2](#figure18-2).
    Here, enter a connection name (I chose to give the connection the same name as
    the user: `root`) and enter `root` as the username.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 设置新连接窗口将会打开，如 [图18-2](#figure18-2) 所示。在这里，输入一个连接名称（我选择将连接命名为与用户名相同：`root`），并将
    `root` 作为用户名输入。
- en: '![](image_fi/503007c18/f18002.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c18/f18002.png)'
- en: 'Figure 18-2: Creating a MySQL Workbench connection for `root`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图18-2：为 `root` 创建 MySQL Workbench 连接
- en: To save the connection, click **OK**. Now you can log in as `root` in the future
    simply by clicking the connection.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要保存连接，点击 **OK**。现在您可以通过点击该连接来以 `root` 用户身份登录。
- en: Since `root` is a superuser account that has all privileges and can grant privileges
    to other users, you’ll use this connection to run the script to create the database,
    tables, view, and users for your departments. [Figure 18-3](#figure18-3) shows
    the end of that script, but you’ll need to run the full one at [https://github.com/ricksilva/mysql_cc/blob/main/chapter_18.sql](https://github.com/ricksilva/mysql_cc/blob/main/chapter_18.sql).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `root` 是一个超级用户帐户，具有所有权限并可以授予其他用户权限，您将使用此连接运行脚本来为您的部门创建数据库、表格、视图和用户。[图18-3](#figure18-3)
    显示了该脚本的结尾部分，但您需要运行完整的脚本，脚本位于 [https://github.com/ricksilva/mysql_cc/blob/main/chapter_18.sql](https://github.com/ricksilva/mysql_cc/blob/main/chapter_18.sql)。
- en: '![](image_fi/503007c18/f18003.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c18/f18003.png)'
- en: 'Figure 18-3: Creating tables, view, and users and granting access using MySQL
    Workbench'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图18-3：使用 MySQL Workbench 创建表格、视图和用户并授予访问权限
- en: Now that you’ve run the script to create usernames for your departments, you’ll
    create MySQL Workbench connections for `hr_user` and `accounting_user`. [Figure
    18-4](#figure18-4) shows how to set up a new connection for `hr_user`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经运行脚本为您的部门创建了用户名，接下来将为 `hr_user` 和 `accounting_user` 创建 MySQL Workbench
    连接。[图18-4](#figure18-4) 显示了如何为 `hr_user` 设置新连接。
- en: To create the connection for `hr_user`, you entered a connection name and username
    of `hr_user`. You’ll create a connection for `accounting_user` the same way, using
    `accounting_user` for both the connection name and username.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 `hr_user` 创建连接，您输入了一个连接名称和用户名 `hr_user`。您将以相同的方式为 `accounting_user` 创建连接，使用
    `accounting_user` 作为连接名称和用户名。
- en: '![](image_fi/503007c18/f18004.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c18/f18004.png)'
- en: 'Figure 18-4: Creating a MySQL Workbench connection for `hr_user`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图18-4：为 `hr_user` 创建 MySQL Workbench 连接
- en: Now you have three connections in MySQL Workbench that you can use, as shown
    in [Figure 18-5](#figure18-5).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你在 MySQL Workbench 中有三个可以使用的连接，如[图 18-5](#figure18-5)所示。
- en: '![](image_fi/503007c18/f18005.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c18/f18005.png)'
- en: 'Figure 18-5: MySQL Workbench connections for `root`, `hr_user`, and `accounting_user`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18-5：`root`、`hr_user` 和 `accounting_user` 的 MySQL Workbench 连接
- en: The connections appear with the names you used when you created them. You can
    log in to MySQL as each user by clicking the corresponding connection.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 连接会以你创建时使用的名称显示。你可以通过点击相应的连接登录到 MySQL。
- en: You can also open multiple connections at once. Open a connection as `hr_user`,
    then click the home icon at the top left to return to the welcome screen. From
    here, open another connection as `accounting_user` by clicking its connection.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以同时打开多个连接。首先以 `hr_user` 身份打开一个连接，然后点击左上角的主页图标返回欢迎界面。在这里，点击 `accounting_user`
    的连接，打开另一个连接。
- en: You now should see two tabs in MySQL Workbench, labeled `hr_user` and `accounting_user`,
    as shown in [Figure 18-6](#figure18-6).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该在 MySQL Workbench 中看到两个标签页，分别标注为 `hr_user` 和 `accounting_user`，如[图 18-6](#figure18-6)所示。
- en: '![](image_fi/503007c18/f18006.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c18/f18006.png)'
- en: 'Figure 18-6: You can have multiple connections open in MySQL Workbench.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18-6：你可以在 MySQL Workbench 中同时打开多个连接。
- en: Simply click the appropriate tab to run queries as that user. Click the `hr_user`
    tab to query the `employee` table as `hr_user` ([Figure 18-7](#figure18-7)).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 只需点击相应的标签页，以该用户身份运行查询。点击 `hr_user` 标签页，以 `hr_user` 身份查询 `employee` 表（见[图 18-7](#figure18-7)）。
- en: '![](image_fi/503007c18/f18007.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c18/f18007.png)'
- en: 'Figure 18-7: Querying the `employee` table as `hr_user`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18-7：以 `hr_user` 身份查询 `employee` 表
- en: Now, click the `accounting_user` tab and query the `employee` table again, as
    shown in [Figure 18-8](#figure18-8).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击 `accounting_user` 标签页，再次查询 `employee` 表，如[图 18-8](#figure18-8)所示。
- en: '![](image_fi/503007c18/f18008.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c18/f18008.png)'
- en: 'Figure 18-8: The `accounting_user` cannot view the `employee` table.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18-8：`accounting_user` 无法查看 `employee` 表。
- en: Because you as `root` haven’t granted access on the `employee` table to `accounting_user`,
    the error `SELECT command denied` is returned. The `accounting_user` can, however,
    select from the `v_employee` view, so the user can see employee data without the
    salaries ([Figure 18-9](#figure18-9)).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你作为 `root` 用户没有为 `accounting_user` 授予 `employee` 表的访问权限，返回了错误信息 `SELECT command
    denied`。然而，`accounting_user` 可以从 `v_employee` 视图中进行选择，因此该用户可以查看员工数据，但不包括薪资（见[图
    18-9](#figure18-9)）。
- en: '![](image_fi/503007c18/f18009.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c18/f18009.png)'
- en: 'Figure 18-9: The `accounting_user` is able to query the `v_employee` view.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18-9：`accounting_user` 能够查询 `v_employee` 视图。
- en: Your other database users have the same privileges as `accounting_user`, meaning
    they can’t query the `employee` table either, because you haven’t granted them
    access.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你的其他数据库用户与 `accounting_user` 拥有相同的权限，这意味着他们也无法查询 `employee` 表，因为你没有为他们授予访问权限。
- en: An Alternative Approach
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另一种方法
- en: 'There’s another way to hide data from particular users. MySQL allows you to
    grant permissions at the column level; for example, you could grant the `select`
    privilege on all the columns in the `employee` table except for `salary`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种方法可以隐藏数据，防止特定用户访问。MySQL 允许你在列级别授予权限；例如，你可以在 `employee` 表的所有列上授予 `select`
    权限，除了 `salary` 列：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This allows `technology_user` to select any or all of the `employee_id`, `first_name`,
    `last_name`, `department`, or `job_title` columns from the table, like so:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许 `technology_user` 从 `employee` 表中选择任何或所有的 `employee_id`、`first_name`、`last_name`、`department`
    或 `job_title` 列，如下所示：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The result is:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Since you haven’t granted select access on the `salary` column, MySQL will
    prevent `technology_user` from selecting that column:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你没有为 `salary` 列授予 `select` 权限，MySQL 将阻止 `technology_user` 选择该列：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The result is an error message:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个错误信息：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If `technology_user` tries to select all columns using the `*` wildcard, they
    will receive the same error message, because they cannot return the `salary` column.
    For this reason, I don’t favor this approach, as it can lead to confusion. It’s
    more straightforward to allow users to access all permissible tables through a
    view.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `technology_user` 尝试使用 `*` 通配符选择所有列，他们将收到相同的错误信息，因为他们无法返回 `salary` 列。因此，我不推荐这种方法，因为它可能会导致混淆。更直观的做法是通过视图允许用户访问所有允许的表。
- en: Summary
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this project, you used a view to hide salary information from particular
    users. This technique could be used to hide any kind of sensitive data in your
    tables. You also learned how granting and revoking privileges for database users
    can help to create secure databases by exposing certain pieces of data to specific
    users.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你使用了视图来隐藏特定用户的薪资信息。这种技术可以用来隐藏表中任何类型的敏感数据。你还学习了如何授予和撤销数据库用户的权限，帮助通过将特定数据暴露给特定用户来创建安全的数据库。
- en: With these three projects under your belt, you’ll be able to build your own
    databases, load data from files, create triggers to maintain the quality of your
    data, and use views to protect sensitive data.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这三个项目后，你将能够构建自己的数据库，从文件加载数据，创建触发器以维护数据质量，并使用视图来保护敏感数据。
- en: Good luck on the next stage of your MySQL journey!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 祝你在 MySQL 之旅的下一阶段好运！
