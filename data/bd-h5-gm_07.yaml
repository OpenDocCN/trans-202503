- en: Chapter 5. CSS Transitions and Transformations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章 CSS 过渡与转换
- en: 'So far, we’ve created a bare-bones game with HTML, CSS, and JavaScript: we
    can fire and pop bubbles, and our user interface feels responsive. We achieved
    this through Document Object Model (DOM) manipulation with a lot of jQuery help.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用 HTML、CSS 和 JavaScript 创建了一个简单的游戏：我们可以发射并爆破气泡，用户界面也很响应。我们通过文档对象模型（DOM）操作，并借助大量
    jQuery 来实现这一点。
- en: In this chapter, we’ll explore CSS transitions and transformations, which can
    improve game performance and let you create a wider range of effects, such as
    rotating and scaling elements.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 CSS 过渡和转换，它们可以改善游戏性能，并让你创建更广泛的效果，比如旋转和缩放元素。
- en: Benefits of CSS
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS 的优点
- en: CSS provides a set of transformation and transition attributes that you can
    use to animate changes to CSS properties, such as the `left` or `top` coordinates
    of an element. Rather than using JavaScript to handle animations frame by frame,
    as we’ve done so far, CSS transitions are specified in the style sheet or as styles
    attached to DOM elements. An animation is then initiated by making a single change
    to a CSS property rather than making many incremental changes to a property, as
    JavaScript animations require.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 提供了一组转换和过渡属性，可以用来动画化 CSS 属性的变化，例如元素的 `left` 或 `top` 坐标。与其像之前那样使用 JavaScript
    按帧处理动画，CSS 过渡是在样式表中或附加到 DOM 元素的样式中指定的。动画通过对 CSS 属性进行单一更改来启动，而不是像 JavaScript 动画那样对属性进行多次增量更改。
- en: CSS animations are handled by the browser’s rendering engine rather than by
    the JavaScript interpreter, freeing up CPU time for running other JavaScript code
    and ensuring the smoothest animation possible on the device at the time. On systems
    with graphics processors, the effects are often handled entirely by the graphics
    processor, which means less work for the JavaScript code you are running and can
    reduce the load on the CPU even further, resulting in higher frame rates. As a
    result, the animation will run at the highest frame rate possible for the device
    it’s displayed on.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 动画由浏览器的渲染引擎处理，而不是由 JavaScript 解释器处理，从而为运行其他 JavaScript 代码释放了 CPU 时间，并确保在设备上实现最平滑的动画效果。在具有图形处理器的系统上，效果通常完全由图形处理器处理，这意味着你运行的
    JavaScript 代码负担更小，并且可以进一步减少 CPU 的负载，从而提高帧率。因此，动画将在其显示设备上以最高帧率运行。
- en: We’ll use CSS to add some simple transitions to user-interface elements and
    then replace our jQuery animations with transformations, and we’ll do this while
    maintaining the cross-browser compatibility that we’ve achieved thus far.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 CSS 为用户界面元素添加一些简单的过渡，然后将我们的 jQuery 动画替换为转换，并在此过程中保持到目前为止所实现的跨浏览器兼容性。
- en: Basic CSS Transitions
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本的 CSS 过渡
- en: The first CSS animation we’ll focus on is the transition. A *transition* defines
    how a style property of an object should change from one state to a new one. For
    example, if we change the `left` property of a DOM element from 50 pixels to 500
    pixels, it will instantly change position on the screen. But if we specify a transition,
    we can instead make it move gradually across the screen. A CSS transition specifies
    a property or properties to animate, how the animation should take place, and
    how long the animation should take.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将关注的第一个 CSS 动画是过渡。*过渡*定义了一个对象的样式属性应如何从一个状态变化到另一个状态。例如，如果我们将 DOM 元素的 `left`
    属性从 50 像素更改为 500 像素，它将立即在屏幕上改变位置。但如果我们指定了过渡，我们可以让它逐渐在屏幕上移动。CSS 过渡指定了要动画化的属性或属性集、动画应如何进行，以及动画应该持续多长时间。
- en: 'Transitions generally apply to any CSS property that has a numerical value.
    For example, animating the `left` property, as mentioned earlier, is possible
    because intermediate values between the beginning and end can be calculated. Other
    property changes, such as between `visibility : hidden` and `visibility : visible`,
    are not valid properties for a transition because intermediate values cannot be
    calculated. However, we could make an element fade in by animating the `opacity`
    property from 0 to 1.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '过渡通常适用于任何具有数值的 CSS 属性。例如，像前面提到的那样对 `left` 属性进行动画化是可行的，因为可以计算出开始和结束之间的中间值。其他属性的变化，例如
    `visibility : hidden` 和 `visibility : visible`，不是有效的过渡属性，因为无法计算中间值。然而，我们可以通过将
    `opacity` 属性从 0 动画化到 1 来使元素淡入。'
- en: Colors are also valid properties to animate, because hex values are also numbers
    (each contains three pairs, and each pair represents red, green, or blue) that
    can be gradually changed from one value to another. You can find a list of all
    the properties that can be animated with transitions at *[https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties/](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties/)*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色也是有效的动画属性，因为十六进制值也是数字（每个包含三个数字对，每个数字对表示红色、绿色或蓝色），可以从一个值逐渐变化到另一个值。你可以在 *[https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties/](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties/)*
    找到所有可以使用过渡动画的属性列表。
- en: How to Write a Transition
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何编写过渡
- en: 'To animate a `div` using a transition, add a CSS `transition` property to it.
    A `transition` property includes the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用过渡对 `div` 进行动画，给它添加一个 CSS `transition` 属性。一个 `transition` 属性包括以下内容：
- en: '****CSS properties to apply the transition to****. These can be any valid CSS
    properties that you want to animate, such as `top`, `left`, `font-size`, or just
    `all`, which applies transitions to all valid property changes.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****应用过渡的 CSS 属性****。这些可以是你想要动画的任何有效 CSS 属性，例如 `top`、`left`、`font-size`，或者仅使用
    `all`，它会将过渡应用于所有有效的属性变化。'
- en: '****Duration****. How long (in seconds) the transition will take.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****持续时间****。过渡所需的时间（以秒为单位）。'
- en: '****Easing****. Tells a property how fast to change over the transition duration.
    For example, an element might move from one point to another at a smooth pace,
    or it could accelerate at the beginning and then decelerate toward the end, as
    in [Figure 5-1](ch05.html#graph_showing_movement_with_no_easing_an "Figure 5-1. Graph
    showing movement with no easing and movement with easing in (at the start of the
    animation) and out (at the end)."). You can apply easing to other properties you
    want to change, too, including color.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****缓动****。指示属性在过渡持续时间内变化的速度。例如，某个元素可能会以平滑的速度从一个位置移动到另一个位置，或者它可能在开始时加速，随后在结束时减速，如[图
    5-1](ch05.html#graph_showing_movement_with_no_easing_an "图 5-1. 图表显示无缓动和有缓动的运动（动画开始时的缓动和结束时的缓动）。")所示。你也可以对其他你想要改变的属性应用缓动，包括颜色。'
- en: '![Graph showing movement with no easing and movement with easing in (at the
    start of the animation) and out (at the end).](httpatomoreillycomsourcenostarchimages2184527.png.jpg)'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图表显示无缓动和有缓动的运动（动画开始时的缓动和结束时的缓动）。](httpatomoreillycomsourcenostarchimages2184527.png.jpg)'
- en: Figure 5-1. Graph showing movement with no easing and movement with easing in
    (at the start of the animation) and out (at the end).
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5-1. 图表显示无缓动和有缓动的运动（动画开始时的缓动和结束时的缓动）。
- en: '****Start delay****. Specifies the number of seconds to wait to start the transition.
    The most common value is 0 (or empty), which means start immediately.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****开始延迟****。指定开始过渡前等待的秒数。最常见的值是 0（或为空），意味着立即开始。'
- en: 'We’ll write a transition definition just like any other CSS rule, and when
    we want the transition to occur, we’ll make a change to the CSS property that
    we want to animate. To move a `div` or other HTML element smoothly across the
    screen, we set the `top` and `left` coordinates to new values:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将像编写其他 CSS 规则一样编写过渡定义，当我们希望过渡发生时，我们将修改要进行动画的 CSS 属性。为了让 `div` 或其他 HTML 元素在屏幕上平滑移动，我们将
    `top` 和 `left` 坐标设置为新的值：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As an example, we’ll make the New Game button move down the screen. Add the
    following to *main.css*:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们将使“新游戏”按钮向下移动。将以下内容添加到 *main.css*：
- en: '*main.css*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*main.css*'
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `transition` definition’s first value ➊ states which property (or properties)
    the transition applies to. Using `all` applies the transition to every property;
    think of it as a wildcard. The second value ➋ is the duration of the transition
    in seconds. The third value ➌ is the easing: `ease-in-out` produces a smooth transition
    with an initial acceleration and ending deceleration. Finally, we add a delay
    ➍ of 1 second before the animation runs. The next three lines beginning at ➎ provide
    the same specification but with vendor-specific prefixes for cross-browser support.
    These are needed for older browsers; newer browsers use the unprefixed version
    once the tag definition is considered to be stable.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition` 定义的第一个值 ➊ 指定了过渡应用的属性（或属性）。使用 `all` 将过渡应用于所有属性，可以把它当作一个通配符。第二个值
    ➋ 是过渡的持续时间（以秒为单位）。第三个值 ➌ 是缓动：`ease-in-out` 会产生一个平滑的过渡，开始时加速，结束时减速。最后，我们添加一个延迟
    ➍，在动画开始前等待 1 秒。接下来的三行从 ➎ 开始，提供了相同的规范，但使用了供应商特定的前缀，以支持跨浏览器。这些是旧版浏览器所需的；新版浏览器在标签定义被认为稳定后，会使用无前缀版本。'
- en: To guarantee your game will run on a certain browser, always include the correct
    vendor-specific prefix. Just be sure that whenever you change a transition’s property,
    you also change it in the transition definition for each browser.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保证你的游戏能在某个浏览器上运行，始终包括正确的厂商特定前缀。只要确保每次更改过渡的属性时，也要在每个浏览器的过渡定义中进行相应更改。
- en: 'Fortunately, the rule is simple: the browser-specific versions of `transition`
    are just copies of the regular version with one of the following prefixes:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，规则很简单：`transition`的浏览器特定版本只是常规版本的副本，并在前面加上以下前缀之一：
- en: '`-moz-` for Mozilla browsers, such as Firefox'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-moz-`用于Mozilla浏览器，如Firefox'
- en: '`-webkit-` for Webkit browsers, such as Chrome and Safari'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-webkit-`用于Webkit浏览器，如Chrome和Safari'
- en: '`-ms-` for Microsoft Internet Explorer'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-ms-`用于微软Internet Explorer'
- en: 'Reload the page and then type the following into the JavaScript console:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 重新加载页面，然后在JavaScript控制台中输入以下内容：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You should see a pause, and then the button will smoothly slide up the screen.
    The effect is more or less identical to an `animate` call, but we changed only
    the CSS value.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到一个暂停，然后按钮会平滑地滑动到屏幕上方。效果或多或少与`animate`调用相同，但我们只更改了CSS的值。
- en: Delete the CSS definition for `.button` now because we’re going to apply a more
    useful effect.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在删除`.button`的CSS定义，因为我们将应用一个更有用的效果。
- en: Color-Changing Buttons
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 颜色变化按钮
- en: Let’s apply transitions to spice up our user interface! We’ll animate a button
    without a single line of JavaScript; instead, we’ll use a `transition` definition
    and the `hover` pseudo-class that you’re probably familiar with for creating rollover
    button effects.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们应用过渡效果来增强用户界面！我们将不使用任何JavaScript代码来动画化按钮；相反，我们将使用`transition`定义和你可能熟悉的`hover`伪类来创建鼠标悬停按钮效果。
- en: 'First, we’ll add a rollover state to the New Game button with a CSS amendment.
    Add the following to *main.css* now:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将为“新游戏”按钮添加一个鼠标悬停状态，通过修改CSS。现在将以下内容添加到*main.css*：
- en: '*main.css*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*main.css*'
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `transition` definition’s first value ➊ states which property (or properties)
    the transition applies to. We’re applying it to the `background-color` property,
    which is written exactly as it would appear as a standard CSS rule. The second
    value ➋ is the length of the transition in seconds. The third value ➌ is once
    again the easing, set to `ease-in-out`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition`定义中的第一个值 ➊ 指定过渡应用于哪个属性（或哪些属性）。我们将其应用于`background-color`属性，该属性的写法与标准CSS规则完全相同。第二个值
    ➋ 是过渡的持续时间，单位为秒。第三个值 ➌ 是缓动函数，再次设置为`ease-in-out`。'
- en: Other types of easing include `ease`, `linear`, or just `ease-in` or `ease-out`.
    But all of these shorthand descriptions are actually aliases for specific definitions
    of `cubic-bezier`, which you can use to indicate any transition curve you like.
    The `cubic-bezier` easing function accepts four decimal numbers to define a graph;
    for example,
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 其他类型的缓动包括`ease`、`linear`，或者仅使用`ease-in`或`ease-out`。但所有这些简写实际上都是`cubic-bezier`的别名，你可以用它来表示任何你喜欢的过渡曲线。`cubic-bezier`缓动函数接受四个小数值来定义一个图形；例如，
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: is identical to
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 与...相同
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Bézier curves are described by specifying the coordinates of two points that
    form the tangent line of the beginning and the end parts of the curve, respectively.
    These are shown as P1 and P2 in [Figure 5-2](ch05.html#two_points_that_specify_a_beacutezier_cu
    "Figure 5-2. The two points that specify a Bézier curve are P1 and P2.").
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Bézier曲线通过指定两点的坐标来描述，这两点分别形成曲线开始部分和结束部分的切线。这些点在[图5-2](ch05.html#two_points_that_specify_a_beacutezier_cu
    "图5-2. 指定Bézier曲线的两点是P1和P2。")中显示为P1和P2。
- en: '![The two points that specify a Bézier curve are P1 and P2.](httpatomoreillycomsourcenostarchimages2184529.png.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![指定Bézier曲线的两点是P1和P2。](httpatomoreillycomsourcenostarchimages2184529.png.jpg)'
- en: Figure 5-2. The two points that specify a Bézier curve are P1 and P2.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-2. 指定Bézier曲线的两点是P1和P2。
- en: The values specified in the CSS are the coordinates of P1 and P2, which are
    always between 0 and 1\. You won’t specify P0 and P3 because they’re always the
    origin (0,0) and (1,1), respectively. The angle of P1 and P2 from the vertical
    axis determines the slope of the curve, and the length of the lines from P0 to
    P1 and P2 to P3 determines how pronounced the curvature will be.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中指定的值是P1和P2的坐标，它们始终位于0和1之间。你不会指定P0和P3，因为它们始终是原点（0,0）和（1,1）。P1和P2与垂直轴的夹角决定了曲线的斜率，而从P0到P1和从P2到P3的线段长度则决定了曲线的弯曲程度。
- en: Unless you want a specific easing, `ease-in-out` or `linear` will often do just
    fine. But for more complex transitions, some online tools will help you create
    `cubic-bezier` curves based on visual graphs and input values. One such website
    is *[http://cubic-bezier.com/](http://cubic-bezier.com/)*, which allows you to
    tweak values and watch the animation to see how the numbers translate to a movement
    transition.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你需要特定的缓动效果，`ease-in-out` 或 `linear` 通常就足够了。但对于更复杂的过渡，一些在线工具可以帮助你根据可视化图表和输入值创建
    `cubic-bezier` 曲线。其中一个网站是 *[http://cubic-bezier.com/](http://cubic-bezier.com/)*，它允许你调整值并观看动画，看看这些数值是如何转换为过渡动画的。
- en: The three lines, starting after the initial transition definition at ➍, are
    vendor-specific transition definitions, which I made sure to include so the transition
    works properly in different browsers. The CSS standard is still considered a work
    in progress, and browser manufacturers have adopted their own prefixes to avoid
    potential conflicts with how the standard is implemented when it’s finalized.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始过渡定义之后的三行，是厂商特定的过渡定义，我确保包括了这些定义，以便过渡在不同浏览器中正确运行。CSS 标准仍然被视为一个正在进行的工作，浏览器厂商采用了自己的前缀，以避免在标准最终确定时与实现的方式发生潜在冲突。
- en: 'The single-line format I’ve used so far is the most compact way to specify
    a transition, but you could also specify the properties individually:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我目前使用的单行格式是指定过渡的最紧凑方式，但你也可以分别指定每个属性：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: I recommend sticking with the compact approach most of the time. Otherwise,
    you’d need all the CSS standard lines plus the three vendor-specific copies of
    each, which would quickly clutter your style sheet.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议大多数时候坚持使用紧凑的方式。否则，你将需要所有的 CSS 标准行以及每行的三个厂商特定副本，这会很快使你的样式表变得凌乱。
- en: Reload the page and hover over the New Game button. You should see a gentle
    change in color from light to darker red. That’s a nice effect, and you didn’t
    write any JavaScript! But there’s still more you can do to add effects using CSS
    only.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 重新加载页面并将鼠标悬停在“新游戏”按钮上。你应该看到按钮的颜色从浅红色渐变到深红色。这是一个不错的效果，而且你没有写任何 JavaScript！不过，使用纯
    CSS，你还能做更多的效果。
- en: Basic CSS Transformations
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本的 CSS 变换
- en: The second powerful feature of CSS we’ll look at is transformations. *Transformations*
    allow you to manipulate an object’s shape. In most browsers, it’s possible to
    transform an object in either two dimensions or three and to skew, distort, and
    rotate it in any way that can be described by a three-dimensional matrix. You
    can animate transformations with transitions or let them stand alone; for example,
    to display a button at an angle, you might let the viewer watch it rotate, or
    you might just render the button askew.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要看的第二个强大功能是 CSS 变换。*变换*允许你操控对象的形状。在大多数浏览器中，你可以在二维或三维空间中变换一个对象，并可以按任何可以用三维矩阵描述的方式进行倾斜、扭曲和旋转。你可以通过过渡来动画化变换，或者让变换独立存在；例如，为了展示一个按钮的倾斜角度，你可以让用户看到它旋转，或者你也可以直接渲染一个倾斜的按钮。
- en: How to Write a Transformation
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何编写变换
- en: 'Some simple CSS transformations include:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一些简单的 CSS 变换包括：
- en: Translations by (*x*,*y*) or even (*x*,*y*,*z*) coordinates in 3D
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按 (*x*, *y*) 或者甚至按 (*x*, *y*, *z*) 坐标在三维空间中进行平移
- en: Scaling by dimensions along the *x-*, *y-*, and *z*-axes
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 沿 *x*、*y* 和 *z* 轴的维度进行缩放
- en: Rotating in place by an angle along any of the *x*-, *y*-, or *z*-axes
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 沿任意 *x*、*y* 或 *z* 轴旋转
- en: Skewing along the *x*- or *y*-axis
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 沿 *x* 轴或 *y* 轴的倾斜
- en: Adding 3D perspective
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 3D 透视效果
- en: You can transform by a 2D or even a 3D matrix. Transforming by a matrix involves
    some calculation of the math involved. If you want to explore it in more depth,
    some references are available online, such as *[https://developer.mozilla.org/en-US/docs/Web/CSS/transform/](https://developer.mozilla.org/en-US/docs/Web/CSS/transform/)*.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过二维或甚至三维矩阵来进行变换。通过矩阵进行变换涉及一些数学计算。如果你想更深入地探讨，可以在线找到一些参考资料，比如*[https://developer.mozilla.org/en-US/docs/Web/CSS/transform/](https://developer.mozilla.org/en-US/docs/Web/CSS/transform/)*。
- en: Scaling a Button
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缩放按钮
- en: 'In this section, we’ll make the New Game button a bit more dynamic by adding
    an enlarging effect on top of the current color change. Make the following addition
    to the `.button:hover` definition in *main.css*:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过在当前的颜色变化上添加一个放大效果，使“新游戏”按钮变得更具动态感。请在 *main.css* 中的 `.button:hover`
    定义中添加以下内容：
- en: '*main.css*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*main.css*'
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The entire transformation is primarily contained in one `transform` line ➊.
    The transformation is specified as scaling by a factor of 1.1—a size increase
    of 10 percent. The three lines that follow do the same thing but use the identical
    vendor-specific prefixes you used in the `transition` definition.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 整个变换主要包含在一行 `transform` 代码中 ➊。变换定义为按 1.1 的比例进行缩放——即大小增加 10%。接下来的三行做了相同的事情，但使用了你在
    `transition` 定义中使用的相同供应商特定的前缀。
- en: We just want to scale the New Game button, so reload the page and then mouse
    over the button again. The scaling should work but not as a smooth animation.
    Although the color still changes gradually in response to the mouse hover, the
    button’s size jumps in a single step. We’ll amend the transition definition to
    apply to the transform as well as the background color.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要缩放“新游戏”按钮，因此重新加载页面后，再次将鼠标悬停在按钮上。缩放应该会生效，但不会像平滑动画那样进行。尽管颜色仍然会根据鼠标悬停逐渐变化，但按钮的大小会一步到位地跳变。我们将修改过渡定义，以便它同时应用于变换和背景颜色。
- en: 'To achieve this task, we could simply change the `.button` definition so the
    `transition` property affects every CSS property:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个任务，我们可以简单地修改 `.button` 定义，使得 `transition` 属性影响每个 CSS 属性：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This definition applies the `ease-in-out` effect to all of the button’s CSS
    properties that it’s possible to apply transitions to. Now if any of those properties
    change after the DOM is rendered, the button will be animated with a 300-millisecond
    transition effect on that property. But what if you don’t want all button animations
    to happen at the same rate?
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个定义将 `ease-in-out` 效果应用于按钮的所有可以应用过渡的 CSS 属性。现在，如果这些属性中的任何一个在 DOM 渲染后发生变化，按钮将在该属性上应用
    300 毫秒的过渡动画效果。但如果你不想让所有按钮动画以相同的速度发生呢？
- en: 'In that case, you could specify multiple properties by adding a comma-separated
    definition:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你可以通过添加逗号分隔的定义来指定多个属性：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This solution also minimizes side effects if we want to change any other CSS
    properties on the fly without having them animate automatically.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案还最小化了副作用，如果我们想要动态改变其他 CSS 属性而不让它们自动动画化时，会更加有效。
- en: 'When you apply transitions to individual `transform` properties in CSS, you
    still need to specify vendor-specific versions within each `transition` definition.
    Therefore, the full button definition needs to be this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 CSS 中对单个 `transform` 属性应用过渡时，仍然需要在每个 `transition` 定义中指定供应商特定的版本。因此，完整的按钮定义需要是这样的：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Make this change in *main.css*, reload the page, and mouse over the button again.
    Now, both the background color and scale should change in a smooth transition.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *main.css* 中进行此更改，重新加载页面，再次将鼠标悬停在按钮上。现在，背景颜色和缩放应该都会平滑过渡。
- en: 'CSS transitions and transformations are useful for simple animations and especially
    for mouseover effects on user-interface elements, such as buttons. However, they’re
    useful for more than just adding a bit of sparkle to the user interface: we can
    also use them to animate sprites, including the fired bubbles in the game.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 过渡和变换对于简单的动画非常有用，尤其是在用户界面元素（如按钮）上的鼠标悬停效果。然而，它们不仅仅用于给用户界面添加一些亮点：我们还可以用它们来动画化精灵，包括游戏中发射的气泡。
- en: CSS Transitions in Place of jQuery animate
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用 CSS 过渡替代 jQuery 动画
- en: Now, when a player fires a bubble, it leaves the firing point and moves in a
    straight line toward its destination. Any fired bubble follows a path simple enough
    that a CSS transition can handle that animation easily, and making the switch
    will remove some of the load from JavaScript.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当玩家发射气泡时，气泡会离开发射点，并沿直线朝目标移动。任何发射的气泡都会遵循一种简单到足以让 CSS 过渡轻松处理的路径，切换到这种方式将减轻一些
    JavaScript 的负担。
- en: The hard-coded CSS transition we used for the button hover effect, where the
    transition is defined in the style sheet, won’t work for bubble movement because
    the duration of the transition needs to change depending on how far the bubble
    has to move. Currently, a bubble moves at 1,000 pixels per second. So for example,
    if we want a bubble to move 200 pixels, the duration needs to be set at 200 milliseconds.
    To handle this variable duration, instead of specifying the CSS transitions in
    the style sheet, we’ll apply them at runtime with JavaScript.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为按钮悬停效果使用的硬编码 CSS 过渡，过渡定义在样式表中，但在气泡移动时不会生效，因为过渡的持续时间需要根据气泡的移动距离来改变。目前，气泡以每秒
    1000 像素的速度移动。因此，例如，如果我们希望气泡移动 200 像素，则持续时间需要设置为 200 毫秒。为了处理这个可变的持续时间，我们不会在样式表中指定
    CSS 过渡，而是在运行时通过 JavaScript 来应用它们。
- en: Setting a CSS transition with jQuery uses the same syntax as setting any other
    CSS property, but we’ll need to add browser prefixes for property names. Fortunately,
    we don’t have to write four versions of the same transition for this task. Modernizr
    can take care of those prefixes for us, which actually makes it easier to create
    CSS transitions in JavaScript than in a style sheet!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用jQuery设置CSS过渡的语法与设置其他CSS属性相同，但我们需要为属性名添加浏览器前缀。幸运的是，在这个任务中我们不必为每个浏览器编写四个版本的过渡。Modernizr可以为我们处理这些前缀，这实际上使得在JavaScript中创建CSS过渡比在样式表中更容易！
- en: However, not all older browsers support transitions, so inside *ui.js* we’ll
    first check whether CSS animations are supported and fall back to the jQuery animation
    if they’re not. Unless you’re sure that CSS transitions are supported in all of
    the browsers you’re targeting, it’s a good idea to build in a fallback option.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并非所有较旧的浏览器都支持过渡，因此在*ui.js*中，我们首先会检查是否支持CSS动画，如果不支持，则回退到jQuery动画。除非你确定所有目标浏览器都支持CSS过渡，否则最好构建一个回退选项。
- en: 'The code for this CSS animation involves three steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个CSS动画的代码包括三个步骤：
- en: Add the transition CSS property to the element to tell it how quickly to move
    and which property to apply the transition to.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将过渡CSS属性添加到元素中，告诉它以多快的速度移动以及应用过渡的属性。
- en: Change the `top` and `left` properties to the coordinates we want the bubble
    to stop at.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`top`和`left`属性更改为我们希望气泡停止的位置坐标。
- en: Once the bubble has reached its destination, remove the CSS transition definition.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦气泡到达目标位置，移除CSS过渡定义。
- en: 'Amend `fireBubble` in *ui.js* as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式修改*ui.js*中的`fireBubble`：
- en: '*ui.js*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*ui.js*'
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We’ve moved the post-animation function—the one we want jQuery to call once
    the `animate` call has been completed—into its own named definition ➊ by assigning
    it to a variable. This function ensures that if the bubble hasn’t disappeared
    off the screen, it’s finally positioned within the board grid. This function is
    identical to the previous version in that first we check to see whether the bubble
    has a row definition ➋. If the row definition is null, the bubble missed the board
    or caused a popping event. Otherwise, the bubble needs to become part of the main
    board. In that case, we also remove ➌ the transition definition and move the bubble
    to its final position. Consequently, if we apply any CSS changes to the bubble
    in the future, an unwanted transition won’t be applied to them.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将动画后的函数——也就是我们希望jQuery在`animate`调用完成后执行的那个——移到了它自己的命名定义中 ➊，并将其赋值给一个变量。这个函数确保如果气泡还没有从屏幕上消失，它最终会被定位到棋盘网格内。这个函数与之前的版本相同，首先我们检查气泡是否有行定义
    ➋。如果行定义为空，说明气泡错过了棋盘或者触发了弹出事件。否则，气泡需要成为主棋盘的一部分。在这种情况下，我们还会移除 ➌ 过渡定义，并将气泡移动到最终位置。因此，如果将来我们对气泡应用任何CSS更改，就不会应用不必要的过渡。
- en: When `fireBubble` is called, we check that CSS transitions are supported using
    Modernizr ➍. If they are supported, we can add the transition CSS to the bubble
    element ➎. The transition definition will take the form
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`fireBubble`时，我们使用Modernizr ➍检查是否支持CSS过渡。如果支持，我们可以将过渡CSS添加到气泡元素 ➎。过渡定义将采取以下形式：
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`Modernizr.prefixed("transition")` adds any necessary vendor-specific prefixes.
    We set the transition duration to be the same as the duration passed in but divide
    it by a thousand to convert from milliseconds to seconds ➎.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`Modernizr.prefixed("transition")`会添加任何必要的浏览器前缀。我们将过渡时长设置为传入时长的相同值，但将其除以1000以将毫秒转换为秒
    ➎。'
- en: Finally, if we did add a transition, we set a timeout ➏ to call `complete` when
    that transition ends. We don’t need the `setTimeout` call if a browser doesn’t
    support CSS because, in that case, we’ll use the jQuery `animate` function, which
    accepts a callback function to run once an animation completes. We need to add
    the `complete` function as a parameter to that `animate` call ➐, but essentially,
    the jQuery version of the animation is the same as before.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果我们确实添加了过渡，我们会设置一个超时 ➏，在过渡结束时调用`complete`。如果浏览器不支持CSS，我们不需要`setTimeout`调用，因为在这种情况下，我们将使用jQuery的`animate`函数，它接受一个回调函数，在动画完成后执行。我们需要将`complete`函数作为参数传递给该`animate`调用
    ➐，但本质上，jQuery版本的动画与之前的相同。
- en: Refresh the page, fire a bubble, and most likely you’ll see no change in the
    game from the last time you tested it. But that just means your device could display
    the jQuery animation we asked it to before at a high enough frame rate that it’s
    indistinguishable from the CSS version. Behind the scenes, that animation is now
    being passed off to the graphics processor, if your device has one, so JavaScript
    doesn’t have to handle the processing load. In games with numerous moving elements,
    the change you just made could result in a noticeable performance increase.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新页面，触发一个事件，大多数情况下你会发现游戏没有变化。 但这只是意味着你的设备可能已经以足够高的帧率显示了我们之前要求它显示的 jQuery 动画，以至于它与
    CSS 版本无法区分。在幕后，这个动画现在被交给了图形处理器（如果你的设备有的话），这样 JavaScript 就不需要处理计算负载。在有许多移动元素的游戏中，你刚刚做的更改可能会带来明显的性能提升。
- en: Disadvantages of CSS Transitions
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS 过渡的缺点
- en: If JavaScript has to do so much work to animate an element frame by frame, why
    not use CSS transitions wherever possible? Although CSS transitions offer a number
    of benefits, particularly when it comes to smooth animations, their usefulness
    in games is often limited by a lack of control.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 JavaScript 必须逐帧地处理动画，为什么不尽可能使用 CSS 过渡呢？虽然 CSS 过渡提供了许多好处，特别是在平滑动画方面，但它们在游戏中的有用性通常受到控制能力不足的限制。
- en: CSS transitions become more cumbersome to compose as you add more animations
    to a single element. For example, if you want an element to move by 100 pixels
    over a duration of 1 second and you also resize it by 10 pixels over 2 seconds,
    you need to specify a different transition for each CSS property. More important,
    at the end of the movement transition, you’ll need to retain the CSS definition
    so the resize animation continues, which is especially difficult if you need to
    move the element again.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 随着向单个元素添加更多动画，CSS 过渡变得更加繁琐。例如，如果你想让一个元素在 1 秒内移动 100 像素，同时在 2 秒内调整它的大小 10 像素，你需要为每个
    CSS 属性指定不同的过渡。更重要的是，在移动过渡结束时，你需要保留 CSS 定义，以便调整大小动画能够继续，如果你需要再次移动该元素，这将特别困难。
- en: A second disadvantage of transitions is that although easing can alter the way
    an animation appears, movement must be in a straight line. Movement along a curve,
    as in an animation of a character jumping over something, could be generated by
    animating over many small straight line segments. But in that case, you may as
    well use JavaScript for the entire animation.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡的第二个缺点是，尽管缓动可以改变动画的呈现方式，但运动必须是直线的。例如，在角色跳跃越过某物的动画中，运动沿曲线进行，可能是通过对许多小的直线段进行动画处理来实现的。但在这种情况下，你不如使用
    JavaScript 来处理整个动画。
- en: Once set in motion, CSS transitions are impossible to interrogate and change.
    The browser handles the transition and updates the element’s position as soon
    as you set the value in CSS. The element may be rendered halfway to its destination
    due to the transition, but the DOM will report that it’s already done moving.
    As a result, it is impossible to interrogate an element for its current position
    until the animation ends. If you wanted to apply a change in direction, you’d
    need to perform new calculations and rewrite your CSS transition.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启动，CSS 过渡就无法进行查询和更改。浏览器会处理过渡，并在你设置 CSS 值后立即更新元素的位置。元素可能会在过渡过程中呈现到达目标的一半位置，但
    DOM 会报告它已经完成了移动。因此，在动画结束之前，无法查询元素的当前位置。如果你想要应用方向的改变，你需要进行新的计算并重写你的 CSS 过渡。
- en: For example, if you tell an element to change its left position from 50 pixels
    to 250 pixels over 2 seconds, but after 1 second you need to move it to a different
    screen position, you would first need to calculate where it sits on the screen
    after 1 second. The DOM would report its left position at 250 pixels, but we know
    that it’s at the midpoint of an animation, which would put it at 150 pixels in
    *most* cases. But if you had specified easing along a cubic Bézier curve, the
    element is unlikely to be at the midpoint and indeed may be quite far from it.
    You would need to write an equation to calculate the current left coordinate.
    This example is simpler than most because we stop the element midway, but with
    any kind of easing applied and at almost any other point along the animation path,
    calculating where an element might be drawn on the screen is no simple task.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你告诉一个元素将其左侧位置从 50 像素变化到 250 像素，持续时间为 2 秒，但在 1 秒后你需要将其移到屏幕的不同位置，你首先需要计算它在
    1 秒后在屏幕上的位置。DOM 会报告它的左侧位置是 250 像素，但我们知道它正处于动画的中间点，这在*大多数*情况下意味着它应该是 150 像素。但如果你指定了沿着三次
    Bézier 曲线的缓动效果，元素可能并不处于中点，实际上可能离中点相当远。你需要编写一个方程式来计算当前的左侧坐标。这个例子比大多数简单，因为我们让元素停在了动画的中间，但在任何应用了缓动效果并且位于动画路径的其他位置时，计算元素可能在屏幕上的绘制位置都不是一件简单的任务。
- en: Compare this example to animating with jQuery, in which you can just call the
    `.stop` method after 1,000 milliseconds to stop an element dead in its tracks.
    With jQuery, you can even apply a new `animate` method to set a sprite on an entirely
    new path without waiting for a previous animation to finish. CSS transformations
    and transitions work well for user-interface manipulation or for relatively simple
    straight-line movement, but they don’t provide the flexibility we need for a lot
    of in-game action.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个例子与 jQuery 动画进行对比，你只需在 1000 毫秒后调用 `.stop` 方法即可让元素停下。使用 jQuery，你甚至可以应用一个新的
    `animate` 方法，将一个精灵设置到全新的路径上，而无需等待之前的动画完成。CSS 转换和过渡对于用户界面操作或相对简单的直线运动非常有效，但它们并不提供我们在许多游戏动作中所需的灵活性。
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: You’ve seen how simple and powerful CSS transitions can be, but also how their
    usefulness can be limited for in-game action. You’ve also taken a brief look at
    CSS transformations that can be used in combination with transitions to add special
    effects to buttons or other HTML elements.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经了解了 CSS 过渡的简便和强大，但也意识到它们在游戏中的应用可能会受到限制。你还简要地了解了 CSS 转换，它可以与过渡结合使用，为按钮或其他
    HTML 元素添加特效。
- en: One of the main advantages of CSS transitions over JavaScript animation is their
    rendering speed, but unfortunately they are not easy to work with for anything
    other than the simplest of animations. In the next chapter, we’ll look at the
    `canvas` element and see how we can animate games with greater speed and control
    than DOM-based development has given us.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 过渡相比于 JavaScript 动画的主要优势之一是渲染速度，但不幸的是，除非是最简单的动画，否则它们并不容易使用。在下一章中，我们将研究 `canvas`
    元素，看看如何以比基于 DOM 的开发更快且更有控制力的方式为游戏添加动画。
- en: Further Practice
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步练习
- en: Using the CSS transition example in which we animated the New Game button, experiment
    with some Bézier curve easing. Think about how different values might be useful
    in game animations.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们为“新游戏”按钮制作的 CSS 过渡动画示例，尝试一些 Bézier 曲线的缓动效果。考虑一下不同的值在游戏动画中可能的应用。
- en: Create a transformation matrix to flip an element from left to right to make
    it appear mirrored.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个转换矩阵，将元素从左翻转到右，使其看起来像镜像。
- en: Common 2D CSS transformations include translate, rotate, scale, and skew. Which
    of these can you reproduce using a matrix transformation, and which can’t you
    reproduce?
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 常见的 2D CSS 转换包括平移、旋转、缩放和倾斜。你可以用矩阵变换来重现其中哪些效果，哪些不能重现？
