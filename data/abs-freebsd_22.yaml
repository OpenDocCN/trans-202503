- en: '**22'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**22**'
- en: JAILS**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**JAILS**'
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: Virtualization separates an operating system instance from the underlying hardware.
    Virtualization allows you to move operating system installs from one piece of
    hardware to another by copying a file. Virtualization needs an operating system
    installed on the hardware, but that install is normally very minimal, has no public-facing
    services, and is easily reproduced on new hardware. It’s perhaps the biggest change
    in system administration in decades.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化将操作系统实例与底层硬件分离。虚拟化使你可以通过复制文件将操作系统安装从一台硬件迁移到另一台硬件。虚拟化需要在硬件上安装操作系统，但该安装通常非常精简，没有面向公众的服务，并且可以在新硬件上轻松重建。这或许是几十年来系统管理中最大的变化。
- en: Virtualization is something like a client-server environment. The hardware and
    its core operating system instance is the *host*, while the *clients* are all
    virtualized operating system instances. The clients rely on the host to provide
    basic services, such as storage, processor power, and memory. Changes to the host
    can be reflected in the virtualized clients, but changes on the client have no
    effect on the host beyond consuming resources.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化有点像客户端-服务器环境。硬件及其核心操作系统实例是 *宿主*，而 *客户端* 是所有虚拟化的操作系统实例。客户端依赖宿主提供基本服务，如存储、处理器性能和内存。对宿主的更改可以反映在虚拟化的客户端中，但客户端上的更改不会对宿主产生影响，除了消耗资源之外。
- en: 'FreeBSD supports two types of virtualization: jails and bhyve.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD 支持两种类型的虚拟化：jails 和 bhyve。
- en: '*Jails* are a lightweight virtualization method, sometimes called *OS-level
    virtualization*. A jail normally contains a complete operating system userland
    that runs on top of an existing FreeBSD system. The jail relies on the host’s
    filesystem but is limited to a subset of the directory tree. It might even have
    a chunk of dedicated space in a ZFS pool. A jail doesn’t have its own kernel and
    instead runs in a restricted portion of the host’s kernel. The host can manage
    jailed processes without entering the jail, or it can run processes inside the
    jail if preferred. Jails don’t get a graphical console. Use jails to virtualize
    FreeBSD installs of the same version or older, or to run simple virtual Linux
    systems.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*Jail* 是一种轻量级虚拟化方法，有时称为 *操作系统级虚拟化*。一个 jail 通常包含一个完整的操作系统用户空间，运行在现有 FreeBSD
    系统之上。jail 依赖于宿主系统的文件系统，但只限于目录树的一个子集。它甚至可能在 ZFS 池中有一块专用空间。一个 jail 没有自己的内核，而是在宿主系统的内核限制区域内运行。宿主系统可以在不进入
    jail 的情况下管理其中的进程，或者如果需要，也可以在 jail 内运行进程。Jail 不提供图形控制台。使用 jail 来虚拟化相同版本或更早版本的 FreeBSD
    安装，或运行简单的虚拟 Linux 系统。'
- en: '*Bhyve* is a heavier virtualization system. Rather than using the host’s kernel
    and filesystem, bhyve simulates hardware. The host provides a chunk of disk space
    for the virtual machine to use as a disk. A bhyve virtual machine must bring along
    its own filesystem, kernel, and supporting infrastructure. Bhyve virtual machines
    require more resources than jails, but they also offer a console via virtual network
    computing (VNC) and can run truly foreign operating systems, like Microsoft Windows.
    Bhyve is changing rapidly thanks to its rapid development, so this book doesn’t
    cover it. I’ll write about bhyve once it stabilizes.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*Bhyve* 是一个更重的虚拟化系统。与使用宿主的内核和文件系统不同，bhyve 模拟硬件。宿主系统为虚拟机提供一块磁盘空间作为存储。一个 bhyve
    虚拟机必须携带自己的文件系统、内核和支持基础设施。与 jails 相比，bhyve 虚拟机需要更多的资源，但它们还提供通过虚拟网络计算（VNC）的控制台，并且可以运行真正的外来操作系统，如
    Microsoft Windows。由于 bhyve 的快速发展，它正在迅速变化，因此本书没有涵盖它。等到 bhyve 稳定后，我会再写关于它的内容。'
- en: Before considering bhyve, see whether a jail will meet your needs.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑 bhyve 之前，先看看 jail 是否能满足你的需求。
- en: '**Jail Basics**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Jail 基础**'
- en: A jail is a supercharged chroot that applies not only to the filesystem but
    also to processes and the network stack. A jailed system can access only a narrow
    part of the filesystem and can’t see processes outside the jail. Traditionally,
    each jail is assigned a dedicated IP address, and the jail can view only traffic
    to that particular IP. Each jail even has its own user accounts. The root account
    in a jail completely controls that jail but has no access to anything beyond the
    jail.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Jail 是一种增强版的 chroot，不仅对文件系统适用，还对进程和网络栈进行限制。一个被限制的系统只能访问文件系统的一小部分，无法看到 jail 外的进程。传统上，每个
    jail 都分配一个专用的 IP 地址，并且该 jail 只能查看该 IP 的流量。每个 jail 甚至有自己的用户账户。在 jail 中，root 账户完全控制该
    jail，但无法访问 jail 之外的任何内容。
- en: To a user given root access to a jail, the jail looks like a nearly complete
    FreeBSD system, missing only a few device nodes. The user can install whatever
    software she likes without interfering with the host or other jails. All processes
    running in the jail can affect only the jail’s files and processes. The jailed
    user has no visibility of anything beyond the jail; she’s confined. If the jail
    is hacked, the intruder is also confined to the jail.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个拥有 root 权限的监狱用户来说，监狱看起来像一个几乎完整的 FreeBSD 系统，只缺少一些设备节点。用户可以安装任何她喜欢的软件，而不会干扰主机或其他监狱。监狱中运行的所有进程只能影响监狱的文件和进程。被监禁的用户无法看到监狱之外的任何内容；她被限制在监狱中。如果监狱被黑客入侵，入侵者也会被限制在监狱中。
- en: Jails can use a virtual network stack, based on vnet(9). That’s an advanced
    use we won’t cover here, but if you need to provide a jail with its own routing
    table, that’s how you do it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 监狱可以使用基于 vnet(9) 的虚拟网络栈。这是一种高级用法，本文不涉及，但如果你需要为监狱提供自己的路由表，可以按照这种方式操作。
- en: As of FreeBSD 9, multiple jails can share a single IP address, but the sysadmin
    needs to configure each jail to use unique TCP/IP ports for every network service.
    You can’t run multiple SSH instances on port 22 of a single IP! For simplicity,
    the following examples use a single IP for each jail, but remember that you have
    other options.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从 FreeBSD 9 开始，多个监狱可以共享一个 IP 地址，但系统管理员需要为每个监狱配置唯一的 TCP/IP 端口来提供每个网络服务。你不能在同一个
    IP 的端口 22 上运行多个 SSH 实例！为了简便起见，以下示例为每个监狱使用一个 IP，但请记住，你还有其他选择。
- en: Many people put all of their services in jails, even when a host is dedicated
    to a particular purpose. A ZFS snapshot of the jail dataset, or a tarball of the
    directory tree, is a complete backup of the jail. Restoration after a failed software
    upgrade becomes a simple matter of extracting a tarball or rolling back to the
    snapshot.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人将所有服务都放在监狱中，即使主机是专门用于某个特定目的。监狱数据集的 ZFS 快照，或目录树的 tarball，都是监狱的完整备份。在软件升级失败后恢复变得非常简单，只需要提取
    tarball 或回滚到快照。
- en: A jail is also useful for software development and testing. Deploying a new
    service often requires installing and testing quite a few packages. Doing the
    testing in a jail before selecting a solution and proceeding to production prevents
    polluting the host with abandoned files and unneeded software.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 监狱环境对于软件开发和测试也非常有用。部署一个新服务通常需要安装和测试多个软件包。在选择解决方案并进入生产阶段之前，在监狱环境中进行测试可以防止将不再使用的文件和不需要的软件污染主机。
- en: Depending on your hardware and the system load, a single FreeBSD host can support
    dozens or even hundreds of jails. If you want to seriously run that many jails,
    though, make sure your host has two separate network interfaces. Dedicate one
    to jails and the other to managing the host.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的硬件和系统负载，单个 FreeBSD 主机可以支持几十个甚至几百个监狱。然而，如果你打算真正运行这么多监狱，确保你的主机有两个独立的网络接口。一个用于监狱，另一个用于管理主机。
- en: Everything starts with configuring your jail host.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一切从配置你的监狱主机开始。
- en: '**Jail Host Server Setup**'
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**监狱主机服务器设置**'
- en: A server meant as a jail host must work within a few annoying constraints. Configure
    your host correctly before building your first jail.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 作为监狱主机的服务器必须在一些令人烦恼的约束条件下运行。在建立第一个监狱之前，请正确配置你的主机。
- en: The jail system has its own sysctl tree, `security.jail`. You can change these
    sysctls only from the host system. Some sysctls affect all jails running on the
    host. Sysctls that begin with `security.jail.param` can be set on a per-jail basis.
    We’ll touch on these throughout this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 监狱系统有自己的 sysctl 树，`security.jail`。你只能从主机系统更改这些 sysctl。一些 sysctl 会影响主机上所有运行的监狱。以
    `security.jail.param` 开头的 sysctl 可以按监狱逐个设置。我们将在本章中逐步讲解这些内容。
- en: '***Jail Host Storage***'
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***监狱主机存储***'
- en: I strongly advise you to use your jail host only for the purpose of running
    jails and to put all services inside a jail. Start by configuring the host’s storage
    to separate jails and the host operating system.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议你仅将监狱主机用于运行监狱，并将所有服务都放入监狱中。首先配置主机的存储，将监狱和主机操作系统分开。
- en: Many hosts intended for virtualization include SATA DOM flash drives on the
    mainboard for the operating system. These drives are usually less than 100GB in
    size, but a base install of FreeBSD fits in much less than a gigabyte. If you
    have a SATA DOM or similar, use it for the host operating system. If you have
    multiple sets of redundant hard drives, use a pair to mirror the operating system
    and dedicate everything else to jails.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 许多用于虚拟化的主机在主板上包括用于操作系统的 SATA DOM 闪存驱动器。这些驱动器的大小通常小于 100GB，但 FreeBSD 的基础安装占用的空间远小于一个
    GB。如果你有 SATA DOM 或类似设备，可以用它来安装主机操作系统。如果你有多个冗余硬盘集，可以用一对来镜像操作系统，其他的空间则专门用于监狱。
- en: If you don’t have such hardware, dedicate space to the host operating system.
    Use either a partition for UFS filesystems or a dataset reservation for ZFS. In
    either case, 10GB of space should be sufficient. If you need additional space
    for an emergency, you can borrow some from the jail space.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有这样的硬件，可以将空间分配给主机操作系统。可以使用 UFS 文件系统的分区，或者 ZFS 的数据集预留。无论哪种方式，10GB 的空间应该足够。如果你需要额外的紧急空间，可以从监狱空间借用一些。
- en: While ZFS is highly useful for jails, it’s not necessary. I ran jails on UFS
    for many years. Use what works for you and fits your environment.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 ZFS 对监狱非常有用，但并不是必需的。我曾经在 UFS 上运行监狱多年。使用适合你并符合你环境的方案。
- en: Once you have your host partitioned and the operating system installed, look
    at the network.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你分区并安装了操作系统，接下来就可以查看网络配置了。
- en: '***Jail Networking***'
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***监狱网络配置***'
- en: 'There are two seemingly conflicting aspects of jail networking: first, each
    jail expects full control of any IP addresses assigned to it; and second, jails
    can share IP addresses with other jails and even the host. You can start a jail
    using any IP address on the host, but that jail can’t coordinate any network-facing
    services with other services running on that IP. If your jail shares the host’s
    IP address, and the host runs SSH on port 22, the jail can’t use port 22\. If
    you try to start sshd(8) in the jail, the program will complain that it can’t
    use port 22 and crash. Sharing IP addresses between jails, or even between jails
    and the host, requires the sysadmin to coordinate which ports belong to which
    hosts and to configure everything accordingly.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 监狱网络配置有两个看似冲突的方面：首先，每个监狱期望完全控制分配给它的任何 IP 地址；其次，监狱可以与其他监狱甚至主机共享 IP 地址。你可以使用主机的任何
    IP 地址来启动监狱，但该监狱不能与在该 IP 上运行的其他服务协调任何面向网络的服务。如果你的监狱与主机共享 IP 地址，而主机在端口 22 上运行 SSH，监狱就不能使用端口
    22。如果你尝试在监狱中启动 sshd(8)，程序会抱怨不能使用端口 22，并崩溃。监狱之间，或者监狱与主机之间共享 IP 地址，要求系统管理员协调各个端口属于哪个主机，并相应配置所有服务。
- en: The simplest way to configure jails is to assign each its own IP address and
    give the host its own IP address. Each jail can then completely control its own
    IP address. Once you get the hang of this, you can start sharing addresses between
    jails. That means the host can’t have daemons listening on IP addresses assigned
    to jails. Having a host’s daemons listening on the jail’s IP won’t prevent the
    jail from starting, but it will prevent the jail from starting its own services
    on that port. Users like Bert will complain if they can’t SSH to their private
    jails!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 配置监狱的最简单方法是为每个监狱分配一个独立的 IP 地址，并为主机分配一个自己的 IP 地址。这样，每个监狱就可以完全控制自己的 IP 地址。一旦熟悉了这种配置，你可以开始在监狱之间共享
    IP 地址。这样主机就不能在分配给监狱的 IP 地址上运行守护进程。如果主机的守护进程在监狱的 IP 地址上监听，虽然不会阻止监狱启动，但会阻止监狱在该端口上启动自己的服务。如果用户像
    Bert 一样无法 SSH 进入他们的私有监狱，他们会抱怨的！
- en: The cleanest way to configure a jail host is to decide that the host only provides
    jails. Any services run on the host must be in a jail. If you need simple services,
    like a nameserver or a mail exchanger, configure them in a jail. Not only is this
    easier than properly reconfiguring all these servers to attach only to the selected
    IP address; it also provides an additional layer of security for your other jails.
    An intrusion on the host automatically grants the intruder access to all of your
    jails, while an intrusion on a single jail confines the intruder to that jail.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 配置监狱主机的最简洁方法是决定主机仅提供监狱服务。任何在主机上运行的服务必须都在监狱中。如果你需要简单的服务，比如名称服务器或邮件交换机，可以在监狱中配置它们。这不仅比重新配置所有这些服务器并将它们仅附加到选定
    IP 地址要容易，而且还为你的其他监狱提供了一层额外的安全性。如果主机被入侵，入侵者会自动获得对所有监狱的访问权限，而入侵单个监狱则会将入侵者限制在该监狱中。
- en: Use sockstat(1) to identify programs listening on your network, as discussed
    in [Chapter 9](ch09.xhtml#ch09). Add the `-46` flags to show only IPv4 and IPv6
    traffic, and `-l` to show only listening sockets.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 sockstat(1) 来识别网络上监听的程序，正如在 [第 9 章](ch09.xhtml#ch09) 中讨论的那样。添加 `-46` 标志以仅显示
    IPv4 和 IPv6 流量，使用 `-l` 标志以仅显示监听套接字。
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This fairly default FreeBSD install has two programs listening to the network:
    ntpd and sshd. Both are listening to all IP addresses. We must configure all of
    these daemons to listen only to the main server address.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个相当默认的 FreeBSD 安装有两个程序在网络上监听：ntpd 和 sshd。两者都在监听所有 IP 地址。我们必须配置这些守护进程，使它们仅监听主机地址。
- en: Here are some common daemons that cause problems on host servers. In all of
    these, I’ll assume that the jail host has an IP of 198.51.100.50.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些在主机服务器上常见的会引发问题的守护进程。在所有这些例子中，我假设监狱主机的 IP 地址是 198.51.100.50。
- en: '**syslogd**'
  id: totrans-35
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**syslogd**'
- en: The system logger syslogd(8) opens a UDP socket so that it can send messages
    to other hosts. If you don’t log remotely, or if you use a different logging solution,
    use the `-ss` flag in *rc.conf* to turn off the network component.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 系统日志记录器 syslogd(8) 打开一个 UDP 套接字，以便将消息发送到其他主机。如果你不需要远程日志记录，或者使用其他日志记录解决方案，可以在
    *rc.conf* 中使用 `-ss` 标志关闭网络组件。
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you need to send syslogd messages, use the `-b` flag to force syslogd to
    attach to only a single IP address.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要发送 syslogd 消息，可以使用 `-b` 标志强制 syslogd 仅附加到一个 IP 地址。
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Either solution lets your jails’ administrators individually decide whether
    or not they’re going to log across the network. See [Chapter 21](ch21.xhtml#ch21)
    for a full discussion of syslogd.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种解决方案允许你的监狱管理员单独决定是否跨网络进行日志记录。有关 syslogd 的完整讨论，请参见 [第 21 章](ch21.xhtml#ch21)。
- en: '**inetd**'
  id: totrans-41
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**inetd**'
- en: If you need inetd (see [Chapter 20](ch20.xhtml#ch20)), you should almost certainly
    run it from within a jail rather than the host. If you can’t weasel out of running
    inetd on the host, though, use the `-a` flag to restrict it to a single IP address,
    as in the following *rc.conf* snippet.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要 inetd（参见 [第 20 章](ch20.xhtml#ch20)），你几乎可以肯定应该在监狱中运行它，而不是在主机上。如果你实在无法避免在主机上运行
    inetd，使用 `-a` 标志将它限制为一个 IP 地址，就像以下 *rc.conf* 片段所示。
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If I had only specified the `-a` flag and the IP address, it would’ve overwritten
    inetd’s default flags from */etc/defaults/rc.conf*. Every release of FreeBSD from
    the last few decades has used the default flags of `-wW -C 60`; I added my `-a`
    and the IP address to those flags.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我只指定了 `-a` 标志和 IP 地址，它会覆盖 inetd 在 */etc/defaults/rc.conf* 中的默认标志。过去几十年的每个
    FreeBSD 版本都使用默认标志 `-wW -C 60`；我在这些标志上添加了我的 `-a` 和 IP 地址。
- en: '**sshd**'
  id: totrans-45
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**sshd**'
- en: The option `ListenAddress` in */etc/ssh/sshd_config* tells sshd(8) which addresses
    to bind to. Restrict it to only your host IP.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在 */etc/ssh/sshd_config* 中的 `ListenAddress` 选项告诉 sshd(8) 绑定哪些地址。将其限制为仅你的主机 IP
    地址。
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If the only service your jail host offers is sshd(8), you’ve done well.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的监狱主机提供的唯一服务是 sshd(8)，那么你已经做得很好了。
- en: '**NFS**'
  id: totrans-49
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**NFS**'
- en: Network filesystem programs, such as rpcbind(8) and nfsd(8), bind to all IP
    addresses on a host, no matter what you do. Don’t run these programs inside a
    jail, and don’t run NFS from within a jail. If your clients need NFS mounts, have
    the host run these programs and provide the NFS mounts.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 网络文件系统程序，如 rpcbind(8) 和 nfsd(8)，会绑定主机上的所有 IP 地址，无论你做什么。不要在监狱内运行这些程序，也不要在监狱内运行
    NFS。如果你的客户端需要 NFS 挂载，请让主机运行这些程序并提供 NFS 挂载。
- en: '**Network Time Protocol**'
  id: totrans-51
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**网络时间协议**'
- en: The most problematic service on a jail host is timekeeping. All jails get their
    system clock from the host. FreeBSD’s included time daemon, ntpd(8), listens to
    all IP addresses on the host—including the jailed ones. As the lone rare exception,
    though, I’m going to tell you to go ahead and run ntpd on the host.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在监狱主机上最具问题的服务是时间同步。所有监狱都从主机获取系统时钟。FreeBSD 内建的时间守护进程 ntpd(8) 会监听主机上的所有 IP 地址，包括监狱内的
    IP 地址。作为唯一的特殊例外，我建议你继续在主机上运行 ntpd。
- en: A jail lacks the proper access to change the kernel’s time. While you could
    run ntpd in a jail, it couldn’t actually *do* anything. Go ahead and run ntpd
    on your jail host, and don’t worry about it^([1](footnote.xhtml#ch22fn1)) listening
    to all IP addresses. Anyone who tries to run a UDP-based service other than ntpd
    on port 123 is probably trying to evade a packet filter. Make them work harder.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 监狱缺乏适当的权限来更改内核的时间。虽然你可以在监狱中运行 ntpd，但它实际上无法*做*任何事情。可以在你的监狱主机上运行 ntpd，别担心它会监听所有
    IP 地址。任何试图在 123 端口运行除 ntpd 以外的基于 UDP 的服务的人，可能是想绕过数据包过滤器。让他们更努力地工作吧。
- en: If you want to avoid even the chance of a collision, install the `openntpd`
    package. Unlike the base system ntpd(8), OpenNTPD can be configured to listen
    to a single IP address.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想避免即使是碰撞的可能性，安装 `openntpd` 包。与基础系统中的 ntpd(8) 不同，OpenNTPD 可以配置为只监听一个 IP 地址。
- en: '**IP Addresses**'
  id: totrans-55
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**IP 地址**'
- en: Each jail can have one or more IP addresses. These addresses must be attached
    to the host before you start the jail. A jail will run without any networking,
    but it won’t be accessible beyond the host. Add any necessary IP addresses as
    aliases in */etc/rc.conf*.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 每个监狱可以有一个或多个 IP 地址。这些地址必须在启动监狱之前附加到主机。一个没有网络的监狱也可以运行，但无法在主机之外访问。将任何必要的 IP 地址作为别名添加到
    */etc/rc.conf* 中。
- en: '***Jails at Boot***'
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***监狱在启动时***'
- en: To have FreeBSD start your jails at boot, set `jail_enable` in *rc.conf*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要让 FreeBSD 在启动时启动你的监狱，设置 `jail_enable` 在 *rc.conf* 中。
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: FreeBSD defaults to starting all jails listed in */etc/jail.conf*. If you want
    the system to start only a subset of those jails at boot, use the `jail_list`
    *rc.conf* option. Here, I have two jails, called *mariadb* and *httpd*. I want
    them started in this order so that my database jail is running before the web
    server that calls it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD 默认会启动 */etc/jail.conf* 中列出的所有监狱。如果你希望系统只在启动时启动其中一部分监狱，可以使用 `jail_list`
    *rc.conf* 选项。在这里，我有两个监狱，叫 *mariadb* 和 *httpd*。我希望它们按此顺序启动，以确保我的数据库监狱在调用它的 Web
    服务器之前启动。
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: During system shutdown, FreeBSD stops jails in the same order it starts them.
    Your application might not like that. In my example, I want the web server to
    turn off before the database backend. I’d rather have a website be flat-out unavailable
    than have users see the dreaded “database server is kaput” error.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统关闭过程中，FreeBSD 会以启动时的顺序停止监狱。你的应用程序可能不喜欢这种顺序。以我的例子为例，我希望 Web 服务器在数据库后端之前关闭。我宁愿让网站完全无法访问，也不想让用户看到令人讨厌的“数据库服务器已崩溃”错误。
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If the jail startup order is unimportant, you can start and stop all jails simultaneously.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果监狱的启动顺序不重要，你可以同时启动和停止所有监狱。
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now you can configure a jail.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以配置监狱了。
- en: '**Jail Setup**'
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**监狱设置**'
- en: Now that I have a host, I can install some jails. I’ll start with a jail called
    *mariadb*, for running . . . wait for it . . . MariaDB.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我有了一台主机，可以安装一些监狱了。我将从一个叫 *mariadb* 的监狱开始，用来运行……等一下……MariaDB。
- en: Each jail needs a dedicated root directory. All of my example jails live under
    */jail*. I normally put each jail in a directory named after the jail name—in
    this case, */jail/mariadb*.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 每个监狱需要一个专用的根目录。我的所有示例监狱都位于 */jail* 下。我通常会将每个监狱放在一个以监狱名称命名的目录中——在这个例子中是 */jail/mariadb*。
- en: Each jail needs a primary IP. It can also have other IPs, as we’ll see later,
    but let’s start with one. The jail mariadb gets 203.0.113.51.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 每个监狱需要一个主 IP。它也可以有其他 IP，稍后我们将看到，但我们先从一个开始。监狱 mariadb 获取 203.0.113.51。
- en: Each jail needs an internet hostname, just as if it were a real host. This jail
    will become *mariadb.mwl.io*.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 每个监狱都需要一个互联网主机名，就像它是一个真实主机一样。这个监狱将成为 *mariadb.mwl.io*。
- en: Now we can put a userland in the jail.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在监狱中放置用户空间。
- en: '***Jail Userland***'
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***监狱用户空间***'
- en: While you can install any userland components in a jail, all a jail requires
    is the base system. Grab the *base.txz* distribution set for your desired FreeBSD
    release and extract it in your jail’s root directory.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以在监狱中安装任何用户空间组件，但监狱所需的仅仅是基础系统。获取适用于你所需 FreeBSD 版本的 *base.txz* 发行集，并将其提取到监狱的根目录中。
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: That’s a complete install of the base operating system. If you want additional
    distribution sets, such as the debugging symbols, extract them the same way.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是基础操作系统的完整安装。如果你想要额外的发行集，如调试符号，使用相同的方式提取它们。
- en: If you’ve built your own FreeBSD base system, you can install it in the jail.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你自己构建了 FreeBSD 基础系统，可以将它安装到监狱中。
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Jails also need supporting directories and assorted detritus created by the
    install process, but not by `make installworld`. The `make distribution` command
    creates those files. If you already have these directories and files, though,
    don’t rerun `make distribution`: it’ll overwrite any local changes. And don’t
    forget the DESTDIR setting, unless you like resetting the host’s configuration!'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 监狱还需要安装过程中创建的支持目录和各种杂项文件，但这些文件不会通过 `make installworld` 创建。`make distribution`
    命令会创建这些文件。如果你已经有了这些目录和文件，千万不要重新运行 `make distribution`：它会覆盖任何本地更改。并且不要忘记 DESTDIR
    设置，除非你喜欢重置主机的配置！
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can also build a custom userland with only enough binaries for running a
    single program, much as you would for a traditionally chrooted program. For most
    of us, that’s too much work, but if you want to break out ldd(1) and go wild,
    don’t let me stop you.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以构建一个只包含运行单个程序所需的二进制文件的自定义用户空间，类似于为传统的chroot程序构建环境。对于我们大多数人来说，这太麻烦了，但如果你想解锁ldd(1)并尽情玩耍，我不会阻止你。
- en: Once you have a jail userland, tell FreeBSD about your jail in */etc/jail.conf*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了监狱的用户空间，就需要在*/etc/jail.conf*中告诉FreeBSD关于你的监狱。
- en: '***/etc/jail.conf***'
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***/etc/jail.conf***'
- en: Traditionally, FreeBSD configured jails in */etc/rc.conf*. This was clunky and
    unwieldy. While FreeBSD still supports *rc.conf* configuration of jails, I recommend
    using the more flexible */etc/jail.conf* instead. This file isn’t in UCL, although
    it looks like something UCL could support. Define each jail by a name. Give the
    jail parameters in braces after the jail name. Each parameter definition ends
    in a semicolon.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，FreeBSD在*/etc/rc.conf*中配置监狱。这种方式笨重且不方便。虽然FreeBSD仍然支持通过*rc.conf*配置监狱，但我建议使用更加灵活的*/etc/jail.conf*。这个文件不是UCL格式，尽管它看起来像是UCL可以支持的东西。通过名称定义每个监狱。在监狱名称后面用大括号给出监狱的参数定义。每个参数定义以分号结束。
- en: 'Many jail parameters have an equal sign, where we assign a parameter a value.
    Here, I set the parameter `path` to the value `/jail/mariadb`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 许多监狱参数都有一个等号，我们为参数赋值。在这里，我将参数`path`设置为值`/jail/mariadb`：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Other parameters enable or disable a feature with their mere presence. Here,
    I tell this jail to turn on the `mount.devfs` feature:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 其他参数仅通过存在与否来启用或禁用某个功能。在这里，我告诉这个监狱开启`mount.devfs`功能：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Jails support a whole bunch of “mount” parameters, with subparameters for different
    filesystems. This particular parameter specifically addresses mounting devfs.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 监狱支持一大堆“挂载”参数，并有不同文件系统的子参数。这个特定参数专门处理挂载devfs。
- en: Toggles can be turned off for a jail by adding *no* in front of the specific
    parameter. If I don’t want to enable devfs, I wouldn’t turn off the whole mount
    parameter; I’d put the *no* in front of the *devfs*.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在特定参数前添加*no*，可以关闭监狱的切换功能。如果我不想启用devfs，我不会关闭整个挂载参数；我会在*devfs*前加上*no*。
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here’s how I define a jail named *mariadb*:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我定义名为*mariadb*的监狱的方法：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The parameter `host.hostname` gives the jail’s hostname. While the jail name
    is *mariadb*, this host identifies itself by the internet hostname *mariadb.mwl.io*.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 参数`host.hostname`提供了监狱的主机名。虽然监狱名称是*mariadb*，但此主机通过互联网主机名*mariadb.mwl.io*来标识自己。
- en: The IP address is in `ip4.addr`. I’ve assigned the address 203.0.113.51 to this
    jail. This IP must be on the host first.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: IP地址位于`ip4.addr`中。我已将地址203.0.113.51分配给这个监狱。这个IP地址必须先在主机上配置。
- en: The jail’s root directory goes in the `path` variable. Here, it’s set to */jail/mariadb*.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 监狱的根目录放在`path`变量中。在这里，它被设置为*/jail/mariadb*。
- en: Almost every jail needs access to specific device nodes in */dev*, which requires
    mounting devfs (see [Chapter 13](ch13.xhtml#ch13)) in the jail. Enable devfs with
    the `mount.devfs` setting. A jail defaults to getting only a few very specific
    device nodes. An untrusted user can sometimes use device nodes to escape a jail,
    so don’t add additional devices without careful research. You can allow other
    device nodes with a custom devfs ruleset. Assign a custom devfs ruleset to the
    jail with the devfs_ruleset *jail.conf* parameter. I strongly recommend using
    the default jail devfs rules as a base and unhiding the additional devices this
    jail needs, rather than trying to build a custom devfs ruleset from scratch.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个监狱都需要访问*/dev*中的特定设备节点，这需要在监狱中挂载devfs（请参见[第13章](ch13.xhtml#ch13)）。通过`mount.devfs`设置启用devfs。监狱默认仅获取少量非常特定的设备节点。由于不受信任的用户有时可能利用设备节点逃离监狱，因此在没有仔细研究的情况下，不要添加额外的设备。您可以使用自定义的devfs规则集允许其他设备节点。通过devfs_ruleset
    *jail.conf*参数将自定义devfs规则集分配给监狱。我强烈建议使用默认的监狱devfs规则作为基础，解开该监狱需要的额外设备，而不是试图从头开始构建自定义devfs规则集。
- en: A jailed process can inherit parts of its environment from the parent process.
    The `exec.clean` option tells jail(8) to strip away all of the environment except
    for $TERM. The environment variables $HOME, $USER, and $SHELL get set to the target
    environment, normally that of the jail’s root account. You’ll almost always want
    `exec.clean`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一个被监禁的进程可以继承其父进程的部分环境。`exec.clean`选项告诉jail(8)去除除$TERM之外的所有环境变量。环境变量$HOME、$USER和$SHELL会被设置为目标环境，通常是监狱的根账户环境。你几乎总是需要`exec.clean`。
- en: The `exec.start` and `exec.stop` options tell FreeBSD how to start and stop
    the jail.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`exec.start`和`exec.stop`选项告诉FreeBSD如何启动和停止监狱。'
- en: '**In-Jail Startup**'
  id: totrans-100
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**监狱内启动**'
- en: 'Jails can emulate a full-running FreeBSD userland, run a single process, or
    anything in between. You must either use the `exec.start` *jail.conf* parameter
    to tell FreeBSD what process to run in the jail or the `persist` parameter to
    declare you want the jail to exist even without any processes in it. Here, I start
    a full FreeBSD userland, using the normal FreeBSD startup script:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 监狱可以模拟一个完整运行的FreeBSD用户空间，运行单个进程，或者介于两者之间。你必须使用`exec.start` *jail.conf* 参数来告诉FreeBSD在监狱中运行哪个进程，或者使用`persist`参数声明即使没有任何进程，监狱仍然存在。在这里，我启动了一个完整的FreeBSD用户空间，使用了正常的FreeBSD启动脚本：
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If you need only a single command to run inside the jail, you can write your
    own startup script and use `exec.start` to run it when the jail boots. Your brand-new
    jail won’t have an *rc.conf* yet, so it won’t start any additional processes.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只需要在监狱内运行一个命令，你可以编写自己的启动脚本，并在监狱启动时使用`exec.start`来运行它。你的全新监狱还没有*rc.conf*，因此不会启动任何额外的进程。
- en: Instead of `exec.start`, you could set the `persist` option. This tells FreeBSD
    that a jail can exist without any processes running inside it. Including both
    `persist` and `exec.start` means that FreeBSD will start a process for the jail,
    but when the process stops running, the jail won’t shut itself down.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以设置`persist`选项来代替`exec.start`。这告诉FreeBSD，即使监狱内没有任何进程运行，监狱也可以存在。包括`persist`和`exec.start`意味着FreeBSD会为监狱启动一个进程，但当进程停止运行时，监狱不会自行关闭。
- en: You can tell the jail to run an additional command after it starts with the
    `exec.poststart` option. Any command or script listed with `exec.poststart` gets
    run in the host once the normal */etc/rc* startup process (including any enabled
    packages) finishes. This lets you write scripts to glue jails together.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以告诉监狱在启动后使用`exec.poststart`选项运行一个额外的命令。任何通过`exec.poststart`列出的命令或脚本，在正常的*/etc/rc*
    启动过程（包括所有启用的包）完成后会在主机中运行。这让你可以编写脚本将监狱连接起来。
- en: Similarly, you can use the `exec.prestop` option to run a command on the host
    before stopping the jail. When the sysadmin turns the jail off, the host first
    runs this command, and then the jail runs the normal shutdown command.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，你可以使用`exec.prestop`选项在停止监狱之前在主机上运行一个命令。当系统管理员关闭监狱时，主机会首先运行此命令，然后监狱会执行正常的关闭命令。
- en: The `exec.stop` command tells FreeBSD what command to run inside the jail to
    shut the jail down. If you’re simulating a full jail, you’ll probably run `/``bin/sh
    /etc/rc.shutdown` as in our example in the previous section.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`exec.stop`命令告诉FreeBSD在监狱中运行哪个命令来关闭监狱。如果你在模拟一个完整的监狱，你可能会像我们在上一节中的示例一样运行`/``bin/sh
    /etc/rc.shutdown`。'
- en: '**Jail Defaults**'
  id: totrans-108
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**监狱默认设置**'
- en: You’ll find that many of your jails share common settings. You can define those
    settings in the front of the configuration. All jails will use those settings
    unless you override them. This doesn’t seem to make much sense when using a single
    jail.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现许多监狱共享公共设置。你可以在配置的前面定义这些设置。除非你覆盖它们，否则所有监狱都会使用这些设置。当只使用一个监狱时，这似乎没有太多意义。
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Given this configuration, though, adding another jail becomes five lines including
    the braces.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，考虑到这个配置，添加另一个监狱将需要五行代码，包括大括号。
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Over dozens of jails, it saves a lot of trouble.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在数十个监狱的情况下，这可以节省很多麻烦。
- en: You can override the defaults within a jail’s definition. If I don’t want to
    mount devfs(5) in a jail, I would set `mount.nodevfs` for that specific jail.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在监狱的定义中覆盖默认设置。如果我不想在监狱中挂载devfs(5)，我会为该特定监狱设置`mount.nodevfs`。
- en: '**jail.conf Variables**'
  id: totrans-115
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**jail.conf变量**'
- en: You can use variable substitutions in jails. While you can define some of these
    variables, you can also pull some from the jail’s settings. Variables are expanded
    in double quotes and in unquoted strings, but not in single-quoted strings.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在监狱中使用变量替换。虽然你可以定义一些这些变量，但你也可以从监狱的设置中提取一些变量。变量可以在双引号和未加引号的字符串中展开，但不能在单引号字符串中展开。
- en: 'Here, I define a variable for the directory that contains all of my jails and
    use that inside my jail definition:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我定义了一个变量来指向包含我所有监狱的目录，并在我的监狱定义中使用它：
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If I must move my jails to a new filesystem or pool, I can update *jail.conf*
    by changing the one variable rather than editing every definition.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我必须将我的监狱迁移到一个新的文件系统或池中，我可以通过更改一个变量来更新*jail.conf*，而不是编辑每个定义。
- en: '**Parameters as Variables**'
  id: totrans-120
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**作为变量的参数**'
- en: Once you define a jail parameter, you can use it as a variable. Every jail has
    at least one parameter, `name`. You can use these parameters to further expand
    default settings.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了监狱参数，你就可以将其用作变量。每个监狱至少有一个参数，`name`。你可以使用这些参数进一步扩展默认设置。
- en: '[PRE20]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: By setting the global default `path` to `$j/$name`, I’ve removed the need to
    define path for each individual jail.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将全局默认`path`设置为`$j/$name`，我去除了为每个单独的监狱定义路径的需求。
- en: You can use multiterm parameters with a period in them by enclosing the parameter
    in braces. While this doesn’t make sense for parameters like `mount.devfs`, it’s
    useful for per-jail parameters, like `host.hostname`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将参数括在大括号中来使用带有句点的多参数。虽然对于像`mount.devfs`这样的参数没有太大意义，但对于每个监狱（jail）参数来说，这是有用的，比如`host.hostname`。
- en: '[PRE21]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: I prefer to put my jails in directories named after the shorter name, rather
    than the hostname, but feel free to indulge your own biases.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我更喜欢将监狱放在以较短名称命名的目录中，而不是以主机名命名，但可以随意根据自己的偏好调整。
- en: Combining parameters and variables with a coherent directory layout lets you
    squeeze each jail definition down into a single configuration statement.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 将参数和变量与一致的目录布局结合，可以将每个监狱定义压缩成一个配置语句。
- en: '***Testing and Configuring a Jail***'
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***测试和配置监狱***'
- en: 'Once you have files for a jail, lock yourself in. Run the jail(8) command to
    run a single command inside the jail. You’ll need four arguments: the path, the
    jail name, the primary IP, and the command to run.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了监狱的文件，就将自己锁进监狱。运行 jail(8) 命令在监狱内运行单个命令。你需要四个参数：路径、监狱名称、主IP和要运行的命令。
- en: '[PRE22]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here, I use the jail in */jail/mariadb*, named *mariadb*, with the IP address
    203.0.113.51, to run the command */bin/sh*:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我使用位于*/jail/mariadb*中的名为*mariadb*的监狱，IP 地址为203.0.113.51，来运行命令*/bin/sh*：
- en: '[PRE23]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Run ls(1). You’re in the root directory of your jail filesystem. This jail isn’t
    quite in single-user mode, but no programs other than */bin/sh* are running here.
    You can do some basic setup, but not even devfs(5) is mounted.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 ls(1)。你现在在监狱文件系统的根目录中。这个监狱还不是完全的单用户模式，但除了*/bin/sh*之外没有其他程序在这里运行。你可以进行一些基本设置，但连
    devfs(5) 都没有挂载。
- en: '[PRE24]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Yes, the normal jail startup process would mount */dev*—but the jail has no
    user accounts, no root password, no daemons running, and absolutely nothing optional.
    Configure the jail before starting it.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，正常的监狱启动过程会挂载*/dev*，但是监狱没有用户账户，没有根密码，没有守护进程运行，绝对没有任何可选项。在启动之前配置监狱。
- en: '**Stuff to Steal from the Host**'
  id: totrans-136
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**从宿主机窃取的东西**'
- en: Some host setup information is also useful within the jail. You can copy this
    information from the host to the jail, but you must do this from the host, not
    the jail.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 一些宿主机的设置信息在监狱内也很有用。你可以将这些信息从宿主机复制到监狱中，但必须从宿主机进行，而不是从监狱内进行。
- en: Each jail performs its own DNS resolution. You can probably copy the host’s
    */etc/resolv.conf* into the jail.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 每个监狱都执行自己的DNS解析。你可能可以将宿主机的*/etc/resolv.conf*复制到监狱中。
- en: Your jail probably shares the same time zone as the host. Copy the host’s */etc/localtime*
    into the jail or run tzsetup(8) inside the jail to select a new time zone.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你的监狱可能与宿主机共享相同的时区。将宿主机的*/etc/localtime*复制到监狱中，或者在监狱内运行tzsetup(8)来选择一个新的时区。
- en: '**Create /etc/fstab**'
  id: totrans-140
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**创建 /etc/fstab**'
- en: Many programs and scripts, including */etc/rc*, expect to find */etc/fstab*
    and have a tantrum if it’s not there. Requiring */etc/fstab* is perfectly sensible
    in a real server, but a jailed machine has no need for a filesystem table. Create
    an empty filesystem table.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 许多程序和脚本，包括*/etc/rc*，期望找到*/etc/fstab*，如果找不到它们会发火。要求*/etc/fstab*在真实服务器中是非常合理的，但监狱中的机器不需要文件系统表。创建一个空的文件系统表。
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: I don’t mind unhappy programs. I just don’t want to listen to them whinge.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我不介意不高兴的程序。我只是不想听它们抱怨。
- en: '**Create /etc/rc.conf**'
  id: totrans-144
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**创建 /etc/rc.conf**'
- en: Either you’ll do all jail management from the host, or you’ll manage jails via
    SSH. You’ll need an */etc/rc.conf* entry for sshd.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择从宿主机管理所有监狱，或者通过 SSH 来管理监狱。你将需要在*/etc/rc.conf*中为sshd添加条目。
- en: '[PRE26]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Add any other settings you want while creating this file. If you know some of
    the settings packages will need, it won’t hurt to set them before they’re needed.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建这个文件时，添加你想要的其他设置。如果你知道某些设置是包所需要的，在它们被需要之前进行设置也不会有坏处。
- en: '**User Accounts and Root Password**'
  id: totrans-148
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**用户账户和根密码**'
- en: You can add user accounts and change passwords only from within the jail. Set
    a root password with passwd(1) and run adduser(8) to add at least one user, for
    SSH. While SSH is not the only way to access the host, it’s far easier in most
    cases.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你只能在监狱内添加用户账户和更改密码。使用passwd(1)设置root密码，并运行adduser(8)至少添加一个用户，供SSH使用。虽然SSH不是访问主机的唯一方式，但在大多数情况下，它更为简便。
- en: '***Jail Startup and Shutdown***'
  id: totrans-150
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***监狱启动和关闭***'
- en: The host considers each jail an independent service, much like sshd(8), a web
    server, or any other daemon. Yes, each jail might run a whole bunch of services
    that need managing independently, but from the host’s perspective, each jail is
    a single entity containing a group of processes. That’s part of the separation
    between the host and the jail.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 主机将每个监狱视为一个独立的服务，就像sshd(8)、Web服务器或任何其他守护进程一样。是的，每个监狱可能会运行一堆需要独立管理的服务，但从主机的角度来看，每个监狱都是一个包含一组进程的单一实体。这是主机和监狱之间分离的一部分。
- en: Use service(8) to start, stop, and restart jails. You’ll need to provide one
    additional argument, the name of the jail. FreeBSD automatically starts them at
    boot, but you can stop, start, and restart them individually once the system is
    running. Let’s shut down my database jail and fire it up again.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 使用service(8)命令启动、停止和重启监狱。你需要提供一个额外的参数，即监狱的名称。FreeBSD会在启动时自动启动监狱，但在系统运行后，你可以单独停止、启动和重启它们。让我们关闭我的数据库监狱并重新启动它。
- en: '[PRE27]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: I could use the restart command, but that wouldn’t look nearly so impressive
    here on the page.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以使用重启命令，但在页面上显示效果远没有这么震撼。
- en: If you omit the jail name, the service(8) command affects all jails that FreeBSD
    starts at boot.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果省略监狱名称，service(8)命令将影响FreeBSD在启动时启动的所有监狱。
- en: '[PRE28]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This lets you coherently reinitialize your production jail infrastructure.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这让你能够有条理地重新初始化你的生产监狱基础设施。
- en: FreeBSD defaults to starting all jails listed in */etc/jail.conf*. As discussed
    in “[Jails at Boot](ch22.xhtml#lev1031)” on [page 568](ch22.xhtml#page_568), you
    can change that in */etc/rc.conf*. The service(8) command can control jails that
    aren’t autostarted, but you must specify them by name.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD默认启动*/etc/jail.conf*中列出的所有监狱。如在“[启动时的监狱](ch22.xhtml#lev1031)”中讨论的那样，[第568页](ch22.xhtml#page_568)，你可以在*/etc/rc.conf*中更改此设置。service(8)命令可以控制那些未自动启动的监狱，但必须通过名称指定它们。
- en: '***Jail Dependencies***'
  id: totrans-159
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***监狱依赖关系***'
- en: If you have a whole bunch of jails, listing the start order in */etc/rc.conf*
    can get tedious. You’ll most often need to set a start order to maintain service
    dependencies. Rather than defining the order in *rc.conf*, though, you can tell
    a jail that it requires another jail with the `depend` option.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有很多监狱，列出*/etc/rc.conf*中的启动顺序可能会变得繁琐。你通常需要设置启动顺序以保持服务依赖关系。然而，你可以告诉某个监狱它依赖于另一个监狱，使用`depend`选项，而不是在*rc.conf*中定义顺序。
- en: '[PRE29]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The jail httpd won’t start until the jail mariadb is running. A `depend` statement
    overrides a *rc.conf* `jail_list` entry.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 监狱httpd不会启动，直到监狱mariadb运行。`depend`语句会覆盖*rc.conf*中的`jail_list`条目。
- en: '**Managing Jails**'
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**管理监狱**'
- en: Virtualization doesn’t make system administration tasks evaporate; it only adds
    options for performing typical sysadmin tasks. Here’s some of those options.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化并不会使系统管理任务消失；它只是为执行典型的系统管理员任务提供了更多的选择。以下是一些这些选择。
- en: '***Viewing Jails and Jail IDs***'
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***查看监狱和监狱ID***'
- en: Use jls(8) to see all jails currently running on the system.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 使用jls(8)命令查看当前系统上运行的所有监狱。
- en: '[PRE30]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Each jail has a unique jail ID, or JID. The JID is much like a process ID; while
    each jail has one, the exact JID issued to a jail changes each time the jail is
    started. We’ll use the jail ID or name to execute various jail-management tasks.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 每个监狱都有一个唯一的监狱ID，或JID。JID就像进程ID；每个监狱都有一个，但每次启动监狱时，分配给监狱的确切JID会有所不同。我们将使用监狱ID或名称来执行各种监狱管理任务。
- en: We also get each jail’s IP address, hostname, and the path to the jail’s files.
    You don’t get the jail name, but those of us who use a hostname based on the jail
    name have no trouble figuring it out.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还会获取每个监狱的IP地址、主机名以及监狱文件的路径。你不会得到监狱名称，但那些使用基于监狱名称的主机名的人不会有问题弄清楚。
- en: '***Jailed Processes***'
  id: totrans-170
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***监狱进程***'
- en: Jailed processes all get a process ID, like any other Unix process. Process
    IDs are not unique to jails; they’re shared between the host, the jail, and all
    the other jails. You won’t find repeated process IDs.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 所有被限制在监狱中的进程都会获得一个进程ID，就像其他Unix进程一样。进程ID并不是监狱专有的，它们在主机、监狱和所有其他监狱之间共享。你不会看到重复的进程ID。
- en: Jailed processes show up in ps(1) with the `-J` flag.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 被限制在监狱中的进程会在ps(1)中显示，使用`-J`标志。
- en: '[PRE31]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Process IDs 35002 and 35129 are jailed.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 进程ID 35002 和 35129 被限制在监狱中。
- en: View a particular jail’s processes with ps(1) using the `-J` flag and the jail
    name.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-J`标志和监狱名称，通过ps(1)查看特定监狱的进程。
- en: '[PRE32]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Using `-J 0` excludes all jailed processes from ps(1) output, letting you more
    easily debug the host.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-J 0`会排除所有被监禁的进程，让你更容易调试主机。
- en: Commands like pgrep(1), pkill(1), and killall(1) all accept a `-j` argument
    to let you specify a jail. If you prefer using pgrep(1) to view process information,
    use `pgrep -lfj` and the jail name or JID.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 像pgrep(1)、pkill(1)和killall(1)这样的命令都接受一个`-j`参数，让你可以指定一个监狱。如果你喜欢使用pgrep(1)查看进程信息，可以使用`pgrep
    -lfj`以及监狱名称或JID。
- en: '[PRE33]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Why is Sendmail running inside this jail? Let’s kill it.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么Sendmail在这个监狱内运行？让我们把它杀掉。
- en: '[PRE34]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Running pgrep again shows that Sendmail is dead.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行pgrep显示Sendmail已经死掉了。
- en: This works well if you want to get information about which processes are running
    in a jail, but sometimes you have a process ID and must identify which jail it
    belongs to. That’s where you need the `-O` option to ps(1). This option supports
    a bunch of keywords that adjust the output of ps(1) in ways not supported by the
    regular command line flags—specifically, `-O jail` adds a column for the name
    of the jail the process is running in.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想获取监狱中运行的进程信息，这个方法效果很好，但有时候你只有进程ID，必须确定它属于哪个监狱。此时，你需要ps(1)的`-O`选项。这个选项支持一系列关键字，可以调整ps(1)的输出方式，这是常规命令行标志无法做到的——具体来说，`-O
    jail`会增加一个列，显示进程所在的监狱名称。
- en: '[PRE35]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This process is running inside the jail mariadb.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这个进程正在监狱mariadb内运行。
- en: '***Running Commands in Jails***'
  id: totrans-186
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***在监狱中运行命令***'
- en: The jexec(8) command lets the jail host administrator execute commands within
    a jail without going to the trouble of logging into the jail. This helps preserve
    the jail owner’s sense of privacy.^([2](footnote.xhtml#ch22fn2)) When jail owner
    Bert calls to beg for help, I don’t need his root password or even an account
    on his system. Using jexec requires knowing the jail’s name or JID. Here, I use
    the host’s root account to run `ps -ax` inside my jail mariadb.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: jexec(8)命令允许监狱主机管理员在不需要登录到监狱的情况下执行监狱内的命令。这有助于保持监狱所有者的隐私感。^([2](footnote.xhtml#ch22fn2))
    当监狱所有者Bert打电话求助时，我不需要他的root密码，甚至不需要在他的系统上有一个账户。使用jexec需要知道监狱的名称或JID。在这里，我使用主机的root账户在我的监狱mariadb内运行`ps
    -ax`。
- en: '[PRE36]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This command runs as root inside the jail. I might want to run the command as
    another jailed user, though. Give that username with the `-U` flag.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令作为root在监狱内运行。不过，我可能希望作为另一个被监禁的用户来运行这个命令。使用`-U`标志指定那个用户名。
- en: '[PRE37]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Well, that’s not good. I’m expecting Bert to run my database. Let’s make him
    a user account.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这可不太好。我期望Bert来运行我的数据库。让我们给他创建一个用户账户。
- en: '[PRE38]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This jail now has an account for Bert, using his preferred username and everything.
    I’ve added it to the wheel group within the jail. Remember, root access within
    a jail doesn’t equal root access on the host. That’s the whole point of jails.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这个监狱现在有一个Bert的账户，使用他喜欢的用户名和所有设置。我已经将它添加到监狱内的wheel组中。记住，监狱内的root访问权限并不等同于主机上的root访问权限。这就是监狱的全部意义所在。
- en: I can now run commands as that user in that jail.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在可以作为那个用户在那个监狱中运行命令了。
- en: '[PRE39]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: I’m locked up in jail! Specifically, in Bert’s jail cell.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我被锁在监狱里了！具体来说，是在Bert的监狱牢房里。
- en: This jailed process will behave a little oddly, though. A process retains its
    environment. In this case, while I’m running as the user xistence, I retain all
    the environment settings I had in my nonjailed process. This includes stuff like
    $SSH_AUTH_SOCK, my IRC server setting, and more. I don’t want this stuff in my
    jailed environment. If I’m logged in as Bert, I want to *be* Bert.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个被监禁的进程可能会表现得有点奇怪。一个进程会保留它的环境。在这种情况下，虽然我作为用户xistence在运行，但我保留了在非监禁进程中所有的环境设置。这包括$SSH_AUTH_SOCK、我的IRC服务器设置等。我不希望这些东西出现在我的监狱环境中。如果我以Bert的身份登录，我希望*就是*Bert。
- en: To strip your environment before entering a jail, use jexec’s `-l` flag. This
    simulates a clean login.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要在进入监狱之前清空你的环境，请使用jexec的`-l`标志。这会模拟一个干净的登录。
- en: '[PRE40]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Should you always strip your environment before running a command in a jail?
    No, not always. It depends entirely on what you’re doing.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在监狱中运行命令时，是否总是需要清空环境？不，并不是总是如此。这完全取决于你在做什么。
- en: Many commands include support for running them on the host but targeting a jail.
    Always check the man page for such an option. One good example is sysrc(8), which
    lets you specify a jail with `-j`. Here, I enable MariaDB on the jail mariadb.
    MariaDB has chosen to continue to use MySQL naming conventions, so it’s enabled
    with the *rc.conf* option `mysql_enable`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 许多命令支持在主机上运行，但可以指定目标为监狱。请始终检查手册页以了解是否有此类选项。一个好的例子是sysrc(8)，它允许你通过`-j`指定监狱。在这里，我在监狱mariadb上启用MariaDB。MariaDB选择继续使用MySQL命名惯例，因此通过*rc.conf*选项`mysql_enable`启用它。
- en: '[PRE41]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This jail is now ready to run MariaDB.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这个监狱现在已准备好运行MariaDB。
- en: Except for the bit where MariaDB isn’t installed, of course. Let’s take care
    of that next.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，除了MariaDB未安装的那部分。接下来我们来处理这个问题。
- en: '***Installing Jail Packages***'
  id: totrans-205
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***安装监狱软件包***'
- en: FreeBSD’s package tools let you manage software either from within the jail
    or from the host. If the host administrator has allocated you a jail to configure,
    you probably want to manage packages from the jail. Jail packages work exactly
    as packages on any other FreeBSD host, as discussed in [Chapter 15](ch15.xhtml#ch15).
    If you’re responsible for the whole system, including the host and all the jails
    on that host, you probably want to manage each jail’s packages from the host rather
    than logging into each jail. Let’s spend some time on that.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD的包管理工具让你可以从监狱内或从主机上管理软件包。如果主机管理员为你分配了一个监狱来配置，你可能希望从监狱中管理软件包。监狱软件包的工作方式与任何其他FreeBSD主机上的软件包完全相同，如[第15章](ch15.xhtml#ch15)所述。如果你负责整个系统，包括主机和主机上的所有监狱，你可能希望从主机而不是登录到每个监狱来管理每个监狱的软件包。我们来花些时间讲解这个。
- en: 'The pkg(8) command’s `-j` flag lets you specify a jail to manage. You’ll need
    one argument, the jail’s name or JID. The `-j` flag must be given before the pkg(8)
    subcommand. Here, I install the MariaDB server on its dedicated jail:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: pkg(8)命令的`-j`标志允许你指定一个监狱进行管理。你需要一个参数，即监狱的名称或JID。`-j`标志必须在pkg(8)子命令之前给出。在这里，我在专用的监狱上安装MariaDB服务器：
- en: '[PRE42]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Note that pkg(8) offers no notice that it’s installing packages within a jail.
    It assumes that if you’re using `-j`, you know you’re working in a jail.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，pkg(8)不会提示你正在监狱中安装软件包。它假设如果你使用`-j`，你就知道自己在监狱中工作。
- en: When you manage a jail’s packages from the host, the package tools don’t get
    installed on the jail. The jail has its own package database, stored within the
    jail, but the jail has no way to use that database directly.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从主机管理监狱的软件包时，包管理工具不会在监狱中安装。监狱有自己的软件包数据库，存储在监狱内，但监狱没有直接使用该数据库的方式。
- en: Don’t switch between managing packages on the host and from within the jail.
    Choose one method and stick with it.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 不要在主机和监狱内部之间切换包管理方式。选择一种方法并坚持使用。
- en: '***Updating Jails***'
  id: totrans-212
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***更新监狱***'
- en: So you have umpteen bajillion jails on your host, each dedicated to performing
    its own task in perfect isolation. That’s grand, until you have to apply security
    patches to all of the hosts. If you’ve built your FreeBSD from source, you’ll
    need to install a new world in each jail. If you’re running releases, though,
    freebsd-update(8) (see [Chapter 18](ch18.xhtml#ch18)) can handle jails.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你在主机上有无数个监狱，每个监狱都专门执行自己的任务并与其他监狱完全隔离。那很棒，直到你需要为所有监狱应用安全补丁。如果你是从源代码构建FreeBSD的，你需要在每个监狱中安装新的世界。但如果你运行的是发行版，freebsd-update(8)（参见[第18章](ch18.xhtml#ch18)）可以处理监狱。
- en: You can’t use freebsd-update(8) *inside* a jail. The same things that isolate
    a jail from compromising the host system disallow some of the functionality freebsd-update(8)
    needs. Instead, you update the jail from the host.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能在监狱内使用freebsd-update(8)。隔离监狱以防止危及主机系统的同样机制也会禁止freebsd-update(8)所需的部分功能。相反，你需要从主机更新监狱。
- en: Any time you need to update your system, update your host before updating your
    jails. The host must be running a version of FreeBSD equal to or newer than any
    jail.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你需要更新系统时，先更新主机，再更新监狱。主机必须运行与任何监狱版本相同或更新的FreeBSD版本。
- en: 'Start by copying */etc/freebsd-update.conf* to an alternate file, such as */etc/jail-freebsd-update.conf*.
    Remove all components that aren’t installed on the jail. Jails don’t have kernels,
    and most of them don’t have source code, so you’ll probably wind up with an entry
    like this:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将*/etc/freebsd-update.conf*复制到另一个文件中，例如*/etc/jail-freebsd-update.conf*。删除所有在监狱中未安装的组件。监狱没有内核，大多数监狱也没有源代码，所以你可能最终会得到如下条目：
- en: '[PRE43]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: When you run freebsd-update(8), it checks the version of FreeBSD you’re running
    on. It does this by querying the kernel. If you have FreeBSD 12.0 jails on a FreeBSD
    13.0 system, the update program gets confused, chokes, and dies with mysterious
    errors. You need freebsd-update to use the release installed in the jail, not
    the version the host is running. Use the `--currently-running` option to tell
    freebsd-update(8) what version the jail is running. You must use the jail’s release,
    including the patch level. While you could easily enough extract that information
    from the jail, I encourage you to let freebsd-update ask the jail what version
    it’s currently running. Do this by using jexec(8) to query the version of FreeBSD
    running in the jail.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行 freebsd-update(8) 时，它会检查你正在运行的 FreeBSD 版本。它通过查询内核来实现。如果你在 FreeBSD 13.0
    系统上有 FreeBSD 12.0 的监狱，更新程序就会混淆，卡住并产生神秘错误。你需要 freebsd-update 使用监狱中安装的版本，而不是主机上运行的版本。使用
    `--currently-running` 选项告诉 freebsd-update(8) 监狱当前运行的版本。你必须使用监狱的发布版本，包括补丁级别。虽然你可以轻松地从监狱中提取这些信息，但我鼓励你让
    freebsd-update 询问监狱当前运行的版本。通过使用 jexec(8) 查询监狱中运行的 FreeBSD 版本来实现。
- en: You’ll also use the `-b` flag to tell freebsd-update(8) the directory the jail
    lives in.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 `-b` 标志告诉 freebsd-update(8) 监狱所在的目录。
- en: Here, I update the jail called *test*. The jail’s files are in */jail/test*.
    I use a jexec(8) command in backticks to check the current FreeBSD version.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我更新名为 *test* 的监狱。监狱的文件位于 */jail/test*。我使用反引号中的 jexec(8) 命令检查当前的 FreeBSD
    版本。
- en: '[PRE44]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Once freebsd-update finishes running, restart your jail. It’s upgraded.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 freebsd-update 运行完成，重新启动你的监狱。它已经升级。
- en: Many people have written scripts to run through */etc/jail.conf* and upgrade
    all of their jails. If you have more than a couple jails, you find or write such
    a script.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 很多人编写了脚本来遍历 */etc/jail.conf* 并升级所有监狱。如果你有多个监狱，最好找到或编写这样的脚本。
- en: '**More Jail Options**'
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**更多监狱选项**'
- en: You can customize jails in all sorts of ways. The jail(8) man page includes
    the current list of jail options, but here’s a few features I commonly use.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以以各种方式自定义监狱。jail(8) 手册页包括了当前的监狱选项列表，但这里是我常用的一些功能。
- en: Rather than letting jail(8) assign jail IDs, you can assign each jail a permanent
    ID with the `jid` option.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 与其让 jail(8) 分配监狱 ID，你可以使用 `jid` 选项为每个监狱分配一个永久的 ID。
- en: '[PRE45]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The `securelevel` option lets you raise the securelevel (see [Chapter 9](ch09.xhtml#ch09))
    within a jail. The jail’s securelevel can never be lower than that of the host.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`securelevel` 选项允许你在监狱中提高安全级别（参见 [第9章](ch09.xhtml#ch09)）。监狱的安全级别永远不能低于主机的安全级别。'
- en: You can view a jail’s startup messages by manually running a */etc/rc* with
    a jail command. That’s inconvenient for routine troubleshooting, though. Direct
    the jail’s console messages to a file with the `exec.consolelog` option.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过手动运行 */etc/rc* 和监狱命令来查看监狱的启动信息。不过，这对于日常故障排除来说不太方便。使用 `exec.consolelog`
    选项将监狱的控制台消息定向到一个文件。
- en: '[PRE46]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: In addition to mounting */dev*, a jail can have its own fdescfs(5) and procfs(5)
    with the `mount.fdescfs` and `mount.procfs` options.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 除了挂载 */dev*，监狱还可以通过 `mount.fdescfs` 和 `mount.procfs` 选项拥有自己的 fdescfs(5) 和 procfs(5)。
- en: '**Jailing Ancient FreeBSD**'
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**监狱中的古老 FreeBSD**'
- en: 'In my experience, the phrase *enterprise network* is synonymous with “we have
    lots of ancient stuff that nobody dares touch.” Jails can help you cope with some
    of these systems. In 2014, I worked at a company that ran a critical custom-built
    PHP and MySQL application on FreeBSD 4.10\. I don’t know when this server was
    installed, but FreeBSD 4.11 came out in January 2005, so: before then. This application
    used ancient versions of Perl, PHP, OpenSSL, and more.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，*企业网络* 这个词意味着“我们有很多没人敢动的古老设备”。监狱可以帮助你应对这些系统。2014 年，我曾在一家公司工作，运行着一个在 FreeBSD
    4.10 上的关键自定义 PHP 和 MySQL 应用程序。我不知道这台服务器是什么时候安装的，但 FreeBSD 4.11 于 2005 年 1 月发布，所以应该是在那之前。这个应用程序使用了过时的
    Perl、PHP、OpenSSL 版本等。
- en: Worse, this application lived on a repurposed desktop machine. With a standard-issue,
    high-quality desktop hard drive. I hid a spare desktop machine of the same vintage
    under my desk, just so I had a hope of getting FreeBSD 4.10 onto it. The most
    proper solution was to rewrite or replace this application. Several sysadmins
    had faced that task—and failed. I decided to virtualize it. FreeBSD 4.10 doesn’t
    run well on VMWare—yes, you can find de(4) and fxp(4) drivers, but they’re for
    versions of those cards over a decade old. Here’s how I got this ancient FreeBSD
    system into a jail.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是，这个应用程序运行在一台重新利用的桌面机器上，配有一块标准的高质量桌面硬盘。我把一台同年代的备用桌面机器藏在我的桌子下，这样我才有希望将 FreeBSD
    4.10 安装到它上面。最合适的解决方案是重写或替换这个应用程序。几个系统管理员曾面对这个任务——并失败了。我决定将其虚拟化。FreeBSD 4.10 在
    VMWare 上运行不太好——是的，你可以找到 de(4) 和 fxp(4) 驱动程序，但它们只适用于十多年前版本的这些卡。以下是我如何将这个古老的 FreeBSD
    系统放入监狱的方法。
- en: Drop to single-user mode. Unmount */proc*—yes, FreeBSD 4 still used */proc*.
    Those were the days. Tar up the entire filesystem, including temporary directories,
    like */usr/obj*, */usr/ports*, */var/tmp*, and suchforth. By modern standards,
    they won’t use much space at all, and you have no way to know what files you might
    need later. You can probably find an old PHP 5.0.whatever tarball out on the internet,
    but that would involve work.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到单用户模式。卸载 */proc*——是的，FreeBSD 4 仍然使用 */proc*。那是个好日子。将整个文件系统打包，包括临时目录，如 */usr/obj*、*/usr/ports*、*/var/tmp*
    等。按照现代标准，它们占用的空间几乎为零，而且你也无法知道哪些文件以后可能会用到。你或许能在网上找到一个旧的 PHP 5.0.whatever 的 tar
    包，但那将需要一些工作。
- en: Copy the tar file to your jail host and extract it in your jail directory.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 将 tar 文件复制到你的监狱主机，并在你的监狱目录中解压它。
- en: '[PRE47]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Be sure to use the `-p` flag to preserve permissions.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要使用 `-p` 标志来保留权限。
- en: Now look at */etc/rc.conf*. The jail host will handle all networking functions,
    so turn off any statements that set IP addresses or set routes. Get rid of daemons
    that provide services the jail host offers, such as time, packet filters, and
    SSH. Your jailed host needs only the functions that directly support the application.
    In this case, I needed Apache and MySQL.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在查看 */etc/rc.conf*。监狱主机将处理所有网络功能，所以关闭任何设置 IP 地址或设置路由的语句。移除提供监狱主机所提供服务的守护进程，如时间、数据包过滤器和
    SSH。你的监狱主机只需要直接支持应用程序的功能。在这个例子中，我只需要 Apache 和 MySQL。
- en: Consider the jail’s */etc/fstab*. Do you need a NFS filesystem or some other
    special mount? Remove everything you don’t need. If this application needs */proc*,
    provide it with the jail option `mount.procfs`.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑监狱的 */etc/fstab*。你需要 NFS 文件系统或其他特殊挂载吗？移除所有不需要的内容。如果这个应用程序需要 */proc*，则为它提供监狱选项
    `mount.procfs`。
- en: Remove the old */dev*. You can’t use FreeBSD 4 device nodes on a modern FreeBSD.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 移除旧的 */dev*。你不能在现代的 FreeBSD 上使用 FreeBSD 4 的设备节点。
- en: Configure the host to protect the jail. While people can write perfectly fine
    applications in Apache and PHP, not even the most ardent Apache and MySQL fan
    would encourage you to expose 15-year-old versions of these servers to the internet.
    Use the host’s packet filter to protect the jail. Don’t even consider using the
    migrated host’s OpenSSH server.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 配置主机以保护监狱。虽然人们可以在 Apache 和 PHP 中编写完全正常的应用程序，但即便是最忠实的 Apache 和 MySQL 粉丝也不会鼓励你将这些
    15 年前版本的服务器暴露到互联网上。使用主机的包过滤器来保护监狱。甚至不要考虑使用迁移主机的 OpenSSH 服务器。
- en: You won’t be able to use some FreeBSD 4 commands inside the jail, as the interfaces
    have diverged too far. A FreeBSD 4 ps(1) can’t successfully query a modern FreeBSD
    kernel. You can copy statically linked versions of most of those programs from
    the host’s */rescue* and copy them into the jail, however.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 你将无法在监狱中使用某些 FreeBSD 4 命令，因为接口已发生了很大的变化。FreeBSD 4 的 ps(1) 无法成功查询现代 FreeBSD 内核。然而，你可以从主机的
    */rescue* 目录中复制大多数这些程序的静态链接版本，并将它们复制到监狱中。
- en: Is it this simple? No, not really. The older the source system is, the more
    problems you’ll have. Most of the problems I had in this particular migration
    meant changing a configuration file to account for the new underlying filesystem.
    You’ll need to perform your usual sysadmin debugging. But it’s one way to get
    a modern network interface on a system lacking a device driver for it, and it’s
    the only way to get ZFS on a FreeBSD 4 system.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就简单吗？不，实际上并不简单。源系统越旧，遇到的问题就越多。我在这次迁移中遇到的大多数问题都意味着需要更改一个配置文件，以适应新的底层文件系统。你需要进行通常的系统管理员调试。但这是将现代网络接口应用到没有设备驱动的系统上的一种方法，也是唯一一种在
    FreeBSD 4 系统上安装 ZFS 的方式。
- en: '**Last Jail Notes**'
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**最后的监狱笔记**'
- en: People have evolved many ways of using jails. Fully covering all of these features
    would pretty much require a book of its own, but here are some pointers.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 人们已经发展出许多使用监狱的方法。要完全覆盖所有这些功能几乎需要一本书，但这里有一些提示。
- en: You can use ZFS features to delegate a dataset entirely to the jail administrator
    so that jail owners can take their own snapshots and create their own child datasets.
    With the VIMAGE kernel option, you can give a jail its own routing table. If you’re
    brave, nullfs(5) lets you recycle an operating system install and minimize disk
    utilization. You can establish per-jail resource limits with the RCTL kernel option.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 ZFS 特性将数据集完全委派给监狱管理员，以便监狱所有者可以自己创建快照并创建子数据集。通过 VIMAGE 内核选项，你可以为监狱分配独立的路由表。如果你够大胆，nullfs(5)
    允许你回收操作系统安装并最小化磁盘利用率。你还可以使用 RCTL 内核选项为每个监狱设定资源限制。
- en: If you have many jails, you might prefer using a jail management program, such
    as iocage or ezjail. Both are available in the Ports Collection.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有很多监狱，可能会更倾向于使用监狱管理程序，如 iocage 或 ezjail。两者都可以在 Ports Collection 中找到。
- en: Successfully using jails requires automating your maintenance. Each jail requires
    separate security patches, both for the userland and for installed packages. The
    more you can automate this process, the more likely it is that you’ll actually
    perform such maintenance. I recommend using Ansible’s jail modules or at least
    writing your own shell script to apply patches.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 成功使用监狱要求自动化你的维护工作。每个监狱都需要单独的安全补丁，包括用户空间和已安装的软件包。你能自动化这个过程的程度越高，你就越有可能真正进行这种维护。我推荐使用
    Ansible 的监狱模块，或者至少编写你自己的 shell 脚本来应用补丁。
- en: The jail(8) command will let you modify, create, and destroy jails without a
    command line. If you’re doing extensive jail work, definitely read the man page.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: jail(8) 命令可以让你无需命令行即可修改、创建和销毁监狱。如果你进行大量监狱工作，务必阅读手册页。
- en: Now let’s look at some of FreeBSD’s less well-known corners.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看一些 FreeBSD 不太为人知的方面。
