- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In a relatively short period of time, Android has become the world’s most popular
    mobile platform. Although originally designed for smartphones, it now powers tablets,
    TVs, and wearable devices, and will soon even be found in cars. Android is being
    developed at a breathtaking pace, with an average of two major releases per year.
    Each new release brings a better UI, performance improvements, and a host of new
    user-facing features which are typically blogged about and dissected in excruciating
    detail by Android enthusiasts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在相对较短的时间内，安卓已成为全球最受欢迎的移动平台。尽管最初是为智能手机设计的，但现在它已经支持平板电脑、电视、可穿戴设备，甚至很快会出现在汽车中。安卓正在以惊人的速度发展，每年平均发布两次重大版本。每一个新版本都会带来更好的用户界面、性能改进和一系列新的面向用户的功能，这些通常会被安卓爱好者们在博客中详细解读。
- en: One aspect of the Android platform that has seen major improvements over the
    last few years, but which has received little public attention, is security. Over
    the years, Android has become more resistant to common exploit techniques (such
    as buffer overflows), its application isolation (sandboxing) has been reinforced,
    and its attack surface has been considerably reduced by aggressively decreasing
    the number of system processes that run as root. In addition to these exploit
    mitigations, recent versions of Android have introduced major new security features
    such as restricted user support, full-disk encryption, hardware-backed credential
    storage, and support for centralized device management and provisioning. Even
    more enterprise-oriented features and security improvements such as managed profile
    support, improved full-disk encryption, and support for biometric authentication
    have been announced for the next Android release (referred to as *Android L* as
    I write this).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年里，安卓平台在一个方面取得了显著的改进，尽管这个方面鲜少受到公众关注，那就是安全性。多年来，安卓变得更加抵抗常见的攻击技术（如缓冲区溢出），其应用程序隔离（沙箱技术）得到了加强，通过积极减少以
    root 权限运行的系统进程数量，攻击面也大大缩小。除了这些漏洞缓解措施，安卓的最新版本还引入了许多重要的安全功能，如限制用户支持、全盘加密、硬件支持的凭证存储以及对集中式设备管理和配置的支持。为了下一版本的安卓（在我写这篇文章时称为*Android
    L*），还宣布了更多面向企业的功能和安全改进，如托管配置文件支持、改进的全盘加密和对生物识别认证的支持。
- en: As with any new platform feature, discussing cutting-edge security improvements
    is exciting, but it’s arguably more important to understand Android’s security
    architecture from the bottom up because each new security feature builds upon
    and integrates with the platform’s core security model. Android’s sandboxing model
    (in which each application runs as a separate Linux user and has a dedicated data
    directory) and permission system (which requires each application to explicitly
    declare the platform features it requires) are fairly well understood and documented.
    However, the internals of other fundamental platform features that have an impact
    on device security, such as package management and code signing, are largely treated
    as a black box beyond the security research community.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何新平台功能一样，讨论前沿的安全改进令人兴奋，但从底层理解安卓的安全架构可能更为重要，因为每一项新的安全功能都建立在平台核心安全模型的基础上，并与之整合。安卓的沙箱模型（每个应用程序以独立的
    Linux 用户身份运行，并拥有专用的数据目录）和权限系统（要求每个应用程序明确声明其所需的系统功能）是相对易于理解和文档化的。然而，影响设备安全的其他基本平台功能，如包管理和代码签名的内部机制，往往被视为一个“黑箱”，超出了安全研究社区的了解范围。
- en: One of the reasons for Android’s popularity is the relative ease with which
    a device can be “flashed” with a custom build of Android, “rooted” by applying
    a third-party update package, or otherwise customized. Android enthusiast forums
    and blogs feature many practical “How to” guides that take users through the steps
    necessary to unlock a device and apply various customization packages, but they
    offer very little structured information about how such system updates operate
    under the hood and what risks they carry.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓受欢迎的原因之一是相对容易将设备“刷入”定制的安卓版本、通过应用第三方更新包进行“root”或以其他方式进行自定义。安卓爱好者的论坛和博客中有很多实用的“如何做”指南，带领用户完成解锁设备并应用各种自定义包的步骤，但它们很少提供有关这些系统更新如何在后台运行以及它们可能带来哪些风险的结构化信息。
- en: This books aims to fill these gaps by providing an exploration of how Android
    works by describing its security architecture from the bottom up and delving deep
    into the implementation of major Android subsystems and components that relate
    to device and data security. The coverage includes broad topics that affect all
    applications, such as package and user management, permissions and device policy,
    as well as more specific ones such as cryptographic providers, credential storage,
    and support for secure elements.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在填补这些空白，通过从底层描述 Android 的安全架构，深入探讨与设备和数据安全相关的主要 Android 子系统和组件的实现，探索 Android
    的工作原理。内容包括影响所有应用程序的广泛主题，如包管理和用户管理、权限和设备策略，以及更具体的主题，如加密提供程序、凭证存储和对安全元件的支持。
- en: It’s not uncommon for entire Android subsystems to be replaced or rewritten
    between releases, but security-related development is conservative by nature,
    and while the described behavior might be changed or augmented across releases,
    Android’s core security architecture should remain fairly stable in future releases.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同版本之间，整个 Android 子系统被替换或重写并不罕见，但与安全相关的开发本质上是保守的，尽管描述的行为可能会在版本之间发生变化或增强，Android
    的核心安全架构在未来的版本中应保持相对稳定。
- en: Who This Book Is For
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书适用人群
- en: This book should be useful to anyone interested in learning more about Android’s
    security architecture. Both security researchers looking to evaluate the security
    level of Android as a whole or of a specific subsystem and platform developers
    working on customizing and extending Android will find the high-level description
    of each security feature and the provided implementation details to be a useful
    starting point for understanding the underlying platform source code. Application
    developers can gain a deeper understanding of how the platform works, which will
    enable them to write more secure applications and take better advantage of the
    security-related APIs that the platform provides. While some parts of the book
    are accessible to a non-technical audience, the bulk of the discussion is closely
    tied to Android source code or system files, so familiarity with the core concepts
    of software development in a Unix environment is useful.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本书应适用于任何有兴趣了解 Android 安全架构的人。无论是安全研究人员想要评估 Android 整体或特定子系统的安全性，还是平台开发人员致力于定制和扩展
    Android，他们都会发现每个安全功能的高级描述和提供的实现细节是理解基础平台源代码的有用起点。应用程序开发者可以更深入地理解平台的工作方式，从而能够编写更安全的应用程序，并更好地利用平台提供的与安全相关的
    API。尽管本书的部分内容适合非技术性读者，但大部分讨论与 Android 源代码或系统文件密切相关，因此对 Unix 环境中软件开发核心概念的了解将非常有帮助。
- en: Prerequisites
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前提条件
- en: The book assumes basic familiarity with Unix-style operating systems, preferably
    Linux, and does not explain common concepts such as processes, user groups, file
    permissions, and so on. Linux-specific or recently added OS features (such as
    capability and mount namespaces) are generally introduced briefly before discussing
    Android subsystems that use them. Most of the presented platform code comes from
    core Android daemons (usually implemented in C or C++) and system services (usually
    implemented in Java), so basic familiarity with at least one of these languages
    is also required. Some code examples feature sequences of Linux system calls,
    so familiarity with Linux system programming can be helpful in understanding the
    code, but is not absolutely required. Finally, while the basic structure and core
    components (such as activities and services) of Android apps are briefly described
    in the initial chapters, basic understanding of Android development is assumed.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本书假定读者具有基本的 Unix 风格操作系统的熟悉度，最好是 Linux，并且不解释像进程、用户组、文件权限等常见概念。与 Linux 特定或最近添加的操作系统功能（如能力和挂载命名空间）相关的内容会在讨论使用它们的
    Android 子系统之前简要介绍。大部分平台代码来自核心 Android 守护进程（通常是 C 或 C++ 实现）和系统服务（通常是 Java 实现），因此至少熟悉其中一种语言是必需的。某些代码示例涉及
    Linux 系统调用的序列，因此熟悉 Linux 系统编程对于理解代码可能有帮助，但并非绝对必要。最后，虽然本书在最初几章简要描述了 Android 应用程序的基本结构和核心组件（如活动和服务），但假定读者对
    Android 开发有基本了解。
- en: Android Versions
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android 版本
- en: The description of Android’s architecture and implementation in this book (except
    for several proprietary Google features) is based on source code publicly released
    as part of the Android Open Source Project (AOSP). Most of the discussion and
    code excerpts reference Android 4.4, which is the latest publicly available version
    released with source code at the time of this writing. The master branch of AOSP
    is also referenced a few times, because commits to master are generally a good
    indicator of the direction future Android releases will take. However, not all
    changes to the master branch are incorporated in public releases as is, so it’s
    quite possible that future releases will change and even remove some of the presented
    functionality.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中关于 Android 架构和实现的描述（除了几个专有的 Google 特性）是基于作为 Android 开源项目（AOSP）一部分公开发布的源代码。大部分讨论和代码片段引用了
    Android 4.4，这是在本书撰写时最新的公开版本，且其源代码已发布。AOSP 的主分支也在几处被引用，因为主分支的提交通常能很好地反映未来 Android
    发布的方向。然而，并非所有对主分支的更改都会按原样纳入公共发布，因此未来的版本很可能会改变甚至移除一些当前展示的功能。
- en: A developer preview version of the next Android release (Android L, mentioned
    earlier) was announced shortly after the draft of this book was completed. However,
    as of this writing, the full source code of Android L is not available and its
    exact public release date is unknown. While the preview release does include some
    new security features, such as improvements to device encryption, managed profiles,
    and device management, none of these features are final and so are subject to
    change. That is why this book does not discuss any of these new features. Although
    we could introduce some of Android L’s security improvements based on their observed
    behavior, without the underlying source code, any discussion about their implementation
    would be incomplete and speculative.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 下一版 Android 系统（前文提到的 Android L）的开发者预览版在本书草稿完成后不久发布。然而，截至目前，Android L 的完整源代码尚未发布，具体的公开发布日期也未知。尽管预览版包含了一些新的安全功能，如设备加密、管理型配置文件和设备管理的改进，但这些功能都还不是最终版本，因此可能会发生变化。这就是本书没有讨论这些新功能的原因。虽然我们可以根据已观察到的行为介绍一些
    Android L 的安全改进，但由于缺乏底层源代码，任何关于其实现的讨论都会是不完整和推测性的。
- en: How Is This Book Organized?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书是如何组织的？
- en: This book consists of 13 chapters that are designed to be read in sequence.
    Each chapter discusses a different aspect or feature of Android security, and
    subsequent chapters build on the concepts introduced by their predecessors. Even
    if you’re already familiar with Android’s architecture and security model and
    are looking for details about a specific topic, you should at least skim [Chapter 1](ch01.html
    "Chapter 1. Android’s Security Model") through [Chapter 3](ch03.html "Chapter 3. Package
    Management") because the topics they cover form the foundation for the rest of
    the book.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本书由 13 章组成，旨在按顺序阅读。每一章讨论 Android 安全的不同方面或特性，后续章节建立在前面章节引入的概念之上。即使你已经熟悉 Android
    的架构和安全模型，并且正在寻找某个特定话题的详细信息，你至少应该浏览 [第 1 章](ch01.html "第 1 章. Android 的安全模型") 到
    [第 3 章](ch03.html "第 3 章. 包管理")，因为它们涉及的主题为本书的其他内容奠定了基础。
- en: '**[Chapter 1](ch01.html "Chapter 1. Android’s Security Model")** gives a high-level
    overview of Android’s architecture and security model.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[第 1 章](ch01.html "第 1 章. Android 的安全模型")** 给出了 Android 架构和安全模型的高级概述。'
- en: '**[Chapter 2](ch02.html "Chapter 2. Permissions")** describes how Android permissions
    are declared, used, and enforced by the system.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[第 2 章](ch02.html "第 2 章. 权限")** 介绍了 Android 权限的声明、使用及系统如何执行这些权限。'
- en: '**[Chapter 3](ch03.html "Chapter 3. Package Management")** discusses code signing
    and details how Android’s application installation and management process works.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[第 3 章](ch03.html "第 3 章. 包管理")** 讨论了代码签名，并详细描述了 Android 应用程序安装和管理过程的工作原理。'
- en: '**[Chapter 4](ch04.html "Chapter 4. User Management")** explores Android’s
    multi-user support and describes how data isolation is implemented on multi-user
    devices.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[第 4 章](ch04.html "第 4 章. 用户管理")** 探讨了 Android 的多用户支持，并描述了如何在多用户设备上实现数据隔离。'
- en: '**[Chapter 5](ch05.html "Chapter 5. Cryptographic Providers")** gives an overview
    of the Java Cryptography Architecture (JCA) framework and describes Android’s
    JCA cryptographic providers.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[第 5 章](ch05.html "第 5 章. 加密提供者")** 概述了 Java 加密架构（JCA）框架，并描述了 Android 的 JCA
    加密提供者。'
- en: '**[Chapter 6](ch06.html "Chapter 6. Network Security and PKI")** introduces
    the architecture of the Java Secure Socket Extension (JSSE) framework and delves
    into its Android implementation.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[第6章](ch06.html "第6章. 网络安全与 PKI")** 介绍了 Java 安全套接字扩展（JSSE）框架的架构，并深入探讨了其在
    Android 中的实现。'
- en: '**[Chapter 7](ch07.html "Chapter 7. Credential Storage")** explores Android’s
    credential store and introduces the APIs it provides to applications that need
    to store cryptographic keys securely.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[第7章](ch07.html "第7章. 凭证存储")** 探讨了 Android 的凭证存储并介绍了它为需要安全存储加密密钥的应用提供的 API。'
- en: '**[Chapter 8](ch08.html "Chapter 8. Online Account Management")** discusses
    Android’s online account management framework and shows how support for Google
    accounts is integrated into Android.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[第8章](ch08.html "第8章. 在线账户管理")** 讨论了 Android 的在线账户管理框架，并展示了 Google 账户如何集成到
    Android 中。'
- en: '**[Chapter 9](ch09.html "Chapter 9. Enterprise Security")** presents Android’s
    device management framework, details how VPN support is implemented, and delves
    into Android’s support for the Extensible Authentication Protocol (EAP).'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[第9章](ch09.html "第9章. 企业安全")** 介绍了 Android 的设备管理框架，详细说明了 VPN 支持的实现，并深入探讨了
    Android 对可扩展认证协议（EAP）的支持。'
- en: '**[Chapter 10](ch10.html "Chapter 10. Device Security")** introduces verified
    boot, disk encryption, and Android’s lockscreen implementation, and shows how
    secure USB debugging and encrypted device backups are implemented.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[第10章](ch10.html "第10章. 设备安全")** 介绍了验证启动、磁盘加密和 Android 的锁屏实现，并展示了如何实现安全的
    USB 调试和加密的设备备份。'
- en: '**[Chapter 11](ch11.html "Chapter 11. NFC and Secure Elements")** gives an
    overview of Android’s NFC stack, delves into secure element (SE) integration and
    APIs, and introduces host-based card emulation (HCE).'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[第11章](ch11.html "第11章. NFC 和安全元素")** 概述了 Android 的 NFC 堆栈，深入探讨了安全元素（SE）的集成与
    API，并介绍了基于主机的卡模拟（HCE）。'
- en: '**[Chapter 12](ch12.html "Chapter 12. Selinux")** starts with a brief introduction
    to SELinux’s architecture and policy language, details the changes made to SELinux
    in order to integrate it in Android, and gives an overview of Android’s base SELinux
    policy.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[第12章](ch12.html "第12章. Selinux")** 首先简要介绍了 SELinux 的架构和策略语言，详细说明了为将 SELinux
    集成到 Android 中所做的改动，并概述了 Android 的基础 SELinux 策略。'
- en: '**[Chapter 13](ch13.html "Chapter 13. System Updates and Root Access")** discusses
    how Android’s bootloader and recovery OS are used to perform full system updates,
    and details how root access can be obtained on both engineering and production
    Android builds.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[第13章](ch13.html "第13章. 系统更新和 root 访问")** 讨论了 Android 启动引导程序和恢复操作系统如何用于执行完整的系统更新，并详细介绍了如何在工程版和生产版
    Android 构建中获取 root 访问权限。'
- en: Conventions
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约定
- en: Because the main topic of this book is Android’s architecture and implementation,
    it contains multiple code excerpts and file listings, which are extensively referenced
    in the sections that follow each listing or code example. A few format conventions
    are used to set those references (which typically include multiple OS or programming
    language constructs) apart from the rest of the text.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书的主要主题是 Android 的架构与实现，因此包含了多个代码片段和文件列表，并在每个列表或代码示例之后的章节中广泛引用这些内容。为了将这些引用（通常包括多个操作系统或编程语言构造）与其他文本区分开来，使用了一些格式约定。
- en: 'Commands; function and variable names; XML attributes; and SQL object names
    are set in `monospace` (for example: “the `id` command,” “the `getCallingUid()`
    method,” “the `name` attribute,” and so on). The names of files and directories,
    Linux users and groups, processes, and other OS objects are set in *italic* (for
    example: “the *packages.xml* file,” “the *system* user,” “the *vold* daemon,”
    and so on). String literals are also set in *italic* (for example: “the *AndroidOpenSSL*
    provider”). If you use such string literals in a program, you typically need to
    enclose them in double or single quotes (for example: `Signature.getInstance("SHA1withRSA",
    "AndroidOpenSSL")`).'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 命令；函数和变量名；XML 属性；以及 SQL 对象名称使用 `等宽字体` 显示（例如：“`id` 命令”、“`getCallingUid()` 方法”、“`name`
    属性”等）。文件和目录名、Linux 用户和组、进程及其他操作系统对象使用 *斜体* 显示（例如：“*packages.xml* 文件”、“*system*
    用户”、“*vold* 守护进程”等）。字符串文字也使用 *斜体* 显示（例如：“*AndroidOpenSSL* 提供者”）。如果你在程序中使用这些字符串文字，通常需要将它们放在双引号或单引号中（例如：`Signature.getInstance("SHA1withRSA",
    "AndroidOpenSSL")`）。
- en: 'Java class names are typically in their unqualified format without the package
    name (for example: “the `Binder` class”); fully qualified names are only used
    when multiple classes with the same name exist in the discussed API or package,
    or when specifying the containing package is otherwise important (for example:
    “the `javax.net.ssl.SSLSocketFactory` class”). When referenced in the text, function
    and method names are shown with parentheses, but their parameters are typically
    omitted for brevity (for example: “the `getInstance()` factory method”). See the
    relevant reference documentation for the full function or method signature.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Java 类名通常以未带包名的格式出现（例如：“`Binder` 类”）；只有在讨论的 API 或包中存在多个同名类，或者指定包含的包非常重要时，才会使用完全限定名（例如：“`javax.net.ssl.SSLSocketFactory`
    类”）。在文本中引用时，函数和方法名通常带有括号，但为了简洁，通常省略其参数（例如：“`getInstance()` 工厂方法”）。有关完整的函数或方法签名，请参阅相关的参考文档。
- en: Most chapters include diagrams that illustrate the architecture or structure
    of the discussed security subsystem or component. All diagrams follow an informal
    “boxes and arrows” style and do not conform strictly to a particular format. That
    said, most diagrams borrow ideas from UML class and deployment diagrams, and boxes
    typically represent classes or objects, while arrows represent dependency or communication
    paths.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数章节都包括图表，用于说明所讨论的安全子系统或组件的架构或结构。所有图表都遵循一种非正式的“框和箭头”风格，并不严格遵循特定格式。也就是说，大多数图表借鉴了
    UML 类图和部署图的思路，框通常代表类或对象，而箭头代表依赖关系或通信路径。
