- en: '**14**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**14**'
- en: '**THIRD-PARTY CODE**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**第三方代码**'
- en: '![image](Images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common01.jpg)'
- en: Nobody builds software from scratch nowadays, least of all web developers. Most
    of the code powering your website—from the operating system, to the web server,
    to the programming language libraries you use—will be written by others. So how
    do you manage vulnerabilities in other people’s code?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如今没有人会从头开始编写软件，尤其是 web 开发人员。支持你网站的大部分代码——从操作系统到 web 服务器，再到你使用的编程语言库——都是由其他人编写的。那么，你该如何管理别人代码中的漏洞呢？
- en: Hackers often target known vulnerabilities in popular software components, so
    it is important to secure third-party code. It is far more efficient for a hacker
    to scan the web for insecure WordPress instances, for example, than to pick a
    particular website and try to figure out how it might be vulnerable. So, it’s
    important that you stay up-to-date with the latest security patches in order to
    avoid being picked up by a malicious scan.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客通常针对流行软件组件中的已知漏洞，因此确保第三方代码的安全至关重要。例如，黑客扫描互联网上的不安全 WordPress 实例比挑选一个特定的网站并尝试找出其潜在漏洞要高效得多。因此，保持最新的安全补丁非常重要，以避免被恶意扫描程序发现。
- en: This chapter discusses three approaches to securing third-party code. You’ll
    learn how to stay ahead of security advisories for your *dependencies*, the software
    components you use. Next, you’ll delve into the importance of *configuring* these
    dependencies correctly, so they do not accidentally leave open backdoors that
    hackers can take advantage of. Finally, you’ll see the security risks associated
    with third-party *services*—code running on other people’s servers that is either
    called by your web server or loaded into your web pages via JavaScript imports.
    In particular, you will look at the alarmingly popular strategy of deploying malware
    through ad networks—so-called *malvertising*—and examine ways to protect your
    users if your site includes advertising.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了三种确保第三方代码安全的方法。你将了解如何跟进关于你*依赖项*（你使用的软件组件）的安全通告。接下来，你将深入了解如何*配置*这些依赖项，以确保它们不会无意中留下黑客可以利用的后门。最后，你将看到与第三方*服务*相关的安全风险——这些代码运行在他人的服务器上，要么被你的
    web 服务器调用，要么通过 JavaScript 导入加载到你的网页中。特别是，你将关注通过广告网络部署恶意软件的普遍策略——即所谓的*恶意广告*——并检查如果你的网站包含广告，如何保护你的用户。
- en: '**Securing Dependencies**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**确保依赖项的安全**'
- en: 'In April 2014, the authors of OpenSSL, the open source C library that implements
    TLS for most versions of Linux (and other operating systems), disclosed the existence
    of the Heartbleed bug: using a buffer over-read, an attacker could read arbitrary
    chunks of memory from a server using the vulnerable library, and thereby steal
    encryption keys, usernames, passwords, and other sensitive data. The two most
    popular web servers on the internet—Apache and Nginx—use OpenSSL to secure communication,
    and researchers working for the security firm AVG estimated that more than half
    a million websites were revealed to be vulnerable to attack overnight. Because
    of the sheer number of websites affected, the Heartbleed vulnerability has been
    called the most dangerous bug of all time.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年4月，OpenSSL 的作者，实施大多数 Linux 版本（以及其他操作系统）TLS 的开源 C 库，披露了 Heartbleed 漏洞的存在：利用缓冲区过度读取，攻击者可以从使用该易受攻击库的服务器中读取任意内存块，从而窃取加密密钥、用户名、密码以及其他敏感数据。互联网上最流行的两个
    web 服务器——Apache 和 Nginx——都使用 OpenSSL 来保护通信，安全公司 AVG 的研究人员估计，超过五十万个网站在一夜之间暴露出漏洞。由于受影响网站数量庞大，Heartbleed
    漏洞被称为有史以来最危险的漏洞。
- en: 'A new version of OpenSSL that patched the bug was released the same day that
    the vulnerability was disclosed, but unpatched web servers were still common on
    the internet for months afterward. This was a dangerous time to run an unpatched
    web server: hackers had time to find the best methods of exploiting the vulnerability,
    and the dwindling pool of vulnerable sites made the remaining web servers a more
    likely target.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 修复了漏洞的新版本 OpenSSL 在漏洞披露的同一天发布，但未修复的 web 服务器在此后几个月仍然在互联网上很常见。这是一个运行未修补 web 服务器的危险时期：黑客有足够的时间寻找最有效的漏洞利用方法，而且随着易受攻击网站数量的减少，剩余的
    web 服务器成了更可能的攻击目标。
- en: 'All websites use third-party code, and all third-party libraries—even those
    written by security experts, like OpenSSL—are liable to have security issues.
    If you want to stay ahead of these vulnerabilities, you need to be aware of security
    issues as soon as they are made public and to patch software promptly. There are
    three aspects to this: knowing precisely what dependencies you are running, being
    able to update your dependencies quickly, and staying alert to security issues
    for your dependencies. Let’s discuss each in turn.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所有网站都使用第三方代码，所有第三方库——即使是由安全专家编写的库，如OpenSSL——也可能存在安全问题。如果你想领先于这些漏洞，你需要在漏洞公开后立即了解并及时修补软件。这涉及三个方面：准确知道你正在运行的依赖项，能够快速更新依赖项，并时刻关注依赖项的安全问题。我们将逐一讨论每个方面。
- en: '***Know What Code You Are Running***'
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***了解你正在运行的代码***'
- en: The first step to securing your dependencies is knowing what they are. This
    might sound obvious, but modern software stacks are intricate and multilayered,
    making it easy to add new libraries during the development phase of the software
    development life cycle that you may forget about later. There are numerous tools
    you really ought to be using to organize your dependencies.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的依赖项的第一步是知道它们是什么。这听起来可能很显而易见，但现代软件栈复杂且多层次，使得在软件开发生命周期的开发阶段很容易添加新的库，而这些库之后可能会被遗忘。你应该使用许多工具来组织你的依赖项。
- en: '**Dependency Management Tools**'
  id: totrans-12
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**依赖管理工具**'
- en: Most programming languages come with a *dependency manager* that allows a development
    team to specify third-party dependencies in a configuration file. The described
    software libraries will be downloaded on demand as part of the build process.
    Dependency managers make it easy to grab new dependencies and to rebuild the software
    stack in a new environment—for instance, when you deploy to a server.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数编程语言都带有一个*依赖管理器*，允许开发团队在配置文件中指定第三方依赖项。这些软件库将在构建过程中按需下载。依赖管理器使得获取新的依赖项以及在新环境中重建软件栈变得简单——例如，当你部署到服务器时。
- en: To be absolutely sure you know which versions of each dependency you are running,
    you should get in the habit of specifying explicit *version numbers* for each
    dependency in your dependency list. Packages available in a dependency management
    system are hosted in a remote repository on the internet. As package authors release
    new versions of a package, they will be added to the repository with a new version
    number. By default, most dependency managers grab the latest version of each dependency
    when you first run a build in a new environment. This is a sensible default behavior
    during initial development, but by the time you are releasing code, your dependency
    configuration file should explicitly list version numbers. Security advisories
    will disclose which versions of a dependency are vulnerable, so pinning down the
    versions you are running in each environment will tell you what needs to be patched.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保你知道每个依赖项的版本，你应该养成在依赖列表中为每个依赖项指定明确的*版本号*的习惯。在依赖管理系统中提供的包都托管在互联网的远程仓库中。当包的作者发布新版本时，它们会以新版本号被添加到仓库中。默认情况下，大多数依赖管理器在你首次在新环境中运行构建时会获取每个依赖项的最新版本。这种默认行为在初期开发时是合理的，但等到你发布代码时，依赖配置文件应当明确列出版本号。安全通告将披露哪些版本的依赖项存在漏洞，因此固定你在每个环境中运行的版本将告诉你需要修补的内容。
- en: Be aware, too, that the dependencies you declare likely have dependencies themselves—and
    your dependency manager will helpfully fetch those libraries too. For this reason,
    we talk about the *dependency tree*, since each dependency has branches that are
    other dependencies. Be sure to consider the *whole* dependency tree when assessing
    security risks. Your dependency manager will be able to output the whole tree
    (including dependencies of dependencies) on the command line. [Listing 14-1](ch14.xhtml#ch14list1)
    shows the dependency tree for a Node.js project, illustrating how the `@blueprintjs/core`
    library has the `popper.js` library as a subdependency.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，你声明的依赖项可能本身也有依赖项——而你的依赖管理器将会帮助你自动获取这些库。因此，我们提到*依赖树*，因为每个依赖项都有其他依赖项作为分支。评估安全风险时，确保考虑*整个*依赖树。你的依赖管理器可以在命令行中输出整个树（包括依赖项的依赖项）。[列表
    14-1](ch14.xhtml#ch14list1)展示了一个Node.js项目的依赖树，说明了`@blueprintjs/core`库将`popper.js`库作为子依赖项。
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 14-1: The command npm list shows the whole dependency tree in the
    Node Package Manager.*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 14-1：命令 npm list 显示 Node Package Manager 中的整个依赖树。*'
- en: '**Operating System Patches**'
  id: totrans-18
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**操作系统补丁**'
- en: In addition to tracking your programming language dependencies, you also need
    to keep track of software packages deployed at the operating system level. Operating
    system vendors (for example, Red Hat and Microsoft) frequently issue security
    patches, so you should track the version of each operating system library you
    are using in any given environment, and have a strategy for upgrading servers
    in a timely fashion. If you have physical servers running in a data center, your
    company likely has dedicated system administrators to take care of this. If you
    run your software on virtualized servers in the cloud (for instance, on Amazon
    EC2), you should update the version of the operating system regularly as part
    of deployment. Using Docker for containerization is a great way of tracking operating
    system dependencies, too, since the Docker configuration file will explicitly
    list what software is to be installed when the container is instantiated.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了跟踪编程语言的依赖项外，你还需要跟踪操作系统级别上部署的软件包。操作系统供应商（例如，Red Hat 和 Microsoft）经常发布安全补丁，因此你应该跟踪在任何给定环境中使用的每个操作系统库的版本，并有一个及时升级服务器的策略。如果你在数据中心运行物理服务器，你的公司可能有专门的系统管理员来处理此事。如果你在云端（例如，在
    Amazon EC2 上）运行软件，应该定期更新操作系统的版本作为部署的一部分。使用 Docker 进行容器化也是跟踪操作系统依赖项的一个好方法，因为 Docker
    配置文件会明确列出容器实例化时要安装的软件。
- en: '**Integrity Checks**'
  id: totrans-20
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**完整性检查**'
- en: 'One final consideration: you need to ensure that the code you *think* you are
    running is the code you are *actually* running. Dependency managers and patching
    tools will help here. They ensure that software components are delivered uncorrupted
    by using *checksums*—digital fingerprints that are calculated when the dependency
    is uploaded to the repository, and that can be recalculated and verified when
    the dependency is downloaded for use. You should strive to provide the same guarantees
    when deploying JavaScript code and other resources to the browser.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个考虑因素：你需要确保你*认为*自己正在运行的代码就是你*实际*运行的代码。依赖管理工具和补丁工具在这里会有所帮助。它们通过使用*校验和*—在依赖项上传到仓库时计算的数字指纹，并且在下载并使用依赖项时重新计算并验证—来确保软件组件未被篡改。你应该力求在将
    JavaScript 代码和其他资源部署到浏览器时提供相同的保障。
- en: Modern browsers allow you to do this by adding *subresource integrity checks*
    to `<script>` and `<style>` tags in your HTML. Your build process should generate
    a checksum for each resource file you intend to import on the client side, and
    assign that checksum to the `integrity` attribute of each import tag. [Listing
    14-2](ch14.xhtml#ch14list2) shows how to use the `openssl` utility to generate
    a checksum.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现代浏览器允许你通过在 HTML 中的 `<script>` 和 `<style>` 标签中添加 *子资源完整性检查* 来实现这一点。你的构建过程应该为你打算在客户端导入的每个资源文件生成一个校验和，并将该校验和分配给每个导入标签的
    `integrity` 属性。[Listing 14-2](ch14.xhtml#ch14list2) 显示了如何使用 `openssl` 工具生成校验和。
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 14-2: To generate a checksum in Unix, pipe the JavaScript file* FILENAME.js
    *to openssl to generate a digest and encode it in Base64.*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 14-2：在 Unix 中生成校验和，将 JavaScript 文件* FILENAME.js *通过管道传输到 openssl 以生成摘要并将其编码为
    Base64。*'
- en: The browser will compare the script to the expected checksum and verify that
    there’s a match before executing the imported code. This makes it much harder
    for hackers who gain access to your server to replace JavaScript files with malicious
    code, because they would also have to gain access to and change the code that
    generates the `<script>` tags, like the one shown in [Listing 14-3](ch14.xhtml#ch14list3).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器将在执行导入的代码之前，将脚本与预期的校验和进行比较，并验证是否匹配。这使得黑客更难在获得服务器访问权限后用恶意代码替换 JavaScript 文件，因为他们还必须获得并修改生成
    `<script>` 标签的代码，如[Listing 14-3](ch14.xhtml#ch14list3)中所示。
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 14-3: Ensure the integrity of an imported JavaScript file by calculating
    a checksum of the file and adding it to the integrity attribute of the HTML tag
    that imports the script.*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 14-3：通过计算文件的校验和并将其添加到导入脚本的 HTML 标签的完整性属性中，确保导入的 JavaScript 文件的完整性。*'
- en: '***Be Able to Deploy New Versions Quickly***'
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***能够快速部署新版本***'
- en: 'Responding to security issues requires you to be able to deploy patches quickly,
    which means, in turn, having an orderly and scripted release process. [Chapter
    5](ch05.xhtml#ch05) covered much of this: your release process should be reliable,
    reproducible, and revertible, and releases should be tied to code branches in
    a source control system. The configuration file used by your dependency manager
    should be kept under source control, so you can track which versions of each dependency
    were deployed with each release.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 应对安全问题需要你能够迅速部署补丁，这就意味着你需要有一个有序且脚本化的发布流程。[第5章](ch05.xhtml#ch05)已经讲解了大部分内容：你的发布流程应该是可靠的、可复现的，并且可以回滚的，发布应该与源代码控制系统中的代码分支挂钩。你的依赖管理器使用的配置文件应该保存在源代码控制中，这样你就可以跟踪每个发布中部署了哪些版本的依赖。
- en: 'You will often deploy security patches for third-party components in isolation—upgrading
    *dependency* versions without releasing any changes to your own code. A release
    that contains only third-party code changes still requires you to *regression
    test* your website: in other words, to ensure that the upgraded dependencies do
    not break any existing functionality on the site. Regression testing becomes much
    more of a formality if you have good coverage in your unit tests. The more lines
    of your codebase that are executed during unit test runs, the less manual testing
    you will need to do. Investing some time in writing good unit tests will make
    deploying security patches quicker and easier.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你经常会单独部署第三方组件的安全补丁——升级*依赖*版本，而不需要发布任何自己的代码变更。即使发布仅包含第三方代码变更，你仍然需要对你的网站进行*回归测试*：换句话说，要确保升级后的依赖不会破坏网站上的任何现有功能。如果你的单元测试覆盖面广，回归测试就会变成一种形式化的操作。你的代码库中执行的代码行越多，你需要手动测试的工作就越少。在编写良好的单元测试上投入一些时间，将使得部署安全补丁更加迅速和简便。
- en: '***Stay Alert to Security Issues***'
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***保持警觉，关注安全问题***'
- en: With carefully managed dependencies and a reliable release process, you are
    in a good position to secure the third-party code you use. The final piece of
    the puzzle is staying in the loop when security issues are disclosed. Thanks to
    the internet, you have a lot of ways to keep track.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通过精心管理的依赖关系和可靠的发布流程，你就能确保你使用的第三方代码是安全的。最后一步是确保在安全问题披露时能够及时了解。感谢互联网，你有很多方法来跟进这些问题。
- en: '**Social Media**'
  id: totrans-33
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**社交媒体**'
- en: Security advisories spread quickly through social media and news sites like
    Twitter, Reddit, and Hacker News (*[https://news.ycombinator.com/](https://news.ycombinator.com/)*),
    so these sites are a great way to get security news quickly. Big software vulnerabilities
    will be discussed in subreddits like *[https://www.reddit.com/r/programming/](https://www.reddit.com/r/programming/)*
    and */r/technology*, and will usually hit the front page of Hacker News.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 安全公告会通过社交媒体和新闻网站迅速传播，例如Twitter、Reddit和Hacker News (*[https://news.ycombinator.com/](https://news.ycombinator.com/)*),
    所以这些网站是获取安全新闻的好途径。大型软件漏洞会在诸如* [https://www.reddit.com/r/programming/](https://www.reddit.com/r/programming/)*
    和 */r/technology* 等subreddit中讨论，通常还会登上Hacker News的首页。
- en: If you make time to follow technology pundits and software authors on Twitter,
    security issues will often be the topic of the day. It’s also a great way to keep
    abreast of new developments in the software world.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有时间在Twitter上关注技术专家和软件作者，安全问题常常是当天的讨论话题。这也是跟进软件世界新发展的好方式。
- en: '**Mailing Lists and Blogs**'
  id: totrans-36
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**邮件列表和博客**'
- en: Programming languages often have mailing lists and channels that publish big
    news. The Python Software Foundation publishes a weekly newsletter and has its
    own Slack channel, for instance. Make sure to subscribe to anything relevant to
    your technology stack.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言通常会有邮件列表和频道，发布重要新闻。例如，Python软件基金会每周发布新闻通讯，并且有自己的Slack频道。确保订阅与你的技术栈相关的所有信息。
- en: A huge number of blogs exist on the topic of information security. Check out
    Brian Krebs (*[https://krebsonsecurity.com/](https://krebsonsecurity.com/)*) and
    Bruce Schneier (*[https://www.schneier.com/](https://www.schneier.com/)*) for
    insightful commentary on the security issues of the day.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有大量关于信息安全的博客。可以查看Brian Krebs (*[https://krebsonsecurity.com/](https://krebsonsecurity.com/)*)
    和Bruce Schneier (*[https://www.schneier.com/](https://www.schneier.com/)*)，他们对当前安全问题有深入的评论。
- en: '**Official Advisories**'
  id: totrans-39
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**官方公告**'
- en: Pay attention to security alerts from your hosting provider and software vendors.
    When major security issues on the scale of Heartbleed occur, hosting companies
    will engage with their customers and guide them through the patching process.
    Microsoft famously issues new patches every Tuesday (*patch Tuesday*) so make
    sure to sign up to its newsletter if you use Microsoft technology.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注意来自托管服务商和软件供应商的安全警报。当像 Heartbleed 这样的重大安全问题发生时，托管公司会与客户合作并指导他们完成修补过程。如果你使用微软技术，微软会每周二发布新的安全补丁（*补丁星期二*），因此请确保订阅其新闻通讯。
- en: '**Software Tools**'
  id: totrans-41
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**软件工具**'
- en: In addition to keeping your ear to the ground, automated tools can check your
    dependencies for known vulnerabilities. Node.js leads the way here, as the *Node
    Package Manager (NPM)* now incorporates the `npm audit` command that can be used
    to cross-check your dependency versions against an open source database of vulnerabilities.
    The equivalent tool for Ruby is the `bundler-audit` gem; for Java and .NET, the
    Open Web Application Security Project (OWASP) publishes a command line tool called
    `dependency-check`. Incorporating these tools into your build process will alert
    you of any potential vulnerabilities whenever your code is built and will allow
    you to assess the risks around each vulnerability.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 除了保持对外界动向的关注，自动化工具还可以检查你的依赖项是否存在已知的漏洞。Node.js 在这方面处于领先地位，因为*Node 包管理器（NPM）*现在包含了`npm
    audit`命令，可以用来将你的依赖版本与开源漏洞数据库进行交叉检查。Ruby 的类似工具是`bundler-audit` gem；对于 Java 和 .NET，开放
    Web 应用程序安全项目（OWASP）发布了一款命令行工具，名为`dependency-check`。将这些工具纳入到构建流程中，每当你的代码构建时，它们会提醒你潜在的漏洞，并帮助你评估每个漏洞的风险。
- en: Your source code repository can also help. GitHub automatically scans code hosted
    on their site, and will issue security alerts whenever vulnerable dependencies
    are found.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你的源代码库也可以提供帮助。GitHub会自动扫描其网站上托管的代码，并在发现脆弱的依赖时发出安全警报。
- en: '***Know When to Upgrade***'
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***知道何时升级***'
- en: It’s important to note that not all security issues merit equal priority! Constantly
    upgrading your dependencies can be time-consuming, especially since many of the
    security concerns in a particular advisory may be mitigated in your system by
    other factors. Large organizations have formal processes for reviewing security
    alerts, prioritizing them, and then choosing the appropriate action. It’s perfectly
    acceptable to fold in minor security upgrades at the next scheduled release, as
    long as your team has assessed the risks involved.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，并非所有的安全问题都需要优先处理！不断升级你的依赖项可能非常耗时，尤其是因为许多安全问题可能已被你系统中的其他因素所缓解。大公司通常有正式的流程来审核安全警报、评估优先级并选择适当的措施。只要你的团队已经评估了相关风险，完全可以在下一个预定的发布版本中加入次要的安全升级。
- en: '**Securing Configuration**'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**配置安全**'
- en: 'Software is only as secure as it is configured to be. This is particularly
    true of third-party software: if you install a new database and start running
    with the default user account and password, you will quickly run into trouble.
    Hackers frequently scan the internet for software components running with their
    default settings, since they know that many site owners will neglect to customize
    their configurations when installing software.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 软件的安全性取决于它的配置是否安全。特别是第三方软件，若你安装了一个新的数据库并使用默认的用户账户和密码进行运行，很快就会遇到问题。黑客经常扫描互联网，寻找使用默认设置的运行软件，因为他们知道许多站点所有者在安装软件时会忽略自定义配置。
- en: If you are running software with an unsecured configuration, you are probably
    advertising this fact to the world. The information security consulting group
    Offensive Security hosts the Google Hacking Database, a listing of insecure software
    you can find via a simple Google search. The Google search spider does a thorough
    job of indexing pages on the web and offers a powerful set of tools for refining
    searches based on this information. For example, googling *index of /etc/certs*
    will list millions of web servers that expose their digital certificate directories
    to the world—a major security flaw!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在使用未加固的配置运行软件，你可能会把这一点公之于众。信息安全咨询公司Offensive Security维护着谷歌黑客数据库，其中列出了你可以通过简单的谷歌搜索找到的不安全软件。谷歌搜索蜘蛛会彻底地索引网页，并提供一套强大的工具，以根据这些信息优化搜索。例如，搜索*index
    of /etc/certs*会列出数百万个公开其数字证书目录的网页服务器——这是一个严重的安全漏洞！
- en: Deploying your dependencies with a secure configuration is absolutely key to
    not getting hacked. A secure configuration requires setting up your services with
    strong credentials, storing your configuration information securely, and limiting
    the damage an attacker can do if they gain access to one part of your environment.
    Let’s see how.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用安全配置部署依赖项是防止被黑客攻击的关键。安全配置要求你用强密码设置服务，安全存储配置信息，并限制攻击者在获取环境某一部分的访问权限后能够造成的损害。让我们来看一下如何实现。
- en: '***Disable Default Credentials***'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***禁用默认凭据***'
- en: Many software packages come with default login credentials to make them easy
    for a first-time user to get up and running. Make sure you disable these credentials
    before deploying the software to test or production environments. If your database,
    web server, or content management system is deployed with, for example, an `admin`
    account, it will be quickly detected by bots scanning the internet for vulnerable
    software.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 许多软件包都带有默认的登录凭据，以便第一次使用的用户能够快速启动和运行。确保在将软件部署到测试或生产环境之前禁用这些凭据。例如，如果你的数据库、Web服务器或内容管理系统部署时有一个`admin`帐户，它将很快被扫描互联网上漏洞软件的机器人检测到。
- en: '***Disable Open Directory Listings***'
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***禁用开放目录列表***'
- en: Web servers tend to overshare. Older versions of the Apache web server, for
    instance, map URL paths to files, and will helpfully list the files a directory
    contains if the filename was omitted in the URL. *Open directory listings* invite
    hackers to explore your filesystem, allowing them to search for sensitive data
    files and security keys. Make sure to disable directory listings in your web server
    configuration. [Listing 14-4](ch14.xhtml#ch14list4) shows how this is done in
    the Apache web server.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Web服务器通常会过度共享。例如，较旧版本的Apache web服务器将URL路径映射到文件，并且如果URL中省略了文件名，它会友好地列出目录中包含的文件。*开放目录列表*邀请黑客探索你的文件系统，使他们能够搜索敏感数据文件和安全密钥。确保在Web服务器配置中禁用目录列表。[清单14-4](ch14.xhtml#ch14list4)展示了如何在Apache
    web服务器中执行此操作。
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 14-4: Remove the keyword Indexes to prevent this Apache configuration
    file from generating open directory listings.*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单14-4：移除关键字Indexes，以防止此Apache配置文件生成开放目录列表。*'
- en: '***Protect Your Configuration Information***'
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***保护你的配置信息***'
- en: 'Your web server configuration will likely contain sensitive information, such
    as database credentials and API keys. Many development teams store configuration
    files in source control, to make deployment easier. However, consider what a hacker
    could do with access to your source control system: this type of sensitive information
    is the first thing hackers will search for. Database credentials, API keys, private
    encryption keys, certificates, and other sensitive configuration details need
    to be kept *externally* from source control.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你的Web服务器配置可能包含敏感信息，如数据库凭据和API密钥。许多开发团队将配置文件存储在源代码控制中，以便简化部署。然而，考虑一下如果黑客获得了对源代码控制系统的访问权限，他们可能会做什么：这种类型的敏感信息正是黑客首先会搜索的内容。数据库凭据、API密钥、私密加密密钥、证书以及其他敏感配置细节需要*外部存储*，而不是存放在源代码控制中。
- en: One common approach is to record sensitive configuration in environmental variables
    at the operating system level, and have your configuration code initialize itself
    from these environmental variables when it starts up. These environmental variables
    can be initialized by configuration files stored locally on the server.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一种常见的方法是在操作系统级别通过环境变量记录敏感配置，并在启动时让配置代码从这些环境变量中初始化自己。这些环境变量可以通过保存在服务器上的配置文件进行初始化。
- en: Another approach is to use a dedicated configuration store. Amazon Web Services
    (AWS) allows you to store configuration securely in its Systems Manager Parameter
    Store. Microsoft servers frequently store credentials in Active Directory, which
    allows for fine-grained permissions. Storing configuration in a database table
    is another option, though you should consider how an attacker may be able to escalate
    an attack if they gain access to your database. (Your web server will also have
    to access your database credentials before it can load the rest of the configuration!)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是使用专用的配置存储。亚马逊Web Services（AWS）允许你在其Systems Manager参数存储中安全地存储配置。微软的服务器通常将凭据存储在Active
    Directory中，从而允许精细的权限控制。将配置存储在数据库表中也是一个选择，但你应该考虑，如果攻击者获得了数据库的访问权限，他们可能会如何升级攻击。（你的Web服务器还必须在加载其余配置之前访问数据库凭据！）
- en: One surefire way to secure configuration information is to store it in encrypted
    form, encrypted with an algorithm such as AES-128\. This approach means that a
    hacker will have to compromise your configuration data *and* your decryption key
    before they can steal your credentials. Just remember to store the decryption
    key in a different location from the configuration files, or the security benefit
    is neglible.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 保护配置文件信息的一个可靠方法是将其以加密形式存储，使用如AES-128之类的算法进行加密。这意味着黑客必须同时破解你的配置数据*和*解密密钥，才能窃取你的凭据。只需记住，解密密钥应存储在与配置文件不同的位置，否则安全性将大打折扣。
- en: '***Harden Test Environments***'
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***加固测试环境***'
- en: Preproduction environments typically have the same software installed as their
    production counterparts but are frequently less secure. If your test environment
    contains sensitive data—for instance, if you ever copy data from the production
    environment to help with testing—you need to configure your test environments
    to be just as secure as your production environment. Crucially, production and
    nonproduction should not share credentials or API keys; it’s important that you
    limit the damage a hacker can do if they manage to compromise your test server.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 预生产环境通常安装与生产环境相同的软件，但安全性较差。如果你的测试环境包含敏感数据——例如，如果你曾经将生产环境的数据复制到测试环境中——你需要将测试环境配置为与生产环境一样安全。至关重要的是，生产和非生产环境不应共享凭据或API密钥；如果黑客成功攻破你的测试服务器，限制他们能造成的损害是非常重要的。
- en: '***Secure Administrative Frontends***'
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***保护管理前端***'
- en: Some software components come with administrative tools that are available over
    the internet. Administrative interfaces are a favorite target for hackers. You
    will often encounter malicious bots probing for unsecured WordPress instances
    by testing for the presence of a */wp-login.php* page, for instance.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一些软件组件带有通过互联网访问的管理工具。管理界面是黑客最喜欢的攻击目标之一。例如，你可能经常遇到恶意机器人，通过检测是否存在*/wp-login.php*页面来探测不安全的WordPress实例。
- en: If you don’t intend to use these administrative frontends, disable them in your
    configuration. If you do intend to use them, make sure to remove any default login
    credentials, and, if possible, restrict the IP range that can access them. Consult
    the documentation for your software stack or do a quick search on Stack Overflow
    (*[https://stackoverflow.com/](https://stackoverflow.com/)*) to find out how.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不打算使用这些管理前端，请在配置中禁用它们。如果你打算使用它们，请确保删除任何默认的登录凭据，并且如果可能的话，限制可以访问它们的IP范围。请查阅你的软件堆栈文档，或在Stack
    Overflow上做一个快速搜索（*[https://stackoverflow.com/](https://stackoverflow.com/)）以了解如何操作。
- en: Now that you have learned how to secure third-party code running on your servers,
    let’s look at how to securely integrate with code running on other people’s servers.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学会了如何保护在自己服务器上运行的第三方代码，让我们来看一下如何安全地与运行在其他人服务器上的代码进行集成。
- en: '**Securing the Services That You Use**'
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保护你使用的服务**'
- en: Third-party services are widely used in modern web development. You might be
    using Facebook Login for authentication, Google AdSense to place advertisements
    on your site, Akamai for hosting static content, SendGrid for sending transactional
    email, and Stripe for processing payments.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方服务在现代网站开发中被广泛使用。你可能会使用Facebook登录进行身份验证，使用Google AdSense在你的网站上投放广告，使用Akamai托管静态内容，使用SendGrid发送事务性电子邮件，使用Stripe处理支付。
- en: Integrating these kinds of services into your website generally means creating
    an account with the service provider, being supplied secret access credentials,
    and altering your website code to make use of the service. Two security considerations
    arise here. First, hackers will often attempt to steal your access credentials
    in order to access your account with these services. This will allow them to mine
    information about your users, for instance, or even to initiate financial transactions
    in the case of payment processors. Second, every third-party service is a potential
    attack vector to your site, because hackers try to compromise service providers
    in order to get access to a broad range of targets.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些服务集成到你的网站中，通常意味着要在服务提供商处创建一个账户，获得秘密访问凭据，并修改你的网站代码以利用该服务。这里有两个安全考虑因素。首先，黑客通常会尝试窃取你的访问凭据，以便访问这些服务的账户。这将允许他们获取关于你用户的信息，或者在支付处理器的情况下，甚至发起金融交易。其次，每个第三方服务都是你网站的潜在攻击向量，因为黑客会试图破坏服务提供商，以便访问广泛的目标。
- en: 'Let’s start with the first consideration: learning how to safely store your
    access credentials.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从第一个考虑因素开始：学习如何安全存储你的访问凭证。
- en: '***Protect Your API Keys***'
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***保护你的 API 密钥***'
- en: Many third-party services issue you an application programming interface (API)
    key when you sign up, and your code must present the key as an access token when
    it interacts with the API. API keys need to be stored safely. Generally, this
    means storing the API key securely in the configuration on the server, as discussed
    in the previous section.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 许多第三方服务在你注册时会为你发放一个应用程序接口（API）密钥，你的代码在与 API 交互时必须将该密钥作为访问令牌提供。API 密钥需要安全存储。通常，这意味着将
    API 密钥安全地存储在服务器的配置中，正如上一节所讨论的那样。
- en: 'Some APIs issue *two* API keys: a *public key* that can be safely passed to
    the browser, used to make API calls from JavaScript; and a *private key* that
    must be kept securely on the server, used to make private API calls from the server
    side for more-sensitive actions. The public key has fewer privileges associated
    with it. Audit your code to make sure these keys don’t get mixed up! You don’t
    want to accidentally send the higher-privilege private key to the client. Even
    something as simple as naming your configuration variables `SECRET_KEY` will remind
    your development team of the risks.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 API 发放 *两个* API 密钥：一个 *公钥* 可以安全地传递给浏览器，用于从 JavaScript 发起 API 调用；一个 *私钥* 必须保存在服务器上，用于从服务器端发起更敏感操作的私有
    API 调用。公钥的权限较少。审计你的代码，确保这些密钥没有被混淆！你不想不小心将具有更高权限的私钥发送给客户端。即使是像将你的配置变量命名为 `SECRET_KEY`
    这样的简单做法，也能提醒你的开发团队注意风险。
- en: Other services allow you to generate a temporary access token that can be passed
    to the client. Typically, these tokens can be used only once, or within a limited
    time window, to prevent abuse by a malicious user. These access tokens protect
    against *replay attacks*, whereby an attacker resends HTTP requests in an attempt
    to repeat an action (for instance, to duplicate a payment). Make sure your code
    generates access tokens only when a user has already authenticated themselves,
    or an attacker may be able generate new access tokens on demand.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 其他服务允许你生成一个可以传递给客户端的临时访问令牌。通常，这些令牌只能使用一次，或者在有限的时间窗口内使用，以防止恶意用户滥用。这些访问令牌可以防止
    *重放攻击*，即攻击者通过重新发送 HTTP 请求来尝试重复某个操作（例如，重复支付）。确保你的代码仅在用户已经完成身份验证后生成访问令牌，否则攻击者可能会按需生成新的访问令牌。
- en: '***Secure Your Webhooks***'
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***保护你的 Webhook***'
- en: Most API integrations involve making HTTPS calls from your web server or the
    browser, to the service provider’s API. When a service provider needs to make
    calls in the opposite direction (for instance, to send you notifications), it
    may ask you to implement a *webhook*. This is a simple “reverse API” on your website
    that the service provider will send HTTPS requests to when an event happens. You
    might, for instance, get webhook calls when a user opens an email you sent or
    when your payment processor initiates a payment.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 API 集成涉及从你的 Web 服务器或浏览器发起 HTTPS 调用到服务提供商的 API。当服务提供商需要发起相反方向的调用（例如，向你发送通知）时，它可能要求你实现一个
    *Webhook*。这是你网站上的一个简单“反向 API”，当事件发生时，服务提供商会向其发送 HTTPS 请求。例如，当用户打开你发送的电子邮件或你的支付处理程序发起支付时，你可能会收到
    Webhook 调用。
- en: Since they are public URLs, webhooks can be called by anyone on the internet,
    not just the service provider. If the service provider supports sending credentials
    with a webhook invocation, you should verify that these credentials are correct
    before processing the webhook call.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Webhook 是公开的 URL，任何人都可以调用它，而不仅仅是服务提供商。如果服务提供商支持在 Webhook 调用中发送凭证，你应该在处理 Webhook
    调用之前验证这些凭证是否正确。
- en: If a webhook invocation is purely informational and contains no sensitive data,
    it may be sent with no credentials attached whatsoever. In this scenario, an attacker
    can easily spoof such webhook calls. Be prepared to verify the notification with
    a further callback to the service provider’s API before doing any further processing.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Webhook 调用纯粹是信息性的且不包含敏感数据，它可以在没有凭证的情况下发送。在这种情况下，攻击者可以轻松伪造这样的 Webhook 调用。准备在进行进一步处理之前，通过回调服务提供商的
    API 来验证通知。
- en: '***Secure Content Served by Third Parties***'
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***保护由第三方提供的内容***'
- en: Finding a way to serve malicious content under someone else’s domain is a favorite
    trick of hackers; victims can be lulled into a false sense of security by the
    sites they trust. Users have been conditioned to trust the padlock icon in the
    browser, so if a hacker can find a way to deploy malware under the security certificate
    of a large company, they will be able to trick more victims into downloading it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客最喜欢的一种手段是通过其他人的域名提供恶意内容；受害者可能会因为他们信任的网站而产生虚假的安全感。用户已经习惯于信任浏览器中的锁形图标，因此，如果黑客能够找到一种方式，在大公司的安全证书下部署恶意软件，他们就能欺骗更多受害者下载它。
- en: Many websites use content delivery networks (CDNs) or cloud-based storage—such
    as Amazon S3—to serve frequently accessed content. When web developers integrate
    with this type of service, they often route traffic from their domain to the service
    by making DNS changes—for instance, by redirecting traffic on a subdomain such
    as *subdomain.example.com* to the service. This allows content served by the third
    party to be encrypted with the site’s security certificate.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 许多网站使用内容分发网络（CDN）或基于云的存储（如Amazon S3）来提供频繁访问的内容。当网页开发人员与这种类型的服务集成时，他们通常会通过更改DNS将流量从他们的域名引导到该服务，例如将*subdomain.example.com*这样的子域流量重定向到服务。这使得第三方提供的内容可以使用站点的安全证书进行加密。
- en: Hackers frequently attempt *subdomain takeovers* by scanning the internet for
    DNS entries describing subdomains that point to IP addresses for uninitialized
    or deactivated services. They will then register with the service provider and
    *squat* on one of the listed IP addresses. This will allow them to create links
    to their malicious content by using the domain of the victim.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客经常尝试*子域接管*，通过扫描互联网寻找指向未初始化或已停用服务IP地址的子域DNS条目。然后，他们会注册服务提供商并*占用*列出的其中一个IP地址。这将使他们能够通过使用受害者的域名创建指向其恶意内容的链接。
- en: If your website serves content hosted by a CDN or cloud-based storage, you need
    to be careful that your DNS entries point to only live IP addresses. Make DNS
    changes only after you have verified that the service is up and running under
    your control, and revoke DNS changes promptly if you change service providers.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的网站提供由CDN或基于云的存储托管的内容，您需要确保您的DNS条目指向的仅是有效的IP地址。在更改DNS之前，请确保已验证服务在您的控制下正常运行，并且如果更换服务提供商，请及时撤销DNS更改。
- en: Now that you know how to protect your integrations with service providers, let’s
    look at threats in the other direction.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道了如何保护与服务提供商的集成，让我们来看看另一个方向的威胁。
- en: '**Services as an Attack Vector**'
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**作为攻击向量的服务**'
- en: Third-party services are potentially a vector for malicious attacks *against*
    your website. This is particularly true of services you integrate on the client
    side, because any JavaScript you import from a third-party domain comes with security
    risks.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方服务可能成为对您的网站发起恶意攻击的一个向量*。*这一点在您集成客户端服务时尤为重要，因为从第三方域导入的任何JavaScript都带有安全风险。
- en: Let’s use Google Analytics as an example. When you add the Google Analytics
    tool to your site, you register for an account with Google to get a tracking ID
    and then import external JavaScript on pages where you wish to track user activity,
    as shown in [Listing 14-5](ch14.xhtml#ch14list5).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以Google Analytics为例。当您将Google Analytics工具添加到您的网站时，您需要注册一个Google帐户以获取跟踪ID，然后在您希望跟踪用户活动的页面上导入外部JavaScript，如[示例
    14-5](ch14.xhtml#ch14list5)所示。
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 14-5: The recipe for adding Google Analytics to your web pages*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 14-5：将Google Analytics添加到网页的配方*'
- en: 'The imported code can read anything in the page’s DOM, including sensitive
    data the user types in. It will also be able to make changes to the DOM in potentially
    misleading ways; for example, in order to trick the user into entering their credentials.
    It’s important to consider these risks as you add client-side services. Malicious
    code can be served by the third-party service itself or by an attacker that has
    compromised the service. (In case you are wondering: Google Analytics has never
    been compromised by an attacker. I am simply using it as an example here!)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 导入的代码可以读取页面DOM中的任何内容，包括用户输入的敏感数据。它还可能以误导的方式更改DOM；例如，诱使用户输入他们的凭证。在添加客户端服务时，必须考虑到这些风险。恶意代码可以由第三方服务本身提供，或者由攻击者劫持该服务后提供。（如果您想知道：Google
    Analytics从未被攻击者攻破。我这里只是将其作为一个示例！）
- en: Unfortunately, the browser security model is not currently very sophisticated
    when considering how to run client-side code imported from third parties. JavaScript
    code *within* a browser runs in a *sandbox*, meaning it is isolated from the underlying
    operating system and can’t access files on disk, but JavaScript files imported
    from *different* sources on a web page all play in the same sandbox.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在考虑如何运行从第三方导入的客户端代码时，浏览器的安全模型目前并不十分复杂。浏览器中的JavaScript代码在*沙盒*中运行，这意味着它与底层操作系统隔离，无法访问磁盘上的文件，但从*不同*来源导入的JavaScript文件却都在同一个沙盒中运行。
- en: 'The upcoming web components specification (*[https://www.webcomponents.org/](https://www.webcomponents.org/)*),
    currently being developed by the HTML standards committee, defines more-granular
    permissions for code and page elements. While these details are being finalized
    and implemented, however, you should implement sensible security precautions on
    your site. Let’s discuss how to secure your client-side integrations, by looking
    at what is (by far) the most common vector for attacks via a third-party channel:
    *malvertising*.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 即将发布的Web组件规范（* [https://www.webcomponents.org/](https://www.webcomponents.org/)
    *），目前由HTML标准委员会开发，定义了代码和页面元素的更精细的权限。尽管这些细节正在最终确定并实现，但你仍然应该在网站上实施合理的安全预防措施。让我们通过探讨如何保护你的客户端集成，来看一下通过第三方渠道进行攻击的最常见方式：*恶意广告*。
- en: '***Be Wary of Malvertising***'
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***警惕恶意广告***'
- en: 'Advertising is a major part of the modern web: much of the content on the internet
    is funded by advertising revenue, and companies spend more than $100 billion annually
    on online advertisements. Advertisements are usually placed on websites by third-party
    ad platforms. A site owner (referred to as a *publisher* in the online advertising
    world) will subscribe to the ad platform and then demarcate various areas of their
    site as places advertisements should appear. The ad platform will populate these
    spaces as the site loads, using JavaScript imported directly on each page.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 广告是现代网络的重要组成部分：互联网上的大部分内容都是通过广告收入来资助的，且公司每年在在线广告上的支出超过1000亿美元。广告通常是由第三方广告平台放置在网站上的。网站所有者（在在线广告界被称为*发布者*）会订阅广告平台，然后标出他们网站上广告应该出现的位置。广告平台将在网站加载时填充这些区域，使用直接在每个页面中导入的JavaScript。
- en: Major ad platforms such as Google AdSense use analytics to identify the type
    of content a publisher is hosting, and the type of people who visit the site,
    in order to determine the types of advertising to place. Publishers sometimes
    deal with advertisers directly, or have their ad spaces placed on an *exchange*,
    whereby ad buyers purchase *blocks* of ads. (An ad buyer might purchase 1,000
    ad impressions for a particular demographic such as *men aged 18–25 who visit
    sneaker sites*.)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 主要广告平台如Google AdSense使用分析工具来识别发布者托管的内容类型和访问网站的人的类型，从而决定投放的广告类型。发布者有时直接与广告商打交道，或者将广告位放在*广告交换平台*上，通过该平台，广告买家可以购买*广告块*。（广告买家可能会购买1000次广告展示，针对特定人群，例如*访问运动鞋网站的18-25岁男性*。）
- en: As a publisher, you have some control over the advertisements you carry, but
    generally do not get to approve each one beforehand. Google AdSense, for example,
    allows publishers to block categories of ads or specific web domains, or to reject
    specific ads after they have already begun to be shown to users.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 作为发布者，你对你所承载的广告有一定的控制权，但通常不能事先批准每一条广告。例如，Google AdSense允许发布者屏蔽某些广告类别或特定网站域名，或在广告开始展示给用户后拒绝特定广告。
- en: This is a security risk because hackers frequently use ad platforms as an attack
    vector. Malicious ads—*malvertising*—allow an attacker to target many sites at
    once with malware. Malvertising is an increasingly common threat on the internet
    that can embarrass publishers and ad networks, and make victims out of their users.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这构成了一个安全风险，因为黑客经常利用广告平台作为攻击向量。恶意广告——*恶意广告*——使攻击者能够同时通过恶意软件攻击多个网站。恶意广告是互联网上日益严重的威胁，可能会让发布者和广告网络尴尬，并使用户成为受害者。
- en: '***Avoid Malware Delivery***'
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***避免恶意软件传播***'
- en: 'Malware in advertising is typically delivered via *exploit kits*, which determine
    whether a particular browser and operating system is vulnerable before delivering
    the actual malicious code: the *payload*. Payloads can include scripts that redirect
    or lock the browser, viruses or ransomware delivered via vulnerabilities in plug-ins,
    or even JavaScript code that mines cryptocurrency in the user’s browser.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 广告中的恶意软件通常通过*漏洞利用工具包*传播，这些工具包在传递实际的恶意代码（即*有效载荷*）之前，会判断特定的浏览器和操作系统是否存在漏洞：*有效载荷*可能包括重定向或锁定浏览器的脚本、通过插件漏洞传播的病毒或勒索病毒，甚至是通过浏览器挖矿加密货币的JavaScript代码。
- en: Exploit kit authors are in an arms race with security researchers. To avoid
    detection, exploit kits are hosted at dynamically generated URLs and avoid automated
    scans by triggering only sporadically. Exploit kits have even been observed trying
    to prevent malware analysis by detecting when they are running in a virtual machine
    (malware researchers often use virtual machines to quarantine harmful code as
    they analyze it).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞利用工具包的作者与安全研究人员之间处于军备竞赛中。为了避免被检测到，漏洞利用工具包托管在动态生成的URL上，并通过仅偶尔触发来避免自动扫描。甚至有观察到漏洞利用工具包试图通过检测它们是否在虚拟机中运行来阻止恶意软件分析（恶意软件研究人员通常使用虚拟机来隔离有害代码进行分析）。
- en: If your users are being hit by malware delivered through ads on your site, you
    are putting them in danger. You can protect them by making sure you partner with
    only trustworthy ad platforms, deploying ads in secure frames in your web pages,
    and continually being on the lookout for malicious ads.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的用户因为你网站上的广告而遭遇恶意软件攻击，你就把他们置于了危险之中。你可以通过确保只与可信的广告平台合作、在网页中使用安全的框架来展示广告，并不断留意恶意广告来保护他们。
- en: '***Use a Reputable Ad Platform***'
  id: totrans-102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用信誉良好的广告平台***'
- en: For the most part, defending against malvertising is the responsibility of the
    ad platform. They are the ones who have the relationship with the ad buyers, and
    only they have enough visibility across those advertisers to spot malicious actors.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，防范恶意广告是广告平台的责任。它们与广告购买者建立了联系，只有它们能够全面监控这些广告商，从而发现恶意行为者。
- en: Google is (by far) the biggest player in the advertising space. Google permits
    smaller publishers to monetize their sites by using the self-service AdSense platform.
    Larger publishers are granted access to AdX, a platform that allows a publisher
    to specify their advertising partners and set their own prices. Both platforms
    take ads from third-party advertising networks.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌（迄今为止）是广告领域最大的参与者。谷歌允许较小的出版商通过自助广告平台AdSense将其网站实现货币化。较大的出版商可以访问AdX，这是一个允许出版商指定广告合作伙伴并设置自己价格的平台。两个平台都接受第三方广告网络的广告。
- en: Google is remarkably on the ball about defending against malicious ads, since
    so much of their revenue depends on their advertising platform. To take advantage
    of this, you should make AdSense or AdX your first choice when choosing an ad
    platform.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌在防范恶意广告方面表现得非常敏锐，因为它们的收入很大一部分依赖于广告平台。为了利用这一点，你应该在选择广告平台时优先考虑AdSense或AdX。
- en: Google chooses not to work with some types of sites, however, for reputational
    reasons. You will have a hard time getting approved for AdSense if you host adult-themed
    or violent content, for instance. In this scenario, you may have to work with
    a smaller advertising platform that will likely have fewer resources and less
    inclination to secure you against malware. Do your research before picking a platform.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，谷歌出于声誉原因选择不与某些类型的网站合作。例如，如果你托管成人主题或暴力内容，你很难通过AdSense的审核。在这种情况下，你可能不得不与一个资源较少、对防范恶意软件的兴趣较小的较小广告平台合作。在选择平台之前，请做好研究。
- en: '***Use SafeFrame***'
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用SafeFrame***'
- en: The most effective way of isolating third-party content in a web page is to
    host that content inside an `<iframe>` tag. JavaScript code loaded inside an iframe
    (*inline frame*) cannot access the DOM of the containing page. HTML5 adds even
    more granular controls by adding the `sandbox` attribute to the `<iframe>` tag.
    This attribute allows the frame to specify whether the contained content can,
    for example, submit `POST` requests or open new windows.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 隔离网页中的第三方内容最有效的方法是将该内容托管在`<iframe>`标签内。加载在iframe（*内联框架*）中的JavaScript代码无法访问包含页面的DOM。HTML5通过向`<iframe>`标签添加`sandbox`属性提供了更精细的控制。此属性允许框架指定，例如，包含的内容是否可以提交`POST`请求或打开新窗口。
- en: The advertising industry has adopted a standard called *SafeFrame*, which allows
    publishers to specify that ads must be run in an iframe. The SafeFrame standard
    uses `<iframe>` tags, and adds a JavaScript API that allows the advertiser to
    overcome some of the native limitations of iframes. The API permits advertising
    scripts to know when the frame is visible and to respond to size changes, for
    instance.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 广告行业已采用一种名为*SafeFrame*的标准，它允许发布者指定广告必须在iframe中运行。SafeFrame标准使用`<iframe>`标签，并添加了一个JavaScript
    API，使广告商能够克服iframe的一些固有限制。该API允许广告脚本在框架可见时获得通知，并对大小变化作出响应，例如。
- en: Your advertising platform will have an option to show *only* SafeFrame-compliant
    ads, and you should choose that option. This will stop any malicious ad scripts
    that attempt to interfere with the web page as it is rendered.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你的广告平台将提供一个选项，允许你*仅*展示符合SafeFrame标准的广告，你应该选择该选项。这将阻止任何恶意广告脚本，这些脚本试图干扰网页的渲染过程。
- en: '***Tailor Your Ad Preferences***'
  id: totrans-111
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***定制你的广告偏好***'
- en: Most advertising platforms allow you to customize the type of ad content you
    show to users. If you use Google AdSense, make sure you show content from only
    Google certified ad networks. Hackers have been known to buy expired domains for
    smaller, defunct ad networks in order to deliver malware.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数广告平台允许你自定义展示给用户的广告内容类型。如果你使用Google AdSense，确保你只展示来自Google认证广告网络的内容。黑客已经知晓通过购买过期域名，运营较小、已经停用的广告网络来投放恶意软件。
- en: Take stock of what categories of ads you are showing too. You probably want
    to block advertisements for get-rich-quick schemes and multilevel marketing campaigns,
    as well as anything that describes itself as a downloadable utility.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 还要清点你展示的广告类别。你可能希望屏蔽快速致富计划和多级营销活动的广告，以及任何自称为可下载工具的广告。
- en: '***Review and Report Suspicious Ads***'
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***审查并报告可疑广告***'
- en: 'Periodically review the ads being shown on your site from within your ad platform
    dashboard. (Remember: ads are tailored to the visitor, so simply visiting your
    site in a browser won’t show you the full range of ads being shown.) Report and
    block anything that looks suspicious. It is also a good idea to log outgoing URLs
    as users leave your site, so you can track whether any ads you are hosting are
    taking users to suspicious sites.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 定期查看你的网站上展示的广告，方法是通过广告平台仪表板进行查看。（记住：广告是根据访客量身定制的，因此仅在浏览器中访问你的网站，并不能显示所有正在展示的广告。）报告并屏蔽任何可疑的广告。最好记录用户离开你网站时的外部链接，这样你就能追踪到你托管的广告是否将用户引导到可疑网站。
- en: '**Summary**'
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**摘要**'
- en: Vulnerabilities in third-party code are a threat to your website. Use a dependency
    manager to keep track of what third-party dependencies you use, keep your dependency
    inventory under source control, and name explicit dependency versions. Make sure
    your build and deployment processes are scripted, so it is easy to upgrade your
    dependencies when security advisories are issued. (This should include operating
    system patches.) Stay engaged with social media and news sites so you know when
    security advisories are issued. Use auditing tools to detect vulnerable software
    components in your dependency tree. Use the `integrity` attribute when importing
    JavaScript on your web pages so these files can be validated by the browser.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方代码中的漏洞是你网站的一大威胁。使用依赖管理工具来跟踪你使用的第三方依赖项，将你的依赖清单放在源代码控制下，并指定明确的依赖版本。确保你的构建和部署流程是脚本化的，这样当发布安全通告时，你可以轻松地升级依赖项。（这也包括操作系统的补丁。）保持关注社交媒体和新闻网站，了解何时发布安全通告。使用审计工具检测依赖树中存在漏洞的软件组件。在网页中导入
    JavaScript 时，使用`integrity`属性，以便浏览器可以验证这些文件的完整性。
- en: Make sure you are not running with an insecure configuration; hackers will discover
    insecure software components by using simple Google searches. Disable any default
    credentials for your system, and disable open directory listings in your web server
    configuration. Keep sensitive configuration details (for example, database access
    credentials or API keys) out of source control; instead, keep them in a dedicated
    configuration store and load them at startup. Take care to secure configuration
    for test environments and administrative frontends, since they are common targets
    for hackers.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你没有使用不安全的配置；黑客通过简单的Google搜索可以发现不安全的软件组件。禁用系统的任何默认凭证，并在你的Web服务器配置中禁用开放目录列表。将敏感的配置信息（例如数据库访问凭证或API密钥）从源代码控制中移除；相反，应该将其保存在专用的配置存储中，并在启动时加载。特别要注意保护测试环境和管理前端的配置，因为它们是黑客常见的攻击目标。
- en: Be careful not to pass sensitive API keys or access tokens to the client. Secure
    any webhooks against spoofing attacks. If you serve content hosted from other
    locations under your domain—say, by hosting it on a content delivery network or
    in cloud storage—make sure an attacker is not able to put malware on those systems
    and serve it under your security certificate.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 小心不要将敏感的 API 密钥或访问令牌传递给客户端。确保任何 Webhook 防范伪造攻击。如果你通过自己的域名提供来自其他位置的内容—例如，通过内容分发网络或云存储托管—确保攻击者无法在这些系统上放置恶意软件，并通过你的安全证书将其提供给用户。
- en: Know the risks around malware delivered by any ads you host on your site. Use
    a reputable ad network and take advantage of all the SafeFrame-based security
    settings it permits. Periodically review the ads being placed on your site. Report
    any ads you find suspicious and blacklist them.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 了解你在网站上托管的广告可能带来的恶意软件风险。使用信誉良好的广告网络，并充分利用其允许的所有基于 SafeFrame 的安全设置。定期检查你网站上发布的广告，报告任何可疑广告并将其列入黑名单。
- en: In the next chapter, you will look at vulnerabilities related to XML parsing.
    XML is a ubiquitous part of the modern internet and a common target for hackers
    looking to compromise your system.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将了解与 XML 解析相关的漏洞。XML 是现代互联网中无处不在的一部分，也是黑客常用来攻击你系统的目标。
