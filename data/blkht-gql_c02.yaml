- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Setting Up a GraphQL Security Lab
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 设置GraphQL安全实验室
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: 'In this chapter, you’ll begin building your GraphQL dojo: a security testing
    lab environment equipped with GraphQL hacking tools, as well as an intentionally
    vulnerable server that you can use to safely test newly acquired offensive GraphQL
    skills.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将开始构建你的GraphQL道场：一个配备有GraphQL黑客工具的安全测试实验室环境，以及一个故意存在漏洞的服务器，你可以安全地在其中测试新学到的进攻性GraphQL技能。
- en: Understanding how to set up a hacking lab with the right tools becomes more
    important than usual when you are testing an application whose underlying technologies
    haven’t been around for many years. Seasoned technologies have gone through many
    iterations of security reviews and research. With newer technologies, it may take
    some time for similar knowledge bases to develop, and for security testing methodologies
    to circulate in the security community.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当你正在测试一个底层技术已经存在多年且没有得到过多更新的应用程序时，了解如何设置一个正确的黑客实验室变得比以往更加重要。成熟的技术经历了多次安全审查和研究。对于较新的技术，可能需要一些时间才能开发出类似的知识库，并且安全测试方法学也需要在安全社区中传播。
- en: This lack of a knowledge base can pose problems. Imagine that you’re conducting
    a penetration test when you discover a server running an application you’ve never
    seen before. You might start researching the software and looking for known application
    vulnerabilities or publicly available exploits on websites such as the Exploit
    Database ([https://exploit-db.com](https://exploit-db.com)). However, the situation
    could become more complex when the application is using a new framework, such
    as GraphQL. Testing the application would require knowledge of not only the framework
    but also how to retool with the relevant penetration testing tools, a time-consuming
    task when you’re in the midst of a penetration test.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 缺乏知识库可能会带来问题。想象一下，当你进行渗透测试时，发现一台服务器正在运行一个你从未见过的应用程序。你可能会开始研究该软件，并在像漏洞数据库（[https://exploit-db.com](https://exploit-db.com)）这样的公共网站上查找已知的应用程序漏洞或公开的漏洞利用工具。然而，当应用程序使用新框架（如GraphQL）时，情况可能会变得更加复杂。测试该应用程序不仅需要了解框架，还需要重新配置相关的渗透测试工具，这在渗透测试过程中是一项耗时的任务。
- en: The dedicated lab you’ll build in this chapter will support your hands-on hacking
    throughout this book so that the next time you run into GraphQL in the wild, you’ll
    be ready to use the right tools to search and find vulnerabilities. Tinkering
    in a lab has a lot of other benefits too, such as providing practical experience
    through experimentation. The best way to learn about hacking is by getting your
    hands dirty.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中构建的专用实验室将支持你在本书中的动手实践，以便下次你在实际环境中遇到GraphQL时，能够使用正确的工具来搜索和发现漏洞。在实验室中进行探索还有很多其他好处，例如通过实验获得实践经验。学习黑客技术最好的方式就是亲自动手。
- en: Taking Security Precautions
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 采取安全预防措施
- en: 'You should follow a few guidelines whenever you’re building a hacking lab on
    personal equipment:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在你使用个人设备构建黑客实验室时，应该遵循以下几个指南：
- en: '**Avoid connecting the lab directly to the public internet.** Hacking lab environments
    typically involve installing vulnerable code or outdated software. These could
    pose risks to your network, your computer, and your data if they become accessible
    from the internet. You don’t want internet bots to deploy malware on your computer
    or use it as a launchpad to attack others.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免将实验室直接连接到公共互联网。** 黑客实验室环境通常涉及安装脆弱的代码或过时的软件。如果这些环境能够从互联网访问，它们可能会对你的网络、计算机和数据构成风险。你不希望互联网机器人在你的计算机上部署恶意软件或将其作为攻击他人的跳板。'
- en: '**Work through the lab only on trusted local networks.** Anyone on the same
    network as you can also attack the lab. For this reason, we recommend working
    through the book only when you’re connected to networks you trust.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅在受信任的本地网络上进行实验室操作。** 任何与您在同一网络上的人都可以攻击实验室。因此，我们建议仅在连接到您信任的网络时进行本书中的操作。'
- en: '**Deploy the lab in a virtual environment by using a hypervisor, such as Oracle
    VirtualBox.** For VirtualBox ([https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)),
    choose the platform package for your main computer’s operating system. If you
    are running Linux, choose a package for the Linux distribution you are using from
    the list located at [https://www.virtualbox.org/wiki/Linux_Downloads](https://www.virtualbox.org/wiki/Linux_Downloads).
    VirtualBox currently supports all major distributions, such as Ubuntu, Debian,
    and Fedora. Separating the hacking lab environment from your primary operating
    system is generally a good idea, as it prevents software conflicts that could
    potentially break other software on your computer.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过使用虚拟化软件（如 Oracle VirtualBox）在虚拟环境中部署实验室。** 对于 VirtualBox ([https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads))，选择适合你主机操作系统的安装包。如果你使用的是
    Linux，选择与你使用的 Linux 发行版相对应的安装包，下载地址位于 [https://www.virtualbox.org/wiki/Linux_Downloads](https://www.virtualbox.org/wiki/Linux_Downloads)。VirtualBox
    目前支持所有主要的发行版，如 Ubuntu、Debian 和 Fedora。将黑客实验室环境与主操作系统分离通常是个好主意，因为这可以防止可能破坏你计算机上其他软件的冲突。'
- en: '**Make use of the virtual machine snapshot mechanism of your chosen hypervisor.**
    This allows you to take *snapshots* (versions at a specified point in time) of
    the virtual machine and restore it to its original state, in case it happens to
    break in the future. Think of this as clicking the Save button in a video game
    so that you can resume your game later.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用你选择的虚拟化软件的虚拟机快照机制。** 这样可以让你创建虚拟机的 *快照*（在某个指定时间点的版本），并在未来虚拟机出现问题时恢复到其原始状态。可以把这看作是点击视频游戏中的“保存”按钮，以便稍后继续游戏。'
- en: With these best practices in mind, let’s get our hands dirty and our lab up
    and running!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 牢记这些最佳实践，让我们开始动手搭建实验室！
- en: Installing Kali
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Kali
- en: '*Kali* is a Linux distribution created for penetration testing. Based on Debian,
    it was designed by Offensive Security ([https://offensive-security.com](https://offensive-security.com)).
    We’ll use Kali as the base operating system for our GraphQL hacking lab because
    it comes bundled with some of the libraries, dependencies, and tools we’ll need.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*Kali* 是一个为渗透测试设计的 Linux 发行版。基于 Debian，它由 Offensive Security（[https://offensive-security.com](https://offensive-security.com)）设计。我们将使用
    Kali 作为我们的 GraphQL 黑客实验室的基础操作系统，因为它已经捆绑了一些我们需要的库、依赖项和工具。'
- en: 'You can find Kali virtual machine images for the VMware Workstation and Oracle
    VirtualBox hypervisors at [https://www.kali.org/get-kali](https://www.kali.org/get-kali).
    Pick the hypervisor of your choice and follow the official installation instructions
    provided by Offensive Security: [https://www.kali.org/docs/installation](https://www.kali.org/docs/installation).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://www.kali.org/get-kali](https://www.kali.org/get-kali) 找到适用于 VMware
    Workstation 和 Oracle VirtualBox 虚拟化软件的 Kali 虚拟机镜像。选择你喜欢的虚拟化软件，并按照 Offensive Security
    提供的官方安装说明进行操作：[https://www.kali.org/docs/installation](https://www.kali.org/docs/installation)。
- en: After completing the installation process, you should see the Kali login screen
    shown in [Figure 2-1](#figure2-1). Kali ships with a default user account named
    *kali* whose password is *kali*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 完成安装过程后，你应该会看到 [图 2-1](#figure2-1) 中所示的 Kali 登录界面。Kali 默认附带一个名为 *kali* 的用户账户，密码也是
    *kali*。
- en: '![](image_fi/502840c02/F02001.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502840c02/F02001.png)'
- en: 'Figure 2-1: The Kali Linux login screen'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-1：Kali Linux 登录界面
- en: After logging in to Kali, you need to make sure it is up to date. Open Kali’s
    **Applications** menu and, in the search bar, enter **terminal emulator** ([Figure
    2-2](#figure2-2)). Click the corresponding application.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到 Kali 后，你需要确保它是最新的。打开 Kali 的 **应用程序**菜单，在搜索栏中输入**终端仿真器**（[图 2-2](#figure2-2)）。点击对应的应用程序。
- en: '![](image_fi/502840c02/F02002.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502840c02/F02002.png)'
- en: 'Figure 2-2: The Kali Applications menu'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-2：Kali 应用程序菜单
- en: 'Let’s use a few commands to update your software repositories and upgrade your
    installed package. In the terminal window, enter the following commands:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用一些命令来更新软件仓库，并升级已安装的软件包。在终端窗口中输入以下命令：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: From this point on, we will use our Kali machine for all tasks we cover in the
    book. We recommend keeping the terminal window open, as you’ll need it for additional
    installations very soon.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 从此以后，我们将使用 Kali 机器完成本书中的所有任务。我们建议保持终端窗口开启，因为你很快就需要用到它进行其他安装。
- en: Installing Web Clients
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Web 客户端
- en: In Chapter 1, we mentioned that GraphQL APIs can be queried using a variety
    of specialized utilities, such as GraphiQL Explorer, or simple command line–based
    HTTP clients, such as cURL. These tools all make HTTP requests under the hood.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在第1章中，我们提到过，GraphQL API可以通过多种专用工具查询，比如GraphiQL Explorer，或者简单的基于命令行的HTTP客户端，如cURL。这些工具背后都发起了HTTP请求。
- en: 'We’ll install and use two web clients: cURL and Altair. These will allow you
    to experiment with crafting and sending GraphQL queries using both command line
    tools and those with graphical interfaces.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将安装并使用两个Web客户端：cURL和Altair。这将允许你使用命令行工具和图形界面工具进行GraphQL查询的实验。
- en: Querying from the Command Line with cURL
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用cURL从命令行查询
- en: One of the most popular command line HTTP clients, cURL, can make HTTP requests
    just like any graphical web browser. As such, you can use it to query GraphQL
    APIs.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: cURL是最流行的命令行HTTP客户端之一，它可以像任何图形化的网页浏览器一样发起HTTP请求。因此，你可以使用它来查询GraphQL API。
- en: As a hacker, you should become comfortable with operating from the command line.
    Aside from allowing you to automate repetitive tasks more easily, knowing your
    way around the command line gives you the ability to work efficiently when you
    might not have access to graphical interfaces, such as during a penetration test.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个黑客，你应该熟悉从命令行操作。除了让你更容易自动化重复性任务之外，掌握命令行操作还可以在你无法访问图形界面时，如渗透测试中，帮助你高效工作。
- en: 'Let’s go ahead and install cURL. Open the terminal and enter the following
    command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们开始安装cURL。打开终端并输入以下命令：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can verify that cURL was installed and is functioning correctly by issuing
    the following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过执行以下命令验证cURL是否已正确安装并正常工作：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you see a “Hello!” message, it means cURL successfully sent an HTTP GET request
    to the application and received a response.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到“Hello!”消息，这意味着cURL成功地向应用程序发送了HTTP GET请求，并收到了响应。
- en: Querying from a GUI with Altair
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Altair从GUI查询
- en: In Chapter 1, we queried GraphQL APIs by using GraphiQL Explorer, leveraging
    its auto-completion features. While GraphiQL is a very useful tool, it won’t always
    be available to you during a penetration test. To overcome this, you can install
    graphical GraphQL clients locally on your computer. These clients have the capability
    to connect to remote GraphQL servers and return results similarly to the way GraphiQL
    Explorer would. If you provide the remote server address to the graphical client,
    it will take care of the integration with GraphQL behind the scenes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在第1章中，我们通过使用GraphiQL Explorer查询GraphQL API，利用其自动完成功能。虽然GraphiQL是一个非常有用的工具，但在渗透测试期间并不总是能使用它。为了克服这一点，你可以在本地计算机上安装图形化的GraphQL客户端。这些客户端能够连接到远程GraphQL服务器，并以类似GraphiQL
    Explorer的方式返回结果。如果你提供远程服务器地址给图形化客户端，它将自动处理GraphQL的集成。
- en: One of these tools, Altair, is available as a web browser plug-in, as well as
    a local desktop application. Both versions provide the same functionality, and
    there is no downside to choosing either. In this book, we will be using the desktop
    application. However, if you’d like, you can install the browser plug-in for Firefox
    through the add-ons store, which you can find by entering `about:addons` in the
    browser’s address bar.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个工具，Altair，既有作为浏览器插件的版本，也有本地桌面应用程序的版本。这两个版本提供相同的功能，选择任何一个都没有不利之处。在本书中，我们将使用桌面应用程序。然而，如果你愿意，也可以通过添加插件商店安装Firefox的浏览器插件，方法是通过浏览器的地址栏输入`about:addons`。
- en: The Altair desktop client is available for macOS, Linux, and Windows at [https://altair.sirmuel.design/#download](https://altair.sirmuel.design/#download),
    as shown in [Figure 2-3](#figure2-3). Choose the icon that represents the operating
    system you are running. For Kali, you will want to install the Linux version.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Altair桌面客户端可在[https://altair.sirmuel.design/#download](https://altair.sirmuel.design/#download)下载，支持macOS、Linux和Windows，如[图2-3](#figure2-3)所示。选择与你操作系统相对应的图标。如果你使用Kali系统，请安装Linux版本。
- en: 'Download Altair to the *Desktop* directory in Kali. You should see a file with
    the extension *AppImage* after the download is complete:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 将Altair下载到Kali的*Desktop*目录。下载完成后，你应该会看到一个扩展名为*AppImage*的文件：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](image_fi/502840c02/f02003.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502840c02/f02003.png)'
- en: 'Figure 2-3: The available Altair Desktop client versions'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-3：可用的Altair桌面客户端版本
- en: 'Next, we need to change the permissions on the downloaded file to be able to
    run it:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要更改下载文件的权限，以便能够运行它：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now we can execute the file. It should load the client, as shown in [Figure
    2-4](#figure2-4).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以执行该文件了。它应该会加载客户端，如 [图 2-4](#figure2-4) 所示。
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: After you’ve set the right permissions, you should also be able to run the application
    directly by clicking the Altair Desktop icon located on your Kali Desktop.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在你设置好正确的权限后，你应该也能够通过点击位于 Kali 桌面上的 Altair Desktop 图标直接运行该应用程序。
- en: 'Let’s now verify that the client is working as expected. Open it and, in the
    Enter URL address bar, enter ***http://lab.blackhatgraphql.com/graphql***. This
    will ensure that any query we execute will be sent directly to this address. Now,
    in the left-side Query pane, remove the existing code comments (lines that start
    with the `#` symbol) and enter the following query instead:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们验证客户端是否按预期工作。打开它，在输入 URL 地址栏中，输入 ***http://lab.blackhatgraphql.com/graphql***。这将确保我们执行的任何查询都会直接发送到此地址。现在，在左侧的查询窗格中，删除现有的代码注释（以
    `#` 符号开头的行），并输入以下查询：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](image_fi/502840c02/f02004.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502840c02/f02004.png)'
- en: 'Figure 2-4: The Altair Desktop client for Linux'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-4：Linux 的 Altair Desktop 客户端
- en: Finally, click **Send Request**. You should see output similar to that in [Figure
    2-5](#figure2-5).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，点击 **发送请求**。你应该会看到类似于 [图 2-5](#figure2-5) 的输出。
- en: '![](image_fi/502840c02/f02005.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502840c02/f02005.png)'
- en: 'Figure 2-5: A GraphQL response in the Altair Desktop client'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-5：Altair Desktop 客户端中的 GraphQL 响应
- en: Altair is a powerful tool; it will provide us with query auto-completion suggestions,
    as well as schema documentation, historical records of executed queries, and other
    features, such as setting custom HTTP headers and saving queries to a collection,
    making our lives much easier. To learn more about the advanced features of Altair,
    refer to the official documentation page at [https://altair.sirmuel.design/docs/features](https://altair.sirmuel.design/docs/features).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Altair 是一个强大的工具；它将为我们提供查询自动补全建议、模式文档、执行过的查询历史记录以及其他功能，如设置自定义 HTTP 头部和将查询保存到集合中，这些都使我们的工作变得更加轻松。欲了解更多关于
    Altair 高级功能的信息，请参考官方文档页面 [https://altair.sirmuel.design/docs/features](https://altair.sirmuel.design/docs/features)。
- en: Setting Up a Vulnerable GraphQL Server
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置一个脆弱的 GraphQL 服务器
- en: Now that we have the client utilities needed to query any GraphQL server, the
    next step is to install a vulnerable GraphQL server, which we’ll use as our target
    throughout the book. We will use this vulnerable server in our deeper exploration
    of GraphQL in Chapter 3 and throughout the penetration testing exercises in Chapters
    4 through 9.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经拥有了查询任何 GraphQL 服务器所需的客户端工具，接下来的步骤是安装一个脆弱的 GraphQL 服务器，我们将在本书中将其作为目标。我们将在第
    3 章对 GraphQL 进行更深入的探讨，并在第 4 至第 9 章的渗透测试练习中使用这个脆弱的服务器。
- en: Installing Docker
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Docker
- en: '*Docker* ([https://www.docker.com](https://www.docker.com)) is a tool for deploying
    and managing containers. *Containers* are units of software that package up code
    and its dependencies so an application can run reliably in various environments.
    Docker is available on Windows, macOS, and Linux.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*Docker* ([https://www.docker.com](https://www.docker.com)) 是一个部署和管理容器的工具。*容器*
    是打包代码及其依赖项的软件单元，使应用程序可以在各种环境中可靠地运行。Docker 可在 Windows、macOS 和 Linux 上使用。'
- en: 'We’ll use Docker to deploy the application we’ll attack throughout this book.
    Let’s install it from the Kali software repositories by running the following
    command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Docker 来部署本书中我们将要攻击的应用程序。让我们通过运行以下命令从 Kali 软件库中安装它：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, we want to make sure the Docker process will automatically start upon
    system reboot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想确保 Docker 进程在系统重启后会自动启动：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Finally, make sure Docker was successfully installed:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，确保 Docker 已成功安装：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Deploying the Damn Vulnerable GraphQL Application
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署 Damn Vulnerable GraphQL Application
- en: Our target application must be able to simulate common GraphQL application vulnerabilities.
    To achieve this, we will use the *Damn Vulnerable GraphQL Application (DVGA)*,
    a GraphQL application with design- and configuration-level vulnerabilities deliberately
    built in. We developed DVGA in February 2021 to educate users about attacking
    and defending applications backed by GraphQL, and it has since become the de facto
    target application in the GraphQL security space for learning how to hack GraphQL.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标应用程序必须能够模拟常见的 GraphQL 应用程序漏洞。为此，我们将使用 *Damn Vulnerable GraphQL Application
    (DVGA)*，这是一款故意内置了设计和配置级漏洞的 GraphQL 应用程序。我们于 2021 年 2 月开发了 DVGA，目的是教育用户攻击和防御由 GraphQL
    支持的应用程序，它自那时以来成为了 GraphQL 安全领域的事实标准目标应用程序，用于学习如何破解 GraphQL。
- en: DVGA is vulnerable to a variety of issues, including DoS, information disclosure,
    code execution, authentication bypass, Structured Query Language (SQL) injection,
    broken authorization, and more. It offers multiple working modes tailored to both
    beginners and experts and includes built-in functionality to restore itself in
    case it breaks. We will go into more detail about how to use it in Chapters 3
    and 4.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: DVGA 存在多种漏洞，包括 DoS、信息泄露、代码执行、认证绕过、结构化查询语言（SQL）注入、授权破坏等。它提供了多种工作模式，适用于初学者和专家，并包括内置功能，可以在出现故障时自行恢复。我们将在第
    3 章和第 4 章中更详细地讲解如何使用它。
- en: 'The DVGA code is open source and can be found on GitHub at [https://github.com/dolevf/Damn-Vulnerable-GraphQL-Application](https://github.com/dolevf/Damn-Vulnerable-GraphQL-Application).
    Let’s use Git to clone the DVGA repository and use Docker to deploy it. First,
    make sure you have Git installed with the following commands:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: DVGA 代码是开源的，可以在 GitHub 上找到，网址是 [https://github.com/dolevf/Damn-Vulnerable-GraphQL-Application](https://github.com/dolevf/Damn-Vulnerable-GraphQL-Application)。让我们使用
    Git 克隆 DVGA 仓库，并使用 Docker 部署它。首先，确保你的计算机已安装 Git，使用以下命令：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, clone the DVGA repository from GitHub:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从 GitHub 克隆 DVGA 仓库：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then build the DVGA Docker image with the following commands:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用以下命令构建 DVGA Docker 镜像：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, start the DVGA container with the following command. Note that you
    will want to run this specific command if your DVGA happens to crash at any point
    throughout the book:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用以下命令启动 DVGA 容器。如果你的 DVGA 在本书的任何部分崩溃，记得运行此特定命令：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, verify that the container is running by using the following command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过使用以下命令验证容器是否正在运行：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: At this point, the target application should be up and running. Verify this
    by opening a web browser and entering ***http://localhost:5013*** in the address
    bar. You should be able to access the application shown in [Figure 2-6](#figure2-6).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，目标应用程序应该已经启动并正在运行。通过打开网页浏览器并在地址栏中输入***http://localhost:5013***来验证这一点。你应该能够访问[图
    2-6](#figure2-6)中显示的应用程序。
- en: '![](image_fi/502840c02/F02006.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502840c02/F02006.png)'
- en: 'Figure 2-6: The Damn Vulnerable GraphQL Application'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-6：Damn Vulnerable GraphQL 应用程序
- en: As you can see, DVGA resembles Pastebin ([https://pastebin.com](https://pastebin.com)),
    a web application that allows clients to submit random text snippets (such as
    source code or other text) and share them with others. These text snippets are
    also called *pastes*, a term we will use throughout this book as we walk through
    penetration-testing scenarios using DVGA. Pastes can have metadata, such as titles,
    content, author information, and so on. You will be able to see this information
    when we run queries against DVGA. [Figure 2-7](#figure2-7) shows an example of
    a paste in DVGA.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，DVGA 类似于 Pastebin ([https://pastebin.com](https://pastebin.com))，这是一个允许客户端提交随机文本片段（如源代码或其他文本）并与他人共享的
    web 应用程序。这些文本片段也被称为 *pastes*，这是我们将在本书中使用的术语，我们将在穿越渗透测试场景时使用 DVGA。粘贴内容可以包含元数据，如标题、内容、作者信息等。当我们针对
    DVGA 运行查询时，你将能够看到这些信息。[图 2-7](#figure2-7) 显示了 DVGA 中的一个示例粘贴。
- en: '![](image_fi/502840c02/F02007.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502840c02/F02007.png)'
- en: 'Figure 2-7: A sample paste in DVGA'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-7：DVGA 中的一个示例粘贴
- en: You can see the title and content of the paste, as well as its author (Darcee)
    and some metadata about them, such as their internet protocol (IP) address (215.0.2.85)
    and web browser (Mozilla/5.0).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到粘贴的标题和内容，以及其作者（Darcee）和一些元数据，例如他们的互联网协议（IP）地址（215.0.2.85）和网络浏览器（Mozilla/5.0）。
- en: Testing DVGA
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试 DVGA
- en: Now that you have a target application in your lab environment, verify that
    the application is up and its GraphQL API is accessible on the network with a
    simple GraphQL query. For this, we’ll use the Altair client we installed earlier.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经在实验环境中部署了目标应用程序，请验证该应用程序是否启动，并且其 GraphQL API 是否可以通过简单的 GraphQL 查询访问。为此，我们将使用之前安装的
    Altair 客户端。
- en: 'Open the Altair client and enter ***http://localhost:5013/graphql*** in the
    address bar. Next, enter the following GraphQL query in the left pane:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 Altair 客户端，在地址栏中输入 ***http://localhost:5013/graphql***。接下来，在左侧窗格中输入以下 GraphQL
    查询：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This query should result in output similar to that shown in [Figure 2-8](#figure2-8).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询应输出类似于[图 2-8](#figure2-8)所示的结果。
- en: '![](image_fi/502840c02/f02008.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502840c02/f02008.png)'
- en: 'Figure 2-8: The DVGA response in Altair'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-8：Altair 中的 DVGA 响应
- en: Names in GraphQL are case-sensitive, so make sure you follow the capitalization
    in `systemHealth`; otherwise, this query will result in an error.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL 中的名称是区分大小写的，因此请确保按照 `systemHealth` 中的大小写进行操作；否则，此查询将导致错误。
- en: Installing GraphQL Hacking Tools
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 GraphQL 黑客工具
- en: In Chapter 1, we highlighted the differences between REST and GraphQL APIs.
    These differences required the security industry to build GraphQL support into
    existing tools. In some cases, hackers also created new tools designed exclusively
    for penetration testing GraphQL applications. The hacking tools we will install
    in the lab and use in our hacking exercises in later chapters are capable of security-testing
    GraphQL applications.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 1 章中，我们强调了 REST 和 GraphQL API 之间的差异。这些差异要求安全行业将 GraphQL 支持集成到现有工具中。在某些情况下，黑客还创建了专门用于渗透测试
    GraphQL 应用程序的新工具。我们将在实验中安装并在后续章节的黑客演练中使用这些能够进行 GraphQL 应用程序安全测试的工具。
- en: Burp Suite
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Burp Suite
- en: '*Burp Suite* is application security testing software by PortSwigger ([https://portswigger.net](https://portswigger.net))
    that proxies traffic between your web browser and the target application, allowing
    you to intercept, modify, and replay requests coming in and out of your computer.
    In our GraphQL security lab, we’ll use Burp Suite to manually interact with our
    target by observing and modifying GraphQL queries before they are sent to the
    target server.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '*Burp Suite* 是 PortSwigger 提供的应用程序安全测试软件（[https://portswigger.net](https://portswigger.net)），它代理您网页浏览器和目标应用程序之间的流量，使您能够拦截、修改并重放进出计算机的请求。在我们的
    GraphQL 安全实验中，我们将使用 Burp Suite 手动与目标进行交互，通过观察并修改 GraphQL 查询，在它们发送到目标服务器之前进行操作。'
- en: 'Newer versions of Kali should have Burp Suite installed by default. Let’s verify
    this by opening the terminal and entering the following command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 更新版本的 Kali 应该默认安装了 Burp Suite。我们可以通过打开终端并输入以下命令来验证这一点：
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now we’ll open Burp Suite and check that it can successfully intercept traffic.
    In the Kali Applications menu’s search bar, enter **Burp Suite** and click the
    application. If this is the first time you’ve loaded the application, read the
    Terms and Conditions and click **I Accept**.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将打开 Burp Suite，并检查它是否能够成功拦截流量。在 Kali 应用菜单的搜索栏中输入**Burp Suite**并点击该应用。如果这是您第一次加载该应用，请阅读服务条款并点击**我接受**。
- en: Create a temporary project by selecting the **Temporary Project** radio button,
    and click **Next**. Burp Suite will ask which configuration file to load for the
    project. Choose **Use Burp Defaults** and click **Start Burp**.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**临时项目**单选按钮，创建一个临时项目，并点击**下一步**。Burp Suite 会询问要加载哪个配置文件。选择**使用 Burp 默认设置**并点击**启动
    Burp**。
- en: Next, let’s ensure that Burp Suite can proxy HTTP traffic to DVGA. Click **Proxy**▶**Intercept**▶**Open
    Browser**. In the browser, enter ***http://localhost:5013/graphiql*** and press
    ENTER. This will initiate a GET request to DVGA, which Burp Suite should automatically
    intercept.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们确保 Burp Suite 可以代理 HTTP 流量到 DVGA。点击**代理**▶**拦截**▶**打开浏览器**。在浏览器中，输入***http://localhost:5013/graphiql***并按回车键。这将发起一个
    GET 请求到 DVGA，Burp Suite 应该会自动拦截该请求。
- en: Burp Suite should now highlight the **Intercept** tab (typically in orange),
    indicating it has intercepted the outgoing request. You should see an in-flight
    HTTP GET request, similar to the one shown in [Figure 2-9](#figure2-9).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite 现在应该会突出显示**拦截**标签（通常是橙色的），表示它已拦截了传出的请求。您应该能看到一个正在传输的 HTTP GET 请求，类似于[图
    2-9](#figure2-9)所示的内容。
- en: This request has yet to leave your web browser. Burp Suite allows you to make
    modifications to it before sending it to the server. Go ahead and click the **Intercept
    Is On** button. This will unblock the request and send it to DVGA.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 此请求尚未离开您的网页浏览器。Burp Suite 允许您在将其发送到服务器之前进行修改。请点击**拦截已开启**按钮，这将解除请求的拦截并将其发送到
    DVGA。
- en: We’ve verified that Burp Suite is installed and configured and can intercept
    traffic going from your browser to DVGA. Great work! Burp Suite is so feature
    rich that an entire book can be written on it. To learn more about this tool,
    we recommend referencing its official documentation ([https://portswigger.net/burp/documentation/desktop/penetration-testing](https://portswigger.net/burp/documentation/desktop/penetration-testing)).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经验证了 Burp Suite 已安装并配置好，能够拦截从浏览器到 DVGA 的流量。干得好！Burp Suite 功能丰富，足以写一本书来介绍它。要了解更多关于此工具的信息，我们建议参考其官方文档（[https://portswigger.net/burp/documentation/desktop/penetration-testing](https://portswigger.net/burp/documentation/desktop/penetration-testing)）。
- en: '![](image_fi/502840c02/f02009.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502840c02/f02009.png)'
- en: 'Figure 2-9: Intercepting a request in Burp Suite'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-9：在 Burp Suite 中拦截请求
- en: Clairvoyance
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Clairvoyance
- en: In Chapter 1, we introduced GraphQL schemas, which represent the structure of
    the application’s data model. Developers who want to interact with a GraphQL API
    will need to know what data they can access, as well as what queries or mutations
    the API supports. GraphQL exposes this schema information through the introspection
    query.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章中，我们介绍了 GraphQL 架构，它代表了应用程序数据模型的结构。想要与 GraphQL API 交互的开发人员需要了解他们可以访问哪些数据，以及
    API 支持哪些查询或变更。GraphQL 通过 introspection 查询公开这些架构信息。
- en: In simple terms, *introspection* is a feature in GraphQL that allows it to describe
    its own data to the client. [Listing 2-1](#listing2-1) shows a basic *introspection
    query* that returns a list of all the available queries from the schema. We’ll
    cover these queries in more detail in Chapter 3.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，*introspection* 是 GraphQL 中的一个特性，允许它向客户端描述自己的数据。[示例 2-1](#listing2-1) 显示了一个基本的
    *introspection 查询*，返回架构中所有可用查询的列表。我们将在第三章中更详细地介绍这些查询。
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Listing 2-1: A basic introspection query'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 2-1：一个基本的 introspection 查询
- en: As you can imagine, companies that allow clients to perform introspection queries
    against their GraphQL APIs are making a security trade-off. Information about
    the various fields and objects that the backend application supports can only
    aid threat actors and increase their chances of successfully finding vulnerabilities.
    As such, production-grade implementations will often disable introspection. This
    means you may be required to test GraphQL applications in production setups that
    don’t allow introspection queries to be executed. In these situations, figuring
    out how to properly construct queries may pose a challenge.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所想，允许客户对其 GraphQL API 执行 introspection 查询的公司实际上是在做出一个安全上的权衡。关于后端应用程序支持的各种字段和对象的信息，可能会帮助攻击者，增加他们成功发现漏洞的机会。因此，生产级的实现通常会禁用
    introspection。这意味着你可能需要在不允许执行 introspection 查询的生产环境中测试 GraphQL 应用程序。在这种情况下，弄清楚如何正确构建查询可能会成为一个挑战。
- en: This is where *Clairvoyance* comes to the rescue. This Python-based reconnaissance
    tool for GraphQL APIs, developed by Nikita Stupin ([@_nikitastupin](http://www.twitter.com/@_nikitastupin))
    and Ilya Tsaturov ([@itsaturov](http://www.twitter.com/@itsaturov)), allows you
    to discover schema information when introspection is disabled. It works by abusing
    a GraphQL feature called *field suggestions*. Essentially, it reconstructs the
    underlying schema by sending queries crafted from a dictionary of common English
    words and observing the server’s responses. We’ll go into more detail about field
    suggestions and how they help us extract information about GraphQL schemas in
    Chapter 6.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这时，*Clairvoyance* 就派上用场了。这款基于 Python 的 GraphQL API 侦察工具由 Nikita Stupin ([@_nikitastupin](http://www.twitter.com/@_nikitastupin))
    和 Ilya Tsaturov ([@itsaturov](http://www.twitter.com/@itsaturov)) 开发，允许你在禁用 introspection
    的情况下发现架构信息。它通过滥用 GraphQL 的一个特性——*字段建议*，工作原理是通过发送来自常见英语单词字典构建的查询并观察服务器的响应，重建底层架构。我们将在第六章更详细地讨论字段建议及其如何帮助我们提取
    GraphQL 架构的信息。
- en: 'Let’s go ahead and install Clairvoyance. Open the terminal and enter the following
    commands:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续安装 Clairvoyance。打开终端并输入以下命令：
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can verify that Clairvoyance is able to run by passing the `-h` flag to
    the Clairvoyance script:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过向 Clairvoyance 脚本传递 `-h` 参数来验证 Clairvoyance 是否能够运行：
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: InQL
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: InQL
- en: Until recently, not many resources for GraphQL security testing were publicly
    available, even as GraphQL adoption increased. To fill this gap, the security
    firm Doyensec developed *Introspection GraphQL* (*InQL)*.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 直到最近，即使 GraphQL 的使用逐渐增加，关于 GraphQL 安全测试的资源仍然很少公开。为填补这一空白，安全公司 Doyensec 开发了 *Introspection
    GraphQL* (*InQL*)。
- en: This security testing tool, based on Python, relies on the introspection query.
    InQL can export any information it finds about the GraphQL schema to a variety
    of formats, making the application’s schema easier to read and understand. InQL
    also can perform other tasks, such as detecting potential DoS conditions.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这个基于 Python 的安全测试工具依赖于 introspection 查询。InQL 可以将它找到的关于 GraphQL 架构的任何信息导出为多种格式，使得应用程序的架构更容易阅读和理解。InQL
    还可以执行其他任务，例如检测潜在的 DoS 条件。
- en: 'Let’s install InQL. Open the terminal and enter the following commands:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装 InQL。打开终端并输入以下命令：
- en: '[PRE20]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Verify that the installation succeeded and that InQL is able to run by passing
    it the `-h` flag:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递 `-h` 参数来验证安装是否成功，确保 InQL 可以运行：
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: If you see similar output, InQL was successfully installed. We’ll use the tool
    in penetration testing exercises later in the book.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到类似的输出，说明 InQL 已成功安装。我们将在本书后续的渗透测试练习中使用该工具。
- en: Graphw00f
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Graphw00f
- en: Over the years, the GraphQL community has developed GraphQL server implementations
    in many programming languages, such as graphql-php for PHP, and Graphene and Ariadne
    for Python. For us hackers, it’s crucial to identify the technologies that our
    target server is running behind the scenes. Once we gather this information, we’ll
    be able to tailor attacks to the technology we’re facing, increasing our overall
    chances of success.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，GraphQL 社区已经开发出了多种编程语言的 GraphQL 服务器实现，例如 PHP 的 graphql-php，Python 的 Graphene
    和 Ariadne。对我们黑客来说，识别目标服务器背后运行的技术至关重要。一旦我们收集到这些信息，就能够根据所面对的技术定制攻击策略，从而提高整体成功率。
- en: '*Graphw00f* is a Python-based GraphQL security tool that we developed to identify
    a GraphQL API’s specific implementation. We built it primarily because GraphQL
    doesn’t generally advertise the type of engine it’s using under the hood. We wondered
    whether you could identify the implementation solely based on API responses; it
    turns out you can. Graphw00f manages to fingerprint the implementation by sending
    a mix of valid and malformed queries to the server and observing the subtle differences
    in the returned error messages. It can currently fingerprint over 24 implementations,
    including the majority of the popular GraphQL servers in use today.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '*Graphw00f* 是一款基于 Python 的 GraphQL 安全工具，我们开发它的目的是识别 GraphQL API 的特定实现。我们之所以开发它，主要是因为
    GraphQL 通常不会公开它在背后使用的引擎类型。我们想知道是否能仅凭 API 响应就识别实现，结果发现是可以的。Graphw00f 通过向服务器发送有效和格式错误的查询，并观察返回错误信息中的微小差异，成功地指纹识别实现。目前它可以识别超过
    24 种实现，包括目前使用的多数流行的 GraphQL 服务器。'
- en: This implementation information is especially interesting because not all of
    the available GraphQL implementations available today support the same security
    features out of the box. For example, some implementations offer external libraries
    for implementing authorization controls, while others do not. Identifying the
    backend technology gives us these additional data points to guide our testing.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这项实现信息尤其有趣，因为并不是所有今天可用的 GraphQL 实现都具备相同的安全功能。例如，一些实现提供了用于实现授权控制的外部库，而其他的则没有。识别后端技术可以为我们提供这些额外的数据点，以指导我们的测试。
- en: 'To install Graphw00f, open the terminal and enter the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Graphw00f，打开终端并输入以下命令：
- en: '[PRE22]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Verify that Graphw00f can successfully start by using the `-h` command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `-h` 命令验证 Graphw00f 是否可以成功启动：
- en: '[PRE23]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: BatchQL
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: BatchQL
- en: '*BatchQL* is a GraphQL security auditing script written in Python and developed
    by the security firm Assetnote. The tool is named after a GraphQL feature called
    *batching* that allows clients to send multiple queries in a single HTTP request.
    You’ll learn more about batch queries in later chapters.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '*BatchQL* 是一款用 Python 编写的 GraphQL 安全审计脚本，由安全公司 Assetnote 开发。该工具的名称源于 GraphQL
    的一个特性，叫做 *批处理*，它允许客户端在一个 HTTP 请求中发送多个查询。你将在后面的章节中了解更多关于批量查询的内容。'
- en: 'BatchQL attempts to identify flaws in GraphQL implementations related to the
    following vulnerability classes: DoS, CSRF, and information disclosure. Install
    it by executing the following command:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: BatchQL 尝试识别与以下漏洞类别相关的 GraphQL 实现中的缺陷：DoS、CSRF 和信息泄露。通过执行以下命令进行安装：
- en: '[PRE24]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Verify that BatchQL is working properly by passing it the `-h` flag:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递 `-h` 标志来验证 BatchQL 是否正常工作：
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Nmap
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Nmap
- en: Developed by Gordon Lyon (also known as “Fyodor”), Nmap is the Swiss Army knife
    of port scanning. It’s also one of the oldest security tools out there today,
    created in September 1997\. (It’s quite amazing that it has remained the de facto
    port-scanning tool decades later.)
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap 由 Gordon Lyon（也被称为 “Fyodor”）开发，是一款端口扫描的瑞士军刀。它也是目前最古老的安全工具之一，创建于 1997 年
    9 月。（令人惊讶的是，它几十年后仍然是事实上的端口扫描工具。）
- en: We’ll use Nmap’s port-scanning capability and its custom scripting engine, called
    the *Nmap Scripting Engine (NSE)*. NSE uses scripts written in the Lua language
    to extend Nmap into a full-blown vulnerability-assessment tool. We’ll leverage
    this functionality to scan for GraphQL servers and find vulnerabilities.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Nmap 的端口扫描功能及其自定义脚本引擎 *Nmap 脚本引擎（NSE）*。NSE 使用用 Lua 语言编写的脚本将 Nmap 扩展为一个完整的漏洞评估工具。我们将利用这个功能来扫描
    GraphQL 服务器并寻找漏洞。
- en: 'Kali comes bundled with Nmap by default. Verify that you have it installed
    with the following command:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Kali 默认自带 Nmap。使用以下命令验证是否已安装 Nmap：
- en: '[PRE26]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, download the *nmap-graphql-introspection-nse* Lua script for Nmap and
    place it in the NSE *scripts* folder:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，下载 *nmap-graphql-introspection-nse* Lua 脚本，并将其放入 NSE *scripts* 文件夹：
- en: '[PRE27]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let’s now verify that Nmap can find and read the script by passing it the `--script-help`
    command argument:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们验证 Nmap 是否能够找到并读取脚本，通过传递 `--script-help` 命令参数来实现：
- en: '[PRE28]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Commix
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Commix
- en: '*Command Injection Exploiter (Commix)* is an open source project written in
    Python and developed by Anastasios Stasinopoulos. Commix attempts to find and
    exploit command injection vulnerabilities in an automated fashion by fuzzing various
    parts of an HTTP request, such as query parameters or the request body, using
    specialized payloads. The tool is also capable of exploiting these vulnerabilities
    and can spawn a custom interactive shell, which penetration testers can use to
    gain a foothold in remote servers.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '*命令注入漏洞利用工具 (Commix)* 是一个由 Anastasios Stasinopoulos 开发的开源项目，使用 Python 编写。Commix
    通过模糊测试 HTTP 请求的各个部分（如查询参数或请求体）来自动化寻找并利用命令注入漏洞，使用特定的载荷。该工具还能够利用这些漏洞，生成一个自定义的交互式
    shell，渗透测试人员可以用它来在远程服务器上获取立足点。'
- en: 'Commix should be preinstalled in Kali by default, but to ensure that it is
    indeed available and working properly, run the following set of commands:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Commix 应该默认预装在 Kali 中，但为了确保它已正确安装并正常工作，请运行以下一组命令：
- en: '[PRE29]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: graphql-path-enum
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: graphql-path-enum
- en: Written in Rust and developed by dee_see ([@dee_see](http://www.twitter.com/@dee_see)),
    *graphql-path-enum* is a security testing tool that finds various ways to construct
    queries that reach a specific piece of data. By doing so, it arms hackers with
    information that could assist them in identifying authorization flaws. We’ll discuss
    GraphQL authorization vulnerabilities in Chapter 7.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 由 dee_see（[@dee_see](http://www.twitter.com/@dee_see)）编写的 Rust 语言开发的 *graphql-path-enum*
    是一个安全测试工具，用于寻找构建查询的不同方式，目标是达到特定的数据。这为黑客提供了有助于识别授权漏洞的信息。我们将在第 7 章中讨论 GraphQL 的授权漏洞。
- en: 'Install graphql-path-enum by running the following commands:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令安装 graphql-path-enum：
- en: '[PRE30]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Verify that it can successfully run with its new permissions by passing it
    the `-h` flag:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递 `-h` 标志来验证它是否能够成功运行并具有新的权限：
- en: '[PRE31]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: EyeWitness
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: EyeWitness
- en: '*EyeWitness* is a web-scanning tool developed by Chris Truncer and Rohan Vazarkar
    that is capable of capturing screenshots of target web applications. When scanning
    many websites in a penetration test, you’ll often find it useful to visually identify
    what’s running on them. EyeWitness achieves this using a command line–based web
    browser (also called a *headless browser*) under the hood, which allows it to
    load dynamic web content, such as content loaded dynamically using JavaScript.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '*EyeWitness* 是一款由 Chris Truncer 和 Rohan Vazarkar 开发的 Web 扫描工具，能够捕获目标 Web 应用程序的截图。在渗透测试中扫描多个网站时，您通常会发现，视觉识别它们正在运行什么内容非常有用。EyeWitness
    通过一个基于命令行的 Web 浏览器（也叫 *无头浏览器*）来实现这一点，它可以加载动态的 Web 内容，如使用 JavaScript 动态加载的内容。'
- en: 'Install EyeWitness with the following command:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装 EyeWitness：
- en: '[PRE32]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: GraphQL Cop
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GraphQL Cop
- en: We developed GraphQL Cop, a dedicated GraphQL security auditing utility based
    on Python. GraphQL Cop audits GraphQL servers for information disclosure and DoS-based
    vulnerabilities. In later chapters, we will use this tool to check whether GraphQL
    servers are protected against common attacks.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开发了 GraphQL Cop，一款基于 Python 的专用 GraphQL 安全审计工具。GraphQL Cop 用于审计 GraphQL 服务器的
    信息泄露和 DoS 类型漏洞。在后续章节中，我们将使用此工具检查 GraphQL 服务器是否能防范常见攻击。
- en: 'Install GraphQL Cop with the following set of commands:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下一组命令安装 GraphQL Cop：
- en: '[PRE33]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: CrackQL
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CrackQL
- en: 'We developed CrackQL, a specialized brute-forcing tool for GraphQL that uses
    GraphQL language features to better optimize brute-force attacks against API actions
    that may require authentication. We will use this tool in Chapter 7, when we perform
    dictionary-based attacks against our GraphQL target. Install CrackQL as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开发了 CrackQL，一款专门针对 GraphQL 的暴力破解工具，它利用 GraphQL 语言特性来优化针对可能需要身份验证的 API 操作的暴力攻击。我们将在第
    7 章中使用此工具，进行基于字典的攻击，攻击我们的 GraphQL 目标。按照以下步骤安装 CrackQL：
- en: '[PRE34]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Once you’ve installed all of these tools, we highly encourage you to take a
    snapshot of your Kali virtual machine to ensure that its state is saved. You’ll
    then be able to restore it should it break in the future.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你安装了所有这些工具，我们强烈建议你对Kali虚拟机进行快照，以确保其状态得到保存。这样一来，未来如果虚拟机出现故障，你就能恢复到之前的状态。
- en: Summary
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Let’s summarize what you currently have in your lab: graphical and command
    line HTTP clients that can interact with GraphQL, a working Docker environment
    for deploying containers, and the DVGA target application.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下你目前在实验室中拥有的内容：可以与GraphQL交互的图形化和命令行HTTP客户端，一个用于部署容器的工作Docker环境，以及DVGA目标应用程序。
- en: This chapter briefly discussed how these tools work under the hood and the needs
    they fill, such as information gathering, server fingerprinting, network and application
    scanning, vulnerability assessments, and GraphQL auditing. You’ll explore their
    use in more depth in the remaining chapters.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 本章简要讨论了这些工具的工作原理以及它们满足的需求，如信息收集、服务器指纹识别、网络和应用扫描、漏洞评估和GraphQL审计。你将在后续章节中更深入地探索它们的使用。
- en: This lab is an essential part of this book, but it might also prove valuable
    for your next real-world penetration test. We encourage you to keep an eye on
    the Black Hat GraphQL GitHub repository ([https://github.com/dolevf/Black-Hat-GraphQL.git](https://github.com/dolevf/Black-Hat-GraphQL.git)),
    where we maintain a list of current and future GraphQL security tools to help
    you keep your lab up to date.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 本实验室是本书的核心部分，但它也可能对你下一次的真实世界渗透测试有所帮助。我们鼓励你关注Black Hat GraphQL GitHub 仓库 ([https://github.com/dolevf/Black-Hat-GraphQL.git](https://github.com/dolevf/Black-Hat-GraphQL.git))，我们在该仓库中维护着当前和未来的GraphQL安全工具列表，帮助你保持实验室的更新。
