- en: '**18'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**18'
- en: UPGRADING FREEBSD**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 升级 FreeBSD**
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: Upgrading servers is perhaps the most annoying task in the system administrator’s
    routine. I can manage unexplained behavior on my desktop after an upgrade, but
    when my whole organization or hundreds of customers depend on one server, even
    thinking of touching that system makes my bowels churn. Any operating system upgrade
    can expand your burgeoning gray hair collection. Even very experienced sysadmins,
    faced with a choice between upgrading a critical system in-place and jabbing red-hot
    needles into their own eyes, frequently have to sit down and consider their choices.
    Virtualized and orchestrated cloud systems might seem less troublesome, but even
    with these, preparing for an upgrade can cause sleepless nights. Remember, despite
    all its benefits, automation is a wonderful way to go wrong at scale.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 升级服务器可能是系统管理员日常工作中最让人头痛的任务。我可以应对桌面在升级后出现的不可解释的行为，但当我的整个组织或数百个客户依赖一台服务器时，甚至想动一下系统都会让我感到不安。任何操作系统的升级都可能让你增加越来越多的白发。即使是非常有经验的系统管理员，在面对升级一个关键系统的选择时，也经常需要坐下来仔细考虑自己的选择，这比用红热的针刺自己眼睛还要让人犹豫不决。虚拟化和编排的云系统可能看起来不那么麻烦，但即使如此，准备升级也会让人彻夜难眠。记住，尽管自动化带来了许多好处，但它在大规模实施时也可能是一条通往错误的捷径。
- en: One of FreeBSD’s greatest strengths is its upgrade procedure. FreeBSD is designed
    as a monolithic operating system, not a collection of packages. (Even if FreeBSD
    migrates to providing the base system as packages, it will remain designed and
    built as a monolithic entity.) I’ve had hosts running through five different major
    releases of FreeBSD and innumerable patch levels in between without reinstalling
    the system. I decommission FreeBSD systems only when they are so old that the
    risk of hardware failure keeps me awake at night.^([1](footnote.xhtml#ch18fn1))
    While I might worry about applications running on top of the operating system,
    even upgrading across major FreeBSD releases doesn’t worry me anymore.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD 的最大优势之一就是它的升级程序。FreeBSD 设计为一个整体操作系统，而不是一组软件包。（即使 FreeBSD 转向将基础系统提供为软件包，它仍然会保持整体设计和构建的方式。）我曾经让多个主机通过五个不同的主要版本和无数的修补级别，而无需重新安装系统。只有当
    FreeBSD 系统老旧到硬件故障的风险让我晚上无法安睡时，我才会退役它们。^([1](footnote.xhtml#ch18fn1)) 虽然我可能会担心操作系统上运行的应用程序，但即使是跨越主要版本的升级，现在也不再让我担心了。
- en: '**FreeBSD Versions**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**FreeBSD 版本**'
- en: 'Why is upgrading FreeBSD a relatively simple matter? The key is FreeBSD’s development
    method. FreeBSD is a continually evolving operating system. If you download the
    current version of FreeBSD in the afternoon, it’ll be slightly different from
    the morning version. Developers from around the world continually add changes
    and improvements, which makes the traditional strict release numbering used by
    less open software impractical. At any given moment, you can get several different
    versions of FreeBSD: releases, -stable, -current, and snapshots.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么升级 FreeBSD 是一件相对简单的事情？关键在于 FreeBSD 的开发方法。FreeBSD 是一个不断发展的操作系统。如果你在下午下载当前版本的
    FreeBSD，它会和早上版本略有不同。来自世界各地的开发者不断添加更改和改进，这使得传统的严格发布版本号（常见于封闭软件）不再适用。在任何给定的时刻，你可以获得几种不同版本的
    FreeBSD：发布版本、-stable、-current 和快照版本。
- en: '***Releases***'
  id: totrans-7
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***发布版本***'
- en: FreeBSD issues major and minor releases. A *major release* has a version number
    like 11.0, 12.0, 13.0, or so on. Each major release includes large features not
    found in earlier major releases. Sweeping changes appear only in major releases.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD 发布主要版本和次要版本。*主要版本*的版本号像 11.0、12.0、13.0 等等。每个主要版本都包含在早期版本中没有的大特性。大规模的更改仅出现在主要版本中。
- en: A *minor release* is an updated version of a major release. You’ll see minor
    releases like 12.1-RELEASE, 12.2-RELEASE, 12.3-RELEASE, and so on. (Most people
    drop the word *release* from these names.) These minor releases add small features
    and bug fixes to the major release. You might get new functions or programs, but
    only if they don’t interfere with the existing functions. Unexpected, disruptive
    changes are avoided.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*次要版本*是主要版本的更新版本。你会看到像 12.1-RELEASE、12.2-RELEASE、12.3-RELEASE 等次要版本。（大多数人会省略“release”这个词。）这些次要版本为主要版本添加了一些小功能和修复错误。你可能会得到新的功能或程序，但只有在这些新功能不会干扰现有功能的情况下。避免出现意外的、破坏性的更改。'
- en: You’ll also see *patch levels*. Thanks to freebsd-update(8), patching a release
    is quick and easy. Patch numbers are given as numbers after the release. This
    means you’ll see FreeBSD versions like 12.1-RELEASE-p20, 11.4-RELEASE-p9, 13.0-RELEASE-p31,
    and so on.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会看到 *补丁级别*。多亏了 freebsd-update(8)，更新发布变得又快又容易。补丁号通常作为版本后的数字显示。这意味着你会看到类似 12.1-RELEASE-p20、11.4-RELEASE-p9、13.0-RELEASE-p31
    等 FreeBSD 版本。
- en: Users are expected to closely track their major release by upgrading through
    successive minor releases, much like other operating systems.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 用户应通过逐步升级各个次版本来密切跟踪其主要版本，就像其他操作系统一样。
- en: '***FreeBSD-current***'
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***FreeBSD-current***'
- en: FreeBSD-current, also called *-current* or *HEAD*, is the bleeding-edge, latest
    version of FreeBSD, which contains code that’s making its first public appearance.
    While the developers have test servers and post patches for review before applying,
    that’s still much less exposure than the wide userbase of FreeBSD-current. FreeBSD-current
    is where much initial peer review takes place; at times, current undergoes radical
    changes that give experienced sysadmins migraines.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD-current，也叫做 *-current* 或 *HEAD*，是 FreeBSD 的最前沿版本，包含了首次公开发布的代码。尽管开发者有测试服务器，并在应用之前发布补丁供审核，但这仍然比
    FreeBSD-current 的广泛用户群体的曝光要少得多。FreeBSD-current 是初步同行评审进行的地方；有时，current 会经历激烈的变化，给有经验的系统管理员带来头痛。
- en: FreeBSD-current is made available for developers, testers, and interested parties,
    but it’s not intended for general use. Support for user questions about -current
    is very slim because the developers simply don’t have time to help a user fix
    his web browser while thousands more critical problems demand attention. Users
    are expected to help fix these problems or to patiently endure them until someone
    else fixes them.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD-current 为开发者、测试人员和感兴趣的各方提供，但它并不适用于一般用途。由于开发者根本没有时间在成千上万的紧急问题面前帮助用户修复他的网页浏览器，因此对
    -current 用户问题的支持非常有限。用户需要帮助修复这些问题，或者耐心忍受，直到其他人修复它们。
- en: To make matters worse, -current’s default settings include assorted debugging
    code, special warnings, and related developer features. These make -current run
    slower than any other version of FreeBSD. You can disable all this debugging,
    but if you do so, you won’t be able to file a proper trouble report when you have
    a problem. This means that you’re even more out on your own. Check out the file
    */usr/src/UPDATING* on a -current system for debugging details.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是，-current 的默认设置包括各种调试代码、特殊警告和相关的开发者功能。这些都使得 -current 比任何其他版本的 FreeBSD 运行得更慢。你可以禁用所有这些调试功能，但如果这么做，你在遇到问题时将无法提交适当的故障报告。这意味着你将更加孤立无援。你可以查看
    -current 系统中的文件 */usr/src/UPDATING* 以获取调试细节。
- en: If you can’t read C and shell code, don’t feel like debugging your OS, don’t
    like computer functions failing arbitrarily, or just don’t like being left hanging
    until your problem annoys someone who can fix it, -current isn’t for you. The
    brave are certainly welcome to try -current, as is anyone willing to devote a
    large amount of time to learning and debugging FreeBSD or anyone who needs a lesson
    in humility. You’re not forbidden to use -current; you’re just on your own. FreeBSD-current
    isn’t always the bleeding edge, but sometimes it might be the why-are-my-fingers-suddenly-little-wiggling-stumps?
    edge. You’ve been warned.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不懂 C 语言和 shell 代码，不想调试操作系统，不喜欢计算机功能随机失败，或者只是不喜欢等到你的问题烦到能修复它的人的时候再被解决，那么 -current
    可能不适合你。勇敢的人当然欢迎尝试 -current，就像任何愿意投入大量时间学习和调试 FreeBSD 的人，或者需要一课谦逊的人一样。你并不被禁止使用
    -current；只是你要自己应对。FreeBSD-current 并不总是最前沿的，但有时它可能是那种“为什么我的手指突然变成了小小的晃动残肢？”的前沿。你已经被警告过了。
- en: To run -current, you really *must* read the *[FreeBSD-current@FreeBSD.org](mailto:FreeBSD-current@FreeBSD.org)*
    and *[svn-src-head@FreeBSD.org](mailto:svn-src-head@FreeBSD.org)* mailing lists.
    These are high-traffic lists with hundreds of warnings, alerts, and comments a
    day. If you’re reading this book, you probably shouldn’t post on these lists;
    just read and learn. If someone discovers that the newest filesystem patches transform
    hard drives into zombie minions of Cthulhu, this is where the information will
    be made available.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行 -current，你真的 *必须* 阅读 *[FreeBSD-current@FreeBSD.org](mailto:FreeBSD-current@FreeBSD.org)*
    和 *[svn-src-head@FreeBSD.org](mailto:svn-src-head@FreeBSD.org)* 邮件列表。这些都是高流量的列表，每天有数百条警告、提醒和评论。如果你正在读这本书，你可能不应该在这些列表上发帖；只需阅读并学习。如果有人发现最新的文件系统补丁将硬盘变成了克苏鲁的僵尸爪牙，信息将会在这里发布。
- en: '**-current Code Freezes**'
  id: totrans-18
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**-current 代码冻结**'
- en: Every 12 to 18 months, FreeBSD-current goes through a month of *code freeze,*
    during which no noncritical changes are permitted and all known critical problems
    are being fixed. The goal is to stabilize FreeBSD’s latest and greatest and to
    polish off the rough corners. At the end of the code freeze (or shortly after),
    -current becomes the *.0* version of a new FreeBSD major release. For example,
    FreeBSD 12.0 was -current at one point, as was FreeBSD 13.0\. When a new major
    release happens, the -current version number gets incremented. The release of
    FreeBSD 17.0 means that -current will be called *FreeBSD 18*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每12到18个月，FreeBSD-current会经历一个月的*代码冻结*，在此期间不允许进行非关键性变更，所有已知的关键问题都在修复中。目标是稳定FreeBSD的最新版本，并打磨其粗糙的边角。在代码冻结结束（或稍后），-current版本将成为新的FreeBSD主要版本的*.0*版本。例如，FreeBSD
    12.0曾经是-current版本，FreeBSD 13.0也是如此。当新的主要版本发布时，-current版本号将递增。FreeBSD 17.0的发布意味着-current将被称为*FreeBSD
    18*。
- en: 'Once the .0 major release escapes into the wild, development work branches
    into two lines: FreeBSD-current and FreeBSD-stable.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦.0主要版本发布到公共环境中，开发工作就会分为两条路线：FreeBSD-current和FreeBSD-stable。
- en: '***FreeBSD-stable***'
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***FreeBSD-stable***'
- en: FreeBSD-stable (or just *-stable*) is the “bleeding edge for the average user,”
    containing some of the most recent peer-reviewed code. Sysadmins familiar with
    Linux know -stable as a “rolling release.” You’ll find a version of FreeBSD-stable
    for each major release.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD-stable（或简称* -stable*）是“普通用户的前沿技术”，包含了一些最新的同行评审代码。熟悉Linux的系统管理员知道-stable是一个“滚动发布”。你会发现每个主要版本都有一个FreeBSD-stable版本。
- en: Once a piece of code is thoroughly tested in -current, it might be merged back
    into -stable. The -stable version is the one that’s mostly safe to upgrade to
    at almost any time; you might think of it as FreeBSD-beta.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦一段代码在-current中经过彻底测试，它可能会被合并回-stable。-stable版本是几乎任何时候都可以安全升级的版本；你可以把它当作FreeBSD的beta版本。
- en: Three or four times a year, the Release Engineering team asks the developers
    to focus on resolving outstanding problems with -stable rather than making major
    changes. The Release Engineering team cuts several release candidates from this
    code and offers each for public testing. When the FreeBSD team is satisfied with
    the results of its own and the community’s testing, the result is given a release
    number. The development team then returns their attention to their regular projects.^([2](footnote.xhtml#ch18fn2))
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 每年三到四次，发布工程团队会要求开发人员集中精力解决与-stable版本相关的未解决问题，而不是进行重大变更。发布工程团队从这段代码中剪切出几个候选版本，并提供给公众进行测试。当FreeBSD团队对自己以及社区的测试结果满意时，最终的版本会被赋予一个发布编号。开发团队随后将注意力转回到他们的常规项目上。^([2](footnote.xhtml#ch18fn2))
- en: How does this work in practice? Consider FreeBSD 13\. Once 13.0 comes out, developers
    will start merging bug fixes and additions to the 13-stable version. Users who
    want to help test the new FreeBSD release can run 13-stable. After a few months
    of merging features and some testing, 13-stable will become 13.1\. After 13.1
    comes out, that development track reverts to 13-stable. FreeBSD 13.1, 13.2, and
    13.3 are just points on the continuum of FreeBSD 13-stable.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程如何在实践中运作呢？考虑FreeBSD 13。当13.0发布时，开发人员将开始将bug修复和功能添加到13-stable版本中。希望帮助测试新FreeBSD版本的用户可以运行13-stable。在合并功能并进行一些测试几个月后，13-stable将变为13.1。当13.1发布后，该开发路径会恢复为13-stable。FreeBSD
    13.1、13.2和13.3只是FreeBSD 13-stable的连续版本。
- en: FreeBSD-stable is expected to be calm and reliable, requiring little user attention.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD-stable预计是平稳且可靠的，几乎不需要用户的注意。
- en: As -stable ages, the differences between -stable and -current become greater
    and greater, to the point where it becomes necessary to branch a new -stable off
    of -current. The older -stable is actively maintained for several months while
    the new -stable is beaten into shape. Some users upgrade to the new version of
    -stable immediately, others are more cautious. After a release or two of the new
    -stable, the older -stable is obsoleted and the developers encourage users to
    migrate to the new version. After some time, the older stable will receive only
    critical bug fixes, and finally, it’ll be abandoned entirely. You can see how
    this works in [Figure 18-1](ch18.xhtml#ch18fig1).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 随着-stable版本的老化，-stable和-current之间的差异会越来越大，直到必须从-current分支出一个新的-stable版本。旧的-stable会在几个月内继续维护，而新的-stable会进行完善。一些用户会立即升级到新的-stable版本，而其他用户则会更为谨慎。在新-stable发布一到两个版本后，旧的-stable会被淘汰，开发人员会鼓励用户迁移到新版本。经过一段时间后，旧的stable将只接收关键的bug修复，最终会完全被废弃。你可以在[图18-1](ch18.xhtml#ch18fig1)中看到这一过程是如何运作的。
- en: '![image](../images/f0424-01.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0424-01.jpg)'
- en: '*Figure 18-1: FreeBSD development branches*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*图18-1：FreeBSD开发分支*'
- en: Each release really should have a little dangling tail off to the side for patch
    levels, but that makes the diagram really confusing.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每个版本实际上应该有一个稍微拖曳到一侧的补丁级别尾部，但那样会使图表变得非常混乱。
- en: Users of FreeBSD-stable must read the *[FreeBSD-stable@FreeBSD.org](mailto:FreeBSD-stable@FreeBSD.org)*
    mailing list. While this mailing list has a moderate level of traffic and a fair
    amount of question-and-answer exchanges that really should be on *-questions@*,
    important messages from developers generally have a subject beginning with HEADS
    UP. Look for those messages; they generally mean that a change in the system can
    ruin your day if you don’t know about it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD-stable的用户必须阅读* [FreeBSD-stable@FreeBSD.org](mailto:FreeBSD-stable@FreeBSD.org)
    *邮件列表。虽然该邮件列表的流量适中，并且有一些本应在*-questions@*上进行的问答交换，但来自开发人员的重要信息通常会以“HEADS UP”开头。请留意这些邮件，它们通常意味着，如果你不知道某些更改，系统可能会让你的一天变得糟糕透顶。
- en: '**THE STABILITY OF -STABLE**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**-STABLE的稳定性**'
- en: The word *stable* describes the code base, not FreeBSD itself. Running code
    from a random point along a stable branch doesn’t guarantee that your system will
    be stable, only that the underlying code won’t change radically. The API and ABI
    are expected to remain unchanged. While the developers take pains to ensure that
    -stable remains, well, stable, mistakes can and do happen. If this risk worries
    you, stick with a patched release.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*稳定*这个词描述的是代码库，而不是FreeBSD本身。从稳定分支上的某个随机点运行代码并不能保证你的系统会稳定，只能保证底层代码不会发生剧烈变化。API和ABI预计保持不变。尽管开发人员会尽力确保-stable保持稳定，但错误是有可能发生的。如果这种风险让你担忧，最好还是使用打过补丁的发布版本。'
- en: '**Merging from -current**'
  id: totrans-34
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**从-当前合并**'
- en: The phrase *merged from -current (MFC)* means that a function or subsystem has
    been backported from FreeBSD-current into FreeBSD-stable (or, rarely, into an
    errata branch). Not all features are MFC’d, however. The point of FreeBSD-current
    is that it’s where major changes take place, and many of those changes require
    months of testing and debugging. Those large changes can’t be backported, as they’d
    badly impact the -stable users who expect a stable codebase.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*从-当前（MFC）合并*这个短语意味着某个功能或子系统已经从FreeBSD-current回溯到FreeBSD-stable（或者，在少数情况下，回溯到errata分支）。然而，并不是所有功能都会被MFC。FreeBSD-current的重点在于，它是进行重大变更的地方，而这些变更通常需要几个月的测试和调试。这些大的变更不能被回溯，因为它们会严重影响期望稳定代码库的-stable用户。'
- en: Sometimes, features that seem “obvious MFC candidates” can’t be merged. Sometimes
    the kernel infrastructure changes to support new drivers and features, and that
    infrastructure can’t be safely merged. New drivers that require such infrastructure
    can’t be MFC’d. This happens most often with video and wireless network drivers.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，看似“显而易见的MFC候选项”的功能无法被合并。有时内核基础设施需要变更以支持新的驱动程序和功能，而这些基础设施无法安全地合并。需要这些基础设施的新驱动程序无法进行MFC。这种情况通常发生在视频和无线网络驱动程序中。
- en: Select new drivers, bug fixes, and minor enhancements can be MFC’d—but that’s
    about it. The FreeBSD Project makes it a point not to MFC large changes that could
    break user applications.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 选择性的新驱动程序、bug修复和小的增强功能可以进行MFC——但仅限于此。FreeBSD项目特别强调不进行MFC大规模更改，以免破坏用户应用程序。
- en: '***Snapshots***'
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***快照***'
- en: Every month or so, the FreeBSD Release Engineering team releases snapshots of
    -current and -stable and makes them available on an FTP site. Snapshots are just
    points along the development branch; they undergo no special packaging or testing.
    Snapshots don’t receive the same attention to quality that releases do, but they’re
    intended as a good starting point for people interested in running -current or
    -stable. There’s only modest quality control, and many developers have no idea
    that a snapshot has come out until it appears on the FTP servers. You’ll find
    bugs. You’ll find errors. You’ll experience issues that will turn your mother’s
    hair white, assuming you haven’t done that to the poor woman already.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 每个月左右，FreeBSD发布工程团队会发布-当前和-稳定版本的快照，并将其放到FTP站点上供大家下载。快照只是开发分支中的某些时间点，它们不会经过特殊的打包或测试。快照没有像正式发布版本那样的质量控制，它们的目的仅是作为那些有兴趣运行-当前或-稳定版本的用户的一个良好起点。质量控制相对有限，很多开发人员直到快照出现在FTP服务器上时才知道它的发布。你会发现bugs，你会发现错误，你会遇到一些问题，可能会让你母亲的头发都白了，假设你还没有把她弄成那样。
- en: '***FreeBSD Support Model***'
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***FreeBSD支持模型***'
- en: With FreeBSD 11.0, the Project’s support model changed to more closely resemble
    that used by other commercial and noncommercial operating systems.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 FreeBSD 11.0 的发布，项目的支持模式发生了变化，更加接近其他商业和非商业操作系统的使用模式。
- en: Each major release is supported with security and stability patches for five
    years after the first release. If FreeBSD 13 is released on January 1, 2021, support
    will end on January 1, 2026.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 每个主要版本将在首次发布后提供五年的安全性和稳定性补丁。如果 FreeBSD 13 于 2021 年 1 月 1 日发布，支持将于 2026 年 1 月
    1 日结束。
- en: Each minor release is supported for three months after the release of the next
    minor release. Support for FreeBSD 12.3 will end three months after the release
    of FreeBSD 12.4\. This gives you three months to schedule an upgrade.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 每个小版本在下一个小版本发布后会得到三个月的支持。FreeBSD 12.3 的支持将在 FreeBSD 12.4 发布后三个月结束。这为你提供了三个月的时间来安排升级。
- en: A loss of official support doesn’t mean that you can’t continue to run unsupported
    versions. However, you’ll need to examine each security announcement, determine
    whether it affects your environment, and create your own patches. You’re better
    off running the upgrade.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 官方支持的失效并不意味着你不能继续运行不受支持的版本。然而，你需要检查每个安全公告，确定它是否影响你的环境，并创建自己的补丁。你最好还是进行升级。
- en: The whole point of FreeBSD minor releases is that they’re minimally intrusive.
    Upgrading from FreeBSD 12.3 to 12.4 should have a similar impact to applying Windows
    updates or going from Centos 8.1 to 8.2\. Applications should continue to run
    just fine.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD 小版本发布的核心意义在于它们对系统的干扰最小。从 FreeBSD 12.3 升级到 12.4 应该类似于应用 Windows 更新或从
    Centos 8.1 升级到 8.2。应用程序应继续正常运行。
- en: The last FreeBSD minor release of a version gets supported and patched out to
    the five-year mark. If FreeBSD 12.5 is the last release of FreeBSD 12, it’ll get
    security patches out until five years after the release of FreeBSD 12.0.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一个版本的最后一个 FreeBSD 小版本将得到支持，并在五年内修复漏洞。如果 FreeBSD 12.5 是 FreeBSD 12 的最后一个版本，它将在发布
    FreeBSD 12.0 后五年内提供安全补丁。
- en: '***Testing FreeBSD***'
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***测试 FreeBSD***'
- en: Each version and release of FreeBSD is tested in a variety of ways. Individual
    developers check their work on their own hardware and ask each other to double-check
    their work. If the work is sufficiently complicated, they might use the official
    FreeBSD Phabricator system (*[https://reviews.FreeBSD.org/](https://reviews.FreeBSD.org/)*)
    or even a private source code repository to offer their work to a broader community
    before committing it to -current. Analysis companies have donated analysis software
    to the FreeBSD team so that the source code can be automatically audited, tested,
    and debugged on an ongoing basis, catching many errors before they have a chance
    to affect real-world users. Corporations such as Sentex, EMC, Netflix, and iX
    Systems provide testing for the Project. Several highly regarded FreeBSD developers
    have made testing a major issue within the Project. They now have an automated
    Kyua testing framework.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 每个版本和发布的 FreeBSD 都经过各种方式的测试。个别开发者在自己的硬件上检查他们的工作，并相互请求对方进行复核。如果工作较为复杂，他们可能会使用官方的
    FreeBSD Phabricator 系统（*[https://reviews.FreeBSD.org/](https://reviews.FreeBSD.org/)）或甚至私有的源代码仓库，在提交到
    -current 之前将他们的工作提供给更广泛的社区进行检查。分析公司向 FreeBSD 团队捐赠了分析软件，使得源代码可以在持续的基础上自动进行审核、测试和调试，捕获许多错误，防止它们影响到实际用户。像
    Sentex、EMC、Netflix 和 iX Systems 等公司为项目提供了测试支持。几位备受尊敬的 FreeBSD 开发者将测试工作作为项目的重点问题，他们目前已经拥有了自动化的
    Kyua 测试框架。
- en: Ultimately, however, a volunteer project with a few hundred developers can’t
    purchase all computer hardware ever made, nor can they run that hardware under
    all possible loads. The FreeBSD Project as a whole relies on companies and people
    that use FreeBSD to test the software.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最终，一个只有几百个开发者的志愿者项目无法购买所有曾经生产过的计算机硬件，也无法在所有可能的负载下运行这些硬件。FreeBSD 项目作为一个整体，依赖于使用
    FreeBSD 的公司和个人来进行软件测试。
- en: The most useful testing comes from users who have real-world equipment and real-world
    testbeds with real-world workloads. Sadly, most of these users perform testing
    when they put a release CD into the computer, run an install, and fire up the
    system. At that point, it’s too late to benefit the release. Any bugs you find
    might help the next release, but in the meantime, a patch might fix your problem.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最有价值的测试来自于那些拥有实际设备、实际测试平台和实际工作负载的用户。遗憾的是，大多数用户在进行测试时，只是在将发布 CD 插入计算机，运行安装程序并启动系统时进行测试。到那个时候，已无法对发布版本产生实际的帮助。你发现的任何
    bug 可能对下一个版本有帮助，但在此期间，可能通过补丁解决你的问题。
- en: The solution here is obvious—test FreeBSD on your real-world workloads before
    the release is cut. Requests for testing of new -stable releases appear on *[FreeBSD-stable@FreeBSD.org](mailto:FreeBSD-stable@FreeBSD.org)*.
    By testing a -stable or -current, you’ll get even better value from FreeBSD.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案显而易见——在发布之前，在你的实际工作负载上测试 FreeBSD。对新 -stable 版本的测试请求可以发送至 *[FreeBSD-stable@FreeBSD.org](mailto:FreeBSD-stable@FreeBSD.org)*。通过测试
    -stable 或 -current，你将从 FreeBSD 中获得更大的价值。
- en: '***Which Version Should You Use?***'
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***你应该使用哪个版本？***'
- en: '-current, -stable, releases, snapshots—the head spins. Yes, this seems complicated,
    but it ensures specific quality levels. Users can rest assured that a release
    is as reliable as possible and has survived extensive testing and peer review.
    The same users know that the nifty new features in -stable and -current are available—if
    they’re willing to assume the risk inherent in each version. So, which version
    should you use? Here are my suggestions:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: -current、-stable、release、snapshot——令人头晕。是的，这看起来很复杂，但它确保了特定的质量水平。用户可以放心，发布版经过了广泛的测试和同行评审，是尽可能可靠的。同样的用户知道，在
    -stable 和 -current 中的炫酷新特性是可以使用的——如果他们愿意承担每个版本所固有的风险。那么，你应该使用哪个版本呢？以下是我的建议：
- en: '**Production**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**生产环境**'
- en: If you’re using FreeBSD in a production setting, install the most recent minor
    release. When the next minor release comes out, upgrade to it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在生产环境中使用 FreeBSD，请安装最新的次版本发布。当下一个次版本发布出来时，进行升级。
- en: '**Staging**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**预发布**'
- en: If you need to know what’s coming in the next FreeBSD minor release and how
    it’ll affect your production environment, track -stable in your staging environment.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要了解下一个 FreeBSD 次版本发布的内容以及它将如何影响你的生产环境，可以在你的预发布环境中跟踪 -stable。
- en: '**Test**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试**'
- en: The question here is what you want to test. The Project appreciates testing
    on both -current and -stable. If you’re in doubt, start by running -stable.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题是你希望测试什么。项目方希望在 -current 和 -stable 上都进行测试。如果你不确定，从运行 -stable 开始。
- en: '**Development**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**开发**'
- en: Operating system developers, people with too much spare time and too little
    excitement, and utter fools should run -current. When -current destroys your MP3
    collection, debug the problem and submit a patch to fix it.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统开发者、闲得无聊且缺乏刺激的人，以及彻底的傻瓜应该运行 -current。当 -current 摧毁了你的 MP3 收藏时，调试问题并提交修复补丁。
- en: '**Hobby**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**爱好**'
- en: If you’re a hobbyist, run any version! Just keep in mind the limitations of
    the branch you choose. If you’re just learning Unix, I’d recommend -release. Once
    you have your feet under you, upgrade to -stable. While -current is far more steady
    than it was 20 years ago, if you think a chance of an adrenaline-boosting system
    failure makes your day more exciting, that’s where to go. The high-stakes gamblers
    running -current welcome like-minded company.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是爱好者，可以运行任何版本！只是要记住你选择的分支的局限性。如果你刚开始学习 Unix，我建议使用 -release。等你熟悉了，再升级到 -stable。虽然
    -current 比 20 年前更加稳定，但如果你觉得系统崩溃带来的肾上腺素激增能让你的一天更有趣，那就选择它吧。那些运行 -current 的高风险玩家欢迎志同道合的伙伴。
- en: '**Upgrade Methods**'
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**升级方法**'
- en: 'FreeBSD provides two ways to upgrade: binary updates and building from source.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD 提供两种升级方式：二进制更新和从源代码构建。
- en: FreeBSD supports *binary updates* through freebsd-update(8). This is very similar
    to the binary update services offered for Windows, Firefox, and other commercial
    software. (The software author states that freebsd-update(8) was named after Windows
    Update.) You can use FreeBSD Update to upgrade across major releases, minor releases,
    and patch levels.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD 支持通过 freebsd-update(8) 进行 *二进制更新*。这与 Windows、Firefox 和其他商业软件提供的二进制更新服务非常相似。（软件作者表示，freebsd-update(8)
    是以 Windows Update 命名的。）你可以使用 FreeBSD Update 来升级主要版本、次版本和补丁级别。
- en: Upgrading from source code means downloading the FreeBSD source code, building
    the programs that make up FreeBSD, and installing them to your hard drive. For
    example, if you have the source code for FreeBSD 13.1, you can upgrade to that
    version. This requires more effort to set up and use, but it gives you much more
    flexibility. Upgrade from source when tracking -stable or -current.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从源代码升级意味着下载 FreeBSD 源代码，构建组成 FreeBSD 的程序，并将它们安装到你的硬盘上。例如，如果你有 FreeBSD 13.1 的源代码，你可以升级到该版本。这需要更多的设置和使用工作，但它为你提供了更大的灵活性。当跟踪
    -stable 或 -current 时，使用从源代码升级。
- en: '**PROTECT YOUR DATA!**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**保护你的数据！**'
- en: '[Chapter 5](ch05.xhtml#ch05) is called “Read This Before You Break Something
    Else!” for good reason. Upgrades can destroy your data. Back up your system before
    attempting any sort of upgrade! I upgrade my desktop every week or so, just for
    fun (see my earlier comment about adrenaline junkies running -current). But before
    I upgrade, I make sure that all my important data is safely cached on another
    machine. Copy your data to tape, file, or whatever, but don’t run an upgrade without
    a fresh backup. You’ve been warned.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[第5章](ch05.xhtml#ch05)被称为“在破坏其他东西之前请阅读！”是有充分理由的。升级可能会破坏你的数据。在尝试任何形式的升级之前，请备份你的系统！我每周都会升级我的桌面，纯粹是为了娱乐（参见我之前关于肾上腺素瘾君子跑
    -current 的评论）。但在升级之前，我会确保所有重要数据已安全地缓存到另一台机器上。将数据备份到磁带、文件或其他地方，但不要在没有新备份的情况下进行升级。已经警告过你了。'
- en: '**Binary Updates**'
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**二进制更新**'
- en: Many operating systems offer binary updates, where users can download new binaries
    for their operating system. FreeBSD provides a similar program through freebsd-update(8),
    allowing you to easily upgrade your system.^([3](footnote.xhtml#ch18fn3)) You
    can’t track -stable or -current with freebsd-update(8), only releases. For example,
    if you installed FreeBSD 12.0, freebsd-update(8) can upgrade you to 12.0-p9, 12.1,
    or 13.0, but not 12-stable or 14-current.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 许多操作系统提供二进制更新，用户可以下载操作系统的新二进制文件。FreeBSD通过freebsd-update(8)提供类似的程序，允许你轻松地升级系统。^([3](footnote.xhtml#ch18fn3))
    你不能使用freebsd-update(8)跟踪-stable或-current，只能跟踪发布版本。例如，如果你安装了FreeBSD 12.0，freebsd-update(8)可以将你升级到12.0-p9、12.1或13.0，但不能升级到12-stable或14-current。
- en: If you have a custom kernel, you must build updates to your kernel from source
    instead of relying upon the update service. Similarly, if you’ve upgraded a host
    from source (discussed later this chapter), running freebsd-update(8) overwrites
    your custom binaries with default ones.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是自定义内核，你必须从源代码构建内核更新，而不是依赖于更新服务。同样，如果你从源代码升级了主机（本章稍后讨论），运行freebsd-update(8)将会用默认的二进制文件覆盖你自定义的二进制文件。
- en: Configure updates in */etc/freebsd-update.conf*.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在*/etc/freebsd-update.conf*中配置更新。
- en: '***/etc/freebsd-update.conf***'
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***/etc/freebsd-update.conf***'
- en: 'Updating with freebsd-update(8) is designed to be seamless for the average
    user, and changing its configuration is rarely advisable. You might have unusual
    circumstances, however, so here are the most useful options you’ll find in this
    file:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用freebsd-update(8)进行更新旨在为普通用户提供无缝体验，因此很少建议更改其配置。然而，你可能会遇到特殊情况，下面是你在此文件中会找到的最有用选项：
- en: KeyPrint 800...
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: KeyPrint 800...
- en: '`KeyPrint` lists a cryptographic signature for the update service. If the FreeBSD
    Update service suffered a security breach, the FreeBSD Project would need to repair
    the breach and issue new cryptographic keys. In this case, the breach would be
    announced on the security announcements mailing list (and would also be big news
    in the IT world). In other words, there’s no reason to change this in normal use.
    (Building your own customized FreeBSD and distributing it via freebsd-update(8),
    while both possible and practical, is considered abnormal use.)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`KeyPrint`列出了更新服务的加密签名。如果FreeBSD Update服务遭到安全漏洞，FreeBSD项目需要修复漏洞并发布新的加密密钥。在这种情况下，漏洞将通过安全公告邮件列表发布（并且在IT界也会成为重大新闻）。换句话说，正常使用中没有理由更改此项。（构建自定义的FreeBSD并通过freebsd-update(8)分发，尽管可能且实际可行，但被认为是异常使用。）'
- en: ServerName update.freebsd.org
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ServerName update.freebsd.org
- en: The `ServerName` tells freebsd-update(8) where to fetch its updates from. While
    the FreeBSD Project does provide the tools to build your own updates, there’s
    really no need to do so. If you have enough servers that you’d consider building
    your own update server, you probably also have a proxy server that can cache the
    official updates.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`ServerName`告知freebsd-update(8)从哪里获取更新。虽然FreeBSD项目确实提供了构建自己更新的工具，但实际上没有必要这样做。如果你有足够多的服务器来考虑建立自己的更新服务器，那么你可能也有一个代理服务器，可以缓存官方更新。'
- en: Components src world kernel
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 组件 src world kernel
- en: By default, FreeBSD Update provides the latest patches for the source code in
    */usr/src*, the userland (world), and the GENERIC kernel. You might not need all
    of these components, however. While the userland is mandatory, you might have
    a custom kernel. Remove the kernel statement to make freebsd-update(8) ignore
    the kernel. Custom kernel users could also copy the GENERIC kernel to */boot/GENERIC*.
    The update will update the GENERIC kernel but leave your custom kernel alone.
    Or, you can remove the `kernel` entry and save yourself the warning. If you don’t
    have the source code installed on your machine, freebsd-update realizes that and
    doesn’t try to patch it, but you could eliminate the `src` entry and save the
    software the trouble. You could also choose to receive only portions of the source
    code update, as described in freebsd-update.conf(5).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，FreeBSD Update 提供 */usr/src* 中的源代码、用户空间（world）和 GENERIC 内核的最新补丁。然而，你可能不需要所有这些组件。虽然用户空间是必须的，但你可能有一个自定义内核。删除内核声明可以让
    freebsd-update(8) 忽略内核。自定义内核用户还可以将 GENERIC 内核复制到 */boot/GENERIC*。更新将更新 GENERIC
    内核，但不会更改你的自定义内核。或者，你可以删除 `kernel` 条目，从而避免警告。如果你没有在机器上安装源代码，freebsd-update 会意识到这一点，并且不会尝试打补丁，但你也可以删除
    `src` 条目，省去软件的麻烦。你还可以选择只接收源代码更新的部分内容，正如 freebsd-update.conf(5) 中所述。
- en: UpdateIfUnmodified /etc/ /var/ /root/ /.cshrc /.profile
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: UpdateIfUnmodified /etc/ /var/ /root/ /.cshrc /.profile
- en: The updates include changes to configuration files in */etc*. If you have modified
    these files, however, you probably don’t want freebsd-update(8) to overwrite them.
    Similarly, */var* is very fluid, designed for customization by the sysadmin; you
    don’t want FreeBSD Update to muck with your settings. FreeBSD Update applies patches
    to files in the directories listed in `UpdateIfUnmodified` only if they’re unchanged
    from the default.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 更新包括对 */etc* 中配置文件的更改。然而，如果你修改了这些文件，你可能不希望 freebsd-update(8) 覆盖它们。同样，*/var*
    是非常动态的，设计上便于系统管理员定制；你不希望 FreeBSD Update 改动你的设置。FreeBSD Update 只会在文件自默认值未更改的情况下，将补丁应用于
    `UpdateIfUnmodified` 中列出的目录。
- en: MergeChanges /etc/ /boot/device.hints
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: MergeChanges /etc/ /boot/device.hints
- en: Updating to a new release can change configuration files. The update process
    will give you a chance to merge changes into files that appear in the `MergeChanges`
    locations.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 更新到新版本可能会更改配置文件。更新过程将为你提供机会将更改合并到出现在 `MergeChanges` 位置的文件中。
- en: MailTo root
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: MailTo root
- en: If you schedule a run of FreeBSD Update (as described later in this chapter),
    freebsd-update(8) sends an email of the results to the account listed in `MailTo`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划运行 FreeBSD Update（如本章后面所述），freebsd-update(8) 会将结果通过邮件发送到 `MailTo` 中列出的账户。
- en: KeepModifiedMetadata yes
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: KeepModifiedMetadata yes
- en: Perhaps you’ve modified the permissions or owner of a system file or command.
    You probably don’t want freebsd-update(8) to change those permissions back. With
    `KeepModifiedMetadata` set to `yes`, freebsd-update(8) leaves your custom permissions
    and ownership unchanged.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你已经修改了系统文件或命令的权限或所有者。你可能不希望 freebsd-update(8) 将这些权限恢复为默认。设置 `KeepModifiedMetadata`
    为 `yes` 后，freebsd-update(8) 将保持你的自定义权限和所有权不变。
- en: See freebsd-update.conf(5) for more possibilities.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 freebsd-update.conf(5) 以了解更多选项。
- en: '***Running freebsd-update(8)***'
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行 freebsd-update(8)***'
- en: 'Updating your system with binary updates has two stages: downloading the updates
    and applying them. The process looks slightly different if you’re applying patches
    versus if you’re crossing major releases.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用二进制更新更新系统分为两个阶段：下载更新和应用更新。如果你应用的是补丁，或者跨越大版本，过程会略有不同。
- en: If you’re using ZFS, always create a new boot environment before upgrading or
    patching!
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 ZFS，升级或打补丁之前一定要创建一个新的启动环境！
- en: '**Updating to the Latest Patch Level**'
  id: totrans-94
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**更新到最新的补丁级别**'
- en: To download the latest patches to your chosen release, run `freebsd-update fetch`.
    Here, I’m updating a FreeBSD 11.0 host to the latest patchlevel.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载最新的补丁到你选择的版本，运行 `freebsd-update fetch`。在这里，我正在将一台 FreeBSD 11.0 主机更新到最新的补丁级别。
- en: '[PRE0]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You’ll see the program finding the download sources for the patches, comparing
    cryptographic keys for those download sources, and eventually downloading patches
    into */var/db/freebsd-update*. Inspecting the system might take a couple minutes,
    depending on the speed of your storage.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到程序查找下载源的补丁，比较这些下载源的加密密钥，最终将补丁下载到 */var/db/freebsd-update* 中。检查系统可能需要几分钟，具体取决于存储设备的速度。
- en: 'Occasionally, you’ll see a message similar to this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 偶尔，你会看到类似如下的消息：
- en: '[PRE1]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We’re updating a .0 release, the first version of a major FreeBSD release, straight
    to 11.0-RELEASE-p12, so there’s a few accumulated patches. Why would such a patchset
    start by removing files?
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在更新一个 .0 版本，即一个主要 FreeBSD 版本的第一个版本，直接更新到 11.0-RELEASE-p12，因此有一些累计的补丁。为什么这样的补丁集会先删除文件呢？
- en: The time zone files are pretty straightforward. Between the release of FreeBSD
    11.0 and the present time, Santa Isabel ➋ and Rangoon ➌ changed their time zones.
    Sadly, nations don’t coordinate their time zones with FreeBSD releases. Removing
    those time zones from the system simplifies life for sysadmins in those countries
    and doesn’t hurt the rest of us.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 时区文件相对简单。在 FreeBSD 11.0 发布到现在之间，Santa Isabel ➋ 和 Rangoon ➌ 的时区发生了变化。可惜的是，各国并没有与
    FreeBSD 发布同步调整时区。从系统中删除这些时区能简化这些国家系统管理员的工作，而不会影响我们其他人。
- en: But they’re also removing a kernel module ➊. Why would that happen? A little
    research on the FreeBSD mailing lists shows that this module should never have
    been shipped with 11.0, and you *really* shouldn’t be using it. This sort of change
    is rare but can happen right after a major release.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 但他们也在移除一个内核模块 ➊。为什么会发生这种情况？稍作研究 FreeBSD 邮件列表可以发现，这个模块本不应该随着 11.0 发布，*而且*你*真的*不应该使用它。这类变更很少见，但在一个主要发布后的不久有时会发生。
- en: You’ll then see files added as part of this patchset, if any.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 接着你会看到作为该补丁集一部分的新增文件（如果有的话）。
- en: '[PRE2]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It seems sysadmins in Rangoon are quite busy this summer.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 看来仰光的系统管理员这个夏天非常忙。
- en: Almost all patches alter existing files on the system. You’ll see those next.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有的补丁都会修改系统上的现有文件。接下来你会看到这些。
- en: '[PRE3]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If your release is nearing its End of Life, you’ll get a notice like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的版本接近生命周期结束，你会看到这样的通知：
- en: '[PRE4]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If the release has gone past End of Life, the notice gets more . . . emphatic.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果该版本已经过了生命周期结束，通知会变得更加... 强调。
- en: 'To install the downloaded files, run `freebsd-update install`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装下载的文件，运行 `freebsd-update install`：
- en: '[PRE5]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If the update requires any more steps, you’ll see them here. Reboot your system,
    and you’ll see that you’re running the newest patchlevel.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果更新还需要其他步骤，你将在这里看到它们。重启系统后，你将看到自己运行的是最新的补丁版本。
- en: '**Updating Releases**'
  id: totrans-114
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**更新发布版本**'
- en: This FreeBSD 11.0-p12 machine is within a month of End of Life? Let’s update
    it with `freebsd-update upgrade`. Specify the target release with the `-r` flag.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这台 FreeBSD 11.0-p12 机器已接近生命周期结束？让我们使用 `freebsd-update upgrade` 更新它。用 `-r` 标志指定目标版本。
- en: '[PRE6]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The hardest part of this is to remember that -RELEASE is part of the version
    name.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最难的部分是记住 -RELEASE 是版本名称的一部分。
- en: The upgrade will inspect your system and present its conclusions.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 升级会检查你的系统并呈现其结论。
- en: '[PRE7]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Remember the install process, when you selected FreeBSD components to set up
    on your new host? That’s what freebsd-update is checking for. You could have added
    or removed components, though, so take a look at the list. If it looks right,
    hit y to continue.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得安装过程中，你选择了哪些 FreeBSD 组件来设置新主机吗？这就是 freebsd-update 在检查的内容。不过，你可能添加或移除了某些组件，所以请查看一下列表。如果看起来没问题，按
    y 继续。
- en: The update will more carefully scrutinize the system, comparing all existing
    files to the new release, and then start downloading.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 更新会更仔细地审查系统，将现有文件与新版本进行比较，然后开始下载。
- en: '[PRE8]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Go make a cup of tea. Depending on your host’s bandwidth, you should return
    to see:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 去泡杯茶吧。根据你主机的带宽，应该能在返回后看到：
- en: '[PRE9]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You tea’s probably too hot. Let it cool a bit.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你的茶可能太烫了，让它冷却一下吧。
- en: '[PRE10]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: More downloading? Fine, enjoy your tea and watch the program work.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 还要下载更多内容？没问题，享受你的茶，看看程序怎么运行吧。
- en: '[PRE11]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can search the mailing list archives and the FreeBSD source code tree to
    learn why each of these files was removed.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查阅邮件列表存档和 FreeBSD 源代码树，了解每个文件被删除的原因。
- en: The minor release will include new features backported from -current. Those
    probably involve adding files to the system.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 小版本将包含从 -current 回移植的新特性。那些可能涉及将文件添加到系统中。
- en: '[PRE12]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: None of these new features should interfere with existing functions, but perusing
    the list might give you some interesting reading.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这些新功能不应干扰现有功能，但浏览一下列表可能会让你发现一些有趣的内容。
- en: An upgrade should change just about every file on the system, as we’ll see next.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 升级应该会改变系统中的几乎所有文件，接下来我们会看到这一点。
- en: '[PRE13]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Eventually you’ll get to:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最终你会看到：
- en: '[PRE14]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Who are you to ignore instructions?
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你是谁，居然敢忽视指令？
- en: Up until this point, the update process has only downloaded files and done comparisons
    in temporary staging areas. The operating system hasn’t been touched. If you feel
    comfortable proceeding, run the installation.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，更新过程只下载了文件并在临时暂存区进行了比较，操作系统并没有受到影响。如果你觉得可以继续操作，运行安装程序。
- en: '[PRE15]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Why reboot between parts of the update? New userland programs might require
    new kernel features. Installing a nonfunctional version of the `reboot` command
    results in needing to power cycle the host, which would earn you an embarrassing
    punch on your geek card.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么在更新的不同阶段之间需要重启？新的用户空间程序可能需要新的内核功能。安装一个不可用的`reboot`命令会导致你需要断电重启主机，这会让你的技术卡片丢脸。
- en: '[PRE16]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Once the machine comes back up, complete the userland upgrade.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦机器重新启动，完成用户空间升级。
- en: '[PRE17]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: What madness is this?
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这是什么疯狂的操作？
- en: The update process works hard not to leave you with a damaged system or dysfunctional
    software. If freebsd-update removes older versions of shared libraries required
    by your add-on software, it won’t run. The update pauses so you have a chance
    to upgrade your software. We discuss upgrading packages and ports later this chapter.
    Upgrades along a -stable branch don’t normally need to remove old cruft.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 更新过程会尽力避免留下损坏的系统或功能失常的软件。如果`freebsd-update`移除了旧版本的共享库，这些库是你附加软件所需的，那么这些软件将无法运行。此时更新会暂停，给你机会升级软件。我们将在本章稍后讨论如何升级软件包和端口。沿着-stable分支的升级通常不需要删除旧的无用文件。
- en: This last run of freebsd-update removes old shared libraries and such.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这次`freebsd-update`的操作移除了旧的共享库等。
- en: '[PRE18]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Your upgrade is now complete. As with any time you perform wide-ranging system
    maintenance, reboot one last time to verify everything starts cleanly.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 升级现在已经完成。就像每次进行大规模系统维护时一样，最后再重启一次，确保一切能正常启动。
- en: '***Reverting Updates***'
  id: totrans-149
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***回滚更新***'
- en: You thought the upgrade would go easily. They always have before. But this time,
    you were wrong. Some subtle interaction between the new patches and your software
    has done brung you low. If you’re using boot environments, this is the time to
    revert to your previous install. If you’re not, remove the most recently installed
    upgrade with freebsd-update’s `rollback` command.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你以为升级会很顺利，之前每次都很顺利。但这次，你错了。新补丁和你软件之间的某些微妙交互让你遇到了麻烦。如果你正在使用启动环境，现在是时候恢复到之前的安装了。如果没有使用启动环境，请使用`freebsd-update`的`rollback`命令移除最近安装的升级。
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: A rollback is much faster than installing patches. There’s no need to inspect
    the system; freebsd-update just reads the log of its previous actions and undoes
    everything.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚比安装补丁要快得多。无需检查系统；`freebsd-update`只需读取之前操作的日志并撤销所有更改。
- en: '***Scheduling Binary Updates***'
  id: totrans-153
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***安排二进制更新***'
- en: Best practice would say to download and apply updates at a consistent time on
    a regular schedule, such as on your monthly maintenance day. The freebsd-update
    program includes specific support for this to avoid flooding the download servers
    with requests every hour, on the hour. The `freebsd-update cron` command tells
    the system to download the updates at a random point in the next hour. Put this
    command in */etc/crontab* to download updates during that one-hour window. This
    helps reduce the load on the download servers. You’ll get an email when the system
    has updates, so you can schedule a reboot at your convenience.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践是定期在固定的时间下载和应用更新，比如每月的维护日。`freebsd-update`程序提供了专门的支持，避免每小时定时向下载服务器发送请求。`freebsd-update
    cron`命令会告诉系统在接下来的一个小时内随机时间下载更新。将此命令放在*/etc/crontab*文件中，就可以在这个一小时的窗口内下载更新。这有助于减少下载服务器的负载。系统有更新时，你会收到一封电子邮件，这样你就可以在方便的时候安排重启。
- en: '***Optimizing and Customizing FreeBSD Update***'
  id: totrans-155
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***优化和自定义FreeBSD更新***'
- en: Two common questions about FreeBSD Update concern the custom builds of FreeBSD
    and distributing updates locally.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 关于FreeBSD更新，有两个常见的问题：自定义构建的FreeBSD版本和本地分发更新。
- en: Many people build their own versions of FreeBSD for internal use. Frequently,
    this is just a version of FreeBSD with various sections cut out, but some companies
    use extensive modifications. If you have deleted files from your FreeBSD install,
    freebsd-update(8) won’t attempt to patch them.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人为内部使用构建自己的FreeBSD版本。通常，这只是删除了一些部分的FreeBSD版本，但一些公司会进行广泛的修改。如果你从FreeBSD安装中删除了文件，`freebsd-update(8)`将不会尝试修补这些文件。
- en: Similarly, many companies like to have internal update servers for patch management.
    The FreeBSD Update system is specifically designed to work with caching web proxies.
    While all the files are cryptographically signed and verified, they’re transmitted
    over vanilla HTTP so that your proxy can cache them.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，许多公司喜欢为补丁管理设置内部更新服务器。FreeBSD Update系统专门设计用于与缓存Web代理配合工作。尽管所有文件都经过加密签名并验证，但它们通过普通HTTP传输，以便你的代理可以对其进行缓存。
- en: '**Upgrading via Source**'
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**通过源代码升级**'
- en: Another way to update your system is to build it from source code. FreeBSD is
    *self-hosting*, meaning that it includes all the tools needed to build FreeBSD.
    You don’t need to install any compilers or development toolkits. The only thing
    you need to build a new FreeBSD from source code is the newer source code.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种更新系统的方式是从源代码构建它。FreeBSD是*自托管的*，这意味着它包含了构建FreeBSD所需的所有工具。你不需要安装任何编译器或开发工具包。构建一个新的FreeBSD系统所需要的唯一条件是更新的源代码。
- en: When a developer releases improvements to FreeBSD, the changes are made available
    worldwide within minutes. The FreeBSD master source code server tracks the source
    code, all changes made to that code, and the author of those changes. Developers
    can check in new code, and users can check out the latest versions through *Subversion
    (SVN)*. FreeBSD has a simple SVN client, svnlite(1), that suffices for all source
    code operations. It’s a standard Subversion client built without any of the complicated
    options svn(1) supports. Many people find svnlite(1) perfectly adequate for all
    their non-FreeBSD Subversion needs.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发者发布FreeBSD的改进时，这些更改会在几分钟内全球范围内可用。FreeBSD主源代码服务器跟踪源代码、所有对该代码所做的更改以及这些更改的作者。开发者可以提交新的代码，用户可以通过*Subversion
    (SVN)*检出最新版本。FreeBSD有一个简单的SVN客户端svnlite(1)，足以处理所有源代码操作。这是一个没有svn(1)支持的复杂选项的标准Subversion客户端。许多人发现svnlite(1)足够满足他们所有非FreeBSD的Subversion需求。
- en: '**CSUP, CVSUP, CVS, SUP, AND CTM?**'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSUP、CVSUP、CVS、SUP和CTM？**'
- en: Documentation on the internet unfortunately survives well past reason and rises
    to sow confusion at the worst possible time. Undead FreeBSD documentation and
    third-party tutorials might mention using a tool called *CVS* or *CVSup* for source
    code updates. These tools were replaced in 2013\. Any mention of these programs
    indicates you’re reading old docs. If you see a mention of CTM, you’re reading
    docs that predate CVS.^([4](footnote.xhtml#ch18fn4))
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，互联网上的文档通常会长时间存在，并在最糟糕的时刻引发混乱。复生的FreeBSD文档和第三方教程可能会提到使用名为*CVS*或*CVSup*的工具进行源代码更新。这些工具在2013年被取代。任何提到这些程序的地方都表明你在阅读旧文档。如果你看到提到CTM，那么你正在阅读比CVS更早的文档。^([4](footnote.xhtml#ch18fn4))
- en: Upgrading from source requires console access. You won’t always need it, but
    recovering from a bad build might require intervention at the keyboard. Test your
    serial console, Java app, or IPMI console before installing your home-built operating
    system version. In my experience, the only upgrades that require console access
    are those where I don’t have console access.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 升级源代码需要控制台访问。你并不总是需要它，但从一个坏的构建恢复可能需要在键盘上进行干预。在安装自建操作系统版本之前，请测试你的串口控制台、Java应用程序或IPMI控制台。根据我的经验，唯一需要控制台访问的升级是那些我没有控制台访问的情况。
- en: '***Which Source Code?***'
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***哪个源代码？***'
- en: Every FreeBSD release ships with the source code used to build the system you’re
    installing. If you didn’t choose to install the source when installing the system,
    you’ll find it on the install media in */usr/freebsd-dist/src.txz*. If you did
    install the source code, you’ll find it in */usr/src*.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 每个FreeBSD版本都附带用于构建你正在安装的系统的源代码。如果你在安装系统时没有选择安装源代码，你会在安装介质的*/usr/freebsd-dist/src.txz*找到它。如果你安装了源代码，你会在*/usr/src*找到它。
- en: Unfortunately, this version of the source code lacks the version control tags
    needed to build FreeBSD. It’s for reference only. You’ll need to use svnlite(1)
    to download a version of the code with those tags intact.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这个版本的源代码缺少构建FreeBSD所需的版本控制标签。它仅供参考。你需要使用svnlite(1)下载一个带有这些标签的代码版本。
- en: Is your copy of source code in */usr/src* suitable for building FreeBSD? Ask
    svnlite(1).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你在*/usr/src*的源代码副本是否适合构建FreeBSD？请询问svnlite(1)。
- en: '[PRE20]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The “not a working copy” error means that any source code here can’t be used
    with Subversion.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: “不是工作副本”错误意味着这里的任何源代码都不能与Subversion一起使用。
- en: The svnlite(1) command to grab source code looks like so.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 获取源代码的svnlite(1)命令如下。
- en: '[PRE21]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The mirror ➊ is a FreeBSD Subversion mirror. The mirror *svn.FreeBSD.org* is
    a geo-routed alias for the closest subversion mirror.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 镜像 ➊ 是一个 FreeBSD Subversion 镜像。镜像 *svn.FreeBSD.org* 是一个地理路由别名，指向最近的 Subversion
    镜像。
- en: The repository ➋ is the group of code you’re working with. You can get a complete
    list of current repositories at *[https://svnweb.FreeBSD.org/](https://svnweb.FreeBSD.org/)*.
    The main Project repositories include *base*, for the operating system; *doc*,
    for documentation; and *ports*, for the Ports Collection.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库 ➋ 是你正在使用的代码组。你可以在 *[https://svnweb.FreeBSD.org/](https://svnweb.FreeBSD.org/)*
    上获取当前仓库的完整列表。主要的项目仓库包括 *base*（操作系统），*doc*（文档）和 *ports*（Ports 集合）。
- en: The branch ➌ is the version of FreeBSD you want. For the very latest stumpy-fingered
    -current, use *head*. To get a stable version, use the branch *stable/* followed
    by the major release. FreeBSD 12-stable would be *stable/12*. To get a release
    plus all current patches, use *releng/* and the release number. The fully patched
    FreeBSD 12.2 would be at *releng/12.2*.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 分支 ➌ 是你想要的 FreeBSD 版本。对于最新的短指头 -current，使用 *head*。要获取稳定版本，使用分支 *stable/* 后跟主版本号。FreeBSD
    12-stable 就是 *stable/12*。要获取一个版本及其所有当前补丁，使用 *releng/* 和发布号。完全打补丁的 FreeBSD 12.2
    位于 *releng/12.2*。
- en: If you have trouble figuring out which branch you need, wander through *[https://svnweb.freebsd.org/](https://svnweb.freebsd.org/)*.
    The branch literally tells svnlite(1) which subdirectory to grab from this site.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不确定需要哪个分支，可以浏览 *[https://svnweb.freebsd.org/](https://svnweb.freebsd.org/)*。分支实际上告诉
    svnlite(1) 从这个站点获取哪个子目录。
- en: Finally, the localdir ➍ is the local directory where I want to put the source
    code.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，localdir ➍ 是我希望放置源代码的本地目录。
- en: 'This host is running FreeBSD 11.1\. I want to be adventuresome and move up
    to FreeBSD 11-stable. Here’s how I’d do that:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这台主机运行的是 FreeBSD 11.1。我想要尝试升级到 FreeBSD 11-stable。以下是我将怎么做：
- en: '[PRE22]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: What fresh madness is this? We try to get the FreeBSD source code and instead
    get a certificate error?
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这是什么新鲜的疯狂事？我们尝试获取 FreeBSD 源代码，结果却遇到了证书错误？
- en: Compare the certificate fingerprint shown to the server’s fingerprint on the
    FreeBSD.org website. If it matches, permanently accept the certificate by entering
    p. Filenames of source code files will stream past your terminal.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示的证书指纹与 FreeBSD.org 网站上的服务器指纹进行比较。如果匹配，输入 p 永久接受证书。源代码文件的文件名将在你的终端上滚动显示。
- en: Once svnlite(1) finishes, take a look in */usr/src*.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 svnlite(1) 完成，查看 */usr/src*。
- en: '[PRE23]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This is the top directory of the FreeBSD source tree, which contains all the
    code needed to build your chosen FreeBSD version.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 FreeBSD 源代码树的顶级目录，包含构建你选择的 FreeBSD 版本所需的所有代码。
- en: '***Updating Source Code***'
  id: totrans-185
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***更新源代码***'
- en: So you built FreeBSD yesterday? Cool. But now you want to build today’s version.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你昨天构建了 FreeBSD？很酷。但现在你想要构建今天的版本。
- en: The good news is, Subversion needs only to update the code you’ve downloaded,
    not download the whole source code tree. The better news is, the source code records
    where you got it from and what branch it’s supposed to be from in the *.svn* directory.
    This makes updating much simpler than the initial download.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，Subversion 只需要更新你已经下载的代码，而不是重新下载整个源代码树。更好的消息是，源代码会记录你从哪里获取它，以及它应该属于哪个分支，这些信息存储在
    *.svn* 目录中。这使得更新比初始下载要简单得多。
- en: FreeBSD has integrated the Subversion commands into the source code. All you’ll
    need to do is tell the system that it may call svnlite(1) for updates by setting
    SVN_UPDATE in */etc/src.conf*.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD 已经将 Subversion 命令集成到源代码中。你需要做的就是告诉系统，它可以通过设置 SVN_UPDATE 在 */etc/src.conf*
    中调用 svnlite(1) 来更新。
- en: '[PRE24]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now run make update to get the latest source code.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行 make update 来获取最新的源代码。
- en: '[PRE25]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You’ll see the same sorts of updates flow past. These updates will be much quicker
    than the original download, though.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到相同类型的更新流过。尽管这些更新会比最初的下载速度快得多。
- en: '**Building FreeBSD from Source**'
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**从源代码构建 FreeBSD**'
- en: Once you have the latest source code, look at */usr/src/UPDATING*. The beginning
    of this file lists, in reverse chronological order, any warnings and special notices
    about changes to FreeBSD that are of special interest to people who build from
    source. These notes tell you whether you must take any particular actions before
    rebuilding your system or whether any major system functionality has changed.
    If you want your system to work after the upgrade, follow these instructions exactly.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你拥有最新的源代码，查看*/usr/src/UPDATING*文件。该文件的开头按时间倒序列出了与FreeBSD变更相关的任何警告和特别通知，这些内容对从源代码构建的人尤为重要。这些说明会告诉你在重建系统之前是否需要采取任何特别的操作，或者系统的主要功能是否发生了变化。如果你希望在升级后系统能够正常工作，请严格按照这些说明操作。
- en: The end of the *UPDATING* file gives the official instructions for building
    FreeBSD from source. The procedure described in this book has been used since
    FreeBSD 6-current, which changed only slightly from 5-current, but I still recommend
    double-checking the instructions herein against those in *UPDATING*.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '*UPDATING*文件的末尾给出了从源代码构建FreeBSD的官方说明。本书中描述的过程自FreeBSD 6-current以来一直在使用，虽然与5-current相比仅有些微变化，但我仍然建议你将本书中的说明与*UPDATING*中的说明进行核对。'
- en: If you use a custom kernel, also examine the new GENERIC or NOTES kernel configuration
    files for any new options or interesting kernel changes.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用自定义内核，还需要检查新的GENERIC或NOTES内核配置文件，查看是否有新的选项或有趣的内核变更。
- en: '**CUSTOMIZING YOUR FREEBSD BUILD**'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义你的FreeBSD构建**'
- en: Remember back in [Chapter 16](ch16.xhtml#ch16) when we discussed */etc/make.conf*
    ? FreeBSD uses a separate file to handle customizations for building FreeBSD itself.
    While settings in */etc/make.conf* affect all software built on the system, anything
    in */etc/src.conf* affects only building FreeBSD from source.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得在[第16章](ch16.xhtml#ch16)中我们讨论过*/etc/make.conf*吗？FreeBSD使用一个单独的文件来处理构建FreeBSD自身的自定义设置。虽然*/etc/make.conf*中的设置会影响系统上构建的所有软件，但*/etc/src.conf*中的任何内容只会影响从源代码构建FreeBSD。
- en: If you hang around the FreeBSD community for a while, you’ll hear all sorts
    of stories about special methods people use for building FreeBSD. You’ll hear
    anecdotal evidence that one method is faster, more efficient, or somehow mystically
    “better” than the standard. While you are certainly free to use any build method
    that strikes your fancy, the only method supported by the FreeBSD Project is that
    documented at the end of */usr/src/UPDATING*. If you follow some other procedure
    and have trouble, you’ll be referred to the documented procedure.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在FreeBSD社区呆一段时间，你会听到各种关于人们用来构建FreeBSD的特殊方法的故事。你会听到一些非正式的证据，声称某种方法比标准方法更快、更高效，或者在某种神秘的方式上“更好”。虽然你当然可以自由选择任何你喜欢的构建方法，但FreeBSD项目唯一支持的方法是*/usr/src/UPDATING*文件末尾所记录的方法。如果你采用其他程序并遇到问题，你将被引导回文档中记录的程序。
- en: '***Build the World***'
  id: totrans-200
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***构建世界***'
- en: 'First, build the new userland:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，构建新的用户环境：
- en: '[PRE26]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `make buildworld` command builds from source the basic tools needed to build
    the system compiler and then builds the compiler and associated libraries. Finally,
    it uses the new tools, compiler, and libraries to build all the software included
    in a core FreeBSD install. (This is much like building a car starting with the
    instruction, “Dig iron ore out of the ground.”) The `buildworld` places its output
    under */usr/obj*. It can take anywhere from one to several hours, depending on
    your hardware. You can continue working normally as the `buildworld` runs, if
    your hardware is robust enough; while the build consumes system resources, it
    won’t take any of your attention.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`make buildworld`命令从源代码构建构建系统编译器所需的基本工具，然后构建编译器及其相关库。最后，它使用新工具、编译器和库来构建FreeBSD核心安装中包含的所有软件。（这就像在开始构建一辆车时，指令是“从地下挖出铁矿石。”）`buildworld`将其输出放在*/usr/obj*目录下。根据你的硬件，它可能需要从一小时到几个小时的时间。如果你的硬件足够强大，`buildworld`运行时你可以继续正常工作；尽管构建过程中会消耗系统资源，但它不会占用你的注意力。'
- en: When the `buildworld` finishes, confirm that it completed without errors. If
    the build ends with a bunch of messages like those you see during a failed kernel
    compile, do not proceed with the upgrade. If you can’t figure out why the build
    failed, go to [Chapter 1](ch01.xhtml#ch01) to see how you can get help. Never
    attempt to install a damaged or incomplete upgrade.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 当`buildworld`完成后，确认它没有错误地完成。如果构建结束时显示了类似内核编译失败时的错误信息，不要继续进行升级。如果你无法弄清楚为什么构建失败，去[第1章](ch01.xhtml#ch01)查看如何获得帮助。绝不要尝试安装损坏或不完整的升级版本。
- en: '**PARALLEL MAKE WORLD**'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**并行构建世界**'
- en: Experienced sysadmins have probably used the `-j` flag of make(1) to increase
    build speed. This starts multiple build processes and allows the system to take
    advantage of multiple CPUs. If you have a multi-CPU system or if your CPU has
    multiple cores, `-j` can work when building FreeBSD. A reasonable number of builds
    to start is one more than the number of CPUs you have. For example, if you have
    an eight-core processor, you can reasonably use nine build processes by running
    `make -j9 buildworld && make -j9 kernel`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 经验丰富的系统管理员可能已经使用过 make(1) 的 `-j` 标志来提高构建速度。这会启动多个构建进程，并允许系统利用多个 CPU。如果你有一个多
    CPU 系统，或者你的 CPU 有多个核心，使用 `-j` 在构建 FreeBSD 时是可行的。一个合理的启动构建进程数是比你的 CPU 数量多一个。例如，如果你有一个八核处理器，你可以通过运行
    `make -j9 buildworld && make -j9 kernel` 来合理地使用九个构建进程。
- en: The FreeBSD Project doesn’t officially support `-j` for upgrades, even though
    many developers use it. If your build fails when using `-j`, try without `-j`
    before complaining.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD 项目官方并不支持 `-j` 用于升级，尽管许多开发者使用它。如果在使用 `-j` 时构建失败，在抱怨之前请尝试去掉 `-j`。
- en: '***Build, Install, and Test a Kernel***'
  id: totrans-208
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***构建、安装并测试内核***'
- en: The best way to test your upgrade is to build a new GENERIC kernel. This separates
    problems in your custom kernel from general FreeBSD issues. The impetuous are
    certainly welcome to upgrade straight to their custom kernel configuration, but
    if your kernel fails, you’ll need to try a GENERIC kernel. Be sure to compare
    your custom kernel to the new GENERIC configuration, however, to catch any alterations
    your custom setup needs. You can use the Subversion history at *[https://svnweb.FreeBSD.org/](https://svnweb.FreeBSD.org/)*
    to compare the kernel configurations of different releases.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 测试升级的最佳方法是构建一个新的 GENERIC 内核。这可以将自定义内核中的问题与 FreeBSD 的通用问题分开。冲动的用户当然可以直接升级到他们的自定义内核配置，但如果你的内核失败了，你需要尝试使用
    GENERIC 内核。请确保比较你的自定义内核与新的 GENERIC 配置，以便捕捉到任何自定义设置所需的修改。你可以使用 Subversion 历史记录在
    *[https://svnweb.FreeBSD.org/](https://svnweb.FreeBSD.org/)* 上对比不同版本的内核配置。
- en: By default, the kernel upgrade process builds a GENERIC kernel. If you want
    to upgrade straight to a custom kernel, use the variable `KERNCONF` to tell make(1)
    the kernel name. You can set `KERNCONF` on the command line, in */etc/make.conf*,
    or in */etc/src.conf*.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，内核升级过程会构建一个 GENERIC 内核。如果你想直接升级到自定义内核，可以使用变量 `KERNCONF` 告诉 make(1) 内核的名称。你可以在命令行、*/etc/make.conf*
    或 */etc/src.conf* 中设置 `KERNCONF`。
- en: 'You can build a new kernel in one of two ways. The `make buildkernel` command
    builds a new kernel but doesn’t install it. Follow a `make buildkernel` with a
    `make installkernel` to install the kernel. The `make kernel` command runs these
    two commands right after each other. Use the one that best matches your schedule.
    For example, if I’m doing a system upgrade at work during my Sunday maintenance
    window, I might run `make buildworld` and `make buildkernel` during the preceding
    week to save a few hours of my precious weekend. I don’t want to install that
    kernel before the maintenance day, however—if the machine has a problem on Friday
    and needs a reboot, I want to boot the old production kernel and not the new,
    upgraded kernel. On Sunday morning, when I’m ready to actually upgrade, I run
    `make installkernel`. On the other hand, using `make kernel` makes sense when
    upgrading my desktop. So, to upgrade with my custom kernel, I’d run:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过两种方式构建一个新的内核。`make buildkernel` 命令会构建一个新的内核，但不会安装它。你可以在运行 `make buildkernel`
    后，接着运行 `make installkernel` 来安装内核。`make kernel` 命令会在执行时同时运行这两个命令。选择最适合你计划的方式。例如，如果我在工作中进行系统升级，并且是在周日的维护窗口进行，我可能会在前一周运行
    `make buildworld` 和 `make buildkernel` 来节省几个小时的宝贵周末时间。但我不想在维护日之前安装该内核——如果机器在周五出现问题并需要重启，我想启动旧的生产内核，而不是新的升级内核。周日早上，当我准备好进行升级时，我会运行
    `make installkernel`。另一方面，当升级我的桌面系统时，使用 `make kernel` 是更有意义的。因此，要使用我的自定义内核进行升级，我会运行：
- en: '[PRE27]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Again, do not attempt to install a kernel that didn’t successfully compile.
    If your `make buildkernel` errors out and dies, fix that problem before proceeding.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，请不要尝试安装未成功编译的内核。如果你的 `make buildkernel` 出现错误并中断，请在继续之前先解决该问题。
- en: Once you have a new kernel installed, reboot your computer into single-user
    mode. Why single-user mode? The userland might expect different kernel interfaces
    than the new kernel provides. While */usr/src/UPDATING* should list all of these,
    no document can cover all possible changes and their impact on third-party software.
    Such changes happen rarely on -stable but unpredictably on -current. If you update
    your host every week, your userland might have a problem on the new kernel. If
    you haven’t updated the host for a year, you get a year’s worth of changes dumped
    on you simultaneously. While many people get away with installing the upgrades
    in full multiuser mode, single-user mode is safest.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了新内核后，重新启动计算机进入单用户模式。为什么要单用户模式？用户空间可能期望与新内核提供的不同的内核接口。虽然*/usr/src/UPDATING*应列出所有这些内容，但没有文档可以涵盖所有可能的更改及其对第三方软件的影响。这些更改在-stable上很少发生，但在-current上却是不可预测的。如果每周更新主机，则您的用户空间可能在新内核上出现问题。如果您一年没有更新主机，那么所有变更将同时被推送给您。虽然许多人可以在完全多用户模式下安装升级，但单用户模式是最安全的选择。
- en: If your system runs correctly in single-user mode with the new kernel, proceed.
    Otherwise, fully document the issue and boot the old kernel to restore service
    while you solve the problem.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的系统在新内核的单用户模式下运行正常，请继续。否则，请完全记录问题并启动旧内核以恢复服务，同时解决问题。
- en: '***Prepare to Install the New World***'
  id: totrans-216
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***准备安装新世界***'
- en: Beware, grasshopper! This is the point of no return. You can easily back out
    a bad kernel—just boot the older, known good one. Once you install a freshly built
    world, you can’t revert it out without recovering from backup or using a ZFS boot
    environment. Confirm that you have a good backup before proceeding, or at least
    recognize that the first irrevocable step is happening right now.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 当心，小虫子！这是无法回头的时刻。您可以轻松地回退到一个糟糕的内核——只需启动较旧的、已知良好的内核即可。一旦安装了新构建的世界，您将无法撤销，除非从备份中恢复或使用ZFS引导环境。在继续之前，请确认您有一个良好的备份，或者至少认识到第一个不可逆转的步骤正在发生。
- en: If your new kernel works, proceed to installing your freshly built userland.
    First, confirm that your system can install the new binaries. Each new version
    of FreeBSD expects that the old system supports all the necessary users, groups,
    and privileges that the new version requires. If a program must be owned by a
    particular user and that user doesn’t exist on the system, the upgrade will fail.
    That’s where mergemaster(8) comes in.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果新内核运行正常，请继续安装您刚刚构建的用户空间。首先确认您的系统能够安装新的二进制文件。每个新版本的FreeBSD都希望旧系统支持新版本所需的所有必要用户、组和权限。如果一个程序必须由特定用户拥有而该用户在系统上不存在，则升级将失败。这就是mergemaster(8)的用武之地。
- en: '**mergemaster(8)**'
  id: totrans-219
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**mergemaster(8)**'
- en: The mergemaster program compares the existing configuration files under */etc*
    to the new files in */usr/src/etc*, highlights the differences between them, and
    either installs them for you, sets them aside for evaluation, or even lets you
    merge two different configuration files into one. This is extremely useful during
    upgrades. You run mergemaster once before installing the new world to ensure that
    your system can install the new binaries, and you run it once after installing
    the new world to synchronize the rest of */etc* with your new world.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: mergemaster程序将现有的配置文件在*/etc*下与*/usr/src/etc*中的新文件进行比较，突出显示它们之间的差异，并为您安装它们，将它们设置为评估的一部分，甚至允许您将两个不同的配置文件合并为一个。在升级过程中，这非常有用。您在安装新世界之前运行一次mergemaster以确保系统能够安装新的二进制文件，并在安装新世界后再运行一次以使*/etc*的其余部分与新世界同步。
- en: Start with mergemaster(8)’s prebuildworld mode, using the `-Fp` flags. The `-F`
    flag automatically installs any files that differ only by version control information.
    The `-p` flag compares */etc/master.passwd* and */etc/group* and highlights any
    accounts or groups that must exist for an `installworld` to succeed.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 以mergemaster(8)的prebuildworld模式开始，使用`-Fp`标志。`-F`标志自动安装仅通过版本控制信息不同的文件。`-p`标志比较*/etc/master.passwd*和*/etc/group*，并突出显示任何必须存在以使`installworld`成功的帐户或组。
- en: '[PRE28]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: These initial messages, all preceded by three asterisks, are mergemaster explaining
    what it’s doing. We start with a temporary root directory ➊ in */var/tmp/temproot*
    so mergemaster can install a pristine set of configuration files ➋ to compare
    with the installed files. After that, mergemaster shows its first comparison.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这些初始消息，均以三个星号开头，是mergemaster在解释其操作。我们从临时根目录 ➊ */var/tmp/temproot* 开始，这样mergemaster就可以安装一组原始的配置文件
    ➋ 以便与已安装的文件进行比较。之后，mergemaster展示了第一次比较。
- en: '[PRE29]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: One vital piece of information is the file being compared, and mergemaster displays
    the filename ➊ up front. We’re examining */etc/group* on the installed system
    and comparing it to a new */etc/group*.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的信息是正在对比的文件，mergemaster会在前面显示文件名 ➊。我们正在检查已安装系统中的*/etc/group*，并与新的*/etc/group*进行对比。
- en: We then see the two different versions of the file being compared, the installed
    file first ➋ and the upgraded version of the file second ➌. Notice the minus and
    plus signs at the beginning of these lines. A minus sign indicates that a line
    is from the currently installed file, while a plus sign shows that a line is from
    the version in */usr/src*.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们看到两个不同版本的文件进行对比，首先是已安装的文件 ➋，其次是升级后的文件 ➌。注意这些行前的减号和加号。减号表示该行来自当前已安装的文件，而加号表示该行来自*/usr/src*中的版本。
- en: This is nicely illustrated by the next two lines mergemaster shows. The first
    group listed, marked by a minus sign, is for the current wheel group ➍. The second
    line is the password entry ➎ for the out-of-the-box upgrade. This host’s wheel
    group has a user that’s not in the default install. I want to keep my account
    there.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这一点在mergemaster显示的接下来的两行中得到了很好的说明。第一行带有减号的组是当前的wheel组 ➍。第二行是出厂升级的密码条目 ➎。这个主机的wheel组包含了一个不在默认安装中的用户。我想保留我的账户在其中。
- en: At the end of the listing, there’s a group with a minus sign in front of it
    ➏. This group exists on the local system, but not in the source code. That’s perfectly
    expected.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表的最后，有一个前面带有减号的组 ➏。这个组存在于本地系统中，但不在源代码中。这是完全正常的。
- en: None of the changes here are relevant, this time.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改与本次无关。
- en: Once mergemaster displays all the changes in this file, it displays my options.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦mergemaster显示完所有这些文件中的更改，它会显示我的选项。
- en: '[PRE30]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: I have four choices. I can delete the temporary */etc/group* with `d`. If I
    want to throw away my current configuration and install one straight from the
    source code, I can install it with `i`. If I need some of both the old and new
    versions, I can use `m`. And if I wasn’t paying attention, I can see the comparison
    again with `v`.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我有四个选择。我可以使用`d`删除临时的*/etc/group*。如果我想抛弃当前配置并直接从源代码安装一个新配置，我可以使用`i`安装。如果我需要旧版和新版的一部分内容，我可以使用`m`。如果我没注意到变化，我可以使用`v`再次查看对比。
- en: The new */etc/group* has no changes I need. I delete it, letting mergemaster
    go to the next file, */etc/passwd*.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 新的*/etc/group*没有我需要的更改。我删除它，让mergemaster继续处理下一个文件，*/etc/passwd*。
- en: 'The mergemaster display of the password file starts off much like the groups
    file. Yes, the root password has changed—I’d hope so! There’s an extra entry for
    my account. But in the middle of the display, there’s an entry like this:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: mergemaster显示的密码文件开始时与组文件类似。是的，root密码已经更改——我希望是这样！我的账户有一个额外的条目。但在显示的中间，有一个这样的条目：
- en: '[PRE31]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The line for the user _dhcp ➊ is preceded by a plus sign, and there’s no corresponding
    _dhcp entry with a minus sign. The user _dhcp exists in the downloaded source
    code, but not on the currently running system. If a new user appears in the default
    FreeBSD configuration, it’s because a program or files in the new system expect
    to be owned by that user.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 用户_dhcp ➊的行前面带有加号，并且没有对应的带减号的_dhcp条目。用户_dhcp存在于下载的源代码中，但不在当前运行的系统中。如果新用户出现在默认的FreeBSD配置中，那是因为新系统中的程序或文件期望由该用户拥有。
- en: Installing the new world will fail if this user isn’t present.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个用户不存在，安装新版本将失败。
- en: I can’t replace my current */etc/passwd*, as it contains active user accounts.
    I can’t throw away the new */etc/passwd* because it has users I need in it. I
    guess I have to merge the two files together.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我不能替换当前的*/etc/passwd*，因为它包含了活动用户账户。我也不能丢弃新的*/etc/passwd*，因为它包含了我需要的用户。我想我必须将这两个文件合并在一起。
- en: '[PRE32]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: When merging files, mergemaster splits your command window in half with sdiff(1).
    The left side displays the beginning of the currently installed file, while the
    right side shows the new version. Only the sections that differ are shown. Pick
    the side you want in your new *master.passwd* file.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 合并文件时，mergemaster会将你的命令窗口一分为二，显示sdiff(1)。左侧显示当前已安装文件的开头，而右侧显示新版文件。只有不同的部分会显示。选择你希望保留在新*master.passwd*文件中的部分。
- en: '[PRE33]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This line displays the version control information from both copies of */etc/passwd*.
    On the left, we have the version of this file from the releng/11.1 branch, or
    11.1\. On the right, we have the version from stable/11, or 11-stable. Future
    mergemaster runs will use the version information (among other tools) to determine
    whether a file needs updating, so our merged file needs the correct version number.
    Choose between the left (`l`) and right (`r`) column. I want the entry on the
    right, so I enter `r`.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行显示了 */etc/passwd* 文件两份副本的版本控制信息。左侧是 releng/11.1 分支中的文件版本，即 11.1；右侧是 stable/11
    分支中的文件版本，即 11-stable。未来的 mergemaster 运行将使用版本信息（以及其他工具）来确定文件是否需要更新，因此我们的合并文件需要正确的版本号。请选择左侧（`l`）或右侧（`r`）列。我想要右侧的条目，所以我输入
    `r`。
- en: Mergemaster displays the next difference.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: Mergemaster 显示下一个差异。
- en: '[PRE34]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: I’ve changed my root password, and I want to keep it. Enter l to keep the left-hand
    version.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经更改了我的 root 密码，并且希望保留它。输入 l 以保留左侧版本。
- en: '[PRE35]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In this next example, there’s no entry in the current file and the new user
    _dhcp is in the new file. We need the user _dhcp to complete the `installworld`,
    so enter r to choose the right-hand entry and get the next difference.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，当前文件中没有 _dhcp 用户，而新文件中有。我们需要 _dhcp 用户来完成 `installworld`，因此输入 r 选择右侧条目，并获取下一个差异。
- en: '[PRE36]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: And here’s my account. If I want to log on as myself after the upgrade, I better
    enter l.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我的账户。如果我想在升级后以自己身份登录，我最好输入 l。
- en: 'Once we walk through every difference in the file, mergemaster presents our
    next choices:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们浏览完文件中的每个差异，mergemaster 将展示我们的下一个选择：
- en: '[PRE37]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Viewing the merged file is always a good idea, unless you already know you screwed
    up and want to do it over. Review your merged file with v, and if it looks correct
    to you, install it with i.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 查看合并后的文件总是个好主意，除非你已经知道自己搞砸了，并且想重新做一遍。用 v 查看合并后的文件，如果看起来正确，就用 i 安装它。
- en: '[PRE38]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: You need to rebuild the password database only if you want your new user account
    to work. Enter y.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当你希望新的用户账户生效时，才需要重建密码数据库。输入 y。
- en: You can now install your new userland.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以安装你的新用户空间。
- en: '***Installing the World***'
  id: totrans-256
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***安装世界***'
- en: Still in single-user mode, you can install your brand new FreeBSD with `make
    installworld`. You’ll see numerous messages scroll down the screen, mostly including
    the word *install*.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 仍在单用户模式下，你可以使用 `make installworld` 安装全新的 FreeBSD。你会看到大量消息滚动屏幕，主要包括 *install*
    这个词。
- en: '[PRE39]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: You now have a new userland to go with your shiny new kernel. Congratulations!
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在拥有了新的用户空间，与全新的内核一起。恭喜！
- en: '**Obsolete Files**'
  id: totrans-260
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**过时的文件**'
- en: Installing all the new programs isn’t quite enough, though. An update can remove
    programs and files from the base system. To see what’s obsoleted, run `make check-old`.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仅仅安装所有新程序还不够。更新可能会从基础系统中删除程序和文件。要查看哪些文件已经过时，可以运行 `make check-old`。
- en: '[PRE40]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This lists every part of the system that was once installed on your system but
    is no longer required. Confirm that you’re no longer using these programs; if
    you are, either preserve the existing unsupported program or find an alternative.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 这将列出系统中曾经安装但现在不再需要的每一部分。确认你不再使用这些程序；如果仍在使用，可以保留现有的不受支持的程序或寻找替代方案。
- en: 'A little later in the output, you’ll see the shared libraries that are now
    obsolete:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，你会看到现在已经过时的共享库：
- en: '[PRE41]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Finally, you might see a list of directories that are no longer required. Removing
    a directory is fairly rare, compared to removing a file.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可能会看到一个不再需要的目录列表。与删除文件相比，删除目录比较少见。
- en: If you’re not specifically using any of the old programs or directories, delete
    them with `make delete-old`. make(1) prompts you with the name of each file and
    asks you to confirm that you want to delete the file.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有特别使用任何旧的程序或目录，可以用 `make delete-old` 删除它们。make(1) 会提示每个文件的名称，并询问你是否确认删除该文件。
- en: '[PRE42]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This is stupid. There’s dozens of these files. And I’m going to delete every
    single one. Fortunately, every real Unix includes tools to automate stupidity.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这真是愚蠢。这些文件有好几十个。我打算删除每一个。幸运的是，每个真实的 Unix 系统都包括一些自动化愚蠢操作的工具。
- en: '[PRE43]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: All of these files go away. Or, if you want to use FreeBSD’s built-in options,
    use the `BATCH_DELETE_OLD_FILES` flag.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些文件都会被删除。或者，如果你想使用 FreeBSD 的内建选项，可以使用 `BATCH_DELETE_OLD_FILES` 标志。
- en: '[PRE44]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: I find yes(1) easier, though.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，我觉得使用 yes(1) 更简单。
- en: '**Obsolete Shared Libraries**'
  id: totrans-274
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**过时的共享库**'
- en: Obsolete shared libraries require more care. Many third-party programs link
    against shared libraries. If you delete the shared library, the program won’t
    run. This can be really, really annoying if you, say, delete the library required
    by your mission-critical application. The only way to restore service is to recompile
    the program or replace the shared library. We discuss shared libraries in [Chapter
    17](ch17.xhtml#ch17). If none of your programs require the library, you can delete
    it. Identifying every program that requires a library is a royal pain, however.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 过时的共享库需要更加小心。许多第三方程序依赖共享库。如果你删除了共享库，该程序将无法运行。如果你删除了关键任务应用程序所需的库文件，这会非常麻烦。恢复服务的唯一方法是重新编译程序或替换共享库。我们在[第17章](ch17.xhtml#ch17)中讨论了共享库。如果没有程序需要该库，你可以删除它。然而，识别每个需要该库的程序是件麻烦事。
- en: For example, check the list of obsolete shared libraries above. One of the entries
    is libzfs.so.2\. Looking in */lib*, I see that we now have libzfs.so.3\. Perhaps
    I shouldn’t need two different versions of the ZFS library. This host uses ZFS,
    though, and I have a whole bunch of ZFS utilities installed. If I remove the old
    version of libzfs, there’s a chance one of those programs won’t work anymore.
    The presence of these obsolete library versions doesn’t hurt anything in the short
    term; you can bring your system back on line with the old libraries in addition
    to the new ones and reinstall your add-on software in a more leisurely manner.
    We’ll update your ports later in this chapter.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，检查上面列出的过时共享库。条目之一是libzfs.so.2。查看*/lib*，我发现现在有libzfs.so.3。也许我不需要两个不同版本的ZFS库。虽然这台主机使用ZFS，并且我安装了很多ZFS工具。如果我删除旧版本的libzfs，可能会导致其中某些程序无法再工作。过时的库版本短期内并不会造成问题；你可以在系统上同时保留旧库和新库，并以更从容的方式重新安装附加软件。稍后我们将在本章更新你的端口。
- en: If you believe that none of the libraries listed as old are important and you
    can safely delete them, back up each before removing it. By just copying the library
    to an *old-libs* directory somewhere, you’ll make recovery much simpler when you
    find out that your mission-critical software doesn’t work anymore.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认为列出的旧库都不重要，可以安全删除它们，那么在删除之前先备份每个库文件。只需将库文件复制到某个*old-libs*目录中，当你发现关键任务软件不再工作时，恢复起来会简单得多。
- en: You can also copy old libraries into */usr/lib/compat* so that your programs
    will continue to run but the old libraries will be safely out of the way. The
    problem here is that we both know perfectly well that you’re never going to go
    clean up those libraries.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将旧库文件复制到*/usr/lib/compat*目录中，这样你的程序将继续运行，但旧的库文件会被安全地放在一旁。这里的问题是，我们都知道你永远不会去清理这些库文件。
- en: I prefer to back up the libraries and then remove them from the live system.
    When I find a program doesn’t work, I temporarily copy the missing library from
    the backup into a compat directory. The added annoyance ticks me off enough to
    solve the real problem, so I can delete the compat library.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我更喜欢先备份库文件，然后再将它们从实时系统中移除。当我发现某个程序无法工作时，我会暂时从备份中将缺失的库文件复制到兼容目录中。这种额外的麻烦足以让我去解决真正的问题，这样我就可以删除兼容库。
- en: '[PRE45]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Once you have the libraries backed up, delete them all. You can use the `BATCH_DELETE_OLD_FILES`
    option here, but once again, I find yes(1) easier to type.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你备份了库文件，删除它们。你可以在这里使用`BATCH_DELETE_OLD_FILES`选项，但我发现yes(1)更容易输入。
- en: '[PRE46]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: If by some chance removing these libraries breaks pkg(8), run `pkg-static` `install
    -f pkg` to fix pkg(8) itself or `pkg-static upgrade -f` to reinstall all packages.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因删除这些库文件导致pkg(8)出现问题，可以运行`pkg-static` `install -f pkg`来修复pkg(8)本身，或者运行`pkg-static
    upgrade -f`来重新安装所有包。
- en: Another option is to use the libchk package to identify programs linked against
    old libraries.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选择是使用libchk包来识别链接到旧库的程序。
- en: '**mergemaster Revisited**'
  id: totrans-285
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**mergemaster重访**'
- en: We’re almost there! While we already updated the passwords and group information
    in */etc*, we must update the rest of the files. mergemaster has many special
    functions, all documented in its man page. I’m going to specifically recommend
    the two that I find notably useful.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 我们快完成了！虽然我们已经更新了*/etc*中的密码和组信息，但我们还必须更新其余的文件。mergemaster有很多特殊功能，所有这些都在其手册页中有详细记录。我将特别推荐两个我认为特别有用的功能。
- en: When a file is added to the base FreeBSD install, there’s no need to compare
    it to anything. The `-i` option makes mergemaster automatically install new files
    in */etc*. I’ll get a list of automatically installed files at the end of the
    mergemaster run.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个文件被添加到基础FreeBSD安装中时，无需与任何内容进行比较。`-i`选项会使mergemaster自动安装*/etc*中的新文件。在mergemaster运行结束时，我会得到一个自动安装文件的列表。
- en: Another set of files that I don’t really care about are files that I haven’t
    edited. For example, FreeBSD has dozens of startup scripts in */etc/rc.d*. If
    I haven’t edited a startup script, I just want to install the newest version of
    the script. The `-U` flag tells mergemaster to automatically update any base system
    file that I haven’t edited.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 另一些我不太关心的文件是那些我没有编辑过的文件。例如，FreeBSD在*/etc/rc.d*中有数十个启动脚本。如果我没有编辑过某个启动脚本，我只想安装该脚本的最新版本。`-U`标志告诉mergemaster自动更新任何我没有编辑过的基础系统文件。
- en: '[PRE47]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The mergemaster program examines every file in */etc* and compares it to that
    in the base distribution of FreeBSD. This works exactly the same way as in your
    preinstallation mergemaster run, so we’re not going to walk through it here. You
    should be familiar with the customizations you’ve made to your system, so nothing
    should surprise you. If anything looks unfamiliar, refer to [Chapter 14](ch14.xhtml#ch14).
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: mergemaster程序会检查*/etc*中的每个文件，并与FreeBSD基础发行版中的文件进行比较。这与你在安装前运行mergemaster时的方式完全相同，因此我们这里不再详细讲解。你应该熟悉你对系统所做的自定义，因此不应该有什么意外。如果有任何看起来不熟悉的内容，请参考[第14章](ch14.xhtml#ch14)。
- en: Reboot, and your base system is fully upgraded!
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 重启后，基础系统就完全升级了！
- en: '***Customizing Mergemaster***'
  id: totrans-292
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***自定义Mergemaster***'
- en: Once you’ve run mergemaster a few times you’ll realize that certain files always
    annoy you. Mergemaster will always complain about your customized */etc/motd*
    and */etc/printcap*. You’ll probably wind up typing `-F` or `-U` every single
    time. You can set your preferred options in *$HOME/.mergemasterrc*, as documented
    in mergemaster(8). While you should read the man page for the complete list, here
    are the options I use most often.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你运行mergemaster几次，你会发现某些文件总是让你烦恼。mergemaster总是抱怨你定制的*/etc/motd*和*/etc/printcap*。你可能会每次都输入`-F`或`-U`。你可以将你偏好的选项设置在*$HOME/.mergemasterrc*中，具体见mergemaster(8)文档。虽然你应该阅读手册页面来查看完整的选项列表，以下是我最常使用的选项。
- en: '**Ignoring Files**'
  id: totrans-294
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**忽略文件**'
- en: Certain files you don’t want mergemaster to even bother examining. Your organization’s
    */etc/motd* will never match that in the FreeBSD distribution. Neither will your
    custom printer configuration, your *snmpd.conf*, or your tailored *sshd_config*.
    To have mergemaster skip these files, list them in `IGNORE_FILES`.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 某些文件你不希望mergemaster甚至去检查。你组织的*/etc/motd*文件永远不会与FreeBSD发行版中的文件匹配。你的自定义打印机配置、*snmpd.conf*或定制的*sshd_config*也不会匹配。要让mergemaster跳过这些文件，可以将它们列在`IGNORE_FILES`中。
- en: '[PRE48]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: I don’t list the password or group file here because sometimes FreeBSD introduces
    new users.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里没有列出密码或组文件，因为有时FreeBSD会引入新的用户。
- en: '**Auto Install New Files**'
  id: totrans-298
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**自动安装新文件**'
- en: If you want mergemaster to automatically install files present in the new version
    of FreeBSD but not on the system yet, set `AUTO_INSTALL`.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望mergemaster自动安装FreeBSD新版本中但尚未出现在系统上的文件，可以设置`AUTO_INSTALL`。
- en: '[PRE49]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: This is equivalent to the `-i` flag.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于`-i`标志。
- en: '**Autoupdate Unchanged Files**'
  id: totrans-302
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**自动更新未更改的文件**'
- en: Different versions of FreeBSD have similar files. Some files are almost identical,
    differing only by the line containing version control information. You can tell
    mergemaster to automatically update files that differ only by the version control
    information by using the `FREEBSD_ID` option.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 不同版本的FreeBSD有类似的文件。有些文件几乎是相同的，只在包含版本控制信息的那一行上有所不同。你可以告诉mergemaster通过使用`FREEBSD_ID`选项自动更新那些只在版本控制信息上有所不同的文件。
- en: '[PRE50]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: This is the same as the `-F` flag.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 这与`-F`标志相同。
- en: '**Autoupdate Unedited Files**'
  id: totrans-306
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**自动更新未编辑的文件**'
- en: You can tell mergemaster to update files that haven’t been edited since they
    were installed. The FreeBSD team changes */etc/* files when it wants to change
    how the system behaves. While many of those changes might be irrelevant to you,
    a few might give you trouble. If you want to blindly update everything you haven’t
    touched, set `AUTO_UPGRADE`.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以告诉mergemaster更新那些自安装以来未被编辑过的文件。FreeBSD团队会在希望改变系统行为时修改*/etc/*中的文件。虽然这些变化中的许多可能与你无关，但其中的一些可能会给你带来麻烦。如果你想盲目更新所有未更改过的文件，可以设置`AUTO_UPGRADE`。
- en: '[PRE51]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This is equivalent to the `-U` option.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于`-U`选项。
- en: '**Update Databases**'
  id: totrans-310
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**更新数据库**'
- en: FreeBSD builds databases from */etc/master.passwd*, */etc/services*, and so
    on. If you update these files, you also need to update the corresponding databases.
    Mergemaster asks you at the end of each run if you want to run these updates.
    Tell mergemaster always to run the updates by setting `RUN_UPDATES`.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD从*/etc/master.passwd*、*/etc/services*等文件构建数据库。如果你更新了这些文件，也需要更新相应的数据库。Mergemaster会在每次运行结束时询问你是否要运行这些更新。通过设置`RUN_UPDATES`，告诉mergemaster始终运行更新。
- en: '[PRE52]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: You can find other options in mergemaster(8).
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在mergemaster(8)中找到其他选项。
- en: '***Upgrades and Single-User Mode***'
  id: totrans-314
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***升级与单用户模式***'
- en: According to the instructions, several parts of the upgrade must be done in
    single-user mode. Many users consider this an annoyance or even a handicap. FreeBSD
    programs are just files on disk, aren’t they? Common sense says that you can just
    copy them to the disk, reboot, and be done with it.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 根据说明，升级的几个部分必须在单用户模式下完成。许多用户认为这是烦人的，甚至是一个障碍。FreeBSD程序不就是磁盘上的文件吗？常识告诉我们，你可以将它们复制到磁盘上，重新启动，然后就完成了。
- en: 'Here’s yet another instance where your common sense is trying to ruin your
    month. On rare occasions, the FreeBSD team needs to make some low-level changes
    in the system that require running the install in single-user mode. You can have
    conflicts where vital programs won’t run when installed in multiuser mode. This
    is rare, but if it happens with */bin/sh*, you’re in a world of hurt. You have
    a very straightforward recovery route if that happens: remove the hard drive from
    the server, mount it in another machine, boot the other machine, and copy your
    data off the destroyed system before formatting and reinstalling. Or, you can
    boot from the installation media and demonstrate your amazing sysadmin skills.^([5](footnote.xhtml#ch18fn5))'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个常识试图毁了你一个月的例子。偶尔，FreeBSD团队需要做一些系统的底层更改，这些更改要求在单用户模式下运行安装程序。你可能会遇到冲突，导致一些重要程序在多用户模式下无法运行。这种情况很少发生，但如果它发生在*/bin/sh*上，你会陷入麻烦。如果发生这种情况，你有一个非常简单的恢复路线：将硬盘从服务器中取出，挂载到另一台机器上，启动该机器，并在格式化并重新安装之前将数据从损坏的系统中复制出来。或者，你可以从安装介质启动，展示你惊人的系统管理员技能。^([5](footnote.xhtml#ch18fn5))
- en: Running in multiuser mode can cause other upgrade problems, such as subtle races,
    symbol issues, and innumerable other headaches. You can choose to upgrade in multiuser
    mode, but don’t complain if your system has a problem.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在多用户模式下运行可能会导致其他升级问题，比如微妙的竞争条件、符号问题和无数其他头痛问题。你可以选择在多用户模式下升级，但如果系统出现问题，不要抱怨。
- en: It’s perfectly safe to build your new world in multiuser mode. You can even
    build and install your new kernel in multiuser mode. Once you start installing
    the userland, however, you *must* be in single-user mode and running on your upgraded
    kernel.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在多用户模式下构建新世界是完全安全的。你甚至可以在多用户模式下构建并安装你的新内核。然而，一旦你开始安装用户空间，你*必须*进入单用户模式，并在升级后的内核上运行。
- en: '**NFS AND UPGRADES**'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '**NFS和升级**'
- en: Have a lot of machines to update? Look at NFS, which we discussed in [Chapter
    13](ch13.xhtml#ch13). Build world and all your kernels on a central, fast machine,
    and then export */usr/src* and */usr/obj* from that system to your other clients.
    Running `make installkernel` and `make installworld` from those NFS exports saves
    build time on all your other machines and guarantees that you have the same binaries
    on all your FreeBSD boxes.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多机器需要更新吗？请查看我们在[第13章](ch13.xhtml#ch13)中讨论过的NFS。你可以在一台中央的快速机器上构建世界和所有内核，然后将*/usr/src*和*/usr/obj*从该系统导出到其他客户端。从这些NFS导出中运行`make
    installkernel`和`make installworld`可以节省其他机器的构建时间，并确保所有FreeBSD系统上的二进制文件一致。
- en: '**Shrinking FreeBSD**'
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**缩减FreeBSD**'
- en: What’s the point of having all this source code if you can’t customize your
    operating system? FreeBSD not only gives you the source code; it provides ready-to-turn
    knobs to easily customize your FreeBSD build.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你无法自定义操作系统，拥有这些源代码有什么意义呢？FreeBSD不仅提供源代码，它还提供了现成的旋钮，轻松自定义你的FreeBSD构建。
- en: These options can be set in either */etc/make.conf* (see [Chapter 16](ch16.xhtml#ch16))
    or */etc/src.conf*. Settings in *src.conf* apply only to building the FreeBSD
    source, while *make.conf* ’s settings apply to all source code building. The full
    list of *src.conf* options are documented in src.conf(5), but they all follow
    a standard pattern.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项可以在*/etc/make.conf*（参见[第16章](ch16.xhtml#ch16)）或*/etc/src.conf*中设置。*src.conf*中的设置仅适用于构建FreeBSD源代码，而*make.conf*的设置适用于所有源代码构建。*src.conf*选项的完整列表在src.conf(5)中有文档说明，但它们都遵循一个标准的模式。
- en: Each of these options starts with either `WITHOUT_` or, in a few cases, `WITH_`
    and then names a specific subsystem. For example, the `WITHOUT_BHYVE` option turns
    off building or installing the bhyve(8) hypervisor. The `WITHOUT_INETD` option
    turns off building the inetd(8) daemon (see [Chapter 20](ch20.xhtml#ch20)). The
    `WITHOUT_INET6` option turns off IPv6\. If you want to shrink your FreeBSD install,
    chop out everything you don’t need.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项中的每一个都以`WITHOUT_`开头，少数情况下是`WITH_`，然后是特定子系统的名称。例如，`WITHOUT_BHYVE`选项会关闭bhyve(8)虚拟机监控器的构建或安装。`WITHOUT_INETD`选项会关闭inetd(8)守护进程的构建（参见[第20章](ch20.xhtml#ch20)）。`WITHOUT_INET6`选项会关闭IPv6。如果你想缩小你的FreeBSD安装，剔除所有不需要的部分。
- en: The build system checks to see whether any of these variables are defined to
    any value at all. This means that even if you set one of these to `NO`, the mere
    presence of the option activates the option. Don’t go copying all of these to
    *src.conf* and setting them all to `NO` because you’ll disable building a great
    big bunch of the system.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 构建系统会检查这些变量是否已定义为某个值。这意味着即使你将其中一个设置为`NO`，仅仅是选项的存在就会激活该选项。不要把这些全部复制到*src.conf*并将它们都设置为`NO`，因为这样你会禁用系统中大量的构建内容。
- en: In most cases, adding these `WITHOUT_` options includes the removed systems
    in the `make delete-old` checks. If you decide that your system doesn’t need bhyve(8),
    for example, the upgrade not only doesn’t build a new bhyve binary but also offers
    to remove the existing one from the installed system. If you’re not building a
    piece of software, you’re better off removing it entirely as opposed to leaving
    the old version lingering on the system.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，添加这些`WITHOUT_`选项会将移除的系统包含在`make delete-old`检查中。例如，如果你决定系统不需要bhyve(8)，升级时不仅不会构建新的bhyve二进制文件，还会提议从已安装的系统中移除现有的bhyve。如果你不打算构建某个软件，最好完全移除它，而不是让旧版本继续存在于系统中。
- en: '**Packages and System Upgrades**'
  id: totrans-327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**软件包和系统升级**'
- en: Operating system upgrades are great, except for the part where nobody cares.^([6](footnote.xhtml#ch18fn6))
    Base operating system updates are necessary, but most people don’t really care
    about using the base system. They care about using software that runs on the base
    system. And that software is prone to the same flaws as every other program. You
    need to upgrade it. [Chapter 15](ch15.xhtml#ch15) discusses upgrading packages
    in general, but let’s talk about what happens when you upgrade the operating system
    underneath the packages.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统升级很棒，除了没人关心的那部分。^([6](footnote.xhtml#ch18fn6)) 基础操作系统更新是必要的，但大多数人并不关心使用基础系统。他们关心的是在基础系统上运行的软件。而这些软件和其他程序一样，容易出现缺陷。你需要升级它。[第15章](ch15.xhtml#ch15)讨论了软件包的一般升级，但我们来谈谈当你升级操作系统时对软件包的影响。
- en: The common issues with packages and system upgrades normally boil down to shared
    libraries. If you’re upgrading FreeBSD major releases—say, from FreeBSD 12 to
    FreeBSD 13—you’ll need to reinstall all of your packages.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 软件包和系统升级中常见的问题通常归结为共享库。如果你正在升级FreeBSD的主要版本——比如从FreeBSD 12升级到FreeBSD 13——你需要重新安装所有的软件包。
- en: Start by upgrading pkg(8) itself, using the `-f` flag to `pkg upgrade`. If the
    upgrade broke pkg(8) itself, you’ll need to use pkg-static(8). This contains key
    pkg(8) functions, but it’s a static binary.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，升级pkg(8)本身，使用`-f`标志进行`pkg upgrade`。如果升级破坏了pkg(8)本身，你需要使用pkg-static(8)。这个工具包含了pkg(8)的核心功能，但它是一个静态二进制文件。
- en: '[PRE53]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: This will bootstrap you into the current package tools. Now you can force a
    redownload and reinstall of all packages.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把你引导进入当前的软件包工具。现在你可以强制重新下载并重新安装所有软件包。
- en: '[PRE54]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Once you’ve upgraded everything you built from packages, rebuild anything you
    built from ports. I really hope you installed your ports via poudriere, though.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你升级了所有通过软件包构建的内容，就需要重新构建任何通过端口构建的内容。我真心希望你是通过poudriere安装的端口。
- en: '**Updating Installed Ports**'
  id: totrans-335
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**更新已安装的端口**'
- en: If you use portsnap to update your ports tree, anything you install from now
    on will be the latest version. But what about your previously installed applications?
    FreeBSD tracks all sorts of dependency information between add-on packages, and
    often updating one program will impact dozens of others. This is a royal pain
    to manage. Wouldn’t it be nice to just say, “Update my Apache install,” and have
    FreeBSD manage the dependencies for you? There’s a few ways to solve this issue.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用portsnap来更新端口树，那么从现在开始，你安装的任何内容都会是最新版本。但之前安装的应用程序怎么办？FreeBSD跟踪各种附加包之间的依赖信息，通常更新一个程序会影响到其他数十个程序。这是一个非常麻烦的管理问题。难道不希望能简单地说，“更新我的Apache安装”，然后让FreeBSD为你管理依赖关系吗？有几种方法可以解决这个问题。
- en: The best way is not to use the ports tree on a production host. Build a private
    repository with poudriere instead (see [Chapter 16](ch16.xhtml#ch16)), and have
    all of your hosts pull from that. This is a change from traditional FreeBSD sysadmin
    practice.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的方法是在生产主机上不使用端口树。改为使用poudriere构建一个私有仓库（参见[第16章](ch16.xhtml#ch16)），然后让所有主机从中拉取。这与传统的FreeBSD系统管理员做法有所不同。
- en: Maybe you have the ports tree installed locally and use one or two custom ports
    atop a bunch of packages. If you have a single port installed, rebuild it, uninstall
    the package, and install the new port. This is terrible for complicated ports
    with many dependencies but works fine for hosts with one or two ports.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你已经在本地安装了端口树，并在一堆包上方使用一两个自定义端口。如果你只安装了一个端口，可以重建它，卸载包，然后安装新端口。对于依赖关系复杂的端口来说，这很糟糕，但对于只有一两个端口的主机来说，效果很好。
- en: Some of us have been around a long time, though, and feel like we live between
    those solutions. Our hosts feel too small to run poudriere, but we need custom
    ports. FreeBSD doesn’t include an official tool for updating a system managed
    largely by ports, but people have written add-on tools, such as portupgrade and
    portmaster. The problem with these tools is that they’re maintained outside of
    FreeBSD. If they can’t upgrade a port but the normal build process works, the
    tool users are responsible for fixing the problems. That’s true of all parts of
    FreeBSD, but the base system has a wider base of users than any add-on tool.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 我们中的一些人已经存在很长时间了，感觉自己生活在这些解决方案之间。我们的主机感觉太小，无法运行poudriere，但我们需要自定义端口。FreeBSD没有包含用于更新主要由端口管理的系统的官方工具，但有人编写了附加工具，如portupgrade和portmaster。这些工具的问题在于它们是在FreeBSD之外维护的。如果它们无法升级端口，但正常的构建过程有效，工具的用户需要负责修复问题。这适用于FreeBSD的所有部分，但基础系统的用户群比任何附加工具都要广泛。
- en: As I write this, though, FreeBSD’s ports infrastructure is changing to support
    multiple versions of a single package. These tools haven’t been updated to accommodate
    the new infrastructure. I expect one of them will be, but I can’t say which that
    will be. [Chapter 16](ch16.xhtml#ch16) recommended using only packages in production.
    This is why.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着我写这篇文章时，FreeBSD的端口基础设施正在发生变化，以支持单个包的多个版本。这些工具尚未更新以适应新的基础设施。我预计它们中的一个会更新，但我不能说具体会是哪一个。[第16章](ch16.xhtml#ch16)建议在生产环境中仅使用包。这就是原因。
- en: Now that you can update your system and installed software, let’s look at some
    of FreeBSD’s more interesting security features.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以更新系统和已安装的软件，让我们来看一下FreeBSD一些更有趣的安全功能。
