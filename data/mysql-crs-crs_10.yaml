- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Calling Built-in MySQL Functions
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 调用内建 MySQL 函数
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: MySQL has hundreds of prewritten functions that perform a variety of tasks.
    In this chapter, you’ll review some common functions and learn how to call them
    from your queries. You’ll work with aggregate functions, which return a single
    value summary based on many rows of data in the database, and functions that help
    perform mathematical calculations, process strings, deal with dates, and much
    more.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 有数百个预写的函数，执行各种任务。在本章中，您将回顾一些常见的函数，并学习如何从查询中调用它们。您将使用聚合函数，这些函数基于数据库中许多行数据返回一个单一的值汇总，以及帮助执行数学计算、处理字符串、处理日期等的函数。
- en: In [Chapter 11](c11.xhtml), you’ll learn to create your own functions, but for
    now you’ll focus on calling MySQL’s most useful built-in functions. For an up-to-date
    list of all the built-in functions, the best source is the MySQL reference manual.
    Search online for “MySQL built-in function and operator reference,” and bookmark
    the web page in your browser.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 11 章](c11.xhtml)中，您将学习如何创建自己的函数，但目前您将专注于调用 MySQL 最有用的内建函数。关于所有内建函数的最新列表，最好的来源是
    MySQL 参考手册。在线搜索“MySQL 内建函数与操作符参考”，并将网页添加到您的浏览器书签中。
- en: What Is a Function?
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是函数？
- en: 'A *function* is a set of saved SQL statements that performs some task and returns
    a value. For example, the `pi()` function determines the value of pi and returns
    it. Here’s a simple query that calls the `pi()` function:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*函数* 是一组已保存的 SQL 语句，用于执行某些任务并返回一个值。例如，`pi()` 函数确定圆周率的值并返回它。以下是一个调用 `pi()` 函数的简单查询：'
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Most of the queries you’ve seen thus far include a `from` clause that specifies
    which table to use. In this query, you aren’t selecting from any table, so you
    can call the function without `from`. It returns the following result:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您看到的大多数查询都包含 `from` 子句，指定要使用的表。在这个查询中，您并没有从任何表中选择数据，因此您可以在没有 `from` 的情况下调用该函数。它返回以下结果：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For common tasks such as this, it makes more sense to use MySQL’s built-in function
    rather than having to remember the value every time you need it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种常见任务，使用 MySQL 的内建函数比每次都记住该值更为合理。
- en: Passing Arguments to a Function
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向函数传递参数
- en: As you just saw, functions return a value. Some functions also let you pass
    values to them. When you call the function, you can specify a value that it should
    use. The values you pass to a function are called *arguments*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您刚刚看到的，函数返回一个值。有些函数还允许您传递值给它们。当您调用函数时，可以指定它应该使用的值。传递给函数的值称为 *参数*。
- en: 'To see how arguments work, you’ll call the `upper()` function, which allows
    you to accept one argument: a string value. The function determines what the uppercase
    equivalent of that string is and returns it. The following query calls `upper()`
    and specifies an argument of the text `rofl`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解参数是如何工作的，您将调用 `upper()` 函数，该函数允许您接受一个参数：一个字符串值。该函数确定该字符串的大写等效形式并返回它。以下查询调用
    `upper()` 并指定一个参数为文本 `rofl`：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The result is as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The function translated each letter to uppercase and returned `ROFL`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数将每个字母转换为大写并返回 `ROFL`。
- en: 'In some functions, you can specify more than one argument. For example, `datediff()`
    allows you to specify two dates as arguments and then returns the difference in
    days between them. Here you call `datediff()` to find out how many days there
    are between Christmas and Thanksgiving in 2024:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些函数中，您可以指定多个参数。例如，`datediff()` 允许您指定两个日期作为参数，然后返回它们之间的天数差异。在这里，您调用 `datediff()`
    来查找 2024 年圣诞节与感恩节之间有多少天：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The result is:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When you called the `datediff()` function, you specified two arguments, the
    date of Christmas and the date of Thanksgiving, and separated them by commas.
    The function calculated the difference in days and returned that value (`27`).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当您调用 `datediff()` 函数时，您指定了两个参数，圣诞节的日期和感恩节的日期，并用逗号将它们分开。该函数计算出天数差并返回该值（`27`）。
- en: Functions accept different numbers and types of values. For example, `upper()`
    accepts one string value, while `datediff()` accepts two `date` values. As you’ll
    see in this chapter, other functions accept values that are an integer, a boolean,
    or another data type.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 函数接受不同数量和类型的值。例如，`upper()` 接受一个字符串值，而 `datediff()` 接受两个 `date` 类型的值。正如您将在本章中看到的，其他函数接受整数、布尔值或其他数据类型的值。
- en: Optional Arguments
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可选参数
- en: 'Some functions accept an optional argument, in which you can supply another
    value for a more specific result when you call the function. The `round()` function,
    for example, which rounds decimal numbers, accepts one argument that must be provided
    and a second argument that is optional. If you call `round()` with the number
    you want rounded as the only argument, it will round the number to zero places.
    Try calling the `round()` function with one argument of `2.71828`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一些函数接受一个可选参数，在调用函数时，你可以提供另一个值来获取更具体的结果。例如，`round()`函数，它用于四舍五入小数，接受一个必须提供的参数和一个可选的第二个参数。如果你只传入一个要四舍五入的数字作为唯一参数，它会将数字四舍五入到零位。尝试使用`2.71828`作为唯一参数调用`round()`函数：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `round()` function returns your rounded number with zero digits after the
    decimal point, which also removes the decimal point itself:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`round()`函数将返回四舍五入后的数字，去掉小数点后的位数：'
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you supply `round()` with its optional argument, you can specify how many
    places after the decimal point you want it to round. Try calling `round()` with
    a first argument of `2.71828` and a second argument of `2`, separating the arguments
    with a comma:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你为`round()`提供了可选参数，你可以指定四舍五入小数点后保留的位数。尝试使用`2.71828`作为第一个参数，`2`作为第二个参数，并用逗号分隔参数调用`round()`：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now the result is:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在结果是：
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This time, `round()` returns a rounded number with two digits after the decimal
    point.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，`round()`返回一个四舍五入到小数点后两位的数字。
- en: Calling Functions Within Functions
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在函数内调用函数
- en: You can use the results of one function in a call to another function by wrapping,
    or nesting, functions.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过包装或嵌套函数来将一个函数的结果用作另一个函数的参数。
- en: 'Say you want to get the rounded value of pi. You can wrap your call to the
    `pi()` function within a call to the `round()` function:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想获取 pi 的四舍五入值。你可以将对`pi()`函数的调用包装在对`round()`函数的调用中：
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The result is:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The innermost function gets executed first and the results are passed to the
    outer function. The call to the `pi()` function returns `3.141593`, and that value
    is passed as an argument to the `round()` function, which returns `3`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最内层的函数首先执行，结果传递给外层函数。对`pi()`函数的调用返回`3.141593`，该值作为参数传递给`round()`函数，`round()`返回`3`。
- en: 'You can modify your query and round pi to two digits by specifying a value
    in the `round()` function’s optional second argument, like so:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以修改查询，通过指定`round()`函数可选的第二个参数，将 pi 四舍五入到两位小数，如下所示：
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The result is:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This call to the `pi()` function returns `3.141593`, which is passed to `round()`
    as the function’s first argument. The statement evaluates to `round(3.141593,2)`,
    which returns `3.14`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对`pi()`函数的调用返回`3.141593`，这个值作为函数的第一个参数传递给`round()`。这个语句的计算为`round(3.141593,2)`，返回`3.14`。
- en: Calling Functions from Different Parts of Your Query
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从查询的不同部分调用函数
- en: 'You can call functions in the `select` list of your query and also in the `where`
    clause. For example, take a look at the `movie` table, which contains the following
    data about movies:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在查询的`select`列表中调用函数，也可以在`where`子句中调用。例如，看看`movie`表，它包含以下关于电影的数据：
- en: '[PRE14]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `star_rating` column holds the average number of stars that viewers rated
    the movie on a scale of 1 to 5\. You’ve been asked to write a query to display
    movies that have more than 3 stars and a release date in 2024\. You also need
    to display the movie name in uppercase and round the star rating:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`star_rating`列保存了观众给电影打的平均星级，评分范围是1到5。你被要求写一个查询，显示评分超过3星且发布年份为2024年的电影。你还需要将电影名称转换为大写并四舍五入星级评分：'
- en: '[PRE15]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: First, you use the `upper()` and `round()` functions in the `select` list of
    the query. You wrap the movie name values in the `upper()` function and wrap the
    star rating value in the `round()` function. You then specify that you’re pulling
    data from the `movie` table.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在查询的`select`列表中，你使用`upper()`和`round()`函数。你将电影名称值包裹在`upper()`函数中，并将星级评分值包裹在`round()`函数中。然后你指定从`movie`表中提取数据。
- en: 'In the `where` clause, you call the `year()` function and specify one argument:
    the `release_date` from the `movie` table. The `year()` function returns the year
    of the movie’s release, which you compare (`=`) to `2024` to display only movies
    with a release date in 2024.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在`where`子句中，你调用`year()`函数并指定一个参数：`movie`表中的`release_date`。`year()`函数返回电影的发布年份，你将其与`2024`进行比较（`=`），从而只显示发布年份为2024年的电影。
- en: 'The results are:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE16]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Aggregate Functions
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 聚合函数
- en: 'An *aggregate* function is a type of function that returns a single value based
    on multiple values in the database. Common aggregate functions include `count()`,
    `max()`, `min()`, `sum()`, and `avg()`. In this section, you’ll see how to call
    these functions with the following `continent` table:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*聚合*函数是一种基于数据库中多个值返回单一值的函数类型。常见的聚合函数包括`count()`、`max()`、`min()`、`sum()`和`avg()`。在本节中，你将看到如何使用以下`continent`表来调用这些函数：'
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: count()
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: count()
- en: The `count()` function returns the number of rows returned from a query, and
    can help answer questions about your data like “How many customers do you have?”
    or “How many complaints did you get this year?”
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`count()`函数返回查询结果中的行数，可以帮助回答有关数据的问题，例如“你有多少顾客？”或“你今年收到了多少投诉？”'
- en: 'You can use the `count()` function to determine how many rows are in the `continent`
    table, like so:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`count()`函数来确定`continent`表中有多少行，像这样：
- en: '[PRE18]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: When you call the `count()` function, you use an asterisk (or a wildcard) between
    the parentheses to count all rows. The asterisk selects all rows from a table,
    including all of each row’s column values.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调用`count()`函数时，你在括号中使用星号（或通配符）来计算所有行。星号选择表中的所有行，包括每行的所有列值。
- en: 'The result is:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE19]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Use a `where` clause to select all continents with a population of more than
    1 billion:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`where`子句选择所有人口超过10亿的大陆：
- en: '[PRE20]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The result is:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE21]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The query returns `2` because only two continents, Asia and Africa, have more
    than 1 billion people.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 查询返回`2`，因为只有亚洲和非洲这两个大陆的人口超过了10亿。
- en: max()
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: max()
- en: The `max()` function returns the maximum value in a set of values, and can help
    answer questions like “What was the highest yearly inflation rate?” or “Which
    salesperson sold the most cars this month?”
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`max()`函数返回一组值中的最大值，可以帮助回答诸如“最高的年度通货膨胀率是多少？”或“哪个销售员本月卖出了最多的车？”等问题。'
- en: 'Here you use the `max()` function to find the maximum population for any continent
    in the table:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你使用`max()`函数来查找表中任何大陆的最大人口：
- en: '[PRE22]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The result is:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE23]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: When you call the `max()` function, it returns the number of people who live
    in the most populated continent. The row in the table with the highest population
    for any continent is Asia, with a population of 4,641,054,775.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调用`max()`函数时，它返回人口最多的大陆的居民数。表中人口最多的大陆是亚洲，人口为4,641,054,775。
- en: 'Aggregate functions like `max()` can be particularly useful in subqueries.
    Step away from the `continent` table for a moment, and turn your attention to
    the `train` table:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 像`max()`这样的聚合函数在子查询中尤其有用。暂时离开`continent`表，将注意力转向`train`表：
- en: '[PRE24]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here you’ll use `max()` to help determine which train in the `train` table
    has traveled the most miles:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你将使用`max()`来帮助确定`train`表中行驶里程最多的火车：
- en: '[PRE25]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In the inner query, you select the maximum number of miles that any train in
    your table has traveled. In the outer query, you display all the columns for trains
    that have traveled that number of miles.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部查询中，你选择表中任何火车所行驶的最大里程数。在外部查询中，你显示所有行驶了该里程数的火车的列。
- en: 'The result is:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE26]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: min()
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: min()
- en: The `min()` function returns the minimum value in a set of values, and can help
    answer questions such as “What is the cheapest price for gas in town?” or “Which
    metal has the lowest melting point?”
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`min()`函数返回一组值中的最小值，可以帮助回答诸如“市区汽油的最低价格是多少？”或“哪种金属的熔点最低？”等问题。'
- en: 'Let’s return to the `continent` table. Use the `min()` function to find the
    population of the least populated continent:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到`continent`表。使用`min()`函数来查找人口最少的大陆：
- en: '[PRE27]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'When you call the `min()` function, it returns the minimum population value
    in the table:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调用`min()`函数时，它返回表中的最小人口值：
- en: '[PRE28]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The row in the table with the lowest population is Antarctica, with `0`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 表中人口最少的行是南极洲，人口为`0`。
- en: sum()
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sum()
- en: The `sum()` function calculates the sum of a set of numbers, and helps answer
    questions like “How many bikes are there in China?” or “What were your total sales
    this year?”
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`sum()`函数计算一组数字的总和，并帮助回答诸如“中国有多少辆自行车？”或“你今年的总销售额是多少？”等问题。'
- en: 'Use the `sum()` function to get the total population of all the continents,
    like so:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`sum()`函数来计算所有大陆的总人口，像这样：
- en: '[PRE29]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: When you call the `sum()` function, it returns the sum total of the population
    for every continent.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调用`sum()`函数时，它返回所有大陆人口的总和。
- en: 'The result is:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE30]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: avg()
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: avg()
- en: The `avg()` function returns the average value based on a set of numbers, and
    can help answer questions including “What is the average amount of snow in Wisconsin?”
    or “What is the average salary for a doctor?”
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`avg()`函数根据一组数字返回平均值，能够帮助回答“威斯康星州的平均降雪量是多少？”或者“医生的平均薪水是多少？”等问题。'
- en: 'Use the `avg()` function to find the average population of the continents:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`avg()`函数来找出大洲的平均人口：
- en: '[PRE31]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'When you call the `avg()` function, it returns the average population value
    of the continents in the table:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调用`avg()`函数时，它会返回表中大洲的平均人口值：
- en: '[PRE32]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: MySQL arrives at 1,113,604,661.4286 by totaling the population of every continent
    (7,795,232,630) and dividing that result by the number of continents (7).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL通过将每个大洲的人口总和（7,795,232,630）除以大洲数量（7）得出了1,113,604,661.4286。
- en: 'Now, use the `avg()` function in a subquery to display all continents that
    are less populated than the average continent:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用`avg()`函数在子查询中显示人口少于平均大洲人口的所有大洲：
- en: '[PRE33]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The inner query selects the average population size for all of continents:
    1,113,604,661.4286 people. The outer query selects all columns from the `continent`
    table for continents with populations less than that value.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 内部查询选择所有大洲的平均人口数量：1,113,604,661.4286人。外部查询选择人口少于该值的大洲的所有列。
- en: 'The result is:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE34]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: group by
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: group by
- en: 'A `group by` clause tells MySQL how you want your results grouped, and can
    be used only in queries with aggregate functions. To see how `group by` works,
    take a look at the `sale` table, which stores a company’s sales:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`group by`子句告诉MySQL你希望如何对结果进行分组，并且只能在包含聚合函数的查询中使用。要查看`group by`如何工作，可以查看`sale`表，它存储了公司的销售记录：'
- en: '[PRE35]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: You can use the `sum()` aggregate function to add the sales amounts, but do
    you want to calculate one grand total for all sales, sum the amounts by customer,
    sum the amounts by salesperson, or calculate the totals that each salesperson
    sold to each customer?
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`sum()`聚合函数来添加销售金额，但你是想计算所有销售的总额，按客户汇总金额，按销售员汇总金额，还是计算每个销售员向每个客户销售的总额？
- en: To display amounts summed by customer, you `group by` the `customer_name` column,
    as in [Listing 8-1](#listing8-1).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示按客户汇总的金额，你需要在`customer_name`列上使用`group by`，如[示例 8-1](#listing8-1)所示。
- en: '[PRE36]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Listing 8-1: A query to sum amounts by customer'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 8-1：按客户汇总金额的查询
- en: 'The results are as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE37]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The sum total of the amount spent by customer Bill McKenna is $39.60; for Carlos
    Souza, it’s $28.28; and for Jane Bird, it’s $34.44\. The results are ordered alphabetically
    by the customer’s first name.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 客户Bill McKenna消费的总金额为$39.60；Carlos Souza为$28.28；Jane Bird为$34.44。结果按客户的名字字母顺序排序。
- en: Alternatively, you may want to see sum totals of the amounts by salesperson.
    [Listing 8-2](#listing8-2) shows you how to use `group by` on the `salesperson_name`
    column.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你可能想查看每个销售员的汇总金额。[示例 8-2](#listing8-2)展示了如何在`salesperson_name`列上使用`group
    by`。
- en: '[PRE38]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Listing 8-2: A query to sum amounts by salesperson'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 8-2：按销售员汇总金额的查询
- en: 'Your results are:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你的结果是：
- en: '[PRE39]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The total amount sold by Sally is $58.16, and for Tom it’s $44.16.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Sally的总销售额为$58.16，Tom的为$44.16。
- en: Because `sum()` is an aggregate function, it can operate on any number of rows
    and will return one value. The `group by` statement tells MySQL which rows you
    want `sum()` to operate on, so the syntax `group by salesperson_name` sums up
    the amounts for each salesperson.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`sum()`是一个聚合函数，它可以对任意数量的行进行操作，并返回一个值。`group by`语句告诉MySQL你希望`sum()`作用于哪些行，因此语法`group
    by salesperson_name`会对每个销售员的金额进行求和。
- en: 'Now say that you want to see just one row with a sum of every `amount` in the
    table. In this case, you don’t need to use `group by`, since you aren’t summing
    up by any group. Your query should look like the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你只想查看一行，其中包含表中所有`amount`的总和。在这种情况下，你不需要使用`group by`，因为你并不是按任何分组来求和。你的查询应该如下所示：
- en: '[PRE40]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The result should be:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应为：
- en: '[PRE41]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `group by` clause works with all aggregate functions. For example, you could
    use `group by` with `count()` to return the count of sales for each salesperson,
    as in [Listing 8-3](#listing8-3).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`group by`子句适用于所有聚合函数。例如，你可以将`group by`与`count()`一起使用，返回每个销售员的销售数量，如[示例 8-3](#listing8-3)所示。'
- en: '[PRE42]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Listing 8-3: A query to count rows for each salesperson'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 8-3：按销售员统计行数的查询
- en: 'The result is:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE43]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The query counted three rows in the `sales` table for Sally and two rows for
    Tom.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 查询统计了`sales`表中Sally的三行和Tom的两行。
- en: Or you can use `avg()` to get the average sale amount and group by `salesperson_name`
    to return the average sale amount per salesperson, as shown in [Listing 8-4](#listing8-4).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以使用`avg()`来获取平均销售额，并根据`salesperson_name`进行分组，返回每个销售人员的平均销售额，如[清单 8-4](#listing8-4)所示。
- en: '[PRE44]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Listing 8-4: A query to get the average amount sold by each salesperson'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 8-4：获取每个销售人员平均销售额的查询
- en: 'The result is:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE45]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The results show that the average amount of each sale for Sally was $19.386667,
    and the average amount of each sale for Tom was $22.08.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示，Sally 每笔销售的平均金额为$19.386667，而 Tom 每笔销售的平均金额为$22.08。
- en: When looking at these results, however, it’s not immediately clear which salesperson’s
    average was $19.386667 and which salesperson’s was $22.08\. To clarify that, let’s
    modify the query to display more information in the result set. In [Listing 8-5](#listing8-5),
    you select the salesperson’s name as well.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，查看这些结果时，尚不清楚哪个销售人员的平均值是$19.386667，哪个销售人员的是$22.08。为了澄清这一点，让我们修改查询以显示更多的信息。在[清单
    8-5](#listing8-5)中，你也选择了销售人员的名字。
- en: '[PRE46]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Listing 8-5: A query to display the salesperson’s name and their average amount
    sold'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 8-5：显示销售人员姓名及其平均销售额的查询
- en: 'The results of your modified query are:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的查询结果是：
- en: '[PRE47]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Your averages appear with the same values, but now the salesperson’s name appears
    next to them. Adding this extra information makes your results much easier to
    understand.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你的平均值显示了相同的数值，但现在销售人员的名字也显示在其旁边。添加这些额外的信息使得结果更加易于理解。
- en: After you’ve written several queries that use aggregate functions and `group
    by`, you might notice that you usually group by the same columns that you selected
    in the query. For example, in [Listing 8-5](#listing8-5), you selected the `salesperson_name`
    column and also grouped by the `salesperson_name` column.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在你编写了多个使用聚合函数和`group by`的查询后，你可能会注意到，你通常会对查询中选择的相同列进行分组。例如，在[清单 8-5](#listing8-5)中，你选择了`salesperson_name`列，并且也根据`salesperson_name`列进行了分组。
- en: To help you determine which column(s) to group by, look at the *select list*,
    or the part of the query between the words `select` and `from`. The select list
    contains the items you want to select from the database table; you almost always
    want to group by this same list. The only part of the select list that shouldn’t
    be part of the `group by` statement are the aggregate functions called.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助你确定应分组的列，查看*选择列表*，即查询中`select`和`from`之间的部分。选择列表包含你希望从数据库表中选择的项；你几乎总是希望按这个相同的列表进行分组。选择列表中唯一不应该出现在`group
    by`语句中的部分是调用的聚合函数。
- en: 'For example, take a look at this `theme_park` table, which contains data from
    six different theme parks, including their country, state, and the city where
    they are located:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，看看这个 `theme_park` 表，它包含了六个不同主题公园的数据，包括它们的国家、州以及所在城市：
- en: '[PRE48]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Say you want to select the country, state, and the number of parks for those
    countries and states. You might start to write your SQL statement like this:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想选择国家、州以及这些国家和州的公园数量。你可能会开始像这样编写 SQL 语句：
- en: '[PRE49]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: This query is incomplete, however, and running it will return an error message
    or incorrect results, depending on your configuration settings.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个查询是不完整的，运行它会返回错误信息或错误的结果，具体取决于你的配置设置。
- en: 'You should group by everything you’ve selected *that is not an aggregate function*.
    In this query, the columns you’ve selected, `country` and `state`, are not aggregate
    functions, so you will use `group by` with them:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该对所有选中的*非聚合函数*列进行分组。在这个查询中，你选择的列`country`和`state`不是聚合函数，所以你将使用`group by`来对它们进行分组：
- en: '[PRE50]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The results are as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE51]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: As you can see, the query now returns the correct results.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，查询现在返回了正确的结果。
- en: String Functions
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串函数
- en: MySQL provides several functions to help you work with character strings and
    perform tasks such as comparing, formatting, and combining strings. Let’s take
    a look at the most useful string functions.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 提供了多个函数来帮助你处理字符字符串，执行诸如比较、格式化和组合字符串等任务。让我们来看看一些最有用的字符串函数。
- en: concat()
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: concat()
- en: 'The `concat()` function *concatenates*, or joins, two or more strings together.
    For example, say you have the following `phone_book` table:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`concat()` 函数*连接*两个或更多字符串。例如，假设你有以下的 `phone_book` 表：'
- en: '[PRE52]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'You can write a query to display first and last names together, separated by
    a space character:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以编写一个查询，将名字和姓氏一起显示，并用空格字符分隔：
- en: '[PRE53]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The results should be as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应如下所示：
- en: '[PRE54]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The names appear as one string, separated by a space.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 名字作为一个字符串显示，以空格分隔。
- en: format()
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: format()
- en: 'The `format()` function formats a number by adding commas and showing the requested
    number of decimal points. For example, let’s revisit the `continent` table and
    select the population of Asia as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`format()` 函数通过添加逗号和显示所请求的小数位数来格式化数字。例如，我们重新访问 `continent` 表并选择亚洲人口，如下所示：'
- en: '[PRE55]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The result is:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE56]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'It’s difficult to tell whether the population of Asia is about 4.6 billion
    or 464,000,000\. To make the results more readable, you can format the `population`
    column with commas using the `format()` function like so:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 很难判断亚洲人口是约46亿人还是4.64亿人。为了使结果更易读，你可以使用 `format()` 函数为 `population` 列添加逗号格式，如下所示：
- en: '[PRE57]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The `format()` function takes two arguments: a number to format and the number
    of positions to show after the decimal point. You called `format()` with two arguments:
    the `population` column and the number `0`.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`format()` 函数接受两个参数：一个数字来格式化和显示小数点后位数的数量。你使用了两个参数调用 `format()`：`population`
    列和数字 `0`。'
- en: 'Now that the `population` column has been formatted with commas, it’s clear
    in the result that Asia has around 4.6 billion people:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 `population` 列已经用逗号格式化，结果中清楚地显示亚洲大约有46亿人口：
- en: '[PRE58]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Now call the `format()` function to format the number 1234567.89 with five
    digits after the decimal point:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在调用 `format()` 函数将数字 1234567.89 格式化为小数点后五位：
- en: '[PRE59]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The result is:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE60]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The `format()` function accepts `1234567.89` as the number to be formatted in
    the first argument, adds commas, and add trailing zeros so that the result is
    displayed with five decimal positions.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`format()` 函数接受 `1234567.89` 作为第一个参数中的数字进行格式化，添加逗号，并且添加尾随零，使得结果显示五位小数。'
- en: left()
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: left()
- en: 'The `left()` function returns some number of characters from the left side
    of a value. Consider the following `taxpayer` table:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`left()` 函数从值的左侧返回若干字符。考虑以下 `taxpayer` 表：'
- en: '[PRE61]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'To select last names from the `taxpayer` table, and also select the first three
    characters of the `last_name` column, you can write the following:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 `taxpayer` 表中选择姓氏，并且还要选择 `last_name` 列的前三个字符，你可以写如下查询：
- en: '[PRE62]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The result is:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE63]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The `left()` function is helpful in cases when you want to disregard the characters
    on the right.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`left()` 函数在你想忽略右侧字符的情况下非常有用。'
- en: right()
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: right()
- en: 'The `right()` function returns some number of characters from the right side
    of a value. Continue using the `taxpayer` table to select the last four digits
    of the taxpayers’ Social Security numbers:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`right()` 函数从值的右侧返回若干字符。继续使用 `taxpayer` 表选择税务员社会安全号码的最后四位数字：'
- en: '[PRE64]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The result is:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE65]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The `right()` function selects the rightmost characters without the characters
    on the left.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`right()` 函数选择最右边的字符，忽略左边的字符。'
- en: lower()
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: lower()
- en: 'The `lower()` function returns the lowercase version of a string. Select the
    taxpayers’ last names in lowercase:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`lower()` 函数返回字符串的小写版本。选择税务员的姓氏并将其转换为小写：'
- en: '[PRE66]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The result is:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE67]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: upper()
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: upper()
- en: 'The `upper()` function returns the uppercase version of a string. Select the
    taxpayers’ last names in uppercase:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`upper()` 函数返回字符串的大写版本。选择税务员的姓氏并将其转换为大写：'
- en: '[PRE68]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The result is:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE69]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: substring()
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: substring()
- en: 'The `substring()` function returns part of a string and takes three arguments:
    a string, the starting character position of the substring you want, and the ending
    character position of the substring you want.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`substring()` 函数返回字符串的一部分，接受三个参数：一个字符串、你想要的子字符串的起始字符位置和结束字符位置。'
- en: 'You can extract the substring `gum` from the string `gumbo` by using this query:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下查询从字符串 `gumbo` 中提取子字符串 `gum`：
- en: '[PRE70]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The result is:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE71]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: In `gumbo`, `g` is the first character, `u` is the second character, and `m`
    is the third. Selecting a substring starting at character 1 and going to character
    3 returns those first three characters.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `gumbo` 中，`g` 是第一个字符，`u` 是第二个字符，`m` 是第三个字符。从第1个字符开始，选择到第3个字符，会返回这前三个字符。
- en: 'The second argument to the `substring()` function can accept a negative number.
    If you pass a negative number to it, the beginning position of your substring
    will be calculated by counting backward from the end of the string. For example:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`substring()` 函数的第二个参数可以接受负数。如果你传递负数，它会从字符串的末尾向回计数来确定子字符串的起始位置。例如：'
- en: '[PRE72]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The result is:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE73]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: The string `gumbo` has five characters. You asked `substring()` to start your
    substring at the end of the string minus three character positions, which is position
    3\. Your third argument was 2, so your substring will start at the third character
    3 and go for two characters, yielding the `mb` substring.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串`gumbo`包含五个字符。你要求`substring()`从字符串末尾减去三个字符位置开始子字符串，即位置3。你的第三个参数是2，因此子字符串会从第三个字符开始，并取两个字符，得到`mb`子字符串。
- en: 'The third argument to the `substring()` function is optional. You can provide
    just the first two arguments—a string and the starting character position—to return
    the set of characters between the starting position until the end of the string:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`substring()`函数的第三个参数是可选的。你只需提供前两个参数——一个字符串和起始字符位置——即可返回从起始位置到字符串末尾的字符集：'
- en: '[PRE74]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'The result is:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE75]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: The `substring()` function returned all the characters starting at the third
    character of the string `MySQL`, going all the way to the end of the string, resulting
    in `SQL`.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`substring()`函数返回了从字符串`MySQL`的第三个字符开始，直到字符串末尾的所有字符，结果是`SQL`。'
- en: 'MySQL provides an alternate syntax for `substring()` that uses the `from` and
    `for` keywords. For example, to select the first three characters of the word
    `gumbo`, use the following syntax:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL提供了一种替代语法用于`substring()`，使用`from`和`for`关键字。例如，要选择单词`gumbo`的前三个字符，可以使用以下语法：
- en: '[PRE76]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'This substring starts at the first character and continues for three characters.
    The result is as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这个子字符串从第一个字符开始，持续三个字符。结果如下：
- en: '[PRE77]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: This result is the same as the first substring example you saw, but you might
    find this syntax easier to read.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结果与第一个子字符串示例相同，但你可能会觉得这种语法更容易阅读。
- en: trim()
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`trim()`'
- en: The `trim()` function strips any number of leading or trailing characters from
    a string. You can specify the characters you want removed, as well as whether
    you want the leading characters removed, the trailing characters removed, or both.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`trim()`函数会去除字符串中的任意数量的前导或尾随字符。你可以指定要移除的字符，以及是否要移除前导字符、尾随字符或两者。'
- en: 'For example, if you have the string `**instructions**`, you could use `trim()`
    to return the string with the asterisks removed like so:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你有字符串`**instructions**`，你可以使用`trim()`来返回去掉星号后的字符串，像这样：
- en: '[PRE78]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: In `column1`, you trim the `leading` asterisks. In `column2`, you trim the `trailing`
    asterisks. In `column3`, you trim `both` the leading and trailing asterisks. When
    you don’t specify `leading`, `trailing`, or `both`, as in `column4`, MySQL defaults
    to trimming both.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在`column1`中，你去除前导的星号。在`column2`中，你去除尾随的星号。在`column3`中，你去除前导和尾随的星号。当你没有指定`leading`、`trailing`或`both`时，如在`column4`中，MySQL默认为去除两端的空格。
- en: 'The results are as follows:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE79]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'By default, `trim()` removes space characters. This means that if you have
    space characters around a string, you can use `trim()` without having to specify
    the character you want to strip:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`trim()`会移除空格字符。这意味着，如果字符串两侧有空格字符，你可以直接使用`trim()`，无需指定要移除的字符：
- en: '[PRE80]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The result is the string `asteroid` with no spaces on either side:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是字符串`asteroid`，两侧都没有空格：
- en: '[PRE81]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: The `trim()` function removes spaces from both sides of a string by default.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`trim()`函数默认会移除字符串两侧的空格。'
- en: ltrim()
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`ltrim()`'
- en: 'The `ltrim()` function removes leading spaces from the left side of a string:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`ltrim()`函数用于移除字符串左侧的前导空格：'
- en: '[PRE82]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'The result is the string `asteroid` with no spaces on the left side of it:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是字符串`asteroid`，左侧没有空格：
- en: '[PRE83]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: The spaces to the right are unaffected.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧的空格不会受到影响。
- en: rtrim()
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`rtrim()`'
- en: 'The `rtrim()` function removes trailing spaces from the right side of a string:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`rtrim()`函数用于移除字符串右侧的尾随空格：'
- en: '[PRE84]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The result is the string `asteroid` with no spaces on the right side of it:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是字符串`asteroid`，右侧没有空格：
- en: '[PRE85]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: The spaces to the left are unaffected.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧的空格不会受到影响。
- en: Date and Time Functions
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日期和时间函数
- en: MySQL provides date-related functions that help you perform tasks like getting
    the current date and time, selecting a part of the date, and calculating how many
    days there are between two dates.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL提供了与日期相关的函数，帮助你执行获取当前日期和时间、选择日期的某一部分以及计算两个日期之间相差多少天等任务。
- en: As you saw in [Chapter 4](c04.xhtml), MySQL provides the `date`, `time`, and
    `datetime` data types, where `date` contains a month, day, and year; `time` contains
    hours, minutes, and seconds; and `datetime` has all of those parts because it
    comprises both a date and a time. These are the formats MySQL uses to return many
    of the results of the functions you’ll see here.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在[第4章](c04.xhtml)中所见，MySQL 提供了 `date`、`time` 和 `datetime` 数据类型，其中 `date` 包含月、日和年；`time`
    包含小时、分钟和秒；`datetime` 则包含这些所有部分，因为它既包括日期又包括时间。这些是 MySQL 用于返回许多函数结果的格式。
- en: curdate()
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: curdate()
- en: 'The `curdate()` function returns the current date in the `date` format:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`curdate()` 函数以 `date` 格式返回当前日期：'
- en: '[PRE86]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Your result should look similar to the following:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 您的结果应类似于以下内容：
- en: '[PRE87]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Both `current_date()` and `current_date` are synonyms for `curdate()` and will
    produce identical results.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`current_date()` 和 `current_date` 都是 `curdate()` 的同义词，并会产生相同的结果。'
- en: curtime()
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: curtime()
- en: 'The `curtime()` function returns the current time in the `time` format:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`curtime()` 函数返回当前时间，格式为 `time`：'
- en: '[PRE88]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Your result should look similar to the following:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 您的结果应类似于以下内容：
- en: '[PRE89]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: For me, the current time is 9:02 AM and 41 seconds. Both `current_time()` and
    `current_time` are synonyms for `curtime()` and will produce identical results.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，当前时间是上午 9:02 和 41 秒。`current_time()` 和 `current_time` 都是 `curtime()` 的同义词，并会产生相同的结果。
- en: now()
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: now()
- en: 'The `now()` function returns the current date and time in a `datetime` format:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`now()` 函数以 `datetime` 格式返回当前的日期和时间：'
- en: '[PRE90]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Your results should look similar to the following:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 您的结果应类似于以下内容：
- en: '[PRE91]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Both `current_timestamp()` and `current_timestamp` are synonyms for `now()`
    and will produce identical results.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`current_timestamp()` 和 `current_timestamp` 都是 `now()` 的同义词，并会产生相同的结果。'
- en: date_add()
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: date_add()
- en: 'The `date_add()` function adds some amount of time to a `date` value. To add
    (or subtract) from date values, you use an *interval*, a value that you can use
    to perform calculations on dates and times. With an interval, you can supply a
    number and a unit of time, like `5 day`, `4 hour`, or `2 week`. Consider the following
    table called `event`:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`date_add()` 函数将一定量的时间加到 `date` 值上。要对日期值进行加（或减）操作，需要使用 *间隔*，这是一种可以用于执行日期和时间计算的值。使用间隔时，您可以提供一个数字和一个时间单位，例如
    `5 day`、`4 hour` 或 `2 week`。请看以下名为 `event` 的表：'
- en: '[PRE92]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'To select the `eclipse_datetime` date from the `event` table and add 5 days,
    4 hours, and 2 weeks to the date, you use `date_add()` with `interval` as follows:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 `event` 表中选择 `eclipse_datetime` 日期并加上5天、4小时和2周，您可以使用带有 `interval` 的 `date_add()`，如下所示：
- en: '[PRE93]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Your results should look similar to this:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 您的结果应类似于此：
- en: '[PRE94]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: The results show that the intervals of 5 days, 4 hours, and 2 weeks were added
    to the eclipse date and time and have been listed in the columns you specified.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示，5天、4小时和2周的时间间隔已加到日全食的日期和时间，并列出了您指定的列。
- en: date_sub()
  id: totrans-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: date_sub()
- en: 'The `date_sub()` function subtracts a time interval from a `date` value. For
    example, here you subtract the same time intervals in the previous example from
    the `eclipse_datetime` column of the `event` table:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`date_sub()` 函数从 `date` 值中减去一个时间间隔。例如，在这里，您从 `event` 表的 `eclipse_datetime`
    列中减去与前面示例相同的时间间隔：'
- en: '[PRE95]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'The results are:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE96]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: The results show that the intervals of 5 days, 4 hours, and 2 weeks were subtracted
    from the eclipse date and time and have been listed in the columns you specified.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示，5天、4小时和2周的时间间隔已从日全食的日期和时间中减去，并列出了您指定的列。
- en: extract()
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: extract()
- en: The `extract()` function pulls out specified parts of a `date` or a `datetime`
    value. It uses the same units of time as `date_add()` and `date_sub()`, like `day`,
    `hour`, and `week`.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`extract()` 函数提取指定的 `date` 或 `datetime` 值的部分。它使用与 `date_add()` 和 `date_sub()`
    相同的时间单位，如 `day`、`hour` 和 `week`。'
- en: 'In this example, you select some parts of your `eclipse_datetime` column:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，您选择了 `eclipse_datetime` 列的部分内容：
- en: '[PRE97]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'The `extract()` function takes the `eclipse_datetime` value from the `event`
    table and displays the individual parts requested by the column names you specify.
    The results are as follows:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`extract()` 函数从 `event` 表中的 `eclipse_datetime` 值中提取并显示您指定列名所请求的各个部分。结果如下：'
- en: '[PRE98]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'MySQL provides other functions you can use for the same purpose as `extract()`,
    including `year()`, `month()`, `day()`, `week()`, `hour()`, `minute()`, and `second()`.
    This query achieves the same result as the preceding one:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 还提供了其他函数，您可以用来与 `extract()` 达到相同的目的，包括 `year()`、`month()`、`day()`、`week()`、`hour()`、`minute()`
    和 `second()`。该查询与前一个查询产生相同的结果：
- en: '[PRE99]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'You can also use the `date()` and `time()` functions to select just the `date`
    or `time` portion of a `datetime` value:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 `date()` 和 `time()` 函数，只选择 `datetime` 值中的 `date` 或 `time` 部分：
- en: '[PRE100]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'The results are:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE101]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: As you can see, the `date()` and `time()` functions provide a quick way to extract
    just the date or the time from a `datetime` value.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`date()` 和 `time()` 函数提供了一种快速方式，从 `datetime` 值中提取出日期或时间。
- en: datediff()
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: datediff()
- en: 'The `datediff()` function returns the number of days between two dates. Say
    you want to check how many days there are between New Year’s Day and Cinco de
    Mayo in 2024:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`datediff()` 函数返回两个日期之间的天数。假设你想检查 2024 年新年和 Cinco de Mayo 之间有多少天：'
- en: '[PRE102]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'The result is 125 days:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是 125 天：
- en: '[PRE103]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: If the date argument on the left is more recent than the date argument on the
    right, `datediff()` will return a positive number. If the date on the right is
    more recent, `datediff()` will return a negative number. If the two dates are
    the same, `0` will be returned.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 如果左边的日期参数比右边的日期参数更新，`datediff()` 会返回一个正数。如果右边的日期更晚，`datediff()` 会返回一个负数。如果两个日期相同，返回
    `0`。
- en: date_format()
  id: totrans-310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: date_format()
- en: The `date_format()` function formats a date according to a format string that
    you specify. The format string is made up of characters that you add and *specifiers*
    that start with a percent sign. The most common specifiers are listed in [Table
    8-1](#table8-1).
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`date_format()` 函数根据你指定的格式字符串格式化日期。格式字符串由你添加的字符和以百分号开头的*格式符*组成。最常见的格式符列在[表
    8-1](#table8-1)中。'
- en: 'Table 8-1: Common Specifiers'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 表 8-1：常见的格式化符号
- en: '| **Specifier** | **Description** |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| **格式符** | **描述** |'
- en: '| --- | --- |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `%a` | Abbreviated weekday name (`Sun`–`Sat`) |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| `%a` | 缩写的星期名称（`Sun`–`Sat`） |'
- en: '| `%b` | Abbreviated month name (`Jan`–`Dec`) |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| `%b` | 缩写的月份名称（`Jan`–`Dec`） |'
- en: '| `%c` | Month, numeric (`1`–`12`) |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| `%c` | 数字表示的月份（`1`–`12`） |'
- en: '| `%D` | Day of the month with suffix (`1st`, `2nd`, `3rd`, . . .) |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| `%D` | 带后缀的日期（`1st`，`2nd`，`3rd`，...） |'
- en: '| `%d` | Day of the month, two digits with a leading zero where applicable
    (`01`–`31`) |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| `%d` | 日期（两位数字，适用时带前导零，范围为`01`–`31`） |'
- en: '| `%e` | Day of the month (`1`–`31`) |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| `%e` | 日期（`1`–`31`） |'
- en: '| `%H` | Hour with leading zero where applicable (`00`–`23`) |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| `%H` | 小时，适用时带前导零（`00`–`23`） |'
- en: '| `%h` | Hour (`01`–`12`) |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| `%h` | 小时（`01`–`12`） |'
- en: '| `%i` | Minutes (`00`–`59`) |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| `%i` | 分钟（`00`–`59`） |'
- en: '| `%k` | Hour (`0`–`23`) |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| `%k` | 小时（`0`–`23`） |'
- en: '| `%l` | Hour (`1`–`12`) |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| `%l` | 小时（`1`–`12`） |'
- en: '| `%M` | Month name (`January`–`December`) |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| `%M` | 月份名称（`January`–`December`） |'
- en: '| `%m` | Month (`00`–`12`) |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| `%m` | 月份（`00`–`12`） |'
- en: '| `%p` | `AM` or `PM` |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| `%p` | `AM` 或 `PM` |'
- en: '| `%r` | Time, 12-hour (`hh:mm:ss` followed by `AM` or `PM`) |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| `%r` | 时间，12小时制（`hh:mm:ss` 后跟 `AM` 或 `PM`） |'
- en: '| `%s` | Seconds (`00`–`59`) |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| `%s` | 秒（`00`–`59`） |'
- en: '| `%T` | Time, 24-hour (`hh:mm:ss`) |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| `%T` | 时间，24小时制（`hh:mm:ss`） |'
- en: '| `%W` | Weekday name (`Sunday`–`Saturday`) |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| `%W` | 星期几的名称（`Sunday`–`Saturday`） |'
- en: '| `%w` | Day of the week (`0` = Sunday – `6` = Saturday) |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| `%w` | 星期几（`0` = 星期天，`6` = 星期六） |'
- en: '| `%Y` | Year, four digits |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| `%Y` | 四位数字年份 |'
- en: '| `%y` | Year, two digits |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| `%y` | 两位数字的年份 |'
- en: 'The datetime `2024-02-02 01:02:03` represents February 2, 2024, at 1:02 AM
    and 3 seconds. Try experimenting with some different formats for that `datetime`:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`2024-02-02 01:02:03` 代表 2024 年 2 月 2 日凌晨 1:02:03。试试为该 `datetime` 使用不同的格式：'
- en: '[PRE104]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'The result is:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE105]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: The column you aliased as `format6` shows how the format specifiers can be combined.
    In that format string, you added a comma and the word `at` in addition to four
    specifiers for the date and time.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 你将列别名为 `format6` 显示了如何将格式化符号组合在一起。在该格式字符串中，除了为日期和时间添加四个格式符号外，你还添加了一个逗号和单词 `at`。
- en: str_to_date()
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: str_to_date()
- en: 'The `str_to_date()` function converts a string value to a date based on the
    format you provide. You use the same specifiers that you used for `date_format()`,
    but the two functions take opposite actions: `date_format()` converts a date to
    a string, while `str_to_date()` converts a string to a date.'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`str_to_date()` 函数根据你提供的格式将字符串值转换为日期。你使用的格式符与 `date_format()` 中的相同，但这两个函数的作用正好相反：`date_format()`
    将日期转换为字符串，而 `str_to_date()` 将字符串转换为日期。'
- en: 'Depending upon the format you provide, `str_to_date()` can convert a string
    to a `date`, a `time`, or a `datetime`:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你提供的格式，`str_to_date()` 可以将字符串转换为 `date`、`time` 或 `datetime`：
- en: '[PRE106]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'The result is:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE107]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: The last column, `time_format`, can also be converted with the function of the
    same name. We’ll look at it next.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一列 `time_format` 也可以通过同名函数进行转换。接下来我们将讨论这个。
- en: time_format()
  id: totrans-348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: time_format()
- en: 'As its name implies, the `time_format()` function formats time. You can use
    the same specifiers as `date_format()` for `time_format()`. For example, here’s
    how to get the current time and format it in some different ways:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，`time_format()`函数用于格式化时间。你可以像`date_format()`那样使用相同的格式说明符来格式化`time_format()`。例如，以下是获取当前时间并以不同方式格式化的示例：
- en: '[PRE108]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Expressed in military time, the current time for me is `21:09:55`, which is
    9:09 PM and 55 seconds. Your results should look similar to the following:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 按军用时间格式表示，我现在的时间是`21:09:55`，即晚上9:09分55秒。你的结果应如下所示：
- en: '[PRE109]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: The column you aliased as `format2` shows the hour with a leading `0` because
    you used the `%H` specifier, but the `format3` column does not because you used
    the `%h` specifier. In columns 1–3, you added colon characters to the format string.
    In `format4` you added the word `hours`, a comma, the word `minutes`, the word
    `and`, and the word `seconds`.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 你将别名为`format2`的列显示了带有前导`0`的小时，因为你使用了`%H`格式说明符，而`format3`列则没有，因为你使用了`%h`格式说明符。在列1–3中，你向格式字符串中添加了冒号字符。在`format4`中，你添加了单词`hours`，逗号，单词`minutes`，单词`and`，以及单词`seconds`。
- en: Mathematical Operators and Functions
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数学运算符和函数
- en: MySQL provides many functions to perform calculations. There are also arithmetic
    operators available, like `+` for addition, `-` for subtraction, `*` for multiplication,
    `/` and `div` for division, and `%` and `mod` for modulo. You’ll start reviewing
    some queries that use these operators, and then you’ll use parentheses to control
    the order of operations. Afterward, you’ll use mathematical functions to perform
    various tasks, including raising a number to a power, calculating standard deviation,
    and rounding and truncating numbers.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL提供了许多函数来进行计算。也提供了一些算术运算符，如`+`表示加法，`-`表示减法，`*`表示乘法，`/`和`div`表示除法，`%`和`mod`表示模运算。你将开始查看一些使用这些运算符的查询，然后使用括号来控制运算顺序。之后，你将使用数学函数来执行各种任务，包括求一个数的幂、计算标准差以及对数字进行四舍五入和截断。
- en: Mathematical Operators
  id: totrans-356
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数学运算符
- en: 'You’ll start by performing some mathematical calculations using the data from
    the `payroll` table:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 你将首先使用`payroll`表中的数据进行一些数学计算：
- en: '[PRE110]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Try out some of the arithmetic operators as follows:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试以下的一些算术运算符：
- en: '[PRE111]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: In this example, you use mathematical operators to get the employee’s salary
    minus their deductions, add their bonus to their salary, multiply their salary
    by their tax rate, and see their monthly salary by dividing their annual salary
    by 12, respectively.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你使用数学运算符计算员工的工资减去扣款，再加上奖金，乘以税率，最后通过将年薪除以12来计算月薪。
- en: 'The result is as follows:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE112]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Notice that in the two columns on the right, `salary / 12` and `salary div 12`,
    you received different results when using the `/` and the `div` operators. This
    is because `div` discards any fractional amount and `/` does not.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在右侧的两列中，`salary / 12`和`salary div 12`使用`/`和`div`运算符时，得到的结果不同。这是因为`div`会舍弃任何小数部分，而`/`则不会。
- en: Modulo
  id: totrans-365
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 模运算
- en: 'MySQL provides two operators for modulo: the percent sign (`%`) and the `mod`
    operator. *Modulo* takes one number, divides it by another, and returns the remainder.
    Consider a table called `roulette_winning_number`:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL提供了两个模运算符：百分号（`%`）和`mod`运算符。*模运算*接受一个数字，将其除以另一个数字，并返回余数。考虑一个名为`roulette_winning_number`的表：
- en: '[PRE113]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'You can use modulo to determine if a number is odd or even by dividing it by
    2 and checking the remainder, like so:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用模运算来判断一个数字是奇数还是偶数，通过将其除以2并检查余数，如下所示：
- en: '[PRE114]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'Anything with a remainder of 1 is an odd number. The results are as follows:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 任何余数为1的数字都是奇数。结果如下：
- en: '[PRE115]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: The results show `1` for odd numbers and `0` for even numbers. In the first
    row, `21 % 2` evaluates to `1` because 21 divided by 2 is 10 with a remainder
    of 1.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示奇数的余数是`1`，偶数的余数是`0`。在第一行，`21 % 2`的结果是`1`，因为21除以2得到商10，余数为1。
- en: 'Using `mod` or `%` produces the same results. Modulo is also available as the
    `mod()` function. All of these queries return the same results:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`mod`或`%`运算符会得到相同的结果。模运算也可以通过`mod()`函数来实现。这些查询都会返回相同的结果：
- en: '[PRE116]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Operator Precedence
  id: totrans-375
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运算符优先级
- en: 'When there is more than one arithmetic operator used in a mathematical expression,
    `*`, `/`, `div`, `%`, and `mod` are evaluated first; `+` and `-` are evaluated
    last. This is called *operator precedence*. The following query (which uses the
    `payroll` table) was written to calculate the taxes employees will pay based on
    their salary, bonus, and tax rate, but the query is returning the wrong tax amount:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 当数学表达式中使用多个算术运算符时，`*`、`/`、`div`、`%`和`mod`会先被计算，`+`和`-`会最后计算。这被称为*运算符优先级*。以下查询（使用`payroll`表）是为了计算员工根据薪水、奖金和税率应支付的税款，但该查询返回了错误的税额：
- en: '[PRE117]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'The results are:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE118]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: The column on the right should represent the amount of taxes the employees have
    to pay, but it seems to be too high. If Max Bain’s salary is $80,000 and his bonus
    is $10,000, it doesn’t seem reasonable that he would be required to pay $82,400
    in taxes.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧的列应表示员工需要支付的税款，但似乎太高了。如果Max Bain的薪水是80,000美元，奖金是10,000美元，那么要求他支付82,400美元的税款似乎不合理。
- en: The query is returning the wrong value because you expected MySQL to add `salary`
    and `bonus` first, and then multiply the result by the `tax_rate`. Instead, MySQL
    multiplied `bonus` by `tax_rate` first and then added the `salary`. The multiplication
    happened first because multiplication has a higher operator precedence than addition.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 查询返回了错误的值，因为你期望MySQL首先将`salary`和`bonus`相加，然后将结果乘以`tax_rate`。然而，MySQL先将`bonus`乘以`tax_rate`，然后再加上`salary`。这是因为乘法的优先级高于加法。
- en: 'To correct the problem, use parentheses to tell MySQL to consider `salary +`
    `bonus` as a group:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 为了修正这个问题，使用括号来告诉MySQL将`salary +` `bonus`作为一个整体处理：
- en: '[PRE119]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'The results are:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE120]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Now the query returns $21,600 for Max Bain, which is the correct value. You
    should use parentheses frequently when performing calculations—not only because
    it gives you control over the order of operations, but also because it makes your
    SQL easier to read and understand.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，查询返回了Max Bain的21,600美元，这就是正确的值。你在进行计算时应该经常使用括号——不仅因为它能帮助你控制运算顺序，还因为它让你的SQL更加易读和易懂。
- en: Mathematical Functions
  id: totrans-387
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数学函数
- en: MySQL provides many mathematical functions that can help with tasks like rounding
    numbers, getting the absolute value of a number, and dealing with exponents, as
    well as finding cosines, logarithms, and radians.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL提供了许多数学函数，可以帮助处理诸如四舍五入、获取数字的绝对值、处理指数等任务，以及计算余弦、对数和弧度。
- en: abs()
  id: totrans-389
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: abs()
- en: The `abs()` function gets the absolute value of a number. The absolute value
    of a number is always positive. For example, the absolute value of 5 is 5, and
    the absolute value of –5 is 5.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`abs()`函数获取一个数字的绝对值。一个数字的绝对值总是正数。例如，5的绝对值是5，–5的绝对值是5。'
- en: 'Say you had a contest to guess the number of jelly beans in a jar. Write a
    query to see whose guess was closest to the actual number, 300:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你举办了一个比赛，猜测罐子里有多少颗果冻豆。写一个查询，看看谁的猜测最接近实际数字300：
- en: '[PRE121]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Here you’ve selected the guesser’s name and their guess from the `jelly_bean`
    table. You select `300` and alias the column as `actual` so it will appear in
    your results with that heading. Then you subtract the guess from 300 and alias
    that column as `difference`. The results are:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你从`jelly_bean`表中选择了猜测者的姓名和他们的猜测值。你选择了`300`并将该列别名为`actual`，这样它将在结果中显示该标题。然后你从300中减去猜测值，并将该列别名为`difference`。结果是：
- en: '[PRE122]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: The `difference` column shows how far off the guesses were from the actual value
    of 300, but the results are a bit hard to interpret. When the guess was higher
    than the actual amount of 300, your `difference` column appears as a negative
    number. When the guess was lower than the actual amount, your `difference` column
    appears as a positive number. For your contest, you don’t care whether the guess
    was higher or lower than 300, you only care about which guess was closest to 300.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`difference`列显示了猜测与实际值300之间的偏差，但结果有点难以理解。当猜测高于实际值300时，`difference`列显示为负数；当猜测低于实际值时，`difference`列显示为正数。对于你的比赛，你不关心猜测是高于还是低于300，你只关心哪个猜测最接近300。'
- en: 'You can use the `abs()` function to remove the negative numbers from the difference
    column:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`abs()`函数从`difference`列中移除负数：
- en: '[PRE123]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'The results are:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE124]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: Now you can easily see that Ike won your contest because his value in the `difference`
    column is the smallest.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以轻松地看到，Ike 赢得了你的比赛，因为他在`difference`列中的值是最小的。
- en: ceiling()
  id: totrans-401
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ceiling()
- en: 'The `ceiling()` function returns the smallest whole number that is greater
    than or equal to the argument. If you pay $3.29 for gas, and you want to round
    that number up to the next whole dollar amount, you’d write the following query:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '`ceiling()`函数返回大于或等于参数的最小整数。如果你支付了$3.29的油费，并想将该数字四舍五入到下一个整数，你可以写下以下查询：'
- en: '[PRE125]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'The result is:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE126]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: The `ceiling()` function has a synonym, `ceil()`, that produces identical results.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '`ceiling()`函数有一个同义词`ceil()`，它返回相同的结果。'
- en: floor()
  id: totrans-407
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: floor()
- en: 'The `floor()` function returns the largest whole number that is less than or
    equal to the argument. To round $3.29 down to the next lowest whole dollar amount,
    you’d write the following query:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '`floor()`函数返回小于或等于参数的最大整数。要将$3.29四舍五入到最接近的整数，你可以写下以下查询：'
- en: '[PRE127]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'The result is:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE128]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: If the argument is already a whole number, then that number will be returned
    in both the `ceiling()` and `floor()` functions. For example, `ceiling(33)` and
    `floor(33)` both return `33`.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 如果参数已经是整数，那么`ceiling()`和`floor()`函数都会返回该整数。例如，`ceiling(33)`和`floor(33)`都会返回`33`。
- en: pi()
  id: totrans-413
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: pi()
- en: The `pi()` function returns the value of pi, as seen at the beginning of this
    chapter.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '`pi()`函数返回pi的值，如本章开头所示。'
- en: degrees()
  id: totrans-415
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: degrees()
- en: 'The `degrees()` function converts radians to degrees. You can convert pi to
    degrees using this query:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '`degrees()`函数将弧度转换为角度。你可以通过这个查询将pi转换为角度：'
- en: '[PRE129]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'The result is:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE130]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: You got your answer by wrapping the `pi()` function in the `degrees()` function.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过将`pi()`函数包装在`degrees()`函数中得到了答案。
- en: radians()
  id: totrans-421
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: radians()
- en: 'The `radians()` function converts degrees to radians. You can convert 180 to
    radians using this query:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '`radians()`函数将角度转换为弧度。你可以使用以下查询将180转换为弧度：'
- en: '[PRE131]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'Your results are:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 你的结果是：
- en: '[PRE132]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: The function was sent an argument of `180` and returned a value of pi.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接收到参数`180`并返回了pi的值。
- en: exp()
  id: totrans-427
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: exp()
- en: 'The `exp()` function returns the natural logarithm base number *e* raised to
    the power of the number you provide as an argument (2, in this example):'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '`exp()`函数返回自然对数底数*e*（2.718281828459）被你提供的数字（例如2）作为指数时的结果：'
- en: '[PRE133]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'The result is:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE134]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: The function returned `7.38905609893065`, which is *e* (2.718281828459) squared.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数返回`7.38905609893065`，即*e*（2.718281828459）的平方。
- en: log()
  id: totrans-433
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: log()
- en: 'The `log()` function returns the natural logarithm of the number you provide
    as an argument:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '`log()`函数返回你提供的数字的自然对数：'
- en: '[PRE135]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'The result is:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE136]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: MySQL also provides the `log10()` function, which returns the base-10 logarithm,
    and `log2()`, which returns the base-2 logarithm.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL还提供了`log10()`函数，它返回以10为底的对数，以及`log2()`函数，它返回以2为底的对数。
- en: 'The `log()` function can accept two arguments: the base of a number, then the
    number itself. For example, to find the log[2](8), enter the following:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '`log()`函数可以接受两个参数：一个是数字的底数，另一个是该数字本身。例如，要计算log[2](8请输入以下内容：'
- en: '[PRE137]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'The result is:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE138]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: The function was sent two arguments, `2` and `8`, and returned a value of `3`.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接收到两个参数，`2`和`8`，并返回值`3`。
- en: mod()
  id: totrans-444
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: mod()
- en: The `mod()` function, as you saw earlier, is the modulo function. It takes one
    number, divides it by another, and returns the remainder.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '`mod()`函数，如你之前看到的，是取模函数。它接受一个数字，将其除以另一个数字，并返回余数。'
- en: '[PRE139]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'The result is:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE140]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: The `mod(7,2)` function evaluates to `1` because 7 divided by 2 is 3 with a
    remainder of 1\. Modulo is also available as the `%` operator and the `mod` operator.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '`mod(7,2)`函数的结果为`1`，因为7除以2的商为3，余数为1。取模运算也可以通过`%`运算符和`mod`运算符实现。'
- en: pow()
  id: totrans-450
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: pow()
- en: 'The `pow()` function returns a number raised to a power. To raise 5 to the
    power of 3, you could write this query:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '`pow()`函数返回一个数值的幂。要将5的3次方计算出来，你可以写下这个查询：'
- en: '[PRE141]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'The result is:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE142]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: The `pow()` function has a synonym, `power()`, that returns identical results.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '`pow()`函数有一个同义词`power()`，它返回相同的结果。'
- en: round()
  id: totrans-456
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: round()
- en: 'The `round()` function, introduced earlier in the chapter, rounds decimal numbers.
    To round the number 9.87654321 to three digits after the decimal point, use the
    following query:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 本章前面介绍的`round()`函数用于四舍五入小数。要将数字9.87654321四舍五入到小数点后3位，可以使用以下查询：
- en: '[PRE143]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'The result is:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE144]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'To round all of the fractional numbers, call `round()` with just one argument:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 要四舍五入所有小数数值，可以只用一个参数调用`round()`：
- en: '[PRE145]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'The result is:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE146]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: Calling `round()` without the optional second argument causes it to default
    to 0 digits after the decimal point.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 如果调用`round()`时没有提供可选的第二个参数，它会默认四舍五入到小数点后0位。
- en: truncate()
  id: totrans-466
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: truncate()
- en: 'The `truncate()` function shortens a number to specified number of decimal
    places. To truncate the number 9.87654321 to three digits after the decimal point,
    use the following query:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '`truncate()` 函数将数字截断到指定的小数位数。要将数字 9.87654321 截断到小数点后三位，请使用以下查询：'
- en: '[PRE147]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: 'The result is:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE148]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'To truncate all of the fractional numbers, call `truncate()` with `0` as the
    second argument:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 要截断所有小数部分，可以将 `truncate()` 函数的第二个参数设为 `0`：
- en: '[PRE149]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'The result is:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE150]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: The `truncate()` function removes digits to convert the number to the requested
    number of digits after the decimal point. This differs from `round()`, which rounds
    numbers up or down before removing digits.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '`truncate()` 函数通过移除数字来将数字转换为小数点后的指定位数。这与 `round()` 函数不同，后者在去除数字之前会四舍五入。'
- en: sin()
  id: totrans-476
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: sin()
- en: 'The `sin()` function returns the sine of a number given in radians. You can
    use this query to get the sine of 2:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '`sin()` 函数返回一个以弧度表示的数的正弦值。你可以使用这个查询来得到 2 的正弦值：'
- en: '[PRE151]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'The result is:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE152]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: The function was sent an argument of `2` and returned a value of `0.9092974268256817`.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 函数接收到 `2` 作为参数，并返回值 `0.9092974268256817`。
- en: cos()
  id: totrans-482
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: cos()
- en: 'The `cos()` function returns the cosine of a number that is given in radians.
    Use the following query to get the cosine of 2:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '`cos()` 函数返回一个以弧度表示的数的余弦值。使用以下查询可以得到 2 的余弦值：'
- en: '[PRE153]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'The result is:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE154]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: The function was sent an argument of `2` and returned a value of `-0.4161468365471424`.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 函数接收到 `2` 作为参数，并返回值 `-0.4161468365471424`。
- en: sqrt()
  id: totrans-488
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: sqrt()
- en: 'The `sqrt()` function returns the square root of a number. You can get the
    square root of 16like so:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '`sqrt()` 函数返回一个数的平方根。你可以像这样计算 16 的平方根：'
- en: '[PRE155]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: The function was sent an argument of `16` and returned a value of `4`.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 函数接收到 `16` 作为参数，并返回值 `4`。
- en: stddev_pop()
  id: totrans-492
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: stddev_pop()
- en: 'The `stddev_pop()` function returns the population standard deviation of the
    numbers provided. *Population standard deviation* is the standard deviation when
    all values of a dataset are taken into consideration. For example, look at the
    `test_score` table, which contains all of your test scores:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '`stddev_pop()` 函数返回提供的数值的总体标准差。*总体标准差*是考虑数据集中所有值时的标准差。例如，查看包含你所有考试成绩的 `test_score`
    表：'
- en: '[PRE156]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'Now write a query to get the population standard deviation of test scores:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 现在编写查询来获取考试成绩的总体标准差：
- en: '[PRE157]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'The result is:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE158]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: The `std()` and `stddev()` functions are synonyms for `stddev_pop()` and will
    produce identical results.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '`std()` 和 `stddev()` 函数是 `stddev_pop()` 的同义词，会产生相同的结果。'
- en: To get the standard deviation of a sample of values, rather than the entire
    population of a dataset, you can use `stddev_samp()` function.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 若要获取样本值的标准差，而不是整个数据集的标准差，你可以使用 `stddev_samp()` 函数。
- en: tan()
  id: totrans-501
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: tan()
- en: 'The `tan()` function accepts an argument in radians and returns the tangent.
    For example, you can get the tangent of 3.8 with the following query:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '`tan()` 函数接受弧度作为参数并返回正切值。例如，你可以通过以下查询获取 3.8 的正切值：'
- en: '[PRE159]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: 'The result is:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE160]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: The function was sent an argument of `3.8` and returned a value of `0.7735560905031258`.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 函数接收到 `3.8` 作为参数，并返回值 `0.7735560905031258`。
- en: Other Handy Functions
  id: totrans-507
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他实用函数
- en: Other useful functions include `cast()`, `coalesce()`, `distinct()`, `database()`,
    `if()`, and `version()`.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 其他有用的函数包括 `cast()`、`coalesce()`、`distinct()`、`database()`、`if()` 和 `version()`。
- en: cast()
  id: totrans-509
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: cast()
- en: The `cast()` function converts a value from one data type to a different data
    type. To call the `cast()` function, pass a value into `cast()` as the first argument,
    follow it with the `as` keyword, and then specify the data type you want to convert
    it to.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: '`cast()` 函数将一个值从一种数据类型转换为另一种数据类型。调用 `cast()` 函数时，将值作为第一个参数传入 `cast()`，接着使用
    `as` 关键字，指定要转换成的目标数据类型。'
- en: 'For example, select the `datetime` column `order_datetime` from the table called
    `online_order`:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，从名为 `online_order` 的表中选择 `datetime` 列 `order_datetime`：
- en: '[PRE161]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'Your results show the following `datetime` values:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 你的结果显示以下 `datetime` 值：
- en: '[PRE162]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'You can select those values without their time portion by casting from a `datetime`
    data type to a `date` data type, like so:'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将 `datetime` 数据类型转换为 `date` 数据类型，来选择没有时间部分的值，像这样：
- en: '[PRE163]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: 'Your results are:'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 你的结果是：
- en: '[PRE164]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: The date part of the `datetime` now appears as a `date` value.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '`datetime` 的日期部分现在显示为 `date` 值。'
- en: coalesce()
  id: totrans-520
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: coalesce()
- en: 'The `coalesce()` function returns the first non-null value in a list. You could
    specify null values followed by a non-null value, and `coalesce()` would return
    the non-null value:'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '`coalesce()` 函数返回列表中第一个非空值。你可以指定空值后跟非空值，`coalesce()` 会返回非空值：'
- en: '[PRE165]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: 'The result is:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE166]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: 'The `coalesce()` function is also useful when you want to display a value in
    your result instead of `null`. For example, in the `candidate` table used in the
    following query, the `employer` column will sometimes store the candidate’s employer
    name, and other times that column will be `null`. In order to display the text
    `Between Jobs` instead of `null`, you’d enter the following:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '`coalesce()`函数在你想要在结果中显示某个值而不是`null`时也非常有用。例如，在以下查询中使用的`candidate`表中，`employer`列有时会存储候选人的雇主名称，其他时候该列会是`null`。为了显示`Between
    Jobs`而不是`null`，你可以输入以下内容：'
- en: '[PRE167]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'The results are:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE168]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: The query now displays `Between Jobs` rather than `null` for Jacob Davis, which
    is more informative, especially for nontechnical users who may not understand
    what `null` means.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 现在查询显示的是Jacob Davis的`Between Jobs`，而不是`null`，这更加信息丰富，特别是对于那些不理解`null`含义的非技术用户来说。
- en: distinct()
  id: totrans-530
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: distinct()
- en: 'When you have duplicate values, you can use the `distinct()` function to display
    each value only once. For example, if you want to know which countries your customers
    are from, you could query the `customer` table like so:'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有重复的值时，可以使用`distinct()`函数使每个值只显示一次。例如，如果你想知道你的客户来自哪些国家，可以像这样查询`customer`表：
- en: '[PRE169]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: 'The result is:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE170]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: 'The query is returning the `country` column value for every row in the `customer`
    table. You can use the `distinct()` function to see each country in your result
    set just once:'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 查询返回了`customer`表中每一行的`country`列值。你可以使用`distinct()`函数使结果集中每个国家只显示一次：
- en: '[PRE171]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: 'Now the result is:'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 现在结果是：
- en: '[PRE172]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'The `distinct()` function is also available as an operator. To use it, remove
    the parentheses like so:'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '`distinct()`函数也可以作为操作符使用。要使用它，去掉括号，如下所示：'
- en: '[PRE173]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: 'The result set is identical:'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 结果集是相同的：
- en: '[PRE174]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: 'The `distinct()` function is especially useful when combined with the `count()`
    function to find how many unique values you have. Here you write a query to count
    the number of distinct countries in your table:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: '`distinct()`函数在与`count()`函数结合使用时尤其有用，用来找出你表中有多少个唯一的值。这里你写一个查询来计算表中不同国家的数量：'
- en: '[PRE175]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: 'The result is:'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE176]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: You identified the distinct countries using the `distinct()` function and wrapped
    them in the `count()` function to get a count of them.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用`distinct()`函数识别了不同的国家，并将它们包裹在`count()`函数中以获取数量。
- en: database()
  id: totrans-548
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: database()
- en: 'The `database()` function tells you which database you’re currently using.
    As you saw in [Chapter 2](c02.xhtml), the `use` command lets you select which
    database you want to use. Throughout your day, you might move between different
    databases and forget your current database. You can call the `database()` function
    like so:'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '`database()`函数告诉你当前使用的是哪个数据库。正如在[第2章](c02.xhtml)中所看到的，`use`命令允许你选择要使用的数据库。在你的一天中，你可能会在不同的数据库之间切换，忘记当前的数据库。你可以像这样调用`database()`函数：'
- en: '[PRE177]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: 'The result is:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE178]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: If you’re not in the database you thought you were and you tried to query a
    table, MySQL would give an error saying the table doesn’t exist. Calling `database()`
    is a quick way to check.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不在你以为自己所在的数据库中，并且你尝试查询一个表，MySQL会给出错误，说明该表不存在。调用`database()`是一种快速检查的方式。
- en: if()
  id: totrans-554
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: if()
- en: 'The `if()` function returns a different value depending upon whether a condition
    is `true` or `false`. The `if()` function accepts three arguments: the condition
    you want to test, the value to return if the condition is `true`, and the value
    to return if the condition is `false`.'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '`if()`函数根据条件是否为`true`或`false`返回不同的值。`if()`函数接受三个参数：你要测试的条件、条件为`true`时返回的值、条件为`false`时返回的值。'
- en: 'Let’s write a query that lists students and whether they passed or failed an
    exam. The `test_result` table contains the following data:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们写一个查询，列出学生及其是否通过考试。`test_result`表包含以下数据：
- en: '[PRE179]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: 'Your query to check if each student passed the exam should look similar to
    the following:'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 你检查每个学生是否通过考试的查询应该类似于以下内容：
- en: '[PRE180]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: 'The condition you’re testing is whether the student’s `grade` is greater than
    `59`. If so, you return the text `pass`. If not, you return the text `fail`. The
    results are:'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 你正在测试的条件是学生的`grade`是否大于`59`。如果是，你返回文本`pass`。如果不是，你返回文本`fail`。结果是：
- en: '[PRE181]'
  id: totrans-561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: 'MySQL also has a `case` operator that lets you perform more sophisticated logic
    than the `if()` function. The `case` operator lets you test more than one condition
    and returns the result for the first condition that is met. In the following query,
    you select the student name and add a comment to the student based on their grade:'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 还具有 `case` 运算符，它允许你执行比 `if()` 函数更复杂的逻辑。`case` 运算符允许你测试多个条件，并返回第一个满足条件的结果。在以下查询中，你根据学生的成绩选择学生姓名，并为学生添加评论：
- en: '[PRE182]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: The `case` operator uses a matching `end` keyword that marks the end of the
    `case` statement.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '`case` 运算符使用匹配的 `end` 关键字来标志 `case` 语句的结束。'
- en: For any students who received a grade less than 30, the `case` statement returns
    `Please retake this exam` and then control is passed to the `end` statement.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何得分低于 30 分的学生，`case` 语句将返回 `Please retake this exam`，然后控制权传递到 `end` 语句。
- en: Students who received a grade of 30 or more aren’t handled by the first `when`
    condition of the `case` statement, so control drops to the next line.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 得分 30 分或以上的学生不会被第一个 `when` 条件处理，因此控制权转到下一行。
- en: If a student received a grade of 30 or higher but less than 60, `Better luck
    next time` is returned and control passes to the `end` statement.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 如果学生的成绩为 30 分或更高，但低于 60 分，将返回 `Better luck next time`，然后控制权传递到 `end` 语句。
- en: 'If a student’s grade didn’t match either of the `when` conditions, meaning
    the student scored higher than 60, control drops to the `else` keyword, where
    `Good job` is returned. You use an `else` clause to capture any student grades
    that aren’t handled by the first two conditions. The results are:'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 如果学生的成绩不符合任一 `when` 条件，即学生的分数高于 60，控制权将转到 `else` 关键字，返回 `Good job`。你可以使用 `else`
    子句来捕捉任何不符合前两个条件的学生成绩。结果是：
- en: '[PRE183]'
  id: totrans-569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: Unlike the `if()` function—which returns a result if a condition is `true` or
    `false`—`case` lets you check several conditions and returns a result based on
    the first condition that is met.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `if()` 函数不同——`if()` 函数在条件为 `true` 或 `false` 时返回结果——`case` 允许你检查多个条件，并根据第一个满足的条件返回结果。
- en: version()
  id: totrans-571
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: version()
- en: 'The `version()` function returns the version of MySQL you are using:'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '`version()` 函数返回你正在使用的 MySQL 版本：'
- en: '[PRE184]'
  id: totrans-573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: 'The result is:'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE185]'
  id: totrans-575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: The version of MySQL installed on my server is 8.0.27\. Yours may be different.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 我服务器上安装的 MySQL 版本是 8.0.27。你的版本可能不同。
- en: Summary
  id: totrans-577
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you looked at how to call MySQL built-in functions and pass
    values, known as arguments, to those functions. You explored the most useful functions
    and saw how to locate the more obscure ones when necessary. In the next chapter,
    you’ll look at how to insert, update, and delete data from a MySQL database.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何调用 MySQL 内置函数并向这些函数传递值，这些值被称为参数。你探索了最有用的函数，并了解了如何在需要时查找那些较不常见的函数。在下一章中，你将学习如何从
    MySQL 数据库中插入、更新和删除数据。
