- en: '5'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '5'
- en: Real-Time Music Visualizer by Michael Krumpus
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 实时音乐可视化器，作者：Michael Krumpus
- en: This project shows you how to create an awesome music visualizer using an arduino
    and an LED strip.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目向你展示如何使用 Arduino 和 LED 灯带创建一个炫酷的音乐可视化器。
- en: '![image](../images/f0095-01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0095-01.jpg)'
- en: 'After building this project, you’ll be able to plug any music source into the
    circuit and the LED strip will display a cool, multicolored light show synchronized
    to your music in real time. This project is great for parties, DJ booths, or even
    your dorm room! To see the visualizer in action, have a look at this short video:
    *[https://youtu.be/GkjBT-EmRw8](https://youtu.be/GkjBT-EmRw8)*.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 构建完此项目后，你将能够将任何音乐源插入电路，LED 灯带会根据音乐同步显示酷炫的多彩灯光秀。这个项目非常适合派对、DJ 舞台，甚至你的宿舍！想要看到可视化器的实际效果，可以查看这个简短的视频：
    *[https://youtu.be/GkjBT-EmRw8](https://youtu.be/GkjBT-EmRw8)*。
- en: First we’ll look at the theory behind making a music visualizer so you have
    some understanding of how it works before getting into the build. After the circuit
    is built, you’ll learn how the code works and how to load it into the Arduino.
    Finally, we’ll cover some tips on how to revise the code to make it behave differently
    so you can experiment on your own.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将了解制作音乐可视化器的原理，以便在开始构建之前，你对其工作原理有所了解。在电路搭建完成后，你将了解代码如何工作以及如何将代码加载到 Arduino
    中。最后，我们将讨论一些如何修改代码的技巧，以便让其表现不同，让你可以自己进行实验。
- en: '**GET THE PARTS**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**获取零件**'
- en: The parts for the Real-Time Music Visualizer are easy to find. This list suggests
    Adafruit for some of the more specialized parts and Mouser for simple passive
    components.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 实时音乐可视化器所需的零件非常容易找到。本清单推荐 Adafruit 提供一些更专业的零件，Mouser 提供简单的被动元件。
- en: '**NOTE**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The length of your LED strip determines your power needs. For a 2 m strip,
    a 2 A power supply is enough. But if you use a 3 m strip, you’ll need a 5 A or
    10 A supply. Adafruit P/N 658 is a good option for 10 A.*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*你的 LED 灯带的长度决定了你的电力需求。对于 2 米的灯带，2 A 的电源就足够了。但如果使用 3 米的灯带，你将需要 5 A 或 10 A 的电源。Adafruit
    P/N 658 是一个适用于 10 A 的好选择。*'
- en: Arduino Uno (Adafruit P/N 50; see “[Getting Started with the Arduino and the
    Arduino IDE](intro.xhtml#lev17)” on [page 15](intro.xhtml#page_15) for setup instructions)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino Uno (Adafruit P/N 50; 请参阅 “[Arduino 入门与 Arduino IDE](intro.xhtml#lev17)”
    第15页 ([intro.xhtml#page_15]) 获取安装说明)
- en: 1, 2, or 3 m WS2812B RGB LED strip (for example, Adafruit NeoPixel P/N 1461)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1, 2 或 3 米 WS2812B RGB LED 灯带 (例如，Adafruit NeoPixel P/N 1461)
- en: 5 V, 2 A power supply (Adafruit P/N 276, or P/N 658 for 10 A)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5 V，2 A 电源 (Adafruit P/N 276，或 P/N 658 用于 10 A)
- en: 2.1 mm DC breadboard power jack (Adafruit P/N 368)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.1 mm 直流面包板电源插座 (Adafruit P/N 368)
- en: Two breadboard audio jacks (Adafruit P/N 1699)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个面包板音频插座 (Adafruit P/N 1699)
- en: 10 kΩ potentiometer (for example, Adafruit P/N 356)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 10 kΩ 电位器 (例如，Adafruit P/N 356)
- en: Solderless full-size breadboard (Adafruit P/N 239)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无焊接全尺寸面包板 (Adafruit P/N 239)
- en: 22-gauge solid hookup wire for connecting components (Adafruit P/N 1311)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 22号实心连接线，用于连接组件 (Adafruit P/N 1311)
- en: Three 4.7 kΩ resistors (Mouser P/N 291-4.7K-RC)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三个 4.7 kΩ 电阻 (Mouser P/N 291-4.7K-RC)
- en: Two 100 kΩ resistors (Mouser P/N 291-100K-RC)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个 100 kΩ 电阻 (Mouser P/N 291-100K-RC)
- en: 2.2 kΩ resistor (Mouser P/N 291-2.2K-RC)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.2 kΩ 电阻 (Mouser P/N 291-2.2K-RC)
- en: 470 Ω resistor (Mouser P/N 291-470-RC)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 470 Ω 电阻 (Mouser P/N 291-470-RC)
- en: 0.047 μF (47 nF) ceramic capacitor (Mouser P/N 594-K473K10X7RF5UH5)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0.047 μF (47 nF) 陶瓷电容器 (Mouser P/N 594-K473K10X7RF5UH5)
- en: 10 μF aluminum electrolytic capacitor (Mouser P/N 80-ESK106M016AC3AA)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 10 μF 铝电解电容器 (Mouser P/N 80-ESK106M016AC3AA)
- en: 1,000 μF aluminum electrolytic capacitor (Mouser P/N 647-UVR1C102MPD)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1,000 μF 铝电解电容器 (Mouser P/N 647-UVR1C102MPD)
- en: Two 3.5 mm audio cables (Adafruit P/N 2698)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两根 3.5 mm 音频线 (Adafruit P/N 2698)
- en: Music player and speakers of your choice
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你选择的音乐播放器和音响
- en: '**HOW IT WORKS: TURNING MUSIC INTO DATA**'
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**工作原理：将音乐转化为数据**'
- en: To visualize your music, the visualizer must analyze the content of an audio
    signal and display something in response on the LED strip. But how do we analyze
    an audio signal with Arduino code? The secret lies in the *Fast Fourier Transform
    (FFT)* algorithm, a mathematical technique dating back to the 19th century. We
    won’t go into the math details because digital signal processing is quite complex,
    but the basic idea is that a signal that varies over time (like the voltage of
    an audio signal) can be analyzed and broken down into its frequency components.
    You’re probably already familiar with this idea if you’ve seen a spectrum analyzer
    on stereo equipment and music players on your computer, shown in [Figure 5-1](ch05.xhtml#ch05fig1).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要可视化你的音乐，视觉化工具必须分析音频信号的内容，并在LED条上显示相应的内容。那么，如何用Arduino代码分析音频信号呢？其中的秘诀在于*快速傅里叶变换（FFT）*算法，这是一种追溯到19世纪的数学技术。我们不会深入讨论数学细节，因为数字信号处理相当复杂，但基本思想是，随着时间变化的信号（如音频信号的电压）可以被分析并分解为其频率成分。如果你曾在立体声设备或计算机上的音乐播放器中见过频谱分析仪，那么你可能已经熟悉了这一概念，见于[图5-1](ch05.xhtml#ch05fig1)。
- en: '![image](../images/f0097-01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0097-01.jpg)'
- en: '**FIGURE 5-1:** A typical spectrum analyzer'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5-1：** 一个典型的频谱分析仪'
- en: The vertical bars represent frequency bands, with the bars on the left representing
    lower frequencies (bass) and those on the right representing higher frequencies
    (treble). The Arduino code in this project will sample the audio signal’s voltage
    and perform the FFT algorithm on the audio samples to determine the signal strength
    in each frequency band. Then we’ll use the levels of the low-frequency bands (the
    bass beat of the music) to create an interesting display on the LED strip.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直条形代表频带，左侧的条形代表低频（低音），右侧的条形代表高频（高音）。本项目中的Arduino代码将对音频信号的电压进行采样，并对音频样本执行FFT算法，以确定每个频带中的信号强度。然后，我们将使用低频频带的电平（音乐的低音节奏）来在LED条上创建一个有趣的显示效果。
- en: In the visualizer circuit you’ll plug your computer, phone, tablet, or other
    music device into a 3.5 mm (1/8 inch) input jack to take the music signal. You’ll
    connect an output jack to your powered speakers, stereo amplifier, or whatever
    device you use to amplify your music and output it to speakers. In other words,
    the circuit sits between your music source and amplifier/speaker equipment so
    it can “listen” to the music and put on a show. The rest of the circuit consists
    of some simple components and an Arduino. There are some tricky aspects to dealing
    with audio signals in electronics, so this section describes a couple of the techniques
    we’ll use to make the circuit work. This section will teach you quite a bit about
    audio processing!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在视觉化电路中，你将把计算机、手机、平板或其他音乐设备连接到一个3.5毫米（1/8英寸）输入插孔，以接收音乐信号。你将连接一个输出插孔到你电源驱动的扬声器、立体声放大器，或其他用于放大音乐并输出到扬声器的设备。换句话说，电路位于你的音乐源和放大器/扬声器设备之间，这样它就可以“听”到音乐并展示效果。电路的其余部分由一些简单的元件和一个Arduino组成。处理音频信号在电子学中有一些棘手的地方，因此本节描述了我们将用于使电路工作的一些技术。本节将教你很多关于音频处理的知识！
- en: '**Input Bias**'
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**输入偏置**'
- en: An Arduino board can measure voltages on its six analog input pins, labeled
    A0 through A5 on the board. Your visualizer will connect the audio signal for
    your music to Arduino pin A0 to take a large number of sample measurements very
    quickly, then apply the FFT algorithm to the signal to transform it into data
    the Arduino can analyze.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino板可以测量其六个模拟输入引脚上的电压，这些引脚在板上标记为A0到A5。你的视觉化工具将会把音频信号连接到Arduino的A0引脚，以快速进行大量采样测量，然后应用FFT算法将信号转换为Arduino可以分析的数据。
- en: 'If you’re familiar with analog input measurement on Arduino, you know that
    a call to the `analogRead()` function, which reads data from the analog pins,
    returns a value in the range of 0–1023, which represents the measured voltage
    in the range of 0–5 V. But there is a problem when we want to measure an analog
    audio signal: audio is an *alternating current*, not direct current. That is,
    the voltage swings above ground (0 V) and then *below* ground to a negative voltage
    (see [Figure 5-2](ch05.xhtml#ch05fig2)).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉Arduino上的模拟输入测量，你就知道，调用`analogRead()`函数从模拟引脚读取数据时，返回的值在0到1023的范围内，这代表测得的电压范围为0至5伏。但当我们想测量模拟音频信号时，会遇到一个问题：音频是*交流电*，而不是直流电。也就是说，电压在地面（0伏）上方波动，然后*低于*地面，变为负电压（见[图5-2](ch05.xhtml#ch05fig2)）。
- en: '![image](../images/f0098-01.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0098-01.jpg)'
- en: '**FIGURE 5-2:** A simple audio signal oscillating between positive and negative
    voltages'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-2：** 一个简单的音频信号在正负电压之间振荡'
- en: The Arduino cannot measure voltages below 0 V, so we cannot connect an audio
    signal to pin A0 without potentially damaging the Arduino. How do we solve this?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino 无法测量低于 0 V 的电压，因此我们不能将音频信号直接连接到 A0 引脚，否则可能会损坏 Arduino。我们该如何解决这个问题？
- en: The solution is to “bias” the voltage up to a higher level so that it is not
    centered around 0 V, but around a higher voltage instead. That means when the
    voltage swings low it won’t dip under 0 V. We accomplish this with a voltage divider
    made out of two resistors of equal value. The audio signal has one resistor connecting
    it to 5 V and another connecting it to 0 V ([Figure 5-3](ch05.xhtml#ch05fig3)).
    This biases the signal up to the midpoint between 0 and 5 V, or 2.5 V.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方法是将电压“偏置”到更高的水平，这样它就不再围绕 0 V 而是围绕更高的电压波动。这意味着当电压下降时，它不会低于 0 V。我们通过一个由两个相等电阻值组成的电压分压器来实现这一点。音频信号有一个电阻将其连接到
    5 V，另一个电阻将其连接到 0 V（[图 5-3](ch05.xhtml#ch05fig3)）。这样就将信号偏置到 0 V 和 5 V 之间的中点，即 2.5
    V。
- en: '![image](../images/f0099-01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0099-01.jpg)'
- en: '**FIGURE 5-3:** An input bias circuit for an audio signal'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-3：** 音频信号的输入偏置电路'
- en: '[Figure 5-4](ch05.xhtml#ch05fig4) shows the same signal, but centered around
    2.5 V instead of 0 V. Now the Arduino can measure audio voltages without worrying
    about them swinging below ground. Audio signals are usually only a few volts from
    peak to peak, so this approach works well.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 5-4](ch05.xhtml#ch05fig4) 显示了相同的信号，但它是围绕 2.5 V 而不是 0 V 进行偏置的。现在，Arduino
    可以测量音频电压，而不必担心它们会低于地电位。音频信号通常只有几伏特的峰值到峰值电压，因此这种方法效果很好。'
- en: '![image](../images/f0099-02.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0099-02.jpg)'
- en: '**FIGURE 5-4:** An audio signal now biased up 2.5 V'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-4：** 一个音频信号，现在偏置为 2.5 V'
- en: '**Sensitivity Control**'
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**灵敏度控制**'
- en: The audio signal needs to be strong enough that the voltage swings over a large
    enough range for the visualizer to be able to effectively analyze it. But some
    audio sources don’t output a really strong signal. We need to give our circuit
    the ability to adjust the sensitivity so that we can work with weak signals. This
    section describes a clever trick to accomplish this.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 音频信号需要足够强，以便电压在一个足够大的范围内波动，这样可视化工具才能有效地分析它。但一些音频源输出的信号并不十分强烈。我们需要为电路提供调节灵敏度的能力，以便可以处理弱信号。本节描述了一个巧妙的技巧来实现这一点。
- en: Recall from the previous section that the Arduino can measure voltages between
    0 V and 5 V, and that we’ve biased the audio voltage up to be centered around
    2.5 V. If the audio signal is weak and the voltage doesn’t vary much, we’d have
    a signal like that shown in [Figure 5-5](ch05.xhtml#ch05fig5). This might be the
    case in a “line-level” signal where the peak-to-peak voltage is only 1 V.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 回想上一节内容，Arduino 可以测量 0 V 到 5 V 之间的电压，并且我们已经将音频电压偏置为围绕 2.5 V。若音频信号较弱，电压变化不大，我们就会得到类似于
    [图 5-5](ch05.xhtml#ch05fig5) 中显示的信号。这可能出现在“线路电平”信号中，其中峰值到峰值电压仅为 1 V。
- en: '![image](../images/f0100-01.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0100-01.jpg)'
- en: '**FIGURE 5-5:** A weak audio signal'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-5：** 一个弱音频信号'
- en: Measuring this signal will result in `analogRead(0)` values around 512 (the
    midpoint between 0–1023), but they won’t vary enough to give us a good analysis.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 测量这个信号会得到大约 512 的 `analogRead(0)` 值（0–1023 范围的中点），但这些值变化不大，无法给我们提供有效的分析。
- en: Fortunately, the Arduino board has a special pin called the *analog reference
    (AREF)*. We can provide a voltage on this pin and tell the Arduino code that this
    is the highest voltage we are going to read on the analog input. For example,
    to measure voltages between 0 V and 2 V and have the `analogRead()` value use
    the full 0–1023 range, we provide 2 V on the AREF pin. A 2 V measurement will
    give the value of 1023 instead of something much lower.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Arduino 板上有一个特别的引脚，称为 *模拟参考 (AREF)*。我们可以在这个引脚上提供电压，并告诉 Arduino 代码，这就是我们在模拟输入上要读取的最高电压。例如，要测量
    0 V 到 2 V 之间的电压，并使得 `analogRead()` 的值使用完整的 0–1023 范围，我们就在 AREF 引脚上提供 2 V 的电压。此时，2
    V 的测量值会是 1023，而不是更低的值。
- en: In this circuit we’ll use a potentiometer to provide a voltage to the AREF pin.
    For higher sensitivity, we simply provide a lower voltage by turning the potentiometer.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个电路中，我们将使用一个电位器为 AREF 引脚提供电压。为了提高灵敏度，我们只需通过调节电位器来提供更低的电压。
- en: Easy, right? Not so fast! Remember that the audio signal is centered around
    2.5 V. If we lower the analog reference too low, we’ll be ignoring the upper part
    of the signal because the top peaks will be “cut off.” In this case we will just
    get garbage from the FFT algorithm. The solution is that we *also* lower the top
    voltage on the input bias circuit so that the bias circuit will center the audio
    signal around the midpoint between 0 V and the voltage we provide to AREF. [Figure
    5-6](ch05.xhtml#ch05fig6) shows the situation where we have a weak audio signal
    that swings only about 1 V from peak to peak. The potentiometer in the circuit
    provides an AREF voltage of 2 V, which we also use as the top of the bias circuit.
    Now the audio signal is centered around 1 V and fills a much larger range of `analogRead()`
    values. In effect, we’ve amplified the signal! We didn’t actually increase the
    voltage of the signal; we simply reduced the range of voltages that we’re measuring
    so that the weak signal fills more of the range. Clever.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 容易吧？别着急！记住，音频信号是围绕2.5 V的。如果我们将模拟参考电压调得过低，我们就会忽略信号的上部分，因为信号的峰值会被“截断”。在这种情况下，FFT算法将无法正确处理信号。解决方法是我们*还*需要将输入偏置电路的最高电压降低，这样偏置电路就能将音频信号居中于0
    V与我们提供给AREF的电压之间的中点。[图 5-6](ch05.xhtml#ch05fig6)展示了我们得到的弱音频信号，它的波动只有大约1 V的峰-峰值。电路中的可调电阻提供了一个2
    V的AREF电压，我们也将其作为偏置电路的上限。现在，音频信号居中在1 V，填充了更广泛的`analogRead()`值范围。实际上，我们已经放大了信号！我们并没有实际增加信号的电压，而是减少了我们测量的电压范围，使得弱信号可以填充更多的范围。巧妙。
- en: '![image](../images/f0100-02.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0100-02.jpg)'
- en: '**FIGURE 5-6:** A weak audio signal with sensitivity adjusted to set top voltage
    to 2 V'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-6：** 一个弱音频信号，灵敏度调整到设定的最高电压为2 V'
- en: '**BUILD IT**'
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**搭建它**'
- en: It’s time to start building the music visualizer circuit on a breadboard. These
    instructions will show this process in multiple steps to make it easier to build
    up the circuit. You may choose to lay out your components on the breadboard differently,
    but these diagrams are intended to give you the most clarity. Let’s get started!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候开始在面包板上搭建音乐可视化电路了。这些说明将通过多个步骤展示整个过程，以便更容易地搭建电路。你可以选择不同的方式布局你的组件，但这些示意图旨在为你提供最大的清晰度。让我们开始吧！
- en: '**Add the audio jacks to the breadboard.** Connect the left and right channels
    of the input jack directly to the left and right channels of the output jack,
    respectively, as shown in [Figure 5-7](ch05.xhtml#ch05fig7). This means that the
    music flows through to output. The jack middle pins should connect to ground.
    Also connect the power rails of each side of the board with red and black wires
    as shown.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**将音频插孔添加到面包板上。** 如[图 5-7](ch05.xhtml#ch05fig7)所示，将输入插孔的左声道和右声道直接连接到输出插孔的左声道和右声道。这样，音乐信号就可以流到输出端。插孔的中间引脚应连接到地。同时，使用红色和黑色导线将电路板两侧的电源轨连接起来，如图所示。'
- en: '![image](../images/f0101-01.jpg)'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0101-01.jpg)'
- en: '**FIGURE 5-7:** Audio jacks and power rail connections'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 5-7：** 音频插孔和电源轨连接'
- en: '**Filter out noise with an audio summing circuit.** Now connect the left and
    right channels together through a resistor on each channel to prevent crosstalk
    (interference) between them. Add a 4.7 kΩ resistor on each channel, as shown in
    [Figure 5-8](ch05.xhtml#ch05fig8). Add the 10 μF capacitor with the negative terminal
    (the shorter lead) on the left, connected to the output jack via the 4.7 kΩ resistor.
    Then add a 0.047 μF (or 47 nF) capacitor and connect one leg to the positive terminal
    of the 10 μF capacitor and the other leg to ground, as shown. These help to filter
    out noise and block DC current.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用音频汇总电路滤除噪声。** 现在，通过每个通道上的电阻将左声道和右声道连接起来，以防止它们之间的串音（干扰）。在每个通道上加一个4.7 kΩ的电阻，如[图
    5-8](ch05.xhtml#ch05fig8)所示。然后在左侧加上一个10 μF的电容器，负极（较短的引脚）连接到输出插孔，通过4.7 kΩ电阻连接。接着添加一个0.047
    μF（或47 nF）的电容器，并将一端连接到10 μF电容器的正极，另一端连接到地，如图所示。这些有助于滤除噪声并阻止直流电流。'
- en: '![image](../images/f0101-02.jpg)'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0101-02.jpg)'
- en: '**FIGURE 5-8:** Audio summing circuit and filter'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 5-8：** 音频汇总电路和滤波器'
- en: '**Build up the input bias and analog reference circuit.** Recall that our voltage
    divider is made of two 100 kΩ resistors and will center the audio signal between
    0 V and the analog reference voltage, which we control with the 10 kΩ potentiometer.
    Insert those resistors, with one leg of the first resistor placed directly in
    the ground rail, and the other leg connected to the second 100 kΩ resistor, as
    shown in [Figure 5-9](ch05.xhtml#ch05fig9). Make sure the second resistor is inserted
    adjacent to the first, as shown. Now place a potentiometer in the breadboard and
    connect the rightmost pin to ground through a 2.2 kΩ resistor. Connect a 4.7 kΩ
    resistor to the middle pin of the potentiometer—this will eventually connect to
    the AREF pin on the Arduino—and make sure this resistor straddles the center divide
    on the breadboard. This middle pin should also connect to the second leg of the
    second 100 kΩ resistor. The final empty pin of the potentiometer connects to the
    power rail.'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**构建输入偏置和模拟参考电路。** 回想一下，我们的电压分压器由两个100kΩ的电阻器组成，它将音频信号中心化于0V和模拟参考电压之间，模拟参考电压通过10kΩ的可调电阻来控制。将这些电阻器插入面包板，其中第一个电阻器的一端直接连接到电源地轨道，另一端与第二个100kΩ电阻器连接，如[图5-9](ch05.xhtml#ch05fig9)所示。确保第二个电阻器与第一个电阻器相邻插入。现在，在面包板上放置一个可调电阻，并通过一个2.2kΩ电阻将最右边的引脚连接到电源地。将一个4.7kΩ电阻连接到可调电阻的中间引脚——这将最终连接到Arduino的AREF引脚——并确保这个电阻跨越面包板的中央分隔。这个中间引脚还应该连接到第二个100kΩ电阻器的第二个引脚。可调电阻的最后一个空引脚连接到电源轨道。'
- en: '![image](../images/f0102-01.jpg)'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0102-01.jpg)'
- en: '**FIGURE 5-9:** Input bias components'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图5-9：** 输入偏置组件'
- en: '**Connect a power jack to power the circuit.** Connect the power jack to the
    power rails of the breadboard. Also connect the large 1,000 μF capacitor to the
    power lines as shown in [Figure 5-10](ch05.xhtml#ch05fig10). Electrolytic capacitors
    are polarized, so pay attention to the polarity: the positive lead is longer than
    the negative lead and should connect to the positive rail. There is also a white
    stripe on the negative side of the capacitor. This capacitor provides a reservoir
    of voltage in case the LED strip draws a lot of current all at once. For example,
    setting all LEDs on the strip to white at the same time would draw a lot of current
    from the circuit, but the capacitor would help smooth out any resulting voltage
    dips so the circuit doesn’t overload.'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**连接电源插口为电路供电。** 将电源插口连接到面包板的电源轨道。还要将大的1,000μF电解电容器连接到电源线路，如[图5-10](ch05.xhtml#ch05fig10)所示。电解电容器是有极性的，所以要注意极性：正极引线比负极引线长，并应连接到正电源轨道。电容器的负极一侧也有一条白色的标线。这个电容器为电路提供电压储备，以防LED条带一次性吸收大量电流。例如，将LED条带上的所有LED灯同时设置为白色会消耗大量电流，但电容器有助于平滑由此产生的电压下降，从而避免电路过载。'
- en: '![image](../images/f0103-01.jpg)'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0103-01.jpg)'
- en: '**FIGURE 5-10:** Power connection for the LED strip'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图5-10：** LED条带的电源连接'
- en: '**Connect the LED strip to your circuit.** The LED strip has three connections:
    5 V, ground, and data in (DIN). These electrical connections are not always in
    the same order on all LED strips. For example, the DIN connection is often in
    the middle, but [Figure 5-11](ch05.xhtml#ch05fig11) shows it at the top. Just
    pay close attention to the labels on your LED strip. You may need to solder wires
    to your LED strip if yours doesn’t have a connector of some kind (turn to the
    appendix for instructions on soldering). Whatever the case, connect the 5 V, ground,
    and DIN connections to the circuit as shown in [Figure 5-11](ch05.xhtml#ch05fig11),
    with the DIN pin connected to a 470 Ω resistor (the other end of the resistor
    will connect to the Arduino).'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**将LED条带连接到电路中。** LED条带有三个连接端口：5V、电源地和数据输入（DIN）。这些电气连接在不同的LED条带上可能顺序不同。例如，DIN连接通常位于中间，但[图5-11](ch05.xhtml#ch05fig11)中它显示在顶部。只需密切注意LED条带上的标签。如果你的LED条带没有连接器，可能需要将导线焊接到条带上（有关焊接的说明，请参见附录）。无论如何，请按照[图5-11](ch05.xhtml#ch05fig11)所示，将5V、电源地和DIN连接到电路中，DIN引脚连接到一个470Ω电阻（电阻的另一端将连接到Arduino）。'
- en: '![image](../images/f0103-02.jpg)'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0103-02.jpg)'
- en: '**FIGURE 5-11:** Connecting the LED strip'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图5-11：** 连接LED条带'
- en: '**Wire up the Arduino.** We’re almost done! The last wires connect to your
    Arduino board, as shown in [Figure 5-12](ch05.xhtml#ch05fig12). The green wire
    connects Arduino pin 6 to the 470 Ω resistor on the DIN connection. The blue wire
    connects to the Arduino AREF pin. The yellow wire is the audio signal and connects
    to Arduino analog pin A0\. The last connection you need to make is wiring the
    breadboard ground signal to an Arduino ground pin marked GND, but don’t make this
    connection just yet. If there is a program already running on your Arduino, it
    could damage parts of your circuit when you connect your circuit to the Arduino.
    So, to be safe, we’ll load the sketch for this project first and then finish connecting
    the Arduino.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**连接 Arduino。** 我们快完成了！最后的电线连接到你的 Arduino 板，如[图 5-12](ch05.xhtml#ch05fig12)所示。绿色电线连接
    Arduino 的 6 号引脚到 DIN 连接处的 470 Ω 电阻。蓝色电线连接到 Arduino 的 AREF 引脚。黄色电线是音频信号，连接到 Arduino
    的模拟引脚 A0。最后需要连接的是将面包板的接地信号连接到标有 GND 的 Arduino 接地引脚，但此时不要进行此连接。如果 Arduino 上已经有程序在运行，连接电路时可能会损坏电路的部分元件。因此，为了安全起见，我们会先加载本项目的草图，然后再完成
    Arduino 的连接。'
- en: '![image](../images/f0104-01.jpg)'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0104-01.jpg)'
- en: '**FIGURE 5-12:** Connecting the Arduino to the circuit'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 5-12：** 将 Arduino 连接到电路'
- en: '**CODE IT**'
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写代码**'
- en: This circuit won’t do anything without some awesome code on the Arduino! The
    Arduino sketch we’ll use is fairly complex and there isn’t room to print it all
    here, but this section will describe how it generally works so you can learn the
    basics. Download the sketch from the book’s resources at *[https://nostarch.com/LEDHandbook/](https://nostarch.com/LEDHandbook/)*.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个电路在没有 Arduino 上的精彩代码之前是不会做任何事情的！我们将使用的 Arduino 草图相当复杂，这里没有足够的空间将其全部打印出来，但本节将描述它的基本工作原理，帮助你掌握基础。你可以从书本资源中下载草图，网址是
    *[https://nostarch.com/LEDHandbook/](https://nostarch.com/LEDHandbook/)*。
- en: '**How It Works**'
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**工作原理**'
- en: The Arduino program’s job is to “listen” to the music by capturing voltage samples
    in a buffer and then perform an FFT analysis on those samples to determine the
    levels of each frequency band. This gives us data similar to an ordinary spectrum
    analyzer—the signal strength of each frequency band at any particular moment.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino 程序的工作是通过在缓冲区捕获电压样本来“监听”音乐，然后对这些样本进行 FFT 分析，以确定每个频率带的水平。这给我们提供了类似普通频谱分析仪的数据——在任何特定时刻每个频率带的信号强度。
- en: Instead of just displaying columns of LEDs, though, we do something much more
    interesting. Every time a new maximum or peak in a frequency band is detected,
    the code generates a pair of moving pixels that originate in the middle of the
    LED strip and move outward toward the ends. The speed of the moving pixels depends
    on the peak’s strength, and the pixels fade in brightness as they move outward.
    The colors of the peaks vary randomly. Note that we pay attention only to the
    bottom three frequency bands (out of eight bands) so that we are visualizing the
    music’s beat.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们并不是仅仅显示一列列的 LED，而是做一些更有趣的事情。每当检测到频率带中出现新的最大值或峰值时，代码会生成一对从 LED 带中间起始并向两端移动的动态像素。像素的移动速度取决于峰值的强度，并且像素在向外移动时会逐渐变暗。峰值的颜色是随机变化的。请注意，我们只关注底部的三个频率带（总共八个频率带），以便可视化音乐的节拍。
- en: 'Here’s the code for the main loop, with explanatory comments:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是主循环的代码，并附有解释性的注释：
- en: '[PRE0]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There’s a lot more to the code than this main loop, and most of the heavy lifting
    is performed in the `analyzeAudioSamples()` and `doVisualization()` functions.
    You certainly don’t have to understand how all of it works to enjoy the project,
    though. In the next section you will load the code onto your Arduino.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中远不止这一个主循环，许多繁重的计算工作由 `analyzeAudioSamples()` 和 `doVisualization()` 函数完成。尽管如此，你完全不需要理解它是如何工作的就能享受这个项目。在下一节中，你将把代码加载到
    Arduino 上。
- en: '**Get the Code**'
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**获取代码**'
- en: 'The full source code for the project is in the book’s resources at *[https://nostarch.com/LEDHandbook/](https://nostarch.com/LEDHandbook/)*.
    You’ll also find the library used to drive the RGB (red-green-blue) LED strip
    in the resources, which you’ll need to install into the Arduino IDE. Adafruit
    has an excellent guide on installing Arduino libraries at *[https://learn.adafruit.com/adafruit-neopixel-uberguide/arduino-library-installation](https://learn.adafruit.com/adafruit-neopixel-uberguide/arduino-library-installation)*.
    After installation, your Arduino directory for this code should have this structure:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的完整源代码可以在书籍资源中的*[https://nostarch.com/LEDHandbook/](https://nostarch.com/LEDHandbook/)*找到。你还可以在资源中找到用于驱动RGB（红绿蓝）LED灯条的库，你需要将其安装到Arduino
    IDE中。Adafruit提供了一个关于如何安装Arduino库的优秀指南，地址是*[https://learn.adafruit.com/adafruit-neopixel-uberguide/arduino-library-installation](https://learn.adafruit.com/adafruit-neopixel-uberguide/arduino-library-installation)*。安装后，你的Arduino目录应具有以下结构：
- en: '[PRE1]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now open the Arduino IDE and load the RealtimeMusicVisualizer sketch. Compile
    and upload it to your Arduino. It is usually a good idea to disconnect the Arduino
    from your new circuit before powering on the Arduino. After you’ve uploaded the
    code onto the Arduino, you can make the four wire connections to your circuit
    described earlier.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开Arduino IDE并加载RealtimeMusicVisualizer草图。编译并将其上传到你的Arduino。通常最好在给Arduino供电前，先将Arduino从新的电路中断开连接。上传代码到Arduino后，你可以按照之前描述的方式将四个线路连接到电路中。
- en: '**USE IT**'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用它**'
- en: 'Using the music visualizer is as easy as making a few connections:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用音乐可视化器就像进行几个简单的连接一样容易：
- en: Connect the audio input jack to your music source with a 3.5 mm audio cable.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用3.5毫米音频电缆将音频输入插孔连接到你的音乐源。
- en: Connect the audio output jack to your stereo receiver or some powered speakers.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将音频输出插孔连接到你的立体声接收器或一些有源扬声器。
- en: Connect your 5 V power supply to the power jack on the breadboard circuit. The
    power supply must be capable of supplying at least 2 A of current.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的5V电源连接到面包板电路上的电源插孔。电源必须能够提供至少2A的电流。
- en: Connect power to your Arduino board, either with a USB cable or other power
    adapter. Otherwise, you can provide power to the Arduino from the 5 V breadboard
    supply by connecting a wire to the 5 V pin on the Arduino.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将电源连接到你的Arduino板，可以使用USB电缆或其他电源适配器。否则，你也可以通过将一根线连接到Arduino上的5V引脚，从面包板的5V电源为Arduino供电。
- en: Now turn on the music and enjoy the show! You’ll want your music player to be
    at a fairly high volume, especially if it’s a small device like a phone or tablet.
    Computers tend to output a stronger signal. If the music is not producing much
    of a visualization, increase the sensitivity of the potentiometer on the breadboard
    by turning the knob clockwise until you can clearly see the beat of the music.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开音乐，享受表演吧！你可能希望将音乐播放器的音量调高，尤其是当设备较小，如手机或平板时。电脑通常输出更强的信号。如果音乐没有产生太多的可视化效果，可以通过顺时针旋转面包板上的电位器旋钮来增加灵敏度，直到你能清楚地看到音乐的节奏。
- en: '**TAKE IT FURTHER**'
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步操作**'
- en: 'If you’re experienced with Arduino programming, you’ll probably want to play
    with the code and make it do different things. Here are some ideas to explore:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有Arduino编程经验，可能会想对代码进行修改，让它执行不同的功能。这里有一些探索的想法：
- en: '**Change the number of LEDs.** If your LED strip has a different number of
    LEDs, you should adjust the code. For example, if you have a 3 m strip with 180
    LEDs, change the line in the file *RealtimeMusicVisualizer.ino* that defines `N_LEDS`
    to the new value:'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更改LED数量。** 如果你的LED灯条有不同数量的LED，你应该调整代码。例如，如果你有一个3米长、180个LED的灯条，请在*RealtimeMusicVisualizer.ino*文件中更改定义`N_LEDS`的那一行，将其改为新值：'
- en: '[PRE2]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Make the pixels move in one direction.** Instead of having the moving pixels
    move from the center of the strip toward both ends, you can make them start from
    one end only. Set `SINGLE_DIRECTION` to `true` in *RealtimeMusicVisualizer.ino*:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**让像素向一个方向移动。** 不再让移动的像素从灯条的中心朝两个方向移动，你可以让它们仅从一端开始。将*RealtimeMusicVisualizer.ino*中的`SINGLE_DIRECTION`设置为`true`：'
- en: '[PRE3]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Make the code respond to more frequency bands.** The code pays attention
    only to the bottom three frequency bands. By changing the value of `CUTOFF_BAND`,
    you can listen to more bands. The current value is `2` because the bottom three
    bands are numbered 0, 1, and 2\. If you wanted to respond to the bottom five bands,
    you’d change the line to this:'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使代码响应更多频率带。** 当前代码只关注底部三个频率带。通过更改`CUTOFF_BAND`的值，你可以听到更多频率带。目前的值为`2`，因为底部三个频率带编号为0、1和2。如果你想响应底部五个频率带，可以将这一行改成这样：'
- en: '[PRE4]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Change the brightness.** Is the visualizer too bright for you? Maybe you
    aren’t throwing a huge party but just adding some bling to your dorm room. You
    can turn down the brightness by reducing the value of `MAX_BRIGHTNESS`. The default
    is `255`, so try a lower value like `100`:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改变亮度。** 可视化工具太亮了吗？也许你不是在举办一场盛大的派对，而只是想为你的宿舍增添一些亮点。你可以通过减少`MAX_BRIGHTNESS`的值来调低亮度。默认值是`255`，你可以尝试设置一个较低的值，比如`100`：'
- en: '[PRE5]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Change the way the colors vary over time.** The visualizer displays pixels
    of two colors that change over time. For each of these two colors, the speed at
    which the color changes over time is controlled by the values `MIN_COLOR_CHANGE_COUNT`
    and `MAX_COLOR_CHANGE_COUNT`. When a new color is chosen, a value between these
    min and max values is set, indicating how many pixels will be that color until
    a new color is chosen. The default min and max values are `5` and `10`. If you
    want the chosen colors to appear for longer before they change, increase these
    values. If you want every pixel to be a new color, you can set both values to
    `1`:'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改变颜色随时间的变化方式。** 这个可视化工具展示了两种颜色的像素，它们随着时间变化。对于这两种颜色，每种颜色随时间变化的速度由`MIN_COLOR_CHANGE_COUNT`和`MAX_COLOR_CHANGE_COUNT`的值控制。当选择新颜色时，会在这两个最小值和最大值之间设置一个值，表示在选择新颜色之前，多少个像素将显示为当前颜色。默认的最小值和最大值是`5`和`10`。如果你希望所选颜色在改变之前显示更长时间，可以增加这些值。如果你希望每个像素都是新颜色，你可以将这两个值都设置为`1`：'
- en: '[PRE6]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Write your own visualization.** If you have an idea for a whole new visualization,
    you can modify or rewrite the function `doVisualization()`. This function draws
    the moving pixels that are defined by the `peak_t` structures in the array `peaks`.
    If you study the code for a while, you will understand how it works. This project
    is based on a more complex visualizer that has many different visualizations:
    the Lumazoid board (a nootropic design product). You can get some ideas for different
    visualizations from the Lumazoid source code at *[https://github.com/nootropicdesign/lumazoid](https://github.com/nootropicdesign/lumazoid)*.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编写你自己的可视化。** 如果你有一个全新的可视化创意，你可以修改或重写函数`doVisualization()`。这个函数绘制由数组`peaks`中的`peak_t`结构定义的移动像素。如果你仔细研究代码，你会理解它是如何工作的。这个项目基于一个更复杂的可视化工具，它有许多不同的可视化效果：Lumazoid板（一个认知设计产品）。你可以从*
    [https://github.com/nootropicdesign/lumazoid](https://github.com/nootropicdesign/lumazoid)*中的Lumazoid源代码获取不同可视化效果的灵感。'
- en: '**SUMMARY**'
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**摘要**'
- en: If you’ve built the circuit and got everything working, congratulations! You
    now have a very cool way to light up your music, and hopefully you learned some
    things along the way, too. If you read all the material in this chapter about
    how music is analyzed using digital signal processing and how to deal with audio
    signal voltages using simple electronics tricks, you already know more than most
    people about the true nature of audio signals.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经搭建好了电路并且一切正常，恭喜你！你现在有了一种非常酷的方式来为你的音乐增添光彩，希望你在这个过程中也学到了些东西。如果你已经阅读了本章所有关于如何通过数字信号处理分析音乐，以及如何使用简单的电子学技巧处理音频信号电压的内容，你已经比大多数人更了解音频信号的真实性质。
