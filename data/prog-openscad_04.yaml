- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Using Loops and Variables
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用循环和变量
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: Starting with this chapter, you’ll learn ways to use OpenSCAD to work smarter,
    not harder. First, you’ll learn to use a very useful programming tool called a
    *loop*. Loops let you draw many similar shapes with only a few lines of code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 从本章开始，你将学习如何使用OpenSCAD更加智能地工作，而不是更辛苦。首先，你将学习使用一个非常有用的编程工具——*循环*。循环让你用几行代码绘制许多相似的形状。
- en: This is particularly useful when your designs have repeated features. For instance,
    if you’re creating a model of the Empire State Building, typing one individual
    statement for each window in the building would consume a lot of time. With a
    loop, you can repeat a single window along a fixed pattern so OpenSCAD can take
    care of the tedious work of copying and pasting the same window many times. You’ll
    also learn how to use variables to keep track of important data related to your
    designs. Because these new OpenSCAD tools will allow you to create more complicated
    designs, you’ll also learn how to use comments to leave notes for yourself and
    other collaborators on your design.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这在你的设计中包含重复特征时尤其有用。例如，如果你正在创建帝国大厦的模型，为大厦的每个窗户单独编写一条语句将花费大量时间。使用循环，你可以沿着固定的模式重复一个窗户，这样OpenSCAD就能处理复制粘贴同一个窗户多次的繁琐工作。你还将学习如何使用变量来跟踪与你的设计相关的重要数据。因为这些新的OpenSCAD工具将允许你创建更复杂的设计，所以你还将学习如何使用注释来为自己和其他协作者留下设计备注。
- en: Leaving Notes with Comments
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 留下带注释的备注
- en: In this chapter, the designs are a bit more complex than in previous chapters,
    so we’ll use comments in the coding examples to explain important details in our
    designs. *Comments* provide a way for you to leave notes to yourself and others
    who might read your code. OpenSCAD ignores comment statements, as they are meant
    only as notes for the humans who read them rather than as instructions for OpenSCAD
    to draw a particular shape.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，设计比前几章稍微复杂一些，所以我们将在代码示例中使用注释来解释设计中的重要细节。*注释*为你提供了一种为自己和其他可能阅读代码的人留下备注的方式。OpenSCAD会忽略注释语句，因为它们仅作为给人类阅读的备注，而不是让OpenSCAD绘制特定形状的指令。
- en: Writing Single-Line Comments with //
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`//`编写单行注释
- en: Single-line comments start with `//` and continue until the end of the line.
    They are useful for leaving short notes so you can remember later what your thought
    process was when you were creating your OpenSCAD design.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 单行注释以`//`开始，直到行末为止。它们对于留下简短的备注非常有用，以便你日后能记住当时在创建OpenSCAD设计时的思考过程。
- en: Writing Multiline Comments with /* */
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`/* */`编写多行注释
- en: Multiline comments begin with `/*` and end with `*/`. OpenSCAD ignores everything
    inside a multiline comment. Multiline comments are useful for temporarily ignoring
    parts of your design when you want to focus on a particular element. Multiline
    comments make it easy to ignore multiple statements at once.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 多行注释以`/*`开始，以`*/`结束。OpenSCAD会忽略多行注释中的所有内容。多行注释在你想集中精力处理特定元素时非常有用，因为它可以临时忽略设计中的某些部分。多行注释使得一次性忽略多个语句变得容易。
- en: 'The following code shows single-line and multiline comments, which results
    in exactly one shape being drawn (a cuboid, [Figure 4-1](#figure4-1)), as the
    other OpenSCAD statements are enclosed in comments and ignored:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了单行注释和多行注释，结果是只绘制了一个形状（一个长方体，[图 4-1](#figure4-1)），因为其他的OpenSCAD语句被注释掉并被忽略：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![f04001](image_fi/279547c04/f04001.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![f04001](image_fi/279547c04/f04001.png)'
- en: 'Figure 4-1: A single cube among a collection of comments'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-1：在一组注释中的一个单一立方体
- en: Repeating Code with a for Loop
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`for`循环重复代码
- en: 'The main focus of this chapter is on getting OpenSCAD to take care of the tedious
    and error prone “copy-and-paste” approach to typing very similar statements in
    order to draw a collection of similar shapes. If, for example, you want to draw
    10 identical cylinders on a straight line, you could write 10 statements—one for
    each cylinder—changing only the vector parameter in the `translate` operation
    to prevent overlap, as in the following design ([Figure 4-2](#figure4-2)):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要重点是让OpenSCAD处理繁琐且容易出错的“复制粘贴”方式，避免在绘制一系列相似形状时一遍又一遍地编写类似的语句。例如，如果你想在一条直线上绘制10个相同的圆柱体，你可以写10条语句——每条语句处理一个圆柱体——只需要改变`translate`操作中的向量参数，以避免重叠，正如以下设计所示（[图
    4-2](#figure4-2)）：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![f04002](image_fi/279547c04/f04002.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![f04002](image_fi/279547c04/f04002.png)'
- en: 'Figure 4-2: A row of cylinders drawn with 10 separate statements or drawn with
    a single `for` loop'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-2：用 10 个单独语句或用单个`for`循环绘制的一排圆柱
- en: 'Notice that the only change from one cylinder to the next is the increased
    position along the x-axis: the x position of the first cylinder is 10, the x position
    of the second cylinder is 20, and so on, until the last cylinder is drawn at an
    x position of 100\.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，从一个圆柱到下一个圆柱唯一的变化是沿 x 轴增加的位置：第一个圆柱的 x 位置是 10，第二个圆柱的 x 位置是 20，依此类推，直到最后一个圆柱的
    x 位置为 100\。
- en: Instead of using 10 separate statements, you can use a single `for` loop to
    generate this collection of cylinders. You just need to write a loop that draws
    the first cylinder 10 units from the x-axis, then increases the x position by
    10 units every time a new cylinder is drawn, until drawing the last cylinder 100
    units from the axis.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用 10 个单独语句不同，你可以使用单个`for`循环来生成这一系列圆柱。你只需要编写一个循环，在 x 轴上绘制第一个圆柱 10 个单位，然后每次绘制一个新圆柱时，将
    x 位置增加 10 个单位，直到绘制最后一个圆柱，位置为 100 单位。
- en: 'The following pseudocode shows the `for` loop syntax:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下伪代码展示了`for`循环的语法：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `for` keyword indicates that you want to repeat OpenSCAD statements. Then
    you create a `variable` to keep track of the changing value after each repetition.
    The `variable` has a `start` value, an `increment` value, and an `end` value.
    Similar to grouping multiple shapes together in order to apply a single transformation,
    use curly brackets (`{ }`) to enclose all of the statements you want to repeat.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`关键字表示你希望重复执行 OpenSCAD 语句。然后你创建一个`变量`，用于在每次重复后跟踪变化的值。`变量`具有`start`值、`increment`值和`end`值。类似于将多个形状组合在一起应用单一变换，使用大括号（`{
    }`）来包含所有你想重复的语句。'
- en: 'The following example uses a single `for` loop to draw 10 cylinders instead
    of using 10 separate statements:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用单个`for`循环绘制 10 个圆柱，而不是使用 10 个单独语句：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A variable called `x_position` 1 keeps track of the position of each cylinder.
    This variable has an initial value of 10; then every time the `for` loop repeats,
    the value of `x_position` increases by 10 so that the next cylinder is drawn 10
    units farther along the x-axis. Once `x_position` is equal to 100, the last cylinder
    is drawn and the loop stops repeating. The resulting drawing will look the same
    as using 10 separate statements, as shown in [Figure 4-2](#figure4-2).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为`x_position`的变量用于跟踪每个圆柱体的位置。该变量的初始值为 10；每次`for`循环重复时，`x_position`的值增加 10，确保下一个圆柱体沿
    x 轴绘制时远离 10 个单位。一旦`x_position`等于 100，最后一个圆柱体将被绘制，循环停止。最终生成的图形与使用 10 个单独语句绘制的效果相同，如[图
    4-2](#figure4-2)所示。
- en: 'You can use loops to repeat shapes along many types of patterns. [Figure 4-3](#figure4-3)
    shows a cone repeating in a rotational pattern around the z-axis, and here’s the
    corresponding `for` loop:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用循环沿多种模式重复形状。[图 4-3](#figure4-3)展示了一个围绕 z 轴旋转的圆锥重复模式，下面是相应的`for`循环：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![f04003](image_fi/279547c04/f04003.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![f04003](image_fi/279547c04/f04003.png)'
- en: 'Figure 4-3: Ten cones, rotated around the z-axis, generated with a`for`loop'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-3：围绕 z 轴旋转的十个圆锥，使用`for`循环生成
- en: Inside the curly brackets, the loop creates a cone 3, translates it 10 units
    along the x-axis 2, and then rotates it by `angle` degrees 1. The first cone is
    drawn when the value of the `angle` variable is 0, so it is not rotated at all.
    The value of the `angle` variable increases by 45 each time the loop is repeated,
    rotating each cone accordingly. The last value of the `angle` variable is 315,
    so the last cone drawn by the loop is rotated by 315 degrees around the z-axis.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在大括号内，循环创建一个圆锥 3，沿 x 轴 2 平移 10 个单位，然后将其旋转`angle`度 1。当`angle`变量的值为 0 时，第一个圆锥被绘制，此时它没有被旋转。每次循环重复时，`angle`变量的值增加
    45，旋转每个圆锥。`angle`变量的最后一个值为 315，因此最后一个由循环绘制的圆锥围绕 z 轴旋转 315 度。
- en: Debugging for Loops with echo
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 echo 调试 for 循环
- en: 'Sometimes it’s useful to examine the value of a variable as it changes during
    the repetition of a `for` loop. For instance, if you want to double-check your
    mental math, it can be easier to see the exact values being generated by the `for`
    loop. Use the `echo` function to print each successive value of a variable to
    the console window, and check the console window ([Figure 4-4](#figure4-4)) to
    gather feedback about the execution of your OpenSCAD code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，检查变量在 `for` 循环重复过程中的变化值是有用的。例如，如果你想检查你的心算是否正确，看到 `for` 循环生成的精确值会更容易。使用 `echo`
    函数将变量的每个连续值打印到控制台窗口，并检查控制台窗口（[图 4-4](#figure4-4)）来获取关于 OpenSCAD 代码执行的反馈：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![f04004](image_fi/279547c04/f04004.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![f04004](image_fi/279547c04/f04004.png)'
- en: 'Figure 4-4: Console output generated with `echo`'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-4：通过 `echo` 生成的控制台输出
- en: The `echo` function is helpful for debugging your programs. For example, you
    can use it to visualize all the values of a variable that controls the number
    of times a `for` loop repeats. The `echo` function provides a useful way to gather
    feedback about your `for` loops, because it will print out every value generated
    by the `for` loop. Adding string labels (like `"x:"`) to your console statements
    can help organize the console window output. Labels and variables in `echo` functions
    should be separated with commas (`,`).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo` 函数对于调试程序非常有用。例如，你可以用它来可视化控制 `for` 循环重复次数的变量的所有值。`echo` 函数为你提供了一种有效的方式来收集关于
    `for` 循环的反馈，因为它会打印出 `for` 循环生成的每个值。在控制台语句中添加字符串标签（如 `"x:"`）可以帮助整理控制台窗口的输出。在 `echo`
    函数中的标签和变量应该用逗号（`,`）分隔。'
- en: Using Variables and Arithmetic
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用变量和算术运算
- en: Variables are used in conjunction with `for` loops to keep track of a pattern
    created by the looping. You can either use the generated values directly, or you
    can perform arithmetic on them to produce more sophisticated repetitions.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 变量与 `for` 循环一起使用，用来跟踪循环所创建的模式。你可以直接使用生成的值，或者对其进行算术运算，以产生更复杂的重复模式。
- en: In this section, you’ll learn variable naming best practices, mathematical operations
    to perform on variables, and applications of variables within loops.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将学习变量命名的最佳实践、对变量执行的数学运算，以及变量在循环中的应用。
- en: Naming Variables
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命名变量
- en: Neither the `x_position` variable from the preceding `for` loop example nor
    the `angle` variable from [Figure 4-3](#figure4-3) is built into OpenSCAD. Those
    names were chosen to describe how the values are used in the design. The `x_position`
    variable describes the x-position of the cylinder, while `angle` describes the
    angle of rotation of the cone.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 前面 `for` 循环示例中的 `x_position` 变量和 [图 4-3](#figure4-3) 中的 `angle` 变量并不是 OpenSCAD
    内建的。这些名称是为了描述这些值在设计中的用途而选择的。`x_position` 变量描述的是圆柱体的 x 位置，而 `angle` 描述的是圆锥体的旋转角度。
- en: OpenSCAD allows you to name your variables however you want, as long as you
    don’t include spaces or use any symbols other than letters, underscores, or numbers.
    Be sure to select a name that helps you remember a variable’s purpose. This allows
    you to keep track of multiple variables in a design more easily, which can help
    tremendously when debugging errors or sharing your design.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSCAD 允许你根据自己的需求命名变量，只要不包含空格或使用字母、下划线、数字以外的符号。务必选择一个有助于你记住变量用途的名称。这可以帮助你更轻松地跟踪设计中的多个变量，对于调试错误或共享设计时尤为重要。
- en: Applying Mathematical Operations on Variables
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对变量应用数学运算
- en: 'To start exploring how OpenSCAD applies mathematical operations on variables,
    say you assign the values 10 and 3 to the following variables:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始探索 OpenSCAD 如何对变量应用数学运算，假设你将值 10 和 3 赋给以下变量：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To perform mathematical operations like finding the sum, difference, product,
    quotient, or remainder of these values, OpenSCAD lets you use standard symbols.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行像求和、差、积、商或余数这样的数学运算，OpenSCAD 允许你使用标准符号。
- en: 'OpenSCAD also respects the conventional order of operations that you are probably
    familiar with from math class. Assigning the result of each of these arithmetic
    operations to a variable will help you separate your calculation statements from
    your output statements:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSCAD 同样遵循你可能在数学课上熟悉的常规运算顺序。将每个算术运算的结果赋值给一个变量，能帮助你将计算语句与输出语句分开：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, use the `echo` function to display the result of each mathematical operation
    ([Figure 4-5](#figure4-5)). Each `echo` function uses a label to help identify
    which number is which in the console window.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用`echo`函数显示每个数学运算的结果（[图 4-5](#figure4-5)）。每个`echo`函数使用标签来帮助识别控制台窗口中每个数字对应的内容。
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![f04005](image_fi/279547c04/f04005.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![f04005](image_fi/279547c04/f04005.png)'
- en: 'Figure 4-5: Console output of the five arithmetic operators'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-5：五种算术运算符的控制台输出
- en: Using Math and Variables Inside for Loops
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在`for`循环中使用数学运算和变量
- en: 'You can use arithmetic inside a `for` loop to make a single variable represent
    two patterns. The following design creates 13 spheres that are all generated by
    the same `for` loop ([Figure 4-6](#figure4-6)):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`for`循环中使用算术运算，使一个变量表示两个不同的模式。以下设计通过同一个`for`循环生成了13个球体（[图 4-6](#figure4-6)）：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![f04006](image_fi/279547c04/f04006.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![f04006](image_fi/279547c04/f04006.png)'
- en: 'Figure 4-6: A succession of increasingly smoother spheres'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-6：一系列逐渐变得更加平滑的球体
- en: Notice how the `faces` variable created by the `for` loop specifies both the
    number of faces used to render the sphere 2 and the position of the sphere along
    the x-axis 3. With each repetition of the `for` loop, the value of `faces` increases
    by one 1, while the value of  `x_position` is updated by multiplying the new value
    of the `faces` variable by 10\. The `echo` function 4 displays the changing values
    of `faces` and `x_position`. [Figure 4-7](#figure4-7) shows the console output.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由`for`循环创建的`faces`变量同时指定了渲染球体所用的面数2和球体沿x轴的位置3。在每次重复`for`循环时，`faces`的值增加1，而`x_position`的值通过将`faces`的新值乘以10来更新。`echo`函数4显示了`faces`和`x_position`的变化值。[图
    4-7](#figure4-7)展示了控制台输出。
- en: '![f04007](image_fi/279547c04/f04007.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![f04007](image_fi/279547c04/f04007.png)'
- en: 'Figure 4-7: The console output of a succession of increasingly smoother spheres'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-7：一系列逐渐变得更加平滑的球体的控制台输出
- en: Using Arithmetic to Create Unique Patterns
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用算术运算创造独特的图案
- en: 'In addition to using arithmetic to leverage the power of a `for` loop to progressively
    change characteristics of a shape, you can also use arithmetic to create interesting
    patterns. The following code generates a sequence of cylinders of increasing heights
    by using a quadratic pattern to increase the height of each cylinder ([Figure
    4-8](#figure4-8)):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 除了利用算术运算发挥`for`循环的作用，逐步改变形状的特征外，你还可以使用算术运算来创造有趣的图案。以下代码通过使用二次模式来增加每个圆柱体的高度，从而生成一系列高度逐渐增加的圆柱体（[图
    4-8](#figure4-8)）：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding design uses a `for` loop to increase one variable, called `x`
    1, from 1 to 10 2. The `x` variable increases by one each time the loop repeats,
    so this loop repeats 10 times. This variable controls both the position along
    the x-axis and height of a series of cylinders. By creatively using arithmetic,
    you change the x position of the cylinder by 5 4 every time the loop repeats.
    The height of the cylinder grows at a different rate, by squaring the value of
    `x` every time the loop repeats 3; this is known as *quadratic growth*.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 上述设计使用了一个`for`循环将一个变量`x`从1增加到10。`x`变量在每次循环时增加1，因此该循环会执行10次。该变量同时控制一系列圆柱体的x轴位置和高度。通过创造性地使用算术运算，每次循环时你都会将圆柱体的x位置增加5。圆柱体的高度以不同的速率增长，每次循环时通过平方`x`的值来增加，这被称为*二次增长*。
- en: '![f04008](image_fi/279547c04/f04008.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![f04008](image_fi/279547c04/f04008.png)'
- en: 'Figure 4-8: A succession of cylinders following a quadratic pattern to increase
    height'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-8：一系列按二次模式增加高度的圆柱体
- en: Using Nested Loops to Draw 2D and 3D Grids
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用嵌套循环绘制二维和三维网格
- en: 'OpenSCAD even lets you repeat a loop, so you can put a `for` loop inside another
    `for` loop. Whereas you can use one `for` loop to create a line of shapes, you
    can use a `for` loop inside another `for` loop to repeat that line of shapes to
    create a grid of shapes with only a few lines of code. This is called *nesting*
    the loops. The following design uses nested `for` loops to draw a grid of cylinders
    ([Figure 4-9](#figure4-9)):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSCAD甚至允许你重复一个循环，你可以在一个`for`循环内放入另一个`for`循环。你可以使用一个`for`循环来创建一排形状，而在另一个`for`循环内使用`for`循环，可以重复这排形状，从而创建一个形状网格，只需几行代码。这被称为*嵌套*循环。以下设计使用了嵌套的`for`循环来绘制一个圆柱体网格（[图
    4-9](#figure4-9)）：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding code uses one loop to draw a line of 10 cylinders 2. That `for`
    loop is repeated by the first `for` loop 1, so the line of cylinders repeats.
    Two variables—that is, the `x_pos` and `y_pos` variables—work together to change
    both the x position and y position of the repeated cylinder. The inner loop repeats
    10 times, while the outer loop repeats 5 times. This generates a total of 50 cylinders.
    The `echo` function is used to keep track of the changing values of both variables
    in the console window 3. Notice that comments are used to indicate which bracket
    belongs to which loop. Commenting brackets isn’t necessary but can be helpful
    when you have many curly brackets next to each other.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码使用一个循环绘制了一排10个圆柱体2。这个`for`循环由第一个`for`循环1重复，因此圆柱体的排布会重复。两个变量——即`x_pos`和`y_pos`变量——协同工作，改变重复圆柱体的x和y位置。内层循环重复10次，而外层循环重复5次。这样总共会生成50个圆柱体。`echo`函数用于在控制台窗口3中跟踪这两个变量的值变化。注意，注释用于指示哪些括号属于哪个循环。虽然注释括号并非必要，但当你有许多相邻的花括号时，这样做会很有帮助。
- en: '![f04009](image_fi/279547c04/f04009.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![f04009](image_fi/279547c04/f04009.png)'
- en: 'Figure 4-9: A grid of cylinders drawn with nested `for` loops'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-9：使用嵌套`for`循环绘制的圆柱体网格
- en: You now know how to generate 50 cylinders with four lines of code, which certainly
    beats writing a long list of 50 statements to generate each cylinder individually.
    This would be the perfect technique for drawing the many windows in a skyscraper.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你知道了如何用四行代码生成50个圆柱体，这无疑比写一长串50个语句来单独生成每个圆柱体要高效得多。这正是绘制摩天大楼中众多窗户的完美技巧。
- en: Generating the Windows in a Skyscraper with Nested Loops
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用嵌套循环生成摩天大楼的窗户
- en: '[Listing 4-1](#listing4-1) draws a building with 60 windows ([Figure 4-10](#figure4-10))
    by using nested `for` loops:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表4-1](#listing4-1)使用嵌套`for`循环绘制了一个有60个窗户的建筑（[图4-10](#figure4-10)）：'
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Listing 4-1: Drawing a skyscraper with 60 windows by using nested `for` loops'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 列表4-1：使用嵌套`for`循环绘制一个有60个窗户的摩天大楼
- en: '![f04010](image_fi/279547c04/f04010.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![f04010](image_fi/279547c04/f04010.png)'
- en: 'Figure 4-10: A window grid on a skyscraper'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-10：摩天大楼上的窗户网格
- en: '[Listing 4-1](#listing4-1) uses variables (named `num_rows` and `num_cols`)
    to control not only the number of windows, but also the width and height of the
    building. First, it draws a large cuboid to represent the building 2. Next, it
    uses nested `for` loops to draw a grid of 60 cuboids 3. Finally, the `difference`
    operation subtracts the cuboids from the larger building to create recessed windows
    1. Two variables (`x_pos` and `z_pos`) are used to calculate the specific x position
    and z position of each window prior to drawing the cuboid 4.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表4-1](#listing4-1)使用变量（命名为`num_rows`和`num_cols`）来控制不仅仅是窗户的数量，还包括建筑物的宽度和高度。首先，它绘制了一个大的长方体来表示建筑物2。接着，它使用嵌套`for`循环绘制了一个60个长方体的网格3。最后，`difference`操作从较大的建筑物中减去这些长方体，形成凹陷的窗户1。两个变量（`x_pos`和`z_pos`）用于在绘制长方体4之前计算每个窗户的具体x位置和z位置。'
- en: Our organization of the code in [Listing 4-1](#listing4-1) makes it easy to
    change the skyscraper’s characteristics. The variables `num_rows` and `num_cols`
    not only control the number of times the two loops repeat, but also set the width
    and height of the building, because the values of the `building_width`  and `building_height`
    variables are dependent on the values of `num_rows` and `num_cols.` Making one
    change to either `num_rows` or `num_cols` will completely change the skyscraper’s
    look. You’ll learn more about the advantages of this sort of organization in the
    next chapter.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[列表4-1](#listing4-1)中的代码组织使得修改摩天大楼的特性变得容易。`num_rows`和`num_cols`变量不仅控制了两个循环的重复次数，还设置了建筑物的宽度和高度，因为`building_width`和`building_height`变量的值依赖于`num_rows`和`num_cols`的值。对`num_rows`或`num_cols`做出任何更改都会完全改变摩天大楼的外观。你将在下一章学到更多关于这种代码组织的优势。
- en: Triple Nesting to Create a 3D Grid of Shapes
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 三重嵌套以创建3D形状网格
- en: 'You can also draw a 3D grid of shapes by adding another layer of nesting—that
    is, by putting a loop inside a loop, inside a loop—although this might take a
    while to render since it will generate a large number of shapes ([Figure 4-11](#figure4-11)):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过添加更多的嵌套层来绘制3D形状网格——也就是说，将一个循环放在另一个循环里，再放进另一个循环——尽管这可能需要一些时间来渲染，因为它会生成大量的形状（[图4-11](#figure4-11)）：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![f04011](image_fi/279547c04/f04011.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![f04011](image_fi/279547c04/f04011.png)'
- en: 'Figure 4-11: A nested `for` loop representing the RGB color space'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-11：表示RGB颜色空间的嵌套`for`循环
- en: This *triple nesting* essentially uses a third loop to repeat a grid of shapes.
    The preceding design uses three nested loops to draw a cube representing the RGB
    (red, green, blue) color space. The `color` transformation takes a 3D vector indicating
    the percentage of red, green, and blue light that should be represented in the
    color of the shape. Since RGB uses 255 as the maximum value, dividing by 255 results
    in a decimal between 0 and 1\. The `color` transformation can be useful for debugging
    and organizing your designs, but it is not very useful for 3D printing, since
    the color of a 3D print depends entirely on the type of filament used. Thus, the
    `color` transformation is effective only in Preview mode and will not display
    in Render mode.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 *三重嵌套* 实际上使用第三个循环来重复形状的网格。前面的设计使用了三个嵌套循环来绘制一个表示 RGB（红色、绿色、蓝色）色彩空间的立方体。`color`
    转换接受一个 3D 向量，表示应该在形状的颜色中展示的红色、绿色和蓝色光的百分比。由于 RGB 使用 255 作为最大值，除以 255 得到一个 0 到 1
    之间的小数。`color` 转换对于调试和组织设计很有用，但对于 3D 打印来说作用不大，因为 3D 打印的颜色完全取决于所使用的材料类型。因此，`color`
    转换只在预览模式下有效，在渲染模式下不会显示。
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter introduced the concept of looping, which lets you repeat statements
    without rewriting the same code. Looping lets you tell the computer to do all
    of the work of rewriting a statement over and over again. Variables are an important
    part of looping in OpenSCAD, although they are not exclusive to looping. Variables
    can also help you keep track of important values. Through the use of arithmetic
    operators, variables can act as important starting points for other variables,
    which is useful when you want to make changes to your design.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了循环的概念，循环允许你在不重复编写相同代码的情况下重复执行语句。通过循环，你可以让计算机代替你重复编写语句的所有工作。变量是 OpenSCAD
    中循环的重要组成部分，尽管它们并不局限于循环。变量还可以帮助你跟踪重要的值。通过算术运算符，变量可以作为其他变量的起始点，这在你想改变设计时非常有用。
- en: 'The following are some important tips for using loops:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用循环的一些重要提示：
- en: If you find yourself copying, pasting, and making minor changes to a repeating
    statement, consider generating the repetition with a loop.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你发现自己在复制、粘贴并稍作修改以重复某个语句，考虑使用循环来生成这些重复操作。
- en: Use arithmetic to create sophisticated repetitions based on the pattern created
    by a loop.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用算术运算基于循环创建的模式进行复杂的重复操作。
- en: Give variables names that describe their purpose.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给变量起一个能描述其用途的名字。
- en: Organizing all of your variables at the top of your program makes it easy to
    change your design.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有变量组织在程序顶部可以让你更容易地修改设计。
- en: Use the `echo` function to output the value of a variable as a loop repeats.
    This can help you keep track of variables that are the result of complicated arithmetic.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `echo` 函数输出变量的值，随着循环的重复，这可以帮助你跟踪通过复杂算术得到的变量。
- en: Label all `echo` function output so you can output several variables when you
    have nested loops.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给所有 `echo` 函数的输出加上标签，这样在有嵌套循环时，你可以输出多个变量。
- en: If you want to use variable values generated by a `for` loop in a `text` shape,
    remember to convert the number to a string with `str` (as mentioned in Chapter
    3).
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想在 `text` 形状中使用由 `for` 循环生成的变量值，记得使用 `str` 将数字转换为字符串（如第 3 章所提到的）。
- en: The `color` transformation is useful for debugging in Preview mode, but it does
    not translate to Render mode or 3D printing.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color` 转换对于在预览模式下调试非常有用，但它不会应用于渲染模式或 3D 打印。'
- en: Comments are notes programmers leave to help explain their coding choices.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释是程序员用来帮助解释编程选择的注解。
- en: OpenSCAD ignores comments, but humans use comments to help figure out what coding
    statements are trying to accomplish.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenSCAD 会忽略注释，但人类使用注释来帮助理解代码语句的目的。
