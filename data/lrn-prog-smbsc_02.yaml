- en: '**2**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2**'
- en: '**GETTING STARTED**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**入门**'
- en: '![image](graphics/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/common01.jpg)'
- en: 'Now we’ll walk through some code step-by-step, so you can learn about the important
    pieces. As you read, enter the examples, and we’ll explain how to run them and
    modify them. But don’t stop there: experiment to give your programs a personal
    touch. We’ve included exercises at the end of each section to help you become
    a programming master (like a Jedi, but without the dangerous lightsabers). Try
    out the exercises to hone your skills.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将逐步讲解一些代码，让你了解重要的组成部分。在阅读时，输入这些示例，我们将解释如何运行它们并进行修改。但不要止步于此：通过实验为你的程序增添个人特色。我们在每一节的末尾都附有练习，帮助你成为编程大师（像绝地武士一样，但没有危险的光剑）。尝试完成这些练习来磨练你的技能。
- en: '**The Parts of a Program**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**程序的组成部分**'
- en: Let’s explore the different parts of a program by looking at a simple example.
    [Listing 2-1](ch02.html#ch2ex1) shows a program similar to the *Greetings.sb*
    program you wrote in [Chapter 1](ch01.html#ch01). Enter this program into the
    Small Basic Editor, and then click the **Run** button on the Toolbar (or press
    F5 on your keyboard) to run it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过查看一个简单的示例来探索程序的不同部分。[清单 2-1](ch02.html#ch2ex1)展示了一个与[第1章](ch01.html#ch01)中你编写的*Greetings.sb*程序类似的程序。将这个程序输入到
    Small Basic 编辑器中，然后点击工具栏上的**运行**按钮（或者按键盘上的 F5 键）来运行它。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 2-1: Writing a welcome message*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 2-1：编写欢迎信息*'
- en: These two lines are the *source code* of your *Welcome.sb* program. When you
    run this code, you’ll see an output window that looks like [Figure 2-1](ch02.html#ch2fig1).
    (Note that the window’s title shows where we saved the file, so yours could be
    different.)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这两行是你*Welcome.sb*程序的*源代码*。当你运行这段代码时，你将看到一个输出窗口，类似于[图 2-1](ch02.html#ch2fig1)所示。（注意，窗口的标题显示了我们保存文件的位置，因此你的可能会不同。）
- en: '![image](graphics/f02-01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-01.jpg)'
- en: '*Figure 2-1: The output window for* Welcome.sb'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-1：Welcome.sb的输出窗口*'
- en: '**NOTE**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Your console window will look slightly different from this one, since the
    window has a black background by default. For the rest of the book, we’ll show
    the output as text, except when it’s necessary to see the window.*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*你的控制台窗口看起来会与这个略有不同，因为窗口默认有黑色背景。在本书的其余部分，我们将以文本形式展示输出，除非必须查看窗口时。*'
- en: Small Basic automatically adds the text `Press any key to continue...` to the
    window to give you a chance to view the output (there isn’t an *any* key on your
    keyboard, so don’t look for it). Otherwise, the screen would flash your output
    and disappear.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Small Basic 会自动将文本 `Press any key to continue...` 添加到窗口中，让你有机会查看输出结果（键盘上并没有一个*任意*键，所以不要寻找它）。否则，屏幕会闪烁显示输出，然后消失。
- en: '***Comments and Statements***'
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***注释和语句***'
- en: The line that starts with a single quote (`'`) is called a *comment*. You can
    add comments to explain what your program does, and Small Basic just ignores them.
    The comment on line 1 is the name of the file that contains your source code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以单引号（`'`）开头的行被称为*注释*。你可以添加注释来解释程序的功能，而 Small Basic 会忽略它们。第1行的注释是包含你源代码的文件名。
- en: '**NOTE**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*You should get into the habit of commenting your code, because you’ll often
    head to the forums or to friends for help, and they’ll need to understand what
    your code is trying to do.*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*你应该养成注释代码的习惯，因为你会经常到论坛或向朋友寻求帮助，他们需要理解你的代码在做什么。*'
- en: The Small Basic Editor shows all comments in green so you can easily tell them
    apart from lines of actual code, which are called *statements*. Comments make
    programs easier to read, and you can add them anywhere! But be careful not to
    use too many comments, or you might make your code even harder to read! It’s a
    good practice to write comments at the beginning of your code to describe your
    program or to explain any tricky parts.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Small Basic 编辑器将所有注释显示为绿色，这样你可以轻松地区分它们与实际代码行，后者称为*语句*。注释使程序更容易阅读，你可以在任何地方添加它们！但要小心，不要使用过多的注释，否则可能会让代码更难以阅读！在代码开头写注释来描述程序或解释任何难懂的部分是一个好习惯。
- en: 'If you add a blank line that separates the comments from the code, Small Basic
    also ignores it, so add as many empty lines as you need to make your program easier
    to read! Line 2 in *Welcome.sb* is your program’s first statement, and that’s
    where the program begins executing. (Don’t worry: nobody dies!)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你添加一个空行来分隔注释和代码，Small Basic 也会忽略它，所以你可以根据需要添加任意数量的空行，以便让程序更易读！*Welcome.sb*中的第2行是你程序的第一条语句，程序就是从这里开始执行的。（别担心：没有人会死！）
- en: '[Figure 2-2](ch02.html#ch2fig2) shows the parts of our statement. Let’s break
    it down and see what each part does!'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2-2](ch02.html#ch2fig2) 展示了我们语句的各个部分。让我们逐一分析，看看每部分的作用！'
- en: '![image](graphics/f02-02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-02.jpg)'
- en: '*Figure 2-2: The statement in* Welcome.sb'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-2：Welcome.sb中的语句*'
- en: '`TextWindow` is an object built into Small Basic that takes text input and
    sends text output to your screen. `WriteLine()` is a method of the `TextWindow`
    object. This method displays the data passed to it in the output window. When
    you use `TextWindow.WriteLine()`, you tell the `TextWindow` object to execute
    its `WriteLine()` method. This is known as *dot notation* because of the dot between
    the object and the method. Dot notation is used to access an object’s method and
    follows this format: `ObjectName.MethodName(Arguments)`. In this example, `"Welcome
    to Small Basic."` is an argument to the `WriteLine()` method. It tells the method
    exactly what you want to write.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`TextWindow` 是Small Basic内置的一个对象，用于接收文本输入并将文本输出到屏幕上。`WriteLine()` 是 `TextWindow`
    对象的方法。该方法将传递给它的数据显示在输出窗口中。当你使用 `TextWindow.WriteLine()` 时，你是告诉 `TextWindow` 对象执行它的
    `WriteLine()` 方法。这被称为*点符号表示法*，因为对象和方法之间有一个点。点符号表示法用于访问对象的方法，格式如下：`ObjectName.MethodName(Arguments)`。在这个示例中，`"Welcome
    to Small Basic."` 是 `WriteLine()` 方法的一个参数。它明确告诉方法你想要写的内容。'
- en: '***Characters and Strings***'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***字符和字符串***'
- en: Letters, numbers, punctuation marks (dot, colon, semicolon, and so on), and
    other symbols are called *characters*. A sequence of these characters surrounded
    by double quotes is called a *string*. The quotation marks show where the string
    starts and ends.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 字母、数字、标点符号（如句号、冒号、分号等）以及其他符号统称为*字符*。这些字符组成的序列，如果被双引号包围，就叫做*字符串*。引号显示了字符串的开始和结束位置。
- en: In our *Welcome.sb* program, the text that reads `"Welcome to Small Basic."`
    is a string.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的*Welcome.sb*程序中，显示的文本 `"Welcome to Small Basic."` 是一个字符串。
- en: '***Arguments and Methods***'
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***参数和方法***'
- en: You pass *arguments* to a method inside its parentheses. An argument can be
    a string, a number, or some other value. The `WriteLine()` method accepts only
    one argument, and in your *Welcome.sb* program you pass it the string `"Welcome
    to Small Basic."` as its argument.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过方法的圆括号内传递*参数*。参数可以是一个字符串、一个数字或其他值。`WriteLine()`方法只接受一个参数，在你的*Welcome.sb*程序中，你将字符串
    `"Welcome to Small Basic."` 作为它的参数传递。
- en: Click the `WriteLine()` method in the Editor, and check Small Basic’s Help Area
    ([Figure 2-3](ch02.html#ch2fig3)). It’ll show you what kind of data to pass to
    that method.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 点击编辑器中的 `WriteLine()` 方法，然后查看Small Basic的帮助区域（[图 2-3](ch02.html#ch2fig3)）。它会告诉你应该传递什么类型的数据给该方法。
- en: '![image](graphics/f02-03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-03.jpg)'
- en: '*Figure 2-3: The Help Area information for the* `WriteLine()` *method*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-3：`WriteLine()` 方法的帮助区域信息*'
- en: The Help Area is your friend! Read it to avoid needless mistakes and frustration.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助区域是你的好帮手！阅读它可以避免不必要的错误和困惑。
- en: '**TRY IT OUT 2-1**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**试试看 2-1**'
- en: 'Point out the object, method, and arguments in these calls:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请指出以下调用中的对象、方法和参数：
- en: '`Shapes`.AddRectangle(100, 50)'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Shapes`.AddRectangle(100, 50)'
- en: '`Math`.Max(5, 10)'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Math`.Max(5, 10)'
- en: '`Sound`.PlayBellRing()'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Sound`.PlayBellRing()'
- en: '**Exploring Other Features**'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**探索其他特性**'
- en: In this section, you’ll explore other key features of Small Basic by making
    small changes to the *Welcome.sb* program. Each example highlights a different
    feature, so let’s jump right in! Small Basic is warm and inviting!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将通过对*Welcome.sb*程序进行一些小改动，探索Small Basic的其他关键特性。每个示例都突出展示了一个不同的特性，快来一起试试看吧！Small
    Basic是友好且易于上手的！
- en: '***Case Sensitivity***'
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***大小写敏感***'
- en: 'You originally entered `TextWindow.WriteLine("Welcome to Small Basic.")`, but
    Small Basic wouldn’t care if you changed the case of any letter in `TextWindow`
    or `WriteLine`. For example, you could write: `TextWindow.writeLINE("Welcome to
    Small Basic.")`. This gives you the same output as before because Small Basic
    is *case insensitive*, which means that it doesn’t matter if your code is written
    in uppercase or lowercase letters.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你最初输入的是 `TextWindow.WriteLine("Welcome to Small Basic.")`，但如果你更改了`TextWindow`或`WriteLine`中的字母大小写，Small
    Basic也不会在意。例如，你可以写成：`TextWindow.writeLINE("Welcome to Small Basic.")`。这将得到与之前相同的输出，因为Small
    Basic是*不区分大小写*的，这意味着你的代码是写成大写字母还是小写字母都不重要。
- en: Identifiers like `Writeline`, `writeline`, and `WRiTeLiNe` are all interpreted
    the same way by the *compiler*, which reads each line of code and builds the application.
    But you should get into the habit of respecting the case of identifiers because
    other languages are *case sensitive*. Small Basic is like a friendly coach who
    won’t yell at you for improper capitalization. It’ll even fix your typing mistakes
    for you, thanks to IntelliSense’s autocorrect function.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 像`Writeline`、`writeline`和`WRiTeLiNe`这样的标识符在*编译器*中会被相同地解释，编译器会读取每一行代码并构建应用程序。但是，你应该养成尊重标识符大小写的习惯，因为其他语言是*区分大小写*的。Small
    Basic就像一个友好的教练，不会因为大小写不当而对你大喊大叫。得益于IntelliSense的自动纠正功能，它甚至会帮你修正打字错误。
- en: 'But what happens if you change the string? Try entering the welcome message
    in all capital letters:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你改变字符串会发生什么呢？试试将欢迎信息输入为全大写字母：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When you run this program, `WELCOME TO SMALL BASIC.` is displayed in all capital
    letters in the output window. Why? The reason is that Small Basic’s `WriteLine()`
    method displays anything between the quotes exactly as you wrote it!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个程序时，`WELCOME TO SMALL BASIC.`将在输出窗口以全大写字母显示。为什么？原因是Small Basic的`WriteLine()`方法会准确地显示双引号之间的内容，正如你输入的那样！
- en: '***Sequential Execution***'
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***顺序执行***'
- en: '[Listing 2-1](ch02.html#ch2ex1) displays only one line of text, but you could
    display as many lines as you want. Let’s follow [Listing 2-2](ch02.html#ch2ex2)
    to extend the program to display three lines!'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 2-1](ch02.html#ch2ex1)只显示一行文本，但你可以显示任意多的行。让我们按照[示例 2-2](ch02.html#ch2ex2)扩展程序，显示三行内容！'
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 2-2: Displaying more lines*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 2-2：显示更多行*'
- en: 'When you run this program, you’ll see this output:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个程序时，你将看到以下输出：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Your program’s output shows that each line is executed in the order it’s listed
    in the program, from top to bottom. Do you see that empty line in the output?
    That was made by the statement in line 3 where you gave `WriteLine()` a pair of
    double quotes with no characters inside them. Because `""` contains no characters,
    it’s called an *empty string*. Empty strings are useful when you want to display
    empty lines to break up the program’s output and make it easier to read.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你的程序输出显示了每一行代码按程序中列出的顺序从上到下执行。你看到输出中的空行了吗？那是第3行的语句创建的，那里你给`WriteLine()`传递了一个没有字符的双引号。因为`""`不包含任何字符，它被称为*空字符串*。空字符串在你想显示空行来分隔程序输出并使其更易读时非常有用。
- en: '***Displaying Numbers and Doing Math***'
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***显示数字并进行数学运算***'
- en: You can also use `WriteLine()` to display numbers. Try out [Listing 2-3](ch02.html#ch2ex3).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`WriteLine()`来显示数字。试试[示例 2-3](ch02.html#ch2ex3)。
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 2-3: Showing the difference between strings and numbers*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 2-3：显示字符串和数字的区别*'
- en: 'Here’s the output of this program:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是该程序的输出：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When you pass anything to `WriteLine()` in double quotes, the output window
    shows exactly what’s inside the quotes. So, when you pass `"5 + 7"` to `WriteLine()`
    in line 2, Small Basic treats the plus sign inside the string like any other character
    and doesn’t see it as an addition problem!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将任何内容传递给`WriteLine()`并用双引号括起来时，输出窗口会显示双引号内的内容。因此，当你在第2行将`"5 + 7"`传递给`WriteLine()`时，Small
    Basic会将字符串中的加号当作普通字符处理，而不会把它看作加法运算！
- en: The `WriteLine()` command on line 3, however, is different. You passed `5 +
    7` to `WriteLine()` *without* double quotes. In this case, Small Basic understands
    that these are numbers, not parts of a string. Behind the scenes it adds 5 to
    7 to get 12 and passes the sum to `WriteLine()`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，第3行的`WriteLine()`命令不同。你传递给`WriteLine()`的是`5 + 7`，*没有*用双引号括起来。在这种情况下，Small
    Basic明白这些是数字，而不是字符串的一部分。它在幕后将5和7相加得到12，并将和传递给`WriteLine()`。
- en: '***Joining Strings***'
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***连接字符串***'
- en: You can also add strings together to build sentences or add to phrases, as shown
    in [Listing 2-4](ch02.html#ch2ex4). Combining strings is called *concatenation*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将字符串连接在一起，构建句子或添加短语，正如在[示例 2-4](ch02.html#ch2ex4)中所示。将字符串合并称为*拼接*。
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 2-4: Explaining concatenation*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 2-4：解释拼接*'
- en: 'In line 2 of [Listing 2-4](ch02.html#ch2ex4), the `WriteLine()` method takes
    two strings, `"Hello,"` and `" oblate spheroid!"`, with a plus sign (`+`) between
    them. In this case, because you’re not performing addition, the plus sign has
    a different meaning: it’s called a *concatenation operator*, which joins two strings
    together into a single string. Notice the extra space in `" oblate spheroid!"`.
    It makes your message display with a space between the words.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [清单 2-4](ch02.html#ch2ex4) 的第 2 行中，`WriteLine()` 方法接收两个字符串，`"Hello,"` 和 `"
    oblate spheroid!"`，它们之间用加号（`+`）连接。在这种情况下，由于你没有执行加法操作，加号的意义不同：它被称为 *连接运算符*，它将两个字符串连接成一个字符串。注意
    `" oblate spheroid!"` 中的额外空格。它使得你的消息在单词之间显示空格。
- en: The plus sign (`+`) glues `"Hello,"` onto `" oblate spheroid!"` and creates
    the new string `"Hello, oblate spheroid!"`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 加号（`+`）将 `"Hello,"` 拼接到 `" oblate spheroid!"` 上，生成新的字符串 `"Hello, oblate spheroid!"`。
- en: You can also join strings and numbers together. Small Basic automatically converts
    any number to a string so that concatenation can do its thing! Take a look at
    [Listing 2-5](ch02.html#ch2ex5) and its output in [Figure 2-4](ch02.html#ch2fig4).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将字符串和数字连接在一起。Small Basic 会自动将任何数字转换为字符串，以便进行连接操作！查看 [清单 2-5](ch02.html#ch2ex5)
    及其在 [图 2-4](ch02.html#ch2fig4) 中的输出。
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 2-5: Adding a number to text*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 2-5：将数字添加到文本中*'
- en: 'The `WriteLine()` method needs a string as an argument. To create that string,
    Small Basic turns the entire argument into a string, as shown in [Figure 2-4](ch02.html#ch2fig4).
    It converts the number 12 to a string (`"12"`) and then glues it to `"Let''s concatenate:
    5 + 7 = "` to make a new string: `"Let''s concatenate: 5 + 7 = 12"`.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`WriteLine()` 方法需要一个字符串作为参数。为了创建该字符串，Small Basic 会将整个参数转换为字符串，如 [图 2-4](ch02.html#ch2fig4)
    所示。它将数字 12 转换为字符串（`"12"`），然后将其与 `"Let''s concatenate: 5 + 7 = "` 拼接在一起，生成一个新的字符串：`"Let''s
    concatenate: 5 + 7 = 12"`。'
- en: '![image](graphics/f02-04.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-04.jpg)'
- en: '*Figure 2-4: Using the plus sign to join a string and a number*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-4：使用加号连接字符串和数字*'
- en: '**TRY IT OUT 2-2**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试 2-2**'
- en: Write a program to display [Figure 2-5](ch02.html#ch2fig5).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 编写程序以显示 [图 2-5](ch02.html#ch2fig5)。
- en: '![image](graphics/f02-05.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-05.jpg)'
- en: '*Figure 2-5: Making a face*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-5：制作一个面孔*'
- en: '**Object Properties**'
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**对象属性**'
- en: Small Basic objects can have *properties* (or attributes) that you can change.
    If you change these properties, the object’s methods may give you different outcomes
    when you call them.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Small Basic 对象可以具有 *属性*（或特性），你可以更改这些属性。如果更改这些属性，调用对象方法时可能会得到不同的结果。
- en: For example, let’s imagine a new object named `Frog` that contains two methods,
    `Jump()` and `Eat()`, and one property called `EnergyLevel`. When you call the
    `Jump()` method, `Frog` jumps, but each jump causes its `EnergyLevel` to go down.
    You can call the `Eat()` method to restore its energy. If you keep ordering the
    `Frog` to jump without feeding it, the `Frog` runs out of energy and can’t jump
    anymore. The outcome of calling the `Jump()` method depends on the current value
    of the `EnergyLevel` property. The property changes the *state* of the `Frog`
    object (whether it can jump or not). Calling `Jump()` at one state (when `EnergyLevel`
    is high) gives a different output than calling `Jump()` at a different state (when
    `EnergyLevel` is low). Poor hungry frog!
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有一个名为 `Frog` 的新对象，它包含两个方法，`Jump()` 和 `Eat()`，以及一个名为 `EnergyLevel` 的属性。当你调用
    `Jump()` 方法时，`Frog` 会跳跃，但每次跳跃都会使其 `EnergyLevel` 降低。你可以调用 `Eat()` 方法来恢复它的能量。如果你不停地让
    `Frog` 跳跃却不给它食物，`Frog` 就会耗尽能量，无法再跳跃。调用 `Jump()` 方法的结果取决于 `EnergyLevel` 属性的当前值。这个属性改变了
    `Frog` 对象的 *状态*（它是否能跳跃）。在一个状态下（`EnergyLevel` 高时）调用 `Jump()` 与在另一个状态下（`EnergyLevel`
    低时）调用 `Jump()` 会产生不同的结果。可怜的饥饿青蛙！
- en: '***Setting and Changing Property Values***'
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***设置和更改属性值***'
- en: 'Here’s the general format for setting or changing a property of an object:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是设置或更改对象属性的常规格式：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For example, to make the `TextWindow` object output yellow text, you would
    enter:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要让 `TextWindow` 对象输出黄色文本，你可以输入：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'That statement changes the `TextWindow` object’s state: after this statement,
    any text printed by calling `WriteLine()` is displayed in yellow. But any text
    that has already been displayed in the text window won’t be affected. The statement
    tells the `TextWindow` object, “From this point on display text using a yellow
    color.”'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 该语句会改变 `TextWindow` 对象的状态：在此语句执行后，任何通过调用 `WriteLine()` 输出的文本都会以黄色显示。但已经显示在文本窗口中的文本不会受到影响。该语句告诉
    `TextWindow` 对象：“从此开始，使用黄色显示文本。”
- en: '***Working with Properties***'
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***处理属性***'
- en: '[Listing 2-6](ch02.html#ch2ex6) shows some ways you can put the `TextWindow`
    properties to use.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 2-6](ch02.html#ch2ex6)展示了一些使用`TextWindow`属性的方法。'
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 2-6: Placing and coloring your text*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 2-6：放置和着色文本*'
- en: Running this code gives you the output in [Figure 2-6](ch02.html#ch2fig6).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这段代码会在[图2-6](ch02.html#ch2fig6)中显示输出结果。
- en: '![image](graphics/f02-06.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-06.jpg)'
- en: '*Figure 2-6: The output of* Properties.sb'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-6：* Properties.sb的输出'
- en: Now let’s walk through the code. [Figure 2-7](ch02.html#ch2fig7) will help you
    visualize what’s happening. It illustrates the text window as a rectangular grid
    of characters and shows the position of the cursor after Small Basic completes
    each statement.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们逐步分析代码。[图2-7](ch02.html#ch2fig7)将帮助你更好地理解发生了什么。它展示了文本窗口作为一个矩形的字符网格，并显示了在Small
    Basic执行每条语句后光标的位置。
- en: '![image](graphics/f02-07.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-07.jpg)'
- en: '*Figure 2-7: Illustrating the output of* Properties.sb'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-7：展示* Properties.sb的输出'
- en: Line 2 sets the `Title` property, which tells Small Basic the title of the text
    window. Line 3 sets the `BackgroundColor` property to `"Yellow"` for all the upcoming
    text outputs. The `Clear()` method (line 4) tells `TextWindow` to repaint itself
    using its `BackgroundColor` property, which is what makes the window’s background
    yellow. Try removing this line from the program to see what changes in your program’s
    output.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 第2行设置了`Title`属性，告诉Small Basic文本窗口的标题。第3行将`BackgroundColor`属性设置为“黄色”，用于接下来所有的文本输出。`Clear()`方法（第4行）告诉`TextWindow`使用其`BackgroundColor`属性重新绘制自己，这使得窗口的背景变成了黄色。尝试从程序中删除这一行，看看程序的输出会发生什么变化。
- en: Lines 6–8 set the cursor position to column 4, row 1 and set the foreground
    color (the text color) to blue for the next output. The `Write()` method at line
    9 writes the string `"BLUE TEXT"`, starting at the current position of the cursor.
    The `Write()` method is just like the `WriteLine()` method, except it doesn’t
    move the cursor to the next line after it displays the string. After this call,
    the cursor is at column 13 but still in row 1.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 第6到第8行将光标位置设置为第4列，第1行，并将前景色（文本颜色）设置为蓝色，以便下一个输出。第9行的`Write()`方法写入字符串`"BLUE TEXT"`，从当前光标位置开始。`Write()`方法与`WriteLine()`方法类似，不同之处在于它不会在显示字符串后将光标移动到下一行。调用此方法后，光标位于第13列，但仍在第1行。
- en: Line 11 moves the cursor down to row 3\. Line 12 sets the foreground color to
    red, and line 13 calls `Write()` to display the string `"RED TEXT"`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 第11行将光标移动到第3行。第12行将前景色设置为红色，第13行调用`Write()`显示字符串`"RED TEXT"`。
- en: Lines 15 and 16 move the cursor to column 1, row 5; line 17 sets the background
    color to green. This is the last statement, so the program *terminates* at this
    point (because there’s no more code to run). Because the foreground color of the
    text window is still set to red, the `Press any key to continue...` message is
    displayed in red on a green background.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 第15行和第16行将光标移动到第1列，第5行；第17行将背景色设置为绿色。这是最后一条语句，因此程序在此时*终止*（因为没有更多的代码可供执行）。由于文本窗口的前景色仍然设置为红色，`Press
    any key to continue...`消息将在绿色背景上以红色显示。
- en: '**TIP**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: '*For a complete list of colors you can use in the text window, see* [http://tiny.cc/twcolors/](http://tiny.cc/twcolors/).'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*要查看可以在文本窗口中使用的完整颜色列表，请访问* [http://tiny.cc/twcolors/](http://tiny.cc/twcolors/)。'
- en: '**TRY IT OUT 2-3**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**试一试 2-3**'
- en: 'Now you have a chance to go hi-tech next Valentine’s Day. Write a program that
    draws a card similar to the one shown in [Figure 2-8](ch02.html#ch2fig8), and
    share it with your crush. (Hint: draw the heart first with red. Then switch the
    foreground color to green and call `Write()` three times to draw the text.) Get
    creative with your colors and make it personal.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有机会在下一个情人节展示高科技。编写一个程序，绘制一个类似于[图2-8](ch02.html#ch2fig8)所示的卡片，并与喜欢的人分享。（提示：先用红色画心形图案。然后将前景色切换为绿色，并调用`Write()`三次来绘制文本。）发挥你的创造力，选择个人化的颜色。
- en: '![image](graphics/f02-08.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-08.jpg)'
- en: '*Figure 2-8: A Valentine’s Day heart*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-8：情人节心形图案*'
- en: '**Arithmetic Operators**'
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**算术运算符**'
- en: 'Computers are excellent for crunching numbers (they megabyte!) and work great
    as glorified calculators. Small Basic includes the four basic arithmetic operations:
    addition, subtraction, multiplication, and division, which are represented by
    `+`, `–`, `*`, and `/`, respectively. Those symbols are called *operators* because
    they operate on values, which are called *operands*. Let’s look at a few examples.
    These math operations will be familiar to you. Try entering these lines in the
    Editor:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机非常擅长处理数字（它们有兆字节！）并且作为高级计算器非常有效。Small Basic包括了四种基本的算术运算：加法、减法、乘法和除法，分别由`+`、`–`、`*`和`/`表示。这些符号叫做*运算符*，因为它们对数值进行操作，而这些数值被称为*操作数*。让我们来看一些例子。这些数学运算你应该很熟悉。试着在编辑器中输入这些行：
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When you run this program, each answer appears on a new line, like this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个程序时，每个答案都会出现在新的一行，像这样：
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'But how would Small Basic find the result of an expression like this: `6 *
    2 + 3`? Does this mean multiply 6 times 2 and then add 3, which equals 15, or
    multiply 6 times the sum of 2 and 3, which equals 30? When an arithmetic expression
    contains different operators, Small Basic completes the expression using the same
    *priority* used in algebra, as shown in [Figure 2-9](ch02.html#ch2fig9).'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，Small Basic如何计算像`6 * 2 + 3`这样的表达式结果呢？这是否意味着先乘以6和2，然后加3，结果是15，还是先乘以6再加上2和3的和，结果是30？当一个算术表达式包含不同的运算符时，Small
    Basic会按照代数中相同的*优先级*来完成运算，正如在[图2-9](ch02.html#ch2fig9)中所示。
- en: '![image](graphics/f02-09.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-09.jpg)'
- en: '*Figure 2-9: The order of operations in Small Basic*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-9：Small Basic中的运算顺序*'
- en: So, for `6 * 2 + 3` with no parentheses, Small Basic would multiply 6 times
    2 and then add 3, for a result of 15.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，对于没有括号的`6 * 2 + 3`，Small Basic会先乘以6和2，然后加上3，得到15。
- en: As in ordinary math, each left parenthesis in a Small Basic program must have
    a matching right parenthesis. For example, the expression `(6 + 4)` is valid,
    but `(6 + (8 – 2)))` isn’t valid because it has an extra right parenthesis.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如同普通数学一样，在Small Basic程序中，每个左括号必须有一个匹配的右括号。例如，表达式`(6 + 4)`是有效的，但`(6 + (8 – 2)))`是无效的，因为它有多余的右括号。
- en: 'To make sure you get the results you want, use parentheses to clarify the order
    of operations. This helps you avoid mistakes and makes your code easier to understand.
    For example, enter the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保你得到正确的结果，使用括号来明确运算顺序。这有助于避免错误，并使你的代码更容易理解。例如，输入以下内容：
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If you placed your parentheses correctly, you should get 7.5.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正确放置了括号，应该得到7.5。
- en: Adding a single space on both sides of an operator is also a good idea. For
    example, the expression `5 + 4 * 8` is easier to read than `5+4*8`. Although Small
    Basic can read two consecutive arithmetic operators, as in `3*–8`, it’s best to
    put the negative number in parentheses, such as `3 * (–8)` to make your code easy
    to read and avoid any confusion.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在运算符的两边加一个空格也是个不错的主意。例如，表达式`5 + 4 * 8`比`5+4*8`更容易阅读。虽然Small Basic能够读取两个连续的算术运算符，例如`3*–8`，但最好将负数放在括号中，如`3
    * (–8)`，这样可以让你的代码更易读，避免任何混淆。
- en: '**TRY IT OUT 2-4**'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**试试看 2-4**'
- en: 'In Lewis Carroll’s *Through the Looking Glass*, the Red Queen and the White
    Queen ask Alice to do some addition and subtraction in Wonderland. Using the `WriteLine()`
    method, create Small Basic programs to help her solve these two problems:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在刘易斯·卡罗尔的*《镜中奇遇》*中，红皇后和白皇后让爱丽丝在仙境中做一些加法和减法。使用`WriteLine()`方法，创建Small Basic程序帮助她解决这两个问题：
- en: “Can you do Addition?” the White Queen asked. “What’s one and one and one and
    one and one and one and one and one and one and one?”
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: “你会做加法吗？”白皇后问。“一加一加一加一加一加一加一加一加一加一是多少？”
- en: “I don’t know,” said Alice. “I lost count.”
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: “我不知道，”爱丽丝说，“我数错了。”
- en: “She can’t do Addition,” the Red Queen interrupted, “Can you do Subtraction?
    Take nine from eight.”
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: “她不会做加法，”红皇后打断道，“你会做减法吗？从八中减去九。”
- en: '“Nine from eight I can’t, you know,” Alice replied very readily: “but—”'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: “九减八我做不到，你知道的，”爱丽丝很快回答：“但是——”
- en: '**Programming Errors**'
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程错误**'
- en: Just because a program runs doesn’t mean it’s correct. All programmers make
    errors at some point, especially when they write long programs. But don’t worry!
    You’ll make fewer errors the more you practice. Three main types of errors in
    programming are syntax errors, logic errors, and runtime errors; we’ll teach you
    how to find and fix them.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅因为程序运行了，并不意味着它是正确的。所有程序员都会犯错误，尤其是在编写长程序时。但不用担心！你练得越多，错误就越少。编程中的三种主要错误类型是语法错误、逻辑错误和运行时错误；我们将教你如何找到并修复它们。
- en: '***Syntax Errors***'
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***语法错误***'
- en: 'Errors pop up whenever a program breaks one of the language’s syntax rules.
    Examples of syntax errors include the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序违反语言的语法规则时，就会出现错误。语法错误的例子包括以下几种：
- en: • Missing punctuation, such as in `TextWindow.WriteLine("Hello)`, which includes
    a string without an ending quote
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: • 缺少标点符号，例如`TextWindow.WriteLine("Hello)`，它包含一个没有结束引号的字符串
- en: • Extra punctuation at the end of a statement
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: • 语句末尾的额外标点符号
- en: • Misspelled keywords, such as `Whle` instead of `While`
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: • 拼写错误的关键字，例如`Whle`而不是`While`
- en: • Arithmetic operators used incorrectly, such as `5 ** 2`
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: • 错误使用算术运算符，例如`5 ** 2`
- en: • Mismatched parentheses in arithmetic expressions, such as `5 * (6 - (3 + 2)`
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: • 算术表达式中的括号不匹配，例如`5 * (6 - (3 + 2)`
- en: '**NOTE**'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*A* keyword *is a special word that tells Small Basic to do something, like
    to repeat a statement. We’ll explain each one in later chapters.*'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '*A*关键字*是一个特殊的词，告诉Small Basic做某事，比如重复执行一条语句。我们将在后续章节中解释每个关键字。*'
- en: Fortunately, the minute you click the Run button, Small Basic discovers any
    syntax errors and describes them in an *error message*. The error message lists
    the line numbers in your source code where the errors were found (see [Figure
    2-10](ch02.html#ch2fig10)). If your program contains a syntax error, look at the
    line that contains the error and see if you can fix it!
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，一旦你点击运行按钮，Small Basic会发现所有语法错误，并在*错误消息*中描述它们。错误消息会列出在源代码中发现错误的行号（请参阅[图2-10](ch02.html#ch2fig10)）。如果程序包含语法错误，查看包含错误的行，并看看你能否修复它！
- en: '![image](graphics/f02-10.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-10.jpg)'
- en: '*Figure 2-10: An example of a syntax error*'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-10：语法错误的示例*'
- en: Need to find the problem fast? Just double-click the error message to jump to
    the line that contains the error. (Pretty awesome, huh?)
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 需要快速找到问题？只需双击错误消息，即可跳转到包含错误的行。（相当酷吧？）
- en: '***Logic Errors***'
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***逻辑错误***'
- en: Sometimes, you might make a mistake in your program’s logic. These *logic errors*
    cause your programs to produce the wrong results. For example, if you accidentally
    used a minus sign instead of a plus sign, you’ve made a logic error. Your program
    runs normally, but the output’s incorrect!
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能会在程序的逻辑中犯错。这些*逻辑错误*导致程序输出错误的结果。例如，如果你不小心用了减号代替加号，你就犯了一个逻辑错误。程序正常运行，但输出不正确！
- en: Logic errors are called *bugs*, and *debugging* is the process we use for finding
    and fixing these bugs. For short programs, you might be able to locate the bugs
    by *hand tracing*, which means you read the program line by line and write down
    the output you expect for each step. Another common technique is to insert additional
    `WriteLine()` statements to display the output at different parts of the program.
    This helps you narrow down the lines where the program might have gone wrong.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑错误被称为*bug*，而*调试*是我们用来查找和修复这些bug的过程。对于短小的程序，你可能能够通过*手动追踪*来定位bug，这意味着你逐行阅读程序，并记录每一步你期望的输出。另一种常见的技术是插入额外的`WriteLine()`语句，以在程序的不同部分显示输出。这有助于你缩小可能出错的代码行。
- en: '***Runtime Errors***'
  id: totrans-144
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行时错误***'
- en: '*Runtime errors* happen after you run your program, when it experiences a problem
    that’s not solved in your code. For example, your user may enter bad numbers that
    can cause your program to stop working, or crash. You’ll discover these errors
    yourself when you start tinkering with Small Basic.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '*运行时错误*发生在你运行程序后，当程序遇到无法在代码中解决的问题时。例如，用户可能输入不合适的数字，导致程序停止工作或崩溃。当你开始使用Small
    Basic时，你会亲自发现这些错误。'
- en: '**Programming Challenges**'
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程挑战**'
- en: If you get stuck, check out *[http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)*
    for the solutions and for more resources and review questions for teachers and
    students.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到困难，可以访问* [http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)
    *以获取解决方案以及更多针对教师和学生的资源和复习问题。
- en: Write a program that displays your name and age, similar to the following output.
    Use colors to make the output fit your own style!
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个显示你名字和年龄的程序，类似于以下输出。使用颜色使输出符合你自己的风格！
- en: '[PRE14]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Replace the question marks in the following program with strings that give your
    user information about the order of an element in the periodic table. Run the
    program to check its output.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用字符串替换下面程序中的问号，使其向用户提供有关元素在周期表中顺序的信息。运行程序以检查其输出。
- en: '[PRE15]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Cathy wrote the following program to figure out how much money she earned from
    babysitting. But there’s a problem: her program doesn’t work. Help Cathy find
    the bug in her program and fix it.'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 凯西编写了以下程序，以计算她通过做保姆赚了多少钱。但是有一个问题：她的程序无法正常工作。帮凯西找到程序中的错误并修复它。
- en: '[PRE16]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Write a program that creates a Christmas card similar to the one shown here.
    Use any colors to decorate the tree.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，创建一张类似于这里展示的圣诞卡片。使用任意颜色装饰树木。
- en: '![image](graphics/f0026-01.jpg)'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f0026-01.jpg)'
