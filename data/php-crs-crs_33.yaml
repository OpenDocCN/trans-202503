- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 27 INTRODUCTION TO DATABASES
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 27 数据库简介
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: Databases are one of the ways computer systems can persistently store data so
    that it can be remembered when code runs at a later time. We’ll explore how to
    use PHP to work with databases over the next several chapters, starting in this
    chapter with database fundamentals. We’ll go over basic database terminology,
    look at how databases are structured, and consider the motivation for and benefits
    of connecting a web application to a database.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库是计算机系统存储数据的一种方式，使得当代码稍后运行时，数据可以被持久地保存并被记住。我们将在接下来的几章中探讨如何使用 PHP 与数据库进行交互，从本章的数据库基础知识开始。我们将介绍基本的数据库术语，了解数据库的结构，并考虑将
    Web 应用程序连接到数据库的动机和好处。
- en: We’ll also discuss how a database fits with our coverage so far about web application
    architecture. You’ll learn how to map the contents of a database onto an object-oriented
    structure of classes and objects, and you’ll see how a database forms the backbone
    of the model component of the MVC architecture described in earlier chapters.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将讨论数据库如何与我们迄今为止讨论的 Web 应用程序架构相结合。你将学习如何将数据库的内容映射到面向对象的类和对象结构中，并且你将看到数据库如何形成早期章节中描述的
    MVC 架构模型组件的核心。
- en: '> NOTE'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '> 注意'
- en: '*This book doesn’t aim to provide a comprehensive guide to relational database
    design, a complex field in its own right. Our focus will be on interacting with
    databases by using PHP. Some books for learning more about SQL and databases include*
    Practical SQL*, 2nd edition (2022), by Anthony DeBarros;* The Manga Guide to Databases
    *(2009) by Mana Takahashi; and* MySQL Crash Course *(2023) by Rick Silva, all
    from No Starch Press.*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*本书并不旨在提供关于关系数据库设计的全面指南，这本身就是一个复杂的领域。我们的重点将是通过使用 PHP 与数据库进行交互。有关 SQL 和数据库的更多学习书籍包括*《实用
    SQL》（第二版，2022年），作者 Anthony DeBarros；*《漫画数据库指南》（2009年），作者 Mana Takahashi；以及*《MySQL
    快速教程》（2023年），作者 Rick Silva，均由 No Starch Press 出版。*'
- en: Relational Database Basics
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关系数据库基础
- en: The majority of modern database systems are *relational*, meaning they’re composed
    of a set of interrelated tables. Each table represents a type of entity. For example,
    a customer table might store information about the customers at an e-commerce
    site.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现代数据库系统大多数是*关系型*的，这意味着它们由一组相互关联的表组成。每个表代表一种实体。例如，客户表可能存储关于电子商务网站客户的信息。
- en: A table consists of columns and rows. Each column represents an attribute of
    the entity (for example, the customer table might have columns for a customer’s
    name, address, phone number, and so on). Each row represents a single instance
    of the entity (for example, an individual customer). Each row is also called a
    *record*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个表由列和行组成。每列代表实体的一个属性（例如，客户表可能有客户姓名、地址、电话号码等列）。每一行代表实体的一个实例（例如，一个单独的客户）。每一行也叫做*记录*。
- en: The relationships between database tables are established through keys; each
    *key* is a unique identifier associated with one record in a table. Referencing
    one table’s keys from within another table creates a link between the two tables,
    while also avoiding duplication of data. Continuing our e-commerce example, each
    customer in our customer table could be given a *primary key* in the form of a
    unique customer ID number. Meanwhile, we might also have an invoice table for
    recording transactions, with a unique ID number for each invoice. Every invoice
    should be related to a single customer (the person who initiated the transaction),
    while each customer may be associated with multiple invoices, since a person can
    initiate multiple transactions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库表之间的关系通过键来建立；每个*键*是与表中一条记录相关联的唯一标识符。从一个表中引用另一个表的键会在这两个表之间创建一个链接，同时避免数据的重复。继续我们电子商务的例子，我们的客户表中的每个客户可以被赋予一个*主键*，即一个唯一的客户
    ID 号码。与此同时，我们可能还会有一个发票表，用于记录交易，每个发票都有一个唯一的 ID 号码。每个发票应与一个客户（发起交易的人）相关联，而每个客户可以与多个发票相关联，因为一个人可以发起多次交易。
- en: We would establish this relationship by storing the customer ID associated with
    each invoice as a column in the invoice table, unambiguously associating each
    invoice with one—and only one—customer. In the context of the invoice table, the
    customer ID is known as a *foreign key*, since it connects to a field in a different
    table. Thanks to the foreign key, the invoice table doesn’t need to duplicate
    the name, address, and other information about the customer; we can simply look
    up those details in the customer table based on the customer ID assigned to a
    given invoice. This is the power of the relational database.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将与每个发票相关联的客户 ID 存储为发票表中的一列来建立这种关系，明确地将每张发票与一个且仅一个客户关联。在发票表的上下文中，客户 ID 被称为*外键*，因为它连接到另一个表中的字段。得益于外键，发票表不需要重复存储客户的姓名、地址和其他信息；我们只需根据给定发票分配的客户
    ID，在客户表中查找这些详细信息。这就是关系型数据库的强大之处。
- en: Assigning a unique key to each row also helps maintain the correctness, or *integrity*,
    of the database. When database changes are being attempted, these keys act as
    links between data items in different tables. The system can ensure there’s an
    associated data item corresponding to a key referenced by another item in a different
    table. Rules can be established in the database to prevent new data from being
    created if it attempts to link to a nonexistent data item. For example, this might
    save a customer from being charged for a nonexistent invoice, or save an invoice
    from being assigned to a nonexistent customer. Other rules can be related to deletions
    of data, creating a warning or exception if we try to delete an item that other
    items are linked to.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为每一行分配唯一的键还有助于维护数据库的正确性或*完整性*。在进行数据库更改时，这些键充当不同表中数据项之间的链接。系统可以确保有一个与另一个表中引用的键相对应的数据项。可以在数据库中建立规则，防止在尝试创建新数据时，如果它试图链接到不存在的数据项，就会阻止该数据的创建。例如，这可以避免客户为不存在的发票付费，或防止将发票分配给不存在的客户。其他规则可能与数据删除相关，如果我们尝试删除与其他项目关联的项目，则会创建警告或异常。
- en: Overall, the structure of a database’s tables, the relationships between the
    tables, and the rules governing data integrity are referred to as the *relational
    schema* for that database. Complex web applications often require several relational
    schemas that operate side by side. For example, one schema might be for the financial
    records of an organization, another for human resource details, and another for
    stock items and customer orders.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，数据库表的结构、表之间的关系以及管理数据完整性的规则被称为该数据库的*关系模式*。复杂的 Web 应用程序通常需要多个并行操作的关系模式。例如，一个模式可能用于存储组织的财务记录，另一个用于人力资源详情，另一个用于库存项目和客户订单。
- en: Database Management Systems
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 数据库管理系统
- en: 'The software that creates, modifies, retrieves from, and stores a database
    is called a *database management system (DBMS)*. For a relational database, we
    sometimes refer more specifically to a *relational database management system
    (RDBMS)*. For the purposes of this book, we’ll focus on two (R)DBMSs: MySQL and
    SQLite. These are two of the most popular free and open source systems in use
    today.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 创建、修改、从中检索和存储数据库的软件称为*数据库管理系统（DBMS）*。对于关系型数据库，我们有时更具体地称之为*关系型数据库管理系统（RDBMS）*。在本书中，我们将重点讨论两种
    (R)DBMS：MySQL 和 SQLite。这是当今最流行的两个免费开源系统。
- en: Some DBMSs run as server applications requiring usernames and passwords. They
    may run on the same computer system as the web application that uses them, or
    they may run on a completely independent internet server. MySQL is an example
    of a server-based DBMS. Other DBMSs, such as SQLite, are file-based, meaning the
    data is stored in files on the same computer as the web application. Server-based
    DBMSs like MySQL can work with multiple database schemas, whereas SQLite and most
    other file-based DBMSs store a single database schema in each file. One SQLite
    file might hold the financial records database, for example, another file could
    hold the human resource details database, and so on.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一些数据库管理系统（DBMS）作为服务器应用程序运行，需要用户名和密码。它们可以运行在与使用它们的 Web 应用程序相同的计算机系统上，也可以运行在完全独立的互联网服务器上。MySQL
    就是一个基于服务器的 DBMS 示例。其他数据库管理系统，如 SQLite，是基于文件的，意味着数据存储在与 Web 应用程序相同计算机上的文件中。像 MySQL
    这样的基于服务器的 DBMS 可以与多个数据库模式一起使用，而 SQLite 和大多数其他基于文件的 DBMS 在每个文件中存储单一的数据库模式。例如，一个
    SQLite 文件可能存储财务记录数据库，另一个文件可能存储人力资源详情数据库，依此类推。
- en: For a computer language like PHP to communicate with a particular DBMS, you
    need a *database driver*. This piece of software allows a program to communicate
    with a DBMS through its own standard protocol. For example, PHP has a driver for
    MySQL, a driver for SQLite, and other drivers for other DBMSs. The MySQL and SQLite
    PHP drivers may already be enabled on your system. If not, you’ll get driver errors
    when you try to run the code in the following chapters, and you may need to tweak
    the settings in your *php.ini* configuration file. See [Appendix B](appendix-b.xhtml)
    for instructions on setting up one or both of these database systems locally,
    or [Appendix C](appendix-c.xhtml) if you’re working in Replit.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让像PHP这样的计算机语言与特定的DBMS进行通信，你需要一个*数据库驱动程序*。这个软件组件允许程序通过其标准协议与DBMS进行通信。例如，PHP有MySQL驱动程序、SQLite驱动程序，以及其他数据库管理系统的驱动程序。MySQL和SQLite的PHP驱动程序可能已经在你的系统中启用。如果没有，当你尝试运行以下章节中的代码时，会出现驱动程序错误，并且你可能需要在*php.ini*配置文件中进行调整。有关在本地设置这两种数据库系统的说明，请参见[附录B](appendix-b.xhtml)，如果你在Replit环境中工作，请参考[附录C](appendix-c.xhtml)。
- en: When your PHP program needs to work with a DBMS, it uses a database *connection*
    at runtime. This connection is an active communication link between a computer
    program and a DBMS. To create a connection with a server-based database system,
    you must provide the host and port details, and usually the appropriate username
    and password authentication details as well. In some cases, a connection can be
    made directly to work with a particular database schema (for example, the human
    resource details schema); in other cases, a general connection is made to the
    DBMS, and either a new schema is created or the existing schema to be used is
    selected after the connection has been created. Once a connection has been established
    to work with a specific schema, the desired actions can be executed, which might
    include creating tables and relationships, inserting or deleting data, or retrieving
    data from the tables of the schema.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的PHP程序需要与DBMS交互时，它在运行时使用一个数据库*连接*。这个连接是计算机程序与DBMS之间的活跃通信链接。要与基于服务器的数据库系统建立连接，你必须提供主机和端口信息，通常还需要提供适当的用户名和密码认证信息。在某些情况下，可以直接连接到特定的数据库架构（例如，人力资源详情架构）；在其他情况下，会与DBMS建立一个通用连接，连接后可以创建新的架构，或选择使用已有的架构。一旦建立了与特定架构的连接，就可以执行所需的操作，其中可能包括创建表和关系、插入或删除数据，或者从架构的表中检索数据。
- en: One key advantage of databases over other persistent storage methods such as
    files is that many DBMSs are designed to safely be used by multiple people simultaneously.
    Incorporating a database into a web application thus allows many people to interact
    with the application at the same time, while still ensuring the security and integrity
    of the system data. This is one area where server-based DBMSs like MySQL shine
    over file-based DBMSs like SQLite. While SQLite allows multiple simultaneous users
    to work on its file-based database, it locks the entire database file when a user
    is making changes. This is fine for local machine testing and development, but
    it would result in unacceptable delays for a fully deployed, real-world web application
    with heavy traffic. Systems such as MySQL can handle large numbers of concurrent
    connections, locking only single tables or even single database rows to minimize
    any interference with other users.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库相对于其他持久存储方法（如文件）的一大优势是，许多DBMS设计时就考虑到了多人同时安全使用。因此，将数据库集成到Web应用程序中，能够让多人同时与应用程序互动，同时确保系统数据的安全性和完整性。这是基于服务器的DBMS（如MySQL）相较于基于文件的DBMS（如SQLite）的一个显著优势。虽然SQLite允许多个用户同时操作其文件数据库，但当用户进行更改时，它会锁定整个数据库文件。这对于本地机器测试和开发来说没问题，但在面对重流量的真实世界Web应用程序时，会导致无法接受的延迟。而像MySQL这样的系统可以处理大量并发连接，仅锁定单个表甚至单个数据库行，从而最小化对其他用户的干扰。
- en: Server-based DBMSs also have the potential to be run as multiple instances,
    allowing multiple versions of both the web application and its database to help
    a system handle massive numbers of simultaneous users. Instances can be added
    and removed as needed to cope with a varying load of traffic over time. This technique
    is known as *load balancing*, and many cloud services implement it automatically.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 基于服务器的数据库管理系统（DBMS）也有可能作为多个实例运行，从而帮助系统处理大量同时在线的用户，支持web应用程序及其数据库的多个版本。可以根据需求增加或删除实例，以应对随时间变化的流量负载。这种技术被称为*负载均衡*，许多云服务都自动实现了这一技术。
- en: Structured Query Language
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 结构化查询语言
- en: 'The majority of modern RDBMSs are manipulated using Structured Query Language
    (SQL). SQL is designed to accomplish three key aspects of working with relational
    databases:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现代大多数关系数据库管理系统（RDBMS）都使用结构化查询语言（SQL）进行操作。SQL 旨在完成与关系数据库交互的三个关键方面：
- en: Defining the structure of the related tables
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义相关表格的结构
- en: Manipulating the stored data (creating, updating, or deleting data)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作存储的数据（创建、更新或删除数据）
- en: Querying the data (searching the database, given criteria to match against)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询数据（搜索数据库，根据给定的标准进行匹配）
- en: Listing 27-1 illustrates SQL statements for each of these kinds of actions.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 27-1 说明了每种操作的 SQL 语句。
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 27-1: Examples of SQL definition, manipulation, and querying statements'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 27-1：SQL 定义、操作和查询语句示例
- en: The first SQL statement creates a product table and defines its structure. Each
    entry in this table will store the id, description, and price of a product. Each
    of these columns is given a data type (such as float for the price column), and
    the id column is designated as the table’s primary key, meaning each table entry
    should have a unique id value.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 SQL 语句创建了一个产品表并定义了其结构。该表中的每个条目将存储产品的 id、描述和价格。每一列都指定了数据类型（例如，价格列为浮动型），id
    列被指定为表的主键，这意味着每个表条目应该具有唯一的 id 值。
- en: The second SQL statement demonstrates how to manipulate the data stored in the
    database; the statement deletes all entries from the product table that have a
    negative price. Finally, the third SQL statement is an example of a database query;
    it uses SELECT to request all the entries in the products table that have a price
    greater than 99.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个 SQL 语句演示了如何操作存储在数据库中的数据；该语句删除所有价格为负数的产品表条目。最后，第三个 SQL 语句是数据库查询的示例；它使用 SELECT
    请求所有价格大于 99 的产品表条目。
- en: Although SQL isn’t case-sensitive, it’s common practice to write SQL keywords
    like SELECT, FROM, and WHERE in all caps, and to use lowercase letters for table
    and column names as well as for strings forming a condition in a statement. Following
    this convention helps make SQL statements more readable.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 SQL 不区分大小写，但通常的做法是将 SQL 关键字（如 SELECT、FROM 和 WHERE）写为大写，并将表和列名以及构成语句条件的字符串使用小写字母。遵循这一惯例有助于使
    SQL 语句更具可读性。
- en: Databases and Web Application Architecture
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据库和 Web 应用程序架构
- en: Databases naturally fit into the architecture of object-oriented web applications.
    Classes of objects can be written to closely map to the data items stored in database
    tables, and databases and their classes are the usual choice for the model (M)
    component in the MVC web application pattern.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库自然适应面向对象的 web 应用程序架构。对象的类可以编写得与存储在数据库表中的数据项紧密映射，数据库及其类通常是 MVC web 应用程序模式中模型（M）组件的首选。
- en: Object-Oriented Programming
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 面向对象编程
- en: The class structure of OOP easily maps to relational database tables. A common
    and straightforward way to structure a web application working with a database
    is to design a class that corresponds to each table in the database. These *entity
    classes* have properties mirroring the table’s columns, and an instance of the
    class would correspond to a record (row) of the table.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程的类结构可以轻松地映射到关系数据库表。与数据库交互的 web 应用程序的一种常见且直接的结构方式是设计一个与数据库中每个表对应的类。这些*实体类*具有与表的列相对应的属性，类的实例将对应于表中的一条记录（行）。
- en: If we need to write data to a database table, we would first create an object
    of the appropriate class containing the new data, then use our database connection
    to send the object’s data to the database table. We can even send data back to
    that object; for example, if the database needs to choose a new unique key for
    the new record, this value can be sent back to the web application and stored
    in the corresponding object for future reference. Conversely, if we need to read
    a whole record out of a database table, we would read the retrieved data into
    a new object of the appropriate class, at which point the rest of the application
    can utilize the database data by accessing that object.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要将数据写入数据库表，我们首先会创建一个包含新数据的适当类的对象，然后使用我们的数据库连接将该对象的数据发送到数据库表。我们甚至可以将数据发送回该对象；例如，如果数据库需要为新记录选择一个新的唯一键，则可以将此值发送回
    web 应用程序，并将其存储在相应的对象中以供将来参考。相反，如果我们需要从数据库表中读取整个记录，我们会将检索到的数据读入适当类的新对象，此时应用程序的其他部分可以通过访问该对象来利用数据库数据。
- en: Consider a web application (and its database) implementing products of various
    categories. We may have categories with names such as food, hardware, and furniture,
    and each product must be related to one of these categories. [Figure 27-1](#fig27-1)
    shows the database’s relational schema. This kind of diagram is called an *entity-relationship
    (ER) model*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个实现各种类别产品的 Web 应用程序（及其数据库）。我们可能会有名称为食品、五金和家具的类别，每个产品必须与其中一个类别相关联。[图 27-1](#fig27-1)
    显示了数据库的关系模式。这种图表称为 *实体关系（ER）模型*。
- en: '![](../images/figure27-1.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure27-1.jpg)'
- en: 'Figure 27-1: An ER diagram showing related Product and Category entities'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 27-1：展示相关的 Product 和 Category 实体的 ER 图
- en: Our database will have a Product table containing an entry for each product
    as well as a Category table with the possible categories the products can fall
    into. The line connecting the tables illustrates how entries from these tables
    can relate. The 1 at the Category end of the connecting line expresses the relationship
    “each product is associated with precisely one category.” The crow’s foot link
    and asterisk (*) at the Product end expresses the relationship “each category
    is associated with zero, one, or more products.”
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据库将有一个 Product 表，包含每个产品的条目，还有一个 Category 表，列出产品可能属于的类别。这些表之间的连接线展示了这些表中的条目如何关联。连接线的
    Category 端的“1”表示关系“每个产品都与恰好一个类别相关联。”而 Product 端的鸟脚链接和星号（*）表示关系“每个类别都可以与零个、一个或多个产品相关联。”
- en: Each record in the Category table will have a unique integer id property (a
    primary key) and a text description. [Table 27-1](#tab27-1) shows sample entries
    in the table.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Category 表中的每条记录将具有唯一的整数 id 属性（主键）和文本描述。[表格 27-1](#tab27-1) 显示了表中的示例条目。
- en: 'Table 27-1: Example Rows for the Category Table'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 27-1：类别表的示例行
- en: '| id (primary key) | name |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| id（主键） | name |'
- en: '| --- | --- |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 1 | "food" |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 1 | "食品" |'
- en: '| 2 | "hardware" |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 2 | "五金" |'
- en: '| 3 | "furniture" |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 3 | "家具" |'
- en: Every record in the Product table will similarly have a unique integer id property
    as a primary key, along with a text description and a float price. Each product
    will also be related to exactly one category via the category_id column, which
    will store a reference to the key for one of the records in the Category table.
    Again, this is known as a *foreign key*. [Table 27-2](#tab27-2) shows example
    rows for the Product table.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Product 表中的每条记录也将具有唯一的整数 id 属性作为主键，并具有文本描述和浮动价格。每个产品还将通过 category_id 列与恰好一个类别相关联，该列将存储对
    Category 表中某条记录键的引用。同样，这被称为 *外键*。[表格 27-2](#tab27-2) 显示了 Product 表的示例行。
- en: 'Table 27-2: Example Rows for the Product Table'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 27-2：产品表的示例行
- en: '| id (unique key) | description | price | category_id |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| id（唯一键） | description | price | category_id |'
- en: '| --- | --- | --- | --- |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 1 | "peanut bar" | 1.00 | 1 (food) |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 1 | "花生棒" | 1.00 | 1（食品） |'
- en: '| 2 | "hammer" | 9.99 | 2 (hardware) |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 2 | "锤子" | 9.99 | 2（五金） |'
- en: '| 3 | "ladder" | 59.99 | 2 (hardware) |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 3 | "梯子" | 59.99 | 2（五金） |'
- en: We can easily map our database tables to object-oriented classes. [Figure 27-2](#fig27-2)
    shows the corresponding class diagram for Product and Category. Notice that this
    UML diagram is essentially the same as the ER model from [Figure 27-1](#fig27-1).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以轻松地将数据库表映射到面向对象的类。[图 27-2](#fig27-2) 显示了 Product 和 Category 的相应类图。请注意，这个
    UML 图实际上与 [图 27-1](#fig27-1) 中的 ER 模型是相同的。
- en: '![](../images/figure27-2.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure27-2.jpg)'
- en: 'Figure 27-2: A class diagram of the related Product and Category classes'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 27-2：相关的 Product 和 Category 类的类图
- en: Each class has properties for all the columns of its corresponding database
    table; for example, the Product class has id, description, price, and category
    properties. Each Product object will be related to exactly one Category object
    via its category property, which will store a reference to a Category object.
    Notice that this is the main difference between our class structure and our database
    structure. In the Product database table, the category_id column simply stores
    the integer ID of the related category, whereas with our classes we can store
    a reference to a complete Category object.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 每个类都包含其对应数据库表的所有列的属性；例如，Product 类具有 id、description、price 和 category 属性。每个 Product
    对象将通过其 category 属性与恰好一个 Category 对象相关联，该属性将存储对 Category 对象的引用。请注意，这是我们类结构与数据库结构之间的主要区别。在
    Product 数据库表中，category_id 列仅存储与之相关的类别的整数 ID，而在我们的类中，我们可以存储对完整 Category 对象的引用。
- en: '[Figure 27-3](#fig27-3) shows the objects that will be created when we read
    the sample database rows from [Tables 27-1](#tab27-1) and [27-2](#tab27-2) into
    our web application.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 27-3](#fig27-3) 显示了当我们从 [表 27-1](#tab27-1) 和 [27-2](#tab27-2) 读取示例数据库行到我们的
    Web 应用程序时，将创建的对象。'
- en: '![](../images/figure27-3.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure27-3.jpg)'
- en: 'Figure 27-3: Connecting Product objects to Category objects'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 27-3：将产品对象与分类对象连接
- en: We end up with three Product objects, linked to their corresponding Category
    objects. Notice that each Product object is associated with only one Category
    object. In contrast, a Category object can be related to zero, one, or many Product
    objects, since at a given point we may have no products for some categories, perhaps
    just one product, or more.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终得到了三个产品对象，它们与相应的分类对象相关联。请注意，每个产品对象仅与一个分类对象相关联。相比之下，一个分类对象可以与零个、一个或多个产品对象相关联，因为在某些时候我们可能没有任何产品属于某些分类，也可能只有一个产品，或者更多。
- en: The Model-View-Controller Pattern
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 模型-视图-控制器模式
- en: In previous chapters, we’ve discussed the MVC software architecture, which assigns
    the various tasks required for operating a web application to different parts
    of the system. We’ve focused primarily on how a templating library like Twig provides
    the view component of MVC, preparing content to be displayed to the user, and
    on how a front controller and other specialized controller classes provide the
    controller component, making decisions about how to respond to each user request.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们讨论了 MVC 软件架构，它将操作 Web 应用程序所需的各种任务分配给系统的不同部分。我们主要集中在如何像 Twig 这样的模板库提供
    MVC 的视图组件，准备要展示给用户的内容，以及前端控制器和其他专业控制器类如何提供控制器组件，做出如何响应每个用户请求的决策。
- en: I’ve said little so far about the model part of this architecture, the actual
    data that underlies the web application. This is where a database comes in. It
    stores the data in an organized format and serves it up or modifies it when prompted
    by the controller classes. The classes corresponding to the database tables are
    part of the model component of the application as well. [Figure 27-4](#fig27-4)
    illustrates the database’s place in the MVC web application architecture.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我对这种架构中的模型部分，即支撑 Web 应用程序的实际数据，介绍得不多。这正是数据库的作用所在。它以有组织的格式存储数据，并在控制器类的指令下提供或修改数据。与数据库表对应的类也是应用程序模型组件的一部分。[图
    27-4](#fig27-4) 说明了数据库在 MVC Web 应用架构中的位置。
- en: '![](../images/figure27-4.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure27-4.jpg)'
- en: 'Figure 27-4: The MVC architecture, highlighting the model component'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 27-4：MVC 架构，突出显示模型组件
- en: Notice that the action controller classes communicate with (read from and modify)
    the *model classes*. As you’ll learn in the following chapters, these are the
    object-oriented classes that communicate with the database. All database interactions
    are kept completely separate from the controller and view components of the application.
    This compartmentalization means that we could change the underlying database (from
    a file-based DBMS to a server-based DBMS, for example) without having to make
    any changes to the front controller, the action controller classes, or the templates.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，动作控制器类与（从数据库中读取和修改）*模型类*进行通信。正如你将在接下来的章节中学到的，这些是与数据库进行交互的面向对象类。所有的数据库交互都与应用程序的控制器和视图组件完全分离。这种模块化意味着我们可以更换底层数据库（例如从基于文件的
    DBMS 更换到基于服务器的 DBMS），而不需要对前端控制器、动作控制器类或模板做任何修改。
- en: '### Summary'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '### 总结'
- en: In this chapter, we reviewed the concept of databases, especially SQL-based
    relational databases, and considered some of the advantages of adding databases
    to web applications. We also explored how databases fit into web application architecture,
    including how databases are the heart of the MVC pattern’s model component. We
    observed the close mapping among the tables, columns, and rows of a relational
    database and the classes, properties, and instances used in OOP. With this introduction,
    you’re now ready for the remaining chapters in the book, where you’ll learn to
    use PHP to connect to, create, modify, and retrieve data from MySQL and SQLite
    relational databases.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了数据库的概念，特别是基于 SQL 的关系型数据库，并考虑了将数据库添加到 Web 应用程序中的一些优势。我们还探讨了数据库在 Web
    应用架构中的作用，包括数据库如何成为 MVC 模式模型组件的核心部分。我们观察到，关系型数据库中的表、列和行与面向对象编程（OOP）中使用的类、属性和实例之间有着密切的映射关系。通过这次介绍，你现在已为本书剩余章节做好准备，在接下来的章节中，你将学习如何使用
    PHP 连接、创建、修改和从 MySQL 和 SQLite 关系型数据库中检索数据。
- en: Exercises
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习
- en: 1.   Read up on some of the history of databases in the phoenixNAP article “What
    Is a Database?” by Milica Dancuk (*[https://phoenixnap.com/kb/what-is-a-database](https://phoenixnap.com/kb/what-is-a-database)*).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 1.   阅读 phoenixNAP 文章《什么是数据库？》中的一些数据库历史内容，作者为 Milica Dancuk (*[https://phoenixnap.com/kb/what-is-a-database](https://phoenixnap.com/kb/what-is-a-database)*).
- en: 2.   DB Fiddle (*[https://www.db-fiddle.com](https://www.db-fiddle.com)*) is
    a great online resource for practicing SQL statements and designing a database.
    You can create and populate tables, query them, and view the results. Try using
    DB Fiddle to implement the Product and Category database tables discussed in this
    chapter. Insert the three rows of sample data for each database table (see [Tables
    27-1](#tab27-1) and [27-2](#tab27-2)), then run queries to select the data from
    each table.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 2.   DB Fiddle (*[https://www.db-fiddle.com](https://www.db-fiddle.com)*) 是一个非常棒的在线资源，可以用来练习
    SQL 语句和设计数据库。你可以创建并填充表格、查询数据并查看结果。尝试使用 DB Fiddle 来实现本章中讨论的产品和类别数据库表。为每个数据库表插入三行示例数据（参见
    [表 27-1](#tab27-1) 和 [27-2](#tab27-2)），然后运行查询以选择每个表中的数据。
