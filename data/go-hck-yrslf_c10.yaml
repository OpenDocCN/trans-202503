- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Car Hacking and the Internet of Things
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 汽车黑客和物联网
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: Some of the coolest computers you can hack into are all around you every day,
    but you probably don’t think of them as computers. Many home appliances—like thermostats,
    security cameras, refrigerators, and Alexa or Google Home speakers—have a computer
    inside. These days, even cars have internet connections and computer systems that
    can be attacked by unethical hackers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你每天都能接触到一些非常酷的计算机，它们就在你周围，但你可能并不会把它们当作计算机来看待。许多家用电器——比如恒温器、安全摄像头、冰箱，以及 Alexa
    或 Google Home 扬声器——内部都包含计算机。如今，甚至汽车也拥有互联网连接和计算机系统，这些系统可能会受到不道德黑客的攻击。
- en: Internet-connected computing devices embedded in everyday objects are known
    as the *Internet of Things (IoT)*. IoT devices make our lives easier or better,
    but they can also pose serious security risks. Internet-connected medical devices
    may help keep us healthy and allow the manufacturer to monitor and update them
    remotely, but imagine if an attacker could hack someone’s pacemaker or insulin
    pump to harm the user. Likewise, satellite radio, GPS navigation, and 4G/5G wireless
    entertainment systems in your car make long road trips more convenient and fun,
    but all of those networks bring additional vulnerabilities that attackers could
    exploit. Imagine if someone hacked into your car and made it brake suddenly on
    the highway.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入在日常物品中的互联网连接计算设备被称为 *物联网（IoT）*。IoT 设备让我们的生活更轻松或更美好，但它们也可能带来严重的安全风险。互联网连接的医疗设备可以帮助我们保持健康，并允许制造商远程监控和更新这些设备，但想象一下，如果攻击者能够黑进某人的心脏起搏器或胰岛素泵来伤害用户会怎样。同样，卫星广播、GPS
    导航以及你汽车中的 4G/5G 无线娱乐系统让长途旅行变得更加方便和有趣，但所有这些网络也带来了攻击者可能利用的额外漏洞。想象一下，如果有人黑进了你的汽车并让它在高速公路上突然刹车。
- en: Ethical hackers hack IoT devices to find issues before attackers use them to
    do real damage. In this chapter, you’ll see how it works. You’ll hack into a simulated
    car network, watch the network messages the car sends, and write commands to control
    the car’s dashboard.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 道德黑客会黑进 IoT 设备，以便在攻击者利用这些设备造成实际损害之前发现问题。在这一章中，你将看到这如何运作。你将黑进一个模拟汽车网络，查看汽车发送的网络消息，并编写命令来控制汽车的仪表盘。
- en: Installing the Car-Hacking Software
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装汽车黑客软件
- en: For this hack, we’ll install a software package called *Instrument Cluster Simulator
    (ICSim)*, a virtual dashboard that will let you see and interact with a speedometer,
    turn signals, and door locks just as you would in an actual vehicle. Craig Smith
    (aka zombieCraig) and the OpenGarages team built the ICSim to help hackers and
    researchers learn how to work with automobile networks safely and ethically, without
    damaging or destroying an actual vehicle or unsuspecting pedestrian.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个黑客攻击中，我们将安装一个名为 *仪表集群模拟器（ICSim）* 的软件包，这是一个虚拟仪表盘，让你像在实际车辆中一样查看和互动，比如车速表、转向灯和门锁。Craig
    Smith（又名 zombieCraig）和 OpenGarages 团队创建了 ICSim，旨在帮助黑客和研究人员安全且道德地学习如何与汽车网络互动，而不破坏或摧毁实际的汽车或无辜的行人。
- en: 'Open a terminal window and update Kali’s software package list:'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端窗口并更新 Kali 的软件包列表：
- en: '[PRE0]'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now install ICSim’s dependencies by entering the following:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在通过输入以下内容来安装 ICSim 的依赖项：
- en: '[PRE1]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that both of the `libsdl2` packages are spelled with a lowercase letter
    *L* before the number 2.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，两个 `libsdl2` 包的拼写中都包含一个小写字母 *L*，紧跟着数字 2。
- en: 'Install ICSim like this:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以这种方式安装 ICSim：
- en: '[PRE2]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Set up can-utils on your machine:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的机器上设置 can-utils：
- en: '[PRE3]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Set up the ICSim dashboard simulator software with these commands:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令设置 ICSim 仪表板模拟器软件：
- en: '[PRE4]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now to run our virtual car instrument panel and start hacking!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行我们的虚拟汽车仪表盘并开始黑客攻击吧！
- en: Preparing the Virtual CAN Bus Network
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备虚拟 CAN 总线网络
- en: An automobile’s network is known as a *CAN bus*, or simply *CAN*. The CAN bus
    has been used in most automobiles since the 1990s to control various systems and
    sensors, like steering and braking, radios, air conditioners, and entertainment
    centers. The ICSim software you just installed creates a *virtual CAN (VCAN)*
    bus network that we’ll learn to attack. We’ll create that network now and finish
    setting up your car-hacking environment.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 汽车的网络被称为 *CAN 总线*，简称 *CAN*。自 1990 年代以来，CAN 总线已被大多数汽车用于控制各种系统和传感器，如转向和刹车、收音机、空调和娱乐中心。你刚刚安装的
    ICSim 软件创建了一个 *虚拟 CAN (VCAN)* 总线网络，我们将学习如何攻击它。现在，我们来创建这个网络并完成汽车黑客环境的设置。
- en: 'To set up the VCAN, enter this command at the terminal inside the ICSim folder:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要设置 VCAN，请在 ICSim 文件夹内的终端中输入以下命令：
- en: '[PRE5]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Ensure that VCAN was set up correctly by entering `ip addr` in a terminal. You
    should see your IP address along with a new network named *vcan0*.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端输入 `ip addr`，确保 VCAN 配置正确。你应该能看到你的 IP 地址以及一个名为 *vcan0* 的新网络。
- en: '[PRE6]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Enter the following in the terminal to tell it to first run ICSim using the
    vcan0 network we just created and then wait for our commands:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端输入以下命令，告诉它先使用我们刚创建的 vcan0 网络运行 ICSim，然后等待我们的指令：
- en: '[PRE7]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You should see a simulated dashboard like the one shown in [Figure 10-1](#figure10-1).
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该能看到一个模拟的仪表盘，类似于 [图 10-1](#figure10-1) 中所示。
- en: '![f10001](image_fi/502000c10/f10001.png)'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![f10001](image_fi/502000c10/f10001.png)'
- en: 'Figure 10-1: The ICSim program displays a simulated car dashboard with a speedometer,
    turn signals, and more!'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10-1：ICSim 程序显示了一个模拟的汽车仪表盘，包含速度计、转向信号等！
- en: 'Start the controller app on vcan0:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 vcan0 上的控制器应用程序：
- en: '[PRE8]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The CANBus Control Panel window should open. It looks a lot like a video game
    controller.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应该会打开 CANBus 控制面板窗口。它看起来很像一个视频游戏控制器。
- en: Resize the Control Panel so that the ICSim window is visible by clicking any
    corner of the window and dragging.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整控制面板的大小，使 ICSim 窗口可见，可以点击窗口的任何角落并拖动。
- en: Right-click the top bar of the Control Panel window and select **Always on Top**,
    as shown in [Figure 10-2](#figure10-2).
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击控制面板窗口的顶部栏，选择 **始终置顶**，如 [图 10-2](#figure10-2) 所示。
- en: '![f10002](image_fi/502000c10/f10002.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![f10002](image_fi/502000c10/f10002.png)'
- en: 'Figure 10-2: Keeping the controller app visible and easily accessible'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-2：保持控制器应用程序可见并易于访问
- en: To drive the virtual car, click in the CANBus Control Panel window and then
    use your keyboard to send commands. Available commands are listed in [Table 10-1](#table10-1).
    Press the up arrow to accelerate, use the left and right arrows to control the
    turn signals, and so on.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要驾驶虚拟汽车，点击 CANBus 控制面板窗口，然后使用键盘发送命令。可用的命令列在 [表 10-1](#table10-1) 中。按上箭头加速，使用左右箭头控制转向信号等。
- en: 'Table 10-1: Keyboard Controls for the CANBus Control Panel'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 表 10-1：CANBus 控制面板的键盘控制
- en: '| **Function** | **Key(s)** |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| **功能** | **按键** |'
- en: '| --- | --- |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Accelerate** | Press and hold the up arrow (↑) |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| **加速** | 按住上箭头 (↑) |'
- en: '| **Signal a left or right turn** | Press and hold the left or right arrow
    (←/→) |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| **打左转或右转** | 按住左箭头或右箭头 (←/→) |'
- en: '| **Unlock front-left or front-right door** | right-SHIFT-A or right-SHIFT-B
    |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| **解锁前左或前右门** | 右-SHIFT-A 或 右-SHIFT-B |'
- en: '| **Unlock back-left or back-right door** | right-SHIFT-X or right-SHIFT-Y
    |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| **解锁左后或右后门** | 右-SHIFT-X 或 右-SHIFT-Y |'
- en: '| **Lock all doors** | Hold right-SHIFT + tap left-SHIFT |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| **锁上所有门** | 按住右-SHIFT + 轻按左-SHIFT |'
- en: '| **Unlock all doors** | Hold left-SHIFT + tap right-SHIFT |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| **解锁所有门** | 按住左-SHIFT + 轻按右-SHIFT |'
- en: The controller app is the only way to interact with the VCAN—unless we hack
    it.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器应用程序是与 VCAN 交互的唯一方式——除非我们黑进它。
- en: Hacking the Car
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 黑客入侵汽车
- en: 'Our car-hacking adventure will follow the same steps you’d use to test the
    security of most IoT devices:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的汽车黑客冒险将遵循测试大多数 IoT 设备安全性的相同步骤：
- en: Use a program to view and record traffic on the vcan0 network between the controller
    app and the dashboard. This kind of program is called a *packet sniffer* because
    messages sent on the network are called *packets*.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用一个程序查看并记录控制器应用程序与仪表盘之间在 vcan0 网络上的流量。这类程序被称为 *数据包嗅探器*，因为在网络上传输的消息被称为 *数据包*。
- en: Identify what network packets and commands control what car systems or functions.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定哪些网络数据包和命令控制哪些汽车系统或功能。
- en: Take control of the car by resending the packets you’ve captured back over the
    vcan0 network or by writing your own commands from your terminal.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将你捕获的数据包重新发送回 vcan0 网络，或通过在终端中编写你自己的命令，来控制汽车。
- en: Viewing Packets
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看数据包
- en: We’ll use `cansniffer`, the packet sniffer built into can-utils, to listen to
    our simulated car network.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `cansniffer`，can-utils 内置的数据包嗅探器，来监听我们模拟的汽车网络。
- en: 'In your terminal window, launch `cansniffer` with the following command:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的终端窗口中，使用以下命令启动 `cansniffer`：
- en: '[PRE9]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Make the terminal window tall and narrow (as shown in [Figure 10-3](#figure10-3))
    to make the `cansniffer` messages easier to see. You may also need to reduce the
    font size by pressing CTRL and − a few times.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将终端窗口调整为高而窄（如 [图 10-3](#figure10-3) 所示），以便更容易看到 `cansniffer` 消息。你可能还需要通过按 CTRL
    和 − 减小字体大小几次。
- en: Click in the CANBus Control Panel window and send some commands to the virtual
    car. Try accelerating, using the turn signals, and so on.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 CANBus 控制面板窗口，并向虚拟汽车发送一些命令。尝试加速、使用转向信号等。
- en: The `cansniffer` tool intercepts packets being sent on vcan0 between the controller
    app and the dashboard and displays them in the terminal window. Each line in the
    window represents one packet. The network transmits several hundred packets per
    second, so they go by quickly.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`cansniffer` 工具拦截在 vcan0 上由控制器应用和仪表板之间发送的数据包，并在终端窗口中显示它们。窗口中的每一行表示一个数据包。网络每秒传输数百个数据包，因此它们会很快通过。'
- en: 'Let’s look at an example packet to see what information we can find. Here’s
    one of the packets shown in [Figure 10-3](#figure10-3):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个示例数据包，看看我们能找到什么信息。以下是[图 10-3](#figure10-3)中展示的一个数据包：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![f10003](image_fi/502000c10/f10003.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![f10003](image_fi/502000c10/f10003.png)'
- en: 'Figure 10-3: The `cansniffer` packet sniffer shows messages on our vcan0 network.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-3：`cansniffer` 数据包嗅探器显示我们 vcan0 网络上的消息。
- en: The first column is a *timestamp* 1 that represents when the packet was sent.
    The second column 2 is the ID number of the system a message is being sent to
    or from. As we’ll discover, CAN ID# 244 represents the speedometer. The third
    column 3 is the CAN message data, represented by hexadecimal values, and the fourth
    column 4 contains the same data represented in printable characters.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 第一列是一个 *时间戳* 1，表示数据包发送的时间。第二列 2 是系统的 ID 号码，表示消息的发送或接收方。正如我们将要发现的，CAN ID# 244
    代表了速度计。第三列 3 是 CAN 消息数据，使用十六进制值表示，第四列 4 包含以可打印字符表示的相同数据。
- en: 'Experienced hackers know how to analyze the traffic picked up by a packet sniffer
    to determine what different packets mean. This takes practice and patience. For
    now, try accelerating a few times by pressing the up arrow in the controller app
    while watching for ID# 244 in the terminal window. Look for changing values in
    the message data column as you speed up and slow down. Recognizing this pattern
    is a clue that ID #244 refers to the speedometer.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '经验丰富的黑客知道如何分析数据包嗅探器捕获的流量，以确定不同数据包的含义。这需要练习和耐心。现在，尝试在控制器应用中多次按向上箭头加速，并观察终端窗口中的
    ID# 244。观察消息数据列中随着你加速和减速时的变化值。识别这个模式是一个线索，表明 ID #244 代表速度计。'
- en: Now press the turn signals (the left and right arrows) and watch for ID# 188\.
    It should appear when you touch the turn signals and disappear a few moments after
    you turn them off. Lock and unlock the doors using the left and right SHIFT keys,
    or the right SHIFT key plus X, Y, A, and B, and watch what changes in the data
    next to ID# 19B. The row for 19B should appear only for a moment when you’re locking
    or unlocking doors.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按下转向灯（左箭头和右箭头），并观察 ID# 188。当你触碰转向灯时，它应该会出现，并在你关闭转向灯后几秒钟消失。使用左、右 SHIFT 键或右
    SHIFT 键加 X、Y、A 和 B 键锁定和解锁车门，并观察 ID# 19B 旁边的数据发生了什么变化。19B 的行应该只会在你锁门或解锁门时短暂出现。
- en: Press CTRL-C in the terminal window to stop `cansniffer` when you’ve experimented
    enough. Don’t worry if the packets were going by too quickly for you to pick out
    specific IDs. The next step will be to record some packets so you can study them
    in your own time.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端窗口中按下 CTRL-C 停止 `cansniffer`，当你已经进行足够的实验时。如果数据包发送得太快，你来不及挑选出具体的 ID，也不必担心。下一步是记录一些数据包，这样你可以在自己有空时进行研究。
- en: Capturing Packets
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 捕获数据包
- en: The can-utils tool `candump` records messages from a CAN bus so that we can
    analyze them further or even replay them.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: can-utils 工具 `candump` 用于记录来自 CAN 总线的消息，以便我们可以进一步分析或甚至重新播放这些消息。
- en: 'To start recording packets from vcan0, enter this command:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始从 vcan0 记录数据包，请输入以下命令：
- en: '[PRE11]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `-l` option (that’s a hyphen and a lowercase *L*) is short for *log*, because
    we’re asking `candump` to log its output by saving the data into a file.
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`-l` 选项（即连字符和小写 *L*）是 *log* 的缩写，因为我们要求 `candump` 通过将数据保存到文件中来记录其输出。'
- en: Switch back to the CANBus Control Panel window and drive for a few seconds.
    Speed up and slow down, use your left and right turn signals, and unlock and lock
    the doors.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回 CANBus 控制面板窗口，开车几秒钟。加速和减速，使用左、右转向灯，锁定和解锁车门。
- en: Press CTRL-C to stop recording.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 CTRL-C 停止记录。
- en: 'In the terminal window, enter `ls` (short for *list*) to show the contents
    of the *ICSim* directory. You should see a new file in the format `candump-``YYYY``-``MM``-``DD``_``time``.log`
    (time is defined in hours, minutes, and seconds—`HHMMSS`), such as in this example:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端窗口中输入 `ls`（即 *list* 的缩写），以显示 *ICSim* 目录的内容。你应该能看到一个新的文件，格式为 `candump-``YYYY``-``MM``-``DD``_``time``.log`（时间以小时、分钟和秒表示——`HHMMSS`），如下所示：
- en: '[PRE12]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `candump` logfile is a simple text file. You can view the file in a text
    editor and use CTRL-F to find specific CAN ID values, like 188 for the turn signals,
    as shown in [Figure 10-4](#figure10-4).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`candump`日志文件是一个简单的文本文件。你可以在文本编辑器中查看该文件，并使用CTRL-F来查找特定的CAN ID值，比如用于转向信号灯的188，如[图10-4](#figure10-4)所示。'
- en: '![f10004](image_fi/502000c10/f10004.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![f10004](image_fi/502000c10/f10004.png)'
- en: 'Figure 10-4: Searching for specific CAN ID values in the Mousepad text editor'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-4：在Mousepad文本编辑器中搜索特定的CAN ID值
- en: Replaying Packets
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重放数据包
- en: By resending the packets we captured in the logfile on the vcan0 network, we
    can make the dashboard “relive” the recorded driving session. This kind of hack
    is called a *replay attack*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在vcan0网络上重新发送我们在日志文件中捕获的数据包，我们可以让仪表盘“重温”录制的驾驶过程。这种攻击被称为*重放攻击*。
- en: First, close the CANBus Control Panel. The controller window sends signals constantly
    even when idle, and we want to use only the packets we’ve captured to control
    the dashboard.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，关闭CANBus控制面板。即使在空闲时，控制器窗口也会不断发送信号，我们只希望使用我们捕获的数据包来控制仪表盘。
- en: 'Enter the following command into the terminal window to replay the logfile
    with the `canplayer` tool, replacing `candump-``YYYY``-``MM``-``DD``_``time``.log`
    with your logfile name:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端窗口中输入以下命令，通过`canplayer`工具重放日志文件，将`candump-``YYYY``-``MM``-``DD``_``time``.log`替换为你的日志文件名：
- en: '[PRE13]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Your ICSim dashboard should begin moving exactly the same way it did when you
    captured the packets originally. In [Figure 10-5](#figure10-5), for example, I’m
    turning right and unlocking all four doors while driving over 90 miles per hour!
    (I don’t recommend doing this in your real car.)
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的ICSim仪表盘应该会像你最初捕获数据包时一样开始移动。例如，在[图10-5](#figure10-5)中，我正在右转并以每小时90英里的速度解锁四个车门！（我不建议你在真实的汽车中尝试这样做。）
- en: '![f10005](image_fi/502000c10/f10005.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![f10005](image_fi/502000c10/f10005.png)'
- en: 'Figure 10-5: The replayed packets are controlling the dashboard.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-5：重放的数据包正在控制仪表盘。
- en: Many IoT devices are vulnerable to replay attacks like this one. For example,
    when they first came out, many Bluetooth door locks were subject to such attacks.
    With a laptop running a Bluetooth wireless sniffer (like Kismet, which is included
    with Kali) and a physical Bluetooth antenna (like the Ubertooth One for around
    $100), you could capture packets while someone was opening the door with their
    smartphone and replay those packets to unlock the door anytime you wanted. Nowadays,
    to prevent replay attacks, a special value is added to each message so the system
    can tell whether it’s receiving a new message or one it’s seen before.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 许多物联网设备容易受到像这样的重放攻击。例如，当它们首次发布时，许多蓝牙门锁就容易遭遇这种攻击。只需用一台运行蓝牙无线嗅探器（如Kismet，它是Kali中的一部分）和一根物理蓝牙天线（如价格约100美元的Ubertooth
    One）配合笔记本电脑，你就能在某人用智能手机打开门时捕获数据包，并在任何时候重放这些数据包以解锁门。如今，为了防止重放攻击，每条消息都会添加一个特殊的值，以便系统能够识别它是接收到的新消息，还是以前见过的消息。
- en: Sending New Commands
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发送新命令
- en: Car hackers can analyze `candump` logfiles to decipher CAN ID numbers and figure
    out what the data values in each message mean. Armed with that knowledge, hackers
    can send specific commands to the system to make the car do what they want. For
    example, sending the message `02000000` to ID# 188 turns on the right turn signal.
    Let’s try it out!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 汽车黑客可以分析`candump`日志文件来解码CAN ID号，并弄清楚每条消息中的数据值是什么意思。有了这些知识，黑客就可以向系统发送特定命令，使汽车做出他们想要的行为。例如，向ID#188发送消息`02000000`就能打开右转向信号灯。让我们试试看！
- en: 'Enter the following command into the terminal with ICSim open and the controller
    window closed:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在ICSIM打开且控制器窗口关闭的情况下，在终端输入以下命令：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We use `cansend` to send a CAN message to vcan0\. The message contains the ID
    number of the turn signals (`188`), then the hash mark (`#`) as a separator, and
    finally the data value that represents the right turn signal (`02000000`). The
    right turn signal on your dashboard should light up green.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`cansend`将CAN消息发送到vcan0\。消息包含转向信号灯的ID号（`188`），然后是哈希符号（`#`）作为分隔符，最后是表示右转向信号灯的数值（`02000000`）。你的仪表盘上的右转向信号灯应该会亮起绿色。
- en: 'If you want to turn on the left signal instead, send this message:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想打开左转向信号灯，发送以下信息：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To turn off the signals, send the message `188#00000000`. Or use this command
    to turn *on* both signals at the same time:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要关闭信号灯，发送消息`188#00000000`。或者，使用此命令同时打开两个信号灯：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now take a look at the data values in CAN packets related to the speedometer
    (ID# 244) in your `candump` logfile. It looks like the last four hexadecimal digits
    go up as the speed increases. The data value `0000000000` is 0 miles per hour,
    and `0000003894` corresponds to about 90 miles per hour. Let’s see what the value
    `0000009999` would do:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看看`candump`日志文件中与速度表（ID# 244）相关的CAN数据包中的数据值。看起来最后四个十六进制数字随着速度的增加而上升。数据值`0000000000`表示0英里每小时，`0000003894`大约对应每小时90英里。我们来看看`0000009999`会产生什么效果：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see in [Figure 10-6](#figure10-6), the speedometer jumps to 240 miles
    per hour! You can go even higher using hexadecimal—try changing the last four
    digits to `A000`, `B000`, or even `FFFF`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图10-6](#figure10-6)所示，速度表跳到了每小时240英里！你甚至可以通过十六进制值使其更高——试着将最后四位数字改为`A000`、`B000`，甚至`FFFF`。
- en: '![f10006](image_fi/502000c10/f10006.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![f10006](image_fi/502000c10/f10006.png)'
- en: 'Figure 10-6: We can control the dashboard by sending signals directly to the
    CAN bus using `cansend`.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-6：我们可以通过直接向CAN总线发送信号，使用`cansend`控制仪表盘。
- en: 'Similarly, we can lock all the doors by sending the message `19B#00000F000000`
    and unlock all the doors with the message `19B#000000000000` (that’s 12 zeros
    after the hash mark):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们可以通过发送消息`19B#00000F000000`来锁定所有车门，通过发送消息`19B#000000000000`来解锁所有车门（哈希符号后是12个零）：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Our virtual car thinks it’s turning both left and right and unlocking all four
    doors while zipping around at 240 miles per hour!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的虚拟汽车认为它正在向左和向右转弯，并且在以每小时240英里的速度飞驰的同时解锁了四个车门！
- en: How Attackers Hack Real Cars
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 攻击者如何黑客攻击真实汽车
- en: To use the same `can-utils` tools and skills you just learned about to hack
    a real car, all an attacker needs is a laptop running Kali Linux and a cable to
    connect the laptop to the *on-board diagnostic, version two (OBD-II)* port, located
    under the steering wheel in most cars. Many such cables are available for under
    $100\. However, real-world car hacking is a serious matter that can lead to significant
    property damage or injury. Researchers practice car hacking in controlled conditions
    to look for security vulnerabilities. If you practice car hacking, be sure to
    do it safely in your garage or driveway or on a closed course; never hack a car
    on the road or anywhere someone could get hurt.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用你刚刚学到的`can-utils`工具和技巧来黑客攻击一辆真实的汽车，攻击者只需要一台运行Kali Linux的笔记本电脑和一根电缆，将笔记本电脑连接到大多数汽车方向盘下的*车载诊断第二版（OBD-II）*端口。许多这样的电缆价格低于100美元。然而，现实中的汽车黑客攻击是一个严肃的问题，可能会导致重大的财产损失或伤害。研究人员在受控环境中进行汽车黑客攻击，寻找安全漏洞。如果你进行汽车黑客攻击，请确保在车库或车道，或在封闭的赛道上进行；绝不要在公路上或任何有人可能受伤的地方进行黑客攻击。
- en: Car hackers don’t always have to maintain a wired connection with a vehicle
    to send commands. After finding useful CAN ID numbers and messages by connecting
    directly to a particular make and model of car, an attacker or security researcher
    could attempt to connect to the car wirelessly via Bluetooth, Wi-Fi, or 4G/5G
    to try to send CAN messages remotely. One high-profile hack used the driver’s
    hands-free smartphone connection to take remote control of the car through the
    car’s dashboard entertainment system. Another used Tesla’s 4G wireless over-the-air
    update system to install malicious software and tamper with the car from far away.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 汽车黑客并不总是需要保持与车辆的有线连接才能发送命令。在通过直接连接到特定品牌和型号的汽车找到有用的CAN ID号码和信息后，攻击者或安全研究人员可以尝试通过蓝牙、Wi-Fi或4G/5G无线连接到汽车，尝试远程发送CAN信息。有一起备受关注的黑客攻击事件利用了驾驶员的免提智能手机连接，通过汽车的仪表盘娱乐系统远程控制了汽车。另一例则使用了特斯拉的4G无线空中更新系统，远程安装恶意软件并篡改了汽车。
- en: One piece of good news is that every car is slightly different, and the CAN
    ID numbers in one car usually aren’t the same as the CAN IDs in another car. Every
    manufacturer uses different codes, and sometimes every model from the same manufacturer
    uses a different set of codes, and those codes can change from one model year
    to the next! Plus, there are several different types of controller networks on
    modern cars; the CAN is just the most common one. In short, it takes a lot of
    patience to crack the codes on a real car.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息之一是，每辆车都有些微不同，一辆车中的CAN ID号码通常与另一辆车的CAN ID不同。每个制造商使用不同的代码，有时同一制造商的每个型号使用一组不同的代码，这些代码可能会在不同的车型年之间发生变化！此外，现代汽车上有几种不同类型的控制器网络；CAN只是最常见的一种。简而言之，破解真实汽车上的代码需要极大的耐心。
- en: The Takeaway
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: In this chapter, we used ICSim and `can-utils` to hack a virtual car network.
    We set up these tools on our Kali virtual machine. Then we sniffed network traffic
    with `cansniffer` to see what CAN data looks like. We captured CAN signals using
    `candump`, and then we replayed those packets using `canplayer` to change the
    dashboard without using the car’s keyboard controls. We also sent specific CAN
    messages using `cansend` to use the turn signals, change the speedometer, and
    unlock the doors directly from the command line. Finally, we learned that it takes
    only about $100 worth of tools and a lot of patience to hack a real car.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用了 ICSim 和 `can-utils` 来破解虚拟汽车网络。我们在 Kali 虚拟机上设置了这些工具。然后，我们使用 `cansniffer`
    嗅探网络流量，查看 CAN 数据的样子。我们使用 `candump` 捕获了 CAN 信号，接着使用 `canplayer` 播放这些数据包，改变仪表盘，而无需使用汽车的键盘控制。我们还通过
    `cansend` 发送了特定的 CAN 消息，直接从命令行操作转向灯、改变车速表、解锁车门。最后，我们了解到，破解一辆真实的汽车只需要大约 $100 的工具和大量的耐心。
