- en: '**9'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**9  '
- en: BANKING TROJANS**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**银行木马**  '
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)  '
- en: Attackers use Android banking trojans (ABTs) to steal money from unsuspecting
    victims by draining their bank accounts or capturing credit card information,
    then using it to make fraudulent purchases. For example, some ABTs harvest a user’s
    credentials by placing a fake window over the user’s banking app. When the user
    enters their credentials into the malicious window, it captures the data, logs
    into the user’s account, and transfers funds to the attacker.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '攻击者使用Android银行木马（ABT）来盗取毫无戒心的受害者的钱财，通过清空他们的银行账户或捕获信用卡信息，并利用这些信息进行欺诈性购买。例如，一些ABT通过在用户的银行应用上放置一个虚假的窗口来收集用户凭证。当用户将凭证输入恶意窗口时，它会捕获这些数据，登录到用户账户，并将资金转移给攻击者。  '
- en: Other ABTs monitor for users visiting bank websites. When they try to access
    the legitimate website, the malware redirects them to a fake one that looks identical.
    Once the hapless user enters their credentials, the attacker can use these to
    redirect funds from the victim’s account to theirs. This is often done via transfers
    through a large number of intermediate accounts, to reduce the likelihood of detection.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 其他ABT监控用户访问银行网站。当他们试图访问合法网站时，恶意软件会将他们重定向到一个看起来一模一样的假网站。一旦不幸的用户输入凭证，攻击者便可以利用这些凭证将资金从受害者账户转移到自己的账户。这通常通过许多中介账户进行转账，以减少被检测到的可能性。
- en: In this chapter, you’ll learn about some well-known ABT families and see which
    features machine learning algorithms use to separate ABTs from goodware, as well
    as from other categories of Android malware.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '在本章中，您将了解一些著名的ABT家族，并查看机器学习算法使用哪些特征来区分ABT与良性软件以及其他类别的Android恶意软件。  '
- en: '**Banking Trojan Families**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**银行木马家族**  '
- en: This section introduces you to some important ABT families. Note that the source
    code for several of these applications has been leaked, causing many variants
    to appear. The slight differences between samples make placing individual APKs
    into families more difficult than for other malware categories.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '本节介绍了一些重要的ABT家族。请注意，其中几个应用程序的源代码已经泄露，导致出现了许多变种。由于样本之间的细微差异，将单独的APK文件归类到家族中比其他恶意软件类别更加困难。  '
- en: BankBot, a common malware family with many variants dating back to at least
    2014, was distributed via multiple types of apps, including games and apps that
    provided estimates of exchange rates for converting crypto-currencies to hard
    currencies. Though the apps did provide the advertised service, they also included
    BankBot code. This code scanned the infected device, looking for installed banking
    apps for which it had overlay screens. When the victim launched the banking app,
    BankBot placed a user input screen over the real app to harvest banking credentials.
    It also captured incoming text messages and responded to messages requesting two-factor
    authentication.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 'BankBot是一个常见的恶意软件家族，具有多个变种，最早可追溯至2014年，通常通过多种类型的应用程序传播，包括游戏和提供加密货币与法币兑换率估算的应用程序。尽管这些应用确实提供了宣传的服务，但它们也包含了BankBot代码。该代码扫描感染的设备，寻找已安装的银行应用程序，并为这些应用提供覆盖屏幕。当受害者启动银行应用时，BankBot会将一个用户输入屏幕覆盖在真实应用之上，以收集银行凭证。它还会捕获收到的短信并回应请求双因素认证的消息。  '
- en: Cerberus was first discovered in 2019 by ThreatFabric and described in the blog
    post “Cerberus - A New Banking Trojan from the Underworld.” It primarily targeted
    customers in Italy, Russia, Spain, and other countries in the European Union.
    Like BankBot, Cerberus disguised itself as a legitimate app for currency conversions
    or similar purposes and used overlay screens to capture banking credentials and
    SMS permissions to intercept two-factor authentication messages sent by the bank.
    Recently, developers released Cerberus’s source code on various hacker forums,
    leading to a proliferation of variants as different groups sought to monetize
    it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 'Cerberus首次由ThreatFabric于2019年发现，并在博客文章《Cerberus - 来自地下世界的新型银行木马》中进行了描述。它主要针对意大利、俄罗斯、西班牙和其他欧盟国家的用户。像BankBot一样，Cerberus伪装成一个合法的货币兑换或类似目的的应用程序，并使用覆盖屏幕来捕获银行凭证，以及利用短信权限来拦截银行发送的双因素认证消息。最近，开发者将Cerberus的源代码发布到各种黑客论坛，导致其变种大量涌现，不同的团体试图将其商业化。  '
- en: The FakeSpy ABT family compromises the phones of its victim by sending them
    text messages about packages that weren’t delivered. Such phishing messages are
    called *smishing*, as the phishing lures are delivered via SMS. The victims click
    a link included in the message, which asks them to download an app that looks
    legitimate but in fact includes the FakeSpy malware. Once the victim’s device
    has been compromised, the malware steals personal information such as their contact
    list and information about their bank and cryptocurrency accounts. FakeSpy was
    first described by Trend Micro in a 2018 blog post, “FakeSpy Targets Japanese
    and Korean-Speaking Users.”
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: FakeSpy ABT 家族通过向受害者发送有关未投递包裹的短信来入侵他们的手机。这类钓鱼短信被称为 *smishing*，因为钓鱼诱饵是通过 SMS
    发送的。受害者点击消息中的链接，链接会要求他们下载一个看似合法但实际上包含 FakeSpy 恶意软件的应用。一旦受害者的设备被攻破，恶意软件便会窃取个人信息，如他们的联系人列表以及银行和加密货币账户信息。FakeSpy
    最早由趋势科技在 2018 年的博客文章《FakeSpy 目标为讲日语和韩语的用户》中描述。
- en: The Marcher family, also known as Marchcaban, has been around since at least
    2013, when F-Secure discovered apps targeting the Spanish bank Banca March. Some
    versions operate by telling the victim that their Flash player needs updating.
    Clicking the link they provide to perform the update downloads the trojan app.
    Marcher also tries to block a number of mobile malware detection products that
    may be installed on the user’s device. Like many of the other ABTs, Marcher uses
    screen overlays to steal user credentials and intercepts incoming two-factor authentication
    requests over SMS to gain access to the user’s account. We’ll use Marcher as an
    example throughout this chapter to illustrate many common ABT behaviors.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Marcher 家族，也被称为 Marchcaban，自 2013 年至少就开始存在，当时 F-Secure 发现了一些针对西班牙银行 Banca March
    的应用程序。某些版本通过告知受害者其 Flash 播放器需要更新来运作。点击他们提供的链接执行更新会下载特洛伊木马应用程序。Marcher 还尝试阻止用户设备上可能安装的多款移动恶意软件检测产品。像许多其他
    ABT 一样，Marcher 使用屏幕覆盖层窃取用户凭证，并通过拦截通过 SMS 发送的两步验证请求来获得对用户账户的访问权限。在本章中，我们将以 Marcher
    为例，说明许多常见的 ABT 行为。
- en: Medusa is a recent malware family that compromises victims’ devices by sending
    smishing messages encouraging them to install a variety of legitimate-sounding
    apps containing the malware. Medusa is capable of keylogging and intercepting
    messages, as well as audio and video. Like most banking trojans, one of its capabilities
    is reading and responding to two-factor authentication messages from legitimate
    banking apps. ThreatFabric first described it in the 2021 blog post “The Rage
    of Android Banking Trojans.”
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Medusa 是一个新近出现的恶意软件家族，它通过发送鼓励用户安装包含恶意软件的各种听起来合法的应用程序的 smishing 消息来入侵受害者的设备。Medusa
    能够进行键盘记录和拦截消息，以及音频和视频记录。像大多数银行木马一样，它的一个功能是读取并响应来自合法银行应用的两步验证消息。ThreatFabric 在其
    2021 年的博客文章《Android 银行木马的愤怒》中首次描述了它。
- en: Zitmo is an interesting ABT, as it was found on mobile operating systems like
    Symbian, BlackBerry, and Windows Mobile as early as 2011 before coming to Android.
    A mobile version of the well-known Zeus malware for Windows, Zitmo (short for
    *Zeus in the Mobile*) operates in conjunction with a computer already infected
    by Zeus. Zeus sends an SMS to the user’s phone asking them to download an app,
    infecting the device. Then, when the attacker tries to steal money from the user’s
    bank account or make cash transactions, Zitmo forwards the mobile transaction
    authentication number (mTAN) code sent by the bank to the attacker’s phone, which
    can then use the code to authenticate transactions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Zitmo 是一个有趣的 ABT，因为它早在 2011 年就出现在 Symbian、BlackBerry 和 Windows Mobile 等移动操作系统上，之后才传播到
    Android。Zitmo 是广为人知的 Windows Zeus 恶意软件的移动版本，Zitmo（即 *Zeus in the Mobile*）与已经被
    Zeus 感染的计算机一起运作。Zeus 向用户的手机发送 SMS，要求他们下载一个应用，从而感染设备。接着，当攻击者试图从用户的银行账户窃取资金或进行现金交易时，Zitmo
    会将银行发送的移动交易认证号码（mTAN）转发到攻击者的手机，攻击者可以使用该验证码来验证交易。
- en: One additional ABT worth mentioning is Xbot, which was identified in 2015 when
    it started spreading through apps downloaded from malicious URLs. Once installed
    and run, Xbot followed the playbook of other ABTs by using window overlays and
    reading two-factor authentication text messages from banks. In addition, it could
    encrypt data on the device and make ransom demands to the user.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个值得一提的 ABT 是 Xbot，它在 2015 年被发现，并开始通过从恶意网址下载的应用程序传播。安装并运行后，Xbot 跟随其他 ABT 的操作手册，通过窗口覆盖层并读取银行的两步验证短信。此外，它还能够加密设备上的数据并向用户提出赎金要求。
- en: You might want to investigate other well-known ABT families on your own, including
    Asacub, FakeToken, and Svpeng, all of which have wreaked considerable havoc over
    the years.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望自己调查其他著名的 ABT 家族，包括 Asacub、FakeToken 和 Svpeng，它们这些年来造成了相当大的破坏。
- en: '**Banking Trojans vs. Goodware**'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**银行木马与良性软件**'
- en: '[Figure 9-1](ch09.xhtml#ch9fig1) shows the top 20 features for separating ABTs
    from goodware using the Extra-Trees classifier discussed in [Chapter 7](ch07.xhtml).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 9-1](ch09.xhtml#ch9fig1) 显示了使用 [第 7 章](ch07.xhtml) 中讨论的 Extra-Trees 分类器分离
    ABT 和良性软件的前 20 个特征。'
- en: Nine of these features are permission-related, and nine are advanced features
    related to suspicion scores, suspicion ranks, and feature clustering. Just two
    involve specific types of API calls.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特征中有九个与权限相关，九个是与疑似分数、疑似等级和特征聚类相关的高级特征。仅有两个涉及特定类型的 API 调用。
- en: '***SMS Permission Features***'
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***短信权限特征***'
- en: 'You should immediately see that the SMS-related permissions `SEND_SMS`, `RECEIVE_SMS`,
    `WRITE_SMS`, and `READ_SMS` play a huge role in separating ABTs from goodware.
    [Table 9-1](ch09.xhtml#ch9tab1) shows that virtually every malware family we discussed
    earlier in this chapter requests all of these permissions, with two exceptions:
    BankBot doesn’t request `READ_SMS` and Xbot doesn’t request `WRITE_SMS`.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能立即看到，涉及短信的权限 `SEND_SMS`、`RECEIVE_SMS`、`WRITE_SMS` 和 `READ_SMS` 在区分 ABT 和良性软件中起到了巨大作用。[表
    9-1](ch09.xhtml#ch9tab1) 显示，本章前面讨论的几乎所有恶意软件家族都会请求这些权限，只有两个例外：BankBot 不请求 `READ_SMS`，Xbot
    不请求 `WRITE_SMS`。
- en: '**Table 9-1:** SMS-Related Permissions Requested by Major ABT Families'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 9-1：主要 ABT 家族请求的短信相关权限**'
- en: '| **Malware** | `**SEND_SMS**` | `**WRITE_SMS**` | `**RECEIVE_SMS**` | `**READ_SMS**`
    |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| **恶意软件** | `**SEND_SMS**` | `**WRITE_SMS**` | `**RECEIVE_SMS**` | `**READ_SMS**`
    |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| BankBot | Yes | Yes | Yes | No |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| BankBot | 是 | 是 | 是 | 否 |'
- en: '| Cerberus | Yes | Yes | Yes | Yes |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| Cerberus | 是 | 是 | 是 | 是 |'
- en: '| FakeSpy | Yes | Yes | Yes | Yes |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| FakeSpy | 是 | 是 | 是 | 是 |'
- en: '| Marcher | Yes | Yes | Yes | Yes |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| Marcher | 是 | 是 | 是 | 是 |'
- en: '| Medusa | Yes | Yes | Yes | Yes |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| Medusa | 是 | 是 | 是 | 是 |'
- en: '| Xbot | Yes | No | Yes | Yes |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| Xbot | 是 | 否 | 是 | 是 |'
- en: '| Zitmo | Yes | Yes | Yes | Yes |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| Zitmo | 是 | 是 | 是 | 是 |'
- en: 'The classifier’s output shows that the percentage of ABTs that request these
    permissions is very high: 70 to 85 percent, compared to less than 5 percent of
    goodware. The reason for this is simple: most banking apps implement two-factor
    authentication via a code sent to the user’s phone, so ABTs need to intercept
    these messages to pass the authentication before attempting any fraudulent action.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 分类器的输出显示，要求这些权限的 ABT 百分比非常高：70% 到 85%，而良性软件的比例不到 5%。原因很简单：大多数银行应用通过发送验证码到用户的手机来实现双重身份验证，因此
    ABT 需要拦截这些消息，在进行任何欺诈行为之前完成身份验证。
- en: '![Image](../images/ch09fig01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/ch09fig01.jpg)'
- en: '*Figure 9-1: Top 20 features that best distinguish ABTs from goodware*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-1：最佳区分 ABT 和良性软件的前 20 个特征*'
- en: '***Other Permission Features***'
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***其他权限特征***'
- en: ABTs also request many non-SMS permissions. As an example, [Listing 9-1](ch09.xhtml#ch9lis1)
    shows the list of permissions requested by the BankBot malware *com.interactive.crutch*
    (v1, 9b14).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: ABT 还会请求许多非短信权限。例如，[清单 9-1](ch09.xhtml#ch9lis1) 显示了 BankBot 恶意软件 *com.interactive.crutch*（v1，9b14）请求的权限列表。
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 9-1: All permissions requested by BankBot*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 9-1：BankBot 请求的所有权限*'
- en: You can see that BankBot acquires permissions such as `VIBRATE` and `DISABLE_KEYGUARD`.
    The app uses `VIBRATE` to draw the user’s attention to a fake error message, enticing
    them to grant the app accessibility permissions. This step enables advanced malware
    features that are typically off-limits to regular applications. The `DISABLE_KEYGUARD`
    permission is used to remove the phone’s lock screen to, for example, force a
    user interface event that the malware wants to process.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，BankBot 获取了如 `VIBRATE` 和 `DISABLE_KEYGUARD` 等权限。该应用使用 `VIBRATE` 来吸引用户注意假错误信息，诱使他们授予应用访问权限。这个步骤启用了通常对普通应用程序禁用的高级恶意软件功能。`DISABLE_KEYGUARD`
    权限用于移除手机的锁屏，例如强制执行恶意软件想要处理的用户界面事件。
- en: Over 90 percent of ABTs request `READ_PHONE_STATE`, a permission also common
    in rooting malware, compared to around 30 percent of goodware. ABTs can use this
    permission to capture private data about the victim’s phone, such as its IMEI
    number. As mentioned in [Chapter 7](ch07.xhtml), this type of information is critical
    for mobile payment apps that need to verify the identify of the device sending
    a payment request. With the exception of Cerberus, all ABT families discussed
    earlier in this chapter request this permission.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 超过 90% 的 ABT 请求 `READ_PHONE_STATE` 权限，这也是根植恶意软件中常见的权限，而良性软件请求此权限的比例大约为 30%。ABT
    可以使用此权限捕获受害者手机的私人数据，例如其 IMEI 号。如[第 7 章](ch07.xhtml)中提到的，这类信息对需要验证发送支付请求的设备身份的移动支付应用程序至关重要。除
    Cerberus 外，本章前面讨论的所有 ABT 家族都请求此权限。
- en: 'Another permission popular with rooting malware that is commonly requested
    by ABTs is `SYSTEM_ALERT_WINDOW`: over 60 percent of ABTs request this, compared
    to about 10 percent of goodware. Giving an app this permission lets it display
    pop-up alert windows. This functionality has clear value for an ABT; it enables
    it to show bogus banking app screens on top of real banking apps. Of the seven
    ABTs discussed earlier in this chapter, FakeSpy, Medusa, Xbot and Zitmo request
    this permission, while BankBot, Cerberus, and Marcher do not.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的、与根植恶意软件相关的权限是 `SYSTEM_ALERT_WINDOW`：超过 60% 的 ABT 请求此权限，而良性软件请求此权限的比例约为
    10%。赋予应用此权限可以让其显示弹出警告窗口。这项功能对 ABT 来说具有明显价值；它使其能够在真实银行应用程序之上显示伪造的银行应用界面。在本章前面讨论的七个
    ABT 中，FakeSpy、Medusa、Xbot 和 Zitmo 请求此权限，而 BankBot、Cerberus 和 Marcher 则没有请求此权限。
- en: The `GET_TASKS` permission lets an app identify the running processes on a device.
    As you can see from the classifier’s output, ABTs are far more likely to request
    this permission than goodware; almost 80 percent of ABTs request it, versus around
    15 percent of goodware. Our experience shows that many banking trojans request
    the `GET_TASKS` permission to watch for the launching of legitimate banking apps,
    so they can swoop in and overlay their phishing windows. Android has severely
    restricted this feature for precisely that reason. Of the seven ABT families mentioned
    earlier in this chapter, FakeSpy, Marcher, Medusa, and Xbot request this permission.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`GET_TASKS` 权限让应用能够识别设备上运行的进程。从分类器的输出可以看出，ABT 请求此权限的可能性远高于良性软件；几乎 80% 的 ABT
    请求此权限，而良性软件请求此权限的比例约为 15%。我们的经验表明，许多银行木马请求 `GET_TASKS` 权限，以监视合法银行应用的启动，从而迅速介入并覆盖其钓鱼窗口。正因如此，Android
    严格限制了此功能。在本章前面提到的七个 ABT 家族中，FakeSpy、Marcher、Medusa 和 Xbot 请求此权限。'
- en: A permission that ABTs frequently request but rooting malware doesn’t is the
    `CHANGE_NETWORK_STATE` permission, which enables an app to connect to a Wi-Fi
    network. Over 40 percent of ABTs request this permission, compared to less than
    5 percent of goodware. Of the ABT families mentioned we introduced earlier, Marcher,
    Medusa, Xbot, and Zitmo request this permission. Interestingly, we haven’t witnessed
    other ABTs using this permission to perform malicious tasks.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: ABT 常请求但根植恶意软件不请求的一个权限是 `CHANGE_NETWORK_STATE` 权限，它使应用能够连接到 Wi-Fi 网络。超过 40%
    的 ABT 请求此权限，而良性软件请求此权限的比例不到 5%。我们之前介绍的 ABT 家族中，Marcher、Medusa、Xbot 和 Zitmo 请求此权限。有趣的是，我们还没有见过其他
    ABT 利用此权限执行恶意任务。
- en: The `RECEIVE_BOOT_COMPLETED` permission is another one that we discussed in
    the context of rooting malware. It enables the app to see that the device has
    completed its boot process. An ABT may wish to receive this notification so it
    can start up as soon as the device is running to continue monitoring SMS traffic
    or wait for the user to launch a banking app. All seven of the ABT families mentioned
    earlier in this chapter request this permission.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`RECEIVE_BOOT_COMPLETED` 权限是我们在讨论根植恶意软件时提到的另一个权限。它使应用能够察觉设备已完成启动过程。ABT 可能希望接收此通知，以便在设备启动后立即开始监控短信流量或等待用户启动银行应用程序。本章前面提到的七个
    ABT 家族都请求此权限。'
- en: Almost all of the other features useful for separating ABTs from goodware are
    related to advanced features, including suspicion rank and clustering-based features
    of the kind introduced in [Chapter 6](ch06.xhtml), which capture the potential
    maliciousness of an app based on the TSG.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有其他有助于区分 ABT 和良性软件的功能都与高级特性相关，包括[第 6 章](ch06.xhtml)中介绍的基于怀疑排名和聚类的特性，这些特性基于
    TSG 捕捉应用的潜在恶意性。
- en: '***Prediction Efficacy***'
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***预测效能***'
- en: 'How effective are classifiers at predicting whether an app is an ABT rather
    than goodware or some other form of malware? The results in [Table 9-2](ch09.xhtml#ch9tab2)
    show our ability to make such predictions when comparing apps to goodware. The
    rows in this table show the types of features used: basic API, static, and dynamic
    features; advanced TSG-based, landmark-based, feature clustering–based, and correlational
    graph–based features; and combinations of these types.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 分类器在预测一个应用程序是否为 ABT（而不是良性软件或其他类型的恶意软件）方面有多有效？[表 9-2](ch09.xhtml#ch9tab2)中的结果展示了我们在将应用程序与良性软件进行比较时，做出此类预测的能力。该表中的行展示了使用的特征类型：基本
    API 特征、静态和动态特征；基于高级 TSG、基于地标、基于特征聚类和基于相关图的特征；以及这些类型的组合。
- en: '**Table 9-2:** Metrics for Evaluating ABTs vs. Goodware'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 9-2：** ABT 与良性软件的评估指标'
- en: '| **Feature set** | **Best classifier** | **AUC** | **Precision** | **Recall**
    | **F1** | **FPR** | **FNR** |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| **特征集** | **最佳分类器** | **AUC** | **精确度** | **召回率** | **F1** | **FPR** | **FNR**
    |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| API package | XGBoost | 0.9862 | 0.9483 | 0.9161 | 0.9319 | 0.0517 | 0.0293
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| API 包 | XGBoost | 0.9862 | 0.9483 | 0.9161 | 0.9319 | 0.0517 | 0.0293 |'
- en: '| Static (S) | XGBoost | 0.9792 | 0.9780 | 0.9208 | 0.9485 | 0.0220 | 0.0275
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 静态（S） | XGBoost | 0.9792 | 0.9780 | 0.9208 | 0.9485 | 0.0220 | 0.0275 |'
- en: '| Dynamic (D) | MLP | 0.9215 | 0.9242 | 0.6550 | 0.7667 | 0.0758 | 0.1107 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 动态（D） | MLP | 0.9215 | 0.9242 | 0.6550 | 0.7667 | 0.0758 | 0.1107 |'
- en: '| S + D | XGBoost | 0.9810 | 0.9819 | 0.9208 | 0.9504 | 0.0181 | 0.0274 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| S + D | XGBoost | 0.9810 | 0.9819 | 0.9208 | 0.9504 | 0.0181 | 0.0274 |'
- en: '| API + S + D | XGBoost | 0.9975 | 0.9837 | 0.9642 | 0.9738 | 0.0163 | 0.0126
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| API + S + D | XGBoost | 0.9975 | 0.9837 | 0.9642 | 0.9738 | 0.0163 | 0.0126
    |'
- en: '| TSG | XGBoost | 0.9872 | 0.9463 | 0.9142 | 0.9300 | 0.0537 | 0.0300 |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| TSG | XGBoost | 0.9872 | 0.9463 | 0.9142 | 0.9300 | 0.0537 | 0.0300 |'
- en: '| LM | KNN | 0.5864 | 0.2826 | 0.9859 | 0.4393 | 0.7174 | 0.0419 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| LM | KNN | 0.5864 | 0.2826 | 0.9859 | 0.4393 | 0.7174 | 0.0419 |'
- en: '| FC | RF | 0.9820 | 0.9215 | 0.8633 | 0.8915 | 0.0785 | 0.0473 |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| FC | RF | 0.9820 | 0.9215 | 0.8633 | 0.8915 | 0.0785 | 0.0473 |'
- en: '| CG | KNN | 0.5101 | 0.2617 | 1.0000 | 0.4148 | 0.7383 | 0.0000 |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| CG | KNN | 0.5101 | 0.2617 | 1.0000 | 0.4148 | 0.7383 | 0.0000 |'
- en: '| API + S + D + TSG | XGBoost | 0.9975 | 0.9827 | 0.9661 | 0.9743 | 0.0173
    | 0.0119 |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| API + S + D + TSG | XGBoost | 0.9975 | 0.9827 | 0.9661 | 0.9743 | 0.0173
    | 0.0119 |'
- en: '| API + S + D + LM | XGBoost | 0.9974 | 0.9837 | 0.9651 | 0.9743 | 0.0163 |
    0.0123 |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| API + S + D + LM | XGBoost | 0.9974 | 0.9837 | 0.9651 | 0.9743 | 0.0163 |
    0.0123 |'
- en: '| API + S + D + FC | XGBoost | 0.9975 | 0.9827 | 0.9642 | 0.9734 | 0.0173 |
    0.0126 |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| API + S + D + FC | XGBoost | 0.9975 | 0.9827 | 0.9642 | 0.9734 | 0.0173 |
    0.0126 |'
- en: '| API + S + D + CG | XGBoost | 0.9974 | 0.9827 | 0.9642 | 0.9734 | 0.0173 |
    0.0126 |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| API + S + D + CG | XGBoost | 0.9974 | 0.9827 | 0.9642 | 0.9734 | 0.0173 |
    0.0126 |'
- en: '| All features | XGBoost | 0.9973 | 0.9809 | 0.9670 | 0.9739 | 0.0191 | 0.0116
    |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 所有特征 | XGBoost | 0.9973 | 0.9809 | 0.9670 | 0.9739 | 0.0191 | 0.0116 |'
- en: '| Best late fusion | XGBoost | 0.9982 | 0.9905 | 0.9736 | **0.9819** | 0.0095
    | 0.0093 |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 最佳后期融合 | XGBoost | 0.9982 | 0.9905 | 0.9736 | **0.9819** | 0.0095 | 0.0093
    |'
- en: Machine learning algorithms are able to separate ABTs from goodware at high
    rates, with the best late fusion result producing an F1 score of 0.9819, a precision
    of 0.9905, and a recall of 0.9736\. These are great numbers, suggesting that most
    apps classified as ABTs are indeed ABTs, and that the classifiers have discovered
    most ABTs in the set of apps.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习算法能够以较高的准确率将 ABT 与良性软件区分开，最佳的后期融合结果产生了 F1 分数 0.9819、精确度 0.9905 和召回率 0.9736。这些是很好的数字，表明大多数被分类为
    ABT 的应用程序确实是 ABT，且分类器已发现了大部分应用程序中的 ABT。
- en: '**Banking Trojans vs. Other Malware**'
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**银行木马与其他恶意软件**'
- en: '[Figure 9-2](ch09.xhtml#ch9fig2) shows the 20 most important features for distinguishing
    ABTs from other forms of malware.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 9-2](ch09.xhtml#ch9fig2) 展示了区分 ABT 与其他形式恶意软件的 20 个最重要特征。'
- en: In this case, 14 of the 20 features involve permissions. Thirteen of these features
    represent permissions sought by the app and one feature indicates the number of
    dangerous permissions sought. The remaining six features are advanced features.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个案例中，20 个特征中有 14 个涉及权限。这 13 个特征表示应用程序请求的权限，另有 1 个特征表示请求的危险权限数量。剩下的 6 个特征是高级特征。
- en: '***Permission-Related Features***'
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***与权限相关的特征***'
- en: As in the case of separating ABTs from goodware, SMS-related permissions are
    the most important. We see that the percentage of ABTs requesting the `RECEIVE_SMS`
    permission is more than double that of other forms of malware. The same is true
    for `WRITE_SMS` and `READ_SMS`, probably due to the fact that other forms of malware,
    such as ransomware, may not need to watch for and respond to two-factor authentication
    messages sent by banks.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如将ABT与良性软件区分开来的情况一样，与短信相关的权限是最重要的。我们看到，ABT请求`RECEIVE_SMS`权限的比例是其他类型恶意软件的两倍多。`WRITE_SMS`和`READ_SMS`也是如此，可能是因为其他恶意软件类型（如勒索软件）并不需要监控和响应银行发送的双因素认证信息。
- en: '![Image](../images/ch09fig02.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/ch09fig02.jpg)'
- en: '*Figure 9-2: Top 20 features that best distinguish ABTs from other malware*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-2：最能区分ABT与其他恶意软件的20个特征*'
- en: '[Table 9-3](ch09.xhtml#ch9tab3) shows four non-SMS-related permissions requested
    more frequently by ABTs than by other forms of malware and indicates which of
    the ABTs discussed earlier in this chapter use them.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[表9-3](ch09.xhtml#ch9tab3)展示了ABT请求的四个与短信无关的权限，它们的请求频率高于其他类型的恶意软件，并且指出了章节中讨论的ABT家族使用了这些权限。'
- en: '**Table 9-3:** Non-SMS-Related Permissions Requested by Major ABT Families'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**表9-3：** 主要ABT家族请求的与短信无关的权限'
- en: '| **Permission** | **BankBot** | **Cerberus** | **FakeSpy** | **Marcher** |
    **Medusa** | **Xbot** | **Zitmo** |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| **权限** | **BankBot** | **Cerberus** | **FakeSpy** | **Marcher** | **Medusa**
    | **Xbot** | **Zitmo** |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| `CALL_PHONE` | Yes | Yes | No | Yes | Yes | Yes | Yes |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `CALL_PHONE` | 是 | 是 | 否 | 是 | 是 | 是 | 是 |'
- en: '| `WAKE_LOCK` | Yes | No | Yes | Yes | Yes | Yes | Yes |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `WAKE_LOCK` | 是 | 否 | 是 | 是 | 是 | 是 | 是 |'
- en: '| `WRITE_CONTACTS` | No | No | No | No | No | No | Yes |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `WRITE_CONTACTS` | 否 | 否 | 否 | 否 | 否 | 否 | 是 |'
- en: '| `READ_CALL_LOGS` | No | No | No | No | No | No | No |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `READ_CALL_LOGS` | 否 | 否 | 否 | 否 | 否 | 否 | 否 |'
- en: One key permission, `CALL_PHONE`, enables attackers to make calls from the phone
    without the user even noticing. They could perhaps use this permission to confirm
    a bank transaction. With the exception of FakeSpy, all malware families introduced
    in this chapter request this permission. Xbot uses it to set up call forwarding
    on the infected device, likely to redirect incoming calls from the user’s bank
    to the scammers. Samples of the Medusa family use this permission to call random
    phone numbers as instructed by the malware’s command-and-control server.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一个关键权限是`CALL_PHONE`，它使攻击者能够在用户毫无察觉的情况下从手机拨打电话。攻击者可能会利用此权限来确认银行交易。除了FakeSpy之外，章节中介绍的所有恶意软件家族都请求了此权限。Xbot使用它在感染的设备上设置呼叫转移，可能是为了将来自用户银行的来电转接到诈骗者那里。Medusa家族的样本使用此权限根据恶意软件的指挥与控制服务器的指示拨打随机电话号码。
- en: Another permission that distinguishes ABTs from other malware is `WAKE_LOCK`,
    which ensures that the phone stays on. The use of this permission among ABTs is
    widespread and often employed to force the device to stay awake during critical
    moments while the malware tries to steal data or money. For example, BankBot keeps
    the device alive while disabling the lock screen and forcing user interface interactions.
    The Marcher family is less subtle; it forces the device to stay awake at all times.
    With the exception of Cerberus, all of the malware families covered in this chapter
    request this permission. Although other forms of malware, like spyware and SMS
    fraud apps, could leverage it, we don’t see it requested as frequently by other
    malware categories.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个将ABT与其他恶意软件区分开来的权限是`WAKE_LOCK`，它确保手机保持开启状态。在ABT中，这个权限的使用非常广泛，通常用于在关键时刻强制设备保持唤醒状态，以便恶意软件在尝试窃取数据或资金时不会被中断。例如，BankBot在禁用锁屏并强制进行用户界面交互时，会保持设备处于开启状态。Marcher家族则不那么隐晦，它强制设备始终保持唤醒状态。除了Cerberus，章节中提到的所有恶意软件家族都请求这个权限。虽然其他类型的恶意软件，如间谍软件和短信诈骗应用，可能会利用此权限，但我们没有看到其他类型的恶意软件频繁请求此权限。
- en: The `WRITE_CONTACTS` permission, which allows an app to write to the contact
    list, is another one that distinguishes ABTs from other malware. It could be abused
    in many ways; for instance, it could write a new phone number for your bank and
    then call you from that number, making it seem as though the hacker’s number is
    the bank’s. Of the seven malware families we have discussed, only Zitmo requests
    this permission. We haven’t seen it abused in practice.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`WRITE_CONTACTS`权限允许应用程序写入联系人列表，这是另一个将ABT与其他恶意软件区分开来的权限。它可能被滥用为多种方式；例如，它可能会为你的银行写入一个新电话号码，然后从该号码给你打电话，假装黑客的号码就是银行的号码。在我们讨论的七个恶意软件家族中，只有Zitmo请求了此权限。我们尚未看到它在实际中被滥用。'
- en: A final permission that distinguishes ABTs from other malware is `READ_CALL_LOG`.
    This permission enables an app to see who has called a phone, the days of the
    week and times of the day at which those calls were placed, and more. This privilege
    could, in principle, enable fraudsters to impersonate someone who has called the
    victim before. For instance, they could send spoofing texts referencing a real
    conversation the victim had to trick the user into giving them money or information.
    Though none of the malware families discussed earlier in this chapter request
    this permission, our classifiers have found it to be associated with ABTs.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一个区分 ABT 与其他恶意软件的最终权限是 `READ_CALL_LOG`。该权限使应用程序能够查看谁拨打了电话、拨打电话的日期和时间等信息。原则上，这一特权可以使诈骗者冒充曾拨打过受害者电话的人。例如，他们可以发送伪造的短信，引用受害者曾有过的真实对话，从而欺骗用户给他们钱或信息。尽管本章中讨论的恶意软件家族没有请求该权限，但我们的分类器已发现它与
    ABT 相关。
- en: '***Prediction Efficacy***'
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***预测效能***'
- en: '[Table 9-4](ch09.xhtml#ch9tab4) shows the ability of machine learning algorithms
    to separate ABTs from other malware.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 9-4](ch09.xhtml#ch9tab4) 显示了机器学习算法将 ABT 与其他恶意软件区分开的能力。'
- en: '**Table 9-4:** Metrics for Evaluating ABTs vs. Other Malware'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 9-4：** 用于评估 ABT 与其他恶意软件的指标'
- en: '| **Feature set** | **Best classifier** | **AUC** | **Precision** | **Recall**
    | **F1** | **FPR** | **FNR** |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| **特征集** | **最佳分类器** | **AUC** | **精度** | **召回率** | **F1** | **假阳性率** | **假阴性率**
    |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| API package | GBDT | 0.9099 | 0.8476 | 0.8388 | 0.8432 | 0.1524 | 0.1603
    |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| API 包 | GBDT | 0.9099 | 0.8476 | 0.8388 | 0.8432 | 0.1524 | 0.1603 |'
- en: '| Static (S) | XGBoost | 0.9156 | 0.8513 | 0.8401 | 0.8456 | 0.1487 | 0.1592
    |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 静态 (S) | XGBoost | 0.9156 | 0.8513 | 0.8401 | 0.8456 | 0.1487 | 0.1592 |'
- en: '| Dynamic (D) | MLP | 0.8394 | 0.8100 | 0.6378 | 0.7137 | 0.1900 | 0.3008 |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 动态 (D) | MLP | 0.8394 | 0.8100 | 0.6378 | 0.7137 | 0.1900 | 0.3008 |'
- en: '| S + D | XGBoost | 0.9138 | 0.8560 | 0.8391 | 0.8475 | 0.1440 | 0.1591 |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| S + D | XGBoost | 0.9138 | 0.8560 | 0.8391 | 0.8475 | 0.1440 | 0.1591 |'
- en: '| API + S + D | XGBoost | 0.9447 | 0.8794 | 0.8794 | 0.8794 | 0.1206 | 0.1214
    |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| API + S + D | XGBoost | 0.9447 | 0.8794 | 0.8794 | 0.8794 | 0.1206 | 0.1214
    |'
- en: '| TSG | GBDT | 0.9117 | 0.8476 | 0.8492 | 0.8484 | 0.1524 | 0.1518 |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| TSG | GBDT | 0.9117 | 0.8476 | 0.8492 | 0.8484 | 0.1524 | 0.1518 |'
- en: '| LM | XGBoost | 0.5451 | 0.5266 | 0.8878 | 0.6611 | 0.4734 | 0.3650 |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| LM | XGBoost | 0.5451 | 0.5266 | 0.8878 | 0.6611 | 0.4734 | 0.3650 |'
- en: '| FC | XGBoost | 0.8409 | 0.7588 | 0.7681 | 0.7635 | 0.2412 | 0.2363 |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| FC | XGBoost | 0.8409 | 0.7588 | 0.7681 | 0.7635 | 0.2412 | 0.2363 |'
- en: '| CG | SVM | 0.5045 | 0.5028 | 1.0000 | 0.6692 | 0.4972 | 0.0000 |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| CG | SVM | 0.5045 | 0.5028 | 1.0000 | 0.6692 | 0.4972 | 0.0000 |'
- en: '| API + S + D + TSG | XGBoost | 0.9463 | 0.8807 | 0.8765 | 0.8786 | 0.1193
    | 0.1237 |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| API + S + D + TSG | XGBoost | 0.9463 | 0.8807 | 0.8765 | 0.8786 | 0.1193
    | 0.1237 |'
- en: '| API + S + D + LM | XGBoost | 0.9444 | 0.8815 | 0.8831 | 0.8823 | 0.1185 |
    0.1179 |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| API + S + D + LM | XGBoost | 0.9444 | 0.8815 | 0.8831 | 0.8823 | 0.1185 |
    0.1179 |'
- en: '| API + S + D + FC | XGBoost | 0.9451 | 0.8803 | 0.8803 | 0.8803 | 0.1197 |
    0.1205 |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| API + S + D + FC | XGBoost | 0.9451 | 0.8803 | 0.8803 | 0.8803 | 0.1197 |
    0.1205 |'
- en: '| API + S + D + CG | XGBoost | 0.9439 | 0.8789 | 0.8756 | 0.8772 | 0.1211 |
    0.1248 |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| API + S + D + CG | XGBoost | 0.9439 | 0.8789 | 0.8756 | 0.8772 | 0.1211 |
    0.1248 |'
- en: '| All features | XGBoost | 0.9476 | 0.8827 | 0.8794 | 0.8810 | 0.1173 | 0.1210
    |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 所有特征 | XGBoost | 0.9476 | 0.8827 | 0.8794 | 0.8810 | 0.1173 | 0.1210 |'
- en: '| Best late fusion | XGBoost | 0.9796 | 0.9447 | 0.9576 | **0.9507** | 0.0553
    | 0.0424 |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 最佳后期融合 | XGBoost | 0.9796 | 0.9447 | 0.9576 | **0.9507** | 0.0553 | 0.0424
    |'
- en: 'The best late fusion result in this case produces an F1 score of 0.9507, with
    a precision of 0.9447 and a recall of 0.9576\. While these are excellent numbers,
    they’re slightly lower than those for separating ABTs from goodware. This is to
    be expected: ABTs often have characteristics in common with other malware categories,
    making them harder to separate out. For example, some ABTs, like FakeSpy, steal
    contact lists, a behavior also observed in spyware apps. Others, like Xbot, have
    both ABT behavior and ransomware capabilities.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，最佳的后期融合结果产生了 0.9507 的 F1 分数，精度为 0.9447，召回率为 0.9576。虽然这些数字很优秀，但略低于将 ABT
    从良性软件中分离出的结果。这是可以预期的：ABT 通常与其他恶意软件类别有共同特征，使得它们更难以分离。例如，一些 ABT，如 FakeSpy，会窃取联系人列表，这种行为也在间谍软件应用中观察到。其他的，如
    Xbot，既具有 ABT 行为，又具有勒索软件功能。
- en: '**Marcher: A Case Study**'
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Marcher: 案例研究**'
- en: We introduced Marcher earlier in this chapter. By examining the code in this
    app, *com.fasstr* (v1, c219), we can see several of the ABT characteristics we’ve
    discussed so far. [Listing 9-2](ch09.xhtml#ch9lis2) shows the permissions sought
    by the app. Notice that it uses all the ABT permissions we’ve mentioned.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 本章前面我们介绍了 Marcher。通过检查此应用 *com.fasstr*（v1，c219）中的代码，我们可以看到我们迄今讨论的几个 ABT 特征。[列表
    9-2](ch09.xhtml#ch9lis2) 显示了应用请求的权限。请注意，它使用了我们提到的所有 ABT 权限。
- en: '[PRE1]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 9-2: All permissions requested by Marcher*'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 9-2：Marcher 请求的所有权限*'
- en: Besides the very important SMS-related permissions used for intercepting and
    responding to two-factor authentication messages, Marcher has other interesting
    capabilities. It gains persistence on the device with the help of the `RECEIVE_BOOT_COMPLETED`
    permission, which allows it to restart after every phone boot. It can dial arbitrary
    numbers downloaded from its command-and-control server with the `CALL_PHONE` permission,
    and it uses the `VIBRATE` permission to draw the user’s attention to certain dialogs.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 除了用于拦截和响应双因素认证消息的非常重要的与 SMS 相关的权限外，Marcher 还有其他有趣的功能。它借助 `RECEIVE_BOOT_COMPLETED`
    权限在设备上获得持久性，这使得它可以在每次手机启动后重新启动。它可以通过 `CALL_PHONE` 权限拨打从其指挥控制服务器下载的任意号码，并使用 `VIBRATE`
    权限将用户的注意力吸引到某些对话框上。
- en: '[Listing 9-3](ch09.xhtml#ch9lis3) shows Marcher looking for the presence of
    the Bankwest mobile banking app *au.com.bankwest.mobile*, one of several banking
    apps that Marcher searches for in order to overlay screens.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 9-3](ch09.xhtml#ch9lis3) 显示了 Marcher 查找银行应用 *au.com.bankwest.mobile*，这是
    Marcher 查找的多个银行应用之一，用于覆盖屏幕。'
- en: '[PRE2]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 9-3: A code snippet showing Marcher looking for a banking app*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 9-3：显示 Marcher 查找银行应用的代码片段*'
- en: The specific banking apps to look for are passed down from the command-and-control
    server. The only reason *au.com.bankwest.mobile* appears in the source code is
    that the malware seems to require some special handling for this app compared
    to all other banking apps.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 需要查找的具体银行应用是由指挥控制服务器传递的。*au.com.bankwest.mobile* 出现在源代码中的唯一原因是，恶意软件似乎需要对这个应用进行特殊处理，与其他所有银行应用不同。
- en: '[Listing 9-4](ch09.xhtml#ch9lis4) shows the Marcher ABT receiving and processing
    incoming SMS messages.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 9-4](ch09.xhtml#ch9lis4) 显示了 Marcher ABT 接收并处理传入的 SMS 消息。'
- en: '[PRE3]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 9-4: A code snippet showing Marcher creating an SMS message to send*'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 9-4：显示 Marcher 创建要发送的 SMS 消息的代码片段*'
- en: To access the incoming SMS messages, the malware uses the same APIs that goodware
    would. It registers a broadcast receiver that is called by the operating system
    every time an SMS arrives on the system. Then, the malware accesses the SMS text
    with the help of the `SmsMessage.createFromPdu` method. The only difficulty is
    that the malware code is somewhat obfuscated. Instead of calling `SmsMessage.createFromPdu`
    directly, the malware uses reflection through `SmsMessage.class.getMethod` and
    minimal string obfuscation, by writing `cre_ateF_romP_du` instead of `createFromPdu`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问传入的 SMS 消息，恶意软件使用与合法软件相同的 API。它注册了一个广播接收器，每当 SMS 到达系统时，操作系统都会调用它。然后，恶意软件借助
    `SmsMessage.createFromPdu` 方法访问 SMS 内容。唯一的困难是，恶意软件代码有些混淆。它不是直接调用 `SmsMessage.createFromPdu`，而是通过
    `SmsMessage.class.getMethod` 反射，并通过最小化字符串混淆，将 `createFromPdu` 写成 `cre_ateF_romP_du`。
- en: In [Listing 9-5](ch09.xhtml#ch9lis5), Marcher tries to become the administrator
    of the compromised device so that it can alter settings related to device administration
    at will.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [列表 9-5](ch09.xhtml#ch9lis5) 中，Marcher 尝试成为被感染设备的管理员，以便它可以随意更改与设备管理相关的设置。
- en: '[PRE4]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 9-5: A code snippet showing Marcher trying to become the device admin*'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 9-5：显示 Marcher 尝试成为设备管理员的代码片段*'
- en: Again, the malware uses exactly the same APIs that goodware would use for this
    purpose. It launches an activity of type `ADD_DEVICE_ADMIN`, which opens the system
    dialog for granting the app the desired permissions. If the user follows through
    with the instructions in this dialog, the malware will be granted device administrator
    permissions. Its command-and-control server will then have the ability to send
    it commands, and it will even be able to set or reset device passwords and lock
    users out of their own devices.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，恶意软件使用的 API 与合法软件在此目的下使用的完全相同。它启动了一个类型为 `ADD_DEVICE_ADMIN` 的活动，打开了系统对话框，以便授予该应用所需的权限。如果用户按照对话框中的指示操作，恶意软件将获得设备管理员权限。其指挥控制服务器随后将能够向其发送命令，甚至能够设置或重置设备密码，并将用户锁定在自己的设备之外。
- en: '**Up Next**'
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**接下来**'
- en: Machine learning methods perform very well at detecting ABTs. In this chapter,
    we’ve observed that virtually all ABTs extensively use the SMS-related permissions.
    Other requested permissions frequently found in ABTs, such as `RECEIVE_BOOT_COMPLETE`,
    should also make an app highly suspect. In addition to permissions, advanced features
    based on suspicion scores, suspicion ranks, and feature clustering are very important
    in distinguishing between ABTs and goodware. These findings suggest that advanced
    features may be harder for an adversary to reverse engineer.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习方法在检测 ABT（恶意广告软件）方面表现非常出色。在本章中，我们观察到几乎所有的 ABT 都广泛使用与短信相关的权限。其他在 ABT 中经常出现的请求权限，如
    `RECEIVE_BOOT_COMPLETE`，也应该使应用程序变得高度可疑。除了权限之外，基于疑似评分、疑似排名和特征聚类的高级特征在区分 ABT 和良性软件方面也非常重要。这些发现表明，先进特征可能更难被对手逆向工程。
- en: Our next chapter will focus on ransomware apps. We’ll introduce the risks this
    malware category poses to Android users, as well as the techniques it relies on
    to manipulate data access and control on Android devices.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一章将重点介绍勒索软件应用程序。我们将介绍这一类恶意软件对 Android 用户构成的风险，以及它依赖于哪些技术来操控 Android 设备上的数据访问和控制。
- en: '[*OceanofPDF.com*](https://oceanofpdf.com)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[*OceanofPDF.com*](https://oceanofpdf.com)'
