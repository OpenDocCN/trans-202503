- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: The Systems Team
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 系统团队
- en: '![g07002](image_fi/502680c07/g07002.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![g07002](image_fi/502680c07/g07002.png)'
- en: The systems team is responsible for the lowest layers of the software stack.
    You can think of their work as connecting the phone hardware (the Sooner, Dream/G1,
    Droid, and every other device that the team worked on) to the rest of the software
    running on each device.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 系统团队负责软件堆栈的最低层。你可以把他们的工作理解为将手机硬件（如Sooner、Dream/G1、Droid，以及团队参与过的其他设备）与每个设备上运行的其余软件连接起来。
- en: At the bottom layer of everything running on Android (or any operating system)
    is the kernel. The kernel is a combination of the interface between the actual
    hardware and the rest of the system, plus everything that an OS has to do to make
    everything run (like boot up the system, create processes,^([1](#c07-footnote-1))
    manage memory, and handle communication between processes). If a phone were a
    house, the kernel would be the foundation, the wiring, and the plumbing running
    through the walls, making that “drip, drip, drip” sound keeping you from getting
    back to sleep in the middle of the night.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android（或任何操作系统）上运行的所有内容的最底层是内核。内核是实际硬件与系统其他部分之间的接口， plus 操作系统必须执行的一切任务（如启动系统、创建进程、^([1](#c07-footnote-1))管理内存以及处理进程间通信）。如果一部手机是一个房子，那么内核就是基础、线路和墙壁中的管道，它们发出的“滴答滴答”声会让你在半夜醒来，难以重新入睡。
- en: Hardware communication is handled by *device* *drivers* in the kernel, which
    are software modules that talk to the actual hardware on a device. For example,
    in order to display pixels on the screen, a driver translates between the information
    from the graphics software (which figures out what color each pixel in the display
    should be to show, say, images, text, and buttons) and the physical screen hardware
    where those pixels live. Similarly, when the user touches the screen, that action
    is turned into raw hardware signals indicating the affected locations. These signals
    are sent into the system as *touch events*, which are then processed by software,
    including applications that want to handle those events.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件通信由内核中的*设备* *驱动程序* 处理，驱动程序是与设备上实际硬件进行通信的软件模块。例如，为了在屏幕上显示像素，驱动程序在图形软件（它负责计算每个像素的颜色，以便显示图像、文本和按钮等）和物理屏幕硬件之间进行转换。同样，当用户触摸屏幕时，这一操作会转化为原始硬件信号，指示触摸的位置。这些信号会作为*触摸事件*传入系统，然后由软件进行处理，包括希望处理这些事件的应用程序。
- en: One of the fundamental tasks of the systems group is *bringup*, which is the
    process of getting from simply having a piece of hardware (a phone, or even a
    prototype of a phone, with a collection of chips, circuitry, and a display) to
    one that boots the Android operating system.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 系统组的一个基本任务是*启动*，即从拥有一块硬件（比如一部手机，或者甚至是一个手机原型，包含一系列芯片、电路和显示屏）到能够启动Android操作系统的过程。
- en: Brian Swetland and the Kernel
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Brian Swetland 和内核
- en: With Swetland’s background in low-level systems, and the fact that he was the
    first person to join, it was only natural that he headed up the Android systems
    team from day one. Brian was already working and leading the systems efforts pre-acquisition;
    he continued in that role after moving over to Google and as the team grew.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Swetland在低层系统方面的背景，以及他是第一个加入的人，因此从第一天起，他就自然地领导了Android系统团队。Brian在收购前就已经开始工作并领导系统团队；他在加入Google后继续担任这个角色，随着团队的壮大，仍然负责这个工作。
- en: 'The main work of the systems team was to get the kernel working, for the early
    Android devices and for every new Android device since.^([2](#c07-footnote-2))
    When Android was a startup, the kernel needed to be just good enough that the
    demo could run. But after the team started at Google, they had to shift toward
    building a real product: a full OS and platform on top of a solid kernel.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 系统团队的主要工作是让内核在早期的Android设备上运行，并为每一款新Android设备提供支持。^([2](#c07-footnote-2)) 当Android还是一家初创公司时，内核只需要足够好，以便演示可以运行。但在团队进入Google后，他们需要转向构建一个真正的产品：一个完整的操作系统和平台，基于一个坚实的内核。
- en: 'Fortunately, Swetland ensured that the early prototype kernel provided a decent
    starting point: “Everything I was building was toward something that would eventually
    be a product. I’m not a believer in doing total one-off demos. We didn’t have
    process separation,^([3](#c07-footnote-3)) but we knew where that was going to
    go. We still needed the kernel, the bootloader,^([4](#c07-footnote-4)) the graphics
    drivers, and everything. We did some demo-y things along the way, but we always
    tried to chart a path where it wasn’t pure demo. It was progress towards a system.”'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Swetland 确保了早期的原型内核为后续开发提供了一个不错的起点：“我所做的一切都是朝着最终成为产品的方向进行的。我不相信做完全是一次性的演示。我们当时没有流程分离，^([3](#c07-footnote-3))
    但我们知道那将走向何方。我们仍然需要内核、引导加载程序、^([4](#c07-footnote-4)) 图形驱动程序以及所有东西。我们在过程中做了一些演示性质的事情，但我们始终试图规划一条道路，让它不是纯粹的演示。它是朝着一个系统前进的进展。”
- en: Swetland’s feelings toward demo-ware came from experience in previous companies
    where people on the business side misunderstood the difference between a great
    demo and an actual product. “The dangerous thing of building purely demo-ware
    is someone decides you’re going to ship it. Then you’re screwed.”
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Swetland 对 demo-ware 的看法源于他在以前公司中的经历，那时商业部门的人误解了优秀的演示和实际产品之间的区别。“构建纯粹的 demo-ware
    的危险在于，某人决定将其发布。然后你就麻烦大了。”
- en: 'So Swetland worked on the kernel that Android would build on top of: “We kept
    working with it [the kernel from the demo]. It’s basically Linux off-the-shelf
    and then driver work on top of it. There are some patches in mainline Linux^([5](#c07-footnote-5))
    from F-Sample^([6](#c07-footnote-6)) with my name on them that I submitted after
    I went to Google. We weren’t thinking a lot about upstreaming^([7](#c07-footnote-7))
    stuff in the early days.”'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，Swetland 负责开发 Android 要建立在其上的内核：“我们继续使用那个[演示用的内核]。它基本上是现成的 Linux 内核，然后在其上进行驱动程序工作。Linux
    主线^([5](#c07-footnote-5)) 中有一些我提交的补丁，上面有我的名字，是在我加入 Google 后提交的。我们在早期并没有太多考虑将东西上游化^([7](#c07-footnote-7))。”
- en: Meanwhile, Swetland and his team started to see some tangible advantages to
    being part of Google. Prior to Google, “It was a little painful, as a tiny company
    making progress with TI [Texas Instruments]. The level of support was not what
    we got later.” Then after starting at Google, “It became massively easier to get
    support from the vendors. Surprise, surprise. People stopped talking about how
    much we would have to pay to get development boards. They’d bring us hardware,
    which is kinda nice. That’s one of the big advantages of Google, being this recognized
    name instead of this unknown tiny startup. People will pick up the phone and answer
    your questions. We still had to fight for support in places, but it could have
    been a lot worse.”
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，Swetland 和他的团队开始看到成为 Google 一部分的一些实际优势。在加入 Google 之前，“作为一家小公司与 TI [德州仪器]
    合作推进，确实有些痛苦。得到的支持远不如后来从 Google 得到的。” 然后，在加入 Google 后，“从供应商那里获得支持变得极为容易。意外，意外。人们不再讨论我们需要支付多少费用来获得开发板。他们会主动给我们提供硬件，这真的很不错。这就是
    Google 的一个大优势，成为一个被认可的品牌，而不是一个默默无闻的小初创公司。人们愿意接起电话并回答你的问题。我们仍然在一些地方需要争取支持，但情况本可以更糟。”
- en: One of the legends of Brian Swetland was how he “found” extra memory on the
    G1 shortly before it shipped. He submitted a fix in the run-up to the release,
    expanding the available RAM on the device from 160MB to 192MB, giving the OS and
    all applications 20 percent more memory to play with, which was a significant
    boost on this very memory-constrained system.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Brian Swetland 的传奇之一是他在 G1 发布前不久“发现”了额外的内存。他在发布前提交了一个修复，扩大了设备上可用的 RAM 从 160MB
    增加到 192MB，为操作系统和所有应用程序提供了 20% 更多的内存，这对于这个内存极其紧张的系统来说是一个显著的提升。
- en: The trick was that he knew where to find that memory because he had hidden it
    in the first place. The kernel is responsible for making memory available for
    the rest of the system to use. When he first brought up the kernel on the G1,
    he configured it to report less memory that it actually had. To the rest of the
    system, there was effectively 32MB less memory for use than was physically available
    in the hardware. He did this with the certain knowledge that every developer would
    use all available memory if it was there, but they’d work within a tighter budget
    if they had to.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 诀窍在于他知道在哪里找到那块内存，因为它最初就是他藏起来的。内核负责让其他系统可以使用内存。当他首次在 G1 上启动内核时，他配置它报告的内存量比实际拥有的少。对于其他系统来说，实际上可用的内存比硬件物理上可用的少了
    32MB。他这样做的目的是明确知道，如果内存是可用的，每个开发者都会使用它，但如果必须在更紧张的预算下工作，他们就会适应这种限制。
- en: Everyone got their software working in this much smaller pool of memory, because
    that’s all they had. When he freed the rest of the memory before the G1 shipped,
    that meant more was available for running more applications simultaneously, because
    he had forced the entire system into an artificially smaller space than necessary.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都在这更小的内存池中使软件正常运行，因为那是他们唯一拥有的。当他在 G1 发布前释放了其余的内存时，这意味着可以同时运行更多的应用程序，因为他已将整个系统强行压缩到一个比实际需要的更小的空间。
- en: 'Nick Pelly, who joined the team later to work on Bluetooth, remembered that
    not everyone was happy how this worked out: “OMG the drama this caused. The Browser
    team had been pulling extra Sundays to fit into the (false) memory budget. I remember
    one of them storming into Brian’s office with some loud and choice words when
    he ‘found’ that extra memory.”'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 后来加入团队负责蓝牙的 Nick Pelly 记得，并不是所有人都满意这种做法：“天啊，这给我们带来了多大的戏剧性效果。浏览器团队为了适应（虚假的）内存预算，已经连续好几个星期天都在加班。我记得有一个人怒气冲冲地冲进
    Brian 的办公室，嘴里骂骂咧咧，当他‘发现’那额外的内存时。”
- en: Ficus Kirkpatrick and Drivers
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ficus Kirkpatrick 与驱动程序
- en: The kernel itself didn’t need extra hands working on it. This might be surprising,
    given the complexity of the kernel and its importance in the overall system. But
    Linux was there already, and where it wasn’t sufficient, Swetland was on it. But
    kernel *drivers*, on the other hand, were in serious demand. The system required
    all kinds of different hardware which had to be handled by the kernel. So when
    Ficus Kirkpatrick joined Swetland’s team, he got busy writing drivers, starting
    with the camera.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 内核本身并不需要额外的人员来进行工作。这可能令人惊讶，考虑到内核的复杂性以及它在整个系统中的重要性。但 Linux 已经存在，在不够用的地方，Swetland
    就负责解决。但是内核的*驱动程序*，另一方面，确实非常紧缺。系统需要各种各样的硬件，而这些硬件必须由内核来处理。所以当 Ficus Kirkpatrick
    加入 Swetland 的团队时，他就开始忙于编写驱动程序，从相机驱动开始。
- en: “I was into OSes and low level stuff, which is the core thing that I was best
    at coming into Android. The first year or two [on Android] it was low level systems
    stuff. We had decided to use Linux, so there wasn’t a lot of kernel work. So I
    was doing a lot of driver stuff. I did the first camera driver, got that working
    on OMAP.^([8](#c07-footnote-8)) Also got audio working.” Once audio was possible,
    “We can pass buffers, or we can get camera data in, what are we going to do with
    it?” So Ficus moved onto the media framework, creating APIs^([9](#c07-footnote-9))
    and functionality for applications to be able to access the new audio and camera
    capabilities of the device.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: “我一直专注于操作系统和底层技术，这是我在进入 Android 时最擅长的核心领域。刚开始的第一两年[在 Android 上]，主要做底层系统工作。我们决定使用
    Linux，所以没有太多内核方面的工作。于是我做了很多驱动相关的工作。我做了第一个相机驱动，让它在 OMAP 上运行。^([8](#c07-footnote-8))
    还让音频也能工作。” 一旦音频实现，“我们可以传递缓冲区，或者获取相机数据，那我们接下来要做什么呢？”于是，Ficus 开始着手媒体框架，创建了 API^([9](#c07-footnote-9))
    和功能，使应用程序能够访问设备的新音频和相机功能。
- en: Arve Hjønnevåg and Communication
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Arve Hjønnevåg 与通信
- en: One of the missing drivers early on was for the radio^([10](#c07-footnote-10))
    hardware; there was no way for the new phone OS to make a phone call. So Swetland
    brought in someone who excelled at communications drivers.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 早期缺失的驱动程序之一是无线电^([10](#c07-footnote-10)) 硬件；新的手机操作系统无法进行电话通话。所以 Swetland 请来了一位擅长通信驱动的专家。
- en: Arve Hjønnevåg joined Swetland’s systems team in March of 2006\. He was well
    known on Android for his . . . silence. His teammate Rebecca (who enters the story
    in a few pages) said she would sometimes ask him for help on a system they used
    for managing their source code. She got used to responding to his answers with,
    “Again, with more words.”
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Arve Hjønnevåg于2006年3月加入Swetland的系统团队。他在Android社区中因其…沉默而闻名。他的队友Rebecca（几页后将出现）说，她有时会请他帮忙处理他们用于管理源代码的系统。她已经习惯了用“再说一次，更多的词”来回应他的回答。
- en: Once Arve got the system talking to the radio hardware, he focused on power
    management. Specifically, now that the hardware was able to make and receive phone
    calls, it also needed to not fall asleep when the system was in the middle of
    a call.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Arve使系统与无线电硬件进行通信，他便专注于电源管理。具体来说，既然硬件能够进行电话通话，它还需要在通话过程中保持清醒，不会进入睡眠状态。
- en: At the time, Linux was great for servers and desktop systems, including laptops.
    But it wasn’t built for phones, and it needed new functionality to handle this
    new use case. When you close a laptop lid, you want the laptop to go to sleep,
    completely. You don’t want or need anything running on the system until you open
    the lid later.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当时，Linux在服务器和桌面系统（包括笔记本）上表现出色。但它并不是为手机而设计的，需要新功能来处理这种新的使用场景。当你合上笔记本电脑的盖子时，你希望它完全进入睡眠状态。你不希望或不需要系统上有任何东西运行，直到你稍后再打开盖子。
- en: But a phone is quite different. When the screen turns off, you don’t want it
    doing everything that it might be doing when you’re actively using it, but you
    do want it awake enough to, say, continue a phone call^([11](#c07-footnote-11))
    that you are in the middle of, or to keep playing music that you are listening
    to.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但手机是完全不同的。当屏幕关闭时，你不希望它继续做你在主动使用时可能进行的所有操作，但你希望它保持足够清醒，比如，继续进行你正在进行的电话通话^([11](#c07-footnote-11))，或者继续播放你正在听的音乐。
- en: So Arve added the concept of *wake locks* to Android’s Linux kernel, to ensure
    that screen-off didn’t mean completely-off. Android would aggressively put applications
    and most of the system to sleep when the screen turned off (because battery consumption
    was always a huge concern), but wake locks ensured that the system could stay
    in a wakeful state if there was something happening that needed to continue even
    if the screen turned off.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所以Arve向Android的Linux内核中加入了*唤醒锁*的概念，以确保屏幕关闭时并不意味着完全关闭。Android会在屏幕关闭时强制让应用程序和大部分系统进入睡眠状态（因为电池消耗总是一个巨大的问题），但唤醒锁确保系统可以保持清醒状态，如果有事情需要继续进行，即使屏幕关闭了。
- en: '![](image_fi/502680c07/f07001.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c07/f07001.png)'
- en: Arve debugging G1 prototype hardware in October of 2007, with a TEK battery
    emulator and several pre-G1 devices (“Sooners”) (photo courtesy Brian Swetland)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Arve在2007年10月调试G1原型硬件，使用了TEK电池仿真器和几台预G1设备（“Sooners”）（照片由Brian Swetland提供）
- en: Arve submitted the wake lock feature into Android’s version of Linux. This feature
    caused a bit of a stir in the Linux community, as some stalwarts of that open
    source community saw this feature as an example of Android forking^([12](#c07-footnote-12))
    the Linux kernel. Chris DiBona (who dealt^([13](#c07-footnote-13)) a lot with
    open source projects) remembers talking to people from the community at a Linux
    conference around that time. “There was one guy who was spitting mad, ‘I can’t
    believe you’re doing this!’
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Arve将唤醒锁功能提交到了Android版本的Linux中。这个功能在Linux社区引起了些许波动，因为一些开源社区的坚定支持者将这个功能视为Android分叉^([12](#c07-footnote-12))Linux内核的例证。Chris
    DiBona（他曾处理^([13](#c07-footnote-13))很多开源项目）记得在那个时候，他曾在一个Linux会议上与社区的人交谈。“有一个人怒不可遏，‘我简直不敢相信你们在做这个！’”
- en: “I was like, ‘Three years from now, this won’t be a problem. In between now
    and then, either the Linux community will accept our patches in the shape they’re
    in right now, they’ll modify them slightly, maybe they call them something different,
    or you’ll leave behind every mobile device in the market. So work with us to make
    something that’s acceptable. Otherwise we’re going to keep shipping because it’s
    very important to us that this has a decent battery life.’”
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: “我当时想，‘三年后，这将不再是问题。在此之前，Linux社区要么接受我们当前形态的补丁，要么稍微修改它们，可能会换个名字，或者你就会抛弃市场上所有的移动设备。所以和我们合作，做出一个可以接受的方案。否则，我们将继续发布，因为这对我们来说，确保有一个良好的电池续航非常重要。’”
- en: In the end, Linux didn’t take Android’s wake lock implementation directly, but
    they did implement something that solves the same problem.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，Linux并没有直接采用Android的唤醒锁实现，但他们确实实现了一个解决相同问题的方案。
- en: Iliyan Malchev and Bluetooth
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Iliyan Malchev 和蓝牙
- en: Display drivers were another problem that the systems team had to solve. It
    doesn’t help having a powerful operating system if you can’t see what it’s doing.
    Iliyan Malchev got to work on this problem when he joined the team.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 显示驱动程序是系统团队必须解决的另一个问题。如果无法看到操作系统的显示效果，那么即便是一个强大的操作系统也毫无意义。Iliyan Malchev 在加入团队后开始处理这个问题。
- en: Iliyan learned to program when he was eight years old in Bulgaria, using a language
    he did not speak. His parents got a computer for their home and Iliyan started
    playing around with it. “It was amazing; I’m banging on the keyboard and things
    are happening on the screen—that’s what really got me interested in it. I didn’t
    know what I was doing. It’s not like I immediately became a programmer. In Bulgaria,
    everything was Cyrillic alphabet. Everything [in program code] was in the Latin
    script, like program listings. I didn’t speak English or know the Latin alphabet,
    so I’d just copy it, letter by letter.”
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Iliyan 在八岁时就开始学习编程，那时他住在保加利亚，使用的是一种他不懂的语言。父母为家里买了一台电脑，Iliyan 开始玩弄它。“那太神奇了；我敲打键盘，屏幕上发生了事情——这才让我真正对编程产生兴趣。我当时不知道自己在做什么。这并不是说我马上就成了一个程序员。在保加利亚，一切都使用西里尔字母。而编程代码都是拉丁字母，比如程序清单。我既不会说英语，也不懂拉丁字母，所以我只能一个字母一个字母地抄。”
- en: Iliyan made his way to the US for college and ended up working at Qualcomm for
    a few years. This experience was incredibly helpful to his later work on Android,
    and for the systems team in particular, since Android devices use a lot of Qualcomm
    hardware.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Iliyan 去美国上大学，后来在高通公司工作了几年。这段经历对他后来的 Android 工作，尤其是对系统团队的工作帮助巨大，因为 Android 设备大量使用高通的硬件。
- en: 'Iliyan joined Swetland’s systems team in May of 2006\. His first project was
    getting a secondary display to work: “[Swetland] tosses me a flip phone with 2
    displays. He said, ‘make the peripheral display work.’ Being Swetland, he booted
    Linux on this without any docs. I guess he just wanted to give me something to
    get me off his back.”'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Iliyan 于 2006 年 5 月加入了 Swetland 的系统团队。他的第一个项目是让副显示器工作：“[Swetland] 给我扔了一个有两个显示屏的翻盖手机。他说，‘让外部显示器工作。’作为
    Swetland，他直接在没有任何文档的情况下将 Linux 系统启动在这台设备上。我猜他只是想给我点事情做，好让我不再烦他。”
- en: 'After that project, Sooner devices^([14](#c07-footnote-14)) started arriving
    on the team. Iliyan worked on getting hardware input working on the device: a
    D-Pad (up/down/left/right arrows) and a trackball. In the meantime, he noticed
    that Android was getting too big to fit in the device’s limited storage space,
    and the system was constantly growing, so he spent time optimizing the size of
    the system to make things fit.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个项目之后，Sooner 设备^([14](#c07-footnote-14))开始进入团队。Iliyan负责让设备上的硬件输入正常工作：包括方向键（上/下/左/右箭头）和轨迹球。与此同时，他注意到Android系统越来越庞大，已无法适应设备有限的存储空间，而且系统持续增长，因此他花时间优化系统大小，以便让它能够适配。
- en: '![](image_fi/502680c07/f07002.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c07/f07002.png)'
- en: The Sooner device, complete with hardware keyboard, D-Pad, and many, many buttons
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 配备硬件键盘、方向键和许多按钮的 Soonerc 设备
- en: He then worked on Bluetooth. This included making the driver work for the Bluetooth
    hardware, as well as the Bluetooth software that applications could use to talk
    to the device. “This was the first Bluetooth software on Android and it was .
    . . not very good. [Bluetooth] is a terrible standard. They invented something
    of the scope and complexity of the internet to essentially support wireless headphones.
    It’s so over-engineered. I did that, then I handed it over to another engineer,
    Nick Pelly. Nick took the Bluetooth stack and made it work. He deserves all the
    credit.”
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后他开始研究蓝牙。这包括使蓝牙硬件的驱动程序能够正常工作，以及为应用程序提供与设备通信的蓝牙软件。“这是Android上的第一版蓝牙软件，而它……并不好。[蓝牙]是一个糟糕的标准。他们发明了一个像互联网一样规模和复杂度的东西，结果只是为了支持无线耳机。它被过度设计了。我做完这一部分后，将它交给了另一位工程师Nick
    Pelly。Nick接手了蓝牙堆栈并让它正常工作。他值得所有的荣誉。”
- en: Nick Pelly and Bluetooth
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Nick Pelly 和蓝牙
- en: Nick studied computer science at university in Australia but didn’t think he’d
    end up programming for a living. He lined up a job at Telstra in communications
    engineering that was going to start after returning from a post-graduation gap
    year, traveling around the world.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Nick 在澳大利亚的大学学习计算机科学，但并没有认为自己会以编程为生。毕业后，他打算开始一份在 Telstra 的通信工程工作，并计划在全球旅行一年的间隙后回去。
- en: 'But while he was traveling in California, his Telstra job fell through, so
    he needed another option. He was always curious about Silicon Valley, so he quickly
    put out feelers for interviews in the area. Only one company responded: Google.
    Fortunately, he got the job and started in 2006 on the Google Search Appliance
    (GSA) team.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但当他在加利福尼亚旅行时，他在 Telstra 的工作告吹了，所以他需要另寻出路。他一直对硅谷很感兴趣，所以他迅速在该地区投出了求职信息。只有一家公司回复了他：Google。幸运的是，他拿到了这份工作，并于
    2006 年加入了 Google 搜索设备（GSA）团队。
- en: '![](image_fi/502680c07/f07003.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c07/f07003.png)'
- en: Ficus and Iliyan debugging . . . something in August of 2007 (photo courtesy
    Brian Swetland)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Ficus 和 Iliyan 调试…… 2007 年 8 月的某个事情（照片由 Brian Swetland 提供）
- en: GSA was one of the products that Google thought they’d make their money on early
    on, when their main product was the search engine. They sold a rack-mounted piece
    of hardware to companies that would index their internal documents. It extended
    the power of Google’s internet search into companies’ internal websites. But then
    Google got into the ad business, and GSA quickly became less of a focus. By the
    time Nick joined the team, the product was not being as actively pursued as it
    once was, but Nick admitted that “It was a fantastic way for a new engineer to
    learn the Google search stack.”
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: GSA 是 Google 早期认为能够赚到钱的产品之一，当时他们的主要产品是搜索引擎。他们向公司销售一种机架式硬件，用来索引公司内部的文档。它将 Google
    的互联网搜索能力扩展到公司的内部网站。但后来 Google 进入了广告业务，GSA 很快就不再是焦点。当 Nick 加入团队时，这个产品已经不像以前那样被积极追求，但
    Nick 承认：“这对一个新工程师来说，是学习 Google 搜索堆栈的绝佳方式。”
- en: In the Summer of 2007, he attended the first presentation from the Android team
    to the rest of Google on what they were doing. Nick was hooked. “I had no relevant
    background. I was one of the first people who joined the team who had not worked
    on consumer electronics before, who had not worked on platform level stuff like
    San and Rebecca and Mike,^([15](#c07-footnote-15)) who came from the Google platforms
    team. I only had one and a half years of serious professional experience.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 2007 年夏天，他参加了 Android 团队首次向 Google 其他部门展示他们正在做的事情。Nick 被深深吸引。“我没有相关背景。我是团队中最早加入的几个人之一，我之前没做过消费电子产品，也没有做过像
    San、Rebecca 和 Mike 那样从 Google 平台团队出来的人做过平台级别的工作。我只有一年半的专业经验。”
- en: '“But I came to them, and I was like: ‘This is awesome. I’ll work on anything.
    What do you need help with?’'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: “但是我来到他们面前，说：‘这太棒了。我什么都愿意做，你们需要我帮忙什么？’”
- en: '“Brian said: ‘Bluetooth!’'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: “Brian 说：‘蓝牙！’”
- en: '“I knew they were too ambitious, and that they’d fail. I told my girlfriend
    and my Mum: ‘No way it’ll work. But the people are great and I’ll learn a lot.’”'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: “我知道他们太有雄心壮志了，最终会失败。我告诉我的女朋友和妈妈：‘根本行不通。但是这些人很棒，我会学到很多东西。’”
- en: Nick took on Bluetooth and quickly owned it. “It was such a steep learning curve
    that once I began to catch on, I was stuck with it.” He had to make Bluetooth
    work not only as a driver, but through the platform and application layers of
    Android. One of the hardest, and continuous, parts of the job was to make it work
    correctly with the wide variety of peripheral Bluetooth devices in the world.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Nick 承接了蓝牙项目，并迅速掌握了它。“这真是一个陡峭的学习曲线，一旦我开始理解，就再也脱不了身了。”他不仅需要让蓝牙作为驱动程序工作，还要在 Android
    的平台和应用层中让它正常运作。这个工作的最困难、也是最持续的部分，是要让它与世界上各种各样的蓝牙外设正确配合。
- en: “Most Bluetooth peripherals ship with oodles of ‘quirks’ (bugs), and never see
    a firmware update. So we had to work around the issues. I came up with a simple
    policy—every time a Bluetooth interoperability bug was found, I would purchase
    the device, add it to the collection at my desk, and include it as part of my
    manual testing. Pretty soon I had two extra desks jam-packed with Bluetooth devices.
    I’d keep them all plugged in charging—this ensured I didn’t lose obscure chargers,
    and that I never had to wait to charge a device before running a test. On more
    than one occasion I had to clear them all out when we got word of a fire warden
    inspection, due to all the daisy-chained chargers.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: “大多数蓝牙外设都带有大量‘怪癖’（bug），而且永远不会得到固件更新。所以我们不得不绕过这些问题。我想出了一个简单的策略——每当发现一个蓝牙互操作性
    bug 时，我就会购买该设备，加入到我桌子上的设备集合中，并把它纳入我的手动测试中。不久后，我有两张额外的桌子，堆满了蓝牙设备。我会保持它们都插着充电——这样我就不会丢失那些不常见的充电器，而且测试前也不需要等设备充电。多次，我不得不把这些设备清空，因为一旦听说有防火管理员的检查，我们得赶紧收起所有串联的充电器。”
- en: “The car-kits were a bit harder since you can’t fit a car in an office. But
    I soon discovered the major automotive manufacturers would happily ship me Pelican
    cases containing the guts of a car’s infotainment system so that I could test
    against the relevant hardware from my desk. They overflowed my desk and into various
    corners of the hallway.”
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: “汽车套件有点难，因为你无法在办公室放下整辆车。但我很快发现，主要的汽车制造商很乐意给我寄来包含汽车信息娱乐系统核心部件的Pelican箱子，这样我就可以在办公桌上测试相关的硬件。这些箱子堆满了我的桌子，甚至溢出了走廊的角落。”
- en: 'Nick’s manager was Brian Swetland. Swetland was, like many managers in those
    early Android days, not very hands-on. This included resisting sync meetings with
    the people on his team, as Nick recalled: “I remember a few weeks in, asking if
    we’d ever have a 1-on-1\. He didn’t seem too happy with the question, but said
    I was welcome to schedule one. I did. He turned up ten minutes late and his first
    words were ‘I $#^&()# hate 1-on-1s. . . . ’ We didn’t have 1-on-1s after that.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Nick的经理是Brian Swetland。像许多早期Android时代的经理一样，Swetland并不太参与日常操作。这包括他抵制与团队成员的同步会议，正如Nick回忆的那样：“我记得几周后，我问我们是否会有1对1的会议。他似乎对这个问题不太高兴，但说我可以自己安排一个。我确实安排了，他迟到了十分钟，第一句话就是‘我#%&()#讨厌1对1的会议......’从那以后，我们再也没有开过1对1的会议。”
- en: “Yet I remember Brian as one of my favorite managers to work for. His systems
    knowledge was second to none. He was generous with scope and responsibility and
    did not micro-manage. He was dedicated to building the phone and was tremendously
    loyal and good to his people. Working for Brian was a highlight of my career.”
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: “然而，我记得Brian是我最喜欢的经理之一。他的系统知识无可匹敌。他在职责和范围上慷慨大方，并且没有微观管理。他全身心投入到手机的开发中，对员工非常忠诚且关怀。为Brian工作是我职业生涯中的亮点。”
- en: '![](image_fi/502680c07/f07004.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c07/f07004.png)'
- en: Nick catching a nap in the office in March of 2008\. In the upper left is a
    car infotainment system, in the protective case shipped from the auto manufacturer.
    (Picture courtesy Brian Swetland.)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 2008年3月，Nick在办公室小睡。左上角是一个汽车信息娱乐系统，仍在汽车制造商提供的保护外壳内。（图片由Brian Swetland提供）
- en: San Mehat and the SD Robot
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: San Mehat 和 SD 机器人
- en: It’s a hundred degrees, it’s summertime, I’m looking at this phone and I’m listening
    to this person say garbage over and over again.
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 百度高温，正值夏季，我看着这部电话，听着那个人一次又一次地说着废话。
- en: ''
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —San Mehat
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —San Mehat
- en: More help for drivers, and system bringup overall, arrived in the form of San
    Mehat. San joined Swetland’s team in 2007, around the same time as Nick, in the
    run up to the SDK^([16](#c07-footnote-16)) release.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在驱动程序和系统启动方面，San Mehat的帮助为我们带来了更多支持。San于2007年加入了Swetland的团队，与Nick差不多是在SDK发布前的那段时间。
- en: San learned programming when he was a kid by typing randomly on a keyboard.
    His parents had a computer store in their basement, where he’d play around on
    the machines. “I was frustrated one day and I just mashed on the keyboard. By
    accident, I hit ctrl-C, and that dumped me to this prompt, and I had no idea what
    that was. Start typing stuff, it says ‘Syntax Error.’ I’m like, ‘What does that
    mean?’ I type something else, it says, ‘Undefined Function Error.’ I’m like, ‘What
    does that mean?’” His cousin suggested that he type ‘LIST,’ and the BASIC code
    for the game he was playing printed out on the screen.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: San小时候通过在键盘上随机敲打来学习编程。他的父母在地下室开了一家电脑店，他就在那里的电脑上玩。“有一天我很沮丧，就开始猛敲键盘。结果不小心按到了ctrl-C，屏幕跳出了一个提示框，我根本不知道那是什么。于是我开始输入一些东西，结果显示‘语法错误’。我当时就想，‘这是什么意思？’我再输入一些东西，它说，‘未定义函数错误。’我想，‘这是什么意思？’”他的表哥建议他输入‘LIST’，结果他正在玩的游戏的BASIC代码就显示在了屏幕上。
- en: San’s approach to learning programming ended up being a great experience in
    building drivers. A lot of the work in writing hardware drivers is figuring out
    what the hardware can do and how to get it to do it. Much of that work is experimentation,
    to understand how the hardware works and what the rules and protocols are to talk
    to it. San was figuring out how those rules worked from the beginning, by typing
    randomly onto the computers in his parents’ basement just to see what happened.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: San的编程学习方法最终成为了构建驱动程序的宝贵经验。编写硬件驱动程序的大部分工作就是弄清楚硬件能做什么，以及如何让它做那些事。这项工作大部分是实验，目的是理解硬件如何工作，和与它沟通的规则和协议是什么。San从一开始就在自己家地下室的电脑上随便敲打，看看会发生什么，从而在摸索这些规则。
- en: He continued his programming education in childhood with hobby projects, like
    cracking software copy protection schemes. He did this as a workaround for having
    limited access to games, since Canada didn’t have a strong software marketplace
    at that time. He kept programming through high school and afterwards by working
    on kernels and drivers for chips and other hardware systems, always learning more
    about how to make the software talk to the hardware.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 他在童年时期继续通过兴趣项目进行编程教育，例如破解软件版权保护机制。他这样做是因为当时加拿大的软件市场不发达，自己有限的游戏资源只能通过这种方式解决。他在高中期间继续编程，之后通过为芯片和其他硬件系统开发内核和驱动程序，始终在学习如何让软件与硬件进行对话。
- en: San didn’t go to college. Ironically, it was an internship created to show kids
    the advantage of going to college that convinced him not to.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: San没有上大学。讽刺的是，正是为了向孩子们展示上大学的好处而设立的实习项目，最终让他决定不去上大学。
- en: He got an internship (which led to a summer job) working with Bell Northern
    Research (BNR) on a CPU simulator, where he learned new programming languages
    and internals of processors. He was so enthusiastic about the work that he wanted
    to eventually work at BNR, but he realized that his grades in high school would
    never get him into the kind of college he needed to go to to get a job there.
    So he decided to skip that step and do it all on his own instead, and started
    an Internet Service Provider (ISP) with some friends. Along the way, he kept hacking
    on operating systems and random pieces of hardware, building up the skills that
    make a good driver developer.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 他通过一个实习（后来转为暑期工作）与贝尔北方研究公司（BNR）一起做CPU模拟器，在那里他学习了新的编程语言和处理器内部原理。他对这项工作非常热衷，甚至想最终留在BNR工作，但他意识到自己的高中成绩永远无法让他进入那种能为他提供工作的大学。所以他决定跳过这一环节，自己独立完成，于是和一些朋友一起创办了一个互联网服务提供商（ISP）。在此过程中，他一直在黑客操作系统和各种硬件，积累了成为一名优秀驱动开发人员所需的技能。
- en: “Give me a weird piece of hardware that you don’t really know how it works,
    and give me some piece of software that can make it work. Between taking apart
    the software and analyzing the hardware, I can reverse-engineer and create another
    driver that works.”
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: “给我一块你不知道它如何工作的奇怪硬件，再给我一段能让它工作的软件。通过拆解软件和分析硬件，我可以反向工程并创建另一个有效的驱动程序。”
- en: In 2005, San joined the platforms group at Google, where he wrote drivers for
    custom hardware. In 2007, he moved over to Android to work on Swetland’s systems
    team.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 2005年，San加入了谷歌的平台组，负责为定制硬件编写驱动程序。2007年，他转到安卓，加入了Swetland的系统团队。
- en: “I joined to work on the G1\. Initially, that was in the form of the ‘frankenboard,’
    the Qualcomm ‘surfboard,’ which was this big, crazy prototype phone board, which
    was the MSM chipset^([17](#c07-footnote-17)) on a big breakout. It was like a
    phone, but exploded out with all kinds of test points, so they could load code
    into it and do all kinds of stuff.”
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: “我加入是为了工作在G1上。最初，这个工作形式是‘frankenboard’，高通的‘surfboard’，这是一个大而疯狂的原型手机板，搭载了MSM芯片组^([17](#c07-footnote-17))，并且进行了大范围的扩展。它看起来像一部手机，但被各种测试点搞得像是爆炸开了一样，可以将代码加载到里面并做各种实验。”
- en: '![](image_fi/502680c07/f07005.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c07/f07005.png)'
- en: San performing thermal testing on a battery (with a lighter), in February of
    2008\. The Qualcomm “surfboard” for the processor in the G1 is on the desk, in
    the background. (Picture courtesy Brian Swetland.)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 2008年2月，San正在对一块电池进行热测试（用打火机），背景中桌子上是用于G1处理器的高通“surfboard”。（图片由Brian Swetland提供。）
- en: When he started on the team, San’s main job was bringup. “Bringup at that time
    was the really, really low-level stuff. The clock control and power rail, power
    control.” That first system, the G1, was unusually complicated. There were actually
    *two* CPUs on it, one controlled by Qualcomm’s controller chip (an ARM 9), and
    one controlled by Android (an ARM 11). Booting the G1 required first booting the
    Qualcomm chip, then booting the Android chip.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当他加入团队时，San的主要工作是引导启动。“当时的引导启动是非常低级的工作，涉及到时钟控制、电源轨和电源控制。”那个第一个系统，G1，异常复杂。它实际上有*两个*CPU，一个由高通的控制芯片（ARM
    9）控制，另一个由安卓（ARM 11）控制。启动G1需要先启动高通芯片，再启动安卓芯片。
- en: “My job was to figure out how to build the drivers. I had to figure out how
    to have these two things talk to each other. Then get the clock control hooked
    up, get the power rails hooked up so we could start turning on peripherals, like
    the SD^([18](#c07-footnote-18)) controller so that the SD card could come up,
    and the graphics controller. So I did all the low-level nitty-gritty stuff, and
    then moved on to the SD Card.”
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: “我的工作是弄清楚如何构建驱动程序。我必须弄清楚如何让这两者互相通信。然后接上时钟控制，接上电源轨道，以便我们可以开始启动外设，比如SD^([18](#c07-footnote-18))控制器，以便SD卡能够启用，再比如图形控制器。所以我做了所有底层的琐碎工作，然后转向了SD卡。”
- en: 'The SD card on the G1 presented an interesting problem. First, the SD card
    was useful for two separate things: storage and Wi-Fi. SD cards are mostly thought
    of as removable storage. But at the time, SD was also sometimes used to provide
    Wi-Fi (the card would have a Wi-Fi chip instead of memory hardware).'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: G1的SD卡带来了一个有趣的问题。首先，SD卡有两个不同的用途：存储和Wi-Fi。SD卡大多数被认为是可拆卸存储。但当时，SD卡有时也被用来提供Wi-Fi（卡上会有一个Wi-Fi芯片，而不是存储硬件）。
- en: Getting SD to work was important, because it controlled both of these areas.
    But it was difficult. “No one [on the Android team] knew how SD cards worked.
    You couldn’t get the specs on SD cards, because to get the specs you had to join
    the SD association, and they wouldn’t let you do anything open source.^([19](#c07-footnote-19))
    So I had to reverse-engineer the SD card, the SD card protocol, and the SD IO
    protocol [for Wi-Fi], and reverse-engineer a bunch of drivers, to figure out how
    to write my own driver. I spent months figuring out how to make it work.”
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让SD卡工作很重要，因为它控制了这两个方面。但这很困难。“没有人（安卓团队的人）知道SD卡是怎么工作的。你无法获得SD卡的规格说明，因为要获得规格说明，你必须加入SD协会，而他们不会让你做任何开源的事情。^([19](#c07-footnote-19))所以我不得不对SD卡、SD卡协议和SD
    IO协议（用于Wi-Fi）进行逆向工程，并逆向工程大量驱动程序，弄清楚如何编写我自己的驱动程序。我花了几个月时间弄清楚如何让它工作。”
- en: 'San got SD working (for both storage and Wi-Fi), but there was a problem. The
    SD card on the G1 was very accessible to the user, so it could be popped in or
    out at any time. “Someone had decided that having the SD card on the side, hot-swappable,
    was a good idea. If you try to pull a hard drive in and out of a Linux system,
    you’re gonna have a bad time. This was the worst: device ripped out with almost
    no warning. You could be writing to the disk. Maybe you took a picture thirty
    seconds ago, so those buffers were still in the OS page cache, and they’re not
    gonna get written out for another thirty seconds.”'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: San让SD卡正常工作（包括存储和Wi-Fi），但出现了一个问题。G1的SD卡对用户来说非常容易接触，因此可以随时插入或拔出。“有人决定将SD卡放在侧面，支持热插拔，是个好主意。如果你试着在Linux系统中插拔硬盘，你会发现这很麻烦。这是最糟糕的：设备几乎没有任何警告就被拔出。你可能正在写入磁盘。也许你三十秒前拍了一张照片，那些缓存数据仍然在操作系统页面缓存中，它们还不会被写入，可能还要等三十秒。”
- en: There was a cover on the G1’s SD Card slot that users had to open before popping
    the card out. Opening that cover sent a signal into the system, which could be
    used as a cue to quickly get everything into a stable state in case the user popped
    the card out. But it was difficult to find all of the places in the code where
    this needed to happen. To make things worse, debugging the situation required
    a lot of tedious card-popping. Over, and over, and over. Eventually, San asked
    for help.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: G1的SD卡槽有个盖子，用户必须先打开这个盖子才能拔出卡片。打开这个盖子会向系统发送一个信号，这个信号可以用作一个提示，快速让系统进入稳定状态，以防用户拔出卡片。但找到代码中需要执行此操作的所有地方是非常困难的。更糟糕的是，调试这个情况需要很多重复的拔卡操作。一次又一次，反复操作。最终，San请求了帮助。
- en: 'He reached out to Andy: “‘Hey, you’re into robots. Do we have someone that
    could make me a robot that could do this?’ He hooked me up with someone. I told
    them what I needed: a little bot that allows me, through software, to control
    how it goes in and out, and then I would create a little closed-loop test. That
    allowed me to track down all of these bugs.” San used the SD card robot to chase
    those bugs one by one until the system worked reliably.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 他联系了Andy：“‘嘿，你对机器人感兴趣。我们有没有人能帮我做一个可以做这个的机器人？’他把我介绍给了某个人。我告诉他们我需要什么：一个小机器人，通过软件控制它的进出，然后我会创建一个闭环测试。这让我能够追踪到所有这些bug。”San利用SD卡机器人一个一个地追踪这些bug，直到系统稳定运行。
- en: '![](image_fi/502680c07/f07006.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c07/f07006.png)'
- en: San’s SD Card robot, which continuously popped the card in and out of the slot
    to force crashes that San could debug (picture courtesy San Mehat)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: San的SD卡机器人，通过不断地将卡片插入和拔出插槽来强制发生崩溃，方便San进行调试（图片由San Mehat提供）。
- en: 'Post-G1: Sapphire and Droid'
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: G1发布后：Sapphire和Droid
- en: After the G1 shipped, San started work on the device code-named “Sapphire,”
    which would become the T-Mobile G2 MyTouch. The main work for that device was
    performance. “It was slow as shit. It was a little bit faster than the G1, but
    at the same time, Romain,^([20](#c07-footnote-20)) bless his heart, and all these
    other turkeys [in the platform and apps teams] were putting all this crazy thicker
    software on top of it. So switching apps, it was always janky and laggy. I spent
    a lot of time on that project optimizing the kernel. So it was really lots of
    performance improvements. It was kind of rinse and repeat.”
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: G1发布后，San开始了代号为“Sapphire”的设备开发工作，最终成为T-Mobile G2 MyTouch。这个设备的主要任务是提升性能。“它慢得要死。虽然比G1稍微快一点，但与此同时，Romain^([20](#c07-footnote-20))，真是好人，和平台及应用团队的其他人都在上面堆积着越来越厚的软件。所以切换应用时，总是卡顿和延迟。我花了很多时间在这个项目上优化内核。所以基本上就是不断地提升性能，重复这个过程。”
- en: 'After the G2 shipped, San’s next challenge was the Motorola Droid. One of the
    problems that he had to deal with was handling power-off scenarios, which was . . .
    complicated. “These little bastards have like thirty different power domains in
    them, and they’re all individually controlled. To turn the thing off, it’s a delicate
    dance of: *this* off first, wait so long, *this* off, then *this* off, then *this*
    off . . . All the way, as you’re going down, the phone is getting dumber and dumber.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: G2发布后，San的下一个挑战是摩托罗拉Droid。他必须处理的一个问题是电源关闭场景，这个问题非常复杂。“这些小家伙们有大约三十个不同的电源域，它们都是单独控制的。要关闭设备，必须非常小心地依次操作：先关*这个*，等一段时间，再关*这个*，然后关*这个*，最后关*这个*……一路上，手机变得越来越傻。”
- en: '“The failure case on Droid was this: the phone would idle to sleep, or you
    would turn it off, and you would get a phone call at the same time and your phone
    would never ring. We would be going down these power states and we would stop
    listening to the modem because we would turn that off. The modem would try to
    wake us up, but we’re not listening to the modem anymore; we’re committed to going
    to sleep. So we go to sleep, and the modem’s like ‘But, but, but, but . . . !’'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: “Droid的故障案例是这样的：手机进入休眠状态，或者你关闭它的时候，恰巧接到一个电话，结果手机根本不会响铃。我们会进入这些电源状态，然后停止监听调制解调器，因为我们会关闭它。调制解调器会试图唤醒我们，但我们不再监听调制解调器了；我们已经决定要睡觉了。所以我们睡着了，而调制解调器就在那边‘可是，可是，可是……！’”
- en: “We realized eventually that the hardware was missing a wire between the modem
    and the CPU to actually tell it to wake up.” It was way too late^([21](#c07-footnote-21))
    to change the hardware, so they ended up hacking around the problem by sending
    the wakeup signal on wires used for other parts of the system.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: “我们最终意识到，硬件缺少了一根线，它应该连接调制解调器和CPU，用来告知CPU唤醒。”因为已经太晚了^([21](#c07-footnote-21))，无法更改硬件，所以他们最终通过在其他系统组件的线路上发送唤醒信号来解决问题。
- en: Another part of working on the Droid involved a bug that San chased in the Wi-Fi
    system, which was causing hiccups in video. “There was that Miss America pageant
    with that very controversial comment about marriage between a man and a woman.
    Hiroshi comes into my office and was like, ‘We got this big problem. YouTube videos
    are glitching, only over Wi-Fi.’ I’m like ‘Okay, no problem, it’s probably a DMA^([22](#c07-footnote-22))
    thing. Give me a reference video.’”
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在工作中，San还遇到了一个问题，涉及Droid的Wi-Fi系统，它导致视频播放时出现卡顿。“那次美国小姐选美比赛里有个关于‘男人与女人结婚’的非常有争议的评论。广志走进我的办公室，说，‘我们遇到了一个大问题，YouTube视频在Wi-Fi下会卡顿。’我说，‘好吧，没问题，可能是DMA^([22](#c07-footnote-22))的问题。给我一段参考视频。’”
- en: Hiroshi gave him the video and the time at which the glitch occurred, which
    happened to be that awkward segment of the Miss America pageant. San spent 2 days
    debugging it, listening to that same video segment over and over. “Whenever I
    hear someone mention Miss America, I get this visceral [feeling of] being in Walnut
    Creek, it’s a hundred degrees, it’s summertime, I’m looking at this phone and
    I’m listening to this person say garbage over and over again.”
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 广志给了他视频和故障发生的时间，恰好是美国小姐选美比赛中的那个尴尬片段。San花了两天时间调试，反复听同一段视频。“每当我听到有人提到美国小姐时，我就会有一种强烈的[感觉]，仿佛我正在沃尔纳特溪，气温有一百度，正值夏天，我盯着这部手机，听着这个人不断地说废话。”
- en: Rebecca Zavin and the Unloved Device
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Rebecca Zavin 和这款不被喜爱的设备
- en: We built this safe. We just forgot the walls.
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们建了这个保险箱，只是忘了做墙壁。
- en: ''
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Rebecca Zavin
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —Rebecca Zavin
- en: The systems team needed more reinforcements for the push to ship 1.0\. Rebecca
    Zavin joined the team in early 2008.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 系统团队需要更多的支持来推动 1.0 版本的发布。Rebecca Zavin 于 2008 年初加入了团队。
- en: Rebecca started programming much later than many of her teammates on Android;
    she didn’t really get into it until college. She always figured she’d become a
    doctor, so she went to college to get a pre-med degree in chemical engineering.
    That’s when she discovered that she hated chemistry. In the meantime, she got
    a job in the computer science department at the college, helping set up a computer
    lab. She started hanging out in that department more and more. Once she started
    taking classes in CS, she was hooked.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Rebecca 开始编程的时间比她的许多 Android 团队成员要晚；她直到大学才真正接触编程。她一直认为自己会成为一名医生，于是去大学学化学工程，准备攻读医学院预科。然而，她在学习过程中发现自己讨厌化学。与此同时，她在大学的计算机科学系找到了一份工作，帮助设置计算机实验室。她开始越来越多地待在那个系里。一旦她开始上计算机科学的课程，就再也离不开了。
- en: After college, Rebecca went to grad school, and eventually joined Google, working
    with San in the platforms team. About a year after San left her team to join the
    Android team, Rebecca was also up for something new. “I wanted to be a little
    uncomfortable. A little bit challenged.” She joined Swetland’s systems team in
    January of 2008, two months after the SDK shipped, and just in time for the long
    push up to 1.0.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 大学毕业后，Rebecca 进入了研究生院，最终加入了 Google，与 San 一起在平台团队工作。在 San 离开她的团队加入 Android 团队约一年后，Rebecca
    也开始寻求新的挑战。“我想要有点不舒服，想要有点挑战。”她于 2008 年 1 月加入了 Swetland 的系统团队，距离 SDK 发布仅两个月，正好赶上了
    1.0 版本的长时间推进。
- en: The first day on the new team, she was in the office debugging a problem in
    the kernel until after 9:00 pm. “Swetland was like, ‘Alright, this is going to
    work.’”
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在新团队的第一天，她就在办公室调试内核中的一个问题，直到晚上 9 点之后。“Swetland 当时说，‘好吧，这个肯定能成功。’”
- en: The team had just shipped the SDK; now they needed to make everything work on
    a real device. Rebecca initially worked on display drivers for Android. Swetland
    gave her a minimal driver to start with. After banging on it for a while, she
    complained to him that it was really buggy. He told her it was just a prototype;
    she wasn’t supposed to actually use it. She said, “I wish you would have told
    me that. I assumed you knew what you were doing.”
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 团队刚刚发布了 SDK，现在他们需要让一切在真正的设备上运行。Rebecca 最初负责为 Android 开发显示驱动程序。Swetland 给了她一个最小化的驱动程序作为起点。在调试了一段时间后，她抱怨说驱动程序非常有漏洞。他告诉她这只是一个原型，实际上不应该使用它。她说，“我真希望你能告诉我这一点。我以为你知道自己在做什么。”
- en: After getting the driver to work, Rebecca moved on to work on the memory subsystem,
    which she continued working on for the next few years. Her goal was getting bits
    to flow through the system with the minimum number of copies (because copy operations
    are expensive). For example, if the camera takes a picture, there are a lot of
    pixels in a buffer somewhere that need to be sent to the GPU (the graphics processor),
    then to the video decoder, and finally to the display memory. The simplest implementation
    copies the pixels to each new subsystem along the way. This takes a long time,
    and a lot of memory, especially since pictures tend to be large (even with the
    more limited cameras of that time). Eventually, she made the system work with
    zero copies.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功让驱动程序工作之后，Rebecca 开始着手处理内存子系统，并在接下来的几年里继续工作。她的目标是让位数据通过系统流动时，复制的次数尽可能少（因为复制操作代价很高）。例如，当相机拍照时，会有很多像素存储在某个缓冲区中，这些像素需要传送到
    GPU（图形处理单元），再到视频解码器，最后到显示内存。最简单的实现方法是将像素复制到每个新的子系统中。这样需要很长时间，而且会消耗大量内存，尤其是在那时的相机还比较有限的情况下。最终，她让系统实现了零复制。
- en: 'After the G1 shipped in late 2008, Rebecca started working on the next device:
    the Motorola Droid.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2008 年底 G1 发布后，Rebecca 开始着手下一个设备：摩托罗拉 Droid。
- en: The Droid was an unloved project and device. The rest of the team was working
    on the device code-named Passion, which became the Nexus One. Passion was going
    to be a Google phone, with all the latest and greatest features, and the team
    was really excited about it. And then there was this Motorola device.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Droid 是一个不被喜爱的项目和设备。团队的其他成员正在开发代号为 Passion 的设备，后来它成为了 Nexus One。Passion 将会是一款
    Google 手机，拥有所有最新最强的功能，团队对此充满了兴奋。然后就有了这款摩托罗拉设备。
- en: Rebecca said, “No one wanted to touch it. It was ugly. Everybody was really
    excited about Nexus One. And the Droid thing? We were left to our own devices.
    Shortly after, it became a big deal for the team, because it became the first
    Verizon launch.”^([23](#c07-footnote-23))
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: “Rebecca 说，‘没有人愿意碰它。它很丑。大家都对 Nexus One 很兴奋。至于 Droid？我们只能自生自灭。不久之后，它成了团队的大事，因为它成了第一个
    Verizon 的发布。’”^([23](#c07-footnote-23))
- en: The chipset was from TI, which had drivers for the chips. But there was an alternate
    implementation of those drivers from Nokia, which Rebecca recommended that they
    start from.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: “芯片组来自TI，TI有这些芯片的驱动程序。但是诺基亚有一版替代的驱动实现，Rebecca建议他们应该从这个实现开始。”
- en: “We had a three-way meeting with Motorola where I told them, ‘I don’t think
    we should use this TI kernel; it’s a mess. I think we should use this Nokia Kernel.’
    I got a call from our TI sales guy who said, ‘Motorola called me and they said
    that you said our code was shit.’
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: “我们和摩托罗拉开了一个三方会议，我告诉他们，‘我认为我们不应该使用这个TI内核；它很乱。我觉得我们应该使用这个诺基亚内核。’然后我接到了TI销售员的电话，他说，‘摩托罗拉打电话给我，说你说我们的代码很糟糕。’”
- en: “I said, ‘I don’t think that I used any expletives in the meeting.’”
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: “我说，‘我觉得我在会议中没有使用任何脏话。’”
- en: That Embarrassing Root Bug
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那个尴尬的root漏洞
- en: One of the hallmarks of early Android development is the raw speed at which
    the team executed. Going from nothing to 1.0 in three years was astonishing, especially
    when that first release contained most of the fundamentals that would ensure that
    Android would soon become one of the most widely distributed operating systems
    in the world.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: “早期Android开发的一个标志性特点就是团队执行的速度非常快。从零到1.0只用了三年，这真是令人吃惊，尤其是那个首次发布版本就包含了确保Android很快成为全球最广泛分发的操作系统之一的大部分基础功能。”
- en: I have found that the probability of spilling coffee on myself is proportional
    to the speed at which I’m moving. There are trade-offs that come with execution
    speed. In those early days, everyone was running so fast that they sometimes failed
    to notice things that might have been caught in a more cautious and slower-paced
    environment. One of the examples of this dynamic was the famous (at least internally)
    “feature” of being able to reboot the phone from the chat app.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: “我发现自己把咖啡洒到身上的概率和我移动的速度成正比。执行速度是有权衡的。在那些早期，大家都跑得很快，以至于有时忽略了在一个更小心、更慢的环境中本可以发现的问题。一个典型的例子就是那个著名的（至少在内部是）‘功能’，就是你可以从聊天应用重启手机。”
- en: Jeff Sharkey and Kenny Root were external developers when 1.0 launched (they
    were both hired onto the Android team later on). They were tinkering with Android,
    even before that first release. Kenny had developed an SSH client (an app that
    allows you to log into a remote computer). Kenny’s version had been built against
    an earlier, pre-1.0 version of the SDK. Jeff updated it to work against later
    builds of Android and added more functionality. They eventually published it as
    ConnectBot, one of the first applications on Android Market,^([24](#c07-footnote-24))
    where it is still the top SSH client.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: “Jeff Sharkey 和 Kenny Root 是 1.0 发布时的外部开发者（他们后来都被招聘到 Android 团队）。他们在那次发布之前就开始折腾
    Android。Kenny 开发了一个 SSH 客户端（一个允许你登录远程计算机的应用）。Kenny 的版本是针对早期的、1.0之前的 SDK 开发的。Jeff
    更新了它，使其可以兼容后来的 Android 版本，并添加了更多功能。最终他们将它发布为 ConnectBot，这是 Android Market 上的第一个应用之一，^([24](#c07-footnote-24))至今仍是顶级
    SSH 客户端。”
- en: When they were first working on ConnectBot, they received odd bug reports from
    some of their users. Jeff said, “We got this weird bug from someone saying they’d
    SSH into their server at home, type `reboot`, and their phone would reboot. We
    thought they must be smoking something, and closed as Not Reproducible.”^([25](#c07-footnote-25))
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: “当他们第一次开发 ConnectBot 时，他们收到了用户的一些奇怪的bug报告。Jeff 说，‘我们收到了一条奇怪的bug报告，有人说他们通过 SSH
    连接到家里的服务器，输入 `reboot` 后，手机就重启了。我们以为他们一定是在抽什么东西，结果把它标记为不可重现。’”^([25](#c07-footnote-25))
- en: But the bug turned out to be totally valid, and more than a little scary for
    Android.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: “但这个漏洞实际上完全有效，而且对Android来说，的确有点可怕。”
- en: Rebecca Zavin said, “People discovered if you typed `root`^([26](#c07-footnote-26))
    in Gchat^([27](#c07-footnote-27)) you could get root access on your phone. And
    then people realized that it also worked when you typed `shutdown`. Or `reboot`.”
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: “Rebecca Zavin 说，‘人们发现，如果你在 Gchat 中输入 `root`^([26](#c07-footnote-26))，你就可以获得手机的
    root 权限。然后人们意识到，当你输入 `shutdown` 或 `reboot` 时，它也能工作。’”
- en: Rebecca explained how the bug came to be. “The keyboard events were sent to
    a console that was left open. You always wanted to have some serial console.^([28](#c07-footnote-28))
    It was convenient. So we put the root console there for debugging . . . and should
    have made a note to turn it off.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Rebecca 解释了这个 bug 是怎么产生的。“键盘事件被发送到一个一直打开的控制台。你总是想要有一个串行控制台^([28](#c07-footnote-28))。那很方便。所以我们把
    root 控制台放在那里调试 . . . 本该做个记录去关掉它。”
- en: “At some point, we had this ongoing bug where we used to have the framebuffer
    console support there, so you could switch to a mode where you could see the log,
    same as you can on your Linux PC. We had this recurring bug where you’d get a
    black square in the upper left corner. It was a timer issue. Some race condition^([29](#c07-footnote-29))
    would cause the cursor to blink when you came back to graphics. So I’d get Steve
    Horowitz [telling me], ‘That black square. I got a black square!’
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: “有一段时间，我们遇到一个持续存在的 bug，之前我们支持帧缓冲控制台，所以你可以切换到一种模式，看到日志，和你在 Linux PC 上一样。我们有一个经常出现的
    bug，就是你会看到左上角有一个黑色方块。那是一个计时器问题。某个竞争条件^([29](#c07-footnote-29))会导致光标在你返回图形界面时闪烁。所以我会听到
    Steve Horowitz [对我说]，‘那个黑色方块。我有一个黑色方块！’
- en: “After spending a lot of time trying to fix the problem, I was like, ‘Let’s
    just turn off the framebuffer console. Why do we need to see the kernel log on
    the screen on the device? This is stupid. Let’s just turn it off and then we don’t
    have to deal with this problem.’
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: “在花了很多时间试图修复这个问题后，我想，‘我们干脆关掉帧缓冲控制台算了。我们为什么要在设备屏幕上看到内核日志？这太傻了。关掉它，我们就不用再处理这个问题了。’
- en: '“But when we turned off the console, it was still there [just invisible]. We
    all were like: ‘Uh-oh, oops!’'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: “但是当我们关掉控制台时，它仍然在那儿[只是看不见]。我们都像是：‘糟糕，哎呀！’
- en: “We built this safe. We just forgot the walls.”
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: “我们建了这个保险箱。我们只是忘了加墙。”
- en: Jeff said, “The person typing `reboot` into ConnectBot was effectively typing
    it into both their remote server, and into their phone, which explains the surprising
    reboot.”
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Jeff 说，“输入 `reboot` 命令到 ConnectBot 的人，实际上是在将它同时输入到他们的远程服务器和手机上，这解释了意外重启的原因。”
- en: 'Nick Pelly remembered the bug: “We thought it was some subtle, clever hack
    that someone had figured out. No, no, no: every single keyboard press you made
    was going into root shell.”'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Nick Pelly 记得那个 bug：“我们以为那是某个聪明的黑客搞出来的微妙技巧。结果不是，不是：你每按下一个键，都会进入 root shell。”
- en: Kenny Root added, “This probably opened the way for the first ‘root’ of the
    G1, but I promise it wasn’t named after me.”
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Kenny Root 补充道，“这可能为 G1 的第一个‘root’打开了道路，但我保证那不是以我名字命名的。”
- en: '![](image_fi/502680c07/f07007.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c07/f07007.png)'
- en: Rebecca debugging in March of 2008 (photo courtesy Brian Swetland)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Rebecca 在 2008 年 3 月调试（照片由 Brian Swetland 提供）
- en: There are other examples where Android missed some of the details along the
    way; everyone was running very, very fast and there was a lot to do to just get
    things working. Fortunately, the platform has survived long enough that the team
    has been able to go back and fix the problems over time. At least the ones we
    know about.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他一些例子，Android 在过程中错过了某些细节；大家都在非常非常快地奔跑，忙于把事情做起来。幸运的是，平台足够持久，团队能够随着时间推移回过头来修复这些问题。至少是我们知道的那些。
- en: Mike Chan and the B Team
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mike Chan 和 B 团队
- en: We felt we were going to change the world. And we did.
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们觉得自己将要改变世界，结果我们做到了。
- en: ''
  id: totrans-126
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Mike Chan
  id: totrans-127
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —Mike Chan
- en: The final member to join the systems team prior to 1.0 was Mike Chan.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.0 版本之前加入系统团队的最后一位成员是 Mike Chan。
- en: Mike first wanted to become a programmer as early as middle school. When he
    saw the game *Lode Runner*, he wanted to write video games when he grew up. That
    dream didn’t last long, however; in high school, he was more interested in administering
    computer systems. But in college, he took programming classes and returned to
    his original plan of becoming a programmer. Landing his first job out of school
    at Google sealed his fate.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Mike 从中学开始就想成为一名程序员。当他看到游戏 *Lode Runner* 时，他就想长大后编写视频游戏。然而，这个梦想并没有持续多久；在高中时，他更感兴趣的是计算机系统的管理。但在大学时，他上了编程课，重新回到了成为程序员的初衷。他毕业后找到的第一份工作是在
    Google，这决定了他的命运。
- en: He started at Google in 2006, joining the platforms team that San and Rebecca
    worked on. Like them, he also eventually transferred to the Android group, arriving
    a month after Rebecca, in February of 2008\. The SDK had already launched, but
    there was still a lot of work to do to get the product to 1.0.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 他在 2006 年加入了 Google，加入了 San 和 Rebecca所在的平台团队。像他们一样，他也最终转入了 Android 团队，并在 2008
    年 2 月，Rebecca 后一个月到达。SDK 已经发布，但仍有很多工作要做，才能将产品推向 1.0 版本。
- en: Security Blanket
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全保护
- en: Mike’s starter project was to make Android secure prior to shipping 1.0\. No
    pressure.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Mike 的启动项目是在发布 1.0 版本之前使 Android 变得安全。没有压力。
- en: Android was built from the start with security in mind. Swetland specifically
    wanted to implement a more secure model for Android than he had worked with at
    Danger. Those Hiptop devices were even more resource constrained and didn’t have
    hardware facilities to protect apps from each other, so they relied on software
    mechanisms. Brian insisted that all Android hardware had to have an MMU^([30](#c07-footnote-30))
    to provide hardware security instead.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Android 从一开始就考虑了安全性。Swetland 特别希望为 Android 实现一个比他在 Danger 工作时使用的更安全的模型。那些 Hiptop
    设备的资源更加紧张，并且没有硬件设施来保护应用程序之间的安全，所以它们依赖软件机制。Brian 坚持要求所有 Android 硬件必须具备 MMU^([30](#c07-footnote-30))，以提供硬件安全保护。
- en: Another important aspect of security on the platform was treating all applications
    as separate “users” on the device. On other operating systems, users would be
    protected from each other, but not from themselves. So, for example, you could
    create a user account on a PC and the data that you created in that account would
    be protected from other users on the system. However, any application that you
    installed would run as you, so all of your applications would have access to all
    data in your account. There was an implicit trust between any user and all of
    the applications they installed.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 平台上安全的另一个重要方面是将所有应用程序视为设备上的独立“用户”。在其他操作系统中，用户之间会相互保护，但不会保护自己。所以，例如，你可以在 PC 上创建一个用户账户，且你在该账户中创建的数据会受到系统中其他用户的保护。然而，任何你安装的应用程序都会以你本人身份运行，因此所有的应用程序都可以访问你账户中的所有数据。用户与其安装的所有应用程序之间存在隐性信任。
- en: But the Android engineers felt (rightly so) that the applications on the device
    should not be inherently trusted. So rather than having apps running as the user
    who installed them, Brian’s design had each app run as a separate, unique user
    on the device. This approach guaranteed (through the Linux kernel mechanism of
    user IDs, or UIDs) that apps had no automatic access to the data of any other
    application on the same device, even though those other applications were installed
    by the same device owner. Brian provided a low level service to create, destroy,
    or run-as-a-user. Dianne Hackborn, on the framework team, integrated this service
    with higher-level application permissions and built out the policies for application
    UID management.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，Android 工程师认为（这完全正确）设备上的应用程序不应当天生就值得信任。因此，Brian 的设计让每个应用程序作为设备上的独立、唯一的用户来运行，而不是以安装该应用程序的用户身份运行。这种方法通过
    Linux 内核机制中的用户 ID（UID）保证了应用程序无法自动访问同一设备上任何其他应用程序的数据，即使这些应用程序是由同一设备所有者安装的。Brian
    提供了一个低级服务来创建、销毁或以某个用户身份运行应用程序。框架团队的 Dianne Hackborn 将此服务与更高层次的应用程序权限集成，并构建了应用程序
    UID 管理的策略。
- en: This system of hardware-protected processes and applications-as-users was mostly
    set up and working, but there were many details that needed to be polished. For
    example, although the application processes were protected from each other, many
    of the built-in system processes were running as users with elevated permissions,
    giving them access to more than they strictly needed on the device.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这种硬件保护的进程和将应用程序视为用户的系统大致已经设置并运行，但还有许多细节需要打磨。例如，虽然应用程序进程相互之间是受保护的，但许多内置系统进程是以具有提升权限的用户身份运行，这使得它们能访问设备上超出其严格需要的数据。
- en: In the meantime, the iPhone had recently been jailbroken,^([31](#c07-footnote-31))
    which was a good reminder to complete this security work before they shipped 1.0.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，iPhone 最近被越狱过^([31](#c07-footnote-31))，这成为了一个很好的提醒，促使他们在发布 1.0 之前完成这项安全工作。
- en: Mike thought the project was not only a great introduction to Android and security
    models of operating systems; it was also an introduction to Swetland’s management
    style, “Brian has an interesting way of throwing you into the deep end and figuring
    out if you can sink or swim.”
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 迈克认为这个项目不仅是学习安卓操作系统和安全模型的绝佳入门，更是对斯韦特兰管理风格的初步了解，“布赖恩有一种有趣的方式，把你直接扔进深水区，看你能否自救。”
- en: As starter projects go, it was . . . a big one. Not only was there pressure
    to get it done, because it clearly had to happen before shipping the first device,
    but it was something that affected everyone else building the platform and apps
    on Android at the time. The pressure was on. “As I was trying to make changes,
    I was breaking stuff left and right. It was super painful. All the teams would
    be complaining that something’s broken and I’m trying to fix this as fast as I
    can, trying to anticipate it.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 作为入门项目来说，这个算是……一个大项目。不仅有压力要完成，因为显然必须在发布第一个设备之前完成，而且这件事影响到当时在安卓平台上构建平台和应用的所有其他团队。压力山大。“当我试图做出改变时，我左冲右突，搞得一团糟。所有团队都在抱怨某些东西坏了，而我在尽快修复这些问题，尽量预见到它们。”
- en: “Steve Horowitz [Android’s engineering director at the time] was all over me.
    ‘You broke the build!’ I’m like, ‘I know, Steve. I know I broke the build. I’m
    trying to fix it now. Having you stand there is not going to make me fix it any
    faster.’
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: “当时的安卓工程总监史蒂夫·霍罗威茨一直在盯着我。‘你把构建弄坏了！’我说，‘我知道，史蒂夫，我知道我把构建弄坏了，我正在修复它。你站在那里并不会让我修得更快。’”
- en: “That was a trial by fire. Learned a bunch of stuff, touched all parts of the
    system, and broke everything.”
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: “那简直是一次火中取栗。学了很多东西，涉及了系统的各个部分，最后把所有东西都弄坏了。”
- en: Mike’s next project was improving battery life. At that time, coming up to the
    launch of the G1, the battery life was awful. To make things worse, all of the
    teams were blaming the other teams for the problem. “Apps team would blame the
    framework team. The framework team would blame the systems team. The systems team
    would blame the apps team.”
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 迈克的下一个项目是提高电池寿命。当时，在G1发布之前，电池寿命非常糟糕。更糟糕的是，所有团队都在互相指责这个问题。“应用团队会怪框架团队，框架团队会怪系统团队，系统团队则会怪应用团队。”
- en: Andy didn’t care whose fault it was, he just wanted it fixed. He gave the problem
    to Swetland, who gave it to Mike.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 安迪并不在乎是谁的错，他只是希望问题能尽快解决。他把问题交给了斯韦特兰，斯韦特兰又把问题交给了迈克。
- en: Brian asked, “How much do you know about power management?”
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 布赖恩问道：“你对电源管理了解多少？”
- en: Mike said, “I don’t know anything, Brian.”
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 迈克说：“布赖恩，我什么都不知道。”
- en: “Well I suggest you start learning, because you’re in charge of this thing now.”
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: “那么，我建议你开始学习，因为你现在负责这个事情了。”
- en: 'Mike quickly realized that part of the problem was one of expectations. “The
    problem I explained to everyone was: You’re telling me we have to have just as
    good battery life as the iPhone. We have this capability to run all these apps
    in the background,^([32](#c07-footnote-32)) the hardware that we have has a bigger
    screen, we run background tasks, we were the first to do 3G, and we have a physically
    smaller battery.”'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 迈克很快意识到问题的一部分在于预期。“我跟大家解释的问题是：你们告诉我，我们的电池寿命必须和iPhone一样好。我们有能力在后台运行所有这些应用，^([32](#c07-footnote-32))我们的硬件有更大的屏幕，我们运行后台任务，我们是第一个支持3G的，而且我们的电池物理上更小。”
- en: One of the main things that Mike did was add instrumentation to the system to
    know where the power was going. Prior to this, they could see the battery was
    being drained, but had no idea who was doing what, so it was difficult to find
    and fix the root problems. Once they knew where the problems were, they could
    go address them.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 迈克做的其中一项主要工作是向系统中添加仪表，以了解电源的去向。在此之前，他们能看到电池在消耗，但不知道是谁在做什么，所以很难找到并修复根本问题。一旦他们知道了问题所在，就可以去解决它们。
- en: Mike also had ongoing debates with Dianne, on the framework team. Many of the
    battery problems were coming from poor behavior in apps, which would do things
    like hold a wake lock^([33](#c07-footnote-33)) too long, but the users would just
    blame Android overall. “I was pushing for a more explicit system where if an app
    goes into the background, you force-release the resource. So basically a less
    flexible platform. Dianne was under the firm belief that it’s not the platform’s
    fault, it’s the developers’, and the right fix is to educate all these app developers.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Mike还与框架团队的Dianne进行了持续的辩论。许多电池问题源自应用程序中的不良行为，比如长时间持有唤醒锁^([33](#c07-footnote-33))，但用户通常会归咎于Android。“我一直在推动一种更明确的系统，如果一个应用进入后台，系统就强制释放资源。也就是说，平台的灵活性减少了。Dianne坚信这不是平台的问题，而是开发者的问题，正确的解决方案是教育所有这些应用开发者。”
- en: “This was a battle we had for years.”
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: “这是我们争论了多年的问题。”
- en: The other project that Mike worked on was the *governor*.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Mike参与的另一个项目是*调速器*。
- en: A governor in an OS is the mechanism by which the speed, or frequency, of the
    CPU is changed to save power. For example, if your CPU is running really fast,
    it is consuming more power and thus more battery. But if the device is idle at
    the time, that’s a large and unnecessary waste of battery power. The governor
    exists to detect these different runtime modes and scale the CPU frequency accordingly.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统中的调速器（governor）是通过改变CPU的速度或频率来节省电力的机制。例如，如果CPU运行得非常快，它会消耗更多的电力，从而消耗更多的电池。但是如果设备此时处于空闲状态，这就是一种巨大的不必要的电池浪费。调速器的作用就是检测这些不同的运行模式，并相应地调整CPU的频率。
- en: 'When the G1 launched, the only governor in effect was the *ondemand* governor
    that was part of core Linux. It was a simple system with just two settings: full-speed
    and idle. This was better than nothing, but wasn’t good enough for Android’s purposes,
    especially since the heuristics for that governor were tuned for Linux running
    on server or desktop machines, not for the more constrained world of mobile devices.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当G1发布时，唯一有效的调速器是*ondemand*调速器，它是核心Linux的一部分。这是一个简单的系统，只有两种设置：全速和空闲。这总比什么都没有要好，但对于Android来说还不够，特别是因为该调速器的启发式设置是为Linux在服务器或桌面计算机上运行时调优的，而不是为移动设备这个受限的环境设计的。
- en: Mike started playing with the governor in the late stages of 1.0, but had to
    put that project aside after an unfortunate incident of a demo that Andy gave
    to the Google execs.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Mike在1.0的后期开始玩调速器，但在Andy向Google高层展示演示的过程中发生了不幸事件后，他不得不将这个项目搁置一旁。
- en: Mike had checked in a change that inadvertently made the phone painfully slow.
    “I was experimenting on master^([34](#c07-footnote-34)) with the conservative
    governor, which skewed very, very heavy towards saving power at the cost of performance.
    The phone was pretty much unusable.”
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Mike提交了一个更改，不小心使手机变得非常缓慢。“我在master版本上实验了保守型调速器，这种调速器极度倾向于通过牺牲性能来节省电力，结果手机几乎无法使用。”
- en: Meanwhile, Andy had a monthly review with Larry and Sergey to show them the
    status of this project. Andy flashed^([35](#c07-footnote-35)) a build of master
    onto a phone and went off to his meeting.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，Andy和Larry、Sergey进行了月度回顾，向他们展示了该项目的进展。Andy将一个master版本的构建刷入手机，然后去参加他的会议。
- en: At the meeting, he showed a demo using that build, which . . . did not go well.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在会议上，他展示了使用该版本的演示，但…并不顺利。
- en: “He came back, he was pissed off.”
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: “他回来了，气得不行。”
- en: This incident was a great learning experience for Mike. On one hand, he learned
    the importance of testing his changes before pushing them on everyone that might
    use that build. But also, he learned how important it is to have a supportive
    manager.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这次事件对Mike来说是一个很好的学习经验。一方面，他学会了在将更改推送给可能使用该构建的每个人之前，必须先进行测试。但另一方面，他也意识到拥有一个支持自己的经理是多么重要。
- en: “Brian stood toe-to-toe with Andy in the hallway, screaming back that it was
    his fault for using master without any testing. We’re doing all of this stuff
    to launch Android on time, we don’t have the time to make sure your demos are
    perfect. I never saw anyone yell at Andy. He never brought my name up. He knew
    it was my code.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: “Brian在走廊上和Andy面对面争吵，喊着说使用master版本没有经过任何测试是他的错。我们做这些工作是为了按时推出Android，我们没有时间确保你的演示完美无缺。我从没见过有人对Andy大声吼叫过，他从未提到我的名字，他知道这是我的代码。”
- en: “He later came back to my desk and calmly told me to revert all my changes and
    not touch this until after we shipped.”
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: “他后来回到我的桌前，平静地告诉我撤回所有更改，并且在我们发布之后才去处理这个问题。”
- en: The B Team
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: B团队
- en: Mike joined Rebecca on the Droid project. The systems team was split between
    the people working on the Passion (which became the Nexus One) and the Droid.
    Swetland remembered, “I had decided that we needed to split the systems group
    into two teams to distribute work between N1 and Droid, and introduced this at
    our team meeting by saying, ‘We’ll need like an A team and a —’. Before I could
    back that up and reword it better, Erik^([36](#c07-footnote-36)) completed ‘B
    Team!’ and much to my horror they adopted it as a badge of honor (possibly also
    because it embarrassed me).” The people on the Passion project were mostly those
    people who had more familiarity with that hardware. But Rebecca joked that the
    Droid project had the “B Team,” because they were working on the device that the
    team wasn’t excited about. Passion was getting all of the love and, well, *passion*
    from the team at the time.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Mike加入了Rebecca的Droid项目。系统团队在致力于Passion（后来的Nexus One）和Droid的人员之间进行了分工。Swetland回忆道：“我当时决定，我们需要把系统小组分成两个团队，将工作分配到N1和Droid之间，并在团队会议上说，‘我们需要像A队和——’。在我还没来得及完善这个说法时，Erik^([36](#c07-footnote-36))接过话说‘B队！’，令我震惊的是，他们居然把这个作为了荣誉徽章（可能也是因为它让我感到尴尬）。”参与Passion项目的人大多对该硬件更为熟悉。但Rebecca开玩笑说，Droid项目有“B队”，因为他们在做一个团队不太感兴趣的设备。Passion当时得到了团队的所有喜爱和，嗯，*激情*。
- en: 'Mike said, “Everyone assumed Nexus was going to be the big phone that was going
    to land: the first Google-branded phone, no keyboard, really slick design, OLED
    screen. It was a good phone.”'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Mike说道：“每个人都认为Nexus会是那个将要推出的超级手机：第一款Google品牌的手机，没有键盘，设计非常流畅，采用OLED屏幕。这是一款很棒的手机。”
- en: Meanwhile, the Droid hardware design was underwhelming at the time. “It was
    always hyped up that the design was going to be so amazing. When they finally
    unveiled the design, it was this ugly square thing. I remember thinking, this
    is just the initial prototype. There’s a new one coming with the final design.
    Right? No, this is the design we’re shipping with.”
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，Droid硬件设计当时让人失望。“一直都在炒作设计会非常棒。当他们最终揭开设计的面纱时，它是一个丑陋的方形东西。我记得我当时想，这只是初步的原型吧。之后会有一个新的版本，带着最终的设计吧？不，这是我们要出货的设计。”
- en: In the end, Verizon’s branding and marketing for the Droid overshadowed anything
    that Google did for the Nexus One. More on that in Chapter 45 (“Droid Did”).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，Verizon对Droid的品牌宣传和市场营销远远超过了Google对Nexus One的任何投入。更多内容见第45章（“Droid做到了”）。
- en: Building a Robust System
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建一个稳健的系统
- en: It’s worth reflecting on the approach and accomplishments of the systems team
    before moving onto the rest of the software stack. For one thing, everything they
    built was fundamental to the rest of the OS even being able to power up, much
    less function. But also, the approach they took to their work was indicative of
    an overall theme in Android of doing a complete (if quick) job, beyond the immediate
    needs of the day and looking forward to what they envisioned (or hoped) Android
    would eventually become.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续处理其余的软件堆栈之前，值得反思一下系统团队的做法和成就。首先，他们所构建的一切对于操作系统能够启动，更不用说正常运行，都是至关重要的。此外，他们处理工作的方式也体现了Android的一个总体主题，即完成一项完整（即便是快速完成）的工作，不仅满足当时的需求，而且展望未来，期待Android最终会变成什么样子（或者说是他们所希望的样子）。
- en: For example, they didn’t just work on the one or two devices currently in the
    pipeline. At the same time that the rest of Android was focused on the Sooner
    and Dream phones being developed prior to 1.0, the systems team was getting Android
    to work on completely different devices, making it more robust and flexible for
    the future world of manufacturers with completely different hardware.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，他们不仅仅是关注当前在开发中的一两款设备。在Android的其他团队专注于开发Sooner和Dream手机，准备1.0版本之前的工作时，系统团队则在让Android适配完全不同的设备，使其在未来的制造商世界中更加稳健和灵活，能够应对完全不同的硬件。
- en: Also, the team didn’t just plug together drivers from hardware manufacturers
    and ship the result; they wrote everything from the ground up to be solid and
    robust.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，团队不仅仅是将硬件厂商的驱动程序拼接在一起并交付结果；他们从零开始编写了一切，确保其稳定和稳健。
- en: 'Nick talked about this dynamic on the team: “Why wasn’t the systems team just
    an integration team? Integration is more about plugging things together to make
    them work, taking the drivers from manufacturers and getting Android to work on
    them, rather than writing the drivers themselves.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Nick谈到团队中的这种动态：“为什么系统团队不是一个集成团队呢？集成更像是把各个部分连接起来让它们工作，从硬件厂商那里拿到驱动程序并让Android在这些硬件上运行，而不是自己写驱动程序。”
- en: '![](image_fi/502680c07/f07008.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c07/f07008.png)'
- en: The port of Android to this Nokia device was what Swetland called “the holiday
    port,” which happened over Thanksgiving weekend of 2007\. (Picture courtesy Brian
    Swetland.)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Android 移植到这款诺基亚设备上被斯韦特兰称为“假期移植”，它发生在 2007 年的感恩节周末。（图片由布赖恩·斯韦特兰提供。）
- en: “We were writing a whole bunch of device drivers that many other companies wouldn’t
    have written; they would have just taken the reference Linux driver that the silicon
    provider hands over. Back in that day, those reference Linux drivers were total
    shit. It was a key decision that we weren’t just going to take those reference
    drivers; we were going to rewrite them to be at a quality that could be upstreamed
    and that we could stand by, maintain, and support. The rest of the ecosystem could
    follow our lead and fork our drivers or just reuse them.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: “我们当时写了一大堆设备驱动程序，很多其他公司是不会写这些的；他们只是会拿取硅芯片提供商交付的参考 Linux 驱动程序。那时候，参考 Linux 驱动程序真是糟透了。一个关键的决策就是我们决定不只是接受那些参考驱动，而是要重写它们，使其达到一个可以上传并且我们可以支持、维护的质量。其余的生态系统可以跟随我们的领导，分叉我们的驱动程序，或者直接重用它们。”
- en: '![](image_fi/502680c07/f07009.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c07/f07009.png)'
- en: A port of Android to a PC, in March of 2008\. Landscape laptop screens don’t
    show the portrait-mode phone screen in the best light. (Picture courtesy Brian
    Swetland.)
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 2008 年 3 月，Android 移植到 PC 上。横屏笔记本电脑屏幕并不能很好地展示竖屏模式的手机屏幕。（图片由布赖恩·斯韦特兰提供。）
- en: “We ended up with much higher quality drivers. Sure, we had some bugs, but we
    got to stability. If you have shitty drivers, it costs you stability—peripherals
    will randomly fail, the device will reboot. And it’s very hard to do power management
    correctly without good drivers and without wake locks and things like that; you
    just destroy the battery life.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: “我们最终得到了质量更高的驱动程序。当然，我们也有一些 bug，但最终我们达到了稳定性。如果你有糟糕的驱动程序，它会让你失去稳定性——外设会随机失败，设备会重启。而且没有好的驱动程序、没有唤醒锁和类似的东西，很难正确地做电源管理；你就会把电池寿命摧毁。”
- en: “That was one of the key decisions that I think largely Brian was responsible
    for that set us on the right path. We’re building out a high-quality codebase
    here, and we’re doing things the right way.”
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: “这是我认为布赖恩在很大程度上负责的一个关键决策，它使我们走上了正确的道路。我们在这里构建一个高质量的代码库，做事的方式也是正确的。”
