- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Dogma_OT_Bold_B_11">NEXT STEPS</samp>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_11">下一步</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener-img.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.jpg)'
- en: The world of programming languages is wide, and there’s a lot more for you to
    explore. Extending your compiler on your own is a great way to keep learning about
    the topics you’re most interested in.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言的世界很广阔，你还有很多东西可以探索。自己扩展编译器是一个很好的方式，继续学习你最感兴趣的主题。
- en: I’ll leave you with a few ideas to get you started.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我将给你一些思路，帮助你开始。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Add Some Missing Features</samp>
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">添加一些缺失的特性</samp>
- en: The most obvious next step is to implement the major parts of C that this book
    didn’t cover. If you already have a list of features you’re particularly excited
    to add, start with those. Then, if you want to keep going, pick a real-world C
    program—think something small, not the Linux kernel—and build out your compiler
    until it can compile that program successfully. You can choose another program
    and repeat this process until you’re satisfied with how much of the language you’ve
    implemented. Make sure to add new language features one at a time, testing each
    one thoroughly before moving on to the next one.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最明显的下一步是实现这本书没有涵盖的 C 的主要部分。如果你已经有了特别想要添加的特性列表，从那些开始。然后，如果你想继续下去，选择一个实际的 C 程序——想想一个小的程序，不是
    Linux 内核——并扩展你的编译器，直到它能够成功编译该程序。你可以选择另一个程序，并重复这个过程，直到你对自己实现的语言部分感到满意。确保一次添加一个新的语言特性，在继续下一个之前彻底测试每一个。
- en: '## <samp class="SANS_Futura_Std_Bold_B_11">Handle Undefined Behavior Safely</samp>'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '## <samp class="SANS_Futura_Std_Bold_B_11">安全处理未定义行为</samp>'
- en: 'We’ve seen that C compilers can deal with undefined behavior however they like.
    But just because you *can* do something doesn’t mean you *should*. There are huge
    benefits to dealing with undefined behavior in a clean, predictable way: it makes
    C programs more secure, easier to debug, and less terrifying in general. For example,
    you could guarantee that signed integer overflow always wraps around (this is
    what the <samp class="SANS_TheSansMonoCd_W5Regular_11">-fwrapv</samp> compiler
    option does). Or you could have the program raise an error and exit when it encounters
    undefined behavior; Clang and GCC both have a feature called UndefinedBehaviorSanitizer
    that supports this sort of error handling (*[https://<wbr>clang<wbr>.llvm<wbr>.org<wbr>/docs<wbr>/UndefinedBehaviorSanitizer<wbr>.html](https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html)*).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，C 编译器可以随意处理未定义行为。但仅仅因为你*可以*做某件事，并不意味着你*应该*做。以一种清晰、可预测的方式处理未定义行为有巨大的好处：它使
    C 程序更加安全，调试更加容易，并且总体上不那么可怕。例如，你可以保证有符号整数溢出总是会回绕（这就是 <samp class="SANS_TheSansMonoCd_W5Regular_11">-fwrapv</samp>
    编译器选项的作用）。或者你可以让程序在遇到未定义行为时抛出错误并退出；Clang 和 GCC 都有一个叫做 UndefinedBehaviorSanitizer
    的特性，支持这种错误处理（*[https://<wbr>clang<wbr>.llvm<wbr>.org<wbr>/docs<wbr>/UndefinedBehaviorSanitizer<wbr>.html](https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html)*）。
- en: Think about a few examples of undefined behavior that we discussed in this book.
    How do you think your compiler should handle them? How would that impact any optimizations
    you’ve implemented? Some types of undefined behavior are tricky to detect, but
    others aren’t too difficult to deal with; choose one that seems manageable and
    see if you can handle it cleanly.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 想想我们在本书中讨论过的一些未定义行为的例子。你认为你的编译器应该如何处理这些？这会如何影响你实现的任何优化？某些类型的未定义行为很难检测，但其他类型则不太难处理；选择一个看起来可以处理的例子，看看你是否能干净地处理它。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Write More TACKY Optimizations</samp>
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">编写更多 TACKY 优化</samp>
- en: '[Chapter 19](chapter19.xhtml) covered just a few of the IR optimizations you’d
    find in a production compiler. If you like, you can implement more on your own.
    Do some research on common compiler optimizations and pick the ones that sound
    most interesting. If you go this route, you may want to convert your TACKY code
    into *static single assignment (SSA) form*, where every variable is defined exactly
    once. SSA form is widely used in real-world compilers, including Clang and GCC,
    because it makes many optimizations easier to implement.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 19 章](chapter19.xhtml)仅介绍了你在生产级编译器中会遇到的一些 IR 优化。如果你愿意，你可以自己实现更多。做一些关于常见编译器优化的研究，并挑选出最有趣的那些。如果你走这条路，你可能想将你的
    TACKY 代码转换为*静态单赋值（SSA）形式*，在这种形式下，每个变量只会被定义一次。SSA 形式在现实世界的编译器中被广泛使用，包括 Clang 和
    GCC，因为它使得许多优化的实现更加容易。'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Support Another Target Architecture</samp>
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">支持另一个目标架构</samp>
- en: Most production compilers have several different backends to support different
    target architectures.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数生产级编译器都有多个不同的后端，以支持不同的目标架构。
- en: You can use the same strategy, converting TACKY into different assembly code
    depending on which system you’re targeting. If you use a Windows or ARM system
    and needed a virtualization or emulation layer to complete this project, a new
    backend would let you compile code that runs natively on your machine.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用相同的策略，根据你所针对的系统将 TACKY 转换为不同的汇编代码。如果你使用 Windows 或 ARM 系统，并且需要一个虚拟化或仿真层来完成这个项目，一个新的后端将让你编译出能在本机上原生运行的代码。
- en: If you add support for Windows, you’ll be able to reuse most of your existing
    code generation pass. Only the ABI will be different. Adding an ARM backend is
    a more ambitious project; you’ll need to learn a completely new instruction set.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你为 Windows 添加了支持，你将能够重用大部分现有的代码生成过程。唯一不同的就是 ABI。添加 ARM 后端是一个更具挑战性的项目；你需要学习一个全新的指令集。
- en: '## <samp class="SANS_Futura_Std_Bold_B_11">Contribute to an Open Source Programming
    Language Project</samp>'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '## <samp class="SANS_Futura_Std_Bold_B_11">为一个开源编程语言项目做贡献</samp>'
- en: Improving your own compiler is a great way to learn, but consider branching
    out and working on other projects too. Many widely used compilers are open source
    and welcome new contributors. The same goes for a whole range of related projects,
    like interpreters, linters, and static analysis tools. Pick one that you like,
    and find out how to get involved. This is a great way to put your new skills to
    work and maybe even make your favorite programming language a little faster, safer,
    more usable, or easier to learn.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 改进你自己的编译器是学习的好方法，但也可以考虑扩展到其他项目上。许多广泛使用的编译器都是开源的，并欢迎新的贡献者。其他相关项目，比如解释器、代码检查工具和静态分析工具，也都如此。选择一个你喜欢的，了解如何参与进来。这是一个很好的方式来应用你学到的新技能，也许还能让你最喜欢的编程语言变得更快、更安全、更易用，或者更容易学习。
- en: <samp class="SANS_Futura_Std_Bold_B_11">That’s a Wrap!</samp>
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">结束语！</samp>
- en: 'I hope this book has laid the foundation for you to keep building compilers
    and programming languages. I also hope it’s changed your perspective on the programming
    languages you use day to day. You’ll now be better able to appreciate the care,
    effort, and ingenuity that went into creating those languages, and when things
    go wrong, you won’t be afraid to dig into the language internals to figure out
    what’s really happening. Compilers will stop seeming like magic and start to look
    like something much more interesting: ordinary software.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这本书为你打下了继续构建编译器和编程语言的基础。我也希望它改变了你对日常使用的编程语言的看法。现在你会更能欣赏那些编程语言背后所投入的心血、努力和独创性，当遇到问题时，你也不会害怕深入了解语言内部，弄清楚到底发生了什么。编译器不再看起来像魔法，而是变得像一些更有趣的东西：普通的软件。
