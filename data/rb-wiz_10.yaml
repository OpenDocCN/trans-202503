- en: Chapter 11. Second Time’s the Charm
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章 第二次的机会
- en: Refactoring at the Refactory
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在重建厂进行重建
- en: The King, the Queen, Ruben, and Scarlet leapt from the Loop platform the moment
    it eased to a halt at the Center o’ the Kingdom station and the doors *whoosh*ed
    open. They made a beeline for the gleaming red metal gates of the Refactory, which
    they could already see from the station exit.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 国王、女王、鲁本和斯嘉丽在环形平台停稳的瞬间跳了下来，门口*嗖*的一声打开。他们直奔重建厂那扇闪闪发光的红色金属大门，站台出口的方向就能看到它们。
- en: “Right through here!” said the King. “Quickly now!” As they approached, the
    two guards manning the gates hastily pulled them open, trying to salute at the
    same time.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: “就在这里！”国王说道。“快点！”他们走近时，守卫大门的两名守卫匆忙地拉开大门，同时试图敬礼。
- en: 'The four of them sped through the gates and down a long paved road. The Refactory
    loomed ahead: a huge red metal block of a building with a dozen chimneys puffing
    a pleasant-looking pink smoke.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 他们四人飞快地穿过大门，沿着一条长长的铺砌道路行驶。前方出现了重型的重建厂：一座巨大的红色金属建筑，顶部有十几个烟囱冒出看起来十分宜人的粉红色烟雾。
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160057.png.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![无标题的图片](../Images/httpatomoreillycomsourcenostarchimages2160057.png.jpg)'
- en: They arrived at a large set of gleaming double doors that were propped open.
    A warm red light shone from within. Without hesitating, the King and Queen strode
    inside, and Ruben and Scarlet followed.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 他们来到了一扇大大的闪亮双开门，门被撑开着。从里面透出温暖的红光。国王和女王毫不犹豫地走了进去，鲁本和斯嘉丽紧随其后。
- en: “My good man!” called the King, waving at a man in a hard hat holding a clipboard.
    “We’ve got an emergency! We need to speak to the Foreman, posthaste!”
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: “我的好朋友！”国王大声喊道，挥手示意一位拿着文件夹的戴安全帽的男子。“我们有紧急情况！我们需要立刻与工头谈话！”
- en: The man looked up and nearly dropped his clipboard. “Your Majesty!” he said.
    “Of course, of course! Right away!” He dashed off into the recesses of the Refactory,
    clutching his helmet to his head with one hand and his clipboard with the other.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 那名男子抬起头，差点把文件夹掉下来。“陛下！”他说道。“当然，当然！马上！”他一边抓住安全帽，一边拿着文件夹飞奔进入了重建厂的深处。
- en: The King, the Queen, Ruben, and Scarlet stood in the entry-way, catching their
    breath. Scarlet looked around. “Where are we?” she asked.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 国王、女王、鲁本和斯嘉丽站在入口处，喘着气。斯嘉丽四下张望。“我们在哪里？”她问。
- en: “This is the main entrance to the Refactory,” said the Queen. She nodded toward
    the glow coming from farther inside the building. “Over that way is the Refactory
    floor, where all the actual work takes place.”
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: “这是重建厂的主入口，”女王说道。她点了点头，指向建筑内部更远处的光亮。“那边是重建厂的生产区，所有的实际工作都在那儿进行。”
- en: “That’s where they make Key-a-ma-Jiggers?” asked Ruben.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: “他们在这里制造Key-a-ma-Jiggers吗？”鲁本问道。
- en: The Queen nodded. “Among other things,” she said.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 女王点点头。“除了其他的事情，”她说。
- en: Ruben opened his mouth to ask what else the Refactory made, but at that instant,
    the young man in the hard hat returned, followed by a much older man with twinkling
    eyes and a great big bushy beard.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 鲁本张开嘴准备问重建厂还生产什么，但就在这时，戴着安全帽的年轻人回来，身后跟着一个年长的男子，眼睛闪闪发光，胡须浓密而蓬松。
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160059.png.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![无标题的图片](../Images/httpatomoreillycomsourcenostarchimages2160059.png.jpg)'
- en: “Your Majesty! Your Highness!” the older man said to the King and Queen, bowing
    to each in turn. “What can I do for you?”
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: “陛下！殿下！”那位年长的男子对国王和女王说，向每位王室成员鞠了一躬。“我能为您做什么？”
- en: “Seal the factory!” said the Queen. “We have reason to believe there are intruders
    in the Refactory, and they must be stopped!”
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: “封锁工厂！”女王说道。“我们有理由相信重建厂内有闯入者，必须将他们阻止！”
- en: 'The bearded man nodded curtly and walked across the Refactory’s narrow entryway
    to a bright red telephone. He picked up the receiver and dialed a single digit.
    When he spoke into the phone, his voice echoed throughout the entire Refactory:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 那位留着胡子的男子简短地点了点头，穿过重建厂狭窄的入口，走到一部明亮的红色电话旁。他拿起听筒，拨了一个数字。当他对着电话说话时，他的声音回荡在整个重建厂内：
- en: SEAL ALL EXITS! THIS IS NOT A DRILL!
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 封锁所有出口！这不是演习！
- en: SEAL ALL EXITS! THIS IS NOT A DRILL!
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 封锁所有出口！这不是演习！
- en: The old man placed a hand over the phone’s receiver. “What do these intruders
    look like?” he asked.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 老人把手放在电话的听筒上。“这些闯入者长什么样？”他问道。
- en: “We’re not sure,” said the Queen.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: “我们不确定，”女王说道。
- en: '“but there are four of them.” The man nodded again and got back on the phone:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: “但他们有四个。”那位男子再次点了点头，然后继续拨打电话：
- en: BEGIN SECTOR-BY-SECTOR SEARCH FOR FOUR INTRUDERS! DETAIN ANY SUSPICIOUS PERSONS
    AND REPORT IMMEDIATELY!
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 开始逐区搜索四个入侵者！拘留任何可疑人员并立即报告！
- en: With that, he hung up the phone and strode back to the rest of them, smiling.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 说完，他挂掉电话，微笑着走回到他们那边。
- en: “That should do the trick,” he said. “If there are any intruders in the Refactory,
    my team will find them and call us at once.”
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: “这应该能解决问题，”他说。“如果Refactory里有任何入侵者，我的团队会立刻找到他们，并立即通知我们。”
- en: “Thank you so much!” said Scarlet. “But, um, who exactly *are* you?”
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: “非常感谢！”Scarlet说道。“但是，嗯，你到底*是谁*呢？”
- en: “Why, I’m the Foreman, Rusty Fourman!” the man said, tipping his hard hat. “I’m
    in charge of all operations here at the Refactory.” He gestured to the young man
    who had fetched him. “This is Marshall Fiveman, my right-hand man.”
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: “为什么，我是工头，Rusty Fourman！”那人说着，掀起了他的安全帽。“我是这里Refactory所有操作的负责人。”他指了指从他那儿叫来的年轻人。“这是我的得力助手Marshall
    Fiveman。”
- en: “Pleased to meet you,” Marshall said.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: “很高兴见到你，”Marshall说道。
- en: “Pleased to meet you, too!” said Ruben.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: “我也很高兴见到你！”Ruben说道。
- en: “Rusty has been running the Refactory for as long as I can remember,” said the
    King.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: “Rusty一直在管理Refactory，我记得的所有时间里都是这样，”国王说道。
- en: “How long is that?” asked Scarlet.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: “那有多长？”Scarlet问道。
- en: “Oh, I don’t know,” said the King. “At least several days.”
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: “哦，我不知道，”国王说。“至少需要几天时间吧。”
- en: “Years and years!” said Rusty, laughing. He tugged on his beard and suddenly
    became serious. “I imagine these intruders are what brought you out my way. I
    have no doubt we’ll catch them soon, but do you know what they might be doing
    here?”
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: “好多年了！”Rusty笑着说道。他拉了拉自己的胡子，突然变得严肃起来。“我猜这些入侵者就是把你们带到我这的吧。我毫不怀疑我们很快就能抓到他们，但你知道他们可能在这里做什么吗？”
- en: “Yes!” Scarlet said, fishing around in her pocket. “Do you make these?” she
    asked, holding out the Key-a-ma-Jigger.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: “是的！”Scarlet一边从口袋里摸索，一边说道。“你们做这些的吗？”她问道，递出了那个Key-a-ma-Jigger。
- en: Rusty peered at the small piece of metal in her hand. “Well, yes, we do make
    Key-a-ma-Jiggers here,” he said. “And a few other things. Mostly, though, we’re
    in the business of refactoring Ruby code.”
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Rusty盯着她手中的小块金属看了看。“嗯，是的，我们确实在这里制作Key-a-ma-Jiggers，”他说。“还有一些其他的东西。大多数时候，我们的工作是重构Ruby代码。”
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160061.png.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![无说明的图片](../Images/httpatomoreillycomsourcenostarchimages2160061.png.jpg)'
- en: “Refactoring?” said Ruben. “What’s that?”
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: “重构？”Ruben问道。“那是什么？”
- en: “It’s basically when you rewrite your programs,” Rusty said.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: “基本上就是在重写你的程序时，”Rusty说。
- en: “Rewrite them?!” Ruben said. “But I spent so much time writing them the first
    time! Why would I do it again?”
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: “重写它们？！”Ruben说。“可是我第一次写它们花了那么多时间！为什么还要再写一遍？”
- en: “Because you can make your code faster, easier to read, or easier to update,
    and it still does the same work.” Rusty said. He thought for a moment. “It might
    be easier if I show you. We can do a few of the more common Ruby refactorings,
    and I think you’ll get the idea pretty quickly.” He looked at his watch. “With
    the factory sealed tight, it’s only a matter of time before my crew finds your
    culprits. In the meantime, let’s refactor a little Ruby!”
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: “因为你可以让你的代码变得更快，更容易阅读，或者更容易更新，而且它仍然能完成相同的工作。”Rusty说道。他想了想。“如果我给你示范一下可能更容易些。我们可以做几个更常见的Ruby重构，我觉得你很快就能明白了。”他看了看手表。“工厂封得严严实实，等我团队找到你的嫌疑人就只是时间问题了。与此同时，让我们做点Ruby重构吧！”
- en: The Foreman beckoned them closer and led them deeper into the Refactory, toward
    the warm glow that turned everything inside the building a deep red. He walked
    over to a long, arched railing overlooking a gently bubbling pool of what looked
    like molten red metal and opened up a familiar-looking machine—a Computing Contraption!
    The King, the Queen, Scarlet, and Ruben walked up to him as he began to type at
    the keyboard.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 工头示意他们走近一些，并带他们深入Refactory，朝着那个温暖的光芒走去，那个光芒将建筑内的一切都染成了深红色。他走到一根长长的拱形栏杆旁，俯瞰着一个看起来像是熔化的红色金属缓缓冒泡的池子，打开了一个看起来很熟悉的机器——计算装置！国王、皇后、Scarlet和Ruben走到他旁边，他开始在键盘上打字。
- en: “Now then,” said Rusty, scratching his nose with one hand and continuing to
    type with the other, “in all my years at the Refactory, I’ve seen a lot of Ruby.
    Over time, I’ve found patterns in the code that work very well, and patterns that
    don’t work so well. Would you like to see a few of the good ones?” he asked.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: “那么，” Rusty一边用一只手挠鼻子，一边继续用另一只手打字，“在我所有在Refactory的岁月里，我见过很多Ruby代码。随着时间的推移，我发现了一些非常有效的代码模式，也有一些效果不太好的模式。你们想看看一些好的模式吗？”他问道。
- en: “Absolutely!” answered the King.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: “当然！”国王回答道。
- en: Variable Assignment Tricks
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量赋值技巧
- en: '“For example,” Rusty said, “I often see code where the person who wrote it
    would like to set a variable to a particular value, but *only* if the value hasn’t
    already been set. So I might write something like this that checks whether a particular
    variable is `nil` and, if so, sets it to a default value.” And he typed:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: “比如说，”Rusty说，“我经常看到这样的代码，代码作者希望把一个变量设置为某个特定的值，但*仅仅*是在该值尚未被设置时。所以我可能会写这样的代码，检查某个变量是否是`nil`，如果是，就把它设置为默认值。”他继续键入：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: “That looks perfectly all right to me,” said the King.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: “这对我来说完全没问题，”国王说。
- en: '“Oh, it’s quite correct Ruby,” said Rusty, “and it will do exactly what we
    think it will—because `rubens_number` is `nil`, Ruby sets it to `42`. But there’s
    a much clearer way to write it!” He typed some more:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: “哦，这完全是正确的Ruby代码，”Rusty说，“它将做我们预期的事情——因为`rubens_number`是`nil`，Ruby会把它设置为`42`。但是，有一种更清晰的写法！”他继续键入：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '“You can think of `||=` as being a combination of `||` for ‘or’ and `=` for
    variable assignment,” said Rusty. “That combination says: ‘Set `rubens_number`
    to `42` if it doesn’t already have a value.’ It’s the same thing as typing this!”
    He typed some more:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: “你可以把`||=`看作是`||`（‘或’）和`=`（变量赋值）的结合体，”Rusty说。“这个组合意味着：‘如果`rubens_number`没有值，就将它设置为`42`。’这和键入下面的代码是一样的！”他继续键入：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: “What if the variable *does* already have a value?” Scarlet asked.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: “如果变量*已经*有值怎么办？”Scarlet问。
- en: '“Let’s find out!” said Rusty. He typed some more:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: “让我们来看看！”Rusty说。他继续键入：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: “In this case,” Rusty said, “`scarlets_number` already has a value of `700`,
    so `||=` doesn’t do anything. As I mentioned, `||` means ‘or,’ and you’ve likely
    seen that `=` means ‘assign this value to a variable.’” Scarlet and Ruben nodded.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: “在这种情况下，”Rusty说，“`scarlets_number`已经有了值`700`，所以`||=`什么也不做。正如我提到的，`||`表示‘或’，你可能已经见过`=`表示‘给变量赋值’。”Scarlet和Ruben点了点头。
- en: '“So,” Rusty continued, “when we write `||=`, we’re telling Ruby: ‘Hey! You
    should *conditionally assign* this value to this variable.’ That’s just a fancy
    way of saying we want Ruby to use the value it already knows *or* use the new
    value if the variable isn’t set. For `rubens_number`, there was no value, so `42`
    was set; for `scarlets_number`, we’d already set `700` as the value, so `||= 42`
    did nothing.”'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: “所以，”Rusty继续说，“当我们写`||=`时，我们告诉Ruby：‘嘿！你应该*条件性地赋值*给这个变量。’这其实是个复杂的说法，意思是我们希望Ruby使用它已经知道的值*或者*使用新值，前提是该变量尚未被设置。对于`rubens_number`，因为没有值，所以赋值为`42`；对于`scarlets_number`，我们已经设置了`700`，所以`||=
    42`什么也不做。”
- en: '“But couldn’t we write this?” Scarlet asked, and typed:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: “但我们能写这个吗？”Scarlet问道，并键入：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: “Why, yes!” Rusty said, and his great bushy beard turned upward as he smiled.
    “I wouldn’t necessarily use that code in this example, since I can just as easily
    use `||=`, but it’s a very common refactoring to use inline `if`s and `unless`es
    in Ruby.”
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: “哎，是的！”Rusty说，他的大胡子随着笑容向上翘起。“我不一定会在这个例子中使用那个代码，因为我可以轻松地使用`||=`，但是在Ruby中，使用内联`if`和`unless`进行重构是一个非常常见的做法。”
- en: “What do you mean by *inline*?” asked Scarlet.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: “*内联*是什么意思？”Scarlet问道。
- en: '“I’ll show you!” said the Foreman, and he typed more code into the Computing
    Contraption:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: “我来给你演示！”Foreman说，他继续向计算装置输入更多代码：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: “That’ll get the job done,” said Rusty, “but why use `if` and `!` if we can
    just use `unless`?”
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: “那也能完成任务，”Rusty说，“但是为什么要使用`if`和`!`，如果我们可以直接使用`unless`呢？”
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: “Now, that’s a bit better,” Rusty continued, “but it’s still more lines of code
    than we need. If we’ve got an `if` or `unless` but no `else`, we can write the
    whole thing in one line, like this.”
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: “现在，这稍微好一点，”Rusty继续说，“但它仍然比我们需要的代码行数多。如果我们有`if`或`unless`，但是没有`else`，我们可以把整个条件写成一行，像这样。”
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: “Now *this* is the best!” said Rusty. “Not only can we convert `if !`s to `unless`es,
    but we can also write `unless` on a single line with the variable we’re testing!”
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: “现在，*这个*是最棒的！”Rusty说。“我们不仅可以把`if !`转换成`unless`，还可以把`unless`与我们正在测试的变量写成一行！”
- en: “And we can do that with `if`, too?” asked Scarlet.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: “我们也能在`if`中这么做吗？”Scarlet问。
- en: '“You bet!” said Rusty, and he typed:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: “没错！”Rusty说，他继续键入：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: “Now, just as with `if`, we can use `else` with `unless`,” said Rusty, “but
    while `if`/`else` makes a lot of sense to me, I find `unless`/`else` confusing.”
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: “现在，就像`if`一样，我们也可以在`unless`中使用`else`，”Rusty说，“但是虽然`if`/`else`对我来说很容易理解，`unless`/`else`却让我感到困惑。”
- en: Crystal-Clear Conditionals
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Crystal-Clear 条件语句
- en: “I agree,” said the King, rubbing his head. “So we should convert `if !`s to
    `unless`es, and we can make `if` or `unless` one line if there’s no `else`?”
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: “我同意，”国王说道，揉了揉头。“所以我们应该把`if !`转换成`unless`，并且如果没有`else`，我们可以将`if`或`unless`写成一行？”
- en: '“Precisely,” said Rusty. “This is confusing:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: “完全正确，”Rusty说。“这个很容易让人困惑：”
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: “But *this* is clear as day!”
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: “但是 *这个* 一目了然！”
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: “In fact,” Rusty continued, “we could write these as two one-line statements—one
    `if` and one `unless`. I don’t think that’s as easy to understand, but I’ll show
    it to you in case you’re curious.”
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: “事实上，”Rusty 继续说道，“我们可以把它们写成两行一行的语句——一个 `if` 和一个 `unless`。我觉得这不太容易理解，但我会给你们演示一下，以防你们有兴趣。”
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: “Remember,” said Rusty, “`puts` returns `nil`, so that’s why we see it after
    the `=>`. But since `rubens_number` is `42` and *not* `nil`, Ruby doesn’t print
    `'Totally nil.'`.”
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: “记住，”Rusty 说道，“`puts` 返回 `nil`，所以我们才会在 `=>` 后面看到它。但因为 `rubens_number` 是 `42`
    而 *不是* `nil`，Ruby 就不会打印 `'Totally nil.'`。”
- en: “I think the `if`/`else` one is the easiest to understand,” said Ruben, “but
    it’s still a lot of extra lines. If there *is* an `else`, is there any simpler
    way to write it?”
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: “我觉得 `if`/`else` 那个最容易理解，”Ruben 说道，“但它仍然多了很多行。如果有 `else`，有没有更简单的写法？”
- en: “As it happens, there is,” said Rusty. “We can use a *ternary operator*. It
    looks like this!”
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: “正好有，”Rusty 说道，“我们可以使用一个 *三元运算符*。它长这样！”
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: “Sweet limbo of lost twist-ties!” cried the King. “What in our peaceful kingdom
    is that?”
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: “失落的扭曲扎带的甜美幽冥！”国王大声喊道，“我们这片和平王国里，究竟是什么东西？”
- en: '“It’s not nearly as scary as it looks. We’ll just use a question mark followed
    by a colon in our code,” said Rusty. “In this case, we want our code to print
    something out using `puts`. Next, we give Ruby an *expression*: something that
    will either turn out to be true or false. In this case, that’s `1 < 2`.” Rusty
    scratched his beard. “Then we write a question mark, followed by what Ruby should
    do if the expression is true. Finally, we write a colon, followed by what Ruby
    should do if the expression is false. Since 1 *is* less than 2, Ruby prints out
    `One is less than two!`” He thought for a moment. “Really, you can think of it
    as writing an `if`/`else`, just all on one line. The `?` is like a shorthand `if`,
    and the `:` is like a shorthand `else`.”'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: “它并不像看起来那么可怕。我们只需在代码中使用一个问号，后面跟着冒号，”Rusty 说道，“在这种情况下，我们希望代码通过 `puts` 打印出某些内容。接下来，我们给
    Ruby 一个 *表达式*：这个表达式的结果要么为真，要么为假。在这个例子中，表达式是 `1 < 2`。”Rusty 摸了摸胡子。“然后我们写一个问号，后面跟着如果表达式为真时
    Ruby 应该做的事情。最后，写一个冒号，后面跟着如果表达式为假时 Ruby 应该做的事情。因为 1 *确实* 小于 2，所以 Ruby 会打印出 `One
    is less than two!`。”他沉思了一下，“实际上，你可以把它当作写一个 `if`/`else`，只是把它写成了一行。`?` 就像是简写版的 `if`，而
    `:` 就像是简写版的 `else`。”
- en: “That’s quite marvelous,” said the Queen, “but don’t you find it a bit hard
    to read?”
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: “真是太神奇了，”女王说道，“不过你不觉得它有点难读吗？”
- en: “Sometimes,” admitted Rusty, “so I’ll often stick to a regular `if`/`else`.
    But if it’s a very short bit of code, I’ll sometimes refactor an `if`/`else` into
    a `? :`.”
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: “有时候，”Rusty 承认道，“所以我通常会坚持使用常规的 `if`/`else`。但是如果代码很简短，我有时会把 `if`/`else` 重构成 `?
    :`。”
- en: “What if the expression you want to check is a method with a question mark?”
    Ruben asked. “Will the ternary operator still work?”
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: “如果你想检查的表达式是一个带问号的方法呢？”Ruben 问道，“三元运算符还能工作吗？”
- en: '“Oh, yes,” said Rusty, and he quickly typed:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: “哦，是的，”Rusty 说道，他迅速打字：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: “That third line can look tricky with the two question marks so close together,”
    said Rusty, “so you want to be a bit careful with them. Remember, `nil?` is a
    built-in Ruby method that returns `true` if the object it’s called on is `nil`
    and `false` otherwise.”
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: “那第三行可能看起来有点棘手，两个问号这么近，”Rusty 说道，“所以你要小心使用它们。记住，`nil?` 是 Ruby 内置的方法，如果调用的对象是
    `nil`，它返回 `true`，否则返回 `false`。”
- en: “It’s also important to remember that `nil` gets returned because `puts` has
    no return value, not because it’s returning `bill`!” said the Queen.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: “还记得，`nil` 被返回是因为 `puts` 没有返回值，而不是因为它返回了 `bill`！”女王说道。
- en: “Quite right, quite right,” said Rusty.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: “完全正确，完全正确，”Rusty 说道。
- en: “This looks pretty good,” said Scarlet, squinting at the Computing Contraption
    screen, “but I feel like a whole bunch of `? :` symbols in a row—or even `if`/`elses`!—would
    get hard to read. Is there a good way to write code when Ruby should do a lot
    of different things without our having to write `if`s and `else`s all over the
    place?”
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: “这看起来不错，”Scarlet 眯着眼睛看着计算装置的屏幕，“但是我觉得一长串 `? :` 符号——甚至是 `if`/`else`！——会变得难以阅读。有没有一种好的方法来写代码，当
    Ruby 需要做很多不同的事情，而我们不必到处写 `if` 和 `else`？”
- en: When You Need a case Statement
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时需要使用 `case` 语句
- en: '“You’ve got a keen eye for refactoring,” said Rusty. “There *is* something
    we can use to replace `if`s and `else`s in Ruby. And while I don’t find myself
    using it a lot,” he continued, “it *can* be much more readable than a long chain
    of `if`s, `elsif`s, and `else`s. It’s called a `case` statement. Have a look!”
    He typed:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: “你对重构有着敏锐的眼光，”Rusty说。“的确，我们可以用某些东西来替代Ruby中的`if`和`else`。虽然我自己不常用它，”他继续说道，“但它*确实*比长链条的`if`、`elsif`和`else`要更具可读性。它被称为`case`语句。来看看吧！”他说着输入了代码：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '“We use the `case` keyword to tell Ruby which variable to pay attention to,”
    Rusty explained. “Then we can use `when` to say: *when* this value is the case—that
    is, when this value is the variable we’re looking at—do this thing!”'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: “我们使用`case`关键字告诉Ruby要关注哪个变量，”Rusty解释道。“然后我们可以使用`when`来表示：*当*这个值符合条件时——也就是说，当这个值是我们正在查看的变量时——执行这个操作！”
- en: “And just like with `if` and `unless`, we use `else` to have Ruby do something
    when nothing matches,” Ruben said.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: “就像`if`和`unless`一样，我们用`else`来让Ruby在没有匹配时执行某些操作，”Ruben说。
- en: “Exactly right,” said Rusty.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: “完全正确，”Rusty说。
- en: “But is this all `case` statements can do?” Marshall piped up. “It seems to
    me it’s not that interesting to just have them check whether a variable is a certain
    number.”
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: “但这就是`case`语句能做的全部吗？”Marshall插话道。“在我看来，仅仅检查一个变量是否为某个数值似乎没那么有趣。”
- en: '“Oh my, no,” said Rusty. “They can get mighty fancy!” He typed:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: “哦，天哪，不，”Rusty说。“它们可以变得非常复杂！”他说着输入了代码：
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: “We can check whether a number is a certain value like `0` (➊) or `42` (➌),
    whether it falls in a range (➋), or even whether it’s an instance of a particular
    class, like `String` (➍),” said Rusty. “`case` statements can quickly do a lot
    of work that `if` and `else` would take a long time to handle.”
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: “我们可以检查一个数字是否为特定的值，比如`0`（➊）或`42`（➌），是否在一个范围内（➋），甚至是否是某个特定类的实例，比如`String`（➍），”Rusty说。“`case`语句能快速完成很多`if`和`else`要花很长时间处理的工作。”
- en: “That *is* quite fancy,” said the King, “but if there’s anything I’ve learned
    from Ruby, it’s that the most delightful moments are when I can get something
    done without having to write out every last detail. Are there any refactorings
    like that?”
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: “那*确实*很高级，”国王说，“但如果我从Ruby学到了一件事，那就是最令人愉快的时刻就是我能在不写出每个细节的情况下完成任务。有没有这样的重构方法？”
- en: Simplifying Methods
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简化方法
- en: “I thought you’d never ask,” said the Foreman. “This is an old one, but a good
    one. Do you know about methods and `return`?”
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: “我就知道你会问，”工头说道。“这是一个老方法，但仍然很棒。你知道方法和`return`吗？”
- en: They all nodded.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 他们都点了点头。
- en: “Perfect,” he said. “As you may or may not know, Ruby methods will automatically
    return the result of the last bit of code they evaluate. That means that if you
    want your method to return the last expression it evaluates, you can leave off
    the `return` keyword completely. Let’s define a method that simply checks if the
    argument it gets is `true`.”
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: “完美，”他说。“如你所知或所不知，Ruby方法会自动返回它们评估的最后一段代码的结果。这意味着，如果你希望方法返回它评估的最后一个表达式，你完全可以省略`return`关键字。让我们定义一个简单的方法，检查它所接收的参数是否为`true`。”
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: “Now, that’ll `return true` if `idea_we_have` is `true` and `false` if it isn’t,”
    Rusty said, “but it turns out that Ruby automatically returns the result of the
    last bit of code it runs. We don’t need `return` at all!”
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: “现在，如果`idea_we_have`是`true`，这将`return true`，如果不是，则返回`false`，”Rusty说，“但事实证明，Ruby会自动返回它运行的最后一段代码的结果。我们根本不需要`return`！”
- en: '[PRE17]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: “Ah, yes!” said the King. “I think we’ve seen this bit of Ruby wizardry before.”
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: “啊，是的！”国王说道。“我想我们以前见过这种Ruby的魔法。”
- en: '“All right,” said Rusty, “but try *this* one on for size. If you have an expression
    that will give you back a Boolean—that is, it will end up being `true` or `false`—you
    don’t have to compare it to `true` or `false` with `==`. That’s just an extra
    step! You can just return the variable that will be `true` or `false` *itself*.”
    He typed into the Computing Contraption:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: “好吧，”Rusty说，“但试试这个。若你有一个会返回布尔值的表达式——也就是说，它最终会是`true`或`false`——你不需要用`==`将它与`true`或`false`比较。那只是一个额外的步骤！你可以直接返回那个会是`true`或`false`的变量*本身*。”他说着在计算装置中输入了代码：
- en: '[PRE18]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: “`most_true_variable` is `true`, and since our method automatically returns
    whatever argument gets passed in, it returns `true`,” the Foreman explained.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: “`most_true_variable`是`true`，并且由于我们的方法会自动返回传入的任何参数，它就返回了`true`，”工头解释道。
- en: “Wonderful!” said the Queen. “I love how simple that method was. But will this
    work only for variables that are `true` or `false`?”
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: “太棒了！”皇后说。“我喜欢这个方法是如此简单。不过，这只适用于`true`或`false`的变量吗？”
- en: Rusty nodded. “Though there’s another good refactoring that will let us determine
    whether a Ruby value is *truthy* or not.”
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Rusty 点了点头，“虽然还有另一种很好的重构方式，能让我们判断 Ruby 值是否是 *真值*。”
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160063.png.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2160063.png.jpg)'
- en: “Truthy?” asked Ruben and Scarlet together.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: “真值？”Ruben 和 Scarlet 一起问。
- en: '“Truthy!” said Rusty. “When I say a Ruby value is *truthy*, what I mean is:
    this value is not `false` or `nil`. Remember how those two values work with `if`
    and `unless`?” he asked, and he typed:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: “真值！”Rusty 说，“当我说 Ruby 值是 *真值* 时，我的意思是：这个值不是 `false` 或 `nil`。记得这两个值在 `if` 和
    `unless` 中是怎么工作的吧？”他问道，然后输入了：
- en: '[PRE19]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: “Because `my_variable` is `true` and `true` is a truthy value, the `if` statement
    code runs and Ruby prints out `'Truthy!'`,” Rusty said. “Now let’s see what happens
    if we do the same thing with `false`.”
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: “因为 `my_variable` 是 `true`，而 `true` 是一个真值，所以 `if` 语句的代码执行了，Ruby 打印出了 `'Truthy!'`，”Rusty
    说，“现在让我们看看，如果我们用 `false` 做同样的事情会发生什么。”
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: “Nothing!” said the King.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: “什么都没打印！”国王说。
- en: “That’s right,” said the Foreman. “`my_variable` is `false`, so `'Truthy!'`
    doesn’t get printed out on the screen. The same thing happens with `nil`.”
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: “没错，”工头说，“`my_variable` 是 `false`，所以 `'Truthy!'` 不会在屏幕上打印出来。同样的事情也发生在 `nil`
    上。”
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '“Nothing was printed for `false` or `nil` because they’re *falsey* values;
    every other value in Ruby is truthy,” Rusty explained. “Have a look!” He typed
    some more:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: “`false` 或 `nil` 没有打印任何东西，因为它们是 *假值*；Ruby 中的其他所有值都是一个真值，”Rusty 解释道，“看看吧！”他又打了一些代码：
- en: '[PRE22]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '“You’ll see, though, that `nil` and `false` aren’t *exactly* the same, and
    `99` and `true` also aren’t *exactly* the same.” He typed again:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: “不过，你会看到，`nil` 和 `false` 并不 *完全* 相同，`99` 和 `true` 也并不 *完全* 相同。”他再次输入：
- en: '[PRE23]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '“But!” he exclaimed, raising a single finger, “we can turn a *truthy* value
    into `true` and a *falsey* value into `false` with a simple `!!`. You see, the
    first `!` makes Ruby return a Boolean, but since `!` means ‘not,’ it’s the opposite
    of what you want. The second `!` fixes this by undoing the opposite you got from
    the first one!” The King, Scarlet, Ruben, and even the Queen looked puzzled. “Here,
    I’ll show you,” the Foreman offered, and he typed into the Computing Contraption:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: “但是！”他大声说道，举起一个手指，“我们可以通过一个简单的 `!!` 把一个 *真值* 转换成 `true`，把一个 *假值* 转换成 `false`。你看，第一个
    `!` 让 Ruby 返回一个布尔值，但由于 `!` 的意思是‘非’，它与我们想要的相反。第二个 `!` 通过撤销第一个 `!` 的效果，修正了这一点！”国王、Scarlet、Ruben
    甚至女王都显得困惑。“这里，我来给你们演示，”工头提议，然后他在计算机装置上输入：
- en: '[PRE24]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: “So `truthy_value` is a string,” said Scarlet, “and since it’s not `false` or
    `nil`, if you put it in an `if` statement, the code will run.”
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: “所以 `truthy_value` 是一个字符串，”Scarlet 说，“由于它不是 `false` 或 `nil`，如果你把它放进 `if` 语句中，代码会运行。”
- en: “Right,” said Rusty.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: “没错，”Rusty 说。
- en: “So,” Scarlet said, “`!truthy_value` is `false`, and *not* `!truthy_value`—that
    is, `!!truthy_value`—is `true`!”
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: “所以，”Scarlet 说，“`!truthy_value` 是 `false`，而 *不是* `!truthy_value`——也就是说，`!!truthy_value`——是
    `true`！”
- en: “You’ve got it!” said Rusty. “Now, here’s how it works for falsey values.”
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: “你明白了！”Rusty 说，“现在，看看对于假值是怎么工作的。”
- en: '[PRE25]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: “It’s just the opposite!” said Ruben. “`nil` is falsey, so `!nil` is `true`
    and `!!nil` is `false`.”
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: “这完全相反！”Ruben 说，“`nil` 是假值，所以 `!nil` 是 `true`，而 `!!nil` 是 `false`。”
- en: “Exactly,” said the Foreman. “We could even write a method to see if something
    is truthy, like this.”
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: “完全正确，”工头说，“我们甚至可以写一个方法来检查某个东西是否为真值，像这样。”
- en: '[PRE26]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '“In this case, we’ve defined a `truthy?` method that takes a single argument,
    `thing`,” said Rusty. “Then we call `!!thing`: the first `!` returns `false` if
    `thing` is truthy and `true` if `thing` is falsey. Since this is the opposite
    of what we want, we use `!!` to make our method return `true` if `thing` is truthy
    and `false` if `thing` is falsey.”'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: “在这种情况下，我们定义了一个 `truthy?` 方法，它接受一个参数 `thing`，”Rusty 说，“然后我们调用 `!!thing`：第一个
    `!` 如果 `thing` 是真值会返回 `false`，如果 `thing` 是假值会返回 `true`。由于这与我们想要的相反，我们使用 `!!` 来让我们的函数在
    `thing` 是真值时返回 `true`，在 `thing` 是假值时返回 `false`。”
- en: “That’s amazing!” said Scarlet.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: “太棒了！”Scarlet 说。
- en: “Isn’t it?” said Rusty. “Once we’ve defined `truthy?`, we can call it on `'A
    fancy string'` to see that it’s a truthy value, then on `nil` to see that `nil`
    is falsey.”
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: “不是吗？”Rusty 说，“一旦我们定义了 `truthy?`，我们就可以对 `'A fancy string'` 调用它，看到它是一个真值，然后对
    `nil` 调用它，看到 `nil` 是假值。”
- en: “What else can we do to make our Ruby programs shorter and clearer?” Ruben asked.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: “我们还能做什么来让我们的 Ruby 程序更简洁、更清晰？”Ruben 问道。
- en: “Well, this one might seem obvious,” said Rusty, “but it’s actually one of the
    hardest parts of programming—giving variables, methods, and constants good names!”
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，这个可能看起来很明显，”Rusty 说，“但实际上它是编程中最难的部分之一——给变量、方法和常量起个好名字！”
- en: “What do you mean?” said Marshall, who was scribbling furiously on his clipboard.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: “什么意思？”Marshall说道，他正在愤怒地在写字板上乱写。
- en: '“Well, let’s use our `truthy?` method as an example,” Rusty said. “Check out
    what would’ve happened if we’d picked a clumsier name.” He quickly typed:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: “好吧，让我们以`truthy?`方法为例，”Rusty说道，“看看如果我们选了一个更笨拙的名字会发生什么。”他迅速敲入：
- en: '[PRE27]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: “That looks terrible,” said the King.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: “看起来太糟糕了，”国王说道。
- en: “Yes, it does,” said Rusty. “Not only that, but it also has an extra `return`
    that we don’t need. The simpler method is much nicer.”
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: “是的，确实可以，”Rusty说道，“不仅如此，它还包含了一个额外的`return`，而我们并不需要这个。简单的方法要好得多。”
- en: '[PRE28]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: “Aha! I see,” said the King. “We want to give the Ruby objects we create simple,
    easy-to-remember names so we type less code and make fewer mistakes when we want
    to reference our code later.”
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: “啊！我明白了，”国王说道，“我们希望给我们创建的Ruby对象取一些简单、容易记住的名字，这样我们就可以少写代码，并且在以后引用代码时减少错误。”
- en: “Bingo!” said Rusty. “Imagine if we had to type `is_this_a_truthy_thing_or_not?`
    every time we wanted to check if a value was truthy. It’d be pure madness!”
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: “太好了！”Rusty说道，“想象一下如果每次想检查一个值是否为真值，我们都得输入`is_this_a_truthy_thing_or_not?`，那简直是疯了！”
- en: “How else can we cut down on rewriting code?” asked Marshall.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: “我们还能怎样减少重复写代码的情况？”Marshall问道。
- en: De-duplicating Code
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 去重代码
- en: '“Well, one nice way is to remove duplicated code whenever we can!” said Rusty.
    “It’s much too easy to cut and paste code all through our programs, which then
    makes it very hard to change those programs if variable names or values change.
    Take a look at this,” he said, typing:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: “好吧，有一种很好的方法就是在我们能做到的时候移除重复代码！”Rusty说道，“在我们的程序中复制粘贴代码太容易了，这样一来如果变量名或值发生变化，修改程序就变得非常困难。看看这个，”他说着，敲入：
- en: '[PRE29]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '“I’ve defined two methods here,” said Rusty. “The first one, `king?`, checks
    whether the argument passed in is `''The King''`; if so, it `puts ''Royal!''`,
    and otherwise it puts `''Not royal.''`. I’ve also defined a second method, `queen?`,
    that checks whether the argument passed in is `''The Queen''`. See how much of
    that code is repeated?” Rusty continued. “It was very boring to type, and what’s
    more, if we want to change any of the messages that get printed out, we have to
    do it in two places! I’d much rather type this,” he said, and so he did:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: “我在这里定义了两个方法，”Rusty说道，“第一个，`king?`，检查传入的参数是否是`'The King'`；如果是，它`puts 'Royal!'`，否则输出`'Not
    royal.'`。我还定义了第二个方法，`queen?`，它检查传入的参数是否是`'The Queen'`。你看，这部分代码重复了多少？”Rusty继续说道，“打这些代码非常无聊，而且更糟的是，如果我们想要改变任何打印出来的消息，我们得在两个地方做修改！我宁愿这么写，”他说着，然后他确实这么做了：
- en: '[PRE30]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: “Now we’ve got one method that does the work of two,” Rusty said.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: “现在我们有了一个方法，它做了两个方法的工作，”Rusty说道。
- en: '[PRE31]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: “I like that a lot better,” said Ruben. “And we could have written that with
    the ternary operator if we wanted, right?”
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: “我喜欢这个方法多了，”Ruben说道，“如果我们想的话，我们也可以使用三元运算符来写对吧？”
- en: “Of course!” said Rusty. “We can get to that in a little while, if you like.”
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: “当然！”Rusty说道，“如果你愿意的话，我们过一会儿可以谈这个问题。”
- en: “Before we do,” interrupted the King, “I worry that if we go *too* far down
    this road of combining methods, we might get methods that do *too much* work and
    are very hard to think about.”
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: “在我们继续之前，”国王打断道，“我担心如果我们走得*太*远，将方法结合得太多，可能会导致方法做*太多*工作，而且很难理解。”
- en: '“Happens all the time!” said the Foreman. “While it’s true that you often want
    to write the least amount of code you can, sometimes you end up writing very large,
    hard-to-think-about methods that really should be broken up into smaller pieces.
    Take a look at this method that came through the Refactory just the other day,”
    he said, and he typed into the Computing Contraption:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: “这种情况经常发生！”工头说道，“虽然通常你会希望写尽可能少的代码，但有时你最终写出的是非常庞大、难以思考的方法，这些方法其实应该被拆分成更小的部分。看看前几天通过重构器来的这个方法，”他说着，敲入了计算设备：
- en: '[PRE32]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: “First, it sets up a few variables,” Rusty said. “The `evens` array stores even
    numbers, the `odds` array stores odd numbers, and the `list_of_numbers` stores
    the numbers to check for evenness or oddness.”
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: “首先，它设置了一些变量，”Rusty说道，“`evens`数组存储偶数，`odds`数组存储奇数，`list_of_numbers`存储要检查是否为偶数或奇数的数字。”
- en: “Next, the `tally_odds_and_evens` method iterates over a list of numbers and
    checks to see whether each one is even or odd with Ruby’s built-in `even?` and
    `odd?` methods. For each number, `tally_odds_and_evens` prints out whether it’s
    even or odd, then adds it to the appropriate array.”
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: “接下来，`tally_odds_and_evens`方法遍历一个数字列表，并通过Ruby内建的`even?`和`odd?`方法检查每个数字是偶数还是奇数。对于每个数字，`tally_odds_and_evens`打印出它是偶数还是奇数，然后将它添加到相应的数组中。”
- en: '[PRE33]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: “As you can see,” Rusty said, “it’s pretty complicated.”
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: “正如你所见，”Rusty说，“它其实挺复杂的。”
- en: “I’ll say!” said the King. “I can hardly follow a word of it.”
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: “我倒是能理解！”国王说。“我几乎一句话都听不懂。”
- en: '“It might be easier if we broke down this big method, `tally_odds_and_evens`,
    into a few smaller, well-named ones,” said Rusty, and he typed:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: “如果我们把这个大方法` tally_odds_and_evens`拆成几个小的、命名清晰的方法，可能会更容易理解，”Rusty说道，他接着打字：
- en: '[PRE34]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: “First, we’ll rewrite the `tally_odds_and_evens` method. We’ll move the code
    that prints `Odd!` or `Even!` to its own method, `alert_odd_or_even`, and we’ll
    move the code that updates the tally to its own method, `update_tally`. We’ll
    write each method in just a minute,” Rusty said.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: “首先，我们将重写` tally_odds_and_evens`方法。我们会把打印`Odd!`或`Even!`的代码移到一个单独的方法`alert_odd_or_even`中，而更新计数的代码则移到另一个方法`update_tally`。我们将在一分钟内写完每个方法，”Rusty说。
- en: “That makes sense,” said the King.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: “有道理，”国王说。
- en: “Next, we’ll take out the part that writes `Odd!` or `Even!` on the screen and
    wrap it up in a method called `alert_odd_or_even`. In fact, we can use the ternary
    operator we learned about to make it a one-line method!”
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: “接下来，我们将去掉写`Odd!`或`Even!`到屏幕上的部分，把它封装成一个名为`alert_odd_or_even`的方法。事实上，我们可以使用我们学到的三元运算符把它做成一行代码！”
- en: '[PRE35]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: “After that,” Rusty continued, “we’ll put the code that updates the `evens`
    and `odds` arrays into its own method, `update_tally`.”
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: “然后，”Rusty继续说道，“我们会把更新`evens`和`odds`数组的代码提取到一个单独的方法`update_tally`中。”
- en: '[PRE36]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: “That’s the same code we had before, just wrapped up in its own method. It makes
    the overall `tally_odds_and_evens` method look much better, though, and it still
    works the same way,” Rusty explained.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: “这就是我们之前的代码，只是被封装成了一个独立的方法。虽然它的整体结构更清晰了，但它依然和之前一样有效，”Rusty解释道。
- en: '[PRE37]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: “Overall, it’s a bit more code,” Rusty admitted, “but now it’s clearer what’s
    doing what, and we can change what gets printed out or how we update our lists
    of even and odd numbers independently from one another if we want to.”
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: “总体来说，代码稍微多了一些，”Rusty承认，“但现在它更清晰了，我们可以独立更改打印内容或更新偶数和奇数列表的方法。”
- en: '“Excellent!” said the King, beaming. “I like my Ruby methods to be just like
    me: short and simple!” The Queen, Ruben, and Scarlet stifled a laugh.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: “太棒了！”国王笑着说。“我喜欢我的Ruby方法就像我一样：简短且简单！”女王、Ruben和Scarlet忍住了笑。
- en: Rusty pushed his hard hat up on his head. “That’s all the refactoring I can
    think of off the top of my head,” he said. He looked at his watch again. “I’m
    surprised we haven’t heard back from any of the search teams yet. What were you
    telling me these ne’er-do-wells were after?” He thought for a moment, then snapped
    his fingers. “Ah, yes! Your Key-a-ma-Jigger. That’s why you’re here in the first
    place, I take it?”
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Rusty把安全帽推到头上。“这是我能想到的所有重构，”他说。他再次看了看手表。“奇怪，我们怎么还没收到搜索团队的回音呢。你之前告诉我这些坏蛋是在找什么来着？”他想了想，突然弹了下手指。“啊，没错！是你们的Key-a-ma-Jigger。你们就是为了这个才来的吗？”
- en: “Yes!” said Scarlet. “We found this plugged into the Panda Provisionator 3000
    over at the Royal Stables, and we thought that it might be the last one our mysterious
    bad guys had, so they might have come back here for more.” She held the small
    piece of metal out to the Foreman once more.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: “是的！”Scarlet说。“我们在皇家马厩的Panda Provisionator 3000上发现了这个，我们猜测这是神秘坏人最后一个拥有的，所以他们可能会回到这里找更多的。”她再次把那块小金属片递给了Foreman。
- en: Rusty nodded. “Yes, that’s one of ours,” he said. “And if your troublemakers
    are looking for more, they’d almost certainly be trying to get into the Vault
    of Tricky Things and Trinkets!”
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Rusty点了点头。“是的，那是我们的一件，”他说。“如果你们的麻烦制造者正在寻找更多，他们很可能会试图进入Tricky Things and Trinkets的保险库！”
- en: “My word!” said the Queen. “What’s that?”
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: “天啊！”女王说道。“那是什么？”
- en: “It’s where we keep a large number of items,” said Rusty, “like Ruby code we’ve
    found particularly hard to refactor and various things and trinkets. It’s also
    where we keep a lot of our inventory, including our Key-a-ma-Jiggers.”
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: “这是我们放置大量物品的地方，”Rusty说，“比如我们发现特别难重构的Ruby代码，还有一些东西和小玩意儿。这里也是我们存放大量库存的地方，包括我们的Key-a-ma-Jiggers。”
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160065.png.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160065.png.jpg)'
- en: The King struck his palm with his fist. “If that’s where the Key-a-ma-Jiggers
    are, I’m sure that’s where we’ll find our culprits!” he said. “Could you call
    down and have your teams head there right away?”
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 国王用拳头击打掌心。“如果Key-a-ma-Jiggers就在那个地方，我敢肯定就是那里我们能找到罪魁祸首！”他说。“你能打个电话让你们的团队立刻前往那里吗？”
- en: No sooner had the King asked than the Foreman’s red telephone began ringing
    off the hook.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 就在国王问完问题的瞬间，工头的红色电话开始不断响起。
- en: Rusty ran to the phone and picked it up. “Hello?” he said. He listened intently
    for a moment, then gasped. He covered the receiver with his hand. “One of my teams
    caught four intruders down by the Vault!” he said. He put the phone to his ear
    again, then sighed deeply. “All right,” he said. “Send every available worker.
    And hurry!” He hung up.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Rusty冲向电话并拿起它。“你好？”他说。他专心地听了一会儿，然后倒抽一口气。他用手捂住话筒。“我的一个小组在金库附近抓到了四个入侵者！”他说。他再次将电话放到耳边，然后深深叹了口气。“好吧，”他说，“派出所有可用的工人，快点！”他说完后挂断了电话。
- en: “What was it?” asked the Queen. “Did your team catch them?”
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: “是什么情况？”女王问。“你们的小组抓到他们了吗？”
- en: “No,” groaned the Foreman, “they’ve escaped!” The Queen’s face fell; the King
    covered his face with his hands; Scarlet and Ruben turned to each other, mouths
    open.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: “没有，”工头呻吟道，“他们逃掉了！”女王的脸色变了，国王用手捂住了脸，Scarlet和Ruben互相看了一眼，张大了嘴巴。
- en: “But!” Rusty said, holding up a single finger, “every one of my workers is in
    hot pursuit. Our four villains were seen heading straight for the Refactory’s
    loading docks, and that’s a one-way street! We’ll have them surrounded faster
    than you can rename a Ruby method.”
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: “但是！”Rusty说，一只手举起一个手指，“我的每一位工人都在紧追不舍。我们的四个坏蛋被看到正朝着炼油厂的装货码头走去，那是一条单行道！我们会比你改名一个Ruby方法还要快就把他们包围起来。”
- en: “Then what are we waiting for?” said the Queen. “Let’s go see who we’ve been
    chasing all this time!” And with that, all five of them charged off to the loading
    docks in the depths of the Refactory.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: “那我们还在等什么？”女王说。“让我们去看看这段时间我们一直在追的到底是谁！”说完，她带着其他四人一起冲向了炼油厂深处的装货码头。
- en: Re-refactoring
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新重构
- en: 'Practice makes perfect! Now that you’ve learned a whole bunch of ways to make
    your Ruby code even shorter and simpler to read, it’s time to apply them to a
    couple of particularly gnarly methods. Not to worry, though: if you didn’t have
    any trouble with the refactorings we saw earlier, these’ll be a breeze! (Even
    if you stumbled here and there, you’ll be a refactoring master by the time you’re
    through with these examples.)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 练习使完美！现在你已经学会了很多方法，可以让你的Ruby代码更短，更易读，是时候把它们应用到几个特别棘手的方法上了。别担心，尽管你可能会有些小困难，但如果你以前的重构没有问题，接下来的这些也会轻松应对！（即使你在过程中遇到一点小挫折，到你完成这些示例时，你会成为一个重构大师。）
- en: 'Let’s begin by making a new file called first_try.rb and typing the following
    code. We’ll actually be making *two* files this time: one for the initial code
    and one for the refactoring we’ll do. *first_try.rb* defines a method, `all_about_my_number`,
    and sets the number to `42` if no number is passed in. After that, it prints some
    information about the number, including what the number is and whether it’s positive,
    negative, or zero.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧，首先创建一个名为first_try.rb的新文件，并输入以下代码。这次我们将实际创建*两个*文件：一个是初始代码，另一个是我们要做的重构。*first_try.rb*定义了一个方法`all_about_my_number`，如果没有传入数字，它会将数字设置为`42`。然后，它会打印出一些关于这个数字的信息，包括数字是多少，它是正数、负数还是零。
- en: first_try.rb
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: first_try.rb
- en: '[PRE38]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: If this doesn’t look like great code to you, don’t worry! We’re about to refactor
    it. In the same folder on your computer, create another file called refactored.rb
    and type the following code into it. This code will do exactly the same thing
    as the code in *first_try.rb*, but it will look much nicer.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得这段代码不够好，别担心！我们马上就要重构它了。在你电脑的同一文件夹中，创建另一个名为refactored.rb的文件，并在其中输入以下代码。这段代码的功能与*first_try.rb*中的代码完全相同，但它看起来会更简洁。
- en: refactored.rb
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: refactored.rb
- en: '[PRE39]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: As always, you can run the code in your file by typing **`ruby first_try.rb`**
    and **`ruby refactored.rb`** from the command line. Since we made two files in
    the previous chapter and there’s no new code here, there shouldn’t be any big
    surprises! (Though there may be some small ones.)
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，你可以通过在命令行输入**`ruby first_try.rb`** 和 **`ruby refactored.rb`** 来运行文件中的代码。由于我们在上一章中创建了两个文件，并且这里没有新代码，所以应该不会有太多意外！（虽然可能会有一些小的惊喜。）
- en: 'The first difference you’ll probably notice is in the `case` statement; earlier,
    we did something like this:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能首先注意到的区别是在`case`语句中；之前我们做了类似这样的事情：
- en: '[PRE40]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'And now we’re doing this:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要做的是：
- en: '[PRE41]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: These are both 100 percent correct Ruby. If you have a variable and you just
    want to check whether it equals a certain value, is a certain class, or is in
    a certain range, you’d use the first syntax; if you want to do specific checks
    on a value (like `number > 0`), you’d use the second one.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种都是100%正确的Ruby代码。如果你有一个变量，想要检查它是否等于某个值、是否是某个类的实例，或者是否在某个范围内，你就可以使用第一种语法；如果你想对一个值进行特定检查（比如`number
    > 0`），则可以使用第二种语法。
- en: You probably also saw that we skipped right over some refactorings. For instance,
    we removed the `==` check from lines like `if number > 0 == true`. Sometimes you’ll
    start to refactor one way, then realize there’s an even better way to do it! Other
    times there are a whole bunch of ways to refactor your code that are all equally
    good, and you just happen to pick one over another.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还注意到我们跳过了一些重构。例如，我们从像`if number > 0 == true`这样的行中移除了`==`检查。有时候，你会开始用一种方式进行重构，然后意识到有一种更好的方法！其他时候，可能有很多种同样好的方式来重构你的代码，而你恰好选择了其中一种。
- en: Finally, we managed to pull out a bunch of repetition (including some `return`
    statements that we can let Ruby handle implicitly!) and broke out the code that
    checks the sign of a number (positive, negative, or zero) into its own method.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们成功地去除了大量重复代码（包括一些`return`语句，我们可以让Ruby隐式处理！），并将检查数字符号（正、负或零）的代码提取到一个独立的方法中。
- en: 'How could we make this refactoring even more awesome? There are probably an
    unlimited number of ways, but here are a few to get your gears turning. For example,
    we refactored the `nil?` check into an `||=`. This works okay, but is there something
    else we could do? (Hint: We learned about setting default arguments in [Chapter 7](../Text/ch07.html
    "Chapter 7. The Magic of Methods and Blocks").) Also, we have an `if`/`else` statement
    that we converted to a `case`, but would it have made sense to use a ternary operator
    somewhere instead? Why or why not? Explain your answer in 6,000 words or more.
    (Hint: Don’t do that—it would be unbelievably boring.)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何让这个重构更加酷炫呢？可能有无数种方法，但这里有一些例子让你开始思考。例如，我们将`nil?`检查重构为`||=`。这样做还可以，但我们还能做些什么吗？（提示：我们在[第7章](../Text/ch07.html
    "第7章：方法和块的魔力")中学到了设置默认参数。）另外，我们有一个`if`/`else`语句，我们将它转换成了`case`语句，但如果我们在某个地方使用三元操作符会更合适吗？为什么或者为什么不？请用6000个字以上解释你的答案。（提示：不要这么做——那会超级无聊。）
- en: 'One more example to bake your noodle: we don’t do any checking to make sure
    that the argument that gets passed to our method really *is* a number. What happens
    if we put in a Boolean? A string? What could we do to refactor our method so it
    would be okay with non-number inputs?'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 再举一个例子来挑战你的思维：我们并没有进行任何检查来确保传递给我们方法的参数确实是一个数字。如果我们传入一个布尔值呢？一个字符串呢？我们该如何重构方法，使它能够处理非数字输入呢？
- en: You Know This!
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你知道这个！
- en: 'Okay! It might have seemed at first that this chapter wouldn’t have a whole
    lot to offer—after all, we’re just rewriting the sort of code that we’ve been
    writing all along—but it turns out that *re*writing our Ruby code can be even
    more challenging than writing it the first time. Just to make sure you’re up to
    those challenges (hint: you absolutely are), let’s go over the refactorings we
    covered one more time.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！一开始你可能觉得这一章内容不多——毕竟我们只是重新编写了我们一直在编写的代码——但事实证明，*重*写我们的Ruby代码甚至比第一次编写更具挑战性。为了确保你能应对这些挑战（提示：你绝对能），让我们再回顾一下我们所做的重构。
- en: 'First, you saw that we can set a value *conditionally* with `||=`. In other
    words, we can tell Ruby to set a value for a variable if that variable doesn’t
    already have one, but to use the existing value if it does:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你看到我们可以用`||=`*有条件地*设置一个值。换句话说，我们可以告诉Ruby，如果变量没有已有值，就为它设置一个值；如果有值，就使用现有值：
- en: '[PRE42]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Here, `my_variable` isn’t already set, so `||=` sets it to `'pink smoke'`. If
    the variable already has a value, though, `||=` won’t change it. Check it out!
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`my_variable`还没有被设置，因此`||=`将它设置为`'pink smoke'`。不过，如果变量已经有值，`||=`不会改变它。看看吧！
- en: '[PRE43]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'You also saw that we can replace `if !` with `unless`:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 你还看到我们可以用`unless`替换`if !`：
- en: '[PRE44]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'And you saw that we can even put an `if` or `unless` *inline* if we don’t need
    an `else`:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 你还看到我们甚至可以将`if`或`unless`*内联*使用，如果不需要`else`的话：
- en: '[PRE45]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: If an `else` is involved, it’s usually better to stick to a regular `if`/`else`.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如果涉及到`else`，通常最好坚持使用常规的`if`/`else`语句。
- en: '[PRE46]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'However, for very short `if`/`elses`, sometimes it makes sense to use the *ternary
    operator*, like so:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于非常简短的`if`/`else`语句，有时候使用*三元操作符*会更合适，像这样：
- en: '[PRE47]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'You learned that we can even use the ternary operator with methods that have
    question marks in them! Just be sure to use two question marks: one that’s part
    of the method name and one that’s part of the ternary statement:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 你学到了我们甚至可以在带有问号的方法上使用三元运算符！只需要确保使用两个问号：一个是方法名的一部分，另一个是三元运算符的一部分：
- en: '[PRE48]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We also talked about replacing long chains of `if`/`elsif`/`else` with `case`
    statements. A `case` statement takes a variable and does different things depending
    on its value:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了用`case`语句替换长链的`if`/`elsif`/`else`语句。`case`语句接收一个变量，根据其值执行不同的操作：
- en: '[PRE49]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Next up, we reminisced about Ruby’s *implicit return*. Ruby methods automatically
    return the result of the last bit of code they evaluate, so these two methods
    do exactly the same thing:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们回忆了Ruby的*隐式返回*。Ruby方法会自动返回它们执行的最后一段代码的结果，所以这两个方法的效果完全相同：
- en: '[PRE50]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Next, you found out that when we’re using variables that are Booleans (`true`
    or `false`), we can just return those variables directly instead of comparing
    them to `true` or `false` with `==`. This works:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你发现当我们使用布尔变量（`true`或`false`）时，我们可以直接返回这些变量，而不是用`==`与`true`或`false`进行比较。这样做是有效的：
- en: '[PRE51]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'But this does the exact same thing and uses a little less code:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 但这样做完全相同，而且代码量稍微少一些：
- en: '[PRE52]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'In fact, we can get the *truthiness* of any Ruby value by using two “not” symbols
    (`!`) in front of the object. A *truthy* Ruby value will act like `true` in an
    `if` statement, and a *falsey* one will act like `false`. All Ruby values are
    truthy except for `false` and `nil`. Truthy values run the code in the `if` statement:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们可以通过在对象前面使用两个“非”符号（`!`）来获取任何Ruby值的*真实性*。一个*真值*的Ruby值在`if`语句中表现得像`true`，而*假值*则表现得像`false`。除了`false`和`nil`外，所有Ruby值都是“真值”。“真值”会执行`if`语句中的代码：
- en: '[PRE53]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'And falsey ones don’t:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 而假值则不会：
- en: '[PRE54]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Nothing happens! Nothing happens with `nil`, either:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 什么都没有发生！`nil`也没有发生任何事情：
- en: '[PRE55]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Since all values except `false` and `nil` are truthy, a regular string will
    be truthy in an `if` statement:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 由于除了`false`和`nil`外，所有值都是“真值”，所以在`if`语句中，常规字符串会是“真值”：
- en: '[PRE56]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'You can always check the truthiness of a value in Ruby with `!!`:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过`!!`在Ruby中检查一个值的真实性：
- en: '[PRE57]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'I also mentioned something you probably already knew in the back of your mind:
    giving good names to our constants, variables, and methods is important! See how
    much better the second method name is than the first?'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我也提到了一些你可能已经在心底知道的事情：为我们的常量、变量和方法起个好名字非常重要！看看第二个方法名比第一个方法名要好多少？
- en: '[PRE58]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Last but not least, you saw that removing duplicated code and breaking our programs
    apart into small methods that do very specific jobs can make our Ruby code easier
    to write, understand, and change. The more code you read, the more you’ll see
    this is true, so don’t hesitate to ask your local adult to help you find snippets
    of Ruby code on the Internet to read through!
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，你看到删除重复代码并将程序拆分成执行非常具体任务的小方法，可以让我们的Ruby代码更容易编写、理解和修改。你读的代码越多，就会越发现这是真的，所以不要犹豫，去请教你身边的成年人帮你在网上找一些Ruby代码片段来阅读！
- en: Speaking of bits of code, we’re about to see a fresh delivery of Ruby syntax
    when we follow the King, the Queen, Scarlet, Ruben, and Rusty down to the loading
    docks. The constant picking up and dropping off that occurs down there will be
    a perfect opportunity to explore Ruby *input* and *output*—also called *I/O*—and
    we just might catch our first glimpse of the evil doers who have been turning
    this peaceful kingdom completely upside down.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 说到代码，我们即将看到Ruby语法的新篇章，当我们跟随国王、王后、斯卡利特、鲁本和拉斯蒂一起走到货运码头时。那里的不断拾取和放下将是一个完美的机会，来探索Ruby的*输入*和*输出*——也就是*I/O*——而我们很可能会第一次看到那些正在颠覆这个和平王国的恶棍们。
