- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">8</samp> <samp class="SANS_Dogma_OT_Bold_B_11">TIPS
    AND TRICKS</samp>
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">8</samp> <samp class="SANS_Dogma_OT_Bold_B_11">技巧与窍门</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: There is still so much more to discover within the rich Dash library. In this
    chapter, we’ve put together a few pointers to help you take the next step in your
    Dash journey. These are tips that we have found helpful as we learned Dash and
    started building more advanced applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在丰富的 Dash 库中仍然有很多内容等待发现。在本章中，我们整理了一些提示，帮助你在 Dash 学习之旅中迈出下一步。这些是我们在学习 Dash 和开始构建更高级应用程序时发现的有用提示。
- en: We’ll take a deeper look at the Dash Enterprise App Gallery, where you can discover
    open source code used to build more advanced apps within specific industries.
    You’ll also learn to leverage the Plotly community to help you overcome coding
    bumps along the road. We’ll share some Bootstrap themes and debugging tools that
    will help you embellish your apps and solve bugs. We’ll talk you through navigating
    the dash-labs repository, where cutting-edge Dash features are constantly developed.
    Lastly, this chapter will offer you a set of Dash learning resources to enhance
    your knowledge and make programming with Dash even more fun and exciting.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将深入了解 Dash 企业应用画廊，在这里你可以发现用于构建特定行业内更高级应用的开源代码。你还将学会利用 Plotly 社区帮助你克服开发过程中的编码难题。我们将分享一些
    Bootstrap 主题和调试工具，帮助你美化应用并解决 bug。我们还将带你浏览 dash-labs 仓库，这是一个不断开发前沿 Dash 特性的地方。最后，本章将为你提供一套
    Dash 学习资源，提升你的知识水平，让用 Dash 编程变得更加有趣和令人兴奋。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Dash Enterprise App Gallery</samp>
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">Dash 企业应用画廊</samp>
- en: 'As we’ve mentioned throughout the book, one helpful way to learn about more
    advanced and complex Dash apps is by exploring the Dash Enterprise App Gallery
    ([*https://<wbr>dash<wbr>.gallery<wbr>/Portal*](https://dash.gallery/Portal)).
    Many of these apps are open source, meaning the code is fully available to you
    on GitHub. To find out whether a particular app is open source, click the information
    icon located in the lower-right corner of the app card (pointed to in [Figure
    8-1](chapter8.xhtml#fig8-1)); a modal should open, and if it says something along
    the lines of “Unauthenticated: Anyone can access this app,” it will be open source.
    This information card should also tell you which programming language the app
    uses; a great majority of them are written in Python, as you might expect.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本书中多次提到的，了解更多高级和复杂 Dash 应用的一种有帮助的方式是探索 Dash 企业应用画廊（[*https://<wbr>dash<wbr>.gallery<wbr>/Portal*](https://dash.gallery/Portal)）。这些应用中的许多都是开源的，这意味着你可以在
    GitHub 上完全访问其代码。要查找某个特定应用是否为开源应用，请点击应用卡片右下角的信息图标（在[图 8-1](chapter8.xhtml#fig8-1)中指出）；一个弹窗将会打开，如果它写着类似“未经认证：任何人都可以访问此应用”的信息，那么它就是开源的。此信息卡片还会告诉你该应用使用的编程语言；正如你可能预料的，大多数应用都是用
    Python 编写的。
- en: '![](../images/Figure8-1.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure8-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-1: The information
    icon on an app card in the Dash Gallery</samp>'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-1：Dash 画廊中应用卡片上的信息图标</samp>
- en: 'The gallery is being added to all the time. To find the apps that are most
    relevant to your needs, filter the page by clicking a specific industry at the
    very top of the page. One tip: as you scroll through the apps, think of the layout
    you want for your own current app project. If you find a particular layout interesting,
    access the open source code to see if you can replicate that layout in your app.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 画廊内容正在不断增加。为了找到最符合你需求的应用，你可以通过点击页面顶部的特定行业来筛选页面。有一个小提示：在浏览应用时，想一想你自己当前应用项目的布局需求。如果你对某个特定布局感兴趣，可以访问该应用的开源代码，看看是否可以在你的应用中复制这个布局。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Enhancing Your Learning with the Plotly
    Forum</samp>
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">通过 Plotly 论坛增强你的学习</samp>
- en: The Plotly forum ([*https://<wbr>community<wbr>.plotly<wbr>.com*](https://community.plotly.com))
    is a community forum for both Plotly and Dash. If you don’t already have an account
    on the Plotly forum, you should open one now. Countless times through your Dash
    development journey, the members of the forum community will help you learn more
    about Dash and the Plotly graphing library, overcome hurdles, and resolve specific
    bugs. Even if you don’t currently have a problem with your code, we recommend
    that you take the time to go onto the forum and read a few threads on a topic
    you’d like to explore. There is so much to learn just by reading about the experiences
    of other users; most importantly, browsing the forum will help you understand
    how to create a topic, provide useful answers, and ask questions in a way that
    will give you actionable answers. You’ll soon see how the forum contributes to
    the growth of the community. [Figure 8-2](chapter8.xhtml#fig8-2) shows the landing
    page of the forum; of course, it will look different every time you visit, so
    it won’t look exactly like this.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly 论坛 ([*https://<wbr>community<wbr>.plotly<wbr>.com*](https://community.plotly.com))
    是一个为 Plotly 和 Dash 提供支持的社区论坛。如果你还没有在 Plotly 论坛上注册账户，现在就应该开设一个。在你使用 Dash 开发的过程中，论坛社区的成员会帮助你更好地了解
    Dash 和 Plotly 图表库，克服障碍，解决特定的 bug。即使你现在的代码没有问题，我们也建议你花时间进入论坛，阅读一些你感兴趣的主题的帖子。通过阅读其他用户的经验，你会学到很多；最重要的是，浏览论坛还会帮助你理解如何创建主题、提供有用的答案，以及以一种能得到有效回答的方式提问。你很快就会发现论坛如何推动社区的成长。[图
    8-2](chapter8.xhtml#fig8-2)展示了论坛的登录页面；当然，每次你访问时，它会有所不同，因此看起来不会完全像这样。
- en: '![](../images/Figure8-2.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure8-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-2: The Plotly forum
    landing page</samp>'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-2：Plotly 论坛登录页面</samp>
- en: On the left of the page you will find the main categories, *Dash* and *Plotly*.
    On the right you’ll find the most recent posts for both categories, regardless
    of the topic.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 页面左侧是主要类别，*Dash* 和 *Plotly*。右侧则是这两个类别中最新的帖子，无论主题是什么。
- en: The community on the forum tends to be very active and helpful. To ensure that
    your own questions are likely to be seen and answered, always use a post title
    appropriate for your question and clearly state the problem you’re facing; also,
    make sure you add the code related to your question. This code is often referred
    to as a *minimal working example*, and it allows potential responders to copy
    your code and test it on their system to see if they can produce the same problem
    or error. Make certain that the code is formatted correctly, using the preformatted
    text symbol <samp class="SANS_TheSansMonoCd_W5Regular_11"></></samp> inside the
    editing toolbox.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 论坛社区通常非常活跃并且乐于助人。为了确保你的问题能够被看到并得到回答，请始终使用适合你问题的帖子标题，并明确说明你遇到的问题；同时，确保你添加了与问题相关的代码。这个代码通常被称为
    *最小工作示例*，它可以让潜在的回答者复制你的代码并在他们的系统上测试，看看是否能够复现相同的问题或错误。确保代码格式正确，并在编辑工具栏中使用预格式化文本符号<samp
    class="SANS_TheSansMonoCd_W5Regular_11"></></samp>。
- en: As you gain more experience in Dash, take the time to give back to the community
    and help others by answering their questions as well. Finally, we encourage you
    to share apps you create with the community by using *show-and-tell* to tag your
    posts.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你在 Dash 中积累更多经验，记得回馈社区，帮助他人回答问题。最后，我们鼓励你通过使用 *展示与分享* 标签，向社区分享你创建的应用。
- en: <samp class="SANS_Futura_Std_Bold_B_11">App Theme Explorer</samp>
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">应用主题浏览器</samp>
- en: 'In [Chapter 5](chapter5.xhtml), you learned how to add Bootstrap themes to
    your app, like so:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 5 章](chapter5.xhtml)中，你学习了如何将 Bootstrap 主题添加到你的应用中，示例如下：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])</samp>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])</samp>
- en: These themes will apply only to Bootstrap components in your app. To fully implement
    a theme into your app, you will need to apply the theme to the Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">DataTable</samp>,
    Dash Core Components, and Plotly figures as well. The *Dash Bootstrap Theme Explorer*
    at [*https://<wbr>hellodash<wbr>.pythonanywhere<wbr>.com*](https://hellodash.pythonanywhere.com),
    shown in [Figure 8-3](chapter8.xhtml#fig8-3), allows you to choose a theme and
    see how it looks on all the components, text, and figures on the page. To view
    the available themes, click **Change Theme** on the left side of the page. A panel
    should slide out with a list of themes. Click one, and take a look at how the
    dropdown and checklist components, title, text, graph, and <samp class="SANS_TheSansMonoCd_W5Regular_11">DataTable</samp>
    all change in style and color.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些主题只会应用于你应用中的 Bootstrap 组件。要将一个主题完全应用到你的应用中，你还需要将该主题应用于 Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">DataTable</samp>、Dash
    核心组件和 Plotly 图表。可以通过 [*https://<wbr>hellodash<wbr>.pythonanywhere<wbr>.com*](https://hellodash.pythonanywhere.com)
    上的 *Dash Bootstrap 主题浏览器*（如 [图 8-3](chapter8.xhtml#fig8-3) 所示），选择一个主题，并查看它在页面上所有组件、文本和图表的效果。要查看可用的主题，点击页面左侧的
    **更改主题**。一个面板会滑出并显示主题列表。点击一个主题，看看下拉菜单、复选框组件、标题、文本、图表和 <samp class="SANS_TheSansMonoCd_W5Regular_11">DataTable</samp>
    在样式和颜色上的变化。
- en: '![](../images/Figure8-3.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure8-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-3: The Dash Bootstrap
    Theme Explorer landing page</samp>'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-3: Dash Bootstrap 主题浏览器的登录页面</samp>'
- en: Choose a theme that suits your app and follow these four steps to add it to
    all the elements of the app. We’ll implement the <samp class="SANS_TheSansMonoCd_W5Regular_11">VAPOR</samp>
    theme within a sample app as our example; find the full *app.py* file in the *[Chapter-8](chapter8.xhtml)*
    folder of the book’s resources at [*https://<wbr>github<wbr>.com<wbr>/DashBookProject<wbr>/Plotly<wbr>-Dash*](https://github.com/DashBookProject/Plotly-Dash).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个适合你应用的主题，并按照以下四个步骤将其添加到应用的所有元素中。我们将在一个示例应用中实现 <samp class="SANS_TheSansMonoCd_W5Regular_11">VAPOR</samp>
    主题；你可以在书籍资源的 *[第 8 章](chapter8.xhtml)* 文件夹中找到完整的 *app.py* 文件，网址为 [*https://<wbr>github<wbr>.com<wbr>/DashBookProject<wbr>/Plotly<wbr>-Dash*](https://github.com/DashBookProject/Plotly-Dash)。
- en: '1.  Install the *dash_bootstrap_templates* library and then import both *load_figure_template*
    and *dash_bootstrap_components*. To do this, open your PyCharm terminal and enter:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 1.  安装 *dash_bootstrap_templates* 库，并导入 *load_figure_template* 和 *dash_bootstrap_components*。为此，打开
    PyCharm 终端并输入：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install dash-bootstrap-templates</samp>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install dash-bootstrap-templates</samp>
- en: 'To import the necessary libraries, type the following in your main app file:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要导入必要的库，请在主应用文件中输入以下内容：
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">import dash_bootstrap_components
    as dbc</samp>
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">import dash_bootstrap_components
    as dbc</samp>
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">from dash_bootstrap_templates import
    load_figure_template</samp>
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">from dash_bootstrap_templates import
    load_figure_template</samp>
- en: '2.  Add the prebuilt Dash Bootstrap stylesheet to your app and select a theme.
    Here we chose <samp class="SANS_TheSansMonoCd_W5Regular_11">VAPOR</samp>. Make
    sure you maintain the uppercase style when replacing the theme where Dash is instantiated:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 2.  将预构建的 Dash Bootstrap 样式表添加到应用中，并选择一个主题。这里我们选择了 <samp class="SANS_TheSansMonoCd_W5Regular_11">VAPOR</samp>。确保在替换
    Dash 实例化时保持大写样式：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc_css = "</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">https://cdn.jsdelivr.net/gh/AnnMarieW/dash-bootstrap-templates
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc_css = "</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">https://cdn.jsdelivr.net/gh/AnnMarieW/dash-bootstrap-templates
- en: '@V1.0.4/dbc.min.css"</samp>'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '@V1.0.4/dbc.min.css"</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__, external_stylesheets=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">[dbc.themes.VAPOR, dbc_css])</samp>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__, external_stylesheets=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">[dbc.themes.VAPOR, dbc_css])</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">load_figure_template(["vapor"])</samp>
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">load_figure_template(["vapor"])</samp>
- en: '3.  Incorporate the selected theme into the <samp class="SANS_TheSansMonoCd_W5Regular_11">template</samp>
    prop of the bar graph:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 3.  将选定的主题合并到条形图的 <samp class="SANS_TheSansMonoCd_W5Regular_11">template</samp>
    属性中：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig = px.bar(df, x="Fruit", y="Amount",
    color="City", barmode="group",
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig = px.bar(df, x="Fruit", y="Amount",
    color="City", barmode="group",</samp>
- en: template="vapor")</samp>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: template="vapor")</samp>
- en: '4.  Lastly, add <samp class="SANS_TheSansMonoCd_W5Regular_11">className="dbc"</samp>
    to the outer container of the app, as shown in the following code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 4.  最后，在应用的外部容器中添加 <samp class="SANS_TheSansMonoCd_W5Regular_11">className="dbc"</samp>，如下代码所示：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = dbc.Container([</samp>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = dbc.Container([</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">    html.H1("Hello Dash", style={''textAlign'':
    ''center''}),</samp>'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">    html.H1("Hello Dash", style={''textAlign'':
    ''center''}),</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">    html.P("Type anything here:"),</samp>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">    html.P("在这里输入任何内容："),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">    dcc.Input(className="mb-2"),</samp>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">    dcc.Input(className="mb-2"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">    dcc.Graph(</samp>
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">    dcc.Graph(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">       id='example-graph',</samp>
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">       id='example-graph',</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">       figure=fig</samp>
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">       figure=fig</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">    )</samp>
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">    )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">],</samp>
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">    fluid=True,</samp>
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">    fluid=True,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">    </samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">className="dbc"</samp>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">    </samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">className="dbc"</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: The *app.py* file used in this example should generate the app shown in [Figure
    8-4](chapter8.xhtml#fig8-4) when you execute it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中使用的 *app.py* 文件在执行时应生成 [图 8-4](chapter8.xhtml#fig8-4) 中所示的应用。
- en: '![](../images/Figure8-4.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure8-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-4: Complete sample
    app</samp>'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-4：完整的示例应用</samp>
- en: <samp class="SANS_Futura_Std_Bold_B_11">Debugging a Dash App</samp>
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">调试 Dash 应用</samp>
- en: Knowing how to effectively debug your app will save you many hours of trial
    and error when bugs occur. Teaching you the full skill set of debugging is beyond
    the scope of this chapter; however, here we’ve put some material together to help
    you get started.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 知道如何有效地调试你的应用程序，将在出现错误时节省你大量的时间和试错成本。教授你完整的调试技能超出了本章的范围；然而，我们在这里整理了一些材料，帮助你入门。
- en: 'Python has a few options for free debugger packages. For Dash, we recommend
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">ipdb</samp> package. To install
    it, go to your terminal and enter:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Python 提供了一些免费的调试器包。对于 Dash，我们推荐使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">ipdb</samp>
    包。要安装它，请打开终端并输入：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install ipdb</samp>
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install ipdb</samp>
- en: Let’s look at an example where debugging might be helpful. Find the *debug-demo.py*
    file in the book’s code at [*https://<wbr>github<wbr>.com<wbr>/DashBookProject<wbr>/Plotly<wbr>-Dash*](https://github.com/DashBookProject/Plotly-Dash).
    When you run it on your computer, you should see something like [Figure 8-5](chapter8.xhtml#fig8-5).
    This is supposed to be an app that graphs bill totals over time.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个调试可能会有帮助的示例。在书本的代码中找到 *debug-demo.py* 文件，链接为 [*https://<wbr>github<wbr>.com<wbr>/DashBookProject<wbr>/Plotly<wbr>-Dash*](https://github.com/DashBookProject/Plotly-Dash)。当你在计算机上运行它时，你应该会看到类似
    [图 8-5](chapter8.xhtml#fig8-5) 的内容。这个应用应该能够绘制账单总额随时间的变化。
- en: '![](../images/Figure8-5.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure8-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-5: The</samp> <samp
    class="SANS_Futura_Std_Book_11">debug-demo.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">app
    once executed</samp>'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-5：执行后的</samp> <samp class="SANS_Futura_Std_Book_11">debug-demo.py</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">应用</samp>
- en: 'This is pretty frustrating: our app doesn’t throw any errors, but clearly something
    is wrong since the graph is not displaying any data. Let’s debug our app to find
    out where the problem lies.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这真让人沮丧：我们的应用没有抛出任何错误，但显然有问题，因为图表没有显示任何数据。让我们调试一下应用，找出问题所在。
- en: 'First, uncomment the first line of code in *debug-demo.py* to <samp class="SANS_TheSansMonoCd_W5Regular_11">import
    ipdb</samp>. Then activate the debugging feature in the first line of code inside
    the callback function by uncommenting this line:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，取消注释 *debug-demo.py* 中的第一行代码，<samp class="SANS_TheSansMonoCd_W5Regular_11">import
    ipdb</samp>。然后，在回调函数中的第一行代码激活调试功能，通过取消注释这一行：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">ipdb.set_trace()</samp>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">ipdb.set_trace()</samp>
- en: 'You can of course debug any section of the app you’d like; in our case, we’ll
    start at the callback function that builds the graph, since the problem is with
    the graph. Lastly, turn off the native Dash debugging mechanism and turn off the
    app’s multithreading so that you don’t break your session with overlapping <samp
    class="SANS_TheSansMonoCd_W5Regular_11">ipdb</samp> instances, as is done in *debug-demo.py*:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以调试应用程序中的任何部分；在我们的案例中，我们将从构建图表的回调函数开始，因为问题出在图表上。最后，关闭原生 Dash 调试机制，并禁用应用程序的多线程，以避免在多个
    <samp class="SANS_TheSansMonoCd_W5Regular_11">ipdb</samp> 实例重叠时破坏会话，正如在 *debug-demo.py*
    中所做的那样：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">if __name__ == '__main__':</samp>
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">if __name__ == '__main__':</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   app.run_server(</samp><samp
    class="SANS_TheSansMonoCd_W7Bold_B_11">debug=False</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">threaded=False</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">,
    port=8004)</samp>
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   app.run_server(</samp><samp
    class="SANS_TheSansMonoCd_W7Bold_B_11">debug=False</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">threaded=False</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">,
    port=8004)</samp>
- en: Save and run the altered *debug-demo.py* file and click the HTTP link to open
    your app in the browser. Going back to the run tool window, you should see something
    like [Figure 8-6](chapter8.xhtml#fig8-6).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并运行修改后的 *debug-demo.py* 文件，然后点击 HTTP 链接在浏览器中打开你的应用程序。返回到运行工具窗口，你应该会看到类似于[图
    8-6](chapter8.xhtml#fig8-6)的内容。
- en: '![](../images/Figure8-6.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure8-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-6: Debugging activated
    in the PyCharm run window</samp>'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-6：在 PyCharm 运行窗口中激活调试</samp>
- en: If you try to execute <samp class="SANS_TheSansMonoCd_W5Regular_11">print(dff.head())</samp>
    in the run window, you’ll get an error saying that <samp class="SANS_TheSansMonoCd_W5Regular_11">dff</samp>
    is not defined. That’s because the line of code that creates and defines <samp
    class="SANS_TheSansMonoCd_W5Regular_11">dff</samp> is on line 23, which has not
    been executed yet. To tell the debugger to execute that next line of code, enter
    a lowercase **n** in the run window. Now, if you execute <samp class="SANS_TheSansMonoCd_W5Regular_11">print(dff.head())</samp>
    again, you should see the first five rows of your DataFrame, as shown in [Figure
    8-7](chapter8.xhtml#fig8-7).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试在运行窗口中执行 <samp class="SANS_TheSansMonoCd_W5Regular_11">print(dff.head())</samp>，你会得到一个错误，提示
    <samp class="SANS_TheSansMonoCd_W5Regular_11">dff</samp> 未定义。这是因为创建并定义 <samp class="SANS_TheSansMonoCd_W5Regular_11">dff</samp>
    的代码行位于第 23 行，而这一行尚未执行。为了让调试器执行下一行代码，请在运行窗口中输入小写的 **n**。现在，如果你再次执行 <samp class="SANS_TheSansMonoCd_W5Regular_11">print(dff.head())</samp>，你应该会看到
    DataFrame 的前五行，如[图 8-7](chapter8.xhtml#fig8-7)所示。
- en: '![](../images/Figure8-7.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure8-7.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-7: The DataFrame printed
    in the run window</samp>'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-7：在运行窗口中打印的 DataFrame</samp>
- en: 'However, when you next press **n** to execute code line 24 and enter <samp
    class="SANS_TheSansMonoCd_W5Regular_11">print(dff.head())</samp> again, you’ll
    see a notification in the run window telling you the DataFrame is empty:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当你按下 **n** 执行代码行 24 并再次输入 <samp class="SANS_TheSansMonoCd_W5Regular_11">print(dff.head())</samp>
    时，你将在运行窗口中看到一个通知，告诉你 DataFrame 是空的：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Empty DataFrame</samp>
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Empty DataFrame</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">Columns: [total_bill, tip, sex,
    smoker, day, time, size]</samp>'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">Columns: [total_bill, tip, sex,
    smoker, day, time, size]</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">Index: []</samp>'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">Index: []</samp>'
- en: 'This is because line 24 filters the <samp class="SANS_TheSansMonoCd_W5Regular_11">day</samp>
    column to only have rows with <samp class="SANS_TheSansMonoCd_W5Regular_11">''Mon''</samp>.
    It appears that zero rows have <samp class="SANS_TheSansMonoCd_W5Regular_11">''Mon''</samp>
    as a value, which is why the DataFrame is empty. To check what unique values are
    present in the <samp class="SANS_TheSansMonoCd_W5Regular_11">day</samp> column,
    enter <samp class="SANS_TheSansMonoCd_W7Bold_B_11">print(df.day.unique())</samp>
    in the run window. You’ll find only the <samp class="SANS_TheSansMonoCd_W5Regular_11">[''Sun''
    ''Sat'' ''Thur'' ''Fri'']</samp> values within the <samp class="SANS_TheSansMonoCd_W5Regular_11">day</samp>
    column. That is why the graph did not plot anything when the app was executed:
    there was no data to plot.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为第 24 行过滤了 <samp class="SANS_TheSansMonoCd_W5Regular_11">day</samp> 列，只保留了值为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">'Mon'</samp> 的行。看起来没有任何行的 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">day</samp> 列值是 <samp class="SANS_TheSansMonoCd_W5Regular_11">'Mon'</samp>，这就是
    DataFrame 为空的原因。要检查 <samp class="SANS_TheSansMonoCd_W5Regular_11">day</samp> 列中存在哪些唯一值，可以在运行窗口输入
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">print(df.day.unique())</samp>。你会发现
    <samp class="SANS_TheSansMonoCd_W5Regular_11">day</samp> 列中只有 <samp class="SANS_TheSansMonoCd_W5Regular_11">['Sun'
    'Sat' 'Thur' 'Fri']</samp> 这些值。这就是为什么在执行应用时图表没有绘制任何内容：没有数据可以绘制。
- en: To fix your app, change <samp class="SANS_TheSansMonoCd_W5Regular_11">'Mon'</samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">'Fri'</samp> on line 24 and restart
    the *debug-demo.py* file. (If your app will not restart, change the port number
    at the very end from 8004 to anything else.) Back in the terminal, instead of
    entering **n** for each line of code, you can just enter **c** to continue program
    execution until completion. Because there is no other bug (breakpoint) in the
    app, it successfully executes and should look like [Figure 8-8](chapter8.xhtml#fig8-8).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要修复你的应用，将第 24 行中的 <samp class="SANS_TheSansMonoCd_W5Regular_11">'Mon'</samp>
    改为 <samp class="SANS_TheSansMonoCd_W5Regular_11">'Fri'</samp>，然后重新启动 *debug-demo.py*
    文件。（如果你的应用无法重新启动，可以将端口号从 8004 改为其他任何值。）在终端中，你可以直接输入 **c** 来继续程序执行，直到完成，而不是为每行代码输入
    **n**。因为应用中没有其他错误（断点），所以它成功执行，并且应该像 [图 8-8](chapter8.xhtml#fig8-8) 一样。
- en: '![](../images/Figure8-8.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure8-8.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-8: The</samp> <samp
    class="SANS_Futura_Std_Book_11">debug-demo.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">app
    executed successfully after debugging</samp>'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-8：调试后的</samp> <samp class="SANS_Futura_Std_Book_11">debug-demo.py</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">应用成功执行</samp>
- en: For an <samp class="SANS_TheSansMonoCd_W5Regular_11">ipdb</samp> cheat sheet,
    go to [*https://<wbr>wangchuan<wbr>.github<wbr>.io<wbr>/coding<wbr>/2017<wbr>/07<wbr>/12<wbr>/ipdb<wbr>-cheat<wbr>-sheet<wbr>.xhtml<wbr>*](https://wangchuan.github.io/coding/2017/07/12/ipdb-cheat-sheet.xhtml).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如需查看 <samp class="SANS_TheSansMonoCd_W5Regular_11">ipdb</samp> 的备忘单，请访问 [*https://<wbr>wangchuan<wbr>.github<wbr>.io<wbr>/coding<wbr>/2017<wbr>/07<wbr>/12<wbr>/ipdb<wbr>-cheat<wbr>-sheet<wbr>.xhtml<wbr>*](https://wangchuan.github.io/coding/2017/07/12/ipdb-cheat-sheet.xhtml)。
- en: Happy debugging!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 调试愉快！
- en: <samp class="SANS_Futura_Std_Bold_B_11">dash-labs</samp>
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">dash-labs</samp>
- en: '*dash-labs* is a GitHub repository started by Plotly as a work-in-progress
    technical preview of potential future Dash features, found at [*https://<wbr>github<wbr>.com<wbr>/plotly<wbr>/dash<wbr>-labs*](https://github.com/plotly/dash-labs).
    Community feedback and active participation are essential to the success of this
    repository because features are built for and with the help of the community.
    Some features from the past couple of years that were developed in dash-labs include
    flexible callback signatures ([*https://<wbr>dash<wbr>.plotly<wbr>.com<wbr>/flexible<wbr>-callback<wbr>-signatures*](https://dash.plotly.com/flexible-callback-signatures))
    and long callbacks ([*https://<wbr>dash<wbr>.plotly<wbr>.com<wbr>/long<wbr>-callbacks*](https://dash.plotly.com/long-callbacks)).'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*dash-labs* 是由 Plotly 启动的一个 GitHub 仓库，作为潜在未来 Dash 功能的技术预览，位于 [*https://<wbr>github<wbr>.com<wbr>/plotly<wbr>/dash<wbr>-labs*](https://github.com/plotly/dash-labs)。社区的反馈和积极参与对这个仓库的成功至关重要，因为功能是为社区并在社区的帮助下构建的。过去几年在
    dash-labs 中开发的一些功能包括灵活的回调签名 ([*https://<wbr>dash<wbr>.plotly<wbr>.com<wbr>/flexible<wbr>-callback<wbr>-signatures*](https://dash.plotly.com/flexible-callback-signatures))
    和长回调 ([*https://<wbr>dash<wbr>.plotly<wbr>.com<wbr>/long<wbr>-callbacks*](https://dash.plotly.com/long-callbacks))。'
- en: At the time of this writing, two active projects in dash-labs include the Multipage
    Apps feature for a quick and seamless way to write multipage apps and the Dashdown
    feature to allow execution of Markdown documents with Dash. To start exploring
    dash-labs, click the ***docs*** folder in the dash-labs repository ([Figure 8-9](chapter8.xhtml#fig8-9))
    and read more about the features that have been developed so far.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，dash-labs 中的两个活跃项目包括多页面应用特性，用于快速、无缝地编写多页面应用，以及 Dashdown 特性，允许在 Dash 中执行
    Markdown 文档。要开始探索 dash-labs，请点击 dash-labs 仓库中的 ***docs*** 文件夹（[图 8-9](chapter8.xhtml#fig8-9)），了解更多已经开发的功能。
- en: '![](../images/Figure8-9.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure8-9.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 8-9: The</samp> <samp
    class="SANS_Futura_Std_Book_11">docs</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">folder
    pertaining to the dash-labs repository</samp>'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 8-9：dash-labs 仓库中的</samp>
    <samp class="SANS_Futura_Std_Book_11">docs</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">文件夹</samp>
- en: To try out some of the features yourself, you can <samp class="SANS_TheSansMonoCd_W5Regular_11">git
    clone dash-labs</samp> and run any of the *app.py* or *app_dbc.py* files located
    in the *demos* folder.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了亲自尝试一些功能，你可以 <samp class="SANS_TheSansMonoCd_W5Regular_11">git clone dash-labs</samp>
    并运行位于 *demos* 文件夹中的任何 *app.py* 或 *app_dbc.py* 文件。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Formatting Your Code with Black</samp>
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">使用 Black 格式化代码</samp>
- en: 'Writing code in a well-formatted manner is not only visually pleasing but also
    crucial for readability. As you develop your skills, the programs you create will
    become bigger and more complex. If those programs are not well formatted, you
    can easily get lost within your own code. Manually formatting your code according
    to the PEP8 format, which is the official Python style guide, is very time-consuming.
    Luckily, we have the Python tool *Black*: a code formatter.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以一种良好的格式编写代码不仅使代码更美观，而且对可读性至关重要。随着你技能的提升，你所编写的程序将变得越来越大、越来越复杂。如果这些程序没有良好的格式化，你很容易在自己的代码中迷失。根据官方
    Python 风格指南 PEP8 手动格式化代码非常耗时。幸运的是，我们有了 Python 工具 *Black*：一个代码格式化工具。
- en: 'Let’s see Black in action. Start by installing Black:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 Black 的实际效果。首先安装 Black：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install black</samp>
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install black</samp>
- en: Then download the *pre-black-formatting.py* file from [*https://<wbr>github<wbr>.com<wbr>/DashBookProject<wbr>/Plotly<wbr>-Dash*](https://github.com/DashBookProject/Plotly-Dash)
    and open it ([Listing 8-1](chapter8.xhtml#List8-1)).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后从 [*https://<wbr>github<wbr>.com<wbr>/DashBookProject<wbr>/Plotly<wbr>-Dash*](https://github.com/DashBookProject/Plotly-Dash)
    下载 *pre-black-formatting.py* 文件并打开它（[列表 8-1](chapter8.xhtml#List8-1)）。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">from dash import Dash, dcc, html</samp>
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">from dash import Dash, dcc, html</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import plotly.express as px</samp>
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import plotly.express as px</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__)</samp>
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df = pd.DataFrame({</samp>
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">df = pd.DataFrame({</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❶<samp class="SANS_TheSansMonoCd_W5Regular_11"> ''Fruit'':
    ["Apples", "Oranges", "Bananas", "Apples", "Oranges",</samp>'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❶<samp class="SANS_TheSansMonoCd_W5Regular_11"> ''Fruit'':
    ["Apples", "Oranges", "Bananas", "Apples", "Oranges",</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              "Bananas"],</samp>
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              "Bananas"],</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      "Amount": [4, 1, 2, 2,
    4, 5],</samp>'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      "Amount": [4, 1, 2, 2,
    4, 5],</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      "City": ["SF", "SF", "SF",
    "Montreal", "Montreal", "Montreal"]</samp>'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      "City": ["SF", "SF", "SF",
    "Montreal", "Montreal", "Montreal"]</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">})</samp>
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">})</samp>
- en: ❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">fig=px.bar(df, x=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"Fruit", y="Amount", color="City")</samp>
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">fig=px.bar(df, x=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"Fruit", y="Amount", color="City")</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = html.Div([</samp>
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = html.Div([</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.H1("Fruit Analysis App",
    style={'textAlign':'center'}),</samp>
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.H1("Fruit Analysis App",
    style={'textAlign':'center'}),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❸  <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph(</samp>
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❸  <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      id='example-graph',</samp>
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      id='example-graph',</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      figure=fig</samp>
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      figure=fig</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">],</samp>
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">if __name__ == '__main__':</samp>
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">if __name__ == '__main__':</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   app.run_server(debug=True)</samp>
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   app.run_server(debug=True)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 8-1: The</samp> <samp
    class="SANS_Futura_Std_Book_11">pre-black-formatting.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">file</samp>'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 8-1: The</samp> <samp
    class="SANS_Futura_Std_Book_11">pre-black-formatting.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">file</samp>'
- en: There are a few formatting inconsistencies in the code. For example, the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Fruit</samp> key ❶ is surrounded by single
    quotation marks while the <samp class="SANS_TheSansMonoCd_W5Regular_11">Amount</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">City</samp> keys are surrounded
    by double quotation marks. Likewise, the <samp class="SANS_TheSansMonoCd_W5Regular_11">Fruit</samp>
    key values span across two lines of code while the other key values are written
    out on one line of code. Also, in the line that builds the Plotly Express bar
    chart ❷, we can see that there is no space before or after the equal sign (<samp
    class="SANS_TheSansMonoCd_W5Regular_11">fig=px.bar</samp>). Lastly, we see that
    the Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> component
    is written out across four lines of code ❸, while the <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1</samp>
    component, right above it, is written out on one line of code. There are a few
    more inconsistencies in the code; see if you can spot them before using Black.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中有一些格式不一致的地方。例如，<samp class="SANS_TheSansMonoCd_W5Regular_11">Fruit</samp>
    键 ❶ 被单引号包围，而 <samp class="SANS_TheSansMonoCd_W5Regular_11">Amount</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">City</samp> 键则被双引号包围。同样，<samp class="SANS_TheSansMonoCd_W5Regular_11">Fruit</samp>
    键的值跨越了两行代码，而其他键的值则写在一行代码上。此外，在构建 Plotly Express 柱状图的那一行 ❷，我们可以看到等号（<samp class="SANS_TheSansMonoCd_W5Regular_11">fig=px.bar</samp>）前后没有空格。最后，我们看到
    Dash 的 <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> 组件跨越了四行代码 ❸，而它上面的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H1</samp> 组件则写在了一行代码上。代码中还有一些其他的不一致，看看在使用
    Black 前能否发现它们。
- en: 'To use Black, open the terminal and move into the directory that holds *pre-black-formatting.py*.
    Once there, enter the command followed by the filename, as shown here:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Black，打开终端并进入包含 *pre-black-formatting.py* 的目录。进入后，输入命令并跟上文件名，如下所示：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">black
    pre-black-formatting.py</samp>
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">black
    pre-black-formatting.py</samp>
- en: Black will automatically format the file without renaming it. For the purpose
    of this demo, we renamed the file to *post-black-formatting.py*, also located
    in the book’s GitHub repository ([Listing 8-2](chapter8.xhtml#List8-2)).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Black 会自动格式化文件而不重命名它。为了演示的目的，我们将文件重命名为 *post-black-formatting.py*，该文件也位于书籍的
    GitHub 仓库中（[Listing 8-2](chapter8.xhtml#List8-2)）。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">from dash import Dash, dcc, html</samp>
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">from dash import Dash, dcc, html</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import plotly.express as px</samp>
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import plotly.express as px</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__)</samp>
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df = pd.DataFrame(</samp>
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">df = pd.DataFrame(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   {</samp>
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   {</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">        "Fruit": ["Apples", "Oranges",
    "Bananas", "Apples", "Oranges", "Bananas"],</samp> ❶'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">        "Fruit": ["苹果", "橙子",
    "香蕉", "苹果", "橙子", "香蕉"],</samp> ❶'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">        "Amount": [4, 1, 2, 2,
    4, 5],</samp>'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">        "Amount": [4, 1, 2, 2,
    4, 5],</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">        "City": ["SF", "SF",
    "SF", "Montreal", "Montreal", "Montreal"],</samp>'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">        "City": ["SF", "SF",
    "SF", "蒙特利尔", "蒙特利尔", "蒙特利尔"],</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   }</samp>
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   }</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     fig = px.bar(df, x=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"Fruit", y="Amount", color="City")</samp>
    ❷
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     fig = px.bar(df, x=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"Fruit", y="Amount", color="City")</samp>
    ❷
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = html.Div(</samp>
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = html.Div(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [</samp>
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      html.H1("Fruit Analysis
    App", style={"textAlign": "center"}),</samp>'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      html.H1("水果分析应用", style={"textAlign":
    "center"}),</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dcc.Graph(id="example-graph",
    figure=fig),</samp> ❸
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      dcc.Graph(id="example-graph",
    figure=fig),</samp> ❸
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ],</samp>
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">if __name__ == "__main__":</samp>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">if __name__ == "__main__":</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   app.run_server(debug=True)</samp>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   app.run_server(debug=True)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 8-2: The</samp> <samp
    class="SANS_Futura_Std_Book_11">post-black-formatting.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">file
    formatted with Black</samp>'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 8-2：使用Black格式化的</samp> <samp
    class="SANS_Futura_Std_Book_11">post-black-formatting.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">文件</samp>
- en: We see that all single quotation marks have been replaced with double quotation
    marks and the <samp class="SANS_TheSansMonoCd_W5Regular_11">Fruit</samp> key values
    are written out on one line of code instead of two ❶, there’s an equal amount
    of spacing before and after the equal sign ❷, and the <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp>
    component is also on one line instead of four ❸. As you can see, the code formatted
    by Black is consistent and a lot easier to read.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，所有的单引号都被替换成了双引号，并且<samp class="SANS_TheSansMonoCd_W5Regular_11">Fruit</samp>键的值被写成了一行代码而不是两行
    ❶，等号前后有相同的空格 ❷，而<samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp>组件也被写成了一行而不是四行
    ❸。正如你所看到的，Black格式化的代码一致性更强，也更易读。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Follow-up Resources</samp>
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">后续资源</samp>
- en: '*The important thing is not to stop questioning; curiosity has its own reason
    for existing.*'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '*重要的事情是不要停止提问；好奇心有其存在的理由。*'
- en: —Albert Einstein
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: —阿尔伯特·爱因斯坦
- en: 'Understanding that learning never stops, we’ve put together a few resources
    to help you become an expert in Dash:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 认识到学习永无止境，我们整理了一些资源，帮助你成为Dash的专家：
- en: 'Our very own website dedicated to teaching Dash and sharing updates related
    to this book also offers a suggested list of videos to watch to deepen your knowledge
    of Dash: [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com).'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们自己的网站专门用于教授Dash并分享与本书相关的更新，此外还提供了一些推荐的视频列表，帮助你更深入地了解Dash：[*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com)。
- en: 'The Dash Bootstrap Cheat Sheet site, built by our coauthor Ann Marie Ward,
    offers summaries of the main Bootstrap styling syntax, shortcuts to the documentation
    on all the Dash Bootstrap Components, and links to different sections of the Dash
    docs: [*https://<wbr>dashcheatsheet<wbr>.pythonanywhere<wbr>.com*](https://dashcheatsheet.pythonanywhere.com).'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dash Bootstrap备忘单网站，由我们的合著者Ann Marie Ward创建，提供了Bootstrap主要样式语法的总结，Dash Bootstrap组件文档的快捷链接，以及Dash文档不同部分的链接：[*https://<wbr>dashcheatsheet<wbr>.pythonanywhere<wbr>.com*](https://dashcheatsheet.pythonanywhere.com)。
- en: Finxter, a Python educational website with over half a million students monthly
    founded by our coauthor Chris Mayer, is a great place to learn Python and sharpen
    your pandas skillset. Go to [*https://<wbr>app<wbr>.finxter<wbr>.com*](https://app.finxter.com).
    For free access to Chris’s book *Coffee Break Pandas*, see [*https://<wbr>blog<wbr>.finxter<wbr>.com<wbr>/coffee<wbr>-break<wbr>-pandas<wbr>-book<wbr>-page*](https://blog.finxter.com/coffee-break-pandas-book-page).
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Finxter 是一个每月吸引超过五十万名学生的 Python 教育网站，由我们的合著者 Chris Mayer 创办，是学习 Python 和提升 pandas
    技能的好地方。访问 [*https://<wbr>app<wbr>.finxter<wbr>.com*](https://app.finxter.com)。欲免费获取
    Chris 的书籍 *Coffee Break Pandas*，请访问 [*https://<wbr>blog<wbr>.finxter<wbr>.com<wbr>/coffee<wbr>-break<wbr>-pandas<wbr>-book<wbr>-page*](https://blog.finxter.com/coffee-break-pandas-book-page)。
- en: 'Charming Data’s YouTube channel and its respective GitHub repository, created
    and maintained by our coauthor Adam Schroeder, are excellent resources for learning
    Dash and staying up-to-date with the most recent Dash developments: [*https://<wbr>www<wbr>.youtube<wbr>.com<wbr>/c<wbr>/CharmingData*](https://www.youtube.com/c/CharmingData)
    and [*https://<wbr>github<wbr>.com<wbr>/Coding<wbr>-with<wbr>-Adam<wbr>/Dash<wbr>-by<wbr>-Plotly<wbr>*](https://github.com/Coding-with-Adam/Dash-by-Plotly).'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Charming Data 的 YouTube 频道及其相应的 GitHub 仓库，由我们的合著者 Adam Schroeder 创建和维护，是学习 Dash
    并及时跟进最新 Dash 发展情况的极好资源：[*https://<wbr>www<wbr>.youtube<wbr>.com<wbr>/c<wbr>/CharmingData*](https://www.youtube.com/c/CharmingData)
    和 [*https://<wbr>github<wbr>.com<wbr>/Coding<wbr>-with<wbr>-Adam<wbr>/Dash<wbr>-by<wbr>-Plotly<wbr>*](https://github.com/Coding-with-Adam/Dash-by-Plotly)。
- en: 'The comprehensive list of Dash components created and maintained by the community
    will allow you to enrich your app with capabilities and features that will make
    it look more professional: [*https://<wbr>community<wbr>.plotly<wbr>.com<wbr>/t<wbr>/community<wbr>-components<wbr>-index<wbr>/60098<wbr>*](https://community.plotly.com/t/community-components-index/60098).'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由社区创建和维护的 Dash 组件的全面列表将允许你为应用程序添加功能和特性，使其看起来更专业：[*https://<wbr>community<wbr>.plotly<wbr>.com<wbr>/t<wbr>/community<wbr>-components<wbr>-index<wbr>/60098<wbr>*](https://community.plotly.com/t/community-components-index/60098)。
- en: 'The following are a few online courses dedicated to teaching Dash and Plotly.
    Please make sure you read the reviews before deciding which course would work
    for you:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是一些专门教授 Dash 和 Plotly 的在线课程。在决定适合你的课程之前，请务必阅读评论：
- en: '*https://www.datacamp.com/courses/building-dashboards-with-dash-and-plotly*'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*https://www.datacamp.com/courses/building-dashboards-with-dash-and-plotly*'
- en: '*https://www.coursera.org/projects/interactive-dashboards-plotly-dash*'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*https://www.coursera.org/projects/interactive-dashboards-plotly-dash*'
- en: '*https://www.pluralsight.com/courses/plotly-building-data-visualizations*'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*https://www.pluralsight.com/courses/plotly-building-data-visualizations*'
- en: '*https://www.udemy.com/course/interactive-python-dashboards-with-plotly-and-dash*'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*https://www.udemy.com/course/interactive-python-dashboards-with-plotly-and-dash*'
