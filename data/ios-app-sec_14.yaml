- en: '**11**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**11**'
- en: '**LEGACY ISSUES AND BAGGAGE FROM C**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**来自 C 的遗留问题和负担**'
- en: Objective-C and Cocoa help mitigate many security problems that you might run
    into with C or C++. Objective-C is, however, still a flavor of C, which fundamentally
    isn’t a “safe” language, and some Cocoa APIs are still vulnerable to the types
    of data theft or code execution attacks you might expect in C programs. C and
    C++ can also be intermingled freely with Objective-C. Many iOS applications use
    large amounts of C and C++ code, whether because developers want to use a familiar
    library or are trying to keep code as portable as possible between platforms.
    There are some mitigations in place to prevent code execution attacks, as discussed
    in [Chapter 1](ch01.html#ch01), but these can be bypassed by more skilled attackers.
    As such, it’s a good idea to familiarize yourself with these bugs and attacks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Objective-C 和 Cocoa 帮助缓解了许多你在 C 或 C++ 中可能遇到的安全问题。然而，Objective-C 仍然是 C 的一种变体，根本上不是一种“安全”的语言，某些
    Cocoa API 仍然容易受到你在 C 程序中可能遇到的数据窃取或代码执行攻击的威胁。C 和 C++ 也可以与 Objective-C 自由混合。许多 iOS
    应用程序使用大量的 C 和 C++ 代码，无论是因为开发者想要使用熟悉的库，还是试图尽可能保持代码在不同平台之间的可移植性。虽然有一些缓解措施来防止代码执行攻击，如[第1章](ch01.html#ch01)中讨论的内容，但这些措施可能会被更熟练的攻击者绕过。因此，熟悉这些漏洞和攻击是个好主意。
- en: In this chapter, you’ll learn about some of the types of attacks to look out
    for, the places where C bugs creep into Objective-C, and how to fix these issues.
    The topic of native C code issues is broad, so this chapter is a “greatest hits”
    of these issues to give you the basic foundation for understanding the theory
    behind these flaws and the attacks that exploit them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习一些需要注意的攻击类型、C 错误如何渗透到 Objective-C 中以及如何修复这些问题。原生 C 代码问题的主题非常广泛，因此本章是这些问题的“精华”，旨在为你提供理解这些缺陷背后的理论以及利用这些缺陷进行攻击的基础知识。
- en: '**Format Strings**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**格式字符串**'
- en: 'Format string attacks^([1](footnote.html#fn100)) leverage a misuse of APIs
    that expect a *format string*, or a string that defines the data types of which
    the string will be composed. In C, the most commonly used functions that accept
    format strings are in the `printf` family; there are a number of other functions,
    such as `syslog`, that accept them as well. In Objective-C, these methods usually
    have suffixes like `WithFormat` or `AppendingFormat`, though there are several
    exceptions. Here are examples of all three:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 格式字符串攻击^([1](footnote.html#fn100))利用了错误使用那些期望 *格式字符串*（即定义字符串所组成数据类型的字符串）API。在
    C 中，最常用的接受格式字符串的函数属于 `printf` 系列；还有许多其他函数，比如 `syslog`，也接受格式字符串。在 Objective-C 中，这些方法通常具有
    `WithFormat` 或 `AppendingFormat` 等后缀，尽管也有一些例外。以下是三者的示例：
- en: • `[NSString *WithFormat]`
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: • `[NSString *WithFormat]`
- en: • `[NSString stringByAppendingFormat]`
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: • `[NSString stringByAppendingFormat]`
- en: • `[NSMutableString appendFormat]`
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: • `[NSMutableString appendFormat]`
- en: • `[NSAlert alertWithMessageText]`
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: • `[NSAlert alertWithMessageText]`
- en: • `[NSException raise:format:]`
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: • `[NSException raise:format:]`
- en: • `NSLog()`
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: • `NSLog()`
- en: 'Attackers commonly exploit format string vulnerabilities to do two things:
    execute arbitrary code and read process memory. These vulnerabilities generally
    stem from two age-old C format string operators: `%n` and `%x`. The rarely used
    `%n` operator is meant to store the value of the characters printed so far in
    an integer on the stack. It can, however, be leveraged to overwrite portions of
    memory. The `%x` operator is meant to print values as hexadecimal, but when no
    value is passed in to be printed, it reads values from the stack.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者通常利用格式字符串漏洞来做两件事：执行任意代码和读取进程内存。这些漏洞通常源自两个古老的 C 格式字符串操作符：`%n` 和 `%x`。很少使用的
    `%n` 操作符用于将目前打印的字符数量存储在栈上的一个整数中。然而，它可以被利用来覆盖内存的部分内容。`%x` 操作符用于以十六进制打印值，但当没有传入要打印的值时，它会从栈中读取值。
- en: Unfortunately for us bug hunters, Apple has disabled `%n` in Cocoa classes that
    accept format strings. But the `%n` format string *is* allowed in regular C code,
    so code execution format string attacks are still possible.^([2](footnote.html#fn101))
    The reason that `%n` can result in code execution is because it writes to the
    stack, and the format string is also stored on the stack. Exploitation varies
    depending on the specific bug, but the main upshot is that by crafting a format
    string that contains `%n` and also a memory address to write to, you can get arbitrary
    integers written to specific parts of memory. In combination with some shell code,
    this can be exploited similarly to a buffer overflow attack.^([3](footnote.html#fn102))
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，对于我们这些漏洞猎人来说，Apple 在接受格式化字符串的 Cocoa 类中禁用了 `%n`。但在常规的 C 代码中，`%n` 格式化字符串*是*允许的，因此格式化字符串攻击仍然可能导致代码执行^([2](footnote.html#fn101))。之所以
    `%n` 会导致代码执行，是因为它会写入堆栈，而格式化字符串本身也存储在堆栈上。利用方式因特定漏洞而异，但主要的结果是，通过构造一个包含 `%n` 的格式化字符串，并且提供一个要写入的内存地址，你可以将任意整数写入内存的特定位置。结合一些
    shell 代码，这种攻击可以像缓冲区溢出攻击一样被利用^([3](footnote.html#fn102))。
- en: The `%x` operator, on the other hand, is alive and well in both Objective-C
    methods and C functions. If an attacker can pass `%x` to an input that lacks a
    format string specifier, the input will be interpreted as a format string, and
    the contents of a stack will be written in hexadecimal where the expected string
    should appear. If attackers can then view this output, they can collect potentially
    sensitive information from the process’s memory, such as user-names, passwords,
    or other personal data.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`%x` 运算符则在 Objective-C 方法和 C 函数中都活跃且有效。如果攻击者能够将 `%x` 传递给一个缺少格式化字符串说明符的输入，输入将被解释为格式化字符串，并且堆栈的内容将以十六进制形式显示在原本应该显示字符串的地方。如果攻击者能够查看这个输出，他们可以从进程的内存中收集潜在的敏感信息，如用户名、密码或其他个人数据。'
- en: Of course, both of these vulnerabilities rely on a program not controlling user
    input properly. Let’s take a look at how an attacker might misuse format strings
    in such a situation and how applications can prevent that from happening.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这两种漏洞都依赖于程序未能正确控制用户输入。让我们看看在这种情况下，攻击者可能如何滥用格式化字符串，并且应用程序可以如何防止这种情况发生。
- en: '***Preventing Classic C Format String Attacks***'
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***防止经典的 C 格式化字符串攻击***'
- en: 'The typical example of a format string vulnerability is when a program passes
    a variable directly to `printf`, without manually specifying a format string.
    If this variable’s contents are supplied by external input that an attacker can
    control, then the attacker could execute code on a device or steal data from its
    memory. You can test some contrived vulnerable code like this in Xcode:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 格式化字符串漏洞的典型示例是当程序直接将一个变量传递给 `printf`，而没有手动指定格式化字符串。如果这个变量的内容是由外部输入提供，并且攻击者能够控制这些输入，那么攻击者可能会在设备上执行代码或窃取其内存中的数据。你可以在
    Xcode 中测试一些人为设计的易受攻击的代码：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This code simply supplies a string containing a bunch of `%x` specifiers to
    the `printf` function. In a real-world program, these values could come from any
    number of places, such as a user input field or DNS query result. When the code
    executes, you should see a string of hexadecimal output written to your console.
    This output contains the hexadecimal values of variables stored on the stack.
    If an application has stored a password or encryption key as a value on the stack
    and parses some attacker-supplied data, an attacker could cause this information
    to leak to somewhere they can then read. If you change the previous example to
    contain `%n` specifiers, the behavior is different. Here’s how that would look:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码简单地向 `printf` 函数传递一个包含一堆 `%x` 说明符的字符串。在一个真实的程序中，这些值可能来自许多地方，例如用户输入字段或 DNS
    查询结果。当代码执行时，你应该看到一串十六进制输出写入控制台。这个输出包含了存储在堆栈上的变量的十六进制值。如果应用程序在堆栈上存储了一个密码或加密密钥，并且解析了一些攻击者提供的数据，攻击者可能导致这些信息泄露到某个他们能够读取的地方。如果你将前面的示例改成包含
    `%n` 说明符，行为会有所不同。以下是它的表现：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Running this example in Xcode should cause Xcode to drop to `lldb` with the
    error `EXC_BAD_ACCESS`. Whenever you see that message, your program is trying
    to read or write to some memory it shouldn’t. In a carefully crafted attack, you
    won’t see such errors, of course; the code will simply execute.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Xcode 中运行此示例时，应该会导致 Xcode 跳转到 `lldb` 并出现 `EXC_BAD_ACCESS` 错误。每当你看到这个消息时，表示程序正在尝试读取或写入不应该访问的内存。当然，在精心设计的攻击中，你不会看到这样的错误；代码将直接执行。
- en: 'But you can prevent attackers from hijacking strings pretty easily by controlling
    user input. In this case, just change that `printf` to specify its own format
    string, as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，你可以通过控制用户输入轻松防止攻击者劫持字符串。在这种情况下，只需将 `printf` 改为指定自己的格式字符串，如下所示：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Run this in Xcode, and you should see the literal `%n%n%n%n%n` written harmlessly
    to the console. These examples, of course, are plain old C, but knowing how they
    work will help you explore format string attacks with an Objective-C twist.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Xcode 中运行这个，你应该能看到字面上的 `%n%n%n%n%n` 被无害地写入控制台。当然，这些示例都是纯 C，但了解它们的工作原理将帮助你探索带有
    Objective-C 扩展的格式字符串攻击。
- en: '***Preventing Objective-C Format String Attacks***'
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***防止 Objective-C 格式字符串攻击***'
- en: 'Similar to plain C, you can pass in any of the `printf` format operators to
    a number of different Objective-C APIs. You can test this easily in Xcode by passing
    a bogus format string to `NSLog`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于纯 C 语言，你可以将任何 `printf` 格式操作符传递给多个不同的 Objective-C API。你可以通过将虚假的格式字符串传递给 `NSLog`
    在 Xcode 中轻松测试这一点：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Much like the previous `%x` example, this will spit out memory contents in hexadecimal
    to the console. One format string vulnerability I’ve come across in real iOS applications
    is code that passes user-supplied input to a “formatting” function, which does
    some processing and returns an `NSString` object, as shown in [Listing 11-1](ch11.html#ch11ex1).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 就像之前的 `%x` 示例一样，这将把内存内容以十六进制形式打印到控制台。我在实际的 iOS 应用中遇到过的一个格式字符串漏洞是，代码将用户提供的输入传递给一个“格式化”函数，该函数进行一些处理并返回一个
    `NSString` 对象，如 [列表 11-1](ch11.html#ch11ex1) 所示。
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 11-1: Totally the wrong way to pass in data to a format string*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 11-1：完全错误的将数据传递给格式字符串的方法*'
- en: This example just assumes that the resulting `NSString` stored in `myStuff`
    at ➊ is safe; after all, the contents of *unformattedStuff.text* were “formatted.”
    But unless the `formatStuff` method has some special way of sanitizing that input
    file, the resulting string could contain format string specifiers. If that happens,
    you still have a format string issue, and the resulting string will contain values
    from the stack.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例假设在 ➊ 处存储在 `myStuff` 中的 `NSString` 是安全的；毕竟，*unformattedStuff.text* 的内容已经被“格式化”了。但是除非
    `formatStuff` 方法有某种特殊的方式来清理输入文件，否则结果字符串可能包含格式字符串说明符。如果发生这种情况，你仍然会面临格式字符串问题，且结果字符串将包含来自栈的值。
- en: '`NSString` objects aren’t magically safe from format string attacks. The correct
    way to output an `NSString` passed to a method requiring a format string is to
    use the `%@` specifier, as shown in [Listing 11-2](ch11.html#ch11ex2).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`NSString` 对象并不是天生安全的，不能免受格式字符串攻击。正确的方式是使用 `%@` 说明符来输出传递给需要格式字符串的方法的 `NSString`，如
    [列表 11-2](ch11.html#ch11ex2) 所示。'
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 11-2: The correct way to use a method expecting a format string*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 11-2：正确使用期望格式字符串的方法*'
- en: With the `%@` specifier in front, no matter how many `%x` and `%n` operators
    *unformattedStuff.text* might contain, `myStuff` should come out as a harmless
    string.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `%@` 说明符前，无论 *unformattedStuff.text* 中包含多少 `%x` 和 `%n` 操作符，`myStuff` 应该会输出为一个无害的字符串。
- en: The `%x` and `%n` specifiers are the most useful ones to attackers, but even
    in their absence, attackers can still cause undesirable behavior, such as crashes,
    when trying to read inaccessible memory, even using basic `%s` specifiers. Now
    that I’ve covered how format string attacks work and how to prevent them, I’ll
    show you some other methods of executing malicious code.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`%x` 和 `%n` 说明符对攻击者来说是最有用的，但即使它们不存在，攻击者仍然可以在尝试读取无法访问的内存时引发不良行为，例如崩溃，即使是使用基本的
    `%s` 说明符。现在我已经讲解了格式字符串攻击的原理以及如何防止它们，接下来我会展示一些其他执行恶意代码的方法。'
- en: '**Buffer Overflows and the Stack**'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**缓冲区溢出与栈**'
- en: Buffer overflows have long haunted the world of C, allowing crafted input from
    untrusted sources to crash programs or execute third-party code within the process
    of a vulnerable program. While buffer overflows have been known since the 1970s,
    the first prominent example of their exploitation was the Morris worm, which included
    a buffer overflow exploit of the UNIX `finger` daemon.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲区溢出长期以来困扰着 C 语言的世界，允许来自不信任来源的构造输入崩溃程序或在易受攻击程序的进程内执行第三方代码。尽管缓冲区溢出从 1970 年代就已知，但它们被首次广泛利用是在莫里斯蠕虫中，其中包括对
    UNIX `finger` 守护进程的缓冲区溢出攻击。
- en: Buffer overflows start by overwriting portions of memory. The basic memory layout
    of a process consists of the program code, any data the program needs to run,
    the stack, and the heap, as shown in [Figure 11-1](ch11.html#ch11fig1).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲区溢出从覆盖内存的部分开始。进程的基本内存布局包括程序代码、程序运行所需的任何数据、堆栈和堆，如[图11-1](ch11.html#ch11fig1)所示。
- en: '![image](graphics/f11-01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f11-01.jpg)'
- en: '*Figure 11-1: Arrangement of process memory*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*图11-1：进程内存的布局*'
- en: The *code* segment (often referred to as the *text* segment) is where the program’s
    actual executable is loaded into memory. The *data* segment contains the program’s
    global variables and static local variables. The *heap* is where the bulk of nonexecutable
    program data will reside, in memory dynamically allocated by the program. The
    *stack* is where local variables are stored, as well as addresses of functions
    and, importantly, a pointer to the address that contains the next instructions
    that the program is to execute.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*代码*段（通常称为*文本*段）是程序的实际可执行文件被加载到内存的地方。*数据*段包含程序的全局变量和静态局部变量。*堆*是程序运行时动态分配内存的地方，存储大部分非可执行程序数据。*栈*是存储局部变量的地方，以及函数的地址，重要的是，它还包含指向下一条程序执行指令的地址。'
- en: 'There are two basic types of overflows: those that overwrite portions of a
    program’s stack and those that overwrite portions of the heap. Let’s look at a
    buffer overflow vulnerability now.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 溢出有两种基本类型：一种是覆盖程序堆栈的部分内容，另一种是覆盖堆区的部分内容。现在让我们来看一下缓冲区溢出漏洞。
- en: '***A strcpy Buffer Overflow***'
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***一个 strcpy 缓冲区溢出***'
- en: A classic example of a stack-based buffer overflow is shown in [Listing 11-3](ch11.html#ch11ex3).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 栈基缓冲区溢出的经典例子见[清单11-3](ch11.html#ch11ex3)。
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 11-3: Code vulnerable to an overflow*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单11-3：容易发生溢出的代码*'
- en: Both `username` and `password` have been allocated 32 bytes. Under most circumstances,
    this program should function normally and compare the user-supplied password to
    the stored password since usernames and passwords tend to be less than 32 characters.
    However, when either value is supplied with an input that exceeds 32 characters,
    the additional characters start overwriting the memory adjacent to the variable
    on the stack, as illustrated in [Figure 11-2](ch11.html#ch11fig2). This means
    that an attacker can overwrite the return address of the function, specifying
    that the next thing to be executed is a blob of malicious code the attacker has
    placed in the current input or elsewhere in memory.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`username`和`password`都分配了32个字节。在大多数情况下，程序应正常运行，并将用户提供的密码与存储的密码进行比较，因为用户名和密码通常不超过32个字符。然而，当输入的值超过32个字符时，额外的字符会开始覆盖堆栈上相邻变量的内存，如[图11-2](ch11.html#ch11fig2)所示。这意味着攻击者可以覆盖函数的返回地址，指定下一个要执行的是攻击者在当前输入或内存的其他地方放置的恶意代码块。'
- en: '![image](graphics/f11-02.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f11-02.jpg)'
- en: '*Figure 11-2: Memory layout before and after an overflow*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*图11-2：溢出前后的内存布局*'
- en: Since this example hardcodes a character limit and doesn’t check that the input
    is within the limit, attacker-controlled input can be longer than the receiving
    data structure allows. Data will overflow the bounds of that buffer and overwrite
    portions of memory that could allow for code execution.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个例子硬编码了字符限制，并且没有检查输入是否在限制范围内，攻击者控制的输入可能会比接收数据结构允许的长度还要长。数据会溢出缓冲区的边界，覆盖内存的部分内容，从而可能允许代码执行。
- en: '***Preventing Buffer Overflows***'
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***防止缓冲区溢出***'
- en: There are a few ways to prevent buffer overflows, and most of them are pretty
    simple.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以防止缓冲区溢出，而且大多数方法都相当简单。
- en: '**Checking Input Size Before Using It**'
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**在使用输入之前检查其大小**'
- en: 'The easiest fix is to sanity check any input before loading it into a data
    structure. For example, vulnerable programs like the one in [Listing 11-3](ch11.html#ch11ex3)
    often defend against buffer overflows by calculating the size of incoming data
    themselves, rather than trusting an externally supplied size to be the right length.
    This fix can be as simple as replacing the `strcpy` functions in [Listing 11-3](ch11.html#ch11ex3)
    with `if` statements like this one:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的解决方法是在将输入加载到数据结构之前进行合理性检查。例如，像[清单11-3](ch11.html#ch11ex3)中的脆弱程序通常通过自己计算传入数据的大小来防御缓冲区溢出，而不是信任外部提供的大小是正确的。这种修复可以像用`if`语句替换[清单11-3](ch11.html#ch11ex3)中的`strcpy`函数那样简单：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Checking the size of the provided password with `sizeof` should ensure that
    any data exceeding the size of the buffer is rejected. Ideally of course, you
    wouldn’t be using statically sized buffers at all—higher level classes like `NSString`
    or `std::string` and their associated methods should take care of these kinds
    of issues for you.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `sizeof` 检查提供的密码的大小应该确保任何超过缓冲区大小的数据被拒绝。理想情况下，当然你根本不应使用静态大小的缓冲区——像 `NSString`
    或 `std::string` 这样的高级类及其相关方法应该能为你处理这些问题。
- en: '**Using Safer String APIs**'
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**使用更安全的字符串 API**'
- en: 'Another coding best practice that can protect you from buffer overflows is
    avoiding “known bad” APIs, such as the `strcpy` and `strcat` families. These copy
    data into a destination buffer without checking whether the destination can actually
    handle that much data, which is why adding a size check was so important in the
    previous section. [Listing 11-3](ch11.html#ch11ex3) showed one bad use of `strcpy`;
    here’s an even simpler one:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种能够保护你免受缓冲区溢出的编码最佳实践是避免使用“已知不安全”的 API，例如 `strcpy` 和 `strcat` 系列。这些函数会将数据复制到目标缓冲区，而不检查目标是否能够处理如此多的数据，这也是上一节中为什么添加大小检查如此重要的原因。[示例
    11-3](ch11.html#ch11ex3) 展示了 `strcpy` 的一种错误用法；这里有一个更简单的例子：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this simple and obvious kind of buffer overflow vulnerability, the `buf`
    buffer is only 32 bytes long, and the argument `things` is copied into it. But
    this code never checks the size of the `things` buffer before attempting to copy
    it into `buf`. If any call this function passes in a buffer is larger than 32
    bytes, the result will be a buffer overflow.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种简单且明显的缓冲区溢出漏洞中，`buf` 缓冲区只有 32 字节长，而参数 `things` 被复制到其中。但这段代码在尝试将 `things`
    复制到 `buf` 之前并没有检查 `things` 缓冲区的大小。如果任何调用此函数的缓冲区大于 32 字节，结果将是缓冲区溢出。
- en: 'The safer way to copy and concatenate strings is to use the `strlcpy` and `strlcat`
    functions,^([4](footnote.html#fn103)) which take the size of the destination buffer
    as an argument, as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 更安全的字符串复制和拼接方式是使用 `strlcpy` 和 `strlcat` 函数，^([4](footnote.html#fn103)) 它们将目标缓冲区的大小作为参数，示例如下：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, the `strlcpy` function will copy only 31 bytes of the source string, plus
    a null terminator. This may result in the string being truncated, but at least
    it won’t overflow the statically sized buffer. The `strl` family is not available
    on all platforms but is available on BSD-based systems, including iOS.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`strlcpy` 函数只会复制源字符串中的 31 字节，加上一个空字符终止符。这样可能导致字符串被截断，但至少不会导致静态大小缓冲区溢出。`strl`
    系列并不是所有平台都支持，但在基于 BSD 的系统上可用，包括 iOS。
- en: In addition to these types of overflows, errors can also be made when performing
    integer operations, which can lead to a denial of service or code execution.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些类型的溢出，执行整数操作时也可能发生错误，这可能导致服务拒绝或代码执行。
- en: '**Integer Overflows and the Heap**'
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**整数溢出与堆**'
- en: '*Integer overflows* result from performing a calculation that gives a value
    larger than the maximum size of an integer on a platform. As you likely know,
    there are two types of integers in C (and therefore, in Objective-C): signed and
    unsigned. Signed integers can be positive or negative, and unsigned integers are
    always positive. If you attempt to perform a calculation that overflows the value
    of either type of integers, badness occurs. An unsigned integer will wrap around
    past the maximum value of an integer, starting over at zero. If the integer is
    signed, it will start at a negative number, the minimum value of an unsigned integer.
    Here’s an example:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*整数溢出* 是由执行一个计算，得到的值超出了平台上整数的最大值。当你了解 C 语言（因此也包括 Objective-C）时，你会知道有两种类型的整数：有符号整数和无符号整数。有符号整数可以是正数或负数，而无符号整数总是正数。如果你尝试执行一个超出任一类型整数值的计算，就会发生错误。无符号整数将会绕过整数的最大值，从零重新开始。如果整数是有符号的，它将从一个负数开始，这是无符号整数的最小值。以下是一个例子：'
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This starts with a signed integer `foo`, using the maximum size of a signed
    integer on iOS. When the number is incremented, the output on the console should
    wrap around to a negative number, `-9223372036854775808`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这从一个有符号整数 `foo` 开始，使用 iOS 上有符号整数的最大大小。当该数字递增时，控制台输出应会回绕到一个负数，`-9223372036854775808`。
- en: 'If you were to use an unsigned integer as shown in the following example, you’d
    see the integer overflow, and the output on the console would be `0`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你像下面的例子中那样使用无符号整数，你会看到整数溢出，控制台上的输出将是 `0`：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: While buffer overflows overwrite the stack, integer overflows give attackers
    access to the heap, and I’ll show you how that works next.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当缓冲区溢出会覆盖栈时，整数溢出则会让攻击者访问堆内存，我接下来会向你展示这一点是如何发生的。
- en: '***A malloc Integer Overflow***'
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***一个malloc整数溢出***'
- en: 'An integer overflow most often causes issues when it occurs while calculating
    the necessary space to pass to a `malloc()` call, making the space allocated far
    too small to contain the value to store. When data is loaded into the newly allocated
    space, the data that won’t fit is written beyond the end of the allocated space,
    into the heap. This puts you in a heap overflow situation: if the attacker provides
    maliciously crafted data to `malloc()` and overwrites the right pointer in the
    heap, code execution can occur.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 整数溢出通常会在计算传递给`malloc()`调用所需空间时发生，导致分配的空间远远不足以容纳要存储的值。当数据被加载到新分配的空间中时，无法容纳的数据将被写入分配空间的末尾，进入堆内存。这就会导致堆溢出：如果攻击者向`malloc()`提供恶意构造的数据并覆盖堆中的正确指针，代码执行就可能发生。
- en: 'Integer overflow vulnerabilities tend to take the following form:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 整数溢出漏洞通常呈现以下形式：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This code creates an object of type `Goat`, as well as the `ReadGoats` function,
    which accepts a socket and the number of goats to read from that socket. At ➊,
    the `ReadInt` function reads the number of goats that will be processed from the
    socket itself.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码创建了一个类型为`Goat`的对象，以及`ReadGoats`函数，该函数接受一个套接字和需要从该套接字读取的山羊数量。在➊处，`ReadInt`函数从套接字本身读取将要处理的山羊数量。
- en: If that number is sufficiently large, the `malloc()` operation at ➋ will result
    in a size so large that the integer wraps around to negative numbers. With the
    right value of `count`, an attacker could make the `malloc()` attempt to allocate
    zero bytes, or a very small number. When the loop at ➌ executes, it will read
    the number of goats from the socket that corresponds to the very large value of
    `count`. Because `goats` is small, this can overflow the allocated memory, allowing
    data to be written to the heap.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个数字足够大，在➋处的`malloc()`操作将导致一个非常大的大小，以至于整数会环绕到负数。当`count`的值合适时，攻击者可以使得`malloc()`尝试分配零字节或一个非常小的数值。当在➌处的循环执行时，它将从对应于非常大`count`值的套接字读取山羊的数量。由于`goats`很小，这可能会溢出分配的内存，允许数据写入堆内存。
- en: '***Preventing Integer Overflows***'
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***防止整数溢出***'
- en: 'There are several approaches to preventing integer overflows, but the basic
    idea is to check the values of integers before you operate on them. I suggest
    adopting the basic structure from Apple’s coding guide.^([5](footnote.html#fn104))
    Here’s one example:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 防止整数溢出的方式有几种，但基本的思路是在操作整数之前检查它们的值。我建议采纳苹果编程指南中的基本结构。^([5](footnote.html#fn104))
    这是一个例子：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Before calculating the value of `bytes`, this `if` statement checks that `n`
    and `m` are greater than 0 and divides one factor by a maximum size to make sure
    that the result is larger than the other factor. If both conditions are true,
    then you know that `bytes` will fit into an integer, and it should be safe to
    use it to allocate memory.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算`bytes`的值之前，这个`if`语句检查`n`和`m`是否大于0，并将其中一个因子除以最大值，以确保结果大于另一个因子。如果两个条件都成立，那么你就知道`bytes`能够适应一个整数，使用它来分配内存应该是安全的。
- en: '**Closing Thoughts**'
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结思考**'
- en: 'The list of C coding flaws in this chapter is far from exhaustive, but knowing
    some of these flaws should help you start spotting C-related issues in iOS applications.
    There are also many other resources that can help you hone your C security skills.
    If you’re interested in learning more about the intricacies of C and how it can
    go wrong, I recommend getting a copy of Peter van der Linden’s *Expert C Programming:
    Deep C Secrets* (Prentice Hall, 1994).'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '本章列出的C语言编码缺陷远不全面，但了解这些缺陷有助于你开始在iOS应用中识别与C相关的问题。还有很多其他资源可以帮助你提高C语言安全技能。如果你对深入了解C语言的复杂性以及可能出现的问题感兴趣，我建议你阅读Peter
    van der Linden的《*Expert C Programming: Deep C Secrets*》（Prentice Hall, 1994）。'
- en: 'Now that I’ve aired some of the dirty laundry of C, let’s head back to Cocoa
    land and look at modern attacks derived largely from the field of web application
    security: injection attacks.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我已经把C语言的一些“脏衣服”晾晒出来了，我们回到Cocoa领域，看看那些主要来源于Web应用安全领域的现代攻击：注入攻击。
