- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 8 EXECUTING COMPILED PROGRAMS
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8 执行编译程序
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: This chapter is ostensibly about a bat file executing or calling a program written
    and compiled in another language. In truth, the syntax to do that is pretty straightforward.
    The most interesting facet of this chapter is that sometimes the program being
    executed doesn’t have a defined path in the bat file. How does the bat file find
    the executable?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章名义上是关于一个 bat 文件执行或调用用其他语言编写并编译的程序。实际上，执行这些操作的语法非常简单。本章最有趣的部分是，有时候被执行的程序在 bat
    文件中并没有定义路径。那么，bat 文件是如何找到可执行文件的呢？
- en: The main focus of this chapter will be on two highly important mechanisms for
    finding such a program, the *current directory* and the path variable. This topic
    goes well past the executing of programs. You’ll use it when calling other bat
    files, and it impacts many other instances when a resource isn’t defined with
    a path. For instance, in [Chapter 7](chapter7.xhtml), I discussed many commands
    for copying, moving, deleting, and renaming files. All of those commands will
    work perfectly well in your bat files when the file or files in each command aren’t
    defined with a path in the bat file, but only if you understand these concepts.
    And of course, you’ll also learn different ways to invoke programs and pass them
    arguments.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要内容将集中在寻找此类程序的两个重要机制上：*当前目录* 和路径变量。这个话题不仅仅局限于执行程序。当你调用其他 bat 文件时，也会用到这些机制，而且它影响到很多其他资源未在
    bat 文件中定义路径时的情况。例如，在[第 7 章](chapter7.xhtml)中，我讨论了许多用于复制、移动、删除和重命名文件的命令。当这些命令中的文件或文件未在
    bat 文件中定义路径时，它们仍然能在你的 bat 文件中完美运行，只要你理解这些概念。当然，你还将学习不同的方式来调用程序并传递参数。
- en: Calling an Executable
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用可执行文件
- en: Often a bat file is little more than a vehicle or a wrapper for calling a compiled
    program, also known as an *executable*. The bat file will simply set some variables
    needed by the program, call the executable, and perform some error handling on
    the backend. More sophisticated bat files might call dozens of different programs,
    maybe even employing conditional logic on some calls. Simple or complex, a feature
    of Batch is the ability to call executables written in other languages.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: bat 文件通常仅仅是调用编译程序的载体或包装器，也就是所谓的 *可执行文件*。bat 文件会设置一些程序所需的变量，调用可执行文件，并在后台执行一些错误处理。更复杂的
    bat 文件可能会调用数十个不同的程序，甚至在某些调用上使用条件逻辑。无论简单还是复杂，Batch 的一个特点是能够调用用其他语言编写的可执行文件。
- en: 'The call command accepts the executable as its first, and possibly only, argument.
    The following command calls or executes the program *MyProg .exe* located in the
    *C:\Executables\* directory:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: call 命令接受可执行文件作为它的第一个参数，可能也是唯一的参数。以下命令调用或执行位于 *C:\Executables\* 目录下的程序 *MyProg.exe*：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The call command calls a program; that should surprise no one, but it’s about
    to get weird. This is the only command in Batch, and possibly all other languages,
    that works perfectly well when the command name itself is omitted. The following
    command, while not technically a call command, performs the same function as the
    call command in the prior example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: call 命令用于调用程序；这应该不会让人感到惊讶，但接下来要说的会有些奇怪。这是 Batch 中唯一一个，在命令名本身被省略时仍然能正常工作的命令，可能其他语言中也没有类似的情况。以下命令虽然在技术上不是
    call 命令，但它执行的功能与前面的例子中的 call 命令相同：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Think about this for a moment. The command set x=1 sets a variable, but the
    statement x=1 will do nothing more than confuse the interpreter. If the text robocopy
    is left off the beginning of a robocopy command, no one in their right mind would
    expect the remaining text to copy a file. (If this isn’t weird enough, the presence
    or lack of the call command gets a little weirder when calling other bat files
    in [Chapter 10](chapter10.xhtml).)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 想一想这个问题。命令 set x=1 设置了一个变量，但语句 x=1 只是让解释器感到困惑。如果 robocopy 命令前面没有 robocopy 这个文本，没有理智的人会期望剩下的文本能复制一个文件。（如果这还不够奇怪，调用其他
    bat 文件时，call 命令的有无会变得更加怪异，在[第 10 章](chapter10.xhtml)中有所讨论。）
- en: It almost seems like magic, but consider it from the interpreter’s perspective.
    When it interprets a new line, it usually expects the first item to be a command.
    When it finds set, it then anticipates a variable, an equal sign, and a value;
    when it finds robocopy, it next looks for a different set of arguments. When it
    finds something completely unexpected, the interpreter doesn’t balk; it gives
    you, the coder, the benefit of the doubt, assumes that whatever it is can be executed,
    and executes it—just as the call command would.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎看起来像魔法，但从解释器的角度来看。当它解释一行新代码时，通常期望第一项是一个命令。当它找到 set 时，它会预期一个变量、一个等号和一个值；当它找到
    robocopy 时，它接下来会寻找不同的参数。当它遇到完全出乎意料的东西时，解释器不会退缩；它会给你，程序员，一个怀疑的好处，假设无论它是什么，都可以执行，并执行它——就像
    call 命令那样。
- en: Some Batch coders use the call command for executables; some do not. I’m in
    the latter camp, preferring the clean look of the executable alone or just a resolved
    variable on a single line of code, but I’ve no qualms with those who explicitly
    spell out the command. More important, consistency is key; stick with your convention
    of choice.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一些批处理程序员使用 call 命令来执行可执行文件；有些则不使用。我属于后者，更喜欢程序仅由可执行文件本身或只是一个解决的变量在单行代码中呈现的干净样式，但对于那些明确拼写出命令的人，我没有异议。更重要的是，一致性是关键；坚持你选择的约定。
- en: 'I also prefer to keep the program name in a variable with a fully qualified
    path, setting it only when it isn’t already defined. This ensures that the desired
    program is stored in the variable by default, while also allowing others to set
    it to an alternate program for the sake of flexibility:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我还更倾向于将程序名保存在一个带有完整路径的变量中，只有在它尚未定义时才进行设置。这确保了所需的程序默认存储在变量中，同时也允许其他人将其设置为备用程序，以增加灵活性：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then when it comes time to execute the program, this simple command, if I can
    call it a command, will *call* the desired program:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当执行程序时，这个简单的命令，如果我可以称它为命令，将会*调用*期望的程序：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This variable contains the path of the executable, but let’s return to the concept
    of a line of code consisting of nothing more than a hardcoded path and filename.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个变量包含可执行文件的路径，但让我们回到一个仅由硬编码路径和文件名组成的代码行的概念。
- en: 'You can shorten it by removing the path, leaving just the name of the program
    and maybe the extension:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过移除路径，保留程序名和可能的扩展名来简化它：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This looks even simpler, but when you stop to ponder where on the machine or
    even on a network the interpreter is to find the program, the complexity grows.
    Before delving into those details, I’ll need a digression about two commands/variables.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来更简单，但当你停下来思考解释器该如何在机器或网络的某个位置找到程序时，复杂性就增加了。在深入这些细节之前，我需要稍微插开话题，讲讲两个命令/变量。
- en: The cd Command and Variable
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: cd 命令和变量
- en: The cd command is also a variable, a special variable that’s one of a few Batch
    pseudo-environment variables. In [Chapter 21](chapter21.xhtml), I’ll have much
    more to say about these variables. For now, just consider them to be variables
    originally set by the interpreter that have some unique features.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: cd 命令也是一个变量，是少数几个批处理伪环境变量之一。在[第 21 章](chapter21.xhtml)中，我将有更多内容讨论这些变量。目前，只需将它们视为解释器最初设置的变量，具有一些独特的特性。
- en: The variable stands for *current directory*. The command is a bit more ambiguous,
    as it can also mean *change directory* because it’s used to ... well, change the
    current directory.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个变量代表*当前目录*。该命令稍微有些模糊，因为它也可以表示*更改目录*，因为它被用来……嗯，改变当前目录。
- en: When you double-click or open a bat file, the current directory is the directory
    or folder where the bat file resides. If the same bat file is called from a different
    process, the current directory is inherited from that process. Simply calling
    a bat file or executable in a different directory doesn’t change the current directory,
    but the cd command does.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当你双击或打开一个 bat 文件时，当前目录就是 bat 文件所在的目录或文件夹。如果从另一个进程调用相同的 bat 文件，当前目录将从该进程继承。仅仅在不同目录中调用一个
    bat 文件或可执行文件并不会改变当前目录，但 cd 命令会。
- en: 'The first and last lines shown next use the cd variable to display the current
    directory. The meat of this sandwich is the cd command that adeptly changes the
    current directory to its argument, assuming the directory exists:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的第一行和最后一行使用 cd 变量来显示当前目录。中间部分是 cd 命令，巧妙地将当前目录更改为其参数，假设该目录存在：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If a bat file with these three lines resides in *C:\Batch\*, executing it displays
    both the original current directory and the newly assigned current directory to
    the console:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个包含这三行代码的 bat 文件位于 *C:\Batch\* 目录下，执行它会在控制台上显示原始当前目录和新分配的当前目录：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can also set the current directory relative to the existing current directory.
    A single dot represents its existing value, so this assigns the cd variable to
    a subdirectory:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以相对现有的当前目录设置当前目录。一个点表示现有的值，因此这将把 cd 变量分配到一个子目录：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Two dots represent the existing current directory’s parent, so the following
    moves the current directory up one level:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 两个点表示当前目录的父目录，因此以下命令会将当前目录上移一个级别：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: (The ..\.. argument finds the grandparent directory.)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: （..\.. 参数查找祖父目录。）
- en: 'You can even reassign the cd variable to a sibling directory by first going
    up one level with the two dots:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以通过先使用两个点“..”上移一个级别，再重新分配 cd 变量到同级目录：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: I’m hesitant to even mention this, but chdir is a Batch synonym for the cd command.
    That is, the command in the prior example is functionally equivalent to chdir
    ..\Sibling\. However, the cd variable has no synonym, so you can use either chdir
    or cd to change the current directory, but you need to use cd when resolving the
    current directory. I find it easiest to always use cd for both purposes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我甚至不愿提及这一点，但 chdir 是 cd 命令的批处理同义词。也就是说，前一个示例中的命令在功能上等同于 chdir ..\Sibling\。然而，cd
    变量没有同义词，所以你可以使用 chdir 或 cd 来更改当前目录，但在解析当前目录时，你需要使用 cd。我发现最简单的做法是始终使用 cd 来完成这两个目的。
- en: Before I get into the purpose of the current directory, I need to introduce
    another command that’s also a variable.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在讲解当前目录的用途之前，我需要介绍另一个命令，它也是一个变量。
- en: The path Command and Variable
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: path 命令和变量
- en: Much like cd, path also is both a command and a pseudo-environment variable.
    The variable is predefined on Windows machines with a semicolon-delimited list
    of directories needed by the computer, such as paths for Java and Windows executables.
    (To see the path variable currently set on any Windows machine, open a command
    prompt, and using what we learned in [Chapter 2](chapter2.xhtml) enter the command
    set path.)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 cd，path 也是一个命令和伪环境变量。该变量在 Windows 机器上预定义，包含一个以分号分隔的目录列表，这些目录对计算机是必需的，例如
    Java 和 Windows 可执行文件的路径。（要查看当前在 Windows 机器上设置的 path 变量，可以打开命令提示符，使用我们在[第 2 章](chapter2.xhtml)中学到的知识，输入命令
    set path。）
- en: 'Just as the cd command sets the current directory, the path command sets the
    path variable. In the following line of code, the existing value is being prepended
    and appended with two other directories; notice the semicolons inserted at the
    end of each additional directory as a delimiter:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 cd 命令设置当前目录一样，path 命令设置 path 变量。在以下代码行中，现有的值被两个其他目录添加到前后；请注意，在每个附加目录的末尾插入了分号作为分隔符：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can completely reassign the path variable—or even wipe it out entirely if
    the argument is solely a semicolon. The various directories in this variable exist
    for a purpose, probably allowing for some necessary processes to run. Be extremely
    cautious about changing the variable persistently on your machine, such as with
    the setx command, but the path command shown previously changes only the path
    for the execution of the bat file. At worst you might break your bat file, but
    you won’t break anything else on your computer. In the next section, I’ll explain
    why you might want to change the path variable.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以完全重新分配 path 变量——甚至可以完全清除它，如果参数仅是一个分号的话。此变量中的各个目录是有目的的，可能是为了允许某些必要的进程运行。对于在机器上持久更改该变量（例如使用
    setx 命令）要非常小心，但前面显示的 path 命令只会更改 bat 文件执行时的路径。最坏的情况是你可能会破坏 bat 文件，但不会破坏计算机上的其他任何内容。在下一节中，我将解释为什么你可能想要更改
    path 变量。
- en: WARNING
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '*The set command offers an alternative means of resetting both the cd and path
    variables, but out of consistency, I resist this method because some other pseudo-
    environment variables can’t or shouldn’t be reset with this command—and it requires
    a few more keystrokes.*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*set 命令提供了重置 cd 和 path 变量的另一种方法，但出于一致性考虑，我抵制这种方法，因为一些其他伪环境变量不能或不应该使用此命令重置——而且它需要更多的按键操作。*'
- en: Finding an Executable
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找可执行文件
- en: 'Let’s get back to executing a program simply by invoking nothing but its name
    and extension like so:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到通过仅调用程序的名称和扩展名来执行程序，如下所示：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Where does the interpreter find the executable? The first place it looks is
    in the current directory. If found there, that’s the file executed. Otherwise,
    the interpreter will look for it sequentially in each directory defined in the
    path variable and execute the first one it finds. If it can’t find an executable
    with this name in any of those directories, the interpreter does nothing more
    than set errorlevel to the value of 9009. (Oddly, the bad return code is 1 if
    the call command precedes the name of the executable.)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 解释器在哪里找到可执行文件？它首先会在当前目录查找。如果在那里找到了，它会执行那个文件。否则，解释器会按顺序在路径变量中定义的每个目录中查找，并执行第一个找到的可执行文件。如果在这些目录中找不到该文件，解释器只会将错误级别设置为9009的值。（奇怪的是，如果`call`命令出现在可执行文件名之前，错误代码是1。）
- en: Let’s execute the same line of code, assuming that *myProg.exe* lives in *C:\Executables\*.
    If this directory is the current directory, the program will be found and executed.
    Otherwise, if this directory is in the path variable, the program will likely
    be found and executed. This assumes that the program isn’t superseded with a different
    program of the same name and extension residing in the current directory or higher
    in the path variable hierarchy.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 假设*myProg.exe*位于*C:\Executables\*，我们执行相同的代码行。如果该目录是当前目录，程序将被找到并执行。否则，如果该目录在路径变量中，程序可能会被找到并执行。这假设程序没有被当前目录中或路径变量更高位置中的同名、同扩展名的其他程序所覆盖。
- en: 'If none of this is true, the program won’t be found, but there are different
    methods to make sure that the interpreter finds the executable. First, we can
    use the cd command to change the current directory prior to executing the program:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果以上都不成立，程序将无法找到，但有多种方法可以确保解释器找到可执行文件。首先，我们可以使用`cd`命令在执行程序之前更改当前目录：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Alternatively, we can alter the path variable to contain the directory in one
    of two ways. Here I’m prepending the path:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以通过两种方式来修改路径变量，使其包含目录。这里我是在路径前添加目录：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And here I’m appending the path:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我是在路径后追加目录：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If the directory is appended and if another file named *myProg.exe* exists in
    a directory defined earlier in the path variable, that other program will be the
    one executed. Prepending the directory ensures that my executable is picked up
    before any other, but this isn’t without its own dangers. It might be introducing
    something into the path variable that’ll override a resource used by some other
    process.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果目录被追加，并且路径变量中较早定义的目录中存在另一个名为*myProg.exe*的文件，那么将会执行那个程序。将目录添加到前面确保了我的可执行文件在任何其他文件之前被选中，但这也有一定的风险。它可能会将某些内容引入到路径变量中，覆盖其他进程使用的资源。
- en: This is in no way a bad technique; in fact, it’s quite useful when managed wisely.
    One great use of finding an executable using the current directory or path variable
    is to make the code portable. You can keep a bat file in a single folder or a
    more complex folder structure with other bat files, as well as any number of executables,
    configuration files, and other resources. You then can copy that folder to other
    machines and networks with different root directory structures. Since the current
    directory essentially follows the high-level bat file around, it’ll work in those
    various locations if the current directory is used to find its other components.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝不是一种不好的技巧；事实上，当合理管理时，它非常有用。使用当前目录或路径变量来查找可执行文件的一个很好的应用是使代码具有可移植性。你可以将一个批处理文件保存在单个文件夹中，或者一个更复杂的文件夹结构中，里面包含其他批处理文件、可执行文件、配置文件和其他资源。然后，你可以将这个文件夹复制到具有不同根目录结构的其他计算机和网络中。由于当前目录本质上跟随高层批处理文件，它会在这些不同的位置工作，只要使用当前目录来查找它的其他组件。
- en: You can house a default executable in the same folder as your bat file. If run
    on its own, it’ll use this executable. If called from another bat file with a
    different current directory, it may find a different program, allowing others
    to use your bat file to invoke their own executable. In short, you can create
    a hierarchy of same-named programs with different ones executed in different instances.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将默认可执行文件与批处理文件放在同一个文件夹中。如果单独运行，它将使用这个可执行文件。如果从另一个批处理文件调用，且当前目录不同，它可能会找到一个不同的程序，从而允许其他人使用你的批处理文件来调用他们自己的可执行文件。简而言之，你可以创建一组同名的程序，在不同的实例中执行不同的程序。
- en: 'To take this one step further, I hinted earlier that the extension isn’t even
    required to invoke a program. That is, if *myProg.exe* resides in the current
    directory, it’ll *probably* be invoked with this line of code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步说，我之前提到过，实际上甚至不需要扩展名就可以调用一个程序。也就是说，如果 *myProg.exe* 存在于当前目录，它*很可能*会通过以下代码行被调用：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The interpreter finds an executable given no extension with the aid of another
    pseudo-environment variable, pathext, which contains a hierarchy of semicolon-delimited
    extensions in much the same way that the path variable contains a hierarchy of
    directories. The interpreter still looks for the executable in the current directory,
    followed by the directories in the path variable, but in each folder, it now looks
    for the first executable it can find with the *myProg* filename and an extension
    listed in the given hierarchy.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 解释器通过另一个伪环境变量 `pathext` 来找到没有扩展名的可执行文件，`pathext` 包含一个由分号分隔的扩展名列表，类似于 `path`
    变量包含的目录层级。解释器仍然会在当前目录中查找可执行文件，然后是 `path` 变量中的各个目录，但在每个文件夹中，它现在会查找第一个可以找到的，文件名为
    *myProg* 且扩展名位于给定层级中的可执行文件。
- en: If the pathext variable hasn’t been altered by someone or something else, it
    will likely contain about a dozen file extensions, starting with.*com*, *.exe*,
    *.bat*, and *.cmd*—in that order. Thus, the only entity that would prevent the
    previous command from executing *myProg.exe* from the current directory would
    be *myProg.com* in the current directory. (If you ever have to reset this variable,
    use the set command. The pathext variable is only a variable, not a command.)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `pathext` 变量没有被其他人或其他程序修改，它通常包含大约十几种文件扩展名，按顺序包括：*.com*、*.exe*、*.bat* 和 *.cmd*。因此，唯一会阻止先前的命令在当前目录执行
    *myProg.exe* 的实体，就是当前目录中的 *myProg.com*。 （如果你需要重置这个变量，可以使用 `set` 命令。`pathext` 变量只是一个变量，而不是一个命令。）
- en: Pushing and Popping the Current Directory
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 推送和弹出当前目录
- en: The cd command does quite a nice job of changing the current directory, but
    the prior current directory is lost into the ether, never to be known again. Often
    that’s perfectly fine, but in other instances, you may want to change the current
    directory temporarily before reverting it to its prior state. Perhaps a utility
    bat file is written to be callable from many other bat files. In short order,
    I’ll discuss exactly how to call one bat file from another, but for now, we only
    need to understand the perspective of the called bat file.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`cd` 命令非常有效地更改当前目录，但先前的当前目录会消失在空中，再也无法找回。通常这完全没有问题，但在某些情况下，你可能希望在更改当前目录后暂时恢复原来的状态。也许有一个实用的批处理文件（bat
    文件）是为了被其他许多批处理文件调用而编写的。稍后我将详细讨论如何从另一个批处理文件调用一个批处理文件，但现在，我们只需要理解被调用的批处理文件的角度。'
- en: The called bat file may create or use resources in a certain folder, so changing
    the current directory at the bat file’s onset makes sense. However, when the called
    bat file completes and turns control back to the calling bat file, the prior current
    directory should be restored. It’s simple courtesy because the calling bat file
    may be working in a different directory and changing its current directory might
    very well cause it problems. A more self-serving motivation is that the called
    bat file wants to keep its directory to itself. If the called bat file doesn’t
    restore the current directory, the calling bat file might drop unwanted files
    in what’s now the current directory. The called bat file can hide its directory
    from the unwashed masses while also presenting itself as being courteous.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 被调用的批处理文件可能会在某个文件夹中创建或使用资源，因此在批处理文件开始时更改当前目录是有意义的。然而，当被调用的批处理文件完成并将控制权交还给调用它的批处理文件时，应该恢复先前的当前目录。这是基本的礼貌，因为调用的批处理文件可能正在不同的目录中工作，改变它的当前目录可能会给它带来问题。一个更自私的动机是，被调用的批处理文件可能希望保持它自己的目录。如果被调用的批处理文件不恢复当前目录，调用的批处理文件可能会在现在的当前目录中丢下不必要的文件。被调用的批处理文件可以在不让外部干扰的情况下保护它的目录，同时也表现得非常有礼貌。
- en: To solve this issue, you could store the prior current directory in a variable
    just before the cd command is executed, and then you could execute another cd
    command at the end of the bat file to set it back. But Batch provides two commands
    that together will do this far more elegantly, namely, the pushd and popd commands.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，你可以在执行 `cd` 命令之前将先前的当前目录存储在一个变量中，然后在批处理文件的末尾执行另一个 `cd` 命令来恢复它。但批处理提供了两个命令，结合使用可以更优雅地完成这个任务，它们就是
    `pushd` 和 `popd` 命令。
- en: 'The pushd command changes the current directory just like the cd command, but
    it also *pushes* the prior current directory onto a stack to be used later. It’s
    sometimes referred to as the *push directory* command, although for the sake of
    brevity it’s usually pronounced as it’s written, that is, the “push-d” command.
    Near the beginning of the bat file this command will succinctly perform both tasks:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: pushd 命令像 cd 命令一样改变当前目录，但它还会将先前的当前目录 *推送* 到堆栈中，供以后使用。有时它被称为 *推送目录* 命令，尽管为了简便，通常按字面发音，即“push-d”命令。在
    bat 文件的开头附近，此命令将简洁地执行这两个任务：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'At or near the close of the bat file, the following short command will remove
    *C:\NewDir\* as the current directory and retrieve or *pop* the prior current
    directory off the stack, using it to restore the current directory:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在 bat 文件的末尾或接近末尾的位置，以下简短的命令将删除 *C:\NewDir\* 作为当前目录，并从堆栈中获取或 *弹出* 之前的当前目录，用它来恢复当前目录：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is sometimes called the *pop directory* command, but more commonly, the
    “pop-d” command.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这有时被称为 *弹出目录* 命令，但更常见的是“pop-d”命令。
- en: Notice that there’s no argument; popd is the rare command that accepts no arguments
    at all, ever. As multiple pushd commands execute, each one pushes another prior
    current directory onto the stack, and each subsequent popd command will restore
    the one most recently added.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，没有参数；popd 是一个极少接受任何参数的命令。当多个 pushd 命令执行时，每个命令都会将另一个先前的当前目录推送到堆栈中，而每个随后的 popd
    命令都会恢复最近添加的目录。
- en: Also of note, if the argument passed to the pushd command is a network path,
    the highest unused drive letter is assigned to that path, and the popd command
    will unassign it. Lastly, the pushd command with no argument displays the full
    list of directories on the stack starting with the most recently added.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 另需注意的是，如果传递给 pushd 命令的参数是网络路径，则该路径会分配给最高的未使用驱动器字母，popd 命令将取消该分配。最后，未带参数的 pushd
    命令会显示堆栈中目录的完整列表，从最近添加的目录开始。
- en: WARNING
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '*It’s very important that pushd and popd commands be balanced. If a pushd assigns
    a network path, a corresponding popd should always execute, even if an error is
    handled. If not, any mapped drive letters will remain mapped, even after the bat
    file finishes up. If that happens often enough, the computer will run out of usable
    drive letters.*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*pushd 和 popd 命令必须平衡使用。 如果一个 pushd 分配了网络路径，则应始终执行相应的 popd，即使有错误被处理。如果没有，任何映射的驱动器字母将保持映射，即使
    bat 文件已经完成。如果这种情况发生得足够频繁，计算机会用完可用的驱动器字母。*'
- en: Finding Other Resources with the Current Directory
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用当前目录查找其他资源
- en: 'The current directory is used for far more than finding programs to execute.
    For any resource, such as a file, if the path isn’t defined, the current directory
    is assumed to be its path. For instance, in [Chapter 7](chapter7.xhtml), this
    command deleted an explicit file and everything ending in a particular extension:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当前目录用于的不仅仅是查找可执行程序。对于任何资源，例如文件，如果路径没有被定义，当前目录将被假定为其路径。例如，在[第7章](chapter7.xhtml)中，以下命令删除了一个显式文件和所有以特定扩展名结尾的文件：
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following command performs the same task with far fewer keystrokes *if*—the
    *if* being a critical qualifier—the current directory is *C:\Source\*, which is
    the path twice removed from the prior command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令在按下的键数更少的情况下完成相同的任务 *如果*——*if* 是一个关键限定词——当前目录是 *C:\Source\*，即前一个命令的路径移除两次：
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The same is true for the source argument of an xcopy command and any other command
    that accepts a path and filename as an argument. I usually prefer to use explicit
    paths to avoid any ambiguity, but this technique grants the same type of flexibility
    described throughout this chapter for a great number of commands. Flip through
    [Chapter 7](chapter7.xhtml) again, imagining all of the commands for copying,
    moving, and renaming files without explicit paths. They’d all be good commands
    if the interpreter finds the particular file or files in whatever happened to
    be the current directory at that time.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: xcopy 命令的源参数和任何其他接受路径和文件名作为参数的命令相同。我通常更倾向于使用显式路径，以避免任何歧义，但这种技巧赋予了本章中描述的同类型的灵活性，适用于大量命令。再翻阅一遍[第7章](chapter7.xhtml)，想象所有用于复制、移动和重命名文件的命令都没有显式路径。如果解释器能够在当时的当前目录中找到特定的文件或文件，它们都会是有效的命令。
- en: Passing Arguments to an Executable
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向可执行文件传递参数
- en: At the beginning of this chapter, I demonstrated how to call a compiled program.
    Before moving on, I have one last observation to share about this syntax.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章开始时，我演示了如何调用一个已编译的程序。在继续之前，我有一个关于这个语法的最后观察要分享。
- en: 'Executables often accept one to many parameters at execution time. Those parameters
    are passed to the program as arguments by simply listing them after the program.
    For readability, I’ve put the three arguments into variables:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 可执行文件通常在执行时接受一个或多个参数。这些参数通过简单地将它们列在程序后面作为参数传递给程序。为了便于阅读，我将这三个参数放入了变量中：
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The input file is the first argument passed to the program; in many languages,
    that would be considered args[0] inside the program. Likewise, the output file
    is the second argument, args[1], and the log is the third, args[2]. You can also
    use hardcoded values, and the arguments can be anything you like; they don’t have
    to be files.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 输入文件是传递给程序的第一个参数；在许多语言中，这通常被视为程序中的args[0]。同样，输出文件是第二个参数args[1]，日志是第三个参数args[2]。你也可以使用硬编码的值，参数可以是任何你想要的，它们不一定是文件。
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 摘要
- en: Executing a compiled program appears pretty basic at first. After all, you don’t
    even need a command. But you can’t truly understand how it works without knowing
    the details about the current directory and the path variable that I’ve detailed
    here. You’ve learned how the interpreter uses them to find executables, files,
    and any other resources, along with multiple means of managing the content of
    these important variables.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 执行已编译的程序一开始看起来非常基础。毕竟，你甚至不需要一个命令。但如果不了解当前目录和我在这里详细介绍的路径变量，你就无法真正理解它是如何工作的。你已经学会了解释器如何使用它们来查找可执行文件、文件和其他资源，以及管理这些重要变量内容的多种方法。
- en: Executing another bat file is similar to but not the same as executing a compiled
    program, and you’ll learn about those differences in [Chapter 10](chapter10.xhtml).
    But before I delve into that, you’ll learn about labels and their many important
    uses in the very next chapter, primarily their impact on when commands are executed
    and how often.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 执行另一个bat文件类似于但不完全相同于执行已编译的程序，你将在[第10章](chapter10.xhtml)中了解这些区别。但在我深入讨论之前，你将学习标签及其在下一章中的多种重要用途，主要是它们对命令执行时间和频率的影响。
