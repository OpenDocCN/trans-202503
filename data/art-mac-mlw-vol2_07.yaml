- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: PART II SYSTEM MONITORING
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分 系统监控
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: So far, I’ve covered programmatic methods of collecting data to generate snapshots
    of the system’s state, then analyzed these snapshots to uncover symptoms of malicious
    activity. This approach limits the analysis to single points in time, however.
    Simple antivirus programs often provide such a feature in a “scan now” option,
    which can be useful for determining whether the system has already been infected
    and for creating a baseline of a known good state. The obvious downside to this
    approach is that it’s reactive and, worse, could miss an infection altogether.
    For example, ransomware could infect a system and render it inoperable in the
    window of time between snapshots.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我已经介绍了收集数据以生成系统状态快照的编程方法，然后分析这些快照以发现恶意活动的症状。然而，这种方法将分析限制在单一的时间点。简单的防病毒程序通常提供这种功能，通过“立即扫描”选项来实现，这对于确定系统是否已经感染以及创建已知良好状态的基准非常有用。这种方法的明显缺点是它是反应式的，最糟糕的是，可能完全错过感染。例如，勒索病毒可能在两个快照之间的时间窗口内感染系统，并使其无法操作。
- en: The solution is to expand upon the methods presented in [Part I](part1.xhtml)
    to provide real-time monitoring capabilities. In [Part II](part2.xhtml), I’ll
    explain how to monitor the system log, as well as network, filesystem, and process
    events, in real time. In some cases, we’ll have to write code specific to the
    target of our monitoring; in other cases, Apple’s Endpoint Security framework
    can serve as the basis for a wide range of monitors capable of overseeing filesystem,
    process, and many other noteworthy events. To fully understand Endpoint Security’s
    capabilities, I’ll spend an entire chapter highlighting its advanced features,
    including authorization and muting. The most comprehensive malware detection solutions
    will include the approaches presented in [Part I](part1.xhtml) as well as the
    techniques I’ll cover in [Part II](part2.xhtml).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案是扩展[第一部分](part1.xhtml)中提出的方法，以提供实时监控功能。在[第二部分](part2.xhtml)中，我将解释如何实时监控系统日志、网络、文件系统和进程事件。在某些情况下，我们需要编写特定于监控目标的代码；而在其他情况下，Apple
    的端点安全框架可以作为监控的基础，支持文件系统、进程及其他许多重要事件的监控。为了全面理解端点安全的能力，我将花费一整章来重点介绍它的高级功能，包括授权和静音。最全面的恶意软件检测解决方案将包括[第一部分](part1.xhtml)中介绍的方法，以及[第二部分](part2.xhtml)中我将涵盖的技术。
- en: Also, the monitoring code can apply strategies covered in [Part I](part1.xhtml)
    for identifying anomalies. For example, the logic we wrote in [Chapter 2](chapter2.xhtml)
    to detect that a running process’s binary is packed can identify suspicious binaries
    in real time, such as when a process monitor intercepts a newly spawned process.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，监控代码可以应用[第一部分](part1.xhtml)中讲解的策略来识别异常。例如，我们在[第二章](chapter2.xhtml)中编写的逻辑，用于检测运行进程的二进制文件是否被打包，可以实时识别可疑的二进制文件，比如当进程监控器拦截到一个新启动的进程时。
