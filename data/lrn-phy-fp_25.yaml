- en: '22'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '22'
- en: COORDINATE SYSTEMS AND FIELDS
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 坐标系与场
- en: '![Image](Images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/common.jpg)'
- en: In this chapter we’ll begin exploring Faraday and Maxwell’s electromagnetic
    theory, which broke from Coulomb’s particle-based ideas by introducing the notion
    of a field. The Faraday-Maxwell theory is the best theory we have for explaining
    electrical, magnetic, and optical phenomena. As a field theory, the Faraday-Maxwell
    theory supported the locality ideas of relativity 40 years before Einstein wrote
    about it, served as an inspiration for other field theories like general relativity,
    and became the prototype for contemporary gauge field theories of particle physics.
    The field idea now plays an important role in many areas of physics, such as continuum
    mechanics, fluid dynamics, and quantum field theory. That a field is a function
    is one reason why functional programming serves physics so well.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始探索法拉第和麦克斯韦的电磁理论，该理论通过引入场的概念突破了库仑基于粒子的观点。法拉第-麦克斯韦理论是我们用来解释电学、磁学和光学现象的最佳理论。作为场理论，法拉第-麦克斯韦理论支持了相对论的局域性思想，早在爱因斯坦写出相对论之前的40年，就为其他场理论（如广义相对论）提供了灵感，并成为现代粒子物理学规范场理论的原型。如今，场的概念在物理学的许多领域中扮演着重要角色，例如连续介质力学、流体动力学和量子场论。场作为一个函数这一特性，是功能性编程在物理学中如此有效的原因之一。
- en: It is possible, and elegant, to give an exposition of electromagnetic theory
    in four-dimensional spacetime (and functional languages like Haskell are especially
    well suited to the task), but we’ll follow the more common practice of using three-dimensional
    notation since physical insight and geometric insight into four-dimensional relativistic
    spacetime language take some time to acquire. Accordingly, this chapter describes
    coordinate systems for three-dimensional space, defines a data type for position
    in three-dimensional space, and introduces the idea of a *field*, which is a function
    whose input is a position in three-dimensional space.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在四维时空中阐述电磁理论是可能的，并且是优雅的（像 Haskell 这样的函数式语言特别适合这个任务），但我们将遵循更常见的做法，使用三维表示法，因为对四维相对论时空语言的物理见解和几何见解需要一些时间才能掌握。因此，本章描述了三维空间的坐标系，定义了三维空间中位置的数据类型，并引入了*场*的概念，场是一个函数，其输入是三维空间中的位置。
- en: We’ll gain a bit of insight by looking first at polar coordinates, the most
    common coordinates for a two-dimensional plane after Cartesian. Then, we’ll look
    at cylindrical and spherical coordinates, the two most common coordinate systems
    for three-dimensional space after Cartesian coordinates. We’ll make a new data
    type for positions in three-dimensional space that accommodates Cartesian, cylindrical,
    and spherical coordinates as well as any other coordinate system we might want
    to use. We’ll introduce scalar and vector fields, and data types for them, so
    that we have the basic mathematical framework to talk about things like charge
    density (a scalar field) and electric field (a vector field).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过观察极坐标来获得一些见解，极坐标是二维平面中仅次于笛卡尔坐标的最常见坐标系。接着，我们将研究圆柱坐标和球坐标，这两种是三维空间中仅次于笛卡尔坐标的最常见坐标系。我们将为三维空间中的位置创建一种新的数据类型，该数据类型能够适应笛卡尔坐标、圆柱坐标、球坐标以及我们可能想使用的其他坐标系。我们将引入标量场和向量场及其数据类型，以便我们拥有基本的数学框架来讨论诸如电荷密度（标量场）和电场（向量场）之类的概念。
- en: Polar Coordinates
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 极坐标
- en: Polar coordinates are a way of assigning two numbers to each point in the plane
    so that one of the numbers is the distance from the origin to the point. Polar
    coordinates are a natural choice for situations with rotational symmetry about
    a point in the plane, although their use need not be confined to such situations.
    We’ll use the variables *s* and *ϕ* for polar coordinates. The names *s* and *ϕ*
    are from Griffiths’ electrodynamics text [**[19](bib.xhtml#bib19)**].
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 极坐标是一种将两个数字赋予平面上每个点的方式，其中一个数字是从原点到该点的距离。极坐标在平面上以某点为中心的旋转对称性情况下是一个自然的选择，尽管它们的使用不必仅限于这种情况。我们将使用变量
    *s* 和 *ϕ* 来表示极坐标。*s* 和 *ϕ* 这两个名称来自 Griffiths 的电动力学教材 [**[19](bib.xhtml#bib19)**]。
- en: 'The Cartesian coordinates *x* and *y* are related to the polar coordinates
    *s* and *ϕ* by the following equations:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 笛卡尔坐标 *x* 和 *y* 与极坐标 *s* 和 *ϕ* 通过以下方程相关：
- en: '*x* = *s* cos *ϕ*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*x* = *s* cos *ϕ*'
- en: '*y* = *s* sin *ϕ*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*y* = *s* sin *ϕ*'
- en: The coordinate *s* is the distance from the origin to a point in the plane,
    and the coordinate *ϕ* is the angle between the x-axis and a line joining the
    origin to a point (see [Figure 22-1](ch22.xhtml#ch22fig1)).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 坐标 *s* 是从原点到平面中某点的距离，坐标 *ϕ* 是 x 轴与从原点到某点的连线之间的角度（见 [图 22-1](ch22.xhtml#ch22fig1)）。
- en: '![Image](Images/423fig01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/423fig01.jpg)'
- en: '*Figure 22-1: Polar coordinates*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 22-1：极坐标*'
- en: 'In [Figure 22-1](ch22.xhtml#ch22fig1), we’ve also introduced polar coordinate
    unit vectors. The unit vector ![Image](Images/scap.jpg) points away from the origin.
    (This is a well-defined direction at every point in the plane except for the origin
    itself.) Equivalently, the unit vector ![Image](Images/scap.jpg) points in the
    direction for which *ϕ* stays constant and *s* increases. Analogously, the unit
    vector ![Image](Images/sdcap.jpg) points in the direction for which *s* stays
    constant and *ϕ* increases. We can write the polar coordinate unit vectors ![Image](Images/scap.jpg)
    and ![Image](Images/sdcap.jpg) in terms of the Cartesian coordinate unit vectors
    ![Image](Images/xcap.jpg) and ![Image](Images/ycap.jpg) as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [图 22-1](ch22.xhtml#ch22fig1) 中，我们还介绍了极坐标单位向量。单位向量 ![Image](Images/scap.jpg)
    指向远离原点的方向。（这是平面上除原点外每一点的明确方向。）等效地，单位向量 ![Image](Images/scap.jpg) 指向使得 *ϕ* 保持恒定并且
    *s* 增加的方向。类似地，单位向量 ![Image](Images/sdcap.jpg) 指向使得 *s* 保持恒定并且 *ϕ* 增加的方向。我们可以用笛卡尔坐标单位向量
    ![Image](Images/xcap.jpg) 和 ![Image](Images/ycap.jpg) 来表示极坐标单位向量 ![Image](Images/scap.jpg)
    和 ![Image](Images/sdcap.jpg)，如下所示：
- en: '![Image](Images/423equ01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/423equ01.jpg)'
- en: Unlike the Cartesian unit vectors ![Image](Images/xcap.jpg) and ![Image](Images/ycap.jpg),
    the polar unit vectors ![Image](Images/scap.jpg) and ![Image](Images/sdcap.jpg)
    point in different directions at different points in the plane. The picture on
    the right of [Figure 22-5](ch22.xhtml#ch22fig5) later in this chapter shows the
    unit vector ![Image](Images/sdcap.jpg) at different points in the xy-plane, and
    you can see how its direction changes.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 与笛卡尔单位向量 ![Image](Images/xcap.jpg) 和 ![Image](Images/ycap.jpg) 不同，极坐标单位向量 ![Image](Images/scap.jpg)
    和 ![Image](Images/sdcap.jpg) 在平面中不同点指向不同的方向。稍后本章的 [图 22-5](ch22.xhtml#ch22fig5)
    右侧的图片显示了单位向量 ![Image](Images/sdcap.jpg) 在 xy 平面上不同点的方向，你可以看到它的方向是如何变化的。
- en: The definition of polar coordinates in two dimensions makes it easy to define
    cylindrical coordinates in three dimensions, to which we now turn.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 二维极坐标的定义使得在三维中定义圆柱坐标变得简单，接下来我们将讨论这一内容。
- en: Cylindrical Coordinates
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 圆柱坐标
- en: 'Cylindrical coordinates are an extension of polar coordinates into three dimensions
    and are a natural choice of coordinates for situations with rotational and translational
    symmetry about some axis. We can use the cylindrical coordinates *s*, *ϕ*, and
    *z* to represent the location of a point in three-dimensional space, as shown
    in [Figure 22-2](ch22.xhtml#ch22fig2). The coordinate *s* is the distance from
    the z-axis to the point in space, the coordinate *ϕ* is the angle between the
    xz-plane and the plane containing the z-axis and the point, and the coordinate
    *z* means the same thing as in Cartesian coordinates: the distance from the xy-plane.
    Cylindrical coordinates are closely related to polar coordinates in that cylindrical
    coordinates describe the xy-plane in a polar fashion but continue to use the Cartesian
    z-coordinate.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 圆柱坐标是极坐标在三维空间中的扩展，是描述绕某轴旋转和移动对称性的自然坐标选择。我们可以使用圆柱坐标 *s*、*ϕ* 和 *z* 来表示三维空间中某点的位置，如
    [图 22-2](ch22.xhtml#ch22fig2) 所示。坐标 *s* 是从 z 轴到空间中点的距离，坐标 *ϕ* 是 xz 平面与包含 z 轴和该点的平面之间的角度，坐标
    *z* 和笛卡尔坐标中的含义相同：即距离 xy 平面的距离。圆柱坐标与极坐标密切相关，因为圆柱坐标以极坐标方式描述 xy 平面，但继续使用笛卡尔坐标的 z
    坐标。
- en: '![Image](Images/424fig01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/424fig01.jpg)'
- en: '*Figure 22-2: Cylindrical coordinates*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 22-2：圆柱坐标*'
- en: 'The Cartesian coordinates *x*, *y*, and *z* are related to the cylindrical
    coordinates *s*, *ϕ*, and *z* by the following equations:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 笛卡尔坐标 *x*、*y* 和 *z* 与圆柱坐标 *s*、*ϕ* 和 *z* 之间的关系如下方程所示：
- en: '![Image](Images/424equ01.jpg)![Image](Images/424equ02.jpg)![Image](Images/424equ03.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/424equ01.jpg)![Image](Images/424equ02.jpg)![Image](Images/424equ03.jpg)'
- en: Also shown in [Figure 22-2](ch22.xhtml#ch22fig2) are the cylindrical coordinate
    unit vectors. The unit vector ![Image](Images/scap.jpg) points away from the z-axis.
    (This is a well-defined direction at every point in space except for points on
    the z-axis.) Equivalently, the unit vector ![Image](Images/scap.jpg) points in
    the direction for which *ϕ* and *z* stay constant and *s* increases. The unit
    vector ![Image](Images/sdcap.jpg) points in the direction for which *s* and *z*
    stay constant and *ϕ* increases. Finally, the unit vector ![Image](Images/zcap.jpg)
    points in the direction for which *s* and *ϕ* stay constant and *z* increases.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 22-2](ch22.xhtml#ch22fig2) 中还展示了柱坐标单位向量。单位向量 ![Image](Images/scap.jpg) 指向远离
    z 轴的方向。（在空间中除了 z 轴上的点外，这在每个点上都是一个明确的方向。）等效地，单位向量 ![Image](Images/scap.jpg) 指向的是
    *ϕ* 和 *z* 保持不变，*s* 增加的方向。单位向量 ![Image](Images/sdcap.jpg) 指向的是 *s* 和 *z* 保持不变，*ϕ*
    增加的方向。最后，单位向量 ![Image](Images/zcap.jpg) 指向的是 *s* 和 *ϕ* 保持不变，*z* 增加的方向。'
- en: 'We can write the cylindrical coordinate unit vectors ![Image](Images/scap.jpg),
    ![Image](Images/sdcap.jpg), and ![Image](Images/zcap.jpg) in terms of the Cartesian
    coordinate unit vectors ![Image](Images/xcap.jpg), ![Image](Images/ycap.jpg),
    and ![Image](Images/zcap.jpg) as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将柱坐标单位向量 ![Image](Images/scap.jpg)、![Image](Images/sdcap.jpg) 和 ![Image](Images/zcap.jpg)
    用笛卡尔坐标单位向量 ![Image](Images/xcap.jpg)、![Image](Images/ycap.jpg) 和 ![Image](Images/zcap.jpg)
    来表示，如下所示：
- en: '![Image](Images/425equ01.jpg)![Image](Images/425equ02.jpg)![Image](Images/425equ03.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/425equ01.jpg)![Image](Images/425equ02.jpg)![Image](Images/425equ03.jpg)'
- en: Now that we’ve talked about the system of cylindrical coordinates and shown
    how it’s an alternative to Cartesian coordinates for describing points in three-dimensional
    space, let’s discuss one more three-dimensional coordinate system.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了柱坐标系统，并展示了它作为描述三维空间中点的笛卡尔坐标的替代方式，接下来我们将讨论另一个三维坐标系统。
- en: Spherical Coordinates
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 球坐标
- en: Spherical coordinates are a natural choice in situations with rotational symmetry
    about a point in space, but, like all of the three-dimensional coordinate systems
    described in this chapter, they are also a general system of coordinates capable
    of describing arbitrary positions in 3D space. We can use the spherical coordinates
    *r*, *θ*, and *ϕ* to represent the location of a point in space, as shown in [Figure
    22-3](ch22.xhtml#ch22fig3).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在具有关于空间中某一点的旋转对称性的情况下，球坐标是一个自然的选择。但像本章中描述的所有三维坐标系统一样，它们也是一个通用的坐标系统，能够描述三维空间中任意位置。我们可以使用球坐标
    *r*、*θ* 和 *ϕ* 来表示空间中某点的位置，如[图 22-3](ch22.xhtml#ch22fig3)所示。
- en: '![Image](Images/425fig01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/425fig01.jpg)'
- en: '*Figure 22-3: Spherical coordinates*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 22-3：球坐标*'
- en: The coordinate *r* is the distance from the origin to the point in space, the
    coordinate *θ* is the angle between the z-axis and a line from the origin to the
    point, and the coordinate *ϕ* is the angle between the xz-plane and the plane
    containing the z-axis and the point. (The coordinate *ϕ* has the same meaning
    in spherical coordinates that it has in cylindrical coordinates.)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 坐标 *r* 是从原点到空间中某点的距离，坐标 *θ* 是 z 轴与从原点到该点的连线之间的夹角，坐标 *ϕ* 是 xz 平面与包含 z 轴和该点的平面之间的夹角。（在球坐标中，坐标
    *ϕ* 的含义与在柱坐标中相同。）
- en: 'The Cartesian coordinates *x*, *y*, and *z* are related to the spherical coordinates
    *r*, *θ*, and *ϕ* by the following equations:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 笛卡尔坐标 *x*、*y* 和 *z* 与球坐标 *r*、*θ* 和 *ϕ* 之间的关系如下所示：
- en: '![Image](Images/426equ01.jpg)![Image](Images/426equ02.jpg)![Image](Images/426equ03.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/426equ01.jpg)![Image](Images/426equ02.jpg)![Image](Images/426equ03.jpg)'
- en: Also shown in [Figure 22-3](ch22.xhtml#ch22fig3) are the spherical coordinate
    unit vectors. The unit vector ![Image](Images/rcap.jpg) points away from the origin.
    (This is a well-defined direction at every point in space except for the origin
    itself.) Equivalently, the unit vector ![Image](Images/rcap.jpg) points in the
    direction for which *θ* and *ϕ* stay constant and *r* increases. The unit vector
    ![Image](Images/thcap.jpg) points in the direction for which *r* and *ϕ* stay
    constant and *θ* increases. Finally, the unit vector ![Image](Images/sdcap.jpg)
    points in the direction for which *r* and *θ* stay constant and *ϕ* increases.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图22-3](ch22.xhtml#ch22fig3)中，还展示了球坐标单位向量。单位向量![Image](Images/rcap.jpg)指向远离原点的方向。（这是空间中除了原点本身外，每个点的一个明确定义的方向。）等效地，单位向量![Image](Images/rcap.jpg)指向*θ*和*ϕ*保持不变而*r*增加的方向。单位向量![Image](Images/thcap.jpg)指向*r*和*ϕ*保持不变而*θ*增加的方向。最后，单位向量![Image](Images/sdcap.jpg)指向*r*和*θ*保持不变而*ϕ*增加的方向。
- en: 'To write ![Image](Images/rcap.jpg) in terms of the Cartesian unit vectors,
    we divide the position vector ![Image](Images/426equ04.jpg) by its magnitude ![Image](Images/426equ05.jpg).
    The expression for ![Image](Images/sdcap.jpg) is the same as it was for cylindrical
    coordinates. An expression for ![Image](Images/thcap.jpg) can be found from ![Image](Images/426equ09.jpg).
    We can write the spherical coordinate unit vectors ![Image](Images/rcap.jpg),
    ![Image](Images/thcap.jpg), and ![Image](Images/sdcap.jpg) in terms of the Cartesian
    coordinate unit vectors ![Image](Images/xcap.jpg), ![Image](Images/ycap.jpg),
    and ![Image](Images/zcap.jpg) as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要将![Image](Images/rcap.jpg)表示为笛卡尔单位向量，我们将位置向量![Image](Images/426equ04.jpg)除以它的大小![Image](Images/426equ05.jpg)。![Image](Images/sdcap.jpg)的表达式与圆柱坐标下的表达式相同。![Image](Images/thcap.jpg)的表达式可以通过![Image](Images/426equ09.jpg)得到。我们可以将球坐标单位向量![Image](Images/rcap.jpg)、![Image](Images/thcap.jpg)和![Image](Images/sdcap.jpg)表示为笛卡尔坐标单位向量![Image](Images/xcap.jpg)、![Image](Images/ycap.jpg)和![Image](Images/zcap.jpg)，表达式如下：
- en: '![Image](Images/426equ06.jpg)![Image](Images/426equ07.jpg)![Image](Images/426equ08.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/426equ06.jpg)![Image](Images/426equ07.jpg)![Image](Images/426equ08.jpg)'
- en: Now that we’ve completed our introduction to spherical coordinates, and to all
    of the coordinate systems we intend to use, our next mission is to define a new
    type for positions in three-dimensional space that will work well with all of
    our three-dimensional coordinate systems. However, before we do that, let’s lay
    down some introductory code for this chapter.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了对球坐标以及我们打算使用的所有坐标系统的介绍，接下来的任务是为三维空间中的位置定义一个新类型，它将与所有三维坐标系统兼容。然而，在此之前，我们先为本章编写一些引导代码。
- en: Introductory Code
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引入代码
- en: '[Listing 22-1](ch22.xhtml#ch22list1) shows the first lines of code for the
    `CoordinateSystems` module we’ll develop in this chapter.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 22-1](ch22.xhtml#ch22list1)展示了我们将在本章中开发的`CoordinateSystems`模块的第一行代码。'
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 22-1: Opening lines of code for the CoordinateSystems module*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 22-1: 坐标系统模块的开头代码行*'
- en: Here, we import functions and types that we’ve previously written from the `SimpleVec`,
    `Mechanics3D`, and `MOExamples` modules. We’ll use the `Vis` module for visualizing
    scalar and vector fields, and we’ll use the `V3` type from `SpatialMath` since
    it’s the native vector type for the `Vis` module. The `Diagrams` `.Prelude` and
    `Diagrams.Backend.Cairo` modules are part of the diagrams package, which we’ll
    use for vector field visualization. The appendix contains information on installing
    the diagrams package.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们导入了之前在`SimpleVec`、`Mechanics3D`和`MOExamples`模块中编写的函数和类型。我们将使用`Vis`模块来可视化标量场和向量场，并且由于`Vis`模块的本地向量类型是`V3`类型，所以我们将使用`SpatialMath`中的`V3`类型。`Diagrams`的`.Prelude`和`Diagrams.Backend.Cairo`模块是图表包的一部分，我们将使用它们来进行向量场的可视化。附录中包含了关于如何安装图表包的信息。
- en: A Type for Position
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 位置的类型
- en: We’d like to have a Haskell type to describe the position of a point in space.
    We’d also like to be able to specify points in three-dimensional space in Cartesian,
    cylindrical, or spherical coordinates, and to access previously defined positions
    in any of the coordinate systems, including a system different from the one used
    to define it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望有一个Haskell类型来描述空间中某一点的位置。我们还希望能够指定三维空间中的点，可以使用笛卡尔、圆柱或球坐标，并能访问以前在任何坐标系统中定义的位置，包括与定义该位置的坐标系统不同的系统。
- en: Defining the New Type
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义新类型
- en: How can we use Haskell to describe a point in space? We have three options.
    Option A is to use a triple `(R,R,R)` of Cartesian coordinates. This is fine for
    many purposes. It has the advantage of simplicity, but it has the disadvantage
    that we already know we’re interested in using cylindrical and spherical coordinates,
    which are also triples of numbers. This puts us in the dangerous position of mistaking
    a Cartesian (*x*,*y*,*z*) triple for a spherical (*r*,*θ*,*ϕ*) triple. The compiler
    can help us avoid this mistake, but only if we make intelligent use of the type
    system. Option A is workable but dangerous. We can make better use of the computer
    to help us avoid mistakes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何使用 Haskell 来描述空间中的一个点？我们有三种选择。选项 A 是使用一个笛卡尔坐标三元组 `(R,R,R)`。这对于许多目的来说是可行的。它的优点是简单，但缺点是我们已经知道，我们有兴趣使用圆柱坐标和球坐标，它们也是由三个数字组成的三元组。这使得我们容易误将笛卡尔坐标（*x*,*y*,*z*）三元组误认作球坐标（*r*,*θ*,*ϕ*）三元组。编译器可以帮助我们避免这个错误，但前提是我们能智能地利用类型系统。选项
    A 可行但有风险。我们可以更好地利用计算机来帮助我们避免错误。
- en: Option B is to use the `Vec` type for position, as we did in mechanics. The
    `Vec` type clearly has Cartesian components, so it’s harder to get confused compared
    with Option A. If we run into a triple `(R,R,R)` somewhere in code we’ve previously
    written, the type does not tell us whether it’s a Cartesian triple or a spherical
    triple. On the other hand, if we run into a `Vec`, we know it is a Cartesian triple
    under the hood. Option B is workable. One downside of Option B is that position
    is not really a vector because vectors are, by definition, things that can be
    added, and it doesn’t make sense to add positions. If we think of position as
    a vector, it is a vector from some fixed origin. But adding vectors means putting
    them tip-to-tail, and this isn’t really allowed for position “vectors” whose tails
    are fixed at the origin. The other disadvantage of using `Vec` for position (Option
    B) is that the Haskell type system cannot help us to distinguish position from
    any other `Vec` (such as velocity, acceleration, or momentum).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 选项 B 是使用 `Vec` 类型来表示位置，正如我们在力学中所做的那样。`Vec` 类型显然具有笛卡尔坐标分量，因此与选项 A 相比，它更难产生混淆。如果我们在以前编写的代码中遇到三元组
    `(R,R,R)`，该类型并未告诉我们它是笛卡尔坐标三元组还是球坐标三元组。另一方面，如果我们遇到一个 `Vec`，我们知道它在底层是一个笛卡尔坐标三元组。选项
    B 是可行的。选项 B 的一个缺点是，位置并不是真正的向量，因为向量根据定义是可以相加的，而位置不能进行相加。如果我们把位置当作向量来看，它就变成了一个从某个固定原点出发的向量。但加法运算是将向量首尾相接，而对于位置“向量”来说，它的尾部是固定在原点的，这种加法并不合适。使用
    `Vec` 来表示位置（选项 B）的另一个缺点是，Haskell 类型系统无法帮助我们区分位置和其他 `Vec`（如速度、加速度或动量）。
- en: Option C is to use Haskell’s facilities to make a brand-new data type ourselves,
    which can’t be confused with any other data type. This is not the simplest option,
    but it will give us the power of working with the three coordinate systems we’re
    interested in, and it will give us the advantage that the compiler will not allow
    us to confuse position with velocity. We’ll pursue Option C.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 选项 C 是使用 Haskell 的功能自己创建一个全新的数据类型，这样就不会与其他数据类型混淆。虽然这不是最简单的选项，但它将使我们能够处理我们感兴趣的三种坐标系，并且它的优势是编译器将不会允许我们将位置与速度混淆。我们将选择选项
    C。
- en: We’ll construct a new type in Haskell with the `data` keyword.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `data` 关键字在 Haskell 中构建一个新类型。
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `Position` that appears immediately to the right of the `data` keyword is
    the name we give to the new type. The `Cart` that appears to the right of the
    equal sign is the type’s one data constructor, so named to remind us that we are
    storing the position information in Cartesian coordinates, regardless of the coordinate
    system in which any particular `Position` is defined or used.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 紧跟在 `data` 关键字后面的 `Position` 是我们为新类型所取的名称。等号右边的 `Cart` 是该类型的唯一数据构造函数，它的命名是为了提醒我们无论某个特定的
    `Position` 是在哪个坐标系中定义或使用的，我们始终在笛卡尔坐标系中存储位置数据。
- en: With the new `Position` data type, we have a way to store three numbers that
    the compiler will not confuse with any other way of storing three numbers (like
    a `Vec`). But the real usefulness of `Position` is that we can now define three
    ways of *making* a `Position` (one for each coordinate system) and three ways
    of *using* a `Position` (again, one for each coordinate system).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新的 `Position` 数据类型，我们有一种方式来存储三个数字，编译器不会将其与任何其他存储三个数字的方式（如 `Vec`）混淆。但 `Position`
    的真正优势在于，我们现在可以定义三种方式来*创建*一个 `Position`（每个坐标系一种），以及三种方式来*使用*一个 `Position`（同样，每个坐标系一种）。
- en: Making a Position
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建一个 Position
- en: At the beginning of this chapter, we showed how Cartesian, cylindrical, and
    spherical coordinates can be used to describe a position in space. Each coordinate
    system uses three numbers to specify a position. A coordinate system is a function
    from three real numbers to space.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章开始时，我们展示了如何使用笛卡尔坐标、圆柱坐标和球面坐标来描述空间中的位置。每个坐标系统使用三个数字来指定一个位置。一个坐标系统是从三个实数到空间的函数。
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here are the definitions for the three coordinate systems. For Cartesian coordinates,
    we just stick the coordinates behind the data constructor Cart. For cylindrical
    coordinates (*s*,*ϕ*,*z*), we convert to Cartesian using Equations 22.1 and 22.2
    and then apply the Cart constructor to the Cartesian values. For spherical coordinates
    (*r*,*θ*,*ϕ*), we again apply the data constructor to the converted Cartesian
    values using Equations 22.7, 22.8, and 22.9.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是三种坐标系统的定义。对于笛卡尔坐标，我们只需将坐标附加到数据构造器`Cart`后面。对于圆柱坐标（*s*，*ϕ*，*z*），我们使用方程22.1和22.2将其转换为笛卡尔坐标，然后将笛卡尔坐标值传递给`Cart`构造器。对于球面坐标（*r*，*θ*，*ϕ*），我们同样使用方程22.7、22.8和22.9将其转换为笛卡尔坐标，然后应用数据构造器来转换后的笛卡尔值。
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The functions cartesian, cylindrical, and spherical are our three ways of making
    a `Position`. Before we turn to the three ways of using a `Position`, we’ll define
    three helper functions that are almost the same as cartesian, cylindrical, and
    spherical. These three functions have the shortened names cart, cyl, and sph,
    and the only difference is that they take their arguments in a curried style,
    one right after the other, rather than as a triple. They are convenient helping
    functions.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`笛卡尔坐标`、`圆柱坐标`和`球面坐标`是我们表示`位置`的三种方式。在讨论如何使用`位置`之前，我们将定义三个与笛卡尔坐标、圆柱坐标和球面坐标几乎相同的辅助函数。这三个函数分别叫做`cart`、`cyl`和`sph`，它们的唯一区别是，它们以柯里化的方式接收参数，一个接一个，而不是作为三元组。它们是非常方便的辅助函数。'
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The function `cart` is a helping function to take three numbers (*x*, *y*, *z*)
    and form the appropriate position using Cartesian coordinates. The definition
    of `cart` is given in point-free style, meaning we omitted the parameters because
    they are identical on both sides of the equation.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`cart`函数是一个辅助函数，它接收三个数字（*x*，*y*，*z*），并使用笛卡尔坐标形成适当的位置。`cart`的定义采用了点自由风格，这意味着我们省略了参数，因为它们在方程的两边是相同的。'
- en: The function `cyl` is a helping function to take three numbers (*s*, *ϕ*, *z*)
    and form the appropriate position using cylindrical coordinates. We just call
    the function `cylindrical` to do the real work. The function `sph` is a helping
    function to take three numbers (*r*, *θ*, *ϕ*) and form the appropriate position
    using spherical coordinates.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`cyl`函数是一个辅助函数，它接收三个数字（*s*，*ϕ*，*z*），并使用圆柱坐标形成适当的位置。我们只是调用`cylindrical`函数来执行实际的工作。`sph`函数是一个辅助函数，它接收三个数字（*r*，*θ*，*ϕ*），并使用球面坐标形成适当的位置。'
- en: Let’s use the `cart` function to define the `origin`, which is the position
    where all three Cartesian coordinates are 0.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`cart`函数来定义`origin`，即所有三个笛卡尔坐标都为0的位置。
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using a Position
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用位置
- en: 'We said earlier that we would like to be able to look at an existing `Position`
    in Cartesian, cylindrical, or spherical coordinates, regardless of the coordinate
    system used to define the position. The following three functions show how to
    *use* a position to obtain a triple in the desired coordinate system:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到过，我们希望能够查看一个现有的`位置`，无论它是通过何种坐标系统定义的，都能以笛卡尔坐标、圆柱坐标或球面坐标的形式展示。以下三个函数展示了如何*使用*一个位置来获得所需坐标系统下的三元组：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The mathematical content of these three functions is merely to convert Cartesian
    coordinates to any of the three systems. However, the worth of these functions
    lies in their type. They allow us to express a `Position` in any of the three
    coordinate systems, giving the numerical values of the coordinates so they can
    be used for something. The value of the `Position` data type is that it abstracts
    away from a specific coordinate system, allowing us to use any coordinate system
    without getting confused about what a set of three numbers might mean. In practice,
    then, we’ll keep our `Position`s for as long as we can, converting to a particular
    coordinate system only when we need access to particular coordinate values.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个函数的数学内容只是将笛卡尔坐标转换为三种坐标系中的任意一种。然而，这些函数的价值在于它们的类型。它们允许我们在任何坐标系统中表示一个`Position`，并给出坐标的数值，这样就可以用于其他操作。`Position`数据类型的价值在于它将特定坐标系抽象出来，使我们可以在不混淆三个数字可能意味着什么的情况下，使用任何坐标系。实际上，我们会尽可能保持我们的`Position`类型，只有在需要访问特定坐标值时才会转换到某个特定的坐标系。
- en: In physics language, both position and displacement have the dimension of length
    and the SI unit of meter. The next section endeavors to clarify the relationship
    between position and displacement.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在物理学中，位置和位移都具有长度的维度，且其国际单位制单位是米。下一节将努力阐明位置和位移之间的关系。
- en: Displacement
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 位移
- en: A *displacement* is a vector that points from a source position to a target
    position. We have argued earlier that position in physics in not really a vector.
    Physicists use the term *displacement* when they want to refer to a vector with
    the dimension of length.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*位移*是一个指向目标位置的向量，起点为源位置。我们之前已经讨论过，物理学中的位置并不是真正的向量。物理学家使用*位移*这个术语来指代具有长度维度的向量。'
- en: It is useful and natural to want a type `Displacement` for these vectors with
    the dimension of length. As usual, we have the choice of whether to make a brand-new
    type using the `data` keyword or to merely make a type synonym using the `type`
    keyword. The former option protects us from confusing displacement with any other
    vector, but at the cost of introducing a new data constructor, while the latter
    option is convenient but provides no such protection. We choose the latter option
    and make `Displacement` a type synonym for `Vec`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些具有长度维度的向量，想要定义一个类型`Displacement`是非常有用且自然的。像往常一样，我们可以选择使用`data`关键字创建一个全新的类型，或者仅使用`type`关键字创建一个类型别名。前者可以防止我们将位移与其他向量混淆，但代价是引入了一个新的数据构造器，而后者虽然方便，但没有提供这种保护。我们选择后者，将`Displacement`定义为`Vec`的类型别名。
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The displacement function allows us to “subtract” positions (recall we cannot
    add positions) to get a vector.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 位移函数允许我们“减去”位置（回想一下，我们不能相加位置）来得到一个向量。
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Since a displacement vector points from the source position to the target position,
    we subtract the Cartesian source coordinates from the target coordinates.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 由于位移向量是从源位置指向目标位置，因此我们通过将目标坐标减去源坐标来计算位移。
- en: The shiftPosition function allows us to add a displacement to a position to
    get a new position.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`shiftPosition`函数允许我们向一个位置添加一个位移，从而得到一个新位置。'
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We’ll use the `shiftPosition` function in the next chapter to define some geometric
    objects.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章中使用`shiftPosition`函数来定义一些几何对象。
- en: Having introduced coordinate systems, a type for position, and the distinction
    between position and displacement, we now turn to the last major idea of the chapter—that
    of a field.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍了坐标系、位置类型以及位置与位移的区别之后，我们现在转向本章的最后一个主要概念——场。
- en: The Scalar Field
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标量场
- en: Some physical quantities, like volume charge density and electric potential,
    are best described by giving a number for each point in space. These physical
    quantities are called *scalar fields*. The word *field* in physics means a function
    of physical space or spacetime; in other words, something that can take a different
    value at each point in space. (The word *field* in mathematics means something
    else.) A scalar field is a field in which the value assigned at each point in
    space is a scalar (that is, a number). Temperature is another example of a scalar
    field. The temperature in one place (Annville, Pennsylvania, for example) is usually
    different from the temperature at another place (Vero Beach, Florida, say).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一些物理量，如体积电荷密度和电势，最好通过为空间中的每个点赋一个数值来描述。这些物理量称为*标量场*。在物理学中，*场*指的是物理空间或时空的函数；换句话说，场是一个可以在空间中的每个点取不同值的东西。（在数学中，*场*的意思不同。）标量场是一个在空间中的每个点分配一个标量值（即一个数字）的场。温度是标量场的另一个例子。例如，安维尔（宾夕法尼亚州）和维罗海滩（佛罗里达州）的温度通常是不同的。
- en: Since a scalar field associates a number with each position in space, it makes
    sense to define a scalar field type to be a function from space to numbers.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于标量场将一个数值与空间中的每个位置关联，因此定义标量场类型为从空间到数字的函数是有意义的。
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When we’re using a coordinate system, we can define scalar fields for each of
    the coordinates. For example, we can have a scalar field that associates each
    position in space with the value of its x-coordinate.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用坐标系统时，可以为每个坐标定义标量场。例如，我们可以有一个标量场，将空间中的每个位置与其 x 坐标值关联起来。
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is the coordinate scalar field that is associated with the spherical coordinate
    *r*:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是与球坐标 *r* 关联的坐标标量场：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In [Chapter 9](ch09.xhtml), we defined functions that extract components from
    a triple:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 9 章](ch09.xhtml)，我们定义了从三元组中提取分量的函数：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We can use these functions to express the y-coordinate scalar field as the scalar
    field associated with the second Cartesian coordinate.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这些函数将 y 坐标标量场表示为与第二个笛卡尔坐标关联的标量场。
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We can define any of the coordinate scalar fields in this way.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过这种方式定义任何坐标标量场。
- en: '[Figure 22-4](ch22.xhtml#ch22fig4) shows a visualization of the scalar field
    `ySF` using a coordinate system in which *x* comes out of the page, *y* increases
    to the right, and *z* increases upward. Associated with each position in space
    is its y-value, so the numbers increase to the right but do not change moving
    upward or out of the page. Later in the chapter, we will show how to make scalar
    field visualizations like that in [Figure 22-4](ch22.xhtml#ch22fig4).'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 22-4](ch22.xhtml#ch22fig4)展示了标量场 `ySF` 的可视化，使用的是一个坐标系统，其中 *x* 从页面中指向外面，*y*
    向右增加，*z* 向上增加。与空间中的每个位置关联的是其 y 值，因此数字向右增加，但向上或向外移动时不会改变。在本章稍后，我们将展示如何制作像[图 22-4](ch22.xhtml#ch22fig4)那样的标量场可视化。'
- en: '![Image](Images/433fig01.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/433fig01.jpg)'
- en: '*Figure 22-4: A screenshot of the y-coordinate scalar field ySF produced with
    the program ySF3D. The mouse and keyboard can be used to zoom in or out and rotate
    the visualization, a standard feature of the Vis module.*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 22-4：使用程序 ySF3D 生成的 y 坐标标量场 ySF 的截图。鼠标和键盘可以用来放大或缩小以及旋转可视化，这是 Vis 模块的标准功能。*'
- en: Because charge density is a scalar field, the scalar field will play an important
    role in [Chapter 24](ch24.xhtml) when we define charge distributions.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 由于电荷密度是标量场，因此在[第 24 章](ch24.xhtml)定义电荷分布时，标量场将发挥重要作用。
- en: The second type of field used in physics, and possibly the more important, is
    the vector field, to which we turn next.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 物理学中使用的第二种场类型，可能更为重要的是向量场，接下来我们将讨论它。
- en: The Vector Field
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向量场
- en: A *vector field* associates a vector with each point in space.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*向量场*将一个向量与空间中的每个点关联起来。'
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In [Chapters 25](ch25.xhtml) and [27](ch27.xhtml), we’ll discuss electric fields
    and magnetic fields, respectively, which are vector fields.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 25 章](ch25.xhtml)和[第 27 章](ch27.xhtml)，我们将分别讨论电场和磁场，它们是向量场。
- en: When we’re using a coordinate system, we can define vector fields that come
    from coordinates. The unit vectors used with cylindrical and spherical coordinates,
    such as ![Image](Images/scap.jpg), ![Image](Images/sdcap.jpg), ![Image](Images/rcap.jpg),
    and ![Image](Images/thcap.jpg), are really *unit vector fields* because their
    directions change depending on their location in space.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用坐标系时，我们可以定义由坐标派生的向量场。与柱面和球坐标一起使用的单位向量，如![Image](Images/scap.jpg)、![Image](Images/sdcap.jpg)、![Image](Images/rcap.jpg)和![Image](Images/thcap.jpg)，实际上是*单位向量场*，因为它们的方向会根据空间中位置的不同而变化。
- en: The vector fields ![Image](Images/scap.jpg) and ![Image](Images/sdcap.jpg) are
    defined using Equations 22.4 and 22.5.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 向量场![Image](Images/scap.jpg)和![Image](Images/sdcap.jpg)是通过方程22.4和22.5定义的。
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[Figure 22-5](ch22.xhtml#ch22fig5) shows visualizations of the vector field
    `phiHat`. Associated with each position in space is a vector, whose tail is located
    at the point in space, and whose magnitude and direction show the value of the
    vector at that point. The picture on the left shows the vector field in three
    dimensions, where *x* comes out of the page, *y* increases to the right, and *z*
    increases upward. The z-axis is the central axis of symmetry for the `phiHat`
    vector field. The picture on the right shows the vector field in the xy-plane.
    Since `phiHat` is a unit vector field, all of the vectors in these pictures have
    the same length. The pictures make clear how the unit vector field ![Image](Images/sdcap.jpg)
    points in different directions at different points in space. Later in the chapter
    I will show how to produce visualizations like this.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[图22-5](ch22.xhtml#ch22fig5)展示了向量场`phiHat`的可视化。每个空间位置都与一个向量相关联，其尾部位于空间中的该点，且其大小和方向表示该点处向量的值。左侧的图片展示了三维中的向量场，其中*x*从页面向外，*y*向右增加，*z*向上增加。z轴是`phiHat`向量场的对称中心轴。右侧的图片展示了xy平面中的向量场。由于`phiHat`是一个单位向量场，所有这些图片中的向量长度相同。图片清晰地展示了单位向量场![Image](Images/sdcap.jpg)在空间中不同位置指向不同方向。稍后在本章中，我将展示如何生成像这样的可视化图像。'
- en: '![Image](Images/434fig01.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/434fig01.jpg)'
- en: '*Figure 22-5: Two ways of visualizing the vector field ![Image](Images/sdcap.jpg),
    or phiHat. The left shows a screenshot of the image produced by phiHat3D. The
    right shows an image in the xy-plane produced by phiHatPNG.*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*图22-5：可视化向量场![Image](Images/sdcap.jpg)或phiHat的两种方式。左侧是phiHat3D生成的图像截图，右侧是phiHatPNG生成的xy平面图像。*'
- en: 'Here are definitions for the unit vector fields ![Image](Images/rcap.jpg) and
    ![Image](Images/thcap.jpg), using Equations 22.10 and 22.11:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用方程22.10和22.11对单位向量场![Image](Images/rcap.jpg)和![Image](Images/thcap.jpg)的定义：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We regard ![Image](Images/icap.jpg), ![Image](Images/jcap.jpg), and ![Image](Images/kcap.jpg)
    as simple unit vectors (`Vec`s), but we define ![Image](Images/xcap.jpg), ![Image](Images/ycap.jpg),
    and ![Image](Images/zcap.jpg) as unit vector fields (`VectorField`s), analogous
    to ![Image](Images/scap.jpg), ![Image](Images/sdcap.jpg), ![Image](Images/rcap.jpg),
    and ![Image](Images/thcap.jpg).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将![Image](Images/icap.jpg)、![Image](Images/jcap.jpg)和![Image](Images/kcap.jpg)视为简单的单位向量（`Vec`），但我们将![Image](Images/xcap.jpg)、![Image](Images/ycap.jpg)和![Image](Images/zcap.jpg)定义为单位向量场（`VectorField`），它们类似于![Image](Images/scap.jpg)、![Image](Images/sdcap.jpg)、![Image](Images/rcap.jpg)和![Image](Images/thcap.jpg)。
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: One important vector field that is not a unit vector field is the vector field
    **r**, which associates each position with the displacement vector from the origin
    to that position. We’ll give the name `rVF` to this vector field.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的向量场不是单位向量场，它是向量场**r**，它将每个位置与从原点到该位置的位移向量相关联。我们将这个向量场命名为`rVF`。
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The function `displacement` takes a source `Position` and a target `Position`
    and returns the displacement vector from the source to the target. By omitting
    the target position in the definition, the function `rVF` takes a target position
    as input and produces a displacement vector as output, which is just the `VectorField`
    we want.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`displacement`接受一个源位置`Position`和一个目标位置`Position`，并返回从源位置到目标位置的位移向量。通过在定义中省略目标位置，函数`rVF`接受一个目标位置作为输入，并输出一个位移向量，这正是我们想要的`VectorField`。
- en: '[Figure 22-6](ch22.xhtml#ch22fig6) shows visualizations of the vector field
    `rVF`. Both pictures show the vector field in the xy-plane. The picture on the
    left places the tail of each vector at the position it is associated with, and
    it displays vectors with greater magnitude as arrows with longer length. The picture
    on the right places the center of each vector at the position it is associated
    with, and it displays vectors with greater magnitude as darker arrows.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[图22-6](ch22.xhtml#ch22fig6)展示了矢量场`rVF`的可视化。两张图都显示了在xy平面中的矢量场。左图将每个矢量的尾部放置在它所关联的位置，并且通过较长的箭头显示较大幅度的矢量。右图将每个矢量的中心放置在它所关联的位置，并通过较暗的箭头显示较大幅度的矢量。'
- en: '![Image](Images/436fig01.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/436fig01.jpg)'
- en: '*Figure 22-6: Two ways of visualizing the vector field **r**, or rVF, in the
    xy-plane. The left image is produced by rVFpng; the right image is produced by
    rVFGrad.*'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*图22-6：两种在xy平面中可视化矢量场**r**（或rVF）的方法。左图由rVFpng生成；右图由rVFGrad生成。*'
- en: Later in the chapter, we’ll introduce functions that produce pictures, like
    those in [Figure 22-6](ch22.xhtml#ch22fig6), when given a vector field as input;
    however, producing pictures is only one of several things we can do with vector
    fields. Vector fields admit two kinds of derivatives, called *divergence* and
    *curl*, that express how the vectors of a vector field change in space. There
    are several integrals of vector fields over lines, surfaces, and volumes that
    are used to extract information and assert relationships among physical quantities.
    It is useful in physics to think of the vector field as a single mathematical
    entity. One of the advantages of a functional language for physics is the ease
    with which a vector field can be handled and written about as a single entity.
    This book aspires to make vector fields more accessible by presenting functions
    that allow you to play with vector fields.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 本章后面，我们将介绍一些在给定矢量场作为输入时生成图像的函数，例如[图22-6](ch22.xhtml#ch22fig6)中的图像；然而，生成图像只是我们可以用矢量场做的几件事之一。矢量场具有两种导数，分别叫做*散度*和*旋度*，它们表示矢量场中矢量在空间中的变化情况。矢量场在曲线、表面和体积上的积分被用来提取信息并断言物理量之间的关系。在物理学中，将矢量场视为一个单一的数学实体是非常有用的。函数式语言在物理学中的一个优势就是，可以很容易地将矢量场作为单一实体进行处理和描述。本书旨在通过呈现一些函数，使得矢量场更加易于理解，并能让你与矢量场进行互动。
- en: Electric and magnetic fields are the most important vector fields in electromagnetic
    theory, although current density is also a vector field that appears in the famous
    Maxwell equations. We’ll discuss the electric field in [Chapter 25](ch25.xhtml),
    current density in [Chapter 26](ch26.xhtml), and the magnetic field in [Chapter
    27](ch27.xhtml).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 电场和磁场是电磁理论中最重要的矢量场，尽管电流密度也是在著名的麦克斯韦方程中出现的矢量场。我们将在[第25章](ch25.xhtml)讨论电场，在[第26章](ch26.xhtml)讨论电流密度，在[第27章](ch27.xhtml)讨论磁场。
- en: 'Scalar and vector fields can be added. The following are some functions to
    do that:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 标量场和矢量场可以相加。以下是一些实现这一操作的函数：
- en: '[PRE20]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We’ll use these functions in [Chapter 25](ch25.xhtml) to add electric potential
    and electric field produced by multiple sources. For now, let’s turn to the question
    of how to visualize scalar and vector fields.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第25章](ch25.xhtml)中使用这些函数来添加由多个源产生的电势和电场。现在，让我们来讨论如何可视化标量场和矢量场。
- en: Functions for Visualizing Scalar Fields
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可视化标量场的函数
- en: 'A scalar field associates a number with each point in space. There are lots
    of ways to visualize a scalar field. We’ll develop two: one using Vis and one
    using text.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 标量场将一个数值与空间中的每个点关联起来。标量场有许多可视化方式。我们将介绍两种：一种使用Vis，另一种使用文本。
- en: 3D Visualization
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 3D可视化
- en: One simple way to visualize a scalar field is to ask Vis to display numbers
    for the values of the scalar field at a list of positions. The function `sf3D`
    takes a list of positions and a scalar field as input and returns the action of
    displaying a 3D picture on the screen.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化标量场的一种简单方法是要求Vis在一系列位置上显示标量场的值。函数`sf3D`接受一个位置列表和一个标量场作为输入，并返回在屏幕上显示3D图像的操作。
- en: '[PRE21]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We name the incoming list of positions `ps` and the incoming scalar field `sf`.
    We use a list comprehension to make a list of pictures, one for each position
    `p` in `ps`. Each picture is a piece of text showing the value of the scalar field
    at that position. The value `sf p` is the `R` expressing the value of the scalar
    field `sf` at position `p`. The value `round $ sf p :: Int` is the `Int` obtained
    by rounding the scalar field value. We round so that the numbers take up only
    a small amount of space and don’t overlap each other in the final picture. The
    value `show (round $ sf p :: Int)` is the `String` we give to `Vis`’s constructor
    `V.Text3d` to be shown on the screen. The value `v3FromPos p` is the `V3` (Vis’s
    native vector type) giving the position where the text should be displayed. The
    definition of `v3FromPos` is similar to that of `v3FromVec` from [Chapter 16](ch16.xhtml).'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将传入的位置列表命名为`ps`，将传入的标量场命名为`sf`。我们使用列表推导来生成一系列图片，每个位置`p`对应一张图片。每张图片是显示该位置上标量场值的文本。值`sf
    p`表示在位置`p`处标量场`sf`的值`R`。值`round $ sf p :: Int`是将标量场值四舍五入后得到的`Int`。我们进行四舍五入，以便数字只占用较小的空间，并且在最终的图片中不会相互重叠。值`show
    (round $ sf p :: Int)`是我们传递给`Vis`的构造函数`V.Text3d`的`String`，该文本将显示在屏幕上。值`v3FromPos
    p`是`V3`（Vis的本地向量类型），表示文本应该显示的位置。`v3FromPos`的定义与[第16章](ch16.xhtml)中的`v3FromVec`类似。'
- en: '[PRE22]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `V.VisObjects` constructor sews the list of pictures together into a single
    picture, which we orient to use my favorite coordinate system with `orient` and
    display with the `V.display` function using a set of options called `whiteBackground`,
    which we’ll define next.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`V.VisObjects`构造函数将一系列图片组合成一幅图像，我们通过`orient`将其定向为我最喜欢的坐标系，并使用`V.display`函数显示，使用一组名为`whiteBackground`的选项，这些选项我们将在下面定义。'
- en: The option set `whiteBackground` differs from the option set `V.defaultOpts`
    only in that the background color has been set to white.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 选项集`whiteBackground`与`V.defaultOpts`的唯一区别在于背景颜色被设置为白色。
- en: '[PRE23]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This definition uses record syntax to specify that all fields of the `V.Options`
    data type should have the same values as those in `V.defaultOpts`, except for
    `V.optBackgroundColor`, which is set to white.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这个定义使用记录语法来指定`V.Options`数据类型的所有字段应该与`V.defaultOpts`中的值相同，除了`V.optBackgroundColor`，其值被设置为白色。
- en: If you find you’d like to control the camera position from code, you can add
    options to do that. For example, the option set `whiteBackground'` sets the viewpoint
    to be a distance of 40 Vis units from the center.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望从代码中控制相机位置，可以添加相关选项。例如，选项集`whiteBackground'`将视点设置为距离中心40个Vis单位的距离。
- en: '[PRE24]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here is an example of how to use this scalar field visualization function for
    the *y* scalar field `ySF`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何使用这个标量场可视化函数来处理*y*标量场`ySF`的示例：
- en: '[PRE25]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[Figure 22-4](ch22.xhtml#ch22fig4) from earlier in this chapter shows the resulting
    picture. Perhaps the most useful feature of a 3D scalar field visualization like
    that in [Figure 22-4](ch22.xhtml#ch22fig4) is that it helps us to develop a visual
    and geometric understanding of what a scalar field is by imagining a number at
    each point in space. Once we have this geometric idea under our belts, and we
    wish to look in detail at a specific scalar field, it’s often simpler and more
    convenient to use a 2D visualization, which we’ll describe next.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 22-4](ch22.xhtml#ch22fig4)显示了本章前面提到的结果图像。像[图 22-4](ch22.xhtml#ch22fig4)这样的三维标量场可视化最有用的特点，可能是它帮助我们通过在空间的每个点上想象一个数字，来发展对标量场的视觉和几何理解。一旦我们掌握了这个几何概念，并且希望详细查看一个特定的标量场，通常使用二维可视化会更简单、更方便，接下来我们将描述这种方法。'
- en: 2D Visualization
  id: totrans-140
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 二维可视化
- en: A 3D visualization of a scalar field can become unwieldy and hard to read, so
    it’s useful to have tools to view the scalar values on a 2D plane or surface.
    Our 2D visualization functions will allow the user to specify any plane or surface
    to focus on. We can do this by specifying how two numbers, representing horizontal
    and vertical position on the 2D visualization, map into three-dimensional space—in
    other words, by giving a function `(R,R) -> Position`. The functions that follow
    refer locally to this function as `toPos`. The function `sfTable` allows the user
    to visualize a scalar field by specifying a surface on which to view the values
    of the scalar field.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 标量场的三维可视化可能会变得笨重且难以阅读，因此有必要使用工具将标量值显示在二维平面或表面上。我们的二维可视化函数将允许用户指定任何平面或表面进行聚焦。我们可以通过指定两个数字，表示二维可视化中的水平和垂直位置，如何映射到三维空间，换句话说，就是通过提供一个函数`(R,R)
    -> Position`来做到这一点。接下来的函数局部将该函数称为`toPos`。函数`sfTable`允许用户通过指定一个表面来可视化标量场，从而在该表面上查看标量场的值。
- en: '[PRE26]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The first input to `sfTable`, locally called `toPos`, specifies the surface
    of interest. If we wanted to specify the xz-plane, for example, we’d send the
    function `\(x,z) -> cart x 0 z` in for `toPos`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`sfTable`的第一个输入，局部称为`toPos`，指定了感兴趣的表面。例如，如果我们想指定xz平面，我们可以将函数`\(x,z) -> cart
    x 0 z`作为`toPos`的输入。'
- en: The second and third inputs to `sfTable`, locally called `ss` and `ts`, give
    the horizontal and vertical two-dimensional coordinates at which scalar values
    will be displayed. For a visualization of the xz-plane, the horizontal values
    could be x-values and vertical values could be z-values. The fourth input is the
    scalar field to be visualized.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`sfTable`的第二和第三个输入，局部称为`ss`和`ts`，给出了标量值将显示的水平和垂直二维坐标。对于xz平面的可视化，水平值可以是x值，垂直值可以是z值。第四个输入是要可视化的标量场。'
- en: The function works by sampling and displaying the values of the scalar field
    at the given points. We use the function `toPos` to produce a `Position` from
    an `(s,t)` pair of horizontal and vertical two-dimensional coordinates. We then
    apply the scalar field `sf` to this position, which is rounded so as not to take
    up too much space on the screen. The list of vertical coordinates is reversed
    so that the vertical values start at the bottom of the table and proceed to the
    top. We use the `Table` data type from [Chapter 20](ch20.xhtml).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数通过在给定的点采样并显示标量场的值来工作。我们使用函数`toPos`从水平和垂直二维坐标的`(s,t)`对生成一个`Position`。然后，我们将标量场`sf`应用于此位置，并将其四舍五入，以避免在屏幕上占用过多空间。垂直坐标列表被反转，以便垂直值从表格底部开始，向上延伸。我们使用[第20章](ch20.xhtml)中的`Table`数据类型。
- en: 'Here is an example using `sfTable` to visualize the y-coordinate scalar field:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用`sfTable`可视化y坐标标量场的示例：
- en: '[PRE27]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We can use a 2D scalar field visualization to show the temperature in a room
    or the electric potential in a capacitor, for example.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用二维标量场可视化来显示房间中的温度或电容器中的电势，例如。
- en: Functions for Visualizing Vector Fields
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可视化向量场的函数
- en: 'A vector field associates a vector with each position in space. In this section,
    we’ll write three functions for visualizing a vector field: `vf3D`, `vfPNG`, and
    `vfGrad`.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 向量场将一个向量与空间中的每个位置关联起来。在本节中，我们将编写三个用于可视化向量场的函数：`vf3D`、`vfPNG` 和 `vfGrad`。
- en: These functions essentially have type `VectorField -> IO ()`, meaning they take
    a vector field as input and do something, either displaying a picture on the screen
    or producing a graphics file on the hard drive.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数本质上具有类型`VectorField -> IO ()`，意味着它们接受一个向量场作为输入并执行某些操作，无论是显示一张图像在屏幕上，还是在硬盘上生成一个图形文件。
- en: 3D Visualization
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 3D可视化
- en: The `Vis` module can produce a 3D visualization of a vector field. The basic
    idea is to choose a list of positions at which vectors will be displayed. We use
    the vector field to compute the vector at each listed position and then display
    that vector with its tail at that position. The vector field will often have units
    that are different from the units of position (meters), so we need a scale factor
    to specify the number of vector field units that should be displayed per meter
    of space. Here is the code for the function `vf3D` that does this.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`Vis`模块可以生成一个向量场的三维可视化。基本思路是选择一个位置列表，在这些位置显示向量。我们使用向量场计算每个列出位置的向量，然后在该位置显示该向量及其尾部。向量场的单位通常与位置的单位（米）不同，因此我们需要一个缩放因子来指定每米空间应显示的向量场单位数。以下是实现此功能的`vf3D`函数代码。'
- en: '[PRE28]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The function `vf3D` takes a scale factor, a list of positions, and a vector
    field as input, and it produces a picture on the screen that can be enlarged and
    rotated with the mouse. As in `sf3D`, this function uses a list comprehension
    to make a list of pictures, one for each position `p` in `ps`. Each picture is
    a black arrow, produced by the `visVec` function defined below, representing the
    vector at position `p`, appropriately scaled and translated to the correct location.
    The `V.VisObjects` constructor sews the list of pictures together into a single
    picture, which is oriented to use my favorite coordinate system with `orient`
    and displayed with the `V.display` function using the option set `whiteBackground`,
    defined earlier in the chapter.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`vf3D`接受一个缩放因子、一组位置和一个向量场作为输入，并生成一个可在屏幕上放大和旋转的图像。如同`sf3D`一样，该函数使用列表推导式生成一个图片列表，每个位置`p`对应一个图片。每个图片都是一个黑色箭头，由下文定义的`visVec`函数生成，表示位置`p`处的向量，适当地缩放并平移到正确的位置。`V.VisObjects`构造函数将这些图片组合成一幅单一的图像，并使用`orient`将其朝向调整为我最喜欢的坐标系，最后使用本章早些时候定义的`whiteBackground`选项，通过`V.display`函数显示出来。
- en: 'The `visVec` function takes a color and a vector as input and produces a picture
    of an arrow as output. Here is the code:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`visVec`函数接受一个颜色和一个向量作为输入，并生成一个箭头的图片作为输出。以下是代码：'
- en: '[PRE29]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This function uses `Vis`’s `V.Arrow` constructor to make a picture of a vector.
    The first argument to `V.Arrow` is a pair of numbers. The first number is the
    requested length of the arrow, for which we choose `vmag`, the magnitude of the
    input vector. The second number is an aspect ratio for the desired ratio of arrow
    length to arrow shaft diameter. I chose `20*vmag` because I want the arrows to
    have a uniform shaft diameter. The shaft diameter is the arrow length `vmag` divided
    by the aspect ratio `20*vmag`, which is 1/20, independent of the arrow length.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数使用`Vis`的`V.Arrow`构造函数来生成一个向量的图片。`V.Arrow`的第一个参数是一个数字对。第一个数字是请求的箭头长度，我们选择`vmag`，即输入向量的大小。第二个数字是箭头长度与箭杆直径的纵横比。我选择了`20*vmag`，因为我希望箭头具有统一的箭杆直径。箭杆直径是箭头长度`vmag`除以纵横比`20*vmag`，其值为1/20，与箭头长度无关。
- en: The second argument to `V.Arrow` is a vector in `Vis`’s native `V3` type, which
    specifies the direction of the arrow. We send `v3FromVec v`, our input vector
    converted to type `V3`. The third and final argument to `V.Arrow` is a color,
    and we simply pass on the input color `visVec` is given.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`V.Arrow`的第二个参数是`Vis`的原生`V3`类型中的一个向量，用来指定箭头的方向。我们传递`v3FromVec v`，即将输入向量转换为`V3`类型。`V.Arrow`的第三个也是最后一个参数是颜色，我们直接传递给`visVec`的输入颜色。'
- en: 'The following program uses the `vf3D` function to produce a visualization of
    the ![Image](Images/sdcap.jpg) unit vector field, defined as `phiHat` earlier
    in the chapter:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序使用`vf3D`函数生成一个单位向量场的可视化图，该单位向量场在本章早些时候已定义为`phiHat`：
- en: '[PRE30]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The left side of [Figure 22-5](ch22.xhtml#ch22fig5) from earlier in the chapter
    shows a screenshot of the image `phiHat3D` produces. The image on the screen is
    interactive and can be rotated and zoomed with the mouse.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 本章前面的[图 22-5](ch22.xhtml#ch22fig5)的左侧显示了`phiHat3D`生成的图像截图。屏幕上的图像是交互式的，可以用鼠标旋转和缩放。
- en: Sometimes a 3D visualization of a vector field can appear cluttered, so we want
    tools to show a slice of a vector field in two dimensions. The right side of [Figure
    22-5](ch22.xhtml#ch22fig5) shows such a 2D visualization, and we’ll turn next
    to how to make this kind of picture.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，向量场的三维可视化可能显得杂乱无章，因此我们需要工具来显示向量场的二维切片。右侧的[图 22-5](ch22.xhtml#ch22fig5)展示了这样的二维可视化，接下来我们将介绍如何制作这种图像。
- en: 2D Visualization
  id: totrans-164
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2D 可视化
- en: How can we hope to visualize a 3D vector field in two dimensions? In general,
    we can’t. Even if we limit our attention to a plane in three-dimensional space,
    say the xy-plane, the vectors could have a z-component so that they can’t be represented
    in the xy-plane. Nevertheless, there are enough examples of vector fields that
    have planes in which the vectors point *in the plane* that 2D visualization is
    a worthwhile endeavor.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们怎么能期望在二维中可视化三维向量场呢？一般来说，我们做不到。即使我们将注意力限制在三维空间的一个平面上，比如xy平面，向量仍然可能有z分量，导致它们无法在xy平面上表示。然而，向量场中有足够多的例子，在某些平面中，向量指向*平面内*，因此二维可视化仍然是值得尝试的。
- en: As with 2D scalar field visualization, the function we write will take an argument,
    locally called `toPos`, with type `(R,R) -> Position`, that maps the two-dimensional
    coordinates we supply to 3D `Position`s. After we gather a collection of vectors
    at positions in the plane, we need a second function to specify how these 3D vectors
    are to be regarded as 2D vectors in the plane. We can do this with a function
    `Vec -> (R,R)` that we will name with the local variable `fromVec`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 与2D标量场可视化类似，我们编写的函数将接受一个名为`toPos`的参数，类型为`(R,R) -> Position`，它将我们提供的二维坐标映射到3D
    `Position`。在我们收集了平面位置的向量之后，我们需要第二个函数来指定如何将这些3D向量视为平面中的2D向量。我们可以使用一个`Vec -> (R,R)`的函数，我们将其命名为本地变量`fromVec`。
- en: We could use gloss for our 2D vector field visualization, but because we may
    want a platform for the asynchronous animation we first explored in [Chapter 20](ch20.xhtml),
    we’ll instead pursue a graphics library called diagrams that produces PNG files
    that could be sewn together into an asynchronous animation. The function `vfPNG`
    we are about to write takes a `VectorField` as input, along with some other parameters,
    and produces a PNG file.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本可以使用gloss进行2D向量场可视化，但由于我们可能希望有一个用于异步动画的平台（这是我们在[第20章](ch20.xhtml)中首次探讨的内容），我们将改为使用一个名为diagrams的图形库，该库生成PNG文件，这些文件可以拼接成异步动画。我们即将编写的`vfPNG`函数接受`VectorField`作为输入，以及一些其他参数，并生成一个PNG文件。
- en: '[PRE31]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The function takes five items as input before the vector field we want to display.
    The first two items are the functions, locally named `toPos` and `fromVec`, that
    manage the connection between 2D and 3D vector fields. The third item is a filename
    for the PNG file. The fourth is a scale factor, in (vector field) units per meter,
    to control the length of displayed vectors. The fifth item is a list of 2D points
    at which we want vectors displayed. Finally, the sixth item is the vector field
    itself.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接受五个项目作为输入，然后是我们希望显示的向量场。前两个项目是分别名为`toPos`和`fromVec`的函数，它们管理2D和3D向量场之间的连接。第三个项目是PNG文件的文件名。第四个是一个比例因子，单位为（向量场）每米的单位，用于控制显示向量的长度。第五个项目是我们希望显示向量的2D点列表。最后，第六个项目是向量场本身。
- en: The local function `vf2d` is a composition of five functions. It takes a 2D
    point as input and produces a 2D vector as output, with a type that diagrams likes
    for the positioning of arrows. Starting with a 2D position `(R,R)`, the function
    `vf2d` begins by applying `toPos`, the function the user of `vfPNG` provided to
    transform a 2D position into a `Position`. The vector field `vf` is then applied
    to produce a `Vec`. This vector is scaled by the scale factor `unitsPerMeter`,
    after which the function `fromVec` transforms the `Vec` into a pair of real numbers
    representing a 2D vector. Finally, diagrams’s function `r2` transforms a pair
    of real numbers `(R,R)` into diagrams’s 2D vector type.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 本地函数`vf2d`是五个函数的组合。它接受一个2D点作为输入，并生成一个2D向量作为输出，其类型是图形所需的用于定位箭头的类型。从2D位置`(R,R)`开始，函数`vf2d`首先应用`toPos`，这是`vfPNG`的用户提供的函数，用于将2D位置转换为`Position`。然后应用向量场`vf`以生成一个`Vec`。此向量会被比例因子`unitsPerMeter`缩放，接着函数`fromVec`将`Vec`转换为表示2D向量的一对实数。最后，图形的`r2`函数将一对实数`(R,R)`转换为图形的2D向量类型。
- en: The local variable `pic` is for the picture to be displayed, which is made by
    combining a list of arrow pictures formed with a list comprehension. Each arrow
    picture is made with diagrams’s `arrowAt` function, which places the tail of the
    2D vector in its second argument at the 2D position in its first argument. The
    diagrams package makes a distinction between a 2D position, formed from a pair
    of numbers with its `p2` function, and a 2D vector, formed from a pair of numbers
    with its `r2` function.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 本地变量`pic`用于显示图片，该图片是通过结合一个箭头图片列表形成的，该列表是通过列表推导式生成的。每个箭头图片是通过图形的`arrowAt`函数制作的，该函数将2D向量的尾部放置在其第二个参数中的位置，在第一个参数中给定的2D位置处。图形包区分了2D位置，该位置由一对数字及其`p2`函数形成，以及2D向量，该向量由一对数字及其`r2`函数形成。
- en: The last line in `vfPNG` produces the PNG file with diagrams’s `renderCairo`
    function, which takes a filename, a pixel size, and a picture as input.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`vfPNG`中的最后一行通过图形的`renderCairo`函数生成PNG文件，该函数接受文件名、像素大小和图片作为输入。'
- en: 'If the xy-plane happens to be our plane of interest, we can write a helping
    function by supplying `vfPNG` with its first two arguments. The function `vfPNGxy`
    has these first two arguments supplied:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果xy平面恰好是我们感兴趣的平面，我们可以通过提供`vfPNG`的前两个参数来编写一个辅助函数。函数`vfPNGxy`会提供这两个参数：
- en: '[PRE32]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The function that `vfPNG` locally calls `toPos` is specified here as the function
    that maps the pair `(x,y)` into the xy-plane. The function that `vfPNG` locally
    calls `fromVec` projects the 3D vector into the xy-plane.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`vfPNG`函数本地调用的`toPos`函数在此处被指定为将 `(x, y)` 对映射到xy平面的函数。`vfPNG`函数本地调用的`fromVec`函数则将3D向量投影到xy平面。'
- en: 'The following program produces a PNG file for the vector field ![Image](Images/sdcap.jpg),
    or `phiHat`, the unit vector field in cylindrical and spherical coordinates corresponding
    to the coordinate *ϕ*:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序生成一个PNG文件，表示向量场 ![Image](Images/sdcap.jpg)，或称为`phiHat`，这是一个在柱面坐标和球面坐标中与坐标*ϕ*对应的单位向量场：
- en: '[PRE33]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The right side of [Figure 22-5](ch22.xhtml#ch22fig5) earlier in the chapter
    shows the vector field ![Image](Images/sdcap.jpg) produced by `phiHatPNG`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 本章前面[图22-5](ch22.xhtml#ch22fig5)右侧展示了由`phiHatPNG`生成的向量场 ![Image](Images/sdcap.jpg)。
- en: 'Here is code to produce a PNG picture of the vector field `rVF` introduced
    earlier in the chapter:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是生成本章前面介绍的向量场`rVF`的PNG图像的代码：
- en: '[PRE34]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The left side of [Figure 22-6](ch22.xhtml#ch22fig6) earlier in the chapter shows
    the resulting picture.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 本章前面[图22-6](ch22.xhtml#ch22fig6)左侧展示了结果图像。
- en: Physicists use the notation **r** in at least three ways. It can stand for a
    single position vector, which we would call a `Vec`. It can stand for a position
    function, like what we worked with in [Part II](part02.xhtml), returning a position
    when given a time. In [Part II](part02.xhtml), this position function would have
    type `R -> Vec` because position was regarded as a vector back then. Now that
    we have a data type for position, such a function has type `R -> Position`. A
    third use of the symbol **r** is for the vector field we just introduced. This
    has type `VectorField`, which is a type synonym for `Position -> Vec`. The type
    system helps clarify that these three uses of the symbol **r** are distinct.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 物理学家至少使用符号**r**三种方式。它可以表示一个单一的位移向量，我们称之为`Vec`。它还可以表示一个位置函数，就像我们在[第二部分](part02.xhtml)中处理的那样，给定时间后返回一个位置。在[第二部分](part02.xhtml)中，这个位置函数的类型是`R
    -> Vec`，因为当时位置被看作是一个向量。现在我们有了位置的数据类型，因此这样的函数的类型是`R -> Position`。符号**r**的第三种用法是我们刚刚介绍的向量场。这具有类型`VectorField`，它是`Position
    -> Vec`的类型同义词。类型系统有助于澄清符号**r**的这三种用法是不同的。
- en: Before we leave the topic of vector field visualization, we need to look at
    one more visualization method.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们离开向量场可视化话题之前，我们需要再看一种可视化方法。
- en: Gradient Visualization
  id: totrans-184
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 梯度可视化
- en: When we visualize electric and magnetic fields, which we will do a few chapters
    from now, the magnitudes of the vectors can change enormously over short distances.
    Thus, displaying the magnitude of the vector as the length of an arrow can produce
    a burdensome picture. An alternative is to use shading to indicate magnitude,
    with short fat arrows to indicate direction. I call this style of vector field
    visualization *gradient visualization*.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们可视化电场和磁场时（我们将在接下来的几章中进行），向量的大小在短距离内可能会发生巨大的变化。因此，将向量的大小表示为箭头的长度可能会产生繁琐的图像。另一种选择是使用阴影来表示大小，并用短粗箭头表示方向。我将这种向量场可视化方式称为*梯度可视化*。
- en: The function `vfGrad` we define below takes a vector field, along with some
    other parameters, and produces a PNG file.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下面定义的`vfGrad`函数接受一个向量场以及一些其他参数，并生成一个PNG文件。
- en: '[PRE35]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The first argument to `vfGrad` is a monotonic function `curve` that maps the
    unit interval [0,[1](bib.xhtml#bib1)] onto itself. The purpose of this argument
    is to make some accommodation for the possibility that a vector field may have
    very large magnitudes at some positions and rather small magnitudes elsewhere.
    The largest magnitude vectors will be colored black and those closest to zero
    will be colored white. Sometimes a linear scaling results in a picture in which
    there are black vectors close to a source and white vectors everywhere else. In
    those cases, a power law such as cube root or fifth root can boost the smaller
    magnitudes so that a continuous transition from black to white becomes evident.
    We can achieve a linear scaling with the identity function `id` and a fifth root
    scaling with the section `(**0.2)`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`vfGrad`的第一个参数是一个单调函数`curve`，将单位区间[0, 1]映射到自身。该参数的目的是为可能出现某些位置的向量场在某些位置具有非常大的大小，而在其他地方具有较小的大小的情况提供调整。最大的大小的向量将被着色为黑色，最接近零的将被着色为白色。有时，线性缩放会导致在源附近有黑色向量，而其他地方全是白色向量。在这种情况下，使用类似立方根或五次根的幂律可以增强较小的大小，使得从黑到白的连续过渡变得明显。我们可以通过恒等函数`id`实现线性缩放，通过`(**0.2)`实现五次根缩放。'
- en: The next arguments, with local names `toPos` and `fromVec`, are the same as
    in the function `vfPNG`. However, `toPos` plays a double role in this function
    because `vfGrad` does not ask for a list of positions at which to show vectors.
    Instead, `vfGrad` displays the square from (–1, –1) to (1, 1). This square must
    be mapped to some square in three-dimensional space, the vectors at which will
    be displayed. If we wanted to see the square in the xy-plane with corners at Cartesian
    coordinates (–10, –10, 0) and (10, 10, 0), we would send the function `\(x,y)
    -> cart (10*x) (10*y) 0` in for `toPos`.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个参数，局部名称为`toPos`和`fromVec`，与函数`vfPNG`中的相同。然而，在这个函数中，`toPos`起到了双重作用，因为`vfGrad`不要求提供一组位置来显示向量。相反，`vfGrad`显示的是从（–1,
    –1）到（1, 1）的正方形。这个正方形必须映射到三维空间中的某个正方形，显示出该正方形上的向量。如果我们想在xy平面上看到一个角落坐标为（–10, –10,
    0）和（10, 10, 0）的正方形，我们会将函数`\(x,y) -> cart (10*x) (10*y) 0`传入`toPos`。
- en: The argument `fileName` is a filename for the PNG file. The argument `n` is
    an integer specifying the number of arrows to use in each direction. Sending in
    20, for example, will produce an image of 20 arrows by 20 arrows. The last input
    `vf` is the vector field itself.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 参数`fileName`是PNG文件的文件名。参数`n`是一个整数，指定每个方向上箭头的数量。例如，传入20将生成一个20x20箭头的图像。最后一个输入`vf`是向量场本身。
- en: The function `vfGrad` consists of several local definitions that build a picture
    `pic` ➐, followed by the same `renderCairo` line ➑ used in `vfPNG` to make the
    PNG file. The first three lines ➊ ➋ ➌ in the `let` clause serve to choose the
    points `pts` at which the vector field will be sampled and displayed. The next
    line ➍ defines `array` (type `[((R,R),(R,R))]`) as a list of pairs of points and
    2D vectors. We calculate the 2D vector at `pt` by applying `toPos` to convert
    `pt` to a 3D `Position`, applying the vector field `vf`, then using `fromVec`
    to convert the 3D vector to a 2D vector, and finally applying `magRad`, defined
    next, to express the 2D vector in magnitude-angle form.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`vfGrad`由多个局部定义组成，构建出一个图片`pic` ➐，然后跟随与`vfPNG`中相同的`renderCairo`语句 ➑来生成PNG文件。`let`子句中的前三行
    ➊ ➋ ➌ 用于选择在其中对向量场进行采样和显示的点`pts`。接下来的第➍行定义了`array`（类型为`[((R,R),(R,R))]`）作为点对和二维向量的列表。我们通过应用`toPos`将点`pt`转换为三维`Position`，然后应用向量场`vf`，再使用`fromVec`将三维向量转换为二维向量，最后应用下文定义的`magRad`将二维向量表示为大小-角度形式。
- en: The local variable `maxMag` ➎ searches the list `array` to find the maximum
    magnitude of all of the vectors in the list. Vectors with this magnitude will
    be colored black. The local function `scaledArrow` ➏ describes how to make a picture
    of a single arrow from a magnitude `m` and angle `th`. It normalizes the magnitude
    `m` by dividing it by the maximum magnitude `maxMag`, resulting in a normalized
    magnitude between 0 and 1\. This normalized magnitude is then scaled, or curved,
    by the function `curve`, a monotonic function mapping the unit interval [0,[1](bib.xhtml#bib1)]
    to itself. The normalized and scaled magnitude then passes with the angle to the
    `arrowMagRad` function, defined next, to get a picture of the arrow. Finally,
    the code scales the size of the arrow based on the number of arrows requested.
    We form the final picture `pic` ➐ with a list comprehension by placing each of
    the arrows at the appropriate position.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 局部变量 `maxMag` ➎ 搜索列表 `array`，找到所有向量中最大的幅度。具有此幅度的向量将被着色为黑色。局部函数 `scaledArrow`
    ➏ 描述了如何从幅度 `m` 和角度 `th` 制作单个箭头的图像。它通过将幅度 `m` 除以最大幅度 `maxMag` 来归一化幅度 `m`，从而得到一个介于
    0 和 1 之间的归一化幅度。然后，该归一化幅度通过 `curve` 函数进行缩放或弯曲，该函数是一个单调函数，将单位区间 [0，[1](bib.xhtml#bib1)]
    映射到自身。归一化并缩放后的幅度与角度一起传递给下文定义的 `arrowMagRad` 函数，以生成箭头图像。最后，代码根据请求的箭头数量调整箭头的大小。我们通过列表推导式形成最终的图像
    `pic` ➐，将每个箭头放置在适当的位置。
- en: The function `magRad` converts a pair of Cartesian coordinates to polar coordinates,
    with the angle in radians.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `magRad` 将一对笛卡尔坐标转换为极坐标，角度以弧度表示。
- en: '[PRE36]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The function `arrowMagRad` produces a picture of an arrow based on a normalized
    magnitude in the range 0 to 1 and an angle in radians.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `arrowMagRad` 根据归一化幅度（范围从 0 到 1）和以弧度表示的角度生成一个箭头的图像。
- en: '[PRE37]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The function defines the shape of the arrow as a polygon and chooses the color
    based on the normalized magnitude. A normalized magnitude of 1 results in a black
    arrow, 0 results in white, and numbers in between result in some shade of gray.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数将箭头的形状定义为一个多边形，并根据归一化幅度选择颜色。归一化幅度为 1 时生成黑色箭头，幅度为 0 时生成白色箭头，介于两者之间的数字则生成灰色的不同阴影。
- en: 'Here is an example of gradient visualization for the vector field **r**, or
    `rVF`:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 **r** 向量场（或 `rVF`）的梯度可视化示例：
- en: '[PRE38]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The right side of [Figure 22-6](ch22.xhtml#ch22fig6) earlier in the chapter
    shows the vector field **r**, or `rVF` produced by `rVFGrad`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 本章前面 [图 22-6](ch22.xhtml#ch22fig6) 右侧显示了由 `rVFGrad` 生成的向量场 **r**，或 `rVF`。
- en: Summary
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter introduced the idea of a field, which is a function from a position
    in three-dimensional space. Scalar fields and vector fields are the two most important
    types of field for electromagnetic theory. We introduced several ways of visualizing
    scalar and vector fields as well as coordinate systems for three-dimensional space,
    in particular for cylindrical and spherical coordinates. We then wrote a new data
    type for position.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了场的概念，场是从三维空间中的位置到某个值的函数。标量场和向量场是电磁理论中最重要的两种场。我们介绍了几种可视化标量场和向量场的方法，并探讨了三维空间的坐标系统，特别是圆柱坐标和球坐标系统。然后我们编写了一个新的数据类型来表示位置。
- en: Since electromagnetic theory is geometric, the next chapter introduces data
    types for geometric objects like curves, surfaces, and volumes.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 由于电磁理论具有几何性质，下一章将介绍几何对象（如曲线、表面和体积）的数据类型。
- en: Exercises
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 习题
- en: '**Exercise 22.1.** Show that the polar coordinate unit vectors form an orthonormal
    system. Orthonormal means both orthogonal (different vectors are perpendicular
    to each other) and normalized (each vector has length one). In other words, show
    that'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**习题 22.1.** 证明极坐标单位向量构成一个正交归一系统。正交归一意味着既正交（不同的向量彼此垂直），又归一化（每个向量的长度为 1）。换句话说，证明'
- en: '![Image](Images/446equ01.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/446equ01.jpg)'
- en: '**Exercise 22.2.** Write ![Image](Images/xcap.jpg) and ![Image](Images/ycap.jpg)
    in terms of ![Image](Images/scap.jpg) and ![Image](Images/sdcap.jpg). Your results
    should contain *s*, *ϕ*, ![Image](Images/scap.jpg), and ![Image](Images/sdcap.jpg)
    but not *x* or *y*.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**习题 22.2.** 将 ![Image](Images/xcap.jpg) 和 ![Image](Images/ycap.jpg) 用 ![Image](Images/scap.jpg)
    和 ![Image](Images/sdcap.jpg) 表示。你的结果应包含 *s*、*ϕ*、![Image](Images/scap.jpg) 和 ![Image](Images/sdcap.jpg)，但不包含
    *x* 或 *y*。'
- en: '**Exercise 22.3.** Show that the spherical coordinate unit vectors form an
    orthonormal system. In other words, show that'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '**习题 22.3.** 证明球坐标单位向量构成一个正交归一系统。换句话说，证明'
- en: '![Image](Images/446equ02.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/446equ02.jpg)'
- en: '**Exercise 22.4.** Write ![Image](Images/xcap.jpg), ![Image](Images/ycap.jpg),
    and ![Image](Images/zcap.jpg) in terms of ![Image](Images/rcap.jpg), ![Image](Images/thcap.jpg),
    and ![Image](Images/sdcap.jpg). Your results can contain *r*, *θ*, *ϕ*, ![Image](Images/rcap.jpg),
    ![Image](Images/thcap.jpg), and ![Image](Images/sdcap.jpg) but not *x*, *y*, or
    *z*.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '**习题 22.4.** 将![Image](Images/xcap.jpg)、![Image](Images/ycap.jpg)和![Image](Images/zcap.jpg)用![Image](Images/rcap.jpg)、![Image](Images/thcap.jpg)和![Image](Images/sdcap.jpg)表示。你的结果可以包含*r*、*θ*、*ϕ*、![Image](Images/rcap.jpg)、![Image](Images/thcap.jpg)和![Image](Images/sdcap.jpg)，但不能包含*x*、*y*或*z*。'
- en: '**Exercise 22.5.** Define a coordinate scalar field'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '**习题 22.5.** 定义一个坐标标量场。'
- en: '[PRE39]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: for the *θ* coordinate in spherical coordinates.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 对于球坐标系中的*θ*坐标。
- en: '**Exercise 22.6.** Use 3D visualization to make an image of the vector field
    ![Image](Images/thcap.jpg), or `thetaHat`.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '**习题 22.6.** 使用3D可视化生成矢量场![Image](Images/thcap.jpg)或`thetaHat`的图像。'
- en: '[PRE40]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '**Exercise 22.7.** Use the `vf3D` function to visualize the vector field **r**,
    or `rVF`. You may need to use a scale factor greater than 1 so the arrows don’t
    overlap each other. A larger scale factor shrinks the arrows because the scale
    factor is in units per meter.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '**习题 22.7.** 使用`vf3D`函数可视化矢量场**r**，或`rVF`。你可能需要使用大于1的比例因子，以防箭头重叠。较大的比例因子会缩小箭头，因为比例因子是以每米为单位的。'
- en: '**Exercise 22.8.** Use gradient vector field visualization to make an image
    of the vector field ![Image](Images/thcap.jpg), or `thetaHat`, in the xz-plane.
    In the first `undefined` below, you must say how to map a pair of coordinates
    to a `Position`, knowing that you are interested in the xz-plane. In the second
    `undefined`, you must say how to map a `Vec` to a pair of numbers describing the
    two components of the vector to be displayed.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '**习题 22.8.** 使用梯度矢量场可视化技术，在xz平面上生成矢量场![Image](Images/thcap.jpg)或`thetaHat`的图像。在下面的第一个`undefined`中，你需要说明如何将一对坐标映射到一个`Position`，知道你关注的是xz平面。在第二个`undefined`中，你需要说明如何将一个`Vec`映射到一对数字，这对数字描述了要显示的矢量的两个分量。'
- en: '[PRE41]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '**Exercise 22.9.** Use gradient vector field visualization to make an image
    of the vector field ![Image](Images/sdcap.jpg), or `phiHat`, in the xy-plane.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '**习题 22.9.** 使用梯度矢量场可视化技术，在xy平面上生成矢量场![Image](Images/sdcap.jpg)或`phiHat`的图像。'
- en: '[PRE42]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
