- en: Web Applications
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web应用程序
- en: '**15'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**15**'
- en: Building your First Website**
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建你的第一个网站**'
- en: In this project you’ll build a simple website with headings, paragraphs, images,
    links, and buttons. You’ll use HTML to create the page and CSS to style it how
    you want. The skills you’ll learn here can be used to build any website you’d
    like.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将构建一个简单的网站，其中包含标题、段落、图片、链接和按钮。你将使用HTML来创建页面，并使用CSS来进行样式设置。你在这里学到的技能可以用来构建任何你想要的网站。
- en: '![image](../images/f0181-01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0181-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需部件**'
- en: Raspberry Pi
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派
- en: '**SETTING UP THE PROJECT FILES**'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**设置项目文件**'
- en: For this project you won’t need any circuitry; everything is done in your Raspberry
    Pi desktop computer. You’ll use the Text Editor program to create HTML and CSS
    files. To access the Text Editor, from the desktop’s main menu go to **Accessories**
    ▸ **Text Editor**.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，你不需要任何电路；所有工作都在你的树莓派桌面计算机上完成。你将使用文本编辑器程序创建HTML和CSS文件。要访问文本编辑器，从桌面的主菜单进入**配件**
    ▸ **文本编辑器**。
- en: This project requires several files, so we suggest you create a folder specifically
    for this project. Create a new folder inside your *Projects* directory called
    *Web_Applications*, and then create a project folder called *Project_15*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目需要几个文件，因此我们建议你为这个项目创建一个专门的文件夹。在你的*Projects*目录下创建一个名为*Web_Applications*的新文件夹，然后再创建一个名为*Project_15*的项目文件夹。
- en: After opening the Text Editor, create two blank files with CTRL-N; you’ll have
    to do this once for each file. Then save those files within the *Project_15* folder,
    and name them *index.html* and *style.css* as shown in [Figure 15-1](ch15.xhtml#ch15fig1).
    You can download the scripts a*t [https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 打开文本编辑器后，使用CTRL-N创建两个空白文件；你需要为每个文件做一次。然后将这些文件保存在*Project_15*文件夹中，并将它们命名为*index.html*和*style.css*，如[图15-1](ch15.xhtml#ch15fig1)所示。你可以在[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)下载脚本。
- en: '![image](../images/f0182-01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0182-01.jpg)'
- en: '**FIGURE 15-1:** Creating the HTML and CSS files'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**图15-1：** 创建HTML和CSS文件'
- en: '**SETTING UP AN HTML WEB PAGE**'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**设置HTML网页**'
- en: '*HTML*, short for *HyperText Markup Language*, is the predominant markup language
    used to create web pages. Web browsers were designed to read HTML *tags*, which
    tell the browser how to display content on the page. Let’s take a look at how
    tags work.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*HTML*，即*超文本标记语言*，是用于创建网页的主要标记语言。网页浏览器是为了读取HTML*标签*而设计的，这些标签告诉浏览器如何在页面上显示内容。让我们来看看标签是如何工作的。'
- en: '**Setting Up the Basic Content**'
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置基本内容**'
- en: The following snippet shows the basic structure of an HTML document. Open your
    *index.html* file using the Text Editor and enter the content from [Listing 15-1](ch15.xhtml#ch15list1).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了HTML文档的基本结构。使用文本编辑器打开你的*index.html*文件，并输入[列表15-1](ch15.xhtml#ch15list1)中的内容。
- en: '**LISTING 15-1:** The basic structure of an HTML web page'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表15-1：** HTML网页的基本结构'
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This document is simply a list of HTML tags, denoted by the enclosing `< >`
    symbols. The first line of any HTML document is always `<!DOCTYPE html>`. This
    tells the web browser this document is an HTML file.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该文档只是HTML标签的列表，用`< >`符号括起来。任何HTML文档的第一行总是`<!DOCTYPE html>`。这告诉网页浏览器该文档是一个HTML文件。
- en: The remaining structure needs to be sandwiched between the tags `<html>` ➊ and
    `</html>`, the former indicating the beginning of a web page and the latter indicating
    the end of the page. Note that the closing tag must have a `/` after the `<` symbol;
    this is true of all HTML closing tags. Not all HTML tags need a closing tag, however,
    as you’ll see later.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的结构需要被夹在`<html>` ➊和`</html>`标签之间，前者表示网页的开始，后者表示网页的结束。请注意，关闭标签必须在`<`符号后加上`/`，这对所有HTML的闭合标签都适用。然而，并不是所有的HTML标签都需要闭合标签，稍后你会看到。
- en: 'HTML documents have two main parts: the head and the body. The *head*, which
    goes within the tags `<head>` ➋ and `</head>`, is where you insert data about
    the HTML document that is not directly visible on the page but that adds functionality
    to the web page, like the title that shows up in the browser tab, scripts, styles,
    and more. The *body*, which falls within the tags `<body>` ➌ and `</body>`, includes
    the content of the page, such as headings, text, images, tables, and so on.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: HTML文档有两个主要部分：头部和正文。*头部*，位于`<head>` ➋和`</head>`标签之间，是你插入HTML文档数据的地方，这些数据不会直接显示在页面上，但能为网页增加功能，如显示在浏览器标签中的标题、脚本、样式等。*正文*，位于`<body>`
    ➌和`</body>`标签之间，包含页面内容，如标题、文本、图片、表格等。
- en: '**Adding the Title, Headings, and Paragraphs**'
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**添加标题、标题和段落**'
- en: To see how your web page looks, go to the taskbar menu and open Chromium, and
    then drag the *index.html* file into the Chromium web browser. At the moment,
    you should see only a blank page, because you haven’t added anything to the HTML
    file yet. In this section, you’ll add the title, headings, and paragraphs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看您的网页效果，请打开任务栏菜单并启动Chromium浏览器，然后将*index.html*文件拖入Chromium浏览器中。此时，您应该只看到一个空白页面，因为您尚未向HTML文件中添加任何内容。在本节中，您将添加标题、标题和段落。
- en: '**Using Title Tags**'
  id: totrans-24
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**使用标题标签**'
- en: 'The title goes between the `<title>` and `</title>` tags, which should go within
    the `<head>` and `</head>` tags. Add a title to your file, as shown here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 标题应放在`<title>`和`</title>`标签之间，这些标签应该放在`<head>`和`</head>`标签之间。为您的文件添加一个标题，如下所示：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**NOTE**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Instead of dragging the file into the browser again, you can simply refresh
    the web page after saving the HTML; the changes are updated immediately.*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*在保存HTML文件后，您可以简单地刷新网页，而无需再次将文件拖入浏览器；更改会立即更新。*'
- en: If you save *index.html* and again drag the file into your browser, don’t be
    surprised to still see a blank page. The title shows in the web browser tab, not
    on the page itself. We titled our web page “Max – The Dog,” but you can title
    your page whatever you’d like.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您保存了*index.html*并再次将文件拖入浏览器，不要惊讶于仍然看到一个空白页面。标题会显示在浏览器标签中，而不是页面本身。我们将网页命名为“Max
    – The Dog”，但您可以将页面命名为任何您喜欢的名字。
- en: '**Using Heading Tags**'
  id: totrans-30
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**使用标题标签**'
- en: 'You can use headings to structure the text on the web page. Heading tags begin
    with an `h` followed by a number that indicates the heading level. For example,
    `<h1>` and `</h1>` are the tags for heading 1, or the top level; `<h2>` and `</h2>`
    are for heading 2, and so on until heading 6, which is the bottom level of heading.
    Heading tags should go between the `<body>` and `</body>` tags. Make a couple
    of headings and place them in the body of your file now:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用标题来组织网页上的文本。标题标签以`h`开头，后面跟着一个数字，表示标题级别。例如，`<h1>`和`</h1>`是标题1的标签，即最高级别；`<h2>`和`</h2>`是标题2的标签，以此类推，直到标题6，这是标题的最低级别。标题标签应放在`<body>`和`</body>`标签之间。现在，创建几个标题并将其放入文件的主体部分：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We’ve added two headings to our page: “MAX – THE DOG” at the top level and
    “About Max” at a level below that. Now it’s time to put some text under those
    headings.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在页面上添加了两个标题：“MAX – THE DOG”是顶级标题，下面的标题是“关于Max”。现在是时候在这些标题下添加一些文本了。
- en: '**Using Paragraph Tags**'
  id: totrans-34
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**使用段落标签**'
- en: 'You should put most of your readable content in paragraphs. Every paragraph
    needs to go between the `<p>` and `</p>` tags. Add a paragraph or two to your
    file, as shown here:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数可读内容应该放在段落中。每个段落需要放在`<p>`和`</p>`标签之间。为您的文件添加一两个段落，如下所示：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You now have your very own web page! Feel free to add as many paragraphs and
    headings as you’d like.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经有了自己的网页！可以随意添加任意数量的段落和标题。
- en: '**Seeing Your Web Page**'
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**查看您的网页**'
- en: Save your *index.html* document and refresh the web page. [Figure 15-2](ch15.xhtml#ch15fig2)
    shows how Max’s web page looks at the moment.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 保存您的*index.html*文档并刷新网页。[图15-2](ch15.xhtml#ch15fig2)显示了此时Max的网页样子。
- en: '![image](../images/f0184-01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0184-01.jpg)'
- en: '**FIGURE 15-2:** A simple HTML page'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**图15-2：** 一个简单的HTML页面'
- en: As you can see, HTML doesn’t do much besides adding raw text to your page; it’s
    mainly a series of paragraphs and doesn’t look pretty at all. You’re going to
    use CSS in a later section to style details and make your page look attractive.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，HTML除了将原始文本添加到页面外，几乎没有其他功能；它主要是由一系列段落组成，看起来并不漂亮。稍后，您将使用CSS来为细节进行样式设置，使页面看起来更加吸引人。
- en: '**Adding Links, Images, and Buttons**'
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**添加链接、图片和按钮**'
- en: Any self-respecting website should contain way more than just text. We’ll show
    you how to add images, buttons, more pages, and links to other pages too.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 任何一个自尊的网页都不应仅仅包含文字。我们将展示如何添加图片、按钮、更多页面以及指向其他页面的链接。
- en: '**Including Hyperlinks**'
  id: totrans-45
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**包含超链接**'
- en: 'To add a hyperlink to another page on the internet, add the `<a>` tag anywhere
    between the `<body>` and `</body>` tags. For example, you can insert a hyperlink
    to the Inspector Rex Wikipedia page like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加指向互联网上其他页面的超链接，可以将`<a>`标签放在`<body>`和`</body>`标签之间的任何位置。例如，您可以像这样插入指向《Inspector
    Rex》维基百科页面的超链接：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `a` stands for *anchor* and the text that goes between these tags is called
    *anchor text*, which is `Inspector Rex` in this case. Inside the `<a>` tag, we’ve
    included the `href` attribute, which specifies where the link should go. The anchor
    text is what the page’s visitors see on the page; when they click that text, the
    Inspector Rex Wikipedia web page opens.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`a`代表*锚点*，位于这些标签之间的文本称为*锚文本*，在此情况下是`Inspector Rex`。在`<a>`标签内部，我们包括了`href`属性，它指定了链接应指向的地址。锚文本是页面访问者在页面上看到的内容；当他们点击该文本时，Inspector
    Rex的维基百科页面会打开。'
- en: 'Most websites have multiple pages you can navigate through. That navigation
    between pages is also done using hyperlinks. For example, if you want to insert
    a new page—say, a photo gallery for Max—you would link to it like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数网站都有多个页面，你可以在这些页面之间进行导航。页面之间的导航也是通过超链接完成的。例如，如果你想插入一个新页面——比如Max的照片画廊——你可以像这样链接到它：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: On its own, this link won’t take you anywhere because the page it’s pointing
    to doesn’t yet exist. You have to create the *gallery.html* file and save it in
    the same folder as your *index.html* file. You won’t create another page in this
    project, but now you know how to do it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 单独使用该链接不会带你到任何地方，因为它指向的页面还不存在。你需要创建*gallery.html*文件并将其保存在与你的*index.html*文件相同的文件夹中。在这个项目中你不会创建其他页面，但现在你知道如何去做了。
- en: '**Including Images**'
  id: totrans-52
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**包含图片**'
- en: 'Images make any website more appealing. To insert an image, you use the `<img>`
    tag, which doesn’t have a closing tag because you list the image you want shown
    within the angle brackets, `<>`. The file for the image you want to include has
    to be saved in the website’s folder—in this case, *Project_15*—to make it onto
    the web page. To insert an image called *max.jpg*, you use the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图片让任何网站看起来更吸引人。要插入图片，你使用`<img>`标签，它没有闭合标签，因为你在尖括号`<>`中列出要显示的图片。你想要包含的图片文件必须保存在网站的文件夹中——在此情况下是*Project_15*——才能显示在网页上。要插入名为*max.jpg*的图片，你使用以下代码：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `src` indicates the location of the image file. Because we have the image
    stored in the website’s folder, we can just use the image filename. Replace `max.jpg`
    in the code with your own image filename. You can also use a hyperlink to an image
    by replacing `max.jpg` with the hyperlink.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`src`表示图片文件的位置。因为我们将图片保存在网站的文件夹中，所以只需使用图片文件名即可。在代码中将`max.jpg`替换为你自己的图片文件名。你也可以通过将`max.jpg`替换为超链接，使用指向图片的链接。'
- en: 'You can resize your image either by editing the image file manually or by using
    the `height` attribute within the `<img>` tag. For example, to resize the image
    to 350 pixels in height, you use:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过手动编辑图片文件或在`<img>`标签内使用`height`属性来调整图片的大小。例如，要将图片高度调整为350像素，你可以使用：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The width adjusts automatically according to the height. You could also change
    the width with the `width` attribute and the height would readjust automatically.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 宽度会根据高度自动调整。你也可以使用`width`属性来改变宽度，且高度会自动调整。
- en: The `<img>` tag must be inside a `<p>` or a `<div>` tag—you can use a `<div>`
    tag to create a section inside your body content (see this in [Listing 15-2](ch15.xhtml#ch15list2)).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`<img>`标签必须位于`<p>`或`<div>`标签内部——你可以使用`<div>`标签在你的页面内容中创建一个部分（参见[Listing 15-2](ch15.xhtml#ch15list2)）。'
- en: '**Including Buttons**'
  id: totrans-60
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**包含按钮**'
- en: 'To include a button on your page, insert the label you want for your button
    between the `<button>` and `</button>` tags. We want to insert a button that leads
    to a funny police dog chase video, so we use:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要在你的页面中包含一个按钮，插入你想要的按钮标签，放在`<button>`和`</button>`标签之间。我们想插入一个指向有趣警犬追逐视频的按钮，所以我们使用：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To make the button clickable so it redirects you to the video page, insert
    the button tags between the `<a>` hyperlink tags to the video in question:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使按钮可点击并将你重定向到视频页面，在`<a>`超链接标签之间插入按钮标签，指向相关的视频：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Viewing Max’s HTML File**'
  id: totrans-65
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**查看Max的HTML文件**'
- en: We’ve added an image, a link, and a button to Max’s web page. The code in [Listing
    15-2](ch15.xhtml#ch15list2) shows how the HTML document looks at the moment.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在Max的网页中添加了一张图片、一个链接和一个按钮。[Listing 15-2](ch15.xhtml#ch15list2)中的代码显示了目前HTML文档的样子。
- en: '**LISTING 15-2:** The HTML document for Max’s web page with a link, an image,
    and a button'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 15-2：** Max网页的HTML文档，包含一个链接、一张图片和一个按钮'
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Note that we’ve added three new tags:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们添加了三个新标签：
- en: '`<header>` ➊ and `</header>` ➍ contain introductory content. Inside these tags
    is the first-level heading.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<header>` ➊和`</header>` ➍包含了介绍性内容。在这些标签内部是一级标题。'
- en: '`<div class="title">` ➋ and `</div>` ➌ define a division or section. The `class`
    attribute called `title` indicates that an HTML element is a member of a particular
    class—in this case, the `title` class, but you can give it any name you want.
    Using the `class` attribute is useful because it allows you to define the same
    style in CSS for multiple elements that belong to the same class.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<div class="title">` ➋ 和 `</div>` ➌ 用于定义一个区块或部分。`class`属性名为`title`，表示HTML元素是某个特定类的成员——在这个例子中是`title`类，但你可以为它指定任何你想要的名字。使用`class`属性很有用，因为它允许你为属于同一类的多个元素在CSS中定义相同的样式。'
- en: '`<main>` ➎ and `</main>` ➏ specify the main content of a document. This is
    where you should place content that is unique to the document—that is, content
    that isn’t repeated in the website. A single HTML document shouldn’t have more
    than one `<main>` element.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<main>` ➎ 和 `</main>` ➏ 用于指定文档的主要内容。这里应该放置文档特有的内容——即网站中不重复的内容。单个HTML文档中不应有多个`<main>`元素。'
- en: We structured the HTML content this way because it makes it easier to use CSS
    later to format the page. [Figure 15-3](ch15.xhtml#ch15fig3) shows how the web
    page looks with the HTML file in [Listing 15-2](ch15.xhtml#ch15list2).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这样构建HTML内容，因为这使得以后使用CSS来格式化页面更加容易。[图 15-3](ch15.xhtml#ch15fig3)展示了在[列表 15-2](ch15.xhtml#ch15list2)中的HTML文件下，网页的外观。
- en: '![image](../images/f0188-01.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0188-01.jpg)'
- en: '**FIGURE 15-3:** Max’s web page with a link, an image, and a button'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 15-3：** Max的网页，包含链接、图像和按钮'
- en: '**STYLING YOUR PAGE WITH CSS**'
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用CSS样式化你的页面**'
- en: Now you’ll add *CSS*, or *Cascading Style Sheets*, a style sheet language used
    to describe how the elements in a web page will look when rendered. You can add
    CSS either directly to the HTML file or in a separate file that you reference
    in the HTML file. In this project, you’ll create a separate file for the CSS document;
    this way, it’ll be easier to read both the CSS and HTML files and understand what
    they do.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将添加*CSS*（层叠样式表），这是一种用于描述网页元素渲染后外观的样式表语言。你可以将CSS直接添加到HTML文件中，或者在一个单独的文件中进行引用。在这个项目中，你将为CSS文档创建一个单独的文件；这样，阅读CSS和HTML文件时会更加清晰，便于理解它们的作用。
- en: '**Embedding a Style Sheet**'
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**嵌入样式表**'
- en: 'Before getting to the CSS document itself, you need to embed the style sheet
    in the *index.html* file so that the HTML knows to reference an external CSS file.
    To do this, add the following line between the `<head>` and `</head>` tags:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入CSS文档本身之前，你需要将样式表嵌入到*index.html*文件中，这样HTML就知道要引用外部CSS文件。为此，在`<head>`和`</head>`标签之间添加以下行：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This `<link>` tag tells the HTML file that you’re using an external style sheet
    to format how the page looks. The `rel` attribute specifies the nature of the
    external file, in this case that it is a style sheet—the CSS file—that will be
    used to alter the appearance of the page. The `type` attribute is set to `"text/css"`
    to indicate that you’re using a CSS file for the styles. The `href` attribute
    indicates the file location; again, since the file is in the website’s folder,
    you just need to reference the filename.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`<link>`标签告诉HTML文件你正在使用外部样式表来格式化页面的外观。`rel`属性指定外部文件的性质，在这种情况下，它是一个样式表——CSS文件——将用于改变页面的外观。`type`属性设置为`"text/css"`，表示你正在使用CSS文件来定义样式。`href`属性指示文件的位置；同样，由于文件位于网站的文件夹中，你只需要引用文件名。
- en: After you’ve added the link to refer to the style sheet, your header should
    look like [Listing 15-3](ch15.xhtml#ch15list3).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在你添加了指向样式表的链接后，你的头部应该像[列表 15-3](ch15.xhtml#ch15list3)一样。
- en: '**LISTING 15-3:** Linking to a CSS style sheet in your HTML document'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 15-3：** 在HTML文档中链接到CSS样式表'
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With this extra tag, the style sheet is connected to the HTML document. Creating
    a separate style sheet is useful because you can embed the same style sheet in
    several web pages with just one line.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个额外的标签，样式表与HTML文档连接起来。创建一个单独的样式表是很有用的，因为你可以通过一行代码将同样的样式表嵌入到多个网页中。
- en: '**Styling Your HTML Content**'
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**样式化你的HTML内容**'
- en: 'To style your HTML content, CSS uses *selectors* that define which elements
    a set of CSS rules applies to. They have *properties*, which in turn have *values*.
    The code will look like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要样式化你的HTML内容，CSS使用*选择器*来定义一组CSS规则应用于哪些元素。它们有*属性*，而这些属性又有*值*。代码将如下所示：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The set of rules that defines the style for a certain selector should go between
    curly brackets, `{}`. You attribute a value to a property with a colon (`:`),
    and every value should end with a semicolon (`;`). Each selector can have, and
    normally does have, more than one property.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 定义某个选择器样式的规则集应位于大括号`{}`之间。你用冒号（`:`）为属性赋值，每个值后面应以分号（`;`）结尾。每个选择器可以有多个属性，通常也有多个。
- en: '**Styling the Header**'
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**样式化头部**'
- en: If you’ve been following the instructions, you should have a *style.css* file
    inside the *Project_15* folder along with your *index.html* file. Open your *style.css*
    file and edit the header by entering the content in [Listing 15-4](ch15.xhtml#ch15list4).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你按照指示操作，你应该在*Project_15*文件夹中有一个*style.css*文件以及一个*index.html*文件。打开*style.css*文件并通过输入[列表
    15-4](ch15.xhtml#ch15list4)中的内容来编辑头部样式。
- en: '**LISTING 15-4:** Styling the header with CSS'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 15-4：** 使用CSS样式化头部'
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this listing, `header` is the selector, which means that the style rules
    you’re going to describe between curly brackets will apply to the header section
    of your web page. Remember that the header section is what goes between the `<header>`
    and `</header>` tags and includes the introductory content. Here we insert a background
    image—a beautiful photo of Max. For that, we use the `background` property, whose
    value is `url(background.jpg)` ➊; inside the `url()` you write the path directory
    for the image. Replace `background.jpg` with the name of the image you want to
    use as the background. Since you’re going to save the image file in the same folder
    as the HTML and CSS files, you reference only the image filename.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个列表中，`header`是选择器，这意味着你将在大括号中描述的样式规则将应用于网页的头部区域。记住，头部区域是位于`<header>`和`</header>`标签之间的内容，通常包括介绍性内容。在这里，我们插入了一张背景图像——一张Max的美丽照片。为此，我们使用`background`属性，其值为`url(background.jpg)`
    ➊；在`url()`内，你写入图像的路径目录。将`background.jpg`替换为你希望用作背景的图像名称。因为你要将图像文件保存在与HTML和CSS文件相同的文件夹中，所以只需引用图像文件名。
- en: Assign the `cover` value to the `background-size` property ➋. This says that
    the background image should fill the entire header section.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 将`cover`值赋给`background-size`属性➋。这表示背景图像应该填充整个头部区域。
- en: The `height` property has a value of `70vh` ➌, which specifies the height of
    the header. You can use one of several units for the height, but we are using
    `vh` (viewport height), which is relative to 1 percent of the height of the viewport
    and ensures the header elements can fit into the viewport. This instruction means
    the header fills 70 percent of the web browser’s window regardless of its size.
    Experiment with other percentage values and see how your page looks.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`height`属性的值为`70vh` ➌，表示头部的高度。你可以使用多种单位来设置高度，但我们使用`vh`（视口高度），它相对于视口高度的1%的比例，确保头部元素能够适应视口。这条指令意味着无论浏览器窗口的大小如何，头部将占据网页窗口的70%。你可以尝试其他百分比值，看看页面效果如何。'
- en: Save the CSS file and refresh the browser tab that contains the HTML document
    in order to see how your newly styled web page looks.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 保存CSS文件并刷新包含HTML文档的浏览器标签，以查看你新样式化的网页效果。
- en: '**Styling the title Class**'
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**样式化title类**'
- en: Now you’ll edit the `title` class, which includes any content that goes between
    the `<div class="title">` and `</div>` tags. These tags are between the `<header>`
    and `</header>` tags, which means that the `header` is an *ancestor* of the `title`
    class. Add the snippet in [Listing 15-5](ch15.xhtml#ch15list5) to your CSS file.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将编辑`title`类，它包含任何位于`<div class="title">`和`</div>`标签之间的内容。这些标签位于`<header>`和`</header>`标签之间，这意味着`header`是`title`类的*祖先*。将[列表
    15-5](ch15.xhtml#ch15list5)中的代码片段添加到你的CSS文件中。
- en: '**LISTING 15-5:** Styling the `title` class'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 15-5：** 样式化`title`类'
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: To select elements with a specific class, use a period (`.`) followed by the
    class name, like `.title`. We’ll walk you through each element.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择具有特定类的元素，使用一个点（`.`）后跟类名，如`.title`。我们将一步步教你每个元素的操作。
- en: '**Adjusting Positions**'
  id: totrans-103
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**调整位置**'
- en: You can position elements using the `top`, `bottom`, `left`, and `right` properties,
    but first you need to set the `position` property ➊.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`top`、`bottom`、`left`和`right`属性来定位元素，但首先你需要设置`position`属性➊。
- en: The way the elements are positioned on the page works differently depending
    on whether the `position` value is set to `static`, `relative`, `fixed`, or `absolute`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 元素在页面上的定位方式取决于`position`值是否设置为`static`、`relative`、`fixed`或`absolute`。
- en: '**THE POSITION PROPERTY**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**位置属性**'
- en: 'The `position` property can have the following values:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`position` 属性可以具有以下值：'
- en: static
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: An element with the `static` value is positioned according to the normal flow
    of the page and is not affected by the `top`, `bottom`, `left`, and `right` properties.
    By default, HTML elements are `static`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `static` 值的元素根据页面的正常流进行定位，并且不受 `top`、`bottom`、`left` 和 `right` 属性的影响。默认情况下，HTML
    元素是 `static`。
- en: relative
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: relative
- en: An element with the `relative` value is positioned relative to its default position
    using the `top`, `bottom`, `left`, and `right` properties.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `relative` 值的元素相对于其默认位置进行定位，使用 `top`、`bottom`、`left` 和 `right` 属性。
- en: fixed
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: fixed
- en: An element with the `fixed` value remains in the same position even when the
    page is scrolled. To position the elements on the viewport, use the `top`, `bottom`,
    `left`, and `right` properties.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `fixed` 值的元素即使在页面滚动时也会保持在相同的位置。要将元素定位在视口上，使用 `top`、`bottom`、`left` 和 `right`
    属性。
- en: absolute
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: absolute
- en: An element with the `absolute` value is positioned relative to its nearest ancestor.
    To adjust the position, use the `top`, `bottom`, `left`, and `right` properties.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `absolute` 值的元素相对于其最近的祖先进行定位。要调整位置，使用 `top`、`bottom`、`left` 和 `right` 属性。
- en: In this case, we are using the `absolute` value. This means each element is
    positioned relative to its nearest ancestor, in this case the header section.
    Take a look at [Figure 15-4](ch15.xhtml#ch15fig4) to understand how the `title`
    class elements are positioned in relation to the header.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们使用的是 `absolute` 值。这意味着每个元素相对于其最近的祖先进行定位，在本例中是标题区域。查看[图 15-4](ch15.xhtml#ch15fig4)
    以了解 `title` 类元素如何相对于标题进行定位。
- en: '![image](../images/f0191-01.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0191-01.jpg)'
- en: '**FIGURE 15-4:** Positioning the `title` class elements inside the header section'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 15-4：** 在标题区域内定位 `title` 类元素'
- en: The `top` ➋ and `left` ➌ properties specify where each element is positioned
    in relation to its ancestor, given as a percentage, which represents how far across
    the page it appears, with `0%` being the far left and top edge of its ancestor.
    The `50%` values for `top` and `left` move the top-left corner of the `title`
    class section to the middle of its ancestor. This means the top-left corner of
    the `title` class section, rather than its center point, will be positioned at
    the center of the header section; take a look at [Figure 15-4](ch15.xhtml#ch15fig4)
    (A). You can adjust this with the `transform` property.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`top` ➋ 和 `left` ➌ 属性指定了每个元素相对于其祖先的位置，以百分比形式表示，表示元素在页面中出现的位置，其中`0%`表示其祖先的最左边和最上边。`top`
    和 `left` 的`50%`值将 `title` 类区域的左上角移动到其祖先的中间。这意味着 `title` 类区域的左上角，而不是其中心点，将被定位在标题区域的中心位置；请查看[图
    15-4](ch15.xhtml#ch15fig4)（A）。你可以通过 `transform` 属性来调整此位置。'
- en: The `transform` property ➍, with the `translate(–50%, –40%)` values, shifts
    the position of the element. The `–``50%` value moves the `title` class element
    50 percent to the left in relation to its size, which will center it horizontally
    inside the header section—take a look at [Figure 15-4](ch15.xhtml#ch15fig4) (B).
    We also apply `–``40%` to the vertical position, to move it 40 percent up from
    the bottom (see [Figure 15-4](ch15.xhtml#ch15fig4) (C)). Try this with different
    values and see how it changes. The `–``50%` and `–``40%` work just fine for Max’s
    page, but you may want to move the text to a different position depending on your
    background image.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`transform` 属性 ➍，结合 `translate(–50%, –40%)` 值，可以移动元素的位置。`–50%` 值将 `title` 类元素相对于其大小向左移动
    50%，这会使它在水平上居中于标题区域——请查看[图 15-4](ch15.xhtml#ch15fig4)（B）。我们还将 `–40%` 应用于垂直位置，将其从底部向上移动
    40%（请参见[图 15-4](ch15.xhtml#ch15fig4)（C））。尝试使用不同的值，看看它如何变化。`–50%` 和 `–40%` 对于 Max
    的页面来说效果很好，但根据你的背景图像，你可能需要将文本移动到不同的位置。'
- en: '**Setting Text Color and Alignment**'
  id: totrans-121
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**设置文本颜色和对齐方式**'
- en: The `color` ➎ and `text-align` ➏ properties define text color and text alignment,
    respectively. You can set colors with their name—HTML recognizes basic color names—or
    by using a hexadecimal or RGB color code. We’re using hexadecimal. You can google
    *hexadecimal color picker* for a hexadecimal reference to a specific color. The
    `text-align` property takes several values like `left`, `right`, `center`, and
    `justify`, to align text to the left or right or center or justify it, respectively.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`color` ➎ 和 `text-align` ➏ 属性分别定义了文本颜色和文本对齐方式。你可以通过颜色名称（HTML识别基本颜色名称）或使用十六进制或RGB颜色代码来设置颜色。我们使用十六进制代码。你可以搜索*十六进制颜色选择器*来查找特定颜色的十六进制参考。`text-align`属性有几个值，如`left`、`right`、`center`和`justify`，用于将文本左对齐、右对齐、居中或两端对齐。'
- en: '**Styling the Headings, Paragraphs, and Links**'
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**样式化标题、段落和链接**'
- en: '[Listing 15-6](ch15.xhtml#ch15list6) styles the headings, paragraphs, and links.
    Add these styles to your CSS document.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 15-6](ch15.xhtml#ch15list6) 样式化标题、段落和链接。将这些样式添加到你的CSS文档中。'
- en: '**LISTING 15-6:** Styling headings, paragraphs, and hyperlinks'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 15-6:** 样式化标题、段落和超链接'
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: To define the text size, use the `font-size` property ➊. There are several units
    to define the font size, but we’re going to use the `rem` unit. *Rem* is the computed
    value of `font-size` on the root element—we use one font size as a reference across
    the page. This means all font sizes are relative to each other, reducing issues
    arising from older font size units, which would cause irregularities when viewing
    the page on devices with different screen sizes.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义文本大小，请使用`font-size`属性 ➊。定义字体大小有几种单位，但我们将使用`rem`单位。*Rem*是根元素上`font-size`的计算值——我们使用一种字体大小作为页面的参考。这意味着所有字体大小都是相对的，减少了使用旧字体大小单位时可能出现的问题，因为这些单位在不同屏幕尺寸的设备上查看页面时可能会导致不规则性。
- en: When used in the `font-size` property of the root element, the rem units refer
    to the property’s initial value. So 1 rem is equal to the font size of the HTML
    element—that is, 16 pixels by default in most browsers.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当在根元素的`font-size`属性中使用时，rem单位指的是该属性的初始值。因此，1rem等于HTML元素的字体大小——也就是大多数浏览器中默认的16像素。
- en: In [Listing 15-6](ch15.xhtml#ch15list6), we define `4`, `2.5`, and `1.3` rem
    font size for the heading 1, heading 2, and paragraphs, respectively, to make
    each heading level subsequently smaller than the one above, with the lowest level
    slightly larger than the default text.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在[Listing 15-6](ch15.xhtml#ch15list6)中，我们分别为标题1、标题2和段落定义了`4`、`2.5`和`1.3`rem的字体大小，使每个标题级别比上一个标题稍小，最低级别的字体稍大于默认文本。
- en: The `main` section formats the main content of your page ➋. We’re setting the
    maximum width of content to `500px`. Defining the width of an element prevents
    the element from stretching to the boundaries of its container; in this case,
    it prevents the text from spreading horizontally on the web browser window. Then,
    we set the margins with `auto` to center the element horizontally.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`main`部分格式化页面的主要内容 ➋。我们将内容的最大宽度设置为`500px`。定义元素的宽度可以防止元素扩展到其容器的边界；在这种情况下，它防止文本在网页浏览器窗口中水平扩展。然后，我们将边距设置为`auto`，以使元素水平居中。'
- en: Hyperlinks are underlined by default. Set `text-``decoration` to `none` ➌ to
    remove the underline.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 超链接默认是带下划线的。将`text-``decoration`设置为`none` ➌以去除下划线。
- en: '**Styling the Button**'
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**样式化按钮**'
- en: To style the button, copy the styles in [Listing 15-7](ch15.xhtml#ch15list7)
    to your *style.css* document file.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要样式化按钮，请将[Listing 15-7](ch15.xhtml#ch15list7)中的样式复制到你的*style.css*文档文件中。
- en: '**LISTING 15-7:** Styling the button'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 15-7:** 按钮样式'
- en: '[PRE17]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Setting `display` to `block` ensures the button is displayed as a block element,
    like a paragraph; so, for example, the button will not be on the same line as
    a text element. We use the `padding` property to add space around content. We
    define a padding of `10px` for the top and bottom margins of the button and `20px`
    for the right and left margins—this sets how much space surrounds the button’s
    content. Notice that here we’re using the hexadecimal color code for setting the
    color of the button text and the button background color. The other button properties
    are self-explanatory. Play with these properties to style the button to your liking.
    You can also search for *button properties CSS* on the web for more properties
    and values.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`display`为`block`确保按钮以块级元素的形式显示，就像段落一样；例如，按钮将不会和文本元素在同一行。我们使用`padding`属性为内容添加空白区域。我们为按钮的上下边距设置`10px`，左右边距设置`20px`——这决定了按钮内容周围的空间。注意，这里我们使用十六进制颜色代码来设置按钮文本和按钮背景的颜色。其他按钮属性不言自明。你可以通过调整这些属性来定制按钮的样式。你也可以在网上搜索*button
    properties CSS*来了解更多属性和值。
- en: Save your *style.css* file and refresh your browser to see the changes you’ve
    made. You should now have a simple web page similar to the one shown at the beginning
    of this project.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 保存你的*style.css*文件并刷新浏览器，以查看你所做的更改。现在你应该有一个简单的网页，类似于项目开始时展示的页面。
- en: '**TAKING IT FURTHER**'
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步发展**'
- en: 'This project was just a quick introduction on how to build a simple web page
    with HTML and CSS. There are endless ways in which you can edit and improve it.
    We encourage you to play around with all the options introduced here. For inspiration,
    you could:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目只是一个快速介绍，讲解如何使用HTML和CSS构建一个简单的网页。你可以通过无数种方式编辑和改进它。我们鼓励你尝试这里介绍的所有选项。为了获得灵感，你可以：
- en: Add multiple pages to your main page with hyperlinks to each other.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向你的主页添加多个页面，并使用超链接相互连接。
- en: Create a web page that showcases one of your Raspberry Pi projects.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个展示你树莓派项目的网页。
- en: Search the web for more CSS properties and values and edit the way your page
    looks.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在网上搜索更多CSS属性和值，并编辑网页的外观。
- en: '**16'
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**16'
- en: Connecting your Electronics to the Web**
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的电子设备连接到网络**
- en: In this project you’ll create your own Internet of Things web server you can
    use to control a lamp remotely from your phone. The simple web server you’ll build
    can then be added to other projects so you can control other electronic appliances.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将创建自己的物联网网络服务器，使用手机远程控制灯泡。你构建的简单网络服务器可以添加到其他项目中，以便控制其他电子设备。
- en: '![image](../images/f0196-01.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0196-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需组件**'
- en: Raspberry Pi
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派
- en: Relay module HL-52S
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 继电器模块HL-52S
- en: 12 V lamp and holder
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 12伏灯泡和灯座
- en: 12 V power adapter
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 12伏电源适配器
- en: Male DC bar rel power jack
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 母DC条形直流电源插座
- en: Plastic box enclosure
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 塑料盒外壳
- en: Jumper wires
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线
- en: '**SOFTWARE REQUIRED**'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需软件**'
- en: Flask framework
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Flask框架
- en: In this project you’re going to create your own web server to control your electronics
    through a browser. You’ll control a 12 V lamp using a dynamic web page with buttons.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将创建自己的网络服务器，通过浏览器控制电子设备。你将使用动态网页和按钮来控制一个12伏灯泡。
- en: '**INTRODUCING WEB SERVERS**'
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍网络服务器**'
- en: A web server is a computer that provides web pages. It stores the website’s
    files, including all HTML documents and related assets like images, CSS style
    sheets, fonts, and video. It also brings those files to the user’s device web
    browser when the user makes a request to the server’s URL.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 网络服务器是提供网页的计算机。它存储网站的文件，包括所有的HTML文档和相关的资源，如图片、CSS样式表、字体和视频。当用户向服务器的URL发出请求时，它还会将这些文件传送到用户设备的网页浏览器中。
- en: When you access a web page in your browser, you’re actually sending a request
    via *Hypertext Transfer Protocol (HTTP)* to a server. This is simply a process
    for requesting and returning information on the internet. The server sends back
    the web page you requested—also through HTTP.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在浏览器中访问一个网页时，你实际上是通过*超文本传输协议（HTTP）*向服务器发送请求。这只是一个在互联网上请求和返回信息的过程。服务器通过HTTP将你请求的网页返回。
- en: In this project you’ll use your Raspberry Pi to host a web server on the local
    network, as illustrated in [Figure 16-1](ch16.xhtml#ch16fig1).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用你的Raspberry Pi在本地网络上托管一个网络服务器，如[图16-1](ch16.xhtml#ch16fig1)所示。
- en: '![image](../images/f0197-01.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0197-01.jpg)'
- en: '**FIGURE 16-1:** Your Raspberry Pi running a web server'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**图16-1：** 你的树莓派正在运行一个网络服务器'
- en: As a server, your Raspberry Pi can provide some output through its GPIO pins.
    In other words, using a browser on your local network, you can access the Pi web
    server to remotely control the GPIOs and turn something on.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 作为服务器，树莓派可以通过其GPIO针脚提供一些输出。换句话说，使用本地网络上的浏览器，你可以访问树莓派的Web服务器，远程控制GPIO并打开某些设备。
- en: Web servers can serve *static* or *dynamic* content. The content of a static
    website doesn’t change unless you edit its HTML file. The website built in [Project
    15](ch15.xhtml#ch15) is an example of a static website. With a dynamic website,
    the content changes based on user interactions. In this project, you’ll create
    a dynamic website that controls and shows the current state of a 12 V lamp connected
    to a relay, which we’ll look at more closely in a second.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Web服务器可以提供*静态*或*动态*内容。静态网站的内容除非你编辑其HTML文件，否则不会发生变化。[项目15](ch15.xhtml#ch15)中构建的网站就是一个静态网站的例子。动态网站的内容会根据用户的交互发生变化。在这个项目中，你将创建一个动态网站，用于控制并显示连接到继电器的12V灯的当前状态，我们稍后会更详细地介绍。
- en: '**NOTE**'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Only devices that are connected to the same router as your Pi can access a
    web page hosted in your Pi through a browser. Accessing your web server from*
    outside *your network is more difficult. You can make your Raspberry Pi web server
    accessible from any computer anywhere by using a technique called* router port
    forwarding, *but that subject is beyond the book’s scope.*'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '*只有连接到与你的树莓派同一路由器的设备才能通过浏览器访问你树莓派上托管的网页。从* 外部 *网络访问你的Web服务器则更为困难。你可以通过使用一种叫做*路由器端口转发*的技术，使树莓派Web服务器可以从任何地方的计算机访问，但这一主题超出了本书的范围。*'
- en: '**INTRODUCING THE RELAY MODULE**'
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍继电器模块**'
- en: A *relay* is an electrically operated switch that can be turned on or off, letting
    the current go through or not, and can be controlled with low voltages, like the
    3.3 V provided by the Raspberry Pi. The relay module you’ll use in this project
    has two relays—the two blue cubes shown in [Figure 16-2](ch16.xhtml#ch16fig2).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '*继电器* 是一种电动开关，可以打开或关闭，允许电流通过或阻止电流流动，并且可以通过低电压控制，例如树莓派提供的3.3V。你将在本项目中使用的继电器模块有两个继电器——即[图16-2](ch16.xhtml#ch16fig2)中显示的两个蓝色方块。'
- en: '![image](../images/f0198-01.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0198-01.jpg)'
- en: '**FIGURE 16-2:** Relay module with two channels'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**图16-2：** 带有两个通道的继电器模块'
- en: The six pins on the left side of the relay module connect high voltage, and
    the pins on the right side connect the component that requires low voltage—the
    Raspberry Pi GPIOs.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 继电器模块左侧的六个针脚连接高电压，而右侧的针脚连接需要低电压的组件——树莓派GPIO。
- en: '**Relay Pinout**'
  id: totrans-173
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**继电器引脚分配**'
- en: 'The high-voltage side has two connectors, each with three sockets: *common
    (COM)*, *normally closed (NC)*, and *normally open (NO)*. The normally closed
    configuration is used when you want the relay to be closed by default, meaning
    the current is flowing unless you send a signal from the Pi to the relay module
    to open the circuit and stop the current. The normally open configuration works
    the other way around: the relay is always open, so the circuit is broken unless
    you send a signal from the Pi to close it.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 高压端有两个连接器，每个连接器有三个插孔：*公共（COM）*、*常闭（NC）* 和 *常开（NO）*。当你希望继电器默认闭合时使用常闭配置，意味着电流是流动的，除非你从树莓派向继电器模块发送信号来打开电路并停止电流。常开配置则相反：继电器始终保持打开状态，因此电路被切断，除非你从树莓派发送信号来闭合它。
- en: The low-voltage side has a set of four pins and a set of three pins. The first
    set consists of VCC and GND to power up the module, and input 1 (IN1) and input
    2 (IN2) to control the bottom and top relays, respectively. The second set of
    pins consists of GND, VCC, and JD-VCC pins. The JD-VCC pin powers the electromagnet
    of the relay. Notice that the module has a jumper cap connecting the VCC and JD-VCC
    pins; the one shown here is blue, but yours may be a different color.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 低压端有一组四个针脚和一组三个针脚。第一组包括VCC和GND，用于为模块供电，以及输入1（IN1）和输入2（IN2），分别用于控制底部和顶部的继电器。第二组针脚包括GND、VCC和JD-VCC针脚。JD-VCC针脚为继电器的电磁铁供电。请注意，模块上有一个跳线帽将VCC和JD-VCC针脚连接在一起；这里显示的是蓝色的，但你的可能是其他颜色。
- en: The jumper cap allows you to choose whether the circuit is physically connected
    to the Pi circuit or not, and you can choose to have it on or not. With the jumper
    cap on, the VCC and JD-VCC pins are connected. That means the relay electromagnet
    is directly powered from the Pi’s power pin, so the relay module and the Raspberry
    Pi circuits are not physically isolated from each other. This is the configuration
    we’ll use. Without the jumper cap, you need to provide an independent power source
    to power up the relay’s electromagnet through the JD-VCC pin. That configuration
    physically isolates the relays from the Raspberry Pi with the module’s built-in
    optocoupler, which prevents damage to the Pi in case of electrical spikes.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线帽允许你选择电路是否与树莓派电路物理连接，你可以选择是否将其打开。使用跳线帽时，VCC和JD-VCC引脚会连接。这意味着继电器电磁铁直接由树莓派的电源引脚供电，因此继电器模块和树莓派电路在物理上是相互连接的。这就是我们将使用的配置。如果没有跳线帽，你需要提供独立的电源，通过JD-VCC引脚为继电器电磁铁供电。这种配置通过模块内置的光耦合器将继电器与树莓派物理隔离，从而在电气浪涌发生时保护树莓派不受损坏。
- en: '**THE OPTOCOUPLER**'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**光耦合器**'
- en: We won’t go into too much detail about the optocoupler. It is basically a component
    that allows you to send signals between two isolated circuits so that you can
    control high voltages with low voltages without actually having a physical connection
    between those two circuits. The optocoupler makes the “connection” between the
    circuits using an LED that emits light and a phototransistor that receives the
    light and then activates or deactivates the relay.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会过多讨论光耦合器。它基本上是一个允许你在两个隔离电路之间发送信号的组件，这样你就可以用低电压控制高电压，而这两个电路之间实际上没有物理连接。光耦合器通过一个发光二极管（LED）发出光，再通过一个光敏晶体管接收光并激活或关闭继电器，从而在电路之间建立“连接”。
- en: '**Relay Usage**'
  id: totrans-179
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**继电器使用**'
- en: You’ll use a normally open configuration for this project. You want to light
    the lamp only when you choose to, so the circuit should be broken until you say
    otherwise. For this, you use the COM and NO sockets.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在这个项目中使用常开配置。你希望只有在你选择时才点亮灯泡，因此电路应该保持断开，直到你另行指示。为此，你将使用COM和NO插座。
- en: In a normally open configuration, there is no contact between the COM and NO
    sockets unless you trigger the relay. The relay is triggered when the input goes
    below about 2 V. That means if you send a LOW signal from the Pi, the relay turns
    on, and if you send a HIGH signal, the relay turns off; this is called *inverted
    logic*. You’ll control just one relay, so you’ll connect IN1 to one of the Pi’s
    GPIO pins.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在常开配置中，COM和NO插座之间没有接触，除非你触发继电器。继电器在输入电压低于约2V时被触发。这意味着如果你从树莓派发送低电平信号，继电器会打开；如果发送高电平信号，继电器会关闭；这被称为*反向逻辑*。你只需控制一个继电器，因此你将IN1连接到树莓派的一个GPIO引脚。
- en: '**WARNING**'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*If you’re not comfortable dealing with higher voltages like 12 V, but you
    want to do the project, you can replace the relay module with an LED. You’ll also
    need to make some minor changes to the Python script, since the relay works with
    inverted logic and the LED doesn’t.*'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你不太熟悉处理像12V这样的高电压，但又想做这个项目，你可以用LED替代继电器模块。你还需要对Python脚本做一些小改动，因为继电器是使用反向逻辑，而LED则不是。*'
- en: The hardware for the project involves connecting an AC 12 V power adapter that
    can provide 1 A to a relay module to control a 12 V lamp. We’ll use a DC barrel
    power jack to make the connections between the adapter and the relay easier. The
    barrel jack connects perfectly to the power adapter terminal, as shown in [Figure
    16-3](ch16.xhtml#ch16fig3).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的硬件涉及连接一个可以提供1A电流的AC 12V电源适配器到继电器模块，用以控制12V的灯泡。我们将使用一个DC圆形电源插孔，以便更容易地将适配器与继电器连接。圆形插孔与电源适配器端子完美对接，如[图
    16-3](ch16.xhtml#ch16fig3)所示。
- en: '![image](../images/f0199-01.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0199-01.jpg)'
- en: '**FIGURE 16-3:** Power adapter terminal and DC barrel power jack'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 16-3：** 电源适配器端子和DC圆形电源插孔'
- en: '**PROJECT OVERVIEW**'
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**项目概览**'
- en: Before getting into building this project, let’s go through a quick overview
    so you better understand each step (see [Figure 16-4](ch16.xhtml#ch16fig4)). You
    should also know the basics of HTML and CSS, so we recommend that you complete
    [Project 15](ch15.xhtml#ch15) if you haven’t already before moving on.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始构建这个项目之前，让我们先快速浏览一下概览，以便你更好地理解每一步（见[图 16-4](ch16.xhtml#ch16fig4)）。你还应该掌握HTML和CSS的基础知识，如果你还没有完成[项目
    15](ch15.xhtml#ch15)，我们建议你先完成它，然后再继续。
- en: '![image](../images/f0200-01.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0200-01.jpg)'
- en: '**FIGURE 16-4:** Project overview'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 16-4：** 项目概览'
- en: You’ll create your web server with Flask, a Python web framework, by creating
    a file called *app.py*. When you access the Raspberry Pi IP address, port 80,
    your web browser requests the web page files stored in your Raspberry Pi—*index.html*
    and *style.css*—and then displays the web page. Your web page will have ON and
    OFF buttons that trigger an event that turns the lamp on and off, respectively.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用Flask——一个Python的Web框架——来创建你的网页服务器，方法是创建一个名为*app.py*的文件。当你访问树莓派的IP地址，端口80时，你的网页浏览器会请求存储在树莓派中的网页文件——*index.html*和*style.css*——然后显示网页。你的网页将有ON和OFF按钮，分别触发开关灯的事件。
- en: '**WIRING THE CIRCUIT**'
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**电路连接**'
- en: For safety reasons, you’ll want to place your relay inside a plastic box enclosure.
    You may need to drill some holes in the plastic box for the wires—one hole for
    the Pi wires, another for the lamp wires, and one for the power adapter. [Figure
    16-5](ch16.xhtml#ch16fig5) shows how the enclosure looks without the lid. The
    Raspberry Pi wires will go through a hole on the lid.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 出于安全考虑，你需要将继电器放置在一个塑料外壳内。你可能需要在塑料外壳上打几个孔——一个孔用于树莓派的电缆，一个孔用于灯具电缆，另一个孔用于电源适配器。[图16-5](ch16.xhtml#ch16fig5)显示了没有盖子的外壳样子。树莓派的电缆将穿过盖子上的孔。
- en: '![image](../images/f0200-02.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0200-02.jpg)'
- en: '**FIGURE 16-5:** Circuit with the relay in a plastic box enclosure'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**图16-5：** 继电器放置在塑料外壳内的电路'
- en: '**NOTE**'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Make sure you have the jumper cap on the JD-VCC and VCC pins.*'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '*确保JD-VCC和VCC引脚上安装了跳线帽。*'
- en: 'With your Pi powered *off*, follow these instructions to build the circuit:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在树莓派关闭*电源*的情况下，按照以下说明搭建电路：
- en: Connect one of the lamp holder terminals to the negative (–) terminal on the
    DC barrel power jack.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个灯座终端连接到直流圆筒电源插座的负（–）端。
- en: Connect the DC barrel power jack positive (+) terminal to the relay COM socket.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将直流圆筒电源插座的正（+）端连接到继电器的COM插口。
- en: Connect the other lamp terminal to the relay NO socket. You need a screwdriver
    to connect the relay sockets tightly.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将另一个灯座终端连接到继电器的NO插口。你需要使用螺丝刀将继电器插座连接得很紧。
- en: Follow the table to wire the Raspberry Pi to the relay, and make sure your completed
    setup matches [Figure 16-6](ch16.xhtml#ch16fig6).
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照表格连接树莓派与继电器，并确保你的完成设置与[图16-6](ch16.xhtml#ch16fig6)一致。
- en: '| **RELAY** | **RASPBERRY PI** |'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **继电器** | **树莓派** |'
- en: '| --- | --- |'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| VCC | 5 V |'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| VCC | 5 V |'
- en: '| IN2 | Don’t connect |'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| IN2 | 不连接 |'
- en: '| IN1 | GPIO 17 |'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| IN1 | GPIO 17 |'
- en: '| GND | GND |'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| GND | GND |'
- en: '![image](../images/f0201-01.jpg)'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0201-01.jpg)'
- en: '**FIGURE 16-6:** Controlling a 12 V lamp with the Raspberry Pi using a relay'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图16-6：** 使用继电器通过树莓派控制12V灯具'
- en: '**WARNING**'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*Do not touch the relay or any live wires while they are connected to 12 V.
    If something isn’t working and you decide to make changes to the circuit, remove
    the 12 V power adapter plug from the socket before touching anything.*'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '*在继电器或任何接通12V电源的电缆连接时，请勿触碰它们。如果出现问题并且你决定更改电路，务必先从插座中拔掉12V电源适配器的插头，然后再动手。*'
- en: After completing the circuit and double-checking all the connections, apply
    power to the Raspberry Pi, connect a 12 V power adapter to the DC barrel power
    jack, and apply power by plugging the 12 V power adapter into a wall socket.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 完成电路并仔细检查所有连接后，给树莓派供电，连接一个12V电源适配器到直流圆筒电源插座，并通过将12V电源适配器插入墙壁插座来供电。
- en: If you want to control an LED instead, use the [Project 1](ch01.xhtml#ch01)
    schematic diagram on [page 41](ch01.xhtml#page_41) as a reference, connecting
    the LED to GPIO 17.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想控制一个LED，请参考[项目1](ch01.xhtml#ch01)原理图（见[第41页](ch01.xhtml#page_41)），将LED连接到GPIO
    17。
- en: '**PREPARING YOUR PI TO RUN A WEB SERVER**'
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**为树莓派准备运行Web服务器**'
- en: The Raspberry Pi supports a number of web servers, but we’re going to use Flask,
    a Python web framework, to turn the Pi into a dynamic web server.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派支持多种Web服务器，但我们将使用Flask，一个Python的Web框架，把树莓派变成一个动态Web服务器。
- en: '**Installing Flask**'
  id: totrans-217
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**安装Flask**'
- en: 'To install Flask, you need to have pip, a tool to install libraries from the
    Python Package Index. Open the terminal and run the following commands to update
    your Pi and install pip:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Flask，你需要使用pip——一个用于从Python包索引安装库的工具。打开终端并运行以下命令来更新树莓派并安装pip：
- en: '[PRE18]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then use pip to install Flask and its dependencies by entering the following:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用pip安装Flask及其依赖项，输入以下命令：
- en: '[PRE19]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If Flask installs correctly, the terminal will display the message `successfully
    installed Flask`.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Flask安装成功，终端将显示`成功安装Flask`的信息。
- en: '**Organizing Your Files**'
  id: totrans-223
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**组织文件**'
- en: Keeping your files organized is essential in this project because Flask needs
    your files structured in a particular way to work correctly. Create a folder specifically
    for this project called *Project_16* inside the *Web_Applications* folder. Then
    create the folders and files you’ll need by following the structure shown in [Figure
    16-7](ch16.xhtml#ch16fig7).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中保持文件有序非常重要，因为Flask需要你的文件以特定的方式进行结构化才能正确工作。为此项目创建一个名为`Project_16`的文件夹，放在`Web_Applications`文件夹内。然后按照[图16-7](ch16.xhtml#ch16fig7)中显示的结构创建所需的文件夹和文件。
- en: '![image](../images/f0202-01.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0202-01.jpg)'
- en: '**FIGURE 16-7:** Files and folders structure'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '**图16-7：** 文件和文件夹结构'
- en: Create the *index.html* and *style.css* files using the Text Editor and the
    *app.py* file using Python 3 (IDLE). The *static* folder will store static files
    like the CSS file. The *templates* folder will store files that can be changed;
    for example, the *index.html* file is a template that dynamically changes the
    relay status label according to user input.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 使用文本编辑器创建`index.html`和`style.css`文件，并使用Python 3（IDLE）创建`app.py`文件。`static`文件夹将存储静态文件，如CSS文件。`templates`文件夹将存储可更改的文件；例如，`index.html`文件是一个模板，根据用户输入动态更改继电器状态标签。
- en: '**WRITING THE SCRIPTS**'
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写脚本**'
- en: 'You’ll need to write three scripts for this project: a Python script that will
    create your Pi web server, an HTML file that builds your web page, and a CSS file
    to style your web page.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要为这个项目编写三个脚本：一个Python脚本用于创建Pi web服务器，一个HTML文件用于构建网页，另一个CSS文件用于设置网页样式。
- en: '**Creating the Web Server**'
  id: totrans-230
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建Web服务器**'
- en: To create the web server, open your *app.py* file, currently empty, and enter
    the code in [Listing 16-1](ch16.xhtml#ch16list1). This code creates the web server
    on Raspberry Pi port 80 and generates a web page that you can access on the local
    network, from any web browser. You can download all the code used throughout this
    project at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建web服务器，打开你目前为空的`app.py`文件，并输入[列表16-1](ch16.xhtml#ch16list1)中的代码。该代码会在Raspberry
    Pi的80端口创建web服务器，并生成一个网页，你可以在本地网络中的任何web浏览器上访问。你可以在*[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*下载在整个项目中使用的所有代码。
- en: '**LISTING 16-1:** Creating a web server with Flask'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表16-1：** 使用Flask创建web服务器'
- en: '[PRE20]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: First you import the needed libraries ➊, and then you create a Flask object
    called `app` ➋. You initialize the relay on GPIO 17 ➌ and set the relay as *off*
    by default. The relay works with inverted logic, so you use `relay.on()` to turn
    it off.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 首先导入所需的库 ➊，然后创建一个名为`app`的Flask对象 ➋。你在GPIO 17上初始化继电器 ➌，并默认将继电器设置为*关闭*状态。继电器使用反向逻辑，因此你需要使用`relay.on()`来关闭它。
- en: The `@app.route('/')` decorator ➍ runs the `main()` function when someone accesses
    the root URL—the main Pi IP address of the server. In Python, a *decorator* starts
    with the `@` symbol and goes above a function definition. A decorator is basically
    a function that takes in another function, but you don’t need to worry about this
    for the moment.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`@app.route(''/'')`装饰器 ➍ 在有人访问根URL（即服务器的Pi主IP地址）时运行`main()`函数。在Python中，*装饰器*以`@`符号开始，位于函数定义的上方。装饰器基本上是一个接受另一个函数的函数，但你暂时不需要担心这个。'
- en: You render the *index.html* file to the web browser and print the current relay
    state, using the `relay_state` variable value on the HTML file ➎. Then you add
    a dynamic route with `action` as a variable ➏. This runs the `control()` function
    when someone accesses the dynamic route. If the action from the URL is `on`, the
    program turns the relay on and saves the current relay state ➐. This means when
    you access your Raspberry Pi IP address followed by `/on` (for example, `http://192.168.1.112/on`),
    the relay turns on. You’ll fetch your own IP address shortly.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 你将`index.html`文件渲染到web浏览器，并使用HTML文件中的`relay_state`变量值打印当前继电器状态 ➎。然后，你添加一个动态路由，将`action`作为变量
    ➏。当有人访问这个动态路由时，`control()`函数会被触发。如果URL中的`action`是`on`，程序就会打开继电器并保存当前继电器状态 ➐。也就是说，当你访问Raspberry
    Pi的IP地址并后跟`/on`（例如`http://192.168.1.112/on`）时，继电器会打开。稍后你会获取到你自己的IP地址。
- en: If the action from the URL is `off`, the program turns the relay off and saves
    the current relay state. The server is listening on port 80 and the debug is set
    to `True` to report any errors ➑.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果URL中的`action`是`off`，程序会关闭继电器并保存当前继电器状态。服务器监听80端口，并将调试模式设置为`True`，以报告任何错误 ➑。
- en: '**Writing the HTML File**'
  id: totrans-238
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写HTML文件**'
- en: '[Listing 16-2](ch16.xhtml#ch16list2) is a simple HTML document that structures
    the web page. Feel free to add more paragraphs and headings to personalize it
    using what you learned in [Project 15](ch15.xhtml#ch15). Copy this code to your
    *index.html* file, which should be located in the *templates* folder as shown
    earlier in [Figure 16-7](ch16.xhtml#ch16fig7).'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 16-2](ch16.xhtml#ch16list2) 是一个简单的 HTML 文档，用于构建网页结构。随意添加更多段落和标题，以使用你在[项目
    15](ch15.xhtml#ch15)中学到的知识对其进行个性化设置。将此代码复制到你的 *index.html* 文件中，该文件应位于 *templates*
    文件夹中，如前面的[图 16-7](ch16.xhtml#ch16fig7)所示。'
- en: '**LISTING 16-2:** Writing the HTML file for your web page'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 16-2:** 为你的网页编写 HTML 文件'
- en: '[PRE21]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This is a simple HTML structure, and we won’t go into too much detail in this
    HTML code, because you should already be familiar with most of it from [Project
    15](ch15.xhtml#ch15). You can always refer back to that project for a refresher.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的 HTML 结构，我们不会在这个 HTML 代码中深入探讨太多细节，因为你应该已经熟悉[项目 15](ch15.xhtml#ch15)中的大部分内容。你可以随时回顾该项目以进行复习。
- en: The `<meta>` tag and the given attributes make your web page responsive in any
    mobile browser ➊. With this tag, the browser will render the width of the page
    to the width of the mobile screen. At line ➋, between double curly brackets `{{
    }}`, is `relay_state`, the variable we’re using in *app.py* to save the current
    relay state. This paragraph displays the state saved in the `relay_state` variable.
    When you click the ON button, you are redirected to `/on` root ➌, which turns
    the relay on, as seen in *app.py*. When you click the OFF button, you are redirected
    to the `/off` root ➍, which turns the relay off.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`<meta>` 标签和给定的属性使你的网页在任何移动浏览器中都具有响应性 ➊。使用此标签，浏览器会将页面的宽度渲染为移动屏幕的宽度。在第 ➋ 行，在双花括号
    `{{ }}` 之间，是 `relay_state`，这是我们在 *app.py* 中用于保存当前继电器状态的变量。此段落显示保存在 `relay_state`
    变量中的状态。当你单击 ON 按钮时，你将被重定向到 `/on` 根目录 ➌，这将打开继电器，如 *app.py* 中所示。当你单击 OFF 按钮时，你将被重定向到
    `/off` 根目录 ➍，这将关闭继电器。'
- en: '**Writing the CSS File**'
  id: totrans-244
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写 CSS 文件**'
- en: '[Listing 16-3](ch16.xhtml#ch16list3) styles your web page. This is just an
    example of how you can style your page; you can edit the properties as you like.
    Your *style.css* file should be inside the *static* folder, as you saw earlier
    in [Figure 16-7](ch16.xhtml#ch16fig7).'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 16-3](ch16.xhtml#ch16list3) 设置你的网页样式。这只是一个如何设置页面样式的示例；你可以根据需要编辑属性。你的 *style.css*
    文件应位于 *static* 文件夹中，如你在前面的[图 16-7](ch16.xhtml#ch16fig7)中看到的那样。'
- en: '**LISTING 16-3:** Styling the web page with CSS'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 16-3:** 使用 CSS 设置网页样式'
- en: '[PRE22]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In summary, we’ve set font sizes for the heading 2 and the paragraph ➊. Then,
    we’ve aligned all our page body ➋. Finally, we’ve edited the appearance of the
    ON and OFF buttons ➌.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 总而言之，我们已经为标题 2 和段落 ➊ 设置了字体大小。然后，我们对齐了所有页面主体 ➋。最后，我们编辑了 ON 和 OFF 按钮的外观 ➌。
- en: '**Launching Your Web Server**'
  id: totrans-249
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**启动你的 Web 服务器**'
- en: 'With the Python script, HTML file, and CSS file completed, it’s time to run
    your web server. Open the terminal window and navigate to the *Project_16* folder
    by entering this command:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 完成 Python 脚本、HTML 文件和 CSS 文件后，就可以运行你的 Web 服务器了。打开终端窗口并通过输入以下命令导航到 *Project_16*
    文件夹：
- en: '[PRE23]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, run *app.py* with the following line:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下行运行 *app.py*：
- en: '[PRE24]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Your web server is now running. Open any browser on the local network and enter
    your Raspberry Pi IP address.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 Web 服务器现在正在运行。在本地网络上的任何浏览器中打开并输入你的 Raspberry Pi IP 地址。
- en: 'To find your Pi’s IP address, go to the terminal and enter the following:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找你的 Pi 的 IP 地址，请转到终端并输入以下内容：
- en: '[PRE25]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This prints the Pi’s IP address.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印 Pi 的 IP 地址。
- en: With your circuit ready and your server running, open a browser and navigate
    to your Raspberry Pi IP address. Your browser will display the web server page.
    Now click the buttons to remotely control the lamp! [Figure 16-8](ch16.xhtml#ch16fig8)
    shows the web page in a smartphone’s browser.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的电路准备就绪并且服务器正在运行的情况下，打开浏览器并导航到你的 Raspberry Pi IP 地址。你的浏览器将显示 Web 服务器页面。现在点击按钮来远程控制灯！[图
    16-8](ch16.xhtml#ch16fig8) 显示了智能手机浏览器中的网页。
- en: '![image](../images/f0207-01.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0207-01.jpg)'
- en: '**FIGURE 16-8:** Raspberry Pi web server page on a smartphone’s browser'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 16-8:** 智能手机浏览器上的 Raspberry Pi Web 服务器页面'
- en: To stop the web server, simply press CTRL-C.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止 Web 服务器，只需按 CTRL-C。
- en: '**TAKING IT FURTHER**'
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步探索**'
- en: 'In this project, you learned how to use a relay and how to set up a web server
    to serve a web page, as well as put your HTML and CSS skills into practice. Here
    are some ideas for taking these concepts further:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你学习了如何使用继电器以及如何设置 Web 服务器来提供网页，以及如何将你的 HTML 和 CSS 技能付诸实践。以下是一些进一步扩展这些概念的想法：
- en: Edit this project to control more than one output.
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑此项目以控制多个输出。
- en: Edit the CSS and HTML files to suit your own tastes.
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑 CSS 和 HTML 文件以符合您的个人口味。
- en: Control other electronic appliances.
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制其他电子设备。
- en: Edit previous projects to control lamps connected to relays instead of LEDs.
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑以前的项目以控制连接到继电器的灯，而不是 LED。
- en: '**17'
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**17'
- en: Internet of Things Control Center with Node-RED**
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Node-RED 的物联网控制中心**
- en: In this project, you’ll create an Internet of Things app to control your favorite
    household electronics from a web server using Node-RED, a powerful and easy-to-use
    tool for Internet of Things applications.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，您将创建一个物联网应用，通过一个网络服务器使用 Node-RED 来控制您最喜爱的家庭电子设备，Node-RED 是一个功能强大且易于使用的物联网应用工具。
- en: '![image](../images/f0209-01.jpg)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0209-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需零件**'
- en: Raspberry Pi
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派
- en: Breadboard
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板
- en: DHT22 temperature and humidity sensor
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: DHT22 温湿度传感器
- en: 4.7 kΩ resistor
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 4.7 kΩ 电阻
- en: Two 5 mm LEDs
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 5 mm LED
- en: Two 330 Ω resistor
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 330 Ω 电阻
- en: Jumper wires
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线
- en: '**SOFTWARE REQUIRED**'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需软件**'
- en: Node-RED DHT node
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED DHT 节点
- en: Node-RED dashboard
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED 仪表盘
- en: You’re going to create a Node-RED application that controls outputs and reads
    inputs in the local network. You’ll use it to control LEDs, as well as to read
    and display temperature and humidity values using the DHT22 sensor—all remotely
    through a web server.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 您将创建一个 Node-RED 应用，控制本地网络中的输出并读取输入。您将用它来控制 LED，以及使用 DHT22 传感器远程读取和显示温湿度值——所有操作都通过网络服务器完成。
- en: '**INTRODUCING NODE-RED**'
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍 Node-RED**'
- en: Node-RED is an open source visual wiring tool for building IoT applications
    that comes already installed on your Pi’s operating system and is designed to
    run perfectly with the Pi.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED 是一个开源的可视化接线工具，用于构建物联网应用，它已经预安装在您的树莓派操作系统中，并且与树莓派完美兼容。
- en: Node-RED uses visual programming, with blocks called *nodes* that you wire together
    to perform a certain task, simplifying much of the programming significantly.
    Node-RED allows you to prototype a complex home automation system quickly and
    simply, giving you more time to spend on designing and making cool stuff.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED 使用视觉编程，具有称为 *节点* 的模块，您可以将它们连接起来以执行某项任务，从而大大简化了编程。Node-RED 允许您快速而简单地原型化一个复杂的家庭自动化系统，让您有更多时间去设计和制作酷炫的东西。
- en: 'We won’t cover everything that Node-RED can do in this project, but here’s
    a brief breakdown if you want to explore further:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个项目中不会涵盖 Node-RED 的所有功能，但如果您想进一步探索，这里有一个简要概述：
- en: Access the Pi’s GPIOs.
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问树莓派的 GPIO 引脚。
- en: Establish a connection with other boards like the Arduino and ESP8266.
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 Arduino 和 ESP8266 等其他板子建立连接。
- en: Create a responsive graphical user interface.
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个响应式图形用户界面。
- en: Communicate with third-party services.
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与第三方服务进行通信。
- en: Retrieve data from the web.
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从网页获取数据。
- en: Create time-triggered events.
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建时间触发事件。
- en: Store and retrieve data from a database.
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储和检索数据库中的数据。
- en: '**Installing the DHT22 Nodes**'
  id: totrans-295
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**安装 DHT22 节点**'
- en: 'Although the Node-RED software comes already installed with the Pi’s operating
    system, it doesn’t come with a node able to read from the DHT22 sensor. We need
    to install that first, by installing npm (Node Package Management) like so:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Node-RED 软件已经预装在树莓派的操作系统中，但它没有提供能够读取 DHT22 传感器的节点。我们需要先安装它，方法是通过 npm（Node
    包管理）来安装，如下所示：
- en: '[PRE26]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'When prompted, type Y and press ENTER. The installation may take a few minutes.
    Then, enter the following command to upgrade npm to the latest 3.x version, which
    is the version recommended for use with Node-RED:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 当提示时，键入 Y 并按 ENTER。安装过程可能需要几分钟。然后，输入以下命令以将 npm 升级到推荐用于 Node-RED 的最新 3.x 版本：
- en: '[PRE27]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: These commands will output a warning message, but don’t worry—it’s harmless,
    so you can ignore it.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将输出警告消息，但不用担心——它是无害的，您可以忽略它。
- en: Next you’ll download and unzip a C library for the Raspberry Pi. You need this
    library to control DHT22 through Node-RED. At the time of writing, the latest
    version of the library is 1.55\. Before you install the library, go to *[http://www.airspayce.com/mikem/bcm2835/](http://www.airspayce.com/mikem/bcm2835/)*
    and check the latest version. Then, enter the following commands, replacing the
    `1.55` highlighted in italics with the latest version.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将下载并解压一个适用于树莓派的 C 库。您需要这个库来通过 Node-RED 控制 DHT22。本文撰写时，库的最新版本是 1.55。安装该库之前，请访问
    *[http://www.airspayce.com/mikem/bcm2835/](http://www.airspayce.com/mikem/bcm2835/)*
    检查最新版本。然后，输入以下命令，将斜体显示的 `1.55` 替换为最新版本。
- en: '[PRE28]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Finally, enter the following list of commands to compile and install the nodes
    needed to control the DHT22 sensor and add dashboard support:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，输入以下命令列表以编译和安装控制 DHT22 传感器和添加仪表盘支持所需的节点：
- en: '[PRE29]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: With all of that installed, reboot your Pi. Now we’ll give you a quick tour
    of Node-RED.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有安装后，重启你的 Pi。现在我们将简要介绍一下 Node-RED。
- en: '**Getting Started with Node-RED**'
  id: totrans-306
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**开始使用 Node-RED**'
- en: 'To open Node-RED, go to the terminal and enter the following:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开 Node-RED，请进入终端并输入以下命令：
- en: '[PRE30]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Your terminal window should show something like [Figure 17-1](ch17.xhtml#ch17fig1).
    The highlighted line shows your localhost’s Raspberry Pi IP address followed by
    the number of the port the Node-RED server is running on. *Localhost* is a hostname
    that means “this computer” and resolves to the IP address shown in the terminal
    window: http://127.0.0.1\. Using this IP address you can access Node-RED only
    in your Raspberry Pi browser. To access Node-RED in any browser on your local
    network, you need to find your Pi’s IP address.'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 你的终端窗口应该显示类似于 [图 17-1](ch17.xhtml#ch17fig1) 的内容。高亮的那一行显示的是本地主机的 Raspberry Pi
    IP 地址，后面跟着 Node-RED 服务器运行的端口号。*本地主机* 是一个主机名，意思是“这台计算机”，并解析为终端窗口中显示的 IP 地址：http://127.0.0.1\。使用这个
    IP 地址你只能在 Raspberry Pi 浏览器中访问 Node-RED。要在本地网络的任何浏览器中访问 Node-RED，你需要找到 Pi 的 IP
    地址。
- en: '**NOTE**'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Usually, instead of going to the terminal, you can open Node-RED by going
    to the taskbar main menu and clicking **Programming ▸ Node-RED**. However, in
    this project, you need to start Node-RED from the terminal because DHT22 nodes
    require administrator permission.*'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '*通常，你可以不通过终端，而是通过点击任务栏主菜单中的 **编程 ▸ Node-RED** 来打开 Node-RED。然而，在这个项目中，你需要从终端启动
    Node-RED，因为 DHT22 节点需要管理员权限。*'
- en: '![image](../images/f0212-01.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0212-01.jpg)'
- en: '**FIGURE 17-1:** Starting Node-RED from the terminal'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 17-1：** 从终端启动 Node-RED'
- en: 'To find your Raspberry Pi IP address, enter the following in the terminal:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找你的 Raspberry Pi 的 IP 地址，请在终端中输入以下命令：
- en: '[PRE31]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Open Chromium and enter *http://<Pi IP address>:1880/*, replacing *<Pi IP address>*
    with your Raspberry Pi’s IP address. Your Node-RED page server should open as
    shown in [Figure 17-2](ch17.xhtml#ch17fig2).
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 Chromium 浏览器并输入 *http://<Pi IP 地址>:1880/*，将 *<Pi IP 地址>* 替换为你的 Raspberry
    Pi 的 IP 地址。你的 Node-RED 页面服务器应该会如 [图 17-2](ch17.xhtml#ch17fig2) 所示打开。
- en: '![image](../images/f0212-02.jpg)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0212-02.jpg)'
- en: '**FIGURE 17-2:** The Node-RED editor in your browser'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 17-2：** 浏览器中的 Node-RED 编辑器'
- en: On the left you’ll see a list of blocks, or nodes. Nodes are grouped according
    to their function; scroll down the list to see what you have. We’ll just cover
    a small number of existing nodes in this project, including nodes from the input,
    Raspberry_Pi, function, and dashboard sections, illustrated in [Figure 17-3](ch17.xhtml#ch17fig3).
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，你将看到一个块或节点的列表。节点根据它们的功能进行分组；向下滚动列表以查看你有哪些节点。在本项目中，我们将介绍少数现有节点，包括来自输入、Raspberry_Pi、功能和仪表盘部分的节点，如
    [图 17-3](ch17.xhtml#ch17fig3) 所示。
- en: '![image](../images/f0213-01.jpg)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0213-01.jpg)'
- en: '**FIGURE 17-3:** Some of the Node-RED nodes'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 17-3：** 一些 Node-RED 节点'
- en: 'The center box of your Node-RED page is the *flow* section; this is where you
    drag the nodes and wire them together to build your application. On the right
    are several tabs: the *info* tab shows information about a selected node, the
    *debug* tab is used for debugging purposes, and the *dashboard* tab is where you
    organize the user interface widgets of your application. Finally, the *Deploy*
    button saves the changes made to the flow and executes it. Next you’ll wire up
    your hardware, and then put together your flow in Node-RED.'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED 页面中的中央框是 *流程* 部分；这是你拖拽节点并将它们连接在一起以构建应用程序的地方。右侧有几个选项卡：*信息* 选项卡显示所选节点的信息，*调试*
    选项卡用于调试，*仪表盘* 选项卡是你组织应用程序用户界面控件的地方。最后，*部署* 按钮保存对流程所做的更改并执行它。接下来，你将连接硬件，并在 Node-RED
    中组装你的流程。
- en: '**WIRING THE CIRCUIT**'
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**电路连接**'
- en: 'You should already be familiar with LEDs and the DHT22 sensor, but for a refresher
    on the DHT22 sensor, check [Project 12](ch12.xhtml#ch12). To wire the circuit,
    follow these instructions:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经熟悉 LED 和 DHT22 传感器，但如果你需要复习 DHT22 传感器，请查看 [项目 12](ch12.xhtml#ch12)。要连接电路，请按照以下说明操作：
- en: Connect 5 V and GND from the Pi to a red and blue breadboard rail, respectively.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Pi 的 5 V 和 GND 分别连接到面包板的红色和蓝色轨道上。
- en: Insert two LEDs into the breadboard. Wire the shorter lead of each LED to the
    GND rail through a 330 Ω resistor. Wire the longer lead of one LED to GPIO 18,
    and the longer lead of the other LED to GPIO 17.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个 LED 插入面包板中。将每个 LED 的短引脚通过一个 330 Ω 电阻接到 GND 排，较长引脚分别连接到 GPIO 18 和 GPIO 17。
- en: Insert the DHT22 into the breadboard (with the raised side facing you) and wire
    it according to the following table. Your completed circuit should match [Figure
    17-4](ch17.xhtml#ch17fig4).
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 DHT22 插入面包板（带凸起的一面朝向你），并按照下表接线。完成的电路应与 [图 17-4](ch17.xhtml#ch17fig4) 相匹配。
- en: '| **DHT22** | **RASPBERRY PI** |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| **DHT22** | **树莓派** |'
- en: '| --- | --- |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 1 | 3.3 V |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 3.3 V |'
- en: '| 2 | GPIO 4 and 3.3 V (via 4.7 kΩ resistor) |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| 2 | GPIO 4 和 3.3 V（通过 4.7 kΩ 电阻） |'
- en: '| 3 | Don’t connect |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 不连接 |'
- en: '| 4 | GND |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| 4 | GND |'
- en: '![image](../images/f0214-01.jpg)'
  id: totrans-334
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0214-01.jpg)'
- en: '**FIGURE 17-4:** Wiring the DHT22 and two LEDs to the Pi'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 17-4：** 将 DHT22 和两个 LED 连接到树莓派'
- en: '**CREATING THE FLOW**'
  id: totrans-336
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**创建流程**'
- en: 'The script, in this case, is the flow you’ll make in Node-RED. This flow will
    allow you to do the following:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本在这里指的是你将在 Node-RED 中创建的流程。这个流程将允许你执行以下操作：
- en: Control an LED with an on and off switch. This LED will also be time-sensitive,
    which means it will automatically light up and turn off at a specific time that
    you set.
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用开关控制一个 LED。这颗 LED 还将具有时间敏感性，也就是说，它将在你设定的特定时间自动点亮并熄灭。
- en: Control another LED with PWM using a slider to act as a dimmer switch.
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用滑块通过 PWM 控制另一个 LED，作为调光开关。
- en: Read the temperature from the DHT22 sensor and display it on a time-versus-temperature
    chart.
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 DHT22 传感器读取温度，并将其显示在时间与温度的图表上。
- en: Read the humidity from the DHT22 sensor and display it on a gauge.
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 DHT22 传感器读取湿度并显示在仪表上。
- en: First you’ll make the user interface you’ll use to control the components from
    your server.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要创建一个用户界面，用于从服务器控制各个组件。
- en: '**Creating the Dashboard User Interface**'
  id: totrans-343
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建仪表板用户界面**'
- en: Nodes from the dashboard section provide widgets that show up in your application
    user interface (UI) to control components. Every widget—like a button, slider,
    or chart—you add to the flow has to be associated with a *group* that tells the
    widget where it should appear on the UI.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 来自仪表板部分的节点提供了在应用程序用户界面（UI）中显示的小部件，用于控制各个组件。你添加到流程中的每个小部件——如按钮、滑块或图表——都必须与一个
    *组* 相关联，组会告知该小部件在 UI 中应该出现的位置。
- en: You’ll also need tabs, which are like pages in your application (like tabs in
    a browser). Groups are sections within a tab, where you can group widgets together.
    In any project, you’ll need to create tabs and groups in your dashboard to organize
    the widgets in the UI. You’ll build a tab called “Home” with one group called
    “Dashboard.”
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要选项卡，就像应用程序中的页面一样（类似于浏览器中的标签页）。组则是选项卡内的部分，你可以在其中将小部件分组。在任何项目中，你都需要在仪表板中创建选项卡和组，以便组织
    UI 中的小部件。你将创建一个名为“Home”的选项卡，其中有一个名为“Dashboard”的组。
- en: Using [Figure 17-5](ch17.xhtml#ch17fig5) as a reference, select the **dashboard**
    tab ➊ in the top right and then press the **+ tab** button ➋ to create a new tab
    under the Tabs list. Click **edit** to edit the tab ➌ and enter the name Home.
    Once that’s created, press the **+ group** button ➍ to create a new group; then
    click **edit** ➎ and enter the name Dashboard.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 参考 [图 17-5](ch17.xhtml#ch17fig5)，点击右上角的 **仪表板** 选项卡 ➊，然后按 **+ 选项卡** 按钮 ➋ 创建一个新选项卡。点击
    **编辑** 来编辑选项卡 ➌，并输入名称“Home”。创建后，按 **+ 组** 按钮 ➍ 创建一个新组；然后点击 **编辑** ➎ 并输入名称“Dashboard”。
- en: '![image](../images/f0215-01.jpg)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0215-01.jpg)'
- en: '**FIGURE 17-5:** Creating tabs and groups in the dashboard'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 17-5：** 在仪表板中创建选项卡和组'
- en: To see how your dashboard currently looks, go to *http://<Pi IP address>:1880/ui*
    in your browser, replacing *<Pi IP address>* with your Raspberry Pi’s IP address
    you got earlier. As you can see in [Figure 17-6](ch17.xhtml#ch17fig6), your user
    interface is empty at the moment because you haven’t added any widgets, so let’s
    add some functionality next.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看当前仪表板的样子，打开浏览器并访问 *http://<Pi IP 地址>:1880/ui*，将 *<Pi IP 地址>* 替换为你之前获得的树莓派
    IP 地址。如 [图 17-6](ch17.xhtml#ch17fig6) 所示，目前你的用户界面是空的，因为你还没有添加任何小部件，接下来我们将添加一些功能。
- en: '![image](../images/f0216-01.jpg)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0216-01.jpg)'
- en: '**FIGURE 17-6:** The Node-RED user interface'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 17-6：** Node-RED 用户界面'
- en: '**Wiring the Nodes**'
  id: totrans-352
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接节点**'
- en: Now you’re going to add nodes to your flow. Your flow will control the LEDs
    connected to the Raspberry Pi GPIOs and read temperature and humidity from the
    DHT22 sensor.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将向流程中添加节点。你的流程将控制连接到树莓派 GPIO 的 LED，并从 DHT22 传感器读取温度和湿度。
- en: '**Adding a Switch and Scheduling Events**'
  id: totrans-354
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**添加开关和调度事件**'
- en: Go back to the Node-RED editor and add two inject nodes from the input section
    by dragging them into the flow. When you drop them in the flow, their name will
    change to *timestamp*. Add a switch from the dashboard section, and an rpi gpio
    output node (the one with a joint on the left side) from the Raspberry_Pi nodes
    section. Arrange the nodes and wire them as shown in [Figure 17-7](ch17.xhtml#ch17fig7).
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到 Node-RED 编辑器，拖动两个注入节点到流程中的输入部分。当你将它们放入流程中时，它们的名称会变为*时间戳*。从仪表盘部分添加一个开关，并从
    Raspberry_Pi 节点部分添加一个 rpi gpio 输出节点（左侧有接头的那个）。按照 [图 17-7](ch17.xhtml#ch17fig7)
    中所示的方式排列这些节点并将它们连接起来。
- en: '![image](../images/f0216-02.jpg)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0216-02.jpg)'
- en: '**FIGURE 17-7:** The flow for controlling LED 1'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 17-7：** 控制 LED 1 的流程'
- en: This set of nodes controls the LED connected to GPIO 17\. This LED can be controlled
    remotely with an on and off switch, and it is also time sensitive; timestamp 1
    determines the time the LED lights up, and timestamp 2 determines the time the
    LED turns off.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 这组节点控制连接到 GPIO 17 的 LED。该 LED 可以通过开关进行远程控制，且具有时间敏感性；时间戳 1 确定 LED 点亮的时间，而时间戳
    2 确定 LED 关闭的时间。
- en: 'If you double-click a node, a new window will open that allows you to edit
    the node’s properties. Double-click the first timestamp node and edit its properties
    like so: set the payload number to **1**, which sends 1 to the Raspberry Pi GPIO
    17 when this node is triggered. In the repeat field, select **at a specific time**
    and choose the time and day you want your LED to light up; you’ll choose the time
    to turn it off in timestamp 2\. We chose 19:00 (7 PM) for all days of the week.
    You can choose whatever times and days you want. The name field lets you name
    the node, and in our case we’ve called it **On at 7PM**. When you’re done editing
    your node, click the **Done** button. [Figure 17-8](ch17.xhtml#ch17fig8) shows
    the properties we set for this node.'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你双击一个节点，新的窗口将打开，允许你编辑该节点的属性。双击第一个时间戳节点并按如下方式编辑其属性：将有效负载数字设置为**1**，这样当该节点被触发时，会向树莓派
    GPIO 17 发送 1。在重复字段中，选择**在特定时间**并选择你希望 LED 点亮的时间和日期；你将在时间戳 2 中选择关闭时间。我们为一周的所有天选择了
    19:00（晚上 7 点）。你可以选择任何你希望的时间和日期。名称字段允许你为节点命名，在我们的例子中，我们将其命名为**晚上 7 点开**。编辑完节点后，点击**完成**按钮。[图
    17-8](ch17.xhtml#ch17fig8) 显示了我们为此节点设置的属性。
- en: '![image](../images/f0217-01.jpg)'
  id: totrans-360
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0217-01.jpg)'
- en: '**FIGURE 17-8:** Editing the inject node properties'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 17-8：** 编辑注入节点属性'
- en: Edit the other nodes’ properties to match those in the following table.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑其他节点的属性，使其与下表中的内容一致。
- en: '| **NODE** | **PROPERTIES** |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
  zh: '| **节点** | **属性** |'
- en: '| --- | --- |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| timestamp | Payload: number 1 Repeat: at a specific time'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '| 时间戳 | 有效负载: 数字 1 重复: 在特定时间'
- en: 'At: 19:00'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 时间：19:00
- en: 'On: select all days |'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 开：选择所有日期 |
- en: '| timestamp | Payload: number 0 Repeat: at a specific time'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '| 时间戳 | 有效负载: 数字 0 重复: 在特定时间'
- en: 'At: 23:00'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 时间：23:00
- en: 'On: select all days |'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 开：选择所有日期 |
- en: '| switch | Group: Dashboard [Home] Label: LED 1'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '| 开关 | 分组: 仪表盘 [首页] 标签: LED 1'
- en: 'On Payload: number 1'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 开启有效负载：数字 1
- en: 'Off Payload: number 0'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭有效负载：数字 0
- en: 'Name: LED 1 – Switch |'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 名称：LED 1 – 开关 |
- en: '| pin | GPIO: GPIO17 – 11 Type: Digital output'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '| 引脚 | GPIO: GPIO17 – 11 类型: 数字输出'
- en: 'Name: LED 1 – GPIO 17 |'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 名称：LED 1 – GPIO 17 |
- en: To run your Node-RED application, click the **Deploy** button at the top right.
    This will also save the changes. To see how your application looks, go to *http://<Pi
    IP address>:1880/ui* in the browser. At this point, it should look like [Figure
    17-9](ch17.xhtml#ch17fig9).
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行你的 Node-RED 应用程序，点击右上角的**部署**按钮。这也将保存更改。要查看应用程序的效果，请在浏览器中访问*http://<Pi IP
    地址>:1880/ui*。此时，应该与 [图 17-9](ch17.xhtml#ch17fig9) 类似。
- en: '![image](../images/f0218-01.jpg)'
  id: totrans-378
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0218-01.jpg)'
- en: '**FIGURE 17-9:** The user interface with the LED 1 control switch'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 17-9：** 带有 LED 1 控制开关的用户界面'
- en: Click the switch to test whether you can control the LED connected to GPIO 17\.
    If not, go back and make sure you’ve wired your nodes correctly and set the right
    properties.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 点击开关测试是否可以控制连接到 GPIO 17 的 LED。如果不能，请返回并确保你已正确接线并设置了正确的属性。
- en: '**Adding a Slider**'
  id: totrans-381
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**添加滑块**'
- en: Now, you’ll add the nodes to control the brightness of the LED connected to
    GPIO 18\. Drag a slider and an rpi gpio output node into the flow, and arrange
    them as in [Figure 17-10](ch17.xhtml#ch17fig10).
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将添加节点来控制连接到 GPIO 18 的 LED 的亮度。将一个滑块和一个 rpi gpio 输出节点拖入流程，并按照 [图 17-10](ch17.xhtml#ch17fig10)
    中所示的方式排列它们。
- en: '![image](../images/f0218-02.jpg)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0218-02.jpg)'
- en: '**FIGURE 17-10:** The flow for controlling LED 1 and LED 2'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 17-10：** 控制 LED 1 和 LED 2 的流程'
- en: Edit the new nodes’ properties as shown in the following table.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 按照下表中的设置编辑新节点的属性。
- en: '| **NODE** | **PROPERTIES** |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| **节点** | **属性** |'
- en: '| --- | --- |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| slider | Group: Dashboard [Home] Label: LED 2'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '| 滑块 | 分组：仪表盘 [主页] 标签：LED 2'
- en: 'Range: min:0; max:100; step:1'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 范围：最小值：0；最大值：100；步长：1
- en: 'Name: LED 2 – Slider |'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 名称：LED 2 – 滑块 |
- en: '| pin | GPIO: 12 – GPIO18 Type: PWM output'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '| 引脚 | GPIO：12 – GPIO18 类型：PWM输出'
- en: 'Name: LED 2 – GPIO 18 |'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 名称：LED 2 – GPIO 18 |
- en: This new set of nodes controls the LED connected to GPIO 18 using PWM. Moving
    the slider will change the LED brightness. Click the **Deploy** button, go to
    the Node-RED UI, and test your application. It should look something like [Figure
    17-11](ch17.xhtml#ch17fig11).
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 这一组新的节点通过PWM控制连接到GPIO 18的LED。移动滑块将改变LED的亮度。点击 **部署** 按钮，进入Node-RED UI，测试你的应用程序。它应该看起来像[图
    17-11](ch17.xhtml#ch17fig11)。
- en: '![image](../images/f0219-01.jpg)'
  id: totrans-394
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0219-01.jpg)'
- en: '**FIGURE 17-11:** The user interface with the LED 1 switch and the LED 2 slider'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 17-11：** 带有LED 1开关和LED 2滑块的用户界面'
- en: '**Adding a Temperature Chart and Humidity Gauge**'
  id: totrans-396
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**添加温度图表和湿度计**'
- en: Finally, to create a temperature chart and a humidity gauge, drag an inject
    node, rpi dht22 node, function node, a chart, and a gauge to the flow. The chart
    and the gauge are dashboard nodes. Arrange the nodes so your flow looks like [Figure
    17-13](ch17.xhtml#ch17fig13).
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要创建温度图表和湿度计，拖动一个注入节点、rpi dht22节点、功能节点、图表和湿度计到流程中。图表和湿度计是仪表盘节点。排列这些节点，使你的流程像[图
    17-13](ch17.xhtml#ch17fig13)那样。
- en: '![image](../images/f0219-02.jpg)'
  id: totrans-398
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0219-02.jpg)'
- en: '**FIGURE 17-12:** The complete Node-RED flow'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 17-12：** 完整的Node-RED流程'
- en: Edit the new nodes’ properties with the settings in the following table.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 使用下表中的设置编辑新节点的属性。
- en: '| **NODE** | **PROPERTIES** |'
  id: totrans-401
  prefs: []
  type: TYPE_TB
  zh: '| **节点** | **属性** |'
- en: '| --- | --- |'
  id: totrans-402
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| timestamp | Payload: Boolean true Repeat: interval'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '| 时间戳 | 负载：布尔值true 重复：间隔'
- en: 'Every: 1 minute'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 每隔：1分钟
- en: 'Name: Read DHT22 |'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 名称：读取DHT22 |
- en: '| rpi-dht22 | Sensor model: DHT22 Pin numbering: BCM GPIO'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '| rpi-dht22 | 传感器型号：DHT22 引脚编号：BCM GPIO'
- en: 'Pin number: 4'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 引脚编号：4
- en: 'Name: DHT22 – GPIO 4 |'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 名称：DHT22 – GPIO 4 |
- en: '| chart | Group: Dashboard [Home] Label: Temperature'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '| 图表 | 分组：仪表盘 [主页] 标签：温度'
- en: 'Type: Line Chart'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 类型：折线图
- en: 'X-axis: 1 hour'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: X轴：1小时
- en: 'X-axis Label: HH:mm'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: X轴标签：HH:mm
- en: 'Name: Temperature – Chart |'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 名称：温度 – 图表 |
- en: '| f | Name: Get humidity Function:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '| f | 名称：获取湿度 功能：'
- en: msg.payload = msg.humidity;
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: msg.payload = msg.humidity;
- en: return msg; |
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: return msg; |
- en: '| gauge | Group: Dashboard [Home] Type: Gauge'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '| 湿度计 | 分组：仪表盘 [主页] 类型：湿度计'
- en: 'Label: Humidity'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 标签：湿度
- en: 'Value format: {{value}}'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 值格式：{{value}}
- en: 'Units: %'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 单位：%
- en: 'Range: min:0; max:100'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 范围：最小值：0；最大值：100
- en: 'Name: Humidity - Gauge |'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 名称：湿度 - 湿度计 |
- en: Click the **Deploy** button and once again test your application. Remember,
    if you run into any trouble, make sure that your properties match the tables here
    and double-check the wiring of your nodes against the figures.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **部署** 按钮，再次测试你的应用程序。记住，如果遇到任何问题，确保你的属性与这里的表格匹配，并且仔细检查你的节点连接与图示的线缆连接。
- en: '**RUNNING YOUR APPLICATION**'
  id: totrans-424
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**运行你的应用程序**'
- en: Congratulations! You’ve built your first IoT application with Node-RED. Go to
    *http://<Pi IP address>:1880/ui* to see how your user interface looks. You can
    access this URL using any browser on the local network, whether that’s on your
    computer or smartphone. [Figure 17-13](ch17.xhtml#ch17fig13) shows the final circuit
    you can control using your Node-RED application.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经使用Node-RED构建了你的第一个物联网应用程序。前往 *http://<Pi IP 地址>:1880/ui* 查看你的用户界面效果。你可以使用任何本地网络中的浏览器访问这个网址，无论是在电脑还是智能手机上。[图
    17-13](ch17.xhtml#ch17fig13) 展示了你可以用Node-RED应用控制的最终电路。
- en: '![image](../images/f0221-01.jpg)'
  id: totrans-426
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0221-01.jpg)'
- en: '**FIGURE 17-13:** IoT project with Node-RED'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 17-13：** 使用Node-RED的物联网项目'
- en: Your application has a switch to control LED 1, which is also time sensitive;
    a slider to control the brightness of LED 2; and a chart and gauge to display
    temperature and humidity.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用程序有一个开关来控制LED 1，它也是时效性的；一个滑块来控制LED 2的亮度；以及一个图表和湿度计来显示温度和湿度。
- en: '**TAKING IT FURTHER**'
  id: totrans-429
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步探索**'
- en: 'This project just scratched the surface of what Node-RED can do. Here are some
    ideas for taking this project further:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目只是Node-RED能做的冰山一角。以下是一些将这个项目进一步扩展的想法：
- en: Replace the time-sensitive LED with a relay and a lamp (refer to [Project 16](ch16.xhtml#ch16)
    for an introduction to the relay module).
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将时效性LED替换为继电器和灯泡（有关继电器模块的介绍，请参阅[项目16](ch16.xhtml#ch16)）。
- en: Add more sensor readings to your application, like the smoke sensor and movement
    detection.
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向你的应用程序添加更多的传感器读取，比如烟雾传感器和运动检测传感器。
