- en: Chapter 12. System and Process Information
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第12章 系统与进程信息
- en: In this chapter, we look at ways of accessing a variety of system and process
    information. The primary focus of the chapter is a discussion of the `/proc` file
    system. We also describe the *uname()* system call, which is used to retrieve
    various system identifiers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将探讨访问各种系统和进程信息的方法。本章的主要内容是讨论 `/proc` 文件系统。我们还将介绍 *uname()* 系统调用，用于检索各种系统标识符。
- en: The `/proc` File System
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`/proc` 文件系统'
- en: 'In older UNIX implementations, there was typically no easy way to introspectively
    analyze (or change) attributes of the kernel, to answer questions such as the
    following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在旧版 UNIX 实现中，通常没有简便的方式来反向分析（或更改）内核的属性，以回答如下问题：
- en: How many processes are running on the system and who owns them?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统上运行着多少个进程，谁拥有它们？
- en: What files does a process have open?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个进程打开了哪些文件？
- en: What files are currently locked, and which processes hold the locks?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前哪些文件被锁定，哪些进程持有锁？
- en: What sockets are being used on the system?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统上正在使用哪些套接字？
- en: Some older UNIX implementations solved this problem by allowing privileged programs
    to delve into data structures in kernel memory. However, this approach suffered
    various problems. In particular, it required specialized knowledge of the kernel
    data structures, and these structures might change from one kernel version to
    the next, requiring programs that depended on them to be rewritten.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一些旧版 UNIX 实现通过允许特权程序深入内核内存中的数据结构来解决这个问题。然而，这种方法存在各种问题。特别是，它需要对内核数据结构有专门的了解，并且这些结构可能会在不同的内核版本之间发生变化，这就需要依赖这些结构的程序进行重写。
- en: In order to provide easier access to kernel information, many modern UNIX implementations
    provide a `/proc` virtual file system. This file system resides under the `/proc`
    directory and contains various files that expose kernel information, allowing
    processes to conveniently read that information, and change it in some cases,
    using normal file I/O system calls. The `/proc` file system is said to be virtual
    because the files and subdirectories that it contains don’t reside on a disk.
    Instead, the kernel creates them “on the fly” as processes access them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了便于访问内核信息，许多现代 UNIX 实现提供了 `/proc` 虚拟文件系统。这个文件系统位于 `/proc` 目录下，包含了各种暴露内核信息的文件，允许进程方便地读取这些信息，并在某些情况下，使用正常的文件
    I/O 系统调用来修改它们。`/proc` 文件系统被称为虚拟文件系统，因为它包含的文件和子目录并不存储在磁盘上，而是由内核在进程访问时“动态”创建。
- en: In this section, we present an overview of the `/proc` file system. In later
    chapters, we describe specific `/proc` files, as they relate to the topics of
    each chapter. Although many UNIX implementations provide a `/proc` file system,
    SUSv3 doesn’t specify this file system; the details described in this book are
    Linux-specific.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们概述了 `/proc` 文件系统。在后续章节中，我们将根据每个章节的主题描述特定的 `/proc` 文件。虽然许多 UNIX 实现提供了
    `/proc` 文件系统，但 SUSv3 并未指定这一文件系统；本书中描述的细节是 Linux 特有的。
- en: 'Obtaining Information About a Process: `/proc/`*PID*'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取关于进程的信息：`/proc/`*PID*
- en: For each process on the system, the kernel provides a corresponding directory
    named `/proc/`*PID*, where *PID* is the ID of the process. Within this directory
    are various files and subdirectories containing information about that process.
    For example, we can obtain information about the *init* process, which always
    has the process ID 1, by looking at files under the directory `/proc/1`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于系统中的每个进程，内核提供了一个对应的目录，命名为 `/proc/`*PID*，其中 *PID* 是进程的 ID。在这个目录中，包含了关于该进程的各种文件和子目录。例如，我们可以通过查看
    `/proc/1` 目录下的文件来获取关于 *init* 进程的信息，*init* 进程的进程 ID 始终为 1。
- en: 'Among the files in each `/proc/`*PID* directory is one named `status`, which
    provides a range of information about the process:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 `/proc/`*PID* 目录下都有一个名为 `status` 的文件，提供关于该进程的各种信息：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The above output is taken from kernel 2.6.32\. As indicated by the *since* comments
    accompanying the file output, the format of this file has evolved over time, with
    new fields added (and in a few cases, removed) in various kernel versions. (Aside
    from the Linux 2.6 changes noted above, Linux 2.4 added the *Tgid*, *TracerPid*,
    *FDSize*, and *Threads* fields.)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出来自内核 2.6.32。正如文件输出中附带的*since*注释所示，这个文件的格式随着时间的推移有所变化，在不同的内核版本中增加了新字段（在少数情况下，删除了字段）。（除了上面提到的
    Linux 2.6 更改外，Linux 2.4 还增加了*Tgid*、*TracerPid*、*FDSize* 和 *Threads* 字段。）
- en: 'The fact that the contents of this file have changed over time raises a general
    point about the use of `/proc` files: when these files consist of multiple entries,
    we should parse them defensively—in this case, looking for a match on a line containing
    a particular string (e.g., *PPid:*), rather than processing the file by (logical)
    line number.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该文件内容随时间发生变化，这提出了关于使用`/proc`文件的一个普遍问题：当这些文件包含多个条目时，我们应该采取防御性解析方式——在这种情况下，应该查找包含特定字符串（例如*PPid:*）的行进行匹配，而不是通过（逻辑的）行号处理文件。
- en: '[Table 12-1](ch12.html#selected_files_in_each_solidus_proc_soli "Table 12-1. Selected
    files in each /proc/PID directory") lists some of the other files found in each
    `/proc/`*PID* directory.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[表12-1](ch12.html#selected_files_in_each_solidus_proc_soli "表12-1. 每个/proc/PID目录中选定的文件")列出了每个`/proc/`*PID*目录中发现的其他一些文件。'
- en: Table 12-1. Selected files in each `/proc/`*PID* directory
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 表12-1. 每个`/proc/`*PID*目录中选定的文件
- en: '| File | Description (process attribute) |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 文件 | 描述（进程属性） |'
- en: '| --- | --- |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `cmdline` | Command-line arguments delimited by `\0` |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `cmdline` | 用`\0`分隔的命令行参数 |'
- en: '| `cwd` | Symbolic link to current working directory |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `cwd` | 指向当前工作目录的符号链接 |'
- en: '| `environ` | Environment list *NAME=value* pairs, delimited by `\0` |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `environ` | 环境变量列表，格式为*NAME=value*对，使用`\0`分隔 |'
- en: '| `exe` | Symbolic link to file being executed |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `exe` | 指向正在执行的文件的符号链接 |'
- en: '| `fd` | Directory containing symbolic links to files opened by this process
    |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `fd` | 包含指向此进程打开文件的符号链接的目录 |'
- en: '| `maps` | Memory mappings |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `maps` | 内存映射 |'
- en: '| `mem` | Process virtual memory (must *lseek()* to valid offset before I/O)
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `mem` | 进程虚拟内存（必须在I/O之前使用*lseek()*定位到有效偏移量） |'
- en: '| `mounts` | Mount points for this process |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `mounts` | 该进程的挂载点 |'
- en: '| `root` | Symbolic link to root directory |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `root` | 指向根目录的符号链接 |'
- en: '| `status` | Various information (e.g., process IDs, credentials, memory usage,
    signals) |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `status` | 各种信息（例如，进程ID、凭证、内存使用、信号等） |'
- en: '| `task` | Contains one subdirectory for each thread in process (Linux 2.6)
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `task` | 包含进程中每个线程的一个子目录（Linux 2.6） |'
- en: The `/proc/`*PID*`/fd` directory
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`/proc/`*PID*`/fd`目录'
- en: The `/proc/`*PID*`/fd` directory contains one symbolic link for each file descriptor
    that the process has open. Each of these symbolic links has a name that matches
    the descriptor number; for example, `/proc/1968/1` is a symbolic link to the standard
    output of process 1968\. Refer to [The `/dev/fd` Directory](ch05.html#the_solidus_dev_solidus_fd_directory
    "The /dev/fd Directory") for further information.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`/proc/`*PID*`/fd`目录包含一个符号链接，指向该进程打开的每个文件描述符。每个符号链接的名称与描述符编号匹配；例如，`/proc/1968/1`是进程1968标准输出的符号链接。有关更多信息，请参见[`/dev/fd`目录](ch05.html#the_solidus_dev_solidus_fd_directory
    "The /dev/fd Directory")。'
- en: As a convenience, any process can access its own `/proc/`*PID* directory using
    the symbolic link `/proc/self`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种方便的方式，任何进程都可以通过符号链接`/proc/self`访问自己的`/proc/`*PID*目录。
- en: 'Threads: the `/proc/`*PID*`/task` directory'
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 线程：`/proc/`*PID*`/task`目录
- en: Linux 2.4 added the notion of thread groups to properly support the POSIX threading
    model. Since some attributes are distinct for the threads in a thread group, Linux
    2.4 added a `task` subdirectory under the `/proc/`*PID* directory. For each thread
    in this process, the kernel provides a subdirectory named `/proc/`*PID*`/task/`*TID*,
    where *TID* is the thread ID of the thread. (This is the same number as would
    be returned by a call to *gettid()* in the thread.)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 2.4引入了线程组的概念，以正确支持POSIX线程模型。由于某些属性对于线程组中的线程是不同的，Linux 2.4在`/proc/`*PID*目录下添加了一个`task`子目录。对于该进程中的每个线程，内核提供了一个名为`/proc/`*PID*`/task/`*TID*的子目录，其中*TID*是线程的线程ID。（这个数字与通过线程中的*gettid()*调用返回的数字相同。）
- en: Under each `/proc/`*PID*`/task/`*TID* subdirectory is a set of files and directories
    exactly like those that are found under `/proc/`*PID*. Since threads share many
    attributes, much of the information in these files is the same for each of the
    threads in the process. However, where it makes sense, these files show distinct
    information for each thread. For example, in the `/proc/`*PID*`/task/`*TID*`/status`
    files for a thread group, *State*, *Pid*, *SigPnd*, *SigBlk*, *CapInh*, *CapPrm*,
    *CapEff*, and *CapBnd* are some of the fields that may be distinct for each thread.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`/proc/`*PID*`/task/`*TID*子目录下有一组与`/proc/`*PID*下的文件和目录完全相同的内容。由于线程共享许多属性，这些文件中的许多信息对于进程中的每个线程都是相同的。然而，在合适的情况下，这些文件会显示每个线程的不同信息。例如，在线程组的`/proc/`*PID*`/task/`*TID*`/status`文件中，*State*、*Pid*、*SigPnd*、*SigBlk*、*CapInh*、*CapPrm*、*CapEff*和*CapBnd*等字段可能对于每个线程是不同的。
- en: System Information Under `/proc`
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`/proc`下的系统信息'
- en: Various files and subdirectories under `/proc` provide access to system-wide
    information. A few of these are shown in [Figure 12-1](ch12.html#selected_files_and_subdirectories_under
    "Figure 12-1. Selected files and subdirectories under /proc").
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`/proc`下的各种文件和子目录提供了对系统范围内信息的访问。[图12-1](ch12.html#selected_files_and_subdirectories_under
    "图12-1：`/proc`下选定的文件和子目录")中显示了一些这些文件。'
- en: Many of the files shown in [Figure 12-1](ch12.html#selected_files_and_subdirectories_under
    "Figure 12-1. Selected files and subdirectories under /proc") are described elsewhere
    in this book. [Table 12-2](ch12.html#purpose_of_selected_solidus_proc_subdire
    "Table 12-2. Purpose of selected /proc subdirectories") summarizes the general
    purpose of the `/proc` subdirectories shown in [Figure 12-1](ch12.html#selected_files_and_subdirectories_under
    "Figure 12-1. Selected files and subdirectories under /proc").
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图12-1](ch12.html#selected_files_and_subdirectories_under "图12-1：`/proc`下选定的文件和子目录")中显示的许多文件在本书的其他地方有描述。[表12-2](ch12.html#purpose_of_selected_solidus_proc_subdire
    "表12-2：选定的`/proc`子目录的用途")总结了[图12-1](ch12.html#selected_files_and_subdirectories_under
    "图12-1：`/proc`下选定的文件和子目录")中所示的`/proc`子目录的一般用途。
- en: Table 12-2. Purpose of selected `/proc` subdirectories
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 表12-2：选定的`/proc`子目录的用途
- en: '| Directory | Information exposed by files in this directory |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 目录 | 此目录下文件公开的信息 |'
- en: '| --- | --- |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `/proc` | Various system information |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `/proc` | 各种系统信息 |'
- en: '| `/proc/net` | Status information about networking and sockets |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `/proc/net` | 网络和套接字的状态信息 |'
- en: '| `/proc/sys/fs` | Settings related to file systems |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `/proc/sys/fs` | 与文件系统相关的设置 |'
- en: '| `/proc/sys/kernel` | Various general kernel settings |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `/proc/sys/kernel` | 各种常规内核设置 |'
- en: '| `/proc/sys/net` | Networking and sockets settings |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `/proc/sys/net` | 网络和套接字设置 |'
- en: '| `/proc/sys/vm` | Memory-management settings |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `/proc/sys/vm` | 内存管理设置 |'
- en: '| `/proc/sysvipc` | Information about System V IPC objects |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `/proc/sysvipc` | 关于 System V IPC 对象的信息 |'
- en: Accessing `/proc` Files
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问 `/proc` 文件
- en: 'Files under `/proc` are often accessed using shell scripts (most `/proc` files
    that contain multiple values can be easily parsed with a scripting language such
    as Python or Perl). For example, we can modify and view the contents of a `/proc`
    file using shell commands as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`/proc`下的文件通常通过 shell 脚本访问（大多数包含多个值的`/proc`文件可以通过Python或Perl等脚本语言轻松解析）。例如，我们可以使用以下
    shell 命令修改和查看`/proc`文件的内容：'
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`/proc` files can also be accessed from a program using normal file I/O system
    calls. Some restrictions apply when accessing these files:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`/proc`文件也可以通过程序使用常规的文件I/O系统调用访问。在访问这些文件时有一些限制：'
- en: Some `/proc` files are read-only; that is, they exist only to display kernel
    information and can’t be used to modify that information. This applies to most
    files under the `/proc/`*PID* directories.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 某些`/proc`文件是只读的；也就是说，它们仅用于显示内核信息，不能用来修改这些信息。这适用于大多数`/proc/`*PID* 目录下的文件。
- en: Some `/proc` files can be read only by the file owner (or by a privileged process).
    For example, all files under `/proc/`*PID* are owned by the user who owns the
    corresponding process, and on some of these files (e.g., `/proc/`*PID*`/environ`),
    read permission is granted only to the file owner.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 某些`/proc`文件仅能由文件所有者（或特权进程）读取。例如，`/proc/`*PID* 下的所有文件都归拥有对应进程的用户所有，并且某些文件（如 `/proc/`*PID*`/environ`）的读取权限仅授予文件所有者。
- en: Other than the files in the `/proc/`*PID* subdirectories, most files under `/proc`
    are owned by *root*, and the files that are modifiable can be modified only by
    *root*.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了 `/proc/`*PID* 子目录中的文件外，`/proc`下的大多数文件归*root*所有，并且只有*root*可以修改那些可修改的文件。
- en: '![Selected files and subdirectories under /proc](figs/web/12-1_SYSINFO-procfs.png.jpg)Figure 12-1. Selected
    files and subdirectories under `/proc`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12-1：`/proc`下选定的文件和子目录](figs/web/12-1_SYSINFO-procfs.png.jpg)图12-1：`/proc`下选定的文件和子目录'
- en: Accessing files in `/proc/`*PID*
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 访问 `/proc/`*PID* 目录中的文件
- en: The `/proc/`*PID* directories are volatile. Each of these directories comes
    into existence when a process with the corresponding process ID is created and
    disappears when that process terminates. This means that if we determine that
    a particular `/proc/`*PID* directory exists, then we need to cleanly handle the
    possibility that the process has terminated, and the corresponding `/proc/`*PID*
    directory has been deleted, by the time we try to open a file in that directory.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`/proc/`*PID* 目录是易变的。当具有相应进程 ID 的进程创建时，这些目录就会生成，当进程终止时，目录也会消失。这意味着，如果我们确定某个
    `/proc/`*PID* 目录存在，那么我们需要妥善处理在尝试打开该目录下的文件时，可能该进程已经终止，而相应的 `/proc/`*PID* 目录也已被删除的情况。'
- en: Example program
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例程序
- en: '[Example 12-1](ch12.html#accessing_solidus_proc_solidus_sys_solid "Example 12-1. Accessing
    /proc/sys/kernel/pid_max") demonstrates how to read and modify a `/proc` file.
    This program reads and displays the contents of `/proc/sys/kernel/pid_max`. If
    a command-line argument is supplied, the program updates the file using that value.
    This file (which is new in Linux 2.6) specifies an upper limit for process IDs
    ([Process ID and Parent Process ID](ch06.html#process_id_and_parent_process "Process
    ID and Parent Process ID")). Here is an example of the use of this program:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 12-1](ch12.html#accessing_solidus_proc_solidus_sys_solid "示例 12-1. 访问 /proc/sys/kernel/pid_max")
    演示了如何读取和修改 `/proc` 文件。此程序读取并显示 `/proc/sys/kernel/pid_max` 的内容。如果提供了命令行参数，程序将使用该值更新文件。这个文件（在
    Linux 2.6 中新增）指定了进程 ID 的上限（[进程 ID 和父进程 ID](ch06.html#process_id_and_parent_process
    "进程 ID 和父进程 ID")）。下面是使用此程序的示例：'
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Example 12-1. Accessing `/proc/sys/kernel/pid_max`
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 12-1. 访问 `/proc/sys/kernel/pid_max`
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'System Identification: *uname()*'
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统标识：*uname()*
- en: The *uname()* system call returns a range of identifying information about the
    host system on which an application is running, in the structure pointed to by
    *utsbuf*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*uname()* 系统调用返回有关应用程序所在主机系统的一系列标识信息，这些信息存储在 *utsbuf* 指向的结构体中。'
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Returns 0 on success, or -1 on error
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 成功时返回 0，出错时返回 -1
- en: 'The *utsbuf* argument is a pointer to a *utsname* structure, which is defined
    as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*utsbuf* 参数是指向 *utsname* 结构体的指针，定义如下：'
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: SUSv3 specifies *uname()*, but leaves the lengths of the various fields of the
    *utsname* structure undefined, requiring only that the strings be terminated by
    a null byte. On Linux, these fields are each 65 bytes long, including space for
    the terminating null byte. On some UNIX implementations, these fields are shorter;
    on others (e.g., Solaris), they range up to 257 bytes.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3 指定了 *uname()*，但未定义 *utsname* 结构体各字段的长度，仅要求字符串以空字节结束。在 Linux 上，这些字段每个都是
    65 字节长，包括终止的空字节空间。在某些 UNIX 实现中，这些字段较短；而在其他实现中（例如 Solaris），它们的长度可达到 257 字节。
- en: The *sysname*, *release*, *version*, and *machine* fields of the *utsname* structure
    are automatically set by the kernel.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*sysname*、*release*、*version* 和 *machine* 字段在 *utsname* 结构体中由内核自动设置。'
- en: Note
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: On Linux, three files in the directory `/proc/sys/kernel` provide access to
    the same information as is returned in the *sysname*, *release*, and *version*
    fields of the *utsname* structure. These read-only files are, respectively, `ostype`,
    `osrelease`, and `version`. Another file, `/proc/version`, includes the same information
    as in these files, and also includes information about the kernel compilation
    step (i.e., the name of the user that performed the compilation, the name of host
    on which the compilation was performed, and the *gcc* version used).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上，`/proc/sys/kernel` 目录中的三个文件提供了与 *utsname* 结构体中 *sysname*、*release*
    和 *version* 字段相同的信息。这些只读文件分别是 `ostype`、`osrelease` 和 `version`。另一个文件 `/proc/version`
    包含与这些文件相同的信息，还包括关于内核编译步骤的信息（即执行编译的用户的名字、进行编译的主机名称以及使用的 *gcc* 版本）。
- en: The *nodename* field returns the value that was set using the *sethostname()*
    system call (see the manual page for details of this system call). Often, this
    name is something like the hostname prefix from the system’s DNS domain name.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*nodename* 字段返回通过 *sethostname()* 系统调用设置的值（有关此系统调用的详细信息，请参见手册页）。通常，这个名字类似于系统
    DNS 域名中的主机名前缀。'
- en: The *domainname* field returns the value that was set using the *setdomainname()*
    system call (see the manual page for details of this system call). This is the
    Network Information Services (NIS) domain name of the host (which is not the same
    thing as the host’s DNS domain name).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*domainname* 字段返回通过 *setdomainname()* 系统调用设置的值（有关此系统调用的详细信息，请参阅手册页）。这是主机的网络信息服务（NIS）域名（与主机的
    DNS 域名不同）。'
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The *gethostname()* system call, which is the converse of *sethostname()*, retrieves
    the system hostname. The system hostname is also viewable and settable using the
    *hostname(1)* command and the Linux-specific `/proc/hostname` file.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*gethostname()* 系统调用，作为 *sethostname()* 的反向操作，用于获取系统主机名。系统主机名也可以通过 *hostname(1)*
    命令和 Linux 特有的 `/proc/hostname` 文件进行查看和设置。'
- en: The *getdomainname()* system call, which is the converse of *setdomainname()*,
    retrieves the NIS domain name. The NIS domain name is also viewable and settable
    using the *domainname(1)* command and the Linux-specific `/proc/domainname` file.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*getdomainname()* 系统调用，作为 *setdomainname()* 的反向操作，用于获取 NIS 域名。NIS 域名也可以通过 *domainname(1)*
    命令和 Linux 特有的 `/proc/domainname` 文件进行查看和设置。'
- en: The *sethostname()* and *setdomainname()* system calls are rarely used in application
    programs. Normally, the hostname and NIS domain name are established at boot time
    by startup scripts.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*sethostname()* 和 *setdomainname()* 系统调用在应用程序中很少使用。通常，主机名和 NIS 域名是在启动时由启动脚本设置的。'
- en: 'The program in [Example 12-2](ch12.html#using_uname_open_parenthesis_close_paren
    "Example 12-2. Using uname()") displays the information returned by *uname()*.
    Here’s an example of the output we might see when running this program:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 12-2](ch12.html#using_uname_open_parenthesis_close_paren "示例 12-2. 使用 uname()")
    中的程序显示了 *uname()* 返回的信息。以下是运行此程序时可能看到的输出示例：'
- en: '[PRE6]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Example 12-2. Using *uname()*
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 12-2. 使用 *uname()*
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: The `/proc` file system exposes a range of kernel information to application
    programs. Each `/proc/`*PID* subdirectory contains files and subdirectories that
    provide information about the process whose ID matches *PID*. Various other files
    and directories under `/proc` expose system-wide information that programs can
    read and, in some cases, modify.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`/proc` 文件系统将一系列内核信息暴露给应用程序。每个 `/proc/`*PID* 子目录包含文件和子目录，提供关于与 *PID* 匹配的进程的信息。`/proc`
    下的各种其他文件和目录则暴露系统范围的信息，程序可以读取这些信息，并在某些情况下进行修改。'
- en: The *uname()* system call allows us to discover the UNIX implementation and
    the type of machine on which an application is running.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*uname()* 系统调用使我们能够发现 UNIX 实现和运行应用程序的机器类型。'
- en: Further information
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更多信息
- en: Further information about the `/proc` file system can be found in the *proc(5)*
    manual page, in the kernel source file `Documentation/filesystems/proc.txt`, and
    in various files in the `Documentation/sysctl` directory.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `/proc` 文件系统的更多信息可以在 *proc(5)* 手册页、内核源文件 `Documentation/filesystems/proc.txt`
    和 `Documentation/sysctl` 目录中的各种文件中找到。
- en: Exercises
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: Write a program that lists the process ID and command name for all processes
    being run by the user named in the program’s command-line argument. (You may find
    the *userIdFromName()* function from [Example 8-1](ch08.html#functions_to_convert_user_and_group_ids
    "Example 8-1. Functions to convert user and group IDs to and from user and group
    names"), in [Example program](ch08.html#example_program-id5 "Example program"),
    useful.) This can be done by inspecting the *Name:* and *Uid:* lines of all of
    the `/proc/`*PID*`/status` files on the system. Walking through all of the `/proc/`*PID*
    directories on the system requires the use of *readdir(3)*, which is described
    in Section 18.8. Make sure your program correctly handles the possibility that
    a `/proc/`*PID* directory disappears between the time that the program determines
    that the directory exists and the time that it tries to open the corresponding
    `/proc/`*PID*`/status` file.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，列出所有由程序命令行参数中指定的用户运行的进程的进程 ID 和命令名。（你可能会在 [示例 8-1](ch08.html#functions_to_convert_user_and_group_ids
    "示例 8-1. 用户和组 ID 转换函数") 中找到 *userIdFromName()* 函数，在 [示例程序](ch08.html#example_program-id5
    "示例程序") 中可能会有用。）这可以通过检查系统中所有 `/proc/`*PID*`/status` 文件中的 *Name:* 和 *Uid:* 行来完成。遍历系统中所有的
    `/proc/`*PID* 目录需要使用 *readdir(3)*，该函数在第 18.8 节中进行了描述。确保你的程序正确处理 `/proc/`*PID*
    目录在程序确定该目录存在和尝试打开相应的 `/proc/`*PID*`/status` 文件之间消失的情况。
- en: Write a program that draws a tree showing the hierarchical parent-child relationships
    of all processes on the system, going all the way back to *init*. For each process,
    the program should display the process ID and the command being executed. The
    output of the program should be similar to that produced by *pstree(1)*, although
    it does need not to be as sophisticated. The parent of each process on the system
    can be found by inspecting the *PPid:* line of all of the `/proc/`*PID*`/status`
    files on the system. Be careful to handle the possibility that a process’s parent
    (and thus its `/proc/`*PID* directory) disappears during the scan of all `/proc/`*PID*
    directories.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，绘制一棵显示系统中所有进程的层次父子关系的树状图，一直到*init*。对于每个进程，程序应该显示进程ID和正在执行的命令。程序的输出应类似于*pstree(1)*产生的输出，尽管不需要那么复杂。可以通过检查系统中所有`/proc/`*PID*`/status`文件中的*PPid:*行来找到每个进程的父进程。要小心处理在扫描所有`/proc/`*PID*目录时，进程的父进程（以及其`/proc/`*PID*目录）可能消失的情况。
- en: Write a program that lists all processes that have a particular file pathname
    open. This can be achieved by inspecting the contents of all of the `/proc/`*PID*`/fd/*`
    symbolic links. This will require nested loops employing *readdir(3)* to scan
    all `/proc/`*PID* directories, and then the contents of all `/proc/`*PID/*`fd`
    entries within each `/proc/`*PID* directory. To read the contents of a `/proc/`*PID*`/fd/`*n*
    symbolic link requires the use of *readlink()*, described in Section 18.5.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，列出所有打开特定文件路径名的进程。这可以通过检查所有`/proc/`*PID*`/fd/*`符号链接的内容来实现。这将需要使用嵌套循环，利用*readdir(3)*扫描所有`/proc/`*PID*目录，然后扫描每个`/proc/`*PID*目录中的所有`/proc/`*PID/*`fd`条目的内容。要读取`/proc/`*PID*`/fd/`*n*符号链接的内容，需要使用*readlink()*，在第18.5节中描述。
