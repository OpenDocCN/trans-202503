- en: Chapter 1. History and Standards
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 1 章 历史与标准
- en: 'Linux is a member of the UNIX family of operating systems. In computing terms,
    UNIX has a long history. The first part of this chapter provides a brief outline
    of that history. We begin with a description of the origins of the UNIX system
    and the C programming language, and then consider the two key currents that led
    to the Linux system as it exists today: the GNU project and the development of
    the Linux kernel.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 是 UNIX 系列操作系统的成员。从计算的角度来看，UNIX 有着悠久的历史。本章的第一部分简要概述了这一历史。我们首先介绍了 UNIX 系统和
    C 编程语言的起源，然后讨论了两股关键潮流，它们促成了今天的 Linux 系统的形成：GNU 项目和 Linux 内核的发展。
- en: One of the notable features of the UNIX system is that its development was not
    controlled by a single vendor or organization. Rather, many groups, both commercial
    and noncommercial, contributed to its evolution. This history resulted in many
    innovative features being added to UNIX, but also had the negative consequence
    that UNIX implementations diverged over time, so that writing applications that
    worked on all UNIX implementations became increasingly difficult. This led to
    a drive for standardization of UNIX implementations, which we discuss in the second
    part of this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: UNIX 系统的一个显著特点是它的开发并未由单一的供应商或组织控制。相反，许多商业和非商业团体共同推动了它的发展。这段历史导致了 UNIX 系统中加入了许多创新特性，但也带来了一个负面后果，即
    UNIX 实现随着时间的推移逐渐分化，因此编写能在所有 UNIX 实现中运行的应用程序变得越来越困难。这促使了 UNIX 实现的标准化进程，我们将在本章的第二部分讨论这一点。
- en: Note
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Two definitions of the term UNIX are in common use. One of these denotes operating
    systems that have passed the official conformance tests for the Single UNIX Specification
    and thus are officially granted the right to be branded as “UNIX” by The Open
    Group (the holders of the UNIX trademark). At the time of writing, none of the
    free UNIX implementations (e.g., Linux and FreeBSD) has obtained this branding.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: UNIX 术语有两种常见的定义。其中一种定义指通过了单一 UNIX 规范的官方一致性测试的操作系统，因此被 The Open Group（UNIX 商标的持有者）官方授予“UNIX”品牌的权利。写作时，尚无自由
    UNIX 实现（如 Linux 和 FreeBSD）获得这一品牌。
- en: The other common meaning attached to the term UNIX denotes those systems that
    look and behave like classical UNIX systems (i.e., the original Bell Laboratories
    UNIX and its later principal offshoots, System V and BSD). By this definition,
    Linux is generally considered to be a UNIX system (as are the modern BSDs). Although
    we give close attention to the Single UNIX Specification in this book, we’ll follow
    this second definition of UNIX, so that we’ll often say things such as “Linux,
    like other UNIX implementations. . . .”
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的 UNIX 术语含义指的是那些看起来和行为像经典 UNIX 系统的操作系统（即原始的贝尔实验室 UNIX 及其后来的主要分支，如 System
    V 和 BSD）。根据这个定义，Linux 通常被认为是 UNIX 系统（现代的 BSD 系统也是如此）。尽管我们在本书中密切关注单一 UNIX 规范，但我们将采用第二种
    UNIX 定义，因此我们通常会说类似于“Linux，像其他 UNIX 实现一样……”的话。
- en: A Brief History of UNIX and C
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UNIX 和 C 的简史
- en: The first UNIX implementation was developed in 1969 (the same year that Linus
    Torvalds was born) by Ken Thompson at Bell Laboratories, a division of the telephone
    corporation, AT&T. It was written in assembler for a Digital PDP-7 minicomputer.
    The name UNIX was a pun on MULTICS (*Multiplexed Information and Computing Service*),
    the name of an earlier operating system project in which AT&T collaborated with
    Massachusetts Institute of Technology (MIT) and General Electric. (AT&T had by
    this time withdrawn from the project in frustration at its initial failure to
    develop an economically useful system.) Thompson drew several ideas for his new
    operating system from MULTICS, including a tree-structured file system, a separate
    program for interpreting commands (the shell), and the notion of files as unstructured
    streams of bytes.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 UNIX 实现由 Ken Thompson 于 1969 年在贝尔实验室（电话公司 AT&T 的一个部门）开发。它是用汇编语言为数字公司（Digital）的
    PDP-7 小型计算机编写的。UNIX 这个名字是对 MULTICS（*Multiplexed Information and Computing Service*）的双关语，后者是
    AT&T 与麻省理工学院（MIT）和通用电气公司（General Electric）合作的早期操作系统项目的名称。（AT&T 在项目初期未能开发出有经济价值的系统后已退出该项目。）Thompson
    从 MULTICS 中借鉴了若干概念，包括树状文件系统、一个用于解释命令的独立程序（shell），以及文件作为无结构字节流的概念。
- en: In 1970, UNIX was rewritten in assembly language for a newly acquired Digital
    PDP-11 minicomputer, then a new and powerful machine. Vestiges of this PDP-11
    heritage can be found in various names still used on most UNIX implementations,
    including Linux.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 1970年，UNIX在新购置的数字PDP-11迷你计算机上用汇编语言重写，当时这是一台新型且强大的机器。今天，大多数UNIX实现中仍能找到一些PDP-11遗留的痕迹，包括Linux。
- en: A short time later, Dennis Ritchie, one of Thompson’s colleagues at Bell Laboratories
    and an early collaborator on UNIX, designed and implemented the C programming
    language. This was an evolutionary process; C followed an earlier interpreted
    language, B. B was initially implemented by Thompson and drew many of its ideas
    from a still earlier programming language named BCPL. By 1973, C had matured to
    a point where the UNIX kernel could be almost entirely rewritten in the new language.
    UNIX thus became one of the earliest operating systems to be written in a high-level
    language, a fact that made subsequent porting to other hardware architectures
    possible.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 不久之后，丹尼斯·里奇（Dennis Ritchie），汤普森在贝尔实验室的同事之一，也是UNIX的早期合作者，设计并实现了C编程语言。这是一个渐进的过程；C语言继承了早期的解释型语言B。B最初由汤普森实现，并从一个更早的编程语言BCPL中汲取了许多思想。到1973年，C语言已经成熟到足以将UNIX内核几乎完全用这种新语言重写。于是，UNIX成为最早使用高级语言编写的操作系统之一，这一事实使得后续向其他硬件架构的移植成为可能。
- en: 'The genesis of C explains why it, and its descendant C++, have come to be used
    so widely as system programming languages today. Previous widely used languages
    were designed with other purposes in mind: FORTRAN for mathematical tasks performed
    by engineers and scientists; COBOL for commercial systems processing streams of
    record-oriented data. C filled a hitherto empty niche, and unlike FORTRAN and
    COBOL (which were designed by large committees), the design of C arose from the
    ideas and needs of a few individuals working toward a single goal: developing
    a high-level language for implementing the UNIX kernel and associated software.
    Like the UNIX operating system itself, C was designed by professional programmers
    for their own use. The resulting language was small, efficient, powerful, terse,
    modular, pragmatic, and coherent in its design.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: C语言的起源解释了为什么它及其后代C++今天成为广泛使用的系统编程语言。之前广泛使用的语言是为了其他目的设计的：FORTRAN用于工程师和科学家执行的数学任务；COBOL用于处理流式记录数据的商业系统。C填补了一个此前空白的市场，并且与FORTRAN和COBOL（后者是由大型委员会设计的）不同，C的设计源于几个为实现一个共同目标而工作的个人的想法和需求：开发一个用于实现UNIX内核和相关软件的高级语言。与UNIX操作系统本身一样，C是由专业程序员为自己的使用设计的。最终的语言是小巧、有效、强大、简洁、模块化、务实并且在设计上保持一致。
- en: UNIX First through Sixth editions
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: UNIX第一版到第六版
- en: 'Between 1969 and 1979, UNIX went through a number of releases, known as *editions*.
    Essentially, these releases were snapshots of the evolving development version
    at AT&T. [Salus, 1994] notes the following dates for the first six editions of
    UNIX:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在1969年到1979年间，UNIX经历了多个版本发布，称为*版本*。这些发布本质上是AT&T不断发展中的开发版本的快照。[Salus, 1994]记录了UNIX前六个版本的日期：
- en: 'First Edition, November 1971: By this time, UNIX was running on the PDP-11
    and already had a FORTRAN compiler and versions of many programs still used today,
    including *ar*, *cat*, *chmod*, *chown*, *cp*, *dc*, *ed*, *find*, *ln*, *ls*,
    *mail*, *mkdir*, *mv*, *rm*, *sh*, *su*, and *who*.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一版，1971年11月：此时，UNIX已经在PDP-11上运行，并且已经有了FORTRAN编译器以及许多今天仍在使用的程序版本，包括*ar*、*cat*、*chmod*、*chown*、*cp*、*dc*、*ed*、*find*、*ln*、*ls*、*mail*、*mkdir*、*mv*、*rm*、*sh*、*su*和*who*。
- en: 'Second Edition, June 1972: By this time, UNIX was installed on ten machines
    within AT&T.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二版，1972年6月：此时，UNIX已经在AT&T的十台机器上安装运行。
- en: 'Third Edition, February 1973: This edition included a C compiler and the first
    implementation of pipes.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三版，1973年2月：这一版包括了C编译器和管道的首次实现。
- en: 'Fourth Edition, November 1973: This was the first version to be almost totally
    written in C.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第四版，1973年11月：这是第一版几乎完全用C语言编写的版本。
- en: 'Fifth Edition, June 1974: By this time, UNIX was installed on more than 50
    systems.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第五版，1974年6月：此时，UNIX已经在超过50个系统上安装运行。
- en: 'Sixth Edition, May 1975: This was the first edition to be widely used outside
    AT&T.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第六版，1975年5月：这是第一版被广泛应用于AT&T之外的版本。
- en: Over the period of these releases, the use and reputation of UNIX began to spread,
    first within AT&T, and then beyond. An important contribution to this growing
    awareness was the publication of a paper on UNIX in the widely read journal *Communications
    of the ACM* ([Ritchie & Thompson, 1974]).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些发布的过程中，UNIX 的使用和声誉开始传播，首先是在 AT&T 内部，然后扩展到外部。对这种日益增长的认知做出重要贡献的是在广泛阅读的期刊《ACM
    通讯》中发表的关于 UNIX 的论文（[Ritchie & Thompson, 1974]）。
- en: At this time, AT&T held a government-sanctioned monopoly on the US telephone
    system. The terms of AT&T’s agreement with the US government prevented it from
    selling software, which meant that it could not sell UNIX as a product. Instead,
    beginning in 1974 with Fifth Edition, and especially with Sixth Edition, AT&T
    licensed UNIX for use in universities for a nominal distribution fee. The university
    distributions included documentation and the kernel source code (about 10,000
    lines at the time).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，AT&T 拥有美国电话系统的政府授权垄断。AT&T 与美国政府的协议条款禁止其销售软件，这意味着它不能将 UNIX 作为产品出售。从 1974 年第五版开始，尤其是第六版，AT&T
    将 UNIX 许可给大学使用，收取象征性的分发费用。大学版包括文档和内核源代码（当时约 10,000 行）。
- en: AT&T’s release of UNIX into universities greatly contributed to the popularity
    and use of the operating system, and by 1977, UNIX was running at some 500 sites,
    including 125 universities in the United States and several other countries. UNIX
    offered universities an interactive multiuser operating system that was cheap
    yet powerful, at a time when commercial operating systems were very expensive.
    It also gave university computer science departments the source code of a real
    operating system, which they could modify and offer to their students to learn
    from and experiment with. Some of these students, armed with UNIX knowledge, became
    UNIX evangelists. Others went on to found or join the multitude of startup companies
    selling inexpensive computer workstations running the easily ported UNIX operating
    system.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: AT&T 将 UNIX 发布到大学极大地促进了该操作系统的普及和使用，到 1977 年，UNIX 已经在约 500 个站点上运行，包括美国的 125 所大学以及其他几个国家。UNIX
    为大学提供了一种互动式的多用户操作系统，它便宜且强大，而当时商业操作系统非常昂贵。它还为大学计算机科学系提供了一个真实操作系统的源代码，学生们可以修改这些代码并进行学习和实验。这些学生中，一些人掌握了
    UNIX 知识，成为了 UNIX 的布道者，另一些人则创办或加入了出售便宜计算机工作站的初创公司，这些工作站运行的是容易移植的 UNIX 操作系统。
- en: The birth of BSD and System V
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: BSD 和 System V 的诞生
- en: 'January 1979 saw the release of Seventh Edition UNIX, which improved the reliability
    of the system and provided an enhanced file system. This release also contained
    a number of new tools, including *awk*, *make*, *sed*, *tar*, *uucp*, the Bourne
    shell, and a FORTRAN 77 compiler. The release of Seventh Edition is also significant
    because, from this point, UNIX diverged into two important variants: BSD and System
    V, whose origins we now briefly describe.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 1979 年 1 月发布了第七版 UNIX，它提高了系统的可靠性，并提供了增强的文件系统。此版本还包含许多新工具，包括 *awk*、*make*、*sed*、*tar*、*uucp*、Bourne
    shell 以及 FORTRAN 77 编译器。第七版的发布也具有重要意义，因为从这一点开始，UNIX 分化为两个重要的变种：BSD 和 System V，我们现在简要描述其起源。
- en: Thompson spent the 1975/1976 academic year as a visiting professor at the University
    of California at Berkeley, the university from which he had graduated. There,
    he worked with several graduate students, adding many new features to UNIX. (One
    of these students, Bill Joy, subsequently went on to cofound Sun Microsystems,
    an early entry in the UNIX workstation market.) Over time, many new tools and
    features were developed at Berkeley, including the *C shell*, the *vi* editor,
    an improved file system (the *Berkeley Fast File System*), *sendmail*, a Pascal
    compiler, and virtual memory management on the new Digital VAX architecture.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 汤普森于 1975/1976 学年作为访问教授在加利福尼亚大学伯克利分校工作，这是他毕业的大学。在那里，他与几位研究生合作，为 UNIX 添加了许多新功能。（其中一位学生，比尔·乔伊，后来共同创办了
    Sun Microsystems，这是 UNIX 工作站市场的早期参与者。）随着时间的推移，伯克利开发了许多新工具和功能，包括 *C shell*、*vi*
    编辑器、改进的文件系统（*伯克利快速文件系统*）、*sendmail*、Pascal 编译器以及在新款 Digital VAX 架构上实现的虚拟内存管理。
- en: Under the name Berkeley Software Distribution (BSD), this version of UNIX, including
    its source code, came to be widely distributed. The first full distribution was
    3BSD in December 1979\. (Earlier releases from Berkeley–BSD and 2BSD–were distributions
    of new tools produced at Berkeley, rather than complete UNIX distributions.)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在伯克利软件发行版（BSD）这个名称下，这个版本的UNIX及其源代码开始广泛分发。第一个完整的发行版是1979年12月的3BSD。（伯克利之前的版本——BSD和2BSD——是伯克利制作的新工具的发行版，而不是完整的UNIX发行版。）
- en: In 1983, the *Computer Systems Research Group* at the University of California
    at Berkeley released 4.2BSD. This release was significant because it contained
    a complete TCP/IP implementation, including the sockets application programming
    interface (API) and a variety of networking tools. 4.2BSD and its predecessor
    4.1BSD became widely distributed within universities around the world. They also
    formed the basis for SunOS (first released in 1983), the UNIX variant sold by
    Sun. Other significant BSD releases were 4.3BSD, in 1986, and the final release,
    4.4BSD, in 1993.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 1983年，加利福尼亚大学伯克利分校的*计算机系统研究小组*发布了4.2BSD。这个版本之所以重要，是因为它包含了完整的TCP/IP实现，包括套接字应用程序编程接口（API）和各种网络工具。4.2BSD及其前身4.1BSD在世界各地的大学中得到了广泛分发。它们也成为了SunOS（1983年首次发布）的基础，SunOS是Sun公司销售的UNIX变种。其他重要的BSD发行版包括1986年的4.3BSD，以及1993年的最终版本4.4BSD。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: The very first ports of the UNIX system to hardware other than the PDP-11 occurred
    during 1977 and 1978, when Dennis Ritchie and Steve Johnson ported it to the Interdata
    8/32 and Richard Miller at the University of Wollongong in Australia simultaneously
    ported it to the Interdata 7/32\. The Berkeley Digital VAX port was based on an
    earlier (1978) port by John Reiser and Tom London. Known as 32V, this port was
    essentially the same as Seventh Edition for the PDP-11, except for the larger
    address space and wider data types.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: UNIX系统首次移植到PDP-11以外的硬件发生在1977年和1978年，当时Dennis Ritchie和Steve Johnson将其移植到Interdata
    8/32，而澳大利亚卧龙岗大学的Richard Miller同时将其移植到Interdata 7/32。伯克利的数字VAX移植基于John Reiser和Tom
    London早期（1978年）的移植。这个版本被称为32V，本质上与PDP-11的第七版相同，唯一的区别是更大的地址空间和更宽的数据类型。
- en: In the meantime, US antitrust legislation forced the breakup of AT&T (legal
    maneuvers began in the mid-1970s, and the breakup became effective in 1982), with
    the consequence that, since it no longer held a monopoly on the telephone system,
    the company was permitted to market UNIX. This resulted in the release of System
    III (three) in 1981\. System III was produced by AT&T’s UNIX Support Group (USG),
    which employed many hundreds of developers to enhance UNIX and develop UNIX applications
    (notably, document preparation packages and software development tools). The first
    release of System V (five) followed in 1983, and a series of releases led to the
    definitive System V Release 4 (SVR4) in 1989, by which time System V had incorporated
    many features from BSD, including networking facilities. System V was licensed
    to a variety of commercial vendors, who used it as the basis of their UNIX implementations.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，美国的反垄断法迫使AT&T解体（法律程序始于1970年代中期，解体在1982年生效），结果是，AT&T不再垄断电话系统，允许其销售UNIX。这导致了1981年System
    III（三）的发布。System III是由AT&T的UNIX支持小组（USG）制作的，该小组雇佣了数百名开发者来增强UNIX并开发UNIX应用程序（特别是文档处理软件和软件开发工具）。System
    V（五）的第一个版本于1983年发布，一系列的版本最终导致了1989年的最终版本System V Release 4（SVR4），到那时，System V已经融入了来自BSD的许多特性，包括网络功能。System
    V被许多商业厂商授权使用，成为它们UNIX实现的基础。
- en: Thus, in addition to the various BSD distributions spreading through academia,
    by the late 1980s, UNIX was available in a range of commercial implementations
    on various hardware. These implementations included Sun’s SunOS and later Solaris,
    Digital’s Ultrix and OSF/1 (nowadays, after a series of renamings and acquisitions,
    HP Tru64 UNIX), IBM’s AIX, Hewlett-Packard’s (HP’s) HP-UX, NeXT’s NeXTStep, A/UX
    for the Apple Macintosh, and Microsoft and SCO’s XENIX for the Intel x86-32 architecture.
    (Throughout this book, the Linux implementation for x86-32 is referred to as Linux/x86-32.)
    This situation was in sharp contrast to the typical proprietary hardware/operating
    system scenarios of the time, where each vendor produced one, or at most a few,
    proprietary computer chip architectures, on which they sold their own proprietary
    operating system(s). The proprietary nature of most vendor systems meant that
    purchasers were locked into one vendor. Switching to another proprietary operating
    system and hardware platform could become very expensive because of the need to
    port existing applications and retrain staff. This factor, coupled with the appearance
    of cheap single-user UNIX workstations from a variety of vendors, made the portable
    UNIX system increasingly attractive from a commercial perspective.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，除了各种在学术界流传的 BSD 发行版外，到 1980 年代末，UNIX 已经出现在各种硬件上的多个商业实现中。这些实现包括 Sun 的 SunOS
    和后来的 Solaris、Digital 的 Ultrix 和 OSF/1（如今经过一系列更名和收购后，变成了 HP Tru64 UNIX）、IBM 的 AIX、惠普（HP）的
    HP-UX、NeXT 的 NeXTStep、苹果 Macintosh 的 A/UX 以及微软和 SCO 为 Intel x86-32 架构推出的 XENIX。（在本书中，Linux
    在 x86-32 上的实现被称为 Linux/x86-32。）这种情况与当时典型的专有硬件/操作系统场景形成了鲜明对比，在这些场景中，每个厂商通常只生产一种或几种专有计算机芯片架构，并在这些架构上销售自家的专有操作系统。大多数厂商系统的专有性质意味着购买者被绑定于一个厂商。由于需要移植现有的应用程序并重新培训员工，切换到另一个专有操作系统和硬件平台可能会非常昂贵。这一因素，加上来自多家厂商的廉价单用户
    UNIX 工作站的出现，从商业角度看，使得便携式 UNIX 系统越来越具有吸引力。
- en: A Brief History of Linux
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux 简史
- en: The term *Linux* is commonly used to refer to the entire UNIX-like operating
    system of which the Linux kernel forms a part. However, this is something of a
    misnomer, since many of the key components contained within a typical commercial
    Linux distribution actually originate from a project that predates the inception
    of Linux by several years.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*Linux* 这个术语通常用来指代整个类 UNIX 操作系统，其中 Linux 内核是其一部分。然而，这实际上是一个误用，因为许多典型商业 Linux
    发行版中的关键组件实际上来自一个早于 Linux 创立几年的项目。'
- en: The GNU Project
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GNU 项目
- en: In 1984, Richard Stallman, an exceptionally talented programmer who had been
    working at MIT, set to work on creating a “free” UNIX implementation. Stallman’s
    outlook was a moral one, and *free* was defined in a legal sense, rather than
    a financial sense (see [http://www.gnu.org/philosophy/free-sw.html](http://www.gnu.org/philosophy/free-sw.html)).
    Nevertheless, the legal freedom that Stallman described carried with it the implicit
    consequence that software such as operating systems would be available at no or
    very low cost.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 1984 年，理查德·斯托曼（Richard Stallman），一位在 MIT 工作的极具才华的程序员，开始着手创建一个“自由”的 UNIX 实现。斯托曼的观点是道德上的，*自由*
    是从法律意义上定义的，而非经济意义上的（见 [http://www.gnu.org/philosophy/free-sw.html](http://www.gnu.org/philosophy/free-sw.html)）。然而，斯托曼所描述的法律自由带来的隐含后果是，像操作系统这样的软件将以零成本或非常低的成本提供。
- en: Stallman militated against the legal restrictions placed on proprietary operating
    systems by computer vendors. These restrictions meant that purchasers of computer
    software in general could not see the source code of the software they were buying,
    and they certainly could not copy, change, or redistribute it. He pointed out
    that such a framework encouraged programmers to compete with each other and hoard
    their work, rather than to cooperate and share it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '斯托曼反对计算机厂商对专有操作系统施加的法律限制。这些限制意味着，计算机软件的购买者通常无法看到他们所购买软件的源代码，当然也无法复制、修改或重新分发它。他指出，这样的框架鼓励程序员相互竞争并囤积他们的作品，而不是合作和共享。 '
- en: In response, Stallman started the GNU project (a recursively defined acronym
    for “GNU’s not UNIX”) to develop an entire, freely available, UNIX-like system,
    consisting of a kernel and all associated software packages, and encouraged others
    to join him. In 1985, Stallman founded the Free Software Foundation (FSF), a nonprofit
    organization to support the GNU project as well as the development of free software
    in general.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应对这一点，斯塔尔曼启动了 GNU 项目（这是一个递归定义的首字母缩写，代表“GNU 不是 UNIX”），旨在开发一个完整的、自由可用的类 UNIX
    系统，包含内核和所有相关的软件包，并鼓励其他人加入。1985 年，斯塔尔曼成立了自由软件基金会（FSF），这是一个支持 GNU 项目以及自由软件开发的非营利组织。
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When the GNU project was started, BSD was not free in the sense that Stallman
    meant. Use of BSD still required a license from AT&T, and users could not freely
    modify and redistribute the AT&T code that formed part of BSD.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当 GNU 项目启动时，BSD 并不像斯塔尔曼所指的那样是自由的。使用 BSD 仍然需要 AT&T 的许可，用户不能自由修改和再分发作为 BSD 一部分的
    AT&T 代码。
- en: One of the important results of the GNU project was the development of the GNU
    *General Public License* (GPL), the legal embodiment of Stallman’s notion of free
    software. Much of the software in a Linux distribution, including the kernel,
    is licensed under the GPL or one of a number of similar licenses. Software licensed
    under the GPL must be made available in source code form, and must be freely redistributable
    under the terms of the GPL. Modifications to GPL-licensed software are freely
    permitted, but any distribution of such modified software must also be under the
    terms of the GPL. If the modified software is distributed in executable form,
    the author must also allow any recipients the option of obtaining the modified
    source for no more than the cost of distribution. The first version of the GPL
    was released in 1989\. The current version of the license, version 3, was released
    in 2007. Version 2 of the license, released in 1991, remains in wide use, and
    is the license used for the Linux kernel. (Discussions of various free software
    licenses can be found in [St. Laurent, 2004] and [Rosen, 2005].)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: GNU 项目的一个重要成果是开发了 GNU *通用公共许可证*（GPL），它是斯塔尔曼关于自由软件的理念的法律体现。许多 Linux 发行版中的软件，包括内核，都是在
    GPL 或其他类似许可证下授权的。根据 GPL 许可的软件下载后，必须以源代码形式提供，并且根据 GPL 条款自由分发。对 GPL 授权软件的修改是被允许的，但任何修改后的软件分发也必须遵守
    GPL 条款。如果修改后的软件以可执行文件形式分发，作者还必须允许任何接收者以不高于分发成本的费用获得修改后的源代码。GPL 的第一个版本于 1989 年发布。目前的许可证版本
    3 于 2007 年发布，许可证版本 2 于 1991 年发布，仍在广泛使用，并且是 Linux 内核使用的许可证。（关于各种自由软件许可证的讨论可以参考
    [St. Laurent, 2004] 和 [Rosen, 2005]。）
- en: The GNU project did not initially produce a working UNIX kernel, but did produce
    a wide range of other programs. Since these programs were designed to run on a
    UNIX-like operating system, they could be, and were, used on existing UNIX implementations
    and, in some cases, even ported to other operating systems. Among the more well-known
    programs produced by the GNU project are the *Emacs* text editor, *GCC* (originally
    the GNU C compiler, but now renamed the GNU compiler collection, comprising compilers
    for C, C++, and other languages), the *bash* shell, and *glibc* (the GNU C library).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: GNU 项目最初并没有生产一个可用的 UNIX 内核，但确实生产了大量其他程序。由于这些程序是为了在类 UNIX 操作系统上运行而设计的，它们可以，也确实被用于现有的
    UNIX 实现，并且在某些情况下，甚至被移植到其他操作系统上。GNU 项目生产的一些较为著名的程序包括 *Emacs* 文本编辑器、*GCC*（最初是 GNU
    C 编译器，现在已更名为 GNU 编译器集合，包含 C、C++ 及其他语言的编译器）、*bash* shell 和 *glibc*（GNU C 库）。
- en: 'By the early 1990s, the GNU project had produced a system that was virtually
    complete, except for one important component: a working UNIX kernel. The GNU project
    had started work on an ambitious kernel design, known as the GNU/HURD, based on
    the Mach microkernel. However, the HURD was far from being in a form that could
    be released. (At the time of writing, work continues on the HURD, which currently
    runs only on the x86-32 architecture.)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 到 1990 年代初期，GNU 项目几乎已完成了一个系统，唯一缺少的就是一个可用的 UNIX 内核。GNU 项目开始了一个雄心勃勃的内核设计工作，称为
    GNU/HURD，基于 Mach 微内核。然而，HURD 离能够发布的状态还远远不够。（截至目前，HURD 仍在开发中，目前仅能在 x86-32 架构上运行。）
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Because a significant part of the program code that constitutes what is commonly
    known as the Linux system actually derives from the GNU project, Stallman prefers
    to use the term *GNU/Linux* to refer to the entire system. The question of naming
    (Linux versus GNU/Linux) is the source of some debate in the free software community.
    Since this book is primarily concerned with the API of the Linux kernel, we’ll
    generally use the term *Linux*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因为构成通常所称的 Linux 系统的大部分程序代码实际上源自 GNU 项目，斯托曼更倾向于使用术语 *GNU/Linux* 来指代整个系统。关于命名（Linux
    与 GNU/Linux）的问题在自由软件社区中引发了一些争论。由于本书主要关注 Linux 内核的 API，我们通常使用术语 *Linux*。
- en: The stage was set. All that was required was a working kernel to go with the
    otherwise complete UNIX system already produced by the GNU project.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 舞台已经搭建完毕。所需要的只是一个可用的内核，与 GNU 项目已完成的其他 UNIX 系统相配合。
- en: The Linux Kernel
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linux 内核
- en: In 1991, Linus Torvalds, a Finnish student at the University of Helsinki, was
    inspired to write an operating system for his Intel 80386 PC. In the course of
    his studies, Torvalds had come into contact with Minix, a small UNIX-like operating
    system kernel developed in the mid-1980s by Andrew Tanenbaum, a university professor
    in Holland. Tanenbaum made Minix, complete with source code, available as a tool
    for teaching operating system design in university courses. The Minix kernel could
    be built and run on a 386 system. However, since its primary purpose was as a
    teaching tool, it was designed to be largely independent of the hardware architecture,
    and it did not take full advantage of the 386 processor’s capabilities.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 1991 年，芬兰赫尔辛基大学的学生林纳斯·托瓦尔兹受到启发，为他的英特尔 80386 PC 编写一个操作系统。在学习过程中，托瓦尔兹接触到了 Minix，这是一个由荷兰大学教授安德鲁·塔能鲍姆在
    1980 年代中期开发的小型 UNIX 类操作系统内核。塔能鲍姆将 Minix（包含源代码）作为教学工具提供，用于大学课程中的操作系统设计教学。Minix
    内核可以在 386 系统上构建和运行。然而，由于其主要目的是作为教学工具，它被设计为尽可能独立于硬件架构，并未充分利用 386 处理器的能力。
- en: 'Torvalds therefore started on a project to create an efficient, full-featured
    UNIX kernel to run on the 386\. Over a few months, Torvalds developed a basic
    kernel that allowed him to compile and run various GNU programs. Then, on October
    5, 1991, Torvalds requested the help of other programmers, making the following
    now much-quoted announcement of version 0.02 of his kernel in the *comp.os.minix*
    Usenet newsgroup:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，托瓦尔兹开始着手一个项目，旨在创建一个高效、功能齐全的 UNIX 内核，以便在 386 上运行。几个月后，托瓦尔兹开发了一个基本的内核，使他能够编译并运行各种
    GNU 程序。然后，在 1991 年 10 月 5 日，托瓦尔兹请求其他程序员的帮助，并在 *comp.os.minix* Usenet 新闻组中发布了以下现在广为引用的版本
    0.02 的内核公告：
- en: Do you pine for the nice days of Minix-1.1, when men were men and wrote their
    own device drivers? Are you without a nice project and just dying to cut your
    teeth on a OS you can try to modify for your needs? Are you finding it frustrating
    when everything works on Minix? No more all-nighters to get a nifty program working?
    Then this post might be just for you. As I mentioned a month ago, I’m working
    on a free version of a Minix-look-alike for AT-386 computers. It has finally reached
    the stage where it’s even usable (though may not be depending on what you want),
    and I am willing to put out the sources for wider distribution. It is just version
    0.02 . . . but I’ve successfully run bash, gcc, gnu-make, gnu-sed, compress, etc.
    under it.
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你是否怀念 Minix-1.1 的美好时光，那时的男儿汉都能编写自己的设备驱动程序？你是否没有一个合适的项目，正急于在一个可以修改以适应自己需求的操作系统上动手？当
    Minix 一切顺利时，你是否感到沮丧？不再需要熬夜才能让一个炫酷的程序正常工作？那么这篇帖子或许正适合你。正如我一个月前提到的，我正在为 AT-386 计算机开发一个免费的
    Minix 类似操作系统。它终于达到了一个可用的阶段（虽然根据你的需求可能会有所不同），并且我愿意公开源代码，供更广泛的分发。这只是版本 0.02 ……但我已经成功运行了
    bash、gcc、gnu-make、gnu-sed、compress 等程序。
- en: Following a time-honored tradition of giving UNIX clones names ending with the
    letter *X*, the kernel was (eventually) baptized Linux. Initially, Linux was placed
    under a more restrictive license, but Torvalds soon made it available under the
    GNU GPL.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 按照 UNIX 克隆系统通常以 *X* 结尾的命名传统，内核最终被命名为 Linux。最初，Linux 采用了更为严格的许可协议，但托瓦尔兹很快将其改为基于
    GNU GPL 许可协议。
- en: The call for support proved effective. Other programmers joined Torvalds in
    the development of Linux, adding various features, such as an improved file system,
    networking support, device drivers, and multiprocessor support. By March 1994,
    the developers were able to release version 1.0\. Linux 1.2 appeared in March
    1995, Linux 2.0 in June 1996, Linux 2.2 in January 1999, and Linux 2.4 in January
    2001\. Work on the 2.5 development kernel began in November 2001, and led to the
    release of Linux 2.6 in December 2003.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 支持的呼声证明是有效的。其他程序员加入了Torvalds，参与了Linux的开发，增加了各种功能，如改进的文件系统、网络支持、设备驱动程序和多处理器支持。到1994年3月，开发人员已经能够发布版本1.0。Linux
    1.2于1995年3月发布，Linux 2.0于1996年6月发布，Linux 2.2于1999年1月发布，Linux 2.4于2001年1月发布。2.5开发内核的工作始于2001年11月，并于2003年12月发布了Linux
    2.6。
- en: 'An aside: the BSDs'
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 插曲：BSD
- en: It is worth noting that another free UNIX was already available for the x86-32
    during the early 1990s. Bill and Lynne Jolitz had developed a port of the already
    mature BSD system for the x86-32, known as 386/BSD. This port was based on the
    BSD Net/2 release (June 1991), a version of the 4.3BSD source code in which all
    remaining proprietary AT&T source code had either been replaced or, in the case
    of six source code files that could not be trivially rewritten, removed. The Jolitzes
    ported the Net/2 code to x86-32, rewrote the missing source files, and made the
    first release (version 0.0) of 386/BSD in February 1992.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，在1990年代早期，另一个免费的UNIX已经可以在x86-32上使用。Bill和Lynne Jolitz开发了一个已经成熟的BSD系统的x86-32移植版本，称为386/BSD。这个移植版基于BSD
    Net/2版本（1991年6月），它是4.3BSD源代码的一个版本，其中所有剩余的AT&T专有源代码要么已被替换，要么在六个无法轻易重写的源文件的情况下已被移除。Jolitz夫妇将Net/2代码移植到x86-32上，重写了缺失的源文件，并于1992年2月发布了386/BSD的第一个版本（版本0.0）。
- en: 'After an initial wave of success and popularity, work on 386/BSD lagged for
    various reasons. In the face of an increasingly large backlog of patches, two
    alternative development groups soon appeared, creating their own releases based
    on 386/BSD: NetBSD, which emphasizes portability to a wide range of hardware platforms,
    and FreeBSD, which emphasizes performance and is the most widespread of the modern
    BSDs. The first NetBSD release was 0.8, in April 1993\. The first FreeBSD CD-ROM
    (version 1.0) appeared in December 1993\. Another BSD, OpenBSD, appeared in 1996
    (as an initial version numbered 2.0) after forking from the NetBSD project. OpenBSD
    emphasizes security. In mid-2003, a new BSD, DragonFly BSD, appeared after a split
    from FreeBSD 4.*x*. DragonFly BSD takes a different approach from FreeBSD 5.*x*
    with respect to design for symmetric multiprocessing (SMP) architectures.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在初期的成功和流行浪潮之后，386/BSD的开发因各种原因滞后。面对日益增加的补丁积压，两个替代的开发小组很快出现，他们基于386/BSD创建了自己的发行版：NetBSD，强调对广泛硬件平台的移植性；FreeBSD，强调性能，是现代BSD中最为广泛使用的版本。NetBSD的第一个版本是0.8，于1993年4月发布。FreeBSD的第一个CD-ROM（版本1.0）于1993年12月发布。另一个BSD，OpenBSD，于1996年出现（作为初始版本2.0），并从NetBSD项目中分支出来。OpenBSD强调安全性。2003年中期，一个新的BSD——DragonFly
    BSD出现，它从FreeBSD 4.*x*分裂出来。DragonFly BSD与FreeBSD 5.*x*在对称多处理（SMP）架构的设计上采取了不同的方法。
- en: Probably no discussion of the BSDs in the early 1990s is complete without mention
    of the lawsuits between UNIX System Laboratories (USL, the AT&T subsidiary spun
    off to develop and market UNIX) and Berkeley. In early 1992, the company Berkeley
    Software Design, Incorporated (BSDi, nowadays part of Wind River) began distributing
    a commercially supported BSD UNIX, BSD/OS, based on the Net/2 release and the
    Jolitzes’ 386/BSD additions. BSDi distributed binaries and source code for $995
    (US dollars), and advised potential customers to use their telephone number 1-800-ITS-UNIX.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 大概没有关于1990年代早期BSD的讨论会完整，不提到UNIX系统实验室（USL，AT&T子公司，成立开发和营销UNIX）与伯克利之间的诉讼。1992年初，伯克利软件设计公司（BSDi，现在是Wind
    River的一部分）开始分发基于Net/2版本和Jolitzes的386/BSD扩展的商业支持BSD UNIX——BSD/OS。BSDi以995美元的价格分发二进制文件和源代码，并建议潜在客户拨打他们的电话号码1-800-ITS-UNIX。
- en: In April 1992, USL filed suit against BSDi in an attempt to prevent BSDi from
    selling a product that USL claimed was still encumbered by proprietary USL source
    code and trade secrets. USL also demanded that BSDi cease using the deceptive
    telephone number. The suit was eventually widened to include a claim against the
    University of California. The court ultimately dismissed all but two of USL’s
    claims, and a countersuit by the University of California against USL ensued,
    in which the university claimed that USL had not given due credit for the use
    of BSD code in System V.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 1992年4月，USL对BSDi提起诉讼，试图阻止BSDi销售USL声称仍然受到其专有源代码和商业机密约束的产品。USL还要求BSDi停止使用误导性的电话号码。诉讼最终扩展至加利福尼亚大学，法院最终驳回了USL的除两个之外的所有诉讼请求，随后加利福尼亚大学对USL提出反诉，大学声称USL未对其在System
    V中使用BSD代码给予应有的认可。
- en: While these suits were pending, USL was acquired by Novell, whose CEO, the late
    Ray Noorda, stated publicly that he would prefer to compete in the marketplace
    rather than in the court. Settlement was finally reached in January 1994, with
    the University of California being required to remove 3 of the 18,000 files in
    the Net/2 release, make some minor changes to a few other files, and add USL copyright
    notices to around 70 other files, which the university nevertheless could continue
    to distribute freely. This modified system was released as 4.4BSD-Lite in June
    1994\. (The last release from the university was 4.4BSD-Lite, Release 2 in June
    1995.) At this point, the terms of the legal settlement required BSDi, FreeBSD,
    and NetBSD to replace their Net/2 base with the modified 4.4BSD-Lite source code.
    As [McKusick et al., 1996] notes, although this caused some delay in the development
    of the BSD derivatives, it also had the positive effect that these systems resynchronized
    with the three years of development work done by the university’s Computer Systems
    Research Group since the release of Net/2.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些诉讼尚未解决期间，USL被Novell收购，Novell的CEO已故的Ray Noorda公开表示，他更愿意在市场上竞争，而不是在法庭上竞争。最终，1994年1月达成了和解协议，要求加利福尼亚大学从Net/2版本中删除18,000个文件中的3个文件，对其他一些文件做出一些小的修改，并在大约70个文件中添加USL的版权声明，而这些文件大学仍然可以继续自由分发。经过修改的系统于1994年6月作为4.4BSD-Lite发布。（大学的最后一个版本是1995年6月发布的4.4BSD-Lite版本2。）此时，法律和解协议的条款要求BSDi、FreeBSD和NetBSD将其Net/2基础替换为修改后的4.4BSD-Lite源代码。正如[McKusick等，1996]所指出的，尽管这导致BSD衍生版本的开发出现了一些延迟，但也有一个积极的效果，那就是这些系统重新与大学计算机系统研究小组自Net/2发布以来三年的开发工作进行了同步。
- en: Linux kernel version numbers
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Linux内核版本号
- en: 'Like most free software projects, Linux follows a release-early, release-often
    model, so that new kernel revisions appear frequently (sometimes even daily).
    As the Linux user base increased, the release model was adapted to decrease disruption
    to existing users. Specifically, following the release of Linux 1.0, the kernel
    developers adopted a kernel version numbering scheme with each release numbered
    *x.y.z*: *x* representing a major version, *y* a minor version within that major
    version, and *z* a revision of the minor version (minor improvements and bug fixes).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 和大多数自由软件项目一样，Linux遵循"尽早发布，频繁发布"的模式，因此新的内核版本会频繁出现（有时甚至是每天）。随着Linux用户基础的增加，发布模式也进行了调整，以减少对现有用户的干扰。具体来说，在Linux
    1.0发布后，内核开发者采用了一个版本编号方案，每次发布的版本号格式为*x.y.z*：*x*代表主版本，*y*代表该主版本中的次版本，*z*代表次版本的修订（次要改进和错误修复）。
- en: 'Under this model, two kernel versions were always under development: a *stable*
    branch for use on production systems, which had an even minor version number,
    and a more volatile *development* branch, which carried the next higher odd minor
    version number. The theory–not always followed strictly in practice–was that all
    new features should be added in the current development kernel series, while new
    revisions in the stable kernel series should be restricted to minor improvements
    and bug fixes. When the current development branch was deemed suitable for release,
    it became the new stable branch and was assigned an even minor version number.
    For example, the 2.3.*z* development kernel branch resulted in the 2.4 stable
    kernel branch.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一模型下，总是有两个内核版本在开发中：一个是用于生产系统的 *稳定* 分支，具有偶数次要版本号；另一个是更为波动的 *开发* 分支，具有下一个更高的奇数次要版本号。这一理论——尽管在实际操作中并不总是严格遵循——是所有新特性应当添加到当前的开发内核系列中，而稳定内核系列中的新修订应当仅限于次要改进和漏洞修复。当当前的开发分支被认为适合发布时，它会成为新的稳定分支并分配一个偶数次要版本号。例如，2.3.*z*
    开发内核分支导致了 2.4 稳定内核分支的发布。
- en: 'Following the 2.6 kernel release, the development model was changed. The main
    motivation for this change arose from problems and frustrations caused by the
    long intervals between stable kernel releases. (Nearly three years passed between
    the release of Linux 2.4.0 and 2.6.0.) There have periodically been discussions
    about fine-tuning this model, but the essential details have remained as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.6 内核发布后，开发模型发生了变化。这一变化的主要动因源自于稳定内核发布之间较长间隔所带来的问题和挫折。（从 Linux 2.4.0 发布到 2.6.0
    发布几乎经历了三年的时间。）关于如何调整这一模型的讨论时常发生，但核心细节保持不变，如下所示：
- en: There is no longer a separation between stable and development kernels. Each
    new 2.6.*z* release can contain new features, and goes through a life cycle that
    begins with the addition of new features, which are then stabilized over the course
    of a number of candidate release versions. When a candidate version is deemed
    sufficiently stable, it is released as kernel 2.6.*z*. Release cycles are typically
    about three months long.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再区分稳定内核和开发内核。每个新的 2.6.*z* 版本都可能包含新特性，并经历一个生命周期，首先是新特性的添加，然后通过多个候选发布版本的过程中进行稳定化。当一个候选版本被认为足够稳定时，它将作为
    2.6.*z* 内核发布。发布周期通常约为三个月。
- en: Sometimes, a stable 2.6.*z* release may require minor patches to fix bugs or
    security problems. If these fixes have a sufficiently high priority, and the patches
    are deemed simple enough to be “obviously” correct, then, rather than waiting
    for the next 2.6.*z* release, they are applied to create a release with a number
    of the form 2.6.*z.r*, where *r* is a sequential number for a minor revision of
    this 2.6.*z* kernel.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时，稳定的 2.6.*z* 版本可能需要小的补丁来修复漏洞或安全问题。如果这些修复具有足够高的优先级，并且补丁被认为是简单且“显然”正确的，那么，开发团队将不会等待下一个
    2.6.*z* 发布版本，而是应用补丁以创建一个形式为 2.6.*z.r* 的版本，其中 *r* 是该 2.6.*z* 内核的一个次要修订版本的顺序号。
- en: Additional responsibility is shifted onto distribution vendors to ensure the
    stability of the kernel provided with a distribution.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 额外的责任被转移到发行版供应商身上，以确保与发行版一起提供的内核的稳定性。
- en: Later chapters will sometimes note the kernel version in which a particular
    API change (i.e., new or modified system call) occurred. Although, prior to the
    2.6.*z* series, most kernel changes occurred in the odd-numbered development branches,
    we’ll generally refer to the following stable kernel version in which the change
    appeared, since most application developers would normally be using a stable kernel,
    rather than one of the development kernels. In many cases, the manual pages note
    the precise development kernel in which a particular feature appeared or changed.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 后续章节有时会注明某个特定 API 变更（例如新的或修改过的系统调用）发生的内核版本。虽然在 2.6.*z* 系列之前，大多数内核更改发生在奇数编号的开发分支中，但我们通常会引用该变更首次出现在的稳定内核版本，因为大多数应用开发人员通常会使用稳定内核，而不是开发内核。在许多情况下，手册页会注明某个特性首次出现或发生变化的确切开发内核版本。
- en: For changes that appear in the 2.6.*z* kernel series, we note the precise kernel
    version. When we say that a feature is new in kernel 2.6, without a *z* revision
    number, we mean a feature that was implemented in the 2.5 development kernel series
    and first appeared in the stable kernel at version 2.6.0.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于出现在 2.6.*z* 内核系列中的更改，我们会注明具体的内核版本。当我们说某个特性在 2.6 内核中是新的时，若没有指定 *z* 修订版本号，我们指的是该特性已在
    2.5 开发内核系列中实现，并且首次出现在 2.6.0 稳定内核版本中。
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注：
- en: At the time of writing, the 2.4 stable Linux kernel is still supported by maintainers
    who incorporate essential patches and bug fixes, and periodically release new
    revisions. This allows installed systems to continue to use 2.4 kernels, rather
    than being forced to upgrade to a new kernel series (which may entail significant
    work in some cases).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 截至写作时，2.4 稳定版的 Linux 内核仍然得到维护者的支持，维护者会将重要的补丁和错误修复集成进来，并定期发布新版本。这使得已经安装的系统能够继续使用
    2.4 内核，而无需强制升级到新的内核系列（这在某些情况下可能需要进行大量工作）。
- en: Ports to other hardware architectures
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 移植到其他硬件架构
- en: During the initial development of Linux, efficient implementation on the Intel
    80386 was the primary goal, rather than portability to other processor architectures.
    However, with the increasing popularity of Linux, ports to other processor architectures
    began to appear, starting with an early port to the Digital Alpha chip. The list
    of hardware architectures to which Linux has been ported continues to grow and
    includes x86-64, Motorola/IBM PowerPC and PowerPC64, Sun SPARC and SPARC64 (UltraSPARC),
    MIPS, ARM (Acorn), IBM zSeries (formerly System/390), Intel IA-64 (Itanium; see
    [Mosberger & Eranian, 2002]), Hitachi SuperH, HP PA-RISC, and Motorola 68000.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 初期的开发过程中，高效地在 Intel 80386 上实现是主要目标，而不是移植到其他处理器架构。然而，随着 Linux 的日益流行，针对其他处理器架构的移植开始出现，最早是对
    Digital Alpha 芯片的移植。Linux 移植的硬件架构列表不断增长，包括 x86-64、摩托罗拉/IBM PowerPC 和 PowerPC64、Sun
    SPARC 和 SPARC64（UltraSPARC）、MIPS、ARM（Acorn）、IBM zSeries（以前的 System/390）、Intel
    IA-64（Itanium；见 [Mosberger & Eranian, 2002]）、日立 SuperH、HP PA-RISC 和摩托罗拉 68000。
- en: Linux distributions
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Linux 发行版
- en: Precisely speaking, the term *Linux* refers just to the kernel developed by
    Linus Torvalds and others. However, the term *Linux* is commonly used to mean
    the kernel, plus a wide range of other software (tools and libraries) that together
    make a complete operating system. In the very early days of Linux, the user was
    required to assemble all of this software, create a file system, and correctly
    place and configure all of the software on that file system. This demanded considerable
    time and expertise. As a result, a market opened for Linux distributors, who created
    packages (*distributions*) to automate most of the installation process, creating
    a file system and installing the kernel and other required software.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 精确地说，*Linux* 一词仅指由 Linus Torvalds 和其他人开发的内核。然而，*Linux* 这个术语通常用来指代内核，以及一系列其他软件（工具和库），这些软件共同构成一个完整的操作系统。在
    Linux 的早期，用户需要自行组装所有这些软件，创建文件系统，并正确地将所有软件放置和配置到该文件系统上。这要求用户花费大量的时间和专业知识。因此，Linux
    发行商市场应运而生，他们创建了软件包（*发行版*）来自动化大部分安装过程，创建文件系统并安装内核和其他必要的软件。
- en: The earliest distributions appeared in 1992, and included MCC Interim Linux
    (Manchester Computing Centre, UK), TAMU (Texas A&M University), and SLS (SoftLanding
    Linux System). The oldest surviving commercial distribution, Slackware, appeared
    in 1993\. The noncommercial Debian distribution appeared at around the same time,
    and SUSE and Red Hat soon followed. The currently very popular Ubuntu distribution
    first appeared in 2004\. Nowadays, many distribution companies also employ programmers
    who actively contribute to existing free software projects or initiate new projects.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最早的发行版出现在 1992 年，包括 MCC Interim Linux（曼彻斯特计算中心，英国）、TAMU（德州农工大学）和 SLS（SoftLanding
    Linux System）。最古老的存活商业发行版 Slackware 出现于 1993 年。非商业的 Debian 发行版大约在同一时间出现，SUSE 和
    Red Hat 很快跟进。现在非常流行的 Ubuntu 发行版首次出现于 2004 年。如今，许多发行版公司也雇佣程序员，积极贡献现有的自由软件项目或发起新的项目。
- en: Standardization
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准化
- en: By the late 1980s, the wide variety of available UNIX implementations also had
    its drawbacks. Some UNIX implementations were based on BSD, others were based
    on System V, and some drew features from both variants. Furthermore, each commercial
    vendor had added extra features to its own implementation. The consequence was
    that moving software and people from one UNIX implementation to another became
    steadily more difficult. This situation created strong pressure for standardization
    of the C programming language and the UNIX system, so that applications could
    more easily be ported from one system to another. We now look at the resulting
    standards.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 到1980年代末期，广泛的UNIX实现种类也带来了缺点。一些UNIX实现基于BSD，另一些基于System V，还有一些则从这两种变体中汲取特性。此外，每个商业供应商都为其自己的实现添加了额外的功能。结果是，将软件和人员从一个UNIX实现迁移到另一个实现变得越来越困难。这个情况导致了强烈的标准化压力，旨在对C编程语言和UNIX系统进行标准化，以便更容易地将应用程序从一个系统移植到另一个系统。接下来我们将介绍最终形成的标准。
- en: The C Programming Language
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C程序设计语言
- en: By the early 1980s, C had been in existence for ten years, and was implemented
    on a wide variety of UNIX systems and on other operating systems. Minor differences
    had arisen between the various implementations, in part because certain aspects
    of how the language should function were not detailed in the existing de facto
    standard for C, Kernighan and Ritchie’s 1978 book, *The C Programming Language*.
    (The older C syntax described in that book is sometimes called *traditional C*
    or *K&R C*.) Furthermore, the appearance of C++ in 1985 highlighted certain improvements
    and additions that could be made to C without breaking existing programs, notably
    function prototypes, structure assignment, type qualifiers (*const* and *volatile*),
    enumeration types, and the *void* keyword.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 到1980年代初期，C语言已经存在了十年，并且在各种UNIX系统和其他操作系统上得到了实现。由于一些语言功能的细节在现有的事实标准《C程序设计语言》中没有明确说明，因此不同实现之间出现了小的差异。（这本书的较旧C语法有时被称为*传统C*或*K&R
    C*。）此外，1985年C++的出现突显了可以对C进行的一些改进和添加，而不会破坏现有的程序，特别是函数原型、结构赋值、类型限定符（*const*和*volatile*）、枚举类型和*void*关键字。
- en: These factors created a drive for C standardization that culminated in 1989
    with the approval of the American National Standards Institute (ANSI) C standard
    (X3.159-1989), which was subsequently adopted in 1990 as an International Standards
    Organization (ISO) standard (ISO/IEC 9899:1990). As well as defining the syntax
    and semantics of C, this standard described the operation of the standard C library,
    which includes the *stdio* functions, string-handling functions, math functions,
    various header files, and so on. This version of C is usually known as *C89* or
    (less commonly) *ISO C90*, and is fully described in the second (1988) edition
    of Kernighan and Ritchie’s *The C Programming Language*.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这些因素推动了C标准化的进程，最终在1989年达成了美国国家标准协会（ANSI）C标准（X3.159-1989）的批准，随后于1990年作为国际标准组织（ISO）标准（ISO/IEC
    9899:1990）获得通过。除了定义C语言的语法和语义外，这一标准还描述了标准C库的操作，包括*stdio*函数、字符串处理函数、数学函数、各种头文件等。这个版本的C通常被称为*C89*或（较少称为）*ISO
    C90*，并且在Kernighan和Ritchie的《C程序设计语言》第二版（1988年）中有详细描述。
- en: A revision of the C standard was adopted by ISO in 1999 (ISO/IEC 9899:1999;
    see [http://www.open-std.org/jtc1/sc22/wg14/www/standards](http://www.open-std.org/jtc1/sc22/wg14/www/standards)).
    This standard is usually referred to as C99, and includes a range of changes to
    the language and its standard library. These changes include the addition of *long
    long* and Boolean data types, C++-style (//) comments, restricted pointers, and
    variable-length arrays. (At the time of writing, work is in progress on a further
    revision of the C standard, informally named C1X. The new standard is expected
    to be ratified in 2011.)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: C标准的修订版于1999年由ISO通过（ISO/IEC 9899:1999；见[http://www.open-std.org/jtc1/sc22/wg14/www/standards](http://www.open-std.org/jtc1/sc22/wg14/www/standards)）并获得批准。这个标准通常被称为C99，包含了对语言及其标准库的一系列更改。这些更改包括添加*long
    long*和布尔数据类型、C++风格的（//）注释、限制指针以及可变长度数组。（在写作时，C标准的进一步修订工作正在进行中，非正式地称为C1X。预计新标准将在2011年获得批准。）
- en: The C standards are independent of the details of any operating system; that
    is, they are not tied to the UNIX system. This means that C programs written using
    only the standard C library should be portable to any computer and operating system
    providing a C implementation.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: C标准与任何操作系统的细节是独立的；也就是说，它们与UNIX系统没有绑定。这意味着，使用标准C库编写的C程序应该能够移植到任何提供C实现的计算机和操作系统上。
- en: Note
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Historically, C89 was often called *ANSI C*, and this term is sometimes still
    used with that meaning. For example, *gcc* employs that meaning; its -*ansi* qualifier
    means “support all ISO C90 programs.” However, we avoid this term because it is
    now somewhat ambiguous. Since the ANSI committee adopted the C99 revision, properly
    speaking, ANSI C is now C99.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，C89通常被称为*ANSI C*，这个术语有时仍然以这种含义使用。例如，*gcc*就使用了这个含义；它的-*ansi*限定符意味着“支持所有ISO
    C90程序”。然而，我们避免使用这个术语，因为它现在有些模糊。自从ANSI委员会采纳了C99修订版后，严格来说，ANSI C现在指的是C99。
- en: The First POSIX Standards
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一个POSIX标准
- en: The term POSIX (an abbreviation of *Portable Operating System Interface*) refers
    to a group of standards developed under the auspices of the Institute of Electrical
    and Electronic Engineers (IEEE), specifically its Portable Application Standards
    Committee (PASC, [http://www.pasc.org/](http://www.pasc.org/)). The goal of the
    PASC standards is to promote application portability at the source code level.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX这个术语（即*可移植操作系统接口*的缩写）指的是在电气和电子工程师学会（IEEE）的支持下开发的一组标准，特别是其可移植应用标准委员会（PASC，[http://www.pasc.org/](http://www.pasc.org/)）。PASC标准的目标是促进源代码级别的应用程序可移植性。
- en: Note
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The name POSIX was suggested by Richard Stallman. The final *X* appears because
    the names of most UNIX variants end in *X*. The standard notes that the name should
    be pronounced “pahz-icks,” like “positive.”
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX这个名字是由理查德·斯托尔曼（Richard Stallman）建议的。最后的*X*是因为大多数UNIX变种的名称以*X*结尾。标准指出，这个名字应该发音为“pahz-icks”，类似于“positive”。
- en: The most interesting of the POSIX standards for our purposes are the first POSIX
    standard, referred to as POSIX.1 (or, more fully, POSIX 1003.1), and the subsequent
    POSIX.2 standard.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们来说，最有趣的POSIX标准是第一个POSIX标准，称为POSIX.1（或者更完整地说，POSIX 1003.1），以及随后的POSIX.2标准。
- en: POSIX.1 and POSIX.2
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: POSIX.1和POSIX.2
- en: POSIX.1 became an IEEE standard in 1988 and, with minor revisions, was adopted
    as an ISO standard in 1990 (ISO/IEC 9945-1:1990). (The original POSIX standards
    are not available online, but can be purchased from the IEEE at [http://www.ieee.org/](http://www.ieee.org/).)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX.1在1988年成为IEEE标准，并在1990年经过小幅修订后被采纳为ISO标准（ISO/IEC 9945-1:1990）。(原始的POSIX标准无法在线获取，但可以从IEEE购买，网址为[http://www.ieee.org/](http://www.ieee.org/)。)
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: POSIX.1 was initially based on an earlier (1984) unofficial standard produced
    by an association of UNIX vendors called */usr/group*.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX.1最初基于一个较早的（1984年）由UNIX厂商协会*/usr/group*制定的非官方标准。
- en: POSIX.1 documents an API for a set of services that should be made available
    to a program by a conforming operating system. An operating system that does this
    can be certified as *POSIX.1 conformant*.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX.1文档定义了一组服务的API，这些服务应该由符合标准的操作系统提供给程序。实现这一点的操作系统可以获得*POSIX.1符合性认证*。
- en: POSIX.1 is based on the UNIX system call and the C library function API, but
    it doesn’t require any particular implementation to be associated with this interface.
    This means that the interface can be implemented by any operating system, not
    specifically a UNIX operating system. In fact, some vendors have added APIs to
    their proprietary operating systems that make them POSIX.1 conformant, while at
    the same time leaving the underlying operating system largely unchanged.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX.1基于UNIX系统调用和C库函数API，但它并不要求任何特定的实现与这个接口相关联。这意味着，任何操作系统都可以实现这个接口，而不仅仅是UNIX操作系统。事实上，一些厂商已经在其专有操作系统中添加了API，使其符合POSIX.1标准，同时在很大程度上保持底层操作系统不变。
- en: A number of extensions to the original POSIX.1 standard were also important.
    IEEE POSIX 1003.1b (POSIX.1b, formerly called POSIX.4 or POSIX 1003.4), ratified
    in 1993, contains a range of realtime extensions to the base POSIX standard. IEEE
    POSIX 1003.1c (POSIX.1c), ratified in 1995, is the definition of POSIX threads.
    In 1996, a revised version of the POSIX.1 standard (ISO/IEC 9945-1:1996) was produced,
    leaving the core text unchanged, but incorporating the realtime and threads extensions.
    IEEE POSIX 1003.1g (POSIX.1g) defined the networking APIs, including sockets.
    IEEE POSIX 1003.1d (POSIX.1d), ratified in 1999, and POSIX.1j, ratified in 2000,
    defined additional realtime extensions to the POSIX base standard.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对原始POSIX.1标准的若干扩展也非常重要。IEEE POSIX 1003.1b（POSIX.1b，前称POSIX.4或POSIX 1003.4）于1993年获得批准，包含了一系列对基础POSIX标准的实时扩展。IEEE
    POSIX 1003.1c（POSIX.1c）于1995年获得批准，定义了POSIX线程。1996年，发布了修订版的POSIX.1标准（ISO/IEC 9945-1:1996），核心文本保持不变，但纳入了实时和线程扩展。IEEE
    POSIX 1003.1g（POSIX.1g）定义了网络API，包括套接字。IEEE POSIX 1003.1d（POSIX.1d）于1999年获得批准，POSIX.1j于2000年获得批准，定义了POSIX基础标准的附加实时扩展。
- en: Note
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: The POSIX.1b realtime extensions include file synchronization; asynchronous
    I/O; process scheduling; high-precision clocks and timers; and interprocess communication
    using semaphores, shared memory, and message queues. The prefix *POSIX* is often
    applied to the three interprocess communication methods to distinguish them from
    the similar, but older, System V semaphores, shared memory, and message queues.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX.1b的实时扩展包括文件同步、异步I/O、进程调度、高精度时钟和定时器、以及使用信号量、共享内存和消息队列的进程间通信。前缀*POSIX*常用于三种进程间通信方法，以区别于类似但较老的System
    V信号量、共享内存和消息队列。
- en: A related standard, POSIX.2 (1992, ISO/IEC 9945-2:1993), standardized the shell
    and various UNIX utilities, including the command-line interface of the C compiler.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 相关标准POSIX.2（1992年，ISO/IEC 9945-2:1993）对Shell和各种UNIX工具进行了标准化，包括C编译器的命令行界面。
- en: FIPS 151-1 and FIPS 151-2
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: FIPS 151-1和FIPS 151-2
- en: FIPS is an abbreviation for Federal Information Processing Standard, the name
    of a set of standards specified by the US government for the purchase of its computer
    systems. In 1989, FIPS 151-1 was published. This standard was based on the 1988
    IEEE POSIX.1 standard and the draft ANSI C standard. The main difference between
    FIPS 151-1 and POSIX.1 (1988) was that the FIPS standard required some features
    that POSIX.1 left as optional. Because the US government is a major purchaser
    of computer systems, most computer vendors ensured that their UNIX systems conformed
    to the FIPS 151-1 version of POSIX.1.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: FIPS 是“联邦信息处理标准”（Federal Information Processing Standard）的缩写，指的是美国政府为其计算机系统采购所制定的一系列标准。1989年，FIPS
    151-1标准发布。该标准基于1988年的IEEE POSIX.1标准和草案中的ANSI C标准。FIPS 151-1与POSIX.1（1988年版）之间的主要区别在于，FIPS标准要求一些POSIX.1中作为可选项的特性。由于美国政府是计算机系统的主要采购方，大多数计算机供应商确保其UNIX系统符合FIPS
    151-1版的POSIX.1标准。
- en: FIPS 151-2 aligned with the 1990 ISO edition of POSIX.1, but was otherwise unchanged.
    The now outdated FIPS 151-2 was withdrawn as a standard in February 2000.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: FIPS 151-2与1990年版的ISO POSIX.1标准对齐，但其他方面没有变化。现已过时的FIPS 151-2在2000年2月被撤销作为标准。
- en: X/Open Company and The Open Group
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: X/Open公司和The Open Group
- en: X/Open Company was a consortium formed by an international group of computer
    vendors to adopt and adapt existing standards in order to produce a comprehensive,
    consistent set of open systems standards. It produced the *X/Open Portability
    Guide*, a series of portability guides based on the POSIX standards. The first
    important release of this guide was Issue 3 (XPG3) in 1989, followed by XPG4 in
    1992\. XPG4 was revised in 1994, which resulted in XPG4 version 2, a standard
    that also incorporated important parts of AT&T’s System V Interface Definition
    Issue 3, described in [Implementation Standards](ch01.html#implementation_standards
    "Implementation Standards"). This revision was also known as *Spec 1170*, with
    1170 referring to the number of *interfaces*–functions, header files, and commands–defined
    by the standard.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: X/Open公司是由一组国际计算机供应商组成的联合体，旨在采用和改进现有标准，制定一套全面、一致的开放系统标准。它发布了*X/Open可移植性指南*，该系列指南基于POSIX标准，主要用于指导系统的可移植性。该指南的第一次重要发布是1989年的Issue
    3（XPG3），随后是1992年的XPG4。XPG4在1994年进行了修订，发布了XPG4版本2，该标准还纳入了AT&T的System V接口定义第3版的关键部分，详见[实现标准](ch01.html#implementation_standards
    "实现标准")。这一修订也被称为*Spec 1170*，其中1170指的是标准所定义的*接口*—函数、头文件和命令的数量。
- en: When Novell, which acquired the UNIX systems business from AT&T in early 1993,
    later divested itself of that business, it transferred the rights to the UNIX
    trademark to X/Open. (The plan to make this transfer was announced in 1993, but
    legal requirements delayed the transfer until early 1994.) XPG4 version 2 was
    subsequently repackaged as the *Single UNIX Specification* (SUS, or sometimes
    SUSv1), and is also known as *UNIX 95*. This repackaging included XPG4 version
    2, the X/Open Curses Issue 4 version 2 specification, and the X/Open Networking
    Services (XNS) Issue 4 specification. Version 2 of the Single UNIX Specification
    (SUSv2, [http://www.unix.org/version2/online.html](http://www.unix.org/version2/online.html))
    appeared in 1997, and UNIX implementations certified against this specification
    can call themselves *UNIX 98*. (This standard is occasionally also referred to
    as XPG5.)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当Novell于1993年初收购了AT&T的UNIX系统业务，并在之后将其出售时，它将UNIX商标的使用权转交给了X/Open。（这项转让计划在1993年宣布，但由于法律要求，转让推迟到了1994年初。）XPG4版本2随后重新包装为*单一UNIX规范*（SUS，有时也称为SUSv1），并且也被称为*UNIX
    95*。这次重新包装包括了XPG4版本2、X/Open Curses第4版第2版规范以及X/Open网络服务（XNS）第4版规范。单一UNIX规范的版本2（SUSv2，
    [http://www.unix.org/version2/online.html](http://www.unix.org/version2/online.html)）于1997年发布，符合此规范的UNIX实现可以自称为*UNIX
    98*。（该标准有时也被称为XPG5。）
- en: In 1996, X/Open merged with the *Open Software Foundation* (OSF) to form *The
    Open Group*. Nearly every company or organization involved with the UNIX system
    is now a member of The Open Group, which continues to develop API standards.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 1996年，X/Open与*开放软件基金会*（OSF）合并，成立了*The Open Group*。几乎所有参与UNIX系统的公司或组织现在都是The
    Open Group的成员，The Open Group继续开发API标准。
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: OSF was one of two vendor consortia formed during the UNIX wars of the late
    1980s. Among others, OSF included Digital, IBM, HP, Apollo, Bull, Nixdorf, and
    Siemens. OSF was formed primarily in response to the threat created by a business
    alliance between AT&T (the originators of UNIX) and Sun (the most powerful player
    in the UNIX workstation market). Consequently, AT&T, Sun, and other companies
    formed the rival *UNIX International* consortium.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: OSF是1980年代末UNIX战争期间形成的两个供应商联盟之一。OSF包括了Digital、IBM、HP、Apollo、Bull、Nixdorf和Siemens等公司。OSF的成立主要是响应AT&T（UNIX的创始者）和Sun（UNIX工作站市场中最强大的参与者）之间的商业联盟所带来的威胁。因此，AT&T、Sun及其他公司组成了竞争对手*UNIX国际*联盟。
- en: SUSv3 and POSIX.1-2001
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SUSv3与POSIX.1-2001
- en: Beginning in 1999, the IEEE, The Open Group, and the ISO/IEC Joint Technical
    Committee 1 collaborated in the *Austin Common Standards Revision Group* (CSRG,
    [http://www.opengroup.org/austin/](http://www.opengroup.org/austin/)) with the
    aim of revising and consolidating the POSIX standards and the Single UNIX Specification.
    (The Austin Group is so named because its inaugural meeting was in Austin, Texas
    in September 1998.) This resulted in the ratification of POSIX 1003.1-2001, sometimes
    just called POSIX.1-2001, in December 2001 (subsequently approved as an ISO standard,
    ISO/IEC 9945:2002).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 从1999年开始，IEEE、The Open Group和ISO/IEC联合技术委员会1（JTC1）在*奥斯汀公共标准修订小组*（CSRG， [http://www.opengroup.org/austin/](http://www.opengroup.org/austin/)）的合作下，旨在修订和整合POSIX标准和单一UNIX规范。（奥斯汀小组之所以得名，是因为它的首次会议于1998年9月在德克萨斯州奥斯汀举行。）这导致了POSIX
    1003.1-2001的通过，有时简称为POSIX.1-2001，且于2001年12月正式批准（随后作为ISO标准，ISO/IEC 9945:2002也被批准）。
- en: POSIX 1003.1-2001 replaces SUSv2, POSIX.1, POSIX.2, and a raft of other earlier
    POSIX standards. This standard is also known as the Single UNIX Specification
    Version 3, and we’ll generally refer to it in the remainder of this book as *SUSv3*.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX 1003.1-2001替代了SUSv2、POSIX.1、POSIX.2以及其他一系列早期的POSIX标准。该标准也被称为单一UNIX规范版本3，在本书余下的部分中，我们通常将其称为*SUSv3*。
- en: 'The SUSv3 base specifications consists of around 3700 pages, divided into the
    following four parts:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3基础规范由大约3700页组成，分为以下四个部分：
- en: '*Base Definitions* (XBD): This part contains definitions, terms, concepts,
    and specifications of the contents of header files. A total of 84 header file
    specifications are provided.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*基本定义*（XBD）：此部分包含了定义、术语、概念以及头文件内容的规范。共提供了84个头文件规范。'
- en: '*System Interfaces* (XSH): This part begins with various useful background
    information. Its bulk consists of the specification of various functions (which
    are implemented as either system calls or library functions on specific UNIX implementations).
    A total of 1123 system interfaces are included in this part.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*系统接口*（XSH）：这一部分开始时提供了各种有用的背景信息。其主体部分包括对各种函数的规范（这些函数在特定的UNIX实现中作为系统调用或库函数实现）。这一部分包括了1123个系统接口。'
- en: '*Shell and Utilities* (XCU): This specifies the operation of the shell and
    various UNIX commands. A total of 160 utilities are specified in this part.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Shell和工具*（XCU）：这一部分规定了shell和各种UNIX命令的操作。此部分规范了160个工具。'
- en: '*Rationale* (XRAT): This part includes informative text and justifications
    relating to the earlier parts.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*理由*（XRAT）：这一部分包含了与前面部分相关的信息性文本和理由说明。'
- en: In addition, SUSv3 includes the *X/Open CURSES Issue 4 Version 2* (XCURSES)
    specification, which specifies 372 functions and 3 header files for the *curses*
    screen-handling API.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，SUSv3包括了*X/Open CURSES Issue 4 Version 2*（XCURSES）规范，该规范指定了372个函数和3个头文件，用于*curses*屏幕处理API。
- en: In all, 1742 interfaces are specified in SUSv3\. By contrast, POSIX.1-1990 (with
    FIPS 151-2) specified 199 interfaces, and POSIX.2-1992 specified 130 utilities.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 总计有1742个接口在SUSv3中进行了规范。相比之下，POSIX.1-1990（带FIPS 151-2）规范了199个接口，而POSIX.2-1992规范了130个工具。
- en: SUSv3 is available online at [http://www.unix.org/version3/online.html](http://www.unix.org/version3/online.html).
    UNIX implementations certified against SUSv3 can call themselves *UNIX 03*.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3可以在[http://www.unix.org/version3/online.html](http://www.unix.org/version3/online.html)在线访问。符合SUSv3标准的UNIX实现可以自称为*UNIX
    03*。
- en: There have been various minor fixes and improvements for problems discovered
    since the ratification of the original SUSv3 text. These have resulted in the
    appearance of *Technical Corrigendum Number 1*, whose improvements were incorporated
    in a 2003 revision of SUSv3, and *Technical Corrigendum Number 2*, whose improvements
    were incorporated in a 2004 revision.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 自原始SUSv3文本批准以来，已经对发现的问题进行了各种小修复和改进。这些改进导致了*技术更正第1号*的发布，其改进已被纳入SUSv3的2003年修订版，以及*技术更正第2号*，其改进已被纳入2004年的修订版。
- en: POSIX conformance, XSI conformance, and the XSI extension
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: POSIX符合性、XSI符合性和XSI扩展
- en: Historically, the SUS (and XPG) standards deferred to the corresponding POSIX
    standards and were structured as functional supersets of POSIX. As well as specifying
    additional interfaces, the SUS standards made mandatory many of the interfaces
    and behaviors that were deemed optional in POSIX.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，SUS（和XPG）标准通常依赖于相应的POSIX标准，并且被结构化为POSIX的功能超集。除了规范附加接口外，SUS标准还强制实施了许多在POSIX中被认为是可选的接口和行为。
- en: 'This distinction survives somewhat more subtly in POSIX 1003.1-2001, which
    is both an IEEE standard and an Open Group Technical Standard (i.e., as noted
    already, it is a consolidation of earlier POSIX and SUS standards). This document
    defines two levels of conformance:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这种区别在POSIX 1003.1-2001中仍然有所体现，该标准既是IEEE标准，也是开放组技术标准（即，如前所述，它是早期POSIX和SUS标准的整合）。该文档定义了两种符合性级别：
- en: '*POSIX conformance*: This defines a baseline of interfaces that a conforming
    implementation must provide. It permits the implementation to provide other optional
    interfaces.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*POSIX符合性*：这定义了符合性实现必须提供的接口基准。它允许实现提供其他可选接口。'
- en: '*X/Open System Interface* (XSI) *conformance*: To be XSI conformant, an implementation
    must meet all of the requirements of POSIX conformance and also must provide a
    number of interfaces and behaviors that are only optionally required for POSIX
    conformance. An implementation must reach this level of conformance in order to
    obtain the *UNIX 03* branding from The Open Group.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*X/Open系统接口*（XSI）*符合性*：要符合XSI标准，实施必须满足所有POSIX符合性要求，还必须提供一些仅在POSIX符合性中可选的接口和行为。实施必须达到这个符合性级别，才能获得开放组的*UNIX
    03*认证。'
- en: The additional interfaces and behaviors required for XSI conformance are collectively
    known as the *XSI extension*. They include support for features such as threads,
    *mmap()* and *munmap()*, the *dlopen* API, resource limits, pseudoterminals, System
    V IPC, the *syslog* API, *poll()*, and login accounting.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为了XSI符合性所要求的附加接口和行为统称为*XSI扩展*。它们包括对线程、*mmap()*和*munmap()*、*dlopen* API、资源限制、伪终端、System
    V IPC、*syslog* API、*poll()*和登录记账等特性的支持。
- en: In later chapters, when we talk about SUSv3 conformance, we mean XSI conformance.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在后续章节中，当我们谈论SUSv3兼容性时，我们指的是XSI兼容性。
- en: Note
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: Because POSIX and SUSv3 are now part of the same document, the additional interfaces
    and the selection of mandatory options required for SUSv3 are indicated via the
    use of shading and margin markings within the document text.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 由于POSIX和SUSv3现在是同一文档的一部分，SUSv3所需的附加接口和强制性选项，通过文档文本中的阴影和边距标记来指示。
- en: Unspecified and weakly specified
  id: totrans-127
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 未指定和弱指定
- en: Occasionally, we refer to an interface as being “unspecified” or “weakly specified”
    within SUSv3.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们会在SUSv3中提到某个接口是“未指定的”或“弱指定的”。
- en: By an *unspecified interface*, we mean one that is not defined at all in the
    formal standard, although in a few cases there are background notes or rationale
    text that mention the interface.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 所谓*未指定的接口*，是指在正式标准中完全没有定义的接口，尽管在少数情况下，标准中可能有背景说明或理由文本提到该接口。
- en: Saying that an interface is *weakly specified* is shorthand for saying that,
    while the interface is included in the standard, important details are left unspecified
    (commonly because the committee members could not reach an agreement due to differences
    in existing implementations).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 说一个接口是*弱指定的*，简而言之，就是说，尽管该接口被包含在标准中，但重要细节未被指定（通常是因为委员会成员因现有实现的差异未能达成一致）。
- en: When using interfaces that are unspecified or weakly specified, we have few
    guarantees when porting applications to other UNIX implementations. Nevertheless,
    in a few cases, such an interface is quite consistent across implementations,
    and where this is so, we generally note it as such.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用未指定或弱指定的接口时，我们在将应用程序移植到其他UNIX实现时，几乎没有保证。然而，在少数情况下，这样的接口在各个实现之间非常一致，若是如此，我们通常会特别标注出来。
- en: LEGACY features
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: LEGACY特性
- en: Sometimes, we note that SUSv3 marks a specified feature as *LEGACY*. This term
    denotes a feature that is retained for compatibility with older applications,
    but whose limitations mean that its use should be avoided in new applications.
    In many cases, some other API exists that provides equivalent functionality.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们指出SUSv3将某个指定特性标记为*LEGACY*。该术语表示为了与旧应用程序兼容，保留某个特性，但其局限性意味着在新应用程序中应避免使用该特性。在许多情况下，存在提供等效功能的其他API。
- en: SUSv4 and POSIX.1-2008
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SUSv4和POSIX.1-2008
- en: In 2008, the Austin group completed a revision of the combined POSIX.1 and Single
    UNIX Specification. As with the preceding version of the standard, it consists
    of a base specification coupled with an XSI extension. We’ll refer to this revision
    as SUSv4.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 2008年，奥斯汀小组完成了POSIX.1和单一UNIX规范的修订。与前一个版本的标准一样，它由基本规范和XSI扩展组成。我们将这一修订称为SUSv4。
- en: 'The changes in SUSv4 are less wide-ranging than those that occurred for SUSv3.
    The most significant changes are as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv4中的变化比SUSv3发生的变化范围小。最重要的变化如下：
- en: SUSv4 adds new specifications for a range of functions. Among the newly specified
    functions that we mention in this book are *dirfd()*, *fdopendir()*, *fexecve()*,
    *futimens()*, *mkdtemp()*, *psignal()*, *strsignal()*, and *utimensat()*. Another
    range of new file-related functions (e.g., *openat()*, described in [Operating
    Relative to a Directory File Descriptor](ch18.html#operating_relative_to_a_directory_file_d
    "Operating Relative to a Directory File Descriptor")) are analogs of existing
    functions (e.g., *open()*), but differ in that they interpret relative pathnames
    with respect to the directory referred to by an open file descriptor, rather than
    relative to the process’s current working directory.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SUSv4为一系列函数增加了新的规范。在本书中提到的几个新增函数包括*dirfd()*、*fdopendir()*、*fexecve()*、*futimens()*、*mkdtemp()*、*psignal()*、*strsignal()*和*utimensat()*。另一些新的文件相关函数（例如*openat()*，详见[相对于目录文件描述符的操作](ch18.html#operating_relative_to_a_directory_file_d
    "Operating Relative to a Directory File Descriptor")）是现有函数（例如*open()*）的类似物，但它们的不同之处在于，它们根据通过打开的文件描述符所指示的目录来解释相对路径，而不是相对于进程的当前工作目录。
- en: Some functions specified as options in SUSv3 become a mandatory part of the
    base standard in SUSv4\. For example, a number of functions that were part of
    the XSI extension in SUSv3 become part of the base standard in SUSv4\. Among the
    functions that become mandatory in SUSv4 are those in the *dlopen* API ([Dynamically
    Loaded Libraries](ch42.html#dynamically_loaded_libraries "Dynamically Loaded Libraries")),
    the realtime signals API ([Realtime Signals](ch22.html#realtime_signals "Realtime
    Signals")), the POSIX semaphore API ([Chapter 53](ch53.html "Chapter 53. POSIX
    Semaphores")), and the POSIX timers API ([POSIX Interval Timers](ch23.html#posix_interval_timers
    "POSIX Interval Timers")).
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在SUSv3中作为选项指定的一些功能，在SUSv4中变成了基础标准的一部分。例如，许多曾属于SUSv3中XSI扩展的功能，变成了SUSv4中的基础标准的一部分。在SUSv4中变为强制性标准的功能包括*dlopen*
    API（[动态加载库](ch42.html#dynamically_loaded_libraries "动态加载库")）、实时信号API（[实时信号](ch22.html#realtime_signals
    "实时信号")）、POSIX信号量API（[第53章](ch53.html "第53章。POSIX信号量")）和POSIX定时器API（[POSIX间隔定时器](ch23.html#posix_interval_timers
    "POSIX间隔定时器")）。
- en: Some functions in SUSv3 are marked as obsolete in SUSv4\. These include *asctime()*,
    *ctime()*, *ftw()*, *gettimeofday()*, *getitimer()*, *setitimer()*, and *siginterrupt()*.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在SUSv3中，一些函数在SUSv4中被标记为废弃。这些函数包括*asctime()*、*ctime()*、*ftw()*、*gettimeofday()*、*getitimer()*、*setitimer()*和*siginterrupt()*。
- en: Specifications of some functions that were marked as obsolete in SUSv3 are removed
    in SUSv4\. These functions include *gethostbyname()*, *gethostbyaddr()*, and *vfork()*.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在SUSv4中，一些在SUSv3中被标记为废弃的函数的规范被移除。这些函数包括*gethostbyname()*、*gethostbyaddr()*和*vfork()*。
- en: Various details of existing specifications in SUSv3 are changed in SUSv4\. For
    example, various functions are added to the list of functions that are required
    to be async-signal-safe ([Table 21-1](ch21.html#functions_required_to_be_async-signal-sa
    "Table 21-1. Functions required to be async-signal-safe by POSIX.1-1990, SUSv2,
    and SUSv3") in [Standard async-signal-safe functions](ch21.html#standard_async-signal-safe_functions
    "Standard async-signal-safe functions")).
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在SUSv4中，对SUSv3中现有规范的多个细节进行了更改。例如，多个函数被添加到要求异步信号安全的函数列表中（[表21-1](ch21.html#functions_required_to_be_async-signal-sa
    "表21-1. POSIX.1-1990、SUSv2和SUSv3要求异步信号安全的函数")，在[标准异步信号安全函数](ch21.html#standard_async-signal-safe_functions
    "标准异步信号安全函数")中）。
- en: In the remainder of this book, we note changes in SUSv4 where they are relevant
    to the topic being discussed.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分，我们将注明与正在讨论的主题相关的SUSv4中的变化。
- en: UNIX Standards Timeline
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: UNIX标准时间线
- en: '[Figure 1-1](ch01.html#relationships_between_various_unix_and_c "Figure 1-1. Relationships
    between various UNIX and C standards") summarizes the relationships between the
    various standards described in the preceding sections, and places the standards
    in chronological order. In this diagram, the solid lines indicate direct descent
    between standards, and the dashed arrows indicate cases where one standard influenced
    another standard, was incorporated as part of another standard, or simply deferred
    to another standard.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[图1-1](ch01.html#relationships_between_various_unix_and_c "图1-1. 各种UNIX和C标准之间的关系")总结了前述各标准之间的关系，并将这些标准按时间顺序排列。在这个图中，实线表示标准之间的直接继承关系，虚线箭头表示一个标准影响了另一个标准，或者作为另一个标准的一部分被纳入，或简单地推迟到另一个标准。'
- en: The situation with networking standards is somewhat complex. Standardization
    efforts in this area began in the late 1980s with the formation of the POSIX 1003.12
    committee to standardize the sockets API, the X/Open Transport Interface (XTI)
    API (an alternative network programming API based on System V’s Transport Layer
    Interface), and various associated APIs. The gestation of this standard occurred
    over several years, during which time POSIX 1003.12 was renamed POSIX 1003.1g.
    It was ratified in 2000.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 网络标准的情况有些复杂。该领域的标准化工作始于1980年代后期，当时成立了POSIX 1003.12委员会，旨在标准化套接字API、X/Open传输接口（XTI）API（基于System
    V传输层接口的另一种网络编程API）以及各种相关API。这个标准的酝酿过程持续了几年，在此期间，POSIX 1003.12被更名为POSIX 1003.1g，并在2000年获得批准。
- en: In parallel with the development of POSIX 1003.1g, X/Open was also developing
    its X/Open Networking Specification (XNS). The first version of this specification,
    XNS Issue 4, was part of the first version of the Single UNIX Specification. It
    was succeeded by XNS Issue 5, which formed part of SUSv2\. XNS Issue 5 was essentially
    the same as the then current (6.6) draft of POSIX.1g. This was followed by XNS
    Issue 5.2, which differed from XNS Issue 5 and the ratified POSIX.1g standard
    in marking the XTI API as obsolete and in including coverage of Internet Protocol
    version 6 (IPv6), which was being designed in the mid-1990s. XNS Issue 5.2 formed
    the basis for the networking material included in SUSv3, and is thus now superseded.
    For similar reasons, POSIX.1g was withdrawn as a standard soon after it was ratified.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 与POSIX 1003.1g的开发并行，X/Open也在开发其X/Open网络规范（XNS）。该规范的第一个版本，即XNS Issue 4，是单一UNIX规范第一版的一部分。随后是XNS
    Issue 5，它构成了SUSv2的一部分。XNS Issue 5本质上与当时POSIX.1g的草案（6.6版）相同。接下来是XNS Issue 5.2，它与XNS
    Issue 5和已通过的POSIX.1g标准不同，标志着XTI API的过时，并包含了互联网协议第6版（IPv6）的内容，IPv6在1990年代中期正在设计中。XNS
    Issue 5.2构成了SUSv3中包含的网络材料的基础，因此现在被取代。出于类似原因，POSIX.1g在被批准后不久就被撤销为标准。
- en: '![Relationships between various UNIX and C standards](figs/web/01-1_HIST-standards-timeline.png.jpg)Figure 1-1. Relationships
    between various UNIX and C standards'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '![各种UNIX和C标准之间的关系](figs/web/01-1_HIST-standards-timeline.png.jpg)图1-1. 各种UNIX和C标准之间的关系'
- en: Implementation Standards
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现标准
- en: In addition to the standards produced by independent or multiparty groups, reference
    is sometimes made to the two implementation standards defined by the final BSD
    release (4.4BSD) and AT&T’s System V Release 4 (SVR4). The latter implementation
    standard was formalized by AT&T’s publication of the System V Interface Definition
    (SVID). In 1989, AT&T published Issue 3 of the SVID, which defined the interface
    that a UNIX implementation must provide in order to be able to call itself System
    V Release 4\. (The SVID is available online at [http://www.sco.com/developers/devspecs/](http://www.sco.com/developers/devspecs/).)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 除了独立或多方组织制定的标准，有时还会提到由最终的BSD版本（4.4BSD）和AT&T的System V Release 4（SVR4）定义的两种实现标准。后者的实现标准由AT&T通过发布System
    V接口定义（SVID）正式化。1989年，AT&T发布了SVID的第3版，定义了一个UNIX实现必须提供的接口，以便能够称自己为System V Release
    4（该SVID可在线获取，网址为[http://www.sco.com/developers/devspecs/](http://www.sco.com/developers/devspecs/)）。
- en: Note
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Because the behavior of some system calls and library functions varies between
    SVR4 and BSD, many UNIX implementations provide compatibility libraries and conditional-compilation
    facilities that emulate the behavior of whichever UNIX flavor is not used as the
    base for that particular implementation (see [Feature Test Macros](ch03.html#feature_test_macros
    "Feature Test Macros")). This eases the burden of porting an application from
    another UNIX implementation.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 由于一些系统调用和库函数在SVR4和BSD之间的行为有所不同，许多UNIX实现提供兼容库和条件编译功能，模拟未作为该特定实现基础的UNIX版本的行为（参见[特性测试宏](ch03.html#feature_test_macros
    "Feature Test Macros")）。这减少了将应用程序从另一个UNIX实现移植的负担。
- en: Linux, Standards, and the Linux Standard Base
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linux、标准和Linux标准基础
- en: As a general goal, Linux (i.e., kernel, *glibc*, and tool) development aims
    to conform to the various UNIX standards, especially POSIX and the Single UNIX
    Specification. However, at the time of writing, no Linux distributions are branded
    as “UNIX” by The Open Group. The problems are time and expense. Each vendor distribution
    would need to undergo conformance testing to obtain this branding, and it would
    need to repeat this testing with each new distribution release. Nevertheless,
    it is the de facto near-conformance to various standards that has enabled Linux
    to be so successful in the UNIX market.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一般目标，Linux（即内核、*glibc*和工具）开发旨在遵循各种UNIX标准，特别是POSIX和单一UNIX规范。然而，在写作时，没有任何Linux发行版被The
    Open Group品牌化为“UNIX”。问题在于时间和费用。每个厂商的发行版需要经过合规性测试以获得此品牌，并且每次发布新版本时都需要重复此测试。尽管如此，正是对各种标准的事实性近似遵循，使得Linux在UNIX市场中取得了如此成功。
- en: With most commercial UNIX implementations, the same company both develops and
    distributes the operating system. With Linux, things are different, in that implementation
    is separate from distribution, and multiple organizations–both commercial and
    noncommercial–handle Linux distribution.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数商业UNIX实现，通常同一家公司既开发又分发操作系统。而Linux则有所不同，其实现和分发是分开的，多个组织——包括商业和非商业组织——负责Linux的分发。
- en: Linus Torvalds doesn’t contribute to or endorse a particular Linux distribution.
    However, in terms of other individuals carrying out Linux development, the situation
    is more complex. Many developers working on the Linux kernel and on other free
    software projects are employed by various Linux distribution companies or work
    for companies (such as IBM and HP) with a strong interest in Linux. While these
    companies can influence the direction in which Linux moves by allocating programmer
    hours to certain projects, none of them controls Linux as such. And, of course,
    many of the other contributors to the Linux kernel and GNU projects work voluntarily.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Linus Torvalds并未参与或支持任何特定的Linux发行版。然而，关于其他个人进行Linux开发的情况则更为复杂。许多在Linux内核和其他自由软件项目上工作的开发人员，受雇于各个Linux发行公司，或为对Linux有浓厚兴趣的公司（如IBM和HP）工作。尽管这些公司可以通过分配程序员时间来影响Linux发展的方向，但没有任何公司能完全控制Linux。而且，当然，Linux内核和GNU项目的许多其他贡献者都是自愿工作的。
- en: Note
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of writing, Torvalds is employed as a fellow at the Linux Foundation
    ([http://www.linux-foundation.org/](http://www.linux-foundation.org/); formerly
    the Open Source Development Laboratory, OSDL), a nonprofit consortium of commercial
    and noncommercial organizations chartered to foster the growth of Linux.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 截至写作时，Torvalds受雇于Linux基金会（[http://www.linux-foundation.org/](http://www.linux-foundation.org/)；前身为开放源代码开发实验室OSDL），这是一个由商业和非商业组织组成的非营利性联盟，旨在促进Linux的发展。
- en: Because there are multiple Linux distributors and because the kernel implementers
    don’t control the contents of distributions, there is no “standard” commercial
    Linux as such. Each Linux distributor’s kernel offering is typically based on
    a snapshot of the mainline (i.e., the Torvalds) kernel at a particular point in
    time, with a number of patches applied.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 由于存在多个Linux发行商，并且内核实现者无法控制发行版的内容，因此没有所谓的“标准”商业Linux。每个Linux发行商提供的内核通常是基于主线内核（即Torvalds内核）在某一特定时间点的快照，并应用了多个补丁。
- en: These patches typically provide features that, to a greater or lesser extent,
    are deemed commercially desirable, and thus able to provide competitive differentiation
    in the marketplace. In some cases, these patches are later accepted into the mainline
    kernel. In fact, some new kernel features were initially developed by a distribution
    company, and appeared in their distribution before eventually being integrated
    into the mainline. For example, version 3 of the *Reiserfs* journaling file system
    was part of some Linux distributions long before it was accepted into the mainline
    2.4 kernel.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这些补丁通常提供了一些商业上被认为具有价值的功能，因此能够在市场上提供竞争性差异化。在某些情况下，这些补丁后来被接受到主线内核中。事实上，一些新的内核功能最初是由某个发行公司开发的，并在其发行版中出现，最终被整合进主线。例如，*Reiserfs*日志文件系统的第3版在其被接受到2.4主线内核之前，已经是一些Linux发行版的一部分。
- en: The upshot of the preceding points is that there are (mostly minor) differences
    in the systems offered by the various Linux distribution companies. On a much
    smaller scale, this is reminiscent of the splits in implementations that occurred
    in the early years of UNIX. The Linux Standard Base (LSB) is an effort to ensure
    compatibility among the various Linux distributions. To do this, the LSB ([http://www.linux-foundation.org/en/LSB](http://www.linux-foundation.org/en/LSB))
    develops and promotes a set of standards for Linux systems with the aim of ensuring
    that binary applications (i.e., compiled programs) can run on any LSB-conformant
    system.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 上述几点的结果是，各个Linux发行公司提供的系统存在（大多数是小的）差异。从更小的规模来看，这让人想起了UNIX早期实现中出现的分裂。Linux标准基础（LSB）是一项旨在确保不同Linux发行版之间兼容性的努力。为了实现这一目标，LSB
    ([http://www.linux-foundation.org/en/LSB](http://www.linux-foundation.org/en/LSB))
    制定并推广了一套适用于Linux系统的标准，目的是确保二进制应用程序（即已编译的程序）可以在任何符合LSB标准的系统上运行。
- en: Note
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The binary portability promoted by the LSB contrasts with the source code portability
    promoted by POSIX. Source code portability means that we can write a C program
    and then successfully compile and run it on any POSIX-conformant system. Binary
    compatibility is much more demanding and is generally not feasible across different
    hardware platforms. It allows us to compile a program once for a given hardware
    platform, and then run that compiled program on any conformant implementation
    running on that hardware platform. Binary portability is an essential requirement
    for the commercial viability of independent software vendor (ISV) applications
    built for Linux.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: LSB 推动的二进制可移植性与 POSIX 推动的源代码可移植性形成对比。源代码可移植性意味着我们可以编写一个 C 程序，然后在任何符合 POSIX 标准的系统上成功编译和运行它。而二进制兼容性要求更高，通常在不同的硬件平台之间是不可行的。它允许我们为特定的硬件平台编译一次程序，然后在该硬件平台上运行任何符合标准的实现中的已编译程序。二进制可移植性是独立软件供应商（ISV）为
    Linux 构建应用程序的商业可行性的必要要求。
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: The UNIX system was first implemented in 1969 on a Digital PDP-7 minicomputer
    by Ken Thompson at Bell Laboratories (part of AT&T). The operating system drew
    many ideas, as well as its punned name, from the earlier MULTICS system. By 1973,
    UNIX had been moved to the PDP-11 mini-computer and rewritten in C, a programming
    language designed and implemented at Bell Laboratories by Dennis Ritchie. Legally
    prevented from selling UNIX, AT&T instead distributed the complete system to universities
    for a nominal charge. This distribution included source code, and became very
    popular within universities, since it provided a cheap operating system whose
    code could be studied and modified by computer science academics and students.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: UNIX 系统最初于 1969 年由 Ken Thompson 在贝尔实验室（AT&T 的一部分）在数字 PDP-7 微型计算机上实现。该操作系统借鉴了早期
    MULTICS 系统的许多想法，以及它那有双关意义的名称。到 1973 年，UNIX 已经被移植到 PDP-11 微型计算机，并用 C 语言重写，C 语言是由
    Dennis Ritchie 在贝尔实验室设计和实现的。由于法律原因，AT&T 无法出售 UNIX，因此它将完整的系统以象征性的费用分发给大学。这些分发版本包括源代码，并在大学中非常流行，因为它提供了一种便宜的操作系统，计算机科学的学者和学生可以研究和修改其代码。
- en: The University of California at Berkeley played a key role in the development
    of the UNIX system. There, Ken Thompson and a number of graduate students extended
    the operating system. By 1979, the University was producing its own UNIX distribution,
    BSD. This distribution became widespread in academia and formed the basis for
    several commercial implementations.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 加利福尼亚大学伯克利分校在 UNIX 系统的开发中发挥了关键作用。在那里，Ken Thompson 和一些研究生扩展了操作系统。到 1979 年，该大学开始制作自己的
    UNIX 发行版——BSD。这个发行版在学术界得到了广泛传播，并为多个商业实现奠定了基础。
- en: Meanwhile, the breakup of the AT&T monopoly permitted the company to sell the
    UNIX system. This resulted in the other major variant of UNIX, System V, which
    also formed the basis for several commercial implementations.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，AT&T 垄断的解体使得该公司能够销售 UNIX 系统。这导致了另一个主要的 UNIX 变体——System V，它也成为多个商业实现的基础。
- en: Two different currents led to the development of (GNU/) Linux. One of these
    was the GNU project, founded by Richard Stallman. By the late 1980s, the GNU project
    had produced an almost complete, freely distributable UNIX implementation. The
    one part lacking was a working kernel. In 1991, inspired by the Minix kernel written
    by Andrew Tanenbaum, Linus Torvalds produced a working UNIX kernel for the Intel
    x86-32 architecture. Torvalds invited other programmers to join him in improving
    the kernel. Many programmers did so, and, over time, Linux was extended and ported
    to a wide variety of hardware architectures.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 有两股不同的潮流促成了 (GNU/) Linux 的发展。其中之一是由理查德·斯托尔曼创办的 GNU 项目。到了 1980 年代末，GNU 项目已经开发出了几乎完整的、可自由分发的
    UNIX 实现。唯一缺少的部分是一个可用的内核。1991 年，受到 Andrew Tanenbaum 编写的 Minix 内核的启发，林纳斯·托瓦兹为英特尔
    x86-32 架构开发了一个可用的 UNIX 内核。托瓦兹邀请其他程序员加入他一起改进内核。许多程序员加入了，并且随着时间的推移，Linux 被扩展并移植到多种硬件架构上。
- en: The portability problems that arose from the variations in UNIX and C implementations
    that existed by the late 1980s created a strong pressure for standardization.
    The C language was standardized in 1989 (C89), and a revised standard was produced
    in 1999 (C99). The first attempt to standardize the operating system interface
    yielded POSIX.1, ratified as an IEEE standard in 1988, and as an ISO standard
    in 1990\. During the 1990s, further standards were drafted, including various
    versions of the Single UNIX Specification. In 2001, the combined POSIX 1003.1-2001
    and SUSv3 standard was ratified. This standard consolidates and extends various
    earlier POSIX standards and earlier versions of the Single UNIX Specification.
    In 2008, a less wide-ranging revision of the standard was completed, yielding
    the combined POSIX 1003.1-2008 and SUSv4 standard.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 1980年代末，UNIX 和 C 实现的变异所带来的可移植性问题，促使了对标准化的强烈需求。C 语言在 1989 年标准化（C89），并于 1999 年修订（C99）。首次尝试标准化操作系统接口产生了
    POSIX.1，该标准于 1988 年被 IEEE 批准，并于 1990 年成为 ISO 标准。在 1990 年代，进一步的标准草案相继提出，包括单一 UNIX
    规范的不同版本。2001 年，合并的 POSIX 1003.1-2001 和 SUSv3 标准被批准。这一标准整合并扩展了早期的 POSIX 标准和单一 UNIX
    规范的早期版本。2008 年，标准的一个较小范围的修订完成，产生了合并的 POSIX 1003.1-2008 和 SUSv4 标准。
- en: Unlike most commercial UNIX implementations, Linux separates implementation
    from distribution. Consequently, there is no single “official” Linux distribution.
    Each Linux distributor’s offering consists of a snapshot of the current stable
    kernel, with various patches applied. The LSB develops and promotes a set of standards
    for Linux systems with the aim of ensuring binary application compatibility across
    Linux distributions, so that compiled applications should be able to run on any
    LSB-conformant system running on the same hardware.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数商业 UNIX 实现不同，Linux 将实现和发行版分开。因此，没有单一的“官方” Linux 发行版。每个 Linux 发行商提供的产品都包含当前稳定内核的快照，并应用了各种补丁。LSB
    开发并推广一套 Linux 系统的标准，旨在确保 Linux 发行版之间的二进制应用兼容性，这样已编译的应用程序应该能够在任何符合 LSB 标准的系统上运行，只要它们使用相同的硬件。
- en: Further information
  id: totrans-170
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更多信息
- en: Further information about UNIX history and standards can be found in [Ritchie,
    1984], [McKusick et al., 1996], [McKusick & Neville-Neil, 2005], [Libes & Ressler,
    1989], [Garfinkel et al., 2003], [Stevens & Rago, 2005], [Stevens, 1999], [Quartermann
    & Wilhelm, 1993], [Goodheart & Cox, 1994], and [McKusick, 1999].
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 UNIX 历史和标准的更多信息，可以参考 [Ritchie, 1984]、[McKusick 等, 1996]、[McKusick & Neville-Neil,
    2005]、[Libes & Ressler, 1989]、[Garfinkel 等, 2003]、[Stevens & Rago, 2005]、[Stevens,
    1999]、[Quartermann & Wilhelm, 1993]、[Goodheart & Cox, 1994] 和 [McKusick, 1999]。
- en: '[Salus, 1994] is a detailed history of UNIX, from which much of the information
    at the beginning of this chapter was drawn. [Salus, 2008] provides a short history
    of Linux and other free software projects. Many details of the history of UNIX
    can also be found in the online book *History of UNIX*, written by Ronda Hauben.
    This book is available at [http://www.dei.isep.ipp.pt/~acc/docs/unix.html](http://www.dei.isep.ipp.pt/~acc/docs/unix.html).
    An extremely detailed timeline showing the releases of various UNIX implementations
    can be found at [http://www.levenez.com/unix/](http://www.levenez.com/unix/).'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '[Salus, 1994] 是一本详细的 UNIX 历史书籍，书中的许多信息来自本章开头的内容。[Salus, 2008] 提供了 Linux 和其他自由软件项目的简短历史。UNIX
    历史的许多细节也可以在 Ronda Hauben 编写的在线书籍 *History of UNIX* 中找到。该书可以在 [http://www.dei.isep.ipp.pt/~acc/docs/unix.html](http://www.dei.isep.ipp.pt/~acc/docs/unix.html)
    上查阅。一个非常详细的时间线，展示了各种 UNIX 实现的发布情况，可以在 [http://www.levenez.com/unix/](http://www.levenez.com/unix/)
    上找到。'
- en: '[Josey, 2004] provides an overview of the history of the UNIX system and the
    development of SUSv3, guidance on how to use the specification, summary tables
    of the interfaces in SUSv3, and migration guides for the transitions from SUSv2
    to SUSv3 and C89 to C99.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '[Josey, 2004] 提供了 UNIX 系统历史和 SUSv3 发展概况，指导如何使用规范，SUSv3 中接口的总结表，以及从 SUSv2 到
    SUSv3 和从 C89 到 C99 的迁移指南。'
- en: As well as providing software and documentation, the GNU web site ([http://www.gnu.org/](http://www.gnu.org/))
    contains a number of philosophical papers on the subject of free software. [Williams,
    2002] is a biography of Richard Stallman.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提供软件和文档外，GNU 网站（[http://www.gnu.org/](http://www.gnu.org/)）还包含许多关于自由软件的哲学论文。[Williams,
    2002] 是一本理查德·斯托尔曼的传记。
- en: Torvalds provides his own account of the development of Linux in [Torvalds &
    Diamond, 2001].
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Torvalds 在 [Torvalds & Diamond, 2001] 中提供了自己对 Linux 开发的叙述。
