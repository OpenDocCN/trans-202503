- en: Chapter 21. Scripts and Plug-ins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第21章 脚本和插件
- en: 'GIMP is not a monolithic program. Much of it is made up of plug-ins, components
    that are not part of the core of the system. In fact, most of the tools found
    in the **Image: Filters** menu are plug-ins, as are many of the tools in the **Image:
    Colors** menu. Besides these built-in plug-ins, many third-party plug-ins are
    available; some of these are quite large, like the GIMP Animation Package (GAP;
    discussed in [Chapter 18](ch18.html "Chapter 18. Animation Tools")). Other, much
    smaller ones, are used for simple tasks.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: GIMP 不是一个单一的程序。它由许多插件组成，这些插件并不是系统核心的一部分。事实上，**图像：滤镜**菜单中的大部分工具都是插件，**图像：颜色**菜单中的许多工具也是插件。除了这些内置插件外，还有许多第三方插件可供使用；其中一些插件体积较大，比如
    GIMP 动画包（GAP；在[第18章](ch18.html "第18章 动画工具")中讨论）。其他一些插件体积较小，用于执行简单任务。
- en: 'Scripts and plug-ins are very similar. One difference is that they are stored
    in different places. When you open the FOLDER entry in the **Image: Edit > Preferences**
    dialog, you’ll see the `Plug-Ins` and `Scripts` folders.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本和插件非常相似。一个区别是它们存储的位置不同。当你打开 **图像：编辑 > 偏好设置** 对话框中的 FOLDER 条目时，你会看到 `Plug-Ins`
    和 `Scripts` 文件夹。
- en: 21.1 About Scripts and Plug-ins
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 21.1 脚本和插件简介
- en: In this chapter, we explain the concepts underlying GIMP scripts and plug-ins
    and show you how to find and install new ones. Then we briefly describe some important
    plug-ins that are worth installing. Finally, we show examples of plug-ins written
    in Python and C, as well as a script written in Scheme.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将解释 GIMP 脚本和插件的基本概念，并教你如何找到和安装新的插件。接下来，我们简要介绍一些值得安装的重要插件。最后，我们展示用 Python
    和 C 编写的插件示例，以及一个用 Scheme 编写的脚本示例。
- en: Another difference between a script and a plug-in is the programming language
    in which the components are written. Scripts are written in Scheme (called Script-Fu
    in GIMP) and stored in the `Scripts` folder. Plug-ins are written in Python or
    C and stored in the `Plug-Ins` folder.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本和插件的另一个区别是它们编写的编程语言。脚本是用 Scheme（在 GIMP 中称为 Script-Fu）编写的，存储在 `Scripts` 文件夹中。插件是用
    Python 或 C 编写的，存储在 `Plug-Ins` 文件夹中。
- en: Scheme, Python, and C
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Scheme、Python 和 C
- en: '*Scheme* is a very simple and rather old language, directly interpreted without
    any translation needed. GIMP includes an interpreter for a subset of Scheme, so
    Scheme scripts are always operational. In fact, many of the predefined plug-ins
    you’ve used so far (for example in [Chapter 12](ch12.html "Chapter 12. Color")
    or in [Chapter 17](ch17.html "Chapter 17. Filters")) are in fact scripts programmed
    in Scheme. Scheme is a functional language that uses only parentheses and whitespace
    for syntactic punctuation.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*Scheme* 是一种非常简单且相对古老的语言，直接解释执行，无需任何翻译。GIMP 包含一个 Scheme 子集的解释器，因此 Scheme 脚本始终可以运行。实际上，你至今使用的许多预定义插件（例如在[第12章](ch12.html
    "第12章 颜色")或[第17章](ch17.html "第17章 滤镜")中）实际上是用 Scheme 编写的脚本。Scheme 是一种函数式语言，语法上只使用圆括号和空格进行标点。'
- en: '*Python*, also directly interpreted, is more powerful than Scheme. It has become
    popular in the last few years and is probably progressively replacing another
    scripting language, Perl, because of its much more pleasant syntax and its wider
    range of capabilities. Python’s interpreter is not part of GIMP and needs to be
    installed separately on Windows. (It comes packaged with Linux and Mac operating
    systems.)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*Python* 语言也是一种直接解释的语言，它比 Scheme 更强大。近几年它逐渐流行，并且很可能逐步取代另一个脚本语言 Perl，因为它的语法更加简洁易懂，功能范围也更广。Python
    的解释器不是 GIMP 的一部分，需要在 Windows 上单独安装。（它与 Linux 和 Mac 操作系统一起捆绑提供。）'
- en: '*C* is the language in which the core of GIMP is programmed, as well as most
    of the GNU/Linux operating system. An old language, C is extremely well supported
    because it allows programs to use all the capabilities of the computer efficiently.
    Programs written in C cannot be directly executed but must first be translated
    into machine language and then loaded. You do this with a *compiler*. In order
    to write a C plug-in, you must have a C compiler and development environment on
    your computer. A compiler is easy to set up on GNU/Linux and Mac OS but a bit
    trickier on Windows.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*C* 是编写 GIMP 核心部分的语言，也是大多数 GNU/Linux 操作系统的编程语言。C 是一种古老的语言，得到了极好的支持，因为它允许程序高效地利用计算机的所有能力。用
    C 编写的程序不能直接执行，必须先被翻译成机器语言然后加载。你需要通过 *编译器* 来完成这一过程。为了编写 C 插件，你必须在计算机上安装 C 编译器和开发环境。在
    GNU/Linux 和 Mac OS 上设置编译器很容易，但在 Windows 上稍微复杂一些。'
- en: '![The Plug-in Browser, List view](httpatomoreillycomsourcenostarchimages1457332.png.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![插件浏览器，列表视图](httpatomoreillycomsourcenostarchimages1457332.png.jpg)'
- en: Figure 21-1. The Plug-in Browser, List view
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-1. 插件浏览器，列表视图
- en: '![Looking for specific plug-ins](httpatomoreillycomsourcenostarchimages1457334.png.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![查找特定插件](httpatomoreillycomsourcenostarchimages1457334.png.jpg)'
- en: Figure 21-2. Looking for specific plug-ins
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-2. 查找特定插件
- en: GIMP plug-ins can be written in other programming languages, especially if the
    language is compiled. Perl used to be the language of choice for writing GIMP
    plug-ins but is used less frequently today. For this reason, we consider only
    Scheme, Python, and C. To write your own plug-in, you need some knowledge of at
    least one of these languages; a complete introduction to programming in each language
    is beyond the scope of this book.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: GIMP 插件可以用其他编程语言编写，特别是如果该语言是编译型的。Perl 曾是编写 GIMP 插件的首选语言，但今天使用得较少。因此，我们只考虑 Scheme、Python
    和 C。要编写自己的插件，你需要掌握至少其中一种语言；每种语言的编程完整介绍超出了本书的范围。
- en: Installed Plug-ins
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 已安装插件
- en: 'To find out which plug-ins are already a part of your GIMP installation, use
    the Plug-in Browser (**Image: Help > Plug-in Browser**), as shown in [Figure 21-1](ch21s01.html#plug-in_browsercomma_list_view
    "Figure 21-1. The Plug-in Browser, List view"). As you can see, this installation
    has 345 plug-ins. The first tab on the left lists them alphabetically.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找哪些插件已经是你 GIMP 安装的一部分，可以使用插件浏览器（**图像：帮助 > 插件浏览器**），如[图 21-1](ch21s01.html#plug-in_browsercomma_list_view
    "图 21-1. 插件浏览器，列表视图")所示。如你所见，此安装有 345 个插件。左侧的第一个标签按字母顺序列出它们。
- en: When you begin typing in the SEARCH field at the top left of the Plug-in Browser,
    the plug-ins list is automatically filtered to the names that contain this substring,
    as shown in [Figure 21-2](ch21s01.html#looking_for_specific_plug-ins "Figure 21-2. Looking
    for specific plug-ins"). Click the broom at the top right to clear the filter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在插件浏览器左上角的搜索框中开始输入时，插件列表会自动筛选出包含此子字符串的插件名称，如[图 21-2](ch21s01.html#looking_for_specific_plug-ins
    "图 21-2. 查找特定插件")所示。点击右上角的扫帚图标可以清除筛选。
- en: The second tab offers a tree view of all plugins, which can be useful for searching
    plug-ins by category. In [Figure 21-3](ch21s01.html#plug-in_browsercomma_tree_view
    "Figure 21-3. The Plug-in Browser, Tree view"), we’ve enlarged this view by clicking
    and dragging its right boundary. As you can see, this view shows the image types
    accepted by each plug-in, as well as the installation date. In the image types,
    the letter *A* means that there is an Alpha channel, and the star is a wildcard.
    For example, *RGB** means that the Alpha channel may or may not be present.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个标签提供所有插件的树状视图，这对于按类别搜索插件非常有用。在[图 21-3](ch21s01.html#plug-in_browsercomma_tree_view
    "图 21-3. 插件浏览器，树状视图")中，我们通过点击并拖动其右边界放大了此视图。如你所见，该视图显示了每个插件接受的图像类型，以及安装日期。在图像类型中，字母
    *A* 表示存在 Alpha 通道，星号是通配符。例如，*RGB* 表示 Alpha 通道可能存在，也可能不存在。
- en: '![The Plug-in Browser, Tree view](httpatomoreillycomsourcenostarchimages1457336.png.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![插件浏览器，树状视图](httpatomoreillycomsourcenostarchimages1457336.png.jpg)'
- en: Figure 21-3. The Plug-in Browser, Tree view
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-3. 插件浏览器，树状视图
- en: '![The Plug-in Browser, plug-in description](httpatomoreillycomsourcenostarchimages1457338.png.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![插件浏览器，插件描述](httpatomoreillycomsourcenostarchimages1457338.png.jpg)'
- en: Figure 21-4. The Plug-in Browser, plug-in description
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-4. 插件浏览器，插件描述
- en: 'The right part of the dialog describes the plug-in selected at the left. For
    example, in [Figure 21-4](ch21s01.html#plug-in_browsercomma_plug-in_description
    "Figure 21-4. The Plug-in Browser, plug-in description"), you see the description
    of the Antialias tool, which is found in **Image: Filters > Enhance**.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框右侧描述了左侧所选插件的内容。例如，在[图 21-4](ch21s01.html#plug-in_browsercomma_plug-in_description
    "图 21-4. 插件浏览器，插件描述")中，你可以看到反锯齿工具的描述，该工具位于 **图像：滤镜 > 增强**。
- en: Finding New Plug-ins
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找新插件
- en: The main source of existing GIMP plug-ins is the GIMP Plugin Registry at *[http://registry.gimp.org/](http://registry.gimp.org/)*.
    Here you’ll find plug-in descriptions, links to the plug-in itself or to its home
    page, and tags that help in searching. Click a tag for a list of all matching
    plug-ins.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现有 GIMP 插件的主要来源是 GIMP 插件注册表，网址是 *[http://registry.gimp.org/](http://registry.gimp.org/)*。在这里，你可以找到插件描述、插件本身或其主页的链接，以及有助于搜索的标签。点击标签即可查看所有匹配的插件。
- en: '![The beginning of the tag cloud](httpatomoreillycomsourcenostarchimages1457340.png.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![标签云的开始](httpatomoreillycomsourcenostarchimages1457340.png.jpg)'
- en: Figure 21-5. The beginning of the tag cloud
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-5。标签云的开始
- en: One convenient way to browse the registry is the *Content by tags view* (also
    called *tag cloud view*), which shows a list of all the tags with a font size
    proportional to their frequency, as shown in [Figure 21-5](ch21s01.html#beginning_of_the_tag_cloud
    "Figure 21-5. The beginning of the tag cloud"). The tags are clickable, so browsing
    all the plug-ins related to a given tag is easy.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一种便捷的浏览注册表的方式是*按标签查看内容视图*（也叫*标签云视图*），它显示了所有标签的列表，字体大小与标签的频率成正比，如[图 21-5](ch21s01.html#beginning_of_the_tag_cloud
    "图 21-5。标签云的开始")所示。标签是可点击的，因此浏览与给定标签相关的所有插件非常容易。
- en: Most plug-ins have a very detailed and complete home page, explaining how they
    work and how to install them.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数插件都有非常详细和完整的主页，解释了它们的工作原理以及如何安装。
- en: 21.2 Noteworthy Plug-ins
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 21.2 值得注意的插件
- en: The following sections describe some interesting plug-ins available on the GIMP
    Plugin Registry. This selection is obviously subjective, and we’ve excluded a
    couple of plug-ins that we’ve already discussed, like GAP, presented in [Chapter 18](ch18.html
    "Chapter 18. Animation Tools"), and UFRaw, presented in [Handling Raw Photographs](ch19s03.html#handling_raw_photographs
    "Handling Raw Photographs").
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下章节介绍了一些在 GIMP 插件注册表中可用的有趣插件。这个选择显然是主观的，我们排除了一些已经讨论过的插件，如在[第 18 章](ch18.html
    "第 18 章。动画工具")中介绍的 GAP，以及在[处理 RAW 照片](ch19s03.html#handling_raw_photographs "处理
    RAW 照片")中介绍的 UFRaw。
- en: '![The initial image (left); after applying the Wrap Effect tool (middle); after
    applying the ev_crayon_full preset](httpatomoreillycomsourcenostarchimages1457342.png.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![初始图像（左）；应用 Wrap Effect 工具后（中）；应用 ev_crayon_full 预设后](httpatomoreillycomsourcenostarchimages1457342.png.jpg)'
- en: Figure 21-6. The initial image (left); after applying the Wrap Effect tool (middle);
    after applying the ev_crayon_full preset
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-6。初始图像（左）；应用 Wrap Effect 工具后（中）；应用 ev_crayon_full 预设后
- en: Photo Effects
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Photo Effects
- en: 'Photo Effects is a set of plug-ins that you can use to add artistic effects
    to photos. You can find it by searching for `photo effects` at *[http://registry.gimp.org/](http://registry.gimp.org/)*.
    Once it’s installed, you’ll see a menu called PHOTO EFFECTS in the **Image: Filters
    > Decor** menu. Let’s use [Figure 21-6](ch21s02.html#initial_image_left_parenthesisleftright
    "Figure 21-6. The initial image (left); after applying the Wrap Effect tool (middle);
    after applying the ev_crayon_full preset") (left) as an example. When we apply
    the Wrap Effect tool, found in **Image: Filters > Decor > Photo effects > Artist**,
    we get the result shown in [Figure 21-6](ch21s02.html#initial_image_left_parenthesisleftright
    "Figure 21-6. The initial image (left); after applying the Wrap Effect tool (middle);
    after applying the ev_crayon_full preset") (middle).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Photo Effects 是一组插件，你可以用它为照片添加艺术效果。你可以通过在*[http://registry.gimp.org/](http://registry.gimp.org/)*
    搜索 `photo effects` 来找到它。安装后，你会在 **图像：滤镜 > 装饰** 菜单中看到名为 PHOTO EFFECTS 的菜单。我们以[图
    21-6](ch21s02.html#initial_image_left_parenthesisleftright "图 21-6。初始图像（左）；应用
    Wrap Effect 工具后（中）；应用 ev_crayon_full 预设后")（左）为例。当我们应用 **图像：滤镜 > 装饰 > Photo effects
    > 艺术家** 中找到的 Wrap Effect 工具时，我们得到了[图 21-6](ch21s02.html#initial_image_left_parenthesisleftright
    "图 21-6。初始图像（左）；应用 Wrap Effect 工具后（中）；应用 ev_crayon_full 预设后")（中）所示的结果。
- en: Photo Effects also comes with 22 predefined presets for the GIMPressionist filter
    (see [GIMPressionist](ch17s10.html#gimpressionist "GIMPressionist")). [Figure 21-6](ch21s02.html#initial_image_left_parenthesisleftright
    "Figure 21-6. The initial image (left); after applying the Wrap Effect tool (middle);
    after applying the ev_crayon_full preset") (right) shows the result of applying
    the `ev_crayon_full` preset.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Photo Effects 还提供了 22 个为 GIMPressionist 滤镜预设的预定义设置（见[GIMPressionist](ch17s10.html#gimpressionist
    "GIMPressionist")）。[图 21-6](ch21s02.html#initial_image_left_parenthesisleftright
    "图 21-6。初始图像（左）；应用 Wrap Effect 工具后（中）；应用 ev_crayon_full 预设后")（右）展示了应用 `ev_crayon_full`
    预设的结果。
- en: G’MIC
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: G’MIC
- en: 'G’MIC (*[http://gmic.sourceforge.net/gimp.shtml](http://gmic.sourceforge.net/gimp.shtml)*)
    is a huge collection of filters (229 as this book goes to press) and effects.
    It operates as a single entry in the **Image: Filters** menu, which opens the
    dialog shown in [Figure 21-7](ch21s02.html#gapostrophemic_dialog "Figure 21-7. The
    G’MIC dialog").'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: G’MIC (*[http://gmic.sourceforge.net/gimp.shtml](http://gmic.sourceforge.net/gimp.shtml)*)
    是一个庞大的滤镜（本书出版时为 229 个）和效果集合。它作为 **图像：滤镜** 菜单中的单一条目操作，打开如[图 21-7](ch21s02.html#gapostrophemic_dialog
    "图 21-7。G’MIC 对话框")所示的对话框。
- en: The G’MIC’s preview is updated as soon as you select a filter. When you click
    the APPLY button, the filter is immediately applied to the image, allowing you
    to transform it using several filters in sequence. Because we can’t demonstrate
    all these filters, we’ve chosen a random sample here and will demonstrate them
    using the default settings.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: G'MIC的预览会在你选择滤镜后立即更新。当你点击应用按钮时，滤镜会立即应用到图像上，使你能够按顺序使用多个滤镜进行转换。由于我们无法展示所有这些滤镜，这里选取了一个随机样本，并将使用默认设置展示它们。
- en: '[Figure 21-8](ch21s02.html#after_applying_the_local_normalization_f "Figure 21-8. After
    applying the Local normalization filter (left), the B & W pencil filter (middle),
    and the Anisotropic smoothing filter (right)") (left) shows the result of applying
    the Local normalization filter found in the Colors submenu to our sample image.
    [Figure 21-8](ch21s02.html#after_applying_the_local_normalization_f "Figure 21-8. After
    applying the Local normalization filter (left), the B & W pencil filter (middle),
    and the Anisotropic smoothing filter (right)") (middle) shows the result of applying
    the B & W pencil filter found in the Artistic submenu. [Figure 21-8](ch21s02.html#after_applying_the_local_normalization_f
    "Figure 21-8. After applying the Local normalization filter (left), the B & W
    pencil filter (middle), and the Anisotropic smoothing filter (right)") (right)
    shows the same photograph after applying the Anisotropic smoothing filter, which
    is found in the Enhancement submenu.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[图21-8](ch21s02.html#after_applying_the_local_normalization_f "图21-8. 应用局部归一化滤镜（左）、黑白铅笔滤镜（中）、各向异性平滑滤镜（右）")（左）显示了应用位于“颜色”子菜单中的局部归一化滤镜后的效果。[图21-8](ch21s02.html#after_applying_the_local_normalization_f
    "图21-8. 应用局部归一化滤镜（左）、黑白铅笔滤镜（中）、各向异性平滑滤镜（右）")（中）显示了应用位于“艺术”子菜单中的黑白铅笔滤镜后的效果。[图21-8](ch21s02.html#after_applying_the_local_normalization_f
    "图21-8. 应用局部归一化滤镜（左）、黑白铅笔滤镜（中）、各向异性平滑滤镜（右）")（右）显示了应用位于“增强”子菜单中的各向异性平滑滤镜后的同一张照片。'
- en: G’MIC is a complex plug-in, and these examples give only a taste of its capabilities.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: G'MIC是一个复杂的插件，这些示例只是展示了其功能的一部分。
- en: Liquid Rescale
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Liquid Rescale
- en: 'Liquid Rescale (*[http://liquidrescale.wikidot.com/](http://liquidrescale.wikidot.com/)*)
    is a powerful tool that allows you to stretch or squeeze an image without changing
    the shape of objects. You’ll find the tool in the **Image: Layer** menu. In [Figure 21-9](ch21s02.html#liquid_rescale_dialog
    "Figure 21-9. The Liquid Rescale dialog"), a 2000 × 1333 photograph is shown in
    the preview window. We’ll make it more panoramic by stretching it horizontally.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Liquid Rescale (*[http://liquidrescale.wikidot.com/](http://liquidrescale.wikidot.com/)*)
    是一个强大的工具，可以在不改变物体形状的情况下拉伸或压缩图像。你可以在**图像：图层**菜单中找到这个工具。在[图21-9](ch21s02.html#liquid_rescale_dialog
    "图21-9. Liquid Rescale对话框")中，预览窗口显示了一张2000 × 1333的照片。我们将通过水平拉伸它，使其变得更具全景效果。
- en: '![The G’MIC dialog](httpatomoreillycomsourcenostarchimages1457344.png.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![G''MIC对话框](httpatomoreillycomsourcenostarchimages1457344.png.jpg)'
- en: Figure 21-7. The G’MIC dialog
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图21-7. G'MIC对话框
- en: '![After applying the Local normalization filter (left), the B & W pencil filter
    (middle), and the Anisotropic smoothing filter (right)](httpatomoreillycomsourcenostarchimages1457346.png.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![应用局部归一化滤镜（左）、黑白铅笔滤镜（中）、各向异性平滑滤镜（右）](httpatomoreillycomsourcenostarchimages1457346.png.jpg)'
- en: Figure 21-8. After applying the Local normalization filter (left), the B & W
    pencil filter (middle), and the Anisotropic smoothing filter (right)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图21-8. 应用局部归一化滤镜（左）、黑白铅笔滤镜（中）、各向异性平滑滤镜（右）
- en: If we simply change the canvas width to 3000 pixels using Liquid Rescale, the
    result (shown in [Figure 21-10](ch21s02.html#result_of_resizing_without_preservation
    "Figure 21-10. The result of resizing without preservation")) is unsatisfactory
    because the person’s head is misshapen. To fix this, check the NEW button at the
    right of the tool dialog, in the FEATURE PRESERVATION MASK section, to activate
    the PRESERVE FEATURES button. Doing so creates a new layer with 50% opacity and
    temporarily changes the foreground color to a vivid green. Now we can paint the
    man and, as you can see in [Figure 21-11](ch21s02.html#defining_the_preservation_mask
    "Figure 21-11. Defining the preservation mask"), we don’t need to be very precise.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仅使用液体缩放将画布宽度更改为 3000 像素，那么结果（如[图 21-10](ch21s02.html#result_of_resizing_without_preservation
    "图 21-10. 重新调整大小而不进行保留的结果")所示）是不令人满意的，因为人物的头部变形。为了解决这个问题，勾选工具对话框右侧 FEATURE PRESERVATION
    MASK 部分中的 NEW 按钮，以激活 PRESERVE FEATURES 按钮。这样就会创建一个新图层，透明度为 50%，并临时将前景色更改为鲜艳的绿色。现在我们可以绘制人物，如[图
    21-11](ch21s02.html#defining_the_preservation_mask "图 21-11. 定义保留掩码")所示，我们不需要特别精确。
- en: After painting the subject, return the width to 3000 pixels to get the result
    shown in [Figure 21-12](ch21s02.html#result_of_resizing_with_preservation "Figure 21-12. The
    result of resizing with preservation"). Admittedly, the ship is a bit too stretched,
    but we could have preserved its aspect ratio if we’d painted it as well.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制完主题后，将宽度恢复到 3000 像素，得到[图 21-12](ch21s02.html#result_of_resizing_with_preservation
    "图 21-12. 使用保留功能调整大小的结果")中所示的结果。诚然，船只看起来有点拉伸过度，但如果我们也绘制了船只，就可以保留其长宽比了。
- en: You can also use Liquid Rescale to discard certain features in an image. For
    example, suppose that in [Figure 21-13](ch21s02.html#initial_image-id00200 "Figure 21-13. Initial
    image") we want to discard the potted plants on both sides of the peacock. To
    do this, we click the NEW button in the FEATURE DISCARD MASK tool dialog. The
    DISCARD FEATURES button is automatically checked, a new layer is created, and
    the foreground color changes to a vivid red.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用液体缩放来丢弃图像中的某些特征。例如，假设在[图 21-13](ch21s02.html#initial_image-id00200 "图
    21-13. 初始图像")中，我们想丢弃孔雀两侧的花盆。为此，我们点击 FEATURE DISCARD MASK 工具对话框中的 NEW 按钮。DISCARD
    FEATURES 按钮会自动勾选，创建一个新图层，前景色变为鲜艳的红色。
- en: '![The Liquid Rescale dialog](httpatomoreillycomsourcenostarchimages1457348.png.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![液体缩放对话框](httpatomoreillycomsourcenostarchimages1457348.png.jpg)'
- en: Figure 21-9. The Liquid Rescale dialog
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-9. 液体缩放对话框
- en: '![The result of resizing without preservation](httpatomoreillycomsourcenostarchimages1457350.png.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![重新调整大小而不进行保留的结果](httpatomoreillycomsourcenostarchimages1457350.png.jpg)'
- en: Figure 21-10. The result of resizing without preservation
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-10. 重新调整大小而不进行保留的结果
- en: Next, we paint the mask shown in [Figure 21-14](ch21s02.html#defining_the_discard_mask
    "Figure 21-14. Defining the discard mask"), which is a bit more challenging than
    before because the peacock tail is very close to the left pot. Then, we click
    the WIDTH button to the right of AUTO SIZE to get a width of 1103 pixels. The
    final result, shown in [Figure 21-15](ch21s02.html#resizing_with_the_discard_feature
    "Figure 21-15. Resizing with the Discard feature"), needs some retouching, but
    you should get the idea.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们绘制[图 21-14](ch21s02.html#defining_the_discard_mask "图 21-14. 定义丢弃掩码")中显示的掩码，这比之前的操作更具挑战性，因为孔雀尾巴非常靠近左侧的花盆。然后，我们点击位于自动大小右侧的宽度按钮，将宽度设置为
    1103 像素。最终结果，如[图 21-15](ch21s02.html#resizing_with_the_discard_feature "图 21-15.
    使用丢弃功能调整大小")所示，仍然需要一些修饰，但你应该能理解大致思路。
- en: '![Defining the preservation mask](httpatomoreillycomsourcenostarchimages1457352.png.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![定义保留掩码](httpatomoreillycomsourcenostarchimages1457352.png.jpg)'
- en: Figure 21-11. Defining the preservation mask
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-11. 定义保留掩码
- en: '![The result of resizing with preservation](httpatomoreillycomsourcenostarchimages1457354.png.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![重新调整大小并进行保留的结果](httpatomoreillycomsourcenostarchimages1457354.png.jpg)'
- en: Figure 21-12. The result of resizing with preservation
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-12. 使用保留功能调整大小的结果
- en: As described on its home page, the Liquid Rescale tool offers many other possibilities,
    including an interactive mode, the ability to output a seam map (which shows how
    the image was resized), and so on. For example, [Figure 21-16](ch21s02.html#seam_maps_when_shrinking_a_portrait
    "Figure 21-16. The seam maps when shrinking a portrait") shows the seam maps when
    we make a portrait narrower (80% original width) and [Figure 21-17](ch21s02.html#seam_maps_when_enlarging_a_portrait
    "Figure 21-17. The seam maps when enlarging a portrait") shows the seam maps when
    we make it wider (120% original width). On the Output tab, we checked OUTPUT ON
    A NEW LAYER, OUTPUT THE SEAMS, and SCALE BACK TO THE ORIGINAL SIZE. In both cases,
    the rescaling left the eyes and most of the mouth intact but changed the rest
    of the face in an unnatural and unpleasant way.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如其主页所述，液态重缩放工具提供了许多其他功能，包括交互模式、输出接缝图的能力（显示图像是如何调整大小的）等。例如，[图 21-16](ch21s02.html#seam_maps_when_shrinking_a_portrait
    "图 21-16。缩小肖像时的接缝图")展示了将肖像缩小（80% 原始宽度）时的接缝图，[图 21-17](ch21s02.html#seam_maps_when_enlarging_a_portrait
    "图 21-17。放大肖像时的接缝图")展示了将其放大（120% 原始宽度）时的接缝图。在“输出”选项卡上，我们勾选了“在新图层中输出”、“输出接缝”以及“按原始尺寸缩放”。在这两种情况下，重缩放保持了眼睛和大部分嘴巴的完整，但改变了面部的其他部分，使其看起来不自然且不悦目。
- en: '![Initial image](httpatomoreillycomsourcenostarchimages1457356.png.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![初始图像](httpatomoreillycomsourcenostarchimages1457356.png.jpg)'
- en: Figure 21-13. Initial image
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-13。初始图像
- en: '![Defining the discard mask](httpatomoreillycomsourcenostarchimages1457358.png.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![定义丢弃掩码](httpatomoreillycomsourcenostarchimages1457358.png.jpg)'
- en: Figure 21-14. Defining the discard mask
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-14。定义丢弃掩码
- en: '![Resizing with the Discard feature](httpatomoreillycomsourcenostarchimages1457360.png.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![使用丢弃功能进行调整大小](httpatomoreillycomsourcenostarchimages1457360.png.jpg)'
- en: Figure 21-15. Resizing with the Discard feature
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-15。使用丢弃功能进行调整大小
- en: '![The seam maps when shrinking a portrait](httpatomoreillycomsourcenostarchimages1457362.png.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![缩小肖像时的接缝图](httpatomoreillycomsourcenostarchimages1457362.png.jpg)'
- en: Figure 21-16. The seam maps when shrinking a portrait
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-16。缩小肖像时的接缝图
- en: '![The seam maps when enlarging a portrait](httpatomoreillycomsourcenostarchimages1457364.png.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![放大肖像时的接缝图](httpatomoreillycomsourcenostarchimages1457364.png.jpg)'
- en: Figure 21-17. The seam maps when enlarging a portrait
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-17。放大肖像时的接缝图
- en: Elsamuko Scripts
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Elsamuko 脚本集
- en: The Elsamuko collection of scripts offers a wide variety of ways to transform
    or improve pictures. The collection can be found at *[http://sites.google.com/site/elsamuko/gimp/](http://sites.google.com/site/elsamuko/gimp/)*
    and is part of the `gimp-plugin-registry` Debian package (usable on Debian and
    Ubuntu). This site also contains many other plug-ins and scripts.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Elsamuko 脚本集提供了多种方法来转换或改善图像。该脚本集可以在*[http://sites.google.com/site/elsamuko/gimp/](http://sites.google.com/site/elsamuko/gimp/)*找到，并且是
    `gimp-plugin-registry` Debian 包的一部分（可以在 Debian 和 Ubuntu 上使用）。该站点还包含许多其他插件和脚本。
- en: '![After applying the National Geographic filter (left), the Obama Hope filter
    (middle), and the Lomo filter (right)](httpatomoreillycomsourcenostarchimages1457366.png.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![应用国家地理滤镜（左）、奥巴马希望滤镜（中）、Lomo 滤镜（右）后的效果](httpatomoreillycomsourcenostarchimages1457366.png.jpg)'
- en: Figure 21-18. After applying the National Geographic filter (left), the Obama
    Hope filter (middle), and the Lomo filter (right)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-18。应用国家地理滤镜（左）、奥巴马希望滤镜（中）、Lomo 滤镜（右）后的效果
- en: We’ll demonstrate only three of the Elsamuko scripts, using the same photograph
    as before. These scripts generally require lots of computing power, and most build
    an image with numerous layers and layer masks.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将仅展示三种 Elsamuko 脚本，使用之前相同的照片。这些脚本通常需要大量计算能力，且大多数会使用多个图层和图层蒙版来构建图像。
- en: '[Figure 21-18](ch21s02.html#after_applying_the_national_geographic_f "Figure 21-18. After
    applying the National Geographic filter (left), the Obama Hope filter (middle),
    and the Lomo filter (right)") (left) shows the result of applying the **Image:
    Filters > Generic > National Geographic** filter, designed to generate high-quality
    portraits like those found in the celebrated magazine.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 21-18](ch21s02.html#after_applying_the_national_geographic_f "图 21-18。应用国家地理滤镜（左）、奥巴马希望滤镜（中）、Lomo
    滤镜（右）")（左）显示了应用**图像：滤镜 > 通用 > 国家地理**滤镜的效果，该滤镜旨在生成类似于著名杂志中的高质量肖像。'
- en: '[Figure 21-18](ch21s02.html#after_applying_the_national_geographic_f "Figure 21-18. After
    applying the National Geographic filter (left), the Obama Hope filter (middle),
    and the Lomo filter (right)") (middle) shows the result of applying the **Image:
    Filters > Artistic > Obama Hope** filter, inspired by the famous Obama “HOPE”
    poster.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 21-18](ch21s02.html#after_applying_the_national_geographic_f "图 21-18. 应用国家地理滤镜（左）、奥巴马希望滤镜（中）和
    Lomo 滤镜（右）后的效果")（中）展示了应用**图像：滤镜 > 艺术 > 奥巴马希望**滤镜后的效果，该滤镜灵感来自著名的奥巴马“HOPE”海报。'
- en: '[Figure 21-18](ch21s02.html#after_applying_the_national_geographic_f "Figure 21-18. After
    applying the National Geographic filter (left), the Obama Hope filter (middle),
    and the Lomo filter (right)") (right) shows the result of applying the **Image:
    Filters > Light and Shadow > Lomo** filter, designed to simulate the results of
    using a Lomo camera, an inexpensive Russian model from the early 1990s.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 21-18](ch21s02.html#after_applying_the_national_geographic_f "图 21-18. 应用国家地理滤镜（左）、奥巴马希望滤镜（中）和
    Lomo 滤镜（右）后的效果")（右）展示了应用**图像：滤镜 > 光与影 > Lomo**滤镜后的效果，该滤镜设计用于模拟使用 Lomo 相机的效果，这是一款来自
    1990 年代初期的便宜俄罗斯相机。'
- en: 21.3 Writing Plug-ins
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 21.3 编写插件
- en: 'Using predefined plug-ins is convenient, but you won’t always find exactly
    what you need, and if you have a little programming experience, writing your own
    plug-ins can be more fun anyway. After you have written the first three or four,
    you’ll find writing them easy. In this section, we present plug-ins written in
    the three main programming languages: Scheme, Python, and C.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用预定义的插件非常方便，但你并不总是能找到完全符合需求的插件，而且如果你有一点编程经验，自己编写插件也许更有趣。在你编写了前三四个插件后，你会发现编写插件变得非常简单。在本节中，我们展示了用三种主要编程语言编写的插件：Scheme、Python
    和 C。
- en: Scheme
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Scheme
- en: 'Scripts written in Scheme are called Script-Fu. Take, for example, the script
    for **Image: Colors > Map > Colormap**. This script includes the function `script-fu-makecmap-array`,
    which returns an array containing the colors for a specified palette. This function
    can be used in other scripts that need color palette information.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 用 Scheme 编写的脚本称为 Script-Fu。例如，**图像：颜色 > 映射 > 色彩图**的脚本。这个脚本包括了函数`script-fu-makecmap-array`，它返回一个包含指定调色板颜色的数组。这个函数可以在其他需要色板信息的脚本中使用。
- en: 'The function is written in Scheme, and the code is shown in [Figure 21-19](ch21s03.html#script-fu_example_the_cmap_array_functio
    "Figure 21-19. A Script-Fu example: the cmap array function from the Set Colormap
    script"). Scheme is written as a sequence of embedded expressions in parentheses.
    Briefly, a Scheme function definition takes the form of `(define (name parameters)
    (expr) (expr) ...)`. This snippet of code defines the function `name` whose value
    is that of the last expression. An expression calls a function, whose name or
    symbol appears as the first element in the expression, along with any arguments
    that follow the function. An argument itself can be an expression that calls functions.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数是用 Scheme 编写的，代码展示在[图 21-19](ch21s03.html#script-fu_example_the_cmap_array_functio
    "图 21-19. 一个 Script-Fu 示例：来自 Set Colormap 脚本的 cmap 数组函数")中。Scheme 是通过一系列嵌套在括号中的表达式来编写的。简而言之，Scheme
    函数的定义形式为`(define (name parameters) (expr) (expr) ...)`。这段代码定义了函数`name`，其值为最后一个表达式的值。一个表达式调用一个函数，函数的名称或符号出现在表达式的第一个元素中，后面跟着任何参数。一个参数本身也可以是调用函数的表达式。
- en: '![A Script-Fu example: the cmap array function from the Set Colormap script](httpatomoreillycomsourcenostarchimages1457368.png.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![一个 Script-Fu 示例：来自 Set Colormap 脚本的 cmap 数组函数](httpatomoreillycomsourcenostarchimages1457368.png.jpg)'
- en: 'Figure 21-19. A Script-Fu example: the cmap array function from the Set Colormap
    script'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-19. 一个 Script-Fu 示例：来自 Set Colormap 脚本的 cmap 数组函数
- en: 'For example, on line 29 in [Figure 21-19](ch21s03.html#script-fu_example_the_cmap_array_functio
    "Figure 21-19. A Script-Fu example: the cmap array function from the Set Colormap
    script"), the function `*` (multiplication) is called with two arguments. The
    first argument is an expression that calls the function `car`, and the second
    argument is the number `3`. The call to function `*` is actually the second argument
    to the call to `gimp-image-set-colormap` that appears on the previous line. The
    first argument is the first function parameter, and the third argument is the
    result of the `script-fu-make-cmap-array` function with the third function parameter
    as an argument.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在[图 21-19](ch21s03.html#script-fu_example_the_cmap_array_functio "图 21-19.
    Script-Fu 示例：来自 Set Colormap 脚本的 cmap 数组函数")的第 29 行，函数 `*`（乘法）被调用，传入了两个参数。第一个参数是一个调用
    `car` 函数的表达式，第二个参数是数字 `3`。调用函数 `*` 实际上是对上一行的 `gimp-image-set-colormap` 函数的第二个参数。第一个参数是第一个函数参数，第三个参数是
    `script-fu-make-cmap-array` 函数的结果，第三个函数参数作为参数传递。
- en: 'Select **Image: Help > Procedure Browser** to learn about a function’s arguments
    and their purpose. For example, in [Figure 21-20](ch21s03.html#procedure_browser_dialog
    "Figure 21-20. The Procedure Browser dialog"), we enter `colormap` in the Search
    field and then select a function from the list. At the right of the dialog, we
    see the type and meaning of the parameters for the chosen function, as well as
    a detailed comment.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**图像：帮助 > 过程浏览器**以了解函数的参数及其作用。例如，在[图 21-20](ch21s03.html#procedure_browser_dialog
    "图 21-20. 过程浏览器对话框")中，我们在搜索框中输入 `colormap`，然后从列表中选择一个函数。在对话框右侧，我们可以看到所选函数的参数类型和含义，以及详细的注释。
- en: 'Lines 9 to 14 of [Figure 21-19](ch21s03.html#script-fu_example_the_cmap_array_functio
    "Figure 21-19. A Script-Fu example: the cmap array function from the Set Colormap
    script") contain the declaration and initialization of the local variables of
    function `script-fu-make-cmap-array`. We can use these variables in the function
    body.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 21-19](ch21s03.html#script-fu_example_the_cmap_array_functio "图 21-19. Script-Fu
    示例：来自 Set Colormap 脚本的 cmap 数组函数")的第 9 至 14 行包含了函数 `script-fu-make-cmap-array`
    的局部变量的声明和初始化。我们可以在函数体内使用这些变量。'
- en: '![The Procedure Browser dialog](httpatomoreillycomsourcenostarchimages1457370.png.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![过程浏览器对话框](httpatomoreillycomsourcenostarchimages1457370.png.jpg)'
- en: Figure 21-20. The Procedure Browser dialog
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-20. 过程浏览器对话框
- en: 'One of the most important parts of any Script-Fu is the script registration,
    as shown in lines 34 to 44 of [Figure 21-19](ch21s03.html#script-fu_example_the_cmap_array_functio
    "Figure 21-19. A Script-Fu example: the cmap array function from the Set Colormap
    script"). The script registration gives GIMP all the information it needs to integrate
    the script into GIMP. The various parameters of `script-fu-register` provide this
    information in the following order.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 任何 Script-Fu 中最重要的部分之一是脚本注册，如[图 21-19](ch21s03.html#script-fu_example_the_cmap_array_functio
    "图 21-19. Script-Fu 示例：来自 Set Colormap 脚本的 cmap 数组函数")第 34 至 44 行所示。脚本注册为 GIMP
    提供了它所需的所有信息，以将脚本集成到 GIMP 中。`script-fu-register` 的各种参数按以下顺序提供这些信息。
- en: Entry in the menu, with an underscore (`_`) before the character used as an
    abbreviation
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 菜单中的条目，在字符前加下划线（`_`）表示作为缩写的字符
- en: Contents of the tool tip
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具提示的内容
- en: Author name
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作者姓名
- en: Copyright notice
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版权声明
- en: Copyright date
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版权日期
- en: Type of image to be handled
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要处理的图像类型
- en: Description of the type, name, and initial value parameters
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型、名称和初始值参数的描述
- en: Finally, calling `script-fu-menu-register` places the Script-Fu in the GIMP
    menus.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，调用 `script-fu-menu-register` 将 Script-Fu 放入 GIMP 菜单中。
- en: 'Testing Script-Fu is easy, thanks to **Image: Filters > Script-Fu > Console**,
    which opens the dialog shown in [Figure 21-21](ch21s03.html#script-fu_console
    "Figure 21-21. The Script-Fu console"). All you need to do is enter the Scheme
    expressions in the bottom field and press ![](httpatomoreillycomsourcenostarchimages1453866.png.jpg).
    The expressions are evaluated immediately, with the result shown in the main dialog
    window.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 测试 Script-Fu 非常简单，得益于**图像：滤镜 > Script-Fu > 控制台**，它会打开在[图 21-21](ch21s03.html#script-fu_console
    "图 21-21. Script-Fu 控制台")中显示的对话框。你需要做的就是在底部字段中输入 Scheme 表达式并按下 ![](httpatomoreillycomsourcenostarchimages1453866.png.jpg)。表达式会立即被评估，结果会显示在主对话框窗口中。
- en: The BROWSE button opens the Procedure Browser dialog. When you choose a specific
    procedure and click APPLY, a call to this procedure is inserted in the Script-Fu
    console field, and then you simply need to enter your parameters.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: BROWSE 按钮会打开过程浏览器对话框。当你选择一个特定的过程并点击应用时，这个过程的调用会插入到 Script-Fu 控制台字段中，然后你只需要输入你的参数。
- en: '![The Script-Fu console](httpatomoreillycomsourcenostarchimages1457372.png.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![Script-Fu 控制台](httpatomoreillycomsourcenostarchimages1457372.png.jpg)'
- en: Figure 21-21. The Script-Fu console
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图21-21。Script-Fu 控制台
- en: You’ll find many Script-Fus on the Web. Some are well advertised on the GIMP
    Plugin Registry, whereas others are available on independent websites and blogs.
    See, for example, *[http://gimpfx-foundry.sourceforge.net/](http://gimpfx-foundry.sourceforge.net/)*
    or *[http://gimpscripts.com/](http://gimpscripts.com/)*.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在网上找到许多 Script-Fu。有些在 GIMP 插件注册表中做了很好的广告，而其他则可以在独立网站和博客上找到。例如，查看 *[http://gimpfx-foundry.sourceforge.net/](http://gimpfx-foundry.sourceforge.net/)*
    或 *[http://gimpscripts.com/](http://gimpscripts.com/)*。
- en: Python
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python
- en: 'Like the name *Script-Fu* coined for Scheme scripts, *Python-Fu* is what Python
    plug-ins are called. [Figure 21-22](ch21s03.html#python-fu_example_a_fog-rendering_filter
    "Figure 21-22. A Python-Fu example: a fog-rendering filter") shows a sample Python
    program, the **Image: Filters > Render > Clouds > Fog** filter. In lines 4 to
    6, the contents of the `gimpfu` module are imported, the `time` module is imported,
    and the `gettext` function is used to internationalize all the text in the program.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 就像为 Scheme 脚本创造的名称 *Script-Fu* 一样，*Python-Fu* 是 Python 插件的名称。[图21-22](ch21s03.html#python-fu_example_a_fog-rendering_filter
    "图21-22。一个 Python-Fu 示例：雾渲染滤镜") 显示了一个 Python 程序示例，**图像：滤镜 > 渲染 > 云彩 > 雾** 滤镜。在第4到第6行中，`gimpfu`
    模块被导入，`time` 模块被导入，并且 `gettext` 函数用于国际化程序中的所有文本。
- en: '![A Python-Fu example: a fog-rendering filter](httpatomoreillycomsourcenostarchimages1457374.png.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![一个 Python-Fu 示例：雾渲染滤镜](httpatomoreillycomsourcenostarchimages1457374.png.jpg)'
- en: 'Figure 21-22. A Python-Fu example: a fog-rendering filter'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图21-22。一个 Python-Fu 示例：雾渲染滤镜
- en: The Python-Fu body of the Render Clouds plug-in, shown from lines 8 to 36, is
    a good example of a Python program. Statements end when the line ends, except
    when they are within parentheses, as in line 17\. Embedding is denoted by indentation,
    as shown in lines 13 through 17\. Some Python syntax is inspired by the C language,
    with `=` used for assignment and `==` for comparison. The workings of this particular
    function are easy to follow once you know the meaning of GIMP’s predefined functions.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染云彩插件的 Python-Fu 代码体（第8到36行）是一个很好的 Python 程序示例。语句在行末结束，除非它们在括号内，如第17行所示。嵌套通过缩进来表示，如第13到17行所示。某些
    Python 语法受到 C 语言的启发，使用 `=` 进行赋值，使用 `==` 进行比较。一旦你理解了 GIMP 预定义函数的含义，这个特定函数的工作原理就很容易理解。
- en: Python-Fu is registered in GIMP in the same way as Script-Fu (lines 38 to 59),
    except for some slight differences in the arguments of the `register` function,
    especially in the description of the Python-Fu arguments.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Python-Fu 在 GIMP 中的注册方式与 Script-Fu 相同（第38到59行），唯一的不同是 `register` 函数的参数，特别是在
    Python-Fu 参数的描述上。
- en: 'Selecting **Image: Filters > Python-Fu > Console** opens a dialog similar to
    the Script-Fu Console. You can use this dialog to enter Python statements directly
    and test their effect. The Procedure Browser is used in a similar way, allowing
    you to insert typed code into the proper function call.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**图像：滤镜 > Python-Fu > 控制台**将打开一个类似于 Script-Fu 控制台的对话框。你可以使用此对话框直接输入 Python
    语句并测试其效果。过程浏览器的使用方式类似，它允许你将输入的代码插入到正确的函数调用中。
- en: C
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C
- en: By nature, a C program is longer than its equivalent in Scheme or in Python
    because it is programmed in a lower-level language. You’ll find a good three-part
    tutorial about building a C plugin for GIMP at *[http://developer.gimp.org/plug-ins.html](http://developer.gimp.org/plug-ins.html)*.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，C 程序比其等效的 Scheme 或 Python 程序要长，因为它是在低级语言中编写的。你可以在*[http://developer.gimp.org/plug-ins.html](http://developer.gimp.org/plug-ins.html)*上找到一个关于为
    GIMP 构建 C 插件的很好的三部分教程。
- en: 'The shortest C plug-in is the Semi-Flatten plug-in, found in the **Image: Filters
    > Web** menu. We removed as many blank lines as possible but still had to cut
    it into two parts ([Figure 21-23](ch21s03.html#c_plug-in_example_semi-flatten_left_pare
    "Figure 21-23. A C plug-in example: Semi-Flatten (part 1)") and [Figure 21-24](ch21s03.html#c_plug-in_example_semi-flatten_l-id00201
    "Figure 21-24. A C plug-in example: Semi-Flatten (part 2)")) to display the full
    program. The file’s heading is shown in lines 1 to 20, along with its declaration
    of three visible functions, some static variables, and one constant.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 最简短的 C 插件是 Semi-Flatten 插件，可以在 **图像：滤镜 > 网络** 菜单中找到。我们尽可能去除了多余的空行，但仍然不得不将其分为两部分（[图
    21-23](ch21s03.html#c_plug-in_example_semi-flatten_left_pare "图 21-23. 一个 C 插件示例：Semi-Flatten（第一部分）")
    和 [图 21-24](ch21s03.html#c_plug-in_example_semi-flatten_l-id00201 "图 21-24. 一个
    C 插件示例：Semi-Flatten（第二部分）")）以展示完整的程序。文件的头部显示在第 1 到第 20 行，包含了三个可见函数的声明、一些静态变量和一个常量。
- en: 'This C plug-in contains four function definitions. Because none of these functions
    returns a result, their type is always `static void`. The `query` function (lines
    23 to 48) has no parameter and is called the first time the plug-in is used. It
    calls `gimp_install_procedure` to register the plug-in (in a similar way to a
    Python plug-in). Note that the `semiflatten` plug-in is installed both in the
    **Image: Filters > Web** and in the **Image: Layer > Transparency** menus.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 C 插件包含四个函数定义。由于这些函数都没有返回结果，它们的类型始终是 `static void`。`query` 函数（第 23 到第 48 行）没有参数，并在第一次使用插件时被调用。它调用
    `gimp_install_procedure` 来注册插件（类似于 Python 插件）。请注意，`semiflatten` 插件同时在 **图像：滤镜
    > 网络** 和 **图像：图层 > 透明度** 菜单中安装。
- en: The `semiflatten_func` function (lines 50 to 60) is a simple auxiliary function
    called indirectly by `semiflatten` (lines 61 to 69), itself an auxiliary function.
    The `run` function (lines 71 to 111) is called when we call the plug-in and makes
    the actual changes. Note that Semi-Flatten does not open a dialog.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`semiflatten_func` 函数（第 50 到第 60 行）是一个简单的辅助函数，通过 `semiflatten`（第 61 到第 69 行）间接调用，`semiflatten`
    本身也是一个辅助函数。`run` 函数（第 71 到第 111 行）在我们调用插件时被调用，进行实际的更改。请注意，Semi-Flatten 插件不会打开对话框。'
- en: The most crucial point in the plug-in definition is the `GimpPlugInInfo PLUG_IN_INFO`
    structure, declared in the heading. This definition declares the `query` and `run`
    functions. The call to `MAIN()` shown on line 21 is a C macro that initializes
    the arguments and calls `PLUG_IN_INFO`. These sorts of definitions are required
    for all C plug-ins.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 插件定义中最关键的点是 `GimpPlugInInfo PLUG_IN_INFO` 结构体，它在头部进行了声明。该定义声明了 `query` 和 `run`
    函数。第 21 行显示的对 `MAIN()` 的调用是一个 C 宏，它初始化参数并调用 `PLUG_IN_INFO`。所有 C 插件都需要这些类型的定义。
- en: Although a casual programmer with a good knowledge of GIMP should be able to
    program a short Script-Fu or Python-Fu plug-in, using the Procedure Browser to
    search in the GIMP procedural database, most likely only a serious C programmer
    will be able to build even a simple C plug-in.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管具有良好 GIMP 知识的普通程序员应该能够编写一个简单的 Script-Fu 或 Python-Fu 插件，并使用过程浏览器在 GIMP 的过程数据库中进行搜索，但很可能只有一个经验丰富的
    C 程序员才能构建一个即使是简单的 C 插件。
- en: Moreover, installing a C plug-in is nontrivial and requires a C compiling environment.
    The `libgimp` headers must be installed on the computer to provide all needed
    declarations, and a tool called `gimptool` is also needed to compile and install
    the plug-in (see *[http://developer.gimp.org/plug-ins.html](http://developer.gimp.org/plug-ins.html)*
    for more information).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，安装 C 插件并非简单任务，需要一个 C 编译环境。必须在计算机上安装 `libgimp` 头文件，以提供所需的所有声明，并且还需要一个名为 `gimptool`
    的工具来编译和安装插件（有关更多信息，请参见 *[http://developer.gimp.org/plug-ins.html](http://developer.gimp.org/plug-ins.html)*）。
- en: '![A C plug-in example: Semi-Flatten (part 1)](httpatomoreillycomsourcenostarchimages1457376.png.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![一个 C 插件示例：Semi-Flatten（第一部分）](httpatomoreillycomsourcenostarchimages1457376.png.jpg)'
- en: 'Figure 21-23. A C plug-in example: Semi-Flatten (part 1)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-23. 一个 C 插件示例：Semi-Flatten（第一部分）
- en: '![A C plug-in example: Semi-Flatten (part 2)](httpatomoreillycomsourcenostarchimages1457378.png.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![一个 C 插件示例：Semi-Flatten（第二部分）](httpatomoreillycomsourcenostarchimages1457378.png.jpg)'
- en: 'Figure 21-24. A C plug-in example: Semi-Flatten (part 2)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-24. 一个 C 插件示例：Semi-Flatten（第二部分）
