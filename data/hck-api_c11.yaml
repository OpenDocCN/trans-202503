- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Mass Assignment
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大规模赋值
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: An API is vulnerable to mass assignment if the consumer is able to send a request
    that updates or overwrites server-side variables. If an API accepts client input
    without filtering or sanitizing it, an attacker can update objects with which
    they shouldn’t be able to interact. For example, a banking API might allow users
    to update the email address associated with their account, but a mass assignment
    vulnerability might let the user send a request that updates their account balance
    as well.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果API允许消费者发送请求更新或覆盖服务器端变量，那么该API就容易受到大规模赋值攻击。如果API在没有过滤或清理客户端输入的情况下接受它，攻击者就可以更新他们不应该与之互动的对象。例如，一个银行API可能允许用户更新与账户关联的电子邮件地址，但一个大规模赋值漏洞可能允许用户发送请求更新其账户余额。
- en: In this chapter, we’ll discuss strategies for finding mass assignment targets
    and figuring out which variables the API uses to identify sensitive data. Then
    we’ll discuss automating your mass assignment attacks with Arjun and Burp Suite
    Intruder.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论寻找大规模赋值目标的策略，并了解API使用哪些变量来识别敏感数据。然后，我们将讨论如何使用Arjun和Burp Suite Intruder自动化你的大规模赋值攻击。
- en: Finding Mass Assignment Targets
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找大规模赋值目标
- en: One of the most common places to discover and exploit mass assignment vulnerabilities
    is in API requests that accept and process client input. Account registration,
    profile editing, user management, and client management are all common functions
    that allow clients to submit input using the API.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 发现并利用大规模赋值漏洞最常见的地方是在接受和处理客户端输入的API请求中。账户注册、个人资料编辑、用户管理和客户管理都是允许客户端通过API提交输入的常见功能。
- en: Account Registration
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 账户注册
- en: 'Likely the most frequent place you’ll look for mass assignment is in account
    registration processes, as these might allow you to register as an administrative
    user. If the registration process relies on a web application, the end user would
    fill in standard fields with information such as their desired username, email
    address, phone number, and account password. Once the user clicks the submit button,
    an API request like the following would be sent:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大规模赋值最常见的地方可能是在账户注册过程中，因为这些过程可能允许你注册为管理员用户。如果注册过程依赖于Web应用程序，最终用户将填写包括所需用户名、电子邮件地址、电话号码和账户密码等标准字段。一旦用户点击提交按钮，类似以下的API请求将被发送：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For most end users, this request takes place in the background, leaving them
    none the wiser. However, since you’re an expert at intercepting web application
    traffic, you can easily capture and manipulate it. Once you’ve intercepted a registration
    request, check whether you can submit additional values in the request. A common
    version of this attack is to upgrade an account to an administrator role by adding
    a variable that the API provider likely uses to identify admins:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数最终用户来说，这个请求是在后台进行的，他们对此一无所知。然而，由于你是拦截Web应用程序流量的专家，你可以轻松地捕获并操控它。一旦你拦截到注册请求，检查你是否可以在请求中提交额外的值。这个攻击的常见版本是通过添加一个API提供者可能用来识别管理员的变量，将账户升级为管理员角色：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If the API provider uses this variable to update account privileges on the backend
    and accepts additional input from the client, this request will turn the account
    being registered into an admin-level account.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果API提供者使用该变量来更新后端账户权限并接受来自客户端的额外输入，那么此请求将把注册的账户变成管理员账户。
- en: Unauthorized Access to Organizations
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 未经授权的组织访问
- en: 'Mass assignment attacks go beyond making attempts to become an administrator.
    You could also use mass assignment to gain unauthorized access to other organizations,
    for instance. If your user objects include an organizational group that allows
    access to company secrets or other sensitive information, you can attempt to gain
    access to that group. In this example, we’ve added an `"org"` variable to our
    request and turned its value into an attack position we could then fuzz in Burp
    Suite:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 大规模赋值攻击不仅仅是尝试成为管理员。你也可以使用大规模赋值来未经授权访问其他组织。例如，如果你的用户对象包括一个允许访问公司机密或其他敏感信息的组织组，你可以尝试访问该组。在这个例子中，我们已将`"org"`变量添加到我们的请求中，并将其值转化为一个攻击位置，接下来可以在Burp
    Suite中进行模糊测试：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you can assign yourself to other organizations, you will likely be able to
    gain unauthorized access to the other group’s resources. To perform such an attack,
    you’ll need to know the names or IDs used to identify the companies in requests.
    If the `"org"` value was a number, you could brute-force its value, like when
    testing for BOLA, to see how the API responds.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你可以将自己分配到其他组织，你可能能够未经授权访问其他团队的资源。要执行这样的攻击，你需要知道在请求中用于标识公司的名称或 ID。如果 `"org"`
    值是一个数字，你可以像测试 BOLA 时那样，暴力破解其值，看看 API 如何响应。
- en: Do not limit your search for mass assignment vulnerabilities to the account
    registration process. Other API functions are capable of being vulnerable. Test
    other endpoints used for resetting passwords; updating account, group, or company
    profiles; and any other plays where you may be able to assign yourself additional
    access.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 不要将大规模赋值漏洞的搜索仅限于账户注册过程。其他 API 功能也可能存在漏洞。测试其他用于重置密码的端点；更新账户、组或公司资料的端点；以及任何其他你可能能够分配额外权限的操作。
- en: Finding Mass Assignment Variables
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找大规模赋值变量
- en: The challenge with mass assignment attacks is that there is very little consistency
    in the variables used between APIs. That being said, if the API provider has some
    method for, say, designating accounts as administrator, you can be sure that they
    also have some convention for creating or updating variables to make a user an
    administrator. Fuzzing can speed up your search for mass assignment vulnerabilities,
    but unless you understand your target’s variables, this technique can be a shot
    in the dark.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 大规模赋值攻击的挑战在于，不同的 API 中使用的变量之间缺乏一致性。话虽如此，如果 API 提供商有某种方法来指定账户为管理员，比如说，你可以确信他们也有某种约定来创建或更新变量以将用户设置为管理员。模糊测试可以加快你寻找大规模赋值漏洞的速度，但除非你了解目标的变量，否则这种技术可能会是一次盲目尝试。
- en: Finding Variables in Documentation
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在文档中查找变量
- en: Begin by looking for sensitive variables in the API documentation, especially
    in sections focused on privileged actions. In particular, the documentation can
    give you a good indication of what parameters are included within JSON objects.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 API 文档中查找敏感变量，特别是在涉及特权操作的部分。特别是，文档可以很好地指示哪些参数包含在 JSON 对象中。
- en: 'For example, you might search for how a low-privileged user is created compared
    to how an administrator account is created. Submitting a request to create a standard
    user account might look something like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可能会搜索低权限用户与管理员账户的创建方式的不同。提交请求以创建标准用户账户可能看起来像这样：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Creating an admin account might look something like the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 创建管理员账户可能看起来像以下内容：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Notice that the admin request is submitted to an admin endpoint, uses an admin
    token, and includes the parameter `"admin": true`. There are many fields related
    to admin account creation, but if the application doesn’t handle the requests
    properly, we might be able to make an administrator account by simply adding the
    parameter `"admin"=true` to our user account request, as shown here:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '注意，管理员请求被提交到管理员端点，使用管理员令牌，并且包含参数 `"admin": true`。有许多与管理员账户创建相关的字段，但如果应用程序没有正确处理这些请求，我们可能只需通过将参数
    `"admin"=true` 添加到我们的用户账户请求中，就能创建一个管理员账户，如下所示：'
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Fuzzing Unknown Variables
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模糊测试未知变量
- en: 'Another common scenario is that you’ll perform an action in a web application,
    intercept the request, and locate several bonus headers or parameters within it,
    like so:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的场景是，你在 Web 应用程序中执行某个操作，拦截请求，并在其中找到几个额外的头部或参数，例如：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Parameters used in one part of an endpoint might be useful for exploiting mass
    assignment using a different endpoint. When you don’t understand the purpose of
    a certain parameter, it’s time to put on your lab coat and experiment. Try fuzzing
    by setting `uam` to zero, `mfa` to false, and `account` to every number between
    0 and 101, and then watch how the provider responds. Better yet, try a variety
    of inputs, such as those discussed in the previous chapter. Build up your wordlist
    with the parameters you collect from an endpoint and then flex your fuzzing skills
    by submitting requests with those parameters included. Account creation is a great
    place to do this, but don’t limit yourself to it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个端点中使用的参数可能会对通过另一个端点进行大规模赋值攻击有用。当你不理解某个参数的用途时，就是该穿上实验外套进行试验的时候了。尝试通过将`uam`设为零，`mfa`设为false，以及将`account`设置为0到101之间的每个数字进行模糊测试，然后观察服务提供商的响应。更好的是，尝试使用前一章讨论的各种输入。通过收集端点中的参数构建词汇表，然后通过提交包含这些参数的请求来锻炼你的模糊测试技巧。账户创建是进行此操作的一个好地方，但不要仅限于此。
- en: Blind Mass Assignment Attacks
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 盲目大规模赋值攻击
- en: 'If you cannot find variable names in the locations discussed, you could perform
    a blind mass assignment attack. In such an attack, you’ll attempt to brute-force
    possible variable names through fuzzing. Send a single request with many possible
    variables, like the following, and see what sticks:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在上述讨论的位置找不到变量名，你可以执行盲目大规模赋值攻击。在这种攻击中，你会尝试通过模糊测试来暴力破解可能的变量名。发送一个包含多个可能变量的单一请求，例如以下内容，并观察哪些能成功：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If an API is vulnerable, it might ignore the irrelevant variables and accept
    the variable that matches the expected name and format.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个API存在漏洞，它可能会忽略无关的变量，只接受与预期名称和格式匹配的变量。
- en: Automating Mass Assignment Attacks with Arjun and Burp Suite Intruder
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Arjun和Burp Suite Intruder自动化大规模赋值攻击
- en: 'As with many other API attacks, you can discover mass assignment by manually
    altering an API request or by using a tool such as Arjun for parameter fuzzing.
    As you can see in the following Arjun request, we’ve included an authorization
    token with the `–headers` option, specified JSON as the format for the request
    body, and identified the exact attack spot that Arjun should test with `$arjun$`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多其他API攻击一样，你可以通过手动修改API请求或使用像Arjun这样的工具进行参数模糊测试来发现大规模赋值漏洞。正如你在以下Arjun请求中看到的，我们使用`–headers`选项包含了授权令牌，指定了JSON作为请求体的格式，并标明了Arjun应该测试的确切攻击点，即`$arjun$`：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As a result, Arjun will send a series of requests with various parameters from
    a wordlist to the target host. Arjun will then narrow down likely parameters based
    on deviations of response lengths and response codes and provide you with a list
    of valid parameters.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，Arjun将向目标主机发送一系列带有各种参数的请求，这些参数来自词汇表。然后，Arjun将根据响应长度和响应代码的偏差缩小可能的参数范围，并为你提供一个有效参数的列表。
- en: 'Remember that if you run into issues with rate limiting, you can use the Arjun
    `—stable` option to slow down the scans. This sample scan completed and discovered
    three valid parameters: `user`, `pass`, and `admin`.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果你遇到速率限制问题，可以使用Arjun的`—stable`选项来减慢扫描速度。这个示例扫描已完成并发现了三个有效参数：`user`、`pass`和`admin`。
- en: 'Many APIs prevent you from sending too many parameters in a single request.
    As a result, you might receive one of several HTTP status codes in the 400 range,
    such as 400 Bad Request, 401 Unauthorized, or 413 Payload Too Large. In that case,
    instead of sending a single large request, you could cycle through possible mass
    assignment variables over many requests. This can be done by setting up the request
    in Burp Suite’s Intruder with the possible mass assignment values as the payload,
    like so:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 许多API会阻止你在单个请求中发送过多的参数。因此，你可能会收到一些HTTP状态码，通常位于400范围内，例如400 Bad Request、401 Unauthorized或413
    Payload Too Large。在这种情况下，你可以选择通过多个请求来遍历可能的大规模赋值变量，而不是发送一个大的请求。这可以通过在Burp Suite的Intruder中设置请求，将可能的大规模赋值值作为负载来完成，像这样：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Combining BFLA and Mass Assignment
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结合BFLA和大规模赋值
- en: 'If you’ve discovered a BFLA vulnerability that allows you to update other users’
    accounts, try combining this ability with a mass assignment attack. For example,
    let’s say a user named Ash has discovered a BFLA vulnerability, but the vulnerability
    only allows him to edit basic profile information such as usernames, addresses,
    cities, and regions:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现了一个BFLA漏洞，允许你更新其他用户的账户信息，可以尝试将这个能力与大规模赋值攻击结合起来。例如，假设一个名叫Ash的用户发现了一个BFLA漏洞，但这个漏洞只允许他编辑一些基本的个人资料信息，如用户名、地址、城市和地区：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: At this point, Ash could deface other user accounts, but not much more. However,
    performing a mass assignment attack with this request could make the BFLA finding
    much more significant. Let’s say that Ash analyzes other GET requests in the API
    and notices that other requests include parameters for email and multifactor authentication
    (MFA) settings. Ash knows that there is another user, named Brock, whose account
    he would like to access.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一点，Ash 可以篡改其他用户账户，但也仅此而已。然而，如果通过此请求执行大规模赋值攻击，可能会使 BFLA 漏洞变得更加严重。假设 Ash 分析了
    API 中其他的 GET 请求，并注意到其他请求包含了电子邮件和多因素认证（MFA）设置的参数。Ash 知道有另一个用户，名叫 Brock，他想访问该账户。
- en: 'Ash could disable Brock’s MFA settings, making it easier to gain access to
    Brock’s account. Moreover, Ash could replace Brock’s email with his own. If Ash
    were to send the following request and get a successful response, he could gain
    access to Brock’s account:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Ash 可以禁用 Brock 的 MFA 设置，从而更容易访问 Brock 的账户。此外，Ash 还可以将 Brock 的电子邮件替换为自己的。如果 Ash
    发送以下请求并获得成功响应，他就能访问 Brock 的账户：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Since Ash does not know Brock’s current password, Ash should leverage the API’s
    process for performing a password reset, which would likely be a PUT or POST request
    sent to */api/v1/account/reset*. The password reset process would then send a
    temporary password to Ash’s email. With MFA disabled, Ash would be able to use
    the temporary password to gain full access to Brock’s account.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Ash 不知道 Brock 当前的密码，Ash 应该利用 API 的密码重置流程，这通常是一个 PUT 或 POST 请求发送到 */api/v1/account/reset*。密码重置过程会将临时密码发送到
    Ash 的电子邮件。禁用 MFA 后，Ash 可以使用该临时密码完全访问 Brock 的账户。
- en: Always remember to think as an adversary would and take advantage of every opportunity.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 时刻记住，要像对手一样思考，抓住每一个机会。
- en: Summary
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: If you encounter a request that accepts client input for sensitive variables
    and allows you to update those variables, you have a serious finding on your hands.
    As with other API attacks, sometimes a vulnerability may seem minor until you’ve
    combined it with other interesting findings. Finding a mass assignment vulnerability
    is often just the tip of the iceberg. If this vulnerability is present, chances
    are that other vulnerabilities are present.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到一个请求，它接受客户端输入的敏感变量，并允许你更新这些变量，那么你就发现了一个严重的漏洞。像其他 API 攻击一样，某些漏洞看似微不足道，直到你将它与其他有趣的发现结合起来。发现大规模赋值漏洞往往只是冰山一角。如果存在这个漏洞，其他漏洞也很可能会随之而来。
- en: 'Lab #8: Changing the Price of Items in an Online Store'
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '实验 #8：在在线商店中更改商品价格'
- en: 'Armed with our new mass assignment attack techniques, let’s return to crAPI.
    Consider what requests accept client input and how we could leverage a rogue variable
    to compromise the API. Several of the requests in your crAPI Postman collection
    appear to allow client input:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 配备我们新的大规模赋值攻击技术后，让我们回到 crAPI。考虑哪些请求接受客户端输入，以及我们如何利用恶意变量来妥协 API。在你的 crAPI Postman
    集合中，似乎有几个请求允许客户端输入：
- en: '`POST /identity/api/auth/signup`'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`POST /identity/api/auth/signup`'
- en: '`POST /workshop/api/shop/orders`'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`POST /workshop/api/shop/orders`'
- en: '`POST /workshop/api/merchant/contact_mechanic`'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`POST /workshop/api/merchant/contact_mechanic`'
- en: It’s worth testing each of these once we’ve decided what variable to add to
    them.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们决定添加哪个变量，值得对这些请求进行一次测试。
- en: We can locate a sensitive variable in the GET request to the */workshop/api/shop/products*
    endpoint, which is responsible for populating the crAPI storefront with products.
    Using Repeater, notice that the GET request loads a JSON variable called `"credit"`
    (see [Figure 11-1](#figure11-1)). That seems like an interesting variable to manipulate.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 GET 请求到 */workshop/api/shop/products* 端点时定位到一个敏感变量，该端点负责将产品加载到 crAPI 店面。使用
    Repeater 工具，注意到 GET 请求加载了一个名为 `"credit"` 的 JSON 变量（见 [图 11-1](#figure11-1)）。这个变量似乎是一个有趣的操控对象。
- en: '![screenshot of burp suite’s repeater that shows the request to get /workshop/api/shop/products.
    the response loads a json variable “credit”:50.0](image_fi/502444c11/F11001.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![Burp Suite Repeater 截图，显示请求获取 /workshop/api/shop/products，响应加载了一个名为 "credit":50.0
    的 JSON 变量](image_fi/502444c11/F11001.png)'
- en: 'Figure 11-1: Using Burp Suite Repeater to analyze the */workshop/api/shop/products*
    endpoint'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-1：使用 Burp Suite Repeater 分析 */workshop/api/shop/products* 端点
- en: 'This request already provides us with a potential variable to test (`credit`),
    but we can’t actually change the credit value using a GET request. Let’s run a
    quick Intruder scan to see if we can leverage any other request methods with this
    endpoint. Right-click the request in Repeater and send it to Intruder. Once in
    Intruder, set the attack position to the request method:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个请求已经为我们提供了一个潜在的变量来进行测试（`credit`），但是我们实际上无法通过 GET 请求更改信用值。让我们快速运行一次 Intruder
    扫描，看看是否可以利用其他请求方法与这个端点交互。右键点击 Repeater 中的请求并将其发送到 Intruder。一旦进入 Intruder，将攻击位置设置为请求方法：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let’s update the payloads with the request methods we want to test for: PUT,
    POST, HEAD, DELETE, CONNECT, PATCH, and OPTIONS (see [Figure 11-2](#figure11-2)).'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新有效载荷，使用我们想要测试的请求方法：PUT、POST、HEAD、DELETE、CONNECT、PATCH 和 OPTIONS（见 [图 11-2](#figure11-2)）。
- en: Start the attack and review the results. You’ll notice that crAPI will respond
    to restricted methods with a 405 Method Not Allowed status code, which means the
    400 Bad Request response we received in response to the POST request is pretty
    interesting (see [Figure 11-3](#figure11-3)). This 400 Bad Request likely indicates
    that crAPI is expecting a different payload to be included in the POST request.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 启动攻击并查看结果。你会注意到，crAPI 会对受限方法响应 405 Method Not Allowed 状态码，这意味着我们在收到的 POST 请求响应中的
    400 Bad Request 非常有趣（见 [图 11-3](#figure11-3)）。这个 400 Bad Request 很可能表示 crAPI 期望在
    POST 请求中包含不同的有效载荷。
- en: '![screenshot of burp suite’s payloads window that includes the payload options
    put, post, head, delete, connect, patch, and options and has space to enter new
    items](image_fi/502444c11/F11002.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![Burp Suite 有效载荷窗口的截图，包含 put、post、head、delete、connect、patch 和 options 等有效载荷选项，并有空间输入新项目](image_fi/502444c11/F11002.png)'
- en: 'Figure 11-2: Burp Suite Intruder request methods with payloads'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-2：Burp Suite Intruder 请求方法与有效载荷
- en: '![screenshot of burp suite’s intruder results that shows 200, 405, and 400
    statuses for various payloads](image_fi/502444c11/F11003.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![Burp Suite Intruder 结果的截图，显示不同有效载荷的 200、405 和 400 状态码](image_fi/502444c11/F11003.png)'
- en: 'Figure 11-3: Burp Suite Intruder results'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-3：Burp Suite Intruder 结果
- en: 'The response tells us that we’ve omitted certain required fields from the POST
    request. The best part is the API tells us the required parameters. If we think
    it through, we can guess that the request is likely meant for a crAPI administrator
    to use in order to update the crAPI store. However, since this request is not
    restricted to administrators, we have likely stumbled across a combined mass assignment
    and BFLA vulnerability. Perhaps we can create a new item in the store and update
    our credit at the same time:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 响应告诉我们在 POST 请求中遗漏了一些必需字段。最棒的部分是 API 告诉我们需要哪些参数。如果我们仔细想一想，可以推测这个请求可能是为 crAPI
    管理员设计的，用于更新 crAPI 商店。然而，由于这个请求并不限制管理员使用，我们可能已经发现了一个组合型的批量赋值（Mass Assignment）和
    BFLA 漏洞。或许我们可以在商店中创建一个新商品，并同时更新我们的信用：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This request succeeds with an HTTP 200 OK response! If we visit the crAPI store
    in a browser, we’ll notice that we successfully created a new item in the store
    with a new price of 25, but, unfortunately, our credit remains unaffected. If
    we purchase this item, we’ll notice that it automatically subtracts that amount
    from our credit, as any regular store transaction should.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个请求成功了，返回 HTTP 200 OK 响应！如果我们在浏览器中访问 crAPI 商店，我们会发现我们成功地在商店中创建了一个新的商品，价格为 25，但不幸的是，我们的信用没有受到影响。如果我们购买这个商品，我们会注意到它会自动从我们的信用中扣除该金额，就像任何常规商店交易一样。
- en: 'Now it’s time to put on our adversarial hat and think through this business
    logic. As the consumer of crAPI, we shouldn’t be able to add products to the store
    or adjust prices . . . but we can. If the developers programmed the API under
    the assumption that only trustworthy users would add products to the crAPI store,
    what could we possibly do to exploit this situation? We could give ourselves an
    extreme discount on a product—maybe a deal so good that the price is actually
    a negative number:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候戴上我们的对抗者帽子，思考一下这个业务逻辑了。作为 crAPI 的消费者，我们不应该能够向商店添加产品或调整价格……但我们可以。如果开发者在编程时假设只有可信的用户才能向
    crAPI 商店添加产品，那么我们可能做什么来利用这种情况呢？我们可以给自己在某个产品上打个极大的折扣——可能优惠到价格实际上是负数：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The item `MassAssignment SPECIAL` is one of a kind: if you purchase it, the
    store will pay you 5,000 credits. Sure enough, this request receives an HTTP 200
    OK response. As you can see in [Figure 11-4](#figure11-4), we have successfully
    added the item to the crAPI store.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 商品 `MassAssignment SPECIAL` 是独一无二的：如果你购买它，商店将支付你5,000个积分。果然，这个请求收到了HTTP 200
    OK响应。如图 [11-4](#figure11-4) 所示，我们已成功将此商品添加到crAPI商店。
- en: '![screenshot of crapi’s store that shows an item called massassignment special
    for $-5000.00](image_fi/502444c11/F11004.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![crapi商店的截图，显示一件名为MassAssignment Special的商品，售价为 $-5000.00](image_fi/502444c11/F11004.png)'
- en: 'Figure 11-4: The MassAssignment SPECIAL on crAPI'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-4：crAPI 上的批量赋值特价
- en: By purchasing this special deal, we add an extra $5,000 to our available balance
    (see [Figure 11-5](#figure11-5)).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过购买这个特价商品，我们的可用余额增加了5,000美元（参见 [图 11-5](#figure11-5)）。
- en: '![screenshot of crapi’s shop that shows the available balance as $5030](image_fi/502444c11/F11005.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![crapi商店的截图，显示可用余额为 $5030](image_fi/502444c11/F11005.png)'
- en: 'Figure 11-5: Available balance on crAPI'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-5：crAPI上的可用余额
- en: As you can see, our mass assignment exploit would have severe consequences for
    any business with this vulnerability. I hope your bounty for such a finding greatly
    outweighs the credit you could add to your account! In the next chapter, we’ll
    begin our journey through the wide variety of potential injection attacks we can
    leverage against APIs.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们的批量赋值漏洞攻击将对任何存在此漏洞的企业造成严重后果。我希望你为发现此漏洞所获得的赏金远远超过你可以加到账户上的信用！在下一章中，我们将开始探索可以利用于API的各种潜在注入攻击。
