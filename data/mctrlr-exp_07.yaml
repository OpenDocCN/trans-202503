- en: '**7 RF430 Backdoors**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**7 RF430 后门**'
- en: It’s not uncommon to find that an unlisted chip is actually a commercially available
    chip with a custom ROM. Such is the RF430TAL152, which is pretty much an RF430FRL152
    with a mask ROM that implements a blood glucose monitor in sensors sold under
    the Freestyle Libre brand.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 发现一个未列出的芯片实际上是一个带有自定义 ROM 的商用芯片并不罕见。RF430TAL152 就是这样的芯片，它基本上是一个 RF430FRL152，具有一个掩模
    ROM，该 ROM 实现了在 Freestyle Libre 品牌下销售的血糖监测传感器。
- en: In this chapter, we’ll discuss a backdoor in the RF430TAL152, first documented
    in Goodspeed and Apvrille (2019). We’ll begin with the freely available FRL152
    variant of the chip, then explore the TAL152 variant, its custom commands, and
    a backdoor.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论 RF430TAL152 中的一个后门，这一后门最早由 Goodspeed 和 Apvrille（2019）记录。我们将从公开的 FRL152
    变种芯片开始，然后探索 TAL152 变种、其自定义命令以及一个后门。
- en: '**RF430FRL152, Commercial Variant**'
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**RF430FRL152，商用变种**'
- en: Both the TAL152 and the FRL152 have sensor applications in 7kB of masked ROM
    at `0x4400`. Neither of the chips contains flash memory; instead, they use a new
    memory technology called ferroelectric RAM, FRAM for short. Like flash memory,
    it’s non-volatile and the contents survive without power. Like SRAM, it’s very
    power efficient to write this memory.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: TAL152 和 FRL152 都在 `0x4400` 处具有 7KB 的掩模 ROM，用于传感器应用。这两款芯片都不包含闪存；相反，它们使用一种新型的存储技术，称为铁电
    RAM（简称 FRAM）。像闪存一样，它是非易失性的，内容在没有电源的情况下依然会保存。像 SRAM 一样，它在写入时非常省电。
- en: Minor patches against the ROM are loaded into two kilobytes of FRAM at `0xF840`.
    A small second region of FRAM exists at `0x1A00`, holding a serial number and
    calibration values.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 针对 ROM 的小补丁被加载到 `0xF840` 处的 2KB FRAM 中。另有一个小的 FRAM 区域位于 `0x1A00`，存储着序列号和校准值。
- en: FRAM is a weird memory, so let’s quickly review its properties. At the lowest
    levels, writes take very little power and most bits survive for decades without
    power. Like DRAM and core memory, reads are destructive.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: FRAM 是一种奇特的存储器，让我们快速回顾一下它的特性。在最低层级，写入操作需要的功率非常小，大多数位在没有电源的情况下能持续几十年。像 DRAM 和磁芯存储一样，读取操作是破坏性的。
- en: '![Image](../images/f0078-01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0078-01.jpg)'
- en: 'Figure 7.1: RF430TAL152 Surface'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1：RF430TAL152 表面
- en: '![Image](../images/f0079-01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0079-01.jpg)'
- en: 'Figure 7.2: RF430FRL152 Delayered'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2：RF430FRL152 去层化
- en: Destructive reads and the occasional bit error would be a deal-breaker, so a
    memory controller corrects this with automated write-backs, error correction,
    and caching. At the higher levels, a programmer can pretend that it’s RAM, and
    the only contradicting evidence would be that sometimes reads take a little more
    time and a little more power than writes do. Isn’t that sweet?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 破坏性读取和偶尔的位错误会导致致命缺陷，因此内存控制器通过自动写回、错误更正和缓存来纠正这些问题。在更高层级，程序员可以假装它是 RAM，唯一与之相矛盾的证据就是有时读取比写入稍微需要更多的时间和功率。不是很有趣吗？
- en: The chip has a bit more SRAM than you might expect, 4kB of it at `0x4400`. SRAM
    is executable on the MSP430 architecture, and it can be mapped in place of half
    the ROM in order to develop custom ROMs. A developer could also store normal code
    in SRAM, at the risk of it being obliterated by a power failure.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 该芯片拥有比你预期的更多 SRAM，其中 `0x4400` 位置有 4KB 的 SRAM。SRAM 在 MSP430 架构上是可执行的，它可以映射到 ROM
    的一半位置，用于开发自定义 ROM。开发人员还可以将普通代码存储在 SRAM 中，但这样做的风险是，电源故障时这些代码可能会被完全删除。
- en: Because changes to ROM require expensive mask revisions and fresh manufacturing,
    both the commercial and the custom ROM support patches in FRAM. These patches
    hook entries in a table of function pointers, redirecting calls from the ROM version
    of a function to its replacement in FRAM.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 ROM 的修改需要昂贵的掩模修订和重新制造，所以商业版和自定义 ROM 都支持在 FRAM 中打补丁。这些补丁会挂钩一个函数指针表中的条目，将来自
    ROM 版本函数的调用重定向到 FRAM 中的替代函数。
- en: As the FRAM is used not just for code but also for data, it’s sort of a window
    into the remaining address space of the chip, and the first step to a full dump.
    You’ll see this later in the chapter, when we get around to exploiting a locked
    TAL152 chip.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 FRAM 不仅用于代码，还用于数据，它可以看作是芯片剩余地址空间的一个窗口，也是进行完整数据转储的第一步。稍后在本章中，当我们开始利用一个被锁定的
    TAL152 芯片时，你将看到这一点。
- en: The FRL152 can be read and written by JTAG at the frustratingly modern voltage
    of 1.5V. Texas Instruments helpfully sells a development kit, part number RF430FRL152HEVM,
    that includes level conversion to the 3.3V supported by their debugger tool. This
    allows the ROM to be extracted and disassembled from the commercial variant of
    the chip.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: FRL152 可以通过 JTAG 以令人沮丧的现代电压 1.5V 进行读取和写入。德州仪器（Texas Instruments）提供了一个开发套件，零件号
    RF430FRL152HEVM，其中包括电平转换，支持其调试工具的 3.3V 电压。这使得可以从芯片的商业版本中提取 ROM 并进行反汇编。
- en: The RF430TAL152 in Freestyle Libre glucose sensors has a different ROM, and
    JTAG connections fail, but it speaks the same NFC Type V protocol, standardized
    as ISO 15693\. This protocol is well supported by Android, and poorly supported
    by USB readers on Linux, so it’s in the awkward position of being more easily
    exploited by a cellphone app than by a laptop!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Freestyle Libre 血糖传感器中的 RF430TAL152 采用不同的 ROM，JTAG 连接无法使用，但它支持相同的 NFC Type V
    协议，标准化为 ISO 15693。该协议在 Android 上得到了良好的支持，但在 Linux 上的 USB 读取器支持较差，因此它处于一个尴尬的位置：相比笔记本电脑，更容易通过手机应用程序被利用！
- en: '![Image](../images/f0081-01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0081-01.jpg)'
- en: 'Figure 7.3: RF430FRL152 Memory Map'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3：RF430FRL152 内存映射
- en: '![Image](../images/f0081-02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0081-02.jpg)'
- en: 'Figure 7.4: RF430FRL152 Carrier Board'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4：RF430FRL152 承载板
- en: '**NFC-V from Android**'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**来自 Android 的 NFC-V**'
- en: Let’s take a brief interruption to discuss how NFC tags work in Android and
    how to write a tool to communicate wirelessly with the RF430.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们暂停一下，讨论 NFC 标签在 Android 中是如何工作的，以及如何编写工具与 RF430 进行无线通信。
- en: In Android, NFC Type V tags are accessed through the class `android.nfc.tech.NfcV`,
    whose `transceive()` function sends a byte array to the tag and returns the result.
    As tags have such wildly varying properties as their command sets, block sizes
    and addressing modes, these raw commands are used rather than higher-level wrappers.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 中，NFC Type V 标签通过类 `android.nfc.tech.NfcV` 进行访问，其中的 `transceive()`
    函数将字节数组发送到标签并返回结果。由于标签的命令集、块大小和寻址模式等属性差异很大，因此使用这些原始命令而不是更高层的封装函数。
- en: NFC-V transactions begin with an option byte, which is usually `02`. Next comes
    a command byte and the optional command parameters. An explicit address can be
    stuck in the middle if indicated by the option byte. Commands above `A0` require
    the manufacturer’s number to follow, which for TI is `07`. See [Figure 7.5](ch07.xhtml#ch7fig5)
    for some example commands.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: NFC-V 交易以一个选项字节开始，通常是 `02`。接下来是一个命令字节和可选的命令参数。如果选项字节指示，可以在中间插入显式地址。命令字节大于 `A0`
    时，需要跟随厂商编号，对于 TI 来说是 `07`。参见 [图 7.5](ch07.xhtml#ch7fig5) 获取一些示例命令。
- en: You can try out the low-level commands yourself in the NFC Tools app, whose
    Other/Advanced tab accepts raw commands after a scary disclaimer. Just set the
    I/O Class to `NfcV` and then send the following examples, before using them to
    implement our own high level functions for the chip.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 NFC Tools 应用中自己尝试低级命令，应用的 Other/Advanced 标签页在显示警告声明后接受原始命令。只需将 I/O 类设置为
    `NfcV`，然后发送以下示例命令，再使用它们来实现我们自己为芯片编写的高级功能。
- en: We’ll get into more commands later, but for now you should pay attention to
    the general format. Here, `20` is the standard command to read a block from an
    8-bit block address and `C0` is the secret vendor command to read a block from
    a 16-bit block address. The first byte of each reply is zero for success, non-zero
    for failure.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会介绍更多命令，但现在你需要注意一般格式。在这里，`20` 是用于从 8 位块地址读取块的标准命令，而 `C0` 是用于从 16 位块地址读取块的秘密厂商命令。每个回复的第一个字节为零表示成功，非零表示失败。
- en: '![Image](../images/f0082-01.jpg)![Image](../images/f0083-01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0082-01.jpg)![Image](../images/f0083-01.jpg)'
- en: 'Figure 7.5: NFC-V Command Verbs'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5：NFC-V 命令动词
- en: '![Image](../images/f0083-02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0083-02.jpg)'
- en: 'Figure 7.6: Example TAL152 Commands'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6：TAL152 示例命令
- en: The `C0` (read) command and matching `C1` (write) command accept a 16-bit address,
    but they are still confined to a subset of FRAM and SRAM. In the next section,
    we’ll see how to write some shellcode into the FRL152 and then execute it as a
    way to implement a truly arbitrary read.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`C0`（读取）命令和匹配的 `C1`（写入）命令接受 16 位地址，但它们仍然局限于 FRAM 和 SRAM 的子集。在下一部分中，我们将看到如何将一些
    shellcode 写入 FRL152，并执行它以实现真正的任意读取。'
- en: '**Shellcode on the FRL152**'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**FRL152 上的 Shellcode**'
- en: FRAM on the FRL152 might contain a table of command handlers. If this table
    is found, its entries are copied onto an array of function pointers near the beginning
    of SRAM. Further, the `C0` and `C1` commands allow us to freely read and write
    SRAM, so there’s plenty of control for remote code execution on the chip.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: FRL152 上的 FRAM 可能包含一个命令处理程序表。如果找到该表，其条目将被复制到接近 SRAM 开始部分的函数指针数组中。此外，`C0` 和 `C1`
    命令允许我们自由读取和写入 SRAM，因此可以为远程代码执行提供充分的控制。
- en: While we could overwrite the call stack, it is much easier to overwrite the
    function pointer table in early SRAM with a pointer to our function, because we
    can only perform writes of 4 or 8 bytes at a time.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以覆盖调用堆栈，但覆盖早期 SRAM 中的函数指针表，用指向我们函数的指针要容易得多，因为我们一次只能写入 4 或 8 字节。
- en: There are plenty of functions to choose from, and an ideal hook would be one
    that won’t be missed by normal functions. We’d also prefer to have continuation
    wherever possible, so that executing the code doesn’t crash our target.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多函数可供选择，一个理想的钩子是不会被正常函数忽略的。我们还希望尽可能有续接功能，以便执行代码时不会使目标崩溃。
- en: The function pointer we’ll overwrite is at `0x1C5C` in SRAM, pointing to `rom_rf13_senderror()`
    in ROM at `0x4FF6`. For proper continuation, the shellcode must write two bytes
    to the `RF13MTXF` peripheral and then return. Without these bytes, the protocol
    will be violated and a Java exception will be triggered. To unhook, we just write
    `0x4FF6` to `0x1C5C`, restoring the original handler.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要覆盖的函数指针位于 SRAM 中的 `0x1C5C`，指向 ROM 中 `0x4FF6` 处的 `rom_rf13_senderror()`。为了正确的续接，Shellcode
    必须向 `RF13MTXF` 外设写入两个字节，然后返回。如果没有这两个字节，协议将被违反并触发 Java 异常。要取消挂钩，只需将 `0x4FF6` 写入
    `0x1C5C`，恢复原始处理程序。
- en: '[Figure 7.7](ch07.xhtml#ch7fig7) shows my Java method for executing shellcode
    at an arbitrary address and returning two bytes to the caller. These bytes happen
    to be necessary for continuation, but it’s always nice to get a little feedback
    from an exploit.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 7.7](ch07.xhtml#ch7fig7) 展示了我用 Java 编写的方法，用于在任意地址执行 Shellcode 并将两个字节返回给调用者。这两个字节恰好是续接所必需的，但从漏洞利用中获得一些反馈总是不错的。'
- en: '![Image](../images/f0085-01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0085-01.jpg)'
- en: 'Figure 7.7: Executing Shellcode in the RF430FRL152'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7：在 RF430FRL152 中执行 Shellcode
- en: '**RF430TAL152, Medical Variant**'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**RF430TAL152，医疗版**'
- en: The TAL152 glucose sensor is very similar in layout and appearance to the off-the-shelf
    FRL152, with the difference being the contents of mask ROM and the JTAG configuration.
    In this section, we’ll trace the long road from first examining this chip to finally
    dumping its ROM and then writing custom firmware to FRAM.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: TAL152 葡萄糖传感器在布局和外观上与现成的 FRL152 非常相似，唯一的不同是掩模 ROM 的内容和 JTAG 配置。在本节中，我们将追溯从首次检查该芯片到最终转储其
    ROM 并将自定义固件写入 FRAM 的漫长过程。
- en: When first experimenting with the chip, we find that there is one extra block
    of FRAM exposed by NFC. Every last page is write protected, and we cannot change
    any of them with the standard write command, `21`. The `C0` and `C1` vendor commands
    from the FRL152 do not exist here, so we also lack a convenient way to mess around
    with out-of-bounds memory.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在首次实验该芯片时，我们发现 NFC 曝露了一个额外的 FRAM 块。每一页的最后一页都被写保护，我们无法通过标准写命令 `21` 修改它们。FRL152
    的 `C0` 和 `C1` 厂商命令在这里不存在，因此我们也没有一个方便的方法来处理越界内存。
- en: But all is not lost! There is a table of function pointers on the final page,
    and the value of the reset vector at the very end of memory tells us that this
    ROM is different from the FRL152, so we know that the two devices have different
    software in their ROMs.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 但一切并未失去！在最后一页有一个函数指针表，内存最后的复位向量值告诉我们，这个 ROM 与 FRL152 的不同，因此我们知道这两个设备的 ROM 中的软件是不同的。
- en: This table is in the portion of memory that is readable by NFC, so we can use
    a handy smartphone to read it. It is, however, write protected, so we’re not yet
    able to write patches to the table. We’re sadly unable to read the lower portions
    of FRAM, or any of ROM or SRAM at this point.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表位于 NFC 可读的内存部分，因此我们可以使用方便的智能手机读取它。然而，它是写保护的，所以我们还无法写入补丁到该表。目前我们无法读取 FRAM
    的较低部分，或任何 ROM 或 SRAM。
- en: We see the table from [Figure 7.9](ch07.xhtml#ch7fig9), which begins at `0xFFCE`
    with the magic word `0xABAB` and then grows downward to the same word at a lower
    address, `0xFFB8`.^([1](footnotes.xhtml#ch7fn1)) Each entry in this table is a
    custom vendor command, and we see that much like the `C0` and `C1` commands that
    have been so handy on the FRL152, the TAL152 has commands `A0`, `A1`, `A2`, `A3`,
    and `A4`. The `A1` and `A3` handlers are in FRAM, where we can read at least part
    of their code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到[图 7.9](ch07.xhtml#ch7fig9)中的表格，它从`0xFFCE`开始，魔术字是`0xABAB`，然后向下扩展到较低地址的相同字`0xFFB8`。^([1](footnotes.xhtml#ch7fn1))
    该表中的每一项都是自定义的厂商命令，我们看到，类似于在FRL152中非常实用的`C0`和`C1`命令，TAL152也有`A0`、`A1`、`A2`、`A3`和`A4`命令。`A1`和`A3`的处理程序位于FRAM中，我们至少可以读取它们的部分代码。
- en: '![Image](../images/f0087-01.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0087-01.jpg)'
- en: 'Figure 7.8: RF430FRL152 FRAM Command Table'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8：RF430FRL152 FRAM命令表
- en: '![Image](../images/f0087-02.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0087-02.jpg)'
- en: 'Figure 7.9: RF430TAL152 FRAM Command Table'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.9：RF430TAL152 FRAM命令表
- en: The table ends early, of course, with `E0`, `E1`, and `E2` being disabled by
    `E0`’s command number having been overwritten by the table end marker. These commands
    were available at some point in the manufacturing process, and we can read their
    command handlers from FRAM, but we cannot execute them.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，表格很早就结束了，`E0`、`E1`和`E2`被禁用，因为`E0`的命令号已被表格结束标记覆盖。这些命令在制造过程中的某个时刻是可用的，我们可以从FRAM中读取它们的命令处理程序，但无法执行它们。
- en: Calling these functions is a bit disappointing. `A1` returns the device status
    of some sort, but the other `Ax` commands don’t even grace us with an error message
    in reply. The reason for this is hard to see from the partial assembly, but we
    later learned that they require a safety password.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 调用这些函数有些令人失望。`A1`返回某种设备状态，但其他`Ax`命令甚至没有给我们返回错误信息。部分汇编代码难以看出原因，但我们后来得知，它们需要一个安全密码。
- en: Not yet being able to run the `A3` command, we read its disassembly. The function
    begins by calling another function at `0x1C20` and then proceeds to read a raw
    address and length before sending the requested number of 16-bit words out the
    RF13M peripheral to the reader.^([2](footnotes.xhtml#ch7fn2)) If we could just
    call this command, we could dump the ROM and reverse engineer the behavior of
    the other commands!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在尚未能够运行`A3`命令时，我们读取了它的反汇编代码。该函数首先调用`0x1C20`处的另一个函数，然后读取原始地址和长度，接着将请求的数量的16位字发送到RF13M外设到读卡器。^([2](footnotes.xhtml#ch7fn2))
    如果我们能调用这个命令，就能转储ROM并逆向工程其他命令的行为！
- en: '**Sniffing the Readers**'
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**嗅探读卡器**'
- en: To get the password without already having a firmware dump, we had to sniff
    a legitimate reader’s attempts to call any `Ax` command other than `A1`, so that
    we could learn the password and then use `A3` to dump raw memory. We found this
    both by tapping the SPI bus of the manufacturer’s dedicated hardware reader and
    separately by observing the vendor’s Android app in Frida.^([3](footnotes.xhtml#ch7fn3))
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在没有固件转储的情况下获得密码，我们必须嗅探合法读卡器尝试调用除`A1`以外的任何`Ax`命令，以便我们能够了解密码，并使用`A3`转储原始内存。我们通过触摸制造商专用硬件读卡器的SPI总线以及通过Frida观察厂商的Android应用程序分别找到了这个密码。^([3](footnotes.xhtml#ch7fn3))
- en: The 32-bit password, `C2AD7521`, came as a parameter to the `A0` command, which
    initializes the glucose sensor after injection into a patient’s arm. Trying this
    same password in `A3`, followed by an address and length, gave us the ability
    to read raw memory. Sending this command in a loop gave complete dumps of ROM
    and SRAM, as well as a complete dump of the FRAM regions. These regions are not
    exposed by the standard read command, `20`, which takes a block address.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 32位密码`C2AD7521`是`A0`命令的一个参数，该命令在注射到患者的手臂后初始化葡萄糖传感器。在`A3`中尝试相同的密码，并跟随地址和长度，使我们能够读取原始内存。循环发送此命令可以完全转储ROM和SRAM，以及完全转储FRAM区域。这些区域无法通过标准读取命令`20`访问，该命令需要块地址。
- en: '**Inside the TAL152 ROM**'
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**TAL152 ROM内部**'
- en: Loading this complete dump into Ghidra shows that the ROM is related to that
    of the FRL152, but that they have diverged quite a bit. The TAL152 implements
    no vendor commands directly; rather, they must be added through the patch table.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个完整的转储加载到Ghidra中显示，ROM与FRL152的ROM相关，但它们已经有了很大的差异。TAL152没有直接实现厂商命令；相反，必须通过补丁表添加这些命令。
- en: We also lacked the ability to write to FRAM, as it was write protected. Sure
    enough, `A2` write protects every FRAM page that is exposed by NFC, and `A4` unlocks
    those same pages! A list of commands is found in [Figure 7.5](ch07.xhtml#ch7fig5).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也没有写入FRAM的能力，因为它是写保护的。果然，`A2`命令会写保护通过NFC暴露的每个FRAM页面，而`A4`则解锁这些页面！命令列表见[图7.5](ch07.xhtml#ch7fig5)。
- en: Calling the `A4` command, we can then unlock pages and begin mucking around.
    A simple write to `0xFFB8` will re-enable the `Ex` commands, allowing us to experiment
    with restoring old sensors. Or we can compile our own firmware to run inside of
    the TAL152, turning a glucose sensor into something entirely different.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`A4`命令后，我们可以解锁页面并开始修改。简单地写入`0xFFB8`将重新启用`Ex`命令，允许我们实验恢复旧传感器。或者我们可以编译自己的固件运行在TAL152中，将一个葡萄糖传感器变成完全不同的东西。
- en: '**Some Other Unlocking Techniques**'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**其他解锁技巧**'
- en: While trying to dump the TAL152, we hit a few dead ends that might possibly
    work for you on other targets.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试提取TAL152的内容时，我们遇到了一些死胡同，但这些方法可能对你在其他目标上有效。
- en: We can’t make a connection, but the JTAG of the TAL152 appears to be unlocked
    if it follows the same convention as the FRL152\. This might very well be caused
    by a custom activation key, but whether it is a different locking mechanism or
    a different key, we were unable to get a connection. I’ve since heard that the
    bonding wires go to different pins on the TAL152, and that a connection can be
    made by adjusting them, but I’ve not confirmed that in my own lab.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们无法建立连接，但TAL152的JTAG似乎已经解锁，如果它遵循与FRL152相同的约定。这可能是由自定义激活密钥引起的，但无论是不同的锁定机制还是不同的密钥，我们都未能建立连接。我后来听说，TAL152的接线不同，需要调整接线才能建立连接，但我尚未在我的实验室确认这一点。
- en: We tried to wipe these chips back to a factory setting by raising them above
    their Curie point. Our theory was that the heat might erase FRAM while preserving
    ROM, so that ROM would be freely read.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尝试通过将芯片加热到其居里点以上，将其恢复到出厂设置。我们的理论是，热量可能会抹去FRAM中的数据，同时保留ROM中的数据，这样ROM就可以自由读取。
- en: Texas Instruments Application Report SLAA526A, *MSP430 FRAM Quality and Reliability*,
    leads us to believe this temperature is near 430 ^°C. Short experiments involving
    a hot air gun and strong magnets were unsuccessful, but we hope someday to bake
    a chip in a kiln for many hours to look for bit failures.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 德州仪器应用报告SLAA526A，*MSP430 FRAM的质量与可靠性*，让我们相信这个温度接近430°C。短时间的热风枪和强磁铁实验没有成功，但我们希望有一天能将芯片在窑中烘烤几个小时，以寻找位错误。
- en: Test pins on the chip aroused our curiosity, as other chips use them to enter
    a bootloader and these chips might use them to reset to a factory state. This
    could be as effective as overheating the FRAM, without the hassles of extreme
    temperatures.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 芯片上的测试引脚引起了我们的好奇心，因为其他芯片使用它们进入引导加载程序，而这些芯片可能也用它们来恢复到出厂状态。这种方法可能和过热FRAM一样有效，而且避免了极端温度带来的麻烦。
- en: It’s worth noting that our successful method—using the `A3` command with the
    manufacturer’s password—can be accomplished *either* by tapping the hardware reader’s
    SPI bus *or* by reading that same password out of the manufacturer’s Android application.
    In reverse engineering, any technique that works is a good one, and there’s often
    more than one way to win the game.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，我们成功的方法——使用`A3`命令和制造商的密码——可以通过*接触硬件读取器的SPI总线*来完成，*或者*通过从制造商的Android应用中读取相同的密码来完成。在逆向工程中，任何有效的技巧都是好技巧，而且通常有不止一种方法可以完成任务。
