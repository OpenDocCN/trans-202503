- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Dogma_OT_Bold_B_11">INTRODUCTION</samp>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_11">简介</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: C was developed as a system programming language in the 1970s, and even after
    all this time, it remains incredibly popular. System languages are designed for
    performance and ease of access to the underlying hardware while providing high-level
    programming features. While other languages may offer newer language features,
    their compilers and libraries are typically written in C.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: C语言是在1970年代作为系统编程语言开发的，即使经过了这么长时间，它仍然非常流行。系统语言旨在提供高效的性能，并便捷地访问底层硬件，同时提供高级编程特性。虽然其他语言可能提供更新的语言特性，但它们的编译器和库通常是用C语言编写的。
- en: Carl Sagan once said, “If you wish to make an apple pie from scratch, you must
    first invent the universe.” The inventors of C did not invent the universe; they
    designed C to work with a variety of computing hardware and architectures that,
    in turn, were constrained by physics and mathematics. C is layered directly on
    top of computing hardware, making it more sensitive to evolving hardware features,
    such as vectorized instructions, than higher-level languages that typically rely
    on C for their efficiency.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 卡尔·萨根曾说过：“如果你想从头开始做一个苹果派，你必须首先发明宇宙。”C语言的发明者并没有发明宇宙；他们设计了C语言，使其能够与各种计算硬件和架构协同工作，而这些硬件和架构又受限于物理学和数学。C语言直接建立在计算硬件之上，使得它比那些通常依赖于C来实现高效的高级语言更能敏感地适应硬件特性的发展，例如向量化指令。
- en: 'According to the TIOBE index (*[https://<wbr>www<wbr>.tiobe<wbr>.com<wbr>/tiobe<wbr>-index<wbr>/](https://www.tiobe.com/tiobe-index/)*)—whose
    rankings are based on the number of skilled engineers, courses, and third-party
    vendors for each language—C has been either the most popular programming language
    or second most popular since 2001\. The popularity of the C programming language
    can most likely be attributed to several tenets of the language referred to as
    the *spirit of C*:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 根据TIOBE指数（* [https://<wbr>www<wbr>.tiobe<wbr>.com<wbr>/tiobe<wbr>-index<wbr>/](https://www.tiobe.com/tiobe-index/)
    *）——该排名基于每种语言的熟练工程师数量、课程和第三方供应商——C语言自2001年起一直是最流行的编程语言或第二流行语言。C语言的流行可能最能归因于该语言的一些基本原则，被称为*C语言精神*：
- en: Trust the programmer. The C language assumes you know what you’re doing and
    lets you. This isn’t always a good thing (for example, if you don’t know what
    you’re doing).
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信任程序员。C语言假设你知道自己在做什么，并允许你这样做。这并不总是好事（例如，如果你不知道自己在做什么）。
- en: Don’t prevent the programmer from doing what needs to be done. Because C is
    a system programming language, it needs to handle a variety of low-level tasks.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要阻止程序员做他们需要做的事情。由于C是系统编程语言，它需要处理各种低级任务。
- en: Keep the language small and simple. The language is designed to be close to
    the hardware and to have a small footprint.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持语言的小巧和简单。该语言设计紧密贴近硬件，且占用空间小。
- en: Provide only one way to do an operation. Also known as *conservation of mechanism*,
    the C language tries to limit the introduction of duplicate mechanisms.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只提供一种方法来完成操作。也被称为*机制的保守性*，C语言力求限制引入重复机制。
- en: Make it fast, even if it isn’t guaranteed to be portable. Allowing you to write
    optimally efficient code is the top priority. The responsibility of ensuring that
    code is portable, safe, and secure is delegated to you, the programmer.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让它运行得更快，即使无法保证它具有可移植性。允许你编写最优化的高效代码是首要任务。确保代码可移植、安全和安全的责任交给你，程序员。
- en: C is used as a target language for compilers to build operating systems, to
    teach fundamentals of computing, and for embedded and general-purpose programming.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: C语言被用作编译器的目标语言，用于构建操作系统、教授计算机基础知识，以及用于嵌入式和通用编程。
- en: There is a large amount of legacy code written in C. The C standards committee
    is extremely careful not to break existing code, providing a smooth pass for modernizing
    this code to take advantage of modern language features.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有大量用C语言编写的遗留代码。C语言标准委员会非常小心，不会破坏现有代码，为现代化这些代码以利用现代语言特性提供了平稳的过渡。
- en: C is often used in embedded systems because it is a small and efficient language.
    Embedded systems are small computers that are embedded in other devices, such
    as cars, appliances, and medical devices.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: C语言通常用于嵌入式系统，因为它是一种小巧高效的语言。嵌入式系统是嵌入到其他设备中的小型计算机，如汽车、家电和医疗设备。
- en: Your favorite programming language and library are written in C (or were at
    one time). There are many libraries available for C. This makes it easy to find
    libraries that can be used to perform common tasks.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你最喜欢的编程语言和库是用 C 编写的（或曾经是）。C 有许多可用的库，这使得可以轻松找到可用于执行常见任务的库。
- en: Overall, C is a powerful and versatile language that is still widely used today.
    It is a good choice for programmers who need a fast, efficient, and portable language.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，C 语言是一种强大而多用途的语言，至今仍被广泛使用。它是需要快速、高效和可移植语言的程序员的良好选择。
- en: <samp class="SANS_Futura_Std_Bold_B_11">A Brief History of C</samp>
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">C 的简史</samp>
- en: The C programming language was developed in the early 1970s at Bell Labs as
    a system implementation language for the nascent Unix operating system and remains
    incredibly popular today (Ritchie 1993). System languages are designed for performance
    and ease of access to the underlying hardware while providing high-level programming
    features. While other languages may offer newer language features, their compilers
    and libraries are typically written in C. It serves as a lingua franca for translating
    between various systems and languages.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: C 编程语言是在 1970 年代初期于贝尔实验室开发的，作为新兴 Unix 操作系统的系统实现语言，并且今天仍然非常流行（Ritchie 1993）。系统语言旨在提供高性能并易于访问底层硬件，同时提供高级编程功能。尽管其他语言可能提供更新的语言特性，但它们的编译器和库通常是用
    C 编写的。它充当了在各种系统和语言之间翻译的“通用语”。
- en: C was first described in 1978 by Kernighan and Ritchie in the book *The C Programming
    Language* (Kernighan and Ritchie 1988). It is now defined by revisions of the
    ISO/IEC 9899 standard (ISO/IEC 2024) and other technical specifications. The C
    standards committee is the steward of the C programming language, working with
    the broader community to maintain and evolve the C language. In 1983, the American
    National Standards Institute (ANSI) formed the X3J11 committee to establish a
    standard C specification, and in 1989, the C standard was ratified as ANSI X3.159-1989,
    “Programming Language C.” This 1989 version of the language is referred to as
    *ANSI C* or *C89*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: C 语言首次由 Kernighan 和 Ritchie 于 1978 年在《*C 程序设计语言*》一书中描述（Kernighan 和 Ritchie 1988）。现在，C
    语言由 ISO/IEC 9899 标准（ISO/IEC 2024）和其他技术规范的修订版定义。C 标准委员会负责 C 编程语言的管理，致力于与更广泛的社区合作，以维护和发展
    C 语言。1983 年，美国国家标准协会（ANSI）成立了 X3J11 委员会，旨在制定 C 语言的标准规范，并于 1989 年通过了 C 标准，定名为 ANSI
    X3.159-1989，“编程语言 C”。这一 1989 版本的语言被称为 *ANSI C* 或 *C89*。
- en: In 1990, the ANSI C standard was adopted (unchanged) by a joint technical committee
    of the International Organization for Standardization (ISO) and the International
    Electrotechnical Commission (IEC) and published as the first edition of the C
    standard, C90 (ISO/IEC 9899:1990). The second edition of the C standard, C99,
    was published in 1999 (ISO/IEC 9899:1999), and a third edition, C11, in 2011 (ISO/IEC
    9899:2011). The fourth version, published in 2018 as C17 (ISO/IEC 9899:2018),
    repairs defects in C11\. The latest version of the C standard (as of this writing)
    is the fifth version, published in 2024 as C23 (ISO/IEC 9899:2024). As of September
    2023, I am the convenor of ISO/IEC JTC1/SC22/WG14, the international standardization
    working group for the programming language C.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 1990 年，ANSI C 标准被国际标准化组织（ISO）和国际电工委员会（IEC）联合技术委员会采纳（未作更改），并作为第一版 C 标准发布，命名为
    C90（ISO/IEC 9899:1990）。第二版 C 标准 C99 于 1999 年发布（ISO/IEC 9899:1999），第三版 C11 于 2011
    年发布（ISO/IEC 9899:2011）。第四版于 2018 年发布，称为 C17（ISO/IEC 9899:2018），修复了 C11 中的缺陷。C
    标准的最新版本（截至本文撰写时）为第五版，于 2024 年发布，称为 C23（ISO/IEC 9899:2024）。截至 2023 年 9 月，我是 ISO/IEC
    JTC1/SC22/WG14 的召集人，该工作组负责 C 编程语言的国际标准化。
- en: In the 20 years the TIOBE Programming Community index has tracked programming
    language popularity, C has remained in first or second place (TIOBE Index 2022).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TIOBE 编程社区指数跟踪编程语言流行度的 20 年中，C 一直位居第一或第二位（TIOBE Index 2022）。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The C Standard</samp>
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">C 标准</samp>
- en: 'The C standard (ISO/IEC 9899:2024) defines the language and is the final authority
    on language behavior. While the standard can be obscure to impenetrable, you need
    to understand it if you intend to write code that’s portable, safe, and secure.
    The C standard provides a substantial degree of latitude to implementations to
    allow them to be optimally efficient on various hardware platforms. *Implementations*
    is the term the C standard uses to refer to compilers and is defined as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: C 标准（ISO/IEC 9899:2024）定义了该语言，并且是语言行为的最终权威。尽管标准可能晦涩难懂，甚至难以理解，但如果你打算编写可移植、安全和可靠的代码，就需要理解它。C
    标准为实现提供了相当大的灵活性，以便它们能够在不同的硬件平台上达到最优的效率。*实现*是 C 标准用来指代编译器的术语，定义如下：
- en: A particular set of software, running in a particular translation environment
    under particular control options, that performs translation of programs for, and
    supports execution of functions in, a particular execution environment.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一套特定的软件，在特定的翻译环境中，按照特定的控制选项运行，执行程序翻译并支持在特定执行环境中运行功能。
- en: This definition indicates that each compiler with a particular set of command
    line flags, along with the C standard library, is considered a separate implementation,
    and different implementations can have significantly different *implementation-defined
    behavior*. This is noticeable in GNU Compiler Collection (GCC), which uses the
    -<samp class="SANS_TheSansMonoCd_W5Regular_11">std=</samp> flag to determine the
    language standard. Possible values for this option include <samp class="SANS_TheSansMonoCd_W5Regular_11">c89</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">c90</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">c99</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">c11</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">c17</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">c23</samp>. The default depends
    on the version of the compiler. If no C language dialect options are given, the
    default for GCC 13 is <samp class="SANS_TheSansMonoCd_W5Regular_11">-std=gnu17</samp>,
    which provides extensions to the C language. For portability, specify the standard
    you’re using. For access to new language features, specify a recent standard.
    C23 features have been available since GCC 11\. To enable C23 support, add the
    compiler option <samp class="SANS_TheSansMonoCd_W5Regular_11">-std=c23</samp>
    (or possibly <samp class="SANS_TheSansMonoCd_W5Regular_11">-std=c2x</samp>). All
    the examples in this book are written for C23.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个定义表明，任何带有特定命令行标志的编译器，以及 C 标准库，都被视为一个独立的实现，不同的实现可能具有显著不同的*实现定义行为*。这一点在 GNU
    编译器集合（GCC）中尤为明显，GCC 使用 -<samp class="SANS_TheSansMonoCd_W5Regular_11">std=</samp>
    标志来确定语言标准。该选项的可能值包括 <samp class="SANS_TheSansMonoCd_W5Regular_11">c89</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">c90</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">c99</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">c11</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">c17</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">c23</samp>。默认值取决于编译器的版本。如果没有指定
    C 语言方言选项，GCC 13 的默认值是 <samp class="SANS_TheSansMonoCd_W5Regular_11">-std=gnu17</samp>，它为
    C 语言提供了扩展。为了保证移植性，应该指定使用的标准。为了访问新的语言特性，应指定较新的标准。C23 的特性自 GCC 11 起就已提供。要启用 C23
    支持，请添加编译器选项 <samp class="SANS_TheSansMonoCd_W5Regular_11">-std=c23</samp>（或可能是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">-std=c2x</samp>）。本书中的所有示例都采用 C23
    编写。
- en: Because implementations have such a range of behaviors, and because some of
    these behaviors are undefined, you can’t understand the C language by just writing
    simple test programs to examine the behavior. (If you want to try this, the Compiler
    Explorer is an excellent tool; see *[https://<wbr>godbolt<wbr>.org](https://godbolt.org)*.)
    The behavior of the code can vary when compiled by a different implementation
    on different platforms or even the same implementation using a different set of
    flags or a different C standard library implementation. Code behavior can even
    vary between *versions* of a compiler. The C standard specifies which behaviors
    are guaranteed for all implementations and where you need to plan for variability.
    This is mostly a concern when developing portable code but can also affect the
    security and safety of your code.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于实现有各种不同的行为，且其中一些行为是未定义的，因此你不能仅通过编写简单的测试程序来理解C语言的行为。（如果你想尝试这个，编译器探索器是一个非常好的工具；请参见
    *[https://<wbr>godbolt<wbr>.org](https://godbolt.org)*。）代码的行为可能会在不同的平台上由不同的实现编译时发生变化，甚至在同一个实现上，使用不同的标志或不同的C标准库实现时，行为也可能不同。代码行为甚至可能因编译器的*版本*不同而有所变化。C标准规定了哪些行为对于所有实现是保证的，以及哪些地方需要考虑到可变性。这个问题主要在开发可移植代码时需要关注，但也可能影响代码的安全性和可靠性。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The CERT C Coding Standard</samp>
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">CERT C语言编码标准</samp>
- en: '*The CERT**^®* *C Coding Standard: 98 Rules for Developing Safe, Reliable,
    and Secure Systems*, 2nd edition (Addison-Wesley Professional, 2014), is a reference
    book I wrote while managing the secure coding team at the Software Engineering
    Institute at Carnegie Mellon University. The book contains examples of common
    C programming mistakes and how to correct them. Throughout this book, we reference
    some of those rules as a source for detailed information on specific C language
    programming topics.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*CERT**^®* *C语言编码标准：开发安全、可靠和安全系统的98条规则*，第二版（Addison-Wesley Professional，2014年），是我在卡内基梅隆大学软件工程研究所管理安全编码团队时编写的参考书。书中包含了常见的C编程错误及其修正方法。在整本书中，我们引用了一些规则，作为特定C语言编程主题的详细信息来源。'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Common Weakness Enumeration</samp>
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">常见弱点枚举</samp>
- en: MITRE’s Common Weakness Enumeration (CWE) is a list of common hardware and software
    weaknesses that can be used to identify weaknesses in source code and operational
    systems. The CWE list is maintained by a community project with the goals of understanding
    flaws in software and hardware and creating automated tools that can be used to
    identify, fix, and prevent those flaws. Occasionally, we will reference specific
    CWEs in this book when discussing classes of defects that can lead to security
    vulnerabilities. For more information on CWE, see *[https://<wbr>cwe<wbr>.mitre<wbr>.org](https://cwe.mitre.org)*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: MITRE的常见弱点枚举（CWE）是一个列出常见硬件和软件弱点的清单，可用于识别源代码和操作系统中的弱点。CWE清单由一个社区项目维护，旨在理解软件和硬件中的缺陷，并创建可用于识别、修复和防止这些缺陷的自动化工具。在本书中，我们偶尔会引用具体的CWE，当讨论可能导致安全漏洞的缺陷类别时。欲了解更多关于CWE的信息，请参见
    *[https://<wbr>cwe<wbr>.mitre<wbr>.org](https://cwe.mitre.org)*。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Who This Book Is For</samp>
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">本书适用对象</samp>
- en: This book is an introduction to the C language. It is written to be as accessible
    as possible to anyone who wants to learn C programming, without dumbing it down.
    In other words, we didn’t overly simplify C programming in the way many other
    introductory books and courses might. These overly simplified references will
    teach you how to compile and run code, but the code might still be wrong. Developers
    who learn how to program C from such sources will typically develop substandard,
    flawed, insecure code that will eventually need to be rewritten (often sooner
    than later). Hopefully, these developers will eventually benefit from senior developers
    in their organizations who will help them unlearn these harmful misconceptions
    about programming in C and help them start developing professional-quality C code.
    On the other hand, this book will quickly teach you how to develop correct, portable,
    professional-quality code; build a foundation for developing security- critical
    and safety-critical systems; and perhaps teach you some things that even the senior
    developers at your organization don’t know.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本书是C语言的入门书籍。它写得尽可能易于理解，适合任何希望学习C语言编程的人，而不降低难度。换句话说，我们没有像许多其他入门书籍和课程那样过度简化C语言编程。这些过度简化的教材可能会教你如何编译和运行代码，但代码可能仍然是错误的。从这些来源学习C编程的开发人员通常会编写出不合格、存在缺陷、不安全的代码，这些代码最终需要重写（通常比预期的要早）。希望这些开发人员最终能够从他们组织中的资深开发人员那里受益，帮助他们摒弃这些关于C语言编程的有害误解，开始编写专业质量的C代码。另一方面，本书将迅速教会你如何开发正确、可移植、专业质量的代码；为开发安全关键和安全关键系统打下基础；并可能教你一些即便是你组织中的资深开发人员也不知道的知识。
- en: '*Effective C: An Introduction to Professional C Programming*, 2nd edition,
    is a concise introduction to essential C language programming that will soon have
    you writing programs, solving problems, and building working systems. The code
    examples are idiomatic and straightforward. You’ll also learn about good software
    engineering practices for developing correct, secure C code.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*《有效的C：专业C编程简介》*（第二版）是一本简洁的C语言编程入门书籍，它将帮助你迅速编写程序、解决问题并构建工作系统。书中的代码示例具有惯用表达且直截了当。你还将学习开发正确、安全C代码的良好软件工程实践。'
- en: In this book, you’ll learn about essential programming concepts in C and practice
    writing high-quality code with exercises for each topic. Code listings from this
    book and additional materials can be found on GitHub at *[https://<wbr>github<wbr>.com<wbr>/rcseacord<wbr>/effective<wbr>-c](https://github.com/rcseacord/effective-c)*.
    Go to this book’s page at *[https://<wbr>nostarch<wbr>.com<wbr>/effective<wbr>-c<wbr>-2nd<wbr>-edition](https://nostarch.com/effective-c-2nd-edition)*
    or to *[http://<wbr>www<wbr>.robertseacord<wbr>.com](http://www.robertseacord.com)*
    to check for updates and additional material, or contact me if you have additional
    questions or are interested in training.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，你将学习C语言的基本编程概念，并通过每个主题的练习来实践编写高质量代码。书中的代码示例和其他资料可以在GitHub上找到，地址为*[https://<wbr>github<wbr>.com<wbr>/rcseacord<wbr>/effective<wbr>-c](https://github.com/rcseacord/effective-c)*。你可以访问本书的页面*[https://<wbr>nostarch<wbr>.com<wbr>/effective<wbr>-c<wbr>-2nd<wbr>-edition](https://nostarch.com/effective-c-2nd-edition)*，或者访问*[http://<wbr>www<wbr>.robertseacord<wbr>.com](http://www.robertseacord.com)*，查看更新和附加材料，或者如果你有额外问题或对培训感兴趣，可以联系我。
- en: <samp class="SANS_Futura_Std_Bold_B_11">What’s in This Book</samp>
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">本书内容</samp>
- en: 'This book starts with an introductory chapter that covers just enough material
    to get you programming right from the start. After that, we circle back and examine
    the basic building blocks of the language. The book culminates with two chapters
    that will show you how to compose real-world systems from these basic building
    blocks and how to debug, test, and analyze the code you’ve written. The chapters
    are as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 本书从一个介绍性章节开始，涵盖足够的内容，使你从一开始就能开始编程。之后，我们将回顾并研究语言的基本构建块。本书的高潮部分是两个章节，它们将向你展示如何从这些基本构建块组成实际系统，以及如何调试、测试和分析你编写的代码。章节安排如下：
- en: '**[Chapter 1](chapter1.xhtml): Getting Started with C** You’ll write a simple
    C program to become familiar with using the <samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp>
    function. You’ll also look at a few options for editors and compilers.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第一章](chapter1.xhtml)：C语言入门** 你将编写一个简单的C程序，熟悉使用<samp class="SANS_TheSansMonoCd_W5Regular_11">main</samp>函数。你还将了解一些编辑器和编译器的选择。'
- en: '**[Chapter 2](chapter2.xhtml): Objects, Functions, and Types** This chapter
    explores basics like declaring variables and functions. You’ll also investigate
    the principles of using basic types.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第2章](chapter2.xhtml)：对象、函数与类型** 本章探讨了声明变量和函数等基础知识。你还将研究如何使用基本类型的原则。'
- en: '**[Chapter 3](chapter3.xhtml): Arithmetic Types** You’ll learn about the integer
    and floating-point arithmetic data types.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第3章](chapter3.xhtml)：算术类型** 你将学习整数和浮点数算术数据类型。'
- en: '**[Chapter 4](chapter4.xhtml): Expressions and Operators** You’ll learn about
    operators and how to write simple expressions to perform operations on various
    object types.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第4章](chapter4.xhtml)：表达式与运算符** 你将学习运算符，以及如何编写简单的表达式对各种对象类型进行操作。'
- en: '**[Chapter 5](chapter5.xhtml): Control Flow** You’ll learn how to control the
    order in which individual statements are evaluated. We’ll introduce expression
    and compound statements that define the work to be performed. We’ll then cover
    the control statements that determine which code blocks are executed and in what
    order: selection, iteration, and jump statements.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第5章](chapter5.xhtml)：控制流** 你将学习如何控制各个语句的评估顺序。我们将介绍表达式和复合语句，它们定义了要执行的工作。然后，我们将涵盖控制语句，它们决定哪些代码块将被执行，以及执行的顺序：选择、迭代和跳转语句。'
- en: '**[Chapter 6](chapter6.xhtml): Dynamically Allocated Memory** You’ll learn
    about dynamically allocated memory, which is allocated from the heap at runtime.
    Dynamically allocated memory is useful when the exact storage requirements for
    a program are unknown before runtime.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第6章](chapter6.xhtml)：动态分配内存** 你将学习动态分配内存，它在运行时从堆中分配。动态分配内存在程序的精确存储需求在运行前未知时非常有用。'
- en: '**[Chapter 7](chapter7.xhtml): Characters and Strings** This chapter covers
    the various character sets, including ASCII and Unicode, that can be used to compose
    strings. You’ll learn how strings are represented and manipulated using the legacy
    functions from the C standard library, the bounds-checking interfaces, and POSIX
    and Windows application programming interfaces (APIs).'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第7章](chapter7.xhtml)：字符与字符串** 本章涵盖了可以用于组成字符串的各种字符集，包括 ASCII 和 Unicode。你将学习如何使用
    C 标准库中的遗留函数、边界检查接口以及 POSIX 和 Windows 应用程序编程接口（API）来表示和操作字符串。'
- en: '**[Chapter 8](chapter8.xhtml): Input/Output** This chapter will teach you how
    to perform input/output (I/O) operations to read data from, or write data to,
    terminals and filesystems. I/O involves all the ways information enters or exits
    a program. We’ll cover techniques that make use of C standard streams and POSIX
    file descriptors.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第8章](chapter8.xhtml)：输入/输出** 本章将教你如何执行输入/输出（I/O）操作，从终端和文件系统读取数据或写入数据。I/O
    涉及所有信息进入或退出程序的方式。我们将涵盖使用 C 标准流和 POSIX 文件描述符的技术。'
- en: '**[Chapter 9](chapter9.xhtml): Preprocessor** You’ll learn how to use the preprocessor
    to include files, define object- and function-like macros, and conditionally include
    code based on implementation-specific features.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第9章](chapter9.xhtml)：预处理器** 你将学习如何使用预处理器来包含文件、定义类似对象和函数的宏，并根据特定实现特性有条件地包含代码。'
- en: '**[Chapter 10](chapter10.xhtml): Program Structure** You’ll learn how to structure
    your program into multiple translation units consisting of both source and include
    files. You’ll also learn how to link multiple object files together to create
    libraries and executable files.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第10章](chapter10.xhtml)：程序结构** 你将学习如何将程序结构化为多个翻译单元，这些单元由源文件和包含文件组成。你还将学习如何将多个目标文件链接在一起，创建库文件和可执行文件。'
- en: '**[Chapter 11](chapter11.xhtml): Debugging, Testing, and Analysis** This chapter
    describes tools and techniques for producing error-free programs, including compile-time
    and runtime assertions, debugging, testing, static analysis, and dynamic analysis.
    The chapter also discusses which compiler flags are recommended for use in different
    phases of the software development process.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第11章](chapter11.xhtml)：调试、测试与分析** 本章介绍了用于生成无错程序的工具和技术，包括编译时和运行时断言、调试、测试、静态分析和动态分析。章节还讨论了在软件开发过程中不同阶段推荐使用的编译器标志。'
- en: '**[Appendix](appendix.xhtml): The Fifth Edition of the C Standard (C23)** This
    appendix enumerates some of the additions and changes in C23\. It’s a convenient
    way to learn what’s new in C and to identify changes from the previous C standard
    (C17).This book is updated from the previous edition to cover the features and
    behaviors of C23\. According to 2022 polling data from JetBrains (*[https://<wbr>www<wbr>.jetbrains<wbr>.com<wbr>/lp<wbr>/devecosystem<wbr>-2022<wbr>/c<wbr>/](https://www.jetbrains.com/lp/devecosystem-2022/c/)*),
    44 percent of C programmers use C99, 33 percent use C11, 16 percent use C17, and
    15 percent use an embedded version of C.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**[附录](appendix.xhtml): C 标准第五版 (C23)** 本附录列举了 C23 中的一些新增内容和变化。这是学习 C 新特性以及识别与上一版
    C 标准（C17）变化的一种便捷方式。本书更新自之前的版本，涵盖了 C23 的新特性和行为。根据 JetBrains 2022 年的调查数据 (*[https://www.jetbrains.com/lp/devecosystem-2022/c/](https://www.jetbrains.com/lp/devecosystem-2022/c/)*)，44%
    的 C 程序员使用 C99，33% 使用 C11，16% 使用 C17，15% 使用嵌入式版本的 C。'
- en: You’re about to embark on a journey from which you will emerge a newly minted
    but professional C developer.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你即将踏上一段旅程，经过这段旅程后，你将成为一名全新的专业 C 开发者。
