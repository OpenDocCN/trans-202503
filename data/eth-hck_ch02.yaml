- en: '**2'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2'
- en: CAPTURING TRAFFIC WITH ARP SPOOFING**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**通过 ARP 欺骗捕获流量**'
- en: '*Pay no attention to the man behind the curtain!*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*不要理会帘子后面的那个人！*'
- en: –Noel Langley, *The Wizard of Oz*
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: –诺埃尔·兰格利，*《绿野仙踪》*
- en: '![image](../images/common.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common.jpg)'
- en: Anyone who walks into a coffee shop and connects to its Wi-Fi network can intercept
    and view other users’ unencrypted web traffic using a technique called *ARP spoofing*,
    which exploits a vulnerability in the design of the address resolution protocol
    (ARP). In this chapter, we explain how ARP works, describe the steps of an ARP
    spoofing attack, and then perform one ourselves.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 任何进入咖啡店并连接到其 Wi-Fi 网络的人，都可以使用一种叫做 *ARP 欺骗* 的技术来拦截并查看其他用户未加密的网络流量，这种技术利用了地址解析协议（ARP）设计中的漏洞。在本章中，我们将解释
    ARP 的工作原理，描述 ARP 欺骗攻击的步骤，并且亲自进行一次攻击。
- en: '**How the Internet Transmits Data**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**互联网如何传输数据**'
- en: Before we can discuss ARP spoofing, we must first understand the internet’s
    general structure. This section describes how the internet transmits data through
    a hierarchical network using packets, MAC addresses, and IP addresses.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论 ARP 欺骗之前，必须首先理解互联网的基本结构。本节描述了互联网如何通过分层网络使用数据包、MAC 地址和 IP 地址来传输数据。
- en: '***Packets***'
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***数据包***'
- en: All information on the internet is transmitted in *packets*. You can think of
    a packet as an envelope that contains the data that you want to send. As with
    the postal service, these packets are routed to their destinations based on a
    specified address. [Figure 2-1](ch02.xhtml#ch2fig1) shows some parallels between
    envelopes and packets.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网上的所有信息都是以*数据包*的形式传输的。你可以把数据包看作一个包含你要发送的数据的信封。和邮政系统一样，这些数据包会根据指定的地址被路由到目的地。[图
    2-1](ch02.xhtml#ch2fig1) 显示了信封和数据包之间的一些相似之处。
- en: '![image](../images/ch02fig01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/ch02fig01.jpg)'
- en: '*Figure 2-1: Parallels between envelopes and packets*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-1：信封和数据包的相似之处*'
- en: 'The From Address section on an envelope contains two critical pieces of information:
    1) the name of the person sending the letter, and 2) where they live. Similarly,
    packets have a source (*media access control [MAC] address*) that represents the
    machine sending the packet and a source (*IP address*) that represents where the
    packet came from. Other similar fields, known as *packet headers*, represent the
    packet’s destination.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 信封上的发件人地址部分包含两个关键信息：1）发送信件的人的名字，2）他们住在哪里。同样，数据包也有一个源地址（*媒体访问控制 [MAC] 地址*），代表发送数据包的机器，以及一个源地址（*IP
    地址*），代表数据包来自哪里。其他类似的字段被称为*数据包头*，它们代表数据包的目的地。
- en: The internet uses devices called *routers* to sort and forward packets. Packets
    make their way through the internet, traveling from router to router like mail
    travels from post office to post office.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网使用名为*路由器*的设备来分类和转发数据包。数据包在互联网上传输，从一个路由器到另一个路由器，就像邮件从一个邮局到另一个邮局。
- en: '***MAC Addresses***'
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***MAC 地址***'
- en: Your laptop contains a *network interface card (NIC)* that allows it to connect
    to Wi-Fi routers. This card has a unique address, called a MAC address, that identifies
    your machine on the network. When the router wants to send your computer information,
    it labels that packet with your laptop’s MAC address and then broadcasts it as
    a radio signal. All machines connected to that router receive this radio signal
    and check the packet’s MAC address to see whether the packet is intended for them.
    MAC addresses are normally 48-bit numbers written in hexadecimal (for example,
    08:00:27:3b:8f:ed).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你的笔记本电脑包含一个*网络接口卡（NIC）*，允许它连接到 Wi-Fi 路由器。这个卡有一个唯一的地址，叫做 MAC 地址，它标识你的机器在网络中的位置。当路由器要发送信息到你的电脑时，它会把这个数据包标记上你笔记本电脑的
    MAC 地址，然后将其广播成无线电信号。所有连接到这个路由器的机器都会接收到这个无线电信号，并检查数据包的 MAC 地址，看看这个数据包是否是为它们准备的。MAC
    地址通常是 48 位的数字，用十六进制表示（例如，08:00:27:3b:8f:ed）。
- en: '***IP Addresses***'
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***IP 地址***'
- en: You probably already know that IP addresses also identify machines on a network.
    So why do we need both IP and MAC addresses? Well, networks consist of hierarchical
    regions similarly to how some countries are split into states, which themselves
    contain cities. IP addresses follow a structure that allows them to identify a
    device’s place in the larger network. If you moved to another coffee shop, your
    laptop would be assigned a new IP address to reflect its new location; however,
    your MAC address would remain the same.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经知道，IP地址也用于标识网络中的计算机。那么，为什么我们需要IP地址和MAC地址两者呢？原因是，网络由层级区域组成，类似于某些国家被划分为州，而州内又包含城市。IP地址遵循一种结构，使其能够标识设备在更大网络中的位置。如果你搬到了另一个咖啡店，你的笔记本电脑将被分配一个新的IP地址来反映它的新位置；然而，你的MAC地址将保持不变。
- en: An IPv4 address encodes the network hierarchy information in a 32-bit number.
    This number is typically represented in four sections separated by dots (such
    as 192.168.3.1). Each section represents an 8-bit binary number. For example,
    the 3 in 192.168.3.1 actually represents the 8-bit binary number 00000011.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: IPv4地址将网络层级信息编码为一个32位数字。这个数字通常以四个由点分隔的部分表示（如192.168.3.1）。每个部分代表一个8位二进制数。例如，192.168.3.1中的3实际上代表的是8位二进制数00000011。
- en: IP addresses in the same region of the hierarchy also share the same upper-level
    bits. For example, all machines on the University of Virginia campus have IPv4
    addresses like 128.143.xxx.xxx. You’ll also see this written in Classless inter-domain
    routing (CIDR) notation as 128.143.1.1/16, indicating that machines share the
    same 16 upper bits, or the first two numbers. Because IP addresses follow a particular
    structure, routers can use parts of the IP address to decide how to route a packet
    through the hierarchy. [Figure 2-2](ch02.xhtml#ch2fig2) shows a simplified example
    of this hierarchy of routers.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 同一层级区域中的IP地址也共享相同的上层位。例如，所有位于弗吉尼亚大学校园的计算机IP地址都类似于128.143.xxx.xxx。你也会看到这种地址以无类域间路由（CIDR）表示法写作128.143.1.1/16，表示这些计算机共享相同的16位上层位，或者说前两个数字。由于IP地址遵循特定的结构，路由器可以利用IP地址的部分信息来决定如何通过层级结构路由数据包。[图
    2-2](ch02.xhtml#ch2fig2)展示了这一路由器层级结构的简化示例。
- en: '![image](../images/ch02fig02.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/ch02fig02.jpg)'
- en: '*Figure 2-2: A simplified view of the network hierarchy*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-2：网络层级的简化视图*'
- en: '[Figure 2-2](ch02.xhtml#ch2fig2) also shows a *digital subscriber line access
    multiplexer (DSLAM)*. A DSLAM allows signals associated with internet traffic
    to be sent over wires originally intended for cable television. The DSLAM distinguishes
    between internet and television signals, which is why you can connect both your
    television and router to the same cable socket.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2-2](ch02.xhtml#ch2fig2)还展示了一个*数字用户线接入多路复用器（DSLAM）*。DSLAM允许与互联网流量相关的信号通过最初用于有线电视的电缆传输。DSLAM区分互联网信号和电视信号，这就是为什么你可以将电视和路由器连接到同一个电缆插座的原因。'
- en: 'Let’s use the coffee shop example to follow a packet through the network hierarchy.
    Imagine you’re in a coffee shop in San Francisco and access the following web
    page: *[http://www.cs.virginia.edu](http://www.cs.virginia.edu)*. This web page
    is hosted on a web server with the IP address 128.143.67.11\. On the first leg
    of its journey, the web request passes through your laptop’s NIC, which then sends
    it to the Wi-Fi router in the coffee shop. The router then sends the web request
    to the DSLAM, which forwards the request to a router owned by an *internet service
    provider (ISP)*, like Comcast. The Comcast routers then compare the IP address
    to a list of prefixes until it finds a match. For example, it might find a match
    for the prefix 128.xxx.xxx.xxx, indicating its connection to that section of the
    hierarchy. As the request is sent through the hierarchy, the matches will become
    more specific. For example, the address will need to match 128.143.xxx.xxx, then
    128.143.67.xxx. Once the packet reaches the lowest level of the hierarchy, where
    there are no more routers, the router uses the MAC address in the packet to determine
    the request’s final destination. We refer to the lowest level of the hierarchy
    as a *local area network (LAN)* because all of the machines in that level are
    connected through a single router.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以咖啡店的例子来跟踪数据包在网络层级中的传递。假设你在旧金山的一家咖啡店，访问以下网页：*[http://www.cs.virginia.edu](http://www.cs.virginia.edu)*。这个网页托管在一个
    IP 地址为 128.143.67.11 的 web 服务器上。在它的旅程的第一段，网页请求经过你的笔记本电脑的网络接口卡（NIC），然后发送到咖啡店的 Wi-Fi
    路由器。路由器接着将网页请求发送到 DSLAM，再由它转发到由 *互联网服务提供商（ISP）*（如 Comcast）拥有的路由器。Comcast 路由器随后将
    IP 地址与前缀列表进行比较，直到找到匹配项。例如，它可能会找到匹配项为前缀 128.xxx.xxx.xxx，表示它与该层级的某一部分连接。随着请求在层级结构中传递，匹配会变得更加具体。例如，地址将需要匹配
    128.143.xxx.xxx，然后是 128.143.67.xxx。当数据包到达层级结构的最低层，那里没有更多的路由器时，路由器使用数据包中的 MAC 地址来确定请求的最终目的地。我们将层级结构的最低层称为
    *局域网（LAN）*，因为该层级中的所有机器都通过一个单一的路由器连接。
- en: Now that we have a general overview of the structure of the internet, we can
    discuss attacks that take place at the lowest level of the hierarchy.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对互联网的结构有了一个大致的了解，可以讨论发生在层级结构最低层的攻击。
- en: '***ARP Tables***'
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***ARP 表***'
- en: We’ve established that after a packet has reached its designated LAN, the network
    uses the packet’s MAC address to determine its final destination. But how does
    the router know the MAC address of the machine with the IP address 128.143.67.11?
    This is where ARP is useful. Following ARP, the router sends a message called
    an *ARP query* to all machines on the network, asking the machine with the IP
    address 128.143.67.11 to reply with an *ARP response* containing its MAC address.
    The router will then store this mapping between the IP address and MAC in a special
    table, called an *ARP table*. By storing this information in the ARP table, the
    router reduces the need to issue ARP queries in the near future.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经确认，在数据包到达其指定的 LAN 后，网络会使用数据包的 MAC 地址来确定其最终目的地。但路由器如何知道 IP 地址为 128.143.67.11
    的机器的 MAC 地址呢？这时 ARP 就派上用场了。根据 ARP，路由器会向网络上的所有机器发送一个叫做 *ARP 查询* 的消息，要求 IP 地址为 128.143.67.11
    的机器回复一个包含其 MAC 地址的 *ARP 响应*。路由器随后会将这个 IP 地址和 MAC 地址的映射存储在一个特殊的表中，这个表叫做 *ARP 表*。通过将这些信息存储在
    ARP 表中，路由器减少了未来发出 ARP 查询的需求。
- en: '**THE QUICK VERSION**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**快速版**'
- en: MAC addresses identify who you are, IP addresses identify where you are, and
    ARP tables manage the mapping between who you are and where you are on the network.
    In an ARP spoofing attack, we pretend to be someone else.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: MAC 地址用来识别你是谁，IP 地址用来识别你在哪里，而 ARP 表则管理你是谁和你在网络上在哪里之间的映射。在 ARP 欺骗攻击中，我们假装是另一个人。
- en: '**ARP Spoofing Attacks**'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**ARP 欺骗攻击**'
- en: An ARP spoofing attack consists of two phases. During the first phase, the attacker
    sends a fake ARP response to the victim, stating that the attacker’s MAC address
    maps to the router’s IP address. This allows the attacker to trick the victim
    into believing that the attacker’s machine is the router. During the second phase,
    the victim accepts the fake ARP packet sent by the attacker and updates the mapping
    in its ARP table to reflect that the attacker’s MAC address now maps to the router’s
    IP address. This means that the victim’s internet traffic will be sent to the
    attacker’s machine instead of the router. The attacker’s machine can then forward
    this information to the router after inspecting it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: ARP欺骗攻击分为两个阶段。在第一阶段，攻击者向受害者发送一个虚假的ARP响应，声明攻击者的MAC地址映射到路由器的IP地址。这使得攻击者能够欺骗受害者，使其相信攻击者的机器就是路由器。在第二阶段，受害者接受攻击者发送的虚假ARP数据包，并更新其ARP表中的映射，将攻击者的MAC地址映射到路由器的IP地址。这意味着受害者的互联网流量将发送到攻击者的机器，而不是路由器。攻击者的机器随后可以在检查这些信息后将其转发给路由器。
- en: If the attacker also wants to intercept internet traffic intended for the victim,
    the attacker must also trick the router into sending it the victim’s traffic.
    Therefore, the attacker must create a fake ARP packet indicating that the victim’s
    IP address maps to the attacker’s MAC address. This allows the attacker to intercept
    and inspect incoming internet traffic and then forward that traffic to the victim.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果攻击者还希望拦截原本发送给受害者的互联网流量，攻击者必须欺骗路由器将流量发送到攻击者处。因此，攻击者必须创建一个虚假的ARP数据包，表明受害者的IP地址映射到攻击者的MAC地址。这允许攻击者拦截并检查传入的互联网流量，然后将这些流量转发给受害者。
- en: We can explain the ideas behind an ARP spoofing attack with a simple diagram,
    shown in [Figure 2-3](ch02.xhtml#ch2fig3). Here, Jane (the attacker) tricks Alice
    (the victim) into sending her mail to Jane.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过一个简单的图示来解释ARP欺骗攻击的原理，如[图 2-3](ch02.xhtml#ch2fig3)所示。在这里，简（攻击者）将艾丽丝（受害者）骗到将她的邮件寄给简。
- en: '![image](../images/ch02fig03.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/ch02fig03.jpg)'
- en: '*Figure 2-3: An example of a spoofing attack involving a postal worker*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-3：涉及邮递员的欺骗攻击示例*'
- en: The ARP spoofing attack is an example of a *man-in-the-middle* attack, because
    the attacker places themselves between the victim and router.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: ARP欺骗攻击是*中间人攻击*的一个例子，因为攻击者将自己置于受害者和路由器之间。
- en: '**Performing an ARP Spoofing Attack**'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**执行ARP欺骗攻击**'
- en: Let’s perform an ARP spoofing attack. First, you must ensure that you’ve started
    the pfSense, Kali, and Metasploitable virtual machines before beginning this attack.
    Visit [Chapter 1](ch01.xhtml#ch1) for instructions on doing so. Now let’s install
    the tools that we’ll need to perform the ARP spoofing attack. Open a terminal
    on the Kali Linux virtual machine and install the `dsniff` tool. The default password
    for the Kali Linux virtual machine is “kali”. Start by running `**sudo -i**` to
    become a root user. You will also need to update the `apt-get` package manager
    by running `**apt-get update**`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进行一次ARP欺骗攻击。首先，您必须确保在开始攻击之前已启动pfSense、Kali和Metasploitable虚拟机。请访问[第1章](ch01.xhtml#ch1)获取相关指导。现在让我们安装进行ARP欺骗攻击所需的工具。在Kali
    Linux虚拟机上打开终端，并安装`dsniff`工具。Kali Linux虚拟机的默认密码是“kali”。首先运行`**sudo -i**`以成为root用户。您还需要通过运行`**apt-get
    update**`来更新`apt-get`包管理器。
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `dsniff` tool contains several useful tools for intercepting network traffic,
    such as `arpspoof`, a tool that executes an ARP spoofing attack.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`dsniff`工具包含多个有用的工具，用于拦截网络流量，比如`arpspoof`，这是一个执行ARP欺骗攻击的工具。'
- en: 'We must discover the IP addresses of the other machines on the network to *spoof*
    them (that is, pretend to be them). Run the `netdiscover` tool using the following
    command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须发现网络中其他机器的IP地址，以便进行*欺骗*（即，冒充它们）。运行`netdiscover`工具，使用以下命令：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `netdiscover` works by scanning the network using ARP queries. It issues
    ARP queries for all possible IP addresses on the subnetwork, and when a machine
    on the network responds, it records and displays the machine’s MAC address and
    IP address. The `netdiscover` tool also infers the NIC manufacturer from the MAC
    address. Because all MAC addresses must be unique, a central board at the Institute
    of Electrical and Electronics Engineers (IEEE) issues manufacturers a range of
    MAC addresses in order to ensure uniqueness.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`netdiscover` 通过使用 ARP 查询扫描网络。它会对子网中的所有可能的 IP 地址发出 ARP 查询，当网络中的一台机器响应时，它会记录并显示该机器的
    MAC 地址和 IP 地址。`netdiscover` 工具还会根据 MAC 地址推测网卡制造商。由于所有 MAC 地址必须是唯一的，因此电气和电子工程师协会（IEEE）的中央委员会会为制造商分配一段
    MAC 地址范围，以确保唯一性。'
- en: 'Your scan should detect two machines on the network and generate the output
    shown here:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你的扫描应该能检测到网络中的两台机器，并生成如下输出：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The actual IP addresses returned will vary depending on your setup. The machine
    with the lowest IP address is normally the router on the LAN. We’ll refer to this
    IP address as *<ROUTER_IP>* for the rest of this chapter. The second IP address
    belongs to the Metasploitable virtual machine (our victim), which we’ll refer
    to as *<VICTIM_IP>*. Once you’ve discovered both machines, end the scan by pressing
    CTRL-C.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的实际 IP 地址会根据你的设置有所不同。通常，最低的 IP 地址是局域网中的路由器。我们将在本章其余部分将此 IP 地址称为 *<ROUTER_IP>*。第二个
    IP 地址属于 Metasploitable 虚拟机（我们的受害者），我们将其称为 *<VICTIM_IP>*。一旦你发现了这两台机器，按 CTRL-C 结束扫描。
- en: 'Next, you will need to allow the Kali Linux machine to forward packets on behalf
    of other machines by enabling IP forwarding. Make sure that you’re a root user
    on Kali Linux, and then enable IP forwarding by setting the IP forwarding flag:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要允许 Kali Linux 机器代表其他机器转发数据包，通过启用 IP 转发功能。确保你是 Kali Linux 的 root 用户，然后通过设置
    IP 转发标志来启用 IP 转发：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that you’ve enabled IP forwarding, you’ll need to trick the victim into
    believing you’re the router. Do this by issuing fake ARP replies stating that
    your MAC address maps to the router’s IP address. [Figure 2-4](ch02.xhtml#ch2fig4)
    shows an example of this step in the attack.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已启用 IP 转发，你需要欺骗受害者，让它相信你就是路由器。通过发出假的 ARP 回复，声明你的 MAC 地址映射到路由器的 IP 地址来实现这一点。[图
    2-4](ch02.xhtml#ch2fig4) 展示了攻击中这一步骤的示例。
- en: '![image](../images/ch02fig04.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/ch02fig04.jpg)'
- en: '*Figure 2-4: The first stage of an ARP spoofing attack*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-4：ARP 欺骗攻击的第一阶段*'
- en: 'You can generate multiple fake ARP replies by running the following command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令生成多个假的 ARP 回复：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `-t` flag specifies the target, and the `-i` flag represents the interface.
    Your NIC supports several ways of connecting to the network. For example, `wlan`
    represents a wireless LAN (Wi-Fi connection), and `eth0` represents an Ethernet
    connection. In this virtual lab environment, the machines are virtually connected
    by Ethernet, so you’ll use `eth0` for your interface. In the coffee shop environment,
    the interface would be set to `wlan`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`-t` 标志指定目标，`-i` 标志表示接口。你的网卡支持多种连接网络的方式。例如，`wlan` 代表无线局域网（Wi-Fi 连接），`eth0`
    代表以太网连接。在这个虚拟实验环境中，机器是通过以太网虚拟连接的，因此你将使用 `eth0` 作为你的接口。在咖啡馆环境中，接口将设置为 `wlan`。'
- en: The following snippet shows the result of running `arpspoof`. You’ll need to
    generate multiple fake ARP replies to ensure that the table is always updated
    with the incorrect information. The tool will generate multiple packets for you,
    so you need to run it only once.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了运行 `arpspoof` 的结果。你需要生成多个假的 ARP 回复，以确保表格始终更新为错误信息。该工具会为你生成多个数据包，所以你只需运行一次。
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let’s examine the command’s output, paying particular attention to the first
    line ➊. This line represents a summary of the information in the packet that was
    just sent. The summary is composed of five key parts:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来查看命令的输出，特别关注第一行 ➊。这一行表示刚刚发送的数据包中的信息摘要。该摘要由五个关键部分组成：
- en: 1\. `8:0:27:1f:30:76` is the MAC address of the Kali Linux machine (attacker),
    which created the packet.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. `8:0:27:1f:30:76` 是 Kali Linux 机器（攻击者）的 MAC 地址，它创建了这个数据包。
- en: 2\. `8:0:27:fe:31:e6` is the MAC address of the machine (victim) that will receive
    the packet.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. `8:0:27:fe:31:e6` 是将接收数据包的机器（受害者）的 MAC 地址。
- en: 3\. `0806` is a type field indicating that an ARP packet is contained within
    the Ethernet frame being transmitted.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. `0806` 是类型字段，表示以太网帧中包含 ARP 数据包。
- en: 4\. `42` represents the total number of bytes associated with the Ethernet frame.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`42` 代表与以太网帧相关的总字节数。'
- en: 5\. The remaining section, `arp reply 192.168.100.1 is-at 8:0:27:1f:30:76`,
    is a summary of the ARP reply that falsely states that the router’s IP address
    (`192.168.100.1`) is associated with the Kali Linux machine’s MAC address (`8:0:27:1f:30:76`).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 剩余部分，`arp reply 192.168.100.1 is-at 8:0:27:1f:30:76`，是对 ARP 回复的总结，错误地声明路由器的
    IP 地址（`192.168.100.1`）与 Kali Linux 机器的 MAC 地址（`8:0:27:1f:30:76`）相关联。
- en: 'You must also trick the router into believing you’re the victim so that you
    can intercept incoming internet traffic on the victim’s behalf. Open a new terminal
    and run the command that follows. Notice that *<ROUTER_IP>* and *<VICTIM_IP>*
    are now reversed. This is because you’re now generating packets to trick the router
    into believing you’re the victim:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您还必须欺骗路由器，让它相信您是受害者，这样您就可以代表受害者拦截传入的互联网流量。打开一个新终端并运行以下命令。请注意，*<ROUTER_IP>* 和
    *<VICTIM_IP>* 现在已经交换了位置。这是因为您现在正在生成数据包，欺骗路由器让它相信您是受害者：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now that you’ve spoofed the victim and router, what can you do with the intercepted
    packets? Let’s inspect the packets we’ve intercepted and extract URLs from them.
    This will allow us to generate a list of websites that the victim visits. Extract
    the URLs by running the following command in a new terminal:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经欺骗了受害者和路由器，您可以对拦截到的数据包做些什么呢？让我们检查一下我们拦截到的数据包，并从中提取 URL。这将允许我们生成受害者访问的免费网站列表。通过在新终端中运行以下命令来提取
    URL：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can also generate some internet traffic on the victim machine. Log in to
    the Metasploitable virtual machine using **msfadmin** for both the username and
    password, and then enter the following command to generate a web request to *[google.com](http://google.com)*:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在受害者机器上生成一些互联网流量。使用 **msfadmin** 作为用户名和密码登录 Metasploitable 虚拟机，然后输入以下命令生成一个到
    *[google.com](http://google.com)* 的 Web 请求：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[Figure 2-5](ch02.xhtml#ch2fig5) shows an overview of what’s occurring during
    this step.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2-5](ch02.xhtml#ch2fig5) 展示了此步骤中发生情况的概览。'
- en: '![image](../images/ch02fig05.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/ch02fig05.jpg)'
- en: '*Figure 2-5: The second stage of the ARP spoofing attack, in which the victim
    uses the corrupted ARP table to address packets*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-5：ARP 欺骗攻击的第二阶段，受害者使用损坏的 ARP 表来处理数据包*'
- en: 'If you’ve done everything correctly, the URL associated with the web request
    will show up in the terminal after a couple of minutes. Be patient; it takes time
    to parse the packets:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您一切顺利，经过几分钟后，关联 Web 请求的 URL 会出现在终端中。耐心等待；解析数据包需要一些时间：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Take a look at this output. Although we’re showing only the URL here, the attacking
    machine is capturing all of the packets the victim sends and receives from the
    internet. This means that the attacker can see any unencrypted information the
    victim sends over the network. It also means an attacker can modify packets to
    inject malicious code on the machine.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这个输出。虽然我们这里只显示了 URL，但攻击机正在捕获受害者从互联网发送和接收的所有数据包。这意味着攻击者可以看到受害者通过网络发送的任何未加密的信息。这也意味着攻击者可以修改数据包，向机器注入恶意代码。
- en: Once you’re done performing your malicious actions, don’t leave the ARP tables
    in the corrupted state. After the attacker leaves the coffee shop, the victim
    will no longer be able to connect to the internet, and they’ll suspect foul play.
    You must restore the ARP tables to their original configurations before shutting
    down the attack. Thankfully, `arpspoof` does this for us. Shut down the attack
    by pressing CTRL-C in both terminals running `arpspoof`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 完成恶意操作后，不要让 ARP 表保持在损坏状态。在攻击者离开咖啡店后，受害者将无法连接到互联网，并且他们会怀疑有恶意行为发生。在关闭攻击之前，您必须将
    ARP 表恢复到原始配置。幸运的是，`arpspoof` 会为我们完成这项工作。通过在两个运行 `arpspoof` 的终端中按 CTRL-C 来关闭攻击。
- en: '**PROTECTING YOURSELF AGAINST ARP SPOOFING**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**保护自己免受 ARP 欺骗攻击**'
- en: Although it’s difficult to prevent an ARP spoofing attack, encrypting your internet
    traffic helps protect your information from being stolen or modified. Any traffic
    sent over an HTTPS connection is encrypted. However, manually checking to ensure
    that every URL you visit uses HTTPS is tedious, so the Electronic Frontier Foundation
    (*eff.org*) has created a web browser extension (for Chrome, Edge, Firefox, and
    Opera) called HTTPS Everywhere that ensures that all your web traffic goes over
    an HTTPS connection. Installing this plug-in is a great way to protect yourself.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管防止 ARP 欺骗攻击很困难，但加密你的互联网流量有助于保护你的信息免受窃取或篡改。任何通过 HTTPS 连接发送的流量都会被加密。然而，手动检查确保你访问的每个
    URL 都使用 HTTPS 很麻烦，所以电子前沿基金会（*eff.org*）创建了一个浏览器插件（适用于 Chrome、Edge、Firefox 和 Opera），名为
    HTTPS Everywhere，它确保所有你的网页流量都通过 HTTPS 连接。安装这个插件是保护自己的一个好方法。
- en: '**Detecting an ARP Spoofing Attack**'
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**检测 ARP 欺骗攻击**'
- en: In this section, we’ll write a Python program to heuristically detect an ARP
    spoofing attack. We’ll build our own ARP table using a dictionary and then check
    to see whether the packet we receive has changed an entry. We’ll assume that any
    packet that changes the state of our table is malicious.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，我们将编写一个 Python 程序来启发式地检测 ARP 欺骗攻击。我们将使用字典构建自己的 ARP 表，然后检查我们接收到的数据包是否修改了某个条目。我们假设任何修改我们表格状态的数据包都是恶意的。
- en: 'We’ll begin by selecting a library that can both intercept and parse the packets
    that pass through our NIC. Scapy is a popular Python package that allows us to
    read and send packets. Before you can use Scapy, you’ll need to install it with
    `pip3`. Use the following commands to get both `pip3` and Scapy:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先选择一个既能拦截又能解析通过网卡传输的数据包的库。Scapy 是一个流行的 Python 包，允许我们读取和发送数据包。在你使用 Scapy
    之前，你需要使用 `pip3` 安装它。使用以下命令获取 `pip3` 和 Scapy：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Once you’ve installed Scapy, you can import the `sniff` library, which allows
    us to capture and inspect the packets that pass through our NIC. Copy and paste
    the following Python program (*arpDetector.py*) into Mousepad or the code editor
    of your choice. To start Mousepad, run `**mousepad &**`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Scapy 后，你可以导入 `sniff` 库，它允许我们捕获并检查通过网卡传输的数据包。将以下 Python 程序（*arpDetector.py*）复制并粘贴到
    Mousepad 或你选择的代码编辑器中。要启动 Mousepad，运行 `**mousepad &**`。
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `sniff()` function ➊ in the Scapy library takes several optional parameters.
    In this implementation, we use the `count` parameter to indicate the number of
    packets to sniff. A count value of 0 means that the library should continuously
    sniff packets. We also use the `filter` parameter, which specifies the type of
    packet to capture. Because we’re interested in only ARP packets, we specify a
    filter value of `"arp"`. The `store` parameter indicates the number of packets
    to store. We set the parameter to 0 because we don’t want to waste memory by storing
    packets. Lastly, the `prn` parameter is a functional pointer that points to the
    function called whenever a packet is received. It takes a single parameter, which
    represents the received packet, as input.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Scapy 库中的 `sniff()` 函数 ➊ 接受多个可选参数。在这个实现中，我们使用 `count` 参数来表示要捕获的数据包数量。`count`
    的值为 0 表示库会持续捕获数据包。我们还使用 `filter` 参数来指定要捕获的数据包类型。因为我们只对 ARP 数据包感兴趣，所以指定过滤器值为 `"arp"`。`store`
    参数表示要存储的数据包数量。我们将该参数设置为 0，因为我们不希望通过存储数据包浪费内存。最后，`prn` 参数是一个功能指针，指向每次接收到数据包时调用的函数。它接受一个参数，表示接收到的数据包。
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As the program is running, open another Kali terminal and execute an ARP spoofing
    attack.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序运行时，打开另一个 Kali 终端并执行 ARP 欺骗攻击。
- en: 'Then, quit the attack by pressing CTRL-C. This will cause `arpspoof` to issue
    packets that restore the ARP table. When your Python program detects these packets,
    you’ll see a message like the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过按下 CTRL-C 来终止攻击。这将导致 `arpspoof` 发送恢复 ARP 表的包。当你的 Python 程序检测到这些数据包时，你将看到类似以下的消息：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Exercises**'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**练习**'
- en: Deepen your understanding of ARP spoofing and forwarding by attempting the following
    exercises, listed in order of increasing difficulty. The first exercise requires
    running only a single command, but the second is more challenging because it requires
    you to write a Python program and deepen your understanding of the Scapy library.
    The final exercise prompts you to apply the fundamentals you learned in this chapter
    to a new attack.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通过尝试以下练习，深入理解ARP欺骗和转发，练习按难度递增排序。第一个练习只需要运行一个命令，而第二个更具挑战性，因为它要求你编写一个Python程序并加深对Scapy库的理解。最后一个练习将提示你应用本章学到的基础知识，执行一种新的攻击。
- en: '***Inspect ARP Tables***'
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***检查ARP表***'
- en: 'Inspect the ARP tables on the Metasploitable virtual machine by running this
    command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下命令检查Metasploitable虚拟机上的ARP表：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Compare the state of the ARP tables on the Metasploitable server before and
    after the ARP spoofing attack. Do you notice any differences? If so, which entries
    have changed?
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 比较Metasploitable服务器在ARP欺骗攻击前后的ARP表状态。你是否注意到任何差异？如果有，哪些条目发生了变化？
- en: '***Implement an ARP Spoofer in Python***'
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***在Python中实现ARP欺骗工具***'
- en: 'In this chapter, we discussed how to execute an ARP spoofing attack. For this
    exercise, you’ll write a Python program that allows you to perform an ARP spoofing
    attack with a single command, shown here:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了如何执行ARP欺骗攻击。在此练习中，你将编写一个Python程序，使你能够通过一个命令执行ARP欺骗攻击，如下所示：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To do this, you’ll need to write a program that performs the steps discussed
    in this chapter. Your program should generate spoofed ARP packets and send them
    to both the victim and router. Once the attack is complete, your program should
    restore the ARP tables to their original state. Write your program (*arpSpoof.py*)
    in Python, and use the Scapy library to construct and send the packets. We’ve
    included skeleton code here:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，你需要编写一个程序，执行本章讨论的步骤。你的程序应生成伪造的ARP数据包，并将其发送到受害者和路由器。一旦攻击完成，程序应将ARP表恢复到原始状态。用Python编写你的程序（*arpSpoof.py*），并使用Scapy库构建和发送数据包。我们在此提供了一个框架代码：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Implement the `arp_spoof()` function ➊. This function should be very similar
    to `arp_restore()` ➋, which restores the ARP tables to their original state. You
    can use `arp_restore()` as a guide. Within that function, we create a new ARP
    packet. The `ARP()` function ➌ takes several options (`op`). The `"is-at"` option
    represents an ARP reply, and the `"who-has"` option represents an ARP request.
    You might also see these options listed as the numbers 2 and 1, respectively.
    Finally, we send the packet we created ➍.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`arp_spoof()`函数➊。该函数应与`arp_restore()`➋非常相似，后者用于将ARP表恢复到其原始状态。你可以参考`arp_restore()`作为指南。在该函数中，我们创建一个新的ARP数据包。`ARP()`函数➌接收多个选项（`op`）。其中，`"is-at"`选项表示ARP回复，而`"who-has"`选项表示ARP请求。你也可能会看到这些选项分别以数字2和1表示。最后，我们发送我们创建的数据包➍。
- en: '***MAC Flooding***'
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***MAC泛洪***'
- en: '*Content addressable memory (CAM)* is the memory hardware used in both routers
    and switches. In switches, these memories map MAC addresses to the corresponding
    ports. Thus, CAM can store only a limited number of entries. If the switch’s CAM
    is full, it will broadcast a message on all ports. Attackers can force this behavior
    by sending the switch packets with random MAC addresses. Write a Scapy program
    that performs this attack.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*内容寻址存储器（CAM）* 是路由器和交换机中使用的存储硬件。在交换机中，这些存储器将MAC地址映射到相应的端口。因此，CAM只能存储有限数量的条目。如果交换机的CAM已满，它将通过所有端口广播消息。攻击者可以通过向交换机发送带有随机MAC地址的数据包来强制交换机执行这种行为。编写一个Scapy程序来执行此攻击。'
