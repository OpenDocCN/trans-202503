- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages1853819.png.jpg)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![没有标题的图片](httpatomoreillycomsourcenostarchimages1853819.png.jpg)'
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*What seems complex from a distance is often quite simple when you look closely
    enough.*'
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*从远处看似复杂的东西，仔细看往往会发现其实非常简单。*'
- en: At first glance, learning how to use Ruby can seem fairly simple. Developers
    around the world find Ruby’s syntax to be graceful and straightforward. You can
    express algorithms in a very natural way, and then it’s just a matter of typing
    `ruby` at the command line and pressing enter, and your Ruby script is running.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 初看之下，学习如何使用 Ruby 似乎相当简单。世界各地的开发者都认为 Ruby 的语法优雅而直接。你可以以非常自然的方式表达算法，然后只需在命令行中输入`ruby`并按下回车，你的
    Ruby 脚本就开始运行了。
- en: However, Ruby’s syntax is *deceptively* simple; in fact, Ruby employs sophisticated
    ideas from complex languages like Lisp and Smalltalk. On top of this, Ruby is
    dynamic; using metaprogramming, Ruby programs can inspect and change themselves.
    Beneath this thin veneer of simplicity, Ruby is a very complex tool.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Ruby 的语法是*表面上*简单的；实际上，Ruby 运用了来自复杂语言如 Lisp 和 Smalltalk 的复杂思想。在此基础上，Ruby 是动态的；通过元编程，Ruby
    程序可以自我检查并修改自己。在这层看似简单的外壳下，Ruby 是一个非常复杂的工具。
- en: By looking very closely at Ruby—by learning how Ruby itself works internally—you’ll
    discover that a few important computer science concepts underpin Ruby’s many features.
    By studying these, you’ll gain a deeper understanding of what is happening under
    the hood as you use the language. In the process, you’ll learn how the team that
    built Ruby *intends* for you to use the language.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通过仔细观察 Ruby——通过学习 Ruby 本身是如何在内部工作的——你会发现一些重要的计算机科学概念支撑着 Ruby 的众多特性。通过学习这些概念，你将更深入地理解在使用该语言时，内部到底发生了什么。在这个过程中，你将了解到构建
    Ruby 的团队是如何*期望*你使用这门语言的。
- en: '*Ruby Under a Microscope* will show you what happens inside Ruby when you run
    a simple program. You’ll learn how Ruby understands and executes your code, and
    with the help of extensive diagrams, you’ll build a mental model of what Ruby
    does when you create an object or call a block.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*Ruby 显微镜下*将向你展示，当你运行一个简单的程序时，Ruby 内部发生了什么。你将学到 Ruby 是如何理解和执行你的代码的，并且通过大量的图示，你将建立一个关于
    Ruby 在创建对象或调用块时所做的事情的心理模型。'
- en: Who This Book Is For
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适合谁阅读本书
- en: '*Ruby Under a Microscope* is not a beginner’s guide to learning Ruby. I assume
    you already know how to program in Ruby and that you use it daily. There are already
    many great books that teach Ruby basics; the world doesn’t need another one.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*Ruby 显微镜下*并不是一本面向初学者的 Ruby 学习指南。我假设你已经知道如何编写 Ruby 程序，并且每天都在使用它。已经有许多优秀的书籍教
    Ruby 基础知识；世界不需要再来一本。'
- en: Although Ruby itself is written in C, a confusing, low-level language, no C
    programming knowledge is required to read this book. *Ruby Under a Microscope*
    will give you a high-level, conceptual understanding of how Ruby works without
    your having to understand how to program in C. Inside this book, you’ll find hundreds
    of diagrams that make the low-level details of Ruby’s internal implementation
    easy to understand.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Ruby 本身是用 C 语言编写的，这是一种混乱且底层的语言，但阅读本书并不需要任何 C 语言的编程知识。*Ruby 显微镜下*将为你提供 Ruby
    工作原理的高级概念理解，而无需你了解如何编写 C 语言程序。在本书中，你会看到数百个图示，这些图示使得 Ruby 内部实现的底层细节变得易于理解。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*Readers familiar with C will find a few snippets of C code that give a more
    concrete sense of what’s going on inside Ruby. I’ll also tell you where the code
    derives from, making it easier for you to start studying the C code yourself.
    If you’re not interested in the C code details, just skip over these sections.*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*熟悉 C 的读者将会发现一些 C 代码片段，这些片段能更具体地帮助你理解 Ruby 内部发生了什么。我还会告诉你这些代码的来源，帮助你更容易地开始研究
    C 代码。如果你对 C 代码的细节不感兴趣，可以跳过这些部分。*'
- en: Using Ruby to Test Itself
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ruby 来进行自我测试
- en: It doesn’t matter how beautiful your theory is, it doesn’t matter how smart
    you are. If it doesn’t agree with experiment, it’s wrong.
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不管你的理论多么美丽，不管你多么聪明。如果它与实验不符，那它就是错的。
- en: ''
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Richard Feynman
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: — 理查德·费曼
- en: Imagine that the entire world functioned like a large computer program. To explain
    natural phenomena or experimental results, physicists like Richard Feynman would
    simply consult this program. (A scientist’s dream come true!) But of course, the
    universe is not so simple.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，如果整个世界像一个大型计算机程序一样运作。为了解释自然现象或实验结果，像理查德·费曼这样的物理学家只需查阅这个程序。（科学家的梦想成真！）但当然，宇宙并非如此简单。
- en: 'Fortunately, to discover how Ruby works, all we need to do is read its internal
    C source code: a kind of theoretical physics that describes Ruby’s behavior. Just
    as Maxwell’s equations explain electricity and magnetism, Ruby’s internal C source
    code explains what happens when you pass an argument to a method or include a
    module in a class.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，要发现 Ruby 是如何工作的，我们只需要阅读它的内部 C 源代码：这是一种描述 Ruby 行为的理论物理学。就像麦克斯韦方程式解释电力和磁性一样，Ruby
    的内部 C 源代码解释了当你传递一个参数给方法或将模块包含在类中时发生了什么。
- en: Like scientists, however, we need to perform experiments to be sure our hypotheses
    are correct. After learning about each part of Ruby’s internal implementation,
    we’ll perform an experiment and use Ruby to test itself! We’ll run small Ruby
    test scripts to see whether they produce the expected output or run as quickly
    or as slowly as we expect. We’ll find out if Ruby actually behaves the way theory
    says it should. And since these experiments are written in Ruby, you can try them
    yourself.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，像科学家一样，我们需要进行实验，确保我们的假设是正确的。在了解 Ruby 内部实现的每一部分之后，我们将进行实验，使用 Ruby 来测试自己！我们将运行小的
    Ruby 测试脚本，查看它们是否产生预期的输出，或者是否以我们预期的速度运行。我们将找出 Ruby 是否真的按理论中所说的那样表现。而且，由于这些实验是用
    Ruby 编写的，你可以自己尝试。
- en: Which Implementation of Ruby?
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哪种 Ruby 实现？
- en: Ruby was invented by Yukihiro “Matz” Matsumoto in 1993, and the original, standard
    version of Ruby is often known as *Matz’s Ruby Interpreter (MRI)*. Most of this
    book will discuss how MRI works; essentially, we’ll learn how Matz implemented
    his own language.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby 由松本行弘（Yukihiro “Matz” Matsumoto）于 1993 年发明，原始的标准版本 Ruby 通常被称为 *Matz 的 Ruby
    解释器（MRI）*。本书的大部分内容将讨论 MRI 是如何工作的；基本上，我们将学习 Matz 是如何实现自己的语言的。
- en: Over the years many alternative implementations of Ruby have been written. Some,
    like RubyMotion, MacRuby, and IronRuby, were designed to run on specific platforms.
    Others, like Topaz and JRuby, were built using programming languages other than
    C. One version, Rubinius, was built using Ruby itself. And Matz himself is now
    working on a smaller version of Ruby called *mruby*, designed to run inside another
    application.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，许多 Ruby 的替代实现被编写出来。一些实现，如 RubyMotion、MacRuby 和 IronRuby，是为了在特定平台上运行而设计的。其他实现，如
    Topaz 和 JRuby，是用 C 以外的编程语言构建的。有一个版本，Rubinius，是用 Ruby 本身构建的。现在，Matz 本人正在开发一个名为
    *mruby* 的更小版本 Ruby，旨在嵌入到其他应用程序中运行。
- en: 'I explore the Ruby implementations JRuby and Rubinius in detail in [Chapter 10](ch10.html
    "Chapter 10. JRuby: Ruby on the JVM"), [Chapter 11](ch11.html "Chapter 11. Rubinius:
    Ruby Implemented with Ruby"), and [Chapter 12](ch12.html "Chapter 12. Garbage
    Collection in MRI, JRuby, and Rubinius"). You’ll learn how they use different
    technologies and philosophies to implement the same language. As you study these
    alternative Rubies, you’ll gain additional perspective on MRI’s implementation.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我在**[第10章](ch10.html "第10章. JRuby：JVM 上的 Ruby")**、**[第11章](ch11.html "第11章.
    Rubinius：用 Ruby 实现 Ruby")** 和 **[第12章](ch12.html "第12章. MRI、JRuby 和 Rubinius 中的垃圾回收")**
    中详细探讨了 Ruby 的实现 JRuby 和 Rubinius。你将了解它们如何使用不同的技术和理念来实现同一种语言。通过研究这些替代 Ruby，你将对
    MRI 的实现获得更多的视角。
- en: Overview
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: 'In **[Chapter 1](ch01.html "Chapter 1. Tokenization and Parsing")**, you’ll
    learn how Ruby parses your Ruby program. This is one of the most fascinating areas
    of computer science: How can a computer language be smart enough to understand
    the code you give it? What does this intelligence really consist of?'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在**[第1章](ch01.html "第1章. 分词和解析")**中，你将学习 Ruby 如何解析你的 Ruby 程序。这是计算机科学中最吸引人的领域之一：计算机语言如何足够智能，理解你给它的代码？这种智能到底由什么组成？
- en: '**[Chapter 2](ch02.html "Chapter 2. Compilation")** explains how Ruby uses
    a compiler to convert your program into a different language before running it.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第2章](ch02.html "第2章. 编译")** 解释了 Ruby 如何使用编译器将你的程序转换成另一种语言，然后再运行它。'
- en: '**[Chapter 3](ch03.html "Chapter 3. How Ruby Executes Your Code")** looks at
    the virtual machine Ruby uses to run your program. What’s inside this machine?
    How does it work? We’ll look deep inside this virtual machine to find out.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第3章](ch03.html "第3章. Ruby 如何执行你的代码")** 讲解了 Ruby 用来运行你的程序的虚拟机。这个机器里面是什么？它是如何工作的？我们将深入研究这个虚拟机，找出答案。'
- en: '**[Chapter 4](ch04.html "Chapter 4. Control Structures and Method Dispatch")**
    continues the description of Ruby’s virtual machine, looking at how Ruby implements
    control structures such as `if...else` statements and `while...end` loops. It
    also explores how Ruby implements method calls.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第4章](ch04.html "第4章. 控制结构与方法调度")** 继续描述Ruby的虚拟机，着重讲解Ruby如何实现控制结构，如`if...else`语句和`while...end`循环。还探讨了Ruby是如何实现方法调用的。'
- en: '**[Chapter 5](ch05.html "Chapter 5. Objects and Classes")** discusses Ruby’s
    implementation of objects and classes. How are objects and classes related? What
    would we find inside a Ruby object?'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第5章](ch05.html "第5章. 对象与类")** 讨论了Ruby中对象与类的实现。对象和类是如何关联的？我们在一个Ruby对象内部会发现什么？'
- en: '**[Chapter 6](ch06.html "Chapter 6. Method Lookup and Constant Lookup")** examines
    Ruby modules and their relationship to classes. You’ll learn how Ruby finds methods
    and constants in your Ruby code.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第6章](ch06.html "第6章. 方法查找与常量查找")** 考察了Ruby模块及其与类的关系。你将学会Ruby如何在你的代码中查找方法和常量。'
- en: '**[Chapter 7](ch07.html "Chapter 7. The Hash Table: The Workhorse of Ruby Internals")**
    explores Ruby’s implementation of hash tables. As it turns out, MRI uses hash
    tables for much of its internal data, not only for data you save in Ruby hash
    objects.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第7章](ch07.html "第7章. 哈希表：Ruby内部工作的基础")** 探索了Ruby对哈希表的实现。事实证明，MRI使用哈希表来存储大量的内部数据，而不仅仅是你在Ruby哈希对象中保存的数据。'
- en: '**[Chapter 8](ch08.html "Chapter 8. How Ruby Borrowed a Decades-Old Idea from
    Lisp")** reveals that one of Ruby’s most elegant and useful features, blocks,
    is based on an idea originally developed for Lisp.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第8章](ch08.html "第8章. Ruby如何借鉴Lisp中一个已有的理念")** 揭示了Ruby最优雅且最有用的特性之一——块，是基于最初为Lisp开发的一个理念。'
- en: In **[Chapter 9](ch09.html "Chapter 9. Metaprogramming")** tackles one of the
    most difficult topics for Ruby developers. By studying how Ruby implements metaprogramming
    internally, you’ll learn how to use metaprogramming effectively.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第9章](ch09.html "第9章. 元编程")** 讨论了Ruby开发者面临的最难题之一。通过研究Ruby如何在内部实现元编程，你将学会如何有效地使用元编程。'
- en: '**[Chapter 10](ch10.html "Chapter 10. JRuby: Ruby on the JVM")** introduces
    JRuby, an alternative version of Ruby implemented with Java. You’ll learn how
    JRuby uses the Java Virtual Machine (JVM) to run your Ruby programs faster.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第10章](ch10.html "第10章. JRuby：在JVM上运行Ruby")** 介绍了JRuby，这是一个用Java实现的Ruby版本。你将学到如何通过Java虚拟机（JVM）使你的Ruby程序运行得更快。'
- en: '**[Chapter 11](ch11.html "Chapter 11. Rubinius: Ruby Implemented with Ruby")**
    looks at one of the most interesting and innovative implementations of Ruby: Rubinius.
    You’ll learn how to locate—and modify—the Ruby code in Rubinius to see how a particular
    Ruby method works.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第11章](ch11.html "第11章. Rubinius：用Ruby实现Ruby")** 讲解了Ruby最有趣、最具创新性的实现之一：Rubinius。你将学会如何定位并修改Rubinius中的Ruby代码，查看特定Ruby方法的工作原理。'
- en: '**[Chapter 12](ch12.html "Chapter 12. Garbage Collection in MRI, JRuby, and
    Rubinius")** concludes with a look at garbage collection (GC), one of the most
    mysterious and confusing topics in computer science. You’ll see how Rubinius and
    JRuby use very different GC algorithms from those used by MRI.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第12章](ch12.html "第12章. MRI、JRuby和Rubinius中的垃圾回收")** 以垃圾回收（GC）为主题作结，这是计算机科学中最神秘、最令人困惑的话题之一。你将看到Rubinius和JRuby使用与MRI不同的GC算法。'
- en: By studying all of these aspects of Ruby’s internal implementation, you’ll acquire
    a deeper understanding of what happens when you use Ruby’s complex feature set.
    Just as Antonie van Leeuwenhoek first saw microbes and cells looking through early
    microscopes in the 1600s, by looking inside of Ruby you’ll discover a wide array
    of interesting structures and algorithms. Join me on a fascinating behind-the-scenes
    look at what brings Ruby to life!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过研究Ruby内部实现的所有这些方面，你将更深入地理解当你使用Ruby复杂的功能集时，发生了什么。就像安东尼·范·列文虎克在17世纪通过早期显微镜首次看到微生物和细胞一样，深入Ruby内部，你将发现一系列有趣的结构和算法。加入我，跟随我一探究竟，看看是什么赋予了Ruby生命！
