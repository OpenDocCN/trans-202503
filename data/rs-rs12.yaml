- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Rust Without the Standard Library
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 无标准库的 Rust
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: Rust is intended to be a language for systems programming, but it isn’t always
    clear what that really means. At the very least, a systems programming language
    is usually expected to allow the programmer to write programs that do not rely
    on the operating system and can run directly on the hardware, whether that is
    a thousand-core supercomputer or an embedded device with a single-core ARM processor
    with a clock speed of 72MHz and 256KiB of memory.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Rust旨在成为一种系统编程语言，但它究竟意味着什么并不总是显而易见。至少，系统编程语言通常被期望允许程序员编写不依赖操作系统并可以直接在硬件上运行的程序，无论这个硬件是一个千核超级计算机，还是一个拥有72MHz时钟速度和256KiB内存的单核ARM嵌入式设备。
- en: In this chapter, we’ll take a look at how you can use Rust in unorthodox environments,
    such as those without an operating system, or those that don’t even have the ability
    to dynamically allocate memory! Much of our discussion will focus on the `#![no_std]`
    attribute, but we’ll also investigate Rust’s `alloc` module, the Rust runtime
    (yes, Rust does technically have a runtime), and some of the tricks you have to
    play to write up a Rust binary for use in such an environment.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何在非常规环境中使用Rust，例如没有操作系统的环境，或者那些甚至无法动态分配内存的环境！我们的讨论将重点关注`#![no_std]`属性，但我们也将研究Rust的`alloc`模块、Rust的运行时（是的，Rust确实有一个运行时）以及在这种环境中编写Rust二进制文件时需要采用的一些技巧。
- en: Opting Out of the Standard Library
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 放弃标准库
- en: As a language, Rust consists of multiple independent pieces. First there’s the
    compiler, which dictates the grammar of the Rust language and implements type
    checking, borrow checking, and the final conversion into machine-runnable code.
    Then there’s the standard library, `std`, which implements all the useful common
    functionality that most programs need—things like file and network access, a notion
    of time, facilities for printing and reading user input, and so on. But `std`
    itself is also a composite, building on top of two other, more fundamental libraries
    called `core` and `alloc`. In fact, many of the types and functions in `std` are
    just re-exports from those two libraries.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一门语言，Rust由多个独立的部分组成。首先是编译器，它规定了Rust语言的语法，并实现了类型检查、借用检查以及最终转换为机器可运行代码的过程。然后是标准库`std`，它实现了大多数程序需要的所有常用功能——例如文件和网络访问、时间的概念、打印和读取用户输入的功能等。但`std`本身也是一个复合体，建立在两个更基础的库`core`和`alloc`之上。事实上，`std`中的许多类型和函数只是从这两个库重新导出的。
- en: The `core` library sits at the bottom of the standard library pyramid and contains
    any functionality that depends on nothing but the Rust language itself and the
    hardware the resulting program is running on—things like sorting algorithms, marker
    types, fundamental types such as `Option` and `Result`, low-level operations such
    as atomic memory access methods, and compiler hints. The `core` library works
    as if the operating system does not exist, so there is no standard input, no filesystem,
    and no network. Similarly, there is no memory allocator, so types like `Box`,
    `Vec`, and `HashMap` are nowhere to be seen.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`core`库位于标准库金字塔的底部，包含任何仅依赖于Rust语言本身和程序运行时硬件的功能——如排序算法、标记类型、基础类型如`Option`和`Result`、低级操作如原子内存访问方法以及编译器提示等。`core`库的工作方式就像操作系统不存在一样，因此没有标准输入、没有文件系统，也没有网络。同样，也没有内存分配器，因此像`Box`、`Vec`和`HashMap`这样的类型也无法找到。'
- en: Above `core` sits `alloc`, which holds all the functionality that depends on
    dynamic memory allocation, such as collections, smart pointers, and dynamically
    allocated strings (`String`). We’ll get back to `alloc` in the next section.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在`core`之上是`alloc`，它包含所有依赖于动态内存分配的功能，如集合、智能指针和动态分配的字符串（`String`）。我们将在下一节中回到`alloc`。
- en: Most of the time, because `std` re-exports everything in `core` and `alloc`,
    developers do not need to know about the differences among the three libraries.
    This means that even though `Option` technically lives in `core::option::Option`,
    you can access it through `std::option::Option`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，因为`std`重新导出了`core`和`alloc`中的所有内容，开发者不需要了解这三个库之间的差异。这意味着，尽管`Option`技术上存在于`core::option::Option`中，但你可以通过`std::option::Option`来访问它。
- en: However, in an unorthodox environment, such as on an embedded device where there
    is no operating system, the distinction is crucial. While it’s fine to use an
    `Iterator` or to sort a list of numbers, an embedded device may simply have no
    meaningful way to access a file (as that requires a filesystem) or print to the
    terminal (as that requires a terminal)—so there’s no `File` or `println!`. Furthermore,
    the device may have so little memory that dynamic memory allocation is a luxury
    you can’t afford, and thus anything that allocates memory on the fly is a no-go—say
    goodbye to `Box` and `Vec`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在像嵌入式设备这样的非常规环境中，情况就大不相同，因为这类设备没有操作系统，这种区分就变得至关重要。虽然使用 `Iterator` 或对数字列表进行排序是可以的，但嵌入式设备可能根本没有任何有效的方式来访问文件（因为这需要文件系统）或输出到终端（因为这需要终端）—因此没有
    `File` 或 `println!`。此外，设备的内存可能极其有限，以至于动态内存分配成为了一种你无法承受的奢侈品，因此任何在运行时分配内存的操作都是不可行的—告别
    `Box` 和 `Vec`。
- en: 'Rather than force developers to carefully avoid those basic constructs in such
    environments, Rust provides a way to opt out of anything but the core functionality
    of the language: the `#![no_std]` attribute. This is a crate-level attribute (`#!`)
    that switches the prelude (see the box on page 213) for the crate from `std::prelude`
    to `core::prelude` so that you don’t accidentally depend on anything outside of
    `core` that might not work in your target environment.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免强迫开发人员在这类环境中小心避开那些基本构造，Rust 提供了一种方法，使得开发者可以选择退出除语言核心功能之外的所有内容：`#![no_std]`
    属性。这是一个 crate 级别的属性（`#!`），它将 crate 的预定义（参见第 213 页的框）从 `std::prelude` 切换到 `core::prelude`，从而避免你无意间依赖
    `core` 以外的任何在目标环境中可能无法正常工作的内容。
- en: 'However, that is *all* the `#![no_std]` attribute does—it does not prevent
    you from bringing in the standard library explicitly with `extern std`. This may
    be surprising, as it means a crate marked `#![no_std]` may in fact not be compatible
    with a target environment that does not support `std`, but this design decision
    was intentional: it allows you to mark your crate as being `no_std`-compatible
    but to still use features from the standard library when certain features are
    enabled. For example, many crates have a feature named `std` that, when enabled,
    gives access to more sophisticated APIs and integrations with types that live
    in `std`. This allows crate authors to both supply the core implementation for
    constrained use cases and add bells and whistles for consumers on more standard
    platforms.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`#![no_std]` 属性的作用仅仅是*全部*—它并不会阻止你通过 `extern std` 显式引入标准库。这可能让人感到意外，因为这意味着标记为
    `#![no_std]` 的 crate 实际上可能与不支持 `std` 的目标环境不兼容，但这一设计决定是有意为之：它允许你将 crate 标记为 `no_std`
    兼容，但在启用某些特性时仍然可以使用标准库中的功能。例如，许多 crate 有一个名为 `std` 的特性，当启用时，可以访问更复杂的 API，并与 `std`
    中的类型进行集成。这使得 crate 的作者可以为受限的使用场景提供核心实现，并为更标准平台上的用户添加附加功能。
- en: Dynamic Memory Allocation
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态内存分配
- en: As we discussed in Chapter 1, a machine has many different regions of memory,
    and each one serves a distinct purpose. There’s static memory for your program
    code and static variables, there’s the stack for function-local variables and
    function arguments, and there’s the heap for, well, everything else. The heap
    supports allocating variably sized regions of memory at runtime, and those allocations
    stick around for however long you want them to. This makes heap memory extremely
    versatile, and as a result, you find it used everywhere. `Vec`, `String`, `Arc`
    and `Rc`, and the collection types are all implemented in heap memory, which allows
    them to grow and shrink over time and to be returned from functions without the
    borrow checker complaining.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在第一章中讨论的，计算机有许多不同的内存区域，每个区域都有不同的用途。程序代码和静态变量占用静态内存，函数局部变量和函数参数则使用栈内存，堆内存则用于，嗯，其他所有内容。堆支持在运行时分配可变大小的内存区域，这些分配会持续存在，直到你不再需要它们为止。这使得堆内存极为灵活，因此你会在各个地方看到它的使用。`Vec`、`String`、`Arc`
    和 `Rc` 以及集合类型都在堆内存中实现，这使得它们可以随着时间的推移而增长或缩小，并且能够从函数中返回而不会被借用检查器抱怨。
- en: Behind the scenes, the heap is really just a huge chunk of contiguous memory
    that is managed by an *allocator*. It’s the allocator that provides the illusion
    of distinct allocations in the heap, ensuring that those allocations do not overlap
    and that regions of memory that are no longer in use are reused. By default Rust
    uses the system allocator, which is generally the one dictated by the standard
    C library. This works well for most use cases, but if necessary, you can override
    which allocator Rust will use through the `GlobalAlloc` trait combined with the
    `#[global_allocator]` attribute, which requires an implementation of an `alloc`
    method for allocating a new segment of memory and `dealloc` for returning a past
    allocation to the allocator to reuse.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，堆实际上只是一个由*分配器*管理的大块连续内存。正是分配器提供了堆中不同分配的假象，确保这些分配不重叠，并且不再使用的内存区域能够被重用。默认情况下，Rust使用系统分配器，通常这是由标准C库规定的分配器。这适用于大多数用例，但如果有需要，你可以通过`GlobalAlloc`特性和`#[global_allocator]`属性来覆盖Rust使用的分配器，这要求实现一个`alloc`方法来分配新内存段，以及`dealloc`方法来将过去的分配返回给分配器进行重用。
- en: In environments without an operating system, the standard C library is also
    generally not available, and so neither is the standard system allocator. For
    that reason, `#![no_std]` also excludes all types that rely on dynamic memory
    allocation. But since it’s entirely possible to implement a memory allocator without
    access to a full-blown operating system, Rust allows you to opt back into just
    the part of the Rust standard library that requires an allocator without opting
    into all of `std` through the `alloc` crate. The `alloc` crate comes with the
    standard Rust toolchain (just like `core` and `std`) and contains most of your
    favorite heap-allocation types, like `Box`, `Arc`, `String`, `Vec`, and `BTreeMap`.
    `HashMap` is not among them, since it relies on random number generation for its
    key hashing, which is an operating system facility. To use types from `alloc`
    in a `no_std` context, all you have to do is replace any imports of those types
    that previously had `use std::` with `use alloc::` instead. Do keep in mind, though,
    that depending on `alloc` means your `#![no_std]` crate will no longer be usable
    by any program that disallows dynamic memory allocation, either because it doesn’t
    have an allocator or because it has too little memory to permit dynamic memory
    allocation in the first place.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有操作系统的环境中，标准C库通常也不可用，因此标准系统分配器也不可用。由于这个原因，`#![no_std]`也排除了所有依赖于动态内存分配的类型。但由于完全可以在没有完整操作系统的情况下实现内存分配器，Rust允许你仅选择需要分配器的Rust标准库部分，而不需要通过`alloc`包选择所有的`std`。`alloc`包随标准Rust工具链一起提供（就像`core`和`std`一样），包含了你最喜欢的堆分配类型，如`Box`、`Arc`、`String`、`Vec`和`BTreeMap`。`HashMap`不在其中，因为它依赖于随机数生成来进行键值哈希，这需要操作系统的支持。要在`no_std`环境中使用`alloc`中的类型，你只需将之前引入`use
    std::`的代码替换为`use alloc::`即可。不过，请记住，依赖于`alloc`意味着你的`#![no_std]`包将不再可供任何禁止动态内存分配的程序使用，不论是因为它没有分配器，还是因为内存不足以进行动态内存分配。
- en: It might strike you as odd that it’s possible to write nontrivial crates that
    use *only* `core`. After all, they can’t use collections, the `String` type, the
    network, or the filesystem, and they don’t even have a notion of time! The trick
    to `core`-only crates is to utilize the stack and static allocations. For example,
    for a heapless vector, you allocate enough memory up front—either in static memory
    or in a function’s stack frame—for the largest number of elements you expect the
    vector to be able to hold, and then augment it with a `usize` that tracks how
    many elements it currently holds. To push to the vector, you write to the next
    element in the (statically sized) array and increment a variable that tracks the
    number of elements. If the vector’s length ever reaches the static size, the next
    push fails. [Listing 12-1](#listing12-1) gives an example of such a heapless vector
    type implemented using `const` generics.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会觉得奇怪，居然可以编写仅使用 `core` 的非平凡 crate。毕竟，它们不能使用集合、`String` 类型、网络或文件系统，甚至没有时间的概念！`core`
    仅 crate 的诀窍在于利用栈和静态分配。例如，对于一个无堆向量，你提前分配足够的内存——无论是在静态内存中还是在函数的栈帧中——用于你预期该向量能够容纳的最大元素数量，然后通过一个
    `usize` 来追踪它当前持有的元素数量。要向向量中推送元素，你只需写入（静态大小的）数组中的下一个元素，并递增一个变量以跟踪元素数量。如果向量的长度达到了静态大小，下一次推送将会失败。[列表
    12-1](#listing12-1) 给出了一个使用 `const` 泛型实现的无堆向量类型的示例。
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 12-1: A heapless vector type'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 12-1：一个无堆向量类型
- en: We make `ArrayVec` generic over both the type of its elements, `T`, and the
    maximum number of elements, `N`, and then represent the vector as an array of
    `N` *optional* `T`s. This structure always stores `N` `Option<T>`, so it has a
    size known at compile time and can be stored on the stack, but it can still act
    like a vector by using runtime information to inform how we access the array.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `ArrayVec` 泛型化，既包含元素类型 `T`，也包含最大元素数量 `N`，然后将向量表示为一个包含 `N` 个 *可选* `T` 的数组。该结构始终存储
    `N` 个 `Option<T>`，因此它的大小在编译时已知，可以存储在栈上，但它仍然可以像向量一样，通过使用运行时信息来指导我们如何访问该数组。
- en: The Rust Runtime
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Rust 运行时
- en: You may have heard the claim that Rust doesn’t have a runtime. While that’s
    true at a high level—it doesn’t have a garbage collector, an interpreter, or a
    built-in user-level scheduler—it’s not really true in the strictest sense. Specifically,
    Rust does have some special code that runs before your `main` function and in
    response to certain special conditions in your code, which really is a form of
    bare-bones runtime.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能听说过 Rust 没有运行时的说法。虽然从高层来说这是真的——它没有垃圾回收器、解释器或内置的用户级调度器——但从严格意义上说这并不完全正确。具体来说，Rust
    确实有一些特殊代码，在你的 `main` 函数之前运行，并在你的代码中响应某些特殊条件，这实际上是一种最简化的运行时形式。
- en: The Panic Handler
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 恐慌处理器
- en: The first bit of such special code is Rust’s *panic handler*. When Rust code
    panics by invoking `panic!` or `panic_any`, the panic handler dictates what happens
    next. When the Rust runtime is available—as is the case on most targets that supply
    `std`—the panic handler first invokes the *panic hook* set via `std::panic::set_hook`,
    which prints a message and optionally a backtrace to standard error by default.
    It then either unwinds the current thread’s stack or aborts the process, depending
    on the panic setting chosen for current compilation (either through Cargo configuration
    or arguments passed directly to `rustc`).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这种特殊代码的第一部分是 Rust 的 *恐慌处理器*。当 Rust 代码通过调用 `panic!` 或 `panic_any` 触发恐慌时，恐慌处理器决定接下来发生的事情。当
    Rust 运行时可用时——如大多数提供 `std` 的目标——恐慌处理器首先调用通过 `std::panic::set_hook` 设置的 *恐慌钩子*，该钩子默认会向标准错误打印一条消息并可选择性地打印回溯。然后，它会根据当前编译选项（通过
    Cargo 配置或直接传递给 `rustc` 的参数）决定是展开当前线程的堆栈，还是终止进程。
- en: However, not all targets provide a panic handler. For example, most embedded
    targets do not, as there isn’t necessarily a single implementation that makes
    sense across all the uses for such a target. For targets that don’t supply a panic
    handler, Rust still needs to know what to do when a panic occurs. To that end,
    we can use the `#[panic_handler]` attribute to decorate a single function in the
    program with the signature `fn(&PanicInfo) -> !`. That function is called whenever
    the program invokes a panic, and it is passed information about the panic in the
    form of a `core::panic::PanicInfo`. What the function does with that information
    is entirely unspecified, but it can never return (as indicated by the `!` return
    type). This is important, since the Rust compiler assumes that no code that follows
    a panic is run.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并非所有目标平台都提供 panic 处理程序。例如，大多数嵌入式目标平台并不提供，因为针对所有用途的目标平台并没有一个通用的实现方式。对于那些不提供
    panic 处理程序的目标平台，Rust 仍然需要知道在发生 panic 时该如何处理。为此，我们可以使用 `#[panic_handler]` 属性来装饰程序中一个符合签名
    `fn(&PanicInfo) -> !` 的函数。每当程序触发 panic 时，该函数会被调用，并且会传递一个 `core::panic::PanicInfo`
    类型的 panic 信息。函数如何处理这些信息完全没有规定，但它永远不能返回（这由 `!` 返回类型表示）。这一点非常重要，因为 Rust 编译器假定 panic
    后的代码永远不会被执行。
- en: There are many valid ways for a panic handler to avoid returning. The standard
    panic handler unwinds the thread’s stack and then terminates the thread, but a
    panic handler can also halt the thread using `loop {}`, abort the program, or
    do anything else that makes sense for the target platform, even as far as resetting
    the device.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: panic 处理程序有很多有效的方式来避免返回。标准的 panic 处理程序会展开线程的栈，然后终止该线程，但 panic 处理程序也可以使用 `loop
    {}` 来停止线程、终止程序，或者做任何其他适合目标平台的操作，甚至是重置设备。
- en: Program Initialization
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 程序初始化
- en: Contrary to popular belief, the `main` function is not the first thing that
    runs in a Rust program. Instead, the `main` symbol in a Rust binary actually points
    to a function in the standard library called `lang_start`. That function performs
    the (fairly minimal) setup for the Rust runtime, including stashing the program’s
    command-line arguments in a place where `std::env::args` can get to them, setting
    the name of the main thread, handling panics in the `main` function, flushing
    standard output on program exit, and setting up signal handlers. The `lang_start`
    function in turn calls the `main` function defined in your crate, which then doesn’t
    need to think about how, for example, Windows and Linux differ in how command-line
    arguments are passed in.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 与普遍的看法相反，`main` 函数并不是 Rust 程序中首先运行的部分。实际上，在 Rust 二进制文件中，`main` 符号指向的是标准库中名为
    `lang_start` 的函数。该函数执行（相对简单的）Rust 运行时的初始化工作，包括将程序的命令行参数存储在 `std::env::args` 可以访问的地方、设置主线程的名称、处理
    `main` 函数中的 panic、在程序退出时刷新标准输出以及设置信号处理器。`lang_start` 函数随后会调用你在 crate 中定义的 `main`
    函数，这样你就不需要考虑如何处理例如 Windows 和 Linux 在传递命令行参数时的差异了。
- en: This arrangement works well on platforms where all of that setup is sensible
    and supported, but it presents a problem on embedded platforms where main memory
    may not even be accessible when the program starts. On such platforms, you’ll
    generally want to opt out of the Rust initialization code entirely using the `#![no_main]`
    crate-level attribute. This attribute completely omits `lang_start`, meaning you
    as the developer must figure out how the program should be started, such as by
    declaring a function with `#[export_name = "main"]` that matches the expected
    launch sequence for the target platform.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这种安排在所有这些设置合理且受支持的平台上运作良好，但在一些嵌入式平台上会遇到问题，因为程序启动时主内存可能无法访问。在这种平台上，你通常需要完全跳过
    Rust 的初始化代码，使用 `#![no_main]` crate 级别属性。这个属性会完全跳过 `lang_start`，意味着作为开发者的你必须弄清楚如何启动程序，例如通过声明一个使用
    `#[export_name = "main"]` 的函数来匹配目标平台预期的启动序列。
- en: The Out-of-Memory Handler
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内存不足处理程序
- en: If you write a program that wishes to use `alloc` but is built for a platform
    that does not supply an allocator, you must dictate which allocator to use using
    the `#[global_allocator]` attribute mentioned earlier in the chapter. But you
    also have to specify what happens if that global allocator fails to allocate memory.
    Specifically, you need to define an *out-of-memory handler* to say what should
    happen if an infallible operation like `Vec::push` needs to allocate more memory,
    but the allocator cannot supply it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你编写的程序希望使用 `alloc`，但它是为没有提供分配器的平台构建的，那么你必须通过本章前面提到的 `#[global_allocator]`
    属性来指定使用哪个分配器。但你还必须指定如果该全局分配器无法分配内存时该怎么办。具体来说，你需要定义一个*内存不足处理程序*，说明当像 `Vec::push`
    这样的不可失败操作需要分配更多内存，但分配器无法提供时应该发生什么。
- en: The default behavior of the out-of-memory handler on `std`-enabled platforms
    is to print an error message to standard error and then abort the process. However,
    on a platform that, for example, doesn’t have standard error, that obviously won’t
    work. At the time of writing, on such platforms your program must explicitly define
    an out-of-memory handler using the unstable attribute `#[lang = "oom"]`. Keep
    in mind that the handler should almost certainly prevent future execution, as
    otherwise the code that tried to allocate will continue executing without knowing
    that it did not receive the memory it asked for!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在启用 `std` 的平台上，内存不足处理程序的默认行为是向标准错误输出打印错误信息，然后中止进程。然而，在一个例如没有标准错误的平台上，显然这不起作用。撰写本文时，在这种平台上，你的程序必须显式地使用不稳定属性
    `#[lang = "oom"]` 来定义内存不足处理程序。请记住，处理程序几乎肯定应该阻止后续执行，否则尝试分配的代码将在不知道未能分配所需内存的情况下继续执行！
- en: Low-Level Memory Accesses
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 低级内存访问
- en: In Chapter 10, we discussed the fact that the compiler is given a fair amount
    of leeway in how it turns your program statements into machine instructions, and
    that the CPU is allowed some wiggle room to execute instructions out of order.
    Normally, the shortcuts and optimizations that the compiler and CPU can take advantage
    of are invisible to the semantics of the program—you can’t generally tell whether,
    say, two reads have been reordered relative to each other or whether two reads
    from the same memory location actually result in two CPU load instructions. This
    is by design. The language and hardware designers carefully specified what semantics
    programmers commonly expect from their code when it runs so that your code generally
    does what you expect it to.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在第十章中，我们讨论了编译器在将程序语句转换为机器指令时所拥有的相当自由度，以及 CPU 允许执行无序指令的空间。通常，编译器和 CPU 所能利用的快捷方式和优化对程序的语义是不可见的——你通常无法判断，例如，两个读取操作是否相对重排过，或者从同一内存位置的两次读取是否实际上会导致两条
    CPU 加载指令。这是经过设计的。语言和硬件设计者仔细指定了程序运行时程序员通常期望的语义，这样你的代码通常会按你预期的方式执行。
- en: However, `no_std` programming sometimes takes you beyond the usual border of
    “invisible optimizations.” In particular, you’ll often communicate with hardware
    devices through *memory mapping*, where the internal state of the device is made
    available in carefully chosen regions in memory. For example, while your computer
    starts up, the memory address range `0xA0000`–`0xBFFFF` maps to a crude graphics
    rendering pipeline; writes to individual bytes in that range will change particular
    pixels (or blocks, depending on the mode) on the screen.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`no_std` 编程有时会让你超越“隐形优化”的常规边界。特别是，你经常需要通过*内存映射*与硬件设备进行通信，在这种方式下，设备的内部状态会在内存中的特定区域提供。例如，当你的计算机启动时，内存地址范围
    `0xA0000`–`0xBFFFF` 映射到一个粗略的图形渲染管道；在该范围内对单个字节的写入将改变屏幕上的特定像素（或者块，取决于模式）。
- en: When you’re interacting with device-mapped memory, the device may implement
    custom behavior for each memory access to that region of memory, so the assumptions
    your CPU and compiler make about regular memory loads and stores may no longer
    hold. For instance, it is common for hardware devices to have memory-mapped registers
    that are modified when they’re read, meaning the reads have side effects. In such
    cases, the compiler can’t safely elide a memory store operation if you read the
    same memory address twice in a row!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当你与设备映射内存交互时，设备可能会对每次内存访问实现自定义行为，因此你 CPU 和编译器对常规内存加载和存储的假设可能不再成立。例如，硬件设备常常有内存映射寄存器，在读取时会被修改，这意味着读取操作会有副作用。在这种情况下，如果你连续两次读取相同的内存地址，编译器就不能安全地省略内存存储操作！
- en: A similar issue arises when program execution is suddenly diverted in ways that
    aren’t represented in the code and thus that the compiler cannot expect. Execution
    might be diverted if there is no underlying operating system to handle processor
    exceptions or interrupts, or if a process receives a signal that interrupts execution.
    In those cases, the execution of the active segment of code is stopped, and the
    CPU starts executing instructions in the event handler for whatever event triggered
    the diversion instead. Normally, since the compiler can anticipate all possible
    executions, it arranges its optimizations so that executions cannot observe when
    operations have been performed out of order or optimized away. However, since
    the compiler can’t predict these exceptional jumps, it also cannot plan for them
    to be oblivious to its optimizations, so these event handlers might actually observe
    instructions that have run in a different order than those in the original program
    code.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序执行突然偏离代码中所表示的方式时，就会出现类似的问题，编译器无法预见这些情况。执行可能会被转移，如果没有底层操作系统来处理处理器异常或中断，或者如果进程收到中断执行的信号。在这些情况下，活动代码段的执行会停止，CPU开始执行触发偏移的事件处理程序中的指令。通常，由于编译器可以预见所有可能的执行情况，它会安排优化，以使执行无法观察到操作是否已按顺序执行或被优化掉。然而，由于编译器无法预测这些异常跳转，它也无法为这些跳转做出计划以忽视其优化，因此这些事件处理程序可能会观察到与原始程序代码中不同顺序执行的指令。
- en: 'To deal with these exceptional situations, Rust provides *volatile* memory
    operations that cannot be elided or reordered with respect to other volatile operations.
    These operations take the form of `std::ptr::read_volatile` and `std::ptr::write_volatile`.
    Volatile operations are exactly the right fit for accessing memory-mapped hardware
    resources: they map directly to memory access operations with no compiler trickery,
    and the guarantee that volatile operations aren’t reordered relative to one another
    ensures that hardware operations with possible side effects don’t happen out of
    order even when they would normally look interchangeable (such as a load of one
    address and a store to a different address). The no-reordering guarantee also
    helps the exceptional execution situation, as long as any code that touches memory
    accessed in an exceptional context uses only volatile memory operations.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应对这些异常情况，Rust 提供了*volatile*内存操作，这些操作不能与其他 volatile 操作进行省略或重新排序。这些操作以`std::ptr::read_volatile`和`std::ptr::write_volatile`的形式出现。Volatile
    操作非常适合访问内存映射的硬件资源：它们直接映射到内存访问操作，没有编译器的伎俩，并且 volatile 操作之间不会重新排序的保证确保即使它们通常看起来可以互换（例如加载一个地址并将数据存储到另一个地址），硬件操作也不会发生顺序错乱。无重新排序的保证也有助于异常执行情况，只要任何触及在异常上下文中访问的内存的代码仅使用
    volatile 内存操作。
- en: Misuse-Resistant Hardware Abstraction
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防滥用硬件抽象
- en: Rust’s type system excels at encapsulating unsafe, hairy, and otherwise unpleasant
    code behind safe, ergonomic interfaces. Nowhere is that more important than in
    the infamously complex world of low-level systems programming, littered with magic
    hardware-defined values pulled from obscure manuals and mysterious undocumented
    assembly instruction incantations to get devices into just the right state. And
    all that in a space where a runtime error might crash more than just a user program!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 的类型系统擅长将不安全、复杂以及其他不愉快的代码封装在安全、符合人体工学的接口背后。没有比在低级系统编程这个著名复杂的领域中更为重要，那里充满了从晦涩的手册中提取出来的硬件定义的神秘值，以及使用神秘的未文档化汇编指令咒语来让设备达到恰到好处的状态。而这一切发生在一个运行时错误可能不仅仅会崩溃用户程序的空间中！
- en: In `no_std` programs, it is immensely important to use the type system to make
    illegal states impossible to represent, as we discussed in Chapter 3. If certain
    combinations of register values cannot occur at the same time, then create a single
    type whose type parameters indicate the current state of the relevant registers,
    and implement only legal transitions on it, like we did for the rocket example
    in [Listing 3-2](c03.xhtml#listing3-2).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在`no_std`程序中，使用类型系统来使非法状态无法表示是极其重要的，正如我们在第 3 章中讨论的那样。如果某些寄存器值的组合不能同时发生，那么可以创建一个单一类型，其类型参数表示相关寄存器的当前状态，并仅在其上实现合法的转换，就像我们在[Listing
    3-2](c03.xhtml#listing3-2)中为火箭示例所做的那样。
- en: For example, consider a pair of registers where at most one register should
    be “on” at any given point in time. [Listing 12-2](#listing12-2) shows how you
    can represent that in a (single-threaded) program in a way makes it impossible
    to write code that violates that invariant.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一对寄存器，在任何给定时刻最多只有一个寄存器应该是“开启”状态。[清单12-2](#listing12-2)展示了如何在一个（单线程）程序中以一种方式表示这一点，使得不可能编写违反该不变式的代码。
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 12-2: Statically ensuring correct operation'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 清单12-2：静态确保正确操作
- en: There are a few noteworthy patterns in this code. The first is that we ensure
    only a single instance of `Pair` ever exists by checking a private static Boolean
    in its only constructor and making all methods consume `self`. We then ensure
    that the initial state is valid and that only valid state transitions are possible
    to express, and therefore the invariant must hold globally.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码中有一些值得注意的模式。第一个是我们通过在唯一构造函数中检查一个私有的静态布尔值，确保`Pair`类的唯一实例只会存在一次，并使所有方法消耗`self`。接着，我们确保初始状态有效，并且只允许有效的状态转换，因此不变式必须在全局范围内保持成立。
- en: The second noteworthy pattern in [Listing 12-2](#listing12-2) is that we use
    `PhantomData` to take advantage of zero-sized types and represent runtime information
    statically. That is, at any given point in the code the types tell us what the
    runtime state *must* be, and therefore we don’t need to track or check any state
    related to the registers at runtime. There’s no need to check that `r2` isn’t
    already on when we’re asked to enable `r1`, since the types prevent writing a
    program in which that is the case.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单12-2](#listing12-2)中的第二个值得注意的模式是我们使用`PhantomData`来利用零大小类型，并以静态方式表示运行时信息。也就是说，在代码的任何给定时刻，类型告诉我们运行时状态*必须*是什么，因此我们不需要在运行时跟踪或检查与寄存器相关的任何状态。当我们需要启用`r1`时，不需要检查`r2`是否已经处于开启状态，因为类型已经防止了编写出现这种情况的程序。'
- en: Cross-Compilation
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交叉编译
- en: Usually, you’ll write `no_std` programs on a computer with a full-fledged operating
    system running and all the niceties of modern hardware, but ultimately run it
    on a dinky hardware device with 93/4 bits of RAM and a sock for a CPU. That calls
    for *cross-compilation*—you need to compile the code in your development environment,
    but compile it *for* the sock. That’s not the only context in which cross-compilation
    is important, though. For example, it’s increasingly common to have one build
    pipeline produce binary artifacts for all consumer platforms rather than trying
    to have a build pipeline for every platform your consumers may be using, and that
    means using cross-compilation.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你会在一台运行完整操作系统并配备现代硬件的计算机上编写`no_std`程序，但最终会在一个只有93/4位RAM、CPU像袜子一样的简陋硬件设备上运行。这就需要*交叉编译*——你需要在开发环境中编译代码，但需要为袜子编译。这并不是交叉编译唯一重要的场景。例如，现在越来越常见的是，构建流水线生成所有消费者平台的二进制文件，而不是为每个消费者可能使用的平台创建一个构建流水线，这就需要使用交叉编译。
- en: 'Cross-compiling involves two platforms: the *host* platform and the *target*
    platform. The host platform is the one doing the compiling, and the target platform
    is the one that will eventually run the output of the compilation. We specify
    platforms as *target triples*, which take the form `machine-vendor-os`. The `machine`
    part dictates the machine architecture the code will run on, such as `x86_64`,
    `armv7`, or `wasm32`, and tells the compiler what instruction set to use for the
    emitted machine code. The `vendor` part generally takes the value of `pc` on Windows,
    `apple` on macOS and iOS, and `unknown` everywhere else, and doesn’t affect compilation
    in any meaningful way; it’s mostly irrelevant and can even be left out. The `os`
    part tells the compiler what format to use for the final binary artifacts, so
    a value of `linux` dictates Linux *.so* files, `windows` dictates Windows *.dll*
    files, and so on.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 交叉编译涉及两个平台：*宿主*平台和*目标*平台。宿主平台是进行编译的平台，目标平台是最终运行编译输出的平台。我们通过*目标三元组*来指定平台，形式为`machine-vendor-os`。`machine`部分决定了代码将运行的机器架构，如`x86_64`、`armv7`或`wasm32`，并告诉编译器使用哪种指令集来生成机器代码。`vendor`部分通常在Windows上为`pc`，在macOS和iOS上为`apple`，在其他地方为`unknown`，且不会在编译过程中产生有意义的影响；它通常不重要，甚至可以省略。`os`部分告诉编译器最终的二进制文件应使用何种格式，所以`linux`表示Linux的*.so*文件，`windows`表示Windows的*.dll*文件，依此类推。
- en: To tell Cargo to cross-compile, you simply pass it the `--target <``target triple``>`
    argument with your triple of choice. Cargo will then take care of forwarding that
    information to the Rust compiler so that it generates binary artifacts that will
    work on the given target platform. Cargo will also take care to use the appropriate
    version of the standard library for that platform—after all, the standard library
    contains a lot of conditional compilation directives (using `#[cfg(...)]`) so
    that the right system calls get invoked and the right architecture-specific implementations
    are used, so we can’t use the standard library for the host platform on the target.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要告诉 Cargo 进行交叉编译，你只需传递 `--target <``target triple``>` 参数，指定你选择的三元组。然后，Cargo
    会将这个信息转发给 Rust 编译器，以便生成适用于给定目标平台的二进制文件。Cargo 还会确保使用适用于该平台的标准库版本——毕竟，标准库包含了许多条件编译指令（使用
    `#[cfg(...)]`），以便调用正确的系统调用并使用适合架构的实现，因此我们不能在目标平台上使用主机平台的标准库。
- en: The target platform also dictates what components of the standard library are
    available. For example, while `x86_64-unknown-linux-gnu` includes the full `std`
    library, something like `thumbv7m-none-eabi` does no, and doesn’t even define
    an allocator, so if you use `alloc` without defining one explicitly, you’ll get
    a build error. This comes in handy for testing that code you write *actually*
    doesn’t require `std` (recall that even with `#![no_std]` you can still have `use
    std::`, since `no_std` opts out of only the `std` prelude). If you have your continuous
    integration pipeline build your crate with `--target thumbv7m-none-eabi`, any
    attempt to access components from anything but `core` will trigger a build failure.
    Crucially, this will also check that your crate doesn’t accidentally bring in
    dependencies that themselves use items from `std` (or `alloc`).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 目标平台还决定了标准库中可用的组件。例如，`x86_64-unknown-linux-gnu` 包含完整的 `std` 库，而像 `thumbv7m-none-eabi`
    这样的目标平台没有，并且甚至没有定义分配器，因此如果你在没有显式定义分配器的情况下使用 `alloc`，你将会遇到构建错误。这对于测试你编写的代码是否*确实*不需要
    `std` 很有用（记住，即使使用 `#![no_std]`，你仍然可以使用 `use std::`，因为 `no_std` 只是放弃了 `std` 的预导入）。如果你让持续集成管道在
    `--target thumbv7m-none-eabi` 的条件下构建你的 crate，那么任何试图访问 `core` 以外组件的行为都会触发构建失败。关键是，这也会检查你的
    crate 是否不小心引入了依赖项，而这些依赖项本身使用了 `std`（或 `alloc`）中的项目。
- en: Summary
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we’ve covered what lies beneath the standard library—or, more
    precisely, beneath `std`. We’ve gone over what you get with `core`, how you can
    extend your non-`std` reach with `alloc`, and what the (tiny) Rust runtime adds
    to your programs to make `fn main` work. We’ve also taken a look at how you can
    interact with device-mapped memory and otherwise handle the unorthodox execution
    patterns that can happen at the very lowest level of hardware programming, and
    how to safely encapsulate at least some of the oddities of hardware in the Rust
    type system. Next, we’ll move from the very small to the very large by discussing
    how to navigate, understand, and maybe even contribute to the larger Rust ecosystem.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了标准库的底层内容——更准确地说，是 `std` 之下的内容。我们讲解了使用 `core` 可以获得的内容，如何通过 `alloc`
    扩展非 `std` 的使用范围，以及 (非常小的) Rust 运行时为你的程序添加了什么，使得 `fn main` 能够工作。我们还探讨了如何与设备映射内存交互，以及如何处理在硬件编程的最低层次可能发生的非传统执行模式，并且如何在
    Rust 类型系统中安全地封装硬件的奇特之处。接下来，我们将从非常小的内容转向非常大的内容，讨论如何在 Rust 生态系统中导航、理解，甚至可能为其做出贡献。
