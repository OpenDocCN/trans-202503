- en: '**3**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**3**'
- en: '**BUILDING QUICKLY AND TRAVELING FAR WITH MATH**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**通过数学快速构建和远距离旅行**'
- en: '![image](graphics/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/common01.jpg)'
- en: In [Chapter 2](ch02.html#ch02), you learned how to create a variable and change
    its value. In this chapter, you’ll learn how to use math in Python to generate
    any block you want and quickly build complex structures in your Minecraft world.
    You’ll even give yourself superpowers to make the player super jump!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html#ch02)中，你学习了如何创建变量并改变其值。在这一章，你将学习如何在 Python 中使用数学运算来生成任何你想要的块，并在你的
    Minecraft 世界中快速构建复杂的结构。你甚至可以赋予自己超能力，让玩家实现超级跳跃！
- en: '**EXPRESSIONS AND STATEMENTS**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**表达式和语句**'
- en: When you’re having a conversation with someone, you want them to understand
    what you’re telling them. You use short phrases, such as “three diamonds” or “behind
    a tree,” to give information to the person you’re talking to. However, the phrases
    don’t make sense on their own unless they’re combined into sentences, such as
    “I found three diamonds behind a tree.”
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当你和某人交谈时，你希望他们理解你所说的内容。你会使用短语，例如“三个钻石”或“树后面”，将信息传递给对方。然而，单独这些短语并没有意义，除非它们组合成完整的句子，比如“我在树后面找到了三个钻石。”
- en: Python programming has concepts similar to phrases and sentences, which are
    called expressions and statements.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Python 编程有类似于短语和句子的概念，称为表达式和语句。
- en: You can combine values, variables, and operators to create small pieces of code
    called *expressions*, like `2 + 2`. Expressions can be combined into *statements*,
    which you learned about in [Chapter 2](ch02.html#ch02). Statements are single
    lines or short blocks of code that do something in a program, such as `zombies
    = 2 + 2`. In this example, `2 + 2` is an expression and is part of the statement
    `zombies = 2 + 2`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将值、变量和运算符结合起来，创建叫做*表达式*的小代码块，像`2 + 2`。表达式可以组合成*语句*，你在[第2章](ch02.html#ch02)中已经学习过了。语句是执行某个操作的单行或短代码块，例如`zombies
    = 2 + 2`。在这个例子中，`2 + 2`是一个表达式，且它是语句`zombies = 2 + 2`的一部分。
- en: 'For longer programs that use a text editor instead of the Python shell, be
    sure to write entire statements. For example, the Python shell and a program written
    in a text editor will treat the expression `2 + 2` entirely differently. When
    you’re using the Python shell in IDLE, Python will output `4` as the result of
    `2 + 2`, as shown here:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于较长的程序，使用文本编辑器而不是 Python shell 时，一定要写完整的语句。例如，Python shell 和在文本编辑器中编写的程序会以完全不同的方式处理表达式`2
    + 2`。当你在 IDLE 中使用 Python shell 时，Python 会输出`4`作为`2 + 2`的结果，如下所示：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'However, when you’re using a text editor, Python won’t do anything with the
    expression because it’s not part of a complete statement. To turn this expression
    into a complete statement, you could assign its value to a variable, like this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当你使用文本编辑器时，Python 不会对表达式做任何处理，因为它不是完整语句的一部分。为了将这个表达式转变为完整的语句，你可以将其值赋给一个变量，像这样：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then print that variable to see its value:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然后打印这个变量，查看它的值：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When you run this code, it will print `4`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这段代码时，它会打印出`4`。
- en: Again, when writing programs in the text editor, it’s very important that you
    use full statements, not just expressions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，当你在文本编辑器中编写程序时，使用完整的语句非常重要，而不仅仅是表达式。
- en: '**OPERATORS**'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**运算符**'
- en: In math, *operators* are used to alter and combine numbers. For example, the
    addition operator lets you add two (or more) numbers, and the subtraction operator
    is used to subtract one number from another.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学中，*运算符*用于改变和组合数字。例如，加法运算符让你将两个（或更多）数字相加，减法运算符则用于从一个数字中减去另一个数字。
- en: Python uses all the basic math operators that you already know—addition, subtraction,
    multiplication, and division—as well as more advanced operators, like exponents.
    Let’s start with addition.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Python 使用所有你已经知道的基本数学运算符——加法、减法、乘法和除法——以及更高级的运算符，比如指数运算。我们从加法开始。
- en: '**ADDITION**'
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**加法**'
- en: 'In Python, addition looks like you would normally write it using the plus sign
    (`+`). For example, if you have two flowers and you pick two more, you could describe
    that with a statement using addition:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，加法就像你平常写的那样，使用加号（`+`）。例如，如果你有两朵花，然后再摘了两朵，你可以用加法表达式来描述这一过程：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Python works out the result of the expression on the right side of the equal
    sign and then assigns it to the variable on the left. In this case, the result
    of the expression on the right is `4`. For the rest of the time that this particular
    code is in use, the variable `flowers` will have a value of `4`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Python会计算等号右边表达式的结果，并将结果赋值给左边的变量。在这个例子中，右边表达式的结果是`4`。在这段代码的其余使用过程中，变量`flowers`的值将保持为`4`。
- en: You can use addition in Minecraft to build things in the blink of an eye. Are
    you ready for your next mission? Let’s get started!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Minecraft中使用加法在眨眼之间建造东西。准备好迎接下一个任务了吗？让我们开始吧！
- en: '**MISSION #5: STACK BLOCKS**'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务 #5: 堆叠方块**'
- en: 'You can use the `setBlock()` function to create and place a block in Minecraft.
    Just like `setPos()` and `setTilePos()`, `setBlock()` takes x-, y-, and z-coordinates
    as arguments, but it also needs a fourth value: the block type. This value identifies
    the kind of block you want to place in the game.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`setBlock()`函数在Minecraft中创建并放置一个方块。与`setPos()`和`setTilePos()`类似，`setBlock()`也需要x、y、z坐标作为参数，但它还需要第四个值：方块类型。这个值标识了你希望在游戏中放置的方块类型。
- en: Whether it’s grass, lava, melon, or any other block, each type is represented
    by a specific integer. For example, grass is `2`, empty air is `0`, water is `8`,
    and melon is `103`. For a full list of blocks and their integer values, see “[Block
    ID Cheat Sheet](app02.html#app02)” on [page 283](app01.html#page_283).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是草地、岩浆、西瓜，还是其他任何方块，每种类型的方块都有一个特定的整数值。例如，草地是`2`，空气是`0`，水是`8`，西瓜是`103`。要查看完整的方块及其整数值列表，请参见[“方块ID备忘单”](app02.html#app02)，该内容在[第283页](app01.html#page_283)。
- en: 'To use `setBlock()`, pass values for the x-, y-, and z-coordinates and the
    integer representing the block type to the function, separated by commas. For
    example, let’s place a melon block (type 103) at coordinates (6, 5, 28):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`setBlock()`，请传递x、y、z坐标值和表示方块类型的整数值，值之间用逗号分隔。例如，我们可以将一个西瓜方块（类型103）放置在坐标(6,
    5, 28)处：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After the first two familiar lines that you’ll see in all Minecraft Python programs,
    just call `setBlock()` with all the values you want to use. You can also use variables
    instead of numbers to get the same effect, as shown in [Listing 3-1](ch03.html#ch3ex1).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在你在所有Minecraft Python程序中都会看到的前两行之后，只需调用`setBlock()`并传递你想要使用的所有值。你还可以使用变量来代替数字，以达到相同的效果，如[列表
    3-1](ch03.html#ch3ex1)所示。
- en: '*blockStack.py*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*blockStack.py*'
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 3-1: A program to create a melon block*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 3-1: 创建一个西瓜方块的程序*'
- en: First, create variables to represent the block coordinates (`x`, `y`, and `z`)
    and type (`blockType`). Then, pass all the variables to the `setBlock()` function,
    and the Minecraft Python API works its magic. Now you can use those variables
    again anywhere in your program, and if you decide to change their values later,
    you only have to change them in one place.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建表示方块坐标（`x`、`y`、`z`）和类型（`blockType`）的变量。然后，将所有变量传递给`setBlock()`函数，Minecraft
    Python API将发挥它的魔力。现在，你可以在程序中的任何地方再次使用这些变量，如果以后决定更改它们的值，只需在一个地方进行修改。
- en: When you combine this code with math operators, you can do some pretty cool
    things. Let’s create a stack of blocks.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将这段代码与数学运算符结合使用时，你可以做一些相当酷的事情。让我们创建一堆方块。
- en: Create a new folder called *math* within the *Minecraft Python* folder. Open
    IDLE and create a blank program using IDLE’s text editor. Save this file as *blockStack.py*
    in the *math* folder. Copy the code from [Listing 3-1](ch03.html#ch3ex1) into
    your editor and add the two lines from [Listing 3-2](ch03.html#ch3ex2) to stack
    another melon block on top of the one you just set.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在*Minecraft Python*文件夹内创建一个名为*math*的新文件夹。打开IDLE并使用IDLE的文本编辑器创建一个空白程序。将此文件保存为*blockStack.py*到*math*文件夹中。从[列表
    3-1](ch03.html#ch3ex1)中复制代码到你的编辑器，并将[列表 3-2](ch03.html#ch3ex2)中的两行代码添加进去，将另一个西瓜方块堆叠在你刚才设置的西瓜方块上。
- en: '*blockStack.py*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*blockStack.py*'
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 3-2: Extra code to stack a second melon block on top of the first
    melon*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 3-2: 将第二个西瓜方块堆叠在第一个西瓜方块上的附加代码*'
- en: You’re adding 1 to the value of `y` ➊, and you’re using the `setBlock()` function
    to create another new block ➋. By increasing the value of `y` by 1, the second
    block is placed higher on the y-axis than the first block, so the second block
    is stacked on top of the first one.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你正在将`y`的值加1➊，并且你正在使用`setBlock()`函数创建另一个新块➋。通过将`y`的值增加1，第二个块的位置会比第一个块在y轴上更高，因此第二个块就堆叠在第一个块的上面。
- en: From here, your mission is to add two more blocks to the stack. Try modifying
    your *blockStack.py* program so it stacks four blocks instead of two! When you
    run your program, a stack of four melon blocks should appear, as shown in [Figure
    3-1](ch03.html#ch3fig1).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，你的任务是将堆叠的方块增加两个。尝试修改你的*blockStack.py*程序，使其堆叠四个方块，而不是两个！当你运行程序时，应该会看到四个西瓜方块堆叠在一起，如[图
    3-1](ch03.html#ch3fig1)所示。
- en: '![image](graphics/f03-01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-01.jpg)'
- en: '*Figure 3-1: I’ve made a stack of melon blocks.*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-1：我已经堆了一个西瓜方块堆。*'
- en: '**HINT**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: '*To add a second block on top of the first, we increased the* `y` *variable
    by 1 and then used the* `setBlock()` *function again. What do you think would
    happen if you reused these two statements at the end of your program? What if
    you used them three times? Would this be a solution for creating a stack of four
    blocks?*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*为了在第一个方块上方添加第二个方块，我们将`y`变量增加了1，然后再次使用`setBlock()`函数。你觉得如果在程序的最后重新使用这两条语句会发生什么？如果你用三次呢？这会是创建四个方块堆叠的解决方案吗？*'
- en: '**BONUS OBJECTIVE: CREATE A RAINBOW**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**附加目标：创建彩虹**'
- en: You could write many variations of the *blockStack.py* program. By modifying
    the block types, you can create a rainbow or a tower of lava! Try changing the
    block types to see what you can create.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以编写许多不同版本的*blockStack.py*程序。通过修改方块类型，你可以创建彩虹或熔岩塔！试着更改方块类型，看看你能创造出什么。
- en: '**MISSION #6: SUPER JUMP**'
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务 #6：超级跳跃**'
- en: In [Chapter 2](ch02.html#ch02), you learned how to change the player’s location.
    Let’s take that skill one step further and send the player high into the air using
    the power of addition. First, find out where the player is by calling `getTilePos()`,
    as shown in [Listing 3-3](ch03.html#ch3ex3).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html#ch02)中，你学会了如何改变玩家的位置。让我们把这个技能再提升一步，利用加法的力量将玩家送上高空。首先，像[清单 3-3](ch03.html#ch3ex3)中所示，通过调用`getTilePos()`来获取玩家的位置。
- en: '*superJump.py*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*superJump.py*'
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 3-3: Code to find the player’s position*'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 3-3：查找玩家位置的代码*'
- en: The dot between the `position` variable and the `x`, `y`, and `z` is called
    *dot notation*. Dot notation is used by certain variables and functions, such
    as all of the functions you use in the Minecraft Python API (for example, `mc.setTilePos()`).
    You’ll learn more about dot notation in [Chapters 11](ch11.html#ch11) and [12](ch12.html#ch12).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`position`变量与`x`、`y`、`z`之间的点（`.`）叫做*点表示法*。点表示法被某些变量和函数使用，比如你在Minecraft Python
    API中使用的所有函数（例如，`mc.setTilePos()`）。你将在[第11章](ch11.html#ch11)和[第12章](ch12.html#ch12)中学习更多关于点表示法的内容。'
- en: Once you have the player’s position, you can set the `x`, `y`, and `z` variables
    to the player’s current coordinates, which are represented by `position.x`, `position.y`,
    and `position.z`. You can then teleport the player anywhere you want in relation
    to the current coordinates, as shown in [Listing 3-4](ch03.html#ch3ex4).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你得到了玩家的位置，你可以将`x`、`y`和`z`变量设置为玩家当前的坐标，分别通过`position.x`、`position.y`和`position.z`表示。然后，你可以根据当前坐标将玩家传送到任何你想要的位置，如[清单
    3-4](ch03.html#ch3ex4)所示。
- en: '*superJump.py*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*superJump.py*'
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 3-4: Code to move the player’s x position up by 5 blocks*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 3-4：将玩家的x位置向上移动5个方块的代码*'
- en: 'Here, I’ve transported the player 5 blocks along the x-axis, but this isn’t
    that special: you can move the player around horizontally any time you want in
    Minecraft. Let’s give the player a super jump instead!'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我将玩家沿x轴传送了5个方块，但这并不特别：你可以随时在Minecraft中水平移动玩家。让我们给玩家一个超级跳跃吧！
- en: Your mission is to make the player jump 10 blocks into the air above their current
    position. You should be able to do this using the code in [Listings 3-3](ch03.html#ch3ex3)
    and [3-4](ch03.html#ch3ex4) but with some slight differences. Copy the code in
    [Listings 3-3](ch03.html#ch3ex3) and [3-4](ch03.html#ch3ex4) into IDLE, save it
    as *superJump.py*, and change the `y` variable in a similar way to how I changed
    the `x` variable. When you run the program, the player should jump into the air,
    as in [Figure 3-2](ch03.html#ch3fig2).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你的任务是让玩家跳跃到当前坐标上方10个方块的地方。你应该能够使用[清单 3-3](ch03.html#ch3ex3)和[3-4](ch03.html#ch3ex4)中的代码来完成这个任务，虽然会有一些小的不同。将[清单
    3-3](ch03.html#ch3ex3)和[3-4](ch03.html#ch3ex4)中的代码复制到IDLE中，保存为*superJump.py*，并按照我更改`x`变量的方式修改`y`变量。当你运行程序时，玩家应该会像[图
    3-2](ch03.html#ch3fig2)中那样跳跃到空中。
- en: '![image](graphics/f03-02.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-02.jpg)'
- en: '*Figure 3-2: Here’s the super jump in action!*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-2：超级跳跃的实际效果！*'
- en: '**SUBTRACTION**'
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**减法**'
- en: 'Python handles subtraction similarly to how it handles addition. Let’s say
    you’re out exploring a cave, a spider attacks you, and you lose some health:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Python 处理减法与加法的方式类似。假设你正在探索一个洞穴，一只蜘蛛攻击了你，你失去了一些生命值：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The value of `health` in the statement is now `18`. Just as with the addition
    operation, Python works out the result of the operation on the right of the equal
    sign and sets the variable to that value.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 语句中 `health` 的值现在是 `18`。就像加法操作一样，Python 会计算等号右边操作的结果，并将该结果赋值给变量。
- en: Let’s have some fun with subtraction in Minecraft!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在《Minecraft》中玩点减法吧！
- en: '**MISSION #7: CHANGE THE BLOCKS UNDER YOU**'
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务 #7：改变你下方的方块**'
- en: Have you ever wanted to set a trap for someone in Minecraft? Imagine the ground
    beneath the player suddenly changing to lava when they least expect it. You can
    use Python to make your wish come true. Using subtraction, you can place blocks
    below the player’s current position. In fact, it takes only a few lines of code
    to place any block you want directly below the player!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾想在《Minecraft》中为某人设置一个陷阱？想象一下，当玩家最不期望的时候，脚下的地面突然变成了岩浆。你可以使用 Python 实现这个愿望。通过减法运算，你可以在玩家当前位置下方放置方块。实际上，只需要几行代码就能将你想要的任何方块直接放在玩家脚下！
- en: 'In this mission, you’ll change the block underneath the player to lava using
    `getTilePos()` and `setBlock()`. But this is a dangerous mission, so be careful
    when testing it: if you don’t move the player to a new position quickly enough,
    they might fall into the lava!'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，你将使用 `getTilePos()` 和 `setBlock()` 将玩家下方的方块改为岩浆。但这是一个危险的任务，所以在测试时要小心：如果你没有足够快地将玩家移动到新位置，他们可能会掉进岩浆里！
- en: The program in [Listing 3-5](ch03.html#ch3ex5) creates a block at the player’s
    current position. Copy this code into a new file in IDLE and save it as *blockBelow.py*.
    Then, using your knowledge of the subtraction operator, change the code so it
    places a lava block directly below the player’s feet, as shown in [Figure 3-3](ch03.html#ch3fig3).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在[清单 3-5](ch03.html#ch3ex5)中的程序会在玩家当前位置创建一个方块。将这段代码复制到 IDLE 中的新文件，并保存为 *blockBelow.py*。然后，利用你对减法运算符的理解，修改代码，使它在玩家的脚下直接放置一个岩浆方块，如[图
    3-3](ch03.html#ch3fig3)所示。
- en: '*blockBelow.py*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*blockBelow.py*'
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 3-5: This code places a block at the player’s current location.*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 3-5：这段代码在玩家当前位置放置一个方块。*'
- en: Notice that I’ve named the variable that stores the player’s position `pos`.
    I chose this name because I use this variable a lot, it’s easy to understand what
    the name means, and it’s shorter and faster to type than `position`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我将存储玩家位置的变量命名为 `pos`。我选择这个名称是因为我经常使用这个变量，它很容易理解它的意思，而且比 `position` 更短、更快输入。
- en: The y-coordinate determines how high or low a block is. Your mission is to figure
    out how to change the `y` variable to place a block below the player.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: y 坐标决定了方块的高低。你的任务是弄明白如何改变 `y` 变量，将方块放在玩家下方。
- en: '![image](graphics/f03-03.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-03.jpg)'
- en: '*Figure 3-3: After the block below me changed, I fell into the lava.*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-3：当我下方的方块改变后，我掉进了岩浆。*'
- en: '**BONUS OBJECTIVE: BLOCKS ALL AROUND YOU**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**附加目标：你周围的方块**'
- en: You’ve learned how to place blocks below the player. Can you work out how to
    place a block above the player? Once you’ve figured out how to do this, try to
    place several blocks around the player at once. Then you’ll be able to start creating
    buildings around the player!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学会了如何在玩家下方放置方块。你能算出如何在玩家上方放置方块吗？一旦你弄明白了，试着一次在玩家周围放置多个方块。然后，你就可以开始在玩家周围建造建筑物了！
- en: 'Try combining this program with the one from [Mission #6](ch03.html#ch03lev2sec03)
    ([page 51](ch03.html#page_51)). Can you work out how to make the player jump into
    the air and then place a block immediately below them so they don’t fall? Feeling
    evil? You could write a program that has the player fall from a great height into
    a pool of lava.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '尝试将这个程序与[任务 #6](ch03.html#ch03lev2sec03)中的程序结合使用（见[第 51 页](ch03.html#page_51)）。你能算出如何让玩家跳到空中，然后立刻在他们脚下放一个方块让他们不掉下来吗？感觉很邪恶？你可以编写一个程序，让玩家从高空掉进岩浆池中。'
- en: '**USING MATH OPERATORS IN ARGUMENTS**'
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**在参数中使用数学运算符**'
- en: When you use a function, such as `setBlock()` or `setTilePos()`, you give the
    function arguments, which specify the values you want the function to use when
    it runs.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用一个函数时，比如 `setBlock()` 或 `setTilePos()`，你会给函数传递一些参数，这些参数指定了函数运行时需要使用的值。
- en: 'So far, you’ve been introduced to the addition and subtraction operators. You
    can use these operators inside a function’s parentheses to set the values of arguments.
    Let’s revisit the stacking blocks in [Mission #5](ch03.html#ch03lev2sec02) ([page
    49](ch03.html#page_49)). We can use the addition operator inside the parentheses
    of the `setBlock()` function, as shown in [Listing 3-6](ch03.html#ch3ex6), and
    it will add two values together within the parentheses without the need for an
    extra statement.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '到目前为止，你已经接触了加法和减法运算符。你可以在函数的括号内使用这些运算符来设置参数的值。让我们回顾一下[任务 #5](ch03.html#ch03lev2sec02)中的堆叠块([第49页](ch03.html#page_49))。我们可以在`setBlock()`函数的括号内使用加法运算符，如[清单
    3-6](ch03.html#ch3ex6)所示，它会在括号内将两个值相加，而无需额外的语句。'
- en: '*blockStack1.py*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*blockStack1.py*'
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 3-6: The block stacking program with an operator in the arguments*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 3-6：带有运算符的块堆叠程序*'
- en: '[Listing 3-6](ch03.html#ch3ex6) is the almost same as the stacking blocks program.
    However, it uses the addition operator in the `setBlock()` function’s parentheses
    instead of in a separate statement. The last line uses `y + 1` as an argument
    in the function ➊. Although the value of this argument is `6` (`5 + 1`), the value
    of the `y` variable is still `5`. The argument lets you add to the `y` variable
    without actually changing its value, which is useful if you want to use `y` again
    somewhere else in your code.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 3-6](ch03.html#ch3ex6)几乎与堆叠块程序相同。然而，它在`setBlock()`函数的括号内使用加法运算符，而不是在单独的语句中使用。最后一行在函数
    ➊ 中使用`y + 1`作为参数。尽管该参数的值为`6`（`5 + 1`），但`y`变量的值仍然是`5`。这个参数允许你在不实际改变`y`值的情况下对`y`变量进行加法操作，如果你希望在代码的其他地方再次使用`y`，这就非常有用。'
- en: You can also add two variables together and use them as a single argument. [Listing
    3-7](ch03.html#ch3ex7) is the same as [Listing 3-6](ch03.html#ch3ex6), but an
    extra variable named `up` determines the distance the new block will be placed
    on the y-axis.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将两个变量相加，并将它们作为一个单一的参数。[清单 3-7](ch03.html#ch3ex7)与[清单 3-6](ch03.html#ch3ex6)相同，但额外添加了一个名为`up`的变量，它决定了新块在
    y 轴上的放置位置。
- en: '*blockStack2.py*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*blockStack2.py*'
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 3-7: Another version of the stacking program that uses an addition
    operator in the arguments*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 3-7：使用加法运算符的堆叠程序的另一个版本*'
- en: On the last line, the `y` and `up` variables are added together ➊. As in [Listing
    3-6](ch03.html#ch3ex6), this makes the `setBlock()` function’s second argument
    `6`. Variables are useful because if you want to place the new block two blocks
    higher on the y-axis, all you have to do is change your code and set `up` to 2\.
    You can see the effect of all three versions ([Listings 3-1](ch03.html#ch3ex1)
    and [3-2](ch03.html#ch3ex2), [3-6](ch03.html#ch3ex6), and [3-7](ch03.html#ch3ex7))
    of the program in [Figure 3-4](ch03.html#ch3fig4).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一行，`y`和`up`变量被加在一起 ➊。和[清单 3-6](ch03.html#ch3ex6)一样，这使得`setBlock()`函数的第二个参数变成了`6`。变量非常有用，因为如果你想将新块放置在
    y 轴上比之前高两个方块，你只需要修改代码，将`up`设置为2。你可以在[图 3-4](ch03.html#ch3fig4)中看到程序的所有三个版本（[清单
    3-1](ch03.html#ch3ex1)和[3-2](ch03.html#ch3ex2)，[3-6](ch03.html#ch3ex6)，以及[3-7](ch03.html#ch3ex7)）的效果。
- en: '![image](graphics/f03-04.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-04.jpg)'
- en: '*Figure 3-4: The three versions of the program have the same effect, even though
    they are different.*'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-4：虽然程序的三个版本不同，但它们的效果是一样的。*'
- en: '**MISSION #8: SPEED BUILDING**'
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务 #8：快速建造**'
- en: Usually, you spend your first day in Minecraft building a shelter. With what
    you’ve learned so far, you can build a simple house and spend your first night
    in style! The program in this mission will help you quickly generate a building’s
    walls, ceiling, and floor. Instead of spending lots of time placing every block
    by hand, you can construct the basic structure of your building in a few lines
    of code.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你在《我的世界》中度过的第一天会用来建造一个避难所。凭借目前学到的知识，你可以建造一个简单的房子，并以一种有风格的方式度过你的第一晚！这个任务中的程序将帮助你快速生成建筑物的墙壁、天花板和地板。你不需要花费大量时间手动放置每一个方块，而是可以通过几行代码构建建筑的基本结构。
- en: You’ve used `setBlock()` to create a single block, but `setBlock()` has a friend
    called `setBlocks()`, which creates several blocks in the shape of a cuboid. A
    *cuboid* is a 3D rectangle. A cuboid’s length, width, and height can all be different
    values.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经使用`setBlock()`创建了一个单一的方块，但`setBlock()`还有一个朋友叫做`setBlocks()`，它可以创建多个方块，形成一个长方体的形状。*长方体*是一个三维矩形。长方体的长度、宽度和高度可以是不同的值。
- en: The `setBlocks()` function lets you create many blocks in a large area. To use
    `setBlocks()`, just pass it two sets of coordinates and the block type. The first
    set of coordinates identifies where you want one corner of the cuboid, and the
    second set specifies where you want the opposite corner. [Figure 3-5](ch03.html#ch3fig5)
    shows you the corners of the cuboid, labeled with their coordinates.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`setBlocks()` 函数允许你在大范围内创建多个方块。要使用 `setBlocks()`，只需传递两组坐标和方块类型。第一组坐标确定你想要的立方体一个角落的位置，第二组坐标指定你想要的对角线的另一角落。[图
    3-5](ch03.html#ch3fig5)展示了立方体的角落，并标注了它们的坐标。'
- en: '![image](graphics/f03-05.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-05.jpg)'
- en: '*Figure 3-5: A cuboid and the coordinates used to set its dimensions*'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-5：立方体及其用于设置尺寸的坐标*'
- en: Let’s create the cuboid in [Figure 3-5](ch03.html#ch3fig5). As you can see in
    [Listing 3-8](ch03.html#ch3ex8), mine is made of cobblestone, but use any block
    type you like. Well, you can use anything except for lava, water, or air—those
    would give you a pretty strange house!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建[图 3-5](ch03.html#ch3fig5)中的立方体。正如你在[清单 3-8](ch03.html#ch3ex8)中看到的，我使用的是卵石，但你可以使用任何你喜欢的方块类型。嗯，除了岩浆、水或空气外，你可以使用任何东西——否则你将得到一个非常奇怪的房子！
- en: '*building.py*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*building.py*'
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 3-8: Code that builds a cuboid of blocks*'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 3-8：构建一个立方体积木的代码*'
- en: Notice that I’ve used `getPos()` ➊ instead of `getTilePos()`. The `getPos()`
    function is the same as the `getTilePos()` function, but it returns the coordinates
    as three floats instead of three integers.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我使用了 `getPos()` ➊，而不是 `getTilePos()`。`getPos()` 函数与 `getTilePos()` 相同，但它返回的是三个浮动坐标，而不是三个整数坐标。
- en: The width, height, and length of this cuboid are 10, 5, and 6 respectively,
    and I’ve used a block ID of 4 to generate cobblestone ➋. You can see the finished
    building in [Figure 3-6](ch03.html#ch3fig6).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这个立方体的宽度、高度和长度分别是 10、5 和 6，我使用了方块 ID 4 来生成卵石 ➋。你可以在[图 3-6](ch03.html#ch3fig6)中看到完成的建筑。
- en: '![image](graphics/f03-06.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-06.jpg)'
- en: '*Figure 3-6: The building that the program creates*'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-6：程序创建的建筑*'
- en: 'However, the house has a slight problem: it’s completely solid! After I ran
    the program, I punched a hole in the side of the building so you can see that
    it’s solid in the center. This cuboid is a great start, though, and now you’ll
    be in charge of hollowing it out so the player can actually go inside.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个房子有一个小问题：它完全是实心的！在我运行程序后，我在建筑物的一侧打了一个洞，你可以看到它的中心是实心的。不过，这个立方体是一个很好的开始，现在你将负责把它挖空，这样玩家才能真正进入里面。
- en: Your mission is to change the program to create a building with walls, a ceiling,
    and a floor at the player’s position. To accomplish this, you’ll create a cuboid
    made of air inside the solid cuboid you just made. The two cuboids together should
    produce an empty box. You can see the result of the finished program in [Figure
    3-7](ch03.html#ch3fig7). I’ve created a hole in the side so you can see the hollow
    center.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你的任务是修改程序，以在玩家位置创建一个有墙壁、天花板和地板的建筑。为此，你需要在刚才创建的实体立方体内创建一个由空气构成的立方体。这两个立方体结合起来应当形成一个空心盒子。你可以在[图
    3-7](ch03.html#ch3fig7)中看到完成程序的结果。我在一侧打了个洞，这样你可以看到空心的中心部分。
- en: '![image](graphics/f03-07.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-07.jpg)'
- en: '*Figure 3-7: When your program is finished, it should create a hollow cuboid.
    A cuboid is perfect for creating buildings quickly!*'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-7：当你的程序完成时，它应该会创建一个空心立方体。立方体非常适合快速创建建筑！*'
- en: '[Listing 3-8](ch03.html#ch3ex8) already includes a variable called `air` ➌,
    which you can use to set the blocks inside the building to air. Copy [Listing
    3-8](ch03.html#ch3ex8) into IDLE, save it as *building.py*, and adapt it to create
    a second cuboid made of air. You’ll need to add an extra `setBlocks()` function
    on the last line to create this air cuboid. The air cuboid should be one block
    inside the walls all the way around, which is what you need to figure out how
    to do using addition and subtraction. Be patient: if your first try doesn’t work,
    try something else!'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 3-8](ch03.html#ch3ex8)中已经包括了一个名为 `air` ➌ 的变量，你可以使用它来将建筑内部的方块设置为空气。将[清单
    3-8](ch03.html#ch3ex8)复制到 IDLE 中，保存为 *building.py*，并修改它来创建一个由空气构成的第二个立方体。你需要在最后一行添加一个额外的
    `setBlocks()` 函数来创建这个空气立方体。空气立方体应该在四周的墙壁内有一个方块的空隙，这就是你需要使用加法和减法来解决的问题。保持耐心：如果第一次尝试失败了，尝试别的方法！'
- en: '**HINT**'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: '*To create the air cuboid one block inside the walls, you can use the addition
    and subtraction operators. Create the air cuboid using* `setBlocks()` *and increase
    the first* `x`*,* `y`, *and* `z` *arguments by 1\. Then subtract 1 from the* `x
    + width`*,* `y + height`, *and* `z + length` *arguments.*'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '*要创建一个位于墙壁内一格的空气立方体，你可以使用加法和减法运算符。使用* `setBlocks()` *来创建空气立方体，并将第一个* `x`*,*
    `y`* 和* `z` *参数增加 1。然后从* `x + width`*,* `y + height`* 和* `z + length` *参数中减去 1。*'
- en: '**BONUS OBJECTIVE: BUILD ALL KINDS OF THINGS**'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**额外目标：建造各种物品**'
- en: You can reuse the code you wrote to create the building whenever you want. What
    if you want to construct a different-sized building? Can you work out how to change
    the width, height, and length of the building?
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在任何时候重用你编写的代码来创建建筑。如果你想建造一个不同大小的建筑，该怎么做呢？你能想出如何修改建筑的宽度、高度和长度吗？
- en: 'With just a few changes, your program can also have many other uses. Can you
    work out how to use it to generate a swimming pool? Hint: You’ll need to change
    the block type of the inner cuboid to water (block ID 8) and remove the top of
    the outer cuboid so the player can get in the pool.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 只需稍作修改，你的程序还可以有许多其他用途。你能算出如何用它来生成一个游泳池吗？提示：你需要将内立方体的方块类型改为水（方块 ID 8），并移除外立方体的顶部，以便玩家可以进入游泳池。
- en: '**MULTIPLICATION**'
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**乘法**'
- en: In Python code, multiplication looks slightly different from what you’re probably
    used to seeing. Instead of writing an × to multiply two numbers, you use an asterisk
    (`*`). But other than the symbol, multiplication works the same as usual. The
    expression `2 * 2` equals 4, just like 2 × 2.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 代码中，乘法的表示方式与你通常见到的略有不同。你不用写 × 来表示两个数字相乘，而是使用星号 (`*`)。不过，除了符号，乘法的运算与平时一样。表达式
    `2 * 2` 等于 4，就像 2 × 2 一样。
- en: 'Imagine there are four trees outside your Minecraft house, and suddenly the
    number of trees doubles. You can represent this calculation in Python like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 假设在你的 Minecraft 房子外面有四棵树，突然树木数量翻倍了。你可以用 Python 来表示这个计算，方法如下：
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The value of `trees` in this example is 8, which is 4 multiplied by 2.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`trees` 的值是 8，即 4 乘以 2。
- en: '**DIVISION**'
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**除法**'
- en: In Python, division is represented by a forward slash (`/`) instead of the ÷
    symbol.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，除法是用正斜杠 (`/`) 来表示的，而不是 ÷ 符号。
- en: The division operator divides one value by another. Just put the number that
    you want to divide on the left side of the forward slash (`/`) and the number
    you want to divide by on the right.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 除法运算符将一个值除以另一个值。只需将你要除的数字放在正斜杠 (`/`) 的左侧，而将你要除以的数字放在右侧。
- en: 'Let’s say eight skeletons are outside your Minecraft fortress, but half of
    them walk away. To find out how many are left, you would divide 8 by 2\. Here’s
    how you’d represent this using a division operator in Python:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 假设现在有 8 个骷髅在你的 Minecraft 堡垒外面，但其中一半走开了。要计算剩下的数量，你可以将 8 除以 2。以下是如何使用除法运算符在 Python
    中表示这个计算：
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now just 4 skeletons are outside your fortress. Phew! Let’s try out these two
    operators in Minecraft.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在只有 4 个骷髅出现在你的堡垒外面。呼！让我们在 Minecraft 中试试这两个运算符。
- en: '**MISSION #9: SPECTACULAR SPIRES**'
  id: totrans-129
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务 #9：壮观的尖塔**'
- en: One strength of variables is that you can change the value of a single variable,
    and its value will change everywhere the variable appears in the program. You
    can make a program do totally different things just by changing a single variable
    using math operators, like multiplication and division.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 变量的一个优点是你可以改变单个变量的值，而它的值会在程序中所有出现该变量的地方发生变化。你只需通过改变一个变量的值，运用数学运算符（如乘法和除法），就能让程序做完全不同的事情。
- en: In this mission, you’ll discover how to use division and multiplication to build
    a very tall, thin tower, also called a *spire*.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，你将学习如何使用除法和乘法来建造一个非常高、非常薄的塔楼，也叫做*尖塔*。
- en: '[Figure 3-8](ch03.html#ch3fig8) shows what the spire will look like when the
    program is finished.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 3-8](ch03.html#ch3fig8)展示了当程序完成后，尖塔将呈现的样子。'
- en: '![image](graphics/f03-08.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-08.jpg)'
- en: '*Figure 3-8: A spire created from stone blocks*'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-8：由石块构建的尖塔*'
- en: The program will use a single variable to set the spire’s height. Using multiplication
    and division, you’ll set different spire heights.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序将使用一个单一的变量来设置尖塔的高度。通过乘法和除法，你将设置不同的尖塔高度。
- en: In [Listing 3-9](ch03.html#ch3ex9), I’ve started the program that creates the
    spire, but I haven’t used the `height` variable or math operators to set the height
    of each part.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在[列表 3-9](ch03.html#ch3ex9)中，我已经开始编写创建尖塔的程序，但还没有使用 `height` 变量或数学运算符来设置每个部分的高度。
- en: '*spire.py*'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*spire.py*'
- en: '[PRE16]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '*Listing 3-9: The spire-building program*'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 3-9：建造尖塔的程序*'
- en: Copy [Listing 3-9](ch03.html#ch3ex9) into a new file in IDLE and save it as
    *spire.py* in the *math* folder. This program will create a spire, but changing
    the `height` variable and rerunning the program won’t affect the height of all
    parts of the spire.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 将[清单 3-9](ch03.html#ch3ex9)复制到IDLE中新文件，并将其保存为*spire.py*在*math*文件夹中。这个程序将创建一个尖塔，但是更改`height`变量并重新运行程序不会影响尖塔所有部分的高度。
- en: To fix this program so all parts of the spire’s height change when you change
    the `height` variable, you need to change the `pointHeight` ➊ and `baseHeight`
    ➋ variables to include expressions that use the `height` variable and multiplication
    or division operators. You want `pointHeight` to be twice the size of `height`
    and `baseHeight` to be half the size of `height`. For example, if I wanted the
    spire point to be three times the height of the spire sides, I would change the
    code to `pointHeight = height * 3` and `baseHeight = height / 2`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为了修复这个程序，使得在更改`height`变量时，尖塔的所有部分的高度都会发生变化，你需要将`pointHeight` ➊ 和`baseHeight`
    ➋ 变量更改为包含使用`height`变量以及乘法或除法运算符的表达式。你希望`pointHeight`是`height`的两倍，`baseHeight`是`height`的一半。例如，如果我希望尖塔顶点的高度是尖塔侧面的三倍，我会将代码改为`pointHeight
    = height * 3` 和 `baseHeight = height / 2`。
- en: After you’ve made these changes, when you change the `height` variable, all
    the spire’s parts will change size.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在你做完这些更改后，当你更改`height`变量时，尖塔的所有部分都会改变大小。
- en: You don’t need to change any other parts of the program.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要修改程序的其他部分。
- en: You can test the program by changing the original `height` variable and rerunning
    it. If you change the `height` variable to `3`, your spire will look like [Figure
    3-9](ch03.html#ch3fig9).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过更改原始的`height`变量并重新运行程序来测试它。如果你将`height`变量更改为`3`，你的尖塔将像[图 3-9](ch03.html#ch3fig9)一样显示。
- en: '![image](graphics/f03-09.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-09.jpg)'
- en: '*Figure 3-9: You can make the spire taller just by changing the* `height` *variable.*'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-9：你只需更改* `height` *变量就可以使尖塔变高。*'
- en: Because you use the `height` variable to set the values for `pointHeight` and
    `baseHeight`, it’s very easy to change the spire. Play around with this code by
    changing the original `height` variable to a few different numbers. Rerun the
    program each time to see what happens!
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你使用`height`变量来设置`pointHeight`和`baseHeight`的值，所以很容易改变尖塔的外观。通过更改原始的`height`变量为几个不同的数字来玩这个代码。每次重新运行程序看看会发生什么！
- en: '**EXPONENTS**'
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**指数**'
- en: You can use an *exponent* to show that a number should be multiplied by itself
    a certain number of times. For example, 3⁴ (three to the power of four) is a short
    way of saying `3 * 3 * 3 * 3`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用一个*指数*来表示一个数字应该自我相乘多少次。例如，3⁴（三的四次方）是`3 * 3 * 3 * 3`的简写方式。
- en: In Python, `**` is the exponential operator. The number you want to multiply
    (the *base*) goes on the left of the operator, and the number of times you want
    to multiply it by itself (the *exponent*) goes on the right.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，`**`是指数运算符。你想乘的数字（*底数*）放在运算符的左侧，你想将它自己相乘多少次的数字（*指数*）放在右侧。
- en: 'Say you want to start a Minecraft farm. You need to till four plots of land.
    You want each plot of land to be four blocks by four blocks so you can grow lots
    of wheat. Mathematically, you can write this as `4 * 4 * 4`, or 4³. Here’s the
    code to work out how much wheat you’re growing:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想开始一个Minecraft农场。你需要耕作四块土地。你希望每块土地是四块块四块的大小，这样你就能种植很多小麦。从数学上讲，你可以写成`4 * 4
    * 4`，或者4³。这里是计算你种植多少小麦的代码：
- en: '[PRE17]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Your answer should be 64 individual plots of wheat, because `4 * 4` is `16`
    and `16 * 4` is `64`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你的答案应该是64块独立的小麦，因为`4 * 4`是`16`，而`16 * 4`是`64`。
- en: '**PARENTHESES AND ORDER OF OPERATIONS**'
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**括号和运算顺序**'
- en: 'When you use several math operators in one expression, you need to be careful
    how you arrange them. Different operators have different *priority*. When you’re
    using multiple operators, division and multiplication are evaluated first from
    left to right, and then addition and subtraction are calculated. Let’s look at
    how this expression is evaluated:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在一个表达式中使用多个数学运算符时，你需要小心如何排列它们。不同的运算符有不同的*优先级*。当你使用多个运算符时，除法和乘法会先从左到右进行计算，然后是加法和减法。让我们来看一下这个表达式是如何被计算的：
- en: '[PRE18]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Because multiplication and division always happen before addition and subtraction,
    Python starts on the left by multiplying 5 by 2 to get 10, and then divides 4
    by 2 to get 2\. That gives us 10 – 1 + 2\. Next, Python starts back on the left
    by subtracting 1 from 10, and then adds 2 to that, setting `mooshroom` to 11.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 因为乘法和除法总是先于加法和减法执行，Python从左开始先将5乘以2得到10，然后将4除以2得到2。这样我们就得到了10 – 1 + 2。接着，Python从左开始先从10中减去1，然后再加上2，最终将`mooshroom`设置为11。
- en: 'But you can control the order of operations by using parentheses. Expressions
    with operators in parentheses will evaluate the operations in parentheses before
    anything else. Let’s look at how parentheses change the order of operations. To
    start, here’s a statement that doesn’t use any parentheses:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 但你可以通过使用括号来控制运算顺序。带有运算符的括号表达式会先计算括号中的运算，再进行其他操作。让我们看看括号如何改变运算顺序。首先，这是一个不使用括号的表达式：
- en: '[PRE19]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Written this way, `zombiePigmen` ends up with a value of 16, because 6 times
    3 is 18, and 18 minus 2 is 16\. However, with parentheses, the result changes:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式写，`zombiePigmen`的值最终变为16，因为6乘以3是18，18减去2是16。然而，使用括号时，结果会发生变化：
- en: '[PRE20]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`zombiePigmen` now has a value of `6`! Instead of following the usual order,
    first Python subtracts 2 from 3, which results in 1, and then multiplies 6 by
    1 to get 6.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`zombiePigmen`现在的值是`6`！Python并没有按照通常的顺序操作，而是先从3中减去2，结果是1，然后将6乘以1得到6。'
- en: When you want a calculation to happen in a certain order, use parentheses to
    tell Python what to do first. This gives you even more control over Python.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当你希望计算按特定顺序执行时，可以使用括号告诉Python先做什么。这让你能更加控制Python。
- en: '**HANDY MATH TRICKS**'
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**实用数学技巧**'
- en: In the following sections, I’ll teach you two more math skills to level up your
    Python programming, and then we’ll combine what you’ve learned so far in one more
    mission.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我将教你两个数学技能，帮助你提升Python编程水平，然后我们将结合目前学到的内容进行一次任务。
- en: '**SHORTHAND OPERATORS**'
  id: totrans-166
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**简写操作符**'
- en: 'Quite often, you’ll want to use an operator on a variable and then store the
    result in the same variable. For example, you might want to add five sheep to
    your existing herd:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 很多时候，你可能想对一个变量使用运算符，然后将结果存储回同一个变量。例如，你可能想给现有的羊群增加五只羊：
- en: '[PRE21]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'But typing `sheep = sheep + 5` will probably get tiresome after a while. Don’t
    worry; there’s a shorter way! Python has *shorthand operators* that let you use
    a math operator on a variable and reassign the result to the same variable. Here
    are the four shorthand operators:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，输入`sheep = sheep + 5`可能会让你觉得有点麻烦。别担心，Python有一种更简短的写法！Python有*简写操作符*，可以让你对一个变量使用数学运算符并将结果重新赋值给同一个变量。以下是四种简写操作符：
- en: • Addition (`+=`)
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: • 加法 (`+=`)
- en: • Subtraction (`-=`)
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: • 减法 (`-=`)
- en: • Multiplication (`*=`)
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: • 乘法 (`*=`)
- en: • Division (`/=`)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: • 除法 (`/=`)
- en: 'For example, you can rewrite the sheep example using the addition shorthand
    operator:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以使用加法简写操作符重写羊群的例子：
- en: '[PRE22]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The value of `sheep` equals `11`, just like before.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`sheep`的值仍然是`11`，和之前一样。'
- en: '**PLAYING WITH RANDOM NUMBERS**'
  id: totrans-177
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**玩转随机数**'
- en: 'Using random numbers is one way to add some mystery and fun to your programs.
    You never know what you’ll end up with! Many real-world board games rely on random
    numbers: think about how many games you’ve played where you had to roll the dice
    to see how many spaces you could move. A dice roll is a classic example of random
    numbers in action.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 使用随机数是一种为你的程序增添神秘感和乐趣的方式。你永远不知道最后会得到什么！许多现实世界的桌面游戏依赖于随机数：想想看你玩过多少游戏是需要掷骰子来决定你能移动多少步的。掷骰子是随机数在实际应用中的经典例子。
- en: 'Python can generate random numbers for you easily, so let’s simulate the roll
    of a die. The number generated should be between 1 and 6:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Python可以轻松为你生成随机数，所以让我们模拟掷骰子。生成的数字应该在1到6之间：
- en: '[PRE23]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: When you want to create random numbers, make sure you include `import random`
    ➊ at the start of your program. The `randint()` ➋ function generates an integer
    value that the program can use just like any other number. The numbers you place
    inside the parentheses as arguments tell `randint()` to generate values between
    the first number and the second number. In this example, the number generated
    can have a value of 1, 2, 3, 4, 5, or 6.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想要生成随机数时，确保在程序开始时包含`import random` ➊。`randint()` ➋函数生成一个整数值，程序可以像使用其他数字一样使用它。你放在括号中的数字作为参数告诉`randint()`生成介于第一个数字和第二个数字之间的值。在这个例子中，生成的数字可以是1、2、3、4、5或6。
- en: You can use `randint()` to add a random number to the value of a variable, and
    you can even generate negative numbers. Let’s see how!
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `randint()` 为变量添加一个随机数，甚至生成负数。来看看怎么做吧！
- en: '[PRE24]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The lowest number that Python can generate to add to `score` is 0, and the highest
    is 99\. On the other hand, because of the negative argument, `points` might get
    set to a number as low as –99!
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Python 可以生成的最低数字是 0，最高数字是 99。而由于负值的参数，`points` 的值可能会设置为低至 -99 的数字！
- en: '**MISSION #10: SUPER JUMP SOMEWHERE NEW!**'
  id: totrans-185
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务 #10：超级跳跃，去一个新的地方！**'
- en: In this chapter’s last mission, you’ll make the player jump a random distance
    on the x-, y-, and z-axes by storing the player’s current position and then adding
    a random number to each of the three coordinates. Use the random numbers between
    –10 and 10 to change the `x` and `z` values, and make sure the random values for
    `y` are between 0 and 10.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后任务中，你将让玩家在 x、y、z 三个轴上随机跳跃。你将存储玩家的当前位置，并为三个坐标值分别添加一个随机数。使用介于 -10 到 10 之间的随机数来改变
    `x` 和 `z` 的值，确保 `y` 的随机值在 0 到 10 之间。
- en: To get started, copy [Listing 3-10](ch03.html#ch3ex10) into a new file in IDLE
    and save it as *randomJump.py*.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请将[清单 3-10](ch03.html#ch3ex10)复制到 IDLE 中的新文件里，并将文件保存为 *randomJump.py*。
- en: '*randomJump.py*'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '*randomJump.py*'
- en: '[PRE25]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '*Listing 3-10: The incomplete random jump program*'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 3-10：不完整的随机跳跃程序*'
- en: The random number generation code for the `y` and `z` variables is missing,
    and it’s up to you to add it. Once you do, the player will have the ability to
    jump anywhere, as I did in [Figure 3-10](ch03.html#ch3fig10). Let the randomness
    take you to new and exciting places!
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`y` 和 `z` 变量的随机数生成代码缺失，接下来由你来补充它。一旦补充完成，玩家将能像我在[图 3-10](ch03.html#ch3fig10)中做的那样，随意跳跃。让随机性带你去探索新的、有趣的地方吧！'
- en: At the moment, the code doesn’t use shorthand operators to change the values
    of the variables. Try changing the addition expression at ➊ to use shorthand instead.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，代码中没有使用简写运算符来改变变量的值。尝试将 ➊ 处的加法表达式改成简写形式。
- en: '![image](graphics/f03-10.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-10.jpg)'
- en: '*Figure 3-10: I jumped in a random direction and ended up on top of this tree.
    Where did you end up?*'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-10：我朝一个随机方向跳跃，结果落在了这棵树上。你最后落到哪里了？*'
- en: '**BONUS OBJECTIVE: RANDOM BLOCKS TELEPORTATION**'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**额外目标：随机方块传送**'
- en: 'Let’s make the *randomJump.py* program even more random! After the player jumps
    to a random position, place a random block below them. You could also adapt the
    teleportation tour program from [Mission #1](ch02.html#ch02lev2sec05) (see *teleport.py*
    on [page 34](ch02.html#page_34)) to make the player teleport to a random position
    each time. If you accidentally teleport somewhere and get stuck, you can always
    rerun *teleport.py*, which should teleport you to somewhere safe.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们让 *randomJump.py* 程序变得更加随机！在玩家跳跃到随机位置后，在他们下面放置一个随机的方块。你也可以改编[任务 #1](ch02.html#ch02lev2sec05)中的传送程序（见
    *teleport.py*，位于[第 34 页](ch02.html#page_34)），使玩家每次都能传送到一个随机位置。如果你不小心传送到某个地方并且卡住了，你可以随时重新运行
    *teleport.py*，它会把你传送到一个安全的地方。'
- en: '**WHAT YOU LEARNED**'
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to do math in Python. You’ll use addition,
    subtraction, multiplication, and division frequently in the Python programs in
    the rest of this book and in the programs that you create in the future. You’ve
    also learned how to generate random numbers and created some very useful programs
    in Minecraft along the way. Great job!
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学会了如何在 Python 中做数学运算。你将在本书后续的 Python 程序中以及未来你自己创建的程序中频繁使用加法、减法、乘法和除法。你还学会了如何生成随机数，并且在《我的世界》中创建了一些非常有用的程序。做得好！
- en: In [Chapter 4](ch04.html#ch04), you’ll learn about the string data type in Python,
    which is used to contain letters, symbols, and numbers. Strings are very useful
    in Minecraft, because you can use them to post messages to Minecraft’s chat. You’ll
    also explore strings to manipulate Minecraft’s chat and do other cool things.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 4 章](ch04.html#ch04)中，你将学习 Python 中的字符串数据类型，它用于存储字母、符号和数字。字符串在《我的世界》中非常有用，因为你可以用它们在游戏中发送消息到聊天窗口。你还将学习如何操作字符串来修改《我的世界》的聊天内容以及实现其他酷炫的功能。
