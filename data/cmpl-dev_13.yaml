- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">11</samp> <samp class="SANS_Dogma_OT_Bold_B_11">SETTING
    UP THE DOCKER ENVIRONMENT</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">11</samp> <samp class="SANS_Dogma_OT_Bold_B_11">设置
    Docker 环境</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/Drop-image.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Drop-image.jpg)'
- en: In this part of the book, you’ll build a full-stack application from scratch
    by using the knowledge you’ve acquired so far. While previous chapters explained
    parts of the technology stack, the remaining chapters focus on the code in more
    detail.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的这一部分，你将通过运用迄今为止学到的知识，从零开始构建一个全栈应用程序。虽然前面的章节已经解释了部分技术栈，但剩下的章节将更详细地聚焦于代码部分。
- en: This chapter describes the application you’ll build and walks you through configuring
    the environment using Docker. While I recommend reading previous chapters before
    you start writing code, the only real requirement is that you have Docker installed
    and running before moving on. Consult [Chapter 10](chapter10.xhtml) for instructions
    on doing so.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述了你将构建的应用程序，并引导你通过使用 Docker 配置环境。虽然我建议在开始编写代码之前阅读前面的章节，但唯一的真正要求是，在继续之前，你必须确保已经安装并运行
    Docker。有关安装 Docker 的说明，请参考[第 10 章](chapter10.xhtml)。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*You can download the complete source code for the Food Finder application
    at* [http://<wbr>www<wbr>.usemodernfullstack<wbr>.dev<wbr>/downloads<wbr>/food<wbr>-finder](http://www.usemodernfullstack.dev/downloads/food-finder)
    *and a ZIP file with only the required assets from* [http://<wbr>www<wbr>.usemodernfullstack<wbr>.dev<wbr>/downloads<wbr>/assets](http://www.usemodernfullstack.dev/downloads/assets)*.*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可以从* [http://<wbr>www<wbr>.usemodernfullstack<wbr>.dev<wbr>/downloads<wbr>/food<wbr>-finder](http://www.usemodernfullstack.dev/downloads/food-finder)
    *下载 Food Finder 应用程序的完整源代码，以及从* [http://<wbr>www<wbr>.usemodernfullstack<wbr>.dev<wbr>/downloads<wbr>/assets](http://www.usemodernfullstack.dev/downloads/assets)
    *下载仅包含所需资源的 ZIP 文件。*'
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Food Finder Application</samp>
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">Food Finder 应用程序</samp>
- en: The Food Finder application shows a list of restaurants and their locations.
    The user can click these to see additional details about each location. In addition,
    they can log in to the app with their GitHub accounts by using OAuth so that they
    can maintain a wish list of locations.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Food Finder 应用程序展示了一系列餐馆及其位置。用户可以点击这些餐馆，以查看每个位置的更多细节。此外，用户还可以通过 OAuth 使用他们的
    GitHub 账户登录该应用，以便维护一个位置的愿望清单。
- en: Behind the scenes, we’ll write this simple single-page application in TypeScript.
    After setting up the local environment, we’ll build the backend and middleware
    with Next.js, Mongoose, and MongoDB, which we’ll seed with initial data. Then
    we’ll add GraphQL to expose an API layer through which we can access a user’s
    wish list. To build the frontend, we’ll use our knowledge of React components,
    Next.js pages, and routing. We’ll also add an OAuth authorization flow with *next-auth*
    to let users log in with GitHub. Finally, we’ll write automated tests with Jest
    to verify the integrity and stability of the application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，我们将使用 TypeScript 编写这个简单的单页应用程序。在设置本地环境后，我们将使用 Next.js、Mongoose 和 MongoDB
    构建后端和中间件，并为其预填充初始数据。然后，我们将添加 GraphQL，以通过 API 层访问用户的愿望清单。为了构建前端，我们将运用对 React 组件、Next.js
    页面和路由的知识。我们还将使用 *next-auth* 添加 OAuth 授权流，以便用户可以通过 GitHub 登录。最后，我们将使用 Jest 编写自动化测试，以验证应用程序的完整性和稳定性。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Building the Local Environment with
    Docker</samp>
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">使用 Docker 构建本地环境</samp>
- en: Docker decouples the development environment from our local machine. We’ll use
    it to create self-contained services for each part of our application. In the
    *docker-compose* file, we’ll add one service for the backend, which provides the
    MongoDB database, and a second to run the Next.js application hosting the frontend
    and the middleware.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 将开发环境与我们的本地机器解耦。我们将使用它为应用程序的每个部分创建自包含的服务。在 *docker-compose* 文件中，我们将添加一个服务来提供
    MongoDB 数据库的后端，另一个服务来运行托管前端和中间件的 Next.js 应用程序。
- en: To start the development, create a new empty folder, *code*. This folder will
    serve as the application’s root and contain all the code for the Food Finder application.
    Later in this chapter, we’ll use the <samp class="SANS_TheSansMonoCd_W5Regular_11">create-next-app</samp>
    helper command to add files to it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始开发，创建一个新的空文件夹 *code*。该文件夹将作为应用程序的根目录，并包含 Food Finder 应用程序的所有代码。在本章后面，我们将使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">create-next-app</samp> 辅助命令向其中添加文件。
- en: Next, create an empty *docker-compose.yml* file and a *.docker* folder in this
    root folder. In the file, we will define the two services for our environment
    and store the seed data we need to create the container.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在这个根目录下创建一个空的*docker-compose.yml*文件和一个*.docker*文件夹。在文件中，我们将定义环境的两个服务，并存储我们创建容器所需的种子数据。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The Backend Container</samp>
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">后端容器</samp>
- en: The backend container provides nothing but the app’s MongoDB instance. For this
    reason, we can use the official MongoDB image, which Docker can download automatically,
    from the Docker registry without creating a custom Dockerfile.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 后端容器只提供应用的 MongoDB 实例。因此，我们可以使用官方的 MongoDB 镜像，Docker 可以自动从 Docker 注册表下载该镜像，而无需创建自定义的
    Dockerfile。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Seeding the Database</samp>
  id: totrans-17
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">种植数据库</samp>
- en: We want MongoDB to begin with a prefilled database that contains a valid set
    of initial datasets. This process is called seeding the database, and we can automate
    it by copying the seeding script *seed-mongodb.js* into the container’s */docker-entrypoint-initdb.d/*
    directory on startup. The MongoDB image executes the scripts in this folder against
    the database defined in the <samp class="SANS_TheSansMonoCd_W5Regular_11">MONGO_INITDB_DATABASE</samp>
    environment variable if there is no data in the container’s */data/db* directory
    on startup.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望 MongoDB 以一个预填充的数据库启动，该数据库包含一组有效的初始数据集。这个过程称为数据库的种植，我们可以通过将种植脚本*seed-mongodb.js*复制到容器的*/docker-entrypoint-initdb.d/*目录中来自动化这个过程。MongoDB
    镜像会在容器的*/data/db*目录没有数据时，在启动时执行这个文件夹中的脚本，并将其应用到<MONGO_INITDB_DATABASE>环境变量中定义的数据库上。
- en: Create a new folder, *foodfinder-backend*, in the *.docker* folder, and then
    copy into the newly created folder the *seed-mongodb.js* file from the *assets.zip*
    file you downloaded earlier. The seed file’s content should look similar to [Listing
    11-1](chapter11.xhtml#Lis11-1).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在*.docker*文件夹中创建一个新的文件夹*foodfinder-backend*，然后将之前下载的*assets.zip*文件中的*seed-mongodb.js*文件复制到新创建的文件夹中。种子文件的内容应该类似于[列表
    11-1](chapter11.xhtml#Lis11-1)。
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 11-1: The seed-mongodb.js file'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11-1：seed-mongodb.js 文件
- en: You can see that the script interacts directly with a collection in the MongoDB
    instance that we’ll set up in the next section. We use MongoDB’s <samp class="SANS_TheSansMonoCd_W5Regular_11">insert</samp>
    method to fill the database’s <samp class="SANS_TheSansMonoCd_W5Regular_11">location</samp>
    collection with the documents. Note that we are working with the *native* MongoDB
    driver to insert the documents instead of using Mongoose. We do so because Mongoose
    is not installed on the default MongoDB Docker image, and inserting the documents
    is a relatively simple task. Although we do not use Mongoose for seeding the database,
    the documents we insert need to match the schema we define with Mongoose later.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，这个脚本直接与我们将在下一节中设置的 MongoDB 实例中的一个集合进行交互。我们使用 MongoDB 的 <samp class="SANS_TheSansMonoCd_W5Regular_11">insert</samp>
    方法，将文档填充到数据库的 <samp class="SANS_TheSansMonoCd_W5Regular_11">location</samp> 集合中。请注意，我们使用的是*原生*
    MongoDB 驱动程序来插入文档，而不是使用 Mongoose。我们之所以这样做，是因为默认的 MongoDB Docker 镜像中没有安装 Mongoose，而插入文档是一个相对简单的任务。尽管我们没有使用
    Mongoose 来种植数据库，但我们插入的文档需要与我们稍后用 Mongoose 定义的架构相匹配。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Creating the Backend Service</samp>
  id: totrans-23
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">创建后端服务</samp>
- en: We can now define the backend service in the Docker setup. Add the code from
    [Listing 11-2](chapter11.xhtml#Lis11-2) into the empty *docker-compose.yml* file
    we created earlier.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在 Docker 设置中定义后端服务。将[列表 11-2](chapter11.xhtml#Lis11-2)中的代码添加到我们之前创建的空的*docker-compose.yml*文件中。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 11-2: The docker-compose.yml file with the backend service'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11-2：带有后端服务的docker-compose.yml文件
- en: 'We first define the container’s name so that we can easily reference it later.
    As discussed earlier, we use the latest version of the official MongoDB image
    and specify that this container should always be restarted if it stops. Next,
    we use the environment variables to define the collections we’ll use with MongoDB.
    We define two of those: <samp class="SANS_TheSansMonoCd_W5Regular_11">DB_NAME</samp>
    points to the collection we’ll use with Mongoose, and <samp class="SANS_TheSansMonoCd_W5Regular_11">MONGO_INITDB_DATABASE</samp>
    points to the seed script. The scripts in */docker-entrypoint-initdb.d/* use this
    latter collection by default.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先定义容器的名称，以便后续可以轻松引用它。如前所述，我们使用官方MongoDB镜像的最新版本，并指定如果容器停止，它应始终重新启动。接下来，我们使用环境变量来定义我们将与MongoDB一起使用的集合。我们定义了两个变量：<samp
    class="SANS_TheSansMonoCd_W5Regular_11">DB_NAME</samp>指向我们将与Mongoose一起使用的集合，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">MONGO_INITDB_DATABASE</samp>指向种子脚本。*/docker-entrypoint-initdb.d/*中的脚本默认使用这个后者集合。
- en: We want the script to populate our application’s database, so we set both variables
    to the same name, <samp class="SANS_TheSansMonoCd_W5Regular_11">foodfinder</samp>,
    and thus we have a prefilled database for our Mongoose model.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望脚本填充应用程序的数据库，因此我们将两个变量设置为相同的名称<samp class="SANS_TheSansMonoCd_W5Regular_11">foodfinder</samp>，从而为我们的Mongoose模型提供了一个预填充的数据库。
- en: Then we map and expose the container’s internal port 27017 to the host’s port
    27017 so that the MongoDB instance is accessible to the application at *mongodb://backend:27017/foodfinder*.
    Notice that the connection string contains the service name, the port, and the
    database. Later, we store this connection string in the environment variables
    and use it to connect to the database from the middleware. Finally, we map and
    copy the seed script to the setup location and save the database data from */data/db*
    into the Docker volume *mongodb_data_container*. Because we want to split the
    string across two lines, we need to wrap it in double quotes (<samp class="SANS_TheSansMonoCd_W5Regular_11">"</samp>)
    according to the YAML conventions.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将容器的内部端口27017映射并暴露到主机的端口27017，以便MongoDB实例可以通过应用程序访问，地址为*mongodb://backend:27017/foodfinder*。请注意，连接字符串中包含了服务名称、端口和数据库。稍后，我们将这个连接字符串存储在环境变量中，并用它从中间件连接到数据库。最后，我们将种子脚本映射并复制到设置位置，并将数据库数据从*/data/db*保存到Docker卷*mongodb_data_container*中。因为我们希望将字符串拆分到两行，所以需要根据YAML约定将其包裹在双引号中(<samp
    class="SANS_TheSansMonoCd_W5Regular_11">"</samp>)。
- en: 'Now complete the Docker setup with <samp class="SANS_TheSansMonoCd_W5Regular_11">docker
    compose up</samp>:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用<samp class="SANS_TheSansMonoCd_W5Regular_11">docker compose up</samp>完成Docker设置：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The output shows us that the Docker daemon successfully created the <samp class="SANS_TheSansMonoCd_W5Regular_11">foodfinder-backend</samp>
    container and that the seeding script was executed during startup. Instead of
    going through the hassle of installing and maintaining MongoDB locally or finding
    a free or low-cost cloud instance, we’ve added MongoDB to our project with just
    a few lines of code in the *docker -compose* file.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示Docker守护进程成功创建了<samp class="SANS_TheSansMonoCd_W5Regular_11">foodfinder-backend</samp>容器，并且在启动期间执行了种子脚本。我们通过在*docker-compose*文件中添加几行代码，将MongoDB添加到我们的项目中，而不必经历安装和维护MongoDB的麻烦，或寻找免费的或低成本的云实例。
- en: 'Stop the container with CRTL-C and remove it with <samp class="SANS_TheSansMonoCd_W5Regular_11">docker
    compose down</samp>:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CRTL-C停止容器，并通过<samp class="SANS_TheSansMonoCd_W5Regular_11">docker compose
    down</samp>将其移除：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now we can add the frontend container.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以添加前端容器了。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The Frontend Container</samp>
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">前端容器</samp>
- en: Now we’ll create the containerized infrastructure for the frontend and middleware.
    Our approach will involve using <samp class="SANS_TheSansMonoCd_W5Regular_11">create-next-app</samp>
    to scaffold the Next.js application, as we did in [Chapter 5](chapter5.xhtml),
    relying on the official Node.js Docker image to decouple the application from
    any local Node.js installation.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建前端和中间件的容器化基础设施。我们的做法是使用<samp class="SANS_TheSansMonoCd_W5Regular_11">create-next-app</samp>来搭建Next.js应用程序，正如我们在[第5章](chapter5.xhtml)中所做的那样，依赖官方的Node.js
    Docker镜像，将应用程序与任何本地Node.js安装解耦。
- en: As we’ll execute all Node.js-related commands inside this container, we technically
    don’t even need Node.js installed on our local machine; nor must we make sure
    the Node.js versions we use comply with Next.js’s requirements. Also, npm might
    install packages that are optimized for the operating system on which it is running,
    so by using npm inside the container, we ensure that npm installs the correct
    versions for Linux.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将所有与 Node.js 相关的命令都在该容器内执行，从技术上讲，我们甚至不需要在本地机器上安装 Node.js；也不必确保我们使用的 Node.js
    版本符合 Next.js 的要求。此外，npm 可能会安装优化过的操作系统相关的包，因此通过在容器内使用 npm，我们确保了 npm 安装适用于 Linux
    的正确版本。
- en: Nonetheless, we’ll want Docker to synchronize the Node.js *modules* folder to
    our local system. This will allow our IDE to automatically use the installed dependencies,
    such as the TypeScript compiler and ESLint. Let’s start by creating a minimal
    Dockerfile.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我们仍然希望 Docker 同步 Node.js *modules* 文件夹到我们的本地系统。这将允许我们的 IDE 自动使用已安装的依赖项，例如
    TypeScript 编译器和 ESLint。让我们从创建一个最小的 Dockerfile 开始。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Creating the Application Service</samp>
  id: totrans-40
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">创建应用程序服务</samp>
- en: We add the combined frontend and middleware service to our Docker setup by placing
    the code from [Listing 11-3](chapter11.xhtml#Lis11-3) into the <samp class="SANS_TheSansMonoCd_W5Regular_11">services</samp>
    property of the project’s *docker-compose.yml* file.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将 [列表 11-3](chapter11.xhtml#Lis11-3) 中的代码添加到项目的 *docker-compose.yml* 文件的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">services</samp> 属性中，将前端和中间件服务结合到我们的
    Docker 设置中。
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 11-3: The docker-compose.yml file with the backend and application
    service'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11-3：带有后端和应用程序服务的 docker-compose.yml 文件
- en: The service for the Food Finder application follows the same structure as the
    service for the backend. First we set the container’s name. Then we define the
    image to be used for this particular service. While the backend service used the
    official MongoDB image, we now use the official Node.js image with the current
    LTS version running on Alpine Linux, a lightweight Linux distribution that requires
    significantly less memory than a Debian-based image.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Food Finder 应用程序的服务结构与后端服务的结构相同。首先，我们设置容器的名称。然后，我们定义为该特定服务使用的镜像。虽然后端服务使用了官方的
    MongoDB 镜像，但我们现在使用的是官方的 Node.js 镜像，并且运行的是当前 LTS 版本，基于 Alpine Linux 的轻量级 Linux
    发行版，这种发行版比基于 Debian 的镜像消耗更少的内存。
- en: We then expose and map port 3000, making the application available on *http://localhost:3000*,
    and map the local application’s code directory into the container. Next, we set
    the working directory to the *code* directory. We specify that our container requires
    a running backend service, because the Next.js application will need a working
    connection to the MongoDB instance. In addition, we add environment variables.
    In particular, <samp class="SANS_TheSansMonoCd_W5Regular_11">chokidar</samp> supports
    hot-reloading for the Next.js code. Finally, setting the <samp class="SANS_TheSansMonoCd_W5Regular_11">tty</samp>
    property to <samp class="SANS_TheSansMonoCd_W5Regular_11">true</samp> makes the
    container provide an interactive shell instead of shutting down. We’ll need the
    shell to execute commands inside the container.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们暴露并映射 3000 端口，使应用程序可以通过 *http://localhost:3000* 访问，并将本地应用程序的代码目录映射到容器中。接下来，我们将工作目录设置为
    *code* 目录。我们指定容器需要一个正在运行的后端服务，因为 Next.js 应用程序需要与 MongoDB 实例保持有效连接。此外，我们还添加了环境变量。特别地，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">chokidar</samp> 支持 Next.js 代码的热重载。最后，将
    <samp class="SANS_TheSansMonoCd_W5Regular_11">tty</samp> 属性设置为 <samp class="SANS_TheSansMonoCd_W5Regular_11">true</samp>
    使容器提供交互式 shell，而不是关闭容器。我们需要这个 shell 来在容器内执行命令。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Installing Next.js</samp>
  id: totrans-46
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">安装 Next.js</samp>
- en: 'With both services in place, we can now install Next.js inside the container.
    To do so, we need to start the container with <samp class="SANS_TheSansMonoCd_W5Regular_11">docker
    compose up</samp>:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个服务都就绪后，我们现在可以在容器内安装 Next.js。为此，我们需要使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">docker
    compose up</samp> 启动容器：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Compare this command line output with the previous <samp class="SANS_TheSansMonoCd_W5Regular_11">docker
    compose up</samp> output. You should see that the application container started
    successfully and that it runs a Node.js interactive shell.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个命令行输出与之前的 <samp class="SANS_TheSansMonoCd_W5Regular_11">docker compose up</samp>
    输出进行对比。你应该能看到应用程序容器已成功启动，并运行一个 Node.js 交互式 shell。
- en: Now we can use <samp class="SANS_TheSansMonoCd_W5Regular_11">docker exec</samp>
    to execute commands inside the running container. Doing so has two main advantages.
    First, we don’t need any particular version of Node.js (or any version at all)
    on our local machine. Second, we run the Node.js application and npm commands
    on the Node.js Linux Alpine image so that the dependencies will be optimized for
    Alpine instead of for our host system.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">docker exec</samp> 在正在运行的容器内执行命令。这样做有两个主要优点。首先，我们在本地机器上不需要任何特定版本的
    Node.js（甚至不需要任何版本）。其次，我们在 Node.js Linux Alpine 镜像中运行 Node.js 应用程序和 npm 命令，这样依赖项就会针对
    Alpine 优化，而不是针对我们的主机系统。
- en: 'To run npm commands inside the container, use <samp class="SANS_TheSansMonoCd_W5Regular_11">docker
    exec -it foodfinder-application</samp> followed by the command to run. The Docker
    daemon connects to the terminal inside the container and executes the provided
    command in the application container’s working directory, */home/node/code*, which
    we set previously. Let’s install the Next.js application there using the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">npx</samp> command discussed in [Chapter
    5](chapter5.xhtml):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要在容器内运行 npm 命令，可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">docker exec
    -it foodfinder-application</samp> 后跟要运行的命令。Docker 守护进程会连接到容器内的终端，并在应用程序容器的工作目录
    */home/node/code* 中执行提供的命令，这个目录是我们之前设置的。让我们使用在 [第 5 章](chapter5.xhtml) 中讨论的 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">npx</samp> 命令在那里安装 Next.js 应用程序：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We set the project name to *foodfinder-application* and accept the defaults.
    The rest of the output should look familiar to you.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将项目名称设置为 *foodfinder-application* 并接受默认设置。其余的输出应该对你来说是熟悉的。
- en: As soon as the scaffolding is done, we can start the Next.js application with
    <samp class="SANS_TheSansMonoCd_W5Regular_11">npm run dev</samp>. If you visit
    *http://localhost:3000* in your browser, you should see the familiar Next.js splash
    screen. The *foodfinder-application* folder should be mapped into the local *code*
    folder, so we can edit the Next.js-related files locally.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦脚手架搭建完成，我们可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">npm run dev</samp>
    启动 Next.js 应用程序。如果你在浏览器中访问 *http://localhost:3000*，应该能看到熟悉的 Next.js 启动画面。*foodfinder-application*
    文件夹应映射到本地的 *code* 文件夹，这样我们就可以在本地编辑与 Next.js 相关的文件。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Adjusting the Application
    Service for Restarts</samp>
  id: totrans-55
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">调整应用程序服务以支持重启</samp>
- en: Currently, connecting to the application container requires running <samp class="SANS_TheSansMonoCd_W5Regular_11">docker
    exec</samp> after each restart through <samp class="SANS_TheSansMonoCd_W5Regular_11">docker
    compose up</samp> and then calling <samp class="SANS_TheSansMonoCd_W5Regular_11">npm
    run dev</samp> manually. Let’s make two minor adjustments in our application service
    to allow for a more convenient setup. Modify the file to match [Listing 11-4](chapter11.xhtml#Lis11-4).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，连接到应用程序容器需要在每次通过 <samp class="SANS_TheSansMonoCd_W5Regular_11">docker compose
    up</samp> 重启后运行 <samp class="SANS_TheSansMonoCd_W5Regular_11">docker exec</samp>，然后手动调用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">npm run dev</samp>。让我们对应用程序服务进行两项小调整，以实现更便捷的设置。修改文件，使其与
    [示例 11-4](chapter11.xhtml#Lis11-4) 匹配。
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Listing 11-4: The docker-compose.yml file to start Next.js automatically'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 11-4：用于自动启动 Next.js 的 docker-compose.yml 文件
- en: 'First, change the <samp class="SANS_TheSansMonoCd_W5Regular_11">working_dir</samp>
    property. Because we’re working with Next.js, we set it to the Next.js application’s
    root folder, */home/node/code/foodfinder-application*, which contains the *package.json*
    file. Then we add the <samp class="SANS_TheSansMonoCd_W5Regular_11">command</samp>
    property with a value of <samp class="SANS_TheSansMonoCd_W5Regular_11">npm run
    dev</samp>. With these two modifications, each <samp class="SANS_TheSansMonoCd_W5Regular_11">docker
    compose up</samp> call should instantly start the Next.js application. Try starting
    the containers with <samp class="SANS_TheSansMonoCd_W5Regular_11">docker compose
    up</samp>; the console output should show that Next.js runs and that it’s available
    at *http://localhost:3000*:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，修改 <samp class="SANS_TheSansMonoCd_W5Regular_11">working_dir</samp> 属性。因为我们正在处理
    Next.js，所以我们将其设置为 Next.js 应用程序的根文件夹 */home/node/code/foodfinder-application*，该文件夹包含
    *package.json* 文件。然后，我们添加 <samp class="SANS_TheSansMonoCd_W5Regular_11">command</samp>
    属性，值为 <samp class="SANS_TheSansMonoCd_W5Regular_11">npm run dev</samp>。通过这两个修改，每次调用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">docker compose up</samp> 时，Next.js
    应用程序应立即启动。尝试使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">docker compose up</samp>
    启动容器；控制台输出应显示 Next.js 正在运行，并且可以通过 *http://localhost:3000* 访问：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you visit *http://localhost:3000* in your browser, you should see the Next.js
    splash screen without having to start the Next.js application manually.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在浏览器中访问 *http://localhost:3000*，你应该会看到 Next.js 启动画面，而不需要手动启动 Next.js 应用程序。
- en: Note that, if you’re using Linux or macOS without being the administrator or
    root user, you’ll need to adjust the application service and the startup command.
    Because the Docker daemon runs as a root user by default, all files it creates
    require root privileges. Your regular user doesn’t have those and cannot access
    those files. To avoid these possible issues, modify your setup so that the Docker
    daemon transfers the ownership to your user. Start by adding the code in [Listing
    11-5](chapter11.xhtml#Lis11-5) to the application service in the *docker-compose*
    file.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果你在 Linux 或 macOS 上使用非管理员或 root 用户，你需要调整应用服务和启动命令。因为 Docker 守护进程默认以 root
    用户身份运行，它创建的所有文件都需要 root 权限。你的常规用户没有这些权限，无法访问这些文件。为避免这些问题，请修改设置，使得 Docker 守护进程将所有权转移给你的用户。首先，将
    [列表 11-5](chapter11.xhtml#Lis11-5) 中的代码添加到 *docker-compose* 文件中的应用服务。
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Listing 11-5: The docker-compose.yml file with the <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">user</samp>
    property'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11-5：带有 <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">user</samp>
    属性的 docker-compose.yml 文件
- en: 'We add the <samp class="SANS_TheSansMonoCd_W5Regular_11">user</samp> property
    to the <samp class="SANS_TheSansMonoCd_W5Regular_11">application</samp> service
    and use the environment variable <samp class="SANS_TheSansMonoCd_W5Regular_11">MY_USER</samp>
    as the property’s value. Then we modify the <samp class="SANS_TheSansMonoCd_W5Regular_11">docker
    compose</samp> commands so that, on startup, we add the current user’s user ID
    and group ID to this environment variable. Instead of a plain <samp class="SANS_TheSansMonoCd_W5Regular_11">docker
    compose up</samp> call, we use the following code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 <samp class="SANS_TheSansMonoCd_W5Regular_11">user</samp> 属性添加到 <samp class="SANS_TheSansMonoCd_W5Regular_11">application</samp>
    服务，并使用环境变量 <samp class="SANS_TheSansMonoCd_W5Regular_11">MY_USER</samp> 作为该属性的值。然后我们修改
    <samp class="SANS_TheSansMonoCd_W5Regular_11">docker compose</samp> 命令，使得在启动时将当前用户的用户
    ID 和组 ID 添加到该环境变量中。我们使用以下代码，而不是直接调用 <samp class="SANS_TheSansMonoCd_W5Regular_11">docker
    compose up</samp>：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We use the <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> helper program
    to save the user ID and group ID in the format <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">userid:groupid</samp>
    to our environment variable, which the *docker-compose* file then picks up. The
    <samp class="SANS_TheSansMonoCd_W5Regular_11">-u</samp> flag returns the user
    ID, and the <samp class="SANS_TheSansMonoCd_W5Regular_11">-g</samp> flag returns
    the group ID.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> 辅助程序将用户 ID 和组 ID
    以 <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">userid:groupid</samp>
    格式保存到我们的环境变量中，*docker-compose* 文件随后会读取这个变量。<samp class="SANS_TheSansMonoCd_W5Regular_11">-u</samp>
    标志返回用户 ID，<samp class="SANS_TheSansMonoCd_W5Regular_11">-g</samp> 标志返回组 ID。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">总结</samp>
- en: We’ve set up our local development environment with Docker containers. With
    the *docker-compose.yml* file we created in this chapter, we decoupled the application
    development from our local host system. Now we can switch our host systems and,
    at the same time, ensure that the Food Finder application always runs with the
    same Node.js version. In addition, we added a container running our MongoDB server,
    to which we’ll connect in the next chapter when we implement our application’s
    middleware.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用 Docker 容器设置好了本地开发环境。通过我们在本章中创建的 *docker-compose.yml* 文件，我们将应用程序开发与本地主机系统解耦。现在我们可以更换主机系统，并确保
    Food Finder 应用始终使用相同的 Node.js 版本。此外，我们还添加了一个运行 MongoDB 服务器的容器，在下一章我们将连接该容器并实现应用程序的中间件。
