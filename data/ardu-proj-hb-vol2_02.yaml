- en: '**LEDs**'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '**LED**'
- en: '**1'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1'
- en: LED Light Bar**
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: LED 灯条**
- en: In this project we’ll flash a row of LEDs back and forth in sequence, sort of
    like KITT from the 1980s TV series *Knight Rider*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将使一排 LED 按顺序来回闪烁，类似于 1980 年代 TV 剧集 *Knight Rider* 中的 KITT。
- en: '![Image](../images/p0016-01.jpg)![Image](../images/p0017-01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/p0016-01.jpg)![Image](../images/p0017-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需组件**'
- en: '**Arduino board**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**Arduino 板**'
- en: '**Breadboard**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**面包板**'
- en: '**Jumper wires**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**跳线**'
- en: '**8 LEDs**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**8 个 LED**'
- en: '**8 220-ohm resistors**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**8 个 220 欧姆电阻**'
- en: '**HOW IT WORKS**'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**工作原理**'
- en: An LED emits light when a small current is passed through it. LEDs are *polarized*,
    which means one side is positive and one side is negative. This is because the
    LED will work only with current flowing in one direction, from positive to negative.
    The longer leg of the LED is positive and must connect to a positive power connection.
    The Arduino sketch controls the sequence of flashes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当小电流通过 LED 时，它会发光。LED 是*极性化*的，这意味着一端是正极，另一端是负极。这是因为 LED 只能在电流单向流动时工作，从正极到负极。LED
    的长脚是正极，必须连接到正电源。Arduino 的草图控制闪烁的顺序。
- en: LEDs are delicate parts, requiring only a small amount of voltage to light up—smaller
    than the voltage the Arduino provides. To prevent the LEDs from being overloaded
    with voltage and burning out, we use *resistors*, which limit the amount of voltage
    passing through them to the LED on the other end.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: LED 是非常精细的元件，只需少量电压就能点亮——比 Arduino 提供的电压还要小。为了防止 LED 因过多电压而烧坏，我们使用*电阻*，它限制了通过
    LED 的电压。
- en: You can change the color of your LEDs and use this light bar to decorate a car,
    scooter, bike, picture frame, subwoofer, or almost anything else you choose. You
    can add up to 10 LEDs on the Uno before you run out of pins.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以更改 LED 的颜色，并使用这个灯条来装饰汽车、电动滑板车、自行车、相框、低音炮或几乎任何其他物品。在 Uno 上，你最多可以连接 10 个 LED，而不会用尽引脚。
- en: '**THE BUILD**'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**搭建过程**'
- en: Insert the LEDs into the breadboard with their shorter, negative legs in the
    GND rail at the top of your breadboard. Then connect this rail to GND on the Arduino,
    as shown in [Figure 1-1](ch01.xhtml#ch1fig1).
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 LED 插入面包板时，较短的负极脚应插入面包板顶部的 GND 导轨。然后将此导轨连接到 Arduino 的 GND，如[图 1-1](ch01.xhtml#ch1fig1)所示。
- en: '**FIGURE 1-1:** The LEDs flash back and forth in sequence. The short leg of
    the LED is in the GND rail of the breadboard, and the long leg is connected to
    the Arduino via a resistor.'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 1-1：** LED 按顺序来回闪烁。LED 的短脚连接到面包板的 GND 导轨，长脚通过电阻连接到 Arduino。'
- en: '![Image](../images/f1-01.jpg)'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Image](../images/f1-01.jpg)'
- en: Connect the LEDs in sequence to Arduino digital pins 2–9, as shown in the following
    circuit diagram. Place a 220-ohm resistor between each LED and digital pin, ensuring
    that the resistors bridge the center divide in the breadboard.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照下图的电路图，将 LED 依次连接到 Arduino 的数字引脚 2 到 9。每个 LED 与数字引脚之间需要放置一个 220 欧姆电阻，确保电阻跨越面包板的中间分隔。
- en: '| **LEDS** | **ARDUINO** |'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **LED** | **Arduino** |'
- en: '| --- | --- |'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Positive legs | Pins 2–9 via resistor |'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 正极脚 | 通过电阻连接到 2–9 引脚 |'
- en: '| Negative legs | GND |'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 负极脚 | GND |'
- en: Check your setup against [Figure 1-2](ch01.xhtml#ch1fig2), and then upload the
    code in “[The Sketch](ch01.xhtml#ch00lev1sec5)” below.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查你的设置与[图 1-2](ch01.xhtml#ch1fig2)中的对比，然后上传下面的代码“[草图](ch01.xhtml#ch00lev1sec5)”。
- en: '**FIGURE 1-2:** The circuit diagram for the LED light bar'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 1-2：** LED 灯条的电路图'
- en: '![Image](../images/f1-02.jpg)'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Image](../images/f1-02.jpg)'
- en: '**THE SKETCH**'
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**草图**'
- en: The sketch sets the pins connected to the LEDs as outputs, and then defines
    a function to turn all the LEDs off at the same time. This function is called
    in the loop cycle to turn the LEDs off, and then the LEDs are turned on one at
    a time—with a 200-millisecond delay between each one—to create a sweeping effect.
    Another loop sends the sequence back the other way.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图将连接到 LED 的引脚设置为输出，然后定义一个函数以同时关闭所有 LED。这个函数会在循环周期中调用，将 LED 关闭，然后依次点亮每个 LED，每次点亮之间有
    200 毫秒的延迟，从而创建一个扫过效果。另一个循环则将顺序反向传输。
- en: // Used with kind permission from
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: // 经由友好许可使用
- en: // Warwick A Smith, startingelectronics.com
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: // Warwick A Smith, startingelectronics.com
- en: // Knight Rider display on eight LEDs
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: // Knight Rider 在 8 个 LED 上显示
- en: void setup() {
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: void setup() {
- en: for (int i = 2; i < 10; i++) { // Choose pins 2-9
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: for (int i = 2; i < 10; i++) { // 选择引脚 2-9
- en: pinMode(i, OUTPUT); // Set the pins as outputs
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: pinMode(i, OUTPUT); // 将引脚设置为输出模式
- en: '}'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Define function to turn off all LEDs at the same time
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: // 定义函数以同时关闭所有 LED
- en: void allLEDsOff(void) {
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: void allLEDsOff(void) {
- en: for (int i = 2; i < 10; i++) {
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: for (int i = 2; i < 10; i++) {
- en: digitalWrite(i, LOW);
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: digitalWrite(i, LOW);
- en: '}'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Switch on LEDs in sequence from left to right
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: // 按顺序从左到右点亮LED
- en: void loop() {
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: void loop() {
- en: for (int i = 2; i < 9; i++) { // Run loop once for each LED
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: for (int i = 2; i < 9; i++) { // 每个LED执行一次循环
- en: allLEDsOff(); // Turn off all LEDs
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: allLEDsOff(); // 关闭所有LED
- en: digitalWrite(i, HIGH); // Turn on current LED
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: digitalWrite(i, HIGH); // 点亮当前LED
- en: delay(200); // Delay of 200 ms,
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: delay(200); // 延迟200毫秒
- en: // then repeat loop to move on to next LED
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: // 然后重复循环以移动到下一个LED
- en: '}'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: for (int i = 9; i > 2; i--) { // Light LEDs from right to left
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: for (int i = 9; i > 2; i--) { // 从右到左点亮LED
- en: allLEDsOff();
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: allLEDsOff();
- en: digitalWrite(i, HIGH);
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: digitalWrite(i, HIGH);
- en: delay(200);
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: delay(200);
- en: '}'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '**TROUBLESHOOTING**'
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**故障排除**'
- en: '**Q.** *The code compiles, but some or all of the LEDs do not light up as expected.*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**问：** *代码编译通过，但部分或所有LED未按预期点亮。*'
- en: • If none of the LEDs light, make sure you’ve connected the GND wire from the
    Arduino to the correct breadboard power rail and that the Arduino has power connected.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果没有任何LED亮起，请确保将Arduino的GND线连接到面包板的正确电源轨，并且Arduino已经连接了电源。
- en: • If only some LEDs light, check that the LEDs are inserted the correct way,
    with the longer wire to positive power and the shorter wire to GND. Because LEDs
    are polarized, they must be connected the correct way. Check that the resistors
    are inserted fully and lined up in the same row as the corresponding LED leg.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果只有部分LED亮起，检查LED是否正确插入，较长的引线应连接到正电源，较短的引线应连接到GND。由于LED是有极性的，必须正确连接。检查电阻是否已完全插入，并与相应的LED引脚对齐在同一排。
- en: • Make sure the LEDs are connected to the Arduino pins defined in “[The Sketch](ch01.xhtml#ch00lev1sec5)”
    on [page 19](ch01.xhtml#page_19). The first part of the sketch defines pins 2–9
    as outputs, so these are the pins you should use.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: • 确保LED连接到Arduino中定义的引脚，详见“[草图](ch01.xhtml#ch00lev1sec5)”第19页（[page 19](ch01.xhtml#page_19)）。草图的第一部分将引脚2-9定义为输出，因此应该使用这些引脚。
- en: • If an LED still fails to light, it may have burnt out or be faulty. An easy
    way to check is to swap the LED with another in the sequence and see if that resolves
    the issue. If you find that the LED works in another position, it means the resistor
    is either faulty or not inserted fully. Depending on the outcome, replace the
    LED or resistor with a functioning component.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果LED仍然无法点亮，可能是LED已经烧坏或出现故障。一种简单的检查方法是将该LED与序列中的另一个LED交换，看看是否能解决问题。如果发现LED在另一个位置能正常工作，说明电阻可能损坏或没有完全插入。根据结果，替换LED或电阻为正常的组件。
- en: '**2'
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2'
- en: Light-Activated Night-Light**
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 光敏夜灯**
- en: 'This project is a simple test of a photoresistor’s functionality: we’ll create
    a night light that gets brighter depending on the amount of light detected.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目是一个简单的光敏电阻功能测试：我们将制作一个夜灯，根据检测到的光线强度，夜灯的亮度会变化。
- en: '![Image](../images/p0021-01.jpg)![Image](../images/p0022-01.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/p0021-01.jpg)![Image](../images/p0022-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需部件**'
- en: '**Arduino board**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**Arduino板**'
- en: '**Breadboard**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**面包板**'
- en: '**Jumper wires**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**跳线**'
- en: '**Photoresistor**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**光敏电阻**'
- en: '**LED**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**LED**'
- en: '**10k-ohm resistor**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**10k欧姆电阻**'
- en: '**HOW IT WORKS**'
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**工作原理**'
- en: A *photoresistor* is a variable resistor that reacts to light; the less light
    that shines on it, the higher the resistance it provides. This resistance value
    varies the voltage that’s sent to the input pin of the Arduino, which in turn
    sends that voltage value to the output pin as the power level of the LED, so in
    low light the LED will be bright. There are different styles of photoresistors,
    but they usually have a small, clear, oval head with wavy lines (see [Figure 2-1](ch02.xhtml#ch2fig1)).
    Photoresistors do not have polarity, so it doesn’t matter which way you connect
    the legs.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*光敏电阻* 是一种对光线敏感的可变电阻；光线越少，它提供的电阻值越大。这个电阻值会改变发送到Arduino输入引脚的电压，进而将该电压值发送到输出引脚作为LED的电源电平，因此在光线较弱的情况下，LED将会变得更亮。光敏电阻有不同的类型，但通常都有一个小而透明的椭圆形头部，带有波浪形的线条（见[图
    2-1](ch02.xhtml#ch2fig1)）。光敏电阻没有极性，因此连接引脚时方向无关紧要。'
- en: The principles at work here are similar to those of a child’s night-light. You
    can use a photoresistor to control more than just LEDs, as we’ll see in upcoming
    chapters. Since we only have two power and GND connections, we won’t be using
    the breadboard power rails here.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的原理类似于儿童夜灯的工作方式。你可以使用光敏电阻来控制的不仅仅是LED，正如我们将在接下来的章节中看到的那样。由于我们只有两个电源和GND连接，这里我们不会使用面包板电源轨。
- en: '**FIGURE 2-1:** A photoresistor'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-1：** 光敏电阻'
- en: '![Image](../images/f2-01.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f2-01.jpg)'
- en: '**THE BUILD**'
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**制作过程**'
- en: Place your photoresistor in the breadboard, connecting one leg to GND directly
    on the Arduino and the other leg to Arduino A0.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将光敏电阻插入面包板，一端连接到Arduino的GND，另一端连接到Arduino的A0。
- en: Connect one leg of the 10k-ohm resistor to +5V, and connect the other leg to
    the A0 photoresistor leg, as shown in the circuit diagram in [Figure 2-2](ch02.xhtml#ch2fig2).
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个10k欧姆电阻的一端连接到+5V，另一端连接到A0光敏电阻引脚，如[图2-2](ch02.xhtml#ch2fig2)中的电路图所示。
- en: '**FIGURE 2-2:** The circuit diagram for the light-activated LED'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图2-2：** 光敏LED的电路图'
- en: '![Image](../images/f2-02.jpg)'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](../images/f2-02.jpg)'
- en: Insert the longer, positive leg of the LED directly into pin 13 on the Arduino
    and the shorter, negative leg directly into Arduino GND. We would normally use
    a resistor to limit the current to an LED, but we don’t need one here because
    pin 13 on the Arduino has one built in.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将LED的长脚（正极）直接插入Arduino的13号引脚，短脚（负极）直接插入Arduino的GND。我们通常会使用电阻来限制LED的电流，但在这里不需要电阻，因为Arduino的13号引脚已内置电阻。
- en: Upload the code in “[The Sketch](ch02.xhtml#ch00lev1sec9)” below.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传代码到"[草图](ch02.xhtml#ch00lev1sec9)"下面。
- en: '**THE SKETCH**'
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**草图**'
- en: The sketch first connects the photoresistor to Arduino pin A0 as our `INPUT`
    and the LED to pin 13 as our `OUTPUT`. We run the serial communication with `Serial.begin(9600)`,
    which (when your Arduino is connected to your PC) will send information to the
    Arduino’s Serial Monitor. This means the resistance value of the photoresistor
    will be displayed in the Serial Monitor on your computer, as shown in [Figure
    2-3](ch02.xhtml#ch2fig3).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 草图首先将光敏电阻连接到Arduino的A0引脚作为我们的`输入`，将LED连接到13引脚作为我们的`输出`。我们通过`Serial.begin(9600)`来启动串行通信，这将在Arduino连接到计算机时将信息发送到Arduino的串口监视器。这意味着光敏电阻的电阻值将显示在你计算机上的串口监视器中，如[图2-3](ch02.xhtml#ch2fig3)所示。
- en: '**FIGURE 2-3:** The Serial Monitor will display the resistance of the photoresistor.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-3：** 串口监视器将显示光敏电阻的电阻值。'
- en: '![Image](../images/f2-03.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f2-03.jpg)'
- en: The loop reads the photoresistor’s analog value and sends it to the LED as a
    voltage value. The A0 pin can read 1,024 values, which means there are 1,024 possible
    brightness levels for the LED. Minuscule changes between this many levels aren’t
    very visible, so we divide that number by 4 to scale down to only 256 values,
    making it easier to detect when there is a change in voltage to the LED.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 循环读取光敏电阻的模拟值，并将其作为电压值发送到LED。A0引脚可以读取1,024个值，这意味着LED有1,024个可能的亮度级别。这么多级别之间的微小变化不容易被察觉，因此我们将这个数字除以4，缩小到仅有256个值，使得检测LED电压变化变得更加容易。
- en: int lightPin = A0; // Pin connected to the photoresistor
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: int lightPin = A0; // 连接到光敏电阻的引脚
- en: int ledPin = 13; // Pin connected to the LED
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: int ledPin = 13; // 连接到LED的引脚
- en: void setup() {
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: void setup() {
- en: Serial.begin(9600); // Begin serial communication
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Serial.begin(9600); // 开始串行通信
- en: pinMode(ledPin, OUTPUT); // Setting the LED pin as an output
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: pinMode(ledPin, OUTPUT); // 设置LED引脚为输出
- en: '}'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // This loop reads the analog pin value and
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: // 这个循环读取模拟引脚的值并
- en: // sends that to the LED as an output
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: // 将值发送到LED作为输出
- en: void loop() {
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: void loop() {
- en: // Read the value of the photoresistor
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: // 读取光敏电阻的值
- en: Serial.println(analogRead(lightPin));
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Serial.println(analogRead(lightPin));
- en: // Write the value to the Serial Monitor
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: // 将值写入串口监视器
- en: // Send the value to the ledPin and divide by 4
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: // 将值发送到ledPin并除以4
- en: analogWrite(ledPin, analogRead(lightPin) / 4);
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: analogWrite(ledPin, analogRead(lightPin) / 4);
- en: delay(10); // Short delay before the sequence loops again
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: delay(10); // 在循环再次开始之前稍作延迟
- en: '}'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '**TROUBLESHOOTING**'
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**故障排除**'
- en: '**Q.** *The code compiles, but the LED does not light when it’s dark.*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**问：** *代码编译成功，但在黑暗中LED不亮。*'
- en: • Make sure that the LED is inserted with the long, positive leg in pin 13 and
    the short, negative leg in GND next to it.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: • 确保LED的长脚（正极）插入13号引脚，短脚（负极）插入旁边的GND。
- en: • Make sure the photoresistor is connected to Arduino A0 as shown in the circuit
    diagram in [Figure 2-2](ch02.xhtml#ch2fig2). Open the Serial Monitor to see if
    there’s a reading. If you’re getting a reading but the LED doesn’t light, the
    LED may be faulty, so try replacing it with another one.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: • 确保光敏电阻按照[图2-2](ch02.xhtml#ch2fig2)中的电路图连接到Arduino的A0。打开串口监视器查看是否有读取。如果你能看到读取值但LED不亮，LED可能有故障，尝试更换一个。
- en: '**3'
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**3'
- en: Seven-Segment LED Count Down Timer**
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 七段数码管倒计时计时器**
- en: In this project we’ll create a simple timer that counts down from 9 to 0\. This
    can be used in any number of useful projects!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将创建一个简单的计时器，从9倒数到0。这个计时器可以应用于各种有用的项目！
- en: '![Image](../images/p0027-01.jpg)![Image](../images/p0028-01.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/p0027-01.jpg)![Image](../images/p0028-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需零件**'
- en: '**Arduino board**'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**Arduino板**'
- en: '**Breadboard**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**面包板**'
- en: '**Jumper wires**'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**跳线**'
- en: '**Seven-segment, single-digit common-cathode LED**'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**七段单数共阴极LED**'
- en: '**8 220-ohm resistors**'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**8 个220欧姆电阻**'
- en: '**HOW IT WORKS**'
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**工作原理**'
- en: A seven-segment LED display shows a single digit or character using LED segments.
    Each segment is an individual LED, and by controlling which segments are lit at
    any time, we can display numeric values. We’re using a single-digit display in
    this project, shown in [Figure 3-1](ch03.xhtml#ch3fig1), but there are also two-,
    three-, four-, and eight-digit variations available.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 七段LED显示器使用LED段显示一个数字或字符。每个段都是一个独立的LED，通过控制哪些段在任何时刻点亮，我们可以显示数字值。在这个项目中我们使用的是单数字显示，如[图3-1](ch03.xhtml#ch3fig1)所示，但也有双位、三位、四位和八位的变化版本可供选择。
- en: '**FIGURE 3-1:** A seven-segment LED'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**图3-1：** 七段LED'
- en: '![Image](../images/f3-01.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f3-01.jpg)'
- en: '**NOTE**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The* cathode *of a device is the negative connection, usually indicated with
    a minus sign (–) and sometimes referred to as* ground *(abbreviated* GND*). It
    is connected to negative power. The* anode *of a device is the positive connection,
    usually indicated with a plus sign (+) and connected to positive power.*'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*设备的* 阴极 *是负极连接，通常用负号（–）表示，有时也称为* 地（GND）*。它连接到负电源。设备的* 阳极 *是正极连接，通常用加号（+）表示，并连接到正电源。*'
- en: This project will create a simple timer to count down from 9 to 0\. The seven-segment
    LED has 10 pins. Seven pins control the seven LEDs that light up to form each
    digit, and the eighth pin controls the decimal point. The other two pins are the
    common-cathode (–) or common-anode (+) pins, which add power to the project. Our
    seven-segment LED is common cathode, meaning one side of each LED needs to connect
    to ground. It’s important to note that the code will work only with a common-cathode
    LED. If you have a common-anode LED you want to use, check the troubleshooting
    section at the end of this chapter before uploading the sketch. Each LED segment
    requires a resistor to limit the current; otherwise, it will burn out.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目将创建一个简单的计时器，从9倒计时到0。七段LED有10个引脚。七个引脚控制七个LED，这些LED亮起来形成每个数字，第八个引脚控制小数点。其他两个引脚是共阴极（–）或共阳极（+）引脚，为项目提供电力。我们的七段LED是共阴极的，这意味着每个LED的一侧需要连接到地。需要注意的是，代码只适用于共阴极LED。如果你想使用共阳极LED，在上传草图之前，请查阅本章末尾的故障排除部分。每个LED段都需要电阻来限制电流，否则它会烧毁。
- en: The pins are labeled with a letter, as shown in [Figure 3-2](ch03.xhtml#ch3fig2).
    The numbered pins control the segments as shown on the right. The Arduino creates
    the number by turning the LEDs off or on in different combinations.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 引脚上标有字母，如[图3-2](ch03.xhtml#ch3fig2)所示。编号引脚控制右侧显示的段。Arduino通过不同的组合打开或关闭LED来创建数字。
- en: '**FIGURE 3-2:** A typical pin layout for a seven-segment LED'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**图3-2：** 七段LED的典型引脚布局'
- en: '![Image](../images/f3-02.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f3-02.jpg)'
- en: '**THE BUILD**'
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建步骤**'
- en: Place the seven-segment display in a breadboard as shown in [Figure 3-3](ch03.xhtml#ch3fig3),
    making sure the pins straddle either side of the center break. Connect LED pins
    3 and 8 to the GND rail.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照[图3-3](ch03.xhtml#ch3fig3)所示，将七段显示器放置在面包板上，确保引脚跨越中心断开部分。将LED的引脚3和8连接到GND轨。
- en: '**FIGURE 3-3:** The seven-segment LED pins should straddle the center break
    of the breadboard.'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图3-3：** 七段LED引脚应跨越面包板的中心断开部分。'
- en: '![Image](../images/f3-03.jpg)'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Image](../images/f3-03.jpg)'
- en: Connect LED pins 1, 2, 4, 5, 6, 7, and 9 as shown in the following table, remembering
    to insert a 220-ohm resistor between the LED and the Arduino connection. It’s
    important that the resistors straddle the center break on the breadboard, as shown
    in the circuit diagram in [Figure 3-4](ch03.xhtml#ch3fig4).
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照下表连接LED引脚1、2、4、5、6、7和9，并记得在LED与Arduino连接之间插入220欧姆电阻。电阻需要跨过面包板的中心断开部分，如[图3-4](ch03.xhtml#ch3fig4)中的电路图所示。
- en: '| **ARDUINO** | **SEVEN-SEGMENT LED SECTION** | **SEVEN-SEGMENT LED DISPLAY**
    |'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **ARDUINO** | **七段LED部分** | **七段LED显示器** |'
- en: '| --- | --- | --- |'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Pin 2 | A | Pin 7 |'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Pin 2 | A | Pin 7 |'
- en: '| Pin 3 | B | Pin 6 |'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Pin 3 | B | Pin 6 |'
- en: '| Pin 4 | C | Pin 4 |'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Pin 4 | C | Pin 4 |'
- en: '| Pin 5 | D | Pin 2 |'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Pin 5 | D | Pin 2 |'
- en: '| Pin 6 | E | Pin 1 |'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Pin 6 | E | Pin 1 |'
- en: '| Pin 7 | F | Pin 9 |'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Pin 7 | F | Pin 9 |'
- en: '| Pin 8 | G | Pin 10 |'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Pin 8 | G | Pin 10 |'
- en: '| Pin 9 | DP | Pin 5 |'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Pin 9 | DP | Pin 5 |'
- en: '**FIGURE 3-4:** The circuit diagram for the seven-segment LED countdown timer'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图3-4：** 七段LED倒计时计时器电路图'
- en: '![Image](../images/f3-04.jpg)'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](../images/f3-04.jpg)'
- en: Upload the code in “[The Sketch](ch03.xhtml#ch00lev1sec13)” on [page 32](ch03.xhtml#page_32).
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传代码到 “[The Sketch](ch03.xhtml#ch00lev1sec13)” 中的 [第32页](ch03.xhtml#page_32)。
- en: '**THE SKETCH**'
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**草图**'
- en: The sketch starts by defining the digits 0 to 9 as combinations of off (`0`)
    and on (`1`) LEDs. The pins controlling the LEDs are set as output, so they can
    set their corresponding LEDs to either `HIGH` or `LOW`. The combination of `1`
    and `0` values lights up to form the digit.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 草图首先定义了数字0到9作为关闭（`0`）和打开（`1`）LED的组合。控制LED的引脚被设置为输出，因此它们可以将相应的LED设置为`HIGH`或`LOW`。通过
    `1` 和 `0` 的组合点亮LED，形成数字。
- en: Note that these patterns are for common-cathode displays. For common-anode displays,
    change each `1` to `0` and each `0` to `1`. In the code, a value of `1` means
    the LED is on, and `0` means the LED is off.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些模式适用于共阴极显示器。对于共阳极显示器，将每个 `1` 改为 `0`，每个 `0` 改为 `1`。在代码中，`1` 表示LED亮，`0`
    表示LED灭。
- en: // Arduino seven-segment display example software
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: // Arduino七段显示示例代码
- en: // [http://hacktronics.com/Tutorials/arduino-and-7-segment-led.html](http://hacktronics.com/Tutorials/arduino-and-7-segment-led.html)
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: // [http://hacktronics.com/Tutorials/arduino-and-7-segment-led.html](http://hacktronics.com/Tutorials/arduino-and-7-segment-led.html)
- en: '// License: [http://www.opensource.org/licenses/mit-license.php](http://www.opensource.org/licenses/mit-license.php)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: // 许可证：[http://www.opensource.org/licenses/mit-license.php](http://www.opensource.org/licenses/mit-license.php)
- en: // Define the LEDs to be lit to create a number
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: // 定义要点亮的LED以创建一个数字
- en: byte seven_seg_digits[10][7] = { { 1, 1, 1, 1, 1, 1, 0 }, // = 0
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: byte seven_seg_digits[10][7] = { { 1, 1, 1, 1, 1, 1, 0 }, // = 0
- en: '{ 0, 1, 1, 0, 0, 0, 0 }, // = 1'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '{ 0, 1, 1, 0, 0, 0, 0 }, // = 1'
- en: '{ 1, 1, 0, 1, 1, 0, 1 }, // = 2'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '{ 1, 1, 0, 1, 1, 0, 1 }, // = 2'
- en: '{ 1, 1, 1, 1, 0, 0, 1 }, // = 3'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '{ 1, 1, 1, 1, 0, 0, 1 }, // = 3'
- en: '{ 0, 1, 1, 0, 0, 1, 1 }, // = 4'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '{ 0, 1, 1, 0, 0, 1, 1 }, // = 4'
- en: '{ 1, 0, 1, 1, 0, 1, 1 }, // = 5'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '{ 1, 0, 1, 1, 0, 1, 1 }, // = 5'
- en: '{ 1, 0, 1, 1, 1, 1, 1 }, // = 6'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '{ 1, 0, 1, 1, 1, 1, 1 }, // = 6'
- en: '{ 1, 1, 1, 0, 0, 0, 0 }, // = 7'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '{ 1, 1, 1, 0, 0, 0, 0 }, // = 7'
- en: '{ 1, 1, 1, 1, 1, 1, 1 }, // = 8'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '{ 1, 1, 1, 1, 1, 1, 1 }, // = 8'
- en: '{ 1, 1, 1, 0, 0, 1, 1 }  // = 9'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '{ 1, 1, 1, 0, 0, 1, 1 }  // = 9'
- en: '};'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: // Set the seven-segment LED pins as output
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: // 设置七段LED引脚为输出
- en: void setup() {
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: void setup() {
- en: pinMode(2, OUTPUT);
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: pinMode(2, OUTPUT);
- en: pinMode(3, OUTPUT);
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: pinMode(3, OUTPUT);
- en: pinMode(4, OUTPUT);
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: pinMode(4, OUTPUT);
- en: pinMode(5, OUTPUT);
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: pinMode(5, OUTPUT);
- en: pinMode(6, OUTPUT);
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: pinMode(6, OUTPUT);
- en: pinMode(7, OUTPUT);
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: pinMode(7, OUTPUT);
- en: pinMode(8, OUTPUT);
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: pinMode(8, OUTPUT);
- en: pinMode(9, OUTPUT);
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: pinMode(9, OUTPUT);
- en: writeDot(0); // Start with the decimal point off
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: writeDot(0); // 从小数点关闭开始
- en: '}'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: void writeDot(byte dot) {
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: void writeDot(byte dot) {
- en: digitalWrite(9, dot);
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: digitalWrite(9, dot);
- en: '}'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: void sevenSegWrite(byte digit) {
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: void sevenSegWrite(byte digit) {
- en: byte pin = 2;
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: byte pin = 2;
- en: for (byte segCount = 0; segCount < 7; ++segCount) {
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: for (byte segCount = 0; segCount < 7; ++segCount) {
- en: digitalWrite(pin, seven_seg_digits[digit][segCount]);
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: digitalWrite(pin, seven_seg_digits[digit][segCount]);
- en: ++pin;
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: ++pin;
- en: '}'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: void loop() {
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: void loop() {
- en: for (byte count = 10; count > 0; --count) { // Start the countdown
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: for (byte count = 10; count > 0; --count) { // 开始倒计时
- en: delay(1000); // 1 second between each digit
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: delay(1000); // 每个数字之间间隔1秒
- en: sevenSegWrite(count - 1); // Counting down by 1
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: sevenSegWrite(count - 1); // 倒数1
- en: '}'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: delay(4000);
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: delay(4000);
- en: '}'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '**TROUBLESHOOTING**'
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**故障排除**'
- en: '**Q.** *Some LED segments do not light up.*'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**问：** *一些LED段没有点亮。*'
- en: Check that the LEDs’ wires are inserted securely and line up with the resistors
    on the breadboard.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 检查LED的接线是否插好，并确保它们与面包板上的电阻对齐。
- en: '**Q.** *The display is not showing numbers correctly and looks erratic.*'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**问：** *显示屏没有正确显示数字，看起来不稳定。*'
- en: • Recheck that your wiring matches the diagrams as shown, as it’s easy to insert
    some wires in the wrong place.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: • 请重新检查你的接线是否与图示一致，因为容易将一些线接错位置。
- en: '• If all wiring is in the correct place and the timer’s still not working,
    the configuration of your seven-segment LED may be different from the one used
    here. Check the data sheet for your part and use that to direct your circuit along
    with the seven-segment pin table. You can also check which pin corresponds to
    each LED by connecting it up: attach the GND pin of the seven-segment LED to the
    negative end of a battery; connect a jumper wire to the positive end of the battery,
    via a 220-ohm resistor; and touch each pin in turn to light the segments individually.
    Note which segment each pin lights up.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果所有线路正确连接，但定时器仍然无法工作，可能是你的七段LED显示器配置与这里使用的不同。请查看你的零件数据表，并根据数据表指导电路的连接，同时参考七段引脚表。你还可以通过连接电池来检查每个引脚对应的LED：将七段LED的GND引脚连接到电池的负极；将一根跳线连接到电池的正极，通过220欧姆电阻连接；依次触碰每个引脚，点亮每个段。注意每个引脚点亮的是哪个段。
- en: • Remember, this wiring is for a seven-segment, common-cathode LED; for common-anode
    displays, change each `1` to `0` and each `0` to `1` in the sketch.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: • 请记住，这里的接线适用于七段共阴极LED；对于共阳极显示，请在草图中将每个`1`改为`0`，将每个`0`改为`1`。
- en: '**4'
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**4'
- en: LED Scrolling Marquee**
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: LED滚动广告牌
- en: In this project we’ll use a built-in driver module to create a scrolling message
    on an 8×8 matrix.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将使用内建的驱动模块，在一个8×8矩阵上创建一个滚动信息。
- en: '![Image](../images/p0034-01.jpg)![Image](../images/p0035-01.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/p0034-01.jpg)![Image](../images/p0035-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需零件**'
- en: '**Arduino board**'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '**Arduino开发板**'
- en: '**Female-to-male jumper wires**'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '**母对公跳线**'
- en: '**8×8 LED Maxim 7219 matrix module**'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '**8×8 LED Maxim 7219矩阵模块**'
- en: '**LIBRARY REQUIRED**'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需库**'
- en: '**MaxMatrix**'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**MaxMatrix**'
- en: '**HOW IT WORKS**'
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**工作原理**'
- en: An LED matrix is an array of LEDs that you can control individually to make
    patterns, text, images, or whatever you can program. The 8×8 LED matrix we’ll
    use in this project comes prebuilt with a *driver module*—a board, driven by a
    Maxim 7219 chip, that lets you control the entire matrix with only five pins connected
    to your Arduino. These modules are inexpensive and can be chained together so
    you have multiple matrices running from one sketch.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: LED矩阵是一个LED阵列，你可以单独控制每个LED，创建图案、文字、图片或你可以编程的任何内容。我们将在这个项目中使用的8×8 LED矩阵已经预装了一个*驱动模块*——一个由Maxim
    7219芯片驱动的电路板，可以让你通过连接到Arduino的五个引脚来控制整个矩阵。这些模块价格便宜，且可以串联在一起，这样你就可以用一个草图驱动多个矩阵。
- en: 'The matrix module has three pins: DIN, CS, and CLK, shown in [Figure 4-1](ch04.xhtml#ch4fig1).
    *DIN* stands for Data IN, *CS* for Chip Select, and *CLK* for CLocK. The remaining
    two pins connected to your Arduino power the matrix. The CLK pin senses pulses
    and controls the speed at which the Arduino and matrix communicate with each other
    in sync. The matrix uses a *serial peripheral interface (SPI)* communication protocol
    to speak with the Arduino, and the CS pin detects which SPI device is in use.
    DIN reads the data—in this case, the project’s sketch—from the Arduino.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 该矩阵模块有三个引脚：DIN、CS和CLK，如[图4-1](ch04.xhtml#ch4fig1)所示。*DIN*代表数据输入，*CS*代表芯片选择，*CLK*代表时钟。剩余的两个引脚连接到Arduino，用于为矩阵供电。CLK引脚感应脉冲，控制Arduino与矩阵之间同步通信的速度。该矩阵使用*串行外设接口(SPI)*通信协议与Arduino进行交流，而CS引脚检测当前使用的SPI设备。DIN读取来自Arduino的数据——在本项目中是草图。
- en: '**FIGURE 4-1:** The Maxim 7219 chip controls the LED matrix.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '**图4-1：** Maxim 7219芯片控制LED矩阵。'
- en: '![Image](../images/f4-01.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f4-01.jpg)'
- en: Each module has extra connections so you can add another module. By chaining
    together modules and changing the number of matrices in the code, you could scroll
    a message over a larger area.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模块都有额外的连接，可以让你添加另一个模块。通过将多个模块串联起来，并在代码中更改矩阵的数量，你可以在更大的区域内滚动信息。
- en: '**THE BUILD**'
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**搭建过程**'
- en: Connect the module directly to the Arduino using the female-to-male jumper wires,
    connecting the female end to the module. As shown in the following table, connect
    VCC on the LED matrix module to +5V on the Arduino, GND to GND, DIN to Arduino
    pin 8, CS to Arduino pin 9, and CLK to Arduino pin 10.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用母对公跳线将模块直接连接到Arduino，将母头连接到模块。如下面的表格所示，将LED矩阵模块的VCC连接到Arduino的+5V，GND连接到GND，DIN连接到Arduino的引脚8，CS连接到引脚9，CLK连接到引脚10。
- en: '| **LED MATRIX MODULE** | **ARDUINO** |'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **LED矩阵模块** | **Arduino** |'
- en: '| --- | --- |'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| VCC | +5V |'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| VCC | +5V |'
- en: '| GND | GND |'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| GND | GND |'
- en: '| DIN | Pin 8 |'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| DIN | 引脚8 |'
- en: '| CS | Pin 9 |'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| CS | 引脚9 |'
- en: '| CLK | Pin 10 |'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| CLK | 引脚10 |'
- en: Confirm that your setup matches the circuit diagram in [Figure 4-2](ch04.xhtml#ch4fig2),
    and upload the code in “[The Sketch](ch04.xhtml#ch00lev1sec17)” on [page 38](ch04.xhtml#page_38).
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认您的设置与[图 4-2](ch04.xhtml#ch4fig2)中的电路图匹配，并上传“[草图](ch04.xhtml#ch00lev1sec17)”中的代码，位于[第
    38 页](ch04.xhtml#page_38)。
- en: '**FIGURE 4-2:** The circuit diagram for the scrolling LED marquee'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 4-2：** 滚动 LED 广告牌电路图'
- en: '![Image](../images/f4-02.jpg)'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Image](../images/f4-02.jpg)'
- en: '**THE SKETCH**'
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**草图**'
- en: This sketch works by calling on the MaxMatrix library to control the matrix
    module. We then define the characters to display, and set the Arduino pins that
    control the matrix. Your message will be displayed in a continuous loop on the
    LEDs.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图通过调用 MaxMatrix 库来控制矩阵模块。然后我们定义要显示的字符，并设置控制矩阵的 Arduino 引脚。您的消息将在 LED 上以连续循环的方式显示。
- en: '#include <MaxMatrix.h> // Call on the MaxMatrix library'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <MaxMatrix.h> // 调用 MaxMatrix 库'
- en: PROGMEM const unsigned char CH[] = {
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: PROGMEM const unsigned char CH[] = {
- en: 3, 8, B00000000, B00000000, B00000000, B00000000, B00000000, // space
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 3, 8, B00000000, B00000000, B00000000, B00000000, B00000000, // 空格
- en: 1, 8, B01011111, B00000000, B00000000, B00000000, B00000000, // !
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 1, 8, B01011111, B00000000, B00000000, B00000000, B00000000, // !
- en: 3, 8, B00000011, B00000000, B00000011, B00000000, B00000000, // "
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 3, 8, B00000011, B00000000, B00000011, B00000000, B00000000, // "
- en: '5, 8, B00010100, B00111110, B00010100, B00111110, B00010100, // #'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '5, 8, B00010100, B00111110, B00010100, B00111110, B00010100, // #'
- en: 4, 8, B00100100, B01101010, B00101011, B00010010, B00000000, // $
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00100100, B01101010, B00101011, B00010010, B00000000, // $
- en: 5, 8, B01100011, B00010011, B00001000, B01100100, B01100011, // %
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 5, 8, B01100011, B00010011, B00001000, B01100100, B01100011, // %
- en: 5, 8, B00110110, B01001001, B01010110, B00100000, B01010000, // &
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 5, 8, B00110110, B01001001, B01010110, B00100000, B01010000, // &
- en: 1, 8, B00000011, B00000000, B00000000, B00000000, B00000000, // '
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 1, 8, B00000011, B00000000, B00000000, B00000000, B00000000, // '
- en: 3, 8, B00011100, B00100010, B01000001, B00000000, B00000000, // (
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 3, 8, B00011100, B00100010, B01000001, B00000000, B00000000, // (
- en: 3, 8, B01000001, B00100010, B00011100, B00000000, B00000000, // )
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 3, 8, B01000001, B00100010, B00011100, B00000000, B00000000, // )
- en: 5, 8, B00101000, B00011000, B00001110, B00011000, B00101000, // *
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 5, 8, B00101000, B00011000, B00001110, B00011000, B00101000, // *
- en: 5, 8, B00001000, B00001000, B00111110, B00001000, B00001000, // +
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 5, 8, B00001000, B00001000, B00111110, B00001000, B00001000, // +
- en: 2, 8, B10110000, B01110000, B00000000, B00000000, B00000000, // ,
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 2, 8, B10110000, B01110000, B00000000, B00000000, B00000000, // ,
- en: 4, 8, B00001000, B00001000, B00001000, B00001000, B00000000, // -
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00001000, B00001000, B00001000, B00001000, B00000000, // -
- en: 2, 8, B01100000, B01100000, B00000000, B00000000, B00000000, // .
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 2, 8, B01100000, B01100000, B00000000, B00000000, B00000000, // .
- en: 4, 8, B01100000, B00011000, B00000110, B00000001, B00000000, // /
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01100000, B00011000, B00000110, B00000001, B00000000, // /
- en: 4, 8, B00111110, B01000001, B01000001, B00111110, B00000000, // 0
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00111110, B01000001, B01000001, B00111110, B00000000, // 0
- en: 3, 8, B01000010, B01111111, B01000000, B00000000, B00000000, // 1
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 3, 8, B01000010, B01111111, B01000000, B00000000, B00000000, // 1
- en: 4, 8, B01100010, B01010001, B01001001, B01000110, B00000000, // 2
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01100010, B01010001, B01001001, B01000110, B00000000, // 2
- en: 4, 8, B00100010, B01000001, B01001001, B00110110, B00000000, // 3
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00100010, B01000001, B01001001, B00110110, B00000000, // 3
- en: 4, 8, B00011000, B00010100, B00010010, B01111111, B00000000, // 4
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00011000, B00010100, B00010010, B01111111, B00000000, // 4
- en: 4, 8, B00100111, B01000101, B01000101, B00111001, B00000000, // 5
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00100111, B01000101, B01000101, B00111001, B00000000, // 5
- en: 4, 8, B00111110, B01001001, B01001001, B00110000, B00000000, // 6
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00111110, B01001001, B01001001, B00110000, B00000000, // 6
- en: 4, 8, B01100001, B00010001, B00001001, B00000111, B00000000, // 7
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01100001, B00010001, B00001001, B00000111, B00000000, // 7
- en: 4, 8, B00110110, B01001001, B01001001, B00110110, B00000000, // 8
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00110110, B01001001, B01001001, B00110110, B00000000, // 8
- en: 4, 8, B00000110, B01001001, B01001001, B00111110, B00000000, // 9
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00000110, B01001001, B01001001, B00111110, B00000000, // 9
- en: '2, 8, B01010000, B00000000, B00000000, B00000000, B00000000, // :'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '2, 8, B01010000, B00000000, B00000000, B00000000, B00000000, // :'
- en: 2, 8, B10000000, B01010000, B00000000, B00000000, B00000000, // ;
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 2, 8, B10000000, B01010000, B00000000, B00000000, B00000000, // ;
- en: 3, 8, B00010000, B00101000, B01000100, B00000000, B00000000, // <
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 3, 8, B00010000, B00101000, B01000100, B00000000, B00000000, // <
- en: 3, 8, B00010100, B00010100, B00010100, B00000000, B00000000, // =
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 3, 8, B00010100, B00010100, B00010100, B00000000, B00000000, // =
- en: 3, 8, B01000100, B00101000, B00010000, B00000000, B00000000, // >
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 3, 8, B01000100, B00101000, B00010000, B00000000, B00000000, // >
- en: 4, 8, B00000010, B01011001, B00001001, B00000110, B00000000, // ?
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00000010, B01011001, B00001001, B00000110, B00000000, // ?
- en: 5, 8, B00111110, B01001001, B01010101, B01011101, B00001110, // @
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 5, 8, B00111110, B01001001, B01010101, B01011101, B00001110, // @
- en: 4, 8, B01111110, B00010001, B00010001, B01111110, B00000000, // A
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01111110, B00010001, B00010001, B01111110, B00000000, // A
- en: 4, 8, B01111111, B01001001, B01001001, B00110110, B00000000, // B
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01111111, B01001001, B01001001, B00110110, B00000000, // B
- en: 4, 8, B00111110, B01000001, B01000001, B00100010, B00000000, // C
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00111110, B01000001, B01000001, B00100010, B00000000, // C
- en: 4, 8, B01111111, B01000001, B01000001, B00111110, B00000000, // D
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01111111, B01000001, B01000001, B00111110, B00000000, // D
- en: 4, 8, B01111111, B01001001, B01001001, B01000001, B00000000, // E
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01111111, B01001001, B01001001, B01000001, B00000000, // E
- en: 4, 8, B01111111, B00001001, B00001001, B00000001, B00000000, // F
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01111111, B00001001, B00001001, B00000001, B00000000, // F
- en: 4, 8, B00111110, B01000001, B01001001, B01111010, B00000000, // G
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00111110, B01000001, B01001001, B01111010, B00000000, // G
- en: 4, 8, B01111111, B00001000, B00001000, B01111111, B00000000, // H
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01111111, B00001000, B00001000, B01111111, B00000000, // H
- en: 3, 8, B01000001, B01111111, B01000001, B00000000, B00000000, // I
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 3, 8, B01000001, B01111111, B01000001, B00000000, B00000000, // I
- en: 4, 8, B00110000, B01000000, B01000001, B00111111, B00000000, // J
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00110000, B01000000, B01000001, B00111111, B00000000, // J
- en: 4, 8, B01111111, B00001000, B00010100, B01100011, B00000000, // K
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01111111, B00001000, B00010100, B01100011, B00000000, // K
- en: 4, 8, B01111111, B01000000, B01000000, B01000000, B00000000, // L
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01111111, B01000000, B01000000, B01000000, B00000000, // L
- en: 5, 8, B01111111, B00000010, B00001100, B00000010, B01111111, // M
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 5, 8, B01111111, B00000010, B00001100, B00000010, B01111111, // M
- en: 5, 8, B01111111, B00000100, B00001000, B00010000, B01111111, // N
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 5, 8, B01111111, B00000100, B00001000, B00010000, B01111111, // N
- en: 4, 8, B00111110, B01000001, B01000001, B00111110, B00000000, // O
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00111110, B01000001, B01000001, B00111110, B00000000, // O
- en: 4, 8, B01111111, B00001001, B00001001, B00000110, B00000000, // P
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01111111, B00001001, B00001001, B00000110, B00000000, // P
- en: 4, 8, B00111110, B01000001, B01000001, B10111110, B00000000, // Q
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00111110, B01000001, B01000001, B10111110, B00000000, // Q
- en: 4, 8, B01111111, B00001001, B00001001, B01110110, B00000000, // R
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01111111, B00001001, B00001001, B01110110, B00000000, // R
- en: 4, 8, B01000110, B01001001, B01001001, B00110010, B00000000, // S
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01000110, B01001001, B01001001, B00110010, B00000000, // S
- en: 5, 8, B00000001, B00000001, B01111111, B00000001, B00000001, // T
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 5, 8, B00000001, B00000001, B01111111, B00000001, B00000001, // T
- en: 4, 8, B00111111, B01000000, B01000000, B00111111, B00000000, // U
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00111111, B01000000, B01000000, B00111111, B00000000, // U
- en: 5, 8, B00001111, B00110000, B01000000, B00110000, B00001111, // V
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 5, 8, B00001111, B00110000, B01000000, B00110000, B00001111, // V
- en: 5, 8, B00111111, B01000000, B00111000, B01000000, B00111111, // W
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 5, 8, B00111111, B01000000, B00111000, B01000000, B00111111, // W
- en: 5, 8, B01100011, B00010100, B00001000, B00010100, B01100011, // X
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 5, 8, B01100011, B00010100, B00001000, B00010100, B01100011, // X
- en: 5, 8, B00000111, B00001000, B01110000, B00001000, B00000111, // Y
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 5, 8, B00000111, B00001000, B01110000, B00001000, B00000111, // Y
- en: 4, 8, B01100001, B01010001, B01001001, B01000111, B00000000, // Z
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01100001, B01010001, B01001001, B01000111, B00000000, // Z
- en: 2, 8, B01111111, B01000001, B00000000, B00000000, B00000000, // [
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 2, 8, B01111111, B01000001, B00000000, B00000000, B00000000, // [
- en: 4, 8, B00000001, B00000110, B00011000, B01100000, B00000000, // \
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00000001, B00000110, B00011000, B01100000, B00000000, // \
- en: 2, 8, B01000001, B01111111, B00000000, B00000000, B00000000, // ]
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 2, 8, B01000001, B01111111, B00000000, B00000000, B00000000, // ]
- en: 3, 8, B00000010, B00000001, B00000010, B00000000, B00000000, // hat
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 3, 8, B00000010, B00000001, B00000010, B00000000, B00000000, // hat
- en: 4, 8, B01000000, B01000000, B01000000, B01000000, B00000000, // _
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01000000, B01000000, B01000000, B01000000, B00000000, // _
- en: 2, 8, B00000001, B00000010, B00000000, B00000000, B00000000, // `
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 2, 8, B00000001, B00000010, B00000000, B00000000, B00000000, // `
- en: 4, 8, B00100000, B01010100, B01010100, B01111000, B00000000, // a
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00100000, B01010100, B01010100, B01111000, B00000000, // a
- en: 4, 8, B01111111, B01000100, B01000100, B00111000, B00000000, // b
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01111111, B01000100, B01000100, B00111000, B00000000, // b
- en: 4, 8, B00111000, B01000100, B01000100, B00101000, B00000000, // c
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00111000, B01000100, B01000100, B00101000, B00000000, // c
- en: 4, 8, B00111000, B01000100, B01000100, B01111111, B00000000, // d
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00111000, B01000100, B01000100, B01111111, B00000000, // d
- en: 4, 8, B00111000, B01010100, B01010100, B00011000, B00000000, // e
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00111000, B01010100, B01010100, B00011000, B00000000, // e
- en: 3, 8, B00000100, B01111110, B00000101, B00000000, B00000000, // f
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 3, 8, B00000100, B01111110, B00000101, B00000000, B00000000, // f
- en: 4, 8, B10011000, B10100100, B10100100, B01111000, B00000000, // g
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B10011000, B10100100, B10100100, B01111000, B00000000, // g
- en: 4, 8, B01111111, B00000100, B00000100, B01111000, B00000000, // h
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01111111, B00000100, B00000100, B01111000, B00000000, // h
- en: 3, 8, B01000100, B01111101, B01000000, B00000000, B00000000, // i
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 3, 8, B01000100, B01111101, B01000000, B00000000, B00000000, // i
- en: 4, 8, B01000000, B10000000, B10000100, B01111101, B00000000, // j
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01000000, B10000000, B10000100, B01111101, B00000000, // j
- en: 4, 8, B01111111, B00010000, B00101000, B01000100, B00000000, // k
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01111111, B00010000, B00101000, B01000100, B00000000, // k
- en: 3, 8, B01000001, B01111111, B01000000, B00000000, B00000000, // l
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 3, 8, B01000001, B01111111, B01000000, B00000000, B00000000, // l
- en: 5, 8, B01111100, B00000100, B01111100, B00000100, B01111000, // m
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 5, 8, B01111100, B00000100, B01111100, B00000100, B01111000, // m
- en: 4, 8, B01111100, B00000100, B00000100, B01111000, B00000000, // n
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01111100, B00000100, B00000100, B01111000, B00000000, // n
- en: 4, 8, B00111000, B01000100, B01000100, B00111000, B00000000, // o
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00111000, B01000100, B01000100, B00111000, B00000000, // o
- en: 4, 8, B11111100, B00100100, B00100100, B00011000, B00000000, // p
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B11111100, B00100100, B00100100, B00011000, B00000000, // p
- en: 4, 8, B00011000, B00100100, B00100100, B11111100, B00000000, // q
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00011000, B00100100, B00100100, B11111100, B00000000, // q
- en: 4, 8, B01111100, B00001000, B00000100, B00000100, B00000000, // r
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01111100, B00001000, B00000100, B00000100, B00000000, // r
- en: 4, 8, B01001000, B01010100, B01010100, B00100100, B00000000, // s
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B01001000, B01010100, B01010100, B00100100, B00000000, // s
- en: 3, 8, B00000100, B00111111, B01000100, B00000000, B00000000, // t
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 3, 8, B00000100, B00111111, B01000100, B00000000, B00000000, // t
- en: 4, 8, B00111100, B01000000, B01000000, B01111100, B00000000, // u
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00111100, B01000000, B01000000, B01111100, B00000000, // u
- en: 5, 8, B00011100, B00100000, B01000000, B00100000, B00011100, // v
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 5, 8, B00011100, B00100000, B01000000, B00100000, B00011100, // v
- en: 5, 8, B00111100, B01000000, B00111100, B01000000, B00111100, // w
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 5, 8, B00111100, B01000000, B00111100, B01000000, B00111100, // w
- en: 5, 8, B01000100, B00101000, B00010000, B00101000, B01000100, // x
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 5, 8, B01000100, B00101000, B00010000, B00101000, B01000100, // x
- en: 4, 8, B10011100, B10100000, B10100000, B01111100, B00000000, // y
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B10011100, B10100000, B10100000, B01111100, B00000000, // y
- en: 3, 8, B01100100, B01010100, B01001100, B00000000, B00000000, // z
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 3, 8, B01100100, B01010100, B01001100, B00000000, B00000000, // z
- en: 3, 8, B00001000, B00110110, B01000001, B00000000, B00000000, // {
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 3, 8, B00001000, B00110110, B01000001, B00000000, B00000000, // {
- en: 1, 8, B01111111, B00000000, B00000000, B00000000, B00000000, // |
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 1, 8, B01111111, B00000000, B00000000, B00000000, B00000000, // |
- en: 3, 8, B01000001, B00110110, B00001000, B00000000, B00000000, // }
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 3, 8, B01000001, B00110110, B00001000, B00000000, B00000000, // }
- en: 4, 8, B00001000, B00000100, B00001000, B00000100, B00000000, // ~
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 4, 8, B00001000, B00000100, B00001000, B00000100, B00000000, // ~
- en: '};'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: int data = 8;   // Pin connected to DIN pin of MAXIM7219 module
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: int data = 8;   // 连接到MAXIM7219模块的DIN引脚
- en: int load = 9;   // Pin connected to CS pin of MAXIM7219 module
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: int load = 9;   // 连接到MAXIM7219模块的CS引脚
- en: int clock = 10; // Pin connected to CLK pin of MAXIM7219 module
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: int clock = 10; // 连接到MAXIM7219模块的CLK引脚
- en: ➊ int maxInUse = 1; // Set the number of matrices you are using
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ int maxInUse = 1; // 设置你使用的矩阵数量
- en: MaxMatrix m(data, load, clock, maxInUse); // Define the module
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: MaxMatrix m(data, load, clock, maxInUse); // 定义模块
- en: byte buffer[10];
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: byte buffer[10];
- en: // Set message to scroll on the screen
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: // 设置滚动显示的消息
- en: ➋ char string1[] = " Arduino Project Handbook . . . ";
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: ➋ char string1[] = " Arduino Project Handbook . . . ";
- en: void setup() {
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: void setup() {
- en: m.init(); // Start module
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: m.init(); // 启动模块
- en: m.setIntensity(0);
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: m.setIntensity(0);
- en: Serial.begin(9600); // Start serial communication
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: Serial.begin(9600); // 启动串行通信
- en: '}'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: void loop() {
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: void loop() {
- en: byte c;
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: byte c;
- en: while (Serial.available() > 0) {
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: while (Serial.available() > 0) {
- en: byte c = Serial.read();
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: byte c = Serial.read();
- en: Serial.println(c, DEC);
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: Serial.println(c, DEC);
- en: printCharWithShift(c, 100);
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: printCharWithShift(c, 100);
- en: '}'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: delay(100);
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: delay(100);
- en: m.shiftLeft(false, true);
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: m.shiftLeft(false, true);
- en: printStringWithShift(string1, 100);
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: printStringWithShift(string1, 100);
- en: '}'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // The remainder of this sketch moves the scrolling characters
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: // 该草图的其余部分用于移动滚动字符
- en: // depending on the number of matrices that are attached
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: // 根据连接的矩阵数量
- en: void printCharWithShift(char c, int shift_speed) {
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: void printCharWithShift(char c, int shift_speed) {
- en: if (c < 32) return;
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: if (c < 32) return;
- en: c -= 32;
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: c -= 32;
- en: memcpy_P(buffer, CH + 7 * c, 7);
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: memcpy_P(buffer, CH + 7 * c, 7);
- en: m.writeSprite(maxInUse * 8, 0, buffer);
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: m.writeSprite(maxInUse * 8, 0, buffer);
- en: m.setColumn(maxInUse * 8 + buffer[0], 0);
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: m.setColumn(maxInUse * 8 + buffer[0], 0);
- en: for (int i = 0; i < buffer[0] + 1; i++) {
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: for (int i = 0; i < buffer[0] + 1; i++) {
- en: delay(shift_speed);
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: delay(shift_speed);
- en: m.shiftLeft(false, false);
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: m.shiftLeft(false, false);
- en: '}'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: void printStringWithShift(char* s, int shift_speed) {
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: void printStringWithShift(char* s, int shift_speed) {
- en: while (*s != 0) {
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: while (*s != 0) {
- en: printCharWithShift(*s, shift_speed);
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: printCharWithShift(*s, shift_speed);
- en: s++;
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: s++;
- en: '}'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: void printString(char* s) {
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: void printString(char* s) {
- en: int col = 0;
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: int col = 0;
- en: while (*s != 0) {
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: while (*s != 0) {
- en: if (*s < 32) continue;
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: if (*s < 32) continue;
- en: char c = *s - 32;
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: char c = *s - 32;
- en: memcpy_P(buffer, CH + 7 * c, 7);
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: memcpy_P(buffer, CH + 7 * c, 7);
- en: m.writeSprite(col, 0, buffer);
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: m.writeSprite(col, 0, buffer);
- en: m.setColumn(col + buffer[0], 0);
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: m.setColumn(col + buffer[0], 0);
- en: col += buffer[0] + 1;
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: col += buffer[0] + 1;
- en: s++;
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: s++;
- en: '}'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: You can change the message on the LED matrix by altering the text inside the
    quotation marks at ➋. If you want to chain your matrices together, change the
    number at ➊ to the number you have (the maximum number of matrices you can chain
    together is seven).
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过修改➋处引号内的文本来更改LED矩阵上的消息。如果你想将多个矩阵连接在一起，请将➊处的数字更改为你有的矩阵数量（你最多可以连接七个矩阵）。
- en: '**TROUBLESHOOTING**'
  id: totrans-387
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**故障排除**'
- en: '**Q.** *The matrix does not light up or the LED shows erratic symbols.*'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '**问** *矩阵没有亮起，或者LED显示异常符号。*'
- en: • If none of the LEDs light, make sure you have connected the matrix as shown
    in the circuit diagram in [Figure 4-2](ch04.xhtml#ch4fig2); the pins must match
    exactly.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果没有任何LED亮起，请确保你已按照[图 4-2](ch04.xhtml#ch4fig2)中的电路图正确连接矩阵；引脚必须完全匹配。
- en: • Make sure that your Arduino is powered and the TX light is flashing. If not,
    recheck your batteries or power supply.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: • 确保你的Arduino已供电，且TX指示灯在闪烁。如果没有，请重新检查电池或电源。
- en: • Make sure the Maxim 7219 chip is securely inserted in the module.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: • 确保Maxim 7219芯片已牢固插入模块。
- en: '**5'
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**5'
- en: Mood Light**
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 氛围灯**
- en: In this project we’ll create a soothing mood light using a single multicolored
    LED.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将使用一个单色RGB LED制作一个舒缓的氛围灯。
- en: '![Image](../images/p0042-01.jpg)![Image](../images/p0043-01.jpg)'
  id: totrans-395
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/p0042-01.jpg)![Image](../images/p0043-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需组件**'
- en: '**Arduino board**'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '**Arduino板**'
- en: '**Breadboard**'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '**面包板**'
- en: '**Jumper wires**'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '**跳线**'
- en: '**RGB common-cathode LED**'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '**RGB共阴极LED**'
- en: '**3 220-ohm resistors**'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '**3个220欧姆电阻**'
- en: '**HOW IT WORKS**'
  id: totrans-402
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**工作原理**'
- en: 'LEDs come in many different colors and forms, but one of the most useful is
    the RGB LED. As its name implies, an RGB LED is actually three LEDs in one: red,
    green, and blue (see [Figure 5-1](ch05.xhtml#ch5fig1)).'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: LED有许多不同的颜色和形式，但其中最实用的之一就是RGB LED。顾名思义，RGB LED实际上是三个LED合为一体：红色、绿色和蓝色（见[图 5-1](ch05.xhtml#ch5fig1)）。
- en: '**FIGURE 5-1:** The primary colors of the RGB LED'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-1：** RGB LED的三原色'
- en: '![Image](../images/f5-01.jpg)'
  id: totrans-405
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f5-01.jpg)'
- en: RGB is an *additive* color model, which means that by combining the light of
    two or more colors we can create other colors. Red, green, and blue are the additive
    primary colors used as the base for other colors, as shown in [Figure 5-2](ch05.xhtml#ch5fig2).
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: RGB是一种*加色*模型，这意味着通过组合两种或更多颜色的光，我们可以创建其他颜色。红色、绿色和蓝色是加色模型中的原色，它们作为其他颜色的基础，如[图
    5-2](ch05.xhtml#ch5fig2)所示。
- en: '**FIGURE 5-2:** RGB is an additive color model.'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-2：** RGB是加色模型。'
- en: '![Image](../images/f5-02.jpg)'
  id: totrans-408
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f5-02.jpg)'
- en: Let’s look at an RGB LED in a bit more detail in [Figure 5-3](ch05.xhtml#ch5fig3).
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在[图 5-3](ch05.xhtml#ch5fig3)中更详细地查看RGB LED。
- en: '**FIGURE 5-3:** An RGB LED'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-3：** 一个RGB LED'
- en: '![Image](../images/f5-03.jpg)'
  id: totrans-411
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f5-03.jpg)'
- en: 'You’ll see that the RGB LED has four legs instead of the usual two: one each
    for red, green, and blue, and the fourth one is either the cathode or anode. We’ll
    be using a *common-cathode* RGB LED like the one in the figure, where the longest
    leg is the cathode and connects to ground.'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到RGB LED有四个引脚，而不是通常的两个：红色、绿色和蓝色各一个，第四个是阴极或阳极。我们将使用像图中所示的*共阴极*RGB LED，其中最长的引脚是阴极，并连接到地。
- en: We can use our RGB LED to create a random-color output that cycles through the
    colors of the rainbow, fading each one in and out. This lighting effect is used
    quite often in clubs or bars to create a relaxing mood. You could also place the
    LED in an opaque vase or box for a soothing night-light.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用RGB LED创建一个随机颜色的输出，循环显示彩虹的颜色，并逐渐变暗和变亮。这种照明效果在俱乐部或酒吧中经常使用，以营造轻松的氛围。你也可以将LED放入不透明的花瓶或盒子中，作为一个舒缓的夜灯。
- en: '**THE BUILD**'
  id: totrans-414
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**组装**'
- en: Begin by placing the common-cathode RGB LED into your breadboard with the red
    leg in the hole to the left of the long GND (or cathode) leg. Connect a 220-ohm
    resistor to each of the three color legs.
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先将共阴极RGB LED插入面包板，将红色引脚插入长的GND（或阴极）引脚左侧的孔中。然后将220欧姆电阻连接到三个颜色引脚上。
- en: '**NOTE**'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*On some RGB LEDs the green and blue legs are the other way around.*'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*某些RGB LED的绿脚和蓝脚位置正好相反。*'
- en: Connect the red leg to Arduino pin 11, GND to Arduino GND, green to Arduino
    pin 10, and blue to Arduino pin 9.
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将红色引脚连接到Arduino的11号引脚，GND连接到Arduino的GND，绿色连接到Arduino的10号引脚，蓝色连接到Arduino的9号引脚。
- en: '|  **COMMON-CATHODE RGB LED**  | **ARDUINO** |'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '|  **共阴极RGB LED**  | **Arduino** |'
- en: '| --- | --- |'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Red | Pin 11 |'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 红色 | 11号引脚 |'
- en: '| GND | GND |'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| GND | GND |'
- en: '| Green | Pin 10 |'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 绿色 | 10号引脚 |'
- en: '| Blue | Pin 9 |'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 蓝色 | 9号引脚 |'
- en: Confirm that your setup matches the circuit diagram in [Figure 5-4](ch05.xhtml#ch5fig4),
    and upload the code in “[The Sketch](ch05.xhtml#ch00lev1sec21)” on [page 47](ch05.xhtml#page_47).
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认你的设置与[图 5-4](ch05.xhtml#ch5fig4)中的电路图匹配，并上传[第47页](ch05.xhtml#page_47)中的“[草图](ch05.xhtml#ch00lev1sec21)”代码。
- en: '**FIGURE 5-4:** The circuit diagram for the mood light'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 5-4：** 氛围灯的电路图'
- en: '![Image](../images/f5-04.jpg)'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Image](../images/f5-04.jpg)'
- en: '**THE SKETCH**'
  id: totrans-428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**草图**'
- en: The sketch first sets Arduino pins 9, 10, and 11 as outputs. This sketch varies
    the brightness (power) value of each light on the RGB LED in turn by switching
    them on and off incredibly quickly—the longer an LED is lit for, the brighter
    it appears. To do this the Arduino uses a technique called *pulse width modulation
    (PWM)*. The Arduino creates a pulse by switching the power on and off very quickly.
    The duration that the power is on or off (known as the *pulse width*) in the cycle
    determines the average output, and by varying this pulse width the Arduino can
    simulate voltages between full on (5 volts) and off (0 volts). If the signal from
    the Arduino is on for half the time and off for half, the average output will
    be 2.5 volts, halfway between 0 and 5\. If the signal is on for 80 percent and
    off for 20 percent, the voltage is 4 volts, and so on.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图首先将Arduino的9、10和11号引脚设置为输出。该草图通过极快地开关RGB LED上的每个灯的亮度（电力值），使它们依次变化——LED点亮的时间越长，亮度越高。为此，Arduino使用了一种叫做*脉宽调制（PWM）*的技术。Arduino通过快速地开关电源来创建脉冲。电源开关的持续时间（称为*脉冲宽度*）决定了平均输出，通过改变这个脉冲宽度，Arduino可以模拟从完全打开（5伏）到关闭（0伏）之间的电压。如果Arduino的信号开关一半时间为开，另一半时间为关，平均输出将是2.5伏，即0和5之间的一半。如果信号开关时间为80%，关时间为20%，电压为4伏，依此类推。
- en: We define an RGB value between `0` and `255`, with an increment of `5` volts,
    to create a fade effect. In simple terms, each color of the LED brightens from
    0 to 5 volts in sequence, and then fades out when it reaches its maximum value
    of `255`. The Arduino can handle values between `0` and `1023` (1,024 values in
    total), but because this is such a high number we divide it by 4 and use `255`
    as the maximum LED value so the color change is more noticeable.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义一个RGB值在`0`到`255`之间，增量为`5`伏，以创建淡化效果。简单来说，LED的每种颜色从0逐渐亮起到5伏，然后在达到最大值`255`时逐渐变暗。Arduino可以处理`0`到`1023`之间的值（总共1,024个值），但因为这个值太高，我们将其除以4，使用`255`作为最大LED值，以便颜色变化更加明显。
- en: int redPin = 11;   // Pin connected to red leg of the RGB LED
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: int redPin = 11;   // 连接到RGB LED红色脚的引脚
- en: int greenPin = 10; // Pin connected to green leg of the RGB LED
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: int greenPin = 10; // 连接到RGB LED绿色脚的引脚
- en: int bluePin = 9;   // Pin connected to blue leg of the RGB LED
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: int bluePin = 9;   // 连接到RGB LED蓝色脚的引脚
- en: void setup() {
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: void setup() {
- en: setRgb(0, 0, 0); // Set all colors at 0
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: setRgb(0, 0, 0); // 将所有颜色设置为0
- en: '}'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: void loop() {
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: void loop() {
- en: int Rgb[3]; // 3 RGB pins
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: int Rgb[3]; // 3个RGB引脚
- en: Rgb[0] = 0; // A value for each
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: Rgb[0] = 0; // 每个值
- en: Rgb[1] = 0;
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: Rgb[1] = 0;
- en: Rgb[2] = 0;
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: Rgb[2] = 0;
- en: // Colors increase and decrease in value
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: // 颜色的增减变化
- en: for (int decrease = 0; decrease < 3; decrease += 1) {
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: for (int decrease = 0; decrease < 3; decrease += 1) {
- en: 'int increase = decrease == 2 ? 0 : decrease + 1;'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 'int increase = decrease == 2 ? 0 : decrease + 1;'
- en: for (int i = 0; i < 255; i += 1) { // Fade the colors
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: for (int i = 0; i < 255; i += 1) { // 淡化颜色
- en: Rgb[decrease] -= 1;
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: Rgb[decrease] -= 1;
- en: Rgb[increase] += 1;
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: Rgb[increase] += 1;
- en: setRgb(Rgb[0], Rgb[1], Rgb[2]);
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: setRgb(Rgb[0], Rgb[1], Rgb[2]);
- en: delay(20);
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: delay(20);
- en: '}'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: void setRgb (int red, int green, int blue) {
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: void setRgb (int red, int green, int blue) {
- en: analogWrite(redPin, red);
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: analogWrite(redPin, red);
- en: analogWrite(greenPin, green);
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: analogWrite(greenPin, green);
- en: analogWrite(bluePin, blue);
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: analogWrite(bluePin, blue);
- en: '}'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '**TROUBLESHOOTING**'
  id: totrans-458
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**故障排除**'
- en: '**Q.** *The code compiles, but the RGB LED does not light up as expected.*'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '**问答** *代码编译通过，但RGB LED没有按预期点亮。*'
- en: • If the RGB LED does not light at all, make sure you’ve connected the GND wire
    from the Arduino to the correct leg on the RGB LED—the long cathode leg—and that
    the Arduino has power connected.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果RGB LED完全不亮，确保你已经将Arduino的GND线连接到RGB LED的正确脚——长阴极脚——并且Arduino已连接电源。
- en: • If you have a common-anode RGB LED, then you should connect the long leg to
    +5V on the Arduino. Check the data sheet for your part to find out which kind
    of RGB LED you have.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果你有共阳RGB LED，则应将长脚连接到Arduino的+5V。检查你的部件数据手册以了解你使用的是哪种类型的RGB LED。
- en: • If the colors don’t appear as expected, your RGB LED may have a different
    pin configuration; check your data sheet or try swapping the connections to the
    green and blue legs around.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果颜色没有按预期显示，可能是你的RGB LED引脚配置不同；检查数据手册或尝试交换绿色和蓝色脚的连接。
- en: '**6'
  id: totrans-463
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**6'
- en: Rainbow Strip Light**
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 彩虹条形灯**
- en: In this chapter we’ll use an RGB LED strip light to create a decorative ambient
    strip of rainbow colors.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用RGB LED条形灯创建一个装饰性的彩虹色氛围条。
- en: '![Image](../images/p0049-01.jpg)![Image](../images/p0050-01.jpg)'
  id: totrans-466
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/p0049-01.jpg)![Image](../images/p0050-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需零件**'
- en: '**Arduino board**'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '**Arduino板**'
- en: '**Solid-core wires**'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '**实心电线**'
- en: '**RGB LED strip (WS2812B 5V 32-LED strip)**'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '**RGB LED条带（WS2812B 5V 32-LED条带）**'
- en: '**LIBRARY REQUIRED**'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需库**'
- en: '**PololuLedStrip**'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '**PololuLedStrip**'
- en: '**HOW IT WORKS**'
  id: totrans-473
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**工作原理**'
- en: LED strip lights are often used to create ambiance as a decorative feature,
    such as backlighting for a TV or lighting beneath kitchen cabinets. They are low-powered,
    typically between 5 and 12 volts, so they’re easy to install anywhere with their
    own power supply—and they look good too!
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: LED条灯通常用于创建氛围作为装饰性功能，例如电视的背光或厨房柜下的灯光。它们功率较低，通常在5至12伏之间，因此它们很容易安装在任何地方，并且具有自己的电源——而且看起来也很漂亮！
- en: Strip lights generally come in two varieties. Single-color or multicolor *nonaddressable*
    strips can only light all the LEDs in one color at a time. RGB multicolored strips
    are generally *addressable*, which means that each LED has its own chip and can
    be individually controlled, allowing multiple colors on different LEDs to light
    at a time.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 条灯通常有两种类型。单色或多色*非可寻址*条带只能同时点亮所有LED为同一颜色。RGB多色条带通常是*可寻址*的，这意味着每个LED都有自己的芯片，可以单独控制，从而使不同的LED能同时显示多种颜色。
- en: We’ll be using a strip light of addressable RGB LEDs. Unlike the RGB LED from
    Project 5, the LEDs on a strip light are *surface mounted*. This means that the
    components are placed directly onto the surface of a printed circuit board—in
    this case, a flexible strip—rather than being individually inserted into a circuit.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一条可寻址RGB LED条带。与项目5中的RGB LED不同，条灯上的LED是*表面贴装*的。这意味着组件直接放置在印刷电路板的表面——在这种情况下，是一条柔性条带上——而不是单独插入电路。
- en: There are two main kinds of addressable RGB strip lights. Three-pin RGB LED
    strips have GND, Data, and +5V connections to control the LEDs. The Data pin connects
    to the Arduino and uses the same *pulse width modulation (PWM)* function explained
    in Project 5 to create the colors and sequence on the strip. Four-pin RGB LED
    strips have GND, Clock, Data In, and +5V connections and use *Serial Peripheral
    Interface (SPI)* to control their LEDs. SPI is a communication method that allows
    the two-way transfer of data between devices.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 可寻址RGB条灯有两种主要类型。三引脚RGB LED条带具有GND、数据和+5V连接，用于控制LED。数据引脚连接到Arduino，并使用在项目5中解释的相同*脉宽调制（PWM）*功能来创建条带上的颜色和序列。四引脚RGB
    LED条带具有GND、时钟、数据输入和+5V连接，并使用*串行外设接口（SPI）*来控制它们的LED。SPI是一种通信方法，允许设备之间进行双向数据传输。
- en: Our addressable RGB LED strip, shown in [Figure 6-1](ch06.xhtml#ch6fig1), is
    the three-pin type using PWM. It calls on the PololuLedStrip library, created
    by Pololu Robotics and Electronics (*[https://www.pololu.com/](https://www.pololu.com/)*),
    to control the LEDs.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的可寻址RGB LED条带，如[图6-1](ch06.xhtml#ch6fig1)所示，是使用PWM的三引脚类型。它调用了由Pololu Robotics
    and Electronics创建的PololuLedStrip库（*[https://www.pololu.com/](https://www.pololu.com/)*）来控制LED。
- en: '**FIGURE 6-1:** A three-pin addressable RGB LED strip light'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-1：** 三引脚可寻址RGB LED条灯'
- en: '![Image](../images/f6-01.jpg)'
  id: totrans-480
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f6-01.jpg)'
- en: We’ll use our RGB LED strip to create a color output that cycles through the
    colors of the rainbow, fading each color in and out, as shown in [Figure 6-2](ch06.xhtml#ch6fig2).
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用RGB LED条带来创建一个颜色输出，该输出将通过彩虹的颜色进行循环，每种颜色逐渐变亮和变暗，如[图6-2](ch06.xhtml#ch6fig2)所示。
- en: '**FIGURE 6-2:** RGB LED strip cycling through the colors of the rainbow'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-2：** RGB LED条带循环显示彩虹的颜色'
- en: '![Image](../images/f6-02.jpg)'
  id: totrans-483
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f6-02.jpg)'
- en: '**THE BUILD**'
  id: totrans-484
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建过程**'
- en: Download and add the PololuLedStrip library to your Arduino IDE (check the primer
    for guidance on saving libraries).
  id: totrans-485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并将PololuLedStrip库添加到你的Arduino IDE中（请查看入门指南了解如何保存库）。
- en: The setup for this project is very simple and doesn’t take long to complete.
    Most three-pin addressable RGB LED strips come without wires attached to the strip
    connections, so you’ll have to connect them. With the LEDs facing upward, begin
    by soldering solid-core wire to the three connections at the left end of the strip,
    as shown in [Figure 6-3](ch06.xhtml#ch6fig3).
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该项目的设置非常简单，完成起来也很快。大多数三引脚可寻址RGB LED条带没有将导线连接到条带的连接端口，因此你需要自己连接。将LED朝上，首先将实心导线焊接到条带左端的三个连接点，如[图6-3](ch06.xhtml#ch6fig3)所示。
- en: '**FIGURE 6-3:** Soldering wires to the left-side connections'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图6-3：** 焊接左侧连接的导线'
- en: '![Image](../images/f6-03.jpg)'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Image](../images/f6-03.jpg)'
- en: Connect the LED’s GND pin to Arduino GND, DI to Arduino pin 12, and +5V to Arduino
    +5V, as shown in the following table.
  id: totrans-489
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将LED的GND引脚连接到Arduino的GND，DI连接到Arduino的12号引脚，+5V连接到Arduino的+5V，如下表所示。
- en: '| **RGB LED STRIP** | **ARDUINO** |'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **RGB LED条带** | **Arduino** |'
- en: '| --- | --- |'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| GND | GND |'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| GND | GND |'
- en: '| DI (data in) | Pin 12 |'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| DI（数据输入） | 引脚12 |'
- en: '| +5V | +5V |'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| +5V | +5V |'
- en: Check your setup against the circuit diagram in [Figure 6-4](ch06.xhtml#ch6fig4),
    and then upload the code in “[The Sketch](ch06.xhtml#ch00lev1sec25)” below and
    power the Arduino using your battery pack.
  id: totrans-495
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据[图6-4](ch06.xhtml#ch6fig4)中的电路图检查你的设置，然后上传下面的代码“[草图](ch06.xhtml#ch00lev1sec25)”并通过电池包为Arduino供电。
- en: '**FIGURE 6-4:** The circuit diagram for the rainbow strip light'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图6-4：** 彩虹条形灯电路图'
- en: '![Image](../images/f6-04.jpg)'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](../images/f6-04.jpg)'
- en: '**THE SKETCH**'
  id: totrans-498
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**草图**'
- en: The sketch first calls on the PololuLedStrip library, which we use to control
    the individual LEDs. Next, it defines the pin to control the data going from the
    Arduino to the LED strip as 12 and sets the number of LEDs on the strip to 32—you
    would change this if your strip had a different number of LEDs.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图首先调用了PololuLedStrip库，我们用它来控制单个LED。接下来，它定义了用于控制数据从Arduino传输到LED条的引脚为12，并将LED条上的LED数量设置为32——如果你的LED条有不同数量的LED，你需要修改此值。
- en: Next is a calculation to control the hue, saturation, and value (HSV) of our
    LEDs to generate the RGB colors. You can change these using an HSV chart if you
    want; just do a quick internet search to find a chart for reference.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一个计算，用于控制我们LED的色调、饱和度和亮度（HSV），从而生成RGB颜色。如果你愿意，可以使用HSV图表来更改这些值；只需快速搜索互联网即可找到参考图表。
- en: The WS2812B data sheet states that the color of each LED is encoded as three
    LED brightness values, which must be sent in GRB (green-red-blue) order. The first
    color transmitted applies to the LED that is closest to the data input connector,
    the second color transmitted applies to the next LED in the strip, and so on.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: WS2812B数据手册指出，每个LED的颜色是通过三个LED亮度值编码的，这些值必须按GRB（绿色-红色-蓝色）顺序发送。第一个传输的颜色应用于离数据输入连接器最近的LED，第二个传输的颜色应用于条上的下一个LED，依此类推。
- en: /* PololuLedStrip Library Copyright (c) 2012 Pololu Corporation.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: /* PololuLedStrip库版权(c) 2012 Pololu公司。
- en: For more information, see [http://www.pololu.com/](http://www.pololu.com/);
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请访问[http://www.pololu.com/](http://www.pololu.com/);
- en: '[http://forum.pololu.com/](http://forum.pololu.com/)'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://forum.pololu.com/](http://forum.pololu.com/)'
- en: Permission is hereby granted, free of charge, to any person
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 现特此免费授予任何人许可
- en: obtaining a copy of this software and associated documentation files
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 获取此软件及相关文档文件的副本
- en: (the "Software"), to deal in the Software without restriction,
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: （“软件”），可以在不受限制的情况下使用、复制、修改、合并、
- en: including without limitation the rights to use, copy, modify, merge,
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 包括但不限于使用、复制、修改、合并的权利，
- en: publish, distribute, sublicense, and/or sell copies of the Software,
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 发布、分发、再许可和/或销售该软件的副本，
- en: and to permit persons to whom the Software is furnished to do so,
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 并允许软件接收者按此方式使用，
- en: 'subject to the following conditions:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 需遵守以下条件：
- en: The above copyright notice and this permission notice shall be
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 上述版权声明和此许可声明应包含在
- en: included in all copies or substantial portions of the Software.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 包括在所有副本或实质性部分中。
- en: THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 本软件按“原样”提供，不附任何类型的保证，
- en: EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 明示或暗示的保证，包括但不限于
- en: OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 适销性、特定用途适用性及非
- en: INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 侵权。在任何情况下，作者或版权持有者均不应
- en: BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 对任何索赔、损害或其他责任不承担责任，无论是
- en: ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 合同、侵权或其他原因引起的，或与
- en: CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 与软件相关或使用或其他交易活动相关的
- en: SOFTWARE.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 软件。
- en: 'LedStripRainbow: Example Arduino sketch that shows how to make a'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: LedStripRainbow：示例Arduino草图，展示如何制作
- en: moving rainbow pattern on an Addressable RGB LED Strip from Pololu.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 在Pololu的可寻址RGB LED条上展示的移动彩虹效果。
- en: To use this, you will need to plug an Addressable RGB LED strip from
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此功能，你需要将一个可寻址RGB LED条插入
- en: Pololu into pin 12.  After uploading the sketch, you should see a
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 将Pololu插入引脚12。上传草图后，你应该会看到一个
- en: moving rainbow. */
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 移动的彩虹效果。*/
- en: '#include <PololuLedStrip.h>'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <PololuLedStrip.h>'
- en: // Create an ledStrip object and specify the pin it will use.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个ledStrip对象，并指定它将使用的引脚。
- en: PololuLedStrip<12> ledStrip;
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: PololuLedStrip<12> ledStrip;
- en: // Create a buffer for holding the colors (3 bytes per color).
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个缓冲区用于存储颜色（每种颜色3字节）。
- en: '#define LED_COUNT 32'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '#define LED_COUNT 32'
- en: rgb_color colors[LED_COUNT];
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: rgb_color colors[LED_COUNT];
- en: void setup() {
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: void setup() {
- en: '}'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Converts a color from HSV to RGB.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: // 将颜色从HSV转换为RGB。
- en: // h is hue, as a number between 0 and 360.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: // h是色调，范围从0到360。
- en: // s is saturation, as a number between 0 and 255.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: // s是饱和度，范围从0到255。
- en: // v is value, as a number between 0 and 255.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: // v是数值，范围从0到255。
- en: rgb_color hsvToRgb(uint16_t h, uint8_t s, uint8_t v) {
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: rgb_color hsvToRgb(uint16_t h, uint8_t s, uint8_t v) {
- en: uint8_t f = (h % 60) * 255 / 60;
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: uint8_t f = (h % 60) * 255 / 60;
- en: uint8_t p = (255 - s) * (uint16_t)v / 255;
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: uint8_t p = (255 - s) * (uint16_t)v / 255;
- en: uint8_t q = (255 - f * (uint16_t)s / 255) * (uint16_t)v / 255;
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: uint8_t q = (255 - f * (uint16_t)s / 255) * (uint16_t)v / 255;
- en: uint8_t t = (255 - (255 - f) * (uint16_t)s / 255) * (uint16_t)v / 255;
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: uint8_t t = (255 - (255 - f) * (uint16_t)s / 255) * (uint16_t)v / 255;
- en: uint8_t r = 0, g = 0, b = 0;
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: uint8_t r = 0, g = 0, b = 0;
- en: switch((h / 60) % 6) {
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: switch((h / 60) % 6) {
- en: 'case 0: r = v; g = t; b = p; break;'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 'case 0: r = v; g = t; b = p; break;'
- en: 'case 1: r = q; g = v; b = p; break;'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 'case 1: r = q; g = v; b = p; break;'
- en: 'case 2: r = p; g = v; b = t; break;'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 'case 2: r = p; g = v; b = t; break;'
- en: 'case 3: r = p; g = q; b = v; break;'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 'case 3: r = p; g = q; b = v; break;'
- en: 'case 4: r = t; g = p; b = v; break;'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 'case 4: r = t; g = p; b = v; break;'
- en: 'case 5: r = v; g = p; b = q; break;'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 'case 5: r = v; g = p; b = q; break;'
- en: '}'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: return (rgb_color) {
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: return (rgb_color) {
- en: r, g, b
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: r, g, b
- en: '};'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '}'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: void loop() {
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: void loop() {
- en: // Update the colors.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: // 更新颜色。
- en: uint16_t time = millis() >> 2;
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: uint16_t time = millis() >> 2;
- en: for (uint16_t i = 0; i < LED_COUNT; i++) {
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: for (uint16_t i = 0; i < LED_COUNT; i++) {
- en: byte x = (time >> 2) - (i << 3);
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: byte x = (time >> 2) - (i << 3);
- en: colors[i] = hsvToRgb((uint32_t)x * 359 / 256, 255, 255);
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: colors[i] = hsvToRgb((uint32_t)x * 359 / 256, 255, 255);
- en: '}'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Write the colors to the LED strip.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: // 将颜色写入LED条带。
- en: ledStrip.write(colors, LED_COUNT);
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: ledStrip.write(colors, LED_COUNT);
- en: delay(10);
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: delay(10);
- en: '}'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '**TROUBLESHOOTING**'
  id: totrans-568
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**故障排除**'
- en: '**Q.** *The code compiles, but the RGB LED does not light up as expected.*'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** *代码可以编译，但RGB LED没有按预期点亮。*'
- en: • If the RGB LED strip does not light, make sure that your wires are connected
    as shown in [Figure 6-4](ch06.xhtml#ch6fig4), and that your LED strip is the WS2812B
    type specified.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果RGB LED条带没有点亮，请确保您的电线连接如[图 6-4](ch06.xhtml#ch6fig4)所示，并且您的LED条带是指定的WS2812B类型。
- en: • If you aren’t doing so already, use an external power source for the RGB LED
    strip.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果您还没有这样做，请为RGB LED条带使用外部电源。
- en: '**7'
  id: totrans-572
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**7**'
- en: NeoPixel Compass**
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: NeoPixel指南针**
- en: In this chapter we’ll use a three-axis sensor and an RGB LED ring to create
    a compass that indicates north by lighting the LEDs in that direction.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用三轴传感器和RGB LED环创建一个指南针，通过点亮指示北方的LED来显示方向。
- en: '![Image](../images/p0056-01.jpg)![Image](../images/p0057-01.jpg)'
  id: totrans-575
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/p0056-01.jpg)![Image](../images/p0057-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需零件**'
- en: '**Arduino board**'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: '**Arduino板**'
- en: '**Jumper wires**'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '**跳线**'
- en: '**HMC5883L three-axis sensor**'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: '**HMC5883L三轴传感器**'
- en: '**Adafruit NeoPixel ring with 16 RGB LEDs**'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '**Adafruit NeoPixel环，包含16个RGB LED**'
- en: '**9V battery pack with 6 AA batteries**'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: '**9V电池组，包含6节AA电池**'
- en: '**LIBRARIES REQUIRED**'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需库**'
- en: '**Wire**'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '**电线**'
- en: '**FastLED**'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '**FastLED**'
- en: '**HMC5883L**'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: '**HMC5883L**'
- en: '**HOW IT WORKS**'
  id: totrans-586
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**工作原理**'
- en: The HMC5883L three-axis sensor ([Figure 7-1](ch07.xhtml#ch7fig1)) is a multichip
    module that senses magnetic force. The module measures both the direction and
    the magnitude of Earth’s magnetic fields. We will use the HMC5883L library to
    turn our project into an electronic compass.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: HMC5883L三轴传感器（见[图 7-1](ch07.xhtml#ch7fig1)）是一个多芯片模块，用于感应磁力。该模块能够测量地球磁场的方向和强度。我们将使用HMC5883L库来将我们的项目转化为电子指南针。
- en: '**FIGURE 7-1:** The HMC5883L three-axis module runs on 3.3V rather than 5V.'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-1:** HMC5883L三轴模块运行在3.3V而不是5V。'
- en: '![Image](../images/f7-01.jpg)'
  id: totrans-589
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f7-01.jpg)'
- en: Earth’s magnetic field is believed to be generated by electric currents in the
    conductive material of its core that are created by heat escaping. Since Earth
    is effectively a magnet, the north end of a compass magnet is drawn to align with
    its magnetic field.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 地球的磁场被认为是由其核心中导电材料内的电流产生的，这些电流是由于热量逸散而形成的。由于地球本身就是一个磁体，指南针的北端会被磁场吸引并与其对齐。
- en: To visualize our compass direction we will use the Adafruit NeoPixel ring, shown
    in [Figure 7-2](ch07.xhtml#ch7fig2). The NeoPixel ring is made up of 16 RGB LEDs,
    each of which has its own driver chip and so can be controlled individually. A
    single data line controls the LEDs, and we’ll use the FastLED library to control
    the colors.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 为了可视化我们的指南针方向，我们将使用Adafruit NeoPixel环（见[图 7-2](ch07.xhtml#ch7fig2)）。NeoPixel环由16个RGB
    LED组成，每个LED都有自己的驱动芯片，因此可以单独控制。通过单一数据线控制这些LED，我们将使用FastLED库来控制颜色。
- en: '**FIGURE 7-2:** The Adafruit 16 RGB NeoPixel ring'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-2:** Adafruit 16 RGB NeoPixel 环'
- en: '![Image](../images/f7-02.jpg)'
  id: totrans-593
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f7-02.jpg)'
- en: When the project is powered up, the HMC5883L module will detect magnetic north
    and display it on the NeoPixel ring by lighting the LEDs in that direction. If
    you turn around while holding the powered NeoPixel compass, the LED lights will
    move to always point north.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 当项目通电时，HMC5883L 模块会检测磁北，并通过点亮 NeoPixel 环形灯带的 LED 来显示它。如果你在拿着已通电的 NeoPixel 指南针时转动方向，LED
    灯光会移动，始终指向北方。
- en: '**THE BUILD**'
  id: totrans-595
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建过程**'
- en: '**NOTE**'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The pin labeled DRDY on the compass module is not used in this project.*'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: '*指南针模块上标有 DRDY 的引脚在此项目中未使用。*'
- en: Your HMC5883L module may arrive with the header pins loose, so the first step
    is to solder the header pins into the module. You will need the strip of five
    header pins that should come with the module. Insert the header pins into the
    five available holes on the module and solder each pin for a couple of seconds
    (check the “[Quick Soldering Guide](pref02.xhtml#ch00lev1sec123)” on [page 12](pref02.xhtml#page_12)
    if you need help). The module communicates with the Arduino using I2C and the
    Wire library.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 HMC5883L 模块可能到达时引脚松动，因此第一步是将引脚焊接到模块上。您需要一条包含五个引脚的引脚条，这应该随模块一起提供。将引脚插入模块上的五个可用孔中，并将每个引脚焊接几秒钟（如果需要帮助，请查看
    [快速焊接指南](pref02.xhtml#ch00lev1sec123) 在 [第 12 页](pref02.xhtml#page_12)）。该模块通过
    I2C 和 Wire 库与 Arduino 进行通信。
- en: In order to use the compass properly you need to calibrate the HMC5883L module.
    Connect the module to the Arduino as shown in the following table.
  id: totrans-599
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了正确使用指南针，您需要对 HMC5883L 模块进行校准。将模块连接到 Arduino，如下表所示。
- en: '| **HMC5883L MODULE** | **ARDUINO** |'
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **HMC5883L 模块** | **ARDUINO** |'
- en: '| --- | --- |'
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| VCC | +3.3V |'
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| VCC | +3.3V |'
- en: '| GND | GND |'
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| GND | GND |'
- en: '| SCL | Pin A5 (SLC) |'
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| SCL | 引脚 A5 (SCL) |'
- en: '| SDA | Pin A4 (SDA) |'
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| SDA | 引脚 A4 (SDA) |'
- en: 'Download the HMC5883L library and add it to the Arduino library folder on your
    PC. Check the library section in the primer if you need a reminder of how to do
    this. Once you have the library saved, restart your Arduino IDE. When it opens
    again, it should have the library saved in *Examples*. Select **File** ▸ **Examples**
    ▸ **Arduino-HMC5883L-Master** ▸ **HMC5883L_calibrate**. If you can’t see the sketch,
    make sure you’ve saved the library in your Arduino library folder. The following
    sketch will be shown in the IDE main window:'
  id: totrans-606
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 HMC5883L 库并将其添加到您电脑上的 Arduino 库文件夹中。如果需要提醒如何操作，请查看入门指南中的库部分。保存库后，重新启动 Arduino
    IDE。重新打开时，库应保存在 *Examples* 中。选择 **文件** ▸ **示例** ▸ **Arduino-HMC5883L-Master**
    ▸ **HMC5883L_calibrate**。如果看不到草图，请确保您已经将库保存在 Arduino 库文件夹中。以下草图将在 IDE 主窗口中显示：
- en: /*
  id: totrans-607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /*
- en: Calibrate HMC5883L. Output for HMC5883L_calibrate_processing.pde
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 校准 HMC5883L。HMC5883L_calibrate_processing.pde 的输出
- en: 'Read more: [http://www.jarzebski.pl/arduino/czujniki-i-sensory/3-osiowy-magnetometr-hmc5883l.html](http://www.jarzebski.pl/arduino/czujniki-i-sensory/3-osiowy-magnetometr-hmc5883l.html)'
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '阅读更多: [http://www.jarzebski.pl/arduino/czujniki-i-sensory/3-osiowy-magnetometr-hmc5883l.html](http://www.jarzebski.pl/arduino/czujniki-i-sensory/3-osiowy-magnetometr-hmc5883l.html)'
- en: 'GIT: [https://github.com/jarzebski/Arduino-HMC5883L](https://github.com/jarzebski/Arduino-HMC5883L)'
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'GIT: [https://github.com/jarzebski/Arduino-HMC5883L](https://github.com/jarzebski/Arduino-HMC5883L)'
- en: 'Web: [http://www.jarzebski.pl](http://www.jarzebski.pl)'
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '网站: [http://www.jarzebski.pl](http://www.jarzebski.pl)'
- en: (c) 2014 by Korneliusz Jarzebski
  id: totrans-612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (c) 2014 by Korneliusz Jarzebski
- en: '*/'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*/'
- en: '#include <Wire.h>'
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#include <Wire.h>'
- en: '#include <HMC5883L.h>'
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#include <HMC5883L.h>'
- en: HMC5883L compass;
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: HMC5883L compass;
- en: int minX = 0;
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: int minX = 0;
- en: int maxX = 0;
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: int maxX = 0;
- en: int minY = 0;
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: int minY = 0;
- en: int maxY = 0;
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: int maxY = 0;
- en: int offX = 0;
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: int offX = 0;
- en: int offY = 0;
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: int offY = 0;
- en: void setup() {
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: void setup() {
- en: Serial.begin(9600);
  id: totrans-624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Serial.begin(9600);
- en: // Initialize Initialize HMC5883L
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: // 初始化 HMC5883L
- en: while (!compass.begin()) {
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: while (!compass.begin()) {
- en: delay(500);
  id: totrans-627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: delay(500);
- en: '}'
  id: totrans-628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: // Set measurement range
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: // 设置测量范围
- en: compass.setRange(HMC5883L_RANGE_1_3GA);
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: compass.setRange(HMC5883L_RANGE_1_3GA);
- en: // Set measurement mode
  id: totrans-631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: // 设置测量模式
- en: compass.setMeasurementMode(HMC5883L_CONTINOUS);
  id: totrans-632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: compass.setMeasurementMode(HMC5883L_CONTINOUS);
- en: // Set data rate
  id: totrans-633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: // 设置数据速率
- en: compass.setDataRate(HMC5883L_DATARATE_30HZ);
  id: totrans-634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: compass.setDataRate(HMC5883L_DATARATE_30HZ);
- en: // Set number of samples averaged
  id: totrans-635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: // 设置平均样本数量
- en: compass.setSamples(HMC5883L_SAMPLES_8);
  id: totrans-636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: compass.setSamples(HMC5883L_SAMPLES_8);
- en: '}'
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: void loop() {
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: void loop() {
- en: Vector mag = compass.readRaw();
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Vector mag = compass.readRaw();
- en: // Determine Min / Max values
  id: totrans-640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: // 确定最小值 / 最大值
- en: if (mag.XAxis < minX) minX = mag.XAxis;
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (mag.XAxis < minX) minX = mag.XAxis;
- en: if (mag.XAxis > maxX) maxX = mag.XAxis;
  id: totrans-642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (mag.XAxis > maxX) maxX = mag.XAxis;
- en: if (mag.YAxis < minY) minY = mag.YAxis;
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (mag.YAxis < minY) minY = mag.YAxis;
- en: if (mag.YAxis > maxY) maxY = mag.YAxis;
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (mag.YAxis > maxY) maxY = mag.YAxis;
- en: // Calculate offsets
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: // 计算偏移量
- en: offX = (maxX + minX)/2;
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: offX = (maxX + minX)/2;
- en: offY = (maxY + minY)/2;
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: offY = (maxY + minY)/2;
- en: /*Serial.print(mag.XAxis);
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /*Serial.print(mag.XAxis);
- en: Serial.print(":");
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Serial.print(":");
- en: Serial.print(mag.YAxis);
  id: totrans-650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Serial.print(mag.YAxis);
- en: Serial.print(":");
  id: totrans-651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Serial.print(":");
- en: Serial.print(minX);
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Serial.print(minX);
- en: Serial.print(":");
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Serial.print(":");
- en: Serial.print(maxX);
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Serial.print(maxX);
- en: Serial.print(":");
  id: totrans-655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Serial.print(":");
- en: Serial.print(minY);
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Serial.print(minY);
- en: Serial.print(":");
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Serial.print(":");
- en: Serial.print(maxY);
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Serial.print(maxY);
- en: Serial.print(":"); */
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Serial.print(":"); */
- en: Serial.print(offX);
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Serial.print(offX);
- en: Serial.print(":");
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Serial.print(":");
- en: Serial.print(offY);
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Serial.print(offY);
- en: Serial.print("\n");
  id: totrans-663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Serial.print("\n");
- en: '}'
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: We only need the X and Y `Serial.print` lines in this last bunch of `Serial.print`
    commands, so comment out the `Serial.print` lines of the sketch shown in bold.
    Upload the sketch to the Arduino and open the Serial Monitor. A series of numbers
    will display, as shown in [Figure 7-3](ch07.xhtml#ch7fig3).
  id: totrans-665
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们只需要最后一组 `Serial.print` 命令中的 X 和 Y 输出，因此请注释掉草图中加粗部分的 `Serial.print` 行。将草图上传到
    Arduino，并打开串口监视器。一系列数字将显示出来，如[图 7-3](ch07.xhtml#ch7fig3)所示。
- en: '**FIGURE 7-3:** The calibration numbers will be shown in the IDE Serial Monitor
    window.'
  id: totrans-666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 7-3：** 校准数字将在 IDE 串口监视器窗口中显示。'
- en: '![Image](../images/f7-03.jpg)'
  id: totrans-667
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Image](../images/f7-03.jpg)'
- en: Rotate the sensor 360 degrees while it’s connected to the Arduino IDE Serial
    Monitor, and you should see two digits displayed; in [Figure 7-3](ch07.xhtml#ch7fig3),
    they’re 13 and –294\. You’ll need these calibration numbers in the sketch later,
    so make a note of them.
  id: totrans-668
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在传感器连接到 Arduino IDE 串口监视器的同时，旋转传感器 360 度，你应该能看到显示两个数字；在[图 7-3](ch07.xhtml#ch7fig3)中，它们是
    13 和 –294。你稍后将在草图中需要这些校准数字，所以请记下它们。
- en: You can improve the accuracy of your compass by finding the *magnetic declination*
    for your location. The magnetic declination, or variation, is the angle on the
    horizontal plane between magnetic north (where a compass points) and true north
    (the direction toward the geographic North Pole). You can find your magnetic declination
    by visiting *[http://www.magnetic-declination.com/](http://www.magnetic-declination.com/)*
    and entering your location in the search bar at the top left. Your result will
    appear as shown in [Figure 7-4](ch07.xhtml#ch7fig4).
  id: totrans-669
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过查找你所在位置的 *磁偏角* 来提高罗盘的精度。磁偏角或变化是水平面上磁北（罗盘指向的方向）与真北（指向地理北极的方向）之间的角度。你可以通过访问
    *[http://www.magnetic-declination.com/](http://www.magnetic-declination.com/)*
    并在左上角的搜索框中输入你的位置信息来找到你的磁偏角。你的结果将如[图 7-4](ch07.xhtml#ch7fig4)所示。
- en: '**FIGURE 7-4:** The magnetic declination for your location can be found at
    *[http://www.magnetic-declination.com/](http://www.magnetic-declination.com/)*.'
  id: totrans-670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 7-4：** 你所在位置的磁偏角可以在 *[http://www.magnetic-declination.com/](http://www.magnetic-declination.com/)*
    网站找到。'
- en: '![Image](../images/f7-04.jpg)'
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Image](../images/f7-04.jpg)'
- en: 'The values you need are the magnetic declination and the declination; in [Figure
    7-4](ch07.xhtml#ch7fig4), they’re –2° 26'' and NEGATIVE (WEST), respectively,
    but yours will be different. Record these values too, as we’ll use them in the
    sketch at the end of the project—with one minor change. For example, my values
    were –2 and 26\. We don’t put the negative (minus) sign before the first value
    but instead put it after, like so:'
  id: totrans-672
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要的值是磁偏角和磁偏差；在[图 7-4](ch07.xhtml#ch7fig4)中，它们分别是 –2° 26' 和负值（西），但你的值会不同。也要记录这些值，因为我们将在项目的最后使用它们—仅有一个小的变化。例如，我的值是
    –2 和 26。我们不会把负号（减号）放在第一个值前面，而是放在后面，像这样：
- en: float declinationAngle = (2 - (26.0 / 60.0)) / (180 / M_PI);
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: float declinationAngle = (2 - (26.0 / 60.0)) / (180 / M_PI);
- en: 'If your location’s declination were POSITIVE (WEST), then you would add the
    positive (plus) sign instead:'
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你所在位置的磁偏角为正值（西），则应该添加正号（加号）：
- en: float declinationAngle = (2 + (26.0 / 60.0)) / (180 / M_PI);
  id: totrans-675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: float declinationAngle = (2 + (26.0 / 60.0)) / (180 / M_PI);
- en: Next, add the NeoPixel ring to the Arduino by connecting V on the NeoPixel to
    +5V on the Arduino, GND to GND, and In on the NeoPixel to pin 3 on the Arduino.
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，通过将 NeoPixel 的 V 引脚连接到 Arduino 的 +5V，引脚 GND 连接到 GND，引脚 In 连接到 Arduino 的
    3 号引脚，将 NeoPixel 环连接到 Arduino。
- en: '| **NEOPIXEL** | **ARDUINO** |'
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **NEOPIXEL** | **ARDUINO** |'
- en: '| --- | --- |'
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| V | +5V |'
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 电压 | +5V |'
- en: '| GND | GND |'
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| GND | GND |'
- en: '| In | Pin 3 |'
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 输入 | 引脚 3 |'
- en: Check your setup against the circuit diagram in [Figure 7-5](ch07.xhtml#ch7fig5),
    and then upload the code in “[The Sketch](ch07.xhtml#ch00lev1sec29)” below.
  id: totrans-682
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据[图 7-5](ch07.xhtml#ch7fig5)中的电路图检查你的设置，然后上传下面的 “[草图](ch07.xhtml#ch00lev1sec29)”
    代码。
- en: '**FIGURE 7-5:** The circuit diagram for the NeoPixel compass'
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 7-5：** NeoPixel 罗盘的电路图'
- en: '![Image](../images/f7-05.jpg)'
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Image](../images/f7-05.jpg)'
- en: '**THE SKETCH**'
  id: totrans-685
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**草图**'
- en: First we call on the Wire, FastLED, and HMC5883L libraries. The Wire library
    is installed with the Arduino IDE, but you need to add the others. Download them
    in the book’s resources at *[http://www.nostarch.com/arduinohandbook2/](http://www.nostarch.com/arduinohandbook2/)*,
    and follow the guide in the primer for more information on adding libraries.
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们调用Wire、FastLED和HMC5883L库。Wire库已与Arduino IDE一起安装，但您需要添加其他库。请在本书的资源中下载它们，链接为
    *[http://www.nostarch.com/arduinohandbook2/](http://www.nostarch.com/arduinohandbook2/)*，并根据入门指南获取更多添加库的信息。
- en: Next we declare the number of LEDs on the NeoPixel ring (16) and assign pin
    3 on the Arduino to control it. We then call on a number of settings in the HMC5883L
    library to control the compass module. At ➊ we add the compass offset values for
    `X` and `Y`, which should match your calibration from Step 4 earlier; mine were
    13, –294, respectively. At ➋ we add the magnetic declination from Step 6\. Again,
    remember to change it to the one for your location.
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们声明NeoPixel环上的LED数量（16个），并将引脚3分配给Arduino来控制它。然后我们调用HMC5883L库中的多个设置来控制罗盘模块。在
    ➊ 处，我们添加了`X`和`Y`的罗盘偏移值，这些值应与步骤4中的校准匹配；我的分别是13，–294。在 ➋ 处，我们添加了步骤6中的磁偏角。同样，记得将其更改为您所在位置的磁偏角。
- en: 'The next set of calculations allows the sensor to map to a 360-degree rotation.
    Then we set the LEDs on the NeoPixel to move depending on the readings of the
    sensor to point north. Three LEDs are lit: one red LED that points north and a
    green LED on either side of it. The compass is best used outdoors with the module,
    away from any strong electrical or magnetic sources, and should be powered from
    a battery pack rather than a USB connection.'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的一组计算使得传感器能够映射到360度旋转。然后我们设置NeoPixel上的LED，根据传感器的读数移动指向北方。点亮了三个LED：一个指向北方的红色LED，以及其两侧的绿色LED。罗盘最好在户外使用，模块远离任何强电磁源，且应该通过电池包供电，而非USB连接。
- en: // Code by brainy-bits.com and used with kind permission
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: // 代码由brainy-bits.com提供并经过许可使用
- en: // [https://brainy-bits.com/tutorials/find-your-way-using-the-hmc5883l/](https://brainy-bits.com/tutorials/find-your-way-using-the-hmc5883l/)
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: // [https://brainy-bits.com/tutorials/find-your-way-using-the-hmc5883l/](https://brainy-bits.com/tutorials/find-your-way-using-the-hmc5883l/)
- en: '#include <Wire.h>'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <Wire.h>'
- en: '#include "FastLED.h"'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '#include "FastLED.h"'
- en: '#include <HMC5883L.h>'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <HMC5883L.h>'
- en: '#define NUM_LEDS 16  // Number of LEDs on Ring'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: '#define NUM_LEDS 16  // 环形灯带上的LED数量'
- en: '#define DATA_PIN_RING 3 // Pin 3 connected to RGB Ring'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: '#define DATA_PIN_RING 3 // 引脚3连接到RGB环形灯带'
- en: CRGB leds_RING[NUM_LEDS];
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: CRGB leds_RING[NUM_LEDS];
- en: HMC5883L compass;
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: HMC5883L 罗盘;
- en: int fixedHeadingDegrees; // Used to store Heading value
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: int fixedHeadingDegrees; // 用于存储航向值
- en: void setup() {
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: void setup() {
- en: Serial.begin(9600);
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: Serial.begin(9600);
- en: Wire.begin(); //Setup I2C
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: Wire.begin(); // 设置I2C
- en: // Set up the FastLED library with the neopixel ring data
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: // 设置FastLED库与NeoPixel环的数据
- en: FastLED.addLeds<NEOPIXEL,DATA_PIN_RING>(leds_RING, NUM_LEDS);
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: FastLED.addLeds<NEOPIXEL,DATA_PIN_RING>(leds_RING, NUM_LEDS);
- en: // Set measurement range
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: // 设置测量范围
- en: compass.setRange(HMC5883L_RANGE_1_3GA);
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: compass.setRange(HMC5883L_RANGE_1_3GA);
- en: // Set measurement mode
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: // 设置测量模式
- en: compass.setMeasurementMode(HMC5883L_CONTINOUS);
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: compass.setMeasurementMode(HMC5883L_CONTINOUS);
- en: // Set data rate
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: // 设置数据速率
- en: compass.setDataRate(HMC5883L_DATARATE_30HZ);
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: compass.setDataRate(HMC5883L_DATARATE_30HZ);
- en: // Set number of samples averaged
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: // 设置平均样本数
- en: compass.setSamples(HMC5883L_SAMPLES_8);
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: compass.setSamples(HMC5883L_SAMPLES_8);
- en: // Set calibration offset. See HMC5883L_calibration.ino
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: // 设置校准偏移值。请参见HMC5883L_calibration.ino
- en: ➊ compass.setOffset(13, -224);
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ compass.setOffset(13, -224);
- en: '}'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: void loop() {
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: void loop() {
- en: Vector norm = compass.readNormalize();
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: Vector norm = compass.readNormalize();
- en: // Calculate heading
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: // 计算航向
- en: float heading = atan2(norm.YAxis, norm.XAxis);
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: float heading = atan2(norm.YAxis, norm.XAxis);
- en: // Set declination angle on your location and fix heading
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: // 设置您所在位置的磁偏角并修正航向
- en: // Find your declination on http://magnetic-declination.com/
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: // 查找您的磁偏角： http://magnetic-declination.com/
- en: // (+) Positive or (-) for negative
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: // (+) 正值或 (-) 负值
- en: // For Dumfries, Scotland declination angle is -2 '26W (negative)
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: // 对于苏格兰邓弗里斯的磁偏角为 -2 '26W（负值）
- en: '// Formula: (deg + (min / 60.0)) / (180 / M_PI);'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: // 公式：(度 + (分 / 60.0)) / (180 / M_PI);
- en: float declinationAngle = (2.0 – (26.0 / 60.0)) / (180 / M_PI);
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: float declinationAngle = (2.0 – (26.0 / 60.0)) / (180 / M_PI);
- en: ➋  heading -= declinationAngle;
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: ➋  heading -= declinationAngle;
- en: // Correct for heading < 0deg and heading > 360deg
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: // 修正航向 < 0° 和航向 > 360°
- en: if (heading < 0) {
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: if (heading < 0) {
- en: heading += 2 * PI;
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: heading += 2 * PI;
- en: '}'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: if (heading > 2 * PI) {
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: if (heading > 2 * PI) {
- en: heading -= 2 * PI;
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: heading -= 2 * PI;
- en: '}'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Convert to degrees
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: // 转换为度数
- en: float headingDegrees = heading * 180 / M_PI;
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: float headingDegrees = heading * 180 / M_PI;
- en: // To fix rotation speed of HMC5883L compass module
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: // 修正HMC5883L罗盘模块的旋转速度
- en: if (headingDegrees >= 1 && headingDegrees < 240) {
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 (headingDegrees >= 1 && headingDegrees < 240) {
- en: fixedHeadingDegrees = map(headingDegrees * 100, 0, 239 * 100, 0, 179 * 100)
    / 100.00;
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: fixedHeadingDegrees = map(headingDegrees * 100, 0, 239 * 100, 0, 179 * 100)
    / 100.00;
- en: '}'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else {
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: else {
- en: if (headingDegrees >= 240) {
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 (headingDegrees >= 240) {
- en: fixedHeadingDegrees = map(headingDegrees*100, 240*100, 360*100, 180*100, 360*100)
    / 100.00;
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: fixedHeadingDegrees = map(headingDegrees*100, 240*100, 360*100, 180*100, 360*100)
    / 100.00;
- en: '}'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: int headvalue = fixedHeadingDegrees / 18;
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: int headvalue = fixedHeadingDegrees / 18;
- en: int ledtoheading = map(headvalue, 0, 15, 15, 0);
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: int ledtoheading = map(headvalue, 0, 15, 15, 0);
- en: // Clear the ring
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: // 清除环
- en: FastLED.clear();
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: FastLED.clear();
- en: // New heading
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: // 新的方向
- en: if (ledtoheading == 0) {
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 (ledtoheading == 0) {
- en: leds_RING[15] = CRGB::Red;
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: leds_RING[15] = CRGB::Red;
- en: leds_RING[0] = CRGB::Green;
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: leds_RING[0] = CRGB::Green;
- en: leds_RING[14] = CRGB::Green;
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: leds_RING[14] = CRGB::Green;
- en: '}'
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else {
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: else {
- en: if (ledtoheading == 15) {
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 (ledtoheading == 15) {
- en: leds_RING[0] = CRGB::Red;
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: leds_RING[0] = CRGB::Red;
- en: leds_RING[15] = CRGB::Green;
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: leds_RING[15] = CRGB::Green;
- en: leds_RING[1] = CRGB::Green;
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: leds_RING[1] = CRGB::Green;
- en: '}'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else {
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: else {
- en: leds_RING[ledtoheading] = CRGB::Red;
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: leds_RING[ledtoheading] = CRGB::Red;
- en: leds_RING[ledtoheading+1] = CRGB::Green;
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: leds_RING[ledtoheading+1] = CRGB::Green;
- en: leds_RING[ledtoheading-1] = CRGB::Green;
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: leds_RING[ledtoheading-1] = CRGB::Green;
- en: '}'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: FastLED.setBrightness(50);
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: FastLED.setBrightness(50);
- en: FastLED.show();
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: FastLED.show();
- en: delay(100);
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: delay(100);
- en: '}'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '**TROUBLESHOOTING**'
  id: totrans-770
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**故障排除**'
- en: '**Q.** *The code compiles, but the RGB LEDs do not light up as expected.*'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** *代码编译成功，但 RGB LED 灯没有按预期亮起。*'
- en: • If no LEDs are lit, double-check your wiring, particularly that the data pin
    of the NeoPixel is connected to pin 3 on the Arduino.
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果没有 LED 灯亮起，请仔细检查接线，特别是确认 NeoPixel 的数据引脚是否连接到 Arduino 的 3 号引脚。
- en: • Check that your power for the NeoPixel is connected to GND and +5V. The compass
    module should be connected to GND and +3.3V. The Arduino should be powered by
    your battery pack, not the USB cable from your PC.
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: • 检查你的 NeoPixel 的电源是否连接到 GND 和 +5V。指南针模块应该连接到 GND 和 +3.3V。Arduino 应该由你的电池组供电，而不是通过
    PC 的 USB 电缆供电。
- en: • Make sure you have calibrated the module and entered the values using the
    steps shown earlier. The compass module should be held horizontally and in line
    with the RGB ring. The ring and the module should always be moved together.
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: • 确保你已经校准了模块，并按照前面所示的步骤输入了数值。指南针模块应该水平持平，并与 RGB 环保持一致。环和模块应始终一起移动。
- en: • The module is best used outdoors, as it is very sensitive to metal and electrical
    interference.
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: • 该模块最好在户外使用，因为它对金属和电气干扰非常敏感。
- en: • Try to keep the power for your Arduino and the sensor as far apart as possible
    to avoid interference.
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: • 尽量将 Arduino 和传感器的电源保持尽可能远，以避免干扰。
