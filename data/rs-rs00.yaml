- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: '![](Images/chapterart.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: In any language, the gap between what the introductory material teaches you
    and what you know after years of hands-on experience is always wide. Over time,
    you build familiarity with idioms, develop better mental models for core concepts,
    learn which designs and patterns work and which do not, and discover useful libraries
    and tools in the surrounding ecosystem. Taken together, this experience enables
    you to write better code in less time.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何语言中，入门教材教授的内容和你通过多年的实践经验积累的知识之间，总是存在着巨大的差距。随着时间的推移，你会逐渐熟悉各种习惯用语，建立起更好的核心概念的思维模型，了解哪些设计和模式有效，哪些无效，并发现周边生态中的有用库和工具。综上所述，这些经验使你能够在更短的时间内编写出更好的代码。
- en: With this book, I’m hoping to distill years of my own experience writing Rust
    code into a single, easy-to-digest resource. *Rust for Rustaceans* picks up where
    *The Rust Programming Language* (“the Rust book”) leaves off, though it’s well
    suited to any Rust programmer that wants to go beyond the basics, wherever you
    learned the trade. This book delves deeper into concepts such as unsafe code,
    the trait system, `no_std` code, and macros. It also covers new areas like asynchronous
    I/O, testing, embedded development, and ergonomic API design. I aim to explain
    and demystify these more advanced and powerful features of Rust and to enable
    you to build faster, more ergonomic, and more robust applications going forward.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在将我多年来编写 Rust 代码的经验浓缩成一本易于消化的资源。*Rust for Rustaceans* 是在 *The Rust Programming
    Language*（“Rust 书籍”）的基础上继续深入的内容，尽管它非常适合任何希望超越基础知识的 Rust 程序员，无论你在哪里学习这门技术。本书深入探讨了像是不安全代码、特性系统、`no_std`
    代码和宏等概念，还涉及了新的领域，如异步 I/O、测试、嵌入式开发和人体工程学的 API 设计。我旨在解释并解开这些更高级且强大的 Rust 特性的神秘面纱，帮助你构建更快、更符合人体工学且更健壮的应用程序。
- en: What’s in the Book
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本书内容
- en: 'This book is written both as a guide and as a reference. The chapters are more
    or less independent, so you can skip directly to topics that particularly interest
    you (or are currently causing you headaches), or you can read the book start to
    finish for a more holistic experience. That said, I do recommend that you start
    by reading Chapters 1 and 2, as they lay the foundation for the later chapters
    and for many topics that will come up in your day-to-day Rust development. Here’s
    a quick breakdown of what you’ll find in each chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书既是一本指南，也是一本参考书。各章内容基本独立，因此你可以直接跳到特别感兴趣的（或当前令你头疼的）主题，或者从头到尾阅读，获得更全面的体验。话虽如此，我还是建议你从第一章和第二章开始阅读，因为它们为后续章节和你日常
    Rust 开发中会遇到的许多主题奠定了基础。以下是每一章内容的简要概述：
- en: Chapter 1, *Foundations*, gives deeper, more thorough descriptions of fundamental
    Rust concepts like variables, memory, ownership, borrowing, and lifetimes that
    you’ll need to be familiar with to follow the remainder of the book.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一章，*基础*，对 Rust 中的基本概念进行了更深入、更全面的描述，包括变量、内存、所有权、借用和生命周期等，你需要熟悉这些内容才能继续阅读本书的其他部分。
- en: Chapter 2, *Types*, similarly provides a more exhaustive explanation of types
    and traits in Rust, including how the compiler reasons about them, their features
    and restrictions, and a number of advanced applications.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二章，*类型*，同样提供了关于 Rust 类型和特性的更详尽的解释，包括编译器如何推理它们、它们的特性和限制，以及许多高级应用。
- en: Chapter 3, *Designing Interfaces*, covers how to design APIs that are intuitive,
    flexible, and misuse-resistant, including advice on how to name things, how to
    use the type system to enforce API contracts, and when to use generics versus
    trait objects.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三章，*设计接口*，讨论如何设计直观、灵活且能防止误用的 API，包括如何命名事物、如何利用类型系统来强制执行 API 合约，以及何时使用泛型与特性对象。
- en: Chapter 4, *Error Handling*, explores the two primary kinds of errors (enumerated
    and opaque), when the use of each is appropriate, and how each of these are defined,
    constructed, propagated, and handled.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第四章，*错误处理*，探讨了两种主要的错误类型（枚举型和不透明型），何时使用每种错误类型，以及如何定义、构造、传播和处理这些错误。
- en: Chapter 5, *Project Structure*, focuses on the non-code parts of a Rust project,
    such as Cargo metadata and configuration, crate features, and versioning.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第五章，*项目结构*，聚焦于 Rust 项目中非代码部分，如 Cargo 元数据和配置、crate 特性以及版本控制。
- en: Chapter 6, *Testing*, details how the standard Rust testing harness works and
    presents some testing tools and techniques that go beyond standard unit and integration
    tests, such as fuzzing and performance testing.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第6章，*测试*，详细讲解了标准Rust测试工具的工作原理，并介绍了一些超越标准单元测试和集成测试的测试工具和技术，如模糊测试和性能测试。
- en: Chapter 7, *Macros*, covers both declarative and procedural macros, including
    how they’re written, what they’re useful for, and some of their pitfalls.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第7章，*宏*，介绍了声明式宏和过程式宏，包括它们的编写方法、用途以及一些陷阱。
- en: Chapter 8, *Asynchronous Programming*, gives an introduction to the difference
    between synchronous and asynchronous interfaces and then delves into how asynchrony
    is represented in Rust both at the low level of `Future` and `Pin` and at the
    high level of `async` and `await`. The chapter also explains the role of an asynchronous
    executor and how it makes the whole async machinery come together.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第8章，*异步编程*，介绍了同步与异步接口的区别，然后深入探讨了Rust中如何表示异步性，既包括低层次的`Future`和`Pin`，也包括高层次的`async`和`await`。本章还解释了异步执行器的角色，以及它如何让整个异步机制协同工作。
- en: Chapter 9, *Unsafe Code*, explains the great powers that the `unsafe` keyword
    unlocks and the great responsibilities that come with those powers. You’ll learn
    about common gotchas in unsafe code as well as tools and techniques you can use
    to reduce the risk of incorrect unsafe code.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第9章，*不安全代码*，解释了`unsafe`关键字所解锁的强大能力，以及伴随而来的巨大责任。你将了解不安全代码中的常见陷阱，并学会使用一些工具和技术来降低编写不正确不安全代码的风险。
- en: Chapter 10, *Concurrency (and Parallelism)*, looks at how concurrency is represented
    in Rust and why it can be so difficult to get right in terms of both correctness
    and performance. It covers how concurrency and asynchrony are related (but not
    the same), how concurrency works when you get closer to the hardware, and how
    to stay sane while trying to write correct concurrent programs.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第10章，*并发（与并行）*，探讨了Rust中并发的表现形式，以及为什么在正确性和性能上做到并发编程是如此困难。它讲解了并发和异步的关系（但并非完全相同），当你更接近硬件时并发是如何工作的，以及如何保持理智，尽量编写正确的并发程序。
- en: Chapter 11, *Foreign Function Interfaces*, teaches you how to make Rust cooperate
    nicely with other languages and what FFI primitives like the `extern` keyword
    actually do.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第11章，*外部函数接口*，讲解了如何让Rust与其他语言良好合作，以及像`extern`关键字这样的FFI原语到底是做什么的。
- en: Chapter 12, *Rust Without the Standard Library*, is all about using Rust in
    situations where the full standard library isn’t available, such as on embedded
    devices or other constrained platforms, where you’re restricted to what the `core`
    and `alloc` modules provide.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第12章，*没有标准库的Rust*，讲述了在没有完整标准库的情况下使用Rust的情况，例如在嵌入式设备或其他受限平台上，这些地方只提供`core`和`alloc`模块。
- en: Chapter 13, *The Rust Ecosystem*, doesn’t cover a particular Rust subject but
    instead aims to give broader guidance about working in the Rust ecosystem. It
    contains descriptions of common design patterns, advice on staying up to date
    on additions to the language and best practices, tips on useful tools and other
    useful trivia I’ve accumulated over the years that isn’t otherwise described in
    any single place.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第13章，*Rust生态系统*，并没有涵盖某个特定的Rust主题，而是旨在提供关于如何在Rust生态系统中工作的广泛指导。它包含了常见设计模式的描述、关于保持语言更新和最佳实践的建议、关于有用工具的技巧以及我多年来积累的其他有用小知识，这些内容在任何单一地方都没有详细描述。
- en: The book has a website at [https://rust-for-rustaceans.com](https://rust-for-rustaceans.com)
    with links to resources from the book, future errata, and the like. You’ll also
    find that information at the book’s page on the No Starch Press website at [https://nostarch.com/rust-rustaceans/](https://nostarch.com/rust-rustaceans/).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本书有一个网站，[https://rust-for-rustaceans.com](https://rust-for-rustaceans.com)，提供书中的资源链接、未来的勘误等信息。你还可以在本书的页面上找到相关信息，网址是[https://nostarch.com/rust-rustaceans/](https://nostarch.com/rust-rustaceans/)。
- en: 'And now, with all that out of the way, there’s only one thing left to do:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有的内容已经讲完，剩下的只有一件事要做：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
