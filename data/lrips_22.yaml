- en: The Field Guide to Userland
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户领域指南
- en: '![image with no caption](figs/web/155fig01.png.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](figs/web/155fig01.png.jpg)'
- en: You might have wondered whether this or that part of the story is real. Can
    you really make a Fair Coin out of an Unfair Coin? Can you really use ants to
    find shorter paths? Yes, you can do both—and a lot more besides. In this guide,
    you’ll find out how some of the places, people, and things Laurie encounters in
    Userland connect with our own world.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道这个故事的某些部分是否真实。你真的能用不公平的硬币做一个公平的硬币吗？你真的能用蚂蚁找到更短的路径吗？是的，你能做这两件事——而且还可以做更多。在这本指南中，你将发现劳里在用户领域中遇到的一些地方、人物和事物是如何与我们自己的世界相连接的。
- en: 'Chapter 0: Mostly Lost'
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第0章：大部分迷失
- en: Jargon
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行话
- en: In the real world, jargon doesn’t look like a mouse-dog, or even a dog-mouse;
    it looks just like an ordinary word! Computer scientists (and really, all scientists)
    love inventing new words. We call these specialized words *jargon* or *argot*.
    Jargon can be good, because it saves time when you’re discussing things with your
    colleagues. It can also be bad, because it excludes nonexperts from the conversation.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，行话看起来不像鼠狗，甚至不像狗鼠；它看起来就像一个普通的词！计算机科学家（实际上所有科学家）都喜欢发明新词。我们称这些专门词汇为*行话*或*术语*。行话有时是有好处的，因为它能节省和同事讨论时的时间。但它也可能是坏的，因为它会将非专家排除在对话之外。
- en: When you’re just starting out with programming, all the jargon, argot, and weird
    new words can be intimidating, but don’t let that stop you from learning. Jargon
    can be silly, or powerful, or dangerous, depending on how you use it. But no matter
    what words you use, if you always obfuscate instead of explicate, no one will
    understand you!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当你刚开始学习编程时，所有的行话、术语和奇怪的新词可能会让人感到害怕，但不要让这些阻止你学习。行话可以是傻的、强大的或危险的，这取决于你如何使用它。但无论你使用什么词语，如果你总是模糊而不是清晰表达，没人会理解你！
- en: Wandering salesman
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流浪销售员
- en: The *Traveling Salesman problem* is a classic computer science question. Given
    a group of cities, your goal is to find the shortest *Hamiltonian path*, a route
    that lets you visit each city only once. If you have a large number of cities,
    it would take a very long time to calculate that path, even for a computer. So
    the Wandering Salesman might be on the road for quite a while!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*旅行销售员问题*是一个经典的计算机科学问题。给定一组城市，你的目标是找到最短的*哈密尔顿路径*，这条路线让你每个城市只访问一次。如果城市数量很大，即使是计算机也需要很长时间来计算这条路径。所以流浪销售员可能会在路上呆上很久！'
- en: 'Instead of calculating the exact answer, the salesman looks for a path through
    all the towns that’s *close enough* to being the shortest. A very interesting
    aspect of the Traveling Salesman problem is that humans are pretty good at solving
    small examples by hand. There is much discussion about what algorithm people use
    in their heads while solving it. See also *Hugh Rustic* ([Chapter 8](ch09.html
    "Chapter 8. More Than One Way to Do It"); [Chapter 8: More Than One Way to Do
    It](pr03.html#chapter_8_more_than_one_way_to_do_it "Chapter 8: More Than One Way
    to Do It")).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 销售员不是计算精确的答案，而是寻找一条通过所有城镇的路径，这条路径*足够接近*最短路径。旅行销售员问题的一个非常有趣的方面是，人类在解决小规模问题时非常擅长手动计算。关于人们在头脑中使用什么算法来解决它，有很多讨论。另见*休·鲁斯蒂克*（[第8章](ch09.html
    "第8章：不止一种方法")；[第8章：不止一种方法](pr03.html#chapter_8_more_than_one_way_to_do_it "第8章：不止一种方法")）。
- en: '![image with no caption](figs/web/156fig01.png.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](figs/web/156fig01.png.jpg)'
- en: The Upper and Lower Bounds
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上界与下界
- en: In Userland, the Upper Bounds are a mountain range, as tall as anything can
    be. The Lower Bounds are valleys as low and deep as anything can be. Nothing can
    be higher and nothing can be lower than these two bounds.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户领域，上界是一座山脉，高得无可比拟。下界是深谷，低得无可比拟。没有任何东西能比这两个界限更高，也没有什么能比这两个界限更低。
- en: In the real world, finding an upper and lower limit on a problem can simplify
    things a lot. Say you have to guess a person’s age. It’s unlikely that anyone
    is over 150 years old, and no one can be younger than 0 years old. So, 150 is
    the *upper limit* and 0 is the *lower limit*. You can narrow down the bounds even
    more with simple questions. Is the person still in school? If so, then he is probably
    younger than 30\. Can the person drive a car? If so, then he is probably older
    than 15.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，找到一个问题的上限和下限可以大大简化问题。假设你必须猜测一个人的年龄。没人会超过150岁，也没有人能比0岁更小。所以，150是*上限*，0是*下限*。你可以通过简单的问题进一步缩小范围。这个人还在上学吗？如果是，那么他可能不到30岁。这个人会开车吗？如果是，那么他可能超过15岁。
- en: Mile Zero
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 零英里
- en: You sometimes see signs that mark a point on a highway, like “Mile 14.” Now,
    if there is a Mile 14, then there must be a Mile 13, and a Mile 12, and so on.
    Everything has to start somewhere, and Zero is where it starts. Possibly the most
    famous Mile Zero is in Key West, Florida. It’s at the beginning of US Route 1,
    which goes all the way to Canada. If you look carefully and are very lucky, you
    might find a Mile Zero near where you live.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你有时会看到标记高速公路上某个位置的标志，比如“ Mile 14”。现在，如果有 Mile 14，那么肯定会有 Mile 13，Mile 12，依此类推。一切都必须从某个地方开始，而零就是起点。最著名的零英里可能是在佛罗里达州的基韦斯特。它是美国
    1 号公路的起点，这条公路一直延伸到加拿大。如果你仔细看并且非常幸运，你可能会在你住的地方附近找到一个零英里的标志。
- en: 'Chapter 1: A Hidden Ally'
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章：一个隐藏的盟友
- en: Xor
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异或
- en: 'When you say “A or B,” you mean that you want one of those two things, or maybe
    both! If you say “A xor B,” then you mean you want *one and only one* of those
    two things, not both. That’s why Xor keeps turning rainbow colors: Xor and the
    thing he’s currently resting on can’t be blue at the same time. If he’s sitting
    on a blue sign, then he must turn any color that *isn’t* blue! Not a great form
    of camouflage, is it?'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当你说“ A 或 B”时，意味着你想要这两者之一，或者可能是两者都要！但如果你说“ A 异或 B”，那就意味着你只想要这两者中的*一个而且仅一个*，而不是两者都要。这就是为什么
    Xor 会不停地变换彩虹颜色：Xor 和它目前所处的位置不能同时是蓝色。如果它坐在一个蓝色的标牌上，那么它就必须变成任何*不是*蓝色的颜色！这可不是一种很好的伪装方式，对吧？
- en: Steganosaurus
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Steganosaurus
- en: '*Steganography* is the art of hiding information inside other information,
    and it’s used in both the digital and the physical world. For example, you might
    hide a secret message by writing it with invisible ink on a piece of paper. With
    a computer program, you could even hide words inside sounds and pictures. A Steganosaurus
    is, therefore, a dinosaur that can hide itself anywhere.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*隐写术* 是将信息隐藏在其他信息中的艺术，它被应用于数字世界和物理世界。例如，你可能通过使用隐形墨水在一张纸上写下秘密信息来隐藏它。使用计算机程序，你甚至可以将文字隐藏在声音和图片中。因此，Steganosaurus
    是一种可以在任何地方隐藏自己的恐龙。'
- en: 'Chapter 2: Sense and Sensibleness'
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：常识与理性
- en: Composing
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组合
- en: 'Eponymous Bach is a composer, but she works with ideas instead of music. *Composing*
    is the act of combining small ideas into bigger ones to solve a problem in steps.
    Almost every idea is composed of smaller ideas. For example, multiplying whole
    numbers isn’t anything special. You can think of it as adding a number to itself
    and repeating:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Eponymous 的巴赫是一个作曲家，但她处理的是思想而非音乐。*组合* 是将小的思想结合成更大的思想，分步骤解决问题的行为。几乎每个想法都由更小的想法组成。例如，乘法并不是什么特别的事情。你可以将它看作是将一个数字加到它自身并重复：
- en: 2 × 3 = 6
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 2 × 3 = 6
- en: ''
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 2 + 2 + 2 = 6 (Add up three twos.)
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 2 + 2 + 2 = 6 （加起来三个二）
- en: 'See also *Decomposing* ([Chapter 17](ch18.html "Chapter 17. Chasing Elegants");
    [Chapter 17: Chasing Elegants](pr03.html#chapter_17_chasing_elegants "Chapter
    17: Chasing Elegants")) and *Relating* ([Chapter 17](ch18.html "Chapter 17. Chasing
    Elegants"); [Relating](pr03.html#relating "Relating")). Composing, decomposing,
    and relating are problem-solving methods that lie at the root of all math, logic,
    and computer science.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 *分解* （[第17章](ch18.html "第17章. 追求优雅"); [第17章：追求优雅](pr03.html#chapter_17_chasing_elegants
    "第17章：追求优雅")）和 *关联* （[第17章](ch18.html "第17章. 追求优雅"); [关联](pr03.html#relating "关联")）。组合、分解和关联是解决问题的方法，构成了所有数学、逻辑和计算机科学的根基。
- en: Bach’s First Law of Eponymy
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 巴赫的第一法则：命名法则
- en: Don’t let any new idea escape without putting a name on it. A name is like a
    handle that makes the idea easier to use.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 不要让任何新想法在没有给它命名的情况下溜走。一个名字就像是一个把这个想法更易于使用的把手。
- en: Bach’s second Law of Eponymy
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 巴赫的第二法则：命名法则
- en: It’s better to put a name on Ideas than on Things, because Ideas last longer.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 给想法命名比给物体命名要好，因为想法存在的时间更长。
- en: Bach’s Third Law of Eponymy
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 巴赫的第三法则：命名法则
- en: As an idea becomes more useful and famous, its name becomes shorter and lowercase.
    This law eventually affected Eponymous’s friend, Andy Ampère, and his discovery
    about electricity.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 随着一个想法变得更加有用和著名，它的名字变得更短并且是小写字母。这条规律最终影响了 Eponymous 的朋友 Andy Ampère 以及他关于电的发现。
- en: '![image with no caption](figs/web/158fig01.png.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图像](figs/web/158fig01.png.jpg)'
- en: Ampère
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安培
- en: André-Marie Ampère discovered that when electricity flows through parallel wires,
    the wires will either attract or repel each other, causing the wires to bend.
    By measuring how much they bend, you can measure how much electricity is flowing.
    Ampère used this idea to lay the foundation for nearly everything we know about
    electricity, and we measure electrical current in *amperes* (or *amps*) in his
    honor. (See *Bach’s Third Law of Eponymy* for Eponymous’s theory on why we don’t
    call the unit an *Ampère* nearly as often.)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 安德烈-玛丽·安培发现，当电流流过平行电线时，电线会相互吸引或排斥，导致电线弯曲。通过测量它们弯曲的程度，你可以测量流过的电流。安培利用这个原理奠定了我们对电的基本认知，我们以他的名字来度量电流，单位为*安培*（或*安*）。（参见*巴赫的第三条命名法则*，了解Eponymous关于为何我们很少称单位为*安培*的理论。）
- en: Sense vs. Sensibleness
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**理性**与**明智性**'
- en: Programmers and mathematicians sometimes use a pair of ideas, called the *solution
    space* and the *problem space*, to describe finding an answer to a problem.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员和数学家有时会使用一对概念，称为*解空间*和*问题空间*，来描述如何找到问题的答案。
- en: Say you need to move a heavy box so you can unpack it; anything related to moving
    the box is in your problem space. Try to imagine every single thing you could
    possibly do to try to move that box. You could walk forward, walk backward, stick
    out your tongue, sing a song, write an equation, use a lever, call for help, look
    for a forklift, or do literally anything else you can think of. Write down as
    many of these possibilities as you can fit on a piece of paper.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你需要移动一个沉重的盒子，好让你能打开它；与移动盒子相关的任何事情都在你的问题空间中。试着想象你能做的任何一件事来试图移动这个盒子。你可以向前走，向后走，伸出舌头，唱歌，写方程式，使用杠杆，呼救，找叉车，或者做任何你能想到的事情。把你能想到的这些可能性尽可能多地写在纸上。
- en: Out of that huge space of possibilities, imagine only the ones that have a good
    chance of moving the box. Circle those with a red pen. The circled ones are in
    the solution space. They *make sense* because they would accomplish your goal,
    and the rest don’t make sense. Now, look again at all of the circled possibilities
    and think about which one is best (fastest, cheapest, easiest, most reliable,
    and so on). Underline that one in green. That’s the most *sensible* answer out
    of all the ones that make sense.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从那片巨大的可能性空间中，想象出那些有很大机会推动盒子的可能性。用红笔圈出它们。被圈起来的就是解空间中的内容。它们**有道理**，因为它们能够实现你的目标，其它的则没有道理。现在，再次查看所有被圈起来的可能性，思考哪一个是最好的（最快、最便宜、最简单、最可靠等等）。用绿色划出这个答案。这就是所有有道理的选项中最**明智**的答案。
- en: 'The point of this exercise is to avoid a very human, very common error: we
    tend to grasp at the first solution we think of and forget to consider other possibilities.
    This is what Eponymous means when she tells Laurie that the Wandering Salesman’s
    solution isn’t sensible. See also *Hugh Rustic* ([Chapter 8](ch09.html "Chapter 8. More
    Than One Way to Do It"); [Chapter 8: More Than One Way to Do It](pr03.html#chapter_8_more_than_one_way_to_do_it
    "Chapter 8: More Than One Way to Do It")) and *Five Whys* ([Chapter 14](ch15.html
    "Chapter 14. In the Abstract"); [Chapter 14: In the Abstract](pr03.html#chapter_14_in_the_abstract
    "Chapter 14: In the Abstract")).'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习的重点是避免一个非常人性化、非常常见的错误：我们倾向于抓住第一个想到的解决方案，而忘记考虑其他可能性。这就是Eponymous在告诉Laurie流浪推销员的解决方案不明智时的意思。另请参见*Hugh
    Rustic*（[第八章](ch09.html "第八章. 做事有多种方式")；[第八章：做事有多种方式](pr03.html#chapter_8_more_than_one_way_to_do_it
    "第八章：做事有多种方式")）和*五个为什么*（[第十四章](ch15.html "第十四章. 抽象")；[第十四章：抽象](pr03.html#chapter_14_in_the_abstract
    "第十四章：抽象")）。
- en: 'Chapter 3: Rounding Error'
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章：舍入误差
- en: Round Robin Algorithm
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环队列算法
- en: The Robins aren’t really evil—they’re just hungry. They cooperate in everything
    they do, taking turns and making sure the work is balanced among them. Sharing
    work is a great way to get things done faster, and computers can share work, too!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Robins并不是真正邪恶的——它们只是饿了。它们在做任何事情时都会合作，轮流工作，并确保工作在它们之间平衡分配。共享工作是加快完成任务的好方法，计算机也可以共享工作！
- en: You can find the Round Robin method almost anywhere. Imagine a bus route that
    takes an hour to complete. If you put two buses on that route, a bus will arrive
    at each stop every 30 minutes. With three buses, you’d see a bus every 20 minutes,
    and four means you’d see one every 15 minutes. With five buses, you’d see one
    every 12 minutes, and so on. Just divide 60 (the number of minutes in an hour)
    by the number of buses to see how often a bus should come.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你几乎可以在任何地方找到循环赛制方法。想象一下，一个巴士路线需要一个小时才能完成。如果你在这条路线放两辆巴士，每30分钟就会有一辆巴士到达每个站点。三辆巴士的话，你就会每20分钟看到一辆巴士，四辆巴士意味着你会每15分钟看到一辆巴士。五辆巴士的话，你会每12分钟看到一辆巴士，以此类推。只需要把60（一个小时的分钟数）除以巴士的数量，就能知道巴士应该多频繁到达。
- en: But you have to be careful to make sure the buses arrive at each stop at evenly
    spaced times. Five buses reaching one stop all at once wouldn’t be balanced. Also,
    if one bus breaks down and gets delayed, this could cause all the other buses
    to back up!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但你必须小心，确保巴士到达每个站点时时间间隔均匀。如果五辆巴士同时到达一个站点，那就不平衡了。而且，如果一辆巴士发生故障并延误，可能会导致所有其他巴士都发生拥堵！
- en: '![image with no caption](figs/web/160fig01.png.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](figs/web/160fig01.png.jpg)'
- en: 'Chapter 4: What the Tortoise Said to Laurie'
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章：乌龟对劳里的话
- en: Recursion
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 递归
- en: '*Recursion* is a way to repeat the same process over and over until you find
    the answer you’re looking for. When you use recursion, you run though the process,
    and if the answer is the one you want, you stop. If it’s not, you take the answer
    you found, plug it into the same process, and run it again.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*递归* 是一种重复相同过程，直到找到你想要的答案的方法。当你使用递归时，你执行这个过程，如果答案是你想要的，你就停下来。如果不是，你把找到的答案带入同样的过程，再次执行。'
- en: Let’s look at an example of recursion in action right here in Userland. Recall
    from [Chapter 10](ch11.html "Chapter 10. A Well-Timed Entrance") that Jane Hecate
    has a single, gigantic book of names. The name *Lauren* starts with *L*, so Jane
    should find it in the *L* section of her book, but that could take a while with
    so many pages. If Jane wants a faster way to look for *Lauren*, she can divide
    the book into two equal halves and see if *L* is in the first half or the second
    half.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个递归在用户领域的实际例子。回想一下[第10章](ch11.html "第10章. 合时宜的进入")，简·赫卡特有一本单独的、巨大的名字书。名字
    *Lauren* 以 *L* 开头，因此简应该在书中的 *L* 部分找到它，但由于书页太多，这可能需要一段时间。如果简想要更快地找到 *Lauren*，她可以将书分成两半，看看
    *L* 在前半部分还是后半部分。
- en: 'First half: {A, B, C, D, E, F, G, H, I, J, K, L, M}'
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 前半部分：{A, B, C, D, E, F, G, H, I, J, K, L, M}
- en: ''
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Second half: {N, O, P, Q, R, S, T, U, V, W, X, Y, Z}'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 后半部分：{N, O, P, Q, R, S, T, U, V, W, X, Y, Z}
- en: Since *L* is in the first half, Jane can then divide the first half of the book
    in half, giving her two quarters of the book to search.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 *L* 位于前半部分，简可以将书的前半部分再分成两半，从而将书分成两个季度来搜索。
- en: 'First quarter: {A, B, C, D, E, F, G}'
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 第一季度：{A, B, C, D, E, F, G}
- en: ''
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Second quarter: {H, I, J, K, L, M}'
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 第二季度：{H, I, J, K, L, M}
- en: '*Lauren* should be in the second quarter, so Jane can divide that quarter in
    half, giving her two eighths of the alphabet:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*Lauren* 应该在第二季度，所以简可以将这个季度分成两半，从而得到两个八分之一的字母表：'
- en: 'First eighth: {H, I, J}'
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 前八分之一：{H, I, J}
- en: ''
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Second eighth: {K, L, M}'
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 第二个八分之一：{K, L, M}
- en: '![image with no caption](figs/web/161fig01.png.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](figs/web/161fig01.png.jpg)'
- en: Jane can continue dividing the letter groups containing *L* in half until eventually
    she ends up with just the *L* section. (How many more times would Jane have to
    divide a set of letters in half to find *L*?) This way of searching for a particular
    piece of information is called a *binary search*.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 简可以继续将包含 *L* 的字母组对半分，直到最终只剩下 *L* 部分。（简还需要再分多少次字母组，才能找到 *L*？）这种搜索特定信息的方法叫做 *二分查找*。
- en: 'See also *The Garden of Forking Paths* ([Chapter 19](ch20.html "Chapter 19. Branching
    Out"); [Chapter 19: Branching Out](pr03.html#chapter_19_branching_out "Chapter
    19: Branching Out")) and *Chasing Your Tail* ([Achilles and the Tortoise](pr03.html#achilles_and_the_tortoise
    "Achilles and the Tortoise")).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另见 *叉路花园* ([第19章](ch20.html "第19章. 分支"); [第19章：分支](pr03.html#chapter_19_branching_out
    "第19章：分支")) 和 *追尾* ([阿基里斯与乌龟](pr03.html#achilles_and_the_tortoise "阿基里斯与乌龟"))。
- en: Achilles and the Tortoise
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阿基里斯与乌龟
- en: These two characters were used by a philosopher named Zeno of Elea almost 2,500
    years ago to talk about infinity. From Aristotle to Lewis Carroll to Marvin Minsky
    to Douglas Hofstadter, mathematics is full of stories about their adventures.
    It’s Tortoises all the way down.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个角色是2500多年前由一位名叫芝诺（Zeno of Elea）的哲学家用来讨论无限的。从亚里士多德到刘易斯·卡罗尔，再到马文·明斯基和道格拉斯·霍夫施塔特，数学充满了关于他们冒险故事的描述。一路上都是乌龟。
- en: Chasing Your Tail
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 追逐自己的尾巴
- en: 'Chasing your own tail is not always a waste of time! In computer science, there’s
    a type of recursion that sounds a bit like running around in circles, and it’s
    quite useful. In *tail recursion*, you perform a process, then perform the process
    again on the result, and repeat until you reach the final answer. For example,
    Jane Hecate’s binary search for the *L* section of her book might look something
    like this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 追逐自己的尾巴不一定是浪费时间！在计算机科学中，有一种递归类型听起来有点像绕圈子，但它非常有用。在*尾递归*中，你执行一个过程，然后在结果上再次执行该过程，重复此过程直到得到最终答案。例如，简·赫卡特在她的书中对*L*部分进行的二分查找可能是这样的：
- en: Check the section of the book of names we have right now.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查一下我们现在手头的名字书的部分。
- en: Do we only have the *L* section?
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们只有*L*部分吗？
- en: If so, then we’re done!
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有，那我们就完成了！
- en: If not, then divide the book in half.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有，那么就将书分成两半。
- en: Look at the half of the list containing the *L* section, and repeat.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看包含*L*部分的那一半列表，然后重复。
- en: 'See also *Recursion* ([Chapter 4: What the Tortoise Said to Laurie](pr03.html#chapter_4_what_the_tortoise_said_to_laur
    "Chapter 4: What the Tortoise Said to Laurie")).'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 参见*递归*（[第4章：乌龟对劳里说了什么](pr03.html#chapter_4_what_the_tortoise_said_to_laur "第4章：乌龟对劳里说了什么")）。
- en: '![image with no caption](figs/web/162fig01.png.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![无标题图片](figs/web/162fig01.png.jpg)'
- en: Infinity
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无限
- en: When people say there’s an *infinite* amount of something, they mean there’s
    no limit to how much of that thing exists. When Tortoise demonstrates how an infinite
    string can be less than two inches long, he shows that you can split that string
    into an infinite number of smaller pieces.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们说某样东西有*无限*时，他们指的是这个东西的数量没有上限。当乌龟展示一个无限长的绳子可以小于两英寸时，他表明你可以将这根绳子分成无限多个更小的部分。
- en: 'Infinity is *big*, bigger than you can imagine. But you can hold infinity in
    your mind simply by saying a few words. There are infinite odd numbers: 1, 3,
    5, 7, and so on, up to forever. There are infinite even numbers, too: 0, 2, 4,
    6, 8, and so on. No matter how hard you look, you will never find an odd number
    in the list of even numbers or an even number among the odd ones. That means there
    are at least two kinds of infinity: the even numbers and the odd numbers.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 无限是*巨大*的，比你想象的还要大。但你可以通过说几句话将无限容纳进你的思维中。奇数是无限的：1、3、5、7，等等，一直到永远。偶数也是无限的：0、2、4、6、8，等等。无论你怎么看，你永远不会在偶数列表中找到奇数，或者在奇数列表中找到偶数。这意味着至少有两种无限：偶数和奇数。
- en: There are also *infinite kinds of infinity*. Think about all the numbers divisible
    by 3 and all the numbers *not* divisible by 3 (or 4, or 5). Now imagine all the
    numbers that no one else has thought of before. That’s another kind of infinity!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 也有*无限种无限大*。想想所有能被3整除的数字和所有*不能*被3整除的数字（或者是4、5）。现在再想象一些别人从未想到过的数字。这就是另一种无限！
- en: '![image with no caption](figs/web/163fig01.png.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![无标题图片](figs/web/163fig01.png.jpg)'
- en: Infinite Regress
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无限回溯
- en: If you think about how you think, you might then start thinking about how you
    think about how you think, and then about how you think about how you think about
    how you think, and so on. This is a form of argument called *infinite regress*,
    and it can have no end. The first time you fall into this mental trap, it can
    be confusing or even scary. The trick is not to take it too seriously.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你思考自己是如何思考的，你可能会开始思考自己是如何思考自己是如何思考的，然后再思考自己是如何思考自己是如何思考自己是如何思考的，依此类推。这是一种叫做*无限回溯*的论证方式，它可以没有尽头。第一次陷入这个思维陷阱时，它可能会让人困惑甚至害怕。诀窍是不要太当真。
- en: If you think this sounds related to recursion, you’re correct! It would be quite
    troubling to get stuck in a recursive process forever. In real computers, infinite
    recursion never actually happens because no computer can hold an infinite amount
    of information. When the computer runs out of room while working on something
    recursive, you never know what might happen. Laurie and Xor experienced this firsthand
    at Recursion Junction. See also *Chasing Your Tail* ([Achilles and the Tortoise](pr03.html#achilles_and_the_tortoise
    "Achilles and the Tortoise")).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得这和递归相关，你是对的！如果一直陷入递归过程，肯定会非常麻烦。在实际计算机中，永远不会发生无限递归，因为没有计算机能够存储无限的信息。当计算机在处理递归时空间不足时，你永远也不知道会发生什么。Laurie
    和 Xor 在递归交汇处亲身体验了这一点。参见*追尾*（[阿基里斯与乌龟](pr03.html#achilles_and_the_tortoise "阿基里斯与乌龟")）。
- en: 'Chapter 5: Welcome to Symbol'
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章：欢迎来到符号
- en: Semantic Turnstile
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语义闸机
- en: ╞ is a logical symbol that points the way to a truth. It’s kind of like the
    equal sign (=), except that it shows how *ideas* are related instead of numbers.
    If all the ideas to the left of the semantic turnstile are true, then the idea
    on the right is also true.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: ╞ 是一个逻辑符号，指向某个真理。它有点像等号（=），不同的是它表示的是*想法*之间的关系，而不是数字。如果语义闸机左侧的所有想法都为真，那么右侧的想法也为真。
- en: 'Say you have two ideas: (A) “You have the password” and (B) “You may enter.”
    You can compose these ideas together to make a *rule*:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有两个想法：(A) “你拥有密码” 和 (B) “你可以进入”。你可以将这些想法组合起来，形成一个*规则*：
- en: (A → B) “IF you have the password, THEN you may enter.”
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: (A → B) “如果你拥有密码，那么你可以进入。”
- en: That is the rule that Ponens explained to Laurie at the gates of Symbol. (Placing
    two ideas on either side of that little arrow is another way to say, “IF A is
    true, THEN B is true.”)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 Ponens 在符号的门口向 Laurie 解释的规则。（将两个想法放在小箭头的两侧是另一种表达方式，“如果 A 为真，那么 B 为真。”）
- en: But how do you know the rule is true? Maybe that’s not how you enter Symbol.
    So you have to show that both the rule (A → B), and the first idea, A, are true.
    In this case, we need to be sure that both the rule (“IF you have the password,
    THEN you may enter”) and the idea (“You have the password”) are true before we
    let anyone through the gate.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 但是你怎么知道这个规则是真的呢？也许这不是你进入符号的方式。那么你必须证明规则（A → B）和第一个想法 A 都是真的。在这种情况下，我们需要确保规则（“如果你有密码，那么你可以进入”）和想法（“你有密码”）都是真的，然后我们才允许任何人通过大门。
- en: 'That’s what the semantic turnstile is for. We put the rule and the first idea
    on the left of the turnstile, and put the second idea (B, which is “You may enter”
    in this case) on the right:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是语义闸机的作用。我们将规则和第一个想法放在闸机的左侧，将第二个想法（B，即“你可以进入”）放在右侧：
- en: (A → B), (A) ╞ (B)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: (A → B), (A) ╞ (B)
- en: This means “IF our rule is true and IF you actually have the password, THEN
    you may enter.”
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着“如果我们的规则为真，且如果你确实拥有密码，那么你可以进入。”
- en: 'Here’s the weirder part: you might have noticed that the turnstile looks a
    lot like an IF...THEN. IF everything to the left is true, THEN the idea on the
    right is true. So how do we know this rule as a whole is true? Do we need a turnstile
    for the turnstile?'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是更奇怪的部分：你可能注意到这个闸机看起来很像一个 IF...THEN 语句。如果左边的所有内容都为真，那么右边的想法就为真。那么我们怎么知道这个规则整体上是真的呢？我们需要给这个闸机再加一个闸机吗？
- en: (A → B), (A) ╞ (B) ╞ (C)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: (A → B), (A) ╞ (B) ╞ (C)
- en: . . . and then a turnstile for that one, and for the next one?
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: . . . 然后对下一个想法再加一个闸机？
- en: (A → B), (A) ╞ (B) ╞ (C) ╞ (D) ╞ (E) ╞ (F) ╞ (G) . . .
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: (A → B), (A) ╞ (B) ╞ (C) ╞ (D) ╞ (E) ╞ (F) ╞ (G) . . .
- en: In theory, you have to pass an infinite number of turnstiles before you know
    anything is true! It’s a wonder we are able to put our shoes on in the morning!
    So how do we know that anything is true? How do you know your milk will come out
    of the carton at breakfast tomorrow, or that your classroom won’t be on the roof
    when you get to school?
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，你必须通过无数个闸机，才能知道某件事情是否为真！真是奇迹，我们早上能顺利穿上鞋子！那么，我们怎么知道任何事情是真的呢？你怎么知道明天早餐时牛奶会从盒子里倒出来，或者你到学校时教室不会在屋顶上呢？
- en: In practice, we simply trust that the rules we live by are true, since we’ve
    seen them work in the past. However, it can be fun and useful to poke into the
    rules, as Laurie did. Even if they turn out to make sense, you learn a lot about
    how they work. Poking at rules is a big part of what science is all about! See
    *Infinite Regress* ([Chapter 4](ch05.html "Chapter 4. What the Tortoise Said to
    Laurie"); [Infinity](pr03.html#infinity "Infinity")) and *It’s Only Logical* ([It’s
    Only Logical](pr03.html#itapostrophes_only_logical "It’s Only Logical")).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，我们只是相信我们所遵循的规则是正确的，因为我们曾见证过它们在过去的有效性。然而，像劳里一样探究这些规则也是既有趣又有用的。即便这些规则最终看起来是合理的，你也能从中学到它们是如何运作的。探究规则是科学本质的一部分！另见
    *无限倒退*（[第4章](ch05.html "第4章。乌龟对劳里说了什么"); [无穷大](pr03.html#infinity "无穷大")）和 *这只是合乎逻辑*（[这只是合乎逻辑](pr03.html#itapostrophes_only_logical
    "这只是合乎逻辑")）。
- en: Ponens
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 波嫩斯
- en: 'His full name is Modus Ponendo Ponens, and he represents a type of logical
    argument. This type of argument can come to a *logical* conclusion, but that conclusion
    might not always be *true*. For example, here’s how Ponens decided that the gate
    to Symbol is secure:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 他全名是“肯定模式波嫩斯”（Modus Ponendo Ponens），代表一种逻辑推理方式。这种推理方式可能得出*合乎逻辑*的结论，但这个结论不一定是*正确*的。例如，下面是波嫩斯如何判断通往符号世界的大门是安全的：
- en: If only people with passwords can enter, then our door is secure.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果只有拥有密码的人才能进入，那么我们的门就是安全的。
- en: Only people with passwords have entered.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有拥有密码的人才进入了。
- en: Therefore, our door is secure.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，我们的门是安全的。
- en: 'This conclusion may seem logical, but it’s not necessarily true. Logic is only
    as good as the assumptions it depends on. Someone, like Laurie, can *say* she
    is Eponymous Bach without *actually* being Eponymous Bach, and as long as she
    has the right password, she can waltz right into Symbol. In that case, all of
    the logic in the world won’t make that gate secure! See also *Tollens* (next)
    and *Semantic Turnstile* ([Chapter 5: Welcome to Symbol](pr03.html#chapter_5_welcome_to_symbol
    "Chapter 5: Welcome to Symbol")).'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结论看起来似乎合乎逻辑，但不一定是正确的。逻辑的有效性取决于它所依赖的假设。像劳里那样的人可以*说*自己是“同名巴赫”，但并不*真正*是“同名巴赫”，只要她拥有正确的密码，她就能轻松进入符号世界。在这种情况下，世界上所有的逻辑都无法确保那扇门的安全！另见
    *托伦斯*（下文）和 *语义转门*（[第5章：欢迎来到符号](pr03.html#chapter_5_welcome_to_symbol "第5章：欢迎来到符号")）。
- en: '![image with no caption](figs/web/166fig01.png.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![没有说明文字的图片](figs/web/166fig01.png.jpg)'
- en: Tollens
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 托伦斯
- en: 'His full name is Modus Tollendo Tollens, and, like Ponens, he represents a
    type of logical argument. In fact, Tollens works a lot like Ponens, but backward.
    For example, here’s how Tollens might decide that his door is secure:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 他全名是“否定模式托伦斯”（Modus Tollendo Tollens），就像“肯定模式”（Ponens）一样，他代表一种逻辑推理方式。事实上，托伦斯的推理方式与肯定模式非常相似，只不过是反过来的。例如，下面是托伦斯如何判断他的大门是安全的：
- en: If our door was insecure, then people without passwords would enter.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们的门不安全，那么没有密码的人会进入。
- en: No one without a password has entered.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有密码的人没有进入。
- en: Therefore, our door is secure.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，我们的门是安全的。
- en: 'This is how Tollens would decide Steganosauruses don’t exist:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是托伦斯如何判断斯特加诺龙不存在的方式：
- en: If Steganosauruses existed, you would see them.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果斯特加诺龙存在，你应该能看到它们。
- en: You have never seen a Steganosaurus.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你从未见过斯特加诺龙。
- en: Therefore, they do not exist.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，它们并不存在。
- en: Like Ponens, Modus Tollendo Tollens is perfectly valid logic, but it’s only
    as good as the assumptions it’s based on. Just because you don’t have proof that
    something is true, that doesn’t mean it’s automatically false, and just because
    you’ve never seen a Steganosaurus, that doesn’t mean they don’t exist. Maybe they
    live on an island you’ve never been to, or maybe they are so good at hiding that
    no one can see them. See *It’s Only Logical* (next).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 就像波嫩斯一样，“否定模式托伦斯”是一种完全有效的逻辑推理，但它的有效性也仅仅取决于它所基于的假设。仅仅因为你没有证明某个事情是正确的，并不意味着它自动是错误的，正如你从未见过斯特加诺龙并不意味着它们不存在。或许它们生活在你从未去过的岛屿上，或者它们隐藏得如此之好，以至于没人能看到它们。另见
    *这只是合乎逻辑*（下文）。
- en: It’s Only Logical
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这只是合乎逻辑
- en: Even if an idea is logical, it might not be true. It’s easy for an idea to be
    simple, logical, and *false*—if you forget to consider all of the facts. For example,
    people who go swimming have wet hair when they’re finished. If you see someone
    with wet hair, does that mean she just got out of the pool? No! Perhaps it was
    raining outside, or maybe she just took a shower.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 即便一个想法合乎逻辑，也不一定是真的。一个想法可能简单、合乎逻辑，但却是*错误*的——如果你忘记考虑所有的事实。例如，去游泳的人结束后头发会湿。如果你看到一个头发湿透的人，是否意味着她刚从泳池里出来？不！或许外面在下雨，或者她刚洗完澡。
- en: It’s also easy for logic to get stuck in endless loops. See *Ponens* ([Ponens](pr03.html#ponens
    "Ponens")) and *Infinite Regress* ([Chapter 4](ch05.html "Chapter 4. What the
    Tortoise Said to Laurie"); [Infinity](pr03.html#infinity "Infinity")).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑也很容易陷入无限循环。另见*波嫩斯*（[波嫩斯](pr03.html#ponens "波嫩斯")）和*无限倒退*（[第4章](ch05.html "第4章.
    乌龟对洛丽说的")；[无限](pr03.html#infinity "无限")）。
- en: 'Chapter 6: A Tinker’s Trade'
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章：Tinker 的交易
- en: '**Algorithm** An *algorithm* is a set of specific steps that you can follow
    to solve a problem. For example, a recipe for how to make pizza is an algorithm:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**算法** 一个*算法*是一组具体的步骤，你可以按照这些步骤解决问题。例如，如何制作比萨饼的食谱就是一个算法：'
- en: Spread the dough into a pan.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 把面团摊开放入烤盘中。
- en: Cover the dough in a layer of pizza sauce.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在面团上铺一层比萨酱。
- en: Sprinkle cheese on top of the sauce.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在酱料上撒上奶酪。
- en: Bake the pizza for 20 minutes at 350 degrees Fahrenheit.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将比萨饼在 350 华氏度下烤 20 分钟。
- en: Take the pizza out of the oven and let it cool.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 把比萨饼从烤箱里取出来，放凉。
- en: Dig in!
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开动吧！
- en: Just like that recipe, Laurie’s turtle drawing poems were algorithms. They broke
    down the process of drawing a circle into small steps, and the turtle followed
    those instructions to create circles of any size. If you really want to, you can
    even think up algorithms for algorithms, which is to say, how to figure out how
    to figure out how to do something. See *Infinite Regress* ([Chapter 4](ch05.html
    "Chapter 4. What the Tortoise Said to Laurie"); [Infinity](pr03.html#infinity
    "Infinity")).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 就像那个食谱一样，洛丽的乌龟绘图诗也是算法。它们将画圆的过程分解成小步骤，然后乌龟按照这些指令绘制任意大小的圆。如果你真的想的话，你甚至可以为算法想出算法，也就是如何弄清楚如何弄清楚做某件事的方法。见*无限倒退*（[第4章](ch05.html
    "第4章. 乌龟对洛丽说的")；[无限](pr03.html#infinity "无限")）。
- en: 'How would you tell Tinker’s turtle to draw a triangle of any size, where all
    three angles have the same number of degrees? (Hint: Those three angles should
    add up to 180 degrees.)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你会怎么告诉 Tinker 的乌龟画一个任意大小的三角形，其中三个角度相等？（提示：这三个角度的和应该是 180 度。）
- en: Hamiltonian Cycle
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哈密顿循环
- en: It’s quite fitting that Laurie comes from Hamilton, as her “path back to Hamilton”
    will be a *Hamiltonian path*. This type of path, named for mathematician William
    Hamilton, is a route by which a traveler visits every town on a map exactly once.
    In this book, I use the word *path*, but there is actually a slight difference
    between a Hamiltonian *path* and a Hamiltonian *cycle*, which is a path that returns
    to where it started.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 洛丽来自汉密尔顿是非常合适的，因为她的“回到汉密尔顿的道路”将是一个*哈密顿路径*。这种路径以数学家威廉·哈密尔顿命名，是一种旅行者访问地图上每个城市恰好一次的路线。在本书中，我使用了*路径*一词，但实际上哈密顿*路径*和哈密顿*循环*之间有一点不同，哈密顿循环是指一条会返回起点的路径。
- en: On a map with *N* towns, there are (*N* – 1)! ÷ 2 cycles. As Tinker said, *x*!
    is shorthand for (*x* × (*x* – 1) × . . . × 2 × 1), so for a map with six towns,
    you’d have
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个有*N*个城镇的地图上，有 (*N* – 1)! ÷ 2 个周期。正如 Tinker 所说，*x*! 是 (*x* × (*x* – 1) × .
    . . × 2 × 1) 的简写，因此对于一个有六个城镇的地图，你会有
- en: (6 – 1)! ÷ 2 = 5! ÷ 2 = (5 × 4 × 3 × 2 × 1) ÷ 2 = 60 cycles!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: (6 – 1)! ÷ 2 = 5! ÷ 2 = (5 × 4 × 3 × 2 × 1) ÷ 2 = 60 个周期！
- en: Finding a cycle is fairly easy because there are so many possibilities; finding
    a *short* one is the hard part! See also *Wandering Salesman* ([Chapter 0](ch01.html
    "Chapter 0. Mostly Lost"); [Wandering salesman](pr03.html#wandering_salesman "Wandering
    salesman")).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 找到一个周期相对容易，因为有很多可能性；找到一个*短*的周期才是难点！另见*漫游销售员*（[第0章](ch01.html "第0章. 大部分迷失")；[漫游销售员](pr03.html#wandering_salesman
    "漫游销售员")）。
- en: Fair Coin
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公正的硬币
- en: A *Fair Coin* is a coin that has an equal chance of landing with heads or tails
    facing up when you flip it. Real coins (like Laurie’s quarters), however, aren’t
    always perfectly balanced in weight, so in our world, there is no such thing as
    a perfectly fair coin. But for most coins, the odds of landing with either side
    up are close enough to fifty-fifty that we have no problem using a coin flip to
    choose between two options.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*公正的硬币* 是一种正反两面出现的几率相等的硬币。然而，真正的硬币（比如洛丽的四分之一美元硬币）并不总是完全平衡，所以在我们的世界中，根本没有完美的公正硬币。但是对于大多数硬币来说，正反两面出现的几率足够接近
    50-50，以至于我们可以毫不犹豫地用硬币抛掷来选择两个选项之间的决定。'
- en: '![image with no caption](figs/web/168fig01.png.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](figs/web/168fig01.png.jpg)'
- en: 'Even so, for important things like physics simulations, or choosing who gets
    to ride in the front seat, flip twice to guarantee absolute fairness. See also
    *A Fair Flip* ([Chapter 11](ch12.html "Chapter 11. A Fair Exchange"); [Chapter
    11: A Fair Exchange](pr03.html#chapter_11_a_fair_exchange "Chapter 11: A Fair
    Exchange")).'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 即便如此，对于像物理仿真或选择谁坐前排座位这样的重大事情，还是需要翻转两次来确保绝对的公平。另见 *公平的翻转*（[第11章](ch12.html "第11章。公平交换");
    [第11章：公平交换](pr03.html#chapter_11_a_fair_exchange "第11章：公平交换")）。
- en: Circle
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 圆圈
- en: When Laurie used the turtle robot to make a circle, she discovered that filling
    in **one** for **how-big?** made a much bigger circle than she expected. What
    number should you plug into **MOTH-CIRCLE** in order to draw a circle two inches
    in diameter?
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Laurie 使用海龟机器人画一个圆时，她发现填入 **一个** 对 **how-big?** 产生了比她预期的要大的圆。那么，你应该在 **MOTH-CIRCLE**
    中输入什么数字才能画出一个直径为两英寸的圆？
- en: '**MOTH-CIRCLE (how-big?):**'
  id: totrans-142
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**MOTH-CIRCLE（多大？）：**'
- en: ''
  id: totrans-143
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Go forward how-big? inches,**'
  id: totrans-144
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**向前走多大？英寸，**'
- en: ''
  id: totrans-145
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**make a mark,**'
  id: totrans-146
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**做个标记，**'
- en: ''
  id: totrans-147
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**turn right one degree,**'
  id: totrans-148
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**向右转一度，**'
- en: ''
  id: totrans-149
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**repeat three hundred sixty times.**'
  id: totrans-150
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**重复三百六十次。**'
- en: ''
  id: totrans-151
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Make a MOTH-CIRCLE (how-big?).**'
  id: totrans-152
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**画一个 MOTH-CIRCLE（多大？）**'
- en: Improbable vs. Impossible
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不太可能 vs. 不可能
- en: No matter which subject you study, there will always be problems that just don’t
    have a solution. We say that those problems are *impossible* to solve. Some problems,
    on the other hand, can be solved, but only under highly unlikely conditions. Those
    are *improbable*.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你学习哪个学科，总会有一些没有解决方案的问题。我们称这些问题为 *不可能* 解决的问题。另一方面，一些问题是可以解决的，但只有在极不可能的条件下才能解决。那些是
    *不太可能* 解决的问题。
- en: 'Chapter 7: Read Me'
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章：读我
- en: Cryptography
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密码学
- en: Thank goodness Xor was able to decode Colonel Trapp’s secret message! People
    have been encoding information into *ciphers* for others to decode since ancient
    times, and today, that science is called *cryptography*. Computers are great at
    creating and cracking secret codes, but you can do it, too!
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了 Xor，才能解码 Trapp 上校的秘密信息！自古以来，人们就一直在将信息编码成 *密码*，供别人解码，今天，这项科学叫做 *密码学*。计算机擅长创建和破解秘密代码，但你也能做到！
- en: 'One quick way to encode a message is by using a *substitution cipher*, which
    is when you replace each letter in your message with something else. For example,
    you could map each letter to a number:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 编码信息的一种快速方法是使用 *替换密码*，即用其他东西替换信息中的每个字母。例如，你可以将每个字母映射到一个数字：
- en: '| A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S
    | T | U | V | W | X | Y | Z |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S
    | T | U | V | W | X | Y | Z |'
- en: '| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16
    | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16
    | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 |'
- en: 'Following these rules, “Hello!” would become “7 4 11 11 14!” But you can replace
    those letters with anything you want: different numbers, other letters, or even
    symbols you create yourself. Make your own secret message and see if your friends
    can crack it. Or, share your cipher with your friends so you can send each other
    secret messages that no one else can read!'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这些规则，“Hello！”会变成“7 4 11 11 14！”。但你可以用任何你想要的东西替换这些字母：不同的数字、其他字母，甚至是你自己创造的符号。制作你自己的秘密信息，看看你的朋友能否破解它。或者，与你的朋友分享你的密码，这样你们就可以互相发送别人无法读取的秘密信息！
- en: 'Chapter 8: More Than One Way to Do It'
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章：不止一种方法
- en: Hugh Rustic
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Hugh Rustic
- en: If there are millions of possible ways to solve a difficult problem, searching
    for the best solution just isn’t practical. When that happens, scientists use
    *heuristics* to find an answer that is, as Hugh Rustic might say, “good enough.”
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果解决一个困难问题有数百万种可能的方式，那么寻找最佳解法就变得不现实。遇到这种情况时，科学家们使用 *启发式方法*，找到一个“足够好”的答案，正如 Hugh
    Rustic 可能所说的那样。
- en: Heuristic algorithms are based on experience—on things that we know will work—but
    they aren’t guaranteed to be the best possible solutions. For example, Hugh Rustic’s
    ants find many different paths on the map at random, and by following the scent
    trails of other ants. Scent trails eventually dry up if no new ants follow them.
    The shorter a path is, the more ants follow it, which makes the scent stronger.
    Over time, shorter paths become more popular and longer ones fade away. Based
    on what Laurie saw the ants do, she knows the path is short, even if it may not
    be the shortest, so she can use that as a heuristic to get home more quickly.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 启发式算法基于经验——基于我们知道有效的事物——但它们不能保证是最佳解决方案。例如，休·鲁斯蒂克的蚂蚁在地图上随机找到许多不同的路径，或者通过跟随其他蚂蚁的气味踪迹。气味踪迹最终会因为没有新蚂蚁跟随而干涸。路径越短，跟随的蚂蚁就越多，这使得气味更浓。随着时间的推移，短路径变得更加受欢迎，长路径逐渐消失。基于劳里看到蚂蚁的行为，她知道这条路径很短，尽管它可能不是最短的，所以她可以将其作为启发式方法，更快地回家。
- en: 'Something to think about: Is Hugh Rustic’s ant map through Userland the shortest
    possible path, or is it only a short-enough path? Can you do better? Try it!'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 值得思考的是：休·鲁斯蒂克的蚂蚁地图通过用户区的路径是最短的吗，还是仅仅是一条足够短的路径？你能做得更好吗？试试看！
- en: '![image with no caption](figs/web/171fig01.png.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](figs/web/171fig01.png.jpg)'
- en: 'Chapter 9: Don’t Repeat Yourself'
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章：不要重复自己
- en: Axiom
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公理
- en: Much as Xor said, an *axiom* is a rule or principle that you can’t prove, but
    that everyone accepts as true because it just makes sense. Mathematicians, scientists,
    and anyone who wants to prove anything might start their argument with an axiom.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 正如Xor所说，*公理*是一个你无法证明的规则或原则，但每个人都接受它，因为它自然而然地成立。数学家、科学家以及任何想要证明某些事物的人可能会以公理为出发点。
- en: 'For example, the idea that *part* of a thing is always smaller than the *entire*
    thing is an axiom. If you cut a slice out of a pie, there’s no way that slice
    can be bigger than the whole pie. The same rule applies to numbers: if you take
    2 away from 5, you’re left holding a 2 and a 3, and neither is more than 5.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，“部分总是小于整体”这一想法就是一个公理。如果你从一个派中切下一块，它不可能比整个派还要大。同样的规则也适用于数字：如果你从5中减去2，你手里剩下的是2和3，而它们都不大于5。
- en: '![image with no caption](figs/web/172fig01.png.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](figs/web/172fig01.png.jpg)'
- en: 'Chapter 10: A Well-Timed Entrance'
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章：恰到好处的出现
- en: Timing Attack
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时序攻击
- en: Jane Hecate checks each letter of Laurie’s password guesses one by one until
    there is a mismatch with the correct password. The more letters Laurie gets correct
    in a row, the longer it takes for Jane to find a mismatch, which tells Laurie
    how close her guess is to being right.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 简·赫卡特逐一检查劳里的密码猜测，直到与正确密码不匹配为止。劳里连续猜对的字母越多，简发现不匹配所花的时间就越长，这也让劳里知道她的猜测有多接近正确。
- en: Computer scientists call this a *timing attack* because the guesser watches
    the amount of time it takes to check each incorrect try and makes new guesses
    based on that. Many people who should know better make Jane’s mistake and leak
    information about the secret they are keeping.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机科学家称这种攻击为*时序攻击*，因为猜测者观察每次检查错误尝试所花费的时间，并根据此做出新的猜测。许多人本应知道更好，却像简一样犯错误，泄露了他们所保守的秘密。
- en: 'Chapter 11: A Fair Exchange'
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章：公平的交换
- en: A Fair Flip
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公平的抛掷
- en: As Trent Escrow explains to Laurie, you can guarantee a fifty-fifty chance of
    flipping heads or tails on an unbalanced coin—if you flip it twice. If you get
    Heads-Tails, then Heads is your answer. If you get Tails-Heads, then Tails is
    your answer. At least half of the time, you’ll probably flip Heads-Heads or Tails-Tails;
    in those cases, just start over. On average, you’ll need at least three coin flips
    to get a Fair flip. Try it! See also *Fair Coin* ([Chapter 6](ch07.html "Chapter 6. A
    Tinker’s Trade"); [Hamiltonian Cycle](pr03.html#hamiltonian_cycle "Hamiltonian
    Cycle")).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 正如特伦特·埃斯克罗向劳里解释的那样，你可以通过抛两次不平衡的硬币，保证50%的机会抛出正面或反面。如果你抛出的是正面-反面，那么正面就是你的答案；如果你抛出的是反面-正面，那么反面就是你的答案。至少有一半的概率你会抛出正面-正面或反面-反面；在这种情况下，重新开始即可。平均而言，你至少需要抛三次硬币才能得到公平的抛掷。试试看！另见*公平硬币*（[第6章](ch07.html
    "第6章. 工匠的交易")；[哈密尔顿回路](pr03.html#hamiltonian_cycle "哈密尔顿回路")）。
- en: 'Chapter 12: An Improbable Twist'
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章：一个不太可能的转折
- en: Attempted Mythology
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试的神话
- en: . . . is not actually a crime in any jurisdiction, and that’s a good thing!
    Otherwise, no one would be allowed to write any stories, and *myths* are just
    stories that have been passed down to us through many generations. Some myths
    try to explain how the world works, and some are just for fun. Use your imagination,
    and maybe someday, you’ll write a story that becomes part of a future mythology.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: . . . 在任何管辖区内其实都不算犯罪，这是件好事！否则，谁也不可以写任何故事，而*神话*不过是代代相传下来的故事。一些神话试图解释世界如何运作，而另一些则只是为了娱乐。发挥你的想象力，也许有一天，你会写出一篇成为未来神话的一部分的故事。
- en: The *Doppelganger*
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*双胞胎*'
- en: 'The *Doppelganger*’s tale is based on a classic question in philosophy: If
    you replace all of the parts of a boat, do you still have the same boat? Winsome
    doesn’t think so. She claims she stole the *Doppelganger* from its owner piece
    by piece and left him with a copy! But what do you think? If you reassemble the
    old parts, which boat is the original? What if you replaced only half of the parts?'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '*双胞胎*的故事基于一个经典的哲学问题：如果你替换掉一艘船的所有部件，您还拥有原来的船吗？温索姆认为不是。她声称她一点一点地把*双胞胎*从原主人的手中偷走，最终把他留下一艘复制品！但你怎么看呢？如果你重新组装旧的部件，哪艘船才是原始的？如果只替换一半的部件呢？'
- en: 'Chapter 13: The Game of Life'
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章：生命游戏
- en: Gliders
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滑翔机
- en: '*Conway’s Game of Life* is a simulation of how a population of creatures might
    change over time. Computer scientists (and plenty of other scientists) use the
    Game of Life to study patterns based on simple rules. You can try it out yourself
    with a pencil and paper! First, grab some graph paper or draw a grid like this:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '*康威的生命游戏*是对一群生物如何随着时间变化的模拟。计算机科学家（以及许多其他科学家）利用生命游戏研究基于简单规则的图案。你可以用铅笔和纸自己试试！首先，拿些图表纸，或者像这样画一个网格：'
- en: '![image with no caption](figs/web/174fig01.png.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![无标题图片](figs/web/174fig01.png.jpg)'
- en: 'Now fill in some squares in the grid. Here’s one example:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在填充一些网格中的方格。这里有一个例子：
- en: '![image with no caption](figs/web/174fig02.png.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![无标题图片](figs/web/174fig02.png.jpg)'
- en: 'After you’ve filled in some squares, you just have to follow a few simple rules
    to play the game and change your pattern:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 填充一些方格后，你只需遵循几个简单的规则来玩游戏并改变你的图案：
- en: If a filled-in square has more than three filled-in neighbors, then it dies.
    Make it blank.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一个填充的方格有超过三个填充的邻居，那么它就会死亡。把它变成空白。
- en: If a filled-in square has only one or zero filled-in neighbors, it dies. Make
    it blank.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一个填充的方格只有一个或零个填充的邻居，它就会死亡。把它变成空白。
- en: If a filled-in square has two or three filled-in neighbors, it survives! Leave
    it colored in.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一个填充的方格有两个或三个填充的邻居，它就会存活！保持它涂上颜色。
- en: If a blank square has three filled-in neighbors, it comes to life! Color it
    in.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一个空白的方格有三个填充的邻居，它就会复活！把它涂上颜色。
- en: 'Follow these rules to color in a new grid. Our sample grid would turn out like
    this after one round:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这些规则来给新的网格上色。经过一轮后，我们的示例网格会变成这样：
- en: '![image with no caption](figs/web/175fig01.png.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![无标题图片](figs/web/175fig01.png.jpg)'
- en: 'These patterns come in many types. *Gliders* move around. *Blinkers* turn on
    and off, like traffic lights. Some patterns even create other patterns as they
    go. This particular grid pattern repeats:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图案有很多种类型。*滑翔机*会四处移动。*闪烁器*会像交通信号灯一样开关。某些图案在移动过程中甚至会生成其他图案。这个特定的网格图案会重复：
- en: '![image with no caption](figs/web/175fig02.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![无标题图片](figs/web/175fig02.png)'
- en: 'Chapter 14: In the Abstract'
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章：抽象思维
- en: Five Whys
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 五个为什么
- en: When scientists want to get to the root cause of a confusing problem, they’ll
    ask Why questions until they find out exactly Where their experiment went Wrong.
    But you don’t have to leave that kind of thinking to the scientists.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当科学家们想要找出一个复杂问题的根本原因时，他们会不断问“为什么”，直到弄清楚实验的哪里出了错。但你不必把这种思维方式留给科学家们。
- en: Play Five Whys the next time you need to figure out the solution to a problem
    of your own. There are a lot of mental games you can try to help you avoid or
    learn from mistakes. Another good rule is “Never worry alone.” Grab a friend if
    you’re puzzled—when you work together, you can solve any problem!
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 下次遇到自己需要解决的问题时，玩一下“五个为什么”。有许多心理游戏可以帮助你避免或从错误中学习。另一个好规则是：“永远不要独自担忧。”如果你感到困惑，就找个朋友一起解决问题——当你们一起合作时，任何问题都能解决！
- en: '![image with no caption](figs/web/175fig03.png.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![无标题图片](figs/web/175fig03.png.jpg)'
- en: 'Chapter 15: Cleverness When It Counts'
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第15章：关键时刻的聪明才智
- en: Following the Byzantine Process
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跟随拜占庭过程
- en: The word *Byzantine* can describe any extremely long and complicated process.
    Fortunately, Laurie was able to get all of the signatures she needed by helping
    the three generals, and she actually solved each of their very different problems
    similarly.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '*拜占庭*这个词可以形容任何极其复杂和漫长的过程。幸运的是，劳里通过帮助三位将军，她成功地获得了所有需要的签名，并且实际上她以类似的方式解决了每个将军非常不同的问题。'
- en: 'Laurie’s algorithm for moving the wolf, the goat, and the mandelbroccoli uses
    a *counting argument*. The idea behind a counting argument is that you can solve
    some problems by ignoring unimportant differences between things and counting
    only how many there are. For example:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 劳里用于移动狼、山羊和曼德尔花菜的算法使用了*计数论证*。计数论证的思想是，通过忽略事物之间不重要的差异，仅仅计算它们有多少个，就能解决一些问题。例如：
- en: Everyone wants to use General Euripides’s books all at once. But reader or writer,
    only *one* person can use any given book at a time.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个人都想同时使用欧里庇得斯将军的书。但无论是读者还是作者，每次只有*一个*人能够使用某本书。
- en: General Darius was so concerned with getting the mandel-broccoli, the wolf,
    and the goat across the stream that he didn’t think of counting backward—of bringing
    the goat across *multiple times*. But mandelbroccoli or wolf, as long as you don’t
    leave the goat alone with it, everything works out.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 达里乌斯将军如此专注于让曼德尔花菜、狼和山羊过河，以至于他没有想到倒数——多次将山羊带过去。但无论是曼德尔花菜还是狼，只要不让山羊和它单独待着，一切都会顺利进行。
- en: 'Sometimes it’s the opposite: you have to count the same thing different ways
    to see if they add up. General Case stopped counting posts after he hit 100 feet
    of fence; he wasn’t thinking about holding up the last length! Count the gaps
    *between* the posts and you get 10\. Count the *posts*, and you get 11.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 有时情况恰恰相反：你必须以不同的方式计算相同的事物，看看它们是否加起来。总数在100英尺的围栏后停止了；他没考虑到最后一段的保持！计算*柱子之间的间隙*，你得到10。计算*柱子*，你得到11。
- en: 'When Tinker tells Laurie to count paths that are mirror images of other paths
    (like BCD and DCB) as one, he is also using a counting argument. This rule cuts
    the number of paths through Userland in half. But even cutting the number in half
    doesn’t help much with the Traveling Salesman problem: a Very Big Number divided
    by a small number is still a Very Big Number!'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 当廷克告诉劳里将镜像路径（比如BCD和DCB）视为一条时，他也是在使用计数论证。这条规则将通过用户地带的路径数减半。但即使把路径数减半，在旅行商问题中也没什么帮助：一个非常大的数字除以一个小数字，结果还是一个非常大的数字！
- en: Mandelbroccoli
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 曼德尔花菜
- en: Mandelbroccoli does exist in our world, and it’s the weirdest-looking vegetable
    I know. At the market, it’s called *Romanesco*, and it looks a lot like a fractal.
    *Fractals* are patterns that start with one shape and repeat it infinitely, smaller
    and smaller, according to a set of rules.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 曼德尔花菜确实存在于我们的世界，它是我所知道的最奇特的蔬菜。在市场上，它叫做*罗马花椰菜*，看起来很像一个分形图案。*分形*是从一个形状开始，并根据一套规则无限重复，越来越小的模式。
- en: For example, draw an equilateral triangle (a triangle with three sides that
    are all the same length) inside another equilateral triangle. Make sure each point
    from the second triangle touches the middle of a side from the first! This should
    create four smaller, but identical, triangles inside the original.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在一个等边三角形内画另一个等边三角形（一个三条边长度相等的三角形）。确保第二个三角形的每个点都触碰第一个三角形的边中点！这应该会在原始三角形内创建四个较小、但相同的三角形。
- en: Now, draw an equilateral triangle inside each of those, following the same rules,
    and repeat until you can’t fit any more triangles. You should have something like
    the fractal pattern shown here. See also *Infinity* ([Chapter 4](ch05.html "Chapter 4. What
    the Tortoise Said to Laurie"); [Infinity](pr03.html#infinity "Infinity")).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在每一个这样的图案内画一个等边三角形，遵循相同的规则，并重复，直到你无法再容纳更多的三角形。你应该会得到类似这里展示的分形图案。另见*无限*（[第4章](ch05.html
    "第4章. 乌龟对劳里的话"); [Infinity](pr03.html#infinity "Infinity")）。
- en: '![image with no caption](figs/web/177fig01.png.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图像](figs/web/177fig01.png.jpg)'
- en: '*“Sierpinski triangle evolution.” Licensed under public domain via Wikimedia
    Commons.*'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '*“谢尔宾斯基三角形演化。” 通过维基共享资源根据公有领域授权使用。*'
- en: 'Chapter 16: A Change of Plan'
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第16章：计划的改变
- en: Bruto Fuerza
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布鲁托·福尔萨
- en: This lighthouse keeper thinks the answer to every problem is more power and
    brute force. Even if he builds a lighthouse twice as tall, twice as wide, and
    twice as thick as the one that failed, the new one will still fall over eventually
    because he’s following the same plan.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这个灯塔看守认为解决每个问题的方法就是更多的力量和蛮力。即使他建造的灯塔是原来失败的灯塔的两倍高、两倍宽、两倍厚，新的灯塔最终仍然会倒塌，因为他还是遵循着相同的计划。
- en: 'Yet in his own way, Bruto is right when he decides to build a pyramid instead.
    Pyramids are much sturdier, and if you pile on enough bricks, you could eventually
    make a pyramid tall enough to be a lighthouse. But Bruto’s plan has enormous costs:
    he needs a lot more bricks, a lot more land to build on, and a lot more time to
    build.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，从某种程度上来说，布鲁托的决定是对的，他选择建造金字塔。金字塔更加坚固，如果你堆叠足够多的砖块，最终你可以建造一个足够高的金字塔，甚至可以成为灯塔。但布鲁托的计划也有巨大的成本：他需要更多的砖块、更大的土地来建造、以及更多的时间来完成建造。
- en: '![image with no caption](figs/web/178fig01.png.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![没有说明的图片](figs/web/178fig01.png.jpg)'
- en: 'Some programmers approach problems this way, too, but putting all your resources
    into a brute-force attempt isn’t always a sensible answer. When your algorithm
    collapses, don’t just pile on more bricks! Change your point of view, as Laurie
    did with the generals on the Island of Byzantium, and you’ll find a more effective
    solution. See also *Five Whys* ([Chapter 14](ch15.html "Chapter 14. In the Abstract");
    [Chapter 14: In the Abstract](pr03.html#chapter_14_in_the_abstract "Chapter 14:
    In the Abstract")).'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 一些程序员也会用这种方式解决问题，但把所有的资源投入到蛮力尝试中并不总是明智的。当你的算法崩溃时，不要只是堆砌更多的砖块！改变你的视角，就像劳里在拜占庭岛上对待将军们一样，你会找到更有效的解决方案。另见
    *五个为什么* ([第14章](ch15.html "第14章. 在抽象中"); [第14章：在抽象中](pr03.html#chapter_14_in_the_abstract
    "第14章：在抽象中"))。
- en: 'Chapter 17: Chasing Elegants'
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第17章：追寻优雅
- en: Elegants
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优雅
- en: They don’t really exist, but don’t you wish they did?
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 它们并不存在，但你不希望它们存在吗？
- en: Fresnel
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 费涅尔
- en: The Fresnel whom Laurie meets on Elegant Island is named after a real scientist
    named Augustin-Jean Fresnel, who invented a way of focusing big lighthouse lights
    with only a little bit of glass. He knew that lenses didn’t have to be large and
    thick to focus a beam of light, so instead of one huge piece of glass, the *Fresnel
    lens* is an arrangement of small pieces of glass at different angles. Lighthouses
    still use this type of lens today.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 劳里在优雅岛上遇到的费涅尔是以一位真实的科学家奥古斯丁-让·费涅尔（Augustin-Jean Fresnel）的名字命名的，他发明了一种仅用少量玻璃就能聚焦大灯塔光源的方法。他知道，透镜不需要很大很厚才能聚焦光束，因此，费涅尔透镜并不是一块巨大的玻璃，而是由多个小块玻璃以不同角度排列组合而成。今天，灯塔仍然使用这种类型的透镜。
- en: Decomposing
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分解
- en: '*Decomposing* starts with a big idea and breaks it into smaller, easier-to-understand
    pieces. When you know how to solve each smaller piece, you can combine those ideas
    to solve a bigger problem. One good way to take an idea apart is to describe it
    without using its name, just as Laurie did when she said you could also call a
    turtle a “Green Round animal with a Shell.”'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '*分解* 从一个大想法开始，然后将其拆分成更小、更易于理解的部分。当你知道如何解决每个小部分时，你可以将这些想法组合起来解决更大的问题。一种很好的分解方法是描述它，而不使用它的名称，就像劳里说的，你也可以称一个乌龟为“绿色圆形的带壳动物”。'
- en: 'Even simple ideas, like the numbers 3 and 4, can be decomposed into simpler
    ideas. Start with 0 and then add 1\. Then add 1 again, and so on:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是简单的想法，比如数字3和4，也可以分解成更简单的想法。从0开始，然后加上1，再加1，依此类推：
- en: 0 = 0
  id: totrans-233
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 0 = 0
- en: ''
  id: totrans-234
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 1 = 0 + 1
  id: totrans-235
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1 = 0 + 1
- en: ''
  id: totrans-236
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 2 = 0 + 1 + 1
  id: totrans-237
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 2 = 0 + 1 + 1
- en: ''
  id: totrans-238
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 3 = 0 + 1 + 1 + 1
  id: totrans-239
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 3 = 0 + 1 + 1 + 1
- en: 'If you really wanted to, you could just use 0 and 1 and ditch all of the other
    numbers. I don’t recommend it—you’ll use up a lot of paper!—but it’s a perfectly
    valid way to do math. For example, let’s break an addition problem down into nothing
    but 0s and 1s:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你真的想要，你可以只使用0和1，抛弃其他所有的数字。我不建议这样做——你会用掉大量的纸张！——但这确实是一种完全有效的数学方法。例如，我们可以把加法问题分解成只有0和1的形式：
- en: 2 + 2 = 4
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 2 + 2 = 4
- en: would become
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 将变成
- en: (0 + 1 + 1) + (0 + 1 + 1) = (0 + 1 + 1 + 1 + 1)
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: (0 + 1 + 1) + (0 + 1 + 1) = (0 + 1 + 1 + 1 + 1)
- en: Relating
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关联
- en: When you *relate* two ideas, you put them side by side and compare them, like
    Fresnel’s balloon and a lighthouse. With numbers, you use the less-than sign (<)
    to show that the number on the left is smaller than the one on the right. You
    use the equal sign (=) to show that the value on the left is equal to the value
    on the right.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 当你*关联*两个想法时，你将它们并排放置并进行比较，就像费涅尔的气球和灯塔一样。对于数字，你使用小于符号（<）表示左边的数字小于右边的数字。你使用等号（=）表示左边的值等于右边的值。
- en: 2 < 3
  id: totrans-246
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 2 < 3
- en: ''
  id: totrans-247
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 2 × 3 = 6
  id: totrans-248
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 2 × 3 = 6
- en: 'You can relate things besides numbers, though that means some relations are
    less precise. Fresnel’s balloon isn’t *exactly* a lighthouse, but it’s *like*
    a lighthouse. We expect a lighthouse to have a way for people to climb up high,
    somewhere to stand when they get there, and a big light that faraway ships can
    see. Fresnel’s balloon technically has all of those things:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将除了数字的其他事物联系起来，尽管这意味着某些关系可能不那么精确。弗涅尔的气球不是*完全*一个灯塔，但它*像*一个灯塔。我们期待灯塔有一个让人们能够爬上去的地方，一个让他们站在那里并且能看到的高台，还有一个远方的船只可以看到的大灯。弗涅尔的气球在技术上具备了这些功能：
- en: Fresnel’s balloon *is-like-a* lighthouse.
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弗涅尔的气球*像是*灯塔。
- en: (elevator, balloon, light) *is-like-a* (staircase, tower, light).
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: （电梯，气球，光）*像是*（楼梯，塔楼，光）。
- en: 'Chapter 18: Many Hands Make Light Work'
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第18章：众人拾柴火焰高
- en: Network
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络
- en: Winsome created the Lighthouse Network to let people in Userland send messages
    faster. In computer science, a *network* is a group of computers that are connected
    to one another so that they can share information. Those computers could be connected
    through wires or even the air!
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: Winsome 创建了灯塔网络，让用户世界中的人们能够更快地发送信息。在计算机科学中，*网络*是指一组相互连接的计算机，它们可以共享信息。这些计算机可以通过电缆连接，甚至通过空气连接！
- en: Baudot
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 博多
- en: 'In 1870, Émile Baudot invented a code that represented letters with different
    groups of 1s and 0s. This code was meant to let people share messages using electricity:
    if you have a switch, the power can either be on (1) or off (0). Naturally, Baudot
    named this code after himself. See *Bach’s Laws of Eponymy* ([Chapter 2](ch03.html
    "Chapter 2. Sense and Sensibleness"); [Bach’s First Law of Eponymy](pr03.html#bachapostrophes_first_law_of_eponymy
    "Bach’s First Law of Eponymy")).'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 1870年，埃米尔·博多发明了一种用不同的1和0的组合来表示字母的编码。这种编码旨在通过电力让人们共享信息：如果你有一个开关，电源可以是开（1）或关（0）。自然地，博多将这种编码以自己的名字命名。参见*巴赫的命名法则*（[第2章](ch03.html
    "第2章. 理性与感性"); [巴赫的命名法则第一条](pr03.html#bachapostrophes_first_law_of_eponymy "巴赫的命名法则第一条")）。
- en: We don’t use the Baudot code very often in the real world, but Ping, Fresnel,
    and the other members of Winsome’s Lighthouse Network use it to send messages
    with their lights, which can also be on (FLASH) or off (FLOOSH).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，我们不常使用博多编码，但平、弗涅尔和其他灯塔网络成员用它通过他们的灯光发送消息，灯光也可以开（闪光）或关（熄灭）。
- en: Here’s the Baudot code and the letter each number stands for, so you can make
    your own Lighthouse Network. Grab some friends and some flashlights, and send
    each other messages!
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这是博多编码和每个数字所代表的字母，所以你也可以创建自己的灯塔网络。找一些朋友和手电筒，互相发送消息！
- en: '| Letter | Baudot code | Letter | Baudot code |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| 字母 | 博多编码 | 字母 | 博多编码 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| A | 11000 | N | 00110 |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| A | 11000 | N | 00110 |'
- en: '| B | 10011 | O | 00011 |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| B | 10011 | O | 00011 |'
- en: '| C | 01110 | P | 01101 |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| C | 01110 | P | 01101 |'
- en: '| D | 10010 | Q | 11101 |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| D | 10010 | Q | 11101 |'
- en: '| E | 10000 | R | 01010 |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| E | 10000 | R | 01010 |'
- en: '| F | 10110 | S | 10100 |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| F | 10110 | S | 10100 |'
- en: '| G | 01011 | T | 00001 |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| G | 01011 | T | 00001 |'
- en: '| H | 00101 | U | 11100 |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| H | 00101 | U | 11100 |'
- en: '| I | 01100 | V | 01111 |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| I | 01100 | V | 01111 |'
- en: '| J | 11010 | W | 11001 |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| J | 11010 | W | 11001 |'
- en: '| K | 11110 | X | 10111 |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| K | 11110 | X | 10111 |'
- en: '| L | 01001 | Y | 10101 |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| L | 01001 | Y | 10101 |'
- en: '| M | 00111 | Z | 10001 |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| M | 00111 | Z | 10001 |'
- en: 'Chapter 19: Branching Out'
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第19章：分支
- en: The Garden of Forking Paths
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 岔路花园
- en: The Garden has 16,777,216 paths, but in the end, Laurie and Xor each found exactly
    one path that made sense for them. The number of possible paths became so small
    so fast because at each fork, Laurie answered an either/or question, and that
    cut the number of possible paths in half.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这个花园有16,777,216条路径，但最终，劳里和Xor各自找到了一个适合他们的路径。可能的路径数量之所以迅速缩小，是因为在每个岔路口，劳里都回答了一个二选一的问题，这将可能的路径数量减半。
- en: '![image with no caption](figs/web/181fig01.png.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](figs/web/181fig01.png.jpg)'
- en: Laurie’s journey through the Garden of Forking Paths is a lot like what computer
    scientists call a *binary search*, which programmers use to look for a single
    piece of information in a huge list quickly. When something is binary, it has
    only two parts—just like the questions the Garden asked Laurie.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 劳里的“岔路花园”之旅很像计算机科学家所称的*二分查找*，程序员用它来快速在一个庞大的列表中寻找一条信息。当某物是二进制时，它只有两个部分——就像花园中劳里所遇到的问题。
- en: This little chart has four possible outcomes. If you answer the question “A
    or B?” with A, you cut that number in half, leaving only two possibilities. Then,
    at A, you have to answer “C or D?” Whichever option you pick, you’re cutting the
    number in half again, to one choice.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这个小图表有四种可能的结果。如果你回答问题“是A还是B？”选择A，你将把数字减半，剩下只有两种可能性。然后，在A点，你必须回答“是C还是D？”无论你选择哪个选项，你都将再次将数字减半，直到只剩下一个选择。
- en: '![image with no caption](figs/web/182fig01.png.jpg)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![无标题图片](figs/web/182fig01.png.jpg)'
- en: 'In a binary search, you would ask similar questions about your giant list of
    information; eventually, you’d cut the possibilities down to just one. Try it
    the next time you play Twenty Questions! If you choose your questions (or answers)
    carefully, you can arrive at virtually anything in only 20 or 30 steps. See also
    *Recursion* ([Chapter 4](ch05.html "Chapter 4. What the Tortoise Said to Laurie");
    [Chapter 4: What the Tortoise Said to Laurie](pr03.html#chapter_4_what_the_tortoise_said_to_laur
    "Chapter 4: What the Tortoise Said to Laurie")).'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '在二分查找中，你会对你的巨大信息列表提出类似的问题；最终，你将把可能性缩小到只有一个。下次玩“二十个问题”时试试看！如果你小心选择问题（或答案），你可以在仅仅20或30步之内找出几乎任何东西。参见*递归*（[第4章](ch05.html
    "第4章. 乌龟对劳里的话"); [第4章: 乌龟对劳里的话](pr03.html#chapter_4_what_the_tortoise_said_to_laur
    "第4章: 乌龟对劳里的话")）。'
- en: 'Chapter 21: One More Thing'
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第21章：再说一句
- en: Telegraph
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电报
- en: Captain Kevin Kelvin is laying wire along the ocean to create a *telegraph*
    network. Telegraph systems let people send messages to one another over long distances
    without actually sending a physical object. Winsome’s Lighthouse Network is also
    a type of telegraph!
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 凯文·开尔文船长正在沿海铺设电线，以建立一个*电报*网络。电报系统使人们能够在不发送实物的情况下，长距离传递消息。温斯姆灯塔网络也是一种电报！
- en: In Kevin’s case, letters are represented by collections of sounds, not lights.
    Different combinations of beeps and bloops represent different letters, and those
    beeps and bloops are made when Kevin’s assistant presses a button attached to
    the other end of the wire. The telegraph is just one of many systems people have
    used throughout history to talk to one another.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在凯文的案例中，字母是通过一系列声音来表示的，而不是通过光。不同的“哔哔声”和“嘟嘟声”代表不同的字母，这些“哔哔声”和“嘟嘟声”是在凯文的助手按下连接到电线另一端的按钮时发出的。电报只是人类历史上用于相互沟通的众多系统之一。
- en: Kelvin Scale
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开尔文温标
- en: Lord Kelvin was a real engineer who worked on telegraphs, but he’s best known
    for creating the Kelvin scale to measure temperature. Unlike other temperature
    scales, the Kelvin scale doesn’t use numbers less than zero, so the coldest temperature
    that anything can be is called *absolute zero*. Water freezes into ice at a whopping
    273.16 Kelvin!
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 开尔文勋爵是位真正的工程师，曾从事电报工作，但他最著名的是创建了用来测量温度的开尔文温标。与其他温度刻度不同，开尔文温标不使用零以下的数字，因此任何物体能达到的最低温度被称为*绝对零度*。水在273.16开尔文时结冰！
