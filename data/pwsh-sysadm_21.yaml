- en: '18'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '18'
- en: CREATING AND CONFIGURING A SQL SERVER
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 创建和配置SQL服务器
- en: '![Images](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common.jpg)'
- en: 'So far, you’ve created a module that can create a VM, attach a VHD to it, install
    Windows, and create (and populate) an Active Directory forest. Let’s add one more
    thing to that list: deploying a SQL server. With a VM provisioned, an OS installed,
    and a domain controller set up, you’ve done most of the hard work! Now you just
    need to leverage your existing functions and, with a few tweaks, you’ll be able
    to install a SQL server.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经创建了一个可以创建虚拟机、附加VHD、安装Windows并创建（和填充）活动目录森林的模块。让我们再增加一项：部署SQL服务器。有了一个虚拟机、安装了操作系统并设置了域控制器，你已经完成了大部分的繁重工作！现在你只需利用现有的功能，通过少许调整，就能安装SQL服务器。
- en: Prerequisites
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 先决条件
- en: Throughout this chapter, I’m assuming that you’ve been following along in [Part
    III](part3.xhtml#part3) and have created at least one VM called LABDC that’s running
    on your Hyper-V host. This VM will be a domain controller, and since you’ll again
    be connecting to multiple VMs via PowerShell Direct, you’ll need the domain credential
    saved to the Hyper-V host (check out [Chapter 17](ch17.xhtml#ch17) to see how
    we did this).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我假设你已经在[第三部分](part3.xhtml#part3)中跟随操作并创建了至少一个名为LABDC的虚拟机，该虚拟机正在你的Hyper-V主机上运行。这个虚拟机将作为域控制器运行，由于你将通过PowerShell
    Direct再次连接到多个虚拟机，因此你需要将域凭据保存到Hyper-V主机（查看[第17章](ch17.xhtml#ch17)以了解我们是如何做到这一点的）。
- en: You’ll use a script called *ManuallyCreatingASqlServer.ps1* (found in this chapter’s
    resources) to explain how to properly automate the deploying of a SQL server.
    This script contains all the rough steps covered in this chapter and will be a
    great resource to reference as you progress through this chapter.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用一个名为*ManuallyCreatingASqlServer.ps1*的脚本（可以在本章资源中找到）来解释如何正确地自动化部署SQL服务器。这个脚本包含了本章中介绍的所有基本步骤，是你在完成本章过程中一个很好的参考资源。
- en: As always, please run the Prerequisites test script included with this chapter
    to ensure you meet all the expected prerequisites.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，请运行本章附带的先决条件测试脚本，以确保你满足所有预期的先决条件。
- en: Creating the Virtual Machine
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建虚拟机
- en: 'When you think *SQL Server*, you probably think about things like databases,
    jobs, and tables. But before you can even get there, a ton of background work
    has to be done: for starters, every SQL database must exist on a server, every
    server needs an operating system, and every operating system needs a physical
    or virtual machine to be installed on. Luckily, you’ve spent the past few chapters
    setting up the exact environment you need to create a SQL server.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想到*SQL Server*时，你可能会想到数据库、作业和表等内容。但在你能够处理这些内容之前，必须完成大量的后台工作：首先，每个SQL数据库都必须存在于服务器上，每个服务器需要一个操作系统，每个操作系统需要一个物理或虚拟机来安装。幸运的是，你在过去的几章中已经设置了创建SQL服务器所需的确切环境。
- en: A good automator starts every project by breaking down all the required dependencies.
    They automate around those dependencies, and then on top of them. This process
    results in a modular, decoupled architecture that has the flexibility to be changed
    at any time with relative ease.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一位优秀的自动化工程师会从分解所有必要的依赖项开始每个项目。他们围绕这些依赖项进行自动化，然后再基于它们进行扩展。这个过程会导致一个模块化、解耦的架构，具有随时相对轻松地进行更改的灵活性。
- en: What you’re ultimately looking for is a single function that uses a standard
    configuration to bring up any number of SQL servers. But to get there, you have
    to think about this project in layers. The first layer is the virtual machine.
    Let’s handle that first.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最终你需要的是一个函数，它使用标准配置启动任意数量的SQL服务器。但要实现这一点，你必须分层思考这个项目。第一层是虚拟机。我们先处理这个。
- en: 'Since you already have a function in your PowerLab module that’ll build a VM,
    you’ll use that. Because all lab environments you build are going to be the same,
    and because you defined many of the parameters needed to provision a new VM as
    default parameter values in the `New-PowerLabVM` function, the only value you
    need to pass to this function is the VM name:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经在PowerLab模块中有一个构建虚拟机的函数，你就可以使用它。因为你构建的所有实验室环境都将是相同的，而且你已经将创建新虚拟机所需的许多参数定义为`New-PowerLabVM`函数的默认参数值，所以你唯一需要传递给这个函数的就是虚拟机的名称：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Installing the Operating System
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装操作系统
- en: 'Just like that, you have a VM ready to go. That was easy. Let’s do it again.
    Use the command you wrote in [Chapter 16](ch16.xhtml#ch16) to install Windows
    on your VM:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，你有了一个准备好的虚拟机。那还真是简单。我们再做一次。使用你在[第16章](ch16.xhtml#ch16)中编写的命令在虚拟机上安装Windows：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Oops! You used the existing `Install-PowerLabOperatingSystem` function in the
    PowerLab module to install the operating system on the soon-to-be SQL server,
    but it failed because it was referencing a file called *SQLSRV.xml* in the module
    folder. When you built this function, you assumed there would be an *.xml* file
    in the module folder. Problems like path discrepancies and files that don’t exist
    are common when building large automation projects like this. You’ll have many
    dependencies that you must address. The only way to flush out all these bugs is
    to execute the code as many times as possible in as many scenarios as possible.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！你使用了 PowerLab 模块中现有的`Install-PowerLabOperatingSystem`函数来安装即将成为 SQL 服务器的操作系统，但它失败了，因为它引用了模块文件夹中的一个名为*SQLSRV.xml*的文件。当你构建这个函数时，你假设模块文件夹中会有一个*.xml*文件。在构建像这样的庞大自动化项目时，路径不一致和文件不存在等问题是常见的。你会有很多依赖项需要处理。解决这些错误的唯一方法就是尽可能多地执行代码，尽可能多地测试不同场景。
- en: Adding a Windows Unattended Answer File
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一个 Windows 无人值守应答文件
- en: 'The `Install-PowerLabOperatingSystem` function was assuming there would always
    be a file called *.xml* in the PowerLab module folder. This means that before
    you deploy a new server, you have to first ensure that you have this file in the
    right place. Luckily, now that you created the LABDC unattended answer file, this
    should be easy. The first thing you have to do is copy the already-existing *LABDC.xml*
    file and call it *SQLSRV.xml*:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`Install-PowerLabOperatingSystem`函数假设 PowerLab 模块文件夹中总是会有一个名为*.xml*的文件。这意味着，在部署新服务器之前，你必须先确保将该文件放在正确的位置。幸运的是，现在你已经创建了
    LABDC 无人值守应答文件，这应该很容易。你首先需要做的是复制现有的*LABDC.xml*文件，并将其命名为*SQLSRV.xml*：'
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once you’ve made a copy, you have to make a few tweaks: the name of the host
    and the IP address. Since you haven’t deployed a DHCP server, you’ll use static
    IP addresses and have to change them (otherwise you’d have to change just the
    server name).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你复制了，接下来你需要做一些调整：主机名和 IP 地址。由于你没有部署 DHCP 服务器，所以你将使用静态 IP 地址并必须更改它们（否则你只需要更改服务器名称）。
- en: 'Open *C:\Program Files\WindowsPowerShell\Modules\SQLSRV.xml* and look for the
    spot that defines the hostname. Once you find it, change the `ComputerName` value.
    It should look similar to this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 *C:\Program Files\WindowsPowerShell\Modules\SQLSRV.xml*，并查找定义主机名的部分。一旦找到它，修改`ComputerName`值。它应该类似于下面这样：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, look for the `UnicastIPAddress` node. It will look like the following
    code. Note I’m using a 10.0.0.0/24 network and have chosen to make my SQL server
    have the IP address of 10.0.0.101:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，查找`UnicastIPAddress`节点。它看起来像以下代码。请注意，我使用的是一个10.0.0.0/24的网络，并选择让我的 SQL 服务器的
    IP 地址为10.0.0.101：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save the *SQLSRV.xml* file and try running the `Install-PowerLabOperatingSystem`
    command again. At this time, your command should run successfully and should deploy
    Windows Server 2016 to your SQLSRV VM.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 保存*SQLSRV.xml*文件，并再次尝试运行`Install-PowerLabOperatingSystem`命令。此时，你的命令应该能够成功运行，并将
    Windows Server 2016 部署到你的 SQLSRV 虚拟机上。
- en: Adding the SQL Server to a Domain
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 SQL Server 添加到域
- en: 'You just installed the operating system, so now you need to start up the VM.
    This is easy enough using the `Start-VM` cmdlet:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚安装了操作系统，现在需要启动虚拟机。使用`Start-VM` cmdlet 很容易做到：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now you have to wait for the VM to come online—this could take a while. How
    long? That depends; there are a lot of variables. One thing you can do is use
    a `while` loop to continually check whether you can connect to the VM.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你必须等待虚拟机上线——这可能需要一些时间。需要多久？这取决于很多变量。你可以做的一件事是使用`while`循环不断检查是否能够连接到虚拟机。
- en: Let’s walk though how to do this. In [Listing 18-1](ch18.xhtml#ch18list1), you’re
    grabbing the locally saved credential for the VM. Once you have that, you can
    create a `while` loop that keeps executing the `Invoke-Command` until something
    is returned.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何操作。在[Listing 18-1](ch18.xhtml#ch18list1)中，你获取了虚拟机的本地保存凭据。一旦你有了凭据，你可以创建一个`while`循环，持续执行`Invoke-Command`直到返回结果。
- en: Notice that you’re using the `Ignore` value for the `ErrorAction` parameter.
    You have to do this because without it, when `Invoke-Command` can’t connect to
    a computer, it will return a nonterminating error message. To avoid having your
    console flood with expected errors (since you know that it might not connect and
    are OK with it), you’re ignoring the error messages.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意你正在为`ErrorAction`参数使用`Ignore`值。你必须这么做，因为如果没有它，当`Invoke-Command`无法连接到计算机时，它会返回一个非终止错误信息。为了避免控制台被预期中的错误信息填满（因为你知道可能无法连接，并且对此没问题），你正在忽略这些错误信息。
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 18-1: Checking to see whether the server is alive, and ignoring the
    error messages*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 18-1：检查服务器是否在线，并忽略错误信息*'
- en: Once the VM finally comes up, it’s time to add it to the domain you created
    in the preceding chapter. The command that adds a computer to a domain is `Add-Computer`.
    Since you’re running all commands from the Hyper-V host itself, and aren’t depending
    on network connectivity, you need to wrap the `Add-Computer` command in a scriptblock
    and execute it via PowerShell Direct to run it directly on SQLSRV itself.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦虚拟机终于启动，就可以将其添加到你在上一章创建的域中。添加计算机到域的命令是 `Add-Computer`。由于你是在 Hyper-V 主机上运行所有命令，而不依赖于网络连接，因此需要将
    `Add-Computer` 命令包裹在脚本块中，并通过 PowerShell Direct 执行它，直接在 SQLSRV 上运行。
- en: Notice that in [Listing 18-2](ch18.xhtml#ch18list2), you have to use both the
    local user account for the VM and a domain account. To do so, you first make a
    connection to the SQLSRV server itself by using `Invoke-Command`. Once you are
    connected, you’ll pass the domain credential to the domain controller to get authenticated,
    which will let you add the computer account.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在[清单 18-2](ch18.xhtml#ch18list2)中，你需要同时使用虚拟机的本地用户帐户和域帐户。为此，你首先通过 `Invoke-Command`
    连接到 SQLSRV 服务器本身。连接后，你会将域凭证传递给域控制器以进行身份验证，这样就可以将计算机帐户添加到域中。
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 18-2: Retrieving the credentials and adding the computer to the domain*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 18-2：获取凭证并将计算机添加到域*'
- en: Notice that you’re using the `$using` keyword ❶. This keyword allows you to
    pass the local variable `$addParams` to the remote session on your SQLSRV server.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你正在使用 `$using` 关键字 ❶。该关键字允许你将本地变量 `$addParams` 传递到 SQLSRV 服务器的远程会话中。
- en: Since you used the `Restart` switch parameter on `Add-Computer`, the VM will
    restart as soon as it gets added to the domain. Again, because you have further
    work to do, you need to wait for this to happen. However, this time, you need
    to wait for it to go down *and* come back up ([Listing 18-3](ch18.xhtml#ch18list3))
    because the script is so fast that if you don’t wait for it to go down first,
    you risk the script continuing because it detected that it was up when it didn’t
    even go down yet!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你在 `Add-Computer` 中使用了 `Restart` 开关参数，虚拟机将在添加到域后立即重启。同样，由于你还有进一步的工作要做，你需要等待这一过程发生。然而，这一次，你需要等它先关闭
    *然后* 再重启（见[清单 18-3](ch18.xhtml#ch18list3)），因为脚本非常快速，如果你不等待它先关闭，脚本可能会继续运行，因为它检测到服务器已经启动，但实际上它并没有关闭！
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 18-3: Waiting for the server to reboot*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 18-3：等待服务器重启*'
- en: You first check whether SQLSRV has been powered down by simply returning the
    number 1 on SQLSRV ❶. If it receives output, this means that PowerShell remoting
    is available and thus SQLSRV has not been powered down yet. If output is returned,
    you then pause for 10 seconds ❷, write a message to the screen ❸, and try again.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你通过在 SQLSRV ❶ 上返回数字 1 来检查 SQLSRV 是否已关闭。如果返回输出，这意味着 PowerShell 远程访问可用，因此 SQLSRV
    尚未关闭。如果有输出返回，接下来你需要暂停 10 秒 ❷，在屏幕上写一条消息 ❸，然后再试一次。
- en: You then do the opposite when testing to see when SQLSRV comes back up. Once
    the script releases control of the console, SQLSRV should now be up and added
    to your Active Directory domain.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试 SQLSRV 何时重新启动时，你会采取相反的操作。一旦脚本释放了控制台，SQLSRV 应该已经启动并被添加到你的 Active Directory
    域中。
- en: Installing the SQL Server
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装 SQL Server
- en: Now that you’ve created a VM with Windows Server 2016, you can install SQL Server
    2016 to it. This is new code! Up until now, you simply leveraged existing code;
    now you’re back blazing new trails.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了一个带有 Windows Server 2016 的虚拟机，你可以在其上安装 SQL Server 2016。这是新代码！直到现在，你一直在利用现有的代码；现在你又在开辟新天地。
- en: 'Installing SQL Server via PowerShell consists of a few steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 PowerShell 安装 SQL Server 包括几个步骤：
- en: Copying, and tweaking, a SQL Server answer file
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制并调整 SQL Server 答案文件
- en: Copying the SQL Server ISO file to the soon-to-be SQL server
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制 SQL Server ISO 文件到即将成为 SQL 服务器的虚拟机
- en: Mounting the ISO file on the soon-to-be SQL server
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 挂载即将成为 SQL 服务器的 ISO 文件
- en: Running the SQL Server installer
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 SQL Server 安装程序
- en: Dismounting the ISO file
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 卸载 ISO 文件
- en: Cleaning up any temporary copied files on the SQL server
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清理 SQL 服务器上的任何临时复制文件
- en: Copying Files to the SQL Server
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 复制文件到 SQL 服务器
- en: As per our plan, the first thing to do is to get a few files on the soon-to-be
    SQL server. You need the unattended answer file that the SQL Server installer
    needs, and you also need the ISO file that contains the SQL Server installation
    content. Since we’re assuming that you have no network connectivity from the Hyper-V
    host to the VMs, you’ll again use PowerShell Direct to copy these files. To use
    PowerShell Direct to copy files, you first need to create a session on the remote
    VM. In the following code, you’re using the `Credential` parameter to authenticate
    to SQLSRV. If your server were in the same Active Directory domain as the computer
    you’re currently working on, the `Credential` parameter would not be necessary.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们的计划，第一步是将一些文件复制到即将成为 SQL 服务器的计算机上。你需要 SQL Server 安装程序需要的无人参与回答文件，还需要包含 SQL
    Server 安装内容的 ISO 文件。由于我们假设 Hyper-V 主机与虚拟机之间没有网络连接，因此你将再次使用 PowerShell Direct 来复制这些文件。要使用
    PowerShell Direct 复制文件，你首先需要在远程虚拟机上创建一个会话。在下面的代码中，你使用 `Credential` 参数来验证 SQLSRV。如果你的服务器与当前操作的计算机在同一个
    Active Directory 域中，那么就不需要 `Credential` 参数。
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, make a copy of the template *SQLServer.ini* file found in the PowerLab
    module:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，复制 PowerLab 模块中找到的模板 *SQLServer.ini* 文件：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Once that’s done, you’ll modify the file to match the configuration you need.
    Recall that earlier, when you needed to change some values, you manually opened
    the unattended XML file. This was more work than you needed to do—believe it or
    not, you can automate this step as well!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 完成之后，你将修改文件以匹配所需的配置。回想一下，之前当你需要更改某些值时，你手动打开了无人参与的 XML 文件。这比你需要做的更多工作——信不信由你，你也可以自动化这一步！
- en: In [Listing 18-4](ch18.xhtml#ch18list4), you’re reading in the contents of the
    copied template file, looking for the strings `SQLSVCACCOUNT=`, `SQLSVCPASSWORD=`,
    and `SQLSYSADMINACCOUNTS=` and replacing those strings with specific values. When
    you’re finished, rewrite the copied template file with your new changed strings.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在[清单 18-4](ch18.xhtml#ch18list4)中，你正在读取复制的模板文件内容，查找字符串 `SQLSVCACCOUNT=`, `SQLSVCPASSWORD=`,
    和 `SQLSYSADMINACCOUNTS=`，并用特定值替换这些字符串。当你完成后，将修改后的字符串写回复制的模板文件。
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 18-4: Replacing the strings*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 18-4：替换字符串*'
- en: 'Once you have the answer file, and have copied that file and the SQL Server
    ISO file to the soon-to-be SQL server, the installer will be ready to go:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了回答文件，并将该文件和 SQL Server ISO 文件复制到即将成为 SQL 服务器的计算机上，安装程序就准备好了：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Running the SQL Server Installer
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运行 SQL Server 安装程序
- en: 'You’re finally ready to install SQL Server. [Listing 18-5](ch18.xhtml#ch18list5)
    contains the code to do so:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你终于准备好安装 SQL Server。[清单 18-5](ch18.xhtml#ch18list5)包含了安装 SQL Server 的代码：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 18-5: Using `Invoke-Command` to mount, install, and dismount the image*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 18-5：使用 `Invoke-Command` 挂载、安装和卸载映像*'
- en: First, you mount the copied ISO file on the remote machine ❶; then you execute
    the installer, assigning the output to `$null` ❷ as you don’t need it; lastly,
    when you’re all done, you dismount the image ❸. In [Listing 18-5](ch18.xhtml#ch18list5),
    you’re using `Invoke-Command` and PowerShell Direct to remotely execute these
    commands.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你在远程机器上挂载复制的 ISO 文件 ❶；然后你执行安装程序，将输出赋值给 `$null` ❷，因为你不需要它；最后，完成后，你卸载该映像 ❸。在[清单
    18-5](ch18.xhtml#ch18list5)中，你使用 `Invoke-Command` 和 PowerShell Direct 来远程执行这些命令。
- en: When SQL Server has been installed, do some cleanup work to ensure that you
    remove all the temporary copied files, as shown in [Listing 18-6](ch18.xhtml#ch18list6).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完 SQL Server 后，进行一些清理工作，确保删除所有临时复制的文件，如[清单 18-6](ch18.xhtml#ch18list6)所示。
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*Listing 18-6: Cleaning up the temporary files*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 18-6：清理临时文件*'
- en: At this point, the SQL Server will be set up and ready to go! In just 64 lines
    of PowerShell, you created a Microsoft SQL Server from nothing but a Hyper-V host.
    This is great progress, but you can make it even better.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，SQL Server 已经设置完成并准备就绪！仅用 64 行 PowerShell，你就从一个 Hyper-V 主机创建了一个 Microsoft
    SQL Server。这是一个很大的进展，但你可以做得更好。
- en: Automating the SQL Server
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动化 SQL Server
- en: 'You’ve done most of the heavy lifting already. By now, you have a script that
    does everything you need it to do. What you want next is to roll all that functionality
    into a few functions in your PowerLab module: the `New-PowerLabSqlServer` and
    `Install-PowerLabOperatingSystem` functions.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经完成了大部分繁重的工作。到目前为止，你已经有了一个可以完成所需操作的脚本。接下来，你需要做的是将所有这些功能整合到 PowerLab 模块中的几个函数里：`New-PowerLabSqlServer`
    和 `Install-PowerLabOperatingSystem` 函数。
- en: 'You’ll follow the basic automation pattern established in the previous chapters:
    build functions around all the common actions and call them instead of using hardcoded
    values in many places. The result will be a single function the user can call.
    In [Listing 18-7](ch18.xhtml#ch18list7), you use existing functions to create
    the VM and VHD, and create a second `Install-PowerLabSQLServer` function to house
    the code for installing the SQL Server:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你将遵循前几章中建立的基本自动化模式：围绕所有常见操作构建函数并调用它们，而不是在许多地方使用硬编码值。最终结果将是一个用户可以调用的单一函数。在[清单18-7](ch18.xhtml#ch18list7)中，你使用现有函数创建虚拟机和VHD，并创建第二个`Install-PowerLabSQLServer`函数来存放安装SQL
    Server的代码：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*Listing 18-7: The `New-PowerLabSqlServer` function*'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单18-7：`New-PowerLabSqlServer`函数*'
- en: 'You should recognize most of this code: it’s the exact same code we covered
    just a bit ago, here wrapped in a function for easy reuse! I used the same code
    body but instead of using hardcoded values, I parameterized many attributes, allowing
    you to install SQL Server with different parameters without changing the code
    itself.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能识别出大部分代码：这正是我们刚才讲解过的代码，只是现在它被封装成一个函数，便于重用！我使用了相同的代码主体，但不再使用硬编码值，而是将许多属性参数化，使你可以使用不同的参数安装SQL
    Server，而无需修改代码本身。
- en: Turning specific scripts into a general function preserves the functionality
    of your code and allows greater flexibility if at some point in the future you
    want to change the behavior of how you deploy SQL servers.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 将特定的脚本转化为通用函数可以保留代码的功能性，并在将来你想更改SQL Server部署行为时提供更大的灵活性。
- en: Let’s take a look at the important pieces of the `Install-PowerLabSqlServer`
    code in [Listing 18-8](ch18.xhtml#ch18list8).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看[清单18-8](ch18.xhtml#ch18list8)中`Install-PowerLabSqlServer`代码的重要部分。
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '*Listing 18-8: The `Install-PowerLabSqlServer` PowerLab module function*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单18-8：`Install-PowerLabSqlServer` PowerLab模块函数*'
- en: You parameterize all the types of input you need to install SQL Server ❶ and
    add an error-handling step ❷ to check whether SQL Server is already installed.
    This allows you to run the function over and over again; if SQL Server is already
    installed, the function will simply skip over it.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你将安装SQL Server所需的所有输入类型进行了参数化❶，并添加了错误处理步骤❷来检查SQL Server是否已经安装。这使得你可以反复运行该函数；如果SQL
    Server已经安装，函数会直接跳过。
- en: 'Notice that you call a function you haven’t seen before: `PrepareSqlServerInstallConfigFile`
    ❸. This is a *helper function*: a small function that captures some bit of functionality
    you’re likely to use again and again (helper functions are usually hidden from
    the user and used behind the scenes). Although not required by any means, breaking
    out small bits of functionality like this makes code more readable. As a general
    rule, functions should only do one “thing.” *Thing* here is, of course, a highly
    relative term, but the more you program, the more you’ll have an intuitive sense
    for when a function is doing too many things at once.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你调用了一个你之前没见过的函数：`PrepareSqlServerInstallConfigFile` ❸。这是一个*辅助函数*：一个小函数，捕捉一些你可能会反复使用的功能（辅助函数通常对用户隐藏，并在后台使用）。虽然这不是必须的，但将小块功能拆分出来会使代码更具可读性。一般来说，函数应该只做一件“事”。这里的“事”当然是一个相对的概念，但你编程的越多，你就会有一种直觉，知道什么时候一个函数在做太多事情。
- en: '[Listing 18-9](ch18.xhtml#ch18list9) is the code for the `PrepareSqlServerInstallConfigFile`
    function.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单18-9](ch18.xhtml#ch18list9)是`PrepareSqlServerInstallConfigFile`函数的代码。'
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '*Listing 18-9: The `PrepareSqlServerInstallConfigFile` helper function*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单18-9：`PrepareSqlServerInstallConfigFile`辅助函数*'
- en: You’ll recognize this code from [Listing 18-4](ch18.xhtml#ch18list4); it hasn’t
    changed much. You added the parameters `Path`, `ServiceAccountName`, `ServiceAccountPassword`,
    and `SysAdminAccountName` to represent each attribute instead of the hardcoded
    values used earlier.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你会从[清单18-4](ch18.xhtml#ch18list4)中识别到这段代码；它变化不大。你添加了参数`Path`、`ServiceAccountName`、`ServiceAccountPassword`和`SysAdminAccountName`来表示每个属性，而不是之前使用的硬编码值。
- en: Now that you have all your functions in a row, bringing up an SQL server from
    scratch is just a few commands away. Run the following code to bring up a SQL
    server from scratch!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经有了所有的函数，启动一个SQL服务器仅需几个命令。运行以下代码即可从头开始启动SQL服务器！
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Running Pester Tests
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行Pester测试
- en: 'It’s that time again: let’s run some Pester tests to test the new changes you
    implemented. For this chapter, you installed SQL Server on the existing SQLSRV
    VM. You didn’t do too much configuring when you installed, and accepted most of
    the installation defaults, so you’ll have only a few Pester tests: you have to
    make sure that SQL Server is installed, and you have to make sure that during
    installation it read the unattended configuration file you supplied it. You can
    do this by verifying that `PowerLabUser` holds a server sysadmin role and that
    SQL Server is running under the `PowerLabUser` account:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 又到了该测试的时候了：让我们运行一些Pester测试来检验你实施的新更改。在本章中，你在现有的SQLSRV虚拟机上安装了SQL Server。在安装时，你没有做太多配置，并接受了大部分默认安装选项，因此你只需要进行几个Pester测试：你需要确保SQL
    Server已经安装，并且确保在安装过程中它读取了你提供的无人值守配置文件。你可以通过验证`PowerLabUser`是否拥有服务器的sysadmin角色，并且SQL
    Server是否以`PowerLabUser`账户运行来完成这一点：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Everything checks out, so you’re good to go!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都通过了检查，所以你可以继续前进了！
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, you finally saw a more fleshed-out example of what you can
    do with PowerShell. Building on the work in previous chapters, you added that
    final layer of automation: installing software (SQL Server) on top of an operating
    system that was “layered” on top of a virtual machine. You did this in much the
    same way as in the past few chapters. You used a single example to figure out
    the code you needed; then you packaged that code in a reusable format and put
    it inside your PowerLab module. And now that that’s done, you can build as many
    SQL servers as you want with nothing more than a few lines of code!'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你终于看到了一个更为具体的PowerShell应用示例。在前几章的基础上，你添加了最终的自动化层：在“层叠”在虚拟机上的操作系统上安装软件（SQL
    Server）。你以类似于前几章的方式进行了操作。你使用一个示例来确定所需的代码；然后，你将这些代码封装成可重用的格式，并将其放入你的PowerLab模块中。现在，这一切完成了，你可以通过几行代码创建任意多的SQL服务器！
- en: 'In the next chapter, you’ll do something a little different: revisit code you’ve
    already written and refactor it. You’ll learn about best coding practices and
    make sure your module is in the place you need it to be before adding the final
    piece in [Chapter 20](ch20.xhtml#ch20).'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将做一些不同的事情：重新审视你已经写过的代码并进行重构。你将学习最佳编码实践，并确保在添加最终部分之前，你的模块已经处于你需要的状态，这部分内容会出现在[第20章](ch20.xhtml#ch20)。
