- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Deploying Code
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 部署代码
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: You have been methodically building up your infrastructure to get to this point,
    and you have put in place all the foundational pieces you need to run your application.
    You have built and deployed in the Kubernetes cluster the container image for
    the telnet-server application. If you want to release a new version of your application,
    all you need to do is rebuild the container image and then redeploy the Kubernetes
    manifests.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经有条不紊地构建了你的基础设施，达到了这个阶段，并且你已经完成了运行应用所需的所有基础组件。你已经在 Kubernetes 集群中构建并部署了 telnet-server
    应用的容器镜像。如果你想发布应用的新版本，你只需要重建容器镜像，然后重新部署 Kubernetes 清单。
- en: However, there are some glaring flaws within your setup. For one, you are not
    running any tests to verify that the code or container image is defect-free. Also,
    the way you have set it up, every time any code or configuration changes, you’ll
    need to build the container image and release the Deployment manually. This manual
    process is fine for kicking the tires on new technologies, but hopefully you have
    learned (and agree) that these steps can and should be automated. Successful software
    engineering teams often release small code changes using automation, allowing
    them to find errors quickly and reduce complexities in their infrastructure. As
    mentioned in an earlier chapter, this process of getting code from your editor
    to your stakeholders in a consistent and automated manner is usually referred
    to as *continuous integration and continuous deployment (CI/CD).*
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你的设置中存在一些明显的缺陷。首先，你没有运行任何测试来验证代码或容器镜像是否无缺陷。另外，根据你目前的设置，每次代码或配置发生变化时，你都需要手动构建容器镜像并发布部署。这种手动过程对于测试新技术是可以的，但希望你已经学到了（并且同意）这些步骤可以并且应该自动化。成功的软件工程团队通常会使用自动化发布小的代码变更，这样可以快速发现错误，并减少基础设施的复杂性。正如前面章节提到的那样，这个过程通常被称为*持续集成和持续部署（CI/CD）*，它使得代码从编辑器到利益相关者的传递更加一致和自动化。
- en: In this chapter, you’re going to build a simple CI/CD pipeline for the telnet-server
    application using freely available tools. This pipeline will watch the telnet-server
    source code changes, and if there are any, it will kick off a series of steps
    to get the changes deployed to the Kubernetes cluster. By the end of this chapter,
    you’ll have a local development pipeline that builds, tests, and deploys your
    code to the Kubernetes cluster using automation.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将使用免费可用的工具为 telnet-server 应用构建一个简单的 CI/CD 管道。这个管道将监视 telnet-server 源代码的变更，如果有变动，它将启动一系列步骤，将这些变更部署到
    Kubernetes 集群中。到本章结束时，你将拥有一个本地开发管道，它能够通过自动化构建、测试并部署你的代码到 Kubernetes 集群。
- en: CI/CD in Modern Application Stacks
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现代应用堆栈中的 CI/CD
- en: Continuous integration and continuous deployment are software development methodologies
    that describe the way code is built, tested, and delivered. The CI steps cover
    the testing and building of code and configuration changes, while the CD steps
    automate the deployment (or delivery) of new code.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成和持续部署是描述代码构建、测试和交付的两种软件开发方法。CI 步骤包括代码和配置变更的测试与构建，而 CD 步骤则自动化新代码的部署（或交付）。
- en: During the CI stage, a software engineer introduces new features or bug fixes
    through a version control system like Git. This code gets run through a series
    of builds and tests before finally producing an artifact like a container image.
    This process solves the “works on my machine” problem because everything is tested
    and built in the same way to produce a consistent product. The testing steps usually
    consist of unit tests, integration tests, and security scans. The unit and integration
    tests make sure the application behaves in an expected manner, whether in isolation
    or interacting with other components in your stack. The security scans usually
    check for known vulnerabilities in your applications software dependencies or
    for vulnerable base container images you are importing. After the testing steps,
    the new artifact is built and pushed to a shared repository, where the CD stage
    has access to it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在持续集成（CI）阶段，软件工程师通过版本控制系统（如 Git）引入新特性或修复bug。代码会经过一系列构建和测试，最后生成一个像容器镜像这样的产物。这个过程解决了“在我机器上能运行”这个问题，因为一切都是以相同的方式进行测试和构建，确保生成一致的产品。测试步骤通常包括单元测试、集成测试和安全扫描。单元测试和集成测试确保应用无论是独立运行还是与堆栈中的其他组件交互时，都能按预期行为运行。安全扫描通常会检查你应用软件依赖中的已知漏洞，或你所导入的基础容器镜像中是否存在漏洞。测试步骤完成后，新的产物被构建并推送到共享仓库，持续交付（CD）阶段可以访问它。
- en: During the CD stage, an artifact is taken from a repository and then deployed,
    usually to production infrastructure. CDs can use different strategies to release
    code. These strategies are usually either *canary*, *rolling* (in our case), or
    *blue-green*. See [Table 8-1](#table8-1) for more information on each strategy.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在持续交付（CD）阶段，产物从仓库中提取出来，并部署到通常是生产环境的基础设施上。持续交付可以使用不同的策略来发布代码。这些策略通常是*金丝雀发布*、*滚动发布*（在我们的案例中），或者*蓝绿部署*。有关每种策略的更多信息，请参见[表
    8-1](#table8-1)。
- en: The idea behind deployment strategies is to minimize problematic code before
    it can have an impact on many users. The infrastructure you’ll be deploying to
    most likely will be a container orchestrator like our Kubernetes cluster, but
    it could just as easily be VMs in a cloud provider.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 部署策略的核心理念是最大限度地减少问题代码，防止其影响到大量用户。你将要部署的基础设施很可能是像我们的 Kubernetes 集群这样的容器编排器，但也可以是云服务提供商的虚拟机（VM）。
- en: 'Table 8-1: Deployment Strategies'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 表 8-1：部署策略
- en: '| Canary | This strategy rolls out new code so only a small subset of users
    can access it. If the canary’s code presents zero errors, the new code can be
    rolled out further to more customers. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 金丝雀发布 | 这个策略将新代码发布给少量用户进行访问。如果金丝雀代码没有错误，则可以将新代码进一步推出，供更多用户使用。 |'
- en: '| Blue-Green | In this strategy, a production service (blue) takes traffic
    while the new service (green) is tested. If the green code is operating as expected,
    the green service will replace the blue service, and all customer requests will
    funnel through it. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 蓝绿部署 | 在这个策略中，生产服务（蓝色）处理流量，而新服务（绿色）进行测试。如果绿色代码按预期运行，绿色服务将替换蓝色服务，所有客户请求将通过绿色服务转发。
    |'
- en: '| Rolling | This strategy deploys new codes one by one, alongside the current
    code in production, until it is fully released. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 滚动部署 | 这种策略将新代码逐个部署，与当前生产中的代码并行，直到完全发布。 |'
- en: After the deployment is successful, a monitoring step should observe the new
    code and make sure nothing has slipped past the CI phase. If a problem is detected,
    like high latency or increased error counts, it will be no problem to roll back
    the application to a previous version that was deemed safe. This is one of the
    great features of a container orchestrator like Kubernetes. It makes rolling code
    forward and backward very simple. (We’ll test the rollback feature later.)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 部署成功后，监控步骤应当观察新代码，确保没有任何问题遗漏在持续集成（CI）阶段。如果检测到问题，如高延迟或错误计数增加，可以轻松地将应用回滚到一个被认为是安全的先前版本。这是像
    Kubernetes 这样的容器编排器的一个伟大特性，它使得代码的前进和回滚变得非常简单。（我们稍后会测试回滚功能。）
- en: Setting Up Your Pipeline
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置你的流水线
- en: Before creating your pipeline, you’ll need to install a few tools to help automate
    code building, testing, and delivery. There are many tools on the market that
    do this, but for our scope, I am using two pieces of software that are open source
    and integrate nicely with Kubernetes. The first tool is called Skaffold, and it
    helps with continuous development for Kubernetes-native applications. It will
    make setting up the CI/CD pipeline to the local k8s cluster easy. If Skaffold
    is not installed, follow the instructions at [https://skaffold.dev/docs/install/](https://skaffold.dev/docs/install/)
    for your OS to complete the installation.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建管道之前，您需要安装一些工具来帮助自动化代码构建、测试和交付。市场上有许多工具可以完成这些任务，但在我们的范围内，我使用了两款开源软件，它们与 Kubernetes
    集成得很好。第一个工具叫做 Skaffold，它帮助 Kubernetes 本地应用程序进行持续开发。它将使设置 CI/CD 管道到本地 k8s 集群变得简单。如果尚未安装
    Skaffold，请按照[https://skaffold.dev/docs/install/](https://skaffold.dev/docs/install/)上的操作指南，根据您的操作系统完成安装。
- en: The other tool, `container-structure-test`, is a command line application that
    validates the container image’s structure after it’s built. It can test whether
    the image was constructed properly by verifying whether a specific file exists,
    or it can execute a command and validate its output. You can also use it to verify
    that a container image was built with the correct metadata, like the ports or
    environment variables you would set in a Dockerfile. The installation instructions
    for `container-structure-test` are available at [https://github.com/GoogleContainerTools/container-structure-test/](https://github.com/GoogleContainerTools/container-structure-test/).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个工具是`container-structure-test`，这是一个命令行应用程序，用于验证容器镜像在构建后的结构。它可以通过验证特定文件是否存在来测试镜像是否构建正确，或者执行命令并验证其输出。您还可以使用它验证容器镜像是否构建了正确的元数据，例如在
    Dockerfile 中设置的端口或环境变量。`container-structure-test`的安装说明可以在[https://github.com/GoogleContainerTools/container-structure-test/](https://github.com/GoogleContainerTools/container-structure-test/)找到。
- en: Reviewing the skaffold.yaml File
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 审查 skaffold.yaml 文件
- en: 'The *skaffold.yaml* file describes how to build, test, and deploy your application.
    This file should live in the root of your project and be kept under version control.
    The YAML file has many different options to choose from, but your pipeline will
    focus on three main sections: `build`, `test`, and `deploy`. The `build` section
    describes how to build your container image, the `test` section describes what
    tests to perform, and the `deploy` section describes how to release your application
    to the Kubernetes cluster.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*skaffold.yaml*文件描述了如何构建、测试和部署您的应用程序。该文件应位于项目的根目录中，并保持在版本控制下。YAML 文件有许多不同的选项可供选择，但您的管道将专注于三个主要部分：`build`、`test`和`deploy`。`build`部分描述了如何构建容器镜像，`test`部分描述了执行哪些测试，`deploy`部分描述了如何将应用程序发布到
    Kubernetes 集群。'
- en: The *skaffold.yaml* file is in the *telnet-server/* directory inside the cloned
    repository ([https://github.com/bradleyd/devops_for_the_desperate/](https://github.com/bradleyd/devops_for_the_desperate/)).
    You don’t need to edit or open this file, but you should have some familiarity
    with its basics and structure.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*skaffold.yaml*文件位于克隆仓库中的*telnet-server/*目录下（[https://github.com/bradleyd/devops_for_the_desperate/](https://github.com/bradleyd/devops_for_the_desperate/)）。您不需要编辑或打开此文件，但应该对其基本内容和结构有一定的了解。'
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `build` section uses the default build action, which is the `docker build`
    command, to create our container image locally. The container `image` name is
    set to `dftd/telnet-server`. This matches the same image name you are using in
    the *deployment.yaml* file. You’ll see why that is important when you look at
    the `deploy` section. The Skaffold tool precalculates the container image tag
    using the current Git commit hash, which is the default behavior. The generated
    tag is appended to the container image name automatically, and it’s conveniently
    set to an environment variable (`$IMAGE`) that can be referenced if needed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`build`部分使用默认的构建操作，即`docker build`命令，在本地创建我们的容器镜像。容器`image`名称设置为`dftd/telnet-server`。这与您在*deployment.yaml*文件中使用的镜像名称相匹配。您将会在查看`deploy`部分时明白这点为什么很重要。Skaffold
    工具会使用当前的 Git 提交哈希来预先计算容器镜像标签，这是默认行为。生成的标签会自动附加到容器镜像名称，并且它会方便地设置为环境变量（`$IMAGE`），如果需要可以引用。'
- en: The `test` section allows you to run any tests against the application and container
    image. In this case, you’ll use unit tests that exist for the `telnet-server`
    application that I’ve provided for you. The unit tests, which are under the `custom`
    field, run the `go test` command for all the test files. This step requires that
    the Go programming language be installed. If you do not have Go installed, follow
    the instructions at [https://go.dev/doc/install/](https://go.dev/doc/install/)
    for your OS.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`test`部分允许你对应用程序和容器镜像运行任何测试。在这种情况下，你将使用我为你提供的`telnet-server`应用程序的单元测试。这些单元测试位于`custom`字段下，运行`go
    test`命令来执行所有的测试文件。此步骤要求安装Go编程语言。如果你尚未安装Go，可以按照[https://go.dev/doc/install/](https://go.dev/doc/install/)上的说明进行安装。'
- en: The next test that gets run is `structureTests`. This test checks the final
    container image for defects. We’ll go over these container tests briefly in a
    later section.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个要运行的测试是`structureTests`。此测试检查最终的容器镜像是否存在缺陷。稍后我们将简要讲解这些容器测试。
- en: Finally, the `deploy` section uses the Kubernetes manifest files inside the
    *kubernetes/* directory to release the `telnet-server` Deployment. The Skaffold
    tool performs a patch against the running Deployment and replaces the current
    container image and tag (which is *dftd/telnet-server:v1*) with the new one Skaffold
    generated during the `build` step. Because these names match the tag, they can
    be easily updated to a new one in the pipeline.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`deploy`部分使用*kubernetes/*目录中的Kubernetes清单文件来发布`telnet-server`部署。Skaffold工具对正在运行的部署执行补丁操作，并用在`build`步骤中Skaffold生成的新容器镜像和标签（即*dftd/telnet-server:v1*）替换当前镜像。因为这些名称与标签匹配，所以可以轻松在流水线中更新为新的标签。
- en: Reviewing the Container Tests
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 审查容器测试
- en: Once the telnet-server container image is built and the application tests pass,
    the container tests are run on the newly built image. The container tests are
    located in a subdirectory called *container-tests/*, which is under the *telnet-server/*
    directory. This directory contains one test file named *command-and-metadata-test.yaml*.
    In this file, I have provided one application test to make sure the binary was
    built correctly, and I have also provided a few container image tests to verify
    that the container was built with the expected instructions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`telnet-server`容器镜像构建完成并且应用程序测试通过，容器测试将针对新构建的镜像运行。容器测试位于一个名为*container-tests/*的子目录下，该目录位于*telnet-server/*目录中。此目录包含一个名为*command-and-metadata-test.yaml*的测试文件。在这个文件中，我提供了一个应用程序测试，以确保二进制文件正确构建，并且还提供了一些容器镜像测试，以验证容器是否按照预期的指令构建。
- en: 'You should review the structure tests now. Open the YAML file in your editor
    or follow along below:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该回顾结构测试。打开YAML文件到编辑器中，或者继续往下看：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `commandTests` command executes the `telnet-server` binary, passing the
    `-i` (info) flag to it to output the ports on which the application is listening
    to STDOUT. The command output is then matched against what is in the `expectedOutput`
    field. For a successful test, the output should match `telnet port :2323\nMetrics
    Port: :9000` so you can make sure your binary was compiled correctly during the
    container `build` phase. This test makes sure the `telnet-server` application
    can at least run and function on a basic level.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`commandTests`命令执行`telnet-server`二进制文件，并向其传递`-i`（信息）标志，以将应用程序监听的端口输出到STDOUT。然后，命令输出将与`expectedOutput`字段中的内容进行匹配。对于成功的测试，输出应匹配`telnet
    port :2323\nMetrics Port: :9000`，这样你可以确保在容器`build`阶段正确编译了二进制文件。此测试确保`telnet-server`应用程序至少可以基本运行并发挥作用。'
- en: The `metadataTest` looks to see whether the container image was built with the
    proper instructions in the Dockerfile. The metadata tests verify environment variables
    (`env`), command (`cmd`), and `workdir`. These tests are useful for catching any
    delta between Dockerfile changes across different commits.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`metadataTest`检查容器镜像是否按照Dockerfile中的正确指令构建。元数据测试验证环境变量（`env`）、命令（`cmd`）和工作目录（`workdir`）。这些测试对于捕捉不同提交之间Dockerfile变更的差异非常有用。'
- en: Simulating a Development Pipeline
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模拟开发流水线
- en: Now that you understand the pipeline configuration, let’s get a running pipeline.
    You can execute the `skaffold` command with either the `run` or the `dev` subcommand.
    The `run` subcommand is a one-off that builds, tests, and deploys the application
    and then exits. It does not watch for any new code changes. The `dev` command
    does everything `run` does, but it watches the source files for any changes. Once
    it detects a change, it kicks off the `build`, `test`, and `deploy` steps described
    in the *skaffold.yaml* file. For this example, you’ll use the `dev` subcommand
    to simulate a development pipeline.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经理解了管道配置，让我们开始运行管道。你可以通过执行带有 `run` 或 `dev` 子命令的 `skaffold` 命令来启动管道。`run`
    子命令是一次性执行，构建、测试和部署应用程序后会退出，不会监视任何新的代码更改。`dev` 命令执行与 `run` 相同的操作，但它会监视源文件的任何更改。一旦检测到更改，它会启动
    *skaffold.yaml* 文件中描述的 `build`、`test` 和 `deploy` 步骤。对于本例，你将使用 `dev` 子命令来模拟开发管道。
- en: After the `dev` subcommand is run successfully, it will wait and block looking
    for any changes. By default, you’ll need to press CTRL-C to exit the `skaffold`
    `dev` mode. However, when you use CTRL-C to exit, the default behavior is to clean
    up after itself by removing the telnet-server Deployment and Services from the
    Kubernetes cluster. Since you’ll be using the telnet-server Deployment throughout
    this chapter and book, add the `--cleanup=false` flag to the end of the `dev`
    command to bypass this behavior. This way, the Pods will stay running after you
    quit the command.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功运行 `dev` 子命令后，它将等待并阻止任何变化的发生。默认情况下，你需要按 CTRL-C 来退出 `skaffold` `dev` 模式。然而，当你使用
    CTRL-C 退出时，默认行为是清理自己，删除 Kubernetes 集群中的 telnet-server 部署和服务。由于你将在本章和本书中持续使用 telnet-server
    部署，因此可以在 `dev` 命令后添加 `--cleanup=false` 标志来跳过这个行为。这样，Pod 会在你退出命令后继续运行。
- en: To kick off the pipeline, make sure you are in the *telnet-server/* directory
    and your Kubernetes cluster is still running. The `skaffold` command can be quite
    chatty when executed. To make it easier to follow, you’ll break down the output
    as it aligns with the three `skaffold` sections above (`build`, `test`, and `deploy`).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动管道，确保你处于 *telnet-server/* 目录中，并且 Kubernetes 集群仍在运行。执行 `skaffold` 命令时，它可能会输出很多信息。为了更容易跟踪，你将根据上面提到的三个
    `skaffold` 部分（`build`、`test` 和 `deploy`）来分解输出。
- en: 'Enter the following command in a terminal to run `skaffold`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中输入以下命令以运行 `skaffold`：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first action this command executes is to set the container tag to `4622725`,
    after which the Docker image is built. Your tag will likely be different, as it’s
    based off the current Git commit hash of my repository.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令执行的第一个操作是将容器标签设置为 `4622725`，然后构建 Docker 镜像。你的标签可能会有所不同，因为它基于我仓库当前的 Git 提交哈希值。
- en: 'After a successful build, `skaffold` triggers the test section where the unit
    and container infrastructure tests are kept:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功构建后，`skaffold` 会触发测试部分，在这里会进行单元测试和容器基础设施测试：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The container tests and `telnet-server` unit tests pass with zero errors.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 容器测试和 `telnet-server` 单元测试都通过，没有任何错误。
- en: 'Finally, after the container is built and all the tests pass, `skaffold` attempts
    to deploy the container to Kubernetes:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在容器构建完成并且所有测试通过后，`skaffold` 会尝试将容器部署到 Kubernetes：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The Deployment is using our Kubernetes manifest files for the `telnet-server`
    application. For this Deployment, `skaffold` is using the new container image
    and tag (*dftd/telnet-server:4622725*) that was just built and tested to replace
    the one that is currently running (*dftd/telnet-server:v1*). If the `build`, `test`,
    and `deploy` steps are successful, there will not be any visible errors, and the
    final line should say, “`Watching for changes`.” If there are errors in any of
    the steps, the pipeline will halt immediately and throw an `error` with some clues
    to where the fault occurred. If any errors do occur, tack the `--verbosity debug`
    flag onto the `skaffold dev` command to increase the output’s verbosity.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 部署使用了我们的 Kubernetes 清单文件来部署 `telnet-server` 应用程序。对于此部署，`skaffold` 使用了刚刚构建和测试的新的容器镜像和标签（*dftd/telnet-server:4622725*）来替代当前运行的镜像（*dftd/telnet-server:v1*）。如果
    `build`、`test` 和 `deploy` 步骤都成功，则不会出现任何可见错误，最后一行应该显示“`Watching for changes`”。如果任何步骤出现错误，管道将立即停止，并抛出一个
    `error`，并提供一些故障发生位置的线索。如果发生错误，可以在 `skaffold dev` 命令后添加 `--verbosity debug` 标志来增加输出的详细程度。
- en: If the container image and tag already exist, `skaffold` will skip the `build`
    and `test` sections and go right to the `deploy` step. This is a great time-saver,
    as you won’t need to repeat all the steps if all you are doing is redeploying
    the same container image. If your repository has uncommitted changes, `skaffold`
    adds `-dirty` to the end of your tag (`4622725-dirty`) to signal that changes
    are yet to be committed. In most cases, you’ll see this often when developing
    locally. That is because you’ll likely be constantly tinkering and making changes
    before committing your code.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果容器镜像和标签已经存在，`skaffold` 将跳过 `build` 和 `test` 部分，直接进入 `deploy` 步骤。这是一个节省时间的好方法，因为如果你只是重新部署相同的容器镜像，就无需重复所有步骤。如果你的代码库中有未提交的更改，`skaffold`
    会在标签末尾加上 `-dirty`（如 `4622725-dirty`）以表示还有未提交的更改。在大多数情况下，当你在本地开发时，这种情况会经常发生，因为你可能会在提交代码之前不断修改和调整。
- en: Making a Code Change
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 做出代码更改
- en: The pipeline is now set up, so you’ll want to make a code change to test the
    workflow. Let’s try something simple, like changing the color of the DFTD banner
    that greets you when you connect to the telnet-server. The source code for telnet-server
    is located in the *telnet-server/* directory. Currently, the banner is set to
    green (my favorite color). Once you make the code change and save the file, `skaffold`
    should recognize the change and trigger `build`, `test`, and `deploy` again.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在流水线已经设置好，你需要做出一个代码更改来测试工作流。我们可以尝试一个简单的操作，比如更改连接到 telnet-server 时显示的 DFTD 横幅的颜色。telnet-server
    的源代码位于 *telnet-server/* 目录下。目前，横幅设置为绿色（我最喜欢的颜色）。一旦你做出代码更改并保存文件，`skaffold` 应该会识别到更改，并重新触发
    `build`、`test` 和 `deploy` 步骤。
- en: 'In a different terminal from the one in which you are already running `skaffold`,
    open the *banner.go* file, located in the *telnet/* subdirectory, using your favorite
    editor. Don’t worry about the code or the file’s contents; you’re just going to
    change the color. On line 26, you’ll see some code that looks like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个与运行 `skaffold` 的终端不同的终端中，使用你喜欢的编辑器打开 *banner.go* 文件，该文件位于 *telnet/* 子目录下。不要担心代码或文件的内容，你只是要更改颜色。在第
    26 行，你会看到类似下面的代码：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is the line that sets the banner color.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是设置横幅颜色的那一行代码。
- en: 'Replace the string `colorGreen` with the string `colorYellow`, so the line
    now looks like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 将字符串 `colorGreen` 替换为 `colorYellow`，这样这一行现在应该像这样：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After the change, save and close the file. Head back to the terminal where
    you are running the `skaffold dev` command. You should now see new activity that
    looks very similar to the output from the first `skaffold` run. All the steps
    will have been triggered again because you made a change in the source code that
    `skaffold` watches. The end result should be the same: you will have completed
    the Deployment rollout, and two new Pods will be running. If that isn’t the case,
    make sure that you actually saved the *banner.go* file and that `skaffold dev`
    is still running.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 更改后，保存并关闭文件。返回你运行 `skaffold dev` 命令的终端。你现在应该能看到新的活动，类似于第一次运行 `skaffold` 时的输出。所有步骤会再次被触发，因为你对
    `skaffold` 监视的源代码进行了更改。最终结果应该是相同的：你将完成部署滚动，并且会有两个新的 Pod 正在运行。如果不是这样，请确保你已经保存了
    *banner.go* 文件，并且 `skaffold dev` 仍在运行。
- en: Testing the Code Change
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试代码更改
- en: Next, you should make sure the new code was delivered to the Kubernetes cluster.
    Do this by validating that the DFTD banner color changed from green to yellow.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要确保新代码已成功交付到 Kubernetes 集群。通过验证 DFTD 横幅的颜色是否从绿色变为黄色来确认。
- en: In the previous chapter, you used the `minikube tunnel` command to access the
    telnet-server application. If you still have it running in a terminal, jump to
    the telnet client instructions below. If not, open another terminal and run the
    `minikube tunnel` command once again.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你使用了 `minikube tunnel` 命令来访问 telnet-server 应用。如果你仍然在终端中运行该命令，可以直接跳到下面的
    telnet 客户端说明。如果没有，打开另一个终端，再次运行 `minikube tunnel` 命令。
- en: 'You’ll need the IP address of the telnet-server Service again to access it.
    Run this command to get the telnet-server Service IP:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要再次获取 telnet-server 服务的 IP 地址才能访问它。运行以下命令获取 telnet-server 服务的 IP：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Your `EXTERNAL-IP` may be different from mine, so use the IP from that column
    and port `2323`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 `EXTERNAL-IP` 可能与我的不同，所以请使用该列中的 IP 和端口 `2323`。
- en: 'Access the application again with the `telnet` client command, as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用 `telnet` 客户端命令访问应用，命令如下：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The DFTD banner, shown in [Figure 8-1](#figure8-1), should now be yellow.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: DFTD 横幅，如 [图 8-1](#figure8-1) 所示，现在应该是黄色的。
- en: '![Screenshot showing the DFTD banner in ASCII art in a terminal window with
    a black background](image_fi/502482c08/f08001.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![显示 DFTD 横幅的 ASCII 艺术终端窗口截图，背景为黑色](image_fi/502482c08/f08001.png)'
- en: 'Figure 8-1: The telnet session should have a yellow banner'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-1：Telnet 会话应该显示黄色横幅
- en: If it’s not yellow, go back and make sure that the color was changed in the
    code correctly and that the file was saved. Also, you can use the `minikube kubectl
    get pods` command to verify that you have new Pods running. Make sure the age
    of the Pods goes back to within a short time after you saved the *banner.go* file.
    You should also look at the output in the terminal where `skaffold dev` is running,
    to detect any noticeable errors.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它不是黄色的，请回去确保代码中颜色已正确更改，并且文件已保存。此外，你可以使用 `minikube kubectl get pods` 命令来验证是否有新的
    Pods 正在运行。确保 Pods 的时间戳回到你保存 *banner.go* 文件后的短时间内。你还应该查看运行 `skaffold dev` 的终端输出，以发现任何明显的错误。
- en: Testing a Rollback
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试回滚
- en: There will be times when you need to roll back the application you have deployed.
    This can be due to many reasons, from problematic code to misalignment between
    product and engineering. Let’s say you wanted to go back to the release where
    the welcome banner was green. You would have two choices. On the one hand, you
    could make the necessary code change to set the banner back to green and put the
    application back through the CI/CD pipeline again. On the other hand, you could
    roll back the Deployment to the older version, where the DFTD banner is green.
    We’ll explore the latter option.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你需要回滚已部署的应用程序。这可能是由于多种原因，比如代码有问题，或者产品与工程之间的不匹配。假设你想回到欢迎横幅是绿色的版本，你会有两个选择。一方面，你可以做必要的代码修改，把横幅重新设置为绿色，并再次将应用程序放回
    CI/CD 流水线。另一方面，你也可以将 Deployment 回滚到旧版本，那个版本的 DFTD 横幅是绿色的。我们将探讨后者选项。
- en: If the troubled application does not pose any immediate service disruption or
    cause ongoing customer impacts, you should make a hotfix for the code and follow
    your release cycle through your CI/CD pipeline. But what if this bug (error) caused
    a service disruption to your customers as soon as you deployed the code? You might
    not have time to wait for a thorough investigation to happen and a hotfix to run
    through the pipeline. But Kubernetes provides a way to roll back a Deployment,
    and other resources, to a previous revision. So in this case, you’ll roll back
    only one revision, to when the banner was green.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现问题的应用程序不会立即导致服务中断或对客户产生持续影响，那么你应该为代码做一个热修复，并通过 CI/CD 流水线跟随发布周期。但如果这个 bug（错误）在你部署代码后立刻导致了服务中断呢？你可能没有时间等待彻底的调查以及热修复通过流水线运行。但是
    Kubernetes 提供了一种方法，允许你将 Deployment 和其他资源回滚到之前的版本。所以在这种情况下，你只需要回滚一个版本，回到横幅是绿色的时候。
- en: 'First, check the rollout history. Every time you deploy new code, Kubernetes
    tracks the Deployments and saves the resource state at that given time. Enter
    the following in a terminal to fetch the Deployment history for `telnet-server`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，检查部署历史记录。每次你部署新的代码时，Kubernetes 会跟踪 Deployment 并保存那个时刻的资源状态。输入以下命令在终端中获取 `telnet-server`
    的部署历史：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If you have been following along without any hiccups, the output should show
    two tracked Deployments. Currently, `REVISION` `2` is active. Notice the `CHANGE-CAUSE`
    column has `<none>`. That is because you did not tell Kubernetes to record the
    change. Using the `--record` flag when running `kubectl apply` makes Kubernetes
    record which command triggered the `deploy`. Don’t worry about using --`record`
    for this book. Depending on how many times you deployed the manifests from Chapter
    7 or how many times you ran `skaffold dev`, your `REVISION` numbers may be different.
    The actual number doesn’t matter here; you’re just going back to the previous
    revision.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在没有任何问题的情况下跟随操作，输出应该显示两个被跟踪的 Deployments。目前，`REVISION` `2` 是活动版本。注意，`CHANGE-CAUSE`
    列显示 `<none>`。这是因为你没有告诉 Kubernetes 记录变更。在运行 `kubectl apply` 时使用 `--record` 标志可以让
    Kubernetes 记录触发 `deploy` 的命令。对于本书来说，不必担心使用 `--record`。根据你从第七章部署清单的次数，或者你运行了多少次
    `skaffold dev`，你的 `REVISION` 数字可能不同。实际的数字并不重要；你只是需要回到之前的版本。
- en: 'Let’s force a rollback from the command line to `REVISION` `1`, which should
    reapply the manifests used in the first `deploy`, when the banner was green. The
    `kubectl rollout` command has an `undo` subcommand for this case:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从命令行强制回滚到 `REVISION` `1`，这应该会重新应用第一次 `deploy` 时使用的清单，那时横幅是绿色的。`kubectl rollout`
    命令有一个 `undo` 子命令，用于这种情况：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can leave off the `--to-revision=1` flag, as the default is to roll back
    to the previous revision. I added it here in case you ever need to roll back to
    a revision that was not the previous one.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以省略 `--to-revision=1` 标志，因为默认情况下是回滚到上一个版本。我在这里添加它，以防你需要回滚到不是上一个版本的修订。
- en: 'In a few seconds, the previous release should be running and accepting new
    connections. Verify this by running the `minikube kubectl get pods` command to
    show the Pods are new and have been running for only a few seconds:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，之前的版本应该开始运行并接受新连接。通过运行 `minikube kubectl get pods` 命令来验证这一点，以确保 Pods 是新的，并且只运行了几秒钟：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: These Pods’ names have changed, and the Pods have been running for only 29 seconds,
    which is what you’d expect after just rolling them back.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 Pods 的名称已经改变，并且这些 Pods 仅运行了 29 秒，这是在刚刚回滚后你所期望的情况。
- en: 'Now, check the banner’s color. Make sure the `minikube tunnel` command is still
    running, and then enter the `telnet` command into the application one more time:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，检查横幅的颜色。确保 `minikube tunnel` 命令仍在运行，然后再次在应用程序中输入 `telnet` 命令：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If everything went well, your DFTD banner should be green again.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你的 DFTD 横幅应该再次变为绿色。
- en: If you run the `rollout history` command again, the current revision deployed
    will be `3`, and the previous revision, when the banner was yellow, will be `2`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你再次运行 `rollout history` 命令，当前部署的版本将是 `3`，而当横幅为黄色时的前一个版本将是 `2`。
- en: You now know how to do an emergency rollback in Kubernetes, to recover from
    any immediate service disruption. This technique can be useful when your organization
    focuses on *mean time to recovery (MTTR**)*, which basically means how long it
    takes for a service to go from “down” to “up” from a customer’s point of view.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在知道如何在 Kubernetes 中进行紧急回滚，以从任何即时的服务中断中恢复。这项技术在你的组织关注*平均恢复时间 (MTTR**)*时特别有用，这基本上意味着从客户的角度看，服务从“宕机”到“恢复正常”所需要的时间。
- en: Other CI/CD Tooling
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他 CI/CD 工具
- en: Development pipelines are complex pieces of your infrastructure. In my quest
    to break them down in a simple manner, I’ve oversimplified some aspects. However,
    my main goal has been to show you how to create a simple pipeline to test and
    deploy code on a local Kubernetes cluster. You can also use this same pattern
    in nonlocal setups, like the ones in AWS or Google. The common strands that bind
    these processes together are portability and the use of a single file to describe
    the pipeline for an application. This means that if your pipeline YAML file works
    locally, it should also work on remote infrastructure.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 开发管道是你基础设施中复杂的组成部分。在我努力以简单方式讲解这些内容的过程中，我可能简化了一些方面。然而，我的主要目标是向你展示如何创建一个简单的管道，在本地
    Kubernetes 集群中测试和部署代码。你也可以在非本地环境中使用这种模式，比如在 AWS 或 Google 上的设置。这些过程的共同点是可移植性和使用单一文件来描述应用程序的管道。这意味着如果你的管道
    YAML 文件在本地运行正常，它也应该能在远程基础设施上运行。
- en: That said, it might be helpful to describe some tools that are popular in the
    CI/CD space. There are more tools available that I can count, but popular ones
    include Jenkins, ArgoCD, and GitLab CI/CD. Of these, Jenkins is probably the most
    widely used, and it can operate both CI and CD for VMs, containers, and any other
    artifact you’re using. There are also a lot of widely available community plug-ins
    that make Jenkins extensible, but a lot of security issues come with them. Be
    diligent about updating plug-ins and looking out for issues.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，描述一些在 CI/CD 领域流行的工具可能会有所帮助。可用的工具比我能列举的还要多，但流行的工具包括 Jenkins、ArgoCD 和 GitLab
    CI/CD。其中，Jenkins 可能是最广泛使用的，它可以同时进行 CI 和 CD 操作，适用于虚拟机、容器以及你正在使用的任何其他工件。还有很多广泛可用的社区插件，使
    Jenkins 可扩展，但它们也带来了一些安全问题。务必注意更新插件，并留意潜在的安全问题。
- en: Jenkins can deploy to any infrastructure and use any version control for code
    repositories. Argo CD, on the other hand, is a Kubernetes deployment tool that
    focuses only on the `deploy` phase. It can do canary or blue-green deployments
    out of the box, and it comes with a nice command line tool to manage the infrastructure.
    You can hook Argo CD into your pipeline after CI is done. Finally, GitLab CI/CD
    offers a full-featured pipeline (like Jenkins) that leverages Gitlab’s version
    control product to manage code repositories. It was designed for DevOps and includes
    almost everything you need to get up and running in a modern infrastructure stack.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins可以部署到任何基础设施，并使用任何版本控制的代码仓库。而Argo CD则是一个专注于`部署`阶段的Kubernetes部署工具。它可以开箱即用进行金丝雀发布或蓝绿部署，并且提供了一个很棒的命令行工具来管理基础设施。在CI阶段完成后，你可以将Argo
    CD集成到流水线中。最后，GitLab CI/CD提供了一个功能齐全的流水线（类似于Jenkins），它利用GitLab的版本控制产品来管理代码仓库。它是为DevOps设计的，几乎包括了在现代基础设施栈中启动并运行所需的一切。
- en: Although these tools do a good job of empowering you to have a pipeline, it
    is important to separate the philosophy behind CI/CD from the tools used in this
    space. The truth is, each organization you work at may or may not use the tools
    or processes described here. The methodologies, rather than the individual tools
    themselves, are what’s important. No matter what tools you use, the main goal
    behind CI/CD is to validate and deliver code in small, predictable iterations,
    thus reducing the chance of errors or defects.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些工具能够很好地帮助你构建流水线，但将CI/CD背后的理念与此领域中使用的工具分开是很重要的。事实是，每个你工作的组织可能会使用或不使用这里描述的工具或流程。重要的是方法论，而不是单个工具本身。无论使用什么工具，CI/CD的主要目标是以小而可预测的迭代验证并交付代码，从而减少错误或缺陷的发生概率。
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter introduced you to continuous integration and continuous deployment
    methodologies. The CI/CD pipeline you created used two tools to `build`, `test`,
    and `deploy` code. This allowed you to automate an application’s lifecycle in
    a Kubernetes cluster. You also learned about a rollback feature built into Kubernetes
    that makes it easy to recover quickly from errant code or misconfigured releases.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了持续集成和持续部署方法。你创建的CI/CD流水线使用了两个工具来`构建`、`测试`和`部署`代码。这使你能够在Kubernetes集群中自动化应用程序的生命周期。你还了解了Kubernetes中内置的回滚功能，这使得从错误的代码或配置错误的发布中快速恢复变得更加容易。
- en: This concludes Part II, which has focused on containerization and orchestration.
    You now can build and deploy a simple application inside a Kubernetes cluster.
    Going forward, we’ll shift gears and discuss observability, with a focus on metrics,
    monitoring, and alerting. We’ll also explore common troubleshooting scenarios
    you will find on a host or network, plus the tools you can use to diagnose them.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着第二部分的结束，第二部分集中于容器化和编排。现在你可以在Kubernetes集群中构建并部署一个简单的应用程序。接下来，我们将转换话题，讨论可观测性，重点是指标、监控和告警。我们还将探讨在主机或网络上常见的故障排除场景，以及你可以用来诊断这些问题的工具。
