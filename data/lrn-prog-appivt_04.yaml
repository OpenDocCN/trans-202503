- en: '**4'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**4'
- en: 'MULTIPLICATION STATION: MAKING DECISIONS WITH CODE**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**乘法站：通过代码做决策**'
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common.jpg)'
- en: 'In programming, you can use three structures to control the flow of a program:
    sequence, selection, and repetition. With the *sequence structure*, which is the
    default and simplest of the three options, code is executed in order, line by
    line. So far you’ve been using the sequence structure to create apps.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中，您可以使用三种结构来控制程序的流程：顺序、选择和重复。使用*顺序结构*，这是三者中默认且最简单的一种，代码会按顺序逐行执行。到目前为止，您一直在使用顺序结构来创建应用程序。
- en: Unlike the sequence structure, the *selection* or *conditional structure* enables
    an app to make decisions by testing for a condition with a Boolean expression.
    A Boolean expression evaluates to a Boolean value, using *relational* or *comparison*
    operators like =, ≤, and ≥, to test the conditions. Because a Boolean value can
    only be either true or false, we execute one sequence of code if the condition
    is true and another if it’s false.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 与顺序结构不同，*选择*或*条件结构*使应用程序能够通过布尔表达式测试条件来做出决策。布尔表达式通过使用*关系*或*比较*运算符，如=、≤和≥，来测试条件。因为布尔值只能为真或假，所以当条件为真时，我们执行一段代码，条件为假时执行另一段代码。
- en: The *repetition structure* also tests a Boolean condition and runs a sequence
    of code repeatedly while the condition is true, which is called *looping*. We’ll
    use the repetition structure in [Chapter 6](ch06.xhtml#ch06).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*重复结构* 也会测试一个布尔条件，并在条件为真时反复执行一段代码，这就是所谓的*循环*。我们将在[第六章](ch06.xhtml#ch06)中使用重复结构。'
- en: '**THE SELECTION CONTROL STRUCTURE**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**选择控制结构**'
- en: In this chapter, we’ll program apps to make decisions by comparing conditions
    using the `if then` blocks in the Control blocks drawer. We’ll combine them with
    comparison operator blocks from the Logic and Math drawers to compare values.
    Then, we’ll execute different blocks of code depending on whether the comparisons
    are true or false.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过使用控制块中的`if then`块来编写程序，以通过比较条件来做出决策。我们将它们与来自逻辑和数学块的比较运算符块结合使用，比较数值。然后，我们会根据比较结果的真或假，执行不同的代码块。
- en: '**USING AN IF THEN BLOCK IN THE “FRUIT LOOT” GAME**'
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**在“水果战利品”游戏中使用IF THEN块**'
- en: In the “Fruit Loot” game in [Chapter 3](ch03.xhtml#ch03), we could have used
    an `if then` block to streamline some of our code. Remember that we programmed
    the action the app should take when an `ImageSprite` hits the picker, as shown
    here.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第三章](ch03.xhtml#ch03)的“水果战利品”游戏中，我们本可以使用`if then`块来简化我们的代码。请记住，我们已经编程了当`ImageSprite`与选择器碰撞时，应用程序应该执行的操作，如图所示。
- en: '![Image](../images/f0060-01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0060-01.jpg)'
- en: We should have included code in this event handler to make any sprite that collided
    with the picker disappear. But we couldn’t, because we didn’t yet know how to
    use the selection control structure to figure out exactly which sprite hit the
    picker and hide it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本应在这个事件处理程序中加入代码，使任何与选择器碰撞的精灵消失。但我们没有这么做，因为我们还不知道如何使用选择控制结构来确定到底是哪个精灵碰到了选择器并将其隐藏。
- en: Instead, we repeated `CollidedWith` event handlers for each fruit `ImageSprite`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们为每个水果`ImageSprite`重复了`CollidedWith`事件处理程序。
- en: '![Image](../images/f0060-02.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0060-02.jpg)'
- en: That’s a lot of blocks! With the selection control structure, however, we don’t
    have to use three duplicate fruit `ImageSprite CollidedWith` event handlers to
    figure out which fruit `ImageSprite` hit the picker and make it disappear.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些块可真不少！然而，使用选择控制结构后，我们就不需要使用三个重复的水果`ImageSprite CollidedWith`事件处理程序来确定是哪个水果`ImageSprite`碰到了选择器并使其消失。
- en: 'Here is the *pseudocode*, or simple, plain English version of the code that
    determines which sprite hit the picker:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是代码的*伪代码*，或者是一个简单的、平易近人的英文版本，用于确定哪个精灵碰到了选择器：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To re-create this pseudocode, we’ll add an `if then` block to the picker `ImageSprite`’s
    `CollidedWith` event handler, as shown in [Figure 4-1](ch04.xhtml#ch4fig1).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了重新创建这个伪代码，我们将向选择器`ImageSprite`的`CollidedWith`事件处理程序中添加一个`if then`块，如[图4-1](ch04.xhtml#ch4fig1)所示。
- en: '![Image](../images/04fig01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/04fig01.jpg)'
- en: '*Figure 4-1: “Fruit Loot” blocks to find and hide the ImageSprite that hits
    the picker*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4-1：“水果战利品”块，查找并隐藏与选择器碰撞的ImageSprite*'
- en: To add the new blocks, go to the “Fruit Loot” game Blocks Editor and place the
    if then block ➊ inside the whenPickerSprite.CollidedWith block next to the word
    `do`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加新的块，请进入“水果战利品”游戏的块编辑器，并将if then块 ➊放入whenPickerSprite.CollidedWith块内，紧挨着`do`字样。
- en: You should see that the default `if then` block allows only one `if` and one
    `then` input. To add more inputs, click the blue mutator icon to the left of `if`,
    as shown in [Figure 4-2](ch04.xhtml#ch4fig2).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到默认的`if then`块只允许一个`if`和一个`then`输入。要添加更多输入，点击`if`左侧的蓝色变更图标，如[图4-2](ch04.xhtml#ch4fig2)所示。
- en: '![Image](../images/04fig02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/04fig02.jpg)'
- en: '*Figure 4-2: Adding else if and else sockets to the if then block*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4-2：为if then块添加else if和else插座*'
- en: In the dialog that opens, drag an else if block and then an else block into
    the if block.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在打开的对话框中，拖入一个else if块，然后再拖入一个else块到if块中。
- en: '**Checking Whether Colliding Fruit Is FruitSprite1**'
  id: totrans-25
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**检查碰撞的水果是否是FruitSprite1**'
- en: The `PickerSprite`’s `CollidedWith` event handler provides the `other` event
    parameter, which represents the fruit `ImageSprite` that collided with the picker.
    Whenever an `ImageSprite` hits the picker, you compare `other` to `FruitSprite1`
    to determine if `FruitSprite1` is the sprite that hit the picker. If so, the blocks
    set the `Visible` property of `FruitSprite1` to `false` to make it disappear.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`PickerSprite`的`CollidedWith`事件处理程序提供了`other`事件参数，该参数表示与捡取器碰撞的水果`ImageSprite`。每当`ImageSprite`碰撞到捡取器时，你将`other`与`FruitSprite1`进行比较，以确定`FruitSprite1`是否是碰撞到捡取器的精灵。如果是，代码块将设置`FruitSprite1`的`Visible`属性为`false`，使其消失。'
- en: To place the blocks for this behavior, from the Logic blocks drawer, drag in
    an = comparison operator block ➋ next to the word `if`. To fill the `=` block’s
    operand sockets, mouse over the `other` event parameter above the mutator icon
    until you see a `get other` block ➌, then drag that block into the left socket.
    Then click FruitSprite1 in the Blocks pane and drag the FruitSprite1 block ➍ into
    the right socket. Next, in the Blocks pane, click FruitSprite1 again and drag
    in the setFruitSprite1.Visibleto block ➎ next to the word `then`. Finally, snap
    a false block ➏ from the Logic blocks drawer to the right of the setFruitSprite1.Visibleto
    block.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要放置此行为的代码块，请从逻辑代码块面板中，拖入一个=比较操作符块➋，并将其放置在`if`的旁边。要填充`=`块的操作数插座，将鼠标悬停在变更图标上方的`other`事件参数上，直到看到`get
    other`块➌，然后将其拖动到左插座。接着，点击代码块面板中的FruitSprite1，将FruitSprite1块➍拖动到右插座。接下来，在代码块面板中，再次点击FruitSprite1并拖入setFruitSprite1.Visibleto块➎，将其放置在`then`旁边。最后，从逻辑代码块面板中拖入一个`false`块➏，并将其放置在setFruitSprite1.Visibleto块的右侧。
- en: '**Checking Whether Colliding Fruit Is FruitSprite2**'
  id: totrans-28
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**检查碰撞的水果是否是FruitSprite2**'
- en: If `FruitSprite1` is not the fruit that hit the picker, we check for our second
    condition by comparing `other` to `FruitSprite2`. Copy the blocks at ➋ through
    ➍ in [Figure 4-1](ch04.xhtml#ch4fig1), place the duplicate blocks next to the
    words `else if`, and use the drop-down arrow to change FruitSprite1 to FruitSprite2
    in the right operand socket of the duplicate `=` comparison operator block.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`FruitSprite1`不是碰撞到捡取器的水果，我们通过将`other`与`FruitSprite2`进行比较，检查第二个条件。在[图4-1](ch04.xhtml#ch4fig1)中的➋到➍的代码块，复制这些代码块并将它们放在`else
    if`的旁边，使用下拉箭头将FruitSprite1更改为FruitSprite2，修改重复的`=`比较操作符块的右操作数插座。
- en: Then copy the blocks at ➎ and ➏, place the duplicate blocks next to the word
    `then`, and use the drop-down arrow to change FruitSprite1 to FruitSprite2 in
    the duplicate setter block. Now, when an `ImageSprite` other than `FruitSprite1`
    hits the picker, these blocks compare `other` to `FruitSprite2` to determine if
    `FruitSprite2` is the sprite that hit the picker. If so, these blocks set its
    `Visible` property to `false` to make it disappear.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后复制➎和➏的代码块，将重复的代码块放置在`then`的旁边，并使用下拉箭头将FruitSprite1更改为FruitSprite2，放入重复的设置器块中。现在，当`ImageSprite`（除了`FruitSprite1`之外）碰撞到捡取器时，这些代码块会将`other`与`FruitSprite2`进行比较，以确定`FruitSprite2`是否是碰撞到捡取器的精灵。如果是，代码块将设置`FruitSprite2`的`Visible`属性为`false`，使其消失。
- en: '**Checking Whether Colliding Fruit Is FruitSprite3**'
  id: totrans-31
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**检查碰撞的水果是否是FruitSprite3**'
- en: Finally, copy the blocks at ➎ and ➏ again, place the duplicate blocks next to
    the word `else`, and use the drop-down arrow to change FruitSprite1 to FruitSprite3
    in the duplicate setter block. These last two blocks should execute only if neither
    `FruitSprite1` nor `FruitSprite2` matches `other` as the fruit `ImageSprite` that
    collided with the picker. In that case, `FruitSprite3`, the only sprite left,
    must have hit the picker and will disappear.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，再次复制➎和➏的代码块，将重复的代码块放置在`else`的旁边，并使用下拉箭头将FruitSprite1更改为FruitSprite3，放入重复的设置器块中。这最后两个代码块应该仅在`FruitSprite1`和`FruitSprite2`都不匹配`other`（即与捡取器碰撞的水果`ImageSprite`）时执行。那时，`FruitSprite3`是唯一剩下的精灵，它一定是碰撞到捡取器的，并将消失。
- en: Instead of creating three different `CollidedWith` event handlers for the fruit
    `ImageSprite`s, we refactor our code and use one `if then` block to handle multiple
    conditions. You now can delete the three original `CollidedWith` event handlers
    for the fruit `ImageSprites`, and, when you test the “Fruit Loot” app, it should
    work exactly the same.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再为水果`ImageSprite`创建三个不同的`CollidedWith`事件处理程序，而是重构代码，使用一个`if then`块来处理多个条件。现在，你可以删除原先的三个`CollidedWith`事件处理程序，在测试“水果战利品”应用时，它应该表现得完全一样。
- en: '**BUILDING THE “MULTIPLICATION STATION” APP**'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建“乘法站”应用**'
- en: Now that you’ve seen how `if then` blocks work, let’s create the “Multiplication
    Station” quiz app. To build the app, you’ll use `if then` blocks, along with the
    `Clock` timer, random numbers, and arithmetic operators to generate multiplication
    problems. You’ll also learn how to create an app that has more than one screen
    and experiment with the `TextToSpeech` and `Notifier` components to communicate
    with app users.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经了解了`if then`块的工作方式，让我们创建“乘法站”测验应用。为了构建这个应用，你将使用`if then`块，以及`Clock`计时器、随机数和算术运算符来生成乘法问题。你还将学习如何创建具有多个屏幕的应用，并尝试使用`TextToSpeech`和`Notifier`组件与应用用户进行互动。
- en: Log into App Inventor, create a new project, name it MultiplicationStation,
    and click **OK**.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到App Inventor，创建一个新项目，命名为MultiplicationStation，并点击**确定**。
- en: '**DECOMPOSING “MULTIPLICATION STATION”**'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**分解“乘法站”**'
- en: 'We can decompose the “Multiplication Station” app into five steps:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将“乘法站”应用分解为五个步骤：
- en: When the user opens the app, play a welcome message and show the start button.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户打开应用时，播放欢迎信息并显示开始按钮。
- en: When the user clicks the start button, open the practice screen.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户点击开始按钮时，打开练习屏幕。
- en: When the `Clock` timer fires, display a random multiplication problem and an
    empty text box for the user to input the answer, and add 1 to the total number
    of problems.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当`Clock`计时器触发时，显示一个随机的乘法问题和一个空文本框供用户输入答案，并将总问题数加1。
- en: When the user clicks the check answer button, check the answer and indicate
    whether it’s right or wrong if an answer exists. If no answer exists, display
    an alert.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户点击检查答案按钮时，检查答案并指示答案是否正确，如果存在答案。如果没有答案，显示警报。
- en: When the user clicks the end button, stop displaying problems and change the
    user interface to show only the final numeric and percentage practice scores.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户点击结束按钮时，停止显示问题，并将用户界面更改为仅显示最终的数字和百分比练习分数。
- en: 'You’ll need the following components:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下组件：
- en: Button (3) for the user to click to manually start and end practice and check
    answers
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮（3），用户可以点击手动开始和结束练习并检查答案
- en: Clock to fire after the user clicks the start button to display math problems
    at a 5-second interval
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时钟（Clock）在用户点击开始按钮后触发，按5秒间隔显示数学问题
- en: HorizontalArrangement to hold the answer `TextBox`, the check answer button,
    and the answer result `Label`
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HorizontalArrangement，用于容纳答案`TextBox`、检查答案按钮和答案结果`Label`
- en: Label (3) to display math problems, answer results, and scores
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Label（3），用于显示数学问题、答案结果和分数
- en: Notifier to display an alert to the user
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Notifier，用于向用户显示警报
- en: Screen (2) for the welcome screen and the practice screen
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 屏幕（2），用于欢迎屏幕和练习屏幕
- en: TextBox for the user to input answers
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TextBox，供用户输入答案
- en: TextToSpeech (2) to say the welcome message and declare answers right or wrong
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TextToSpeech（2），用于播报欢迎信息并声明答案对错
- en: Variable (7) to store problems, answers, and scores
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量（7），用于存储问题、答案和分数
- en: VerticalArrangement to hold all practice screen user interface components
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VerticalArrangement，用于容纳所有练习屏幕的用户界面组件
- en: Now let’s lay out the app in the Designer.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在设计器中布局应用。
- en: '**LAYING OUT “MULTIPLICATION STATION” IN THE DESIGNER**'
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**在设计器中布局“乘法站”**'
- en: 'Rather than briefly showing and hiding our introductory information like we
    did in [Chapter 2](ch02.xhtml#ch02)’s “Practice Makes Perfect” app, we’ll use
    two different screens in this app: one to welcome the user and the other to display
    problems and evaluate the user’s answers.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们在[第2章](ch02.xhtml#ch02)的“实践成就完美”应用中那样简短地展示和隐藏引导信息不同，我们将在这个应用中使用两个不同的屏幕：一个用于欢迎用户，另一个用于显示问题并评估用户的答案。
- en: '**SETTING UP THE WELCOME SCREEN**'
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置欢迎屏幕**'
- en: To lay out `Screen1`, the welcome screen, drag a Button from the User Interface
    drawer and a non-visible TextToSpeech component from the Media drawer.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要布置`Screen1`，欢迎界面，首先从用户界面抽屉中拖动一个按钮和一个来自媒体抽屉的不可见TextToSpeech组件。
- en: '[Figure 4-3](ch04.xhtml#ch4fig3) shows what the welcome screen should look
    like.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[图4-3](ch04.xhtml#ch4fig3)展示了欢迎屏幕应有的样子。'
- en: '![Image](../images/04fig03.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig03.jpg)'
- en: '*Figure 4-3: The Viewer, Component, and Media panes after laying out Screen1
    of “Multiplication Station”*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4-3：在“乘法车站”中布局Screen1后的查看器、组件和媒体面板*'
- en: 'In the Components pane click Screen1. Then, in the Properties pane, adjust
    its vertical alignment so the `Button` sits at the bottom of the screen by clicking
    the drop-down arrow under AlignVertical and selecting **Bottom: 3**. Then add
    a background image to the screen by clicking the text box under BackgroundImage
    and following the image upload instructions outlined in “Uploading a Picture”
    on [page 27](ch02.xhtml#page_27). Finally, remove the check marks under ShowStatusBar
    and TitleVisible to hide the status bar and the title of the screen, `Screen1`,
    when the app runs.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件面板中点击Screen1。然后，在属性面板中，调整其垂直对齐方式，使`Button`位于屏幕底部，方法是点击垂直对齐下的下拉箭头，选择**底部：3**。接着，点击背景图像下的文本框并按照“上传图片”中描述的步骤为屏幕添加背景图像，详情请见[第27页](ch02.xhtml#page_27)。最后，去掉显示状态栏和标题可见下的勾选，以便在应用运行时隐藏状态栏和屏幕`Screen1`的标题。
- en: Now, let’s style the `Button` that starts the app. Click Button1 in the Components
    pane. Then, in the Properties pane, change the background color to black by clicking
    **Default** under BackgroundColor and then clicking **Black** when the color list
    dialog opens. Next, bold its text by clicking the checkbox under FontBold, and
    change its shape by clicking the drop-down arrow under Shape and selecting **rounded**.
    Next, input Start Practicing in the text box under **Text**. To make the text
    white, click **Default** under TextColor and then **White** when the color list
    dialog opens.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为启动应用的`Button`设置样式。在组件面板中点击Button1。然后，在属性面板中，通过点击背景颜色下的**默认**，再点击颜色列表对话框中出现的**黑色**来更改背景颜色。接着，通过勾选字体加粗下的复选框来加粗其文本，并通过点击形状下的下拉箭头选择**圆角**来更改其形状。然后，在**文本**下的文本框中输入“开始练习”。为了将文本改为白色，点击文本颜色下的**默认**，然后在颜色列表对话框中点击**白色**。
- en: Now let’s create `Screen2`, where most of your app’s action will happen.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建`Screen2`，这是大部分应用操作将发生的地方。
- en: '**CREATING THE PRACTICE SCREEN**'
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建练习屏幕**'
- en: To create `Screen2`, click the **Add Screen…** button above the Viewer. When
    the New Screen dialog opens, click **OK**, and you’ll be taken to a brand new
    screen.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建`Screen2`，点击查看器上方的**添加屏幕...**按钮。当新屏幕对话框打开时，点击**确定**，你将进入一个全新的屏幕。
- en: Now, in the Properties pane, we’ll center `Screen2` horizontally and vertically
    so that all components we place on it will be centered. To do this, click the
    drop-down arrows under both AlignHorizontal and AlignVertical and select **Center**.
    Next, add a background image to the screen by clicking the text box under BackgroundImage
    and following the image upload procedure. Finally, click the checkbox under TitleVisible
    to remove the check mark and keep the title of the screen from showing at the
    top of the app when it runs.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在属性面板中，我们将水平和垂直居中`Screen2`，这样我们放置在上面的所有组件都将居中。为此，点击水平对齐和垂直对齐下的下拉箭头，选择**居中**。接下来，点击背景图像下的文本框并按照图像上传过程为屏幕添加背景图像。最后，点击标题可见下的复选框去掉勾选，以防止在应用运行时显示屏幕标题。
- en: '**Problem Display**'
  id: totrans-69
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**问题显示**'
- en: Now let’s set up the components the user can see and interact with, by dragging
    the components from the Palette pane in the order that we want them to appear
    onscreen. Let’s also adjust these components as we add them.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过从面板中拖动组件并按顺序放置它们来设置用户可以看到并与之交互的组件。我们还将在添加这些组件时进行调整。
- en: First, drag a VerticalArrangement from the Layout drawer, and center its contents
    horizontally and vertically by clicking the drop-down arrows under both AlignHorizontal
    and AlignVertical and selecting **Center**. Then, change the height of `VerticalArrangement1`
    so it takes up half the vertical screen. To do so, click the text box under **Height**,
    and, when the dialog opens, input 50 in the text box next to the word `percent`
    and click **OK**. Finally, set its **Width** to **Fill parent**.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从布局抽屉中拖动一个垂直排列，然后通过点击水平对齐和垂直对齐下的下拉箭头，选择**居中**来将其内容水平和垂直居中。然后，改变`VerticalArrangement1`的高度，使其占据屏幕的上半部分。为此，点击**高度**下的文本框，在对话框打开时，在“百分比”旁的文本框中输入50，然后点击**确定**。最后，将其**宽度**设置为**填充父级**。
- en: Now we’ll drag all of the remaining visible components into `VerticalArrangement1`.
    Drag a Label from the User Interface drawer into VerticalArrangement1, click the
    **Rename** button to rename it as ProblemLbl, and click **OK**. Next, click the
    **FontBold** checkbox to make the text on `ProblemLbl` bold, input 25 in the **FontSize**
    text box to make the text larger, and replace the default `Text for Label1` by
    inputting Problems appear here in the **Text** text box.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将所有剩余可见组件拖入`VerticalArrangement1`。从用户界面抽屉中拖动一个标签到VerticalArrangement1，点击**重命名**按钮，将其重命名为ProblemLbl，然后点击**确定**。接着，点击**FontBold**复选框，使`ProblemLbl`上的文本加粗，在**FontSize**文本框中输入25，使文本变大，并在**Text**文本框中输入"Problems
    appear here"，替换默认的`Text for Label1`。
- en: '**Answer Text Box and Check Answer Button**'
  id: totrans-73
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**回答文本框和检查答案按钮**'
- en: Next, drag a HorizontalArrangement from the Layout drawer into VerticalArrangement1
    under `ProblemLbl`. Select **Center** in both its AlignHorizontal and AlignVertical
    drop-down boxes and set its **Width** to **Fill parent**.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，从布局抽屉中将一个HorizontalArrangement拖到VerticalArrangement1的`ProblemLbl`下方。在其AlignHorizontal和AlignVertical的下拉框中选择**Center**，并将其**Width**设置为**Fill
    parent**。
- en: Now, drag three components from the User Interface drawer into HorizontalArrangement1.
    First, drag in a TextBox and rename it AnswerBox. Make its width 100 pixels by
    clicking the text box under **Width**, inputting 100 in the text box to the left
    of the word `pixels`, and clicking **OK**. Next, replace the `Hint for TextBox1`
    in the **Hint** text box by entering Type your answer. Although you can’t see
    this text in the Viewer, the user should see the hint in `AnswerBox` on the screen.
    Finally, click the checkbox under NumbersOnly, which will allow users to enter
    only numbers into `AnswerBox`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从用户界面抽屉中将三个组件拖到HorizontalArrangement1中。首先，拖动一个文本框并将其重命名为AnswerBox。通过点击**Width**下的文本框，在“pixels”字样左侧的文本框中输入100，并点击**确定**，将其宽度设置为100像素。接着，在**Hint**文本框中将`Hint
    for TextBox1`替换为输入你的答案。虽然在查看器中看不到这段文本，但用户应该能在屏幕上的`AnswerBox`中看到提示。最后，勾选NumbersOnly复选框，这将允许用户在`AnswerBox`中只输入数字。
- en: Drag a Button into HorizontalArrangement1 to the right of AnswerBox and rename
    it CheckAnswerBtn. Then replace the default `Text for Button1` on `CheckAnswerBtn`
    by inputting Check Answer in the **Text** text box. This is the button users will
    click to check their answers.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个按钮拖到HorizontalArrangement1的AnswerBox右侧，并将其重命名为CheckAnswerBtn。接着，在**Text**文本框中输入"Check
    Answer"，以替换`Text for Button1`。这是用户点击以检查答案的按钮。
- en: Finally, drag a Label into HorizontalArrangement1 to the right of CheckAnswerBtn,
    rename it ResultLbl, and delete the default `Text for Label1` from its **Text**
    text box. This label will remain invisible until it displays “Correct!” or “Incorrect”
    answer results.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将一个标签拖到HorizontalArrangement1的CheckAnswerBtn右侧，将其重命名为ResultLbl，并删除**Text**文本框中默认的`Text
    for Label1`。该标签在显示“Correct！”或“Incorrect”答案结果之前将保持不可见。
- en: '**End and Score Button**'
  id: totrans-78
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**结束和得分按钮**'
- en: To display the score and percentage of answers correct, place a Label into VerticalArrangement1
    under `HorizontalArrangement1`, and rename it ScoreLbl. Make the text bold and
    italic by clicking the checkboxes under FontBold and FontItalic and larger by
    entering 20 in the **FontSize** text box. Also, delete the default `Text for Label1`
    from the **Text** text box so no text will show when the screen opens.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示得分和正确答案的百分比，将一个标签放置到VerticalArrangement1的`HorizontalArrangement1`下方，并将其重命名为ScoreLbl。通过点击FontBold和FontItalic复选框使文本加粗和斜体，并通过在**FontSize**文本框中输入20来使文本变大。此外，删除**Text**文本框中默认的`Text
    for Label1`，这样在屏幕打开时就不会显示任何文本。
- en: To create a button users can click to stop practicing and see their final scores,
    drag another Button into VerticalArrangement1 under `ScoreLbl` and rename it EndBtn.
    Style it exactly like `Button1` on `Screen1`. Change the background color to black
    by selecting **Black** under BackgroundColor, make its text bold by clicking the
    checkbox under FontBold, and change its shape by clicking the drop-down arrow
    under Shape and selecting **rounded**. Then, enter End + Get Percentage in the
    text box under **Text**, and make the text white by selecting **White** under
    TextColor.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个用户可以点击的按钮来停止练习并查看最终得分，拖动另一个按钮到`ScoreLbl`下方的VerticalArrangement1，并将其重命名为EndBtn。将其样式设置得与`Screen1`上的`Button1`完全一样。通过选择**Black**作为背景颜色来将其背景色更改为黑色，点击**FontBold**复选框使文本加粗，点击形状下拉箭头并选择**rounded**来更改其形状。然后，在**Text**文本框中输入"End
    + Get Percentage"，并通过选择**White**来将文本颜色设置为白色。
- en: 'Finally, let’s drag in the non-visible components: a Notifier component from
    the User Interface drawer, another TextToSpeech component from the Media drawer,
    and a Clock component from the Sensors drawer. Change the `Clock`’s timer interval
    to 5 seconds by replacing the default `1000` with 5000 in the **TimerInterval**
    text box so a new problem will display every 5 seconds.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们拖入不可见的组件：来自用户界面面板的通知组件、来自媒体面板的另一个`TextToSpeech`组件，以及来自传感器面板的时钟组件。将`Clock`的计时器间隔更改为
    5 秒钟，方法是将默认的`1000`替换为5000，在**TimerInterval**文本框中，这样每 5 秒钟就会显示一个新问题。
- en: Now, in the Viewer pane, all visible components should show on `Screen2`, and
    the non-visible components—`Notifier1`, `TextToSpeech1`, and `Clock1`—should show
    under the screen. In the Components and Media panes, you should see a list of
    all components and images added, as shown in [Figure 4-4](ch04.xhtml#ch4fig4).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在查看器面板中，所有可见的组件应该显示在`Screen2`上，而不可见的组件——`Notifier1`、`TextToSpeech1`和`Clock1`——应该显示在屏幕下方。在组件和媒体窗格中，你应该看到一个列出了所有已添加组件和图像的列表，如[图
    4-4](ch04.xhtml#ch4fig4)所示。
- en: '![Image](../images/04fig04.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig04.jpg)'
- en: '*Figure 4-4: The Viewer, Component, and Media panes after laying out Screen2
    of “Multiplication Station”*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-4：在布局“乘法站”Screen2后，查看器、组件和媒体窗格*'
- en: Now that you’ve laid out all components, you’re ready to program the app!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经布置好了所有组件，可以开始编程应用程序了！
- en: '**PROGRAMMING “MULTIPLICATION STATION”**'
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程“乘法站”**'
- en: For “Multiplication Station,” we’ll need five event handlers for the two screens.
    Three respond to events generated by the user’s button clicks. One directs the
    app’s action after a timer goes off at the time interval we’ve set. The other
    triggers action when the screen initializes or opens. We’ll also create seven
    variables to store important information, and we’ll use an `if then` block that
    has another `if then` block nested within it.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“乘法站”，我们需要为两个屏幕设置五个事件处理器。三个响应用户点击按钮时生成的事件。一个在我们设置的时间间隔时钟响起后控制应用程序的动作。另一个在屏幕初始化或打开时触发动作。我们还将创建七个变量来存储重要信息，并将使用一个`if
    then`块，其中嵌套另一个`if then`块。
- en: Click the **Blocks** button to switch to the Blocks Editor to begin programming.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**块**按钮切换到块编辑器，开始编程。
- en: '**STEP 1: PLAYING THE WELCOME MESSAGE**'
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**步骤 1：播放欢迎信息**'
- en: Let’s start by telling the app what to do when `Screen1` opens—namely, we want
    the `TextToSpeech` component to say the app’s welcome message. The following code
    shows the event handler to program this behavior in step 1.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从告诉应用程序在`Screen1`打开时该做什么开始——也就是说，我们希望`TextToSpeech`组件说出应用程序的欢迎信息。以下代码展示了在第一步中编程该行为的事件处理器。
- en: '![Image](../images/f0068-01.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0068-01.jpg)'
- en: Switch back to `Screen1` by selecting Screen1 in the drop-down box to the right
    of the project’s name. In the Blocks pane, click Screen1 and drag the whenScreen1.Initialize
    event handler block ➊ to the Viewer. Then, click TextToSpeech1 in the Blocks pane
    and drag its callTextToSpeech1.Speak built-in method block ➋ next to the word
    `do`. Next, in the Blocks pane, click the **Text** blocks drawer and drag an empty
    string block ➌ (the first block in the drawer), next to the word `message`, into
    the socket for the method’s `message` parameter.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择项目名称右侧下拉框中的`Screen1`来切换回`Screen1`。在块面板中，点击`Screen1`并将`whenScreen1.Initialize`事件处理块
    ➊ 拖到查看器中。然后，在块面板中点击`TextToSpeech1`，并将其调用`TextToSpeech1.Speak`内置方法块 ➋ 拖到`do`字旁边。接下来，在块面板中点击**Text**块面板，将一个空字符串块
    ➌（面板中的第一个块）拖到`message`参数的插槽中。
- en: 'The `message` parameter is required by the `TextToSpeech1 Speak` method in
    order for the app to speak. Add that `message` by clicking the empty string block’s
    text area and entering the following: Welcome to Multiplication Station! You will
    have 5 seconds to answer each problem. Click the Start Practicing button to begin.
    Altogether, these blocks program step 1 of the app, greeting the user with a spoken
    welcome message when the app opens.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`message`参数是`TextToSpeech1 Speak`方法所必需的，目的是让应用程序发声。通过点击空字符串块的文本区域并输入以下内容来添加该`message`：欢迎来到乘法站！你将有
    5 秒钟的时间来回答每个问题。点击“开始练习”按钮开始。总的来说，这些块编程实现了应用程序的第一步，在应用程序打开时通过语音向用户问候。'
- en: '**STEP 2: MOVING TO THE PRACTICE SCREEN**'
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**步骤 2：跳转到练习屏幕**'
- en: In addition to hearing the welcome message, users should see `Button1`, which
    they can click to display the multiplication problems in `Screen2`. The following
    blocks handle this step.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 除了听到欢迎信息，用户还应该看到`Button1`，点击它可以在`Screen2`中显示乘法问题。以下块处理此步骤。
- en: '![Image](../images/f0068-02.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0068-02.jpg)'
- en: Click Button1 in the Blocks pane and drag the whenButton1.Click block ➊ to the
    Viewer. Place the open another screen block ➋ inside the whenButton1.Click block
    next to the word `do`. From the Text blocks drawer, drag in another empty string
    block ➌ and snap it onto the open another screen block. Enter Screen2 (the exact
    name of the screen we want to open) inside the empty string block. Now when the
    user clicks `Button1`, the app should open `Screen2` just like we planned.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在“Blocks”面板中点击Button1，并将“whenButton1.Click”代码块 ➊ 拖动到“Viewer”中。将“open another
    screen”代码块 ➋ 放入“whenButton1.Click”代码块的“do”旁边。从“Text”代码块抽屉中，拖入另一个空字符串代码块 ➌ 并将其放置在“open
    another screen”代码块上。将“Screen2”（我们要打开的屏幕的精确名称）输入到空字符串代码块中。现在，当用户点击`Button1`时，应用程序应该按照我们的计划打开`Screen2`。
- en: To see how these blocks work, switch back to Screen1 and let’s live-test with
    a device, as outlined in “Live-Testing Your Apps” on [page xxii](intro.xhtml#page_xxii).
    Once you click **Connect** ▸ **AI Companion** in the top menu bar and scan the
    QR code with your phone’s AI2 Companion app, the “Multiplication Station” app
    should open on your phone. As long as the blocks are placed correctly, you should
    hear the welcome message and, after clicking `Button1`, you should see `Screen2`.
    For now, nothing else should happen. Close AI2 Companion for now, and we’ll reconnect
    when we test again.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了查看这些代码块的运行效果，返回到“Screen1”，并按照《实时测试你的应用程序》中的说明，通过设备进行实时测试，详细内容参见[第xxii页](intro.xhtml#page_xxii)。当你点击顶部菜单栏的**“Connect”**
    ▸ **“AI Companion”**并使用手机的AI2 Companion应用扫描二维码时，“Multiplication Station”应用应该会在你的手机上打开。只要代码块放置正确，你应该会听到欢迎信息，并且在点击`Button1`后，应该会看到`Screen2`。现在，其他操作不应该发生。暂时关闭AI2
    Companion，我们稍后会重新连接以再次测试。
- en: '**STEP 3: DISPLAYING RANDOM MULTIPLICATION PROBLEMS**'
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**步骤3：显示随机乘法问题**'
- en: Let’s now program step 3 of the app, where we display a random multiplication
    problem every 5 seconds. When this happens, we’ll count each problem to keep a
    running total. Make sure you’re in the Blocks Editor for `Screen2` to program
    this step.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来编写应用程序的第3步，即每5秒钟显示一个随机的乘法问题。当这种情况发生时，我们会对每个问题进行计数，以保持一个总数。确保你处于`Screen2`的“Blocks
    Editor”中来编写这一步的代码。
- en: '**Setting Global Variables**'
  id: totrans-101
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**设置全局变量**'
- en: 'We’ll use three global variables in this step: `a` and `b` to store the numbers
    in the multiplication problems and `problems` to store the total number of problems.
    We’ll create and initialize the global variables as shown here.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，我们将使用三个全局变量：`a`和`b`用来存储乘法问题中的数字，`problems`用来存储问题的总数。我们将像这样创建并初始化这些全局变量。
- en: '![Image](../images/f0069-01.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0069-01.jpg)'
- en: For each variable, click the **Variables** block drawer and drag an initialize
    global name block ➊ to the Viewer, click name, and replace it with the name of
    the variable. Then drag a 0 number block ➋ from the Math drawer and snap it onto
    the initialize global block. Because all three variables are global, they can
    be used by all our event handlers and they stand alone in our code, outside of
    all our event handler blocks.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个变量，点击**“Variables”**代码块抽屉，将“initialize global name”代码块 ➊ 拖动到“Viewer”中，点击“name”并将其替换为变量的名称。然后从“Math”代码块抽屉中拖动一个0数字代码块
    ➋，并将其放置在“initialize global”代码块上。因为这三个变量都是全局变量，所以它们可以在所有事件处理程序中使用，并且它们在我们的代码中是独立存在的，不属于任何事件处理程序块。
- en: '**Choosing Random Numbers to Multiply**'
  id: totrans-105
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**选择要相乘的随机数字**'
- en: Next, we’ll program the `Clock`’s timer. Because we kept the default setting
    for the `Clock`’s `TimerEnabled` property in the Designer, the timer should automatically
    begin firing at 5-second intervals once `Screen2` opens. The following event handler
    blocks tell the app what to do each time the timer fires.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将编写`Clock`的定时器程序。因为在设计器中我们保持了`Clock`的`TimerEnabled`属性的默认设置，所以当`Screen2`打开时，定时器应该会自动以5秒的间隔开始触发。以下事件处理程序代码块会在每次定时器触发时告诉应用程序该做什么。
- en: '![Image](../images/f0069-02.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0069-02.jpg)'
- en: In the Blocks pane, click Clock1 and, when the blocks for the component appear,
    drag the whenClock1.Timer block ➊ to the Viewer. Next, in the Blocks pane, click
    the **Variables** blocks drawer, drag the set global a to block ➋ to the Viewer,
    and snap it inside the whenClock1.Timer block next to the word `do`. Then click
    the **Math** blocks drawer and drag a random integer block ➌ to the right of the
    set global a to block.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在“Blocks”面板中，点击“Clock1”，当组件的代码块出现时，将“whenClock1.Timer”代码块 ➊ 拖动到“Viewer”中。接下来，在“Blocks”面板中，点击**“Variables”**代码块抽屉，将“set
    global a to”代码块 ➋ 拖动到“Viewer”中，并将其放置在“whenClock1.Timer”代码块内，靠近“do”字样的位置。然后点击**“Math”**代码块抽屉，将一个“random
    integer”代码块 ➌ 拖动到“set global a to”代码块的右侧。
- en: The random integer block will generate a random integer between a specified
    range of numbers. To set this range, leave the `1` in the left socket of the random
    integer block as is ➍, click the 100 in the right socket, and replace it by entering
    12 ➎.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 随机整数块将生成一个在指定范围内的随机整数。要设置这个范围，保持随机整数块左侧插槽中的`1`不变 ➍，点击右侧插槽中的100，并将其替换为输入12 ➎。
- en: So far we’ve set the value for variable `a`, the random number on the left side
    of each multiplication problem that will show in the app. To set the number for
    variable `b`, the right side of the multiplication problems, copy the blocks at
    ➋ through ➎, place the duplicate blocks under the original, and use the drop-down
    arrow to change a to b ➏ in the duplicate set global block.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经设置了变量`a`的值，这个值是每个乘法问题左侧的随机数字，将在应用中显示。为了设置变量`b`的数字，乘法问题的右侧，复制从➋到➎的块，将复制的块放在原块下方，并使用下拉箭头在复制的`set
    global`块中将`a`改为`b` ➏。
- en: '**Displaying the Problems**'
  id: totrans-111
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**显示问题**'
- en: Now we’ll add the blocks to the `Timer` event handler that display the multiplication
    problems to the user in `ProbemLbl`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将添加块到`Timer`事件处理程序中，以便将乘法问题显示给用户，并放入`ProbemLbl`中。
- en: '![Image](../images/f0070-01.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0070-01.jpg)'
- en: In the Blocks pane, click ProbemLbl, drag the setProblemLbl.Textto block ➊ to
    the Viewer, and snap it inside the whenClock1.Timer block under the `set global
    b to` block. Then click the **Text** blocks drawer, drag a join block ➋ to the
    Viewer, and snap it to the right of the setProblemLbl.Textto block. This allows
    us to join the random number values of the `a` and `b` variables and the multiplication
    operator, ×, into one string. For example, if `a` = 3 and `b` = 6, we want to
    join them with the operator to display 3 × 6.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在“块”窗格中，点击`ProbemLbl`，拖动`setProblemLbl.Textto`块 ➊到查看器中，并将其固定在`set global b to`块下的`whenClock1.Timer`块内。然后点击**文本**块抽屉，拖动一个`join`块
    ➋到查看器中，并将其固定在`setProblemLbl.Textto`块的右侧。这允许我们将`a`和`b`变量的随机数值以及乘法运算符×连接成一个字符串。例如，如果`a`
    = 3 且 `b` = 6，我们希望将它们与运算符连接，显示为3 × 6。
- en: First, we’ll add another string input to the two default inputs in the `join`
    block. To do this, click the blue mutator icon to the left of the word `join`,
    and drag one additional string block to the join block in the dialog that opens.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在`join`块的两个默认输入框中添加另一个字符串输入框。为此，点击`join`左侧的蓝色变换图标，然后在弹出的对话框中拖动一个额外的字符串块到`join`块中。
- en: Then, for the `join` block’s top input, click the **Variables** blocks drawer
    and drag in the get global a block ➌. For the `join` block’s second input, drag
    in an empty string block ➍ from the Text blocks drawer, click the empty string
    block’s text area, and enter x (with spaces before and after the `x`). Then, for
    the `join` block’s bottom input, click the **Variables** blocks drawer again and
    drag in the get global b block ➎. Now, every 5 seconds, these blocks will get
    new random values for `a` and `b`, join them with the multiplication operator,
    and display the multiplication problem in `ProbemLbl`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，对于`join`块的顶部输入框，点击**变量**块抽屉，并拖动一个`get global a`块 ➌。对于`join`块的第二个输入框，从文本块抽屉中拖动一个空字符串块
    ➍，点击空字符串块的文本区域并输入x（在`x`前后加上空格）。然后，对于`join`块的底部输入框，再次点击**变量**块抽屉并拖动一个`get global
    b`块 ➎。现在，每5秒钟，这些块将获取`a`和`b`的新随机值，将它们与乘法运算符连接，并在`ProbemLbl`中显示乘法问题。
- en: '**Counting the Number of Problems Displayed**'
  id: totrans-117
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**计数已显示的问题数量**'
- en: To keep a running total of the number of problems, we need the app to count
    each problem as it’s displayed. The next blocks in the `Timer` event handler program
    this.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持问题数量的总和，我们需要让应用在每次显示问题时进行计数。接下来的块将在`Timer`事件处理程序中实现这一功能。
- en: '![Image](../images/f0070-02.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0070-02.jpg)'
- en: Click the **Variables** blocks drawer, drag the set global problems to block
    ➊ to the Viewer, and snap it inside the whenClock1.Timer block under the `setProblemLbl.Textto`
    block. Then drag an addition operator block ➋ from the Math drawer and snap it
    to the right of the set global problems to block. Now click the **Variables**
    blocks drawer again and drag the get global problems block ➌ into the addition
    block’s left operand socket and a 1 number block ➍ from the Math drawer into its
    right operand socket. These blocks keep a running total of the problems displayed
    by adding 1 to the current value of the `problems` variable every 5 seconds, each
    time a new multiplication problem appears onscreen.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**变量**块抽屉，将 set global problems to 块 ➊ 拖入 Viewer，并将其插入到 `setProblemLbl.Textto`
    块下的 whenClock1.Timer 块内部。然后从数学块抽屉中拖动一个加法运算符块 ➋，并将其放置在 set global problems to 块的右侧。现在再次点击**变量**块抽屉，将
    get global problems 块 ➌ 拖入加法块的左操作数插槽，再从数学块抽屉中拖入一个 1 数字块 ➍ 并将其放置到右操作数插槽中。这些块通过每
    5 秒钟将 `problems` 变量的当前值加 1，持续计算并展示当前的数学问题。
- en: '**Refreshing the AnswerBox, ResultLbl, and CheckAnswerBtn**'
  id: totrans-121
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**刷新 AnswerBox、ResultLbl 和 CheckAnswerBtn**'
- en: 'We need the app to do three more things each time the `Timer` fires and it
    displays a new math problem:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 每当 `Timer` 触发并显示一个新的数学问题时，我们需要应用程序做三件事情：
- en: Erase any text left in `AnswerBox` so the user has a clean box to input answers
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清空 `AnswerBox` 中的任何文本，以便用户可以在一个干净的框中输入答案。
- en: Remove the “Correct!” or “Incorrect” text displayed in response to any prior
    answer
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除任何先前答案的“正确！”或“不正确”文本。
- en: Enable the `CheckAnswerBtn`, which we’ll later program the app to temporarily
    disable after the user clicks it
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 `CheckAnswerBtn`，我们稍后将编程让应用在用户点击后暂时禁用该按钮。
- en: The following blocks accomplish these three tasks.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下块实现了这三项任务。
- en: '![Image](../images/f0071-01.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0071-01.jpg)'
- en: Let’s prepare the app to accept an answer to a new problem and equip its `CheckAnswerBtn`
    to check that answer. Click AnswerBox in the Blocks pane, drag its setAnswerBox.Textto
    block ➊ to the Viewer, and snap it inside the whenClock1.Timer block under the
    `set global problems to` block. Then click the **Text** blocks drawer, drag in
    an empty string block ➋, and snap it to the right of the setAnswerBox.Textto block.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们准备好应用接受新问题的答案，并让 `CheckAnswerBtn` 来检查该答案。点击“Blocks”面板中的 AnswerBox，将其 setAnswerBox.Textto
    块 ➊ 拖入 Viewer，并将其插入到 `set global problems to` 块下的 whenClock1.Timer 块内部。然后点击**文本**块抽屉，拖入一个空字符串块
    ➋，并将其放置在 setAnswerBox.Textto 块的右侧。
- en: Click ResultLbl in the Blocks pane, drag its setResultLbl.Textto block ➌ to
    the Viewer, and snap it inside the whenClock1.Timer block under the `setAnswerBox.Textto`
    block. Then click the **Text** blocks drawer, drag in another empty string block
    ➍, and snap it to the right of the setResultLbl.Textto block.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在“Blocks”面板中点击 ResultLbl，拖动其 setResultLbl.Textto 块 ➌ 到 Viewer，并将其插入到 `setAnswerBox.Textto`
    块下的 whenClock1.Timer 块内部。接着点击**文本**块抽屉，拖入另一个空字符串块 ➍，并将其放置在 setResultLbl.Textto
    块的右侧。
- en: Click CheckAnswerBtn in the Blocks pane, drag its setCheckAnswerBtn.Enabledto
    block ➎ to the Viewer, and snap it inside the whenClock1.Timer block under the
    `setResultLbl.Textto` block. Then click the **Logic** blocks drawer, drag in a
    true block ➏, and snap it to the right of the setCheckAnswerBtn.Enabledto block.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在“Blocks”面板中点击 CheckAnswerBtn，拖动其 setCheckAnswerBtn.Enabledto 块 ➎ 到 Viewer，并将其插入到
    `setResultLbl.Textto` 块下的 whenClock1.Timer 块内部。接着点击**逻辑**块抽屉，拖入一个 true 块 ➏，并将其放置在
    setCheckAnswerBtn.Enabledto 块的右侧。
- en: Now live-test to see how these blocks work. If the AI2 Companion button is grayed
    out when you attempt to reconnect the AI2 Companion app, click **Connect** ▸ **Reset
    Connection** in the top menu bar. Then, click **Connect** ▸ **AI** **Companion**
    and scan the QR code with your device’s AI2 Companion app. You should still see
    `Screen2` since you’re connecting AI2 Companion while working on your `Screen2`
    blocks.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在进行实时测试，看看这些块是如何工作的。如果在尝试重新连接 AI2 Companion 应用时，AI2 Companion 按钮被禁用，点击顶部菜单栏中的**连接**
    ▸ **重置连接**。然后，点击**连接** ▸ **AI Companion**，并使用设备的 AI2 Companion 应用扫描二维码。你应该仍然能看到
    `Screen2`，因为你在工作时连接了 AI2 Companion。
- en: Five seconds after the app opens, you should see a multiplication problem appear
    in place of “Problems appear here” and then see a new problem every 5 seconds
    after that. Also, if you enter numbers in `AnswerBox`, they should disappear after
    5 seconds. If you don’t see any multiplication problems, the problems don’t show
    as desired, or the answers don’t disappear after each 5-second interval, debug
    your code and test again.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序启动后5秒钟，你应该看到一个乘法题替代“Problems appear here”显示出来，之后每5秒钟显示一个新问题。同时，如果你在`AnswerBox`中输入数字，它们应该在5秒后消失。如果你没有看到任何乘法题，问题没有按照预期显示，或者答案在每个5秒的间隔后没有消失，调试你的代码并再次测试。
- en: Next, we’ll tell the app what to do when the user clicks the Check Answer button.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将告诉应用程序当用户点击“检查答案”按钮时该做什么。
- en: '**STEP 4: CHECKING ANSWERS**'
  id: totrans-134
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**第4步：检查答案**'
- en: Let’s program step 4 of the app, where the user clicks `CheckAnswerBtn`. First,
    we want to determine whether the user has entered anything into `AnswerBox`. If
    so, we’ll program the app to evaluate the answer and indicate whether it’s wrong
    or right by speaking and displaying the result in a label. If the answer’s right,
    the app increases the score by 1\. If, on the other hand, the user clicks `CheckAnswerBtn`
    without entering anything into `AnswerBox`, the app displays an alert. In this
    step, you’re *validating* user input, which means checking whether the user has
    entered the type of data required. Programmers commonly validate user form input
    and use it only if it’s valid or notify the user if it’s not.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写应用程序的第4步，用户点击`CheckAnswerBtn`时的功能。首先，我们需要判断用户是否在`AnswerBox`中输入了内容。如果输入了，我们将编写代码使应用程序评估答案，并通过语音和在标签中显示结果来指示答案是否正确。如果答案正确，应用程序将把得分增加1。如果用户在没有输入任何内容的情况下点击`CheckAnswerBtn`，应用程序将显示一个警告。在这一步中，你是在*验证*用户输入，这意味着检查用户是否输入了所需的数据类型。程序员通常会验证用户表单输入，并且只有在输入有效时才使用它，或者在输入无效时通知用户。
- en: We’ll start our code for this step by creating and initializing three more global
    variables. Create the variables `answer`, `c`, and `score`. Then initialize `answer`
    to the value of an empty string block from the Text blocks drawer, and `c` and
    `score` to the value of `0`. The variables should look as shown here.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过创建和初始化三个全局变量来开始编写这一步的代码。创建`answer`、`c`和`score`这三个变量。然后将`answer`初始化为一个空字符串块（来自文本块抽屉），将`c`和`score`初始化为`0`。这些变量应该像下面这样。
- en: '![Image](../images/f0072-01.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0072-01.jpg)'
- en: We’ll use these variables to store the user’s answer (`answer`), the correct
    answer (`c`), and the user’s score (`score`).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这些变量来存储用户的答案（`answer`）、正确答案（`c`）和用户的得分（`score`）。
- en: '**Testing Our First Condition: Checking Whether an Answer Exists**'
  id: totrans-139
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**测试我们的第一个条件：检查是否存在答案**'
- en: Let’s now program the `CheckAnswerBtn` event handler, which includes two `if
    then` blocks, one nested within the `then` socket of the other. This means that
    if the first `if then` condition is true, the app will need to test another condition.
    The first `if then` block tests whether the user has entered any numbers into
    `AnswerBox`, providing one set of instructions for the app to follow if the user
    has entered numbers and different instructions if the box is empty.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们编写`CheckAnswerBtn`事件处理程序，其中包含两个`if then`块，一个嵌套在另一个的`then`插槽内。这意味着，如果第一个`if
    then`条件为真，应用程序将需要测试另一个条件。第一个`if then`块测试用户是否在`AnswerBox`中输入了任何数字，如果输入了数字，应用程序将执行一组指令，如果输入框为空，则执行另一组指令。
- en: If the user has entered an answer, the second `if then` block tests the answer
    and then tells the app what to do depending on whether it is right or wrong. Here
    is the code for programming this nested conditional.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户输入了答案，第二个`if then`块将检查答案，并根据答案是否正确告诉应用程序该怎么做。以下是编写这个嵌套条件的代码。
- en: '![Image](../images/f0073-01.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0073-01.jpg)'
- en: To place the blocks that test whether the user has entered an answer, click
    CheckAnswerBtn in the Blocks pane and drag the whenCheckAnswerBtn.Click block
    ➊ to the Viewer. Then, in the Blocks pane, click the **Control** blocks drawer,
    drag an if then block ➋ to the Viewer, and snap it inside the whenCheckAnswerBtn.Click
    block next to the word `do`. Since we’ll need an `else` statement for this conditional,
    click the `if then` block’s blue mutator icon, and drag an else block into the
    if then block in the dialog that opens.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要放置测试用户是否输入答案的模块，请在模块面板中点击CheckAnswerBtn，将其whenCheckAnswerBtn.Click模块 ➊ 拖入到查看器中。然后，在模块面板中点击**控制**模块抽屉，拖动一个if
    then模块 ➋ 到查看器中，并将其固定在whenCheckAnswerBtn.Click模块中的`do`旁边。由于我们将需要一个`else`语句来处理这个条件，请点击`if
    then`模块的蓝色变更器图标，并在弹出的对话框中将`else`模块拖入到if then模块内。
- en: Then, from the Logic blocks drawer, drag in an = comparison operator block ➌
    next to the word `if`, and click the drop-down arrow by the `=` sign to select
    the not equal sign, ≠. To fill the ≠ block’s operand sockets, click AnswerBox
    in the Blocks pane and drag its AnswerBox.Text block ➍ into the left socket, then
    click the **Text** blocks drawer and drag an empty string block ➎ into the right
    socket. We’ve now set up the test condition that checks whether `AnswerBox` is
    empty.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从逻辑模块抽屉中，拖动一个=比较运算符模块 ➌ 放置到`if`旁边，并点击`=`符号旁的下拉箭头选择“不等于”符号，≠。为了填充≠模块的操作数插槽，在模块面板中点击AnswerBox并将其AnswerBox.Text模块
    ➍ 拖入左侧插槽，然后点击**文本**模块抽屉，将一个空字符串模块 ➎ 拖入右侧插槽。我们现在已经设置好了检查`AnswerBox`是否为空的测试条件。
- en: '**Preparing to Evaluate the User’s Answers**'
  id: totrans-145
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**准备评估用户的答案**'
- en: Now we’ll tell the app what to do if `AnswerBox` isn’t blank (we’ll program
    what the app should do if it is blank later in this chapter). If `AnswerBox` isn’t
    blank, we want the app to disable `CheckAnswerBtn` so the user can’t click it
    again while the app’s checking the current answer. Then we want the app to set
    the value of the global `answer` variable to the number the user has entered into
    `AnswerBox` so the app can check it later, and to set the value of the global
    `c` variable to the value of global `a` multiplied by global `b`, which is the
    current problem’s correct answer. The following blocks program these three actions.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将告诉应用程序，如果`AnswerBox`不为空，应该执行什么操作（如果为空的处理逻辑将在本章稍后编写）。如果`AnswerBox`不为空，我们希望应用程序禁用`CheckAnswerBtn`，这样用户就不能在应用程序检查当前答案时再次点击它。然后，我们希望应用程序将全局`answer`变量的值设置为用户输入到`AnswerBox`中的数字，以便稍后进行检查，并将全局`c`变量的值设置为全局`a`与全局`b`相乘的结果，即当前问题的正确答案。以下模块编程实现了这三项操作。
- en: '![Image](../images/f0074-01.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0074-01.jpg)'
- en: Click CheckAnswerBtn in the Blocks pane, drag its setCheckAnswerBtn.Enabledto
    block ➊ to the Viewer, and snap it into the if then block next to the word `then`.
    Then click the **Logic** blocks drawer, drag in a false block ➋, and snap it to
    the right of the setCheckAnswerBtn.Enabledto block. This prevents the user from
    clicking `CheckAnswerBtn` again while the app’s checking an answer.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在模块面板中点击CheckAnswerBtn，将其setCheckAnswerBtn.Enabledto模块 ➊ 拖入到查看器中，并将其固定到`then`旁边的if
    then模块。然后点击**逻辑**模块抽屉，拖动一个false模块 ➋，并将其固定到setCheckAnswerBtn.Enabledto模块的右侧。这样可以防止用户在应用程序检查答案时再次点击`CheckAnswerBtn`。
- en: Next, click the **Variables** blocks drawer and drag the set global answer to
    block ➌ into the if then block under the `setCheckAnswerBtn.Enabledto` block.
    Then click AnswerBox in the Blocks pane, drag in its AnswerBox.Text block ➍, and
    snap it to the right of the set global answer to block. This sets the value of
    the `answer` variable to the number the user entered into `AnswerBox` so we can
    compare that number with the correct answer.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击**变量**模块抽屉，将设置全局答案的模块拖入`setCheckAnswerBtn.Enabledto`模块下的if then模块 ➌。然后在模块面板中点击AnswerBox，将其AnswerBox.Text模块
    ➍ 拖入并固定到设置全局答案模块的右侧。这将把`answer`变量的值设置为用户输入到`AnswerBox`中的数字，以便我们可以将该数字与正确答案进行比较。
- en: Now, click the **Variables** blocks drawer and drag the set global c to block
    ➎ into the if then block under the `set global answer to` block. Then click the
    **Math** blocks drawer, drag in the multiplication operator block ➏, and snap
    it to the right of the set global c to block. To fill the multiplication block’s
    operand sockets, click the **Variables** blocks drawer and drag the get global
    a block ➐ into the left socket and the get global b block ➑ into the right socket.
    These blocks set the value of variable `c` to the value of variable `a` multiplied
    by the value of variable `b`, which is the correct answer to the problem.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击 **Variables** 块抽屉，将 set global c to 块 ➎ 拖动到 `set global answer to` 块下方的
    if then 块中。然后点击 **Math** 块抽屉，拖动乘法运算符块 ➏ 并将其贴到 set global c to 块的右侧。为了填充乘法块的操作数插槽，点击
    **Variables** 块抽屉，将 get global a 块 ➐ 拖动到左侧插槽，再将 get global b 块 ➑ 拖动到右侧插槽。这些块将变量
    `c` 的值设置为变量 `a` 和变量 `b` 相乘的结果，这就是问题的正确答案。
- en: 'So far, the blocks say: if `AnswerBox` isn’t blank, disable `CheckAnswerBtn`,
    then set the value of `answer` to the number entered by the user, and set the
    value of `c` to the correct answer.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，块中显示的逻辑是：如果 `AnswerBox` 不为空，禁用 `CheckAnswerBtn`，然后将 `answer` 的值设置为用户输入的数字，并将
    `c` 的值设置为正确答案。
- en: '**Testing Our Second Condition: Evaluating the Answers**'
  id: totrans-152
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**测试第二个条件：评估答案**'
- en: Now we’ll tell the app to compare `answer` and `c` and then do one thing if
    they are equal, which means the user’s answer to the problem is correct, and another
    thing if they aren’t equal, which means the user’s answer is wrong.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将告诉应用程序比较 `answer` 和 `c`，如果它们相等，就执行一个操作，表示用户的答案正确；如果不相等，则执行另一个操作，表示用户的答案错误。
- en: We’ll start by placing the blocks that set up the second test condition.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从放置设置第二个测试条件的块开始。
- en: '![Image](../images/f0074-02.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0074-02.jpg)'
- en: In the Blocks pane, click the **Control** blocks drawer and drag another if
    then block ➊ to the Viewer inside the first if then block under the `set global
    c to` block. Then, click this new `if then` block’s blue mutator icon to the left
    of the word `if`, and drag an else block into the if then block in the dialog
    that opens.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Blocks 面板中，点击 **Control** 块抽屉，并将另一个 if then 块 ➊ 拖动到 Viewer 中，放置在 `set global
    c to` 块下方的第一个 if then 块内。然后，点击这个新建的 `if then` 块左侧的蓝色变更图标，拖动一个 else 块到打开的对话框中的
    if then 块中。
- en: Then, from the Math blocks drawer, drag in an = comparison operator block ➋
    next to the word `if`. To fill the `=` block’s operand sockets, click the **Variables**
    blocks drawer and drag the get global answer block ➌ into the left socket and
    the get global c block ➍ into the right socket. These blocks set up our second
    test condition and check whether the user’s answer matches the correct answer.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从 Math 块抽屉中拖动一个 = 比较操作符块 ➋ 到 `if` 字样旁。为了填充 `=` 块的操作数插槽，点击 **Variables** 块抽屉，将
    get global answer 块 ➌ 拖动到左侧插槽，再将 get global c 块 ➍ 拖动到右侧插槽。这些块设置了我们的第二个测试条件，并检查用户的答案是否与正确答案匹配。
- en: '**Handling Correct Answers**'
  id: totrans-158
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**处理正确答案**'
- en: The next blocks tell the app what to do if the value of the two variables is
    the same, meaning the user’s answer is correct.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的块将告诉应用程序如果两个变量的值相同，即用户的答案正确，应该执行什么操作。
- en: '![Image](../images/f0075-01.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0075-01.jpg)'
- en: Click TextToSpeech1 in the Blocks pane and drag its callTextToSpeech1.Speak
    block ➊ into the second if then block next to the word `then`. Set the argument
    for its `message` parameter to `Right` by snapping an empty string block ➋ from
    the Text drawer next to the word `message`, clicking the string block’s text area,
    and entering Right.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Blocks 面板中点击 TextToSpeech1，并将其 callTextToSpeech1.Speak 块 ➊ 拖动到 `then` 字样旁边的第二个
    if then 块中。通过从 Text 抽屉拖动一个空字符串块 ➋ 到 `message` 字段旁，将 `message` 参数设置为 `Right`，然后点击字符串块的文本区域并输入
    Right。
- en: Next, click ResultLbl in the Blocks plane and drag its setResultLbl.TextColorto
    block ➌ into the second if then block under the `callTextToSpeech1.Speak` block.
    Then click the **Colors** blocks drawer, drag in the green color block ➍, and
    snap it to the right of the setResultLbl.TextColorto block.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击 Blocks 面板中的 ResultLbl，并将其 setResultLbl.TextColorto 块 ➌ 拖动到 `callTextToSpeech1.Speak`
    块下方的第二个 if then 块中。然后点击 **Colors** 块抽屉，拖动绿色颜色块 ➍，并将其贴到 setResultLbl.TextColorto
    块的右侧。
- en: Now click ResultLbl in the Blocks plane again and drag its setResultLbl.Textto
    block ➎ into the second if then block under the `setResultLbl.TextColorto` block.
    Click the **Text** blocks drawer, drag in an empty text string block ➏, snap it
    to the right of the setResultLbl.Textto block, and enter Correct! into the text
    string block’s text area. If the user’s answer is correct, these blocks direct
    the app to say so and show the result in green in the `Label`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再次点击 Blocks 面板中的 ResultLbl，并将其 setResultLbl.Textto 块 ➎ 拖动到 `setResultLbl.TextColorto`
    块下的第二个 if then 块中。点击 **Text** 块抽屉，拖动一个空的文本字符串块 ➏，将其对接到 setResultLbl.Textto 块的右侧，并在文本字符串块的文本区域输入
    "Correct!"。如果用户的答案正确，这些块会指示应用程序这样做，并将结果以绿色显示在 `Label` 中。
- en: Let’s pause now to live-test again. If you’ve placed the blocks as shown, after
    you enter correct answers to problems and click `CheckAnswerBtn`, you should hear
    the device say “Right” and see the word “Correct!” in green text to the right
    of `CheckAnswerBtn`. Also, if you try to click `CheckAnswerBtn` again before the
    app checks your answer, the button shouldn’t work. Nothing should happen yet when
    you enter an incorrect answer. Make sure this part of the app is working correctly
    before continuing.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们暂停一下，再次进行现场测试。如果你已经按照所示放置了这些块，在输入正确答案并点击 `CheckAnswerBtn` 后，你应该会听到设备说“Right”，并看到
    "Correct!" 以绿色文本显示在 `CheckAnswerBtn` 右侧。另外，如果你在应用程序检查你的答案之前尝试再次点击 `CheckAnswerBtn`，按钮应该无法操作。输入错误答案时，仍然不会有任何反应。确保这一部分应用程序正常工作后，再继续进行下一步。
- en: '**Increasing the Score**'
  id: totrans-165
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**增加分数**'
- en: The next blocks increment and display the user’s score, which means we first
    need the app to count each answer the user gets right.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的块会增加并显示用户的分数，这意味着我们首先需要让应用程序统计每个用户答对的题目。
- en: '![Image](../images/f0075-02.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0075-02.jpg)'
- en: To program this, click the **Variables** blocks drawer, drag the set global
    score to block ➊ to the Viewer, and snap it inside the second if then block under
    the `setResultLbl.Textto` block. Then drag an addition operator block ➋ from the
    Math drawer and snap it to the right of the set global score to block. Now click
    the **Variables** blocks drawer again, and drag the get global score block ➌ into
    the addition block’s left operand socket and a 1 number block from the **Math**
    drawer ➍ into its right operand socket. These blocks add 1 to the current value
    of the `score` variable each time the user answers a problem correctly.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编程此部分，点击 **Variables** 块抽屉，拖动 set global score to 块 ➊ 到 Viewer，并将其对接到 `setResultLbl.Textto`
    块下的第二个 if then 块中。然后从 Math 抽屉中拖动一个加法运算符块 ➋，将其对接到 set global score to 块的右侧。现在再次点击
    **Variables** 块抽屉，拖动 get global score 块 ➌ 进入加法块的左操作数插座，再从 **Math** 抽屉中拖动一个 1 数字块
    ➍ 进入其右操作数插座。这些块会在用户每次正确回答问题时，将 1 加到 `score` 变量的当前值上。
- en: The next blocks display the user’s score in `ScoreLbl`. In the Blocks pane,
    click ScoreLbl, drag the setScoreLbl.Textto block ➎ to the Viewer, and snap it
    inside the second if then block under the `set global score to` block. Then click
    the **Text** blocks drawer, drag a join block ➏ to the Viewer, and snap it to
    the right of the setScoreLbl.Textto block.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的块会在 `ScoreLbl` 中显示用户的分数。在 Blocks 面板中，点击 ScoreLbl，拖动 setScoreLbl.Textto 块
    ➎ 到 Viewer，并将其对接到 `set global score to` 块下的第二个 if then 块中。然后点击 **Text** 块抽屉，拖动一个
    join 块 ➏ 到 Viewer，并将其对接到 setScoreLbl.Textto 块的右侧。
- en: 'For the `join` block’s top input, drag in an empty string block ➐ from the
    Text blocks drawer, click the string block’s text area, and enter Your Score:
    (including a space after the colon). Then, for the `join` block’s bottom input,
    click the **Variables** blocks drawer and drag in the get global score block ➑.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '对于 `join` 块的上方输入，拖动一个空的字符串块 ➐ 从 Text 块抽屉中，点击字符串块的文本区域，输入 "Your Score: "（冒号后带一个空格）。然后，对于
    `join` 块的下方输入，点击 **Variables** 块抽屉，拖动 get global score 块 ➑。'
- en: Let’s pause here to live-test again. If you’ve placed the blocks as shown, after
    you enter correct answers to problems and click `CheckAnswerBtn`, you should see
    the score display under `AnswerBox` in `ScoreLbl`. Nothing should happen yet when
    you enter an incorrect answer. Make sure this part of the app is working correctly
    before you move on.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们暂停一下，再次进行现场测试。如果你已经按照所示放置了这些块，在输入正确答案并点击 `CheckAnswerBtn` 后，你应该会看到 `AnswerBox`
    下方的 `ScoreLbl` 中显示分数。输入错误答案时，不应有任何反应。确保这一部分应用程序正常工作后，再继续进行下一步。
- en: '**Handling Incorrect Answers**'
  id: totrans-172
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**处理错误答案**'
- en: The blocks in the prior section told the app what to do when the user answers
    a problem correctly. The blocks shown here complete the `else` portion of the
    second `if then else` block and guide the app’s behavior when the user’s answer
    is wrong.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 之前部分的块告诉应用程序，当用户回答问题正确时该做什么。这些显示的块完成了第二个`if then else`块的`else`部分，并引导应用程序在用户的答案错误时的行为。
- en: '![Image](../images/f0076-01.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0076-01.jpg)'
- en: First we’ll place the blocks that make the app speak to tell the user the answer
    is wrong. Click TextToSpeech1 in the Blocks pane and drag its callTextToSpeech1.Speak
    block ➊ into the second if then block next to the word `else`. Set its message
    to “Wrong” by snapping an empty string block ➋ from the Text drawer next to the
    word `message`, clicking the string block’s text area, and entering Wrong.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将放置使应用程序发声的块，以告诉用户答案是错误的。点击块面板中的TextToSpeech1，并将其callTextToSpeech1.Speak块
    ➊拖到`else`旁边的第二个if then块中。通过从Text抽屉中将一个空字符串块 ➋拖到`message`旁边的空白区域，将其消息设置为“Wrong”，然后点击该字符串块的文本区域并输入Wrong。
- en: Next, click ResultLbl in the Blocks plane and drag its setResultLbl.TextColorto
    block ➌ into the second if then block under the second `callTextToSpeech1.Speak`
    block. Then click the **Colors** blocks drawer, drag in the pink color block ➍,
    and snap it to the right of the setResultLbl.TextColorto block.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击块面板中的ResultLbl，拖动其setResultLbl.TextColorto块 ➌到第二个if then块下的第二个`callTextToSpeech1.Speak`块中。然后点击**Colors**块抽屉，拖动粉色颜色块
    ➍，并将其连接到setResultLbl.TextColorto块的右侧。
- en: Then click ResultLbl in the Blocks pane again and drag its setResultLbl.Textto
    block ➎ into the second if then block under the second `setResultLbl.TextColorto`
    block. Now click the **Text** blocks drawer and drag in an empty text string block
    ➏, snap it to the right of the setResultLbl.Textto block, and enter Incorrect
    into the text string block’s text area. If the user’s answer is incorrect, these
    blocks have the app say so and show that result in pink in `ResultLbl`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 然后再次点击块面板中的ResultLbl，拖动其setResultLbl.Textto块 ➎到第二个`setResultLbl.TextColorto`块下的第二个if
    then块中。现在点击**Text**块抽屉，拖动一个空的文本字符串块 ➏，将其连接到setResultLbl.Textto块的右侧，并在文本字符串块的文本区域中输入Incorrect。如果用户的答案不正确，这些块将使应用程序说出这一点，并在`ResultLbl`中以粉色显示该结果。
- en: Try live-testing now by entering an incorrect answer and clicking CheckAnswerBtn.
    If you’ve placed the blocks as shown, you should now hear the device say “Wrong”
    and see the word “Incorrect” in pink text to the right of `CheckAnswerBtn`. Make
    sure this part of the app is working correctly before continuing.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 现在通过输入错误答案并点击CheckAnswerBtn进行实时测试。如果你按照示例放置了块，你现在应该能听到设备说“Wrong”，并看到“Incorrect”以粉色文本显示在`CheckAnswerBtn`的右侧。在继续之前，请确保应用程序的这一部分能够正确工作。
- en: '**Handling an Empty Answer Box**'
  id: totrans-179
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**处理空的答案框**'
- en: Until now, the blocks for this step have told the app what to do when the user
    clicks the `CheckAnswerBtn` after entering a number into `AnswerBox`. Now, with
    the following blocks, we tell the app what to do when the user clicks `CheckAnswerBtn`
    when `AnswerBox` is empty.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这些步骤中的块已经告诉应用程序，当用户在`AnswerBox`中输入数字并点击`CheckAnswerBtn`时应该做什么。现在，使用以下块，我们告诉应用程序当用户点击`CheckAnswerBtn`时，`AnswerBox`为空该如何处理。
- en: '![Image](../images/f0077-01.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0077-01.jpg)'
- en: Click Notifier1 and drag its callNotifier1.ShowAlert built-in method block ➊
    into the second `else` socket. Then, in the Blocks pane, click the **Text** blocks
    drawer and drag an empty string block ➋ into the socket for the method’s `notice`
    parameter.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 点击Notifier1，并将其callNotifier1.ShowAlert内置方法块 ➊拖到第二个`else`插槽中。然后，在块面板中，点击**Text**块抽屉，拖动一个空字符串块
    ➋到该方法`notice`参数的插槽中。
- en: This `notice` parameter holds information the method needs in order to show
    an alert. Add that `notice` by clicking the string block’s text area and entering
    No answer/Too late!. These blocks direct the app to display a small pop-up notice
    when the user clicks `CheckAnswerBtn` without entering an answer.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`notice`参数保存了方法需要的信息，以便显示一个警报。通过点击字符串块的文本区域并输入“No answer/Too late!”来添加该`notice`。这些块指示应用程序在用户点击`CheckAnswerBtn`但未输入答案时，显示一个小的弹出通知。
- en: 'Now that you’ve fully programmed `CheckAnswerBtn`, let’s live-test again. If
    you’ve placed the blocks as shown, once you’ve entered an answer and clicked `CheckAnswerBtn`,
    you should hear and see whether it’s right or wrong, and you should see the score
    displayed under `AnswerBox` in `ScoreLbl`. If you click `CheckAnswerBtn` and haven’t
    entered an answer in time, you should see a pop-up alert. If any part of this
    action is working incorrectly, debug your program. Once the Check Answer button
    is working correctly, close the AI2 Companion on your device, and let’s move on
    to program the last part of the app: the event handler for `EndBtn`.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经完全编写了`CheckAnswerBtn`的代码，让我们再次进行现场测试。如果你按照示例放置了积木，在输入答案并点击`CheckAnswerBtn`后，你应该能听到并看到答案是对还是错，并且应该看到分数显示在`AnswerBox`下方的`ScoreLbl`中。如果你点击了`CheckAnswerBtn`但没有及时输入答案，应该会看到一个弹出警告。如果这个操作的任何部分工作不正确，请调试你的程序。一旦`CheckAnswerBtn`按钮正常工作，关闭你设备上的AI2
    Companion，让我们继续编程应用的最后一部分：`EndBtn`的事件处理器。
- en: '**STEP 5: ENDING PRACTICE AND SHOWING THE FINAL SCORE**'
  id: totrans-185
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**第5步：结束练习并显示最终分数**'
- en: Let’s now program step 5 of the app, where the user presses `EndBtn` to stop
    practicing and see the final score as well as the percentage of problems answered
    correctly. We’ll create one additional global variable for this part, `percentage`,
    which you can initialize to the value of `0`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们编写应用的第5步代码，用户按下`EndBtn`停止练习并查看最终分数及正确问题的百分比。我们为这一部分创建一个额外的全局变量`percentage`，并将其初始化为`0`。
- en: '![Image](../images/f0077-02.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0077-02.jpg)'
- en: Now we can program the `EndBtn` event handler as shown here.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以按照下面的方式编程`EndBtn`事件处理器。
- en: '![Image](../images/f0078-01.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0078-01.jpg)'
- en: Once the user clicks the button, the first thing we need to do is stop new problems
    from showing every 5 seconds. To do this, click EndBtn in the Blocks pane and
    drag the whenEndBtn.Click block ➊ to the Viewer. Then click Clock1 in the Blocks
    pane, drag the setClock1.TimerEnabledto block ➋ to the Viewer, and snap it inside
    the whenEndBtn.Click block next to the word `do`. Then, in the Blocks pane, click
    the **Logic** blocks drawer, drag the false block ➌ to the Viewer, and snap it
    to the right side of the setClock1.TimerEnabledto block. These blocks disable
    the `Clock`’s timer so the app stops displaying new problems.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户点击按钮，我们需要做的第一件事是停止每5秒显示一个新问题。为此，点击积木面板中的`EndBtn`，将`whenEndBtn.Click`积木➊拖动到视图器中。然后点击`Clock1`，将`setClock1.TimerEnabledto`积木➋拖到视图器中，并将其放置在`whenEndBtn.Click`积木旁边的`do`位置。接着，在积木面板中，点击**逻辑**积木抽屉，拖动`false`积木➌到视图器中，并将其放置在`setClock1.TimerEnabledto`积木的右侧。这些积木会禁用`Clock`的计时器，从而停止显示新问题。
- en: '**Hiding Elements We Don’t Need**'
  id: totrans-191
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**隐藏不需要的元素**'
- en: We also want `ProblemLbl`, `HorizontalArrangement1` (which contains `AnswerBox`,
    `CheckAnswerBtn`, and `ResultLbl`), and `EndBtn` to disappear, since we no longer
    need them on the screen. Here are the blocks that hide components the user no
    longer needs.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还希望`ProblemLbl`、`HorizontalArrangement1`（包含`AnswerBox`、`CheckAnswerBtn`和`ResultLbl`）以及`EndBtn`消失，因为我们不再需要它们在屏幕上显示。以下是隐藏用户不再需要的组件的积木。
- en: '![Image](../images/f0078-02.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0078-02.jpg)'
- en: To program this behavior, click ProblemLbl in the Blocks pane, drag the setProblemLbl.Visibleto
    block ➊ to the Viewer, and snap it inside the whenEndBtn.Click block under the
    `setClock1.TimerEnabledto` block. Then, in the Blocks pane, click the **Logic**
    blocks drawer, drag the false block ➋ to the Viewer, and snap it to the right
    side of the setProblemLbl.Visibleto block.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 要编程这个行为，点击`ProblemLbl`在积木面板中，拖动`setProblemLbl.Visibleto`积木➊到视图器中，并将其放置在`whenEndBtn.Click`积木的`setClock1.TimerEnabledto`积木下。然后，在积木面板中，点击**逻辑**积木抽屉，拖动`false`积木➋到视图器中，并将其放置在`setProblemLbl.Visibleto`积木的右侧。
- en: These blocks reset the `Visible` property for `ProblemLbl` to `false` so that
    no problem shows after the user clicks `EndBtn`. Now place the blocks at ➌, ➍,
    ➎, and ➏ to do the same for `HorizontalArrangement1` and `EndBtn`, so that after
    clicking `EndBtn`, all the user will see on the screen is the score and percentage
    correct.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这些积木将`ProblemLbl`的`Visible`属性重置为`false`，这样当用户点击`EndBtn`后，问题就不会显示。现在将这些积木放置在➌、➍、➎和➏位置，应用于`HorizontalArrangement1`和`EndBtn`，这样当点击`EndBtn`后，用户在屏幕上看到的只会是分数和正确率。
- en: '**Calculating the Percentage of Correct Answers**'
  id: totrans-196
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**计算正确答案的百分比**'
- en: The app needs to compute the percentage of correct answers before displaying
    it. The following blocks tell the app how to compute and store the user’s percentage.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 应用需要在显示正确答案百分比之前进行计算。以下积木将告诉应用如何计算并存储用户的百分比。
- en: '![Image](../images/f0079-01.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0079-01.jpg)'
- en: Click the **Variables** blocks drawer, drag the set global percentage to block
    ➊ to the Viewer, and snap it inside the whenEndBtn.Click block under the `setEndBtn.Visibleto`
    block. Then drag a multiplication operator block ➋ from the Math drawer and snap
    it to the right of the set global percentage to block.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**变量**块抽屉，拖入设置全局百分比的块 ➊ 到查看器，并将其固定在`setEndBtn.Visibleto`块下的whenEndBtn.Click块内。然后从数学块抽屉中拖入一个乘法运算符块
    ➋，并将其固定在设置全局百分比块的右侧。
- en: Now click the **Math** drawer again, drag a division operator block ➌ into the
    multiplication block’s first operand socket, and drag a 100 number block ➍ into
    the multiplication block’s second operand socket. Return to the Variables blocks
    drawer and drag the get global score block ➎ into the division block’s left operand
    socket and the get global problems block ➏ into its right operand socket. These
    blocks compute the percentage of problems answered correctly by dividing the user’s
    score by the total number of problems and multiplying that result by 100.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再次点击**数学**块抽屉，将一个除法运算符块 ➌ 拖入乘法块的第一个操作数插槽，并将一个100数字块 ➍ 拖入乘法块的第二个操作数插槽。返回到变量块抽屉，将获取全局分数块
    ➎ 拖入除法块的左侧操作数插槽，将获取全局问题块 ➏ 拖入其右侧操作数插槽。这些块通过将用户的分数除以问题总数并将结果乘以100，来计算正确回答问题的百分比。
- en: '**Showing the Percentage of Correct Answers**'
  id: totrans-201
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**显示正确答案百分比**'
- en: Now we’ll display that percentage for the user with the blocks shown here.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将用这些块来为用户显示百分比。
- en: '![Image](../images/f0079-02.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0079-02.jpg)'
- en: In the Blocks pane, click ScoreLbl, drag the setScoreLbl.Textto block ➊ to the
    Viewer, and snap it inside the whenEndBtn.Click block under the `set global percentage
    to` block. Then click the **Text** blocks drawer, drag a join block ➋ to the Viewer,
    and snap it to the right of the setScoreLbl.Textto block. Now click the `join`
    block’s mutator icon to add another four string input sockets.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在块面板中，点击ScoreLbl，将设置ScoreLbl.Textto块 ➊ 拖入查看器，并将其固定在`set global percentage to`块下的whenEndBtn.Click块内。然后点击**文本**块抽屉，将一个`join`块
    ➋ 拖入查看器，并将其固定在设置ScoreLbl.Textto块的右侧。现在，点击`join`块的突变器图标，添加另一个四个字符串输入插槽。
- en: For the `join` block’s first input, click ScoreLbl and drag in its ScoreLbl.Text
    block ➌. For the `join` block’s second input, drag in an empty string block ➍
    from the Text blocks drawer, click the string block’s text area, and enter out
    of (including spaces before the word `out` and after the word `of`). For the `join`
    block’s third input, click the **Variables** blocks drawer and drag in the get
    global problems block ➎.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`join`块的第一个输入，点击ScoreLbl并拖入其ScoreLbl.Text块 ➌。对于`join`块的第二个输入，从文本块抽屉中拖入一个空字符串块
    ➍，点击字符串块的文本区域，输入“out of”（包括单词“out”前后的空格）。对于`join`块的第三个输入，点击**变量**块抽屉并拖入获取全局问题块
    ➎。
- en: For its fourth input, drag in another empty string block ➏ from the Text blocks
    drawer, click the string block’s text area, and enter (, including a space before
    the parenthesis. For the fifth input, click the **Variables** blocks drawer again
    and drag in the get global percentage block ➐. Finally, for the `join` block’s
    bottom input, drag in an empty string block ➑ from the Text blocks drawer, click
    the string block’s text area, and enter %).
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其第四个输入，从文本块抽屉中再拖入一个空字符串块 ➏，点击字符串块的文本区域，输入“(”，包括括号前的空格。对于第五个输入，再次点击**变量**块抽屉并拖入获取全局百分比块
    ➐。最后，对于`join`块的底部输入，从文本块抽屉中拖入一个空字符串块 ➑，点击字符串块的文本区域，输入“%)”。
- en: 'These blocks display the user’s score and percentage correct onscreen. For
    instance, if the user’s score is 20 and the total number of problems is 100, `ScoreLbl`
    should display “Your Score: 20 out of 100 (20%)”.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '这些块将显示用户的分数和正确回答的百分比。例如，如果用户的分数是20，问题总数是100，`ScoreLbl`应该显示“Your Score: 20 out
    of 100 (20%)”。'
- en: '**TESTING THE APP**'
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**测试应用程序**'
- en: Now we can test the completed app! First, move back to `Screen1` by selecting
    it in the drop-down above the Blocks Viewer. Then, reset the connection to AI2
    Companion by clicking **Connect** ▸ **Reset Connection** in the top menu bar and
    then **Connect** ▸ **AI Companion**. Next, scan the QR code with your device’s
    AI2 Companion app.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以测试完成的应用程序！首先，通过在块查看器上方的下拉菜单中选择`Screen1`，返回到`Screen1`。然后，通过点击顶部菜单栏中的**Connect**
    ▸ **Reset Connection**，再点击**Connect** ▸ **AI Companion**，重置与AI2 Companion的连接。接下来，使用设备上的AI2
    Companion应用扫描二维码。
- en: When the app opens on your device, you should hear the welcome message. Click
    **Start Practicing** to move to the next screen. There you should see a new problem
    appear every 5 seconds and, when you click Check Answer, if your answer `TextBox`
    is not empty, you should hear and see whether your answer’s right or wrong, and
    see the score displayed under `AnswerBox`. If you click Check Answer and haven’t
    typed an answer, you should see a pop-up alert.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序在您的设备上打开时，您应该听到欢迎信息。点击**开始练习**以进入下一屏幕。此时，您应该看到每5秒钟出现一个新问题，点击检查答案时，如果您的`TextBox`不为空，您应该听到并看到答案是否正确，并在`AnswerBox`下方显示分数。如果点击检查答案时没有输入答案，您应该看到一个弹出警告。
- en: Now click EndBtn and all components should disappear from the screen except
    for `ScoreLbl`, which should correctly display your score and percentage of problems
    correct. If you placed the blocks correctly, the app should work as expected.
    You’ve successfully created the “Multiplication Station” quiz app!
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在点击EndBtn，除了`ScoreLbl`外，所有组件应该从屏幕上消失，并正确显示您的得分和正确问题的百分比。如果您正确放置了模块，应用程序应该按预期工作。您已经成功创建了“乘法站”测验应用程序！
- en: '**SUMMARY**'
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter, you built the “Multiplication Station” quiz app, where users
    answer random, timed multiplication problems, learn whether their answers are
    correct, earn points for correct answers, and view the score and percentage of
    correctly answered problems.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您构建了“乘法站”测验应用程序，用户回答随机的定时乘法问题，了解他们的答案是否正确，正确回答时获得分数，并查看得分和正确回答问题的百分比。
- en: In the process of building this app, you learned how to use the sophisticated
    selection control structure, which controls the flow of a program by evaluating
    conditions and making decisions. To do this, you used App Inventor’s Control blocks
    along with its pseudorandom number generator and Math and Logic operator blocks.
    You also created and manipulated data stored in several variables and learned
    to use the `TextToSpeech` and `Notifier` components to communicate with app users.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建这个应用程序的过程中，您学习了如何使用复杂的选择控制结构，该结构通过评估条件并做出决策来控制程序的流程。为此，您使用了App Inventor的控制模块、伪随机数生成器以及数学和逻辑运算符模块。您还创建并操作了存储在多个变量中的数据，并学会了使用`TextToSpeech`和`Notifier`组件与应用程序用户进行沟通。
- en: In the next chapter, you’ll learn how to create and process lists using Lists
    blocks as we build the “Beat the Bus” app, which uses your device’s GPS and location-sensing
    capabilities to display your school bus’s location and text your friends or family
    with periodic updates along the route.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用列表模块创建和处理列表，随着我们构建“击败公交车”应用程序，该应用程序利用您的设备的GPS和定位能力，显示您学校公交车的位置，并定期向您的朋友或家人发送沿途更新的短信。
- en: '**ON YOUR OWN**'
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**独立完成**'
- en: Save new versions of “Multiplication Station” as you modify and extend it for
    the following exercises. You can find solutions online at *[https://nostarch.com/programwithappinventor/](https://nostarch.com/programwithappinventor/)*.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在您修改和扩展“乘法站”应用程序以进行以下练习时，保存新的版本。您可以在线查找解决方案，地址是 *[https://nostarch.com/programwithappinventor/](https://nostarch.com/programwithappinventor/)*。
- en: Change the app so that if a user’s answer is incorrect, new problems stop appearing
    and the app displays the correct answer, after which the user may continue the
    practice session. Where will the app display the correct answer? How will the
    user resume practice, if desired? Will you need another `if then` block, additional
    components, or more variables?
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改应用程序，使得如果用户的答案错误，新的问题停止出现，应用程序会显示正确答案，然后用户可以继续练习。应用程序将在哪里显示正确答案？如果用户希望继续，如何恢复练习？您是否需要另一个`if
    then`块、额外的组件或更多的变量？
- en: Extend the app so that the user can choose to practice multiplication or division.
    How will your algorithm change? What components and blocks will you need to add
    and modify?
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展应用程序，使得用户可以选择练习乘法或除法。您的算法将如何变化？您需要添加和修改哪些组件和模块？
