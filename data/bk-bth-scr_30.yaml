- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 27 AND/OR OPERATORS
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 27 与/或 运算符
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: In this chapter, I’ll discuss what may be the most glaring shortfall in all
    of Batch. It doesn’t support an and operator, nor is there an or operator. After
    a brief problem statement, I’ll detail a few techniques to simulate or mimic these
    two operators, handling both the true and false cases. The and is fairly straightforward,
    but the or requires more ingenuity.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我将讨论可能是Batch中最明显的缺陷。它不支持与运算符，也没有或运算符。简要介绍问题后，我将详细描述一些模拟或模仿这两个运算符的技巧，处理真值和假值的情况。与运算符相对简单，但或运算符则需要更多的创造力。
- en: As is often the case with Batch, you can look at a deficiency with frustration
    or as an inspiration for creativity. These techniques are a must for any Batch
    coder because without them, you can’t write even moderately interesting if commands.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 和Batch的情况一样，你可以对这个缺陷感到沮丧，也可以将其视为创造力的灵感。这些技巧是每个Batch程序员必备的，因为没有它们，你就无法编写出即使是稍微有趣的if命令。
- en: The Problem Statement
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题陈述
- en: 'A certain conversation is a rite of passage for anyone learning Batch:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个特定的对话，是每个学习Batch的人必经的洗礼：
- en: '*Bobby*: I have a syntax issue. I’m trying to code an if command with an and
    operator—you know, do something if variable1 equals A and variable2 equals B—nothing
    complex. I’d hoped that the syntax was simply the word *and*. That didn’t work,
    so I tried an ampersand and then two ampersands. I know that Batch can be unintuitive,
    so there must be some sort of funky syntax for the and operator, maybe an at sign
    with a tilde or some nonsense like that. So how do I code this?'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*Bobby*：我有个语法问题。我正在尝试用与运算符编写if命令——你知道的，如果variable1等于A且variable2等于B——这不复杂。我本以为语法就是简单的*and*这个词。结果不行，所以我尝试了一个和符号，再加上两个和符号。我知道Batch可能不太直观，所以一定有某种奇怪的与运算符语法，可能是一个带有波浪符号的@符号，或者类似的胡说八道。那么，我该怎么写？'
- en: '*Jack*: Sorry, Batch doesn’t have an and operator.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*Jack*：抱歉，Batch没有与运算符。'
- en: '*Bobby*: Seriously? That makes no sense.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*Bobby*：认真的吗？这没有任何意义。'
- en: '*Jack*: Seriously, there is none.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*Jack*：真的，没有。'
- en: '*Bobby*: You’re messing with me, aren’t you? Every programming language with
    an if command has an and operator. I think there’s a law.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*Bobby*：你是在逗我吧？每种有if命令的编程语言都有与运算符。我觉得这应该是有规定的。'
- en: '*Jack*: No, not every language. I can’t name another offhand, but Batch isn’t
    following the crowd on this one.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*Jack*：不， 不是所有语言都有。我现在想不起来其他语言，但Batch在这一点上并没有随大流。'
- en: '*Bobby*: That’s like selling a car that doesn’t turn left. What are you supposed
    to do?'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*Bobby*：这就像卖一辆不能左转的车。那该怎么办？'
- en: '*Jack*: Take three rights. Oh ... and by the way, the or operator ... also
    not a thing.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*Jack*：走三次右转。哦...顺便说一下，或运算符...也不是回事。'
- en: '*Bobby*: I’m still not sure if you’re yanking my chain. It’s nowhere near April
    Fool’s Day, and I really need to get this thing working. Any suggestions?'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*Bobby*：我还是不确定你是不是在耍我。离愚人节还远着呢，我真的需要让这个东西工作。有什么建议吗？'
- en: '*Jack*: I agree, Batch should have these operators, but this is where some
    creativity comes in handy. Anyone can code an and in Java or Perl, but doing it
    in Batch will fill you with a great sense of pride and accomplishment. The or
    operator is even more fun—or problematic, depending on your perspective.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*Jack*：我同意，Batch应该有这些运算符，但这也是创造力派上用场的地方。任何人都可以在Java或Perl中编写与运算符，但在Batch中做到这一点，会让你有一种巨大的自豪感和成就感。至于或运算符，它更有趣——或者说，从你的角度看，可能更成问题。'
- en: 'I still remember playing the part of the novice in this conversation, and I’ve
    since experienced déjà vu countless times in the opposite role. I fear that some
    will think that I’m overstating the issue, but it has perplexed many. This and
    operator irredeemably does *not* return true if both comparisons are true:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我还记得在这段对话中扮演新手的角色，之后我在对立的角色中无数次体验过似曾相识的感觉。我担心有些人会觉得我夸大了这个问题，但它确实让很多人困惑。这个与运算符如果两个比较都为真时，**确实**不会返回真：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That’s not to say that the command inside the code block never executes; in
    fact, the interpreter typically performs it after discarding the invalid if command.
    To further complicate matters, the invalid command might generate an error message
    to stderr, or not, and errorlevel might end up as a nonzero value, or not.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着代码块中的命令永远不会执行；实际上，解释器通常会在丢弃无效的if命令后执行它。更复杂的是，无效的命令可能会将错误信息输出到stderr，也可能不会，错误级别(errorlevel)可能是非零值，也可能不是。
- en: 'The same is true for this *invalid* or operator:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个*无效*的或运算符也是如此：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It doesn’t return true if either or both of the comparisons are true.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其中一个或两个比较为真，它不会返回真。
- en: But enough of what won’t work. There are solutions, some elegant and some functional,
    for building these operators.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但够了，先不谈那些不可行的方法。针对这些操作符，还有一些优雅或实用的解决方案。
- en: Replicating the and Operator
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复制`and`操作符
- en: 'The first and most obvious technique to code around the lack of an and operator
    is the nested if command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 编写绕过缺少`and`操作符的第一个且最明显的技巧是使用嵌套的`if`命令：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is the only possible solution if either conditional clause uses the exist
    keyword to determine whether a resource exists or the defined keyword to see whether
    a variable is defined. But if you are examining multiple variables for equality
    to constants or other variables, I’ll share a far more elegant solution. The following
    if command, with two resolved variables on one side of the equ operator and two
    values on the other, is functionally equivalent to the nested commands in the
    previous example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果条件语句中的任何一个使用了`exist`关键字来判断资源是否存在，或使用`defined`关键字来判断变量是否已定义，那么这是唯一可能的解决方案。但如果你要检查多个变量是否与常量或其他变量相等，我将分享一个更加优雅的解决方案。以下的`if`命令，将两个解析后的变量放在等号操作符的一侧，两个值放在另一侧，其功能上与前面示例中的嵌套命令是等效的：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The lefthand side of the equality, %var1%-%var2%, has three parts inside the
    double quotes: the resolution of the first variable, a dash, and the resolution
    of the second variable. If the two variables are set to A and B, respectively,
    then "%var1%-%var2%" resolves to "A-B", and equality is found. If either variable
    (or both) is set to anything else the conditional clause is false.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 等式的左侧，%var1%-%var2%，包含了三个部分：第一个变量的解析结果、一个破折号以及第二个变量的解析结果。如果两个变量分别设置为A和B，那么"%var1%-%var2%"会解析为"A-B"，并且相等。如果任一变量（或两者）设置为其他任何值，则条件判断为假。
- en: The dash delimiter serves two important purposes. Without the delimiter, we
    will erroneously find equality if one of the two variables resolves to AB and
    the other resolves to null. Also, it’s just far easier and more pleasant to read,
    especially when the comparisons become more complex. For example, the following
    two if commands—each containing a trio of compares—are very similar, but which
    one would you rather read?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 破折号分隔符有两个重要的作用。如果没有分隔符，当其中一个变量解析为AB而另一个变量解析为空时，我们会错误地认为它们相等。而且，使用分隔符使得代码更易读，特别是当比较变得更复杂时。例如，以下两个`if`命令——每个包含三个比较——非常相似，但你更愿意阅读哪一个？
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: I’m using a dash as the delimiter, but most any understated character also works.
    Dots are another good option, but above all else, the delimiter that you choose
    should be a character that you don’t expect to be part of the data. (I’m hesitant
    to open this can of worms, but the conditional clause, "%A%-%B%" equ "%X%-%Y%",
    will incorrectly register as true if A and Y are set to a dash and B and X are
    null. While this theoretically is an issue, if you know your data and choose your
    delimiter wisely, it won’t be an issue in practice.)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了破折号作为分隔符，但几乎任何简洁的字符都可以使用。点（`.`）也是一个不错的选择，但最重要的是，你选择的分隔符应该是一个你不希望出现在数据中的字符。（虽然我不太愿意触及这个话题，但条件语句`"%A%-%B%"
    equ "%X%-%Y%"`在A和Y被设置为破折号且B和X为空的情况下会错误地判断为真。虽然从理论上讲这是一个问题，但如果你了解你的数据并明智地选择分隔符，在实际应用中这不会成为问题。）
- en: Notice also that the two comparisons in the previous listing are case-insensitive.
    You can do the same for any multiple comparison with the addition of the /i option,
    but it applies universally—that is, to all three comparisons in this example.
    If you want to do a mix of case-sensitive and case-insensitive compares, nesting
    is your best option.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，前面列表中的两个比较是不区分大小写的。你可以通过添加`/i`选项对任何多重比较进行类似的操作，但它是全局生效的——也就是说，它会应用到示例中的所有三个比较。如果你需要进行大小写敏感与不敏感混合的比较，嵌套结构是你最好的选择。
- en: The prior logic would have required two and operators in most other languages.
    In Batch, you could have done it with three nested if commands, but the technique
    connecting operands with a dash is more succinct and readable than it would have
    been even with a true and operator.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数其他语言中，上述逻辑需要两个`and`操作符。而在Batch中，你可能会通过三个嵌套的`if`命令来实现，但将操作数通过破折号连接的技巧，比即便是使用真实的`and`操作符要简洁且易读。
- en: Replicating the or Operator
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复制`or`操作符
- en: The or operator is as complex and varied as the and operator is straightforward
    and uniform. I’ll demonstrate the techniques best suited for different situations.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`or`操作符的复杂性与`and`操作符的简单性截然不同。我将展示最适合不同情况的技巧。'
- en: Comparing One Variable to Multiple Values
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将一个变量与多个值进行比较
- en: A common application of the or operator is to determine whether the contents
    of a variable is equal to one out of two or more values. For instance, you can
    glean quite a bit from a state postal code. If it’s equal to WA, OR, or CA, the
    state is on the Pacific coast of the contiguous United States, and any one of
    a list of 10 values indicates that the state is on the Mississippi River.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 或运算符的一个常见应用是确定一个变量的内容是否等于两个或更多值中的一个。例如，你可以从一个州的邮政编码中获得很多信息。如果它等于 WA、OR 或 CA，那么该州位于美国本土的太平洋海岸；而任何一个包含在
    10 个值中的邮政编码则表示该州位于密西西比河上。
- en: 'To build an or operator looking for one of multiple values being assigned to
    a single variable, I’ll once again turn to the eminently useful for command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建一个或运算符来查找分配给单个变量的多个值中的一个，我将再次使用非常有用的 for 命令：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The echo command executes if and only if the variable represents the postal
    code for one of the Dakota states.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: echo 命令只有在变量表示一个达科他州的邮政编码时才会执行。
- en: The for command executes its code block twice, passing ND and then SD as the
    %%p variable. The code block contains just an if command comparing the contents
    of postalCode to what’s passed in as the for variable. Thus, the first execution
    of the if command looks to see if the variable resolves to ND, and the second
    execution compares the value of postalCode to SD. If the variable equals either
    ND or SD, the if command evaluates to true, triggering the execution of its block
    of code. This in essence is a Batch or operator.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: for 命令会执行其代码块两次，分别传递 ND 和 SD 作为 %%p 变量。代码块仅包含一个 if 命令，它将 postalCode 的内容与作为 for
    变量传递的内容进行比较。因此，if 命令的第一次执行会检查变量是否解析为 ND，第二次执行会将 postalCode 的值与 SD 进行比较。如果变量等于
    ND 或 SD，if 命令会评估为 true，从而触发其代码块的执行。从本质上讲，这就是一个 Batch 或运算符。
- en: 'The previous example was for two possible values, but since the for command
    takes in a space-delimited list, you can pass any reasonable number of values.
    Here’s an example of a Batch or operator matching a variable on any one of six
    names:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个例子是针对两个可能的值，但由于 for 命令接收一个由空格分隔的列表，你可以传递任意数量的值。以下是一个 Batch 或运算符匹配六个名称中的任何一个的例子：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: A single variable, such as postalCode or name, can’t take on two current values
    at once, meaning that with this technique, the conditional clause in the if command
    can evaluate to true at most once. This isn’t true of other variants of the or
    operator, meaning that other considerations and modifications come into play.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一个单一的变量，如 postalCode 或 name，不能同时具有两个当前值，这意味着使用这种技术时，if 命令中的条件子句最多只能评估为一次 true。这对其他变种的或运算符并不适用，因此其他考虑因素和修改会发挥作用。
- en: Comparing Multiple Variables to One Value
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将多个变量与一个值进行比较
- en: Let’s flip the last example so that we compare multiple variables to a single
    hardcoded value. Perhaps a particular program has two functions, and we want to
    execute it if either of two variables is set to some common value.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们反转上面的例子，将多个变量与一个硬编码的值进行比较。假设某个特定的程序有两个函数，如果其中一个变量设置为某个共同值，我们希望执行该函数。
- en: 'In this example, the for command is using the resolved values of the two variables
    as its input, and it’s passing each to the if command and comparing them to A:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，for 命令使用两个变量的解析值作为输入，并将它们传递给 if 命令，然后将它们与 A 进行比较：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this scenario, there’s the possibility for both variables to be equal to
    A. A true or proper or operator won’t execute the code inside the code block of
    the if command twice if both are true. To mimic this behavior, we must break out
    of the logic after the first true condition is satisfied and the code block is
    executed, and this is accomplished by the goto command branching control to the
    label just after the for loop.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，两个变量都有可能等于 A。如果两个变量都为 true，正确的或运算符将不会在 if 命令的代码块中执行两次代码。为了模拟这种行为，我们必须在第一个
    true 条件满足并执行代码块后跳出逻辑，这可以通过 goto 命令将控制转到 for 循环之后的标签来实现。
- en: Many times, it’s perfectly acceptable to execute the code block multiple times.
    For instance, if you’re setting some variable or variables when the condition
    is true, it won’t hurt to simply reset them to the same values, and in those situations,
    you can simplify the code by removing the goto and the label. Even so, this code
    isn’t bulletproof in all situations.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 很多时候，执行代码块多次是完全可以接受的。例如，如果你在条件为真的时候设置一些变量，重新设置它们为相同的值也不会有什么问题，在这种情况下，你可以通过移除
    goto 和标签来简化代码。不过，即便如此，这段代码在所有情况下也并非万无一失。
- en: 'The technique in the previous example assumes that the variables don’t contain
    any embedded spaces. Since the for command accepts a space-delimited list, the
    interpreter treats a single value with an embedded space as two distinct values.
    The following listing accounts for the limitation:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个示例中的技术假设变量不包含任何嵌入的空格。由于 for 命令接受一个以空格分隔的列表，解释器将把一个包含空格的单一值当作两个不同的值来处理。下面的清单考虑到了这一限制：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'I’ve encased each resolved input variable in double quotes, ensuring that we
    pass each one in its entirety into the code block. To account for what I’ve just
    added, I’ve also included a tilde to the resolution of the for variable to remove
    these double quotes while doing the comparison: %%~i.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经把每个解决的输入变量用双引号括起来，确保我们将每个变量整体传递到代码块中。为了处理我刚刚添加的部分，我还在 for 变量的解析中加上了波浪线，以便在比较时去掉这些双引号：%%~i。
- en: Only a double quote in the contents of one of these variables could break this
    code. Know your data.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅是这些变量中的一个内容中有双引号就可能会破坏这段代码。了解你的数据。
- en: Comparing Multiple Variables and Values
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 比较多个变量和值
- en: The prior examples demonstrate common yet fairly narrow cases. They won’t work
    for more complicated conditional clauses containing an or operator comparing multiple
    variables to various hardcoded values or comparing different variables to each
    other.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的示例展示了常见但相对狭窄的情况。它们不适用于包含或运算符的更复杂条件子句，这些子句需要比较多个变量与不同的硬编码值，或是比较不同的变量之间的关系。
- en: 'As a specific example, a desired conditional clause might evaluate to true
    if one variable equals a particular value or if a second variable equals a third
    variable. That is, we might try to execute something like the following, but again
    this does *not* work in Batch:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个具体的例子，某个期望的条件子句可能会在一个变量等于特定值或第二个变量等于第三个变量时返回 true。也就是说，我们可能会尝试执行如下操作，但同样，这在批处理（Batch）中*不*会生效：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'There are two ways to mimic this variant of the or operator:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以模仿这种或运算符的变体：
- en: '**The **else if** Solution**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**"else if" 解决方案**'
- en: 'With some brute force you can evaluate the first condition and use the else
    if construct from [Chapter 4](chapter4.xhtml) to evaluate subsequent conditions:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一些蛮力，你可以先评估第一个条件，然后使用 [第 4 章](chapter4.xhtml)中的 else if 结构来评估后续条件：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This works but has a major drawback that I more than hinted at in the code
    itself. You must repeat the code block to be executed if the conditional clause
    in the if command is true. If this code consists of a single statement, that may
    be more than acceptable, but if the logic is more complex, even two or three lines
    of code, the code will quickly get messy. In such cases, it’s best to put that
    code block into a labeled method and call it from multiple locations:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码可以工作，但有一个我在代码中已经暗示的重大缺点。如果 if 命令中的条件子句为真，你必须重复执行要执行的代码块。如果这段代码只有一条语句，那也许还可以接受，但如果逻辑更加复杂，甚至是两三行代码，代码就会变得非常混乱。在这种情况下，最好将那段代码块放到一个带标签的方法中，并从多个位置调用它：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The :CommonLogic routine may contain some involved logic and live elsewhere
    in the bat file, but if it’s only a handful of commands, I suggest placing it
    immediately after the else if construct inside a perpetually false if command.
    (See [Chapter 20](chapter20.xhtml) for more on this technique. Hint: if 0 equ
    1.) However, if the code block really doesn’t justify its own method (or even
    if it does), there’s another technique worth exploring.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: :CommonLogic 例程可能包含一些复杂的逻辑并位于 bat 文件的其他地方，但如果它仅仅是少量的命令，我建议将它直接放置在 else if 结构之后，放入一个始终为假的
    if 命令中。（有关这种技术的更多信息，请参见 [第 20 章](chapter20.xhtml)。提示：if 0 equ 1。）然而，如果代码块真的不值得拥有自己的方法（或者即使它值得），还有另一种值得探索的技术。
- en: '**The Nested **for** Command Solution**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**嵌套的 **for** 命令解决方案**'
- en: This last technique for implementing an or operator isn’t a simple one, but
    it’s elegant, and I’ve employed it often. It mimics multiple compares of two items
    where just one match satisfies the condition, but where the two items can be any
    combination of resolved variables and hardcoded values. It even handles embedded
    spaces in any of the values.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 实现或操作符的最后一种技巧并不简单，但它很优雅，我已经多次使用过。它模拟了两个项目的多次比较，只要有一个匹配就满足条件，但这两个项目可以是任何组合的已解析变量和硬编码值。它甚至可以处理任何值中的嵌入空格。
- en: 'In this solution, I’ve wrapped the if command inside two nested for commands:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个解决方案中，我将 if 命令包裹在两个嵌套的 for 命令中：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The input of the outer for command is a space-delimited set of colon-delimited
    pairs of values, where each pair is encased in double quotes. This means that
    each execution of the outer code block resolves a pair of values delimited by
    a colon as %%~i. The pair of values can be a combination of a resolved variable
    and a hardcoded value such as in the first pair: %var1%:A. In contrast, the second
    pair demonstrates a different possibility, that of two resolved variables: %var2%:%var3%.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 外部 for 命令的输入是一个以空格分隔的由冒号分隔的值对集合，其中每一对值都被双引号括起来。这意味着外部代码块的每次执行都会将由冒号分隔的一对值解析为%%~i。值对可以是已解析变量和硬编码值的组合，比如第一个值对：%var1%:A。相比之下，第二个值对展示了另一种可能性，即两个已解析的变量：%var2%:%var3%。
- en: The inner for /F command successively accepts each pair resolved by %%~i and
    treats it as string input because of the encasing double quotes. (Notice that
    "%%~i" strips off and then adds back a set of double quotes. I could have used
    %%i, but the explicit double quotes make it clear that the input to the for /F
    command is a string.)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 内部 for /F 命令依次接受每一对由 %%~i 解析的值，并将其视为字符串输入，因为它们被双引号括起来。（请注意，“%%~i”会去掉双引号再加回。虽然我本可以使用%%i，但显式的双引号使得输入给
    for /F 命令的是一个字符串这一点更加明确。）
- en: The tokens and delims clauses separate the pair by the colon delimiter into
    the %%j and %%k tokens ([Chapter 19](chapter19.xhtml)). Finally, the if command
    compares them for equality and executes the code block if true.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: tokens 和 delims 子句通过冒号分隔符将值对分割成 %%j 和 %%k 令牌（[第19章](chapter19.xhtml)）。最后，if
    命令比较它们是否相等，如果为真，则执行代码块。
- en: I’m using the same technique I employed earlier to break out of the logic so
    that it doesn’t execute multiple times. Once again, you can drop the goto command
    and the label if there’s no harm executing the code block more than once. If a
    colon might be in one of the values being compared, you can choose a different
    delimiter. Likewise, if a double quote might be in one of the values, you can
    drop the double quotes around each pair in the input list, but this will expose
    spaces and special characters in the data.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在使用之前采用的相同技术来跳出逻辑，以免它多次执行。再次说明，如果没有问题让代码块执行多次，你可以省略 goto 命令和标签。如果比较的值中可能包含冒号，你可以选择不同的分隔符。同样，如果某个值中可能包含双引号，你可以去掉输入列表中每对值周围的双引号，但这样会暴露数据中的空格和特殊字符。
- en: After you get a grasp on how it works, take another look with fresh eyes and
    ask yourself whether this looks like an if command with an or operator. Some may
    call it cryptic, and to be clear, an explanatory remark is definitely in order,
    but what I’ve presented here represents the most comprehensive complex Batch or
    operator you’re likely to encounter.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当你掌握了它的工作原理后，再用全新的视角重新审视并问自己，这看起来像是一个带有或操作符的 if 命令吗？有些人可能会觉得它很晦涩，明确来说，确实需要一个解释性备注，但我在这里展示的代表了你可能遇到的最全面、复杂的
    Batch 或操作符。
- en: The else Keyword
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: else 关键字
- en: 'There’s one last pertinent topic related to any if command that we must not
    forget: the else keyword. I’ve discussed executing one code block if multiple
    conditions are all true or if at least one of them is true, but often you’ll want
    to execute another code block if the ultimate result of the and or or conditional
    clause is false. Traditionally, this is the code block coming after the else keyword.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个与任何 if 命令相关的最后一个重要话题我们不能忘记：else 关键字。我已经讨论过当多个条件都为真或至少一个条件为真时执行一个代码块，但通常你会希望在最终的与或或条件为假时执行另一个代码块。传统上，这就是紧随
    else 关键字之后的代码块。
- en: 'The simulated and operator with multiple resolved variables and hardcoded values
    strung together lends itself to the use of an else code block:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用多个已解析变量和硬编码值串联在一起的模拟与操作符，适合使用 else 代码块：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This also works with the else if construct that can mimic the or operator.
    But you can only mimic the else keyword in the other situations, and I’ll share
    two very useful methods here:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这也适用于else if结构，可以模拟“或”运算符。但你只能在其他情况中模拟else关键字，我将在这里分享两种非常有用的方法：
- en: '**The Preemptive Action Method**'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**抢占性行动法**'
- en: 'The easiest way to execute the else logic is to do it preemptively:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 执行else逻辑的最简单方法是先抢占性地执行它：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Clearly, this works only if upon finding a match, you can easily undo the preemptive
    logic. If the else logic is copying or deleting a file, this technique is of no
    value, but if the logic is simply setting a variable to one of two values, you
    can do the else logic first and undo it if the if command evaluates to true. In
    essence, this is an if...else construct.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，只有在找到匹配项后，能够轻松撤销抢占性逻辑时，这才有效。如果else逻辑是复制或删除文件，这个技巧就没什么价值，但如果逻辑仅仅是将变量设置为两个值之一，你可以先执行else逻辑，如果if命令返回true，则撤销它。本质上，这就是if...else结构。
- en: '**The Branch Over Method**'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**分支跳过法**'
- en: 'Another method is to use that bit of space before the label used to break out
    of the code block on the first match:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是利用标签前的那一小段空间，在第一次匹配时跳出代码块：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The goto command already ensures that the logic just above it executes no more
    than once, but now it also branches over the logic just after the completion of
    the for command. If this logic finds one match, it sets the variable to Match,
    but if the if command doesn’t find a match after exhausting the list in the input,
    only then does control fall to the set command setting the variable to NoMatchFound.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: goto命令已经确保它上方的逻辑只会执行一次，但现在它也会在for命令完成后跳过紧接其后的逻辑。如果该逻辑找到一个匹配项，它会将变量设置为Match，但如果if命令在输入列表耗尽后没有找到匹配项，控制流才会转到set命令，将变量设置为NoMatchFound。
- en: This method offers far greater flexibility. Instead of setting a variable, you
    can call a program if one match is found, and if not, delete a directory. The
    code isn’t doing anything preemptively, so it doesn’t have to undo anything. For
    this reason, the branch over method is a truer form of the if...else construct.
    The fact that the else logic comes last makes it look even more like the traditional
    construct. After seeing enough of these, you’ll start to interpret those two close
    parentheses as a kind of else keyword.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法提供了更大的灵活性。你可以在找到匹配项时调用一个程序，如果没有找到，则删除一个目录。代码并不做任何抢占性操作，因此不需要撤销任何东西。因此，分支跳过法是更接近if...else结构的真正形式。由于else逻辑位于最后，它看起来更像传统结构。看到足够多的这种写法后，你会开始把那两个闭括号视为一种else关键字。
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, I’ve detailed a couple of methods to mimic the and operator
    of a conditional clause, and you’ve learned multiple techniques for simulating
    the or operator that satisfy many differing situations. I also demonstrated ways
    to mimic the else keyword, so as to execute logic that traditionally executes
    when a conditional clause is false.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我详细介绍了几种模拟条件语句中的“和”运算符的方法，你也学习了多种模拟“或”运算符的技巧，以满足多种不同的情况。我还演示了模拟else关键字的方法，用于执行传统上在条件语句为假时执行的逻辑。
- en: It’s certainly true that the techniques discussed in this chapter are completely
    unnecessary in most languages, but they are a necessity for any Batch coder wanting
    to code more than rudimentary logic. They also fill the most prominent lacuna
    in the Batch universe as elegantly as possible.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 确实如此，本章讨论的技巧在大多数编程语言中完全不必要，但对于任何想编写复杂逻辑的Batch编码者来说，它们是必需的。它们也尽可能优雅地填补了Batch世界中最显著的空白。
- en: Bobby shouldn’t be faulted for trying to use && as an and operator; nor should
    he be faulted if he tried using || as an or operator. Both are commonly used for
    these purposes in other languages. I haven’t mentioned it yet, but the && and
    || operators do have a place in Batch, but in relation to a completely different
    topic, conditional execution. In [Chapter 4](chapter4.xhtml), I detailed the most
    commonly used technique of conditional execution (the if command), but in the
    next chapter, I’ll return to this topic to share some lesser-known alternative
    techniques.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Bobby不应因尝试使用&&作为“和”运算符而受到责备；如果他尝试使用||作为“或”运算符，也不应受到责备。在其他编程语言中，&&和||常被用于这些目的。我还没有提到过，但&&和||运算符确实在Batch中有其用武之地，只不过与完全不同的话题——条件执行相关。在[第4章](chapter4.xhtml)中，我详细介绍了最常用的条件执行技巧（if命令），而在下一章中，我会回到这个话题，分享一些鲜为人知的替代技巧。
