- en: '**19'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**19**'
- en: FINDING YOUR OWN BUG BOUNTIES**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**找到属于自己的漏洞悬赏**'
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: Unfortunately, there is no magical formula to hacking, and there are too many
    constantly evolving technologies for me to explain every method of finding a bug.
    Although this chapter won’t make you an elite hacking machine, it should teach
    you the patterns successful bug hunters follow. This chapter guides you through
    a basic approach to begin hacking any application. It’s based on my experience
    interviewing successful hackers, reading blogs, watching videos, and actually
    hacking.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，黑客攻击没有神奇的公式，而且有太多不断发展的技术，我无法解释每一种寻找漏洞的方法。虽然本章不会让你成为一个精英级别的黑客，但它应该能教你成功漏洞猎人遵循的模式。本章将引导你通过一种基本的方法开始黑客攻击任何应用。它基于我采访成功黑客、阅读博客、观看视频和实际进行黑客攻击的经验。
- en: When you first start hacking, it’s best to define your success based on the
    knowledge and experience you gain, rather than on the bugs you find or money you
    earn. This is because if your goal is to find bugs on high-profile programs or
    to find as many bugs as you can or simply to make money, you may be unsuccessful
    at first if you are brand new to hacking. Very smart and accomplished hackers
    test mature programs, such as Uber, Shopify, Twitter, and Google, on a daily basis,
    so there are far fewer bugs to find and it can be easy to get discouraged. If
    you focus on learning a new skill, recognizing patterns, and testing new technologies,
    you can stay positive about your hacking during dry spells.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次开始进行黑客攻击时，最好根据你获得的知识和经验来定义成功，而不是基于你找到的漏洞或赚到的钱。这是因为如果你的目标是找到高曝光度的程序中的漏洞，或者尽可能多地发现漏洞，或者仅仅是为了赚钱，那么如果你是新手，开始时可能会不成功。非常聪明且经验丰富的黑客每天都会测试成熟的程序，如Uber、Shopify、Twitter和Google，因此能找到的漏洞非常少，而且很容易让人泄气。如果你专注于学习新技能、识别模式和测试新技术，那么在遭遇干旱期时，你可以保持积极的心态。
- en: '**Reconnaissance**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**侦察**'
- en: 'Begin approaching any bug bounty program using some *reconnaissance*, or *recon*,
    to learn more about the application. As you know from previous chapters, there’s
    a lot to consider when you’re testing an application. Start by asking these and
    other basic questions:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在接触任何漏洞悬赏计划时，首先可以进行一些*侦察*，或者说是*recon*，以了解更多关于应用的信息。正如你从之前的章节所知道的，测试一个应用时有很多需要考虑的因素。可以从这些以及其他一些基本问题开始：
- en: What’s the scope of the program? Is it **.<example>.com* or just *www.<example>.com*?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该计划的范围是什么？是**.<example>.com**还是仅仅是*www.<example>.com*？
- en: How many subdomains does the company have?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公司有多少个子域名？
- en: How many IP addresses does the company own?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公司拥有多少个IP地址？
- en: What type of site is it? Software as a service? Open source? Collaborative?
    Paid or free?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个什么类型的网站？是软件即服务（SaaS）？开源的？协作性质的？是付费的还是免费的？
- en: Which technologies does it use? Which programming language is it coded in? Which
    database does it use? Which frameworks is it using?
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用哪些技术？使用的是哪种编程语言？使用的是哪种数据库？使用的是哪些框架？
- en: These questions are only some of the considerations you need to think about
    when you first start hacking. For the purposes of this chapter, let’s assume you’re
    testing an application with an open scope, like **.<example>.com*. Start with
    the tools you can run in the background so you can do other recon while you’re
    waiting for the tools’ results. You can run these tools from your computer, but
    you risk companies like Akamai banning your IP address. Akamai is a popular web
    application firewall, so if it bans you, you might be unable to visit common sites.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题只是你开始进行黑客攻击时需要考虑的一部分问题。为了本章的目的，我们假设你正在测试一个具有开放范围的应用，比如**.<example>.com**。从你可以在后台运行的工具开始，这样你可以在等待工具结果时进行其他侦察。你可以从你的计算机运行这些工具，但这可能会导致像Akamai这样的公司禁止你的IP地址。Akamai是一个流行的Web应用防火墙，所以如果它禁止了你，你可能无法访问常见的网站。
- en: To avoid a ban, I recommend spinning up a virtual private server (VPS) from
    a cloud-hosting provider that allows security testing from its systems. Be sure
    to research your cloud provider because some don’t allow this type of testing
    (for example, at the time of this writing, Amazon Web Services doesn’t allow security
    testing without explicit permission).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免被封禁，我建议你从允许安全测试的云主机服务提供商处租用一台虚拟私人服务器（VPS）。务必研究一下你的云服务提供商，因为有些服务商不允许进行此类测试（例如，在撰写本文时，Amazon
    Web Services不允许在没有明确许可的情况下进行安全测试）。
- en: '***Subdomain Enumeration***'
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***子域名枚举***'
- en: If you’re testing on an open scope, you can begin your recon by finding subdomains
    using your VPS. The more subdomains you find, the more attack surface you’ll have.
    To do this, I recommend using the SubFinder tool, which is fast and written in
    the Go programming language. SubFinder will pull in subdomain records for a site
    based on a variety of sources, including certificate registrations, search engine
    results, the Internet Archive Wayback Machine, and others.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个开放范围内进行测试，可以通过使用 VPS 来查找子域名来开始侦查。你发现的子域名越多，攻击面就越大。为此，我推荐使用 SubFinder 工具，它非常快速，并且是用
    Go 编程语言编写的。SubFinder 将通过多种来源拉取一个站点的子域名记录，包括证书注册、搜索引擎结果、互联网档案馆 Wayback Machine
    等等。
- en: The default enumeration that SubFinder conducts might not find all subdomains.
    But subdomains associated with a specific SSL certificate are easy to find because
    of certificate transparency logs that record registered SSL certificates. For
    example, if a site registers a certificate for *test.<example>.com*, it’s likely
    that subdomain will exist, at least at the time of registration. But it’s possible
    for a site to register a certificate for a wildcard subdomain (**.<example>.com*).
    If that’s the case, you might only be able to find some subdomains through brute-force
    guessing.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: SubFinder 进行的默认枚举可能无法找到所有子域名。但与特定 SSL 证书相关的子域名很容易找到，因为证书透明度日志记录了已注册的 SSL 证书。例如，如果一个站点为
    *test.<example>.com* 注册了证书，那么至少在注册时，这个子域名很可能存在。但有可能一个站点会为通配符子域名 (**.<example>.com*)
    注册证书。如果是这种情况，你可能只能通过暴力破解猜测来找到一些子域名。
- en: Conveniently, SubFinder can also help you brute-force subdomains using a common
    word list. The security list GitHub repository SecLists, referenced in [Appendix
    A](app01.xhtml#app01), has lists of common subdomains. Also, Jason Haddix has
    published a helpful list at *[https://gist.github.com/jhaddix/86a06c5dc309d08580a018c66354a056/](https://gist.github.com/jhaddix/86a06c5dc309d08580a018c66354a056/)*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 方便的是，SubFinder 还可以帮助你使用常见的词汇列表进行子域名的暴力破解。安全列表 GitHub 仓库 SecLists，在[附录 A](app01.xhtml#app01)中提到，提供了常见的子域名列表。此外，Jason
    Haddix 也发布了一个有用的列表，地址为 *[https://gist.github.com/jhaddix/86a06c5dc309d08580a018c66354a056/](https://gist.github.com/jhaddix/86a06c5dc309d08580a018c66354a056/)*。
- en: If you don’t want to use SubFinder and just want to browse SSL certificates,
    *[crt.sh](http://crt.sh)* is a great reference to check whether wildcard certificates
    have been registered. If you find a wildcard certificate, you can search *[censys.io](http://censys.io)*
    for the certificate hash. Usually, there’s even a direct link to *[censys.io](http://censys.io)*
    on *[crt.sh](http://crt.sh)* for each certificate.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想使用 SubFinder，只想浏览 SSL 证书，* [crt.sh](http://crt.sh) * 是一个很好的参考网站，可以检查是否有通配符证书被注册。如果你发现了通配符证书，你可以在
    *[censys.io](http://censys.io)* 上搜索证书的哈希值。通常，每个证书在 *[crt.sh](http://crt.sh)* 上也会有一个直接链接到
    *[censys.io](http://censys.io)* 的链接。
- en: Once you’ve finished enumerating subdomains for **.<example>.com*, you can port
    scan and screenshot the sites you find. Before moving on, also consider whether
    it makes sense to enumerate subdomains of subdomains. For example, if you find
    that a site registers an SSL certificate for **.corp.<example>.com*, it’s likely
    you’ll find more subdomains by enumerating that subdomain.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 完成 **.<example>.com* 子域名的枚举后，你可以对找到的站点进行端口扫描并截图。在继续进行之前，还要考虑是否有必要枚举子域名的子域名。例如，如果你发现一个站点为
    **.corp.<example>.com* 注册了 SSL 证书，可能会通过枚举该子域名找到更多的子域名。
- en: '***Port Scanning***'
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***端口扫描***'
- en: After you’ve enumerated subdomains, you can start port scanning to identify
    more attack surfaces, including running services. For example, by port scanning
    Pornhub, Andy Gill found an exposed Memcache server, and earned $2,500, as discussed
    in [Chapter 18](ch18.xhtml#ch18).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在枚举完子域名后，你可以开始端口扫描以识别更多的攻击面，包括正在运行的服务。例如，通过端口扫描 Pornhub，Andy Gill 发现了一个暴露的 Memcache
    服务器，并因此赚取了 2500 美元，详细信息可见 [第 18 章](ch18.xhtml#ch18)。
- en: The results of the port scan can also be indicative of a company’s overall security.
    For example, a company that has closed all ports except 80 and 443 (common web
    ports for hosting HTTP and HTTPS sites) is likely to be security conscious. But
    a company with lots of open ports is likely the opposite and might have better
    potential for bounties.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 端口扫描的结果也能反映出一个公司的整体安全性。例如，一个公司如果关闭了除了 80 和 443（用于托管 HTTP 和 HTTPS 网站的常用 Web 端口）之外的所有端口，那么该公司可能会注重安全性。但如果一个公司有很多开放的端口，那么它可能恰恰相反，并且可能有更高的漏洞赏金潜力。
- en: Two common port-scanning tools are Nmap and Masscan. Nmap is an older tool and
    can be slow unless you know how to optimize it. But it’s great because you can
    give it a list of URLs and it will determine the IP address to scan. It’s also
    modular, so you can include other checks in your scan. For example, the script
    titled *http-enum* will perform file and directory brute-forcing. In contrast,
    Masscan is extremely fast and might be best when you have a list of IP addresses
    to scan. I use Masscan to search commonly open ports, such as 80, 443, 8080, or
    8443, and then combine the results with screenshotting (a topic I discuss in the
    next section).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 两个常见的端口扫描工具是Nmap和Masscan。Nmap是一个较老的工具，除非你知道如何优化它，否则速度可能较慢。但它非常好用，因为你可以提供一个URL列表，它会确定扫描的IP地址。它还具有模块化功能，因此你可以在扫描中加入其他检查。例如，名为*http-enum*的脚本将执行文件和目录的暴力破解。相比之下，Masscan非常快速，当你有一个IP地址列表要扫描时，它可能是最好的选择。我使用Masscan来扫描常见的开放端口，如80、443、8080或8443，然后将结果与截图结合起来（这个话题我将在下一节中讨论）。
- en: Some details to note when port scanning from a list of subdomains are the IP
    addresses those domains are resolved to. If all but one subdomain resolves to
    a common IP address range (for example, IP addresses owned by AWS or Google Cloud
    Compute), it might be worthwhile to investigate the outlier. The different IP
    address might indicate a custom-built or third-party application that doesn’t
    share the same level of security as the company’s core applications, which reside
    on the common IP address range. As described in [Chapter 14](ch14.xhtml#ch14),
    Frans Rosen and Rojan Rijal exploited third-party services when taking over subdomains
    from Legal Robot and Uber.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在从子域列表进行端口扫描时，有一些细节需要注意，那就是这些域名解析到的IP地址。如果除了一个子域名外，其他所有子域都解析到一个常见的IP地址范围（例如，AWS或Google
    Cloud Compute拥有的IP地址），那么调查这个异常的子域可能是值得的。不同的IP地址可能表示一个定制或第三方应用程序，它的安全性可能与公司核心应用程序不同，后者位于常见的IP地址范围内。如[第14章](ch14.xhtml#ch14)所述，Frans
    Rosen和Rojan Rijal通过接管Legal Robot和Uber的子域，利用了第三方服务。
- en: '***Screenshotting***'
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***截图***'
- en: As with port scanning, a good step to take once you have a list of subdomains
    is to screenshot them. This is helpful because it gives you a visual overview
    of the program’s scope. When you’re reviewing the screenshots, there are some
    common patterns that may be indicative of vulnerabilities. First, look for common
    error messages from services known to be associated with subdomain takeovers.
    As described in [Chapter 14](ch14.xhtml#ch14), an application that relies on external
    services might change over time, and the DNS records for it might have been left
    and forgotten. If an attacker can take over the service, that could have significant
    implications for the application and its users. Alternatively, the screenshot
    might not reveal an error message but might still show that the subdomain is relying
    on a third-party service.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 与端口扫描类似，当你拥有子域名列表时，一个好的步骤是对它们进行截图。这很有帮助，因为它为你提供了程序范围的视觉概览。当你审查截图时，有一些常见的模式可能是漏洞的指示。首先，寻找与子域接管相关的服务常见的错误信息。如[第14章](ch14.xhtml#ch14)所述，一个依赖外部服务的应用程序可能随着时间的推移发生变化，它的DNS记录可能被遗留并被遗忘。如果攻击者能够接管该服务，可能会对应用程序及其用户产生重大影响。或者，截图可能没有显示错误信息，但仍可能表明该子域依赖于第三方服务。
- en: Second, you can look for sensitive content. For example, if all the subdomains
    found on **.corp.<example>.com* return a 403 access denied except one subdomain,
    which has a login to an unusual website, investigate that unusual site because
    it might be implementing custom behavior. Similarly, also watch out for administrative
    login pages, default installation pages, and so on.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，你可以寻找敏感内容。例如，如果所有在**.corp.<example>.com**下找到的子域名都返回403访问被拒绝，除了一个子域名，它有一个登录到不寻常网站的页面，那么就要调查那个不寻常的网站，因为它可能正在实施自定义行为。类似地，也要注意管理登录页面、默认安装页面等等。
- en: Third, look for applications that don’t match ones that are typical on other
    subdomains. For example, if there is only one PHP application and all the other
    subdomains are Ruby on Rails applications, it may be worthwhile to focus on that
    one PHP application because the company’s expertise seems to be in Rails. The
    importance of applications found on subdomains can be difficult to determine until
    you become familiar with them, but they can lead to great bounties like the one
    Jasmin Landry found when he escalated his SSH access to a remote code execution,
    as described in [Chapter 12](ch12.xhtml#ch12).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，寻找那些与其他子域名上常见应用不匹配的应用。例如，如果只有一个 PHP 应用，而所有其他子域名都是 Ruby on Rails 应用，那么专注于那个
    PHP 应用可能是值得的，因为该公司的技术专长似乎是在 Rails 上。子域名上找到的应用的重要性可能很难确定，直到你熟悉它们，但它们可能会带来巨大的奖励，比如
    Jasmin Landry 在将其 SSH 访问提升为远程代码执行时所发现的奖励，如 [第 12 章](ch12.xhtml#ch12)中所述。
- en: 'A few tools can help you screenshot sites. At the time of this writing, I use
    HTTPScreenShot and Gowitness. HTTPScreenShot is helpful for two reasons: first,
    you can use it with a list of IP addresses, and it will screenshot them and enumerate
    other subdomains associated with SSL certificates it parses. Second, it will cluster
    your results into groups based on whether the pages are 403 messages or 500 messages,
    whether they use the same content management systems, and other factors. The tool
    also includes the HTTP headers it finds, which is also useful.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个工具可以帮助你截图网站。在写这篇文章时，我使用的是 HTTPScreenShot 和 Gowitness。HTTPScreenShot 有两个优点：首先，你可以使用它处理
    IP 地址列表，它会截图并列出与其解析的 SSL 证书相关联的其他子域名。其次，它会根据页面是 403 消息还是 500 消息、是否使用相同的内容管理系统等因素将结果分组。这个工具还包括它找到的
    HTTP 头信息，这也很有用。
- en: Gowitness is a fast, lightweight alternative for screenshotting. I use this
    tool when I have a list of URLs instead of IP addresses. It also includes the
    headers it receives when screenshotting.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Gowitness 是一个快速、轻量的截图替代工具。当我有 URL 列表而不是 IP 地址时，我使用这个工具。它还会在截图时包括它接收到的头信息。
- en: Although I don’t use it, Aquatone is another tool worth mentioning. At the time
    of this writing, it has recently been rewritten in Go and includes clustering,
    easy result outputting to match the format required by other tools, and other
    features.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我没有使用它，Aquatone 还是一个值得一提的工具。在写这篇文章时，它最近已经用 Go 重新编写，并包含了聚类、易于输出结果以匹配其他工具所需格式等功能。
- en: '***Content Discovery***'
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***内容发现***'
- en: Once you’ve reviewed your subdomains and visual recon, you should look for interesting
    content. You can approach the content discovery phase in a few different ways.
    One way is to attempt to discover files and directories by brute-forcing them.
    The success of this technique depends on the word list you use; as mentioned earlier,
    SecLists provides good lists, particularly the raft lists, which are the ones
    I use. You can also track the results of this step over time to compile your own
    list of commonly found files.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你审查了子域名和可视化侦查结果，你应该寻找有趣的内容。你可以用几种不同的方法来进行内容发现。一个方法是通过暴力破解尝试发现文件和目录。这个技术的成功取决于你使用的词表；如前所述，SecLists
    提供了不错的词表，特别是 raft 词表，这也是我使用的词表。你还可以跟踪这一步的结果，随着时间的推移编制出你自己常见文件的列表。
- en: Once you have a list of files and directory names, you have a few tools to choose
    from. I use Gobuster or Burp Suite Pro. Gobuster is a customizable and fast brute-forcing
    tool written in Go. When you give it a domain and word list, it tests for the
    existence of directories and files, and confirms the response from the server.
    Additionally, the Meg tool, developed by Tom Hudson and also written in Go, allows
    you to test multiple paths on many hosts simultaneously. This is ideal when you’ve
    found a lot of subdomains and want to discover content across all of them simultaneously.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了文件和目录名称的列表，你就有一些工具可以选择。我使用 Gobuster 或 Burp Suite Pro。Gobuster 是一个定制化且快速的暴力破解工具，用
    Go 编写。当你提供一个域名和词表时，它会测试目录和文件的存在，并确认服务器的响应。此外，由 Tom Hudson 开发、同样用 Go 编写的 Meg 工具允许你同时在多个主机上测试多个路径。这在你找到大量子域名并希望同时在它们所有上发现内容时特别有用。
- en: As I’m using Burp Suite Pro to proxy my traffic, I’ll use either its built-in
    content discovery tool or Burp Intruder. The content discovery tool is configurable
    and allows you to use a custom word list or the built-in one, find file extension
    permutations, define how many nested folders to brute-force, and more. When using
    Burp Intruder, on the other hand, I’ll send send a request for the domain I’m
    testing to Intruder and set the payload on the end of the root path. Then I’ll
    add my list as the payload and run the attack. Typically, I’ll sort my results
    based on content length or response status depending on how the application responds.
    If I discover an interesting folder this way, I might run Intruder again on that
    folder to discover nested files.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我正在使用 Burp Suite Pro 代理我的流量，我会使用它的内置内容发现工具或 Burp Intruder。内容发现工具是可配置的，允许你使用自定义词汇表或内置词汇表，查找文件扩展名的排列组合，定义暴力破解的嵌套文件夹数量等。而当使用
    Burp Intruder 时，我会将要测试的域名请求发送给 Intruder，并将负载设置在根路径的末尾。然后我会将我的词汇表添加为负载并执行攻击。通常，我会根据应用程序响应的内容长度或响应状态来对结果进行排序。如果我通过这种方式发现了一个有趣的文件夹，我可能会再次在该文件夹上运行
    Intruder 以发现嵌套文件。
- en: When you need to go beyond file and directory brute-forcing, Google dorking,
    as described in the vulnerability Brett Buerhaus found in [Chapter 10](ch10.xhtml#ch10),
    can also provide some interesting content discovery. Google dorking can save you
    time, particularly when you find URL parameters that are commonly associated with
    vulnerabilities such as `url`, `redirect_to`, `id`, and so on. Exploit DB maintains
    a database of Google dorks for specific use cases at *[https://www.exploit-db.com/google-hacking-database/](https://www.exploit-db.com/google-hacking-database/)*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要超越文件和目录暴力破解、Google dorking（如[第10章](ch10.xhtml#ch10)中 Brett Buerhaus 发现的漏洞所描述）也能提供一些有趣的内容发现。Google
    dorking 能节省你的时间，特别是当你发现一些常见的 URL 参数时，如 `url`、`redirect_to`、`id` 等等。Exploit DB
    维护了一个专门用于特定用例的 Google dork 数据库，地址是 *[https://www.exploit-db.com/google-hacking-database/](https://www.exploit-db.com/google-hacking-database/)*。
- en: Another approach to finding interesting content is to check the company’s GitHub.
    You might find open source repositories from the company or helpful information
    about the technologies it uses. This was how Michiel Prins discovered the remote
    code execution on Algolia, as discussed in [Chapter 12](ch12.xhtml#ch12). You
    can use the Gitrob tool to crawl GitHub repositories for application secrets and
    other sensitive information. Additionally, you can review code repositories and
    find third-party libraries an application is relying on. If you’re able to find
    an abandoned project or vulnerability in the third party that affects the site,
    both could be worth a bug bounty. Code repositories can also give you insight
    into how a company handled previous vulnerabilities, especially for companies
    like GitLab that are open source.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种寻找有趣内容的方法是检查公司的 GitHub。你可能会发现该公司发布的开源代码库，或者有关它所使用技术的有用信息。正是通过这种方式，Michiel
    Prins 发现了 Algolia 上的远程代码执行漏洞，如[第12章](ch12.xhtml#ch12)中所讨论的那样。你可以使用 Gitrob 工具来爬取
    GitHub 仓库，寻找应用程序的秘密和其他敏感信息。此外，你还可以检查代码仓库，找到应用程序依赖的第三方库。如果你能发现一个废弃的项目或者影响网站的第三方漏洞，两个都可能值得提交漏洞赏金。代码仓库还能帮助你了解公司如何处理先前的漏洞，尤其是像
    GitLab 这样的开源公司。
- en: '***Previous Bugs***'
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***历史漏洞***'
- en: One of the last steps of reconnaissance is to familiarize yourself with previous
    bugs. Hacker write-ups, disclosed reports, CVEs, published exploits, and so on
    are good resources for this. As repeated throughout this book, just because code
    is updated doesn’t mean all vulnerabilities have been fixed. Be sure to test any
    changes. When a fix is deployed, it means new code was added, and that new code
    could contain bugs.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 侦察的最后一步之一是熟悉过去的漏洞。黑客写的报告、公开的漏洞报告、CVE、已发布的利用代码等，都是很好的资源。如本书多次提到的那样，仅仅因为代码已被更新，并不意味着所有漏洞都已修复。一定要对任何更改进行测试。当修复部署时，意味着新代码被添加，而这些新代码可能包含漏洞。
- en: The $15,250 bug Tanner Emek found in Shopify Partners, as described in [Chapter
    15](ch15.xhtml#ch15), was the result of reading a previously disclosed bug report
    and retesting the same functionality. As with Emek, when interesting or novel
    vulnerabilities are publicly disclosed, be sure to read the report and visit the
    application. At worst, you won’t find a vulnerability, but you’ll develop new
    skills while testing that functionality. At best, you might bypass the developer’s
    fix or find a new vulnerability.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Tanner Emek 在 Shopify Partners 中发现的 $15,250 漏洞，如[第15章](ch15.xhtml#ch15)所述，是通过阅读之前披露的漏洞报告并重新测试相同功能得出的。就像
    Emek 一样，当有趣或新颖的漏洞被公开披露时，一定要阅读报告并访问应用程序。最糟糕的情况是，你没有找到漏洞，但你在测试该功能时会培养新的技能。最好的情况是，你可能绕过了开发者的修复或发现了一个新的漏洞。
- en: Having covered all the major areas of reconnaissance, it’s time to move on to
    testing the application. As you’re testing, keep in mind that reconnaissance is
    an ongoing part of finding bug bounties. It’s always a good idea to revisit a
    target application because it constantly evolves.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖了所有主要的侦察领域后，接下来是测试应用程序的时候了。在测试时，请记住侦察是寻找漏洞奖励的一个持续过程。重新审视目标应用程序总是一个好主意，因为它在不断发展。
- en: '**Testing the Application**'
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**测试应用程序**'
- en: 'There’s no one-size-fits-all approach to testing an application. The methodology
    and techniques you use depend on the type of application you’re testing, similar
    to the way the program scope can define your recon. In this section, I’ll provide
    a general overview of the considerations you need to bear in mind and the thought
    processes you need to use when approaching a new site. But regardless of the application
    you’re testing, there’s no better advice than Matthias Karlsson’s: “Don’t think
    ‘everyone else has looked, there’s nothing left.’ Approach every target like nobody’s
    been there before. Don’t find anything? Choose another one.”'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 测试应用程序没有统一的标准方法。你使用的方法和技术取决于你正在测试的应用程序类型，这类似于程序范围可以定义你的侦察。在本节中，我将提供一个关于你需要牢记的考虑事项和在接触新站点时需要使用的思维过程的概述。但无论你测试的是哪种应用程序，没有比
    Matthias Karlsson 的建议更好的了：“不要想着‘其他人已经看过了，什么都没剩下。’像没有人去过一样去接触每一个目标。没有发现漏洞？换一个。”
- en: '***The Technology Stack***'
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***技术栈***'
- en: One of the first tasks I do when testing a new application is identify the technologies
    being used. This includes, but isn’t limited to, frontend JavaScript frameworks,
    server-side application frameworks, third-party services, locally hosted files,
    remote files, and so on. I usually do this by watching my web proxy history and
    noting the files served, the domains captured in the history, whether HTML templates
    are served, any JSON content returned, and so on. The Firefox plug-in Wappalyzer
    is also very handy for quickly fingerprinting technologies.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我在测试新应用程序时的首要任务之一是识别所使用的技术。这包括但不限于前端 JavaScript 框架、服务器端应用程序框架、第三方服务、本地托管文件、远程文件等。我通常通过查看我的
    Web 代理历史记录来完成这项工作，记录所服务的文件、历史记录中捕获的域名、是否提供 HTML 模板、返回的 JSON 内容等。Firefox 插件 Wappalyzer
    也非常方便，可以快速指纹识别技术。
- en: While I’m doing this, I leave the default configuration for Burp Suite enabled
    and walk through the site to understand the functionality and note what design
    patterns developers have used. Doing so allows me to refine the types of payloads
    I’ll use in my testing, as Orange Tsai did when he found the Flask RCE on Uber
    in [Chapter 12](ch12.xhtml#ch12). For example, if a site uses AngularJS, test
    `{{7*7}}` to see whether `49` is rendered anywhere. If the application is built
    with ASP.NET with XSS protection enabled, you might want to focus on testing other
    vulnerability types first and check for XSS as a last resort.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行测试时，我保持 Burp Suite 的默认配置，并浏览网站以了解其功能，并记录开发者使用了哪些设计模式。这样做可以帮助我优化测试中将使用的负载类型，就像
    Orange Tsai 在[第12章](ch12.xhtml#ch12)中发现 Uber 上的 Flask RCE 一样。例如，如果一个网站使用 AngularJS，可以测试
    `{{7*7}}`，看看是否会渲染出 `49`。如果应用程序是用 ASP.NET 构建并启用了 XSS 保护，可能需要先测试其他类型的漏洞，将 XSS 作为最后的选择进行检查。
- en: If a site is built with Rails, you might know that URLs typically follow a /CONTENT_TYPE/RECORD_ID
    pattern, where the RECORD_ID is an autoincremented integer. Using HackerOne as
    an example, report URLs follow the pattern *[www.hackerone.com/reports/12345](http://www.hackerone.com/reports/12345)*.
    Rails applications commonly use integer IDs, so you might prioritize testing insecure
    direct object reference vulnerabilities because this vulnerability type is easy
    for developers to overlook.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个站点是用Rails构建的，你可能知道，URLs通常遵循/CONTENT_TYPE/RECORD_ID模式，其中RECORD_ID是自动递增的整数。以HackerOne为例，报告的URL遵循模式*[www.hackerone.com/reports/12345](http://www.hackerone.com/reports/12345)*。Rails应用程序通常使用整数ID，因此你可能会优先测试不安全的直接对象引用漏洞，因为这种漏洞类型很容易被开发者忽视。
- en: If an API returns JSON or XML, you might recognize that those API calls unintentionally
    return sensitive information that isn’t rendered on the page. Those calls might
    be a good testing surface and could lead to information disclosure vulnerabilities.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果API返回JSON或XML，你可能会发现这些API调用无意中返回了页面上未呈现的敏感信息。这些调用可能是一个很好的测试表面，并可能导致信息泄露漏洞。
- en: 'Here are some factors to keep in mind at this stage:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是此阶段需要注意的一些因素：
- en: '**Content formats a site expects or accepts** For example, XML files come in
    different shapes and sizes, and XML parsing can always be associated with XXE
    vulnerabilities. Keep an eye out for sites that accept .*docx*, .*xlsx*, .*pptx*,
    or other XML file types.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**站点期望或接受的内容格式** 例如，XML文件有不同的格式和大小，XML解析通常与XXE漏洞相关。注意接受.*docx*、.*xlsx*、.*pptx*或其他XML文件类型的站点。'
- en: '**Third-party tools or services that are easily misconfigured** Whenever you
    read reports about hackers exploiting such services, try to understand how those
    reporters discovered the vulnerability and apply that process to your testing.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**容易配置错误的第三方工具或服务** 每当你阅读关于黑客利用这些服务的报道时，尝试理解报告者是如何发现漏洞的，并将这一过程应用到你的测试中。'
- en: '**Encoded parameters and how an application handles them** Oddities might be
    indicative of multiple services interacting in the backend, which could be abused.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**编码参数和应用程序如何处理它们** 异常可能表明后台多个服务之间的互动，这可能会被滥用。'
- en: '**Custom implemented authentication mechanisms, such as OAuth flows** Subtle
    differences in how an application handles redirect URLs, encoding, and state parameters
    might lead to significant vulnerabilities.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义实现的认证机制，如OAuth流程** 应用程序如何处理重定向URL、编码和状态参数的细微差异可能导致重大漏洞。'
- en: '***Functionality Mapping***'
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***功能映射***'
- en: 'Once I understand a site’s technologies, I move on to *functionality mapping*.
    At this stage, I’m still browsing, but my testing can go one of a few ways here:
    I might look for markers of vulnerabilities, define a specific goal for my testing,
    or follow a checklist.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我了解了一个站点的技术，我就会进入*功能映射*阶段。在这一阶段，我仍然在浏览，但我的测试可能会有几种方向：我可能会寻找漏洞的标志，设定测试的具体目标，或者遵循检查清单。
- en: When I’m looking for markers of vulnerabilities, I look for behavior commonly
    associated with vulnerabilities. For example, does the site allow you to create
    webhooks with URLs? If so, this might lead to SSRF vulnerabilities. Does a site
    allow for user impersonation? This could lead to sensitive personal information
    being disclosed. Can you upload files? How and where these files are rendered
    could lead to a remote code execution vulnerability, XSS, and so on. When I find
    something of interest, I stop and begin application testing, as described in the
    next section, and look for some indication of a vulnerability. This might be an
    unexpected message returned, a delay in response time, unsanitized input being
    returned, or a server-side check being bypassed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当我寻找漏洞的标志时，我会注意到与漏洞相关的常见行为。例如，站点是否允许你创建带有URL的webhook？如果是，这可能导致SSRF漏洞。站点是否允许用户冒充？这可能会导致敏感个人信息泄露。你是否可以上传文件？这些文件的渲染方式和位置可能导致远程代码执行漏洞、XSS等。当我发现感兴趣的内容时，我会停止并开始应用程序测试，如下一节所述，并寻找漏洞的迹象。这可能是返回的意外消息、响应时间的延迟、未处理的输入返回，或者绕过服务器端检查。
- en: In contrast, when I define and work toward a goal, I decide what I’ll do before
    testing the application. The goal could be to find a server-side request forgery,
    local file inclusion, remote code execution, or some other vulnerability. Jobert
    Abma, a co-founder of HackerOne, commonly employs and advocates for this approach,
    and Philippe Harewood used this method when he found his Facebook app takeover.
    With this approach, you ignore all other possibilities and focus entirely on your
    end goal. You only stop and begin testing if you find something that leads to
    your goal. For example, if you’re looking for a remote code execution vulnerability,
    unsanitized HTML returned in a response body wouldn’t be of interest.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，当我定义并朝着一个目标努力时，我会在测试应用之前决定我将做什么。这个目标可能是找到服务器端请求伪造、本地文件包含、远程代码执行或其他某些漏洞。HackerOne的联合创始人Jobert
    Abma通常使用并提倡这种方法，Philippe Harewood在发现他的Facebook应用接管漏洞时也使用了这种方法。采用这种方法时，你忽略所有其他可能性，完全专注于最终目标。只有在找到能引导你实现目标的内容时，你才会停止并开始测试。例如，如果你在寻找远程代码执行漏洞，那么返回响应体的未经处理的HTML就不再是关注的重点。
- en: Another testing approach is to follow a checklist. Both OWASP and Dafydd Stuttard’s
    *Web Application Hacker’s Handbook* provide comprehensive testing checklists for
    reviewing an application, so there’s no reason for me to try to outdo either resource.
    I don’t follow this path because it’s too monotonous and reminiscent of employment
    rather than a pleasurable hobby. Nonetheless, following a checklist can help you
    avoid missing vulnerabilities by forgetting to test specific things or forgetting
    to follow general methodologies (like reviewing JavaScript files).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种测试方法是遵循检查清单。OWASP和Dafydd Stuttard的*Web Application Hacker’s Handbook*都提供了全面的应用程序测试清单，因此我没有理由去超越这两个资源。我不选择这个方法，因为它过于单调，让我联想到工作，而不是一项愉悦的爱好。尽管如此，遵循检查清单可以帮助你避免因忘记测试某些内容或忽视遵循通用方法论（如审查JavaScript文件）而错过漏洞。
- en: '***Finding Vulnerabilities***'
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***发现漏洞***'
- en: Once you have an understanding of how an application works, you can start testing.
    Rather than setting a specific goal or using a checklist, I suggest beginning
    by looking for behavior that could indicate a vulnerability. At this stage, you
    might assume you should run automated scanners, like Burp’s scanning engine to
    look for vulnerabilities. But most programs I’ve looked at don’t permit this,
    it’s unnecessarily noisy, and it requires no skill or knowledge. Instead, you
    should focus on manual testing.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你理解了应用程序的工作方式，就可以开始测试。与其设定一个具体目标或使用检查清单，我建议从寻找可能表明漏洞的行为开始。在这个阶段，你可能认为应该运行自动化扫描器，比如Burp的扫描引擎来寻找漏洞。但我查看过的大多数程序并不允许这样做，它们噪声过大，而且不需要任何技能或知识。相反，你应该专注于手动测试。
- en: If I’ve begun my application testing without finding anything exciting to look
    at during my functionality mapping, I start using the site as if I were a customer.
    I’ll create content, users, teams, or whatever the application provides. While
    doing this, I usually submit payloads wherever input is accepted and look for
    anomalies and unexpected behavior from the site. I typically use the payload `<s>000'")};--//`,
    which includes all the special characters that could break the context the payload
    is rendered in, whether that’s HTML, JavaScript, or a backend SQL query. This
    type of payload is often referred to as a *polyglot*. The `<s>` tag is also innocent,
    easy to spot when rendered unsanitized in HTML (you would see strikethrough text
    when that happens), and frequently left unmodified when a site attempts to sanitize
    output by altering input.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我在功能映射过程中没有找到任何有趣的内容，我会开始像客户一样使用网站。我会创建内容、用户、团队或应用程序提供的任何其他功能。在此过程中，我通常会在接受输入的地方提交有效载荷，并寻找异常和意外行为。我通常使用的有效载荷是`<s>000'")};--//`，它包含了所有可能破坏有效载荷渲染上下文的特殊字符，无论是在HTML、JavaScript还是后端SQL查询中。这种类型的有效载荷通常被称为*polyglot*。`<s>`标签本身是无害的，容易在HTML中渲染时发现（你会看到文本上有删除线），并且当网站尝试通过修改输入来清理输出时，通常会被原封不动地保留下来。
- en: Additionally, when there’s a chance the content I’m creating could be rendered
    on an administration panel, like my username, address, and so forth, I’ll use
    a different payload to target blind XSS from XSSHunter (an XSS tool discussed
    in [Appendix A](app01.xhtml#app01)). Finally, if the site uses a templating engine,
    I’ll also add payloads associated with the template. For AngularJS, this would
    look like `{{8*8}}[[5*5]]`, and I would look for `64` or `25` rendered. Although
    I’ve never found a server-side template injection in Rails, I still try the payload
    ``<%= `ls` %>`` in case an inline render shows up one day.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当我创建的内容有可能在管理面板上呈现时，例如我的用户名、地址等，我会使用不同的载荷来针对 XSSHunter 的盲注（一个在[附录 A](app01.xhtml#app01)中讨论的
    XSS 工具）。最后，如果该网站使用模板引擎，我还会添加与模板相关的载荷。对于 AngularJS，这看起来像是 `{{8*8}}[[5*5]]`，我会查看是否渲染出了
    `64` 或 `25`。尽管我从未在 Rails 中找到过服务器端模板注入，但我仍然会尝试使用载荷``<%= `ls` %>``，以防某天出现内联渲染。
- en: 'Although submitting these types of payloads covers injection type vulnerabilities
    (such as XSS, SQLi, SSTI, and so on), it also doesn’t require much critical thinking
    and can quickly become repetitive and boring. So, to avoid burn out, it’s important
    to keep an eye on your proxy history for unusual functionality commonly associated
    with vulnerabilities. Common vulnerabilities and areas to keep an eye out for
    include, but are not limited to, the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管提交这些类型的载荷涵盖了注入类型的漏洞（如 XSS、SQLi、SSTI 等），但它们也不需要太多的批判性思维，且容易变得重复且乏味。因此，为了避免疲劳，重要的是时刻关注代理历史，寻找通常与漏洞相关的不寻常功能。需要关注的常见漏洞和领域包括但不限于以下内容：
- en: '**CSRF vulnerabilities** The types of HTTP requests that change data and whether
    they’re using and validating CSRF tokens or checking the referrer or origin headers'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSRF 漏洞** 改变数据的 HTTP 请求类型，以及它们是否使用和验证 CSRF 令牌，或者检查引用者或来源头'
- en: '**IDORs** Whether there are any ID parameters that can be manipulated'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**IDOR（不当对象引用）** 是否有可以被篡改的 ID 参数'
- en: '**Application logic** Opportunities to repeat requests across two separate
    user accounts'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**应用逻辑** 跨两个不同用户账户重复请求的机会'
- en: '**XXEs** Any XML-accepting HTTP requests'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**XXEs** 任何接受 XML 的 HTTP 请求'
- en: '**Information disclosures** Any content that is guaranteed to be, or should
    be, kept private'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**信息披露** 任何保证是，或应当保密的内容'
- en: '**Open redirects** Any URLs that have a redirect-related parameter'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**开放重定向** 任何具有与重定向相关的参数的 URL'
- en: '**CRLFs, XSS, and some open redirects** Any requests that echo URL parameters
    in the response'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**CRLF、XSS 及某些开放重定向** 任何在响应中回显 URL 参数的请求'
- en: '**SQLi** Whether adding a single quote, bracket, or semicolon to a parameter
    changes a response'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLi** 是否通过向参数中添加单引号、括号或分号改变响应'
- en: '**RCEs** Any type of file upload or image manipulation'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**RCE（远程代码执行）** 任何类型的文件上传或图像处理'
- en: '**Race conditions** Delayed data processing or behaviors related to the time
    of use or time of check'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**竞态条件** 与使用时间或检查时间相关的延迟数据处理或行为'
- en: '**SSRFs** Functionality that accepts URLs, such as webhooks or external integrations'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**SSRF（服务器端请求伪造）** 接受 URL 的功能，如 Webhooks 或外部集成'
- en: '**Unpatched security bugs** Disclosed server information, such as versions
    of PHP, Apache, Nginx, and so on, that can reveal outdated technology'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**未修补的安全漏洞** 公开的服务器信息，如 PHP、Apache、Nginx 等版本信息，这些可能暴露过时的技术'
- en: Of course, this list is endless and arguably always evolving. When you need
    more inspiration for where to hunt for bugs, you can always look at the takeaway
    sections in each chapter of this book. After you’ve dug into the functionality
    and need a break from HTTP requests, you can flip back to your file and directory
    brute-forcing to see what, if any, interesting files or directories have been
    discovered. You should review those findings and visit the pages and files. This
    is also the perfect time to reassess what you’re brute-forcing and determine whether
    there are other areas to focus on. For example, if you discovered an `/api/` endpoint,
    you could brute-force new paths on that, which can sometimes lead to hidden, undocumented
    functionality to test. Similarly, if you used Burp Suite to proxy your HTTP traffic,
    Burp might have picked up additional pages to check based on the links it parsed
    from the pages you’d already visited. These unvisited pages, which might lead
    you to untested functionality, are gray in Burp Suite to differentiate them from
    already-visited links.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个清单是无止境的，并且可以说一直在不断发展。当你需要更多的灵感去寻找漏洞时，你可以随时查看本书每章的总结部分。在你深入了解功能并需要暂时从 HTTP
    请求中休息时，你可以翻回文件和目录暴力破解，看看是否发现了任何有趣的文件或目录。你应该回顾这些发现并访问相关页面和文件。这也是重新评估你正在进行的暴力破解操作的最佳时机，看看是否有其他领域可以关注。例如，如果你发现了一个
    `/api/` 端点，你可以在该端点上进行新的路径暴力破解，这有时会引导你发现隐藏的、未文档化的功能进行测试。类似地，如果你使用 Burp Suite 代理你的
    HTTP 流量，Burp 可能会根据你已经访问的页面解析的链接，发现更多需要检查的页面。这些未访问的页面，可能会引导你发现未测试的功能，在 Burp Suite
    中它们会以灰色显示，以便与已访问的链接区分开来。
- en: As previously mentioned, hacking web applications isn’t magic. Being a bug hunter
    requires one-third knowledge, one-third observation, and one-third perseverance.
    Digging deeper into the application and thoroughly testing without wasting your
    time is key. Unfortunately, recognizing the difference takes experience.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，黑客攻击 Web 应用并非魔法。成为一名漏洞猎人需要三分之一的知识，三分之一的观察力，以及三分之一的毅力。深入挖掘应用并彻底测试而不浪费时间是关键。不幸的是，识别这种差异需要经验。
- en: '**Going Further**'
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步深入**'
- en: Once you’ve completed your recon and have thoroughly tested all the functionality
    you can find, you should research other ways to make your bug search more efficient.
    Although I can’t tell you how to do that in all situations, I do have some suggestions.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了侦察并彻底测试了所有能找到的功能，你应该研究其他方法来提高漏洞搜索的效率。虽然我不能告诉你在所有情况下如何做到这一点，但我确实有一些建议。
- en: '***Automating Your Work***'
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***自动化你的工作***'
- en: One way to save time is by automating your work. Although we’ve used some automated
    tools in this chapter, most of the techniques described have been manual, which
    means we’re limited by time. To move beyond the time barrier, you need computers
    to hack for you. Rojan Rijal disclosed a Shopify bug he discovered five minutes
    after the subdomain he found the bug on went live. He was able to discover it
    so quickly because he automated his recon on Shopify. How to automate your hacking
    is beyond the scope of this book—and it’s also entirely possible to be a successful
    bug bounty hacker without it—but it’s one way hackers increase their income. You
    can begin by automating your reconnaissance. For example, you can automate several
    tasks, such as subdomain brute-forcing, port scanning, and visual recon, to name
    a few.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 节省时间的一种方法是通过自动化你的工作。虽然在本章中我们使用了一些自动化工具，但大多数描述的技术都是手动的，这意味着我们受限于时间。为了突破时间障碍，你需要计算机帮你进行黑客攻击。Rojan
    Rijal 在发现某个子域名漏洞并上线后五分钟内就公开了该漏洞。他能够如此快速地发现漏洞，是因为他自动化了对 Shopify 的侦察。如何自动化你的黑客攻击超出了本书的范围——而且没有自动化也完全可以成为一名成功的漏洞赏金黑客——但这是黑客增加收入的一种方式。你可以从自动化侦察开始。例如，你可以自动化几个任务，如子域名暴力破解、端口扫描和可视化侦察等等。
- en: '***Looking at Mobile Apps***'
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***查看移动应用***'
- en: 'Another opportunity to find more bugs is by looking at any mobile applications
    that are included in the program’s scope. This book has focused on web hacking,
    but mobile hacking offers plenty of new opportunities to find bugs. You can hack
    mobile apps in one of two ways: testing the application code directly or testing
    the APIs the app interacts with. I focus on the latter because it’s similar to
    web hacking and I can concentrate on vulnerability types like IDOR, SQLi, RCE,
    and so on. To start testing mobile app APIs, you’ll need to proxy your phone traffic
    as you’re using the app through Burp. This is one way to see the HTTP calls being
    made so you can manipulate them. But sometimes an app uses *SSL pinning*, meaning
    it won’t recognize or use the Burp SSL certificate, so you can’t proxy the app’s
    traffic. Bypassing SSL pinning, proxying your phone, and general mobile hacking
    is beyond the scope of this book, but they do represent a great opportunity for
    new learning.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个发现更多漏洞的机会是查看在项目范围内包含的任何移动应用程序。本书主要关注网络攻击，但移动攻击为发现漏洞提供了许多新机会。你可以通过两种方式来攻击移动应用：直接测试应用程序代码或测试应用程序与之交互的
    API。我更关注后者，因为它类似于 Web 攻击，并且我可以集中精力研究诸如 IDOR、SQLi、RCE 等漏洞类型。要开始测试移动应用 API，你需要通过
    Burp 代理你的手机流量，边使用应用程序边进行测试。这是查看 HTTP 调用的一种方式，以便你可以操控这些调用。但有时，应用程序使用 *SSL 钉扎*，这意味着它不会识别或使用
    Burp 的 SSL 证书，因此你无法代理应用程序的流量。绕过 SSL 钉扎、代理手机流量以及一般的移动攻击超出了本书的范围，但它们确实代表了一个很好的新学习机会。
- en: '***Identifying New Fuctionality***'
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***识别新功能***'
- en: The next area to focus on is identifying new functionality as it’s added to
    the application you’re testing. Philippe Harewood is an amazing example of someone
    who has mastered this skill. Among the top-ranked hackers in the Facebook program,
    he openly shares the vulnerabilities he discovers on his website at *[https://philippeharewood.com/](https://philippeharewood.com/)*.
    His write-ups routinely reference new functionality he’s discovered and the vulnerabilities
    he’s found before others can because of his quick identification. Frans Rosen
    shares some of his methodology for identifying new functionality on the Detectify
    blog at *[https://blog.detectify.com/](https://blog.detectify.com/)*. To track
    new functionality on the websites you’re testing, you can read the engineering
    blogs of the sites you test, monitor their engineering Twitter feeds, sign up
    for their newsletters, and so on.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步需要关注的是，在你测试的应用程序中添加新功能时，如何识别这些功能。Philippe Harewood 是一个在这方面掌握技能的优秀例子。在 Facebook
    项目中的顶级黑客中，他公开分享他在自己的网站上发现的漏洞，网址是 *[https://philippeharewood.com/](https://philippeharewood.com/)*。他的写作通常会引用他发现的新功能和他在别人之前发现的漏洞，因为他能够迅速识别这些内容。Frans
    Rosen 在 Detectify 博客上分享了他识别新功能的一些方法，网址是 *[https://blog.detectify.com/](https://blog.detectify.com/)*。为了跟踪你正在测试的网站上的新功能，你可以阅读这些网站的工程博客，关注它们的工程
    Twitter 帐号，注册它们的新闻通讯，等等。
- en: '***Tracking JavaScript Files***'
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***跟踪 JavaScript 文件***'
- en: You can also discover new site functionality by tracking JavaScript files. Focusing
    on JavaScript files is particularly powerful when a site relies on frontend JavaScript
    frameworks to render its content. The application will rely on having most of
    the HTTP endpoints a site uses included in its JavaScript files. Changes in the
    files might represent new or changed functionality you can test. Jobert Abma,
    Brett Buerhaus, and Ben Sadeghipour have discussed approaches on how they have
    tracked JavaScript files; you can find their write-ups with a quick Google search
    of their names and the word “reconnaissance.”
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过跟踪 JavaScript 文件来发现新的网站功能。专注于 JavaScript 文件特别有效，尤其是当一个网站依赖前端 JavaScript
    框架来渲染内容时。该应用程序将依赖于将大多数网站使用的 HTTP 端点包含在其 JavaScript 文件中。文件中的变化可能代表你可以测试的新功能或已更改的功能。Jobert
    Abma、Brett Buerhaus 和 Ben Sadeghipour 讨论了他们如何跟踪 JavaScript 文件的方法；你可以通过快速 Google
    搜索他们的名字和“侦察”这个词，找到他们的相关写作。
- en: '***Paying for Access to New Functionality***'
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***为访问新功能付费***'
- en: Although it might seem counterintuitive when you’re trying to earn money through
    bounties, you can also pay for access to functionality. Frans Rosen and Ron Chan
    have discussed the success they’ve enjoyed by paying for access to new functionality.
    For example, Ron Chan paid a couple of thousand dollars to test an application
    and found a significant number of vulnerabilities that made the investment very
    worthwhile. I’ve also been successful paying for products, subscriptions, and
    services that increase my potential testing scope. Others aren’t likely to want
    to pay for functionality on sites they don’t use, so this functionality has more
    undiscovered vulnerabilities.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在你试图通过漏洞奖励赚钱时，这可能看起来有些违反直觉，但你也可以支付费用来访问某些功能。Frans Rosen 和 Ron Chan 讨论了他们通过支付费用获得新功能访问权限所取得的成功。例如，Ron
    Chan 支付了几千美元来测试一个应用程序，发现了大量漏洞，这使得这笔投资非常值得。我自己也通过支付产品、订阅和服务的费用，成功地扩大了测试范围。其他人通常不愿意为他们不使用的网站的功能支付费用，因此这些功能中往往隐藏着更多未被发现的漏洞。
- en: '***Learning the Technology***'
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***学习技术***'
- en: Additionally, you can look into the technologies, libraries, and software that
    you know a company is using and learn how they work in detail. The more you know
    how a technology works, the more likely you are to find bugs based on how it’s
    being used in the applications you test. For example, finding the ImageMagick
    vulnerabilities in [Chapter 12](ch12.xhtml#ch12) required an understanding of
    how ImageMagick and its defined file types work. You might be able to find additional
    vulnerabilities by looking at other technology linked to libraries like ImageMagick.
    Tavis Ormandy did this when he disclosed additional vulnerabilities in Ghostscript,
    which ImageMagick supports. You can find more information about these Ghostscript
    vulnerabilities at *[https://www.openwall.com/lists/oss-security/2018/08/21/2](https://www.openwall.com/lists/oss-security/2018/08/21/2)*.
    Similarly, FileDescriptor revealed in a blog post that he reads RFCs on web functionality
    and focuses on security considerations to understand how something is supposed
    to work versus how it’s actually implemented. His intimate knowledge of OAuth
    is a great example of deep diving into a technology that numerous websites use.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以深入了解公司正在使用的技术、库和软件，并学习它们的工作原理。你了解得越多，越容易发现基于这些技术在应用程序中的使用方式所产生的漏洞。例如，发现[第12章](ch12.xhtml#ch12)中关于
    ImageMagick 的漏洞就需要理解 ImageMagick 及其定义的文件类型是如何工作的。你也许能通过查看与 ImageMagick 相关的其他技术，发现更多的漏洞。Tavis
    Ormandy 就是通过披露 Ghostscript 中的额外漏洞来实现这一点，而 ImageMagick 正是支持 Ghostscript 的。你可以通过访问
    *[https://www.openwall.com/lists/oss-security/2018/08/21/2](https://www.openwall.com/lists/oss-security/2018/08/21/2)*
    获取更多关于 Ghostscript 漏洞的信息。类似地，FileDescriptor 在一篇博客中透露，他通过阅读关于 Web 功能的 RFC，并专注于安全性考虑，来理解某个功能应该如何工作与实际实现之间的差异。他对
    OAuth 的深入了解是研究许多网站所使用技术的一个很好的例子。
- en: '**Summary**'
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter, I’ve tried to shed some light on possible approaches to hacking
    based on my own experience and interviews with top bug bounty hackers. To date,
    I’ve had the most success after exploring a target, understanding the functionality
    it provides, and mapping that functionality to vulnerability types for testing.
    But areas that I continue to explore, and encourage you to look into as well,
    are automation and documenting your methodology.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我尝试根据我个人的经验和与顶级漏洞奖励黑客的访谈，阐明一些可能的黑客攻击方法。到目前为止，我在探索目标、了解其提供的功能并将其功能映射到漏洞类型进行测试后取得了最好的成功。但我仍在持续探索的领域，并鼓励你也进行探索的包括自动化和记录你的方法论。
- en: 'Lots of hacking tools are available that can make your life easier: Burp, ZAP,
    Nmap, and Gowitness are some of the few I’ve mentioned. To make better use of
    your time, keep these tools in mind as you hack.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多黑客工具可以帮助你更轻松地进行渗透测试：Burp、ZAP、Nmap 和 Gowitness 是我提到的其中一些。为了更好地利用你的时间，记得在进行黑客攻击时，牢记这些工具。
- en: Once you’ve exhausted the typical avenues you’d use to find bugs, look for ways
    to make your bug searches more successful by digging deeper into mobile applications
    and new functionality developed on the websites you’re testing.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你用尽了常规的查找漏洞方法，尝试通过深入挖掘移动应用程序和你正在测试的网站中新开发的功能，来让你的漏洞搜索更加成功。
