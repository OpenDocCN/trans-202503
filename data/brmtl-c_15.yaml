- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Dynamic Memory
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 动态内存
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: 'Embedded systems have very limited random access memory (RAM). So far, we’ve
    divided the free memory into a small stack with no space left for anything else.
    When dealing with bigger systems, we have gigabytes of memory, making it easier
    to divide the memory into two sections: the stack and the heap.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式系统的随机存取内存（RAM）非常有限。到目前为止，我们将空闲内存划分为一个小栈，没有空间容纳其他内容。当处理更大的系统时，我们有了数GB的内存，这使得我们可以更轻松地将内存划分为两个部分：栈和堆。
- en: We talked about the stack in Chapter 7. It’s where the program allocates local
    variables and temporary values for each procedure as it’s needed. The heap is
    a little different. You decide when memory is allocated from the heap as well
    as when it is returned to the heap. Using the heap, you can create very complex
    and large data structures. For example, web browsers use the heap to store the
    structural elements that make up a web page.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第七章讨论了栈。栈是程序为每个过程分配局部变量和临时值的地方。堆则有点不同。你可以决定何时从堆中分配内存，以及何时将内存返回堆中。使用堆，你可以创建非常复杂和大型的数据结构。例如，网页浏览器使用堆来存储构成网页的结构元素。
- en: This chapter describes how to allocate and deallocate memory. In addition, we’ll
    explore how to implement a linked-list data structure to demonstrate common dynamic
    memory operations and how to debug common memory problems.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述了如何分配和释放内存。此外，我们还将探讨如何实现一个链表数据结构，以展示常见的动态内存操作，并讨论如何调试常见的内存问题。
- en: Basic Heap Allocation and Deallocation
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本的堆内存分配与释放
- en: 'We use the `malloc` function to get memory from the heap. Here is the general
    form of this function:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `malloc` 函数从堆中获取内存。以下是该函数的一般形式：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This function gets `number-of-bytes` from the heap and returns a pointer to
    them. The memory is uninitialized, so it contains random values. If the program
    is out of heap, the function returns the `NULL` pointer.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数从堆中获取 `number-of-bytes` 字节并返回指向它们的指针。内存是未初始化的，因此它包含随机值。如果程序堆内存耗尽，函数将返回 `NULL`
    指针。
- en: The program in [Listing 13-1](#listing13-1) allocates memory for a structure
    on the heap and then does absolutely nothing with it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 13-1](#listing13-1) 中的程序为堆上的一个结构分配内存，然后对其什么也不做。'
- en: '**simple.c**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**simple.c**'
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 13-1: A simple pointer allocation'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 13-1：一个简单的指针分配
- en: 'To make the program more reliable, we use `sizeof(*listPtr)` to determine how
    many bytes to allocate, which is a common design pattern:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使程序更可靠，我们使用 `sizeof(*listPtr)` 来确定分配多少字节，这是一个常见的设计模式：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A common design mistake is to omit the asterisk, like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的设计错误是省略了星号，像这样：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There are things and pointers to things. The `listPtr` variable is a pointer,
    and the `*listPtr` expression is a thing. A pointer is small: 8 bytes on a 64-bit
    system. The size of a thing, in this case, is 56 bytes. The design pattern ensures
    that you allocate the right number of bytes for the variable, since the variable
    is repeated in the argument to `malloc`.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有事物和指向事物的指针。`listPtr` 变量是一个指针，而 `*listPtr` 表达式是一个事物。指针是小的：在 64 位系统上为 8 字节。事物的大小，在这个例子中，是
    56 字节。设计模式确保你为变量分配了正确的字节数，因为变量在 `malloc` 的参数中会重复出现。
- en: 'Oftentimes you’ll see the structure itself, instead of a pointer to the structure,
    used in `sizeof`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你经常会看到结构本身，而不是指向结构的指针，用在 `sizeof` 中：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'That works, but it’s slightly dangerous. Suppose someone changes the type of
    `listPtr`. For example, the following is incorrect:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做是可行的，但有些危险。假设有人改变了 `listPtr` 的类型。例如，以下是不正确的：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'So what happened? In the beginning we had the following correct but dangerous
    declaration:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 那么发生了什么呢？一开始我们有以下正确但危险的声明：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Everything worked, because `listPtr` was a pointer to `struct aList`. As long
    as the types matched, everything was okay. Now let’s say someone decided to alter
    the code and made `listPtr` point to the new and improved version of the `aList`
    called `aListImproved`, *but they didn’t change the type in the* `malloc` *function*.
    What’s worse, imagine if the code wasn’t the simple, obvious one-liner from earlier
    and instead looked like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都正常，因为 `listPtr` 是指向 `struct aList` 的指针。只要类型匹配，一切都没有问题。现在假设有人决定修改代码，使得 `listPtr`
    指向新的、改进版的 `aList`，称为 `aListImproved`，*但是他们没有在* `malloc` *函数中更改类型*。更糟糕的是，假设代码不再是简单的、显而易见的一行代码，而是像这样：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This code doesn’t allocate enough space for the new fields, so every time someone
    uses the new fields, random memory is overwritten.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码没有为新字段分配足够的空间，因此每次有人使用这些新字段时，随机的内存就会被覆盖。
- en: 'A good practice to see if you ran out of memory is to check whether `malloc`
    returned a `NULL` pointer:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的做法是检查 `malloc` 是否返回了 `NULL` 指针，以此判断是否耗尽了内存：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is vital even if you think `malloc` will never fail.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你认为 `malloc` 永远不会失败，这一点也是至关重要的。
- en: 'Our program has a *memory leak*, meaning that it does not deallocate the memory
    it uses. When a program deallocates memory, it’s returned to the heap for reuse
    by a later `malloc`. To do that, we use the `free` function:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的程序有 *内存泄漏*，这意味着它没有回收所使用的内存。当程序回收内存时，它会被返回到堆中，以便之后的 `malloc` 可以重新使用。为了做到这一点，我们使用
    `free` 函数：
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Setting the `listPtr` to `NULL` is a design pattern that makes sure you don’t
    try to use the memory after it’s freed. It’s not required by the C language.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `listPtr` 设置为 `NULL` 是一种设计模式，它确保在内存被释放后，不会再尝试使用这块内存。C 语言并没有强制要求这样做。
- en: 'If we try to use the freed `listPtr` without setting it to `NULL` first, we’ll
    write into memory that shouldn’t have been written to. Here’s an example:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在没有先将释放的 `listPtr` 设置为 `NULL` 的情况下使用它，我们将写入本不该写入的内存。下面是一个示例：
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When we write to freed memory, something bad may happen later in the program
    that will be difficult to debug because the relationship between the bug and the
    preceding mistake will not be obvious.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们向已释放的内存写入数据时，可能会发生一些程序错误，调试起来会很困难，因为错误和之前的错误之间的关系不容易发现。
- en: 'It’s nice if we make our mistakes in an obvious manner, like so:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在明显的方式中犯错，那就很好，比如这样：
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is a form of paranoid programming. The idea is to turn a subtle, hard-to-find
    screwup into one that crashes the entire program and is thus much easier to find.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种偏执编程的形式。其思路是将一个微妙且难以发现的错误转化为一个能够崩溃整个程序的错误，这样更容易找到问题。
- en: Linked Lists
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链表
- en: Now that we have a heap and can store data in it, we’re going to use a primitive
    data structure called a *singly linked list*, which has several advantages over
    an array. It does not have a fixed size, and insert and delete operations are
    much quicker using it than using an array. (Arrays have the advantage of being
    faster to search.)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了堆并且可以在其中存储数据，我们将使用一种叫做 *单向链表* 的原始数据结构，这比数组有多个优势。它没有固定大小，而且在使用它时，插入和删除操作比数组要快得多。（数组的优势在于查找速度较快。）
- en: Imagine we need to store a number of names for a phone book. The problem is
    that we don’t know how many names. Also, names may be added or removed at any
    time. For embedded systems, this problem is simple. We create an array in which
    to store the names. If we run out of room in the array, we tell the users they
    can’t store any more names. A linked list would be better, if we had the memory
    and if we had a heap. On an extremely limited embedded system, we have neither.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们需要为电话簿存储多个姓名。问题在于我们不知道会有多少个姓名，而且姓名可能随时被添加或删除。对于嵌入式系统来说，这个问题很简单。我们创建一个数组来存储姓名。如果数组空间用完，我们告诉用户无法再存储更多姓名。如果我们有内存并且有堆，使用链表会更好。在极其有限的嵌入式系统中，我们两者都没有。
- en: Each element of our list, called a *node*, is allocated from the heap. To keep
    track of these elements, we have a pointer to the first node. The first node has
    a pointer to the second node, and so on, until we reach the last node. Its pointer
    is `NULL`, indicating the end of the list. There is no fixed number of nodes.
    If we need another one, we just allocate it from the heap.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们链表中的每个元素，称为 *节点*，都是从堆中分配的。为了跟踪这些元素，我们有一个指向第一个节点的指针。第一个节点有一个指向第二个节点的指针，依此类推，直到我们到达最后一个节点。它的指针是
    `NULL`，表示链表的结束。节点的数量没有固定限制。如果我们需要更多的节点，只需从堆中分配一个新的节点。
- en: 'Here is the structure for the linked list:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是链表的结构：
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `next` pointer points to the next node (or `NULL`), and the `name` array
    stores up to 20 characters. [Figure 13-1](#figure13-1) is a diagram of this list.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`next` 指针指向下一个节点（或 `NULL`），而 `name` 数组最多存储 20 个字符。[图 13-1](#figure13-1)是该链表的示意图。'
- en: '![f13001](image_fi/501621c13/f13001.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![f13001](image_fi/501621c13/f13001.png)'
- en: 'Figure 13-1: A singly linked list'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13-1：单向链表
- en: Singly linked lists provide a very simple way of storing a variable number of
    items in the heap.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 单向链表提供了一种非常简单的方式，将不确定数量的项存储在堆中。
- en: Adding a Node
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一个节点
- en: To add a node (say, “Fred”) to the list, we must first create one. In the code,
    we make the `newNode` variable point to the newly created node. The memory now
    looks like [Figure 13-2](#figure13-2).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要将一个节点（例如“Fred”）添加到列表中，我们必须先创建一个。在代码中，我们让`newNode`变量指向新创建的节点。此时内存布局如[图13-2](#figure13-2)所示。
- en: '![f13002](image_fi/501621c13/f13002.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![f13002](image_fi/501621c13/f13002.png)'
- en: 'Figure 13-2: New node created'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图13-2：创建新节点
- en: '[Figure 13-2](#figure13-2) shows our linked list (without “Fred”) and the new
    node we’ve allocated for “Fred.” Next, we make the `next` link of our new node
    point to the start of the list (see [Figure 13-3](#figure13-3)).'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[图13-2](#figure13-2)展示了我们的链表（不包括“Fred”）以及我们为“Fred”分配的新节点。接下来，我们让新节点的`next`指针指向列表的起始位置（参见[图13-3](#figure13-3)）。'
- en: '![f13003](image_fi/501621c13/f13003.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![f13003](image_fi/501621c13/f13003.png)'
- en: 'Figure 13-3: The `next` pointer of the new node points to the start of the
    list.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图13-3：新节点的`next`指针指向列表的起始位置。
- en: The last step is to assign `theList = newNode`, moving the pointer to the head
    of our list to our new first node (see [Figure 13-4](#figure13-4)).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将`theList = newNode`，将指针移动到我们的列表头部，指向新的第一个节点（参见[图13-4](#figure13-4)）。
- en: '![f13004](image_fi/501621c13/f13004.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![f13004](image_fi/501621c13/f13004.png)'
- en: 'Figure 13-4: Moving the new node to the head of the list'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图13-4：将新节点移动到列表头部
- en: '[Listing 13-2](#listing13-2) shows the code for adding the new node to the
    start of the list.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单13-2](#listing13-2)展示了将新节点添加到列表开头的代码。'
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Listing 13-2: Adding a word to the linked list'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 清单13-2：将单词添加到链表中
- en: 'We start with a function declaration, and the `static` keyword indicates that
    the function is visible only to the code in this file. We first ask for the word
    to add and get it using the `fgets` function, which has the following general
    form:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从函数声明开始，`static`关键字表示该函数仅对当前文件中的代码可见。我们首先请求要添加的单词，并使用`fgets`函数获取它，其通用形式如下：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This function reads a line from the `file` and puts it in the `array`. The `size`
    is the number of bytes to stick in the array, including an end-of-string (`\0`)
    character. In this case, the array is `line` (the input line), and the file is
    `stdin` (standard in, or in other words, the terminal). If `fgets` returns `NULL`,
    we couldn’t read `stdin` because of an error or running out of data. At that point,
    we give up and return because we didn’t get a word.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数从`file`读取一行并将其放入`array`中。`size`是要放入数组的字节数，包括字符串结束符（`\0`）。在此例中，数组是`line`（输入行），文件是`stdin`（标准输入，换句话说，就是终端）。如果`fgets`返回`NULL`，表示我们因为错误或数据读取完毕无法读取`stdin`。此时，我们放弃并返回，因为没有获取到单词。
- en: The `fgets` function reads at most `size``-1` characters, because it always
    puts an end-of-string character (`\0`) in the array. If the line that’s entered
    is shorter than `size`, the entire line is put in the buffer, including the newline.
    If it’s longer, the input is truncated.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`fgets`函数最多读取`size`-1个字符，因为它总是将字符串结束符（`\0`）放入数组中。如果输入的行短于`size`，整个行都会被放入缓冲区，包括换行符。如果输入的行较长，则输入会被截断。'
- en: We can’t count on a newline being in the buffer, nor do we want one. If the
    last character in the string (found using the `strlen` function, which returns
    the number of characters in the string) is a newline, we delete it by changing
    it to a null (`'\0'`). Then we allocate memory for the new node and populate it
    by copying `line` into the node’s name.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能依赖缓冲区中有换行符，也不希望有。如果字符串中的最后一个字符（通过`strlen`函数找到，该函数返回字符串的字符数）是换行符，我们通过将其改为空字符（`'\0'`）来删除它。接着，我们为新节点分配内存，并通过将`line`复制到节点的名称中来填充它。
- en: The `strncpy` function copies the second argument (`line`) into the first (`newNode->name`)
    but copies only the number of characters specified by the third argument. If the
    data to be copied (`line`) has more characters than the `size` parameter, it limits
    the number of characters copied and doesn’t insert an end-of-string character
    (`\0`) at the end, so just to be safe, we manually add an end-of-string character
    at the end of the `name` array.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`strncpy`函数将第二个参数（`line`）复制到第一个参数（`newNode->name`）中，但只复制第三个参数指定的字符数。如果要复制的数据（`line`）比`size`参数更多，函数会限制复制的字符数，并且不会在末尾插入字符串结束符（`\0`），因此为了安全起见，我们手动在`name`数组的末尾添加一个结束符。'
- en: We make `newNode` point to the first node, and then we take `theList` and make
    it point to the new node, as shown in Figures 13-3 and 13-4.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们让`newNode`指向第一个节点，然后将`theList`指向新节点，如图13-3和13-4所示。
- en: Printing the Linked List
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打印链表
- en: 'The rules for printing a linked list are simple. Here’s an example:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 打印链表的规则很简单。这里是一个示例：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We start with the first node 1, print it, and then go to the next node 3. We
    keep going until we run out of list 2. In this example, the `for` loop initializer,
    end condition, and iteration statement are split over three lines. The code does
    add an extra comma at the end of the list, but I’m sure you can figure out how
    to fix that. [Figure 13-5](#figure13-5) shows how it works.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从第一个节点 1 开始，打印它，然后转到下一个节点 3。我们继续执行，直到链表 2 遍历完为止。在这个示例中，`for` 循环的初始化、结束条件和迭代语句分布在三行代码中。代码确实会在列表末尾添加一个额外的逗号，但我相信你能弄清楚如何修复这个问题。[图
    13-5](#figure13-5) 展示了它的工作原理。
- en: '![f13005](image_fi/501621c13/f13005.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![f13005](image_fi/501621c13/f13005.png)'
- en: 'Figure 13-5: Printing the list'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13-5：打印列表
- en: Because our list is a simple data structure, printing is simple, and the flexibility
    of the C `for` loop makes it easy to go through the list.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的链表是一个简单的数据结构，打印过程也很简单，而 C 语言的 `for` 循环的灵活性使得遍历链表变得容易。
- en: Deleting a Node
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除节点
- en: 'To delete a node, we first go through the list and find the one we want. Next,
    we remove the node and then connect the previous node to the next node. The code
    to go through the list looks like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除一个节点，我们首先遍历链表并找到我们想要的节点。接下来，我们移除该节点，然后将前一个节点连接到下一个节点。遍历链表的代码如下：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We use a `for` loop, much like we did for printing 1, but instead of printing
    the node, we check to see whether it’s the one we want with the `strcmp` function
    2, which returns `0` if the strings are the same. If it’s not the one we want,
    we update the pointer to the previous node 6 (which we’ll need for deleting) and
    go to the next node using the `for` loop.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个 `for` 循环，和打印时的方式差不多 1，但不是打印节点，而是使用 `strcmp` 函数 2 来检查它是否是我们想要的节点，该函数如果字符串相同则返回
    `0`。如果它不是我们想要的节点，我们更新指向前一个节点的指针 6（这是删除时需要的），然后使用 `for` 循环进入下一个节点。
- en: If we do find the node (say, “Joe”), `prevNode` will point to “Sam” and `curNode`
    will point to “Joe,” as shown in [Figure 13-6](#figure13-6).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们确实找到了节点（假设是“Joe”），`prevNode` 会指向“Sam”，`curNode` 会指向“Joe”，如 [图 13-6](#figure13-6)
    所示。
- en: We next make the link from “Sam” point to “Mac,” bypassing the “Joe” node 4.
    Then we delete the node by freeing it *and* setting the pointer to `NULL` 5, which
    works as long as `prevNode` is set. If we want to delete the first node, “Sam,”
    we need to change the pointer to the list to bypass the deleted node 3.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们让“Sam”节点指向“Mac”节点，跳过“Joe”节点 4。然后我们通过释放它 *并且* 将指针设置为 `NULL` 5 来删除该节点，这在
    `prevNode` 设置时是有效的。如果我们想删除第一个节点“Sam”，我们需要更改链表的指针，跳过已删除的节点 3。
- en: '![f13006](image_fi/501621c13/f13006.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![f13006](image_fi/501621c13/f13006.png)'
- en: 'Figure 13-6: Deleting the node `“Joe”`'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13-6：删除节点 `“Joe”`
- en: Putting It All Together
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将一切整合在一起
- en: '[Listing 13-3](#listing13-3) is a small command line program designed to edit
    and print a linked list interactively.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 13-3](#listing13-3) 是一个小型命令行程序，旨在交互式编辑和打印链表。'
- en: '**linked.c**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**linked.c**'
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Listing 13-3: A program that implements a linked list'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 13-3：实现链表的程序
- en: The user inputs commands to add or remove nodes by name, print the list, or
    quit the program. When the user adds or removes a node, the program dynamically
    allocates or deallocates memory.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 用户通过输入命令来添加或删除节点（按名称）、打印列表或退出程序。当用户添加或删除节点时，程序会动态分配或释放内存。
- en: Dynamic Memory Problems
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态内存问题
- en: Several common errors can occur when we’re using dynamic memory, such as memory
    leaks, using a pointer after it’s freed, and writing data beyond the end of a
    structure and trashing random memory. Let’s look at each error and how to prevent
    it.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用动态内存时，可能会出现几种常见错误，例如内存泄漏、在释放内存后仍使用指针，以及在结构体末尾写入数据并破坏随机内存。让我们看看每个错误以及如何避免它。
- en: 'A *memory leak* happens when memory is allocated and never freed. Here’s an
    example:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*内存泄漏* 发生在内存被分配后从未释放的情况下。这里有一个示例：'
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Every time the program executes this code, it allocates another 400 bytes of
    memory. If the program runs long enough, it will consume all available memory
    and die. (Actually, it will consume enough memory resources to make all the other
    programs very slow, before using so much memory that the computer is completely
    useless, runs for a while longer, and finally runs out of memory.)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 每次程序执行这段代码时，它都会分配 400 字节的内存。如果程序运行足够长时间，它将消耗所有可用内存并崩溃。（实际上，它会消耗足够的内存资源，导致其他程序变得非常慢，然后才使用大量内存，使得计算机完全无法使用，运行一段时间后，最终内存耗尽。）
- en: 'Using a pointer after it’s freed (often referred to as *use after free*) may
    result in random results or overwriting random memory. Let’s look at an example:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在释放内存后使用指针（通常称为 *释放后使用*）可能导致随机结果或覆盖随机内存。让我们看一个例子：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this case, the `free` function may write bookkeeping or other data into the
    node, and as a result `nextPtr` is undefined.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`free` 函数可能会在节点中写入书籍记录或其他数据，结果 `nextPtr` 变为未定义。
- en: 'As mentioned earlier in this chapter, a simple design pattern will limit the
    damage this type of code can do. We always set the pointer to `NULL` after freeing
    it:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章早些时候提到的，简单的设计模式将限制这种代码造成的损害。我们总是在释放指针后将其设置为 `NULL`：
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We’ve exchanged an undefined, random behavior for a reproducible, predictable
    one. The cause of the crash is easy to find.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将未定义的、随机的行为替换为可重现的、可预测的行为。崩溃的原因容易找到。
- en: 'The last dynamic memory problem we’ll consider is writing data beyond the end
    of a structure. As you saw earlier, nothing prevents you from writing past the
    end of an array. You can do the same thing with allocated memory:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要考虑的最后一个动态内存问题是写入结构体末尾之外的数据。正如你之前看到的，没什么能阻止你写入数组末尾之外的内容。你可以对分配的内存做同样的事：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: There is no good way of preventing or detecting these types of errors using
    the C language. An external tool or augmented compilation is required.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 C 语言没有好的方法来防止或检测这些类型的错误。需要外部工具或增强型编译。
- en: Valgrind and the GCC Address Sanitizer
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Valgrind 与 GCC 地址清理器
- en: Memory errors have become such a problem that many tools have been created to
    try to detect them, including Valgrind and the GCC address sanitizer.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 内存错误已经成为一个严重问题，许多工具被创建出来以尝试检测它们，包括 Valgrind 和 GCC 地址清理器。
- en: 'Valgrind is open source and freely available for Linux and macOS at [http://valgrind.org](http://valgrind.org).
    It’s designed to find the following: memory leaks, writing past the end of an
    array or allocated memory block, using a pointer after it’s freed, and making
    a decision based on the value of uninitialized memory.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Valgrind 是开源的，并且可以免费在 [http://valgrind.org](http://valgrind.org) 上获取，适用于 Linux
    和 macOS。它的设计目标是发现以下问题：内存泄漏、写入数组或分配的内存块的末尾、在释放内存后使用指针，以及基于未初始化内存的值做出决策。
- en: Valgrind is a runtime tool. You don’t need to recompile your code to use it;
    instead, you compile your program normally and then run Valgrind with the program
    as an argument.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Valgrind 是一个运行时工具。你不需要重新编译代码来使用它；相反，你正常编译程序，然后将程序作为参数与 Valgrind 一起运行。
- en: '[Listing 13-4](#listing13-4) shows a program that leaks memory.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 13-4](#listing13-4) 显示了一个泄漏内存的程序。'
- en: '[PRE22]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Listing 13-4: A leaky program'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 13-4：一个有内存泄漏的程序
- en: '[Listing 13-5](#listing13-5) shows the result of running this program under
    Valgrind with leak checking set to the maximum.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 13-5](#listing13-5) 显示了在 Valgrind 下运行此程序，且泄漏检查设置为最大时的结果。'
- en: '[PRE23]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Listing 13-5: Valgrind results'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 13-5：Valgrind 结果
- en: From this output, we can see that line 12 is leaking 1.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 从此输出中，我们可以看到第 12 行正在泄漏 1。
- en: The GCC address sanitizer is designed to detect only memory leaks and writing
    past the end of an array or allocated memory block. Unlike Valgrind, it’s a compile-time
    tool, so you need to compile your code with the `–fsanitize=address` flag to use
    it. After that, when you run the program, it automatically generates its report,
    as shown in [Listing 13-6](#listing13-6).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: GCC 地址清理器旨在仅检测内存泄漏和写入数组或分配的内存块末尾之外的操作。与 Valgrind 不同，它是一个编译时工具，因此你需要使用 `–fsanitize=address`
    标志编译代码以使用它。之后，当你运行程序时，它会自动生成报告，如 [列表 13-6](#listing13-6) 所示。
- en: '[PRE24]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Listing 13-6: Address sanitizer results'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 13-6：地址清理器结果
- en: Memory problems have plagued programs since the time of the first computer,
    and they are nasty to try to find. The address sanitizer is one tool that gives
    us extra help in finding them.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 内存问题自第一台计算机时代以来就困扰着程序，它们很难找到。地址清理器是一个能帮助我们找到这些问题的工具。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: The heap allows you to add and remove extra memory for your program, as needed.
    It gives you the ability to create large, complex, and wonderful data structures.
    A description of the various sorts of data structures and data structure designs
    could fill an entire book.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 堆允许你根据需要为程序添加和移除额外的内存。它使你能够创建大型、复杂和精妙的数据结构。各种数据结构和数据结构设计的描述可能足以填满一本书。
- en: This chapter describes the single linked list, which is the “Hello World” of
    data structures. As you progress, you can learn how to use the heap to store more
    complex data. For now, you’ve learned the basics, so where you take it from here
    is up to you.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了单链表，它是数据结构的“Hello World”。随着你的进展，你可以学习如何使用堆来存储更复杂的数据。现在，你已经掌握了基础，接下来你将如何使用这些知识完全取决于你自己。
- en: Programming Problems
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程问题
- en: Change the program in [Listing 13-3](#listing13-3), which implements a linked
    list, so that it always keeps the nodes in order.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改[示例 13-3](#listing13-3)中的程序，它实现了一个链表，使得链表中的节点始终保持顺序。
- en: Given two ordered linked lists, create a function that returns a list of the
    common nodes. You can do this as a new list or create a list where the body is
    just a pointer to one of the nodes in the other lists.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给定两个有序的链表，创建一个函数返回它们的公共节点列表。你可以创建一个新的列表，也可以创建一个列表，其主体只是指向另一个列表中某个节点的指针。
- en: Change the program in [Listing 13-3](#listing13-3) to use a doubly linked list.
    Each node will have a `next` pointer that points to the next node and a `previous`
    pointer that points to the previous node.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改[示例 13-3](#listing13-3)中的程序，使用双向链表。每个节点将有一个指向下一个节点的`next`指针，以及一个指向前一个节点的`previous`指针。
- en: Write a function to reverse the order of a singly linked list.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个函数，反转单链表的顺序。
- en: Write a function that will remove duplicates from a linked list.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个函数，删除链表中的重复节点。
