- en: '**9**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**9**'
- en: '**Map Routes**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**地图路线**'
- en: '![image](graphics/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/common-01.jpg)'
- en: Because we can instantly get directions using sites like Google Maps, we forget
    that not long ago people often got lost driving to unfamiliar destinations. Now
    software plans our route for us and even alters the route mid-trip if an accident
    or road closure blocks our way.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们可以通过Google Maps等网站即时获取方向，我们常常忘记，在不久前，人们常常在前往不熟悉的目的地时迷路。现在，软件为我们规划路线，甚至在途中发生事故或道路封闭时会调整路线。
- en: In computing, this task is called *finding the shortest path*. Despite the name,
    the goal isn’t always to find the shortest path, but more generally to minimize
    the *cost*, where the definition of cost varies. If the cost is time, the software
    finds the fastest route. If the cost is distance, the software minimizes the mileage,
    truly finding the shortest path. By changing how cost is defined, the same software
    methods can find routes to match different goals.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算中，这个任务称为*寻找最短路径*。尽管名字如此，目标并不总是找到最短路径，更广泛地说是最小化*成本*，其中成本的定义是可变的。如果成本是时间，软件会找到最快的路线。如果成本是距离，软件则最小化里程，真正找出最短路径。通过改变成本的定义，相同的软件方法可以找到匹配不同目标的路线。
- en: '**What a Map Looks Like to Software**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**软件看到的地图**'
- en: Although software can provide directions, it can’t actually read a map. Instead,
    it uses tables of data. To see how we get from a map to a table of data, let’s
    begin with [Figure 9-1](ch09.html#ch9fig1), which shows a portion of a city map
    for a simple routing problem. The goal is to find the quickest route from the
    corner of 3rd Street and West Avenue to the corner of 1st Street and Morris Avenue.
    The numbered arrows alongside the streets show the average driving time in seconds
    between intersections. Note that 1st Street and Morris Avenue are one-way streets.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管软件可以提供路线指引，但它实际上不能读懂地图。相反，它使用数据表格。为了了解我们如何从地图到数据表格的转变，我们从[图 9-1](ch09.html#ch9fig1)开始，该图显示了一个城市地图的一部分，用于解决一个简单的路径规划问题。目标是找到从3rd
    Street和West Avenue交口到1st Street和Morris Avenue交口的最快路线。街道旁边的编号箭头显示了交叉口之间的平均行驶时间（以秒为单位）。请注意，1st
    Street和Morris Avenue是单行道。
- en: '![image](graphics/f09-01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-01.jpg)'
- en: '*Figure 9-1: A simple routing problem: find the fastest route from 3rd and
    West to 1st and Morris.*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-1：一个简单的路径规划问题：从3rd和West找到1st和Morris的最快路线。*'
- en: To produce a data table that can be processed by software, we first reconceptualize
    the map as the *directed graph* shown in [Figure 9-2](ch09.html#ch9fig2). Here,
    the street intersections are represented as points labeled A through I. The arrows
    in [Figure 9-1](ch09.html#ch9fig1) become connections between points on the graph,
    known as *edges*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成可以由软件处理的数据表，我们首先将地图重新构思为[图 9-2](ch09.html#ch9fig2)所示的*有向图*。在这里，街道交叉点被表示为标记为A到I的点。[图
    9-1](ch09.html#ch9fig1)中的箭头变成了图中点之间的连接，称为*边*。
- en: '![image](graphics/f09-02.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-02.jpg)'
- en: '*Figure 9-2: The map from [Figure 9-1](ch09.html#ch9fig1) as a directed graph*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-2：[图 9-1](ch09.html#ch9fig1)中的地图作为有向图*'
- en: Using the directed graph, we put the data into the tabular form shown in [Table
    9-1](ch09.html#ch9tab1). This table contains all of the information from the map
    in [Figure 9-2](ch09.html#ch9fig2) that software needs to find the fastest route.
    In [Figure 9-2](ch09.html#ch9fig2), for example, travel time from A to B is 23
    seconds; the same information is provided by the first row of the table. Note
    that travel in impossible directions, such as from H to G, is not listed.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用有向图，我们将数据输入到[表 9-1](ch09.html#ch9tab1)所示的表格形式中。该表包含了[图 9-2](ch09.html#ch9fig2)中地图的所有信息，软件需要这些信息来找到最快的路线。例如，在[图
    9-2](ch09.html#ch9fig2)中，从A到B的旅行时间为23秒；该信息由表格的第一行提供。请注意，不可能的行驶方向（如从H到G）不会列出。
- en: '**Table 9-1:** The Data from the Directed Graph of [Figure 9-2](ch09.html#ch9fig2)
    in Tabular Form'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 9-1：** [图 9-2](ch09.html#ch9fig2)中有向图的数据（以表格形式展示）'
- en: '| **From** | **To** | **Time** |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| **从** | **到** | **时间** |'
- en: '| --- | --- | --- |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| A | B | 23 |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| A | B | 23 |'
- en: '| A | D | 19 |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| A | D | 19 |'
- en: '| B | A | 15 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| B | A | 15 |'
- en: '| B | C | 7 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| B | C | 7 |'
- en: '| B | E | 11 |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| B | E | 11 |'
- en: '| C | B | 9 |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| C | B | 9 |'
- en: '| D | A | 14 |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| D | A | 14 |'
- en: '| D | E | 17 |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| D | E | 17 |'
- en: '| D | G | 18 |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| D | G | 18 |'
- en: '| E | B | 18 |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| E | B | 18 |'
- en: '| E | D | 9 |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| E | D | 9 |'
- en: '| E | F | 33 |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| E | F | 33 |'
- en: '| E | H | 21 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| E | H | 21 |'
- en: '| F | C | 12 |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| F | C | 12 |'
- en: '| F | E | 26 |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| F | E | 26 |'
- en: '| G | D | 35 |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| G | D | 35 |'
- en: '| G | H | 25 |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| G | H | 25 |'
- en: '| H | E | 35 |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| H | E | 35 |'
- en: '| H | I | 28 |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| H | I | 28 |'
- en: '| I | F | 14 |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| I | F | 14 |'
- en: '***Best-First Search***'
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***最佳优先搜索***'
- en: Now we’re ready to find the quickest route on the map, which means finding the
    lowest-cost path from A to I on our graph. Many methods exist for solving this
    problem; the variation I’ll describe is a type of algorithm called a *best-first
    search*. Calling this algorithm a “search” may be a little misleading, because
    this method doesn’t aim for the destination. Instead, at each step it finds the
    best new route from the starting point to *any* point it hasn’t already routed
    to. Eventually, this procedure stumbles upon a route to the destination, which
    will be the cheapest route possible from the start to the goal.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备在地图上找到最短路径，这意味着在我们的图中找到从 A 到 I 的最低成本路径。解决这个问题有很多方法；我将描述的变种是一种叫做*最佳优先搜索*的算法。称这种算法为“搜索”可能有点误导，因为这种方法并不以目的地为目标。相反，在每一步，它会找到从起点到*任何*尚未遍历的点的最佳新路径。最终，这个过程会偶然找到通向目的地的路径，这条路径将是从起点到目标的最便宜路径。
- en: Here’s how best-first search works for our example. All routes starting at A
    must first travel to either B or D. The algorithm starts by comparing these two
    choices, as shown in [Figure 9-3](ch09.html#ch9fig3).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是最佳优先搜索如何在我们的示例中工作的。所有从 A 出发的路径必须首先前往 B 或 D。算法首先比较这两个选择，如[图 9-3](ch09.html#ch9fig3)所示。
- en: '![image](graphics/f09-03.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-03.jpg)'
- en: '*Figure 9-3: The first step in our best-first search. Starting from A, we can
    travel either to B or D.*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-3：我们的最佳优先搜索的第一步。从 A 出发，我们可以前往 B 或 D。*'
- en: In these figures, black circles mark the points we’ve found the best paths to,
    while gray circles indicate points we can reach directly from one of the marked
    (black) points. The numbers inside the circles represent the cost of the route
    to that point. In each step, the search examines all edges extending from marked
    to unmarked points to find the edge that produces the lowest-cost route. In this
    first step, the choice is between the A-to-B edge and the A-to-D edge. Because
    the travel time to D is less than the travel time to B, the lowest-cost route
    is from A to D, as shown in [Figure 9-4](ch09.html#ch9fig4).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些图中，黑色圆圈标记了我们已经找到最佳路径的点，而灰色圆圈表示我们可以直接从某个已标记（黑色）点到达的点。圆圈内的数字表示到达该点的路径成本。在每一步，搜索会检查所有从已标记到未标记点的边，以找到产生最低成本路径的边。在第一步中，选择是
    A 到 B 的边还是 A 到 D 的边。由于到 D 的旅行时间比到 B 的时间短，因此最低成本路径是从 A 到 D，如[图 9-4](ch09.html#ch9fig4)所示。
- en: We’ve just found the cheapest possible route from A to D. No matter what the
    rest of the graph looks like, it can’t contain a lower-cost route from A to D,
    because this is the lowest-cost route of *all* routes starting from A. In the
    same way, each step will produce a new route that will be the lowest-cost route
    possible from A to some other point.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚找到了从 A 到 D 的最便宜路径。不管图的其余部分是什么样子，它都不可能包含比从 A 到 D 的成本更低的路径，因为这是从 A 出发的*所有*路径中的最低成本路径。同样，每一步都会产生一条新路径，这条路径将是从
    A 到其他某个点的最低成本路径。
- en: 'In the second step, there are four edges to consider: the A-to-B edge and the
    three edges extending from D. Again, the algorithm will choose the edge that creates
    the fastest new route. In considering the edges extending from D, we have to include
    the 19 seconds from A to D. For example, the time required to travel from A to
    E through D is the sum of the A-to-D edge time (19) and the D-to-E edge time (17),
    which is 36 seconds.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二步，有四条边需要考虑：A 到 B 的边和从 D 延伸出去的三条边。同样，算法将选择创建最快新路径的边。在考虑从 D 延伸出去的边时，我们必须包括从
    A 到 D 的 19 秒时间。例如，从 A 到 E 通过 D 的时间是 A 到 D 边的时间（19 秒）与 D 到 E 边的时间（17 秒）之和，共 36
    秒。
- en: Note that one edge from D leads back to A. In [Figure 9-4](ch09.html#ch9fig4),
    the circle at the end of that edge is white to indicate that it will never be
    chosen. There’s no benefit in taking a round trip back to our starting point.
    More generally, once a point has been included in a route (marked black in the
    figures), later appearances of that point are ignored, because a better route
    to it has already been found.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，从 D 出发的一条边回到 A。在[图 9-4](ch09.html#ch9fig4)中，这条边末端的圆圈是白色的，表示它永远不会被选择。回到起点并没有什么好处。更一般来说，一旦一个点已经包含在某条路径中（在图中用黑色标记），后续出现的该点会被忽略，因为到达它的更好路径已经找到了。
- en: At this stage, the lowest-cost new route is made using the A-to-B edge. This
    brings us to the stage shown in [Figure 9-5](ch09.html#ch9fig5). Again, because
    we’ve found the lowest-cost route of all remaining routes, that makes this A-to-B
    route the fastest possible way to get from A to B.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，最低成本的新路线是通过A到B的边。这将我们带到了[图9-5](ch09.html#ch9fig5)所示的阶段。同样，因为我们已经找到了所有剩余路线中的最低成本路线，这使得A到B的路线成为从A到B的最快方式。
- en: '![image](graphics/f09-04.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-04.jpg)'
- en: '*Figure 9-4: In the second step of our search, the best new route leads to
    D. Marking D exposes three new routing possibilities, one of which leads back
    to our starting point.*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-4：在搜索的第二步中，最佳的新路线通向D。标记D会暴露出三种新的路径选择，其中一种会回到起点。*'
- en: '![image](graphics/f09-05.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-05.jpg)'
- en: '*Figure 9-5: The third step in our best-first search finds the best route to
    point B.*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-5：我们最佳优先搜索的第三步找到了通向B的最佳路线。*'
- en: We have six edges to consider next, although the edges leading back to A aren’t
    contenders. The best choice uses the B-to-C edge to make an A-to-C route of 30
    seconds, as shown in [Figure 9-6](ch09.html#ch9fig6).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来需要考虑六条边，尽管返回到A的边不是候选边。最佳选择是使用B到C的边，形成一个从A到C的30秒路线，如[图9-6](ch09.html#ch9fig6)所示。
- en: '![image](graphics/f09-06.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-06.jpg)'
- en: '*Figure 9-6: The fourth step in our search finds the best route to point C.*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-6：我们搜索的第四步找到了通向C的最佳路线。*'
- en: Finding the fastest route to C doesn’t help us reach our ultimate goal, though.
    From C, we can only return to B, to which we already know the fastest route.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，找到通往C的最快路线并没有帮助我们达到最终目标。从C，我们只能返回到B，而我们已经知道通往B的最快路线。
- en: At this stage, the fastest new route is the one going through B to E, as shown
    in [Figure 9-7](ch09.html#ch9fig7).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，最快的新路线是经过B到E，如[图9-7](ch09.html#ch9fig7)所示。
- en: '![image](graphics/f09-07.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-07.jpg)'
- en: '*Figure 9-7: The fifth step in our best-first search finds the best route to
    E.*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-7：我们最佳优先搜索的第五步找到了通往E的最佳路线。*'
- en: This process continues until we have reached the state shown in [Figure 9-8](ch09.html#ch9fig8).
    At this stage, the lowest-cost new route uses the edge from H to I, which means
    we’ve finally identified the best route from A to I.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程持续进行，直到我们达到[图9-8](ch09.html#ch9fig8)所示的状态。在这个阶段，最低成本的新路线使用了从H到I的边，这意味着我们最终确定了从A到I的最佳路线。
- en: '![image](graphics/f09-08.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-08.jpg)'
- en: '*Figure 9-8: The ninth and final step in our best-first search reaches point
    I.*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-8：我们最佳优先搜索的第九步和最后一步到达了I点。*'
- en: As shown, the fastest route from A to I is A-B-E-H-I. Looking at our original
    map in [Figure 9-1](ch09.html#ch9fig1) and its graph equivalent in [Figure 9-2](ch09.html#ch9fig2),
    we can see that this corresponds to taking 3rd Street to Kentucky Avenue, taking
    a left on 1st Street, and driving one block to our destination.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，从A到I的最快路线是A-B-E-H-I。通过查看我们原始地图中的[图9-1](ch09.html#ch9fig1)和其图形等效图[图9-2](ch09.html#ch9fig2)，我们可以看到这对应于沿着3rd
    Street走到Kentucky Avenue，再左转进入1st Street，最后驾车行驶一街区到达目的地。
- en: '***Reusing Prior Search Results***'
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***重用先前的搜索结果***'
- en: In this example, the best-first search found not only the fastest route from
    A to I, but also the fastest route to every other point on the map. Although this
    is an unusual result, the best-first process typically produces a surplus of information.
    At a minimum, the search results will also provide the best routes between intermediate
    points that lie along the route between the start and destination points. In our
    example, the best route from A to I contains the best routes from B to H, and
    from E to I, and so on. For this reason, the results of best-first searches can
    be stored for later use.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，最佳优先搜索不仅找到了从A到I的最快路线，还找到了地图上每个其他点的最快路线。尽管这是一个不寻常的结果，最佳优先过程通常会产生过剩的信息。至少，搜索结果将提供起点和目标点之间的中间点的最佳路线。在我们的例子中，从A到I的最佳路线包含了从B到H、从E到I的最佳路线，依此类推。因此，最佳优先搜索的结果可以保存以供以后使用。
- en: We can even use this data in searches involving points that weren’t part of
    the original map data. To see why, consider [Figure 9-9](ch09.html#ch9fig9). This
    is the same directed graph in [Figure 9-2](ch09.html#ch9fig2) except that it includes
    a new point, J, that has edges to A and B.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以在涉及原始地图数据中没有的点的搜索中使用这些数据。为了了解为什么，考虑一下[图9-9](ch09.html#ch9fig9)。这与[图9-2](ch09.html#ch9fig2)中的有向图相同，不同之处在于它包含了一个新的点J，J有指向A和B的边。
- en: '![image](graphics/f09-09.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-09.jpg)'
- en: '*Figure 9-9: The directed graph from [Figure 9-2](ch09.html#ch9fig2) with an
    additional point, J*'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-9：[图 9-2](ch09.html#ch9fig2)中的有向图，增加了一个点 J*'
- en: Suppose we need to find the fastest route from J to I. Any route from J begins
    by going to either A or B. We already know the fastest routes from A and B to
    I from the results in [Figure 9-8](ch09.html#ch9fig8). The fastest route from
    A to I takes 83 seconds. The fastest route from B to I takes 60 seconds; we find
    this by subtracting the A-to-B edge time of 23 seconds from the total A-to-I time
    of 83 seconds.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们需要找到从 J 到 I 的最快路线。任何从 J 出发的路线都首先经过 A 或 B。我们已经知道从 A 和 B 到 I 的最快路线，结果见于[图
    9-8](ch09.html#ch9fig8)。从 A 到 I 的最快路线需要 83 秒。从 B 到 I 的最快路线需要 60 秒；我们通过从 A 到 B
    的边的时间 23 秒，减去从 A 到 I 的总时间 83 秒，得出这个结果。
- en: 'This means that the J-to-I route that starts by heading to A takes 102 seconds—19
    seconds to reach A, and 83 seconds to follow the best route from A to I. The route
    that heads directly to B takes 96 seconds: 36 seconds to reach B, and 60 seconds
    from there to reach I. Using the previous search results makes finding the fastest
    J-to-I route much simpler.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，从 J 到 I 的路线，如果先经过 A，则需要 102 秒——19 秒到达 A，83 秒从 A 到 I。直接到 B 的路线则需要 96 秒：36
    秒到达 B，60 秒从 B 到 I。使用之前的搜索结果使得找到最快的 J 到 I 路线变得更加简单。
- en: '**Finding All the Best Routes at Once**'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**一次性找到所有最佳路线**'
- en: In general, then, storing past search results benefits future searches. This
    idea can be extended to efficiently find the best routes between any two points
    on a given map, which is known as the *all-pairs shortest paths* problem.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，存储过去的搜索结果有助于未来的搜索。这个思想可以扩展到高效地找到给定地图上任意两点之间的最佳路线，这被称为 *所有点对最短路径* 问题。
- en: '***Floyd’s Algorithm***'
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***弗洛伊德算法***'
- en: We’ll solve the all-pairs shortest paths problem using *Floyd’s algorithm* (sometimes
    called the *Floyd-Warshall algorithm*), which starts with simple routes of individual
    edges, then builds longer routes by connecting the existing routes using each
    point on the map in turn. This method uses a grid, the initial state of which
    is shown in [Figure 9-10](ch09.html#ch9fig10). At each step in the process, the
    grid contains the costs of the best routes between every pair of points. At the
    start, the only known routes are the edges that directly connect points, the same
    data from [Figure 9-2](ch09.html#ch9fig2) and [Table 9-1](ch09.html#ch9tab1).
    For example, the 23 in row A, column B, represents the cost of travel from A to
    B. The cost is 0 where the “from” and “to” points are the same.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 *弗洛伊德算法*（有时称为 *弗洛伊德-沃肖尔算法*）来解决所有点对最短路径问题，该算法从单一边的简单路线开始，然后通过依次连接地图上的每个点来构建更长的路线。这种方法使用一个网格，网格的初始状态如[图
    9-10](ch09.html#ch9fig10)所示。在每个步骤中，网格包含每对点之间最佳路线的费用。开始时，已知的路线只有直接连接各点的边，这是[图 9-2](ch09.html#ch9fig2)和[表
    9-1](ch09.html#ch9tab1)中的相同数据。例如，A 行 B 列中的 23 表示从 A 到 B 的旅行费用。当“起点”和“终点”相同时，费用为
    0。
- en: '![image](graphics/f09-10.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-10.jpg)'
- en: '*Figure 9-10: The initial grid of numbers for Floyd’s algorithm. At this stage
    the only routes in the grid are the direct connections between points.*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-10：弗洛伊德算法的初始数字网格。此时网格中唯一的路线是各个点之间的直接连接。*'
- en: As the process continues, this grid will be filled in and modified. New routes
    will be added where none initially exist, such as from A to F. Routes with lower
    costs will replace existing routes; if we can find a way to get from G to D in
    less than 35 seconds, for example, we’ll replace the 35 currently in the grid.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 随着过程的继续，这个网格将会被填写并修改。在最初没有路线的地方会新增路线，比如从 A 到 F。成本更低的路线将替代现有的路线；例如，如果我们能以少于 35
    秒的时间从 G 到 D，就会替换网格中当前的 35。
- en: We start by considering point A as a route connector. From [Figure 9-10](ch09.html#ch9fig10),
    we can see that B and D have routes to A. Because A has routes back to B and D,
    A can connect B to D and D to B. These new routes are shown as gray squares in
    [Figure 9-11](ch09.html#ch9fig11).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从考虑 A 点作为路线连接点开始。从[图 9-10](ch09.html#ch9fig10)中可以看到，B 和 D 都有通往 A 的路线。因为 A
    有通往 B 和 D 的路线，A 可以将 B 连接到 D，也可以将 D 连接到 B。这些新路线在[图 9-11](ch09.html#ch9fig11)中以灰色方块显示。
- en: '![image](graphics/f09-11.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-11.jpg)'
- en: '*Figure 9-11: Discovering new routes using point A as a connector*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-11：使用 A 点作为连接点发现新路线*'
- en: The cost of new routes is the sum of the costs of the two routes we are connecting.
    In [Figure 9-11](ch09.html#ch9fig11), the cost of the B-to-D route (34) is the
    cost of the B-to-A route (15) plus the cost of the A-to-D route (19), as indicated
    by the arrows. The cost of the D-to-B route (37) is computed the same way, as
    the sum of the D-to-A route (14) and the A-to-B route (23).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 新路线的成本是我们连接的两条路线成本之和。在[图9-11](ch09.html#ch9fig11)中，B到D路线的成本（34）是B到A路线的成本（15）加上A到D路线的成本（19），如箭头所示。D到B路线的成本（37）也是如此，它是D到A路线的成本（14）和A到B路线的成本（23）之和。
- en: In the next step, we use point B to connect existing routes. This produces a
    whopping eight new routes, as shown in [Figure 9-12](ch09.html#ch9fig12).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们使用点B来连接现有路线。这将产生8条新路线，如[图9-12](ch09.html#ch9fig12)所示。
- en: '![image](graphics/f09-12.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-12.jpg)'
- en: '*Figure 9-12: Discovering new routes using point B as a connector*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-12：使用点B作为连接器发现新路线*'
- en: As with the previous step, the cost of each new route is the sum of the costs
    of the two routes we are connecting. For example, the cost of the new A-to-E route
    (34) is the sum of the A-to-B cost (23) and the B-to-E cost (11).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 和前一步一样，每条新路线的成本是我们连接的两条路线成本之和。例如，新A到E路线的成本（34）是A到B路线的成本（23）与B到E路线的成本（11）之和。
- en: In the next step, using C to connect existing routes reveals three new routes,
    as shown in [Figure 9-13](ch09.html#ch9fig13).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，使用C连接现有路线，揭示了三条新路线，如[图9-13](ch09.html#ch9fig13)所示。
- en: '![image](graphics/f09-13.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-13.jpg)'
- en: '*Figure 9-13: Discovering new routes using point C as a connector*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-13：使用点C作为连接器发现新路线*'
- en: In the next step, we have our first instance of a *better* route. Previously
    we found a 33-second route from E to A. In this step, we discover a 23-second
    route from E to A through D, and update the grid with the lower cost. Nine new
    routes are also found, bringing us to the state shown in [Figure 9-14](ch09.html#ch9fig14).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们第一次发现了*更好*的路线。之前我们找到了从E到A的33秒路线，而在这一步中，我们发现了一条通过D从E到A的23秒路线，并将网格更新为更低的成本。还发现了9条新路线，达到了[图9-14](ch09.html#ch9fig14)所示的状态。
- en: '![image](graphics/f09-14.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-14.jpg)'
- en: '*Figure 9-14: Discovering new routes using point D as a connector*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-14：使用点D作为连接器发现新路线*'
- en: 'This process continues, using the points E through I to connect routes in turn,
    resulting in the complete grid shown in [Figure 9-15](ch09.html#ch9fig15). By
    relating the points back to the street names on the original map, routing software
    can use this grid to provide the fastest time between any two locations on the
    map. If you want to know how many seconds it should take to get from the corner
    of 1st and West to the corner of 3rd and Morris, the software will translate this
    into a query about the G-to-C route on the graph. Then the answer can be found
    right there in the grid: 77 seconds.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程不断进行，依次使用点E到点I连接路线，最终形成完整的网格，如[图9-15](ch09.html#ch9fig15)所示。通过将这些点与原始地图上的街道名称对应，路由软件可以利用这个网格计算地图上任意两点之间的最快时间。如果你想知道从1st街与West街的交汇处到3rd街与Morris街的交汇处应该需要多少秒，软件会将其转换为关于图表中G到C路线的查询。然后，答案可以直接从网格中找到：77秒。
- en: '![image](graphics/f09-15.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-15.jpg)'
- en: '*Figure 9-15: The complete grid produced by Floyd’s algorithm, showing the
    fastest time possible from each point to every other point*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-15：通过Floyd算法生成的完整网格，显示从每个点到其他所有点的最快时间*'
- en: '***Storing Route Directions***'
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***存储路线方向***'
- en: What this grid *doesn’t* tell you, as you may have noticed, is what that fastest
    route is—only how much time it takes. For example, you can see that the fastest
    route from A to I takes 83 seconds, but does that route begin by going east or
    south, and where do you make the first turn? In order to record the route itself,
    we must record the initial direction of the routes when updating route times in
    the grid.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经注意到的，这个网格*并没有*告诉你最短的路线是什么——它只告诉你所需的时间。例如，你可以看到从A到I的最快路线需要83秒，但这条路线是从东边开始还是从南边开始？你在哪个地方转弯？为了记录具体路线，我们必须在更新网格中的路线时间时，记录每条路线的初始方向。
- en: '[Figure 9-16](ch09.html#ch9fig16) shows the starting grid. As before, the grid
    will be used to store the costs of the best routes found so far, but now it will
    also store the initial direction of travel for each route. This starting grid
    contains just the edges of the original graph. The 23 and B in the second column
    of the first row means the best route from A to B costs 23 and starts by heading
    toward B.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 9-16](ch09.html#ch9fig16)显示了起始网格。和以前一样，网格将用于存储迄今为止找到的最佳路线的成本，但现在它还将存储每条路线的初始行驶方向。这个起始网格仅包含原图的边。第一行第二列的
    23 和 B 表示从 A 到 B 的最佳路线花费 23，并且从 A 开始朝 B 方向行驶。'
- en: '![image](graphics/f09-16.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-16.jpg)'
- en: '*Figure 9-16: The initial grid for Floyd’s algorithm, amended to store the
    direction of travel for each route*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-16：Floyd 算法的初始网格，修改为存储每条路线的行驶方向*'
- en: 'In [Figure 9-17](ch09.html#ch9fig17), we use A to connect existing routes,
    as we did in [Figure 9-11](ch09.html#ch9fig11). But now, adding or updating a
    route in the grid means recording the direction as well. The new route from B
    to D, for example, begins by going to A. The logic is: “We’ve just discovered
    a route from B to D that goes through A. The fastest known route from B to A heads
    directly to A. Therefore, the route from B to D must also start by going to A.”'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 9-17](ch09.html#ch9fig17)中，我们使用 A 来连接现有的路线，正如我们在[图 9-11](ch09.html#ch9fig11)中所做的那样。但现在，在网格中添加或更新一条路线也意味着要记录该路线的方向。例如，从
    B 到 D 的新路线，首先是前往 A。其逻辑是：“我们刚刚发现了一条从 B 到 D 的路线，它经过 A。已知从 B 到 A 的最快路线直接通往 A。因此，从
    B 到 D 的路线也必须从 A 开始。”
- en: '![image](graphics/f09-17.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-17.jpg)'
- en: '*Figure 9-17: Discovering new routes using point A as a connector*'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-17：使用点 A 作为连接器发现新路线*'
- en: Skipping over the steps for B and C, [Figure 9-18](ch09.html#ch9fig18) shows
    the grid just after we’ve added the routes for D. Here we’ve found a new route
    from B to G that takes 52 seconds. Because this new route goes through D, the
    route must begin the same way the route to D begins—by traveling to A.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 跳过 B 和 C 的步骤，[图 9-18](ch09.html#ch9fig18)显示了我们刚刚添加 D 路线后的网格。这里我们发现了一条新的从 B 到
    G 的路线，花费了 52 秒。因为这条新路线经过 D，所以该路线必须像前往 D 的路线一样开始——先前往 A。
- en: '![image](graphics/f09-18.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-18.jpg)'
- en: '*Figure 9-18: Discovering new routes using point D as a connector*'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-18：使用点 D 作为连接器发现新路线*'
- en: '[Figure 9-19](ch09.html#ch9fig19) shows the completed grid, with the times
    removed for clarity.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 9-19](ch09.html#ch9fig19)展示了完整的网格，已删除了时间数据以便更清晰地呈现。'
- en: '![image](graphics/f09-19.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f09-19.jpg)'
- en: '*Figure 9-19: The complete routing grid produced by Floyd’s algorithm, showing
    the direction of travel. The fastest route from A to I is highlighted.*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-19：由 Floyd 算法生成的完整路由网格，显示了行驶方向。最快的从 A 到 I 的路线被高亮显示。*'
- en: The fastest route from A to I is highlighted in the grid. We start at row A,
    column I, and see the fastest route from A to I starts by going to B. So then
    we look at row B and see the fastest route from B to I heads to E. The route from
    E heads to H, and the route from H reaches I. Using this grid is like stopping
    at every street corner and asking, “Which way should I turn?”
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 从 A 到 I 的最快路线在网格中被高亮显示。我们从行 A，列 I 开始，看到从 A 到 I 的最快路线首先是前往 B。然后我们查看行 B，看到从 B
    到 I 的最快路线朝 E 走。E 到 H，H 到 I。使用这个网格就像是在每个街角停下，问：“我该往哪个方向走？”
- en: '**The Future of Routing**'
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**路由的未来**'
- en: Today’s software can provide accurate directions in an instant, so what can
    tomorrow’s mapping software possibly do better?
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的软件可以瞬间提供准确的路线，那么明天的地图软件可能做得更好是什么呢？
- en: Improvements in mapping will come from improvements in data. For example, if
    the software has access to hourly traffic data, it can tailor directions to the
    time of the trip.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 地图绘制的改进将来自数据的改进。例如，如果软件能够访问每小时的交通数据，它可以根据旅行的时间定制路线。
- en: Real-time traffic data may also be integrated into mapping software. For example,
    most mapping programs don’t know about traffic issues until the user requests
    a new route. In the future, your mapping software may find out about accidents
    and road closures before you do and route you around the problems. Weather data
    may also be included to provide more accurate estimates of travel time, and to
    accommodate the preferences of drivers who wish to avoid driving in heavy rain
    or other troubling conditions.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 实时交通数据也可能会被集成到地图软件中。例如，大多数地图程序在用户请求新路线之前并不知道交通问题。在未来，你的地图软件可能会在你之前发现事故和道路封闭情况，并为你规划绕行路线。天气数据也可能被纳入其中，以提供更准确的旅行时间估算，并满足那些希望避免在大雨或其他不利天气条件下驾驶的驾驶员的偏好。
- en: Routing is just a small part of a larger area of software called *geographic
    information systems (GIS)*, which uses software to answer questions about maps
    and location-tagged data. Some GIS tasks have nothing to do with routing, such
    as determining if an area contains enough potential customers to support a new
    grocery store. But many interesting GIS projects combine the map routing concepts
    from this chapter with data about what’s inside buildings along a map’s roadways.
    By tracking where schoolchildren live, for example, GIS software can plan the
    most efficient routes for school buses.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 路线规划只是一个更大范围的软件领域的一个小部分，这个领域被称为*地理信息系统（GIS）*，它使用软件回答关于地图和位置标记数据的问题。一些GIS任务与路线规划无关，比如确定一个区域是否拥有足够的潜在顾客来支持一个新的杂货店。但许多有趣的GIS项目将本章中的地图路线规划概念与关于地图道路沿线建筑物内的内容的数据相结合。例如，通过追踪学童的居住位置，GIS软件可以规划出最有效的校车路线。
- en: In the future, routing software may expand to encompass more of the abilities
    of general GIS tools. When you need a route for a long drive out of town, the
    software may not provide just the turns you need to take, but also highlight places
    where you might want to stop, like the best-priced gas stations and the restaurants
    that serve your favorite food.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来，路线规划软件可能会扩展到包含更多通用地理信息系统（GIS）工具的功能。当你需要规划一条长途的城市外出行车路线时，软件可能不仅仅会提供你需要转弯的地方，还会突出显示你可能想要停留的地点，比如价格最合适的加油站和提供你最爱食物的餐馆。
