- en: '**12  PIC18F452 ICSP and HID**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**12  PIC18F452 ICSP和HID**'
- en: Back in 2010, there was a lot of interest in exploiting RFID tags that hold
    symmetric keys. The cards themselves were reasonably well protected from memory
    extraction, and keys might be unique to each customer’s installation, so researchers
    would instead attack the readers. These readers often used commodity microcontrollers
    and trusted their readout protection to keep the symmetric keys safe.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在2010年，针对存储对称密钥的RFID标签的利用引起了广泛关注。这些卡片本身在内存提取方面有一定的保护，而且密钥可能是每个客户安装的唯一密钥，因此研究人员通常会攻击读卡器。这些读卡器通常使用商用微控制器，并依赖它们的读出保护来确保对称密钥的安全。
- en: In this chapter, we’ll cover two such exploits that were used to extract keys
    from HID iClass readers. Both of them exploit nuances in ICSP, Microchip’s in
    circuit serial programming standard. The first, published at 27C3 as Meriac (2010),
    involves erasing a protected page of flash memory over ICSP and replacing it with
    shellcode that dumps the rest. The second, Huffstutter (2011), involves using
    the same ICSP protocol to dump RAM, rather than flash memory, because the chip
    has no protection bits set for RAM.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍两个利用ICSP从HID iClass读卡器提取密钥的漏洞。它们都利用了ICSP（Microchip的在线串行编程标准）中的细微差异。第一个漏洞在2010年的27C3大会上作为Meriac公开，涉及通过ICSP擦除受保护的闪存页面，并用shellcode替换它，从而转储其余数据。第二个漏洞，Huffstutter（2011），则利用相同的ICSP协议转储RAM，而不是闪存，因为该芯片没有为RAM设置保护位。
- en: The target reader in this case is the HID RW400, which was chosen by Meriac
    because it was the oldest programmer to support the iClass cards. This is shown
    in [Figure 12.1](ch12.xhtml#ch12fig1), where an opaque epoxy potting covers the
    circuits that we can see in X-ray in [Figure 12.2](ch12.xhtml#ch12fig2).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本案例中的目标读卡器是HID RW400，Meriac选择它是因为它是支持iClass卡片的最旧编程器。这个设备如[图12.1](ch12.xhtml#ch12fig1)所示，图中透明的环氧树脂封装覆盖了我们可以在[图12.2](ch12.xhtml#ch12fig2)的X射线图像中看到的电路。
- en: There are many minor variants of the ICSP protocol, each explained in a “FLASH
    Microcontroller Programming Specification” document that covers ten or twenty
    part numbers.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ICSP协议有许多小的变种，每个变种都在《FLASH微控制器编程规范》文档中进行了说明，该文档涵盖了十个或二十个部件号。
- en: Older chips require a high voltage for erasure to be externally applied, while
    modern chips also support a low-voltage mode in which the programming voltage
    is internally generated. If no other vulnerabilities are handy, it would certainly
    be worth experimenting with bad voltages and timing here. [Chapter H.1](app08.xhtml#app08_1)
    describes just such an attack from the Nineties.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 较旧的芯片需要外部施加高电压进行擦除，而现代芯片也支持低电压模式，在这种模式下，编程电压是内部生成的。如果没有其他漏洞可用，这里尝试错误电压和时序肯定是值得一试的。[章节H.1](app08.xhtml#app08_1)描述了90年代的类似攻击。
- en: '![Image](../images/f0120-01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0120-01.jpg)'
- en: 'Figure 12.1: HID RW400 Card Reader'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1：HID RW400卡片读卡器
- en: '![Image](../images/f0121-01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0121-01.jpg)'
- en: 'Figure 12.2: HID RW400 in X-ray'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2：HID RW400 X射线图像
- en: PIC18 is a bit less threadbare than the earlier PIC architectures, but it is
    still designed around a philosophy of reusing as many components as possible in
    order to keep the transistor count as small as possible.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: PIC18比早期的PIC架构稍微强大一些，但它仍然遵循尽可能多地复用组件的理念，以保持晶体管数量尽可能少。
- en: The ICSP protocol looks much like SPI, except that there is a single data pin
    whose direction changes as appropriate. See [Figure 12.3](ch12.xhtml#ch12fig3)
    for the pinout of the six pins to the left of the piezoelectric buzzer in [Figure
    12.1](ch12.xhtml#ch12fig1). All transactions are exactly twenty bits, consisting
    of a 4-bit opcode command and a 16-bit parameter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: ICSP协议看起来很像SPI，唯一不同的是它有一个单一的数据引脚，其方向会根据需要变化。请参见[图12.3](ch12.xhtml#ch12fig3)，该图显示了[图12.1](ch12.xhtml#ch12fig1)中压电蜂鸣器左侧六个引脚的引脚排列。所有的传输都是20位数据，由4位操作码命令和16位参数组成。
- en: In ICSP, command `0000` executes the parameter as a raw PIC18 instruction. `0010`
    reads out the `TABLAT` (Table Latch) register, while `1000` to `1011` are Table
    Read commands and `1100` to `1111` are Table Write commands. This is a rather
    roundabout way to read code memory, but it is roughly in line with the table pointer
    operations in PIC18 assembly language. The programming specification contains
    example pairs of commands and instructions for erasing memory and writing code
    into it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在ICSP中，命令`0000`将参数作为原始的PIC18指令执行。`0010`读取`TABLAT`（表格锁存器）寄存器，而`1000`到`1011`是表格读取命令，`1100`到`1111`是表格写入命令。这是一种相对迂回的读取代码内存的方式，但大体上符合PIC18汇编语言中的表格指针操作。编程规范中包含了擦除内存和将代码写入内存的命令和指令示例对。
- en: Flash (code), RAM, and EEPROM are in separate address spaces, and a series of
    Configuration Words describe the protection settings, along with settings for
    the oscillators, timers, brownout protection, and other configurable features.
    These 16-bit words begin at `0x300000` in flash memory. To the developer, these
    settings are defined as `#pragma` lines, such as those in [Figure 12.4](ch12.xhtml#ch12fig4).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Flash（代码）、RAM和EEPROM在不同的地址空间中，并且一系列配置字描述了保护设置，以及振荡器、定时器、欠压保护和其他可配置功能的设置。这些16位字从闪存中的`0x300000`开始。对于开发者来说，这些设置被定义为`#pragma`行，如[图12.4](ch12.xhtml#ch12fig4)所示。
- en: Code memory is divided into pages of somewhat awkward sizes. The first is a
    bootloader page of 512 bytes at `0x0000`, followed by 7,680 bytes of Page 0 from
    `0x0200` to `0x1fff`. The remaining pages are each 8kB. See [Figure 12.6](ch12.xhtml#ch12fig6)
    for a diagram of the layout.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 代码内存被分成了大小略显笨拙的多个页面。第一个页面是位于`0x0000`的512字节引导程序页面，接下来是从`0x0200`到`0x1fff`的7,680字节的页面0。剩余页面每个为8kB。请参见[图12.6](ch12.xhtml#ch12fig6)以查看布局图。
- en: '![Image](../images/f0123-01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0123-01.jpg)'
- en: 'Figure 12.3: Custom ICSP Pinout on the HID RW400'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3：HID RW400的自定义ICSP引脚布局
- en: '![Image](../images/f0123-02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0123-02.jpg)'
- en: 'Figure 12.4: Configuration Words of the HID RW400 Reader'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4：HID RW400读卡器的配置字
- en: Each page has a `CP` bit. This bit is cleared to enable Code Protection, a `WRT`
    bit to enable Write Protection, and an `EBT` bit to enable Table Read Protection
    so that code running from another page may not read this page as data through
    the table interface. These bits are set by erasing the page in question.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每个页面都有一个`CP`位。清除此位可以启用代码保护，`WRT`位启用写保护，`EBT`位启用表格读取保护，以确保来自其他页面的代码无法通过表格接口读取此页面作为数据。这些位通过擦除相应页面来设置。
- en: '**Meriac’s Boot Block Exploit**'
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Meriac的引导块漏洞**'
- en: When Milosch Meriac wanted to dump this chip from an HID RW400 reader in Meriac
    (2010), he found that the `CP` and `WRT` bits had been cleared so that instructions
    executing from the ICSP context were not permitted to read or write any blocks
    of flash memory. He chose these readers because they were the oldest to support
    the iClass cards, and you can find the configuration bits of a reader in [Figure
    12.4](ch12.xhtml#ch12fig4).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当Milosch Meriac想要从HID RW400读卡器中转储该芯片时，他发现`CP`和`WRT`位已被清除，因此ICSP上下文中执行的指令无法读取或写入任何闪存块。他选择这些读卡器是因为它们是最早支持iClass卡的，而你可以在[图12.4](ch12.xhtml#ch12fig4)中找到读卡器的配置位。
- en: Fortunately, the `EBT` bits had not been cleared. If they had been, code running
    from one page of flash memory would not be allowed to perform table reads on any
    other page. Because these bits are still set, the entire chip’s memory can be
    dumped from code running in any page.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，`EBT`位没有被清除。如果它们被清除，来自一个闪存页面的代码将无法对任何其他页面执行表格读取操作。由于这些位仍然被设置，因此可以从任何页面上运行的代码转储整个芯片的内存。
- en: Meriac observed that by erasing a page, he could set the `CP`, `WRT`, and `EBT`
    bits of that page.^([1](footnotes.xhtml#ch12fn1)) This then allowed him to write
    a bit of shellcode into the page, which would dump the rest of memory out the
    serial port.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Meriac观察到，通过擦除一个页面，他可以设置该页面的`CP`、`WRT`和`EBT`位^([1](footnotes.xhtml#ch12fn1))。这使他能够将一段shellcode写入该页面，这段shellcode会将其余内存通过串口输出。
- en: He packaged this as a C`++` application for Windows, that bit-bangs ICSP into
    the debug interface through an FTDI chip’s GPIO pins and then reads back the firmware
    through that same chip’s UART. His shellcode is shown in [Figure 12.5](ch12.xhtml#ch12fig5);
    it simply dumps the firmware to the UART.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 他将这个过程包装成一个Windows的C`++`应用程序，通过FTDI芯片的GPIO引脚将ICSP传输到调试接口，然后通过同一个芯片的UART读取固件。他的shellcode如[图12.5](ch12.xhtml#ch12fig5)所示；它只是简单地将固件转储到UART。
- en: '![Image](../images/f0125-01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0125-01.jpg)'
- en: 'Figure 12.5: Meriac’s PIC18 Dumper Source'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5：Meriac的PIC18 Dump源代码
- en: '![Image](../images/f0126-01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0126-01.jpg)'
- en: 'Figure 12.6: PIC18F452 Flash Map'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.6：PIC18F452闪存映射
- en: '![Image](../images/f0126-02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0126-02.jpg)'
- en: 'Figure 12.7: Meriac’s PIC18 Dumper Shellcode'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7：Meriac的PIC18 Dump Shellcode
- en: '![Image](../images/f0127-01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0127-01.jpg)'
- en: 'Figure 12.8: Microchip PIC18F452'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.8：Microchip PIC18F452
- en: '![Image](../images/f0128-01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0128-01.jpg)'
- en: 'Figure 12.9: Huffstutter’s ICSP RAM Extraction'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.9：Huffstutter的ICSP RAM提取
- en: For his target, it was sufficient to erase and rewrite the 512-byte bootloader
    page with the shellcode binary, as this page conveniently had no contents worth
    missing. Other targets might have something important in the boot block, and on
    those targets, a second victim device is required. This second device has every
    page *except* for the first page erased. These pages are then overwritten with
    a sled of repeated NOP instructions, leading to the shellcode at the very end
    of memory. The idea is that the boot block will eventually branch somewhere in
    the other blocks, and that almost every legal address will then slide to the shellcode
    to dump the very first block.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于他的目标，只需擦除并重写512字节的引导程序页面，并用shellcode二进制文件替换，因为这个页面恰好没有值得保留的内容。其他目标可能会在引导块中有重要内容，对于这些目标，必须使用第二个受害设备。这个第二个设备会擦除除第一页以外的每一页。这些页面随后会被一系列重复的NOP指令覆盖，最终将shellcode写入内存的末尾。其思路是引导块最终会在其他块中分支，而几乎每个合法地址都会滑动到shellcode，转储第一块内容。
- en: '**Huffstutter’s ICSP SRAM Exploit**'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Huffstutter的ICSP SRAM漏洞**'
- en: Carl Huffstutter describes a different exploit for the same firmware image on
    the same chip in Huffstutter (2011). He saw that while every bank of flash memory
    and EEPROM has its own protection fuse bits, there are no such bits for protecting
    RAM. Sure enough, the ICSP transactions in [Figure 12.9](ch12.xhtml#ch12fig9)
    cleanly and non-destructively extract all RAM from a locked microcontroller.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Carl Huffstutter在Huffstutter（2011）中描述了针对同一芯片和同一固件映像的不同漏洞。他发现，尽管每个闪存和EEPROM存储区都有各自的保护保险丝位，但没有用于保护RAM的保险丝位。果然，[图12.9](ch12.xhtml#ch12fig9)中的ICSP交易能够干净且无破坏性地提取被锁定微控制器的所有RAM。
- en: In RAM, he found the 64-bit HID Master authentication key, two 64-bit Triple
    DES keys for encrypting comms between the reader and the card, the 128-byte key
    table for use with High Security cards, and all the details of the last card read.
    This information wasn’t erased after use, but had it been, the machine might still
    be interrupted mid-read to reveal the contents in use.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在RAM中，他找到了64位HID主身份验证密钥、两个64位的Triple DES密钥（用于加密读卡器和卡片之间的通信）、用于高安全性卡的128字节密钥表，以及最后一次读取的卡片的所有详细信息。这些信息在使用后并未被擦除，但即便被擦除，机器也可能在读取过程中被中断，从而揭示正在使用的内容。
- en: Many other devices expose SRAM while protecting flash memory, so it’s worth
    considering this attack whenever you need data from a chip and don’t necessarily
    need a copy of the code. On the defensive side, it might help to declare any important
    keys and tables as `const` so that they are located only in flash memory and never
    copied into RAM.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 许多其他设备在保护闪存的同时暴露SRAM，因此每当你需要从芯片中获取数据而不一定需要代码副本时，考虑这种攻击是值得的。在防御方面，将任何重要的密钥和表声明为`const`可能会有所帮助，这样它们只会存储在闪存中，而永远不会复制到RAM中。
