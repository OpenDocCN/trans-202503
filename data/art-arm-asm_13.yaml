- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 10 TABLE LOOKUPS
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10 表格查找
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: In the early days of assembly language programming, replacing expensive computations
    with table lookups was a common way to improve program performance. Today, memory
    speeds in modern systems limit the performance gains that can be obtained by using
    table lookups. However, for very complex calculations, this is still a viable
    technique for writing high-performance code.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期的汇编语言编程中，用表格查找替代昂贵的计算是提高程序性能的常见方法。今天，现代系统中的内存速度限制了通过使用表格查找所能获得的性能提升。然而，对于非常复杂的计算，这仍然是一种编写高性能代码的可行技术。
- en: This chapter discusses how to use table lookups to speed up or reduce the complexity
    of computations, demonstrating the space and speed trade-offs involved.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了如何使用表格查找来加速或减少计算的复杂度，展示了其中涉及的空间和速度的权衡。
- en: 10.1 Using Tables in Assembly Language
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 10.1 在汇编语言中使用表格
- en: 'To an assembly language programmer, a *table* is an array containing initialized
    values that do not change after they’re created. In assembly language, you can
    use tables for a variety of purposes: computing functions, controlling program
    flow, or simply looking up data. In general, tables provide a fast mechanism for
    performing an operation, at the expense of space in your program (the extra space
    holds the tabular data).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于汇编语言程序员来说，*表格* 是一个包含初始化值的数组，这些值在创建后不会发生变化。在汇编语言中，你可以使用表格来实现多种功能：计算函数、控制程序流，或仅仅用于查找数据。一般来说，表格提供了一种快速执行操作的机制，但代价是程序中占用了额外的空间（这些额外的空间存放了表格数据）。
- en: In this section, we’ll explore some of the many possible uses of tables in an
    assembly language program. Keep in mind that because tables typically contain
    initialized data that does not change during program execution, the .section .rodata,
    "" section is a good place to put your table objects.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探索在汇编语言程序中使用表格的多种可能方式。请记住，由于表格通常包含在程序执行过程中不会变化的初始化数据，因此 .section .rodata，""
    部分是放置表格对象的好地方。
- en: 10.1.1 Function Computation via Table Lookup
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 10.1.1 通过表格查找进行函数计算
- en: A simple-looking HLL arithmetic expression can be equivalent to a considerable
    amount of ARM assembly language code and may therefore be expensive to compute.
    Assembly language programmers often precompute many values and use a table lookup
    of those values to speed up their programs, which is easier and often more efficient.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 看似简单的 HLL 算术表达式可能等价于大量的 ARM 汇编语言代码，因此计算可能非常昂贵。汇编语言程序员通常会预先计算许多值，并通过查找这些值来加速程序，这既容易实现，通常也更高效。
- en: 'Consider the following Pascal statement:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下 Pascal 语句：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This if statement converts the character variable’s value from lowercase to
    uppercase if the character is in the range a to z. Comparable assembly code requires
    a total of seven machine instructions, as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 该 if 语句将字符变量的值从小写字母转换为大写字母（如果该字符在 a 到 z 范围内）。相应的汇编代码需要七条机器指令，具体如下：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The NZCV constant 0b0010 sets the carry flag and clears the 0 so that the branch
    will be taken if W0 is less than 'a' (if W0 is less than 'a', the carry is set
    and the zero flag is clear, which is “higher or same” without the same component,
    so just higher) ❶. Note that the conditional compare instruction allows only 5-bit
    immediate constants; this is why the code loads the character constant 'z' into
    W1 and conditionally compares against W1.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: NZCV 常量 0b0010 设置进位标志并清除 0，这样当 W0 小于 'a' 时（即 W0 小于 'a' 时，进位标志被设置，零标志被清除，表示“更大或相同”但没有相同部分，因此只是更大）❶，分支会被执行。请注意，条件比较指令只允许
    5 位立即数常量；这就是为什么代码将字符常量 'z' 加载到 W1 中并与 W1 进行条件比较的原因。
- en: 'The usual method for converting lowercase to uppercase is to clear bit 5 of
    the ASCII character code. However, and w0, w0, #0x5F is not a legal instruction
    because 0x5F is not a legal logical constant. This code uses the eor (exclusive-OR)
    instruction to invert bit 5 ❷. Because this bit is guaranteed to be set at this
    point (bit 5 is set for all lowercase characters), the eor instruction will clear
    this bit.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '将小写字母转换为大写字母的常见方法是清除 ASCII 字符代码的第 5 位。但是，w0, w0, #0x5F 并不是一条合法的指令，因为 0x5F 不是一个合法的逻辑常量。该代码使用
    eor（异或）指令来反转第 5 位 ❷。因为此时第 5 位必定被设置（所有小写字母的第 5 位都被设置），所以 eor 指令会清除这一位。'
- en: 'The lookup table solution uses only four instructions:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 查找表解决方案只使用四条指令：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The conversion logic is completely buried in the lookup table (xlatTbl). This
    is a 256-byte array; each index contains the index value (element 0 contains the
    value 0, element 1 contains the value 1, and so on) except for the indices corresponding
    to the ASCII codes for the lowercase characters (indices 97 through 122). Those
    particular array elements contain the ASCII codes for the uppercase characters
    (values 65 through 90).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 转换逻辑完全隐藏在查找表（xlatTbl）中。这个是一个 256 字节的数组；每个索引包含索引值（元素 0 包含值 0，元素 1 包含值 1，依此类推），除了对应小写字符
    ASCII 代码的索引（索引 97 到 122）。这些特定的数组元素包含大写字母的 ASCII 代码（值 65 到 90）。
- en: Note that if you can guarantee that you’ll load only 7-bit ASCII characters
    into this code, you can get by with a 128-byte (rather than a 256-byte) array.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果你可以确保只加载 7 位 ASCII 字符到此代码中，你可以使用 128 字节（而不是 256 字节）的数组来实现。
- en: 'Here’s a typical (128-byte) lookup table that converts lowercase characters
    to uppercase:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个典型的（128 字节）查找表，用于将小写字母转换为大写字母：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you want a full 256-byte table, elements 128 through 255 would contain the
    values 128 through 255.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要一个完整的 256 字节表，索引从 128 到 255 的元素将包含从 128 到 255 的值。
- en: 'The ldrb w0, [x1, w0, uxtw #0] instruction loads W0 with the byte at the index
    specified by the (original) value held in W0, assuming X1 holds the address of
    xlatTbl. If W0 holds a non-lowercase character code, that index into the table
    will load the same value into W0 (so this instruction does not change W0’s value
    if it is not a lowercase letter). If W0 contains a lowercase letter, the index
    into this table fetches the ASCII code of the corresponding uppercase character.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`ldrb w0, [x1, w0, uxtw #0]` 指令将 W0 加载为由 W0 中保存的（原始）值指定的索引处的字节，假设 X1 保存的是 xlatTbl
    的地址。如果 W0 保存的是非小写字符的代码，索引到该表将把相同的值加载到 W0（所以如果 W0 不是小写字母，这条指令不会改变 W0 的值）。如果 W0
    包含小写字母，索引到此表会获取相应大写字母的 ASCII 代码。'
- en: 'Listing 10-1 demonstrates these two forms of case conversion: if...eor and
    table lookup.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 10-1 演示了这两种形式的大小写转换：`if...eor` 和表查找。
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here’s the build command and sample output for Listing 10-1:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Listing 10-1 的构建命令和示例输出：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: I didn’t attempt to time the two versions, because the call to printf() dominates
    the execution time of the two algorithms. However, because the table-lookup algorithm
    accesses memory on each character (to fetch a byte from the lookup table), the
    process is no shorter even though it uses fewer instructions. The lookup table
    adds 128 bytes (or 256 bytes) to the size of the program’s code.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有尝试对两种版本进行计时，因为对 `printf()` 的调用主导了两个算法的执行时间。然而，由于查找表算法在每个字符上访问内存（从查找表中获取字节），即使它使用了更少的指令，过程也并不更短。查找表增加了程序代码的
    128 字节（或 256 字节）。
- en: 'Using a lookup table for a simple computation such as lowercase-to-uppercase
    conversion carries little benefit. But as the complexity of the computation increases,
    the table lookup algorithm could become faster. Consider the following code that
    swaps cases (converts lowercase to uppercase and uppercase to lowercase):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像小写字母转大写字母这样的简单计算，使用查找表几乎没有什么好处。但随着计算复杂度的增加，查找表算法可能会变得更快。考虑以下交换大小写的代码（将小写字母转换为大写字母，反之亦然）：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The lookup-table version is almost identical to Listing 10-1\. Only the values
    in the lookup table change:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 查找表版本几乎与 Listing 10-1 相同。只是查找表中的值发生了变化：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The xlatTbl2 array will contain the lowercase ASCII codes at the indices corresponding
    to the uppercase characters, in addition to having the uppercase ASCII codes at
    the indices corresponding to the lowercase ASCII codes.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: xlatTbl2 数组将包含与大写字母对应的索引位置的小写 ASCII 代码，同时也会在与小写 ASCII 代码对应的索引位置保存大写 ASCII 代码。
- en: This case-conversion algorithm still might not be complex enough to justify
    using a lookup table to improve performance. However, it demonstrates that as
    the complexity of the algorithm increases (taking longer to execute without a
    lookup table), the lookup table algorithm’s execution time remains constant.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个大小写转换算法可能仍然不足够复杂，无法证明使用查找表来提高性能是合理的。然而，它表明随着算法复杂度的增加（如果没有查找表则执行时间更长），查找表算法的执行时间保持恒定。
- en: 10.1.2 Function Domains and Ranges
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 10.1.2 函数域与范围
- en: Functions computed via table lookup have a limited *domain*, the set of possible
    input values they accept. This is because each element in the domain of a function
    requires an entry in the lookup table. For example, the previous uppercase/lowercase
    conversion functions have the 256-character extended ASCII character set as their
    domain. A function such as sin() or cos() accepts the (infinite) set of real numbers
    as possible input values. You won’t find it very practical to implement a function
    via table lookup whose domain is the set of real numbers, because you must limit
    the domain to a small set.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查找表计算的函数有一个有限的*定义域*，即它们接受的所有可能输入值的集合。这是因为函数定义域中的每个元素都需要在查找表中有一个条目。例如，之前的大小写转换函数的定义域是256字符的扩展ASCII字符集。像sin()或cos()这样的函数接受的是（无限的）实数集作为可能的输入值。你不会发现通过查找表实现一个定义域为实数集的函数非常实用，因为你必须将定义域限制为一个较小的集合。
- en: Most lookup tables are quite small, usually 10 to 256 entries. Rarely do they
    grow beyond 1,000 entries. Most programmers don’t have the patience to create
    and verify the correctness of a 1,000-entry table (but see section 10.1.4, “Table
    Generation,” on [page 615](chapter10.xhtml#pg_615) for a discussion of generating
    tables programmatically).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数查找表相当小，通常只有10到256个条目。它们很少会超过1,000个条目。大多数程序员没有足够的耐心去创建和验证一个1,000条目的表（但请参阅第10.1.4节，“表生成”，在[第615页](chapter10.xhtml#pg_615)讨论如何通过编程生成表）。
- en: Another limitation of functions based on lookup tables is that the elements
    in the domain must be fairly contiguous. Table lookups use the input value to
    a function as an index into the table and return the value at that entry in the
    table. A function that accepts values 0, 100, 1,000, and 10,000 would require
    10,001 elements in the lookup table because of the range of input values. You
    cannot, therefore, efficiently create such a function via a table lookup. This
    section on tables assumes throughout that the domain of the function is a fairly
    contiguous set of values.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 基于查找表的函数的另一个限制是，定义域中的元素必须相当连续。查找表使用函数的输入值作为查找表的索引，并返回该条目处的值。一个接受0、100、1,000和10,000作为输入值的函数需要10,001个元素，因为输入值的范围。因此，你不能通过查找表高效地创建这样的函数。本节讨论的查找表假设函数的定义域是一个相当连续的值集。
- en: The *range* of a function is the set of possible output values it produces.
    From the perspective of a table lookup, a function’s range determines the size
    of each table entry. For example, if a function’s range is the integer values
    0 through 255, each table entry requires a single byte; if the range is 0 through
    65,535, each table entry requires 2 bytes, and so on.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数的*范围*是它所产生的所有可能输出值的集合。从查找表的角度来看，函数的范围决定了每个表项的大小。例如，如果函数的范围是整数值0到255，则每个表项需要一个字节；如果范围是0到65,535，则每个表项需要2个字节，依此类推。
- en: 'The best functions you can implement via table lookups are those whose domain
    and range are always 0 to 255 (or a subset of this range). Any such function can
    be computed using the same two instructions:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过查找表实现的最佳函数是那些其定义域和范围始终为0到255（或该范围的子集）的函数。任何这样的函数都可以通过以下两条指令来计算：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The only thing that changes is the lookup table. The uppercase/lowercase conversion
    routines presented earlier are good examples of such functions.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一改变的是查找表。之前介绍的大小写转换程序是这种函数的好例子。
- en: Lookup tables become slightly less efficient if the domain or range is not 0
    to 255\. If the domain of a function is outside 0 to 255 but the range of the
    function falls within this set of values, your lookup table will require more
    than 256 entries, but you can represent each entry with a single byte. Therefore,
    the lookup table can be an array of bytes. The C/C++ function invocation
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数的定义域或范围不是0到255，查找表的效率会稍微降低。如果一个函数的定义域超出了0到255的范围，但其范围落在该值集合之内，那么你的查找表将需要超过256个条目，但你可以用一个字节表示每个条目。因此，查找表可以是一个字节数组。C/C++函数调用
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: where Func is
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 其中Func是
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'which is easily converted to the following ARM code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以很容易地转换为以下ARM代码：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This code loads the function parameter into W0, uses this value (in the range
    0 to *maxParmValue*) as an index into the FuncTbl table, fetches the byte at that
    location, and stores the result into B. Obviously, the table must contain a valid
    entry for each possible value of X (up to *maxParmValue*). For example, suppose
    you want to map a cursor position on an 80 × 25 text-based video display in the
    range 0 to 1,999 (an 80 × 25 video display has 2,000 character positions) to its
    X (0 to 79) or Y (0 to 24) coordinate on the screen.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将函数参数加载到 W0 中，使用该值（在 0 到*maxParmValue* 范围内）作为 FuncTbl 表的索引，获取该位置的字节，并将结果存储到
    B 中。显然，表中必须为 X 的每个可能值（最多为 *maxParmValue*）包含有效条目。例如，假设你想要将 80 × 25 文本视频显示器上的光标位置（范围为
    0 到 1999，80 × 25 显示器有 2000 个字符位置）映射到屏幕上的 X（0 到 79）或 Y（0 到 24）坐标。
- en: You could compute the X coordinate via this function
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过这个函数计算 X 坐标
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'and the Y coordinate with this formula:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 并使用以下公式计算 Y 坐标：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following code, which realizes these two functions via table lookup, may
    improve the performance of your code, particularly if you access the table frequently
    and it is sitting in the processor’s cache:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码通过表查找实现这两个函数，可能会提高代码的性能，特别是在频繁访问表且表位于处理器缓存中的情况下：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Given appropriate values in xTbl and yTbl, this will leave the x-coordinate
    in W0 and the y-coordinate in W1.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 给定 xTbl 和 yTbl 中的适当值，这将把 x 坐标留在 W0 中，y 坐标留在 W1 中。
- en: If the domain of a function is within 0 to 255 but the range is outside this
    set, the lookup table will contain 256 or fewer entries, but each entry will require
    2 or more bytes. If both the range and domains of the function are outside 0 to
    255, each entry will require 2 or more bytes, and the table will contain more
    than 256 entries.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个函数的定义域在 0 到 255 之间，但其值域超出该范围，查找表将包含 256 个或更少的条目，但每个条目将需要 2 个或更多字节。如果函数的值域和定义域都超出
    0 到 255 的范围，每个条目将需要 2 个或更多字节，并且表格将包含超过 256 个条目。
- en: 'Recall from [Chapter 4](chapter4.xhtml) that the formula for indexing into
    a single-dimensional array (of which a table is a special case) is as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾[第 4 章](chapter4.xhtml)，索引单维数组（表格是特殊情况）的公式如下：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If elements in the range of the function require 2 bytes, you must multiply
    the index by 2 before indexing into the table. Likewise, if each entry requires
    3, 4, or more bytes, the index must be multiplied by the size of each table entry
    before being used as an index into the table. For example, suppose you have a
    function F(x), defined by the following C/C++ declaration:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数值域中的元素需要 2 个字节，你必须将索引乘以 2，然后才能索引到表中。同样，如果每个条目需要 3、4 或更多字节，则在作为索引使用之前，必须将索引乘以每个表项的字节大小。例如，假设你有一个函数
    F(x)，由以下 C/C++ 声明定义：
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can create this function by using the following ARM code (and, of course,
    the appropriate table named F):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用以下 ARM 代码创建这个函数（当然，还有合适的表格，名为 F）：
- en: '[PRE17]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Any function whose domain is small and mostly contiguous is a good candidate
    for computation via table lookup. In some cases, noncontiguous domains are acceptable
    as well, as long as the domain can be coerced into an appropriate set of values
    (a previously discussed example is processing switch statement expressions). Such
    operations are called *conditioning* and are the subject of the next section.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 任何定义域较小且大多是连续的函数，都适合通过表查找进行计算。在某些情况下，不连续的定义域也是可以接受的，只要能够将定义域转化为合适的值集合（之前讨论过的例子是处理
    `switch` 语句的表达式）。这种操作叫做*条件化*，是下一节的主题。
- en: 10.1.3 Domain Conditioning
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 10.1.3 定义域条件化
- en: '*Domain conditioning* is taking a set of values in the domain of a function
    and massaging them so that they are more acceptable as inputs to that function.
    Consider the following function:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*定义域条件化* 是指将函数定义域中的一组值进行处理，使它们更适合作为该函数的输入。考虑以下函数：'
- en: '[PRE18]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This says that the (computer) function sin(x) is equivalent to the (mathematical)
    function sin *x* where:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这表示（计算机）函数 sin(x) 等价于（数学）函数 sin *x*，其中：
- en: '[PRE19]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you know, sine is a circular function, which will accept any real-value input.
    The formula used to compute sine, however, accepts only a small set of these values.
    This range limitation doesn’t present any real problems; by simply computing sin(y
    mod (2π)), you can compute the sine of any input value. Modifying an input value
    so that you can easily compute a function is called *conditioning the input*.
    The preceding example computed (x % 2) * pi and used the result as the input to
    the sin() function. This truncates x to the domain sin() needs without affecting
    the result.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所知道的，正弦是一个循环函数，它可以接受任何实数输入。然而，用于计算正弦的公式只接受这些值中的一小部分。这个范围限制不会带来实际问题；只需通过计算
    sin(y mod (2π))，你就能计算出任何输入值的正弦。修改输入值，以便你能够轻松计算函数的过程叫做 *输入条件调整*。前面的例子计算了 (x % 2)
    * pi，并将结果作为 sin() 函数的输入。这会将 x 截断到 sin() 所需的领域，而不会影响结果。
- en: 'You can apply input conditioning to table lookups as well. In fact, scaling
    the index to handle word entries is a form of input conditioning. Consider the
    following C/C++ function:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将输入条件调整应用于表查找。实际上，缩放索引以处理字条目就是一种输入条件调整。考虑以下 C/C++ 函数：
- en: '[PRE20]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This function computes a value for x in the range 0 to 4 and returns 0 if x
    is outside this range. Since x can take on 65,536 values (being a 16-bit hword),
    creating a table containing 65,536 hwords where only the first five entries are
    nonzero seems to be quite wasteful. However, you can still compute this function
    by using a table lookup if you use input conditioning. The following assembly
    language code presents this principle:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数计算 x 在 0 到 4 范围内的值，如果 x 超出此范围，则返回 0。由于 x 可以取 65,536 个值（作为一个 16 位字），创建一个包含
    65,536 个字的表，其中只有前五个条目非零，似乎非常浪费。然而，如果使用输入条件调整，你仍然可以通过表查找来计算这个函数。以下汇编语言代码展示了这个原理：
- en: '[PRE21]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This code checks whether x is outside the range 0 to 4\. If so, it manually
    sets W0 to 0; otherwise, it looks up the function value through the valTbl table.
    With input conditioning, you can implement several functions that would otherwise
    be impractical to do via table lookup.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码检查 x 是否超出 0 到 4 的范围。如果超出，它会手动将 W0 设置为 0；否则，它会通过 valTbl 表查找函数值。通过输入条件调整，你可以实现一些通过表查找通常无法做到的功能。
- en: 10.1.4 Table Generation
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 10.1.4 表格生成
- en: One big problem with using table lookups is creating the table in the first
    place. This is particularly true if the table has many entries. Figuring out the
    data to place in the table, then laboriously entering the data, and finally checking
    that data to make sure it is valid is a time-consuming and boring process.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用表查找的一个大问题是首先创建表格。如果表格包含许多条目，这个问题尤其突出。弄清楚表格中应该放入哪些数据，然后繁琐地输入这些数据，最后检查数据以确保其有效性，是一个既耗时又枯燥的过程。
- en: 'For many tables, there is no way around this. For other tables, however, you
    can use the computer to generate the table for you. I’ll explain this by example.
    Consider the following modification to the sine function:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多表来说，这是无法避免的。然而，对于其他表，你可以利用计算机为你生成表。我将通过一个例子来解释这一点。考虑以下对正弦函数的修改：
- en: $Equation$![](../images/pg615.jpg)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: $方程$![](../images/pg615.jpg)
- en: 'This states that *x* is an integer in the range 0 to 359 (degrees) and that
    *r* must be an integer. The computer can easily compute this with the following
    code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这说明 *x* 是一个在 0 到 359（度）范围内的整数，并且 *r* 必须是一个整数。计算机可以通过以下代码轻松计算此内容：
- en: '[PRE22]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note that integer multiplication and division are not associative. You cannot
    remove the multiplication by 1,000 and the division by 1,000 because they appear
    to cancel each other out. Furthermore, this code must compute this function in
    exactly this order.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，整数的乘法和除法不是结合律的。你不能简单地去掉乘以 1,000 和除以 1,000，因为它们看似互相抵消。此外，这段代码必须严格按照这个顺序来计算该函数。
- en: All you need to complete this function is Sines, a table containing 360 values
    corresponding to the sine of the angle (in degrees) times 1,000\. The C/C++ program
    in Listing 10-2 generates this table.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此功能所需的所有内容是正弦值，一个包含 360 个值的表，表示角度（以度为单位）的正弦值乘以 1,000。列表 10-2 中的 C/C++ 程序生成了这个表。
- en: '[PRE23]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Compiling and running the program in Listing 10-2 produces the file *sines.inc*
    containing the following text (truncated for brevity):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 编译并运行列表 10-2 中的程序会生成文件 *sines.inc*，该文件包含以下内容（为了简洁起见，已截断）：
- en: '[PRE24]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Obviously, writing the C program that generated this data is much easier than
    entering and verifying this data by hand. You can also use Pascal/Delphi, Java,
    C#, Swift, or another HLL to write the table-generation program. Because the program
    will execute only once, its performance is not an issue.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，编写生成这些数据的C程序比手动输入和验证这些数据要容易得多。你还可以使用Pascal/Delphi、Java、C#、Swift或其他高级语言（HLL）编写表格生成程序。由于该程序只会执行一次，因此其性能不是问题。
- en: 'Once you run the table-generation program, the only step left is to cut and
    paste the table from the file (*sines.inc* in this example) into the program that
    will actually use the table (or, alternatively, use the #include "sines.inc" directive
    to include the text in your source file).'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你运行了表格生成程序，剩下的步骤就是从文件（本示例中的*sines.inc*）中剪切并粘贴表格到实际使用该表格的程序中（或者，使用#include
    "sines.inc"指令将文本包含到源文件中）。
- en: 10.2 Table-Lookup Performance
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 10.2 表格查找性能
- en: In the early days of PCs, table lookups were a preferred way to do high-performance
    computations. Today, it is common for a CPU to be 10 to 100 times faster than
    main memory. As a result, using a table lookup may not be faster than doing the
    same calculation with machine instructions. However, the on-chip CPU cache memory
    subsystems operate at near-CPU speeds. Therefore, table lookups can be cost-effective
    if your table resides in cache memory on the CPU. This means that the way to get
    good performance from table lookups is to use small tables (because the cache
    has only so much room) and to use tables whose entries you reference frequently
    (so the tables stay in the cache).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期的PC时代，表格查找是进行高性能计算的首选方式。如今，CPU的速度通常是主存储器的10到100倍。因此，使用表格查找可能不比使用机器指令进行相同计算更快。然而，片上CPU缓存内存子系统的速度接近CPU速度。因此，如果你的表格存储在CPU的缓存内存中，表格查找可能是成本效益较高的选择。这意味着，从表格查找中获得良好性能的方法是使用小表格（因为缓存空间有限）并使用你频繁访问的表格项（以便表格保持在缓存中）。
- en: Ultimately, the best way to determine whether a table lookup is faster than
    a calculation is to write both versions of the code and time them. Although the
    “10 million loop and time” approach is probably good enough for coarse measurements,
    you might also want to find and use a decent profiler program that will produce
    much better timing results. See “For More Information” for additional details.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，确定表格查找是否比计算更快的最佳方法是编写两种版本的代码并进行计时。尽管“1000万次循环计时”方法可能足够用于粗略测量，但你可能还希望找到并使用一个合适的性能分析工具，它将提供更精确的计时结果。有关更多详细信息，请参阅“更多信息”部分。
- en: 10.3 Moving On
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 10.3 继续前进
- en: Using table lookups to optimize applications has grown out of favor as CPU speeds
    have increased and memory access times have not kept pace. Nevertheless, this
    short chapter covered the instances when table lookups are still useful. It began
    with a discussion of basic table lookup operations, then covered domain conditioning
    and using software to automatically generate tables. It concluded with a few notes
    on how to decide whether table lookups are the right choice for a particular project.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 随着CPU速度的提升和内存访问时间未能跟上，使用表格查找来优化应用程序已逐渐不再流行。然而，本章简短地讨论了表格查找仍然有用的情况。它首先讨论了基本的表格查找操作，然后讲解了领域条件化和使用软件自动生成表格。最后总结了几条关于如何判断表格查找是否适合特定项目的建议。
- en: On modern CPUs, multiple cores and SIMD instruction sets are the common way
    of improving application performance. The next chapter discusses the ARM Neon/SIMD
    instruction set and how you can use it to improve program performance.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代CPU中，多个核心和SIMD指令集是提高应用程序性能的常见方式。下一章将讨论ARM Neon/SIMD指令集，以及如何使用它来提高程序性能。
- en: 10.4 For More Information
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 10.4 更多信息
- en: 'Donald Knuth’s *The Art of Computer Programming, Volume 3: Searching and Sorting*,
    2nd edition (Addison-Wesley Professional, 1998), contains a lot of useful information
    about searching for data in tables.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 唐纳德·克努斯（Donald Knuth）的*《计算机程序设计艺术》第三卷：查找与排序*（第二版，Addison-Wesley Professional，1998年）包含了很多关于在表格中查找数据的有用信息。
- en: See my book *Write Great Code*, Volume 1, 2nd edition (No Starch Press, 2020)
    or the electronic version of *The Art of Assembly Language* at *[https://<wbr>www<wbr>.randallhyde<wbr>.com](https://www.randallhyde.com)*
    for details concerning the operation of cache memory and how you can optimize
    its use.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅我的书*《写出优秀代码》*（第一卷，第二版，No Starch Press，2020年）或*《汇编语言艺术》*的电子版，了解有关缓存内存操作以及如何优化其使用的详细信息，网址是*[https://www.randallhyde.com](https://www.randallhyde.com)。
- en: For information on profiler programs, see “Getting Started with dotTrace on
    macOS and Linux” by Maarten Balliauw at *[https://<wbr>blog<wbr>.jetbrains<wbr>.com<wbr>/dotnet<wbr>/2023<wbr>/02<wbr>/22<wbr>/getting<wbr>-started<wbr>-with<wbr>-dottrace<wbr>-on<wbr>-macos<wbr>-and<wbr>-linux](https://blog.jetbrains.com/dotnet/2023/02/22/getting-started-with-dottrace-on-macos-and-linux)*.
    You can also check out “13 Profiling Software to Debug Application Performance
    Issue” by Amrita Pathak at *[https://<wbr>geekflare<wbr>.com<wbr>/application<wbr>-profiling<wbr>-software<wbr>/](https://geekflare.com/application-profiling-software/)*.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关分析器程序的更多信息，请参阅Maarten Balliauw撰写的《在macOS和Linux上使用dotTrace入门》*，[https://<wbr>blog<wbr>.jetbrains<wbr>.com<wbr>/dotnet<wbr>/2023<wbr>/02<wbr>/22<wbr>/getting<wbr>-started<wbr>-with<wbr>-dottrace<wbr>-on<wbr>-macos<wbr>-and<wbr>-linux](https://blog.jetbrains.com/dotnet/2023/02/22/getting-started-with-dottrace-on-macos-and-linux)*。你还可以查看Amrita
    Pathak撰写的《13款用于调试应用程序性能问题的分析软件》*，[https://<wbr>geekflare<wbr>.com<wbr>/application<wbr>-profiling<wbr>-software<wbr>/](https://geekflare.com/application-profiling-software/)*。
