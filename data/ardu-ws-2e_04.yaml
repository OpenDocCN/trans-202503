- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Working with Functions
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用函数
- en: In this chapter you will
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将
- en: Create your own functions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您自己的函数
- en: Learn to make decisions with `while` and `do-while`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习使用`while`和`do-while`进行决策
- en: Send and receive data between your Arduino and the Serial Monitor window
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的Arduino和串口监视器窗口之间发送和接收数据
- en: Learn about `long` variables
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习关于`long`变量的知识
- en: You can make your Arduino sketches easier to read and simpler to design by creating
    your own functions. You can also create modular code that you can reuse in subsequent
    projects. In addition to these topics, this chapter will introduce a way to have
    the Arduino make decisions that control blocks of code, and you’ll learn about
    a type of integer variable called the `long`. You’ll also use your own functions
    to create a new type of thermometer.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过创建自己的函数，使您的Arduino草图更易于阅读并简化设计。您还可以创建可在后续项目中重复使用的模块化代码。除了这些内容，本章还将介绍一种让Arduino做出决策并控制代码块的方法，您将了解一种名为`long`的整数变量类型。您还将使用自己的函数创建一种新的温度计类型。
- en: A *function* consists of a set of instructions, packaged as a unit and given
    a name, that we can use anywhere in our sketches. Although many functions are
    already available in the Arduino language, sometimes you won’t find one to suit
    your specific needs—or you may need to run part of a sketch repeatedly to make
    a function work, which is a waste of memory. In both of these situations, you
    might wish you had a better function to do what you need to do. The good news
    is that there is such a function—the one you create yourself.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*函数*由一组指令组成，作为一个单元打包并赋予名称，您可以在任何地方使用它。尽管许多函数已经在Arduino语言中可用，但有时您找不到适合您特定需求的函数——或者您可能需要反复运行程序的一部分以使函数工作，这会浪费内存。在这两种情况下，您可能会希望有一个更合适的函数来完成任务。好消息是，您可以自己创建这样的函数。
- en: 'Project #9: Creating a Function to Repeat an Action'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #9：创建一个重复执行某个操作的函数'
- en: 'You can write simple functions to repeat actions on demand. For example, the
    following function will turn the built-in LED on (at 1 and 3) and off (at 2 and
    4) twice:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以编写简单的函数来按需重复执行操作。例如，以下函数将在1和3时打开内置LED（开），在2和4时关闭内置LED（关），并重复两次：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is the function being used within a complete sketch, which you can upload
    to the Arduino:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这个函数在完整草图中的使用方式，您可以将其上传到Arduino：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When the `blinkLED()` function is called in `void loop()` at 1, the Arduino
    will run the commands within the `void blinkLED()` section. In other words, you
    have created your own function and used it when necessary.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当在`void loop()`中的1处调用`blinkLED()`函数时，Arduino将执行`void blinkLED()`部分中的命令。换句话说，您已经创建了自己的函数，并在需要时使用了它。
- en: 'Project #10: Creating a Function to Set the Number of Blinks'
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #10：创建一个设置闪烁次数的函数'
- en: 'The function we just created is pretty limited. What if we want to set the
    number of blinks and the delay? No problem—we can create a function that lets
    us change values, like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建的函数功能非常有限。如果我们想设置闪烁次数和延迟时间怎么办？没问题——我们可以创建一个允许我们修改这些值的函数，如下所示：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Our new `void blinkLED()` function accepts two integer values: `cycles` (the
    number of times we want to blink the LED) and `del` (the delay time between turning
    the LED on and off). So if we wanted to blink the LED 12 times with a 100-millisecond
    delay, then we would use `blinkLED(12, 100)`. Enter the following sketch into
    the IDE to experiment with this function:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们新的`void blinkLED()`函数接受两个整数值：`cycles`（我们想要的LED闪烁次数）和`del`（LED开关之间的延迟时间）。因此，如果我们想让LED闪烁12次，每次延迟100毫秒，我们将使用`blinkLED(12,
    100)`。在IDE中输入以下代码，尝试这个函数：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can see at 1 that the values `12` and `100`—for the number of blinks and
    the delay, respectively—are passed into our custom function `blinkLED()`. Therefore,
    the LED will blink 12 times with a delay of 100 milliseconds between blinks. The
    display then pauses for 1,000 milliseconds, or 1 second, before the `loop()` function
    starts all over again.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如1所示，`12`和`100`这两个值——分别代表闪烁次数和延迟时间——被传递到我们自定义的`blinkLED()`函数中。因此，LED将闪烁12次，每次闪烁之间有100毫秒的延迟。然后显示暂停1,000毫秒，即1秒，然后`loop()`函数重新开始。
- en: Creating a Function to Return a Value
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个返回值的函数
- en: In addition to creating functions that accept values entered as parameters (as
    `void blinkLED()` did in Project 10), you can create functions that return a value,
    in the same way that `analogRead()` returns a value between 0 and 1,023 when measuring
    an analog input, as demonstrated in Project 8 (see page 91 in Chapter 4).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 除了创建接受作为参数输入的值的函数（如项目 10 中的 `void blinkLED()`），你还可以创建返回值的函数，方法与 `analogRead()`
    测量模拟输入时返回介于 0 到 1,023 之间的值相同，如项目 8 中演示的那样（请参见第 4 章第 91 页）。
- en: Up until now, all the functions we’ve seen have started with the word `void`.
    This tells the Arduino that the function returns nothing, just an empty void.
    But we can create functions that return any type of value we want. For example,
    if we wanted a function to return an integer value, we would create it using `int`.
    If we wanted it to return a floating point value, it would begin with `float`.
    Let’s create some useful functions that return actual values.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们看到的所有函数都以 `void` 开头。这告诉 Arduino 函数不返回任何值，仅仅是一个空的 void。但我们可以创建返回任何类型值的函数。例如，如果我们想要一个返回整数值的函数，我们会使用
    `int` 来创建。如果我们希望它返回一个浮动点值，则函数将以 `float` 开头。让我们创建一些返回实际值的有用函数。
- en: 'Consider this function that converts degrees Celsius to Fahrenheit:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个将摄氏度转换为华氏度的函数：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the first line, we define the function name (`convertTemp`), its return
    value type (`float`), and any variables that we might want to pass into the function
    (`float celsius`). To use this function, we send it an existing value. For example,
    if we wanted to convert 40 degrees Celsius to Fahrenheit and store the result
    in a `float` variable called `tempf`, we would call `convertTemp()` like so:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们定义了函数名（`convertTemp`）、返回值类型（`float`）以及我们可能想要传递给函数的任何变量（`float celsius`）。要使用这个函数，我们将其传递一个现有的值。例如，如果我们想将
    40 摄氏度转换为华氏度，并将结果存储在一个名为 `tempf` 的 `float` 变量中，我们可以这样调用 `convertTemp()`：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This would place `40` into the `convertTemp()` variable `celsius` and use it
    in the calculation `fahrenheit() = (1.8 * celsius) + 32` in the `convertTemp()`
    function. The result is then returned into the variable `tempf` with the `convertTemp()`
    line `return fahrenheit;`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把 `40` 放入 `convertTemp()` 变量 `celsius` 并在 `convertTemp()` 函数中使用计算 `fahrenheit()
    = (1.8 * celsius) + 32`。结果会返回到变量 `tempf`，通过 `convertTemp()` 行 `return fahrenheit;`。
- en: 'Project #11: Creating a Quick-Read Thermometer That Blinks the Temperature'
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #11：创建一个快速读取的温度计，它会根据温度闪烁'
- en: Now that you know how to create custom functions, we’ll make a quick-read thermometer
    using the TMP36 temperature sensor from Chapter 4 and the Arduino’s built-in LED.
    If the temperature is below 20 degrees Celsius, the LED will blink twice and then
    pause; if the temperature falls between 20 and 26 degrees, the LED will blink
    four times and then pause; and if the temperature is above 26 degrees, the LED
    will blink six times.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何创建自定义函数，我们将使用第 4 章中的 TMP36 温度传感器和 Arduino 内建的 LED 来制作一个快速读取的温度计。如果温度低于
    20 摄氏度，LED 会闪烁两次然后暂停；如果温度介于 20 到 26 摄氏度之间，LED 会闪烁四次然后暂停；如果温度高于 26 摄氏度，LED 会闪烁六次。
- en: 'We’ll make our sketch more modular by breaking it up into distinct functions
    that will be reusable, as well as making the sketch easier to follow. Our thermometer
    will perform two main tasks: measure and categorize the temperature, and blink
    the LED a certain number of times (as determined by the temperature).'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过将草图分解为独立的、可重复使用的函数，使得草图更加模块化，同时也更容易理解。我们的温度计将执行两个主要任务：测量并分类温度，以及根据温度闪烁
    LED 指定的次数。
- en: The Hardware
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'The required hardware is minimal:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的硬件很少：
- en: One TMP36 temperature sensor
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 TMP36 温度传感器
- en: One breadboard
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个面包板
- en: Various connecting wires
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种连接电线
- en: Arduino and USB cable
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino 和 USB 数据线
- en: The Schematic
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原理图
- en: The circuit is very simple, as shown in [Figure 5-1](#figure5-1).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 电路非常简单，如 [图 5-1](#figure5-1) 所示。
- en: '![f05001](image_fi/500587c05/f05001.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![f05001](image_fi/500587c05/f05001.png)'
- en: 'Figure 5-1: Schematic for Project 11'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-1：项目 11 原理图
- en: The Sketch
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: We’ll need to create two functions for the sketch. The first one will read the
    value from the TMP36, convert it to Celsius, and then return a value of `2`, `4`,
    or `6`, corresponding to the number of times the LED should blink. We’ll start
    with the sketch from Project 8 for this purpose and make minor adjustments.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为草图创建两个函数。第一个函数将从 TMP36 读取值，将其转换为摄氏度，然后返回 `2`、`4` 或 `6`，对应 LED 应该闪烁的次数。我们将从第
    8 项中的草图开始，并做一些小的调整。
- en: For our second function, we’ll use `blinkLED()` from Project 9\. Our `void`
    loop will call the functions in order and then pause for 2 seconds before restarting.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第二个函数，我们将使用来自项目9的`blinkLED()`。我们的`void`循环将按顺序调用这些函数，然后暂停2秒钟再重新启动。
- en: 'Enter this code into the IDE:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将此代码输入到IDE中：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Because we use custom functions, all we have to do in `void_loop()` at 1 is
    call them and set the delay. The function `checkTemp()` returns a value to the
    integer variable `blinks`, and then `blinkLED()` will blink the LED `blinks` times
    with a delay of 500 milliseconds. The sketch then pauses for 2 seconds before
    repeating.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们使用了自定义函数，所以我们只需要在`void_loop()`中的第1行调用它们并设置延迟。函数`checkTemp()`返回一个值给整数变量`blinks`，然后`blinkLED()`将使LED闪烁`blinks`次，延迟500毫秒。草图然后暂停2秒钟再重复。
- en: Upload the sketch and watch the LED to see this thermometer in action. As before,
    see if you can change the temperature of the sensor by blowing on it or holding
    it between your fingers. Be sure to keep this circuit assembled, since we’ll use
    it in the projects that follow.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 上传草图并观察LED，看看这个温度计是如何工作的。和之前一样，看看你是否可以通过吹气或将它夹在手指之间来改变传感器的温度。一定要保持电路组装好，因为我们将在接下来的项目中使用它。
- en: Displaying Data from the Arduino in the Serial Monitor
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在串行监视器中显示来自Arduino的数据
- en: So far, we have sent sketches to the Arduino and used the LEDs to show us output
    (such as temperatures and traffic signals). Blinking LEDs make it easy to get
    feedback from the Arduino, but blinking lights can tell us only so much. In this
    section, you’ll learn how to use the Arduino’s cable connection and the IDE’s
    Serial Monitor window to display data from the Arduino and send data to the Arduino
    from your computer’s keyboard.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经将草图上传到Arduino，并用LED显示输出（比如温度和交通信号）。闪烁的LED让我们容易从Arduino获得反馈，但闪烁的灯光只能告诉我们这么多信息。在本节中，你将学习如何使用Arduino的电缆连接和IDE的串行监视器窗口来显示来自Arduino的数据，并通过计算机键盘将数据发送到Arduino。
- en: The Serial Monitor
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 串行监视器
- en: To open the Serial Monitor, start the IDE and click the Serial Monitor icon
    on the toolbar, shown in [Figure 5-2](#figure5-2). It appears as a new tab in
    the IDE with the output window, and should look similar to [Figure 5-3](#figure5-3).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开串行监视器，启动IDE并点击工具栏上的串行监视器图标，如[图5-2](#figure5-2)所示。它会以一个新标签的形式出现在IDE中，包含输出窗口，并且应该看起来类似于[图5-3](#figure5-3)。
- en: '![f05002](image_fi/500587c05/f05002.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![f05002](image_fi/500587c05/f05002.png)'
- en: 'Figure 5-2: The Serial Monitor icon on the IDE toolbar'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-2：IDE工具栏上的串行监视器图标
- en: '![f05003](image_fi/500587c05/f05003.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![f05003](image_fi/500587c05/f05003.png)'
- en: 'Figure 5-3: Serial Monitor'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图5-3：串行监视器
- en: As you can see in [Figure 5-3](#figure5-3), the Serial Monitor displays an input
    field at the top, consisting of a single row and a Send button, and an output
    window below it, where data from the Arduino is displayed. When the Autoscroll
    box is checked (the chevron button next to the clock icon), the most recent output
    is displayed, and once the screen is full, older data rolls off the screen as
    newer output is received. If you uncheck Autoscroll, you can manually examine
    the data using a vertical scroll bar.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图5-3](#figure5-3)所示，串行监视器在顶部显示一个输入框，由一行和一个发送按钮组成，下面是输出窗口，显示来自Arduino的数据。当勾选“自动滚动”框（时钟图标旁边的箭头按钮）时，最新的输出将显示在屏幕上，一旦屏幕满了，旧的数据会滚出屏幕，新的输出会覆盖它。如果你取消勾选“自动滚动”，可以使用垂直滚动条手动查看数据。
- en: Starting the Serial Monitor
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 启动串行监视器
- en: 'Before we can use the Serial Monitor, we need to activate it by adding this
    function to our sketch in `void setup()`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以使用串行监视器之前，需要通过在`void setup()`中添加这个函数来激活它：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The value `9600` is the speed at which the data will travel between the computer
    and the Arduino, also known as *baud*. This value must match the speed setting
    at the bottom right of the Serial Monitor, as shown in [Figure 5-3](#figure5-3).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 值`9600`是数据在计算机和Arduino之间传输的速度，也叫做*波特率*。这个值必须与串行监视器右下角的速度设置相匹配，如[图5-3](#figure5-3)所示。
- en: Sending Text to the Serial Monitor
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 发送文本到串行监视器
- en: 'To send text from the Arduino to the Serial Monitor to be displayed in the
    output window, you can use `Serial.print()`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要将文本从Arduino发送到串行监视器并在输出窗口中显示，你可以使用`Serial.print()`：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This sends the text between the quotation marks to the Serial Monitor’s output
    window.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将引号中的文本发送到串行监视器的输出窗口。
- en: 'You can also use `Serial.println()` to display text and then force any following
    text to start on the next line:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`Serial.println()`来显示文本，并强制任何后续的文本开始于下一行：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Displaying the Contents of Variables
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 显示变量的内容
- en: 'You can also display the contents of variables in the Serial Monitor. For example,
    this would display the contents of the variable `results`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在串口监视器中显示变量的内容。例如，这将显示变量 `results` 的内容：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If the variable is a `float`, the display will default to two decimal places.
    You can specify the number of decimal places as a number between 0 and 6 by entering
    a second parameter after the variable name. For example, to display the `float`
    variable `results` to four decimal places, you would enter the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果变量是 `float` 类型，则显示默认保留两位小数。你可以通过在变量名后输入第二个参数来指定小数位数，范围从 0 到 6。例如，要将 `float`
    类型的变量 `results` 显示为四位小数，你可以输入以下代码：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Project #12: Displaying the Temperature in the Serial Monitor'
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #12：在串口监视器中显示温度'
- en: Using the hardware from Project 8, we’ll display temperature data in Celsius
    and Fahrenheit in the Serial Monitor window. To do this, we’ll create one function
    to determine the temperature values and another to display them in the Serial
    Monitor.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用项目 8 中的硬件，我们将在串口监视器窗口中显示摄氏度和华氏度的温度数据。为此，我们将创建一个函数来确定温度值，另一个函数来在串口监视器中显示这些值。
- en: 'Enter this code into the IDE:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 将此代码输入到 IDE 中：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'A lot is happening in this sketch, but we’ve created two functions, `findTemps()`
    at 1 and `displayTemps()` at 2, to simplify things. These functions are called
    in `void loop()`, which is quite simple. Thus, you see one reason to create your
    own functions: to make your sketches easier to understand and the code more modular
    and possibly reusable.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例中发生了很多事情，但我们创建了两个函数，`findTemps()` 在 1 处和 `displayTemps()` 在 2 处，以简化问题。这些函数在
    `void loop()` 中被调用，`void loop()` 本身很简单。因此，你可以看到创建自定义函数的一个原因：使得你的草图更容易理解，代码也更模块化，甚至可能可重用。
- en: After uploading the sketch, wait a few seconds and then display the Serial Monitor.
    The temperature in your area should be displayed in a similar manner to that shown
    in [Figure 5-4](#figure5-4).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 上传草图后，等待几秒钟，然后打开串口监视器。你所在区域的温度应该以类似 [图 5-4](#figure5-4) 所示的方式显示。
- en: '![f05004](image_fi/500587c05/f05004.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![f05004](image_fi/500587c05/f05004.png)'
- en: 'Figure 5-4: Result from Project 12'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-4：项目 12 的结果
- en: Debugging with the Serial Monitor
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用串口监视器进行调试
- en: 'You can use the Serial Monitor to help *debug* (locate and fix errors in) your
    sketches. For example, if you insert `Serial.println();` statements in your sketch
    containing brief notes about their location in the sketch, then you can see when
    the Arduino passes each statement. For example, you might use the line:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用串口监视器帮助*调试*（定位和修复草图中的错误）。例如，如果你在草图中插入 `Serial.println();` 语句，并包含有关其位置的简短注释，那么你可以看到
    Arduino 是否经过了每个语句的位置。例如，你可能会使用以下代码：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: inside the function `findTemps()` to let you know when the Arduino is running
    that function.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `findTemps()` 函数内插入语句，让你知道 Arduino 正在运行该函数。
- en: Making Decisions with while Statements
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `while` 语句进行决策
- en: You can use `while` statements in a sketch to repeat instructions, as long as
    (*while*) a given condition is true.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在草图中使用 `while` 语句来重复执行指令，只要给定的条件（*while*）为真。
- en: while
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: while
- en: The condition is always tested *before* the code in the `while` statement is
    executed. For example, `while ( temperature > 30 )` will test whether the value
    of `temperature` is greater than 30\. You can use any comparison operator, or
    Boolean variable, within the parentheses to create the condition.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 条件总是在执行 `while` 语句中的代码之前进行测试。例如，`while ( temperature > 30 )` 将测试 `temperature`
    的值是否大于 30。你可以在括号内使用任何比较运算符或布尔变量来创建条件。
- en: 'In the following sketch, the Arduino will count up to 10 seconds and then continue
    with its program:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下草图中，Arduino 会计数到 10 秒，然后继续其程序：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This sketch starts by setting the variable `a` to `0`. It then checks that the
    value of `a` is less than `10` (`while ( a < 10 )`), and, if so, adds 1 to that
    value, waits 1 second (`delay(1000)`), and checks the value again. It repeats
    the process until `a` has a value of 10\. Once `a` is equal to 10, the comparison
    in the `while` statement is false; therefore, the Arduino will continue on with
    the sketch after the `while` loop brackets.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图首先将变量 `a` 设置为 `0`。然后它检查 `a` 的值是否小于 `10`（`while ( a < 10 )`），如果是，它会将该值加 1，等待
    1 秒钟（`delay(1000)`），然后再次检查该值。它会重复这个过程，直到 `a` 的值为 10。一旦 `a` 等于 10，`while` 语句中的条件为假；因此，Arduino
    会继续执行 `while` 循环后的代码。
- en: do-while
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: do-while
- en: 'In contrast to `while`, the `do-while` structure places the test *after* execution
    of the code within the `do-while` statement. Here’s an example:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 与`while`不同，`do-while`结构将测试放在`do-while`语句内部代码执行之后。以下是一个示例：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this case, the code between the curly brackets will execute *before* the
    conditions of the test (`while ( a < 100 )`) have been checked. As a result, even
    if the conditions are not met, the loop will run once. You’ll decide whether to
    use a `while` or a `do-while` statement when designing your particular project.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，大括号之间的代码会在测试条件（`while ( a < 100 )`）检查之前执行。结果，即使条件未满足，循环也会运行一次。你将在设计具体项目时决定是使用`while`语句还是`do-while`语句。
- en: Sending Data from the Serial Monitor to the Arduino
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从串口监视器向 Arduino 发送数据
- en: To send data from the Serial Monitor to the Arduino, we need the Arduino to
    listen to the *serial buffer*—the part of the Arduino that receives data from
    the outside world via the serial pins (digital 0 and 1) that are also connected
    to the USB interface to your computer. The serial buffer holds incoming data from
    the Serial Monitor’s input window.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要从串口监视器向 Arduino 发送数据，我们需要让 Arduino 监听*串口缓冲区*——这是 Arduino 用来通过串口引脚（数字引脚 0 和
    1）接收外部数据的部分，这些串口引脚也与计算机的 USB 接口相连接。串口缓冲区存储来自串口监视器输入窗口的传入数据。
- en: 'Project #13: Multiplying a Number by Two'
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #13：将数字乘以二'
- en: To demonstrate the process of sending and receiving data via the Serial Monitor,
    let’s dissect the following sketch. This sketch accepts a single digit from the
    user, multiplies it by 2, and then displays the result in the Serial Monitor’s
    output window. After you have uploaded the sketch, when you open the Serial Monitor
    window, select **No Line Ending** in the window’s drop-down menu. When entering
    data in the Serial Monitor, you need to press CTRL-ENTER to send the data to the
    Arduino (not just ENTER).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示通过串口监视器发送和接收数据的过程，让我们分析以下草图。该草图接受用户输入的单个数字，将其乘以 2，然后将结果显示在串口监视器的输出窗口中。在上传草图后，当你打开串口监视器窗口时，选择窗口下拉菜单中的**无行结束**选项。在串口监视器中输入数据时，你需要按
    CTRL-ENTER 来将数据发送到 Arduino（而不仅仅是按 ENTER）。
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `Serial.available()` test in the first `while` statement at 1 returns `0`
    if the user has not yet entered anything into the Serial Monitor. In other words,
    it tells the Arduino, “Do nothing until the user enters something.” The next `while`
    statement at 2 detects the number in the serial buffer and converts the text code
    into an integer. Afterward, the Arduino displays the number from the serial buffer
    and the multiplication results.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`while`语句中的`Serial.available()`测试在 1 处返回 `0`，表示用户尚未向串口监视器输入任何内容。换句话说，它告诉
    Arduino：“在用户输入数据之前，不做任何操作。”接下来的`while`语句在 2 处检测串口缓冲区中的数字，并将文本代码转换为整数。之后，Arduino
    会显示来自串口缓冲区的数字和乘法结果。
- en: The `Serial.flush()` function at the start of the sketch clears the serial buffer
    just in case any unexpected data is in it, readying it to receive the next available
    data. [Figure 5-5](#figure5-5) shows the Serial Monitor window after the sketch
    has run.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`Serial.flush()`函数在草图开始时清空串口缓冲区，以防其中有任何意外数据，从而准备好接收下一个可用数据。[图 5-5](#figure5-5)展示了草图运行后串口监视器窗口的样子。'
- en: '![f05005](image_fi/500587c05/f05005.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![f05005](image_fi/500587c05/f05005.png)'
- en: 'Figure 5-5: Sample input and output for Project 13'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-5：项目 13 的输入输出示例
- en: Although you can now enter numerical data into the Serial Monitor for the Arduino
    to process, it currently only accepts inputs of one digit. Even without this restriction,
    using integer variables limits the range of numbers available. We can use `long`
    variables to increase this range, as discussed next.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管现在可以将数值数据输入到串口监视器中让 Arduino 进行处理，但它目前仅接受一位数字的输入。即使没有这个限制，使用整数变量也会限制可用数字的范围。我们可以使用`long`类型变量来增加这个范围，下面将讨论这一点。
- en: long Variables
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: long 类型变量
- en: To use the Serial Monitor to accept numbers with more than one digit, we need
    to add some new code to our sketch, as you’ll see shortly. When working with larger
    numbers, however, the `int` variable type can be limiting because it has a maximum
    value of 32,767\. Fortunately, we can extend this limitation by using the `long`
    variable type. A `long` variable is a whole number between −2,147,483,648 and
    2,147,483,647, a much larger range than that of an `int` variable (−32,768 to
    32,767).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让串口监视器接收多位数字，我们需要在程序中添加一些新的代码，稍后你会看到。然而，在处理更大的数字时，`int`变量类型可能会有所限制，因为它的最大值为32,767。幸运的是，我们可以通过使用`long`变量类型来扩展这一限制。`long`变量是一个整数，范围在−2,147,483,648到2,147,483,647之间，比`int`变量的范围（−32,768到32,767）要大得多。
- en: 'Project #14: Using long Variables'
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #14：使用long变量'
- en: 'We’ll use the Serial Monitor to accept `long` variables and numbers larger
    than one digit. This sketch accepts a number of many digits, multiplies that number
    by 2, and then returns the result to the Serial Monitor:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用串口监视器来接受`long`变量和大于一位的数字。这个程序接受一个多位数，将其乘以2，然后将结果返回到串口监视器：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this example, two `while` loops allow the Arduino to accept multiple digits
    from the Serial Monitor. When the first digit is entered (the leftmost digit of
    the number entered), it is converted to a number and then added to the total variable
    `number`. If that’s the only digit, the sketch moves on. If another digit is entered
    (for example, the 2 in 42), the total is multiplied by 10 to shift the first digit
    to the left, and then the new digit is added to the total. This cycle repeats
    until the rightmost digit has been added to the total. Don’t forget to select
    **No Line Ending** in the Serial Monitor window.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，两个`while`循环允许Arduino从串口监视器接收多个数字。当输入第一个数字时（输入数字的最左边一位），它会被转换成数字并加到总变量`number`中。如果这是唯一的数字，程序就继续执行。如果输入了另一个数字（例如，42中的2），总数会乘以10，移动第一个数字到左边，然后将新的数字加到总数中。这个循环会一直重复，直到最右边的数字被加到总数中。不要忘记在串口监视器窗口选择**无行结束符**。
- en: '[Figure 5-6](#figure5-6) shows the input and output of this sketch.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 5-6](#figure5-6)显示了这个程序的输入和输出。'
- en: '![f05006](image_fi/500587c05/f05006.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![f05006](image_fi/500587c05/f05006.png)'
- en: 'Figure 5-6: Sample input and output from Project 14'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-6：项目14的输入和输出示例
- en: Looking Ahead
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展望未来
- en: The ability to create your own functions is an important skill that will simplify
    your sketches and save you time and effort. You’ll make good use of this knowledge
    in the next chapter, where you’ll learn how to do more things with math on the
    Arduino, including making a game.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自定义函数的能力是一项重要的技能，它将简化你的程序并节省时间和精力。你将在下一章中很好地运用这项知识，学习如何在Arduino上做更多的数学运算，包括制作一个游戏。
