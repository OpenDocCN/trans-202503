- en: '**1**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1**'
- en: '**HISTORICAL ARCHITECTURES**'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**历史建筑**'
- en: '![Image](../images/f0003-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0003-01.jpg)'
- en: Computer science is a much older subject than many people think. This chapter
    will begin 40,000 years ago and progress to the present day. A modern microchip
    may seem impenetrable and alien at first sight, but if you know the history, you
    can understand its smaller components in terms of structures that have developed
    gradually over thousands of years.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机科学的历史比许多人想象的要悠久得多。本章将从 40,000 年前开始，直到今天为止。现代微芯片乍一看可能显得难以理解且陌生，但如果了解其历史，你就能通过逐渐发展了几千年的结构来理解它的各个小组成部分。
- en: There are a number of other reasons to study the history of the field. Seeing
    the deep history of computer science gives us more credibility and authority as
    a field distinct from, say, mathematics or engineering. Seeing how ideas have
    evolved gradually by building on one another can also protect us from myths of
    the “lone genius” and reveal how such people were perhaps just like ourselves.
    Finally, following the general trends through “the arc of history” not only explains
    how we got to where we are but can also suggest where we’re headed next, to help
    us predict, or create, the future.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 学习该领域历史的原因还有很多。了解计算机科学的悠久历史能为我们作为一个独立于数学或工程等领域的学科增加更多的可信度和权威性。看到思想是如何逐步发展的，通过彼此的积累，也能帮助我们摆脱“孤独天才”的神话，揭示这些人可能和我们一样。最后，追溯“历史的轨迹”不仅能解释我们是如何走到今天的，还能预测我们未来的方向，帮助我们预测或创造未来。
- en: What Is a Computer?
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是计算机？
- en: When we imagine “a computer” today, we probably think of a device such as a
    desktop PC, game console, or smartphone. But those aren’t the only machines humans
    have used for calculating and computing. To trace the history of computers, we
    first need to decide what counts as a computer and how computers are different
    from mere calculators or calculating machines. This is a surprisingly difficult
    question, one that is still argued over. My own rule of thumb for deciding if
    something is a computer is, Can you program *Space Invaders* on it? A simple calculator
    can’t do this, so it isn’t a computer; a programmable calculator usually can,
    so it is a computer.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们今天想象“计算机”时，可能会想到台式电脑、游戏机或智能手机等设备。但这些并不是人类唯一用于计算的机器。要追溯计算机的历史，我们首先需要决定什么算作计算机，以及计算机与普通计算器或计算机械有什么不同。这是一个出乎意料的难题，至今仍有争议。我的判断标准是：你能在上面编程
    *太空入侵者* 吗？一个简单的计算器做不到这一点，所以它不是计算机；而一个可编程的计算器通常可以，因此它是计算机。
- en: Let’s look at some further concepts that are often suggested for defining computers.
    Some sources—including the *Oxford English Dictionary*—require computers to be
    electronic. But similar machines can be made out of other substrates, such as
    water. Consider *MONIAC*, which stands for Monetary National Income Analogue Computer,
    a pun on the earlier ENIAC computer that we’ll examine later in the chapter. Built
    in 1949, and shown in [Figure 1-1](ch01.xhtml#ch01fig1), MONIAC was an analog
    water computer used to simulate the flow of money through the economy and to illustrate
    the effects of economic interventions on an economic model.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些常常用来定义计算机的概念。一些资料——包括*牛津英语词典*——要求计算机必须是电子设备。但类似的机器也可以用其他材料制造，比如水。考虑一下*MONIAC*，即货币国民收入模拟计算机，这是对稍后我们将在本章中讨论的
    ENIAC 计算机的双关语。MONIAC 于 1949 年建成，见图 [1-1](ch01.xhtml#ch01fig1)，它是一台模拟水计算机，用于模拟货币在经济中的流动，并展示经济干预对经济模型的影响。
- en: '![Image](../images/f0004-01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0004-01.jpg)'
- en: '*Figure 1-1: The MONIAC water computer and its creator, Bill Phillips*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-1：MONIAC 水计算机及其创造者 Bill Phillips*'
- en: MONIAC allowed you to increase the interest rate and observe the effects on
    unemployment. Tanks of water showed the positions of money in sectors of the economy
    such as the central bank, savings, and investment, according to the theory of
    economics built into the machine.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: MONIAC 让你可以调节利率，并观察其对失业率的影响。水箱展示了经济中各个部门（如中央银行、储蓄和投资）中资金的位置，这是根据机器内置的经济学理论来设计的。
- en: Some people argue computers must be *digital*, as opposed to *analog*. A digital
    machine is one that represents data using *digits*, discrete sets of symbols such
    as the binary digits 0 and 1\. In contrast, an analog machine has an infinite,
    continuous set of possible states, such as the amounts of water in MONIAC’s tanks,
    making MONIAC an analog machine.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人认为计算机必须是*数字*的，而非*模拟*的。数字机器是通过*数字*表示数据的机器，数字是离散的符号集，例如二进制数字0和1。与此相对，模拟机器具有无限、连续的可能状态集，例如
    MONIAC 储液池中的水量，这使得 MONIAC 成为一台模拟机器。
- en: Where does MONIAC stand regarding my original *Space Invaders* test? It only
    computes results for a single economic model, although it might be able to run
    other economic models if we were able to reconfigure some of the tubes and reservoirs
    to have different sizes and connections. By extension, perhaps MONIAC could implement
    *any* computation, such as running *Space Invaders*, through more severe reconfigurations
    of this nature. But would we then have the same computer in a new configuration,
    or would we have a new, different machine that still only computes one other,
    different, thing? In other words, is MONIAC *reprogrammable*?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: MONIAC 在我原本的*太空侵略者*测试中处于什么位置？它只计算单一经济模型的结果，尽管如果我们能重新配置一些管道和储液池，使它们具有不同的尺寸和连接方式，它也许能运行其他经济模型。从这个角度来看，也许
    MONIAC 可以通过更为严苛的这种重新配置来实现*任何*计算任务，比如运行*太空侵略者*。但那时我们是否依然会有一台在新配置下的相同计算机，还是会得到一台新的、不同的机器，只能计算另一个不同的任务？换句话说，MONIAC
    是*可重新编程*的吗？
- en: I’ve been using *Space Invaders* as a test program, but it’s tempting to say
    that for something to be a computer, you must be able to reprogram it to do *anything*.
    However, computation theory shows that this can’t be used as a definition. Given
    any candidate computer, it’s always possible to find problems it can’t solve.
    These are usually problems about predicting the candidate computer’s own future
    behavior, which can lead it into an infinite loop.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直在使用*太空侵略者*作为测试程序，但很容易得出结论：为了让某物成为一台计算机，它必须能够重新编程来做*任何事情*。然而，计算理论表明，这不能作为定义。对于任何候选计算机，总是可以找到它无法解决的问题。这些问题通常是关于预测候选计算机自身未来行为的问题，这可能会导致它进入无限循环。
- en: 'Diving a little deeper into computation theory, we get *Church’s thesis*, a
    more rigorous definition of a computer that most modern computer scientists agree
    with. It can be paraphrased as:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 深入一些计算理论，我们可以得到*丘奇命题*，它是对计算机的更严谨的定义，现代计算机科学家普遍认同。它可以这样表述：
- en: A computer is a machine that can simulate any other machine, given as much memory
    as it asks for.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机是一种可以模拟任何其他机器的机器，只要提供足够的内存。
- en: 'We’ll call machines that satisfy Church’s thesis *Church computers*. In particular,
    machines clearly exist that can do the following, so a Church computer must also
    be able to perform these tasks:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将满足丘奇命题的机器称为*丘奇计算机*。特别地，显然存在能够完成以下任务的机器，因此丘奇计算机也必须能够执行这些任务：
- en: Read, write, and process data
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读写和处理数据
- en: Read, write, and execute programs
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读写并执行程序
- en: Add (and hence do arithmetic)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加法（因此能够进行算术运算）
- en: Jump (`goto` statements)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳转（`goto`语句）
- en: Branch (`if` statements)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分支（`if`语句）
- en: 'We can now see that the *Space Invaders* definition is a reasonable approximation
    of Church’s thesis in many cases: while *Space Invaders* is a simplistic video
    game, it happens to require all of the above tasks, which are also the basic ingredients
    of many other computational tasks and machines. Hence, a machine that can be *reprogrammed*
    (rather than hardwired) to play *Space Invaders* is usually powerful enough to
    simulate any other machine, too (as long as we provide as much extra memory as
    it asks for).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以看到，*太空侵略者*的定义在很多情况下是丘奇命题的合理近似：虽然*太空侵略者*是一个简单的电子游戏，但它恰好需要完成所有上述任务，这些任务也是许多其他计算任务和机器的基本组成部分。因此，一台能够*重新编程*（而不是硬接线）来玩*太空侵略者*的机器，通常也足够强大，能够模拟任何其他机器（只要我们提供它所要求的足够内存）。
- en: The rest of this chapter traces the history of computers and computerlike devices
    in chronological order, starting in the Stone Age. As you read, ask yourself who
    invented the first computer, and note the point where you think the computer was
    invented. People often argue for drawing this line in different places, based
    on their own definitions of what counts as a computer. Where will *you* draw the
    line, and why?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的其余部分按时间顺序追溯计算机及计算机类设备的历史，从石器时代开始。在阅读时，问问自己是谁发明了第一台计算机，并记下你认为计算机发明的时刻。人们常常基于自己对计算机定义的不同，争论应该在什么地方划定这条界限。*你*会在哪里划定这条界限，为什么？
- en: Before the Industrial Revolution
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工业革命之前
- en: In this section, we’ll take a look at the various preindustrial machines we
    may or may not consider to be computers. In doing so, we’ll see that humans have
    been using mechanisms resembling computers for longer than we might have thought.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本节我们将探讨各种可能或不可能被视为计算机的前工业机器。在此过程中，我们将看到人类使用类似计算机的机制的历史比我们想象的要长。
- en: '*The Stone Age*'
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*石器时代*'
- en: Our anatomical species, *Homo sapiens*, is around 200,000 years old, but it’s
    widely believed that we lacked modern intelligence until the cognitive revolution
    of around 40,000 BCE. We don’t know exactly how this happened. One current theory
    is that a single genetic mutation in the FOXP2 gene occurred and was selected
    by the extreme evolutionary pressures of the Ice Age. This suddenly enabled the
    brain to form arbitrary new hierarchical concepts, in turn giving rise to language
    and technology. According to this theory, from then on humans were as intelligent
    as we are now. They would have been capable of learning, say, quantum computing,
    had they been given access to modern facilities and information.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的解剖学物种*智人*大约有20万年的历史，但广泛认为我们在大约公元前40,000年的认知革命之前缺乏现代智力。我们并不确切知道这一过程是如何发生的。一种当前的理论认为，FOXP2基因中的一次单一基因突变发生，并在冰河时期的极端进化压力下被选择。这突然使大脑能够形成任意新的层次化概念，从而催生了语言和技术。根据这一理论，从那时起人类的智力就和我们现在一样。假如他们能接触到现代设施和信息，他们应该能够学习，比如量子计算。
- en: One marker of this shift may be the *Lebombo bone*, shown in [Figure 1-2](ch01.xhtml#ch01fig2)—a
    bone with carved notches that may have been used as a tally stick around 40,000
    BCE. In a tally, one mark represents one physical thing. Perhaps these notches
    signified animals, items of food, favors owed by one person to another, or days
    to time some hunting or social project.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这种转变的一个标志可能是*莱邦博骨*，见于[图1-2](ch01.xhtml#ch01fig2)—这是一块有刻痕的骨头，可能在公元前40,000年左右用作计数棒。在计数中，每一刻痕代表一个物理对象。也许这些刻痕表示动物、食物、某人欠另一个人的恩惠，或者用于记录某次狩猎或社交项目的天数。
- en: '![Image](../images/f0006-01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0006-01.jpg)'
- en: '*Figure 1-2: The Lebombo bone*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-2：莱邦博骨*'
- en: The *Ishango bone*, shown in [Figure 1-3](ch01.xhtml#ch01fig3), is another bone
    containing human-made tally-like marks, dating to later in the Ice Age, around
    20,000 BCE. Unlike the Lebombo bone, the Ishango bone marks appear to be grouped
    into tally-like clusters of mostly prime numbers between 3 and 19, and these clusters
    are grouped into three lines that sum to 60 or 48.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*伊尚戈骨*，见于[图1-3](ch01.xhtml#ch01fig3)，是另一块含有人类刻画的类似计数标记的骨头，日期大约在冰河时代晚期，公元前20,000年左右。与莱邦博骨不同，伊尚戈骨上的标记似乎被分成了以3到19之间的素数为主的计数簇，并且这些簇被分为三行，分别总和为60或48。'
- en: As with the Lebombo bone, it’s possible that the marks in the Ishango bone are
    at purely random locations and were made for some physical purpose, such as to
    improve hand grip. But several authors have studied the Ishango bone’s patterns
    and argued that they functioned as a tally, an aid for calculation, a lunar agricultural
    calendar or menstrual cycle calendar, or most speculatively, a table of prime
    numbers. The totals of 60 and 48 are multiples of 12, and 12 is known to have
    been the original base for arithmetic in later civilizations, before we shifted
    to base 10.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 和莱邦博骨一样，伊尚戈骨上的标记可能完全是随机的位置，并且是为了某种物理目的而制作的，比如改善手部抓握。但几位作者研究了伊尚戈骨的模式，认为这些标记起到了计数、辅助计算、农历或月经周期日历的作用，或者更具推测性地，它是一个素数表。60和48的总和是12的倍数，而12被认为是后期文明中算术的原始基础，直到我们转向了十进制。
- en: '![Image](../images/f0007-01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0007-01.jpg)'
- en: '*Figure 1-3: The Ishango bone, argued by some to extend from tallying to calculation*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-3：伊尚戈骨，一些人认为它从计数发展到计算*'
- en: The Lebombo bone appears to be an example of data representation. Arguably,
    it may have been used for a simple form of calculation such as adding one to its
    total each time a new mark was made. Some interpretations of the Ishango bone
    suggest its use in more advanced calculations, perhaps interactively, like using
    a pen and paper to perform and keep track of multiple steps of a math problem.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 莱博姆博骨可能是数据表示的一个例子。可以说，它可能用于一种简单的计算方式，比如每次新刻一个标记时就将总数加一。对伊香戈骨的某些解释表明它可能用于更复杂的计算，也许是互动式的，就像使用钢笔和纸来执行并跟踪数学问题的多个步骤。
- en: Could you program a bone to play *Space Invaders*? You could devise a set of
    rules for a human to follow, telling them to make scratches to update representations
    of the game characters. Gameplay would be quite slow, and the human would have
    to be there to perform the updates. There’s no evidence that humans ever used
    bones in this programmable way—though maybe one day another bone could be found
    and its scratches decoded as instructions for a human operator to follow.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你能编程让一根骨头玩 *太空入侵者* 吗？你可以设计一组规则让人类按照这些规则做刻痕来更新游戏角色的表示。游戏进程会非常缓慢，而且人类必须在那里进行更新。没有证据表明人类曾以这种可编程的方式使用过骨头——虽然或许有一天会发现另一根骨头，并将其刻痕解码为供人类操作员遵循的指令。
- en: '*The Bronze Age*'
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*青铜时代*'
- en: The ice melted around 4000 BCE, enabling the first cities to grow. Cities required
    new and larger forms of organization, such as keeping track of trading and taxes.
    To enable this, by 3000 BCE the Sumerian city culture in Mesopotamia (modern-day
    Iraq) developed the first writing system, and by 2500 BCE it possessed the first
    indisputable calculating machine, the abacus ([Figure 1-4](ch01.xhtml#ch01fig4)).
    The word *abacus* means “sand box,” which suggests that before this date the same
    machinery was implemented using simple rocks in the sand. The oldest abaci we
    find in archaeology are the more advanced ones made from wood and beads.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 大约公元前4000年，冰雪融化，促使了第一个城市的诞生。城市的发展需要新的、更大的组织形式，比如记录贸易和税收。为了实现这一点，公元前3000年，美索不达米亚的苏美尔城市文化（今伊拉克）开发出了最早的文字系统，公元前2500年，它拥有了第一个无可争议的计算工具——算盘（[图
    1-4](ch01.xhtml#ch01fig4)）。*算盘* 这个词意为“沙箱”，这表明在此之前，相同的机制可能是使用沙子中的简单石块来实现的。我们在考古学中发现的最古老的算盘是那些由木头和珠子制成的更为先进的版本。
- en: '![Image](../images/f0008-01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0008-01.jpg)'
- en: '*Figure 1-4: An abacus*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-4：算盘*'
- en: In its usual usage, the state of the abacus in [Figure 1-4](ch01.xhtml#ch01fig4)
    represents the (decimal, natural) number 070710678\. There are nine columns, each
    representing one of the digits in this number. Each column is split into a lower
    box containing five beads and an upper box containing two beads. The default position
    for the beads in the lower box is down, and the default position for beads in
    the upper box is up. In this state, a column represents the digit 0\. Each bead
    pushed up from the bottom to the top of the lower box is worth 1\. Each bead pushed
    down from the top to the bottom of the upper box is worth 5.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在通常的使用中，[图 1-4](ch01.xhtml#ch01fig4)中的算盘状态表示（十进制，自然数）070710678。共有九列，每一列代表该数字中的一个数字。每一列被分为下部盒子，里面有五颗珠子，上部盒子里有两颗珠子。下部盒子中珠子的默认位置是下方，而上部盒子中珠子的默认位置是上方。在这种状态下，一列表示数字
    0。每颗从下往上推到下部盒子顶部的珠子值为 1。每颗从上往下推到上部盒子底部的珠子值为 5。
- en: To add 1 to a number on the abacus (that is, *increment* it), you raise one
    bead from the lower box of the rightmost column. If all five beads in a column’s
    lower box are raised, you push them all back down and replace them by lowering
    one of the beads in the upper box in the same column. If both upper beads are
    lowered, you push them back up and replace them by raising one bead from the lower
    box in the column on its left. Moving data from a column to the one on its left
    is known as a *carry* operation.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要在算盘上加 1（即 *增量*），你需要从最右列的下部盒子中抬起一颗珠子。如果某一列下部盒子中的所有五颗珠子都被抬起，你就把它们都推回去，并通过将同一列上部盒子中的一颗珠子下移来替代它们。如果上部盒子的两颗珠子都被下移，你就把它们推回去，并通过从左边相邻列的下部盒子中抬起一颗珠子来替代它们。将数据从一列移到左边的列称为
    *进位* 操作。
- en: To add two numbers, *a* + *b*, you first set up the abacus to represent the
    digits of *a*. You then perform *b* increments as above. The state of the abacus
    then represents the result.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要将两个数字 *a* + *b* 相加，你首先设置算盘来表示 *a* 的数字。然后你执行 *b* 次增量操作，如上所述。然后，算盘的状态就代表了结果。
- en: This style of calculation—where the first number is “loaded onto” the device
    and the second is “added into” it, leaving only the final result as the state
    of the system—is known as an *accumulator architecture*, and it’s still in common
    use today. It “accumulates” the result of a series of calculations; for example,
    we can add a list of many numbers together by adding each of them in turn into
    the state and seeing the latest accumulated total after each addition.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这种计算方式——其中第一个数字“加载”到设备上，第二个数字则“加到”其中，只留下最终结果作为系统的状态——被称为*累加器架构*，直到今天仍然广泛使用。它“累积”一系列计算的结果；例如，我们可以通过依次将每个数字加到状态中，并在每次加法后查看最新的累积总和，从而将一系列数字加在一起。
- en: '**NOTE**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The abacus in this example uses decimal digits for familiarity. The original
    Sumerian version used base 12.*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*本例中的算盘使用十进制数字以便理解。原始的苏美尔版本使用的是12进制。*'
- en: The concept of the algorithm dates from this time. Calculations written on clay
    tablets, such as those in [Figure 1-5](ch01.xhtml#ch01fig5), show that number-literate
    people at this time thought in terms of computation rather than mathematics, being
    taught to perform algorithms for arithmetic operations and carrying them out for
    practice, as opposed to doing proofs.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 算法的概念可以追溯到这一时期。刻在粘土板上的计算，例如[图1-5](ch01.xhtml#ch01fig5)中的那些，显示出当时具备数字识别能力的人们更多是以计算的方式思考，而非数学，被教导执行算术运算的算法并进行实践，而不是进行证明。
- en: '![Image](../images/f0009-01.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0009-01.jpg)'
- en: '*Figure 1-5: A tablet showing the steps of a long division algorithm*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-5：显示长除法算法步骤的平板*'
- en: The clay tablets show lines of step-by-step arithmetic that may have been performed
    using the tablets themselves as data storage. Or the tablets may have been used
    to notate the states of an abacus for teaching purposes.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 黏土板上显示了一步步的算术运算，可能是利用这些板子本身作为数据存储来执行的。或者，这些板子可能是用来记载算盘的状态，以便教学使用。
- en: The abacus was—and in a few places still is—most often used for adding numbers,
    such as summing the prices of items in a shopping basket, but other ancient abacus
    arithmetic algorithms are also known, including for subtraction, multiplication,
    and long division. These were performed similarly to their modern pen-and-paper
    equivalents. Modern enthusiasts (you can search for them on YouTube) have also
    shown how to use the abacus for more advanced algorithms such as finding square
    roots and computing the digits of *π*. As these algorithms get more complex, the
    memory of the abacus often needs to be extended with extra columns. Like the Stone
    Age bones, the abacus could be used as the data store for *any* algorithm if a
    human is instructed what actions to perform on it. If you want to argue that it’s
    a computer, you may again need to consider the role of the human.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 算盘曾经——并且在一些地方仍然——最常用于加法运算，例如求购物车中物品价格的总和，但也已知有其他古代算盘算法，包括减法、乘法和长除法。这些算法的执行方式与现代的笔纸运算类似。现代的爱好者（你可以在YouTube上找到他们）也展示了如何用算盘进行更复杂的算法，如求平方根和计算*π*的数字。随着这些算法变得越来越复杂，算盘的记忆往往需要通过增加额外的列来扩展。就像石器时代的骨头一样，如果告诉人类在算盘上执行哪些操作，它可以用作*任何*算法的数据存储。如果你想争辩说它是计算机，可能还需要考虑人类在其中的角色。
- en: '*The Iron Age*'
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*铁器时代*'
- en: 'The Bronze Age city civilizations of Mesopotamia and its neighbors collapsed,
    mysteriously, around 1200 BCE. They were followed by a “dark age” period, until
    classical ancient Greece arose around 500 BCE to 300 BCE: the time of Pythagoras,
    Plato, and Aristotle. Greek power was gradually replaced by the Roman Republic
    and Roman Empire from around 300 BCE to 400 CE.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 美索不达米亚及其邻国的青铜时代城市文明在公元前1200年左右神秘地崩溃。随后进入了一个“黑暗时代”，直到公元前500年到公元前300年左右古典希腊崛起：这是毕达哥拉斯、柏拉图和亚里士多德的时代。从公元前300年到公元400年，希腊的力量逐渐被罗马共和国和罗马帝国取代。
- en: The Antikythera mechanism ([Figure 1-6](ch01.xhtml#ch01fig6)) dates from this
    period, around 100 BCE. It was found in 1901 in a Mediterranean shipwreck; the
    sunken ship appeared to be on its way from Greece to Rome, with the mechanism
    for sale or as tribute. The mechanism was only understood and reverse engineered
    in 2008\. We now know that it was a mechanical, clockwork analog machine used
    to predict astronomical (and likely astrological) events, including five planet
    positions, moon phases, and the timings of eclipses and the Olympic Games. It
    consisted of 37 bronze gears, and the user turned a handle to simulate the future
    course of their states. The results were displayed on clock faces, computed by
    the ratios of mechanical gears. Enthusiasts recently rebuilt a functioning version
    using LEGO ([Figure 1-6](ch01.xhtml#ch01fig6)).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 安提凯希拉机制（[图1-6](ch01.xhtml#ch01fig6)）的历史可以追溯到公元前100年左右。它是在1901年从一艘沉船中被发现的；这艘沉船似乎是从希腊驶往罗马，机制可能是要出售或作为贡品。直到2008年，人们才真正理解并逆向工程了这个机制。我们现在知道，它是一个机械的、钟表式的模拟机器，用于预测天文（并且可能是占星）事件，包括五颗行星的位置、月亮的相位、日食的时机以及奥林匹克运动会的时间安排。它由37个铜齿轮组成，用户通过转动一个手柄来模拟未来的天体运动。结果通过机械齿轮的比例计算并显示在时钟面上。最近，爱好者们使用乐高重建了一个可以正常工作的版本（[图1-6](ch01.xhtml#ch01fig6)）。
- en: '![Image](../images/f0010-01.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0010-01.jpg)'
- en: '*Figure 1-6: The Antikythera mechanism remains, as found in a Mediterranean
    shipwreck (left), and a reconstructed Antikythera mechanism using LEGO (right)*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-6：安提凯希拉机制的遗物，发现于地中海的沉船（左），以及使用乐高重建的安提凯希拉机制（右）*'
- en: '*Odometers* were long-range distance-measuring machines that the Greeks and
    Romans used to survey and map their empires. There is indirect evidence of their
    use from around 300 BCE due to the existence of very accurate distance measurements
    that would have been hard to obtain any other way. The reconstruction in [Figure
    1-7](ch01.xhtml#ch01fig7) is based on direct archaeological remains from around
    50 CE.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*里程表*是古希腊和古罗马用来测量远距离的工具，用于勘测和绘制他们的帝国地图。大约公元前300年左右有间接证据表明它们被使用，因为存在一些非常精确的距离测量数据，这些数据用其他方法难以获得。图[1-7](ch01.xhtml#ch01fig7)中的重建是基于公元50年左右的直接考古遗物。'
- en: This type of odometer worked similarly to the measuring wheels you might have
    used in elementary school that clicked each time they were pushed a certain distance,
    typically 1 yard or 1 meter. It is also related to modern odometers used in cars
    and robotics.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这种里程表的工作原理类似于你在小学可能用过的测量轮，每当推动一定的距离时就会“咔哒”作响，通常是1码或1米。它也与现代汽车和机器人使用的里程表有关。
- en: '![Image](../images/f0011-01.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0011-01.jpg)'
- en: '*Figure 1-7: A Roman odometry cart*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-7：一辆罗马里程测量车*'
- en: The odometer is pulled by a horse, like a cart. There are a number of metal
    balls stored in cavities in a circular wooden gear. One of the wheels has a peg
    attached so that once per rotation it taps and rotates the gear by a small fixed
    angle. A ball-sized hole under one position of the gear allows a ball above it
    to fall out of its cavity and into a collecting box below. The total distance
    traveled is thus logged by the number of balls in the counting box at the end
    of the trip.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 里程表由一匹马拉动，就像一辆车。多个金属球存放在一个圆形木齿轮的腔体内。其中一个轮子上有一个插销，轮子每转动一次，插销就会轻轻地碰击并使齿轮转动一个固定的小角度。齿轮下方的一个与球大小相当的孔允许一个球从齿轮的腔体中掉落到下面的收集箱里。这样，旅行结束时，记录的总行程就是通过计数箱中球的数量来统计的。
- en: 'Are these machines computers? There are clearly notions of data being used
    to represent objects in the world, as well as forms of automation and calculation.
    But like MONIAC, each machine does only one thing: predict eclipses or measure
    distance. You couldn’t easily reprogram either to play *Space Invaders*.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这些机器是计算机吗？显然它们涉及到用数据表示世界中的物体，并且有自动化和计算的形式。但是，就像MONIAC一样，每台机器只能做一件事：预测日食或测量距离。你不可能轻易地重新编程它们来玩*太空入侵者*。
- en: 'Like MONIAC, the Antikythera mechanism is an analog machine: its gears rotate
    continuously and can be in any position. The odometer, in contrast, is digital,
    like the abacus. Its gear advances only by a discrete amount with each “click”
    as the peg passes it, and the collecting box always holds a discrete number of
    balls. Unlike the abacus, however, the odometer is automatic; it doesn’t require
    a human operator, only a horse as a source of power.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 与MONIAC类似，安提基特拉机制是一个模拟机器：它的齿轮持续旋转，可以处于任何位置。相比之下，计程器是数字化的，像算盘一样。每次“点击”时，当插销通过时，它的齿轮只会前进一个离散的单位，且收集箱总是保持一个离散数量的球。然而，不同于算盘，计程器是自动的；它不需要人工操作，只需要马作为动力源。
- en: You might be able to reprogram the Antikythera mechanism—and with some creativity,
    the odometer—if you were allowed to completely reconfigure all the gears, including
    adding and removing gears of arbitrary sizes in arbitrary locations. Then you
    could try to represent and simulate other physical systems or perform other calculations.
    As with MONIAC, some consider physically reconfiguring the hardware in this way
    to be cheating. They would argue that this creates a new, different machine, rather
    than a different program running on the original machine.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果允许你完全重新配置所有齿轮，包括添加和移除任意位置和大小的齿轮，你可能能够重新编程安提基特拉机制——并且凭借一些创造力，也许能够重新编程计程器。然后你可以尝试表示和模拟其他物理系统，或者执行其他计算。与MONIAC类似，有人认为通过这种方式物理性地重新配置硬件是在作弊。他们会认为这创造了一个新的、不同的机器，而不是在原始机器上运行一个不同的程序。
- en: '*The Islamic Golden Age*'
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*伊斯兰黄金时代*'
- en: After the fall of Rome in 476 CE, western Europe entered the so-called Dark
    Ages for a thousand years, and the history of computing in western Europe records
    basically no progress during this time.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 罗马帝国在公元476年灭亡后，西欧进入了所谓的黑暗时代，持续了千年，西欧的计算机历史在这段时间里几乎没有任何进展。
- en: However, the Roman Empire continued to operate from its new eastern capital,
    Byzantium (now Istanbul, Turkey). There was a flow of ideas between Byzantium,
    Greece, and the Islamic world, the latter becoming the new intellectual center
    of the time. A particular musical idea from this culture introduces the important
    concept of programming.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，罗马帝国继续在其新的东部首都拜占庭（今土耳其的伊斯坦布尔）运作。拜占庭、希腊和伊斯兰世界之间有思想交流，后者成为当时新的知识中心。这种文化中的一个特别音乐理念引入了编程这一重要概念。
- en: The ancient Greeks previously had a portable *hydraulis* instrument, related
    to modern church organs. It was composed of a set of pipes, played by a keyboard
    and powered from an air reservoir pumped by a servant. The Greeks clearly possessed
    the technology needed to make self-playing versions of the hydraulis, but there’s
    no evidence of them doing so.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 古希腊人曾拥有一种便携式*水力管风琴*乐器，类似于现代的教堂风琴。它由一组管道组成，通过键盘演奏，并通过仆人抽水的空气储存器提供动力。希腊人显然具备制造自奏版水力管风琴的技术，但没有证据表明他们曾这样做。
- en: 'It was Islamic scholars, the Banu Musa brothers, who built the first known
    automated musical instrument: the automated flute player of Baghdad, around 900
    CE, shown in [Figure 1-8](ch01.xhtml#ch01fig8).'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 是伊斯兰学者穆萨兄弟（Banu Musa）在公元900年左右创造了第一台已知的自动化音乐乐器：巴格达自动长笛演奏机，如[图1-8](ch01.xhtml#ch01fig8)所示。
- en: '![Image](../images/f0012-01.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../images/f0012-01.jpg)'
- en: '*Figure 1-8: A Greek hydraulis (left) and a sketch of the Baghdad automated
    flute player (right)*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-8：一台希腊水力管风琴（左）和巴格达自动长笛演奏机的草图（右）*'
- en: 'The innovation was to use a slowly rotating barrel with movable pins around
    its edge to indicate the positions of musical notes. As the barrel rotates, the
    pins make contact with levers that allow air to flow into the instrument to sound
    a note. The movable nature of the pins allows different compositions to be programmed
    into the device, making it the first known *programmable* automatic machine. The
    pins may be viewed today as a binary code: at each time and pitch, there is either
    a note (1) or no note (0).'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这一创新是使用一个缓慢旋转的圆筒，其边缘有可移动的钉子，用来指示音符的位置。随着圆筒的旋转，钉子与杠杆接触，允许空气流入乐器以发出音符。钉子的可移动性使得不同的乐曲可以被编程到设备中，这使它成为已知的第一台*可编程*自动化机器。这些钉子今天可以视为二进制代码：在每个时刻和音高处，要么有音符（1），要么没有音符（0）。
- en: 'Is this a computer? Unlike the Iron Age machines, it can clearly run multiple
    programs. However, there’s no notion of calculation or of decisionmaking: once
    a program begins, it will play through and can’t change its behavior in response
    to any input or even to its own state.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一台计算机吗？与铁器时代的机器不同，它显然可以运行多个程序。然而，它没有计算或决策的概念：一旦程序开始，它就会按预定方式运行，无法根据任何输入或甚至自身状态改变其行为。
- en: '*The Renaissance and Enlightenment*'
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*文艺复兴与启蒙时代*'
- en: 'Byzantium fell in 1453, sending many scholars and their books back to western
    Europe and helping it wake from the Dark Ages. Leonardo da Vinci was the definitive
    “renaissance man” of this time: a prolific scientist, artist, and engineer. He
    possessed many of these old books and looked to them for inspiration. He was probably
    familiar with Antikythera-like systems thanks to these books. One of his manuscripts
    from around 1502, the *Codex Madrid*, contains an unbuilt design ([Figure 1-9](ch01.xhtml#ch01fig9))
    for a mechanical analog calculator based on Antikythera-like principles.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 拜占庭帝国在1453年灭亡，将许多学者和他们的书籍送回西欧，帮助西欧从黑暗时代觉醒。列奥纳多·达·芬奇是那个时代名副其实的“文艺复兴人”：一位多产的科学家、艺术家和工程师。他拥有许多这些古老的书籍，并以此为灵感。他可能通过这些书籍熟悉了类似安提凯希拉机制的系统。大约在1502年，他的一本手稿《马德里法典》包含了一个基于类似安提凯希拉原理的机械模拟计算器设计（[图1-9](ch01.xhtml#ch01fig9)）。
- en: '![Image](../images/f0013-01.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0013-01.jpg)'
- en: '*Figure 1-9: The da Vinci calculator’s original manuscript*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-9：达·芬奇计算器的原始手稿*'
- en: 'The design was rediscovered and successfully constructed in 1968\. There are
    13 wheels, each representing the columns of a decimal number. Their possible positions
    are *continuous*: rather than switching abruptly from one decimal digit to another,
    they move smoothly by means of gearing. The gear ratio is 1:10 between each pair
    of columns, so each column’s wheel rotates at one-tenth the speed of the column
    on its right.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这一设计在1968年被重新发现并成功构建。设备有13个轮子，每个轮子代表十进制数字的一个列。它们的位置是*连续的*：它们不是突然从一个十进制数字跳到另一个，而是通过齿轮平滑地转动。每对列之间的齿轮比为1:10，因此每一列的轮子转动速度是其右侧列轮子的十分之一。
- en: Like the abacus, the calculator is an accumulator whose state at any point in
    time represents a single number, again as digits in columns. One number *a* can
    be added to another *b*. The first number *a* could be loaded onto the machine
    by advancing the mechanism to represent its digits. Then it would be turned an
    additional amount *b* to advance the total to *a* + *b*.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 像算盘一样，计算器也是一个累加器，其在任何时刻的状态都代表一个数字，再次以列的形式表示数字。一个数字*a*可以加到另一个数字*b*上。第一个数字*a*可以通过将机制调到相应位置来加载到机器中，表示其数字。然后，它将再转动一定的量*b*，使得总数增加到*a*
    + *b*。
- en: For example, to calculate 2,130 + 1,234, we first load 2,130 onto the device,
    then advance by 1,234 to get 3,364\. The numbers wouldn’t be precisely aligned
    at the end of the computation due to the continuous rotation of the wheels. For
    example, the 6 in the tens place would be almost halfway between showing 6 and
    7 because the digit after it is a 4, which is almost halfway to the next carry.
    In a sense it is a “weaker” machine than the Roman odometer, because the odometer
    has a notion of converting from continuous wheel positions to discrete symbols
    using its pin-and-ball mechanism.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要计算2,130 + 1,234，我们首先将2,130加载到设备上，然后通过1,234的转动得到3,364。由于轮子的持续旋转，计算结束时数字可能不会精确对齐。例如，十位上的6几乎位于6和7之间，因为它后面的数字是4，几乎到达下一个进位的位置。从某种意义上说，这是一种比罗马里程表更“弱”的机器，因为里程表有通过销钉和球机制将连续轮位转换为离散符号的概念。
- en: Da Vinci’s concept was extended by Blaise Pascal in 1642\. [Figure 1-10](ch01.xhtml#ch01fig10)
    shows Pascal’s calculator design and a modern build of it. (It has recently been
    argued that Pascal’s calculator was invented earlier, in 1623, by Wilhelm Schickard.)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 达·芬奇的概念在1642年由布莱兹·帕斯卡尔扩展。[图1-10](ch01.xhtml#ch01fig10)展示了帕斯卡尔的计算器设计和它的现代重建版本。（最近有人提出，帕斯卡尔的计算器实际上是在1623年由威廉·席卡德发明的。）
- en: '![Image](../images/f0014-01.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0014-01.jpg)'
- en: '*Figure 1-10: Pascal’s calculator: the original design and a 2016 LEGO rebuild*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-10：帕斯卡尔的计算器：原始设计和2016年用乐高重建的版本*'
- en: Pascal’s calculator includes a digital mechanism similar to the odometer (rather
    than da Vinci’s analog gearing) to implement its carry mechanism. When a column
    reaches the number 9 and another unit is added to it, it triggers a unit turn
    of the next column as it returns itself to the number 0.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 帕斯卡的计算器包含一个数字机制，类似于里程表（而不是达芬奇的模拟齿轮机构）来实现进位机制。当一列的数字达到9并且再加上一个单位时，它会触发下一列的单位转动，同时将该列的数字归零。
- en: Unlike the Antikythera mechanism, which represented the states of physical (astronomical)
    objects, da Vinci’s and Pascal’s machines operate on pure numbers. You could argue
    this gives them more general-purpose roles than the Antikythera mechanism. That
    said, the range of their calculations is limited to addition, which in a sense
    makes them less powerful than the abacus, which had algorithms for other arithmetic
    operations. On the other hand, like the Antikythera mechanism, these calculators
    require less human work than an abacus.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 与表示物理（天文）物体状态的安提凯瑟机械不同，达芬奇和帕斯卡的机器操作的是纯粹的数字。你可以说，这使得它们比安提凯瑟机械更具通用性。话虽如此，它们的计算范围仅限于加法，从某种意义上来说，这使得它们比算盘的能力要弱，因为算盘有其他算术运算的算法。另一方面，像安提凯瑟机械一样，这些计算器所需的人力工作比算盘要少。
- en: 'Some see the move from da Vinci’s analog to Pascal’s digital operation as very
    important. Digital operation appears to involve a simple concept of the machine
    making a “decision”: a carry is either made or not made at each step. Decision-making
    is certainly important for some tasks, but clearly not so much for addition because
    both calculators can do it equally well.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人认为从达芬奇的模拟操作到帕斯卡的数字操作的转变非常重要。数字操作似乎涉及机器做出“决策”的简单概念：在每一步中，进位要么进行，要么不进行。决策在某些任务中确实很重要，但显然对加法而言并不那么重要，因为这两种计算器在加法上表现一样好。
- en: The Steam Age
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 蒸汽时代
- en: Steam power had been known to the Greeks and Romans as a curiosity, and anyone
    who has ever boiled water with a lid will have noticed that steam can move the
    lid around. But it was only from around 1700 in Britain that steam was harnessed
    in earnest, to power the industrial revolution. Seeded by Enlightenment ideas,
    especially Newton’s physics, this was a positive feedback cycle in which machines
    and coal were used to produce more machines and extract more coal. Coal was burned
    to heat water into steam, and steam was first used to pump water from coal mines.
    In time, steam came to power many other machines, some with computer-like characteristics.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 蒸汽动力在古希腊和古罗马时代被视为一种好奇现象，任何曾用盖子煮水的人都会注意到蒸汽能让盖子动起来。但直到大约1700年，英国才开始真正利用蒸汽来推动工业革命。这一变革受到启蒙时代思想的启发，特别是牛顿的物理学，这成为一个积极反馈循环，机器和煤炭被用来制造更多的机器并提取更多的煤。煤被燃烧来加热水并转化为蒸汽，蒸汽最初用于从煤矿抽水。随着时间的推移，蒸汽动力开始驱动许多其他机器，其中一些具有类似计算机的特征。
- en: '*The Jacquard Loom*'
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*雅卡尔织机*'
- en: The production of textiles was a major application of new machines during the
    Steam Age. But unlike plain cotton clothes, traditional weaving patterns were
    highly complex. Thus they were considered to be more valuable because they were
    rarer and more expensive.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 纺织品生产是蒸汽时代新机器的一个主要应用。但与简单的棉布衣物不同，传统的织物图案极为复杂。因此，它们被认为更有价值，因为它们更稀有、更昂贵。
- en: In 1804, Joseph Jacquard created a variant of the weaving machines of the time
    that employed replaceable punched cards to guide the positions of the hooks and
    needles used in the weave ([Figure 1-11](ch01.xhtml#ch01fig11)).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 1804年，约瑟夫·雅卡尔（Joseph Jacquard）发明了一种变种的当时织布机，采用可更换的打孔卡片来引导织物中的钩子和针的位置（[图1-11](ch01.xhtml#ch01fig11)）。
- en: '![Image](../images/f0015-01.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0015-01.jpg)'
- en: '*Figure 1-11: A Jacquard loom*'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-11：雅卡尔织机*'
- en: The punched cards could be “chained” together into long tapes to make complex,
    reusable patterns at a lower price.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 打孔卡片可以“链”在一起，形成长条带，以较低的价格制作复杂的可重用图案。
- en: '**NOTE**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*“Chain” became the standard command to load the next program from magnetic
    tapes in later electronic devices, used until the 1990s. Weaving concepts like
    “thread” and “warp” are also used as metaphors in modern multithreaded programming
    and in parallel GPUs.*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*“链”成为了后来电子设备中从磁带加载下一个程序的标准命令，这一命令一直使用到1990年代。织布的概念，如“纱线”和“经线”，也被用作现代多线程编程和并行GPU中的隐喻。*'
- en: '*Victorian Barrel Organs and Music Boxes*'
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*维多利亚时期的管风琴和音乐盒*'
- en: Barrel-based musical instruments, similar in technology to the Baghdad automatic
    flute player and shown in [Figure 1-12](ch01.xhtml#ch01fig12), were popular during
    the 19th century. The job of an “organ grinder” was to push a portable barrel
    organ onto a main street, then manually turn its handle to provide power. A rotating
    barrel with pins marking the positions of notes would then allow air into the
    organ pipes, as in the Baghdad version.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 19世纪流行的基于桶的音乐器乐，类似于巴格达自动长笛演奏机，如[图1-12](ch01.xhtml#ch01fig12)所示。一个“风琴手”的工作是把一个便携的手摇风琴推到主要街道，然后手动转动它的手柄以提供动力。一个旋转的桶上的钉子标记了音符的位置，然后允许空气进入风琴管，就像巴格达的版本一样。
- en: '![Image](../images/f0016-01.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../images/f0016-01.jpg)'
- en: '*Figure 1-12: Two Victorian-style barrel organs (left and center) and a music
    box (right)*'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-12：两台维多利亚风格的手摇风琴（左和中）和音乐盒（右）*'
- en: The same mechanism was (and still is) used in the music box from this period,
    in which a spring is wound up to store energy and then released to power a smaller
    pinned barrel, whose pins strike small xylophone-like metal bars directly to play
    a few bars of music such as a famous theme from a ballet. The rotating barrel
    is often topped with a small sculpture, such as a ballerina, that rotates along
    with the music.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的机制在这个时期的音乐盒中（至今仍在使用），其中一个弹簧被卷起来储存能量，然后释放以驱动一个较小的有钉筒，其钉子直接击打小型木琴式金属条，播放一些音乐片段，比如芭蕾舞剧中的著名主题。旋转的桶常常顶着一个小雕塑，如一个芭蕾舞者，随着音乐一起旋转。
- en: Charles Babbage hated organ grinders playing outside his house and led a public
    campaign to rid them from the streets of London. But their barrel organs were
    to form a fundamental influence on his work.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 查尔斯·巴贝奇讨厌风琴手在他家门外演奏，他发起了一场公开运动，要求从伦敦街头清除他们。但他们的手摇风琴却对他的工作产生了深远的影响。
- en: '*Babbage’s Difference Engine*'
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*巴贝奇的差分机*'
- en: Babbage designed two different machines, the Difference Engine and the Analytical
    Engine. The former ([Figure 1-13](ch01.xhtml#ch01fig13)) was first; it was successfully
    built and commercialized by Georg Scheutz and others from 1855 and widely used
    in industry until the 1930s. Recent LEGO rebuilds also exist.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 巴贝奇设计了两台不同的机器，分别是差分机和分析引擎。前者（[图1-13](ch01.xhtml#ch01fig13)）首先被建造出来，并于1855年由乔治·舍茨等人成功商业化，广泛应用于工业直至1930年代。最近还有乐高重建版本存在。
- en: The Difference Engine was designed to produce tables of values of arbitrary
    polynomial functions. Most mathematical functions can be well approximated by
    polynomials via Taylor series expansion, so the machine could be used to make
    tables of values for any such function. You may have used similar tables in modern
    exams to look up values of trigonometric or statistical functions when a calculator
    isn’t allowed. In Babbage’s time, the killer application of these tables was in
    shipping, for navigation purposes. Tables had previously been computed by hand
    and contained many expensive errors, so there was a large economic demand to perfect
    them by machine.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 差分机的设计用于生成任意多项式函数的数值表。大多数数学函数可以通过泰勒级数展开来很好地近似为多项式，因此这台机器可以用来为任何这样的函数制作数值表。在现代考试中，当不允许使用计算器时，你可能会使用类似的表格查找三角函数或统计函数的值。在巴贝奇的时代，这些表格的杀手级应用是在航海中，用于导航目的。以前的表格是手工计算的，包含许多昂贵的错误，因此通过机器完善它们有着很大的经济需求。
- en: The machine can be powered either by steam or by a human cranking the handle.
    Like Pascal’s calculator, the Difference Engine represents decimal digits by discretized
    rotations of gears. Numbers are represented by a vertical column of such digits
    (like Pascal’s calculator turned on its side). The Difference Engine then extends
    this to a 2D parallel architecture, with multiple vertical columns arranged horizontally.
    Each of these columns represents a different number.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 该机器可以通过蒸汽或人工摇曳手柄来驱动。与帕斯卡的计算器类似，差分机通过齿轮的离散旋转来表示十进制数字。数字由这些数字的垂直列表示（类似于帕斯卡的计算器侧倾）。然后，差分机将此扩展为二维平行体系结构，多个垂直列水平排列。每列代表一个不同的数字。
- en: '![Image](../images/f0017-01.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../images/f0017-01.jpg)'
- en: '*Figure 1-13: A metal rebuild of Babbage’s Difference Engine*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-13：巴贝奇的差分机的金属重建*'
- en: 'There are two dimensions of parallelization in the Difference Engine: digit-wise
    and term-wise. Digit-wise addition, for example, is a different algorithm from
    the sequential high school method of addition. Instead of starting from the rightmost
    column and moving left and applying carries, it adds each pair of digits at the
    same time, then handles any carrying afterward. For example, to add 364 + 152,
    the three additions 3 + 1, 6 + 5, and 4 + 2 are all performed at the same time
    to give 416\. The carry from 6 + 5 = 11 is then added to give 516\. Carrying is
    a difficult operation to get right in this context, and Babbage devoted most of
    his engineering time to it. The visual effect of carries can be seen on YouTube
    videos of the Difference Engine as a visible ripple of information propagating
    across the 2D surface of the machine. Such ripples are also seen in computations
    on modern parallel GPUs.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 差分机有两个并行化的维度：按数字和按项。按数字加法，例如，是与高中顺序加法方法不同的算法。它不是从最右边的列开始，向左移动并进行进位，而是同时加上每一对数字，然后再处理进位。例如，要加364
    + 152，三个加法 3 + 1、6 + 5 和 4 + 2 会同时进行，结果为416。然后，6 + 5 = 11的进位会被加上，得到516。进位是一个在这种情况下难以正确执行的操作，巴贝奇将大部分工程时间都投入在这上面。差分机在YouTube视频中显示的进位效果是信息在机器二维表面上传播的可见波纹。这种波纹在现代并行GPU的计算中也可以看到。
- en: Is the Difference Engine a computer? It can run different “programs” to calculate
    different equations, but these equations have no obvious concept of changing their
    behavior during a calculation; there’s nothing like an if statement to test intermediate
    results and do something different based on them. It’s more like a modern media
    streaming device in which numbers flow smoothly through a processing pipeline.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 差分机算是计算机吗？它可以运行不同的“程序”来计算不同的方程式，但这些方程式没有明显的概念来在计算过程中改变其行为；没有类似if语句那样的东西来测试中间结果并根据它们做出不同的操作。它更像是一个现代的媒体流设备，其中数字平滑地通过处理管道流动。
- en: '*Babbage’s Analytical Engine*'
  id: totrans-111
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*巴贝奇的分析机*'
- en: The Difference Engine was limited to computing tables of polynomial functions,
    but Babbage’s second project, the Analytical Engine ([Figure 1-14](ch01.xhtml#ch01fig14)),
    was designed as a completely general-purpose, programmable machine.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 差分机仅限于计算多项式函数的表格，但巴贝奇的第二个项目——分析机（[图 1-14](ch01.xhtml#ch01fig14)）被设计为一台完全通用、可编程的机器。
- en: '![Image](../images/f0018-01.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0018-01.jpg)'
- en: '*Figure 1-14: A modern partial rebuild of Babbage’s Analytical Engine*'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-14：巴贝奇分析机的现代部分重建*'
- en: To obtain this generality, the Analytical Engine provides a range of arithmetic
    and other operations as simple machines, together with a memory for storing data
    and the ability to read in programs from punch cards. The programs dictate a sequence
    of memory reads and writes and arithmetic operations, and allow branching depending
    on the state of the calculation—an if statement.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这种普适性，分析机提供了一系列算术和其他操作作为简单的机械装置，并配备了用于存储数据的内存以及从打孔卡片读取程序的能力。这些程序规定了内存读取和写入的顺序、算术运算，并允许根据计算状态进行分支——一个if语句。
- en: Babbage went through many variations of the Analytical Engine’s design on paper,
    but physically built only a tiny part of it just before he died. He got very sidetracked
    with the fine details of the carry mechanism and was obsessed with constantly
    redesigning components rather than sticking with one version and getting them
    integrated to actually work. (Today this style of project management would be
    known as *yak shaving*.) This annoyed the research funding agencies of the time,
    making it hard for Babbage to get money to build anything. Thus, unlike with the
    Difference Engine, we don’t have a working version or even a single final design
    document of the Analytical Engine. However, components have recently been reconstructed
    from Babbage’s plans using modern manufacturing technologies.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 巴贝奇在纸上进行了多次分析机设计的变更，但在他去世前，实际上只建造了其中的一小部分。他在进位机制的细节上走了很多弯路，痴迷于不断重新设计组件，而不是坚持一个版本并将其整合起来使其真正运作。（今天，这种项目管理风格被称为*yak
    shaving*。）这让当时的研究资金机构很不满，使得巴贝奇很难获得资金来建造任何东西。因此，与差分机不同的是，我们没有分析机的工作版本，甚至没有一份完整的最终设计文档。然而，最近，通过现代制造技术，已经根据巴贝奇的计划重建了一些组件。
- en: 'With more moving parts than the Difference Engine, the Analytical Engine would
    have required more power; this would have had to come from a steam engine rather
    than a manual crank. It would have also required more precisely machined gears,
    as computations would need to work their way through a longer series of gears.
    Like the factory machines and steam locomotives of the period, it would have smelled
    of oil, smoke, and steam, and gleamed in polished brass: Babbage was the original
    steampunk.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 分析机拥有比差分机更多的活动部件，因此需要更多的动力；这必须来自蒸汽机，而不是手动曲柄。它还需要更精密加工的齿轮，因为计算需要通过一系列更长的齿轮传递。像当时的工厂机器和蒸汽机车一样，它将散发出油烟、蒸汽的气味，并在抛光的黄铜表面闪闪发光：巴贝奇是最初的蒸汽朋克。
- en: The core of the Analytical Engine contained many independent simple machines
    that each performed some function, such as adding numbers and testing if one number
    equaled another. The adding machine was roughly a copy of Pascal’s calculator,
    and the other simple machines were variations of it.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 分析机的核心包含许多独立的简单机器，每台机器执行某种功能，例如加法运算和测试一个数字是否等于另一个数字。加法机大致是帕斯卡计算器的复制品，其他简单机器是它的变种。
- en: The Analytical Engine introduced the modern concept of computer memory. Its
    “store” would have consisted of a large number of copies of a simple machine,
    again similar to a Pascal calculator, each of which could retain a different number.
    Each machine would be given a numerical identifier or “address” to specify the
    correct one to read from or write to.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 分析机引入了现代计算机内存的概念。它的“存储”部分将包含大量简单机器的副本，再次类似于帕斯卡计算器，每台机器都可以保留不同的数字。每台机器都会被分配一个数字标识符或“地址”，以指定读取或写入的正确机器。
- en: A sequence of *instructions* would have been coded in binary and punched onto
    paper tape, using a mechanism taken from the Jacquard loom. Each instruction would
    tell the engine to activate one of the simple machines. Usually, after each instruction,
    the machine would have line-fed the punched paper along to load the next one (a
    bit like a typewriter). However, the machine also would have had the ability to
    check the result of the latest simple machine and, depending on its value, could
    jump to a different line in the paper. This would give programs the ability to
    alter their behavior in response to intermediate results.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列*指令*将以二进制编码，并通过纸带打孔的方式输入，使用的机制来自于雅卡尔织布机。每条指令将告诉引擎激活其中一台简单机器。通常，在每条指令之后，机器会通过行进方式将打孔的纸带送到下一条（有点像打字机）。然而，机器也具备检查最新简单机器结果的能力，并根据其值跳转到纸带的不同位置。这使得程序能够根据中间结果改变其行为。
- en: A program could also be made to run forever by gluing the bottom of the punched
    paper to its top, making a physical loop, as in the (later) paper tape machine
    shown in [Figure 1-15](ch01.xhtml#ch01fig15).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将打孔纸带的底部粘到顶部，形成一个物理循环，程序也可以无限运行，正如在[图1-15](ch01.xhtml#ch01fig15)中所示的（后来的）打孔纸带机。
- en: '![Image](../images/f0019-01.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0019-01.jpg)'
- en: '*Figure 1-15: A punch tape program loop*'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-15：一个打孔纸带程序循环*'
- en: We don’t have any examples of actual programs written for the Analytical Engine.
    Rather, Babbage and his collaborator Ada Lovelace wrote down example *states*
    and *outputs* from imaginary runs as long tables, showing them at each step of
    program execution. This is similar to the notations on the Babylonians’ clay tablets,
    which illustrate algorithms by showing the effects rather than the instructions
    used to generate them. From these execution traces, modern readers can infer roughly
    what the programs and the machine’s instruction set used to build them would have
    been.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有任何实际为分析机编写的程序示例。相反，巴贝奇和他的合作者阿达·洛夫莱斯记录下了虚拟运行的*状态*和*输出*，以长表格的形式显示程序执行的每一步。这类似于巴比伦人泥板上的标注，展示算法的效果，而不是生成这些效果的指令。从这些执行痕迹中，现代读者可以大致推测出程序和构建它们的机器指令集的内容。
- en: Babbage wrote the first of these example traces for small, almost trivial mathematical
    functions, which illustrate roughly the full set of instructions in use. But Babbage
    was the hardware person, more concerned with designing the machine itself, and
    never wrote anything longer, thinking that programming would be relatively trivial
    compared to designing the architecture. Lovelace was the software person, and
    she wrote much longer traces for complex functions. She also wrote speculations
    about what larger programs could achieve, including ideas about AI. If Babbage
    is claimed as “the first programmer,” then Lovelace might be “the first software
    engineer” for thinking about programming more seriously and at scale.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 巴贝奇为一些小的、几乎微不足道的数学函数写了这些示例跟踪，粗略展示了正在使用的完整指令集。但巴贝奇是硬件专家，更关心设计机器本身，且从未写过更长的程序，认为编程相对于设计架构来说是相对简单的。洛夫莱斯则是软件专家，她为复杂的函数写了更长的跟踪。她还写了关于更大程序能够实现的推测，包括关于人工智能的想法。如果说巴贝奇是“第一个程序员”，那么洛夫莱斯可能就是“第一个软件工程师”，因为她更认真地考虑了大规模编程。
- en: 'Was the Analytical Engine a Church computer? Its design contains all the basic
    features of a modern computer: CPU, memory, a bus, registers, a control unit,
    and an arithmetic unit. It can read, write, and process data. It can do arithmetic.
    Unlike the purely calculating machines before it, it can jump (goto) and branch
    (if), moving to different instructions in the program according to the state of
    its calculations.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 解析机是丘奇计算机吗？它的设计包含了现代计算机的所有基本特征：CPU、内存、总线、寄存器、控制单元和算术单元。它可以读取、写入和处理数据。它可以进行算术运算。与之前纯粹的计算机器不同，它可以跳转（goto）和分支（if），根据计算的状态跳到程序中的不同指令。
- en: However, to be able to simulate any other machine, it would need to be able
    to read, write, and execute programs as well as read, write, and process data.
    But its programs were fixed on the punched paper, rather than held in memory like
    in a modern PC. This kind of architecture, where the data and program are stored
    separately, often with the program fixed as firmware, is called a *Harvard architecture*,
    as opposed to a *von Neumann architecture*, where the program and data are stored
    together.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，要能够模拟任何其他机器，它需要能够读取、写入和执行程序，并且能够读取、写入和处理数据。但它的程序是固定在穿孔纸上的，而不是像现代PC一样存储在内存中。这种数据和程序被分开存储的架构，通常程序是作为固件固定的，叫做*哈佛架构*，与*冯·诺依曼架构*不同，后者将程序和数据存储在一起。
- en: Today, Harvard architectures are used in embedded systems, especially in digital
    signal processing chips. It’s possible to set up a Harvard architecture that can
    simulate other computers, including those that modify their own programs. This
    can be done by writing a single *virtual machine (VM)* program on the fixed program
    punch cards (or modern firmware). The VM reads, executes, and writes further programs
    in memory.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，哈佛架构被广泛应用于嵌入式系统，特别是在数字信号处理芯片中。可以建立一个哈佛架构，模拟其他计算机，包括那些能够修改自身程序的计算机。这可以通过在固定程序穿孔卡（或现代固件）上编写一个单一的*虚拟机（VM）*程序来完成。虚拟机读取、执行并在内存中写入更多程序。
- en: 'Lovelace or Babbage could have written a VM program for the Analytical Engine,
    but they didn’t consider it. The same could be said about many other machines,
    however. For example, a VM could be written for and executed on a Sumerian abacus
    if a programmer chose to do so. Church’s thesis is about the *potential* for a
    machine to simulate any other machine, not the actualization of it doing so. But
    it depends on what “level” of machine we consider: the underlying hardware or
    virtual machines running at higher software levels.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 洛夫莱斯或巴贝奇本可以为解析机编写一个虚拟机程序，但他们并没有考虑这一点。许多其他机器也可以这样说。例如，如果程序员愿意的话，虚拟机可以为苏美尔算盘编写并在其上执行。丘奇的命题是关于机器模拟任何其他机器的*潜力*，而不是它实际做到这一点的实现。但这取决于我们考虑的是“哪个层次”的机器：底层硬件还是运行在更高软件层次上的虚拟机。
- en: And, of course, the Analytical Engine was never built or tested in full—does
    this need to be done to justify “being a computer,” or is the basic design sufficient
    by itself?
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，解析机从未完全建造或测试过——要证明“它是计算机”是否需要做到这一点，还是仅凭其基本设计就足够了？
- en: '*Mechanical Differential Analyzers*'
  id: totrans-131
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*机械差分分析仪*'
- en: The industrial revolution largely progressed through practical hackers building
    machines based on their intuitions, then testing whether they worked. But over
    time, mathematical theories were adapted or invented to describe and predict the
    behavior of many engineering systems, giving rise to academic engineering. Most
    of these theories made use of calculus. Developed earlier by Gottfried Wilhelm
    Leibniz and (independently) Sir Isaac Newton for different purposes, calculus
    quickly took off as a general tool for modeling how all kinds of systems, including
    industrial machinery, change over continuous time, through equations such as
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 工业革命主要是通过实践中的“黑客”们根据直觉建造机器，然后测试它们是否有效的过程推进的。但随着时间的推移，数学理论被用来描述和预测许多工程系统的行为，促成了学术工程学的发展。这些理论大多采用了微积分。微积分早期由戈特弗里德·威廉·莱布尼茨和（独立地）艾萨克·牛顿为了不同的目的发展，很快作为一种通用工具，在建模各类系统（包括工业机械）如何随时间变化时，得到了广泛应用，通过诸如以下方程：
- en: '![Image](../images/f0021-01.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0021-01.jpg)'
- en: where *x* is part of the state of the world being modeled, *f* is some function
    of it, and *dx*/*dt* is the rate of change of *x*. This type of equation can numerically
    simulate the state of the world over time by iteratively computing *dx*/*dt* and
    using it to update *x*. Like making the Difference Engine’s tables of polynomials,
    this is a highly repetitive and error-prone process ripe for mechanical automation.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 *x* 是被建模的世界状态的一部分，*f* 是它的某个函数，*dx*/*dt* 是 *x* 的变化率。这类方程可以通过迭代计算 *dx*/*dt*
    并使用它来更新 *x*，从而数值模拟世界随时间变化的状态。就像制作差分机的多项式表格一样，这是一个高度重复且容易出错的过程，非常适合机械自动化。
- en: In 1836, the same year that the Analytical Engine was developed, Gaspard-Gustave
    de Coriolis realized that since the behavior of a mechanical device could be *described*
    by a differential equation, the same device could be viewed as computing the solution
    to that equation. So, to solve a new equation, a physical device could be designed
    that matched it, and that device could then be run for a period of time to give
    the required answer.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 1836年，即解析机被开发的同一年，加斯帕尔-古斯塔夫·科里奥利斯意识到，由于机械设备的行为可以*用微分方程描述*，因此同样的设备可以看作是计算该方程的解。因此，为了解决一个新的方程，可以设计一个与之匹配的物理设备，然后运行该设备一段时间以给出所需的答案。
- en: More general differential equations can involve acceleration and higher derivatives,
    and multiple variables. Coriolis’s idea was extended by others, including Lord
    Kelvin in 1872 and James Thomson in 1876, to solve these systems, again by constructing
    analog mechanical devices to match them. The key component of these machines was
    the ball and disc integrator ([Figure 1-16](ch01.xhtml#ch01fig16)), in which a
    movable ball transfers motion from a spinning disc to an output shaft.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 更一般的微分方程可以涉及加速度、高阶导数以及多个变量。科里奥利斯的想法被其他人扩展，包括1872年的凯尔文勋爵和1876年的詹姆斯·汤姆森，旨在通过构造匹配这些方程的模拟机械设备来求解这些系统。这些机器的关键部件是球盘积分器（[图1-16](ch01.xhtml#ch01fig16)），其中一个可移动的球体将旋转盘的运动传递到输出轴。
- en: '![Image](../images/f0021-02.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0021-02.jpg)'
- en: '*Figure 1-16: A ball and disc integrator from Kelvin’s differential analyzer*'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-16：凯尔文差分分析仪中的球盘积分器*'
- en: 'Like the Difference Engine, these machines were built only to solve a single
    class of problems: differential equations. But much, or perhaps all, of the world
    and its problems can be modeled by differential equations. As inherently analog
    machines, they can be viewed as continuing the tradition of da Vinci’s analog
    calculator, while Babbage’s machine built on Pascal’s digital calculator.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 像差分机一样，这些机器仅仅是为了求解一类特定的问题：微分方程。然而，世界及其问题的大部分，甚至可能是全部，都可以通过微分方程来建模。作为本质上模拟机器，它们可以被视为继续达芬奇类比计算机的传统，而巴贝奇的机器则是基于帕斯卡的数字计算器。
- en: The concept of using the physical properties of the world to model itself has
    recently been revived in quantum computing, where simulating physical and chemical
    quantum systems appears to be a major application with a particularly good fit
    to the way quantum machines compute.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用世界物理属性来模拟自身的概念，最近在量子计算中得到了复兴，在那里模拟物理和化学量子系统似乎是一个主要应用，特别适合量子计算机的工作方式。
- en: The Diesel Age
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 柴油时代
- en: Between the purely mechanical machines of the industrial revolution and later
    electronic machines, there was a hybrid period in which electricity was combined
    with mechanical motion to build electromechanical machines.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在工业革命的纯机械机器和后来的电子机器之间，有一个混合时期，电力与机械运动结合，制造出了电机机械化的机器。
- en: The key electromechanical technology is the *relay*, a mechanical switch in
    an electrical circuit whose physical position is controlled using a magnet, which,
    in turn, is controlled by another electrical signal. Relays are a special type
    of *solenoid*, a coil of wire that generates a linear magnetic field when a current
    flows through it. This magnetic field can be used to physically move a magnet
    (called the *armature*) inside the coil, and that motion can be used, for example,
    to open and close a valve in a water pipe or to start a car engine. Replace the
    water pipe with a second electrical circuit, and the valve with an electrical
    switch, and you have yourself a relay.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 关键的电机机械技术是*继电器*，它是电路中的一个机械开关，其物理位置通过一个磁铁来控制，而磁铁又由另一个电信号来控制。继电器是一种特殊类型的*电磁铁*，它是一种线圈，当电流通过时产生线性磁场。这个磁场可以用来物理移动线圈内的磁铁（称为*铁芯*），这种运动可以用来打开和关闭水管中的阀门，或启动汽车发动机。把水管换成第二个电路，把阀门换成电开关，你就得到了一个继电器。
- en: Relays are still used today ([Figure 1-17](ch01.xhtml#ch01fig17)). For example,
    in robotics safety systems, we often need to physically connect and disconnect
    the main battery to and from the robot’s motors. A safety monitor checks if everything
    is okay and makes the physical relay connection if so, but disconnects it if anything
    seems wrong. You can hear these relays click when the current changes and the
    armature physically moves.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 继电器至今仍在使用中（见[图1-17](ch01.xhtml#ch01fig17)）。例如，在机器人安全系统中，我们常常需要物理地连接和断开主电池与机器人电机之间的电源。安全监视器检查一切是否正常，如果正常，则建立物理继电器连接；如果发现问题，则断开连接。当电流变化并且铁芯发生物理移动时，你可以听到继电器的点击声。
- en: '![Image](../images/f0022-01.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0022-01.jpg)'
- en: '*Figure 1-17: A relay showing a wire coil*'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-17：显示线圈的继电器*'
- en: Electromechanical machines were more efficient than purely mechanical ones,
    and found widespread commercial and military use in the period around the turn
    of the 20th century and the two World Wars. Some of the machines you’ll see in
    the next section were still in use in the 1980s. Others have uncertain fates due
    to ongoing government secrecy, as this period includes the cryptology machines
    of World War II.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 电机机械化的机器比纯机械机器更高效，并在20世纪初及两次世界大战期间得到了广泛的商业和军事应用。在下一节中你将看到的一些机器，在1980年代仍在使用。而其他机器由于持续的政府保密，命运不明，因为这一时期还包括了第二次世界大战的密码学机器。
- en: '*The IBM Hollerith Tabulating Machine*'
  id: totrans-148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*IBM霍勒里斯制表机*'
- en: The US Constitution requires that a census be taken and processed every 10 years,
    and by 1890 the population had grown to a size where human processing of its statistics
    was impossible. This created an embarrassing backlog of work for the government
    and a strong demand for an automated solution.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 美国宪法要求每十年进行一次人口普查并处理相关数据，到1890年时，人口已经增长到人力处理统计数据已不可能的程度。这导致政府出现了尴尬的工作积压，同时也对自动化解决方案产生了强烈需求。
- en: Herman Hollerith designed a machine to automate data processing and used it
    successfully in the 1890 census to do big data analytics on information from 62
    million citizens. Each citizen’s data was transferred from a written census form
    to a punch card by a human clerk. This seems to have been inspired not by Jacquard’s
    and Babbage’s machines, but independently by inspectors punching holes in train
    tickets to represent different journeys or times. Each question on the census
    was multiple choice, and was encoded on the punch card by punching out one of
    the several options. [Figure 1-18](ch01.xhtml#ch01fig18) shows an example of this.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 赫尔曼·霍勒里斯设计了一台机器来自动化数据处理，并成功地在1890年的人口普查中使用它，对6200万公民的信息进行大数据分析。每个公民的数据由人工职员将书面人口普查表格转移到打孔卡片上。这似乎并非受到雅卡尔（Jacquard）和巴贝奇（Babbage）机器的启发，而是受到检票员在火车票上打孔的启发，用以表示不同的行程或时间。人口普查中的每个问题都是多项选择题，并通过打孔卡片上的一个选项来编码。
    [图1-18](ch01.xhtml#ch01fig18)展示了这个例子。
- en: '![Image](../images/f0023-01.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0023-01.jpg)'
- en: '*Figure 1-18: A replica of the IBM Hollerith machine (left) and a punched card
    (right)*'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-18：IBM霍勒里斯机的复制品（左）和打孔卡片（右）*'
- en: 'Stacks of cards could be read into the machine, which would check for the presence
    or absence of certain features or combinations of features, then use an electrical
    analog of a Pascal calculator to accumulate the total count of cards having these
    features. As Hollerith (1894) explained:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一叠叠卡片可以被读取到机器中，机器会检查是否存在某些特征或特征组合，然后使用帕斯卡计算器的电气模拟来累计具有这些特征的卡片总数。正如霍勒里斯（1894年）所解释的：
- en: It is not sufficient to know simply the number of males and females, but we
    must know, for example, how many males there are at each age-period, as well as
    how many females at each age-period; or, in other words, we must count age and
    sex in combination. By a simple use of the well-known electrical relay we can
    secure this or any other possible combination. It must not be understood that
    only two items can be combined; in this way any number of items can be combined.
    We are only limited by the number of counters and relays.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅知道男性和女性的数量是不够的，我们必须知道，例如，每个年龄段有多少男性，以及每个年龄段有多少女性；换句话说，我们必须将年龄和性别结合起来计数。通过简单使用著名的电气继电器，我们可以得到这个或任何其他可能的组合。必须理解的是，组合的不仅仅是两项内容；以这种方式，可以将任意数量的项进行组合。我们唯一的限制是计数器和继电器的数量。
- en: This means that the machine is roughly capable of modern SQL queries, including
    `SELECT, WHERE, GROUP BY`, and `ORDER BY`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着该机器大致能够执行现代SQL查询，包括`SELECT, WHERE, GROUP BY`和`ORDER BY`。
- en: Following the machine’s widely reported success in the 1890 census, Hollerith
    incorporated the Tabulating Machine Company in 1896\. It became the Computing-Tabulating-Recording
    Company in 1911, then International Business Machines (IBM) in 1924\. IBM was
    described as doing “super-computing” by the *New York World* newspaper in 1931
    and performed similar commercial big data analytics for many governments and companies
    before 1936\. It continues to do so today.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器在1890年人口普查中的广泛成功报道后，霍勒里斯于1896年成立了制表机公司。它于1911年改名为计算制表记录公司，1924年更名为国际商业机器公司（IBM）。在1931年，《纽约世界报》称IBM进行“超级计算”，并在1936年前为许多政府和公司提供类似的商业大数据分析服务。它至今仍在继续这一工作。
- en: '*Electromechanical Differential Analyzers*'
  id: totrans-157
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*电机机械差分分析仪*'
- en: Analog mechanical differential analyzers reached widespread practical use when
    it became possible to power them using electricity. Electrical circuits also provided
    a major new application for differential analyzers, as they are often described
    using the same kinds of differential equations as used in mechanics. Hazen and
    Bush’s 1928 system, built at MIT, is often credited for the mass popularization
    of electromechanical differential analyzers, and its concept quickly spread to
    research teams at the universities of Manchester and Cambridge ([Figure 1-19](ch01.xhtml#ch01fig19))
    in the UK. Some of these British research machines were built using Meccano (similar
    to an Erector Set) on smaller budgets than the American versions.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 当可以用电力为模拟机械差分分析仪提供动力时，它们开始得到广泛的实际应用。电气电路也为差分分析仪提供了一个重要的新应用，因为它们通常使用与力学中使用的相同类型的差分方程来描述。哈泽恩和布什于1928年在麻省理工学院建造的系统，通常被认为是电机机械差分分析仪普及的推动者，其概念很快传播到英国曼彻斯特和剑桥大学的研究团队（见[图1-19](ch01.xhtml#ch01fig19)）。一些英国的研究机器使用梅卡诺（类似于结构玩具）建造，预算比美国版本低。
- en: '![Image](../images/f0024-01.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0024-01.jpg)'
- en: '*Figure 1-19: Maurice Wilkes (right) with the mechanical Cambridge Differential
    Analyzer, 1937*'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-19：莫里斯·威尔克斯（右）与机械版剑桥差分分析仪，1937年*'
- en: Similar machines were used heavily throughout World War II to solve differential
    equations, such as when calculating projectile trajectories. By attaching pens
    to the machines’ moving parts, some teams added analog plotters to draw graphs
    on paper. Versions of these machines were still used in the 1970s as onboard missile
    guidance systems.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的机器在第二次世界大战期间被大量使用，用于求解差分方程，例如计算炮弹轨迹。通过将钢笔连接到机器的运动部件，一些团队还为机器添加了模拟绘图仪，在纸上绘制图表。这些机器的版本在1970年代仍被用作导弹制导系统。
- en: '*Electromechanical Machines of World War II*'
  id: totrans-162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*第二次世界大战中的电机机械机器*'
- en: Many popular histories focus on machines used during World War II for *cryptography*,
    the enciphering and deciphering of messages by a transmitter and receiver, and
    *cryptanalysis*, the cracking of ciphers. Together, these fields are known as
    *cryptology*. Cracking ciphers is harder than encrypting and decrypting them.
    Thus, cryptanalysis machines are the larger, more interesting ones. Should any
    of the machines from either or both categories qualify as “computers”? Their history
    has been concealed by government secrecy, and we’re still learning more as documents
    are made public. This uncertainty has been useful for some biased historians and
    filmmakers who want their own country or community to have invented the computer.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 许多流行的历史书籍集中于第二次世界大战期间用于*密码学*（传输者和接收者的消息加密和解密）和*密码分析*（破解密码）的机器。合起来，这些领域被称为*密码学*。破解密码比加密和解密它们更为困难。因此，密码分析机器通常是更大、更有趣的那些。是否可以将这两类机器中的任何一类视为“计算机”？它们的历史一直被政府机密掩盖，我们仍在随着文件的公开而继续了解。这种不确定性对一些有偏见的历史学家和电影制片人有利，他们希望自己的国家或社区能被认为是计算机的发明者。
- en: The original Enigma ([Figure 1-20](ch01.xhtml#ch01fig20)) was a 1923 electromechanical
    German commercial cryptography product sold to banks and governments in many countries,
    including America and Britain.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 原始的Enigma（[图1-20](ch01.xhtml#ch01fig20)）是一款1923年推出的机电德国商业密码学产品，销售给多个国家的银行和政府，包括美国和英国。
- en: '![Image](../images/f0025-01.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0025-01.jpg)'
- en: '*Figure 1-20: The German Enigma wiring, showing four input keys (2), four output
    lamps (9), three rotors (5, 5, 5), a plugboard (8), and a reflector (6)*'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-20：德国Enigma的电路图，显示了四个输入键（2），四个输出灯（9），三个转子（5，5，5），一个插头板（8）和一个反射器（6）*'
- en: 'The Enigma consists of a typewriter keyboard, output letter lamps, three rotors,
    and electric wiring. Each rotor acts to substitute a letter for each other letter.
    The input letter *a* is passed through the three rotors in sequence, then “reflected”
    (substituted for 26 – *a*) and passed backward through the three rotors again.
    Each time this is done, the end rotor advances by 1, with carries between rotors,
    as in Pascal’s calculator. Each configuration of a rotor produces a particular
    set of substitutions. All Enigma operations were symmetric: the same machine state
    would perform decryption on its own encrypted text. Several versions of the machine
    were used in the war.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Enigma由一个打字机键盘、输出字母灯、三个转子和电线组成。每个转子会将一个字母替换成另一个字母。输入字母*a*依次通过三个转子，然后被“反射”（替换为26
    - *a*），再通过三个转子反向传递。每次执行这一过程时，最后一个转子会向前推进1步，转子之间会有进位，类似于帕斯卡计算器的工作方式。每个转子的配置都会产生一组特定的替换。所有Enigma操作都是对称的：相同的机器状态会对其加密的文本进行解密。战争中使用了多个版本的Enigma机器。
- en: The German military M3 Enigma added a stage swapping pairs of letters using
    a plugboard. Seven years before the war, the Polish, led by Marian Rejewski, broke
    its encryption by designing and using a singlepurpose electromechanical machine,
    the *Bomba*. This incorporated physical Enigma rotors to brute-force all possible
    encodings of known message headers in advance. The daily keys were then looked
    up in a reverse-index filecard database. The Polish gave this system to the British
    at Bletchley Park (which later became GCHQ).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 德国军事用M3 Enigma在使用插头板时增加了一个阶段，交换字母对。在战争前七年，波兰人在Marian Rejewski的领导下，通过设计并使用一台单用途的机电设备——*Bomba*，破解了其加密。这台设备使用了物理的Enigma转子，通过强行破解所有已知消息头的可能编码。然后，使用反向索引文件卡数据库查找每日密钥。波兰人将这一系统交给了位于布莱切利公园的英国人（该地后来成为GCHQ）。
- en: In 1938, the Germans changed protocol—not hardware—to remove the known message
    headers. The Polish mathematician and cryptologist Henryk Zygalski then broke
    the Enigma again, using optical computing. Information was transferred to punch
    cards, and the cards were stacked and held up to a light to very quickly find
    the locations where the light passes through the whole stack.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 1938年，德国人改变了协议——而非硬件——移除了已知的消息头。波兰数学家和密码学家Henryk Zygalski随后再次破解了Enigma，使用了光学计算。信息被转存到打孔卡片上，卡片被堆叠起来并对着光线快速找到光穿过整个堆叠的位置。
- en: In 1939, the Germans increased the number of possible rotors to insert into
    the three slots from three to five. This increased the complexity beyond what
    Zygalski’s method could break. To break this version, the British switched to
    IBM Hollerith machines to perform similar computations at higher speeds.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 1939年，德国将可插入三槽的转子数量从三个增加到五个。这使得破解的复杂性超出了齐加尔斯基方法的能力。为了破解这一版本，英国转而使用 IBM Hollerith
    机器，以更高的速度执行类似的计算。
- en: '*Dolphin* was a stronger M3 protocol used by U-boats, including more swappable
    rotors and different headers. The *British Bombe* was designed based on the Polish
    Bomba and updated for the new task. The additional cryptology was done by Alan
    Turing, Gordon Welchman, and others, then the machine was designed and manufactured
    by Harold Keen of IBM.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '*Dolphin* 是一种更强的 M3 协议，德国 U 型潜艇使用了这一协议，包括更多可交换的转子和不同的头信息。*英国 Bombe* 是基于波兰的
    Bomba 设计的，并进行了更新以适应新的任务。额外的密码学工作由艾伦·图灵（Alan Turing）、戈登·韦尔奇曼（Gordon Welchman）等人完成，随后该机器由
    IBM 的哈罗德·基恩（Harold Keen）设计并制造。'
- en: '*Typex* was the British version of Enigma. Like the Germans, they made their
    own modifications to the commercial Enigma for their military communications.
    Typex was broken frequently by the B-Dienst—the German equivalent of Bletchley
    Park—using IBM Hollerith machines.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '*Typex* 是英国版的恩尼格玛。像德国人一样，他们对商业版恩尼格玛进行了修改，用于军事通信。Typex 经常被 B-Dienst（德国相当于布莱切利园的组织）破解，B-Dienst
    使用了 IBM Hollerith 机器。'
- en: In 1937, IBM president Thomas Watson met Hitler and received an award for the
    Hollerith machines’ “services to the Reich.” Hollerith machines were later leased
    from IBM by German concentration camps to enable the Holocaust’s precision—“timing
    so precise the victims were able to walk right out of the boxcar and into a waiting
    gas chamber.” They were used to merge big data sources such as census and medical
    records to produce lists of names and statuses of victims. IBM provided IT consultants
    to help with the software design, and to make monthly visits to service the machines
    on site.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 1937年，IBM 总裁托马斯·沃森（Thomas Watson）会见了希特勒，并因 Hollerith 机器对“帝国的贡献”获得了一项奖项。德国集中营后来向
    IBM 租借了 Hollerith 机器，用以实施大屠杀的精准化——“时机非常精确，受害者能够直接从货车走进等待的毒气室。”这些机器被用来合并人口普查和医疗记录等大数据源，以生成受害者的姓名和身份状态列表。IBM
    提供了 IT 顾问，帮助软件设计，并定期访问现场为机器提供维修服务。
- en: '*The Zuse Z3*'
  id: totrans-174
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*Zuse Z3*'
- en: Konrad Zuse was a German engineer who collaborated with the Nazi Party to build
    the Z3 machine for its military in 1941\. The *Z3* was an electromechanical machine
    using 2,000 electromechanical relay switches and a mechanical binary memory with
    64 addresses of 22 bits. It could run up to 10 instructions per second.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 康拉德·祖泽（Konrad Zuse）是德国工程师，1941年他与纳粹党合作，为其军方制造了 Z3 机器。*Z3* 是一台电子机械计算机，使用了 2000
    个电子机械继电器开关和一个机械二进制内存，具有 64 个地址，每个地址 22 位。它每秒能执行最多 10 条指令。
- en: In 1998, the Z3 was shown to be theoretically a Church computer, but only via
    a very obscure and impractical technicality. It could also potentially have very
    slowly simulated a von Neumann machine, but it was not used to do this.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 1998年，Z3 被证明从理论上讲是一个教会计算机，但这一结论仅仅基于一个非常晦涩且不切实际的技术细节。它也有可能非常缓慢地模拟冯·诺依曼机，但实际上并没有用于此目的。
- en: The Electrical Age
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 电气时代
- en: '*Vacuum tubes* (aka *valves*) were invented in 1904 by John Fleming as an efficient
    replacement for relays. Unlike relays, they have no moving parts; they’re purely
    electrical, meaning they can switch faster than their electromechanical counterparts.
    They’re still used today in analog audio amplification, such as in tube or valve
    guitar amplifiers ([Figure 1-21](ch01.xhtml#ch01fig21)).'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '*真空管*（又称 *电子管*）由约翰·弗莱明（John Fleming）于 1904 年发明，作为继电器的高效替代品。与继电器不同，真空管没有任何活动部件；它们是纯电气的，因此比电子机械继电器切换速度更快。今天它们仍被用于模拟音频放大，例如在管式或电子管吉他放大器中（[图
    1-21](ch01.xhtml#ch01fig21)）。'
- en: '![Image](../images/f0027-01.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../images/f0027-01.jpg)'
- en: '*Figure 1-21: A guitar amplifier made with vacuum tubes*'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-21：使用真空管制作的吉他放大器*'
- en: 'A vacuum tube looks and works like an Edison light bulb. A vacuum is created
    in a sealed glass tube. Inside the tube are three components: an anode, a cathode,
    and a heater. The anode and cathode are the terminals of the electrical circuit
    that is being switched on and off, so they have positive and negative voltages,
    respectively. The heater is the switch. When the heater is turned on, the heat
    allows electrons to escape from the cathode and travel through the vacuum to the
    anode, enabling current to flow and switching on the circuit. When the heater
    is turned off, electrons no longer have enough energy to do this, so the circuit
    is switched off.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 真空管外形和工作原理类似于爱迪生的灯泡。在密封的玻璃管内创建了真空。管内有三个组件：阳极、阴极和加热器。阳极和阴极是电路的端子，用于开关电流，因此分别具有正负电压。加热器是开关。当加热器开启时，热量使得电子从阴极逃逸，并通过真空移动到阳极，允许电流流动，从而打开电路。当加热器关闭时，电子没有足够的能量执行这一过程，电路因此关闭。
- en: 'When we restrict the heater to being either on or off, we have a digital switch
    that functions like a relay, forming a basic unit of purely electrical computation.
    (Alternatively, for audio and other signals amplification, we may allow the heater
    to have a continuum of heat levels, which cause a continuum of current sizes to
    flow in the main circuit, creating an analog amplification effect: the small heater
    control current turns a much larger main circuit current up and down.)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将加热器限制为开启或关闭时，我们就得到一个数字开关，其功能类似于继电器，构成纯电子计算的基本单元。（另外，为了音频和其他信号的放大，我们可能允许加热器具有连续的热量水平，从而在主电路中产生连续的电流大小，产生模拟放大效应：小的加热器控制电流使主电路中的大电流上下波动。）
- en: '*Pure Electronic Cryptology of World War II*'
  id: totrans-183
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*第二次世界大战的纯电子密码学*'
- en: Pure electronic machines appeared later in World War II than the more famous
    electromechanical ones. They have also been shrouded in secrecy but are sometimes
    argued to be the “first computers.”
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 纯电子机器出现在二战中，比更著名的机电机器晚。它们也一直处于保密状态，但有时被认为是“第一台计算机”。
- en: In 1942, the German naval Enigma was upgraded to use four instead of three rotor
    slots (called the “M4 model” by the Germans; its traffic was called “Shark” by
    the Allies). Brute-force cracking this level of cryptographic complexity required
    the American approach of throwing money at computing power by paying IBM to produce
    hundreds of new, fast, fully electronic and vacuum tube-based *American Bombes*.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 1942年，德国海军恩尼格玛（Enigma）升级为使用四个转子槽而不是三个（德国人称之为“M4型号”；盟军称其通信为“Shark”）。破解这一层次的密码复杂性需要美国的方法，即通过向计算能力投入资金，支付IBM生产数百台新的快速全电子真空管*美国炸弹机*。
- en: '*Fish* was a cipher produced by a different German cryptography machine, the
    Lorenz SZ42; this was not an Enigma, but it used similar rotors. It was discovered
    by the Allies later in the war than Enigma because its traffic was initially sent
    only over landline telegraph wires rather than radio, making it harder to intercept.
    It was broken by a Bletchley team led by Max Newman, using the *Colossus* machine
    designed and built by Tommy Flowers and his team in 1944, shown in [Figure 1-22](ch01.xhtml#ch01fig22).'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '*Fish*是由另一种德国密码机——洛伦茨SZ42产生的密文；这不是一台恩尼格玛（Enigma），但它使用了类似的转子。由于其通信最初仅通过地面电报线路而非无线电发送，因此更难以拦截，盟军直到战争后期才发现它。它是由由马克斯·纽曼（Max
    Newman）领导的布莱切利团队破译的，使用的是1944年由汤米·弗劳尔斯（Tommy Flowers）及其团队设计和建造的*科洛萨斯*机器，见[图1-22](ch01.xhtml#ch01fig22)。'
- en: '![Image](../images/f0028-01.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0028-01.jpg)'
- en: '*Figure 1-22: Colossus, Bletchley Park, 1943, with operators Dorothy Du Boisson
    and Elsie Booker*'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-22：科洛萨斯，布莱切利公园，1943年，操作员多萝西·杜·博伊森（Dorothy Du Boisson）和埃尔西·布克（Elsie Booker）*'
- en: Colossus was a fully electronic, vacuum tube-based machine, like the American
    Bombes, but it was also able to perform different functionalities if physically
    rewired for them. The British continued to use Colossus to break Russian codes
    up to the 1960s. Like the Z3, Colossus was only recently shown to be theoretically
    a Church computer, but only in a convoluted, speculative configuration requiring
    10 machines wired together and programmed with a novel virtual machine (VM), which
    was not done at the time.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 科洛萨斯是一台完全电子化、基于真空管的机器，类似于美国炸弹机，但如果重新接线，它也能执行不同的功能。英国人一直使用科洛萨斯解密俄国的密码，直到1960年代。像Z3一样，科洛萨斯最近才被证明理论上是教会计算机（Church
    computer），但这需要将10台机器连接在一起，并用一种新颖的虚拟机（VM）进行编程，这在当时并没有实现。
- en: '*ENIAC*'
  id: totrans-190
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*ENIAC*'
- en: '*ENIAC (Electronic Numerical Integrator and Computer)* was an American vacuum
    tube machine developed by John Mauchly and J. Presper Eckert in the final years
    of World War II. It was completed in 1945 and used by the US military for ballistics
    calculations. It remained in service after the war, doing hydrogen bomb calculations.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '*ENIAC（电子数值积分计算机）* 是一台由John Mauchly和J. Presper Eckert在二战末期开发的美国真空管计算机。它于1945年完成，并被美国军方用于弹道计算。战后，它继续用于氢弹计算。'
- en: Mauchly and Eckert were explicit in basing their design on Babbage’s Analytical
    Engine, translating each of its mechanical components into equivalent vacuum tubes.
    Like the Analytical Engine, this gives a fully general-purpose machine that can
    be programmed to execute arbitrary programs of instructions.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Mauchly和Eckert明确表示，他们的设计是基于Babbage的分析机，将其每个机械组件转化为等效的真空管。像分析机一样，这使得ENIAC成为一台完全通用的计算机，可以编程执行任意的指令程序。
- en: ENIAC was programmed by physically patching cables into sockets on its panels,
    as is sometimes still done today to “program” electronic synthesizer “patches.”
    Original photographs of its programmers writing programs in this way ([Figure
    1-23](ch01.xhtml#ch01fig23)) were sometimes mistaken for technicians simply maintaining
    the machine or setting it up to run programs written by other people. We now understand
    that this is how the actual programming itself was done and that these pictures
    show the actual programmers at work. As in Lovelace and Babbage’s time, and Bletchley’s,
    it was assumed that programming was “women’s work” and hardware was “men’s work.”
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: ENIAC通过物理连接电缆到面板上的插槽来编程，这种方式今天有时仍用于“编程”电子合成器“补丁”。其程序员以这种方式编写程序的原始照片（见[图1-23](ch01.xhtml#ch01fig23)）有时被误认为是技术员只是在维护机器或设置它以运行其他人编写的程序。我们现在知道，这就是实际编程的方式，这些照片展示的正是程序员们在工作时的情景。就像Lovelace和Babbage时代以及Bletchley时代一样，人们普遍认为编程是“女性的工作”，而硬件则是“男性的工作”。
- en: '![Image](../images/f0029-01.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0029-01.jpg)'
- en: '*Figure 1-23: ENIAC and programmers Betty Jean Jennings and Frances Bilas at
    work in the 1940s*'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-23：ENIAC和程序员Betty Jean Jennings及Frances Bilas在1940年代的工作照*'
- en: ENIAC can run any program (given enough memory), but like the Analytical Engine,
    it has a Harvard architecture; some might argue that the need to physically patch
    programs limits its claim to being the first computer. As with many other machines,
    we could reply that, in theory, someone could have programmed a VM to work around
    this problem. It was only recently that computer historians rediscovered that
    someone actually did this for ENIAC!
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: ENIAC可以运行任何程序（只要有足够的内存），但像分析机一样，它采用的是哈佛架构；有人可能会争辩，程序需要物理接线这一点限制了它成为第一台计算机的资格。对于许多其他机器，我们可以回应，理论上来说，某人本可以编写一个虚拟机来解决这个问题。直到最近，计算机历史学家才重新发现，实际上有人为ENIAC做到了这一点！
- en: '*Virtual Machine ENIAC*'
  id: totrans-197
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*虚拟机 ENIAC*'
- en: The ENIAC programmers Betty Jean Jennings, Marlyn Wescoff, Ruth Lichterman,
    Betty Snyder, Frances Bilas, and Kay McNulty eventually got tired of programming
    ENIAC by physically rewiring cables for each new program. So, as a quick hack,
    they designed a program with these wires that allowed the client program to be
    read from a panel of switches instead. This created a virtual machine in which
    a single fixed hardware program emulated a computer that could read higher-level
    programs from the switches.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: ENIAC的程序员Betty Jean Jennings、Marlyn Wescoff、Ruth Lichterman、Betty Snyder、Frances
    Bilas和Kay McNulty最终厌倦了每次编写新程序时都要物理重新接线。因此，作为一个快速的解决方案，她们设计了一个程序，利用这些电缆使客户端程序能够从开关面板中读取。这创造了一个虚拟机，其中单一的固定硬件程序模拟了一个能够从开关中读取更高级程序的计算机。
- en: 'Some people argue that “the first computer” was created at this moment, as
    a software rather than a hardware creation. This would be a beautiful story, but
    there’s still a problem: the architecture is still a Harvard architecture because
    the user program is stored in the physical switches and not in the computer’s
    main memory. This means that a program couldn’t modify its own code, which some
    people see as a requirement for the “first computer.”'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人认为“第一台计算机”是在这个时刻被创造出来的，作为一种软件而非硬件的创造。这个说法可能是个美丽的故事，但仍然存在一个问题：其架构仍然是哈佛架构，因为用户程序被存储在物理开关中，而不是计算机的主内存里。这意味着程序无法修改自身的代码，而有些人认为这正是“第一台计算机”的必要条件。
- en: The ability for a program to modify its own code is a fairly obscure requirement,
    rarely necessary outside of a few unsavory security applications and obfuscated
    coding contests. In theory, the ENIAC programmers *could* have continued to create
    a second layer of VM, which could have represented higher-level programs in the
    data rather than program memory. That would have created a von Neumann architecture,
    with programs capable of modifying their own code using the same VM idea the programmers
    had already invented. But they never felt the need to do this. Detractors argue
    that the *potential* for the ENIAC programmers to have done this is no more of
    a claim of “first computer” status than the potential for a Z3 programmer to have
    built VMs, and so they assert the virtual ENIAC missed being the first computer
    by a gnat’s whisker.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 程序修改自身代码的能力是一个相当晦涩的需求，除了少数不太正当的安全应用和混淆编码比赛，通常不需要这种能力。从理论上讲，ENIAC的程序员*本可以*继续创建第二层虚拟机，这层虚拟机可以将高级程序表示为数据而非程序内存。这将创建一种冯·诺依曼架构，程序可以使用程序员已经发明的虚拟机概念来修改自身代码。但他们从未觉得有这个需求。反对者认为，ENIAC程序员有潜力做到这一点，并不比Z3程序员有潜力构建虚拟机更能证明ENIAC是“第一台计算机”，因此他们断言虚拟ENIAC距离成为第一台计算机仅差一只小飞虫的胡须。
- en: '**NOTE**'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Speaking of gnats, the world’s first computer “bug”—and the origin of the
    modern use of the word—was caught and logged in 1947 by the programmers of another
    machine, the Harvard Mark II. It was a moth that had gotten stuck inside the machine,
    causing it to malfunction.*'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '*说到小飞虫，世界上第一个计算机“故障”——也是现代“bug”一词的起源——是在1947年由另一台机器哈佛Mark II的程序员捕捉并记录下来的。那是一只被卡在机器内部的飞蛾，导致了机器的故障。*'
- en: '*The Manchester Baby*'
  id: totrans-203
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*曼彻斯特婴儿*'
- en: In 1948, Frederic Williams, Tom Kilburn, and Geoff Tootill demonstrated the
    first “electronic stored-program computer” at what is now the University of Manchester.
    *Stored program* means what we now call a von Neumann architecture. The machine
    was officially named the Small-Scale Experimental Machine and nicknamed “the Baby”
    ([Figure 1-24](ch01.xhtml#ch01fig24)).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 1948年，弗雷德里克·威廉姆斯、汤姆·基尔本和杰夫·图蒂尔在现今的曼彻斯特大学展示了第一台“电子存储程序计算机”。*存储程序*指的就是我们现在称之为冯·诺依曼架构的东西。这台机器被正式命名为“小规模实验机”，并被昵称为“婴儿机”([图1-24](ch01.xhtml#ch01fig24))。
- en: The Baby’s CPU used around 500 vacuum tubes, together with diodes and other
    components. It implemented an instruction set of seven instructions. In modern
    terms, the Baby was a 32-bit machine, with 32 addresses each storing one 32-bit
    word.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 婴儿计算机的CPU使用了大约500个真空管，配合二极管和其他组件。它实现了七条指令集。用现代的术语来说，婴儿计算机是一个32位的机器，拥有32个地址，每个地址存储一个32位的字。
- en: The Baby was built from parts including the then broken-up Bletchley Colossus
    machines; it was quickly scrapped and cannibalized itself to provide parts for
    the later Manchester Mark I machine. A replica of the Baby can be seen today in
    Manchester’s Science and Industry Museum. This museum is especially interesting,
    as it also contains textile processing machines from the industrial revolution,
    which began in Manchester. These machines form a cultural connection between the
    Jacquard loom and the Manchester computers.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 婴儿计算机由包括当时已拆解的Bletchley Colossus机器的部件构建而成；它很快被报废并自我拆解，为后来的曼彻斯特Mark I机器提供了部件。如今，婴儿计算机的复制品可以在曼彻斯特的科学与工业博物馆看到。这个博物馆特别有趣，因为它还包含了来自工业革命时期的纺织加工机器，而工业革命正是在曼彻斯特开始的。这些机器在雅卡尔织机与曼彻斯特计算机之间建立了文化联系。
- en: '![Image](../images/f0031-01.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../images/f0031-01.jpg)'
- en: '*Figure 1-24: The Manchester Baby rebuilt in Manchester’s Science and Industry
    Museum, UK. Note the CRT memory in the center, also used as a display.*'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-24：曼彻斯特婴儿重新建立在英国曼彻斯特的科学与工业博物馆中。请注意中央的CRT存储器，也用作显示器。*'
- en: 'The Baby can probably be programmed to play *Space Invaders* on its green CRT
    screen: since the modern rebuild, similar games have been demonstrated for it
    both in emulation and on the real machine in what is perhaps the most extreme
    example of retro gaming.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 婴儿计算机或许可以被编程来在其绿色CRT屏幕上玩*太空入侵者*：自从现代重建以来，类似的游戏已经在仿真和真实机器上演示过，或许这就是复古游戏最极端的例子。
- en: Having a von Neumann architecture, the Baby is also able to run programs that
    modify their own code. Thus, by the time we reach the Baby, we appear to have
    an indisputable Church computer, as long as we’re happy that it could be “given
    as much memory as it asks for.” It’s not trivial to wonder how that could be done,
    though, as the Baby’s architecture is so specific to the 32×32-bit memory design.
    You *could* redesign it with a larger memory, but would that really be the same
    Baby, or a different machine?
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 采用冯·诺依曼架构，Baby 也能够运行修改自身代码的程序。因此，当我们到达 Baby 时，我们似乎拥有了一台无可争议的 Church 计算机，只要我们接受它可以“要求多少内存就给多少内存”。不过，如何做到这一点并非
    trivial，因为 Baby 的架构是如此特定于 32×32 位内存设计。你*可以*用更大的内存重新设计它，但那样的话，还是同一个 Baby 吗，还是另一台机器？
- en: '*The 1950s and Commercial Computing*'
  id: totrans-211
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*1950年代与商业计算*'
- en: UNIVAC (Universal Automatic Computer; [Figure 1-25](ch01.xhtml#ch01fig25)) was
    delivered to its first customer in March 1951\. It was Mauchly and Eckert’s commercialized
    version of their previous ENIAC, making it the first *commercial* general-purpose
    stored-program computer. Like ENIAC, UNIVAC was vacuum tube-based. CBS used one
    to make a successful statistical prediction of the US presidential election of
    1952, which brought fame and sales. Mauchly and Eckert’s company still exists
    as the modern Unisys Corporation.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: UNIVAC（通用自动计算机；[图 1-25](ch01.xhtml#ch01fig25)）于 1951 年 3 月交付给第一位客户。它是 Mauchly
    和 Eckert 之前 ENIAC 的商业化版本，使其成为第一台*商业*化的通用存储程序计算机。像 ENIAC 一样，UNIVAC 使用的是真空管。CBS
    使用它成功地预测了 1952 年美国总统选举的统计结果，带来了名声和销售额。Mauchly 和 Eckert 的公司仍然存在，现为现代的 Unisys 公司。
- en: '![Image](../images/f0032-01.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0032-01.jpg)'
- en: '*Figure 1-25: UNIVAC*'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-25：UNIVAC*'
- en: 'IBM was slow to understand that UNIVAC and other electronic computers would
    destroy their still-profitable tabulating machines business, with CEO Thomas Watson
    making the worst futurology prediction in human history in 1948: “I think there
    is a world market for about five computers.” After waking up to the new technology,
    IBM produced its own first commercial electronic computer in 1952, the IBM 701.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: IBM 对 UNIVAC 和其他电子计算机会摧毁他们仍然盈利的制表机业务的认识较慢，CEO Thomas Watson 在 1948 年做出了人类历史上最糟糕的未来预测：“我认为全球市场大约只有五台计算机。”在意识到新技术的重要性后，IBM
    于 1952 年生产了自己的第一台商业电子计算机——IBM 701。
- en: The Transistor Age
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 晶体管时代
- en: A *transistor* performs the same function as a vacuum tube, but it’s smaller,
    faster, and cheaper, and it consumes less power and is more reliable. Like tubes,
    transistors can be used for both analog and digital tasks (they’re found in analog
    audio amplifiers such as transistor radios and guitar amps), but for computing,
    they’re used only for their digital properties.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '*晶体管*执行与真空管相同的功能，但它更小、更快、更便宜，且消耗更少的电力，更加可靠。像真空管一样，晶体管既可以用于模拟任务，也可以用于数字任务（它们出现在诸如晶体管收音机和吉他放大器这样的模拟音频放大器中），但在计算中，它们仅用于其数字特性。'
- en: William Shockley, John Bardeen, and Walter Brattain discovered the transistor
    effect in 1947 and were awarded the Nobel Prize in Physics for it in 1956\. Work
    to commercialize transistors began in the 1950s in what is now Silicon Valley,
    and the technology became mainstream in the 1960s. Transistors remain the basic
    technology of computers today.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: William Shockley、John Bardeen 和 Walter Brattain 于 1947 年发现了晶体管效应，并因此获得了 1956
    年的诺贝尔物理学奖。1950 年代，硅谷现在所在的地方开始了晶体管的商业化工作，这项技术在 1960 年代成为主流。晶体管今天依然是计算机的基础技术。
- en: '![Image](../images/f0032-02.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0032-02.jpg)'
- en: '*Figure 1-26: A big transistor*'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-26：一个大型晶体管*'
- en: '*The 1960s and Big Transistors*'
  id: totrans-221
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*1960年代与大型晶体管*'
- en: The transistor “minicomputers” of the 1960s didn’t use microchips, but instead
    were made from the “big” kinds of transistors, about 1 cm long, that you would
    put in a breadboard circuit today ([Figure 1-26](ch01.xhtml#ch01fig26)). It’s
    still possible to make a CPU out of such transistors, and a few hobbyists do it
    for fun (for example, the MOnSter 6502 project by Eric Schlaepfer and Evil Mad
    Scientist Laboratories).
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 1960 年代的晶体管“迷你计算机”没有使用微芯片，而是由“大型”晶体管制成，约 1 厘米长，就像你今天会放在面包板电路上的晶体管一样（[图 1-26](ch01.xhtml#ch01fig26)）。仍然可以用这种晶体管制作
    CPU，且一些爱好者为了好玩会这么做（例如，Eric Schlaepfer 和 Evil Mad Scientist Laboratories 的 MOnSter
    6502 项目）。
- en: These computers filled a rack and included the classic PDP machines ([Figure
    1-27](ch01.xhtml#ch01fig27)) used heavily in early AI research. This was also
    the time when Seymour Cray began building Cray supercomputers, aiming to make
    the biggest and fastest machines for high-end users.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这些计算机填满了机架，包括早期人工智能研究中广泛使用的经典PDP机器（见[图1-27](ch01.xhtml#ch01fig27)）。这也是Seymour
    Cray开始建设Cray超级计算机的时期，旨在为高端用户制造最大、最快的机器。
- en: '![Image](../images/f0033-01.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0033-01.jpg)'
- en: '*Figure 1-27: A transistor-based 1960s PDP-11 mini-computer*'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-27：一台基于晶体管的1960年代PDP-11迷你计算机*'
- en: Uses of transistor computers in the 1960s included powering ARPANET, the predecessor
    of today’s TCP/IP-based internet, and Margaret Hamilton’s 1969 programming of
    the Apollo moon landing code in assembly language ([Figure 1-28](ch01.xhtml#ch01fig28)).
    The latter was actual rocket science, and required her to create the modern field
    of software engineering while searching for ways to make this highly critical
    code more correct.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 1960年代，晶体管计算机的应用包括为ARPANET供电，ARPANET是今天基于TCP/IP协议的互联网的前身，还有1969年Margaret Hamilton编写的阿波罗登月程序，它使用了汇编语言（见[图1-28](ch01.xhtml#ch01fig28)）。后者是真正的火箭科学，要求她在寻找方法使这一高度关键的代码更准确的同时，创建了现代软件工程领域。
- en: '![Image](../images/f0033-02.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0033-02.jpg)'
- en: '*Figure 1-28: Hamilton with a printout of her complete assembly program for
    Apollo 11*'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-28：Hamilton与她完整的阿波罗11号汇编程序打印件*'
- en: In 1965, Gordon Moore, the CEO of Intel, made an observation known since as
    Moore’s law. As you saw in the introduction, depending on who you ask and how
    you count, this law says that either the speed of computers or the number of transistors
    per area doubles every 18 months or every 2 years.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 1965年，英特尔首席执行官戈登·摩尔提出了一个观察结果，后来被称为摩尔定律。正如你在介绍中看到的，根据不同的人和计算方法，这一定律表示计算机的速度或每单位面积的晶体管数量每18个月或每2年就会翻倍。
- en: '*The 1970s and Integrated Circuits*'
  id: totrans-230
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*1970年代与集成电路*'
- en: The 1970s saw the widespread commercialization of *integrated circuits* (also
    called *ICs*, *microchips*, or *chips*). ICs had been theorized in 1952 in Britain
    by Geoffrey Dummer, though the 2000 Nobel Prize in Physics was awarded to Jack
    Kilby—who had heard Dummer talk about them in 1952—for his invention and patent
    of a practical version in 1958 at Texas Instruments.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 1970年代见证了*集成电路*（也叫*ICs*，*微芯片*或*芯片*）的广泛商业化。集成电路最早由Geoffrey Dummer在1952年于英国提出理论，尽管2000年诺贝尔物理学奖颁给了Jack
    Kilby——他在1952年曾听Dummer讲解过集成电路——因其在1958年于德州仪器公司发明并申请了实用版本的专利。
- en: IC technology allows electric transistor-based circuits to be miniaturized,
    so that the same wiring that filled a 1960s rack cabinet can fit on a “chip” of
    silicon the size of a fingernail. From an architectural view, chips are not very
    exciting—if you take the wiring diagram from a 1940s vacuum tube machine and just
    miniaturize it, then you get a chip. If you look at a chip through a microscope,
    you’ll see similar wiring patterns to, say, the wires on the back of a 1940s,
    1950s, or 1960s rack. The silicon chip is then “packaged” inside a larger, usually
    black lump of plastic, with larger metal pins connecting the fine inputs and outputs
    of the chip to the outside world, usually a printed circuit board ([Figure 1-29](ch01.xhtml#ch01fig29)).
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 集成电路技术使基于晶体管的电路得以微型化，从而使得原本需要填满1960年代机架柜的同样接线可以装入一个指甲大小的硅“芯片”中。从架构角度来看，芯片并不算特别吸引人——如果你拿一张1940年代真空管机器的接线图，然后把它缩小，你就得到了一个芯片。如果你用显微镜看芯片，你会看到类似于1940年代、1950年代或1960年代机架背面接线的图案。硅芯片通常被“封装”在一个较大的，通常是黑色的塑料块内，较大的金属引脚将芯片的精细输入输出与外部世界（通常是印刷电路板）连接起来（见[图1-29](ch01.xhtml#ch01fig29)）。
- en: '![Image](../images/f0034-01.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0034-01.jpg)'
- en: '*Figure 1-29: An Intel 4004 chip in its packaging*'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-29：一颗Intel 4004芯片及其封装*'
- en: The 1970s saw the birth of some of the oldest software that is still in use
    today. The UNIX operating system was built by Kenneth Thompson and Dennis Ritchie
    in this time ([Figure 1-30](ch01.xhtml#ch01fig30)) and has evolved into current
    Linux, FreeBSD, and macOS systems.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 1970年代诞生了许多今天仍在使用的最古老的软件。UNIX操作系统由Kenneth Thompson和Dennis Ritchie在这段时间内开发（见[图1-30](ch01.xhtml#ch01fig30)），并演变成了当前的Linux、FreeBSD和macOS系统。
- en: '![Image](../images/f0034-02.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0034-02.jpg)'
- en: '*Figure 1-30: Thompson and Ritchie creating UNIX on a teletype terminal*'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-30：Thompson和Ritchie在打字机终端上创建UNIX*'
- en: UNIX terminals of the time used typewriter-style print heads on paper rolls—like
    Babbage’s Difference Engine—and programmers would interact with the machine by
    typing commands on a keyboard; these commands were printed as they typed, along
    with their resulting outputs. This teletype system is the origin of the x-terminals
    used today in UNIX-like systems.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 当时的UNIX终端使用类似打字机的打印头和纸卷——就像巴贝奇的差分机一样——程序员通过键盘输入命令与机器互动；他们输入的命令会被打印出来，并伴随其结果输出。这种电传打字系统是今天UNIX类系统中使用的x-terminals的起源。
- en: In contrast to terminal-based interaction, Xerox (the photocopier company) researched
    graphical user interfaces at its Palo Alto Research Center, Xerox PARC. This included
    developing the first mouse, as well as the “desktop” metaphor, including files
    and folders based on physical filing cabinets.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 与基于终端的交互方式不同，施乐公司（Xerox）在其帕洛阿尔托研究中心（Xerox PARC）研究了图形用户界面。这包括开发了第一款鼠标，以及“桌面”隐喻，包含基于物理文件柜的文件和文件夹。
- en: This choice to base the interface with a computer on a middle management office,
    with its desks and filing cabinets—rather than on, say, a school, art gallery,
    or shop—has been with us, and making computing more boring than it should be,
    ever since. This may be starting to change, with the rise of handheld interfaces
    such as Android and TV-based “10-foot” interfaces such as Kodi, which provide
    feasible alternatives based on “apps.”
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这种将计算机界面建立在中层管理办公室、带有办公桌和文件柜的选择——而不是例如学校、艺术画廊或商店——自那时起便一直伴随着我们，并使计算变得比应有的更为乏味。随着Android等手持界面的兴起，以及基于电视的“10英尺”界面（如Kodi）的出现，这一现象可能正在开始发生变化，后者提供了基于“应用程序”的可行替代方案。
- en: '*The 1980s Golden Age*'
  id: totrans-241
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*1980年代的黄金时代*'
- en: Any author covering computer history eventually reaches a point where the story
    overlaps with their own lifetime, and from then on, they may become somewhat biased.
    For this author, it occurs here, so you might want to find alternative accounts
    from others to balance mine out.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 任何讲述计算机历史的作者，最终都会遇到故事与自己一生重叠的时刻，从那时起，他们可能会变得有些偏颇。对于本书作者来说，这个时刻就发生在这里，所以你可能希望找到其他人的替代性叙述，以平衡我的观点。
- en: 'The 1980s was the golden age of computer architecture: for the first time,
    electronic computers became cheap and small enough to be mass-produced and bought
    by normal people to use in their homes. As shown in [Figure 1-31](ch01.xhtml#ch01fig31),
    this may have been the best time in human history to be a kid interested in computers
    because you would get a proper computer for Christmas, with direct access to its
    architecture, at a time before operating systems hid the architecture away from
    the user.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 1980年代是计算机架构的黄金时代：电子计算机首次变得足够便宜且小巧，能够大规模生产并被普通人购买，用于家庭中。如[图 1-31](ch01.xhtml#ch01fig31)所示，这可能是人类历史上最适合对计算机感兴趣的孩子的时代，因为你能在圣诞节收到一台真正的计算机，直接接触到其架构，那时操作系统还没有将架构隐藏在用户面前。
- en: '![Image](../images/f0035-01.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0035-01.jpg)'
- en: '*Figure 1-31: Home computing in the 1980s: a happy child with their first computer*'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-31：1980年代的家庭计算机：一个开心的孩子与他们的第一台计算机*'
- en: These machines were based initially on 8-bit CPUs, such as the 6502 used in
    the Commodore 64 and Apple II, and then based on 16-bit CPUs, such as the Motorola
    68000 used in the Amiga and Atari ST. This period—especially in retro gaming—is
    known as the 8-bit era and then later the 16-bit era; it’s looked back on with
    fondness and nostalgia by many who were there, and by many who weren’t.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这些机器最初基于8位CPU，例如在Commodore 64和Apple II中使用的6502，然后基于16位CPU，例如在Amiga和Atari ST中使用的摩托罗拉68000。这一时期——尤其是在复古游戏中——被称为8位时代，后来是16位时代；许多曾经经历过的人以及许多没有经历过的人，都会怀念并带着怀旧之情回顾那个时期。
- en: The IBM 5150 PC launched in 1981, based on the Intel 8088 chip. IBM and others
    sold this and other PCs during the 1980s for use in business offices. The PC concept
    is the polar opposite of the heterogeneous, architecture-driven home computer
    market for two reasons. First, it enforces a standardized architecture on the
    computer components so that multiple manufacturers can produce them to be compatible
    with one another. Second, it wraps all the hardware under a strict operating system,
    which controls all access to it via a standardized interface. IBM could use its
    market clout to enforce standards on components, so it could buy them from the
    cheapest suppliers and make money by stamping its brand on assembled PCs.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 1981年推出的IBM 5150 PC，基于Intel 8088芯片。IBM及其他公司在1980年代销售这款及其他PC，用于商业办公。PC概念与异构、架构驱动的家庭计算机市场正好相反，原因有两个。首先，它在计算机组件上强制执行标准化架构，以便多个制造商能够生产互相兼容的组件。其次，它将所有硬件封装在严格的操作系统下，操作系统通过标准化接口控制对硬件的所有访问。IBM能够利用其市场影响力强制执行组件标准，从而可以从最便宜的供应商处购买并通过在组装的PC上加盖品牌赚钱。
- en: In a reaction to the proprietary operating systems being installed on PCs and
    larger computers, the GNU (recursively standing for “GNU’s Not Unix”) project
    and Free Software movement were created in this decade by Richard Stallman—this
    later led to the Linux-based systems and philosophies that we use today.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应对在PC和大型计算机上安装专有操作系统的情况，GNU（递归代表“GNU不是Unix”）项目和自由软件运动在这一十年间由理查德·斯托曼创建——这后来促成了我们今天使用的基于Linux的系统和理念。
- en: We will study this period in more detail in [Chapter 11](ch11.xhtml).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第11章](ch11.xhtml)中更详细地研究这一时期。
- en: '*The Bland 1990s*'
  id: totrans-250
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*1990年代的单调*'
- en: The 1990s was a bland, boring, beige decade. It was driven by a commercial focus
    in the industry that switched from treating users as programmers and community
    members to users as customers and consumers of software products, such as word
    processors and spreadsheets. During this time, schools stopped teaching computer
    science and (under the heavy influence of corporate lobbying by their creators)
    taught the use of commercial office software.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 1990年代是一个单调、无聊、米色的十年。这个十年的特点是商业化的行业焦点，从将用户视为程序员和社区成员转变为将用户视为客户和软件产品（如文字处理器和电子表格）的消费者。在此期间，学校停止教授计算机科学，受其创作者的公司游说的重压，转而教授商业办公软件的使用。
- en: Computer architecture became dominated by the personal computer (PC) standard
    architecture, which had been used in office computing during the 1980s but was
    now pushed everywhere by the PC corporations, including on homes and schools.
    Closed source operating systems were pushed as part of the PC package, making
    it hard for users to see anything “under the hood” of their machines.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机架构变得由个人计算机（PC）标准架构主导，这种架构在1980年代用于办公计算，但现在被PC公司推向各个领域，包括家庭和学校。封闭源代码的操作系统作为PC套餐的一部分被推广，使得用户很难看到机器的“内部”。
- en: Physically, these machines appeared as nearly identical “beige boxes,” as in
    [Figure 1-32](ch01.xhtml#ch01fig32), and the general drabness of this middle management-style
    computing culture was later caricatured through Apple’s “I’m a PC” TV commercials,
    which portrayed the PC as a generic middle manager with a boring beige outfit.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 从外观上看，这些机器几乎是完全相同的“米色盒子”，如[图1-32](ch01.xhtml#ch01fig32)所示，这种中层管理风格的计算文化的普遍单调，后来被苹果的“我是PC”电视广告夸张地讽刺，广告中将PC描绘成一个穿着无聊米色套装的普通中层经理。
- en: As Moore’s law reliably predicted, processor speeds doubled every 18 months;
    this was the standard measure of how good your computer was, and many would build
    a new one every couple of years to take advantage of the new speed.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 正如摩尔定律可靠预测的那样，处理器速度每18个月翻一番；这是衡量计算机性能的标准，许多人会每隔几年就组装一台新电脑，以利用新的速度提升。
- en: '![Image](../images/f0036-01.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0036-01.jpg)'
- en: '*Figure 1-32: A 1990s desktop*'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-32：1990年代的桌面*'
- en: Related to the move to operating systems was the move from programming in assembly
    and interpreted languages, such as BASIC, to compiled languages. When languages
    are compiled, their authors can choose to conceal the source code so that users
    can no longer see how they work or learn from them by changing them. Compilers
    had been developed since Grace Hopper’s work in the 1950s, and were used in high-end
    computing, but this was the first time they and their generated code arrived in
    homes.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 与操作系统的转变相关的是，从汇编语言和解释型语言（如BASIC）编程到编译语言编程的转变。当语言被编译时，作者可以选择隐藏源代码，使用户无法再查看其工作原理或通过修改代码来学习它们。编译器自20世纪50年代Grace
    Hopper的工作以来便不断发展，最初应用于高端计算，但这是它们及其生成的代码首次进入普通家庭。
- en: The computer games industry similarly became professionalized, separating consumers,
    who could only buy and play dedicated consoles and games, from commercial developers
    with the money to access specialist programming tools. Games were sometimes fun
    to play, but not as much fun as they used to be to write.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机游戏产业同样实现了职业化，将只能购买并玩专用游戏机和游戏的消费者与能够接触到专业编程工具的商业开发者区分开来。游戏有时很有趣，但不像以前那样写起来那么有趣。
- en: The World Wide Web went online at CERN in 1990 and grew in popularity, leading
    to the dot-com investment craze at the end of the decade. As more hackers and
    eventually consumers joined the web, dedicated rackmounted server computer designs
    became popular, beginning with the Compaq ProLiant in 1993\. Like the Manchester
    Baby and 1960s minicomputers, these were designed to be stacked in 19-inch rack
    units, but to be always on with high reliability.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 万维网于1990年在CERN上线并逐渐普及，最终引发了90年代末的互联网泡沫投资狂潮。随着更多黑客和最终消费者加入互联网，专用的机架式服务器设计逐渐流行，始于1993年的Compaq
    ProLiant。像曼彻斯特宝宝和1960年代的迷你计算机一样，这些设计被构建成可以堆叠在19英寸的机架单元中，且必须具备高度的可靠性，始终保持在线状态。
- en: For the early modem-connected elite, 1993 also saw the birth of Linux and the
    beginnings of its GNU-inspired international authors figuring out how to communicate
    and code with one another at the level of architecture and systems programming.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 对于早期通过调制解调器连接的精英群体，1993年也是Linux诞生的一年，GNU启发的国际作者们开始探索如何在架构和系统编程的层面上相互沟通和编写代码。
- en: '*The 2000s and Reconnecting the Community*'
  id: totrans-261
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*2000年代与重建社区*'
- en: The PC architecture of commodity components plus operating system continued
    throughout the 2000s. Moore’s law, and the consequent building or buying of a
    new doubled-speed computer every couple of years, continued. Machines used the
    same basic PC computer design, with various interfaces and components getting
    upgraded for speed. Internet speeds also increased, enabling streaming of videos
    as well as the transfer of text and images. Servers were reduced in size to *blades*,
    many of which could be packed together in a single rack unit.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 由通用组件构成的PC架构以及操作系统在2000年代持续发展。摩尔定律和每隔几年就要购买或组建一台速度翻倍的新计算机的趋势依旧持续。机器使用相同的基本PC计算机设计，不同的接口和组件逐步升级以提高速度。互联网速度也在不断提升，推动了视频流媒体以及文本和图像的传输。服务器的体积被缩小成*刀片*，其中许多可以被集中安装在一个机架单元中。
- en: 'Enabled by these advances, Linux matured into a realistic alternative system
    to the proprietary operating systems previously bundled with PCs. Many of the
    people involved in older computing communities returned and joined the Linux movement.
    We realized that things had to go via the operating system route rather than raw
    architecture; for free software advocates, this was a good thing: it removed any
    dependency we had on any particular hardware companies. This was now okay because
    the operating system was free software and thus no one had to be locked in to
    buying anyone’s specific products. With this hindsight, the 1980s was perhaps
    not so great because everyone was forced to develop on some non-free architecture
    platform and was thus utterly dependent on their corporate owners. The 1990s saw
    a reduction in freedom as a multitude of these corporations and platforms were
    replaced by a single dominant PC operating system corporation and platform, but
    since then, Linux life has become even better than the 1980s and 1990s, as we
    have an open platform and many competing hardware suppliers implementing it.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 借助这些进展，Linux逐渐发展成了一个现实的操作系统替代方案，成为了之前与PC捆绑的专有操作系统的替代品。许多参与过早期计算机社区的人回归并加入了Linux运动。我们意识到，未来的发展必须依赖于操作系统，而非原始架构；对自由软件的倡导者来说，这是一个好事：它消除了我们对任何特定硬件厂商的依赖。现在可以接受这一点，因为操作系统是自由软件，因此没有人会被迫购买任何特定厂商的产品。从这个角度回看，1980年代或许并不那么美好，因为每个人都被迫在某种非自由的架构平台上开发，完全依赖于这些平台的公司所有者。1990年代则看到自由度的降低，众多公司和平台被一个主导的PC操作系统公司和平台取代，但自那时以来，Linux的生活比1980年代和1990年代更加美好，因为我们拥有一个开放的平台，并且许多硬件供应商都在实施它。
- en: Much of the other open source software we use today developed rapidly alongside
    Linux, such as Firefox, Python, MySQL, and Apache. In many cases, these tools
    have older origins, but they only grew to a critical mass of developers and users
    in the 2000s.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 我们今天使用的许多其他开源软件也在Linux的推动下迅速发展，如Firefox、Python、MySQL和Apache。虽然在许多情况下，这些工具有更早的起源，但它们直到2000年代才迎来了开发者和用户的关键群体。
- en: The programmers working on the Linux operating system itself got to see and
    work with the underlying architecture, but for everyone else, architecture was
    generally still under the hood, as in the 1990s.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 为Linux操作系统本身工作的程序员得以看到并处理底层架构，但对其他人来说，架构一般仍然隐藏在幕后，就像在1990年代一样。
- en: '*The 2010s and the End of Moore’s Law*'
  id: totrans-266
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*2010年代与摩尔定律的终结*'
- en: During the 1990s and 2000s we happily assumed that the clock speeds of our processors
    would double every couple of years—and they did. Moore’s law became a self-fulfilling
    prophecy as Silicon Valley chipmakers used it as a target to be reached.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在1990年代和2000年代，我们愉快地假设处理器的时钟频率每隔几年就会翻倍——而它们确实翻倍了。摩尔定律成为了一个自我实现的预言，硅谷的芯片制造商将其作为目标来追求。
- en: However, this all fell apart in the 2010s. Transistor manufacturing technology
    did continue to double the number of transistors per area, but clock speeds maxed
    out by 2010, at around 3.5 GHz. Suddenly, processors weren’t getting faster anymore.
    This is due to the fundamental laws of physics around computation speed and heat.
    During the Moore’s law period, the temperature of processors had also been rising
    along with speed; larger and more powerful fans and other cooling systems such
    as water cooling were needed. The transistors got smaller, but the fans got bigger.
    If this trend had continued through the 2010s, we would now have processors hotter
    than the surface of the sun.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，所有这一切在2010年代崩溃了。晶体管制造技术虽然依然持续每单位面积翻倍，但时钟频率在2010年左右达到了极限，约为3.5 GHz。突然间，处理器不再变得更快了。这是由于计算速度和热量的物理学基本定律。在摩尔定律时期，处理器的温度随着速度的提升而上升；因此需要更大、更强力的风扇和其他冷却系统，如水冷。晶体管变得更小，但风扇却变得更大。如果这种趋势在2010年代继续下去，我们现在的处理器温度可能已经比太阳表面还要高。
- en: A closely linked concept is power consumption. As chips give off more heat,
    they consume more power, and this decade also saw the beginnings of a push toward
    lower-power, more portable computing, especially in the form of smartphones. This
    was the decade when we switched from looking up to the sky to looking down at
    screens in our hands.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 一个紧密相关的概念是功耗。随着芯片释放更多的热量，它们消耗的电力也更多，这一年代也见证了向低功耗、更便携的计算转型的开端，特别是在智能手机的形式上。这是我们从仰望天空转向低头看手中屏幕的十年。
- en: As mentioned in the introduction, the end of Moore’s law has created what Turing
    Award winners John Hennessy and David Patterson have described as “a new golden
    age of architecture.” Where the previous two decades saw computer architecture
    stagnate as a field, relying on advances in fabrication technologies to create
    regular gains, the field is now wide open again for radically new ideas. We can’t
    make computers faster via the speed form of Moore’s law, but we can still fit
    more and more transistors onto chips with its density form. We can now consider
    making everything parallel, performing many operations at once, rather than one
    at a time.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 如前言所述，摩尔定律的结束催生了图灵奖得主约翰·亨内西和大卫·帕特森所描述的“计算架构的新黄金时代”。在过去的二十年里，计算架构作为一个领域停滞不前，依赖于制造技术的进步来获得稳定的进展，而现在该领域再次对激进的新想法敞开大门。我们不能通过摩尔定律的速度形式使计算机变得更快，但我们仍然可以通过其密度形式将更多的晶体管集成到芯片上。现在我们可以考虑将所有操作都并行执行，一次进行多个操作，而不是一个一个地执行。
- en: As you might expect, the 2010s were characterized by an explosion of new ideas,
    architectures, hardware, and software, all to enable parallelization. A key computer
    science question of our time is how much programmers need to worry about this.
    In one possible future, programmers will continue to write sequential programs,
    and new kinds of parallel compilers will figure out how to turn step-by-step instructions
    into parallel executions. In another future, we might find this is not possible,
    and programmers will have to write explicitly parallel programs themselves. This
    will completely change the nature of programming and the kinds of skills and thought
    processes that programmers need.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能预期的那样，2010年代的特征是新想法、架构、硬件和软件的爆炸式增长，所有这些都旨在实现并行化。我们时代的一个关键计算机科学问题是，程序员需要在多大程度上关心这一点。在某种可能的未来，程序员将继续编写顺序程序，而新的并行编译器将能够将逐步指令转化为并行执行。另一个可能的未来是，我们可能发现这种方法不可行，程序员必须自己编写明确的并行程序。这将完全改变编程的性质以及程序员所需的技能和思维方式。
- en: While there remain many parallel architectures still to be explored—and hundreds
    of university researchers and startup companies now trying to explore and exploit
    them—the 2010s saw three major new types of parallel architecture succeeding in
    the real world.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然仍有许多并行架构尚待探索——目前有成百上千的大学研究人员和创业公司在尝试探索并利用这些架构——但2010年代见证了三种主要的新型并行架构在现实世界中的成功应用。
- en: First, and most basically, *multicore* processors are simply chips manufactured
    to contain more than one copy of a CPU design. The decade began with duo-core
    systems and progressed through quad, eight, and even more cores. If you were to
    run just a single program on these machines, then the programmer would have to
    care about parallelism. But most current computers run an operating system program
    that in turn enables many programs to run concurrently, sharing the computer’s
    resources between them. A typical desktop machine might run 10 to 20 processes
    concurrently during normal operation through this arrangement, so adding *N* multicores
    gives a factor *N* speed up, but only up to this number of processes. Multicores
    will not scale very well beyond this if they are asked to run ordinary programs.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，也是最基本的，*多核*处理器实际上是制造含有多个CPU设计副本的芯片。这一十年以双核系统开始，逐步发展到四核、八核，甚至更多的核心。如果你只在这些机器上运行一个程序，那么程序员就需要关心并行性。但大多数当前的计算机运行操作系统程序，这个程序使得许多程序能够并行运行，共享计算机的资源。典型的桌面机器在正常操作时可能同时运行10到20个进程，通过这种方式安排，因此增加*N*个多核处理器可以提供*N*倍的加速，但仅限于这些数量的进程。如果要求多核处理器运行普通程序，它们的扩展性就不会很好。
- en: Second, cluster computing, shown in [Figure 1-33](ch01.xhtml#ch01fig33), is
    another form of parallelism in which many conventional single-core or multicore
    machines are weakly linked together. Computing work is then split into many independent
    chunks that can each be assigned to a machine. This requires programs to be written
    in a specific style, based around the split into independent jobs, and works only
    for certain types of tasks where such splits are possible.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，集群计算，如[图 1-33](ch01.xhtml#ch01fig33)所示，是另一种并行处理形式，其中许多传统的单核或多核机器被弱连接在一起。计算工作被分割成许多独立的块，每个块可以分配给一台机器。这要求程序以特定的方式编写，围绕着将任务分割成独立工作进行，并且只适用于某些类型的任务，在这些任务中，分割是可能的。
- en: '![Image](../images/f0039-01.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0039-01.jpg)'
- en: '*Figure 1-33: A 2010s parallel supercomputing cluster*'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-33：2010年代的并行超算集群*'
- en: 'Cluster computing has been especially useful for “big data” tasks where we
    usually want to repeat the same processing independently on many data items, and
    then collate the results (this is known as *map-reduce*). The Search for Extraterrestrial
    Intelligence project (SETI@home) pioneered this approach in the 1990s, using compute
    time on millions of home computers donated by their users to run in the background,
    analyzing big data from radio telescopes to look for alien messages. The method
    is also used by search engine companies: for example, a company might assign one
    commodity Dell PC out of many in a large warehouse to be responsible for storing
    all the locations on the web containing one particular word, and handling queries
    about that word. During the 2010s, the underlying map-reduce process was abstracted
    and open sourced by the Hadoop and Spark projects, which enabled everyone to easily
    set up and use similar clusters.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 集群计算在“大数据”任务中特别有用，通常我们希望在许多数据项上独立重复相同的处理，然后合并结果（这被称为*map-reduce*）。外星智慧生命搜索项目（SETI@home）在1990年代率先采用了这种方法，利用成千上万台用户捐赠的家用计算机的计算时间在后台运行，分析来自射电望远镜的大数据，寻找外星信息。这种方法也被搜索引擎公司采用：例如，一家公司可能会从一个大型仓库中的许多普通戴尔PC中，指定一台专门存储包含某个特定词的所有网页位置并处理关于该词的查询。在2010年代，Hadoop和Spark项目将基础的map-reduce过程进行了抽象并开源，使得每个人都能轻松地设置和使用类似的集群。
- en: The third approach, and most interesting architecturally, has been the evolution
    of graphics cards (also called graphics processing units, or GPUs) into general-purpose
    parallel computing devices. This presents a completely new silicon-level design
    concept that also requires a new style of programming, somewhat similar to cluster
    programming. Now that its graphical roots have been left behind, the concept is
    continually evolving into many novel architectures, such as recent tensor and
    neural processing units found on mobile phones.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种方法，最具建筑意义的，是显卡（也称为图形处理单元，或GPU）演变成通用并行计算设备。这提出了一种全新的硅级设计概念，同时也需要一种新的编程方式，类似于集群编程。由于其图形根基已被抛弃，这一概念不断演变为许多新型架构，例如最近在手机上找到的张量和神经处理单元。
- en: It’s not clear whether the concept of a “programmer” will survive if some of
    these new parallel architectures become dominant; for example, we might “program”
    machines by creating specific parallel circuits in hardware, where everything
    happens at the same time, rather than thinking of a “program” as a set of instructions
    to be run in series.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些新的并行架构中的一些变得主导，那么“程序员”这一概念是否还能存续尚不明确；例如，我们可能通过在硬件中创建特定的并行电路来“编程”，在这种情况下，一切同时发生，而不是把“程序”视为一组需要顺序执行的指令。
- en: '*The 2020s, the Cloud, and the Internet of Things*'
  id: totrans-280
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*2020年代、云计算和物联网*'
- en: This is the current decade at the time of writing, so any trends identified
    are somewhat speculative. With that said, the systems that we can see in development
    labs today suggest that the present decade will see a fundamental split of architectures
    into two main types.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在写作时的当前十年，因此所识别的任何趋势都有些许推测性。话虽如此，我们可以在当前开发实验室中看到的系统表明，当前十年将会看到架构在两种主要类型之间的根本性分裂。
- en: First, increasingly small and cheap devices will be embedded into more and more
    objects in the real world. This concept, known as the *Internet of Things (IoT)*,
    promises to see smart sensors and computers in cities, factories, farms, homes,
    and pretty much everywhere else.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，越来越小且廉价的设备将被嵌入到现实世界中的越来越多物体中。这个概念被称为*物联网（IoT）*，预计将在城市、工厂、农场、家庭以及几乎所有其他地方看到智能传感器和计算机。
- en: “Smart cities” will be covered in these devices to enable the monitoring of
    every individual vehicle and pedestrian, to make traffic control and use of city
    facilities more efficient. “Smart factories” will have tiny devices attached to
    every item of stock and track them through the manufacturing process. Smart transport,
    retail, and homes will track the same items right through their supply chains,
    “from farm to fork” in the case of food. For example, your fridge will sense that
    you’re running out of cheese, using either the weight of your cheesebox or machine
    vision looking for cheese, and automatically place an order to your local supermarket
    to replenish it. The supermarket will aggregate these orders and balance the demand
    with orders from their distribution centers. Small autonomous robots will then
    deliver your cheese from the supermarket to your doorstep.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: “智慧城市”将被这些设备覆盖，用于监控每一辆车和行人的动态，使交通管理和城市设施的使用更加高效。“智慧工厂”将为每件库存物品配备微型设备，并在整个制造过程中追踪它们。智慧交通、零售和家庭将追踪同样的物品，贯穿整个供应链，对于食品而言，就是“从农场到餐桌”。例如，你的冰箱会感知到你快没有奶酪了，通过称量奶酪盒的重量或机器视觉识别奶酪，并自动向当地超市下单补充。超市会聚合这些订单，并将需求与来自配送中心的订单进行平衡。小型自动化机器人随后会把奶酪从超市送到你的家门口。
- en: 'The second trend is in the opposite direction. The low-power IoT devices won’t
    do much computing, but will instead exist primarily to collect and act upon “big
    data” in the world. This data will then be processed on massive scales in dedicated
    computing centers: buildings the size of warehouses that are packed with computing
    power.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个趋势则是朝着相反的方向发展。低功耗物联网设备不会进行大量计算，而是主要用于收集和处理世界上的“大数据”。这些数据将会在专门的计算中心进行大规模处理：这些计算中心是类似仓库大小的建筑，内满了计算能力。
- en: Computing centers are related to *data centers*, similar-looking buildings already
    in existence that exist primarily to *store* data and make it available over the
    web, rather than to perform heavy computation on it. This type of computing appeared
    first at search engine companies, which used many cheap commodity PCs running
    together to process web crawls and searches. Search companies, and their online
    shopping peers, discovered they could make a profit by hiring out the spare machines
    that were sitting idle for general computing use by customers. This style of computing
    is quite like the big machines of the 1960s and 1970s, whose users would dial
    in from terminals and share time on them. (Perhaps Thomas Watson’s guess that
    there is a world market for only five computers will actually turn out to be true
    if we count each of these cloud computing centers as one computer and ignore the
    IoT devices.)
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 计算中心与*数据中心*相关，数据中心是一些外观相似的建筑，主要用于*存储*数据并通过网络提供数据，而不是进行重计算。这种计算方式最早出现在搜索引擎公司，它们使用许多便宜的商品PC联合运行，用来处理网页爬虫和搜索。搜索公司及其在线购物同行发现，他们可以通过租出闲置的机器来为客户提供一般计算服务，从中获得利润。这种计算方式与1960年代和1970年代的大型机器非常相似，那时的用户通过终端拨号共享计算时间。（也许托马斯·沃森曾猜测全球只需要五台计算机，如果我们把这些云计算中心看作是一台计算机，忽略物联网设备，这个猜测或许最终会成为现实。）
- en: The IoT devices create a particular interest in low-energy design, but related
    energy issues also occur in huge cloud computing centers. These buildings can
    use as much power as factories, give off significant heat, and cost a significant
    amount to run. Computing centers powered most of the world’s video calls and collaboration
    tools during the COVID-19 pandemic, enabling many jobs to switch to remote work
    for the first time. Some computing centers saw shutdowns in 2022 due to an extreme
    heatwave. Recently, some computing centers have been deliberately located in places
    such as the Arctic to make use of the natural cooling.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网设备引发了对低能耗设计的特别关注，但相关的能源问题同样出现在巨大的云计算中心。这些建筑物的用电量可以与工厂相当，产生大量热量，而且运行成本也相当高。计算中心在COVID-19大流行期间为全球的视频通话和协作工具提供了大部分计算支持，使许多工作第一次转向远程工作。一些计算中心由于极端热浪在2022年出现了停运的情况。最近，一些计算中心故意建在北极等地方，以利用自然降温。
- en: So, like Moses, in this decade we will download from the cloud onto our tablets.
    The two trends of the IoT and the cloud are likely to continue and become more
    extreme during the 2020s, pulling architecture in two opposite directions. Medium-sized
    desktop computers seem likely to fall in importance.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，就像摩西一样，在这个十年里，我们将从云端下载到我们的平板电脑上。 物联网和云的两个趋势在 2020 年代可能会继续并变得更加极端，将架构拉向两个相反的方向。
    中型台式计算机看起来可能会在重要性上下降。
- en: Already we’re getting used to computing on physically small devices such as
    tablet computers and the Nintendo Switch, which are starting to make larger desktop
    machines look a bit silly. “A computer on every desk” was the aim in the 1990s,
    but these are disappearing and being replaced by a mix of computers in our pockets,
    streets, and cloud centers. Similar setups have been suggested previously from
    time to time, including 1950s dial-in mainframes and 1990s “thin clients,” but
    in the 2020s they seem to be taking off via mobile phones, Amazon Echo, Nest home
    automation, and Arduinos, as well as cloud providers such as Amazon Web Services,
    Microsoft Azure, and Google Cloud Platform.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经开始习惯在诸如平板计算机和任天堂 Switch 等体积较小的设备上进行计算，这开始让较大的台式机看起来有些愚蠢。“每个桌子上都有一台计算机”是
    1990 年代的目标，但现在这些设备正在消失，并被我们口袋里、街上和云中心的计算机所取代。 以前不时提到过类似的设置，包括 1950 年代的拨号主机和 1990
    年代的“瘦客户端”，但在 2020 年代，它们似乎通过手机、亚马逊 Echo、Nest 家庭自动化和 Arduino，以及亚马逊网络服务、微软 Azure
    和谷歌云平台开始起飞。
- en: So Who Invented the Computer?
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 那么，谁发明了计算机？
- en: The modern concept of computation was defined by Church. Commercial electronic
    machines of the 1950s, beginning with UNIVAC, through 1960s minicomputers and
    1970s microchips up to the present day seem clearly recognizable as computers.
    But should anything before them be credited as “the first computer”?
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 现代计算概念由 Church 定义。 20 世纪 50 年代的商业电子设备，从 UNIVAC 开始，到 60 年代的小型计算机和 70 年代的微处理器直至今天，都清晰地可识别为计算机。
    但是在它们之前，是否应该认为有什么东西是“第一台计算机”？
- en: The Manchester Baby is a Church computer if you are happy that it could be “given
    as much memory as it asks for,” but it’s not very clear how this would be done.
    Looking at later commercial machines gives more of a feeling that they could easily
    be extended with more memory, for example, by plugging in extra circuit boards
    or hard disks. But in principle they all still have the same problem as the Baby.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，曼彻斯特 Baby 就是 Church 计算机，因为它可以“提供所需的内存”，但如何做到这一点并不十分清楚。 查看后来的商业机器更容易让人感觉到它们可以轻松地通过插入额外的电路板或硬盘进行扩展，例如，通过插入额外的电路板或硬盘。
    但原则上它们仍然与 Baby 有相同的问题。
- en: ENIAC-initial has the potential to be a Church computer if programmed in a certain
    VM way. ENIAC-VM actually *was* programmed that way, but was still a Harvard architecture.
    It needed another layer of unrealized VM to get to RAM programs. Colossus and
    Zuse Z3 programmers could theoretically have done all of this, too—but didn’t.
    The same goes for Analytical Engine programmers.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果以某种虚拟机方式对 ENIAC-初始编程，ENIAC-VM 实际上*是*以这种方式编程的，但仍然是哈佛架构。 它需要另一层未实现的虚拟机才能达到 RAM
    程序。 科洛索斯和祖斯 Z3 程序员理论上也可以完成所有这些工作，但他们没有。 分析引擎程序员也是如此。
- en: IBM has been doing big data analytics on machines described by the media as
    “supercomputers” since the 1890s, but data analytics isn’t general Church computation
    unless you can find a way to make any problem look like an SQL query.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: IBM 自 1890 年代以来一直在描述为“超级计算机”的机器上进行大数据分析，但除非您找到一种方法使任何问题看起来像是 SQL 查询，否则数据分析并不是一般的
    Church 计算。
- en: People have probably been calculating since 40,000 BCE, with abaci, mechanical
    calculators, paper, pens, clay tablets, bones, rocks, their fingers, and natural
    numbers in their heads. All the above are theoretically Church computers because
    they can simulate any machine if programmed in a certain way. So perhaps we have
    always had computers—and Church was just the first to notice them.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 人们可能自 40,000 年前就开始计算了，使用算盘、机械计算器、纸张、笔、粘土板、骨头、岩石、手指和头脑中的自然数。 所有这些理论上都是 Church
    计算机，因为如果以某种方式编程，它们可以模拟任何机器。 所以也许我们一直都有计算机——只是 Church 是第一个注意到它们的人。
- en: Summary
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we took a whirlwind tour through the history of computing.
    Beginning with bones and ending in the cloud, we considered a number of inventions
    that might, or might not, be called a computer. We also saw a few hypotheses for
    what makes a computer. Initially we suggested that a computer was anything that
    could be programmed to play *Space Invaders*. We then formalized this hypothesis
    by looking at Church’s thesis, which argues that a computer is a machine that
    can simulate any other machine, given as much memory as it asks for.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们快速浏览了计算机历史。从骨头到云计算，我们考虑了一些可能或者不可能被称为计算机的发明。我们还看到了几个关于什么构成计算机的假设。最初，我们提出计算机是任何可以编程来玩*太空入侵者*的设备。然后，我们通过查看丘奇的命题来正式化这一假设，丘奇认为计算机是任何能够模拟其他机器的设备，前提是它拥有足够的内存。
- en: Our survey of the history of computing has briefly introduced the big ideas
    of architecture. In the next chapters, we’ll dive into the details of data representation
    and CPU computation to see how some of the historical systems work in more detail.
    This will set us up for [Part II](part02.xhtml)’s study of modern electronic hierarchy
    and the many particular modern architectures of [Part III](part03.xhtml).
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对计算机历史的调查简要介绍了架构的重大思想。在接下来的章节中，我们将深入探讨数据表示和CPU计算的细节，看看一些历史系统是如何更详细地工作的。这将为我们[第二部分](part02.xhtml)研究现代电子层级结构和[第三部分](part03.xhtml)中众多现代架构做好铺垫。
- en: Exercises
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习
- en: '**Calculating with an Abacus Simulator**'
  id: totrans-299
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**使用算盘模拟器进行计算**'
- en: 'Use an abacus simulator (or a real abacus if you have one) and a tutorial to
    understand abacus arithmetic. These operations are still the basis for some modern
    CPU operations, and learning to do them on the abacus will help you understand
    them in CPUs. A simulator can be found here: *[https://www.mathematik.uni-marburg.de/~thormae/lectures/ti1/code/abacus/soroban.html](https://www.mathematik.uni-marburg.de/~thormae/lectures/ti1/code/abacus/soroban.html)*
    and a tutorial for using it at *[https://www.wikihow.com/Use-an-Abacus](https://www.wikihow.com/Use-an-Abacus)*.'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用算盘模拟器（如果你有实物算盘，也可以使用）和教程来理解算盘算术。这些操作仍然是一些现代CPU操作的基础，学习如何在算盘上进行这些操作将帮助你理解它们在CPU中的运作。你可以在这里找到一个模拟器：*[https://www.mathematik.uni-marburg.de/~thormae/lectures/ti1/code/abacus/soroban.html](https://www.mathematik.uni-marburg.de/~thormae/lectures/ti1/code/abacus/soroban.html)*，并在*[https://www.wikihow.com/Use-an-Abacus](https://www.wikihow.com/Use-an-Abacus)*上找到使用它的教程。
- en: Take the last three digits of your phone number as one number and the preceding
    three digits as a second number, and add them together on the abacus.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你电话号码的最后三位数字作为一个数字，前面三位数字作为第二个数字，然后在算盘上加起来。
- en: Take the same pair of numbers and subtract the smaller one from the larger one.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将相同的一对数字进行相减，从较大的数字中减去较小的数字。
- en: Take the last two digits of your phone number as a two-digit number and the
    preceding two digits as a second two-digit number, and multiply them using the
    abacus.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你电话号码的最后两位数字作为一个两位数，前面两位数字作为第二个两位数，然后用算盘进行乘法运算。
- en: '**Speculative History**'
  id: totrans-304
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**推测历史**'
- en: How do you think world history could have been different if the Antikythera
    mechanism had arrived safely in Rome and inspired the Roman Empire to use similar
    machines?
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你认为如果安提基特拉机制安全到达罗马，并激发罗马帝国使用类似机器，世界历史会有什么不同？
- en: How do you think world history could have been different if the Analytical Engine
    had been fully constructed and commercialized in the British Empire?
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你认为如果分析引擎在大英帝国被完全建造并商业化，世界历史会有什么不同？
- en: '**Challenging**'
  id: totrans-307
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**具有挑战性**'
- en: Search the internet for examples of advanced operations using an abacus, such
    as square roots or prime factorization, and try to run them. You may need to use
    more than one abacus to provide enough columns for some of them.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网上搜索使用算盘进行高级运算的例子，比如平方根或素因数分解，并尝试运行它们。你可能需要使用多个算盘，以提供足够的列来完成某些运算。
- en: '**More Challenging**'
  id: totrans-309
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**更具挑战性**'
- en: Write a speculative fiction short story or novel based on one of the premises
    raised by the “Speculative History” exercises.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写一篇基于“推测历史”练习中提出的一个前提的科幻短篇小说或小说。
- en: How could you implement a Church computer using an abacus?
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用算盘实现一台教会计算机？
- en: Research the SQL-like functions available on the Hollerith machine. Can a Church
    computer be made from them?
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 研究Hollerith机器上可用的类似SQL的功能。能否用它们制造一台教会计算机？
- en: Further Reading
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For details of the Hollerith machine, see H. Hollerith, “The Electrical Tabulating
    Machine,” *Journal of the Royal Statistical Society* 57, no. 4 (1894): 678–689,
    *[https://www.jstor.org/stable/2979610](https://www.jstor.org/stable/2979610)*.'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解霍勒里斯机的详细信息，请参见H. Hollerith的《电动制表机》，*《皇家统计学会杂志》* 57卷，第4期（1894年）：678–689，*[https://www.jstor.org/stable/2979610](https://www.jstor.org/stable/2979610)*。
- en: 'For details of Hollerith machines’ role in World War II, see Edwin Black, *IBM
    and the Holocaust: The Strategic Alliance Between Nazi Germany and America’s Most
    Powerful Corporation* (Washington, DC: Dialog Press, 2012).'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解霍勒里斯机在第二次世界大战中的作用，请参见Edwin Black的*《IBM与大屠杀：纳粹德国与美国最强大公司之间的战略联盟》*（华盛顿特区：Dialog
    Press，2012年）。
- en: 'To learn more about 2020s IoT computing, see S. Madakam, R. Ramaswamy, and
    S. Tripathi, “Internet of Things (IoT): A Literature Review,” *Journal of Computer
    and Communications* 3, no. 5 (2015), *[http://dx.doi.org/10.4236/jcc.2015.35021](http://dx.doi.org/10.4236/jcc.2015.35021)*.'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于2020年代物联网计算的信息，请参见S. Madakam, R. Ramaswamy和S. Tripathi的《物联网（IoT）：文献综述》，*《计算机与通讯杂志》*
    3卷，第5期（2015年），*[http://dx.doi.org/10.4236/jcc.2015.35021](http://dx.doi.org/10.4236/jcc.2015.35021)*。
- en: 'To learn more about 2020s cloud computing, see I. Hashem, I. Yaqoob, N.B. Anuar,
    et al., “The Rise of ‘Big Data’ on Cloud Computing: Review and Open Research Issues,”
    *Information Systems* 47 (2015): 98–115.'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于2020年代云计算的信息，请参见I. Hashem, I. Yaqoob, N.B. Anuar等人的《‘大数据’在云计算中的崛起：综述与开放的研究问题》，*《信息系统》*
    47（2015年）：98–115。
- en: 'For a dieselpunk novel featuring World War II cryptography, see Neal Stephenson,
    *Cryptonomicon* (New York: Avon, 1999).'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 若要阅读一部涉及第二次世界大战密码学的柴油朋克小说，请参见Neal Stephenson的*《密码帝国》*（纽约：Avon，1999年）。
