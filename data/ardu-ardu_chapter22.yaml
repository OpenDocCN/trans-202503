- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">22</samp> <samp class="SANS_Dogma_OT_Bold_B_11">CAPTURE
    AND LOG DATA TO GOOGLE SHEETS</samp>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">22</samp> <samp class="SANS_Dogma_OT_Bold_B_11">将数据捕获并记录到
    Google Sheets</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: You can use internet-connected boards like the ESP32 to capture data and store
    it in online spreadsheets for real-time monitoring and later analysis. In this
    chapter, you’ll use this method to build a single project that sends time and
    temperature data to a Google Sheets spreadsheet tool within Google Workspace,
    a collection of cloud-computing collaboration tools that are accessible from most
    web-enabled devices.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用像 ESP32 这样的联网开发板来捕捉数据并将其存储在在线电子表格中，进行实时监控和后期分析。在本章中，你将使用这种方法构建一个项目，将时间和温度数据通过
    Google Workspace 中的 Google Sheets 电子表格工具发送到 Google Sheets，Google Workspace 是一个云计算协作工具集合，几乎所有支持网络的设备都能访问。
- en: You can use this framework in future projects to record any other type of data
    you can gather with Arduino-compatible projects. For example, you might want to
    share weather data at a remote location with other colleagues or monitor sensor
    values in a laboratory experiment from your cell phone while on holiday elsewhere.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在未来的项目中使用这个框架，记录任何你能够通过兼容 Arduino 的项目收集到的数据。例如，你可能想与其他同事共享远程地点的天气数据，或者在度假时，通过手机监控实验室实验中的传感器值。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #65: Logging Time and Temperature
    Data</samp>'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #65：记录时间和温度数据</samp>'
- en: This project demonstrates how to send the time and date from an NTP server,
    along with the temperature and air pressure from a BMP180 sensor board, to Google
    Workspace’s Google Sheets tool via the ESP32 board.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目演示了如何通过 ESP32 开发板将来自 NTP 服务器的时间和日期，以及来自 BMP180 传感器板的温度和气压数据，发送到 Google Workspace
    的 Google Sheets 工具。
- en: 'You’ll need the following hardware:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下硬件：
- en: An ESP32 dev board and matching USB cable
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块 ESP32 开发板及匹配的 USB 电缆
- en: A solderless breadboard
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无焊接面包板
- en: Assorted jumper wires
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种跳线
- en: A BMP180 temperature and pressure sensor board
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块 BMP180 温度和压力传感器板
- en: If you haven’t already, turn to [Chapter 19](chapter19.xhtml) and complete the
    instructions in “Configuring the Arduino IDE for the ESP32” through “Testing the
    ESP32” to get your ESP32 working. Also make sure you’ve completed “BMP180 Sensors”
    in [Chapter 10](chapter10.xhtml) and read [Chapter 21](chapter21.xhtml) to familiarize
    yourself with NTP servers.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有这样做，请转到 [第 19 章](chapter19.xhtml)，完成“为 ESP32 配置 Arduino IDE”到“测试 ESP32”的说明，以确保
    ESP32 工作正常。同时，确保你已经完成了 [第 10 章](chapter10.xhtml) 中的“BMP180 传感器”部分，并阅读了 [第 21 章](chapter21.xhtml)
    来熟悉 NTP 服务器。
- en: To build this project, you’ll start by configuring a Google Workspace account
    to receive data from the ESP32 and then set up the ESP32 board and sensor for
    data transmission.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建这个项目，你将首先配置一个 Google Workspace 账户来接收来自 ESP32 的数据，然后设置 ESP32 开发板和传感器进行数据传输。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Preparing the Google Sheets Document</samp>
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">准备 Google Sheets 文档</samp>
- en: Google Sheets is a cloud-based spreadsheet included as part of the Google Workspace
    cloud-based product. If you don’t already have one, set up a Google Workspace
    account at [*https://<wbr>workspace<wbr>.google<wbr>.com*](https://workspace.google.com).
    A free trial is available if you want to experiment without commitment, but at
    time of writing, the price for a monthly subscription is less than US$10 a month.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Google Sheets 是 Google Workspace 云计算产品的一部分，提供基于云的电子表格。如果你还没有账户，可以在 [*https://<wbr>workspace<wbr>.google<wbr>.com*](https://workspace.google.com)
    上设置一个 Google Workspace 账户。如果你希望先试用而不进行长期订阅，可以选择免费试用，但截至目前，月度订阅费用低于每月 10 美元。
- en: Once you’ve logged into your account, visit [*https://<wbr>docs<wbr>.google<wbr>.com<wbr>/spreadsheets*](https://docs.google.com/spreadsheets)
    to view the Google Sheets start page, as shown in [Figure 22-1](chapter22.xhtml#fig22-1).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 登录你的账户后，访问 [*https://<wbr>docs<wbr>.google<wbr>.com<wbr>/spreadsheets*](https://docs.google.com/spreadsheets)
    查看 Google Sheets 起始页，如 [图 22-1](chapter22.xhtml#fig22-1) 所示。
- en: '![A SCREENSHOT OF THE GOOGLE SHEETS START PAGE](../images/fig22-1.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Google Sheets 起始页截图](../images/fig22-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-1: The Google Sheets
    start page</samp>'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 22-1：Google Sheets 起始页</samp>
- en: Create a new, blank spreadsheet by clicking the **Blank** icon under Start a
    new spreadsheet. A new tab for that spreadsheet will appear, as shown in [Figure
    22-2](chapter22.xhtml#fig22-2).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击**空白**图标，在“开始新电子表格”下创建一个新的空白电子表格。该电子表格的新标签将会出现，如[图22-2](chapter22.xhtml#fig22-2)所示。
- en: '![A SCREENSHOT OF THE BLANK SPREADSHEET](../images/fig22-2.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![空白电子表格截图](../images/fig22-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-2: A blank spreadsheet</samp>'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图22-2：一个空白电子表格</samp>
- en: Click **Untitled spreadsheet** and enter an appropriate name for a spreadsheet
    that tracks temperature and air pressure data for your location—for example, **OfficeWeather**—and
    then press ENTER. Next, rename the page label at the bottom of the page from Sheet1
    to **office**.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**无标题电子表格**，并为用于跟踪您所在位置的温度和气压数据的电子表格输入一个合适的名称，例如**OfficeWeather**，然后按回车键。接下来，将页面底部标签从Sheet1重命名为**office**。
- en: 'Now give the columns in row 1 the following headings, starting from cell A1,
    as shown in [Figure 22-3](chapter22.xhtml#fig22-3): **date, month, year, hour,
    minute, second, temperature, airpressure**. These will match the data sent from
    the ESP32 board, as you’ll see shortly.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从A1单元格开始，按照[图22-3](chapter22.xhtml#fig22-3)所示，给第1行的列命名，分别为**date, month,
    year, hour, minute, second, temperature, airpressure**。这些标题将与ESP32板发送的数据匹配，稍后您将看到。
- en: '![A SCREENSHOT OF THE PREPARED SPREADSHEET](../images/fig22-3.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![已准备好的电子表格截图](../images/fig22-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-3: The spreadsheet
    setup, with names and data headings</samp>'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图22-3：电子表格设置，带有名称和数据标题</samp>
- en: Note that column headings in Google Sheets, must always be lowercase and not
    contain any spaces or symbols.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Google Sheets中的列标题必须始终小写，并且不能包含任何空格或符号。
- en: Wait for Google to automatically save the sheet, then retrieve and save the
    sheet ID. This is the long group of characters between */d* and */edit* in the
    sheet’s URL, as shown in [Figure 22-4](chapter22.xhtml#fig22-4). Copy the sheet
    ID and paste it into a text document so you can easily retrieve it later.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 等待Google自动保存电子表格，然后检索并保存电子表格ID。该ID是电子表格URL中*/d*和*/edit*之间的一长串字符，如[图22-4](chapter22.xhtml#fig22-4)所示。复制该电子表格ID并将其粘贴到文本文件中，以便以后轻松获取。
- en: '![A SCREENSHOT OF THE SHEET’S ID IN THE URL](../images/fig22-4.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![电子表格ID在URL中的截图](../images/fig22-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-4: Example of a sheet
    ID highlighted in a URL</samp>'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图22-4：电子表格ID在URL中的示例</samp>
- en: Your sheet is now ready to receive data. For now, leave it open in the web browser.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的电子表格已准备好接收数据。暂时将其保持在网页浏览器中打开。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Google Apps Script</samp>
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">Google Apps 脚本</samp>
- en: Your ESP32 hardware will send data to your Google sheet by making an HTTP call
    with the data attached to the end of the HTTP address. To enable that process,
    you must upload a small piece of JavaScript code to the Google servers that decodes
    HTTP calls from the ESP32 board, separating the data and placing it in the correct
    column in the sheet.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您的ESP32硬件将通过在HTTP地址末尾附加数据来向Google电子表格发送数据。为了启用这一过程，您必须将一小段JavaScript代码上传到Google服务器，该代码解码来自ESP32板的HTTP调用，将数据分开并放入电子表格的正确列中。
- en: Open the Google Apps script tool by selecting **Extensions** ![](../images/arr.png)
    **Apps Script** in Google Sheets.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在Google Sheets中选择**扩展** ![](../images/arr.png) **Apps 脚本**来打开Google Apps 脚本工具。
- en: A new tab for the Apps Script editor will open in the web browser, as shown
    in [Figure 22-5](chapter22.xhtml#fig22-5).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的Apps脚本编辑器标签将在网页浏览器中打开，如[图22-5](chapter22.xhtml#fig22-5)所示。
- en: '![A SCREENSHOT OF THE APPS SCRIPT EDITOR](../images/fig22-5.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![Apps脚本编辑器截图](../images/fig22-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-5: Opening a new
    tab</samp>'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图22-5：打开一个新标签</samp>
- en: 'Click **Untitled project** and enter a name for the script, such as **OfficeWeatherScript**.
    Copy the following code and paste it over the text in line 1 of the editor:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**无标题项目**，并为脚本输入一个名称，例如**OfficeWeatherScript**。复制以下代码并将其粘贴到编辑器的第1行文本中：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Insert the sheet ID you retrieved earlier between the quotes in the first line
    of the code. The sheet label name, <samp class="SANS_TheSansMonoCd_W5Regular_11">office</samp>,
    appears between the quotes in the next line. Each column of data to store is represented
    by the <samp class="SANS_TheSansMonoCd_W5Regular_11">var</samp> declarations in
    the order they appear across row 1 of the spreadsheet (<samp class="SANS_TheSansMonoCd_W5Regular_11">date</samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">airpressure</samp>).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 将您之前获取的表格 ID 插入代码第一行的引号之间。在接下来的行中，表格标签名称<sup class="SANS_TheSansMonoCd_W5Regular_11">office</sup>出现在引号之间。每一列数据的存储都通过<sup
    class="SANS_TheSansMonoCd_W5Regular_11">var</sup>声明表示，按它们在电子表格第 1 行中的顺序排列（从<sup
    class="SANS_TheSansMonoCd_W5Regular_11">date</sup>到<sup class="SANS_TheSansMonoCd_W5Regular_11">airpressure</sup>）。
- en: Finally, the <samp class="SANS_TheSansMonoCd_W5Regular_11">sheet.appendrow()</samp>
    function writes the received data to a new row in the spreadsheet. The order in
    which the variables appear in the function determines the order in which the data
    is written to the sheet. Each set of data received will be saved to the next empty
    row, until you hit the maximum of 40,000 rows in a Google sheet. From that point,
    you cannot log any more data.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，<samp class="SANS_TheSansMonoCd_W5Regular_11">sheet.appendrow()</samp> 函数将接收到的数据写入电子表格中的新行。函数中变量出现的顺序决定了数据写入表格的顺序。每一组接收到的数据都会保存到下一个空行，直到达到
    Google 表格的最大行数 40,000 行。之后，您将无法再记录更多数据。
- en: Your editor page should now resemble [Figure 22-6](chapter22.xhtml#fig22-6).
    The script editor will highlight any syntax errors, so check for errors before
    moving on.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的编辑器页面应该与[图 22-6](chapter22.xhtml#fig22-6)类似。脚本编辑器会高亮显示任何语法错误，因此在继续之前请检查是否有错误。
- en: '![A SCREENSHOT OF THE COMPLETED APP SCRIPT](../images/fig22-6.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![完成的应用脚本截图](../images/fig22-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-6: The completed
    app script</samp>'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 22-6：完成的应用脚本</samp>
- en: To deploy the script, select **Deploy** ![](../images/arr.png) **New deployment**.
    When the New deployment window appears, click the gear icon to select the deployment
    type. In the drop-down menu that appears, click **Web app** to open the configuration
    dialog, which has three fields.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 若要部署脚本，选择**部署** ![](../images/arr.png) **新部署**。当新部署窗口出现时，点击齿轮图标选择部署类型。在出现的下拉菜单中，点击**Web
    应用**以打开配置对话框，其中有三个字段。
- en: You will be presented with the Configuration dialog, which has three fields.
    In the first, New Description, enter **OfficeWeather** (or whatever you chose
    to name your sheet). Select **Me** for the Web app field, and select **Anyone**
    for the Who has access field, as shown in [Figure 22-7](chapter22.xhtml#fig22-7).
    Click **Deploy**.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 系统将显示配置对话框，其中有三个字段。在第一个字段“新描述”中，输入**OfficeWeather**（或您为表格命名的名称）。在 Web 应用字段中选择**我**，在谁可以访问字段中选择**任何人**，如[图
    22-7](chapter22.xhtml#fig22-7)所示。点击**部署**。
- en: '![A SCREENSHOT OF THE DEPLOYMENT CONFIGURATION PAGE](../images/fig22-7.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![部署配置页面的截图](../images/fig22-7.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-7: The deployment
    configuration page</samp>'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 22-7：部署配置页面</samp>
- en: A pop-up should prompt you to authorize access to the account. Click **Authorize
    access**.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一个弹出窗口应该会提示您授权访问帐户。点击**授权访问**。
- en: If prompted to log into your Google account again, do so. You will be presented
    with a new window showing your spreadsheet’s deployment ID and web app URL.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果系统提示您再次登录 Google 帐号，请进行登录。接下来，您会看到一个新窗口，显示您的电子表格部署 ID 和 Web 应用 URL。
- en: Use the Copy links in the window to copy each of the items and save them in
    the document containing your sheet ID. You can now close the Apps Script tab in
    the web browser.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用窗口中的复制链接功能，将每项内容复制并保存在包含表格 ID 的文档中。您现在可以关闭 Web 浏览器中的 Apps Script 标签。
- en: 'Before setting up this project’s hardware, test that your script is working.
    Using a text editor, enter the web app URL on a new line and then add the following
    text to the end of the URL:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置此项目的硬件之前，测试您的脚本是否正常工作。使用文本编辑器，在新的一行输入 Web 应用的 URL，然后在 URL 的末尾添加以下文本：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The text appended to the URL describes the data being sent to the spreadsheet
    in the format <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">column</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">data</samp>,
    with each column and data pair separated by a question mark. The data in this
    line of code is intended just to test the script—you’ll program the ESP32 dev
    board to send its own data shortly.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 附加到 URL 的文本描述了以 <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">column</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">data</samp>
    格式发送到电子表格的数据，每对列和数据之间由问号分隔。这行代码中的数据仅用于测试脚本——稍后你将编程 ESP32 开发板来发送自己的数据。
- en: Copy the entire URL into the address field of a web browser and press ENTER.
    Two things should happen. First, the web browser should return a message telling
    you that the script completed but did not return anything, as shown in [Figure
    22-8](chapter22.xhtml#fig22-8).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 将整个 URL 复制到网页浏览器的地址栏并按 ENTER 键。应该会发生两件事。首先，网页浏览器应返回一条消息，告诉你脚本已完成但没有返回任何内容，如
    [图 22-8](chapter22.xhtml#fig22-8) 所示。
- en: '![A SCREENSHOT OF THE MESSAGE RETURNED BY THE GOOGLE APPS SCRIPT](../images/fig22-8.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![由 Google Apps 脚本返回的消息截图](../images/fig22-8.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-8: A message returned
    by the Google Apps script</samp>'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 22-8：由 Google Apps 脚本返回的消息</samp>
- en: The message means the script worked but didn’t send any data back to the web
    browser. That’s okay—the data went to the spreadsheet instead. Check your sheet
    and you should see the data on a new row, as shown in [Figure 22-9](chapter22.xhtml#fig22-9).
    If you like, you can go back and edit the data at the end of the entered URL,
    resubmit the URL, and see another row of data entered into the spreadsheet.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 该消息意味着脚本已成功执行，但没有将数据发送回网页浏览器。没关系——数据已经发送到电子表格中了。检查你的表格，你应该能看到数据出现在新的一行中，如 [图
    22-9](chapter22.xhtml#fig22-9) 所示。如果你愿意，可以返回并编辑输入 URL 末尾的数据，重新提交 URL，并查看另一个数据行被输入到电子表格中。
- en: '![A SCREENSHOT OF THE SPREADSHEET AFTER A SUCCESSFUL HTML CALL](../images/fig22-9.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![成功执行 HTML 调用后的电子表格截图](../images/fig22-9.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-9: The spreadsheet
    after a successful HTML call</samp>'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 22-9：成功执行 HTML 调用后的电子表格</samp>
- en: 'This process is the basis for data logging from the ESP32: the sketch will
    arrange the data captured from the sensor along with the time and date into one
    URL and then perform an HTTP call that the Google Apps script you created earlier
    will process to enter data into the spreadsheet. If this test didn’t work for
    you, check that you’ve correctly followed all instructions provided in the project
    up to this point.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程是 ESP32 数据记录的基础：草图将传感器捕获的数据与时间和日期一起安排到一个 URL 中，然后执行一个 HTTP 调用，由你之前创建的 Google
    Apps 脚本处理，将数据输入到电子表格中。如果这个测试没有对你有效，请检查你是否正确按照项目中到目前为止提供的所有指示进行操作。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Preparing the Hardware</samp>
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">准备硬件</samp>
- en: Assemble your hardware as shown in [Figure 22-10](chapter22.xhtml#fig22-10).
    Note that although your BMP180 board may be marked as a 5 V device, it will work
    on 3.3 V and the ESP32 board without a level converter.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 按照 [图 22-10](chapter22.xhtml#fig22-10) 中所示的方式组装你的硬件。请注意，尽管你的 BMP180 板可能标注为 5
    V 设备，但它也可以在 3.3 V 和 ESP32 板上正常工作，无需电平转换器。
- en: '![THE SCHEMATIC FOR PROJECT #65](../images/fig22-10.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #65 的电路图](../images/fig22-10.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-10: The schematic
    for Project #65</samp>'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 22-10：项目 #65 的电路图</samp>'
- en: 'Enter and upload the sketch, including your Wi-Fi network name (SSID) and password
    in the fields toward the beginning of the program, as originally explained in
    Project #55 in [Chapter 19](chapter19.xhtml). Don’t forget to change the offset
    for your time zone, as described in “Network Time Protocol” in [Chapter 21](chapter21.xhtml),
    and insert your web app URL into the appropriate field. The ESP32 should connect
    to the Wi-Fi network and then retrieve the time and date from an NTP server and
    the temperature and air pressure from the BMP180\. It should combine the data
    into a string comprised of the web app URL and the data and then complete a HTTP
    call to the Google server.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '输入并上传草图，包括在程序开头部分输入你的 Wi-Fi 网络名称（SSID）和密码，正如在 [第 19 章](chapter19.xhtml)中的项目
    #55 原始解释中所述。别忘了更改你的时区偏移量，正如在 [第 21 章](chapter21.xhtml)“网络时间协议”中所描述的那样，并将你的 Web
    应用 URL 插入到相应的字段中。ESP32 应该连接到 Wi-Fi 网络，然后从 NTP 服务器获取时间和日期，从 BMP180 获取温度和气压。它应该将数据合并为一个包含
    Web 应用 URL 和数据的字符串，并随后完成对 Google 服务器的 HTTP 请求。'
- en: A moment later, you should see the data appear in the spreadsheet. Leave the
    sheet open to see it update nearly in real time, as shown in [Figure 22-11](chapter22.xhtml#fig22-11).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 稍等片刻后，你应该能在电子表格中看到数据出现。保持该表格打开，以便看到其几乎实时更新，如 [图 22-11](chapter22.xhtml#fig22-11)
    所示。
- en: '![A SCREENSHOT OF THE EXAMPLE OUTPUT FROM PROJECT #65](../images/fig22-11.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #65 示例输出的截图](../images/fig22-11.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-11: Example output
    from Project #65</samp>'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 22-11：项目 #65 的示例输出</samp>'
- en: 'Let’s see how this works:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这如何工作：
- en: '[PRE2]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The sketch includes and initializes all required libraries, followed by the
    fields for your Wi-Fi network’s name and password and then the initialization
    for the network time server client ❶.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图包含并初始化了所有所需的库，接着是 Wi-Fi 网络名称和密码的字段，然后是网络时间服务器客户端的初始化 ❶。
- en: The sketch then sets the period between sending different data readings to the
    spreadsheet ❷, in milliseconds. This is the minimum amount of time between updates,
    but the actual update frequency is determined by the speed of Google’s server
    and your internet connection. For example, consider the values shown in [Figure
    22-12](chapter22.xhtml#fig22-12)—even though the demonstration was set to 20 seconds,
    the actual times recorded were 22 seconds or more. Values of 10 seconds or less
    may not be recorded, as this doesn’t give the processes enough time to complete
    the reception and saving of data on the Google server.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，草图设置了发送不同数据读数到电子表格之间的周期 ❷，以毫秒为单位。这是更新之间的最小时间，但实际的更新频率由 Google 服务器的速度和你的互联网连接决定。例如，参考
    [图 22-12](chapter22.xhtml#fig22-12) 中显示的值——尽管演示设置为 20 秒，实际记录的时间为 22 秒或更长。10 秒或更短的值可能无法被记录，因为这不足以让过程完成接收和在
    Google 服务器上保存数据的操作。
- en: In <samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp>, the usual
    declarations take place, along with starting the required libraries and the Serial
    Monitor. The sketch connects to your Wi-Fi network and starts the network time
    client. The code in <samp class="SANS_TheSansMonoCd_W5Regular_11">void loop()</samp>
    declares the required string variables used to store the time and temperature
    data from the network time server and BMP180 sensor, respectively.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在 <samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp> 中，进行常规的声明，并启动所需的库和串口监视器。草图连接到你的
    Wi-Fi 网络并启动网络时间客户端。<samp class="SANS_TheSansMonoCd_W5Regular_11">void loop()</samp>
    中的代码声明了所需的字符串变量，用于分别存储来自网络时间服务器和 BMP180 传感器的时间和温度数据。
- en: The program includes a calculation to determine whether the required amount
    of time has elapsed before sending more data ❸. This allows the sketch to proceed
    when the <samp class="SANS_TheSansMonoCd_W5Regular_11">millis()</samp> count from
    the last update time is greater than the set period ❹. Once the period has elapsed,
    it’s time to extract the date and time information from the NTP server and store
    it in the string variables and then append this data to the web app URL ❺.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序包含了一个计算，以确定在发送更多数据之前是否已经过去了所需的时间 ❸。这允许草图在从上次更新时间的 <samp class="SANS_TheSansMonoCd_W5Regular_11">millis()</samp>
    计数大于设定周期时继续执行 ❹。一旦周期过去，就该从 NTP 服务器提取日期和时间信息，并将其存储在字符串变量中，然后将这些数据附加到 Web 应用 URL
    中 ❺。
- en: Next, the temperature and air pressure data are retrieved from the BMP180 sensor
    and those values are placed into string variables ❻. These variables are then
    appended to the giant string <samp class="SANS_TheSansMonoCd_W5Regular_11">finalAppURL</samp>,
    which already contains the web app URL along with the date and time.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从 BMP180 传感器获取温度和气压数据，并将这些值存储到字符串变量中 ❻。这些变量随后会被附加到已经包含 web 应用 URL 以及日期和时间的巨大字符串
    <samp class="SANS_TheSansMonoCd_W5Regular_11">finalAppURL</samp> 中。
- en: Now that the web app URL has been fully constructed, an HTTP call sends the
    data to the Google server ❼. The final lines of code get the HTTP response code
    ❽ from the Google server and send it to the Serial Monitor. This is useful for
    debugging, since it confirms whether the process has been successful, but you
    can remove it once your sketch is operating as required. Finally, the sketch records
    the elapsed time after the latest update, which is used to calculate the delay
    before the next update ❾.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，web 应用 URL 已完全构建，HTTP 调用将数据发送到 Google 服务器 ❼。最后的代码行获取来自 Google 服务器的 HTTP 响应代码
    ❽，并将其发送到串口监视器。这对于调试很有帮助，因为它确认了过程是否成功，但一旦草图按要求运行，你可以将其移除。最后，草图记录了自上次更新后的经过时间，这个时间用于计算下一次更新前的延迟
    ❾。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Tips for Future Google Sheets Projects</samp>
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">未来 Google Sheets 项目的提示</samp>
- en: Now that you have a working mechanism to log real-world data to a Google Sheets
    spreadsheet, here are a few final tips for building this type of project. First,
    you’re limited to viewing your projects on a browser, as the spreadsheet is on
    the Google server. You can also monitor the project’s progress from using the
    Google Sheets app on your mobile device or tablet, as shown in [Figure 22-12](chapter22.xhtml#fig22-12).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了一个工作机制，将现实世界的数据记录到 Google Sheets 电子表格中，以下是一些构建此类项目的最终提示。首先，由于电子表格存储在
    Google 服务器上，因此你只能通过浏览器查看你的项目。你还可以通过在移动设备或平板电脑上使用 Google Sheets 应用来监控项目的进展，如[图
    22-12](chapter22.xhtml#fig22-12)所示。
- en: '![A SCREENSHOT OF THE EXAMPLE OUTPUT FROM PROJECT #65 DISPLAYED USING THE ANDROID
    GOOGLE SHEETS APP](../images/fig22-12.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![通过 Android 上的 Google Sheets 应用显示的项目 #65 示例输出的截图](../images/fig22-12.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-12: Example output
    from Project #65 displayed using the Google Sheets app on Android</samp>'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 22-12：通过 Android 上的 Google
    Sheets 应用显示的项目 #65 示例输出</samp>'
- en: As previously noted, the maximum number of rows in a Google Sheets spreadsheet
    is 40,000\. To monitor two or more ESP32 boards at the same time, give them separate
    spreadsheets; you can then combine and analyze the data from the desktop once
    the required data has been captured. If you want to edit an existing project—by
    changing the variable names or locations in the spreadsheet, for example—don’t
    forget to update the app script and then create a new deployment that uses a new
    web app URL that you then insert into the sketch.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Google Sheets 电子表格的最大行数为 40,000。为了同时监控两个或更多的 ESP32 开发板，给它们各自分配独立的电子表格；然后，一旦所需数据被捕获，你可以在桌面上合并并分析这些数据。如果你想编辑现有项目——例如更改电子表格中的变量名或位置——别忘了更新应用脚本，然后创建一个新的部署，使用新的
    web 应用 URL，并将其插入到草图中。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">继续前进</samp>
- en: This chapter gave you an inexpensive framework for capturing any type of data
    that can be gathered by an Arduino-compatible board and sending it straight to
    a spreadsheet. This allows you to monitor real-time data from almost anywhere
    in the world and share this data with others in a public or private manner. You
    can use your own sensors, change the spreadsheet variables, and update times to
    suit your own needs.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为你提供了一个廉价的框架，用于捕捉任何类型的由 Arduino 兼容板收集的数据，并将其直接发送到电子表格中。这使你能够从世界上几乎任何地方监控实时数据，并以公开或私人方式与他人分享这些数据。你可以使用自己的传感器，改变电子表格中的变量，并根据自己的需要更新时间。
- en: In the next chapter, you’ll continue working with internet-connected devices,
    creating your own web server with the ESP32 board to share information in read-only
    format for others to view.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将继续与联网设备合作，使用 ESP32 开发板创建自己的 web 服务器，以只读格式共享信息，供他人查看。
