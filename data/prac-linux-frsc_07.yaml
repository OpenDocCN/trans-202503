- en: '**7'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**7'
- en: EXAMINATION OF INSTALLED SOFTWARE PACKAGES**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**已安装软件包的检查**'
- en: '![Image](Images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common01.jpg)'
- en: This chapter covers the analysis of software installed on a Linux system, which
    includes software copied during the initial creation of a Linux system and software
    packages installed, updated, and removed during normal system administration.
    From a digital forensics perspective, we are interested in when software packages
    were installed on a system, what was installed, who installed them, and why. These
    same questions apply to software that has been removed (uninstalled). Linux systems
    and package managers have package databases and logs with timestamps that help
    to answer these questions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了对 Linux 系统上已安装软件的分析，包括在创建 Linux 系统初期复制的软件以及在正常系统管理过程中安装、更新和删除的软件包。从数字取证的角度来看，我们关注的是软件包何时安装到系统、安装了什么、是谁安装的、以及为什么安装。这些问题同样适用于已被删除（卸载）的软件。Linux
    系统和包管理器有包数据库和日志文件，这些文件带有时间戳，帮助回答这些问题。
- en: In the very early days of Linux, there were no installation GUIs or package
    management systems. People installed software by downloading source files directly
    from the developer (usually via FTP), compiling source files into binaries, and
    installing them with provided install scripts, `make install` commands, or even
    just simple file copying. Fetching and installing software dependencies was done
    manually after reading the requirements listed in the documentation (*README*
    files, and so on). The initial installation was a similar manual process. Partitions
    and filesystems were created by hand, system directories were made, the kernel
    was copied into place, and the bootloader was installed. You can still experience
    this manual process today with the *Linux From Scratch (LFS)*^([1](footnotes.xhtml#ch07foot_01))
    distribution, which is also an excellent way to learn Linux in depth.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 的早期，没有安装图形用户界面（GUI）或包管理系统。人们通过直接从开发者（通常通过 FTP）下载源文件，编译源文件成二进制文件，然后通过提供的安装脚本、`make
    install` 命令，或仅仅是简单的文件复制来安装软件。获取和安装软件依赖项是在阅读文档（*README* 文件等）中列出的要求后手动完成的。最初的安装过程也类似于这种手动操作。分区和文件系统是手动创建的，系统目录是手动建立的，内核被复制到适当的位置，并安装了引导加载程序。今天，你仍然可以通过
    *Linux From Scratch (LFS)*^([1](footnotes.xhtml#ch07foot_01)) 发行版体验这种手动过程，这也是深入学习
    Linux 的绝佳方式。
- en: Some of a Linux distribution’s defining features include its installation process
    and its package management system. These areas of Linux largely lack common standardization,
    and most distributions still have their own tools, scripts, remote package repositories,
    local package databases, and package file formats.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 发行版的一些定义特征包括其安装过程和包管理系统。Linux 的这些领域在很大程度上缺乏统一标准，大多数发行版仍然有自己独特的工具、脚本、远程包仓库、本地包数据库和包文件格式。
- en: The Linux community is experiencing some fundamental changes in how it manages
    software. Some distributions are now using a *rolling-release* model, in which
    the system is updated as new software becomes available without having fixed version
    numbers or release dates. This model allows users to have the latest versions
    of software with the newest features and security fixes. Gentoo and Arch Linux
    were the first major distros to pioneer the rolling release concept. Complexity
    and compatibility has driven another change toward software bundled in self-contained
    archives with all the files needed to function (including files that are normally
    shared, like libraries). Both of these software packaging concepts are interesting
    from a forensics perspective, and digital evidence can be found in the metadata
    and logfiles.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 社区在管理软件方面正在经历一些根本性的变化。一些发行版现在采用 *滚动发布* 模式，即系统会随着新软件的发布进行更新，而无需固定的版本号或发布日期。这种模式使用户能够拥有最新版本的软件，并享受最新功能和安全修复。Gentoo
    和 Arch Linux 是首批采用滚动发布概念的主要发行版。复杂性和兼容性促使了另一个变化，即将软件打包成自包含的存档，包含所有运行所需的文件（包括通常共享的文件，如库文件）。这两种软件打包概念从取证的角度来看都很有趣，数字证据可以通过元数据和日志文件来找到。
- en: Most distros use a traditional software development life cycle which has well-defined
    release dates, names, and version numbers. Version numbers are especially important
    when analyzing compromised systems and intrusions. Known vulnerabilities in a
    particular software version can be potentially linked to malicious activity and
    exploitation. This vulnerability identification also applies to rolling release
    distros, as they install released versions of individual software packages or
    Git-cloned packages from a specific date.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数发行版使用传统的软件开发生命周期，其中有明确的发布日期、名称和版本号。版本号在分析被攻击的系统和入侵时尤其重要。特定软件版本中的已知漏洞可能与恶意活动和利用相关联。这种漏洞识别也适用于滚动发布的发行版，因为它们安装的是来自特定日期的已发布版本的单个软件包或Git克隆的软件包。
- en: '**System Identification**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**系统识别**'
- en: When a Linux PC, laptop, or acquired image file arrives in your forensic lab
    for analysis, one of the first tasks is to determine which Linux distribution
    is installed. This knowledge helps focus an investigation along a more distro-specific
    analysis. Other artifacts to look for are unique identifiers that can be used
    to link and corroborate evidence from multiple sources. For example, a randomly
    generated unique identification string created during installation might be used
    to positively identify the machine in backup archives or in logs found on other
    machines.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当一台Linux PC、笔记本电脑或获取的镜像文件到达你的取证实验室进行分析时，首要任务之一是确定安装了哪个Linux发行版。了解这些有助于使调查聚焦于更具体的发行版分析。其他要查找的证据包括可以用于关联和核实来自多个来源的证据的唯一标识符。例如，在安装过程中生成的随机唯一标识字符串可能用于在备份档案或其他机器的日志中准确识别这台机器。
- en: '***Distro Release Information***'
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***发行版版本信息***'
- en: The typical software development life cycle involves releasing software at distinct
    points in time, with alphas, betas, release candidates, and releases. This model
    includes pre-release testing, a fixed (frozen) stable release, and post-release
    updates. Fixed releases provide a higher degree of stability and allow for easier
    support. The distro version number is independent of the kernel version (even
    though it’s the kernel that makes it Linux in the first place). The individual
    software packages each have their own version numbers, which are also independent
    of the distro version number.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的软件开发生命周期涉及在不同的时间点发布软件，包括alpha版、beta版、候选版和正式版。该模型包括发布前测试、固定（冻结）稳定版本和发布后的更新。固定版本提供更高的稳定性，并且更容易获得支持。发行版的版本号与内核版本号独立（尽管正是内核让它成为了Linux）。每个单独的软件包都有自己的版本号，这些版本号也独立于发行版版本号。
- en: 'Modern Linux installations based on systemd provide detailed release information
    in the */etc/os-release* file (usually a symlink to */usr/lib/os-release*); for
    example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 基于systemd的现代Linux安装提供详细的版本信息，通常存储在*/etc/os-release*文件中（通常是指向*/usr/lib/os-release*的符号链接）；例如：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This file is designed to be readable from shell scripts (each line is an assigned
    variable). The variables in this example are mostly self-explanatory, but you
    can see the os-release(5) man page for more information. A systemd-based distro
    may also place information about the local machine (location, deployment, and
    so on) in the */etc/machine-info* file. See the machine-info(5) man page for more
    information.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件的设计目的是可以从shell脚本中读取（每一行都是一个已赋值的变量）。这个示例中的变量大多数是显而易见的，但你可以参考os-release(5)手册页以获取更多信息。基于systemd的发行版也可能将本地机器的信息（如位置、部署等）存储在*/etc/machine-info*文件中。有关更多信息，请参见machine-info(5)手册页。
- en: 'The *Linux Standard Base (LSB)* also defines */etc/*distro*.release* and */etc/
    lsb-release* files that provide distro release information, and some distributions
    may include LSB information files. See the lsb_release(1) man page and `lsb_release`
    source code (it is a simple script) for more information. Here is one example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*Linux标准基础（LSB）*还定义了*/etc/*distro*.release*和*/etc/ lsb-release*文件，用于提供发行版版本信息，一些发行版可能会包括LSB信息文件。有关更多信息，请参见lsb_release(1)手册页和`lsb_release`源代码（它是一个简单的脚本）。以下是一个示例：'
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Some distros write version information to other small text files in the */etc/*
    directory. For example, in Fedora:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一些发行版将版本信息写入*/etc/*目录中的其他小文本文件。例如，在Fedora中：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Debian stores information in the */etc/debian_version* file. A search for all
    files matching */etc/*release* or */etc/*version* will provide the most common
    distro and release information files.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Debian将信息存储在*/etc/debian_version*文件中。通过搜索所有匹配*/etc/*release*或*/etc/*version*的文件，可以找到最常见的发行版和版本信息文件。
- en: 'Some distros also put version and release information into the */etc/issue*
    or */etc/motd* files, which are displayed when a user logs in via the shell or
    network. For example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一些发行版还会将版本和发布信息写入*/etc/issue*或*/etc/motd*文件，这些文件在用户通过 shell 或网络登录时显示。例如：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Rolling release distros will often use the date of the last update as the version
    number.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动发布发行版通常使用最后一次更新的日期作为版本号。
- en: '***Unique Machine ID***'
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***唯一机器 ID***'
- en: 'Modern Linux systems have a unique identifier that’s created during installation.
    The */etc/machine-id* file (may be copied or symlinked with the D-Bus machine
    ID stored in */var/lib/dbus/machine-id*) contains a randomly generated 128-bit
    hexadecimal string, as shown here:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现代 Linux 系统有一个在安装过程中创建的唯一标识符。*/etc/machine-id*文件（可能会被复制或与存储在*/var/lib/dbus/machine-id*中的
    D-Bus 机器 ID 创建符号链接）包含一个随机生成的 128 位十六进制字符串，如下所示：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This unique identification string can be used for matching identical copied/
    duplicated machines deployed in multiple places, or for matching a system with
    full system backups. The creation timestamp of this file is a potential indicator
    of the installation time. See the machine-id(5) man page for details. Raspberry
    Pi images initially contain an empty */etc/machine-id* file that’s initialized
    during the first boot.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个唯一的标识字符串可以用于匹配在多个地方部署的相同复制/重复的机器，或者用于匹配具有完整系统备份的系统。此文件的创建时间戳是安装时间的潜在指示符。有关详细信息，请参见
    machine-id(5) 手册页。Raspberry Pi 镜像最初包含一个空的*/etc/machine-id*文件，该文件在首次启动时初始化。
- en: POSIX-compliant systems also have a hostid that’s typically a hexadecimal representation
    of the IP address (derived from the */etc/hosts* file or a DNS lookup). This ID
    can be stored in the */etc/hostid* file (though most distros don’t have it) and
    is found on a running system by executing the `hostid` command or calling `gethostid()`
    from a program.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 符合 POSIX 标准的系统通常具有一个 hostid，它通常是 IP 地址的十六进制表示（来自*/etc/hosts*文件或 DNS 查询）。这个 ID
    可以存储在*/etc/hostid*文件中（尽管大多数发行版没有它），并且可以通过执行`hostid`命令或从程序中调用`gethostid()`来在运行中的系统上找到。
- en: '***System Hostname***'
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***系统主机名***'
- en: The machine’s hostname is another identifier. This hostname is set in the kernel
    at boot time or during network reconfiguration. The hostname can be manually specified
    during installation or dynamically assigned during DHCP network configuration.
    The system administrator chooses the hostname, which is likely to be unique among
    the machines under their responsibility or within a DNS domain. However, the hostname
    is not guaranteed
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 机器的主机名是另一个标识符。该主机名在启动时或网络重新配置期间由内核设置。主机名可以在安装过程中手动指定，也可以在 DHCP 网络配置过程中动态分配。系统管理员选择主机名，该主机名在其负责的机器中或在一个
    DNS 域内通常是唯一的。然而，主机名通常不能保证是唯一的。
- en: to be unique in general. The name of the system is typically stored in the */etc/hostname*
    file in a non-FQDN format. Fully qualified domain names (FQDNs) are allowed but
    not preferred.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的名称通常以非 FQDN 格式存储在*/etc/hostname*文件中。虽然允许使用完全限定的域名（FQDN），但通常不推荐使用。
- en: If a hostname is specified in */etc/hostname* (or another distro-specific location)
    or returned from a DHCP request, the running kernel is configured accordingly.
    Hosts with multiple interfaces, multiple IP addresses (each resolving to a different
    DNS name), or roaming machines (laptops and mobile devices) will still have one
    hostname representing the whole system. Network configuration involving hostnames,
    DNS domain names, interfaces, and so on is explained in [Chapter 8](ch08.xhtml).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在*/etc/hostname*（或其他特定发行版的位置）中指定了主机名，或者从 DHCP 请求中返回了主机名，则运行的内核将相应地进行配置。具有多个接口、多重
    IP 地址（每个地址解析为不同的 DNS 名称）或流动设备（笔记本电脑和移动设备）的主机将仍然有一个主机名，代表整个系统。涉及主机名、DNS 域名、接口等的网络配置在[第
    8 章](ch08.xhtml)中进行了解释。
- en: '**Distro Installer Analysis**'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**发行版安装程序分析**'
- en: 'Analysis of the initial installation of a Linux system involves identifying
    the locations of logs and files containing potentially interesting information.
    An initial Linux installation can be either user-interactive or automated/unattended
    (enterprise deployment). In both cases, a set of basic configuration parameters
    are specified to guide the installation process. The typical decision information
    needed for installing a system is as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 分析 Linux 系统的初始安装涉及识别日志和文件的位置，这些日志和文件可能包含有趣的信息。初始的 Linux 安装可以是用户交互式的，也可以是自动化/无人值守的（企业部署）。无论哪种情况，都需要指定一组基本的配置参数来引导安装过程。安装系统时需要做出的典型决策信息如下：
- en: Language, locale, keyboard layout, and time zone
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言、区域设置、键盘布局和时区
- en: Drive partitioning, filesystems, and mount points
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁盘分区、文件系统和挂载点
- en: Encryption of drives or home directories
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁盘或用户目录的加密
- en: Initial username and password, and root password (unless using sudo)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始用户名和密码，以及 root 密码（除非使用 sudo）
- en: Basic system type (choice of desktop, headless server, and so on)
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本系统类型（桌面、无头服务器等的选择）
- en: Basic services (web server, remote access with SSH, printing, and so on)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本服务（网页服务器、通过 SSH 远程访问、打印等）
- en: Choice of software repositories, non-free software
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件仓库的选择，非自由软件
- en: Automated enterprise installations (such as Red Hat’s Kickstart or SUSE’s AutoYaST,
    for example) are outside the scope of this book.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化企业安装（例如 Red Hat 的 Kickstart 或 SUSE 的 AutoYaST 等）不在本书的讨论范围内。
- en: 'When analyzing the installation process, a digital forensic investigator is
    trying to answer several basic questions:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析安装过程时，数字取证调查员试图回答几个基本问题：
- en: When was the system installed?
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统是什么时候安装的？
- en: What were the initial settings provided during install?
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装过程中提供的初始设置是什么？
- en: Is there any useful or interesting information that was saved?
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否保存了任何有用或有趣的信息？
- en: Was there anything unusual about the installation (or about the repositories)?
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装过程中（或仓库）是否有任何异常情况？
- en: Depending on the type of incident or investigation in progress, other more specific
    questions related to the installation will need answering.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 根据正在进行的事件类型或调查，可能需要回答与安装相关的其他更具体问题。
- en: When building timelines, keep in mind that a system installation is not a single
    point in time, but rather a period with starting and ending timestamps. Depending
    on the speed of the machine, network connection, and number of installed packages,
    an installation may take more than a few minutes to complete. If an installation
    is interactive, and a user is not there to answer the prompted questions, the
    installation may appear to take hours or more to complete (whenever the user returned
    to the installation prompt).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建时间轴时，请记住系统安装不是一个单一的时间点，而是一个包含开始和结束时间戳的过程。根据机器的速度、网络连接和已安装软件包的数量，安装可能需要超过几分钟才能完成。如果安装是交互式的，而用户未能及时回答提示问题，则安装可能看起来需要几个小时或更长时间才能完成（当用户回到安装提示时）。
- en: Also note that the starting timestamps of an installation may be unreliable.
    When a computer is booted with the installation media, time has not yet been synchronized
    and the time zone has not been chosen. The installer might still generate logs,
    but it will use whatever time the PC or virtual machine (VM) host happened to
    have (in some obscure cases, this time difference could also be interesting from
    an investigative perspective). Once the network has been configured, the time
    zone has been determined, and the clock has been synchronized, the logs will contain
    more reliable timestamps.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要注意，安装的开始时间戳可能不可靠。当计算机使用安装介质启动时，时间尚未同步，时区尚未选择。安装程序可能仍会生成日志，但它将使用计算机或虚拟机（VM）主机的当前时间（在某些特殊情况下，这个时间差可能从调查角度来看也很有趣）。一旦配置了网络、确定了时区并同步了时钟，日志将包含更可靠的时间戳。
- en: A systemd service called `systemd-firstboot` is able to provide automated or
    interactive configuration on the first boot of a system. See the systemd-firstboot(1)
    man page for more information.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为 `systemd-firstboot` 的 systemd 服务能够在系统首次启动时提供自动化或交互式配置。有关更多信息，请参阅 systemd-firstboot(1)
    手册页。
- en: '***Debian Installer***'
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Debian 安装程序***'
- en: 'The initial installation of a Debian system uses *Debian Installer*.^([2](footnotes.xhtml#ch07foot_02))
    Debian Installer itself is a Linux system that can be booted from CD/DVD, USB
    stick, over a network, or from a downloaded image file (for VMs). The documentation
    defines multiple stages of a Debian installation:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Debian 系统的初始安装使用了*Debian 安装程序*。^([2](footnotes.xhtml#ch07foot_02)) Debian 安装程序本身是一个
    Linux 系统，可以从 CD/DVD、USB 闪存驱动器、网络或从下载的镜像文件（用于虚拟机）启动。文档定义了 Debian 安装的多个阶段：
- en: '**Booting and initialization** Initial booting of the installer; choice of
    keyboard, language, and locale; and hardware detection'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**启动与初始化** 安装程序的初次启动；键盘、语言和区域设置选择；硬件检测'
- en: '**Loading additional components** Choice of mirror, fetching and unpacking
    additional components'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**加载附加组件** 选择镜像，获取并解压附加组件'
- en: '**Network configuration** Detect network hardware and configure network'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络配置** 检测网络硬件并配置网络'
- en: '**Partitioning** Detect attached storage, partition drives, create file systems,
    and define mount points'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**分区** 检测附加存储，分区驱动器，创建文件系统，定义挂载点'
- en: '**Installing the target system** Install base system and user-selected packages,
    set up user accounts, finalize install, and reboot'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**安装目标系统** 安装基础系统和用户选择的软件包，设置用户账户，完成安装并重启'
- en: 'Logs from a completed Debian installation are saved in */var/log/installer/*
    and provide a snapshot of information from the time the initial installation was
    made. This snapshot can be interesting. For example, consider this installer log
    directory from a typical Debian installation:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的 Debian 安装的日志保存在 */var/log/installer/* 目录下，并提供了初次安装时的信息快照。这个快照可能很有趣。例如，考虑下面这个来自典型
    Debian 安装的安装日志目录：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The *hardware-summary* file provides information about the machine hardware
    at the time of installation, including a list of devices on the PCI bus and attached
    USB devices. The *lsb-release* file contains information about the originally
    installed release (before any upgrades). The *partman* file is the output from
    the drive setup process, and it includes storage devices, partition information,
    and created filesystems. The *status* file contains a detailed list of all installed
    packages (including versions) at the time of installation. The *syslog* file contains
    information sent to the standard syslog during the entire installation process
    (with timestamps). Desktop systems may also have an *Xorg.0.log* file containing
    the startup output of the X11 server, which has information about the graphics
    card, monitors, and attached peripheral input devices. The *cdebconf* package
    has files containing the options and choices made during the install process.
    These files provide insight into the system’s state at the time of installation.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*hardware-summary* 文件提供了安装时机器硬件的信息，包括 PCI 总线上的设备和附加的 USB 设备列表。*lsb-release*
    文件包含了最初安装的发行版本信息（在任何升级之前）。*partman* 文件是驱动器设置过程的输出，包含存储设备、分区信息和创建的文件系统。*status*
    文件包含安装时所有已安装软件包（包括版本）的详细列表。*syslog* 文件包含在整个安装过程中发送到标准 syslog 的信息（包括时间戳）。桌面系统还可能包含一个
    *Xorg.0.log* 文件，包含 X11 服务器的启动输出，其中有关于显卡、显示器和附加外设输入设备的信息。*cdebconf* 包含在安装过程中做出的选项和选择的文件。这些文件提供了关于安装时系统状态的洞察。'
- en: 'Ubuntu-based systems have a bootable live system (called *Casper*) with a graphical
    installer program called *Ubiquity*. The Debian Installer is used as a backend
    to Ubiquity and leaves files in */var/log/installer/* but with slightly different
    contents. Following is an example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 Ubuntu 的系统有一个可启动的实时系统（称为 *Casper*），并带有一个名为 *Ubiquity* 的图形化安装程序。Debian 安装程序作为
    Ubiquity 的后台使用，并将文件保存在 */var/log/installer/* 目录下，但内容略有不同。以下是一个示例：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The *casper.log* and *debug* files are the output from the installer scripts
    and contain error messages. The *media-info* file shows the release information
    at the time of install. Some Ubuntu-based distros (Mint, for example) may also
    have a version file. The *initial-status.gz* file (compressed) contains a list
    of initially installed packages.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*casper.log* 和 *debug* 文件是安装脚本的输出，包含错误信息。*media-info* 文件显示安装时的发行版本信息。一些基于 Ubuntu
    的发行版（例如 Mint）可能还有一个版本文件。*initial-status.gz* 文件（压缩文件）包含最初安装的软件包列表。'
- en: '***Raspberry Pi Raspian***'
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Raspberry Pi Raspian***'
- en: 'The Raspberry Pi uses a Debian-based distribution called Raspian. Debian Installer
    isn’t necessary, because Raspian is available as a preinstalled image file for
    download. This preinstalled image is available in two formats:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi 使用基于 Debian 的发行版，称为 Raspian。无需 Debian 安装程序，因为 Raspian 已作为预装镜像文件提供下载。此预装镜像有两种格式：
- en: '**NOOBS** A beginner-friendly process in which the user formats the SD card
    (FAT) and copies files and no special tools needed'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**NOOBS** 一个适合初学者的过程，用户只需要格式化 SD 卡（FAT），然后复制文件，不需要任何特殊工具'
- en: '**Drive image** A raw image that needs to be unzipped and transferred to the
    SD card with `dd` or a similar tool'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**驱动器镜像** 一个原始镜像，需要解压并使用 `dd` 或类似工具传输到 SD 卡'
- en: Because there is no “installation” in the usual sense, investigators will want
    to determine the time when the user first powered on the Pi and saved the initial
    settings. However, finding this initial setup time is tricky for a number of reasons.
    The initial filesystem timestamps are from the Raspian image that was downloaded,
    and not created from local installer scripts. The Raspberry Pi has no hardware
    clock with battery backup,^([3](footnotes.xhtml#ch07foot_03)) so every time the
    Pi is powered on, the clock starts with the Unix epoch (00:00 January 1, 1970).
    The booting operating system sets the clock to the time nearest to the last power-off
    until network time synchronization is achieved (see [Chapter 9](ch09.xhtml) for
    more details on system time). By default, the filesystem is mounted with the `noatime`
    option, so the last-accessed timestamps are not updated. Other timestamps may
    have been updated and log entries written before the correct time was established,
    rendering those times unreliable.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 因为没有传统意义上的“安装”，调查人员需要确定用户第一次打开 Pi 并保存初始设置的时间。然而，由于种种原因，找到这个初始设置时间是很棘手的。初始文件系统时间戳来自下载的
    Raspian 镜像，而不是本地安装脚本创建的。树莓派没有带电池备份的硬件时钟^([3](footnotes.xhtml#ch07foot_03))，因此每次开机时，时钟都会从
    Unix 纪元（1970年1月1日00:00）开始。启动的操作系统会将时钟设置为距离上次关机最近的时间，直到网络时间同步完成（关于系统时间的更多细节，请参见[第9章](ch09.xhtml)）。默认情况下，文件系统会以`noatime`选项挂载，因此最后访问的时间戳不会更新。其他时间戳可能已经更新，并且日志条目可能会在正确的时间设置之前就被写入，这使得这些时间戳不可靠。
- en: When a Raspberry Pi is used for the first time, the filesystem is resized to
    fit the SD card. After a reboot, the `piwiz` application starts,^([4](footnotes.xhtml#ch07foot_04))
    which allows the user to configure a network, reset the password (the default
    is `raspberry`), and specify the country, language, and time-zone settings. The
    `piwiz` app starts automatically from the file */etc/xdg/autostart/piwiz.desktop*,
    which is deleted after the user provides their initial preferences. If this *piwiz.desktop*
    file still exists, it indicates an unused Raspberry Pi installation. If your filesystem
    forensic analysis tool can determine the time when the file */etc/xdg/ autostart/piwiz.desktop*
    was deleted, that would indicate an approximate time of a completed installation.
    An alternative is to find the timestamp of the first entry in the */var/log/dpkg.log*
    file (or the oldest saved log rotation). Packages are updated for the first time
    when `piwiz` runs, which happens only after time synchronization was successful.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当第一次使用树莓派时，文件系统会被调整大小以适应 SD 卡。重启后，`piwiz` 应用程序启动^([4](footnotes.xhtml#ch07foot_04))，允许用户配置网络、重置密码（默认密码是
    `raspberry`）并指定国家、语言和时区设置。`piwiz` 应用程序会从文件 */etc/xdg/autostart/piwiz.desktop*
    自动启动，用户提供初始设置后，该文件会被删除。如果这个 *piwiz.desktop* 文件仍然存在，那就意味着树莓派的安装尚未使用。如果你的文件系统取证分析工具能够确定文件
    */etc/xdg/autostart/piwiz.desktop* 被删除的时间，那将表明安装完成的大致时间。另一种方法是查找 */var/log/dpkg.log*
    文件中的第一个条目的时间戳（或最早的已保存日志轮换）。当 `piwiz` 运行时，包会首次更新，这通常发生在时间同步成功之后。
- en: '***Fedora Anaconda***'
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Fedora Anaconda***'
- en: Fedora-based systems (CentOS, Red Hat, and so on) use an installer called Anaconda.^([5](footnotes.xhtml#ch07foot_05))
    After the initial desktop installation is complete and the new system reboots
    for the first time, a separate application called `Initial Setup` is run. This
    application can provide additional configuration possibilities, including the
    user acceptance of end-user licensing agreements (EULAs).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 Fedora 的系统（如 CentOS、Red Hat 等）使用名为 Anaconda 的安装程序^([5](footnotes.xhtml#ch07foot_05))。在初始桌面安装完成并且新系统首次重启后，一个名为
    `Initial Setup` 的独立应用程序会运行。该应用程序可以提供额外的配置选项，包括用户同意最终用户许可协议（EULA）。
- en: 'The Anaconda installer leaves logfiles of the initial installation in */var/
    log/anaconda/* that look like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda 安装程序会在 */var/log/anaconda/* 文件夹中留下初始安装的日志文件，内容如下所示：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The *anaconda.log* file tracks the progress of various installation tasks. The
    *X.log* file shows the output from the Xorg server used by Anaconda and contains
    information about the graphics card, monitors, and attached peripheral input devices
    at the time of installation.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*anaconda.log* 文件记录了各种安装任务的进度。*X.log* 文件显示了 Anaconda 使用的 Xorg 服务器的输出，并包含了安装时关于显卡、显示器和附加外设输入设备的信息。'
- en: The *journal.log* and *syslog* files are very similar, with the main difference
    being that *journal.log* shows more dracut activity (see [Chapter 6](ch06.xhtml)).
    They both include the initialization of the kernel (dmesg output) and systemd
    at the time of first installation. These logs can help determine the start and
    end times of an installation. Information about storage devices, partitioning,
    and volume management can be found in *storage.log* and *lvm.log*. The *dnf.librepo.log*
    file lists all of the packages downloaded for installation. The *ks-script-*.log*
    files contain log output from kickstart scripts. Other files contain logs with
    D-Bus activity and library calls. See *[https://fedoraproject.org/wiki/Anaconda/Logging](https://fedoraproject.org/wiki/Anaconda/Logging)*
    for more information about Anaconda logging.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*journal.log*和*syslog*文件非常相似，主要区别在于*journal.log*显示了更多的dracut活动（参见[第6章](ch06.xhtml)）。它们都包含内核（dmesg输出）和系统初始化（systemd）的日志，这些日志记录了第一次安装时的信息。这些日志有助于确定安装的开始和结束时间。关于存储设备、分区和卷管理的信息可以在*storage.log*和*lvm.log*中找到。*dnf.librepo.log*文件列出了所有下载用于安装的包。*ks-script-*.log*文件包含来自kickstart脚本的日志输出。其他文件则包含D-Bus活动和库调用的日志。有关Anaconda日志的更多信息，请参见*[https://fedoraproject.org/wiki/Anaconda/Logging](https://fedoraproject.org/wiki/Anaconda/Logging)*。'
- en: These logs provide information about the user-specified configuration, the hardware
    of the original machine, packages installed, and storage configuration at the
    time of installation.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这些日志提供了关于用户指定的配置、原始机器的硬件、已安装的软件包以及安装时的存储配置的信息。
- en: '***SUSE YaST***'
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***SUSE YaST***'
- en: SUSE Linux has one of the oldest distro installers still maintained today. *YaST*,
    or “Yet another Setup Tool,” was designed to combine the initial installation
    with other system configuration tasks into one tool.^([6](footnotes.xhtml#ch07foot_06))
    YaST can be used to install the system, set up peripherals like printers, install
    packages, configure hardware, configure the network, and more. SUSE also provides
    AutoYaST for unattended enterprise deployment.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: SUSE Linux 拥有今天仍在维护的最古老的发行版安装程序之一。*YaST*，或称“另一个设置工具”，旨在将初始安装与其他系统配置任务整合为一个工具。^([6](footnotes.xhtml#ch07foot_06))
    YaST可用于安装系统、设置外设（如打印机）、安装软件包、配置硬件、配置网络等。SUSE还提供AutoYaST，用于无人值守的企业部署。
- en: The YaST log directory is */var/log/YaST2/*. It contains logs from both the
    installation and other regular configuration tasks. Logs from the installation
    are stored in the compressed archive file *yast-installation-logs.tar.xz*, and
    are of particular interest from a forensics perspective. The following is an example
    (partial) list of contents:^([7](footnotes.xhtml#ch07foot_07))
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: YaST日志目录是*/var/log/YaST2/*。它包含来自安装过程和其他常规配置任务的日志。安装过程中的日志被存储在压缩归档文件*yast-installation-logs.tar.xz*中，从取证的角度来看，这些日志尤其重要。以下是一个示例（部分）内容列表：^([7](footnotes.xhtml#ch07foot_07))
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The release information at the time of install is found in the sub-directory
    `etc/os-release`. The file *Xorg.0.log* contains information about the graphics
    card, monitors, and attached peripheral input devices at the time of installation.
    The *boot.msg*, *dmesg*, and *messages* files contain logs from the installation,
    the kernel ring buffer, and other information at the time of install. The *wickedd.log*
    file from the network manager records the configuring of the network, including
    the system’s IP and other network configuration from the time of installation.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 安装时的发布信息可以在子目录`etc/os-release`中找到。文件*Xorg.0.log*包含关于图形卡、显示器和安装时附加的外设输入设备的信息。*boot.msg*、*dmesg*和*messages*文件包含来自安装过程、内核环形缓冲区以及安装时的其他信息的日志。来自网络管理器的*wickedd.log*文件记录了网络配置，包括系统的IP和安装时的其他网络配置。
- en: The start and end times of the logfile entries from this directory provide an
    approximate time period of when the installation took place.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此目录中日志文件条目的开始和结束时间提供了安装发生的大致时间段。
- en: '***Arch Linux***'
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Arch Linux***'
- en: The native Arch Linux system does not have a comfortable installer. Booting
    the Arch installation media drops the user into a root shell with a reference
    to the wiki installation guide (earlier versions had an *install.txt* file containing
    further instructions). The user is expected to create the partitions and filesystem
    manually, and then run the `pacstrap` script that populates the mounted install
    target directory. After that, the user chroots into the directory and manually
    completes the installation. The installation process is documented at *[https://wiki.archlinux.org/index.php/Installation_guide](https://wiki.archlinux.org/index.php/Installation_guide)*.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 原生的Arch Linux系统没有一个舒适的安装程序。启动Arch安装媒体后，用户会进入一个根shell并附带一个指向wiki安装指南的引用（早期版本中有一个*install.txt*文件，里面包含了更多的安装说明）。用户需要手动创建分区和文件系统，然后运行`pacstrap`脚本，填充已挂载的安装目标目录。之后，用户进入chroot环境并手动完成安装。安装过程的详细信息可以参考*[https://wiki.archlinux.org/index.php/Installation_guide](https://wiki.archlinux.org/index.php/Installation_guide)*。
- en: A basic installer script called `archinstall` is included with Arch Linux install
    media. If used, this script logs the initial configuration settings and activity
    in */var/log/archinstall/install.log*.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为`archinstall`的基本安装脚本包含在Arch Linux安装媒体中。如果使用此脚本，它会将初始配置设置和活动记录到*/var/log/archinstall/install.log*中。
- en: 'The creation (`Birth:`) timestamp of the root directory (if the filesystem
    supports it) is a rough indicator of the start of installation:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 根目录的创建时间戳（`Birth:`）（如果文件系统支持的话）大致表示安装开始的时间：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Installing Arch is a manual and ongoing process. A user may continue installing
    and tweaking the system indefinitely, and an install “end” time may not make sense
    in this context.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Arch是一个手动且持续的过程。用户可以继续安装和调整系统，直到无尽，因此在这个背景下，安装的“结束”时间可能并没有意义。
- en: The terse and non-intuitive process of installing Arch Linux has spawned several
    distros for users who want all the benefits of a bleeding-edge rolling distro,
    but with a comfortable installation. The most popular Arch-based distro is Manjaro.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Arch Linux的简洁而不直观的过程催生了多个发行版，供那些希望获得前沿滚动更新发行版的所有好处，但又希望有一个舒适安装过程的用户使用。最受欢迎的基于Arch的发行版是Manjaro。
- en: 'Manjaro’s installer is called Calamares, and it provides minimal logging of
    the installation process. These logs are found in */var/log/Calamares.log*. The
    content of *Calamares.log* includes specified configuration (time zone, locale,
    and so on), partition information, user information, and more. Calamares (on Manjaro)
    doesn’t log an IP address, but it does perform a Geo-IP lookup to determine the
    location of the system being installed:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Manjaro的安装程序叫做Calamares，它提供了最小化的安装过程日志。这些日志保存在*/var/log/Calamares.log*中。*Calamares.log*的内容包括指定的配置（时区、语言环境等）、分区信息、用户信息等。Calamares（在Manjaro上）不会记录IP地址，但它会执行Geo-IP查找以确定正在安装系统的位置：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Calamares has become well known because of Manjaro, but it was developed with
    the intention of being a general installer for any distribution. See *[https://calamares.io/](https://calamares.io/)*
    for more information on Calamares.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Calamares因Manjaro而广为人知，但它的开发目的是作为任何发行版的通用安装程序。有关Calamares的更多信息，请参见*[https://calamares.io/](https://calamares.io/)*。
- en: '**Package File Format Analysis**'
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**包文件格式分析**'
- en: This section covers the file formats of the individual software packages used
    in common Linux distributions. Linux distribution software packages are single
    archive files containing all the information and files needed to install and remove
    them from the Linux system. In addition, Linux systems typically have package
    management systems that keep track of installed packages, manage dependencies,
    perform updates, and so on.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了常见Linux发行版中使用的各个软件包的文件格式。Linux发行版软件包是单一的归档文件，包含了安装和移除这些软件包所需的所有信息和文件。此外，Linux系统通常有包管理系统，用来追踪已安装的包、管理依赖关系、执行更新等。
- en: 'Analysis of a software package file can reveal interesting artifacts. Some
    forensic analysis tasks that can be performed on a package file include:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 分析软件包文件可以揭示一些有趣的证据。一些可以对包文件进行的法医分析任务包括：
- en: Discovering when a package was built
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找包何时构建
- en: Verifying package integrity
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证包的完整性
- en: Showing package metadata
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示包元数据
- en: Listing package file contents
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出包文件内容
- en: Extracting supporting scripts
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取支持脚本
- en: Extracting individual files
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取单个文件
- en: Identifying additional timestamps
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标识额外的时间戳
- en: In addition, a vulnerability assessment may involve matching the version numbers
    of individual packages with known published vulnerabilities; for example, matching
    a particular software version installed on a system with a CVE published by Mitre
    (*[https://cve.mitre.org/](https://cve.mitre.org/)*). This is typically the task
    of an enterprise vulnerability management function within an organization.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，漏洞评估可能涉及将单个包的版本号与已知的公开漏洞进行匹配；例如，将系统上安装的特定软件版本与Mitre发布的CVE进行匹配（* [https://cve.mitre.org/](https://cve.mitre.org/)*）。这通常是组织内企业漏洞管理职能的任务。
- en: '***Debian Binary Package Format***'
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Debian二进制包格式***'
- en: The Debian binary package format (DEB), is used by Debian and Debian-based distributions.
    See the deb(5) man page on a Debian or Debian-based system for more information.
    A DEB file has the **.deb* extension and an initial magic string of seven characters
    (`!<arch>`). [Figure 7-1](ch07.xhtml#ch07fig01) on the following page shows the
    structure of a DEB file.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Debian二进制包格式（DEB）被Debian及其衍生发行版使用。有关更多信息，请参见Debian或Debian衍生系统上的deb(5)手册页。DEB文件具有**.deb**扩展名，并具有一个初始的七字符魔术字符串（`!<arch>`）。[图7-1](ch07.xhtml#ch07fig01)在下一页中显示了DEB文件的结构。
- en: 'DEB files use the `ar` archive format and contain three standard components.
    In this example, the `ed` package (a line-oriented text editor) is listed using
    the GNU `ar` command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: DEB文件使用`ar`档案格式，包含三个标准组件。在此示例中，使用GNU `ar`命令列出了`ed`包（一个行编辑器）：
- en: '[PRE11]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this example, the flags (`-tv`) for `ar` specify a verbose listing of the
    contents. The file timestamps indicate when the DEB package archive was built.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，`ar`的标志（`-tv`）指定了详细列出内容。文件时间戳表示DEB包档案的构建时间。
- en: 'The three files in the archive have the following contents:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 档案中的三个文件包含以下内容：
- en: '***debian-binary*** A file containing the package format version string'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '***debian-binary*** 一个包含包格式版本字符串的文件'
- en: '***control*** A compressed archive with scripts/metadata about the package'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '***control*** 一个包含包的脚本/元数据的压缩档案'
- en: '***data*** A compressed archive containing the files to be installed'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '***data*** 一个包含要安装文件的压缩档案'
- en: 'These components can be extracted with `ar`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件可以通过`ar`提取：
- en: '[PRE12]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The (`-xov`) flags instruct `ar` to extract files, keep original timestamps,
    and show verbose output. The *control.tar.xz* and *data.tar.xz* files are compressed
    archives that can be further examined.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: (`-xov`)标志指示`ar`提取文件、保留原始时间戳，并显示详细输出。*control.tar.xz*和*data.tar.xz*文件是可以进一步检查的压缩档案。
- en: '![Image](Images/ch07fig01.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/ch07fig01.jpg)'
- en: '*Figure 7-1: Debian “DEB” package format (modified from Wikipedia:* [https://upload.wikimedia.org/wikipedia/commons/6/67/Deb_File_Structure.svg](https://upload.wikimedia.org/wikipedia/commons/6/67/Deb_File_Structure.svg)*)*'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-1：Debian “DEB”包格式（修改自维基百科：* [https://upload.wikimedia.org/wikipedia/commons/6/67/Deb_File_Structure.svg](https://upload.wikimedia.org/wikipedia/commons/6/67/Deb_File_Structure.svg)*)*'
- en: 'The *debian-binary* file contains a single line with the package format version
    number (2.0). To list the contents of the archives, we rely on `tar` to decompress
    the file and list the archive contents:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*debian-binary*文件包含一行，表示包格式版本号（2.0）。为了列出档案的内容，我们依赖`tar`来解压文件并列出档案内容：'
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If we want to extract a particular file from the **.tar.xz* archives, we can
    use the same command, but give `tar` specific instructions to extract the file:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想从**.tar.xz**档案中提取特定文件，可以使用相同的命令，但给`tar`指令来提取该文件：
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The contents of the extracted control file list the version, CPU architecture,
    maintainer, dependencies, and other information. The *control* file is mandatory
    and the other files within the *control.tar.xz* component are optional. Other
    common package control files include pre-install, post-install, pre-remove, and
    post-remove scripts (`preinst`, `postinst`, `prerm`, and `postrm`, respectively).
    See the deb-control(5) man page for more information about the *control* file.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 提取的控制文件的内容列出了版本、CPU架构、维护者、依赖关系和其他信息。*control*文件是必需的，*control.tar.xz*组件中的其他文件是可选的。其他常见的包控制文件包括安装前、安装后、删除前和删除后脚本（分别为`preinst`、`postinst`、`prerm`和`postrm`）。有关*control*文件的更多信息，请参见deb-control(5)手册页。
- en: 'We can extract files and directories from the data archive the same way. However,
    doing so will extract a full directory tree to the current working directory with
    the file(s) specified. It is also possible to extract individual files to `stdout`,
    allowing redirection to a file or program. In this example, a single file is extracted
    to `stdout` using the `-xOf` flags (`O` is an uppercase O, not zero):'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以以相同的方式从数据归档中提取文件和目录。然而，这样做会将完整的目录树提取到当前工作目录，并指定文件。也可以将单个文件提取到`stdout`，并将其重定向到文件或程序中。在此示例中，使用`-xOf`标志（`O`是大写字母O，而不是零）提取单个文件到`stdout`：
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Individual files can be saved using file redirection, or the entire archive
    can be unpacked to a local analysis directory.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用文件重定向保存单个文件，或者将整个归档解压到本地分析目录。
- en: 'Although not mandatory, it is normal practice for DEB packages to contain a
    list of MD5 hashes to verify file integrity. These are stored in the *md5sums*
    file in the control component of the package archive file. This example displays
    the list of expected MD5 hashes in the package, followed by the verification of
    an installed binary file:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不是强制性的，但DEB包通常包含一个MD5哈希值列表，用于验证文件完整性。这些哈希值存储在包归档文件的控制组件中的*md5sums*文件中。此示例显示包中预期的MD5哈希值列表，后跟已安装二进制文件的验证：
- en: '[PRE16]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `md5sum` tool has a flag (`-c`) that reads a list of MD5s from files like
    *md5sums* and performs checks on all files listed. There has been discussion of
    replacing the *md5sums* file with SHA hashes (for more information, see *[https://wiki.debian.org/Sha256sumsInPackages](https://wiki.debian.org/Sha256sumsInPackages)*).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`md5sum`工具有一个标志（`-c`），它从像*md5sums*这样的文件中读取MD5列表，并对列出的所有文件进行检查。曾有讨论建议将*md5sums*文件替换为SHA哈希值（有关更多信息，请参阅*[https://wiki.debian.org/Sha256sumsInPackages](https://wiki.debian.org/Sha256sumsInPackages)*）。'
- en: On a Debian system, the `dpkg-deb` tool performs all the above analysis tasks
    of listing files, extracting files, viewing control data, and so on. If you are
    trying to recover data from a corrupted DEB file, `ar -tO` (`O` is uppercase O,
    not zero) will provide hexadecimal offsets to the three components, which may
    allow extraction with tools such as `dd`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在Debian系统上，`dpkg-deb`工具执行所有上述分析任务，如列出文件、提取文件、查看控制数据等。如果您正在尝试从损坏的DEB文件中恢复数据，`ar
    -tO`（`O`是大写字母O，而不是零）将提供三个组件的十六进制偏移量，这可能允许使用诸如`dd`之类的工具进行提取。
- en: '***Red Hat Package Manager***'
  id: totrans-130
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***红帽软件包管理器***'
- en: 'The *Red Hat Package Manager (RPM)* is a binary package format developed by
    Red Hat. RPM packages can be identified by an *.rpm* extension and a four-byte
    magic string (`ED AB EE DB`) at the start of the file. The structure of RPM package
    files is documented in the `rpm` tool’s source code, and the file */doc/manual/format*
    describes four logical sections:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '*红帽软件包管理器（RPM）* 是由红帽公司开发的二进制包格式。RPM包可以通过*.rpm*扩展名和文件开头的四字节魔术字符串（`ED AB EE DB`）进行识别。RPM包文件的结构在`rpm`工具的源代码中有详细说明，文件*/doc/manual/format*描述了四个逻辑部分：'
- en: '**Lead** 96 bytes of “magic” and other information'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**引导** 96字节的“魔术”信息及其他信息'
- en: '**Signature** Collection of “digital signatures”'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**签名** “数字签名”集合'
- en: '**Header** Holding area for all the package information (aka, metadata)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**头部** 存放所有包信息的区域（即元数据）'
- en: '**Payload** Compressed archive of the file(s) in the package (aka, payload)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**有效载荷** 软件包中文件的压缩归档（即有效载荷）'
- en: 'The `rpm` command, which can also be installed on non–Red Hat distros, can
    be used on a separate analysis machine. The query flag (`-q`) can be used to analyze
    various aspects of RPM files. In this example, the `-q` and `-i` flags provide
    an informational overview of the *xwrits* RPM package file:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`rpm`命令也可以安装在非Red Hat发行版上，可以在单独的分析机器上使用。查询标志（`-q`）可用于分析RPM文件的各个方面。在此示例中，`-q`和`-i`标志提供了关于*xwrits*
    RPM包文件的信息概述：'
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You can view other RPM metadata with the following flags (after `rpm -q`) together
    with the RPM filename:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下标志（在`rpm -q`之后）以及RPM文件名查看其他RPM元数据：
- en: -lv    Verbose list of files in package
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: -lv    显示软件包中文件的详细列表
- en: –dump Dumps file information (path, size, mtime, digest, mode, owner, group,
    isconfig, isdoc, rdev, and symlink)
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: –dump 转储文件信息（路径、大小、修改时间、摘要、模式、所有者、组、是否配置、是否文档、设备号、符号链接）
- en: –changes Displays change information for the package with full timestamps (`--changelog`
    is the same, but with dates)
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: –changes 显示包的变更信息，包含完整时间戳（`--changelog`与此相同，但带有日期）
- en: –provides Lists the capabilities this package provides
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: –提供 该软件包提供的功能列表
- en: –enhances Lists capabilities enhanced by package(s)
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: –enhances 列出软件包增强的功能
- en: –obsoletes Lists packages this package obsoletes
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: –obsoletes 列出了此包淘汰的包
- en: –conflicts Lists capabilities this package conflicts with
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: –conflicts 列出了此包与之冲突的功能
- en: –requires Lists capabilities on which this package depends
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: –requires 列出了此包所依赖的功能
- en: –recommends Lists capabilities recommended by package(s)
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: –recommends 列出了包所推荐的功能
- en: –suggests Lists capabilities suggested by package(s)
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: –suggests 列出了包所建议的功能
- en: –supplements Lists capabilities supplemented by package(s)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: –supplements 列出了包所补充的功能
- en: –scripts Lists the package-specific scriptlet(s) that are used as part of the
    installation and deinstallation processes
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: –scripts 列出了作为安装和卸载过程一部分使用的特定包脚本
- en: –filetriggers Lists file-trigger scriptlets from package(s)
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: –filetriggers 列出了包中的文件触发脚本
- en: –triggerscripts Displays the trigger scripts, if any, that are contained in
    the package
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: –triggerscripts 显示包中包含的触发脚本（如果有）
- en: This list was taken from the rpm(9) man page, where you can find further information
    about rpm files. If a flag returns no output, that header field is empty.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 该列表摘自 rpm(9) 手册页，您可以在其中找到有关 rpm 文件的更多信息。如果某个标志没有输出，则该头字段为空。
- en: Extracting individual files from RPM packages is a two-step process. First,
    the payload is extracted from the RPM, and then the desired file is extracted
    from that payload. The `rpm2cpio` and `rpm2archive` tools create a *cpio* or compressed
    tar (**.tgz*) archive file containing the payload of the RPM. These are files
    that most file managers and forensic tools should be able to browse for file exporting/extracting.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 从 RPM 包中提取单个文件是一个两步过程。首先，从 RPM 中提取有效载荷，然后从该有效载荷中提取所需的文件。`rpm2cpio` 和 `rpm2archive`
    工具会创建一个 *cpio* 或压缩 tar（**.tgz**）归档文件，其中包含 RPM 的有效载荷。这些文件是大多数文件管理器和取证工具应该能够浏览以进行文件导出/提取的。
- en: 'In the following example, an individual file is extracted from an RPM. First,
    the RPM payload is extracted, and then an individual file is identified and extracted:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，从 RPM 中提取单个文件。首先提取 RPM 的有效载荷，然后识别并提取单个文件：
- en: '[PRE18]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `rpm2cpio` command is run and the output is redirected to a file (it can
    be any name, but for clarity, I used same filename with a **.cpio* extension).
    The next command lists the *cpio* archive to find the desired file for extraction.
    The final command extracts the file to `stdout` where it can be piped or redirected
    to a program or file.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `rpm2cpio` 命令，并将输出重定向到文件（文件名可以是任何名称，但为了清晰起见，我使用了相同的文件名并加上 **.cpio** 扩展名）。下一个命令列出了
    *cpio* 存档，以查找要提取的文件。最后一个命令将文件提取到 `stdout`，可以通过管道或重定向到程序或文件。
- en: 'RPM package headers contain cryptographic signatures and hashes for verifying
    the payload’s integrity. Integrity checking is done with the `rpmkeys`^([8](footnotes.xhtml#ch07foot_08))
    command and can be viewed (verbose) with the `-Kv` flags:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: RPM 包头包含加密签名和哈希值，用于验证有效载荷的完整性。完整性检查可以使用 `rpmkeys`^([8](footnotes.xhtml#ch07foot_08))
    命令完成，并可以通过 `-Kv` 标志以详细模式查看：
- en: '[PRE19]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The GPG keys for signed RPM packages can be imported using the `rpmkeys` command.
    See the rpmkeys(8) man page for more information.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `rpmkeys` 命令导入已签名 RPM 包的 GPG 密钥。有关更多信息，请参阅 rpmkeys(8) 手册页。
- en: '***Arch Pacman Packages***'
  id: totrans-161
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Arch Pacman 包***'
- en: Packages for Arch Linux are compressed tar files. The default compression is
    currently in transition from XZ to Zstandard, with file extensions **.xz* and
    **.zst*, respectively.^([9](footnotes.xhtml#ch07foot_09)) The tar file contains
    both the package metadata and the files to be installed.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Arch Linux 的包是压缩的 tar 文件。当前默认的压缩格式正在从 XZ 过渡到 Zstandard，文件扩展名分别为 **.xz** 和 **.zst**。^([9](footnotes.xhtml#ch07foot_09))
    该 tar 文件包含了包的元数据以及要安装的文件。
- en: 'We can use `tar` to view the contents of a `pacman` package:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `tar` 查看 `pacman` 包的内容：
- en: '[PRE20]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This example shows the simplicity of the package format. Several files in the
    root of the archive contain the package metadata. They are described in the Arch
    Linux Wiki (*[https://wiki.archlinux.org/index.php/Creating_packages](https://wiki.archlinux.org/index.php/Creating_packages)*)
    and include:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 本例展示了包格式的简洁性。归档文件的根目录中包含包的元数据。这些文件在 Arch Linux Wiki 中有所描述（*[https://wiki.archlinux.org/index.php/Creating_packages](https://wiki.archlinux.org/index.php/Creating_packages)）并包括：
- en: '***.PKGINFO*** Contains all the metadata needed by `pacman` to deal with packages,
    dependencies, and so on.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '***.PKGINFO*** 包含 `pacman` 处理包、依赖项等所需的所有元数据。'
- en: '***.BUILDINFO*** Contains information needed for reproducible builds. This
    file is present only if a package is built with Pacman 5.1 or newer.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '***.BUILDINFO*** 包含了可重复构建所需的信息。此文件仅在使用 Pacman 5.1 或更高版本构建包时存在。'
- en: '***.MTREE*** Contains hashes and timestamps of the files, which are included
    in the local database so `pacman` can verify the package’s integrity.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '***.MTREE*** 包含文件的哈希值和时间戳，这些文件包含在本地数据库中，以便`pacman`验证软件包的完整性。'
- en: '***.INSTALL*** An optional file used to execute commands after the install/upgrade/remove
    stage (this file is present only if specified in the `PKGBUILD`).'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '***.INSTALL*** 一个可选文件，用于在安装/升级/删除阶段后执行命令（该文件仅在`PKGBUILD`中指定时存在）。'
- en: '***.Changelog*** An optional file kept by the package maintainer documenting
    the changes of the package.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '***.Changelog*** 包维护者保存的可选文件，记录软件包的变化。'
- en: 'The *.PKGINFO* file is regular text and can be easily viewed, but using the
    `pacman` tool provides more complete output (including fields that are undefined).
    The `-Qip` flags specify a query operation, information option, and a package
    filename for a target, respectively:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '*.PKGINFO* 文件是常规文本，可以轻松查看，但使用`pacman`工具可以提供更完整的输出（包括未定义的字段）。`-Qip`标志分别指定查询操作、信息选项和目标软件包文件名：'
- en: '[PRE21]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The *.MTREE* file is a compressed list of timestamps, permissions, file sizes,
    and cryptographic hashes. We can extract it by piping the `tar` output into `zcat`:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '*.MTREE* 文件是一个压缩的时间戳、权限、文件大小和加密哈希的列表。我们可以通过将`tar`输出管道传输到`zcat`来提取它：'
- en: '[PRE22]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This can be used to verify the integrity of the files in the package and provides
    timestamps for timeline reconstruction. We can use this information to analyze
    packages that are rogue, malicious, or have been tampered with.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以用来验证软件包中文件的完整性，并提供时间戳以重建时间线。我们可以利用这些信息分析那些异常、恶意或被篡改的软件包。
- en: '**Package Management System Analysis**'
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**软件包管理系统分析**'
- en: The previous section focused on the file formats of individual software packages
    before they are installed. Here we shift the focus to the package management systems
    for software already installed (or previously installed) on a machine. This includes
    analysis of the repositories from where packages were downloaded, where the package
    contents were placed on the filesystem, databases to track the installed packages,
    installation logs, and more.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 上一部分聚焦于安装前个别软件包的文件格式。这里我们将重点转向已安装（或以前安装过）的软件的包管理系统。这包括分析下载软件包的仓库、软件包内容在文件系统中的位置、跟踪已安装软件包的数据库、安装日志等。
- en: 'A Linux distribution’s software packaging system typically has the following
    components:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Linux发行版的软件包系统通常包含以下组件：
- en: Repositories to download compiled binary packages
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于下载已编译二进制包的仓库
- en: Repositories to download package source code
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于下载软件包源代码的仓库
- en: Repositories with non-free or varying licenses
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含非自由或具有不同许可协议的仓库
- en: Information to resolve dependencies and conflicts
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决依赖关系和冲突的信息
- en: A database with a record of installed software
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含已安装软件记录的数据库
- en: Logfiles of package management activity (including uninstalls)
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包管理活动的日志文件（包括卸载）
- en: Frontend user interfaces interacting with backend tools and libraries
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与后端工具和库交互的前端用户界面
- en: Package management systems across Linux distributions are very similar. See
    *[https://wiki.archlinux.org/index.php/Pacman/Rosetta](https://wiki.archlinux.org/index.php/Pacman/Rosetta)*
    for a comparison of package management commands.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 各个Linux发行版的包管理系统非常相似。请参阅*[https://wiki.archlinux.org/index.php/Pacman/Rosetta](https://wiki.archlinux.org/index.php/Pacman/Rosetta)*以查看软件包管理命令的对比。
- en: 'From a forensics perspective, we can ask many questions related to package
    management, such as the following:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 从取证的角度来看，我们可以提出许多与软件包管理相关的问题，例如：
- en: What packages are currently installed, and which versions?
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前安装了哪些软件包，哪些版本？
- en: Who installed them, when, and how?
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谁安装了这些软件包，何时安装的，以及如何安装的？
- en: Which packages were upgraded and when?
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪些软件包被升级了，何时升级的？
- en: Which packages were removed and when?
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪些软件包被删除了，何时删除的？
- en: Which repositories were used?
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用了哪些仓库？
- en: Can we confirm the integrity of the packages?
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们能否确认软件包的完整性？
- en: What logs, databases, and cached data can be analyzed?
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以分析哪些日志、数据库和缓存数据？
- en: Given a particular file on the filesystem, to which package does it belong?
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定文件系统中的某个特定文件，它属于哪个软件包？
- en: What other timestamps are relevant?
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有哪些其他时间戳是相关的？
- en: Answering these questions will help reconstruct past activity, build timelines,
    and identify possible malicious or suspicious activity. Finding and validating
    cryptographic hashes can also be useful when using NSRL hashsets to exclude known
    software. Packages that have been removed may leave behind traces of custom or
    modified configuration files and data that was not deleted.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 解答这些问题有助于重建过去的活动、建立时间线并识别可能的恶意或可疑活动。查找和验证加密哈希值也有助于使用 NSRL 哈希集排除已知的软件。已删除的软件包可能会留下自定义或修改过的配置文件和未删除的数据痕迹。
- en: The next few sections describe the analysis of the most common distributions.
    Each section provides an introduction to the packaging system and describes the
    various files, databases, and directory locations that are of interest to a forensic
    examiner.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几个部分描述了对最常见的发行版的分析。每个部分提供了包管理系统的介绍，并描述了对取证检查员有兴趣的各种文件、数据库和目录位置。
- en: '***Debian apt***'
  id: totrans-199
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Debian apt***'
- en: The Debian package management system is a collection of programs that manage
    package searching/selection, external repositories, downloads, dependency/conflict
    resolution, installation, removal, updates and upgrades, and other package housekeeping
    functions. The end user interacts with high-level programs like Apt, Aptitude,
    Synaptic, and others to choose which packages to install, remove, or upgrade.
    These high-level programs interact with the `dpkg` command,^([10](footnotes.xhtml#ch07foot_010))
    which manages the installation, removal, and querying of packages on a Debian-based
    system. Forensic investigators are mainly interested in the current package state
    of a system, reconstructing past package activity, and identifying other interesting
    artifacts.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Debian 包管理系统是一组程序，负责管理软件包的搜索/选择、外部仓库、下载、依赖/冲突解决、安装、删除、更新和升级以及其他软件包管理功能。最终用户通过像
    Apt、Aptitude、Synaptic 等高级程序与系统交互，选择安装、删除或升级哪些软件包。这些高级程序与 `dpkg` 命令交互，^([10](footnotes.xhtml#ch07foot_010))
    该命令用于管理 Debian 系统上软件包的安装、删除和查询。取证调查员主要关注系统当前的软件包状态，重建过去的软件包活动，并识别其他有趣的证据。
- en: The current installed package state of a Debian-based system is stored in the
    */var/lib/dpkg/status* file (the package “database”). This is a plaintext file
    with each package entry starting with the string `Package:` and ending with a
    blank line (similar style to the email mbox format). Backup copies of this file
    are in the same directory, and may be named *status-old* or */var/backups/ dpkg.status.**
    (multiple copies of previous versions may also be available in compressed form).
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: Debian 系统当前已安装的软件包状态存储在 */var/lib/dpkg/status* 文件中（软件包“数据库”）。这是一个纯文本文件，每个软件包条目以
    `Package:` 字符串开头，以空行结尾（类似于电子邮件的 mbox 格式）。该文件的备份副本存储在同一目录中，可能被命名为 *status-old*
    或 */var/backups/dpkg.status.**（以前版本的多个副本也可能以压缩形式存在）。
- en: 'The *status* file can be easily viewed and searched with any text editor or
    text-processing tool. In this example, the `awk`^([11](footnotes.xhtml#ch07foot_011))
    tool is used to search the status file for a package name (`Package: bc`) and
    print the entire block of information:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '*status* 文件可以通过任何文本编辑器或文本处理工具轻松查看和搜索。在这个例子中，`awk`^([11](footnotes.xhtml#ch07foot_011))
    工具用于搜索状态文件中的软件包名称（`Package: bc`）并打印出整个信息块：'
- en: '[PRE23]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The Status: line is interesting from a forensic reconstruction perspective.
    A normal installed package file will have Status: install ok installed. Packages
    that have been removed but still have user-modified configuration files are listed
    with a status of Status: deinstall ok config-files. Some packages may have a Conffiles:
    line followed by several lines indicating configuration files an administrator
    might modify, and the MD5 hash of the originally installed version of the file.
    For example, the default configuration files of the Apache web server are shown
    here:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '从取证重建的角度来看，Status: 行是非常有趣的。正常安装的软件包文件会显示 Status: install ok installed。已删除但仍包含用户修改过的配置文件的软件包将显示为
    Status: deinstall ok config-files。某些软件包可能会有一个 Conffiles: 行，后面跟着几行，表示管理员可能会修改的配置文件，以及该文件原始安装版本的
    MD5 哈希值。例如，以下是 Apache Web 服务器的默认配置文件：'
- en: '[PRE24]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The MD5 hashes can help identify configuration files that deviate from the package
    defaults. See the dpkg-query(1) man page for more information about the fields
    in the *status* file.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: MD5 哈希值可以帮助识别偏离软件包默认配置的配置文件。有关 *status* 文件字段的更多信息，请参见 dpkg-query(1) 手册页。
- en: 'The *status* file does not contain installation timestamps. For installation
    dates, you must analyze the logfiles. Several logfiles record the activity of
    the package management system and the frontend package manager tools. Common package
    management logs found on Debian-based systems include the following:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '*status* 文件不包含安装时间戳。要查看安装日期，必须分析日志文件。多个日志文件记录了软件包管理系统及前端包管理工具的活动。Debian 系统上常见的软件包管理日志包括以下内容：'
- en: '***/var/log/dpkg.log*** `dpkg` activity, including changes to package status
    (install, remove, upgrade, and so on)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '***/var/log/dpkg.log*** `dpkg` 活动日志，包括软件包状态的变化（安装、删除、升级等）'
- en: '***/var/log/apt/history.log*** Start/end times of `apt` commands and which
    user ran them'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '***/var/log/apt/history.log*** `apt` 命令的开始/结束时间以及执行这些命令的用户'
- en: '***/var/log/apt/term.log*** Start/end times of `apt` command output (stdout)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '***/var/log/apt/term.log*** `apt` 命令输出（stdout）的开始/结束时间'
- en: '***/var/log/apt/eipp.log.**** Logs the current state of the External Installation
    Planner Protocol (EIPP), a system that manages dependency ordering'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '***/var/log/apt/eipp.log.**** 记录外部安装计划协议（EIPP）的当前状态，这是一个管理依赖顺序的系统'
- en: '***/var/log/aptitude*** Aptitude actions that were run'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '***/var/log/aptitude*** 记录执行的 Aptitude 操作'
- en: '***/var/log/unattended-upgrades/**** Logs from automated/unattended upgrades'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '***/var/log/unattended-upgrades/**** 自动化/无人值守升级的日志'
- en: Rotated logs may be compressed and renamed to filenames with a number indicating
    the relative age of the logfile (*dpkg.log.1.gz*, for example). The larger the
    number, the older the log.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 已旋转的日志可能会被压缩并重新命名为带有数字的文件名，表示日志文件的相对年龄（例如 *dpkg.log.1.gz*）。数字越大，日志越旧。
- en: Configuration information for `dpkg` is stored in the */etc/dpkg/* directory.
    Configuration information for `apt` is stored in the */etc/apt/* directory. The
    */etc/apt/* directory contains the *sources.list* and *sources.list.d/** files.
    These files are interesting because they define the configured external repositories
    for a particular Debian release. Explicitly added (legitimate or rogue) repositories
    will be appended to this file or saved to a file in the *sources.list.d/* directory.
    Ubuntu also has Personal Package Archives (PPAs) that use its central Launchpad
    server to help users add sources for individual packages.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`dpkg` 的配置信息存储在 */etc/dpkg/* 目录中。`apt` 的配置信息存储在 */etc/apt/* 目录中。*/etc/apt/*
    目录包含 *sources.list* 和 *sources.list.d/** 文件。这些文件很重要，因为它们定义了特定 Debian 发行版的外部仓库配置。显式添加的（合法或恶意）仓库将被附加到此文件或保存到
    *sources.list.d/* 目录中的文件里。Ubuntu 还提供个人软件包档案（PPAs），用户可以通过它的中央 Launchpad 服务器帮助添加单个软件包的源。'
- en: The */var/lib/dpkg/info/* directory contains several files for each installed
    package (this is the metadata from the DEB files). This information includes the
    file list (**.list*), cryptographic hashes (**.md5sums*), preinstall/postinstall
    and remove scripts, and more. The **.conffiles* (if they exist) are a potentially
    useful resource for forensic investigators, as they list the location of configuration
    files and are often modified by the system owner.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '*/var/lib/dpkg/info/* 目录包含每个已安装软件包的多个文件（这些是来自 DEB 文件的元数据）。这些信息包括文件列表（**.list*）、加密哈希（**.md5sums*）、安装前/安装后和删除脚本等。**.conffiles*（如果存在）可能是法医调查人员有用的资源，因为它们列出了配置文件的位置，并且通常会被系统所有者修改。'
- en: The */var/cache/apt/archives/* directory contains **.deb* files that have been
    downloaded in the past. The */var/cache/debconf/* directory is a central location
    for package configuration information and templates. Of potential interest here
    is the *passwords.dat* file that contains system-generated passwords needed for
    local daemons.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '*/var/cache/apt/archives/* 目录包含过去下载的 **.deb* 文件。*/var/cache/debconf/* 目录是软件包配置信息和模板的中心位置。这里可能感兴趣的是
    *passwords.dat* 文件，它包含系统生成的本地守护进程所需的密码。'
- en: See the dpkg(1) and apt(8) man pages, as well as the Debian manual (*[https://www.debian.org/doc/manuals/debian-reference/ch02.en.html#_the_dpkg_command](https://www.debian.org/doc/manuals/debian-reference/ch02.en.html#_the_dpkg_command)*)
    for more information.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 dpkg(1) 和 apt(8) 手册页，以及 Debian 手册（*[https://www.debian.org/doc/manuals/debian-reference/ch02.en.html#_the_dpkg_command](https://www.debian.org/doc/manuals/debian-reference/ch02.en.html#_the_dpkg_command)*)
    以获取更多信息。
- en: '***Fedora dnf***'
  id: totrans-219
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Fedora dnf***'
- en: Fedora-based systems manage packages using `dnf` (Dandified Yum), the successor
    to yum (Yellow Dog Update Manager). The `dnf` tool is written in Python and uses
    the `librpm` library to manage the installed `rpm` packages.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 Fedora 的系统使用 `dnf`（Dandified Yum）来管理软件包，`dnf` 是 yum（Yellow Dog Update Manager）的继任者。`dnf`
    工具用 Python 编写，并使用 `librpm` 库来管理已安装的 `rpm` 软件包。
- en: 'The current installed package state is stored in a collection of Berkeley database
    files in the */var/lib/rpm/* directory. The easiest way to analyze this is to
    use the `rpm` command on a separate analysis machine^([12](footnotes.xhtml#ch07foot_012))
    with the `--dbpath` flag pointing to a read-only copy of the database files. For
    example, to list the installed packages in a collection of database files stored
    in a separate directory, use the --dbpath and -qa flags:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 当前已安装的软件包状态存储在 */var/lib/rpm/* 目录中的一组 Berkeley 数据库文件中。分析这些数据最简单的方法是在一台单独的分析机器上使用
    `rpm` 命令，并使用 `--dbpath` 标志指向数据库文件的只读副本。例如，要列出存储在单独目录中的数据库文件中的已安装软件包，可以使用 --dbpath
    和 -qa 标志：
- en: '[PRE25]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To see the metadata for a specific installed package, use the --dbpath and
    -qai flags with the package name. Several examples using the Evince document viewer
    package are shown here:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看特定已安装软件包的元数据，请使用 --dbpath 和 -qai 标志，并提供软件包名称。以下是使用 Evince 文档查看器包的几个示例：
- en: '[PRE26]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To see a list of files belonging to a package, use the --dbpath and -ql flags
    (lowercase letter L, as in “list”) flags:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看属于某个软件包的文件列表，请使用 --dbpath 和 -ql 标志（小写字母 L，表示“列表”）：
- en: '[PRE27]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To determine which package a file belongs to, use the --dbpath and -qf flags
    with the full path and filename:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定某个文件属于哪个软件包，请使用 --dbpath 和 -qf 标志，并提供完整的路径和文件名：
- en: '[PRE28]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: All of these commands can be used with read-only offline copies of the RPM database
    files found in the */var/lib/rpm/* directory of the Linux image under analysis.
    Be aware that running the `rpm` command on your forensic workstation will use
    the local RPM configuration (for example, */usr/lib/rpm/ rpmrc*), but that shouldn’t
    affect the accuracy of the output shown in the examples above.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些命令都可以与位于被分析的 Linux 镜像下 */var/lib/rpm/* 目录中的只读离线 RPM 数据库文件一起使用。请注意，在你的取证工作站上运行
    `rpm` 命令将使用本地的 RPM 配置（例如，*/usr/lib/rpm/rpmrc*），但这不应影响上述示例中输出的准确性。
- en: The RPM database files traditionally have been standard Berkeley DB files and
    could be analyzed individually with tools like `db_dump`. Fedora 33 transitioned
    to SQLite for the RPM database, and associated tools can be used to examine package
    data. In addition, the */var/lib/dnf/* directory contains SQLite databases with
    dnf package information, allowing analysis with SQLite tools.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: RPM 数据库文件传统上是标准的 Berkeley DB 文件，可以通过像 `db_dump` 这样的工具单独分析。Fedora 33 版本将 RPM
    数据库迁移到了 SQLite，并且可以使用相关工具来检查包数据。此外，*/var/lib/dnf/* 目录包含了 SQLite 数据库，其中存储了 dnf
    包的信息，可以使用 SQLite 工具进行分析。
- en: 'The `dnf` command generates multiple logs, which are stored in the */var/ log/*
    directory and listed here:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`dnf` 命令生成多个日志文件，这些日志文件存储在 */var/log/* 目录中，并列在这里：'
- en: '*/var/log/dnf.librepo.log*'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*/var/log/dnf.librepo.log*'
- en: '*/var/log/dnf.log*'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*/var/log/dnf.log*'
- en: '*/var/log/dnf.rpm.log*'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*/var/log/dnf.rpm.log*'
- en: '*/var/log/dnf.librepo.log*'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*/var/log/dnf.librepo.log*'
- en: '*/var/log/hawkey.log*'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*/var/log/hawkey.log*'
- en: Some of these are less interesting from a forensics perspective and may show
    only that a machine was online at a particular time (checking for updates, and
    so on).
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些从取证的角度来看兴趣较小，可能仅显示某台计算机在特定时间在线（例如检查更新等）。
- en: 'The *dnf.log* (or rotated versions) contain activity performed using the `dnf`
    command. Here’s an example:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '*dnf.log*（或其轮转版本）记录了使用 `dnf` 命令执行的活动。以下是一个示例：'
- en: '[PRE29]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Here, the `dnf install` command was used to install `openssh-server` at a particular
    time.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`dnf install` 命令用于在特定时间安装 `openssh-server`。
- en: 'The configuration data for `dnf` is potentially found in several locations:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`dnf` 的配置数据可能存储在多个位置：'
- en: '***/etc/dnf/*** Configuration data and modules for `dnf`'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '***/etc/dnf/*** `dnf` 的配置数据和模块'
- en: '***/etc/rpm/*** Configuration data and macros for `rpm`'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '***/etc/rpm/*** `rpm` 的配置数据和宏'
- en: '***/etc/yum.repos.d/*** Remote package repositories'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '***/etc/yum.repos.d/*** 远程软件包仓库'
- en: See the dnf.conf(5) man page for more information about `dnf` configuration.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 dnf.conf(5) 手册页，以获取有关 `dnf` 配置的更多信息。
- en: '***SUSE zypper***'
  id: totrans-246
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***SUSE zypper***'
- en: SUSE Linux originally had its own package manager tightly integrated with its
    YaST configuration tool. SUSE later switched to using RPM for the package format
    and developed the ZYpp package manager. The primary tool for interfacing with
    the ZYpp library (libzypp) is `zypper`. The configuration information is in the
    */etc/zypp/zypper.conf* and */etc/zypp/zypp.conf* files, which control the `zypper`
    tool and ZYpp library, respectively. The configuration files specify various parameters,
    including the locations of files and directories. See the zypper(8) man page for
    more information.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: SUSE Linux 最初有自己的软件包管理器，紧密集成了 YaST 配置工具。后来，SUSE 转而使用 RPM 作为软件包格式，并开发了 ZYpp 包管理器。与
    ZYpp 库（libzypp）交互的主要工具是 `zypper`。配置文件位于 */etc/zypp/zypper.conf* 和 */etc/zypp/zypp.conf*，分别控制
    `zypper` 工具和 ZYpp 库。这些配置文件指定了各种参数，包括文件和目录的位置。有关更多信息，请参阅 zypper(8) 手册页。
- en: The ZYpp library calls the `rpm` tool to perform the low-level installation
    and removal tasks. Because the packages are standard RPMs, the installed package
    state can be analyzed in the same way as Fedora-based systems. The */var/lib/rpm/*
    directory contains the installed package databases, as described in the previous
    section.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: ZYpp 库调用 `rpm` 工具执行底层的安装和移除任务。因为软件包是标准的 RPM 格式，所以可以像分析基于 Fedora 的系统一样分析已安装的软件包状态。*/var/lib/rpm/*
    目录包含已安装的软件包数据库，如上一节所述。
- en: 'ZYpp has several detailed logs of package management activity. The */var/log/zypp/history*
    log records the actions of the ZYpp library, which multiple frontend tools might
    use. The following example shows logs for the installation and removal of the
    `cowsay` package:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: ZYpp 记录了多种详细的软件包管理活动日志。*/var/log/zypp/history* 日志记录了 ZYpp 库的操作，多个前端工具可能会使用这些日志。以下示例显示了安装和移除
    `cowsay` 软件包的日志：
- en: '[PRE30]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The log contains basic `libzypp` actions, including package install/remove,
    repository add/remove, repository changes, and the commands used.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 日志包含基本的 `libzypp` 操作，包括软件包安装/移除、仓库添加/移除、仓库更改以及使用的命令。
- en: The */var/log/zypper.log* file shows detailed activity of the `zypper` command
    line tool, and the */var/log/pk_backend_zypp* has logs of PackageKit activity.
    Both of these logs contain a field with the local system’s hostname. This could
    be interesting from a forensics perspective if the hostname is dynamically generated
    from DHCP because it indicates the hostname during the time the tools were run.
    If the hostname is an FQDN, it could have a valid domain name resolving to an
    IP address.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '*/var/log/zypper.log* 文件显示了 `zypper` 命令行工具的详细活动，*/var/log/pk_backend_zypp*
    则包含了 PackageKit 活动的日志。这两个日志文件中都有一个字段，包含本地系统的主机名。如果主机名是通过 DHCP 动态生成的，从取证角度来看可能很有趣，因为这表明工具运行时的主机名。如果主机名是
    FQDN，它可能有一个有效的域名解析到一个 IP 地址。'
- en: 'The SUSE `zypper-log` tool can print formatted output of a *zypper.log* file:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: SUSE 的 `zypper-log` 工具可以打印 *zypper.log* 文件的格式化输出：
- en: '[PRE31]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This output is similar to shell history in that all `zypper` commands entered
    are shown, including misspelled or failed attempts. The `-l` (lowercase letter
    L) flag specifies the name of the logfile to use if the log has been copied to
    an analysis machine.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出类似于 shell 历史记录，显示了所有输入的 `zypper` 命令，包括拼写错误或失败的尝试。`-l`（小写字母 L）标志指定了如果日志已被复制到分析机器上时要使用的日志文件名。
- en: The configuration of repositories is stored in definition files in the */etc/
    repos.d/* and */etc/services.d/* directories. Service definition files manage
    the repositories and contain the `lrf_dat` variable, which is a timestamp (in
    Unix epoch format) indicating the date of last refresh. Information about remote
    package repositories (metadata) is cached locally in the */var/cache/zypp/** directories.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库配置存储在 */etc/repos.d/* 和 */etc/services.d/* 目录中的定义文件中。服务定义文件管理仓库，并包含 `lrf_dat`
    变量，该变量是一个时间戳（以 Unix 纪元格式表示），指示最后刷新日期。关于远程软件包仓库（元数据）的信息被本地缓存，在 */var/cache/zypp/**
    目录中。
- en: Some SUSE installations are configured to save bug report information whenever
    a distribution upgrade (`zypper dist-upgrade`) is run. This will create a directory
    in */var/log/updateTestcase-**, where *** is a date and time. The directory will
    contain compressed XML files of available repository packages and installed packages
    (such as *solver-system.xml.gz*).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 SUSE 安装配置为每次运行发行版升级（`zypper dist-upgrade`）时保存错误报告信息。这将创建一个目录 */var/log/updateTestcase-**，其中
    *** 为日期和时间。该目录将包含可用仓库软件包和已安装软件包的压缩 XML 文件（例如 *solver-system.xml.gz*）。
- en: The `zypper` tool can also be run as an interactive shell (`zypper shell`),
    in which case, histories of commands are stored in the *~/.zypper_history* file
    of the user who ran them.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`zypper` 工具也可以作为交互式 shell（`zypper shell`）运行，在这种情况下，命令的历史记录将存储在运行该命令的用户的 *~/.zypper_history*
    文件中。'
- en: 'The */var/lib/zypp/* directory also contains persistent information about the
    installed system. A unique identifier is generated during installation and used
    for statistics every time files are downloaded from SUSE. The file *AnonymousUniqueId*
    contains the string, as shown here:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '*/var/lib/zypp/* 目录还包含有关已安装系统的持久信息。安装过程中会生成一个唯一标识符，并在每次从 SUSE 下载文件时用于统计数据。文件
    *AnonymousUniqueId* 包含该字符串，如下所示：'
- en: '[PRE32]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This string is embedded in the HTTP user-agent (`X-ZYpp-AnonymousId:`) and sent
    to SUSE’s servers when files are requested.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 该字符串嵌入在 HTTP 用户代理中（`X-ZYpp-AnonymousId:`），并在请求文件时发送到 SUSE 的服务器。
- en: '***Arch pacman***'
  id: totrans-262
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Arch pacman***'
- en: Arch Linux uses the `pacman` command line tool for downloading and managing
    packages. The configuration file */etc/pacman.conf* is used to control how `pacman`
    and the associated `libalpm` library are used. Packages are fetched from remote
    mirror sites, which are configured in */etc/pacman.d/mirrorlist* and used in the
    order listed.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: Arch Linux 使用 `pacman` 命令行工具来下载和管理软件包。配置文件 */etc/pacman.conf* 用于控制如何使用 `pacman`
    和关联的 `libalpm` 库。软件包从远程镜像站点获取，镜像站点在 */etc/pacman.d/mirrorlist* 中配置，并按列出的顺序使用。
- en: 'Arch Linux systems typically install packages from one of four sources:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: Arch Linux 系统通常从以下四个源之一安装软件包：
- en: '***core*** Packages needed for a basic operational Arch system'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '***core*** 运行基本操作的 Arch 系统所需的软件包'
- en: '***extra*** Packages that add non-core functionality (desktops and such)'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '***extra*** 添加非核心功能的软件包（例如桌面环境等）'
- en: '***community*** Packages from the Arch User Repository (AUR) that have sufficient
    community votes and are managed by trusted users (TUs)'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '***community*** 来自 Arch 用户库（AUR）的软件包，这些包获得了足够的社区投票，并由受信任的用户（TUs）管理'
- en: PKGBUILD Community-driven scripts in the AUR to build a package from source
    or proprietary binaries (where trust is unknown)
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: PKGBUILD AUR 中由社区驱动的脚本，用于从源代码或专有二进制文件（信任未知的情况下）构建软件包
- en: 'The first three sources are official Arch repositories with compiled binary
    packages. The list of available packages in the official repositories are synchronized
    with files in the */var/lib/pacman/sync/* directory. These files are simply zipped
    tar archives (with a different filename extension) and can be extracted with regular
    tools:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个源是官方的 Arch 仓库，包含已编译的二进制包。官方仓库中可用软件包的列表与 */var/lib/pacman/sync/* 目录中的文件同步。这些文件实际上是压缩的
    tar 文件（扩展名不同），可以使用常规工具进行解压：
- en: '[PRE33]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The timestamps indicate when the repository package lists and individual packages
    were last updated.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳表示仓库包列表和单个包最后更新的时间。
- en: The integrity of signed^([13](footnotes.xhtml#ch07foot_013)) packages and databases
    is verified using GnuPG and described in the pacman(8) man page. The GPG keys
    used to verify signatures are stored in the */etc/pacman.d/gnupg/* directory.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 签名的软件包和数据库的完整性使用 GnuPG 进行验证，并在 pacman(8) 手册中进行描述。用于验证签名的 GPG 密钥存储在 */etc/pacman.d/gnupg/*
    目录中。
- en: 'The default location of installed package metadata is the */var/lib/pacman/
    local/* directory. A separate directory for every installed package exists on
    the system and contains these files:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 安装的软件包元数据的默认位置是 */var/lib/pacman/local/* 目录。系统中为每个已安装的软件包创建一个独立的目录，并包含以下文件：
- en: '***desc*** Provides a description of the installed package (the metadata) and
    an install timestamp'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '***desc*** 提供已安装包的描述（元数据）和安装时间戳'
- en: '***files*** A list of files and directories installed by the package'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '***files*** 软件包安装的文件和目录列表'
- en: '***mtree*** A zipped text file with information about individual files and
    directories'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '***mtree*** 一个压缩的文本文件，包含有关单个文件和目录的信息'
- en: '***install*** An optional file containing commands after install, upgrade,
    or removal'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '***install*** 一个可选文件，包含安装、升级或删除后的命令'
- en: '***changelog*** An optional file documenting changes to the package'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '***changelog*** 一个可选文件，记录软件包的变更历史'
- en: These correspond to the files listed earlier when describing the Arch Linux
    package format.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这些与之前描述的 Arch Linux 包格式中的文件相对应。
- en: 'The *mtree* file contains the package’s filenames, timestamps, cryptographic
    hashes, and permissions needed to install the package. See the mtree(5) man page
    for more information about the format. The contents of *mtree* are gzip-compressed
    (but without a filename extension) and can be viewed with `zless` or `zcat`. In
    this example, the *mtree* file from the sfsimage^([14](footnotes.xhtml#ch07foot_014))
    package is analyzed:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '*mtree* 文件包含了安装包所需的文件名、时间戳、加密哈希值和权限。有关该格式的更多信息，请参见mtree(5)手册页。*mtree*的内容是经过gzip压缩的（但没有文件扩展名），可以通过`zless`或`zcat`查看。在此示例中，来自sfsimage^([14](footnotes.xhtml#ch07foot_014))包的*mtree*文件被分析：'
- en: '[PRE34]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: When a package is removed, the installed files are deleted together with this
    package metadata directory.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 当软件包被移除时，安装的文件会与该包的元数据目录一起被删除。
- en: 'The history of package installation, updates, and removal is logged in the
    */var/log/pacman.log* file. The following example shows a package being installed
    and then removed:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 包的安装、更新和移除历史记录会被记录在*/var/log/pacman.log*文件中。以下示例展示了一个软件包的安装和随后的移除：
- en: '[PRE35]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In the logs, `PACMAN` refers to `pacman` commands executed by the user, and
    `ALPM` refers to `libalpm` library activity (which includes installing dependencies).
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在日志中，`PACMAN`指的是用户执行的`pacman`命令，而`ALPM`指的是`libalpm`库的活动（包括安装依赖）。
- en: Packages downloaded from the various repositories are cached in the */var/cache/pacman/pkg/*
    directory. This can be interesting from a forensics perspective because the directory
    contains previous versions of updated package files and does not delete removed
    package files. The filesystem timestamps will indicate when a package was downloaded
    for installation or update.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 从各种仓库下载的软件包会被缓存到*/var/cache/pacman/pkg/*目录中。从取证角度来看，这可能很有趣，因为该目录包含了更新过的包文件的历史版本，并且不会删除已经移除的包文件。文件系统的时间戳将显示软件包何时被下载用于安装或更新。
- en: Packages in the AUR that are not part of the Arch community repository require
    several manual steps to install. This process is typically automated using AUR
    helper scripts (two examples of popular AUR helpers are `yay` and `pacaur`). These
    programs download the *PKGBUILD* and source files, unpack and compile source code,
    create and install a package, and then clean up any temporary files. These helper
    scripts may leave files and data in the user’s *~/.cache/* directory with filesystem
    timestamps from when the package was built. Many AUR helper programs are available,
    and each one might have its own configuration and save log information. See *[https://wiki.archlinux.org/index.php/AUR_helpers](https://wiki.archlinux.org/index.php/AUR_helpers)*
    for a list of AUR helpers.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: AUR 中的那些不属于 Arch 社区仓库的软件包需要通过多个手动步骤来安装。这个过程通常通过 AUR 帮助脚本自动化（两个常见的 AUR 帮助工具是`yay`和`pacaur`）。这些程序下载*PKGBUILD*和源文件，解压并编译源代码，创建并安装包，然后清理所有临时文件。这些帮助脚本可能会在用户的*~/.cache/*目录中留下文件和数据，并带有软件包构建时的文件系统时间戳。有许多
    AUR 帮助程序可用，每个程序可能都有自己的配置和日志信息。有关 AUR 帮助程序的完整列表，请参见*[https://wiki.archlinux.org/index.php/AUR_helpers](https://wiki.archlinux.org/index.php/AUR_helpers)*。
- en: '**Universal Software Package Analysis**'
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**通用软件包分析**'
- en: Some software installation and packaging systems bypass the standard mechanisms
    of Linux distributions. These are sometimes called *universal software packages*
    or *universal package systems* if they were designed to function independently
    of the chosen Linux distribution (or version of some particular distribution).
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 一些软件安装和打包系统绕过了 Linux 发行版的标准机制。如果这些系统设计为独立于所选的 Linux 发行版（或某个特定版本的发行版）运行，它们有时被称为*通用软件包*或*通用包系统*。
- en: Some software packaging systems also are designed to function across non-Linux
    operating systems or enterprise container platforms (Docker, for example). This
    section focuses primarily on Linux-specific local packaging systems.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 一些软件打包系统还设计为跨非 Linux 操作系统或企业容器平台（例如 Docker）工作。本节主要关注 Linux 特定的本地打包系统。
- en: '***AppImage***'
  id: totrans-291
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***AppImage***'
- en: AppImage was designed to provide compatible binaries that would work across
    multiple Linux distributions and versions by creating a self-contained portable
    file format. The most popular use of AppImage is to have the latest versions of
    desktop apps running on stable Linux distributions that have older app versions
    in their native package repository. AppImage can also be used to run old versions
    of software. The example presented later in this section will analyze a working
    AppImage of the NCSA Mosaic browser from the mid-1990s.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: AppImage 的设计目的是通过创建自包含的便携文件格式，提供跨多个 Linux 发行版和版本兼容的二进制文件。AppImage 最常见的用途是在稳定的
    Linux 发行版上运行最新版本的桌面应用程序，这些发行版的本地软件包仓库中的应用程序版本较旧。AppImage 也可以用来运行旧版本的软件。本节后面展示的示例将分析一个来自
    1990 年代中期的 NCSA Mosaic 浏览器的工作 AppImage。
- en: The AppImage format bundles all the needed binaries, libraries, and supporting
    files into a single executable file. Any user can download an AppImage file, give
    it execute permissions, and then run it. No further installation or root privileges
    are necessary. An AppImage binary embeds a squashfs filesystem where the directory
    structure of files is stored. When the binary is run, this squashfs filesystem
    is mounted (via FUSE), and execution is passed to an internal program called AppRun.
    AppImage binaries are not running in an isolated sandbox and have access to the
    rest of the filesystem. The user’s home directory may have configs, cache, and
    other files related to the AppImage program.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: AppImage 格式将所有必要的二进制文件、库和支持文件捆绑到一个可执行文件中。任何用户都可以下载 AppImage 文件，授予执行权限，然后运行它。无需进一步的安装或根权限。AppImage
    二进制文件嵌入了一个 squashfs 文件系统，其中存储了文件的目录结构。当二进制文件运行时，这个 squashfs 文件系统通过 FUSE 挂载，执行传递给一个名为
    AppRun 的内部程序。AppImage 二进制文件并不是在一个隔离的沙盒中运行，它们可以访问文件系统的其他部分。用户的主目录可能包含与 AppImage
    程序相关的配置、缓存和其他文件。
- en: Every AppImage executable includes flags for file extraction, squashfs mounting,
    and more. The most interesting flag from a forensics perspective is `--appimage-offset`,
    which provides the byte offset of the embedded squashfs filesystem. This offset
    allows us to access the filesystem with the `unsquashfs` command to extract detailed
    information and files (including preserved timestamps). The problem with this
    flag is that we must execute the binary, which is a security risk (especially
    when analyzing suspicious or malicious files). To avoid this risk, the offset
    can be independently calculated using the `readelf` command.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 AppImage 可执行文件都包括用于文件提取、squashfs 挂载等的标志。从取证角度来看，最有趣的标志是 `--appimage-offset`，它提供了嵌入的
    squashfs 文件系统的字节偏移量。这个偏移量使我们能够使用 `unsquashfs` 命令访问文件系统，提取详细的信息和文件（包括保留的时间戳）。这个标志的问题是我们必须执行二进制文件，这存在安全风险（特别是在分析可疑或恶意文件时）。为了避免这种风险，可以通过
    `readelf` 命令独立计算偏移量。
- en: 'The `readelf` tool provides information about the executable header with the
    `-h` flag:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`readelf` 工具提供有关可执行文件头的信息，通过 `-h` 标志：'
- en: '[PRE36]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The squashfs filesystem starts after the section headers. This offset is easily
    calculated from the section header lines:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: squashfs 文件系统从节头之后开始。这个偏移量可以很容易地从节头行计算出来：
- en: '[PRE37]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The byte offset is calculated from the `Start` + (`Size` * `Number`) of the
    section headers, or in our example:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 字节偏移量是通过 `Start` + （`Size` * `Number`）的方式计算得出的，或者在我们的示例中：
- en: '[PRE38]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This byte offset number (112888) can be used with `unsquashfs` to extract information
    and files.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这个字节偏移量（112888）可以与 `unsquashfs` 一起使用，提取信息和文件。
- en: 'In the following `unsquashfs` example, the `-o` specifies the offset within
    the AppImage file, and the `-s` displays information about the filesystem (including
    a timestamp):'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下 `unsquashfs` 示例中，`-o` 指定了 AppImage 文件中的偏移量，`-s` 显示有关文件系统的信息（包括时间戳）：
- en: '[PRE39]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We can use the offset and `-ll` flag (two lowercase Ls) for a more detailed
    file listing:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用偏移量和 `-ll` 标志（两个小写字母 L）来获取更详细的文件列表：
- en: '[PRE40]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The entire filesystem tree can be extracted, or we can extract individual files.
    In this example, a single file is extracted (unsquashfs will create the *squashfs-root*
    directory if it doesn’t exist):'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 可以提取整个文件系统树，或者我们可以提取单个文件。在这个示例中，提取了一个文件（如果 *squashfs-root* 目录不存在，unsquashfs
    会创建它）：
- en: '[PRE41]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The byte offset can also be used to mount the embedded filesystem on your forensic
    analysis machine, where it can be browsed with other programs:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 字节偏移量还可以用来在取证分析机器上挂载嵌入的文件系统，在那里可以使用其他程序浏览它：
- en: '[PRE42]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Because this is squashfs, it’s read-only, so there is no danger of accidentally
    modifying the mounted directory contents.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这是 squashfs，所以它是只读的，因此不会有意外修改挂载目录内容的危险。
- en: AppImage files can be found anywhere a user has write permission. Because they
    are normal ELF executables, they have the same magic string and other properties
    as other executables. The **.AppImage* filename extension might be the only indicator
    of the file type. The filesystem timestamps (`Birth` and `Modify`) of the AppImage
    file may indicate when the file was downloaded, and the timestamps inside squashfs
    indicate when the AppImage file was built.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: AppImage 文件可以在用户具有写入权限的任何地方找到。由于它们是普通的 ELF 可执行文件，因此具有与其他可执行文件相同的魔术字符串和其他属性。**.AppImage**
    文件扩展名可能是唯一的文件类型指示符。AppImage 文件的文件系统时间戳（`Birth` 和 `Modify`）可能指示文件何时被下载，而 squashfs
    内部的时间戳则指示 AppImage 文件何时被构建。
- en: '***Flatpak***'
  id: totrans-312
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Flatpak***'
- en: Flatpak (renamed from `xdg-app`) is designed for Linux distro-independent packaging
    and distribution of desktop apps. Flatpak uses repositories to transfer and update
    files using the *OSTree* system. OSTree is similar to Git, but it tracks binary
    files rather than source code. The apps are run in containers with explicit permissions
    to access local system resources.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: Flatpak（从 `xdg-app` 更名而来）旨在为 Linux 发行版独立的桌面应用程序打包和分发。Flatpak 使用仓库通过 *OSTree*
    系统传输和更新文件。OSTree 类似于 Git，但它跟踪的是二进制文件而不是源代码。这些应用程序在容器中运行，并显式授予访问本地系统资源的权限。
- en: Flatpak has several configuration files to examine. System-wide configuration
    in */etc/flatpak/* may contain config files (**.conf* ) that override defaults
    and also configure the repositories used in a system.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: Flatpak 有几个配置文件可以检查。系统范围的配置文件位于 */etc/flatpak/*，其中可能包含覆盖默认设置的配置文件（**.conf**），并配置系统中使用的仓库。
- en: '[PRE43]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The configuration file describes the repository, or repo, specifies the URL
    location, and stores the GPG public key used to verify signatures.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件描述了仓库或 repo，指定了 URL 位置，并存储了用于验证签名的 GPG 公钥。
- en: 'The system-wide directory is */var/lib/flatpak/*, which contains runtime data
    and further configuration. Configuration describing the basic behavior of repos
    can be found in the */var/lib/flatpak/repo/config* file:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 系统范围的目录是 */var/lib/flatpak/*，该目录包含运行时数据和进一步的配置。描述仓库基本行为的配置可以在 */var/lib/flatpak/repo/config*
    文件中找到：
- en: '[PRE44]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Individual users can also install Flatpak repos, data, and configuration, which
    are fully contained in their local home directory (*~/.local/share/flatpak/*).
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 单个用户也可以安装 Flatpak 仓库、数据和配置，这些内容完全包含在其本地主目录中 (*~/.local/share/flatpak/*)。
- en: 'Applications are installed into their own subdirectories and found in */var/lib/flatpak/app/**.
    Multiple versions may exist, and symlinks indicate the current or active version.
    The *current/active/metadata* file in the Flatpak application’s directory provides
    configuration data for running and setting up the sandbox environment; for example:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序安装到它们自己的子目录中，并位于 */var/lib/flatpak/app/**。可能存在多个版本，符号链接表示当前或活动版本。Flatpak
    应用程序目录中的 *current/active/metadata* 文件提供了用于运行和设置沙箱环境的配置信息，例如：
- en: '[PRE45]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Here, the different permissions, policies, paths, and more can be defined. See
    the flatpak-metadata(5) man page for a description of this file format.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，可以定义不同的权限、策略、路径等。有关此文件格式的描述，请参阅 flatpak-metadata(5) 手册页。
- en: Flatpak explicitly records installations, updates, and uninstalls in the systemd
    journal, which can be viewed with the `flatpak history` command. See the flatpak-history(1)
    man page for more information about Flatpak logging.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: Flatpak 明确记录了安装、更新和卸载操作到 systemd 日志中，可以通过 `flatpak history` 命令查看。有关 Flatpak
    日志记录的更多信息，请参阅 flatpak-history(1) 手册页。
- en: 'The installing and uninstalling of Flatpaks is logged to the systemd journal,
    as shown here:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: Flatpak 的安装和卸载操作记录在 systemd 日志中，如下所示：
- en: '[PRE46]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Here, two log entries in the systemd journal show that the Flatpak for Sugar
    Labs’s Music Keyboard was installed and then uninstalled a few minutes later.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，systemd 日志中有两条记录，显示 Sugar Labs 的 Music Keyboard Flatpak 被安装，然后在几分钟后被卸载。
- en: 'The starting and stopping of Flatpak apps may also be logged in the journal:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 启动和停止 Flatpak 应用程序的操作也可能会记录在日志中：
- en: '[PRE47]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Here, two log entries show the application was started and run for a few minutes
    before being closed. This information is also stored in the systemd user journal
    and can be used in a forensic examination to reconstruct past application usage.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，日志中有两条记录显示应用程序已启动并运行了几分钟，然后被关闭。这些信息也存储在 systemd 用户日志中，可以用于法医检查以重建过去的应用程序使用情况。
- en: 'It’s also possible to have Flatpak package bundles. They are called single-file
    bundles, and they have a **.flatpak* file extension. Flatpak files start with
    a magic string of `flatpak` and contain the files needed to install:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用 Flatpak 包捆绑包。它们被称为单文件捆绑包，文件扩展名为 **.flatpak**。Flatpak 文件以 `flatpak` 的魔术字符串开头，并包含安装所需的文件：
- en: '[PRE48]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This file format is taken from Docker’s Open Container Initiative (OCI). Using
    single-file bundles is less common than the developer-recommended use of repositories.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件格式源自 Docker 的开放容器倡议（OCI）。使用单文件捆绑包不如开发者推荐的使用软件仓库那样常见。
- en: '***Snap***'
  id: totrans-333
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Snap***'
- en: Software developers at Canonical created a self-contained package format called
    Snap together with a central app store (*[https://snapcraft.io/](https://snapcraft.io/)*).
    Snap packages are designed to be distribution-independent, but Ubuntu is the only
    mainstream distro that uses them by default. In a forensic investigation of a
    system using snaps, we can determine which snaps are installed, when they were
    installed or updated, and information about the snap contents (files, configs,
    and so on).
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: Canonical 的软件开发人员创建了一种自包含的包格式，称为 Snap，并配有一个中央应用商店 (*[https://snapcraft.io/](https://snapcraft.io/)*)。Snap
    包旨在跨发行版独立使用，但 Ubuntu 是唯一默认使用它们的主流发行版。在对使用 snaps 的系统进行法医调查时，我们可以确定安装了哪些 snaps，何时安装或更新，以及有关
    snap 内容（文件、配置等）的信息。
- en: 'Snap packages have a **.snap* extension, but they are regular squashfs compressed
    filesystems. They can be easily mounted and browsed for additional information:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: Snap 包的扩展名为 **.snap**，但它们是常规的 squashfs 压缩文件系统。可以轻松地挂载并浏览以获取更多信息：
- en: '[PRE49]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Once installed, these squashfs files are mounted under the */snap/* directory
    on a running system (not visible during a postmortem forensic examination). Information
    about the package is found in *meta/snap.yaml* file.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，这些 squashfs 文件会挂载在运行系统的 */snap/* 目录下（在事后法医调查中不可见）。有关包的信息可以在 *meta/snap.yaml*
    文件中找到。
- en: 'Installed snaps can be found in the */var/lib/snapd/snaps/* directory, with
    a single file per application (and version), as shown in this example:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 已安装的 snaps 可以在 */var/lib/snapd/snaps/* 目录中找到，每个应用程序（及版本）对应一个文件，如以下示例所示：
- en: '[PRE50]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The example output here shows multiple versions of the Brave and Chromium browsers.
    The mounting is done using systemd mount unit files, which can be found in the
    */etc/systemd/system/* directory with a *snap-*.mount* filename.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的示例输出显示了 Brave 和 Chromium 浏览器的多个版本。挂载是通过 systemd 挂载单元文件完成的，这些文件可以在 */etc/systemd/system/*
    目录中找到，文件名为 *snap-*.mount*。
- en: 'Snaps rely on the snapd daemon to manage basic housekeeping. Various snapd
    actions are logged in the journal (or syslog):'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: Snaps 依赖于 snapd 守护进程来管理基本的家务工作。各种 snapd 操作会记录在日志中（或 syslog 中）：
- en: '[PRE51]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This journal output shows the snapd logs for the Subsurface snap package.^([15](footnotes.xhtml#ch07foot_015))
    The output indicates the installation date, refresh (update) checks, and mounting/unmounting
    activity (which also corresponds to system reboots).
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 该日志输出显示了 Subsurface snap 包的 snapd 日志。^([15](footnotes.xhtml#ch07foot_015)) 输出内容表明了安装日期、刷新（更新）检查以及挂载/卸载活动（这也对应系统重启）。
- en: See the snap(8) man page and *[https://snapcraft.io/](https://snapcraft.io/)*
    for more information about snap packages.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 snap 包的更多信息，请参见 snap(8) 手册页和 *[https://snapcraft.io/](https://snapcraft.io/)*。
- en: '***Software Centers and GUI Frontends***'
  id: totrans-345
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***软件中心和图形界面前端***'
- en: Historically, package management has been highly distro specific. A collaborative
    effort between the major distributions began working toward a common solution
    to this problem. PackageKit was developed to unify package management across different
    distros. It provides an interface between generic frontend software management
    applications and backend (distro-specific) package management systems (apt, dnf,
    and so on). Universal package systems like Flatpak or Snap can also be managed
    through the same PackageKit applications. A specification for generic package
    metadata called AppStream was created for use across distributions and package
    management systems.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，包管理系统具有高度的发行版特异性。主要发行版之间开展了合作，旨在朝着解决这一问题的共同方案努力。PackageKit 的开发目的是统一不同发行版之间的包管理。它为通用前端软件管理应用程序和后端（发行版特定）包管理系统（如
    apt、dnf 等）提供接口。像 Flatpak 或 Snap 这样的通用包系统也可以通过相同的 PackageKit 应用程序进行管理。一个名为 AppStream
    的通用包元数据规范被创建，用于跨发行版和包管理系统的使用。
- en: Installed applications can store an AppStream metadata XML file in the */usr/share/metainfo/*
    directory. This file contains information such as descriptions (including translations),
    license and version information, the project team’s homepage and contact person,
    the URL of screenshots displayed, and more. The screenshots are fetched from the
    URL specified by the project team when the user views the application in the software
    center. This web location and associated network traffic may be of interest in
    a forensic investigation. See *[https://www.freedesktop.org/software/appstream/docs/chap-Quickstart.html](https://www.freedesktop.org/software/appstream/docs/chap-Quickstart.html)*
    for more information about what is stored in the AppStream metadata.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 已安装的应用程序可以将AppStream元数据XML文件存储在*/usr/share/metainfo/*目录中。该文件包含诸如描述（包括翻译）、许可证和版本信息、项目团队的主页和联系人、显示的截图URL等信息。当用户在软件中心查看应用程序时，截图会从项目团队指定的URL获取。这个网络位置和相关的网络流量可能在取证调查中很有价值。有关AppStream元数据存储的更多信息，请参见*[https://www.freedesktop.org/software/appstream/docs/chap-Quickstart.html](https://www.freedesktop.org/software/appstream/docs/chap-Quickstart.html)*。
- en: The configuration files for PackageKit are found in the */etc/PackageKit/* directory.
    An SQLite database of packages installed by PackageKit is stored in the file */var/lib/PackageKit/transactions.db*.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: PackageKit的配置文件位于*/etc/PackageKit/*目录中。PackageKit安装的软件包的SQLite数据库存储在文件*/var/lib/PackageKit/transactions.db*中。
- en: 'This effort to harmonize package management resulted in the development of
    universal package managers called software centers that are easy-to-use graphical
    applications that run on any Linux distribution. The concept of software centers
    is analogous to the app store programs that are popular on mobile devices and
    other operating systems. The following list includes some examples of Linux software
    centers with their command line and graphical app names:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现软件包管理的统一，这一努力促成了通用包管理器的发展，这些包管理器称为软件中心，是易于使用的图形应用程序，可以在任何Linux发行版上运行。软件中心的概念类似于在移动设备和其他操作系统上流行的应用商店程序。以下列表包括一些Linux软件中心的示例，以及它们的命令行和图形应用名称：
- en: '| gnome-software | (Software) for GNOME systems |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
  zh: '| gnome-software | GNOME系统的(软件) |'
- en: '| plasma-discover | (Discover) for KDE Plasma systems |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
  zh: '| plasma-discover | KDE Plasma系统的(Discover) |'
- en: '| pamac-manager | (Pamac) for Arch Linux systems |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| pamac-manager | Arch Linux系统的(Pamac) |'
- en: '| mintinstall | (Software Manager) for Linux Mint systems |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| mintinstall | Linux Mint系统的(软件管理器) |'
- en: '| pi-packages | (PiPackages) for Raspberry Pi systems |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
  zh: '| pi-packages | Raspberry Pi系统的(PiPackages) |'
- en: These tools all have a similar look and feel (see [Figure 7-2](ch07.xhtml#ch07fig02)
    for an example).
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具都有相似的外观和感觉（请参见[图7-2](ch07.xhtml#ch07fig02)的示例）。
- en: '![Image](Images/ch07fig02.jpg)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/ch07fig02.jpg)'
- en: '*Figure 7-2: GNOME Software*'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-2：GNOME软件*'
- en: In addition to generic frontends using PackageKit and AppStream, many distributions
    have graphical frontend tools that interface directly with their local package
    management system. Examples include Debian’s Synaptic or SUSE’s YaST.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用PackageKit和AppStream的通用前端外，许多发行版还具有直接与本地软件包管理系统接口的图形前端工具。例如，Debian的Synaptic或SUSE的YaST。
- en: In the background, these graphical tools are typically running low-level tools
    (like apt or dnf) or calling libraries (like libalpm or libdnf). For a forensic
    examination, the package management activity should be seen in the logs and local
    package databases as discussed earlier in this chapter. Individual tools may have
    their own logs (for example, they may have a daemon logging to a file or to syslog).
    Persistent or cache data may also reside in the user’s *~/.cache/* or *~/.local/*
    directories. Configuration information will usually be in */etc/* (for system-wide
    defaults) and in *~/.config/* (for user-customized settings).
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 在后台，这些图形化工具通常运行低级工具（如apt或dnf）或调用库（如libalpm或libdnf）。对于取证检查，软件包管理活动应在日志和本地软件包数据库中显示，正如本章前面所讨论的那样。各个工具可能有自己的日志（例如，它们可能有一个守护进程记录到文件或syslog）。持久数据或缓存数据也可能存在于用户的*~/.cache/*或*~/.local/*目录中。配置文件通常位于*/etc/*（用于系统默认设置）和*~/.config/*（用于用户自定义设置）。
- en: '**Other Software Installation Analysis**'
  id: totrans-360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**其他软件安装分析**'
- en: Several other methods exist for adding software either manually or as plug-ins
    to existing software packages. These examples completely bypass the software package
    management done by the Linux distribution. However, they may still leave traces
    of information useful in a forensic context.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 还有多种其他方法可以手动添加软件，或者将其作为插件添加到现有的软件包中。这些方法完全绕过了 Linux 发行版的包管理。然而，它们可能仍然会留下在取证上下文中有用的痕迹信息。
- en: '***Manually Compiled and Installed Software***'
  id: totrans-362
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***手动编译和安装的软件***'
- en: 'GNU software packages can be compiled and installed manually, bypassing any
    package management systems (leaving no traces in the package management logs or
    databases). The GNU Coding Standards documentation can be found at *[https://www.gnu.org/prep/standards/](https://www.gnu.org/prep/standards/)*.
    The typical process involves finding the source software package online (usually
    a compressed tar file), downloading it to a working directory, unpacking, and
    running `configure` and `make` scripts. Here’s an example:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: GNU 软件包可以手动编译和安装，从而绕过任何包管理系统（不会在包管理日志或数据库中留下痕迹）。GNU 编码标准文档可以在 *[https://www.gnu.org/prep/standards/](https://www.gnu.org/prep/standards/)*
    上找到。典型的过程包括在线找到源软件包（通常是压缩的 tar 文件），下载到工作目录，解压并运行 `configure` 和 `make` 脚本。以下是一个示例：
- en: '[PRE52]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The install directory can be specified and non-privileged users may install
    software in their home directory (like *~/.local/bin/*, for example). Typically,
    the download site will include a separate file containing a cryptographic hash
    of the compressed archive file so it can be verified.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 可以指定安装目录，非特权用户可以在自己的主目录中安装软件（例如 *~/.local/bin/*）。通常，下载网站会提供一个单独的文件，其中包含压缩档案文件的加密哈希值，以便进行验证。
- en: Manual downloads may also involve synchronizing (or cloning) with a software
    development repository like Git. A manual installation may also involve simply
    copying stand-alone scripts and binaries to a location in the executable path.
    With manual installs, there is no package management or tracking with install
    timestamps. The filesystem timestamps are the best indicator of when a file was
    installed (in particular, matching timestamps of files in the compile directory
    with timestamps of the installed files). The manual removal of software may involve
    a `make uninstall` command or script. If source code directories are found, it
    is worth examining the Makefiles to understand what was modified on the filesystem
    during the install (and uninstall) process. The shell history can also be examined
    for evidence of manual downloading, compiling, and installing of software packages.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 手动下载还可能涉及与软件开发仓库（如 Git）同步（或克隆）。手动安装也可能仅仅是将独立的脚本和二进制文件复制到可执行路径中的某个位置。对于手动安装，系统没有包管理，也没有安装时间戳的跟踪。文件系统的时间戳是判断文件安装时间的最佳指标（特别是，通过对比编译目录中的文件时间戳与安装文件的时间戳）。手动卸载软件可能涉及
    `make uninstall` 命令或脚本。如果找到源代码目录，值得检查 Makefile，以了解在安装（和卸载）过程中对文件系统进行了哪些修改。还可以检查
    shell 历史记录，以查找手动下载、编译和安装软件包的证据。
- en: '***Programming Language Packages***'
  id: totrans-367
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***编程语言包***'
- en: Some programming languages, especially interpreted languages, have their own
    package manager for adding additional code modules and libraries that provide
    extended functionality. These packages may use the distribution’s package management
    system or bypass it completely. This section describes a few examples of software
    packages that were installed directly using the programming language’s package
    management system.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 一些编程语言，尤其是解释型语言，有自己的包管理器，用于添加提供扩展功能的额外代码模块和库。这些包可能使用发行版的包管理系统，或者完全绕过它。本节介绍了一些使用编程语言的包管理系统直接安装的软件包示例。
- en: The Python programming language has several package managers, the most popular
    being `pip`, the Python Package Installer. The `pip` tool is used to fetch, install,
    and manage Python packages. If a non-privileged user installs a package, it will
    be written to their home directory in *~/.local/lib/python*/ site-packages/*.
    If it is a site installation (intended for all users) it is installed in */usr/lib/python*/site-packages/*.
    Files or directories with the extension *.egg-info* contain the package metadata.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: Python 编程语言有多个包管理器，其中最流行的是 `pip`，即 Python 包安装工具。`pip` 工具用于获取、安装和管理 Python 包。如果非特权用户安装了一个包，它将被写入到他们的主目录中的
    *~/.local/lib/python*/ site-packages/*。如果是站点安装（即面向所有用户），它将被安装到 */usr/lib/python*/site-packages/*。以
    *.egg-info* 结尾的文件或目录包含包的元数据。
- en: The Perl programming language has CPAN, the Comprehensive Perl Archive Network.
    The `cpan` command is used to fetch, install, and manage Perl modules. The user’s
    installed modules are found in *~/.cpan*.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: Perl 编程语言有 CPAN（Comprehensive Perl Archive Network）。`cpan` 命令用于获取、安装和管理 Perl
    模块。用户安装的模块存储在 *~/.cpan* 中。
- en: Another example is Ruby Gems (*[https://rubygems.org/](https://rubygems.org/)*),
    which downloads Ruby code from a central repository and stores it in a user’s
    home directory or to a site-wide location.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是 Ruby Gems (*[https://rubygems.org/](https://rubygems.org/)*)，它从中央仓库下载
    Ruby 代码并将其存储在用户的主目录或全站位置。
- en: During a forensic examination, every user’s home directory should be analyzed
    to determine whether they were programmers and under which programming languages
    they developed. The programming languages may have a module or library package
    management system that was used.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 在法医检查过程中，应该分析每个用户的主目录，以确定他们是否为程序员以及他们使用哪种编程语言进行开发。编程语言可能拥有模块或库包管理系统。
- en: '***Application Plug-ins***'
  id: totrans-373
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***应用程序插件***'
- en: Application plug-ins are mentioned only briefly here, as the analysis is outside
    the scope of this book. Many large applications are extensible with themes, plug-ins,
    add-ons, or extensions, which are installed from within the app. This is typical
    of web browsers, file managers, office suites, window environments, and other
    programs. Plug-ins are not only used by big graphical programs, but also smaller
    utilities (for example, vim or neovim).
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序插件在这里仅简要提及，因为分析不在本书的范围之内。许多大型应用程序通过主题、插件、附加组件或扩展功能进行扩展，这些扩展是从应用程序内部安装的。浏览器、文件管理器、办公套件、窗口环境和其他程序通常采用这种方式。插件不仅被大型图形程序使用，也被小型实用工具（例如
    vim 或 neovim）使用。
- en: In some cases, these plug-ins are available from the distro’s package repository
    and are installed in standard locations that are available to other users. In
    other cases, a user may install plug-ins for their own use. In the latter case,
    the plug-ins are usually stored in the user’s home directory (in a hidden dot
    “.” directory together with other files associated with the application). If the
    application has a log or history of activity, a timestamp of installation might
    be found; otherwise, the filesystem timestamps are the best indicator of when
    the installation happened.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，这些插件可以通过发行版的包存储库获得，并安装在标准位置，其他用户也可以使用。在其他情况下，用户可能会为自己的使用安装插件。在后者情况下，插件通常存储在用户的主目录中（以隐藏点“.”目录的形式，与应用程序的其他文件一起）。如果应用程序有日志或活动历史记录，可以找到安装的时间戳；否则，文件系统的时间戳是最好的安装时间指示。
- en: '**Summary**'
  id: totrans-376
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter, I’ve described how to examine the installed software on a Linux
    system. You now should be able to identify the installed distro and version numbers,
    and reconstruct the initial installation process. You also should be able to determine
    which additional software packages are installed and how to analyze the details
    of those packages.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我已经描述了如何检查 Linux 系统上安装的软件。你现在应该能够识别安装的发行版和版本号，并重建最初的安装过程。你还应该能够确定哪些附加软件包已安装，并如何分析这些软件包的详细信息。
