- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: MySQL Data Types
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL数据类型
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: In this chapter, you’ll look at all of the available MySQL data types. You’ve
    already seen that `int` and `varchar` can be used for integer and character data,
    but MySQL also has data types to store dates, times, and even binary data. You’ll
    explore how to choose the best data types for your columns and the pros and cons
    of each type.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解所有可用的MySQL数据类型。你已经看到`int`和`varchar`可以用于整数和字符数据，但MySQL也有用于存储日期、时间甚至二进制数据的数据类型。你将探索如何选择最适合列的数据类型以及每种类型的优缺点。
- en: When you create a table, you define each column’s data type based on the kind
    of data you’ll store in that column. For example, you wouldn’t use a data type
    that allows only numbers for a column that stores names. You might additionally
    consider the range of values that the column will have to accommodate. If a column
    needs to store a value like 3.1415, you should use a data type that allows decimal
    values with four positions after the decimal point. Lastly, if more than one data
    type can handle the values your column will need to store, you should choose the
    one that uses the least amount of storage.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 创建表时，你根据列中将存储的数据类型来定义每一列的数据类型。例如，对于存储名称的列，你不会使用仅允许数字的数据类型。你还可能考虑列需要容纳的值的范围。如果某列需要存储像3.1415这样的值，你应选择允许小数点后四位的数值数据类型。最后，如果多种数据类型都可以处理该列需要存储的值，你应选择占用最少存储空间的数据类型。
- en: Say you want to create a table, `solar_eclipse`, that includes data about solar
    eclipses, including the date of the eclipse, the time it occurs, the type of eclipse,
    and its magnitude. Your raw data might look like [Table 4-1](#table4-1).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想创建一个名为`solar_eclipse`的表，包含关于日全食的数据，包括日全食的日期、发生时间、类型及其亮度。你的原始数据可能如下所示：[表4-1](#table4-1)。
- en: '[Table 4-1](#tableanchor4-1): Data on Solar Eclipses'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[表4-1](#tableanchor4-1)：太阳日全食数据'
- en: '| **Eclipse date** | **Time of greatest eclipse** | **Eclipse type** | **Magnitude**
    |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| **日全食日期** | **日全食最大时间** | **日全食类型** | **日全食亮度** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 2022-04-30 | 20:42:36 | Partial | 0.640 |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 2022-04-30 | 20:42:36 | 部分 | 0.640 |'
- en: '| 2022-10-25 | 11:01:20 | Partial | 0.862 |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 2022-10-25 | 11:01:20 | 部分 | 0.862 |'
- en: '| 2023-04-20 | 04:17:56 | Hybrid | 1.013 |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 2023-04-20 | 04:17:56 | 混合型 | 1.013 |'
- en: 'In order to store this data in a MySQL database, you’ll create a table with
    four columns:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将这些数据存储到MySQL数据库中，你将创建一个包含四列的表：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this table, each of the four columns has been defined with a different data
    type. Since the `eclipse_date` column will store dates, you use the `date` data
    type. The `time` data type, which is designed to store time data, is applied to
    the `time_of_greatest_eclipse` column.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在此表中，四列的每一列都定义了不同的数据类型。由于`eclipse_date`列将存储日期，因此使用`date`数据类型。`time`数据类型专门用于存储时间数据，应用于`time_of_greatest_eclipse`列。
- en: For the `eclipse_type` column, you use the `varchar` data type because you need
    to store variable-length character data. You don’t expect these values to be long,
    so you use `varchar(10)` to set the maximum number of characters to 10.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`eclipse_type`列，使用`varchar`数据类型，因为你需要存储变长的字符数据。你预计这些值不会很长，因此使用`varchar(10)`将最大字符数设置为10。
- en: For the `magnitude` column, you use the `decimal` data type and specify that
    the values will have four digits total and three digits after the decimal point.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`magnitude`列，使用`decimal`数据类型，并指定值的总位数为四位，小数点后有三位。
- en: Let’s look at these and several other data types in more depth, and explore
    when it’s appropriate to use each one.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地了解这些以及其他一些数据类型，并探讨在何种情况下使用每种数据类型是合适的。
- en: String Data Types
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串数据类型
- en: A *string* is a set of characters, including letters, numbers, whitespace characters
    like spaces and tabs, and symbols like punctuation marks. For values that include
    only numbers, you should use a numeric data type rather than a string data type.
    You would use a string data type for a value like `I love MySQL 8.0!` but a numeric
    data type for a value like `8.0`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*字符串*是一组字符，包括字母、数字、空白字符（如空格和制表符）以及符号（如标点符号）。对于仅包含数字的值，你应该使用数值数据类型而非字符串数据类型。你会使用字符串数据类型来存储类似`I
    love MySQL 8.0!`的值，而对于类似`8.0`的值则使用数值数据类型。'
- en: This section will examine MySQL’s string data types.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将探讨MySQL的字符串数据类型。
- en: char
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: char
- en: 'The `char` data type is used for *fixed-length* strings—that is, strings that
    hold an exact number of characters. To define a column within a `country_code`
    table to store three-letter country codes like `USA`, `GBR`, and `JPN`, use `char(3)`,
    like so:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`char` 数据类型用于 *固定长度* 字符串——即存储确切数量字符的字符串。为了在 `country_code` 表中定义一个列来存储三字符国家代码，比如
    `USA`、`GBR` 和 `JPN`，使用 `char(3)`，如下所示：'
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When defining columns with the `char` data type, you specify the length of the
    string inside the parentheses. The `char` data type defaults to one character
    if you leave out the parentheses, though in cases where you want only one character,
    it’s clearer to specify `char(1)` than just `char`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义 `char` 数据类型的列时，你在括号内指定字符串的长度。如果省略括号，`char` 数据类型默认为一个字符，尽管在你只需要一个字符的情况下，明确指定
    `char(1)` 比仅仅写 `char` 更清晰。
- en: The length of the string cannot exceed the length defined within the parentheses.
    If you tried to insert `JAPAN` into the `country_code` column, MySQL would reject
    the value because the column has been defined to store a maximum of three characters.
    However, MySQL will allow you to insert a string with fewer than three characters,
    such as `JP`; it simply adds a space to the end of `JP` and saves the value in
    the column.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串的长度不能超过括号内定义的长度。如果你尝试将 `JAPAN` 插入 `country_code` 列，MySQL 会拒绝该值，因为该列已定义为最多存储三个字符。然而，MySQL
    会允许你插入少于三个字符的字符串，比如 `JP`；它只会在 `JP` 的末尾添加一个空格并将值保存在该列中。
- en: You can define a `char` data type with up to 255 characters. If you try to define
    a column with a data type of `char(256)` you’ll get an error message because it’s
    out of `char`’s range.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以定义一个最多包含 255 个字符的 `char` 数据类型。如果你尝试定义一个 `char(256)` 类型的列，你会收到错误信息，因为它超出了
    `char` 的范围。
- en: varchar
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: varchar
- en: 'The `varchar` data type, which you’ve seen before, is for *variable-length*
    strings, or strings that can hold *up to* a specified number of characters. It’s
    useful when you need to store strings but aren’t sure exactly how long they will
    be. For example, to create an `interesting_people` table and then define a column
    called `interesting_name` that stores various names, you need to be able to accommodate
    short names like `Jet Li` as well as long names like `Hubert Blaine Wolfeschlegelsteinhausenbergerdorff`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`varchar` 数据类型，你之前见过，是用于 *可变长度* 字符串，或者可以存储 *最多* 指定数量字符的字符串。当你需要存储字符串，但不确定它们的具体长度时，它非常有用。例如，创建一个
    `interesting_people` 表，然后定义一个名为 `interesting_name` 的列来存储各种名字，你需要能够容纳像 `Jet Li`
    这样的短名字，也要能存储像 `Hubert Blaine Wolfeschlegelsteinhausenbergerdorff` 这样的长名字：'
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the parentheses, you define a character limit of 100 for the `interesting_name`
    column because you don’t anticipate that anybody’s name in the database will be
    over 100 characters.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在括号中，你为 `interesting_name` 列定义了一个字符限制 100，因为你预计数据库中的任何名字都不会超过 100 个字符。
- en: 'The number of characters that `varchar` can accept depends on your MySQL configuration.
    Your database administrator (DBA) can help you, or you can use this quick hack
    to determine your maximum. Write a `create table` statement with a column that
    has an absurdly long `varchar` maximum value:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`varchar` 能接受的字符数取决于你的 MySQL 配置。你的数据库管理员（DBA）可以帮助你，或者你可以使用这个快速技巧来确定你的最大值。编写一个包含极长
    `varchar` 最大值的 `create table` 语句：'
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `create table` statement will fail, giving you an error message like
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`create table` 语句会失败，给出类似这样的错误信息：'
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The table was not created because the `varchar` definition was too large, but
    the error message told you that the maximum number of characters that `varchar`
    can accept in this environment is 16,383, or `varchar(16383)`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 表没有创建，因为 `varchar` 定义过大，但错误信息告诉你在这个环境中，`varchar` 可以接受的最大字符数是 16,383，或者 `varchar(16383)`。
- en: The `varchar` data type is mostly used for small strings. When you’re storing
    more than 5,000 characters, I recommend using the `text` data type instead (we’ll
    get to it momentarily).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`varchar` 数据类型主要用于存储小字符串。当你存储超过 5,000 个字符时，我建议使用 `text` 数据类型（稍后我们会介绍它）。'
- en: enum
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: enum
- en: 'The `enum` data type, short for *enumeration*, lets you create a list of values
    that you want to allow in a string column. Here’s how to create a table called
    `student` with a `student_class` column that can accept only one of the following
    values—`Freshman`, `Sophomore`, `Junior`, or `Senior`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`enum` 数据类型，缩写为 *枚举*，允许你创建一个你想在字符串列中允许的值的列表。下面是如何创建一个名为 `student` 的表，并定义一个
    `student_class` 列，该列只接受以下值之一——`Freshman`（大一）、`Sophomore`（大二）、`Junior`（大三）或 `Senior`（大四）：'
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you try to add a value to the column other than the ones in the list of permitted
    values, it will be rejected. You can add only one of the permitted values to the
    `student_class` column; a student can’t be both a freshman and a sophomore.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试向列中添加不在允许值列表中的值，它将被拒绝。你只能向 `student_class` 列添加允许的一个值；学生不能同时是新生和二年级生。
- en: set
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: set
- en: 'The `set` data type is similar to the `enum` data type, but `set` allows you
    to select multiple values. In the following `create table` statement, you define
    a list of languages for a `language_spoken` column in a table called `interpreter`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`set` 数据类型与 `enum` 数据类型相似，但 `set` 允许你选择多个值。在以下的 `create table` 语句中，你为名为 `interpreter`
    的表中的 `language_spoken` 列定义了一个语言列表：'
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `set` data type allows you to add any or all of the languages in the set
    to the `language_spoken` column, as someone might speak one or more of these languages.
    If you try to add any value to the column other than the ones in the list, however,
    they will be rejected.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`set` 数据类型允许你将集合中的任何语言或所有语言添加到 `language_spoken` 列中，因为某人可能会说一种或多种这些语言。然而，如果你尝试向该列添加任何列表中没有的值，这些值将被拒绝。'
- en: tinytext, text, mediumtext, and longtext
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tinytext, text, mediumtext 和 longtext
- en: 'MySQL includes four text data types that store variable-length strings:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 包括四种文本数据类型，用于存储可变长度的字符串：
- en: '| `tinytext` | Stores up to 255 characters |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `tinytext` | 存储最多 255 个字符 |'
- en: '| `` `text` `` | Stores up to 65,535 characters, which is approximately 64KB
    |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `` `text` `` | 存储最多 65,535 个字符，约 64KB |'
- en: '| `mediumtext` | Stores up to 16,777,215 characters, approximately 16MB |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `mediumtext` | 存储最多 16,777,215 个字符，约 16MB |'
- en: '| `longtext` | Stores up to 4,294,967,295 characters, approximately 4GB |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `longtext` | 存储最多 4,294,967,295 个字符，约 4GB |'
- en: 'The following `create table` statement creates a table named `book` that contains
    four columns. The last three columns, `author_bio`, `book_proposal`, and `entire_book`,
    all use text data types of different sizes:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 `create table` 语句创建了一个名为 `book` 的表，该表包含四个列。最后三个列 `author_bio`、`book_proposal`
    和 `entire_book` 都使用了不同大小的文本数据类型：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You use the `tinytext` data type for the `author_bio` column because you don’t
    anticipate any author biographies larger than 255 characters. This also forces
    users to make sure their bios have fewer than 255 characters. You choose the `text`
    data type for the `book_proposal` column because you aren’t expecting any book
    proposals of over 64KB. Finally, you choose the `mediumtext` data type for the
    `entire_book` column to limit the size of books to 16MB.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用 `tinytext` 数据类型为 `author_bio` 列，因为你预计不会有超过 255 个字符的作者简介。这也强制用户确保他们的简介少于
    255 个字符。你为 `book_proposal` 列选择了 `text` 数据类型，因为你不预期任何书籍提案会超过 64KB。最后，你选择了 `mediumtext`
    数据类型为 `entire_book` 列，这样可以将书籍的大小限制在 16MB 内。
- en: Binary Data Types
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 二进制数据类型
- en: MySQL provides data types to store *binary* data, or raw data in byte format
    that is not human-readable.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 提供了用于存储 *二进制* 数据或原始字节格式数据的类型，这些数据不可人类直接读取。
- en: tinyblob, blob, mediumblob, and longblob
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tinyblob, blob, mediumblob 和 longblob
- en: A *binary large object (BLOB)* is a variable-length string of bytes. You can
    use BLOBs to store binary data like images, PDF files, and videos. BLOB data types
    come in the same sizes as the text data types. While `tinytext` can store up to
    255 characters, `tinyblob` can store up to 255 bytes.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*二进制大对象（BLOB）* 是一个可变长度的字节字符串。你可以使用 BLOB 来存储二进制数据，如图像、PDF 文件和视频。BLOB 数据类型的大小与文本数据类型相同。虽然
    `tinytext` 最多可以存储 255 个字符，但 `tinyblob` 最多只能存储 255 字节。'
- en: '| `tinyblob` | Stores up to 255 bytes |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `tinyblob` | 存储最多 255 字节 |'
- en: '| `` `blob` `` | Stores up to 65,535 bytes, approximately 64KB |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `` `blob` `` | 存储最多 65,535 字节，约 64KB |'
- en: '| `mediumblob` | Stores up to 16,777,215 bytes, approximately 16MB |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `mediumblob` | 存储最多 16,777,215 字节，约 16MB |'
- en: '| `longblob` | Stores up to 4,294,967,295 bytes, approximately 4GB |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `longblob` | 存储最多 4,294,967,295 字节，约 4GB |'
- en: binary
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: binary
- en: 'The `binary` data type is for fixed-length binary data. It’s similar to the
    `char` data type, except that it’s used for strings of binary data rather than
    character strings. You specify the size of the byte string within the parentheses
    like so:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`binary` 数据类型用于定长的二进制数据。它类似于 `char` 数据类型，不同之处在于它用于存储二进制数据字符串，而不是字符字符串。你可以通过括号内指定字节字符串的大小，像这样：'
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: For the column called `encryption_key` in the `encryption` table, you set the
    maximum size of the byte string to 50 bytes.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `encryption` 表中的名为 `encryption_key` 的列，你将字节字符串的最大大小设置为 50 字节。
- en: varbinary
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: varbinary
- en: 'The `varbinary` data type is for variable-length binary data. You specify the
    maximum size of the byte string within the parentheses:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`varbinary`数据类型用于存储可变长度的二进制数据。你可以在括号内指定字节字符串的最大大小：'
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, you’re creating a column called `signature` (in a table of the same name)
    with a maximum size of 400 bytes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你创建了一个名为`signature`（同名表）的列，最大大小为400字节。
- en: bit
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: bit
- en: One of the lesser-used data types, `bit` is used for storing bit values. You
    can specify how many bits you want to store, up to a maximum of 64\. A definition
    of `bit(15)` allows you to store up to 15 bits.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个不常用的数据类型是`bit`，用于存储位值。你可以指定要存储多少位，最多可以存储64位。定义`bit(15)`可以存储最多15位。
- en: Numeric Data Types
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数值数据类型
- en: MySQL provides data types to store numbers of different sizes. The numeric type
    to use also depends upon whether the numbers you want to store contain decimal
    points.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL提供了不同大小的数字数据类型。使用哪种数字类型也取决于你要存储的数字是否包含小数点。
- en: tinyint, smallint, mediumint, int, and bigint
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tinyint、smallint、mediumint、int和bigint
- en: 'Integers are whole numbers without a fraction or decimal. Integer values can
    be positive, negative, or zero. MySQL includes the following integer data types:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 整数是没有小数或分数的整数值。整数值可以是正数、负数或零。MySQL包括以下整数数据类型：
- en: '| `tinyint` | Stores integer values that range from –128 to 127, or 1 byte
    of storage |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `tinyint` | 存储从-128到127的整数值，或占用1字节存储空间 |'
- en: '| `smallint` | Stores integer values ranging from –32,768 to 32,767, or 2 bytes
    of storage |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `smallint` | 存储从-32,768到32,767的整数值，或占用2字节存储空间 |'
- en: '| `mediumint` | Stores integer values ranging from –8,388,608 to 8,388,607,
    or 3 bytes of storage |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `mediumint` | 存储从-8,388,608到8,388,607的整数值，或占用3字节存储空间 |'
- en: '| `int` | Stores integer values from –2,147,483,648 to 2,147,483,647, or 4
    bytes of storage |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `int` | 存储从-2,147,483,648到2,147,483,647的整数值，或占用4字节存储空间 |'
- en: '| `bigint` | Stores integer values that range from –9,223,372,036,854,775,808
    to 9,223,372,036,854,775,807, or 8 bytes of storage |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `bigint` | 存储从-9,223,372,036,854,775,808到9,223,372,036,854,775,807的整数值，或占用8字节存储空间
    |'
- en: How do you know which integer type is right for your data? Take a look at the
    `planet_stat` table in [Listing 4-1](#listing4-1).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如何确定哪种整数类型适合你的数据？查看[Listing 4-1](#listing4-1)中的`planet_stat`表。
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Listing 4-1: Creating a table on planet statistics'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 4-1：创建行星统计信息表
- en: This table contains statistics about planets using `varchar(20)` to store the
    planet’s name, `bigint` to store its distance from Earth in miles, and `mediumint`
    for the planet’s diameter (in kilometers).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 该表包含有关行星的统计信息，其中使用`varchar(20)`存储行星的名称，使用`bigint`存储行星与地球的距离（以英里为单位），使用`mediumint`存储行星的直径（以千米为单位）。
- en: Looking at the results, you can see that Neptune is 2,703,959,966 miles from
    Earth. In this case, `bigint` is the appropriate choice for that column, as `int`
    wouldn’t have been large enough for that value.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 从结果来看，你可以看到海王星距离地球的距离是2,703,959,966英里。在这种情况下，`bigint`是该列的合适选择，因为`int`无法容纳这个数值。
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Considering that `int` takes 4 bytes of storage and `bigint` takes 8 bytes,
    using `bigint` for a column where `int` would have been large enough means taking
    up more disk space than necessary. In small tables, using `int` where a `smallint`
    or a `mediumint` would have sufficed won’t cause any problems. But if your table
    has 20 million rows, it pays to take the time to size the columns correctly—those
    extra bytes add up.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到`int`占用4字节存储空间，而`bigint`占用8字节，若使用`bigint`来存储本应使用`int`就能足够的列，会浪费更多的磁盘空间。在小表中，若使用`int`来代替`smallint`或`mediumint`，不会引起问题。但是如果你的表有2000万行，花时间正确设置列的大小就显得非常重要——那些多余的字节会累积起来。
- en: One technique you can use for space efficiency is defining integer data types
    as `unsigned`. By default, the integer data types allow you to store negative
    and positive integers. If you won’t need any negative numbers, you can use `unsigned`
    to prevent negative values and increase the number of positive numbers. For example,
    the `tinyint` data type gives you a default range of values between –128 and 127,
    but if you specify `unsigned`, your range becomes 0 to 255.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一个提高空间效率的技巧是将整数数据类型定义为`unsigned`。默认情况下，整数数据类型允许你存储负数和正数。如果你不需要负数，可以使用`unsigned`来防止负值，并增加正数的范围。例如，`tinyint`数据类型默认的取值范围是-128到127，但如果指定`unsigned`，取值范围会变成0到255。
- en: If you specify `smallint` as `unsigned`, your range becomes 0 to 65,535\. Specifying
    the `mediumint` data type gives you a range of 0 to 16,777,215, and specifying
    `int` changes the range to 0 through 4,294,967,295.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将 `smallint` 指定为 `unsigned`，你的范围将变为 0 到 65,535。指定 `mediumint` 数据类型会给你 0 到
    16,777,215 的范围，而指定 `int` 会将范围变为 0 到 4,294,967,295。
- en: 'In [Listing 4-1](#listing4-1), you defined the `miles_from_earth` column as
    a `bigint`, but if you take advantage of the larger `unsigned` upper range values,
    you can fit the values into an `int` data type instead. You can be confident using
    `unsigned` for this column, as it will never need to store a negative number—no
    planet will ever be less than zero miles away from Earth:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [清单 4-1](#listing4-1) 中，你将 `miles_from_earth` 列定义为 `bigint`，但如果你利用更大的 `unsigned`
    上限值，你可以将这些值存入 `int` 数据类型。你可以放心地使用 `unsigned`，因为这个列永远不需要存储负数——没有行星会离地球小于零英里：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: By defining the column as `unsigned`, you can use the more compact `int` type
    and save disk space.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将列定义为 `unsigned`，你可以使用更紧凑的 `int` 类型，并节省磁盘空间。
- en: Boolean
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 布尔值
- en: 'Boolean values have only two states: true or false; on or off; 1 or 0\. Technically,
    MySQL doesn’t have a data type to capture boolean values; they’re stored in MySQL
    as `tinyint(1)`. You can use the synonym `bool` to create columns to store boolean
    values. When you define a column as `bool`, it creates a `tinyint(1)` column behind
    the scenes.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值只有两种状态：true 或 false；开或关；1 或 0。技术上，MySQL 并没有一个专门的数据类型来存储布尔值；它们在 MySQL 中作为
    `tinyint(1)` 存储。你可以使用同义词 `bool` 来创建列以存储布尔值。当你将列定义为 `bool` 时，后台实际创建的是一个 `tinyint(1)`
    列。
- en: 'This table called `food` has two boolean columns, `organic_flag` and `gluten_free_flag`,
    to tell you whether a food is organic or gluten-free:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这个名为 `food` 的表有两个布尔列，`organic_flag` 和 `gluten_free_flag`，用来告诉你某种食物是否是有机的或无麸质的：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It’s common practice to add the suffix `_flag` to columns that contain boolean
    values, such as `organic_flag`, because setting the value to `true` or `false`
    can be compared to raising or lowering a flag, respectively.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 通常做法是给包含布尔值的列添加后缀 `_flag`，例如 `organic_flag`，因为将值设置为 `true` 或 `false` 可以类比于分别升起或放下旗帜。
- en: To view the structure of a table, you can use the `describe`, or `desc`, command.
    [Figure 4-1](#figure4-1) shows the result of running `desc food;` in MySQL Workbench.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看表的结构，你可以使用 `describe` 或 `desc` 命令。[图 4-1](#figure4-1) 显示了在 MySQL Workbench
    中运行 `desc food;` 的结果。
- en: '![](image_fi/503007c04/f04001.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c04/f04001.png)'
- en: 'Figure 4-1: Describing the `food` table in MySQL Workbench'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-1：在 MySQL Workbench 中描述 `food` 表
- en: You can see that, although the `organic_flag` and `gluten_free_flag` columns
    were created with the `bool` synonym, the data type that was used to create those
    columns is `tinyint(1)`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，尽管 `organic_flag` 和 `gluten_free_flag` 列是使用 `bool` 同义词创建的，但实际用于创建这些列的数据类型是
    `tinyint(1)`。
- en: Decimal Data Types
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 十进制数据类型
- en: For numbers that contain decimal points, MySQL provides the `decimal`, `float`,
    and `double` data types. Whereas `decimal` stores exact values, `float` and `double`
    store approximate values. For that reason, if you are storing values that can
    be handled equally well by `decimal`, `float`, or `double`, I recommend using
    the `decimal` data type.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于包含小数点的数字，MySQL 提供了 `decimal`、`float` 和 `double` 数据类型。`decimal` 存储精确值，而 `float`
    和 `double` 存储近似值。因此，如果你存储的值可以被 `decimal`、`float` 或 `double` 同样处理，我建议使用 `decimal`
    数据类型。
- en: '**`decimal`**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**`decimal`**'
- en: The `decimal` data type allows you to define precision and scale. *Precision*
    is the total number of digits that you can store, and *scale* is the number of
    digits after the decimal point. The `decimal` data type is often used for monetary
    values with a scale of 2.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`decimal` 数据类型允许你定义精度和比例。*精度* 是你可以存储的总数字个数，*比例* 是小数点后的数字个数。`decimal` 数据类型通常用于具有两位小数的货币值。'
- en: For example, if you define a `price` column as `decimal(5,2)`, you can store
    values between –999.99 and 999.99\. A precision of `5` means you can store five
    total digits, and a scale of `2` means you can store two digits after the decimal
    point.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，如果你将 `price` 列定义为 `decimal(5,2)`，你可以存储介于 -999.99 和 999.99 之间的值。精度 `5` 表示你可以存储五个总数字，比例
    `2` 表示你可以存储小数点后的两个数字。
- en: 'The following synonyms are available for the `decimal` type: `numeric(5,2)`,
    `dec(5,2)`, and `fixed(5,2)`. All of these are equivalent and create a data type
    of `decimal(5,2)`.'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是 `decimal` 类型的可用同义词：`numeric(5,2)`、`dec(5,2)` 和 `fixed(5,2)`。这些都是等效的，都会创建一个
    `decimal(5,2)` 数据类型。
- en: '**`float`**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**`float`**'
- en: The `float` data type stores numeric data with a floating-point decimal. Unlike
    the `decimal` data type, where the scale is defined, a floating-point number has
    a decimal point that isn’t always in the same location—the decimal point can *float*
    within the number. A `float` data type could represent the number 1.234, 12.34,
    or 123.4.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`float` 数据类型用于存储具有浮动小数点的数字数据。与 `decimal` 数据类型不同，后者的精度是固定的，浮动小数点数字的精度和小数点的位置是不固定的—小数点可以在数字中
    *浮动*。`float` 数据类型可以表示数字 1.234、12.34 或 123.4。'
- en: '**`double`**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**`double`**'
- en: The `double` data type, short for `double precision`, also allows you to store
    a number with an undefined scale that has a decimal point someplace in the number.
    The `double` data type is similar to `float` except that `double` can store numbers
    more accurately. In MySQL, storing a `float` uses 4 bytes and storing a `double`
    uses 8\. For floating-point numbers with many digits, use the `double` data type.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`double` 数据类型是 `double precision` 的缩写，也允许你存储一个具有未定义小数位的数字，该数字的某个地方有小数点。`double`
    数据类型类似于 `float`，但 `double` 可以更精确地存储数字。在 MySQL 中，存储一个 `float` 使用 4 字节，而存储一个 `double`
    使用 8 字节。对于具有多个数字的浮动小数，建议使用 `double` 数据类型。'
- en: Date and Time Data Types
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日期和时间数据类型
- en: For dates and times, MySQL provides the `date`, `time`, `datetime`, `timestamp`,
    and `year` data types.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对于日期和时间，MySQL 提供了 `date`、`time`、`datetime`、`timestamp` 和 `year` 数据类型。
- en: '**`date`**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**`date`**'
- en: The `date` data type stores dates in `YYYY-MM-DD` format (year, month, and day,
    respectively).
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`date` 数据类型以 `YYYY-MM-DD` 格式存储日期（分别表示年、月、日）。'
- en: '**`time`**'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**`time`**'
- en: The `time` data type stores times in `hh:mm:ss` format, representing hours,
    minutes, and seconds.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`time` 数据类型以 `hh:mm:ss` 格式存储时间，表示小时、分钟和秒。'
- en: '**`datetime`**'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**`datetime`**'
- en: The `datetime` data type is for storing both the date and time in one value
    with the format `YYYY-MM-DD hh:mm:ss`.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`datetime` 数据类型用于存储日期和时间的组合，格式为 `YYYY-MM-DD hh:mm:ss`。'
- en: '**`timestamp`**'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**`timestamp`**'
- en: The `timestamp` data type also stores the date and the time in one value with
    the same format `YYYY-MM-DD hh:mm:ss`, though `timestamp` stores the *current*
    date and time, while `datetime` is designed for other date and time values.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`timestamp` 数据类型也存储日期和时间的组合，格式为 `YYYY-MM-DD hh:mm:ss`，不过 `timestamp` 存储的是 *当前*
    的日期和时间，而 `datetime` 设计用于其他日期和时间值。'
- en: The range of values that `timestamp` accepts is smaller; dates must be between
    the year 1970 and 2038\. The `datetime` data type accepts a wider range of dates,
    from the years 1000 to 9999\. You should use `timestamp` only when you want to
    stamp the current date and time value, such as to save the date and time that
    a row was updated.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`timestamp` 接受的日期范围较小；日期必须介于 1970 年至 2038 年之间。`datetime` 数据类型接受更广泛的日期范围，从公元
    1000 年到 9999 年。你应该仅在需要记录当前日期和时间值时使用 `timestamp`，例如保存某行数据更新时间的日期和时间。'
- en: '**`year`**'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**`year`**'
- en: The `year` data type stores the year in the `YYYY` format.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`year` 数据类型以 `YYYY` 格式存储年份。'
- en: The json Data Type
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSON 数据类型
- en: '*JavaScript Object Notation (JSON)* is a popular format for sending data between
    computers. MySQL provides the `json` data type to allow you to store and retrieve
    entire JSON documents in your database. MySQL will check that a JSON document
    contains valid JSON before allowing it to be saved in a `json` column.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*JavaScript 对象表示法 (JSON)* 是一种流行的格式，用于在计算机之间传输数据。MySQL 提供了 `json` 数据类型，允许你在数据库中存储和检索整个
    JSON 文档。MySQL 会检查 JSON 文档是否包含有效的 JSON 格式，然后才允许将其保存在 `json` 列中。'
- en: 'A simple JSON document might look like this:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的 JSON 文档可能如下所示：
- en: '[PRE14]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: JSON documents contain key/value pairs. In this example, `department` is a key
    and `Marketing` is a value. These keys and values don’t correspond to rows and
    columns in your table; instead, the entire JSON document can be saved in a column
    that has the `json` data type. Later, you can extract properties from the JSON
    document using MySQL queries.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 文档包含键值对。在这个示例中，`department` 是键，`Marketing` 是值。这些键值对与表中的行和列无关；相反，整个 JSON
    文档可以保存在一个具有 `json` 数据类型的列中。稍后，你可以使用 MySQL 查询从 JSON 文档中提取属性。
- en: Spatial Data Types
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空间数据类型
- en: MySQL provides data types for representing geographical location data, or *geodata*.
    This type of data helps answer questions like “What city am I in?” or “How many
    Chinese restaurants are within 5 miles of my location?”
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 提供了表示地理位置数据或 *地理数据* 的数据类型。这类数据有助于回答类似“我在哪个城市？”或“离我位置 5 英里内有多少家中餐馆？”的问题。
- en: '| `geometry` | Stores location values of any geographical type, including `point`,
    `linestring`, and `polygon` types |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `geometry` | 存储任何地理类型的位置信息，包括 `point`、`linestring` 和 `polygon` 类型 |'
- en: '| `point` | Represents a location with a particular latitude and longitude,
    like your current location |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `point` | 表示一个特定的经纬度位置，例如你当前的位置 |'
- en: '| `linestring` | Represents points and the curve between them, such as the
    location of a highway |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `linestring` | 表示点与点之间的曲线，例如高速公路的位置 |'
- en: '| `polygon` | Represents a boundary, such as around a country or city |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `polygon` | 表示边界，例如国家或城市的边界 |'
- en: '| `multipoint` | Stores an unordered collection of `point` types |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `multipoint` | 存储一组无序的`point`类型集合 |'
- en: '| `multilinestring` | Stores a collection of `linestring` types |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `multilinestring` | 存储一组`linestring`类型集合 |'
- en: '| `emultipolygon` | Stores a collection of `polygon` typess |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `emultipolygon` | 存储一组`polygon`类型集合 |'
- en: '| `geometrycollection` | Stores a collection of `geometry` types |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `geometrycollection` | 存储一组`geometry`类型集合 |'
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you explored the available MySQL data types and when to use
    them. In the next chapter, you’ll look at ways to retrieve data from multiple
    tables using different MySQL join types, and display that data in a single result
    set.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了可用的MySQL数据类型及其使用场景。在下一章中，你将学习如何通过不同的MySQL连接类型从多个表中检索数据，并将这些数据显示在单一的结果集中。
