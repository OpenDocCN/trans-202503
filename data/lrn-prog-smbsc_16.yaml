- en: '**16**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**16**'
- en: '**STORING DATA WITH ASSOCIATIVE ARRAYS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用关联数组存储数据**'
- en: '![image](graphics/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/common01.jpg)'
- en: On social websites like Facebook and LinkedIn, people enter information into
    text boxes, such as their names, relationship statuses, and even regular updates
    to their friends (like, “Oh noes!! I just stepped on a bug, and I think I got
    bug poisoning!”). Programs that need to search or filter this data may use associative
    arrays to store the various parts of the text.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在像Facebook和LinkedIn这样的社交网站上，人们会在文本框中输入信息，比如他们的名字、关系状态，甚至是定期向朋友更新（比如，“哦不！！我刚踩到了一只虫子，我觉得我得了虫子中毒！”）。需要搜索或过滤这些数据的程序可能会使用关联数组来存储文本的各个部分。
- en: In addition to the indexed arrays you used in [Chapter 15](ch15.html#ch15),
    Small Basic supports other types of arrays that can simplify many programming
    tasks. In this chapter, you’ll start by learning about *associative arrays*. Then
    you’ll learn about the `Array` object, use it to create some fun applications,
    and even turn your computer into a poet!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在[第15章](ch15.html#ch15)中使用的索引数组外，Small Basic还支持其他类型的数组，这些数组可以简化许多编程任务。在本章中，你将从学习*关联数组*开始。接着，你将学习`Array`对象，使用它创建一些有趣的应用，甚至将你的计算机变成一位诗人！
- en: '**Associative Arrays**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**关联数组**'
- en: In the previous chapter, you learned how to use an integer index to access an
    array’s elements. But in Small Basic, an array’s index can also be a string. Arrays
    indexed by strings are called *associative arrays*, *maps*, or *dictionaries*.
    In this book, we’ll call them associative arrays. Just like an indexed array,
    an associative array can store values of any type. You can use an associative
    array to create an association between a set of *keys* (string indices) and a
    set of values, which is called creating a *map* of key-value pairs.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，你学习了如何使用整数索引来访问数组的元素。但在Small Basic中，数组的索引也可以是字符串。由字符串索引的数组被称为*关联数组*、*映射*或*字典*。在本书中，我们称它们为关联数组。就像索引数组一样，关联数组可以存储任何类型的值。你可以使用关联数组在一组*键*（字符串索引）和一组值之间创建关联，这就是创建键值对*映射*。
- en: 'The following code shows a simple example of an associative array in action.
    It’s a list of states keyed by their two-letter abbreviations:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了关联数组在实际应用中的一个简单例子。这是一个由两位字母缩写键控的州列表：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To display the name of a state, you simply use its corresponding key and the
    proper syntax. For example, to display `Michigan`, you can write this statement:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示一个州的名称，你只需要使用其对应的键和正确的语法。例如，要显示`Michigan`，你可以写下这个语句：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By writing the name of the array followed by the key enclosed in square brackets,
    you can access the corresponding item. An associative array works like a *lookup
    table* that maps keys to values; if you know the key, you can find its value very
    quickly.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通过写出数组的名称，后跟用方括号括起来的键，你可以访问对应的项。关联数组就像一个*查找表*，将键映射到值；如果你知道键，就可以非常快速地找到其对应的值。
- en: To learn how to use associative arrays, let’s write a program that keeps track
    of the ages of your friends by name. Enter the program in [Listing 16-1](ch16.html#ch16ex1).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要学习如何使用关联数组，让我们编写一个程序，通过名字追踪你朋友的年龄。在[清单 16-1](ch16.html#ch16ex1)中输入该程序。
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 16-1: Using associative arrays*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 16-1：使用关联数组*'
- en: Lines 2–5 create an associative array named `age` with four elements in it.
    You can add more if you’d like, or you can change the array to store the ages
    of your own friends. Line 6 asks you to enter a friend’s name, and line 7 reads
    it into the `name` variable. In line 9, `age[name]` looks up the age of that friend.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第2行到第5行创建了一个名为`age`的关联数组，其中包含四个元素。如果你愿意，可以添加更多元素，或者你可以更改数组来存储你自己朋友的年龄。第6行让你输入一个朋友的名字，第7行将其读取到`name`变量中。在第9行，`age[name]`查找该朋友的年龄。
- en: 'Let’s look at some sample runs of this program:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下这个程序的一些示例运行：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Note that the key is case insensitive: it doesn’t matter if you enter `age["Ernie"]`,
    `age["ernie"]`, or even `age["ERNIE"]`. If the array contains a key named `Ernie`,
    regardless of its case, Small Basic returns the value for that key.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，键是大小写不敏感的：无论你输入`age["Ernie"]`、`age["ernie"]`，还是`age["ERNIE"]`，都没关系。如果数组包含名为`Ernie`的键，无论其大小写如何，Small
    Basic都会返回该键的值。
- en: 'Let’s say you forget which friends’ names you stored in the array, and you
    try to access the age of someone you forgot to include:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你忘记了在数组中存储了哪些朋友的名字，并且你试图访问一个你忘记包括的朋友的年龄：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If the array doesn’t contain a certain key, Small Basic returns an empty string,
    which is why `age["Grover"]` is empty.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数组中不包含某个键，Small Basic会返回一个空字符串，这就是为什么`age["Grover"]`是空的原因。
- en: '**ASSOCIATIVE ARRAYS VS. THE IF/ELSEIF LADDER**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**关联数组与IF/ELSEIF阶梯**'
- en: 'In programming, there are usually lots of different ways to approach a particular
    problem. Here’s another way to write the program like the one in [Listing 16-1](ch16.html#ch16ex1):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中，通常有多种不同的方式来解决特定的问题。这里有另一种写法，类似于[Listing 16-1](ch16.html#ch16ex1)中的程序：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Although this program seems similar to the one in [Listing 16-1](ch16.html#ch16ex1),
    the two have one important difference: here, string comparison is case sensitive.
    If you enter `ernie` (with a lowercase *e*), the program displays the following
    output:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个程序看起来与[Listing 16-1](ch16.html#ch16ex1)中的程序类似，但两者有一个重要区别：在这里，字符串比较是区分大小写的。如果你输入`ernie`（小写的*e*），程序将显示如下输出：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The expression `If("ernie" = "Ernie")` is false. This version of the program
    is also harder to read and write. When you need to map between a set of keys and
    values, it’s best to use associative arrays so you don’t have to worry about case.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式`If("ernie" = "Ernie")`为假。这个版本的程序也更难以阅读和编写。当你需要在一组键和值之间进行映射时，最好使用关联数组，这样你就不必担心大小写问题。
- en: '**Putting Associative Arrays to Use**'
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用关联数组**'
- en: Now that you understand the basics of associative arrays, let’s examine a couple
    of programs that show you how to use them.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经理解了关联数组的基础知识，让我们看几个程序示例，展示如何使用它们。
- en: '***Days in French***'
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***法语中的星期**'
- en: The first example translates the days of the week from English to French. This
    program prompts a user to enter the name of a day in English and outputs that
    name in French. Enter the code in [Listing 16-2](ch16.html#ch16ex2).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个示例将星期几从英语翻译成法语。这个程序提示用户输入一个英文的星期几名称，并输出该名称的法语翻译。请在[Listing 16-2](ch16.html#ch16ex2)中输入代码。
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 16-2: An English-to-French translator*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 16-2: 一个英法翻译程序*'
- en: 'The `day` array stores the French names for the days of the week (lines 2–8).
    Each key in the array is the day’s name in English. The program prompts the user
    to enter the name of a day in English (line 10) and stores the user’s input in
    the `name` variable (line 11). The program then looks up the French name using
    the user’s input as a key, using the syntax `day[name]`, and displays it (line
    12). Here’s the output from a sample run:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`day`数组存储了星期几的法语名称（第2-8行）。数组中的每个键是该天的英文名称。程序提示用户输入一个英文的星期几名称（第10行），并将用户的输入存储在`name`变量中（第11行）。然后，程序使用用户的输入作为键，通过语法`day[name]`查找对应的法语名称，并显示它（第12行）。以下是一次示例运行的输出：'
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Do you know any other languages? Change the program to help your friends learn
    how to say the days of the week in a new language. Feeling sneaky? You could even
    make up your own secret language!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你会其他语言吗？修改程序，帮助你的朋友们学习如何用一种新语言说出星期几。想要调皮一下吗？你甚至可以编造一个自己的秘密语言！
- en: '**TRY IT OUT 16-1**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试一下 16-1**'
- en: 'What’s the output of [Listing 16-2](ch16.html#ch16ex2) if the user enters an
    invalid day name (like *Windsday*)? Update the program to display an error message
    when this happens. Use an `If` statement like this one:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户输入一个无效的星期名称（比如*Windsday*），[Listing 16-2](ch16.html#ch16ex2)的输出会是什么？当发生这种情况时，更新程序以显示错误信息。使用如下的`If`语句：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '***Storing Records***'
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***存储记录***'
- en: Business is booming, and Moe Mows, a local lawn-mowing service in your town,
    has hired you to write a program that displays the contact information of its
    customers. When the company enters a customer’s name, the program needs to display
    the customer’s home address, phone number, and email address. Enter the program
    in [Listing 16-3](ch16.html#ch16ex3).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 生意兴隆，你所在城镇的本地草坪修剪服务公司Moe Mows雇佣你编写一个程序，用于显示其客户的联系信息。当公司输入客户的姓名时，程序需要显示客户的家庭地址、电话号码和电子邮件地址。请在[Listing
    16-3](ch16.html#ch16ex3)中输入该程序。
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 16-3: Building a simple database*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 16-3: 构建一个简单的数据库*'
- en: 'The program uses three associative arrays: `address`, `phone`, and `email`.
    All three arrays use the customer’s name as a key, and the arrays are used collectively
    to store customers’ records. A *record* is a collection of related data items.
    In this example, each customer’s record has three fields: address, phone, and
    email. Whether the program has two records or 1,000 records, the search is done
    the same way. For example, the statement `address[name]` in line 12 returns the
    value associated with the key `name` in the `address` array. We don’t have to
    search the `address` array; Small Basic does this for us, for free!'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序使用了三个关联数组：`address`、`phone` 和 `email`。这三个数组都以客户的名字作为键，数组共同用来存储客户的记录。*记录*
    是一组相关的数据项。在这个例子中，每个客户的记录有三个字段：地址、电话和电子邮件。无论程序有两个记录还是 1,000 条记录，搜索的方式都是一样的。例如，第
    12 行的语句 `address[name]` 返回与 `address` 数组中 `name` 键关联的值。我们不需要自己去搜索 `address` 数组；Small
    Basic 会为我们做这一切，完全免费！
- en: 'Here’s the output from a sample run of this program:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是这个程序示例运行的输出：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**TRY IT OUT 16-2**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**动手实践 16-2**'
- en: Update the program in [Listing 16-3](ch16.html#ch16ex3) to store the contact
    information of some of your friends (but not all 500 of your Facebook friends).
    Add another array that stores the birth date of each friend. You’ll never forget
    a birthday again!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 [列表 16-3](ch16.html#ch16ex3) 中的程序，将一些朋友的联系信息存储在其中（但不是你所有 500 个 Facebook 朋友的信息）。再添加一个数组，用来存储每个朋友的生日。你再也不会忘记生日了！
- en: '**The Array Object**'
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**数组对象**'
- en: 'The `Array` object in the Small Basic library can help you find important information
    about the arrays in your programs. In this section, we’ll explore this object
    in detail and look at some examples on how to use it. To explore the `Array` object,
    let’s start by entering the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Small Basic 库中的 `Array` 对象可以帮助你找到程序中数组的重要信息。在本节中，我们将详细探讨这个对象，并查看一些如何使用它的示例。要探索
    `Array` 对象，让我们首先输入以下代码：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This code defines an ordinary variable called `name`, an associative array called
    `age` that has two elements, and an indexed array called `score` that has one
    element. You’ll use these arrays in the examples that follow. What can the `Array`
    object tell you? Let’s find out!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码定义了一个普通变量 `name`，一个名为 `age` 的关联数组，包含两个元素，还有一个名为 `score` 的索引数组，包含一个元素。你将在接下来的例子中使用这些数组。`Array`
    对象能告诉你什么？让我们来看看！
- en: '***Is It an Array?***'
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***它是一个数组吗？***'
- en: Do you think Small Basic knows that `name` is an ordinary variable and that
    `age` and `score` are arrays? Run the program in [Listing 16-4](ch16.html#ch16ex4)
    to find out.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你认为 Small Basic 知道 `name` 是一个普通变量，而 `age` 和 `score` 是数组吗？运行 [列表 16-4](ch16.html#ch16ex4)
    中的程序来找出答案。
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 16-4: Demonstrating the* `IsArray()` *method*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 16-4：演示* `IsArray()` *方法*'
- en: This code uses the `Array` object’s `IsArray()` method. If the variable is an
    array, this method returns `"True"`; otherwise, it returns `"False"`. This method
    shows that the variables `age` and `score` are arrays, but the `name` variable
    isn’t an array. The `IsArray()` method can help you to be sure that the variables
    in your programs are arrays.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码使用了 `Array` 对象的 `IsArray()` 方法。如果变量是数组，该方法返回 `"True"`；否则返回 `"False"`。这个方法表明变量
    `age` 和 `score` 是数组，但变量 `name` 不是数组。`IsArray()` 方法可以帮助你确保程序中的变量是数组。
- en: '***How Big Is an Array?***'
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***数组有多大？***'
- en: The `Array` object can also tell you how many elements are stored in your arrays.
    Run the program in [Listing 16-5](ch16.html#ch16ex5).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`Array` 对象还可以告诉你数组中存储了多少元素。运行 [列表 16-5](ch16.html#ch16ex5) 中的程序。'
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*Listing 16-5: Demonstrating the* `GetItemCount()` *method*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 16-5：演示* `GetItemCount()` *方法*'
- en: The `GetItemCount()` method returns the number of items in the specified array.
    Note how `GetItemCount(name)` returns 0, because `name` isn’t an array. The other
    two calls return the number of elements in each array. Use `GetItemCount()` to
    keep track of how many items you’re storing in an array. You might use this method
    in a game that allows the player to store items in an inventory and you want to
    check how many items they have picked up.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`GetItemCount()` 方法返回指定数组中的项目数量。注意 `GetItemCount(name)` 返回 0，因为 `name` 不是一个数组。其他两个调用返回每个数组中的元素数量。使用
    `GetItemCount()` 来跟踪你在数组中存储了多少项。你可能会在一个允许玩家将物品存入背包的游戏中使用此方法，并且你希望检查他们捡到了多少物品。'
- en: '***Does It Have a Particular Index?***'
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***它有特定的索引吗？***'
- en: You can also use the `Array` object to find out whether one of your arrays contains
    a certain index. To see how, run the program in [Listing 16-6](ch16.html#ch16ex6).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 `Array` 对象来检查你的数组是否包含某个特定的索引。要了解如何操作，请运行 [清单 16-6](ch16.html#ch16ex6)
    中的程序。
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*Listing 16-6: Demonstrating the* `ContainsIndex()` *method*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 16-6：演示* `ContainsIndex()` *方法*'
- en: The `ContainsIndex()` method takes two arguments. The first argument is the
    name of the array, and the second argument is the index you’re checking for. The
    method returns `"True"` or `"False"` depending on whether the index exists in
    the array.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`ContainsIndex()` 方法接受两个参数。第一个参数是数组的名称，第二个参数是你要检查的索引。该方法会根据索引是否存在于数组中返回 `"True"`
    或 `"False"`。'
- en: Line 6 shows that searching for the index is case insensitive, which is why
    the search for the index `homer` returns `"True"`. Also, searching the `score`
    array for index `"1"` (as a string) or index `1` (as a number) both returned `"True"`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 第6行显示了搜索索引时是不区分大小写的，这就是为什么搜索索引 `homer` 返回 `"True"`。此外，搜索 `score` 数组中的索引 `"1"`（作为字符串）或索引
    `1`（作为数字）都返回了 `"True"`。
- en: If you’re not sure whether an array includes a particular index, you can use
    the `ContainsIndex()` method to find out. This method is especially helpful if
    you’re working with very long arrays.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不确定某个数组是否包含特定的索引，可以使用 `ContainsIndex()` 方法来查找。这个方法对于处理非常长的数组特别有用。
- en: '***Does It Have a Particular Value?***'
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***它是否具有特定的值？***'
- en: The `Array` object also offers a method that checks whether an array contains
    a certain value. Run the program in [Listing 16-7](ch16.html#ch16ex7) to discover
    how the `ContainsValue()` method works.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`Array` 对象还提供了一种方法，用于检查数组是否包含某个特定的值。运行 [清单 16-7](ch16.html#ch16ex7) 中的程序，了解
    `ContainsValue()` 方法是如何工作的。'
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '*Listing 16-7: Demonstrating the* `ContainsValue()` *method*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 16-7：演示* `ContainsValue()` *方法*'
- en: The `ContainsValue()` method returns `"True"` or `"False"` depending on whether
    the value it checks for exists in the array.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`ContainsValue()` 方法根据检查的值是否存在于数组中，返回 `"True"` 或 `"False"`。'
- en: '**NOTE**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Unlike the* `ContainsIndex()` *method, the* `ContainsValue()` *method is case
    sensitive. So it’s best to be consistent with your casing!*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*与* `ContainsIndex()` *方法不同，* `ContainsValue()` *方法是区分大小写的。所以最好保持大小写一致！*'
- en: '***Give Me All the Indices***'
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***给我所有的索引***'
- en: Another useful method of the `Array` object is `GetAllIndices()`. This method
    returns an array that has all the indices of a given array. The first element
    of the returned array has an index of 1\. To understand how this method works,
    run the program in [Listing 16-8](ch16.html#ch16ex8).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`Array` 对象的另一个有用方法是 `GetAllIndices()`。该方法返回一个包含给定数组所有索引的数组。返回数组的第一个元素的索引为 1。要理解这个方法是如何工作的，请运行
    [清单 16-8](ch16.html#ch16ex8) 中的程序。'
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '*Listing 16-8: Demonstrating the* `GetAllIndices()` *method*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 16-8：演示* `GetAllIndices()` *方法*'
- en: 'Line 4 calls `GetAllIndices()` to find all the indices of the `age` array.
    This method returns an array, which it saves in the `names` identifier. The code
    then starts a loop that runs from the first to the last element in `names`. Note
    how the code uses the `GetItemCount()` method to figure out this value. Here’s
    the output of this code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 第4行调用 `GetAllIndices()` 来查找 `age` 数组的所有索引。该方法返回一个数组，并将其保存在 `names` 标识符中。接着代码开始一个循环，从
    `names` 中的第一个元素运行到最后一个元素。注意代码是如何使用 `GetItemCount()` 方法来计算这个值的。以下是这段代码的输出：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now let’s put the methods you’ve learned to good use. Do you think your computer
    is intelligent enough to write poems? Well, let’s see!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将你学到的方法好好利用一下。你觉得你的电脑足够聪明，能够写诗吗？好吧，我们来看看！
- en: '**TRY IT OUT 16-3**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**动手实践 16-3**'
- en: 'Open the file *AnimalSpeed.sb* from this chapter’s folder. This game quizzes
    the player on the top speed (in miles per hour) of different animals. The program
    has an associative array that looks like this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 打开本章文件夹中的 *AnimalSpeed.sb* 文件。这个游戏会考察玩家不同动物的最高速度（单位为英里每小时）。程序包含一个关联数组，类似于这样：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Run this game to see how it works. Which `Array` object methods does the game
    use? Explain how the game works, and then come up with some ideas to make the
    game more fun. Make sure you do all of this assignment. Don’t be a cheetah!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个游戏看看它是如何工作的。这个游戏使用了哪些`Array`对象方法？解释一下游戏的工作原理，然后想一些点子让游戏更有趣。确保完成所有任务。别像猎豹一样偷懒！
- en: '**Your Computer the Poet**'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你的电脑是诗人**'
- en: Now let’s use what we’ve learned about associative arrays to write a program
    that generates poems. This artificial poet selects words randomly from five lists
    (`article`, `adjective`, `noun`, `verb`, and `preposition`) and combines them
    into a fixed pattern. To give the poems a central theme, all the words in these
    lists are related to love and nature. Of course, we might still end up with some
    silly poetry, but that’s just as fun!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运用所学的关联数组知识，编写一个生成诗歌的程序。这个人工诗人从五个列表（`article`，`adjective`，`noun`，`verb`
    和 `preposition`）中随机选择单词，并将它们组合成固定的模式。为了给诗歌赋予一个中心主题，这些列表中的所有单词都与爱与自然相关。当然，我们可能还是会得到一些傻乎乎的诗歌，但那也一样有趣！
- en: '**NOTE**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The idea of this program is adapted from Daniel Watt’s* Learning with Logo
    *(McGraw-Hill, 1983).*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*这个程序的灵感来自于丹尼尔·瓦特的《使用 Logo 学习》（McGraw-Hill, 1983）。*'
- en: '[Figure 16-1](ch16.html#ch16fig1) shows the user interface for the application.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 16-1](ch16.html#ch16fig1) 显示了该应用程序的用户界面。'
- en: '![image](graphics/f16-01.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f16-01.jpg)'
- en: '*Figure 16-1: The user interface for* Poet.sb'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-1：Poet.sb 的用户界面*'
- en: 'Every time you click the New button, the poet recites a new poem. Each poem
    includes three lines that follow these patterns:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 每次点击“New”按钮时，诗人都会朗诵一首新诗。每首诗包含三行，遵循以下模式：
- en: '• Line 1: article, adjective, noun'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: • 第 1 行：冠词，形容词，名词
- en: '• Line 2: article, noun, verb, preposition, article, adjective, noun'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: • 第 2 行：冠词，名词，动词，介词，冠词，形容词，名词
- en: '• Line 3: adjective, adjective, noun'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: • 第 3 行：形容词，形容词，名词
- en: The following sections guide you through the creation of this program.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分将指导你创建这个程序。
- en: '***Step 1: Open the Startup File***'
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步骤 1：打开启动文件***'
- en: 'Open the file *Poet_Incomplete.sb* from this chapter’s folder. The file contains
    one subroutine named `CreateLists()`, which creates the five lists you’ll need
    in this program. This subroutine was added to save you from having to type a whole
    bunch of words. This is what it looks like:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 打开本章文件夹中的 *Poet_Incomplete.sb* 文件。该文件包含一个名为 `CreateLists()` 的子例程，用于创建程序所需的五个列表。添加这个子例程是为了让你不必输入一堆单词。它的内容如下：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The ellipses (`...`) take the place of the missing array elements, but you can
    see all these elements when you open the file. Note that the article array also
    includes other determiners, such as one, each, and every.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 省略号（`...`）表示缺失的数组元素，但当你打开文件时，你可以看到所有这些元素。请注意，article 数组还包括其他限定词，如 one、each 和
    every。
- en: '***Step 2: Set Up the Graphical User Interface***'
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步骤 2：设置图形用户界面***'
- en: Add the code in [Listing 16-9](ch16.html#ch16ex9) to the beginning of the program
    file to set up the graphical user interface (GUI) and register the button’s event
    handler.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 将 [清单 16-9](ch16.html#ch16ex9) 中的代码添加到程序文件的开头，以设置图形用户界面（GUI）并注册按钮的事件处理程序。
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '*Listing 16-9: Setting up the GUI*'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 16-9：设置图形用户界面*'
- en: The program starts by initializing the graphics window (lines 1–7), drawing
    the background image (lines 9–10), and creating the New button (line 11). Next,
    it calls the `CreateLists()` subroutine to initialize the five indexed arrays
    (line 13). Then the program uses the `Array` object to get the number of items
    in each array and saves these values in lines 15–19\. This way, you can append
    more elements to the end of these arrays without affecting the rest of the program.
    For example, if you wanted to add a 73rd adjective, you could add `73=callipygous;`
    within the quotes at the end of the `adjectives` array line in the `CreateLists()`
    subroutine. Because line 16 in [Listing 16-9](ch16.html#ch16ex9) gets the count
    of the elements in that array, the new elements you add are automatically counted
    and randomly selected for the poem, just like the other elements.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 程序通过初始化图形窗口（第 1-7 行）、绘制背景图像（第 9-10 行）和创建“New”按钮（第 11 行）开始。接下来，它调用 `CreateLists()`
    子例程来初始化五个索引数组（第 13 行）。然后，程序使用 `Array` 对象获取每个数组中的项数，并将这些值保存在第 15-19 行。这样，你就可以在不影响程序其余部分的情况下，向这些数组的末尾添加更多元素。例如，如果你想添加第
    73 个形容词，可以在 `CreateLists()` 子例程中的 `adjectives` 数组行末尾加上 `73=callipygous;`。因为第 16
    行在 [清单 16-9](ch16.html#ch16ex9) 中获取该数组的元素数量，所以你添加的新元素会自动被计数并随机选入诗歌，就像其他元素一样。
- en: Finally, the program registers a handler for the `ButtonClicked` event (line
    21) and calls the handler subroutine to display the first poem (line 22).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，程序为 `ButtonClicked` 事件注册了一个处理程序（第 21 行），并调用该处理程序子例程来显示第一首诗（第 22 行）。
- en: '***Step 3: Respond to Button Clicks***'
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步骤 3：响应按钮点击***'
- en: Now you need to add the `OnButtonClicked()` subroutine, which is shown in [Listing
    16-10](ch16.html#ch16ex10).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你需要添加 `OnButtonClicked()` 子程序，如 [列表 16-10](ch16.html#ch16ex10) 所示。
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '*Listing 16-10: The* `OnButtonClicked()` *subroutine*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 16-10：* `OnButtonClicked()` *子程序*'
- en: This subroutine redraws the background image to clear the graphics window (line
    2). It then calls the three subroutines that author the three lines of the poem
    (lines 4–6) and draws these lines in the graphics window (lines 8–10). Next, you’ll
    add the three missing subroutines.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个子程序重新绘制背景图像以清除图形窗口（第2行）。接着，它调用三个子程序来生成诗歌的三行内容（第4-6行），并将这些行绘制到图形窗口中（第8-10行）。接下来，你将添加三个缺失的子程序。
- en: '***Step 4: Write the Poem’s First Line***'
  id: totrans-115
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***第4步：编写诗歌的第一行***'
- en: 'The poem’s first line is written in this form: article, adjective, noun. Add
    the subroutine in [Listing 16-11](ch16.html#ch16ex11), which creates the poem’s
    first line and assigns it to the `poemLine1` variable.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 诗歌的第一行采用以下形式：冠词、形容词、名词。添加 [列表 16-11](ch16.html#ch16ex11) 中的子程序，该子程序创建诗歌的第一行并将其赋值给
    `poemLine1` 变量。
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '*Listing 16-11: The* `MakeLine1()` *subroutine*'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 16-11：* `MakeLine1()` *子程序*'
- en: The `MakeLine1()` subroutine selects three random words from the `article`,
    `adjective`, and `noun` arrays and stores the values in `art1`, `adj1`, and `noun1`
    (lines 2–4). It then fills `poemLine1` by appending these variables with a whitespace
    in between them (line 5).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`MakeLine1()` 子程序从 `article`、`adjective` 和 `noun` 数组中随机选择三个单词，并将其存储在 `art1`、`adj1`
    和 `noun1` 中（第2-4行）。然后，它通过在这些变量之间添加空格来填充 `poemLine1`（第5行）。'
- en: '***Step 5: Write the Poem’s Second and Third Lines***'
  id: totrans-120
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***第5步：编写诗歌的第二行和第三行***'
- en: 'The `MakeLine2()` and `MakeLine3()` subroutines are very similar to the `MakeLine1()`
    subroutine. The second line takes this form: article, noun, verb, preposition,
    article, adjective, noun. The third line takes this form: adjective, adjective,
    noun. Create these subroutines on your own. If you get stuck, open the file *Poet.sb*
    to see how we wrote these subroutines. When you’re done, recite your favorite
    poem output to your family or friends, and see if they think you wrote it!'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`MakeLine2()` 和 `MakeLine3()` 子程序与 `MakeLine1()` 子程序非常相似。第二行的形式是：冠词、名词、动词、介词、冠词、形容词、名词。第三行的形式是：形容词、形容词、名词。自己创建这些子程序。如果遇到困难，可以打开文件
    *Poet.sb* 查看我们如何编写这些子程序。完成后，把你最喜欢的诗歌输出背诵给家人或朋友听，看看他们是否认为是你写的！'
- en: '**TRY IT OUT 16-4**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试 16-4**'
- en: Run your poet program several times to see what a machine poet is capable of
    authoring. Come up with different poem patterns, and teach this poet how to create
    them. Then change the words to any words (and any amount of words) that you want!
    Head to *[http://tiny.cc/sbpoet/](http://tiny.cc/sbpoet/)* to share your poem
    program with the community and to see what others created.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 多次运行你的诗人程序，看看机器诗人能创作出什么样的作品。设计不同的诗歌模式，并教这个诗人如何创作它们。然后，将单词更改为你想要的任何单词（以及任意数量的单词）！前往
    *[http://tiny.cc/sbpoet/](http://tiny.cc/sbpoet/)* 与社区分享你的诗歌程序，并看看其他人创作了什么。
- en: '**NOTE**'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The* `Array` *object includes three more methods that create a different type
    of array:* `SetValue()`, `GetValue()`, *and* `RemoveValue()`*. Although these
    methods work well, the bracketed style of array is more universal among programming
    languages and is the reason this book focuses on that style.*'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*`Array`* *对象包括三个创建不同类型数组的方法：* `SetValue()`、`GetValue()` *和* `RemoveValue()`*。尽管这些方法效果很好，但数组的方括号形式在编程语言中更为通用，这也是本书专注于这种形式的原因。*'
- en: '**Programming Challenges**'
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程挑战**'
- en: If you get stuck, check out *[http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)*
    for the solutions and for more resources and review questions for teachers and
    students.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到困难，请查看 *[http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)*
    以获取解决方案、更多资源和教师及学生的复习问题。
- en: Write a program that keeps track of your friends’ phone numbers. Use an associative
    array that uses your friends’ names as keys; for example, `phone["Yoda"] = "555-1138"`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，记录你朋友的电话号码。使用一个关联数组，将你朋友的名字作为键；例如，`phone["Yoda"] = "555-1138"`。
- en: 'Write a program that saves book information. The key is the ISBN of the book.
    For each book, you need to know the title, the author, and the publication year.
    Use three associative arrays: `title[ISBN]`, `author[ISBN]`, and `year[ISBN]`.'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，保存书籍信息。书籍的关键是 ISBN。对于每本书，你需要知道书名、作者和出版年份。使用三个关联数组：`title[ISBN]`、`author[ISBN]`
    和 `year[ISBN]`。
- en: Open the file *VirtualPiano.sb* from this chapter’s folder. The program implements
    a virtual piano using the keyboard. Explain how the program works.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开本章文件夹中的*VirtualPiano.sb*文件。该程序使用键盘实现了一个虚拟钢琴。解释一下该程序是如何工作的。
