- en: Chapter 2. Spacing
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第2章 空格
- en: In this chapter, we look at various one-liners that change line and word spacing,
    performing such tasks as double- and triple-spacing lines in a file, removing
    blank lines, and double-spacing words. You’ll also learn about various command-line
    arguments, such as `-p`, `-e`, `-n`, and special variables, such as `$_` and `$\`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨各种改变行和词间距的一行命令，执行诸如在文件中双倍或三倍行距、删除空行以及双倍行距词汇等任务。你还将了解各种命令行参数，如`-p`、`-e`、`-n`，以及特殊变量，如`$_`和`$\`。
- en: 2.1 Double-space a file
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.1 双倍行距文件
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This one-liner double-spaces a file. I need to explain three things here: the
    `-p` and `-e` command-line options and the short `$\ = "\n"` Perl program.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这个一行命令实现了文件的双倍行距。这里需要解释三件事：`-p`和`-e`命令行选项以及简短的`$\ = "\n"` Perl程序。
- en: Use the `-e` option to enter a Perl program directly at the command line. Typically
    you won’t want to create source files for every small program; with `-e` you can
    easily write a program directly at the command line as a one-liner. In this case,
    the entire Perl program contained in this one-liner is `$\ = "\n"`. Be sure to
    use single quotes (`'`) around the program, or your shell will interpret things
    like `$\` as shell variables, which have no value, effectively removing them!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-e`选项可以直接在命令行输入Perl程序。通常你不会为每个小程序创建源文件；使用`-e`你可以很容易地将程序直接写入命令行，作为一行命令。在这种情况下，整个Perl程序包含在这一行命令中，即`$\
    = "\n"`。务必使用单引号（`'`）包裹程序，否则你的shell会将`$\`等内容解释为shell变量，而这些变量没有值，实际上会将它们删除！
- en: 'Now let’s look at the `-p` switch. Specifying `-p` tells Perl to assume the
    following loop around your program:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看`-p`选项。指定`-p`告诉Perl假定在你的程序周围有一个循环：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Broadly speaking, this construct loops over all the input, executes your code,
    and prints the value of `$_` (the `print` statement prints the value of `$_`),
    which allows you to modify all or some lines of the input quickly. The `$_` variable
    is a special variable that gets replaced with the current line of text. It can
    be replaced with other stuff as well. You’ll learn all about `$_` as you work
    through the book. (See [Appendix A](apa.html "Appendix A. Perl’s Special Variables")
    for a summary of its use cases.)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从广义上讲，这个构造会遍历所有输入，执行你的代码，并打印`$_`的值（`print`语句打印`$_`的值），这使你能够快速修改输入的全部或部分行。`$_`变量是一个特殊的变量，它会被当前的文本行替换。它也可以替换为其他内容。你将在本书中学到关于`$_`的所有知识。（有关它的使用案例，请参见[附录
    A](apa.html "附录 A. Perl的特殊变量")。）
- en: But understanding what is going on in this loop in more detail is important.
    First, the `while (<>)` loop takes each line from the standard input and puts
    it in the `$_` variable. Next, the code specified by `-e` is executed, followed
    by the `print or die` portion.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但更详细地理解这个循环的工作原理是很重要的。首先，`while (<>)`循环从标准输入中读取每一行并将其放入`$_`变量中。接着，执行由`-e`指定的代码，然后是`print
    or die`部分。
- en: The `continue` statement executes the `print or die` statement after each line,
    which attempts to print the contents of the `$_` variable. If the attempt fails
    (for example, the terminal is not writable or standard output has been redirected
    to something that isn’t writable), `die` makes Perl exit (die) with an error message.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`continue`语句在每一行之后执行`print or die`语句，尝试打印`$_`变量的内容。如果尝试失败（例如，终端不可写，或者标准输出被重定向到无法写入的地方），`die`会使Perl退出并显示错误信息。'
- en: 'In this one-liner, the code specified by `-e` is `$\ = "\n"`, so the program
    that Perl executes looks like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这行命令中，`-e`指定的代码是`$\ = "\n"`，因此Perl执行的程序看起来像这样：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This Perl program reads each line into the `$_` variable and then sets `$\`
    to a newline and calls `print`. Another special variable is `$\`. It is similar
    to the `ORS` (Output Record Separator) variable in Awk in that it is appended
    after every `print` operation. A `print` statement with no arguments prints the
    contents of `$_` and appends `$\` at the end of the output. As a result, each
    line is printed unmodified, followed by the `$\`, which was set to newline. The
    input is now double-spaced.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Perl程序将每一行读入`$_`变量，然后设置`$\`为换行符并调用`print`。另一个特殊的变量是`$\`。它类似于Awk中的`ORS`（输出记录分隔符）变量，它会在每次`print`操作之后附加。没有参数的`print`语句打印`$_`的内容，并在输出的末尾附加`$\`。结果是，每一行被原样打印，并在末尾附加`$\`，其值为换行符。现在，输入变为双倍行距。
- en: 'In fact, you actually do not need to set `$\` to newline for every line; you
    can set it just once at the beginning of the program:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你并不需要为每一行都设置`$\`为换行符；你可以只在程序的开始处设置一次：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This one-liner sets `$\` to the newline character just once before Perl does
    anything in the `BEGIN` code block. The `BEGIN` block is a special code block
    that is executed before everything else in a Perl program. Here’s what the expanded
    Perl program looks like, and it works exactly the same way as the previous one-liner:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个一行代码在Perl执行任何操作之前，只会将`\`设置为换行符一次，位于`BEGIN`代码块中。`BEGIN`代码块是一个特殊的代码块，在Perl程序中执行的所有其他操作之前首先被执行。以下是展开后的Perl程序，它的运行方式与前一个一行代码完全相同：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here is another way to double-space a file. This one-liner appends another
    newline character at the end of each line and then `print`s the line:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一种对文件进行双倍行距的方式。这个一行代码在每行的末尾添加一个换行符，然后`print`该行：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This one-liner is equivalent to
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个一行代码等同于
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Writing `$_ = $_ . "\n"` is the same as writing `$_ .= "\n"`. This expression
    simply concatenates `$_` with `"\n"`. (The period (`.`) is the string concatenation
    operator.)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 写`$_ = $_ . "\n"`与写`$_ .= "\n"`是等效的。这个表达式只是将`$_`与`"\n"`连接起来。（句点（`.`）是字符串连接操作符。）
- en: 'But probably the cleanest way to double-space a file is to use the substitution
    operator `s`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 但可能最简洁的双倍行距方式是使用替换操作符`s`：
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This one-liner replaces the regular expression `$` that matches the end of a
    line with a newline, effectively adding a newline at the end.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个一行代码将正则表达式`$`（匹配行尾的字符）替换为换行符，有效地在行尾添加了一个换行符。
- en: 'If you’re running Perl 5.10 or later, you can use the `say` operator. The `say`
    operator acts much like `print`, but it always adds a newline at the end of the
    line. In Perl 5.10, this same one-liner can be written like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Perl 5.10或更高版本，你可以使用`say`操作符。`say`操作符的作用类似于`print`，但它总是在行尾添加一个换行符。在Perl
    5.10中，这个一行代码可以这样写：
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `-E` command-line argument works exactly the same way as the `-e` command-line
    argument, but it also enables Perl 5.10 features, including the `say` operator.
    The `-n` argument is similar to `-p`, but you have to print the line yourself.
    (I explain the `-n` argument in more detail in one-liner 2.6.) This one-liner
    prints the line, followed by another newline that’s appended by the `say` operator.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`-E`命令行参数的作用与`-e`命令行参数完全相同，但它还启用了Perl 5.10的功能，包括`say`操作符。`-n`参数与`-p`类似，但你必须自己打印每一行。（我在一行代码2.6中更详细地解释了`-n`参数。）这个一行代码打印该行，接着由`say`操作符追加另一个换行符。'
- en: 'For example, if a file contains four lines:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果文件包含四行：
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'running any of these one-liners outputs the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这些一行代码中的任何一行都会输出以下内容：
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In these first few examples, I passed a filename as the last argument to the
    one-liners. When I do that, the one-liners operate on the contents of that file.
    If I didn’t pass a filename to the one-liners, they’d operate on the data from
    the standard input. From now on I won’t specify a file at the end of the one-liners,
    but you can always add it back if you want to run the one-liners on files. When
    writing one-liners, it’s a good idea to quickly test if they’re correct by typing
    something directly to the standard input. Then when you’re sure the one-liner
    works, you can pass one or more filenames at the end.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些最初的几个示例中，我将文件名作为最后一个参数传递给一行代码。当我这么做时，一行代码会在该文件的内容上进行操作。如果我没有给一行代码传递文件名，它们将操作来自标准输入的数据。从现在开始，我不会在一行代码的末尾指定文件，但如果你想在文件上运行一行代码，你始终可以将文件名加回来。在编写一行代码时，最好通过直接在标准输入中键入一些内容来快速测试它们是否正确。然后，当你确信这行代码有效时，你可以在末尾传递一个或多个文件名。
- en: Again, don’t forget about Perl’s handy documentation system, *perldoc*. Just
    type `perldoc perlrun` at the command line to display information about how to
    run Perl and all the command-line arguments.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，不要忘记Perl的便捷文档系统*perldoc*。只需在命令行输入`perldoc perlrun`，就能显示如何运行Perl及所有命令行参数的相关信息。
- en: 2.2 Double-space a file, excluding the blank lines
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.2 对文件进行双倍行距操作，排除空行
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This one-liner double-spaces all lines that are not completely empty by appending
    a newline character at the end of each nonblank line. The `unless` means “if not,”
    and `unless /^$/` means “if not ‘beginning then end of line.’” The condition “beginning
    then end of line” is true only for blank lines.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个一行代码通过在每个非空行的末尾添加一个换行符来双倍行距所有非空行。`unless`表示“如果不是”，`unless /^$/`表示“如果不是‘行首到行尾’”。条件“行首到行尾”仅对空行成立。
- en: 'Here’s how this one-liner looks when expanded:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是展开后的这个一行代码的样子：
- en: '[PRE12]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here is a better test, which takes into account spaces and tabs on a line:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个更好的测试，它考虑到了行中的空格和制表符：
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, the line is matched against `\S`—a regular expression sequence that is
    the inverse of `\s`, which matches any whitespace character (including tab, vertical
    tab, space, newline, and carriage return). The inverse of `\s` is any nonwhitespace
    character. The result is that every line with at least one nonwhitespace character
    is double-spaced.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，行与`\S`进行匹配——这是一个正则表达式序列，是`\s`的反向，`\s`匹配任何空白字符（包括制表符、垂直制表符、空格、换行符和回车符）。`\s`的反向是任何非空白字符。结果是，所有包含至少一个非空白字符的行都被双倍行距。
- en: 2.3 Triple-space a file
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.3 将文件设置为三倍行距
- en: 'You can also triple-space a file simply by outputting more newlines at the
    end of each line:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过在每行末尾输出更多的换行符，轻松地将文件设置为三倍行距：
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Or
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE15]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Or
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE16]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: These one-liners are similar to the first one-liner in this chapter, except
    that two newlines are appended after each line.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令与本章中的第一个命令类似，不同之处在于每行末尾添加了两个换行符。
- en: 2.4 N-space a file
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.4 将文件设置为N行间距
- en: '[PRE17]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This one-liner inserts seven newlines after each line. Notice how I’ve used
    `"\n" x 7` to repeat the newline character seven times. The `x` operator repeats
    the value on the left *N* times.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这行命令在每行后插入七个换行符。注意，我使用了`"\n" x 7`来将换行符重复七次。`x`运算符将左侧的值重复*N*次。
- en: For example, the line
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这一行
- en: '[PRE18]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: prints `foofoofoofoofoo`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 打印`foofoofoofoofoo`。
- en: 'As a side note, sometimes when you need to generate a certain amount of data,
    the `x` operator comes in really handy. For example, to generate 1KB of data,
    you could do this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便提一下，有时候当你需要生成一定量的数据时，`x`运算符非常有用。例如，要生成1KB的数据，你可以这样做：
- en: '[PRE19]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This one-liner prints the *a* character 1024 times.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这行命令打印字符* a * 1024次。
- en: 2.5 Add a blank line before every line
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.5 在每行前添加一个空行
- en: '[PRE20]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This one-liner uses the `s/regex/replace/` operator. It substitutes the given
    regular expression with the replacement. In this one-liner, the operator is `s/^/\n/`,
    the regular expression is `^`, and the replacement is `\n`. The `^` pattern matches
    the beginning position of the text, and the `s` operator replaces it with `\n`,
    a newline. As a result, the newline character is inserted before the line. To
    insert something else before the line, simply replace `\n` with the bit to be
    inserted.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这行命令使用了`s/regex/replace/`运算符。它用替代值替换给定的正则表达式。在这行命令中，运算符是`s/^/\n/`，正则表达式是`^`，替代值是`\n`。`^`模式匹配文本的开始位置，而`s`运算符将其替换为`\n`，即换行符。因此，换行符被插入到这一行之前。要插入其他内容，只需将`\n`替换为你要插入的部分。
- en: 2.6 Remove all blank lines
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.6 删除所有空行
- en: '[PRE21]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This one-liner uses the `-n` flag, which tells Perl to assume a different loop,
    other than `-p`, around the program:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这行命令使用了`-n`标志，告诉Perl在程序周围假定一个与`-p`不同的循环：
- en: '[PRE22]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Compare this loop to the one that Perl assumes when you specify `-p`, and you’ll
    see that this loop has no `continue { print or die }` part. In this loop, each
    line is read by the diamond operator `<>` and is placed in the special variable
    `$_`, but it’s not printed! You have to print the line yourself—a useful feature
    if you want to print, modify, or delete lines selectively.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个循环与当你指定`-p`时Perl假定的循环进行比较，你会看到这个循环没有`continue { print or die }`部分。在这个循环中，每一行都由钻石运算符`<>`读取并存储在特殊变量`$_`中，但它不会被打印！你必须自己打印这一行——如果你想选择性地打印、修改或删除行，这是一个非常有用的功能。
- en: In this one-liner, the code is `print unless /^$/`, so the entire Perl program
    becomes
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这行命令中，代码是`print unless /^$/`，所以整个Perl程序变成了：
- en: '[PRE23]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Unraveling this a bit further, you get this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步解析，你得到这个：
- en: '[PRE24]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This one-liner prints all nonblank lines. (You saw the `/^$/` regular expression
    in one-liner 2.2 on page 11.)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这行命令打印所有非空行。（你在第11页的一行命令2.2中看到了`/^$/`正则表达式。）
- en: 'This one-liner also removes all blank lines:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这行命令还删除了所有空行：
- en: '[PRE25]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This one-liner uses the `-l` command-line argument, which automatically chomps
    the input line (basically removes the newline at the end) and appends it back
    at the end of the line when printing. The code specified to the `-e` argument
    is `'print if length'`, which says “print the line if it has some length.” Empty
    lines have a length of 0, so they’re not printed (0 is a false value in Perl,
    so the `if length` condition evaluates to false). All other lines have length
    and are printed. Without `-l`, the string would still have the newline at the
    end and thus be 1 or 2 characters long!^([[1](#ftn.id338042)])
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令使用了`-l`命令行参数，它会自动去掉输入行末尾的换行符（基本上就是去掉末尾的换行），然后在打印时再将其加回到行尾。指定给`-e`参数的代码是`'print
    if length'`，意思是“如果行有内容，就打印”。空行的长度为0，因此不会被打印（在Perl中，0是一个假值，因此`if length`条件会返回假）。所有其他非空行都有长度，并且会被打印。如果没有`-l`，字符串的末尾仍然会有换行符，因此长度会是1或2个字符！^([[1](#ftn.id338042)])
- en: 'Here’s another one-liner to remove all blank lines:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个去除所有空白行的单行命令：
- en: '[PRE26]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This one-liner behaves slightly differently from the previous two. Both `print
    unless /^$/` and `print if length` also print the lines that consist of only spaces
    and/or tabs. Such lines appear to be empty to the eye, and you may want to filter
    them. This one-liner uses `\S` (explained in one-liner 2.2 on page 11), a regular
    expression sequence that matches nonblank characters. Lines containing only spaces
    and/or tabs don’t match `\S` and therefore are not printed.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令与前两个稍有不同。`print unless /^$/`和`print if length`都会打印出仅由空格和/或制表符组成的行。这样的行看起来像是空的，可能需要过滤掉。这个单行命令使用了`\S`（在2.2的单行命令中解释过），这是一个匹配非空字符的正则表达式序列。仅包含空格和/或制表符的行不匹配`\S`，因此不会被打印。
- en: 'As you can see, you can write the same program in many different ways. In fact,
    Perl’s motto is *There’s More Than One Way To Do It*, which is abbreviated as
    *TIMTOWTDI* and pronounced “Tim Toady.” (Fun trivia: Larry Wall, the inventor
    of Perl, uses the handle @TimToady on Twitter and IRC.)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，你可以用很多不同的方式写同样的程序。事实上，Perl的座右铭是*有不止一种方法可以做这件事*，简称*TIMTOWTDI*，发音为“Tim
    Toady”。（有趣的冷知识：Perl的发明者Larry Wall在Twitter和IRC上使用@TimToady作为昵称。）
- en: 2.7 Remove all consecutive blank lines, leaving only one
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.7 删除所有连续的空白行，只留下一个
- en: '[PRE27]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This one-liner is really tricky, isn’t it? First, it doesn’t have any code!
    The `-e` is empty. Next, it has a silly `-00` command-line option that turns *paragraph
    slurp mode* on, meaning Perl reads text paragraph by paragraph, rather than line
    by line. (A paragraph is text between two or more newlines.) The paragraph is
    put into `$_`, and the `-p` option prints it out.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令真的很难理解，不是吗？首先，它没有任何代码！`-e`是空的。接下来，它有一个愚蠢的`-00`命令行选项，它启用了*段落吸入模式*，这意味着Perl按段落而不是按行读取文本。（段落是由两个或更多换行符分隔的文本。）段落被放入`$_`中，并且`-p`选项会打印它。
- en: 'You can even write this in a shorter fashion:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以用更简洁的方式写这个：
- en: '[PRE28]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Here, the code specified to `-e` is `0`, which does nothing.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，指定给`-e`的代码是`0`，它什么也不做。
- en: This is one of my favorite one-liners because if you haven’t seen it before,
    it can be tricky to figure out, and I love mind games. (There’s no code specified
    to `-e`! How can it possibly do something?)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我最喜欢的单行命令之一，因为如果你之前没有见过它，可能很难理解，而我喜欢思考难题。（`-e`没有指定代码！它怎么可能有用？）
- en: 2.8 Compress/expand all blank lines into N consecutive lines
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.8 将所有空白行压缩/扩展为连续的N行
- en: 'Say you have a file with two blank lines after each paragraph, and you wish
    to expand the line spacing between the paragraphs to three lines. To do so, you
    can simply combine one-liners 2.4 and 2.7 like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个文件，每个段落后都有两个空白行，而你希望将段落之间的行距扩展为三行。你可以像这样将2.4和2.7的单行命令结合起来：
- en: '[PRE29]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This one-liner slurps lines paragraph-wise via the `-00` option and then appends
    three newline characters after each paragraph. The code `"\n"x2` prints two newlines,
    which are added to the blank line already at the end of the paragraph.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令通过`-00`选项按段落读取行，然后在每个段落后加上三个换行符。代码`"\n"x2`打印两个换行符，这两个换行符会加到段落末尾已经存在的空白行后面。
- en: In a similar vein, you can also reduce the spacing between paragraphs. Say you’ve
    got a file that for some crazy reason has ten blank lines between paragraphs,
    and you want to compress these blank lines to just three. You can use the same
    one-liner again!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以类似的方式，你也可以减少段落之间的行距。假设你有一个文件，出于某种奇怪的原因，段落之间有十个空白行，而你希望将这些空白行压缩为三行。你可以再次使用相同的单行命令！
- en: 2.9 Double-space between all words
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.9 在所有单词之间加倍行距
- en: '[PRE30]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Here, you use the substitution operator `s` to replace one space “ ” with two
    spaces “ ” globally on each line (the `/g` flag makes the replacement global),
    and you’re done. It’s that simple!
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你使用替代操作符` s`将一个空格“ ”替换为两个空格“ ”，并且每一行都全局替换（`/g`标志使替换全局进行），就这么简单！
- en: 'Here’s an example. Let’s say you have this line of text:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例。假设你有这样一行文本：
- en: '[PRE31]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Running this one-liner increases the spacing between words:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个单行命令会增加单词之间的间距：
- en: '[PRE32]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 2.10 Remove all spacing between words
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.10 删除单词之间的所有空格
- en: '[PRE33]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This one-liner uses the “`+`” regular expression to match one or more spaces.
    When it finds a match, it substitutes it with nothing, globally, which deletes
    all spaces between words.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令使用“`+`”正则表达式来匹配一个或多个空格。当它找到匹配项时，会将其替换为空字符串，并全局删除所有单词之间的空格。
- en: 'If you also want to get rid of tabs and other special characters that might
    add spacing, use the `\s+` regular expression, which means “match a space, a tab,
    a vertical tab, a newline, or a carriage return”:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还想去除可能添加间距的制表符和其他特殊字符，可以使用`\s+`正则表达式，它表示“匹配空格、制表符、垂直制表符、换行符或回车符”：
- en: '[PRE34]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Here’s an example. Let’s say you have this line of text:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例。假设你有这样一行文本：
- en: '[PRE35]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Running this one-liner removes all spaces:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个单行命令会移除所有空格：
- en: '[PRE36]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 2.11 Change all spacing between words to one space
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.11 将所有单词之间的空格更改为一个空格
- en: '[PRE37]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This one-liner is similar to the previous one, except that it replaces one or
    more spaces with just one space.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令与前一个类似，只是它将一个或多个空格替换为一个空格。
- en: 'For example, if you have this line:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你有这样一行：
- en: '[PRE38]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'running this one-liner normalizes the spacing between words to one space:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个单行命令将单词之间的间距标准化为一个空格：
- en: '[PRE39]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 2.12 Insert a space between all characters
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.12 在所有字符之间插入空格
- en: '[PRE40]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Here you match seemingly nothing and replace it with a single space. The nothingness
    actually means “match between characters,” with the result that you insert a space
    between all characters. (The matching includes the beginning and end of the text.)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你匹配看似没有任何东西的地方，并将其替换为一个空格。这个“什么也没有”实际上意味着“字符之间的匹配”，因此你会在所有字符之间插入一个空格。（匹配包括文本的开始和结束。）
- en: 'For example, given this line:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，给定这一行：
- en: '[PRE41]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'running this one-liner produces this result:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个单行命令会产生以下结果：
- en: '[PRE42]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'It might be difficult to see where all the spaces are added, so let’s illustrate
    that by modifying this one-liner to insert a colon between all characters:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 可能很难看到所有空格被添加到哪里，所以我们通过修改这个单行命令来在所有字符之间插入一个冒号来说明这一点：
- en: '[PRE43]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'This will output:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出：
- en: '[PRE44]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: As you can see, spaces (or colons) are also inserted at the beginning and end
    of the text. Also note that the existing spaces count as characters, so they’re
    triple-spaced.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，空格（或冒号）也会插入到文本的开头和结尾。还要注意，现有的空格也算作字符，因此它们是三倍的间距。
- en: '* * *'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: ^([[1](#id338042)]) Windows uses two characters for the newline.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: ^([[1](#id338042)]) Windows使用两个字符表示换行符。
