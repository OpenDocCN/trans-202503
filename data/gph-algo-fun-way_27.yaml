- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">C</samp> <samp class="SANS_Dogma_OT_Bold_B_11">UNION-FIND</samp>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">C</samp> <samp class="SANS_Dogma_OT_Bold_B_11">UNION-FIND</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: Kruskal’s algorithm, randomized maze generation, and single-linkage clustering
    from [Chapter 10](chapter10.xhtml) all use a data structure called <samp class="SANS_TheSansMonoCd_W5Regular_11">UnionFind</samp>
    to represent the disjoint sets of nodes corresponding to the different connected
    components in a graph. This data structure allows the algorithms to efficiently
    (1) determine whether two nodes are already in the same connected component and
    (2) merge two different components. For completeness, this appendix describes
    and provides the code for this data structure.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Kruskal算法、随机迷宫生成和单链聚类都使用一种名为<samp class="SANS_TheSansMonoCd_W5Regular_11">UnionFind</samp>的数据结构来表示图中不同连通分量对应的节点不相交的集合。这个数据结构使得算法能够高效地(1)
    判断两个节点是否已经在同一个连通分量中，以及(2) 合并两个不同的分量。为完整性起见，本附录描述并提供了该数据结构的代码。
- en: We begin by providing a very brief overview of union-find data structures, followed
    by just enough code to implement the algorithms in this book. We encourage interested
    readers to explore additional resources. The “Union-Find” chapter of Daniel Zingaro’s
    *Algorithmic Thinking*, 2nd edition (No Starch Press, 2023), provides an accessible
    introduction to these fascinating data structures as well as additional optimizations.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先简要概述并查集数据结构，然后提供足够的代码以实现本书中的算法。我们鼓励感兴趣的读者进一步探索相关资源。Daniel Zingaro的《Algorithmic
    Thinking》第2版（No Starch Press，2023）中的“并查集”一章，提供了对这些迷人数据结构的易懂介绍，并介绍了额外的优化。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Union-Find Data Structure</samp>
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">并查集数据结构</samp>
- en: The *union-find* data structure (also called a *disjoint sets* data structure)
    is commonly viewed as a list of trees (also called a *forest* of trees). Each
    item is represented as a tree node and each set is encoded as a tree. Items are
    considered to be in the same set if and only if they are in the same tree.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*并查集*数据结构（也叫做*不相交集合*数据结构）通常被视为一组树的列表（也叫做*树的森林*）。每个项表示为树节点，每个集合表示为一棵树。若且仅若两个项处在同一棵树中，则它们被视为在同一个集合中。'
- en: '[Figure C-1](#figC-1) shows an example union-find data structure with 11 items
    organized into three sets: {0, 1, 6, 7, 10}, {3, 5, 9}, {2, 4, 8}. As shown in
    the figure, the trees are not restricted to be binary (at most two children per
    node), nor do they enforce an ordering over the elements.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[图C-1](#figC-1)显示了一个示例的并查集数据结构，包含11个项，分为三组：{0, 1, 6, 7, 10}、{3, 5, 9}、{2, 4,
    8}。如图所示，树并不限于二叉树（每个节点最多有两个子节点），也没有强制对元素进行排序。'
- en: '![The left-most tree has root 0 and nodes 0, 1, 6, 7, and 10\. The middle tree
    has root 5 and nodes 5, 3, and 9\. The right-most tree has root 2 and nodes 2,
    4, and 8.](../images/f0c001.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![最左边的树的根节点是0，包含节点0、1、6、7和10。中间的树的根节点是5，包含节点5、3和9。最右边的树的根节点是2，包含节点2、4和8。](../images/f0c001.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure C-1: Three disjoint
    sets represented as trees</samp>'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图C-1：三个不相交的集合表示为树</samp>
- en: Each set in this data structure is uniquely identified by the index number of
    the root node. The trees in [Figure C-1](#figC-1) have labels 0, 5, and 2 from
    left to right. We can easily retrieve the set label for any item by traversing
    from that item’s node to the root of the tree. For example, we could identify
    the set label for item 9 by progressing from node 9 to node 3 to node 5 and then
    returning 5.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 该数据结构中的每个集合都通过根节点的索引号唯一标识。在[图C-1](#figC-1)中，树从左到右分别标记为0、5和2。我们可以通过从某个节点遍历到该树的根节点来轻松检索该项的集合标签。例如，我们可以通过从节点9经过节点3到节点5，然后返回5来识别项9的集合标签。
- en: We create the union of sets by combining trees. There are a variety of ways
    to append one tree to another. In this appendix, we’ll use the common optimization
    of appending the root node of the tree with fewer nodes to the root node of a
    larger tree. [Figure C-2](#figC-2) shows an example of combining the sets rooted
    at 0 and 2 into a single set. Since the tree rooted at node 2 has fewer nodes,
    we set the parent pointer of node 2 to node 0, effectively adding the subtree
    as a child.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过合并树来创建集合的并集。将一棵树附加到另一棵树上有多种方式。在本附录中，我们将使用常见的优化方法，将节点较少的树的根节点附加到较大树的根节点上。[图C-2](#figC-2)展示了将以
    0 和 2 为根的集合合并为一个集合的示例。由于以节点 2 为根的树包含的节点较少，我们将节点 2 的父指针指向节点 0，实际上将子树作为子节点添加。
- en: '![The combined tree has root node 0\. Node 2 has a parent pointer into node
    0.](../images/f0c002.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![合并后的树的根节点是 0。节点 2 的父指针指向节点 0。](../images/f0c002.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure C-2: Combining two trees</samp>'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图C-2：合并两棵树</samp>
- en: For illustration purposes, in this section we describe a minimalist <samp class="SANS_TheSansMonoCd_W5Regular_11">UnionFind</samp>
    data structure that uses an explicit forest-of-trees implementation to make the
    tree-based operations clear. More efficient optimizations are possible, such as
    array-based implementations of the data structure and the use of path compression
    to reduce tree height.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了便于说明，本节介绍了一种简化的 <samp class="SANS_TheSansMonoCd_W5Regular_11">UnionFind</samp>
    数据结构，它使用显式的森林树实现，使树形操作更为清晰。还可以进行更高效的优化，例如基于数组的实现和使用路径压缩来减少树的高度。
- en: <samp class="SANS_Futura_Std_Bold_B_11">UnionFind</samp>
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">UnionFind</samp>
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">UnionFind</samp> data structure
    partitions elements into different (and disjoint) sets such that each element
    belongs to exactly one set. For Kruskal’s algorithm, these sets represent the
    different connected components within the graph. Nodes within the same component
    are part of the same set.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">UnionFind</samp> 数据结构将元素划分为不同的（且不重叠的）集合，使得每个元素仅属于一个集合。对于
    Kruskal 算法，这些集合表示图中的不同连通组件。同一组件中的节点属于同一个集合。
- en: As discussed in [Chapter 10](chapter10.xhtml), this data structure is powerful
    because it facilitates performing two operations very quickly. The first operation
    is to determine whether two points are in the same set, which is necessary for
    determining if two nodes are already connected. The second operation is merging
    two sets, which is necessary for connecting components.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第10章](chapter10.xhtml)所述，这种数据结构非常强大，因为它能够非常快速地执行两个操作。第一个操作是判断两个点是否在同一个集合中，这对于判断两个节点是否已连接是必要的。第二个操作是合并两个集合，这对于连接组件是必要的。
- en: 'This appendix provides the code for the following functions that make up the
    union-find interface:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录提供了以下函数的代码，这些函数构成了并查集接口：
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">are_disjoint(i, j)</samp>Determines
    whether two elements <samp class="SANS_TheSansMonoCd_W5Regular_11">i</samp> and
    <samp class="SANS_TheSansMonoCd_W5Regular_11">j</samp> are in different sets
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">are_disjoint(i, j)</samp>判断两个元素
    <samp class="SANS_TheSansMonoCd_W5Regular_11">i</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">j</samp>
    是否属于不同的集合
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">union_sets(i, j)</samp>Merges the
    set with element <samp class="SANS_TheSansMonoCd_W5Regular_11">i</samp> and the
    set with element <samp class="SANS_TheSansMonoCd_W5Regular_11">j</samp> into a
    single set
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">union_sets(i, j)</samp>将包含元素 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">i</samp> 的集合与包含元素 <samp class="SANS_TheSansMonoCd_W5Regular_11">j</samp>
    的集合合并为一个集合
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">find_set(i)</samp>Returns a unique
    label for the set containing element <samp class="SANS_TheSansMonoCd_W5Regular_11">i</samp>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">find_set(i)</samp>返回包含元素 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">i</samp> 的集合的唯一标签
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">UnionFindNode</samp>
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">UnionFindNode</samp>
- en: 'Since we only ever need to travel up the tree (rather than down), each node
    only needs to store two pieces of information: its own index number and the pointer
    to its parent. Nodes do not need to store pointers to their children. We can define
    a minimal <samp class="SANS_TheSansMonoCd_W5Regular_11">UnionFindNode</samp> as
    follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只需要向上遍历树（而不是向下），每个节点只需要存储两项信息：它自己的索引号和指向其父节点的指针。节点不需要存储指向子节点的指针。我们可以按如下方式定义一个最简的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">UnionFindNode</samp>：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We initially set the parent of a node to <samp class="SANS_TheSansMonoCd_W5Regular_11">None</samp>
    to indicate that it is a root node.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最初将一个节点的父节点设置为 <samp class="SANS_TheSansMonoCd_W5Regular_11">None</samp>，表示它是一个根节点。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">UnionFind Class</samp>
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">UnionFind 类</samp>
- en: 'Our minimal <samp class="SANS_TheSansMonoCd_W5Regular_11">UnionFind</samp>
    object tracks three pieces of information:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最简 <samp class="SANS_TheSansMonoCd_W5Regular_11">UnionFind</samp> 对象跟踪三项信息：
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">nodes</samp> **(**<samp class="SANS_TheSansMonoCd_W7Bold_B_11">list</samp>**) **A
    list of <samp class="SANS_TheSansMonoCd_W5Regular_11">UnionFindNode</samp> objects
    indexed by their label
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">nodes</samp> **(**<samp class="SANS_TheSansMonoCd_W7Bold_B_11">list</samp>**) **一个按标签索引的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">UnionFindNode</samp> 对象的列表
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">set_sizes</samp> **(**<samp class="SANS_TheSansMonoCd_W7Bold_B_11">list</samp>**) **A
    list that maps the set’s label to its size
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">set_sizes</samp> **(**<samp class="SANS_TheSansMonoCd_W7Bold_B_11">list</samp>**) **一个将集合标签映射到其大小的列表
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">num_disjoint_sets</samp> **(**<samp
    class="SANS_TheSansMonoCd_W7Bold_B_11">int</samp>**) **The number of disjoint
    sets
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">num_disjoint_sets</samp> **(**<samp
    class="SANS_TheSansMonoCd_W7Bold_B_11">int</samp>**) **不相交集合的数量
- en: We use a list to store the nodes because we only need to support contiguous
    integer labels for the algorithms in this book. However, we could support more
    general labels, such as strings, by using a dictionary to map each label to its
    corresponding <samp class="SANS_TheSansMonoCd_W5Regular_11">UnionFindNode</samp>.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">num_disjoint_sets</samp> attribute
    could be computed from the other attributes but is explicitly stored for simplicity.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用列表来存储节点，因为在本书中的算法只需要支持连续的整数标签。然而，通过使用字典将每个标签映射到其对应的 <samp class="SANS_TheSansMonoCd_W5Regular_11">UnionFindNode</samp>，我们也可以支持更通用的标签类型，如字符串。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">num_disjoint_sets</samp> 属性可以通过其他属性计算得到，但为了简便，它被显式存储。
- en: 'Using these attributes, we define a constructor to set up the initial state
    of the union-find data structure:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些属性，我们定义了一个构造函数，用于设置并查集数据结构的初始状态：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The constructor takes the number of items (<samp class="SANS_TheSansMonoCd_W5Regular_11">num_sets</samp>)
    and constructs both the full list of nodes (<samp class="SANS_TheSansMonoCd_W5Regular_11">nodes</samp>)
    and the list of sizes for each set (<samp class="SANS_TheSansMonoCd_W5Regular_11">set_sizes</samp>).
    Since the items all start in disjoint sets, the constructor initializes the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">num_sets</samp> sizes to 1 for each item.
    Finally, it sets the count of disjoint sets (<samp class="SANS_TheSansMonoCd_W5Regular_11">num_disjoint_sets</samp>).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数接受项的数量（<samp class="SANS_TheSansMonoCd_W5Regular_11">num_sets</samp>），并构建完整的节点列表（<samp
    class="SANS_TheSansMonoCd_W5Regular_11">nodes</samp>）和每个集合的大小列表（<samp class="SANS_TheSansMonoCd_W5Regular_11">set_sizes</samp>）。由于所有项最初都在不相交的集合中，构造函数将每个项的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">num_sets</samp> 大小初始化为 1。最后，它设置不相交集合的计数（<samp
    class="SANS_TheSansMonoCd_W5Regular_11">num_disjoint_sets</samp>）。
- en: 'Finding the label of a set corresponds to walking up the tree and returning
    the label of the root node:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 查找集合的标签对应于向上遍历树并返回根节点的标签：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">find_set()</samp> function
    starts by checking the bounds of the label and raising an <samp class="SANS_TheSansMonoCd_W5Regular_11">IndexError</samp>
    if the label is out of bounds. It then starts at the current node ❶ and uses a
    <samp class="SANS_TheSansMonoCd_W5Regular_11">while</samp> loop to walk up the
    tree to the parent. It returns the label of the parent node as the identifier
    for the set.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">find_set()</samp> 函数首先检查标签的边界，如果标签超出范围，则引发
    <samp class="SANS_TheSansMonoCd_W5Regular_11">IndexError</samp>。然后，它从当前节点 ❶ 开始，使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">while</samp> 循环向上遍历树直到父节点。它返回父节点的标签作为集合的标识符。
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">are_disjoint()</samp> function
    uses two calls to <samp class="SANS_TheSansMonoCd_W5Regular_11">find_set()</samp>
    to extract the set labels for each item and test whether they are equal:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">are_disjoint()</samp> 函数使用两次调用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">find_set()</samp> 来提取每个项的集合标签，并测试它们是否相等：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If the set labels are the same, the items must share a root node and thus be
    in the same set.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果集合标签相同，则项必须共享一个根节点，从而属于同一集合。
- en: 'Taking the union of two sets consists of appending the trees:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 取两个集合的并集包含将树连接在一起：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">union_sets()</samp> function
    starts by finding the label for each set and checking whether they are already
    equal to each other ❶. If so, there is nothing to be done and the function returns.
    If not, the function uses the <samp class="SANS_TheSansMonoCd_W5Regular_11">set_sizes</samp>
    list to determine which tree has fewer nodes ❷ and appends the root node of the
    smaller tree as a child of the larger tree’s root node ❸. Finally, the function
    updates the remaining data by computing the new size of the larger tree, setting
    the size entry of the smaller tree to <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>
    (since it is no longer a disjoint set), and updating the number of disjoint sets.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">union_sets()</samp> 函数首先通过查找每个集合的标签并检查它们是否已经相等
    ❶。如果相等，则不需要进行任何操作，函数返回。如果不相等，函数使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">set_sizes</samp>
    列表来确定哪个树的节点较少 ❷，并将较小树的根节点附加到较大树的根节点下 ❸。最后，函数通过计算较大树的新大小来更新剩余数据，将较小树的大小条目设置为 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0</samp>（因为它不再是一个不相交的集合），并更新不相交集合的数量。
