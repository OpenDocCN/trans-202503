- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">23</samp> <samp class="SANS_Dogma_OT_Bold_B_11">BUILDING
    A MINI WEB SERVER</samp>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">23</samp> <samp class="SANS_Dogma_OT_Bold_B_11">构建迷你网页服务器</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: The term *web server* may bring to mind a room full of computer servers connected
    by dozens of cables. However, any device with an IP address can act as a web server,
    including your ESP32 board. Thanks to its onboard Wi-Fi connection and software
    libraries, the board can respond to HTTP requests from web browser clients to
    display your required data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*网页服务器*这个术语可能会让你联想到一个满是计算机服务器和各种电缆的房间。然而，任何拥有 IP 地址的设备都可以充当网页服务器，包括你的 ESP32
    开发板。得益于它的板载 Wi-Fi 连接和软件库，这块开发板可以响应来自网页浏览器客户端的 HTTP 请求，以显示你所需的数据。'
- en: In this chapter, you’ll create your own mini web server to monitor, in real
    time, any information gathered or generated by the ESP32 board, allowing anyone
    with access to the server to review the data captured without any additional software
    or tools. You’ll set up a simple web page using HTML to test and demonstrate the
    framework in this chapter and then build a web server to display ESP32 analog
    and digital input status and then another to display date, time, and temperature
    information.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将创建一个迷你网页服务器，用于实时监控 ESP32 开发板收集或生成的任何信息，允许任何有权限访问服务器的人查看捕获的数据，无需额外的软件或工具。你将使用
    HTML 设置一个简单的网页，以测试并展示本章中的框架，然后构建一个网页服务器来显示 ESP32 模拟输入和数字输入状态，接着再构建一个网页来显示日期、时间和温度信息。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #66: Creating a Basic Text
    Web Server</samp>'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #66：创建一个基本的文本网页服务器</samp>'
- en: In this project, you’ll create a basic text web server. You can use it as a
    framework to display text or other information built with HTML.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本项目中，你将创建一个基本的文本网页服务器。你可以将其作为一个框架，用来展示用 HTML 构建的文本或其他信息。
- en: If you haven’t already, turn to [Chapter 19](chapter19.xhtml) and complete the
    instructions in “Configuring the Arduino IDE for the ESP32” through “Testing the
    ESP32” to get your ESP32 working. Be sure to follow the instructions to set up
    port forwarding, if necessary. You should also have completed “BMP180 Sensors”
    in [Chapter 10](chapter10.xhtml).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有完成，请转到[第 19 章](chapter19.xhtml)，并按照“为 ESP32 配置 Arduino IDE”到“测试 ESP32”部分的说明，确保
    ESP32 正常工作。如果需要，务必按照说明设置端口转发。你还应该完成了[第 10 章](chapter10.xhtml)中的“BMP180 传感器”部分。
- en: 'For hardware, you’ll need only the ESP32 board and matching USB cable. Once
    you’ve connected your ESP32 to your computer, upload the Project #66 sketch, adding
    your Wi-Fi network and name in the appropriate fields as originally explained
    in Project #55 in [Chapter 19](chapter19.xhtml).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '对于硬件，你只需要 ESP32 开发板和相应的 USB 数据线。连接好 ESP32 和计算机后，上传项目 #66 的草图，并在适当的字段中填写你的 Wi-Fi
    网络和名称，这些内容在[第 19 章](chapter19.xhtml)的项目 #55 中已有说明。'
- en: Open the Serial Monitor in the Arduino IDE. You should see the network name
    (SSID) that the ESP32 has connected to, along with its IP address on your local
    network. [Figure 23-1](chapter23.xhtml#fig23-1), shows a connection to IP address
    192.168.20.10.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 Arduino IDE 中的串口监视器。你应该能够看到 ESP32 连接到的网络名称（SSID），以及其在本地网络中的 IP 地址。[图 23-1](chapter23.xhtml#fig23-1)
    显示了连接到 IP 地址 192.168.20.10 的情况。
- en: '![A SCREENSHOT OF SERIAL MONITOR SHOWING THE CONNECTION DETAILS](../images/fig23-1.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![串口监视器截图，显示连接详情](../images/fig23-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 23-1: The Serial Monitor
    output for Project #66</samp>'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 23-1：项目 #66 的串口监视器输出</samp>'
- en: Now open a web browser and enter the IP address for your project in the URL
    field, as shown in [Figure 23-2](chapter23.xhtml#fig23-2).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开一个网页浏览器，在 URL 栏中输入你项目的 IP 地址，如[图 23-2](chapter23.xhtml#fig23-2)所示。
- en: '![A SCREENSHOT OF THE BASIC WEB SERVER IN ACTION](../images/fig23-2.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![基本网页服务器运行截图](../images/fig23-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 23-2: A basic web server
    in action</samp>'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 23-2：基本网页服务器的运行示例</samp>
- en: 'Let’s see how this works:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这是如何工作的：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The sketch first includes the Wi-Fi library and initializes an instance of a
    web server with port number 80\. The client computer will use this port number
    to contact the web server. That is, if you’re using a static IP address, you’ll
    enter the IP address followed by <samp class="SANS_TheSansMonoCd_W5Regular_11">:80</samp>
    in the web browser’s URL field to reach the web server.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 草图首先包含Wi-Fi库并初始化一个端口号为80的Web服务器实例。客户端计算机会使用此端口号与Web服务器进行连接。也就是说，如果你使用的是静态IP地址，你需要在浏览器的URL字段中输入IP地址，并在后面加上<samp
    class="SANS_TheSansMonoCd_W5Regular_11">:80</samp>，以访问Web服务器。
- en: The sketch then declares the required variables, including <samp class="SANS_TheSansMonoCd_W5Regular_11">timeoutTime</samp>,
    the length of time in milliseconds that a client can stay connected to your web
    server. If you plan to allow many clients to use the web server, you may want
    to reduce this number, as the server can deal with only one client request at
    a time.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 草图接着声明所需的变量，包括<samp class="SANS_TheSansMonoCd_W5Regular_11">timeoutTime</samp>，它是客户端可以连接到Web服务器的最大时长（以毫秒为单位）。如果你计划允许多个客户端使用Web服务器，可能需要减少此值，因为服务器一次只能处理一个客户端请求。
- en: In <samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp>, the code
    starts the Serial Monitor and then connects to the Wi-Fi network as usual. Once
    connected, the IP address is displayed in the Serial Monitor and the web server
    starts. In <samp class="SANS_TheSansMonoCd_W5Regular_11">void loop()</samp>, the
    ESP32 waits for an incoming request from an HTTP client (a web browser on a remote
    device) ❶. When it receives such a request, the sketch records the current value
    returned by <samp class="SANS_TheSansMonoCd_W5Regular_11">millis()</samp> to determine
    how long the client stays connected. As long as the amount of time the client
    is connected is less than the limit set earlier, your web server receives the
    client request and sends it to the Serial Monitor for debugging and observational
    purposes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在<samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp>中，代码启动了串口监视器，并像往常一样连接到Wi-Fi网络。连接成功后，IP地址会在串口监视器中显示，并且Web服务器开始启动。在<samp
    class="SANS_TheSansMonoCd_W5Regular_11">void loop()</samp>中，ESP32等待来自HTTP客户端（远程设备上的Web浏览器）的请求
    ❶。当接收到请求时，草图记录由<samp class="SANS_TheSansMonoCd_W5Regular_11">millis()</samp>返回的当前值，以确定客户端连接的时长。只要客户端连接的时间少于之前设置的限制，Web服务器将接收客户端请求，并将其发送到串口监视器，用于调试和观察。
- en: 'When the client request ends, the server sends the following HTTP response
    in HTML ❷:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端请求结束时，服务器发送以下的HTTP响应，格式为HTML ❷：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To send your web page HTML code back to the client web browser, the sketch uses
    <samp class="SANS_TheSansMonoCd_W5Regular_11">client.print()</samp> to send text
    to the web client and then uses <samp class="SANS_TheSansMonoCd_W5Regular_11">.println()</samp>to
    send text followed by a newline character to the client, starting with the page
    initialization. You’ll need to begin with this page initialization line of HTML
    every time you form a web page.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将你的网页HTML代码发送回客户端Web浏览器，草图使用<samp class="SANS_TheSansMonoCd_W5Regular_11">client.print()</samp>将文本发送到Web客户端，然后使用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">.println()</samp>将文本及换行符发送到客户端，开始时包括网页初始化。每次形成网页时，都需要从这个页面初始化的HTML行开始。
- en: 'Next, the sketch sends the contents of the web page in the form of the following
    HTML code:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，草图以以下HTML代码的形式发送网页内容：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The sketch replaces <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">millis</samp>
    in the HTML with the value of <samp class="SANS_TheSansMonoCd_W5Regular_11">millis()</samp>
    by building up a line of text after the header <samp class="SANS_TheSansMonoCd_W5Regular_11"><h1></samp>
    line ❸ into a string and then sending the string with the <samp class="SANS_TheSansMonoCd_W5Regular_11">client.println(textLine)</samp>
    function.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 草图将HTML中的<samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">millis</samp>替换为<samp
    class="SANS_TheSansMonoCd_W5Regular_11">millis()</samp>的值，通过在<header><samp class="SANS_TheSansMonoCd_W5Regular_11"><h1></samp>行之后构建一行文本，将其转换为字符串，然后使用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">client.println(textLine)</samp>函数发送该字符串。
- en: The sketch sends the line to end your web page ❹. As with the page initialization
    code, you’ll always use this same line to end a web page in similar projects.
    Finally, the sketch closes the connection to the client ❺ and the ESP32 awaits
    a new request.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 草图发送结束网页的行 ❹。与网页初始化代码一样，你将在类似的项目中始终使用这一行来结束网页。最后，草图关闭与客户端的连接 ❺，ESP32等待新的请求。
- en: In the next project, you’ll build on the skills you just learned to display
    data relating to the ESP32’s I/O ports on a web page.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个项目中，你将基于刚学到的技能，展示与ESP32的I/O端口相关的数据在网页上。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #67: Creating an ESP32 I/O
    Port Monitor</samp>'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #67：创建一个ESP32 I/O端口监控器</samp>'
- en: This project displays the status of four digital input pins and four analog
    input pins on your ESP32 board. This gives you the framework for a web server
    that displays data from devices with analog outputs read by the ESP32’s analog
    inputs, such as light sensors or potentiometers, and data from devices with simple
    digital outputs, such as motion sensors or door-activated switches. In this case,
    you’ll stimulate these types of sensors with buttons and trimpots.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目展示了ESP32开发板上四个数字输入引脚和四个模拟输入引脚的状态。这为你创建一个Web服务器框架提供了基础，服务器能够显示来自具有模拟输出的设备（例如光传感器或可调电阻）的数据，以及来自具有简单数字输出的设备（例如运动传感器或门控开关）的数据。在这个项目中，你将通过按钮和可调电阻来模拟这些类型的传感器。
- en: 'You will need:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要：
- en: An ESP32 dev board and matching USB cable
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块ESP32开发板和匹配的USB数据线
- en: A solderless breadboard
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块无焊面包板
- en: Assorted jumper wires
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种跳线
- en: Four tactile buttons
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四个触摸按钮
- en: Four 10 kΩ, 0.25 W, 1 percent resistors
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四个10 kΩ，0.25W，1% 精度的电阻
- en: Four 10 kΩ breadboard-compatible trimpots
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四个10 kΩ的面包板兼容型可调电阻
- en: Assemble the circuit as shown in [Figure 23-3](chapter23.xhtml#fig23-3).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图23-3](chapter23.xhtml#fig23-3)所示组装电路。
- en: '![THE SCHEMATIC FOR PROJECT #67](../images/fig23-3.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #67 的原理图](../images/fig23-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 23-3: The schematic
    for Project #67</samp>'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图23-3：项目 #67 的原理图</samp>'
- en: Upload the sketch, adding your Wi-Fi network and name in the fields at the top
    of the sketch, then open the Serial Monitor in the Arduino IDE. The Serial Monitor
    should show the network name (SSID) of the Wi-Fi network to which the ESP32 has
    connected, along with the ESP32’s IP address on your local network.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 上传草图，填写草图顶部的Wi-Fi网络和名称，然后在Arduino IDE中打开串行监视器。串行监视器应该显示ESP32连接的Wi-Fi网络的名称（SSID），以及ESP32在本地网络上的IP地址。
- en: Open this IP address in a web browser using a device on your local network.
    You should be presented with the status website served up by the ESP32\. Adjust
    the trimpots to random positions, hold down one or more buttons in the circuit,
    and then refresh the web browser. The next display should show the values measured
    by the ADC pins and the status of the four digital inputs, as shown in [Figure
    23-4](chapter23.xhtml#fig23-4).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本地网络中的设备在网页浏览器中打开这个IP地址。你应该能看到由ESP32提供的状态网站。调整可调电阻到随机位置，按下电路中的一个或多个按钮，然后刷新网页浏览器。下一个显示应该展示ADC引脚测量的值以及四个数字输入的状态，如[图23-4](chapter23.xhtml#fig23-4)所示。
- en: '![A SCREENSHOT OF THE EXAMPLE OUTPUT FOR PROJECT #67](../images/fig23-4.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #67 示例输出的截图](../images/fig23-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 23-4: Example output
    from Project #67</samp>'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图23-4：项目 #67 的示例输出</samp>'
- en: Unlike the Arduino Uno and compatible boards, whose ADC has a range of 0 through
    1,023 thanks to its 10-bit resolution, the ADC on the ESP32 boards has a range
    of 0 through 4,095, as it uses 12-bit resolution (2^(12) = 4,096). You can also
    see the calculated voltage for the ADC inputs in the last item of data for each
    analog pin’s status on the web page.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 与Arduino Uno及兼容板不同，后者的ADC范围是0到1,023（10位分辨率），ESP32开发板的ADC范围是0到4,095，因为它使用的是12位分辨率（2^(12)
    = 4,096）。你还可以在网页上查看每个模拟引脚状态数据的最后一项，显示ADC输入的计算电压。
- en: 'Let’s see how this works:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它是如何工作的：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Like the previous project, this sketch serves an HTML web page after receiving
    a client request. The only differences are the blocks of code required to deal
    with the I/O values and displaying the results in HTML.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的项目类似，这个草图在接收到客户端请求后会提供一个HTML网页。唯一的不同是需要处理I/O值并在HTML中显示结果的代码块。
- en: The sketch declares variables ❶ used to store the status of each of the eight
    inputs—integer variables for the digital inputs, and floating-point variables
    for the analog inputs. It then uses string variables to store the values from
    the ADC that it will later combine with HTML for the web page display. The main
    web page construction starts ❷ with a large header and some text for the user,
    followed by a horizontal line. The sketch stores the values of the digital inputs
    (1 for HIGH, 0 for LOW) ❸ and then the analog values of the four ADCs, converting
    the latter into voltages ❹.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 草图声明了变量 ❶，用于存储每个输入的状态——数字输入的整型变量，以及模拟输入的浮点型变量。然后，它使用字符串变量存储来自 ADC 的值，这些值稍后将与
    HTML 结合，用于网页显示。网页的主要构建从 ❷ 开始，包含一个大的标题和一些用户文本，后面跟着一条水平线。草图存储数字输入的值（1 代表 HIGH，0
    代表 LOW） ❸，然后是四个 ADC 的模拟值，将后者转换为电压 ❹。
- en: To display the input data on the web page ❺, the sketch tests the status of
    each digital pin, adding the results as text to the string <samp class="SANS_TheSansMonoCd_W5Regular_11">textLine</samp>.
    It displays that text using <samp class="SANS_TheSansMonoCd_W5Regular_11">client.print()</samp>
    and repeats the process for the other three digital input pins. Next, it displays
    the values of each analog input and the matching voltage ❻. It concatenates the
    required HTML text for each line into the string <samp class="SANS_TheSansMonoCd_W5Regular_11">textLin</samp>,
    followed by an HTML <samp class="SANS_TheSansMonoCd_W5Regular_11"></p></samp>
    command to end the paragraph. After the sketch sends the line to end the web page
    ❼, the ESP32 closes the connection and awaits a new client request.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在网页 ❺ 上显示输入数据，草图测试每个数字引脚的状态，将结果作为文本添加到字符串 <samp class="SANS_TheSansMonoCd_W5Regular_11">textLine</samp>
    中。它使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">client.print()</samp> 显示该文本，并对其他三个数字输入引脚重复此过程。接下来，它显示每个模拟输入的值以及相应的电压
    ❻。它将每行所需的 HTML 文本连接到字符串 <samp class="SANS_TheSansMonoCd_W5Regular_11">textLin</samp>，然后跟随一个
    HTML <samp class="SANS_TheSansMonoCd_W5Regular_11"></p></samp> 命令来结束段落。在草图发送该行以结束网页
    ❼ 后，ESP32 关闭连接并等待新的客户端请求。
- en: Throughout the code, the sketch uses the function <samp class="SANS_TheSansMonoCd_W5Regular_11">String()</samp>
    to convert an integer or floating-point value to text to add that value to a larger
    string variable. This is the key to displaying data generated by the sketch within
    an HTML web page.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个代码中，草图使用函数 <samp class="SANS_TheSansMonoCd_W5Regular_11">String()</samp>
    将整数或浮点值转换为文本，以将该值添加到更大的字符串变量中。这是将草图生成的数据显示在 HTML 网页中的关键。
- en: For more practice in displaying sensor data on a web page, you’ll display more
    types of data on the server web page in the next project.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更多地练习在网页上显示传感器数据，你将在下一个项目中在服务器网页上显示更多类型的数据。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #68: Building a Time and Weather
    Server</samp>'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #68：构建时间和天气服务器</samp>'
- en: This project builds on your existing knowledge to create a web server that displays,
    on request, the current time, date, temperature, and air pressure at sea level.
    This is a good example of displaying data from multiple sources on one web page.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目基于你现有的知识，创建一个能够根据请求显示当前时间、日期、温度和海平面气压的网页服务器。这是一个很好的示例，展示了如何在一个网页上显示来自多个源的数据。
- en: 'You will need:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要：
- en: An ESP32 dev board and matching USB cable
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块 ESP32 开发板和匹配的 USB 数据线
- en: A solderless breadboard
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块无焊接面包板
- en: Assorted jumper wires
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种跳线
- en: A BMP180 temperature and air pressure sensor board
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块 BMP180 温度和气压传感器板
- en: Assemble the circuit as shown in [Figure 23-5](chapter23.xhtml#fig23-5).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 按照 [图 23-5](chapter23.xhtml#fig23-5) 所示组装电路。
- en: '![THE SCHEMATIC FOR PROJECT #68](../images/fig23-5.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #68 的原理图](../images/fig23-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 23-5: The schematic
    for Project #68</samp>'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 23-5：项目 #68 的原理图</samp>'
- en: 'Upload the Project #68 sketch, adding your Wi-Fi network and name in the fields
    at the top of the code as usual, then open the Serial Monitor in the Arduino IDE.
    The Serial Monitor should display the network name (SSID) that the ESP32 has connected
    to, along with its IP address on your local network.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '上传项目 #68 的草图，像往常一样在代码顶部的字段中添加你的 Wi-Fi 网络和名称，然后在 Arduino IDE 中打开串口监视器。串口监视器应该显示
    ESP32 连接的网络名称（SSID），以及它在本地网络中的 IP 地址。'
- en: As discussed in “Network Time Protocol” in [Chapter 21](chapter21.xhtml), you
    may want to change the network time server IP address and the time zone offset
    to suit your location.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第 21 章](chapter21.xhtml)中“网络时间协议”部分所讨论的，你可能需要根据自己的位置更改网络时间服务器的 IP 地址和时区偏移量。
- en: Open the IP address in a web browser using a device on your local network. You
    should see the status website served up by the ESP32, as shown in [Figure 23-6](chapter23.xhtml#fig23-6).
    Refresh the browser to view the latest information at any given time.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本地网络中的设备在网页浏览器中打开 IP 地址。你应该能看到由 ESP32 提供的状态网站，如[图 23-6](chapter23.xhtml#fig23-6)所示。刷新浏览器以随时查看最新信息。
- en: '![A SCREENSHOT OF THE EXAMPLE OUTPUT FROM PROJECT #68](../images/fig23-6.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #68 示例输出的屏幕截图](../images/fig23-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 23-6: Example output
    from Project #68</samp>'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 23-6：项目 #68 的示例输出</samp>'
- en: 'Let’s see how this works:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它是如何工作的：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The requirements to serve a web page are the same as with the previous project;
    only the code required for the recorded data and display is different. The sketch
    includes the required libraries and starts instances of the Wi-Fi server and the
    Network Time Protocol client.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 提供网页的要求与之前的项目相同；只不过所需的代码不同，用于记录数据和显示的部分不同。草图包括了所需的库，并启动了 Wi-Fi 服务器和网络时间协议客户端实例。
- en: As in previous projects, the sketch connects to the local-area network Wi-Fi
    and displays the connection details on the Serial Monitor. When a client request
    is received, the ESP32 board sends the web server HTML to the client with the
    first piece of data (the current time) requested from the network time server
    ❶ and then sends the time to the web page with the <samp class="SANS_TheSansMonoCd_W5Regular_11">client.print()</samp>
    function. Next, the sketch retrieves the day of the week ❷, determines the name
    of the day with a <samp class="SANS_TheSansMonoCd_W5Regular_11">switch…case</samp>
    function, and sends all this information to the client.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的项目一样，草图连接到本地局域网 Wi-Fi，并在串口监视器上显示连接详情。当收到客户端请求时，ESP32 板发送网页 HTML 给客户端，并请求网络时间服务器中的第一个数据（当前时间）
    ❶，然后通过 <samp class="SANS_TheSansMonoCd_W5Regular_11">client.print()</samp> 函数将时间发送到网页。接下来，草图检索星期几
    ❷，通过 <samp class="SANS_TheSansMonoCd_W5Regular_11">switch…case</samp> 函数确定星期几的名称，并将所有这些信息发送给客户端。
- en: The sketch stores the full date in the string <samp class="SANS_TheSansMonoCd_W5Regular_11">dateString</samp>
    ❸. The date values (day of month, month, and year) are extracted into individual
    string variables so the sketch can use <samp class="SANS_TheSansMonoCd_W5Regular_11">client.print()</samp>
    to send them as part of the HTML.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 草图将完整的日期存储在字符串 <samp class="SANS_TheSansMonoCd_W5Regular_11">dateString</samp>
    ❸ 中。日期值（日期、月份和年份）被提取到各自的字符串变量中，以便草图可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">client.print()</samp>
    将它们作为 HTML 的一部分发送出去。
- en: The code adds a horizontal line for a neater display ❹ and then retrieves and
    displays the temperature ❺ and air pressure at sea level ❻. Finally, it completes
    the web page ❼, and the response to the client request is finished.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 代码添加了一条水平线以便于更整洁的显示 ❹，然后检索并显示海平面的温度 ❺ 和气压 ❻。最后，完成网页 ❼，客户端请求的响应也完成了。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">继续前进</samp>
- en: In this chapter, you learned to create web pages that can display any data you
    can gather or calculate with devices used alongside an ESP32\. From simple weather
    reports to data from sensors in a laboratory, you can put any of this data on
    the web for you or others to use.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了创建网页，可以显示任何你能通过与 ESP32 一起使用的设备收集或计算的数据。从简单的天气报告到实验室传感器数据，你可以将这些数据放到网页上，供自己或他人使用。
- en: The next chapter covers a final IoT skill set, demonstrating how to use an ESP32-controlled
    digital camera for surveillance or fun.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍一个最终的 IoT 技能集，展示如何使用 ESP32 控制的数码相机进行监控或娱乐。
