- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Graphics
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 图形
- en: '![g11001](image_fi/502680c11/g11001.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![g11001](image_fi/502680c11/g11001.png)'
- en: When people on the Android team say “graphics,” they may mean vastly different
    things, because there are many layers of graphics functionality that are implemented
    by very distinct teams for very different reasons. For example, there are 3D graphics
    systems using OpenGL ES,^([1](#c11-footnote-1)) and more recently, Vulkan, for
    supporting anything from games to mapping applications to Virtual Reality to Augmented
    Reality. There are graphics capabilities in the UI toolkit, which is responsible
    for drawing things like text, shapes, lines, and images, so that application developers
    can populate their user interfaces with, well, graphics. And then there is the
    lowest level of graphics on the system which provides the fundamental capability
    for pixels and windows to appear on the screen.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Android 团队的人说“图形”时，他们可能指的是完全不同的内容，因为图形功能有很多层次，这些功能由不同的团队实现，目的也各不相同。例如，有使用
    OpenGL ES 的 3D 图形系统^[1](#c11-footnote-1)，以及最近的 Vulkan，支持从游戏到地图应用、虚拟现实和增强现实等各种应用。还有
    UI 工具包中的图形功能，负责绘制文本、形状、线条和图像等内容，以便应用开发者能够用图形填充他们的用户界面。然后就是系统中最低层的图形功能，它提供了像素和窗口显示在屏幕上的基本能力。
- en: We’ll start with this lowest level of graphics, which came about through the
    work of Mathias Agopian, another hire from Be and PalmSource, who started on the
    Android team in late 2006.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从图形的最低层开始，这一层是通过 Mathias Agopian 的工作而实现的，他是从 Be 和 PalmSource 招募的另一位成员，于 2006
    年底加入 Android 团队。
- en: '![](image_fi/502680c11/f11001.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c11/f11001.png)'
- en: 'A vastly simplified view of Android’s graphics system. Applications call into
    the Canvas API to draw things. The Canvas API is implemented underneath by the
    Skia rendering engine, which turns things like shapes and text into pixels. SurfaceFlinger
    provides a buffer, or surface, into which these pixels are drawn. SurfaceFlinger
    calls into OpenGL ES, a low-level graphics API that renders triangles. OpenGL
    ES uses PixelFlinger to draw the buffer: Note that PixelFlinger was eventually
    replaced by a GPU (Graphics Processing Unit) when GPUs became standard in smartphones.
    Finally, all of the surfaces that need to be drawn onto the screen (including
    the foreground application as well as the status and navigation bars) are composed
    together in the Hardware Composer and then displayed on the screen for the user
    to see.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一个极度简化的 Android 图形系统视图。应用程序调用 Canvas API 来绘制内容。Canvas API 由 Skia 渲染引擎实现，将形状和文本等转化为像素。SurfaceFlinger
    提供了一个缓冲区或表面，像素被绘制到其中。SurfaceFlinger 调用 OpenGL ES，这是一个低级图形 API，用于渲染三角形。OpenGL ES
    使用 PixelFlinger 来绘制缓冲区：注意，当 GPU（图形处理单元）成为智能手机的标准配置后，PixelFlinger 最终被 GPU 替代。最后，所有需要显示在屏幕上的表面（包括前景应用程序以及状态栏和导航栏）都在硬件合成器中合成，然后显示在屏幕上供用户查看。
- en: Mathias Agopian and Android Graphics
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mathias Agopian 和 Android 图形
- en: Software rendering, in my opinion, was going to die.
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在我看来，软件渲染注定会消亡。
- en: ''
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Mathias Agopian
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —Mathias Agopian
- en: Mathias is a calm and quiet person who arrives at the office late, stays very
    late, and focuses almost exclusively on coding (avoiding email and meetings as
    much as possible).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Mathias 是一个冷静、安静的人，他总是很晚到办公室，工作到很晚，几乎完全专注于编码（尽量避免电子邮件和会议）。
- en: In the early days, Mathias had a temper^([2](#c11-footnote-2)) that would occasionally
    surface. Something would upset him and he would storm out, sometimes staying away
    for several days or even weeks. In one episode, Mathias was upset at Brian Swetland.
    He threw his phone and marched out of the office, only to return a few minutes
    later to ask for his phone back, since he needed its memory card.^([3](#c11-footnote-3))
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期，Mathias 有时会显露出脾气^[2](#c11-footnote-2)，有时会因为某些事情而生气，气冲冲地离开办公室，甚至几天或几周都不回来。有一次，Mathias
    对 Brian Swetland 生气，他把手机摔了出去，愤怒地走出办公室，几分钟后又返回，要求拿回手机，因为他需要手机的内存卡^[3](#c11-footnote-3)。
- en: Mathias spent his childhood learning how to program various computers, from
    the Armstrad CPC to several Atari computers, to the BeBox. He wrote graphics and
    audio applications for his Atari Falcon (including a sound tracker app for the
    Falcon which he sold under the name Crazy Music Machine^([4](#c11-footnote-4)))
    and he became known^([5](#c11-footnote-5)) for programming articles that he wrote
    for French computer magazines. He also, as a hobby, wrote Epson printer drivers
    for the Atari and the BeBox, which those companies shipped with their systems.
    His work on the Be printer drivers resulted in a job; he left France to join Be
    in 1999.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Mathias 从小就学习如何编程各种计算机，从 Armstrad CPC 到多个 Atari 计算机，再到 BeBox。他为他的 Atari Falcon
    写了图形和音频应用（包括一个为 Falcon 编写的音轨应用，他以 Crazy Music Machine^([4](#c11-footnote-4)) 的名义出售），并且他因撰写关于编程的文章而在法国的计算机杂志中出名。他还将写
    Epson 打印机驱动程序作为爱好，开发了 Atari 和 BeBox 的打印机驱动，这些驱动程序被这些公司随系统一起发布。他在 Be 打印机驱动方面的工作为他带来了工作机会；他于
    1999 年离开法国，加入了 Be。
- en: Mathias stayed at Be until they were acquired by Palm and continued on with
    the rest of the team at PalmSource, working mostly on graphics software, until
    he decided he’d had enough of wherever PalmSource was going. He left around the
    same time as Joe Onorato and joined Google to work on Android in late 2005.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Mathias 曾在 Be 工作，直到该公司被 Palm 收购，并继续与 PalmSource 的其余团队一起工作，主要负责图形软件，直到他决定离开，觉得
    PalmSource 的方向不适合他。他在 2005 年底与 Joe Onorato 一起离开，加入 Google 开始从事 Android 开发。
- en: The Basics
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础知识
- en: When Mathias joined Android, he started on system fundamentals. The operating
    system essentially didn’t exist yet, so everyone who joined at that time helped
    out with building basic necessities.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Mathias 加入 Android 时，他从操作系统基础开始。那个时候操作系统基本上还不存在，所以所有加入的成员都参与了构建基本需求的工作。
- en: For example, the platform didn’t yet have core data structures for C++ (Vector
    and HashMap). In a desktop or server world, these pieces wouldn’t have been needed,
    because they come with standard libraries that developers typically use. But on
    Android, especially at that time, the platform only included code and libraries
    that were absolutely necessary. Adding standard libraries would have pulled in
    too many unnecessary pieces, taking up storage space that simply wasn’t available.
    So Mathias wrote versions of these data structures that everyone could use for
    Android development.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，平台当时还没有 C++ 的核心数据结构（如 Vector 和 HashMap）。在桌面或服务器环境中，这些结构通常不需要，因为它们包含在标准库中，开发者通常会使用这些库。但在
    Android 上，尤其是在当时，平台仅包括绝对必要的代码和库。添加标准库会引入太多不必要的部分，占用存储空间，而那时的存储空间有限。因此，Mathias
    为 Android 开发编写了这些数据结构的版本，大家都可以使用。
- en: Mathias also worked on optimizing memcpy^([6](#c11-footnote-6)) and memset,
    low-level utilities for manipulating chunks of memory. Memcpy is a critical piece
    of software used by the entire system,^([7](#c11-footnote-7)) and is often a performance
    bottleneck in memory-intensive situations. Bob Lee commented on this work, “He
    hand-wrote this assembly language for memcpy, made it insanely fast and had a
    huge performance improvement. It was brilliant.”
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Mathias 还优化了 memcpy^([6](#c11-footnote-6)) 和 memset，这些是用于处理内存块的低级工具。Memcopy
    是系统中至关重要的软件，整个系统都在使用它^([7](#c11-footnote-7))，它通常在内存密集型的情况下成为性能瓶颈。Bob Lee 评论了这项工作：“他为
    memcpy 手写了汇编语言，使其速度非常快，并带来了巨大的性能提升。真是太聪明了。”
- en: PixelFlinger^([8](#c11-footnote-8))
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PixelFlinger^([8](#c11-footnote-8))
- en: Mathias’s main goal for the graphics system was to implement something he called
    SurfaceFlinger, which was needed to display the buffers (*surfaces*) full of graphics
    that were produced by all of the applications on the system. But this system depended
    on lower-level functionality that did not yet exist, so he started there instead.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Mathias 为图形系统设定的主要目标是实现他所称之为 SurfaceFlinger 的功能，这一功能用于显示由系统中所有应用生成的图形缓冲区（*表面*）。但是，这个系统依赖于一些尚未存在的低级功能，因此他从这些功能开始开发。
- en: One of Mathias’s assumptions was that SurfaceFlinger would need a GPU^([9](#c11-footnote-9))
    to do its work; it would use OpenGL ES to perform the low-level operations required
    to get the graphics data from the application into buffers, and then to display
    those buffers onto the screen. The problem was, Android wasn’t running on a device
    with a GPU. The device that Android was targeting at that time, and all the way
    through the launch of the SDK, was Sooner, which had no GPU and therefore no OpenGL
    ES.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Mathias 的假设之一是，SurfaceFlinger 需要一个 GPU^([9](#c11-footnote-9)) 来完成工作；它将使用 OpenGL
    ES 执行从应用程序获取图形数据到缓冲区并将其显示到屏幕上的低级操作。问题是，当时 Android 并没有运行在带有 GPU 的设备上。Android 在那时及整个
    SDK 发布之前所面向的设备是 Sooner，它没有 GPU，因此也没有 OpenGL ES。
- en: But Mathias saw a future in which GPUs would be standard on smartphones. “Before
    joining Android, I had a little bit of experience with mobile platforms. And it
    was really, really obvious to me that in the future we would be rendering using
    hardware.^([10](#c11-footnote-10)) Software rendering, in my opinion, was going
    to die.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但 Mathias 看到的未来是，GPU 将成为智能手机的标准。“在加入 Android 之前，我有一点移动平台的经验。我非常明确地意识到，未来我们将使用硬件进行渲染。^([10](#c11-footnote-10))
    在我看来，软件渲染将会消亡。”
- en: '“My idea was: I want everything to be ready for when we get hardware. The problem
    is, we don’t have hardware. We don’t really know when it’s going to happen. So
    I thought, I’m in charge of graphics, I’m going to pretend I have a GPU. So I
    wrote a GPU, essentially. This way, I was able to write SurfaceFlinger using ‘GL.’
    It was using real OpenGL ES, but it defaulted to software. And then, little by
    little, real hardware started to show up.”'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: “我的想法是：我要让一切为我们拥有硬件做好准备。问题是，我们没有硬件。我们也不知道何时会发生。所以我想，我负责图形，我就假装自己有 GPU。于是我本质上写了一个
    GPU。通过这种方式，我能够使用‘GL’来编写 SurfaceFlinger。它使用的是实际的 OpenGL ES，但默认使用软件。然后，渐渐地，真正的硬件开始出现了。”
- en: When Mathias said that he wrote a GPU, he meant that he wrote a *virtual* GPU;
    software that performed the same work as a GPU would, but in software instead
    of dedicated hardware. A GPU is not magical; the dedicated hardware in a GPU is
    not doing anything that cannot be done by software running on the CPU instead.
    It just does that job much faster, since it has hardware that is optimized for
    graphics operations.^([11](#c11-footnote-11)) In writing his fake GPU, Mathias
    provided a software layer to handle graphics operations normally handled by a
    GPU, translating those commands to low-level information that the existing Android
    display system could understand.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Mathias 说他写了一个 GPU 时，他的意思是他写了一个 *虚拟* GPU；即软件，它执行与 GPU 相同的工作，但由软件代替专用硬件。GPU
    不是魔法；GPU 中的专用硬件并没有做任何 CPU 上的软体无法完成的事情。它只是做得更快，因为它有为图形操作优化的硬件。^([11](#c11-footnote-11))
    在编写这个假 GPU 时，Mathias 提供了一个软件层，来处理通常由 GPU 处理的图形操作，将这些命令转化为现有 Android 显示系统可以理解的低级信息。
- en: The OpenGL ES layer that he wrote issued commands to a lower layer that handled
    drawing textured triangles,^([12](#c11-footnote-12)) called PixelFlinger. This
    extra layer of abstraction of using OpenGL ES on top of PixelFlinger added work
    and overhead and wouldn’t have made sense if it were the only device Android was
    targeting. But in a world where Android was aiming at the future, and the future
    almost certainly included GPU hardware, this meant that SurfaceFlinger had to
    be written only once, to target OpenGL ES. As soon as the future matched Mathias’s
    vision and GPUs were available, it would continue working as-is, but faster (using
    hardware, instead of the software-based PixelFlinger).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 他编写的 OpenGL ES 层向一个处理纹理三角形绘制的下层发出了命令，^([12](#c11-footnote-12)) 该下层叫做 PixelFlinger。将
    OpenGL ES 放置在 PixelFlinger 之上这一额外的抽象层增加了工作量和开销，如果 Android 只面向单一设备，这种做法是没有意义的。但在一个
    Android 面向未来的世界中，未来几乎肯定包括 GPU 硬件，这意味着 SurfaceFlinger 只需要编写一次，目标是 OpenGL ES。当未来与
    Mathias 的愿景匹配且 GPU 可用时，它将继续按原样工作，但速度会更快（使用硬件，而不是基于软件的 PixelFlinger）。
- en: Mathias’s approach of writing PixelFlinger’s virtual GPU was an example of the
    *product versus platform* approach that Android took in the early days.^([13](#c11-footnote-13))
    A *product* approach, where the team simply got the initial phone to work as quickly
    as possible, wouldn’t have taken as long. But the *platform* approach that Mathias
    took, building up layers of software that scaled way beyond that initial release,
    proved useful to Android in the long run. “It was necessary to go through that
    step to be ready for when the hardware was there. But also to convince people
    that that’s what needed to happen.”
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Mathias 编写 PixelFlinger 虚拟 GPU 的方法是 Android 初期采取的*产品与平台*方法的典型例子。^([13](#c11-footnote-13))
    *产品*方法是团队尽可能快速让初始手机工作，这样做不会花费太多时间。但 Mathias 采用的*平台*方法，通过构建超越初始发布版本的软件层次，最终证明对
    Android 长期有利。“必须经历那一步，以便为硬件到位时做好准备。同时，也为了说服人们，这是必须要做的。”
- en: This long-term approach to the graphics system, and other parts of the platform,
    was an element of the team’s approach in those early days. Overall, the team was
    very scrappy, preferring small, hard-working teams, and making quick, pragmatic
    decisions as they drove toward 1.0\. But several of the decisions that the team
    made early on, and the extra work those required, happened because they were the
    right thing for the future of the platform, even though that future wasn’t assured.
    So although the team was focused on the goal of shipping 1.0, they were trying
    to do so with a platform that would live beyond that single ship date, into the
    future that Android eventually achieved.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这种长期的图形系统方法以及平台的其他部分，正是团队在早期阶段所采用的一种策略。总体而言，团队非常务实，倾向于组成小型而高效的团队，并在推进 1.0 的过程中做出快速且务实的决策。但团队早期做出的一些决策及其所需的额外工作，正是因为它们是平台未来发展的正确选择，尽管那个未来并不确定。因此，尽管团队的目标是发布
    1.0，他们仍然力图构建一个能够超越这个单一发布日期的、面向未来的 Android 平台。
- en: PixelFlinger had a limited shelf life in terms of Android phones. It was critical
    for the Sooner device that the team used during early development, but the G1
    that shipped with 1.0 already had the GPU capabilities^([14](#c11-footnote-14))
    that Mathias had wanted and predicted. The importance of PixelFlinger wasn’t in
    the capabilities that it provided for specific products, but in what it meant
    for the platform, to build in forward-looking capabilities that drove an architecture
    and ecosystem into a hardware-accelerated future.^([15](#c11-footnote-15))
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: PixelFlinger 在 Android 手机中的生命周期是有限的。它对早期开发中使用的 Sooner 设备至关重要，但搭载 1.0 的 G1 已经具备了
    Mathias 所期望并预测的 GPU 能力^([14](#c11-footnote-14))。PixelFlinger 的重要性不在于它为特定产品提供的功能，而在于它对平台的意义，构建了能够推动架构和生态系统走向硬件加速未来的前瞻性能力。^([15](#c11-footnote-15))
- en: SurfaceFlinger
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SurfaceFlinger
- en: Once PixelFlinger and OpenGL ES were working, Mathias could implement SurfaceFlinger.
    Applications draw their graphics objects (buttons, text, images—whatever) into
    a buffer in memory and SurfaceFlinger posts that buffer to the screen, visible
    to the user. SurfaceFlinger was essentially the glue between the higher-level
    graphics operations happening in applications and the OpenGL ES layer that he
    had written previously, responsible for copying buffers around and displaying
    them to the user. The separation of app rendering from displaying the pixels on
    the screen was intentional; one of Mathias’s design goals was to enable smooth
    graphics by ensuring that no app could cause rendering performance problems for
    any other app (this was related to Android’s overall approach to security on the
    platform, where there was always a clear separation of applications from each
    other). So applications would draw into buffers, and SurfaceFlinger would take
    it from there.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 PixelFlinger 和 OpenGL ES 正常工作，Mathias 就可以实现 SurfaceFlinger。应用程序将图形对象（按钮、文本、图像——等等）绘制到内存中的缓冲区，然后
    SurfaceFlinger 将该缓冲区发布到屏幕上，用户可见。SurfaceFlinger 本质上是应用程序中发生的高级图形操作与他之前编写的 OpenGL
    ES 层之间的胶合剂，负责复制缓冲区并将其显示给用户。应用程序渲染和屏幕像素显示的分离是有意为之；Mathias 的设计目标之一是通过确保没有应用程序能够导致其他应用程序的渲染性能问题，从而实现平滑的图形渲染（这与
    Android 平台的整体安全策略有关，其中始终保持应用程序之间的清晰隔离）。因此，应用程序会将图形绘制到缓冲区中，SurfaceFlinger 会负责后续处理。
- en: Hardware Composer
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件合成器
- en: The other part of the graphics system that Mathias wrote was the Hardware Composer
    (HWC). SurfaceFlinger handles drawing UI graphics into a window on the screen.
    But there are several windows that need to be combined together to make up the
    final pixels on the screen.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Mathias编写的图形系统的另一部分是硬件合成器（HWC）。SurfaceFlinger负责将UI图形绘制到屏幕上的窗口中。但有几个窗口需要组合在一起，以生成屏幕上的最终像素。
- en: '![](image_fi/502680c11/f11002.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c11/f11002.png)'
- en: A sample Android screen, showing the typical status bar, navigation bar, and
    home screen
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的Android屏幕示例，显示了状态栏、导航栏和主屏幕
- en: Think about a typical Android screen that the user sees. There is a status bar
    (where the current time and various status and notification icons show up), a
    navigation bar (where the back and home buttons reside), and finally the actual
    foreground application (or the home screen). There may be other windows as well,
    like popup menus on top of the foreground application.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下用户看到的典型Android屏幕。上面有一个状态栏（显示当前时间和各种状态及通知图标）、一个导航栏（包含返回和主页按钮），最后是实际的前景应用程序（或主屏幕）。也可能有其他窗口，如在前景应用程序上方的弹出菜单。
- en: All of these are separate windows, often running in separate processes. For
    example, the navigation and status bars are managed by the system process, whereas
    the application window is owned by the application process. All of these windows
    need to be displayed together in some sensible way, which is the job of the Hardware
    Composer.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都是独立的窗口，通常运行在不同的进程中。例如，导航栏和状态栏由系统进程管理，而应用程序窗口则由应用程序进程拥有。这些窗口需要以某种合理的方式一起显示，这是硬件合成器的工作。
- en: Mathias’s idea for HWC was to use specialized graphics hardware called hardware
    overlays,^([16](#c11-footnote-16)) which provide display memory dedicated to each
    application, avoiding the overhead of all applications sharing the same video
    memory. Using overlay hardware also saved power and provided higher performance
    for applications. By using dedicated overlay hardware, the system avoided using
    the power-hungry GPU for these simple and frequent windowing operations. Also,
    using overlays left the GPU available for use by applications,^([17](#c11-footnote-17))
    for accelerating games or other graphics-intensive operations.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Mathias提出的HWC方案是使用专用图形硬件，称为硬件覆盖层，^([16](#c11-footnote-16)) 该硬件为每个应用程序提供专用的显示内存，避免了所有应用程序共享同一视频内存的开销。使用覆盖层硬件还节省了功耗，并为应用程序提供了更高的性能。通过使用专用的覆盖层硬件，系统避免了使用耗电量较大的GPU来处理这些简单且频繁的窗口操作。此外，使用覆盖层使得GPU可以被应用程序使用，^([17](#c11-footnote-17))
    以加速游戏或其他图形密集型操作。
- en: Rather than drawing each of these windows manually on the screen, or telling
    the GPU to draw them through OpenGL ES, the HWC would send each of the windows
    to a different overlay. The display hardware would then compose these overlays
    together onto the screen to make it all look like one seamless screen of information,
    rather than the several completely different processes that they actually are.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 他们的解决方案不是手动在屏幕上绘制每一个窗口，或者通过OpenGL ES告诉GPU来绘制它们，而是HWC将每个窗口发送到不同的覆盖层。然后显示硬件将这些覆盖层合成到屏幕上，使其看起来像是一个无缝的信息屏幕，而不是实际上是几个完全不同的进程。
- en: The problem was that overlays were difficult to use in practice, since every
    device tended to have different numbers and capabilities of overlays. But given
    the GPU limitations of the G1, plus relatively good overlay support on that device,
    Mathias and Jason Sams came up with a novel approach. Instead of trying to handle
    the infinite variations of overlays directly in HWC, their software would tell
    the underlying hardware what HWC needed and either the hardware could support
    their requirements or HWC would back off to using OpenGL ES. Over time, hardware
    vendors saw the benefit of handling these overlay operations directly and it became
    an area for vendors to offer extra performance on their devices for this critical
    area of the platform.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于，覆盖层在实际使用中很难操作，因为每个设备的覆盖层数量和功能都不相同。但是，考虑到G1的GPU限制，以及该设备上相对较好的覆盖层支持，Mathias和Jason
    Sams提出了一种创新的解决方案。与其直接在HWC中处理覆盖层的无限变化，他们的软件会告诉底层硬件HWC需要什么，硬件要么支持他们的要求，要么HWC会退回使用OpenGL
    ES。随着时间的推移，硬件厂商看到了直接处理这些覆盖层操作的好处，并将其作为在平台这个关键领域为设备提供额外性能的一个方向。
- en: Mike Reed and Skia
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mike Reed和Skia
- en: 'All of Mathias’s work was predicated on having something to display on the
    screen: graphics content from the applications. The system for applications to
    draw graphics content for their UIs also needed to be created. For that, Android
    used a rendering system called Skia that was acquired early on from Mike Reed.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Mathias 的所有工作都基于需要在屏幕上展示某些内容：应用程序的图形内容。为应用程序绘制图形内容的系统也需要被创建。为此，Android 使用了一个名为
    Skia 的渲染系统，这个系统最初是从 Mike Reed 那里收购的。
- en: If “serial graphics entrepreneur” is a real thing, that’s what Mike Reed is.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果“连续的图形创业者”真的是一个存在的概念，那么 Mike Reed 就是其中之一。
- en: Mike started programming late in life, at least compared to many of the early
    Android engineers. Mike got college degrees in science and math. But in 1984,
    the original Macintosh was released and showed up on his campus. “That changed
    everything. I wanted to do graphics, because that’s what the Mac was really showing
    off. So I got a math degree, but taught myself programming.”
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Mike 比许多早期的 Android 工程师晚才开始编程，至少与他们相比是这样。Mike 获得了科学和数学的大学学位。但 1984 年，原版 Macintosh
    发布，并出现在他的校园里。“那一切都改变了。我想做图形设计，因为 Mac 正是展示了这一点。所以我拿到了数学学位，但自学了编程。”
- en: Mike managed to get hired at Apple after grad school (“I just squeaked into
    that job”), where he met Cary Clark, future co-founder of Skia.^([18](#c11-footnote-18))
    After several years at Apple, Mike left and started HeadSpin, creating a game
    engine used by CD-ROM games. HeadSpin was acquired by Cyan, makers of the game
    *Myst*, and Mike left to start a new graphics technology company called AlphaMask.
    AlphaMask was acquired by Openwave, a company providing browser software for mobile
    devices.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Mike 在研究生毕业后成功进入了 Apple 工作（“我差点才拿到那份工作”），在那里他遇到了 Cary Clark，未来的 Skia 联合创始人。^([18](#c11-footnote-18))
    在 Apple 工作几年后，Mike 离开了并创办了 HeadSpin，开发了一款用于 CD-ROM 游戏的游戏引擎。HeadSpin 被 Cyan 收购，Cyan
    是游戏 *Myst* 的开发商，而 Mike 随后离开去创办了一家新的图形技术公司，名为 AlphaMask。AlphaMask 被提供移动设备浏览器软件的公司
    Openwave 收购。
- en: 'Mike left Openwave in 2004 and started Skia with Cary, his former Apple colleague,
    where they created a graphics rendering engine. Skia licensed its engine to various
    clients, including several in California. For one of Mike’s trips to California,
    Cary suggested that Mike should meet with a startup called Android, which had
    been founded by a couple of Cary’s former colleagues at WebTV: Andy Rubin and
    Chris White.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Mike 在 2004 年离开了 Openwave，并与他的前 Apple 同事 Cary 一起创办了 Skia，开发了一款图形渲染引擎。Skia 将其引擎授权给多个客户，其中包括一些位于加利福尼亚的客户。在一次
    Mike 去加州的旅行中，Cary 建议他与一个名为 Android 的初创公司见面，Android 由 Cary 的一些前同事在 WebTV 时期共同创办，创始人包括
    Andy Rubin 和 Chris White。
- en: 'In late 2004, Android was quite small, with only the two co-founders plus new
    employees Brian Swetland and Tracey Cole. Android was in the midst of a pivot
    from building a camera OS to a phone OS. Nevertheless, Andy knew that they would
    need a rendering engine to display the UI, so he paid Mike for an evaluation license
    of Skia and agreed to get back in touch. But Mike didn’t hear back from him: “Andy
    just fell off the map and he didn’t respond to emails.”'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 2004年底，Android 仍然很小，只有两位联合创始人以及新员工 Brian Swetland 和 Tracey Cole。Android 正在从构建相机操作系统转向构建手机操作系统。然而，Andy
    知道他们需要一个渲染引擎来显示 UI，因此他支付给 Mike 一笔评估许可证费用，并同意之后再联系。但 Mike 没有收到回应：“Andy 就这样消失了，他没有回复我的邮件。”
- en: Months later, in the Summer of 2005, Andy finally contacted Mike. “He says,
    ‘Sorry I dropped out, but I’m emailing you from a new email address.’ And sure
    enough, it’s something@google.com. He says, ‘Hey I got acquired. We should probably
    finish that license.’”
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 几个月后，在 2005 年夏天，Andy 最终联系了 Mike。“他说，‘抱歉我消失了，但我现在是通过一个新的邮箱地址联系你。’果然，他发来的邮箱地址是
    something@google.com。他说，‘嘿，我被收购了，我们应该完成那个许可证的事情。’”
- en: But instead of just being another licensee of Skia’s rendering engine, Google
    acquired Mike’s company. Android was, after all, in hiring mode, and acquisitions
    can be an effective way (if you have the money) to hire multiple people quickly.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 但 Google 并不是仅仅成为 Skia 渲染引擎的另一个许可证持有者，而是收购了 Mike 的公司。毕竟，Android 正处于招聘阶段，收购可以是一个有效的方式（如果你有足够的资金）来迅速招聘多位员工。
- en: The acquisition was announced on November 9, 2005, and the four engineers from
    Skia (Mike, Cary, Leon Scroggins, and Patrick Scott) started in December.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这项收购在 2005 年 11 月 9 日宣布，来自 Skia 的四位工程师（Mike、Cary、Leon Scroggins 和 Patrick Scott）于
    12 月开始加入。
- en: One of the points of negotiation was location. Mike and Cary had, years earlier,
    made the decision to leave California and settle in North Carolina, and they weren’t
    wild about returning to the Bay Area. Google agreed to leave the team in North
    Carolina, where they established the new Chapel Hill office.^([19](#c11-footnote-19))
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 谈判的一个重点是地点。Mike 和 Cary 多年前就决定离开加利福尼亚，定居在北卡罗来纳州，他们并不太热衷于回到湾区。谷歌同意将团队留在北卡罗来纳州，在那里他们建立了新的
    Chapel Hill 办公室。^([19](#c11-footnote-19))
- en: After the team started at Google, they got to work making Skia the graphics
    engine for Android. The underlying rendering software itself was fairly complete;
    they had full support in C++ for the kinds of 2D drawing operations that Android
    needed (lines, shapes, text, and images). In fact, the raw graphics functionality
    of Skia in Android has changed very little since those early years (though major
    improvements have happened along the way, like hardware acceleration). But given
    Android’s choice of Java as the main programming language for applications, they
    needed Skia to be callable from Java, not C++, so the team wrote the Java bindings.^([20](#c11-footnote-20))
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 团队开始在谷歌工作后，他们着手将 Skia 打造成 Android 的图形引擎。底层渲染软件本身已经相当完备；他们在 C++ 中完全支持 Android
    所需的各种 2D 绘图操作（如线条、形状、文本和图像）。事实上，Skia 在 Android 中的原始图形功能自早期以来几乎没有变化（尽管在这过程中进行了一些重大改进，例如硬件加速）。但是鉴于
    Android 选择 Java 作为应用程序的主要编程语言，他们需要让 Skia 能够通过 Java 调用，而不是 C++，因此团队编写了 Java 绑定。^([20](#c11-footnote-20))
- en: Writing bindings for Skia and integrating the engine into the rest of the Android
    platform wasn’t too difficult, so the Skia team soon picked up a couple other
    projects. One of the projects, the new UI system, was short-lived. Mike’s team
    proposed that Android use Skia’s existing system for displaying UI. They had a
    system working already that developers programmed using a combination of JavaScript
    and XML. But the move to Java, plus some late-night work from Joe Onorato,^([21](#c11-footnote-21))
    sent the team down a different path.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为 Skia 编写绑定并将引擎集成到 Android 平台的其余部分并不太难，因此 Skia 团队很快就接手了几个其他项目。 其中一个项目——新的 UI
    系统——寿命很短。Mike 的团队建议 Android 使用 Skia 现有的 UI 显示系统。他们已经有一个可用的系统，开发人员通过 JavaScript
    和 XML 的组合来编程。但由于转向 Java，以及 Joe Onorato 的一些深夜工作，^([21](#c11-footnote-21)) 团队走上了不同的道路。
