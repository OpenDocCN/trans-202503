- en: '## **19'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '## **19'
- en: THE GHIDRA DECOMPILER**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: GHIDRA 反编译器**
- en: '![Image](Images/com.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/com.jpg)'
- en: Until now, we’ve focused our reverse engineering analysis on the Listing window
    and presented Ghidra’s features through the disassembly listing lens. In this
    chapter, we shift our focus to the Decompiler window and investigate how we can
    accomplish familiar analysis tasks (and some new ones) with the Decompiler and
    its associated functionality. We start with a brief overview of the decompilation
    process before moving on to the functionality available in the Decompiler window.
    We then walk through some examples to help you identify ways that the Decompiler
    window can be used to improve your reverse engineering process.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经将逆向工程分析集中在列表窗口，并通过反汇编列表的视角介绍了 Ghidra 的特性。在本章中，我们将焦点转向反编译窗口，研究如何使用反编译器及其相关功能完成熟悉的分析任务（以及一些新的任务）。我们将从反编译过程的简要概述开始，然后深入反编译窗口中可用的功能。接着我们将通过一些示例，帮助你发现如何利用反编译窗口改进你的逆向工程过程。
- en: '### **Decompiler Analysis**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '### **反编译分析**'
- en: It’s logical to assume that the content in the Decompiler window is derived
    from the Listing window, but, surprisingly, the contents of the Listing window
    and Decompiler window are derived independently, which is why they sometimes disagree
    and why both should be evaluated in context when you’re trying to determine ground
    truth. The main function of Ghidra’s Decompiler is to convert machine language
    instructions into p-code (see [Chapter 18](ch18.xhtml#ch18)) and then to convert
    the p-code to C and present it in the Decompiler window.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 合理的假设是，反编译窗口中的内容来自于列表窗口，但令人惊讶的是，列表窗口和反编译窗口的内容是独立生成的，这就是为什么它们有时不一致的原因，因此，在试图确定真实情况时，必须在上下文中评估这两者。Ghidra
    反编译器的主要功能是将机器语言指令转换为 p-code（见 [第18章](ch18.xhtml#ch18)），然后将 p-code 转换为 C 语言，并在反编译窗口中显示。
- en: 'In a simplified view, the decompilation process includes three distinct phases.
    In the first phase, the Decompiler uses the SLEIGH specification file to create
    a draft of the p-code and derive associated basic blocks and flows. The second
    phase focuses on simplification: unneeded content such as unreachable code is
    eliminated, and then control flows are adjusted and tuned in response to the changes.
    In the wrap-up phase, finishing touches are added, some final checks are made,
    and the final results are sent through a pretty-printing algorithm before being
    presented in the Decompiler window. Of course, this greatly simplifies a very
    complex process, but the main takeaways are the following:^([1](footnotes.xhtml#ch19fn1))'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 从简化的视角来看，反编译过程包括三个不同的阶段。在第一阶段，反编译器使用 SLEIGH 规范文件创建 p-code 草图，并推导出相关的基本块和控制流。第二阶段专注于简化：删除不需要的内容，如不可达代码，然后根据变化调整和优化控制流。在最后阶段，进行一些修整，进行最终检查，并通过格式化算法生成最终结果，最终呈现在反编译窗口中。当然，这大大简化了一个非常复杂的过程，但主要的要点如下：^([1](footnotes.xhtml#ch19fn1))
- en: The Decompiler is an analyzer.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反编译器是一个分析器。
- en: It starts its work with the binary and produces p-code.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它从二进制文件开始工作，并生成 p-code。
- en: It converts the p-code to C.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将 p-code 转换为 C 语言。
- en: The C code and any associated messages are displayed in the Decompiler window.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C 代码和相关消息显示在反编译窗口中。
- en: We discuss some of these steps in more detail as we navigate through Ghidra’s
    decompilation functionality. Let’s start our investigation with the analysis process
    and the primary capabilities it unleashes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将详细讨论这些步骤，并深入探讨 Ghidra 的反编译功能。让我们从分析过程开始，了解它释放的主要功能。
- en: '***Analysis Options***'
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***分析选项***'
- en: During the auto analysis process, there are several analyzers that pertain to
    the Decompiler window. Decompiler analysis options are managed through the Edit
    ▸ Tool Options menu, shown in [Figure 19-1](ch19.xhtml#fig19_1) with defaults
    selected.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动分析过程中，有几个分析器与反编译窗口相关。反编译分析选项通过“编辑 ▸ 工具选项”菜单管理，如 [图19-1](ch19.xhtml#fig19_1)
    所示，默认选项已选择。
- en: We discuss two of these options, Eliminate unreachable code and Simplify predication,
    next. For the remaining options, you can experiment with their results or refer
    to Ghidra Help.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来将讨论其中两个选项：消除不可达代码和简化预测。对于其他选项，你可以实验它们的结果或参考 Ghidra 帮助文档。
- en: '![image](Images/fig19-1.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig19-1.jpg)'
- en: '*Figure 19-1: Ghidra Decompiler analysis options with defaults selected*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*图19-1：Ghidra 反编译器分析选项，已选择默认值*'
- en: '**Eliminate Unreachable Code**'
  id: totrans-17
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**消除不可达代码**'
- en: 'The Eliminate unreachable code option excludes unreachable code from the Decompiler
    listing. For example, the following C function has two conditions that can never
    be met, which makes the corresponding conditional blocks unreachable:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: “消除无法访问的代码”选项会将无法访问的代码排除在反编译器列表之外。例如，以下C函数有两个永远不可能满足的条件，这使得相应的条件块变得无法访问：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The variable `b` is initialized to zero in a perhaps less than obvious manner.
    When `b` is tested ➊, its value can never be non zero, and the body of the corresponding
    `if` statement will never be executed. Similarly `a - a` can never be greater
    than zero, and the condition in the second `if` statement ➋ can also never evaluate
    to true. When the Eliminate unreachable code option is selected, the Decompiler
    window displays warning messages to let us know it has removed unreachable code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 变量`b`以一种或许不太明显的方式初始化为零。当测试`b`时➊，它的值永远不会为非零，因而对应的`if`语句块将永远不会执行。同样，`a - a`永远不可能大于零，因此第二个`if`语句的条件➋也永远无法评估为真。当选择“消除无法访问的代码”选项时，反编译器窗口会显示警告信息，提醒我们它已经移除了无法访问的代码。
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Simplify Predication**'
  id: totrans-22
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**简化预测**'
- en: 'This option optimizes `if`/`else` blocks by merging blocks that share the same
    condition. In the following listing, the first two `if` statements share the same
    condition:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 该选项通过合并共享相同条件的`if`/`else`块来优化代码。在以下列表中，前两个`if`语句共享相同的条件：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With Simplify predication enabled, the resulting Decompiler listing shows the
    combined blocks:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 启用简化预测后，生成的反编译器列表显示合并后的代码块：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**The Decompiler Window**'
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**反编译器窗口**'
- en: Now that you understand how the Decompiler Analysis Engine populates the Decompiler
    window, let’s see how you can use the window to facilitate your analysis. Navigating
    the Decompiler window is relatively easy, as it displays only one function at
    a time. To move between functions or see the function in context, it is helpful
    to correlate with the Listing window. Because the Decompiler window and the Listing
    window are linked by default, you can navigate both by using the available options
    in the CodeBrowser toolbar.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了反编译器分析引擎如何填充反编译器窗口，接下来我们来看一下如何利用窗口来辅助分析。导航反编译器窗口相对简单，因为它一次只显示一个函数。为了在函数之间移动或查看函数的上下文，最好与列表窗口进行关联。由于反编译器窗口和列表窗口默认是链接的，你可以通过使用CodeBrowser工具栏中的可用选项同时在两个窗口间导航。
- en: 'The function displayed in the Decompiler window helps with analysis, but it
    may not be so easy to read at first. Any lack of information about the data types
    used by the functions that it decompiles requires Ghidra to infer those data types
    itself. As a result, the decompiler may overuse type casts, as you can see in
    the following sample statements:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 反编译器窗口中显示的函数有助于分析，但刚开始时可能不太容易阅读。由于缺乏关于函数反编译的数据类型的信息，Ghidra需要自行推断这些数据类型。因此，反编译器可能会过度使用类型转换，正如你在以下示例语句中看到的那样：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you provide more accurate type information using the Decompiler editing options,
    you will notice that the Decompiler relies less and less on type casts, and the
    generated C code become easier to read. In the examples that follow, we’ll discuss
    some of the Decompiler window’s most useful features to clean up the generated
    source code. The ultimate goal is readable source code that is easier to comprehend,
    which reduces the amount of time needed to understand the behavior of the code.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当你通过反编译器编辑选项提供更精确的类型信息时，你会注意到反编译器越来越少依赖类型转换，生成的C代码也变得更易读。在接下来的示例中，我们将讨论一些反编译器窗口最有用的功能，用于清理生成的源代码。最终目标是生成更易于理解的可读源代码，从而减少理解代码行为所需的时间。
- en: '***Example 1: Editing in the Decompiler Window***'
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***示例 1：在反编译器窗口中编辑***'
- en: 'Consider a program that accepts two integer values from the user and then calls
    the following function:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个程序，该程序从用户那里接受两个整数值，然后调用以下函数：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The function uses two integer parameters with five local variables to generate
    its output. The interdependencies can be summed up as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数使用两个整数参数和五个局部变量来生成其输出。它们之间的相互依赖关系可以总结如下：
- en: Variable `c` depends on the `rand()` return value, influences `d` and `e` directly,
    and influences `f` and `g` indirectly.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量`c`依赖于`rand()`的返回值，直接影响`d`和`e`，并间接影响`f`和`g`。
- en: Variable `d` depends on `a`, `b`, and `c`, and influences `f` directly.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量`d`依赖于`a`、`b`和`c`，并直接影响`f`。
- en: Variable `e` depends on `a` and `c`, and influences `g` directly.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量`e`依赖于`a`和`c`，并直接影响`g`。
- en: Variable `f` depends on `d` directly and on `a`, `b`, and `c` indirectly, and
    influences nothing.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量`f`直接依赖于`d`，间接依赖于`a`、`b`和`c`，但不影响任何内容。
- en: Variable `g` depends on `e` directly and on `a` and `c` indirectly, and influences
    nothing.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量`g`直接依赖于`e`，间接依赖于`a`和`c`，但不影响任何内容。
- en: 'When the associated binary is loaded into Ghidra and the function is analyzed,
    you see the following representation of the `do_math` function in the Decompiler
    window:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当关联的二进制文件加载到Ghidra中并对函数进行分析时，你会在反编译器窗口中看到`do_math`函数的以下表示：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you want to do your analysis using the Decompiler, you’ll want to make sure
    the code the Decompiler is generating is as accurate as possible. Usually, this
    is done by providing as much information as possible about data types and function
    prototypes. Functions that accept a variable number of arguments, such as `printf`,
    are especially tricky for the Decompiler since the Decompiler would need to fully
    understand the semantics of the required arguments in order to estimate the number
    of supplied optional arguments.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用反编译器进行分析，你需要确保反编译器生成的代码尽可能准确。通常，这通过提供尽可能多的关于数据类型和函数原型的信息来完成。接受可变数量参数的函数，如`printf`，尤其对反编译器来说是棘手的，因为反编译器需要完全理解所需参数的语义，才能估算提供的可选参数的数量。
- en: '##### **Overriding Function Signatures**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '##### **覆盖函数签名**'
- en: You can see a number of `printf` statements ➊ that don’t look quite right. Each
    one has a format string but no additional arguments. Since `printf` takes a variable
    number of arguments, you can override the function signature at each calling location
    and (based on the format string) indicate that the `printf` statement should take
    one integer argument.^([2](footnotes.xhtml#ch19fn2)) To make this change, right-click
    a `printf` statement and choose **Override Signature** from the context menu to
    open the dialog shown in [Figure 19-2](ch19.xhtml#fig19_2).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到一些`printf`语句 ➊ 看起来不太对。每个语句都有一个格式字符串，但没有额外的参数。由于`printf`接受可变数量的参数，你可以在每个调用位置覆盖函数签名，并（根据格式字符串）指示该`printf`语句应接受一个整数参数。^([2](footnotes.xhtml#ch19fn2))
    要进行此更改，请右键单击`printf`语句，并从上下文菜单中选择**覆盖签名**，以打开[图 19-2](ch19.xhtml#fig19_2)所示的对话框。
- en: '![image](Images/fig19-2.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig19-2.jpg)'
- en: '*Figure 19-2: The Override Signature dialog*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-2：覆盖签名对话框*'
- en: 'Adding the second parameter type, `int`, to the signature (as shown in the
    figure) for each of the `printf` statements results in the following listing:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将第二个参数类型`int`添加到每个`printf`语句的签名中（如图所示），结果如下所示：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In addition to the updated calls to `printf` with the correct arguments, two
    new lines have been added to the Decompiler listing as a result of overriding
    the `printf` function ➋ ➌. These statements weren’t included previously because
    Ghidra believed the results were not used. Once the Decompiler understands that
    the results are used in each `printf`, the statements become meaningful and are
    displayed in the Decompiler window.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 除了更新的具有正确参数的`printf`调用外，由于覆盖了`printf`函数 ➋ ➌，反编译器列表中还添加了两行新代码。这些语句之前没有包括进来，因为Ghidra认为这些结果未被使用。一旦反编译器明白这些结果在每个`printf`中都有使用，这些语句就变得有意义，并会显示在反编译器窗口中。
- en: '**Editing Variable Types and Names**'
  id: totrans-51
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**编辑变量类型和名称**'
- en: After correcting the function calls, you can continue cleaning up the listing
    by renaming (hotkey L) and retyping (hotkey CTRL-L) the parameters and the variables
    ➊ based on the names found in the `printf` format strings. As an aside, format
    strings are an extremely valuable source of information regarding the type and
    purpose of variables in any program.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在修正完函数调用之后，你可以继续通过重命名（快捷键 L）和重新输入（快捷键 CTRL-L）参数以及变量 ➊，根据在`printf`格式字符串中找到的名称来清理列表。顺便提一下，格式字符串是任何程序中关于变量类型和用途的极其宝贵的信息来源。
- en: 'After these changes have been completed, the final `printf` statement ➍ is
    still a bit cumbersome:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成这些更改后，最终的`printf`语句 ➍ 仍然有点繁琐：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Right-clicking this statement allows you to override the function signature.
    The first argument in this `printf` statement is the format string, and it doesn’t
    need to be modified. Changing the rest of the arguments to type `int` results
    in the following cleaner code ([Listing 19-1](ch19.xhtml#exa19_1)) in the Decompiler
    window.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击此语句允许你覆盖函数签名。此`printf`语句中的第一个参数是格式字符串，它无需修改。将其余参数更改为`int`类型后，结果会得到如下更简洁的代码（[Listing
    19-1](ch19.xhtml#exa19_1)）显示在反编译器窗口中。
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 19-1: Decompiled function with updated signatures*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 19-1：带有更新签名的反编译函数*'
- en: This is very similar to our original source code and much easier to read than
    the original Decompiler listing as the modifications of the function arguments
    have been propagated throughout the listing. One difference between the Decompiler
    listing and our original source code is that the variable `f` has been replaced
    by an equivalent expression ➊.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们原始的源代码非常相似，并且比原始的反编译器列表示更加易读，因为函数参数的修改已经传播到整个列表中。反编译器列表示和我们原始源代码之间的一个区别是，变量`f`已经被等效的表达式➊所替代。
- en: '**Highlighting Slices**'
  id: totrans-59
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**高亮切片**'
- en: Now that you have a more understandable Decompiler window, you can begin further
    analysis. Suppose that you want to know how individual variables affect and are
    affected by other variables. A *program slice* is a collection of statements that
    contribute to the value of a variable (*backward slice*) or are affected by a
    variable (*forward slice*). In vulnerability analysis scenarios, this might manifest
    as “I have control of this variable; where does its value get used?”
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了更易理解的反编译器窗口，你可以开始进一步的分析。假设你想知道某个变量如何影响其他变量，或者如何被其他变量影响。一个*程序切片*是指一组影响某个变量值（*回溯切片*）或被某个变量值影响（*前向切片*）的语句。在漏洞分析场景中，这可能表现为“我控制了这个变量，它的值在哪些地方被使用？”
- en: 'Ghidra provides five options in its right-click context menu to highlight relationships
    between variables and instructions in a function. If you right-click a variable
    in the Decompiler window, you can choose from the following options:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Ghidra在其右键菜单中提供了五个选项，用于高亮函数中变量与指令之间的关系。如果你在反编译器窗口中右键点击一个变量，你可以从以下选项中进行选择：
- en: '**Highlight Def-use** This option highlights all uses of the variable within
    the function. (You can use a middle mouse click to get the same effect.)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**高亮 Def-use** 该选项会高亮函数中变量的所有使用位置。（你也可以通过中键单击来实现相同的效果。）'
- en: '**Highlight Forward Slice** This option highlights everything that is impacted
    by the value in the selected variable. For example, if you select variable `b`
    in [Listing 19-1](ch19.xhtml#exa19_1) and choose this option, all occurrences
    of `b` and `d` will be highlighted in the listing, because a change in the value
    of `b` could also result in a change in the value of `d`.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**高亮前向切片** 该选项会高亮所有受选定变量值影响的内容。例如，如果你在[列表 19-1](ch19.xhtml#exa19_1)中选择变量`b`并选择此选项，则所有出现`b`和`d`的位置都会被高亮，因为`b`的值变化可能也会导致`d`值的变化。'
- en: '**Highlight Backward Slice** This is the inverse of the previous option and
    highlights all of the variables that contribute to a particular value. If you
    right-click variable `e` in the final `printf` statement in [Listing 19-1](ch19.xhtml#exa19_1)
    and choose this option, all of the variables that affect the value of `e` (in
    this case `e`, `a`, and `c`) will be highlighted. Changing `a` or `c` could also
    change the value of `e`.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**高亮回溯切片** 这是前一个选项的反向操作，会高亮所有对某个特定值有贡献的变量。如果你右键点击[列表 19-1](ch19.xhtml#exa19_1)中最后一个`printf`语句中的变量`e`并选择此选项，所有影响`e`值的变量（在这种情况下是`e`、`a`和`c`）都会被高亮。修改`a`或`c`也可能改变`e`的值。'
- en: '**Highlight Forward Inst Slice** This option highlights the entire statement
    associated with the Highlight Forward Slice option. In [Listing 19-1](ch19.xhtml#exa19_1),
    if you use this option while variable `b` is selected, all statements in which
    `b` or `d` appear will be highlighted.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**高亮前向语句切片** 该选项会高亮与“高亮前向切片”选项相关的整个语句。在[列表 19-1](ch19.xhtml#exa19_1)中，如果你在选中`b`变量时使用此选项，所有涉及`b`或`d`的语句都会被高亮。'
- en: '**Highlight Backward Inst Slice** This option highlights the entire statement
    associated with the Highlight Backward Slice option. In [Listing 19-1](ch19.xhtml#exa19_1),
    selecting this option while highlighting variable `e` in the final `printf` statement
    will cause all statements in which `a`, `c`, or `e` appear to be highlighted.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**高亮回溯语句切片** 该选项会高亮与“高亮回溯切片”选项相关的整个语句。在[列表 19-1](ch19.xhtml#exa19_1)中，选择此选项并高亮`e`变量时，所有涉及`a`、`c`或`e`的语句都会被高亮。'
- en: Now that we have a general understanding of some approaches to work with the
    Decompiler window and use it in our analysis, let’s look at a more specific example.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对如何操作反编译器窗口以及如何在分析中使用它有了大致了解，接下来我们看一个更具体的示例。
- en: '***Example 2: Non-Returning Functions***'
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***示例 2：无返回的函数***'
- en: 'In general, Ghidra can safely assume function calls return and therefore treat
    function calls as if they exhibit sequential flow within basic blocks. However,
    some functions, such as those marked with the `noreturn` keyword in source code,
    or ended with an obfuscated jump instruction in malware, do not return, and Ghidra
    may generate inaccurate disassembled or decompiled code. Ghidra offers three approaches
    for dealing with non-returning functions: two non-returning function analyzers
    and the capability to edit function signatures manually.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Ghidra 可以安全地假设函数调用会返回，因此会将函数调用视为在基本块内呈现顺序流。然而，一些函数，如源代码中标记为 `noreturn` 关键字的函数，或在恶意软件中以混淆的跳转指令结束的函数，是不返回的，这可能导致
    Ghidra 生成不准确的反汇编或反编译代码。Ghidra 提供了三种处理非返回函数的方法：两种非返回函数分析器和手动编辑函数签名的功能。
- en: 'Ghidra can identify non-returning functions based on a list of known `noreturn`
    functions such as `exit` and `abort` using the Non-Returning Functions-Known analyzer.
    This analyzer is selected by default as part of auto analysis, and its job is
    straightforward: if a function name appears in its list, it marks the function
    as non-returning and does its best to correct any associated issues (for example,
    set associated calls to non-returning, find flows that might need repairing, and
    so on).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Ghidra 可以根据已知的 `noreturn` 函数列表（如 `exit` 和 `abort`）来识别非返回函数，使用的是“非返回函数-已知分析器”。此分析器在自动分析时默认选中，其工作原理非常简单：如果函数名出现在该列表中，它会将该函数标记为非返回函数，并尽最大努力修复任何相关问题（例如，将相关调用设置为非返回函数、查找可能需要修复的流程等）。
- en: The Non-Returning Functions-Discovered analyzer looks for clues that might indicate
    that a function doesn’t return (for example, data or bad instructions right after
    the call). What it does with the information is largely controlled by the three
    options associated with the analyzer, as shown in [Figure 19-3](ch19.xhtml#fig19_3).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: “非返回函数-已发现”分析器会寻找可能表明函数不返回的线索（例如，调用后面的数据或错误指令）。它如何处理这些信息，主要由与分析器相关的三个选项控制，如[图
    19-3](ch19.xhtml#fig19_3)所示。
- en: '![image](Images/fig19-3.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig19-3.jpg)'
- en: '*Figure 19-3: Analysis options for Non-Returning Functions-Discovered*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-3：非返回函数-已发现分析选项*'
- en: The first option ➊ allows the automatic creation of analysis bookmarks (which
    appear on the Listing window’s bookmark bar). The second option ➋ allows you to
    specify a threshold that determines whether to designate a function as non-returning
    based on a series of checks for characteristics that are likely to indicate a
    non-returning function. Finally, there is a checkbox ➌ to repair the associated
    flow damage.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个选项 ➊ 允许自动创建分析书签（这些书签会出现在列表窗口的书签栏上）。第二个选项 ➋ 允许你指定一个阈值，该阈值通过一系列检查，判断是否将某个函数标记为非返回函数。最后，还有一个复选框
    ➌ 用于修复相关的流程损坏。
- en: When Ghidra is unable to identify a non-returning function, you have the option
    to edit the function signature yourself. If you complete analysis and have error
    bookmarks, which are used to flag bad instructions, then that is a good indication
    that something is not quite right with Ghidra’s own analysis. If the bad instruction
    follows a `CALL`, as in
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Ghidra 无法识别非返回函数时，你可以选择自己编辑函数签名。如果你完成分析并有错误书签，这些书签用于标记错误指令，这通常是 Ghidra 自身分析出错的一个良好指示。如果错误指令紧随
    `CALL`，如
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'then you are likely to see an associated post-comment warning you about the
    situation in the Decompiler window, like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可能会在反编译器窗口看到一个相关的后置注释，警告你关于该情况，如下所示：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you click the function name (`noReturnA` in this case) in the Decompiler
    window and then choose Edit Function Signature, you will have the option to modify
    attributes associated with the function, as shown in [Figure 19-4](ch19.xhtml#fig19_4).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在反编译器窗口点击函数名（此例中为 `noReturnA`），然后选择“编辑函数签名”，你将有机会修改与该函数相关的属性，如[图 19-4](ch19.xhtml#fig19_4)所示。
- en: '![image](Images/fig19-4.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig19-4.jpg)'
- en: '*Figure 19-4: Editing function attributes*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-4：编辑函数属性*'
- en: 'Check the No Return box to mark the function as non-returning. Ghidra then
    inserts a pre comment, shown next, in the Decompiler window as well as a post
    comment in the Listing window:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 勾选“无返回”框，将该函数标记为非返回函数。Ghidra 然后会在反编译器窗口中插入一个前置注释，并在列表窗口中插入一个后置注释，如下所示：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With this error corrected, you can move on to other issues.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 纠正该错误后，你可以继续处理其他问题。
- en: '***Example 3: Automated Structure Creation***'
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***示例 3：自动化结构创建***'
- en: When analyzing decompiled C source code, you’re likely to come across statements
    that appear to contain structure field references. Ghidra helps you create a structure
    and populate it based on the associated references that the Decompiler has detected.
    Let’s walk through an example starting with the source code and Ghidra’s initial
    decompilation of the code.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析反编译后的C源代码时，你可能会遇到看起来包含结构体字段引用的语句。Ghidra可以帮助你创建一个结构体，并根据反编译器检测到的相关引用填充它。让我们从源代码和Ghidra的初步反编译开始，逐步了解这个过程。
- en: 'Suppose you have source code that defines two struct types and then creates
    a global instance of each:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有源代码，定义了两个结构体类型，并为每个类型创建了一个全局实例：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'One structure ➊ contains homogeneous elements, and the other ➋ contains a heterogeneous
    collection of types. The source code also contains three functions, one of which
    (`do_struct_demo`) declares a local instance of each structure type:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一个结构体 ➊ 包含同质元素，另一个 ➋ 包含异质类型的集合。源代码还包含三个函数，其中一个函数（`do_struct_demo`）声明了每个结构体类型的本地实例：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The decompiled version of `do_struct_demo` appears in [Listing 19-2](ch19.xhtml#exa19_2).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`do_struct_demo`的反编译版本出现在[示例 19-2](ch19.xhtml#exa19_2)中。'
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*Listing 19-2: Initial decompilation of* `do_struct_demo`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 19-2：`do_struct_demo`的初步反编译*'
- en: 'Navigating to the `display_s1` function from either function call ➊➋ by double-clicking
    it in the Decompiler window yields the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 双击反编译器窗口中的函数调用 ➊➋，进入`display_s1`函数，将显示如下内容：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Because you suspect the argument to `display_s1` might be a structure pointer,
    you can ask Ghidra to automate the process of creating a struct for you by right-clicking
    `param_1` in the function’s argument list and selecting Auto Create Structure
    from the context menu. In response, Ghidra tracks all uses of `param_1`, treats
    all arithmetic performed on the pointer as referencing a member of a struct, and
    automatically creates a new struct type containing fields at each referenced offset.
    This changes a few things in the Decompiler listing:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你怀疑`display_s1`的参数可能是一个结构体指针，你可以要求Ghidra自动为你创建一个结构体。只需右键点击函数参数列表中的`param_1`，并从上下文菜单中选择“自动创建结构体”。作为回应，Ghidra会跟踪`param_1`的所有使用，将对指针执行的所有算术运算视为对结构体成员的引用，并自动创建一个新结构体类型，包含每个引用偏移量的字段。这会在反编译器的列表中改变一些内容：
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The type of the parameter has changed and is now `astruct*`, and the call to
    `printf` now contains field references. The new type has also been added to the
    Data Type Manager, and hovering over the structure name displays the field definitions,
    as shown in [Figure 19-5](ch19.xhtml#fig19_5).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 参数的类型已经改变，现在是`astruct*`，并且调用`printf`时已经包含了字段引用。新类型也已经添加到数据类型管理器中，鼠标悬停在结构体名称上会显示字段定义，如[图
    19-5](ch19.xhtml#fig19_5)所示。
- en: '![image](Images/fig19-5.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig19-5.jpg)'
- en: '*Figure 19-5: Automatic structs in the Data Type Manager*'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-5：数据类型管理器中的自动结构体*'
- en: 'You can update the type for `local_20` and `GLOBAL_S1` to `astruct` by using
    the Retype Variable option from the right-click context menu. The results are
    shown in the following listing:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过右键点击上下文菜单中的“重新类型变量”选项，将`local_20`和`GLOBAL_S1`的类型更新为`astruct`。结果如下所示：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Comparing this with [Listing 19-2](ch19.xhtml#exa19_2) shows the modification
    of the type for `local_20` ➊ and the addition of field references for both `local_20`
    ➋ ➌ and `GLOBAL_S1` ➍.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 将其与[示例 19-2](ch19.xhtml#exa19_2)进行比较，可以看到`local_20`的类型被修改 ➊，并且为`local_20` ➋
    ➌和`GLOBAL_S1` ➍添加了字段引用。
- en: Let’s shift focus to the decompilation of the third function, `update_s2`, shown
    in [Listing 19-3](ch19.xhtml#exa19_3).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将焦点转向第三个函数`update_s2`的反编译，如[示例 19-3](ch19.xhtml#exa19_3)所示。
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '*Listing 19-3: Initial decompilation of* `update_s2`'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 19-3：`update_s2`的初步反编译*'
- en: You can use the previous approach to automatically create a structure for `param_1`.
    Simply right-click `param_1` in the function and choose **Auto Create Structure**
    from the context menu.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用之前的方法，自动为`param_1`创建一个结构体。只需右键点击函数中的`param_1`，并从上下文菜单中选择**自动创建结构体**。
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The Data Type Manager now has a second struct definition associated with this
    file, as shown in [Figure 19-6](ch19.xhtml#fig19_6).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类型管理器现在与此文件关联了第二个结构体定义，如[图 19-6](ch19.xhtml#fig19_6)所示。
- en: '![image](Images/fig19-6.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig19-6.jpg)'
- en: '*Figure 19-6: Additional automatic structs in the Data Type Manager window*'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-6：数据类型管理器窗口中的附加自动结构体*'
- en: 'This structure has an `int`, a `char`, three `undefined` bytes (likely padding
    inserted by the compiler), and a `float`. To edit the structure, right-click `astruct_1`
    and choose Edit from the context menu, which opens the Structure Editor window.
    If we choose to name the `int` field `x`, the `char` field `y`, and the `float`
    field `z`, and then save the changes, the new field names will be reflected in
    the Decompiler listing:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结构包含一个`int`、一个`char`、三个`undefined`字节（可能是编译器插入的填充字节）和一个`float`。要编辑该结构，右键点击`astruct_1`并从上下文菜单中选择“编辑”，这将打开结构编辑器窗口。如果我们选择将`int`字段命名为`x`，将`char`字段命名为`y`，将`float`字段命名为`z`，然后保存更改，那么新的字段名称将在反编译器列表中反映出来：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This listing is much easier to read and understand than the original decompilation
    in [Listing 19-3](ch19.xhtml#exa19_3).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表比[列表 19-3](ch19.xhtml#exa19_3)中的原始反编译结果更容易阅读和理解。
- en: '**Summary**'
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: The Decompiler window, like the Listing window, provides you with a view into
    a binary, and each has its associated strengths and weaknesses. The Decompiler
    provides a higher-level view that can help you understand the general structure
    and functionality of a single function more quickly than looking at the disassembly
    (particularly for those who do not have years of experience reading disassembly
    listings). The Listing window provides a lower-level view of the entire binary,
    with all of the available detail, but this can make it more difficult to gain
    insight into the big picture.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 反编译器窗口与列表窗口类似，都为你提供了二进制文件的视图，每种方式都有各自的优缺点。反编译器提供了一个更高层次的视图，可以帮助你比查看反汇编代码更快速地理解单个函数的结构和功能（特别是对于那些没有多年阅读反汇编列表经验的人）。列表窗口则提供了整个二进制文件的更低层次视图，包含所有可用的细节，但这可能使得很难从整体上获取洞察。
- en: Ghidra’s Decompiler can be used effectively with the Listing window and all
    of the other tools we have introduced throughout the book to aid you in your reverse
    engineering process. In the end, it is the reverse engineer’s role to determine
    the best approach to solving the problem at hand.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Ghidra的反编译器可以与列表窗口以及我们在本书中介绍的所有其他工具有效配合，帮助你进行逆向工程过程。最终，决定解决当前问题的最佳方法是逆向工程师的职责。
- en: This chapter focused on the Decompiler window and issues associated with decompilation.
    Many of challenges can be traced to the wide variety of compilers and associated
    compiler options that directly influence the resulting binary. In the next chapter,
    we take a look at some compiler-specific behaviors and compiler build options
    to better understand the resulting binaries.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了反编译器窗口以及与反编译相关的问题。许多挑战可以追溯到各种各样的编译器及其相关的编译器选项，这些直接影响生成的二进制文件。在下一章中，我们将看一些特定编译器的行为和编译器构建选项，以更好地理解生成的二进制文件。
