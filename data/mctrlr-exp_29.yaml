- en: '**D  More Invasive Attacks**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**D  更具侵入性的攻击**'
- en: '**D.1 Atmega, AT90 Backside FIB**'
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**D.1 Atmega、AT90 背面FIB**'
- en: Helfmeier et al. (2013) describes backside probing attacks against the Atmega328P
    and AT90SC3232\. These two chips use the same AVR core, but the Atmega uses shallow
    trench isolation (STI) to separate transistors for preventing current leakage,
    while the AT90 has a security mesh across its top two metal layers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Helfmeier 等人（2013）描述了针对Atmega328P和AT90SC3232的背面探测攻击。这两款芯片使用相同的AVR核心，但Atmega使用浅槽隔离（STI）来分隔晶体管，以防止电流泄漏，而AT90则在其顶部两层金属之间有一层安全网格。
- en: In both chips, the authors were able to dig a trench through the backside of
    the IC to expose the fuse bits, then set or clear a fuse by tampering it with
    a focused ion beam (FIB). Changing the bits related to readout protection then
    allowed the chip to be read externally.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个芯片中，作者能够通过IC背面挖掘出一个槽沟，暴露出熔丝位，然后通过聚焦离子束（FIB）篡改熔丝来设置或清除熔丝。改变与读保护相关的位后，芯片便可以外部读取。
- en: Fuse locations are documented in the paper, as well as notes about how the STI
    feature impacts the difficulty of the FIB trenching work. You can find the approximate
    fuse locations in [Figure D.1](app04.xhtml#chDfig1).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 论文中记录了熔丝位置，以及关于STI特性如何影响FIB槽沟工作的说明。你可以在[图D.1](app04.xhtml#chDfig1)中找到大致的熔丝位置。
- en: '**D.2 GD32F130 QSPI Sniffing, Injection**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**D.2 GD32F130 QSPI 嗅探与注入**'
- en: The GD32F103, GD32F130, and some other clones of the STM32 are dual-die devices
    with a flash memory die stacked on top of the CPU, connected by a QSPI bus. In
    [Figure D.2](app04.xhtml#chDfig2), you can see that the two dice are wire-bonded
    directly to one another. The little one on top is the memory chip, and the big
    one on the bottom is the CPU.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: GD32F103、GD32F130和一些STM32的克隆芯片是双芯片设备，其中闪存芯片堆叠在CPU上方，通过QSPI总线连接。如[图D.2](app04.xhtml#chDfig2)所示，可以看到这两个芯片通过线键合直接连接在一起。上面的小芯片是存储器芯片，下面的大芯片是CPU。
- en: '![Image](../images/f0310-01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0310-01.jpg)'
- en: 'Figure D.1: Atmega328P Fuses from Helfmeier et al. (2013)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图D.1：Helfmeier 等人（2013）提供的Atmega328P熔丝
- en: '![Image](../images/f0311-01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0311-01.jpg)'
- en: 'Figure D.2: GD32F130 bonded to QSPI Flash'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图D.2：GD32F130与QSPI闪存芯片的键合
- en: Obermaier, Schink, and Moczek (2020) documents sanding away the packaging to
    expose the bond wires connecting the two dice, sniffing the 4MHz bus traffic with
    a logic analyzer, reverse engineering some address and data scrambling, and then
    reconstructing the firmware image. Additionally, they were able to inject data
    faults into the bus to force a downgrade from RDP Level 2 to Level 1 by introducing
    a single bit error. A downgrade all the way to Level 0 can be caused by flipping
    two bits of the address.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Obermaier、Schink 和 Moczek（2020）记录了去除包装以暴露连接两个芯片的引线、使用逻辑分析仪嗅探4MHz总线流量、逆向工程一些地址和数据混淆，然后重构固件镜像的过程。此外，他们还能够向总线注入数据故障，通过引入单个位错误将RDP等级从2降级到等级1。通过翻转地址的两个比特，还可以将RDP降级到等级0。
- en: '**D.3 STM32 Ultraviolet Downgrade**'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**D.3 STM32紫外线降级**'
- en: Most of Obermaier and Tatschner (2017) concerns a delightful bug in the JTAG
    debugging of the STM32F0 family from [Chapter 10](ch10.xhtml#ch10), which allows
    firmware to be extracted from RDP in Level 1 with a custom JTAG debugger. Many
    of these chips are locked in RDP Level 2, and the paper also considers ways to
    downgrade the chip using live decapsulation and ultraviolet light. Garb and Obermaier
    (2020) extends this, with concrete notes on the layout of flash memory for laser
    fault injection on the STM32F0 series.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Obermaier 和 Tatschner（2017）的大部分内容讨论了在[第10章](ch10.xhtml#ch10)中，STM32F0系列的JTAG调试中的一个令人愉快的漏洞，允许使用自定义JTAG调试器从RDP等级1提取固件。这些芯片中的许多都被锁定在RDP等级2，论文还讨论了如何通过实时去壳和紫外线光降级芯片。Garb
    和 Obermaier（2020）扩展了这一研究，提供了关于STM32F0系列闪存布局和激光故障注入的具体笔记。
- en: To recap what’s explained in many different chapters of this book, RDP Level
    0 is entirely unlocked and Level 2 is entirely locked, allowing no debugging.
    Level 1 is a middle ground, in which a debugger is allowed but attaching the debugger
    disables access to flash memory. Because debugger access can be so handy to an
    attacker, such as for placing shellcode or for exploiting loopholes in the protection,
    a downgrade from Level 2 is a very valuable thing to have.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 总结本书中多个章节所解释的内容，RDP等级0完全解锁，等级2完全锁定，不允许调试。等级1是中间地带，允许使用调试器，但连接调试器会禁用对闪存的访问。由于调试器的访问对攻击者非常有用，例如用于放置shellcode或利用保护中的漏洞，从等级2降级是一件非常有价值的事情。
- en: The protection level is stored in option bytes as a pair of 16-bit words named
    `RDP` and `nRDP`. These words have a fixed value for Level 0 and a fixed value
    for Level 2, with *all* other values being Level 1\. So while we need a very specific
    value to drop to Level 0, flipping any single bit is sufficient to drop to Level
    1.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 保护级别存储在选项字节中，作为一对16位字，分别命名为`RDP`和`nRDP`。这些字对Level 0和Level 2有固定值，*所有*其他值为Level
    1。因此，虽然我们需要一个非常特定的值才能降到Level 0，但翻转任何一个单独的位就足以降到Level 1。
- en: '![Image](../images/f0313-01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0313-01.jpg)'
- en: 'Figure D.3: STM32F051 Top Metal'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图D.3：STM32F051顶层金属
- en: '![Image](../images/f0313-02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0313-02.jpg)'
- en: 'Figure D.4: STM32F051 Flash Layout'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图D.4：STM32F051闪存布局
- en: Knowing that ultraviolet light can raise flash memory bits from 0 to 1, Obermaier
    functionally decapsulated an STM32F051 and aimed UV-C light at it while repeatedly
    attempting to attach a debugger. After a few hours, the debugger connected and
    a single 0 bit of the `RDP`/`nRDP` option bytes had flipped to a 1\. Unfortunately,
    other bits of memory had also flipped, so masking was necessary for an unlock
    with minimal damage to the rest of memory. As with the PIC16 in [Chapter 19](ch19.xhtml#ch19),
    the mask might be made by painting the die directly with nail polish.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 了解到紫外线能够将闪存的位从0提升到1，Obermaier功能性地去除了STM32F051的封装，并将紫外线C射线照射到其上，同时反复尝试连接调试器。几个小时后，调试器成功连接，并且`RDP`/`nRDP`选项字节中的一个0位变成了1。不幸的是，其他的存储位也发生了变化，因此需要进行掩蔽，以最小化对其他存储的损坏进行解锁。与[第19章](ch19.xhtml#ch19)中的PIC16一样，掩蔽可以通过直接在芯片上涂抹指甲油来完成。
- en: The obvious solution to bit damage is to mask off memory, but first we need
    to know which physical region holds the option bytes. They filled all of flash
    memory in an unlocked chip with zeroes, then repeatedly re-read memory with a
    debugger as ultraviolet light spilled in past a plastic mask. In effect, this
    turned the chip into an image sensor, and all of the 1 bits indicated places of
    memory that were outside of the masked area.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对位损坏的显而易见解决方案是掩蔽存储器，但首先我们需要知道哪个物理区域包含选项字节。他们将所有闪存存储器在解锁芯片中填充为零，然后在紫外线光线穿过塑料掩蔽层照射的同时，反复使用调试器重新读取存储器。实际上，这将芯片变成了一个图像传感器，所有的1位表示存储器中被掩蔽区域外的地方。
- en: This revealed that the flash memory of the STM32F051 in [Figure D.3](app04.xhtml#chDfig3)
    has 1024-bit lines and 512-word lines, organized into 32-bit columns of 32-bit
    lines. Bit lines are perpendicular to the nearest edge of the chip, with the most
    significant bits on the left side and the least on the right side. The option
    bytes exist beneath wordline 0, with `RDP` and `nRDP` on the right half of the
    flash cell region, as they are the lower halves of 32-bit words. [Figure D.4](app04.xhtml#chDfig4)
    shows an approximate layout of the flash bit columns and the RDP word location.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明[图D.3](app04.xhtml#chDfig3)中的STM32F051闪存具有1024位行和512字行，组织成32位列的32位行。位线垂直于芯片最近的边缘，最重要的位在左侧，最不重要的位在右侧。选项字节位于字行0下方，`RDP`和`nRDP`位于闪存单元区域的右半部分，因为它们是32位字的下半部分。[图D.4](app04.xhtml#chDfig4)展示了闪存位列和RDP字位置的大致布局。
- en: Their best solution was a moving plastic mask that would expose just the bottom
    right edge of the flash memory. This achieved a few unlocks with no damage to
    firmware and many unlocks with only a few hundred firmware bits damaged, and a
    bitwise `AND` of two damaged firmware images is often sufficient to make one clean
    accurate image.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 他们最好的解决方案是一个移动的塑料掩蔽层，只暴露闪存的右下角边缘。这实现了几次解锁没有损坏固件，并且许多解锁只损坏了几百个固件位，而两个损坏的固件图像进行按位`AND`运算通常足以生成一个干净且准确的图像。
- en: '**D.4 MT1335WE Kamikaze**'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**D.4 MT1335WE 神风**'
- en: The MC13224 from [Chapter 14](ch14.xhtml#ch14) isn’t the only system-in-package
    (SiP) that combines a CPU chip without non-volatile memory with a standard SPI
    flash chip.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 来自[第14章](ch14.xhtml#ch14)的MC13224并不是唯一一款将没有非易失性存储器的CPU芯片与标准SPI闪存芯片结合的系统封装（SiP）。
- en: MediaTek’s MT1335WE can be found in DVD-ROM drives for the XBox 360, where its
    firmware is responsible for distinguishing between commercial discs and DVD-R
    discs that are made by a consumer DVD burner. Pirates figured out that these could
    be patched to accept burned discs, *but only if* the SPI flash of the MT1335WE
    were rewritten with patched firmware. The complication is that the SPI flash chip
    is bonded internally to the MT1335WE’s package, so there are no external pins
    to tap or packages to replace.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 联发科技的 MT1335WE 可以在 Xbox 360 的 DVD-ROM 驱动器中找到，其固件负责区分商业光盘和消费者 DVD 刻录机制作的 DVD-R
    光盘。盗版者发现，可以将这些光盘补丁使其接受刻录的光盘，*但只有在*重写了 MT1335WE 的 SPI Flash，并且固件被补丁化的情况下才行。复杂之处在于，SPI
    Flash 芯片是内置于 MT1335WE 封装中的，因此没有外部引脚可供接触，也没有可以替换的封装。
- en: Write protection is implemented through the chip’s !WP pin, just as if it were
    in a separate package. To bypass this control, we might tap the SPI flash chip’s
    !WP pin through its bond wire. This is described in sQuallen (2012), which cites
    Geremia and Carranzaf as collaborating on the discovery.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 写保护通过芯片的 !WP 引脚实现，就像它在一个单独的封装中一样。为了绕过这个控制，我们可能会通过键合线连接 SPI Flash 芯片的 !WP 引脚。这个过程在
    sQuallen（2012）中有所描述，并引用了 Geremia 和 Carranzaf 作为共同发现者。
- en: The idea is that the bond wires shown in [Figure D.6](app04.xhtml#chDfig6) are
    consistently placed the same across chips, even if the silk-screen labeling drifts
    a bit. It’s therefore possible to accurately hit a bond wire with a drill using
    the positioning shown in [Figure D.5](app04.xhtml#chDfig5), knowing that the bit
    will eventually collide with the bond wire. If you look closely at the second
    bond wire on the right side of the SPI flash, you’ll see that it has been cleanly
    cut in half by the drill.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法是，图 [D.6](app04.xhtml#chDfig6) 中显示的键合线在不同芯片之间的位置是一致的，即使丝印标注稍有偏差。因此，通过图 [D.5](app04.xhtml#chDfig5)
    中显示的定位方法，使用钻头准确击中键合线是可能的，知道钻头最终会与键合线碰撞。如果仔细观察 SPI Flash 右侧的第二根键合线，你会发现它已经被钻头干净利落地切断了一半。
- en: To perform the unlock, the drill bit is loosely attached through a pull-up resistor
    to the 3.3V pin. Early instructions suggested drawing a line over the package
    five pins from the east side and eight pins down from the north side, which is
    usually just southeast of the letter K in “Mediatek.” Later kits used a flex PCB
    as a stencil, with a small hold to place the drill bit.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行解锁操作，钻头通过一个上拉电阻松散地连接到 3.3V 引脚。早期的说明建议在封装的东侧画一条线，离东侧五个引脚、北侧八个引脚的位置，这通常位于“Mediatek”字母
    K 的东南方。后来的工具包使用了一个柔性 PCB 作为模板，模板上有一个小孔用于放置钻头。
- en: '![Image](../images/f0316-01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0316-01.jpg)'
- en: 'Figure D.5: MT1335WE Drilling Point'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 D.5：MT1335WE 钻孔点
- en: '![Image](../images/f0316-02.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0316-02.jpg)'
- en: 'Figure D.6: MT1335WE Bond Wires'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 D.6：MT1335WE 键合线
- en: Slowly spinning the bit without much pressure will dig through the packaging
    until the bond wire is reached, while in the background a PC repeatedly attempts
    to rewrite the SPI flash contents. This process fails at first, of course, because
    the drill hasn’t yet pulled the !WP line high, but eventually the drill reaches
    the wire and the SPI flash is unlocked!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 缓慢旋转钻头，施加较小的压力，直到钻透封装并触及到键合线，而在此过程中，PC 反复尝试重写 SPI Flash 内容。这个过程一开始会失败，因为钻头尚未拉高
    !WP 线，但最终钻头会接触到键合线，SPI Flash 就解锁了！
- en: sQuallen also mentions an attack with the piezo-electric spark of a grill lighter
    placed near the bond wire. As best I can tell, this is not to perform the initial
    unlock but to sort of “drift” the high-impedance input pin back to a high-voltage
    state. That allows a reprogramming after the bond wire is cut, but without further
    drilling.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: sQuallen 还提到了一种利用点燃打火机的压电火花攻击，将其放置在键合线附近。据我所知，这不是为了执行初始解锁，而是为了将高阻抗输入引脚“漂移”回高电压状态。这允许在切断键合线后进行重新编程，而无需进一步钻孔。
- en: '**D.5 Xilinx XCKU040 Backside Laser Injection**'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**D.5 Xilinx XCKU040 背面激光注入**'
- en: Lohrke et al. (2018) describes an infrared laser stimulation attack against
    the flip-chip packaged Xilinx XCKU040-1FBVA676, an FPGA with encrypted bitstreams.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Lohrke 等人（2018）描述了一种针对翻转芯片封装的 Xilinx XCKU040-1FBVA676 的红外激光刺激攻击，这是一种具有加密比特流的
    FPGA。
- en: This 20 nm chip has its backside exposed on the package, and the substrate of
    the chip is transparent to infrared light. This means that photography of the
    chip die can be performed from *outside* the package, *non-invasively*! See Huang
    (2022) for an equipment list if you’d like to make your own backside photographs
    without decapsulation.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个20纳米芯片的背面在封装上暴露，且芯片的基板对红外光透明。这意味着可以从*外部*对芯片芯片进行拍照，*非侵入性*地进行！如果你想在不解封的情况下拍摄自己的背面照片，请参考Huang（2022）中的设备列表。
- en: The XCKU040 is an FPGA whose bitstream is loaded at boot time from an external
    memory chip. To protect this bitstream from duplication or reverse engineering,
    it’s encrypted with a key that is held either in battery-backed SRAM (BBRAM) or
    in eFuses. BBRAM has the disadvantage of requiring a backup battery, but it offers
    some extra security in that invasive attacks that break the backup power supply
    will also destroy the key, preventing its recovery.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: XCKU040是一个FPGA，其位流在启动时从外部存储芯片加载。为了保护该位流不被复制或逆向工程，它使用一个密钥进行加密，该密钥保存在电池备份的SRAM（BBRAM）中或在eFuse中。BBRAM的缺点是需要备份电池，但它提供了一些额外的安全性，因为破坏备份电源的侵入性攻击也会摧毁密钥，防止其恢复。
- en: So, realizing that the silicon backside is exposed and transparent to infrared
    light, Lohrke used an infrared laser to strike SRAM cells in the battery-backed
    region, graphing the power consumption at each point. Sure enough, CMOS power
    leakage highlighted each bit cell in one orientation for a 1 and the opposite
    orientation for a 0, revealing the key!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，意识到硅背面暴露并对红外光透明，Lohrke使用红外激光照射电池备份区域中的SRAM单元，并在每个点上绘制功耗图。果然，CMOS功耗泄漏突出了每个比特单元，在一种方向上为1，而在相反的方向上为0，揭示了关键！
