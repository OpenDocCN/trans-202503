- en: '**1'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1**'
- en: THE REACTION-TIME MACHINE**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**反应时间机器**'
- en: '![image](../images/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common-01.jpg)'
- en: In this chapter, I will show you how to build a time machine—that is, a Reaction-Time
    Machine. I’d love to say that this project will bring you “back to the future,”
    but alas, it won’t. The “time” it’s looking at is the time it takes you to react
    to a stimulus, which makes for a fun game. This project is designed to accurately
    measure an individual’s reaction time and provide an area for comments on the
    level of the individual’s performance (see [Figure 1-1](ch01.xhtml#ch01fig1)).
    There is also plenty of room to personalize the game to make it even more fun
    for you, your friends, and your family.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将向你展示如何制作一个时光机——也就是反应时间机器。我很想说这个项目将带你“回到未来”，但遗憾的是，它做不到。它所看的“时间”是你对刺激的反应时间，这也让它成为一个有趣的游戏。这个项目旨在精确测量个人的反应时间，并为个人的表现提供反馈区域（见[图1-1](ch01.xhtml#ch01fig1)）。你还可以个性化游戏，使它对你、你的朋友和家人来说更加有趣。
- en: '![image](../images/f01-01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f01-01.jpg)'
- en: '*Figure 1-1: Completed Reaction-Time Machine*'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-1：完成的反应时间机器*'
- en: '**Required Tools**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**所需工具**'
- en: Soldering iron and solder
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 焊接铁和焊料
- en: Drill and drill bits
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 电钻和钻头
- en: Mounting tape
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 安装胶带
- en: Wire cutters
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 剪线钳
- en: '**Parts List**'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**零件清单**'
- en: This project has one of the smallest parts counts of all the projects in this
    book, but don’t let that attenuate its value for you. My family and friends have
    enjoyed playing the game repeatedly, and it’s portable, so you can take it with
    you to get-togethers and other events.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目的零件数量是本书中最少的，但不要因此小看它的价值。我的家人和朋友们反复享受这个游戏，而且它很便携，所以你可以带着它去聚会和其他活动。
- en: 'Here’s what you’ll need:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要以下材料：
- en: One Arduino Nano or clone
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Arduino Nano或克隆板
- en: Two SPST momentary switches (preferably one with a red button and one with a
    button of a different color)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 两个单刀单掷（SPST）瞬时开关（最好一个带红色按钮，另一个带不同颜色的按钮）
- en: One SPST toggle switch
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个单刀单掷（SPST）切换开关
- en: One red LED
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个红色LED
- en: Two 10-kilohm resistors
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 两个10千欧电阻
- en: One 470-ohm resistor
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一个470欧姆电阻
- en: (Optional) One audible annunciator, Mallory Sonalert or similar
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: （可选）一个可听见的指示器，Mallory Sonalert或类似设备
- en: One 4×20 LCD
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一个4×20 LCD
- en: One I²C adapter, if not included with the LCD (see “[Affixing the I²C Board
    to the LCD](ch00.xhtml#ch00lev1sec2)” on [page 3](ch00.xhtml#page_3))
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个I²C适配器，如果LCD未包含（请参阅[“将I²C板固定到LCD”](ch00.xhtml#ch00lev1sec2)，见[第3页](ch00.xhtml#page_3)）
- en: '**NOTE**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*I purchased a 16×2 LCD and its external I²C board separately and soldered
    the two together. However, many online vendors offer the same display and I²C
    adapter already soldered for about the same price or less than the two boards
    separately. Check eBay in particular*.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*我单独购买了一个16×2 LCD及其外部I²C板，并将两者焊接在一起。不过，许多在线商家提供已焊接好的相同显示器和I²C适配器，价格和单独购买两块板差不多，甚至更便宜。特别可以查看eBay*。'
- en: One 9V battery
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个9V电池
- en: One 9V battery clip
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一个9V电池夹
- en: One 3.5 mm jack (if remote switch is used)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一个3.5毫米插孔（如果使用远程开关）
- en: One Hammond 1591 BTCL enclosure
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Hammond 1591 BTCL外壳
- en: 28-or 30-gauge hookup wire
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 28号或30号连接线
- en: 22-gauge solid conductor wire
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 22号固态导线
- en: '**Downloads**'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**下载**'
- en: 'Before you start this project, check the following resource files for this
    book at *[https://www.nostarch.com/arduinoplayground/](https://www.nostarch.com/arduinoplayground/)*:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始这个项目之前，请检查本书的以下资源文件，网址是 *[https://www.nostarch.com/arduinoplayground/](https://www.nostarch.com/arduinoplayground/)*
- en: '**Sketch file** *Reaction.ino*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**草图文件** *Reaction.ino*'
- en: '**Drilling template for case** *ReactionEnclosure.pdf*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**外壳的钻孔模板** *ReactionEnclosure.pdf*'
- en: '**Reaction vs. Reflex**'
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**反应与反射**'
- en: People often confuse reactions and reflexes, so I will start by defining both.
    *Reflexes* are involuntary, automatic responses to a stimulus. In a reflex action,
    the stimulus bypasses the brain and travels from the source of the stimulus to
    the spinal cord and back to the receptor that controls the response, without any
    cognitive acknowledgment. (Though I know many people for whom almost all stimuli—and
    information—seem to bypass the brain, often just getting lost instead.) Think
    of the doctor hitting your knee with a patellar hammer to trigger your knee-jerk
    reflex.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 人们常常将反应和反射混淆，所以我会从定义这两者开始。*反射*是对刺激的非自愿、自动反应。在反射动作中，刺激绕过大脑，直接从刺激源传递到脊髓，再返回控制反应的受体，而不经过任何认知反应。（尽管我知道很多人几乎所有的刺激和信息——似乎都会绕过大脑，经常只是迷失在途中。）想象一下医生用膝盖锤敲击你的膝盖，以触发膝跳反射。
- en: '*Reactions*, on the other hand, take the stimulus to the brain to be processed,
    and then a return reaction travels to a receptor to result in some motor action.
    This process takes somewhat longer than a typical reflex, though some athletes
    are said to have reaction times so fast that it’s possible their response is more
    similar to a reflex than a reaction.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*反应*则是将刺激信号传递到大脑进行处理，然后通过神经传导返回反应器，产生某种运动行为。这个过程比典型的反射反应稍慢，尽管一些运动员据说拥有极快的反应时间，他们的反应可能更接近反射而不是反应。'
- en: '**NOTE**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: Sports Illustrated *has done interesting work in this area, with eye-opening
    articles on baseball players and other athletes who have what appear to be exceptional
    reaction times*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 《体育画报》*在这一领域做了有趣的研究，发表了关于棒球运动员和其他运动员的文章，这些运动员的反应时间似乎异常迅速*。
- en: '**How Does the Game Work?**'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**游戏是如何运作的？**'
- en: 'The Reaction-Time Machine game measures how long it takes an individual to
    press a button in response to a visual stimulus—in this case an LED. With a minor
    modification, you can add an auditory stimulus to the game: simply replace the
    LED with an audible annunciator, such as a Mallory Sonalert. Reaction time is
    measured in milliseconds or seconds (your choice), and it is the time between
    the moment the stimulus is activated and the moment the participant presses the
    button.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 反应时间机器游戏测量的是个人在看到视觉刺激（在本例中为LED）后，按下按钮所需的时间。通过一个小的修改，你可以在游戏中加入听觉刺激：只需将LED替换为一个可听的提示音装置，如Mallory
    Sonalert。反应时间以毫秒或秒为单位（由你选择），它是从刺激激活的那一刻到参与者按下按钮的那一刻之间的时间。
- en: '**HISTORY OF REACTION-TIME DEVICES**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**反应时间设备的历史**'
- en: Over the years, there have been many devices to measure reaction time. One of
    the simplest I remember from years ago required you to keep your fingers on either
    side of a ruler held by another person in mid-air. When the ruler was dropped,
    you would see how far it traveled before you could grasp it. The distance was
    translated to time using the algebraic equation
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，出现了许多测量反应时间的设备。我记得其中一个最简单的设备要求你将手指放在由另一个人悬空拿着的标尺两端。当标尺掉落时，你需要看它在你抓住它之前移动了多远。这个距离可以通过代数公式转化为时间。
- en: '![image](../images/e0028-01.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/e0028-01.jpg)'
- en: where *S* is the distance traveled, *A* is the acceleration due to gravity,
    and *T* is the reaction time. After you build this project, try both the ruler
    test and the Reaction-Time Machine to see how close your times are between devices.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 其中*S*是移动的距离，*A*是重力加速度，*T*是反应时间。在完成这个项目后，你可以同时进行标尺测试和反应时间机器测试，看看两个设备之间的时间差距有多小。
- en: '***Measuring Time with the Arduino Nano***'
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用Arduino Nano测量时间***'
- en: While there are many ways to measure elapsed time, this project takes advantage
    of the Arduino Nano’s ability to keep accurate time. Microcontrollers keep time
    exceptionally well, and they measure the time that elapses between one input and
    another with a minimum latency. In addition to timing your reactions, the Nano
    shows the result on an LCD.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有许多方法可以测量经过的时间，但这个项目利用了Arduino Nano保持准确时间的能力。微控制器非常擅长保持时间，它们能够以最小的延迟测量一个输入与另一个输入之间的时间间隔。除了计时你的反应外，Nano还会在LCD屏幕上显示结果。
- en: The Nano does almost all of the work in this project; the other components are
    basically passive. After testing some early builds, I added features to the sketch
    to make the game more interesting and accurate. For example, I initially used
    a simple pushbutton to reset the Nano and start a counter. The participant would
    press the red stop button as soon as the LCD indicated so, and the Nano measured
    the time between pressing the reset and stop buttons. I found, however, that the
    player could anticipate the reset button being pushed and come up with some amazing
    reaction times.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Nano几乎完成了这个项目的所有工作；其他组件基本上是被动的。在测试了一些初期版本后，我对草图进行了功能增强，使游戏更有趣且更精准。例如，我最初使用一个简单的按钮来重置Nano并启动计时器。参与者会在LCD显示时按下红色停止按钮，Nano测量重置按钮和停止按钮按下之间的时间。然而，我发现玩家可以预见到重置按钮被按下，从而获得一些令人惊叹的反应时间。
- en: To prevent the player from anticipating when the stimulus is about to occur,
    I had the Nano start the timer on a delay instead. The version in this book generates
    a random delay from when the reset button is depressed, activates the stimulus
    after the random delay, and counts the time from the stimulus to the moment the
    participant responds by depressing the stop button. That solved one problem.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止玩家预期刺激何时出现，我让Nano延迟启动计时器。书中的版本生成一个从按下重置按钮开始的随机延迟，在随机延迟后激活刺激，并从刺激到玩家按下停止按钮的时刻开始计时。这样解决了一个问题。
- en: Then, one of the participants tried to jump the gun and get an early start by
    holding down the stop button. I solved this problem by setting a minimum reaction
    time in the sketch. Any time under that minimum throws an error, and the LCD displays
    “Jumped the Gun” to indicate that the player pressed the button too soon.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，其中一位参与者试图提前行动，通过按住停止按钮来提前开始。我通过在草图中设置一个最小反应时间来解决这个问题。任何低于该最小值的反应时间都会触发错误，LCD屏幕上会显示“Jumped
    the Gun”，表示玩家按得太快。
- en: I used a relatively large display—4 lines with 20 characters each—so there would
    be enough room to display the reflex time and some commentary on the relative
    prowess of the player. You can make your commentary as funny or serious as you
    want, but it must not exceed 60 characters in length—that is, three lines of 20
    characters each. While I leave the commentary up to you, the sketch for this project
    includes some ideas that I used when putting it together. You can always edit
    the commentary and reload the sketch to show comments specific to a set of users,
    like friends or relatives.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了一个相对较大的显示器——4行，每行20个字符——以便有足够的空间显示反应时间以及一些关于玩家相对能力的评论。你可以根据自己的喜好将评论写得幽默或严肃，但必须不超过60个字符——也就是说，每行最多20个字符，三行总共60个字符。虽然我将评论留给你来定制，但该项目的草图中包含了一些我在制作过程中使用的想法。你总可以编辑评论并重新加载草图，以显示适合一组用户（如朋友或亲戚）的评论。
- en: '***Expected Speed Ranges***'
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***预期的速度范围***'
- en: Most individuals’ reaction times seem to vary greatly, based on the small sample
    I tested. Interestingly, age doesn’t seem to be a factor. The average reaction
    time was around 200 milliseconds, and that is the average reaction time identified
    by many researchers.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我测试的小样本，大多数个体的反应时间似乎差异很大。有趣的是，年龄似乎并不是一个因素。平均反应时间大约为200毫秒，这也是许多研究人员所确定的平均反应时间。
- en: The fastest response of anyone I sampled was 105 milliseconds; however, the
    individual was not able to repeat that performance. Several individuals scored
    between 105 and 125 milliseconds, but not consistently. Significantly lower reaction
    times may well be anomalous or the result of an individual actually anticipating
    the stimulus. My players’ failure to repeat extremely fast reaction times would
    tend to bolster that idea. (I wouldn’t want to accuse anyone of successfully pre-guessing
    the release moment.)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我测试的样本中，反应最快的人为105毫秒；然而，这位个体无法重复这一表现。几位个体的成绩介于105毫秒和125毫秒之间，但并不稳定。显著更低的反应时间可能是异常的，或者是个体提前预期到刺激的结果。我玩家们未能重复极快反应时间，这一现象可能进一步支持这个观点。（我并不想指责任何人成功地预猜了释放时刻。）
- en: '**The Schematic**'
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**原理图**'
- en: 'While the display could have been wired directly, using the I²C interconnect
    made it a lot simpler and reduced the interface to only four wires: positive,
    ground, data, and clock (see [Figure 1-2](ch01.xhtml#ch01fig2)).'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然显示器本可以直接接线，但使用I²C互联让事情变得简单得多，且将接口减少为仅四根电线：正极、地线、数据线和时钟线（见[图1-2](ch01.xhtml#ch01fig2)）。
- en: The only components needed are the Nano, three switches (one toggle switch for
    power and two momentary pushbutton switches for activate and reset), an LED, the
    display, and three resistors. Despite the relatively sparse parts count, the project
    performs elegantly.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 需要的组件只有Nano、三个开关（一个电源切换开关和两个短按按钮开关用于激活和重置）、一个LED、显示器和三个电阻。尽管零件数量相对较少，但该项目运行得非常简洁优雅。
- en: '![image](../images/f01-02.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f01-02.jpg)'
- en: '*Figure 1-2: Schematic diagram of the Reaction-Time Machine*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-2：反应时间机器的原理图*'
- en: '**The Breadboard**'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**面包板**'
- en: 'As is the case for most of my Arduino projects, the first step is to prepare
    a breadboard to prove the concept and test the sketch. Here’s how to wire up the
    breadboard:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我大多数Arduino项目一样，第一步是准备面包板来验证概念并测试草图。以下是如何接线面包板：
- en: Connect the red positive rails on the breadboard together.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将面包板上的红色正极轨道连接在一起。
- en: Connect the blue negative rails on the breadboard together.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将面包板上的蓝色负极导轨连接在一起。
- en: Insert the Arduino Nano (or clone) in the breadboard, leaving two rows on one
    side and three on the other. (If the Nano does not come with stakes soldered in,
    see “[Preparing the Arduino Board](ch00.xhtml#ch00lev1sec1)” on [page 2](ch00.xhtml#page_2).)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Arduino Nano（或克隆板）插入面包板，保持一侧留两行，另一侧留三行。（如果Nano板没有焊接插针，请参见“[准备Arduino板](ch00.xhtml#ch00lev1sec1)”第2页。）
- en: Connect the 5V terminal on the Nano to the red positive rail on the breadboard.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Nano板的5V端子连接到面包板上的红色正极导轨。
- en: Connect the GND terminal on the Nano to the blue negative rail on the breadboard.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Nano板的GND端子连接到面包板上的蓝色负极导轨。
- en: Connect the negative wire from the battery connector to the blue negative rail.
    Remember that the breadboard has no switch, so you must disconnect the battery
    to turn it off.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将电池连接器的负极电线连接到蓝色负极导轨。记住，面包板没有开关，所以你必须断开电池才能关闭它。
- en: Connect the positive lead from the battery connector to VIN on the Nano. (Do
    not connect the positive terminal of the battery to the red positive rail—it could
    permanently damage the Nano.)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将电池连接器的正极引线连接到Nano板的VIN端口。（不要将电池的正极端子连接到红色正极导轨，这可能会永久损坏Nano板。）
- en: Attach 5-inch wires to two normally open momentary pushbutton switches. (I use
    22-gauge solid conductor wire so it can plug in to the breadboard directly.)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将5英寸的电线连接到两个常开型瞬时按钮开关。（我使用22号实心导线，这样它可以直接插入面包板。）
- en: Prepare a wire harness for the LCD (see “[Affixing the I²C Board to the LCD](ch00.xhtml#ch00lev1sec2)”
    on [page 3](ch00.xhtml#page_3)).
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为LCD准备一条电缆束（请参见“[将I²C板固定到LCD上](ch00.xhtml#ch00lev1sec2)”第3页）。
- en: Connect the red wire from the LCD to the red positive rail on the breadboard
    (5V) and the black wire from the LCD to the blue negative rail.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将LCD的红色电线连接到面包板上的红色正极导轨（5V），黑色电线连接到蓝色负极导轨。
- en: Insert the yellow wire from the display (SDA) to pin A4 on the Nano.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将显示器的黄色电线（SDA）插入Nano板的A4引脚。
- en: Insert the green wire from the display (SCL) to pin A5 on the Nano.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将显示器的绿色电线（SCL）插入Nano板的A5引脚。
- en: Connect one side of each pushbutton switch to the blue negative rail.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每个按钮开关的一侧连接到蓝色负极导轨。
- en: Connect the other side of the red reaction switch (SW2) to pin D7 on the Nano.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将红色反应开关（SW2）的另一侧连接到Nano板的D7引脚。
- en: Connect the other side of the yellow reset switch (SW1) to pin D2 on the Nano.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将黄色重置开关（SW1）的另一侧连接到Nano板的D2引脚。
- en: Connect a 10-kilohm resistor from pin D7 on the Nano to the red positive rail.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Nano板的D7引脚连接一个10千欧姆电阻到红色正极导轨。
- en: Connect a 10-kilohm resistor from pin D2 on the Nano to the red positive rail.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Nano板的D2引脚连接一个10千欧姆电阻到红色正极导轨。
- en: Connect the anode side of the LED (the longer leg) to the red positive rail
    and the cathode side to an empty row on the breadboard.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将LED的阳极端（较长的引脚）连接到红色正极导轨，阴极端连接到面包板上的一个空行。
- en: Connect a 470-ohm resistor from the cathode side of the LED to pin D4 on the
    Nano.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从LED的阴极端连接一个470欧姆电阻到Nano板的D4引脚。
- en: Upload the *Reaction.ino* sketch to the Arduino Nano (see “[Uploading Sketches
    to Your Arduino](ch00.xhtml#ch00lev1sec3)” on [page 5](ch00.xhtml#page_5)), and
    you should now be ready to go. [Figure 1-3](ch01.xhtml#ch01fig3) shows the breadboard
    laid out with the switches dangling from their wires.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 将*Reaction.ino*草图上传到Arduino Nano（请参见“[上传草图到你的Arduino](ch00.xhtml#ch00lev1sec3)”第5页），此时你应该准备好开始使用。[图1-3](ch01.xhtml#ch01fig3)展示了面包板上的布局，开关通过电线悬挂。
- en: '![image](../images/f01-03.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f01-03.jpg)'
- en: '*Figure 1-3: The breadboard setup for the Reaction-Time Machine. Because there
    is no on/off switch, you have to disconnect the battery to shut it off*.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-3：反应时间机器的面包板布局。由于没有开/关开关，你必须断开电池才能关闭它*。'
- en: '**The Sketch**'
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**草图**'
- en: The sketch is the actual computer program that tells the Arduino what to do
    and when to do it. It is written in a language of its own that comprises structures,
    variables, arrays, functions, and so on, which represent a recipe for the microcontroller
    to follow. This language is converted into a sequence of zeros and ones that are
    routed to various parts of the controller and can perform storage, timing, comparison,
    arithmetic functions, and more.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 草图是实际的计算机程序，它告诉Arduino做什么以及何时做。它使用自己独特的语言编写，包含结构、变量、数组、函数等，这些构成了微控制器遵循的“食谱”。这个语言会被转换成一串零和一，传递到控制器的不同部分，执行存储、计时、比较、算术运算等功能。
- en: The process of converting a computer language to a sequence of zeros and ones
    is called *compiling*. The compiling routine in the Arduino Integrated Development
    Environment (IDE) is activated when you click the Verify and Compile buttons in
    the upper-left side of the Sketch window.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 将计算机语言转换为一系列零和一的过程被称为*编译*。当你点击草图窗口左上角的验证和编译按钮时，Arduino集成开发环境（IDE）中的编译例程将被激活。
- en: The sketch gets pretty long because of all the messages that can be inserted
    when it checks the score; however, the basic operation uses only a handful of
    code lines. You can use the scoring function as is, modify it, or copy and paste
    it to make a new scoring function. As you’ll see in my messages options, I’ve
    had fun with it.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在检查分数时可以插入所有的消息，草图变得相当长；然而，基本操作只需要少量代码行。你可以按原样使用评分函数，修改它，或者复制粘贴来创建新的评分函数。正如你在我的消息选项中看到的，我已经玩得很开心了。
- en: The following code has been truncated to minimize the number of lines. However,
    you can simply go to *[https://www.nostarch.com/arduinoplayground/](https://www.nostarch.com/arduinoplayground/)*
    to download the entire sketch, which includes a number of messages.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码已被截断，以减少行数。然而，你可以简单地访问*[https://www.nostarch.com/arduinoplayground/](https://www.nostarch.com/arduinoplayground/)*下载完整的草图，其中包含多个消息。
- en: '[PRE0]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `#include` lines initiate the libraries: the I²C library, *Wire.h*, establishes
    the rules for I²C communications, and the LiquidCrystal library allows the Arduino
    to control LCDs. Then, we define the seven variables used to calculate reaction
    time. Next, `setup()` sets up the serial communication—in case you want to adjust
    the code and view it on the serial monitor—and defines various pins as inputs
    and outputs. Inputs are required for the reset and stop buttons, and an output
    pin is defined for the LED that tells the player when to press the stop button.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`#include`行初始化了库：I²C库，*Wire.h*，建立了I²C通信的规则，液晶显示库允许Arduino控制LCD。接下来，我们定义了七个用于计算反应时间的变量。然后，`setup()`设置了串行通信——以便你可以调整代码并在串行监视器上查看——并将不同的引脚定义为输入和输出。输入引脚用于复位和停止按钮，输出引脚用于定义LED，提示玩家何时按下停止按钮。'
- en: '***Customized Reaction Commentary***'
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***自定义反应评论***'
- en: One of the most entertaining aspects of this project is the chance to get creative
    when displaying the player’s reaction time. After `setup()`, the sketch shows
    a function called `score()`, which lists different comments that could be displayed
    on the LCD based on the participant’s response speed. A function may not necessarily
    be the most efficient approach (a look-up table or other approach could also have
    been used), but it works well enough. I used only a single scoring function in
    this iteration; however, you could easily define as many as you like and change
    your sketch to select one. For example, you might write a second function called
    `score1()` that could include a different set of comments and timing. Then, to
    switch from one function to the other, you’d have to change only the line that
    calls `score()` to call `score1()` instead.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目最有趣的方面之一是有机会在展示玩家反应时间时发挥创意。在`setup()`之后，草图展示了一个名为`score()`的函数，根据参与者的反应速度列出可以显示在LCD上的不同评论。函数未必是最有效的方式（也可以使用查找表或其他方法），但它足够有效。我在这个版本中只使用了一个评分函数；然而，你可以轻松地定义任意多个，并修改草图来选择其中一个。例如，你可能会编写第二个名为`score1()`的函数，包含不同的评论和时机。然后，为了在两个函数之间切换，你只需更改调用`score()`的那一行，改为调用`score1()`。
- en: To customize the sketch to include comments that could refer to your own friends
    or family members, you can simply enter your comments in place of the ones that
    are in my sketch. Don’t forget to keep the text you want to print to the LCD in
    quotes so the Arduino recognizes the printable characters.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要自定义草图以包含可以引用你自己朋友或家人的评论，你只需将我的草图中的评论替换为你自己的评论。不要忘记将你想要打印到LCD上的文本放在引号内，以便Arduino能够识别可打印的字符。
- en: 'A word on the reaction time itself: each comment is for a range of reaction
    times of either 5 or 10 milliseconds. I selected these ranges arbitrarily. After
    you play with the Reaction-Time Machine for a bit, you may wish to change these
    ranges based on the fact that users’ responses may cluster around a particular
    area, such as from 195 to 225 milliseconds. I found that many reaction times were
    in the 190 to 250 milliseconds range, but your friends and family may be different.
    In that case, you can separate the comments by as little as 1 or 2 milliseconds
    so players don’t keep getting the same comment.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 关于反应时间本身的说明：每个评论适用于5或10毫秒的反应时间范围。我选择这些范围是随意的。在你玩了反应时间机器一会儿之后，你可能希望根据用户的反应集中在某个特定区域（比如从195到225毫秒）来调整这些范围。我发现许多反应时间在190到250毫秒之间，但你的朋友和家人的情况可能会有所不同。在这种情况下，你可以将评论之间的间隔设置为1或2毫秒，以避免玩家一直得到相同的评论。
- en: You can add as many comments as you wish, up to one comment per millisecond.
    If you accidentally overlap the times, the sketch may not compile.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以根据需要添加任意多的评论，最多每毫秒一个评论。如果你不小心重叠了时间，程序可能无法编译。
- en: '**NOTE**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*You can find reaction-time measurement tools on the web if you want to see
    how your game’s measurements compare. However, their accuracy is suspect because
    of the latency in the PC itself*.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你想了解你的游戏测量结果如何与网络上的反应时间测量工具进行比较，可以在网上找到这些工具。不过，由于PC本身的延迟，这些工具的准确性可能存在问题*。'
- en: '**ON WRITING CODE TO SET UP LCDS**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于编写代码以设置LCD的说明**'
- en: There are a few points to note about the setup of the LCD. The sketch uses a
    LiquidCrystal library, *LiquidCrystal_I2C.h*. If this library is not included
    in your Arduino IDE, you can easily download it using the instructions provided
    in the reference section on the Arduino website (*[http://www.arduino.cc/reference/](http://www.arduino.cc/reference/)*).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 关于LCD设置有几点需要注意。这个示例使用了LiquidCrystal库，*LiquidCrystal_I2C.h*。如果你的Arduino IDE没有包含这个库，你可以按照Arduino网站上的参考部分的说明轻松下载该库（*
    [http://www.arduino.cc/reference/](http://www.arduino.cc/reference/) *）。
- en: 'In addition, each I²C device comes with its own I²C address. This allows several
    I²C devices to be used on a single serial line. Usually the device documentation
    provides the address—in the case of the I²C LCD I used, the address was 0x3F.
    Thus, when the sketch initiates the LCD, the code looks like this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，每个I²C设备都有自己的I²C地址。这允许多个I²C设备通过一条串行线连接。通常设备文档会提供地址——在我使用的I²C LCD的例子中，地址是0x3F。因此，当程序初始化LCD时，代码看起来是这样的：
- en: '[PRE1]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: However, different displays come with different addresses. If you have an I²C
    device that you do not have an address for, you can easily find the address by
    hooking up the device to an Arduino, downloading a scanner sketch from *[http://playground.arduino.cc/Main/i2cScanner/](http://playground.arduino.cc/Main/i2cScanner/)*,
    and running the sketch. The scanner sketch should display the I²C address on the
    serial monitor.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，不同的显示器具有不同的地址。如果你有一个I²C设备但不知道其地址，你可以通过将设备连接到Arduino，下载一个扫描程序并运行它，轻松找到该地址。扫描程序应该会在串行监视器上显示I²C地址。
- en: Many projects in this book use similar code to work with an LCD, so refer to
    this box any time you need a refresher on how that code works.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的许多项目都使用类似的代码来操作LCD，因此每当你需要复习这段代码如何工作的时，可以参考这个框。
- en: '***What Happens in the Loop***'
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***循环中发生的事情***'
- en: Now let’s look at the sketch’s loop. After `void loop()` initiates the start
    of the program, the program calls `digitalWrite(4, HIGH)` to turn off the active
    light. Then, the LCD screen is cleared, and text is written to the LCD to indicate
    that the system is armed and ready for a player to push the reaction button as
    soon as the red LED illuminates.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下程序的循环部分。在`void loop()`启动程序后，程序调用`digitalWrite(4, HIGH)`来关闭活动指示灯。然后，LCD屏幕被清除，并写入文本，表示系统已启动并准备好让玩家在红色LED点亮时按下反应按钮。
- en: 'Next, a random number between 5 and 25 is generated, and the program calls
    `delay(5000)` to count every five seconds from zero to the random number. As soon
    as the random number is reached, three things happen: first, the annunciator lamp
    illuminates; second, an internal timer is started in the Nano; and third, the
    display then changes to read “Mash the React Button.”'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，生成一个5到25之间的随机数，程序调用`delay(5000)`来从零开始每五秒钟计数，直到达到随机数。一旦达到了随机数，三件事会发生：首先，指示灯亮起；其次，Nano中的内部计时器开始计时；第三，显示器将改变为“按下反应按钮”。
- en: '**NOTE**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*A wider range of random numbers might make this game even more interesting
    for players. You can easily experiment by changing the random number count, the
    delay, or both*.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*更广泛的随机数范围可能会使这个游戏对玩家来说更加有趣。你可以通过改变随机数的数量、延迟或两者的组合来轻松进行实验*。'
- en: The Nano is then instructed by `while(digitalRead(7) == 1);` to wait until the
    reaction button is depressed. After the button is depressed, the Nano calculates
    the reaction time with `reacttime = stop_time - start_time`. This time will be
    displayed on the LCD and used to select the appropriate comment in the `score()`
    function. Also, if the player’s reaction time is less than 70 milliseconds at
    this point, then the conditional statement looking for a participant to be “jumping
    the gun” displays appropriate wording for the LCD. The system is then halted and
    ready to be reset.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，Nano通过`while(digitalRead(7) == 1);`等待直到反应按钮被按下。按钮按下后，Nano计算反应时间，公式为`reacttime
    = stop_time - start_time`。这个时间会显示在LCD上，并用于选择`score()`函数中的适当评论。此外，如果玩家的反应时间小于70毫秒，条件语句会显示“抢先反应”的相应文字在LCD上。系统随后会停止，准备好进行重置。
- en: Otherwise, the serial print block is included in case you want to adjust the
    code and view it on a serial monitor. It also helps for debugging purposes.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，串口打印模块已经包含在内，以便你在调整代码并在串口监视器上查看时使用。它也有助于调试。
- en: Finally, the `score()` function is invoked, followed by the `Halt` command,
    and the system is ready to have the reset button depressed.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，调用`score()`函数，然后执行`Halt`命令，系统就准备好重置按钮被按下。
- en: '**Construction**'
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建**'
- en: Building the Reaction-Time Machine can be as simple or as complex as you want.
    Initially, I placed all the components in the vinyl package that a flexible wrist
    brace came in. I cut a hole for the display connectors with an X-ACTO knife and
    punched the holes for the switches and LED with a paper punch, followed by a tapered
    reamer. The result was somewhat crude, as shown in [Figure 1-4](ch01.xhtml#ch01fig4).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 构建反应时间机器可以根据需要简单或复杂。最初，我将所有组件放入了一个柔性手腕支架的塑料包装中。我用X-ACTO刀割了一个孔给显示器连接器，并用打孔器和锥形扩孔器打了开关和LED的孔。结果有些粗糙，如[图1-4](ch01.xhtml#ch01fig4)所示。
- en: '![image](../images/f01-04.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f01-04.jpg)'
- en: '*Figure 1-4: This was the Reaction-Time Machine’s original, primitive package,
    which worked but turned out to be too flimsy. The vinyl was only 0.018 inches
    thick*.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-4：这是反应时间机器的最初原始包装，虽然能用，但太脆弱。塑料薄膜厚度仅为0.018英寸*。'
- en: '***Preparing a Sturdy Case***'
  id: totrans-116
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***准备一个坚固的外壳***'
- en: Of course, a real case makes the game much sturdier, which is important when
    you have competitive players mashing those buttons. To keep things as simple as
    possible, I employed one of the clear ABS plastic cases from Hammond (1591 BTCL).
    The clear top of the case allowed me to place the display behind the cover rather
    than machining out a hole for the display to protrude through. To mount the components,
    I simply drilled holes in the cover according to the drawing in [Figure 1-5](ch01.xhtml#ch01fig5).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，真实的外壳会让游戏更加坚固，这在竞争激烈的玩家不断按按钮时尤为重要。为了保持尽可能简单，我使用了Hammond（1591 BTCL）的一款透明ABS塑料外壳。外壳的透明顶部让我可以将显示器放在盖子后面，而不是为了让显示器突出而开孔。为了安装组件，我按照[图1-5](ch01.xhtml#ch01fig5)中的图纸在盖子上钻了孔。
- en: '![image](../images/f01-05.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f01-05.jpg)'
- en: '*Figure 1-5: Drilling template for the Reaction-Time Machine*'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-5：反应时间机器的钻孔模板*'
- en: Quarter-inch holes work well for the momentary pushbutton switches, as well
    as for the toggle switch and 3.5 mm jack. For the 10 mm LED, I used a 3/8-inch
    drill and then reamed the hole out to make a tight fit. No other mounting hardware
    for the LED was necessary.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 四分之一英寸的孔适合瞬时按键开关、切换开关和3.5毫米插孔。对于10毫米的LED，我使用了3/8英寸的钻头，然后扩孔使其紧密配合。LED不需要其他安装硬件。
- en: '**NOTE**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The 3.5 mm jack is wired in parallel to the execute switch. If you want to
    use an external stand-alone switch, it can simply plug in to the jack. I abandoned
    the effort, however, as most participants preferred to hold the box in their hands*.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*3.5毫米插孔与执行开关并联。如果你想使用外部独立开关，可以直接插入插孔。然而，我放弃了这个尝试，因为大多数参与者更喜欢手持盒子*。'
- en: '***Mounting the Hardware***'
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***硬件安装***'
- en: To mount the display to the case, I used two-sided 3M Indoor/Outdoor Super Heavy
    Duty mounting tape. I cut two sections the size of the LCD display’s end bezel
    sections and bonded the display directly to the cover. The tape is difficult to
    remove, so make sure to place it right the first time. I used the same tape to
    mount the Nano and the battery holder to the back of the display. When mounting
    the display, I also used wire cutters to carefully cut off the corners of the
    display circuit board so it would fit far enough into the case without hitting
    the cover mounting pylons. See [Figure 1-6](ch01.xhtml#ch01fig6) for the finished
    product, viewed from the underside.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将显示器安装到外壳上，我使用了 3M 双面室内/室外超重型安装胶带。我裁剪了两段与 LCD 显示器端框相同大小的胶带，并将显示器直接粘贴到盖子上。该胶带难以移除，因此务必第一次就放置准确。我还使用相同的胶带将
    Nano 和电池座安装到显示器背面。在安装显示器时，我还使用了剪线钳小心地剪去显示电路板的角落，以便它能足够深入外壳而不碰到盖子的安装支柱。请参见[图 1-6](ch01.xhtml#ch01fig6)，这是从底部看到的完成品。
- en: Once all the components are in place, all that remains is to solder the components
    together, inserting the resistors where required. Take particular note of the
    I²C adapter, which is the black paddleboard just below the switches and LED. While
    I could have bent the connectors and used a header to wire that up, the case may
    not have closed, depending on how carefully I crimped the connectors. Instead,
    I elected to solder the wires directly. It was only four wires, and it worked
    without much trouble. Finally, I printed out and attached labels from a Brother
    label maker. [Figure 1-7](ch01.xhtml#ch01fig7) shows the completed unit.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有组件到位，剩下的就是将它们焊接在一起，并在需要的地方插入电阻。特别需要注意的是 I²C 适配器，它是位于开关和 LED 下方的黑色小板。虽然我本可以弯曲连接器并使用排针连接，但根据我如何压接连接器，外壳可能无法关闭。因此，我选择将电线直接焊接。只有四根电线，而且焊接时没有太多困难。最后，我打印出来并附上了来自
    Brother 标签机的标签。[图 1-7](ch01.xhtml#ch01fig7)展示了完成的装置。
- en: '![image](../images/f01-06.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f01-06.jpg)'
- en: '*Figure 1-6: This is the rear of the unit mounted in the ABS plastic enclosure.
    Notice that the corners of the display (lower left and right) have been clipped
    off to fit around the top mounting pylons. The 3.5 mm jack is not wired, as I
    decided not to use it in this implementation*.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-6：这是安装在 ABS 塑料外壳中的装置背面。注意显示器的角落（左下和右下）已经被剪掉，以适应顶部安装支柱。3.5 mm 插孔未接线，因为我决定在此实现中不使用它*。'
- en: '![image](../images/f01-07.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f01-07.jpg)'
- en: '*Figure 1-7: The completed Reaction-Time Machine mounted in the Hammond 1591
    BTCL clear plastic enclosure*'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-7：安装在 Hammond 1591 BTCL 透明塑料外壳中的完整反应时间机器*'
- en: '**Ideas for Customization**'
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**定制化的想法**'
- en: There are many variations you could implement to increase the versatility and
    enjoyment of the Reaction-Time Machine. For example, as I developed it, I connected
    a Hall effect switch to one of the analog inputs and modified the sketch to automatically
    decrease the reaction time by a percentage when the Hall effect switch is activated.
    Then, I taped a small magnet to my finger that sat opposite the Hall effect switch
    so as I grabbed the box, it activated the switch. When I played, my reaction time
    was reduced by around 20 percent, while others had an actual reading. Far be it
    from me to suggest that readers try to hoodwink their adversaries, of course!
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以实现许多变化来增加反应时间机器的多功能性和娱乐性。例如，在我开发时，我将霍尔效应开关连接到其中一个模拟输入，并修改了程序，在激活霍尔效应开关时，自动减少一定百分比的反应时间。然后，我在手指上粘贴了一个小磁铁，磁铁与霍尔效应开关正对着，这样我握住盒子时，它就会激活开关。在我玩的时候，我的反应时间减少了大约
    20%，而其他人则有一个实际的读数。当然，我并不建议读者去欺骗对手！
- en: There are other modifications that can be made, such as incorporating a tone
    sound, or beep, as the sketch counts up to the random number. This can easily
    be accomplished with the addition of an annunciator and a few lines of code. If
    you’re ingenious, there are other sound effects you could add, such as a vulgar
    sound that plays when poor scores are achieved.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他可以进行的修改，例如在草图计数到随机数时添加音调或哔声。通过添加一个提示音和几行代码，便可以轻松实现。如果你足够聪明，还可以添加其他音效，例如在得分较低时播放的粗俗声音。
- en: You can also exercise your brain and add code to the sketch that will average
    scores after, for example, three tries before you reset it. I experimented with
    many variations as I played with the device, but I would caution that you can
    spend a great deal of time for minimal advantage. Put the game together and enjoy.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以锻炼大脑，并为草图添加代码，例如，在你重置之前，将三次尝试后的分数进行平均。我在玩这个设备时尝试了许多变种，但我想提醒你，可能会花费大量时间来获得微小的优势。把游戏组装起来，享受其中的乐趣。
