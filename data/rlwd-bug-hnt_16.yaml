- en: '**16'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**16'
- en: INSECURE DIRECT OBJECT REFERENCES**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 不安全的直接对象引用（IDOR）**
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: An *insecure direct object reference (IDOR)* vulnerability occurs when an attacker
    can access or modify a reference to an object, such as a file, database record,
    account, and so on, that should be inaccessible to them. For example, let’s say
    the website *www.<example>.com* has private user profiles that should be accessible
    only to the profile owner through the URL *www.<example>.com/user?id=1*. The `id`
    parameter would determine which profile you’re viewing. If you can access someone
    else’s profile by changing the `id` parameter to 2, that would be an IDOR vulnerability.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*不安全的直接对象引用（IDOR）* 漏洞发生在攻击者能够访问或修改他们本不应访问的对象引用时，例如文件、数据库记录、账户等。例如，假设网站 *www.<example>.com*
    上有私人用户资料，只有资料拥有者能够通过 URL *www.<example>.com/user?id=1* 访问该资料。`id` 参数决定了您查看的是哪个资料。如果您能够通过更改
    `id` 参数为 2 来访问其他人的资料，那么这就是一个 IDOR 漏洞。'
- en: '**Finding Simple IDORs**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**查找简单的 IDOR 漏洞**'
- en: 'Some IDOR vulnerabilities are easier to find than others. The easiest IDOR
    vulnerability you’ll find is similar to the previous example: it’s one in which
    the identifier is a simple integer that automatically increments as new records
    are created. To test for this kind of IDOR, you just add or subtract 1 from an
    `id` parameter and confirm you can access records you shouldn’t have access to.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 IDOR 漏洞比其他的更容易发现。您会发现最容易的 IDOR 漏洞类似于前面的例子：其中标识符是一个简单的整数，并且随着新记录的创建而自动递增。要测试这种类型的
    IDOR，您只需对 `id` 参数加 1 或减 1，并确认您是否能够访问本不应访问的记录。
- en: You can perform this testing using the web proxy tool Burp Suite, discussed
    in [Appendix A](app01.xhtml#app01). A *web proxy* captures the traffic your browser
    sends to a website. Burp allows you to monitor HTTP requests, modify them on the
    fly, and replay requests. To test for IDORs, you can send your request to Burp’s
    Intruder, set a payload on the `id` parameter, and choose a numerical payload
    to increment or decrement.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 Web 代理工具 Burp Suite 进行此测试，详细信息请参见 [附录 A](app01.xhtml#app01)。*Web 代理* 捕获浏览器发送到网站的流量。Burp
    允许您监视 HTTP 请求，实时修改它们，并重放请求。要测试 IDOR，您可以将请求发送到 Burp 的 Intruder，设置 `id` 参数的有效载荷，并选择一个数值有效载荷来递增或递减。
- en: After starting a Burp Intruder attack, you can see whether you have access to
    data by checking the content lengths and HTTP response codes Burp receives. For
    example, if a site you’re testing always returns status code 403 responses that
    are all the same content length, the site is likely not vulnerable. Status code
    403 means access has been denied, so uniform content lengths indicate you’re receiving
    a standard access denied message. But if you receive a status code 200 response
    and a variable content length, you might have accessed private records.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 Burp Intruder 攻击后，您可以通过检查 Burp 接收到的内容长度和 HTTP 响应代码来判断是否能够访问数据。例如，如果您测试的站点始终返回状态码
    403 且所有响应的内容长度相同，那么该站点可能没有漏洞。状态码 403 表示访问被拒绝，因此一致的内容长度表明您收到的是标准的访问拒绝信息。但如果您收到状态码
    200 响应并且内容长度可变，那么您可能已经访问了私人记录。
- en: '**Finding More Complex IDORs**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**查找更复杂的 IDOR 漏洞**'
- en: Complex IDORs can occur when the `id` parameter is buried in a `POST` body or
    is not readily identifiable through the parameter name. You’ll likely encounter
    unobvious parameters, such as `ref`, `user`, or `column` being used as IDs. Even
    when you can’t easily pick out the ID by its parameter name, you might identify
    the parameter if it takes integer values. When you find a parameter that takes
    an integer value, test it to see how the site behavior changes when the ID is
    modified. Again, you can use Burp to help make this easy by intercepting HTTP
    requests, changing the ID, and using the Repeater tool to replay the request.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂的 IDOR 漏洞可能发生在 `id` 参数被隐藏在 `POST` 请求体中，或者通过参数名称无法轻易识别的情况下。您可能会遇到不明显的参数，例如
    `ref`、`user` 或 `column`，它们被用作 ID。即使您无法通过参数名称轻易识别出 ID，当参数取整数值时，您可能能够识别出该参数。找到一个取整数值的参数后，测试它，看看在修改
    ID 时站点的行为如何变化。同样，您可以使用 Burp 来简化这一过程，通过拦截 HTTP 请求、更改 ID，并使用 Repeater 工具重放请求。
- en: IDORs are even harder to identify when sites use randomized identifiers, such
    *universal unique identifiers (UUIDs)*. UUIDs are 36-character alphanumeric strings
    that don’t follow a pattern. If you discover a site that uses UUIDs, it will be
    nearly impossible to find a valid record or object by testing random values. Instead,
    you can create two records and switch between them during your testing. For example,
    let’s say you’re trying to access user profiles that are identified using a UUID.
    Create your profile with user A; then log in as user B to try to access user A’s
    profile using its UUID.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当站点使用随机化标识符时，IDOR 漏洞更难识别，比如 *通用唯一标识符（UUID）*。UUID 是由 36 个字符组成的字母数字字符串，没有固定的模式。如果你发现一个使用
    UUID 的站点，通过测试随机值几乎不可能找到有效的记录或对象。相反，你可以创建两个记录，并在测试过程中在它们之间切换。例如，假设你正在尝试访问使用 UUID
    标识的用户资料。首先使用用户 A 创建个人资料；然后以用户 B 登录，尝试使用用户 A 的 UUID 访问其个人资料。
- en: In some cases, you’ll be able to access objects that use UUIDs. But a site might
    not consider this a vulnerability because UUIDs are made to be unguessable. In
    those cases, you’ll need to look for opportunities where the site is disclosing
    the random identifier in question. Let’s say you’re on a team-based site and the
    users are identified by UUIDs. When you invite a user to your team, the HTTP response
    to the invitation might disclose their UUID. In other situations, you might be
    able to search for a record on a website and get a returned result that includes
    the UUID. When you can’t find obvious places where UUIDs are being leaked, review
    the HTML page source code included in HTTP responses, which might disclose information
    that isn’t readily visible on the site. You can do this by monitoring requests
    in Burp or by right-clicking in your web browser and selecting View Page Source.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能能够访问使用 UUID 的对象。但站点可能不会认为这是一种漏洞，因为 UUID 被设计为不可猜测。在这种情况下，你需要寻找站点透露该随机标识符的机会。假设你在一个基于团队的网站上，用户是通过
    UUID 进行标识的。当你邀请某个用户加入你的团队时，邀请的 HTTP 响应可能会泄露他们的 UUID。在其他情况下，你可能能够在网站上搜索记录，并返回包括
    UUID 的结果。如果你无法找到显而易见的地方泄露了 UUID，那么请检查 HTTP 响应中包含的 HTML 页面源代码，这可能会透露一些在网站上不易察觉的信息。你可以通过在
    Burp 中监控请求，或通过右键点击浏览器并选择“查看页面源代码”来进行此操作。
- en: Even if you can’t find a leaked UUID, some sites will reward the vulnerability
    if the information is sensitive and clearly violates their permission model. It’s
    your responsibility to explain to the company why you believe you’ve found an
    issue they should address and what impact you’ve determined the vulnerability
    has. The following examples demonstrate the range of difficulty in finding IDOR
    vulnerabilities.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你找不到泄露的 UUID，一些站点也会奖励这种漏洞，如果该信息是敏感的，并且明显违反了它们的权限模型。你有责任向公司解释为什么你认为发现了他们应该处理的问题，以及你确定漏洞的影响。以下示例展示了找到
    IDOR 漏洞的难度范围。
- en: '**[Binary.com](http://Binary.com) Privilege Escalation**'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**[Binary.com](http://Binary.com) 权限提升**'
- en: '**Difficulty:** Low'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度:** 低'
- en: '**URL:** *[www.binary.com](http://www.binary.com)*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**网址:** *[www.binary.com](http://www.binary.com)*'
- en: '**Source:** *[https://hackerone.com/reports/98247/](https://hackerone.com/reports/98247/)*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源:** *[https://hackerone.com/reports/98247/](https://hackerone.com/reports/98247/)*'
- en: '**Date reported:** November 6, 2015'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期:** 2015年11月6日'
- en: '**Bounty paid:** $300'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖励金额:** $300'
- en: When you’re testing web applications that use accounts, you should register
    two different accounts and test them simultaneously. Doing so allows you to test
    for IDORs between two different accounts you control and know what to expect from.
    This is the approach Mahmoud Gamal took when discovering an IDOR in *[binary.com](http://binary.com)*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在测试使用账户的 web 应用程序时，应该注册两个不同的账户并同时进行测试。这样可以帮助你测试两个你控制的账户之间的 IDOR（不正确的对象引用）漏洞，并了解预期的结果。这就是
    Mahmoud Gamal 在发现 *[binary.com](http://binary.com)* 中的 IDOR 漏洞时所采取的方法。
- en: The website *[binary.com](http://binary.com)* is a trading platform that allows
    users to trade currencies, indices, stocks, and commodities. At the time of this
    report, the URL *www.binary.com/cashier* would render an iFrame with a `src` attribute
    that referenced the subdomain *cashier.binary.com* and passed URL parameters,
    such as `pin`, `password`, and `secret`, to the website. These parameters were
    likely intended to authenticate users. Because the browser was accessing *www.binary.com/cashier*,
    the information being passed to *cashier.binary.com* wouldn’t be visible without
    viewing the HTTP requests being sent by the website.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 网站 *[binary.com](http://binary.com)* 是一个交易平台，允许用户交易货币、指数、股票和商品。在本报告发布时，URL *www.binary.com/cashier*
    会呈现一个iFrame，其`src`属性引用了子域 *cashier.binary.com* 并将如`pin`、`password`和`secret`等URL参数传递给该网站。这些参数可能是用于验证用户身份的。由于浏览器正在访问
    *www.binary.com/cashier*，因此传递给 *cashier.binary.com* 的信息在不查看网站发送的HTTP请求的情况下是不可见的。
- en: Gamal noticed that the `pin` parameter was being used as an account identifier
    and that it appeared to be an easily guessed numerically incremented integer.
    Using two different accounts, which we’ll refer to as account A and account B,
    he visited the */cashier* path on account A, noted the `pin` parameter, and then
    logged into account B. When he modified account B’s iFrame to use account A’s
    pin, he was able to access account A’s information and request withdrawals while
    authenticated as account B.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Gamal注意到`pin`参数被用作帐户标识符，并且它似乎是一个容易猜测的递增数字整数。使用两个不同的帐户，我们称之为帐户A和帐户B，他访问了帐户A的*/cashier*路径，记下了`pin`参数，然后登录到帐户B。当他修改帐户B的iFrame以使用帐户A的pin时，他能够访问帐户A的信息并在以帐户B身份验证的情况下请求提款。
- en: The team at *[binary.com](http://binary.com)* resolved the report within a day
    of receiving it. They claimed that they manually reviewed and approved withdrawals,
    and so they would have noticed suspicious activity.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*[binary.com](http://binary.com)* 的团队在收到报告后的当天就解决了该问题。他们声称他们手动审查并批准提款，因此会注意到可疑的活动。'
- en: '***Takeaways***'
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***重点总结***'
- en: In this case, a hacker easily tested the bug manually by using a customer pin
    from one account while logged in as a different account. You can also use Burp
    plug-ins, such as Autorize and Authmatrix, to automate this type of testing.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，一名黑客通过在登录为不同帐户时使用一个帐户的客户PIN轻松地手动测试了漏洞。你还可以使用Burp插件，如Autorize和Authmatrix，来自动化这种类型的测试。
- en: But finding obscure IDORs can be more difficult. This site was using an iFrame,
    which can make the vulnerable URL and its parameters easy to miss because you
    wouldn’t see them in your browser without viewing the HTML page source. The best
    way to track iFrames and cases where multiple URLs might be accessed by a single
    web page is to use a proxy like Burp. Burp will record any `GET` requests to other
    URLs, like *cashier.binary.com*, in the proxy history, making catching requests
    easier for you.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，发现模糊的IDOR漏洞可能更困难。该站点使用了iFrame，这可能导致易于忽略易受攻击的URL及其参数，因为如果不查看HTML页面源代码，你是看不到它们的。跟踪iFrame和多个URL可能通过单个网页访问的情况的最佳方法是使用像Burp这样的代理。Burp将记录任何对其他URL的`GET`请求，例如*cashier.binary.com*，并将其保存在代理历史中，使你更容易捕捉到这些请求。
- en: '**Moneybird App Creation**'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Moneybird 应用创建**'
- en: '**Difficulty:** Medium'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 中等'
- en: '**URL:** *[https://moneybird.com/user/applications/](https://moneybird.com/user/applications/)*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**网址：** *[https://moneybird.com/user/applications/](https://moneybird.com/user/applications/)*'
- en: '**Source:** *[https://hackerone.com/reports/135989/](https://hackerone.com/reports/135989/)*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://hackerone.com/reports/135989/](https://hackerone.com/reports/135989/)*'
- en: '**Date reported:** May 3, 2016'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2016年5月3日'
- en: '**Bounty paid:** $100'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖励支付：** $100'
- en: In May 2016, I began testing Moneybird for vulnerabilities, focusing on its
    user account permissions. To do this, I created a business with account A and
    then invited a second user, account B, to join with limited permissions. Moneybird
    defines permissions that it assigns to added users, such as the ability to use
    invoices, estimates, and so on.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 2016年5月，我开始对Moneybird进行漏洞测试，重点关注其用户帐户权限。为此，我创建了一个帐户A的企业，并邀请了一个第二个用户帐户B，以有限的权限加入。Moneybird定义了它为新增用户分配的权限，例如使用发票、估算等的权限。
- en: 'A user with full permissions could create apps and enable API access. For example,
    a user could submit a `POST` request to create an app with full permissions, which
    would look like the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有完全权限的用户可以创建应用并启用API访问。例如，用户可以提交一个`POST`请求来创建一个具有完全权限的应用，格式如下：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, the `POST` body includes the `administration_id` ➊ parameter.
    This is the account ID that users are added to. Although the length and randomness
    of the ID make it difficult to guess, the ID was immediately disclosed to added
    users when they visited the account that invited them. For example, when account
    B logged in and visited account A, they would be redirected to the URL *https://moneybird.com/ABCDEFGHIJKLMNOP/*,
    where `ABCDEFGHIJKLMNOP` would be the `administration_id` for account A.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`POST`请求体中包含了`administration_id` ➊参数。这是用户被添加到的账户ID。尽管ID的长度和随机性使其难以猜测，但当用户访问邀请他们的账户时，ID会立即被泄露。例如，当账户B登录并访问账户A时，他们会被重定向到URL
    *https://moneybird.com/ABCDEFGHIJKLMNOP/*，其中`ABCDEFGHIJKLMNOP`就是账户A的`administration_id`。
- en: I tested to see if account B could create an application for account A’s business
    without the proper permission to do so. I logged in as account B and created a
    second business, which account B was the sole member of. This would give account
    B full permissions on the second business, even though account B should have had
    limited permissions to account A and no ability to create apps for it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我测试了账户B是否能在没有适当权限的情况下，为账户A的业务创建应用程序。我以账户B登录并创建了一个第二个业务，这个业务只有账户B是唯一成员。这样，账户B就会对第二个业务拥有完全权限，即使账户B本应只对账户A拥有有限权限，且无法为其创建应用程序。
- en: Next, I visited account B’s settings page, created an app, and using Burp Suite,
    intercepted the `POST` call to replace `administration_id` with account A’s ID.
    Forwarding the modified request confirmed that the vulnerability worked. As account
    B, I had an app with full permissions to account A. This allowed account B to
    bypass the limited permissions of their account and use the newly created app
    to perform any action they otherwise shouldn’t have had access to.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我访问了账户B的设置页面，创建了一个应用，并使用Burp Suite拦截了`POST`调用，将`administration_id`替换为账户A的ID。转发修改后的请求确认了该漏洞有效。作为账户B，我拥有了一个完全权限的应用，能够绕过账户B的权限限制，使用新创建的应用执行原本无法访问的任何操作。
- en: '***Takeaways***'
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***要点***'
- en: Look for parameters that could contain ID values, such as any parameter names
    that include the characters `id`. Especially be on the lookout for parameter values
    that only include numbers, because those IDs are likely to be generated in some
    guessable way. If you can’t guess an ID, determine whether it’s being leaked somewhere.
    I noticed the `administrator_id` given the ID reference in its name. Although
    the ID values didn’t follow a guessable pattern, the value was being disclosed
    in the URL whenever a user was invited to a company.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找可能包含ID值的参数，例如任何名称中包含`id`字符的参数。特别注意那些仅包含数字的参数值，因为这些ID可能是以某种可猜测的方式生成的。如果无法猜测一个ID，确定它是否在某处被泄露。我注意到`administrator_id`因为它名称中有ID的引用。尽管ID值没有遵循可猜测的模式，但每当用户被邀请到公司时，该值会通过URL泄露。
- en: '**Twitter Mopub API Token Theft**'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Twitter Mopub API令牌盗窃**'
- en: '**Difficulty:** Medium'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 中等'
- en: '**URL:** *https://mopub.com/api/v3/organizations/ID/mopub/activate/*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL：** *https://mopub.com/api/v3/organizations/ID/mopub/activate/*'
- en: '**Source:** *[https://hackerone.com/reports/95552/](https://hackerone.com/reports/95552/)*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://hackerone.com/reports/95552/](https://hackerone.com/reports/95552/)*'
- en: '**Date reported:** October 24, 2015'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2015年10月24日'
- en: '**Bounty paid:** $5,040'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖金支付：** $5,040'
- en: After discovering any vulnerability, make sure to consider the impact it would
    have if an attacker abused it. In October 2015, Akhil Reni reported that Twitter’s
    Mopub application (a 2013 acquisition) was vulnerable to an IDOR that leaked API
    keys and a secret. But several weeks later, Reni realized the vulnerability was
    more severe than he initially reported and submitted an update. Luckily, he made
    his update before Twitter paid a bounty for his vulnerability.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 发现漏洞后，请务必考虑如果攻击者利用此漏洞，会产生什么影响。2015年10月，Akhil Reni报告了Twitter的Mopub应用（2013年收购）存在IDOR漏洞，会在`POST`响应中泄露API密钥和密钥。但是几周后，Reni意识到漏洞比他最初报告的要严重，并提交了更新。幸运的是，他在Twitter为此漏洞支付奖金之前做了更新。
- en: 'When Reni initially submitted his report, he found that a Mopub endpoint hadn’t
    properly authorized users and would leak an account’s API key and `build_secret`
    in a `POST` response. Here’s what the `POST` request looked like:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当Reni最初提交报告时，他发现Mopub的一个端点没有正确授权用户，并且会在`POST`响应中泄露账户的API密钥和`build_secret`。以下是`POST`请求的样子：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And the response to the request was the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对该请求的响应如下：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Mopub’s `POST` response provides the `api_key` ➋ and `build_secret` ➌, which
    Reni reported to Twitter in his initial report. But accessing the information
    also requires knowing an `organization_id` ➊, which is an unguessable 24-digit
    string. Reni noticed that users could share application crash issues publicly
    via a URL, such as *http://crashes.to/s/<11 CHARACTERS>*. Visiting one of these
    URLs would return the unguessable `organization_id` in the response body. Reni
    was able to enumerate `organization_id` values by visiting the URLs returned using
    the Google dork *site:http://crashes.to/s/*. With the `api_key`, `build_secret`,
    and `organization_id`, an attacker could steal API tokens.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Mopub的`POST`响应提供了`api_key` ➋和`build_secret` ➌，这些信息Reni在初次报告中已经报告给了Twitter。但访问这些信息还需要知道一个`organization_id`
    ➊，这是一个无法猜测的24位数字字符串。Reni注意到用户可以通过一个URL公开分享应用崩溃问题，例如 *http://crashes.to/s/<11个字符>*。访问这些URL中的任何一个将会在响应体中返回无法猜测的`organization_id`。Reni通过使用Google
    dork *site:http://crashes.to/s/*访问这些URL，枚举了`organization_id`值。通过`api_key`、`build_secret`和`organization_id`，攻击者可以窃取API令牌。
- en: Twitter resolved the vulnerability and asked Reni to confirm he could no longer
    access the vulnerable information. It was at that point that Reni realized the
    `build_secret` returned in the HTTP response was also used in the URL *https://app.mopub.com/complete/htsdk/?code=*<*BUILDSECRET>&amp;next=%2d*.
    This URL authenticated a user and redirected them to the associated Mopub account,
    which would have allowed a malicious user to log into the account of any other
    user. The malicious user would have had access to the target account’s apps and
    organizations from Twitter’s mobile development platform. Twitter responded to
    Reni’s comment requesting additional information and the steps to reproduce the
    attack, which Reni provided.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter解决了该漏洞，并要求Reni确认他是否仍然能够访问这些敏感信息。正是在这一点上，Reni发现HTTP响应中返回的`build_secret`也被用在了URL
    *https://app.mopub.com/complete/htsdk/?code=*<*BUILDSECRET>&amp;next=%2d*。这个URL验证了用户身份，并将他们重定向到关联的Mopub账户，这使得恶意用户能够登录任何其他用户的账户。恶意用户将能够访问目标账户在Twitter移动开发平台上的应用和组织。Twitter回应了Reni的评论，要求提供更多的信息和复现攻击的步骤，Reni也提供了这些信息。
- en: '***Takeaways***'
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***要点***'
- en: Always be sure to confirm the full impact of your bugs, especially when it comes
    to IDORs. In this case, Reni found he could obtain secret values by accessing
    `POST` requests and using a single Google dork. Reni initially reported that Twitter
    was leaking sensitive information, but only later did he realize how these values
    were used on the platform. If Reni hadn’t provided additional information after
    submitting his report, Twitter likely wouldn’t have realized that they were vulnerable
    to account takeovers and they might have paid Reni less.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 始终确保确认你所发现漏洞的全部影响，尤其是当涉及到IDOR时。在这个案例中，Reni发现他可以通过访问`POST`请求并使用一个简单的Google dork来获取敏感的秘密值。Reni最初报告说Twitter泄露了敏感信息，但他后来才意识到这些值在平台上的使用方式。如果Reni在提交报告后没有提供额外的信息，Twitter可能不会意识到他们容易受到账户接管的威胁，赏金也许会更少。
- en: '**ACME Customer Information Disclosure**'
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**ACME客户信息泄露**'
- en: '**Difficulty:** High'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 高'
- en: '**URL:** *https://www.<acme>.com/customer_summary?customer_id=abeZMloJyUovapiXqrHyi0DshH*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL：** *https://www.<acme>.com/customer_summary?customer_id=abeZMloJyUovapiXqrHyi0DshH*'
- en: '**Source:** N/A'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** 不适用'
- en: '**Date reported:** February 20, 2017'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2017年2月20日'
- en: '**Bounty paid:** $3,000'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**支付赏金：** $3,000'
- en: This bug is part of a private program on HackerOne. This vulnerability remains
    undisclosed, and all information in it has been anonymized.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个漏洞是HackerOne上的一个私有项目的一部分。此漏洞未公开，所有信息已被匿名化。
- en: A company, which I’ll refer to as ACME Corp for the sake of this example, created
    software that allows administrators to create users and assign permissions to
    those users. When I started testing the software for vulnerabilities, I used my
    administrator account to create a second user with no permissions. Using the second
    user account, I began visiting URLs the administrator was able to access that
    shouldn’t have been accessible to the second user.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一家公司，我在这里称之为ACME公司，为管理员创建用户并分配权限的软件。当我开始测试该软件的漏洞时，我使用管理员账户创建了一个没有权限的第二个用户。使用第二个用户账户时，我开始访问管理员本应有权限访问，但第二个用户不该访问的URL。
- en: Using my unprivileged account, I visited a customer details page through the
    URL *www.<acme>.com/customization/customer_summary?customer_id=abeZMloJyUovapiXqrHyi0DshH*.
    This URL returns customer information based on the ID passed to the `customer_id`
    parameter. I was surprised to see that customer details were being returned to
    the second user account.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我的无权限账户，我通过URL访问了一个客户详情页，URL为*www.<acme>.com/customization/customer_summary?customer_id=abeZMloJyUovapiXqrHyi0DshH*。这个URL根据传递给`customer_id`参数的ID返回客户信息。我惊讶地发现，第二个用户账户能够看到客户详情。
- en: Although the `customer_id` appeared to be unguessable, it might be mistakenly
    disclosed on the site somewhere. Alternatively, if a user had their permission
    revoked, they would still be able to access customer information if they knew
    the `customer_id`. I reported the bug with this reasoning. In hindsight, I should
    have looked for the leaked `customer_id` before reporting.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`customer_id`看似无法猜测，但它可能会在网站某处被错误地泄露。或者，如果一个用户被撤销了权限，只要知道`customer_id`，他们仍然能够访问客户信息。我以这个理由报告了这个漏洞。事后想来，我应该在报告之前就寻找泄露的`customer_id`。
- en: The program closed my report as informative on the grounds that the `customer_id`
    was unguessable. Informative reports don’t result in a bounty and can negatively
    impact your HackerOne stats. Undeterred, I started looking for places where the
    ID could be leaked by testing all the endpoints I could find. Two days later,
    I found a vulnerability.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序将我的报告标记为信息性报告，理由是`customer_id`无法猜测。信息性报告不会带来奖励，并可能对你的HackerOne统计数据产生负面影响。尽管如此，我仍然开始寻找可能泄露ID的地方，通过测试我能找到的所有端点。两天后，我发现了一个漏洞。
- en: 'I began accessing URLs with a user that only had permission to search orders
    and shouldn’t have had any access to customer or product information. But I found
    a response from an order search that produced the following JSON:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我开始通过一个仅有权限搜索订单的用户访问URL，该用户本不应能访问客户或产品信息。但我发现订单搜索的响应中返回了以下JSON：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice that the JSON includes a `customer_id` ➊, which was the same as the ID
    being used in the URL that would display customer information. This meant that
    the customer ID was being leaked, and an unprivileged user could find and access
    customer information they shouldn’t have had the permissions to see.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，JSON中包括了`customer_id` ➊，这个ID与在URL中用于显示客户信息的ID相同。这意味着客户ID正在泄露，无权限的用户可能会找到并访问他们本不应该看到的客户信息。
- en: In addition to finding the `customer_id`, I continued to investigate the extent
    of the vulnerability. I discovered other IDs that could also be used in URLs to
    return information that should have been inaccessible. My second report was accepted
    and paid a bounty.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 除了找到`customer_id`，我还继续调查漏洞的范围。我发现了其他ID，这些ID也可以在URL中使用，返回本应无法访问的信息。我的第二份报告被接受，并获得了奖励。
- en: '***Takeaways***'
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***总结***'
- en: When you find a vulnerability, make sure you understand the extent to which
    an attacker can use it. Try to find leaked identifiers or other IDs that could
    have a similar vulnerability. Additionally, don’t be discouraged if a program
    disagrees with your report. You can keep looking for other places in which you
    might be able to use the vulnerability and can submit another report if you find
    any further information.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当你发现一个漏洞时，确保了解攻击者能够利用它的范围。尝试寻找泄露的标识符或其他可能存在类似漏洞的ID。此外，如果一个程序不同意你的报告，不要灰心。你可以继续寻找其他可能利用该漏洞的地方，如果发现任何进一步的信息，可以提交另一个报告。
- en: '**Summary**'
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**概述**'
- en: 'IDORs occur when an attacker can access or modify a reference to an object
    that they shouldn’t be able to access. IDORs can be simple: they might require
    exploiting numerically incremented integers by adding and subtracting 1\. For
    more complex IDORs that make use of UUIDs or random identifiers, you might need
    to test the platform thoroughly for leaks. You can check for leaks in a variety
    of places, such as in JSON responses, in HTML content, through Google dorks, and
    through URLs. When you’re reporting, be sure to detail how an attacker can abuse
    the vulnerability. For example, the bounty for a vulnerability where an attacker
    could bypass platform permissions will be less than the bounty for a bug that
    results in a full account takeover.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: IDOR（不安全直接对象引用）发生在攻击者可以访问或修改他们不应该能够访问的对象引用时。IDOR可以很简单：它们可能只需要通过加减1来利用数值递增的整数。对于更复杂的IDOR，使用UUID或随机标识符时，可能需要彻底测试平台以查找泄漏。你可以在多个地方检查泄漏，例如在JSON响应中、HTML内容中、通过Google
    dorks或通过URLs中。当你报告时，务必详细说明攻击者如何滥用此漏洞。例如，攻击者能够绕过平台权限的漏洞，其悬赏金额会低于导致完整账户接管的漏洞的悬赏金额。
