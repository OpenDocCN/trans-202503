- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Creating Databases and Tables
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 创建数据库和表格
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: In this chapter, you’ll use MySQL Workbench to view and create databases in
    MySQL. Then you’ll learn how to create tables to store data in those databases.
    You’ll define the name of the table and its columns and specify the type of data
    that the columns can contain. Once you’ve practiced these basics, you’ll improve
    your tables using two helpful MySQL features, constraints and indexes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将使用 MySQL Workbench 查看和创建 MySQL 数据库。接下来，你将学习如何创建表格来存储数据。你将定义表格的名称及其列，并指定列可以包含的数据类型。掌握这些基础知识后，你将通过
    MySQL 的两个有用功能——约束和索引——来优化你的表格。
- en: Using MySQL Workbench
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 MySQL Workbench
- en: As you learned in [Chapter 1](c01.xhtml), MySQL Workbench is a visual tool you
    can use to enter and run SQL commands and view their results. Here, we’ll walk
    through the basics of how to use MySQL Workbench to view databases.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在[第 1 章](c01.xhtml)中学到的，MySQL Workbench 是一个可视化工具，你可以用它来输入和运行 SQL 命令，并查看它们的结果。在这里，我们将介绍如何使用
    MySQL Workbench 查看数据库的基础知识。
- en: You’ll start by opening MySQL Workbench by double-clicking its icon. The tool
    looks like [Figure 2-1](#figure2-1).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你将通过双击 MySQL Workbench 图标来启动它。该工具看起来像[图 2-1](#figure2-1)所示。
- en: '![](image_fi/503007c02/f02001.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c02/f02001.png)'
- en: 'Figure 2-1: Showing databases with MySQL Workbench'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-1：使用 MySQL Workbench 查看数据库
- en: 'In the top-right panel, enter the `show databases;` command. Make sure to include
    the semicolon, which indicates the end of the statement. Then click the lightning
    bolt icon, highlighted in [Figure 2-1](#figure2-1), to execute the command. The
    results, a list of available MySQL databases, appear in the Result Grid panel
    (your results will look different from mine):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在右上角面板中，输入 `show databases;` 命令。确保包括分号，它表示语句的结束。然后点击闪电图标，图中高亮显示了[图 2-1](#figure2-1)，以执行该命令。结果，显示可用
    MySQL 数据库的列表，将出现在结果网格面板中（你的结果会与我的不同）：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Some databases in this list are system databases that were created automatically
    when MySQL was installed—such as `information_schema`, `mysql`, and `performance_schema`—and
    others are databases I’ve created. Any databases you create should appear in this
    list.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 该列表中的一些数据库是系统数据库，这些数据库在安装 MySQL 时自动创建——例如 `information_schema`、`mysql` 和 `performance_schema`——而其他的则是我创建的数据库。你创建的任何数据库都应该出现在此列表中。
- en: You can also browse databases by using the Navigator panel on the left. Click
    the **Schemas** tab at the bottom of the panel to show a list of databases, and
    click the right arrow (▶) to investigate the contents of your databases. Note
    that, by default, the Navigator panel doesn’t show the system databases that were
    automatically created when MySQL was installed.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过左侧的导航面板浏览数据库。点击面板底部的 **Schemas** 标签，显示数据库列表，然后点击右箭头 (▶) 调查数据库的内容。请注意，默认情况下，导航面板不会显示
    MySQL 安装时自动创建的系统数据库。
- en: Now that you’ve seen how to view the list of databases in MySQL, it’s time to
    try creating your own.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到了如何查看 MySQL 中的数据库列表，是时候尝试创建你自己的数据库了。
- en: Creating a New Database
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新数据库
- en: 'To create a new database, you use the `create database` command along with
    a name for the database you want to create:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建新数据库，可以使用 `create database` 命令，并为你想要创建的数据库指定一个名称：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Your database’s name should describe the type of data stored there. In this
    example, the database called `circus` might contain tables for data on clowns,
    tightrope walkers, and trapeze acts. The `finance` database might have tables
    for accounts receivable, income, and cash flow. Tables of data on bands, songs,
    and albums might go in the `music` database.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库的名称应该描述其中存储的数据类型。例如，名为 `circus` 的数据库可能包含关于小丑、走钢丝演员和高空秋千的表格。`finance` 数据库可能包含应收账款、收入和现金流的表格。有关乐队、歌曲和专辑的数据可能会存储在
    `music` 数据库中。
- en: 'To remove a database, use the `drop database` command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除数据库，请使用 `drop database` 命令：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: These commands remove the three databases you just created, any tables in those
    databases, and all of the data in those tables.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将删除你刚创建的三个数据库、这些数据库中的所有表格，以及这些表格中的所有数据。
- en: Of course, you haven’t actually created any tables yet. You’ll do that now.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你还没有真正创建任何表格。现在，你将开始创建表格。
- en: Creating a New Table
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新表格
- en: 'In this example, you’ll create a new table to hold global population data and
    specify what type of data the table can contain:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你将创建一个新表格来存储全球人口数据，并指定该表格可以包含的数据类型：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: First, you create a database called `land` using the `create database` command
    you saw earlier. On the next line, the `use` command tells MySQL to use the `land`
    database for the SQL statements that follow it. This ensures that your new table
    will be created in the `land` database.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你使用之前看到的`create database`命令创建一个名为`land`的数据库。在下一行，`use`命令告诉MySQL使用`land`数据库来执行随后的SQL语句。这确保了你创建的新表将在`land`数据库中创建。
- en: Next, you use the `create table` command followed by a descriptive name for
    the table, `continent`. Within parentheses, you create three columns in the `continent`
    table—`continent_id`, `continent_name`, and `population`—and for each column you
    choose a MySQL data type that controls the type of data allowed in that column.
    Let’s go over this in more detail.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你使用`create table`命令，并为表命名为`continent`。在括号内，你在`continent`表中创建了三列——`continent_id`、`continent_name`和`population`——并为每一列选择了一个MySQL数据类型，控制该列允许的数据类型。我们来详细讨论一下这个过程。
- en: You define the `continent_id` column as an `int` so that it will accept integer
    (numeric) data. Each continent will have its own distinct ID number in this column
    (1, 2, 3, and so on). Then, you define the `continent_name` column as a `varchar(20)`
    to accept character data up to 20 characters long. Finally, you define the `population`
    as a `bigint` to accept big integers, as the population of an entire continent
    can be quite a large number.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你将`continent_id`列定义为`int`，使其接受整数（数字）数据。每个大洲将在这一列中拥有自己独特的ID号码（1、2、3等）。然后，你将`continent_name`列定义为`varchar(20)`，使其接受最多20个字符的字符数据。最后，你将`population`列定义为`bigint`，以接受大整数，因为整个大洲的人口可能是一个非常大的数字。
- en: When you run this `create table` statement, MySQL creates an empty table. The
    table has a table name and its columns are defined, but it doesn’t have any rows
    yet. You can add, delete, and modify the rows in the table whenever you need.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个`create table`语句时，MySQL会创建一个空的表。该表具有表名并且定义了列，但尚未包含任何行。你可以随时添加、删除和修改表中的行。
- en: 'If you try to add a row with data that doesn’t match one of the column’s data
    types, however, MySQL will reject the entire row. For example, because the `continent_id`
    column was defined as an `int`, MySQL won’t allow that column to store values
    like `Continent #1` or `A` because those values contain letters. MySQL won’t allow
    you to store a value like `The Continent of Atlantis` in the `continent_name`
    column either, since that value has more than 20 characters.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '然而，如果你尝试添加一行数据，而这些数据与某一列的数据类型不匹配，MySQL将拒绝整个行。例如，由于`continent_id`列被定义为`int`，MySQL不允许该列存储像`Continent
    #1`或`A`这样的值，因为这些值包含字母。MySQL也不会允许你在`continent_name`列中存储像`The Continent of Atlantis`这样的值，因为这个值的字符数超过了20个。'
- en: Constraints
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 约束
- en: When you create your own database tables, MySQL allows you to put *constraints*,
    or rules, on the data they contain. Once you define constraints, MySQL will enforce
    them.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建自己的数据库表时，MySQL允许你为它们包含的数据设置*约束*，或者说规则。一旦定义了约束，MySQL将强制执行这些规则。
- en: Constraints help maintain *data integrity*; that is, they help keep the data
    in your database accurate and consistent. For example, you might want to add a
    constraint to the `continent` table so that there can’t be two rows in the table
    with the same value in a particular column.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 约束有助于维护*数据完整性*；也就是说，它们帮助保持数据库中数据的准确性和一致性。例如，你可能想在`continent`表上添加一个约束，以确保该表中的某一列不能有两个相同的值。
- en: The constraints available in MySQL are `primary key`, `foreign key`, `not null`,
    `unique`, `check`, and `default`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL中可用的约束有`primary key`、`foreign key`、`not null`、`unique`、`check`和`default`。
- en: Primary Keys
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 主键
- en: Identifying the primary key in a table is an essential part of database design.
    A primary key consists of a column, or more than one column, and uniquely identifies
    the rows in a table. When you create a database table, you need to determine which
    column(s) should make up the primary key, because that information will help you
    retrieve the data later. If you combine data from multiple tables, you’ll need
    to know how many rows to expect from each table and how to join the tables. You
    don’t want duplicate or missing rows in your result sets.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在表中识别主键是数据库设计中的一个重要部分。主键由一列或多列组成，用于唯一标识表中的行。当你创建一个数据库表时，你需要确定哪些列应该组成主键，因为这些信息将帮助你稍后检索数据。如果你将来自多个表的数据结合起来，你需要知道从每个表中预期返回多少行，并且如何连接这些表。你不希望在结果集中出现重复或缺失的行。
- en: 'Consider this `customer` table with the columns `customer_id`, `first_name`,
    `last_name`, and `address`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个包含`customer_id`、`first_name`、`last_name`和`address`列的`customer`表：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To decide what the primary key for the table should be, you need to identify
    which column(s) uniquely identifies the rows in the table. For this table, the
    primary key should be `customer_id`, because every `customer_id` corresponds to
    only one row in the table.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要决定表的主键应该是什么，你需要识别出哪个列能够唯一标识表中的每一行。对于这个表，主键应该是`customer_id`，因为每个`customer_id`仅对应表中的一行。
- en: No matter how many rows might be added to the table in the future, there will
    never be two rows with the same `customer_id`. This can’t be said of any other
    columns. Multiple people can have the same first name, last name, or address.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 无论未来可能向表中添加多少行，都不会有两行具有相同的`customer_id`。其他列则不能保证这一点。多个人可能拥有相同的名字、姓氏或地址。
- en: A primary key can be composed of more than one column, but even the combination
    of the `first_name`, `last_name`, and `address` columns isn’t guaranteed to uniquely
    identify the rows. For example, Bob Smith at 12 Dreary Lane might live with his
    son of the same name.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 主键可以由多个列组成，但即便是`first_name`、`last_name`和`address`这三列的组合，也不能保证唯一标识每一行。例如，住在12
    Dreary Lane的Bob Smith可能和同名的儿子住在一起。
- en: 'To designate the `customer_id` column as the primary key, use the `primary
    key` syntax when you create the `customer` table, as shown in [Listing 2-1](#listing2-1):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`customer_id`列指定为主键，在创建`customer`表时使用`primary key`语法，如[示例2-1](#listing2-1)所示：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 2-1: Creating a primary key'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 示例2-1：创建主键
- en: Here you define `customer_id` as a column that accepts integer values and as
    the primary key for the table.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你将`customer_id`定义为接受整数值的列，并作为表的主键。
- en: Making `customer_id` the primary key benefits you in three ways. First, it prevents
    duplicate customer IDs from being inserted into the table. If someone using your
    database tries to add `customer_id` `3` when that ID already exists, MySQL will
    give an error message and not insert the row.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将`customer_id`设置为主键对你有三方面的好处。首先，它防止了重复的客户ID被插入到表中。如果某个使用你数据库的人尝试在`customer_id`为`3`的情况下再次插入该ID，MySQL会报错并拒绝插入该行。
- en: Second, making `customer_id` the primary key prevents users from adding a null
    value (that is, a missing or unknown value) for the `customer_id` column. When
    you define a column as the primary key, it’s designated as a special column whose
    values cannot be null. (You’ll learn more about null values later in this chapter.)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，将`customer_id`设置为主键可以防止用户为`customer_id`列插入空值（即缺失或未知值）。当你将某列定义为主键时，它会被指定为一个特殊列，其值不能为null。（稍后在本章你会了解更多关于null值的内容。）
- en: Those two benefits fall under the category of data integrity. Once you define
    this primary key, you can be assured that all rows in the table will have a unique
    `customer_id`, and that no `customer_id` will be null. MySQL will enforce this
    constraint, which will help keep the data in your database of a high quality.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个好处属于数据完整性类别。一旦你定义了主键，就可以确保表中的所有行都有唯一的`customer_id`，且没有`customer_id`为null的情况。MySQL将强制执行这一约束，有助于保持数据库中数据的高质量。
- en: The third advantage to creating a primary key is that it causes MySQL to create
    an index. An index will help speed up the performance of SQL queries that select
    from the table. We’ll look at indexes more in the “Indexes” section later in this
    chapter.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 创建主键的第三个优点是它会促使MySQL创建一个索引。索引将有助于加速从表中选择数据时的SQL查询性能。我们将在本章稍后的“索引”部分详细讲解索引。
- en: If a table has no obvious primary key, it often makes sense to add a new column
    that can serve as the primary key (like the `customer_id` column shown here).
    For performance reasons, it’s best to keep the primary key values as short as
    possible.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个表没有明显的主键，通常可以添加一个新列作为主键（就像这里展示的`customer_id`列）。为了性能考虑，最好将主键值保持尽可能简短。
- en: Now let’s look at a primary key that consists of more than one column, which
    is known as a *composite key*. The `high_temperature` table shown in [Listing
    2-2](#listing2-2) stores cities and their highest temperature by year.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看由多个列组成的主键，这种主键称为*复合主键*。[示例2-2](#listing2-2)中展示的`high_temperature`表存储了每个城市及其按年份划分的最高温度。
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 2-2: Creating multiple primary key columns'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 示例2-2：创建多个主键列
- en: For this table, the primary key should consist of both the `city` and `year`
    columns, because there should be only one row in the table with the same city
    and year. For example, there’s currently a row for Death Valley for the year 2021
    with a high temperature of 128, so when you define `city` and `year` as the primary
    key for this table, MySQL will prevent users from adding a second row for Death
    Valley for the year 2021.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个表格，主键应该由`city`和`year`两列组成，因为表格中同一城市和年份应该只有一行数据。例如，目前有一行记录显示2021年死亡谷的最高气温为128，所以当你将`city`和`year`定义为主键时，MySQL将防止用户为2021年死亡谷添加第二行数据。
- en: 'To make `city` and `year` the primary key for this table, use MySQL’s `primary
    key` syntax with both column names:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`city`和`year`设置为该表的主键，使用MySQL的`primary key`语法，并包含两个列名：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `city` column is defined to hold up to 50 characters, and the `year` and
    `high_temperature` columns are defined to hold an integer. The primary key is
    then defined to be both the `city` and `year` columns.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`city`列被定义为最多容纳50个字符，而`year`和`high_temperature`列被定义为容纳整数。然后，主键被定义为`city`和`year`两列。'
- en: MySQL doesn’t require you to define a primary key for the tables you create,
    but you should for the data integrity and performance benefits cited earlier.
    If you can’t figure out what the primary key should be for a new table, that probably
    means you need to rethink your table design.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL并不要求你为所创建的表定义主键，但为了数据完整性和性能的考虑，你应该定义主键。如果你无法确定新表的主键应该是什么，这可能意味着你需要重新考虑你的表设计。
- en: Every table can have at most one primary key.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 每个表格最多只能有一个主键。
- en: Foreign Keys
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 外键
- en: A foreign key is a column (or columns) in a table that matches the table to
    the primary key column(s) of another table. Defining a foreign key establishes
    a relationship between two tables so that you will be able to retrieve one result
    set containing data from both tables.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 外键是表中的一个（或多个）列，这些列与另一个表的主键列匹配。定义外键在两个表之间建立了关系，以便你能够获取一个包含两个表数据的结果集。
- en: 'You saw in [Listing 2-1](#listing2-1) that you can create the primary key in
    the `customer` table using the `primary key` syntax. You’ll use similar syntax
    to create the foreign key in this `complaint` table:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你在[清单2-1](#listing2-1)中看到过，使用`primary key`语法可以在`customer`表中创建主键。你将使用类似的语法在`complaint`表中创建外键：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this example, first you create the `complaint` table, define its columns
    and their data types, and specify `complaint_id` as the primary key. Then, the
    `foreign key` syntax allows you to define the `customer_id` column as a foreign
    key. With the `references` syntax, you specify that the `customer_id` column of
    the `complaint` table references the `customer_id` column of the `customer` table
    (you’ll learn what this means in a moment).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，首先你创建`complaint`表格，定义其列和数据类型，并指定`complaint_id`为主键。接着，使用`foreign key`语法可以将`customer_id`列定义为外键。通过`references`语法，你指定`complaint`表的`customer_id`列引用`customer`表的`customer_id`列（稍后你将了解这意味着什么）。
- en: 'Here’s the `customer` table again:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`customer`表格：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And here’s the data for the `complaint` table:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`complaint`表的数据显示：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The foreign key allows you to see which customer `customer_id 3` in the `complaint`
    table is referring to in the `customer` table; in this case, `customer_id 3` references
    Karen Bellyacher. This arrangement, illustrated in [Figure 2-2](#figure2-2), allows
    you to track which customers made which complaints.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 外键让你能看到`complaint`表中`customer_id 3`指向的是`customer`表中的哪一条记录；在这种情况下，`customer_id
    3`指向Karen Bellyacher。这个结构，如[图2-2](#figure2-2)所示，允许你跟踪哪些客户做出了哪些投诉。
- en: '![](image_fi/503007c02/f02002.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c02/f02002.png)'
- en: 'Figure 2-2: Primary keys and foreign keys'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-2：主键和外键
- en: In the `customer` table, the `customer_id` column has been defined as the primary
    key (labeled PK). In the `complaint` table, the `customer_id` column has been
    defined as a foreign key (FK) because it will be used to join the `complaint`
    table to the `customer` table.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在`customer`表中，`customer_id`列被定义为主键（标记为PK）。在`complaint`表中，`customer_id`列被定义为外键（FK），因为它将用于将`complaint`表连接到`customer`表。
- en: Here’s where things get interesting. Because you defined the foreign key, MySQL
    won’t allow you to add a new row in the `complaint` table unless it is for a valid
    customer—that is, unless there is a `customer_id` row in the `customer` table
    that correlates with a `customer_id` in the `complaint` table. If you try to add
    a row in the `complaint` table for `customer_id` `4`, for example, MySQL will
    give an error. It doesn’t make sense to have a row in the `complaint` table for
    a customer that doesn’t exist, so MySQL prevents the row from being added in order
    to maintain data integrity.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 事情变得有趣了。因为你定义了外键，MySQL 不允许你在 `complaint` 表中添加新行，除非它是针对一个有效的客户——即，除非 `customer`
    表中有一行 `customer_id` 与 `complaint` 表中的 `customer_id` 相关联。例如，如果你尝试为 `customer_id`
    为 `4` 的客户在 `complaint` 表中添加一行，MySQL 会报错。为一个不存在的客户在 `complaint` 表中添加行没有意义，因此 MySQL
    会阻止该行的添加，以保持数据完整性。
- en: Also, now that you’ve defined the foreign key, MySQL will not allow you to delete
    `customer_id 3` from the `customer` table. Deleting this ID would leave a row
    in the `complaint` table for `customer_id 3`, which would no longer correspond
    to any row in the `customer` table. Restricting data deletion is part of referential
    integrity.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，现在你已经定义了外键，MySQL 将不允许你从 `customer` 表中删除 `customer_id 3`。删除此 ID 会导致 `complaint`
    表中出现一个 `customer_id 3` 的行，而该行将不再与 `customer` 表中的任何行对应。限制数据删除是参照完整性的一部分。
- en: There can be only one primary key per table, but a table can have more than
    one foreign key (see [Figure 2-3](#figure2-3)).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 每个表只能有一个主键，但一个表可以有多个外键（见 [图 2-3](#figure2-3)）。
- en: '![](image_fi/503007c02/f02003.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c02/f02003.png)'
- en: 'Figure 2-3: A table can have only one primary key, but it can have multiple
    foreign keys.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-3：一个表只能有一个主键，但可以有多个外键。
- en: '[Figure 2-3](#figure2-3) shows an example of a table named `dog` that has three
    foreign keys, each pointing to the primary key of a different table. In the `dog`
    table, `owner_id` is a foreign key used to refer to the `owner` table, `breed_id`
    is a foreign key used to refer to the `breed` table, and `veterinarian_id` is
    a foreign key used to refer to the `veterinarian` table.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2-3](#figure2-3) 显示了一个名为 `dog` 的表格示例，该表有三个外键，每个外键都指向不同表的主键。在 `dog` 表中，`owner_id`
    是用来引用 `owner` 表的外键，`breed_id` 是用来引用 `breed` 表的外键，`veterinarian_id` 是用来引用 `veterinarian`
    表的外键。'
- en: As with primary keys, when you create a foreign key, MySQL will automatically
    create an index that will speed up the access to the table. More on that shortly.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 与主键一样，当你创建外键时，MySQL 会自动创建一个索引，这将加速对表的访问。稍后将详细说明。
- en: not null
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: not null
- en: A null value represents an empty or undefined value. It is not the same as zero,
    an empty character string, or a space character.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 空值（null）表示空或未定义的值。它与零、空字符字符串或空格字符不同。
- en: 'Allowing null values in a column can be appropriate in some cases, but other
    times, permitting the absence of crucial information could result in the database
    missing data that is needed. Take a look at this table named `contact` that contains
    contact information:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 允许列中有空值在某些情况下是合适的，但有时候允许缺少关键信息可能导致数据库丢失必要的数据。看看这个名为 `contact` 的表，它包含了联系信息：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The value of the `phone` column for `contact_id 3` is `null` because Bill Bashful
    doesn’t own a phone. It is reasonable that the `contact` table would allow null
    values for the `phone` column, as a phone number might not be available or applicable
    for a contact.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`contact_id 3` 的 `phone` 列值为 `null`，因为 Bill Bashful 没有电话。允许 `contact` 表中的 `phone`
    列为空是合理的，因为某些联系人的电话号码可能无法提供或不适用。'
- en: 'On the other hand, the `name` column should not allow null values. It would
    be better not to allow the following row to be added to the `contact` table:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`name` 列不应允许空值。最好不要允许以下行被添加到 `contact` 表中：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: There isn’t much point in saving information about a contact unless you know
    their name, so you can add a `not null` constraint to the `name` column to prevent
    this situation from occurring.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你知道联系人的姓名，否则保存联系人信息没有太大意义，因此你可以为 `name` 列添加 `not null` 约束，以防止这种情况发生。
- en: 'Create the `contact` table like so:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式创建 `contact` 表：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Using the `not null` syntax when you define the `name` column prevents a value
    of `null` from being stored there and maintains data integrity. If you try to
    add a row with a null name, MySQL will display an error message and the row will
    be rejected.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当你定义`name`列时使用`not null`语法，可以防止存储`null`值，从而保持数据的完整性。如果你尝试添加一个`name`为null的行，MySQL将显示错误信息并拒绝该行。
- en: For columns defined as the table’s primary key, such as the `contact_id` column
    in this example, specifying `not null` isn’t necessary. MySQL prevents null values
    for primary key columns automatically.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对于定义为表主键的列，例如本例中的`contact_id`列，指定`not null`并不是必须的。MySQL会自动防止主键列中的null值。
- en: unique
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: unique
- en: 'If you want to prevent duplicate values in a column, you can add a `unique`
    constraint to the column definition. Let’s return to the `contact` table from
    the previous example:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想防止列中出现重复的值，可以在列定义中添加`unique`约束。让我们回到前面的`contact`表：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, you prevent duplicate email addresses from being entered by using the
    `unique` syntax on the `email_address` column. Now MySQL will no longer allow
    two contacts in the table to have the same email address.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你通过在`email_address`列上使用`unique`语法，防止输入重复的电子邮件地址。现在MySQL将不再允许表中有两个联系人拥有相同的电子邮件地址。
- en: check
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: check
- en: 'You can use a `check` constraint to make sure that a column contains certain
    values or a certain range of values. For example, let’s revisit the `high_temperature`
    table from [Listing 2-2](#listing2-2):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`check`约束来确保某个列包含特定的值或特定范围的值。例如，让我们重新查看来自[Listing 2-2](#listing2-2)的`high_temperature`表：
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this example, you add a `check` constraint to the `year` column to make sure
    that any year entered into the table is between 1880 and 2200\. Accurate temperature
    tracking wasn’t available until 1880, and your database probably won’t be in use
    after the year 2200\. Trying to add a year that is outside of that range would
    most likely be an error, so the constraint will prevent that from occurring.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，你在`year`列上添加了`check`约束，确保输入表中的年份在1880年到2200年之间。1880年之前没有准确的温度跟踪数据，而且你的数据库在2200年之后可能不会再使用。尝试添加一个超出该范围的年份很可能是一个错误，因此该约束会防止这种情况发生。
- en: You’ve also added a `check` constraint to the `high_temperature` column to limit
    temperature values to less than 200 degrees, because a temperature higher than
    that would most likely be a data error.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你还在`high_temperature`列上添加了`check`约束，将温度值限制在200度以下，因为超过这个温度的值很可能是数据错误。
- en: default
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: default
- en: 'Finally, you can add a `default` constraint to a column so that if a value
    isn’t supplied, a default value will be used. Take a look at the following `job`
    table:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以为列添加`default`约束，这样如果没有提供值，将使用默认值。看看以下的`job`表：
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In this example, you add a `default` constraint to the `shift` column, which
    stores data on work schedules. The default shift is `9-5`, meaning that if a row
    doesn’t include any data for the shift column, `9-5` will be written to the column.
    If a value for `shift` is provided, the default won’t be used.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，你为存储工作时间表数据的`shift`列添加了`default`约束。默认班次是`9-5`，意味着如果某行没有包含班次数据，`9-5`将写入该列。如果提供了`shift`的值，则不会使用默认值。
- en: 'You’ve seen how different constraints can help you improve and maintain the
    integrity of the data in your tables. Let’s turn now to another MySQL feature
    that also offers performance benefits to your tables: indexes.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到不同的约束如何帮助你提高和保持表中数据的完整性。接下来，让我们看看另一个MySQL特性，它同样能为你的表提供性能上的好处：索引。
- en: Indexes
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引
- en: MySQL lets you create indexes on your tables to speed up the process of retrieving
    data; in some cases, such as in tables with defined primary or foreign keys, MySQL
    will create indexes automatically. Just as an index in the back of a book can
    help you find information without needing to scan each page, indexes help MySQL
    find data in your tables without having to read every row.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL允许你在表上创建索引，以加速检索数据的过程；在某些情况下，例如在定义了主键或外键的表中，MySQL会自动创建索引。就像书本后面的索引可以帮助你找到信息，而无需扫描每一页，索引帮助MySQL在表中找到数据，而无需读取每一行。
- en: Say you create a `product` table like so
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你创建了一个`product`表，如下所示：
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'and you want to make the process of retrieving information about suppliers
    more efficient. Here’s the syntax to create an index that will do that:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使检索供应商信息的过程更加高效，以下是创建索引的语法：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this example, you create an index, called `product_supplier_index`, on the
    `supplier_id` column of the `product` table. Now, when users retrieve data from
    the `product` table using the `supplier_id` column, the index should make that
    retrieval quicker.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你在 `product` 表的 `supplier_id` 列上创建了一个名为 `product_supplier_index` 的索引。现在，当用户使用
    `supplier_id` 列从 `product` 表中检索数据时，索引应该能使检索更快速。
- en: Once you create an index, you won’t need to reference it by name—MySQL will
    use it behind the scenes. The new index won’t change anything about the way you
    use the table; it will just speed up access to it.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建了索引，就不需要通过名称引用它——MySQL 会在后台使用它。新的索引不会改变你使用表的方式；它只是加速了对表的访问。
- en: Although adding indexes can significantly improve performance, it wouldn’t make
    sense to index every column. Maintaining indexes has a performance cost, and creating
    indexes that don’t get used can actually decrease performance.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管添加索引可以显著提高性能，但为每一列添加索引并没有意义。维护索引会有性能成本，而创建没有被使用的索引实际上可能会降低性能。
- en: When you create tables, MySQL automatically creates most of the indexes that
    you’ll need. You don’t need to create indexes for columns that have been defined
    as primary keys, as foreign keys, or with `unique` constraints, because MySQL
    automatically indexes those columns.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建表时，MySQL 会自动创建你所需的大多数索引。对于已经定义为主键、外键或具有 `unique` 约束的列，你无需创建索引，因为 MySQL 会自动为这些列创建索引。
- en: 'Let’s look at how we would create the `dog` table from [Figure 2-3](#figure2-3):'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下如何从 [Figure 2-3](#figure2-3) 中创建 `dog` 表：
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The primary key for the table is `dog_id`, and the foreign keys are `owner_id`,
    `breed_id`, and `veterinarian_id`. Note that you haven’t created any indexes with
    the `create index` command. MySQL has automatically created indexes, however,
    from the columns labeled as the primary key and the foreign keys. You can confirm
    this using the `show indexes` command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 表的主键是 `dog_id`，外键是 `owner_id`、`breed_id` 和 `veterinarian_id`。注意，你没有使用 `create
    index` 命令创建任何索引。MySQL 已经自动为标记为主键和外键的列创建了索引。你可以使用 `show indexes` 命令来确认这一点：
- en: '[PRE20]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The results are shown in [Figure 2-4](#figure2-4).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如 [Figure 2-4](#figure2-4) 所示。
- en: '![](image_fi/503007c02/f02004.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c02/f02004.png)'
- en: 'Figure 2-4: Indexes automatically created by MySQL for the `dog` table'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-4：MySQL 为 `dog` 表自动创建的索引
- en: You can see in the `Column_name` column that MySQL automatically created all
    of the indexes that you need for this table.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 `Column_name` 列中看到，MySQL 已经为该表自动创建了你所需要的所有索引。
- en: Dropping and Altering Tables
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除和修改表
- en: 'To *drop* a table, which removes the table and all of its data, use the `drop
    table` syntax:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要*删除*一个表，移除该表及其所有数据，请使用 `drop table` 语法：
- en: '[PRE21]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here you tell MySQL to drop the `product` table you created in the previous
    section.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你告诉 MySQL 删除你在前一节创建的 `product` 表。
- en: To make changes to a table, use the `alter table` command. You can add columns,
    drop columns, change a column’s data type, rename columns, rename the table, add
    or remove constraints, and make other changes.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要对表进行更改，请使用 `alter table` 命令。你可以添加列、删除列、更改列的数据类型、重命名列、重命名表、添加或删除约束以及进行其他更改。
- en: 'Try altering the `customer` table from [Listing 2-1](#listing2-1):'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试修改 [Listing 2-1](#listing2-1) 中的 `customer` 表：
- en: '[PRE22]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here you alter the `customer` table in four ways: you add a column named `zip`
    that stores zip codes, remove the `address` column, rename the `zip` column to
    `zip_code` to make it more descriptive, and change the table name from `customer`
    to `valued_customer`.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你通过四种方式修改了 `customer` 表：添加了一个名为 `zip` 的列，用于存储邮政编码；删除了 `address` 列；将 `zip`
    列重命名为 `zip_code`，使其更具描述性；将表名从 `customer` 改为 `valued_customer`。
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you saw how to use MySQL Workbench to run commands and view
    databases. You created your own database tables and learned how to optimize them
    using indexes and adding constraints.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学习了如何使用 MySQL Workbench 执行命令并查看数据库。你创建了自己的数据库表，并学会了如何通过使用索引和添加约束来优化它们。
- en: In the next chapter, the beginning of Part II of the book, you’ll learn about
    retrieving data from MySQL tables using SQL, displaying your data in an ordered
    way, formatting SQL statements, and using comments in SQL.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，即本书第二部分的开始部分，你将学习如何使用 SQL 从 MySQL 表中检索数据，按顺序显示数据，格式化 SQL 语句，并在 SQL 中使用注释。
