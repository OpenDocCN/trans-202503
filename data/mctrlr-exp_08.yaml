- en: '**8 Basics of JTAG and ICSP**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**8 JTAG和ICSP基础**'
- en: The JTAG interface is a very low-level way of communicating with a microcontroller,
    either for debugging or for initial programming at the device factory.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JTAG接口是一种与微控制器通信的低级方式，通常用于调试或设备工厂的初始编程。
- en: 'JTAG consists of four mandatory signals: TDI, TDO, TCK, and TMS. TDI and TDO
    (Test Data In/Out) ferry data in and out of a chip, while TCK provides a clock
    for that data and TMS (Test Mode Select) directs the state of a chip. An optional
    fifth signal, TRST, can reset the testing logic.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: JTAG由四个必需信号组成：TDI、TDO、TCK和TMS。TDI和TDO（测试数据输入/输出）负责将数据传入和传出芯片，而TCK提供数据的时钟信号，TMS（测试模式选择）则指示芯片的状态。一个可选的第五个信号TRST可以重置测试逻辑。
- en: There are also some reduced-pin variants of JTAG, such as single wire debug
    (SWD) for ARM and spy-bi-wire for MSP430\. These are convenient in that they require
    fewer pins, and are sometimes easier to implement than the 4-wire variants of
    the protocols.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些减少引脚数的JTAG变种，如ARM的单线调试（SWD）和MSP430的spy-bi-wire。这些变种的优势在于它们需要的引脚更少，有时比4引脚的协议变种更容易实现。
- en: I won’t yet dig into the intricate details of these protocols, but it’s worth
    understanding a bit of history. JTAG began as a way to test connectivity on a
    PCB, and only later was extended to debugging microcontrollers. Debugging access
    to a chip is often very low level, and must be implemented differently for different
    revisions of a chip.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我暂时不会深入探讨这些协议的复杂细节，但了解一些历史背景是值得的。JTAG最初作为一种测试PCB连接性的方式，后来才被扩展为用于调试微控制器。对芯片的调试访问通常是非常底层的，并且必须为不同版本的芯片以不同方式实现。
- en: In addition to JTAG, many microcontroller vendors have their own serial interfaces
    for programming or debugging. The PIC and AVR lines from Microchip call this in-circuit
    serial programming (ICSP).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 除了JTAG，许多微控制器供应商还提供自己的串行接口用于编程或调试。Microchip的PIC和AVR系列称之为在线串行编程（ICSP）。
- en: '**JTAG Adapters and Software**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**JTAG适配器和软件**'
- en: JTAG began as just a physical layer, but a whole ecosystem of software and tools
    have been built above it. Some of this is documented; some of this is secret or
    proprietary. That’s why the choice of tools is so confusing.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: JTAG最初只是一个物理层，但在它之上已经建立了一个完整的软件和工具生态系统。其中一些有文档记录，一些则是机密或专有的。这就是为什么工具选择如此令人困惑的原因。
- en: In the same way that most embedded developers don’t know off-hand the number
    of pipeline stages of their favorite microcontroller, they rarely need to bother
    with implementing JTAG from scratch. For the purposes of firmware extraction,
    we should remember the difference between using an off-the-shelf adapter and writing
    a new adapter from scratch.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 就像大多数嵌入式开发者不能立刻说出他们最喜欢的微控制器的流水线阶段数一样，他们也很少需要从头开始实现JTAG。为了提取固件，我们应当记住使用现成适配器与从头编写新适配器之间的区别。
- en: On the hardware front, most popular microcontroller vendors offer their own,
    semi-proprietary adapters. These can be expensive, but there is a loophole in
    that the same adapters are included on development boards, and often a very cheap
    evaluation kit (EVK) can be rewired for debugging any chip, not just the model
    that it shipped with.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在硬件方面，大多数流行的微控制器供应商提供自己的半专有适配器。这些适配器可能很昂贵，但有一个漏洞是，开发板上也包含了相同的适配器，通常一个非常便宜的评估套件（EVK）可以被重新布线用于调试任何芯片，而不仅仅是与之一起出厂的型号。
- en: There are also vendors who specialize in JTAG adapters that work for a wide
    variety of boards. Segger’s J-Link is particularly popular, available in models
    ranging from a cheap student kit to fiendishly expensive models. The fancy adapters
    are capable not just of debugging code, but also of tracing it live with little
    or no performance impact.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些供应商专门提供适用于各种板子的JTAG适配器。Segger的J-Link特别受欢迎，提供从廉价学生套件到极其昂贵的型号。高端适配器不仅能调试代码，还能实时追踪代码，几乎不影响性能。
- en: And finally there are open source adapters, such as my old GoodFET for the MSP430\.
    A popular solution is to use an FTDI chip to big-bang IO for debugging a wide
    variety of targets. You might also use the GPIO pins of a Raspberry Pi, as those
    pins have far less latency than a USB adapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有一些开源适配器，如我以前为MSP430制作的GoodFET。一个流行的解决方案是使用FTDI芯片进行大爆炸IO调试，支持多种目标。你也可以使用树莓派的GPIO引脚，因为这些引脚的延迟比USB适配器低得多。
- en: On the software front, both proprietary and open software exists. Proprietary
    software often offers advantages in recording power usage and execution tracing,
    and it is sometimes better integrated into the commercial development tools. While
    the propriety software can be directed through developer APIs, open source alternatives
    include scripts for a wide variety of chips and can often be very quickly adapted
    to new targets. OpenOCD is not the only open source adapter, but it’s usually
    a good target for getting a GDB debugging session on a new chip.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件方面，既有专有软件也有开源软件。专有软件通常在记录功耗和执行追踪方面具有优势，有时与商业开发工具集成得更好。虽然专有软件可以通过开发者 API 进行定向，但开源替代方案包括适用于各种芯片的脚本，并且通常可以非常快速地适应新的目标。OpenOCD
    并不是唯一的开源适配器，但它通常是获取 GDB 调试会话的一个良好目标，适用于新的芯片。
- en: '**Discovering the Pinout**'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**发现引脚布局**'
- en: For a known chip in a convenient package with good documentation, it’s little
    trouble to trace out the JTAG pins, which should be clearly marked on the datasheet.
    But what should you do when the pinout is unknown, or the chip itself undocumented?
    Luckily, we have some options.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个已知的、带有良好文档的方便封装的芯片，追踪 JTAG 引脚并不困难，这些引脚应该在数据表上有明确标记。但当引脚布局未知，或者芯片本身没有文档时该怎么办呢？幸运的是，我们有一些选择。
- en: For convenience, many PCB designers use an industry-standard JTAG connectors
    for their architecture. If you see a header in two rows near your chip of interest
    with 10, 14 or 20 pins, it’s a good bet that’s JTAG. The bet gets stronger if
    the ground pins match the standard and the data pins go directly to your chip.
    PIC and AVR chips don’t support JTAG, but they have their own six pin standards.
    See [Figure 8.1](ch08.xhtml#ch8fig1) for examples.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，许多 PCB 设计师为其架构使用行业标准的 JTAG 连接器。如果你看到芯片附近有一个两排的引脚头，包含 10、14 或 20 个引脚，那么很可能是
    JTAG。如果接地引脚符合标准并且数据引脚直接连接到你的芯片，这个猜测就更准确。如果是 PIC 和 AVR 芯片，则不支持 JTAG，但它们有自己的六针标准。有关示例，请参见
    [图 8.1](ch08.xhtml#ch8fig1)。
- en: Violations of the standards occur, of course. In security-themed devices like
    the HID iClass readers in [Chapter 12](ch12.xhtml#ch12), this might be to frustrate
    reverse engineering. You’ll also see deviations from the standard layouts for
    other reasons, with pins swapped by accident or by the PCB designer’s confusion
    between the wide variety of 14-pin debugger standards.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，也会出现违反标准的情况。在像 [第 12 章](ch12.xhtml#ch12) 中的 HID iClass 读卡器这类安全主题设备中，这可能是为了防止逆向工程。你还会看到由于其他原因偏离标准布局的情况，例如引脚被意外交换，或者
    PCB 设计师在各种 14 针调试器标准之间混淆。
- en: Heinz (2006) describes an AVR firmware, GTK GUI, and algorithm for identifying
    the JTAG signals from candidate pins, which works by using the 1-bit BYPASS register
    to echo a signal back from the target. That project is no longer maintained, but
    Grand (2014) describes the JTAGulator, a modern open-source JTAG pinout finder
    built around the Parallax Propeller chip.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Heinz（2006）描述了一种 AVR 固件、GTK GUI 和算法，用于识别候选引脚中的 JTAG 信号，它通过使用 1 位的 BYPASS 寄存器将信号从目标回传。这一项目已不再维护，但
    Grand（2014）描述了 JTAGulator，这是一种现代的开源 JTAG 引脚布局查找器，基于 Parallax Propeller 芯片构建。
- en: '![Image](../images/f0094-01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0094-01.jpg)'
- en: 'Figure 8.1: Common JTAG and ICSP Pinouts'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1：常见的 JTAG 和 ICSP 引脚布局
- en: '![Image](../images/f0094-02.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0094-02.jpg)'
- en: 'Figure 8.2: JTAGulator from Grand (2014)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2：Grand（2014）的 JTAGulator
- en: If we can find the pins automatically, and if JTAG is really just a way to shuffle
    some registers back and forth, it ought to be possible to enumerate the registers,
    dumping a list for further investigation. Domke (2009) provides an algorithm and
    examples for doing exactly that.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们能够自动找到引脚，并且如果 JTAG 真的只是一个交换一些寄存器的方式，那么应该可以枚举这些寄存器，导出一个列表以供进一步调查。Domke（2009）提供了一个算法和实例，正是用来做这些的。
- en: In factories, JTAG not only programs chips, but it also verifies the connections
    between them, ensuring that all pins have been soldered. Skowronek (2007) describes
    an algorithm for recovering the pin connections between many chips, which was
    successfully used to reverse engineer video processing boards that he had rescued
    from a scrap heap, allowing him to build a cracker for searching the 8-character
    keyspace of SHA-1 and MD5 in about a day.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在工厂中，JTAG 不仅用于编程芯片，还用于验证它们之间的连接，确保所有引脚已被焊接。Skowronek（2007）描述了一个算法，用于恢复多个芯片之间的引脚连接，这一算法成功地被用于逆向工程他从废料堆中救回的视频处理板，使他能够在大约一天的时间内构建一个用于搜索
    SHA-1 和 MD5 的 8 字符密钥空间的破解工具。
- en: '**Total JTAG Locks**'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总 JTAG 锁**'
- en: Now that we’ve covered how JTAG works, how its pins can be found, and which
    JTAG hardware and software to use, let’s cover the protection mechanisms used
    in specific chips. Later in this book, we’ll dedicate whole chapters to bypassing
    individual protections.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了 JTAG 的工作原理、如何找到其引脚以及使用哪些 JTAG 硬件和软件，接下来让我们讨论特定芯片中使用的保护机制。在本书的后面章节，我们将专门介绍如何绕过各个保护机制。
- en: The MSP430 is a good example of JTAG with a total lock. Early chips, such as
    the MSP430F1xx, MSP430F2xx, and MSP430-F4xx, burn a fuse to enable protection
    mode. Just after the JTAG debugger connects, a fuse check sequence measures the
    protection state of the chip. In later chips, the electromigration fuse was replaced
    with a special word of flash memory, but the concept of total lockout was retained.
    These details are described in Texas Instruments (2010), more or less well enough
    to implement a JTAG programmer from scratch.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: MSP430 是一个很好例子，它采用了完全锁定的 JTAG。早期的芯片，如 MSP430F1xx、MSP430F2xx 和 MSP430-F4xx，通过烧录保险丝来启用保护模式。在
    JTAG 调试器连接后，保险丝检查序列会测量芯片的保护状态。在后来的芯片中，电迁移保险丝被一个特殊的闪存字取代，但完全锁定的概念仍然保留。这些细节在德州仪器（2010）中有描述，基本足够实现一个从头开始的
    JTAG 编程器。
- en: At first glance, total lockouts don’t seem to give us much room to work with,
    or leave much attack surface to explore. How can we unlock a chip that only exposes
    a useless BYPASS register?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，完全锁定似乎并没有给我们留下太多操作空间，也没有多少攻击面可以探索。我们怎么才能解锁一个只暴露无用的 BYPASS 寄存器的芯片呢？
- en: One method is to avoid it entirely by attacking its bootloader. The MSP430,
    like many other chips, has a mask ROM bootloader that remains enabled even after
    JTAG is locked. [Chapter E.8](app05.xhtml#app05_8) describes an attack that does
    just this, glitching the bootloader of the MSP430F5172 to dump the firmware even
    when JTAG is totally disabled.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一种方法是通过攻击其引导加载程序完全避免它。MSP430，像许多其他芯片一样，具有一个掩码 ROM 引导加载程序，即使在 JTAG 被锁定后也会保持启用。[第
    E.8 章](app05.xhtml#app05_8)描述了一种攻击方式，通过这种方式，可以在 JTAG 完全禁用的情况下，通过故障注入引导加载程序，泄露
    MSP430F5172 的固件。
- en: Another option is fault injection to falsify the result of the fuse check. We
    can glitch the chip at the moment of the fuse check so that the check passes when
    it ought to fail. See [Chapter 20](ch20.xhtml#ch20) for details of glitching the
    fuse check of older MSP430 chips by injecting the light of a camera flash.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是故障注入，以伪造保险丝检查的结果。我们可以在保险丝检查的时刻通过注入故障，使检查在应该失败的时候通过。有关通过注入照相机闪光灯光源来故障注入较旧
    MSP430 芯片的保险丝检查的详细信息，请参见[第 20 章](ch20.xhtml#ch20)。
- en: '**Partial JTAG Locks**'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**部分 JTAG 锁定**'
- en: Total JTAG locks are simple to implement, but they make designers nervous because
    they leave precious little room for failure analysis. If Bob’s widget fails, he
    wants to know as quickly as possible whether it was the fault of the hardware
    or the firmware, and without a debugger he won’t have much to work with. So rather
    than have Bob implement his own custom backdoor, many chip manufacturers allow
    for a partial lockout, attempting to protect Bob’s intellectual property while
    still allowing new firmware to be written into the chip.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 完全 JTAG 锁定很容易实现，但它们让设计师感到紧张，因为它们几乎不留下任何用于故障分析的空间。如果 Bob 的小工具发生故障，他希望尽快知道是硬件故障还是固件问题，没有调试器他将没有太多线索。所以，与其让
    Bob 实现自己的自定义后门，许多芯片制造商允许进行部分锁定，既保护了 Bob 的知识产权，同时仍然允许将新的固件写入芯片。
- en: The nRF51 chip from Nordic Semiconductor is a very popular chip for Bluetooth
    Low Energy (BLE). It uses a partial protection mechanism built around its memory
    protection unit (MPU), which disallows any memory access from the debugger. You
    can single-step existing code, reading and writing CPU registers to your heart’s
    content, but you’ll be disconnected the very clock cycle that you try to directly
    fetch a word from RAM or flash memory. Kris Brosch discovered a loophole, in that
    while you cannot read from flash memory yourself, you can find a gadget in flash
    memory that will do the work for you. See [Chapter 9](ch09.xhtml#ch09).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Nordic Semiconductor 的 nRF51 芯片是一款非常受欢迎的蓝牙低能耗（BLE）芯片。它使用一种基于内存保护单元（MPU）的部分保护机制，禁止调试器进行任何内存访问。你可以逐步执行现有代码，随心所欲地读取和写入
    CPU 寄存器，但一旦你尝试直接从 RAM 或闪存中获取一个字，处理器将在下一时钟周期断开连接。Kris Brosch 发现了一个漏洞，虽然你无法直接从闪存中读取，但你可以在闪存中找到一个小工具，让它为你完成这项工作。有关详细信息，请参见[第
    9 章](ch09.xhtml#ch09)。
- en: The STM32F0 family also provides a partial debug lock. After JTAG begins to
    debug the CPU, flash memory will be disconnected from the bus whenever *any* access
    to flash is performed, whether by the debugger itself or by the CPU code. You
    can’t reuse flash code to fetch the instructions for you, because executing from
    flash will also trigger the lockout if a debugger is attached. Luckily for an
    attacker, this lockout occurs just one clock cycle too late, so it’s possible
    to read exactly one word of flash memory after every JTAG connection, and with
    many thousands of connections, the entire firmware can be extracted. See [Chapter
    10](ch10.xhtml#ch10) for details.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: STM32F0系列还提供了部分调试锁定。在JTAG开始调试CPU后，每当对闪存执行*任何*访问操作时，无论是由调试器本身还是CPU代码引起的，闪存都将从总线上断开。你不能重新使用闪存代码来提取指令，因为从闪存执行代码也会在连接调试器时触发锁定。幸运的是，对于攻击者而言，这个锁定发生得只晚一个时钟周期，因此可以在每次JTAG连接后读取恰好一个字的闪存内容，并且通过数千次连接，整个固件都可以被提取出来。详细信息请见[第10章](ch10.xhtml#ch10)。
- en: Some other STM32 devices have a partial lockout that is not vulnerable to the
    first-word exposure of the STM32F0\. On these devices, there is a devilishly clever
    loophole in which a separate memory bus is used for accessing the interrupt vector
    table (IVT) during an interrupt call. Normally this table is at the very beginning
    of flash memory, but an attacker can use the vector table offset register (VTOR)
    to slide the interrupt table, dumping words of protected memory by triggering
    interrupt calls and then reading back the program counter! See [Chapter 11](ch11.xhtml#ch11).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一些其他STM32设备具有部分锁定功能，这种功能不会受到STM32F0的首字暴露漏洞的影响。在这些设备中，存在一个巧妙的漏洞，即在中断调用过程中，使用单独的内存总线来访问中断向量表（IVT）。通常，这个表位于闪存的最开始位置，但攻击者可以利用向量表偏移寄存器（VTOR）来滑动中断表，通过触发中断调用并读取程序计数器，从而转储受保护的内存！详情请见[第11章](ch11.xhtml#ch11)。
- en: Even when we don’t have a JTAG exploit for the chip in question, a partial JTAG
    lock can be useful for other purposes. Often, SRAM can be freely read when flash
    memory is locked, or shell-code can be written into unused portions of SRAM to
    be executed by a software bug after the next boot. And the complexity of a modern
    CPU, even that of a microcontroller, is such that nifty corner cases must exist
    somewhere, if only we look closely enough to find them.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们没有针对特定芯片的JTAG漏洞，部分JTAG锁定也可以用于其他目的。通常，当闪存被锁定时，SRAM可以被自由读取，或者可以将shell代码写入SRAM的未使用部分，并在下次启动时通过软件漏洞执行。而现代CPU的复杂性，即使是微控制器，也使得总会存在一些巧妙的角落案例，只要我们足够仔细，就能够发现它们。
