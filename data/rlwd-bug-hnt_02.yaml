- en: '**2'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2'
- en: OPEN REDIRECT**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 开放重定向**
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: We’ll begin our discussion with *open redirect* vulnerabilities, which occur
    when a target visits a website and that website sends their browser to a different
    URL, potentially on a separate domain. Open redirects exploit the trust of a given
    domain to lure targets to a malicious website. A phishing attack can also accompany
    a redirect to trick users into believing they’re submitting information to a trusted
    site when, in reality, their information is being sent to a malicious site. When
    combined with other attacks, open redirects can also enable attackers to distribute
    malware from the malicious site or to steal OAuth tokens (a topic we’ll explore
    in [Chapter 17](ch17.xhtml#ch17)).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从 *开放重定向* 漏洞开始讨论，当目标访问一个网站时，该网站将他们的浏览器重定向到一个不同的 URL，可能是一个独立的域名。开放重定向利用给定域名的信任，将目标引导到恶意网站。钓鱼攻击也可以伴随重定向，欺骗用户以为他们正在向一个可信站点提交信息，而实际上他们的信息正在被发送到恶意站点。当与其他攻击结合时，开放重定向还可以使攻击者从恶意站点分发恶意软件，或窃取
    OAuth 令牌（我们将在 [第 17 章](ch17.xhtml#ch17) 中进一步探讨）。
- en: Because open redirects only redirect users, they’re sometimes considered low
    impact and not deserving of a bounty. For example, the Google bug bounty program
    typically considers open redirects too low risk to reward. The Open Web Application
    Security Project (OWASP), which is a community that focuses on application security
    and curates a list of the most critical security flaws in web applications, also
    removed open redirects from its 2017 list of top 10 vulnerabilities.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 由于开放重定向只是将用户重定向，因此它们有时被认为是低影响的，不值得奖励。例如，Google 的漏洞奖励计划通常认为开放重定向的风险过低，不值得奖励。专注于应用程序安全并整理
    Web 应用程序中最关键安全漏洞列表的开放 Web 应用程序安全项目（OWASP）也在其 2017 年的十大漏洞列表中移除了开放重定向。
- en: Although open redirects are low-impact vulnerabilities, they’re great for learning
    how browsers handle redirects in general. In this chapter, you’ll learn how to
    exploit open redirects and how to identify key parameters, using three bug reports
    as examples.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管开放重定向是低影响的漏洞，但它们对于学习浏览器如何处理重定向非常有帮助。在本章中，你将学习如何利用开放重定向漏洞，并通过三个漏洞报告的实例来识别关键参数。
- en: '**How Open Redirects Work**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**开放重定向是如何工作的**'
- en: Open redirects occur when a developer mistrusts attacker-controlled input to
    redirect to another site, usually via a URL parameter, HTML `<meta>` refresh tags,
    or the DOM window location property.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 开放重定向发生在开发者不信任攻击者控制的输入以进行重定向到另一个站点时，通常通过 URL 参数、HTML `<meta>` 刷新标签或 DOM window.location
    属性。
- en: 'Many websites intentionally redirect users to other sites by placing a destination
    URL as a parameter in an original URL. The application uses this parameter to
    tell the browser to send a `GET` request to the destination URL. For example,
    suppose Google had the functionality to redirect users to Gmail by visiting the
    following URL:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 许多网站故意通过在原始 URL 中放置目标 URL 作为参数，将用户重定向到其他站点。该应用程序使用此参数告诉浏览器向目标 URL 发送 `GET` 请求。例如，假设
    Google 具有将用户重定向到 Gmail 的功能，只需访问以下 URL：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this scenario, when you visit this URL, Google receives a `GET` HTTP request
    and uses the `redirect_to` parameter’s value to determine where to redirect your
    browser. After doing so, Google servers return an HTTP response with a status
    code instructing the browser to redirect the user. Typically, the status code
    is 302, but in some cases it could be 301, 303, 307, or 308\. These HTTP response
    codes tell your browser that a page has been found; however, the code also informs
    the browser to make a `GET` request to the `redirect_to` parameter’s value, *[https://www.gmail.com/](https://www.gmail.com/)*,
    which is denoted in the HTTP response’s `Location` header. The `Location` header
    specifies where to redirect `GET` requests.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个场景中，当你访问这个 URL 时，Google 会收到一个 `GET` HTTP 请求，并使用 `redirect_to` 参数的值来确定将浏览器重定向到哪里。完成后，Google
    服务器返回一个 HTTP 响应，其中包含一个状态码，指示浏览器重定向用户。通常，状态码是 302，但在某些情况下，它可能是 301、303、307 或 308。这些
    HTTP 响应码告诉浏览器某个页面已被找到；然而，该代码还告知浏览器对 `redirect_to` 参数的值发出 `GET` 请求，* [https://www.gmail.com/](https://www.gmail.com/)
    *，该值在 HTTP 响应的 `Location` 头中指定。`Location` 头指定了重定向 `GET` 请求的位置。
- en: 'Now, suppose an attacker changed the original URL to the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设攻击者将原始 URL 改为以下内容：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If Google isn’t validating that the `redirect_to` parameter is for one of its
    own legitimate sites where it intends to send visitors, an attacker could substitute
    the parameter with their own URL. As a result, an HTTP response could instruct
    your browser to make a `GET` request to *https://www.*<*attacker*>*.com/*. After
    the attacker has you on their malicious site, they could carry out other attacks.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Google 没有验证 `redirect_to` 参数是否指向它自己的合法站点，攻击者就可以用自己的 URL 替换该参数。结果，HTTP 响应可能会指示浏览器发起对
    *https://www.*<*attacker*>*.com/* 的 `GET` 请求。在攻击者将你引导到其恶意网站后，他们可以执行其他攻击。
- en: When looking for these vulnerabilities, keep an eye out for URL parameters that
    include certain names, such as `url=`, `redirect=`, `next=`, and so on, which
    might denote URLs that users will be redirected to. Also keep in mind that redirect
    parameters might not always be obviously named; parameters will vary from site
    to site or even within a site. In some cases, parameters might be labeled with
    just single characters, such as `r=` or `u=`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在寻找这些漏洞时，留意包含某些名称的 URL 参数，如 `url=`, `redirect=`, `next=` 等，这些可能表示用户将被重定向到的 URL。同时请记住，重定向参数的名称不一定总是显而易见的；这些参数会根据网站的不同或同一网站内的不同部分而有所变化。在某些情况下，参数可能仅用单个字符表示，如
    `r=` 或 `u=`。
- en: 'In addition to parameter-based attacks, HTML `<meta>` tags and JavaScript can
    redirect browsers. HTML `<meta>` tags can tell browsers to refresh a web page
    and make a `GET` request to a URL defined in the tag’s `content` attribute. Here
    is what one might look like:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基于参数的攻击外，HTML `<meta>` 标签和 JavaScript 也可以重定向浏览器。HTML `<meta>` 标签可以告诉浏览器刷新网页，并向标签的
    `content` 属性中定义的 URL 发起 `GET` 请求。以下是一个可能的示例：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `content` attribute defines how browsers make an HTTP request in two ways.
    First, the `content` attribute defines how long the browser waits before making
    the HTTP request to the URL; in this case, `0` seconds. Secondly, the `content`
    attribute specifies the URL parameter in the website the browser makes the `GET`
    request to; in this case, `https://www.google.com`. Attackers can use this redirect
    behavior in situations where they have the ability to control the `content` attribute
    of a `<meta>` tag or to inject their own tag via some other vulnerability.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`content` 属性定义了浏览器发起 HTTP 请求的两种方式。首先，`content` 属性定义了浏览器在发起 HTTP 请求到 URL 之前等待的时间；在此例中为
    `0` 秒。其次，`content` 属性指定了浏览器发起 `GET` 请求时访问的网站 URL 参数；在此例中为 `https://www.google.com`。攻击者可以在他们能够控制
    `<meta>` 标签的 `content` 属性或通过其他漏洞注入自己的标签时利用这种重定向行为。'
- en: 'An attacker can also use JavaScript to redirect users by modifying the window’s
    `location` property through the *Document Object Model (DOM)*. The DOM is an API
    for HTML and XML documents that allows developers to modify the structure, style,
    and content of a web page. Because the `location` property denotes where a request
    should be redirected to, browsers will immediately interpret this JavaScript and
    redirect to the specified URL. An attacker can modify the window’s `location`
    property by using any of the following JavaScript:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者还可以通过修改窗口的 `location` 属性来使用 JavaScript 重定向用户，方法是通过 *文档对象模型 (DOM)*。DOM 是用于
    HTML 和 XML 文档的 API，它允许开发人员修改网页的结构、样式和内容。由于 `location` 属性指定了请求应重定向到的位置，浏览器会立即解析此
    JavaScript 并重定向到指定的 URL。攻击者可以通过以下任一 JavaScript 修改窗口的 `location` 属性：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Typically, opportunities to set the `window.location` value occur only where
    an attacker can execute JavaScript, either via a cross-site scripting vulnerability
    or where the website intentionally allows users to define a URL to redirect to,
    as in the HackerOne interstitial redirect vulnerability detailed later in the
    chapter on [page 15](ch02.xhtml#page_15).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，设置 `window.location` 值的机会仅在攻击者可以执行 JavaScript 时出现，无论是通过跨站脚本漏洞，还是在网站故意允许用户定义重定向
    URL 的情况下，就像本章第 [15 页](ch02.xhtml#page_15) 中详细介绍的 HackerOne 中继重定向漏洞一样。
- en: When you’re searching for open redirect vulnerabilities, you’ll usually be monitoring
    your proxy history for a `GET` request sent to the site you’re testing that includes
    a parameter specifying a URL redirect.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当你搜索开放重定向漏洞时，通常会监控你的代理历史记录，寻找向你正在测试的网站发送的 `GET` 请求，这些请求包括指定 URL 重定向的参数。
- en: '**Shopify Theme Install Open Redirect**'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Shopify 主题安装开放重定向**'
- en: '**Difficulty:** Low'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度:** 低'
- en: '**URL:** *https://apps.shopify.com/services/google/themes/preview/supply--blue?domain_name=<anydomain>*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL:** *https://apps.shopify.com/services/google/themes/preview/supply--blue?domain_name=<anydomain>*'
- en: '**Source:** *[https://www.hackerone.com/reports/101962/](https://www.hackerone.com/reports/101962/)*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://www.hackerone.com/reports/101962/](https://www.hackerone.com/reports/101962/)*'
- en: '**Date reported:** November 25, 2015'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2015年11月25日'
- en: '**Bounty paid:** $500'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖励金额：** $500'
- en: 'The first example of an open redirect you’ll learn about was found on Shopify,
    which is a commerce platform that allows people to create stores to sell goods.
    Shopify allows administrators to customize the look and feel of their stores by
    changing their theme. As part of that functionality, Shopify offered a feature
    to provide a preview for the theme by redirecting the store owners to a URL. The
    redirect URL was formatted as such:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个开放重定向示例是在 Shopify 上发现的，Shopify 是一个允许人们创建商店销售商品的电商平台。Shopify 允许管理员通过更改主题来定制商店的外观和感觉。作为该功能的一部分，Shopify
    提供了一个功能，通过将商店所有者重定向到一个 URL 来预览主题。重定向 URL 的格式如下：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `domain_name` parameter at the end of the URL redirected to the user’s store
    domain and added `/admin` to the end of the URL. Shopify was expecting that the
    `domain_name` would always be a user’s store and wasn’t validating its value as
    part of the Shopify domain. As a result, an attacker could exploit the parameter
    to redirect a target to *http://<attacker>.com/admin/* where the malicious attacker
    could carry out other attacks.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: URL 末尾的 `domain_name` 参数将用户重定向到其商店域名，并在 URL 后面加上了 `/admin`。Shopify 本来预计 `domain_name`
    始终会是用户的商店，并且没有验证其值是否属于 Shopify 域名的一部分。因此，攻击者可以利用该参数将目标重定向到 *http://<attacker>.com/admin/*，攻击者可以在该页面执行其他恶意攻击。
- en: '***Takeaways***'
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***总结***'
- en: Not all vulnerabilities are complex. For this open redirect, simply changing
    the `domain_name` parameter to an external site would redirect the user offsite
    from Shopify.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 不是所有的漏洞都很复杂。对于这个开放重定向，只需将 `domain_name` 参数更改为外部站点，即可将用户从 Shopify 重定向到其他网站。
- en: '**Shopify Login Open Redirect**'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Shopify 登录开放重定向**'
- en: '**Difficulty:** Low'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 低'
- en: '**URL:** *[http://mystore.myshopify.com/account/login/](http://mystore.myshopify.com/account/login/)*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL：** *[http://mystore.myshopify.com/account/login/](http://mystore.myshopify.com/account/login/)*'
- en: '**Source:** *[https://www.hackerone.com/reports/103772/](https://www.hackerone.com/reports/103772/)*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://www.hackerone.com/reports/103772/](https://www.hackerone.com/reports/103772/)*'
- en: '**Date reported:** December 6, 2015'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2015年12月6日'
- en: '**Bounty paid:** $500'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖励金额：** $500'
- en: This second example of an open redirect is similar to the first Shopify example
    except in this case, Shopify’s parameter isn’t redirecting the user to the domain
    specified by the URL parameter; instead, the open redirect tacks the parameter’s
    value onto the end of a Shopify subdomain. Normally, this functionality would
    be used to redirect a user to a specific page on a given store. However, attackers
    can still manipulate these URLs into redirecting the browser away from Shopify’s
    subdomain and to an attacker’s website by adding characters to change the meaning
    of the URL.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个开放重定向示例与第一个 Shopify 示例类似，唯一不同的是，这次 Shopify 的参数并没有将用户重定向到 URL 参数指定的域名，而是将参数的值附加到
    Shopify 子域名的末尾。通常，这个功能会用来将用户重定向到商店中的特定页面。然而，攻击者仍然可以通过添加字符来更改 URL 的含义，从而将浏览器从 Shopify
    的子域名重定向到攻击者的网站。
- en: 'In this bug, after the user logged into Shopify, Shopify used the parameter
    `checkout_url` to redirect the user. For example, let’s say a target visited this
    URL:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个漏洞中，用户登录 Shopify 后，Shopify 使用 `checkout_url` 参数来重定向用户。例如，假设目标访问了这个 URL：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: They would have been redirected to the URL *http://mystore.myshopify.com.<attacker>.com/*,
    which isn’t a Shopify domain.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 用户会被重定向到 URL *http://mystore.myshopify.com.<attacker>.com/*，而这并不是一个 Shopify
    域名。
- en: Because the URL ends in *.<attacker>.com* and DNS lookups use the rightmost
    domain label, the redirect goes to the *<attacker>.com* domain. So when *http://mystore.myshopify.com.<attacker>.com/*
    is submitted for DNS lookup, it will match on *<attacker>.com*, which Shopify
    doesn’t own, and not *myshopify.com* as Shopify would have intended. Although
    an attacker wouldn’t be able to freely send a target anywhere, they could send
    a user to another domain by adding special characters, such as a period, to the
    values they can manipulate.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 URL 以 *.<attacker>.com* 结尾，并且 DNS 查询使用最右边的域名标签，因此重定向会指向 *<attacker>.com*
    域名。所以当 *http://mystore.myshopify.com.<attacker>.com/* 被提交进行 DNS 查询时，它会匹配 *<attacker>.com*，而不是
    Shopify 本来希望匹配的 *myshopify.com*。尽管攻击者不能随意将目标发送到任何地方，但他们可以通过向可操控的值中添加特殊字符（如句点），将用户重定向到另一个域名。
- en: '***Takeaways***'
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***总结***'
- en: If you can only control a portion of the final URL used by a site, adding special
    URL characters might change the meaning of the URL and redirect a user to another
    domain. Let’s say you can only control the `checkout_url` parameter value, and
    you also notice that the parameter is being combined with a hardcoded URL on the
    backend of the site, such as the store URL *[http://mystore.myshopify.com/](http://mystore.myshopify.com/)*.
    Try adding special URL characters, like a period or the @ symbol, to test whether
    you can control the redirected location.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只能控制网站最终URL的一部分，添加特殊的URL字符可能会改变URL的含义，并将用户重定向到另一个域名。假设你只能控制`checkout_url`参数的值，并且你还注意到该参数与网站后端硬编码的URL（例如商店URL
    *[http://mystore.myshopify.com/](http://mystore.myshopify.com/)*）结合使用。尝试添加特殊的URL字符，如句点或@符号，测试是否可以控制重定向的位置。
- en: '**HackerOne Interstitial Redirect**'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**HackerOne过渡重定向**'
- en: '**Difficulty:** Low'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 低'
- en: '**URL:** N/A'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**网址：** 暂无'
- en: '**Source:** *[https://www.hackerone.com/reports/111968/](https://www.hackerone.com/reports/111968/)*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://www.hackerone.com/reports/111968/](https://www.hackerone.com/reports/111968/)*'
- en: '**Date reported:** January 20, 2016'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2016年1月20日'
- en: '**Bounty paid:** $500'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**支付奖金：** $500'
- en: Some websites try to protect against open redirect vulnerabilities by implementing
    *interstitial web pages*, which display before the expected content. Any time
    you redirect a user to a URL, you can show an interstitial web page with a message
    explaining to the user that they’re leaving the domain they’re on. As a result,
    if the redirect page shows a fake login or tries to pretend to be the trusted
    domain, the user will know that they’re being redirected. This is the approach
    HackerOne takes when following most URLs off its site; for example, when following
    links in submitted reports.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一些网站通过实现*过渡页面*来防止开放式重定向漏洞，过渡页面在预期内容之前显示。每当你将用户重定向到一个URL时，你可以显示一个过渡页面，向用户解释他们将离开当前域名。因此，如果重定向页面显示假登录页面或试图伪装成可信域名，用户将知道他们正在被重定向。这就是HackerOne在跟随其网站外的大多数URL时所采取的方法；例如，在跟随提交报告中的链接时。
- en: Although you can use interstitial web pages to avoid redirect vulnerabilities,
    complications in the way sites interact with one another can lead to compromised
    links. HackerOne uses Zendesk, a customer service support ticketing system, for
    its *[https://support.hackerone.com/](https://support.hackerone.com/)* subdomain.
    Previously, when you followed *[hackerone.com](http://hackerone.com)* with */zendesk_session*,
    the browser redirected from HackerOne’s platform to HackerOne’s Zendesk platform
    without an interstitial page because URLs containing the *[hackerone.com](http://hackerone.com)*
    domain were trusted links. (HackerOne now redirects *[https://support.hackerone.com](https://support.hackerone.com)*
    to *[docs.hackerone.com](http://docs.hackerone.com)* unless you are submitting
    a support request via the URL */hc/en-us/requests/new*.) However, anyone could
    create custom Zendesk accounts and pass them to the `/redirect_to_account?state=`
    parameter. The custom Zendesk account could then redirect to another website not
    owned by Zendesk or HackerOne. Because Zendesk allowed for redirecting between
    accounts without interstitial pages, the user could be taken to the untrusted
    site without warning. As a solution, HackerOne identified links containing `zendesk_session`
    as external links, thereby rendering an interstitial warning page when clicked.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你可以使用过渡页面来避免重定向漏洞，但网站之间的交互复杂性可能会导致链接被篡改。HackerOne使用Zendesk，一个客户服务支持票务系统，来处理其*[https://support.hackerone.com/](https://support.hackerone.com/)*子域名。以前，当你跟随*[hackerone.com](http://hackerone.com)*并带有*/zendesk_session*时，浏览器会从HackerOne平台重定向到HackerOne的Zendesk平台，而没有过渡页面，因为包含*[hackerone.com](http://hackerone.com)*域名的URL被认为是可信链接。（现在，除非你通过URL*/hc/en-us/requests/new*提交支持请求，否则HackerOne会将*[https://support.hackerone.com](https://support.hackerone.com)*重定向到*[docs.hackerone.com](http://docs.hackerone.com)*。）然而，任何人都可以创建自定义的Zendesk账户并将其传递给`/redirect_to_account?state=`参数。然后，那个自定义Zendesk账户可能会重定向到Zendesk或HackerOne没有拥有的其他网站。由于Zendesk允许在账户之间进行重定向而没有过渡页面，用户可能会在没有警告的情况下被带到不受信任的网站。作为解决方案，HackerOne将包含`zendesk_session`的链接标识为外部链接，因此在点击时会显示过渡警告页面。
- en: 'In order to confirm this vulnerability, the hacker Mahmoud Jamal created an
    account on Zendesk with the subdomain *[http://compayn.zendesk.com](http://compayn.zendesk.com)*.
    He then added the following JavaScript code to the header file using the Zendesk
    theme editor, which allows administrators to customize their Zendesk site’s look
    and feel:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确认这个漏洞，黑客Mahmoud Jamal在Zendesk上创建了一个帐户，使用了子域名*[http://compayn.zendesk.com](http://compayn.zendesk.com)*。然后，他通过Zendesk主题编辑器将以下JavaScript代码添加到头文件中，该编辑器允许管理员自定义他们的Zendesk站点外观和感觉：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Using this JavaScript, Jamal instructed the browser to visit *[http://evil.com](http://evil.com)*.
    The `<script>` tag denotes code in HTML and `document` refers to the entire HTML
    document that Zendesk returns, which is the information for the web page. The
    dots and names following `document` are its properties. Properties hold information
    and values that either describe an object or can be manipulated to change the
    object. So you can use the `location` property to control the web page your browser
    displays and use the `href` subproperty (which is a property of the `location`)
    to redirect the browser to the defined website. Visiting the following link redirected
    targets to Jamal’s Zendesk subdomain, which made the target’s browser run Jamal’s
    script and redirected them to *[http://evil.com](http://evil.com)*:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这段JavaScript，Jamal指示浏览器访问*[http://evil.com](http://evil.com)*。`<script>`标签表示HTML中的代码，而`document`指的是Zendesk返回的整个HTML文档，这是网页的内容。紧随`document`的点和名称是它的属性。属性保存信息和数值，这些信息要么描述对象，要么可以被操作以改变对象。因此，你可以使用`location`属性来控制浏览器显示的网页，并使用`href`子属性（它是`location`的一个属性）来重定向浏览器到定义的网站。访问以下链接会将目标重定向到Jamal的Zendesk子域名，这使得目标的浏览器执行Jamal的脚本，并将其重定向到*[http://evil.com](http://evil.com)*：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Because the link includes the domain *[hackerone.com](http://hackerone.com)*,
    the interstitial web page doesn’t display, and the user wouldn’t know the page
    they were visiting is unsafe. Interestingly, Jamal originally reported the missing
    interstitial page redirect issue to Zendesk, but it was disregarded and not marked
    as a vulnerability. Naturally, he kept digging to see how the missing interstitial
    could be exploited. Eventually, he found the JavaScript redirect attack that convinced
    HackerOne to pay him a bounty.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因为链接包含了域名*[hackerone.com](http://hackerone.com)*，所以过渡网页并没有显示出来，用户也不会知道他们访问的页面是不安全的。有趣的是，Jamal最初向Zendesk报告了这个缺失的过渡页面重定向问题，但它被忽视了，并未标记为漏洞。自然，他继续深入挖掘，看看缺失的过渡页面如何被利用。最终，他找到了JavaScript重定向攻击，这使得HackerOne决定支付他赏金。
- en: '***Takeaways***'
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***关键点***'
- en: As you search for vulnerabilities, note the services a site uses because each
    represents new attack vectors. This HackerOne vulnerability was made possible
    by combining HackerOne’s use of Zendesk and the known redirect HackerOne was permitting.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在寻找漏洞时，请注意网站使用的服务，因为每一个都代表了新的攻击路径。这个HackerOne漏洞正是通过结合HackerOne使用Zendesk和HackerOne允许的已知重定向漏洞得以实现的。
- en: Additionally, as you find bugs, there will be times when the security implications
    aren’t readily understood by the person reading and responding to your report.
    For this reason, I’ll discuss vulnerability reports in [Chapter 19](ch19.xhtml#ch19),
    which details the findings you should include in a report, how to build relationships
    with companies, and other information. If you do some work up front and respectfully
    explain the security implications in your report, your efforts will help ensure
    a smoother resolution.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当你发现漏洞时，有时阅读和回应你报告的人可能无法立即理解其中的安全影响。因此，我将在[第19章](ch19.xhtml#ch19)中讨论漏洞报告，其中详细介绍了你应在报告中包含的发现、如何与公司建立关系以及其他信息。如果你在前期做了一些工作，并且在报告中尊重地解释了安全影响，你的努力将有助于确保问题的顺利解决。
- en: That said, there will be times when companies don’t agree with you. If that’s
    the case, continue to dig like Jamal did and see if you can prove the exploit
    or combine it with another vulnerability to demonstrate impact.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，有时公司可能不同意你的看法。如果是这种情况，继续像Jamal一样深入挖掘，看看你是否能证明漏洞的存在，或者将其与另一个漏洞结合，展示其影响。
- en: '**Summary**'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Open redirects allow a malicious attacker to redirect people unknowingly to
    a malicious website. Finding them, as you learned from the example bug reports,
    often requires keen observation. Redirect parameters are sometimes easy to spot
    when they have names like `redirect_to=`, `domain_name=`, or `checkout_url=`,
    as mentioned in the examples. Other times, they might have less obvious names,
    such as `r=`, `u=`, and so on.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 开放重定向允许恶意攻击者在受害者不知情的情况下将其重定向到恶意网站。正如你从示例漏洞报告中学到的，发现这些漏洞通常需要敏锐的观察力。重定向参数有时很容易被发现，尤其是它们的名字像
    `redirect_to=`、`domain_name=` 或 `checkout_url=`，如示例中所提到的。其他时候，它们可能有不那么明显的名字，例如
    `r=`、`u=` 等等。
- en: The open redirect vulnerability relies on an abuse of trust where targets are
    tricked into visiting an attacker’s site while thinking they’re visiting a site
    they recognize. When you spot likely vulnerable parameters, be sure to test them
    thoroughly and add special characters, like a period, if some part of the URL
    is hardcoded.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 开放重定向漏洞依赖于对信任的滥用，攻击者通过让目标访问一个他们认为是熟悉的站点，实际上却是攻击者的站点。当你发现可能存在漏洞的参数时，务必彻底测试它们，并在
    URL 的某些部分硬编码时加入特殊字符，如句号。
- en: The HackerOne interstitial redirect shows the importance of recognizing the
    tools and services websites use while you hunt for vulnerabilities. Keep in mind
    that you’ll sometimes need to be persistent and clearly demonstrate a vulnerability
    to persuade a company to accept your findings and pay a bounty.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: HackerOne 的过渡重定向展示了在寻找漏洞时，识别网站使用的工具和服务的重要性。记住，有时你需要保持耐心，并清楚地展示漏洞，才能说服公司接受你的发现并支付奖励。
