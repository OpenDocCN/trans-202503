- en: Chapter 3. Pipe Dreams
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章 管道梦想
- en: The Apprentice Plumber’s Dilemma
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学徒水管工的困境
- en: The King, Scarlet, and Ruben made their way back from the Royal Bathroom, the
    King gleefully batting his string about like a big, beardy cat.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 国王、斯嘉丽和鲁本从皇家浴室返回，国王高兴地把他的字符串像一只大胡子猫一样挥舞着。
- en: “All those waterworks for a string in a shower!” Scarlet said to the King. “I
    hope you’re feeling better now.”
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: “为了一个淋浴里的字符串搞得这么复杂！”斯嘉丽对国王说。“希望你现在感觉好些了。”
- en: “Much,” said the King, spinning the beads and trinkets on his string every which
    way.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: “做很多事，”国王说着，转动着他字符串上的珠子和小饰品。
- en: “Speaking of waterworks,” said Ruben, “do you hear that?” And as they rounded
    the corner and reentered the King’s study, they found themselves ankle-deep in
    a miniature lake. There was water, water everywhere!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: “说到水管，”鲁本说，“你听到那个声音了吗？”他们转过拐角重新进入国王的书房时，发现自己已经脚踝深陷在一个迷你湖中。到处都是水，水啊水！
- en: “The Mysterious Pipe!” cried the King. “Look!” And he pointed to the Mysterious
    Pipe, which was shaking violently and gushing a surprising amount of water from
    its narrow top.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: “神秘管道！”国王喊道。“看！”他指着正在剧烈晃动并从狭窄顶部喷涌出大量水的神秘管道。
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159983.png.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![没有说明的图片](../Images/httpatomoreillycomsourcenostarchimages2159983.png.jpg)'
- en: “Check out the Flowmatic Something-or-Other!” said the King.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: “看看这个Flowmatic某某东西！”国王说。
- en: “That’s not terribly descriptive,” Ruben said.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: “这不是很形象，”鲁本说。
- en: “No, that’s what it’s called,” said the King. “The Flowmatic Something-or-Other™.”
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: “不，那就是它的名字，”国王说。“Flowmatic某某东西™。”
- en: “Found it!” said Scarlet, grabbing a square metal box labeled HIS MAJESTY’S
    FLOWMATIC SOMETHING-OR-OTHER™ on the back of the Pipe. She pried open the cover
    of the Flowmatic Something-or-Other to find a miniature Computing Contraption
    with its glowing `>>` IRB prompt.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: “找到了！”斯嘉丽说，抓起一个背面标有“陛下的Flowmatic某某东西™”的方形金属盒子。她撬开Flowmatic某某东西的盖子，发现里面有一个微型计算装置，上面显示着发光的`>>`
    IRB提示符。
- en: “What do I do?” Scarlet asked the King.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: “我该做什么？”斯嘉丽问国王。
- en: “I seem to recall this program uses a `flowmatic_on` variable,” the King said.
    “Try turning it off.” He paused a moment. “Hey! I remembered the stuff we learned
    about variables!”
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: “我好像记得这个程序使用了`flowmatic_on`变量，”国王说。“试着关闭它。”他停顿了一下。“嘿！我想起了我们学过的关于变量的知识！”
- en: 'Scarlet flashed the King a thumbs-up, typed at the prompt, and pressed ENTER:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 斯嘉丽给国王竖起大拇指，输入命令并按下ENTER：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Mysterious Pipe shuddered once and sputtered, and the water stopped flowing.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 神秘管道颤抖了一下，冒出了几声喷溅声，水流停止了。
- en: “Whew!” said Ruben. “Nice work!” He peered over Scarlet’s shoulder at the screen.
    “How’d you do that? What’s `false`? It can’t be a string; there are no quotes
    around it. Is it also a variable?”
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: “呼！”鲁本说。“干得好！”他从斯嘉丽肩膀上探头看着屏幕。“你是怎么做到的？`false`是什么？它不可能是字符串，那里没有引号。它也是一个变量吗？”
- en: '“Nope!” said Scarlet. “But it’s built into Ruby just like numbers, strings,
    and variables are. It’s called a *Boolean*, and there are actually two of them:
    `true` and `false`. It looks like the Mysterious Pipe works when `flowmatic_on`
    is `true` and shuts off when it’s `false`.”'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: “不行！”斯嘉丽说。“但它像数字、字符串和变量一样内置在Ruby里。它叫做*布尔值*，其实有两个：`true`和`false`。看起来神秘管道在`flowmatic_on`为`true`时工作，`false`时停止。”
- en: “Then how was `flowmatic_on true` before?” Ruben asked.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: “那么，`flowmatic_on true`之前是怎么回事？”鲁本问道。
- en: “I don’t know!” said Scarlet. “Someone or something must have created that variable.”
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: “我不知道！”斯嘉丽说。“一定是某个人或某物创建了那个变量。”
- en: “Well, it’s stopped leaking,” said the King, “but it’s not really fixed. It
    should work correctly even when `flowmatic_on` is `true`! After all, the Flowmatic
    supplies all the water to the castle; without it, there can be no Royal Baths,
    Royal Toothbrushings, or Royal Water Balloon Fights! We need the Mysterious Pipe
    and its Flowmatic to be on without leaking all over the place.”
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，水不再漏了，”国王说，“但是问题并没有完全解决。它应该在`flowmatic_on`为`true`时也能正常工作！毕竟，Flowmatic负责向城堡提供所有水源；没有它，就没有皇家浴室、皇家刷牙，甚至没有皇家水气球大战！我们需要让神秘管道和它的Flowmatic保持开启状态，而且不漏水。”
- en: '“What about this?” Ruben said, pointing to a line on the Computing Contraption
    just below the Flowmatic’s on/off control:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: “那这个呢？”鲁本指着计算装置上Flowmatic的开/关控制下方的一行说。
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: “The water must be coming into the Mysterious Pipe too fast,” said Scarlet.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: “水一定流进神秘管道太快了，”斯嘉丽说。
- en: “Gadzooks!” said the King. “The flow rate must be above 50!”
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: “天哪！”国王说。“流量一定得超过50！”
- en: “What should we do?” asked Ruben.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: “我们该怎么办？”鲁本问道。
- en: The King thought for a minute. “I think it’s best that we do what should always
    be done in these situations,” he said. “We should call a professional. In this
    case, the Royal Plumber!”
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 国王想了想。“我认为我们最好做些在这种情况下总该做的事情，”他说。“我们应该请专业人士来处理。这个情况下，是皇家管道工！”
- en: Writing and Running Ruby Scripts
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写和运行 Ruby 脚本
- en: While the King calls the Royal Plumber, I’ll take a second to explain some more
    Ruby magic to you. Don’t worry, it won’t take but a minute.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当国王去叫皇家管道工时，我趁机再给你讲讲 Ruby 的一些魔法。别担心，不会占用你太多时间。
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159985.png.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![没有说明文字的图片](../Images/httpatomoreillycomsourcenostarchimages2159985.png.jpg)'
- en: You see, you don’t always have to type commands into IRB one at a time. As mentioned
    in [Chapter 1](../Text/ch01.html "Chapter 1. What This Book’s About"), you can
    write a big block of Ruby code and save it as a Ruby *script*. Then, you can run
    your Ruby script in IRB! (This is a lot like running your code in the terminal
    with the `ruby` command, as we did in [Chapter 1](../Text/ch01.html "Chapter 1. What
    This Book’s About"), but IRB will stay open the whole time.) Just start IRB while
    you’re in the folder that contains your Ruby script, then type `load 'filename.rb'`.
    That’s exactly the same as typing everything in the file into IRB—but this way
    it’s easy to make changes and try again!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你看，其实你并不总是需要在 IRB 中逐行输入命令。正如在[第 1 章](../Text/ch01.html "第 1 章：本书内容简介")中提到的，你可以写一大段
    Ruby 代码并将其保存为 Ruby *脚本*。然后，你可以在 IRB 中运行这个 Ruby 脚本！（这就像在终端中使用 `ruby` 命令运行你的代码一样，就像我们在[第
    1 章](../Text/ch01.html "第 1 章：本书内容简介")中所做的那样，只是 IRB 会一直保持开启。）只需在包含 Ruby 脚本的文件夹中启动
    IRB，然后输入 `load 'filename.rb'`。这和将文件中的所有内容逐行输入到 IRB 中完全相同——但这样做便于修改和重新尝试！
- en: Let’s try this little guy on for size. Type the following code in your favorite
    text editor and save it as a file called flow.rb. (Look back at [Chapter 1](../Text/ch01.html
    "Chapter 1. What This Book’s About") if you need a reminder of how to do this,
    and don’t worry—we’ll cover the new `#{}` syntax in two shakes of a fox’s tail.)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来试试这个小例子。将以下代码输入到你最喜欢的文本编辑器中，并保存为名为 flow.rb 的文件。（如果你需要提醒如何操作，可以回顾一下[第 1 章](../Text/ch01.html
    "第 1 章：本书内容简介")，不用担心——我们会在短短的时间内讲解新的 `#{}` 语法。）
- en: flow.rb
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: flow.rb
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you open IRB, type **`load ''flow.rb''`**, and press ENTER, you should see:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开 IRB，输入 **`load 'flow.rb'`**，然后按回车键，你应该会看到：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Let’s walk through this line by line.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐行解析一下。
- en: 'First, `load ''flow.rb''` (it doesn’t matter if you use single or double quotes
    here) tells Ruby to look for a file called *flow.rb* in the current directory
    (a *directory* is just a fancy name for a folder on your computer). If Ruby finds
    *flow.rb* and there are no problems with the code in the file, Ruby will run that
    code just as if you’d typed it bit by bit into IRB. Next, you know what `flow_rate
    = 100` and `puts` do: the first one sets the `flow_rate` variable to the value
    `100`, and `puts` prints out the string you give it. (You also get a bonus `=>
    true` from Ruby, which lets you know that loading the file worked.) But you probably
    want to know: what’s this crazy-looking `#{flow_rate}` business?'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`load 'flow.rb'`（你在这里使用单引号或双引号都可以）告诉 Ruby 查找当前目录下的一个名为 *flow.rb* 的文件（*目录*只是你计算机中文件夹的另一个名称）。如果
    Ruby 找到 *flow.rb* 且文件中的代码没有问题，Ruby 会像你逐行输入代码到 IRB 一样运行它。接下来，你知道 `flow_rate = 100`
    和 `puts` 是做什么的：前者将 `flow_rate` 变量设置为值 `100`，而 `puts` 打印出你给它的字符串。（你还会看到一个额外的 `=>
    true`，这表示加载文件成功。）但你可能想知道：这个看起来很奇怪的 `#{flow_rate}` 是什么？
- en: 'Well, strings and variables are different things, but sometimes you might want
    to combine them—say, to print out a message displaying different values for the
    `flow_rate` variable. Rather than making us look up the value of that variable
    and type it into the string by hand every time we want to use it, Ruby lets us
    use `#{}` to say, “Hey! Just insert the value of this variable right into the
    string.” So when you have:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，字符串和变量是不同的东西，但有时你可能想把它们结合起来——比如，打印出一个显示不同 `flow_rate` 变量值的消息。Ruby 让我们可以使用
    `#{}` 来直接把变量的值插入到字符串中，而不必每次想用它时都查找变量值并手动输入。所以，当你有以下代码时：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'you get:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你得到：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'One last thing: remember in [Chapter 2](../Text/ch02.html "Chapter 2. The King
    and His String") when Ruben said that strings with double quotes (`"`) were very
    slightly different from strings with single quotes (`''`)? Well, the `#{}` magic
    (called *string interpolation* if you want to be super fancy) is possible *only*
    with double-quoted strings; it can’t be done with single-quoted ones. (This is
    precisely what the King meant in [Chapter 2](../Text/ch02.html "Chapter 2. The
    King and His String") when he said you could put more complicated bits and trinkets
    on a double-quoted string than on a single-quoted string.)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件事：记得在[第2章](../Text/ch02.html "第2章。国王与他的字符串")中，鲁本说过带双引号（`"`)的字符串和带单引号（`'`）的字符串略有不同吗？嗯，`#{}`魔法（如果你想显得很高大上，这叫做*字符串插值*）只能在双引号字符串中使用；单引号字符串无法实现这一点。（这正是国王在[第2章](../Text/ch02.html
    "第2章。国王与他的字符串")中所说的，你可以在双引号字符串上做比在单引号字符串上更多复杂操作的意思。）
- en: That’s really all I wanted to show you. And speaking of the King . . .
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我想给你们看的所有内容。顺便说一句，提到国王……
- en: His Majesty’s Flow Control
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 他的威严的流量控制
- en: “Hello?” said the King. (He had been on hold for a while.) “Is this the Royal
    Plumber?”
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: “喂？”国王说。（他已经等待了一段时间。）“这是皇家水管工吗？”
- en: “Chuff! Chuff! Chuff!” said the Royal Plumber.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: “咳！咳！咳！”皇家水管工说。
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159987.png.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159987.png.jpg)'
- en: “Oh dear,” said the King. “It sounds like the Royal Plumber has come down with
    a bad case of the Chuffs.”
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: “哎呀，”国王说。“听起来皇家水管工好像得了重度的咳嗽症。”
- en: “Chuffs?” said Scarlet.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: “咳？”斯嘉丽说。
- en: “Chuff!” said the Royal Plumber.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: “咳！”皇家水管工说。
- en: “It’s a bit like a cold, but coughier and huffier,” said the King. “Royal Plumber,
    could you send down your Apprentice to help us with the Mysterious Pipe? It’s
    been overflowing terribly.”
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: “有点像感冒，但更咳嗽和喘不过气，”国王说。“皇家水管工，能派你的学徒下来帮我们处理那个神秘的管道吗？它已经溢出来好久了。”
- en: “Chuff!” she said, and hung up.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: “咳！”她说，挂了电话。
- en: “I think that was a yes,” said the King.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: “我想这是个肯定的回答，”国王说。
- en: “I think so, too,” said Ruben. “It looks like the Apprentice is already here!”
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: “我也这么觉得，”鲁本说。“看起来学徒已经在这里了！”
- en: The Apprentice to the Royal Plumber strolled into the King’s study carrying
    a large red toolbox. Ruben and Scarlet found his expression hard to read behind
    his dark rectangular sunglasses and heavy black beard. The name *Haldo* was stitched
    in red on the front of his coveralls.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 皇家水管工的学徒提着一个大红色工具箱走进国王的书房。鲁本和斯嘉丽发现他戴着深色的矩形太阳镜和浓密的黑胡子，难以读出他的表情。*哈尔多*的名字用红色线绣在他的工作服前面。
- en: “Haldo!” said the King.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: “哈尔多！”国王说。
- en: “That’s me,” said Haldo. “I hear the Mysterious Pipe is on the fritz.”
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: “就是我，”哈尔多说。“我听说那个神秘的管道坏了。”
- en: “Definitely,” said Scarlet. “Can you help us fix it?”
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: “当然，”斯嘉丽说。“你能帮我们修好吗？”
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159989.png.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159989.png.jpg)'
- en: '“I think so,” said Haldo, “but I’m just the Apprentice, so it may take me a
    little while. Let’s see what’s what.” He walked over to the Flowmatic Something-or-Other
    and looked at the screen for a moment. “I seem to remember there’s an *instructions.rb*
    file in here somewhere.” He typed `load ''instructions.rb''`, and this is what
    came up:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: “我想是的，”哈尔多说，“但我只是个学徒，所以可能需要一些时间。我们来看看吧。”他说着走到Flowmatic某某机器前，盯着屏幕看了片刻。“我好像记得这里面有个*instructions.rb*文件。”他输入了`load
    'instructions.rb'`，然后出现了以下内容：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: “Huh!” said Ruben. “So the problem is that if the flow rate is too high or too
    low, we only get a message. Ruby doesn’t automatically correct the flow rate,
    so we can end up with a flood.”
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: “哈！”鲁本说。“问题是，如果流量太高或太低，我们只能收到消息。Ruby不会自动修正流量，因此我们可能会遭遇洪水。”
- en: “We can fix that!” said Scarlet. “We’ll write a Ruby program to check the flow
    rate. If the flow rate is too high, we’ll lower it, and if it’s too low, we’ll
    increase it!”
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: “我们能修好这个！”斯嘉丽说。“我们写一个Ruby程序来检查流量。如果流量太高，我们就降低它，如果流量太低，我们就增加它！”
- en: Haldo scratched his head. “Well, here’s the thing,” he said. “I think I know
    what we need to do, but I haven’t learned enough Ruby to enter the right commands.
    If you kids can give me a hand, though, I think we’ll be in business.”
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 哈尔多挠了挠头。“嗯，问题是，”他说。“我想我知道我们需要做什么，但我还没学够Ruby，无法输入正确的命令。不过，如果你们小孩能帮我一把，我觉得我们就能搞定了。”
- en: “No problem,” said Ruben. “Making a Ruby program do different actions based
    on different conditions is something Scarlet and I know backward and forward.”
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: “没问题，”鲁本说，“让一个 Ruby 程序根据不同条件执行不同操作是斯嘉丽和我非常熟悉的事情。”
- en: '“It’s called *control flow*,” said Scarlet, “and it’s not hard at all. Take
    a look!” She opened a new file in her text editor on the Computing Contraption,
    saved it as flowmatic_rules.rb, and typed:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: “这叫做 *控制流*，”斯嘉丽说，“其实一点也不难。看看吧！”她在计算装置上的文本编辑器中打开了一个新文件，将其保存为 flowmatic_rules.rb，并输入了以下内容：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: “You’ve lost me,” said the King.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: “我完全不懂了，”国王说。
- en: “We’ll take it slow,” said Scarlet. “First, we assign the variables `flowmatic_on`
    and `water_available` to `true`. Then, we have the `if`, which is a *conditional*,
    on the second line. It means that *if* the code that follows on the same line
    is `true`, then everything before `end` gets run.”
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: “我们慢慢来，”斯嘉丽说，“首先，我们将 `flowmatic_on` 和 `water_available` 这两个变量赋值为 `true`。然后，在第二行，我们有
    `if`，它是一个 *条件语句*。它的意思是：*如果*后面的代码是 `true`，那么在 `end` 之前的所有代码都会被执行。”
- en: “And `&&` is just Ruby’s way of saying *and*,” said Ruben. “We already know
    that the fourth line sets the flow rate to 50, so together, the whole thing says,
    ‘If `flowmatic_on` is `true` *and* `water_available` is also `true`, this program
    will set the `flow_rate` variable to `50`. `end` just tells Ruby that if we’re
    not setting the flow rate to 50, we shouldn’t do anything—at least, not yet.”
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: “`&&` 只是 Ruby 表达 *and* 的方式，”鲁本说，“我们已经知道第四行将流量设置为 50，所以整个意思是：‘如果 `flowmatic_on`
    为 `true` 且 `water_available` 也为 `true`，这个程序就会将 `flow_rate` 变量设为 `50`。`end` 只是告诉
    Ruby，如果我们没有将流量设置为 50，就什么都不做——至少现在不做。”
- en: “I see,” said Haldo. “And that’s just the very first of the instructions! Great
    work. But what happens if the Flowmatic *isn’t* on or there *isn’t* water available?”
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: “我明白了，”哈尔多说，“这只是第一条指令！干得好。不过如果 Flowmatic *没有*开启，或者没有水可用会怎么样？”
- en: '“Well, at the moment, nothing,” said Ruben. “But we can fix that.” He reached
    over and added to the *flowmatic_rules.rb* code in his text editor:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，暂时什么都没有，”鲁本说，“不过我们可以解决这个问题。”他伸手过去，在文本编辑器中修改了*flowmatic_rules.rb*代码：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '“I think I’m starting to get this,” said the King. “➊ is just what we had before.
    Then at ➋, we’re trying something new: `elsif`! Does `elsif` mean ‘if the first
    bit didn’t get run, try this next step’?”'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: “我想我开始明白了，”国王说，“➊ 就是我们之前所做的。然后在 ➋ 处，我们尝试了一些新的东西：`elsif`！`elsif`是不是意味着‘如果第一部分没有执行，就试试下一步’？”
- en: “That’s exactly it,” said Scarlet. “Don’t worry about the weird spelling, either!
    It’s just a shorter way of writing ‘else, if.’ And the `!` is just Ruby’s way
    of saying *not*. So if `flowmatic_on` happens to be `false`, `!flowmatic_on` will
    be `true`, and vice versa.”
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: “正是这样，”斯嘉丽说，“别担心奇怪的拼写！那只是‘else, if’的简写方式。而 `!` 只是 Ruby 表达 *not* 的方式。所以如果 `flowmatic_on`
    是 `false`，那么 `!flowmatic_on` 就是 `true`，反之亦然。”
- en: '“And since there’s only one condition left—if the Flowmatic *is* on but there’s
    just no water—the program `puts` the ‘No water!’ message at ➌ using an `else`,
    which means: ‘If none of the other code was run, then run the code that follows,’”
    Ruben said.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: “而且既然只剩下一个条件——如果 Flowmatic *开启* 了但没有水——程序就在 ➌ 处用 `else` 输出‘没有水！’的信息，这意味着：‘如果没有运行其他代码，那就运行后面的代码，’”鲁本说。
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159991.png.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159991.png.jpg)'
- en: “And all of that’s followed by an `end`, like before,” said Scarlet.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: “而且这一切后面都会跟着一个 `end`，就像之前一样，”斯嘉丽说。
- en: “Do you need to add the two spaces before the lines following `if`, `elsif`,
    and `else`?” asked the King.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: “你需要在 `if`、`elsif` 和 `else` 后面的行前加两个空格吗？”国王问。
- en: “The *indentation*?” said Scarlet. “No, but it sure does look nice.”
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: “*缩进*？”斯嘉丽问。“不是的，但看起来确实挺不错。”
- en: '“That takes care of the first three instructions!” said Haldo. “And I think
    I’m getting the hang of this. Let’s see if I can rewrite the last two instructions
    in Ruby.” He added these lines to his *flowmatic_rules.rb* script:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: “这就处理了前面的三条指令！”哈尔多说，“我想我已经掌握了。看看我能不能用 Ruby 重写最后两条指令。”他在自己的 *flowmatic_rules.rb*
    脚本中添加了以下几行：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '“Okay, *this* I understand,” said the King. “The `>` means *greater than* and
    the `<` means *less than*, so that first bit at ➍ says: if the flow rate is above
    50, we show a ‘too high’ warning and then assign the variable `flow_rate` to 50\.
    The program then `puts` a new `flow_rate` value using string interpolation, like
    we saw before.”'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: “好吧，*这个*我明白了，”国王说。“`>`表示*大于*，`<`表示*小于*，所以➍处的第一部分表示：如果流量大于50，我们显示一个‘太高’的警告，然后将变量`flow_rate`赋值为50。程序接着使用字符串插值输出新的`flow_rate`值，就像我们之前看到的那样。”
- en: “But at ➎, the program checks if `flow_rate` is below 50\. If it is, we show
    a ‘too low’ warning and reset it to 50.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: “但是在➎处，程序检查`flow_rate`是否小于50。如果是的话，我们会显示一个‘太低’的警告，并将其重置为50。
- en: “At ➏, we have the `else`. If `flow_rate` isn’t greater than 50 or less than
    50, that means it’s *exactly* 50\. So, we just show the flow rate without changing
    the variable and `puts` it (thank goodness).” The King smiled, clearly pleased
    with himself.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: “在➏处，我们有`else`。如果`flow_rate`既不大于50也不小于50，那意味着它*恰好*是50。所以，我们只需显示流量值，而不更改变量，并用`puts`输出它（谢天谢地）。”国王微笑着，显然为自己感到高兴。
- en: “Perfect!” said Ruben. “You can also use `<=` for *less than or equal to* and
    `>=` for *greater than or equal to*, but we don’t need those quite yet, I don’t
    think.”
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: “完美！”Ruben说。“你还可以使用`<=`表示*小于或等于*，`>=`表示*大于或等于*，但我觉得我们现在还不需要这些。”
- en: Improving flow_rate.rb with Fancier Logical Operators
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用更复杂的逻辑运算符改进flow_rate.rb
- en: Ruben studied the screen for a moment. “You know,” he said, “I think you could
    replace the section from ➍ to ➏ with even less code. Check this out!”
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Ruben研究了屏幕片刻。“你知道，”他说，“我觉得你可以用更少的代码来替换从➍到➏的部分。看看这个！”
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: “What do those two vertical lines mean?” asked Haldo. “I haven’t seen those
    before.”
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: “那两个竖线是什么意思？”Haldo问。“我以前没见过这些。”
- en: “Just like `&&` means *and* and `!` means *not*, `||` means *or*,” said Scarlet.
    “So we’re saying, ‘If the flow rate is less than 50 *or* it’s greater than 50,
    show a warning and reset it to 50; otherwise, just let us know it’s 50 (thank
    goodness).’
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: “就像`&&`表示*与*，`!`表示*不是*，`||`表示*或*，”Scarlet说。“所以我们的意思是，‘如果流量小于50*或*大于50，显示警告并重置为50；否则，直接告诉我们它是50（谢天谢地）。’
- en: “That works pretty well,” she continued, “but we can make it even simpler.”
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: “效果相当不错，”她接着说，“不过我们可以做得更简洁。”
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: “I know that `!` means *not*,” said the King, “so is it fair to guess that `!=`
    means *is not equal to*?”
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: “我知道`!`表示*不是*，”国王说，“那么可以猜测`!=`表示*不等于*吗？”
- en: “It’s not only fair, it’s right!” said Ruben. “You can use `!=` to mean *is
    not equal to* and `==` to mean *is equal to*. But be *really* careful not to mix
    up `=` and `==`. The first one is used to assign values to variables, and the
    second is used to check if two things are equal.”
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: “不仅是合理的，还是正确的！”Ruben说。“你可以用`!=`表示*不等于*，用`==`表示*等于*。但要*非常*小心，不要混淆`=`和`==`。第一个是用来给变量赋值的，而第二个是用来检查两个事物是否相等的。”
- en: “This is amazing,” said Haldo. “I think I’m really getting the hang of Ruby
    control flow. Is there anything else I should know?”
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: “这太神奇了，”Haldo说。“我觉得我真的掌握了Ruby的控制流了。还有什么我应该知道的吗？”
- en: '“One more quick thing,” Scarlet said. “Because `if` followed by a negative
    condition appears all the time in programs, Ruby came up with another way to write
    it. Instead of always typing something like:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: “还有一件事，”Scarlet说。“因为程序中经常出现`if`后跟负条件的情况，Ruby想出了另一种写法。你不必每次都输入类似以下内容：
- en: '[PRE12]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'you can instead type `unless`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以改为输入`unless`：
- en: '[PRE13]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: “And those two examples are exactly the same,” finished Scarlet. “But if you
    have `elsif`s and `else`s, it’s sometimes nicer-looking to just use `if`s.”
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: “这两个例子完全一样，”Scarlet结束道。“但如果你有`elsif`和`else`，有时候直接使用`if`看起来会更美观。”
- en: While Scarlet was talking, Haldo saved their finished *flowmatic_rules.rb* file
    and typed **`load 'flowmatic_rules.rb'`** at the IRB prompt. When he pressed ENTER,
    the Mysterious Pipe shuddered once, then began to gently vibrate. Ruben and Scarlet
    could hear water flowing through the castle walls, and not a drop was spilled
    anywhere.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当Scarlet在说话时，Haldo保存了他们完成的*flowmatic_rules.rb*文件，并在IRB提示符下输入了**`load 'flowmatic_rules.rb'`**。当他按下ENTER键时，神秘的管道震动了一下，随后开始轻微地震动。Ruben和Scarlet听到了水流穿过城堡墙壁的声音，哪里也没有水溢出。
- en: “Huzzah!” said the King. “I can’t thank you all enough! But I do wonder,” he
    continued, “how did the flow rate get set to 100 in the first place?”
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: “好极了！”国王说。“我真是太感谢你们了！不过我还是有个疑问，”他接着说，“最初是怎么把流量设置为100的？”
- en: “That, I’m not sure about,” said Haldo. “There must be another Ruby program
    in the castle that has access to the `flow_rate` variable and changed it.” He
    rummaged through his red toolbox and pulled out a flashlight. “I’ll look into
    it right away,” he said.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: “这个我不太确定，”哈尔多说。“可能是城堡里有另一个Ruby程序，访问了`flow_rate`变量并改变了它。”他翻开了自己的红色工具箱，拿出了一个手电筒。“我马上调查一下，”他说。
- en: “Aren’t you going to take off your sunglasses?” asked Scarlet.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: “你不打算摘掉太阳镜吗？”斯卡利特问道。
- en: “No need,” said Haldo, and with that, he opened a small door on the same side
    of the room as the Mysterious Pipe and disappeared into the bowels of the castle,
    whistling as he went.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: “不需要，”哈尔多说，然后他打开了与神秘管道同一侧墙上的一扇小门，消失在城堡的深处，边走边吹着口哨。
- en: A Biggerish Project for You
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个更大的项目给你
- en: 'You’ve learned a lot in the last handful of pages, and now it’s time to put
    your newfound knowledge to the test! (Don’t worry: I have complete and utter faith
    in you.) Haldo—now the *Senior* Apprentice to the Royal Plumber, thanks to Ruben
    and Scarlet—needs your help. While he hasn’t tracked down the precise cause of
    the Mysterious Pipe’s overflow, he did briefly find himself in a small but tricky
    maze. He’s asked you to record his adventures in the maze, so let’s start by making
    a new file called maze.rb. (Peek back at [Chapter 1](../Text/ch01.html "Chapter 1. What
    This Book’s About") if you don’t remember how to do this, or ask your local adult
    for help.) Type the following into your file.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几页中，你已经学到了很多，现在是时候将你新学到的知识付诸实践了！(别担心，我对你充满信心。) 哈尔多——现在是由于鲁本和斯卡利特的帮助，晋升为皇家水管工的*高级*学徒——需要你的帮助。虽然他还没找到神秘管道溢出的具体原因，但他曾短暂地进入过一个小而复杂的迷宫。他请求你记录他在迷宫中的冒险经历，因此让我们从创建一个名为maze.rb的新文件开始。（如果你不记得怎么做，看看[第1章](../Text/ch01.html
    "第1章. 本书介绍")，或者向附近的成年人求助。）在你的文件中输入以下内容。
- en: maze.rb
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: maze.rb
- en: '[PRE14]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Run the program by typing **`ruby maze.rb`** in the terminal and pressing ENTER.
    You should see something like this (though your output will change depending on
    which direction you pick):'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在终端输入**`ruby maze.rb`**并按下回车键来运行程序。你应该看到像这样的输出（尽管你的输出会根据你选择的方向有所不同）：
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `print` command is new, but never fear: it’s almost exactly like `puts`,
    except it doesn’t add a new blank line after it prints out its text.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`print`命令是新的，但别担心：它几乎和`puts`一样，唯一的区别是它打印文本后不会自动添加一个新的空行。'
- en: 'This bit is also new:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分也是新的：
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: What we’re doing here is setting a variable, `direction`, equal to calling the
    `gets` method and then the `chomp` method right after it. This is a fancy way
    of saying we’re `chomp`ing `gets`. `gets` is a built-in method (you can think
    of it as a Ruby command) that *gets* the most recent input the user typed; `chomp`
    removes anything extra from the end, like spaces or a blank line. This means that
    we’ve now taken whatever the user typed (from `gets.chomp`) and stored it in our
    `direction` variable.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在做的是设置一个变量`direction`，它等于调用`gets`方法后再调用`chomp`方法。这是一种说法，意味着我们正在“吃掉”`gets`的输入。`gets`是一个内建方法（你可以把它当作一个Ruby命令），它*获取*用户刚刚输入的内容；`chomp`则去除输入内容末尾的多余部分，比如空格或空行。这意味着我们现在已经把用户输入的内容（来自`gets.chomp`）存储在了`direction`变量中。
- en: After that, it’s all smooth sailing! You’ve seen string interpolation with `#{}`
    already, and everything after that is just checking to see what letter the user
    entered with `==` (is equal to) and using `if`, `elsif`, and `else` to control
    what message the user sees.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 之后的一切就很顺利了！你已经看过`#{}`的字符串插值，现在的所有内容只是检查用户输入的字母是否与`==`（相等）比较，并使用`if`、`elsif`和`else`来控制用户看到的消息。
- en: You can test out your maze program by typing **`ruby maze.rb`** from the command
    line or, after starting up IRB, **`load 'maze.rb'`**. You can keep rerunning it
    with different input to see what happens each time!
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过从命令行输入**`ruby maze.rb`**来测试你的迷宫程序，或者在启动IRB后输入**`load 'maze.rb'`**。你可以不断重新运行它，并尝试不同的输入，看看每次会发生什么！
- en: 'You can go a bit further, though. (Don’t worry, it’s seriously a really small
    maze.) Here are a few ideas:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以走得更远一点。（别担心，这真的是一个非常小的迷宫。）这里有一些想法：
- en: How might you add more directions, like NW, SW, NE, SE, up, or down?
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你如何添加更多的方向，比如NW、SW、NE、SE、上或下？
- en: How could you handle accepting lowercase letters for directions?
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你如何处理接受小写字母作为方向的输入？
- en: A circle has 360 degrees, and turning right is the same as turning 90 degrees.
    What if you wanted to let your users enter a number so they could turn that many
    degrees? How could you use `<`, `<=`, `>`, `>=`, `==`, or `!=` to make this work?
    (This is a bit beyond where we already went, but you can do it! You wouldn’t be
    wandering around in a maze under a castle if you weren’t the adventurous type.)
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 圆形有360度，向右转等于转90度。如果你想让用户输入一个数字，让他们转动相应的度数怎么办？你可以如何使用`<`、`<=`、`>`、`>=`、`==`或`!=`来实现这个功能？（这有点超出了我们之前讨论的内容，但你可以做到！如果你不是冒险类型的人，你也不会在城堡下面的迷宫里徘徊。）
- en: You Know This!
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你知道这个！
- en: Control flow is tricky stuff, but doing that biggerish project proves you’ve
    gotten the hang of it. Let’s review some of the things we learned along the way.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 控制流是个复杂的东西，但做完那个较大的项目证明你已经掌握了它。让我们回顾一下在过程中学到的一些东西。
- en: We talked about *Booleans*, which can be `true` or `false`. They’re part of
    Ruby just like strings, numbers, and variables are, but they’re definitely not
    strings! Don’t put quotes around them, or they won’t work right.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了*布尔值*，它可以是`true`或`false`。它们和字符串、数字、变量一样是Ruby的一部分，但它们绝对不是字符串！不要给它们加上引号，否则它们就不能正常工作。
- en: 'We covered *scripts* and how you can run them in IRB using `load ''`*`script_name`*`.rb''`.
    (You can also run your Ruby programs outside of IRB entirely by typing `ruby`
    *`script_name`*`.rb` on the command line.) Remember: you need quotes if you’re
    loading a file in IRB, but you don’t need quotes if you’re typing on the command
    line! (Computers are very dumb and very picky.)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了*脚本*，以及如何在IRB中使用`load '`*`script_name`*`.rb'`运行它们。（你也可以完全不在IRB中运行Ruby程序，只需在命令行输入`ruby`
    *`script_name`*`.rb`。）记住：如果你在IRB中加载文件，需要加引号，但如果你在命令行输入，就不需要引号！（计算机很笨，且非常挑剔。）
- en: 'We explained *string interpolation* using `#{}` and how you can use it to put
    the values of variables directly into your strings. This comes in handy a lot,
    and remember: you can only do string interpolation with double-quoted (`"`) strings.
    It doesn’t work with single quotes (`''`)!'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们解释了*字符串插值*，使用`#{}`，以及如何将变量的值直接插入到字符串中。这在很多情况下都很有用，记住：你只能在双引号（`"`）字符串中使用字符串插值，它在单引号（`'`）字符串中不起作用！
- en: Finally, we learned about control flow using `if`, `elsif`, `else`, and `unless`,
    and how to combine these with logical operators `&&` (and), `!` (not), and `||`
    (or), and comparison operators `<` (less than), `>` (greater than), `<=` (less
    than or equal to), `>=` (greater than or equal to), `==` (is equal to), and `!=`
    (is not equal to). Using all these together, we can see (for example) *if* one
    thing *and* another thing are `true`, determine *if* one thing is *less than*
    another thing, or say we should do something *unless* something *is not equal
    to* something else. (Whew!)
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们学习了如何使用`if`、`elsif`、`else`和`unless`进行控制流，并了解如何将这些与逻辑运算符`&&`（和）、`!`（非）和`||`（或），以及比较运算符`<`（小于）、`>`（大于）、`<=`（小于或等于）、`>=`（大于或等于）、`==`（等于）和`!=`（不等于）结合使用。将这些一起使用，我们可以看到（例如）*如果*某件事*和*另一件事是`true`，判断*如果*某件事*小于*另一件事，或者说我们应该做某件事*除非*某事*不等于*其他事。（哇！）
- en: 'It’s hard to believe, but this is pretty much everything computer programs
    do: compare values and test to see what is or isn’t true. Let’s take a minute
    to kick back, relax, and bask in the glow of all this Ruby know-how. (The next
    chapter’s gonna throw you for a bit of a loop.)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 难以置信，但这几乎就是计算机程序所做的一切：比较值并测试什么是真的，什么是不是真的。让我们花点时间放松一下，享受一下所有Ruby知识的光辉吧。（下一章会让你有点迷惑。）
