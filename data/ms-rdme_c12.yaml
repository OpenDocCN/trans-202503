- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Agile Planning
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷规划
- en: Software development should be planned and tracked. Your teammates want to know
    what you’re working on so they can collaborate with you effectively. Teams need
    to track progress so they can plan future work and course-correct as new information
    is discovered during development. Without a deliberate process, projects drag
    on, outside demands steal focus, and operational issues distract developers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发应该进行规划和跟踪。你的队友希望了解你正在做什么，这样他们才能与你有效合作。团队需要跟踪进展，这样他们才能规划未来的工作，并在开发过程中根据新信息进行调整。没有一个有意识的流程，项目会拖延，外部需求会分散注意力，运营问题也会干扰开发人员。
- en: '*Agile development*, a software development methodology, is widely adopted
    to deliver quality software quickly. Understanding the core philosophy and the
    goals of common Agile processes such as sprint planning, daily stand-ups, reviews,
    and retrospectives will help you use them effectively. This chapter introduces
    you to Agile planning basics and key practices of Scrum (a commonly adopted Agile
    framework), so you can hit the ground running.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*敏捷开发*，一种广泛采用的软件开发方法论，旨在快速交付优质软件。理解核心理念以及常见敏捷流程的目标，如冲刺规划、每日站会、评审和回顾，将帮助你有效地使用这些方法。本章将向你介绍敏捷规划的基础知识和Scrum（一个常用的敏捷框架）的关键实践，帮助你迅速上手。'
- en: The Agile Manifesto
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 《敏捷宣言》
- en: 'To make sense of Agile development practices, you must first understand the
    Agile philosophy. Agile was born in 2001 from collaboration between leaders in
    previous development processes such as Extreme Programming, Scrum, Feature-Driven
    Development, and Pragmatic Programming. The creators of the Agile process wrote
    the *Agile Manifesto* ([https://agilemanifesto.org/](https://agilemanifesto.org/))
    to describe the core tenets that undergird the process:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解敏捷开发实践，你必须首先了解敏捷的哲学。敏捷诞生于2001年，源自极限编程、Scrum、特性驱动开发和务实编程等前期开发过程中的领导者之间的合作。敏捷流程的创始人写下了*敏捷宣言*（[https://agilemanifesto.org/](https://agilemanifesto.org/)），以描述支撑该流程的核心理念：
- en: 'We are uncovering better ways of developing software by doing it and helping
    others do it. Through this work we have come to value:'
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们通过实践开发软件并帮助他人开发，发现了更好的开发软件的方法。通过这项工作，我们已经开始重视：
- en: ''
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Individuals and interactions** over processes and tools'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**个人和互动**高于流程和工具'
- en: ''
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Working software** over comprehensive documentation'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**工作软件**高于全面文档'
- en: ''
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Customer collaboration** over contract negotiation'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**客户协作**高于合同谈判'
- en: ''
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Responding to change** over following a plan'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**响应变化**高于遵循计划'
- en: ''
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: That is, while there is value in the items on the right, we value the items
    on the left more.
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 也就是说，虽然右侧的项目有价值，但我们更重视左侧的项目。
- en: The manifesto sounds a little quirky, but it gets at some important points.
    Agile practices focus on collaboration with teammates and customers; recognizing,
    accepting, and incorporating change; and focusing on iterative improvement over
    big-bang development releases. Agile is usually contrasted with *Waterfall*, an
    out-of-fashion practice where projects get exhaustively planned at their inception.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 宣言听起来有点怪异，但它表达了一些重要观点。敏捷实践强调与队友和客户的协作；识别、接受并融入变化；以及注重迭代改进而非大爆炸式的开发发布。敏捷通常与*瀑布模型*相对，后者是一种过时的实践，项目在开始时就进行详尽的规划。
- en: 'Ironically, once Agile became popular, black-belt ninjas, certifications, and
    process consultants overran some organizations. People got obsessed with the “right”
    way to “do Agile,” often to the detriment of the very first principle: “individuals
    and interactions over processes and tools.”'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 具有讽刺意味的是，一旦敏捷变得流行，黑带忍者、认证和流程顾问就涌入了一些组织。人们开始迷恋“做敏捷”的“正确”方式，往往忽视了第一条原则：“个人和互动高于流程和工具”。
- en: Agile Planning Frameworks
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 敏捷规划框架
- en: Scrum and Kanban are the two most common Agile planning frameworks. *Scrum*,
    the most popular, encourages short iterations with frequent checkpoints to adjust
    plans. Development work is broken into *sprints*. Sprint length varies, with two
    weeks being most common. At the beginning of a sprint, each team has a *sprint
    planning* meeting to divvy up work, which is captured in *user stories* or *tasks*.
    After planning, developers start on their work. Progress is tracked in a *ticketing*
    or *issue* system. A brief *stand-up* meeting takes place every day to share updates
    and call out problems. After each sprint, teams perform a *retrospective* to review
    finished work, discuss new findings, look at key metrics, and fine-tune the process.
    *Retrospectives (retros)* inform the next sprint’s planning session, creating
    a feedback cycle from plan to development to retrospective and back to plan.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum和看板是最常见的敏捷规划框架。*Scrum*是最流行的框架，鼓励通过短期迭代和频繁的检查点来调整计划。开发工作被拆分为*冲刺*。冲刺的长度各异，通常为两周。在冲刺开始时，每个团队都会召开*冲刺规划*会议来分配工作，这些工作通常以*用户故事*或*任务*的形式记录。规划结束后，开发人员开始工作。进度会通过*票务*或*问题*系统来跟踪。每天会举行一次简短的*站立会议*，分享更新并提出问题。在每次冲刺结束后，团队会进行*回顾*，回顾完成的工作，讨论新发现，查看关键指标，并微调流程。*回顾（retro）*为下一个冲刺的规划会议提供反馈，形成从计划到开发，再到回顾的反馈循环，然后回到计划。
- en: '*Kanban* does not use fixed-length sprints like Scrum. Instead, Kanban defines
    workflow stages through which all work items transition (for example, backlog,
    planning, implementation, testing, deployment, rollout). Teams often customize
    Kanban stages to fit their needs. Kanban limits *work in progress (WIP)* by limiting
    the number of tasks in each stage. By limiting ticket count, teams are forced
    to finish existing tasks before taking on new work. Kanban boards are dashboards
    with vertical columns for each workflow stage. Tasks, represented by titled boxes,
    are moved between columns as status changes. Kanban boards visualize in-flight
    work and identify problems like piled-up work in a certain stage. If the board
    shows that a lot of work is stuck in the testing stage, for example, the team
    might make an adjustment by shifting some of the development work to a backlog,
    freeing up engineers to help with testing. Kanban works best for teams like support
    engineers and SREs that handle a large number of incoming requests rather than
    longer-term projects.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*看板*不像Scrum那样使用固定长度的冲刺。相反，看板定义了工作项过渡的工作流阶段（例如，待办、规划、实施、测试、部署、发布）。团队通常会根据需求定制看板阶段。看板通过限制每个阶段中的任务数量来限制*进行中的工作（WIP）*。通过限制任务数量，团队被迫在接收新工作之前完成现有任务。看板板是每个工作流阶段的垂直列的仪表板。任务以带标题的框表示，随着状态的变化，任务在列之间移动。看板板可视化了进行中的工作，并能识别出例如某个阶段任务积压等问题。如果看板显示大量工作被卡在测试阶段，团队可能会通过将一些开发任务转移到待办事项中，来调整工作流程，从而释放工程师帮助测试。看板最适合像支持工程师和SRE这类处理大量请求而不是长期项目的团队。'
- en: Teams rarely implement the “platonic ideal” of Scrum or Kanban; they pick and
    choose some practices and alter or ignore others. Whether your organization practices
    Scrum, Kanban, a mashup of the two called *Scrumban* (that’s a real thing!), or
    some other variant of Agile, the planning process should be in service of delivering
    useful software to happy customers. Stay focused on the goals rather than the
    mechanics. Experiment and measure the results; keep what works and drop the rest.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 团队很少实施“理想化”的Scrum或看板；他们通常会挑选一些做法，调整或忽略其他做法。无论你的组织实践的是Scrum、看板、两者的混合体*Scrum看板*（这是真的！）还是其他任何敏捷变种，规划过程的目标应该是交付有用的软件并让客户满意。始终专注于目标，而不是机制。进行实验并衡量结果；保留有效的部分，丢弃其余的。
- en: Scrum
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Scrum
- en: Most software teams practice some form of Scrum, so you’ll need to understand
    how it works. All planning usually begins with prework. Developers and product
    managers create new *user stories*, and tickets from the *backlog* are *triaged*.
    Stories are assigned *story points* to estimate their complexity and are broken
    into *tasks*. Larger stories are designed and researched with *spike* stories.
    During *sprint planning*, the team chooses which stories to complete during the
    next sprint, using story points to prevent overcommitting.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数软件团队都会实践某种形式的Scrum，因此你需要了解它是如何运作的。所有规划通常从预工作开始。开发人员和产品经理会创建新的*用户故事*，并且*待办事项*中的任务会被*筛选*。故事会被分配*故事点*来估算其复杂性，并拆分成*任务*。较大的故事会通过*冲刺故事*来进行设计和研究。在*冲刺规划*中，团队会选择在下一个冲刺中完成的故事，并使用故事点来避免过度承诺。
- en: User Stories
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户故事
- en: 'A user story is a specific kind of ticket that defines a feature request from
    a user’s perspective, in the format “As a <user>, I <want to> <so that>.” Here’s
    an example: “As an administrator, I want to grant viewer permissions to my accountants
    so that they can see incoming billing statements.” Writing user-centric descriptions
    keeps the focus on delivering user value.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 用户故事是一种特定类型的票据，定义了从用户角度的功能请求，格式为“作为<用户>，我<想要> <这样>。”举个例子：“作为管理员，我希望授予我的会计人员查看权限，这样他们就可以查看账单声明。”以用户为中心的描述有助于将焦点放在交付用户价值上。
- en: A common misuse of user stories is to jam a regular task description into a
    story, as in “As a developer, I need to upgrade the shader plugin to version 8.7”
    or “As a user, I want the privacy policy to show up in the footer.” A story like
    this misses the whole point. Why does the shader plugin need to be updated, what
    is the value this brings, and who wants it? Does a “user” want the policy, or
    does the compliance officer? If you are going to bother writing stories as opposed
    to tasks, write good ones.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 用户故事的一个常见误用是将常规任务描述硬塞进故事里，比如“作为开发人员，我需要将着色器插件升级到版本8.7”或“作为用户，我希望隐私政策出现在页脚。”像这样的故事失去了核心意义。为什么需要更新着色器插件？这带来了什么价值？是谁需要它？是“用户”想要这个政策，还是合规官员？如果你要写故事而不是任务，写得好一点。
- en: Stories usually have attributes beside their title and description. The two
    most common are *estimates* and *acceptance criteria*. User story estimates are
    a guess at the effort a story takes to implement. Acceptance criteria define when
    a story is complete. Acceptance criteria keep developers, product managers, QA,
    and users on the same page. Try to write explicit tests for each acceptance criteria.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 故事通常除了标题和描述外，还有其他属性。最常见的两个是*估算*和*验收标准*。用户故事的估算是对实现该故事所需工作量的预测。验收标准定义了故事何时完成。验收标准确保开发人员、产品经理、QA和用户在同一页面上。尽量为每个验收标准写明确定的测试。
- en: The administrator permission page lists the “billing statements” option.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员权限页面列出了“账单声明”选项。
- en: Nonadministrator-granted “billing statements” viewer permission can see all
    of the account’s billing statements.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获得非管理员授予的“账单声明”查看权限的用户可以查看该账户的所有账单声明。
- en: The Edit button is hidden on the billing statement page for nonadministrator
    accounts.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于非管理员账户，账单声明页面上的编辑按钮是隐藏的。
- en: Nonadministrators with viewer permission are unable to edit billing statements.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有查看权限的非管理员用户无法编辑账单声明。
- en: Nonadministrators with editor and viewer billing statement permissions are able
    to both see and edit billing statements.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有编辑和查看账单声明权限的非管理员用户可以查看和编辑账单声明。
- en: Small stories often double as work tickets, while larger stories are linked
    to implementation tickets or subtasks. Stories that are ambiguous or need design
    are spiked. A spike is a time-bounded investigation that enables other stories
    to be completed. Spikes deliver a design doc, a build-versus-buy decision, an
    assessment of trade-offs, and so on. See Chapter 10 for more on design.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 小型故事通常同时作为工作票，而较大的故事与实施票或子任务相关联。模糊或需要设计的故事会被标记为**spike**。Spike是一个有时间限制的调查，它帮助完成其他故事。Spike的交付物通常包括设计文档、买与建的决策、权衡评估等。关于设计的更多内容请参见第10章。
- en: Tasks
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: A single story may need to be broken down into smaller tasks to estimate how
    long it will take, to share the work between multiple developers, and to track
    implementation progress. A good trick for breaking down work is to write very
    detailed descriptions. Read over the description and find all of the tasks.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 单个故事可能需要拆解成更小的任务，以便估算所需时间、分配多个开发人员的工作并跟踪实施进度。拆解工作的一个好方法是写出非常详细的描述。仔细阅读描述，找出所有任务。
- en: We need to add a `retry` parameter to `postProfile`. Right now, profiles don’t
    update if a network timeout occurs. We’ll probably want to cap the retries and
    add exponential backoff so we don’t block for too long; need to talk with product
    to find out how long they’re willing to wait for a profile post to complete.
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们需要在`postProfile`中添加一个`retry`参数。目前，如果发生网络超时，配置文件不会更新。我们可能需要限制重试次数，并加入指数回退，以避免长时间阻塞；需要与产品部门沟通，了解他们愿意等待配置文件发布完成的最长时间。
- en: ''
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Once implemented, we should do both unit and integration tests. We should simulate
    real network timeouts in the integration tests to verify backoff is working correctly.
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一旦实现，我们应该进行单元测试和集成测试。在集成测试中，我们应该模拟真实的网络超时，以验证回退机制是否正常工作。
- en: ''
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: After testing, we need to deploy to our testing environment, then production.
    In production, we should probably split the traffic and ramp the retry behavior
    slowly, since `postProfile` is pretty sensitive.
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在测试后，我们需要部署到我们的测试环境，然后再部署到生产环境。在生产环境中，应该考虑分流流量，并且逐步增加重试行为，因为`postProfile`非常敏感。
- en: 'Something as simple as adding a `retry` parameter to a network post actually
    has many steps: solidifying the specification with product managers, coding, unit
    testing, integration testing, deploying, and ramping. Breaking this work into
    subtasks helps track and coordinate all the steps.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是像为网络请求添加`retry`参数这样简单的事情，实际上也包含了许多步骤：与产品经理确认规格、编码、单元测试、集成测试、部署和逐步增加流量。将这些工作拆解成子任务有助于追踪和协调所有步骤。
- en: Story Points
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 故事点
- en: The team’s work capacity is measured in *story points*, an agreed-upon sizing
    unit (measured in hours, days, or “complexity”). A sprint’s capacity is the number
    of developers multiplied by the story points per developer; for example, a team
    with 4 engineers and 10 points per engineer would have a 40-point capacity. User-story
    time estimates are also defined in story points; the sum of all story points in
    a sprint should not be greater than a sprint’s capacity.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 团队的工作能力通过*故事点*来衡量，这是一个已达成一致的大小单位（以小时、天数或“复杂度”计量）。一个迭代的能力是开发人员人数乘以每位开发人员的故事点数；例如，一个有4个工程师且每位工程师有10个点的团队，其能力为40个点。用户故事的时间估算也用故事点来定义；一个迭代中的所有故事点之和不应超过迭代的总能力。
- en: Many teams use time-based allocations where a single point amounts to one workday.
    Day-based estimates usually account for nontask work—meetings, interruptions,
    code reviews, and so on—by defining a workday as four hours long.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 许多团队使用基于时间的分配，其中一个点等于一个工作日。基于天数的估算通常会考虑非任务性工作——例如会议、干扰、代码评审等等——通过将工作日定义为四小时长来进行。
- en: 'Others define story points by task complexity, using a T-shirt size approach:
    one point is extra small, two points is small, three points is medium, five points
    is large, and eight points is extra large. Recognize the pattern? It’s the Fibonacci
    sequence! Incrementing story points according to the Fibonacci sequence helps
    remove some of the quibbling about 3 versus 3.5 points. Having some gaps between
    point values also forces teams to make harder decisions about whether an item
    is big or small, not mediumish. The increase in the size of gaps for more complex
    tasks accounts for estimation inaccuracy in larger work.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 其他团队通过任务复杂度来定义故事点，采用T恤尺码的方法：一个点代表超小，两个点代表小，三个点代表中等，五个点代表大，八个点代表超大。认出这个模式了吗？它是斐波那契数列！按照斐波那契数列递增故事点有助于消除对于3点和3.5点之间的争论。点值之间有一些间隔，也迫使团队在判断任务是大还是小时做出更艰难的决定，而不是“中等”大小。对于更复杂任务，点数之间差距的增大则考虑到了更大工作量下的估算不准确性。
- en: Agile framework doctrine frowns upon time-based estimations. Practitioners claim
    that dates have emotional attachment and don’t represent complexity. Nontime units
    can make it easier to express uncertainty. Changing a single method might seem
    like a small amount of work, but if that method is incredibly complex, it might
    require a lot of effort. It’s mentally easier to say “This is a medium-complexity
    task” than “This will take me three full days of work.”
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷框架的教义对基于时间的估算持反对态度。实践者认为日期具有情感附加值，且并不代表复杂性。使用非时间单位可以更容易地表达不确定性。改变单一方法可能看似工作量不大，但如果该方法极为复杂，可能需要投入大量精力。与其说“这是一个中等复杂度的任务”，不如说“这需要我三整天的工作”来
    mentally 更容易表达。
- en: People get very passionate about using time versus complexity for points, as
    well as their overall usefulness. We haven’t found arguments on this topic to
    be very productive and recommend adopting whatever is most effective for your
    team.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 人们对使用时间与复杂性来估算任务非常热衷，并且对它们的整体效用有很大的争议。我们发现关于这个话题的争论并没有什么建设性，建议采纳最适合你团队的方法。
- en: Estimating story points is subjective; people tend to be poor estimators. One
    way to improve estimation accuracy is to use *relative sizing* to derive the values.
    Relative sizing is done by defining story points for tasks that have already been
    finished and then comparing the finished task to one that hasn’t yet been worked
    on. If the unfinished task is less work, then it’s probably fewer points; more
    work is probably more points; and if the tasks are similar, then they should be
    assigned the same value. Processes like *planning poker* are sometimes used, but
    even if you don’t take part in them, looking at finished work will give you a
    feel for your team’s story point values.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 估算故事点是主观的；人们往往是差的估算者。提高估算准确度的一种方法是使用*相对大小*来推导数值。相对大小是通过为已经完成的任务定义故事点，然后将已完成的任务与尚未开始的任务进行比较来完成的。如果未完成的任务工作量较少，那么它可能对应较少的点数；更多的工作量可能对应更多的点数；如果任务相似，那么它们应该分配相同的数值。像*规划扑克*这样的过程有时会被使用，但即使你没有参与其中，查看已完成的工作也会让你对团队的故事点值有一定的感觉。
- en: Backlog Triage
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 待办事项整理
- en: '*Backlog triage* or *grooming* (in the tree-trimming sense) usually takes place
    before planning meetings. The backlog is a list of candidate stories. Triage is
    used to keep it fresh, relevant, and prioritized. Product managers read over the
    backlog with the engineering manager and sometimes with the developers. New stories
    are added, outdated stories are closed, incomplete stories are updated, and high-priority
    work is moved to the top of the backlog. A well-groomed backlog will drive planning
    meeting discussions.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*待办事项整理*或*梳理*（在修剪树木的意义上）通常在计划会议之前进行。待办事项列表是候选故事的清单。整理用于保持待办事项的更新、相关和优先排序。产品经理与工程经理一起审阅待办事项，有时还会与开发人员一起。新的故事被添加，过时的故事被关闭，未完成的故事被更新，高优先级的工作被移到待办事项的顶部。整理良好的待办事项列表将推动计划会议的讨论。'
- en: Sprint Planning
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 冲刺计划
- en: A sprint planning meeting is held once prework is done. Planning meetings are
    collaborative; engineering teams work with product managers to decide what to
    work on. Prioritized stories are discussed, and engineers work with product managers
    to determine what will fit into the sprint’s capacity.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 冲刺计划会议在前期准备工作完成后举行。计划会议是协作性的；工程团队与产品经理一起决定要做什么。优先级较高的故事会被讨论，工程师与产品经理共同确定哪些内容能够符合冲刺的容量。
- en: Sprint capacity is determined by looking at how much was completed in previous
    sprints. Each sprint capacity is further refined during sprint planning as team
    members join or leave, go on vacation, or enter or exit on-call rotations.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 冲刺容量通过查看前几个冲刺中完成的工作量来确定。每个冲刺容量会在冲刺计划时进一步调整，考虑到团队成员的加入或离开、休假、或是否参与待命轮班等因素。
- en: The most important feature of a sprint is that it’s short—usually two weeks.
    Short sprints make pushing out work doable since the work need only be pushed
    out at most a week or two. Small sprints force teams to break down large tasks
    into smaller ones. Small tasks are better because they’re easier to understand
    and estimate. Breaking work into small tasks also allows more than one developer
    to work on a project simultaneously. Smaller development cycles with frequent
    touch points—stand-ups and reviews—mean problems surface earlier.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 冲刺最重要的特点是它的短暂——通常是两周。短冲刺使得推动工作变得可行，因为工作最多只需推迟一到两周。小型冲刺迫使团队将大任务拆分成更小的任务。小任务更好，因为它们更容易理解和估算。将工作拆解成小任务还允许多个开发人员同时参与一个项目。更短的开发周期和频繁的接触点——站立会议和评审——意味着问题会更早浮现。
- en: Sprints are considered locked once sprint planning is done. New work that surfaces
    during the sprint should not be pulled in; it should be pushed to the backlog
    and planned for a future sprint. Locking sprints lets developers focus on their
    work and brings predictability. When unplanned work does get pulled in, the team
    is expected to look into the reasons during the retrospective, with an eye to
    reducing unplanned work in the future.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦冲刺计划完成，冲刺就被认为是锁定的。在冲刺过程中出现的新工作不应被引入；它应被推到待办事项列表，并为未来的冲刺进行规划。锁定冲刺让开发人员能够专注于自己的工作，并带来可预测性。当未计划的工作被引入时，团队应该在回顾会议中研究原因，旨在减少未来未计划的工作。
- en: Strict adherence to sprint planning practices is uncommon. Most teams pick and
    choose what they do; some do prework in the sprint planning meeting, and others
    have no product managers—developers define all work. Many teams don’t use user
    stories, opting instead for task or bug tickets with more open-ended formats.
    Expect variation from team to team.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 严格遵守冲刺规划流程并不常见。大多数团队会选择性地执行某些内容；有的团队会在冲刺规划会议中进行预工作，其他团队则没有产品经理——开发人员定义所有工作。许多团队不使用用户故事，而是选择任务或缺陷工单，这些工单格式更加开放。不同团队之间可能存在差异。
- en: Stand-ups
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 站立会议
- en: After sprint planning is complete, work begins, and the team holds *stand-up
    meetings*, also called *scrum meetings* or *huddles*. Stand-ups keep everyone
    apprised of your progress, keep you accountable and focused, and give the team
    an opportunity to react to anything that puts sprint goals in danger.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在冲刺规划完成后，工作开始，团队会举行*站立会议*，也叫做*scrum会议*或*小组讨论*。站立会议可以让每个人了解进度，保持责任感和专注，并为团队提供一个机会，以应对可能危及冲刺目标的任何问题。
- en: Stand-ups are usually 15-minute meetings scheduled every morning (quick enough
    to stand through, though actual standing is optional). In the meeting format,
    teammates go around a circle and give an update on what they have worked on since
    the last stand-up, what they plan to work on going forward, and whether they’ve
    found any issues that can delay or derail the sprint. Though in-person stand-ups
    are the most common, some teams adopt an asynchronous format. In an asynchronous
    stand-up, the same update is submitted to a chatbot or group email on a daily
    cadence.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 站立会议通常是每天早上的15分钟会议（足够短，能站着开，虽然实际站立是可选的）。在会议中，团队成员会围绕一个圈子进行更新，分享自上次站立会议以来的工作内容、接下来打算做的工作，以及是否发现任何可能会延迟或破坏冲刺的事项。尽管面对面的站立会议最为常见，但有些团队采用异步形式。在异步站立会议中，团队成员会将相同的更新提交给聊天机器人或群邮件，按每日节奏进行。
- en: Stand-ups are a regular system check—the glance at your car’s dashboard to ensure
    that you have gas and that its mysterious “check engine” light is not on. Updates
    should be fast; they are not a place for troubleshooting. Try to limit your comments
    on progress to just the bare essentials and raise any issues that you have. Announce
    discoveries, too; bugs that you discovered, unexpected behavior you found, and
    so on. Discussion about your discoveries can then happen in the *parking lot*
    (not the literal parking lot, of course).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 站立会议是一个常规的系统检查——就像检查车的仪表盘，确保油箱有油，并且“检查引擎”灯没有亮起。更新应该快速进行；这里不是故障排除的地方。尽量将进度报告限制为必要的要点，并提出你遇到的任何问题。也要宣布你发现的新情况；比如你发现的bug、遇到的意外行为等等。关于你发现的问题可以在*停车场*（当然不是字面意义上的停车场）进行讨论。
- en: 'If your team holds synchronous stand-ups, do your best to be on time. If your
    stand-ups involve updating the status on tickets or issues, try your best to update
    tickets assigned to you beforehand. When reading or listening to others’ updates,
    you’re looking for opportunities to help de-risk sprint completion: if someone
    says that a ticket is taking longer than expected, volunteer to help if you have
    spare time.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的团队进行同步的站立会议，尽量准时参加。如果站立会议需要更新工单或问题的状态，尽量在会议前更新分配给你的工单。当你在阅读或听取他人的更新时，你应该寻找机会帮助减少冲刺完成的风险：如果有人说某个工单比预期花费了更多时间，若你有空闲时间，可以主动提供帮助。
- en: Parking lot discussions happen after the meeting. It’s a way to keep the stand-ups
    brief and make sure that the discussions are relevant to everyone attending. When
    someone says to “save it for the parking lot,” they’re saying to stop the discussion
    and pick it up after the stand-up with interested parties.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 停车场讨论发生在会议之后。这是一种让站立会议简短的方式，并确保讨论内容对所有与会者都相关。当有人说“留到停车场讨论”时，他们是让你停止当前讨论，等会议结束后与相关方继续。
- en: Skipping the meeting when scheduling conflicts arise is acceptable. Ask your
    manager how to provide and get updates if you need to miss a stand-up. Asynchronous
    stand-ups are skipped less often.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当遇到时间冲突时，跳过会议是可以接受的。如果你需要缺席站立会议，可以询问你的经理如何提供和获取更新。异步站立会议被跳过的情况较少。
- en: There are many variations of stand-ups and scrums. You might catch phrases like
    *scrum of scrums* or *Scrumban*. Scrum of scrums is a model where a leader from
    each individual scrum meeting is selected to go to a second scrum where all the
    teams get together to report on their team progress and call out interdependencies
    between each other. Scrum of scrums are common in operations, where each team
    sends an engineer (usually the on-call) to an operations scrum to keep apprised
    of operational issues. Scrumban is an amalgamation of Scrum and Kanban. The important
    thing with all of this is to understand how your team and organization work, and
    to work within that framework.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 站会和冲刺会有许多变种。你可能会听到诸如*scrum of scrums*或*Scrumban*的词语。scrum of scrums是一种模式，其中每个scrum会议的负责人被选中，前往第二次scrum会议，在那里所有团队汇集一起，报告他们的进展，并指出彼此之间的相互依赖。scrum
    of scrums在运维中很常见，在这种情况下，每个团队都会派一名工程师（通常是值班工程师）参加运维scrum会议，以便跟进运维问题。Scrumban是Scrum和Kanban的结合体。所有这些方法中最重要的是理解你的团队和组织的工作方式，并在这一框架内开展工作。
- en: Reviews
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评审
- en: 'A review happens between each sprint. Reviews are usually broken into two parts:
    demonstrations and project review. During demonstrations, everyone on the team
    shows the progress they’ve made in the sprint. Afterward, the current sprint is
    evaluated against its goal. Successful sprints will meet their goals and have
    a high story-completion rate.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 评审会发生在每次冲刺之间。评审通常分为两部分：演示和项目评审。在演示环节，团队中的每个人展示他们在本次冲刺中的进展。之后，当前冲刺会根据其目标进行评估。成功的冲刺将会达成目标，并具有较高的故事完成率。
- en: Review meeting structures vary widely. For some teams, demonstrations are the
    emphasis of the meeting, while other teams focus only on project status reviews.
    Many teams don’t even have reviews. If your team has review meetings, take them
    seriously; provide real feedback and take pride in the work you’ve done. The value
    you get from reviews matches the effort you put into them.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 评审会议的结构差异很大。对于一些团队来说，演示是会议的重点，而其他团队则仅关注项目状态评审。许多团队甚至没有评审会议。如果你的团队有评审会议，务必认真对待；提供真实的反馈，并为自己所做的工作感到自豪。你从评审中获得的价值，与投入的努力是成正比的。
- en: It’s standard to keep reviews to no more than one hour per sprint week—a two-week
    sprint would have a two-hour sprint review. Everyone gathers around desks or in
    a conference room for demonstrations. Teammates take turns showing what they’ve
    worked on. The meeting is kept informal. Afterward, sprint goals are reviewed
    and evaluated for completion.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 标准做法是每个冲刺周的评审时间不超过一小时——一个两周的冲刺将有一个两小时的评审会。大家围绕桌子或在会议室集合进行演示。队友们轮流展示他们所做的工作。会议保持非正式性。之后，冲刺目标会被回顾并评估完成情况。
- en: Don’t overprepare for sprint reviews. Spend a few minutes figuring out what
    you’re going to show, and make sure your ticket statuses are accurate. Demonstrations
    are informal, so avoid formal presentations or speeches.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 不要为冲刺评审做过度准备。花几分钟时间弄清楚你将展示什么，并确保你的任务状态准确无误。演示是非正式的，所以避免正式的演讲或演示。
- en: Reviews celebrate team wins, create unity, give feedback opportunities, and
    keep teams honest about progress. Not all developers in a team work on the same
    set of projects, so reviews help teammates keep up with what others are doing.
    Keeping teammates in sync gives everyone the opportunity to give feedback and
    to recognize great work; it creates cohesion. Project status reviews also help
    teams agree on what is truly “done” and how they are progressing toward their
    goals. Issues that are discovered can be discussed in sprint retrospectives.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 评审庆祝团队的成功，增强团队凝聚力，提供反馈机会，并让团队保持对进展的诚实。并不是团队中的每个开发者都在做同样的项目，因此评审帮助队友们了解彼此的工作进展。保持队友之间的同步，给每个人提供反馈的机会，并让大家认识到出色的工作；这有助于团队凝聚力。项目状态评审还帮助团队达成共识，确定什么是“完成”的，并评估他们向目标进展的情况。发现的问题可以在冲刺回顾中讨论。
- en: Retrospectives
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回顾
- en: One of the 12 principles in the Agile Manifesto says, “At regular intervals,
    the team reflects on how to become more effective, then tunes and adjusts its
    behavior accordingly.” Retrospective meetings address this principle.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 《敏捷宣言》中的12条原则之一写道：“定期，团队反思如何变得更有效，然后根据需要调整其行为。” 回顾会议正是针对这一原则的。
- en: 'In a retrospective, a team gets together to talk about what has and hasn’t
    gone well since the last retrospective. The meeting normally has three phases:
    sharing, prioritization, and problem solving.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在回顾会议中，团队聚集在一起讨论自上次回顾以来，哪些方面做得好，哪些做得不好。会议通常分为三个阶段：分享、优先级排序和问题解决。
- en: The leader (or *scrum master*) will kick off a retrospective by asking everyone
    to share what worked and what didn’t during the last sprint. Everyone participates,
    and the scrum master keeps a list on the whiteboard or in a shared document. Teammates
    then discuss the priority of the items that haven’t worked well—which are causing
    the most pain? Finally, the team brainstorms ways to address the highest priority
    problems.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 领导者（或*敏捷教练*）会通过让每个人分享在上一个冲刺中有效和无效的部分来启动回顾。每个人都参与其中，敏捷教练会在白板上或共享文档中记录下来。团队成员接着讨论那些没有做好、最令人痛苦的问题的优先级。最后，团队集思广益，找出解决最优先问题的方法。
- en: 'Don’t be afraid to change things. Agile development practices are meant to
    be malleable; it’s in the manifesto: “Individuals and interactions over process
    and tools.” Spend a few minutes before each retrospective to think about what
    would make your team better. Share your thoughts at the meeting.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 不要害怕改变。敏捷开发实践是灵活可变的；这一点在宣言中明确提到：“个人和互动高于过程和工具。”在每次回顾之前，花几分钟思考一下如何使你的团队变得更好。然后在会议上分享你的想法。
- en: Retrospectives and reviews often get confused. Reviews are focused on the work
    done in a sprint, while retrospectives focus on process and tooling. Retrospectives
    normally take place between sprints, often right after review meetings. Many teams
    combine a review, a retrospective, and a sprint planning meeting into a single
    meeting at the beginning of each sprint. A combined meeting is fine as long as
    each step—review, retro, and planning—is discretely addressed.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾与评审经常被混淆。评审专注于冲刺中完成的工作，而回顾则专注于过程和工具。回顾通常发生在冲刺之间，通常是在评审会议之后。许多团队将评审、回顾和冲刺规划会议合并成一个会议，在每个冲刺的开始进行。合并会议是可以的，只要每个环节——评审、回顾和规划——都得到单独的处理。
- en: Retrospectives are also one of the reasons Agile comes in so many flavors. Teams
    are encouraged to reevaluate and adjust their processes frequently. Constant adjustment
    means no two teams practice Agile quite the same way.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾也是敏捷有多种形式的原因之一。团队被鼓励频繁地重新评估和调整他们的流程。持续的调整意味着没有两个团队以完全相同的方式实践敏捷。
- en: Roadmaps
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路线图
- en: Two-week sprints are a good way to get small- and medium-sized work done, but
    larger projects need more advanced planning. Customers have delivery dates that
    developers need to stick to, the business needs to know which teams need more
    engineers, and large technical projects need to be broken down, planned, and coordinated.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 两周一次的冲刺是完成小型和中型工作的好方法，但较大的项目需要更先进的规划。客户有交付日期，开发人员需要遵守，业务部门需要了解哪些团队需要更多的工程师，而大型技术项目需要被分解、规划和协调。
- en: 'Managers use product roadmaps for long-term planning. Roadmaps are typically
    broken into quarters: January through March, April through June, July through
    September, and October through December.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 经理们使用产品路线图进行长期规划。路线图通常按季度划分：一月到三月、四月到六月、七月到九月以及十月到十二月。
- en: Planning takes place before each quarter begins. Engineering managers, product
    managers, engineers, and other stakeholders all convene to discuss upcoming goals
    and work. Planning usually involves a series of meetings and multiple rounds of
    discussion.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 规划在每个季度开始之前进行。工程经理、产品经理、工程师和其他相关人员都会聚集在一起讨论即将到来的目标和工作。规划通常涉及一系列会议和多轮讨论。
- en: According to *The Papers of Dwight David Eisenhower*, Volume XI, Eisenhower
    said, “In preparing for battle I have always found that plans are useless, but
    planning is indispensable” (Johns Hopkins University Press, 1984). This applies
    to roadmaps. We’ve never seen a yearly or even quarterly roadmap be 100 percent
    accurate; this isn’t the point. Roadmaps should encourage everyone to think long-term
    about what the team is building; they’re not meant to be static and reliable documents
    about what the team will build nine months later. Quarters that are farther away
    should be fuzzier, while quarters that are closer should be more accurate. Don’t
    fool yourself into thinking any quarter is 100 percent accurate.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 根据*德怀特·戴维·艾森豪威尔文集*第十一卷，艾森豪威尔曾说：“在准备作战时，我发现计划是没有用的，但规划是不可或缺的。”（约翰·霍普金斯大学出版社，1984年）。这同样适用于路线图。我们从未见过一个年度甚至季度的路线图能百分之百准确；这不是重点。路线图应该鼓励每个人从长远角度思考团队正在建设的内容；它们不是关于团队将在九个月后完成什么的静态和可靠的文档。离得较远的季度应更加模糊，而离得较近的季度应更准确。不要自欺欺人地认为任何一个季度都是百分之百准确的。
- en: Unlike sprints, which are locked, roadmaps are meant to evolve. Customer requirements
    will change, and new technical problems will arise. This is where sprint planning,
    reviews, and retrospectives help; they let you adjust your plan based on new information.
    Communication is critical when changing roadmaps. Dependent teams should be notified
    early that work is getting shuffled or dropped.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 与迭代周期不同，路线图是需要不断演进的。客户需求会发生变化，新的技术问题也会出现。这时，迭代规划、回顾和复盘就能发挥作用；它们可以帮助你根据新的信息调整计划。在调整路线图时，沟通至关重要。相关团队应尽早收到通知，了解工作是否被调整或取消。
- en: Many companies go through yearly planning cycles. Managers spend the last quarter
    of each year trying to plan the next four quarters of work for the upcoming year.
    Yearly planning is mostly theater—horse-trading and negotiating. Nonetheless,
    yearly planning cycles often drive “resource allocation” or “head count numbers”—corporate
    speak for where newly hired engineers end up. Annual planning usually focuses
    on large projects that account for a significant percentage of a team’s time.
    Don’t stress out if a project you are excited about isn’t mentioned; ask your
    manager where the project stands at the end of the planning process.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 许多公司会经历年度规划周期。经理们花费每年最后一个季度的时间，规划接下来四个季度的工作内容。年度规划大多是形式主义——讨价还价和谈判。然而，年度规划周期通常会推动“资源分配”或“员工人数”——公司用语指的是新招聘的工程师最终会分配到哪里。年度规划通常聚焦于那些占据团队时间相当大比例的大型项目。如果你关注的项目没有被提及，不必焦虑；可以在规划结束时询问经理该项目的进展情况。
- en: Do’s and Don’ts
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做与不做
- en: '| **Do’s** | **Don’ts** |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| **做** | **不做** |'
- en: '| --- | --- |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **DO** keep standup updates short. | **DON’T** obsess over the “right way”
    to do Agile. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| **做** 保持站会更新简短。 | **不做** 对“正确的敏捷方法”过于执着。 |'
- en: '| **DO** write detailed acceptance criteria for stories. | **DON’T** be afraid
    to change Agile processes. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| **做** 为故事编写详细的验收标准。 | **不做** 害怕改变敏捷流程。 |'
- en: '| **DO** only commit to work in a sprint that you can actually finish. | **DON’T**
    force regular task descriptions into “stories.” |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| **做** 只在迭代周期内承诺可以实际完成的工作。 | **不做** 强迫将常规任务描述塞进“故事”中。 |'
- en: '| **DO** break up large chunks of work if you can’t finish them in a sprint.
    | **DON’T** forget to track planning and design work. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| **做** 如果你不能在一个迭代周期内完成大块工作，请将其拆分。 | **不做** 忘记跟踪规划和设计工作。 |'
- en: '| **DO** use story points to estimate work. | **DON’T** add work after sprints
    begin if committed work is not yet done. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| **做** 使用故事点来估算工作量。 | **不做** 在迭代开始后，如果承诺的工作尚未完成，不要再添加新工作。 |'
- en: '| **DO** use relative sizing and T-shirt sizing to help with estimation. |
    **DON’T** follow processes blindly. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| **做** 使用相对大小和T恤尺码来帮助估算工作量。 | **不做** 盲目遵循流程。 |'
- en: Level Up
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 升级
- en: Most Agile books are going to be overkill for you. The books are extremely detailed
    and cover a lot of Agile variants; they’re targeted at project and program managers.
    Stick to online resources.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数敏捷书籍对于你来说可能过于复杂。它们内容极其详细，涉及了大量的敏捷变体；这些书籍主要面向项目经理和程序经理。最好还是参考在线资源。
- en: The Agile Manifesto, which we mention in this chapter, has an additional page
    called “Principles Behind the Agile Manifesto” ([http://agilemanifesto.org/principles.html](http://agilemanifesto.org/principles.html)).
    Take a look at the principles for more details on the philosophy.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中提到的敏捷宣言，另有一页名为“敏捷宣言背后的原则” ([http://agilemanifesto.org/principles.html](http://agilemanifesto.org/principles.html))。可以查看该页面了解更多关于敏捷理念的细节。
- en: Atlassian’s articles ([https://www.atlassian.com/agile/](https://www.atlassian.com/agile/))
    are a good source of practical information. You’ll find articles on everything
    from project management and roadmap planning to DevOps in Agile. If your team
    uses Kanban rather than Scrum, Atlassian’s Kanban article will be invaluable.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Atlassian的文章（[https://www.atlassian.com/agile/](https://www.atlassian.com/agile/)）是很好的实用信息来源。你可以找到关于项目管理、路线图规划、到敏捷中的DevOps等各类文章。如果你的团队使用的是看板而不是Scrum，Atlassian的看板文章将非常有价值。
