- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Liquid Crystal Displays
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 液晶显示器
- en: In this chapter you will
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将
- en: Use character LCD modules to display text and numeric data
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用字符LCD模块显示文本和数字数据
- en: Create custom characters to display on character LCD modules
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义字符以在字符LCD模块上显示
- en: Use color LCD modules to display text and data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用彩色LCD模块显示文本和数据
- en: Create a temperature history–graphing thermometer display
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建温度历史图表显示
- en: For some projects, you’ll want to display information to the user somewhere
    other than on a desktop computer monitor. One of the easiest and most versatile
    ways to display information is with a liquid crystal display (LCD) module and
    your Arduino. You can display text, custom characters, and numeric data using
    a character LCD module and color graphics with a graphic LCD module.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些项目，您可能希望将信息显示在除桌面计算机显示器以外的地方。显示信息的最简单且多用途的方式之一是使用液晶显示屏（LCD）模块和您的Arduino。您可以使用字符LCD模块显示文本、自定义字符和数字数据，使用图形LCD模块显示彩色图形。
- en: Character LCD Modules
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符LCD模块
- en: LCD modules that display characters such as text and numbers are the most inexpensive
    and simplest to use of all LCDs. They can be purchased in various sizes, which
    are measured by the number of rows and columns of characters they can display.
    Some include a backlight and allow you to choose the color of the characters and
    the background color. Any LCD with an HD44780- or KS0066-compatible interface
    and a 5 V backlight should work with your Arduino. The first LCD we’ll use is
    a 16-character–by–2-row LCD module with a backlight, as shown in [Figure 9-1](#figure9-1).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 显示字符（如文本和数字）的LCD模块是所有LCD中最便宜且最简单使用的。它们可以购买多种尺寸，尺寸按它们能显示的字符行数和列数来衡量。一些模块包括背光，并允许您选择字符的颜色和背景颜色。任何具有HD44780或KS0066兼容接口并带有5V背光的LCD都应能与您的Arduino配合使用。我们将使用的第一个LCD是一个16字符×2行的LCD模块，带有背光，如[图9-1](#figure9-1)所示。
- en: '![f09001](image_fi/500587c09/f09001.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![f09001](image_fi/500587c09/f09001.png)'
- en: 'Figure 9-1: Example LCD module with trimpot and header pins'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-1：带调节电位器和引脚的LCD模块示例
- en: The trimpot (the variable resistor for the LCD) has a value of 10 kΩ and is
    used to adjust the display contrast. If the header pins have not already been
    soldered into the row of holes along the top of the LCD, you’ll need to do this
    to make insertion into the breadboard straightforward.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 调节电位器（用于LCD的可变电阻）值为10 kΩ，用于调整显示对比度。如果LCD顶部的孔排未焊接上引脚，则需要先焊接，以便轻松插入面包板。
- en: The holes along the top of the LCD are numbered 1 through 16\. Number 1 is closest
    to the corner of the module and marked as VSS (connected to GND) in the schematic
    shown in [Figure 9-2](#figure9-2). We’ll refer to this schematic for all of the
    LCD examples in this book. In some rare situations, you could find yourself with
    an LCD that has a 4.2 V instead of a 5 V backlight. (If you are unsure of this,
    check with your supplier.) If this is the case, place a 1N4004 diode in series
    between the Arduino 5 V and the LCD LED+ pin.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: LCD顶部的孔排编号从1到16。第1号孔靠近模块的角落，在[图9-2](#figure9-2)中标记为VSS（连接到GND）。我们将参考此原理图进行本书中的所有LCD示例。在一些罕见情况下，您可能会遇到具有4.2
    V背光的LCD，而不是5 V背光。（如果不确定，请与您的供应商确认。）如果是这种情况，将1N4004二极管串联在Arduino的5V与LCD的LED+引脚之间。
- en: '![f09002](image_fi/500587c09/f09002.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![f09002](image_fi/500587c09/f09002.png)'
- en: 'Figure 9-2: Basic LCD schematic'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-2：基本LCD原理图
- en: Using a Character LCD in a Sketch
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在草图中使用字符LCD
- en: To use the character LCD shown in [Figure 9-1](#figure9-1), we will first explore
    the required functions and how they work through some simple demonstrations. Before
    moving on, you’ll need to install the required Arduino library from the Library
    Manager. Using the method described in Chapter 7, search for and install the “LiquidCrystal
    by Arduino, Adafruit” library. Then you can enter and upload the basic sketch
    shown in [Listing 9-1](#listing9-1).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用[图9-1](#figure9-1)中显示的字符LCD，我们将首先通过一些简单的演示来探索所需的函数及其工作原理。在继续之前，您需要通过库管理器安装所需的Arduino库。按照第7章中描述的方法，搜索并安装“LiquidCrystal
    by Arduino, Adafruit”库。然后，您可以输入并上传[清单9-1](#listing9-1)中显示的基本草图。
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 9-1: LCD demonstration sketch'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 清单9-1：LCD演示草图
- en: '[Figure 9-3](#figure9-3) shows the result of [Listing 9-1](#listing9-1).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[图9-3](#figure9-3)显示了[清单9-1](#listing9-1)的结果。'
- en: '![f09003](image_fi/500587c09/f09003.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![f09003](image_fi/500587c09/f09003.png)'
- en: 'Figure 9-3: LCD demonstration: “Hello world!”'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-3：LCD演示：“Hello world！”
- en: 'Now to see how the sketch in [Listing 9-1](#listing9-1) works. First, we need
    to add a line whose purpose is to include the library for LCD modules (which is
    automatically installed with the Arduino IDE). Then we need to tell the library
    which pins are connected to the Arduino. To do this, we add the following lines
    *before* the `void setup()` method:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，看看[代码清单9-1](#listing9-1)中的草图是如何工作的。首先，我们需要添加一行代码，目的是引入LCD模块的库（该库会随着Arduino
    IDE自动安装）。然后，我们需要告诉库哪些引脚连接到Arduino。为此，我们在`void setup()`方法之前添加以下代码：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The numbers entered in the LiquidCrystal function match the pins labeled on
    the LCD. If you’re unsure about your LCD’s pinouts, contact the supplier.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 输入到LiquidCrystal函数中的数字与LCD上标记的引脚相对应。如果你不确定LCD的引脚排列，请联系供应商。
- en: If you need to use different digital pins on the Arduino, adjust the pin numbers
    in the second line of this code.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要使用Arduino上的不同数字引脚，可以在这段代码的第二行调整引脚编号。
- en: 'Next, in `void setup()`, we tell the Arduino the size of the LCD in columns
    and rows. For example, here’s how we’d tell the Arduino that the LCD has 2 rows
    of 16 characters each:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`void setup()`中，我们告诉Arduino LCD的列数和行数。例如，下面是如何告诉Arduino LCD有2行，每行16个字符：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Displaying Text
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示文本
- en: 'With the LCD setup complete, clear the LCD’s display with the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 完成LCD设置后，使用以下代码清除LCD的显示：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, to position the cursor, which is the starting point for the text, use
    this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了定位光标，也就是文本的起始点，可以使用以下代码：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, `x` is the column (0 to 15) and `y` is the row (0 or 1). Next, to display
    the word *text*, for example, you would enter the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`x`是列（0到15），`y`是行（0或1）。接下来，若要显示单词*text*，例如，可以输入以下代码：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now that you can position and locate text, let’s move on to displaying variable
    data.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经可以定位和显示文本，接下来让我们看看如何显示变量数据。
- en: Displaying Variables or Numbers
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示变量或数字
- en: 'To display the contents of variables on the LCD screen, use this line:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要在LCD屏幕上显示变量的内容，请使用以下代码：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you’re displaying a `float` variable, you can specify the number of decimal
    places to use. For example, here `lcd.print(pi, 3)` tells the Arduino to display
    the value of pi to three decimal places, as shown in [Figure 9-4](#figure9-4):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要显示一个`float`变量，你可以指定使用的小数位数。例如，`lcd.print(pi, 3)`会告诉Arduino显示π的值，保留三位小数，如[图9-4](#figure9-4)所示：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![f09004](image_fi/500587c09/f09004.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![f09004](image_fi/500587c09/f09004.png)'
- en: 'Figure 9-4: LCD displaying a floating-point number'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-4：LCD显示浮点数
- en: When you want to display an integer on the LCD screen, you can display it in
    hexadecimal or binary, as shown in [Listing 9-2](#listing9-2).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当你要在LCD屏幕上显示一个整数时，可以选择以十六进制或二进制形式显示，如[代码清单9-2](#listing9-2)所示。
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Listing 9-2: Functions for displaying binary and hexadecimal numbers'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 代码清单9-2：显示二进制和十六进制数字的函数
- en: The LCD will then display the text shown in [Figure 9-5](#figure9-5).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: LCD将显示[图9-5](#figure9-5)中的文本。
- en: '![f09005](image_fi/500587c09/f09005.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![f09005](image_fi/500587c09/f09005.png)'
- en: 'Figure 9-5: Results of the code in [Listing 9-2](#listing9-2)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-5：[代码清单9-2](#listing9-2)中的代码结果
- en: 'Project #28: Defining Custom Characters'
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目#28：定义自定义字符
- en: In addition to using the standard letters, numbers, and symbols available on
    your keyboard, you can define up to eight of your own characters in each sketch.
    Notice in the LCD module that each character is made up of eight rows of five
    dots, or *pixels*. [Figure 9-6](#figure9-6) shows a close-up.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用键盘上可用的标准字母、数字和符号外，你还可以在每个草图中定义最多八个自定义字符。注意，在LCD模块中，每个字符由八行五个点或*像素*组成。[图9-6](#figure9-6)显示了特写。
- en: '![f09006](image_fi/500587c09/f09006.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![f09006](image_fi/500587c09/f09006.png)'
- en: 'Figure 9-6: Each character is made up of eight rows of five pixels.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-6：每个字符由八行五个像素组成。
- en: 'To display your own characters, you must first define each one using an *array*.
    For example, to create a smiley face, you could use the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示你自定义的字符，必须首先使用*数组*定义每个字符。例如，要创建一个微笑的表情符号，你可以使用以下代码：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Each number in the array addresses an individual pixel in the display. A 0 turns
    off a pixel, and a 1 turns it on. The elements in the array represent the rows
    of pixels in the display; the top element is the top row, the next element is
    the second row down, and so on.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 数组中的每个数字表示显示器中的一个像素。0表示关闭一个像素，1表示打开它。数组中的元素表示显示器中像素的行；最上面的元素是顶行，接下来的元素是第二行，以此类推。
- en: In this example, since the first element is `B00000`, all the pixels in the
    top row are turned off. In the next element, `B01010`, every other pixel is turned
    on, and the 1s form the tops of the eyes. The following rows continue to fill
    out the character.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，由于第一个元素是`B00000`，顶部行的所有像素都被关闭。在下一个元素`B01010`中，每隔一个像素被点亮，1的部分形成了眼睛的上方。接下来的行继续填充这个字符。
- en: 'Next, assign the array (which defines your new character) to the first of the
    eight custom character slots in `void setup()` with the following function:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将数组（定义你新字符的内容）分配给`void setup()`中的第一个自定义字符插槽，方法如下：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, to display the character, add the following in `void loop()`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要显示字符，在`void loop()`中添加以下内容：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To display our custom character, we’d use the following code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示我们的自定义字符，我们将使用以下代码：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[Figure 9-7](#figure9-7) shows the smiley faces displayed on the LCD screen.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[图9-7](#figure9-7)显示了LCD屏幕上的笑脸。'
- en: '![f09007](image_fi/500587c09/f09007.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![f09007](image_fi/500587c09/f09007.png)'
- en: 'Figure 9-7: The result of Project 28'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-7：项目28的结果
- en: Character LCD modules are simple to use and somewhat versatile. For example,
    using what you’ve learned, you could create a detailed digital thermometer by
    combining this LCD and the temperature measurement part of Project 20, on page
    122 in Chapter 6. However, if you need to display a lot of data or graphical items,
    you will need to use a *graphic LCD module*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 字符LCD模块使用简单且有一定的多功能性。例如，利用你所学的内容，你可以将此LCD与第6章第122页项目20中的温度测量部分结合，制作一个详细的数字温度计。然而，如果你需要显示大量数据或图形项，你将需要使用*图形LCD模块*。
- en: Graphic LCD Modules
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图形LCD模块
- en: Graphic LCD modules are larger and more expensive than character modules, but
    they’re also more versatile. You can use them not only to display text but also
    to draw lines, dots, circles, and more to create visual effects. The graphic LCD
    used in this book is a 128 × 160-pixel color module with an ST7735-compatible
    interface, as shown in [Figure 9-8](#figure9-8).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图形LCD模块比字符模块更大且更昂贵，但它们也更具多功能性。你不仅可以用它们显示文本，还可以绘制线条、点、圆圈等，创建视觉效果。本书中使用的图形LCD是一个128
    × 160像素的彩色模块，具有ST7735兼容接口，如[图9-8](#figure9-8)所示。
- en: '![f09008](image_fi/500587c09/f09008.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![f09008](image_fi/500587c09/f09008.png)'
- en: 'Figure 9-8: A graphic LCD module'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-8：图形LCD模块
- en: Connecting the Graphic LCD
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接图形LCD
- en: Before you can use the graphic LCD, you’ll need to connect eight wires between
    the LCD and the Arduino. This is easily done with male-to-female jumper wires,
    as the LCD has the connection pins presoldered at the factory. Make the connections
    as shown in [Table 9-1](#table9-1).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用图形LCD之前，你需要将LCD与Arduino之间连接八根线。这可以通过公对母跳线轻松完成，因为LCD的连接引脚在工厂时已预焊接。按照[表9-1](#table9-1)所示进行连接。
- en: 'Table 9-1: Connections Between the Graphic LCD Module and Arduino'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 表9-1：图形LCD模块与Arduino之间的连接
- en: '| **LCD pin label** | **To Arduino pin** | **LCD pin function** |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| **LCD引脚标签** | **连接到Arduino引脚** | **LCD引脚功能** |'
- en: '| --- | --- | --- |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Vcc | 5 V | VDD |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| Vcc | 5 V | VDD |'
- en: '| GND | GND | VSS (GND) |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| GND | GND | VSS (GND) |'
- en: '| CS | D10 | Chip select |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| CS | D10 | 片选 |'
- en: '| RST | D8 | Reset |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| RST | D8 | 重置 |'
- en: '| A0 (or DC) | D9 | Control |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| A0（或DC） | D9 | 控制 |'
- en: '| SDA | D11 | Data in |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| SDA | D11 | 数据输入 |'
- en: '| SCK | D13 | Clock in |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| SCK | D13 | 时钟输入 |'
- en: '| LED | 3.3 V | Backlight LED |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| LED | 3.3 V | 背光LED |'
- en: Using the LCD
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用LCD
- en: Before moving on, you’ll need to install the required Arduino library from the
    Library Manager. Using the method described in Chapter 7, search for and install
    the “TFT by Arduino, Adafruit” library.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，你需要通过库管理器安装所需的Arduino库。使用第7章中描述的方法，搜索并安装“TFT by Arduino, Adafruit”库。
- en: 'To use the LCD, insert the following three lines before `void setup()`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用LCD，在`void setup()`之前插入以下三行：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: (Don’t panic about the “SPI data bus”; for now, the line above is all you need
    to know. We’ll examine the SPI bus in more detail in Chapter 19.)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: （不要对“SPI数据总线”感到慌张；目前为止，上面的内容已经足够了解。我们将在第19章更详细地讨论SPI总线。）
- en: 'Then add the following lines inside `void setup()` to prepare the display:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`void setup()`中添加以下几行，以准备显示：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Controlling the Display
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制显示
- en: There are five text sizes you can choose from, as shown in Figures 9-9 and 9-10.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择五种文本大小，如图9-9和9-10所示。
- en: 'The first thing you need to consider is the background color for the display
    you are generating. This is set with:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先需要考虑的是你生成的显示内容的背景色。可以通过以下设置来完成：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![f09009](image_fi/500587c09/f09009.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![f09009](image_fi/500587c09/f09009.png)'
- en: 'Figure 9-9: Four of the five text sizes available on the LCD'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-9：LCD上可用的五种文本大小中的四种
- en: '![f09010](image_fi/500587c09/f09010.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![f09010](image_fi/500587c09/f09010.png)'
- en: 'Figure 9-10: The largest of the five text sizes available on the LCD'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-10：LCD上可用的五种文本大小中最大的一种
- en: You set the color of the background using RGB (red, green, blue) values between
    0 and 255\. For example, a white background would be maximum red, maximum green,
    and maximum blue—so 255, 255, 255\. A pure red background would have a value of
    255 for red and values of 0 for green and blue. For a black background, use zero
    for all three values. (You can find a handy list of RGB color tables at [https://www.rapidtables.com/web/color/RGB_Color.html](https://www.rapidtables.com/web/color/RGB_Color.html).)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用RGB（红色、绿色、蓝色）值设置背景颜色，值范围为0到255。例如，白色背景会是最大红色、最大绿色和最大蓝色—也就是255、255、255。纯红色背景则红色值为255，绿色和蓝色值为0。黑色背景则三个值都为零。（你可以在[https://www.rapidtables.com/web/color/RGB_Color.html](https://www.rapidtables.com/web/color/RGB_Color.html)找到一个有用的RGB颜色表。）
- en: 'Next, you need to set the text size if you’re writing text to the LCD for the
    first time or if you need to change the size mid-sketch. To do this, use:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，如果你是第一次在LCD上写文本，或者需要在绘图过程中更改文本大小，你需要设置文本大小。为此，请使用：
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: where `x` is a number between 1 and 5 that matches the text sizes shown in Figures
    9-9 and 9-10.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，`x`是1到5之间的数字，匹配图9-9和9-10中显示的文本大小。
- en: 'Then you set the color of the text with the following function:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下函数设置文本的颜色：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: where `B`,`G`,and`R` are the corresponding values for your blue, green, and
    red color levels, respectively.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，`B`、`G`和`R`分别是你设置的蓝色、绿色和红色的对应值。
- en: 'Finally, to write text to your screen, use the following function:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用以下函数将文本写入屏幕：
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This will display the text “Hello, world!” with the top left of the text positioned
    on the LCD at `x`, `y`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示文本“Hello, world!”，并将文本的左上角定位在LCD的`x`，`y`位置。
- en: 'This works great for static text. However, if you want to display a numeric
    variable, you need to do a little more work. The variable needs to be converted
    from a number type to a character array whose size will match the largest possible
    value. For example, if you’re reading the Arduino’s analog input 0 and want to
    display the value, use this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于静态文本非常有效。然而，如果你想显示一个数字变量，你需要做更多的工作。该变量需要从数字类型转换为字符数组，数组的大小应与可能的最大值匹配。例如，如果你正在读取Arduino的模拟输入0并想显示该值，可以使用以下代码：
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then during the sketch, before sending the analog value to the LCD, convert
    the value to a string, like so:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在绘图过程中，在将模拟值发送到LCD之前，将值转换为字符串，如下所示：
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This string gets converted and inserted into the character array:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个字符串会被转换并插入到字符数组中：
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, to display the value on the LCD, we can use the `.text()` command
    as usual:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了在LCD上显示值，我们可以像往常一样使用`.text()`命令：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: where the value of `analogZero` is displayed with the top left of the text positioned
    at `x`, `y`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，`analogZero`的值将在`x`，`y`位置显示，文本的左上角位置为`x`，`y`。
- en: Now that we’ve been through all the commands for using text on the LCD, let’s
    put them into action in the next project.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了所有用于在LCD上显示文本的命令，让我们在下一个项目中实际应用它们。
- en: 'Project #29: Seeing the Text Functions in Action'
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目#29：实际演示文本功能
- en: With this project, you’ll make your LCD display text in five sizes as well as
    the numeric value read from your Arduino’s analog input 0.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使LCD显示五种文本大小以及从Arduino模拟输入0读取的数字值。
- en: The Sketch
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘图
- en: 'Wire up your LCD as described in [Table 9-1](#table9-1) and then upload the
    following sketch:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[表9-1](#table9-1)的描述连接你的LCD，然后上传以下绘图：
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Running the Sketch
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行绘图
- en: You should see all five sizes of text displayed on the LCD over two screens.
    Then you should see a third screen with the value from analog input 0, like the
    example shown in [Figure 9-11](#figure9-11).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到五种文本大小显示在LCD的两个屏幕上。然后你应该看到一个第三个屏幕，显示来自模拟输入0的值，如[图9-11](#figure9-11)所示。
- en: '![f09011](image_fi/500587c09/f09011.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![f09011](image_fi/500587c09/f09011.png)'
- en: 'Figure 9-11: Analog input value shown on TFT LCD'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-11：在TFT LCD上显示的模拟输入值
- en: Creating More Complex Display Effects with Graphic Functions
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用图形函数创建更复杂的显示效果
- en: Now let’s look at the functions we can use to create various display effects.
    Keep in mind that the graphic LCD screen has a resolution of 160 columns by 128
    pixels, but when we refer to these columns and pixels in functions in our sketches,
    they are counted from 0 to 159 across and 0 to 127 down. Also, as with the text
    example earlier, we still need to use the five lines of code mentioned in “Using
    a Character LCD in a Sketch” on page 169 to initialize the display.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看我们可以使用的函数来创建各种显示效果。请记住，图形LCD屏幕的分辨率是160列和128像素，但当我们在草图中的函数中引用这些列和像素时，它们是从0到159横向计数，0到127纵向计数。此外，和之前的文本示例一样，我们仍然需要使用“在草图中使用字符LCD”一节中提到的五行代码来初始化显示。
- en: There are various functions that allow you to display dots (single pixels),
    lines, rectangles, and circles on the display. Apply your project requirements
    and add a dash of imagination to create a colorful and useful display output.
    We’ll run through those functions now, and then you can see them in action through
    a demonstration sketch.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的函数可以让你在显示屏上显示点（单个像素）、线条、矩形和圆形。根据项目需求，再加上一些想象力，可以创造出色且实用的显示效果。我们现在将介绍这些函数，之后你可以通过示例草图看到它们的实际应用。
- en: Before drawing any object, you need to define its color. This is done with
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在绘制任何对象之前，你需要定义它的颜色。可以使用
- en: '[PRE24]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: where `B`,`G`,and`R` are the corresponding values for your blue, green, and
    red color levels, respectively.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`B`、`G`和`R`分别是蓝色、绿色和红色颜色级别的对应值。'
- en: To draw a single dot on the display, we use
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要在显示屏上绘制一个单独的点，我们使用
- en: '[PRE25]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: where `X` and `Y` are the horizontal and vertical coordinates of the dot. With
    our LCD, the `X` range falls between 0 and 159 and the `Y` range falls between
    0 and 127.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`X`和`Y`是点的水平和垂直坐标。对于我们的LCD，`X`的范围是0到159，`Y`的范围是0到127。'
- en: To draw a line from one point to another, we use
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要从一个点绘制到另一个点，我们使用
- en: '[PRE26]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: where `X1` and `Y1` are the coordinates of the starting point and `X2` and `Y2`
    are the coordinates of the end of the line.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`X1`和`Y1`是起始点的坐标，`X2`和`Y2`是线段的结束坐标。'
- en: To draw a circle, we use
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制一个圆，我们使用
- en: '[PRE27]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: where `X` and `Y` are the coordinates of the center of the circle, and `R` is
    the radius of the circle in pixels. If you wish to fill the circle (or a rectangle,
    described a bit later) with a color, instead of just drawing an outline, precede
    the `circle()` function with
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`X`和`Y`是圆心的坐标，`R`是圆的半径，单位为像素。如果你希望填充圆形（或稍后会描述的矩形）以颜色，而不仅仅是绘制轮廓，可以在`circle()`函数前加上'
- en: '[PRE28]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: where `B`,`G`,and`R` are the corresponding values for your blue, green, and
    red fill levels, respectively. Note that a fill color doesn’t change the shape’s
    outline, so you still need to precede the shape function with the `stroke()` function.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`B`、`G`和`R`分别是蓝色、绿色和红色填充级别的对应值。请注意，填充颜色不会改变形状的轮廓，所以你仍然需要在形状函数前加上`stroke()`函数。'
- en: 'If you wish to draw more than one filled item, you only need to use the `fill()`
    command once. If you then want to turn off the fill and revert to outlines only,
    use this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望绘制多个填充项，你只需使用一次`fill()`命令。如果你随后希望关闭填充并仅返回轮廓，可以使用以下命令：
- en: '[PRE29]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Finally, you can draw rectangles with the following function:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以使用以下函数绘制矩形：
- en: '[PRE30]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: where `X1`, `Y1` are the coordinates for the top left of the rectangle and `X2`,
    `Y2` are the coordinates for the bottom right of the rectangle.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`X1`、`Y1`是矩形左上角的坐标，`X2`、`Y2`是矩形右下角的坐标。'
- en: 'Project #30: Seeing the Graphic Functions in Action'
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #30：图形功能的实际展示'
- en: Now that we’ve been through all the commands for using the graphic functions
    on the LCD, let’s put them into action in this project.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了所有用于LCD图形功能的命令，接下来让我们在这个项目中实际运用它们。
- en: The Sketch
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'Wire up your LCD as described in [Table 9-1](#table9-1) and then upload the
    following sketch:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[表 9-1](#table9-1)中的说明连接你的LCD，然后上传以下草图：
- en: '[PRE31]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: After the sketch has uploaded, the display will run through all the graphic
    functions we have examined in this chapter. For example, you should see the lines
    shown in [Figure 9-12](#figure9-12).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 上传草图后，显示屏将执行我们在本章中讨论的所有图形功能。例如，你应该能看到[图 9-12](#figure9-12)中展示的线条。
- en: With the functions discussed so far and some imagination, you can create a variety
    of display effects or display data graphically. In the next section, we’ll build
    on our quick-read thermometer project using the LCD screen and some of these functions.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 利用到目前为止讨论的函数和一些想象力，你可以创建各种显示效果或将数据以图形方式展示。在下一部分中，我们将基于我们的快速读取温度计项目，使用LCD屏幕和这些函数来扩展功能。
- en: '![f09012](image_fi/500587c09/f09012.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![f09012](image_fi/500587c09/f09012.png)'
- en: 'Figure 9-12: Random lines on the LCD'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-12：LCD上的随机线条
- en: 'Project #31: Creating a Temperature History Monitor'
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #31：创建温度历史监控器'
- en: In this project, our goal is to measure the temperature once every 20 minutes
    and display the last 120 readings in a dot graph. Each reading will be represented
    as a pixel, with the temperature on the vertical axis and time on the horizontal
    axis.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们的目标是每隔20分钟测量一次温度，并以点图的形式显示最近120次读数。每个读数将表示为一个像素，纵轴为温度，横轴为时间。
- en: The most current reading will appear on the left, and the display will continually
    scroll the readings from left to right. The current temperature will also be displayed
    as a numeral.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 最新的读数将出现在左侧，显示屏将不断地从左到右滚动显示读数。当前温度也会作为数字显示。
- en: The Algorithm
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算法
- en: Although it may sound complex, this project is fairly easy, requiring only two
    functions. The first function takes a temperature reading from the TMP36 temperature
    sensor and stores it in an array of 120 values. Each time a new reading is taken,
    the previous 119 values are moved down the array to make way for the new reading,
    and the oldest reading is erased.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个项目听起来可能很复杂，但实际上它非常简单，只需要两个函数。第一个函数从TMP36温度传感器获取温度读数，并将其存储在一个包含120个值的数组中。每当获取新的读数时，前119个值会向数组下方移动，为新读数腾出位置，并删除最旧的读数。
- en: The second function draws on the LCD screen. It displays the current temperature,
    a scale for the graph, and the positions of each pixel for the display of the
    temperature data over time.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个函数用于在LCD屏幕上绘制图形。它显示当前温度、图表的刻度以及每个像素的位置，用于展示温度数据随时间变化的情况。
- en: The Hardware
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'Here’s what you’ll need to create this project:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是你创建这个项目所需的内容：
- en: One 160 × 128-pixel ST7735 TFT LCD module, as used in this chapter
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个160 × 128像素的ST7735 TFT LCD模块，如本章所使用的。
- en: One TMP36 temperature sensor
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个TMP36温度传感器
- en: Various connecting wires
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种连接线
- en: One breadboard
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块面包板
- en: Arduino and USB cable
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino和USB线
- en: Connect the graphic LCD as described in [Table 9-1](#table9-1) and connect the
    TMP36 sensor to 5 V, analog 5, and GND as you did in Project 20 in Chapter 6.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[表9-1](#table9-1)的描述连接图形LCD，并将TMP36传感器连接到5V、模拟5和GND，正如你在第6章的项目20中所做的那样。
- en: The Sketch
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'Our sketch combines the code we used to measure temperature in Chapter 6 and
    the graphic functions described earlier in this chapter. Enter and upload the
    following sketch, which includes relevant comments about the functions used:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的草图结合了第6章中用于测量温度的代码，以及本章前面描述的图形函数。输入并上传以下草图，其中包含有关所使用函数的相关注释：
- en: '[PRE32]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Running the Sketch
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行草图
- en: The resulting display should look something like [Figure 9-13](#figure9-13).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的显示效果应该类似于[图9-13](#figure9-13)。
- en: '![f09013](image_fi/500587c09/f09013.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![f09013](image_fi/500587c09/f09013.png)'
- en: 'Figure 9-13: Results of Project 31'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-13：项目31的结果
- en: Modifying the Sketch
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改草图
- en: Different people can interpret data better when they see it presented in different
    visual formats. For this reason, you may want to create a bar graph instead, with
    vertical lines indicating the values.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的人在看到不同的视觉格式呈现数据时，能更好地理解数据。出于这个原因，你可能希望改为创建一个条形图，垂直线表示不同的数值。
- en: This type of project could also be used to display other kinds of data, such
    as the voltage from various sensors as measured by analog input pins. Or you could
    add another temperature sensor and show both values at once. Almost anything that
    returns a value can be displayed using the graphic LCD module.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的项目也可以用来显示其他类型的数据，例如通过模拟输入引脚测量的各种传感器的电压。或者你可以添加另一个温度传感器，显示两个传感器的值。几乎任何返回值的东西都可以使用图形LCD模块进行显示。
- en: Looking Ahead
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展望未来
- en: 'Now that you have experience with LCDs, you can see that the Arduino is in
    fact a small computer: it can accept and process incoming data and display it
    to the outside world. But this is only the beginning. In the next chapter, you’ll
    examine libraries in much more depth, learn to write your own library, and then
    use your new library with the temperature sensor used in previous projects.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了使用LCD的经验，你可以看到Arduino实际上是一个小型计算机：它可以接收并处理输入数据，并将其显示到外部世界。但这仅仅是开始。在下一章中，你将更加深入地研究库，学习编写自己的库，然后在之前的项目中使用你新创建的库与温度传感器一起工作。
