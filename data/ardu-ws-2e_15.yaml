- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Wireless Data
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 无线数据
- en: In this chapter, you’ll learn how to send and receive instructions and data
    using various types of wireless transmission hardware. Specifically, you’ll learn
    how to
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章节中，你将学习如何使用各种类型的无线传输硬件发送和接收指令和数据。具体来说，你将学习如何
- en: Send digital output signals using low-cost wireless modules
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用低成本无线模块发送数字输出信号
- en: Create a simple and inexpensive wireless remote control system
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单且廉价的无线遥控系统
- en: Use LoRa wireless data receivers and transceivers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LoRa无线数据接收器和收发器
- en: Create a remote control temperature sensor
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个遥控温度传感器
- en: Using Low-Cost Wireless Modules
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用低成本无线模块
- en: It’s easy to send text information in one direction using a wireless link between
    two Arduino-controlled systems that have inexpensive radio frequency (RF) data
    modules, such as the transmitter and receiver modules shown in [Figure 16-1](#figure16-1).
    These modules are usually sold in pairs and are known as *RF Link* modules or
    kits. Good examples are part 44910433 from PMD Way or parts WRL-10534 and WRL-10532
    from SparkFun. We’ll use the most common module types that run on the 433 MHz
    radio frequency in our projects.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用两台由Arduino控制的系统之间的无线链接传送单向文本信息是很容易的，这两台系统配备了廉价的射频（RF）数据模块，例如[图16-1](#figure16-1)所示的发射器和接收器模块。这些模块通常是成对出售的，通常被称为*RF
    Link*模块或套件。良好的例子包括PMD Way的44910433零件，或者SparkFun的WRL-10534和WRL-10532零件。在我们的项目中，我们将使用最常见的、工作在433
    MHz射频上的模块类型。
- en: The connections shown at the bottom of the transmitter in [Figure 16-2](#figure16-2)
    are, from left to right, data in, 5 V, and GND. A connection for an external antenna
    is at the top-right corner of the board. The antenna can be a single length of
    wire, or it can be omitted entirely for short transmission distances. (Each brand
    of module can vary slightly, so check the connections on your particular device
    before moving forward.)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[图16-2](#figure16-2)中发射器底部的连接端口从左到右依次为：数据输入、5V和GND。外部天线的连接端口位于板子的右上角。天线可以是单根导线，或者如果传输距离较短，也可以完全省略。（每种品牌的模块可能会有所不同，因此在继续操作之前，请检查你特定设备的连接方式。）'
- en: '![f16001](image_fi/500587c16/f16001.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![f16001](image_fi/500587c16/f16001.png)'
- en: 'Figure 16-1: RF Link transmitter and receiver set'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图16-1：RF Link发射器和接收器套件
- en: '![f16002](image_fi/500587c16/f16002.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![f16002](image_fi/500587c16/f16002.png)'
- en: 'Figure 16-2: Transmitter RF Link module'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图16-2：发射器RF Link模块
- en: '[Figure 16-3](#figure16-3) shows the receiver module, which is slightly larger
    than the transmitter module.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[图16-3](#figure16-3)展示了接收器模块，它比发射器模块稍大。'
- en: '![f16003](image_fi/500587c16/f16003.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![f16003](image_fi/500587c16/f16003.png)'
- en: 'Figure 16-3: Receiver RF Link module'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图16-3：接收器RF Link模块
- en: 'The connections on the receiver are straightforward: the V+ and V− pins connect
    to 5 V and GND, respectively, and DATA connects to the Arduino pin allocated to
    receive the data. These pins are usually labeled on the other side of the module.
    If they’re not labeled or you’re not sure, look for the module’s data sheet or
    contact the supplier.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接收器上的连接很简单：V+和V−针脚分别连接到5V和GND，DATA连接到分配给接收数据的Arduino针脚。这些针脚通常标注在模块的另一侧。如果没有标注，或者你不确定，可以查看模块的数据手册或联系供应商。
- en: Before you can use these modules, you also need to download and install the
    latest version of the VirtualWire library from [http://www.airspayce.com/mikem/arduino/VirtualWire/](http://www.airspayce.com/mikem/arduino/VirtualWire/)
    using the method described in Chapter 7. This library is also included with the
    sketch download file for this book, which is available at [https://nostarch.com/arduino-workshop-2nd-edition/](https://nostarch.com/arduino-workshop-2nd-edition/).
    After you’ve installed the library, you’ll be ready to move on to the next section.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在你可以使用这些模块之前，你还需要从[http://www.airspayce.com/mikem/arduino/VirtualWire/](http://www.airspayce.com/mikem/arduino/VirtualWire/)下载并安装最新版本的VirtualWire库，安装方法在第7章中有详细说明。此库也包含在本书的草图下载文件中，下载链接是[https://nostarch.com/arduino-workshop-2nd-edition/](https://nostarch.com/arduino-workshop-2nd-edition/)。安装完库之后，你就可以进入下一部分了。
- en: 'Project #46: Creating a Wireless Remote Control'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #46：创建一个无线遥控器'
- en: 'We’ll remotely control two digital outputs: you’ll press buttons connected
    to one Arduino board to control matching digital output pins on another Arduino
    located some distance away. This project will show you how to use the RF Link
    modules. You’ll also learn how to determine how far away you can be and remotely
    control the Arduino. It’s important to know this before you commit to using the
    modules for more complex tasks. (In open air, the distance you can achieve is
    generally about 100 meters, but the distance will be less when you are indoors
    or when the modules are separated by obstacles.)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将远程控制两个数字输出：您将按下连接到一个 Arduino 板的按钮，以控制位于远处的另一个 Arduino 上的匹配数字输出引脚。这个项目将向您展示如何使用
    RF Link 模块。您还将学会如何确定您能离多远并远程控制 Arduino。在使用这些模块执行更复杂任务之前，了解这一点非常重要。（在开阔地，您通常可以达到大约
    100 米的距离，但在室内或模块之间有障碍物时，距离会更短。）
- en: The Transmitter Circuit Hardware
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发射器电路硬件
- en: 'The following hardware is required for the transmitter circuit:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 发射器电路需要以下硬件：
- en: Arduino and USB cable
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino 和 USB 电缆
- en: AA battery holder and wiring (as used in Chapter 14)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AA 电池座和接线（如第 14 章所用）
- en: One 433 MHz RF Link transmitter module
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 433 MHz RF Link 发射模块
- en: Two 10 kΩ resistors (R1 and R2)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个 10 kΩ 电阻（R1 和 R2）
- en: Two 100 nF capacitors (C1 and C2)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个 100 nF 电容（C1 和 C2）
- en: Two push buttons
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个按钮
- en: One breadboard
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个面包板
- en: The Transmitter Schematic
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发射器原理图
- en: The transmitter circuit consists of two push buttons with debounce circuitry
    connected to digital pins 2 and 3, as well as the transmitter module wired as
    described earlier ([Figure 16-4](#figure16-4)).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 发射器电路由两个带有去抖电路的按钮组成，连接到数字引脚 2 和 3，以及之前描述过的发射模块（见[图 16-4](#figure16-4)）。
- en: '![f16004](image_fi/500587c16/f16004.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![f16004](image_fi/500587c16/f16004.png)'
- en: 'Figure 16-4: Transmitter schematic for Project 46'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16-4：项目 46 的发射器原理图
- en: The Receiver Circuit Hardware
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接收器电路硬件
- en: 'The following hardware is required for the receiver circuit:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接收器电路需要以下硬件：
- en: Arduino and USB cable
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino 和 USB 电缆
- en: AA battery holder and wiring (as used in Chapter 14)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AA 电池座和接线（如第 14 章所用）
- en: One 433 MHz RF Link receiver module
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 433 MHz RF Link 接收模块
- en: One breadboard
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个面包板
- en: Two LEDs of your choice
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个您选择的 LED
- en: Two 560 Ω resistors (R1 and R2)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个 560 Ω 电阻（R1 和 R2）
- en: The Receiver Schematic
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接收器原理图
- en: The receiver circuit consists of two LEDs on digital pins 6 and 7 and the data
    pin from the RF Link receiver module connected to digital pin 8, as shown in [Figure
    16-5](#figure16-5).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接收器电路由两个数字引脚 6 和 7 上的 LED 和连接到数字引脚 8 的 RF Link 接收模块数据引脚组成，如[图 16-5](#figure16-5)所示。
- en: '![f16005](image_fi/500587c16/f16005.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![f16005](image_fi/500587c16/f16005.png)'
- en: 'Figure 16-5: Receiver schematic for Project 46'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16-5：项目 46 的接收器原理图
- en: You can substitute the breadboard, LEDs, resistors, and receiver module with
    a Freetronics 433 MHz receiver shield, shown in [Figure 16-6](#figure16-6).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将面包板、LED、限流电阻和接收模块替换为 Freetronics 433 MHz 接收器扩展板，如[图 16-6](#figure16-6)所示。
- en: '![f16006](image_fi/500587c16/f16006.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![f16006](image_fi/500587c16/f16006.png)'
- en: 'Figure 16-6: A Freetronics 433 MHz receiver shield'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16-6：Freetronics 433 MHz 接收器扩展板
- en: The Transmitter Sketch
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发射器草图
- en: 'Now let’s examine the sketch for the transmitter. Enter and upload the following
    sketch to the Arduino with the transmitter circuit:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下发射器的草图。输入并上传以下草图到带有发射器电路的 Arduino：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We include the VirtualWire library at 1 and use its functions at 3 to set up
    the RF Link transmitter module and set the data speed. At 4, we set digital pin
    8, which is used to connect the Arduino to the data pin of the transmitter module
    and to control the speed of the data transmission. (You can use any other digital
    pins if necessary, except 0 and 1, which would interfere with the serial line.)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第 1 行引入了 VirtualWire 库，并在第 3 行使用它的函数来设置 RF Link 发射模块并设定数据传输速度。在第 4 行，我们设置了数字引脚
    8，用于连接 Arduino 到发射模块的数据引脚，并控制数据传输速度。（如果需要，您可以使用其他数字引脚，但 0 和 1 会干扰串行线。）
- en: The transmitter sketch reads the status of the two buttons connected to digital
    pins 2 and 3 and sends a single text character to the RF Link module that matches
    the state of the buttons. For example, when the button on digital pin 2 is `HIGH`,
    the Arduino sends the character *a*, and when the button is `LOW`, it sends the
    character *b*. When the button on digital pin 3 is `HIGH`, the Arduino sends the
    character *c*, and when the button is `LOW`, it sends the character *d*. The four
    states are declared starting at 2.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 发射器的草图读取连接到数字引脚 2 和 3 的两个按钮的状态，并将与按钮状态匹配的单个文本字符发送到 RF 链接模块。例如，当数字引脚 2 上的按钮为`HIGH`时，Arduino
    发送字符*a*；当按钮为`LOW`时，发送字符*b*；当数字引脚 3 上的按钮为`HIGH`时，Arduino 发送字符*c*；当按钮为`LOW`时，发送字符*d*。这四种状态从
    2 开始声明。
- en: 'The transmission of the text character is handled using one of the four sections’
    `if` statements, starting at 5—for example, the contents of the `if-then` statement
    at 6. The variable transmitted is used twice, as shown here with `on2`, for example:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 文本字符的传输通过四个部分的`if`语句来处理，从第 5 行开始，例如第 6 行的`if-then`语句。传输的变量被使用了两次，如这里使用`on2`所示：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The function `vw_send()` sends the contents of the variable `on2`, but it needs
    to know the length of the variable in characters, so we use `strlen()` to accomplish
    this.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`vw_send()`发送变量`on2`的内容，但它需要知道变量的字符长度，因此我们使用`strlen()`来完成这一操作。
- en: The Receiver Sketch
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接收器草图
- en: 'Now let’s add the receiver sketch. Enter and upload the following sketch to
    the Arduino with the receiver circuit:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加接收器草图。输入并上传以下草图到 Arduino，并连接接收电路：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As with the transmitter circuit, we use the VirtualWire functions at 1 to set
    up the RF Link receiver module and set the data speed. At 2 we set the Arduino
    digital pin to which the link’s data output pin is connected (pin 8).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 与发射器电路一样，我们使用 VirtualWire 函数在第 1 行设置 RF 链接接收模块并设置数据传输速度。在第 2 行我们设置 Arduino 数字引脚，连接到该链接的数据输出引脚（引脚
    8）。
- en: When the sketch is running, the characters sent from the transmitter circuit
    are received by the RF Link module and sent to the Arduino. The function `vw_get_message()`
    at 3 takes the characters received by the Arduino, which are interpreted by the
    `switch case` statement at 4. For example, pressing button S1 on the transmitter
    circuit will send the character *a*. This character is received by the transmitter,
    which sets digital pin 6 to `HIGH`, turning on the LED.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当草图运行时，来自发射器电路的字符被 RF 链接模块接收并发送到 Arduino。`vw_get_message()`函数在第 3 行获取由 Arduino
    接收的字符，这些字符通过第 4 行的`switch case`语句进行解析。例如，按下发射器电路上的按钮 S1 时，会发送字符*a*。该字符由接收器接收，并使数字引脚
    6 设置为`HIGH`，点亮 LED。
- en: You can use this simple pair of demonstration circuits to create more complex
    controls for Arduino systems by sending codes as basic characters to be interpreted
    by a receiver circuit.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这一对简单的演示电路，通过将代码作为基本字符发送并由接收电路解释，从而为 Arduino 系统创建更复杂的控制。
- en: Using LoRa Wireless Data Modules for Greater Range and Faster Speed
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 LoRa 无线数据模块实现更大范围和更快速度
- en: When you need a wireless data link with greater range and a faster data speed
    than what the basic wireless modules used earlier can provide, LoRa data modules
    may be the right choice. LoRa is short for “long range,” and these modules work
    at long range with low power consumption. The modules are *transceivers*, which
    are devices that can both transmit and receive data, so you don’t need a separate
    transmitter and receiver. A further benefit of using LoRa modules is that different
    types of modules can communicate, allowing you, the designer, to create control
    and data networks that range from the simple to the complex. In this chapter,
    you will create several basic modules that can be built upon for various purposes.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要比之前使用的基本无线模块提供更大范围和更快数据速度的无线数据链接时，LoRa 数据模块可能是一个合适的选择。LoRa 是“长距离”（long range）的缩写，这些模块具有低功耗并能够在长距离范围内工作。这些模块是*收发器*，即既能发送又能接收数据的设备，因此你不需要单独的发射器和接收器。使用
    LoRa 模块的另一个好处是，不同类型的模块之间可以互相通信，使得你作为设计者能够创建从简单到复杂的控制和数据网络。在本章中，你将创建几个基础模块，可以根据需要扩展用于各种目的。
- en: '![f16007](image_fi/500587c16/f16007.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![f16007](image_fi/500587c16/f16007.png)'
- en: 'Figure 16-7: A LoRa shield for Arduino'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16-7：Arduino 用 LoRa 扩展板
- en: For convenience, we’ll be using two LoRa shields for Arduino, such as PMD Way
    part number 14290433, shown in [Figure 16-7](#figure16-7).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，我们将使用两个 Arduino 的 LoRa 扩展板，例如 PMD Way 型号 14290433，如[图 16-7](#figure16-7)所示。
- en: 'When purchasing your LoRa shields, you will need to select an operating frequency.
    The correct frequency will vary depending on your country of use. This is to ensure
    that your data transmissions don’t interfere with other devices in your area.
    LoRa products are available in three operating frequency bands:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 购买 LoRa 扩展板时，你需要选择一个工作频率。正确的频率会根据你使用的国家/地区而有所不同。这样可以确保你的数据传输不会干扰到你所在地区的其他设备。LoRa
    产品有三种工作频段：
- en: 433 MHz Used in United States and Canada
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 433 MHz 用于美国和加拿大
- en: 868 MHz Used in United Kingdom and Europe
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 868 MHz 用于英国和欧洲
- en: 915 MHz Used in Australia and New Zealand
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 915 MHz 用于澳大利亚和新西兰
- en: You can find a full list of countries and the frequency ranges you need to use
    in each at [https://www.thethingsnetwork.org/docs/lorawan/frequencies-by-country.html](https://www.thethingsnetwork.org/docs/lorawan/frequencies-by-country.html).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://www.thethingsnetwork.org/docs/lorawan/frequencies-by-country.html](https://www.thethingsnetwork.org/docs/lorawan/frequencies-by-country.html)找到各国的频率范围完整列表。
- en: Finally, you need to download and install the Arduino library, which can be
    found at [https://github.com/sandeepmistry/arduino-LoRa/archive/master.zip](https://github.com/sandeepmistry/arduino-LoRa/archive/master.zip).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你需要下载并安装 Arduino 库，库文件可以在[https://github.com/sandeepmistry/arduino-LoRa/archive/master.zip](https://github.com/sandeepmistry/arduino-LoRa/archive/master.zip)找到。
- en: 'Project #47: Remote Control over LoRa Wireless'
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #47：通过 LoRa 无线进行远程控制'
- en: This project will demonstrate simple data transmission from one LoRA-equipped
    Arduino to another to allow remote control of a digital output pin. Our transmitter
    has two buttons to turn the receiver circuit’s output pin on and off.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目将演示从一个配备 LoRA 的 Arduino 到另一个的简单数据传输，用于远程控制数字输出引脚。我们的发射器有两个按钮，用于打开和关闭接收电路的输出引脚。
- en: The Transmitter Circuit Hardware
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发射器电路硬件
- en: 'The following hardware is required for the transmitter circuit:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 发射器电路所需的硬件如下：
- en: Arduino and USB cable
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino 和 USB 电缆
- en: LoRa shield for Arduino
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino 用 LoRa 扩展板
- en: Two 10 kΩ resistors (R1 and R2)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个 10 kΩ 电阻 (R1 和 R2)
- en: Two 100 nF capacitors (C1 and C2)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个 100 nF 电容 (C1 和 C2)
- en: Two push buttons
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个按钮
- en: AA battery holder and wiring (as used in Chapter 14)
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AA 电池座和接线（在第 14 章中使用）
- en: The Transmitter Schematic
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发射器原理图
- en: The transmitter circuit, as shown in [Figure 16-8](#figure16-8), consists of
    two push buttons with debounce circuitry connected to digital pins 2 and 3\. The
    LoRa shield is placed on the Arduino Uno. Once the sketch has been uploaded, power
    is provided by the AA battery holder and wiring.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图 16-8](#figure16-8)所示，发射器电路由两个带有去抖动电路的按钮组成，分别连接到数字引脚 2 和 3。LoRa 扩展板安装在 Arduino
    Uno 上。一旦草图上传完成，电源由 AA 电池座和接线提供。
- en: '![f16008](image_fi/500587c16/f16008.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![f16008](image_fi/500587c16/f16008.png)'
- en: 'Figure 16-8: Transmitter schematic for Project 47'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16-8：项目 47 的发射器原理图
- en: Before using your LoRa shield, there are three header jumpers, shown in [Figure
    16-9](#figure16-9), that need to be removed from the shield. If you don’t remove
    them, they will interfere with other digital pins. You can remove them completely
    or just connect the headers to one of the two pins.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用你的 LoRa 扩展板之前，需移除三个插针跳线，如[图 16-9](#figure16-9)所示。如果不移除它们，它们将干扰其他数字引脚。你可以完全移除它们，或者仅将插针连接到两个引脚之一。
- en: '![f16009](image_fi/500587c16/f16009.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![f16009](image_fi/500587c16/f16009.png)'
- en: 'Figure 16-9: Header jumpers to remove from the LoRa shield'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16-9：从 LoRa 扩展板上移除的插针跳线
- en: The Receiver Circuit Hardware
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接收器电路硬件
- en: 'The following hardware is required for the receiver circuit:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接收器电路所需的硬件如下：
- en: Arduino and USB cable
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino 和 USB 电缆
- en: LoRa shield for Arduino
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino 用 LoRa 扩展板
- en: One LED
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 LED
- en: One 560 Ω resistor (R1)
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 560 Ω 电阻 (R1)
- en: The Receiver Schematic
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接收器原理图
- en: The receiver circuit, shown in [Figure 16-10](#figure16-10), consists of one
    LED and a current-limiting resistor connected between digital pin 7 and GND. We
    leave this connected to the PC via USB, so no external power is required.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接收器电路，如[图 16-10](#figure16-10)所示，由一个 LED 和一个限流电阻组成，电阻连接在数字引脚 7 和 GND 之间。我们将其通过
    USB 连接到 PC，因此不需要外部电源。
- en: '![f16010](image_fi/500587c16/f16010.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![f16010](image_fi/500587c16/f16010.png)'
- en: 'Figure 16-10: Receiver schematic for Project 47'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16-10：项目 47 的接收器原理图
- en: The Transmitter Sketch
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发射器草图
- en: 'Now let’s examine the sketch for the transmitter. Enter and upload the following
    sketch to the Arduino with the transmitter circuit:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来查看发射器的草图。输入并上传以下草图到带有发射器电路的 Arduino：
- en: '[PRE3]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The operating frequency is selected at 1. Our example is using 915 MHz, so you
    may need to change this to either `433000000L` or `868000000L` depending on your
    country and shield. We include the Arduino LoRa library at 2, and it’s activated
    at 4. The SPI library is also included, as the LoRa shield uses the SPI bus to
    communicate with the Arduino. At 6, the LoRa transceiver is activated at the appropriate
    frequency, after the digital pins are prepared to be inputs for the buttons.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 操作频率在第1行选择。我们的示例使用的是915 MHz，因此根据你的国家和无线电盾牌，你可能需要将其更改为`433000000L`或`868000000L`。我们在第2行包含了Arduino
    LoRa库，并在第4行激活它。SPI库也被包含，因为LoRa盾牌使用SPI总线与Arduino通信。在第6行，LoRa收发器在适当的频率下被激活，数字引脚也被准备好作为按钮的输入。
- en: At 3, we have the custom function `loraSend(int controlCode)`. This is called
    when a button is pressed. It first sends a three-character code—in this case `ABC`—out
    on the LoRa airwaves, followed by a control code. The character code allows you
    to direct the control to a particular receiver circuit. Otherwise, if you’re using
    two or more receivers, there would be confusion as to which one would be controlled
    by the transmitter. You will see that the receiver will act only if `ABC` is sent.
    The control codes in our example are `1` and `0` (to turn the receiver’s digital
    output on or off, respectively).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3行，我们有一个自定义函数`loraSend(int controlCode)`。按下按钮时，会调用此函数。它首先发送一个三字符代码——在本例中是`ABC`——通过LoRa无线电波发送，然后发送控制代码。字符代码允许你将控制发送到特定的接收器电路。否则，如果你使用两个或更多接收器，就会混淆由哪个接收器接收发射器的控制信号。你将看到，接收器只有在收到`ABC`时才会行动。我们示例中的控制代码是`1`和`0`（分别用于打开或关闭接收器的数字输出）。
- en: At 4, the LoRa module is switched to transmit mode, and then the character and
    control codes are sent over the airwaves. At 5, the LoRa module is told to stop
    transmitting and gets switched back to receiving data. Once you have uploaded
    the transmitter sketch, the transmitter hardware can be disconnected from the
    computer and powered using the battery pack.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在第4行，LoRa模块被切换到发送模式，然后通过无线电波发送字符和控制代码。在第5行，LoRa模块停止发送并切换回接收数据。上传了发射器草图后，可以将发射器硬件从计算机上断开，并通过电池组供电。
- en: The Receiver Sketch
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接收器草图
- en: 'Now let’s examine the receiver sketch. Enter and upload the following sketch
    to the Arduino with the receiver circuit:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看接收器草图。输入并上传以下草图到带有接收器电路的Arduino中：
- en: '[PRE4]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Once again we include the Arduino LoRa library at 2, and it’s activated at 6.
    The operating frequency is also selected at 1. Our example is using 915 MHz, so
    you may need to change this to either `433000000L` or `868000000L` depending on
    your country and shield. The SPI library is also included, as the LoRa shield
    uses the SPI bus to communicate with the Arduino. At 7, we tell the sketch to
    run a certain function—in this case `void takeAction()`—when data is received
    over the airwaves. Then at 8, the LoRa module is switched to receive mode.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次在第2行包含了Arduino LoRa库，并在第6行激活它。操作频率也在第1行选择。我们的示例使用的是915 MHz，因此根据你的国家和无线电盾牌，你可能需要将其更改为`433000000L`或`868000000L`。同时也包含了SPI库，因为LoRa盾牌使用SPI总线与Arduino通信。在第7行，我们告诉草图在接收到数据时运行某个函数——在本例中是`void
    takeAction()`。然后在第8行，LoRa模块被切换到接收模式。
- en: When operating, the receiver simply waits for data to be received by the LoRa
    module. At that point, the function `takeAction()` is called. This takes each
    character of data from the transmitter and places it into an array of characters
    called `incoming[4]` between 3 and 4. Next, the receiver checks each character
    of the code (in our case `ABC`) at 5 to ensure the transmission is for this particular
    receiver. Finally, if this is successful, the control character is checked. If
    it’s a `1`, digital pin 7 is set to `HIGH`, and if it’s a `0`, digital pin 7 is
    set to `LOW`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，接收器只是等待LoRa模块接收到数据。此时，`takeAction()`函数会被调用。它将从发射器接收的每个字符放入一个名为`incoming[4]`的字符数组中，位置在第3行到第4行之间。接下来，接收器检查代码的每个字符（在我们的示例中是`ABC`），以确保传输是针对这个特定接收器的。最后，如果检查成功，控制字符会被检查。如果它是`1`，数字引脚7会被设置为`HIGH`，如果是`0`，数字引脚7会被设置为`LOW`。
- en: Now you have the basic framework for a longer-distance remote control. Furthermore,
    by assigning different character codes to multiple receivers, you can expand your
    system to control more than one receiver unit from one transmitter.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了一个远程控制的基本框架。此外，通过为多个接收器分配不同的字符代码，你可以将系统扩展为通过一个发射器控制多个接收单元。
- en: However, for serious applications, you may want confirmation that an instruction
    from the transmitter has been successfully completed by the receiver, so we’ll
    add a confirmation function in the next project.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于一些重要的应用，你可能希望确认发射机的指令已被接收机成功执行，因此我们将在下一个项目中添加确认功能。
- en: 'Project #48: Remote Control over LoRa Wireless with Confirmation'
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目#48：通过LoRa无线遥控并进行确认
- en: This project adds a confirmation system to the receiver-transmitter setup created
    in Project 47, creating a two-way data system. An LED on the transmitter circuit
    will turn on when the receiver output is set to `HIGH` and turn off when the receiver
    output is set to `LOW`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目为第47号项目中创建的接收机-发射机系统添加了确认功能，形成了一个双向数据系统。发射机电路上的LED将在接收机输出设置为`HIGH`时点亮，而在接收机输出设置为`LOW`时熄灭。
- en: The Transmitter Circuit Hardware
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发射机电路硬件
- en: 'The following hardware is required for the transmitter circuit:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 发射机电路所需的硬件如下：
- en: Arduino and USB cable
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino及USB电缆
- en: LoRa Shield for Arduino
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino的LoRa扩展板
- en: Two 10 kΩ resistors (R1 and R2)
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个10 kΩ电阻（R1和R2）
- en: One 560 Ω resistor (R3)
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个560 Ω电阻（R3）
- en: One LED
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个LED
- en: Two 100 nF capacitors (C1 and C2)
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个100 nF电容（C1和C2）
- en: Two push buttons
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个按键
- en: AA battery holder and wiring (as used in Chapter 14)
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AA电池座及接线（如第14章所用）
- en: The Transmitter Schematic
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发射机电路图
- en: The transmitter circuit, shown in [Figure 16-11](#figure16-11), consists of
    two push buttons with debounce circuitry connected to digital pins 3 and 4, and
    an LED and current-limiting resistor on digital pin 6\. The LoRa shield is placed
    on the Arduino Uno. Once the sketch has been uploaded, power is provided by the
    AA battery holder and wiring.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图16-11](#figure16-11)所示，发射机电路由两个带去抖动电路的按键组成，这些按键连接到数字引脚3和4；LED和限流电阻连接到数字引脚6。LoRa扩展板安装在Arduino
    Uno上。一旦草图上传完成，电源由AA电池座和接线提供。
- en: '![f16011](image_fi/500587c16/f16011.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![f16011](image_fi/500587c16/f16011.png)'
- en: 'Figure 16-11: Transmitter schematic for Project 48'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图16-11：第48号项目的发射机电路图
- en: The receiver circuit and schematic for this project are identical to those used
    for Project 47.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目的接收机电路和电路图与第47号项目中的相同。
- en: The Transmitter Sketch
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发射机草图
- en: 'Now let’s examine the sketch for the transmitter. Enter and upload the following
    sketch to the Arduino with the transmitter circuit:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来查看发射机的草图。输入并上传以下草图到配有发射机电路的Arduino中：
- en: '[PRE5]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Our transmitter circuit operates in the same way as in Project 47, by first
    sending a character code for identification and then a control code to turn the
    receiver’s output on or off. In this project, however, the transmitter listens
    for a signal from the receiver, and once the receiver has completed the control
    instruction from the transmitter, the receiver sends a character code and control
    code back to the transmitter.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的发射机电路与第47号项目中的工作方式相同，首先发送一个字符编码用于识别，然后发送一个控制编码来打开或关闭接收机的输出。然而，在这个项目中，发射机会监听接收机的信号，一旦接收机完成了来自发射机的控制指令，接收机会将字符编码和控制编码返回给发射机。
- en: So at 1, we have a new function, `takeAction()`, that checks for the character
    code `DEF` from the receiver circuit. The receiver then sends a `1` if it has
    turned on its output pin or a `0` if the output has been turned off. Our transmitter
    circuit can then display this status by controlling the LED on digital pin 6 via
    the code at 2.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在1时，我们新增了一个函数`takeAction()`，用于检查来自接收机电路的字符编码`DEF`。接收机在其输出引脚打开时发送`1`，在输出关闭时发送`0`。我们的发射机电路可以通过控制数字引脚6上的LED来显示此状态，方法是通过2中的代码。
- en: The Receiver Sketch
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接收机草图
- en: 'Finally, let’s examine the sketch for the receiver. Enter and upload the following
    sketch to the Arduino with the receiver circuit:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们来看一下接收机的草图。输入并上传以下草图到配有接收机电路的Arduino中：
- en: '[PRE6]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Our receiver operates in the same manner as the one for Project 47, except in
    this case, the receiver sends back the character code `DEF` to the transmitter,
    followed by a `1` or a `0` to indicate that the output pin has been turned on
    or off. This is done at 1 using the `loraSend()` function.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的接收机工作原理与第47号项目中的接收机相同，唯一不同的是，接收机会将字符编码`DEF`发送回发射机，接着发送`1`或`0`，以指示输出引脚是否被打开或关闭。这一操作通过`loraSend()`函数在1时完成。
- en: At this point, you have two example projects that show how you can not only
    control digital output pins wirelessly across a greater distance than with the
    earlier projects but also confirm that the actions have taken place. You can now
    expand on these examples to create your own remote-control projects. But next,
    we’ll experiment with sending sensor data over a LoRa wireless link with Project
    49.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，你已经有了两个示例项目，展示了如何不仅能在比之前的项目更远的距离上无线控制数字输出引脚，还能确认操作是否已发生。现在你可以在这些示例的基础上扩展，创建你自己的遥控项目。不过接下来，我们将尝试通过LoRa无线链路发送传感器数据，项目49将展示这一实验。
- en: 'Project #49: Sending Remote Sensor Data Using LoRa Wireless'
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目#49：通过LoRa无线发送远程传感器数据
- en: This project builds on our previous efforts by using your computer to request
    temperature data from a remote sensor.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目基于我们之前的工作，通过计算机请求远程传感器的温度数据。
- en: The Transmitter Circuit Hardware
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发射器电路硬件
- en: 'The following hardware is required for the transmitter circuit:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 发射器电路所需的硬件如下：
- en: Arduino and USB cable
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino和USB电缆
- en: LoRa shield for Arduino
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino的LoRa扩展板
- en: This project uses the Serial Monitor on your PC for control, so the transmitter
    circuit is simply the Arduino and LoRa shield connected to the PC via the USB
    cable.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目使用PC上的串口监视器进行控制，因此发射器电路仅包括Arduino和LoRa扩展板，通过USB电缆连接到PC。
- en: The Receiver Circuit Hardware
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接收器电路硬件
- en: 'The following hardware is required for the receiver circuit:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 接收器电路所需的硬件如下：
- en: Arduino and USB cable
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino和USB电缆
- en: LoRa shield for Arduino
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino的LoRa扩展板
- en: TMP36 temperature sensor
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TMP36温度传感器
- en: Solderless breadboard
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无焊接面包板
- en: External power for Arduino
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino的外部电源
- en: Male-to-male jumper wires
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公对公跳线
- en: The Receiver Schematic
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接收器原理图
- en: Our circuit is simply the TMP36 temperature sensor connected to analog pin A0,
    along with the LoRa shield placed on the Arduino, as shown in [Figure 16-12](#figure16-12).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的电路简单地将TMP36温度传感器连接到模拟引脚A0，并将LoRa扩展板放置在Arduino上，如[图16-12](#figure16-12)所示。
- en: '![f16012](image_fi/500587c16/f16012.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![f16012](image_fi/500587c16/f16012.png)'
- en: 'Figure 16-12: Receiver schematic for Project 49'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图16-12：项目49的接收器原理图
- en: The receiver circuit may be some distance from the computer, so you can harness
    a USB power supply or the battery solution used in earlier projects.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 接收器电路可能距离计算机较远，因此你可以使用USB电源或之前项目中使用的电池解决方案。
- en: The Transmitter Sketch
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发射器草图
- en: 'Now let’s examine the sketch for the transmitter. Enter and upload the following
    sketch to the Arduino with the transmitter circuit:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们检查一下发射器的草图。将以下草图输入并上传到Arduino与发射器电路：
- en: '[PRE7]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As with the earlier projects in this chapter, we initialize the LoRa hardware
    and the Serial Monitor at 2. However, instead of hardware buttons, we use the
    Serial Monitor to accept commands from the user and send those to the receiver
    hardware. In this project, the user is prompted to enter `1` or `2` in the Serial
    Monitor’s input box to retrieve the temperature from the receiver hardware in
    Celsius or Fahrenheit, respectively. This happens at 3. The computer waits for
    user input at 4, then sends out either command to the receiver hardware via `loraSend()`
    at 5. Again, we use a three-character code to keep the transmission exclusively
    for the receiver board at 1.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章之前的项目一样，我们在2处初始化LoRa硬件和串口监视器。然而，这次我们不再使用硬件按钮，而是通过串口监视器接受用户命令，并将这些命令发送到接收器硬件。在本项目中，用户需要在串口监视器的输入框中输入`1`或`2`，分别获取来自接收器硬件的摄氏度或华氏度温度。这一操作发生在3处。计算机在4处等待用户输入，然后通过`loraSend()`在5处将相应命令发送给接收器硬件。同样，我们使用一个三字符代码确保传输仅限于接收器板1。
- en: The Receiver Sketch
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接收器草图
- en: 'Now let’s examine the sketch for the receiver. Enter and upload the following
    sketch to the Arduino with the receiver circuit:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们检查接收器的草图。将以下草图输入并上传到Arduino与接收器电路：
- en: '[PRE8]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Using the same method as in Project 48, our receiver hardware decodes the transmission
    from the transmitter to ensure the data is meant for it by checking the character
    code sent at 3. If this is correct, the receiver board calls one of either `loraSendC()`
    or `loraSendF()` at 4 or 5, respectively. Those two functions calculate the temperature
    from the TMP36 sensor and, between 1 and 2, send a string of text back to the
    transmitter board containing the temperature and measurement type.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与项目48相同的方法，我们的接收器硬件解码从发射器传输来的信号，以确保数据是发送给它的，通过检查在3处发送的字符代码。如果这是正确的，接收器板会分别在4或5调用`loraSendC()`或`loraSendF()`中的一个。这两个函数计算TMP36传感器的温度，并在1和2之间将包含温度和测量类型的文本字符串发送回发射器板。
- en: Once you have assembled the hardware for both circuits and uploaded both sketches,
    place the powered receiver circuit (with the sensor) where you’d like to measure
    temperature from your computer. Ensure the transmitter circuit is connected to
    the computer. Open the Serial Monitor in the IDE and follow the instructions to
    check the temperature. An example is shown in [Figure 16-13](#figure16-13).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你组装好两个电路的硬件并上传了两个草图，将带电的接收器电路（包括传感器）放置在你希望从计算机测量温度的位置。确保发射器电路已连接到计算机。在IDE中打开串口监视器，并按照指示检查温度。如[图16-13](#figure16-13)所示为示例。
- en: '![f16013](image_fi/500587c16/f16013.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![f16013](image_fi/500587c16/f16013.png)'
- en: 'Figure 16-13: Example output for Project 49'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图16-13：项目49的示例输出
- en: Looking Ahead
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展望未来
- en: This chapter showed how simple it is to control multi-Arduino systems remotely.
    For example, you can control digital outputs by sending characters from one Arduino
    to another, and you can use LoRa wireless technology to create more complex, multi-Arduino
    control systems that include data return. With the knowledge you’ve gained so
    far, many creative options are available to you.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 本章展示了远程控制多Arduino系统是多么简单。例如，你可以通过从一个Arduino向另一个Arduino发送字符来控制数字输出，使用LoRa无线技术创建更复杂的多Arduino控制系统，并且可以包括数据返回。通过你迄今为止获得的知识，许多创意选项都已向你开放。
- en: But there’s still much more to investigate in terms of wireless data transmission,
    so keep reading and working along with the examples as you learn to use simple
    television remote controls with the Arduino in the next chapter.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 但在无线数据传输方面仍有许多内容需要探讨，因此，在下一章学习如何使用简单的电视遥控器与Arduino配合时，继续阅读并跟随示例进行实践。
