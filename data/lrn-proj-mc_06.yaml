- en: '**6**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**6**'
- en: '**MAKING MINI-GAMES WITH IF STATEMENTS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用 if 语句制作迷你游戏**'
- en: '![image](graphics/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/common01.jpg)'
- en: In [Chapter 5](ch05.html#ch05), you learned how to ask questions in Python.
    You used comparison operators (like `==`, `!=`, `>`, `<`, and so on) and logical
    operators (`and`, `or`, `not`) to find out whether a condition or set of conditions
    evaluated to `True` or `False`. In this chapter, you’ll use the answers to these
    questions—the results of the conditions you test—to decide what code to run.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](ch05.html#ch05)中，你学会了如何在Python中提问。你使用了比较运算符（如`==`、`!=`、`>`、`<`等）和逻辑运算符（`and`、`or`、`not`）来判断条件或一组条件的真假。在本章中，你将利用这些问题的答案——你测试的条件的结果——来决定执行哪些代码。
- en: You make decisions based on conditions every day. Is it nighttime? If so, you
    wear your diamond armor and bring a sword to fight off monsters. If not, you might
    leave all your gear in your secret base. Are you hungry? If that’s true, you eat
    some bread or an apple. If not, you might go off on a grand adventure to work
    up an appetite. Just as you make decisions in everyday life, your programs need
    to do different tasks depending on a condition.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你每天都根据条件做决策。现在是夜晚吗？如果是，你就穿上钻石盔甲，带上剑来击退怪物。如果不是，你可能会将所有装备留在你的秘密基地。你饿了吗？如果是，你就吃一些面包或苹果。如果不是，你可能会去进行一场大冒险，以便增加食欲。就像你在日常生活中做决策一样，你的程序也需要根据条件执行不同的任务。
- en: We’ll use a bit of Python code to help your programs make decisions. `if` statements
    tell your program whether or not to run a particular piece of code. An `if` statement
    means “*If* this condition is true, run this code.” For example, you could check
    whether the player is standing in a forbidden room and turn the floor to lava
    if they are. Or, you could check whether they placed a certain block at a certain
    location and open a hidden door if they did. Using conditions and `if` statements,
    you can begin to make your own mini-games in Minecraft.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一些Python代码来帮助你的程序做出决策。`if`语句告诉你的程序是否运行某段特定的代码。`if`语句的意思是“*如果*这个条件为真，就运行这段代码。”例如，你可以检查玩家是否站在一个禁区内，如果是，则将地板变成熔岩。或者，你可以检查他们是否在特定位置放置了某个方块，如果放了，就打开一个隐藏的门。通过使用条件和`if`语句，你可以开始在Minecraft中制作你自己的迷你游戏。
- en: '**USING IF STATEMENTS**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用 if 语句**'
- en: Being able to control the execution of your program is a very powerful ability;
    in fact, it’s crucial to coding! Programmers sometimes call this concept *flow
    control*. The easiest way to add this kind of control is by using the simple `if`
    statement, which runs code when a condition is `True`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 能够控制程序的执行是一项非常强大的能力；事实上，它对编程至关重要！程序员有时称这一概念为*流程控制*。添加这种控制的最简单方法是使用简单的`if`语句，当条件为`True`时执行代码。
- en: 'An `if` statement has three parts:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句有三部分：'
- en: • The `if` operator
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: • `if`运算符
- en: • A condition to test
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: • 测试条件
- en: • A body of code to run if the condition is `True`
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果条件为`True`，则执行一段代码
- en: Let’s look at an `if` statement in action. The following code will print `"That's
    a lot of zombies."` only if there are more than 20 zombies. Otherwise, it won’t
    do anything.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个实际的`if`语句。以下代码只有在僵尸数量超过20时，才会打印出“That's a lot of zombies.”。否则，它什么也不做。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, `zombies > 20` is the condition we’re testing, and `print("That's a lot
    of zombies.")` is the body of the `if` statement; it’s the code that runs if `zombies
    > 20` is `True`. The colon (`:`) at the end of the `if` line tells Python that
    the next line will start the body of the `if` statement. The indentation tells
    Python which lines of code make up this body. *Indentation* means there is extra
    space at the beginning of a line of text. In Python you indent lines by four spaces.
    If we wanted to add more lines of code to run inside the `if` statement, we would
    put the same number of spaces in front of all of them, indenting them just like
    `print("That's a lot of zombies.")`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`zombies > 20`是我们要测试的条件，而`print("That's a lot of zombies.")`是`if`语句的主体；它是当`zombies
    > 20`为`True`时执行的代码。`if`语句行末的冒号（`:`）告诉Python接下来的一行将开始执行`if`语句的主体。缩进则告诉Python哪些代码行构成了这个主体。*缩进*是指在文本行的开头有额外的空格。在Python中，你通过四个空格来缩进代码行。如果我们想在`if`语句中添加更多的代码行，我们需要在它们前面加上相同数量的空格，就像`print("That's
    a lot of zombies.")`那样缩进。
- en: 'Try running this code a few times, testing each condition, and see what happens.
    For example, try entering a number that is less than 20, the number 20, and a
    number that is greater than 20\. Here is what happens if you enter 22:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试多次运行此代码，测试每个条件，看看会发生什么。例如，尝试输入一个小于20的数字，20，以及一个大于20的数字。以下是输入22时发生的情况：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Okay, the result makes sense. Let’s run it another time and see what happens
    when the condition isn’t met.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，结果很有道理。让我们再运行一次，看看当条件不满足时会发生什么。
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice that nothing happens if the condition is `False`. The body of the `if`
    statement is entirely ignored. An `if` statement will execute the code in its
    body only if the condition is `True`. When the `if` statement is finished, the
    program continues on the line after the `if` statement.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果条件是`False`，什么都不会发生。`if`语句的主体会被完全忽略。只有当条件为`True`时，`if`语句才会执行其主体中的代码。当`if`语句执行完毕后，程序会继续执行`if`语句后的代码。
- en: 'Let’s look at another example to better understand how this works. The following
    code uses an `if` statement to check whether a password is correct:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看另一个例子，以更好地理解它是如何工作的。以下代码使用`if`语句检查密码是否正确：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The expression after the `if` statement is the condition: `attempt == password`.
    The indented line after `if attempt == password:` is the `if` statement’s body:
    `print("Password is correct")`.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句后的表达式是条件：`attempt == password`。在`if attempt == password:`之后缩进的那一行是`if`语句的主体：`print("Password
    is correct")`。'
- en: The code will print `"Password is correct"` only if the value stored in the
    `attempt` variable is the same as the value in the `password` variable. If they
    are not the same, it will not print anything. The last line will run and print
    `"Program finished"` whether or not the body of the `if` statement runs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当`attempt`变量中存储的值与`password`变量中的值相同，代码才会打印`"Password is correct"`。如果它们不相同，什么也不会打印。最后一行代码会在`if`语句的主体是否执行都执行，并打印`"Program
    finished"`。
- en: Now let’s try something a little more explosive.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试一些稍微有点爆炸性的东西。
- en: '**MISSION #26: BLAST A CRATER**'
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务 #26：爆炸坑洞**'
- en: You’ve already learned how to make the player teleport and jump high. Now you’ll
    make the blocks around the player disappear.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学会了如何让玩家传送和跳得很高。现在，你将让玩家周围的方块消失。
- en: When the program runs, the blocks above, below, and around the player will turn
    into air. This power is very destructive, so be careful when you use it. To be
    safe, the program will ask the user whether they are sure they want to destroy
    the blocks, and it will only do so if the user’s answer is yes.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序运行时，玩家上方、下方以及四周的方块将变为空气。这种力量非常具有破坏性，所以使用时要小心。为了安全起见，程序会询问用户是否确定要销毁这些方块，只有在用户回答“是”时才会执行销毁操作。
- en: '[Listing 6-1](ch06.html#ch6ex1) creates a crater around the player by deleting
    all the blocks above, below, and around them. Then it posts `"Boom!"` to chat.
    Save this program as *crater.py* in a new folder called *ifStatements*.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表6-1](ch06.html#ch6ex1)通过删除玩家上方、下方以及四周的所有方块，创建一个坑洞。然后它在聊天中发布`"Boom!"`。将此程序保存为*crater.py*，并放在一个名为*ifStatements*的新文件夹中。'
- en: '*crater.py*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*crater.py*'
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 6-1: This code creates a crater, no matter what the user enters.*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表6-1：无论用户输入什么，这段代码都会创建一个坑洞。*'
- en: The `answer` variable uses the `input()` function to ask the user whether they
    want to create a crater. At the moment, however, the code will create a crater
    no matter what the user enters—`Y`, `N`, something else, or nothing.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`answer`变量使用`input()`函数询问用户是否想要创建一个坑洞。然而，此时无论用户输入什么——`Y`、`N`、其他内容或什么也不输入——代码都会创建一个坑洞。'
- en: To complete this program, you’ll need to add an `if` statement to check whether
    the user has input `Y` in response to the question. You can add that logic to
    the game at ➊. Remember that the user’s response is stored in the `answer` variable,
    so your `if` statement should check the `answer` variable. After you add your
    `if` statement, the program should only run the last three lines of code when
    the player inputs `Y`. To do this, you must indent these lines by four spaces.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个程序，你需要添加一个`if`语句，检查用户是否输入了`Y`来回应问题。你可以将这个逻辑添加到游戏中的➊处。记住，用户的回答存储在`answer`变量中，因此你的`if`语句应该检查`answer`变量。在你添加完`if`语句后，程序只有在玩家输入`Y`时才会运行最后三行代码。为了做到这一点，你必须将这三行代码缩进四个空格。
- en: Keep in mind that the very last argument of the `setBlocks()` function should
    be the block type you want to set. Here, the last argument is `0`, the block type
    for air. In other words, the crater is created using `setBlocks()` to set the
    blocks to air ➋, making it look like all the blocks around the player have been
    destroyed. By adding and subtracting 1 to the values of `pos.x`, `pos.y`, and
    `pos.z`, the code places air blocks around the player’s position as a 3 by 3 cube.
    This is the crater.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`setBlocks()`函数的最后一个参数应该是你要设置的方块类型。这里，最后一个参数是`0`，表示空气方块类型。换句话说，陨石坑是通过`setBlocks()`将方块设置为空气➋来创建的，这样看起来玩家周围的所有方块都被摧毁了。通过对`pos.x`、`pos.y`和`pos.z`的值加减1，代码在玩家的位置周围放置了一个3x3的空气方块立方体。这就是陨石坑。
- en: After you’ve made the changes to the program, save it and run it. The question
    `Create a Crater? Y/N` will appear in the Python shell. Enter either `Y` or `N`.
    Make sure the Y is a capital letter, or the program won’t work properly.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在对程序进行修改后，保存并运行。`Create a Crater? Y/N`这个问题会出现在Python命令行中。输入`Y`或`N`。确保输入的是大写字母Y，否则程序将无法正常运行。
- en: When the user enters `Y`, a crater will appear, as shown in [Figure 6-1](ch06.html#ch6fig1).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户输入`Y`时，一个陨石坑将出现，正如[图6-1](ch06.html#ch6fig1)所示。
- en: '![image](graphics/f06-01.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f06-01.jpg)'
- en: '*Figure 6-1: Boom! There’s a crater around me.*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-1：砰！我周围出现了一个陨石坑。*'
- en: '**BONUS OBJECTIVE: BUILD A HOUSE**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**附加目标：建造一个房子**'
- en: What else can you make this program do? Try changing the program to build a
    house around the player instead of creating a crater.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你还能让这个程序做什么呢？试试修改程序，让它围绕玩家建造一个房子，而不是创建一个陨石坑。
- en: '**ELSE STATEMENTS**'
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**ELSE语句**'
- en: Now we’ll look at a more advanced statement to use if we want to run a *different*
    piece of code when the `if` condition is `False`. That’s where the `else` statement
    comes in.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将介绍一个更高级的语句，如果我们想在`if`条件为`False`时运行*不同*的代码，可以使用`else`语句。
- en: An `else` statement works together with an `if` statement. First you write an
    `if` statement to run some code if the condition is `True`. After the `if`, you
    write an `else` statement to run other code when the condition evaluates to `False`.
    It’s like you’re saying, “If the condition is true, do this. Otherwise, do something
    else.”
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`else`语句与`if`语句一起工作。首先，你写一个`if`语句，在条件为`True`时执行一些代码。接着，写一个`else`语句，在条件为`False`时执行其他代码。就像你在说：“如果条件为真，做这个。否则，做别的事情。”'
- en: The following program will print `"Ahhhh! Zombies!"` if more than 20 zombies
    are in a room; otherwise, it will print `"You know, you zombies aren't so bad."`
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序将在房间里有超过20个僵尸时打印`"啊啊啊！僵尸！"`；否则，将打印`"你们这些僵尸还真不那么坏。" `
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Like the `if` statement, the `else` statement uses a colon and indentation to
    indicate which code belongs to the body of the `else` statement. But the `else`
    statement can’t be used by itself; an `if` must come before it. The `else` statement
    does not have its own condition; the body of the `else` statement runs only if
    the `if` statement’s condition (`zombies > 20` in this example) is not `True`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 像`if`语句一样，`else`语句使用冒号和缩进来表示哪些代码属于`else`语句的主体。但是`else`语句不能单独使用；它必须紧跟在`if`语句后面。`else`语句没有自己的条件；只有当`if`语句的条件（本例中是`zombies
    > 20`）为`False`时，`else`语句的主体才会执行。
- en: 'Going back to the earlier password example, we can add an `else` statement
    to print a message when the password is incorrect, like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 回到之前的密码示例，我们可以添加一个`else`语句，当密码不正确时打印一条信息，代码如下：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When the value of `attempt` matches the value of `password`, the condition will
    be `True`. The program runs the code that prints `"Password is correct."`
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当`attempt`的值与`password`的值匹配时，条件为`True`。程序会执行打印`"密码正确"`的代码。
- en: When `attempt` does not match `password`, the condition will be `False`. The
    program runs the code that prints `"Password is incorrect."`
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当`attempt`与`password`不匹配时，条件为`False`。程序会执行打印`"密码不正确"`的代码。
- en: 'What if an `else` statement is used without an `if` statement? For example,
    if a program had just these two lines:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有`if`语句，仅使用`else`语句会怎样？例如，如果程序只有这两行：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Python wouldn’t understand what was going on, and you’d get an error.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，Python将无法理解发生了什么，并且会报错。
- en: '**MISSION #27: PREVENT SMASHING, OR NOT**'
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务 #27: 防止撞击，或者不防**'
- en: 'In [Mission #17](ch05.html#ch05lev2sec01) ([page 82](ch05.html#page_82)), you
    made a program that stopped the player from smashing blocks by making the world
    immutable using `mc.setting("world_immutable", True)`. The program helped you
    protect your precious creations from accidents or vandals. But even though it
    was useful, the program wasn’t very flexible. Turning it off required a second
    program, which is pretty inconvenient!'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在[任务#17](ch05.html#ch05lev2sec01)（[第82页](ch05.html#page_82)）中，你写了一个程序，通过使用`mc.setting("world_immutable",
    True)`让世界变为不可变，阻止玩家破坏区块。这个程序帮助你保护了珍贵的创作免受事故或破坏者的侵害。但尽管它很有用，程序却不够灵活。关闭它需要另写一个程序，这样挺不方便的！
- en: Using an `if` statement, an `else` statement, and console input, you can make
    a program that turns immutable on and off. Your program will ask whether you want
    the blocks to be immutable and then set immutable to `True` or `False` depending
    on your response.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`if`语句、`else`语句和控制台输入，你可以制作一个程序来开关不可变设置。程序会询问你是否希望区块不可变，然后根据你的回答将不可变设置为`True`或`False`。
- en: 'Open IDLE and create a new file. Save the file as *immutableChoice.py* in the
    *ifStatements* folder. Follow these instructions to complete the program:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 打开IDLE并创建一个新文件。将文件保存为*immutableChoice.py*，并保存在*ifStatements*文件夹中。按照以下指示完成程序：
- en: 'The program needs to ask the user whether they want to make the blocks immutable:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 程序需要询问用户是否希望将区块设为不可变：
- en: '[PRE8]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Add this string as an argument inside `input()` and store the input in a variable
    called `answer`.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将这个字符串作为`input()`的参数，并将输入存储在名为`answer`的变量中。
- en: 'The program checks whether the value stored in the `answer` variable is `"Y"`.
    If it is, it runs the following code:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 程序检查`answer`变量中存储的值是否为`"Y"`。如果是，它将运行以下代码：
- en: '[PRE9]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Copy this code and put it in an `if` statement so it runs only if the value
    of the `answer` variable is equal to `"Y"`. Don’t forget to indent!
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将这段代码复制并放入`if`语句中，这样它只会在`answer`变量的值等于`"Y"`时运行。不要忘记缩进！
- en: The program runs the following code if the `answer` variable is not `"Y"`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`answer`变量的值不是`"Y"`，程序将运行以下代码。
- en: '[PRE10]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Copy this code and put it in an indented `else` statement.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将这段代码复制并放入一个缩进的`else`语句中。
- en: Save and run the program. When it asks whether or not you want to make the blocks
    immutable, type `Y` or `N` and press ENTER. Test the program. When you choose
    to make blocks immutable, they shouldn’t break; otherwise, they should be breakable.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并运行程序。当程序询问是否要将区块设为不可变时，输入`Y`或`N`并按回车键。测试程序。当你选择将区块设为不可变时，它们不应被破坏；否则，它们应该是可以被破坏的。
- en: '[Figure 6-2](ch06.html#ch6fig2) shows the output message and question in the
    shell.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[图6-2](ch06.html#ch6fig2)显示了终端中的输出信息和问题。'
- en: You’ll get the same result if you enter `"N"` as you will if you enter nonsensical
    input like `"banana"`. Why do you think this happens?
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你输入`"N"`，你将得到与输入无意义的内容（比如`"banana"`）时相同的结果。你认为为什么会发生这种情况？
- en: '![image](graphics/f06-02.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f06-02.jpg)'
- en: '*Figure 6-2: I can choose to make the world immutable, and now I can’t destroy
    any of the blocks.*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-2：我可以选择将世界设为不可变，现在我无法破坏任何区块。*'
- en: '**BONUS OBJECTIVE: A BETTER INTERFACE**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**附加目标：更好的界面**'
- en: We could make this program more user friendly by using Boolean operators to
    accept variations on `"Yes"` and `"No"`, such as lowercase `"yes"`, uppercase
    `"YES"`, and a single-character response `"y"`. Give it a shot!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用布尔运算符，让程序接受`"Yes"`和`"No"`的不同变体，比如小写的`"yes"`、大写的`"YES"`，以及单个字符的回答`"y"`，使得程序更友好。试试看吧！
- en: '**ELIF STATEMENTS**'
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**ELIF语句**'
- en: Using an `if` statement and an `else` statement, your program was able to run
    some code if a condition was `True` and different code if the condition was `False`.
    But what if you want more than two blocks of code to run?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`if`语句和`else`语句时，如果条件为`True`，程序可以运行一段代码；如果条件为`False`，则运行另一段代码。但如果你想运行多于两段代码怎么办？
- en: To do this, you can use an `else-if` statement, or `elif` in Python. First you
    write an `if` statement, then you write an `elif` statement, and then you write
    an `else` statement. When you use these statements together, you’re saying, “If
    a condition is `True`, run this code. Otherwise, if a second, different condition
    is `True`, run some other code. Finally, if neither of those two conditions is
    `True`, run some other code.”
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，你可以使用`else-if`语句，或在Python中使用`elif`。首先写一个`if`语句，然后写一个`elif`语句，最后写一个`else`语句。当你将这些语句一起使用时，你是在说：“如果某个条件为`True`，就运行这段代码。否则，如果第二个不同的条件为`True`，就运行另一段代码。最后，如果这两个条件都不为`True`，就运行另一段代码。”
- en: Let’s take a look at it. Say you’re deciding what flavor to buy at the ice cream
    shop. You might say, “If there’s any chocolate ice cream left, I’ll get that.
    If there isn’t chocolate, but there’s strawberry, I’ll get strawberry. If there
    isn’t chocolate or strawberry, I’ll get vanilla.”
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它。假设你正在决定在冰淇淋店买什么口味的冰淇淋。你可能会说：“如果还有巧克力冰淇淋，我就买那个。如果没有巧克力，但有草莓，我就买草莓。如果既没有巧克力也没有草莓，我就买香草。”
- en: 'In a program, this decision process looks like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个程序中，这个决策过程看起来是这样的：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The first two lines just set the stage for the scenario: we’ll assume that
    today, the ice cream shop doesn’t have any chocolate left but does have strawberry.
    So we set `hasChocolate` to `False` and `hasStrawberry` to `True`.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 前两行只是为场景设定基础：我们假设今天冰淇淋店没有剩下巧克力冰淇淋，但有草莓口味。所以我们将`hasChocolate`设置为`False`，`hasStrawberry`设置为`True`。
- en: 'Next is the logic of the decision process: an `if` statement prints `"Hooray!
    I''m getting chocolate."` if `hasChocolate` is `True`. But in this example, it’s
    `False`, so that message isn’t printed. Instead, the program goes on to the `elif`
    statement and tests whether `hasStrawberry` is `True`. Because it is, the code
    in the body of the `elif` statement runs and prints `"I''m getting the second
    best flavor, strawberry."`'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是决策过程的逻辑：如果`hasChocolate`为`True`，`if`语句会打印出`"Hooray! I'm getting chocolate."`。但是在这个例子中，它是`False`，所以这个信息不会被打印。相反，程序会进入`elif`语句，测试`hasStrawberry`是否为`True`。因为它为`True`，所以`elif`语句中的代码会执行，并打印出`"I'm
    getting the second best flavor, strawberry."`
- en: As you can see, this `elif` statement has its own condition and body. The `elif`
    statement executes only when the condition of the `if` statement is `False` and
    the condition of the `elif` statement is `True`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这个`elif`语句有它自己的条件和代码块。只有在`if`语句的条件为`False`并且`elif`语句的条件为`True`时，`elif`语句才会执行。
- en: Finally, the `else` statement after the `elif` statement executes when the `if`
    statement’s condition is `False` and the `elif` statement’s condition is also
    `False`. In this example, the `else` statement’s code would run if both `hasChocolate`
    and `hasStrawberry` were `False`, printing `"Vanilla is OK too, I guess."`
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`elif`语句之后的`else`语句会在`if`语句的条件为`False`且`elif`语句的条件也为`False`时执行。在这个例子中，如果`hasChocolate`和`hasStrawberry`都为`False`，则`else`语句的代码会执行，打印出`"Vanilla
    is OK too, I guess."`
- en: 'For another example, let’s go back to the program that printed `"Ahhhh! Zombies!"`
    if more than 20 zombies were in a room. We can add an `elif` statement to test
    another condition when the `if` statement’s condition is `False`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子，我们可以回到那个在房间里有超过20只僵尸时会打印出`"Ahhhh! Zombies!"`的程序。我们可以添加一个`elif`语句，在`if`语句的条件为`False`时测试另一个条件：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We add an `elif` statement to compare `zombies` and 0\. If `zombies == 0` is
    `True`, the code in the `elif` statement’s body prints `"No zombies here! Phew!"`
    If this `elif` statement’s condition is `False`, the code moves on to the `else`
    statement and prints `"You know, you zombies aren't so bad."`
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加一个`elif`语句来比较`zombies`和0。如果`zombies == 0`为`True`，则`elif`语句中的代码会打印出`"No zombies
    here! Phew!"`。如果这个`elif`语句的条件为`False`，代码会进入`else`语句并打印出`"You know, you zombies
    aren't so bad."`
- en: '**MISSION #28: OFFER A GIFT**'
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务 #28：提供礼物**'
- en: Let’s create a program that checks whether a certain block has a gift placed
    on it and outputs different responses to chat depending on what the gift is.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个程序，检查某个方块上是否放置了礼物，并根据礼物的不同输出不同的聊天回应。
- en: The program will allow you to place one of two different gifts. One gift is
    a diamond block, and because not everyone has that many diamond blocks, the other
    is a tree sapling.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序允许你放置两种不同的礼物之一。一个礼物是钻石块，因为并不是每个人都有那么多钻石块，另一个是树苗。
- en: '[Listing 6-2](ch06.html#ch6ex2) checks whether a block at position 10, 11,
    12 is a diamond block or a tree sapling or if there’s no gift. However, the program
    is not complete.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 6-2](ch06.html#ch6ex2)检查位置为10, 11, 12的方块是否是钻石块或树苗，或者没有礼物。但是，程序并不完整。'
- en: '*gift.py*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*gift.py*'
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 6-2: The start of the code that checks whether you’ve delivered a
    gift*'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 6-2：检查是否已经送出礼物的代码开始部分*'
- en: Create a new file in IDLE and save it as *gift.py* in the *ifStatements* folder.
    Copy [Listing 6-2](ch06.html#ch6ex2) into the file. The code that gets the block
    type has been done for you. The block type is stored in the `gift` variable. The
    `else` statement will run if neither a diamond block nor a tree sapling has been
    placed, and it will post a message to chat instructing the player to bring a gift
    to these coordinates. You can change the coordinates in the `x`, `y`, and `z`
    variables to any location you like.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IDLE 中创建一个新文件，并将其保存在 *ifStatements* 文件夹中的 *gift.py*。将 [清单 6-2](ch06.html#ch6ex2)
    复制到文件中。获取方块类型的代码已经为你写好。方块类型保存在 `gift` 变量中。如果没有放置钻石块或树苗，`else` 语句将会运行，并向聊天发送一条消息，提示玩家将礼物带到这些坐标。你可以将
    `x`、`y` 和 `z` 变量中的坐标更改为任何你喜欢的位置。
- en: 'To complete the program, follow these steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 完成程序，请按照以下步骤操作：
- en: 'Complete the `if` statement at ➊ so it checks whether the `gift` variable contains
    the value for a diamond block (57). If it does, make it post this message to chat:
    `"Thanks for the diamond."`'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成 ➊ 位置的 `if` 语句，检查 `gift` 变量是否包含钻石块（57）的值。如果是，发送以下消息到聊天：“感谢你的钻石。”
- en: 'Add an `elif` statement under the second comment at ➋ that checks whether the
    `gift` variable contains the value for a tree sapling (6). If it does, make it
    post this message to chat: `"I guess tree saplings are as good as diamonds..."`'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个注释下的 ➋ 位置添加一个 `elif` 语句，检查 `gift` 变量是否包含树苗（6）的值。如果包含，发送以下消息到聊天：“我猜树苗和钻石一样好...”
- en: After making the changes, save and run the program. Try putting a diamond block
    at the coordinates and see what happens. Do the same with a tree sapling, and
    also try leaving nothing at the coordinates. Don’t forget that the sapling needs
    to be planted in a dirt or grass block! Do you get the correct response in each
    situation? You’ll need to rerun the program each time to check that it works.
    [Figure 6-3](ch06.html#ch6fig3) shows my working program.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在做出更改后，保存并运行程序。试着在坐标处放置一个钻石块，看看会发生什么。也可以试试放一个树苗，或者什么都不放在这些坐标上。别忘了树苗需要种植在泥土块或草块上！每种情况你都能得到正确的响应吗？你每次都需要重新运行程序来检查它是否正常工作。[图
    6-3](ch06.html#ch6fig3) 显示了我的工作程序。
- en: '![image](graphics/f06-03.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f06-03.jpg)'
- en: '*Figure 6-3: I’ve placed a tree sapling as a gift.*'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-3：我把树苗作为礼物放置了。*'
- en: '**BONUS OBJECTIVE: PRAISE THE MELON GOD**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖励目标：赞美西瓜神**'
- en: You can use lots of different blocks in this mission. Try changing the code
    so it checks whether you’ve placed a gold block or a melon as a gift. Try writing
    code that destroys the gift block once you’ve placed it.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，你可以使用许多不同的方块。试着修改代码，检查你是否放置了一个金块或一个西瓜作为礼物。再试着写一个代码，放置礼物方块后将其销毁。
- en: '**CHAINING TOGETHER ELIF STATEMENTS**'
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**链式连接 `elif` 语句**'
- en: There is no limit to the number of `elif` statements that you can include with
    an `if` statement. You can have one `elif` statement or 100 `elif` statements.
    Python just evaluates them one after the other.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`elif` 语句的数量没有限制，你可以在一个 `if` 语句中包含一个或 100 个 `elif` 语句。Python 会逐一评估它们。'
- en: 'Here’s an example using the “number of zombies” program:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用“僵尸数量”程序的一个例子：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here we’ve added a new `elif` statement at ➊, right after the `if` statement,
    to check if more than 10 zombies are in the room. If there are, it prints `"There's
    just half a Minecraft zombie apocalypse."`; otherwise, the code moves on to the
    next `elif`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 位置，我们在 `if` 语句后添加了一个新的 `elif` 语句，检查房间里是否有超过 10 个僵尸。如果有，打印出“这就像半个Minecraft僵尸末日”；否则，代码继续检查下一个
    `elif`。
- en: The order of the `if` and `elif` statements is very important. If you put them
    in the wrong order, some of the code may never be reached, and your program will
    not run as expected.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`if` 和 `elif` 语句的顺序非常重要。如果它们的顺序错误，某些代码可能永远不会被执行，程序将无法按预期运行。'
- en: 'For example, if we swap the `if` statement’s condition with the first `elif`
    statement’s condition, we run into a problem:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们将 `if` 语句的条件与第一个 `elif` 语句的条件交换，我们会遇到问题：
- en: '[PRE15]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Why is this wrong? Let’s look at what happens when `zombies` is, say, 22\. Because
    22 is greater than 10, the first `if` statement’s condition, `zombies > 10`, is
    `True`, and the `if` statement’s code runs. Once this happens, none of the other
    `elif` and `else` statements will run. The program never reaches `elif zombies
    > 20` because it already ran the body of the `if` statement. This is a bug.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这是错误的？让我们看看当 `zombies` 是 22 时发生了什么。因为 22 大于 10，第一个 `if` 语句的条件 `zombies >
    10` 为 `True`，所以 `if` 语句的代码会执行。一旦执行了这个，其他的 `elif` 和 `else` 语句就不会执行了。程序永远不会到达 `elif
    zombies > 20`，因为它已经执行了 `if` 语句的主体。这是一个错误。
- en: If you ever get unexpected results from your `if` statements, always double-check
    that your `if` and `elif` statements are in the correct order.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从 `if` 语句中得到意外的结果，始终检查你的 `if` 和 `elif` 语句是否顺序正确。
- en: '**MISSION #29: TELEPORT TO THE RIGHT PLACE**'
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务 #29：传送到正确的位置**'
- en: When `if` and `elif` statements are in the wrong order, code you expect to run
    will not run, and code you don’t expect to run will run. This can cause weird
    bugs in your programs. To fix the program, you need to put the conditions in the
    right order. Let’s give this a try.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `if` 和 `elif` 语句顺序错误时，预期执行的代码不会执行，而不该执行的代码却会执行。这可能会导致程序出现奇怪的错误。要修复程序，你需要将条件按正确的顺序排列。我们来试试看。
- en: '[Listing 6-3](ch06.html#ch6ex3) won’t work. It’s supposed to teleport the player
    to different locations depending on how many points the user enters. The points
    match up to the correct locations, but it looks like the conditions are not in
    the right order.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[代码清单 6-3](ch06.html#ch6ex3) 不会工作。它应该根据用户输入的分数将玩家传送到不同的位置。分数与正确的位置相匹配，但条件似乎没有按正确的顺序排列。'
- en: The more points a player has, the better the location. Here’s the code. The
    conditions are set using `setPos()` for each location transport.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家分数越高，位置越好。这里是代码。条件是通过 `setPos()` 为每个位置传送设置的。
- en: '*teleportScore.py*'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '*teleportScore.py*'
- en: '[PRE16]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '*Listing 6-3: Depending on your points, you will teleport to a different location.*'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '*代码清单 6-3：根据你的分数，你将传送到不同的地点。*'
- en: There’s a separate condition for greater than 6 points, greater than 4 points,
    greater than 2 points, and then 2 or fewer points.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个单独的条件，用于检查超过 6 分、超过 4 分、超过 2 分以及 2 分或以下的情况。
- en: The last line, inside the `else` statement, won’t run unless the user inputs
    something totally weird, like a string of text instead of their points, or enters
    nothing at all.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行，在 `else` 语句内，除非用户输入一些完全异常的东西，比如输入文本字符串而不是他们的分数，或者根本不输入任何内容，否则是不会执行的。
- en: Create a new file in IDLE and save it as *teleportScore.py* in the *ifStatements*
    folder. Change the program so the conditions are in the correct order and all
    the locations can be reached. Test the program with different numbers of points
    to make sure the code for each teleport destination can run. [Figure 6-4](ch06.html#ch6fig4)
    shows the program not working.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IDLE 中创建一个新文件，并将其保存为 *teleportScore.py*，保存在 *ifStatements* 文件夹中。修改程序，使条件顺序正确，所有位置都能到达。使用不同的分数测试程序，确保每个传送目标的代码都能正常运行。[图
    6-4](ch06.html#ch6fig4) 显示了程序无法正常工作。
- en: '![image](graphics/f06-04.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f06-04.jpg)'
- en: '*Figure 6-4: I didn’t expect to end up here!*'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-4：我没想到会来到这里！*'
- en: Because the program doesn’t work at the moment, when I enter 5, it teleports
    me to the location for more than 2 points, even though I should go to the location
    for more than 4 points.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 由于程序当前无法正常工作，当我输入 5 时，它会将我传送到超过 2 分的位置，尽管我应该被传送到超过 4 分的位置。
- en: '**BONUS OBJECTIVE: BEAM ME UP, SCOTTY**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**附加目标：传送我，斯科特！**'
- en: Create a program that allows you to input a location you want to teleport to
    as a string, such as `"castle"`. Use `if` statements and `elif` statements to
    choose which location you want to teleport to. For example, `"sea fortress"` will
    teleport you to one location and `"tree house"` will teleport you to another.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个程序，允许你输入一个要传送到的地点作为字符串，比如 `"castle"`。使用 `if` 语句和 `elif` 语句选择你要传送到的位置。例如，`"sea
    fortress"` 会将你传送到一个地点，而 `"tree house"` 会将你传送到另一个地点。
- en: '**NESTED IF STATEMENTS**'
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**嵌套的 IF 语句**'
- en: Say you have an `if` statement, and if its condition is `True`, you want to
    test another condition (and run some code if this second condition is `True`).
    For example, if you’re trying to make the entrance to your home base extra secret,
    you might write some code that checks whether you’re standing on a switch. If
    that’s true, another line of code checks whether you’re holding the secret item
    that will unlock the door. How would you do that?
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个 `if` 语句，如果它的条件为 `True`，你想要测试另一个条件（并在第二个条件为 `True` 时运行一些代码）。例如，如果你想让家园基地的入口更加秘密，你可能会编写一些代码，检查你是否站在一个开关上。如果这是真的，另一行代码会检查你是否拿着可以解锁门的秘密物品。你会怎么做呢？
- en: You can put one `if` statement inside the body of another `if` statement. This
    is known as a *nested* `if` statement.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将一个 `if` 语句放在另一个 `if` 语句的主体内。这被称为 *嵌套* `if` 语句。
- en: '[Listing 6-4](ch06.html#ch6ex4) is an example of a nested `if` statement. A
    simple cash machine checks whether you have enough money and then asks you to
    confirm your withdrawal if you do. If you confirm, the program performs the withdrawal.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 6-4](ch06.html#ch6ex4) 是一个嵌套的 `if` 语句示例。一个简单的现金机检查你是否有足够的钱，如果有，它会要求你确认取款。如果你确认，程序会进行取款。'
- en: '[PRE17]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '*Listing 6-4: An imaginary cash machine written with Python*'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 6-4：一个用 Python 编写的假想现金机*'
- en: Notice that the second `if` statement is indented inside the first `if` statement.
    If the outer `if` statement’s condition ➊ is `True`, you have enough money in
    your account, and the line `confirm = input("Are you sure? ")` runs. Then, if
    the inner `if` statement’s condition ➋ is `True`, the code prints `"Here is your
    money."`
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，第二个 `if` 语句是缩进在第一个 `if` 语句内部的。如果外层 `if` 语句的条件 ➊ 为 `True`，说明你的账户里有足够的钱，接着
    `confirm = input("你确定吗？")` 这一行就会运行。然后，如果内层 `if` 语句的条件 ➋ 为 `True`，代码会输出 `"这是你的钱。"
    `
- en: '**MISSION #30: OPEN A SECRET PASSAGE**'
  id: totrans-135
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务 #30：打开一个秘密通道**'
- en: In this mission, you’ll expand on the previous example a bit. You’ll create
    a building with a secret passage that opens only when a diamond block is placed
    on a pedestal. When any other type of block is placed on the pedestal, the floor
    will turn to lava!
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，你将稍微扩展之前的示例。你将创建一个带有秘密通道的建筑，秘密通道只有在放置一个钻石块在基座上时才会打开。当基座上放置任何其他类型的方块时，地板将变成岩浆！
- en: First, build a building. To do this quickly, find the *building.py* program
    ([page 56](ch03.html#page_56)) in the *math* folder and run it. Don’t add a door
    to the building. Outside, where you want to code the entrance to the building,
    place a single block to represent the pedestal. When you place a diamond block
    on top of the pedestal, the code will open a secret entrance in the side of the
    building. [Listing 6-5](ch06.html#ch6ex5) provides some skeleton code that you
    can use to get started.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，建造一个建筑物。为了快速完成这项任务，找到 *math* 文件夹中的 *building.py* 程序（[第56页](ch03.html#page_56)）并运行它。不要在建筑物上添加门。外面，你想要编写建筑入口的地方，放置一个方块代表基座。当你把一个钻石块放到基座上时，代码会在建筑的侧面打开一个秘密入口。[清单
    6-5](ch06.html#ch6ex5)提供了一些框架代码，你可以用来开始。
- en: '*secretDoor.py*'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '*secretDoor.py*'
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '*Listing 6-5: The start of the code to open a secret door when you place a
    gift on a pedestal*'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 6-5：当你在基座上放置礼物时，打开秘密门的代码开始部分*'
- en: Create a new file in IDLE and save it as *secretDoor.py* in the *ifStatements*
    folder. Change the coordinates in this program to match the location where your
    diamond block key will need to be placed in your Minecraft world.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IDLE 中创建一个新文件，并将其保存为 *secretDoor.py*，并将其放在 *ifStatements* 文件夹中。修改程序中的坐标，以匹配你在
    Minecraft 世界中需要放置钻石块钥匙的位置。
- en: 'Copy [Listing 6-5](ch06.html#ch6ex5) and add code for these tasks:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 复制 [清单 6-5](ch06.html#ch6ex5) 并为以下任务添加代码：
- en: '• If a diamond block (57) is on the pedestal, open a secret passage to the
    secret room. (Hint: To create an opening in the building, try setting the blocks
    to air.)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果基座上是钻石块（57），打开通往秘密房间的秘密通道。（提示：要在建筑物中创建一个开口，可以尝试将方块设置为空气。）
- en: • When a block that is not diamond is on the pedestal, make the floor under
    the player turn to lava (10).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: • 当基座上放置的方块不是钻石块时，让玩家脚下的地板变成岩浆（10）。
- en: You’ll need to use a nested `if` statement to complete this program.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要使用嵌套的 `if` 语句来完成这个程序。
- en: Because this is a more complex program, you should build and test it in stages.
    When you’ve added a feature, run the program and make sure that part works before
    moving on. Debugging small code pieces is easier than fixing lengthy code pieces.
    [Figure 6-5](ch06.html#ch6fig5) shows the secret passage opening.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这是一个更复杂的程序，你应该分阶段进行构建和测试。当你添加了一个新特性时，运行程序并确保该部分功能正常后再继续。调试小块代码比修复冗长代码更容易。[图6-5](ch06.html#ch6fig5)展示了秘密通道的开启。
- en: '![image](graphics/f06-05.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f06-05.jpg)'
- en: '*Figure 6-5: The secret passage to the temple is now open.*'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-5：通往神庙的秘密通道现在已开启。*'
- en: '**BONUS OBJECTIVE: ESCALATOR**'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**附加目标：自动扶梯**'
- en: What else could you make by changing the *secretDoor.py* program? Could you
    make an automatic door that detects when the player is next to it or an escalator
    that automatically moves the player up some stairs when they stand at the bottom?
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 通过修改*secretDoor.py*程序，你还可以做些什么呢？你能做一个自动门，它可以检测玩家是否站在门旁边，或者做一个自动扶梯，当玩家站在楼梯底部时自动将他们推上楼梯吗？
- en: '**USING IF STATEMENTS TO TEST A RANGE OF VALUES**'
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用IF语句测试值的范围**'
- en: As you learned in [Chapter 5](ch05.html#ch05), you can determine whether one
    value is between two other values in Python. Because a range check evaluates to
    `True` or `False`, you can use a range check as the condition in an `if` statement,
    just like you’d use a simple less than/greater than or equal to/not equal to comparison.
    Any expression that evaluates to `True` or `False` can be a condition of an `if`
    statement.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在[第5章](ch05.html#ch05)中学到的，你可以在Python中判断一个值是否位于另两个值之间。因为范围检查的结果为`True`或`False`，你可以像使用简单的大小比较一样，将范围检查作为`if`语句的条件。任何计算结果为`True`或`False`的表达式都可以作为`if`语句的条件。
- en: Say you’ve spent all day gathering ingredients to bake some delicious Minecraft
    cakes. You find enough ingredients to bake 30 cakes, and now you want to sell
    the cakes. The person buying cakes from you must buy 1 cake but less than 30;
    otherwise, you won’t sell cakes to that person. They can’t hog all the cakes!
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你花了一整天时间收集材料来烤一些美味的Minecraft蛋糕。你找到了足够的材料来烤30个蛋糕，现在你想卖掉这些蛋糕。购买蛋糕的人必须购买1个蛋糕但少于30个，否则你不会卖蛋糕给他。他们不能霸占所有蛋糕！
- en: 'This code represents the cake situation:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码表示了蛋糕的情况：
- en: '[PRE19]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If the `cakes` variable has a value between 0 and 30, such as 15, we print `"Here
    are your 15 cakes."` ➊. Otherwise, we print a different message. If `cakes` has
    a value of 0, we print `"Don't you want some delicious cake?"` ➋ and if it’s greater
    than 30, we print `"That's too many cakes! Don't be selfish!"` ➌.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`cakes`变量的值在0和30之间，比如15，我们打印`"Here are your 15 cakes."` ➊。否则，我们打印一条不同的信息。如果`cakes`的值是0，我们打印`"Don't
    you want some delicious cake?"` ➋；如果大于30，我们打印`"That's too many cakes! Don't be
    selfish!"` ➌。
- en: 'We can test a more complicated expression by adding a Boolean operator. If
    I was really weird and didn’t want people to buy a quantity of bread between 20
    and 30, I could do this using the `not` operator:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过添加布尔运算符来测试一个更复杂的表达式。如果我真是个奇怪的人，不想让人们购买20到30个面包，我可以使用`not`运算符来实现：
- en: '[PRE20]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here I use a `not` operator and the greater than or equal to comparisons to
    test a range of values as the first condition. The range check determines whether
    the amount of bread people want to buy is between 20 and 30\. Then, the `not`
    flips a `True` to `False` and a `False` to `True`. So if `bread` is in the range,
    the overall expression evaluates to `False`, and we run the code in the `else`
    statement. If `bread` is not in the range between 20 and 30—say it’s 40—the overall
    expression is `True`, and we print `"Here are your 40 breads."`
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我使用了`not`运算符和大于或等于的比较来测试值的范围作为第一个条件。范围检查确定人们想买的面包数量是否在20到30之间。然后，`not`将`True`变为`False`，将`False`变为`True`。所以，如果`bread`在范围内，整个表达式的值为`False`，我们执行`else`语句中的代码。如果`bread`不在20到30的范围内——比如它是40——那么整个表达式为`True`，我们打印`"Here
    are your 40 breads."`
- en: If someone tries to buy 23 breads, I won’t let them. But 17 or 32 is just fine.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人试图购买23个面包，我是不会允许的。但17个或32个就没问题。
- en: '**MISSION #31: RESTRICT TELEPORT LOCATIONS**'
  id: totrans-161
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务 #31：限制传送位置**'
- en: Remember the teleport program you created back in [Chapter 2](ch02.html#ch02)?
    It was called *teleport.py*. In this mission, you’ll use range checks and `if`
    statements to limit where the player can teleport to. If you’re using Minecraft
    on the Raspberry Pi, there are places outside the game world that don’t exist,
    but your program will still let you teleport to them. If you’re using the desktop
    edition of Minecraft, your world is much bigger, so you don’t have the same restrictions
    as in the Pi edition of the game, but this program is still useful. For example,
    you could use it in a game of hide-and-seek to limit the area where players can
    hide.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 记得你在[第二章](ch02.html#ch02)创建的传送程序吗？它叫做*teleport.py*。在这个任务中，你将使用范围检查和`if`语句来限制玩家可以传送到的地方。如果你在
    Raspberry Pi 上使用 Minecraft，游戏世界之外有些地方是不存在的，但你的程序仍然允许你传送到这些地方。如果你在桌面版 Minecraft
    上玩，世界会更大，所以你不会像在 Pi 版游戏中那样受到同样的限制，但这个程序仍然很有用。例如，你可以在捉迷藏游戏中使用它来限制玩家可以藏身的区域。
- en: '[Listing 6-6](ch06.html#ch6ex6) is supposed to get the x-, y-, and z-coordinates
    from the user’s input and teleport them to that position. But the program isn’t
    complete.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 6-6](ch06.html#ch6ex6)本应从用户的输入中获取 x、y 和 z 坐标，并将玩家传送到该位置。但程序还没有完成。'
- en: '*teleportLimit.py*'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '*teleportLimit.py*'
- en: '[PRE21]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '*Listing 6-6: A program to limit the locations that the player can teleport
    to*'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 6-6：限制玩家可以传送到的地点的程序*'
- en: In order to restrict where the player can teleport to, we make a variable called
    `valid`. This variable will store a `True` or a `False` to represent whether or
    not all the coordinates in the destination are valid. We ask the user to input
    values for `x`, `y`, and `z`. Then we have an `if` statement check whether the
    `x` variable is not between –127 and 127\. If it’s not, this x-coordinate is invalid,
    and the `valid` variable is set to `False`.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 为了限制玩家可以传送到的地点，我们创建了一个叫做`valid`的变量。这个变量将存储一个`True`或`False`，表示目标地点的坐标是否有效。我们要求用户输入`x`、`y`和`z`的值。然后，我们使用`if`语句检查`x`变量是否不在–127到127的范围内。如果不在这个范围内，说明该
    x 坐标无效，`valid`变量被设置为`False`。
- en: When the program reaches the final `if` statement, `setPos()` will be called
    only if `valid` is `True`. And `valid` will be `True` only if all three conditions
    have been met. Otherwise, the player doesn’t get to teleport, and we post a chat
    message telling the user to enter a valid location.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序执行到最后一个`if`语句时，只有在`valid`为`True`时才会调用`setPos()`。而`valid`只有在三个条件都满足时才为`True`。否则，玩家无法传送，我们会发布一条聊天消息，告诉用户输入一个有效的地点。
- en: Create a new file in IDLE and copy [Listing 6-6](ch06.html#ch6ex6) into it.
    Save the program as *teleportLimit.py* in the *ifStatements* folder.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IDLE 中创建一个新文件并将[列表 6-6](ch06.html#ch6ex6)复制到其中。将程序保存为*teleportLimit.py*，并放在*ifStatements*文件夹中。
- en: Complete the program so it uses `if` statements and range checks on the `y`
    and `z` variables and sets `valid` to `False` if the values are not valid.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 完成程序，使其使用`if`语句和范围检查`y`和`z`变量，如果值无效，则将`valid`设置为`False`。
- en: When you think you’ve finished the program, run it. The program should teleport
    you when you enter values that are within the –127 to 127 range for the `x` and
    `z` variables and within the –63 to 63 range for the `y` variable. When you enter
    a value that isn’t in these ranges, the program shouldn’t teleport you. [Figure
    6-6](ch06.html#ch6fig6) shows how the game should look when the user enters an
    invalid number.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当你认为程序完成时，运行它。当你输入的`x`和`z`变量在–127到127的范围内，`y`变量在–63到63的范围内时，程序应该传送你。当你输入一个不在这些范围内的值时，程序不应该传送你。[图
    6-6](ch06.html#ch6fig6)展示了当用户输入无效数字时，游戏应该是什么样子。
- en: '![image](graphics/f06-06.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f06-06.jpg)'
- en: '*Figure 6-6: The* `z` *variable was too big, so I didn’t teleport.*'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-6：* `z` *变量太大了，所以我没有进行传送。*'
- en: '**BONUS OBJECTIVE: STAY ABOVE GROUND**'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**附加目标：保持在地面以上**'
- en: One of the problems with the teleport program is that it can teleport you underground,
    trapping you there. You can make changes to the program to stop the player from
    teleporting underground. Compare the y-coordinate that the user inputs with the
    `getHeight()` function to check that the player will teleport above ground and
    stop them if they will teleport underground.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 传送程序的一个问题是，它可能会把你传送到地下，将你困在那里。你可以修改程序，防止玩家被传送到地下。比较用户输入的 y 坐标与`getHeight()`函数，检查玩家是否会被传送到地下，如果会，就阻止传送。
- en: '**BOOLEAN OPERATORS AND IF STATEMENTS**'
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**布尔运算符和 if 语句**'
- en: 'In the previous mission, you used `not` in your `if` statements. You can also
    use `and` and `or`. In this case, the `if` statement will act just like it did
    with one simple condition: if the overall expression evaluates to `True`, the
    body of the statement will run. Here’s a program that asks someone if they have
    cake and whether they want to give us some cake:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个任务中，你使用了`not`操作符在`if`语句中。你还可以使用`and`和`or`。在这种情况下，`if`语句的行为和只有一个简单条件时一样：如果整体表达式为`True`，则执行语句体。这里有一个程序，询问某人是否有蛋糕，以及他们是否愿意给我们一些蛋糕：
- en: '[PRE22]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This code uses the `and` operator, so Python will only print `"Yay!"` if the
    person has cake (`hasCake == "Y"` is `True`) and is willing to share it (`wouldShare
    == "Y"` is `True`). If either of these comparisons is not `True`, the code inside
    the `else` statement will print `"Boo!"`
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码使用了`and`操作符，因此只有当这个人有蛋糕（`hasCake == "Y"`为`True`）并且愿意分享（`wouldShare == "Y"`为`True`）时，Python才会打印`"Yay!"`。如果其中任何一个比较结果不为`True`，`else`语句中的代码会打印`"Boo!"`。
- en: 'You can replace `and` with the `or` operator to make Python print `"Yay!"`
    if the person either has cake or would be willing to share it:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将`and`替换为`or`操作符，这样如果这个人有蛋糕或者愿意分享蛋糕，Python就会打印`"Yay!"`：
- en: '[PRE23]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If either `hasCake == "Y"` or `wouldShare == "Y"` is `True`, the whole expression
    evaluates to `True`, and we print `"Yay!"` The only time we print `"Boo!"` is
    if neither condition is `True`: the person doesn’t have cake and wouldn’t share
    it if they did.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`hasCake == "Y"`或`wouldShare == "Y"`为`True`，整个表达式的结果为`True`，然后我们会打印`"Yay!"`。只有当这两个条件都为`False`时，我们才会打印`"Boo!"`：即这个人没有蛋糕，且即使有也不愿分享。
- en: 'Let’s try using the `not` operator with an `if` statement:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试着在`if`语句中使用`not`操作符：
- en: '[PRE24]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This program asks the user to enter `Y` if they are wearing shoes and `N` if
    they aren’t. It stores the input in `wearingShoes`. Next is a comparison between
    `wearingShoes` and `"Y"` to see whether they’re equal. The `not` operator reverses
    the result of a comparison—`True` becomes `False` and `False` becomes `True`—so
    if the user entered `Y`, the comparison starts off `True` and `not` makes it `False`,
    making the overall expression `False`. We don’t print a message. If the user didn’t
    enter `Y`, the comparison is `False` and `not` makes it `True`. The overall expression
    evaluates to `True`, and we print `"You're not wearing shoes."`
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序要求用户输入`Y`表示他们穿着鞋子，输入`N`表示没有穿鞋子。程序将输入存储在`wearingShoes`变量中。接下来会将`wearingShoes`与`"Y"`进行比较，判断它们是否相等。`not`操作符会反转比较结果——`True`变成`False`，`False`变成`True`——因此，如果用户输入`Y`，比较结果会是`True`，而`not`会将其变为`False`，使得整个表达式为`False`。我们不会打印任何消息。如果用户没有输入`Y`，比较结果为`False`，`not`会将其变为`True`，整体表达式评估为`True`，然后我们会打印`"你没有穿鞋子。"`
- en: '**MISSION #32: TAKE A SHOWER**'
  id: totrans-186
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**任务 #32：洗个澡**'
- en: The best Minecraft houses have a lot of attention to detail. Many people include
    wooden flooring, fireplaces, and pictures in their houses to make them feel more
    like home. You’ll go one step further and make a working shower.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的Minecraft房屋非常注重细节。许多人会在房屋里加入木质地板、壁炉和画作，以让房子更有家的感觉。你将更进一步，制作一个可以使用的淋浴。
- en: To get the shower to work, you need to use range checks and Boolean operators.
    You’ll create a shower area, and when the player walks into the shower, the water
    will switch on. In other words, when the player walks within a range of coordinates,
    the program should create water blocks above them.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 要让淋浴工作，你需要使用范围检查和布尔操作符。你将创建一个淋浴区，当玩家走进淋浴区时，水流会开启。换句话说，当玩家走入特定坐标范围时，程序应该在玩家上方生成水块。
- en: '[Listing 6-7](ch06.html#ch6ex7) provides the basic structure of the program
    with a few lines of code to help you get started. It’s your job to fill in the
    rest.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 6-7](ch06.html#ch6ex7)提供了程序的基本结构，包含一些代码行来帮助你入门。剩下的部分需要你自己完成。'
- en: '*shower.py*'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '*shower.py*'
- en: '[PRE25]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '*Listing 6-7: The start of the shower program*'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 6-7：淋浴程序的开始部分*'
- en: Copy [Listing 6-7](ch06.html#ch6ex7) and save it as *shower.py* in the *ifStatements*
    folder.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 复制[列表 6-7](ch06.html#ch6ex7)并将其保存为*shower.py*，放入*ifStatements*文件夹中。
- en: To finish the program, add the coordinates for your shower in the `shwrX`, `shwrY`,
    and `shwrZ` variables ➊. Next, add the size of the shower in the `width`, `height`,
    and `length` variables ➋. I’ve included a default value of 5, but you should change
    this to make your shower the size you want it to be.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成程序，首先将淋浴的坐标添加到`shwrX`、`shwrY`和`shwrZ`变量中 ➊。接下来，将淋浴的尺寸添加到`width`、`height`和`length`变量中
    ➋。我已经设置了默认值为5，但你应该根据需要调整，使淋浴的尺寸符合你的要求。
- en: 'Finish the `if` statement so it checks whether the `y` and `z` variables are
    within the shower area ➌. I’ve included the check for the `x` position to help
    you out (`shwrX < x < shwrX + width`). The expressions for the `y` and `z` positions
    are similar to this. Hint: You’ll want to combine all these checks using `and`.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 完成`if`语句，以检查`y`和`z`变量是否在淋浴区域内 ➌。我已经为`x`位置包含了检查帮助你完成（`shwrX < x < shwrX + width`）。`y`和`z`位置的表达式与此类似。提示：你需要用`and`将所有这些检查结合起来。
- en: The shower is switched on and off using the `setBlocks()` function ➍. The blocks
    are set to water (block ID 8) to switch on the shower and air (block ID 0) to
    switch off the shower.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 淋浴的开关是通过`setBlocks()`函数来控制的 ➍。当将方块设置为水（方块 ID 8）时，淋浴开启；将方块设置为空气（方块 ID 0）时，淋浴关闭。
- en: The `setBlocks()` functions in the last `if`/`else` statement are broken across
    two lines because their arguments are very long. Python allows you to do this.
    They could be written on a single line; I wrote them on two lines just to make
    them easier to read.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个`if`/`else`语句中的`setBlocks()`函数被分成两行，因为它们的参数很长。Python允许你这样做。它们本来可以写在一行上，我把它们分成两行只是为了让它们更易于阅读。
- en: '[Figure 6-7](ch06.html#ch6fig7) shows my shower working.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 6-7](ch06.html#ch6fig7)展示了我的淋浴工作情况。'
- en: '![image](graphics/f06-07.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f06-07.jpg)'
- en: '*Figure 6-7: Here I am, having a shower.*'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-7：这是我正在洗澡。*'
- en: When you run the program, it will create water above you if you’re standing
    in the shower. The water will not stop until you leave the shower and run the
    program again. Have fun!
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行程序时，如果站在淋浴下方，程序会在你上方生成水流。水流不会停止，直到你离开淋浴并重新运行程序。玩得开心！
- en: '**BONUS OBJECTIVE: SAVE WATER**'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**额外目标：节水**'
- en: Add a time limit that turns off the shower after a set amount of time.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个时间限制，在设定时间后自动关闭淋浴。
- en: '**WHAT YOU LEARNED**'
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: Your programs can now make decisions. In this chapter, you learned how to use
    conditions with `if` statements, `else` statements, and `elif` statements. In
    [Chapter 7](ch07.html#ch07), you’ll learn about *while loops*. Like `if` statements,
    `while` loops help your program decide what to do and when. But unlike `if` and
    `else` statements—which you use to run some code if a condition is true and different
    code if it’s not true—`while` loops run code *while* a condition is true and keep
    running it repeatedly until the condition becomes false.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 你的程序现在可以做决策了。在这一章中，你学会了如何使用`if`语句、`else`语句和`elif`语句进行条件判断。在[第七章](ch07.html#ch07)，你将学习*while
    循环*。像`if`语句一样，`while`循环帮助你的程序决定做什么以及何时做。但是与`if`和`else`语句不同——你使用它们来运行一些代码，如果条件为真则运行，如果条件不为真则运行其他代码——`while`循环会在条件为真时运行代码，并不断重复运行，直到条件变为假。
