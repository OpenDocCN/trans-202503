- en: '**10'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**10'
- en: EXPERIMENTAL DESIGN**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**实验设计**'
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: The *scientific method* is the backbone of science. It involves the creation
    of theories from hypotheses that are tested through experiments and supported
    by evidence gleaned from those experiments. In this chapter, we’ll explore the
    design of experiments, or *experimental design*, a foundational part of the scientific
    method. Randomness is critical to successful experimental design for two main
    reasons. First, many measurements, regardless of the field, involve uncertainty
    or other factors outside of the researcher’s control, called *random noise*. We
    use randomness in experimental design to combat noise, like fighting fire with
    fire. Second, randomness makes the results conform to the expectations of statistics.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*科学方法*是科学的基石。它涉及从假设中创造理论，通过实验进行测试，并通过从实验中获得的证据支持这些理论。在本章中，我们将探讨实验设计，或者说*实验设计*，这是科学方法的基础部分。随机性对于成功的实验设计至关重要，主要有两个原因。首先，无论哪个领域，许多测量都涉及不确定性或其他超出研究人员控制的因素，称为*随机噪声*。我们在实验设计中使用随机性来应对噪声，就像用火对抗火一样。其次，随机性使得实验结果符合统计学的预期。'
- en: This chapter uses simulation ([Chapter 3](ch03.xhtml)) to explore three common
    approaches to randomization in experimental design. Our running example mimics
    medical research, but the concepts involved apply everywhere.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章通过模拟（[第3章](ch03.xhtml)）来探讨实验设计中三种常见的随机化方法。我们的示例模仿了医学研究，但所涉及的概念适用于各个领域。
- en: '**Randomization in Experiments**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**实验中的随机化**'
- en: Say a researcher wants to know the general public’s opinion regarding a ballot
    proposal to enact a noise ordinance restricting loud parties after 8 PM. He decides
    to use a phone survey, picking 100 names at random from the phone book and calling
    each on a Wednesday afternoon. He gets 64 answering machines, 36 pickups, and
    17 willing to talk. Of those 17, 15 support the ordinance and 2 oppose it. Are
    these results a fair representation of the general public’s stance on this issue?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一位研究员想了解公众对于一项关于实施噪音法令的选票提案的看法，该法令旨在限制晚上8点后举办的吵闹派对。他决定通过电话调查，随机从电话簿中挑选100个名字，并在一个星期三下午给每个人打电话。他得到了64个答录机留言，36个接通电话，且有17人愿意交谈。在这17人中，15人支持该法令，2人反对。
    这些结果能否公正地反映公众对于这一问题的立场？
- en: I suspect your answer is no because there are many possible sources of bias
    in the results. The researcher used the phone book, which generally lists only
    landlines; relied on those called to be willing to offer their opinion; and called
    on a weekday in the afternoon.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我怀疑你的答案是否定的，因为结果中可能有许多偏差来源。研究员使用了电话簿，而电话簿通常只列出固定电话；依赖被叫者愿意提供意见；并且在工作日的下午进行电话调查。
- en: His sample is strongly biased toward retired people who tend to be older and
    (stereotypically) less inclined to have parties, so his results do not necessarily
    reflect the population as a whole. His sample excludes the group most likely to
    be affected by the ordinance—young people who use cell phones and were probably
    at school or work during the time he collected his data.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 他的样本严重偏向于退休人员，这些人往往年纪较大，且（通常）不太倾向于举办派对，因此他的结果并不一定反映整体人群的情况。他的样本排除了最有可能受到法令影响的群体——年轻人，他们通常使用手机，并且在他收集数据的时间段内可能正处于学校或工作中。
- en: Avoiding such *sample bias* is an excellent reason to use randomness when conducting
    experiments. However, bias in surveys and polling is tough to correct and often
    leads to contrary results. More subtle, and perhaps more dangerous, is sample
    bias in selecting cohorts for medical studies.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 避免这种*样本偏差*是进行实验时使用随机性的一个重要原因。然而，调查和投票中的偏差很难修正，且常常导致相反的结果。更微妙且可能更危险的是，医学研究中在选择群体时的样本偏差。
- en: 'The code in *bad_sample.py* generates a population where individuals are a
    combination of four randomly selected characteristics: age, income, smoker or
    not, and the average number of alcoholic drinks per week. The characteristics
    are linked to the person’s age, so an older person is likelier to have a higher
    income, not smoke, and drink less alcohol.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*bad_sample.py* 中的代码生成了一个包含四个随机选择特征的个体群体：年龄、收入、是否吸烟以及每周平均饮酒量。这些特征与个体的年龄相关，因此年纪较大的人更有可能收入较高、不吸烟且饮酒较少。'
- en: 'The `Population` function generates a population of individuals as a NumPy
    array:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`Population` 函数生成一个作为 NumPy 数组的个体群体：'
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The code loops append four-element lists of characteristics, each derived from
    the selected `age`. Notice, `age` is in years, `income` is in thousands, `smoker`
    is binary, and `drink` is average number of alcoholic drinks per week.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 代码通过循环附加四元组特征列表，每个特征列表都是根据选择的`age`（年龄）派生的。请注意，`age`的单位是年，`income`（收入）是千元，`smoker`（吸烟者）是二元变量，`drink`（饮酒量）是每周平均饮酒次数。
- en: 'The code selects a random subset of the population to simulate a random sample
    as a cohort for a medical study. For example, here’s one run of *bad_sample.py*:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码从总体中随机选择一个子集，以模拟一个医学研究中的随机样本。例如，以下是*bad_sample.py*的一次运行：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The population size is 1,000, from which we randomly select 10\. The `1` argument
    samples once. As usual, the randomness source and seed follow.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 总体规模是1,000，我们从中随机选择10个样本。`1`参数表示采样一次。像往常一样，随机源和种子跟随其后。
- en: We sort the output by age, income, smoker, and drink. The first column shows
    the mean of these values for the entire population. The second is the mean for
    the 10-person random sample. The values in parentheses are t-test results where
    `t` is the *t* statistic and `p` the p-value. A significant difference between
    the population and sample produces a low p-value. The sign of the *t* statistic
    is such that a positive *t* signifies that the population mean exceeds the sample
    mean.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们根据年龄、收入、吸烟情况和饮酒情况对结果进行排序。第一列显示的是整个总体的这些值的均值。第二列是10人随机样本的均值。括号中的值是t检验结果，其中`t`是*t*统计量，`p`是p值。总体和样本之间的显著差异会产生一个低p值。*t*统计量的符号使得正的*t*表示总体均值超过样本均值。
- en: In this case, the 10-person random sample was similar to the population regarding
    drinking and overall age. However, income was different, which might impact the
    results of a study that claims this sample is a suitable stand-in for the general
    population.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，10人的随机样本在饮酒和总体年龄方面与总体相似。然而，收入有所不同，这可能会影响那些宣称此样本能代表总体的研究结果。
- en: 'Let’s run the same command again:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次运行相同的命令：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This random sample is significantly older than the population and is consequently
    much less likely to smoke. Try a few runs of *bad_sample.py*. While some samples
    are similar to the population, others deviate significantly.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个随机样本明显比总体年龄大，因此吸烟的可能性要小得多。尝试几次运行*bad_sample.py*。虽然有些样本与总体相似，但其他样本则显著偏离。
- en: 'Run *bad_sample.py*, but change the number of samples from 1 to 40:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 运行*bad_sample.py*，但将样本数量从1改为40：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Each person in the population is a 4-tuple (age, income, smoker, drink). As
    such, they become a point in a four-dimensional space. The entire population becomes
    a single point in space if we consider the means of the individual age, income,
    smoker, and drink characters. The *bad_sample.py* file reports the mean (± standard
    error) Euclidean distance between the mean point of the population and the mean
    point of the sample, for each of the 40 samples taken. In this case, with a sample
    size of 10, the mean distance was 6.37 ± 0.50.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 总体中的每个人都是一个四元组（年龄、收入、吸烟、饮酒）。因此，他们在四维空间中成为一个点。如果我们考虑个体年龄、收入、吸烟和饮酒特征的均值，那么整个总体就变成了空间中的一个点。*bad_sample.py*文件报告了总体均值点与样本均值点之间的均值（±标准误）欧几里得距离，对于每个40个样本的采样而言。在这种情况下，样本量为10时，均值距离为6.37
    ± 0.50。
- en: 'Let’s increase the sample size to 100:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将样本大小增加到100：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The mean distance between the population and the samples decreases. If we have
    a larger sample, it should be a better representation of the population as a whole.
    This effect is the motivation behind working with as much data as possible, both
    for scientific research and machine learning models.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 总体与样本之间的均值距离会减少。如果我们有更大的样本，它应该能更好地代表整个总体。这个效应是科研和机器学习模型中尽可能使用大量数据的动机所在。
- en: The file *bad_sample_test.py* repeats the process for a population of 10,000
    and sample sizes from 10 to 5,000\. For each sample size, we collect 40 samples.
    The results are amenable to plotting, as [Figure 10-1](ch010.xhtml#ch010fig01)
    illustrates.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 文件*bad_sample_test.py*对10,000人的总体和从10到5,000的样本量重复此过程。对于每个样本量，我们收集40个样本。结果适合绘制图形，如[图10-1](ch010.xhtml#ch010fig01)所示。
- en: '![Image](../images/10fig01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/10fig01.jpg)'
- en: '*Figure 10-1: The Euclidean distance from the population mean and sample mean
    as a function of the sample size*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-1：总体均值与样本均值之间的欧几里得距离与样本量的关系*'
- en: The *x*-axis in [Figure 10-1](ch010.xhtml#ch010fig01) is the number of samples
    in each set. We plot the average deviation of the mean of those samples from the
    population mean with error bars representing the standard error. I included end
    caps on the error bars to make the range easier to spot. Each point is the mean
    over 40 population-sample pairs.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 10-1](ch010.xhtml#ch010fig01)中的 *x* 轴表示每个数据集中的样本数量。我们绘制了这些样本均值与总体均值的平均偏差，并用误差条表示标准误差。我在误差条上添加了端点，以便更容易看到范围。每个点是基于40对总体-样本的均值计算得出的。'
- en: Larger sample sizes lead to a smaller distance between the population and sample
    means, indicating that larger samples are more likely to be better representations
    of the population than smaller samples. Note that the error bars shrink as the
    sample size increases. The noise in the samples, or the deviation from the population
    mean, drops to nearly zero.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 更大的样本量导致总体均值和样本均值之间的差距变小，表明较大的样本更可能是总体的更好代表。注意，随着样本量的增加，误差条变得更小。样本中的噪声，或与总体均值的偏差，几乎降至零。
- en: The error bars for a sample size of 10 are large, and the mean deviation is
    about 7, roughly seven times the mean deviation for samples of size 500\. Notice
    also how quickly the curve decreases as the sample size increases. A large sample
    size might not be necessary for many experiments, but the strength of the effect
    being investigated influences sample size choice. More is always better.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 样本量为10时的误差条很大，均值偏差约为7，约为样本量500时均值偏差的七倍。还要注意，随着样本量的增加，曲线下降得非常快。对于许多实验来说，可能不需要特别大的样本量，但研究的效应强度会影响样本量的选择。更多的样本总是更好的。
- en: Experiments often report mean results along with the standard deviation or standard
    error of the mean. Then they perform a significance test, like a t-test; if the
    p-value is below the (arbitrary) threshold of 0.05, they declare victory and label
    the result as statistically significant. However, this is only part of the story.
    If the sample sizes are substantial, as might be the case in some cohort studies
    based on widely collected health data, then it’s entirely possible that the result
    is *p* < 0.05, but, because of the large cohort, the *effect size* as measured
    by Cohen’s *d* is small. In other words, the effect is real but perhaps relatively
    meaningless in practice because the effect size is small. The moral of the story
    is to report effect sizes whenever possible.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 实验通常会报告均值结果以及均值的标准差或标准误差。接着，他们会进行显著性检验，比如t检验；如果p值低于（任意设定的）0.05阈值，他们就宣布结果显著，并标记为统计学上显著。然而，这只是故事的一部分。如果样本量很大，比如在一些基于广泛收集健康数据的队列研究中，那么结果可能会是
    *p* < 0.05，但由于样本量庞大，基于Cohen的 *d* 测量的 *效应大小* 可能很小。换句话说，效果虽然真实存在，但由于效应大小较小，可能在实际中并不具有太大意义。故事的启示是：尽可能报告效应大小。
- en: The noise in [Figure 10-1](ch010.xhtml#ch010fig01) for small sample sizes justifies
    my rant in the previous paragraph. If the effect is small, and we expect a slight
    deviation from a population mean, then a small sample size is unlikely to capture
    the effect because it’s swamped by the inherent noise in the sample itself. We’ll
    return to this notion later in the chapter when using experimental design techniques
    to compensate for selection bias.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 10-1](ch010.xhtml#ch010fig01)中小样本量的噪声证明了我在前一段中提到的问题。如果效应很小，并且我们预计与总体均值的偏差很小，那么小样本量不太可能捕捉到这种效应，因为它被样本自身固有的噪声所掩盖。我们将在本章后面使用实验设计技术来补偿选择偏差时再次讨论这个概念。'
- en: Finally, the very thing that makes small sample sizes in [Figure 10-1](ch010.xhtml#ch010fig01)
    a poor choice for research purposes is what drives evolution via genetic drift.
    In [Chapter 3](ch03.xhtml), we saw that the random mix of characters in a subpopulation
    separated by chance from a larger population led to a drift that ultimately produced
    a new species. In that sense, evolution is a poor researcher but a clever tinkerer
    able to take sample bias and turn it into something useful in the long run.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，正是[图 10-1](ch010.xhtml#ch010fig01)中小样本量使其成为不适合研究的选择的原因，也是驱动进化的基因漂变的原因。在[第3章](ch03.xhtml)中，我们看到，某个亚群体中的性状随机混合，并且偶然与更大群体隔离，导致了基因漂变，最终形成了新物种。从这个意义上讲，进化虽然是一个糟糕的研究者，但却是一个聪明的修补匠，能够利用样本偏差，并将其转化为长期有用的东西。
- en: Now that we know sample bias can lead to poor research results, let’s try to
    find ways to compensate for it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们知道样本偏差可能导致糟糕的研究结果，那么我们就来探讨一下如何补偿这种偏差。
- en: Randomization in experimental design comes in three broad categories. The code
    we’ll use throughout the remainder of the chapter supports all three approaches.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 实验设计中的随机化分为三大类。我们将在本章剩余部分使用的代码支持所有三种方法。
- en: '***Simple***'
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***简单***'
- en: 'If the experiment is testing one outcome—such as the effectiveness of a particular
    treatment—we might build the treatment and control groups by recruiting members
    one at a time, flipping a coin to decide group assignment. We can simulate such
    *simple randomization* with a snippet of Python code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果实验正在测试一个结果——例如某种特定治疗的有效性——我们可能会通过一次招募一个成员来建立治疗组和对照组，并通过掷硬币决定组的分配。我们可以用一段 Python
    代码来模拟这种 *简单随机化*：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We configure `RE` to return coin flips, 0 or 1\. Both calls return 10 flips
    each. Therefore, we have the assignments for 20 participants: 11 for the treatment
    group and 9 for the control group.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们配置 `RE` 来返回硬币翻转结果，0 或 1。每次调用返回 10 次翻转。因此，我们为 20 名参与者生成了分配：治疗组 11 名，对照组 9 名。
- en: Simple randomization seems like a good approach, but it has an obvious drawback,
    similar to what we observed when working with *bad_sample.py*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 简单随机化看起来是一个不错的方法，但它有一个明显的缺点，类似于我们在处理 *bad_sample.py* 时观察到的情况。
- en: 'Let’s try one more assignment for an experiment with 10 participants:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再试一次为 10 名参与者进行分配的实验：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If we follow simple randomization, we’ll have seven in the treatment group and
    only three in the control group—this seems unwise. Note that this isn’t a contrived
    example; the output is from a single run of that line of code.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们遵循简单随机化，我们会得到治疗组 7 人，对照组只有 3 人——这似乎不太明智。请注意，这不是一个人为的例子；该输出来自于那段代码的单次运行。
- en: 'While simple randomization isn’t the best approach when the study size is small,
    it often works well for larger study sizes:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然简单随机化在研究规模较小时不是最佳方法，但它通常在较大规模的研究中效果很好：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this case, the difference between treatment and control group size is a smaller
    fraction of the total study size, so we might expect each group to be similar.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，治疗组和对照组大小之间的差异只是总研究规模的一小部分，因此我们可以预期每组会相似。
- en: Simple randomization’s weakness, especially for small study sizes, is that the
    number of subjects in the treatment and control groups might be highly imbalanced.
    We can remedy this with block randomization.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 简单随机化的弱点，尤其是在小规模研究中，是治疗组和对照组中的受试者数量可能会高度不平衡。我们可以通过区块随机化来弥补这一点。
- en: '***Block***'
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***区块***'
- en: '*Block randomization* ensures that the number of subjects in each group is
    the same. For a binary experiment with only two groups—treatment and control—we
    first select a block size, usually between 4 and 6\. We’ll use a constant block
    size of 4 for our example. Next, create all possible blocks of four subjects where
    the assignments are balanced. For us, this means all combinations of four-digit
    binary numbers where the number of 1s and 0s is the same:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*区块随机化* 确保每组中的受试者数量相同。对于一个只有两组——治疗组和对照组——的二项实验，我们首先选择一个区块大小，通常在 4 到 6 之间。我们将在示例中使用固定的区块大小
    4。接下来，创建所有可能的四个受试者的区块，其中分配是平衡的。对我们来说，这意味着所有四位二进制数字的组合，其中 1 和 0 的数量相同：'
- en: 1100, 1010, 1001, 0110, 0101, 0011
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 1100, 1010, 1001, 0110, 0101, 0011
- en: Each block has two 1s and two 0s.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 每个区块有两个 1 和两个 0。
- en: We select as many blocks as needed to cover the subjects to generate the final
    group assignments. For completely balanced groups, the number of subjects must
    be a multiple of the block size, in this case, a multiple of four. So, for 32
    subjects total, we need a sequence of eight blocks because 32 / 4 = 8\. We randomly
    select the eight blocks from the set, but no matter which blocks we select, the
    total number of 1s and 0s will be the same.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择足够多的区块来覆盖受试者，以生成最终的组分配。为了实现完全平衡的组，受试者数量必须是区块大小的倍数，在这种情况下是四的倍数。所以，对于 32 名受试者，总共需要八个区块，因为
    32 / 4 = 8。我们从区块集随机选择这八个区块，但无论选择哪些区块，1 和 0 的总数都会相同。
- en: 'For example, here’s a randomly selected sequence of eight blocks:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下面是一个随机选择的八个区块的序列：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: There are 16 subjects assigned to both the treatment and the control groups.
    Run the code again and the sequence will be different, but the number assigned
    to each group is still 16\. Apply the sequence to the 32 subjects selected for
    the study, perhaps by matching the assigned subject ID number in order with the
    sequence. See [Table 10-1](ch010.xhtml#ch010tab01).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有16名受试者被分配到治疗组和对照组。再次运行代码时，顺序会有所不同，但每组分配的人数仍然是16。将这个顺序应用到选定的32名受试者中，可能通过按顺序匹配受试者的ID号来实现。参见[表10-1](ch010.xhtml#ch010tab01)。
- en: '**Table 10-1:** Matching Subject ID and Assigned Group'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**表10-1：** 匹配受试者ID与分配的组别'
- en: '|  | **0** | **1** | **2** | **3** | **4** | **5** | **6** | **7** | **. .
    .** |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '|  | **0** | **1** | **2** | **3** | **4** | **5** | **6** | **7** | **. .
    .** |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| **Subject** | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | . . . |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| **受试者** | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | . . . |'
- en: '| **Group** | 1 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | . . . |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| **组别** | 1 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | . . . |'
- en: This continues for all 32 subjects.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这一过程持续进行，直到所有32名受试者都被分配完毕。
- en: Block randomization is an improvement over simple randomization in that it balances
    the number of subjects in the treatment and control groups. However, neither approach
    pays attention to other characteristics that may impact or mask treatment effects.
    If the outcome of the treatment is dramatic and broadly applicable, both simple
    and block randomization will show it. But if the treatment effect is weaker or
    relevant only to a specific demographic, then neither approach on its own is desirable.
    Enter stratified randomization.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 区组随机化比简单随机化有优势，因为它平衡了治疗组和对照组中的受试者数量。然而，这两种方法都没有关注可能影响或掩盖治疗效果的其他特征。如果治疗效果显著并且广泛适用，那么简单随机化和区组随机化都能反映这一点。但是，如果治疗效果较弱或仅对特定人群相关，那么单独使用任何一种方法都是不理想的。于是，分层随机化应运而生。
- en: '***Stratified***'
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***分层***'
- en: In *stratified randomization*, we assign subjects to treatment and control groups
    such that each group contains a consistent mix of subjects with other characteristics,
    called *covariates*, that we (the experimenters) believe are likely to influence
    the results. For example, if we use a block design for a research project that
    tests running endurance after taking a supplement for three months, and our treatment
    group happens to have an abundance of non-smokers under age 25, there will likely
    be a strong difference in endurance between the treatment and control groups at
    the end of the experiment.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *分层随机化* 中，我们将受试者分配到治疗组和对照组，使得每个组包含具有其他特征（即*协变量*）的均衡受试者，这些特征是我们（实验者）认为可能影响结果的。例如，如果我们为一个研究项目设计了一个区组设计，旨在测试补充剂服用三个月后的耐力，而我们的治疗组恰好有大量25岁以下的不吸烟者，那么在实验结束时，治疗组与对照组之间的耐力差异可能会很大。
- en: Stratified randomization manages the group composition as much as possible by
    matching the covariates of the controls to the treatment group.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 分层随机化尽可能通过将对照组的协变量与治疗组匹配来管理组的组成。
- en: There are different approaches to stratified randomization. In our simulation,
    we’ll pick a treatment group subject at random from a large population of potential
    subjects. Based on the covariates for that subject, we’ll search for a matching
    subject to put in the control group. This way, we have balanced numbers in the
    treatment and control groups, and we’ll know that every person in the treatment
    group has a matched control to make the overall characteristics of both groups
    the same. In other words, we’ll adjust for variation in the covariates.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 分层随机化有不同的实施方法。在我们的模拟中，我们将从一个大范围的潜在受试者群体中随机挑选一个治疗组受试者。根据该受试者的协变量，我们将寻找一个匹配的受试者，放入对照组。这样，我们就能确保治疗组和对照组中的受试者数量平衡，而且我们知道每个治疗组的受试者都有一个匹配的对照组，以使两组的整体特征相同。换句话说，我们将调整协变量的差异。
- en: Our experience with *bad_sample.py* demonstrated that small study sizes are
    susceptible to dramatic variation in factors like age, income, smoking, and drinking.
    These are the covariates we’ll use in our simulation.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过 *bad_sample.py* 的经验发现，小规模研究容易受到年龄、收入、吸烟和饮酒等因素的显著变化影响。这些因素就是我们在模拟中使用的协变量。
- en: '**Defining the Simulation**'
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**定义模拟**'
- en: The remainder of the chapter works with the code in *design.py*. As always,
    I recommend reading the code before continuing. We’ll do a detailed walkthrough
    in the next section; in this section, we’ll define what we hope to accomplish
    with the simulation.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的其余部分将使用*design.py*中的代码。像往常一样，我建议在继续之前先阅读代码。我们将在下一部分进行详细讲解；在这一部分中，我们将定义希望通过模拟实现的目标。
- en: 'Here’s the scenario: we want to evaluate the impact a novel supplement has
    on overall health after one year of use. To do this, we first select a treatment
    group that takes the supplement for a year. Then, we compare their overall health
    score to the score of a control group that did not take the supplement.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是场景设定：我们希望评估一种新型补充剂对健康的影响，使用一年后的效果。为此，我们首先选择一个治疗组，该组在一年内服用补充剂。然后，我们将他们的总体健康评分与没有服用补充剂的对照组进行比较。
- en: '**NOTE**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Modern clinical trials often use* placebos*, or “fake” treatments, with the
    control group. Here the placebo would be a sugar pill that looks like the supplement.
    Neither the participants nor the researchers would be aware of who received what,
    thereby making the study double-blind. Alternatively, the control group might
    not be told anything about the supplement group. They would be queried or tested
    at the beginning of the study and again at the end, with no placebo given. While
    we’ll use the latter approach, either will work in this case.*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*现代临床试验通常会使用*安慰剂*，即“假”治疗，作为对照组。在这种情况下，安慰剂通常是看起来像补充剂的糖丸。无论是参与者还是研究人员，都无法知道谁接受了什么治疗，这样可以使研究保持双盲设计。另一种方法是，对照组可能完全不知情补充剂组的情况。在这种情况下，他们会在研究开始和结束时接受调查或测试，但不会给与安慰剂。虽然我们会使用后一种方法，但两种方法在此情境下都适用。*'
- en: The simulation is rigged; there will always be a positive health benefit for
    the treatment group. The strength of the effect is under our control. Naturally,
    there is no supplement; the point of the simulation is to understand how each
    of the three experimental design choices affects the experiment’s outcome. Is
    it easy to detect the treatment effect? How convinced might we be if we see an
    improvement that the measured effect is real? We’ll seek to answer these questions.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟是有偏的；治疗组总是会有正向的健康效益。效应的强度由我们控制。显然，没有补充剂；模拟的目的是了解三种实验设计选择如何影响实验的结果。治疗效应容易被检测到吗？如果我们看到有改善，我们会多么相信这一测量效应是真实的？我们将尝试回答这些问题。
- en: 'As we did with *bad_sample.py*, we’ll generate populations of individuals using
    the same covariates: age, income, smoking, and drinking. Unlike *bad_sample.py*,
    we won’t use age to influence the other covariates, and we’ll immediately place
    covariates into bins. In other words, we won’t say this person is 48 or 11; instead,
    we’ll select from three age bins, meaning age will be 0, 1, or 2\. We’ll do the
    same for income and drinks per week. Smoking is binary, 0 or 1.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在*bad_sample.py*中所做的那样，我们将使用相同的协变量生成个体人群：年龄、收入、吸烟和饮酒。与*bad_sample.py*不同，我们不会使用年龄来影响其他协变量，而是立即将协变量分入不同的类别。换句话说，我们不会说某个人是48岁或11岁；相反，我们会从三个年龄类别中选择，即年龄将是0、1或2。收入和每周饮酒量也会进行同样的处理。吸烟是二元的，0或1。
- en: Each run of the code accumulates statistics for a user-selected number of experiments.
    We randomly generate a population, and select treatment and control groups according
    to the desired randomization scheme. We then apply the treatment (supplement),
    and use the health score for both groups to generate metrics. When all experiments
    are complete, we use the collected information to create output that provides
    insight into how well the randomization scheme worked.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 每次运行代码都会累积用户选择的实验次数的统计数据。我们随机生成一个人群，并根据所需的随机化方案选择治疗组和对照组。然后，我们施加治疗（补充剂），并使用两个组的健康评分生成度量指标。当所有实验完成后，我们使用收集到的信息来创建输出，提供对随机化方案效果的洞察。
- en: 'As with all simulations, we must be careful to convince ourselves that the
    thing being simulated is a fair approximation of reality to the level we require.
    Remember Box’s adage: all models are wrong, but some are useful.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有模拟一样，我们必须小心确保所模拟的事物在所需的程度上是现实的合理近似。记住Box的名言：所有模型都是错误的，但有些模型是有用的。
- en: '**Implementing the Simulation**'
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**实现模拟**'
- en: 'Let’s understand the essential parts of *design.py*, beginning with the main
    loop near the bottom of the file. Then, as needed, we’ll discuss functions that
    loop calls. After that comes the code to analyze the results. Algorithmically,
    the main loop repeats the following for the desired number of experiments (`nsimulations`):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们理解一下*design.py*的关键部分，从文件底部的主要循环开始。然后，根据需要，我们将讨论调用循环的函数。接下来是分析结果的代码。从算法角度看，主要循环会按照期望的实验次数（`nsimulations`）重复以下步骤：
- en: Create a population (a list of `Person` objects).
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个人口（`Person`对象的列表）。
- en: Select `control` and `treatment` cohorts according to the user-supplied randomization
    scheme (`typ`).
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据用户提供的随机化方案（`typ`）选择`control`和`treatment`组。
- en: Apply the treatment to the `treatment` group by calling the `Treat` method,
    passing the desired treatment effect size (`beta`).
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用`Treat`方法并传递期望的治疗效应大小（`beta`），将处理应用于`treatment`组。
- en: Accumulate stats on the `control` and `treatment` cohorts. This includes the
    per-subject health score and the average value of each covariate.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 累计`control`和`treatment`组的统计信息。这包括每个受试者的健康评分以及每个协变量的平均值。
- en: Append the collected data to the `results` list, with each element being a dictionary
    that holds the results for that simulated experiment.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将收集到的数据添加到`results`列表中，每个元素是一个字典，包含该模拟实验的结果。
- en: The main loop is in [Listing 10-1](ch010.xhtml#ch010list01).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 主要循环位于[清单 10-1](ch010.xhtml#ch010list01)中。
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 10-1: The main loop*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 10-1：主要循环*'
- en: There are five code paragraphs. The first creates `pop`, a list of `Person`
    objects from which we select `control` and `treatment` subjects.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 有五段代码。第一段创建了`pop`，这是一个`Person`对象的列表，我们从中选择`control`和`treatment`组的受试者。
- en: The second code paragraph, a single line, selects the proper randomization function
    passing the population and the total number of subjects in the experiment (`nsubj`).
    For `Block` and `Stratified` randomization, the number of subjects in each group
    is always half the desired total. Both `control` and `treatment` are lists of
    `Person` objects selected from `pop`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 第二段代码，只有一行，选择适当的随机化函数，传递人口和实验中的受试者总数（`nsubj`）。对于`Block`和`Stratified`随机化，每组的受试者数量始终是所需总数的一半。`control`和`treatment`都是从`pop`中选择的`Person`对象列表。
- en: The next code paragraph calls the `Treat` method on each subject in the `treatment`
    group. The argument, `beta`, [0, 1), is the user-supplied treatment effect size,
    where a higher `beta` implies a stronger positive treatment effect. In other words,
    the supplement’s effectiveness improves as `beta` increases.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 下一段代码对`treatment`组中的每个受试者调用`Treat`方法。参数`beta`，[0, 1)，是用户提供的治疗效应大小，其中较高的`beta`意味着更强的正向治疗效应。换句话说，随着`beta`的增加，补充剂的效果提高。
- en: The fourth code paragraph calculates the per-subject health scores and covariate
    averages for the `control` and `treatment` groups.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 第四段代码计算`control`和`treatment`组的每个受试者健康评分和协变量均值。
- en: The last code paragraph appends the results of this experiment to the `results`
    list. The call to `ttest_ind` performs a t-test between the treatment and control
    health scores while `Cohen_d` calculates Cohen’s *d* to measure the effect size.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一段代码将此实验的结果附加到`results`列表中。调用`ttest_ind`对治疗组和对照组的健康评分进行t检验，而`Cohen_d`计算Cohen的*d*值来衡量效应大小。
- en: Let’s explore the supporting cast called by the main loop, followed by each
    randomization function. We want to simulate the latter correctly.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索由主要循环调用的辅助函数，接下来是每个随机化函数。我们希望正确模拟后者。
- en: '***Functions and Classes***'
  id: totrans-96
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***函数和类***'
- en: Populations are lists of `Person` instances ([Listing 10-2](ch010.xhtml#ch010list02)).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 人口是`Person`实例的列表（[清单 10-2](ch010.xhtml#ch010list02)）。
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 10-2: The* Person *class*'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 10-2：* Person *类*'
- en: 'A person is a collection of five characteristics. Three of them are integers
    in [0, 2]: `age`, `income`, and `drink`. Notice the call to the globally defined
    `rng`, an instance of the `RE` class according to the supplied randomness source
    and seed. The `smoker` characteristic is binary, so a person has a 20 percent
    chance of being a smoker. The fifth characteristic, `adj`, is a random float in
    [–1, 1]. We’ll learn why we use this binning scheme in the next section.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一个人是五个特征的集合。其中三个特征是[0, 2]范围内的整数：`age`、`income`和`drink`。注意调用了全局定义的`rng`，它是`RE`类的实例，依据提供的随机源和种子进行初始化。`smoker`特征是二进制的，因此一个人有20%的概率是吸烟者。第五个特征`adj`是一个[–1,
    1]范围内的随机浮点数。我们将在下一节中学习为什么使用这种分箱方案。
- en: 'The `Health` method returns a float indicating the person’s overall health:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`Health` 方法返回一个浮动值，表示一个人的整体健康状况：'
- en: '`Health` = 3 × (2 – `age`) + 2 × `income` – 2 × `smoker` – `drink` + `adj`'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`Health` = 3 × (2 – `age`) + 2 × `income` – 2 × `smoker` – `drink` + `adj`'
- en: Better health (a higher float) is associated with younger age, higher income
    bracket, not being a smoker, and minimized drinking, plus the random adjustment.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的健康（更高的浮动值）与较年轻的年龄、更高的收入水平、不吸烟以及尽量减少饮酒相关，还包括随机调整。
- en: The `Treat` method applies the treatment by altering `adj` based on `beta`,
    the desired treatment effect. It does this by increasing `adj` by three times
    a random draw from a binomial distribution using a fixed number of trials (300).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`Treat` 方法通过根据期望治疗效果 `beta` 修改 `adj` 来应用治疗。它通过将 `adj` 增加三倍来自二项分布的随机抽样结果（使用固定试验次数
    300）来实现。'
- en: We haven’t worked with binomial distributions before. If there’s an event with
    a probability *p* of happening on any given trial—think of flipping a loaded coin
    with probability *p* of landing heads up—and there are *n* trials, then the number
    of successful events in *n* trials follows a binomial distribution for an expected
    number of outcomes, [0, *n*].
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以前没有处理过二项分布。如果某个事件的发生概率在每次试验中为 *p*，可以想象为掷一枚带有偏向的硬币，正面朝上的概率为 *p*，并且有 *n* 次试验，那么在
    *n* 次试验中，成功事件的次数将遵循一个二项分布，预期的结果范围是 [0, *n*]。
- en: For example, if the probability of an event is *p* = 0.7, or 70 percent, and
    there are *n* = 10 trials, then the expected number of events for repetitions
    follows the distribution in [Figure 10-2](ch010.xhtml#ch010fig02).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果事件的发生概率 *p* = 0.7（即 70%），并且有 *n* = 10 次试验，那么在重复实验中，事件的预期次数将遵循[图 10-2](ch010.xhtml#ch010fig02)中的分布。
- en: '![Image](../images/10fig02.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/10fig02.jpg)'
- en: '*Figure 10-2: The binomial distribution for 10 trials and 70 percent probability
    of success per trial*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-2：10 次试验，每次试验成功概率为 70% 的二项分布*'
- en: The most frequent number of successes in 10 trials at 70 percent probability
    of success is 7, as we might expect. However, about 2.5 percent of the time, every
    trial was successful.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在 10 次试验中，每次试验成功概率为 70% 时，最常见的成功次数是 7，正如我们所预期的那样。然而，大约 2.5% 的时间内，每次试验都成功了。
- en: As the probability of success increases, so does the number of possible successful
    events over a given number of trials. In `Treat`, we scale the number of successful
    trials for probability `beta` by 300; thus, the entire expression becomes a number
    in [0, 1], which we multiply by 3 and add to `adj`. When the number of trials
    is large, the binomial distribution looks like a narrow normal distribution, where
    the treatment effect is narrowly centered on the supplied `beta` value.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 随着成功概率的增加，在给定次数试验中可能的成功事件数量也会增加。在 `Treat` 中，我们将成功试验的次数按 300 次概率 `beta` 进行缩放，因此整个表达式变为
    [0, 1] 之间的一个数，我们将其乘以 3 并加到 `adj` 上。当试验次数很大时，二项分布看起来就像一个窄的正态分布，其中治疗效应集中在提供的 `beta`
    值附近。
- en: The `binomial` function simulates a draw from a binomial distribution using
    the uniform distribution supplied by `rng`. This algorithm is inefficient because
    it uses many calls to `rng` to return one sample from the desired binomial distribution.
    Still, it’s good enough for us ([Listing 10-3](ch010.xhtml#ch010list03)).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`binomial` 函数使用由 `rng` 提供的均匀分布模拟从二项分布中抽取样本。这个算法效率不高，因为它使用了多次对 `rng` 的调用来返回一个来自目标二项分布的样本。但对我们来说，这已经足够了（见[清单
    10-3](ch010.xhtml#ch010list03)）。'
- en: '[PRE11]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 10-3: Sampling from a binomial distribution*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 10-3：从二项分布中采样*'
- en: The number of successful trials is in `k`. The conditional return and assignment
    to `p` makes use of symmetry in the binomial distribution to return the proper
    sample for any desired probability of success for a given probability (`a`).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 成功试验的次数保存在 `k` 中。条件返回和对 `p` 的赋值利用了二项分布的对称性，返回任何给定成功概率（`a`）的目标样本。
- en: The main loop calls two more functions, `Cohen_d` and `Summarize`, as in [Listing
    10-4](ch010.xhtml#ch010list04).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 主循环调用了另外两个函数，`Cohen_d` 和 `Summarize`，如同在[清单 10-4](ch010.xhtml#ch010list04)中所示。
- en: '[PRE12]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 10-4: Additional helper functions*'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 10-4：附加辅助函数*'
- en: The `Cohen_d` function measures the effect size by calculating the difference
    in the means of two datasets along with the square root of their averaged variances.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cohen_d` 函数通过计算两个数据集的均值差异以及它们平均方差的平方根来衡量效应大小。'
- en: The `Summarize` function queries a collection of subjects from either the control
    or treatment group to return a vector of subject health scores along with the
    mean age, income, smoke, and drink values over the subjects.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`Summarize` 函数从治疗组或对照组中查询一组对象，并返回一个包含对象健康评分、平均年龄、收入、吸烟和饮酒值的向量。'
- en: Let’s get to the heart of the matter and discuss the different randomization
    schemes themselves.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨，讨论一下不同的随机化方案。
- en: '***Schemes***'
  id: totrans-121
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***方案***'
- en: '[Listing 10-5](ch010.xhtml#ch010list05) uses simple randomization to flip a
    coin, assigning selected subjects to either the treatment or control group.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 10-5](ch010.xhtml#ch010list05) 使用简单随机化来掷硬币，将选定的对象分配到治疗组或对照组。'
- en: '[PRE13]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 10-5: Simple random assignment*'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 10-5：简单随机分配*'
- en: The `Simple` function first generates a random ordering of the population. This
    isn’t strictly necessary, as we randomly generated `pop`, but we shouldn’t assume
    that if we don’t need to.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`Simple` 函数首先生成群体的随机排序。严格来说，这不是必需的，因为我们已经随机生成了 `pop`，但我们不应该假设如果不需要也可以不做此操作。'
- en: The `for` loop picks subjects sequentially and, based on the coin flip, assigns
    them to the treatment or the control group. Note that the coin flip means the
    number of subjects in each group might not be the same. When done, we return both
    lists.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 循环按顺序挑选对象，并根据掷硬币的结果将它们分配到治疗组或对照组。注意，掷硬币的结果意味着每个组中的对象数量可能不相同。完成后，我们返回两个列表。'
- en: Block randomization ensures balanced treatment and control group sizes, as shown
    in [Listing 10-6](ch010.xhtml#ch010list06).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 区块随机化确保治疗组和对照组的大小平衡，如[清单 10-6](ch010.xhtml#ch010list06)所示。
- en: '[PRE14]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*Listing 10-6: Block randomization*'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 10-6：区块随机化*'
- en: The first line of `Block` uses integer division to set `ns` to the nearest multiple
    of 4 less than or equal to `nsubj`. Then come the block definitions as strings
    of binary numbers. These blocks are the six ways we can split four items evenly
    among two groups, treatment (1) and control (0).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`Block` 的第一行使用整数除法将 `ns` 设置为不超过 `nsubj` 的最接近的 4 的倍数。接下来是作为二进制数字字符串的区块定义。这些区块是我们将四个项目均匀分配到两个组（治疗组（1）和对照组（0））的六种方式。'
- en: We create the `seq` string with the number of blocks (`nblocks`) by randomly
    concatenating block definitions until the string is `ns` characters long.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建 `seq` 字符串，包含区块数（`nblocks`），通过随机拼接区块定义，直到字符串长度达到 `ns` 字符。
- en: The final `for` loop mimics `Simple` in randomizing the order of `pop` before
    assigning subjects to treatment and control groups based on the current character
    of `seq`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的 `for` 循环模拟了 `Simple`，在根据当前 `seq` 的特征将对象分配到治疗组和对照组之前，对 `pop` 的顺序进行随机化。
- en: Our approach to stratified randomization assigns a random subject from the population
    to the treatment group, searches the population for an unassigned person with
    the same characteristics, and assigns them to the control group. This way, both
    groups are balanced in number and in overall characteristics. In code, this becomes
    [Listing 10-7](ch010.xhtml#ch010list07).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的分层随机化方法是从群体中随机选取一名对象进入治疗组，然后在群体中寻找一名未分配且具有相同特征的人，将其分配到对照组。通过这种方式，两个组在数量和总体特征上都得到了平衡。在代码中，这对应于[清单
    10-7](ch010.xhtml#ch010list07)。
- en: '[PRE15]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*Listing 10-7: Stratified randomization*'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 10-7：分层随机化*'
- en: '[Listing 10-7](ch010.xhtml#ch010list07) creates a flag vector, `selected`,
    to mark members of the population already assigned to a group. The `while` loop
    then runs until the treatment group contains half the requested number of subjects.
    The body of the `while` loop sets `n` to the index of an unselected member of
    the population, who becomes a member of the treatment group. We update `selected`
    once `n` is found, and append the person to the treatment group (`t`).'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 10-7](ch010.xhtml#ch010list07) 创建了一个标志向量 `selected`，用于标记已经分配到某组的群体成员。然后
    `while` 循环运行，直到治疗组包含所请求数量的一半对象。`while` 循环的主体将 `n` 设置为群体中未选择的成员的索引，该成员将成为治疗组的一员。一旦找到
    `n`，我们更新 `selected`，并将该成员添加到治疗组（`t`）。'
- en: Next, we find another unselected member of the population who has characteristics
    matching those of the person we just added to the treatment group; this is why
    the `Person` class uses bins for characteristics. There are only 3 × 3 × 2 × 3
    = 54 possible combinations of characters. With a large population, we’re virtually
    assured of finding a match, which happens when the `match` embedded function returns
    `True`. After we append the match to the control group, the outer `while` loop
    continues until it assigns all subjects.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们找到了另一位未选择的群体成员，其特征与我们刚刚加入治疗组的人的特征相匹配；这就是`Person`类使用特征分类的原因。共有3 × 3 × 2
    × 3 = 54种可能的特征组合。在一个大规模的群体中，我们几乎可以确保找到匹配，这发生在`match`内嵌函数返回`True`时。当我们将匹配项添加到对照组后，外层的`while`循环继续，直到为所有受试者分配完毕。
- en: The remaining code in *design.py* analyzes the results of multiple experiments.
    While I won’t walk through it, I’ll describe the analysis in the next section.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '*design.py*中的其余代码分析了多个实验的结果。虽然我不会逐行讲解，但我会在下一节描述分析内容。'
- en: '**Exploring the Simulation**'
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**探索模拟**'
- en: 'We’re ready to run some experiments. First, let’s orient ourselves with a quick
    recap:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备运行一些实验。首先，让我们通过一个简短的回顾来定位自己：
- en: We are simulating experiments using a known positive treatment effect of a size
    we supply.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在模拟实验，使用已知的正向治疗效应大小，这个大小是我们提供的。
- en: 'We are supplying the randomization scheme: simple, block, or stratified.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们提供了随机化方案：简单、区块或分层。
- en: We are evaluating the results of many experiments to understand the randomization
    scheme’s influence.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在评估多个实验的结果，以了解随机化方案的影响。
- en: We aren’t simulating a single experiment, but dozens to hundreds. We’ll evaluate
    the combined results from these experiments to (hopefully) arrive at a picture
    of the subtle influence randomization schemes have on experiment outcomes. The
    *design.py* file is a stand-in for an entire universe of treatment studies, all
    performed using the given randomization scheme.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们模拟的不是一个单一的实验，而是几十个到上百个实验。我们将评估这些实验的综合结果，以（希望）得出随机化方案对实验结果微妙影响的图景。*design.py*文件代表了一个包含所有治疗研究的完整宇宙，这些研究都是使用给定的随机化方案进行的。
- en: 'Let’s dive in. The *design.py* file expects several command line arguments:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解。*design.py*文件期望接收几个命令行参数：
- en: '[PRE16]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We must supply the population size (`npop`), number of subjects in each experiment
    (`nsubj`), treatment effect strength (`beta`), number of experiments to simulate
    (`nsim`), and type of randomization to use (`type`). As always, the randomness
    source and optional seed value are last.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须提供人口规模（`npop`）、每个实验中的受试者数量（`nsubj`）、治疗效应强度（`beta`）、要模拟的实验数量（`nsim`）以及使用的随机化类型（`type`）。和往常一样，随机性来源和可选的种子值排在最后。
- en: '***Simple***'
  id: totrans-148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***简单***'
- en: 'We can run our first simulation like so:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像这样运行第一次模拟：
- en: '[PRE17]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: A plot should appear along with the text output; we’ll get to it momentarily.
    We asked for 40 simulations of an experiment where we selected 32 subjects from
    a pool of 10,000 using simple randomization (0). The treatment effect size was
    0.3, meaning the `Treat` method on each `Person` object added a random value centered
    on 0.3 to the overall health of the individual.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 一张图表应该会显示出来，并伴随文本输出；我们很快就会看到它。我们请求模拟40次实验，每次实验从10000人的池子中随机选择32个受试者，采用简单随机化（0）。处理效应大小为0.3，这意味着对每个`Person`对象调用`Treat`方法时，会向个体的整体健康状况添加一个围绕0.3的随机值。
- en: These stats are drawn from the results of the simulations. The first two lines
    show the mean p-value for the lowest and highest 10 percent of experiments. Recall,
    the p-value for an experiment is from the health scores for the treatment and
    control groups. In this case, each experiment had approximately 16 subjects per
    group and there were 40 simulated experiments, so the highest and lowest 10 percent
    p-values correspond to 4 experiments. Because we used simple randomization, the
    treatment and control group size for a particular simulated experiment isn’t always
    16.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这些统计数据来自模拟结果。前两行显示的是最低和最高10%的实验的平均p值。回想一下，实验的p值来自治疗组和对照组的健康评分。在这种情况下，每个实验每组大约有16个受试者，共模拟了40个实验，因此最高和最低10%的p值对应于4个实验。因为我们使用了简单随机化，所以某个特定模拟实验的治疗组和对照组大小并不总是16。
- en: The next two lines report the mean Cohen’s *d* for the same set of experiments.
    Cohen’s *d* is a scaled version of the difference in the means between the treatment
    and control groups. Therefore, as we’ll see when using stratified randomization,
    we might expect the mean effect size for at least the lowest 10 percent group
    to be about the same as the requested effect size. Here, we asked for a smaller
    effect size of 0.3, but the mean was a substantial 1.0\. For the highest 10 percent
    group, the effect size was insignificant, which matches the p-value of 0.83\.
    For this group of experiments, we found no meaningful difference between the treatment
    and control groups.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两行报告了相同实验组的平均Cohen’s *d*值。Cohen’s *d*是治疗组和对照组均值差异的标准化版本。因此，正如我们在使用分层随机化时所看到的，我们可以期望至少是最低的10%组的平均效应大小与所要求的效应大小相近。在这里，我们要求的效应大小较小，为0.3，但均值却为1.0。对于最高的10%组，效应大小不显著，p值为0.83。对于这一组实验，我们没有发现治疗组与对照组之间的显著差异。
- en: The final four lines of output present the means of the per-experiment covariate
    *differences* for each group, low p-value and high p-value. We use a t-test here
    to see if the covariate differences between treatment and control significantly
    differed between the groups. For this run, the age difference was significant.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的四行输出展示了每个实验的协变量*差异*的均值，分别是低p值组和高p值组。我们在这里使用t检验来检查治疗组和对照组之间的协变量差异是否显著。在这次运行中，年龄差异是显著的。
- en: The *t* statistic for age is negative, meaning the low p-value experiments consisted
    of treatment and control groups with large age differences. In other words, for
    the low p-value experiments, the age covariate for the treatment and control groups
    was more likely to be different than for the high p-value experiments. Age is
    the most prominent factor in the health score, so a significant imbalance between
    treatment and control groups strongly affects measured results.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 年龄的*t*统计量为负，这意味着低p值实验中的治疗组和对照组年龄差异较大。换句话说，在低p值实验中，治疗组和对照组的年龄协变量差异比高p值实验中的更大。年龄是健康评分中最突出的因素，因此治疗组和对照组之间的显著不平衡会强烈影响测量结果。
- en: So, what should we make of these results? We ran many simulations, and, even
    for the best performing of them—those that showed a significant difference after
    treatment—we shouldn’t believe the results, as the covariates of those experiments
    were quite different. If we ran a single experiment, we’d likely see no effect
    and judge the treatment as a failure. For those cases where we did see an effect,
    it was likely artificially inflated because the treatment group was quite different
    from the control group in an important covariate.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们应该如何看待这些结果呢？我们进行了许多模拟实验，即便是表现最好的那些——那些在处理后显示出显著差异的实验——我们也不应相信结果，因为这些实验的协变量差异很大。如果我们只进行了一次实验，可能看不到任何效果，并且会认为治疗是失败的。在那些确实看到效果的情况下，结果很可能是人为夸大的，因为处理组与对照组在某个重要的协变量上差异较大。
- en: Remember that these results are for 40 experiments, meaning 32 subjects and
    simple random sampling into treatment and control groups tend toward unreliable
    results that either exaggerate the effectiveness of the treatment or mask it entirely.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这些结果来自40个实验，意味着32个样本和简单随机分配到治疗组和对照组的实验结果往往不可靠，这些结果要么夸大了治疗的有效性，要么完全掩盖了它。
- en: The left side of [Figure 10-3](ch010.xhtml#ch010fig03) shows the *design.py*
    plot, a histogram displaying the t-test p-values between the health of the treatment
    and control groups for the 40 simulated experiments. The results to the left of
    the vertical dashed line at 0.05 indicate results that would, typically, be heralded
    as statistically significant.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 10-3](ch010.xhtml#ch010fig03)的左侧显示了*design.py*图表，这是一个直方图，展示了40个模拟实验中治疗组与对照组健康状况之间t检验的p值。垂直虚线0.05左侧的结果通常会被认为是统计学显著的结果。'
- en: '![Image](../images/10fig03.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/10fig03.jpg)'
- en: '*Figure 10-3: Example plot output from* design.py *by randomization type*'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-3：* design.py *按随机化类型的示例输出图*'
- en: From the leftmost plot in [Figure 10-3](ch010.xhtml#ch010fig03), we see that
    about 12.5 percent of the experiments yielded a statistically significant difference.
    These are the experiments we’d likely read about in a scientific journal. The
    remaining 87.5 percent of the experiments didn’t result in a statistically significant
    treatment effect. Proper scientific adherence states that these experiments should
    be published as negative results, but such papers seldom appear—a known issue
    in the scientific literature.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 从[图 10-3](ch010.xhtml#ch010fig03)中的最左侧图可以看出，大约12.5%的实验结果显示出统计学上的显著差异。这些是我们可能在科学期刊上看到的实验。剩余的87.5%的实验没有产生统计学上显著的治疗效果。根据科学规范，这些实验应该作为负结果发布，但此类论文很少出现——这是科学文献中一个已知的问题。
- en: While we don’t know a priori that the treatment effect is present and positive
    in the real world, in our case we do—and that all 40 simulated experiments should
    have found a positive result. So, why wasn’t it found? The size of the cohort
    is a contributing factor that we’ll experiment with shortly, but as shown in the
    simulation, so is the imbalance of covariates due to simple randomization, both
    in masking and exaggerating the effect.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们事先并不知道治疗效应在现实中是否存在且为正，但在我们的案例中我们知道——并且所有40个模拟实验应该都能找到正结果。那么，为什么没有找到呢？受试者群体的规模是一个影响因素，我们将很快对此进行实验，但正如模拟所示，简单随机化导致的协变量不平衡也是一个因素，它既掩盖又夸大了效应。
- en: '***Block***'
  id: totrans-163
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***区组***'
- en: 'Switching to block randomization requires changing a 0 to a 1 on the command
    line:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到区组随机化需要在命令行中将0改为1：
- en: '[PRE18]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Not much has changed when compared to the simple randomization results. Selecting
    balanced treatment and control group sizes for each experiment has eliminated
    any possible effect due to bad splits. Still, that effect is unlikely to show
    up at the level of many experiments, which we’re considering here. The middle
    plot in [Figure 10-3](ch010.xhtml#ch010fig03) is much like the simple randomization
    plot; in both, 12.5 percent of experiments were statistically significant at the
    *p* < 0.05 level. However, age is again highly different between the lowest and
    highest p-value experiment groups, though not at the level it was for the simple
    randomization case. We might improve this by increasing the number of subjects,
    but let’s switch to stratified randomization first and see what happens.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 与简单随机化结果相比，变化不大。为每个实验选择平衡的处理组和对照组大小，消除了任何由不良分组导致的效应。不过，这种效应不太可能在我们这里考虑的多个实验层面上显现出来。[图
    10-3](ch010.xhtml#ch010fig03)中的中间图与简单随机化图类似；在这两者中，12.5%的实验在*p* < 0.05水平上具有统计学显著性。然而，尽管没有达到简单随机化案例中那样的差异，但在最低和最高p值实验组之间，年龄差异再次显著。我们或许可以通过增加受试者数量来改善这个问题，但先让我们切换到分层随机化，看看会发生什么。
- en: '***Stratified***'
  id: totrans-167
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***分层***'
- en: 'To switch to stratified randomization, change the 1 on the command line to
    a 2:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 要切换到分层随机化，将命令行中的1改为2：
- en: '[PRE19]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note that the output lacks any “delta” lines because treatment and control groups
    have the same covariate makeup in stratified randomization, so all the deltas
    are zero; there is nothing to report. Recall, the “delta” lines refer to the means
    of the individual experiment differences between treatment and control groups.
    Those differences are zero because we selected a matched control group subject
    for each treatment group subject.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，输出中没有任何“delta”行，因为在分层随机化中，处理组和对照组的协变量组成是相同的，因此所有的delta都是零；没有需要报告的内容。回忆一下，“delta”行是指处理组和对照组之间单个实验差异的均值。这些差异为零，因为我们为每个处理组的受试者选择了一个匹配的对照组受试者。
- en: The plot is on the right in [Figure 10-3](ch010.xhtml#ch010fig03). It doesn’t
    look like the simple or block randomization plots, as the covariate effect has
    been compensated for by the stratified (matching) selection process. What the
    plot shows is due to other factors.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 该图位于[图 10-3](ch010.xhtml#ch010fig03)的右侧。它看起来不像简单或区组随机化的图表，因为协变量效应已经通过分层（匹配）选择过程得到补偿。该图所显示的是由其他因素导致的结果。
- en: However, no experiment produced a p-value below the 0.05 threshold. After properly
    accounting for the covariates we believe influence health, the treatment effect,
    while present, is too weak to detect with only 32 subjects in the study.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，没有实验的p值低于0.05的阈值。在适当考虑了我们认为会影响健康的协变量后，治疗效应虽然存在，但由于研究中只有32名受试者，太弱以至于无法检测到。
- en: Cohen’s *d* for the lowest p-value group is 0.47—not too far from the 0.3 we
    should get if we detect the treatment effect consistently. To improve matters
    further, we’ll adjust the study size by increasing the number of subjects.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最低p值组，科恩的*d*值为0.47——与我们应获得的0.3值相差不远，这表明我们一致地检测到了治疗效应。为了进一步改善，我们将通过增加受试者数量来调整研究规模。
- en: '**Increasing the Number of Subjects**'
  id: totrans-174
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**增加受试者数量**'
- en: 'Let’s move from 32 subjects to 128 subjects:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将受试者数量从32增加到128：
- en: '[PRE20]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The lowest 10 percent of experiments has a mean p-value of 0.06 and a mean *d*
    of 0.334, so we’re getting closer, but no experiments passed the magic threshold
    of 0.05.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 最低10%的实验的平均p值为0.06，平均*d*为0.334，所以我们已经接近了，但没有一个实验通过了0.05的魔法门槛。
- en: 'Let’s double the study size again:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次将研究规模翻倍：
- en: '[PRE21]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now even the highest p-value group is near 0.05, and both *d* values are in
    the 0.3 ballpark. The plot (not shown) illustrates that almost all experiments
    produce *p* < 0.05 results.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，即使是最高p值组也接近0.05，且两个*d*值大约在0.3左右。图表（未显示）说明几乎所有的实验都产生了*p* < 0.05的结果。
- en: With stratified randomization, we’ve accounted for covariates, so we’re seeing
    the actual treatment effect in these means. Still, we needed a sufficiently large
    number of subjects to tease the treatment effect out of the data. Let’s find out
    how many subjects we need for a given desired effect size.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 通过分层随机化，我们已经考虑了协变量，因此我们在这些均值中看到了实际的治疗效应。不过，我们仍然需要足够多的受试者来从数据中提取治疗效应。让我们来看看为达到期望的效应大小，我们需要多少受试者。
- en: 'The code in *cohen_d_test.py* uses *design.py* to estimate the number of subjects
    necessary to achieve a mean p-value of 0.05 or less in the highest 10 percent
    of experiments. A run of the code produces:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '*cohen_d_test.py*中的代码使用*design.py*来估算为达到最高10%的实验中平均p值为0.05或更小所需的受试者数量。运行该代码会生成如下结果：'
- en: '[PRE22]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The requested effect size is on the left, followed by the estimated number of
    subjects necessary, the p-value, and *d* for the highest 10 percent of simulated
    experiments. My code run took about five hours, mostly working the *d* = 0.1 case.
    Generally, the printed *d* values are close to the requested values, which is
    a good sign.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 请求的效应大小位于左侧，后面是估算的所需受试者数量、p值以及模拟实验中最高10%的*p*和*d*值。我的代码运行大约花了五个小时，大部分时间都在处理*d*
    = 0.1的情况。通常，打印出的*d*值接近请求的值，这是一个好兆头。
- en: 'The code is a loop over the desired effect sizes with an inner `while` loop
    that increments the number of subjects until the mean p-value is 0.05 or less:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码是一个循环，遍历期望的效应大小，并通过一个内部的`while`循环递增受试者数量，直到平均p值为0.05或更小：
- en: '[PRE23]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The number of subjects starts at 10 (`base`) and is multiplied by a value `k`
    that increments by 1 inside the `while` loop until the p-value is at or below
    0.05\. The `RunTest` function constructs the *design.py* command line, executes
    it, and parses the output file to get *p* and *d*.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 受试者数量从10（`base`）开始，并在`while`循环中通过一个递增值`k`来乘以1，直到p值达到或低于0.05。`RunTest`函数构建*design.py*命令行，执行它并解析输出文件，获取*p*和*d*。
- en: '**Calculating the Simulation’s Statistical Power**'
  id: totrans-188
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**计算模拟的统计功效**'
- en: Let’s use `TTestIndPower` from the `statsmodels` package to see whether the
    simulation captures the correct number of subjects necessary for a desired *d*
    value.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`statsmodels`包中的`TTestIndPower`来检查模拟是否准确捕捉了所需的受试者数量，以达到期望的*d*值。
- en: The `TTestIndPower` class performs a *power* analysis for two independent samples,
    the treatment and control groups. See *power_analysis.py*, which produces output
    for the same set of effect sizes as *cohen_d_test.py*. Comparing the two in terms
    of the number of subjects results in [Table 10-2](ch010.xhtml#ch010tab02).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`TTestIndPower`类对两个独立样本——治疗组和对照组——进行*功效*分析。请参见*power_analysis.py*，它为与*cohen_d_test.py*相同的效应大小集生成输出。将两者在受试者数量上的结果进行比较，见[表10-2](ch010.xhtml#ch010tab02)。'
- en: '**Table 10-2:** Comparing the Calculated and Estimated Number of Subjects'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**表10-2：** 比较计算和估算的受试者数量'
- en: '| ***d*** | **Calculated** | **Estimated** |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| ***d*** | **计算** | **估算** |'
- en: '| --- | --- | --- |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 0.9 | 26 | 50 |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| 0.9 | 26 | 50 |'
- en: '| 0.8 | 33 | 60 |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| 0.8 | 33 | 60 |'
- en: '| 0.7 | 43 | 80 |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 0.7 | 43 | 80 |'
- en: '| 0.6 | 59 | 90 |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 0.6 | 59 | 90 |'
- en: '| 0.5 | 85 | 110 |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| 0.5 | 85 | 110 |'
- en: '| 0.4 | 132 | 170 |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| 0.4 | 132 | 170 |'
- en: '| 0.3 | 234 | 280 |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| 0.3 | 234 | 280 |'
- en: '| 0.2 | 526 | 580 |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| 0.2 | 526 | 580 |'
- en: '| 0.1 | 2,102 | 2,370 |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| 0.1 | 2,102 | 2,370 |'
- en: The calculated results are for a threshold of 0.05 (alpha) and a power of 0.9,
    meaning we want a 90 percent chance of achieving at least 0.05 as the p-value
    for the t-test between the treatment and control groups. I selected a power of
    0.9 because the empirical code seeks to make the mean of the top 10 percent of
    the highest p-values 0.05 or less, implying that almost all simulated experiments
    will find a result at a p-value of 0.05 or lower. The agreement between the calculated
    and estimated numbers of subjects is rough but reasonable, which validates the
    simulation.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 计算结果针对阈值0.05（显著性水平α）和统计功效0.9，这意味着我们希望有90%的概率获得至少0.05作为治疗组和对照组之间t检验的p值。我选择0.9的功效值是因为经验代码试图使得最高10%
    p值的均值为0.05或更低，这意味着几乎所有的模拟实验都会发现一个p值为0.05或更低的结果。计算结果和估算的受试者数量大致一致且合理，这验证了模拟的有效性。
- en: '**Exercises**'
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**练习**'
- en: This chapter has only two exercises, both of which are challenging.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 本章只有两个练习，两个练习都具有挑战性。
- en: '***Working with Two Treatments***'
  id: totrans-206
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***处理两种治疗***'
- en: 'Apply block randomization to a study with three conditions: control, treatment
    1, and treatment 2\. The block size should be a multiple of the number of conditions;
    fix the block size at 6, meaning each block will use each condition twice. For
    example, `[0,0,1,1,2,2]` is a valid block of six subjects where 0 is control,
    1 receives treatment 1, and 2 receives treatment 2.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 将区块随机化应用于一个包含三种条件的研究：对照、治疗1和治疗2。区块大小应为条件数的倍数；将区块大小固定为6，意味着每个区块将每个条件使用两次。例如，`[0,0,1,1,2,2]`是一个有效的六人区块，其中0是对照，1接受治疗1，2接受治疗2。
- en: 'We need a way to select at random from the set containing all possible permutations
    of the set of three conditions used twice. In other words, we’d like a NumPy array
    where each row is a valid block. Use code like this:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一种方法从包含所有可能排列的集合中随机选择，这些排列由两次使用的三种条件组成。换句话说，我们希望得到一个NumPy数组，其中每一行是一个有效的区块。可以使用如下代码：
- en: '[PRE24]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `blocks` array is a 90×6 matrix with 90 unique blocks to select from when
    building a balanced cohort. The `permutations` function returns an iterable that
    `set` uses to return all unique permutations of the basic block, `b`. To make
    a NumPy array, convert the set into a list before passing it to `array`.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`blocks`数组是一个90×6的矩阵，包含90个唯一的区块，当构建平衡队列时可以从中选择。`permutations`函数返回一个可迭代对象，`set`用于返回基本区块`b`的所有唯一排列。为了创建NumPy数组，在传递给`array`之前，将集合转换为列表。'
- en: 'Your task: alter a copy of *design.py* to select subjects for simple and block
    randomization for the control, treatment 1, and treatment 2 groups. For simple
    randomization, roll a three-sided die. Ignore stratified randomization for now.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 你的任务是：修改*design.py*的副本，为对照组、治疗1组和治疗2组选择受试者进行简单和区块随机化。对于简单随机化，掷一个三面骰子。暂时忽略分层随机化。
- en: '***Combining Block and Stratified Randomization***'
  id: totrans-212
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结合区块随机化和分层随机化***'
- en: To combine block and stratified randomization, create blocks where all subjects
    are matched according to the desired covariates, and each block includes all conditions
    in a balanced manner. If there are three conditions—as in the previous exercise—and
    the blocks have six subjects each, then the subjects in each block must be matched
    to some level in terms of covariates.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将区块随机化和分层随机化结合起来，创建区块时，所有受试者根据所需的协变量匹配，并且每个区块以平衡的方式包含所有条件。如果有三个条件——如前一个练习中的情况——并且每个区块包含六个受试者，则每个区块中的受试者必须在协变量方面达到某种匹配程度。
- en: Alter the copy of *design.py* from Possibility 1, but account for the 56 possible
    combinations of the four covariates. The subjects placed into a block must all
    have the same covariate values.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 修改*design.py*的副本，参考可能性1，但考虑到四个协变量的56种可能组合。放入区块的受试者必须在协变量的值上完全一致。
- en: If the block is `[0,1,2,1,2,0]` and the covariate set is `[2,1,0,1]`, for example,
    then search the population for six subjects in age group 2, income group 1, smoker
    0, and drink 1, assigning them to the conditions as dictated by the block. Continue
    for *n* subjects where *n* is a multiple of six, the block size. Add this capability
    to your altered *design.py* from Exercise 1.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果区块是`[0,1,2,1,2,0]`，协变量集合是`[2,1,0,1]`，则在年龄组2、收入组1、吸烟者0、饮酒者1的群体中寻找六个受试者，并按照区块指定的条件分配给他们。继续对*n*个受试者进行操作，其中*n*是六的倍数，即区块大小。将此功能添加到你修改过的*design.py*文件中，参考练习1。
- en: '**Summary**'
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: 'This chapter focused on randomization in experimental design, particularly
    during subject selection. After briefly discussing the need for randomization,
    we explored the most common types: simple, block, and stratified.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点讨论了实验设计中的随机化，特别是在受试者选择过程中的随机化。我们在简要讨论了随机化的必要性后，探讨了最常见的几种类型：简单随机化、块随机化和分层随机化。
- en: Simple randomization uses coin flips or dice rolls to place subjects in treatment
    or control groups. While this process can introduce bias due to unequal group
    sizes, block randomization removes this possibility by ensuring that treatment
    and control group sizes are balanced.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 简单随机化使用抛硬币或掷骰子将受试者分配到治疗组或对照组。虽然这个过程可能由于组别大小不均而引入偏差，但块随机化通过确保治疗组和对照组的大小平衡，消除了这种可能性。
- en: We learned about covariates, factors outside the study scope that may affect
    the results by enhancing or masking any possible treatment effect. Stratified
    randomization uses covariates to construct treatment and control groups with matching
    characteristics.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解了协变量，它是指那些可能通过增强或掩盖任何可能的治疗效应，影响研究结果的因素。分层随机化使用协变量来构建具有匹配特征的治疗组和对照组。
- en: We then created a simulation to test randomization schemes on the outcome of
    an experiment where we knew the treatment effect we should see. We learned that
    small cohorts using simple randomization are prone to bias; while block randomization
    removes bias due to imbalanced group sizes, stratified randomization corrects
    for bias in the treatment and control groups. This allows us to measure the effect
    we expect from the simulation, provided the number of subjects is of some minimal
    size.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们创建了一个模拟实验，测试不同随机化方案对实验结果的影响，而我们已知应观察到的治疗效应。我们发现，使用简单随机化的小规模队列容易产生偏差；而块随机化通过确保治疗组和对照组的大小平衡，消除了由于组别不平衡引起的偏差，分层随机化则纠正了治疗组和对照组中的偏差。这使得我们能够在受试者数量达到某个最小规模的前提下，衡量我们期望从模拟中获得的效应。
- en: Lastly, we matched the number of subjects necessary in a stratified setting
    to achieve the desired effect size at a *p* < 0.05 level for most of our simulated
    experiments to the number of subjects indicated by a t-test-based power analysis.
    The empirical number was in reasonably good agreement with the model, so we claimed
    this as validation of our approach.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将分层设置中所需的受试者数量与大多数模拟实验中期望效应大小达到 *p* < 0.05 水平所需的受试者数量进行了匹配，这个数量是通过基于t检验的效能分析得出的。实测的数量与模型结果相当一致，因此我们将此视为我们方法的验证。
- en: Let’s continue our journey with randomized algorithms, an essential class of
    algorithms in computer science.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续探索随机算法，这是计算机科学中一种重要的算法类别。
