- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Joining Database Tables
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 连接数据库表
- en: A SQL query walks into a bar, approaches two tables, and asks, “May I join you?”
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一条SQL查询走进酒吧，走向两个表，问道：“我能加入你们吗？”
- en: ''
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —The worst database joke in history
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —历史上最糟糕的数据库笑话
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: Now that you’ve learned how to use SQL to select and filter data from a table,
    you’ll see how to join database tables. *Joining* tables means selecting data
    from more than one table and combining it in a single result set. MySQL provides
    syntax to do different types of joins, like inner joins and outer joins. In this
    chapter, you’ll look at how to use each type.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学会了如何使用SQL从表中选择和过滤数据，接下来你将学习如何连接数据库表。*连接*表意味着从多个表中选择数据，并将它们合并到一个结果集中。MySQL提供了不同类型连接的语法，比如内连接和外连接。在本章中，你将学习如何使用每种类型。
- en: Selecting Data from Multiple Tables
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从多个表中选择数据
- en: The data you want to retrieve from a database often will be stored in more than
    one table, and you need to return it as one dataset in order to view all of it
    at once.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你想从数据库中检索的数据通常会存储在多个表中，且你需要将它们作为一个数据集返回，以便一次性查看所有数据。
- en: 'Let’s look at an example. This table, called `subway_system`, contains data
    for every subway in the world:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看一个例子。这个表，叫做`subway_system`，包含了世界上每个地铁系统的数据：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first two columns, `subway_system` and `city`, contain the name of the subway
    and the city where it’s located. The third column, `country_code`, stores the
    two-character ISO country code. `AR` stands for Argentina, `CN` stands for China,
    and so on.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 前两列，`subway_system`和`city`，分别包含地铁的名称和它所在的城市。第三列，`country_code`，存储了两位字符的ISO国家代码。`AR`代表阿根廷，`CN`代表中国，等等。
- en: 'The second table, called `country`, has two columns, `country_code` and `country`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个表，叫做`country`，有两列，`country_code`和`country`：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Say you want to get a list of subway systems and their full city and country
    names. That data is spread across the two tables, so you’ll need to join them
    to get the result set you want. Each table has the same `country_code` column,
    so you’ll use that as a link to write a SQL query that joins the tables (see [Listing
    5-1](#listing5-1)).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想获取地铁系统的列表，并包括完整的城市和国家名称。这些数据分布在两个表中，因此你需要将它们连接起来，以便得到你想要的结果集。每个表都有相同的`country_code`列，所以你将使用它作为连接，编写一个SQL查询来连接这两个表（见[Listing
    5-1](#listing5-1)）。
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 5-1: Joining the `subway_system` and `country` tables'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 5-1：连接`subway_system`和`country`表
- en: In the `country` table, the `country_code` column is the primary key. In the
    `subway_system` table, the `country_code` column is a foreign key. Recall that
    a primary key uniquely identifies rows in a table, and a foreign key is used to
    join with the primary key of another table. You use the `=` (equal) symbol to
    specify that you want to join all equal values from the `subway_system` and `country`
    tables’ `country_code` columns.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在`country`表中，`country_code`列是主键。在`subway_system`表中，`country_code`列是外键。回想一下，主键唯一标识表中的每一行，而外键用于与另一个表的主键进行连接。你使用`=`（等号）符号来指定要连接`subway_system`和`country`表中`country_code`列的所有相等值。
- en: Since you’re selecting from two tables in this query, it’s a good idea to specify
    which table the column is in every time you reference it, especially because the
    same column appears in both tables. There are two reasons for this. First, it
    will make the SQL easier to maintain because it will be immediately apparent in
    the SQL query which columns come from which tables. Second, because both tables
    have a column named `country_code`, if you don’t specify the table name, MySQL
    won’t know which column you want to use and will give an error message. To avoid
    this, in your `select` statement, type the table name, a period, and then the
    column name. For example, in [Listing 5-1](#listing5-1), `subway_system.city`
    refers to the `city` column in the `subway_system` table.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在这个查询中你从两个表中选择数据，因此每次引用列时最好指定该列所在的表，尤其是当两个表中有相同列名时。这样做有两个原因。首先，它能使SQL语句更易于维护，因为在SQL查询中，哪个列来自哪个表会立刻显而易见。其次，因为两个表都有一个名为`country_code`的列，如果不指定表名，MySQL就不知道你要使用哪个列，并会返回错误信息。为避免这种情况，在`select`语句中，键入表名、一个点号，再加上列名。例如，在[Listing
    5-1](#listing5-1)中，`subway_system.city`指的是`subway_system`表中的`city`列。
- en: 'When you run this query, it returns all of the subway systems with the country
    names retrieved from the `country` table:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个查询时，它会返回所有地铁系统，并从`country`表中获取对应的国家名称：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that the `country_code` column does not appear in the resulting join. This
    is because you selected only the `subway_system`, `city`, and `country` columns
    in the query.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`country_code` 列没有出现在结果连接中。这是因为您在查询中只选择了 `subway_system`、`city` 和 `country`
    列。
- en: Table Aliasing
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表别名
- en: 'To save time when writing SQL, you can declare aliases for your table names.
    A *table alias* is a short, temporary name for a table. The following query returns
    the same result set as [Listing 5-1](#listing5-1):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了节省编写 SQL 的时间，您可以为表名声明别名。*表别名*是表的短暂名称。以下查询返回与[列表 5-1](#listing5-1)相同的结果集：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You declare `s` as the alias for the `subway_system` table and `c` for the `country`
    table. Then you can type `s` or `c` instead of the full table name when referencing
    the column names elsewhere in the query. Keep in mind that table aliases are only
    in effect for the current query.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您声明 `s` 为 `subway_system` 表的别名，`c` 为 `country` 表的别名。然后，在查询的其他部分引用列名时，您可以输入 `s`
    或 `c` 来代替完整的表名。请记住，表别名仅对当前查询有效。
- en: 'You can also use the word `as` to define table aliases:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 `as` 来定义表别名：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The query returns the same results with or without `as`, but you’ll cut down
    on typing by not using it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是否使用 `as`，查询返回的结果是相同的，但不使用它可以减少输入量。
- en: Types of Joins
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接类型
- en: MySQL has several different types of joins, each of which has its own syntax,
    as summarized in [Table 5-1](#table5-1).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 有多种不同类型的连接，每种连接都有自己的语法，概述如下[表 5-1](#table5-1)。
- en: '**[Table 5-1](#tableanchor5-1):** MySQL Join Types'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**[表 5-1](#tableanchor5-1):** MySQL 连接类型'
- en: '| **Join type** | **Description** | **Syntax** |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| **连接类型** | **描述** | **语法** |'
- en: '| --- | --- | --- |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Inner join | Returns rows where both tables have a matching value. | `inner
    join` `join` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 内连接 | 返回两个表中有匹配值的行。 | `inner join` `join` |'
- en: '| Outer join | Returns all rows from one table and the matching rows from a
    second table. Left joins return all rows from the table on the left. Right joins
    return all rows from the table on the right. | `left outer join` `left join`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '| 外连接 | 返回一个表中的所有行和第二个表中匹配的行。左连接返回左表中的所有行，右连接返回右表中的所有行。 | `left outer join`
    `left join`'
- en: '`right outer join`'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`right outer join`'
- en: '`right join` |'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`right join` |'
- en: '| Natural join | Returns rows based on column names that are the same in both
    tables. | `natural join` |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 自然连接 | 基于两个表中相同的列名返回行。 | `natural join` |'
- en: '| Cross join | Matches all rows in one table to all rows in another table and
    returns a Cartesian product. | `cross join` |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 交叉连接 | 将一个表中的所有行与另一个表中的所有行匹配，并返回笛卡尔积。 | `cross join` |'
- en: Let’s look at each type of join in more depth.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地了解每种连接类型。
- en: Inner Joins
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内连接
- en: Inner joins are the most commonly used type of join. In an inner join, there
    must be a match in both tables for data to be retrieved.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 内连接是最常用的连接类型。在内连接中，只有两个表中都有匹配的数据时，才能检索到数据。
- en: You performed an inner join on the `subway_system` and `country` tables in [Listing
    5-1](#listing5-1). The returned list had no rows for Bangladesh and Belgium. These
    countries are not in the `subway_system` table, as they don’t have subways; thus,
    there was not a match in both tables.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您在[列表 5-1](#listing5-1)中对 `subway_system` 和 `country` 表执行了内连接。返回的列表中没有孟加拉国和比利时的行。这些国家不在
    `subway_system` 表中，因为它们没有地铁；因此，两个表中没有匹配的数据。
- en: 'Note that when you specify `inner join` in a query, the word `inner` is optional
    because this is the default join type. The following query performs an inner join
    and produces the same results as [Listing 5-1](#listing5-1):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当您在查询中指定`inner join`时，`inner`这个词是可选的，因为这是默认的连接类型。以下查询执行内连接，并产生与[列表 5-1](#listing5-1)相同的结果：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You’ll come across MySQL queries that use `inner join` and others that use `join`.
    If you have an existing codebase or written standards, it’s best to follow the
    practices outlined there. If not, I recommend including the word `inner` for clarity.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会遇到使用 `inner join` 的 MySQL 查询，也有使用 `join` 的查询。如果您有现有的代码库或书面标准，最好遵循其中概述的做法。如果没有，我建议为清晰起见，包含
    `inner` 这个词。
- en: Outer Joins
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 外连接
- en: An outer join displays all rows from one table and any matching rows in a second
    table. In [Listing 5-2](#listing5-2), you select all countries and display subway
    systems for the countries if there are any.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 外连接显示一个表中的所有行以及第二个表中任何匹配的行。在[列表 5-2](#listing5-2)中，您选择所有国家，并显示这些国家的地铁系统（如果有的话）。
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Listing 5-2: Performing a right outer join'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-2：执行右外连接
- en: 'In this query, the `subway_system` table is considered the left table because
    it is to the left of the `outer join` syntax, while the `country` table is the
    right table. Because this is a *right* outer join, this query returns all the
    rows from the `country` table even if there is no match in the `subway_system`
    table. Therefore, all the countries appear in the result set, whether or not they
    have subway systems:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个查询中，`subway_system`表被认为是左表，因为它位于`outer join`语法的左侧，而`country`表是右表。由于这是一个*右*外连接，即使在`subway_system`表中没有匹配的行，这个查询仍然会返回`country`表中的所有行。因此，所有国家都会出现在结果集中，无论它们是否拥有地铁系统：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: For countries without matching rows in the `subway_system` table, the `city`
    and `subway_system` columns display null values.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于没有与`subway_system`表中的匹配行的国家，`city`和`subway_system`列将显示为null值。
- en: As with inner joins, the word `outer` is optional; using `left join` and `right
    join` will produce the same results as their longer equivalents.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 与内连接一样，`outer`这个词是可选的；使用`left join`和`right join`将产生与其较长的等价语句相同的结果。
- en: 'The following outer join returns the same results as [Listing 5-2](#listing5-2),
    but uses the `left outer join` syntax instead:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下外连接返回的结果与[列表 5-2](#listing5-2)中的相同，但使用了`left outer join`语法：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this query, the order of the tables is switched from [Listing 5-2](#listing5-2).
    The `subway_system` table is now listed last, making it the right table. The syntax
    `country c left outer join subway_system s` is equivalent to `subway_system s
    right outer join country c` in [Listing 5-2](#listing5-2). It doesn’t matter which
    join you use as long as you list the tables in the correct order.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个查询中，表的顺序与[列表 5-2](#listing5-2)中的顺序不同。`subway_system`表现在被列为最后一个表，成为右表。语法`country
    c left outer join subway_system s`等价于[列表 5-2](#listing5-2)中的`subway_system s right
    outer join country c`。无论使用哪种连接方式，只要表的顺序正确，就没有问题。
- en: Natural Joins
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自然连接
- en: 'A natural join in MySQL automatically joins tables when they have a column
    with the same name. Here is the syntax to automatically join two tables based
    on a column that is found in both:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL中的自然连接会在两个表有相同名称的列时自动连接它们。以下是基于两个表中都存在的列自动连接的语法：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'With natural joins, you avoid a lot of the extra syntax required for an inner
    join. In [Listing 5-2](#listing5-2), you had to include `on s.country_code = c.country_code`
    to join the tables based on their common `country_code` column, but with a natural
    join, you get that for free. The results of this query are as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自然连接时，你可以避免内连接所需的额外语法。在[列表 5-2](#listing5-2)中，你需要包含`on s.country_code = c.country_code`来基于它们共同的`country_code`列连接表，但使用自然连接时，这个操作是自动完成的。这个查询的结果如下：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Notice that you selected all columns from the tables using the `select *` wildcard.
    Also, although both tables have a `country_code` column, MySQL’s natural join
    was smart enough to display that column just once in the result set.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你使用`select *`通配符选择了所有表中的列。另外，尽管两个表都有`country_code`列，但MySQL的自然连接足够智能，仅在结果集中显示该列一次。
- en: Cross Joins
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 笛卡尔连接
- en: MySQL’s cross join syntax can be used to get the Cartesian product of two tables.
    A *Cartesian product* is a listing of every row in one table matched with every
    row in a second table. For example, say a restaurant has two database tables called
    `main_dish` and `side_dish`. Each table has three rows and one column.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL的`cross join`语法可以用来获取两个表的笛卡尔积。*笛卡尔积*是一个列出每一行与第二个表中每一行匹配的结果。例如，假设有一个餐厅的数据库，其中有两个表：`main_dish`和`side_dish`。每个表有三行和一列。
- en: 'The `main_dish` table is as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_dish`表如下所示：'
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And the `side_dish` table looks like:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 而`side_dish`表看起来像这样：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'A Cartesian product of these tables would be a list of all the possible combinations
    of main dishes and side dishes, and is retrieved using the `cross join` syntax:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个表的笛卡尔积将是所有主菜和配菜的可能组合的列表，可以使用`cross join`语法来检索：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This query, unlike the others you’ve seen, doesn’t join tables based on columns.
    There are no primary keys or foreign keys being used. Here are the results of
    this query:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询与之前看到的查询不同，它没有基于列来连接表。没有使用主键或外键。以下是该查询的结果：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Since there are three rows in the `main_dish` table and three rows in the `side_dish`
    table, the total number of possible combinations is nine.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`main_dish`表有三行，`side_dish`表也有三行，因此可能的组合总数为九个。
- en: Self Joins
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自连接
- en: Sometimes, it can be beneficial to join a table to itself, which is known as
    a self join. Rather than using special syntax as you did in the previous joins,
    you perform a self join by listing the same table name twice and using two different
    table aliases.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，将表与其自身连接是有益的，这称为自连接。与之前使用的特殊语法不同，您通过将相同的表名列出两次，并使用两个不同的表别名来执行自连接。
- en: 'For example, the following table, called `music_preference`, lists music fans
    and their favorite genre of music:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下表格名为`music_preference`，列出了音乐迷及其喜欢的音乐类型：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: To pair music fans who like the same genre, you join the `music_preference`
    table to itself, as shown in [Listing 5-3](#listing5-3).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将喜欢相同音乐类型的音乐迷配对，您将`music_preference`表与其自身连接，如[列表 5-3](#listing5-3)所示。
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Listing 5-3: Self join of the `music_preference` table'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-3：`music_preference`表的自连接
- en: The `music_preference` table is listed twice in the query, aliased once as table
    `a` and once as table `b`. MySQL will then join tables `a` and `b` as if they
    are different tables.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`music_preference`表在查询中列出了两次，一次作为表`a`，一次作为表`b`。然后，MySQL会将表`a`和表`b`连接起来，仿佛它们是不同的表。'
- en: In this query, you use the `!=` (not equal) syntax in the `where` clause to
    ensure that the value of the `music_fan` column from table `a` is not the same
    as the value of the `music_fan` column in table `b`. (Remember from [Chapter 3](c03.xhtml)
    that you can use a `where` clause in your `select` statements to filter your results
    by applying certain conditions.) This way, music fans won’t be paired up with
    themselves.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个查询中，您在`where`子句中使用`!=`（不等于）语法，确保表`a`中`music_fan`列的值与表`b`中`music_fan`列的值不同。（请记住在[第3章](c03.xhtml)中，您可以在`select`语句中使用`where`子句，通过应用某些条件来筛选结果。）这样，音乐迷就不会与自己配对了。
- en: '[Listing 5-3](#listing5-3) produces the following result set:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 5-3](#listing5-3)产生如下结果集：'
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: A music fan can now find other fans of their favorite genre in the right column
    next to their name.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，音乐迷可以在他们的名字旁边的右侧列中找到其他喜欢相同音乐类型的粉丝。
- en: Variations on Join Syntax
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 联接语法的变体
- en: MySQL allows you to write SQL queries that accomplish the same results in different
    ways. It’s a good idea to get comfortable with different syntaxes, as you may
    have to modify code created by someone who doesn’t write SQL queries in quite
    the same way that you do.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL允许您以不同的方式编写SQL查询来完成相同的结果。了解不同的语法是一个好主意，因为您可能需要修改由其他人编写的代码，而这些人可能不会像您一样编写SQL查询。
- en: Parentheses
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 括号
- en: You can choose to use parentheses when joining on columns or leave them off.
    This query, which does not use parentheses
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接列时，您可以选择使用括号，或者也可以不使用。这是一个不使用括号的查询：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'is the same as this query, which does:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这与下面的查询是等价的，它的作用是：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Both queries return the same result.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个查询返回相同的结果。
- en: Old-School Inner Joins
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传统的内部连接
- en: 'This query, written in an older style of SQL, is equivalent to [Listing 5-1](#listing5-1):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个使用SQL旧语法编写的查询，相当于[列表 5-1](#listing5-1)：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This code doesn’t include the word `join`; instead, it lists the table names
    separated by a comma in the `from` statement.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码没有使用`join`这个词；相反，它在`from`语句中列出了由逗号分隔的表名。
- en: When writing queries, use the newer syntax shown in [Listing 5-1](#listing5-1),
    but keep in mind that this older style is still supported by MySQL and you might
    see it used in some legacy code today.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写查询时，使用[列表 5-1](#listing5-1)中显示的较新语法，但请记住，MySQL仍然支持这种较旧的样式，您今天可能会在某些遗留代码中看到它的使用。
- en: Column Aliasing
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列别名
- en: You read earlier in the chapter about table aliasing; now you’ll create aliases
    for columns.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您在本章中早些时候阅读过表别名；现在您将为列创建别名。
- en: 'In some parts of the world, like France, subway systems are referred to as
    *metros*. Let’s select the subway systems for cities in France from the `subway_system`
    table and use column aliasing to display the heading `metro` instead:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在世界的一些地方，例如法国，地铁系统被称为*地铁*。让我们从`subway_system`表中选择法国城市的地铁系统，并使用列别名将标题显示为`metro`：
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'As with table aliases, you can use the word `as` in your SQL query or you can
    leave it out. Either way, the results of the query are as follows, now with the
    `subway_system` column heading changed to `metro`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 与表别名一样，您可以在SQL查询中使用`as`关键字，也可以省略它。无论哪种方式，查询的结果如下，现在`subway_system`列的标题已更改为`metro`：
- en: '[PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: When creating tables, try to give your column headings descriptive names so
    that the results of your queries will be meaningful at a glance. In cases where
    the column names could be clearer, you can use a column alias.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建表时，尽量为列标题命名具有描述性的名称，以便查询结果一目了然。在列名不够清晰的情况下，您可以使用列别名。
- en: Joining Tables in Different Databases
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在不同数据库中连接表
- en: Sometimes there are tables with the same name in multiple databases, so you
    need to tell MySQL which database to use. There are a couple of different ways
    to do this.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 有时多个数据库中会有相同名称的表，因此您需要告诉 MySQL 使用哪个数据库。可以通过几种不同的方式来做到这一点。
- en: 'In this query, the `use` command (introduced in [Chapter 2](c02.xhtml)) tells
    MySQL to use the specified database for the SQL statements that follow it:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个查询中，`use` 命令（在[第2章](c02.xhtml)中介绍）告诉 MySQL 使用指定的数据库来执行接下来的 SQL 语句：
- en: '[PRE24]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: On the first line, the `use` command sets the current database to `subway`.
    Then, when you select all the rows from the `subway_system` table on the next
    line, MySQL knows to pull data from the `subway_system` table in the `subway`
    database.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行中，`use` 命令将当前数据库设置为 `subway`。然后，当您在下一行选择 `subway_system` 表的所有行时，MySQL 会知道从
    `subway` 数据库中的 `subway_system` 表中提取数据。
- en: 'Here’s a second way to specify the database name in your `select` statements:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第二种在 `select` 语句中指定数据库名称的方法：
- en: '[PRE25]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In this syntax, the table name is preceded by the database name and a period.
    The `subway.subway_system` syntax tells MySQL that you want to select from the
    `subway_system` table in the `subway` database.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个语法中，表名之前加上数据库名和一个句点。`subway.subway_system` 语法告诉 MySQL，您想从 `subway` 数据库中的
    `subway_system` 表中选择数据。
- en: 'Both options produce the same result set:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种选项产生相同的结果集：
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Specifying the database and table name allows you to join tables that are in
    different databases on the same MySQL server, like so:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 指定数据库和表名使您能够连接位于同一 MySQL 服务器上不同数据库中的表，如下所示：
- en: '[PRE27]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This query joins the `country` table in the `location` database with the `subway_system`
    table in the `subway` database.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询将位于 `location` 数据库中的 `country` 表与位于 `subway` 数据库中的 `subway_system` 表连接起来。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to select data from two tables and display
    that data in a single result set using various joins offered by MySQL. In [Chapter
    6](c06.xhtml), you’ll build on this knowledge by performing even more complex
    joins involving multiple tables.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何从两个表中选择数据，并使用 MySQL 提供的各种连接将数据显示在一个结果集中。在[第6章](c06.xhtml)，您将通过执行涉及多个表的更复杂连接来扩展这些知识。
