- en: Chapter 6. Deployment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章 部署
- en: Now that you’ve built an application, let’s put it on the Web for everyone to
    see. Rails applications can be deployed in many ways. Rails runs on everything
    from simple shared hosting to dedicated servers to virtual servers in the cloud.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经构建了一个应用程序，我们来把它放到网上供大家查看。Rails 应用程序可以通过多种方式部署。Rails 可以运行在从简单的共享主机到专用服务器，再到云端虚拟服务器等各种环境中。
- en: The cloud application platform known as Heroku is one of the easiest ways to
    deploy your application, and I cover it in this chapter. Heroku uses the Git version
    control system to deploy applications, so we need to talk about version control
    systems first.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 被称为 Heroku 的云应用平台是部署应用程序最简单的方法之一，我将在本章中讲解它。Heroku 使用 Git 版本控制系统来部署应用程序，所以我们需要先讨论版本控制系统。
- en: Version Control
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制
- en: A *version control system (VCS)* records changes to files over time so you can
    easily go back to a specific version later. The *repository* is the data structure,
    usually stored on a server, that holds a copy of the files in the VCS and a historical
    list of changes to those files. With a VCS, you can make changes to your source
    code knowing that you can always go back to the last working version.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*版本控制系统 (VCS)* 会记录文件随时间变化的情况，因此你可以轻松地回到某个特定版本。*版本库*是一个数据结构，通常存储在服务器上，保存了 VCS
    中文件的副本和这些文件的历史变化列表。使用 VCS 时，你可以在修改源代码时，知道自己始终可以回到最后一个有效版本。'
- en: Originally, version control systems were *centralized*. That is, the source
    code repository was stored on a single server. Developers could connect to that
    server and check out files to make changes to the code. But centralized systems
    also have a single point of failure. Examples of centralized version control systems
    include the Concurrent Version System (CVS) and Subversion.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，版本控制系统是*集中式*的。也就是说，源代码库存储在单一的服务器上。开发者可以连接到该服务器并检出文件以对代码进行修改。但集中式系统也存在单点故障的问题。集中式版本控制系统的例子包括并发版本系统
    (CVS) 和 Subversion。
- en: The most popular type of version control system today is *distributed*. With
    a distributed version control system, each client stores a complete copy of the
    source code repository. That way, if a single client fails, everyone else can
    continue to work with no loss of data.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当今最流行的版本控制系统类型是*分布式*的。在分布式版本控制系统中，每个客户端都会存储源代码库的完整副本。这样，如果某个客户端出现故障，其他人仍然可以继续工作且不会丢失数据。
- en: In a distributed system, a central server is still commonly used. Developers
    *push* their changes to this server and *pull* changes made by other developers.
    Popular distributed version control systems include Git and Mercurial. Because
    Heroku uses Git to deploy applications, I’ll focus on Git.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在分布式系统中，通常仍会使用中央服务器。开发者将他们的更改*推送*到该服务器，并*拉取*其他开发者所做的更改。流行的分布式版本控制系统包括 Git 和
    Mercurial。由于 Heroku 使用 Git 部署应用程序，所以我将重点讲解 Git。
- en: Git
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git
- en: Git was originally developed by Linus Torvalds in 2005 for use with the Linux
    kernel. The word *git* is British slang for a despicable person. Torvalds once
    joked that he names all of his projects after himself.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Git 最初由 Linus Torvalds 于 2005 年为 Linux 内核开发。*git* 这个词是英国俚语，指的是一个可鄙的人。Torvalds
    曾开玩笑说，他将所有的项目都以自己命名。
- en: Git quickly spread beyond the Linux community, and most Ruby projects now use
    Git, including Ruby on Rails. If you don’t already have Git, installation instructions
    can be found in [Ruby, Rails, and Git](pr03.html#rubycomma_railscomma_and_git
    "Ruby, Rails, and Git").
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Git 很快便传播到 Linux 社区之外，现在大多数 Ruby 项目都使用 Git，包括 Ruby on Rails。如果你还没有安装 Git，可以在
    [Ruby, Rails, and Git](pr03.html#rubycomma_railscomma_and_git "Ruby, Rails, and
    Git") 中找到安装说明。
- en: Setup
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置
- en: 'Before you start using Git, set your name and email address. Open a terminal
    window and enter the following command to set your name:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用 Git 之前，设置你的名字和电子邮件地址。打开一个终端窗口并输入以下命令来设置你的名字：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `--global` flag tells Git to apply this change to your global configuration.
    Without this flag, the change would only apply to the current repository. Also,
    set your email address:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`--global` 标志告诉 Git 将此更改应用于全局配置。没有此标志时，更改仅会应用于当前版本库。同时，设置你的电子邮件地址：'
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now every time you commit a change, your name and email address is included,
    making it easy to see who made which changes when working with a team.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在每次提交更改时，你的名字和电子邮件地址都会被包含在内，这样在团队协作时就能轻松看到是谁在什么时候做了哪些更改。
- en: Getting Started
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: 'Now you’re ready to create a repository for the blog. Move to your *code/blog*
    directory and enter this command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经准备好为博客创建一个版本库了。进入你的*code/blog* 目录并输入以下命令：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This initializes an empty Git repository in the hidden *.git* subdirectory.
    Next, let’s add all of the application’s files to the repository:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这会在隐藏的 *.git* 子目录中初始化一个空的 Git 仓库。接下来，让我们将应用程序的所有文件添加到仓库中：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `add` command accepts a filename or directory path and adds it to Git’s
    staging area. Files in the staging area are ready to be committed to the repository.
    The dot in the command represents the current directory. So after you run this
    command, all files in the current directory and any subdirectories are ready to
    be committed. When you commit, Git takes a snapshot of the current state of your
    project and stores it in the repository.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`add` 命令接受文件名或目录路径，并将其添加到 Git 的暂存区。暂存区中的文件准备好提交到仓库。当你执行提交时，Git 会拍摄项目当前状态的快照，并将其存储在仓库中。命令中的点表示当前目录。因此，运行此命令后，当前目录及其任何子目录中的所有文件都准备好提交。'
- en: 'Now commit all staged files to the repository:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将所有已暂存的文件提交到仓库：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that I specified the commit message `"Initial commit"` with the `-m` flag
    ➊. If you leave off this flag, Git will open your default editor so you can type
    a commit message. If you do not type a commit message, the commit fails.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我通过 `-m` 标志指定了提交信息 `"Initial commit"` ➊。如果不加上此标志，Git 会打开你的默认编辑器，以便你输入提交信息。如果你没有输入提交信息，提交会失败。
- en: If you want to view the current repository’s commit history, enter the `git
    log` command. The list shows previous commits in order from newest to oldest.
    Each entry includes who made the commit and when, along with the commit message.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看当前仓库的提交历史，输入 `git log` 命令。列表按从最新到最旧的顺序显示之前的提交。每个条目都包括提交者和时间，以及提交信息。
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Each commit is represented by a unique 40-character hexadecimal hash ➊. These
    hashes can be abbreviated to the first seven characters—in this case, e393590—if
    you need to refer to this particular commit again.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每次提交都会由一个独特的 40 字符十六进制哈希值表示 ➊。这些哈希值可以缩写为前七个字符——在这个例子中是 e393590——如果你需要再次引用这个特定的提交。
- en: Basic Usage
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本用法
- en: 'As you work on a project using Git, follow this basic workflow:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Git 开发项目时，遵循这个基本的工作流：
- en: Edit local files as needed.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据需要编辑本地文件。
- en: Stage files to be committed with the `git add` command.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `git add` 命令将文件暂存，以便提交。
- en: Commit the changes to the repository with the `git commit` command.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `git commit` 命令将更改提交到仓库。
- en: You can commit changes to Git as often as you like, but I find it helpful to
    commit changes related to a single simple feature or bug fix together. That way,
    all of the changes are tied to one commit, making it easier to revert and remove
    a feature if necessary. It’s also a good idea to commit any outstanding changes
    at the end of a working session.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以根据需要频繁提交更改，但我发现将与单一简单功能或 bug 修复相关的更改一起提交会更有帮助。这样，所有更改都与一个提交绑定，若需要回滚或移除某个功能时会更容易。结束一个工作会话时，提交所有未完成的更改也是个好主意。
- en: Other Useful Commands
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他有用的命令
- en: Git contains many additional commands; enter `git --help` to see a list of those
    you’ll use most often. You’ve already seen the `init`, `add`, `commit`, and `log`
    commands, but here are a few more that you’ll find particularly useful as you
    navigate Git.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Git 包含许多额外的命令；输入 `git --help` 查看最常用的命令列表。你已经见过 `init`、`add`、`commit` 和 `log`
    命令，但这里还有一些在使用 Git 时特别有用的命令。
- en: 'The `git status` command displays a list of changed and new files:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`git status` 命令显示已更改和新增文件的列表：'
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In this case, nothing has changed. Edit a file in your project, *README.rdoc,*
    for example, and then enter the `git status` command again:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，没有任何更改。编辑项目中的文件，例如 *README.rdoc*，然后再次输入 `git status` 命令：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `git status` command shows the current state of your working directory and
    staging area. Here, it lists all files that have been staged for commit and files
    with changes that have not been staged for commit ➊.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`git status` 命令显示当前工作目录和暂存区的状态。在这里，它列出了所有已暂存以待提交的文件，以及那些未暂存但有更改的文件 ➊。'
- en: 'The `git diff` command shows detailed changes to files:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`git diff` 命令显示文件的详细更改：'
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, I changed the word *README* to *Blog* ➊ on the first line of the file.
    Use this command before `git add` to see exactly what changes will be staged for
    commit. You can also pass a filename to this command if you only care about changes
    to a single file.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我将文件第一行中的 *README* 改为 *Blog* ➊。使用此命令可以在执行 `git add` 之前查看将要提交的具体更改。如果只关心单个文件的更改，也可以将文件名传递给此命令。
- en: 'The `git checkout` command can undo changes to a file:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`git checkout` 命令可以撤销文件的更改：'
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, I’ve discarded the changes to the file *README.rdoc* by using `git checkout`
    followed by two dashes and the filename ➊. This command does not produce any output.
    Then I used `git status` to confirm that the change had been discarded.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我通过使用 `git checkout` 后跟两个破折号和文件名 ➊ 来丢弃对 *README.rdoc* 文件的更改。此命令没有产生任何输出。然后，我使用
    `git status` 确认更改已被丢弃。
- en: 'The `git clone` command makes a local copy of a remote repository:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`git clone` 命令会创建一个远程仓库的本地副本：'
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The remote repository is represented by *`<url>`*. Git is a great tool for collaboration
    and is used by many open-source projects. This command makes that possible. Before
    you start working on an existing project, you *clone* a copy of the repository
    to your computer.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 远程仓库由 *`<url>`* 表示。Git 是一个非常适合协作的工具，许多开源项目都在使用它。这个命令使得这一切成为可能。在你开始处理一个现有项目之前，你需要
    *克隆* 该仓库的副本到你的电脑上。
- en: Branches
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分支
- en: You may have noticed that the `git status` command includes the phrase, “On
    branch master.” In Git, a *branch* is a named set of changes. The default branch
    is called *master*. It represents the main line of development. The changes I’ve
    made so far have all been committed to the master branch.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到 `git status` 命令中包含了“On branch master”这一短语。在 Git 中，*分支* 是一组命名的更改。默认分支被称为
    *master*，它代表了开发的主线。到目前为止，我所做的所有更改都已提交到主分支。
- en: If you’re working on a large feature that may take some time to complete, you
    can create a separate branch to store changes you’re working on without affecting
    the master branch. This way, you can work on your own branch without impacting
    the rest of your team. Once the new feature is complete, you’ll *merge* your new
    branch back into the master branch.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在处理一个可能需要较长时间完成的大功能，你可以创建一个单独的分支来存储正在进行的更改，而不会影响主分支。这样，你可以在自己的分支上工作，而不会影响团队的其他成员。一旦新功能完成，你将
    *合并* 你的新分支到主分支。
- en: 'Use the `git branch` command followed by a branch name of your choice to create
    a new branch. In this example, I’ll call my branch *testing*:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `git branch` 命令后跟你选择的分支名称来创建一个新分支。在这个示例中，我将我的分支命名为 *testing*：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Enter the `git branch` command without specifying a name to see a list of the
    branches that currently exist in the repository:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 输入 `git branch` 命令而不指定分支名称，可以查看当前仓库中已存在的所有分支：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The star shows the currently selected branch. I created a new branch, but I’m
    still looking at the master branch. To switch to a different branch, use the `git
    checkout` command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 星号显示的是当前选中的分支。我创建了一个新分支，但我仍然在查看主分支。要切换到另一个分支，使用 `git checkout` 命令：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now I’m on the testing branch. Changes committed here will not affect the master
    branch. Once you are finished making changes, `checkout` the master branch and
    merge your changes into it:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我在 testing 分支上。在这里提交的更改不会影响主分支。完成更改后，`checkout` 主分支并将你的更改合并到主分支中：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'All of the changes from the testing branch are now also in the master branch.
    You can confirm this with the `git log` command. Now that you’re finished with
    the testing branch, add the `-d` flag to the `git branch` command to delete it:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 testing 分支的所有更改现在也出现在主分支上。你可以使用 `git log` 命令确认这一点。现在你已经完成了 testing 分支的工作，使用
    `-d` 标志将 `git branch` 命令删除它：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You don’t have to delete branches after they have been merged, but doing so
    keeps the list of branches clean.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在分支合并后你不必删除分支，但删除它们可以保持分支列表的清晰。
- en: Remotes
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 远程
- en: 'So far, all of our changes have been stored locally, but you should store an
    additional copy of your repository on another server as a backup and to make it
    easier for others to clone your repository. To do this, you need to set up a remote.
    A *remote* is simply a nickname for another repository at a specific URL. Use
    the `git remote add` command to associate a nickname with a URL:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的所有更改都存储在本地，但你应该在另一服务器上存储一份仓库的备份副本，并且便于其他人克隆你的仓库。为此，你需要设置一个远程仓库。*远程*
    只是另一个仓库在特定 URL 上的昵称。使用 `git remote add` 命令将昵称与 URL 关联起来：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Once you have added a remote, use the `git push` command to send changes to
    the URL and the `git pull` command to retrieve changes made remotely. You’ll see
    a real-world example of this in the next section.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你添加了远程仓库，使用 `git push` 命令将更改发送到远程仓库，使用 `git pull` 命令来获取远程的更改。在下一节中，你将看到这个操作的实际示例。
- en: Heroku
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Heroku
- en: Heroku is a cloud application platform for deploying web applications. This
    type of platform is sometimes referred to as a *Platform as a Service (PaaS)*,
    meaning Heroku takes care of server configuration and management so you can focus
    on application development. The service also includes an extensive collection
    of add-ons. Getting started is free, but large applications requiring more processor
    resources and memory can get expensive.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku是一个云应用程序平台，用于部署Web应用程序。这种平台有时被称为*平台即服务（PaaS）*，意味着Heroku负责服务器配置和管理，这样你就可以专注于应用程序开发。该服务还包括一系列丰富的附加组件。开始使用是免费的，但需要更多处理器资源和内存的大型应用程序可能会变得非常昂贵。
- en: After some initial setup, you can use a `git push` command to deploy your application
    and access it on the Web.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 完成初步设置后，你可以使用`git push`命令部署你的应用程序，并在网页上访问它。
- en: Getting Started
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用
- en: First, sign up for a free account at *[http://www.heroku.com](http://www.heroku.com)*.
    Remember the password you select; you’ll need it again to log in.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在*【http://www.heroku.com】(http://www.heroku.com)*注册一个免费账户。记住你选择的密码；你需要它来登录。
- en: Next, install the Heroku Toolbelt if you haven’t already (see *[http://toolbelt.heroku.com/](http://toolbelt.heroku.com/)*
    for instructions). The Toolbelt is Heroku’s set of tools for deploying your application
    to its platform.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，如果你还没有安装Heroku Toolbelt，请安装它（有关说明，请参见*【http://toolbelt.heroku.com/】(http://toolbelt.heroku.com/)*）。Toolbelt是Heroku提供的一组工具，用于将你的应用程序部署到Heroku平台。
- en: 'Now, open a terminal window, navigate to your blog directory, and log in to
    Heroku:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开终端窗口，导航到你的博客目录，并登录Heroku：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This command prompts you for your email address and the password you created
    earlier, and then it checks your computer for an existing secure shell (SSH) public
    key. Your public key is one half of the public/private key pair used to authenticate
    over SSH. When you attempt to log on, your private key is used to make a cryptographic
    digital signature. Heroku then uses your public key to verify this digital signature
    and confirm your identity.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令会提示你输入你的电子邮件地址和之前创建的密码，然后它会检查你电脑上是否存在有效的安全外壳（SSH）公钥。你的公钥是用于通过SSH身份验证的公私钥对的一部分。当你尝试登录时，你的私钥会用于生成一个加密数字签名。Heroku随后使用你的公钥验证该数字签名，从而确认你的身份。
- en: If you don’t already have a public key, press **Y** to create one when prompted.
    Your public key is automatically uploaded to Heroku after it is created. Heroku
    uses your public key for authentication so you don’t have to type your password
    every time you deploy your application.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有公钥，在提示时按**Y**以创建一个。公钥创建后会自动上传到Heroku。Heroku使用你的公钥进行身份验证，这样你每次部署应用程序时就不需要输入密码。
- en: Now that you’ve logged in to Heroku, you need to prepare your application for
    deployment.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经登录到Heroku，你需要准备好你的应用程序进行部署。
- en: Updating Your Gemfile
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新你的Gemfile
- en: No matter what kind of application you’re building, you need to install certain
    gems to interface with Heroku and deploy your application. In this section, we’ll
    look at the two gems you need to add to your application’s *Gemfile*.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你正在构建什么类型的应用程序，你都需要安装某些gem来与Heroku交互并部署你的应用程序。在这一部分，我们将讨论你需要添加到应用程序的*Gemfile*中的两个gem。
- en: Heroku’s servers use the PostgreSQL database server. Rather than install PostgreSQL
    locally, we used SQLite for development. You’ll need to ensure that the PostgreSQL
    gem, called simply pg, is installed in the production environment.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku的服务器使用PostgreSQL数据库服务器。我们在本地使用SQLite进行开发，而不是安装PostgreSQL。你需要确保在生产环境中安装名为pg的PostgreSQL
    gem。
- en: Heroku also requires the rails_12factor gem, which ensures that your application’s
    assets can be served by Heroku’s servers and that your application’s log files
    are sent to the correct place.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku还需要rails_12factor gem，它确保Heroku的服务器可以提供你的应用程序的资产，并确保你的应用程序的日志文件被发送到正确的位置。
- en: 'Open the file *Gemfile* in the root of your Rails application and locate the
    line `gem ''sqlite3''`. You’ll use the PostgreSQL gem in production, but you still
    need the SQLite gem for development and testing, so update this line by adding
    `group: [:development, :test]` as shown here:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '打开位于Rails应用程序根目录下的文件*Gemfile*，找到`gem ''sqlite3''`这一行。你将在生产环境中使用PostgreSQL gem，但你仍然需要SQLite
    gem用于开发和测试，因此更新这一行，按照如下所示添加`group: [:development, :test]`：'
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This instructs the `bundle` command to install this gem only in the development
    and test environments.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这条指令告诉`bundle`命令仅在开发和测试环境中安装该gem。
- en: 'Now you need to install the pg and rails_12factor gems just mentioned. You
    only need these gems in the production environment, so add these next lines below
    the line you just updated:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你需要安装前面提到的 `pg` 和 `rails_12factor` gem。你只需要在生产环境中使用这些 gem，因此在你刚刚更新的那一行下面添加以下几行：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Once you’ve made these changes, save and close the *Gemfile*. Because you’ve
    changed your application’s *Gemfile*, run the `bundle` command again to update
    dependencies.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在你做完这些更改后，保存并关闭 *Gemfile*。因为你更改了应用的 *Gemfile*，需要重新运行 `bundle` 命令来更新依赖。
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Because you’re running this command locally, where you develop and test your
    application, you don’t need to install production environment gems, so add the
    `--without production` flag. Bundler remembers flags passed to `bundle install`,
    so `--without production` is assumed every time you run the command from now on.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你是在本地运行此命令，进行应用的开发和测试，所以你不需要安装生产环境的 gem，因此需要添加 `--without production` 标志。Bundler
    会记住传递给 `bundle install` 的标志，因此从现在开始每次运行该命令时，都会默认使用 `--without production`。
- en: 'Finally, you need to add and commit these changes to your Git repository. Enter
    these commands to update Git with your changes:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你需要将这些更改添加并提交到你的 Git 仓库。输入以下命令来更新 Git：
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You could enter any message in place of *Update Gemfile for Heroku*, but commit
    messages are more helpful when they describe what you’ve changed.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 *Update Gemfile for Heroku* 位置输入任何消息，但提交信息在描述你所做更改时会更有帮助。
- en: 'Now, your account is set up, and your application is nearly ready to deploy.
    The last step is to create an application on Heroku:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的账户已经设置好了，应用也几乎准备好部署。最后一步是创建一个 Heroku 应用：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This command ➊ creates a new application on Heroku’s servers with a randomly
    generated name. You could have specified a name after the `create` command, but
    the name must be unique. You can always change the name later if you want. The
    `create` command also ➋ sets up a Git remote named `heroku` for you automatically.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令 ➊ 在 Heroku 的服务器上创建一个具有随机生成名称的新应用。你本可以在 `create` 命令后指定一个名称，但该名称必须是唯一的。如果需要，你可以稍后更改名称。`create`
    命令还 ➋ 为你自动设置了一个名为 `heroku` 的 Git 远程仓库。
- en: Deploying Your Application
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署你的应用
- en: 'Everything is ready now, so you can finally deploy your application. Use the
    `git push` command to push the current state of your master branch to Heroku:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一切准备就绪，现在你可以最终部署你的应用了。使用 `git push` 命令将主分支的当前状态推送到 Heroku：
- en: '[PRE23]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Heroku recognizes this `git push` command and automatically detects that a Ruby
    on Rails application is being deployed, installs the production gems specified
    in your *Gemfile*, updates your application’s database configuration, precompiles
    your application’s assets, and launches your application.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku 会识别这个 `git push` 命令，并自动检测到正在部署一个 Ruby on Rails 应用，安装 `Gemfile` 中指定的生产环境
    gem，更新应用的数据库配置，预编译应用的资源，并启动应用。
- en: 'When you deploy any application for the first time, you also need to run database
    migrations to create the database tables needed by your application in Heroku’s
    database server. Use the `heroku run` command to execute the `rake db:migrate`
    command on Heroku’s server:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次部署应用时，还需要运行数据库迁移，以便在 Heroku 的数据库服务器中创建应用所需的数据库表。使用 `heroku run` 命令在 Heroku
    服务器上执行 `rake db:migrate` 命令：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If you make more database changes to your application, remember to commit the
    changes to the master branch in Git, push the master branch to Heroku, and run
    this command again.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对应用进行了更多的数据库更改，记得将更改提交到 Git 的主分支，推送主分支到 Heroku，并再次运行此命令。
- en: 'Now you can open your web browser to the URL Heroku created for you earlier,
    or you can let Heroku handle that for you by entering this command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以打开网页浏览器，访问 Heroku 为你创建的 URL，或者通过输入以下命令让 Heroku 为你处理：
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Your default web browser should open and load your blog application automatically.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你的默认网页浏览器应该会自动打开并加载你的博客应用程序。
- en: Now that your application is set up on Heroku, you can deploy any time you want
    by committing changes to your Git repository and pushing the changes to Heroku.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的应用已经在 Heroku 上设置好了，你可以随时通过提交更改到 Git 仓库并将更改推送到 Heroku 来进行部署。
- en: Github
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Github
- en: Any discussion of Git in a Rails book is incomplete without at least a mention
    of GitHub. *GitHub* is the number one source code host in the world. GitHub provides
    project management features such as wikis, issue tracking, and code review via
    pull requests.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Rails 书籍中讨论 Git 时，如果没有至少提到 GitHub，那将是不完整的。*GitHub* 是全球最大的源代码托管平台。GitHub 提供项目管理功能，如维基、问题追踪和通过拉取请求进行代码审查。
- en: The Rails community has embraced GitHub as the best place for collaborating
    on open-source software. Rails itself is hosted on GitHub at *[https://github.com/rails/rails/](https://github.com/rails/rails/)*.
    Sign up for a free account, if you don’t already have one, and join the community!
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 社区已将 GitHub 作为协作开源软件的最佳平台。Rails 本身托管在 GitHub 上，地址是 *[https://github.com/rails/rails/](https://github.com/rails/rails/)*。如果你还没有
    GitHub 账户，快去注册一个免费账户，加入这个社区吧！
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Your blog is now safely stored in the Git distributed version control system.
    Changes to your source code are being tracked and can be easily undone. You blog
    is also available to the world via Heroku. Now you can deploy new features with
    a `git push` command.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你的博客现在已安全地存储在 Git 分布式版本控制系统中。对源代码的更改正在被跟踪，并且可以轻松撤销。你的博客也通过 Heroku 对全世界可用。现在，你可以通过
    `git push` 命令来部署新功能。
- en: Part I Remarks
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一部分备注
- en: This chapter marks the end of the first part of this book. We’ve covered the
    fundamentals of Ruby and Rails. Models represent your application’s data; views
    are the user interface for your application; and controllers are the glue that
    holds them together. You’ll use these concepts to build any application you want.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 本章标志着本书第一部分的结束。我们已经覆盖了 Ruby 和 Rails 的基础知识。模型代表你应用的数据；视图是你应用的用户界面；控制器是将它们连接在一起的粘合剂。你将使用这些概念来构建任何你想要的应用。
- en: Looking at the application you built in [Part I](pt01.html "Part I. Ruby on
    Rails Fundamentals"), you’ll find plenty of areas to improve. For example, anyone
    can edit or even delete posts on your blog. Also, what happens if you write thousands
    of posts? The index page will probably time out before it can display them all!
    You may not quite have the tools to fix those problems right now, but once you
    dive into [Part II](pt02.html "Part II. Building A Social Net Working App"), that
    will change.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 查看你在[第一部分](pt01.html "Part I. Ruby on Rails Fundamentals")构建的应用，你会发现有很多可以改进的地方。例如，任何人都可以编辑甚至删除你博客上的帖子。而且，如果你写了成千上万的帖子，会发生什么呢？索引页面可能会在显示所有帖子之前就超时！虽然你现在可能还没有足够的工具来解决这些问题，但一旦你深入学习[第二部分](pt02.html
    "Part II. Building A Social Net Working App")，情况就会有所不同。
- en: In the next part of this book, we’ll build a new social network application
    and cover advanced topics such as more complex data modeling, authentication,
    testing, security, performance optimizations, and debugging.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的下一部分，我们将构建一个新的社交网络应用，并讨论更高级的话题，如更复杂的数据建模、身份验证、测试、安全性、性能优化和调试。
- en: After learning these concepts, you’ll be able to solve these problems with the
    blog and build a variety of other applications.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 学习了这些概念后，你将能够解决博客中的这些问题，并构建各种其他应用。
- en: Exercises
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: '| Q: | 1\. Practice making changes to your application, adding and committing
    those changes to your local Git repository, and then pushing the changes to Heroku.
    Many Rails developers deploy multiple times per day, so familiarize yourself with
    this process. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 问： | 1\. 练习对你的应用进行修改，添加并提交这些更改到你的本地 Git 仓库，然后将更改推送到 Heroku。许多 Rails 开发者每天会进行多次部署，因此请熟悉这个过程。
    |'
- en: '| Q: | 2\. Create an account on GitHub, learn how create a new repository on
    its servers, and push your application. GitHub has an online help area that walks
    you through the process if you have any trouble. Also, use GetHub’s Explore feature
    to see the repositories of popular projects on its servers. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| 问： | 2\. 在 GitHub 上创建一个账户，学习如何在其服务器上创建一个新的仓库，并将你的应用推送到 GitHub。GitHub 提供了一个在线帮助区域，如果你遇到任何问题，可以参考这个帮助来完成操作。另外，使用
    GitHub 的 Explore 功能来查看其服务器上流行项目的仓库。 |'
- en: '| Q: | 3\. Finally, see if you can “scratch your own itch.” Create a simple
    Rails application based on one of your interests. Create a catalog of your favorite
    books, or maybe an application to track your vinyl collection. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| 问： | 3\. 最后，看看你能否“解决你自己的痛点”。基于你的兴趣，创建一个简单的 Rails 应用。比如，创建一个你最喜欢书籍的目录，或者一个用来追踪你黑胶唱片收藏的应用。
    |'
