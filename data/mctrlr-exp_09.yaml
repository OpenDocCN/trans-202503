- en: '**9 nRF51 Gadgets in ROM**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**9 nRF51 ROM 中的工具**'
- en: First documented in Brosch (2015), this chapter describes an exploit for extracting
    protected memory from the nRF51822 despite code protection features. The vulnerability
    is that while the debugger cannot read protected memory directly or write shellcode
    to SRAM, it can single-step through the protected code in flash memory.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章首次在 Brosch（2015）中记录，描述了尽管有代码保护功能，如何从 nRF51822 中提取受保护的内存。其漏洞在于，尽管调试器不能直接读取受保护的内存或将
    Shellcode 写入 SRAM，但它可以逐步执行闪存中的受保护代码。
- en: Although this version is described for the nRF51 series, a similar bug is described
    in Obermaier, Schink, and Moczek (2020) for the CKS32F103 and GD32VF103, which
    are clones of the popular STM32F103\. Kovrizhnykh (2023) notes that the SN32F248B
    from Sonix has been exploited by the same technique.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然此版本是针对 nRF51 系列描述的，但 Obermaier、Schink 和 Moczek（2020）在描述 CKS32F103 和 GD32VF103（这两款是流行的
    STM32F103 的克隆）时也提到了一种类似的漏洞。Kovrizhnykh（2023）指出，Sonix 的 SN32F248B 也曾被相同的技术利用。
- en: '**Learning All the Rules**'
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**学习所有规则**'
- en: The nRF51’s protection mechanism, documented in [Chapter 9](ch09.xhtml#ch09)
    of Nordic (2014), is built as an extension of the memory protection unit (MPU).
    An MPU is sort of like a memory management unit (MMU), except that it is coarser-grained
    and provides no support for virtual memory.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: nRF51 的保护机制在 [第 9 章](ch09.xhtml#ch09) 中有详细记录（Nordic，2014），它是内存保护单元（MPU）的扩展。MPU
    类似于内存管理单元（MMU），不过它的粒度较粗，并且不支持虚拟内存。
- en: The most common readout protection for this chip is called Protect All (`PALL`),
    which is configured by writing zero into the I/O port `UICR.RBPCONF.PAL`. This
    is designed to prevent the SWD debugger from accessing code region 0, code region
    1, RAM, or any peripherals except for the `NVMC` peripheral, the `RESET` register
    in the `POWER` peripheral, and the `DISABLEINDEBUG` register in the `MPU` peripheral.
    You will often see a bootloader perform this protection at every boot, but the
    protection persists. It is only necessary to apply the protection once.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 该芯片最常见的读取保护方式叫做“Protect All”（`PALL`），其配置方法是将零写入 I/O 端口 `UICR.RBPCONF.PAL`。此保护旨在防止
    SWD 调试器访问代码区域 0、代码区域 1、RAM 或任何外设，除了 `NVMC` 外设、`POWER` 外设中的 `RESET` 寄存器，以及 `MPU`
    外设中的 `DISABLEINDEBUG` 寄存器。你通常会看到引导加载程序在每次启动时执行此保护，但该保护是持续有效的。只需应用一次保护即可。
- en: '![Image](../images/f0100-01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0100-01.jpg)'
- en: 'Figure 9.1: NXP nRF51822'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1：NXP nRF51822
- en: '![Image](../images/f0101-01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0101-01.jpg)'
- en: 'Figure 9.2: nRF51822 Memory Map'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2：nRF51822 内存映射
- en: '![Image](../images/f0102-01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0102-01.jpg)'
- en: 'Figure 9.3: Brosch’s PoC nRF51822 Exploit'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3：Brosch 的 PoC nRF51822 漏洞利用
- en: There are also lesser protection modes, which restrict code region 1 from accessing
    code region 0\. The purpose of these modes is to protect soft devices, binary
    blob radio drivers that often require commercial licensing but still allow custom
    code to sit alongside. These blobs freely run in the lower region, and while the
    upper region can call into the lower, it cannot read that region as data.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些较低级的保护模式，这些模式限制代码区域 1 访问代码区域 0。此类模式的目的是保护软设备，这些设备是通常需要商业授权的二进制广播驱动程序，但仍允许自定义代码与其并行运行。这些二进制代码在较低区域自由运行，尽管上层区域可以调用下层区域，但不能将该区域作为数据读取。
- en: The reference manual also mentions that whatever the protection mode, CPU fetches
    from code memory will not be denied and that the interrupt table from `0x00` to
    `0x80` is not protected.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 参考手册还提到，不论保护模式如何，CPU 从代码内存中获取指令时不会被拒绝，并且从 `0x00` 到 `0x80` 的中断表不受保护。
- en: '**Bypassing the Rules**'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**绕过规则**'
- en: Now that we’ve covered the documented behavior of the protection, it’s necessary
    to experiment a bit and learn the unwritten rules. Kris Brosch discovered that
    by attaching a debugger to a locked chip, he had quite a bit of freedom to direct
    the CPU. He could read and write registers, including the program counter. He
    could also read from a few memory-mapped registers, such as the read-back protection
    configuration (`RBPCONF`) at `0x10001004`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们已经了解了保护的已记录行为之后，有必要做一些实验并学习未记录的规则。Kris Brosch 发现，通过将调试器连接到锁定的芯片，他获得了相当大的自由度来引导
    CPU。他可以读取和写入寄存器，包括程序计数器。他还可以读取一些内存映射寄存器，如 `0x10001004` 处的读取回保护配置（`RBPCONF`）。
- en: Most importantly, while he did not have the freedom to directly read from protected
    regions with the debugger, he was able to single-step through existing code, controlling
    registers both before an instruction (as inputs) and after that same instruction
    (as outputs).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，尽管他不能直接通过调试器从受保护区域读取，但他可以单步执行现有代码，控制指令前后的寄存器值（作为输入和输出）。
- en: He reset the chip, which loads the program counter and the stack pointer from
    the interrupt vector table, then read the program counter back as `0x000114cc`.
    So he knew that the value of the reset vector at `0x00000004` ought to be `0x000114cd`.
    (Odd pointers indicate Thumb2 mode in ARM, but the PC itself does not hold the
    odd value. Instead, that status bit is held in a status register.)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 他重置了芯片，这会从中断向量表加载程序计数器和堆栈指针，然后将程序计数器的值读取回来为`0x000114cc`。因此，他知道`0x00000004`处的复位向量值应该是`0x000114cd`。（奇数指针表示ARM的Thumb2模式，但程序计数器本身并不持有奇数值。相反，那个状态位被保存在状态寄存器中。）
- en: Knowing one word in memory, he then repeatedly loaded all of the registers with
    `0x00000004` and jumped the PC to new addresses until he saw `r3` change to `0x000114cd`,
    indicating an arbitrary read gadget!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 知道内存中的一个词后，他反复将所有寄存器加载为`0x00000004`，并将程序计数器跳转到新的地址，直到看到`r3`的值变化为`0x000114cd`，这表明出现了一个任意读取的小工具！
- en: 'The gadget was `ldr r3, [r3, #0]` and it appeared as the second instruction
    in the reset handler. Repeatedly jumping into this gadget with different values
    of `r3` will expose all memory.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '这个小工具是`ldr r3, [r3, #0]`，它出现在复位处理程序的第二条指令中。通过不同的`r3`值反复跳入这个小工具将暴露所有内存。'
- en: Brosch’s proof-of-concept can be found in [Figure 9.3](ch09.xhtml#ch9fig3).
    The telnet connection is to OpenOCD, and it assumes that the gadget is found in
    the reset handler. You’ll need to adjust it if the gadget is found elsewhere in
    your target.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Brosch的概念验证可以在[图9.3](ch09.xhtml#ch9fig3)中找到。telnet连接的是OpenOCD，假设小工具出现在复位处理程序中。如果小工具出现在目标的其他位置，你需要调整相应的设置。
