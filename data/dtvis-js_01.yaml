- en: Chapter 1. Graphing Data
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一章 图表数据
- en: Many people think of data visualization as intricate interactive graphics of
    dazzling complexity. Creating effective visualizations, however, doesn’t require
    Picasso’s artistic skill or Turing’s programming expertise. In fact, when you
    consider the ultimate purpose of data visualization—helping users *understand*
    data—simplicity is one of the most important features of an effective visualization.
    Simple, straightforward charts are often the easiest to understand.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人认为数据可视化是复杂的、交互性强的图形，充满了令人眼花缭乱的复杂性。然而，创建有效的可视化并不需要毕加索的艺术技能或图灵的编程专长。事实上，当你考虑数据可视化的最终目的——帮助用户*理解*数据时，简洁性是有效可视化最重要的特性之一。简单、直观的图表往往是最容易理解的。
- en: After all, users have seen hundreds or thousands of bar charts, line charts,
    X/Y plots, and the like. They know the conventions that underlie these charts,
    so they can interpret a well-designed example effortlessly. If a simple, static
    chart presents the data best, use it. You’ll spend less effort creating your visualization,
    and your users will spend less effort trying to understand it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 毕竟，用户已经看过成百上千个条形图、折线图、X/Y 图等。他们了解这些图表背后的惯例，因此可以毫不费力地解读设计良好的图表示例。如果一个简单、静态的图表最好地呈现数据，就使用它。你将花费更少的精力来创建可视化，而你的用户也将花费更少的精力去理解它。
- en: 'There are many high-quality tools and libraries to help you get started with
    simple visualizations. With these tools, you can avoid reinventing the wheel,
    and you can be assured of a reasonably attractive presentation by sticking with
    the library defaults. We’ll look at several of these tools throughout the book,
    but for this chapter we’ll use the Flotr2 library (*[http://www.humblesoftware.com/flotr2/](http://www.humblesoftware.com/flotr2/)*).
    Flotr2 makes it easy to add standard bar charts, line charts, and pie charts to
    any web page, and it also supports some less common chart types. We’ll take a
    look at all of these techniques in the examples that follow. Here’s what you’ll
    learn:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多高质量的工具和库可以帮助你开始制作简单的可视化。通过这些工具，你可以避免重复发明轮子，并且通过使用库的默认设置，确保呈现出相对吸引人的效果。我们将在本书中介绍这些工具中的一些，但在这一章我们将使用
    Flotr2 库（*[http://www.humblesoftware.com/flotr2/](http://www.humblesoftware.com/flotr2/)*）。Flotr2
    使得将标准的条形图、折线图和饼图添加到任何网页变得简单，它还支持一些不太常见的图表类型。我们将在接下来的例子中详细介绍这些技术。你将学到以下内容：
- en: How to create a basic bar chart
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建一个基本的条形图
- en: How to plot continuous data with a line chart
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何用折线图绘制连续数据
- en: How to emphasize fractions with a pie chart
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何用饼图突出显示比例
- en: How to plot X/Y data with a scatter chart
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何用散点图绘制 X/Y 数据
- en: How to show magnitudes of X/Y data with a bubble chart
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何用气泡图显示 X/Y 数据的大小
- en: How to display multidimensional data with a radar chart
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何用雷达图显示多维数据
- en: Creating a Basic Bar Chart
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建基本的条形图
- en: If you’re ever in doubt about what type of chart best explains your data, your
    first consideration should probably be the basic bar chart. We see bar charts
    so often that it’s easy to overlook how effective they can be. Bar charts can
    show the evolution of a value over time, or they can provide a straightforward
    comparison of multiple values. Let’s walk through the steps to build one.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对哪种类型的图表最能解释你的数据感到疑惑，首先考虑的可能应该是基本的条形图。我们常常看到条形图，以至于容易忽视它们的有效性。条形图可以显示一个值随时间的变化，或者提供多个值的直接比较。让我们逐步了解如何构建一个条形图。
- en: 'Step 1: Include the Required JavaScript'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 1：包含所需的 JavaScript
- en: Since we’re using the Flotr2 library to create the chart, we need to include
    that library in our web pages. The Flotr2 package isn’t currently popular enough
    for public content distribution networks, so you’ll need to download a copy and
    host it on your own web server. We’ll use the minimized version (flotr2.min.js)
    since it provides the best performance.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们使用 Flotr2 库来创建图表，所以需要在我们的网页中包含该库。Flotr2 包目前还不够流行，无法通过公共内容分发网络使用，因此你需要下载一个副本并将其托管在自己的
    web 服务器上。我们将使用最小化版本（flotr2.min.js），因为它提供最佳性能。
- en: 'Flotr2 doesn’t require any other JavaScript libraries (such as jQuery), but
    it does rely on the HTML canvas feature. Major modern browsers (Safari, Chrome,
    Firefox) support canvas, but until version 9, Internet Explorer (IE) did not.
    Unfortunately, there are still millions of users with IE8 (or even earlier). To
    support those users, we can include an additional library (excanvas.min.js) in
    our pages. That library is available from Google (*[https://code.google.com/p/explorercanvas/](https://code.google.com/p/explorercanvas/)*).
    Start with the following skeleton for your HTML document:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Flotr2 不需要任何其他 JavaScript 库（如 jQuery），但它依赖于 HTML canvas 特性。现代主流浏览器（如 Safari、Chrome、Firefox）都支持
    canvas，但直到 IE9 版本，Internet Explorer（IE）都不支持该特性。不幸的是，仍然有大量用户使用 IE8（甚至更早版本）。为了支持这些用户，我们可以在页面中包含一个额外的库（`excanvas.min.js`）。该库可以通过
    Google 获取 (*[https://code.google.com/p/explorercanvas/](https://code.google.com/p/explorercanvas/)*)。从以下
    HTML 骨架开始创建你的文档：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Since other browsers don’t need excanvas.min.js, we use some special markup
    at ➊ to make sure that only IE8 and earlier will load it. Also, notice that we’re
    including the JavaScript libraries at the end of the document. This approach lets
    the browser load the document’s entire HTML markup and begin laying out the page
    while it waits for the server to provide the JavaScript libraries.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其他浏览器不需要 `excanvas.min.js`，我们在 ➊ 使用了一些特殊的标记，确保只有 IE8 及更早版本会加载它。同时，请注意，我们将
    JavaScript 库放在文档的末尾进行加载。这种做法可以让浏览器在等待服务器提供 JavaScript 库的同时，先加载完整的 HTML 标记并开始布局页面。
- en: 'Step 2: Set Aside a <div> Element to Hold the Chart'
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 2 步：预留一个 `<div>` 元素来承载图表
- en: Within our document, we need to create a `<div>` element to contain the chart.
    This element must have an explicit height and width, or Flotr2 won’t be able to
    construct the chart. We can indicate the element’s size in a CSS style sheet,
    or we can place it directly on the element itself. Here’s how the document might
    look with the latter approach.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在文档中，我们需要创建一个 `<div>` 元素来包含图表。这个元素必须有明确的高度和宽度，否则 Flotr2 将无法构建图表。我们可以通过 CSS 样式表来指定元素的大小，或者直接在元素本身上设置。下面是使用后一种方法时，文档的可能样式。
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that we’ve given the `<div>` an explicit `id` (`"chart"`) so we can reference
    it later. You’ll need to use a basic template like this (importing the Flotr2
    library and setting up the `<div>`) for all the charts in this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已经给 `<div>` 元素指定了明确的 `id`（`"chart"`），以便稍后引用。你需要使用一个基本的模板（导入 Flotr2 库并设置
    `<div>`）来为本章中的所有图表进行设置。
- en: 'Step 3: Define the Data'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 3 步：定义数据
- en: Now we can tackle the data that we want to display. For this example, I’ll use
    the number of Manchester City wins in the English Premier League for the past
    seven years. Of course you’ll want to substitute your actual data values, either
    with inline JavaScript (like the following example) or by another means (such
    as an AJAX call to the server).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以处理要显示的数据了。在这个示例中，我将使用过去七年中曼城队在英格兰英超联赛中的胜场数。当然，你需要用实际的数据值替换它们，可以通过内联 JavaScript（如下示例）或其他方式（如通过
    AJAX 调用服务器）来实现。
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see, we have three layers of arrays. Let’s start from the inside
    and work our way out. For Flotr2 charts, each data point is entered in a two-item
    array with an x-value and y-value. In our case we’re using the year as the x-value
    and the number of wins as the y-value. We collect all these values in another
    array called a *series*. We place this series inside one more outer array. We
    could enter multiple series into this outer array, but for now we’re showing only
    one series. Here’s a quick summary of each layer:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们有三层数组结构。让我们从内层开始，一层一层地分析。对于 Flotr2 图表，每个数据点都以一个包含 x 值和 y 值的二元数组表示。在我们的例子中，我们使用年份作为
    x 值，胜场数作为 y 值。我们将所有这些值收集到另一个名为 *series* 的数组中。然后我们将这个 *series* 放入一个更外层的数组中。我们可以在这个外层数组中输入多个
    *series*，但现在我们只展示一个 *series*。下面是对每一层的简要总结：
- en: Each data point consists of an x-value and a y-value packaged in an array.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个数据点由一个 x 值和一个 y 值组成，并以数组的形式包装。
- en: Each series consists of a set of data points packaged in an array.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个 *series* 由一组数据点组成，并以数组的形式包装。
- en: The data to chart consists of one or more series packaged in an array.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于绘制图表的数据由一个或多个以数组形式包装的 *series* 组成。
- en: 'Step 4: Draw the Chart'
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 4 步：绘制图表
- en: That’s all the setup we need. A simple call to the Flotr2 library, as shown
    here, creates our first attempt at a chart.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们所需要的全部设置。只需简单调用 Flotr2 库，如下所示，就能创建我们第一次尝试的图表。
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'First we make sure the browser has loaded our document; otherwise, the `chart
    <div>` might not be present. That’s the point of `window.onload`. Once that event
    occurs, we call `Flotr.draw` with three parameters: the HTML element to contain
    the chart, the data for the chart, and any chart options (in this case, we specify
    options only to tell Flotr2 to create a bar chart from the data).'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们确保浏览器已经加载了文档；否则，`chart <div>` 可能不存在。这就是 `window.onload` 的作用。一旦事件发生，我们使用三个参数调用
    `Flotr.draw`：包含图表的 HTML 元素、图表的数据和任何图表选项（在这种情况下，我们只指定选项，以告诉 Flotr2 从数据中创建一个条形图）。
- en: Since Flotr2 doesn’t require jQuery, we haven’t taken advantage of any of jQuery’s
    shortcuts in this example. If your page already includes jQuery, you can use the
    standard jQuery conventions for the Flotr2 charts in this chapter to execute the
    script after the window has loaded, and to find the `<div>` container for the
    chart.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Flotr2 不需要 jQuery，我们在这个例子中没有利用 jQuery 的任何快捷方式。如果你的页面已经包含了 jQuery，你可以在本章中使用标准的
    jQuery 约定，确保在窗口加载后执行脚本，并找到图表的 `<div>` 容器。
- en: '[Figure 1-1](ch01.html#flotr2_library_turns_data_into_a_basic_l "Figure 1-1. The
    Flotr2 library turns data into a basic (if unpolished) bar chart.") shows what
    you’ll see on the web page.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-1](ch01.html#flotr2_library_turns_data_into_a_basic_l "图 1-1. Flotr2 库将数据转化为一个基本的（虽然未修饰的）条形图。")展示了你在网页上看到的内容。'
- en: '![The Flotr2 library turns data into a basic (if unpolished) bar chart.](figs/web/01fig01.png.jpg)Figure 1-1. The
    Flotr2 library turns data into a basic (if unpolished) bar chart.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![Flotr2 库将数据转化为一个基本的（虽然未修饰的）条形图。](figs/web/01fig01.png.jpg)图 1-1. Flotr2 库将数据转化为一个基本的（虽然未修饰的）条形图。'
- en: Now you have a bar chart, but it’s not showing the information very effectively.
    Let’s add some options incrementally until we get what we want.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了一个条形图，但它显示信息的效果并不好。让我们逐步添加一些选项，直到得到我们想要的效果。
- en: 'Step 5: Fix the Vertical Axis'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 5：修正垂直轴
- en: The most glaring problem with the vertical axis is its scale. By default, Flotr2
    automatically calculates the range of the axis from the minimum and maximum values
    in the data. In our case the minimum value is 11 wins (from 2007), so Flotr2 dutifully
    uses that as its y-axis minimum. In bar charts, however, it’s almost always best
    to make 0 the y-axis minimum. If you don’t use 0, you risk overemphasizing the
    differences between values and confusing your users. Anyone who glances at the
    chart in [Figure 1-1](ch01.html#flotr2_library_turns_data_into_a_basic_l "Figure 1-1. The
    Flotr2 library turns data into a basic (if unpolished) bar chart."), for example,
    might think that Manchester City did not win any matches in 2007\. That certainly
    wouldn’t do the team any justice.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直轴最明显的问题是其刻度。默认情况下，Flotr2 会根据数据中的最小值和最大值自动计算轴的范围。在我们的例子中，最小值是 2007 年的 11 场胜利，所以
    Flotr2 会忠实地将其作为 y 轴的最小值。然而，在条形图中，通常最好将 0 设置为 y 轴的最小值。如果不使用 0，你就可能过度强调数值之间的差异，给用户造成困惑。举个例子，任何快速浏览[图
    1-1](ch01.html#flotr2_library_turns_data_into_a_basic_l "图 1-1. Flotr2 库将数据转化为一个基本的（虽然未修饰的）条形图。")的人，可能会认为曼城在
    2007 年没有赢得任何比赛。那显然不会对球队产生正面影响。
- en: Another problem with the vertical axis is the formatting. Flotr2 defaults to
    a precision of one decimal place, so it adds the superfluous “.0” to all the labels.
    We can fix both of these problems by specifying some y-axis options.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个与垂直轴相关的问题是格式化。Flotr2 默认精确到小数点后一位，所以它会给所有标签添加多余的“.0”。我们可以通过指定一些 y 轴选项来解决这两个问题。
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `min` property sets the minimum value for the y-axis, and the `tickDecimals`
    property tells Flotr2 how many decimal places to show for the labels. In our case
    we don’t want any decimal places.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`min` 属性设置 y 轴的最小值，`tickDecimals` 属性告诉 Flotr2 在标签中显示多少位小数。在我们的例子中，我们不希望显示小数位。'
- en: As you can see in [Figure 1-2](ch01.html#simple_options_help_flotr2_construct_a_b
    "Figure 1-2. Simple options help Flotr2 construct a better vertical axis."), adding
    these options definitely improves the vertical axis since the values now start
    at zero and are formatted appropriately for integers.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在[图 1-2](ch01.html#simple_options_help_flotr2_construct_a_b "图 1-2. 简单的选项帮助
    Flotr2 构建更好的垂直轴。")中看到的，添加这些选项确实改善了垂直轴，因为现在数值从零开始，并且格式适用于整数。
- en: '![Simple options help Flotr2 construct a better vertical axis.](figs/web/01fig02.png.jpg)Figure 1-2. Simple
    options help Flotr2 construct a better vertical axis.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![简单的选项帮助 Flotr2 构建更好的垂直轴。](figs/web/01fig02.png.jpg)图 1-2. 简单的选项帮助 Flotr2
    构建更好的垂直轴。'
- en: 'Step 6: Fix the Horizontal Axis'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 6：修正横轴
- en: The horizontal axis needs some work as well. Just as with the y-axis, Flotr2
    assumes that the x-axis values are real numbers and shows one decimal place in
    the labels. Since we’re charting years, we could simply set the precision to 0,
    as we did for the y-axis. But that’s not a very general solution, since it won’t
    work when the x-values are non-numeric categories (like team names). For the more
    general case, let’s first change our data to use simple numbers rather than years
    for the x-values. Then we’ll create an array that maps those simple numbers to
    arbitrary strings, which we can use as labels.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 水平轴也需要一些调整。与y轴一样，Flotr2假定x轴值是实数，并在标签中显示一位小数。由于我们绘制的是年份，完全可以像处理y轴一样将精度设置为0。但是，这并不是一个通用的解决方案，因为当x值是非数字类别（例如团队名称）时，这个方法就不起作用。为了处理更一般的情况，我们首先将数据更改为使用简单的数字而不是年份作为x值。然后，我们将创建一个数组，将这些简单的数字映射到任意字符串，作为标签使用。
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, instead of using the actual years for the x-values, we’re simply
    using 0, 1, 2, and so on. We then define a second array that maps those integer
    values to strings. Although here our strings are years (and thus numbers), they
    could be anything.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，x值不再使用实际的年份，而是简单地使用0、1、2，依此类推。然后我们定义了一个第二个数组，将这些整数值映射到字符串。虽然这里我们的字符串是年份（因此是数字），但它们可以是任何东西。
- en: Another problem is a lack of spacing between the bars. By default, each bar
    takes up its full horizontal space, but that makes the chart look very cramped.
    We can adjust that with the `barWidth` property. Let’s set it to `0.5` so that
    each bar takes up only half the available space.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是条形之间缺乏间距。默认情况下，每个条形占据它的全部水平空间，但这使得图表看起来非常拥挤。我们可以通过`barWidth`属性来调整这一点。我们将其设置为`0.5`，使每个条形仅占用一半的可用空间。
- en: Here’s how we pass those options to Flotr2.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们如何将这些选项传递给Flotr2。
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note at ➊ that we use the `ticks` property of the x-axis to tell Flotr2 which
    labels match which x-values. Now we’re starting to get somewhere with our chart,
    as shown in [Figure 1-3](ch01.html#we_can_define_our_own_labels_for_the_hor "Figure 1-3. We
    can define our own labels for the horizontal axis."). The x-axis labels are appropriate
    for years, and there is space between the bars to improve the chart’s legibility.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意➊，我们使用x轴的`ticks`属性来告诉Flotr2哪些标签对应哪些x值。现在我们的图表开始有了进展，如[图1-3](ch01.html#we_can_define_our_own_labels_for_the_hor
    "图1-3. 我们可以为水平轴定义自己的标签。")所示。x轴标签适用于年份，并且条形之间有间隔，以提高图表的可读性。
- en: '![We can define our own labels for the horizontal axis.](figs/web/01fig03.png.jpg)Figure 1-3. We
    can define our own labels for the horizontal axis.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![我们可以为水平轴定义自己的标签。](figs/web/01fig03.png.jpg)图1-3. 我们可以为水平轴定义自己的标签。'
- en: 'Step 7: Adjust the Styling'
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤7：调整样式
- en: Now that the chart is functional and readable, we can pay some attention to
    the aesthetics. Let’s add a title, get rid of the unnecessary grid lines, and
    adjust the coloring of the bars.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在图表功能齐全且可读，我们可以开始关注美学方面的调整。让我们添加标题，去除不必要的网格线，并调整条形的颜色。
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see in [Figure 1-4](ch01.html#additional_options_let_us_adjust_the_vis
    "Figure 1-4. Additional options let us adjust the visual styles of the chart."),
    we now have a bar chart that Manchester City fans can be proud of.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图1-4](ch01.html#additional_options_let_us_adjust_the_vis "图1-4. 其他选项让我们调整图表的视觉样式")所示，现在我们有了一张曼城球迷可以骄傲的条形图。
- en: '![Additional options let us adjust the visual styles of the chart.](figs/web/01fig04.png.jpg)Figure 1-4. Additional
    options let us adjust the visual styles of the chart.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![其他选项让我们调整图表的视觉样式。](figs/web/01fig04.png.jpg)图1-4. 其他选项让我们调整图表的视觉样式。'
- en: For any data set of moderate size, the standard bar chart is often the most
    effective visualization. Users are already familiar with its conventions, so they
    don’t have to put any extra effort into understanding the format. The bars themselves
    offer a clear visual contrast with the background, and they use a single linear
    dimension (height) to show differences between values, so users easily grasp the
    salient data.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何中等大小的数据集，标准条形图通常是最有效的可视化方式。用户已经熟悉其惯例，因此不需要额外的精力去理解格式。条形本身与背景形成了清晰的视觉对比，并使用一个线性维度（高度）来显示数值之间的差异，因此用户能够轻松理解突出的数据。
- en: 'Step 8: Vary the Bar Color'
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤8：变化条形颜色
- en: So far our chart has been monochromatic. That makes sense because we’re showing
    the same value (Manchester City wins) across time. But bar charts are also good
    for comparing different values. Suppose, for example, we wanted to show the total
    wins for multiple teams in one year. In that case, it makes sense to use a different
    color for each team’s bar. Let’s go over how we can do that.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的图表是单色的。这是合理的，因为我们在展示的是同一个值（曼城的胜利）随时间的变化。但条形图同样适合用来比较不同的值。假设我们想要展示多个团队在同一年中的总胜场数，那么为每个团队的条形图使用不同的颜色就显得很有意义。接下来，让我们看看如何做到这一点。
- en: First we need to restructure the data somewhat. Previously we’ve shown only
    a single series. Now we want a different series for each team. Creating multiple
    series lets Flotr2 color each independently. The following example shows how the
    new data series compares with the old. We’ve left the `wins` array in the code
    for comparison, but it’s the `wins2` array that we’re going to show now. Notice
    how the nesting of the arrays changes. Also, we’re going to label each bar with
    the team abbreviation instead of the year.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要稍微调整数据结构。之前我们只显示了一个系列。现在，我们希望每个团队都有一个不同的系列。创建多个系列使Flotr2能够独立为每个系列上色。以下示例展示了新旧数据系列的对比。我们保留了代码中的`wins`数组作为对比，但现在要展示的是`wins2`数组。注意数组的嵌套方式发生了变化。此外，我们将用团队缩写标签替代年份来标注每个条形。
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With those changes, our data is structured appropriately, and we can ask Flotr2
    to draw the chart. When we do that, let’s use different colors for each team.
    Everything else is the same as before.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些更改，我们的数据结构得到了适当的调整，现在可以请求Flotr2绘制图表。做这些时，我们将为每个团队使用不同的颜色。其他一切与之前相同。
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see in [Figure 1-5](ch01.html#bar_charts_can_compare_different_quantit
    "Figure 1-5. Bar charts can compare different quantities at one point in time
    as well as the same quantity at different points in time."), with a few minor
    adjustments we’ve completely changed the focus of our bar chart. Instead of showing
    a single team at different points in time, we’re now comparing different teams
    at the same point in time. That’s the versatility of a simple bar chart.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在[图1-5](ch01.html#bar_charts_can_compare_different_quantit "图1-5. 条形图可以在同一时间点比较不同数量，也可以比较在不同时间点的相同数量.")中所见，通过一些小的调整，我们已经完全改变了条形图的焦点。现在，我们不再显示一个团队在不同时间点的数据，而是在同一时间点比较不同的团队。这就是简单条形图的多功能性。
- en: '![Bar charts can compare different quantities at one point in time as well
    as the same quantity at different points in time.](figs/web/01fig05.png.jpg)Figure 1-5. Bar
    charts can compare different quantities at one point in time as well as the same
    quantity at different points in time.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![条形图可以在同一时间点比较不同数量，也可以比较在不同时间点的相同数量。](figs/web/01fig05.png.jpg)图1-5. 条形图可以在同一时间点比较不同数量，也可以比较在不同时间点的相同数量。'
- en: We’ve used a lot of different code fragments to put together these examples.
    If you want to see a complete example in a single file, check out this book’s
    source code at *[http://jsDataV.is/source/](http://jsDataV.is/source/)*.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了许多不同的代码片段来拼接这些示例。如果你想在一个文件中看到完整的示例，可以查看本书的源代码，地址是*[http://jsDataV.is/source/](http://jsDataV.is/source/)*。
- en: 'Step 9: Work Around Flotr2 “Bugs”'
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第9步：解决Flotr2“bug”
- en: 'If you’re building large web pages with a lot of content, you may run into
    a Flotr2 “bug” that can be quite annoying. I’ve put “bug” in quotation marks because
    the Flotr2 behavior is deliberate, but I believe it’s not correct. In the process
    of constructing its charts, Flotr2 creates dummy HTML elements so it can calculate
    their sizes. Flotr2 doesn’t intend these dummy elements to be visible on the page,
    so it “hides” them by positioning them off the screen. Unfortunately, what Flotr2
    thinks is off the screen isn’t always. Specifically, line 2,281 of flotr2.js is:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在构建内容丰富的大型网页时，可能会遇到一个令人烦恼的Flotr2“bug”。我把“bug”放在引号里，因为Flotr2的这种行为是故意的，但我认为它是不正确的。在构建图表的过程中，Flotr2会创建一些虚拟的HTML元素，以便计算它们的大小。Flotr2并不打算让这些虚拟元素在页面上显示，因此它通过将它们定位到屏幕外来“隐藏”它们。不幸的是，Flotr2认为的屏幕外位置并不总是正确的。具体来说，flotr2.js的第2,281行是：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Flotr2 intends to place these dummy elements 10,000 pixels above the top of
    the browser window. However, CSS absolute positioning can be relative to the containing
    element, which is not always the browser window. So if your document is more than
    10,000 pixels high, you may find Flotr2 scattering text in random-looking locations
    throughout the page. There are a couple of ways to work around this bug, at least
    until the Flotr2 code is revised.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Flotr2 打算将这些虚拟元素放置在浏览器窗口顶部 10,000 像素的位置。然而，CSS 的绝对定位是相对于包含元素的，这个包含元素不一定是浏览器窗口。因此，如果你的文档高度超过
    10,000 像素，你可能会发现 Flotr2 在页面的随机位置散布文本。解决这个 bug 有几种方法，至少在 Flotr2 代码被修订之前可以使用。
- en: 'One option is to modify the code yourself. Flotr2 is open source, so you can
    freely download the full source code and modify it appropriately. One simple modification
    would position the dummy elements far to the right or left rather than above.
    Instead of `"top"` you could change the code to `"right"`. If you’re not comfortable
    making changes to the library’s source code, another option is to find and hide
    those dummy elements yourself. You should do this *after* you’ve called `Flotr.draw()`
    for the last time. The latest version of jQuery can banish these extraneous elements
    with the following statement:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一种选择是自己修改代码。Flotr2 是开源的，因此你可以自由下载完整的源代码并进行适当修改。一种简单的修改方法是将虚拟元素定位到页面的右侧或左侧，而不是上方。你可以将代码中的
    `"top"` 改为 `"right"`。如果你不希望修改库的源代码，另一种选择是自己找到并隐藏这些虚拟元素。你应该在最后一次调用 `Flotr.draw()`
    后进行此操作。最新版本的 jQuery 可以通过以下语句去除这些多余的元素：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Plotting Continuous Data with a Line Chart
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制连续数据的折线图
- en: Bar charts work great for visualizing a modest amount of data, but for more
    significant amounts of data, a line chart can present the information much more
    effectively. Line charts are especially good at revealing overall trends in data
    without bogging the user down in individual data points.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 条形图非常适合可视化少量数据，但对于更多数据，折线图能更有效地呈现信息。折线图特别擅长揭示数据的整体趋势，而不会让用户被个别数据点困扰。
- en: 'For our example, we’ll look at two measures that may be related: carbon dioxide
    (CO[2]) concentration in the atmosphere and global temperatures. We want to show
    how both measures have changed over time, and we’d like to see how strongly related
    the values are. A line chart is a perfect visualization tool for looking at these
    trends.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们将关注两个可能相关的指标：大气中的二氧化碳（CO[2]）浓度和全球气温。我们想展示这两个指标随时间变化的情况，并且希望了解它们之间的相关性。折线图是查看这些趋势的完美可视化工具。
- en: Just like for the bar chart, you’ll need to include the Flotr2 library in your
    web page and create a `<div>` element to contain the chart. Let’s start prepping
    the data.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 就像条形图一样，你需要在网页中包含 Flotr2 库，并创建一个 `<div>` 元素来容纳图表。让我们开始准备数据。
- en: 'Step 1: Define the Data'
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 1：定义数据
- en: We’ll begin with CO[2] concentration measurements. The US National Oceanographic
    and Atmospheric Administration (NOAA) publishes measurements (*[http://www.esrl.noaa.gov/gmd/ccgg/trends/co2_data_mlo.html](http://www.esrl.noaa.gov/gmd/ccgg/trends/co2_data_mlo.html)*)
    taken at Mauna Loa, Hawaii, from 1959 to the present day. The first few values
    are shown in the following excerpt.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从 CO[2] 浓度的测量开始。美国国家海洋和大气管理局（NOAA）发布了自 1959 年至今在夏威夷毛纳罗亚（Mauna Loa）进行的测量数据
    (*[http://www.esrl.noaa.gov/gmd/ccgg/trends/co2_data_mlo.html](http://www.esrl.noaa.gov/gmd/ccgg/trends/co2_data_mlo.html)*)。以下是第一部分数据的摘录。
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: NOAA also publishes measurements of mean global surface temperature (*[http://www.ncdc.noaa.gov/cmb-faq/anomalies.php](http://www.ncdc.noaa.gov/cmb-faq/anomalies.php)*).
    These values measure the difference from the baseline, which is currently taken
    to be the average temperature over the entire 20th century. Since the CO[2] measurements
    begin in 1959, we’ll use that as our starting point for temperature as well.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: NOAA 还发布了全球平均地表温度的测量数据 (*[http://www.ncdc.noaa.gov/cmb-faq/anomalies.php](http://www.ncdc.noaa.gov/cmb-faq/anomalies.php)*)。这些值衡量的是相对于基准线的差异，基准线目前是整个
    20 世纪的平均温度。由于 CO[2] 的测量从 1959 年开始，我们也将使用这一时间点作为温度数据的起点。
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Step 2: Graph the CO[2] Data'
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 2：绘制 CO[2] 数据
- en: Graphing one data set is quite easy with Flotr2\. We simply call the `draw()`
    method of the `Flotr` object. The only parameters the method requires are a reference
    to the HTML element in which to place the graph, and the data itself. The `lines`
    property of the data object indicates that we want a line chart.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Flotr2绘制一个数据集非常简单。我们只需要调用`Flotr`对象的`draw()`方法。该方法所需的唯一参数是指向用于显示图表的HTML元素的引用，以及数据本身。数据对象的`lines`属性表明我们想要绘制一个折线图。
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Since Flotr2 does not require jQuery, we’re not using any jQuery convenience
    functions in our example. If you do have jQuery on your pages, you can simplify
    the preceding code a little. In either case, [Figure 1-6](ch01.html#first_chart_shows_one_data_set
    "Figure 1-6. The first chart shows one data set.") shows the result.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Flotr2不需要jQuery，因此在我们的示例中没有使用任何jQuery的便捷函数。如果页面中有jQuery，可以稍微简化前面的代码。无论如何，[图
    1-6](ch01.html#first_chart_shows_one_data_set "图 1-6. 第一个图表显示了一个数据集。")展示了结果。
- en: '![The first chart shows one data set.](figs/web/01fig06.png.jpg)Figure 1-6. The
    first chart shows one data set.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![第一个图表显示了一个数据集。](figs/web/01fig06.png.jpg)图 1-6. 第一个图表显示了一个数据集。'
- en: The chart clearly shows the trend in CO[2] concentration for the past 50-plus
    years.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 该图表清晰地展示了过去50多年CO[2]浓度的变化趋势。
- en: 'Step 3: Add the Temperature Data'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3：添加温度数据
- en: With a simple addition to our code, we can include temperature measurements
    in our chart.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在代码中简单地添加内容，我们可以在图表中包含温度测量数据。
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note that we include the `yaxis` option for the temperature data and give it
    a value of `2`. That tells Flotr2 to use a different y-scale for the temperature
    data.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们为温度数据包含了`yaxis`选项，并将其值设为`2`。这告诉Flotr2为温度数据使用不同的y轴比例。
- en: The chart in [Figure 1-7](ch01.html#single_chart_can_show_multiple_data_sets
    "Figure 1-7. A single chart can show multiple data sets.") now shows both measurements
    for the years in question, but it’s gotten a little cramped and confusing. The
    values butt up against the edges of the chart, and the grid lines are hard for
    users to interpret when there are multiple vertical axes.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-7](ch01.html#single_chart_can_show_multiple_data_sets "图 1-7. 一个图表可以显示多个数据集。")中的图表现在显示了相关年份的两个测量数据，但变得有些拥挤和混乱。数值紧贴图表的边缘，而且当有多个垂直坐标轴时，网格线对用户的理解也变得困难。'
- en: '![A single chart can show multiple data sets.](figs/web/01fig07.png.jpg)Figure 1-7. A
    single chart can show multiple data sets.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![一个图表可以显示多个数据集。](figs/web/01fig07.png.jpg)图 1-7. 一个图表可以显示多个数据集。'
- en: 'Step 4: Improve the Chart’s Readability'
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 4：提高图表的可读性
- en: By using more Flotr2 options, we can make several improvements in our line chart’s
    readability. First we can eliminate the grid lines, since they aren’t relevant
    for the temperature measurements.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用更多Flotr2选项，我们可以提高折线图的可读性。首先，我们可以去掉网格线，因为它们对温度测量数据没有帮助。
- en: We can also extend the range of both vertical axes to provide a bit of breathing
    room for the chart. Both of these changes are additional options to the `draw()`
    method.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以扩展两个垂直坐标轴的范围，为图表提供一些“呼吸空间”。这两个更改是`draw()`方法的附加选项。
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `grid` options at ➊ turn off the grid lines by setting both the `horizontalLines`
    and `verticalLines` properties to `false`. The `yaxis` options at ➋ specify the
    minimum and maximum value for the first vertical axis (CO[2] concentration), while
    the `y2axis` options at ➌ specify those values for the second vertical axis (temperature
    difference).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 位于➊的`grid`选项通过将`horizontalLines`和`verticalLines`属性设置为`false`来关闭网格线。位于➋的`yaxis`选项指定了第一个垂直坐标轴（CO[2]浓度）的最小值和最大值，而位于➌的`y2axis`选项则指定了第二个垂直坐标轴（温度差异）的这些值。
- en: The resulting graph in [Figure 1-8](ch01.html#removing_grid_lines_and_expanding_the_ax
    "Figure 1-8. Removing grid lines and expanding the axes makes the chart easier
    to read.") is cleaner and easier to read.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-8](ch01.html#removing_grid_lines_and_expanding_the_ax "图 1-8. 去除网格线并扩展坐标轴使图表更易读。")中的图形更简洁，且更易于阅读。'
- en: '![Removing grid lines and expanding the axes makes the chart easier to read.](figs/web/01fig08.png.jpg)Figure 1-8. Removing
    grid lines and expanding the axes makes the chart easier to read.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![去除网格线并扩展坐标轴使图表更易读。](figs/web/01fig08.png.jpg)图 1-8. 去除网格线并扩展坐标轴使图表更易读。'
- en: 'Step 5: Clarify the Temperature Measurements'
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 5：明确温度测量
- en: The temperature measurements might still be confusing to users, since they’re
    not really temperatures; they’re actually deviations from the 20th-century average.
    Let’s convey that distinction by adding a line for that 20th-century average and
    explicitly labeling it. The simplest way to do that is to create a “dummy” data
    set and add that to the chart. The extra data set has nothing but zeros.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 温度测量可能仍然会让用户感到困惑，因为这些数据并不是真正的温度；它们实际上是与20世纪平均温度的偏差。我们可以通过添加一条20世纪平均温度的线并明确标注它来表达这一区别。最简单的方法是创建一个“虚拟”数据集并将其添加到图表中。这个额外的数据集只有零值。
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When we add that data set to the chart, we need to indicate that it corresponds
    to the second y-axis. And since we want this line to appear as part of the chart
    framework rather than as another data set, let’s deemphasize it somewhat by setting
    its width to one pixel, coloring it dark gray, and disabling shadows.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将该数据集添加到图表中时，需要指出它对应的是第二个y轴。而且因为我们希望这条线作为图表框架的一部分出现，而不是作为另一个数据集，所以我们通过将其宽度设置为一个像素，颜色设为深灰色，并禁用阴影，来使其稍微不那么显眼。
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you can see, we’ve placed the zero line first among the data sets. With that
    order, Flotr2 will draw the actual data on top of the zero line, as shown in [Figure 1-9](ch01.html#dummy_data_set_can_emphasize_a_position
    "Figure 1-9. A dummy data set can emphasize a position on a chart axis."), reinforcing
    its role as chart framework instead of data.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们将零线放在了数据集的最前面。按照这个顺序，Flotr2会在零线之上绘制实际数据，正如[图1-9](ch01.html#dummy_data_set_can_emphasize_a_position
    "图1-9。一个虚拟数据集可以突出显示图表坐标轴上的某个位置。")所示，强调其作为图表框架而非数据的作用。
- en: '![A dummy data set can emphasize a position on a chart axis.](figs/web/01fig09.png.jpg)Figure 1-9. A
    dummy data set can emphasize a position on a chart axis.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![一个虚拟数据集可以突出显示图表坐标轴上的某个位置。](figs/web/01fig09.png.jpg)图1-9。一个虚拟数据集可以突出显示图表坐标轴上的某个位置。'
- en: 'Step 6: Label the Chart'
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第6步：标注图表
- en: For the last step in this example, we’ll add appropriate labels to the chart.
    That includes an overall title, as well as labels for individual data sets. And
    to make it clear which axis refers to temperature, we’ll add a “°C” suffix to
    the temperature scale. We identify the label for each data series in the `label`
    option for that series. The overall chart title merits its own option, and we
    add the “°C” suffix using a `tickFormatter()` function.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例的最后一步，我们将为图表添加适当的标签。这包括一个整体标题，以及各个数据集的标签。为了清楚地标明哪个坐标轴表示温度，我们将为温度刻度添加“°C”后缀。我们通过在每个数据系列的`label`选项中指定标签来实现这一点。整体图表标题有一个专门的选项，而“°C”后缀则通过`tickFormatter()`函数来添加。
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: For each value on the axis, the formatter function is called with the value,
    and Flotr2 expects it to return a string to use for the label. As you can see
    at ➊, we simply append the `" °C"` string to the value.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对于坐标轴上的每个值，格式化函数会被调用，并传入该值，Flotr2期望它返回一个字符串来作为标签。正如你在➊所看到的，我们只是简单地将`" °C"`字符串附加到该值后面。
- en: Notice that we’ve also swapped the position of the CO[2] and temperature graphs.
    We’re now passing the temperature data series ahead of the CO[2] series. We did
    that so that the two temperature quantities (baseline and difference) appear next
    to each other in the legend, making their connection a little clearer to the user.
    And because the temperature now appears first in the legend, we’ve also swapped
    the axes, so the temperature axis is on the left. Finally, we’ve adjusted the
    title of the chart for the same reason. [Figure 1-10](ch01.html#labeling_the_axes_and_adding_a_legend_co
    "Figure 1-10. Labeling the axes and adding a legend completes the chart.") shows
    the result.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们还交换了CO[2]和温度图表的位置。现在我们将温度数据系列放在CO[2]系列之前。我们这么做是为了让两个温度量（基线和偏差）在图例中并排显示，使它们之间的联系对用户来说更清晰。由于温度现在在图例中位于首位，我们也交换了坐标轴的位置，因此温度坐标轴现在在左边。最后，我们为了同样的原因调整了图表标题。[图1-10](ch01.html#labeling_the_axes_and_adding_a_legend_co
    "图1-10。标注坐标轴并添加图例完成图表的制作。")显示了结果。
- en: '![Labeling the axes and adding a legend completes the chart.](figs/web/01fig10.png.jpg)Figure 1-10. Labeling
    the axes and adding a legend completes the chart.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![标注坐标轴并添加图例完成图表的制作。](figs/web/01fig10.png.jpg)图1-10。标注坐标轴并添加图例完成图表的制作。'
- en: A line chart like [Figure 1-10](ch01.html#labeling_the_axes_and_adding_a_legend_co
    "Figure 1-10. Labeling the axes and adding a legend completes the chart.") excels
    in visualizing this kind of data. Each data set contains over 50 points, making
    it impractical to present each individual point. And in fact, individual data
    points are not the focus of the visualization. Rather, we want to show *trends*—the
    trends of each data set as well as that data set’s correlation to the others.
    Connecting the points with lines leads the user right to those trends and to the
    heart of our visualization.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 像[图 1-10](ch01.html#labeling_the_axes_and_adding_a_legend_co "图 1-10. 标记轴和添加图例完成图表。")这样的折线图非常适合可视化这种数据。每个数据集包含超过
    50 个点，使得展示每个单独的点变得不切实际。事实上，单独的数据点并不是可视化的重点。我们想展示的是*趋势*——每个数据集的趋势，以及该数据集与其他数据集之间的关联。用线将这些点连接起来，可以帮助用户快速理解这些趋势和我们可视化的核心内容。
- en: 'Step 7: Work Around Flotr2 “Bugs”'
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 7 步：解决 Flotr2 “Bug”
- en: 'Be sure to refer to Step 9 of [Creating a Basic Bar Chart](ch01.html#creating_a_basic_bar_chart
    "Creating a Basic Bar Chart") in [Step 9: Work Around Flotr2 “Bugs”](ch01.html#step_9_work_around_flotr2_quotation_mark
    "Step 9: Work Around Flotr2 “Bugs”") to see how to work around some “bugs” in
    the Flotr2 library.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必参考[创建基本柱状图](ch01.html#creating_a_basic_bar_chart "创建基本柱状图")中的第 9 步，并查看[第
    9 步：解决 Flotr2 “Bug”](ch01.html#step_9_work_around_flotr2_quotation_mark "第 9 步：解决
    Flotr2 “Bug”")，以了解如何绕过 Flotr2 库中的一些“Bug”。
- en: Emphasizing Fractions Using a Pie Chart
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用饼图强调部分值
- en: 'Pie charts don’t get a lot of love in the visualization community, and for
    a pretty good reason: they’re rarely the most effective way to communicate data.
    We will walk through the steps to create pie charts in this section, but first
    let’s take some time to understand the problems they introduce. [Figure 1-11](ch01.html#pie_charts_can_make_it_hard_to_compare_v
    "Figure 1-11. Pie charts can make it hard to compare values."), for example, shows
    a simple pie chart. Can you tell from the chart which color is the largest? The
    smallest?'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 饼图在可视化社区中并不受欢迎，这有充分的理由：它们很少是传达数据的最有效方式。我们将在本节中讲解如何创建饼图，但首先让我们花些时间了解它们带来的问题。[图
    1-11](ch01.html#pie_charts_can_make_it_hard_to_compare_v "图 1-11. 饼图可能让比较数值变得困难。")
    就是一个例子，它展示了一个简单的饼图。你能从这个图中看出哪个颜色是最大的？哪个是最小的吗？
- en: '![Pie charts can make it hard to compare values.](figs/web/01fig11.png.jpg)Figure 1-11. Pie
    charts can make it hard to compare values.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![饼图可能让比较数值变得困难。](figs/web/01fig11.png.jpg)图 1-11. 饼图可能让比较数值变得困难。'
- en: It’s very hard to tell. That’s because humans are not particularly good at judging
    the relative size of areas, especially if those areas aren’t rectangles. If we
    really wanted to compare these five values, a bar chart works much better. [Figure 1-12](ch01.html#bar_charts_usually_make_comparisons_easi
    "Figure 1-12. Bar charts usually make comparisons easier.") shows the same values
    in a bar chart.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常难以判断。原因在于人类并不擅长判断面积的相对大小，尤其是当这些面积不是矩形时。如果我们真的想比较这五个数值，柱状图效果要好得多。[图 1-12](ch01.html#bar_charts_usually_make_comparisons_easi
    "图 1-12. 柱状图通常使比较变得更容易.") 显示了相同数值的柱状图。
- en: '![Bar charts usually make comparisons easier.](figs/web/01fig12.png.jpg)Figure 1-12. Bar
    charts usually make comparisons easier.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '![柱状图通常使比较变得更容易。](figs/web/01fig12.png.jpg)图 1-12. 柱状图通常使比较变得更容易。'
- en: 'Now, of course, it’s easy to rank each color. With a bar chart we only have
    to compare one dimension—height. This yields a simple rule of thumb: if you’re
    comparing different values against one another, consider a bar chart first. It
    will almost always provide the best visualization.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当然很容易对每种颜色进行排名。在柱状图中，我们只需比较一个维度——高度。这给出一个简单的经验法则：如果你在比较不同的数值，首先考虑使用柱状图。它几乎总是能提供最佳的可视化效果。
- en: One case, however, where pie charts can be quite effective is when we want to
    compare a single partial value against a whole. Say, for example, we want to visualize
    the percentage of the world’s population that lives in poverty. In that case,
    a pie chart may work quite well. Here’s how we can construct such a chart using
    Flotr2.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，饼图有一个非常有效的应用场景，那就是我们想要比较一个部分值与整体的关系。例如，假设我们想要可视化世界人口中生活在贫困中的比例。在这种情况下，饼图可能会很好地表现这一点。下面是我们如何使用
    Flotr2 构建这样一个图表。
- en: Just as in Step 1 of [Creating a Basic Bar Chart](ch01.html#creating_a_basic_bar_chart
    "Creating a Basic Bar Chart"), we need to include the Flotr2 library in our web
    page and set aside a `<div>` element to contain the chart we’ll construct.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在[创建基本条形图](ch01.html#creating_a_basic_bar_chart "创建基本条形图")的第一步中一样，我们需要在网页中包含Flotr2库，并为将要构建的图表预留一个`<div>`元素。
- en: 'Step 1: Define the Data'
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 1：定义数据
- en: The data here is quite straightforward. According to the World Bank (*[http://www.newgeography.com/content/003325-alleviating-world-poverty-a-progress-report](http://www.newgeography.com/content/003325-alleviating-world-poverty-a-progress-report)*),
    at the end of 2008, 22.4 percent of the world’s population lived on less than
    $1.25/day. That’s the fraction that we want to emphasize with our chart.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的数据非常简单。根据世界银行的资料（*[http://www.newgeography.com/content/003325-alleviating-world-poverty-a-progress-report](http://www.newgeography.com/content/003325-alleviating-world-poverty-a-progress-report)*），到2008年底，世界上有22.4%的人口每天的收入低于1.25美元。这就是我们希望通过图表强调的比例。
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here we have an array with two data series: one for the percentage of the population
    in poverty (22.4) and a second series for the rest (77.6). Each series itself
    consists of an array of points. In this example, and for pie charts in general,
    there is only one point in each series, with an x-value and a y-value (which are
    each stored together in yet another, inner array). For pie charts, the x-values
    are irrelevant, so we simply include the placeholder values `0` and `1`.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们有一个包含两个数据系列的数组：一个是贫困人口的百分比（22.4），另一个是其他人群（77.6）。每个系列本身由一个点数组成。在这个例子中，对于饼图而言，每个系列中只有一个点，该点包含一个x值和一个y值（这两个值一起存储在另一个内部数组中）。对于饼图，x值是无关紧要的，所以我们简单地使用占位符值`0`和`1`。
- en: 'Step 2: Draw the Chart'
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 2：绘制图表
- en: 'To draw the chart, we call the `draw()` method of the `Flotr` object. That
    method takes three parameters: the element in our HTML document in which to place
    the chart, the data for our chart, and any options. We’ll start with the minimum
    set of options required for a pie chart.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为了绘制图表，我们调用`Flotr`对象的`draw()`方法。该方法接受三个参数：要放置图表的HTML文档元素、图表的数据以及任何选项。我们将从饼图所需的最小选项集开始。
- en: '[PRE21]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As you can see, Flotr2 requires a few more options for a minimum pie chart than
    it does for other common chart types. For both the x- and y-axes we need to disable
    labels, which we do by setting the `showLabels` property to `false` at ➊ and ➋.
    We also have to turn off the grid lines, as a grid doesn’t make a lot of sense
    for a pie chart. We accomplish that by setting the `verticalLines` and `horizontalLines`
    properties of the `grid` option to `false` at ➌ and ➍.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Flotr2为最小饼图所需的选项比其他常见图表类型要多一些。对于x轴和y轴，我们需要禁用标签，这可以通过在➊和➋处将`showLabels`属性设置为`false`来实现。我们还必须关闭网格线，因为网格对于饼图没有太大意义。我们通过在➌和➍处将`grid`选项中的`verticalLines`和`horizontalLines`属性设置为`false`来完成这一操作。
- en: Since Flotr2 doesn’t require jQuery, we’re not using any of the jQuery convenience
    functions in this example. If you do have jQuery for your pages, you can simplify
    this code a bit.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Flotr2不需要jQuery，我们在这个例子中没有使用任何jQuery的便利函数。如果你的页面中有jQuery，可以稍微简化一下这段代码。
- en: '[Figure 1-13](ch01.html#without_effective_labelingcomma_pie_char "Figure 1-13. Without
    effective labeling, pie charts can be difficult to interpret.") is a start, but
    it’s hard to tell exactly what the graph intends to show.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[图1-13](ch01.html#without_effective_labelingcomma_pie_char "图1-13. 没有效果的标签，饼图可能很难解读。")是一个起点，但很难确切看出图表想要展示什么。'
- en: '![Without effective labeling, pie charts can be difficult to interpret.](figs/web/01fig13.png.jpg)Figure 1-13. Without
    effective labeling, pie charts can be difficult to interpret.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '![没有有效标签，饼图可能很难解读。](figs/web/01fig13.png.jpg)图1-13. 没有效果的标签，饼图可能很难解读。'
- en: 'Step 3: Label the Values'
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3：标记值
- en: The next step is to add some text labels and a legend to indicate what the chart
    is displaying. To label each quantity separately, we have to change the structure
    of our data. Instead of using an array of series, we’ll create an object to store
    each series. Each object’s `data` property will contain the corresponding series,
    and we’ll add a `label` property for the text labels.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是添加一些文本标签和图例，以指示图表展示的内容。为了单独标记每个量，我们需要更改数据结构。我们不再使用系列数组，而是创建一个对象来存储每个系列。每个对象的`data`属性将包含相应的系列，并且我们将添加一个`label`属性用于文本标签。
- en: '[PRE22]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'With our data structured this way, Flotr2 will automatically identify labels
    associated with each series. Now when we call the `draw()` method, we just need
    to add a `title` option. Flotr2 will add the title above the graph and create
    a simple legend identifying the pie portions with our labels. To make the chart
    a little more engaging, we’ll pose a question in our title. That’s why we’re labeling
    only one of the areas in the chart: the labeled area answers the question in the
    title.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式结构化数据，Flotr2 会自动识别与每个系列关联的标签。现在，当我们调用 `draw()` 方法时，只需添加一个 `title` 选项。Flotr2
    会在图表上方添加标题，并创建一个简单的图例，使用我们的标签标识饼图的各个部分。为了让图表更具吸引力，我们将在标题中提出一个问题。这就是为什么我们只给图表中的一个区域加标签：被标记的区域回答了标题中的问题。
- en: '[PRE23]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The chart in [Figure 1-14](ch01.html#labels_and_titles_can_help_make_a_chart
    "Figure 1-14. Labels and titles can help make a chart engaging.") reveals the
    data quite clearly.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-14](ch01.html#labels_and_titles_can_help_make_a_chart "图 1-14. 标签和标题可以帮助让图表更具吸引力")
    中的图表清晰地展示了数据。'
- en: '![Labels and titles can help make a chart engaging.](figs/web/01fig14.png.jpg)Figure 1-14. Labels
    and titles can help make a chart engaging.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '![标签和标题可以帮助让图表更具吸引力。](figs/web/01fig14.png.jpg) 图 1-14. 标签和标题可以帮助让图表更具吸引力。'
- en: Although pie charts have a bad reputation in the data visualization community,
    there are some applications for which they are quite effective. They’re not very
    good at letting users compare multiple values, but as shown in this example, they
    do provide a nice and easily understandable picture showing the proportion of
    a single value within a whole.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管饼图在数据可视化界中名声不佳，但在某些应用场景下，它们还是非常有效的。它们不太适合让用户比较多个值，但正如本示例所示，它们确实提供了一个清晰、易于理解的图像，展示了单一值在整体中的比例。
- en: 'Step 4: Work Around Flotr2 “Bugs”'
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 4 步：解决 Flotr2 “Bug”
- en: 'Be sure to refer to Step 9 of [Creating a Basic Bar Chart](ch01.html#creating_a_basic_bar_chart
    "Creating a Basic Bar Chart") in [Step 9: Work Around Flotr2 “Bugs”](ch01.html#step_9_work_around_flotr2_quotation_mark
    "Step 9: Work Around Flotr2 “Bugs”") to see how to work around some “bugs” in
    the Flotr2 library.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必参考 [创建基本条形图](ch01.html#creating_a_basic_bar_chart "创建基本条形图") 第 9 步，在 [第 9
    步：解决 Flotr2 “Bug”](ch01.html#step_9_work_around_flotr2_quotation_mark "第 9 步：解决
    Flotr2 “Bug”") 中查看如何解决 Flotr2 库中的一些“bug”。
- en: Plotting X/Y Data with a Scatter Chart
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用散点图绘制 X/Y 数据
- en: A bar chart is often most effective for visualizing data that consists primarily
    of a single quantity (such as the number of wins in the bar charts we created
    earlier). But if we want to explore the relationship between two different quantities,
    a scatter chart can be more effective. Suppose, for example, we wish to visualize
    the relationship between a country’s health-care spending (one quantity) and its
    life expectancy (the second quantity). Let’s step through an example to see how
    to create a scatter chart for that data.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 条形图通常最适合可视化主要由单一数量构成的数据（比如我们之前创建的条形图中的获胜次数）。但是，如果我们想要探索两个不同数量之间的关系，散点图可能更为有效。例如，假设我们想要可视化一个国家的医疗保健支出（第一个数量）与其预期寿命（第二个数量）之间的关系。让我们通过一个示例，看看如何为这些数据创建一个散点图。
- en: Just as in Step 1 of [Creating a Basic Bar Chart](ch01.html#creating_a_basic_bar_chart
    "Creating a Basic Bar Chart"), we need to include the Flotr2 library in our web
    page and set aside a `<div>` element to contain the chart we’ll construct.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在 [创建基本条形图](ch01.html#creating_a_basic_bar_chart "创建基本条形图") 第 1 步中一样，我们需要在网页中包含
    Flotr2 库，并为构建的图表预留一个 `<div>` 元素。
- en: 'Step 1: Define the Data'
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 1 步：定义数据
- en: 'For this example, we’ll use the 2012 report from the Organisation for Economic
    Co-operation and Development (OECD; *[http://www.oecd-ilibrary.org/social-issues-migration-health/data/oecd-health-statistics_health-data-en](http://www.oecd-ilibrary.org/social-issues-migration-health/data/oecd-health-statistics_health-data-en)*).
    This report includes figures for health-care spending as a percent of gross domestic
    product, and average life expectancy at birth. (Although the report was released
    in late 2012, it contains data for 2010.) Here you can see a short excerpt of
    that data stored in a JavaScript array:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将使用经济合作与发展组织（OECD）2012年的报告（* [http://www.oecd-ilibrary.org/social-issues-migration-health/data/oecd-health-statistics_health-data-en](http://www.oecd-ilibrary.org/social-issues-migration-health/data/oecd-health-statistics_health-data-en)
    *）。该报告包括医疗保健支出占国内生产总值的百分比和出生时的平均预期寿命。（尽管报告在2012年底发布，但它包含了2010年的数据。）以下是存储在 JavaScript
    数组中的该数据的简短摘录：
- en: '[PRE24]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Step 2: Format the Data'
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 2 步：格式化数据
- en: As is often the case, we’ll need to restructure the original data a bit so that
    it matches the format Flotr2 requires. The JavaScript code for that is shown next.
    We start with an empty `data` array and step through the source data. For each
    element in the source `health_data`, we extract the data point for our chart and
    push that data point into the `data` array.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我们需要稍微重组原始数据，使其符合Flotr2的要求格式。接下来展示的JavaScript代码就是为此目的。我们从一个空的`data`数组开始，然后逐步处理源数据。对于每个源`health_data`中的元素，我们提取图表所需的数据点，并将这些数据点推送到`data`数组中。
- en: '[PRE25]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Since Flotr2 doesn’t require jQuery, we’re not using any of the jQuery convenience
    functions in this example. But if you’re using jQuery for other reasons in your
    page, you could, for example, use the `.map()` function to simplify the code for
    this restructuring. (In Step 7 of [Selecting Chart Content](ch02.html#selecting_chart_content
    "Selecting Chart Content") in [Step 7: Determine Chart Data Based on the Interaction
    State](ch02.html#step_7_determine_chart_data_based_on_the "Step 7: Determine Chart
    Data Based on the Interaction State"), there’s a detailed example of the jQuery
    `.map()` function.)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Flotr2不需要jQuery，因此在这个例子中我们没有使用任何jQuery的便捷函数。但如果你在页面中因其他原因使用了jQuery，例如，你可以使用`.map()`函数简化数据重组的代码。（在[选择图表内容](ch02.html#selecting_chart_content
    "选择图表内容")的[步骤 7：根据交互状态确定图表数据](ch02.html#step_7_determine_chart_data_based_on_the
    "步骤 7：根据交互状态确定图表数据")中有一个关于jQuery `.map()`函数的详细示例。）
- en: 'Step 3: Plot the Data'
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3：绘制数据
- en: Now all we need to do is call the `draw()` method of the `Flotr` object to create
    our chart. For a first attempt, we’ll stick with the default options.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要做的就是调用`draw()`方法，来创建我们的图表。初次尝试时，我们将使用默认选项。
- en: '[PRE26]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: As you can see, Flotr2 expects at least two parameters. The first is the element
    in our HTML document in which we want the chart placed, and the second is the
    data for the chart. The data takes the form of an array. In general, Flotr2 can
    draw multiple series on the same chart, so that array might have multiple objects.
    In our case, however, we’re charting only one series, so the array has a single
    object. That object identifies the data itself, and it tells Flotr2 not to show
    points instead of lines.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Flotr2至少需要两个参数。第一个是我们希望图表显示的HTML文档元素，第二个是图表的数据。数据的形式是一个数组。一般来说，Flotr2可以在同一图表上绘制多个系列，因此这个数组可能包含多个对象。然而，在我们的例子中，我们只绘制一个系列，因此数组只有一个对象。该对象标识数据本身，并告诉Flotr2不要显示点，而是显示线条。
- en: '[Figure 1-15](ch01.html#default_scatter_chart_options_donapostro "Figure 1-15. The
    default scatter chart options don’t provide any margins.") shows our result. Notice
    how the points are pressed right up against the edges of the chart.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-15](ch01.html#default_scatter_chart_options_donapostro "图 1-15. 默认散点图选项没有提供任何边距。")展示了我们的结果。注意图中的点是如何紧贴着图表边缘的。'
- en: '![The default scatter chart options don’t provide any margins.](figs/web/01fig15.png.jpg)Figure 1-15. The
    default scatter chart options don’t provide any margins.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '![默认散点图选项没有提供任何边距。](figs/web/01fig15.png.jpg)图 1-15. 默认散点图选项没有提供任何边距。'
- en: 'Step 4: Adjust the Chart’s Axes'
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 4：调整图表的坐标轴
- en: 'The first attempt isn’t too bad, but Flotr2 automatically calculates the ranges
    for each axis, and its default algorithm usually results in a chart that’s too
    cramped. Flotr2 does have an `autoscale` option; if you set it, the library attempts
    to find sensible ranges for the associated axes automatically. Unfortunately,
    in my experience the ranges Flotr2 suggests rarely improve the default option
    significantly, so in most cases we’re better off explicitly setting them. Here’s
    how we do that for our chart:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次尝试还不错，但Flotr2会自动计算每个轴的范围，且其默认算法通常会导致图表过于拥挤。Flotr2确实有一个`autoscale`选项；如果启用它，库会尝试自动为关联的轴找到合理的范围。不幸的是，根据我的经验，Flotr2建议的范围很少能显著改善默认选项，因此在大多数情况下，明确设置范围会更好。以下是我们如何为图表设置这些范围的方法：
- en: '[PRE27]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We’ve added a third parameter to the `draw()` method that contains our options,
    which in this case are properties for the x- and y-axes. In each case, we’re explicitly
    setting a minimum and maximum value. By specifying ranges that give the data a
    little breathing room, we’ve made the chart in [Figure 1-16](ch01.html#specifying_our_own_axes_makes_the_chart
    "Figure 1-16. Specifying our own axes makes the chart easier to read.") much easier
    to read.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `draw()` 方法中添加了一个包含我们选项的第三个参数，这些选项是 x 轴和 y 轴的属性。在每个案例中，我们都显式地设置了最小值和最大值。通过指定给数据一点呼吸空间的范围，我们使得图表
    [图 1-16](ch01.html#specifying_our_own_axes_makes_the_chart "图 1-16. 指定我们自己的坐标轴使图表更易于阅读。")
    更易于阅读。
- en: '![Specifying our own axes makes the chart easier to read.](figs/web/01fig16.png.jpg)Figure 1-16. Specifying
    our own axes makes the chart easier to read.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '![指定我们自己的坐标轴使图表更易于阅读。](figs/web/01fig16.png.jpg)图 1-16. 指定我们自己的坐标轴使图表更易于阅读。'
- en: 'Step 5: Label the Data'
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '步骤 5: 标注数据'
- en: 'Our chart so far looks reasonably nice, but it doesn’t tell users what they’re
    seeing. We need to add some labels to identify the data. A few more options can
    clarify the chart:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的图表看起来相当不错，但它并没有告诉用户他们正在查看什么。我们需要添加一些标签来标识数据。再添加几个选项可以让图表更清晰：
- en: '[PRE28]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `title` and `subtitle` options give the chart its overall title and subtitle,
    while the `title` properties within the `xaxis` and `yaxis` options name the labels
    for those axes. In addition to adding labels, we’ve told Flotr2 to drop the unnecessary
    decimal point from the x- and y-axis values by changing the `tickDecimals` property
    at ➊ and ➋. The chart in [Figure 1-17](ch01.html#labels_and_titles_clarify_the_chartapost
    "Figure 1-17. Labels and titles clarify the chart’s content.") looks much better.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`title` 和 `subtitle` 选项为图表提供了整体的标题和副标题，而 `xaxis` 和 `yaxis` 选项中的 `title` 属性则命名了这些坐标轴的标签。除了添加标签，我们还通过在
    ➊ 和 ➋ 处更改 `tickDecimals` 属性，指示 Flotr2 去除 x 轴和 y 轴值中不必要的小数点。图表 [图 1-17](ch01.html#labels_and_titles_clarify_the_chartapost
    "图 1-17. 标签和标题明确图表的内容。") 看起来好多了。'
- en: '![Labels and titles clarify the chart’s content.](figs/web/01fig17.png.jpg)Figure 1-17. Labels
    and titles clarify the chart’s content.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '![标签和标题明确图表的内容。](figs/web/01fig17.png.jpg)图 1-17. 标签和标题明确图表的内容。'
- en: 'Step 6: Clarify the X-Axis'
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '步骤 6: 明确 X 轴'
- en: 'Although our chart has definitely improved since our first attempt, there is
    still one nagging problem with the data presentation. The x-axis represents a
    percentage, but the labels for that axis show whole numbers. That discrepancy
    might cause our users some initial confusion, so let’s get rid of it. Flotr2 allows
    us to format the axis labels however we want. In this example, we simply wish
    to add a percentage symbol to the value. That’s easy enough:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们的图表自第一次尝试以来已经有所改进，但数据呈现仍然存在一个令人困扰的问题。x 轴表示百分比，但该轴的标签显示的是整数。这种不一致可能会让用户产生初步困惑，因此我们需要解决它。Flotr2
    允许我们按需格式化坐标轴标签。在这个例子中，我们只希望在数值后添加一个百分号。这个操作非常简单：
- en: '[PRE29]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The trick is the `tickFormatter` property of the `xaxis` options at ➊ in the
    preceding code. That property specifies a function. When `tickFormatter` is present,
    Flotr2 doesn’t draw the labels automatically. Instead, at each point where it
    would draw a label, it calls our function. The parameter passed to the function
    is the numeric value for the label. Flotr2 expects the function to return a string
    that it will use as the label. In our case we’re simply adding a percent sign
    after the value.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是前面代码中 `xaxis` 选项里的 `tickFormatter` 属性，位于 ➊。该属性指定了一个函数。当存在 `tickFormatter`
    时，Flotr2 不会自动绘制标签。而是在每个本该绘制标签的点上，它会调用我们的函数。传递给函数的参数是标签的数值。Flotr2 期望函数返回一个字符串，作为要使用的标签。在我们的例子中，我们只是简单地在数值后面添加一个百分号。
- en: In [Figure 1-18](ch01.html#formatting_the_axis_labels_clarifies_the "Figure 1-18. Formatting
    the axis labels clarifies the content."), with the addition of the percentage
    values labeling the horizontal axis, we have a chart that presents the data clearly.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [图 1-18](ch01.html#formatting_the_axis_labels_clarifies_the "图 1-18. 格式化坐标轴标签可以明确内容。")
    中，随着横坐标轴上添加了百分比值标签，我们得到了一张清晰呈现数据的图表。
- en: '![Formatting the axis labels clarifies the content.](figs/web/01fig18.png.jpg)Figure 1-18. Formatting
    the axis labels clarifies the content.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '![格式化坐标轴标签可以明确内容。](figs/web/01fig18.png.jpg)图 1-18. 格式化坐标轴标签可以明确内容。'
- en: The scatter chart excels at revealing relationships between two different variables.
    In this example, we can see how life expectancy relates to health-care spending.
    In aggregate, more spending yields longer life.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图在揭示两个不同变量之间的关系方面表现出色。在这个例子中，我们可以看到寿命预期与医疗支出的关系。总的来说，更多的支出会带来更长的寿命。
- en: 'Step 7: Answer Users’ Questions'
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第7步：回答用户的问题
- en: 'Now that our chart successfully presents the data, we can start to look more
    carefully at the visualization from our users’ perspective. We especially want
    to anticipate any questions that users might have and try to answer them directly
    on the chart. There are at least three questions that emerge in the chart as it
    now stands:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的图表成功地展示了数据，我们可以开始从用户的角度更仔细地审视可视化内容。我们特别想预见用户可能会提出的问题，并尽量直接在图表上解答。目前图表上至少有三个问题：
- en: What countries are shown?
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示的是哪些国家？
- en: Are there any regional differences?
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是否存在地区差异？
- en: What’s that data point way over on the right?
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 那个位于最右边的数据点是什么？
- en: One way to answer those questions would be to add mouseovers (or tool tips)
    to each data point. But we’re not going to use that approach in this example for
    a couple of reasons. First (and most obviously), interactive visualizations are
    the subject of [Chapter 2](ch02.html "Chapter 2. Making Charts Interactive");
    this chapter considers only static charts and graphs. Secondly, mouseovers and
    tool tips are ineffective for users accessing our site on a touch device, such
    as a smartphone or tablet. If we required users to have a mouse to fully understand
    our visualization, we might be neglecting a significant (and rapidly growing)
    number of them.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 解答这些问题的一种方法是为每个数据点添加鼠标悬停（或工具提示）。但我们在这个例子中不会使用这种方法，原因有几个。首先（最明显的是），互动式可视化是[第2章](ch02.html
    "第2章. 使图表具有互动性")的内容；本章只考虑静态图表和图形。其次，鼠标悬停和工具提示对使用触摸设备（如智能手机或平板电脑）的用户来说效果不佳。如果我们要求用户必须使用鼠标才能完全理解我们的可视化，那么我们可能会忽视一个重要的（且快速增长的）用户群体。
- en: 'Our approach to this problem will be to divide our data into multiple series
    so that we can color and label each independently. Here’s the first step in breaking
    the data into regions:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们解决这个问题的方法是将数据拆分成多个系列，以便我们可以为每个系列单独上色和标注。下面是将数据拆分成区域的第一步：
- en: '[PRE30]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Here, we’re giving the United States its own series, separate from the Americas
    series. That’s because the United States is the outlier data point on the far
    right of the chart. Our users probably want to know the specific country for that
    point, not just its region. For the other countries, a region alone is probably
    enough identification. As before, we need to restructure these arrays into Flotr2’s
    format. The code is the same as in Step 4; we’re just repeating it for each data
    set.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为美国单独设立了一个系列，而不是与美洲系列合并。因为美国是图表右侧的离群值数据点。用户可能想要知道该数据点对应的具体国家，而不仅仅是它所属的区域。对于其他国家，仅仅显示区域就足够了。如同之前一样，我们需要将这些数组重新构造为Flotr2的格式。代码与第4步相同；我们只是对每个数据集重复这个过程。
- en: '[PRE31]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Once we’ve separated the countries, we can pass their data to Flotr2 as distinct
    series. Here we see why Flotr2 expects arrays as its data parameter. Each series
    is a separate object in the array.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将国家分离开来，就可以将它们的数据作为不同的系列传递给Flotr2。这里我们可以看到为什么Flotr2期望将数组作为其数据参数。每个系列在数组中都是一个独立的对象。
- en: '[PRE32]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: With the countries in different data series based on regions, Flotr2 now colors
    the regions distinctly, as shown in [Figure 1-19](ch01.html#splitting_the_data_into_multiple_data_se
    "Figure 1-19. Splitting the data into multiple data sets lets us assign different
    colors to each.").
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 基于地区对不同数据系列中的国家进行分类后，Flotr2现在为各个区域着上了不同的颜色，如[图 1-19](ch01.html#splitting_the_data_into_multiple_data_se
    "图 1-19. 将数据拆分成多个数据集让我们可以为每个数据集分配不同的颜色.")所示。
- en: '![Splitting the data into multiple data sets lets us assign different colors
    to each.](figs/web/01fig19.png.jpg)Figure 1-19. Splitting the data into multiple
    data sets lets us assign different colors to each.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '![将数据拆分成多个数据集让我们可以为每个数据集分配不同的颜色。](figs/web/01fig19.png.jpg)图 1-19. 将数据拆分成多个数据集让我们可以为每个数据集分配不同的颜色。'
- en: For the final enhancement, we add a legend to the chart identifying the regions.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的增强功能是向图表中添加一个图例，用来标识各个区域。
- en: '[PRE33]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In order to make room for the legend, we increase the range of the x-axis at
    ➊ and position the legend in the northeast quadrant at ➋.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 为了腾出空间给图例，我们在➊处增加了x轴的范围，并将图例放置在➋的东北象限。
- en: This addition gives us the final chart shown in [Figure 1-20](ch01.html#adding_a_legend_completes_the_chart
    "Figure 1-20. Adding a legend completes the chart.").
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这个附加步骤给我们带来了最终图表，如[图1-20](ch01.html#adding_a_legend_completes_the_chart "图1-20.
    添加图例完成图表.")所示。
- en: '![Adding a legend completes the chart.](figs/web/01fig20.png.jpg)Figure 1-20. Adding
    a legend completes the chart.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '![添加图例完成图表。](figs/web/01fig20.png.jpg)图1-20. 添加图例完成图表。'
- en: 'Step 8: Work Around Flotr2 “Bugs”'
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第8步：解决Flotr2“Bug”
- en: 'Be sure to refer to Step 9 of [Creating a Basic Bar Chart](ch01.html#creating_a_basic_bar_chart
    "Creating a Basic Bar Chart") in [Step 9: Work Around Flotr2 “Bugs”](ch01.html#step_9_work_around_flotr2_quotation_mark
    "Step 9: Work Around Flotr2 “Bugs”") to see how to work around some “bugs” in
    the Flotr2 library.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必参考[创建基本条形图](ch01.html#creating_a_basic_bar_chart "创建基本条形图")中的第9步，在[第9步：解决Flotr2“Bug”](ch01.html#step_9_work_around_flotr2_quotation_mark
    "第9步：解决Flotr2“Bug”")中查看如何解决Flotr2库中的一些“Bug”。
- en: Adding Magnitudes to X/Y Data with a Bubble Chart
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用气泡图为X/Y数据添加量级
- en: 'Traditional scatter charts, like those described in the previous example, show
    the relationship between two values: the x-axis and the y-axis. Sometimes, however,
    two values are not adequate for the data we want to visualize. If we need to visualize
    three variables, we could use a scatter plot framework for two of the variables
    and then vary the size of the points according to the third variable. The resulting
    chart is a bubble chart.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的散点图，如前面的示例所示，展示了两个值之间的关系：x轴和y轴。然而，有时候，两个值不足以展示我们想要可视化的数据。如果我们需要可视化三个变量，可以使用散点图框架展示两个变量，然后根据第三个变量的不同调整点的大小。最终得到的图表就是气泡图。
- en: Using bubble charts effectively requires some caution, though. As we saw earlier
    with pie charts, humans are not very good at accurately judging the relative areas
    of nonrectangular shapes, so bubble charts don’t lend themselves to precise comparisons
    of the bubble size. But if your third variable conveys only the general sense
    of a quantity rather than an accurate measurement, a bubble chart may be appropriate.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有效使用气泡图需要一些谨慎。如我们之前在饼图中看到的那样，人类在准确判断非矩形形状的相对面积方面并不擅长，因此气泡图不适合精确比较气泡的大小。但如果你的第三个变量只传达某种量的总体印象，而不是准确的测量，气泡图可能是合适的。
- en: For this example we’ll use a bubble chart to visualize the path of Hurricane
    Katrina in 2005\. Our x- and y-values will represent position (latitude and longitude),
    and we’ll ensure our users can interpret those values very accurately. For the
    third value—the bubble area—we’ll use the storm’s sustained wind speed. Since
    wind speed is only a general value anyway (as the wind gusts and subsides), a
    general impression is sufficient.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用气泡图来可视化2005年卡特里娜飓风的路径。我们的x和y值将代表位置（纬度和经度），并且我们会确保用户能够准确解读这些值。对于第三个值——气泡的面积——我们将使用风暴的持续风速。由于风速本身只是一个大致的值（因为风速会时强时弱），因此提供一个大致的印象就足够了。
- en: Just as in Step 1 of [Creating a Basic Bar Chart](ch01.html#creating_a_basic_bar_chart
    "Creating a Basic Bar Chart"), we need to include the Flotr2 library in our web
    page and set aside a `<div>` element to contain the chart we’ll construct.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在[创建基本条形图](ch01.html#creating_a_basic_bar_chart "创建基本条形图")的第1步中一样，我们需要在网页中包含Flotr2库，并为将要构建的图表预留一个`<div>`元素。
- en: 'Step 1: Define the Data'
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第1步：定义数据
- en: We’ll start our example with data taken from Hurricane Katrina observations
    by United States National Oceanic and Atmospheric Administration (NOAA). The data
    includes the latitude and longitude of the observation and the sustained wind
    speed in miles per hour.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以美国国家海洋和大气管理局（NOAA）收集的卡特里娜飓风观测数据为例。数据包括观测的纬度和经度，以及以每小时英里为单位的持续风速。
- en: '[PRE34]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: For the bubble chart, Flotr2 needs each data point to be an array rather than
    an object, so let’s build a simple function to convert the source data into that
    format. To make the function more general, we can use an optional parameter to
    specify a filter function. And while we’re extracting data points, we can reverse
    the sign of the longitude so that west to east displays left to right.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 对于气泡图，Flotr2要求每个数据点是一个数组，而不是一个对象，因此我们需要构建一个简单的函数，将源数据转换为这种格式。为了让函数更具通用性，我们可以使用一个可选参数来指定一个过滤函数。并且，在提取数据点时，我们可以反转经度的符号，这样从西到东的方向就会从左到右显示。
- en: '[PRE35]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The code for our function starts by setting the return value (`result`) to an
    empty array at ➊. Then it iterates through the input `source_array` one element
    at a time. If the `filter_function` parameter is available, and if it is a valid
    function, our code calls that function with the source array element as a parameter.
    If the function returns `true`, or if no function was passed in the parameter,
    then our code extracts the data point from the source element and pushes it onto
    the result array.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的函数代码首先在➊处将返回值（`result`）设置为空数组。然后它逐一遍历输入的`source_array`。如果`filter_function`参数存在，并且它是一个有效的函数，我们的代码会调用这个函数，并将源数组元素作为参数。如果函数返回`true`，或者没有传入任何函数参数，那么我们的代码就会从源元素中提取数据点并将其推送到结果数组中。
- en: As you can see, the `filter_function` parameter is optional. If the caller omits
    it (or if it is not a valid function), then every point in the source ends up
    in the result. We won’t use the filter function right away, but it will come in
    handy for the later steps in this example.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`filter_function`参数是可选的。如果调用者省略了它（或者它不是一个有效的函数），那么源中的每个点都会进入结果。我们暂时不会立即使用过滤函数，但它将在本示例的后续步骤中派上用场。
- en: 'Step 2: Create a Background for the Chart'
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 2 步：为图表创建背景
- en: Because the x- and y-values of our chart will represent position, a map makes
    the perfect chart background. To avoid any copyright concerns, we’ll use map images
    from Stamen Design (*[http://stamen.com/](http://stamen.com/)*) that use data
    from OpenStreetMap (*[http://openstreetmap.org/](http://openstreetmap.org/)*).
    Both are available under Creative Commons licenses, CC BY 3.0 (*[http://creativecommons.org/licenses/by/3.0](http://creativecommons.org/licenses/by/3.0)*)
    and CC BY SA (*[http://creativecommons.org/licenses/by-sa/3.0](http://creativecommons.org/licenses/by-sa/3.0)*),
    respectively.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们图表的x值和y值将表示位置，所以地图是完美的图表背景。为了避免任何版权问题，我们将使用Stamen Design提供的地图图片 (*[http://stamen.com/](http://stamen.com/)*),
    这些地图使用的是OpenStreetMap提供的数据 (*[http://openstreetmap.org/](http://openstreetmap.org/)*)。这两个资源都可以在Creative
    Commons许可下使用，分别是CC BY 3.0 (*[http://creativecommons.org/licenses/by/3.0](http://creativecommons.org/licenses/by/3.0)*)
    和CC BY SA (*[http://creativecommons.org/licenses/by-sa/3.0](http://creativecommons.org/licenses/by-sa/3.0)*)。
- en: Projections can be a tricky issue when you’re working with maps, but the smaller
    the mapped area, the less of an effect projections have, and they’re less critical
    in the center of the mapped region. For this example, with its relatively small
    area and action focused in the center, we’ll assume the map image uses a Mercator
    projection. That assumption lets us avoid any advanced mathematical transformations
    when converting from latitude and longitude to x- and y-values.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在处理地图时，投影可能是一个棘手的问题，但映射区域越小，投影的影响就越小，而且在映射区域的中心投影影响较小。在这个例子中，考虑到其相对较小的区域以及聚焦于中心的行动，我们假设地图图像使用的是墨卡托投影。这个假设让我们在将纬度和经度转换为x值和y值时避免了任何复杂的数学变换。
- en: '[Figure 1-21](ch01.html#map_image_can_be_used_as_the_background "Figure 1-21. A
    map image can be used as the background for a chart.") shows the map image on
    which we’ll overlay the hurricane’s path.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-21](ch01.html#map_image_can_be_used_as_the_background "图 1-21. 地图图像可以作为图表的背景。")展示了我们将叠加飓风路径的地图图像。'
- en: '![A map image can be used as the background for a chart.](figs/web/01fig21.png.jpg)Figure 1-21. A
    map image can be used as the background for a chart.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '![地图图像可以作为图表的背景。](figs/web/01fig21.png.jpg)图 1-21. 地图图像可以作为图表的背景。'
- en: 'Step 3: Plot the Data'
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 3 步：绘制数据
- en: It will take us several iterations to get the chart looking the way we want,
    but let’s start with the minimum number of options. One parameter we will need
    to specify is the bubble radius. For static charts such as this example, it’s
    easiest to experiment with a few values to find the best size. A value of `0.3`
    seems effective for our chart. In addition to the options, the `draw()` method
    expects an HTML element that will contain the chart, as well as the data itself.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要经过几次迭代才能使图表达到我们想要的效果，但让我们从最少的选项开始。我们需要指定的一个参数是气泡的半径。对于像这样的静态图表，最简单的方法是通过尝试几个值来找到最佳大小。`0.3`的值似乎对我们的图表有效。除了选项，`draw()`方法还需要一个HTML元素来包含图表，以及数据本身。
- en: '[PRE36]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: As you can see, we’re using our transformation function to extract the data
    from our source. The return value from that function serves directly as the second
    parameter to `draw()`.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们正在使用我们的转换函数从源中提取数据。该函数的返回值直接作为`draw()`的第二个参数。
- en: For now, we haven’t bothered with the background image. We’ll add that to the
    chart once we’ve adjusted the data a bit. The result in [Figure 1-22](ch01.html#basic_bubble_chart_varies_the_size_of_th
    "Figure 1-22. A basic bubble chart varies the size of the data points.") still
    needs improvement, but it’s a working start.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们还没有处理背景图像。我们会在稍微调整数据后将其添加到图表中。图 1-22 中的结果（[Figure 1-22](ch01.html#basic_bubble_chart_varies_the_size_of_th
    "Figure 1-22. A basic bubble chart varies the size of the data points.")）仍然需要改进，但它是一个可行的起点。
- en: '![A basic bubble chart varies the size of the data points.](figs/web/01fig22.png.jpg)Figure 1-22. A
    basic bubble chart varies the size of the data points.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '![基本的气泡图会根据数据点的大小变化。](figs/web/01fig22.png.jpg) 图 1-22。基本的气泡图会根据数据点的大小变化。'
- en: 'Step 4: Add the Background'
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 4：添加背景
- en: Now that we’ve seen how Flotr2 will plot our data, we can add in the background
    image. We’ll want to make a few other additions at the same time. First, as long
    as we’re adding the background, we can remove the grid lines. Second, let’s disable
    the axis labels; latitude and longitude values don’t have much meaning for the
    average user, and they’re certainly not necessary with the map. Finally, and most
    importantly, we need to adjust the scale of the chart to match the map image.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 Flotr2 如何绘制数据，接下来可以添加背景图像。我们还需要同时做一些其他修改。首先，既然要添加背景，就可以去掉网格线。其次，禁用轴标签；纬度和经度的数值对于普通用户意义不大，且在地图上并不需要。最后，也是最重要的，我们需要调整图表的比例，以适应地图图像。
- en: '[PRE37]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We’ve added `grid` options starting at ➊ to tell Flotr2 to omit both horizontal
    and vertical grid lines, and they designate the background image. Our image shows
    latitude values from 23.607°N to 33.657°N and longitude from 77.586°W to 94.298°W.
    At ➋ and ➌ we provide those values as ranges for the `xaxis` and `yaxis` options,
    and disable labels for both axes. Note that because we’re dealing with longitudes
    west of 0, we’re using negative values.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从 ➊ 开始添加了 `grid` 选项，告诉 Flotr2 省略水平和垂直的网格线，并指定背景图像。我们的图像显示了从 23.607°N 到 33.657°N
    的纬度值，以及从 77.586°W 到 94.298°W 的经度值。在 ➋ 和 ➌，我们为 `xaxis` 和 `yaxis` 选项提供了这些值作为范围，并禁用了两个轴的标签。注意，由于我们处理的是零度经线以西的经度，因此我们使用负值。
- en: At this point the chart in [Figure 1-23](ch01.html#with_a_map_as_the_background_imagecomma
    "Figure 1-23. With a map as the background image, the chart has a meaningful context.")
    is looking pretty good. We can clearly see the path of the hurricane and get a
    sense of how the storm strengthened and weakened.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，图 1-23 中的图表（[Figure 1-23](ch01.html#with_a_map_as_the_background_imagecomma
    "Figure 1-23. With a map as the background image, the chart has a meaningful context.")）看起来相当不错。我们可以清楚地看到飓风的路径，并感受到风暴是如何增强和减弱的。
- en: '![With a map as the background image, the chart has a meaningful context.](figs/web/01fig23.png.jpg)Figure 1-23. With
    a map as the background image, the chart has a meaningful context.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '![以地图为背景图像，图表有了更有意义的上下文。](figs/web/01fig23.png.jpg) 图 1-23。以地图为背景图像，图表有了更有意义的上下文。'
- en: 'Step 5: Color the Bubbles'
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 5：为气泡上色
- en: 'This example gives us a chance to provide even more information to our users
    without overly distracting them: we have the option to modify the bubble colors.
    Let’s use that freedom to indicate the Saffir-Simpson classification for storm
    intensity at each measurement point.'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子给了我们一个机会，向用户提供更多的信息，而不会过度分散他们的注意力：我们可以修改气泡颜色。让我们利用这个自由，表示每个测量点的 Saffir-Simpson
    风暴强度分类。
- en: Here’s where we can take advantage of the filter option we included in the data
    formatting function. The Saffir-Simpson classification is based on wind speed,
    so we’ll filter based on the `wind` property. For example, here’s how to extract
    only those values that represent a Category 1 hurricane, with wind speeds from
    74 to 95 miles per hour. The function we pass to `get_points` returns `true` only
    for appropriate wind speeds.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以利用我们在数据格式化函数中包含的筛选选项。Saffir-Simpson 分类是基于风速的，因此我们将基于 `wind` 属性进行筛选。例如，下面是如何提取仅代表
    1 级飓风（风速在每小时 74 到 95 英里之间）的数据。我们传递给 `get_points` 的函数仅对适当的风速返回 `true`。
- en: '[PRE38]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: To have Flotr2 assign different colors to different strengths, we divide the
    data into multiple series with the following code. Each series gets its own color.
    In addition to the five hurricane categories, we’ve also parsed out the points
    for tropical storm and tropical depression strength.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 要让 Flotr2 为不同的强度分配不同的颜色，我们使用以下代码将数据分成多个系列，每个系列都有自己的颜色。除了五个飓风等级，我们还提取了热带风暴和热带低气压的强度数据点。
- en: '[PRE39]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: We’ve also added labels for the hurricane categories and placed a legend in
    the lower left of the chart, as you can see in [Figure 1-24](ch01.html#different_colors_can_indicate_wind_stren
    "Figure 1-24. Different colors can indicate wind strength.").
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还为飓风类别添加了标签，并将图例放置在图表的左下角，正如你在[图 1-24](ch01.html#different_colors_can_indicate_wind_stren
    "图 1-24。不同的颜色可以表示风力强度。")中看到的那样。
- en: '![Different colors can indicate wind strength.](figs/web/01fig24.png.jpg)Figure 1-24. Different
    colors can indicate wind strength.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '![不同的颜色可以表示风力强度。](figs/web/01fig24.png.jpg)图 1-24。不同的颜色可以表示风力强度。'
- en: 'Step 6: Adjust the Legend Styles'
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 6 步：调整图例样式
- en: 'By default, Flotr2 seems to prefer all elements as large as possible. The legend
    in [Figure 1-24](ch01.html#different_colors_can_indicate_wind_stren "Figure 1-24. Different
    colors can indicate wind strength.") is a good example: it looks cramped and unattractive.
    Fortunately, the fix is rather simple: we simply add some CSS styles to give the
    legend padding. We can also set the legend’s background color explicitly rather
    than relying on Flotr2’s manipulation of opacity.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Flotr2 似乎偏好将所有元素显示得尽可能大。[图 1-24](ch01.html#different_colors_can_indicate_wind_stren
    "图 1-24。不同的颜色可以表示风力强度。")中的图例就是一个很好的例子：它看起来拥挤且不美观。幸运的是，解决方法非常简单：我们只需添加一些 CSS 样式来为图例添加内边距。我们还可以显式设置图例的背景色，而不是依赖
    Flotr2 对透明度的处理。
- en: '[PRE40]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: To prevent Flotr2 from creating its own background for the legend, set the opacity
    to `0`.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止 Flotr2 为图例创建自己的背景，将透明度设置为 `0`。
- en: '[PRE41]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: With that final tweak, we have the finished product of [Figure 1-25](ch01.html#bubble_chart_shows_a_third_dimension_lef
    "Figure 1-25. A bubble chart shows a third dimension (wind speed), as well as
    position."). We don’t want to use the Flotr2 options to specify a title, because
    Flotr2 will shrink the chart area by an unpredictable amount (since we cannot
    predict the font sizing in the users’ browsers). That would distort our latitude
    transformation. Of course, it’s easy enough to use HTML to provide the title.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 经过最后的调整，我们得到了[图 1-25](ch01.html#bubble_chart_shows_a_third_dimension_lef "图
    1-25。气泡图展示了第三个维度（风速）以及位置。")的最终产品。我们不想使用 Flotr2 选项来指定标题，因为 Flotr2 会以无法预测的量缩小图表区域（因为我们无法预测用户浏览器中的字体大小）。这会扭曲我们的纬度转换。当然，使用
    HTML 来提供标题是足够简单的。
- en: '![A bubble chart shows a third dimension (wind speed), as well as position.](figs/web/01fig25.png.jpg)Figure 1-25. A
    bubble chart shows a third dimension (wind speed), as well as position.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '![气泡图展示了第三个维度（风速）以及位置。](figs/web/01fig25.png.jpg)图 1-25。气泡图展示了第三个维度（风速）以及位置。'
- en: The bubble chart adds another dimension to the two-dimensional scatter chart.
    In fact, as in our example, it can add two further dimensions. The example uses
    bubble size to represent wind speed and color to indicate the hurricane’s classification.
    Both of these additional values require care, however. Humans are not good at
    comparing two-dimensional areas, nor can they easily compare relative shades or
    colors. We should never use the extra bubble chart dimensions to convey critical
    data or precise quantities. Rather, they work best in examples such as this—neither
    the exact wind speed nor the specific classification need be as precise as the
    location. Few people can tell the difference between 100- and 110-mile-per-hour
    winds, but they certainly know the difference between New Orleans and Dallas.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 气泡图为二维散点图增加了另一个维度。事实上，正如我们例子中所示，它甚至可以增加两个维度。该例子使用气泡大小来表示风速，使用颜色来指示飓风的分类。然而，这两个附加的值需要小心处理。人类在比较二维面积方面并不擅长，也无法轻松比较相对的色调或颜色。我们绝不应该使用额外的气泡图维度来传达关键信息或精确数据。相反，它们在像这样的一些例子中最有效——风速的确切数值或飓风的具体分类不需要像位置那样精准。很少有人能够区分
    100 英里每小时和 110 英里每小时的风速，但他们一定能分清新奥尔良和达拉斯之间的差异。
- en: 'Step 7: Work Around Flotr2 “Bugs”'
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 7 步：解决 Flotr2 的“bug”
- en: 'Be sure to refer to Step 9 of [Creating a Basic Bar Chart](ch01.html#creating_a_basic_bar_chart
    "Creating a Basic Bar Chart") in [Step 9: Work Around Flotr2 “Bugs”](ch01.html#step_9_work_around_flotr2_quotation_mark
    "Step 9: Work Around Flotr2 “Bugs”") to see how to work around some “bugs” in
    the Flotr2 library.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 确保参考[创建基本条形图](ch01.html#creating_a_basic_bar_chart "创建基本条形图")中的第 9 步以及[第 9 步：解决
    Flotr2 的“bug”](ch01.html#step_9_work_around_flotr2_quotation_mark "第 9 步：解决 Flotr2
    的“bug”")，了解如何解决 Flotr2 库中的一些“bug”。
- en: Displaying Multidimensional Data with a Radar Chart
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用雷达图展示多维数据
- en: If you have data with many dimensions, a radar chart may be the most effective
    way to visualize it. Radar charts are not as common as other charts, though, and
    their unfamiliarity makes them a little harder for users to interpret. If you
    design a radar chart, be careful not to increase that burden.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的数据有很多维度，雷达图可能是最有效的可视化方式。不过，雷达图不像其他图表那样常见，它的不熟悉性使得用户解读起来稍显困难。如果你设计雷达图，要小心不要增加这种负担。
- en: 'Radar charts are most effective when your data has several characteristics:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 雷达图在数据具有多个特征时最为有效：
- en: You don’t have too many data points to show. Half a dozen data points is about
    the maximum that a radar chart can accommodate.
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你展示的数据点不应太多。雷达图能够容纳的最大数据点大约是半打。
- en: The data points have multiple dimensions. With two or even three dimensions
    to your data, you would probably be better off with a more traditional chart type.
    Radar charts come into play with data of four or more dimensions.
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据点具有多个维度。如果数据只有两个甚至三个维度，使用更传统的图表类型可能会更好。雷达图适用于四个或更多维度的数据。
- en: Each data dimension is a scale that can at least be ranked (from good to bad,
    say), if not assigned a number outright. Radar charts don’t work well with data
    dimensions that are merely arbitrary categories (such as political party or nationality).
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个数据维度都是一个至少可以排序的尺度（比如从好到坏），如果不能直接分配数值的话。雷达图不适合处理仅仅是任意类别的数据维度（比如政党或国籍）。
- en: A classic use for radar charts is analyzing the performance of players on a
    sports team. Consider, for example, the 2012 starting lineup of Miami Heat, a
    team in the National Basketball Association (NBA). There are only five data points
    (the five players). There are multiple dimensions—points, assists, rebounds, blocks,
    steals, and so on—and each of those dimensions has a natural numeric value.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 雷达图的经典用途是分析运动队球员的表现。例如，考虑一下2012年迈阿密热火队的首发阵容，这支队伍来自美国职业篮球联赛（NBA）。这里只有五个数据点（五名球员）。有多个维度——得分、助攻、篮板、盖帽、抢断等等——每个维度都有一个自然的数值。
- en: '[Table 1-1](ch01.html#miami_heat_2011en_dash2012_season "Table 1-1. Miami Heat
    2011–2012 Season") shows the players’ 2011–2012 season averages per game, as well
    as the team totals (which include the contributions of nonstarters).'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '[表1-1](ch01.html#miami_heat_2011en_dash2012_season "表1-1. 迈阿密热火队2011–2012赛季")展示了球员们2011–2012赛季的每场比赛平均数据，以及球队的总计（包括替补球员的贡献）。'
- en: Table 1-1. Miami Heat 2011–2012 Season
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 表1-1. 迈阿密热火队2011–2012赛季
- en: '| Player | Points | Rebounds | Assists | Steals | Blocks |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| 球员 | 得分 | 篮板 | 助攻 | 抢断 | 盖帽 |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| Chris Bosh | 17.2 | 7.9 | 1.6 | 0.8 | 0.8 |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| 克里斯·波什 | 17.2 | 7.9 | 1.6 | 0.8 | 0.8 |'
- en: '| Shane Battier | 5.4 | 2.6 | 1.2 | 1.0 | 0.5 |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| 谢恩·巴蒂尔 | 5.4 | 2.6 | 1.2 | 1.0 | 0.5 |'
- en: '| LeBron James | 28.0 | 8.4 | 6.1 | 1.9 | 0.8 |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| 勒布朗·詹姆斯 | 28.0 | 8.4 | 6.1 | 1.9 | 0.8 |'
- en: '| Dwyane Wade | 22.3 | 5.0 | 4.5 | 1.7 | 1.3 |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| 德维恩·韦德 | 22.3 | 5.0 | 4.5 | 1.7 | 1.3 |'
- en: '| Mario Chalmers | 10.2 | 2.9 | 3.6 | 1.4 | 0.2 |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| 马里奥·查尔默斯 | 10.2 | 2.9 | 3.6 | 1.4 | 0.2 |'
- en: '| Team total | 98.2 | 41.3 | 19.3 | 8.5 | 5.3 |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| 团队总计 | 98.2 | 41.3 | 19.3 | 8.5 | 5.3 |'
- en: Just as in Step 1 of [Creating a Basic Bar Chart](ch01.html#creating_a_basic_bar_chart
    "Creating a Basic Bar Chart"), we need to include the Flotr2 library in our web
    page and set aside a `<div>` element to contain the chart we’ll construct.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在[创建基本条形图](ch01.html#creating_a_basic_bar_chart "创建基本条形图")的步骤1中一样，我们需要在网页中引入Flotr2库，并为构建的图表预留一个`<div>`元素。
- en: 'Step 1: Define the Data'
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤1：定义数据
- en: We’ll start with a typical JavaScript expression of the team’s statistics. For
    our example we’ll start with an array of objects corresponding to each starter,
    and a separate object for the entire team.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个典型的JavaScript表达式开始，表示球队的统计数据。在这个例子中，我们将从一个对象数组开始，每个对象对应一个首发球员，并为整个团队单独创建一个对象。
- en: '[PRE42]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: For an effective radar plot, we need to normalize all the values to a common
    scale. In this example, let’s translate raw statistics into team percentage. For
    example, instead of visualizing LeBron James’s scoring as 28.0, we’ll show it
    as 29 percent (28.0/98.2).
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有效的雷达图，我们需要将所有值标准化到一个共同的尺度。在这个例子中，我们将原始统计数据转换为团队百分比。例如，不是将勒布朗·詹姆斯的得分显示为28.0，而是显示为29百分比（28.0/98.2）。
- en: There are a couple of functions we can use to convert the raw statistics into
    an object to chart. The first function returns the `statistics` object for a single
    player. It simply searches through the `players` array looking for that player’s
    name. The second function steps through each statistic in the `team` object, gets
    the corresponding statistic for the named player, and normalizes the value. The
    returned object will have a `label` property equal to the player’s name, and an
    array of normalized statistics for that player.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用几个函数将原始统计数据转换为可以绘制的对象。第一个函数返回单个球员的 `statistics` 对象，它通过在 `players` 数组中搜索该球员的名字来完成。第二个函数遍历
    `team` 对象中的每个统计数据，获取该球员的相应统计数据，并将值归一化。返回的对象将具有一个等于球员姓名的 `label` 属性，并且包含该球员的归一化统计数据数组。
- en: '[PRE43]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'For example, the function call `player_data(``"``LeBron James``"``)` returns
    the following object:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，函数调用 `player_data(``"``LeBron James``"``)` 返回以下对象：
- en: '[PRE44]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: For the specific statistics, we’re using a counter from 0 to 4\. We’ll see how
    to map those numbers into meaningful values shortly.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具体的统计数据，我们使用一个从 0 到 4 的计数器。稍后我们会看到如何将这些数字映射到有意义的值。
- en: Since Flotr2 doesn’t require jQuery, we aren’t taking advantage of any jQuery
    convenience function in the preceding code. We’re also not taking full advantage
    of the JavaScript standard (including methods such as `.each()`), because Internet
    Explorer releases prior to version 9 do not support those methods. If you have
    jQuery on your pages for other reasons, or if you don’t need to support older
    IE versions, you can simplify this code quite a bit.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Flotr2 不需要 jQuery，我们在前面的代码中并没有利用任何 jQuery 的便利函数。我们也没有充分利用 JavaScript 标准（包括
    `.each()` 这样的函数），因为版本 9 之前的 Internet Explorer 不支持这些方法。如果你已经在页面中使用了 jQuery，或者不需要支持旧版的
    IE，可以大大简化这段代码。
- en: The last bit of code we’ll use is a simple array of labels for the statistics
    in our chart. The order must match the order returned in `player_data()`.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的最后一段代码是一个简单的标签数组，用于图表中的统计数据。顺序必须与 `player_data()` 返回的顺序相匹配。
- en: '[PRE45]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Step 2: Create the Chart'
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 2：创建图表
- en: A single call to Flotr2’s `draw()` method is all it takes to create our chart.
    We need to specify the HTML element in which to place the chart, as well as the
    chart data. For the data, we’ll use the `get_player()` function shown previously.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 只需一次调用 Flotr2 的 `draw()` 方法，就能创建我们的图表。我们需要指定放置图表的 HTML 元素以及图表数据。对于数据，我们将使用前面展示的
    `get_player()` 函数。
- en: '[PRE46]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: This code also includes a few options. The `title` option at ➊ provides an overall
    title for the chart, and the `radar` option at ➋ tells Flotr2 the type of chart
    we want. With a radar chart, we also have to explicitly specify a circular (as
    opposed to rectangular) grid, so we do that with the `grid` option at ➌. The final
    two options detail the x- and y-axes. For the x-axis, we use our `labels` array
    to give each statistic a name, and for the y-axis, we forgo labels altogether
    and explicitly specify the minimum and maximum values.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码还包括了一些选项。在 ➊ 处的 `title` 选项为图表提供了一个总标题，而在 ➋ 处的 `radar` 选项告诉 Flotr2 我们想要的图表类型。对于雷达图，我们还必须明确指定一个圆形（而非矩形）网格，因此我们在
    ➌ 处使用 `grid` 选项来做到这一点。最后两个选项详细说明了 x 轴和 y 轴。对于 x 轴，我们使用 `labels` 数组为每个统计数据命名，而对于
    y 轴，我们完全省略了标签，明确指定了最小值和最大值。
- en: The only real trick is making the HTML container wide enough to hold both the
    chart proper and the legend, since Flotr2 doesn’t do a great job of calculating
    the size appropriately. For a static chart such as this one, trial and error is
    the simplest approach and gives us the chart shown in [Figure 1-26](ch01.html#radar_charts_let_users_compare_multiple
    "Figure 1-26. Radar charts let users compare multiple data variables at once.").
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的技巧是使 HTML 容器足够宽，以容纳图表本身和图例，因为 Flotr2 在计算合适的大小时表现不太好。对于像这样的静态图表，试错法是最简单的方法，它给我们展示了图表
    [图 1-26](ch01.html#radar_charts_let_users_compare_multiple "图 1-26. 雷达图让用户一次性比较多个数据变量。")。
- en: '![Radar charts let users compare multiple data variables at once.](figs/web/01fig26.png.jpg)Figure 1-26. Radar
    charts let users compare multiple data variables at once.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '![雷达图让用户一次性比较多个数据变量。](figs/web/01fig26.png.jpg)图 1-26. 雷达图让用户一次性比较多个数据变量。'
- en: Although it’s certainly not a surprise to NBA fans, the chart clearly demonstrates
    the value of LeBron James to the team. He led the team in four of the five major
    statistical categories.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这对 NBA 球迷来说并不意外，但图表清晰地展示了 LeBron James 对球队的价值。他在五大主要统计类别中有四个领衔。
- en: The radar chart lends itself only to a few specialized applications, but it
    can be effective when there is a modest number of variables, each of which is
    easily quantified. In [Figure 1-26](ch01.html#radar_charts_let_users_compare_multiple
    "Figure 1-26. Radar charts let users compare multiple data variables at once."),
    each player’s area on the chart roughly corresponds to his total contribution
    across all of the variables. The relative size of the red area makes James’s total
    contribution strikingly clear.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 雷达图适用于少数几个特殊应用场景，但当变量数量适中且每个变量都能轻松量化时，雷达图非常有效。在[图1-26](ch01.html#radar_charts_let_users_compare_multiple
    "图1-26. 雷达图让用户一次比较多个数据变量")中，每个玩家在图表中的区域大致对应其在所有变量中的总贡献。红色区域的相对大小清晰地显示了詹姆斯的总贡献。
- en: 'Step 3: Work Around Flotr2 “Bugs”'
  id: totrans-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第三步：解决 Flotr2 “bug”
- en: 'Be sure to refer to Step 9 of [Creating a Basic Bar Chart](ch01.html#creating_a_basic_bar_chart
    "Creating a Basic Bar Chart") in [Step 9: Work Around Flotr2 “Bugs”](ch01.html#step_9_work_around_flotr2_quotation_mark
    "Step 9: Work Around Flotr2 “Bugs”") to see how to work around some “bugs” in
    the Flotr2 library.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必参考[创建基本柱状图](ch01.html#creating_a_basic_bar_chart "创建基本柱状图")中的第9步，查看如何解决Flotr2库中的一些“bug”。
- en: Summing Up
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: The examples in this chapter provide a quick tour of the many types of standard
    data charts, the simplest and most straightforward tool for visualizing data.
    Each of these charts is especially effective for certain types of visualizations.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的示例提供了快速浏览多种标准数据图表的方式，这些图表是可视化数据的最简单、最直接的工具。每种图表在某些特定类型的可视化中尤为有效。
- en: '****Bar charts****. The workhorse of charts. Effective at showing the change
    of a quantity over a small number of regular time intervals, or at comparing several
    different quantities against one another.'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****柱状图****。图表中的主力工具。适用于展示某一数量随少数规则时间间隔变化，或用于比较几个不同的数量。'
- en: '****Line charts****. More effective than bar charts when there is a large number
    of data values to show, or for showing quantities that vary on an irregular schedule.'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****折线图****。当数据值较多或用于展示变化不规则的数量时，比柱状图更有效。'
- en: '****Pie charts****. Often overused but can be effective to highlight the proportion
    of a single value within a whole.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****饼图****。虽然常常被过度使用，但在突出显示单一值在整体中所占比例时，饼图仍然非常有效。'
- en: '****Scatter charts****. Effective for showing possible relationships between
    two values.'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****散点图****。有效地展示两个数值之间的可能关系。'
- en: '****Bubble charts****. Adds a third value to scatter charts but should be used
    carefully, as it’s difficult to accurately assess the relative areas of circular
    regions.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****气泡图****。在散点图的基础上增加了第三个数值，但使用时要小心，因为很难准确评估圆形区域的相对面积。'
- en: '****Radar charts****. Designed to show several aspects of the subject on one
    chart. Not as familiar to many users but can be effective for certain specialized
    cases.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****雷达图****。设计用来在一张图表上展示多个方面的内容。虽然许多用户不太熟悉，但在某些特殊情况下，雷达图非常有效。'
