- en: '**12'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**12'
- en: THE FUTURE OF ANDROID MALWARE**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Android恶意软件的未来**'
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: In this last chapter, we’ll share our thoughts about the future of Android malware,
    based on an examination of recent specimens, as well as trends observed on other
    platforms. Some of our predictions are almost guaranteed to come true; others
    are more speculative.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这最后一章中，我们将根据对最近样本的检查以及在其他平台上观察到的趋势，分享我们对Android恶意软件未来的看法。我们的一些预测几乎可以肯定会实现；而其他则更具推测性。
- en: Of course, not all Android malware is created for the same purpose, making it
    difficult to lay out a unified vision for the future. For this reason, we’ll restrict
    our discussion to mass malware, which indiscriminately infects Android devices
    in an attempt to make money at scale. Other, more targeted malware specimens,
    such as state-sponsored remote exploitation tools, have diverse and complicated
    motivations, so we won’t cover these here.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，并非所有的Android恶意软件都是出于相同的目的而创建的，这使得很难为未来制定一个统一的愿景。因此，我们将限制我们的讨论在大规模恶意软件上，这些恶意软件不加区分地感染Android设备，试图大规模盈利。其他更具针对性的恶意软件样本，如国家支持的远程利用工具，具有多样化和复杂的动机，因此我们将不在此处讨论它们。
- en: 'When it comes to mass malware, we can consider three areas: technology, distribution,
    and economics. We’ll also compare Android to the older Windows operating system
    and describe what the trends observed on that platform mean for future machine
    learning detection efforts.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及大规模恶意软件时，我们可以考虑三个方面：技术、分发和经济。我们还将比较Android与较老的Windows操作系统，并描述在该平台上观察到的趋势对未来机器学习检测工作的意义。
- en: '**Windows vs. Android**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Windows vs. Android**'
- en: To predict future Android malware trends, we can learn from Microsoft Windows,
    whose popularity and accessibility are comparable to Android’s. As Windows is
    more than 20 years older than Android, a number of the malware techniques that
    we are seeing and expect to see in the future on Android have already appeared
    on Windows, making it easy to draw parallels between the two. However, other aspects
    of the operating systems, including their licensing and software architecture,
    are very different and cannot be easily compared. Thus, certain Android malware
    technology trends might not apply to Windows, and vice versa.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要预测未来Android恶意软件的趋势，我们可以借鉴Microsoft Windows的经验，其流行度和可访问性与Android相当。由于Windows比Android早20多年，我们在Android上看到的以及预期将来会出现的许多恶意软件技术手段已经在Windows上出现过，因此可以轻松地在两者之间进行类比。然而，操作系统的其他方面，包括其许可和软件架构，却有很大的不同，不能轻易比较。因此，某些Android恶意软件技术趋势可能不适用于Windows，反之亦然。
- en: '***Windows***'
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Windows***'
- en: Since the 1980s, Microsoft and hundreds of third-party security companies have
    helped protect users and computers from Windows malware, as well as malware targeting
    its predecessor, MS-DOS. As a result, this malware has gone through many cycles
    of refinement, taking advantage of newly discovered niches in these operating
    systems before Microsoft catches up.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 自20世纪80年代以来，微软及数百家第三方安全公司已帮助保护用户和计算机免受Windows恶意软件的侵害，以及针对其前身MS-DOS的恶意软件。因此，这种恶意软件在微软追赶之前已经经历了多个精炼周期，利用这些操作系统中新发现的利基。
- en: As an example, recall the file infector viruses of these operating systems’
    early days. File infectors modified benign executable files by injecting malicious
    code into them. This kind of malware was extremely common until Microsoft added
    executable file signing to Windows. Today, file infectors are rare, as most benign
    executable files are signed with a private key that is known only to the file’s
    original software developers. Careless modification of these signed executable
    files, for example, by a file infector wanting to inject malicious code, breaks
    the file’s integrity, and Windows won’t allow the modified files to execute.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，回想一下这些操作系统早期的文件感染病毒。文件感染者通过向良性可执行文件注入恶意代码来修改它们。这种恶意软件在Microsoft向Windows添加可执行文件签名之前非常常见。今天，由于大多数良性可执行文件都使用只有原始软件开发人员才知道的私钥进行签名，因此文件感染者已经很少见了。对这些已签名可执行文件的不慎修改（例如，想要注入恶意代码的文件感染者）会破坏文件的完整性，Windows将不允许执行修改后的文件。
- en: In the late 1990s, Office macro malware surpassed the popularity of file infectors
    on Windows. Attackers embedded malicious code in files belonging to Office products
    like Word or Excel, which allowed powerful scripts to execute many different kinds
    of attacks against affected systems. Users were tricked into opening these *.doc*
    or *.xls* files sent via email spam with alluring messages promising money or
    particularly juicy information, like leaked salary information from their employers.
    Once again, Microsoft caught up and closed this vector of attack by making it
    safer to open Office documents by default. It also launched additional safety
    features, like the ability to permanently disable Office macros across a whole
    enterprise, to counter this form of abuse.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在1990年代末，Office宏病毒在Windows平台上超过了文件感染病毒的流行度。攻击者将恶意代码嵌入到Office产品（如Word或Excel）所属的文件中，这使得强大的脚本能够对受影响的系统发起多种不同类型的攻击。用户被欺骗打开这些通过电子邮件垃圾邮件发送的*.doc*或*.xls*文件，邮件内容通常会有诱人的信息，比如承诺金钱或特别有价值的信息，例如来自雇主的泄露薪资信息。微软再次采取措施，通过默认提高打开Office文档的安全性，关闭了这一攻击途径。它还推出了额外的安全功能，例如可以在整个企业范围内永久禁用Office宏，以应对这种滥用。
- en: 'In the early 2000s, Windows computers connected to the fledgling internet were
    regularly attacked by early internet worms with names like Code Red, Nimda, and
    SQL Slammer. These worms took advantage of Windows installations that had many
    services exposed to the internet by default (a condition that occurred even on
    consumer machines, where average users may not have known the services even existed).
    The ease with which these internet worms spread, and the difficulty that users
    experienced in defending themselves, made them the first globally feared malware.
    The age of the internet worms peaked early, though, lasting just a few years.
    Facing pressure, Microsoft once again revisited the security of Windows: default
    Windows installations exposed fewer services to the internet, and services that
    really did need to be enabled were significantly hardened against wormlike attacks.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在2000年代初，连接到新兴互联网的Windows计算机常常遭到早期互联网蠕虫的攻击，这些蠕虫的名字包括Code Red、Nimda和SQL Slammer。这些蠕虫利用了默认情况下许多Windows安装中暴露给互联网的服务（即使是普通用户使用的消费级机器，也有可能他们并不知道这些服务的存在）。这些互联网蠕虫的传播速度之快，以及用户在防御时遇到的困难，使得它们成为了全球首个令人恐惧的恶意软件。然而，互联网蠕虫的时代很快就达到了顶峰，仅持续了几年。面对压力，微软再次回顾了Windows的安全性：默认情况下，Windows安装暴露给互联网的服务减少了，真正需要启用的服务也进行了显著的加固，以防止类似蠕虫的攻击。
- en: Microsoft’s work to improve the security of its products is impressive and not
    limited to these examples. New Windows malware must find fresh pathways for abuse,
    imposing costs on malware developers. In addition, Windows-specific antivirus
    companies have spent decades developing strong capabilities for detecting and
    defending against abuse. Once it’s detected by antivirus tools, the lifetime of
    new Windows malware is cut short. Today, successful specimens must be a lot more
    sophisticated than successful Android malware, as the Windows ecosystem has gone
    through many more cycles of this exploitation and hardening cycle.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 微软在改善其产品安全性方面的努力令人印象深刻，且不仅限于这些例子。新的Windows恶意软件必须找到新的滥用路径，这给恶意软件开发者带来了成本。此外，专门为Windows平台开发的杀毒公司已经花费了数十年时间，研发出强大的检测和防御能力。一旦通过杀毒工具检测到，新的Windows恶意软件的生命周期就会被缩短。今天，成功的Windows恶意软件样本必须比成功的Android恶意软件更为复杂，因为Windows生态系统经历了更多的滥用与加固周期。
- en: '***Android***'
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Android***'
- en: What does all of that have to do with the future of Android malware? Our look
    at Windows suggests that the best way to stop Android malware in the long term
    is to improve the security of the Android ecosystem across the board. Malware
    defenders can’t win merely by using a malware detection and removal strategy.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些内容与Android恶意软件的未来有何关系？我们对Windows的观察表明，长期来看，阻止Android恶意软件的最佳方式是全面提高Android生态系统的安全性。仅仅依靠恶意软件检测和清除策略，防御者无法取胜。
- en: As discussed in [Part I](part1.xhtml), Android has already experienced several
    rounds of hardening; malware authors discover avenues of attack, and Google consequently
    beefs up the security of the operating system. Some of the most successful defensive
    examples include Android’s response to attempts to send fraudulent premium SMS
    messages. The operating system now shows a warning dialog whenever an app tries
    to send a premium SMS, making it almost impossible for malware to abuse this vector.
    The deprecation of the device administration API, which malware abused to gain
    persistence on devices, is another example. Future Android malware will have to
    continuously react to such changes, abandon previously profitable attack techniques,
    and move on to target less defended parts of the ecosystem.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如在[第一部分](part1.xhtml)中讨论的，Android 已经经历了几轮加固；恶意软件作者发现攻击途径，谷歌因此加强了操作系统的安全性。一些最成功的防御示例包括
    Android 对发送欺诈性高级短信尝试的回应。操作系统现在会在应用程序尝试发送高级短信时显示警告对话框，这使得恶意软件几乎无法利用这一途径。恶意软件曾滥用的设备管理
    API 被废弃，成为另一个例子。未来的 Android 恶意软件将不得不持续应对这些变化，放弃以前有利可图的攻击手段，并转向目标那些防御较弱的生态系统部分。
- en: Operating system improvements are less likely to thwart certain types of malware,
    such as those relying on social engineering or advertising fraud, which really
    only need an internet connection and a JavaScript engine. Thus, defenses must
    involve partnerships with major players in the Android security ecosystem, including
    other platform providers, mobile carriers, device manufacturers, and security
    companies that benefit from a clean Android ecosystem. If the profitability of
    certain types of Android malware can be lowered enough, malware authors may move
    on to a different target with a higher return on investment.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统的改进不太可能阻止某些类型的恶意软件，例如那些依赖社交工程或广告欺诈的恶意软件，这些恶意软件实际上只需要一个互联网连接和一个 JavaScript
    引擎。因此，防御措施必须与 Android 安全生态系统中的主要参与者合作，包括其他平台提供商、移动运营商、设备制造商以及那些从干净的 Android 生态系统中获益的安全公司。如果某些类型的
    Android 恶意软件的盈利能力被压低到足够低的水平，恶意软件作者可能会转向其他回报更高的目标。
- en: In many ways, however, Android lives in a world with a completely different
    threat model than Windows. The first version of Windows was developed when few
    people owned personal computers, and even fewer connected their computers to any
    kind of public network; the number of criminal gangs trying to abuse network-connected
    computers was just about zero. From the beginning, Android has run on millions
    (and later billions) of devices with nearly permanent connections to the internet,
    where thousands of criminal gangs are lurking. Understanding this, Android’s developers
    created a heavily locked down operating system where regular apps, including malware,
    have barely any access to areas of the operating system that could be abused.
    In theory, this should mean that there are fewer ways for attackers to abuse Android
    than Windows. As the platform matures, it will be interesting to see which overlooked
    niches malware developers discover in the future and how the Android team will
    respond to these threats.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在许多方面，Android 生活在一个与 Windows 完全不同的威胁模型中。Windows 的第一个版本是在几乎没有人拥有个人电脑，甚至更少有人将电脑连接到任何公共网络的情况下开发的；当时试图滥用网络连接电脑的犯罪团伙几乎为零。自一开始，Android
    就运行在数百万（后来是数十亿）台几乎永久连接到互联网的设备上，成千上万的犯罪团伙潜伏其中。了解这一点后，Android 的开发者创建了一个高度封闭的操作系统，其中常规应用程序（包括恶意软件）几乎无法访问可能被滥用的操作系统区域。理论上，这意味着攻击者滥用
    Android 的方式比滥用 Windows 更少。随着平台的发展，值得关注的是，恶意软件开发者在未来会发现哪些被忽视的漏洞，以及 Android 团队如何应对这些威胁。
- en: '**Hiding Malicious Behavior with Anti-Analysis Techniques**'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用反分析技术隐藏恶意行为**'
- en: 'Windows malware is more advanced than Android malware in one particular aspect:
    the anti-analysis techniques its developers have deployed over the years. These
    techniques make analysis using typical tools like virtual machines, disassemblers,
    and decompilers much harder and more frustrating. Even better for malware authors,
    many free and commercial executable packers, obfuscators, and other protectors
    exist for Windows, so they don’t need to spend time building their own protection
    mechanisms. They can use freely available tools or buy, steal, or pirate powerful
    commercial products.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 恶意软件在一个特定方面比 Android 恶意软件更为先进：它的开发者多年来部署的反分析技术。这些技术使得使用典型的工具（如虚拟机、反汇编器和反编译器）进行分析变得更加困难且令人沮丧。更有利于恶意软件作者的是，Windows
    平台上存在许多免费的和商业的可执行文件打包器、混淆器以及其他保护工具，因此他们无需花时间自己构建保护机制。他们可以使用现成的工具，或购买、窃取、盗版强大的商业产品。
- en: While similar app protectors exist on Android, they aren’t usually as advanced.
    For example, Windows malware authors can choose from a large set of executable
    protectors with advanced features like control flow obfuscation. Certain tools
    will even transform their original executable code into protector-specific virtual
    machine code. On Android, there are far fewer off-the-shelf protectors available,
    and the features they provide are much less sophisticated. In the coming years,
    we expect the sophistication of anti-analysis defenses and executable packers
    on the Android platform to increase; however, many of the techniques used on Windows
    are flat-out impossible on Android due to the ways in which the operating system
    is locked down.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Android 上也存在类似的应用保护工具，但通常不如 Windows 平台上的先进。例如，Windows 恶意软件作者可以从大量的可执行保护工具中选择，许多工具具有像控制流混淆等先进功能。某些工具甚至会将原始的可执行代码转化为特定保护器的虚拟机代码。而在
    Android 平台上，现成的保护工具要少得多，而且它们提供的功能也远不如 Windows 上的复杂。预计在未来几年，Android 平台上的反分析防御和可执行文件打包工具的复杂度将会增加；然而，由于操作系统的封闭性，许多
    Windows 上使用的技术在 Android 上是完全不可能实现的。
- en: For that reason, Android is unlikely to be targeted by certain attack techniques
    common on Windows, such as privileged code running at kernel level or tricks that
    require the coordination of multiple processes, cross-process thread injection,
    and files hidden across the filesystem. One big advantage of Android for security
    companies is that nearly everything an app does on the platform has to happen
    within the same process. This means security researchers can look for malicious
    behavior in just one place. Barring privilege escalation exploits, which are extremely
    rare on recent versions of Android, abuse cannot be strewn across the system,
    hiding from detection and analysis wherever possible.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个原因，Android 不太可能成为某些在 Windows 上常见的攻击技术的目标，比如以内核级别运行的特权代码，或者需要多个进程协调、跨进程线程注入、以及文件在整个文件系统中隐藏的技巧。对于安全公司而言，Android
    的一个大优势是，几乎所有应用在平台上执行的操作都必须发生在同一个进程内。这意味着安全研究人员可以在一个地方寻找恶意行为。除非是特权升级漏洞（在新版 Android
    上极为罕见），否则滥用行为无法像在其他系统中那样分散到各处，躲避检测和分析。
- en: '***Native ARM Code***'
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***原生 ARM 代码***'
- en: Because Android prevents the hiding of abuse across the system, malware authors
    have explored ways to conceal malware’s functionality within an app’s single process.
    One example of such efforts is the use of native assembly code as an anti-detection
    measure.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Android 阻止了系统内的滥用行为隐藏，恶意软件作者已探索出将恶意软件功能隐藏在应用单一进程中的方法。一个例子就是利用原生汇编代码作为反检测手段。
- en: Historically, malware developers have written their code in Java or Kotlin and
    compiled it to DEX, as have most legitimate app developers. However, certain technical
    properties of DEX code make it easy for security researchers to analyze. Malware
    authors are fully aware of this, which is why we’re seeing them shift away from
    DEX code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，恶意软件开发者与大多数合法应用开发者一样，都是用 Java 或 Kotlin 编写代码并将其编译成 DEX。然而，DEX 代码的某些技术特性使得安全研究人员很容易进行分析。恶意软件作者完全意识到这一点，这也是我们看到他们逐渐远离
    DEX 代码的原因。
- en: The most obvious alternative to DEX code is the use of native assembly code,
    usually ARM, compiled from languages like C++. Native assembly code doesn’t have
    the nice technical properties of DEX code and is much harder to parse and analyze.
    Most, if not all, companies performing Android malware analysis today have more
    advanced DEX analysis capabilities than ARM analysis capabilities. We believe
    malware authors are aware of this fact and are using it to their advantage.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: DEX 代码最明显的替代方案是使用原生汇编代码，通常是 ARM，且由 C++ 等语言编译而成。原生汇编代码不像 DEX 代码那样具有良好的技术特性，解析和分析起来也更加困难。目前大多数进行
    Android 恶意软件分析的公司，DEX 分析能力要远强于 ARM 分析能力。我们相信，恶意软件作者已经意识到这一点，并利用这一优势。
- en: While Android malware apps compiled to DEX code still outnumber those compiled
    to ARM code, we’ve seen malware authors slowly starting to experiment with ARM
    code. Some Android malware is completely developed in ARM. In other cases, the
    harmless parts of the apps are developed in DEX and the malicious parts in ARM.
    In yet other cases, ARM usage is minimal but purposefully applied to circumvent
    typical capabilities of anti-malware software. For example, in some known Android
    malware samples, the ARM code supplies an encryption key to the DEX code, which
    uses it to decrypt strings involved in malicious behavior.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管目前编译为 DEX 代码的 Android 恶意软件应用仍然超过编译为 ARM 代码的数量，但我们已经看到恶意软件作者开始慢慢尝试 ARM 代码。一些
    Android 恶意软件完全使用 ARM 开发。在其他情况下，应用的无害部分使用 DEX 开发，恶意部分则使用 ARM 开发。还有一些情况下，ARM 的使用较少，但被有目的地应用于绕过典型的反恶意软件能力。例如，在一些已知的
    Android 恶意软件样本中，ARM 代码为 DEX 代码提供了一个加密密钥，DEX 代码利用这个密钥解密与恶意行为相关的字符串。
- en: Unless a static analysis engine has data flow analysis capabilities that can
    cross ARM–DEX code boundaries, it will have a hard time flagging malicious behavior
    hidden in encrypted strings in the DEX code. Malware authors likely correctly
    assume that most security companies do not have the capabilities for cross-architecture
    control flow and data flow analysis.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 除非静态分析引擎具备能够跨越 ARM–DEX 代码边界的数据流分析能力，否则它很难标记出隐藏在 DEX 代码中加密字符串里的恶意行为。恶意软件作者很可能正确地假设大多数安全公司没有进行跨架构控制流和数据流分析的能力。
- en: '***Downloaded Modules***'
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***下载模块***'
- en: Because Android devices are often online most of the time, whether through Wi-Fi
    or a mobile network, many malware apps targeting the platform rely on the availability
    of an internet connection to download additional code from remote servers. This
    allows them to hide this malicious code from analysts.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 Android 设备大多数时间都保持在线，无论是通过 Wi-Fi 还是移动网络，许多针对该平台的恶意软件应用依赖于互联网连接的可用性，从远程服务器下载额外的代码。这使得它们能够将恶意代码隐藏起来，避免被分析人员发现。
- en: Using the most common form of this technique, an app might contain only harmless
    code in its APK file and download all malicious functionality from a remote server.
    Anybody analyzing the APK file for malicious activity will come up blank unless
    they also acquire the remote code file, which can be tricky. Often, attackers
    won’t upload that file to their servers until their malware installation base
    has reached critical mass; there’s no need to tip off anti-malware researchers
    while you’re still building up your botnet. Security researchers who are late
    to the analysis game may likewise miss the window during which malicious code
    is available for download.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种技术的最常见形式下，应用可能仅在其 APK 文件中包含无害代码，并从远程服务器下载所有的恶意功能。任何分析 APK 文件以寻找恶意活动的人都不会发现问题，除非他们还获取了远程代码文件，而这可能会很棘手。通常情况下，攻击者在恶意软件安装量达到临界规模之前不会将该文件上传到他们的服务器；在你的僵尸网络尚未构建完成时，没有必要向反恶意软件研究人员透露信息。迟到的安全研究人员也可能错过恶意代码下载的窗口期。
- en: More sophisticated Android malware today is already deploying complex plug-in-based
    architectures through remotely hosted files. Depending on environmental variables
    like the user’s phone model, country, or mobile carrier, the apps download different
    malicious plug-ins from remote servers to optimize the monetization of the malware.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 目前更为复杂的 Android 恶意软件已经通过远程托管文件部署了基于插件的复杂架构。根据环境变量，如用户的手机型号、国家或移动运营商，应用会从远程服务器下载不同的恶意插件，以优化恶意软件的变现方式。
- en: '***Less Popular Languages***'
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***不太流行的语言***'
- en: Another way to deny visibility to anti-malware products is to make use of uncommon
    programming languages. It’s safe to assume that defenders can analyze Java code
    and (to some degree) native ARM assembly code. But how many anti-malware companies
    can analyze newer app development frameworks like Flutter or ReactNative? And
    how many have analysis engines for languages that are niche on Android, like Lua
    or Python, especially when these scripts interact with the Android APIs?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 否定反恶意软件产品可见性的另一种方式是使用不常见的编程语言。可以安全地假设防御者能够分析 Java 代码和（在某种程度上）原生 ARM 汇编代码。但有多少反恶意软件公司能够分析像
    Flutter 或 ReactNative 这样的较新应用开发框架？又有多少公司拥有分析 Android 上 niche 语言（如 Lua 或 Python）的引擎，尤其是当这些脚本与
    Android API 交互时？
- en: We’ve seen one particularly innovative piece of malware download a Bash shell
    and then use it for its malicious activity. First, it ran the Linux package installation
    command `apt-get` inside the shell to install a couple of standard Linux modules,
    such as OpenSSL and `libcurl`, as well as Python. Then it downloaded Bash scripts
    to execute malicious code from the shell. Very few security companies can automatically
    analyze such setups.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们曾见过一款特别创新的恶意软件下载了一个 Bash shell，然后用它执行恶意活动。首先，它在 shell 中运行了 Linux 包安装命令 `apt-get`，安装了一些标准的
    Linux 模块，比如 OpenSSL 和 `libcurl`，以及 Python。然后，它从 shell 中下载了 Bash 脚本来执行恶意代码。很少有安全公司能自动分析这种设置。
- en: The multitude of scripted and interpreted languages available for Android makes
    detection of malware written in these languages very tedious and requires a serious
    financial investment. We expect that malware authors will increasingly go down
    this road, even if it requires a bit more up-front investment on their part.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Android 平台上多种脚本语言和解释性语言的存在，使得用这些语言编写的恶意软件的检测变得非常繁琐，并且需要相当大的财力投入。我们预计，恶意软件作者将越来越多地走这条路，即使这要求他们在初期投入更多。
- en: '***SDK-less Techniques***'
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***无 SDK 技术***'
- en: The holy grail of hiding from security researchers is to not expose any code
    at all. As users become increasingly privacy-aware and begin to scrutinize the
    data collection practices of tech companies, we’ve seen problematic data broker
    companies move to what we call *SDK-less* or *server-to-server* systems. In the
    earlier years of Android malware, if a shady data broker wanted to collect information
    about users, they would build an SDK and entice developers to embed that SDK in
    their apps. Of course, this made it easy for security researchers to scrutinize
    the SDK’s code and identify its problematic functionality.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏不被安全研究人员发现的“圣杯”就是根本不暴露任何代码。当用户对隐私的意识逐渐提高，并开始审视科技公司数据收集的做法时，我们看到有问题的数据经纪公司转向了我们所谓的*无
    SDK*或*服务器对服务器*系统。在早期的 Android 恶意软件中，如果一个可疑的数据经纪人想收集用户信息，他们会构建一个 SDK 并诱使开发者将这个
    SDK 嵌入到他们的应用中。当然，这使得安全研究人员可以轻松检查 SDK 的代码并识别其问题功能。
- en: In the SDK-less world, the data brokers do not provide app developers with any
    code at all. Instead, they provide a server endpoint to which apps should send
    the collected information. It is the responsibility of the app developer to harvest
    this data and transmit it. To avoid detection, developers first send it to their
    own servers and then forward it to the data broker’s systems. Since nobody can
    inspect the traffic going between these servers, the original app developer won’t
    be implicated in selling user data to the data broker, and the data broker won’t
    have an obvious connection to user data collection at all.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有 SDK 的世界中，数据经纪人不会提供任何代码给应用开发者。相反，他们提供一个服务器端点，应用应将收集到的信息发送到该端点。应用开发者有责任收集这些数据并传输它。为了避免被检测，开发者首先将数据发送到自己的服务器，然后再转发给数据经纪人的系统。由于没有人能检查这些服务器之间的流量，原始应用开发者不会被牵连到将用户数据出售给数据经纪人的行为中，而数据经纪人也不会与用户数据收集有明显的联系。
- en: If, for example, a fitness tracker app collects a device’s GPS location or a
    contact list backup app sends contact list information to its backup server, who
    would be able to verify that they’re then reselling this data without user consent?
    Security researchers will have to find ways to trace these data sales that go
    beyond app analysis, as nothing suspicious happens in the apps themselves.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，如果一款健身追踪应用收集了设备的 GPS 位置，或者一款联系人备份应用将联系人信息发送到备份服务器，谁能验证它们是否未经用户同意就将这些数据转售？安全研究人员将不得不寻找超越应用分析的方式来追踪这些数据销售，因为在应用本身没有发生任何可疑的事情。
- en: '**Distribution**'
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**分发**'
- en: In addition to technical developments, we expect to see new trends evolving
    in the distribution of Android malware. Although malware authors will likely continue
    to target Google Play as an easy way to reach a large audience, the threat of
    supply chain compromises remains a major concern. Even sideloaded malware may
    experience a revival, as recently proven social engineering methods have successfully
    tricked millions of users into downloading and installing apps from malicious
    websites.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 除了技术发展之外，我们预计会看到Android恶意软件分发中的新趋势。虽然恶意软件作者可能会继续以Google Play作为接触大量用户的简便方式，但供应链妥协的威胁仍然是一个主要问题。即使是侧加载的恶意软件也可能会复苏，因为最近证明的社会工程方法成功地诱使数百万用户从恶意网站下载并安装应用程序。
- en: '***Preloaded Malware and Supply Chain Compromises***'
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***预装恶意软件和供应链妥协***'
- en: Malware enterprises will continue to infiltrate the Android device supply chain.
    In [Chapter 2](ch02.xhtml), we covered recent incidents in which malware authors
    succeeded in subverting equipment manufacturers, device driver manufacturers,
    and other companies involved in the development of Android devices. With thousands
    of companies involved in the process, we expect to see more of this behavior going
    forward.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意企业将继续渗透Android设备供应链。在[第2章](ch02.xhtml)中，我们报道了恶意软件作者成功篡改设备制造商、设备驱动程序制造商和其他参与Android设备开发的公司的最新事件。随着成千上万家公司参与其中，我们预计未来会看到更多这种行为。
- en: Experts speculate about how supply chain compromises can happen. Based on the
    stories we’ve heard, the most successful malware authors set up seemingly legitimate
    companies that develop apps or SDKs with desirable functionality. These companies
    then approach manufacturers that are part of the supply chain and propose partnerships
    to license these apps or SDKs. The manufacturers don’t know that these products
    come with backdoors or other malicious functionality that operates in the background.
    This kind of attack has been highly effective and is very dangerous because malware
    authors tend to offer functionality that goes into the depths of the Android operating
    system, giving malware apps and other malicious system modifications many more
    privileges and permissions than they would get if they were regular apps.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 专家们推测供应链妥协可能如何发生。根据我们听到的故事，最成功的恶意软件作者建立了看似合法的公司，开发具有理想功能的应用程序或SDK。然后，这些公司接触供应链中的制造商，并提议合作许可这些应用程序或SDK。制造商不知道这些产品带有背门或其他在后台运行的恶意功能。这种攻击非常有效且非常危险，因为恶意软件作者往往提供能够深入Android操作系统核心的功能，使恶意软件应用程序和其他恶意系统修改获得比普通应用程序更多的权限和许可。
- en: Consider the real example of the backdoored font manager app EagerFonts described
    in [Chapter 2](ch02.xhtml). Font management software is unprofitable to develop
    in-house, so manufacturers frequently license it from a specialized third-party
    developer. Additionally, manufacturers probably won’t ask too many questions if
    the developers tell them to grant the code additional privileges; a font manager
    could be part of the operating system’s core functionality and may require more
    privileges than those given to regular apps. The hidden backdoor can then use
    those elevated privileges.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到后门字体管理应用程序EagerFonts的真实示例，该应用程序在[第2章](ch02.xhtml)中描述。字体管理软件开发成本高昂，因此制造商经常从专业的第三方开发者那里获取许可。此外，如果开发者告诉制造商授予代码额外权限，制造商可能不会过多询问；字体管理器可能是操作系统核心功能的一部分，并且可能需要比常规应用程序更多的权限。隐藏的后门随后可以利用这些提升的权限。
- en: Attacking the supply chain rather than individual Android devices requires more
    initial investment but has some advantages. For example, malware authors don’t
    need to develop apps that attract many users. Instead, they need only convince
    a few decision-makers somewhere in the supply chain, which they can do in a more
    targeted manner. Using Google Play for malware distribution requires creating
    effective marketing materials and advertising campaigns; the apps also shouldn’t
    seem bad or useless, or else users will promptly uninstall them. The added danger
    of being detected by Google and removed from Google Play makes this effort a risky
    proposition. Infiltrating the supply chain with a preinstalled app removes the
    need to create a marketing campaign to distribute the app. The preinstalled malware
    doesn’t need to have any user-visible functionality, as it can operate in a hidden
    part of the system where it silently runs in the background, executing its money-generating
    payload.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击供应链而非单个 Android 设备需要更多的初期投资，但也有一些优势。例如，恶意软件作者不需要开发能吸引大量用户的应用程序。他们只需要说服供应链中的少数决策者，而这可以通过更有针对性的方式来实现。使用
    Google Play 进行恶意软件分发需要创建有效的营销材料和广告活动；这些应用程序也不应看起来不合适或无用，否则用户会迅速卸载它们。被 Google 发现并从
    Google Play 下架的风险也使得这一尝试变得非常冒险。而通过预装应用程序渗透供应链，则不需要创建营销活动来分发应用程序。预装恶意软件不需要有任何用户可见的功能，因为它可以在系统的隐藏部分运行，默默地在后台执行其带来收益的有效负载。
- en: Another huge advantage, and we believe one of the main incentives to develop
    preinstalled malware, is system privileges. In the early days of Android, malware
    authors gained elevated privileges on the system by discovering privilege escalation
    exploits, but more recent versions of Android are significantly harder to exploit,
    and it may take a long time for new exploits to be published. In the preloaded
    malware world, gaining elevated app privileges may just be a matter of asking
    the subverted manufacturer to relax some system settings, such as SELinux rules,
    under false pretenses.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个巨大优势，也是我们认为开发预装恶意软件的主要动力之一，就是系统权限。在 Android 初期，恶意软件作者通过发现权限提升漏洞来获得系统的提升权限，但较新版本的
    Android 系统更难被利用，并且可能需要很长时间才能发布新的漏洞。在预装恶意软件的世界里，获得提升的应用权限可能只是要求被篡改的厂商放宽一些系统设置，例如
    SELinux 规则，借口可能并不真实。
- en: For similar reasons, preinstalled malware is much harder to remove from devices.
    Regular apps can simply be uninstalled. This is not the case for preinstalled
    apps. Usually, users can do nothing more than disable them, so the malware could
    potentially be re-enabled. In many cases, even disabling preinstalled malware
    isn’t possible. Malware authors have figured out that if they inject code into
    critical applications that ship with the device, anti-malware products won’t be
    able to disable them. For example, a very common target for maliciously injected
    code is the system UI process. Defenders can’t disable this process without rendering
    the device unusable, as it is responsible for the screen display.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 出于类似的原因，预装恶意软件也比普通应用更难从设备中移除。普通应用可以直接卸载，但预装应用就不行。通常，用户只能禁用这些应用，恶意软件可能会被重新启用。在许多情况下，即使禁用预装恶意软件也是不可能的。恶意软件作者发现，如果他们将代码注入到设备随附的关键应用中，反恶意软件产品就无法禁用它们。例如，恶意代码注入的常见目标之一就是系统
    UI 进程。防御者无法禁用该进程，否则设备将无法使用，因为它负责屏幕显示。
- en: '***Smarter Sideloading***'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***更智能的侧载***'
- en: The distribution of sideloaded malware will, of course, continue for as long
    as Android allows users to install applications from sources other than Google
    Play. Compared to other distribution methods, sideloading is simpler and has a
    lower likelihood of attracting the attention of many security researchers. Malware
    authors can easily set up their own malware distribution servers or upload their
    apps to alternative app stores that may have fewer protections than Google Play
    (but also offer access to fewer potential victims).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，只要 Android 允许用户从 Google Play 以外的其他来源安装应用程序，侧载恶意软件的分发就会继续下去。与其他分发方式相比，侧载更为简单，且不太可能引起许多安全研究人员的注意。恶意软件作者可以轻松建立自己的恶意软件分发服务器，或将他们的应用上传到可能比
    Google Play 安全性低的替代应用商店（但也能接触到更少的潜在受害者）。
- en: The Flubot malware family that hit Europe, Australia, and New Zealand in 2021
    made it obvious that sideloaded malware can succeed if users are heavily socially
    engineered throughout the sideloading process. Flubot developers were able to
    get victims to sideload their bank-phishing apps at scale by mass-spamming users
    in affected countries with SMS messages that implied the need for urgent action
    to download and install a linked malware app. Most commonly, the Flubot spam messages
    would claim that the user was about to receive a package but would have to schedule
    a delivery time through the linked app. Flubot proved that hundreds of thousands
    of users will click through five or more warning dialogs from the Android operating
    system, Google Play Protect, and the Google Messenger app to schedule an incoming
    package delivery. Other malware developers have taken note of Flubot’s success
    and will likely attempt to emulate these tactics.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 2021 年在欧洲、澳大利亚和新西兰爆发的 Flubot 恶意软件家族明确表明，侧载恶意软件如果在侧载过程中对用户进行大规模社交工程，仍然能够成功。Flubot
    开发者通过大量短信群发，向受影响国家的用户暗示需要紧急行动来下载并安装一个恶意软件应用，从而让受害者大规模侧载其银行钓鱼应用。最常见的是，Flubot 的垃圾信息会声称用户即将收到一个包裹，但必须通过链接的应用程序安排送货时间。Flubot
    证明了成千上万的用户会点击通过 Android 操作系统、Google Play Protect 和 Google Messenger 应用的五个或更多警告对话框，以安排包裹的送达。其他恶意软件开发者已经注意到
    Flubot 的成功，并可能尝试模仿这些策略。
- en: We see only one exception to the trend of an increase in sideloaded malware.
    Malware distribution in countries where Google Play is not available or popular
    will continue to target the predominant app stores in these countries, as they
    serve the same role as Google Play in those locations, with all the advantages
    and disadvantages for malware distribution.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只看到一种例外情况，即侧载恶意软件的趋势仍在增加。在谷歌 Play 商店不可用或不受欢迎的国家，恶意软件的分发将继续针对这些国家的主要应用商店，因为它们在这些地区扮演着与谷歌
    Play 相同的角色，具有分发恶意软件的所有优点和缺点。
- en: '**Malware Economics**'
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**恶意软件经济学**'
- en: Today, Android malware is moving away from techniques that generate high profits
    per device but are visible to the user and turning instead to sneakier techniques
    that generate less profit per device but are more likely to go unnoticed. Attackers
    make up for the lower per-device profits by infecting huge numbers of devices,
    with each contributing just a little bit to the total malware revenue.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，Android 恶意软件正在远离那些每台设备能带来高利润但对用户可见的技术，转而使用更隐蔽的技术，这些技术每台设备的利润较低，但更容易不被察觉。攻击者通过感染大量设备来弥补每台设备利润的降低，每个设备仅贡献一点点，从而增加总的恶意软件收入。
- en: Modern malware tries to stay hidden from users and remain installed for a long
    time so it can keep making a profit for months or years. This also means that
    malware cannot abuse users directly, for example by asking for a ransom in exchange
    for access to their maliciously encrypted files. User involvement means detection,
    and detection means removal. Once users understand that they’re being abused,
    anti-malware companies will soon hear about it, too. These companies will develop
    signatures and other defenses and deploy them to devices, cutting short the malware’s
    lifetime.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现代恶意软件试图隐藏自己，避免被用户察觉并保持长时间的安装，以便能够在几个月或几年内持续盈利。这也意味着恶意软件无法直接滥用用户，例如要求支付赎金以换取对其恶意加密文件的访问权限。用户的参与意味着检测，检测则意味着移除。一旦用户意识到自己被滥用，反恶意软件公司也很快会得知。这些公司将开发特征码和其他防御措施并部署到设备上，从而缩短恶意软件的生命周期。
- en: For these reasons, malware has become a lot more subtle and is nowadays often
    undetectable during device use, even by the most aware of users. Instead of locking
    users out of their devices, this new generation of malware drives fake traffic
    to advertising platforms that defraud advertisers, rents out available network
    bandwidth to botnets, manipulates social media or other platforms for pay, or
    mines cryptocurrency in the background. This activity is less harmful to users
    than malware that, say, empties their bank accounts. On the other hand, it allows
    malware authors to build up huge botnets before security companies catch on. Some
    of these botnets have grown to command a total network bandwidth that poses a
    DDoS threat to even the largest tech companies in the world.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些原因，恶意软件变得更加隐蔽，如今即使是最警觉的用户，在使用设备时也往往无法察觉到恶意软件的存在。这一代恶意软件并不通过锁定用户的设备来进行攻击，而是通过向广告平台发送虚假流量，欺骗广告商，出租网络带宽给僵尸网络，操控社交媒体或其他平台谋取报酬，或在后台挖掘加密货币。这种活动对用户的危害比那些直接盗取银行账户余额的恶意软件小。另一方面，这种类型的恶意软件使得恶意软件作者能够在安全公司发现之前积累庞大的僵尸网络。这些僵尸网络的总网络带宽已经足以对全球最大的科技公司构成DDoS攻击威胁。
- en: 'Of course, not all malware will follow the direction described in this chapter.
    Like defenders, malware authors are constrained by budgets, technological know-how,
    and business acumen. Low-quality malware will continue to exist as new malware
    authors enter the space. For organized cybercrime, though, the trends are clear:
    the most successful malware operations come from front companies that manage to
    infiltrate supply chains, then use technical means to hide their code from defensive
    companies.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，并不是所有的恶意软件都会遵循本章所描述的方向。与防御者一样，恶意软件作者也受到预算、技术知识和商业智慧的限制。低质量的恶意软件将继续存在，尤其是在新的恶意软件作者进入这个领域时。不过，对于有组织的网络犯罪来说，趋势是显而易见的：最成功的恶意软件操作通常来自那些能够渗透供应链的前沿公司，然后利用技术手段将其代码隐藏起来，避免被防御公司发现。
- en: '**Machine Learning Trends for Attackers and Defenders**'
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**攻击者和防御者的机器学习趋势**'
- en: A growing number of security firms now use machine learning for mal-ware detection,
    employing a variety of techniques to predict whether some behavior on a device
    is normal or abnormal. Apps might also be clustered together based on their respective
    feature vectors. For instance, many different variations of an Amazon or eBay
    app may all end up in the same cluster, as would variants of an Android malware
    specimen like Acecard. Thus, while the most heavily used machine learning techniques
    are classification algorithms, you’ll see anomaly detection and clustering methods
    used too.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，越来越多的安全公司开始使用机器学习来进行恶意软件检测，采用多种技术来预测设备上的某些行为是正常还是异常。应用程序也可能根据它们各自的特征向量进行聚类。例如，许多不同版本的Amazon或eBay应用程序可能会聚集在同一类中，类似地，像Acecard这样的Android恶意软件变种也可能会被归类在同一类中。因此，虽然最常用的机器学习技术是分类算法，但你也会看到异常检测和聚类方法的使用。
- en: To date, we don’t have evidence that attackers have been using machine learning
    techniques. However, we expect them to do so in the imminent future. Firstly,
    attackers could use artificial intelligence and machine learning to identify the
    targets who are most likely to download their malware. By gathering information
    about specific individuals, attackers can build such behavioral models using classifiers
    in much the same way that defenders build predictive models to identify malware
    apps, as demonstrated in the previous chapters of this book. Attackers could also
    use regression models to predict how much a victim of a ransomware attack might
    be willing to pay or how much a victim of a banking trojan might have to steal.
    Attackers might prefer to target a smaller number of high-value victims rather
    than a large number of low-value victims, as an attack that has many targets is
    more likely to be flagged by cybersecurity companies.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们没有证据表明攻击者已经开始使用机器学习技术。然而，我们预计他们在不久的未来会采用这些技术。首先，攻击者可以利用人工智能和机器学习来识别最有可能下载其恶意软件的目标。通过收集关于特定个体的信息，攻击者能够使用分类器建立类似于防御者为识别恶意软件应用程序而构建的预测模型，如本书前几章所示。攻击者还可以使用回归模型来预测勒索软件攻击的受害者可能愿意支付多少赎金，或者银行木马受害者可能会被盗取多少财务信息。攻击者可能更倾向于选择少数高价值的受害者作为目标，而不是大量低价值的受害者，因为针对多个目标的攻击更容易被网络安全公司发现。
- en: Machine learning methods may also allow attackers to inject their malware much
    more effectively. For example, current vectors for injection include phishing
    and *watering holes*, which are URLs that install malware into the browser or
    operating system of any individual who makes the mistake of visiting them. Adversarial
    phishing algorithms show how adversaries can avoid algorithms that detect phishing
    attempts (as described in the paper “Mitigating Adversarial Gray-Box Attacks Against
    Phishing Detectors” by Apruzzese and Subrahmanian in *IEEE Transactions on Dependable
    and Secure Computing*).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习方法还可能使攻击者更有效地注入恶意软件。例如，目前的注入方式包括网络钓鱼和*水坑攻击*，即那些通过URL将恶意软件安装到任何访问者的浏览器或操作系统中的攻击方式。对抗性网络钓鱼算法展示了对手如何规避检测钓鱼攻击的算法（如Apruzzese和Subrahmanian在*IEEE
    Transactions on Dependable and Secure Computing*上发表的论文“Mitigating Adversarial
    Gray-Box Attacks Against Phishing Detectors”所描述的）。
- en: Phishing attacks will likely improve both in quality and quantity because a
    number of recent artificial intelligence tools, such as DALL-E and ChatGPT, can
    generate highly realistic synthetic text blurbs and images and produce fake tweets,
    WhatsApp messages, emails, Facebook and Instagram posts, and more. These new capabilities
    would allow malicious hackers to not only develop extremely attractive phishing
    lures (say, a cute cat video with a catchy associated text caption), but to do
    so at scale, cranking out thousands of different lures in seconds. Some of this
    fake content will be posted through the accounts of real users of social and messaging
    platforms (who may unwittingly share malicious content). In addition, malware
    developers will create and leverage fake accounts explicitly for the purpose of
    distributing malware.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 网络钓鱼攻击可能会在质量和数量上都有所提高，因为最近的一些人工智能工具，如DALL-E和ChatGPT，可以生成极为真实的合成文本摘要和图像，制作虚假的推文、WhatsApp消息、电子邮件、Facebook和Instagram帖子等。这些新功能将使恶意黑客不仅能够开发出极具吸引力的网络钓鱼诱饵（例如，一只可爱的猫视频和一个吸引眼球的文本标题），还能够以大规模的方式做到这一点，几秒钟内便能制作出成千上万种不同的诱饵。这些虚假内容中的一部分将通过社交平台和消息平台的真实用户账户发布（这些用户可能不自觉地分享恶意内容）。此外，恶意软件开发者还会专门创建和利用虚假账户来分发恶意软件。
- en: A separate set of attacks that leverage tools such as DALL-E and ChatGPT might
    seek to automatically compromise legitimate app stores such as Google Play by
    posting mostly honest reviews of benign apps (in order to gain credibility), but
    also posting dishonest reviews of their malicious apps on a regular but infrequent
    basis, potentially eluding detection as fake accounts.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 另一类利用如DALL-E和ChatGPT等工具的攻击，可能会自动入侵像Google Play这样的合法应用商店，发布大部分关于无害应用的诚实评价（以获得可信度），但也会定期且不频繁地发布关于其恶意应用的虚假评价，从而可能逃避作为虚假账户的检测。
- en: On the positive side, defenders might be able to use machine learning techniques
    for generating novel content, such as *generative adversarial networks (GANs)*
    and *variational autoencoders (VAEs)*, for defensive purposes. For example, these
    techniques can be used to generate content for fake sites, known as *honeypots*,
    that are attractive to attackers. Once an attacker accesses a honeypot, they are,
    unbeknownst to them, within a computational environment that is carefully set
    up to log all of their activities. Defenders can then study them in detail, allowing
    them to gain an understanding of the attacker’s tactics, techniques, and procedures,
    and sometimes even their identity.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 从积极的一面来看，防御者可能能够利用机器学习技术生成新颖内容，如*生成对抗网络（GANs）*和*变分自编码器（VAEs）*，用于防御目的。例如，这些技术可以用于生成假网站的内容，这些假网站被称为*蜜罐*，它们吸引攻击者。一旦攻击者访问蜜罐，他们就会进入一个精心设置的计算环境，在这个环境中，所有他们的活动都会被记录下来，而攻击者对此并不知情。防御者可以详细研究这些活动，从而了解攻击者的战术、技术和程序，有时甚至能够识别出他们的身份。
- en: Attackers could potentially use the same artificial intelligence tools to directly
    generate malware, and defenders to sharpen their skills at detecting it. For example,
    attackers could use GANs and VAEs to automatically generate many diverse versions
    of a given malicious app in the hopes that at least some will evade detection,
    while defenders could do the same to study known malware and learn how to better
    identify variations of it.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可能会利用相同的人工智能工具直接生成恶意软件，而防御者则可以用这些工具来提高检测技能。例如，攻击者可以使用GANs和VAEs自动生成多种不同版本的恶意应用，希望其中至少有一些能避开检测，而防御者也可以利用相同的方法研究已知恶意软件，并学习如何更好地识别其变种。
- en: These techniques have the potential to dramatically alter the malware development
    and detection landscapes in coming years. However, while attackers may try to
    use GANs to generate malware, they need to avoid obvious errors that many GANs
    make. For instance, in image processing, GANs may generate images of people with
    six fingers rather than five. Humans may not always spot details like these in
    images, but in the case of malware, the analog of such errors will likely lead
    to non-executable code. Thus, the use of GANs for malware development still has
    some challenges. Meanwhile, on the defending side, GANs offer an effective new
    tool to detect malware variants that have never been seen before.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术有可能在未来几年内显著改变恶意软件开发和检测的格局。然而，虽然攻击者可能会尝试使用生成对抗网络（GAN）来生成恶意软件，但他们需要避免许多GAN常犯的明显错误。例如，在图像处理方面，GAN可能会生成六个手指的人物，而不是五个。人类可能不总是能注意到图像中的这些细节，但在恶意软件的情况下，这类错误的类比可能会导致不可执行的代码。因此，使用GAN进行恶意软件开发仍然面临一些挑战。与此同时，在防御方面，GAN为检测前所未见的恶意软件变种提供了一个有效的新工具。
- en: To conclude, the democratization of machine learning techniques, along with
    the growing number of open source artificial intelligence tools, will spur the
    rapid development of new breeds of malware. Cybersecurity firms must take proactive
    efforts to prevent malicious actors from gaining the upper hand in this war.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，机器学习技术的普及以及开源人工智能工具数量的增加，将推动新型恶意软件的快速发展。网络安全公司必须采取积极措施，防止恶意行为者在这场战争中占据上风。
- en: '**Next Steps**'
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**下一步**'
- en: Although we’ve aimed to provide you with a comprehensive introduction to the
    field of Android malware and the use of machine learning to detect it, you won’t
    become a capable malware analyst simply by reading books. Here are some guidelines
    for continuing your journey.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们旨在为你提供关于安卓恶意软件领域的全面介绍，并讲解如何利用机器学习来检测恶意软件，但仅仅通过阅读书籍，你不会成为一名合格的恶意软件分析师。以下是一些继续你旅程的指导建议。
- en: First, secure a reliable source of malware samples for analysis. If you can’t
    get these from your work or school, you may have to seek out community resources.
    For Android malware in particular, you can find many resources with a quick web
    search. In addition, there’s a large community of security researchers on X who
    regularly share the latest malware samples. We recommend that you tune in to this
    information channel.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确保你有一个可靠的恶意软件样本来源进行分析。如果你无法从工作或学校获得这些样本，你可能需要寻找社区资源。特别是对于安卓恶意软件，你可以通过简单的网络搜索找到许多资源。此外，X平台上有一个庞大的安全研究人员社区，他们会定期分享最新的恶意软件样本。我们建议你关注这个信息渠道。
- en: Once you’ve secured access to the malware samples, the hard part begins. You
    need to work on mastering your tools, dissecting different types of malware, and
    gradually expanding your understanding of how these applications operate to reach
    their objectives. We’ve found that when someone without much prior malware analysis
    experience joins Google’s Android Security team, it tends to take them an hour
    or more to reverse engineer even a common malware sample. We encourage them to
    reverse engineer as much malware as possible during their initial weeks, using
    a number of tools, until they can confidently determine whether an Android app
    is malware in less than two minutes. Keep this goal in mind as you make progress
    in your own journey.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你获得了恶意软件样本，真正的挑战就开始了。你需要掌握工具，分析不同类型的恶意软件，并逐步扩展你对这些应用程序如何运作以实现其目标的理解。我们发现，当没有太多恶意软件分析经验的人加入谷歌的安卓安全团队时，即便是一个常见的恶意软件样本，他们也通常需要一个小时甚至更长时间来逆向工程。我们鼓励他们在最初的几周内尽可能多地逆向分析恶意软件，使用各种工具，直到他们能够在不到两分钟的时间内自信地判断一个安卓应用是否为恶意软件。请在你自己的学习旅程中始终牢记这个目标。
- en: The use of machine learning to combat malware is still a fairly new, rapidly
    evolving discipline without an easy-to-use toolchain, making it difficult to get
    started and become productive fast. You may find it useful to experiment with
    libraries for extracting and processing features. Also try training and validating
    the implementation of a few machine learning algorithms that are of interest to
    you. Once you see initial results (for example, a classifier that correctly identifies
    an Android app as malware), start working on improving the precision of your models
    and targeting specific malware categories.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 利用机器学习来对抗恶意软件仍然是一个相对新的、快速发展的学科，没有一个易于使用的工具链，这使得开始和提高效率都变得困难。您可能会发现，尝试使用提取和处理特征的库是很有用的。还可以尝试训练和验证一些您感兴趣的机器学习算法的实现。一旦看到初步结果（例如，一个能够正确识别安卓应用程序为恶意软件的分类器），就可以开始改进模型的精确度，并针对特定的恶意软件类别进行优化。
- en: '[*OceanofPDF.com*](https://oceanofpdf.com)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[*OceanofPDF.com*](https://oceanofpdf.com)'
