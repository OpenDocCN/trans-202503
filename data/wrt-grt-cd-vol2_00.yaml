- en: '**INTRODUCTION**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**引言**'
- en: '![image](../images/common01.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: 'What do we mean by *great code*? Different programmers will have different
    opinions. Therefore, it is impossible to provide an all-encompassing definition
    that will satisfy everyone. Here is the definition this book will use:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所说的*优秀代码*是什么意思？不同的程序员会有不同的看法。因此，提供一个能让每个人都满意的包罗万象的定义是不可能的。以下是本书将使用的定义：
- en: Great code is software that is written using a consistent and prioritized set
    of good software characteristics. In particular, great code follows a set of rules
    that guide the decisions a programmer makes when implementing an algorithm as
    source code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 优秀的代码是使用一致且优先考虑良好的软件特性编写的软件。特别是，优秀的代码遵循一套规则，这些规则指导程序员在将算法实现为源代码时所做的决策。
- en: 'However, as I noted in *Write Great Code, Volume 1: Understanding the Machine*
    (hereafter, *WGC1*), there are some attributes of great code that nearly everyone
    can agree on. Specifically, great code:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，正如我在*《编写优秀代码，第一卷：理解机器》*（以下简称*WGC1*）中提到的，几乎每个人都能达成共识的是，优秀代码具有一些共性特征。具体来说，优秀的代码：
- en: Uses the CPU efficiently (that is, it’s fast)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高效使用CPU（即，它很快）
- en: Uses memory efficiently (that is, it’s small)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高效使用内存（即，它很小）
- en: Uses system resources efficiently
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高效使用系统资源
- en: Is easy to read and maintain
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于阅读和维护
- en: Follows a consistent set of style guidelines
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循一致的风格指南
- en: Uses an explicit design that follows established software engineering conventions
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用明确的设计，遵循已建立的软件工程规范
- en: Is easy to enhance
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容易扩展
- en: Is well tested and robust (that is, it works)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经过充分测试且稳健（即，它能够正常工作）
- en: Is well documented
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有良好的文档
- en: We could easily add dozens of items to this list. Some programmers, for example,
    may feel that great code must be portable, must follow a given set of programming
    style guidelines, or must be written in a certain language (or *not* be written
    in a certain language). Some may feel that great code must be written as simply
    as possible, while others believe that it must be written quickly. Still others
    may feel that great code is created on time and under budget.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以轻松地在这个列表中添加数十个条目。例如，一些程序员可能认为，优秀的代码必须具备可移植性，必须遵循一套特定的编程风格指南，或者必须用某种语言编写（或者*不能*用某种语言编写）。有些人可能认为优秀的代码必须尽可能简洁，而另一些人则认为它必须快速编写。还有一些人可能认为优秀的代码是在规定时间内按预算完成的。
- en: 'Given that there are so many aspects of great code—too many to describe properly
    in a single book—this second volume of the *Write Great Code* series concentrates
    primarily on one: efficient performance. Although efficiency might not always
    be the primary goal of a software development effort—nor does it have to be for
    code to qualify as great—people generally agree that inefficient code is *not*
    great code. And inefficiency is one of the major problems with modern applications,
    so it’s an important topic to emphasize.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于优秀代码涉及的方面有很多——太多了，无法在一本书中完全描述——《编写优秀代码》系列的第二卷主要集中在其中一个方面：高效的性能。尽管效率可能并非软件开发努力的首要目标——也并非代码要成为优秀代码的必要条件——人们普遍认为低效的代码*不是*优秀代码。而低效正是现代应用程序的主要问题之一，因此这是一个需要强调的重要话题。
- en: '**Performance Characteristics of Great Code**'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**优秀代码的性能特征**'
- en: As computer system performance has increased from megahertz to hundreds of megahertz
    to gigahertz, computer software performance has taken a back seat to other concerns.
    Today, it’s not at all uncommon for software engineers to exclaim, “You should
    never optimize your code!” Funny, you don’t hear too many software *users* making
    such statements.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 随着计算机系统性能从兆赫兹提升到数百兆赫兹，再到千兆赫兹，计算机软件性能逐渐被其他问题所取代。如今，软件工程师常常会大声疾呼：“你永远不应该优化你的代码！”有趣的是，你很少听到软件*用户*说出这样的话。
- en: Although this book describes how to write efficient code, it’s not a book about
    optimization. *Optimization* is a phase near the end of the Software Development
    Life Cycle (SDLC) in which software engineers determine why their code does not
    meet performance specifications and then refine it accordingly. But unfortunately,
    if they don’t put any thought into the application’s performance until the optimization
    phase, it’s unlikely that optimization will prove practical. The time to ensure
    that an application meets reasonable performance benchmarks is at the *beginning*
    of the SDLC, during the design and implementation phases. Optimization can fine-tune
    a system’s performance, but it can rarely deliver a miracle.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这本书描述了如何编写高效代码，但它并不是一本关于优化的书。*优化*是软件开发生命周期（SDLC）中的一个阶段，在这个阶段，软件工程师确定为什么他们的代码未能满足性能规范，并相应地进行优化。但不幸的是，如果他们直到优化阶段才考虑应用程序的性能，那么优化可能就不会实现实际效果。确保应用程序符合合理的性能基准的时间点是在SDLC的*开始*阶段，即设计和实现阶段。优化可以微调系统的性能，但它很少能带来奇迹。
- en: Although the quote is often attributed to Donald Knuth, who popularized it,
    it was Tony Hoare who originally said, “Premature optimization is the root of
    all evil.” This statement has long been the rallying cry of software engineers
    who neglect application performance until the very end of the SDLC—at which point
    optimization is typically ignored for economic or time-to-market reasons. However,
    Hoare did not say, “Concern about application performance during the early stages
    of an application’s development is the root of all evil.” He specifically said
    *premature optimization*, which, back then, meant counting cycles and instructions
    in assembly language code—not the type of coding you want to do during initial
    program design, when the code base is fluid. Thus, Hoare’s comments were on the
    mark.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这句名言常常被归因于唐纳德·克努斯（Donald Knuth），是他使其广为人知，但最初是托尼·霍尔（Tony Hoare）说的：“过早优化是万恶之源。”这句话长期以来一直是那些忽视应用性能，直到SDLC的最后阶段才开始关注的工程师们的口号——在这个阶段，优化通常会因为经济或市场时间的原因而被忽视。然而，霍尔并没有说，“在应用程序开发的早期阶段关心性能是万恶之源。”他特别说的是*过早优化*，而那时的过早优化意味着在汇编语言代码中计算周期和指令——这并不是你在程序设计初期，代码库仍在不断变化时应该做的事情。因此，霍尔的评论是非常准确的。
- en: 'The following excerpt from a short essay by Charles Cook (*[https://bit.ly/38NhZkT](https://bit.ly/38NhZkT)*)
    further describes the problem with reading too much into Hoare’s statement:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是查尔斯·库克（Charles Cook）的一篇短文摘录（* [https://bit.ly/38NhZkT](https://bit.ly/38NhZkT)
    *），进一步描述了过度解读霍尔言论的问题：
- en: I’ve always thought this quote has all too often led software designers into
    serious mistakes because it has been applied to a different problem domain to
    what was intended.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直认为，这句名言常常导致软件设计师犯下严重错误，因为它被应用到了一个不同的问题领域，偏离了最初的意图。
- en: 'The full version of the quote is “We should forget about small efficiencies,
    say about 97% of the time: premature optimization is the root of all evil.” and
    I agree with this. It’s usually not worth spending a lot of time micro-optimizing
    code before it’s obvious where the performance bottlenecks are. But, conversely,
    when designing software at a system level, performance issues should always be
    considered from the beginning. A good software developer will do this automatically,
    having developed a feel for where performance issues will cause problems. An inexperienced
    developer will not bother, misguidedly believing that a bit of fine tuning at
    a later stage will fix any problems.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这段话的完整版本是：“我们应该忘记小的效率问题，大约97%的时间都不必考虑：过早优化是万恶之源。”我同意这一观点。在性能瓶颈明显之前，通常不值得花费大量时间在代码的微优化上。但是，相反地，在系统级别设计软件时，性能问题应该从一开始就被考虑进去。一个好的软件开发者会自动做到这一点，因为他们已经对性能问题可能导致的问题有了直觉。而一个经验不足的开发者则不会在意，错误地认为稍后在优化阶段做一些微调就能解决问题。
- en: Indeed, Hoare was saying that software engineers should worry about other issues,
    like good algorithm design and implementation, before they worry about traditional
    optimizations, like how many CPU cycles a particular statement requires for execution.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，霍尔（Hoare）是在说，软件工程师应该先关心其他问题，比如良好的算法设计和实现，再去关注传统的优化问题，比如某条语句执行所需的CPU周期数。
- en: Although you could certainly apply many of this book’s concepts during an optimization
    phase, most of the techniques here really need to be applied during the initial
    coding. An experienced software engineer may argue that doing so produces only
    minor improvements in performance. In some cases, this is true—but keep in mind
    that these minor effects accumulate. If you put off these ideas until you reach
    “code complete,” it’s unlikely that they’ll ever find their way into your software.
    It’s just too much work to implement them after the fact (and too risky to make
    such changes to otherwise working code).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您肯定可以在优化阶段应用本书的许多概念，但这里大部分技术实际上需要在初始编码阶段应用。有经验的软件工程师可能会争辩说，这样做只会产生性能上的轻微改进。在某些情况下，这是正确的——但请记住，这些轻微的效果是累积的。如果您推迟到达“代码完成”时才实施这些想法，它们很可能永远不会出现在您的软件中。在已经工作的代码上实施这些变更是太麻烦了，也太冒险了。
- en: '**The Goal of This Book**'
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**本书的目标**'
- en: 'This book (and *WGC1*) attempts to fill the gaps in the education of the current
    generation of programmers so they can write quality code. In particular, it covers
    the following concepts:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本书（以及*WGC1*）试图填补当前一代程序员教育中的空白，以便他们能够编写高质量的代码。特别是，它涵盖了以下概念：
- en: Why it’s important to consider the low-level execution of your high-level programs
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么考虑您的高级程序的低级执行方式是重要的
- en: How compilers generate machine code from high-level language (HLL) statements
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译器如何从高级语言（HLL）语句生成机器码
- en: How compilers represent various data types using low-level, primitive data types
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译器如何使用低级别、原始数据类型来表示各种数据类型
- en: How to write your HLL code to help the compiler produce better machine code
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何编写您的高级语言代码，以帮助编译器生成更好的机器码
- en: How to take advantage of a compiler’s optimization facilities
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何利用编译器的优化功能
- en: How to “think” in assembly language (low-level terms) while writing HLL code
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在编写高级语言代码时“思考”汇编语言（低级术语）
- en: This book will teach you how to choose appropriate HLL statements that translate
    into efficient machine code with a modern optimizing compiler. In most cases,
    different HLL statements provide many ways to achieve a given result, some of
    which, at the machine level, are naturally more efficient than others. Though
    there may be a very good reason for choosing a less efficient statement sequence
    over a more efficient one (for example, readability), the truth is that most software
    engineers have no idea about HLL statement runtime costs and thus are unable to
    make an educated choice. The goal of this book is to change that.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将教会您如何选择适当的高级语言语句，以便与现代优化编译器生成高效的机器码。在大多数情况下，不同的高级语言语句提供了许多实现给定结果的方法，其中一些在机器级别上自然比其他方法更有效。虽然有选择比较低效的语句序列背后可能存在非常好的理由（例如可读性），但事实上，大多数软件工程师并不了解高级语言语句的运行时成本，因此无法做出明智的选择。本书的目标就是改变这种现状。
- en: Again, this book is not about choosing the most efficient statement sequence
    no matter what. It is about understanding the cost of various HLL constructs so
    that, when faced with multiple options, you can make an informed decision about
    which sequence is most appropriate to use.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，本书并非只讨论无论如何选择最高效的语句序列。而是要了解各种高级语言结构的成本，这样当面对多个选择时，您就可以明智地决定使用哪个序列最为合适。
- en: '**Chapter Organization**'
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**章节组织**'
- en: Though you don’t need to be an expert assembly language programmer in order
    to write efficient code, you’ll need at least a basic knowledge of it to understand
    the compiler output in this book. [Chapters 1](ch01.xhtml#ch01) and [2](ch02.xhtml#ch02)
    discuss several aspects of learning assembly language, covering common misconceptions,
    considerations around compilers, and available resources. [Chapter 3](ch03.xhtml#ch03)
    provides a quick primer for 80x86 assembly language. Online appendixes (*[http://www.randallhyde.com/](http://www.randallhyde.com/)*)
    provide primers for the PowerPC, ARM, Java bytecode, and Common Intermediate Language
    (CIL) assembly languages.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您不需要成为汇编语言专家才能编写高效的代码，但您至少需要基本的汇编语言知识才能理解本书中的编译器输出。[第1章](ch01.xhtml#ch01)和[第2章](ch02.xhtml#ch02)讨论了学习汇编语言的几个方面，涵盖了常见误解、关于编译器的考虑以及可用的资源。[第3章](ch03.xhtml#ch03)为80x86汇编语言提供了一个快速入门。在线附录（*[http://www.randallhyde.com/](http://www.randallhyde.com/)*）为PowerPC、ARM、Java字节码和公共中间语言（CIL）汇编语言提供了入门指南。
- en: In [Chapters 4](ch04.xhtml#ch04) and [5](ch05.xhtml#ch05), you’ll learn about
    determining the quality of your HLL statements by examining compiler output. These
    chapters describe disassemblers, object code dump tools, debuggers, various HLL
    compiler options for displaying assembly language code, and other useful software
    tools.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.xhtml#ch04)和[第5章](ch05.xhtml#ch05)中，你将通过检查编译器输出，学习如何确定你的高级语言（HLL）语句的质量。这些章节描述了反汇编器、目标代码转储工具、调试器、各种HLL编译器选项用于显示汇编语言代码的功能以及其他有用的软件工具。
- en: The remainder of the book, [Chapters 6](ch06.xhtml#ch06) through [15](ch15.xhtml#ch15),
    describes how compilers generate machine code for different HLL statements and
    data types. Armed with this knowledge, you’ll be able to choose the most appropriate
    data types, constants, variables, and control structures to produce efficient
    applications.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的其余部分，[第6章](ch06.xhtml#ch06)至[第15章](ch15.xhtml#ch15)，描述了编译器如何为不同的HLL语句和数据类型生成机器码。掌握这些知识后，你将能够选择最合适的数据类型、常量、变量和控制结构，从而生成高效的应用程序。
- en: '**Assumptions and Prerequisites**'
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**假设和前提条件**'
- en: 'This book was written with certain assumptions about your prior knowledge.
    You’ll reap the greatest benefit from this material if your personal skill set
    matches the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的编写假设了你具备某些先前的知识。如果你的个人技能集符合以下要求，你将从本书中获得最大的收益：
- en: You should be reasonably competent in at least one imperative (procedural) or
    object-oriented programming language. This includes C and C++, Pascal, Java, Swift,
    BASIC, Python, and assembly, as well as languages like Ada, Modula-2, and FORTRAN.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你应该至少精通一种命令式（过程式）或面向对象的编程语言。这包括C和C++、Pascal、Java、Swift、BASIC、Python以及汇编语言，还包括Ada、Modula-2和FORTRAN等语言。
- en: You should be capable of taking a small problem description and working through
    the design and implementation of a software solution for that problem. A typical
    semester or quarter course at a college or university (or several months of experience
    on your own) should be sufficient preparation.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你应该能够根据一个小问题描述，设计并实现一个软件解决方案。大学或高等院校的一个学期或季度课程（或几个月的自学经验）应该足以做为准备。
- en: You should have a basic grasp of machine organization and data representation.
    You should know about the hexadecimal and binary numbering systems. You should
    understand how computers represent various high-level data types such as signed
    integers, characters, and strings in memory. Although the next couple of chapters
    provide a primer on machine language, it would help considerably if you’ve picked
    up this information along the way. *WGC1* fully covers the subject of machine
    organization if you feel your knowledge in this area is a little weak.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你应该对计算机组织和数据表示有基本的理解。你应该了解十六进制和二进制数字系统。你应该理解计算机如何在内存中表示各种高级数据类型，如有符号整数、字符和字符串。尽管接下来的几章会提供机器语言的入门知识，但如果你已经掌握了这些信息，将会大有帮助。如果你觉得这一方面的知识有些薄弱，*WGC1*全面涵盖了计算机组织的相关内容。
- en: '**The Environment for This Book**'
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**本书的环境**'
- en: Although this book presents generic information, parts of the discussion will
    necessarily be system specific. Because the Intel Architecture PCs are, by far,
    the most common in use today, that’s the platform I’ll use when discussing specific
    system-dependent concepts in this book. However, those concepts still apply to
    other systems and CPUs—such as the PowerPC CPU in the older Power Macintosh systems,
    ARM CPUs in mobile phones, tablets and single-board computers (SBCs; like the
    Raspberry Pi or higher-end Arduino boards), and other RISC CPUs in a Unix box—although
    you may need to research the particular solution for an example on your specific
    platform.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本书提供的是通用信息，但讨论的某些部分必然与系统相关。由于Intel架构的PC是目前使用最广泛的，因此当讨论特定的系统相关概念时，我将以此平台为例。然而，这些概念同样适用于其他系统和CPU——比如旧款Power
    Macintosh系统中的PowerPC CPU，手机、平板和单板计算机（SBC，例如Raspberry Pi或更高端的Arduino板）中的ARM CPU，以及Unix系统中的其他RISC
    CPU——尽管你可能需要针对你特定平台的示例进行一些额外的研究。
- en: Most of the examples in this book run under macOS, Windows, and Linux. When
    creating the examples, I tried to stick with standard library interfaces to the
    OS wherever possible and make OS-specific calls only when the alternative was
    to write “less than great” code.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的大多数示例可以在macOS、Windows和Linux下运行。在创建示例时，我尽量遵循标准库接口与操作系统的交互，只有在无法避免时才使用操作系统特定的调用。
- en: Most of the specific examples in this text will run on a late-model Intel Architecture
    (including AMD) CPU under Windows, macOS, and Linux, with a reasonable amount
    of RAM and other system peripherals normally found on a modern PC. The concepts,
    if not the software itself, will apply to Macs, Unix boxes, SBCs, embedded systems,
    and even mainframes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中的大多数具体示例将在现代Intel架构（包括AMD）CPU上运行，支持Windows、macOS和Linux操作系统，配备适量的RAM和现代PC上常见的其他系统外设。即使是软件本身无法直接适用，这些概念也可以应用于Mac、Unix系统、单板计算机（SBC）、嵌入式系统甚至大型主机。
- en: '**For More Information**'
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**更多信息**'
- en: Mariani, Rico. “Designing for Performance.” December 11, 2003\. *[https://docs.microsoft.com/en-us/archive/blogs/ricom/designing-for-performance/](https://docs.microsoft.com/en-us/archive/blogs/ricom/designing-for-performance/)*.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Mariani, Rico. “性能设计。” 2003年12月11日。*[https://docs.microsoft.com/en-us/archive/blogs/ricom/designing-for-performance/](https://docs.microsoft.com/en-us/archive/blogs/ricom/designing-for-performance/)*。
- en: Wikipedia. “Program Optimization.” *[https://en.wikipedia.org/wiki/Program_optimization/](https://en.wikipedia.org/wiki/Program_optimization/)*.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Wikipedia. “程序优化。” *[https://en.wikipedia.org/wiki/Program_optimization/](https://en.wikipedia.org/wiki/Program_optimization/)*。
