- en: '**6**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**6**'
- en: '**PACKET ANALYSIS ON THE COMMAND LINE**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**命令行上的数据包分析**'
- en: '![image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common.jpg)'
- en: 'While many scenarios can be addressed using a GUI, in some cases, using command
    line tools—such as TShark or tcpdump—is necessary or preferable. Here are some
    situations in which a command line tool might be used instead of Wireshark:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管许多场景可以通过图形用户界面（GUI）解决，但在某些情况下，使用命令行工具——例如 TShark 或 tcpdump——是必要的或更为理想的。以下是一些可能需要使用命令行工具而不是
    Wireshark 的情况：
- en: •     Wireshark provides a lot of information at once. By using a command line
    tool, you can limit displayed information to only pertinent data, such as a single
    line showing IP addresses.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: •     Wireshark 会一次性提供大量信息。通过使用命令行工具，你可以将显示的信息限制为仅与数据相关的内容，例如只显示包含 IP 地址的单行信息。
- en: •     Command line tools are best suited for filtering a packet capture file
    and providing the results directly to another tool using Unix pipes.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: •     命令行工具最适合用于过滤数据包捕获文件，并通过 Unix 管道将结果直接提供给其他工具。
- en: •     Dealing with a very large capture file can often overwhelm Wireshark because
    the entire file must be loaded into RAM. Stream processing of large capture files
    with command line tools can allow you to quickly filter the file down to the relevant
    packets.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: •     处理一个非常大的捕获文件时，Wireshark 可能会由于必须将整个文件加载到内存中而感到压力。使用命令行工具对大型捕获文件进行流处理，可以帮助你迅速筛选出相关数据包。
- en: •     If you are dealing with a server and don’t have access to a graphical
    tool, you may be forced to rely on command line tools.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: •     如果你正在处理一台服务器且无法访问图形工具，你可能被迫依赖命令行工具。
- en: In this chapter, I’ll demonstrate the features of two common command line packet
    analysis tools, TShark and tcpdump. I think it’s helpful to be familiar with both,
    but I generally find myself using TShark on Windows systems and tcpdump on Unix
    systems. If you exclusively use Windows, you may want to skip the parts on tcpdump.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将演示两种常见的命令行数据包分析工具，TShark 和 tcpdump 的功能。我认为熟悉这两种工具是有帮助的，但通常我在 Windows
    系统上使用 TShark，而在 Unix 系统上使用 tcpdump。如果你仅使用 Windows，你可以跳过关于 tcpdump 的部分内容。
- en: '**Installing TShark**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**安装 TShark**'
- en: 'Terminal-based Wireshark, or TShark, is a packet analysis application that
    provides a lot of the same functionality as Wireshark but exclusively from a command
    line interface with no GUI. If you’ve installed Wireshark, then you likely have
    TShark as well unless you explicitly chose not to install it during Wireshark
    installation. You can verify that TShark is installed by following these steps:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 基于终端的 Wireshark，或 TShark，是一个数据包分析应用程序，它提供了与 Wireshark 大致相同的功能，但完全通过命令行接口进行，没有图形用户界面。如果你已经安装了
    Wireshark，那么 TShark 也很可能已经安装，除非你在安装 Wireshark 时明确选择不安装它。你可以通过以下步骤来验证 TShark 是否已安装：
- en: Open a command prompt. Click the **Start Menu**, enter cmd, and click **Command
    Prompt**.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符。点击 **开始菜单**，输入 cmd，然后点击 **命令提示符**。
- en: Browse to the directory where Wireshark is installed. If you installed it to
    the default location, you can go there by entering cd C:\Program Files\ Wireshark
    in the command prompt.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到 Wireshark 安装目录。如果你安装到了默认位置，可以通过在命令提示符中输入 cd C:\Program Files\ Wireshark
    进入该目录。
- en: 'Run TShark and print its version information by entering tshark –v. If TShark
    isn’t installed, you’ll get an error saying the command is not recognized. If
    TShark is installed on your system, you’ll get an output with the TShark version
    information:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 TShark 并通过输入 tshark –v 打印其版本信息。如果 TShark 没有安装，你会看到一个错误，提示该命令无法识别。如果 TShark
    已安装，你会看到 TShark 版本信息的输出：
- en: '[PRE0]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you didn’t install TShark and would like to use it now, you can simply rerun
    the Wireshark installation and make sure TShark is selected. (It is by default.)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有安装 TShark 并且现在希望使用它，可以重新运行 Wireshark 安装程序，并确保选中了 TShark（默认情况下是选中的）。
- en: If you’d like to immediately start learning more about TShark’s capabilities,
    you can print the available commands with the `–h` argument. We’ll cover some
    of these commands in this chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望立即开始了解 TShark 的功能，可以通过 `–h` 参数打印可用的命令。我们将在本章中介绍其中的一些命令。
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Like Wireshark, TShark can run on multiple operating systems, but since it’s
    not dependent on OS-specific graphics libraries, the user experience is more consistent
    across different OS platforms. Because of this, TShark operates very similarly
    on Windows, Linux, and OS X. However, there are still some differences in how
    TShark runs on each platform. In this book, we’ll focus on running TShark on Windows
    because that is the primary operating system it was designed to work with.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 和Wireshark一样，TShark可以运行在多个操作系统上，但由于它不依赖于操作系统特定的图形库，用户体验在不同操作系统平台间更加一致。因此，TShark在Windows、Linux和OS
    X上的操作非常相似。不过，TShark在每个平台上的运行仍然存在一些差异。本书将重点讲解如何在Windows上运行TShark，因为这是它设计时的主要操作系统。
- en: '**Installing tcpdump**'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**安装tcpdump**'
- en: While Wireshark is the most popular graphical packet analysis application in
    the world, tcpdump is by far the most popular command line packet analysis application.
    Designed to work on Unix-based operating systems, tcpdump is very easy to install
    via popular package management applications and even comes preinstalled on many
    flavors of Linux.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Wireshark是全球最受欢迎的图形化数据包分析应用程序，但tcpdump仍然是最受欢迎的命令行数据包分析应用程序。tcpdump是专为Unix类操作系统设计的，通过流行的包管理应用程序很容易安装，并且在许多Linux发行版中已经预装。
- en: Even though the majority of this book is Windows focused, sections on tcpdump
    are included for Unix users. Specifically, we’ll be using Ubuntu 14.04 LTS. If
    you would like to use tcpdump on a Windows device, then you can download and install
    its Windows counterpart, WinDump, from *[http://www.winpcap.org/windump/](http://www.winpcap.org/windump/)*.
    While the experience of tcpdump and that of WinDump aren’t entirely the same,
    these packet analyzers function similarly. Note, however, that WinDump isn’t nearly
    as actively maintained as tcpdump. As a result, a few newer features might be
    missing, and security vulnerabilities may exist. (We won’t be covering WinDump
    in this book.)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书的大部分内容聚焦于Windows，但也为Unix用户包含了tcpdump的相关章节。具体来说，我们将使用Ubuntu 14.04 LTS。如果你想在Windows设备上使用tcpdump，可以下载并安装其Windows版本WinDump，网址是*[http://www.winpcap.org/windump/](http://www.winpcap.org/windump/)*。虽然tcpdump和WinDump的体验不完全相同，但这两款数据包分析器的功能类似。然而需要注意的是，WinDump的维护不像tcpdump那样活跃。因此，一些较新的功能可能没有，且可能存在安全漏洞。（本书不会涵盖WinDump。）
- en: 'Ubuntu doesn’t come with tcpdump preinstalled, but installing it is very easy
    thanks to the APT package management system. To install tcpdump, follow these
    steps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu系统没有预装tcpdump，但由于APT包管理系统的存在，安装它非常简单。要安装tcpdump，请按照以下步骤操作：
- en: Open a terminal window and run the command sudo apt-get update to ensure that
    your package repositories are up-to-date with the latest package versions.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端窗口并执行命令`sudo apt-get update`，以确保你的包管理库是最新的，且包含最新的包版本。
- en: Run the command sudo apt-get install tcpdump.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行命令`sudo apt-get install tcpdump`。
- en: You’ll be asked to install a number of prerequisites that are needed to run
    tcpdump. Allow these installations by typing Y and pressing `ENTER` when prompted.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统会提示你安装一些运行tcpdump所需的前置条件。当系统提示时，输入Y并按`ENTER`键允许这些安装。
- en: 'Once the installation has completed, run the command tcpdump –h to execute
    tcpdump and print its version information. You’re ready to start using tcpdump
    if the command is successful and you see text like this in the terminal window:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，执行命令`tcpdump –h`来运行tcpdump并打印其版本信息。如果命令执行成功并且终端窗口中出现类似以下文本，你就可以开始使用tcpdump了：
- en: '[PRE2]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can print all of tcpdump’s available commands by invoking the `man tcpdump`
    command, like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过执行`man tcpdump`命令来打印tcpdump的所有可用命令，如下所示：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We’ll talk about how to use several of these commands.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论如何使用其中的一些命令。
- en: '**Capturing and Saving Packets**'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**捕获并保存数据包**'
- en: 'The first order of business is to capture packets from the wire and display
    them on the screen. To start a capture in TShark, simply execute the command tshark.
    This command will start the process of capturing packets from a network interface
    and dumping them on screen in your terminal window, which will look something
    like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首要任务是从网络中捕获数据包并将其显示在屏幕上。要在TShark中开始捕获，只需执行命令`tshark`。此命令将启动从网络接口捕获数据包并将其显示在终端窗口的过程，屏幕上会显示类似以下内容：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To start a capture in tcpdump, execute the command tcpdump. After you run this
    command, your terminal window should look something like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要在tcpdump中开始捕获，执行命令`tcpdump`。运行此命令后，你的终端窗口应该会显示类似以下内容：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**NOTE**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Since administrative privileges are required to capture packets on Unix systems,
    you’ll likely either have to execute `tcpdump` as the root user or use the `sudo`
    command in front of the commands listed in this book. In many cases, you’ll probably
    be accessing your Unix-based system as a user with limited privileges. If you
    encounter a permissions error while following along, this is probably the reason
    why.*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*由于在Unix系统上捕获数据包需要管理员权限，因此你可能需要以root用户身份执行`tcpdump`，或者在本书中列出的命令前使用`sudo`命令。在许多情况下，你可能会以具有有限权限的用户身份访问你的Unix系统。如果在跟随过程中遇到权限错误，这可能就是原因。*'
- en: 'Depending on how your system is configured, TShark or tcpdump may not default
    to the network interface you want to capture traffic from. If that happens, you
    will need to specify it. You can list the interfaces available to TShark by using
    the `–D` argument, which outputs the interfaces as a numbered list, as shown here:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的系统配置，TShark或tcpdump可能不会默认选择你想要捕获流量的网络接口。如果发生这种情况，你需要手动指定它。你可以通过使用`–D`参数列出TShark可用的接口，该命令将以编号列表的形式输出接口，如下所示：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To use a specific interface, use the `–i` argument with the interface’s assigned
    number from the interface list, like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用特定的接口，请使用`–i`参数，并从接口列表中选择该接口的编号，如下所示：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This command will capture packets exclusively from the interface named Local
    Area Connection 2, which is assigned the number 1 in the interface list. I recommend
    always specifying which interface you are capturing from. It’s common for virtual
    machine tools or VPNs to add interfaces, and you want to be certain that the packets
    you are capturing are coming from the correct source.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将仅从名为“Local Area Connection 2”的接口捕获数据包，该接口在接口列表中的编号为1。我建议始终指定你要捕获的接口。虚拟机工具或VPN常常会添加接口，你要确保你捕获的数据包来自正确的源。
- en: 'On a Linux or OS X system running tcpdump, use the `ifconfig` command to list
    the available interfaces:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行tcpdump的Linux或OS X系统上，使用`ifconfig`命令列出可用的接口：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Specifying the interface is also done by using the `–i` argument:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过使用`–i`参数来指定接口：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This command will capture packets exclusively from the eth0 interface.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将专门从eth0接口捕获数据包。
- en: Once you have everything properly configured, you can start capturing packets.
    If the device you’re capturing traffic from is even remotely busy on the network,
    then you’ll probably notice that lines representing individual packets are flying
    by rather quickly—potentially too quickly for you to read. We can remedy this
    by saving the packets to a file and then reading only a few of them from that
    file.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你正确配置了所有内容，就可以开始捕获数据包。如果你捕获的设备在网络上即使是稍微繁忙，你可能会注意到，表示单个数据包的行会飞快地出现——可能快得让你根本看不清。我们可以通过将数据包保存到文件中，然后仅从文件中读取其中的一部分来解决这个问题。
- en: To save collected packets to a file in both tools, use the `–w` argument along
    with the name of the file. The capture will continue running until you stop it
    by pressing CTRL-C. The file will be saved to whatever directory the program was
    executed from, unless otherwise specified.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个工具中，要将捕获到的数据包保存到文件中，请使用`–w`参数并指定文件名。捕获将继续运行，直到你通过按下CTRL-C停止它。除非另行指定，否则文件将保存到程序执行的目录中。
- en: 'Here’s an example of this command in TShark:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是TShark中该命令的一个示例：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This command will write all of the packets captured from the first interface
    in the interface list to *packets.pcap*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将把从接口列表中第一个接口捕获的所有数据包写入*packets.pcap*。
- en: 'In tcpdump, the same command would look like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在tcpdump中，相同的命令会是这样的：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To read packets back from a saved file, use the `–r` argument along with the
    name of the file:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要从保存的文件中读取数据包，请使用`–r`参数并指定文件名：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This command will read all the packets from *packets.pcap* onto the screen.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将把所有数据包从*packets.pcap*读取到屏幕上。
- en: 'The tcpdump command is nearly identical:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: tcpdump命令几乎是一样的：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You may notice that if the file you are attempting to read from contains a lot
    of packets, you’ll encounter a situation similar to the one just described, with
    the packets scrolling across your screen too fast for you to read. You can limit
    the number of packets displayed when reading from a file by using the `–c` argument.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，如果你尝试从一个包含大量数据包的文件中读取数据，你会遇到类似前述的情况，数据包会太快滚动，根本来不及阅读。你可以使用`–c`参数来限制从文件中读取时显示的数据包数量。
- en: 'For example, the following command will show only the first 10 packets of the
    capture file in TShark:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下命令将仅显示 TShark 中捕获文件的前 10 个数据包：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In tcpdump, the same argument can be used:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在 tcpdump 中，使用相同的参数：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `–c` argument can also be used at capture time. Executing this command will
    capture only the first 10 packets that are observed. They can also be saved when
    `–c` is combined with the `–w` argument.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`–c` 参数也可以在捕获时使用。执行此命令将仅捕获观察到的前 10 个数据包。将 `–c` 与 `–w` 参数结合使用时，也可以将它们保存。'
- en: 'Here’s what this command looks like in TShark:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 TShark 中此命令的样子：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And in tcpdump:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 而在 tcpdump 中：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Manipulating Output**'
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**操作输出**'
- en: A benefit of using command line tools is that the output is usually considered
    more carefully. A GUI typically shows you everything and it’s up to you to find
    what you want. Command line tools typically only show the bare minimum and force
    you to use additional commands to dig deeper. TShark and tcpdump are no different.
    They both show a single line of output for each packet, requiring you to use additional
    commands to view information such as protocol details or individual bytes.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命令行工具的一个好处是，输出通常会更为仔细地考虑。图形用户界面（GUI）通常会显示所有内容，用户需要自己去寻找想要的部分。命令行工具通常只显示最基本的信息，迫使用户使用额外的命令来深入挖掘。TShark
    和 tcpdump 也不例外。它们每个数据包都显示一行输出，要求用户使用额外的命令查看诸如协议详情或单独字节之类的信息。
- en: In the TShark output, each line represents a single packet, and the format of
    the line depends on the protocols used in that packet. TShark uses the same dissectors
    as Wireshark and analyzes packet data in the same way, so TShark output will mirror
    Wireshark’s Packet List pane when the two are run side by side. Because TShark
    has dissectors for layer 7 protocols, it can provide a lot more information about
    packets containing headers than can tcpdump.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TShark 输出中，每一行代表一个数据包，行的格式取决于该数据包使用的协议。TShark 使用与 Wireshark 相同的解码器，并以相同的方式分析数据包数据，因此，当
    TShark 和 Wireshark 并排运行时，TShark 输出会与 Wireshark 的数据包列表窗格相似。由于 TShark 具有第7层协议的解码器，它能够提供比
    tcpdump 更多的关于包含头部的数据包的信息。
- en: In tcpdump, each line also represents one packet, which is formatted differently
    based on the protocol being used. Since tcpdump doesn’t use Wireshark’s protocol
    dissectors, layer 7 protocol information isn’t interpreted by the tool. This is
    one of tcpdump’s biggest limitations. Instead, single-line packets are formatted
    based on their transport layer protocol, which is either TCP or UDP (we’ll learn
    more about these in [Chapter 8](ch08.xhtml#ch08)).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在 tcpdump 中，每一行也代表一个数据包，格式根据所使用的协议而不同。由于 tcpdump 没有使用 Wireshark 的协议解码器，第7层协议的信息不会被工具解析。这是
    tcpdump 的最大限制之一。相反，单行数据包会根据其传输层协议格式化，该协议是 TCP 或 UDP（我们将在[第8章](ch08.xhtml#ch08)中了解更多）。
- en: 'TCP packets use this format:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: TCP 数据包使用此格式：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'While UDP packets use this format:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: UDP 数据包使用此格式：
- en: '[PRE19]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: These basic one-line summaries are great for quick analysis, but you’ll eventually
    need to perform a deep dive into a packet. In Wireshark, you would do this by
    clicking a packet in the Packet List pane, which would display information in
    the Packet Details and Packet Bytes panes. You can access the same information
    on the command line using a few options.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这些基本的单行摘要非常适合快速分析，但最终你需要深入分析某个数据包。在 Wireshark 中，你可以通过点击数据包列表窗格中的数据包来实现这一点，从而在数据包详情和数据包字节窗格中显示信息。你也可以通过在命令行中使用一些选项来访问相同的信息。
- en: The simplest way to gain more information about each packet is to increase the
    verbosity of the output.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 获取更多关于每个数据包的信息最简单的方法是增加输出的详细程度。
- en: 'In TShark, a capital `V` is used to increase verbosity:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TShark 中，使用大写字母 `V` 来增加详细度：
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will provide an output similar to Wireshark’s Packet Details pane for packets
    read from the *packets.pcap* capture file. Examples of a packet with normal verbosity
    (a basic summary) and expanded verbosity (more detailed summaries obtained through
    the `–V` argument) are shown here.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这将提供类似 Wireshark 数据包详情窗格的输出，适用于从 *packets.pcap* 捕获文件读取的数据包。这里展示了一个数据包的正常详细度（基本摘要）和扩展详细度（通过
    `–V` 参数获得的更详细摘要）示例。
- en: 'First the standard output:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是标准输出：
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'And now a portion of the more in-depth information produced with expanded verbosity:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是通过增加详细程度所产生的更深入的信息的一部分：
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In tcpdump, the lowercase `v` is used to increase verbosity. Unlike TShark,
    tcpdump allows multiple levels of verbosity to be displayed for each packet. You
    can add up to three levels of verbosity by appending additional `v`s, as seen
    here:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在 tcpdump 中，小写字母 `v` 用于增加详细程度。与 TShark 不同，tcpdump 允许显示每个数据包的多个详细级别。您可以通过附加额外的
    `v` 来增加最多三层详细度，如下所示：
- en: '[PRE23]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: An example of the same packet displayed with normal verbosity and one level
    of expanded verbosity is shown below. Even with full verbosity, this output isn’t
    nearly as verbose as what TShark produces.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 下面展示了同一个数据包在正常详细度和一层扩展详细度下的显示情况。即使在完全详细模式下，这个输出也远不如 TShark 产生的详细。
- en: '[PRE24]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The levels of verbosity available will depend on the protocol of the packet
    you’re examining. While expanded verbosity is useful, it still doesn’t show us
    everything there is to see. TShark and tcpdump store the entire contents of each
    packet, which can also be viewed in hexadecimal or ASCII form.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的详细程度将取决于您正在检查的数据包协议。虽然扩展的详细信息非常有用，但它仍然没有显示我们需要看到的所有内容。TShark 和 tcpdump 会存储每个数据包的全部内容，也可以以十六进制或
    ASCII 形式查看。
- en: 'In TShark, you can view the hex and ASCII representation of packets by using
    the `–x` argument, which can be combined with the `r` argument to read and display
    a packet from file:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TShark 中，您可以通过使用 `–x` 参数查看数据包的十六进制和 ASCII 表示，并可以与 `r` 参数结合使用，从文件中读取并显示数据包：
- en: '[PRE25]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This view, which is similar to Wireshark’s Packet Bytes pane, is shown in [Figure
    6-1](ch06.xhtml#ch06fig1).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图与 Wireshark 的数据包字节窗格类似，如[图 6-1](ch06.xhtml#ch06fig1)所示。
- en: '![image](../images/f111-01.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f111-01.jpg)'
- en: '*Figure 6-1: Viewing raw packets in hex and ASCII in TShark*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-1：在 TShark 中以十六进制和 ASCII 查看原始数据包*'
- en: 'In tcpdump, you can view the hex and ASCII representation by using the `–X`
    switch. You can also combine `–X` with the `r` argument to read from a packet
    file, like this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在 tcpdump 中，您可以通过使用 `–X` 开关查看十六进制和 ASCII 表示。您还可以将 `–X` 与 `r` 参数结合使用，从数据包文件中读取，如下所示：
- en: '[PRE26]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The output from this command is shown in [Figure 6-2](ch06.xhtml#ch06fig2).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令的输出如[图 6-2](ch06.xhtml#ch06fig2)所示。
- en: '![image](../images/f111-02.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f111-02.jpg)'
- en: '*Figure 6-2: Viewing raw packets in hex and ASCII in tcpdump*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-2：在 tcpdump 中以十六进制和 ASCII 查看原始数据包*'
- en: tcpdump also lets you get a bit more granular if you need to. You can view only
    the hexadecimal output using the `–x` (lowercase) argument or only the ASCII output
    using the `–A` argument.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，tcpdump 还允许您进行更细粒度的操作。您可以使用 `–x`（小写字母）参数仅查看十六进制输出，或者使用 `–A` 参数仅查看 ASCII
    输出。
- en: It’s easy to become overwhelmed with data when you start experimenting with
    these data output options. I find it most efficient to use the least amount of
    information needed when doing analysis from the command line. Start by viewing
    packets in their default list view and use more verbose output when you narrow
    your analysis down to a few interesting packets. This approach will keep you from
    being overwhelmed with data.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当您开始尝试这些数据输出选项时，很容易被数据淹没。我发现，在命令行分析时，使用最少的信息是最有效的。首先通过默认列表视图查看数据包，当您将分析缩小到几个有趣的数据包时，再使用更详细的输出。这种方法能帮助您避免被大量数据压倒。
- en: '**Name Resolution**'
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**名称解析**'
- en: Like Wireshark, TShark and tcpdump will attempt to perform name resolution to
    convert addresses and port numbers to names. If you followed along with any of
    the earlier examples, you may have noticed that this occurs by default. As mentioned
    previously, I typically prefer to disable this functionality to prevent the possibility
    of my analysis generating more packets on the wire.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 像 Wireshark 一样，TShark 和 tcpdump 会尝试执行名称解析，将地址和端口号转换为名称。如果您跟随之前的示例，可能已经注意到默认情况下会发生这种情况。如前所述，我通常更倾向于禁用此功能，以防止我的分析在网络中生成更多的数据包。
- en: 'You can disable name resolution in TShark by using the `–n` argument. This
    argument, like many others, can be combined with other commands to enhance readability:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用 `–n` 参数在 TShark 中禁用名称解析。这个参数，像许多其他参数一样，可以与其他命令结合使用，以增强可读性：
- en: '[PRE27]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You can enable or disable certain aspects of name resolution with the `–N`
    argument. If you use the `–N` argument, all name resolution will be disabled except
    for any you explicitly enable using the appropriate values. For instance, the
    following command will enable only transport layer (port name) resolution:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `–N` 参数启用或禁用某些名称解析方面的功能。如果您使用 `–N` 参数，所有名称解析将被禁用，除非您明确启用了某些解析。比如，以下命令只会启用传输层（端口名称）解析：
- en: '[PRE28]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can combine multiple values. This command will enable transport layer and
    MAC resolution:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以组合多个值。此命令将启用传输层和 MAC 解析：
- en: '[PRE29]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following values are available when using this option:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此选项时，以下值可用：
- en: m  MAC address resolution
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: m  MAC 地址解析
- en: n  Network address resolution
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: n  网络地址解析
- en: t  Transport layer (port name) resolution
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: t  传输层（端口名）解析
- en: N  Use external resolvers
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: N  使用外部解析器
- en: C  Concurrent DNS lookups
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: C  并发 DNS 查找
- en: In tcpdump, using `–n` will disable IP name resolution, and using `–nn` will
    disable port name resolution as well.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在 tcpdump 中，使用 `–n` 将禁用 IP 名称解析，而使用 `–nn` 则将同时禁用端口名称解析。
- en: 'This argument can also be combined with other commands, like this:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 此参数也可以与其他命令结合使用，像这样：
- en: '[PRE30]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The following examples show a packet capture first with port resolution enabled
    and then with it disabled (`-n`).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了先启用端口解析然后禁用端口解析（`-n`）的捕获数据包。
- en: '[PRE31]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Both of these commands read just the first packet from the capture file *tcp_ports.pcap*.
    With the first command, port name resolution is on and resolves port 80 to http
    ➊, but with the second command, the port is just displayed by number ➋.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个命令都只读取捕获文件中的第一个数据包 *tcp_ports.pcap*。第一个命令启用了端口名称解析，并将端口 80 解析为 http ➊，而第二个命令则只显示端口号
    ➋。
- en: '**Applying Filters**'
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**应用过滤器**'
- en: Filtering in TShark and tcpdump is very flexible because both allow the use
    of BPF capture filters. TShark can also use Wireshark display filters. Just as
    with Wireshark, capture filters in TShark can be used only at capture time, and
    display filters can be used at capture time or while displaying already captured
    packets. We’ll start by looking at TShark filters.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TShark 和 tcpdump 中，过滤功能非常灵活，因为两者都允许使用 BPF 捕获过滤器。TShark 还可以使用 Wireshark 显示过滤器。就像在
    Wireshark 中一样，TShark 中的捕获过滤器只能在捕获时使用，显示过滤器可以在捕获时使用，也可以在显示已捕获的数据包时使用。我们将首先查看 TShark
    过滤器。
- en: 'Capture filters can be applied using the `–f` argument, followed by the BPF
    syntax you wish to use in quotation marks. This command will only capture and
    save packets with a destination of port 80 and using the TCP protocol:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获过滤器可以通过 `–f` 参数应用，后面跟上你希望使用的 BPF 语法，语法要用引号括起来。此命令只会捕获并保存目标端口为 80 且使用 TCP 协议的数据包：
- en: '[PRE32]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Display filters can be applied using the `–Y` argument, followed by the Wireshark
    filter syntax you wish to use in quotation marks. This can be applied at capture
    time like this:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 显示过滤器可以通过 `–Y` 参数应用，后面跟上你希望使用的 Wireshark 过滤器语法，语法要用引号括起来。可以像这样在捕获时应用：
- en: '[PRE33]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Display filters can be applied on already captured packets using the same argument.
    This command will display only packets from *packets.pcap* that match the filter:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 显示过滤器可以在已捕获的数据包上使用相同的参数应用。此命令将仅显示与过滤器匹配的 *packets.pcap* 文件中的数据包：
- en: '[PRE34]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'With tcpdump, you specify filters inline at the end of a command within single
    quotes. This command will also capture and save only packets destined to TCP port
    80:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在 tcpdump 中，你在命令末尾的单引号内指定过滤器。这条命令也将只捕获并保存目标为 TCP 端口 80 的数据包：
- en: '[PRE35]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You can specify a filter when reading packets as well. This command will display
    only packets from *packets.pcap* that match the filter:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你在读取数据包时也可以指定过滤器。此命令将仅显示与过滤器匹配的 *packets.pcap* 文件中的数据包：
- en: '[PRE36]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: It’s important to keep in mind that if the original capture file was created
    without a filter, then it still contains other packets; you are just limiting
    what is shown on the screen when reading from an existing file.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的是，如果原始捕获文件是在没有过滤器的情况下创建的，那么它仍然包含其他数据包；你只是限制了在从现有文件读取时在屏幕上显示的内容。
- en: 'What if you have a capture file that contains a large variety of packets, but
    you want to filter out a subset of them and save that subset to a separate file?
    You can do this by combining the `–w` and `–r` arguments:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个包含多种数据包的捕获文件，但你只想过滤出其中的一部分并将该部分保存到一个单独的文件中怎么办？你可以通过结合使用 `–w` 和 `–r` 参数来实现：
- en: '[PRE37]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This command will read the file *packets.pcap*, filter out only the traffic
    destined for TCP port 80 (which is used for http), and write those packets to
    a new file called *http_packets.pcap*. This is a very common technique to use
    when you want to maintain a larger source .*pcap* file but only analyze a small
    portion of it at a time. I frequently use this technique to whittle down very
    large capture files with tcpdump so that I can analyze a subset of the packets
    in Wireshark. Smaller capture files are much easier to wrangle.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将读取文件*packets.pcap*，仅筛选出目标为TCP端口80（用于http）的流量，并将这些数据包写入一个名为*http_packets.pcap*的新文件。这是一种非常常见的技术，尤其是在您希望保持一个较大的源文件.*pcap*，但又只想分析其中的一小部分时。我经常使用这种技术通过tcpdump将非常大的捕获文件缩小，以便在Wireshark中分析数据包的子集。较小的捕获文件更容易处理。
- en: 'In addition to specifying a filter inline, tcpdump allows you to reference
    a BPF file containing a series of filters. This is handy when you’d like to apply
    an extremely large or complex filter that might otherwise be unwieldy to edit
    and maintain inline with the tcpdump command. You can specify a filter file using
    the `–F` argument, like this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 除了指定内联过滤器外，tcpdump还允许您引用一个包含一系列过滤器的BPF文件。当您需要应用一个非常大或复杂的过滤器，且不方便在tcpdump命令中进行编辑和维护时，这非常有用。您可以使用`–F`参数指定一个过滤器文件，如下所示：
- en: '[PRE38]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If your file gets too large, you might be tempted to add notes or comments
    to it to keep track of what each part of the filter does. Keep in mind that a
    BPF filter file does not allow for comments and will generate an error if anything
    other than a filtering statement is encountered. Since comments are very helpful
    for deciphering large filter files, I usually maintain two copies of every file:
    one for use with tcpdump that doesn’t contain comments and one that contains comments
    for reference.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的文件变得太大，您可能会想添加注释或说明，以便跟踪过滤器每个部分的作用。请记住，BPF过滤器文件不允许注释，并且如果遇到任何非过滤声明的内容，将会生成错误。由于注释对于解读大型过滤器文件非常有帮助，我通常会保留每个文件的两个副本：一个用于tcpdump，不包含注释，另一个包含注释供参考。
- en: '**Time Display Formats in TShark**'
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**TShark中的时间显示格式**'
- en: 'One thing that often confuses new analysts is the default timestamp used by
    TShark. It shows packet timestamps in relation to the start of the packet capture.
    There are times when such timestamping is preferable, but in many cases you may
    want to see the time the packet was captured, as is the default for tcpdump timestamps.
    You can get this same output from TShark by using the `–t` argument with the value
    `ad` for absolute date:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一个经常让新分析师困惑的事情是TShark的默认时间戳。它显示的是相对于数据包捕获开始的时间戳。在某些情况下，这种时间戳非常有用，但在许多情况下，您可能希望查看数据包实际捕获的时间，就像tcpdump时间戳的默认行为一样。您可以通过在TShark中使用`–t`参数，并将值设置为`ad`（绝对日期）来获得相同的输出：
- en: '[PRE39]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Here’s a comparison of the same packets as before with the default relative
    timestamps ➊ and absolute timestamps ➋:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这是之前相同数据包的比较，显示了默认的相对时间戳➊和绝对时间戳➋：
- en: '[PRE40]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: By using the `–t` argument, you can specify any time display format you would
    find in Wireshark. These formats are shown in [Table 6-1](ch06.xhtml#ch06tab1).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`–t`参数，您可以指定Wireshark中可用的任何时间显示格式。这些格式显示在[表6-1](ch06.xhtml#ch06tab1)中。
- en: '**Table 6-1:** Time Display Formats Available in TShark'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**表6-1：** TShark中可用的时间显示格式'
- en: '| **Value** | **Timestamp** | **Example** |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| **值** | **时间戳** | **示例** |'
- en: '| --- | --- | --- |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `a` | Absolute time the packet was captured (in your time zone) | `15:47:58.004669`
    |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `a` | 数据包捕获的绝对时间（按您的时区） | `15:47:58.004669` |'
- en: '| `ad` | Absolute time the packet was captured with date (in your time zone)
    | `2015-10-09 15:47:58.004669` |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `ad` | 数据包捕获的绝对时间（按您的时区） | `2015-10-09 15:47:58.004669` |'
- en: '| `d` | Delta (time difference) since previous captured packet | `0.000140`
    |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `d` | 自上一个捕获的数据包以来的时间差（时差） | `0.000140` |'
- en: '| `dd` | Delta since previous displayed packet | `0.000140` |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `dd` | 自上一个显示的数据包以来的时间差 | `0.000140` |'
- en: '| `e` | Epoch time (seconds since January 1, 1970, UTC) | `1444420078.004669`
    |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `e` | 纪元时间（自1970年1月1日以来的秒数，UTC） | `1444420078.004669` |'
- en: '| `r` | Elapsed time between the first packet and the current packet | `0.000140`
    |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `r` | 第一个数据包和当前数据包之间的经过时间 | `0.000140` |'
- en: '| `u` | Absolute time the packet was captured (UTC) | `19:47:58.004669` |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `u` | 数据包捕获的绝对时间（UTC） | `19:47:58.004669` |'
- en: '| `ud` | Absolute time the packet was captured with date (UTC) | `2015-10-09
    19:47:58.004669` |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `ud` | 数据包捕获的绝对时间（UTC日期） | `2015-10-09 19:47:58.004669` |'
- en: Unfortunately, tcpdump doesn’t provide this level of control for manipulating
    how timestamps are shown.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，tcpdump没有提供这种级别的控制来操作时间戳的显示方式。
- en: '**Summary Statistics in TShark**'
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**TShark中的总结统计信息**'
- en: 'Another useful TShark feature (and one that sets it apart from tcpdump) is
    its ability to generate a subset of statistics from a capture file. These statistics
    mirror many of the capabilities found in Wireshark but provide easy command line
    access. Statistics are generated by using the `–z` argument and specifying the
    name of the output you would like to generate. You can view a full listing of
    available statistics by using this command:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的TShark功能（也是它与tcpdump的不同之处）是它能够从捕获文件中生成统计信息的子集。这些统计信息与Wireshark中的许多功能相似，但提供了方便的命令行访问。统计信息通过使用`–z`参数并指定你希望生成的输出名称来生成。你可以使用此命令查看所有可用统计信息的完整列表：
- en: '[PRE41]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Many of the features we’ve already covered are available using the `–z` argument.
    They include the ability to output endpoint and conversation statistics using
    this command:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖的许多功能都可以通过`–z`参数来实现。它们包括使用此命令输出端点和会话统计信息的功能：
- en: '[PRE42]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This command prints a table of statistics with information about the IP conversations
    in the file *packets.pcap*, as shown in [Figure 6-3](ch06.xhtml#ch06fig3).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将打印*packets.pcap*文件中关于IP会话的统计信息表，如[图6-3](ch06.xhtml#ch06fig3)所示。
- en: You can also use this argument to view protocol-specific information. As shown
    in [Figure 6-4](ch06.xhtml#ch06fig4), you can use the `http,tree` option to see
    a breakdown of HTTP requests and responses in table form.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用此参数查看特定协议的信息。如[图6-4](ch06.xhtml#ch06fig4)所示，你可以使用`http,tree`选项以表格形式查看HTTP请求和响应的详细信息。
- en: '[PRE43]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '![image](../images/f116-01.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f116-01.jpg)'
- en: '*Figure 6-3: Using TShark to view conversation statistics*'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-3：使用TShark查看会话统计信息*'
- en: '![image](../images/f116-02.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f116-02.jpg)'
- en: '*Figure 6-4: Using TShark to view HTTP request and response statistics*'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-4：使用TShark查看HTTP请求和响应的统计信息*'
- en: 'Another useful feature is the ability to view reassembled stream output, similar
    to what we did earlier by right-clicking packets in Wireshark and choosing the
    Follow TCP Stream option. To get this output, we have to use the `follow` option
    and specify the type of stream, the output mode, and which stream we want to display.
    You can identify a stream with the number assigned to it in the leftmost column
    when outputting conversation statistics (as seen in [Figure 6-3](ch06.xhtml#ch06fig3)).
    A command might look like this:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的功能是查看重组流输出，类似于我们之前通过右键点击Wireshark中的数据包并选择“跟随TCP流”选项所做的操作。要获取此输出，我们必须使用`follow`选项，并指定流的类型、输出模式以及我们希望显示的流。你可以通过在输出会话统计信息时，在最左边的列中看到分配给它的编号来识别某个流（如[图6-3](ch06.xhtml#ch06fig3)所示）。一个命令可能如下所示：
- en: '[PRE44]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'This command will print TCP stream 0 to the screen in ASCII format from the
    file *http_google.pcap*. The output for this command looks like this:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将从*http_google.pcap*文件中以ASCII格式打印TCP流0的内容。此命令的输出如下所示：
- en: '[PRE45]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'You can also specify which stream you’d like to view by providing the address
    details. For example, the following command will retrieve a UDP stream for the
    specified endpoints and ports:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过提供地址细节来指定你想要查看的流。例如，以下命令将检索指定端点和端口的UDP流：
- en: '[PRE46]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: This command will print the UDP stream for the endpoints 192.168.1.5 on port
    23429 ➊ and 4.2.2.1 on port 53 ➋ from *packets.pcap*.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将打印来自*packets.pcap*的UDP流，端点为192.168.1.5，端口23429 ➊ 和4.2.2.1，端口53 ➋。
- en: 'Here are some of my favorite statistical options:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我最喜欢的一些统计选项：
- en: ip_hosts,tree   Displays every IP address in a capture, along with the rate
    and percentage of traffic each address is responsible for
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: ip_hosts,tree   显示捕获中的每个IP地址，以及每个地址所负责的流量的速率和百分比
- en: io,phs   Displays a protocol hierarchy showing all protocols found within the
    capture file
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: io,phs   显示捕获文件中找到的所有协议的协议层次结构
- en: http,tree   Displays statistics related to HTTP requests and responses
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: http,tree   显示与HTTP请求和响应相关的统计信息
- en: http_req,tree   Displays statistics for every HTTP request
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: http_req,tree   显示每个HTTP请求的统计信息
- en: smb,srt   Displays statistics related to SMB commands for analyzing Windows
    communication
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: smb,srt   显示与SMB命令相关的统计信息，用于分析Windows通信
- en: endpoints,wlan   Displays wireless endpoints
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: endpoints,wlan   显示无线端点
- en: expert   Displays expert information (chats, errors, and so on) from the capture
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: expert   显示捕获中的专家信息（聊天、错误等）
- en: 'There are a lot of useful options available using the `–z` argument. It would
    take far too many pages to cover them all here, but if you plan to use TShark
    frequently, you should invest time in reviewing the official documentation to
    learn more about everything that is available. You can find that documentation
    here: *[https://www.wireshark.org/docs/man-pages/tshark.html](https://www.wireshark.org/docs/man-pages/tshark.html)*.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `–z` 参数可以提供许多有用的选项。这里不能一一列出它们，因为需要太多页面，但如果你打算频繁使用 TShark，你应该投入时间查看官方文档，了解更多关于所有可用选项的信息。你可以在这里找到该文档：*[https://www.wireshark.org/docs/man-pages/tshark.html](https://www.wireshark.org/docs/man-pages/tshark.html)*。
- en: '**Comparing TShark and tcpdump**'
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**比较 TShark 和 tcpdump**'
- en: 'Both command line packet analysis applications we’ve examined in this chapter
    are well suited to their respective tasks, and either of them will allow you to
    accomplish whatever task is at hand with varying degrees of effort. There are
    a few differences worth highlighting so you can choose the best tool for the job:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中分析的两个命令行数据包分析应用程序都非常适合各自的任务，使用它们中的任何一个都能以不同的努力程度完成当前任务。有一些差异值得指出，以便你选择最适合的工具：
- en: '**Operating system**   tcpdump is only available for Unix-based operating systems,
    while TShark can function on Windows and Unix-based systems.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**操作系统** tcpdump 仅适用于基于 Unix 的操作系统，而 TShark 可以在 Windows 和基于 Unix 的系统上运行。'
- en: '**Protocol support**   Both tools support common layer 3 and 4 protocols, but
    tcpdump has limited layer 7 protocol support. TShark provides a rich level of
    layer 7 protocol support because it has access to Wireshark’s protocol dissectors.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**协议支持** 这两个工具都支持常见的第 3 层和第 4 层协议，但 tcpdump 对第 7 层协议的支持有限。TShark 提供了丰富的第 7
    层协议支持，因为它可以访问 Wireshark 的协议解析器。'
- en: '**Analysis features**   Both tools rely heavily on human analysis to produce
    meaningful results, but TShark also provides a robust set of analytical and statistical
    features, similar to those in Wireshark, that can aid analysis when a GUI isn’t
    available.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**分析功能** 这两个工具都在很大程度上依赖人工分析来产生有意义的结果，但 TShark 还提供了一套强大的分析和统计功能，类似于 Wireshark，这些功能在没有
    GUI 的情况下可以帮助分析。'
- en: Tool availability and personal preference are usually the ultimate deciders
    of which application to use. Fortunately, the tools are similar enough that learning
    one will inherently teach you something about the other, making you more versatile
    and increasing the size of your tool kit.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 工具的可用性和个人偏好通常是决定使用哪个应用程序的最终因素。幸运的是，这些工具足够相似，学习其中一个会自然地让你对另一个有所了解，从而使你更加多才多艺，扩大你的工具包。
