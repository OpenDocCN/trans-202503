- en: '6'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '6'
- en: AUTOMATING NEXPOSE
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化 Nexpose
- en: '![](images/00010.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00010.jpg)'
- en: Nexpose is a vulnerability scanner similar to Nessus but geared toward enterprise-level
    vulnerability management. This means not only helping system admins find which
    boxes need patches, but also helping them mitigate and prioritize the potential
    vulnerabilities over time. In this chapter, I show you how to use C# to automate
    Rapid7’s Nexpose vulnerability scanner in order to create a Nexpose site, scan
    that site, create a PDF report of the site’s vulnerabilities, and then delete
    the site. Nexpose’s reporting is incredibly flexible and powerful, allowing you
    to automatically generate reports for a wide variety of audiences, from executives
    to technical admins.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Nexpose 是一款类似于 Nessus 的漏洞扫描工具，但它针对企业级漏洞管理进行优化。这意味着它不仅帮助系统管理员找出需要修补的主机，还帮助他们随着时间的推移缓解并优先处理潜在漏洞。在本章中，我将向你展示如何使用
    C# 来自动化 Rapid7 的 Nexpose 漏洞扫描工具，创建一个 Nexpose 站点、扫描该站点、生成该站点漏洞的 PDF 报告，然后删除该站点。Nexpose
    的报告功能非常灵活和强大，允许你为从高管到技术管理员的各种受众自动生成报告。
- en: 'Like the Nessus scanner discussed in [Chapter 5](index_split_010.html#filepos420379),
    Nexpose uses the HTTP protocol to expose its API, but it uses XML instead of JSON
    to format data. As in [Chapter 5](index_split_010.html#filepos420379), we’ll write
    two separate classes: one to communicate with the Nexpose API (the session class)
    and another to drive the API (the manager class). Once we’ve written the classes,
    you’ll learn how to run a scan and view the results.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在[第 5 章](index_split_010.html#filepos420379)中讨论的 Nessus 扫描器一样，Nexpose 也使用
    HTTP 协议暴露其 API，但它使用 XML 格式而非 JSON 来格式化数据。如同在[第 5 章](index_split_010.html#filepos420379)中所述，我们将编写两个独立的类：一个与
    Nexpose API 通信（会话类），另一个驱动 API（管理类）。一旦我们编写好这些类，你将学习如何运行扫描并查看结果。
- en: Installing Nexpose
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Nexpose
- en: Nexpose is available in various forms and editions from Rapid7\. We’ll use the
    Nexpose binary installer from Rapid7 on a fresh Ubuntu 14.04 LTS machine using
    the commands and URL shown in [Listing 6-1](#filepos457747). This URL is updated
    with the latest installer whenever new versions are released. If the URL doesn’t
    work for whatever reason, you can also find a download link after registering
    for a Community activation key (required to run Nexpose). After downloading the
    installer, we need to set the executable file permission so we can subsequently
    run the installer as root.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Nexpose 以各种形式和版本由 Rapid7 提供。我们将在一台全新安装的 Ubuntu 14.04 LTS 机器上使用 Rapid7 提供的 Nexpose
    二进制安装程序，使用[清单 6-1](#filepos457747)中显示的命令和 URL。每当发布新版本时，URL 将会更新为最新的安装程序。如果该 URL
    无法使用，您也可以在注册社区激活密钥（运行 Nexpose 所必需）后找到下载链接。下载安装程序后，我们需要设置可执行文件权限，以便之后以 root 身份运行安装程序。
- en: $ wget http://download2.rapid7.com/download/NeXpose-v4/NeXposeSetup-Linux64.bin
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $ wget http://download2.rapid7.com/download/NeXpose-v4/NeXposeSetup-Linux64.bin
- en: $ chmod +x ./NeXposeSetup-Linux64.bin
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $ chmod +x ./NeXposeSetup-Linux64.bin
- en: '$ sudo ./NeXposeSetup-Linux64.bin  Listing 6-1: Downloading and installing
    Nexpose'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $ sudo ./NeXposeSetup-Linux64.bin  清单 6-1：下载并安装 Nexpose
- en: When the installer is run in a graphical desktop environment, such as KDE or
    GNOME, a graphical installer is presented for the user to step through for the
    initial configuration, as shown in [Figure 6-1](#filepos458418). If you are installing
    Nexpose through a text-based environment, such as SSH, the installer should step
    through configuration with yes/no questions and other prompts for information.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当安装程序在图形桌面环境中运行时，例如 KDE 或 GNOME，用户将看到一个图形化的安装程序界面，用于进行初始配置，如[图 6-1](#filepos458418)所示。如果你通过基于文本的环境（如
    SSH）安装 Nexpose，安装程序将通过是/否问题和其他提示信息逐步进行配置。
- en: '![](images/00013.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00013.jpg)'
- en: 'Figure 6-1: The graphical Nexpose installer'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6-1：图形化的 Nexpose 安装程序
- en: Once Nexpose is installed, run ifconfig in a terminal to see the IP address
    open in the web browser. Then enter https://ip:3780/ into the browser, replacing
    ip with the IP address of the machine running Nexpose. You should see the Nexpose
    login page, as shown in [Figure 6-2](#filepos459137).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 Nexpose，在终端中运行 ifconfig 查看 IP 地址，然后在浏览器中输入 https://ip:3780/，将 ip 替换为运行
    Nexpose 的机器的 IP 地址。你应该能看到 Nexpose 的登录页面，如[图 6-2](#filepos459137)所示。
- en: '![](images/00017.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00017.jpg)'
- en: 'Figure 6-2: The Nexpose login page'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6-2：Nexpose 登录页面
- en: Use the credentials asked for during setup. You may see an SSL certificate error
    before being presented with the login page. Because Nexpose uses a self-signed
    SSL certificate by default, your browser probably doesn’t trust it and may complain.
    This is normal and expected.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用在设置过程中要求的凭据。你可能会在看到登录页面之前遇到 SSL 证书错误。因为 Nexpose 默认使用自签名的 SSL 证书，你的浏览器可能不信任它，并可能会报错。这是正常且预期的。
- en: Activation and Testing
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 激活与测试
- en: When you first log in, you should be prompted to enter the activation key you
    were sent in an email from Rapid7 after registering for the Community Edition,
    as shown in [Figure 6-3](#filepos460042).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次登录时，系统应该会提示你输入在注册社区版后通过电子邮件发送给你的激活密钥，如[图 6-3](#filepos460042)所示。
- en: '![](images/00019.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00019.jpg)'
- en: 'Figure 6-3: The activation modal pop-up in Nexpose'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6-3：Nexpose 中的激活弹出窗口
- en: Now test your installation to make sure you have activated the software correctly
    and can authenticate with the Nexpose API by sending an HTTP request. You can
    use the curl utility to make an authentication request to the API and display
    the response, as shown in [Listing 6-2](#filepos461017).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在测试你的安装，确保软件已正确激活，并且可以通过发送 HTTP 请求与 Nexpose API 进行身份验证。你可以使用 curl 工具向 API 发出身份验证请求并显示响应，如[清单
    6-2](#filepos461017)所示。
- en: $ curl -d '<LoginRequest user-id="nxadmin" password="nxpassword"/>' -X POST
    -k \
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $ curl -d '<LoginRequest user-id="nxadmin" password="nxpassword"/>' -X POST
    -k \
- en: '-H "Content-Type: text/xml" https://192.168.1.197:3780/api/1.1/xml'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '-H "Content-Type: text/xml" https://192.168.1.197:3780/api/1.1/xml'
- en: <LoginResponse success="1" session-id="D45FFD388D8520F5FE18CACAA66BE527C1AF5888"/>
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <LoginResponse success="1" session-id="D45FFD388D8520F5FE18CACAA66BE527C1AF5888"/>
- en: $
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $
- en: 'Listing 6-2: Successfully authenticating with the Nexpose API using  curl'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 6-2：使用 curl 成功通过 Nexpose API 进行身份验证
- en: If you see a response containing success="1" and a session ID, Nexpose has been
    correctly activated, and the API is functioning as expected with your credentials.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到一个包含 success="1" 和会话 ID 的响应，说明 Nexpose 已正确激活，且 API 按照你的凭据正常工作。
- en: Some Nexpose Parlance
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 Nexpose 术语
- en: Before we discuss managing and reporting on vulnerability scans in Nexpose any
    further, we need to define a couple of terms. When you start a vulnerability scan
    in Nexpose, you scan a site, which is a collection of related hosts or assets.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进一步讨论如何管理和报告 Nexpose 中的漏洞扫描之前，我们需要定义几个术语。当你在 Nexpose 中启动漏洞扫描时，你扫描的是一个站点，站点是相关主机或资产的集合。
- en: 'Nexpose has two types of sites: static sites and dynamic sites. We will focus
    on the former during our automation. A static site holds a list of hosts you can
    only change by reconfiguring the site. This is why it is called static—the site
    won’t change over time. Nexpose also supports creating sites based on asset filters,
    so the assets in a dynamic site may change from one week to another based on their
    vulnerability count or inability to authenticate. Dynamic sites are more complex,
    but they are much more powerful than static sites and are a great feature to familiarize
    yourself with as extra homework.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Nexpose 有两种类型的站点：静态站点和动态站点。在我们的自动化过程中，我们将重点关注前者。静态站点包含一个主机列表，你只能通过重新配置站点来更改该列表。这就是为什么它被称为静态——站点不会随着时间变化。Nexpose
    还支持基于资产过滤器创建站点，因此动态站点中的资产可能会根据其漏洞计数或无法认证的情况从一周到另一周发生变化。动态站点更复杂，但比静态站点更强大，是一个值得通过额外作业来熟悉的好功能。
- en: The assets that make up the sites are simply connected devices on your network
    that Nexpose can communicate with. These assets can be bare-metal data center
    rack servers, VMware ESXi hosts, or Amazon AWS instances. If you can ping it with
    an IP address, it can be an asset in your Nexpose site. Many times, it is beneficial
    to separate the hosts on your physical network into logical sites in Nexpose so
    you can more granularly scan and manage vulnerabilities. A sophisticated enterprise
    network may have a site specifically for ESXi hosts, a site for the C-level executive
    network segment, and a site for the customer service call center assets.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 构成站点的资产只是你网络中可以与 Nexpose 通信的连接设备。这些资产可以是裸机数据中心机架服务器、VMware ESXi 主机或 Amazon AWS
    实例。如果你能通过 IP 地址 ping 通它，它就可以是你 Nexpose 站点中的资产。许多时候，将物理网络中的主机分离到 Nexpose 中的逻辑站点是有益的，这样你就可以更精细地扫描和管理漏洞。一个复杂的企业网络可能会有一个专门用于
    ESXi 主机的站点，一个用于高层管理人员网络段的站点，以及一个用于客户服务呼叫中心资产的站点。
- en: The NexposeSession Class
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: NexposeSession 类
- en: We’ll begin by writing the NexposeSession class to communicate with the Nexpose
    API, as shown in [Listing 6-3](#filepos464682).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从编写 NexposeSession 类开始，来与 Nexpose API 进行通信，如 [清单 6-3](#filepos464682) 所示。
- en: 'public class NexposeSession : IDisposable'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'public class NexposeSession : IDisposable'
- en: '{'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: public ➊NexposeSession(string username, string password, string host,
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public ➊NexposeSession(string username, string password, string host,
- en: int port = ➋3780, NexposeAPIVersion version = ➌NexposeAPIVersion.v11)
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: int port = ➋3780, NexposeAPIVersion version = ➌NexposeAPIVersion.v11)
- en: '{'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: this.➍Host = host;
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: this.➍Host = host;
- en: this.Port = port;
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: this.Port = port;
- en: this.APIVersion = version;
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: this.APIVersion = version;
- en: ''
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ServicePointManager.➎ServerCertificateValidationCallback = (s, cert, chain,
    ssl) => true;
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ServicePointManager.➎ServerCertificateValidationCallback = (s, cert, chain,
    ssl) => true;
- en: ''
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: this.➏Authenticate(username, password);
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: this.➏Authenticate(username, password);
- en: '}'
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: ''
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public string Host { get; set; }
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public string Host { get; set; }
- en: public int Port { get; set; }
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public int Port { get; set; }
- en: public bool IsAuthenticated { get; set; }
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public bool IsAuthenticated { get; set; }
- en: public string SessionID { get; set; }
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public string SessionID { get; set; }
- en: public NexposeAPIVersion APIVersion { get; set; }
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public NexposeAPIVersion APIVersion { get; set; }
- en: 'Listing 6-3: The beginning of the  NexposeSession  class with constructor and
    properties'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 6-3：NexposeSession 类的开始部分，包括构造函数和属性
- en: 'The NexposeSession class constructor ➊ takes up to five arguments: three are
    required (username, password, and the host to connect to), and two are optional
    (the port and API version, with defaults of 3780 ➋ and NexposeAPIVersion.v11 ➌,
    respectively). Beginning at ➍, we assign the properties Host, Port, and APIVersion
    to the three required arguments. Next, we disable SSL certificate verification
    at ➎ by setting ServerCertificateValidationCallback to always return true. Doing
    so violates good security principles, but we disable verification because Nexpose
    runs on HTTPS with a self-signed certificate by default. (Otherwise, SSL certificate
    verification would fail during the HTTP request.) At ➏, we attempt to authenticate
    by calling the Authenticate() method, shown expanded in [Listing 6-4](#filepos467077).'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: NexposeSession 类的构造函数 ➊ 接受最多五个参数：其中三个是必需的（用户名、密码和连接的主机），两个是可选的（端口和 API 版本，默认为
    3780 ➋ 和 NexposeAPIVersion.v11 ➌）。从 ➍ 开始，我们将 Host、Port 和 APIVersion 属性分别赋值为三个必需的参数。接下来，我们通过将
    ServerCertificateValidationCallback 设置为始终返回 true，禁用 SSL 证书验证。这种做法违反了良好的安全原则，但由于
    Nexpose 默认使用自签名证书在 HTTPS 上运行，我们禁用验证（否则，在 HTTP 请求过程中 SSL 证书验证会失败）。在 ➏，我们尝试通过调用
    Authenticate() 方法进行身份验证，方法的详细代码见 [清单 6-4](#filepos467077)。
- en: public XDocument ➊Authenticate(string username, string password)
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public XDocument ➊Authenticate(string username, string password)
- en: '{'
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: XDocument cmd = new ➋XDocument(
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument cmd = new ➋XDocument(
- en: new XElement("LoginRequest",
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement("LoginRequest",
- en: new XAttribute("user-id", username),
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("user-id", username),
- en: new XAttribute("password", password)));
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("password", password)));
- en: ''
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: XDocument doc = (XDocument)this.➌ExecuteCommand(cmd);
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument doc = (XDocument)this.➌ExecuteCommand(cmd);
- en: ''
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ➍if (doc.Root.Attribute("success").Value == "1")
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ➍if (doc.Root.Attribute("success").Value == "1")
- en: '{'
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: ➎this.SessionID = doc.Root.Attribute("session-id").Value;
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ➎this.SessionID = doc.Root.Attribute("session-id").Value;
- en: this.IsAuthenticated = true;
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: this.IsAuthenticated = true;
- en: '}'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: else
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: else
- en: throw new Exception("Authentication failed");
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: throw new Exception("身份验证失败");
- en: ''
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ➏return doc;
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ➏return doc;
- en: '}'
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 6-4: The  NexposeSession  class’s  Authenticate()  method'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 6-4：NexposeSession 类的 Authenticate() 方法
- en: The Authenticate() method ➊ takes as arguments a username and a password. To
    send the username and password to the API for authentication, we create an XDocument
    at ➋ with root node LoginRequest and user-id and password attributes. We pass
    the XDocument to the ExecuteCommand() method ➌ and then store the result returned
    by the Nexpose server.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Authenticate() 方法 ➊ 接受用户名和密码作为参数。为了将用户名和密码发送到 API 进行身份验证，我们在 ➋ 创建一个具有根节点 LoginRequest
    和 user-id、password 属性的 XDocument。我们将 XDocument 传递给 ExecuteCommand() 方法 ➌，然后存储
    Nexpose 服务器返回的结果。
- en: At ➍, we determine whether Nexpose’s XML response has a success attribute value
    of 1\. If so, at ➎ we assign the SessionID property to the session-id in the response
    and set IsAuthenticated to true. Finally, we return the XML response ➏.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➍，我们判断 Nexpose 的 XML 响应是否包含成功属性值 1。如果是的话，在 ➎ 我们将 SessionID 属性赋值为响应中的 session-id，并将
    IsAuthenticated 设置为 true。最后，我们返回 XML 响应 ➏。
- en: The ExecuteCommand() Method
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: ExecuteCommand() 方法
- en: The ExecuteCommand() method shown in [Listing 6-5](#filepos469415) is the real
    meat of the NexposeSession class.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 6-5](#filepos469415) 中显示的 ExecuteCommand() 方法是 NexposeSession 类的核心。'
- en: public object ExecuteCommand(XDocument commandXml)
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public object ExecuteCommand(XDocument commandXml)
- en: '{'
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: string uri = string.Empty;
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: string uri = string.Empty;
- en: switch (this.➊APIVersion)
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: switch (this.➊APIVersion)
- en: '{'
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: 'case NexposeAPIVersion.v11:'
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'case NexposeAPIVersion.v11:'
- en: uri = "/api/1.1/xml";
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: uri = "/api/1.1/xml";
- en: break;
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: break;
- en: 'case NexposeAPIVersion.v12:'
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'case NexposeAPIVersion.v12:'
- en: uri = "/api/1.2/xml";
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: uri = "/api/1.2/xml";
- en: break;
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: break;
- en: 'default:'
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'default:'
- en: throw new Exception("Unknown API version.");
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: throw new Exception("未知的API版本。");
- en: '}'
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 6-5: The beginning of the  NexposeSession  class’s  ExecuteCommand()  method'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 清单6-5：NexposeSession类的ExecuteCommand()方法的开始部分
- en: Before we can send data to Nexpose, we need to know which version of the API
    to use, so at ➊ we use a switch/case block (similar to a series of if statements)
    to test the value of the APIVersion. A value of NexposeAPIVersion.v11 or NexposeAPIVersion.v12,
    for example, would tell us that we need to use the API URI for version 1.1 or
    1.2.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够向Nexpose发送数据之前，我们需要知道使用哪个版本的API，因此在➊处我们使用一个switch/case块（类似于一系列if语句）来测试APIVersion的值。例如，NexposeAPIVersion.v11或NexposeAPIVersion.v12的值将告诉我们需要使用版本1.1或1.2的API
    URI。
- en: Making the HTTP Request to the Nexpose API
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 向Nexpose API发出HTTP请求
- en: Having determined the URI to make the API request to, we can now send the XML
    request data to Nexpose, as shown in [Listing 6-6](#filepos471307).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定了要发送API请求的URI之后，我们现在可以将XML请求数据发送到Nexpose，如[清单6-6](#filepos471307)所示。
- en: byte[] byteArray = Encoding.ASCII.GetBytes(commandXml.ToString());
  id: totrans-97
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: byte[] byteArray = Encoding.ASCII.GetBytes(commandXml.ToString());
- en: ➊ HttpWebRequest request = WebRequest.Create("https://" + this.Host
  id: totrans-98
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ➊ HttpWebRequest request = WebRequest.Create("https://" + this.Host
- en: + ":" + this.Port.ToString() + uri) as HttpWebRequest;
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: + ":" + this.Port.ToString() + uri) as HttpWebRequest;
- en: request.Method = ➋"POST";
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: request.Method = ➋"POST";
- en: request.ContentType = ➌"text/xml";
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: request.ContentType = ➌"text/xml";
- en: request.ContentLength = byteArray.Length;
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: request.ContentLength = byteArray.Length;
- en: using (Stream dataStream = request.GetRequestStream())
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: using (Stream dataStream = request.GetRequestStream())
- en: 'dataStream.➍Write(byteArray, 0, byteArray.Length); Listing 6-6: Sending the
    XML command over HTTP for Nexpose inside  ExecuteCommand()'
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: dataStream.➍Write(byteArray, 0, byteArray.Length); 清单6-6：在ExecuteCommand()中通过HTTP发送XML命令给Nexpose
- en: Talking to the HTTP API for Nexpose happens in two parts. First, Nexpose makes
    the API request with the XML that will tell Nexpose what command we are running;
    then it reads the response with the results of the API request. To make the actual
    HTTP request to the Nexpose API, we create an HttpWebRequest ➊ and assign its
    Method property to POST ➋, its ContentType property to text/xml ➌, and the ContentLength
    property to the length of our XML. Next, we write the API XML command bytes to
    the HTTP request stream and send the stream to Nexpose with Write() ➍. Nexpose
    will parse the XML, determine what to do, and then return the results in the response.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 与Nexpose的HTTP API通信分为两个部分。首先，Nexpose使用XML发出API请求，XML会告诉Nexpose我们要执行的命令；然后，它读取API请求的响应结果。为了实际向Nexpose
    API发出HTTP请求，我们创建一个HttpWebRequest ➊并将其Method属性设置为POST ➋，ContentType属性设置为text/xml
    ➌，ContentLength属性设置为我们XML的长度。接下来，我们将API XML命令字节写入HTTP请求流，并通过Write() ➍方法将流发送到Nexpose。Nexpose将解析XML，确定要执行的操作，然后在响应中返回结果。
- en: TLS IN MONO
  id: totrans-106
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Mono中的TLS
- en: As of this writing, the state of TLS in Mono is in flux. Support for TLS v1.1
    and v1.2 has been written, but it is not currently shipped by default. Because
    of this, the HTTP library may fail to make HTTPS requests and only output a cryptic
    exception about authentication failing. If this happens, it is because Nexpose
    is only allowing a TLS v1.1 or v1.2 connection and Mono can only support v1.0\.
    To remedy this situation for testing purposes, you just need to add a line of
    code that will force Mono to proxy through Burp Suite, a tool we used in [Chapter
    2](index_split_007.html#filepos114239).
  id: totrans-107
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 截至本文写作时，Mono中的TLS状态仍在变化中。虽然TLS v1.1和v1.2的支持已编写完成，但目前默认并未启用。因此，HTTP库可能无法发出HTTPS请求，并且只会输出一条关于身份验证失败的模糊异常。如果发生这种情况，那是因为Nexpose只允许TLS
    v1.1或v1.2连接，而Mono只能支持v1.0。为了解决这个问题，您只需要添加一行代码，强制Mono通过Burp Suite代理进行测试，这是我们在[第2章](index_split_007.html#filepos114239)中使用的工具。
- en: To do this, we can change the code in [Listing 6-6](#filepos471307) to the following
    code in [Listing 6-7](#filepos473722).
  id: totrans-108
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们可以将[清单6-6](#filepos471307)中的代码修改为[清单6-7](#filepos473722)中的以下代码。
- en: request.Method = "POST";
  id: totrans-109
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: request.Method = "POST";
- en: request.Proxy = new ➊WebProxy("127.0.0.1:8080");
  id: totrans-110
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: request.Proxy = new ➊WebProxy("127.0.0.1:8080");
- en: 'request.ContentType = "text/xml"; Listing 6-7: Setting a proxy for TLS'
  id: totrans-111
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: request.ContentType = "text/xml"; 清单6-7：为TLS设置代理
- en: We add a line to set the Proxy property of the request so that it points to
    a listening Burp Suite proxy ➊. Burp Suite will happily negotiate a TLS v1.0 connection
    for our Mono client as well as a TLS v1.1/1.2 connection for the Nexpose server.
    When the TLS issues have been ironed out—hopefully in the near future—the code
    in this book should work across platforms without this hack.
  id: totrans-112
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们添加了一行代码来设置请求的代理属性，以便它指向一个正在监听的 Burp Suite 代理 ➊。Burp Suite 将愉快地为我们的 Mono 客户端协商一个
    TLS v1.0 连接，并为 Nexpose 服务器协商一个 TLS v1.1/1.2 连接。当 TLS 问题得到解决——希望是在不久的将来——本书中的代码应该可以跨平台工作，而不需要这种绕过方法。
- en: Reading the HTTP Response from the Nexpose API
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 读取来自 Nexpose API 的 HTTP 响应
- en: Next, we need to read the HTTP response from the API request we just made. [Listing
    6-8](#filepos476186) shows how we finish the ExecuteCommand() method by reading
    the HTTP response from Nexpose and then returning either an XDocument or an array
    of raw bytes, depending on the HTTP response content type. With [Listing 6-8](#filepos476186)
    finishing the ExecuteCommand() method, we will be able to make an API request
    and then return the correct response data, depending on the response content type.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要读取刚刚发出的 API 请求的 HTTP 响应。[第 6-8 节](#filepos476186) 展示了如何通过读取 Nexpose
    的 HTTP 响应来完成 ExecuteCommand() 方法，然后根据 HTTP 响应的内容类型返回 XDocument 或原始字节数组。在 [第 6-8
    节](#filepos476186) 完成 ExecuteCommand() 方法后，我们就能够发出 API 请求并根据响应的内容类型返回正确的响应数据。
- en: string response = string.Empty;
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: string response = string.Empty;
- en: using (HttpWebResponse r = request.➊GetResponse() as HttpWebResponse)
  id: totrans-116
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: using (HttpWebResponse r = request.➊GetResponse() as HttpWebResponse)
- en: '{'
  id: totrans-117
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: using (StreamReader reader = new ➋StreamReader(r.GetResponseStream()))
  id: totrans-118
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: using (StreamReader reader = new ➋StreamReader(r.GetResponseStream()))
- en: response = reader.➌ReadToEnd();
  id: totrans-119
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: response = reader.➌ReadToEnd();
- en: ''
  id: totrans-120
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: if (r.ContentType.Contains(➍"multipart/mixed"))
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: if (r.ContentType.Contains(➍"multipart/mixed"))
- en: '{'
  id: totrans-122
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: string[] splitResponse = response
  id: totrans-123
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: string[] splitResponse = response
- en: .Split(new string[] {➎"--AxB9sl3299asdjvbA"}, StringSplitOptions.None);
  id: totrans-124
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: .Split(new string[] {➎"--AxB9sl3299asdjvbA"}, StringSplitOptions.None);
- en: ''
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: splitResponse = splitResponse[2]
  id: totrans-126
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: splitResponse = splitResponse[2]
- en: .Split(new string[] { ➏"\r\n\r\n" }, StringSplitOptions.None);
  id: totrans-127
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: .Split(new string[] { ➏"\r\n\r\n" }, StringSplitOptions.None);
- en: ''
  id: totrans-128
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: string base64Data = splitResponse[1];
  id: totrans-129
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: string base64Data = splitResponse[1];
- en: ''
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return ➐Convert.FromBase64String(base64Data);
  id: totrans-131
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: return ➐Convert.FromBase64String(base64Data);
- en: '}'
  id: totrans-132
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-133
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: return XDocument.Parse(response);
  id: totrans-134
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: return XDocument.Parse(response);
- en: '}'
  id: totrans-135
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 6-8: The last part of the  NexposeSession  class’s  ExecuteCommand()  method'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 第 6-8 节：NexposeSession 类的 ExecuteCommand() 方法的最后部分
- en: Usually, when you send an XML command to Nexpose, you get XML in return. But
    when you request a vulnerability scan report, such as the PDF report we will request
    after performing a vulnerability scan, you get the HTTP response multipart/mixed
    rather than application/xml. Exactly why Nexpose changes the HTTP response based
    on PDF reports is not clear, but because our request may return a response with
    either a Base64-encoded report or an XDocument (the XML document class we first
    used in [Chapter 3](index_split_008.html#filepos243384)), we need to be able to
    handle both types of responses.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当你向 Nexpose 发送一个 XML 命令时，你会收到一个 XML 响应。但是当你请求一个漏洞扫描报告时，比如我们在执行漏洞扫描后请求的 PDF
    报告，你会收到 HTTP 响应 multipart/mixed 而不是 application/xml。Nexpose 为什么根据 PDF 报告更改 HTTP
    响应尚不明确，但因为我们的请求可能会返回一个包含 Base64 编码报告或 XDocument（我们在[第 3 章](index_split_008.html#filepos243384)
    中首次使用的 XML 文档类）的响应，我们需要能够处理这两种类型的响应。
- en: In order to begin reading the HTTP response from Nexpose, we call GetResponse()
    ➊ so that we can read the HTTP response stream; then we create a StreamReader
    ➋ to read the response data into a string ➌ and check its content type. If the
    response type is multipart/mixed ➍, we break the response into an array of strings
    so that we can parse the report data by leveraging the fact that Nexpose multipart/mixed
    responses always use the string --AxB9sl3299asdjvbA ➎ to separate the HTTP parameters
    in the HTTP response.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始读取来自 Nexpose 的 HTTP 响应，我们调用 GetResponse() ➊ 以便读取 HTTP 响应流；然后我们创建一个 StreamReader
    ➋ 来将响应数据读取到字符串 ➌ 中，并检查其内容类型。如果响应类型是 multipart/mixed ➍，我们将响应分解为一个字符串数组，以便利用 Nexpose
    的 multipart/mixed 响应总是使用字符串 --AxB9sl3299asdjvbA ➎ 来分隔 HTTP 响应中的参数这一特点来解析报告数据。
- en: After the HTTP response is split, the third element in the resulting string
    array will always contain the Base64-encoded report data from the scan. At ➏,
    we use two newline sequences (\r\n\r\n) to separate out this report data. Now
    we can reference only the Base64-encoded data, but first we must remove some invalid
    data from the end of the Base64-encoded report. Finally, we pass the Base64-encoded
    data to Convert.FromBase64String() ➐, which returns a byte array of the Base64-decoded
    data that can then be written to the filesystem as our final PDF report to read
    later.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTTP响应被拆分后，结果字符串数组中的第三个元素将始终包含来自扫描的Base64编码报告数据。在➏处，我们使用两个换行序列（\r\n\r\n）来分隔出报告数据。现在我们可以仅引用Base64编码的数据，但首先我们必须从Base64编码的报告末尾删除一些无效数据。最后，我们将Base64编码的数据传递给Convert.FromBase64String()➐，它返回一个Base64解码数据的字节数组，该数据可以被写入文件系统作为最终的PDF报告，供稍后阅读。
- en: Logging Out and Disposing of Our Session
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 注销并清理会话
- en: '[Listing 6-9](#filepos479870) shows the Logout() and Dispose() methods, which
    will make it easy for us to log out of our session and clean up any session data.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[第6-9节](#filepos479870)展示了Logout()和Dispose()方法，它们将使我们能够轻松地注销会话并清理会话数据。'
- en: public XDocument ➊Logout()
  id: totrans-142
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public XDocument ➊Logout()
- en: '{'
  id: totrans-143
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: XDocument cmd = new ➋XDocument(
  id: totrans-144
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument cmd = new ➋XDocument(
- en: new XElement(➌"LogoutRequest",
  id: totrans-145
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement(➌"LogoutRequest",
- en: new XAttribute(➍"session-id", this.SessionID)));
  id: totrans-146
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute(➍"session-id", this.SessionID)));
- en: ''
  id: totrans-147
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: XDocument doc = (XDocument)this.ExecuteCommand(cmd);
  id: totrans-148
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument doc = (XDocument)this.ExecuteCommand(cmd);
- en: this.➎IsAuthenticated = false;
  id: totrans-149
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: this.➎IsAuthenticated = false;
- en: this.SessionID = string.Empty;
  id: totrans-150
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: this.SessionID = string.Empty;
- en: ''
  id: totrans-151
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return doc;
  id: totrans-152
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: return doc;
- en: '}'
  id: totrans-153
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: ''
  id: totrans-154
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public void ➏Dispose()
  id: totrans-155
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public void ➏Dispose()
- en: '{'
  id: totrans-156
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: if (this.➐IsAuthenticated)
  id: totrans-157
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: if (this.➐IsAuthenticated)
- en: this.Logout();
  id: totrans-158
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: this.Logout();
- en: '}'
  id: totrans-159
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 6-9: The  NexposeSession  class’s  Dispose()  and  Logout()  methods'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 第6-9节：NexposeSession类的Dispose()和Logout()方法
- en: In Logout() ➊, we build an XDocument ➋ with the root node LogoutRequest ➌ and
    the attribute session-id ➍. When we send this information to Nexpose as XML, it
    will attempt to invalidate the session ID token, effectively logging us out. At
    the same time, we set IsAuthenticated ➎ to false and SessionID to string.Empty
    to clean up the old authentication information; then we return the logout response
    XML.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在Logout()方法➊中，我们构建了一个XDocument➋，其中根节点为LogoutRequest➌，并带有session-id属性➍。当我们将此信息作为XML发送给Nexpose时，它将尝试使会话ID令牌失效，从而有效地将我们注销。同时，我们将IsAuthenticated➎设置为false，并将SessionID设置为string.Empty以清理旧的身份验证信息；然后返回注销响应的XML。
- en: We’ll use the Dispose() method ➏ (required by the IDisposable interface) to
    clean up our Nexpose session. As you can see at ➐, we check whether we are authenticated
    and, if so, call Logout() to invalidate our session.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Dispose()方法➏（由IDisposable接口要求）来清理Nexpose会话。如你所见，在➐，我们检查是否已通过身份验证，如果是，则调用Logout()来使会话失效。
- en: Finding the API Version
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 查找API版本
- en: '[Listing 6-10](#filepos481845) shows how we’ll use NexposeAPIVersion to determine
    which Nexpose API version to use.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[第6-10节](#filepos481845)展示了我们如何使用NexposeAPIVersion来确定使用哪个Nexpose API版本。'
- en: public enum NexposeAPIVersion
  id: totrans-165
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public enum NexposeAPIVersion
- en: '{'
  id: totrans-166
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: v11,
  id: totrans-167
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: v11,
- en: v12
  id: totrans-168
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: v12
- en: '}'
  id: totrans-169
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 6-10: The  NexposeAPIVersion enum  used in the  NexposeSession  class'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 第6-10节：在NexposeSession类中使用的NexposeAPIVersion枚举
- en: The code enum NexposeAPIVersion gives us an easy way to determine which API
    URI to make HTTP requests to. We used NexposeAPIVersion in [Listing 6-5](#filepos469415)
    to do exactly this when building the API URI in ExecuteCommand().
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 代码枚举NexposeAPIVersion为我们提供了一种简单的方法来确定应该向哪个API URI发起HTTP请求。在[第6-5节](#filepos469415)中，我们正是通过NexposeAPIVersion来构建API
    URI并在ExecuteCommand()中使用它。
- en: Driving the Nexpose API
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 驱动Nexpose API
- en: '[Listing 6-11](#filepos483544) shows how we can now use NexposeSession to communicate
    with the Nexpose API and authenticate and print the SessionID. This is a good
    test to ensure the code we have written so far is working as expected.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '[第6-11节](#filepos483544)展示了我们如何使用NexposeSession与Nexpose API通信，进行身份验证并打印SessionID。这是一个很好的测试，可以确保我们迄今为止编写的代码按预期工作。'
- en: class MainClass
  id: totrans-174
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: class MainClass
- en: '{'
  id: totrans-175
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: public static void Main(string[] args)
  id: totrans-176
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public static void Main(string[] args)
- en: '{'
  id: totrans-177
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: using (NexposeSession session = new ➊NexposeSession("admin", "adm1n!", "192.168.2.171"))
  id: totrans-178
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用(NexposeSession session = new ➊NexposeSession("admin", "adm1n!", "192.168.2.171"))
- en: '{'
  id: totrans-179
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: Console.WriteLine(session.SessionID);
  id: totrans-180
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Console.WriteLine(session.SessionID);
- en: '}'
  id: totrans-181
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-182
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-183
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 6-11: Using  NexposeSession  to authenticate with the Nexpose API and
    print  SessionID'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 第6-11节：使用NexposeSession进行身份验证并打印SessionID
- en: At ➊, we attempt to authenticate by passing the username, password, and IP address
    of the Nexpose server to a new NexposeSession. If authentication succeeds, we
    display the SessionID assigned to the session onscreen. If authentication fails,
    we throw an exception with the message “Authentication failed.”
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，我们尝试通过将 Nexpose 服务器的用户名、密码和 IP 地址传递给一个新的 NexposeSession 来进行身份验证。如果身份验证成功，我们将在屏幕上显示分配给会话的
    SessionID。如果身份验证失败，我们抛出一个包含“身份验证失败”消息的异常。
- en: The NexposeManager Class
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: NexposeManager 类
- en: The NexposeManager class shown in [Listing 6-12](#filepos485964) allows us to
    create, monitor, and report on the result of our scans. We begin with a simple
    API call.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [Listing 6-12](#filepos485964) 所示的 NexposeManager 类允许我们创建、监视并报告扫描结果。我们从一个简单的
    API 调用开始。
- en: 'public class NexposeManager : ➊IDisposable'
  id: totrans-188
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'public class NexposeManager : ➊IDisposable'
- en: '{'
  id: totrans-189
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: private readonly NexposeSession _session;
  id: totrans-190
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: private readonly NexposeSession _session;
- en: public NexposeManager(➋NexposeSession session)
  id: totrans-191
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public NexposeManager(➋NexposeSession session)
- en: '{'
  id: totrans-192
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: if (!session.➌IsAuthenticated)
  id: totrans-193
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: if (!session.➌IsAuthenticated)
- en: throw new ➍ArgumentException("Trying to create manager from "
  id: totrans-194
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: throw new ➍ArgumentException("尝试从 "
- en: + "unauthenticated session. Please authenticate.", "session");
  id: totrans-195
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: + "未经身份验证的会话。请进行身份验证。", "session");
- en: ''
  id: totrans-196
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: _session = session;
  id: totrans-197
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: _session = session;
- en: '}'
  id: totrans-198
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: ''
  id: totrans-199
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public XDocument ➎GetSystemInformation()
  id: totrans-200
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public XDocument ➎GetSystemInformation()
- en: '{'
  id: totrans-201
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: XDocument xml = new XDocument(
  id: totrans-202
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument xml = new XDocument(
- en: new XElement("➏SystemInformationRequest",
  id: totrans-203
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement("➏SystemInformationRequest",
- en: new XAttribute("session-id", _session.SessionID)));
  id: totrans-204
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("session-id", _session.SessionID)));
- en: ''
  id: totrans-205
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ➐return (XDocument)_session.ExecuteCommand(xml);
  id: totrans-206
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ➐return (XDocument)_session.ExecuteCommand(xml);
- en: '}'
  id: totrans-207
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: public void ➑Dispose()
  id: totrans-208
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public void ➑Dispose()
- en: '{'
  id: totrans-209
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: _session.Logout();
  id: totrans-210
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: _session.Logout();
- en: '}'
  id: totrans-211
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-212
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 6-12: The  NexposeManager  class with a  GetSystemInformation()  method'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 6-12：带有 GetSystemInformation() 方法的 NexposeManager 类
- en: Because NexposeManager implements IDisposable ➊, we write a Dispose() method
    ➑ by declaring the _session to hold the NexposeSession class that NexposeManager
    will consume, and we pass in NexposeSession ➋ as the only argument. If the Nexpose
    session authenticates ➌, we assign _session to the session. If not, we throw an
    exception ➍.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 NexposeManager 实现了 IDisposable ➊，我们通过声明 _session 来编写 Dispose() 方法，_session
    保存 NexposeManager 将使用的 NexposeSession 类，并将 NexposeSession ➋ 作为唯一参数传递。如果 Nexpose
    会话身份验证成功 ➌，我们将 _session 赋值为 session。如果不成功，我们抛出一个异常 ➍。
- en: To test the manager class initially, we’ll implement a short and simple API
    method for retrieving some general system information about the Nexpose console.
    The GetSystemInformation() method ➎ makes a simple SystemInformationRequest API
    request ➏ and then returns the response ➐.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最初测试管理器类，我们将实现一个简短而简单的 API 方法，用于检索 Nexpose 控制台的一些基本系统信息。GetSystemInformation()
    方法 ➎ 发出一个简单的 SystemInformationRequest API 请求 ➏，然后返回响应 ➐。
- en: In order to print the Nexpose system information (including versioning information,
    such as the PostgreSQL and Java versions in use, and hardware information, such
    as the CPU count and RAM available), we add NexposeManager to our Main() method
    from [Listing 6-11](#filepos483544), as shown in [Listing 6-13](#filepos488327).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 为了打印 Nexpose 系统信息（包括版本信息，例如正在使用的 PostgreSQL 和 Java 版本，以及硬件信息，例如 CPU 数量和可用内存），我们将
    NexposeManager 添加到我们的 Main() 方法中，参考 [Listing 6-11](#filepos483544)，如 [Listing
    6-13](#filepos488327) 所示。
- en: public static void Main(string[] args)
  id: totrans-217
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public static void Main(string[] args)
- en: '{'
  id: totrans-218
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: using (NexposeSession session = new NexposeSession("admin", "Passw0rd!", "192.168.2.171"))
  id: totrans-219
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: using (NexposeSession session = new NexposeSession("admin", "Passw0rd!", "192.168.2.171"))
- en: '{'
  id: totrans-220
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: using (NexposeManager manager = new ➊NexposeManager(session))
  id: totrans-221
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: using (NexposeManager manager = new ➊NexposeManager(session))
- en: '{'
  id: totrans-222
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: Console.WriteLine(manager.➋GetSystemInformation().ToString());
  id: totrans-223
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Console.WriteLine(manager.➋GetSystemInformation().ToString());
- en: '}'
  id: totrans-224
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-225
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-226
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 6-13: Using the  NexposeManager  class in the  Main()  method'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 6-13：在 Main() 方法中使用 NexposeManager 类
- en: We pass our NexposeSession class into the NexposeManager constructor ➊ and then
    call GetSystemInformation() ➋ to print the system information, as shown in [Figure
    6-4](#filepos489097).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 NexposeSession 类传递给 NexposeManager 构造函数 ➊，然后调用 GetSystemInformation() ➋
    来打印系统信息，如 [图 6-4](#filepos489097) 所示。
- en: '![](images/00022.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00022.jpg)'
- en: 'Figure 6-4: Getting the Nexpose system information via the API'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6-4：通过 API 获取 Nexpose 系统信息
- en: Automating a Vulnerability Scan
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化漏洞扫描
- en: In this section, we finally look at how to automate a vulnerability scan with
    Nexpose. We create a Nexpose site, scan the site, and then download a report of
    the findings. We’ll only scratch the surface of Nexpose’s powerful scanning features.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们最后看一下如何使用 Nexpose 自动化漏洞扫描。我们创建一个 Nexpose 站点，扫描该站点，然后下载扫描结果报告。我们仅触及 Nexpose
    强大扫描功能的表面。
- en: Creating a Site with Assets
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 创建带资产的网站
- en: Before launching a scan with Nexpose, we need to create a site to be scanned.
    [Listing 6-14](#filepos491843) shows how we can build the XML API request for
    creating a site in the CreateOrUpdateSite() method.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动Nexpose扫描之前，我们需要创建一个要扫描的网站。[列表 6-14](#filepos491843) 显示了我们如何在CreateOrUpdateSite()方法中构建创建网站的XML
    API请求。
- en: public XDocument ➊CreateOrUpdateSite(string name, string[] hostnames = null,
  id: totrans-235
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public XDocument ➊CreateOrUpdateSite(string name, string[] hostnames = null,
- en: string[][] ips = null, int siteID = ➋-1)
  id: totrans-236
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: string[][] ips = null, int siteID = ➋-1)
- en: '{'
  id: totrans-237
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: XElement hosts = new ➌XElement("Hosts");
  id: totrans-238
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XElement hosts = new ➌XElement("Hosts");
- en: if (➍hostnames != null)
  id: totrans-239
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: if (➍hostnames != null)
- en: '{'
  id: totrans-240
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: foreach (string host in hostnames)
  id: totrans-241
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: foreach (string host in hostnames)
- en: hosts.Add(new XElement("host", host));
  id: totrans-242
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: hosts.Add(new XElement("host", host));
- en: '}'
  id: totrans-243
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: ''
  id: totrans-244
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: if (➎ips != null)
  id: totrans-245
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: if (➎ips != null)
- en: '{'
  id: totrans-246
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: foreach (string[] range in ips)
  id: totrans-247
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: foreach (string[] range in ips)
- en: '{'
  id: totrans-248
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: hosts.Add(new XElement ("range",
  id: totrans-249
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: hosts.Add(new XElement ("range",
- en: new XAttribute("from", range[0]),
  id: totrans-250
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("from", range[0]),
- en: new XAttribute("to", range[1])));
  id: totrans-251
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("to", range[1])));
- en: '}'
  id: totrans-252
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-253
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: ''
  id: totrans-254
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: XDocument xml = ➏new XDocument(
  id: totrans-255
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument xml = ➏new XDocument(
- en: new XElement("SiteSaveRequest",
  id: totrans-256
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement("SiteSaveRequest",
- en: new XAttribute("session-id", _session.SessionID),
  id: totrans-257
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("session-id", _session.SessionID),
- en: new XElement("Site",
  id: totrans-258
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement("Site",
- en: new XAttribute("id", siteID),
  id: totrans-259
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("id", siteID),
- en: new XAttribute("name", name),
  id: totrans-260
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("name", name),
- en: ➐hosts,
  id: totrans-261
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ➐hosts,
- en: new XElement("ScanConfig",
  id: totrans-262
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement("ScanConfig",
- en: new XAttribute("name", "Full audit"),
  id: totrans-263
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("name", "Full audit"),
- en: new XAttribute(➑"templateID", "full-audit")))));
  id: totrans-264
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute(➑"templateID", "full-audit")))));
- en: ''
  id: totrans-265
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return (XDocument)_session.➒ExecuteCommand(xml);
  id: totrans-266
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: return (XDocument)_session.➒ExecuteCommand(xml);
- en: '}'
  id: totrans-267
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 6-14: The  CreateOrUpdateSite()  method in the  NexposeManager  class'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 6-14：NexposeManager类中的CreateOrUpdateSite()方法
- en: 'The CreateOrUpdateSite() method ➊ takes up to four arguments: the human-readable
    site name, any hostnames and IP ranges, and the site ID. Passing -1 ➋ as the site
    ID, as shown here, creates a new site. At ➌, we create an XML element called Hosts,
    and if there is a hostnames argument that is not null ➍, we add it to Hosts. We
    do the same for any IP ranges ➎ passed as arguments.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: CreateOrUpdateSite()方法➊最多接受四个参数：可读的人类网站名称、任何主机名和IP范围以及网站ID。传递-1➋作为网站ID，如此所示，创建一个新的网站。在➌，我们创建了一个名为Hosts的XML元素，如果hostnames参数不为null➍，我们将其添加到Hosts中。我们对传递的任何IP范围➎做同样的处理。
- en: Next, we create an XDocument ➏ with the root XML node SiteSaveRequest and a
    session-id attribute to tell the Nexpose server that we’re authenticated and can
    make this API call. Inside the root node, we create an XElement called Site to
    hold specific information for the new site and scan configuration details, such
    as the hosts to scan ➐ and the scan template ID ➑. At ➒, we pass SiteSaveRequest
    to ExecuteCommand() and cast the object that ExecuteCommand() returns to an XDocument.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个XDocument ➏，其中根XML节点为SiteSaveRequest，并包含一个session-id属性，用于告诉Nexpose服务器我们已经通过身份验证并可以进行此API调用。在根节点内，我们创建一个名为Site的XElement来保存新网站的具体信息和扫描配置详情，如要扫描的主机➐和扫描模板ID➑。在➒时，我们将SiteSaveRequest传递给ExecuteCommand()，并将ExecuteCommand()返回的对象强制转换为XDocument。
- en: Starting a Scan
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 开始扫描
- en: '[Listing 6-15](#filepos495163) shows how to begin the site scan and get its
    status with the ScanSite() and GetScanStatus() methods. Hopefully you’re beginning
    to see how easy it can be to implement new API functionality in the Manager class
    when the NexposeSession class does all the communication and all you have to do
    is set up the API request XML.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 6-15](#filepos495163) 显示了如何使用ScanSite()和GetScanStatus()方法开始网站扫描并获取其状态。希望你能开始看到，当NexposeSession类处理所有通信，而你只需要设置API请求的XML时，在Manager类中实现新的API功能是多么容易。'
- en: public XDocument ➊ScanSite(int ➋siteID)
  id: totrans-273
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public XDocument ➊ScanSite(int ➋siteID)
- en: '{'
  id: totrans-274
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: XDocument xml = ➌new XDocument(
  id: totrans-275
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument xml = ➌new XDocument(
- en: new XElement(➍"SiteScanRequest",
  id: totrans-276
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement(➍"SiteScanRequest",
- en: new XAttribute("session-id", _session.SessionID),
  id: totrans-277
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("session-id", _session.SessionID),
- en: new XAttribute("site-id", siteID)));
  id: totrans-278
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("site-id", siteID)));
- en: return (XDocument)_session.ExecuteCommand(xml);
  id: totrans-279
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: return (XDocument)_session.ExecuteCommand(xml);
- en: '}'
  id: totrans-280
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: ''
  id: totrans-281
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public XDocument ➎GetScanStatus(int scanID)
  id: totrans-282
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public XDocument ➎GetScanStatus(int scanID)
- en: '{'
  id: totrans-283
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: XDocument xml = ➏new XDocument(
  id: totrans-284
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument xml = ➏new XDocument(
- en: new XElement("ScanStatusRequest",
  id: totrans-285
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement("ScanStatusRequest",
- en: new XAttribute("session-id", _session.SessionID),
  id: totrans-286
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("session-id", _session.SessionID),
- en: new XAttribute("scan-id", scanID)));
  id: totrans-287
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("scan-id", scanID)));
- en: ''
  id: totrans-288
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return (XDocument)_session.ExecuteCommand (xml);
  id: totrans-289
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: return (XDocument)_session.ExecuteCommand (xml);
- en: '}'
  id: totrans-290
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 6-15: The  ScanSite()  and  GetScanStatus()  methods in the  NexposeManager  class'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 6-15：NexposeManager类中的ScanSite()和GetScanStatus()方法
- en: The ScanSite() method ➊ takes the siteID ➋ as an argument to scan. We create
    an XDocument ➌ with root node SiteScanRequest ➍ and then add to it the session-id
    and site-id attributes. Next, we send the SiteScanRequest XML to the Nexpose server
    and return the response.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: ScanSite() 方法 ➊ 接受 siteID ➋ 作为扫描参数。我们创建一个 XDocument ➌，根节点为 SiteScanRequest ➍，然后为其添加
    session-id 和 site-id 属性。接着，我们将 SiteScanRequest XML 发送到 Nexpose 服务器并返回响应。
- en: The GetScanStatus() method ➎ accepts one argument, the scan ID to check, which
    is returned by the ScanSite() method. After creating a new XDocument ➏ with root
    node ScanStatusRequest and adding the session-id and scan-id attributes, we send
    the resulting XDocument to the Nexpose server and return the response to the caller.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: GetScanStatus() 方法 ➎ 接受一个参数，检查扫描 ID，这是 ScanSite() 方法返回的。创建一个新的 XDocument ➏，根节点为
    ScanStatusRequest，添加 session-id 和 scan-id 属性后，我们将生成的 XDocument 发送到 Nexpose 服务器，并将响应返回给调用者。
- en: Creating a PDF Site Report and Deleting the Site
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 PDF 站点报告并删除站点
- en: '[Listing 6-16](#filepos498467) shows how we create the scan report and delete
    the site using the API in the GetPdfSiteReport() and DeleteSite() methods.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 6-16](#filepos498467) 显示了我们如何使用 GetPdfSiteReport() 和 DeleteSite()
    方法通过 API 创建扫描报告并删除站点。'
- en: public byte[] GetPdfSiteReport(int siteID)
  id: totrans-296
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public byte[] GetPdfSiteReport(int siteID)
- en: '{'
  id: totrans-297
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: XDocument doc = new XDocument(
  id: totrans-298
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument doc = new XDocument(
- en: new XElement(➊"ReportAdhocGenerateRequest",
  id: totrans-299
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement(➊"ReportAdhocGenerateRequest",
- en: new XAttribute("session-id", _session.SessionID),
  id: totrans-300
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("session-id", _session.SessionID),
- en: new XElement("AdhocReportConfig",
  id: totrans-301
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement("AdhocReportConfig",
- en: new XAttribute("template-id", "audit-report"),
  id: totrans-302
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("template-id", "audit-report"),
- en: new XAttribute("format", ➋"pdf"),
  id: totrans-303
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("format", ➋"pdf"),
- en: new XElement("Filters",
  id: totrans-304
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement("Filters",
- en: new XElement("filter",
  id: totrans-305
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement("filter",
- en: new XAttribute("type", "site"),
  id: totrans-306
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("type", "site"),
- en: new XAttribute("id", ➌siteID))))));
  id: totrans-307
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("id", ➌siteID))))));
- en: ''
  id: totrans-308
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return (➍byte[])_session.ExecuteCommand(doc);
  id: totrans-309
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: return (➍byte[])_session.ExecuteCommand(doc);
- en: '}'
  id: totrans-310
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: ''
  id: totrans-311
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public XDocument ➎DeleteSite(int siteID)
  id: totrans-312
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public XDocument ➎DeleteSite(int siteID)
- en: '{'
  id: totrans-313
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: XDocument xml = new XDocument(
  id: totrans-314
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument xml = new XDocument(
- en: new XElement(➏"SiteDeleteRequest",
  id: totrans-315
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement(➏"SiteDeleteRequest",
- en: new XAttribute("session-id", _session.SessionID),
  id: totrans-316
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("session-id", _session.SessionID),
- en: new XAttribute("site-id", siteID)));
  id: totrans-317
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("site-id", siteID)));
- en: ➐ return (XDocument)_session.ExecuteCommand(xml);
  id: totrans-318
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ➐ return (XDocument)_session.ExecuteCommand(xml);
- en: '}'
  id: totrans-319
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 6-16: The  GetPdfSiteReport()  and  DeleteSite()  methods in the  NexposeManager  class'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 6-16：NexposeManager 类中的 GetPdfSiteReport() 和 DeleteSite() 方法
- en: Both methods take only one argument, the site ID. To generate a PDF report,
    we use ReportAdHocGenerateRequest ➊ and specify pdf ➋ and the siteID ➌. We cast
    the object returned by ExecuteCommand() to a byte array ➍ instead of an XDocument
    because Nexpose will return a multipart/mixed HTTP response for a ReportAdHocGenerateRequest.
    We return the raw bytes of the PDF report to be written to the calling method.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 两个方法都只接受一个参数，即站点 ID。为了生成 PDF 报告，我们使用 ReportAdHocGenerateRequest ➊ 并指定 pdf ➋
    和 siteID ➌。我们将 ExecuteCommand() 返回的对象转换为字节数组 ➍，而不是 XDocument，因为 Nexpose 会为 ReportAdHocGenerateRequest
    返回一个 multipart/mixed 的 HTTP 响应。我们返回 PDF 报告的原始字节流，供调用方法使用。
- en: We use DeleteSite() ➎ to delete the site and create a SiteDeleteRequest XDocument
    ➏ and then make the API call and return the results ➐.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 DeleteSite() ➎ 删除站点，创建一个 SiteDeleteRequest XDocument ➏，然后调用 API 并返回结果 ➐。
- en: Putting It All Together
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 综合起来
- en: Now that you know how to drive Nexpose programmatically, let’s create a new
    Nexpose site, scan it, create a PDF report of its vulnerabilities, and delete
    the site. [Listing 6-17](#filepos501086) begins this process by creating a new
    site and retrieving its ID with our two new classes.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何通过编程操作 Nexpose，接下来让我们创建一个新的 Nexpose 站点，扫描它，生成其漏洞的 PDF 报告，并删除该站点。[Listing
    6-17](#filepos501086) 通过创建一个新站点并通过我们两个新类获取其 ID 来开始这一过程。
- en: public static void Main(string[] args)
  id: totrans-325
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public static void Main(string[] args)
- en: '{'
  id: totrans-326
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: using (NexposeSession session = new ➊NexposeSession("admin", "adm1n!", "192.168.2.171"))
  id: totrans-327
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: using (NexposeSession session = new ➊NexposeSession("admin", "adm1n!", "192.168.2.171"))
- en: '{'
  id: totrans-328
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: using (NexposeManager manager = new ➋NexposeManager(session))
  id: totrans-329
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: using (NexposeManager manager = new ➋NexposeManager(session))
- en: '{'
  id: totrans-330
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: ➌string[][] ips =
  id: totrans-331
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ➌string[][] ips =
- en: '{'
  id: totrans-332
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: new string[] { "192.168.2.169", ➍string.Empty }
  id: totrans-333
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new string[] { "192.168.2.169", ➍string.Empty }
- en: '};'
  id: totrans-334
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '};'
- en: ''
  id: totrans-335
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: XDocument site = manager.➎CreateOrUpdateSite(➏Guid.NewGuid().ToString(), null,
    ips);
  id: totrans-336
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument site = manager.➎CreateOrUpdateSite(➏Guid.NewGuid().ToString(), null,
    ips);
- en: ''
  id: totrans-337
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'int siteID = int.Parse(site.Root.Attribute("site-id").Value); Listing 6-17:
    Creating the temporary site and retrieving the site ID'
  id: totrans-338
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: int siteID = int.Parse(site.Root.Attribute("site-id").Value); Listing 6-17：创建临时站点并获取站点
    ID
- en: After creating the NexposeSession ➊ and NexposeManager ➋ objects, we pass in
    the list of IP addresses to scan as a string ➌, with a starting and ending address.
    To scan a single IP, use an empty string as the second element, as shown at ➍.
    We pass the list of target IPs to CreateOrUpdateSite() ➎ along with a Guid ➏ as
    the name of the temporary site. (We simply need a unique string for the site name.)
    When we receive the HTTP response from Nexpose for creating the temporary site,
    we grab the site ID from the XML and store it.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 NexposeSession ➊ 和 NexposeManager ➋ 对象之后，我们将要扫描的 IP 地址列表作为字符串 ➌ 传入，包含起始地址和结束地址。要扫描单个
    IP，请使用空字符串作为第二个元素，如 ➍ 所示。我们将目标 IP 列表与一个 Guid ➏ 作为临时站点名称一起传递给 CreateOrUpdateSite()
    ➎。（我们只需要一个唯一的字符串作为站点名称。）当我们收到来自 Nexpose 创建临时站点的 HTTP 响应时，我们从 XML 中提取站点 ID 并存储它。
- en: Starting the Scan
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 启动扫描
- en: '[Listing 6-18](#filepos503026) shows how we run and monitor the vulnerability
    scan by basically sitting in a while loop and sleeping until the scan is finished.'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 6-18](#filepos503026) 展示了如何通过基本上保持在一个 while 循环中并等待扫描完成来运行和监控漏洞扫描。'
- en: XDocument scan = manager.➊ScanSite(siteID);
  id: totrans-342
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument scan = manager.➊ScanSite(siteID);
- en: XElement ele = scan.XPathSelectElement("//SiteScanResponse/Scan");
  id: totrans-343
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XElement ele = scan.XPathSelectElement("//SiteScanResponse/Scan");
- en: ''
  id: totrans-344
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: int scanID = int.Parse(ele.Attribute("scan-id").Value);
  id: totrans-345
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: int scanID = int.Parse(ele.Attribute("scan-id").Value);
- en: XDocument status = manager.➋GetScanStatus(scanID);
  id: totrans-346
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument status = manager.➋GetScanStatus(scanID);
- en: ''
  id: totrans-347
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: while (status.Root.Attribute("status").Value != ➌"finished")
  id: totrans-348
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: while (status.Root.Attribute("status").Value != ➌"finished")
- en: '{'
  id: totrans-349
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: Thread.Sleep(1000);
  id: totrans-350
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Thread.Sleep(1000);
- en: status = manager.GetScanStatus(scanID);
  id: totrans-351
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: status = manager.GetScanStatus(scanID);
- en: 'Console.➍WriteLine(DateTime.Now.ToLongTimeString()+": "+status.ToString());'
  id: totrans-352
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'Console.➍WriteLine(DateTime.Now.ToLongTimeString()+": "+status.ToString());'
- en: '}'
  id: totrans-353
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 6-18: Starting and monitoring the Nexpose scan'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 6-18：启动和监控 Nexpose 扫描
- en: We begin the scan by passing the site ID to ScanSite() ➊ and then grab the scan
    ID from the response and pass it to GetScanStatus() ➋. Next, in a while loop,
    we sleep for a few seconds, as long as the scan status is not finished ➌. Then
    we check the scan status again and display a status message to the user with WriteLine()
    ➍.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将站点 ID 传递给 ScanSite() ➊ 来开始扫描，然后从响应中获取扫描 ID，并将其传递给 GetScanStatus() ➋。接下来，在一个
    while 循环中，我们每隔几秒钟检查一次扫描状态，只要扫描状态还没有完成 ➌。然后，我们再次检查扫描状态，并使用 WriteLine() ➍ 向用户显示状态消息。
- en: Generating a Report and Deleting the Site
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 生成报告并删除站点
- en: Once the scan finishes, we can generate a report and delete the site, as shown
    in [listing 6-19](#filepos504525).
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦扫描完成，我们就可以生成报告并删除站点，如 [清单 6-19](#filepos504525) 所示。
- en: byte[] report = manager.➊GetPdfSiteReport(siteID);
  id: totrans-358
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: byte[] report = manager.➊GetPdfSiteReport(siteID);
- en: string outdir = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
  id: totrans-359
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: string outdir = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
- en: string outpath = Path.Combine(outdir, ➋siteID + ".pdf");
  id: totrans-360
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: string outpath = Path.Combine(outdir, ➋siteID + ".pdf");
- en: File.➌WriteAllBytes(outpath, report);
  id: totrans-361
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: File.➌WriteAllBytes(outpath, report);
- en: ''
  id: totrans-362
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: manager.➍DeleteSite(siteID);
  id: totrans-363
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: manager.➍DeleteSite(siteID);
- en: '}'
  id: totrans-364
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-365
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-366
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 6-19: Retrieving the Nexpose site report, writing it to the filesystem,
    and then deleting the site'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 6-19：检索 Nexpose 网站报告，将其写入文件系统，然后删除该网站
- en: To generate a report, we pass the site ID to GetPdfSiteReport() ➊, which returns
    an array of bytes. Then we use WriteAllBytes() ➌ to save the PDF report to the
    user’s Desktop directory with the site’s ID as the filename ➋ and a .pdf extension.
    Then we delete the site with DeleteSite() ➍.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成报告，我们将站点 ID 传递给 GetPdfSiteReport() ➊，它返回一个字节数组。然后，我们使用 WriteAllBytes() ➌
    将 PDF 报告保存在用户的桌面目录中，文件名为站点的 ID ➋ 并加上 .pdf 后缀。然后我们使用 DeleteSite() ➍ 删除该站点。
- en: Running the Automation
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 运行自动化
- en: '[Listing 6-20](#filepos506888) shows how to run a scan and view its report.'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 6-20](#filepos506888) 展示了如何运行扫描并查看其报告。'
- en: C:\Users\example\Documents\ch6\bin\Debug>.\06_automating_nexpose.exe
  id: totrans-371
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: C:\Users\example\Documents\ch6\bin\Debug>.\06_automating_nexpose.exe
- en: '11:42:24 PM: <ScanStatusResponse success="1" scan-id="4" engine-id="3" status=➊"running"
    />'
  id: totrans-372
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '11:42:24 PM: <ScanStatusResponse success="1" scan-id="4" engine-id="3" status=➊"running"
    />'
- en: –-snip--
  id: totrans-373
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: --snip--
- en: '11:47:01 PM: <ScanStatusResponse success="1" scan-id="4" engine-id="3" status="running"
    />'
  id: totrans-374
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '11:47:01 PM: <ScanStatusResponse success="1" scan-id="4" engine-id="3" status="running"
    />'
- en: '11:47:08 PM: <ScanStatusResponse success="1" scan-id="4" engine-id="3" status=➋"integrating"
    />'
  id: totrans-375
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '11:47:08 PM: <ScanStatusResponse success="1" scan-id="4" engine-id="3" status=➋"integrating"
    />'
- en: '11:47:15 PM: <ScanStatusResponse success="1" scan-id="4" engine-id="3" status=➌"finished"
    />'
  id: totrans-376
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '11:47:15 PM: <ScanStatusResponse success="1" scan-id="4" engine-id="3" status=➌"finished"
    />'
- en: ''
  id: totrans-377
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: C:\Users\example\Documents\ch6\bin\Debug>dir \Users\example\Desktop\*.pdf
  id: totrans-378
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: C:\Users\example\Documents\ch6\bin\Debug>dir \Users\example\Desktop\*.pdf
- en: Volume in drive C is Acer
  id: totrans-379
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: C 盘的卷为 Acer
- en: Volume Serial Number is 5619-09A2
  id: totrans-380
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 卷序列号是 5619-09A2
- en: ''
  id: totrans-381
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Directory of C:\Users\example\Desktop
  id: totrans-382
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 目录 C:\Users\example\Desktop
- en: ''
  id: totrans-383
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 07/30/2017 11:47 PM 103,174 4.pdf ➍
  id: totrans-384
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 07/30/2017 11:47 PM 103,174 4.pdf ➍
- en: 09/09/2015 09:52 PM 17,152,368 Automate the Boring Stuff with Python.pdf
  id: totrans-385
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 09/09/2015 09:52 PM 17,152,368 Automate the Boring Stuff with Python.pdf
- en: 2 File(s) 17,255,542 bytes
  id: totrans-386
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 2 个文件 17,255,542 字节
- en: 0 Dir(s) 362,552,098,816 bytes free
  id: totrans-387
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 0 个目录 362,552,098,816 字节可用
- en: ''
  id: totrans-388
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'C:\Users\example\Documents\ch6\bin\Debug> Listing 6-20: Running the scan and
    writing the report to the user’s Desktop'
  id: totrans-389
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: C:\Users\example\Documents\ch6\bin\Debug> 示例 6-20：运行扫描并将报告写入用户的桌面
- en: 'Notice in the output of [Listing 6-20](#filepos506888) that Nexpose is returning
    at least three scan statuses, which are separate phases of the scan: running ➊,
    integrating ➋, and finished ➌. Once the scan finishes, our PDF report is written
    to the user’s Desktop ➍, as expected. You can open this new report with your favorite
    PDF reader and see what kind of vulnerabilities Nexpose may have found.'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在[示例 6-20](#filepos506888)的输出中，Nexpose 至少返回了三种扫描状态，它们是扫描的不同阶段：运行中 ➊、集成中
    ➋ 和完成 ➌。扫描完成后，我们的 PDF 报告将写入用户的桌面 ➍，如预期的那样。你可以用你喜欢的 PDF 阅读器打开这份新报告，看看 Nexpose 可能发现了哪些漏洞。
- en: Conclusion
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter, you learned how to drive the vulnerability scanner Nexpose
    to report on vulnerabilities for a given host on a network. You also learned how
    Nexpose stores information about computers on the network, such as sites and assets.
    You built a few classes to drive Nexpose programmatically using the base C# libraries,
    and you learned how to use NexposeSession to authenticate with Nexpose and send
    and receive XML to the Nexpose API. You also saw how the NexposeManager class
    wraps functionality in the API, including the ability to create and delete sites.
    Finally, you were able to drive Nexpose to scan a network asset and then create
    a nice-looking PDF report displaying the results.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用漏洞扫描器 Nexpose 来报告网络上给定主机的漏洞。你还了解了 Nexpose 如何存储关于网络中计算机的信息，例如站点和资产。你构建了一些类，以便使用基础的
    C# 库通过编程方式驱动 Nexpose，并学习了如何使用 NexposeSession 进行身份验证，向 Nexpose 发送和接收 XML 数据。你还看到了
    NexposeManager 类如何封装 API 中的功能，包括创建和删除站点的能力。最后，你能够驱动 Nexpose 扫描网络资产，然后创建一个漂亮的 PDF
    报告，展示扫描结果。
- en: Nexpose has capabilities far beyond simple vulnerability management. Expanding
    your library to cover this advanced functionality should be relatively straightforward
    and is an excellent way to familiarize yourself with the other powerful features
    Nexpose provides, such as custom scan policies, authenticated vulnerability scans,
    and more customizable reporting. An advanced, modern, mature enterprise network
    requires granular system controls that allow an organization to integrate security
    into business workflows. Nexpose brings all of this to the table and is a powerful
    tool to have in your arsenal as an IT manager or system admin.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: Nexpose 的功能远远超出了简单的漏洞管理。扩展你的库以覆盖这些高级功能应该相对简单，并且是一个熟悉 Nexpose 提供的其他强大功能的绝佳方式，例如自定义扫描策略、认证漏洞扫描和更多可定制的报告。一个先进、现代、成熟的企业网络需要细粒度的系统控制，使组织能够将安全集成到业务工作流中。Nexpose
    提供了这一切，是作为 IT 管理员或系统管理员必备的强大工具。
