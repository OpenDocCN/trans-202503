- en: '**2**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2**'
- en: '**OBJECTIVE-C FOR THE LAZY**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**懒人版 Objective-C**'
- en: Objective-C has been met with both derision and adulation during its illustrious
    career. Brought to popularity by NeXTStep and inspired by the design of Smalltalk,
    Objective-C is a superset of C. Its most notable characteristics are the use of
    infix notation and absurdly long class names. People tend to either love it or
    hate it. People who hate it are wrong.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Objective-C 在其辉煌的历程中既遭遇过嘲笑也获得过赞誉。它通过 NeXTStep 获得了流行，并且受 Smalltalk 设计的启发，Objective-C
    是 C 的超集。它最显著的特点是使用中缀表示法和极其冗长的类名。人们往往要么爱它，要么恨它。那些恨它的人是错的。
- en: 'In this chapter, I’ll go over the basics of Objective-C, assuming that you’re
    already familiar with programming in some language or another. Know, however,
    that Cocoa and Objective-C are constantly changing. I can’t cover all of their
    finer details adequately in a single chapter, but I do include some hints here
    to help nondevelopers get their bearings when examining Objective-C code. If you’re
    starting from very little programming knowledge, you may wish to check out a book
    like Knaster, Malik, and Dalrymple’s *Learn Objective-C on the Mac: For OS X and
    iOS* (Apress, 2012) before you dig in.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '在本章中，我将介绍 Objective-C 的基础知识，假设你已经熟悉某种语言的编程。然而，需要注意的是，Cocoa 和 Objective-C 在不断变化。我无法在一章中充分覆盖它们的所有细节，但我会提供一些提示，帮助非开发者在查看
    Objective-C 代码时能够定位方向。如果你从很少的编程知识开始，可能希望先阅读一本像 Knaster、Malik 和 Dalrymple 合著的 *Learn
    Objective-C on the Mac: For OS X and iOS*（Apress, 2012）一书，然后再深入学习。'
- en: As much as I’d like to stick with the most modern coding patterns of Objective-C,
    if you’re auditing existing code, you may come across plenty of crusty, reused
    code from the early days of iOS. So just in case, I’ll go over both historical
    Objective-C constructs and the newly sanctioned versions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我很想坚持使用最现代的 Objective-C 编码模式，但如果你在审核现有代码时，可能会遇到大量来自 iOS 初期的陈旧、重复使用的代码。所以为了以防万一，我会讲解一些历史上使用的
    Objective-C 构造以及现在被认可的版本。
- en: '**Key iOS Programming Terminology**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**关键的 iOS 编程术语**'
- en: There are a few terms you’ll want to be familiar with to understand where Apple’s
    various APIs come from. *Cocoa* is the general term for the frameworks and APIs
    that are used in Objective-C GUI programming. *Cocoa Touch* is a superset of Cocoa,
    with some added mobile-related APIs such as dealing with gestures and mobile GUI
    elements. *Foundation* classes are Objective-C classes that make up much of what
    we call the Cocoa API. *Core Foundation* is a lower-level C-based library upon
    which many Foundation classes are based, usually prefixed with `CF` instead of
    `NS`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些术语你需要熟悉，以便理解 Apple 各种 API 的来源。*Cocoa* 是指在 Objective-C GUI 编程中使用的框架和 API 的总称。*Cocoa
    Touch* 是 Cocoa 的超集，包含一些与移动相关的 API，如处理手势和移动 GUI 元素。*Foundation* 类是构成我们所说的 Cocoa
    API 的大量 Objective-C 类。*Core Foundation* 是一个更底层的基于 C 的库，许多 Foundation 类都是基于它的，通常以
    `CF` 而不是 `NS` 为前缀。
- en: '**Passing Messages**'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**传递消息**'
- en: The first key to grokking Objective-C is understanding that the language is
    designed around the concept of *message passing*, rather than *calling*. It’s
    useful (for me, anyway) to think of Objective-C as a language where objects sit
    around shouting at each other in a crowded room, rather than a language where
    hierarchical directors give orders to their subordinates. This analogy especially
    makes sense in the context of delegates, which I’ll get to shortly.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 Objective-C 的第一个关键是明白该语言围绕 *消息传递* 的概念设计，而不是 *调用*。对我来说，思考 Objective-C 为一个对象在拥挤的房间里彼此大声喊叫的语言，而不是一个层级导演对下属发号施令的语言，这样的比喻很有用，尤其是在代理（delegates）的上下文中，这个比喻更为贴切，稍后我会详细讲解。
- en: 'At its most basic, sending Objective-C messages looks like this:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，发送 Objective-C 消息的样子是这样的：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'That’s like saying, “Hey there, `*Object*`! Please do this thing using a value
    of `*myValue*`.” When passing in multiple parameters, the nature of the first
    one is conventionally indicated by the message name. Any subsequent parameters
    must be both defined as part of the class and specifically named when called,
    as in this example:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像是说：“嘿，`*Object*`！请用 `*myValue*` 的值做这件事。”当传递多个参数时，第一个参数的性质通常由消息名来表示。任何后续的参数都必须是类的一部分，并且在调用时必须明确命名，就像这个例子：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this simplified simulation of catnapping under certain conditions, `sleepOnPerson`
    specifies a place to sleep (`person`), and `withRegion` specifies the region of
    the person to sleep on by sending `person` a message returning that person’s `lap`.
    The `andShedding` parameter accepts a Boolean, and `retries` specifies the number
    of times this action will be attempted—in this case, up to the maximum value of
    an integer on a platform, which will vary depending on whether you have a 64-bit
    cat.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简化的模拟程序中，`sleepOnPerson` 指定了一个睡觉的地方（`person`），而 `withRegion` 通过向 `person`
    发送消息来指定这个人的“膝盖”区域。`andShedding` 参数接受一个布尔值，`retries` 则指定此操作将尝试的次数——在本例中，最多可以达到平台上整数的最大值，这个值取决于你是否有一只
    64 位猫。
- en: If you’ve been writing Objective-C for a while, you may notice that the formatting
    of this code looks different than what you’re used to. That’s because this is
    an arcane method of formatting Objective-C code, known as “the correct way,” with
    vertically aligned colons between argument names and values. This keeps the pairings
    between parameter names and values visually obvious.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经编写 Objective-C 一段时间，可能会注意到这个代码的格式看起来与你平时使用的有所不同。这是因为这是一种古老的 Objective-C
    代码格式化方法，称为“正确方式”，它通过在参数名称和值之间使用垂直对齐的冒号，使得参数名称和值的配对在视觉上更为明显。
- en: '**Dissecting an Objective-C Program**'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**剖析一个 Objective-C 程序**'
- en: The two main parts of an Objective-C program are the *interface* and the *implementation*,
    stored in *.h* and *.m* files, respectively. (These are roughly analogous in purpose
    to *.h* and *.cpp* files in C++.) The former defines all of the classes and methods,
    while the latter defines the actual meat and logic of your program.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Objective-C 程序的两个主要部分是 *接口* 和 *实现*，分别存储在 *.h* 和 *.m* 文件中。（这些大致上与 C++ 中的 *.h*
    和 *.cpp* 文件相类似。）前者定义所有的类和方法，而后者定义程序的实际内容和逻辑。
- en: '***Declaring an Interface***'
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***声明一个接口***'
- en: 'Interfaces contain three main components: instance variables (or *ivars*),
    class methods, and instance methods. [Listing 2-1](ch02.html#ch2ex1) is the classic
    (that is, deprecated) Objective-C 1.0 way to declare your interfaces.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 接口包含三个主要组件：实例变量（或 *ivars*）、类方法和实例方法。[示例 2-1](ch02.html#ch2ex1) 是经典的（即被弃用的）Objective-C
    1.0 声明接口的方式。
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 2-1: Declaring an interface, archaic version*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 2-1：声明一个接口，古老版本*'
- en: Inside the main `@interface` block at ➊, instance variables are declared with
    a class (like `NSSomeType`) or a type (like `int`), followed by their name. In
    Objective-C, a `+` denotes the declaration of a class method ➋, while a `-` indicates
    an instance method ➌. As with C, the return type of a method is specified in parentheses
    at the beginning of the definition.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在主 `@interface` 块内的 ➊，实例变量是用类（如 `NSSomeType`）或类型（如 `int`）声明的，后面跟着它们的名称。在 Objective-C
    中，`+` 表示声明一个类方法 ➋，而 `-` 表示实例方法 ➌。与 C 语言类似，方法的返回类型在定义的开始部分用括号指定。
- en: Of course, the modern way of declaring interfaces in Objective-C is a little
    different. [Listing 2-2](ch02.html#ch2ex2) shows an example.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在 Objective-C 中声明接口的现代方式稍有不同。[示例 2-2](ch02.html#ch2ex2) 显示了一个示例。
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 2-2: Declaring an interface, modern version*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 2-2：声明一个接口，现代版本*'
- en: 'This new class, called `Kitty`, inherits from `NSObject` ➊. `Kitty` has three
    instance variables of different accessibility types, and three properties are
    declared to match those instance variables. Notice that `color` is declared `readonly`
    ➋; that’s because a `Kitty` object’s color should never change. This means when
    the property is synthesized, only a getter method will be created, instead of
    both a getter and a setter. `Kitty` also has a pair of methods: one class method
    and one instance method.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新类名为 `Kitty`，继承自 `NSObject` ➊。`Kitty` 有三个不同访问级别的实例变量，并声明了三个属性来匹配这些实例变量。注意，`color`
    被声明为 `readonly` ➋；这是因为一个 `Kitty` 对象的颜色不应该发生变化。这意味着当属性被合成时，只会创建一个 getter 方法，而不是同时创建
    getter 和 setter 方法。`Kitty` 还有一对方法：一个类方法和一个实例方法。
- en: You may have noticed that the example interface declaration used the `@private`
    and `@public` keywords when declaring instance variables. Similar to other languages,
    these keywords define whether ivars will be accessible from within only the class
    that declared it (`@private`), accessible from within the declaring class and
    any subclasses (`@protected`), or accessible by any class (`@public`). The default
    behavior of ivars is `@protected`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，示例接口声明在声明实例变量时使用了`@private`和`@public`关键字。与其他语言类似，这些关键字定义了实例变量是否只能在声明它的类内部访问（`@private`），是否可以在声明类及其任何子类中访问（`@protected`），或者是否可以被任何类访问（`@public`）。实例变量的默认行为是`@protected`。
- en: '**NOTE**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Newcomers to the language often want to know whether there is an equivalent
    to private methods. Strictly speaking, there isn’t a concept of private methods
    in Objective-C. However, you can have the functional equivalent by declaring your
    methods only in the* `*@implementation*` *block instead of declaring them in both
    the* `*@interface*` *and the* `*@implementation*`.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*语言的新手通常想知道是否有类似于私有方法的概念。严格来说，Objective-C中并没有私有方法的概念。然而，你可以通过仅在`*@implementation*`块中声明方法来实现其功能等效，而不是在`*@interface*`和`*@implementation*`中都声明它们。*'
- en: '***Inside an Implementation File***'
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***在实现文件中***'
- en: Just like *.c* or *.cpp* files, Objective-C implementation files contain the
    meat of an Objective-C application. By convention, Objective-C files use *.m*
    files, while Objective-C++ files (which mix C++ and Objective-C code) are stored
    in *.mm* files. [Listing 2-3](ch02.html#ch2ex3) breaks down the implementation
    file for the `Kitty` interface in [Listing 2-2](ch02.html#ch2ex2).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 就像*.c*或*.cpp*文件一样，Objective-C实现文件包含了Objective-C应用程序的核心内容。根据约定，Objective-C文件使用*.m*文件，而Objective-C++文件（混合了C++和Objective-C代码）存储在*.mm*文件中。[列表2-3](ch02.html#ch2ex3)解析了[列表2-2](ch02.html#ch2ex2)中`Kitty`接口的实现文件。
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 2-3: A sample implementation*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表2-3：一个示例实现*'
- en: The `@synthesize` statements at ➊ create the setter and getter methods for the
    properties. Later, these getter and setter methods can be used either with Objective-C’s
    traditional infix notation ➋, where methods of the format `*propertyName*` and
    `*setPropertyName*` (like `name` and `setName`, respectively) get and set values,
    or with dot notation ➌, where properties like `homepage` are set or read using
    the `*.property*` format, as they might be in other languages.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: ➊处的`@synthesize`语句创建了属性的setter和getter方法。稍后，这些getter和setter方法可以使用Objective-C的传统中缀符号表示法➋，其中`*propertyName*`和`*setPropertyName*`格式的方法（例如`name`和`setName`，分别用于获取和设置值），也可以使用点符号表示法➌，在这种方式下，像`homepage`这样的属性使用`*.property*`格式来设置或读取，正如在其他语言中可能出现的那样。
- en: '**NOTE**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Be careful with dot notation, or just don’t use it. Dot notation makes it
    hard to know whether you’re dealing with an object or a C struct, and you can
    actually call* any *method with it—not only getters and setters. Dot notation
    is also just visually inconsistent. Long story short, in this book I’ll avoid
    dot notation in the name of consistency and ideological purity. But despite my
    best efforts, you’ll likely encounter it in the real world anyway.*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*小心使用点符号，或者干脆不要使用它。点符号使得你很难知道你是在处理一个对象还是C结构体，实际上你可以用它调用*任何*方法——不仅仅是getter和setter方法。点符号在视觉上也不一致。长话短说，在本书中，我将避免使用点符号，以保持一致性和思想上的纯洁性。但尽管我尽力避免，你在现实世界中可能仍然会遇到它。*'
- en: 'Technically, you don’t need to synthesize properties that are declared in the
    interface file with `@property`, like `name`, `color`, and `homepage` in [Listing
    2-3](ch02.html#ch2ex3); the compiler in recent versions of Xcode synthesizes these
    properties on its own. But you may want to manually declare them anyway for clarity
    or when you want to change the name of the instance variable to differentiate
    it from the property name. Here’s how manually synthesizing a property works:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，对于在接口文件中声明的使用`@property`的属性（如[列表2-3](ch02.html#ch2ex3)中的`name`、`color`和`homepage`），你不需要合成这些属性；Xcode的较新版本会自动合成这些属性。但是，为了清晰起见或当你想改变实例变量的名称以便与属性名称区分时，你仍然可能希望手动声明它们。手动合成属性的工作原理如下：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, the property `name` is backed by the instance variable `thisCatName`
    because it was manually synthesized. However, the default behavior with automatic
    property synthesis is analogous to this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，属性`name`是由实例变量`thisCatName`支持的，因为它是手动合成的。然而，自动属性合成的默认行为类似于这样：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This default behavior prevents developers from accidentally meddling with the
    instance variables directly, instead of using setters and getters, which can cause
    confusion. For example, if you set an ivar directly, you’ll be bypassing any logic
    in your setter/getter methods. Automatic synthesis is probably the best way to
    do things, but you’ll be seeing manual synthesis in code for a long time to come,
    so it’s best to be aware of it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这种默认行为可以防止开发人员直接操作实例变量，而不是使用设置器和获取器，这样可能会引起混淆。例如，如果你直接设置一个ivar，你将绕过设置器/获取器方法中的任何逻辑。自动合成可能是最好的方式，但你在代码中仍然会看到手动合成很长一段时间，因此最好对此有所了解。
- en: '**Specifying Callbacks with Blocks**'
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用代码块指定回调**'
- en: 'One thing that’s becoming increasingly popular in Objective-C code is the use
    of *blocks*, which are often used in Cocoa as a way to specify a callback. For
    example, here’s how you’d use the `dataTaskWithRequest` method of the `NSURLSessionDataTask`
    class:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在Objective-C代码中，越来越流行的做法是使用*代码块*，它通常用于Cocoa中作为指定回调的一种方式。例如，下面是如何使用`NSURLSessionDataTask`类的`dataTaskWithRequest`方法：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `^` at ➊ is declaring a block that will be executed once the request is
    complete. Note that no name is specified for this function because it won’t be
    called from anywhere other than this bit of code. A block declaration just needs
    to specify the parameters that the closure will take. From there, the rest of
    the block is just like a normal function. You can use blocks for tons of other
    things as well, but to start with, it’s probably sufficient to have a basic understanding
    of what they are: things that begin with `^` and do stuff.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: ➊处的`^`声明了一个代码块，该代码块将在请求完成后执行。注意，未指定此函数的名称，因为它不会从代码中的任何其他地方被调用。一个代码块的声明只需要指定闭包将接受的参数。从那里开始，代码块的其他部分就像普通函数一样。你可以将代码块用于许多其他用途，但首先，了解它们的基本概念应该足够了：以`^`开头并执行某些操作的东西。
- en: '**How Objective-C Manages Memory**'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Objective-C如何管理内存**'
- en: 'Unlike some other languages, Objective-C does not have any garbage collection.
    Historically, Objective-C has used a *reference counting model*, using the `retain`
    and `release` directives to indicate when an object needs to be freed, to avoid
    memory leaks. When you `retain` an object, you increase the *reference count*—that
    is, the number of things that want that object to be available to them. When a
    piece of code no longer needs an object, it sends it a `release` method. When
    the reference count reaches zero, the object is deallocated, as in this example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他一些语言不同，Objective-C没有垃圾回收机制。历史上，Objective-C使用了*引用计数模型*，通过`retain`和`release`指令来指示何时需要释放对象，从而避免内存泄漏。当你`retain`一个对象时，你增加了*引用计数*——也就是希望该对象对其可用的事物的数量。当一段代码不再需要该对象时，它会发送一个`release`方法。当引用计数达到零时，对象将被释放，如下所示：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Assume that before this code runs, the reference count is 0\. After ➊, the reference
    count is 1\. At ➋, the `release` method is called to say that the `fish` object
    is no longer needed (the application just needs the `fish` object’s `name` property),
    and when `fish` is released, the reference count should be 0 again.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 假设在这段代码运行之前，引用计数为0。➊之后，引用计数为1。在➋处，调用了`release`方法，表示`fish`对象不再需要（应用程序只需要`fish`对象的`name`属性），当`fish`被释放时，引用计数应该再次为0。
- en: The `[[Classname alloc] init]` can also be shortened to `[Classname new]`, but
    the `new` method isn’t favored by the Objective-C community because it’s less
    explicit and is inconsistent with methods of object creation other than `init`.
    For example, you can initialize `NSString` objects with `[[NSString alloc] initWithString:@"My
    string"]`, but there’s no equivalent `new` syntax, so your code would end up having
    a mix of both methods. Not everyone is averse to `new`, and it’s really a matter
    of taste, so you’re likely to see it both ways. But in this book, I’ll favor the
    traditional approach.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`[[Classname alloc] init]`也可以缩写为`[Classname new]`，但`new`方法在Objective-C社区中不太受欢迎，因为它不够明确，并且与除了`init`之外的其他对象创建方法不一致。例如，你可以用`[[NSString
    alloc] initWithString:@"My string"]`来初始化`NSString`对象，但没有类似的`new`语法，因此你的代码中会混用这两种方法。并非每个人都反感`new`，这确实是一个个人喜好的问题，因此你可能会看到这两种写法。但在本书中，我更倾向于使用传统方法。'
- en: 'Regardless of which allocation syntax you prefer, the problem with a manual
    retain/release is that it introduced the possibility of errors: programmers could
    accidentally release objects that had already been deallocated (causing a crash)
    or forget to release objects (causing a memory leak). Apple attempted to simplify
    the situation with automatic reference counting.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你偏好哪种分配语法，手动 retain/release 的问题在于它可能引发错误：程序员可能会不小心释放已被销毁的对象（导致崩溃）或忘记释放对象（导致内存泄漏）。苹果尝试通过自动引用计数来简化这种情况。
- en: '**Automatic Reference Counting**'
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**自动引用计数**'
- en: '*Automatic reference counting (ARC)* is the modern method of Objective-C memory
    management. It removes the need for manually tracking reference counts by automatically
    incrementing and decrementing the retain count where appropriate.^([1](footnote.html#fn14))
    Essentially, it inserts `retain` and `release` methods for you. ARC introduces
    a few new concepts, listed here:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*自动引用计数（ARC）* 是现代的 Objective-C 内存管理方法。它通过在适当的时候自动递增和递减引用计数，消除了手动跟踪引用计数的需求。^([1](footnote.html#fn14))
    本质上，它为你插入了 `retain` 和 `release` 方法。ARC 引入了一些新的概念，列举如下：'
- en: • *Weak* and *strong* references assist in preventing cyclical references (referred
    to as *strong reference cycles*), where a parent object and child object both
    have ownership over each other and never get deallocated.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: • *弱引用* 和 *强引用* 有助于防止循环引用（即 *强引用循环*），在这种情况下，父对象和子对象相互拥有对方，导致它们永远不会被销毁。
- en: • Object ownership between Core Foundation objects and Cocoa objects can be
    bridged. Bridging tells the compiler that Core Foundation objects that are cast
    to Cocoa objects are to be managed by ARC, by using the `__bridge` family of keywords.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: • Core Foundation 对象和 Cocoa 对象之间的所有权可以进行桥接。桥接告诉编译器，将 Core Foundation 对象转换为 Cocoa
    对象后，应该由 ARC 管理，方法是使用 `__bridge` 系列关键字。
- en: • `@autoreleasepool` replaces the previously used `NSAutoReleasePool` mechanism.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: • `@autoreleasepool` 替代了之前使用的 `NSAutoReleasePool` 机制。
- en: In modern Cocoa applications with ARC, the details of memory management are
    unlikely to come into play in a security context. Previously exploitable conditions
    such as double-releases are no longer a problem, and memory-management-related
    crashes are rare. It’s still worth noting that there are other ways to cause memory
    management problems because `CFRetain` and `CFRelease` still exist for Core Foundation
    objects and C `malloc` and `free` can still be used. I’ll discuss potential memory
    management issues using these lower-level APIs in [Chapter 11](ch11.html#ch11).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代使用 ARC 的 Cocoa 应用程序中，内存管理的细节通常不会在安全上下文中发挥作用。以前可被利用的条件，如双重释放，已不再是问题，内存管理相关的崩溃也变得非常少见。但仍然值得注意的是，仍然有其他方式可能引发内存管理问题，因为
    Core Foundation 对象仍然存在 `CFRetain` 和 `CFRelease`，并且 C 语言的 `malloc` 和 `free` 仍然可以使用。我将在[第
    11 章](ch11.html#ch11)中讨论使用这些低级 API 时可能出现的内存管理问题。
- en: '**Delegates and Protocols**'
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**委托与协议**'
- en: Remember how objects “shout at each other in a crowded room” to pass messages?
    *Delegation* is a feature that illustrates Objective-C’s message-passing architecture
    particularly well. Delegates are objects that can receive messages sent during
    program execution and respond with instructions that influence the program’s behavior.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得对象如何在“拥挤的房间里互相喊叫”以传递消息吗？*委托* 是一个能够特别好地展示 Objective-C 消息传递架构的特性。委托对象可以接收在程序执行过程中发送的消息，并通过响应指令来影响程序的行为。
- en: To be a delegate, an object must implement some or all methods defined by a
    *delegate protocol*, which is an agreed-upon method of communication between a
    delegator and a delegate. You can declare your own protocols, but most commonly
    you’ll be using established protocols in the core APIs.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 成为代理对象，必须实现 *代理协议* 中定义的部分或全部方法，这是一种委托者和代理对象之间约定的通信方式。你可以声明自己的协议，但最常用的还是使用核心
    API 中的已定义协议。
- en: 'The delegates you’ll write will typically respond to one of three fundamental
    message types: *should*, *will*, and *did*. Invoke these messages whenever an
    event is about to happen and then let your delegates direct your program to the
    correct course of action.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你编写的委托通常会响应三种基本消息类型之一：*should*、*will* 和 *did*。每当事件即将发生时，调用这些消息，然后让你的委托对象指导程序采取正确的行动。
- en: '***Should Messages***'
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Should 消息***'
- en: Objects pass *should* messages to request input from any available delegates
    on whether letting an event happen is a good idea. Think of this as the final
    call for objections. For example, when a `shouldSaveApplicationState` message
    is invoked, if you’ve implemented a delegate to handle this message, your delegate
    can perform some logic and say something like, “No, actually, we shouldn’t save
    the application state because the user has checked a checkbox saying not to.”
    These messages generally expect a Boolean as a response.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对象发送 *should* 消息来请求任何可用委托提供关于是否允许事件发生的意见。这可以看作是最终的反对意见征集。例如，当 `shouldSaveApplicationState`
    消息被触发时，如果你已经实现了一个委托来处理此消息，委托可以执行一些逻辑并说类似这样的话：“不，实际上我们不应该保存应用状态，因为用户选中了一个复选框表示不保存。”这些消息通常期望一个布尔值作为响应。
- en: '***Will Messages***'
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Will 消息***'
- en: A *will* message gives you the chance to perform some action before an event
    occurs—and, sometimes, to put the brakes on before it does. This message type
    is more like saying, “Hey guys! Just an FYI, but I’m going to go do this thing,
    unless you need to do something else first. I’m pretty committed to the idea,
    but if it’s a total deal-breaker, let me know and I can stop.” An example would
    be the `applicationWillTerminate` message.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*will* 消息给你一个在事件发生之前执行某些操作的机会——有时，甚至可以在事件发生之前踩刹车。这种消息类型更像是说：“嘿，伙计们！只是提醒一下，我将要做这件事情，除非你们需要先做些其他的事情。我对这个想法已经比较坚定，但如果这是个完全不可接受的条件，告诉我，我可以停下。”一个例子是
    `applicationWillTerminate` 消息。'
- en: '***Did Messages***'
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Did 消息***'
- en: A *did* message indicates that something has been decided for sure and an event
    is going to happen whether you like it or not. It also indicates that if any delegates
    want to do some stuff as a result, they should go right ahead. An example would
    be `applicationDidEnterBackground`. In this case, did isn’t really an indication
    that the application *has* entered the background, but it’s a reflection of the
    decision being definitively made.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*did* 消息表示某件事情已经确定决定并且一个事件无论你是否喜欢都将发生。它还表明，如果有任何委托想要执行某些操作，他们应该直接进行。例如 `applicationDidEnterBackground`。在这种情况下，did
    并不是真正表示应用程序*已经*进入后台，而是反映了决定已经被最终做出。'
- en: '***Declaring and Conforming to Protocols***'
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***声明并遵循协议***'
- en: 'To declare that your class conforms to a protocol, specify that protocol in
    your `@interface` declaration within angle brackets. To see this in action, look
    at [Listing 2-4](ch02.html#ch2ex4), which shows an example `@interface` declaration
    that uses the NSCoding protocol. This protocol simply specifies that a class implements
    two methods used to encode or decode data: `encodeWithCoder` to encode data and
    `initWithCoder` to decode data.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要声明你的类遵循某个协议，在 `@interface` 声明中指定该协议，并将其放在尖括号中。要查看实际应用，查看[列表 2-4](ch02.html#ch2ex4)，它展示了一个使用
    NSCoding 协议的 `@interface` 声明示例。这个协议简单地指定了一个类实现两个用于编码或解码数据的方法：`encodeWithCoder`
    用于编码数据，`initWithCoder` 用于解码数据。
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 2-4: Declaring and implementing conformance to the NSCoding protocol*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 2-4：声明并实现对 NSCoding 协议的遵循*'
- en: The declaration at ➊ specifies that the `Kitty` class will be conforming to
    the NSCoding protocol.^([2](footnote.html#fn15)) When a class declares a protocol,
    however, it must also conform to it, which is why `Kitty` implements the required
    `initWithCoder` ➋ and `encodeWithCoder` ➌ methods. These particular methods are
    used to serialize and deserialize objects.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ 处的声明指定了 `Kitty` 类将符合 NSCoding 协议。^([2](footnote.html#fn15)) 但是，当一个类声明了一个协议时，它也必须遵循该协议，这就是为什么
    `Kitty` 实现了所需的 `initWithCoder` ➋ 和 `encodeWithCoder` ➌ 方法。这些特定的方法用于序列化和反序列化对象。
- en: If none of the built-in message protocols do what you need, then you can also
    define your own protocols. Check out the declaration of the NSCoding protocol
    in Apple’s Framework header files ([Listing 2-5](ch02.html#ch2ex5)) to see what
    a protocol definition looks like.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果内建的消息协议没有满足你的需求，那么你也可以定义自己的协议。查看 Apple 框架头文件中 NSCoding 协议的声明（[列表 2-5](ch02.html#ch2ex5)），看看协议定义是什么样的。
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 2-5: The declaration of the NSCoding protocol, from* Frameworks/NSCoding.h'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 2-5：NSCoding 协议的声明，来自* Frameworks/NSCoding.h'
- en: 'Notice that the NSCoding definition contains two methods that any class conforming
    to this protocol must implement: `encodeWithCoder` and `initWithCoder`. When you
    define a protocol, you must specify those methods yourself.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，NSCoding 的定义包含了两个方法，任何符合该协议的类必须实现这两个方法：`encodeWithCoder` 和 `initWithCoder`。当你定义一个协议时，必须自己指定这些方法。
- en: '**The Dangers of Categories**'
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**类别的危险**'
- en: Objective-C’s *category* mechanism allows you to implement new methods on existing
    classes at runtime, without having to recompile those classes. Categories can
    add or replace methods in the affected class, and they can appear anywhere in
    the codebase. It’s an easy way to quickly change the behavior of a class without
    having to reimplement it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Objective-C的*分类*机制允许你在运行时为现有类实现新的方法，而无需重新编译这些类。分类可以向受影响的类添加或替换方法，并且可以出现在代码库的任何位置。这是一种无需重新实现类就能快速更改类行为的简便方法。
- en: 'Unfortunately, using categories is also an easy way to make egregious security
    mistakes. Because they can affect your classes from anywhere within the codebase—even
    if they appear only in third-party code—critical functionality, such as TLS endpoint
    validation, can be completely overridden by a random third-party library or a
    careless developer. I’ve seen this happen in important iOS products before: after
    carefully verifying that TLS/SSL works correctly in their application, developers
    include a third-party library that overrides that behavior, messing up their own
    properly designed code.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，使用分类也是导致严重安全错误的一个简单途径。因为它们可以在代码库的任何地方影响你的类——即使它们仅出现在第三方代码中——关键功能，如TLS端点验证，可能会被一个随机的第三方库或一个粗心的开发者完全覆盖。我曾在重要的iOS产品中看到过这种情况：开发者在仔细验证TLS/SSL在他们的应用中正确工作后，添加了一个覆盖该行为的第三方库，搞砸了他们自己精心设计的代码。
- en: You can usually spot categories by noting `@implementation` directives that
    purport to implement classes already present in Cocoa Touch. If a developer was
    actually creating a category there, then the name of the category would follow
    the `@implementation` directive in parentheses (see [Listing 2-6](ch02.html#ch2ex6)).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你通常可以通过注意到`@implementation`指令来识别分类，这些指令声称实现了Cocoa Touch中已经存在的类。如果开发者确实在这里创建了一个分类，那么分类的名称会在`@implementation`指令后面用括号标出（参见[列表2-6](ch02.html#ch2ex6)）。
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 2-6: Implementing a category method*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表2-6：实现分类方法*'
- en: 'You can also use categories to override *existing* class methods, which is
    a potentially useful but particularly dangerous approach. This can cause security
    mechanisms to be disabled (such as the aforementioned TLS validation) and can
    also result in unpredictable behavior. Quoth Apple:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用分类来覆盖*现有*的类方法，这是一种潜在有用但特别危险的方法。这可能导致安全机制被禁用（比如前述的TLS验证），也可能导致不可预测的行为。苹果曾说：
- en: If the name of a method declared in a category is the same as a method in the
    original class, or a method in another category on the same class (or even a superclass),
    the behavior is undefined as to which method implementation is used at runtime.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果分类中声明的方法名称与原始类中的方法名称相同，或者与同一类中的另一个分类中的方法名称相同（甚至是父类中的方法），则在运行时无法确定使用哪个方法的实现。
- en: In other words, multiple categories can define or overwrite the same method,
    but only one will “win” and be called. Note that some Framework methods may themselves
    be implemented via a category—if you attempt to override them, your category *might*
    be called, but it might not.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，多个分类可以定义或覆盖相同的方法，但只有一个会“胜出”并被调用。请注意，一些框架方法可能本身就是通过分类实现的——如果你试图覆盖它们，你的分类*可能*会被调用，但也有可能不会。
- en: A category may also accidentally override the functionality of subclasses, even
    when you only meant for it to add a new method. For example, if you were to define
    an `isPurple` method on `NSObject`, all subclasses of `NSObject` (which is to
    say, all Cocoa objects) would inherit this method. Any other class that defined
    a method with the same name might or might not have its method implementation
    clobbered. So, yes, categories are handy, but use them sparingly; they can cause
    serious confusion as well as security side effects.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 分类还可能意外地覆盖子类的功能，即使你只打算添加一个新方法。例如，如果你在`NSObject`上定义了一个`isPurple`方法，那么`NSObject`的所有子类（也就是说，所有Cocoa对象）都会继承这个方法。任何其他定义了相同方法名的类，可能会或可能不会被覆盖。因此，没错，分类非常方便，但要谨慎使用；它们可能会导致严重的混乱以及安全副作用。
- en: '**Method Swizzling**'
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**方法交换**'
- en: '*Method swizzling* is a mechanism by which you can replace the implementation
    of a class or instance method that you don’t own (that is, a method provided by
    the Cocoa API itself). Method swizzling can be functionally similar to categories
    or subclassing, but it gives you some extra power and flexibility by actually
    swapping the implementation of a method with a totally new implementation, rather
    than extending it. Developers typically use this technique to augment functionality
    of a method that’s used by many different subclasses so they don’t have to duplicate
    code.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*方法交换* 是一种机制，你可以使用它来替换你不拥有的类或实例方法的实现（也就是 Cocoa API 自身提供的方法）。方法交换在功能上类似于类别或子类化，但它通过实际交换方法的实现与一个全新的实现，而不是扩展它，提供了一些额外的能力和灵活性。开发者通常使用这种技术来增强许多不同子类共享使用的方法的功能，这样他们就不必重复代码。'
- en: The code in [Listing 2-7](ch02.html#ch2ex7) uses method swizzling to add a logging
    statement to any call of `setHidden`. This will affect any subclass of `UIView`,
    including `UITextView`, `UITextField`, and so forth.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 2-7](ch02.html#ch2ex7) 中的代码使用方法交换（method swizzling）将日志语句添加到任何对 `setHidden`
    方法的调用。这将影响任何 `UIView` 的子类，包括 `UITextView`、`UITextField` 等。'
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 2-7: Exchanging the implementation of an existing method and a replacement
    method*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 2-7：交换现有方法的实现和替代方法的实现*'
- en: At ➊, a wrapper method is defined that simply spits out an `SLog` that the `setHidden`
    method is being called. But at ➋, the `swizzle_SetHidden` method appears to be
    calling itself. That’s because it’s considered a best practice to call the original
    method after performing any added functionality, to prevent unpredictable behavior
    like failing to return the type of value the caller would expect. When you call
    `swizzled_setHidden` from within itself, it actually calls the *original* method
    because the original method and the replacement method have already been swapped.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，定义了一个包装方法，该方法只是输出一个 `SLog`，表明 `setHidden` 方法正在被调用。但在➋处，`swizzle_SetHidden`
    方法似乎在调用自身。这是因为，在执行任何附加功能后，最好调用原始方法，以防止出现不可预测的行为，比如未能返回调用者期望的值类型。当你在 `swizzled_setHidden`
    内部调用自己时，实际上会调用*原始*方法，因为原始方法和替换方法已经被交换。
- en: The actual swapping is done in the `load` class method ➌, which is called by
    the Objective-C runtime when loading the class for the first time. After the references
    to the original and swizzled methods are obtained, the `method_exchangeImplementations`
    method is called at ➍, which, as the name implies, swaps the original implementation
    for the swizzled one.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的交换发生在 `load` 类方法 ➌ 中，当 Objective-C 运行时第一次加载该类时会调用此方法。在获取原始方法和交换方法的引用后，在 ➍
    处调用 `method_exchangeImplementations` 方法，顾名思义，它交换原始实现和交换实现。
- en: There are a few different strategies for implementing method swizzling, but
    most of them carry some risk since you’re mucking around with core functionality.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 实现方法交换有几种不同的策略，但大多数方法都有一定的风险，因为你在更改核心功能。
- en: If you or a loved one want to implement method swizzling, you may want to consider
    using a fairly well-tested wrapper package, such as JRSwizzle.^([3](footnote.html#fn16))
    Apple may reject applications that appear to use method swizzling in a dangerous
    way.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你或你的亲人想实现方法交换，可能需要考虑使用一个经过充分测试的包装包，如 JRSwizzle.^([3](footnote.html#fn16))
    Apple 可能会拒绝看起来以危险方式使用方法交换的应用。
- en: '**Closing Thoughts**'
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**结束语**'
- en: Overall, Objective-C and the Cocoa API are nicely high-level and prevent a number
    of classic security issues in C. While there are still several ways to mess up
    memory management and object manipulation, most of these methods result in a denial
    of service at worst in modern code. If you’re a developer, rely on Cocoa as much
    as possible, rather than patching in C or C++ code.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，Objective-C 和 Cocoa API 是相当高级的，避免了许多 C 语言中的经典安全问题。尽管仍然存在一些破坏内存管理和对象操作的方法，但在现代代码中，这些方法大多数情况下会导致服务拒绝（Denial
    of Service，DoS）。如果你是开发者，尽可能依赖 Cocoa，而不是修补 C 或 C++ 代码。
- en: Objective-C does, however, contain some mechanisms, such as categories or swizzling,
    that can cause unexpected behavior, and these mechanisms can affect your codebase
    widely. Be sure to investigate these techniques when you see them during an app
    assessment because they can potentially cause some serious security misbehavior.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Objective-C 确实包含一些机制，如类别或方法交换，这些机制可能导致意外行为，并且可能广泛影响你的代码库。当你在应用程序评估中看到这些技术时，一定要仔细调查它们，因为它们可能会导致一些严重的安全问题。
