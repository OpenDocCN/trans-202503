- en: Chapter 5. Modeling the Details
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第5章. 细节建模
- en: In [Chapter 4](ch04.html "Chapter 4. Blocking In"), we blocked in the basic
    elements of the projects, creating the block-in of the Jungle Temple and modeling
    base meshes for sculpting the Bat Creature and Spider Bot. In this chapter, you’ll
    learn how to flesh out this framework to create finished models.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.html "第4章. 阻塞入门")中，我们设置了项目的基本元素，创建了丛林神庙的阻塞模型，并为雕刻蝙蝠生物和蜘蛛机器人建模了基础网格。在本章中，您将学习如何完善这个框架，创建完成的模型。
- en: To create the final models, we need to transform our simple geometry using a
    mix of techniques. These techniques include using modifiers to add procedural
    details as well as modeling elements by hand. Our aim should be to end up with
    clean, well-modeled, detailed meshes, without overcomplicating things or introducing
    unhelpful geometry that could slow down renders or create artifacts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建最终模型，我们需要使用各种技术对简单几何体进行转换。这些技术包括使用修改器添加程序化细节，以及手动建模元素。我们的目标应该是最终得到干净、建模精良且细节丰富的网格，而不至于过度复杂化或引入无用的几何体，这些都会拖慢渲染速度或产生伪影。
- en: Modeling details is great fun, but it can also be quite repetitive, so I won’t
    exhaustively cover the process of making every part. Instead, I’ll focus on key
    aspects of creating certain elements of projects that are the most interesting
    or tricky and leave the rest to your imagination. We’ll begin with some discussion
    of topology, discuss what constitutes a “good” mesh, and then move on to the actual
    modeling.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 建模细节非常有趣，但也可能相当重复，因此我不会详尽地讲解制作每个部分的过程。相反，我将重点介绍一些制作项目中特定元素的关键方面，这些方面既有趣又棘手，其余部分就留给你们发挥想象力吧。我们将从一些关于拓扑的讨论开始，讲解什么样的网格是“好”的网格，然后再进入实际的建模过程。
- en: Topology
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拓扑
- en: '*Topology* describes the way that the edges and faces of a mesh connect and
    flow across its surface. We covered the basics of topology when creating the base
    meshes for sculpting the Bat Creature and Spider Bot—namely, creating even loops
    of vertices around the arms and legs and avoiding triangular faces. Now let’s
    talk about why we do things this way.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*拓扑* 描述了网格的边缘和面是如何连接并在其表面上流动的。我们在为雕刻蝙蝠生物和蜘蛛机器人创建基础网格时已经讲解了拓扑的基础——即围绕手臂和腿部创建均匀的顶点环路，并避免使用三角形面。现在让我们谈谈为什么我们要这样做。'
- en: There are many ways to create meshes that have the same basic shapes but use
    very different configurations of faces in their construction, as you can see in
    [Figure 5-1](ch05.html#same_head_shape_with_three_very_differen "Figure 5-1. The
    same head shape with three very different meshes").
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以创建具有相同基本形状但在构建过程中使用非常不同面配置的网格，如[图5-1](ch05.html#same_head_shape_with_three_very_differen
    "图5-1. 同样的头部形状与三种完全不同的网格")所示。
- en: While the shapes in [Figure 5-1](ch05.html#same_head_shape_with_three_very_differen
    "Figure 5-1. The same head shape with three very different meshes") are roughly
    the same, the middle mesh is the most useful because its geometry flows with the
    form of the face, creating loops around the eyes and the mouth and running neatly
    down the neck and over the head. Also, it describes the forms of the head just
    as well as (or better than) the other meshes, while using fewer faces.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然[图5-1](ch05.html#same_head_shape_with_three_very_differen "图5-1. 同样的头部形状与三种完全不同的网格")中的形状大致相同，但中间的网格是最有用的，因为它的几何结构与面部的形态相吻合，围绕眼睛和嘴巴形成环路，并整齐地延伸到脖部和头部。此外，它与其他网格一样好地描述了头部的形态，甚至更好，同时使用的面数更少。
- en: The flowing characteristics of this mesh are also important for animation because
    they allow the mesh to deform easily and smoothly. For example, closing the eyes
    or opening the mouth won’t stretch edges awkwardly or cause parts of the mesh
    to intersect unpleasantly. This kind of loop-based topology also helps when creating
    further variations on the shape, and it makes it easier to place UV seams and
    to UV unwrap the mesh without too much stretching (see [Chapter 8](ch08.html "Chapter 8. UV
    Unwrapping") for more on unwrapping).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这个网格的流畅特性对动画也很重要，因为它使网格可以轻松且平滑地变形。例如，闭眼或张嘴时，不会使边缘不自然地拉伸，也不会导致网格的某些部分产生不愉快的交错。基于环路的拓扑结构在创建形状的进一步变化时也很有帮助，它使得放置UV接缝和展开UV时，网格的拉伸不会过于严重（有关展开的更多内容，请参见[第8章](ch08.html
    "第8章. UV展开")）。
- en: '![The same head shape with three very different meshes](httpatomoreillycomsourcenostarchimages1538378.png.jpg)Figure 5-1. The
    same head shape with three very different meshes'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![同样的头部形状与三种完全不同的网格](httpatomoreillycomsourcenostarchimages1538378.png.jpg)图5-1.
    同样的头部形状与三种完全不同的网格'
- en: Another reason that the middle mesh in [Figure 5-1](ch05.html#same_head_shape_with_three_very_differen
    "Figure 5-1. The same head shape with three very different meshes") is the better
    choice is that its topology is the best suited for use with the *Subdivision Surface
    (Subsurf) modifier*. The Subdivision Surface modifier, which we covered in [Chapter 4](ch04.html
    "Chapter 4. Blocking In"), is used to subdivide and smooth a mesh. The algorithm
    used by the Subdivision Surface modifier, Catmull-Clark subdivision, works best
    when given a mesh constructed like this one. When the Subdivision Surface modifier
    is used with a mesh containing a lot of triangles or long, oddly shaped faces,
    it can give poor results, but when given well-constructed, flowing topology, it
    produces very predictable, smooth forms.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图5-1](ch05.html#same_head_shape_with_three_very_differen "图5-1. 相同头部形状与三种截然不同的网格")中，位于中间的网格是更好的选择，原因是它的拓扑最适合与*细分表面（Subsurf）修饰符*配合使用。我们在[第4章](ch04.html
    "第4章. 初步建模")中讨论过的细分表面修饰符，用于细分和平滑网格。细分表面修饰符使用的算法，Catmull-Clark细分，在像这个网格这样构建的网格上效果最佳。当细分表面修饰符用于含有大量三角形或长而不规则面片的网格时，可能会得到较差的结果，但当应用于结构良好、流畅的拓扑时，它能生成非常可预测的、平滑的形状。
- en: What Is Good Topology?
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是良好的拓扑？
- en: Good topology for animation is usually good for subdivision and vice versa.
    But what constitutes good topology? While there are no absolute rules, there are
    a few important principles. It’s a mix of art and science.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的动画拓扑通常也适合细分，反之亦然。那么，什么是良好的拓扑呢？虽然没有绝对的规则，但有一些重要的原则。它是艺术和科学的结合。
- en: '****Avoid triangles and *n*-gons where possible.**** This is the big one. While
    triangles are fine in a static mesh that you don’t intend to subdivide or in a
    low-poly object for a game, if you plan to subdivide your mesh, use as few triangles
    as possible because triangles don’t subdivide as well as quads. Equally, *n*-gons
    are converted to triangles before being subdivided, resulting in the same kinds
    of problems.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '****尽量避免三角形和*n*边形。**** 这是最重要的一点。虽然三角形在静态网格中没有问题，特别是当你不打算细分或在低多边形对象中使用时，如果你计划细分网格，尽量使用尽可能少的三角形，因为三角形在细分时不如四边形表现得好。同样，*n*边形在细分之前会被转换为三角形，导致同样的问题。'
- en: '****Avoid poles with lots of edges.**** A *pole* is a vertex where three, five,
    or more edges meet—that is, a point in a mesh that deviates from a grid-like structure.
    Like triangles, poles can create artifacts when subdividing a mesh. Poles with
    three or five edges aren’t so bad—indeed, it’s just about impossible to create
    anything but toroids and grids without creating a few poles—but poles with six
    or more edges subdivide poorly.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '****避免有很多边的极点。**** *极点*是指三个、五个或更多边相交的顶点——也就是说，网格中一个偏离网格结构的点。像三角形一样，极点在细分网格时可能会产生伪影。拥有三个或五个边的极点并不算太糟——事实上，除非创建环形物体和网格，否则几乎不可能不创建一些极点——但拥有六个或更多边的极点在细分时表现较差。'
- en: '****Create loops around important forms.**** This allows you to easily select,
    deform, and animate your meshes, and it also ensures they will subdivide cleanly.
    For example, in [Figure 5-1](ch05.html#same_head_shape_with_three_very_differen
    "Figure 5-1. The same head shape with three very different meshes"), the use of
    edge loops that flow around the eyes makes it easier to adjust their shape.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '****在重要形状周围创建环路。**** 这使得你可以轻松选择、变形和动画化你的网格，同时确保它们能干净地细分。例如，在[图5-1](ch05.html#same_head_shape_with_three_very_differen
    "图5-1. 相同头部形状与三种截然不同的网格")中，使用围绕眼睛流动的边缘环路使得调整其形状变得更加容易。'
- en: '****Align edges with the form.**** If your object is roughly cylindrical, the
    edges of the mesh should flow around its circumference and along its length. If
    your object is roughly cuboidal, create it by starting from a cube and adding
    loop cuts. In general, try to create a mesh structure that goes with the “grain”
    of the shape you are trying to create, as shown in [Figure 5-2](ch05.html#topology_dos_and_donapostrophets_avoid_t
    "Figure 5-2. Topology dos and don’ts: Avoid triangles 1, avoid poles 2, create
    loops around important forms 3, and align edges with the forms, not against them
    4.").'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '****让边缘与形状对齐。**** 如果你的对象大致是圆柱形的，网格的边缘应该沿着其周长和长度流动。如果你的对象大致是立方体形状，应该从一个立方体开始，并添加环形切割。一般来说，尝试创建一种与所要创建的形状“纹理”一致的网格结构，如[图5-2](ch05.html#topology_dos_and_donapostrophets_avoid_t
    "图5-2. 拓扑学的注意事项：避免三角形1，避免极点2，围绕重要形状创建环路3，边缘与形状对齐，而不是与其相对4。")所示。'
- en: Dealing with Difficult Topology
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理困难的拓扑
- en: 'The rules listed above are simple, but you may run into trouble following them
    from time to time, especially when trying to eliminate triangles and poles from
    your models. Here are some tips for dealing with difficult topology:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 上述规则很简单，但你可能会遇到一些麻烦，尤其是在尝试从模型中消除三角形和极点时。以下是处理困难拓扑的一些技巧：
- en: '****Plan ahead.**** Most topology woes can be sidestepped simply by planning
    ahead. That’s why, for example, we made sure there were eight vertices in the
    loops around the arms and legs when creating the base mesh for the Bat Creature:
    It made joining the hands easy, as there were no surplus edges to join together
    when it came to bridging the gap. Powers of 2 (8, 16, or 32) are often a good
    way to think about this, but regardless, try to keep to even numbers when creating
    edge loops. If you are new to 3D modeling, it can be helpful to sketch your desired
    mesh over a photo or your concept art, either in GIMP or on paper, as shown in
    [Figure 5-3](ch05.html#sketching_your_topology_beforehand_can_h "Figure 5-3. Sketching
    your topology beforehand can help you avoid difficulties.").'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '****提前规划。**** 大多数拓扑问题只需要提前规划就能避免。例如，在制作蝙蝠生物的基础网格时，我们确保了手臂和腿部的环路中有八个顶点：这样在连接手部时非常方便，因为在桥接空隙时没有多余的边需要连接。以2的幂（8、16或32）来思考往往是一个不错的方式，但无论如何，创建边环时尽量保持偶数。如果你是3D建模新手，提前在照片或概念图上草图化你的期望网格会很有帮助，可以使用GIMP或者纸上绘制，如[图5-3](ch05.html#sketching_your_topology_beforehand_can_h
    "图5-3. 提前草图化你的拓扑可以帮助你避免困难。")所示。'
- en: '****Two tris make a quad.**** You can join two adjacent triangles to make a
    quad, killing two birds with one stone. To convert multiple triangles into quads
    automatically, select your mesh and press ALT-J to turn suitable pairs of triangles
    into quads.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '****两个三角形组成一个四边形。**** 你可以将两个相邻的三角形连接成一个四边形，一举两得。要自动将多个三角形转换为四边形，选择你的网格并按下ALT-J，将合适的三角形对转换为四边形。'
- en: '![Topology dos and don’ts: Avoid triangles 1, avoid poles 2, create loops around
    important forms 3, and align edges with the forms, not against them 4.](httpatomoreillycomsourcenostarchimages1538380.png.jpg)Figure 5-2. Topology
    dos and don’ts: Avoid triangles 1, avoid poles 2, create loops around important
    forms 3, and align edges with the forms, not against them 4.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![拓扑操作的注意事项：避免三角形1，避免极点2，围绕重要形状创建环路3，并且让边与形状对齐，而不是与之相对4。](httpatomoreillycomsourcenostarchimages1538380.png.jpg)图5-2.
    拓扑操作的注意事项：避免三角形1，避免极点2，围绕重要形状创建环路3，并且让边与形状对齐，而不是与之相对4。'
- en: '****Rotate edges to move triangles.**** To rotate or “spin” an edge, select
    it and press CTRL-E▸**Rotate Edge CW/CCW** (clockwise/counterclockwise). This
    rearranges the faces around that edge, allowing you to move triangles. You can
    combine this trick with the joining adjacent triangles trick above: By spinning
    edges to bring two triangles together, you can eliminate them, as shown in [Figure 5-4](ch05.html#rotating_edges_to_bring_two_triangles_to
    "Figure 5-4. Rotating edges to bring two triangles together allows you to eliminate
    them.").'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '****旋转边缘以移动三角形。**** 要旋转或“旋转”一条边，选择它并按CTRL-E▸**旋转边缘顺时针/逆时针**（顺时针/逆时针）。这将重新排列该边周围的面，从而允许你移动三角形。你可以将这个技巧与上面提到的连接相邻三角形的技巧结合使用：通过旋转边缘将两个三角形组合在一起，你可以消除它们，如[图5-4](ch05.html#rotating_edges_to_bring_two_triangles_to
    "图5-4. 旋转边缘将两个三角形组合在一起可以消除它们。")所示。'
- en: '![Sketching your topology beforehand can help you avoid difficulties.](httpatomoreillycomsourcenostarchimages1538382.png.jpg)Figure 5-3. Sketching
    your topology beforehand can help you avoid difficulties.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![提前草图化你的拓扑可以帮助你避免困难。](httpatomoreillycomsourcenostarchimages1538382.png.jpg)图5-3.
    提前草图化你的拓扑可以帮助你避免困难。'
- en: '****Add an edge loop.**** Adding a loop cut (CTRL-R) that ends on a triangle
    will turn that triangle into a quad (or two triangles, which you can merge into
    a quad). If the new edge loop terminates at an open edge, you’ve eliminated your
    triangle. If your mesh is closed, it might just move the triangle to the other
    end of the edge loop, and, if you have triangles at both ends, you can take out
    two at a time (see [Figure 5-5](ch05.html#adding_edge_loops_with_the_loop_cut_tool
    "Figure 5-5. Adding edge loops with the Loop Cut tool (CTRL-R) can get rid of
    triangles. If you add one between two triangles, you can eliminate them both in
    one go. Alternatively, you could delete one of the edge loops already present
    with similar effect.")).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '****添加边环。**** 添加一个结束于三角形的环切（CTRL-R）会将该三角形转换为四边形（或两个三角形，你可以将它们合并为一个四边形）。如果新的边环终止于开放边缘，你就消除了这个三角形。如果你的网格是封闭的，它可能只是将三角形移到边环的另一端，如果两端都有三角形，你可以一次去掉两个（三角形）（参见[图
    5-5](ch05.html#adding_edge_loops_with_the_loop_cut_tool "图 5-5. 使用环切工具（CTRL-R）添加边环可以去除三角形。如果你在两个三角形之间添加一个，你可以一举去掉它们两个。或者，你也可以删除已经存在的一个边环，达到类似的效果。")）。'
- en: '****Split a pole in two.**** A pole with six edges can easily be split into
    two fives by adding a face loop between the two halves. Add further faces for
    even cleaner topology, as shown in [Figure 5-6](ch05.html#adding_faces_to_remove_polesdot_adding_o
    "Figure 5-6. Adding faces to remove poles. Adding one face loop across six poles
    reduces it to two five poles, which will subdivide much more cleanly.").'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '****将极点分成两部分。**** 一个具有六条边的极点可以通过在两半之间添加一个面环来轻松分裂为两个五边形极点。为获得更干净的拓扑，添加更多的面，如[图
    5-6](ch05.html#adding_faces_to_remove_polesdot_adding_o "图 5-6. 添加面以去除极点。将一个面环添加到六个极点之间，将其减少为两个五边形极点，这样细分效果会更加干净。")所示。'
- en: '****Cut, dissolve, and join.**** The cut tool (**K**) allows you to arbitrarily
    cut edges and faces to get the topology you want. You can combine this tool with
    the Dissolve operator (X▸Dissolve) to get rid of vertices’ edges without deleting
    the faces they are part of. Then use the Join Edges operator to connect two vertices
    that are already part of a face but do not have an edge connecting them. These
    tools are great for arbitrarily rearranging difficult topology.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '****切割、溶解和连接。**** 切割工具（**K**）允许你任意切割边缘和面，以获得你想要的拓扑。你可以将这个工具与溶解操作符（X▸溶解）结合使用，以去除顶点的边缘，而不删除它们所属的面。然后使用连接边缘操作符将已经是面一部分但没有连接边缘的两个顶点连接起来。这些工具非常适合任意重组复杂的拓扑。'
- en: '![Rotating edges to bring two triangles together allows you to eliminate them.](httpatomoreillycomsourcenostarchimages1538384.png.jpg)Figure 5-4. Rotating
    edges to bring two triangles together allows you to eliminate them.![Adding edge
    loops with the Loop Cut tool (CTRL-R) can get rid of triangles. If you add one
    between two triangles, you can eliminate them both in one go. Alternatively, you
    could delete one of the edge loops already present with similar effect.](httpatomoreillycomsourcenostarchimages1538386.png.jpg)Figure 5-5. Adding
    edge loops with the Loop Cut tool (CTRL-R) can get rid of triangles. If you add
    one between two triangles, you can eliminate them both in one go. Alternatively,
    you could delete one of the edge loops already present with similar effect.![Adding
    faces to remove poles. Adding one face loop across six poles reduces it to two
    five poles, which will subdivide much more cleanly.](httpatomoreillycomsourcenostarchimages1538388.png.jpg)Figure 5-6. Adding
    faces to remove poles. Adding one face loop across six poles reduces it to two
    five poles, which will subdivide much more cleanly.![This triangle hidden in the
    corner of an ear isn’t likely to cause much trouble.](httpatomoreillycomsourcenostarchimages1538390.png.jpg)Figure 5-7. This
    triangle hidden in the corner of an ear isn’t likely to cause much trouble.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![旋转边缘将两个三角形带到一起，可以消除它们。](httpatomoreillycomsourcenostarchimages1538384.png.jpg)图
    5-4. 旋转边缘将两个三角形带到一起，可以消除它们。![使用环切工具（CTRL-R）添加边环可以去除三角形。如果你在两个三角形之间添加一个，你可以一举去掉它们两个。或者，你也可以删除已经存在的一个边环，达到类似的效果。](httpatomoreillycomsourcenostarchimages1538386.png.jpg)图
    5-5. 使用环切工具（CTRL-R）添加边环可以去除三角形。如果你在两个三角形之间添加一个，你可以一举去掉它们两个。或者，你也可以删除已经存在的一个边环，达到类似的效果。![添加面以去除极点。将一个面环添加到六个极点之间，将其减少为两个五边形极点，这样细分效果会更加干净。](httpatomoreillycomsourcenostarchimages1538388.png.jpg)图
    5-6. 添加面以去除极点。将一个面环添加到六个极点之间，将其减少为两个五边形极点，这样细分效果会更加干净。![隐藏在耳朵角落的这个三角形不太可能引起太多问题。](httpatomoreillycomsourcenostarchimages1538390.png.jpg)图
    5-7. 隐藏在耳朵角落的这个三角形不太可能引起太多问题。'
- en: '****If you can’t get rid of it, hide it.**** If you really can’t get rid of
    a triangle, hide it where it won’t cause trouble or create subdivision artifacts,
    such as inside an ear or nostril or someplace really flat that doesn’t need to
    deform, as shown in [Figure 5-7](ch05.html#this_triangle_hidden_in_the_corner_of_an
    "Figure 5-7. This triangle hidden in the corner of an ear isn’t likely to cause
    much trouble.").'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '****如果你无法去除它，就隐藏它。**** 如果你真的无法去除某个三角形，可以把它隐藏到不会引起麻烦或产生细分伪影的地方，比如耳朵或鼻孔内，或者某个不需要变形的非常平坦的地方，如[图 5-7](ch05.html#this_triangle_hidden_in_the_corner_of_an
    "图 5-7. 这个隐藏在耳朵角落的三角形不太可能引起麻烦。")所示。'
- en: '****When in doubt, start over.**** If you managed to make something once, chances
    are you can do it again and get it right. It might take some extra time, but it’s
    usually worth it.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '****当不确定时，从头开始。**** 如果你曾经做成过某件事，通常你可以再次做到，并且做得更好。可能需要一些额外的时间，但通常是值得的。'
- en: Modeling the Details of the Jungle Temple
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 丛林神庙的细节建模
- en: The Jungle Temple scene was already blocked in, so next it needed to be refined
    to make it more final. This process required me to think about the shapes I wanted
    to create and to model more complex meshes with the shapes I wanted in the final
    renders.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 丛林神庙的场景已经被初步搭建完成，接下来需要进行精细化处理，使其更加接近最终效果。这个过程需要我思考想要创建的形状，并使用这些形状来建模出更复杂的网格，最终渲染出想要的效果。
- en: Walls
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 墙壁
- en: For the main walls of the Jungle Temple, I first laid out cubes to form the
    stone blocks of the wall (see [Figure 5-8](ch05.html#creating_the_stone_blocks_for_the_wallsd
    "Figure 5-8. Creating the stone blocks for the walls. First, I blocked in the
    walls with simple cubes, which I scaled and moved to build up the wall. Next,
    I damaged the walls a bit by adding some basic subdivisions and roughening some
    edges. Finally, I beveled the edges of the blocks using a Bevel modifier limited
    by angle.")). Beginning with the bottom row, I added each one by hand and modified
    its length to give some variation. Next, I built up the higher layers by duplicating
    and scaling the cubes. To add further variety, I selected blocks at random, moved
    them in or out from the wall a bit, and rotated them slightly to make the surface
    of the wall somewhat more uneven. Leaving the basic walls from the blocking-in
    stage behind the new blocks provided a filler for the gaps between the blocks.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于丛林神庙的主墙，我首先布置了立方体来形成墙壁的石块（参见[图 5-8](ch05.html#creating_the_stone_blocks_for_the_wallsd
    "图 5-8. 创建墙体的石块。首先，我用简单的立方体搭建了墙体，然后对其进行了缩放和移动以构建墙壁。接下来，我通过添加一些基本的细分并粗化一些边缘，使墙壁略有损坏。最后，我使用
    Bevel 修改器并将“限制”方法设置为角度来倒角。")）。从最底层开始，我手动添加每一块，并修改它们的长度以增加一些变化。接下来，我通过复制和缩放立方体，搭建了更高的层次。为了增加更多变化，我随机选择一些方块，将它们从墙体中移入或移出，并稍微旋转它们，使墙面的表面显得更加不平整。将初步搭建阶段的基础墙体留在新的方块后面，为方块之间的缝隙提供了填充物。
- en: To add a beveled edge to the blocks (see [Figure 5-8](ch05.html#creating_the_stone_blocks_for_the_wallsd
    "Figure 5-8. Creating the stone blocks for the walls. First, I blocked in the
    walls with simple cubes, which I scaled and moved to build up the wall. Next,
    I damaged the walls a bit by adding some basic subdivisions and roughening some
    edges. Finally, I beveled the edges of the blocks using a Bevel modifier limited
    by angle.")), I subdivided them a couple of times (select all [**A**] in Edit
    mode, then W▸Subdivide) and then added a Bevel modifier and set the “limit” method
    to Angle. The limit restricts the beveling to edges between faces at a sharp angle,
    and setting the angle to about 45° gives a nicely rounded bevel that is heavier
    on the corners of the blocks than at the edges. The sides are left alone.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给方块添加斜边（参见[图 5-8](ch05.html#creating_the_stone_blocks_for_the_wallsd "图 5-8.
    创建墙体的石块。首先，我用简单的立方体搭建了墙体，然后对其进行了缩放和移动以构建墙壁。接下来，我通过添加一些基本的细分并粗化一些边缘，使墙壁略有损坏。最后，我使用
    Bevel 修改器并将“限制”方法设置为角度来倒角。")），我对其进行了几次细分（在编辑模式下选择所有[**A**]，然后按 W▸Subdivide），接着添加了
    Bevel 修改器，并将“限制”方法设置为角度。限制将倒角仅应用于具有锐角的面之间的边缘，并且将角度设置为大约 45°可以得到一个圆滑的倒角，使方块的角部比边缘更重。边部保持不变。
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*When applied, the Bevel modifier can create errors that will turn your geometry
    into triangles and create a lot of duplicate vertices. To fix this, apply the
    modifier only once you’re finished modeling. Then, in Edit mode, select everything
    (A) and use the Remove Doubles (W▸Remove Doubles) operator to eliminate duplicated
    vertices. Next, use the Triangles to Quads operator (ALT-J) to return to a cleaner
    mesh without so many triangles. You can also bevel individual edges and vertices
    in Edit mode, using the Bevel operator (W▸Bevel).*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*应用 Bevel 修改器时，可能会出现将几何体转化为三角形并创建大量重复顶点的错误。为了解决这个问题，在完成建模后再应用修改器。然后，在编辑模式下，选择所有内容（A）并使用“移除重复顶点”（W▸Remove
    Doubles）操作来消除重复的顶点。接下来，使用“将三角形转换为四边形”（ALT-J）操作，将网格恢复到没有那么多三角形的更干净的状态。你也可以在编辑模式下对单独的边和顶点进行倒角，使用
    Bevel 操作符（W▸Bevel）。*'
- en: '![Creating the stone blocks for the walls. First, I blocked in the walls with
    simple cubes, which I scaled and moved to build up the wall. Next, I damaged the
    walls a bit by adding some basic subdivisions and roughening some edges. Finally,
    I beveled the edges of the blocks using a Bevel modifier limited by angle.](httpatomoreillycomsourcenostarchimages1538392.png.jpg)Figure 5-8. Creating
    the stone blocks for the walls. First, I blocked in the walls with simple cubes,
    which I scaled and moved to build up the wall. Next, I damaged the walls a bit
    by adding some basic subdivisions and roughening some edges. Finally, I beveled
    the edges of the blocks using a Bevel modifier limited by angle.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![为墙壁创建石块。首先，我使用简单的立方体构建墙壁，通过缩放和移动来搭建墙体。接下来，我通过添加一些基本的细分并粗化一些边缘来稍微破坏墙壁。最后，我使用角度限制的
    Bevel 修改器对方块的边缘进行了倒角处理。](httpatomoreillycomsourcenostarchimages1538392.png.jpg)图
    5-8. 为墙壁创建石块。首先，我使用简单的立方体构建墙壁，通过缩放和移动来搭建墙体。接下来，我通过添加一些基本的细分并粗化一些边缘来稍微破坏墙壁。最后，我使用角度限制的
    Bevel 修改器对方块的边缘进行了倒角处理。'
- en: For the block details, I subdivided some of the blocks and then added extra
    features, such as a crack down the middle, a chunk out of a corner, and a split.
    I added loop cuts or subdivided specific parts and moved vertices around to create
    cracks, dents, and chips. Because the mesh won’t be subdivided or deformed significantly,
    there’s no need to avoid triangles here; they won’t cause problems.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些方块的细节，我细分了一些方块，并添加了额外的特征，比如中间的裂缝、角落的缺口和分裂。我添加了环形切割或细分了特定的部分，并移动了顶点来创建裂缝、凹陷和缺口。因为网格不会被大幅度细分或变形，所以这里不需要避免三角形；它们不会造成问题。
- en: To prevent the blocks from looking faceted, I set their shading mode to Smooth
    and then added an Edge Split modifier to split the mesh at certain edges in order
    to produce separate surfaces (see [Figure 5-9](ch05.html#final_wallscomma_with_a_bevel_and_an_edg
    "Figure 5-9. The final walls, with a Bevel and an Edge Split modifier to give
    them beveled edges and flat sides")). The Edge Split modifier breaks the mesh
    into separate pieces so that when shaded smooth or when further modifiers are
    applied, the edge between the pieces is preserved. You can set Edge Split to split
    the mesh either along edges tagged as Sharp in Edit mode (CTRL-E▸Mark Sharp) or
    along edges with sharp enough angles between their faces. Using the angles only
    with a setting of 30° resulted in nice-looking blocks.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止方块看起来有棱角，我将它们的着色模式设置为平滑，然后添加了一个 Edge Split 修改器，在特定的边缘处拆分网格，以产生独立的表面（见[图
    5-9](ch05.html#final_wallscomma_with_a_bevel_and_an_edg "图 5-9. 最终的墙壁，使用 Bevel
    和 Edge Split 修改器为它们提供了倒角边缘和平坦的侧面")）。Edge Split 修改器将网格拆分成独立的部分，这样在平滑着色或应用进一步修改器时，部分之间的边缘会被保留下来。你可以设置
    Edge Split 使网格沿着在编辑模式下标记为 Sharp 的边缘（CTRL-E▸Mark Sharp）或沿着面之间有足够尖锐角度的边缘进行拆分。仅使用
    30° 的角度设置可以得到外观不错的方块。
- en: I created the other incidental blocks and paving slabs in the same way as the
    walls, using the initial block-in cubes as a guide for placement and then deleting
    the old geometry once the new blocks were placed. The final blocks are shown in
    [Figure 5-10](ch05.html#rest_of_the_stone_blocks_in_the_scene_we "Figure 5-10. The
    rest of the stone blocks in the scene were modeled in the same way as the walls.").
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我按照与墙壁相同的方法创建了其他附加的方块和铺路板，使用初始的立方体作为放置的指南，随后在新方块放置完毕后删除了旧的几何体。最终的方块如[图 5-10](ch05.html#rest_of_the_stone_blocks_in_the_scene_we
    "图 5-10. 场景中其他石块的建模方式与墙壁相同")所示。
- en: '![The final walls, with a Bevel and an Edge Split modifier to give them beveled
    edges and flat sides](httpatomoreillycomsourcenostarchimages1538394.png.jpg)Figure 5-9. The
    final walls, with a Bevel and an Edge Split modifier to give them beveled edges
    and flat sides'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![最终的墙壁，使用了倒角和边缘分割修改器，使其具有倒角边缘和平坦的侧面](httpatomoreillycomsourcenostarchimages1538394.png.jpg)图
    5-9. 最终的墙壁，使用了倒角和边缘分割修改器，使其具有倒角边缘和平坦的侧面。'
- en: Statues
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 雕像
- en: I modeled the statues in the corners by the door of the Jungle Temple using
    fairly basic building blocks and my concept art as a guide. Each part began with
    a simple primitive—usually a cube or cylinder—transformed, subdivided, and extruded
    to create what I need.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我用相当基础的构建块和概念艺术作为指南，在丛林神庙门口的角落建模了雕像。每一部分都从一个简单的原始体—通常是一个立方体或圆柱体—开始，通过变换、细分和挤压来创建所需的形状。
- en: As shown in [Figure 5-11](ch05.html#statue_model_exploded_into_its_constitue
    "Figure 5-11. The statue model exploded into its constituent parts. Most are derived
    from simple cubes or cylinders."), each part is fairly simple. To add beveled
    edges, I used the same method that I used for the wall and floor blocks. Adding
    some loop cuts around the ends of some pieces (for example, to the “legs” and
    the ends of the arms) allowed these edges to retain their square shape and sharper
    corners when beveled, without too much subdivision.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图 5-11](ch05.html#statue_model_exploded_into_its_constitue "图 5-11. 雕像模型被分解成其组成部分。大多数部分源自简单的立方体或圆柱体")所示，每个部分都相当简单。为了添加倒角边缘，我使用了与墙壁和地面块相同的方法。通过在一些部分的末端添加环形切割（例如，在“腿部”与“手臂”末端），可以使这些边缘在倒角时保持其方形形状和锐角，而不会过度细分。
- en: '![The rest of the stone blocks in the scene were modeled in the same way as
    the walls.](httpatomoreillycomsourcenostarchimages1538396.png.jpg)Figure 5-10. The
    rest of the stone blocks in the scene were modeled in the same way as the walls.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![场景中的其他石块与墙壁采用相同的建模方式。](httpatomoreillycomsourcenostarchimages1538396.png.jpg)图
    5-10. 场景中的其他石块与墙壁采用相同的建模方式。'
- en: Stone Carvings
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 石雕
- en: For the stone glyphs, I used my concept art as a single orthographic reference,
    loading it as a background image, as discussed in [Chapter 3](ch03.html "Chapter 3. Preparation").
    Then, beginning with a plane, I traced each piece of the designs, sticking primarily
    to quads where possible. Next, I extruded the whole design downward to give it
    some thickness and deleted the new faces afterward to leave just the sides and
    front of the design. By placing edges along the forms of the design’s interior
    elements, I could move the grooves in the design downward to create the details.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于石刻符文，我使用概念艺术作为唯一的正投影视图，将其加载为背景图像，如[第 3 章](ch03.html "第 3 章. 准备工作")所讨论的那样。接着，从一个平面开始，我勾画出每个设计部分，尽可能保持主要使用四边形。然后，我将整个设计向下挤压，赋予其一定的厚度，并随后删除新面，仅保留设计的侧面和前面。通过在设计内部元素的形状上放置边缘，我能够将设计中的沟槽向下移动，创造出细节。
- en: To clean up the design, I used creasing (see [Figure 5-12](ch05.html#creating_the_stone_carvingsdot_i_first_b
    "Figure 5-12. Creating the stone carvings. I first blocked out the carvings as
    individual pieces over the concept art, using primarily quads. Next, I tagged
    some edges as creased (purple) to give sharp edges when subdivided. Finally, I
    added Subsurf and Edge Split modifiers to give smooth carvings with sharp edges
    where the edges had been tagged. The result uses fewer polygons and simpler topology
    than if I had used support loops to produce sharp edges.")). By adding a Subsurf
    modifier and tagging edges as creased, you can create smooth objects with sharp
    creases along the tagged edges. Creasing allowed me to add tight creases to the
    model without using more polygons than necessary. Adding an Edge Split modifier
    after the Subsurf modifier then gave a nice smooth mesh with sharp transitions
    at the creased edges.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清理设计，我使用了折痕（见[图 5-12](ch05.html#creating_the_stone_carvingsdot_i_first_b "图
    5-12. 创建石雕。我首先在概念艺术上将雕刻块出为独立的部分，主要使用四边形。接着，我将一些边缘标记为折痕（紫色），以便细分时产生锋利的边缘。最后，我添加了
    Subsurf 和 Edge Split 修改器，以便在标记的边缘处生成光滑的雕刻和锋利的过渡。最终结果使用的多边形比使用支撑环来产生锋利边缘时要少，拓扑结构也更简单。")）。通过添加
    Subsurf 修改器并将边缘标记为折痕，您可以创建沿标记边缘处具有锋利折痕的光滑物体。折痕让我能够在不增加多余多边形的情况下，为模型添加紧凑的折痕。然后在
    Subsurf 修改器后添加 Edge Split 修改器，生成了光滑的网格，并在折痕边缘处形成了清晰的过渡。
- en: '![The statue model exploded into its constituent parts. Most are derived from
    simple cubes or cylinders.](httpatomoreillycomsourcenostarchimages1538398.png.jpg)Figure 5-11. The
    statue model exploded into its constituent parts. Most are derived from simple
    cubes or cylinders.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![雕像模型被分解成其组成部分。大部分来自简单的立方体或圆柱体。](httpatomoreillycomsourcenostarchimages1538398.png.jpg)图
    5-11. 雕像模型被分解成其组成部分。大部分来自简单的立方体或圆柱体。'
- en: With the carvings complete, I moved on to placing them in my scene by replacing
    some of the rows of stone blocks in the walls with rows of the glyphs. To do this,
    I lined up all six glyphs in a row and then used an Array modifier to repeat the
    design to fill the length of the wall (see [Figure 5-13](ch05.html#using_the_array_modifier_to_repeat_the_s
    "Figure 5-13. Using the Array modifier to repeat the stone carvings multiple times")).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 完成雕刻后，我开始将它们放入我的场景中，通过用雕刻符文的行替换墙壁上的一些石块行来实现。为此，我将所有六个符文排成一行，然后使用数组修改器将设计重复，填充整个墙壁的长度（参见[图
    5-13](ch05.html#using_the_array_modifier_to_repeat_the_s "图 5-13. 使用数组修改器重复石雕多次"))。
- en: Tagging Edges
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 标记边缘
- en: The edges of a mesh can be tagged or marked in a variety of ways, each of which
    tells different Blender operators and modifiers how to perform operations on the
    mesh. The shortcut for Edge operators, including Tagging, in Edit mode is CTRL-E.
    Edges can be marked as Sharp, which allows operators like Bevel and Edge Split
    to work only on these edges. They can also be given a *crease* value, either from
    the CTRL-E menu or with SHIFT-E, which tells the Subsurf modifier not to smooth
    these edges when doing subdivision, resulting in nice sharp edges.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 网格的边缘可以通过多种方式标记或标注，每种方法告诉不同的 Blender 操作符和修改器如何对网格进行操作。在编辑模式下，边缘操作符（包括标记）快捷键是
    CTRL-E。边缘可以标记为锐利，这样像倒角和边缘分割这样的操作仅对这些边缘起作用。它们还可以被赋予*折痕*值，无论是在 CTRL-E 菜单中，还是使用 SHIFT-E，这告诉
    Subsurf 修改器在进行细分时不平滑这些边缘，从而形成漂亮的锐利边缘。
- en: '![Creating the stone carvings. I first blocked out the carvings as individual
    pieces over the concept art, using primarily quads. Next, I tagged some edges
    as creased (purple) to give sharp edges when subdivided. Finally, I added Subsurf
    and Edge Split modifiers to give smooth carvings with sharp edges where the edges
    had been tagged. The result uses fewer polygons and simpler topology than if I
    had used support loops to produce sharp edges.](httpatomoreillycomsourcenostarchimages1538400.png.jpg)Figure 5-12. Creating
    the stone carvings. I first blocked out the carvings as individual pieces over
    the concept art, using primarily quads. Next, I tagged some edges as creased (purple)
    to give sharp edges when subdivided. Finally, I added Subsurf and Edge Split modifiers
    to give smooth carvings with sharp edges where the edges had been tagged. The
    result uses fewer polygons and simpler topology than if I had used support loops
    to produce sharp edges.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![创建石雕。我首先在概念艺术上将雕刻分解成单独的部分，主要使用四边形。接着，我将一些边缘标记为折痕（紫色），以便在细分时形成锐利的边缘。最后，我添加了
    Subsurf 和 Edge Split 修改器，使雕刻表面光滑，同时在标记的边缘处保持锐利的边缘。这样得到的效果比使用支撑环路生成锐利边缘要少使用多边形且拓扑更简单。](httpatomoreillycomsourcenostarchimages1538400.png.jpg)图
    5-12. 创建石雕。我首先在概念艺术上将雕刻分解成单独的部分，主要使用四边形。接着，我将一些边缘标记为折痕（紫色），以便在细分时形成锐利的边缘。最后，我添加了
    Subsurf 和 Edge Split 修改器，使雕刻表面光滑，同时在标记的边缘处保持锐利的边缘。这样得到的效果比使用支撑环路生成锐利边缘要少使用多边形且拓扑更简单。'
- en: Sharp Edges and Subdivision
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 锐利边缘与细分
- en: 'Creasing is one way to achieve a sharp crease in a subdivided mesh; another
    way is with *support loops*. Support loops work by placing two or more edge loops
    close together at the edge of a form. When the mesh is subdivided, the new geometry
    can’t be smoothed out as much because the extra geometry defines the corner more
    tightly (see [Figure 5-14](ch05.html#two_methods_of_getting_sharp_edges_when "Figure 5-14. Two
    methods of getting sharp edges when working with a subdivision surface. Top: Unaltered
    mesh with a gentle slope and a Subdivision Surface modifier applied. Middle: Support
    loops added to give sharp edges. Bottom: Edges creased to give sharp edges (without
    extra geometry).")).'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 增加折痕是获得锐利折痕的其中一种方法；另一种方法是使用*支撑环路*。支撑环路的原理是将两个或更多的边环路紧密地放置在形状的边缘处。当网格被细分时，由于额外的几何体限制了光滑度，新的几何形状无法像平常一样平滑，从而使角落更加锐利（参见[图
    5-14](ch05.html#two_methods_of_getting_sharp_edges_when "图 5-14. 在细分表面工作时获得锐利边缘的两种方法。顶部：未改变的网格，具有轻微的坡度，并应用了细分表面修改器。中间：添加支撑环路以提供锐利边缘。底部：通过折痕使边缘锐利（没有额外几何体）。"))。
- en: Both methods have their place. Support loops are the better choice when you’re
    trying to produce nicely beveled edges and need fine control over precisely how
    your forms look. However, if your goal is to produce very sharp creases or you
    are working with simpler models with less extra topology, creasing is preferable.
    You can always mix and match both methods as the situation demands.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法各有其适用场景。当你试图创建漂亮的倒角边缘并且需要精细控制物体外观时，支撑环是更好的选择。然而，如果你的目标是创建非常锋利的折痕，或者你正在处理简单的模型并且没有太多额外的拓扑结构，那么折痕方法更可取。你可以根据具体情况混合使用这两种方法。
- en: 'Support loops are also useful for ensuring that objects subdivide to give the
    shapes you want. For example, [Figure 5-15](ch05.html#clockwise_from_top_left_a_cube_with_zero
    "Figure 5-15. Clockwise from top left: A cube with zero loops, one loop, two widely
    spaced loops, and two evenly spaced loops running around the middle of each side.
    As the edge loops get closer to the edge, the corners become more sharply defined.")
    shows a cube with a Subsurf modifier applied and its wireframe visible. With no
    support loops, the modifier turns it into a sphere. With extra support loops running
    around the middle of the faces, the object more closely resembles a cube, and
    shifting these support loops toward the edges of the cube makes the corners sharper.
    This is useful when modeling all sorts of surfaces.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 支撑环在确保物体细分并呈现出你想要的形状时也很有用。例如，[图 5-15](ch05.html#clockwise_from_top_left_a_cube_with_zero
    "图 5-15. 从左上角顺时针：一个没有支撑环、一个支撑环、两个间隔较远的支撑环，以及两个均匀间隔的支撑环，环绕在每一面中部。随着边缘环越来越靠近边缘，角落变得更加锐利。")展示了一个应用了Subsurf修饰器并显示出线框的立方体。没有支撑环时，修饰器将其变成一个球体。当在面中部增加额外的支撑环时，物体更像一个立方体，将这些支撑环移向立方体的边缘，可以使角落更加锐利。这在建模各种表面时非常有用。
- en: '![Using the Array modifier to repeat the stone carvings multiple times](httpatomoreillycomsourcenostarchimages1538402.png.jpg)Figure 5-13. Using
    the Array modifier to repeat the stone carvings multiple times![Two methods of
    getting sharp edges when working with a subdivision surface. Top: Unaltered mesh
    with a gentle slope and a Subdivision Surface modifier applied. Middle: Support
    loops added to give sharp edges. Bottom: Edges creased to give sharp edges (without
    extra geometry).](httpatomoreillycomsourcenostarchimages1538404.png.jpg)Figure 5-14. Two
    methods of getting sharp edges when working with a subdivision surface. Top: Unaltered
    mesh with a gentle slope and a Subdivision Surface modifier applied. Middle: Support
    loops added to give sharp edges. Bottom: Edges creased to give sharp edges (without
    extra geometry).![Clockwise from top left: A cube with zero loops, one loop, two
    widely spaced loops, and two evenly spaced loops running around the middle of
    each side. As the edge loops get closer to the edge, the corners become more sharply
    defined.](httpatomoreillycomsourcenostarchimages1538406.png.jpg)Figure 5-15. Clockwise
    from top left: A cube with zero loops, one loop, two widely spaced loops, and
    two evenly spaced loops running around the middle of each side. As the edge loops
    get closer to the edge, the corners become more sharply defined.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![使用阵列修饰器重复石雕多次](httpatomoreillycomsourcenostarchimages1538402.png.jpg)图 5-13.
    使用阵列修饰器重复石雕多次！[在处理细分曲面时获得锐利边缘的两种方法。顶部：未修改的网格，带有轻微坡度并应用了细分曲面修饰器。中间：添加支撑环以获得锐利边缘。底部：折痕边缘以获得锐利边缘（没有额外的几何体）。](httpatomoreillycomsourcenostarchimages1538404.png.jpg)图
    5-14. 在处理细分曲面时获得锐利边缘的两种方法。顶部：未修改的网格，带有轻微坡度并应用了细分曲面修饰器。中间：添加支撑环以获得锐利边缘。底部：折痕边缘以获得锐利边缘（没有额外的几何体）。![从左上角顺时针：一个没有支撑环、一个支撑环、两个间隔较远的支撑环，以及两个均匀间隔的支撑环，环绕在每一面中部。随着边缘环越来越靠近边缘，角落变得更加锐利。](httpatomoreillycomsourcenostarchimages1538406.png.jpg)图
    5-15. 从左上角顺时针：一个没有支撑环、一个支撑环、两个间隔较远的支撑环，以及两个均匀间隔的支撑环，环绕在每一面中部。随着边缘环越来越靠近边缘，角落变得更加锐利。'
- en: Plants
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 植物
- en: The plants in this scene are simple. To create them, I began by modeling a few
    varieties of leaves from planes; I scaled and subdivided the planes into leafy
    shapes (see [Figure 5-16](ch05.html#plants_were_all_made_with_very_simple_me "Figure 5-16. The
    plants were all made with very simple meshes (shown with a Subdivision Surface
    modifier applied).")). Next, I started duplicating these different leaf objects
    and placing them around the scene. By creating linked duplicates with ALT-D, you
    can create multiple copies of the same mesh that all update together when you
    change one duplicate, which makes creating UVs and textures much easier because
    you only have to do so once for each type of plant. By scaling and rotating these
    duplicates in Object mode and placing them around the scene, you can give the
    impression of a lot of variation without having to create a lot of different meshes
    (see [Figure 5-17](ch05.html#duplicating_the_different_plant_componen "Figure 5-17. Duplicating
    the different plant components and placing them around the scene. Varying the
    scale and rotation of the duplicates can go a long way toward making them distinctive.")).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 该场景中的植物很简单。为了创建它们，我首先从平面建模了几种不同类型的叶子；我将平面缩放并细分成叶状形状（见[图 5-16](ch05.html#plants_were_all_made_with_very_simple_me
    "图 5-16。这些植物都是用非常简单的网格制作的（显示应用了细分曲面修饰符）。")）。接下来，我开始复制这些不同的叶子对象并将它们放置在场景中。通过使用
    ALT-D 创建链接副本，你可以创建多个相同网格的副本，当你更改其中一个副本时，所有副本都会同步更新，这使得创建 UV 和纹理变得更加容易，因为你只需要为每种植物类型创建一次。通过在对象模式下缩放和旋转这些副本，并将它们放置在场景中，你可以在不创建大量不同网格的情况下，表现出多样性的效果（见[图
    5-17](ch05.html#duplicating_the_different_plant_componen "图 5-17。复制不同的植物组件并将它们放置在场景中。通过改变副本的缩放和旋转，可以使它们具有明显的独特性。")）。
- en: There are two ways to duplicate a mesh in Object mode. One way is to create
    a simple copy, which then becomes a unique object (SHIFT-D); the other is to duplicate
    a linked copy (ALT-D), which retains the same mesh data and materials as the original
    and updates along with it. You can still apply different modifiers to a linked
    duplicate and move, scale, and rotate it independently in Object mode, but its
    mesh data and materials, as well as other data, will remain linked with the original
    object; if you edit one, the changes are applied to both.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在对象模式下有两种复制网格的方法。一种是创建一个简单的副本，它成为一个独立的对象（SHIFT-D）；另一种是复制一个链接副本（ALT-D），它保留与原始网格相同的数据和材质，并与之同步更新。你仍然可以在链接副本上应用不同的修饰符，并在对象模式下独立移动、缩放和旋转它，但它的网格数据和材质以及其他数据会与原始对象保持链接；如果你编辑其中一个，所有更改都会同时应用到两个对象。
- en: 'Both methods are extremely useful for different tasks. Basically, you should
    use simple duplicates in the following situations:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法对于不同任务都非常有用。基本上，你应该在以下情况使用简单的复制：
- en: You want to edit the new object independently.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你希望独立编辑新的对象。
- en: '![The plants were all made with very simple meshes (shown with a Subdivision
    Surface modifier applied).](httpatomoreillycomsourcenostarchimages1538408.png.jpg)Figure 5-16. The
    plants were all made with very simple meshes (shown with a Subdivision Surface
    modifier applied).'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![这些植物都是用非常简单的网格制作的（显示应用了细分曲面修饰符）。](httpatomoreillycomsourcenostarchimages1538408.png.jpg)图
    5-16。这些植物都是用非常简单的网格制作的（显示应用了细分曲面修饰符）。'
- en: You plan on recombining the new mesh with other elements in the scene.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你计划将新的网格与场景中的其他元素重新组合。
- en: You want to keep the old mesh as a backup or alternative.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你希望将旧网格保留为备份或备用选项。
- en: 'You should use linked duplicates if the following is true:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果以下情况适用，你应该使用链接副本：
- en: You want to create many copies of a single object and don’t want to edit them
    individually.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你希望创建多个单一对象的副本，并且不想单独编辑它们。
- en: You want only one set of UVs and materials for multiple objects.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你希望多个对象共享一组 UV 和材质。
- en: '![Duplicating the different plant components and placing them around the scene.
    Varying the scale and rotation of the duplicates can go a long way toward making
    them distinctive.](httpatomoreillycomsourcenostarchimages1538410.png.jpg)Figure 5-17. Duplicating
    the different plant components and placing them around the scene. Varying the
    scale and rotation of the duplicates can go a long way toward making them distinctive.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![复制不同的植物组件并将它们放置在场景中。通过改变副本的缩放和旋转，可以使它们具有明显的独特性。](httpatomoreillycomsourcenostarchimages1538410.png.jpg)图
    5-17。复制不同的植物组件并将它们放置在场景中。通过改变副本的缩放和旋转，可以使它们具有明显的独特性。'
- en: When you select a linked duplicate, you can see how many users (copies) of that
    object are using the same datablock by examining its object data properties in
    the Properties panel (see [Figure 5-18](ch05.html#checking_the_number_of_users_of_a_mesh_d
    "Figure 5-18. Checking the number of users of a mesh datablock. Click the number
    (4 in this case) next to the datablock’s name to create a new copy that you can
    edit independently. The F icon will create a “fake” user of that datablock, which
    will save the object and prevent it from being deleted when you save the .blend
    file, even if there are no instances of that mesh in the scene.")). You can also
    make the object unique by clicking the number icon next to the datablock’s name.
    Making the object unique creates a new mesh datablock that is now independent
    of the one it was copied from, allowing you to edit the object’s mesh and change
    its materials separately (as if it were a simple copy).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当你选择一个链接的重复对象时，你可以通过检查其对象数据属性面板中的数据块信息，看到有多少用户（副本）在使用相同的数据块（参见[图 5-18](ch05.html#checking_the_number_of_users_of_a_mesh_d
    "图 5-18. 检查网格数据块的用户数量。点击数据块名称旁边的数字（此例中为4）可以创建一个新的副本，你可以独立编辑。F 图标将创建该数据块的“伪”用户，这样即使场景中没有该网格实例，当你保存
    .blend 文件时，仍会保存该对象并防止其被删除。")）。你还可以通过点击数据块名称旁边的数字图标来使对象变得唯一。将对象设为唯一会创建一个新的网格数据块，它现在独立于原始副本，你可以单独编辑对象的网格并更改其材质（就像它是一个简单的副本一样）。
- en: IvyGen
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IvyGen
- en: The IvyGen add-on for Blender is a procedural generator that allows you to quickly
    create ivy-like vines that creep over your scene (see [Figure 5-19](ch05.html#using_ivygen_to_generate_procedural_vine
    "Figure 5-19. Using IvyGen to generate procedural vines. The parameters for how
    your ivy will grow are in the Tool Options region on the left when using IvyGen.
    For clarity here, I’ve added a green material for the leaves and a brown material
    for the vines.")). To use it, first enable it from the User Preferences editor
    (**File**▸**User Preferences**) and then look under the Add-On tab in the Add
    Curve category. Once you have enabled the add-on, you should have the option to
    grow ivy on a selected object via the Add menu (SHIFT-A▸**Curve**▸**AddIvyToMesh**
    in Object mode).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Blender 的 IvyGen 插件是一个程序生成器，允许你快速创建类似常春藤的藤蔓，爬满你的场景（参见[图 5-19](ch05.html#using_ivygen_to_generate_procedural_vine
    "图 5-19. 使用 IvyGen 生成程序性藤蔓。当使用 IvyGen 时，你可以在左侧的工具选项区域中调整藤蔓生长的参数。为了清晰起见，我已为叶子添加了绿色材质，为藤蔓添加了棕色材质。")）。要使用它，首先从用户偏好设置编辑器中启用它（**文件**▸**用户偏好设置**），然后在插件选项卡下的“添加曲线”类别中找到它。启用插件后，你应该可以通过添加菜单（在对象模式下按
    SHIFT-A▸**曲线**▸**添加常春藤到网格**）在选定对象上生成常春藤。
- en: '![Checking the number of users of a mesh datablock. Click the number (4 in
    this case) next to the datablock’s name to create a new copy that you can edit
    independently. The F icon will create a “fake” user of that datablock, which will
    save the object and prevent it from being deleted when you save the .blend file,
    even if there are no instances of that mesh in the scene.](httpatomoreillycomsourcenostarchimages1538412.png.jpg)Figure 5-18. Checking
    the number of users of a mesh datablock. Click the number (4 in this case) next
    to the datablock’s name to create a new copy that you can edit independently.
    The F icon will create a “fake” user of that datablock, which will save the object
    and prevent it from being deleted when you save the .blend file, even if there
    are no instances of that mesh in the scene.![Using IvyGen to generate procedural
    vines. The parameters for how your ivy will grow are in the Tool Options region
    on the left when using IvyGen. For clarity here, I’ve added a green material for
    the leaves and a brown material for the vines.](httpatomoreillycomsourcenostarchimages1538414.png.jpg)Figure 5-19. Using
    IvyGen to generate procedural vines. The parameters for how your ivy will grow
    are in the Tool Options region on the left when using IvyGen. For clarity here,
    I’ve added a green material for the leaves and a brown material for the vines.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![检查网格数据块的用户数量。点击数据块名称旁的数字（此处为4）以创建一个新的副本，你可以独立编辑。F 图标将创建该数据块的“虚拟”用户，这将保存对象并防止它在保存
    .blend 文件时被删除，即使场景中没有该网格的实例。](httpatomoreillycomsourcenostarchimages1538412.png.jpg)图
    5-18. 检查网格数据块的用户数量。点击数据块名称旁的数字（此处为4）以创建一个新的副本，你可以独立编辑。F 图标将创建该数据块的“虚拟”用户，这将保存对象并防止它在保存
    .blend 文件时被删除，即使场景中没有该网格的实例。![使用 IvyGen 生成程序化藤蔓。当使用 IvyGen 时，藤蔓的生长参数位于左侧的工具选项区域。为了清晰起见，我在这里为叶子添加了绿色材质，为藤蔓添加了棕色材质。](httpatomoreillycomsourcenostarchimages1538414.png.jpg)图
    5-19. 使用 IvyGen 生成程序化藤蔓。当使用 IvyGen 时，藤蔓的生长参数位于左侧的工具选项区域。为了清晰起见，我在这里为叶子添加了绿色材质，为藤蔓添加了棕色材质。'
- en: In order for IvyGen to generate vines, it needs a single mesh object for them
    to grow over, so we need to create a new mesh that includes all of the geometry
    we want to grow vines over. To do so, select all of the objects you want the ivy
    to cover, duplicate them (SHIFT-D), apply any modifiers (using the **Convert to
    Mesh** operator in Object mode—ALT-C), and merge them into one object (CTRL-J).
    The result should be one object. If your scene has a high poly count, you might
    want to skip applying modifiers that increase the poly count a lot in order to
    give you a lower-poly mesh to grow ivy over; unfortunately, this may come at the
    cost of some accuracy in how it will grow.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 IvyGen 生成藤蔓，它需要一个单一的网格对象供藤蔓生长，因此我们需要创建一个新网格，包含我们希望藤蔓生长覆盖的所有几何体。为此，选择所有你希望藤蔓覆盖的对象，复制它们（SHIFT-D），应用任何修改器（在对象模式下使用**转换为网格**操作符——ALT-C），并将它们合并为一个对象（CTRL-J）。结果应该是一个对象。如果你的场景中有很高的多边形数量，你可能想跳过应用那些大幅增加多边形数量的修改器，以便为藤蔓生长提供一个低多边形的网格；不幸的是，这可能会牺牲一些藤蔓生长的精确度。
- en: Later, once you’ve finished growing your ivy, delete this duplicate or move
    it to another layer so that it doesn’t get in your way (**M**).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了藤蔓的生长，删除这个副本或将其移动到另一个层级，以免它妨碍你的操作（**M**）。
- en: Next, place the 3D cursor where you want the ivy to start and activate IvyGen
    with the Add Curve menu (SHIFT-A▸**Add Curve**▸**Add Ivy To Mesh**). The IvyGen
    allows you to tweak numerous parameters to determine how the ivy looks, the most
    important of which are the Max Ivy Length option, which determines how far the
    ivy spreads, and the Ivy Size and Leaf Size options, which determine the thickness
    of the vines and the size of the leaves. The leaf probability option determines
    the leaf density. Other options, like Float Length and Adhesion Length, determine
    how far the vines can reach out from the wall and how they are affected by gravity.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将 3D 光标放置在你希望藤蔓开始生长的位置，并通过添加曲线菜单（SHIFT-A▸**添加曲线**▸**将藤蔓添加到网格**）激活 IvyGen。IvyGen
    允许你调整多个参数来决定藤蔓的外观，其中最重要的参数是最大藤蔓长度选项，它决定藤蔓扩展的距离，藤蔓大小和叶子大小选项，它们决定藤蔓的粗细和叶子的大小。叶子概率选项决定叶子的密度。其他选项，如浮动长度和附着长度，决定藤蔓从墙面延伸的距离以及它们如何受到重力的影响。
- en: Keep tweaking IvyGen’s settings and pressing **Update Ivy** to regenerate your
    ivy with any new settings until you’re happy with the look of your foliage. Keep
    in mind that the higher you set the Max Ivy Length, the longer the ivy will take
    to generate. Also, if you want to cover a large area, it’s easier to run IvyGen
    repeatedly using different starting locations in order to create multiple ivy
    meshes. For example, in the Jungle Temple scene, I hid the starting locations
    in the corners of the scene in a couple of different starting locations and let
    my ivy grow out from there. You can see the final results in [Figure 5-21](ch05.html#final_modeled_jungle_temple_scene
    "Figure 5-21. The final modeled Jungle Temple scene").
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 不断调整IvyGen的设置，并按下**更新藤蔓**按钮，直到你对藤蔓的外观满意为止。请记住，设置较高的最大藤蔓长度时，藤蔓生成的时间会更长。此外，如果你想覆盖较大的区域，最好反复运行IvyGen，使用不同的起始位置来创建多个藤蔓网格。例如，在丛林神庙场景中，我将起始位置隐藏在场景的几个角落，然后让藤蔓从这些地方生长出来。你可以在[图5-21](ch05.html#final_modeled_jungle_temple_scene
    "图5-21。最终建模的丛林神庙场景")中看到最终效果。
- en: '![Adding puddles to the scene by first creating depressions in the main ground
    plane mesh and then adding a second flat plane to intersect with it](httpatomoreillycomsourcenostarchimages1538416.png.jpg)Figure 5-20. Adding
    puddles to the scene by first creating depressions in the main ground plane mesh
    and then adding a second flat plane to intersect with it![The final modeled Jungle
    Temple scene](httpatomoreillycomsourcenostarchimages1538418.png.jpg)Figure 5-21. The
    final modeled Jungle Temple scene'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![通过先在主地面平面网格中创建凹陷，然后添加第二个平面与其相交，从而向场景中添加水坑](httpatomoreillycomsourcenostarchimages1538416.png.jpg)图5-20。通过先在主地面平面网格中创建凹陷，然后添加第二个平面与其相交，从而向场景中添加水坑！[最终建模的丛林神庙场景](httpatomoreillycomsourcenostarchimages1538418.png.jpg)图5-21。最终建模的丛林神庙场景'
- en: IvyGen also creates automatic UV coordinates for the leaves and vines it generates,
    as well as assigning material slots to them. This feature will greatly speed up
    texturing and assigning materials to your ivy later. (See [Chapter 8](ch08.html
    "Chapter 8. UV Unwrapping") and [Chapter 12](ch12.html "Chapter 12. Materials")
    for more on UV unwrapping and materials.)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: IvyGen还会为它生成的叶子和藤蔓自动创建UV坐标，并为它们分配材质槽。这项功能将大大加快后续在藤蔓上进行纹理和材质分配的速度。（有关UV展开和材质的更多信息，请参见[第8章](ch08.html
    "第8章。UV展开")和[第12章](ch12.html "第12章。材质")。）
- en: Ground/Soil
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 地面/土壤
- en: To make the ground a bit more interesting, I subdivided it a couple of times
    and roughened it up a bit with the Sculpt tools, which I’ll discuss in detail
    in [Chapter 6](ch06.html "Chapter 6. Sculpting"). Next, I added a new plane (this
    time keeping it unsubdivided and perfectly flat) and placed it just below the
    average height of the ground so that some of the deeper areas poked down through
    it. This produces the effect of puddles on the ground (see [Figure 5-20](ch05.html#adding_puddles_to_the_scene_by_first_cre
    "Figure 5-20. Adding puddles to the scene by first creating depressions in the
    main ground plane mesh and then adding a second flat plane to intersect with it")).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让地面看起来更有趣，我将其细分了几次，并使用雕刻工具稍微弄得粗糙一些，具体内容我将在[第6章](ch06.html "第6章。雕刻")中详细讨论。接着，我添加了一个新的平面（这次保持它没有细分并且完全平坦），并将其放置在地面平均高度下方，以便一些较深的区域能够穿透平面。这产生了地面上水坑的效果（见[图5-20](ch05.html#adding_puddles_to_the_scene_by_first_cre
    "图5-20。通过先在主地面平面网格中创建凹陷，然后添加第二个平面与其相交，从而向场景中添加水坑")）。
- en: Additionally, I created piles of dirt in the corners of the scene simply by
    creating a plane, subdividing it several times, and using proportional editing
    to add lumps. By combining this with a bit of sculpting to build up dirt in the
    cracks and corners between the blocks and other elements, I was able to give the
    surroundings more of an aged look. The final scene is shown in [Figure 5-21](ch05.html#final_modeled_jungle_temple_scene
    "Figure 5-21. The final modeled Jungle Temple scene").
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我通过创建一个平面，将其细分几次，并使用比例编辑工具添加突起，简单地在场景的角落创建了土堆。通过将这一过程与一些雕刻结合起来，在块体和其他元素之间的裂缝与角落处堆积土壤，我能够为周围环境赋予一种古老的外观。最终的场景显示在[图5-21](ch05.html#final_modeled_jungle_temple_scene
    "图5-21。最终建模的丛林神庙场景")中。
- en: Note
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*While the following flows from the modeling techniques already discussed,
    the parts we are creating fit in alongside the sculpted and retopologized meshes
    we will be working on in [Chapter 6](ch06.html "Chapter 6. Sculpting") and [Chapter 7](ch07.html
    "Chapter 7. Retopology"). You can follow along with this part first or skip forward
    to [Chapter 6](ch06.html "Chapter 6. Sculpting") and [Chapter 7](ch07.html "Chapter 7. Retopology")
    on sculpting and retopology and then return to this later.*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*尽管以下内容延续了已经讨论过的建模技巧，我们所创建的部件将与我们在[第6章](ch06.html "第6章：雕刻")和[第7章](ch07.html
    "第7章：重新拓扑")中雕刻和重新拓扑的网格一起使用。你可以先跟随这一部分，或者跳到关于雕刻和重新拓扑的[第6章](ch06.html "第6章：雕刻")和[第7章](ch07.html
    "第7章：重新拓扑")，然后稍后再回来继续这一部分。*'
- en: Modeling the Details of the Spider Bot
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 建模蜘蛛机器人的细节
- en: For the Spider Bot, I needed to create the other mechanical parts of the body
    that will complete the model when combined with the main body and leg pieces I
    will be sculpting and retopologizing in [Chapter 6](ch06.html "Chapter 6. Sculpting")
    and [Chapter 7](ch07.html "Chapter 7. Retopology"). The aim was to create some
    feasible mechanical-looking parts, such as joints, wires, and so forth, that complete
    the look of the Spider Bot.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于蜘蛛机器人，我需要创建其他机械部件，这些部件与我将在[第6章](ch06.html "第6章：雕刻")和[第7章](ch07.html "第7章：重新拓扑")中雕刻和重新拓扑的主体和腿部零件组合后，将完成整个模型。目标是创建一些可行的机械外观部件，例如关节、电线等，这些部件将完善蜘蛛机器人的外观。
- en: Joints
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关节
- en: 'The joints were all designed from the same basic template: a cylinder for the
    central part, which allows them to move freely, with struts coming out that attach
    to the legs (see [Figure 5-22](ch05.html#leg_jointsdot_both_joints_were_created_u
    "Figure 5-22. The leg joints. Both joints were created using a mix of cylinders
    for the simple parts and curves (converted into meshes) for the longer pieces.
    Adding support loops around the edges of the cylindrical parts allows them to
    subdivide much better.")). To produce the struts, I began with a curve object
    to make the basic shape a 2D curve, used the Extrude setting to give it some thickness,
    and then converted it to a mesh. Blender’s default curve-filling topology is full
    of skinny triangles, which do not subdivide at all well, so I deleted these faces
    and filled in the front and back by hand to produce nicer topology (see [Figure 5-23](ch05.html#creating_the_strut_elements_of_the_legs
    "Figure 5-23. Creating the strut elements of the legs with curves and then filling
    in the flat surfaces of the resulting mesh with cleaner topology")).'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的关节都采用了相同的基本模板进行设计：中央部分使用圆柱体，使其能够自由移动，连接腿部的支撑杆从中伸出（见[图 5-22](ch05.html#leg_jointsdot_both_joints_were_created_u
    "图 5-22。腿部关节。两个关节都是通过将简单部分做成圆柱体、将较长部分做成曲线（转换为网格）来创建的。在圆柱体部分的边缘添加支持环，使得它们可以更好地细分。")）。为了制作支撑杆，我从一个曲线对象开始，制作出基本形状的二维曲线，使用拉伸（Extrude）设置赋予它厚度，然后将其转换为网格。Blender默认的曲线填充拓扑充满了瘦长的三角形，这些三角形无法很好地细分，因此我删除了这些面，手动填补了前后表面，以得到更好的拓扑结构（见[图
    5-23](ch05.html#creating_the_strut_elements_of_the_legs "图 5-23。通过曲线创建腿部支撑杆元素，然后用更干净的拓扑填充生成的网格的平面表面")）。
- en: '![The leg joints. Both joints were created using a mix of cylinders for the
    simple parts and curves (converted into meshes) for the longer pieces. Adding
    support loops around the edges of the cylindrical parts allows them to subdivide
    much better.](httpatomoreillycomsourcenostarchimages1538420.png.jpg)Figure 5-22. The
    leg joints. Both joints were created using a mix of cylinders for the simple parts
    and curves (converted into meshes) for the longer pieces. Adding support loops
    around the edges of the cylindrical parts allows them to subdivide much better.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![腿部关节。两个关节都是通过将简单部分做成圆柱体、将较长部分做成曲线（转换为网格）来创建的。在圆柱体部分的边缘添加支持环，使得它们可以更好地细分。](httpatomoreillycomsourcenostarchimages1538420.png.jpg)图
    5-22。腿部关节。两个关节都是通过将简单部分做成圆柱体、将较长部分做成曲线（转换为网格）来创建的。在圆柱体部分的边缘添加支持环，使得它们可以更好地细分。'
- en: Wires
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 电线
- en: The wires are all created from 3D Bézier curves modeled around the legs and
    other areas to add interest and connect the parts (see [Figure 5-24](ch05.html#creating_the_wires_for_the_underside_of
    "Figure 5-24. Creating the wires for the underside of the legs. These were made
    with 3D Bézier curves and given thickness using the Bevel setting in the Object
    Data panel.")). To add further detail, I converted some wires to meshes to allow
    me to add some loop cuts and extrusions (see [Figure 5-25](ch05.html#initiallycomma_i_modeled_these_tubes_usi
    "Figure 5-25. Initially, I modeled these tubes using curves. Then I converted
    the curves to meshes to allow me to add some loop cuts and scale them in to create
    grooves.")).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这些线条都是由围绕腿部和其他区域建模的3D Bézier 曲线创建的，以增加趣味性并连接各个部分（参见[图 5-24](ch05.html#creating_the_wires_for_the_underside_of
    "图 5-24. 创建腿部下侧的线条。它们是通过 3D Bézier 曲线制作的，并通过对象数据面板中的 Bevel 设置赋予了厚度。")）。为了增加更多细节，我将一些线条转换为网格，以便添加一些循环切割和挤出（参见[图
    5-25](ch05.html#initiallycomma_i_modeled_these_tubes_usi "图 5-25. 最初，我使用曲线建模了这些管子。然后，我将曲线转换为网格，以便添加一些循环切割，并通过缩放创建凹槽。")）。
- en: For some of the more elaborate wires, I combined the Array and Curve modifiers
    to duplicate a single mesh along a curve (see [Figure 5-26](ch05.html#more_complex_curved_objectcomma_made_by
    "Figure 5-26. A more complex curved object, made by combining an Array modifier
    to duplicate the base unit (the ring-shaped object) and a Curve modifier to deform
    the resulting stack along a curve. I also used an Edge Split modifier and a Mirror
    modifier to mirror the results to the other side of the model.")). First, I modeled
    a single unit (the ring-shaped object in [Figure 5-26](ch05.html#more_complex_curved_objectcomma_made_by
    "Figure 5-26. A more complex curved object, made by combining an Array modifier
    to duplicate the base unit (the ring-shaped object) and a Curve modifier to deform
    the resulting stack along a curve. I also used an Edge Split modifier and a Mirror
    modifier to mirror the results to the other side of the model.")), and then I
    added an Array modifier and a Curve modifier to duplicate that unit and deform
    it to the shape of the curve.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些更复杂的线条，我结合了 Array 和 Curve 修改器，将单个网格沿曲线复制（参见[图 5-26](ch05.html#more_complex_curved_objectcomma_made_by
    "图 5-26. 一个更复杂的曲线物体，结合了 Array 修改器复制基础单元（环形物体）和 Curve 修改器沿曲线变形堆叠的结果。我还使用了 Edge
    Split 修改器和 Mirror 修改器，将结果镜像到模型的另一侧。")）。首先，我建模了一个单一单元（[图 5-26](ch05.html#more_complex_curved_objectcomma_made_by
    "图 5-26. 一个更复杂的曲线物体，结合了 Array 修改器复制基础单元（环形物体）和 Curve 修改器沿曲线变形堆叠的结果。我还使用了 Edge
    Split 修改器和 Mirror 修改器，将结果镜像到模型的另一侧。") 中的环形物体），然后添加了 Array 修改器和 Curve 修改器，将该单元复制并沿曲线变形成曲线的形状。
- en: '![Creating the strut elements of the legs with curves and then filling in the
    flat surfaces of the resulting mesh with cleaner topology](httpatomoreillycomsourcenostarchimages1538422.png.jpg)Figure 5-23. Creating
    the strut elements of the legs with curves and then filling in the flat surfaces
    of the resulting mesh with cleaner topology![Creating the wires for the underside
    of the legs. These were made with 3D Bézier curves and given thickness using the
    Bevel setting in the Object Data panel.](httpatomoreillycomsourcenostarchimages1538424.png.jpg)Figure 5-24. Creating
    the wires for the underside of the legs. These were made with 3D Bézier curves
    and given thickness using the Bevel setting in the Object Data panel.![Initially,
    I modeled these tubes using curves. Then I converted the curves to meshes to allow
    me to add some loop cuts and scale them in to create grooves.](httpatomoreillycomsourcenostarchimages1538426.png.jpg)Figure 5-25. Initially,
    I modeled these tubes using curves. Then I converted the curves to meshes to allow
    me to add some loop cuts and scale them in to create grooves.![A more complex
    curved object, made by combining an Array modifier to duplicate the base unit
    (the ring-shaped object) and a Curve modifier to deform the resulting stack along
    a curve. I also used an Edge Split modifier and a Mirror modifier to mirror the
    results to the other side of the model.](httpatomoreillycomsourcenostarchimages1538428.png.jpg)Figure 5-26. A
    more complex curved object, made by combining an Array modifier to duplicate the
    base unit (the ring-shaped object) and a Curve modifier to deform the resulting
    stack along a curve. I also used an Edge Split modifier and a Mirror modifier
    to mirror the results to the other side of the model.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![使用曲线创建腿部支撑元素，然后用更干净的拓扑填充生成网格的平面表面](httpatomoreillycomsourcenostarchimages1538422.png.jpg)图
    5-23. 使用曲线创建腿部支撑元素，然后用更干净的拓扑填充生成网格的平面表面![为腿部底部创建线条。这些是使用 3D 贝塞尔曲线制作的，并通过对象数据面板中的
    Bevel 设置增加了厚度。](httpatomoreillycomsourcenostarchimages1538424.png.jpg)图 5-24.
    为腿部底部创建线条。这些是使用 3D 贝塞尔曲线制作的，并通过对象数据面板中的 Bevel 设置增加了厚度。![最初，我使用曲线建模这些管道。然后，我将曲线转换为网格，以便我可以添加一些环形切割并缩放它们，形成凹槽。](httpatomoreillycomsourcenostarchimages1538426.png.jpg)图
    5-25. 最初，我使用曲线建模这些管道。然后，我将曲线转换为网格，以便我可以添加一些环形切割并缩放它们，形成凹槽。![一个更复杂的曲面对象，通过结合数组修改器来复制基础单元（环形物体）和曲线修改器来沿曲线变形结果堆栈。我还使用了边缘分割修改器和镜像修改器，将结果镜像到模型的另一侧。](httpatomoreillycomsourcenostarchimages1538428.png.jpg)图
    5-26. 一个更复杂的曲面对象，通过结合数组修改器来复制基础单元（环形物体）和曲线修改器来沿曲线变形结果堆栈。我还使用了边缘分割修改器和镜像修改器，将结果镜像到模型的另一侧。'
- en: Coupling
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 耦合
- en: For the coupling between the body and abdomen, I initially created the shape
    with curves and then duplicated it and converted the duplicate to a mesh (ALT-C).
    Because Blender’s default curve filling creates ugly, long triangles that don’t
    deform well, I fixed the topology by hand by deleting the inside faces and filling
    in the shape manually (see [Figure 5-27](ch05.html#creating_the_couplingdot_i_converted_the
    "Figure 5-27. Creating the coupling. I converted the curve object (right) into
    a mesh and then deleted some of the edge loops around the edges to even out the
    distribution of faces. I filled the inner faces with nicer topology by hand. Then,
    using proportional editing, I added a bend in the middle.")).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于身体和腹部之间的耦合，我最初使用曲线创建了形状，然后将其复制并将副本转换为网格（ALT-C）。由于Blender默认的曲线填充会生成丑陋的长三角形，且变形效果不佳，我通过手动删除内部面并手动填充形状来修复拓扑（见[图
    5-27](ch05.html#creating_the_couplingdot_i_converted_the "图 5-27. 创建耦合。我将曲线对象（右）转换为网格，并删除了边缘周围的一些边缘环，以均匀分布面片。我手动填充了内部面，使用了更好的拓扑。然后，使用比例编辑，我在中间添加了弯曲。")）。
- en: '![Creating the coupling. I converted the curve object (right) into a mesh and
    then deleted some of the edge loops around the edges to even out the distribution
    of faces. I filled the inner faces with nicer topology by hand. Then, using proportional
    editing, I added a bend in the middle.](httpatomoreillycomsourcenostarchimages1538430.png.jpg)Figure 5-27. Creating
    the coupling. I converted the curve object (right) into a mesh and then deleted
    some of the edge loops around the edges to even out the distribution of faces.
    I filled the inner faces with nicer topology by hand. Then, using proportional
    editing, I added a bend in the middle.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![创建联接。我将曲线对象（右）转换为网格，然后删除了一些边缘周围的边环，以均匀分布面片。我手动填充了内面的更好拓扑。接着，我使用比例编辑，在中间加入了一个弯曲。](httpatomoreillycomsourcenostarchimages1538430.png.jpg)图
    5-27。创建联接。我将曲线对象（右）转换为网格，然后删除了一些边缘周围的边环，以均匀分布面片。我手动填充了内面的更好拓扑。接着，我使用比例编辑，在中间加入了一个弯曲。'
- en: Other Parts
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他部分
- en: 'I placed the Spider Bot’s eyes using Blender’s Snapping tools: I turned on
    Snapping to Faces, added spheres in Object mode, and then snapped them to the
    surface of the head. The fangs are simply cubes, extruded and with loop cuts added
    to make constrictions where they bend. I added some further embellishments using
    a mix of Blender’s modeling tools and retopology techniques. (See [Chapter 7](ch07.html
    "Chapter 7. Retopology") for these parts and the finished model.)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用Blender的吸附工具放置了蜘蛛机器人眼睛：我打开了面吸附，进入对象模式添加了球体，然后将它们吸附到头部表面。獠牙则简单地是立方体，经过拉伸并添加了环形切割，以在弯曲处形成收缩。我使用Blender的建模工具和重新拓扑技术进行了进一步的装饰。（参见[第
    7 章](ch07.html "第 7 章。重新拓扑")了解这些部分和完成的模型。）
- en: Modeling the Details of the Bat Creature
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型化蝙蝠生物的细节
- en: The final Bat Creature will consist only of one mesh for the body, which we’ll
    discuss in [Chapter 6](ch06.html "Chapter 6. Sculpting"), but it will need eyes,
    teeth, and fingernails, too. As these wouldn’t be sculpted or retopologized in
    any way, I aimed straight for the final mesh.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的蝙蝠生物模型只会包含一个用于身体的网格，我们将在[第 6 章](ch06.html "第 6 章。雕刻")中讨论，但它还需要眼睛、牙齿和指甲。由于这些部分不会经过雕刻或重新拓扑，我直接制作了最终网格。
- en: Eyes
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 眼睛
- en: 'There are many ways to model eyes, but in general it helps to model some of
    the internal structure of the eye first to allow the rendered eye to catch light
    and reflections realistically. My model for the eye (see [Figure 5-28](ch05.html#modeling_the_eyedot_left_the_outer_layer
    "Figure 5-28. Modeling the eye. Left: The outer layer. Note the grid topology
    at the end of the cornea. Middle: The inner layer. Right: The two combined in
    wireframe view, shown from the side.")) consisted of an outer layer, which will
    have a transparent material and which makes up the cornea and the reflective surface
    of the eye, and an inner layer, which will later be textured with the pupil, iris,
    and sclera (the white of the eye).'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 模型化眼睛有许多方法，但通常情况下，先建模眼睛的一些内部结构有助于让渲染出的眼睛能够真实地反射光线和反射。我为眼睛制作的模型（见[图 5-28](ch05.html#modeling_the_eyedot_left_the_outer_layer
    "图 5-28。眼睛建模。左：外层。注意角膜末端的网格拓扑。中：内层。右：两者结合在一起，展示侧视图的线框。")）包括外层和内层，外层将具有透明材质，构成眼角膜和眼睛的反射表面，内层则稍后会贴上瞳孔、虹膜和眼白（巩膜）纹理。
- en: Both the inner and outer layers are made in the same way, beginning with a UV
    sphere (in Object mode SHIFT-A▸Mesh▸UVSphere) and then using proportional edit
    to push in the end of the sphere for the inner part or to push it out a little
    for the outer part to add a bulge to the cornea. For the inner part, after pushing
    the surface in with proportional editing, I extruded back the most central faces
    to create a pit for the pupil. For the cornea, I deleted the end triangular faces
    of the UV sphere and replaced them with a subdivided plane to avoid artifacts
    when a Subdivision Surface modifier is added (see the left of [Figure 5-27](ch05.html#creating_the_couplingdot_i_converted_the
    "Figure 5-27. Creating the coupling. I converted the curve object (right) into
    a mesh and then deleted some of the edge loops around the edges to even out the
    distribution of faces. I filled the inner faces with nicer topology by hand. Then,
    using proportional editing, I added a bend in the middle.")). Using the To Sphere
    operator (ALT-SHIFT-S) can help you regain the spherical shape of the eye after
    adjusting its topology.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 内外层的制作方式相同，从UV球体开始（在对象模式下按SHIFT-A▸Mesh▸UVSphere），然后使用比例编辑将球体的末端推入内层部分，或将其稍微推出去，形成角膜的凸起。对于内层部分，在使用比例编辑将表面推入后，我从中最中央的面挤出，创造了一个凹陷的瞳孔。对于角膜，我删除了UV球体末端的三角面，并用一个细分平面替换它们，以避免在添加细分曲面修改器时产生伪影（见[图5-27](ch05.html#creating_the_couplingdot_i_converted_the
    "图5-27。创建连接。我将曲线对象（右）转换为网格，然后删除了一些边缘环，以均匀分布面。我手动填充了内部面的更好拓扑。然后，使用比例编辑，我在中间添加了弯曲。")的左侧）。使用To
    Sphere操作符（ALT-SHIFT-S）可以帮助你在调整拓扑后恢复眼睛的球形。
- en: Teeth and Nails
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 牙齿和指甲
- en: Both the teeth and nails were derived from cubes (see [Figure 5-29](ch05.html#modeling_the_teeth_and_nails
    "Figure 5-29. Modeling the teeth and nails")). To create the teeth, I began with
    a cube, scaled it down, and extruded from the bottom. By repeatedly scaling down
    the bottom of the tooth and then extruding again, I was able to refine the tooth
    into a point. I then positioned and duplicated the teeth and used a Mirror modifier
    to fill in the other side of the mouth.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 牙齿和指甲都是从立方体派生出来的（见[图5-29](ch05.html#modeling_the_teeth_and_nails "图5-29。建模牙齿和指甲")）。为了制作牙齿，我从一个立方体开始，将其缩小，然后从底部挤出。通过反复缩小牙齿底部然后再次挤出，我将牙齿雕刻成尖点。接着，我调整并复制牙齿，使用镜像修改器填充嘴巴的另一侧。
- en: For the nails, I flattened the cube a bit, added a loop cut down the middle,
    and moved it out a little to give the nail a bit of a curve. I then repeated the
    same process I had used for the teeth, refining them into a point and then placing
    them by hand and duplicating as many as I needed.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 对于指甲，我稍微压扁了立方体，在中间加了一条环切，并稍微将其移动出来，给指甲一些曲线。然后，我重复了制作牙齿时的相同过程，将它们雕刻成尖点，然后手动放置并复制所需的数量。
- en: '![Modeling the eye. Left: The outer layer. Note the grid topology at the end
    of the cornea. Middle: The inner layer. Right: The two combined in wireframe view,
    shown from the side.](httpatomoreillycomsourcenostarchimages1538432.png.jpg)Figure 5-28. Modeling
    the eye. Left: The outer layer. Note the grid topology at the end of the cornea.
    Middle: The inner layer. Right: The two combined in wireframe view, shown from
    the side.![Modeling the teeth and nails](httpatomoreillycomsourcenostarchimages1538434.png.jpg)Figure 5-29. Modeling
    the teeth and nails'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![建模眼睛。左：外层。注意角膜末端的网格拓扑。中：内层。右：两者合并后的线框视图，侧面展示。](httpatomoreillycomsourcenostarchimages1538432.png.jpg)图5-28。建模眼睛。左：外层。注意角膜末端的网格拓扑。中：内层。右：两者合并后的线框视图，侧面展示。![建模牙齿和指甲](httpatomoreillycomsourcenostarchimages1538434.png.jpg)图5-29。建模牙齿和指甲'
- en: In Review
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回顾
- en: This completes our discussion of modeling the Jungle Temple scene and adding
    some extra details to the Spider Bot and Bat Creature projects. You’ve learned
    how to use a variety of Blender’s modeling tools, including modifying existing
    meshes with modifiers, applying the results of these modifiers so you can edit
    the results, modeling with curves and adjusting the results, and modeling parts
    from scratch using primitives and extrusions to build up complex forms.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们对丛林神庙场景建模的讨论，并为蜘蛛机器人和蝙蝠生物项目添加了一些额外的细节。你已经学会了如何使用Blender的多种建模工具，包括通过修改器修改现有网格，应用这些修改器的结果以便能够编辑结果，使用曲线建模并调整结果，以及从零开始使用基本体和挤压来建造复杂的形状。
- en: In the next chapter, we will move on to sculpting in Blender using the Multiresolution
    modifier and Sculpt tools to create detailed organic and hard-surface forms. In
    [Chapter 7](ch07.html "Chapter 7. Retopology"), you’ll learn how to retopologize
    these forms using Blender’s modeling tools in order to create your models.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续使用Blender中的多重分辨率修改器和雕刻工具来雕刻，创建详细的有机和硬表面形状。在[第7章](ch07.html "第7章.
    重新拓扑")中，你将学习如何使用Blender的建模工具对这些形状进行重新拓扑，以便创建你的模型。
