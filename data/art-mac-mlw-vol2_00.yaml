- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: INTRODUCTION
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: We are, unfortunately, living in a golden age of Mac malware. Sales of Mac computers
    continue to flourish year over year,^([1](#fm8-1)) while industry reports predict
    that Mac will become the dominant platform in enterprise environments.^([2](#fm8-2))
    As Apple’s share of the global computer market grows, Macs have become an ever-more
    compelling target for opportunistic hackers and malware authors. Some studies
    have even found, on average, more threats and malware on Mac systems than on Windows
    ones.^([3](#fm8-3))
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我们正生活在Mac恶意软件的黄金时代。Mac电脑的销量年年攀升，^([1](#fm8-1)) 而行业报告预测，Mac将成为企业环境中的主导平台。^([2](#fm8-2))
    随着苹果在全球电脑市场的份额不断增长，Mac已经成为机会主义黑客和恶意软件作者越来越有吸引力的目标。一些研究甚至发现，Mac系统上的威胁和恶意软件平均多于Windows系统。^([3](#fm8-3))
- en: When it comes to protecting Macs and their users, analyzing malware (the topic
    of *The Art of Mac Malware*, Volume 1) is only half the battle. Detecting malicious
    code in the first place is the other, perhaps even more important, piece. There
    are many approaches to detecting malicious code, each with pros and cons. At one
    end of the detection spectrum, we can leverage databases of malware signatures.
    By scanning binaries for sequences of malicious bytes, we can efficiently identify
    known threats. However, we fail to detect new malware or variants. This downside
    is troublesome. To see why, consider the case of the malware known as FruitFly.
    Carefully crafted by a single programmer and deployed in a highly targeted manner,
    it remained undetected for over a decade, as no antivirus program contained a
    signature to detect it. The malware spied on unknowing victims using Macs’ mics
    and webcams, leading to damaging real-life consequences.^([4](#fm8-4))
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在保护Mac电脑及其用户时，分析恶意软件（*《Mac恶意软件艺术》* 第一卷的主题）只是战斗的一半。首先检测恶意代码是另一部分，可能甚至更重要。检测恶意代码有多种方法，每种方法都有其优缺点。在检测的光谱一端，我们可以利用恶意软件特征库。通过扫描二进制文件中恶意字节的序列，我们可以高效地识别已知的威胁。然而，这样做无法检测到新型恶意软件或变种。这一缺点是令人烦恼的。为了解释为什么，考虑一下名为FruitFly的恶意软件。它由一位程序员精心设计，并以高度定向的方式进行部署，长达十多年都未被发现，因为没有任何防病毒程序包含其检测特征。这款恶意软件通过Mac的麦克风和摄像头窃听毫无戒备的受害者，导致了现实生活中的严重后果。^([4](#fm8-4))
- en: 'At the other end of the detection spectrum are *behavior-based heuristics*,
    which focus on a malicious program’s actions or impact on a system. To understand
    this approach, consider the last time you were sick. Perhaps your illness started
    with a runny nose, a headache, a sore throat, or a stomachache. While you probably
    didn’t know exactly what pathogen had infected you, your body’s symptoms indicated
    that you were no longer your normal, healthy self. We can use a similar strategy
    to generically and heuristically detect digital pathogens: by looking for symptoms
    and anomalies.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在检测的光谱另一端是*基于行为的启发式检测*，它关注恶意程序的行为或对系统的影响。为了理解这种方法，想想你上次生病时的情况。也许你一开始只是流鼻涕、头痛、喉咙痛或肚子疼。尽管你可能不知道是哪种病原体感染了你，但你身体的症状表明你已经不再是正常、健康的自己。我们可以用类似的策略来通用且启发式地检测数字病原体：通过寻找症状和异常现象。
- en: Even novel and stealthy malware specimens will produce observable events when
    they interact with a system. Some, such as the spawning of a newly persisted unsigned
    process, may be easy to detect. Others, like the surreptitious planting of a trojanized
    dynamic library or a covert exfiltration channel, are more subtle. Regardless,
    if we can programmatically detect these behaviors, we should be able to ascertain
    whether a system is infected and, by identifying the responsible process, pinpoint
    the infection.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是新型且隐秘的恶意软件样本，在与系统互动时也会产生可观察的事件。有些，如产生一个新持久化的未签名进程，可能很容易被检测到。其他一些，如悄悄植入一个木马化的动态库或一个隐蔽的外泄通道，则更加微妙。无论如何，如果我们能通过编程检测到这些行为，我们应该能够判断系统是否被感染，并通过识别出相关进程来确定感染源。
- en: This book focuses on heuristic-based approaches, which are the only way to combat
    the sophisticated and never-before-seen threats that are targeting macOS with
    increasing frequency. We’ll write code capable of detecting anomalies and then
    pinpoint software that has maliciously infiltrated a system. In the process, we’ll
    dive into the macOS operating system, touching on topics such as private frameworks,
    reverse engineering proprietary system components, and much more.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本书侧重于基于启发式的方法，这是应对日益频繁针对macOS的复杂和前所未见的威胁的唯一途径。我们将编写能够检测异常的代码，然后定位恶意入侵系统的软件。在这个过程中，我们将深入探讨macOS操作系统，涉及的主题包括私有框架、反向工程专有系统组件等。
- en: Of course, the heuristic-based detection approach has some downsides. While
    it should be able to pinpoint any malicious item on a system, it likely won’t
    be able to identify the specific malware strain. For example, it should notice
    an unauthorized program surreptitiously accessing the mic or webcam, but it won’t
    know whether the responsible process is the malware FruitFly. Is this a significant
    downside? I don’t believe so, as the malware responsible for the infection may
    be unknown anyway, and you can always deploy a signature-based detection engine
    to cover the known basics.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，基于启发式的检测方法也有一些缺点。虽然它应该能够识别系统中的任何恶意项，但它可能无法识别具体的恶意软件类型。例如，它应该能够注意到一个未经授权的程序偷偷访问麦克风或摄像头，但它不会知道负责该进程的是否是恶意软件FruitFly。这是一个重大的缺点吗？我认为不是，因为负责感染的恶意软件可能本来就未知，而且你始终可以部署一个基于签名的检测引擎来覆盖已知的基础问题。
- en: Another challenge is that heuristic-based detections can suffer from false positives.
    For example, malware authors often leverage executable packers to obfuscate their
    malicious creations, but so could legitimate software developers. Thus, no heuristic-based
    detection approach should focus on a single heuristic when attempting to classify
    an item as malicious. Instead, the detection should always look for multiple anomalous
    behaviors and leverage approaches that reduce false positives, such as code signing
    information, before flagging something as suspicious or likely malicious. If you
    have the luxury to do so, you could enlist a human to validate any flagged items.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个挑战是基于启发式的检测可能会受到误报的影响。例如，恶意软件作者通常利用可执行的打包程序来混淆他们的恶意作品，但合法的软件开发者也可能如此。因此，任何基于启发式的检测方法在试图将某个项目分类为恶意时，都不应该只依赖单一的启发式规则。相反，检测应该始终寻找多个异常行为，并利用减少误报的方法，比如代码签名信息，才会将某些项目标记为可疑或可能是恶意的。如果条件允许，你可以让人工来验证任何被标记的项目。
- en: '## What You’ll Find in This Book'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '## 本书内容概览'
- en: At its core, this book describes how to write code to detect macOS malware.
    It’s broken into three parts.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的核心内容是描述如何编写代码来检测macOS恶意软件。全书分为三部分。
- en: 'Just as a doctor performs tests and collects data to make a diagnosis, so too
    must malware detectors. In [Part I](part1.xhtml): Data Collection, we discuss
    programmatic methods of collecting the data snapshots essential for detecting
    symptoms of infections. We’ll start simple, by describing methods of enumerating
    and querying running processes on a system. In subsequent chapters, we’ll dive
    into more advanced concepts, such as directly parsing binaries, extracting and
    validating code signing information, and uncovering persistence by interacting
    with proprietary system components. Where relevant, we’ll show snippets of malware
    as examples. The chapters in this part are as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 就像医生通过做检查和收集数据来做出诊断一样，恶意软件检测器也必须如此。在[第一部分](part1.xhtml)：数据收集中，我们讨论了收集检测感染症状所需数据快照的程序化方法。我们将从简单的开始，描述列举和查询系统中运行进程的方法。在后续章节中，我们将深入探讨更高级的概念，例如直接解析二进制文件、提取和验证代码签名信息以及通过与专有系统组件交互来发现持久性。在相关部分，我们将展示恶意软件示例的代码片段。本部分的章节如下：
- en: '**[Chapter 1](chapter1.xhtml): Examining Processes** Because the majority of
    Mac malware specimens run as stand-alone processes, examining various information
    and metadata about each running process is a great place to start when seeking
    to uncover infections.'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**[第一章](chapter1.xhtml)：检查进程** 由于大多数Mac恶意软件样本作为独立进程运行，因此检查每个运行中进程的各种信息和元数据是发现感染的一个很好的起点。'
- en: ''
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Chapter 2](chapter2.xhtml): Parsing Binaries** Backing any process on a
    macOS system is a universal or Mach-O binary. In this chapter, we show how to
    parse these binaries to reveal anomalies.'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**[第2章](chapter2.xhtml): 解析二进制文件** 在 macOS 系统上，任何进程的背后都有一个通用或 Mach-O 二进制文件。本章将展示如何解析这些二进制文件，以揭示其中的异常。'
- en: ''
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Chapter 3](chapter3.xhtml): Code Signing** Any heuristic-based detection
    approach is prone to false positives. By extracting and validating code signing
    information, as we do in this chapter, we can reduce false positives while increasing
    the effectiveness of any malware detection tool.'
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**[第3章](chapter3.xhtml): 代码签名** 任何基于启发式检测的方法都容易出现误报。通过提取和验证代码签名信息，正如本章所示，我们可以减少误报，同时提高任何恶意软件检测工具的有效性。'
- en: ''
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Chapter 4](chapter4.xhtml): Network State and Statistics** This chapter
    describes methods of programmatically capturing snapshots of a host’s network
    state and network statistics. Most Mac malware will access the network, and these
    snapshots should reveal this unauthorized network access.'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**[第4章](chapter4.xhtml): 网络状态与统计** 本章描述了通过编程方式捕获主机网络状态和网络统计信息的方式。大多数 Mac 恶意软件会访问网络，而这些快照应该能够揭示未经授权的网络访问。'
- en: ''
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Chapter 5](chapter5.xhtml): Persistence** Malware will persist in order
    to survive a system reboot. Persistence causes modifications to the host, and
    this chapter highlights exactly how to programmatically detect these changes.'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**[第5章](chapter5.xhtml): 持久性** 恶意软件会保持持久性，以便在系统重启后仍然存活。持久性会对主机进行修改，本章重点讲解如何通过编程方式检测这些变化。'
- en: 'While [Part I](part1.xhtml) covers methods of obtaining snapshots of data,
    [Part II](part2.xhtml): System Monitoring covers continuous approaches to monitoring
    a system for symptoms of an infection. For example, we’ll discuss frameworks and
    application programming interfaces (APIs) that allow us to monitor the system
    logs and create powerful file, process, and network monitors. This part includes
    the following chapters:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '虽然[第一部分](part1.xhtml)讲解了如何获取数据快照，[第二部分](part2.xhtml): 系统监控则介绍了持续监控系统以发现感染症状的方法。例如，我们将讨论一些框架和应用程序接口（API），它们可以帮助我们监控系统日志，并创建强大的文件、进程和网络监控工具。本部分包括以下章节：'
- en: '**[Chapter 6](chapter6.xhtml): Log Monitoring** The system, or *universal*,
    log contains a myriad of data that can reveal most infections. Apple doesn’t provide
    public APIs to ingest streaming log messages, so this chapter delves into the
    private frameworks and APIs you can use in your own tools.'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**[第6章](chapter6.xhtml): 日志监控** 系统或*通用*日志包含大量数据，可以揭示大部分感染情况。苹果并未提供公开 API 用于接收流式日志消息，因此本章深入探讨了你可以在自己工具中使用的私有框架和
    API。'
- en: ''
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Chapter 7](chapter7.xhtml): Network Monitoring** This chapter is dedicated
    to Apple’s *NetworkExtension* framework, whose APIs provide the capabilities for
    building powerful network monitoring tools that can uncover any malware that uses
    the host’s network.'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**[第7章](chapter7.xhtml): 网络监控** 本章专门讲解苹果的*NetworkExtension*框架，其 API 提供了构建强大网络监控工具的能力，这些工具可以揭示任何使用主机网络的恶意软件。'
- en: ''
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Chapter 8](chapter8.xhtml): Endpoint Security** If you’re building comprehensive
    malware detection tools on macOS, you should make use of the powerful Endpoint
    Security framework and its APIs. This chapter introduces Endpoint Security.'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**[第8章](chapter8.xhtml): 终端安全** 如果你在 macOS 上构建全面的恶意软件检测工具，你应该利用强大的终端安全框架及其
    API。本章介绍了终端安全。'
- en: ''
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Chapter 9](chapter9.xhtml): Muting and Authorization Events** This chapter
    covers more advanced Endpoint Security topics, including authorization events,
    muting, and more.'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**[第9章](chapter9.xhtml): 静音和授权事件** 本章涵盖了更高级的终端安全主题，包括授权事件、静音等内容。'
- en: 'In 2015, I founded Objective-See, which is now a nonprofit organization that
    makes free, open source security tools for macOS. [Part III](part3.xhtml): Tool
    Development delves into several of Objective-See’s most popular tools. Capable
    of generically detecting a wide range of macOS malware, these tools leverage many
    of the approaches covered in [Parts I](part1.xhtml) and [II](part2.xhtml). Once
    you understand their design and internals, you’ll be well on the way to building
    your own malware detection tools. We’ll end the book by pitting these tools against
    a wide range of sophisticated macOS malware. For each specimen, we’ll discuss
    its infection vector, methods of persistence, and capabilities and then highlight
    how the tools can uncover these symptoms. The chapters in this part are as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '2015年，我创立了Objective-See，现在它是一个非营利组织，提供免费的开源macOS安全工具。[第三部分](part3.xhtml): 工具开发深入介绍了Objective-See的几款最受欢迎的工具。这些工具能够通用地检测多种macOS恶意软件，利用了[第一部分](part1.xhtml)和[第二部分](part2.xhtml)中讨论的许多方法。一旦你理解了它们的设计和内部结构，你就能顺利地构建自己的恶意软件检测工具。本书的最后，我们将把这些工具与多种复杂的macOS恶意软件进行对比。对于每一个样本，我们会讨论其感染路径、持久性方法和功能，然后突出工具如何发现这些症状。本部分的各章内容如下：'
- en: '**[Chapter 10](chapter10.xhtml): Persistence Enumerator** Who’s there? Most
    Mac malware persists to survive system reboots, so a tool capable of enumerating
    all persistent software should reveal any persistently installed malware. This
    chapter covers exactly such a tool: KnockKnock.'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**[第10章](chapter10.xhtml): 持久性枚举器** 谁在那儿？大多数Mac恶意软件能在系统重启后持续存在，因此能够枚举所有持久性软件的工具应该能够揭示任何持续安装的恶意软件。本章将介绍这样一个工具：KnockKnock。'
- en: ''
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Chapter 11](chapter11.xhtml): Persistence Monitor** Inspired by its sibling
    KnockKnock, BlockBlock leverages Endpoint Security to detect malware by monitoring
    persistence events in real time.'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**[第11章](chapter11.xhtml): 持久性监视器** 受其兄弟工具KnockKnock启发，BlockBlock利用端点安全技术，通过实时监控持久性事件来检测恶意软件。'
- en: ''
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Chapter 12](chapter12.xhtml): Mic and Webcam Monitor** Some of the most
    insidious Mac malware specimens spy on victims via the webcam or listen to them
    via the mic. This chapter focuses on OverSight, a tool that leverages core audio
    and media APIs as well as the logging subsystem to detect malware accessing these
    devices.'
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**[第12章](chapter12.xhtml): 麦克风和摄像头监视器** 一些最狡猾的Mac恶意软件通过摄像头监视受害者，或通过麦克风监听他们。本章聚焦于OverSight，它利用核心音频和媒体API以及日志子系统来检测恶意软件访问这些设备的行为。'
- en: ''
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Chapter 13](chapter13.xhtml): DNS Monitor** Malware attempting to connect
    to remote domains—for example, for tasking or to exfiltrate data—will generate
    DNS traffic. This chapter shows how DNSMonitor leverages Apple’s *NetworkExtension*
    framework to monitor and block any unauthorized DNS traffic on a macOS host.'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**[第13章](chapter13.xhtml): DNS监视器** 恶意软件试图连接到远程域名——例如，用于任务处理或数据外泄——将会生成DNS流量。本章展示了DNSMonitor如何利用苹果的*NetworkExtension*框架监控并阻止macOS主机上任何未经授权的DNS流量。'
- en: ''
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Chapter 14](chapter14.xhtml): Case Studies** It’s one thing to make claims
    about the effectiveness of security tools and quite another to back them up. In
    this final chapter, we pit our security tools against several notably sophisticated
    and stealthy malware specimens to see how they stack up.'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**[第14章](chapter14.xhtml): 案例研究** 提出关于安全工具有效性的说法是一回事，支持这些说法又是另一回事。在本章的最后，我们将把我们的安全工具与几种特别复杂和隐蔽的恶意软件样本进行对比，看看它们的表现如何。'
- en: Who Should Read This Book?
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本书适合谁阅读？
- en: 'You’ll get the most out of this book if you understand cybersecurity fundamentals,
    malware basics, and programming. These aren’t prerequisites, however, and I’ll
    explain all important concepts. You’ll also find it helpful to read my other book,
    *The Art of Mac Malware*, Volume 1 (No Starch Press, 2022), which will introduce
    you to foundational macOS malware topics we won’t cover again here. Beyond these
    considerations, I wrote this book with particular readers in mind:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你理解网络安全基础、恶意软件基础和编程知识，你会从本书中获益最多。不过这些并不是必备条件，我会解释所有重要的概念。你还会发现阅读我的另一本书，*《Mac恶意软件的艺术》*（第一卷，No
    Starch Press，2022），对你有帮助，因为它会介绍一些我们这里不会再涉及的macOS恶意软件基础知识。除此之外，我写这本书时特别考虑到了以下读者群体：
- en: '**Students** As an undergraduate studying computer science, I had a keen interest
    in understanding and detecting computer viruses and yearned for a book such as
    this one. If you’re working toward a technical degree and would like to learn
    more about malware detection approaches, perhaps to enhance or complement your
    studies, this book is for you.'
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**学生** 作为一名计算机科学专业的本科生，我对理解和检测计算机病毒有着浓厚的兴趣，并渴望拥有一本像这样的书。如果你正在攻读技术学位，并希望了解更多关于恶意软件检测的方法，或许是为了增强或补充你的学业，那么这本书适合你。'
- en: ''
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Malware analysts** My career as a malware analyst began at the National Security
    Agency, where I studied Windows-based malware and exploits that targeted US military
    systems. When I left the agency, I began studying macOS threats but encountered
    a lack of resources on the topic. This book aims to fill this gap. If you’re a
    Windows or Linux malware analyst (or even a Mac malware analyst hoping to grow
    your skills), this book should provide you with insight into how to detect threats
    targeting macOS systems.'
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**恶意软件分析师** 我的恶意软件分析师生涯始于国家安全局，在那里我研究了针对美国军事系统的 Windows 恶意软件和漏洞利用。当我离开该机构时，我开始研究
    macOS 威胁，但发现这一领域缺乏资源。本书旨在填补这一空白。如果你是 Windows 或 Linux 恶意软件分析师（甚至是希望提升技能的 Mac 恶意软件分析师），本书应能为你提供如何检测针对
    macOS 系统的威胁的见解。'
- en: ''
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Mac system administrators** The days of the homogeneous Windows-based enterprise
    have largely disappeared. Today, Macs in the enterprise are commonplace, giving
    rise to dedicated Mac system administrators and (unfortunately) malware authors
    focused on enterprise systems running macOS. If you’re a Mac system administrator,
    it’s imperative that you understand how to detect the threats targeting the systems
    you seek to defend. This book aims to provide such an understanding (and much
    more).'
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Mac 系统管理员** 过去基于 Windows 的同质化企业环境已基本消失。如今，Mac 在企业中已变得普遍，催生了专门的 Mac 系统管理员以及（不幸的是）专注于运行
    macOS 系统的企业恶意软件作者。如果你是 Mac 系统管理员，理解如何检测针对你所要防御的系统的威胁是至关重要的。本书旨在提供这样的理解（以及更多内容）。'
- en: ''
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Developers** At its core, this book presents approaches to writing code capable
    of generically detecting Mac malware. If your job involves writing security-focused
    tools for macOS, this book will be useful to you.'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**开发人员** 本书的核心内容是提出编写能够通用检测 Mac 恶意软件的代码的方法。如果你的工作是为 macOS 编写安全相关工具，那么本书对你会很有帮助。'
- en: Even if you’re not a programmer, you may find a book on the programmatic detection
    of malware to be worth a read. Detecting malware involves much more than just
    writing code. We’ll delve into macOS internals, touch on reverse engineering topics,
    and discuss various malware specimens, including their capabilities and functionality.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你不是程序员，你可能会觉得关于程序化恶意软件检测的书籍值得一读。恶意软件检测远不仅仅是编写代码。我们将深入探讨 macOS 内部机制，涉及逆向工程话题，并讨论各种恶意软件样本，包括它们的能力和功能。
- en: The Code and Malware Specimens
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码与恶意软件样本
- en: You can access all code samples, malware specimens, and tools discussed in this
    book at [*https://<wbr>github<wbr>.com<wbr>/objective<wbr>-see*](https://github.com/objective-see).
    The TAOMM repository organizes code samples by chapter, and the Malware repository
    contains an encrypted sample of each malware specimen. Use the password *infect3d*
    to decrypt the samples.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[*https://github.com/objective-see*](https://github.com/objective-see)访问本书中讨论的所有代码示例、恶意软件样本和工具。TAOMM
    仓库按章节组织代码示例，Malware 仓库包含每个恶意软件样本的加密版。使用密码*infect3d*解密样本。
- en: WARNING
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '*The code in the TAOMM repository is provided largely for illustrative purposes,
    prioritizing brevity over other aspects such as comprehensive error checking.
    As such, it should not be used verbatim, for example, in deployed security products.
    Keep in mind also that the collection in the Malware repository contains live
    malware. Please don’t infect yourself! (Or if you do, at least don’t blame me.)*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*TAOMM 仓库中的代码主要用于示范目的，优先考虑简洁性而非其他方面，如全面的错误检查。因此，不应照搬这些代码，例如在部署的安全产品中使用。请注意，Malware
    仓库中的集合包含活跃的恶意软件。请不要感染自己！(如果你感染了，至少别怪我。)*'
- en: The book aims to present language-agnostic algorithms and approaches, but the
    majority of the code herein is written in Objective-C. I chose not to use Swift,
    a great language for writing Apple apps, because it poses specific challenges
    in the context of security tools. For example, the book often leverages private
    frameworks, which are easy to access in Objective-C but would require additional
    components, such as bridging headers, in Swift. Similarly, interfacing with frameworks
    that expose interfaces and APIs in C, such as the all-important Endpoint Security,
    is straightforward in Objective-C. Accessing these interfaces in Swift often involves
    a maddening amount of type-casting and unwrapping of OpaquePointer and UnsafeMutablePointer
    values.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在展示与语言无关的算法和方法，但本书中的大部分代码是用 Objective-C 编写的。我选择不使用 Swift——这是一个非常适合编写 Apple
    应用的语言，因为它在安全工具的上下文中会带来一些特定的挑战。例如，本书经常使用私有框架，这在 Objective-C 中很容易访问，但在 Swift 中需要额外的组件，例如桥接头文件。同样，使用暴露接口和
    API 的 C 语言框架（如至关重要的 Endpoint Security）在 Objective-C 中非常直接。而在 Swift 中访问这些接口时，通常需要大量的类型转换和对
    OpaquePointer 与 UnsafeMutablePointer 值的解包。
- en: I wrote all code on macOS 14 and tested it on recent versions of macOS, including
    13, 14, and 15\. Where relevant, I’ll discuss coding approaches that diverge across
    versions (for example, when an older API has been replaced by a more modern counterpart).
    The discussion will allow you to write tools compatible with multiple versions
    of the operating system and ensure that you continue to support older versions.
    To discover any new techniques that become available as the operating system updates
    in the future, check out the Objective-See GitHub repositories for up-to-date
    versions of my open source security tools, which implement the majority of the
    code discussed in this book.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我在 macOS 14 上编写了所有代码，并在 macOS 的最新版本（包括 13、14 和 15）上进行了测试。在相关的地方，我会讨论跨版本的编程方法差异（例如，当一个旧的
    API 被更现代的版本取代时）。这些讨论将帮助你编写与多个操作系统版本兼容的工具，并确保你继续支持旧版本。为了发现操作系统未来更新时可能出现的新技术，可以查看
    Objective-See GitHub 上的存储库，获取本书中讨论的大部分开源安全工具的最新版本。
- en: To help you piece together disparate parts of the larger programs presented
    over the course of each chapter, I’ve numbered the book’s code listings using
    sequential listing numbers (such as Listing 1-1, Listing 1-2, and so on). Malware
    samples and command line examples won’t have listing numbers.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助你将每章中呈现的更大程序的不同部分拼凑在一起，我已为本书中的代码清单编号，使用了顺序编号（如清单 1-1、清单 1-2 等）。恶意软件示例和命令行示例没有清单编号。
- en: Development Environment
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发环境
- en: Before you begin, I recommend installing Xcode, Apple’s integrated development
    environment (IDE) and the de facto product for creating security tools on macOS.
    Available for free on the official Mac App Store, Xcode offers a user-friendly
    platform for developing software. I used Xcode to write and compile all code samples
    and tools in this book, so I suggest having a basic understanding of this tool.
    While I don’t provide a detailed guide on Xcode usage here, many excellent free
    tutorials are available online.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始之前，我建议安装 Xcode，这是 Apple 的集成开发环境（IDE），也是在 macOS 上创建安全工具的事实标准产品。Xcode 可以在官方的
    Mac App Store 上免费下载，它提供了一个用户友好的平台用于开发软件。我使用 Xcode 编写并编译了本书中的所有代码示例和工具，因此我建议你对这个工具有基本的了解。虽然这里不提供
    Xcode 使用的详细指南，但网上有许多优秀的免费教程可以参考。
- en: Code Signing Requirements
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码签名要求
- en: 'Speaking of compiling code: if you’ve dabbled in software development on macOS,
    you’ve likely run into challenges related to Apple’s code signing requirements
    or, worse, entitlements. For security reasons, Apple checks a program’s code signing
    information before allowing it to run. (We discuss code signing in more detail
    in [Chapter 3](chapter3.xhtml).)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 说到编译代码：如果你曾在 macOS 上从事软件开发，你可能会遇到与 Apple 的代码签名要求相关的挑战，甚至更糟的是，关于权限的挑战。出于安全原因，Apple
    在允许程序运行之前会检查程序的代码签名信息。（我们在[第3章](chapter3.xhtml)中更详细地讨论了代码签名。）
- en: Luckily, macOS allows code to be signed in an ad hoc manner, meaning you don’t
    have to shell out $99 to Apple for a Developer ID if you’re developing security
    tools that will run locally. In Xcode, under Signing and Capabilities, check the
    **Automatically Manage Signing** option and make sure the Signing Certificate
    is set to **Sign to Run Locally**.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，macOS允许以临时方式对代码进行签名，这意味着如果你正在开发将在本地运行的安全工具，你不需要支付99美元购买Apple的开发者ID。在Xcode中，在“签名与功能”下，勾选**自动管理签名**选项，并确保签名证书设置为**本地运行签名**。
- en: Entitlements
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 权限
- en: Tools that leverage system extensions or Endpoint Security require special entitlements,
    such as *com.apple.developer.endpoint-security.client*, to run. In [Part III](part3.xhtml),
    we cover how to obtain these entitlements from Apple to build distributable tools.
    Obtaining entitlements requires a paid Developer ID account, however.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 利用系统扩展或端点安全的工具需要特殊的权限，例如*com.apple.developer.endpoint-security.client*，才能运行。在[第三部分](part3.xhtml)中，我们将介绍如何从Apple获取这些权限，以构建可分发的工具。不过，获取权限需要付费的开发者ID账户。
- en: For local development and testing, you can work around entitlement requirements
    by disabling System Integrity Protection (SIP).^([5](#fm8-5)) Apple provides documentation
    on how to disable SIP, which involves booting your Mac into Recovery Mode to run
    the command csrutil disable.^([6](#fm8-6))
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本地开发和测试，你可以通过禁用系统完整性保护（SIP）来绕过权限要求。^([5](#fm8-5)) Apple提供了禁用SIP的文档，方法是将Mac启动到恢复模式，执行命令
    `csrutil disable`。^([6](#fm8-6))
- en: 'You’ll also have to disable Apple Mobile File Integrity (AMFI); otherwise,
    entitled binaries that aren’t wholly signed and notarized won’t run. With SIP
    disabled, you can disable AMFI by executing the following, with root privileges,
    from the terminal:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要禁用Apple移动文件完整性（AMFI）；否则，未完全签名和未认证的授权二进制文件将无法运行。禁用SIP后，你可以通过终端以root权限执行以下命令来禁用AMFI：
- en: '[PRE0]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Use nvram -p to confirm the boot arguments were set correctly. Finally, reboot.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `nvram -p` 来确认启动参数是否正确设置。最后，重新启动。
- en: It’s worth stressing that disabling these macOS security mechanisms greatly
    reduces the security of the system. As such, it’s best to do so only within a
    virtual machine or on a dedicated development test machine. To re-enable SIP in
    Recovery Mode, run csrutil enable, and to re-enable AMFI, delete the boot arguments
    by running nvram -d boot-args.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 需要强调的是，禁用这些macOS安全机制会大大降低系统的安全性。因此，最好仅在虚拟机中或在专用的开发测试机器上执行此操作。要在恢复模式下重新启用SIP，运行
    `csrutil enable`，要重新启用AMFI，删除启动参数，通过运行 `nvram -d boot-args`。
- en: Safely Analyzing Malware
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全地分析恶意软件
- en: This book demonstrates many programmatic techniques for detecting Mac malware.
    In the book’s final chapter, you can even follow along as we pit our tools against
    various malware specimens. If you plan to run the code snippets in the book or
    build and test your own tools against this malware, be sure to handle the specimens
    with the utmost care.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 本书展示了许多检测Mac恶意软件的编程技巧。在本书的最后一章，你甚至可以跟着我们一起，利用我们的工具对各种恶意软件样本进行分析。如果你计划运行书中的代码片段，或构建并测试自己的工具来对抗这些恶意软件，一定要非常小心地处理这些样本。
- en: One approach to malware analysis is to use a stand-alone computer as a dedicated
    analysis machine. You should set up this machine in the most minimal of ways,
    with services such as file sharing disabled. In terms of networking, the majority
    of malware will require internet access to fully function (for example, to communicate
    with a command-and-control server for tasking), so you should connect your machine
    to the network in some manner. At a minimum, I recommend routing the network traffic
    through a VPN to hide your location from any attacker who might be on the other
    end.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一种恶意软件分析方法是使用独立计算机作为专用分析机器。你应该以最简化的方式设置这台机器，禁用如文件共享等服务。在网络配置方面，大多数恶意软件需要互联网访问才能完全发挥功能（例如，通信与指挥控制服务器进行任务处理），因此你应该以某种方式将机器连接到网络。至少，我建议通过VPN路由网络流量，以隐藏你的地理位置，防止攻击者追踪。
- en: However, leveraging a stand-alone computer for your analysis has downsides,
    including cost and complexity. The latter becomes especially apparent if you want
    to revert the analysis system to a clean baseline state (for example, to rerun
    a sample or when analyzing a new specimen). Although you could reinstall the operating
    system or, if using Apple File System (APFS), return to a baseline snapshot, these
    are both time-consuming endeavors.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，利用独立计算机进行分析也有一些缺点，包括成本和复杂性。如果你希望将分析系统恢复到一个干净的基准状态（例如，重新运行一个样本或分析一个新样本），后者的缺点尤其明显。虽然你可以重新安装操作系统，或者如果使用
    Apple 文件系统（APFS），返回到基准快照，但这两者都需要消耗时间。
- en: 'To address these drawbacks, you can instead leverage a virtual machine for
    your analysis system. Various companies, such as VMware and Parallels, offer virtualized
    options for macOS systems. The idea is simple: virtualize a new instance of the
    operating system that you can isolate from your underlying environment and, most
    notably, revert to its original state at the click of a button. To install a new
    virtual machine, follow the instructions provided by each vendor. This typically
    involves downloading an operating system installer or updater, dragging and dropping
    it into the virtualization program, and then clicking through the remaining setup.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应对这些缺点，你可以改为利用虚拟机来进行分析。像 VMware 和 Parallels 等公司提供了 macOS 系统的虚拟化选项。这个想法很简单：虚拟化操作系统的新实例，将其与你的基础环境隔离开来，最重要的是，可以通过点击按钮将其恢复到原始状态。要安装新的虚拟机，请按照每个供应商提供的说明操作。通常，这包括下载操作系统安装程序或更新程序，将其拖放到虚拟化程序中，然后完成其余的设置。
- en: NOTE
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*Unfortunately, Apple Silicon systems have limitations when it comes to virtualizing
    macOS. Vendors such as Parallels provide prebuilt virtual machines compatible
    with Apple Silicon but don’t yet support features such as snapshots.*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*不幸的是，Apple Silicon 系统在虚拟化 macOS 时存在一些限制。像 Parallels 这样的供应商提供了与 Apple Silicon
    兼容的预构建虚拟机，但目前尚不支持快照等功能。*'
- en: Before performing any analysis, make sure to disable any sharing between the
    virtual machine and the base system. For example, it would be rather unfortunate
    to run a ransomware sample only to find that it has also encrypted any shared
    files on your host system. Virtual machines also offer options for networking,
    such as host-only and bridged. The former will exclusively allow network connections
    with the host, which may be useful in various analysis situations, such as when
    you’re setting up a local command-and-control server.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行任何分析之前，确保禁用虚拟机与基础系统之间的任何共享。例如，如果你运行了一个勒索软件样本，却发现它也加密了你主机系统上的任何共享文件，那将是相当不幸的。虚拟机还提供了网络选项，如仅主机和桥接。前者只允许与主机进行网络连接，这在各种分析情况下可能会非常有用，例如当你设置本地命令与控制服务器时。
- en: I noted that the ability to revert a virtual machine to its original state can
    greatly speed up malware analysis by allowing you to return to earlier stages
    in the analysis process. You should always take a snapshot before you begin your
    analysis so you can bring the virtual machine back to a known clean slate when
    you’re done. During your analysis session, you should also make judicious use
    of snapshots. For example, take a snapshot immediately prior to allowing the malware
    to execute some core logic. If the malware fails to perform the expected action
    (perhaps because it detected one of your analysis tools and prematurely exited),
    or if your analysis tools failed to gather the data required for your analysis,
    simply revert to the snapshot, make any necessary changes to your analysis environment
    or tools, and then allow the malware to re-execute. On dedicated analysis machines
    or virtual machines that don’t support snapshots, APFS snapshots are likely your
    best bet.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我注意到，将虚拟机恢复到其原始状态的能力可以大大加快恶意软件分析，因为这样可以让你回到分析过程的早期阶段。你在开始分析之前应该始终拍摄一个快照，这样在完成分析后，你可以将虚拟机恢复到一个已知的干净状态。在分析过程中，你也应当明智地使用快照。例如，在允许恶意软件执行某些核心逻辑之前，立即拍摄一个快照。如果恶意软件未能执行预期的操作（可能是因为它检测到你的分析工具并提前退出），或者如果你的分析工具未能收集到所需的数据，只需恢复到快照，进行必要的环境或工具调整，然后重新允许恶意软件执行。在专用分析计算机或不支持快照的虚拟机上，APFS
    快照可能是你的最佳选择。
- en: The main drawback to the virtual machine analysis approach is that malware may
    contain logic to thwart virtual machines. If the malware can successfully detect
    that it’s being virtualized, it will often exit in an attempt to avoid continued
    analysis. See Chapter 9 of *The Art of Mac Malware*, Volume 1, for approaches
    to identifying and overcoming this logic.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机分析方法的主要缺点是恶意软件可能包含阻止虚拟机的逻辑。如果恶意软件能成功检测到自己正在被虚拟化，它通常会退出以避免继续分析。有关识别和克服此类逻辑的方法，请参见《Mac恶意软件艺术》第一卷的第9章。
- en: For more information about setting up an analysis environment, including the
    specific steps for configuring an isolated virtual machine, see Phil Stokes’s
    *How to Reverse Malware on macOS Without Getting Infected*.^([7](#fm8-7))
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 若要获取更多关于设置分析环境的信息，包括配置隔离虚拟机的具体步骤，请参阅Phil Stokes的*如何在不被感染的情况下逆向分析macOS恶意软件*。^([7](#fm8-7))
- en: '## Additional Resources'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '## 额外资源'
- en: For further reading, I recommend the following resources.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 若要进一步阅读，推荐以下资源。
- en: Books
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 书籍
- en: The following list contains some of my favorite books on topics such as reverse
    engineering, macOS internals, and general malware analysis. While a few of these
    books are older, the core reversing and analysis topics should remain timeless.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表包含了一些我最喜欢的书籍，涵盖了逆向工程、macOS内部结构以及一般恶意软件分析等主题。虽然其中有几本书比较旧，但核心的逆向和分析内容应该是永恒的。
- en: '*Blue Fox: Arm Assembly Internals and Reverse Engineering* by Maria Markstedter
    (Wiley, 2023)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**蓝狐：ARM汇编内部结构与逆向工程** 由Maria Markstedter著（Wiley, 2023）'
- en: '*x86 Software Reverse-Engineering, Cracking, and Counter-Measures* by Stephanie
    and Christopher Domas (Wiley, 2024)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**x86软件逆向工程、破解与对策** 由Stephanie和Christopher Domas著（Wiley, 2024）'
- en: The *macOS/iOS (*OS) Internals* trilogy by Jonathan Levin (Technologeeks Press,
    2017)
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jonathan Levin的*macOS/iOS（*OS）内部结构*三部曲（Technologeeks Press, 2017）
- en: '*The Art of Computer Virus Research and Defense* by Péter Ször (Addison-Wesley
    Professional, 2005)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计算机病毒研究与防御艺术** 由Péter Ször著（Addison-Wesley Professional, 2005）'
- en: '*Reversing: Secrets of Reverse Engineering* by Eldad Eilam (Wiley, 2005)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**逆向工程：逆向工程的秘密** 由Eldad Eilam著（Wiley, 2005）'
- en: '*OS X Incident Response: Scripting and Analysis* by Jaron Bradley (Syngress,
    2016)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OS X事件响应：脚本和分析** 由Jaron Bradley著（Syngress, 2016）'
- en: Websites
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网站
- en: 'There used to be a dearth of information about Mac malware analysis online.
    Today, the situation has greatly improved. Several websites collect information
    on this topic, and blogs such as my very own on the Objective-See website are
    dedicated to Mac security topics. The following is an inexhaustive list of some
    of my favorites:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 曾几何时，关于Mac恶意软件分析的资料在网上极为稀缺。如今，情况已大有改观。多个网站收集了这一主题的信息，像我自己在Objective-See网站上的博客也专注于Mac安全相关话题。以下是我最喜欢的一些资源，尽管这并不是一份详尽无遗的清单：
- en: '[*https://<wbr>papers<wbr>.put<wbr>.as*](https://papers.put.as): A fairly exhaustive
    archive of papers and presentations on macOS security topics and malware analysis'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*https://<wbr>papers<wbr>.put<wbr>.as*](https://papers.put.as): 一个相当详尽的关于macOS安全主题和恶意软件分析的论文和演讲档案。'
- en: '[*https://<wbr>themittenmac<wbr>.com*](https://themittenmac.com): The website
    of the noted macOS security researcher and author Jaron Bradley that includes
    incident response tools and threat-hunting knowledge for macOS'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*https://<wbr>themittenmac<wbr>.com*](https://themittenmac.com): 知名macOS安全研究员和作者Jaron
    Bradley的个人网站，包含macOS的事件响应工具和威胁狩猎知识。'
- en: '[*https://<wbr>objective<wbr>-see<wbr>.org<wbr>/blog<wbr>.html*](https://objective-see.org/blog.htm:):
    My blog, which for the last decade has published my research and that of fellow
    security researchers on the topics of macOS malware, exploits, and more'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*https://<wbr>objective<wbr>-see<wbr>.org<wbr>/blog<wbr>.html*](https://objective-see.org/blog.htm:):
    我的博客，过去十年来发布了我和其他安全研究人员在macOS恶意软件、漏洞利用等方面的研究成果。'
- en: Notes
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注释
- en: '[  1](#fm8_1).  “Worldwide PC Shipments Decline Another 15.0% in the Third
    Quarter of 2022, According to IDC Tracker,” *Business Wire*, October 9, 2022,
    [*https://<wbr>www<wbr>.businesswire<wbr>.com<wbr>/news<wbr>/home<wbr>/20221009005049<wbr>/en<wbr>/Worldwide<wbr>-PC<wbr>-Shipments<wbr>-Decline<wbr>-Another<wbr>-15<wbr>.0<wbr>-in<wbr>-the<wbr>-Third<wbr>-Quarter<wbr>-of<wbr>-2022<wbr>-According<wbr>-to<wbr>-IDC<wbr>-Tracker*](https://www.businesswire.com/news/home/20221009005049/en/Worldwide-PC-Shipments-Decline-Another-15.0-in-the-Third-Quarter-of-2022-According-to-IDC-Tracker).'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[  1](#fm8_1).  “根据 IDC 跟踪器，2022 年第三季度全球 PC 出货量再下降 15.0%”，*商业新闻*，2022 年 10
    月 9 日，[*https://www.businesswire.com/news/home/20221009005049/en/Worldwide-PC-Shipments-Decline-Another-15.0-in-the-Third-Quarter-of-2022-According-to-IDC-Tracker*](https://www.businesswire.com/news/home/20221009005049/en/Worldwide-PC-Shipments-Decline-Another-15.0-in-the-Third-Quarter-of-2022-According-to-IDC-Tracker).'
- en: '[2](#fm8_2).  “Jamf Q3 Data Confirms Rapid Mac Adoption Across the Enterprise,”
    *Computer World*, November 11, 2022, [*https://<wbr>www<wbr>.computerworld<wbr>.com<wbr>/article<wbr>/3679730<wbr>/jamf<wbr>-q3<wbr>-data<wbr>-confirms<wbr>-rapid<wbr>-mac<wbr>-adoption<wbr>-across<wbr>-the<wbr>-enterprise<wbr>.html*](https://www.computerworld.com/article/3679730/jamf-q3-data-confirms-rapid-mac-adoption-across-the-enterprise.html).'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[2](#fm8_2).  “Jamf 第三季度数据确认 Mac 在企业中的快速普及”，*Computer World*，2022 年 11 月 11
    日，[*https://www.computerworld.com/article/3679730/jamf-q3-data-confirms-rapid-mac-adoption-across-the-enterprise.html*](https://www.computerworld.com/article/3679730/jamf-q3-data-confirms-rapid-mac-adoption-across-the-enterprise.html).'
- en: '[  3](#fm8_3).  “Malwarebytes Finds Mac Threats Outpace Windows for the First
    Time in Latest State of Malware Report,” *Malwarebytes*, February 11, 2020, [*https://<wbr>www<wbr>.malwarebytes<wbr>.com<wbr>/press<wbr>/2020<wbr>/02<wbr>/11<wbr>/malwarebytes<wbr>-finds<wbr>-mac<wbr>-threats<wbr>-outpace<wbr>-windows<wbr>-for<wbr>-the<wbr>-first<wbr>-time<wbr>-in<wbr>-latest<wbr>-state<wbr>-of<wbr>-malware<wbr>-report*](https://www.malwarebytes.com/press/2020/02/11/malwarebytes-finds-mac-threats-outpace-windows-for-the-first-time-in-latest-state-of-malware-report).'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[  3](#fm8_3).  “Malwarebytes 发现 Mac 威胁首次超越 Windows，成为最新恶意软件报告中的主角”，*Malwarebytes*，2020
    年 2 月 11 日，[*https://www.malwarebytes.com/press/2020/02/11/malwarebytes-finds-mac-threats-outpace-windows-for-the-first-time-in-latest-state-of-malware-report*](https://www.malwarebytes.com/press/2020/02/11/malwarebytes-finds-mac-threats-outpace-windows-for-the-first-time-in-latest-state-of-malware-report).'
- en: '[  4](#fm8_4).  US Department of Justice, Office of Public Affairs, “Ohio Computer
    Programmer Indicted for Infecting Thousands of Computers with Malicious Software
    and Gaining Access to Victims’ Communications and Personal Information,” press
    release no. 18-21, January 10, 2018, [*https://<wbr>www<wbr>.justice<wbr>.gov<wbr>/opa<wbr>/pr<wbr>/ohio<wbr>-computer<wbr>-programmer<wbr>-indicted<wbr>-infecting<wbr>-thousands<wbr>-computers<wbr>-malicious<wbr>-software<wbr>-and*](https://www.justice.gov/opa/pr/ohio-computer-programmer-indicted-infecting-thousands-computers-malicious-software-and).'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[  4](#fm8_4).  美国司法部公共事务办公室，“俄亥俄州计算机程序员因感染数千台计算机恶意软件并获得受害人通信和个人信息而被起诉”，新闻稿第
    18-21 号，2018 年 1 月 10 日，[*https://www.justice.gov/opa/pr/ohio-computer-programmer-indicted-infecting-thousands-computers-malicious-software-and*](https://www.justice.gov/opa/pr/ohio-computer-programmer-indicted-infecting-thousands-computers-malicious-software-and).'
- en: '[  5](#fm8_5).  “System Extensions and DriverKit,” Apple, accessed May 25,
    2024, [*https://<wbr>developer<wbr>.apple<wbr>.com<wbr>/system<wbr>-extensions<wbr>/*](https://developer.apple.com/system-extensions/).'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[  5](#fm8_5).  “系统扩展和 DriverKit”，Apple，访问日期：2024 年 5 月 25 日，[*https://developer.apple.com/system-extensions/*](https://developer.apple.com/system-extensions/).'
- en: '[  6](#fm8_6).  “Disabling and Enabling System Integrity Protection,” Apple,
    accessed May 25, 2024, [*https://<wbr>developer<wbr>.apple<wbr>.com<wbr>/documentation<wbr>/security<wbr>/disabling<wbr>_and<wbr>_enabling<wbr>_system<wbr>_integrity<wbr>_protection<wbr>?language<wbr>=objc*](https://developer.apple.com/documentation/security/disabling_and_enabling_system_integrity_protection?language=objc).'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[  6](#fm8_6).  “禁用和启用系统完整性保护”，Apple，访问日期：2024 年 5 月 25 日，[*https://developer.apple.com/documentation/security/disabling_and_enabling_system_integrity_protection?language=objc*](https://developer.apple.com/documentation/security/disabling_and_enabling_system_integrity_protection?language=objc).'
- en: '[  7](#fm8_7).  Phil Stokes, *How to Reverse Malware on macOS Without Getting
    Infected*, August 14, 2019, [*https://<wbr>go<wbr>.sentinelone<wbr>.com<wbr>/rs<wbr>/327<wbr>-MNM<wbr>-087<wbr>/images<wbr>/reverse<wbr>_mw<wbr>_final<wbr>_9<wbr>.pdf*](https://go.sentinelone.com/rs/327-MNM-087/images/reverse_mw_final_9.pdf).'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[  7](#fm8_7).  Phil Stokes，*如何在 macOS 上反转恶意软件而不被感染*，2019年8月14日，[*https://<wbr>go<wbr>.sentinelone<wbr>.com<wbr>/rs<wbr>/327<wbr>-MNM<wbr>-087<wbr>/images<wbr>/reverse<wbr>_mw<wbr>_final<wbr>_9<wbr>.pdf*](https://go.sentinelone.com/rs/327-MNM-087/images/reverse_mw_final_9.pdf)。'
