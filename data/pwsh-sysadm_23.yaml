- en: '20'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '20'
- en: CREATING AND CONFIGURING AN IIS WEB SERVER
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 创建与配置 IIS Web 服务器
- en: '![Images](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common.jpg)'
- en: 'You’re at the last step in your automation journey: the web server. In this
    chapter, you’ll use *IIS*, a built-in Windows service that provides web services
    to clients. IIS is a server type you’ll run into often enough when you’re doing
    IT work—in other words, it’s an area ripe for automation! As in previous chapters,
    first you’ll deploy an IIS web server from scratch; then you’ll focus on getting
    the service installed and some basic configuration applied.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经完成了自动化过程的最后一步：Web 服务器。在本章中，你将使用 *IIS*，一个内置的 Windows 服务，提供 Web 服务给客户端。IIS
    是你在进行 IT 工作时常常遇到的服务器类型——换句话说，它是一个非常适合自动化的领域！与前几章一样，你首先将从零部署一个 IIS Web 服务器；然后你将专注于安装服务并应用一些基本配置。
- en: Prerequisites
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 前提条件
- en: 'By now, you should be familiar with how to get a fresh virtual machine created
    and set up, so we won’t be covering those steps. I’m assuming that you already
    have a virtual machine up and running with Windows Server installed. If you don’t,
    you could leverage our existing work in the PowerLab module by running this command:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你应该已经熟悉如何创建和设置一个新的虚拟机，因此我们不会再重复这些步骤。我假设你已经有一个安装了 Windows Server 的虚拟机。如果没有，你可以通过运行以下命令，利用我们在
    PowerLab 模块中现有的工作：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice that you specify a `Generic` server type this time; this is because you
    haven’t yet added full support for web servers (the task for this chapter!).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这次你指定了一个 `Generic` 服务器类型；这是因为你还没有为 Web 服务器提供完全的支持（这就是本章的任务！）。
- en: Installation and Setup
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装与设置
- en: 'Once you’ve created a VM, it’s time to set up IIS. IIS is a Windows feature,
    and fortunately, PowerShell has a built-in command to install Windows features
    called `Add-WindowsFeature`. If you were doing this as a one-off test, you *could*
    use a single line to install IIS, but since you’re building this automation into
    a bigger project, you’ll install IIS just as you did SQL: by creating a function.
    Let’s call it `Install-PowerLabWebServer`.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 创建虚拟机后，就该设置 IIS 了。IIS 是一个 Windows 功能，幸运的是，PowerShell 提供了一个内置命令来安装 Windows 功能，叫做
    `Add-WindowsFeature`。如果你只是做一次性测试，你 *可以* 使用一行代码来安装 IIS，但既然你正在将这个自动化集成到一个更大的项目中，你将像安装
    SQL 一样通过创建一个函数来安装 IIS。我们将其命名为 `Install-PowerLabWebServer`。
- en: You’ll have this function adhere to the model you created earlier when you made
    the `Install-PowerLabSqlServer` function. As you begin to add further server support
    to this project, you’ll see how creating a function for even just a single line
    of code will make using the module, and changing it, much, much easier!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你将让这个函数遵循你之前创建的 `Install-PowerLabSqlServer` 函数的模型。当你开始为这个项目增加更多服务器支持时，你会发现，即使只是为一行代码创建一个函数，也能让使用和修改模块变得更加容易！
- en: The easiest way to mirror the `Install-PowerLabSqlServer` function as closely
    as possible is to take the “skeleton” of the function by removing any of the SQL
    Server–specific code. Normally, I’d recommend reusing an existing function instead
    of building another one, but in this case, you have a completely different “object:”
    a SQL Server versus an IIS server. It makes more sense to have a different function.
    In [Listing 20-1](ch20.xhtml#ch20list1), you simply copy the `Install-PowerLabSqlServer`
    function but remove the “guts” while keeping all of the common parameters (you
    exclude the `AnswerFilePath` and `IsoFilePath` parameters since IIS doesn’t need
    them).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方式是尽可能地模仿 `Install-PowerLabSqlServer` 函数，去掉任何 SQL Server 特定的代码。通常，我会建议重用现有的函数而不是再创建一个新的，但在这个案例中，你有一个完全不同的“对象”：SQL
    Server 与 IIS 服务器。拥有一个不同的函数更为合理。在 [清单 20-1](ch20.xhtml#ch20list1) 中，你只需复制 `Install-PowerLabSqlServer`
    函数，去掉其“核心”部分，同时保留所有公共参数（你需要排除 `AnswerFilePath` 和 `IsoFilePath` 参数，因为 IIS 不需要这些参数）。
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 20-1: The “skeleton” `Install-PowerLabWebServer` function*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 20-1： “框架” `Install-PowerLabWebServer` 函数*'
- en: 'As for actually setting up the IIS service, that’s a piece of cake: you simply
    need to run one command that installs the `Web-Server` feature. Go ahead and add
    that line into your `Install-PowerLabWebServer` function ([Listing 20-2](ch20.xhtml#ch20list2)).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 至于如何设置 IIS 服务，那简直是小菜一碟：你只需要运行一个命令来安装 `Web-Server` 功能。赶紧将这一行添加到你的 `Install-PowerLabWebServer`
    函数中（[清单 20-2](ch20.xhtml#ch20list2)）。
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 20-2: The `Install-PowerLabWebServer` function*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 20-2： `Install-PowerLabWebServer` 函数*'
- en: The start of your `Install-PowerLabWebServer` function is complete! Let’s add
    more code to it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 `Install-PowerLabWebServer` 函数的开头部分已经完成！接下来我们添加更多代码。
- en: Building Web Servers from Scratch
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从零构建 Web 服务器
- en: 'Now that you have an install function for IIS, it’s time to update your `New-PowerLabServer`
    function. Recall in [Chapter 19](ch19.xhtml#ch19) that when you were refactoring
    your `New-PowerLabServer` function, you were forced to use placeholder code for
    the web server parts because you didn’t have the functionality needed. You used
    the line `Write-Host ''Web server deployments are not` `supported` `at this` `time''`
    as filler code. Now’s let’s replace that text with a call to your newly created
    `Install-PowerLabWebServer` function:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经有了一个IIS安装功能，是时候更新您的`New-PowerLabServer`函数了。回想一下在[第19章](ch19.xhtml#ch19)中，当您在重构`New-PowerLabServer`函数时，由于缺乏所需功能，您不得不使用占位符代码来处理Web服务器部分。您使用了这一行`Write-Host
    'Web server deployments are not` `supported` `at this` `time'`作为填充代码。现在，让我们将这段文本替换为调用您新创建的`Install-PowerLabWebServer`函数：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once you do this, you can bring up web servers the same way you do SQL servers!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，您可以像处理SQL服务器一样启动Web服务器！
- en: The WebAdministration Module
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: WebAdministration模块
- en: Once you have a web server up and running, you need to do something with it.
    When the `Web-Server` feature is enabled on a server, a PowerShell module called
    `WebAdministration` is installed. This module contains the many commands needed
    to handle IIS objects. The `Web-Server` feature also creates a PowerShell drive
    called IIS that allows you to manage common IIS objects (websites, application
    pools, and so forth).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Web服务器启动并运行，您需要对其进行操作。当`Web-Server`功能在服务器上启用时，会安装一个名为`WebAdministration`的PowerShell模块。此模块包含了处理IIS对象所需的多个命令。`Web-Server`功能还会创建一个名为IIS的PowerShell驱动程序，允许您管理常见的IIS对象（如网站、应用程序池等）。
- en: A *PowerShell drive* allows you to navigate data sources just like a filesystem.
    You’ll see next that you can manipulate websites, application pools, and many
    other IIS objects exactly as you would files and folders by using common cmdlets
    like `Get-Item`, `Set-Item`, and `Remove-Item`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*PowerShell驱动程序*使您能够像操作文件系统一样浏览数据源。接下来，您将看到，您可以像操作文件和文件夹一样，使用常见的cmdlet（如`Get-Item`、`Set-Item`和`Remove-Item`）来操作网站、应用程序池以及其他许多IIS对象。'
- en: To make the IIS drive available, you first have to import the `WebAdministration`
    module. Let’s remote into your newly created web server and play around with the
    module a bit to see what you can do.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要使IIS驱动程序可用，您首先需要导入`WebAdministration`模块。让我们远程连接到您新创建的Web服务器，并稍微操作一下该模块，看看您能做些什么。
- en: 'First, you’ll create a new PowerShell Direct session and enter it interactively.
    Previously, you were mostly using `Invoke-Command` to send commands to VMs. Now,
    since you’re just investigating what’s possible with IIS, you use `Enter-PSSession`
    to interactively work inside of the session:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您将创建一个新的PowerShell Direct会话，并以交互模式进入。之前，您主要使用`Invoke-Command`将命令发送到虚拟机。现在，由于您只是在调查IIS的可能性，您使用`Enter-PSSession`以交互方式在会话中工作：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Notice the `[WEBSRV]` in front of the final prompt. This is a signal that you’re
    now working on the WEBSRV host and can import the `WebAdministration` module.
    Once the module is imported into the session, you can verify that the IIS drive
    is created by running `Get-PSDrive`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意最终提示符前的`[WEBSRV]`。这表明您现在正在操作WEBSRV主机，并且可以导入`WebAdministration`模块。一旦模块被导入到会话中，您可以通过运行`Get-PSDrive`来验证IIS驱动程序是否已创建：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can peruse this drive as you can any other PowerShell drive: by treating
    it like a filesystem and using commands such as `Get-ChildItem` to list items
    in the drive, `New-Item` to create new items, and `Set-Item` to modify items.
    But doing all that work isn’t automating; it’s just managing IIS via the command
    line. And you’re here to automate stuff! The only reason I’m mentioning the IIS
    drive now is that it will come in handy for automation tasks later, and it’s always
    good to know how to do things manually, in case you need to troubleshoot automation
    when it goes awry.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以像使用任何其他PowerShell驱动程序一样浏览此驱动程序：通过将其视为文件系统，使用`Get-ChildItem`列出驱动程序中的项，使用`New-Item`创建新项，以及使用`Set-Item`修改项。但执行这些操作并不等于自动化；这只是通过命令行管理IIS。而您是来进行自动化的！我之所以现在提到IIS驱动程序，是因为它在后续的自动化任务中会派上用场，而且了解如何手动操作总是好事，万一自动化出问题，您可以进行故障排除。
- en: Websites and Application Pools
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网站和应用程序池
- en: The commands in the `WebAdministration` module manage and automate just about
    every facet of IIS. You’ll begin by looking at how to handle websites and applications,
    as websites and application pools are two of the most common components that system
    administrators work with in the real world.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebAdministration`模块中的命令几乎可以管理和自动化IIS的每个方面。你将首先了解如何处理网站和应用程序，因为网站和应用程序池是系统管理员在现实世界中最常操作的两个常见组件。'
- en: Websites
  id: totrans-33
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 网站
- en: 'You’ll start with a simple command: `Get-Website`, which lets you query IIS
    and returns all websites that currently exist on a web server:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你将从一个简单的命令开始：`Get-Website`，它允许你查询IIS并返回当前在Web服务器上存在的所有网站：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You’ll notice that you already created a website. This is because IIS has a
    website called Default Web Site when it is installed. But let’s say you don’t
    want this default website and would rather create your own. You can remove it
    by piping the output of `Get-Website` to `Remove-Website`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到你已经创建了一个网站。这是因为IIS在安装时会有一个名为“Default Web Site”的默认网站。但假设你不想要这个默认网站，而是想创建你自己的网站，你可以通过将`Get-Website`命令的输出管道传递给`Remove-Website`来删除它：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you want to create a website, you can do so just as easily by using the
    `New-Website` command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想创建一个网站，你也可以像使用`New-Website`命令那样轻松创建一个：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If the website’s bindings are off, and you want to change them (say you want
    to bind to a nonstandard port), you can use the `Set-WebBinding` command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果网站的绑定有问题，你想要更改它们（比如你想绑定到非标准端口），你可以使用`Set-WebBinding`命令：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You’ve seen a lot of what you can do with websites. Let’s check out what’s possible
    with application pools.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到很多关于网站的操作。接下来，我们来看看应用程序池有什么可能性。
- en: Application Pools
  id: totrans-43
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 应用程序池
- en: '*Application pools* allow you to isolate your applications from one another,
    even if they are running on the same server. This way, if an error exists in one
    app, it won’t take down other applications.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*应用程序池*允许你将应用程序彼此隔离，即使它们运行在同一台服务器上。这样，如果一个应用程序出现错误，它不会影响其他应用程序。'
- en: 'The commands for application pools are similar to those for websites, as you
    can see in the following code. Since I have only a single application pool, only
    the `DefaultAppPool` shows up for me. If you run this command on your own web
    server, you may see more:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序池的命令与网站的命令类似，正如下面的代码所示。由于我只有一个应用程序池，所以只有`DefaultAppPool`显示。如果你在自己的Web服务器上运行这个命令，可能会看到更多内容：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Since you already created a website, let’s see how to create an app pool and
    assign it to your website. To create an app pool, use the `New-WebAppPool` command,
    as shown in [Listing 20-3](ch20.xhtml#ch20list3).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你已经创建了一个网站，接下来我们来看看如何创建应用程序池并将它分配给你的网站。要创建应用程序池，请使用`New-WebAppPool`命令，如[示例20-3](ch20.xhtml#ch20list3)所示。
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 20-3: Creating an app pool*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例20-3：创建应用程序池*'
- en: Unfortunately, not all IIS tasks have a built-in cmdlet. To assign the app pool
    to an existing website, you have to use `Set-ItemProperty` and change the website
    in the IIS drive ❶ (as shown next). To apply that update, you need to stop ❷ and
    restart ❸ the website.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，并非所有IIS任务都有内置的cmdlet。要将应用程序池分配给现有的网站，你需要使用`Set-ItemProperty`并更改IIS驱动器中的网站❶（如下所示）。要应用该更新，你需要停止❷并重新启动❸该网站。
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You can also see that you can confirm that the app pool was changing by looking
    at the `applicationPool` property returned from running `Get-Website`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以看到，你可以通过查看运行`Get-Website`命令返回的`applicationPool`属性来确认应用程序池是否已更改。
- en: Configuring SSL on a Website
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置网站的SSL
- en: Now that you’ve seen the commands for working with IIS, let’s go back to your
    PowerLab module and write a function that will install an IIS certificate and
    change the binding to port 443.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了用于操作IIS的命令，接下来我们回到你的PowerLab模块，编写一个函数，用来安装IIS证书并将绑定更改为端口443。
- en: You can either get a “real” certificate from a valid certificate authority or
    create a self-signed certificate by using the `New-SelfSignedCertificate` function.
    Because I’m just demonstrating this concept, let’s create a self-signed certificate
    for now and use that.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从有效的证书颁发机构获取一个“真实”的证书，或者通过使用`New-SelfSignedCertificate`函数创建一个自签名证书。因为我只是演示这个概念，所以我们现在就创建一个自签名证书并使用它。
- en: First, lay out the function and specify all the parameters you need ([Listing
    20-4](ch20.xhtml#ch20list4)).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，编写这个函数，并指定你需要的所有参数（见[示例20-4](ch20.xhtml#ch20list4)）。
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 20-4: The start of `New-IISCertificate`*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例20-4：`New-IISCertificate`的开始*'
- en: The first thing this function needs to do is create a self-signed certificate.
    You can do so with the `New-SelfSignedCertificate` command, which imports the
    certificate into the local computer’s `LocalMachine` *certificate store*, where
    all the computer’s certificates are housed. When you call `New-Self``SignedCertificate`,
    you can pass a `Subject` parameter to store a string that will give you information
    about what the certificate is. Generating the certificate will also import it
    into the local computer.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数需要做的第一件事是创建一个自签名证书。你可以使用 `New-SelfSignedCertificate` 命令来完成这项操作，该命令将证书导入本地计算机的
    `LocalMachine` *证书存储* 中，所有计算机的证书都存放在这里。当你调用 `New-SelfSignedCertificate` 时，你可以传递一个
    `Subject` 参数来存储一个字符串，该字符串会告诉你证书的相关信息。生成证书时，它也会被导入到本地计算机中。
- en: '[Listing 20-5](ch20.xhtml#ch20list5) provides the line you’ll use to generate
    the certificate using the passed-in subject (`$CertificateSubject`). Remember
    that you can use the `$null` variable to store the results of a command so that
    it doesn’t output anything to the console.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 20-5](ch20.xhtml#ch20list5)提供了你将用于生成证书的代码行，该代码行使用了传入的主题（`$CertificateSubject`）。记住，你可以使用`$null`变量来存储命令的结果，这样就不会将任何内容输出到控制台。'
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*Listing 20-5: Creating a self-signed certificate*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 20-5：创建自签名证书*'
- en: 'Once the certificate is created, you need to do two things: get the thumbprint
    of the certificate, and export the private key from the certificate. A certificate
    *thumbprint* is a string that uniquely identifies the certificate; the certificate’s
    *private key* is used to encrypt and decrypt the data sent to your server (I won’t
    go into the details here).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦证书被创建，你需要做两件事：获取证书的指纹，并从证书中导出私钥。证书的 *指纹* 是一个唯一标识证书的字符串；证书的 *私钥* 用于加密和解密发送到服务器的数据（这里我不详细讲解）。
- en: 'You could have gotten the thumbprint from `New-SelfSignedCertificate`’s output,
    but we’re assuming that this certificate is going to be used on a computer other
    than the one you created it on, as that’s the more realistic scenario. To handle
    this, you first need to export the public key from your self-signed certificate,
    which you can do by using the `Export-Certificate` command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你本可以从 `New-SelfSignedCertificate` 的输出中获取指纹，但我们假设这个证书将被用于与创建它的计算机不同的计算机上，因为这更符合实际情况。为了解决这个问题，你需要先从自签名证书中导出公钥，可以使用
    `Export-Certificate` 命令来完成：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding command will give you a *.cer* public key file, which you can
    use, along with some .NET magic, to temporarily import the certificate and retrieve
    the thumbprint:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的命令将给你一个 *.cer* 公钥文件，你可以使用它，以及一些 .NET 魔法，暂时导入证书并检索指纹：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now that you have the certificate’s thumbprint, you need to export the private
    key, which you’ll use to attach to the SSL binding on the web server. Here are
    the commands for exporting the private key:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了证书的指纹，你需要导出私钥，你将使用它来绑定到 Web 服务器上的 SSL。以下是导出私钥的命令：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Once you have a private key, you can import your certificate into a certificate
    store on the web server by using the `Import-PfxCertificate` command. First, though,
    you need to check whether it was already imported. This is why you had to get
    the thumbprint earlier. You can use a certificate’s unique thumbprints to verify
    whether it already exists on the web server.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了私钥，就可以使用 `Import-PfxCertificate` 命令将证书导入到 Web 服务器的证书存储中。然而，在此之前，你需要检查证书是否已被导入。这就是为什么你需要先获取指纹的原因。你可以使用证书的唯一指纹来验证它是否已存在于
    Web 服务器上。
- en: 'To import your certificate, you need to use a few of the commands you saw earlier
    in the chapter: you’ll create a PowerShell direct session, import the `WebAdministration`
    module, check whether the certificate exists, and then add it if it doesn’t. You’ll
    leave the last step out for now, and write up the code to do the rest in [Listing
    20-6](ch20.xhtml#ch20list6).'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要导入你的证书，你需要使用本章前面看到的几个命令：你将创建一个 PowerShell 直接会话，导入 `WebAdministration` 模块，检查证书是否存在，如果不存在则添加它。你暂时跳过最后一步，并在[列表
    20-6](ch20.xhtml#ch20list6)中编写代码完成其余的操作。
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '*Listing 20-6: Checking whether the certificate already exists*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 20-6：检查证书是否已存在*'
- en: The first two lines of code should be familiar from earlier in the chapter,
    but notice that you have to use `Invoke-Command` to import the module remotely.
    Likewise, since you’re using a local variable inside the scriptblock in your `if`
    statement, you need to use the `$using:` prefix to expand the variable on the
    remote machine.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的前两行你应该已经在本章早些时候见过，但请注意，你需要使用 `Invoke-Command` 来远程导入模块。同样，由于你在 `if` 语句的脚本块中使用了本地变量，你需要使用
    `$using:` 前缀来扩展远程计算机上的变量。
- en: 'Let’s fill in the code for the `else` statement in [Listing 20-7](ch20.xhtml#ch20list7).
    You need to do four things to finish setting up the IIS certificate. First, you
    need to copy the private key to the web server. Then you need to import the private
    key by using `Import-PfxCertificate`. Lastly, you need to set the SSL binding
    and then force it to use the private key:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 [Listing 20-7](ch20.xhtml#ch20list7) 中填写 `else` 语句的代码。你需要做四件事来完成 IIS 证书的设置。首先，你需要将私钥复制到
    Web 服务器上。然后，你需要使用 `Import-PfxCertificate` 导入私钥。最后，你需要设置 SSL 绑定，并强制它使用私钥：
- en: '[PRE19]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '*Listing 20-7: Binding an SSL certificate to an IIS*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 20-7: 将 SSL 证书绑定到 IIS*'
- en: One thing to point out about this code is that you set the site binding on your
    website to use port 443 instead of port 80\. You do this to ensure that the website
    adheres to the typical SSL port of 443, allowing web browsers to understand that
    you’re using encrypting web traffic.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 需要指出的是，在这段代码中，你将网站的绑定端口设置为 443，而不是 80\。这样做是为了确保网站遵循典型的 SSL 端口 443，允许 Web 浏览器理解你正在加密
    Web 流量。
- en: 'At this point, you’re finished! You have successfully installed a self-signed
    certificate on the web server, created the SSL binding for your site, and forced
    the SSL binding to use your certificate! The only thing left to do is clean up
    the session you’ve been working in:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经完成了！你已经成功地在 Web 服务器上安装了一个自签名证书，创建了站点的 SSL 绑定，并强制 SSL 绑定使用你的证书！剩下的就是清理你所工作的会话：
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: After your session is cleaned up, you can browse to *https://<webservername**>*
    and you’ll be prompted to trust the certificate. All browsers will do this because
    you issued a self-signed certificate, and not one issued by a public certificate
    authority. Once you trust the certificate, you’ll be presented with the default
    IIS web page.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在清理会话后，你可以浏览到 *https://<webservername>*，并会被提示信任该证书。所有浏览器都会这么做，因为你颁发了一个自签名证书，而不是由公共证书授权机构颁发的证书。信任该证书后，你将看到默认的
    IIS 网页。
- en: Be sure to check out the `New-IISCertificate` function inside the PowerLab module
    to see all these commands in one place.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必查看 PowerLab 模块中的 `New-IISCertificate` 函数，了解如何在一个地方查看所有这些命令。
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter covered yet another type of server, the web server. You learned
    how to create a web server from scratch, exactly the same way as you create SQL
    servers. You also learned some of the commands inside the `WebAdministration`
    module that comes with IIS. You learned how to use built-in commands to perform
    many basic tasks as well as looked at the IIS PowerShell drive that’s created.
    To wrap up the chapter, you followed, in detail, a real-world scenario that required
    piecing together many of the commands and techniques covered earlier.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了另一种类型的服务器——Web 服务器。你学习了如何从零开始创建 Web 服务器，方法与创建 SQL 服务器完全相同。你还学习了 `WebAdministration`
    模块中一些命令，该模块随 IIS 一起提供。你了解了如何使用内置命令执行许多基本任务，并查看了创建的 IIS PowerShell 驱动器。为了总结本章内容，你详细跟踪了一个真实的场景，该场景需要将之前涵盖的许多命令和技术结合起来使用。
- en: If you’ve made it through this entire book, congratulations! We covered a lot
    of ground and I’m glad you stuck around. The skills you’ve learned and the projects
    you built should give you a foundation to solve problems with PowerShell. Take
    what you’ve learned here, close the book, and get to scripting. Just start somewhere
    and automate it with PowerShell. The only way you’ll truly master the concepts
    covered in this book is by practicing. There’s no better than time than now!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经完成了整本书，恭喜你！我们已经覆盖了很多内容，我很高兴你坚持下来了。你学到的技能和你构建的项目应该为你解决 PowerShell 问题打下基础。把你在这里学到的内容带走，合上书本，开始编写脚本吧。只要开始，并用
    PowerShell 自动化它。你真正掌握本书中涉及的概念的唯一方法就是练习。现在就是最好的时机！
