- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">6</samp> <samp class="SANS_Dogma_OT_Bold_B_11">ADDING
    PROFESSIONAL POWER CONTROL</samp>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">6</samp> <samp class="SANS_Dogma_OT_Bold_B_11">添加专业电源控制</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: 'Instead of controlling power to your Arduino with a switch or USB cable, you
    can use *soft power control*: turning power on and off with buttons or having
    your Arduino turn itself off via the sketch or external sensor. Soft power increases
    the professionalism of your projects. If you’re designing, say, a fancy hi-fi
    amplifier, a pair of on/off buttons looks far nicer than the type of on/off switch
    you’d find on industrial equipment.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用*软电源控制*而不是通过开关或USB线来控制Arduino的电源：通过按钮打开和关闭电源，或者让Arduino通过程序或外部传感器自动关闭电源。软电源提高了项目的专业性。例如，如果你正在设计一个精美的高保真放大器，一对开关按钮看起来比你在工业设备上看到的那种开关要好得多。
- en: 'This chapter introduces various methods of soft power control. You’ll learn
    to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了多种软电源控制方法。你将学到：
- en: Control larger currents with MOSFETs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MOSFET控制更大的电流
- en: Use the 555 timer IC in bistable mode
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用555定时器IC的双稳态模式
- en: Turn on Arduino circuits with external devices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用外部设备打开Arduino电路
- en: Conserve power by building projects that turn on only when required
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过构建仅在需要时开启的项目来节省电力
- en: Use the DS3231 real-time clock (RTC) library for Arduino
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DS3231实时时钟（RTC）库进行Arduino开发
- en: You’ll also create a soft on/off switch for your Arduino and build a low-power
    event logger.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将为Arduino创建一个软开关，并构建一个低功耗事件记录器。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Power the Arduino without a Physical
    Switch</samp>
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">无物理开关供电Arduino</samp>
- en: It’s common to supply power to Arduino projects with the USB socket, battery
    pack, or external AC adapter. Turning the project on and off in these cases means
    removing a cable or DC plug, which works well if you’re just experimenting or
    building something for your own use. However, soft power control allows you to
    control the power to your Arduino project by using buttons or signals from other
    devices or allowing an Arduino project to turn itself off completely. This doesn’t
    require a “hard” physical switch to connect or cut current flow.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为Arduino项目供电通常是通过USB插口、电池组或外部AC适配器。此时打开和关闭项目意味着需要拔掉电缆或DC插头，这对于仅做实验或为个人使用而构建的项目来说是可行的。然而，软电源控制使你能够通过按钮或来自其他设备的信号控制Arduino项目的电源，或者让Arduino项目完全关机。这不需要连接或切断电流流动的“硬”物理开关。
- en: Soft power control saves on hardware wear and tear, as there are no moving parts
    for power control, and makes interfaces simpler and easier to use. Turning power
    on and off with buttons or further automating device controls creates a better
    user experience.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 软电源控制减少了硬件的磨损，因为没有用于电源控制的活动部件，并且使接口更加简洁易用。通过按钮开启和关闭电源，或者进一步自动化设备控制，能够创造更好的用户体验。
- en: 'This section further discusses two types of components that are required for
    these soft power control circuits: the MOSFET, used for switching current; and
    the 555 timer IC, in this case used as an interface between on and off signals
    in soft power control.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本节进一步讨论了实现这些软电源控制电路所需的两种组件：用于开关电流的MOSFET；以及555定时器IC，在本例中作为软电源控制中的开关信号接口。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Operating MOSFETs</samp>
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">操作MOSFET</samp>
- en: MOSFETs allow you to switch large voltages and currents with a small signal,
    such as that from our Arduino’s digital output pins. They are available in various
    sizes, such as those shown in [Figure 6-1](chapter6.xhtml#fig6-1).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: MOSFET允许你通过小信号（例如来自Arduino数字输出引脚的信号）开关大电压和电流。它们有多种大小可供选择，如[图6-1](chapter6.xhtml#fig6-1)所示。
- en: '![A PHOTO OF VARIOUS THROUGH-HOLE AND SURFACE-MOUNT MOSFETS](../images/fig6-1.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![各种穿孔和表面贴装MOSFET的照片](../images/fig6-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-1: Various MOSFETs</samp>'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图6-1：各种MOSFET</samp>
- en: 'The bottom left of [Figure 6-1](chapter6.xhtml#fig6-1) shows the small 2N7000
    N-MOSFET from Project #14 in [Chapter 4](chapter4.xhtml), which we’ll also use
    in this chapter. Looking at the front of the 2N7000 (the flat-faced side), the
    three pins are, from left to right:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[图6-1](chapter6.xhtml#fig6-1)左下角显示的是来自[第4章](chapter4.xhtml)项目#14的小型2N7000 N-MOSFET，我们将在本章中继续使用它。看2N7000的正面（平面一侧），三个引脚从左到右分别是：'
- en: Source
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电源
- en: Gate
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 门极
- en: Drain
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排水
- en: '[Figure 6-2](chapter6.xhtml#fig6-2) shows the schematic symbol for the 2N7000
    MOSFET.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 6-2](chapter6.xhtml#fig6-2) 显示了 2N7000 MOSFET 的原理符号。'
- en: '![THE SCHEMATIC SYMBOL FOR A 2N7000 MOSFET](../images/fig6-2.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![2N7000 MOSFET 的原理符号](../images/fig6-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-2: The schematic symbol
    for a 2N7000 MOSFET</samp>'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 6-2：2N7000 MOSFET 的原理符号</samp>
- en: Operating a MOSFET is easy. When you apply a small current to the gate pin,
    a large current can flow in through the drain pin and out through the source pin.
    You can also use PWM with a MOSFET, allowing various controls of lights, motors,
    and more. Your 2N7000 MOSFET can handle up to 60 V DC at 200 mA continuously,
    or 500 mA in bursts. When choosing a MOSFET for other projects, be sure to check
    the voltage and current maximums against the signal you want to switch.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 操作 MOSFET 非常简单。当你向栅极引脚施加一个小电流时，较大的电流就可以通过漏极引脚流入，并从源极引脚流出。你还可以使用 PWM 控制 MOSFET，从而实现对灯光、电机等设备的多种控制。你的
    2N7000 MOSFET 可以连续处理高达 60 V DC 和 200 mA，或在突发情况下处理 500 mA。在为其他项目选择 MOSFET 时，一定要检查最大电压和电流是否符合你想要切换的信号要求。
- en: You can use larger MOSFETs to control larger currents, such as the IRF520 shown
    in [Figure 6-3](chapter6.xhtml#fig6-3).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用更大的 MOSFET 来控制更大的电流，例如 [图 6-3](chapter6.xhtml#fig6-3) 中显示的 IRF520。
- en: '![A PHOTO OF A THROUGH-HOLE PACKAGE IRF520 N-MOSFET](../images/fig6-3.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![IRF520 N-MOSFET 的穿孔封装照片](../images/fig6-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-3: An IRF520 N-MOSFET</samp>'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 6-3：IRF520 N-MOSFET</samp>
- en: 'When using MOSFETS, be sure to check the datasheet for the pinouts, as they
    vary between units. You can find larger MOSFETs in breakout-board form for convenient
    prototyping. [Figure 6-4](chapter6.xhtml#fig6-4) shows two examples: on the left
    is the N-MOSFET module from Freetronics, and on the right is an IRF520 breakout
    from PMD Way (part 759300).'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 MOSFET 时，务必查看数据表以确认引脚定义，因为不同型号的引脚定义可能不同。你可以找到更大的 MOSFET 扩展板形式，方便原型制作。[图 6-4](chapter6.xhtml#fig6-4)
    显示了两个例子：左侧是 Freetronics 的 N-MOSFET 模块，右侧是 PMD Way（零件号 759300）的 IRF520 扩展板。
- en: '![A PHOTO OF TWO N-MOSFET BREAKOUT BOARDS, ONE WITH A SURFACE-MOUNT MOSFET
    AND ONE WITH A THROUGH-HOLE MOSFET AND TERMINAL BLOCKS](../images/fig6-4.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![两块 N-MOSFET 扩展板的照片，一块是表面贴装 MOSFET，另一块是穿孔 MOSFET 和接线端子块](../images/fig6-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-4: Two example MOSFET
    breakout boards</samp>'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 6-4：两块示例 MOSFET 扩展板</samp>
- en: In this chapter, you’ll use the 2N7000 to control the power supply of your Arduino.
    You’ll also connect a 10 kΩ resistor between the gate and the source pins to keep
    the gate switched off when a current is not applied to it, stopping the MOSFET
    from turning slightly on or off at random.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将使用 2N7000 来控制 Arduino 的电源供应。你还会在栅极和源极引脚之间连接一个 10 kΩ 的电阻，以确保当没有电流作用于栅极时，栅极保持关闭状态，防止
    MOSFET 在随机情况下微弱开关。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Using the 555 Timer
    IC in Bistable Mode</samp>
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">在双稳态模式下使用 555 定时器
    IC</samp>
- en: To create an on/off switch, you can harness the 555 timer IC (originally used
    in [Chapter 4](chapter4.xhtml)) in *bistable mode*, configuring the circuit to
    use two buttons to toggle the output pin HIGH or LOW. The output will then be
    used to control the MOSFET, which will be used to switch power going to the Arduino
    on and off.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建开/关开关，你可以使用 555 定时器 IC（最初用于 [第 4 章](chapter4.xhtml)）在 *双稳态模式* 下，配置电路使两个按钮切换输出引脚的电平为高或低。然后，输出将用来控制
    MOSFET，进而开关 Arduino 的电源。
- en: '[Figure 6-5](chapter6.xhtml#fig6-5) shows the bistable 555 circuit.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 6-5](chapter6.xhtml#fig6-5) 显示了双稳态 555 电路。'
- en: '![A 555 TIMER IC IN BISTABLE MODE SCHEMATIC](../images/fig6-5.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![555 定时器 IC 在双稳态模式下的原理图](../images/fig6-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-5: The schematic for
    a 555 timer IC in bistable mode</samp>'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 6-5：555 定时器 IC 在双稳态模式下的原理图</samp>
- en: Pulling pin 2 (the trigger pin) to GND with SW[1] will turn on the output, while
    pulling pin 4 (the reset pin) to GND with SW[2] turns off the output. That’s all
    you need for a soft on/off switch! The circuit can operate on anything between
    5 V and 12 V DC. Build it yourself and test it, perhaps using an LED and 1 kΩ
    resistor on the output as an indicator.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 将引脚 2（触发引脚）通过 SW[1] 拉至 GND 将开启输出，而将引脚 4（复位引脚）通过 SW[2] 拉至 GND 将关闭输出。这就是你所需要的软开关！该电路可以在
    5 V 到 12 V DC 的电压范围内工作。自己动手制作并测试，或许可以使用 LED 和 1 kΩ 电阻作为输出指示器。
- en: For the projects in this chapter, however, you need to switch the power to an
    entire Arduino. In the following project, instead of using the output pin as a
    power supply, you’ll switch the 2N7000 N-MOSFET on and off with the bistable circuit,
    allowing you to control more current.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在本章的项目中，你需要切换整个Arduino的电源。在接下来的项目中，你将不再使用输出引脚作为电源，而是通过双稳态电路开关2N7000 N-MOSFET的开关，允许你控制更大的电流。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #19: Creating a Soft On/Off
    Switch</samp>'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_21">项目#19：创建一个软开关</samp>
- en: In this project, you’ll create a soft on/off switch for your Arduino. You can
    use a power supply of between 9 and 12 V DC to operate the 555; the Arduino will
    regulate the voltage to its required 5 V.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将为你的Arduino创建一个软开关。你可以使用9到12 V直流电源来驱动555定时器；Arduino将调节电压至其所需的5 V。
- en: 'You can build this circuit using a solderless breadboard for a more temporary
    experiment or using a custom PCB created with the downloadable project files if
    you’d like a more permanent version. You’ll use the parts listed here for the
    remaining projects in this chapter as well:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用无焊面包板搭建此电路进行临时实验，或者使用可下载的项目文件创建一个定制的PCB，如果你希望制作一个更持久的版本。你将使用这里列出的零件来完成本章剩余项目：
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Arduino Uno或兼容板和USB电缆
- en: A 9 to 12 V DC, 1A power supply, wall wart, or plugback
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个9到12 V直流、1A电源，墙壁适配器或插头式电源
- en: 'One solderless breadboard or Project #19 PCB'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个无焊面包板或项目#19的PCB
- en: Three 10 kΩ, 0.25 W, 1 percent resistors
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三个10 kΩ、0.25 W、1%的电阻
- en: One 2N7000 N-MOSFET
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个2N7000 N-MOSFET
- en: A 555 timer IC (and 8-pin IC socket if using a PCB)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个555定时器IC（如果使用PCB的话，还需要一个8针IC插座）
- en: Two tactile buttons
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个触觉按钮
- en: 1 × 40 2.54 mm inline header pins (if using a PCB)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 × 40 2.54 mm内联连接器针脚（如果使用PCB）
- en: A PCB-mount DC socket (if using a PCB)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个PCB安装的直流插座（如果使用PCB的话）
- en: Male-to-male jumper wires
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公对公跳线
- en: If you’re using a power supply with a DC plug, such as a wall wart, you may
    want to use a DC socket breakout such as PMD Way part 51201299 to avoid having
    to cut the plug off the end of the power lead, as shown in [Figure 6-6](chapter6.xhtml#fig6-6).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是带有直流插头的电源，例如墙壁适配器，你可能希望使用像PMD Way的51201299直流插座模块，以避免需要切断电源线插头，如[图6-6](chapter6.xhtml#fig6-6)所示。
- en: '![A PHOTO OF A DC SOCKET BREAKOUT BOARD](../images/fig6-6.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![直流插座模块的照片](../images/fig6-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-6: A DC socket breakout</samp>'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图6-6：直流插座模块</samp>
- en: Assemble the circuit as shown in [Figure 6-7](chapter6.xhtml#fig6-7).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图6-7](chapter6.xhtml#fig6-7)所示组装电路。
- en: '![THE SCHEMATIC FOR PROJECT #19](../images/fig6-7.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![项目#19的原理图](../images/fig6-7.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-7: The schematic for
    Project #19</samp>'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图6-7：项目#19的原理图</samp>
- en: If you are using a solderless breadboard, the DC socket is just a way of getting
    the required 9 to 12 V DC to the circuit. The Vin and GND labels at the top right
    of the schematic are connections to the Arduino’s Vin and GND pins, respectively.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是无焊面包板，直流插座只是将所需的9到12 V直流电源送到电路。原理图右上方的Vin和GND标签分别是Arduino的Vin和GND引脚的连接。
- en: 'If you are using the PCB, shown in [Figure 6-8](chapter6.xhtml#fig6-8), assembly
    is straightforward. Start with the resistors first, then the buttons, and then
    the IC socket, DC socket, and inline header pins. (There are a few extra connections
    not listed for this project, which you’ll use in Project #20.)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是[图6-8](chapter6.xhtml#fig6-8)中所示的PCB，组装过程非常简单。首先安装电阻器，然后是按钮，接着是IC插座、直流插座和内联连接器针脚。（这个项目中有一些额外的连接没有列出，稍后在项目#20中你会使用到它们。）
- en: '![AN UNPOPULATED PCB FOR PROJECT #19](../images/fig6-8.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![项目#19的未安装PCB](../images/fig6-8.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-8: The PCB for Project
    #19</samp>'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图6-8：项目#19的PCB</samp>
- en: Once assembled, your PCB should resemble that shown in [Figure 6-9](chapter6.xhtml#fig6-9).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦组装完成，你的PCB应该与[图6-9](chapter6.xhtml#fig6-9)所示相似。
- en: '![AN ASSEMBLED PCB FOR PROJECT #19 WITH ALL COMPONENTS FITTED](../images/fig6-9.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![项目#19的完整PCB，所有元件已安装](../images/fig6-9.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-9: The completed PCB
    for Project #19</samp>'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图6-9：项目#19完成的PCB</samp>
- en: Connect the Arduino to the PCB and then connect the external power of between
    6 and 12 V DC. You can then simply turn the Arduino and off with switches SW[1]
    and SW[2], respectively. The Arduino’s power-on LED will tell you at a glance
    whether the Arduino is on or off.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 将Arduino连接到PCB上，然后连接外部电源，电压范围为6到12 V直流电。你可以通过SW[1]和SW[2]分别打开和关闭Arduino。Arduino的电源指示LED将立即告诉你Arduino是否开机。
- en: As mentioned earlier, when you press SW[2], the 555’s output should go HIGH.
    In this circuit, current flows to the gate (G) pin of the N-MOSFET, which then
    turns on the MOSFET, which then allows current to flow through the drain (D) pin
    to the source (S) pin. (Even if the Arduino is switched off, the circuit itself
    will draw around 5 mA of current at 9 V DC.) When the MOSFET is on, current can
    flow from the external power supply into the Arduino via the Vin pin, out via
    its GND pin, through the MOSFET, and finally to GND, completing the power circuit.
    When you press SW[1], the 555’s output goes LOW and the MOSFET is switched off.
    This means no current can flow through the Arduino, turning it off as well.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，当你按下SW[2]时，555的输出应该变为HIGH。在这个电路中，电流流向N-MOSFET的栅极（G）引脚，进而开启MOSFET，使得电流通过漏极（D）引脚流向源极（S）引脚。（即使Arduino关闭，电路本身仍会在9
    V直流电下消耗约5 mA的电流。）当MOSFET开启时，电流可以通过Vin引脚从外部电源流入Arduino，再通过GND引脚流出，通过MOSFET，最后回到GND，完成电力回路。当你按下SW[1]时，555的输出变为LOW，MOSFET被关闭。这意味着没有电流可以通过Arduino，从而将其关闭。
- en: If you’re using a solderless breadboard, keep the circuit together for the rest
    of the chapter. You can also use this circuit with other devices if they meet
    the same power requirements. For now, let’s use this circuit to give the Arduino
    the ability to turn itself off.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是无焊面包板，请将电路保持在整个章节中不变。如果它们满足相同的电力需求，你也可以将此电路与其他设备一起使用。现在，让我们使用这个电路来赋予Arduino关闭自身的能力。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #20: Powering Off the Arduino
    Automatically</samp>'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_21">项目#20：自动关闭Arduino</samp>
- en: 'As an extension to the soft on/off circuit used in Project #19, you can have
    your Arduino turn itself off by pulling pin 4 of the 555 to LOW (as you did with
    SW[1] in the previous project). This is useful for creating applications you don’t
    want to run continuously, from simple games to more complex data-logging projects
    that need to write data only when an event occurs.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 作为项目#19中软开关电路的扩展，你可以通过将555的引脚4拉至LOW来让Arduino自动关闭（如同在前一个项目中通过SW[1]实现的）。这对于创建不需要持续运行的应用非常有用，适用于从简单的游戏到需要仅在事件发生时才记录数据的更复杂数据记录项目。
- en: 'To modify the Project #19 circuit for this purpose, first connect digital output
    pin D12 to the junction of 555 pin 4 and resistor R[1] to become the Off Signal
    connection if using the solderless breadboard, as shown in [Figure 6-10](chapter6.xhtml#fig6-10),
    or to the pin on the PCB labeled A OFF.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了修改项目#19的电路以实现这个目的，首先将数字输出引脚D12连接到555引脚4和电阻R[1]的交点，成为关闭信号连接，如果使用无焊面包板，如[图6-10](chapter6.xhtml#fig6-10)所示，或者连接到PCB上标记为A
    OFF的引脚。
- en: '![THE SCHEMATIC FOR PROJECT #20](../images/fig6-10.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![项目#20的原理图](../images/fig6-10.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-10: The Project #20
    circuit with Arduino self-off contact</samp>'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图6-10：带有Arduino自关接点的项目#20电路</samp>
- en: Connect the Vin and GND as well. Turn on the Arduino (which should light up
    the onboard power LED), and the D13 LED should also turn on. After five seconds
    the D13 LED should turn off; then, a second later, the Arduino should turn itself
    off.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 还需连接Vin和GND。打开Arduino（这应该会点亮板载电源LED），D13 LED也应点亮。五秒钟后，D13 LED应该熄灭；然后，一秒钟后，Arduino应自动关闭。
- en: 'Let’s see how this works:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个是如何工作的：
- en: '[PRE0]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The sketch first ensures D12 is HIGH in <samp class="SANS_TheSansMonoCd_W5Regular_11">void
    setup()</samp>. Next, a simple custom function <samp class="SANS_TheSansMonoCd_W5Regular_11">turnOff()</samp>
    ❶ drops D12 to LOW, triggering the 555 to turn off the MOSFET and thus turn off
    the power to the Arduino. The sketch turns the D13 LED on ❷ and off ❸ as an example
    of activity; then the Arduino turns itself off ❹.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 程序首先确保在<samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp>中D12为HIGH。接下来，一个简单的自定义函数<samp
    class="SANS_TheSansMonoCd_W5Regular_11">turnOff()</samp> ❶ 将D12置为LOW，触发555关闭MOSFET，从而关闭Arduino的电源。程序将点亮D13
    LED ❷ 并熄灭 ❸ 作为活动示例；然后，Arduino将自动关闭 ❹。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Activating an Arduino from an External
    Device</samp>
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">从外部设备激活Arduino</samp>
- en: So far, you’ve learned how an Arduino can shut itself off. I’ll now explain
    how to program an external device or sensor to activate power to an Arduino, which
    completes a task and then powers itself off, ready for the next event.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经了解了Arduino如何自我关闭。我现在将解释如何编程一个外部设备或传感器来激活Arduino的电源，它完成任务后再关闭电源，为下一个事件做好准备。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Normally Open Contact
    Devices</samp>
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">常开触点设备</samp>
- en: 'The switch used in Projects #18 and #19 closes the circuit between 555 pin
    2 and GND. This means you can replace the switch with (or use in parallel with)
    something that has normally open (NO) contacts—in other words, a device that closes
    a circuit in the same way a press-button or switch does. This could be anything
    such as a simple doorbell button, a pressure mat that acts as a switch when walked
    on, a passive infrared (PIR) motion sensor that detects movement with relay output
    contacts, a normally open reed switch, a door magnet that can detect the opening
    of a door, and more.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在第18和第19个项目中使用的开关关闭了555引脚2和GND之间的电路。这意味着你可以用（或与）具有常开（NO）触点的设备替代该开关——换句话说，就是用一种与按键或开关关闭电路的方式相同的设备。这可以是任何东西，例如简单的门铃按钮、当踩在上面时起作用的压力垫、带继电器输出触点的被动红外（PIR）运动传感器、常开簧片开关、可以检测门是否打开的门磁等。
- en: Any device that can close the two points in the circuit will activate your Arduino.
    Simply connect the two wires from the device to 555 pin 2 and GND, respectively,
    as shown in [Figure 6-11](chapter6.xhtml#fig6-11).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 任何可以闭合电路中两个触点的设备都会激活你的Arduino。只需将设备的两根线分别连接到555引脚2和GND，如[图6-11](chapter6.xhtml#fig6-11)所示。
- en: '![THE SCHEMATIC FOR A SOFT ON/OFF POWER CIRCUIT WITH EXTERNAL TRIGGER CONNECTIONS](../images/fig6-11.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![软开/关电源电路原理图，带外部触发连接](../images/fig6-11.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-11: The schematic
    for a soft on/off circuit with external trigger connections</samp>'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图6-11：带外部触发连接的软开/关电路原理图</samp>
- en: The two contacts in question are shown as ON_SIGNAL points in the schematic.
    If you’re using the project PCB for this chapter, these are the ON+ and ON− pins.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个触点在原理图中显示为ON_SIGNAL点。如果你使用的是本章的项目PCB，那么这些点就是ON+和ON−引脚。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Output Logic Devices</samp>
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">输出逻辑设备</samp>
- en: You may want to have your Arduino turned on by devices that give out an electrical
    signal when they’re activated, such as a logic-level 5 V output. These devices
    include some passive infrared (PIR) motion detectors, thermostats, some industrial
    programmable logic controller (PLC) device outputs, and more. However, such devices
    require a little more circuitry to bridge the gap for activation, as their output
    signal isn’t the same as the normally open method described in the previous section.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望通过一些在激活时发出电信号的设备来开启Arduino，例如逻辑电平5V输出。这些设备包括一些被动红外（PIR）运动探测器、温控器、一些工业可编程逻辑控制器（PLC）设备输出等。然而，这些设备需要稍微复杂一点的电路来连接激活点，因为它们的输出信号与前一部分描述的常开方法不同。
- en: To take advantage of these sorts of devices, you’ll use their logic output to
    switch another 2N7000 MOSFET to bridge the gap and act as the On switch for you.
    The devices’ output voltage must be high enough to turn on the MOSFET, so be sure
    to check this with the device supplier or datasheet before getting started. The
    MOSFET you’ll use in the next project requires 3 to 5 V DC to activate.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了利用这些设备，你将使用它们的逻辑输出来驱动另一个2N7000 MOSFET，从而桥接电路并作为开关为你开启电源。这些设备的输出电压必须足够高，才能开启MOSFET，所以在开始之前一定要向设备供应商或查阅数据手册确认这一点。你将在下一个项目中使用的MOSFET需要3到5V
    DC来激活。
- en: '[Figure 6-12](chapter6.xhtml#fig6-12) shows an example circuit, with the requisite
    additional MOSFET and inputs on the left side. The TRIGGER point is connected
    to the device’s output, and TR_GND is connected to the device’s negative or GND
    connection.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[图6-12](chapter6.xhtml#fig6-12)显示了一个示例电路，左侧包含了必要的额外MOSFET和输入。TRIGGER点连接到设备的输出，而TR_GND连接到设备的负极或地线。'
- en: '![THE SCHEMATIC FOR SOFT ON/OFF POWER CIRCUIT WITH LOGIC LEVEL TRIGGER CONNECTIONS](../images/fig6-12.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![带逻辑电平触发连接的软开/关电源电路原理图](../images/fig6-12.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-12: The soft on/off
    schematic with logic level trigger</samp>'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图6-12：带逻辑电平触发的软开/关电路原理图</samp>
- en: Now before moving onto the next project, I’ll show you an easier way to use
    DS1307 and DS3231 real-time clock ICs by installing a useful Arduino library.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入下一个项目之前，我将向你展示一个更简单的方法，通过安装一个有用的Arduino库来使用DS1307和DS3231实时时钟IC。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The DS3231 Real-Time Clock Library</samp>
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">DS3231实时时钟库</samp>
- en: The next project uses a DS1307 or DS3231 real-time clock IC to keep time for
    a data-logging project. To simplify this, you’ll now learn how to use the matching
    DS3231 RTC library to save coding effort and space. This library works similarly
    to that for the DS1307.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个项目使用DS1307或DS3231实时时钟IC来为数据记录项目保持时间。为了简化这个过程，你现在将学习如何使用匹配的DS3231 RTC库来节省编码工作和空间。该库的工作方式与DS1307的库相似。
- en: First, download the library code ZIP file from [*https://<wbr>github<wbr>.com<wbr>/NorthernWidget<wbr>/DS3231*](https://github.com/NorthernWidget/DS3231).
    Open the Arduino IDE and select **Sketch** ![](../images/arr.png) **Include Library**
    ![](../images/arr.png) **Add .ZIP library**. Navigate to the downloaded file and
    then click **OK** to install the library. You can check whether the library has
    installed by selecting **File** ![](../images/arr.png) **Examples** in the IDE;
    a new DS3231 option should be visible.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从[*https://<wbr>github<wbr>.com<wbr>/NorthernWidget<wbr>/DS3231*](https://github.com/NorthernWidget/DS3231)下载库代码的ZIP文件。打开Arduino
    IDE，选择**草图** ![](../images/arr.png) **包含库** ![](../images/arr.png) **添加.ZIP库**。导航到下载的文件，然后点击**确定**来安装库。你可以通过在IDE中选择**文件**
    ![](../images/arr.png) **示例**来检查库是否已安装；一个新的DS3231选项应该会出现。
- en: 'Enter the sketch from [Listing 6-1](#LiT-6-1) to test the library and the basic
    functions to set and retrieve time and date information, but don’t upload it yet:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 输入[列表 6-1](#LiT-6-1)中的草图来测试库以及设置和获取时间和日期信息的基本功能，但现在不要上传它：
- en: '[PRE1]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 6-1: Testing the DS3231
    RTC library</samp>'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 6-1：测试DS3231 RTC库</samp>
- en: The sketch first includes the I²C and RTC libraries and then creates an instance
    of the real-time clock to reference ❶. It then declares the required variables
    to hold the time and data information ❷. These include three Boolean variables,
    which are left as false by default, as you’re using 24-hour time.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图首先包含I²C和RTC库，然后创建一个实时时钟实例以进行引用 ❶。然后，它声明了所需的变量来保存时间和日期信息 ❷。其中包括三个布尔变量，默认情况下设置为false，因为你使用的是24小时制。
- en: To set the time, the custom function <samp class="SANS_TheSansMonoCd_W5Regular_11">setTimeData()</samp>
    contains the functions to set all the time and date parameters. The variables
    declared earlier are placed in each matching function. This function needs to
    be called only once ❸, as you’ll initially set the time and date and then comment
    out the function before reuploading the sketch. Otherwise, the clock will reset
    to the value of the variables ❷.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置时间，自定义函数<samp class="SANS_TheSansMonoCd_W5Regular_11">setTimeData()</samp>包含设置所有时间和日期参数的功能。之前声明的变量被放入每个匹配的函数中。此函数只需调用一次
    ❸，因为你将首先设置时间和日期，然后在重新上传草图之前注释掉该函数。否则，时钟将重置为变量的值 ❷。
- en: To retrieve the time, the sketch uses a series of functions that begin with
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RTC</samp>, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">RTC.getdate()</samp>,
    which return their matching data. For a natural-looking display of the minutes
    and seconds, the sketch shows a 0 before the values for minutes under 10 ❹ and
    seconds under 10 ❺.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索时间，草图使用一系列以<samp class="SANS_TheSansMonoCd_W5Regular_11">RTC</samp>开头的函数，如<samp
    class="SANS_TheSansMonoCd_W5Regular_11">RTC.getdate()</samp>，它们返回相应的数据。为了让分钟和秒数的显示更自然，草图在小于10的分钟值
    ❹ 和秒数值 ❺ 前显示0。
- en: To change the time and date values to match your own time zone, enter your own
    values for time and date ❷, then uncomment the function <samp class="SANS_TheSansMonoCd_W5Regular_11">setTimeData()</samp>❸,
    and finally upload the sketch. Now re-comment the <samp class="SANS_TheSansMonoCd_W5Regular_11">setTimeData()</samp>
    function and save and re-upload the sketch. Once completed, open the Serial Monitor
    at 9,600 bps, and you should see the date and time being updated every second.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要将时间和日期值更改为匹配你自己的时区，输入你自己的时间和日期值 ❷，然后取消注释函数<samp class="SANS_TheSansMonoCd_W5Regular_11">setTimeData()</samp>❸，最后上传草图。现在重新注释掉<samp
    class="SANS_TheSansMonoCd_W5Regular_11">setTimeData()</samp>函数，保存并重新上传草图。完成后，以9,600
    bps打开串口监视器，你应该看到日期和时间每秒更新一次。
- en: Let’s combine these methods of triggering power to the Arduino and logging the
    events in a final project.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这些触发Arduino电源并记录事件的方法结合在一个最终项目中。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #21: Building an Event Logger</samp>'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_21">项目#21：构建事件记录器</samp>
- en: For this project, imagine that someone needs to prove their arrival at a certain
    place on a regular basis. This might be a child arriving at school or activities,
    a security guard checking into work for the night, or an employee who must open
    a store at a particular time in the morning. To create a device to record the
    time and date of these events, this project uses a soft on/off circuit with an
    Arduino and a DS1307 or DS3231 real-time clock IC and SD card socket for logging
    the data to memory card. The trigger will be a simple button wired a distance
    away from the Arduino, like that included with a wired doorbell.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，假设有人需要定期证明自己到达了某个地点。这可能是一个孩子到达学校或参加活动，或者是一个保安检查上班时间，或是一个必须在早上某个特定时间开店的员工。为了创建一个记录这些事件时间和日期的设备，本项目使用了带有Arduino和DS1307或DS3231实时时钟IC以及SD卡插槽的开关电路来将数据记录到存储卡中。触发器将是一个简单的按钮，布置在离Arduino一定距离的地方，就像有线门铃中的按钮一样。
- en: As an experienced Arduino user, you might build a circuit like the one in this
    project with slightly different products than those used here. For example, you
    could build a similar circuit with either an SD card module or an SD card shield
    (such as PMD Way part 668046, shown in [Figure 6-13](chapter6.xhtml#fig6-13)).
    You can use the framework you learn in this project for any situation where you
    want to trigger your Arduino to do something just once and then switch off until
    the next event.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名经验丰富的Arduino用户，你可能会用与本项目中略有不同的产品来构建类似的电路。例如，你可以使用SD卡模块或SD卡扩展板（例如PMD Way的668046部件，如[图6-13](chapter6.xhtml#fig6-13)所示）来构建一个类似的电路。你可以将本项目中学到的框架应用于任何希望触发Arduino做某件事一次并且在下一个事件发生之前保持关闭的情况。
- en: '![A PHOTO OF AN SD MEMORY CARD AND REAL-TIME CLOCK SHIELD FOR ARDUINO](../images/fig6-13.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![一张SD存储卡和Arduino实时时钟扩展板的照片](../images/fig6-13.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-13: An SD and RTC
    shield for Arduino</samp>'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图6-13：Arduino的SD和RTC扩展板</samp>
- en: 'You’ll use the following hardware:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用以下硬件：
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块Arduino Uno或兼容板和USB电缆
- en: A 9 to 12 V DC, 1 A power supply, wall wart, or plugpack
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一款9至12伏直流电源，1安培的电源适配器或插头电源
- en: 'The completed PCB or hardware from Project #20'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目#20的完整PCB或硬件
- en: A DS1307 or DS3231 real-time clock module and SD or microSD card module, or
    SD card and RTC shield for Arduino
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块DS1307或DS3231实时时钟模块和SD或microSD卡模块，或者Arduino的SD卡和RTC扩展板
- en: A microSD or SD memory card
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一张microSD或SD存储卡
- en: A remote button and suitable twin-core wire
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个远程按钮和合适的双核线
- en: Assemble the circuit as shown in [Figure 6-14](chapter6.xhtml#fig6-14). If you’re
    using the solderless breadboard, you can omit the tactile switches if you don’t
    want local control.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图6-14](chapter6.xhtml#fig6-14)中的示意图组装电路。如果你使用的是无焊接面包板，并且不需要本地控制，可以省略触摸开关。
- en: '![THE SCHEMATIC FOR PROJECT #21](../images/fig6-14.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![项目#21的原理图](../images/fig6-14.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 6-14: The schematic
    for Project #21</samp>'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图6-14：项目#21的原理图</samp>
- en: Don’t forget to format your memory card correctly.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了正确格式化你的存储卡。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-120
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*If you’re unfamiliar with the use of the SD card or real-time clock module,
    review Chapters 7 and 20 of* Arduino Workshop*, 2nd edition.*'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你不熟悉使用SD卡或实时时钟模块，请参考《Arduino工作坊》第7章和第20章（第二版）。*'
- en: 'Once you’ve assembled the hardware, set the current time and date in the Project
    #21 sketch using the function <samp class="SANS_TheSansMonoCd_W5Regular_11">setDS3231time()</samp>
    in <samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp>. To preserve
    the time and date in the real-time clock, upload the sketch and then comment out
    the line and re-upload the sketch, as you did in the previous section.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你组装好硬件，就在项目#21的草图中使用函数<samp class="SANS_TheSansMonoCd_W5Regular_11">setDS3231time()</samp>在<samp
    class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp>中设置当前时间和日期。为了保持实时时钟中的时间和日期，上传草图后注释掉该行并重新上传草图，就像在上一节中做的那样。
- en: 'Let’s see how this works:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它是如何工作的：
- en: '[PRE2]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The sketch is a combination of basic real-time clock and SD-card-writing functions,
    along with self-turn-off once the event has been recorded to the memory card.
    It first includes the required libraries and then sets the RTC I²C bus address
    and the pin number that triggers the 555 timer to turn the circuit off ❶. Next,
    it sets the required variables for the date and time, along with the function
    to write the data ❷.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图结合了基本的实时时钟和 SD 卡写入功能，以及一旦事件记录到存储卡后自我关闭的功能。它首先包含所需的库，然后设置 RTC I²C 总线地址和触发
    555 定时器关闭电路的引脚编号 ❶。接着，它设置所需的日期和时间变量，以及写入数据的函数 ❷。
- en: When called, the <samp class="SANS_TheSansMonoCd_W5Regular_11">turnOff()</samp>
    function sets the digital pin connected to the 555 to LOW, turning off the circuit.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">logEvent()</samp> function opens
    the text file on the SD card, retrieves the time and date from the real-time clock,
    and writes it in a neat line. The <samp class="SANS_TheSansMonoCd_W5Regular_11">void
    setup()</samp> function initializes the real-time clock and allows for setting
    the time and date. It also initializes the digital pins required for triggering
    the external circuit and using the SD card and checks that the SD card is ready.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用时，<samp class="SANS_TheSansMonoCd_W5Regular_11">turnOff()</samp> 函数将连接到 555
    定时器的数字引脚设置为 LOW，关闭电路。<samp class="SANS_TheSansMonoCd_W5Regular_11">logEvent()</samp>
    函数打开 SD 卡上的文本文件，从实时时钟获取时间和日期，并将其整齐地写入一行。<samp class="SANS_TheSansMonoCd_W5Regular_11">void
    setup()</samp> 函数初始化实时时钟并允许设置时间和日期。它还初始化触发外部电路和使用 SD 卡所需的数字引脚，并检查 SD 卡是否准备好。
- en: The final loop ❸ operates when the external device circuit triggers the Arduino
    and turns it on. The <samp class="SANS_TheSansMonoCd_W5Regular_11">logEvent()</samp>
    function logs the event, writing the time and date to the SD card. There’s a short
    delay to ensure the data file has closed, after which <samp class="SANS_TheSansMonoCd_W5Regular_11">turnOff()</samp>
    turns the Arduino off.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的循环 ❸ 在外部设备电路触发 Arduino 并将其打开时开始运行。<samp class="SANS_TheSansMonoCd_W5Regular_11">logEvent()</samp>
    函数记录事件，将时间和日期写入 SD 卡。之后有一个短暂的延迟，确保数据文件已关闭，接着 <samp class="SANS_TheSansMonoCd_W5Regular_11">turnOff()</samp>
    关闭 Arduino。
- en: To review the data logged by the project, disconnect the power from the Arduino
    and insert the SD card into your computer. Open the *DATA.TXT* file to see the
    events listed in order.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看项目记录的数据，请断开 Arduino 的电源并将 SD 卡插入计算机。打开 *DATA.TXT* 文件查看按顺序列出的事件。
- en: The project has recorded a new line of text containing the date and time for
    each event.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 项目为每个事件记录了包含日期和时间的新文本行。
- en: When operating at 9 V DC, this project draws around 5 mA of current when off
    and peaks at 70 mA during operation. If you powered it with six AA cells for portable
    use and had one or two events an hour, the project could easily run for more than
    seven days.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在 9 V 直流电压下运行时，项目关闭时电流约为 5 mA，工作时最大电流为 70 mA。如果使用六个 AA 电池进行便携式使用，并且每小时发生一到两个事件，则该项目可以轻松运行超过七天。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">继续前进</samp>
- en: This chapter showed you how to add professional power control to your projects,
    reducing power consumption by allowing external actions to turn the power on and
    having your Arduino turn itself off.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向您展示了如何为您的项目添加专业的电源控制，通过让外部动作打开电源并让 Arduino 自动关闭电源，从而降低功耗。
- en: 'The next chapter demonstrates another advanced way to turn projects on and
    off: safely controlling mains AC current with a wireless remote-controlled outlet.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章演示了另一种先进的开关控制方式：使用无线遥控插座安全控制交流电流。
