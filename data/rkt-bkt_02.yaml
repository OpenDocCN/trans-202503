- en: '**1'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1'
- en: 'WHAT’S IN A ROOTKIT: THE TDL3 CASE STUDY**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是ROOTKIT：TDL3案例研究**
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: In this chapter, we’ll introduce rootkits with *TDL3*. This Windows rootkit
    provides a good example of advanced control and data flow–hijacking techniques
    that leverage lower layers of the OS architecture. We’ll look at how TDL3 infects
    a system and how it subverts specific OS interfaces and mechanisms in order to
    survive and remain undetected.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍带有*TDL3*的rootkit。这个Windows rootkit提供了一个很好的例子，展示了如何利用操作系统架构的底层控制和数据流劫持技术。我们将探讨TDL3如何感染系统，并且它如何颠覆特定的操作系统接口和机制以保持生存并避免被发现。
- en: TDL3 uses an infection mechanism that directly loads its code into the Windows
    kernel, so it has been rendered ineffective by the kernel integrity measures Microsoft
    introduced on the 64-bit Windows systems. However, the techniques TDL3 uses for
    interposing code within the kernel are still valuable as an example of how the
    kernel’s execution can be hooked reliably and effectively once such integrity
    mechanisms have been bypassed. As is the case with many rootkits, TDL3’s hooking
    of the kernel code paths relies on key patterns of the kernel’s own architecture.
    In a sense, a rootkit’s hooks may be a better guide to the kernel’s actual structure
    than the official documentation, and certainly they’re the best guide to understanding
    the undocumented system structures and algorithms.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: TDL3使用一种感染机制，直接将其代码加载到Windows内核中，因此它在64位Windows系统中被微软引入的内核完整性措施所无效化。然而，TDL3用于在内核中插入代码的技术仍然是一个很好的示例，展示了在绕过这些完整性机制后，如何可靠且有效地挂钩内核的执行。像许多rootkit一样，TDL3挂钩内核代码路径依赖于内核架构的关键模式。从某种意义上说，rootkit的钩子可能比官方文档更能揭示内核的实际结构，当然，它们也是理解未记录的系统结构和算法的最佳指南。
- en: Indeed, TDL3 has been succeeded by TDL4, which shares much of the evasion and
    antiforensic functionality of TDL3 but has turned to *bootkit* techniques to circumvent
    the Windows Kernel-Mode Code Signing mechanism in 64-bit systems (we will describe
    these techniques in [Chapter 7](ch07.xhtml#ch07)).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，TDL3已经被TDL4取代，后者继承了TDL3的许多规避和反取证功能，但转而采用*bootkit*技术，绕过了64位系统中的Windows内核模式代码签名机制（我们将在[第7章](ch07.xhtml#ch07)中描述这些技术）。
- en: Throughout this chapter, we’ll point out specific OS interfaces and mechanisms
    that TDL3 subverts. We’ll explain how TDL3 and similar rootkits are designed and
    how they work, and then in [Part 2](part02.xhtml#part02), we’ll discuss the methods
    and tools with which they can be discovered, observed, and analyzed.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将指出TDL3颠覆的特定操作系统接口和机制。我们将解释TDL3及类似rootkit的设计和工作原理，然后在[第二部分](part02.xhtml#part02)中，我们将讨论用于发现、观察和分析这些rootkit的方法和工具。
- en: '**History of TDL3 Distribution in the Wild**'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**TDL3在野外传播的历史**'
- en: First discovered in 2010,^([1](footnotes.xhtml#ch01fn1)) the TDL3 rootkit was
    one of the most sophisticated examples of malware developed up to that time. Its
    stealth mechanisms posed a challenge to the entire antivirus industry (as did
    its bootkit successor, TDL4, which became the first widespread bootkit for the
    x64 platform).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: TDL3 rootkit首次被发现于2010年，^([1](footnotes.xhtml#ch01fn1)) 是当时最复杂的恶意软件之一。它的隐蔽机制对整个杀毒软件行业构成了挑战（它的后继者，TDL4
    bootkit，也是第一个广泛传播的x64平台bootkit）。
- en: '**NOTE**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*This family of malware is also known as TDSS, Olmarik, or Alureon. This profusion
    of names for the same family is not uncommon, since antivirus vendors tend to
    come up with different names in their reports. It’s also common for research teams
    to assign different names to different components of a common attack, especially
    during the early stages of analysis.*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*这一家族的恶意软件也被称为TDSS、Olmarik或Alureon。为同一家族的恶意软件起多个名字并不罕见，因为杀毒软件厂商往往在报告中给出不同的名字。在分析的早期阶段，研究团队通常会给相同攻击的不同组件指定不同的名称，这也是很常见的做法。*'
- en: TDL3 was distributed through a *Pay-Per-Install (PPI)* business model via the
    affiliates DogmaMillions and GangstaBucks (both of which have since been taken
    down). The PPI scheme, popular among cybercrime groups, is similar to schemes
    commonly used for distributing browser toolbars. Toolbar distributors track their
    use by creating special builds with an embedded unique identifier (UID) for each
    package or bundle made available for download via different distribution channels.
    This allows the developer to calculate the number of installations (number of
    users) associated with a UID and therefore to determine the revenue generated
    by each distribution channel. Likewise, distributor information was embedded into
    the TDL3 rootkit executable, and special servers calculated the number of installations
    associated with—and charged to—a distributor.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: TDL3通过*按安装付费（PPI）*商业模式，通过加盟商DogmaMillions和GangstaBucks（这两个加盟商现在已经被关闭）进行分发。PPI模式在网络犯罪团伙中广受欢迎，类似于常见的浏览器工具栏分发模式。工具栏分发商通过创建带有嵌入唯一标识符（UID）的特殊版本来跟踪其使用情况，每个通过不同分发渠道提供下载的软件包或捆绑包都会有一个UID。这使得开发者能够计算与每个UID相关的安装数量（即用户数量），从而确定每个分发渠道所带来的收入。同样，分发商信息被嵌入到TDL3
    rootkit可执行文件中，特定服务器计算与分发商相关的安装数量，并对其进行收费。
- en: The cybercrime groups’ associates received a unique login and password, which
    identified the number of installations per resource. Each affiliate also had a
    personal manager who could be consulted in the event of any technical problems.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 网络犯罪团伙的成员们收到了一个独特的登录名和密码，这些标识符用来识别每个资源的安装数量。每个加盟商还配有一个个人经理，遇到技术问题时可以咨询该经理。
- en: To reduce the risk of detection by antivirus software, the affiliates repacked
    the distributed malware frequently and used sophisticated defensive techniques
    to detect the use of debuggers and virtual machines, confounding analysis by malware
    researchers.^([2](footnotes.xhtml#ch01fn2)) Partners were also forbidden to use
    resources like VirusTotal to check if their current versions could be detected
    by security software, and they were even threatened with fines for doing so. This
    was because samples submitted to VirusTotal were likely to attract the attention
    of, and thus analysis from, security research labs, effectively shortening the
    malware’s useful life. If the malware’s distributors were concerned about the
    product’s stealthiness, they were referred to malware developer–run services that
    were similar to VirusTotal but could guarantee that submitted samples would be
    kept out of the hands of security software vendors.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少被杀毒软件检测到的风险，加盟商经常重新打包分发的恶意软件，并使用复杂的防御技术来检测调试器和虚拟机的使用，从而困扰恶意软件研究人员的分析。^([2](footnotes.xhtml#ch01fn2))
    伙伴们还被禁止使用像VirusTotal这样的资源来检查他们当前的版本是否会被安全软件检测到，甚至因这样做而受到罚款威胁。这是因为提交到VirusTotal的样本可能会引起安全研究实验室的注意，从而进行分析，实际上缩短了恶意软件的有效生命周期。如果恶意软件的分发商担心其产品的隐蔽性，他们会被推荐使用类似VirusTotal的恶意软件开发者运营的服务，这些服务能保证提交的样本不会被安全软件供应商获取。
- en: '**Infection Routine**'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**感染流程**'
- en: Once a TDL3 infector has been downloaded onto a user’s system through one of
    its distribution channels, it begins the infection process. In order to survive
    a system reboot, TDL3 infects one of the boot-start drivers essential to loading
    the OS by injecting malicious code into that driver’s binary. These boot-start
    drivers are loaded with the kernel image at an early stage of the OS initialization
    process. As a result, when an infected machine is booted, the modified driver
    is loaded and the malicious code takes control of the startup process.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦TDL3感染程序通过其中一个分发渠道下载到用户系统上，它就会开始感染过程。为了在系统重启后继续存活，TDL3会通过向其中一个启动驱动程序注入恶意代码来感染该驱动程序，启动驱动程序对加载操作系统至关重要。这些启动驱动程序会在操作系统初始化过程的早期阶段与内核镜像一起加载。因此，当感染的计算机启动时，修改后的驱动程序会被加载，恶意代码控制了启动过程。
- en: So, when run in the kernel-mode address space, the infection routine searches
    through the list of boot-start drivers that support core operating system components
    and randomly picks one as an infection target. Each entry in the list is described
    by the undocumented `KLDR_DATA_TABLE_ENTRY` structure, shown in [Listing 1-1](ch01.xhtml#ch01list01),
    referenced by the `DriverSection` field in the `DRIVER_OBJECT` structure. Every
    loaded kernel-mode driver has a corresponding `DRIVER_OBJECT` structure.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当在内核模式地址空间中运行时，感染程序会在支持核心操作系统组件的启动驱动程序列表中进行搜索，并随机选择一个作为感染目标。列表中的每个条目都由未记录的
    `KLDR_DATA_TABLE_ENTRY` 结构描述，如[清单 1-1](ch01.xhtml#ch01list01)所示，并由 `DRIVER_OBJECT`
    结构中的 `DriverSection` 字段引用。每个已加载的内核模式驱动程序都有一个对应的 `DRIVER_OBJECT` 结构。
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 1-1: Layout of the `KLDR_DATA_TABLE_ENTRY` structure referenced by
    the `DriverSection` field*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 1-1：由 `DriverSection` 字段引用的 `KLDR_DATA_TABLE_ENTRY` 结构的布局*'
- en: 'Once it chooses a target driver, the TDL3 infector modifies the driver’s image
    in the memory by overwriting the first few hundred bytes of its resource section,
    *.rsrc*, with a malicious loader. That loader is quite simple: it merely loads
    the rest of the malware code it needs from the hard drive at boot time.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择了目标驱动程序，TDL3 病毒就会通过覆盖驱动程序资源区 *.rsrc* 的前几百个字节，来修改内存中的驱动程序映像，载入恶意加载器。这个加载器非常简单：它仅仅是在启动时从硬盘加载其需要的其余恶意代码。
- en: The overwritten original bytes of the *.rsrc* section—which are still needed
    for the driver to function correctly—are stored in a file named *rsrc.dat* within
    the hidden filesystem maintained by the malware. (Note that the infection doesn’t
    change the size of the driver file being infected.) Once it has made this modification,
    TDL3 changes the entry point field in the driver’s Portable Executable (PE) header
    so that it points to the malicious loader. Thus, the entry point address of a
    driver infected by TDL3 points to the resource section, which is not legitimate
    under normal conditions. [Figure 1-1](ch01.xhtml#ch01fig01) shows the boot-start
    driver before and after infection, demonstrating how the driver image is infected,
    with the Header label referring to the PE header along with the section table.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 被覆盖的 *.rsrc* 节区的原始字节——这些字节对驱动程序的正常运行仍然是必需的——会被保存在恶意软件维护的隐藏文件系统中的名为 *rsrc.dat*
    的文件中。（请注意，感染过程不会改变被感染驱动程序文件的大小。）一旦完成这一修改，TDL3 会更改驱动程序的可移植执行文件（PE）头中的入口点字段，使其指向恶意加载器。因此，被
    TDL3 感染的驱动程序的入口点地址会指向资源节区，这在正常情况下是不合法的。[图 1-1](ch01.xhtml#ch01fig01) 展示了感染前后的启动驱动程序，演示了驱动程序映像如何被感染，Header
    标签指的是 PE 头和节区表。
- en: '![image](../images/01fig01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/01fig01.jpg)'
- en: '*Figure 1-1: Modifications to a kernel-mode boot-start driver upon infection
    of the system*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-1：系统感染后，内核模式启动驱动程序的修改*'
- en: This pattern of infecting the executables in the PE format—the primary binary
    format of Windows executables and dynamic link libraries (DLLs)—is typical of
    virus infectors, but not so common for rootkits. Both the PE header and the section
    table are indispensable to any PE file. The PE header contains crucial information
    about the location of the code and data, system metadata, stack size, and so on,
    while the section table contains information about the sections of the executable
    and their location.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这种感染 Windows 可执行文件和动态链接库（DLL）的 PE 格式可执行文件的方式，是病毒感染者的典型做法，但对于 rootkit 来说并不常见。PE
    头和节区表对任何 PE 文件都是不可或缺的。PE 头包含关于代码和数据位置、系统元数据、栈大小等关键信息，而节区表则包含关于可执行文件节区及其位置的信息。
- en: To complete the infection process, the malware overwrites the .NET metadata
    directory entry of the PE header with the same values contained in the security
    data directory entry. This step was probably designed to thwart static analysis
    of the infected images, because it may induce an error during parsing of the PE
    header by common malware analysis tools. Indeed, attempts to load such images
    caused IDA Pro version 5.6 to crash—a bug that has since been corrected. According
    to Microsoft’s PE/COFF specification, the .NET metadata directory contains data
    used by the Common Language Runtime (CLR) to load and run .NET applications. However,
    this directory entry is not relevant for kernel-mode boot drivers, since they
    are all native binaries and contain no system-managed code. For this reason, this
    directory entry isn’t checked by the OS loader, enabling an infected driver to
    load successfully even if its content is invalid.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为完成感染过程，恶意软件将 PE 头部的 .NET 元数据目录项覆盖为与安全数据目录项中包含的相同值。这个步骤可能是为了防止对感染镜像进行静态分析，因为它可能会导致常见恶意软件分析工具在解析
    PE 头部时发生错误。事实上，尝试加载这些镜像会导致 IDA Pro 5.6 版本崩溃——这个漏洞后来已经被修复。根据微软的 PE/COFF 规范，.NET
    元数据目录包含由公共语言运行时（CLR）使用的数据，用于加载和运行 .NET 应用程序。然而，对于内核模式启动驱动程序来说，这个目录项并不相关，因为它们都是本地二进制文件，并不包含任何系统管理代码。因此，操作系统加载程序不会检查此目录项，从而使感染的驱动程序即使其内容无效，仍然能够成功加载。
- en: 'Note that this TDL3 infection technique is limited: it works only on 32-bit
    platforms because of Microsoft’s Kernel-Mode Code Signing Policy, which enforces
    mandatory code integrity checks on 64-bit systems. Since the driver’s content
    is changed while the system is being infected, its digital signature is no longer
    valid, thereby preventing the OS from loading the driver on 64-bit systems. The
    malware’s developers responded with TDL4\. We will discuss both the policy and
    its circumvention in detail in [Chapter 6](ch06.xhtml#ch06).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这种 TDL3 感染技术是有限制的：它仅适用于 32 位平台，因为微软的内核模式代码签名策略在 64 位系统上强制执行强制性代码完整性检查。由于在系统感染过程中驱动程序的内容发生了变化，它的数字签名不再有效，从而阻止操作系统在
    64 位系统上加载该驱动程序。恶意软件的开发者通过 TDL4 做出了回应。我们将在[第六章](ch06.xhtml#ch06)中详细讨论这一策略及其规避方法。
- en: '**Controlling the Flow of Data**'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**控制数据流**'
- en: To fulfill their mission of stealth, kernel rootkits must modify the control
    flow or the data flow (or both) of the kernel’s system calls, wherever the OS’s
    original control or data flow would reveal the presence of any of the malware’s
    components at rest (for example, files) or any of its running tasks or artifacts
    (such as kernel data structures). To do so, rootkits typically inject their code
    somewhere on the execution path of the system call implementation; the placement
    of these code hooks is one of the most instructive aspects of rootkits.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现隐匿性，内核 rootkit 必须修改内核系统调用的控制流或数据流（或两者），无论何时操作系统的原始控制流或数据流会暴露任何恶意软件组件的存在（例如，文件）或其运行的任务或工件（如内核数据结构）。为了实现这一点，rootkit
    通常会在系统调用实现的执行路径上注入代码；这些代码钩子的放置是 rootkit 最具指导性的方面之一。
- en: '***Bring Your Own Linker***'
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***自带链接器***'
- en: '*Hooking* is essentially linking. Modern rootkits bring their own linkers to
    link their code with the system, a design pattern we call *Bring Your Own Linker*.
    In order to embed these “linkers” stealthily, the TDL3 follows a few common malware
    design principles.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*Hooking* 本质上是链接。现代 rootkit 自带链接器，将其代码与系统链接，这是我们称之为 *自带链接器* 的设计模式。为了隐蔽地嵌入这些“链接器”，TDL3
    遵循了一些常见的恶意软件设计原则。'
- en: First, the target must remain robust despite the injected extra code, as the
    attacker has nothing to gain and a lot to lose from crashing the targeted software.
    From a software engineering point of view, hooking is a form of software composition
    and requires a careful approach. The attacker must make sure that the system reaches
    the new code only in a predictable state so the code can correctly process, to
    avoid any crashing or abnormal behavior that would draw a user’s attention. It
    might seem like the placement of hooks is limited only by the rootkit author’s
    imagination, but in reality, the author must stick to stable software boundaries
    and interfaces they understand really well. It is not surprising, then, that hooking
    tends to target the same structures that are used for the system’s native dynamic
    linking functionality, whether publicly documented or not. Tables of callbacks,
    methods, and other function pointers that link abstraction layers or software
    modules are the safest places for hooks; hooking function preambles also work
    well.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，目标必须保持稳定，尽管有额外注入的代码，因为攻击者从让目标软件崩溃中既无收益也有损失。从软件工程的角度来看，钩子是一种软件组合方式，需要谨慎处理。攻击者必须确保系统只有在可预测的状态下才会进入新的代码，以便代码能够正确处理，从而避免任何可能导致崩溃或异常行为的情况，这些异常行为可能会引起用户的注意。钩子的位置似乎仅限于
    rootkit 作者的想象力，但实际上，作者必须遵循他们非常熟悉的稳定软件边界和接口。因此，钩子通常会针对系统本地动态链接功能所使用的相同结构，无论它们是否公开文档化。回调表、方法表以及其他连接抽象层或软件模块的函数指针是钩子最安全的目标；钩子函数的前言同样也很有效。
- en: Secondly, the hook placement should not be too obvious. Although early rootkits
    hooked the kernel’s top-level system call table, this technique quickly became
    obsolete because it was so conspicuous. In fact, when used by the Sony rootkit
    in 2005,^([3](footnotes.xhtml#ch01fn3)) this placement was already considered
    behind the times and raised many eyebrows as a result. As rootkits grew more sophisticated,
    their hooks migrated lower down the stack, from the main system call dispatch
    tables to the OS subsystems that presented uniform API layers for diverging implementations,
    such as the Virtual File System (VFS), and then down to specific drivers’ methods
    and callbacks. TDL3 is a particularly good example of this migration.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，钩子的位置不应过于明显。虽然早期的 rootkit 会钩住内核的顶层系统调用表，但这种技术很快就变得过时，因为它太显眼了。事实上，当 2005 年的索尼
    rootkit 使用这种技术时，^([3](footnotes.xhtml#ch01fn3)) 这种钩子位置已经被认为是过时的，因而引起了许多人的关注。随着
    rootkit 越来越复杂，它们的钩子逐渐向栈的下层迁移，从主要的系统调用分发表到操作系统子系统，这些子系统为不同的实现提供统一的 API 层，例如虚拟文件系统（VFS），然后再到特定驱动程序的方法和回调。TDL3
    就是这种迁移的一个典型例子。
- en: '***How TDL3’s Kernel-Mode Hooks Work***'
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***TDL3 的内核模式钩子是如何工作的***'
- en: 'In order to stay under the radar, TDL3 employed a rather sophisticated hooking
    technique never before seen in the wild: it intercepted the read and write I/O
    requests sent to the hard drive at the level of the storage port/miniport driver
    (a hardware storage media driver found at the very bottom of the storage driver
    stack). *Port drivers* are system modules that provide a programming interface
    for miniport drivers, which are supplied by the vendors of the corresponding storage
    devices. [Figure 1-2](ch01.xhtml#ch01fig02) shows the architecture of the storage
    device driver stack in Microsoft Windows.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持低调，TDL3 采用了一种在实际环境中前所未见的相当复杂的钩子技术：它在存储端口/小型端口驱动程序的层次拦截发送到硬盘的读写 I/O 请求（存储驱动栈最底层的硬件存储媒体驱动程序）。*端口驱动程序*是为小型端口驱动程序提供编程接口的系统模块，小型端口驱动程序由相应存储设备的供应商提供。[图
    1-2](ch01.xhtml#ch01fig02) 显示了 Microsoft Windows 中存储设备驱动栈的架构。
- en: The processing of an I/O request packet (IRP) structure addressed to some object
    located on a storage device starts at the filesystem driver’s level. The corresponding
    filesystem driver determines the specific device where the object is stored (like
    the disk partition and the disk extent, a contiguous storage area initially reserved
    for a filesystem) and issues another IRP to a class driver’s device object. The
    latter, in turn, translates the I/O request into a corresponding miniport device
    object.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 针对存储设备上某个对象的 I/O 请求包（IRP）结构的处理从文件系统驱动程序的层次开始。对应的文件系统驱动程序会确定该对象存储的具体设备（如磁盘分区和磁盘区域，最初为文件系统预留的连续存储区域），并向类驱动程序的设备对象发出另一个
    IRP。后者会将 I/O 请求转换为相应的小型端口设备对象。
- en: '![image](../images/01fig02.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/01fig02.jpg)'
- en: '*Figure 1-2: Storage device driver stack architecture in Microsoft Windows*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-2：Microsoft Windows 中存储设备驱动堆栈架构*'
- en: According to the Windows Driver Kit (WDK) documentation, storage port drivers
    provide an interface between a hardware-independent class driver and an HBA-specific
    (host-based architecture) miniport driver. Once that interface is available, TDL3
    sets up kernel-mode hooks at the lowest possible hardware-independent level in
    the storage device driver stack, thus bypassing any monitoring tools or protections
    operating at the level of the filesystem or storage class driver. Such hooks can
    be detected only by tools that are aware of the normal composition of these tables
    for a particular set of devices or of a known good configuration of a particular
    machine.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 Windows 驱动程序工具包（WDK）文档，存储端口驱动程序提供硬件独立类驱动程序与 HBA 特定（主机基础架构）迷你端口驱动程序之间的接口。一旦该接口可用，TDL3
    就会在存储设备驱动堆栈中最低的硬件独立级别设置内核模式 hook，从而绕过在文件系统或存储类驱动程序级别操作的任何监控工具或保护措施。这样的 hook 只能通过了解特定设备集的这些表的正常组成或了解特定机器已知良好配置的工具来检测。
- en: In order to achieve this hooking technique, TDL3 first obtains a pointer to
    the miniport driver object of the corresponding device object. Specifically, the
    hooking code tries to open a handle for *\??\PhysicalDriveXX* (where *XX* corresponds
    to the number of the hard drive), but that string is actually a symbolic link
    pointing to the device object *\Device\HardDisk0\DR0,* which is created by a storage
    class driver. Moving down the device stack from *\Device\HardDisk0\DR0*, we find
    the miniport storage device object at the very bottom. Once the miniport storage
    device object is found, it’s straightforward to get a pointer to its driver object
    by following the `DriverObject` field in the documented `DEVICE_OBJECT` structure.
    At this point, the malware has all the information it needs to hook the storage
    driver stack.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这种 hooking 技术，TDL3 首先获取对应设备对象的迷你端口驱动程序对象的指针。具体来说，hooking 代码尝试打开 *\??\PhysicalDriveXX*（其中
    *XX* 对应硬盘的编号）的句柄，但该字符串实际上是一个指向设备对象 *\Device\HardDisk0\DR0* 的符号链接，该设备对象由存储类驱动程序创建。从
    *\Device\HardDisk0\DR0* 开始向下移动设备堆栈，我们在最底层找到了迷你端口存储设备对象。一旦找到迷你端口存储设备对象，通过跟随文档中
    `DEVICE_OBJECT` 结构的 `DriverObject` 字段，就能直接获取指向其驱动程序对象的指针。在此时，恶意软件已拥有进行存储驱动堆栈 hooking
    所需的所有信息。
- en: 'Next, TDL3 creates a new malicious driver object and overwrites the `DriverObject`
    field in the miniport driver object with the pointer to a newly created field,
    as shown in [Figure 1-3](ch01.xhtml#ch01fig03). This allows the malware to intercept
    read/write requests to the underlying hard drive, since the addresses of all the
    handlers are specified in the related driver object structure: the `MajorFunction`
    array in the `DRIVER_OBJECT` structure.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，TDL3 创建一个新的恶意驱动程序对象，并用指向新创建字段的指针覆盖迷你端口驱动程序对象中的 `DriverObject` 字段，如 [图 1-3](ch01.xhtml#ch01fig03)
    所示。这使得恶意软件能够拦截对底层硬盘的读/写请求，因为所有处理程序的地址都在相关驱动程序对象结构中指定：`DRIVER_OBJECT` 结构中的 `MajorFunction`
    数组。
- en: '![image](../images/01fig03.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/01fig03.jpg)'
- en: '*Figure 1-3: Hooking storage miniport driver object*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-3：hooking 存储迷你端口驱动程序对象*'
- en: 'The malicious major handlers shown in [Figure 1-3](ch01.xhtml#ch01fig03) intercept
    `IRP_MJ_INTERNAL_CONTROL` and `IRP_MJ_DEVICE_CONTROL` for the following Input/Output
    Control (IOCTL) code in order to monitor and modify read/write requests to the
    hard drive, storing the infected driver and the image of the hidden filesystem
    implemented by the malware:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [图 1-3](ch01.xhtml#ch01fig03) 所示，恶意的主要处理程序拦截 `IRP_MJ_INTERNAL_CONTROL` 和 `IRP_MJ_DEVICE_CONTROL`，用于监控和修改对硬盘的读/写请求，存储被感染的驱动程序和恶意软件实现的隐藏文件系统的镜像：
- en: '`IOCTL_ATA_PASS_THROUGH_DIRECT`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IOCTL_ATA_PASS_THROUGH_DIRECT`'
- en: '`IOCTL_ATA_PASS_THROUGH`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IOCTL_ATA_PASS_THROUGH`'
- en: TDL3 prevents hard drive sectors containing protected data from being read by
    the Windows tools or accidentally overwritten by the Windows filesystem, thus
    protecting both the stealth and the integrity of the rootkit. When a read operation
    is encountered, TDL3 zeros out the return buffer on completion of the I/O operation,
    and it skips the whole read operation in the event of a write data request. TDL3’s
    hooking technique allows it to bypass some kernel patch detection techniques;
    that is, TDL3’s modifications do not touch any of the frequently protected and
    monitored areas, including system modules, the System Service Descriptor Table
    (SSDT), the Global Descriptor Table (GDT), or the Interrupt Descriptor Table (IDT).
    Its successor, TDL4, takes the same approach to bypassing kernel-mode patch protection
    PatchGuard available on 64-bit Windows operating systems, as it inherits a great
    deal of kernel-mode functionality from TDL3, including these hooks into the storage
    miniport driver.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: TDL3防止Windows工具读取包含受保护数据的硬盘扇区，或者防止这些扇区被Windows文件系统意外覆盖，从而保护了rootkit的隐蔽性和完整性。当遇到读取操作时，TDL3会在I/O操作完成后清空返回缓冲区，并且在遇到写数据请求时跳过整个读取操作。TDL3的钩住技术使其能够绕过一些内核补丁检测技术；也就是说，TDL3的修改不会触及任何经常受到保护和监控的区域，包括系统模块、系统服务描述符表（SSDT）、全局描述符表（GDT）或中断描述符表（IDT）。它的继任者TDL4采取了相同的方法来绕过64位Windows操作系统上的内核模式补丁保护PatchGuard，因为它从TDL3继承了大量内核模式功能，包括这些存储迷你端口驱动程序的钩子。
- en: '**The Hidden Filesystem**'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**隐藏文件系统**'
- en: TDL3 was the first malware system to store its configuration files and payload
    in a hidden encrypted storage area on the target system, instead of relying on
    the filesystem service provided by the operating system. Today, TDL3’s approach
    has been adopted and adapted by other complex threats such as the Rovnix Bootkit,
    ZeroAccess, Avatar, and Gapz.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: TDL3是第一个将其配置文件和有效载荷存储在目标系统上隐藏加密存储区域中的恶意软件系统，而不是依赖操作系统提供的文件系统服务。今天，TDL3的这种方法已被其他复杂威胁如Rovnix
    Bootkit、ZeroAccess、Avatar和Gapz等所采用并改编。
- en: This hidden storage technique significantly hampers forensic analysis because
    the malicious data is stored in an encrypted container located somewhere on the
    hard drive, but outside the area reserved by the OS’s own native filesystem. At
    the same time, the malware is able to access the contents of the hidden filesystem
    using conventional Win32 APIs like `CreateFile`, `ReadFile`, `WriteFile`, and
    `CloseHandle`. This facilitates malware payload development by allowing the malware
    developers to use the standard Windows interfaces for reading and writing the
    payloads from the storage area without having to develop and maintain any custom
    interfaces. This design decision is significant because, together with the use
    of standard interfaces for hooking, it improves the overall reliability of the
    rootkit; from a software engineering point of view, this is a good and proper
    example of code reuse! Microsoft’s own CEO’s formula for success was “Developers,
    developers, developers, developers!”—in other words, treating existing developer
    skills as valuable capital. TDL3 chose to similarly leverage the existing Windows
    programming skills of developers who had turned to the dark side, perhaps both
    to ease the transition and to increase the reliability of the malcode.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这种隐藏存储技术大大妨碍了取证分析，因为恶意数据被存储在一个加密容器中，该容器位于硬盘的某个地方，但不在操作系统自身的本地文件系统所保留的区域内。同时，恶意软件可以使用传统的Win32
    API，如`CreateFile`、`ReadFile`、`WriteFile`和`CloseHandle`，访问隐藏文件系统的内容。这通过允许恶意软件开发者使用标准的Windows接口从存储区域读取和写入有效载荷，而无需开发和维护任何自定义接口，促进了恶意软件有效载荷的开发。这一设计决策意义重大，因为它与使用标准接口钩住技术一起，提高了rootkit的整体可靠性；从软件工程的角度来看，这是一个很好的、正确的代码复用示例！微软首席执行官的成功公式是“开发者，开发者，开发者，开发者！”——换句话说，就是将现有开发者的技能视为宝贵的资本。TDL3选择了类似地利用那些转向黑暗面的开发者的现有Windows编程技能，或许是为了简化过渡并提高恶意代码的可靠性。
- en: 'TDL3 allocates its image of the hidden filesystem on the hard disk, in sectors
    unoccupied by the OS’s own filesystem. The image grows from the end of the disk
    toward the start of the disk, which means that it may eventually overwrite the
    user’s filesystem data if it grows large enough. The image is divided into blocks
    of 1,024 bytes each. The first block (at the end of the hard drive) contains a
    file table whose entries describe files contained within the filesystem and include
    the following information:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: TDL3在硬盘上分配其隐藏文件系统的镜像，位于操作系统自有文件系统未占用的扇区。该镜像从磁盘的末端向磁盘的起始部分生长，这意味着如果它生长得足够大，最终可能会覆盖用户的文件系统数据。镜像被分为每块1,024字节的块。第一块（位于硬盘的末端）包含一个文件表，其条目描述文件系统中包含的文件，并包括以下信息：
- en: A filename limited to 16 characters, including the terminating null
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制为16个字符的文件名，包括终止的空字符
- en: The size of the file
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件的大小
- en: The actual file offset, which we calculate by subtracting the starting offset
    of a file, multiplied by 1,024, from the offset of the beginning of the filesystem
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际的文件偏移量，我们通过将文件的起始偏移量乘以1,024，并从文件系统开始的偏移量中减去该值来计算
- en: The time the filesystem was created
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件系统创建的时间
- en: 'The contents of the filesystem are encrypted with a custom (and mostly ad hoc)
    encryption algorithm on a per-block basis. Different versions of the rootkit have
    used different algorithms. For instance, some modifications used an RC4 cipher
    using the logical block address (LBA) of the first sector that corresponds to
    each block as a key. However, another modification encrypted data using an XOR
    operation with a fixed key: 0x54 incremented each XOR operation, resulting in
    weak enough encryption that a specific pattern corresponding to an encrypted block
    containing zeros was easy to spot.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 文件系统的内容采用自定义（且大多是临时）加密算法按块加密。不同版本的rootkit使用了不同的算法。例如，一些修改版使用了RC4密码，使用与每个块对应的第一个扇区的逻辑块地址（LBA）作为密钥。然而，另一些修改版使用了XOR操作与固定密钥进行加密：0x54每次XOR操作时递增，导致加密强度较弱，容易发现加密块中包含零的特定模式。
- en: From user mode, the payload accesses the hidden storage by opening a handle
    for a device object named *\Device\XXXXXXXX\YYYYYYYY* where *XXXXXXXX* and *YYYYYYYY*
    are randomly generated hexadecimal numbers. Note that the codepath to access this
    storage relies on many standard Windows components—hopefully already debugged
    by Microsoft and therefore reliable. The name of the device object is generated
    each time the system boots and then passed as a parameter to the payload modules.
    The rootkit is responsible for maintaining and handling I/O requests to this filesystem.
    For instance, when a payload module performs an I/O operation with a file stored
    in the hidden storage area, the OS transfers this request to the rootkit and executes
    its entry point functions to handle the request.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 从用户模式下，payload通过打开一个名为 *\Device\XXXXXXXX\YYYYYYYY* 的设备对象句柄来访问隐藏存储，其中 *XXXXXXXX*
    和 *YYYYYYYY* 是随机生成的十六进制数字。请注意，访问此存储的代码路径依赖于许多标准的Windows组件——希望这些组件已经被微软调试过，因此是可靠的。设备对象的名称每次系统启动时都会生成，然后作为参数传递给payload模块。rootkit负责维护和处理对该文件系统的I/O请求。例如，当payload模块对存储在隐藏存储区中的文件执行I/O操作时，操作系统会将该请求传递给rootkit，并执行其入口点函数来处理请求。
- en: In this design pattern, TDL3 illustrates the general trend followed by rootkits.
    Rather than providing brand-new code for all of its operations, burdening the
    third-party malware developers with learning the peculiarities of that code, a
    rootkit piggybacks on the existing and familiar Windows functionality—so long
    as its piggybacking tricks and their underlying Windows interfaces are not common
    knowledge. Specific infection methods evolve with changes in mass-deployed defensive
    measures, but this approach has persisted, as it follows the common code reliability
    principles shared by both malware and benign software development.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一设计模式中，TDL3展示了rootkit的一般趋势。它并没有为所有操作提供全新的代码，也没有让第三方恶意软件开发人员负担学习这些代码的特殊性，而是借助现有且熟悉的Windows功能——只要这些借用技巧及其底层的Windows接口不是常识。具体的感染方法会随着大规模部署的防御措施的变化而演变，但这种方法一直存在，因为它遵循了恶意软件和良性软件开发共享的通用代码可靠性原则。
- en: '**Conclusion: TDL3 Meets Its Nemesis**'
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**结论：TDL3遇到了它的克星**'
- en: As we have seen, TDL3 is a sophisticated rootkit that pioneered several techniques
    for operating covertly and persistently on an infected system. Its kernel-mode
    hooks and hidden storage systems have not gone unnoticed by other malware developers
    and thus have subsequently appeared in other complex threats. The only limitation
    to its infection routine is that it’s able to target only 32-bit systems.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，TDL3是一个复杂的rootkit，开创了几种在感染系统上隐秘且持久运行的技术。它的内核模式挂钩和隐藏存储系统并未被其他恶意软件开发者忽视，因此这些技术随后出现在其他复杂威胁中。它感染例程的唯一限制是只能针对32位系统。
- en: When TDL3 first began to spread, it did the job the developers intended, but
    as the number of 64-bit systems increased, demand grew for the ability to infect
    x64 systems. To achieve this, malware developers had to figure out how to defeat
    the 64-bit Kernel-Mode Code Signing Policy in order to load malicious code into
    kernel-mode address space. As we’ll discuss in [Chapter 7](ch07.xhtml#ch07), TDL3’s
    authors chose *bootkit* technology to evade signature enforcement.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当TDL3最初开始传播时，它完成了开发者预期的任务，但随着64位系统数量的增加，感染x64系统的需求也随之增长。为了实现这一目标，恶意软件开发者不得不弄清楚如何绕过64位内核模式代码签名策略，以便将恶意代码加载到内核模式地址空间中。正如我们在[第七章](ch07.xhtml#ch07)中将讨论的那样，TDL3的作者选择了*引导程序（bootkit）*技术来规避签名强制执行。
