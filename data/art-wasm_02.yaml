- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: WebAssembly Text Basics
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: WebAssembly 文本基础
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: In this chapter, we’ll dive into the basics of WAT code. We’ll write most of
    the code in this book in WAT, the lowest level of programming you can write for
    deployment to WebAssembly (although for experienced assembly coders, it might
    seem rather high level).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨 WAT 代码的基础知识。我们将在本书中大部分时间编写 WAT 代码，这是你可以为 WebAssembly 部署编写的最低级别的编程（尽管对于有经验的汇编程序员来说，这可能显得相当高级）。
- en: This chapter covers a lot of ground. We’ll begin by showing you the two comment
    styles in WebAssembly. Next, we’ll write the traditional hello world application.
    We don’t start with hello world because working with strings from within WAT is
    more challenging than you might expect.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了很多内容。我们将从展示 WebAssembly 中的两种注释样式开始。接下来，我们将编写传统的 hello world 应用程序。我们不从 hello
    world 开始，因为在 WAT 中处理字符串比你想象的要复杂。
- en: Then we’ll discuss how to import data from JavaScript into our WebAssembly module
    using an import object. We’ll look at named and unnamed global and local variables,
    as well as the data types that WebAssembly supports. We’ll discuss the S-Expression
    syntax and how the `wat2wasm` compiler unpacks those S-Expressions when it compiles
    your code. You’ll delve into conditional logic, including `if`/`else` statements
    and branch tables, and you’ll learn how to use loops and blocks in conjunction
    with conditional logic.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将讨论如何使用导入对象从 JavaScript 导入数据到 WebAssembly 模块。我们将研究命名和未命名的全局与局部变量，以及 WebAssembly
    支持的数据类型。我们还会讨论 S-表达式语法，以及`wat2wasm`编译器如何在编译代码时解包这些 S-表达式。你将深入了解条件逻辑，包括`if`/`else`语句和分支表，并且学习如何结合条件逻辑使用循环和块。
- en: By the end of this chapter, you should be able to write simple WebAssembly apps
    that you can execute from the command line using Node.js.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你应该能够编写简单的 WebAssembly 应用程序，并通过命令行使用 Node.js 执行它们。
- en: Writing the Simplest Module
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写最简单的模块
- en: Every WAT application must be a module, so we’ll first look at the module syntax.
    We declare a module in a block, like the one in [Listing 2-1](#listing2-1).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 WAT 应用程序都必须是一个模块，因此我们首先会看看模块语法。我们在一个块中声明模块，就像[示例 2-1](#listing2-1)中展示的那样。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 2-1: Single line WAT comment'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 2-1：单行 WAT 注释
- en: We declare a module with the `module` keyword, and anything inside the surrounding
    parentheses is part of the module. To add a comment, we use two semicolons `;;`
    , and everything on the line that follows is a comment. WAT also has block comment
    syntax; you open the block comment with `(;` and close it with `;)` , as shown
    in [Listing 2-2](#listing2-2).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过`module`关键字声明一个模块，括号内的内容是模块的一部分。要添加注释，我们使用两个分号`;;`，之后的内容为注释。WAT也有块注释语法；你可以用`(;`打开块注释，用`;)`关闭块注释，如[示例
    2-2](#listing2-2)所示。
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 2-2: Multi-line WAT comment'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 2-2：多行 WAT 注释
- en: Because this module doesn’t do anything, we won’t bother to compile it. Instead,
    we’ll move on to writing our hello world application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此模块不做任何事情，我们不会费力去编译它。相反，我们将继续编写我们的 hello world 应用程序。
- en: Hello World in WebAssembly
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WebAssembly 中的 Hello World
- en: WAT doesn’t have any native string support, so working with strings requires
    you to work directly with memory as an array of character data. That memory data
    then must be converted into a string in JavaScript code, because manipulating
    strings from within JavaScript is much simpler.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: WAT 没有原生的字符串支持，因此处理字符串需要直接操作内存作为字符数据的数组。这些内存数据必须转换成 JavaScript 代码中的字符串，因为从 JavaScript
    中操作字符串要简单得多。
- en: When working with strings in WAT, you need to declare an array of character
    data that is stored within WebAssembly linear memory. Linear memory is a topic
    we’ll discuss in detail in Chapter 6, but for now know that linear memory is similar
    to a memory heap in native applications, or a giant typed array in JavaScript.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 WAT 中处理字符串时，你需要声明一个存储在 WebAssembly 线性内存中的字符数据数组。线性内存是我们将在第六章详细讨论的主题，但现在你只需知道线性内存类似于本地应用程序中的内存堆，或者
    JavaScript 中的一个巨大的类型化数组。
- en: You’ll also need to call an imported JavaScript function from WebAssembly to
    handle I/O operations. Unlike in a native application where the operating system
    usually handles I/O, in a WebAssembly module, I/O must be handled by the embedding
    environment, whether that environment is a web browser, an operating system, or
    runtime.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要从 WebAssembly 调用一个导入的 JavaScript 函数来处理 I/O 操作。与本地应用程序通常由操作系统处理 I/O 不同，在
    WebAssembly 模块中，I/O 必须由嵌入环境来处理，无论这个环境是网页浏览器、操作系统还是运行时。
- en: Creating Our WAT Module
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建我们的 WAT 模块
- en: In this section, we’ll create a simple WebAssembly module that creates a `hello
    world!` string in linear memory and calls JavaScript to write that string to the
    console. Create a new WAT file and name it *helloworld.wat*. Open that file and
    add the WAT code in [Listing 2-3](#listing2-3).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将创建一个简单的 WebAssembly 模块，在线性内存中创建一个`hello world!`字符串，并调用 JavaScript 将该字符串写入控制台。创建一个新的
    WAT 文件并命名为*helloworld.wat*。打开该文件并添加[列表 2-3](#listing2-3)中的 WAT 代码。
- en: '**helloworld.wat**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**helloworld.wat**'
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 2-3: Importing a function'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2-3：导入一个函数
- en: This code tells WebAssembly to expect the import object `env` from our embedding
    environment, and that within that object we’re expecting the function `print_string`.
    When we write our JavaScript code later, we’ll create this `env` object with the
    `print_string` function, which will be passed to our WebAssembly module when we
    instantiate it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码告诉 WebAssembly 预计从我们嵌入的环境中导入对象`env`，并且在该对象中我们期望得到函数`print_string`。当我们稍后编写
    JavaScript 代码时，我们将创建这个`env`对象，并将`print_string`函数传递给 WebAssembly 模块，当我们实例化它时。
- en: We also set up the signature as requiring a single `i32` parameter representing
    the length of our string. We name this function `$print_string` so we can access
    it from our WAT code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还设置了签名，要求一个`i32`类型的参数，表示我们字符串的长度。我们将此函数命名为`$print_string`，以便可以从我们的 WAT 代码中访问它。
- en: Next, we’ll add an import for our memory buffer. Add the line in bold in [Listing
    2-4](#listing2-4).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加对内存缓冲区的导入。在[列表 2-4](#listing2-4)中添加加粗的行。
- en: '**helloworld.wat**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**helloworld.wat**'
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 2-4: Importing a function and memory buffer'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2-4：导入一个函数和内存缓冲区
- en: 'This new `import` tells our WebAssembly module that we’ll be importing a memory
    buffer from the object `env` and the buffer will be called `buffer`. The `(memory`
    `1)` statement indicates that the buffer will be a single page of linear memory:
    a *page* is the smallest chunk of memory you can allocate at one time to linear
    memory. In WebAssembly, a page is 64KB, which is more than we need for this module,
    so we need just one page. Next, in [Listing 2-5](#listing2-5), we add a few global
    variables to *helloworld.wat*.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新的`import`告诉我们的 WebAssembly 模块，我们将从`env`对象导入一个内存缓冲区，并且该缓冲区将被称为`buffer`。`(memory`
    `1)`语句表示缓冲区将是一个线性内存页面：*页面*是你可以一次分配给线性内存的最小内存块。在 WebAssembly 中，一个页面是 64KB，这对这个模块来说足够了，所以我们只需要一个页面。接下来，在[列表
    2-5](#listing2-5)中，我们将添加一些全局变量到*helloworld.wat*中。
- en: '**helloworld.wat**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**helloworld.wat**'
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 2-5: Adding global variables'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2-5：添加全局变量
- en: The first `global` 1 variable is a number imported from our JavaScript import
    object; it maps to a variable with the name `env` in JavaScript (which we’ve yet
    to create). That value will be the starting memory location of our string and
    can be any location in our linear memory page up to the maximum 65,535\. Of course,
    you wouldn’t want to choose a value close to the end of linear memory because
    it would limit the length of the string you could store. If the value passed in
    is `0`, you can use the entire 64KB for your string. If you passed in the value
    `65,532`, you would only be able to use the last four bytes to store character
    data. If you try to write to a memory location that is greater than what was allocated,
    you’ll get a memory error in your JavaScript console. The second global variable,
    `$string_len` 2, is a constant that represents the length of the string we’ll
    define, and we set it to `12`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`global` 1变量是一个从我们的 JavaScript 导入对象导入的数字；它映射到 JavaScript 中名为`env`的变量（我们还未创建）。该值将是我们字符串的起始内存位置，可以是线性内存页面中任何位置，最大为
    65,535。当然，你不希望选择接近线性内存末尾的值，因为这会限制你能够存储的字符串长度。如果传入的值是`0`，你可以使用整个 64KB 来存储字符串。如果你传入的值是`65,532`，你只能使用最后四个字节来存储字符数据。如果你尝试写入一个超过已分配内存位置的值，你将会在
    JavaScript 控制台中遇到内存错误。第二个全局变量`$string_len` 2是一个常量，表示我们将定义的字符串的长度，我们将其设置为`12`。
- en: In [Listing 2-6](#listing2-6), we define our string in linear memory using a
    data expression.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在[列表 2-6](#listing2-6)中，我们使用数据表达式在线性内存中定义了我们的字符串。
- en: '**helloworld.wat**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**helloworld.wat**'
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 2-6: Adding a data string'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2-6：添加数据字符串
- en: We first pass the location in memory where the module will write data. The data
    is stored in the `$start_string` global variable that the module will import from
    JavaScript. The second parameter is the data string, which we define as the string
    `"hello world!"`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先传递模块将要写入数据的内存位置。数据存储在模块将从 JavaScript 导入的`$start_string`全局变量中。第二个参数是数据字符串，我们将其定义为字符串`"hello
    world!"`。
- en: Now we can define our `"helloworld"` function and add it to the module, as shown
    in [Listing 2-7](#listing2-7).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以定义我们的 `"helloworld"` 函数并将其添加到模块中，如 [列表 2-7](#listing2-7) 所示。
- en: '**helloworld.wat**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**helloworld.wat**'
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 2-7: Adding a `"``helloworld``"` function to the WebAssembly module'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2-7：向 WebAssembly 模块添加 `"helloworld"` 函数
- en: 'We define and export our function as `"helloworld"` for use in JavaScript 1.
    The only thing this function does is call the imported `$print_string` 2 function,
    passing it the length of the string we defined as a global. We can now compile
    our WebAssembly module, like so:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将函数定义并导出为 `"helloworld"`，以便在 JavaScript 1 中使用。这个函数唯一的功能就是调用导入的 `$print_string`
    2 函数，并将我们定义为全局的字符串长度传递给它。现在，我们可以像下面这样编译 WebAssembly 模块：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Running `wat2wasm` generates a *helloworld.wasm* module. To execute the WebAssembly
    module, we’ll need to create a JavaScript file that executes it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `wat2wasm` 会生成一个 *helloworld.wasm* 模块。为了执行这个 WebAssembly 模块，我们需要创建一个 JavaScript
    文件来运行它。
- en: Creating the JavaScript File
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 JavaScript 文件
- en: Now we’ll create *helloworld.js* to run our WebAssembly module. Create and open
    the JavaScript file in your text editor, and add the Node.js file constants as
    well as three variables, as shown in [Listing 2-8](#listing2-8).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建 *helloworld.js* 来运行我们的 WebAssembly 模块。创建并打开 JavaScript 文件，在文本编辑器中添加
    Node.js 文件常量和三个变量，如 [列表 2-8](#listing2-8) 所示。
- en: '**helloworld.js**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**helloworld.js**'
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Listing 2-8: Declaring the JavaScript variables'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2-8：声明 JavaScript 变量
- en: The `hello_world` 1 variable will eventually point to the `helloworld` function
    exported by our WebAssembly module, so we set it to `null` for the time being.
    The `start_string_index` 2 variable is the starting location of our string in
    the linear memory array. We set it to `100` here, so as not to be close to the
    64KB limit. We chose the address 100 arbitrarily. You can choose any address as
    long as none of the memory you’re using extends past the 64KB limit.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`hello_world` 1 变量最终会指向 WebAssembly 模块导出的 `helloworld` 函数，因此我们暂时将其设置为 `null`。`start_string_index`
    2 变量是我们字符串在线性内存数组中的起始位置。我们将其设置为 `100`，以避免接近 64KB 的限制。我们随意选择了地址 100。你可以选择任何地址，只要你使用的内存不超过
    64KB 限制。'
- en: 'The last variable holds the `WebAssembly.Memory` 3 object. The number passed
    represents the number of pages you want to allocate. We initialize it with a size
    of one page by passing in `{initial: 1}` as the only parameter. You can allocate
    up to two gigabytes this way, but setting this value too high can result in an
    error if the browser is unable to find enough contiguous memory to fulfill the
    request.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '最后的变量保存了 `WebAssembly.Memory` 3 对象。传入的数字表示你希望分配的页面数。我们通过传入 `{initial: 1}` 作为唯一的参数来初始化它，表示分配一个页面。你最多可以通过这种方式分配两吉字节的内存，但如果设置的值过高，可能会导致错误，因为浏览器可能无法找到足够的连续内存来满足请求。'
- en: '[Listing 2-9](#listing2-9) shows the next variable we need to declare, `importObject`,
    which will be passed into our WebAssembly module when we instantiate it.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 2-9](#listing2-9) 展示了我们需要声明的下一个变量 `importObject`，它将在我们实例化 WebAssembly 模块时传入。'
- en: '**helloworld.js**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**helloworld.js**'
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Listing 2-9: Declaring the `importObject` in JavaScript'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2-9：在 JavaScript 中声明 `importObject`
- en: Inside our `importObject`, we add an object named `env` 1, an abbreviation of
    *environment*, although you can call this object anything you like as long as
    it matches the name inside the WebAssembly import declaration. These are the values
    that will be passed into the WebAssembly module when it’s instantiated. If there
    is any function or value from the embedding environment you want to make available
    to the WebAssembly module, pass them in here. The `env` object contains the memory
    buffer 2 and the starting location 3 of our string within `buffer`. The third
    property in `env` 4 contains our JavaScript function, `print_string`, which our
    WebAssembly module will call as we instructed in [Listing 2-9](#listing2-9). This
    function retrieves the length of the string in our memory buffer and uses it in
    combination with our starting string index to create a string object. The app
    then displays the string object on the command line.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `importObject` 内部，我们添加了一个名为 `env` 1 的对象，它是 *环境*（environment）的缩写，尽管你可以根据自己的喜好命名这个对象，只要它与
    WebAssembly 导入声明中的名称匹配即可。这些是将传递给 WebAssembly 模块的值，当它被实例化时。如果你希望 WebAssembly 模块能够访问嵌入环境中的任何函数或值，可以将它们传递到这里。`env`
    对象包含内存缓冲区 2 和我们字符串在 `buffer` 中的起始位置 3。`env` 中的第三个属性 4 包含我们的 JavaScript 函数 `print_string`，该函数将在
    WebAssembly 模块中被调用，如 [列表 2-9](#listing2-9) 所示。这个函数从我们的内存缓冲区中获取字符串的长度，并结合我们的起始字符串索引来创建一个字符串对象。然后，应用程序将在命令行上显示该字符串对象。
- en: Additionally, we add the IIFE that asynchronously loads our WebAssembly module
    and then calls the `helloworld` function, as shown in [Listing 2-10](#listing2-10).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们添加了一个IIFE，它异步加载我们的WebAssembly模块，然后调用`helloworld`函数，如[示例 2-10](#listing2-10)所示。
- en: '**helloworld.js**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**helloworld.js**'
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Listing 2-10: Instantiating the WebAssembly module in an asynchronous IIFE'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 2-10：在异步IIFE中实例化WebAssembly模块
- en: The first line of the `async` module awaits the `WebAssembly.instantiate` 1
    function call, but unlike the simple addition example from Listing 1-1, we’re
    passing that function the `importObject` we declared earlier. We then pull the
    `helloworld` function out of `obj.instance.exports` using the destructuring syntax
    to set the `hello_world` variable to the `obj.instance.exports` function 2.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`async`模块的第一行等待`WebAssembly.instantiate`函数调用，但与示例1-1中的简单加法示例不同，我们将之前声明的`importObject`传递给该函数。然后，我们使用解构语法从`obj.instance.exports`中提取`helloworld`函数，将`hello_world`变量设置为`obj.instance.exports`中的函数
    2。'
- en: The last line of our IIFE calls the `hello_world` 3 function. We enclose our
    arrow function in parentheses, and then add the function call parentheses to the
    end of our function declaration, which causes this function to execute immediately.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们IIFE的最后一行调用了`hello_world` 3函数。我们将箭头函数括在圆括号中，然后在函数声明的末尾添加函数调用圆括号，这会导致该函数立即执行。
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
