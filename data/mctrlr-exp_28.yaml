- en: '**C  More Privilege Escalation**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**C  更多特权升级**'
- en: '**C.1 Game Boy Advance BIOS**'
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**C.1 Game Boy Advance BIOS**'
- en: Like its predecessor, Nintendo’s Game Boy Advance contains a mask ROM that executes
    at reset to boot a game cartridge after verifying that it contains a valid Nintendo
    logo for trademark protection. In the Game Boy, the ROM would unmap itself just
    before jumping into the game cartridge, but the Game Boy Advance keeps the ROM
    mapped into memory. We call this a *BIOS* because, like the BIOS ROM in an IBM
    PC, this ROM contains convenience functions that are called as interrupts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与其前身Game Boy一样，任天堂的Game Boy Advance包含一个在重置时执行的掩码ROM，用于启动游戏卡带，且会验证卡带是否包含有效的任天堂商标logo以保护商标。在Game
    Boy中，ROM会在跳转到游戏卡带之前取消映射，而Game Boy Advance则保持ROM映射在内存中。我们称之为*BIOS*，因为它像IBM PC中的BIOS
    ROM一样，包含作为中断调用的便捷功能。
- en: Unlike many targets in this book, the attacker has the privilege of running
    arbitrary machine code on the device. This is possible with a simple EEPROM chip
    wired to the right pins of a game catridge, and it was very quickly available
    to hobbyists after Nintendo released the GBA.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书中的许多目标不同，攻击者拥有在设备上运行任意机器码的特权。这是通过一个简单的EEPROM芯片连接到游戏卡带的正确引脚来实现的，在任天堂发布GBA后，爱好者很快就可以使用它。
- en: A dump of the BIOS ROM is useful for emulating the platform, so access restrictions
    are in place. The ROM is disabled whenever an address outside of its range is
    fetched as code, then enabled when an address within its range is fetched as code.
    This happens in hardware at the instant of the access.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: BIOS ROM的转储对于模拟平台非常有用，因此设有访问限制。当从其范围外的地址作为代码读取时，ROM会被禁用；而当从其范围内的地址作为代码读取时，则会重新启用。这一过程是在硬件层面发生的，在访问发生的瞬间。
- en: In this chapter, we’ll see three methods of tricking the Game Boy Advance into
    allowing a read of the BIOS ROM. One abuses a BIOS call that has no source address
    restrictions, one preemptively interrupts a BIOS call to change the source address
    after validation, and the third executes instructions from unmapped memory so
    that the pipeline will unlock ROM for a fetch.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将看到三种方法来欺骗Game Boy Advance允许读取BIOS ROM。其中一种利用了没有源地址限制的BIOS调用，一种预先中断BIOS调用以在验证后更改源地址，第三种通过从未映射的内存执行指令，以使流水线解锁ROM进行读取。
- en: '![Image](../images/f0292-01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0292-01.jpg)'
- en: 'Figure C.1: Nintendo GBA CPU'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图C.1：任天堂GBA CPU
- en: '**MidiKey2Freq Method**'
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**MidiKey2Freq方法**'
- en: Fader (2001) is the classic exploit for dumping the BIOS ROM, recreated in [Figure
    C.3](app03.xhtml#chCfig3). It’s a variant on a classic technique of kernel memory
    exposure in Unix, where a system call fails to validate the source address so
    the caller can peek at memory with the kernel’s privileges.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Fader（2001）是经典的BIOS ROM转储漏洞，如[图C.3](app03.xhtml#chCfig3)所示。它是Unix中经典的内核内存暴露技术的变种，其中一个系统调用未能验证源地址，导致调用者可以在内核权限下查看内存。
- en: '`MidiKey2Freq` is implemented as ROM interrupt `0x1f`. It takes a pointer to
    a MIDI sample, reads four bytes at that address, and performs an audio processing
    function on those four bytes. However this audio function has neither range nor
    alignment restrictions, and it leaves the top byte unchanged. Fader’s exploit
    loops through the ROM address space, grabbing the most significant byte in the
    return value each time.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`MidiKey2Freq`作为ROM中断`0x1f`实现。它接受一个指向MIDI样本的指针，读取该地址的四个字节，并对这四个字节执行音频处理功能。然而，这个音频功能没有范围或对齐限制，并且它保留了最高字节不变。Fader的漏洞通过ROM地址空间进行循环，每次抓取返回值中的最高字节。'
- en: '**Endrift Method**'
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**Endrift方法**'
- en: For a while it was thought that the `MidiKey2Freq` method was the only way to
    dump the BIOS ROM, but that didn’t seem right to Vicki Pfau. In Pfau (2017), she
    presents two different black-box techniques for dumping the BIOS ROM. Both of
    her techniques rely upon the ARM7’s interrupt priorities, triggering a hardware
    interrupt while the software interrupt of the BIOS call is in progress.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 曾一度认为`MidiKey2Freq`方法是唯一的BIOS ROM转储方式，但Vicki Pfau觉得这不对。在Pfau（2017）中，她提出了两种不同的黑盒技术来转储BIOS
    ROM。她的两种技术都依赖于ARM7的中断优先级，在BIOS调用的软中断进行时触发硬件中断。
- en: The nested interrupt can’t directly read the BIOS, but it does have full privileges
    to read and write the call stack of the software interrupt in the BIOS call.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套中断无法直接读取BIOS，但它拥有完全的权限来读取和写入BIOS调用中的软件中断的调用栈。
- en: Vicki’s black-box example registers a timer interrupt to overlap with a software
    interrupt call to `CPUFastSet`. The `CPUFastSet` handler performs fast copies
    within the BIOS address space, but it validates the source address so the caller
    cannot simply export the BIOS with it. While the BIOS software interrupt is running,
    it is itself interrupted by her `bbTest` handler, which then scans the software
    interrupt call stack for the source pointer in the `CPUFastSet` stack frame. Overwriting
    the source pointer with a ROM address before returning then causes the BIOS to
    proceed with an illegal copy, as the source address is only validated at the start
    of the interrupt handler and not repeated for each word.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Vicki 的黑盒示例注册了一个定时器中断，与软件中断调用 `CPUFastSet` 重叠。`CPUFastSet` 处理程序在 BIOS 地址空间内执行快速复制，但它验证源地址，因此调用者不能仅仅用它导出
    BIOS。在 BIOS 软件中断运行时，它会被她的 `bbTest` 处理程序打断，然后扫描软件中断调用栈中的源指针（位于 `CPUFastSet` 的栈帧中）。在返回之前将源指针覆盖为
    ROM 地址，然后会导致 BIOS 执行非法的复制操作，因为源地址只在中断处理程序开始时验证一次，而不是对每个字都重复验证。
- en: '|  `0x00`  | SoftReset |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '|  `0x00`  | SoftReset |'
- en: '| `0x01` | RegisterRamReset |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `0x01` | RegisterRamReset |'
- en: '| `0x02` | Halt |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `0x02` | Halt |'
- en: '| `0x03` | Stop |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `0x03` | Stop |'
- en: '| `0x04` | IntrWait |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `0x04` | IntrWait |'
- en: '| `0x05` | VBlankIntrWait |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `0x05` | VBlankIntrWait |'
- en: '| `0x06` | Div |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `0x06` | Div |'
- en: '| `0x07` | DivArm |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `0x07` | DivArm |'
- en: '| `0x08` | Sqrt |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `0x08` | Sqrt |'
- en: '| `0x09` | ArcTan |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `0x09` | ArcTan |'
- en: '| `0x0A` | ArcTan2 |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `0x0A` | ArcTan2 |'
- en: '| `0x0B` | CPUSet |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `0x0B` | CPUSet |'
- en: '| `0x0C` | **CPUFastSet** |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `0x0C` | **CPUFastSet** |'
- en: '| `0x0D` | BiosChecksum |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `0x0D` | BiosChecksum |'
- en: '| `0x0E` | BgAffineSet |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `0x0E` | BgAffineSet |'
- en: '| `0x0F` | ObjAffineSet |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `0x0F` | ObjAffineSet |'
- en: '| `0x10` | BitUnpack |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `0x10` | BitUnpack |'
- en: '| `0x11` | LZ77UnCompWRAM |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `0x11` | LZ77UnCompWRAM |'
- en: '| `0x12` | LZ77UnCompVRAM |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `0x12` | LZ77UnCompVRAM |'
- en: '| `0x13` | HuffUnComp |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `0x13` | HuffUnComp |'
- en: '| `0x14` | RLUnCompWRAM |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `0x14` | RLUnCompWRAM |'
- en: '| `0x15` | RLUnCompVRAM |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `0x15` | RLUnCompVRAM |'
- en: '| `0x16` | Diff8bitUnFilterWRAM |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `0x16` | Diff8bitUnFilterWRAM |'
- en: '| `0x17` | Diff8bitUnFilterVRAM |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `0x17` | Diff8bitUnFilterVRAM |'
- en: '| `0x18` | Diff16bitUnFilter |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `0x18` | Diff16bitUnFilter |'
- en: '| `0x19` | SoundBiasChange |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `0x19` | SoundBiasChange |'
- en: '| `0x1A` | SoundDriverInit |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `0x1A` | SoundDriverInit |'
- en: '| `0x1B` | SoundDriverMode |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `0x1B` | SoundDriverMode |'
- en: '| `0x1C` | SoundDriverMain |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `0x1C` | SoundDriverMain |'
- en: '| `0x1D` | SoundDriverVSync |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `0x1D` | SoundDriverVSync |'
- en: '| `0x1E` | SoundChannelClear |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `0x1E` | SoundChannelClear |'
- en: '| `0x1F` | **MIDIKey2Freq** |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `0x1F` | **MIDIKey2Freq** |'
- en: '| `0x20` | MusicPlayerOpen |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `0x20` | MusicPlayerOpen |'
- en: '| `0x21` | MusicPlayerStart |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `0x21` | MusicPlayerStart |'
- en: '| `0x22` | MusicPlayerStop |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `0x22` | MusicPlayerStop |'
- en: '| `0x23` | MusicPlayerContinue |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `0x23` | MusicPlayerContinue |'
- en: '| `0x24` | MusicPlayerFadeOut |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `0x24` | MusicPlayerFadeOut |'
- en: '| `0x25` | MultiBoot |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `0x25` | MultiBoot |'
- en: '| `0x26` | HardReset |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `0x26` | HardReset |'
- en: '| `0x27` | CustomHalt |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `0x27` | CustomHalt |'
- en: '| `0x28` | SoundDriverVSyncOff |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `0x28` | SoundDriverVSyncOff |'
- en: '| `0x29` | SoundDriverVSyncOn |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `0x29` | SoundDriverVSyncOn |'
- en: '| `0x2A` | SoundGetJumpList |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `0x2A` | SoundGetJumpList |'
- en: 'Table C.1: Game Boy Advance BIOS Interrupts'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 表 C.1：Game Boy Advance BIOS 中断
- en: '![Image](../images/f0295-01.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0295-01.jpg)'
- en: 'Figure C.2: Game Boy Advance Memory Map'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 C.2：Game Boy Advance 内存映射
- en: '![Image](../images/f0295-02.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0295-02.jpg)'
- en: 'Figure C.3: MidiKey2Freq ROM Dumper from Fader (2001)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 C.3：来自 Fader（2001）的 MidiKey2Freq ROM 转储器
- en: '![Image](../images/f0296-01.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0296-01.jpg)'
- en: 'Figure C.4: Optimized GBA BIOS Dumper from Pfau (2017)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 C.4：来自 Pfau（2017）的优化 GBA BIOS 转储器
- en: '![Image](../images/f0296-02.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0296-02.jpg)'
- en: 'Figure C.5: BIOS Peek Function from Hearn (2017)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 C.5：来自 Hearn（2017）的 BIOS Peek 功能
- en: The black box method is particularly nice because it doesn’t require the author
    to already have a copy of the BIOS and the timing calibration does not need to
    be particularly accurate. Vicki also presents an optimized implementation that
    simply makes a `bx` call directly into the middle of the `CPUFastSet`, as BIOS
    entry points are unenforced and that code may always read from the BIOS. See [Figure
    C.4](app03.xhtml#chCfig4).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 黑盒方法特别好，因为它不要求作者已经拥有一份 BIOS，并且时序校准不需要特别精确。Vicki 还提供了一个优化实现，直接在 `CPUFastSet`
    中间进行 `bx` 调用，因为 BIOS 入口点不强制执行，并且那段代码始终可以从 BIOS 中读取。请参见 [图 C.4](app03.xhtml#chCfig4)。
- en: '**Executing Missing Memory**'
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**执行缺失的内存**'
- en: While Fader rather directly uses a BIOS call to leak memory and Pfau reuses
    pieces of BIOS code by either faking a stack or modifying the real one in a nested
    interrupt, Hearn (2017) goes to the absolute extreme of sophistication. She manages
    to execute code from unmapped memory at the far end of the address space, so a
    prefetched instruction from the beginning of memory unlocks the BIOS before being
    flushed out of the pipeline. I shit you not!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Fader直接使用BIOS调用来泄漏内存，Pfau则通过伪造栈或在嵌套中断中修改真实栈来重用BIOS代码，Hearn（2017）则达到了极致的复杂性。她设法在地址空间的最远端执行来自未映射内存的代码，因此，来自内存起始位置的预取指令在从流水线中被丢弃之前解锁了BIOS。我不是在开玩笑！
- en: 'Thinking back to your undergrad computer science days, a Nineties RISC chip
    like the ARM7TDMI uses a pipelined architecture. This particular example has three
    pipeline stages: fetch, decode, and execute. At the same time that the CPU is
    executing an instruction, it is decoding the next instruction and fetching the
    instruction after that. When the fetched and decoded instructions aren’t worthwhile,
    they are simply flushed away.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 回想起你本科时的计算机科学课程，像 ARM7TDMI 这样的90年代RISC芯片采用了流水线架构。这个具体的例子有三个流水线阶段：取指、解码和执行。在CPU执行指令的同时，它会解码下一条指令并取出下一条指令。如果取出的和解码的指令没有价值，它们会被直接丢弃。
- en: The CPU communicates with its peripherals, such as memories and I/O, over a
    bus. On ARM7TDMI, there is a curious effect that the data lines of this bus hold
    their last value, returning it whenever an unmapped address is fetched.^([1](footnotes.xhtml#app3fn1))
    If you read `0xdead-beef` from anywhere, or if you write it anywhere, and then
    read from an unused address like `0x10000000` or `0x4bidb10c` without any other
    bus access in between, you will read back `0xdeadbeef`. This is a quirk of the
    architecture, and many others will trigger a fault or return a different value.^([2](footnotes.xhtml#app3fn2))
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: CPU通过总线与外设进行通信，如内存和I/O。在ARM7TDMI上，有一个有趣的现象：该总线的数据线保持它们的最后一个值，每当一个未映射的地址被取出时，它会返回这个值。^([1](footnotes.xhtml#app3fn1))
    如果你从任何地方读取`0xdead-beef`，或者将其写入任何地方，然后再从一个未使用的地址读取，比如`0x10000000`或`0x4bidb10c`，且两次读取之间没有其他总线访问，你将会读取到`0xdeadbeef`。这是架构的一个特性，许多其他情况下会触发故障或返回不同的值。^([2](footnotes.xhtml#app3fn2))
- en: Combining these observations, Hearn realized that if she could write two Thumb
    instructions as single 32-bit word to anywhere, then jump to them at `0xfffffffd`,
    the first instruction might execute just after the BIOS ROM’s first instruction
    at `0x0000-0000` is fetched, unlocking the ROM. The few lines of Thumb assembly
    in [Figure C.5](app03.xhtml#chCfig5) accomplish this, and they are an absolute
    work of art.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 结合这些观察，Hearn意识到，如果她能够将两条Thumb指令写成单个32位字并跳转到`0xfffffffd`，那么第一条指令可能会在ROM的第一条指令（从`0x0000-0000`取出）执行之后执行，从而解锁ROM。图[Figure
    C.5](app03.xhtml#chCfig5)中的几行Thumb汇编完成了这一点，它们简直是一件艺术品。
- en: In reading the code, don’t forget how Thumb addressing works. `0xfffffffd` is
    odd to imply Thumb mode, but the 16-bit instruction is fetched from `0xfffffffc`.
    32 bits are fetched at a time, and there will be no separate fetch for the second
    instruction.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读代码时，别忘了Thumb寻址是如何工作的。`0xfffffffd`表示Thumb模式，但16位指令是从`0xfffffffc`取出的。每次取出的都是32位数据，第二条指令不会单独取出。
- en: Line 7 writes her instruction pair to the end of memory and Line 8 jumps to
    execute it at the end of memory. The `ldr` instruction reads whatever BIOS address
    is given as a parameter right back into the return value, and the `bx lr` instruction
    returns back to the caller. “But wait,” you might ask, “how is the first instruction
    able to read from the BIOS ROM if we haven’t yet executed anything from the ROM?”
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 第7行将她的指令对写入内存末尾，第8行则跳转到内存末尾执行它。`ldr`指令会将作为参数给定的任何BIOS地址读取到返回值中，而`bx lr`指令则返回给调用者。“等一下，”你可能会问，“如果我们还没有从ROM中执行任何指令，第一条指令怎么能够读取BIOS
    ROM呢？”
- en: The CPU pipeline is the answer. Before the `ldr` instruction loads a word from
    the ROM, the pipeline will have already fetched a 32-bit word from `0x00000000`
    for decoding and eventually execution. This unlocks the ROM for a data fetch,
    and it doesn’t matter that these pipelined instructions will be flushed away with
    the `bx` instruction that comes next.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: CPU流水线就是答案。在`ldr`指令从ROM加载一个字之前，流水线已经从`0x00000000`取出一个32位的字进行解码，最终准备执行。这为数据提取解锁了ROM，且即使这些流水线指令会在接下来的`bx`指令中被丢弃，也无关紧要。
- en: '**C.2 MSP432 IP Encapsulation**'
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**C.2 MSP432 IP 封装**'
- en: IP Encapsulation (IPE) is a feature of some MSP430 and MSP432 devices from Texas
    Instruments that serves roughly the same purpose as TrustZone-M or other trusted
    execution environments (TEE). The idea is that you might purchase a microcontroller
    with a radio library, and you would be able to *use* the library but not *read*
    the library for reverse engineering or cloning.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: IP封装（IPE）是德州仪器部分MSP430和MSP432设备的一个特性，目的大致与TrustZone-M或其他可信执行环境（TEE）相同。其思想是，你可能会购买一个带有无线电库的微控制器，你可以*使用*这个库，但不能*读取*这个库来进行逆向工程或克隆。
- en: Like other privilege escalation exploits in this chapter, the defender is at
    a distinct disadvantage. The attacker is able to run native code, to attach a
    debugger, and to apply fault injection. The defender merely hopes that TI’s restrictions
    are sufficient to prevent extraction of protected libraries.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 就像本章其他特权升级漏洞一样，防御方处于明显的不利位置。攻击者能够运行本地代码，附加调试器，并进行故障注入。防御方只能希望TI的限制足以防止提取受保护的库。
- en: 'Sah and Hicks (2023) describe this feature in depth, along with some design
    mistakes that expose the encapsulated firmware. Two facts in particular are important
    for exploitation: first, the IPE feature does nothing to enforce specific entry
    points into the protected code, allowing gadgets to be reused when called from
    user program memory. Second, the IPE feature does nothing to disable the majority
    of interrupt sources, and timer interrupts are particularly useful for getting
    execution in the middle of the encapsulation library so that the attacker code
    can learn things about the library.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Sah和Hicks（2023）详细描述了这个特性，并指出了一些设计错误，这些错误暴露了封装的固件。有两个事实对于利用这一漏洞特别重要：首先，IPE特性并未强制执行进入受保护代码的特定入口点，因此当从用户程序内存调用时，gadget可以被重用。其次，IPE特性并未禁用大部分中断源，尤其是定时器中断，它们在攻击者代码中非常有用，能够让攻击者在封装库中间执行代码，从而获得有关库的信息。
- en: Exploitation details vary between the 16-bit MSP430 architecture and the 32-bit
    ARM architecture used by the MSP432\. In either case, a timer with a very small
    count is used to trigger an exception inside the protected library, then the exception
    handler in the unprotected application observes the register states to make informed
    guesses about the state of the code.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 利用细节在16位的MSP430架构和32位的MSP432架构之间有所不同。在这两种情况下，都使用一个非常小的计时器来触发受保护库内的异常，然后非保护应用程序中的异常处理程序观察寄存器状态，以便做出关于代码状态的合理猜测。
- en: For example, if the handler observes that some extra return pointers have been
    pushed to the stack, those pointers will reveal the locations of `call` instructions
    on MSP430 or `bl`/`blx` instructions on MSP432\. Similarly, the attacker can locate
    `ret` instructions by calling them after setting the link register on ARM or loading
    a return pointer to the stack in MSP430.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果处理程序观察到某些额外的返回指针被压入栈中，这些指针将揭示MSP430上的`call`指令或MSP432上的`bl`/`blx`指令的位置。类似地，攻击者可以通过在ARM上调用这些指令并设置链接寄存器，或者在MSP430中加载返回指针到栈来定位`ret`指令。
- en: Eventually, the attacker will discover a gadget that will read an arbitrary
    address into a register. Maybe the gadget returns afterward, in which case no
    timer is necessary. Maybe it does not return, in which case the timer’s countdown
    can be used to repeatedly call into this gadget and then bounce out again. Either
    way, repeated usage of the gadget can extract all protected memory.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，攻击者会发现一个gadget，它能够将任意地址读取到寄存器中。也许gadget会返回，在这种情况下就不需要定时器。也许它不返回，在这种情况下可以使用定时器的倒计时来反复调用这个gadget，然后跳出。无论是哪种情况，重复使用gadget可以提取所有受保护的内存。
- en: '**C.3 BCM11123 U-Boot and TrustZone**'
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**C.3 BCM11123 U-Boot和TrustZone**'
- en: Cisco’s model 8861 IP Phone uses a Broadcom BCM11123 CPU with TrustZone. A TrustZone
    chip has two modes, with *secure* code having privileges that the *non-secure*
    code lacks. It’s not that the non-secure code is exploitable, so much as that
    it is not trusted. Communication between the two modes takes the form of interrupt
    handlers, much like system calls from userland to a kernel.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Cisco的8861型号IP电话使用了带有TrustZone的Broadcom BCM11123 CPU。TrustZone芯片有两种模式，*安全*代码拥有*非安全*代码所不具备的特权。并不是说非安全代码易被利用，而是它不被信任。两种模式之间的通信通过中断处理程序进行，类似于用户空间到内核的系统调用。
- en: In the case of this phone, U-Boot runs in non-secure memory, making API calls
    to a TrustZone monitor in order to validate and launch a Linux kernel. Cui and
    Housley (2017) is largely about EMFI attacks, but that paper’s appendix describes
    a nifty attack against this arrangement.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这款手机的情况下，U-Boot 在非安全内存中运行，通过调用 TrustZone 监控程序来验证并启动 Linux 内核。Cui 和 Housley
    (2017) 主要讲述 EMFI 攻击，但该论文的附录描述了一种针对这种配置的巧妙攻击。
- en: '![Image](../images/f0301-01.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0301-01.jpg)'
- en: 'Figure C.6: Cui and Housely’s Exploit for the BCM11123'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '图 C.6: Cui 和 Housely 针对 BCM11123 的漏洞利用'
- en: The authors began by faulting the phone’s NAND flash during boot, in order to
    drop into U-Boot’s command line, much like the ROM bootloader of the Freescale
    MC13224 in [Chapter 14](ch14.xhtml#ch14). This bootloader has handy commands for
    reading, writing, and executing memory, but because it’s in the non-secure world,
    that’s not enough to dump or control the secure side of the chip in Trust-Zone.
    The game is then to find a vulnerability in the TrustZone monitor and to exploit
    it from U-Boot.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 作者们首先在启动时故意破坏手机的 NAND 闪存，以便进入 U-Boot 的命令行，这就像在 [第14章](ch14.xhtml#ch14) 中提到的
    Freescale MC13224 的 ROM 启动加载程序一样。这个启动加载程序提供了读取、写入和执行内存的便捷命令，但由于它位于非安全区，因此不足以转储或控制
    TrustZone 中的安全区域。接下来的任务是找到 TrustZone 监控程序中的漏洞，并从 U-Boot 中利用它。
- en: The bug in question is in the `_ssapi_public_decrypt` function, which lacks
    a necessary length check and fails to ensure that the source and destination addresses
    are on the appropriate sides of the TrustZone barrier. By carefully choosing the
    right parameters, Cui and Housley were able to copy small chunks out of the secure
    world into non-secured memory accessible by U-Boot, for reverse engineering and
    dumping.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 涉及的漏洞位于 `_ssapi_public_decrypt` 函数中，该函数缺少必要的长度检查，并未确保源地址和目标地址位于 TrustZone 障碍的适当一侧。通过精心选择正确的参数，Cui
    和 Housley 成功地将小块数据从安全区复制到 U-Boot 可以访问的非安全内存中，进行反向工程和转储。
- en: They then used the same bug in the opposite direction, clobbering a return pointer
    in the secure world and promote U-Boot itself to run within the TrustZone.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 他们随后利用同样的漏洞反向操作，覆盖了安全区中的返回指针，并将 U-Boot 本身提升到 TrustZone 内运行。
- en: '**C.4 LPC55S69 Hardware and Software**'
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**C.4 LPC55S69 硬件和软件**'
- en: The LPC55 series of microcontrollers use the ARM Cortex-M architecture, with
    TrustZone-M as a means to protect key material such as a secret key unique to
    each device from the user programmed application. Ideally, this would let a board
    designer install software on the chip that uses this key material, but even a
    serious bug in that application software would not allow an attacker to control
    the trusted zone, its software, or its keys.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: LPC55 系列微控制器采用 ARM Cortex-M 架构，并通过 TrustZone-M 来保护密钥材料，例如每个设备唯一的密钥，免受用户编程应用程序的影响。理想情况下，这将使板设计者能够在芯片上安装使用该密钥材料的软件，但即便该应用程序软件存在严重漏洞，攻击者也无法控制受信任区域、其软件或其密钥。
- en: Some Cortex-M devices include a Flash Patch and Breakpoint (FPB) unit, which
    allows a few words of memory to be patched, overriding their real value with a
    chosen one. In devices like the LPC55 that support TrustZone-M, that IP block
    is explicitly prohibited by ARM for fear that in remapping the address space,
    the TrustZone-M protections might be invalidated.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 Cortex-M 设备包括一个闪存补丁和断点（FPB）单元，它允许对内存中的几个字进行修补，用选择的值覆盖其真实值。在像 LPC55 这样支持 TrustZone-M
    的设备中，ARM 明确禁止该 IP 模块，以防在重新映射地址空间时，TrustZone-M 保护可能被失效。
- en: While reverse engineering an application for the LPC55S69, Laura Abbott discovered
    that there is a custom module much like the forbidden FPB unit, allowing for small
    patches to a few 32-bit words at any address in memory, including words of the
    ROM. She documents that module in Abbott (2021), along with a way to use it to
    fake the signature verification of ROM patches, allowing malicious ones to be
    installed that will persist to the next boot.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在为 LPC55S69 反向工程一个应用程序时，Laura Abbott 发现存在一个自定义模块，类似于被禁用的 FPB 单元，可以对内存中任何地址的几个
    32 位字进行小规模修补，包括 ROM 中的字。她在 Abbott (2021) 中记录了该模块，并描述了如何利用它伪造 ROM 补丁的签名验证，从而允许恶意补丁被安装并在下次启动时继续存在。
- en: The module exists as an APB peripheral at `0x4003e000` in non-secure memory
    and `0x5003e000` in secure memory, a region missing from the memory map in the
    LPC55S6x user manual. Because it exists in both privileged and unprivileged modes,
    unprivileged code can use it to patch the privileged ROM code’s behavior as a
    form of privilege escalation!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块作为APB外设存在于`0x4003e000`的非安全内存和`0x5003e000`的安全内存中，这一地区在LPC55S6x用户手册的内存映射中缺失。由于它存在于特权模式和非特权模式下，因此非特权代码可以利用它对特权ROM代码的行为进行修补，从而实现特权升级！
- en: '![Image](../images/f0303-01.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0303-01.jpg)'
- en: 'Figure C.7: LPC55S69'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '图 C.7: LPC55S69'
- en: This patch module’s configuration is wiped at reset, but what if an attacker
    wanted a patch to be persistent, such as to disable secure boot authentication?
    Abbot describes a table of patch entries in a protected flash memory region with
    the following structure. The three supported commands include single-word changes,
    an `svc` entry point change, and a patch to SRAM.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 该补丁模块的配置会在重置时被清除，但如果攻击者希望补丁能够持续存在，比如禁用安全启动认证，怎么办呢？Abbot描述了一个受保护的闪存区域中的补丁条目表，其结构如下。三种支持的命令包括单字更改、`svc`入口点更改和对SRAM的补丁。
- en: '![Image](../images/f0304-01.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0304-01.jpg)'
- en: In addition to the undocumented patching module, there is a second software
    vulnerability for escalation into the secure world. A software vulnerability in
    the parsing of firmware update headers, described in Abbott (2022), allows for
    privilege escalation from the non-secure world and persistent control past the
    next reset.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 除了未记录的补丁模块外，还有第二个软件漏洞可用于提升权限进入安全世界。Abbott（2022）中描述了固件更新头部解析中的软件漏洞，它允许从非安全世界进行特权升级，并在下次重置后持续控制。
- en: The bug is in the header structure, shown in [Figure C.8](app03.xhtml#chCfig8).
    By design, `m_keyBlobBlock` ought to be the block number that is just after the
    header. Each block is 16 bytes, so block 8 would be just after the 128-byte header.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 错误位于头部结构中，如[图 C.8](app03.xhtml#chCfig8)所示。按设计，`m_keyBlobBlock` 应该是紧接着头部之后的块号。每个块为16字节，因此第8块应该紧随128字节的头部之后。
- en: Instead of the secure boot parser copying just the header, it continues copying
    blocks until it counts up to `m_keyBlobBlock`. When the number is larger than
    8, this copying becomes a classic buffer overflow.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 安全启动解析器不是仅仅复制头部，而是继续复制数据块，直到计数到`m_keyBlobBlock`。当这个数字大于8时，这种复制就会成为典型的缓冲区溢出。
- en: See also [Chapter A.3](app01.xhtml#app01_3) for a buffer over-read in the bootloader’s
    USB stack and [Chapter E.2](app05.xhtml#app05_2) for a set of glitching attacks
    against the chip.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[第A.3章](app01.xhtml#app01_3)，了解引导加载程序USB堆栈中的缓冲区过度读取问题，以及[第E.2章](app05.xhtml#app05_2)，了解针对芯片的故障攻击集。
- en: '![Image](../images/f0305-01.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0305-01.jpg)'
- en: 'Figure C.8: LPC55 SB2 Update Header'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '图 C.8: LPC55 SB2 更新头部'
- en: '**C.5 FM3 Flash Patching**'
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**C.5 FM3 闪存补丁**'
- en: Infineon’s FM3 series of Cortex M3 microcontrollers is used in at least some
    models of Sony’s Dualshock4 controller for the Playstation 4\. Enthusiast (2018)
    describes a flash patch and breakpoint (FPB) trick, somewhat similar to those
    in [Chapters 17](ch17.xhtml#ch17) and [C.4](app03.xhtml#app03_4), that allows
    flash memory to be extracted by persisting patches across a reset.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 英飞凌的FM3系列Cortex M3微控制器至少在索尼的Playstation 4 Dualshock4控制器的某些型号中被使用。Enthusiast（2018）描述了一种闪存补丁和断点（FPB）技巧，类似于[第17章](ch17.xhtml#ch17)和[C.4章](app03.xhtml#app03_4)中的方法，这种技巧可以通过在重置后持续补丁来提取闪存。
- en: The chip has boot mode pins, labeled as `MD`, that are sensed at reset to execute
    either an application from flash memory or a serial bootloader from ROM. USBDirect
    is the manufacturer’s programming tool, and it operates by loading a blob of native
    code into SRAM. An open source replacement for this blob is available, and by
    patching it, you can freely play around with the programming environment.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 该芯片具有启动模式引脚，标记为`MD`，在复位时会读取这些引脚以执行来自闪存的应用程序或来自ROM的串行引导加载程序。USBDirect是制造商的编程工具，其通过将本地代码块加载到SRAM中来操作。该代码块的开源替代方案已发布，通过对其打补丁，您可以自由地调整编程环境。
- en: That’s a nice and easy start, but the code runs in a restricted environment
    with access to flash memory disabled until a mass erase is performed. Any attempt
    to read from flash memory simply returns garbage data, and this also applies to
    tricky read methods like a DMA transfer.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个不错且简单的开始，但代码运行在受限的环境中，直到进行全擦除之前无法访问闪存。任何尝试从闪存读取数据的行为都会返回垃圾数据，这也适用于像DMA传输这样的复杂读取方法。
- en: With more experimentation, the author found that SRAM persists across resets.
    As we saw in [Chapter 2](ch02.xhtml#ch02), this is a great way to leave shellcode
    around for a subsequent attack.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更多的实验，作者发现SRAM在重置后仍然保持数据。正如我们在[第2章](ch02.xhtml#ch02)中看到的，这是一种很好的方法，可以在后续攻击中留下shellcode。
- en: Knowing that SRAM was not reset, the author looked into other peripheral devices,
    eventually finding the FPB unit. The FPB holds six pairs of addresses, remapping
    a code fetch from the first address into a fetch for the second address. This
    module’s configuration is also not cleared at reset!
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 了解到SRAM没有被重置后，作者开始查看其他外设，最终找到了FPB单元。FPB保存了六对地址，将从第一个地址获取的代码映射到第二个地址的获取。这一模块的配置在重置时也不会被清除！
- en: The final exploit consists of an SRAM blob for the serial boot-loader that enables
    the FPB, using it to patch the user application in flash memory to re-enter the
    serial bootloader. At that point, the normal SRAM blob can be presented. Because
    the device booted from flash memory, read restrictions are not enabled and this
    blob can dump all flash memory. Mass erasing and rewriting that firmware then
    unlocks the target, much as we saw in [Chapter 17](ch17.xhtml#ch17) except with
    no requirement for a voltage glitch at reset.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的攻击利用包括一个用于串行引导加载程序的SRAM数据块，该数据块启用了FPB，通过它修补闪存中的用户应用程序，以重新进入串行引导加载程序。此时，可以呈现正常的SRAM数据块。由于设备是从闪存启动的，读取限制没有启用，因此这个数据块可以导出所有闪存。大规模擦除并重写固件后，便能解锁目标，就像我们在[第17章](ch17.xhtml#ch17)中看到的一样，只是这次不需要在重置时引发电压故障。
