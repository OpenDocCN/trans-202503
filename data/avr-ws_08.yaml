- en: '[8](nsp-boxall502581-0008.xhtml#rch08)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[8](nsp-boxall502581-0008.xhtml#rch08)'
- en: Controlling Motors with Mosfets
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 MOSFET 控制电机
- en: '![](images/nsp-boxall502581-ct.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-boxall502581-ct.jpg)'
- en: 'AVRs cannot directly control motors. In order to enable this, we need to use
    external components: *metal-oxide-semiconductor field-effect transistors (MOSFETs)*
    , transistors that can switch or amplify voltages in circuits.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: AVR 无法直接控制电机。为了实现这一点，我们需要使用外部元件：*金属氧化物半导体场效应晶体管（MOSFET）*，这是一种能够在电路中切换或放大电压的晶体管。
- en: 'In this chapter, you’ll learn how to:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何：
- en: • Use PWM with MOSFETs to control DC motors.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 使用 PWM 和 MOSFET 控制直流电机。
- en: • Use MOSFETs to control larger currents.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 使用 MOSFET 控制较大的电流。
- en: • Use motor driver ICs to interface larger motors with your AVR microcontrollers.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 使用电机驱动 IC 将较大的电机与 AVR 微控制器连接。
- en: Along the way, you’ll build a temperature-controlled fan and a two-wheel-drive
    robot vehicle, building on prior knowledge to complete more interesting and complex
    projects. By the end of the chapter, you’ll have the skills to begin using MOSFETs
    in your own projects both for fun and for more serious applications, such as robotics,
    automation, or toys.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，你将制作一个温控风扇和一个两轮驱动的机器人车辆，基于之前的知识完成更有趣和复杂的项目。到本章结束时，你将掌握将 MOSFET 应用于你自己的项目的技能，无论是为了娱乐还是更严肃的应用，如机器人技术、自动化或玩具。
- en: '[The MOSFET](nsp-boxall502581-0008.xhtml#rah1001)'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[MOSFET](nsp-boxall502581-0008.xhtml#rah1001)'
- en: We use MOSFETs when we need to control large currents and voltage using a small
    signal, such as that from a microcontroller’s digital output pin. MOSFETs are
    available in various sizes, such as those shown in [Figure 8-1](nsp-boxall502581-0018.xhtml#f08001)
    , to match different projects’ requirements.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要使用小信号（例如来自微控制器数字输出引脚的信号）控制较大电流和电压时，我们使用 MOSFET。MOSFET 有多种不同的尺寸，例如在[图 8-1](nsp-boxall502581-0018.xhtml#f08001)中所示，以适应不同项目的需求。
- en: '![Photo of four different MOSFETs](images/nsp-boxall502581-f08001.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![四种不同 MOSFET 的照片](images/nsp-boxall502581-f08001.jpg)'
- en: 'Figure 8-1 : Various MOSFETs'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-1：各种 MOSFET
- en: We will be using the small 2N7000 version shown at the bottom left in [Figure
    8-1](nsp-boxall502581-0018.xhtml#f08001) , which has three leads. When you’re
    looking at the front of the 2N7000—the flat-faced side—the pins are, from left
    to right, the source, gate, and drain pins (I’ll explain their functions momentarily).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用[图 8-1](nsp-boxall502581-0018.xhtml#f08001)左下角所示的小型 2N7000 版本，它有三个引脚。当你面对
    2N7000 的平面面时，从左到右分别是源极、门极和漏极引脚（我稍后会解释它们的功能）。
- en: '[Figure 8-2](nsp-boxall502581-0018.xhtml#f08002) shows the schematic symbol
    for the 2N7000 MOSFET.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 8-2](nsp-boxall502581-0018.xhtml#f08002) 显示了 2N7000 MOSFET 的电路符号。'
- en: '![Schematic symbol for the 2N7000 MOSFET](images/nsp-boxall502581-f08002.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![2N7000 MOSFET 的电路符号](images/nsp-boxall502581-f08002.jpg)'
- en: 'Figure 8-2 : Schematic symbol for 2N7000 MOSFET'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-2：2N7000 MOSFET 的电路符号
- en: It’s easy to operate a MOSFET. When you apply a small current to the gate pin,
    a large current can flow in through the drain pin and out through the source pin.
    You can also connect a PWM signal to the gate pin of a MOSFET, allowing you to
    control lights, motors, and more in various ways. That’s what we’ll focus on in
    this chapter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 操作 MOSFET 很容易。当你向门极引脚施加小电流时，大电流可以从漏极引脚流入并从源极引脚流出。你还可以将 PWM 信号连接到 MOSFET 的门极引脚，从而以不同方式控制灯光、电机等。这正是我们在本章中要关注的内容。
- en: Our 2N7000 MOSFET can handle up to 60 V DC at 200 mA continuously, or 500 mA
    in bursts. When choosing a MOSFET for your projects, be sure to check the voltage
    and current maximums against the signal you want to switch.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 2N7000 MOSFET 可以持续承受最高 60 V DC 电压，200 mA 电流，或 500 mA 的脉冲电流。在为你的项目选择 MOSFET
    时，务必检查其最大电压和电流是否适配你要切换的信号。
- en: We connect a 10 kΩ resistor between the MOSFET’s gate and the source pin every
    time we use a MOSFET, as you’ll see in the following project. This acts to keep
    the gate switched off when a current is not applied to it, in the same way a resistor
    pulls down a button, as shown in [Chapter 3](nsp-boxall502581-0013.xhtml#ch03)
    ; it stops the MOSFET from turning slightly on or off at random.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每次使用 MOSFET 时，我们都会在 MOSFET 的门极和源极引脚之间连接一个 10 kΩ 电阻，正如你在接下来的项目中看到的那样。这个电阻可以确保当没有电流施加到门极时，门极保持关闭状态，类似于电阻拉低按钮，如[第
    3 章](nsp-boxall502581-0013.xhtml#ch03)所示；它可以防止 MOSFET 随机地轻微开关。
- en: '[Project 34: DC Motor Control with PWM and MOSFET](nsp-boxall502581-0008.xhtml#rpro34)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目 34：使用 PWM 和 MOSFET 控制直流电机](nsp-boxall502581-0008.xhtml#rpro34)'
- en: This project demonstrates how to control a small DC motor using PWM and a MOSFET.
    As the microcontroller cannot provide enough current for the motor on its own,
    we use an external power supply and a MOSFET to handle the motor’s requirements.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目展示了如何使用PWM和MOSFET控制一个小型直流电机。由于微控制器本身无法为电机提供足够的电流，因此我们使用外部电源和MOSFET来处理电机的需求。
- en: '[The Hardware](nsp-boxall502581-0008.xhtml#rbh1001)'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[硬件](nsp-boxall502581-0008.xhtml#rbh1001)'
- en: 'For this project, you’ll need the following hardware:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，你需要以下硬件：
- en: • USBasp programmer
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • USBasp 编程器
- en: • Solderless breadboard
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 无焊接面包板
- en: • ATmega328P-PU microcontroller
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • ATmega328P-PU微控制器
- en: • Jumper wires
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 跳线
- en: • Small DC motor and matching power
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 小型直流电机和匹配电源
- en: • 2N7000 MOSFET
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 2N7000 MOSFET
- en: • 10 kΩ resistor
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 10 kΩ电阻
- en: A small DC motor model like the one shown in [Figure 8-3](nsp-boxall502581-0018.xhtml#f08003)
    with a maximum of 12 V DC will suffice.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 像[图8-3](nsp-boxall502581-0018.xhtml#f08003)中展示的那种小型直流电机，最大支持12V直流电压，足以满足需求。
- en: '![Photo of a small DC motor](images/nsp-boxall502581-f08003.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![小型直流电机的照片](images/nsp-boxall502581-f08003.jpg)'
- en: 'Figure 8-3 : Small DC motor'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-3：小型直流电机
- en: You will also need external power, such as a battery pack that holds several
    AA cells. A 6 AA cell pack like the one shown in [Figure 8-4](nsp-boxall502581-0018.xhtml#f08004)
    will provide up to 9 V DC, enough power to run a 12 V DC motor nicely.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要外部电源，比如一个包含多个AA电池的电池组。像[图8-4](nsp-boxall502581-0018.xhtml#f08004)中展示的6个AA电池组，提供最多9V直流电压，足以顺利驱动12V直流电机。
- en: '![Photo of six AA cells in a battery holder for a 9 V supply](images/nsp-boxall502581-f08004.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![九伏电池组的六个AA电池照片](images/nsp-boxall502581-f08004.jpg)'
- en: 'Figure 8-4 : AA battery pack'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-4：AA电池组
- en: Assemble the circuit as shown in [Figure 8-5](nsp-boxall502581-0018.xhtml#f08005)
    . Note that the black/negative lead from the battery pack will be connected to
    GND.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图8-5](nsp-boxall502581-0018.xhtml#f08005)中的示意图组装电路。注意，电池组的黑色/负极引线应连接到GND。
- en: '![Schematic diagram for Project 34](images/nsp-boxall502581-f08005.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![项目34的电路图](images/nsp-boxall502581-f08005.jpg)'
- en: 'Figure 8-5 : Schematic for [Project 34](nsp-boxall502581-0018.xhtml#pro34)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-5：项目[34](nsp-boxall502581-0018.xhtml#pro34)的电路图
- en: Don’t disassemble the circuit once you’ve finished using it, as you will use
    it as part of the circuit in the [following project](nsp-boxall502581-0018.xhtml#pro35)
    .
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 完成使用后，不要拆卸电路，因为你将在[下一个项目](nsp-boxall502581-0018.xhtml#pro35)中继续使用该电路的一部分。
- en: '[The Code](nsp-boxall502581-0008.xhtml#rbh1002)'
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[代码](nsp-boxall502581-0008.xhtml#rbh1002)'
- en: Open a terminal window, navigate to the *Project 34* subfolder of this book’s
    *Chapter 8* folder, and enter the command `make flash` . The DC motor should start
    from 0, increase speed to a complete on state, then reduce speed back to a complete
    off state, then repeat the procedure.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端窗口，导航到本书*第8章*文件夹中的*项目34*子文件夹，并输入命令`make flash`。直流电机应从0开始，逐渐加速至完全开启状态，然后降低速度至完全关闭状态，再重复这一过程。
- en: 'Let’s see how this works:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个是如何工作的：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should be familiar with the code used in this project by now as you learned
    about using PWM in [Chapter 7](nsp-boxall502581-0017.xhtml#ch07) , but let’s go
    through it together. First, we set the required registers to initialize PWM operation
    ❷. To make control easier, we use three functions: `motorOn()` , `motorOff()`
    , and `motorPWM()` . The `motorOn()` function turns the motor completely on by
    first disconnecting PORTB1 from PWM ❸ and then setting it to high. This gives
    100 percent power to the motor via the MOSFET at all times.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该已经熟悉本项目中使用的代码，因为你在[第7章](nsp-boxall502581-0017.xhtml#ch07)中已经学习过如何使用PWM，但我们还是一起来回顾一下。首先，我们设置所需的寄存器来初始化PWM操作❷。为了简化控制，我们使用了三个函数：`motorOn()`、`motorOff()`和`motorPWM()`。`motorOn()`函数通过首先断开PORTB1与PWM
    ❸的连接，然后将其设置为高电平，完全开启电机。这样，电机通过MOSFET始终获得100%的电力。
- en: We use the `motorOff()` function to completely turn the motor off by disconnecting
    PORTB1 from PWM ❹ and setting it to low. This turns off the MOSFET gate pin, so
    the motor has no power. Again, this is necessary as you can’t send a 0 percent
    duty cycle to the OCR1A register and expect it to be off 100 percent of the time.
    Even with a duty cycle of 0 percent, every time the hardware timer resets the
    output is turned on briefly during the reset.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`motorOff()`函数通过断开PORTB1与PWM ❹的连接并将其设置为低电平，完全关闭电机。这样会关闭MOSFET的门极引脚，电机就没有电源了。同样，这也是必要的，因为你不能将0%的占空比发送到OCR1A寄存器，并期望它始终保持关闭。即使占空比为0%，每次硬件定时器重置时，输出也会在重置期间短暂开启。
- en: Finally, the function `motorPWM()` , which accepts the required duty cycle value,
    is used to set the motor speed with PWM. It connects PORTB1 to PWM ❺ and then
    loads the OCR1A register with the required value.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，函数`motorPWM()`接受所需的占空比值，用于通过PWM设置电机速度。它将PORTB1连接到PWM ❺，并将OCR1A寄存器加载所需的值。
- en: Our main code repeatedly turns the motor on and increases the speed to 100 percent,
    then reduces the speed back to 0, then turns the motor off for 3 seconds. We turn
    the motor off at the start of the code, to allow the end user a moment’s notice
    before spinning it up. You can change the delay time in the PWM loops by altering
    the value of `wait` ❶.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主代码会反复启动电机，将速度增加到100%，然后再降低到0%，最后将电机关闭3秒。我们在代码开始时关闭电机，以便用户在启动之前能提前有所准备。你可以通过更改`wait`
    ❶的值来调整PWM循环中的延迟时间。
- en: Now that you know how to control a DC motor, let’s apply this skill to a practical
    example by building a temperature-controlled fan system.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何控制直流电机，让我们通过构建一个温控风扇系统，将这一技能应用到实际例子中。
- en: '[Project 35: Temperature-Controlled Fan](nsp-boxall502581-0008.xhtml#rpro35)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目 35：温控风扇](nsp-boxall502581-0008.xhtml#rpro35)'
- en: In this project, you’ll combine your existing knowledge of motor control with
    your newfound MOSFET skills, using temperature sensors to make a temperature-controlled
    fan.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将把现有的电机控制知识与新学到的MOSFET技能结合起来，利用温度传感器制作一个温控风扇。
- en: '[The Hardware](nsp-boxall502581-0008.xhtml#rbh1003)'
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[硬件部分](nsp-boxall502581-0008.xhtml#rbh1003)'
- en: 'For this project, you’ll need the following hardware:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目需要以下硬件：
- en: • USBasp programmer
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • USBasp 编程器
- en: • Solderless breadboard
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 无焊接面包板
- en: • ATmega328P-PU microcontroller
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • ATmega328P-PU 微控制器
- en: • Jumper wires
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 跳线
- en: • Small DC motor and matching power
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 小型直流电机及其匹配电源
- en: • 2N7000 MOSFET
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 2N7000 MOSFET
- en: • TMP36 temperature sensor
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • TMP36 温度传感器
- en: • 0.1 μF ceramic capacitor
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 0.1 μF 陶瓷电容
- en: • 10 kΩ resistor
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 10 kΩ 电阻
- en: You can use the small DC motor from the [previous project](nsp-boxall502581-0018.xhtml#pro34)
    just to see how this works, or you can pick up a DC motor–powered cooling fan
    from an electrical retailer, such as the unit from PMD Way (part number 59119182)
    shown in [Figure 8-6](nsp-boxall502581-0018.xhtml#f08006) . Some fans may have
    four wires, but only two of these are required (power and GND). Once again, we’ll
    need to use external power for the fan.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用[上一项目](nsp-boxall502581-0018.xhtml#pro34)中的小型直流电机来看看这个是如何工作的，或者你可以从电气零售商那里购买一个直流电机驱动的冷却风扇，例如[图
    8-6](nsp-boxall502581-0018.xhtml#f08006)所示的PMD Way（部件号59119182）。一些风扇可能有四根线，但其中只有两根是必需的（电源和GND）。再次提醒，我们需要为风扇提供外部电源。
- en: '![Photo of a small cooling fan](images/nsp-boxall502581-f08006.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![小型冷却风扇的照片](images/nsp-boxall502581-f08006.jpg)'
- en: 'Figure 8-6 : DC cooling fan'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-6 ：直流冷却风扇
- en: Assemble the circuit as shown in [Figure 8-7](nsp-boxall502581-0018.xhtml#f08007)
    .
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图 8-7](nsp-boxall502581-0018.xhtml#f08007)所示组装电路。
- en: '![Schematic diagram for Project 35](images/nsp-boxall502581-f08007.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![项目 35 的电路图](images/nsp-boxall502581-f08007.jpg)'
- en: 'Figure 8-7 : Schematic for [Project 35](nsp-boxall502581-0018.xhtml#pro35)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-7 ：[项目 35](nsp-boxall502581-0018.xhtml#pro35)的电路图
- en: As you assemble the project, note that the black/negative lead from the battery
    pack or fan power supply will be connected to GND. Also, don’t forget to connect
    AV [CC] to 5 V.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在组装项目时，请注意电池包或风扇电源的黑色/负极导线将连接到GND。同时，别忘了将AV [CC]连接到5V。
- en: '[The Code](nsp-boxall502581-0008.xhtml#rbh1004)'
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[代码部分](nsp-boxall502581-0008.xhtml#rbh1004)'
- en: Open a terminal window, navigate to the *Project 35* subfolder of this book’s
    *Chapter 8* folder, and enter the command `make flash` . Once you’ve applied power,
    the project should wait three seconds before taking the temperature and operating
    the fan, depending on the current temperature.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个终端窗口，导航到本书*第8章*文件夹中的*项目 35*子文件夹，并输入命令`make flash`。一旦接通电源，项目应该在等待三秒钟后根据当前温度读取温度并启动风扇。
- en: 'To see how this works, take a look at the code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解其工作原理，查看以下代码：
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code builds upon the ADC and temperature sensor from [Project 19](nsp-boxall502581-0014.xhtml#pro19)
    in [Chapter 4](nsp-boxall502581-0014.xhtml#ch04) and the PWM motor control used
    in [Project 34](nsp-boxall502581-0018.xhtml#pro34) . First, we activate the ADC
    to read the TMP36 temperature sensor and activate PWM for variable-speed motor
    control ❶ (the `startADC()` and `initPWM()` functions are defined at the beginning
    of the program). We introduce the variables required to calculate the temperature
    for the thermostat ❷, and then we introduce a delay at startup so the motor doesn’t
    jump into life straight after a reset or power-up ❸.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码基于[第4章](nsp-boxall502581-0014.xhtml#ch04)中[项目19](nsp-boxall502581-0014.xhtml#pro19)的ADC和温度传感器，以及[项目34](nsp-boxall502581-0018.xhtml#pro34)中使用的PWM电机控制。首先，我们激活ADC来读取TMP36温度传感器，并激活PWM以实现可调速的电机控制❶（`startADC()`和`initPWM()`函数在程序开头定义）。接下来，我们引入用于计算温控器温度所需的变量❷，然后在启动时加入延迟，以防电机在重置或开机后立即启动❸。
- en: In the main loop, we take the value from the ADC ❹ and convert it to degrees
    Celsius ❺. The code can now use this temperature value to determine whether to
    operate the motor. In this project, the motor is switched off if the temperature
    is below 25 degrees ❻. If the temperature is between 25 and 34 degrees inclusive,
    the fan runs at half speed ❼. If the temperature is 35 degrees or over, the fan
    runs at full speed ❽.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在主循环中，我们从ADC获取值❹，并将其转换为摄氏度❺。此时，代码可以使用这个温度值来判断是否需要启动电机。在本项目中，如果温度低于25度，电机将关闭❻；如果温度在25到34度之间（含34度），风扇以半速运行❼；如果温度达到35度或更高，风扇以全速运行❽。
- en: Finally, after checking the temperature, there is a short delay ❾ to avoid *hysteresis*
    —that is, rapid changes in the characteristics of the circuit. For example, if
    the sensor were in the path of a breeze or a fluttering curtain, the temperature
    might fluctuate rapidly between 24.99 and 25 degrees, causing the motor to turn
    continuously on and off. The delay allows us to avoid this.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在检查温度后，会有一个短暂的延迟❾，以避免*滞后效应*——即电路特性快速变化。例如，如果传感器处于气流或飘动的窗帘附近，温度可能会在24.99和25度之间迅速波动，导致电机持续开关。这个延迟可以帮助我们避免这种情况。
- en: At this point, I hope you’re beginning to see how we can combine basic AVR code
    and tools to solve new problems. Building on prior knowledge, we’ve started to
    move beyond the simpler projects in earlier chapters to more complex, practical
    applications.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我希望你已经开始看到我们如何将基本的AVR代码和工具结合起来，解决新的问题。通过建立在先前知识的基础上，我们已经开始超越前几章的简单项目，向更复杂、更实用的应用迈进。
- en: Now that we’ve experimented with basic motor control using the MOSFET, we’ll
    move on to controlling the direction of rotation as well as the speed of a DC
    motor. To do this, we’ll use the L293D motor driver IC.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经使用MOSFET进行了基本的电机控制实验，接下来我们将继续控制直流电机的旋转方向和速度。为此，我们将使用L293D电机驱动IC。
- en: '[The L293D Motor Driver IC](nsp-boxall502581-0008.xhtml#rah1002)'
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[L293D电机驱动IC](nsp-boxall502581-0008.xhtml#rah1002)'
- en: To control the speed and direction of one or two small DC motors, we’ll use the
    L293D motor driver IC from STMicroelectronics, shown in [Figure 8-8](nsp-boxall502581-0018.xhtml#f08008)
    . This is in the same type of package as a microcontroller, and thus we can easily
    use it in a solderless breadboard for experimenting.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了控制一个或两个小型直流电机的速度和方向，我们将使用STMicroelectronics的L293D电机驱动IC，如[图8-8](nsp-boxall502581-0018.xhtml#f08008)所示。它与微控制器的封装类型相同，因此我们可以轻松地在无焊接面包板上进行实验。
- en: '![Photo of the L293D motor driver IC](images/nsp-boxall502581-f08008.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![L293D电机驱动IC的照片](images/nsp-boxall502581-f08008.jpg)'
- en: 'Figure 8-8 : L293D motor driver IC'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-8：L293D电机驱动IC
- en: You can use small motor driver ICs like the L293D for robotics or small toys
    that run from 4.5 to 36 V DC at up to 600 mA, with some restrictions with regard
    to heat that I’ll explain later. The L293D saves you a lot of time, as it takes
    care of distributing power to the motors and spares you from building a bunch
    of external circuitry. It is known as an *H-BRIDGE IC* because it has an internal
    circuit of MOSFETs and other components configured in the shape of the letter
    H, as shown in [Figure 8-9](nsp-boxall502581-0018.xhtml#f08009) .
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用像L293D这样的电机驱动IC，用于机器人或小型玩具，这些设备的工作电压范围从4.5到36 V直流电，电流最大可达600 mA，但在热量方面有一些限制，我稍后会解释。L293D能为你节省大量时间，因为它负责将电力分配给电机，免去了你构建外部电路的麻烦。它被称为*H型桥IC*，因为它内部有一组MOSFET和其他组件，按字母H的形状配置，如[图8-9](nsp-boxall502581-0018.xhtml#f08009)所示。
- en: '![Internal block diagram for the L293D motor driver IC](images/nsp-boxall502581-f08009.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![L293D电机驱动IC的内部框图](images/nsp-boxall502581-f08009.jpg)'
- en: 'Figure 8-9 : L293D IC block diagram'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-9：L293D IC框图
- en: Thankfully, we don’t need to build the L293D IC’s circuitry ourselves; it’s
    already set up and ready for us to connect the motors, control logic, and power.
    Instead, we just connect motors, power, GND, and outputs from a microcontroller.
    To see how to wire up the L293D to one DC motor, take a look at the pinouts in
    [Figure 8-10](nsp-boxall502581-0018.xhtml#f08010) .
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们不需要自己构建L293D IC的电路；它已经设置好并准备好了，只需要我们连接电机、控制逻辑和电源。接下来，我们只需连接电机、电源、GND和来自微控制器的输出。要了解如何将L293D接线到一个直流电机，请查看[图8-10](nsp-boxall502581-0018.xhtml#f08010)中的引脚图。
- en: '![Pinouts for the L293D motor driver IC](images/nsp-boxall502581-f08010.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![L293D电机驱动IC的引脚图](images/nsp-boxall502581-f08010.jpg)'
- en: 'Figure 8-10 : L293D IC pinouts'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-10：L293D IC引脚图
- en: 'There are four GND pins: 4, 5, 12, and 13\. Connect those to GND. Next, locate
    the two power pins. Connect the first one—V [CC] 1, which is the logic (or control)
    power pin—to the 5 V, as you did with your microcontroller in our earlier projects.
    Then connect the second power pin, V [CC] 2, to the positive of the motor power
    supply (up to 36 V DC). Finally, connect the motor: one wire to pin 3 and the
    other to pin 6.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有四个GND引脚：4、5、12和13。将它们连接到GND。接下来，找到两个电源引脚。将第一个电源引脚——V [CC] 1（逻辑电源引脚）连接到5V，就像我们在之前的项目中为微控制器所做的那样。然后将第二个电源引脚V
    [CC] 2连接到电机电源的正极（最高可达36V直流电）。最后，连接电机：一根线连接到引脚3，另一根连接到引脚6。
- en: 'Controlling the motor requires three signals from digital outputs on our microcontroller.
    First, we set the ENABLE pin: either to high, so that the driver IC sends power
    to the motor, or to low, so that the motor stops. The signals from the next two
    pins, 1A and 2A, control the polarity of the power to the motor, and thus the
    rotational direction. With ENABLE set high, the motor will rotate in one direction
    with 1A high and 2A low and rotate in the other direction with 1A low and 2A high.
    [Table 8-1](nsp-boxall502581-0018.xhtml#tab0801) summarizes all this for easy
    reference.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 控制电机需要从我们的微控制器的数字输出引脚获取三个信号。首先，我们设置ENABLE引脚：要么设置为高电平，以便驱动IC向电机提供电力，要么设置为低电平，使电机停止。接下来两个引脚，1A和2A，控制电机电力的极性，从而控制电机的旋转方向。当ENABLE设置为高电平时，电机将在1A为高、2A为低时朝一个方向旋转，在1A为低、2A为高时朝另一个方向旋转。[表格
    8-1](nsp-boxall502581-0018.xhtml#tab0801)总结了这些信息，方便参考。
- en: '| Table 8-1 : L293D Single Motor Control |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 表格 8-1：L293D单电机控制 |'
- en: '| --- |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| ENABLE pin/EN1 (pin 1) | 1A pin/out 1 (pin 2) | 2A pin/out 2 (pin 7) | Motor
    action |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| ENABLE引脚/EN1（引脚1） | 1A引脚/输出1（引脚2） | 2A引脚/输出2（引脚7） | 电机动作 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| High | High | Low | Forward |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| 高 | 高 | 低 | 正向 |'
- en: '| High | Low | High | Backward |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 高 | 低 | 高 | 反向 |'
- en: '| Low | High or Low | High or Low | Stop |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 低 | 高或低 | 高或低 | 停止 |'
- en: There’s no way to tell from the outside whether your motor will run forward
    or backward; you will need to do a test run to determine which of the two 1A/2A
    combinations is which for your motor. You can alter the speed of the motor by
    applying a PWM signal to the ENABLE pin.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 从外观上无法判断电机是正转还是反转；你需要进行测试运行来确定1A/2A两种组合在你的电机上分别对应哪种方向。你可以通过向ENABLE引脚施加PWM信号来改变电机的转速。
- en: A Few Words about Heat
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 关于热量的几点说明
- en: The L293D can become warm (or hot) when running toward the higher end of its
    capacity. It shouldn’t be used in a solderless breadboard in these situations,
    as the four GND pins are also used as a heatsink. This means they might melt the
    plastic around the pins, leaving the L293D stuck in the breadboard. If you’re
    going to control larger motors, build your circuit using your own PCB, use a breakout
    board for the motor control, or solder the circuit onto a stripboard.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: L293D在接近其最大负载运行时可能会变热（甚至发烫）。在这种情况下不应在无焊接面包板上使用它，因为四个GND引脚也用作散热片。这意味着它们可能会融化引脚周围的塑料，导致L293D卡在面包板中。如果你要控制较大的电机，可以使用自己的PCB来构建电路，使用电机控制的扩展板，或者将电路焊接到条形板上。
- en: Now that you’re familiar with the theory of the L293D, let’s put it into practice
    in the [next project](nsp-boxall502581-0018.xhtml#pro36) .
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经熟悉了L293D的理论，接下来我们在[下一个项目](nsp-boxall502581-0018.xhtml#pro36)中将它付诸实践。
- en: '[Project 36: DC Motor Control with L293D](nsp-boxall502581-0008.xhtml#rpro36)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目 36：使用L293D控制直流电机](nsp-boxall502581-0008.xhtml#rpro36)'
- en: This project demonstrates how you can control a small DC motor using PWM and
    the L293D motor driver IC, operating the motor in either direction and at various
    speeds. This will give you the remaining skills you need to build your first moving
    robot vehicle in the [next project](nsp-boxall502581-0018.xhtml#pro37) .
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目演示了如何使用 PWM 和 L293D 电机驱动芯片控制一个小型直流电机，使电机可以在两个方向上以不同的速度运转。这将使你获得在[下一个项目](nsp-boxall502581-0018.xhtml#pro37)中构建你的第一个运动机器人所需的所有技能。
- en: '[The Hardware](nsp-boxall502581-0008.xhtml#rbh1005)'
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[硬件](nsp-boxall502581-0008.xhtml#rbh1005)'
- en: 'For this project, you’ll need the following hardware:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，你需要以下硬件：
- en: • USBasp programmer
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • USBasp 编程器
- en: • Solderless breadboard
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 无焊面包板
- en: • ATmega328P-PU microcontroller
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • ATmega328P-PU 微控制器
- en: • Jumper wires
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 跳线
- en: • Small DC motor and matching power
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 小型直流电机及匹配电源
- en: • L293D motor driver IC
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • L293D 电机驱动芯片
- en: Use the same DC motor and matching power supply you used for [Project 34](nsp-boxall502581-0018.xhtml#pro34)
    . Assemble the circuit as shown in [Figure 8-11](nsp-boxall502581-0018.xhtml#f08011)
    .
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与你在[项目 34](nsp-boxall502581-0018.xhtml#pro34)中使用的相同的直流电机和匹配电源。按照[图 8-11](nsp-boxall502581-0018.xhtml#f08011)所示组装电路。
- en: '![Schematic diagram for Project 36](images/nsp-boxall502581-f08011.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![项目 36 的电路图](images/nsp-boxall502581-f08011.jpg)'
- en: 'Figure 8-11 : Schematic for [Project 36](nsp-boxall502581-0018.xhtml#pro36)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-11： [项目 36](nsp-boxall502581-0018.xhtml#pro36) 的电路图
- en: As you assemble the circuit, connect the black/negative lead from the battery
    pack or external power to GND once again.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在组装电路时，再次将电池组或外部电源的黑色/负极线连接到 GND。
- en: '[The Code](nsp-boxall502581-0008.xhtml#rbh1006)'
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[代码](nsp-boxall502581-0008.xhtml#rbh1006)'
- en: Open a terminal window, navigate to the *Project 36* subfolder of this book’s
    *Chapter 8* folder, and enter the command `make flash` . Once you’ve applied power,
    the project should wait three seconds before operating the motor at two different
    speeds successively, both forward and backward.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端窗口，进入本书 *第 8 章* 文件夹中的 *项目 36* 子文件夹，输入命令 `make flash` 。一旦你接通电源，项目将等待三秒钟，然后依次以两个不同的速度正反向操作电机。
- en: Let’s see how this works.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它是如何工作的。
- en: '[PRE2]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This code builds on that of previous motor control projects in this chapter,
    with the required additions for the L293D. We set up PWM at points ❶ and ❽. The
    first of the motor control functions, `motorForward()` ❷, rotates the motor in
    one direction and accepts a duty cycle value of between 1 and 255\. Per [Table
    8-1](nsp-boxall502581-0018.xhtml#tab0801) , we set the outputs as high and low
    for motor directional control ❸. The code then checks if the required duty cycle
    value is 255 ❹, and if so simply switches the ENABLE pin to high for full-speed
    motor running instead of using PWM. However, if it’s less than 255, then PWM is
    enabled for the output pin controlling the L293D ENABLE pin ❺ and the required
    duty cycle value is dropped into OCR2A.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码是本章前面电机控制项目的基础，加入了 L293D 所需的部分。我们在点 ❶ 和 ❽ 设置了 PWM。第一个电机控制函数`motorForward()`
    ❷使电机朝一个方向旋转，并接受一个 1 到 255 之间的占空比值。根据[表 8-1](nsp-boxall502581-0018.xhtml#tab0801)，我们将输出设置为高低电平以实现电机的方向控制
    ❸。然后，代码会检查所需的占空比是否为 255 ❹，如果是，则将 ENABLE 引脚设置为高电平，直接以全速运转电机，而不是使用 PWM。然而，如果占空比小于
    255，则会为控制 L293D ENABLE 引脚的输出引脚启用 PWM ❺，并将所需的占空比值写入 OCR2A。
- en: The motor control method used in `motorForward()` is repeated with the function
    `motorBackward()` ❻, except with the outputs for motor control set to low and
    high for reverse rotation. Finally, the `motorOff()` function ❼ turns off the
    motor by first disabling PWM for the output pin controlling the L293D ENABLE pin
    and then setting it to low. With all this complete, you can now use the motor
    control functions to control the speed and direction of motor rotation, as demonstrated
    in the main loop of the code ❾.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`motorForward()` 中使用的电机控制方法在函数`motorBackward()` ❻ 中得以重复，不过此时用于电机控制的输出被设置为低高电平，以实现反向旋转。最后，`motorOff()`
    函数 ❼ 通过首先禁用控制 L293D ENABLE 引脚的输出引脚的 PWM，然后将其设置为低电平，从而关闭电机。完成所有这些后，你现在可以使用电机控制函数来控制电机旋转的速度和方向，如代码主循环中所示
    ❾。'
- en: Now that you know how to control the speed and direction of a DC motor, let’s
    use two motors to control a small robot vehicle.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何控制直流电机的速度和方向，让我们使用两个电机来控制一个小型机器人。
- en: '[Project 37: Controlling a Two-Wheel-Drive Robot Vehicle](nsp-boxall502581-0008.xhtml#rpro37)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目 37：控制一个双轮驱动机器人](nsp-boxall502581-0008.xhtml#rpro37)'
- en: In this project, you’ll learn to control a small two-wheel-drive robot vehicle.
    The suggested hardware includes two DC motors and a *castor* (a small, swiveling
    wheel fixed to the bottom of your robot vehicle), allowing you to easily control
    the speed and direction of travel. I hope this inspires you to create your own
    more complex robotic creations!
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本项目中，您将学习如何控制一辆小型的两轮驱动机器人。建议的硬件包括两个直流电动机和一个*万向轮*（一个小型旋转轮子，固定在机器人底部），使您能够轻松控制行驶速度和方向。希望这能激发您创造自己更复杂的机器人作品！
- en: '[The Hardware](nsp-boxall502581-0008.xhtml#rbh1007)'
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[硬件](nsp-boxall502581-0008.xhtml#rbh1007)'
- en: 'For this project, you’ll need the following hardware:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目所需的硬件如下：
- en: • USBasp programmer
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • USBasp 编程器
- en: • Solderless breadboard
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 无焊面包板
- en: • ATmega328P-PU microcontroller
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • ATmega328P-PU 微控制器
- en: • Jumper wires
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 跳线
- en: • Two small DC motors and matching power
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 两个小型直流电动机及匹配电源
- en: • 2WD robot vehicle chassis (such as PMD Way part number 72341119)
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 2WD 机器人底盘（例如 PMD Way 零件编号 72341119）
- en: • Four AA battery cells
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 四节 AA 电池
- en: • 1N4004 power diode
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 1N4004 电源二极管
- en: • L293D motor driver IC
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • L293D 电机驱动 IC
- en: The Chassis
  id: totrans-136
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 底盘
- en: The foundation of any robot vehicle is a solid chassis containing the motors,
    drivetrain, and power supply. You can choose from many chassis models available
    on the market. To keep things simple, this project relies on an inexpensive robot
    chassis with two small DC motors that operate at around 6 V DC and two matching
    wheels, as shown in [Figure 8-12](nsp-boxall502581-0018.xhtml#f08012) .
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 任何机器人车辆的基础是一个坚固的底盘，包含电动机、驱动系统和电源。市场上有许多底盘模型可供选择。为了简化，本项目使用了一个便宜的机器人底盘，配备了两个约为
    6 V DC 的小型直流电动机和两个匹配的车轮，如[图 8-12](nsp-boxall502581-0018.xhtml#f08012)所示。
- en: '![Photo of a two-wheel-drive robot chassis with motors, wheels, and battery
    holder](images/nsp-boxall502581-f08012.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![带电动机、车轮和电池托架的两轮驱动机器人底盘照片](images/nsp-boxall502581-f08012.jpg)'
- en: 'Figure 8-12 : Two-wheel-drive robot vehicle chassis (PMD Way part number 72341119)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-12 ：两轮驱动机器人底盘（PMD Way 零件编号 72341119）
- en: The task of physically assembling the robot chassis varies between models, but
    most require a few additional tools beyond those included in the kit, such as
    screwdrivers. If you haven’t settled on a final design and wish to get your robot
    moving in a temporary configuration, you can attach the electronics to the chassis
    with a reusable putty adhesive like Blu-Tack.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 物理组装机器人底盘的任务因模型而异，但大多数模型需要一些额外的工具，除了套件中提供的工具外，例如螺丝刀。如果您尚未确定最终设计，并希望让您的机器人在临时配置中开始移动，可以使用可重复使用的粘土胶粘剂（如
    Blu-Tack）将电子元件附着到底盘上。
- en: The Power Supply
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 电源
- en: The motors included with the robot chassis typically operate at around 6 V DC,
    so we’ll use the 4 AA cell battery holder included with the example chassis in
    [Figure 8-12](nsp-boxall502581-0018.xhtml#f08012) . We can’t use 6 V to power
    the microcontroller circuit, so we place a 1N4004 diode between the power supply
    positive and the 5 V connection on the microcontroller. The diode will cause a
    0.7 V drop in voltage, bringing the microcontroller supply to around 5.3 V DC.
    The voltage will again drop as the battery life decreases.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人底盘所包含的电动机通常在大约 6 V DC 下运行，因此我们将使用[图 8-12](nsp-boxall502581-0018.xhtml#f08012)中示例底盘附带的四节
    AA 电池托架。我们不能直接使用 6 V 来为微控制器电路供电，因此我们将在电源正极和微控制器的 5 V 引脚之间放置一个 1N4004 二极管。该二极管将导致电压下降
    0.7 V，使微控制器的电源电压降至大约 5.3 V DC。随着电池使用寿命的减少，电压将再次下降。
- en: Assemble the circuit as shown in [Figure 8-13](nsp-boxall502581-0018.xhtml#f08013)
    .
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图 8-13](nsp-boxall502581-0018.xhtml#f08013)所示组装电路。
- en: '![Schematic diagram for Project 37](images/nsp-boxall502581-f08013.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![项目 37 的示意图](images/nsp-boxall502581-f08013.jpg)'
- en: 'Figure 8-13 : Schematic for [Project 37](nsp-boxall502581-0018.xhtml#pro37)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-13 ：[项目 37](nsp-boxall502581-0018.xhtml#pro37)的示意图
- en: Again, the black/negative lead from the battery pack or external power connects
    to GND, and the red/positive lead runs to both the L293D V [CC] 2 pin and the
    1N4004 diode.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，电池组或外部电源的黑色/负极引线连接到 GND，红色/正极引线连接到 L293D 的 V [CC] 2 引脚和 1N4004 二极管。
- en: '[The Code](nsp-boxall502581-0008.xhtml#rbh1008)'
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[代码](nsp-boxall502581-0008.xhtml#rbh1008)'
- en: Open a terminal window, navigate to the *Project 37* subfolder of this book’s
    *Chapter 8* folder, and enter the command `make flash` . Once you remove the AVR
    programmer and the vehicle starts up, it should wait three seconds before moving
    off forward and then turning left, right, and so on as directed by the sequence
    of functions in the main loop of the code.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个终端窗口，导航到本书 *第 8 章* 文件夹中的 *Project 37* 子文件夹，并输入命令 `make flash`。一旦移除 AVR 编程器并启动车辆，它应该等待三秒钟后向前移动，然后根据代码主循环中函数的顺序依次向左、向右转动，等等。
- en: 'This code is the culmination of our experiments with DC motor control using
    the L293D motor controller IC and PWM. Let’s see how it works:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码是我们使用 L293D 电机控制器 IC 和 PWM 控制直流电机的实验成果。让我们看看它是如何工作的：
- en: '[PRE3]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: At ❶ and ❽, the code initiates PWM for two digital outputs so it can control
    two motors. After PWM initiation comes `moveForward()` , the first of five functions
    to control the motors. You might need to switch the wires on each motor if they
    appear to work opposite to the code. Four of these functions— `moveForward()`
    , `moveBackward()` , `moveLeft()` , and `moveRight()` —are identical, except in
    the order of motor rotation. They all accept a value for the duty cycle to control
    the speed of the motors. The function `motorsOff()` cuts the power off to both
    motors.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ❶ 和 ❽ 处，代码为两个数字输出启动 PWM，这样就可以控制两个电机。PWM 启动后，调用 `moveForward()`，这是控制电机的五个函数中的第一个。如果电机的工作方向与代码相反，你可能需要调换每个电机上的接线。这四个函数——`moveForward()`、`moveBackward()`、`moveLeft()`
    和 `moveRight()`——是完全相同的，唯一的区别在于电机旋转的顺序。它们都接受一个占空比值来控制电机的速度。`motorsOff()` 函数切断两个电机的电源。
- en: In this case, we set the direction of the motors forward by making digital outputs
    high or low, depending on required rotation type ❷. Refer to [Table 8-1](nsp-boxall502581-0018.xhtml#tab0801)
    for the requisite output configurations. The motor movement functions check if
    the user requires full speed (a duty cycle of 100 percent, represented by 255)
    ❸. If so, it simply sets the ENABLE pins of the L293D to on. However, if you pass
    a lower value for the duty cycle through a motor movement function, the program
    activates the PWM output to the ENABLE pins ❹ and fills the PWM registers OCR2A
    and B with the required duty cycle.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们通过根据所需的旋转类型将数字输出设为高或低来设置电机的前进方向 ❷。有关所需输出配置，请参阅[表 8-1](nsp-boxall502581-0018.xhtml#tab0801)。电机运动函数会检查用户是否需要全速（占空比为
    100%，表示为 255） ❸。如果需要，它会简单地将 L293D 的 ENABLE 引脚设置为开启。但是，如果你通过电机运动函数传入较低的占空比值，程序会激活
    ENABLE 引脚的 PWM 输出 ❹，并将所需的占空比填充到 PWM 寄存器 OCR2A 和 OCR2B 中。
- en: The other three movement functions operate similarly, except that the motor
    rotations are set up to allow for turning left or right or moving backward. The
    `motorsOff()` function stops movement by turning off PWM and setting both L293D
    ENABLE pins to low ❺. Finally, the program sets the six required pins to outputs
    to control the L293D ❻❼.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 另外三个运动函数的操作方式类似，只是电机的旋转方向设置为允许向左或向右转动或向后移动。`motorsOff()` 函数通过关闭 PWM 并将两个 L293D
    ENABLE 引脚设为低来停止运动 ❺。最后，程序将六个必需的引脚设置为输出，以控制 L293D ❻❼。
- en: You can use the functions used in the main loop of the code to change the direction
    of movement, the speed via the duty cycles, and the duration with the delay functions,
    and stop the motors when required.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用代码主循环中使用的函数来改变运动方向、通过占空比来调整速度、通过延迟函数来控制持续时间，并在需要时停止电机。
- en: We have used a single timer with two PWM outputs for both motors (OCR2A and
    OCR2B) so that they share the same PWM generation and will thus synchronize with
    each other. If you use two different timers for two motors that need to operate
    together, the PWM signals will differ slightly and the two motors will operate
    slightly differently from one other.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了一个单独的定时器，为两个电机提供两个 PWM 输出（OCR2A 和 OCR2B），这样它们共享相同的 PWM 生成，从而实现同步。如果你为两个需要一起操作的电机使用两个不同的定时器，PWM
    信号将会有所不同，两个电机的操作也会略有不同。
- en: 'Now that we have experimented with DC motors, in the [next chapter](nsp-boxall502581-0019.xhtml#ch09)
    we’ll examine another useful tool of the AVR system: the internal EEPROM.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经实验了直流电机，在[下一章](nsp-boxall502581-0019.xhtml#ch09)中，我们将研究 AVR 系统的另一个有用工具：内部
    EEPROM。
