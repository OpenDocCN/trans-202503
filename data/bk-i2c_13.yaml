- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: I²C Programming in Real-Time Operating Systems
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: I²C在实时操作系统中的编程
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: I²C transmissions are slow, typically 100 kHz. In systems like Arduino, your
    code must wait for each transmission or reception to complete before doing other
    work, which drastically reduces your application’s performance. While waiting,
    the CPU is just executing a busy-waiting loop (also called a *spin loop*), wasting
    CPU cycles. In this chapter, you’ll learn to use real-time operating systems (RTOSs)
    to put those CPU cycles to work.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: I²C传输较慢，通常为100 kHz。在像Arduino这样的系统中，你的代码必须等待每次传输或接收完成才能进行其他工作，这会大幅度降低应用程序的性能。在等待过程中，CPU只是在执行一个繁忙等待循环（也叫*自旋循环*），浪费了CPU周期。在本章中，你将学习如何使用实时操作系统（RTOS）来有效利用这些CPU周期。
- en: This chapter introduces several different RTOSs—µC/OS, FreeRTOS, Teensy Threads,
    and Mbed—that you can run on typical SBCs, and it provides an example program
    using I²C for each. Some RTOSs, such as Mbed, provide full I²C support. Others,
    like FreeRTOS and Teensy Threads, are simple schedulers for which you must provide
    your own compatible I²C library code. The choice of RTOS is often dictated by
    the SBC you’re using, since if you’ve chosen a particular SBC to use, you can
    run only an RTOS that has been ported to that board. Conversely, if you want to
    use a particular RTOS, you must choose an SBC to which it has been ported—unless
    you’re willing to set up the port yourself, which is generally a lot of work.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了几种不同的RTOS——µC/OS、FreeRTOS、Teensy Threads和Mbed——你可以在典型的SBC上运行这些RTOS，并提供了每个RTOS使用I²C的示例程序。有些RTOS，如Mbed，提供完整的I²C支持。而像FreeRTOS和Teensy
    Threads这样的RTOS是简单的调度器，你必须提供自己的兼容I²C库代码。RTOS的选择通常由你使用的SBC决定，因为如果你选择了某个SBC，你只能运行已经移植到该板的RTOS。相反，如果你想使用某个RTOS，你必须选择一个已经为其移植的SBC——除非你愿意自己进行移植，而这通常是一个非常繁琐的工作。
- en: This chapter begins with a description of some basic RTOS concepts and then
    introduces a few RTOSs, along with one or a few representative SBCs to use with
    the RTOS the section describes. This is not to suggest that the SBC I pair with
    a given RTOS is the only (or even the best) SBC to use with that RTOS—these are
    just the components I had available while writing this book. For most of these
    RTOSs, you’ll generally have a much wider selection of platforms to choose from
    when designing your own systems.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章首先介绍一些基本的RTOS概念，然后介绍几个RTOS，以及一些代表性的单板计算机（SBC），供本节所描述的RTOS使用。这并不是说我为给定的RTOS选择的SBC是唯一的（甚至是最好的）SBC——这些只是我在写这本书时所能使用的组件。对于大多数RTOS，设计你自己的系统时，你通常会有更多平台可供选择。
- en: 10.1 Real-Time Operating System Basics
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.1 实时操作系统基础
- en: 'The purpose of an RTOS is to handle asynchronous events, such as the completion
    of an I²C transmission, within a guaranteed amount of time. Another way to do
    this, of course, is via *polling*—the CPU simply waits in a spin loop, testing
    for the event until it occurs and then immediately handling it. While polling
    has some advantages (in particular, it can provide the fastest response time to
    an event), there’s also a huge disadvantage: the CPU is tied up in the spin loop
    and cannot do other work.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: RTOS的目的是在保证的时间内处理异步事件，例如I²C传输的完成。当然，另一种做法是通过*轮询*——CPU简单地在自旋循环中等待，测试事件是否发生，直到事件发生后立即处理它。虽然轮询有一些优点（特别是它可以提供对事件的最快响应时间），但也有一个巨大的缺点：CPU被困在自旋循环中，无法执行其他任务。
- en: This book will typically use the term *task* to denote some generic execution
    unit that is running (pseudo-)concurrently with other execution units. Threads
    and processes are examples of types of tasks, which I’ll discuss shortly.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本书通常使用*任务*一词来表示某个通用的执行单元，该单元与其他执行单元并行（伪）执行。线程和进程是任务类型的例子，我将很快讨论这些内容。
- en: RTOSs allow other tasks to do work while the CPU is waiting for some event to
    occur. Some hardware support is needed to make this practical; in particular,
    the external event must be capable of generating an interrupt signal on the CPU.
    As its name suggests, an *interrupt signal* will cause the CPU to suspend execution
    of the currently executing task and transfer control to a special ISR that will
    handle the event. For some devices, the ISR completely handles the event, and
    the suspended task resumes control. With most RTOSs and ISRs, however, the ISR
    simply sets a flag that notes the event has occurred, and the RTOS will schedule
    the execution of the original code (which was waiting for the completion of an
    I²C transaction or some other task) for some point in the future.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: RTOS 允许其他任务在 CPU 等待某些事件发生时进行工作。要使这一点可行，需要一些硬件支持；特别是，外部事件必须能够在 CPU 上生成中断信号。正如其名称所示，*中断信号*
    会导致 CPU 暂停当前执行的任务，并将控制转移到一个特殊的 ISR 来处理该事件。对于某些设备，ISR 完全处理该事件，暂停的任务会恢复控制。然而，对于大多数
    RTOS 和 ISR，ISR 只是设置一个标志，标记事件已发生，然后 RTOS 会在未来某个时刻调度原始代码（该代码原本在等待 I²C 事务或其他任务完成）的执行。
- en: In the context of an I²C write, for example, a call to the write function will
    set up the I²C hardware to begin the transmission of the data on the I²C bus.
    Then the task that is writing the data will *suspend*, allowing other tasks to
    do some work. When the I²C transmission is complete, the I²C hardware will generate
    an interrupt, and the ISR will make a special system call to the RTOS telling
    it to wake up the suspended task that was writing data to the I²C bus.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以 I²C 写操作为例，调用写函数将会配置 I²C 硬件，开始在 I²C 总线上传输数据。然后，执行写数据的任务将会 *挂起*，以允许其他任务进行一些工作。当
    I²C 传输完成后，I²C 硬件将生成一个中断，ISR 会发出一个特殊的系统调用，通知 RTOS 唤醒之前挂起的写数据到 I²C 总线的任务。
- en: The RTOS moves the I²C write task from a suspended queue to a ready-to-run queue.
    This, however, does not guarantee that the I²C write task immediately begins execution
    (that depends on various RTOS scheduling policies). Control might transfer back
    to the task that was just suspended when the interrupt came along.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: RTOS 将 I²C 写任务从挂起队列移到就绪队列。然而，这并不保证 I²C 写任务会立即开始执行（这取决于 RTOS 的调度策略）。控制可能会回到中断发生时刚被挂起的任务。
- en: At some point in the future, the RTOS will decide to allow the I²C write task
    to continue execution. It will then move the task off the ready-to-run queue and
    start it running, suspending the currently executing task. At that time, the I²C
    write task can continue doing whatever it needs to do, such as writing additional
    data, reading data, or simply returning to the application that requested the
    I²C write operation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的某个时刻，RTOS 会决定允许 I²C 写入任务继续执行。然后它会将任务从就绪队列中移除并开始执行，暂停当前正在执行的任务。此时，I²C 写入任务可以继续完成它需要做的工作，比如写入额外的数据、读取数据，或者简单地返回到请求
    I²C 写操作的应用程序。
- en: 10.1.1 Processes and Threads
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 10.1.1 进程与线程
- en: Operating systems theory defines multiple levels of tasks, including processes
    and threads. As noted earlier, this book will use the generic term *task* *to
    describe both processes and threads.*
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统理论定义了多个任务级别，包括进程和线程。如前所述，本书将使用通用术语 *任务* 来描述进程和线程。
- en: '*A *thread* is a unit of execution that shares an address space with other
    concurrently executing threads. Because the threads share memory (the address
    space), one thread can change the memory that another thread reads. This provides
    an easy way for the threads to communicate with one another, but it also introduces
    some problems, as you’ll see in the next section.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*线程* 是一个执行单元，它与其他并发执行的线程共享地址空间。因为线程共享内存（地址空间），一个线程可以修改另一个线程读取的内存。这为线程间通信提供了一种简便的方式，但它也带来了一些问题，正如你将在下一节看到的那样。'
- en: A *process* is a unit of execution that has its own address space and does not
    share that memory with other processes. Communication between processes is a little
    more difficult than with threads, since you typically have to use files or other
    OS-defined data structures for the communication. However, because the processes
    can’t overwrite each other’s memory spaces, there’s less opportunity for them
    to interfere with one another.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*进程*是一个执行单元，具有自己的地址空间，并且不会与其他进程共享该内存。进程间的通信比线程间通信稍微复杂一些，因为通常需要使用文件或其他操作系统定义的数据结构来进行通信。然而，由于进程无法覆盖彼此的内存空间，因此它们相互干扰的机会较少。'
- en: An application may consist of one or more processes. Each process will contain
    one or more threads. The simplest application consists of a single process executing
    a single thread. One step up in complexity is an application executing a single
    process that has multiple threads of execution. Above that are applications with
    multiple processes, each with one or more threads of execution.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个应用程序可以由一个或多个进程组成。每个进程将包含一个或多个线程。最简单的应用程序由单个进程执行单个线程组成。稍微复杂一点的应用程序是执行一个具有多个执行线程的单个进程的应用程序。再往上是具有多个进程的应用程序，每个进程都有一个或多个执行线程。
- en: The easiest visualization of multiple processes and threads is to think of each
    process and thread corresponding to procedures or functions in a programming language.
    Each independent process or thread corresponds to a unique function that executes
    the code for that process or thread. While this is a simple model to visualize,
    it is actually common for different processes and threads to share the same code.
    For example, two threads of execution could run the same function in memory, perhaps
    being passed different parameters to allow them to do different operations.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化多个进程和线程最简单的方式是将每个进程和线程视为编程语言中的程序或函数。每个独立的进程或线程对应一个唯一的函数，执行该进程或线程的代码。虽然这是一个简单的模型，但实际上，不同的进程和线程共享相同代码是很常见的。例如，两个执行线程可能在内存中运行相同的函数，也许传递不同的参数来允许它们执行不同的操作。
- en: 10.1.2 Multithreading and Multitasking
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 10.1.2 多线程与多任务
- en: The principal function of an RTOS is to allow multiple threads to run concurrently.
    A few microcontrollers include multiple CPUs (*multicore CPUs*), meaning two or
    more tasks really can run on different CPUs at exactly the same time. However,
    most embedded microcontrollers are limited to a single CPU (core), allowing only
    a single task to run at any given time. To simulate multitasking (also known as
    *multithreading*), RTOSs rapidly switch between tasks to give the illusion that
    multiple tasks are executing concurrently.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 实时操作系统（RTOS）的主要功能是允许多个线程并发执行。一些微控制器包括多个CPU（*多核CPU*），这意味着两个或更多任务确实可以在不同的CPU上同时运行。然而，大多数嵌入式微控制器仅限于单个CPU（核心），因此任何时刻只能执行一个任务。为了模拟多任务（也称为*多线程*），RTOS会快速切换任务，给人一种多个任务同时执行的错觉。
- en: Most modern RTOSs use preemption to suspend one task and then allow another
    to execute. Each RTOS uses a given policy to determine how to preempt a running
    task. Some RTOSs give each task a fixed amount of time to run and switch between
    tasks when the timer expires. This time period is known as a *time slice* or *time
    quantum*; the process of switching between tasks is called *time multiplexing*.
    Other RTOSs assign priorities to different tasks and allow higher-priority tasks
    to run unimpeded until they suspend or a higher-priority task is ready to run.
    Many RTOSs use a combination of these policies. For example, if two tasks with
    the same priority are ready to run, they use time slicing to switch between themselves,
    while lower-priority tasks remain suspended until both tasks suspend themselves.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代实时操作系统（RTOS）使用抢占机制来暂停一个任务，然后允许另一个任务执行。每个RTOS都有自己的策略来决定如何抢占正在运行的任务。有些RTOS为每个任务分配一个固定的运行时间，并在定时器到期时切换任务。这个时间段称为*时间片*或*时间量子*；在任务之间切换的过程称为*时间复用*。其他RTOS为不同的任务分配优先级，允许优先级较高的任务在没有阻碍的情况下运行，直到它们被暂停或更高优先级的任务准备好运行。许多RTOS使用这些策略的组合。例如，如果两个任务具有相同的优先级并准备好运行，它们使用时间切片在彼此之间切换，而低优先级任务则保持暂停状态，直到这两个任务都暂停自己。
- en: In a pure priority-based system, lower-priority tasks may never run if some
    higher-priority task is always running. This could lead to *starvation*, meaning
    a given task never executes. Many RTOSs temporarily raise the priority of a low-priority
    task after some time period to ensure it gets some attention every now and then.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在纯优先级调度系统中，如果某个高优先级任务始终在运行，低优先级任务可能永远无法运行。这可能会导致*饥饿现象*，意味着某个任务永远不会执行。许多 RTOS
    会在一段时间后临时提升低优先级任务的优先级，以确保它偶尔能获得一些处理时间。
- en: An RTOS’s scheduling policy determines how it selects the next task to run.
    For example, if an RTOS assigns equal priority to tasks and gives each task a
    time slice of equal size, the scheduling policy decides how the CPU chooses the
    next task to run when one task completes its time slice (or suspends for some
    other reason). One obvious solution is a *round-robin* scheduling policy in which
    the RTOS maintains a queue of ready-to-run tasks and picks the task off the front
    of the queue when switching between tasks; it places the newly suspended task
    at the end of the queue. Most of the time, this ensures a fair allocation of CPU
    resources to each of the ready-to-run tasks. There are some degenerate cases where
    this scheme is not entirely fair. For example, if a particular task suspends more
    frequently than others, it must wait through the whole queue again even though
    it uses little CPU time while actually running. However, as a quick-and-dirty
    solution, round-robin scheduling works well.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: RTOS 的调度策略决定了它如何选择下一个运行的任务。例如，如果 RTOS 为任务分配相同的优先级并给每个任务分配相等大小的时间片，那么调度策略决定了当一个任务完成其时间片（或由于其他原因挂起）时，CPU
    如何选择下一个任务来运行。一种明显的解决方案是*轮询调度*策略，其中 RTOS 维护一个准备运行任务的队列，在任务切换时从队列前端挑选任务；它会将新挂起的任务放到队列的末尾。大多数时候，这能确保公平地分配
    CPU 资源给每个准备运行的任务。但也有一些特殊情况，这个方案并不完全公平。例如，如果某个任务比其他任务更频繁地挂起，那么即便它在运行时占用的 CPU 时间很少，它也必须重新等待整个队列。然而，作为一种快速且简单的解决方案，轮询调度效果很好。
- en: Sometimes an application can control various aspects of the scheduling priority,
    but more often than not the application has to live with the scheduling policies
    provided by the operating system. Tuning RTOS policies is beyond the scope of
    this book, but to learn more, see “For More Information” at the end of this chapter
    or the manual for your particular RTOS. Fortunately, I²C activities tend to be
    very slow (at least, when running at 100 kHz), so scheduling tuning generally
    won’t affect the performance of an I²C-based application by that much.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有时应用程序可以控制调度优先级的各个方面，但更多情况下，应用程序必须接受操作系统提供的调度策略。调整 RTOS 策略超出了本书的范围，但若想了解更多，请参见本章结尾的“更多信息”或你所使用的
    RTOS 手册。幸运的是，I²C 活动通常非常缓慢（至少在 100 kHz 下运行时如此），因此调度调整通常不会对基于 I²C 的应用程序的性能产生太大影响。
- en: 10.1.3 Reentrancy
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 10.1.3 重入性
- en: Perhaps the biggest problem with programming I²C devices in a multithreaded
    environment is *reentrancy*, which occurs when two separate threads attempt to
    run the same code concurrently. An I²C device is a single, shared system resource.
    If a function called by two separate threads attempts to communicate with an I²C
    device, a second thread reentering that same function will attempt to talk to
    that same device concurrently. If one thread started to write a 2- or 3-byte sequence
    to the device and was interrupted after transmitting the first byte, then from
    the device’s perspective, the first byte from the second thread would look like
    the second byte from the first thread. If two threads are going to share the same
    I²C device, proper operation will take very careful synchronization on the part
    of the two threads.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在多线程环境中编程 I²C 设备时，也许最大的难题是*重入性*，它发生在两个不同的线程尝试同时执行相同代码时。I²C 设备是一个单一的共享系统资源。如果由两个不同线程调用的某个函数试图与
    I²C 设备通信，第二个线程重入该函数时将尝试与同一个设备并行通信。如果一个线程开始向设备写入 2 字节或 3 字节的数据序列，并在传输第一个字节后被中断，那么从设备的角度来看，第二个线程发送的第一个字节看起来像是第一个线程发送的第二个字节。如果两个线程共享同一个
    I²C 设备，两个线程需要非常小心地同步，以确保正确操作。
- en: Even if two threads don’t access the same device, two different threads cannot
    talk to two different devices simultaneously on the same bus. Once again, different
    threads must synchronize their use of the same I²C bus. In some respects, this
    is similar to having two controllers sharing the bus; however, there is no protocol
    to handle conflicts—the individual threads must handle contention on their own.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 即使两个线程不访问相同的设备，两个不同的线程也不能在同一总线上同时与两个不同的设备通信。再一次，不同的线程必须同步使用相同的 I²C 总线。从某些方面来看，这类似于有两个控制器共享总线；然而，并没有协议来处理冲突——各个线程必须自己处理争用问题。
- en: 10.1.4 Synchronization
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 10.1.4 同步
- en: Synchronization is typically handled by mutexes (mutual exclusion primitives),
    critical sections, semaphores, events, and other such OS synchronization primitives.
    The basic idea behind all of these operations is to allow access to some section
    of code by only one thread at a time. In a typical RTOS, a thread will request
    exclusive access to a critical section of code. If the RTOS grants this request,
    future requests by other threads will be blocked until the original thread holding
    the critical section releases it. This mechanism allows only a single thread to
    enter the critical section at a time, thus eliminating the problems with reentrancy.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 同步通常通过互斥锁（mutual exclusion primitives）、临界区、信号量、事件和其他操作系统同步原语来处理。这些操作的基本思想是只允许一个线程在某一段代码中访问，防止多个线程同时进入。在典型的
    RTOS 中，线程会请求对某个临界区的独占访问。如果 RTOS 批准了该请求，其他线程的后续请求将被阻塞，直到原始线程释放临界区。这个机制确保一次只有一个线程可以进入临界区，从而消除了重入问题。
- en: While a thread is waiting for some other thread to release a critical section,
    the waiting thread is suspended (blocked) and does not consume any CPU cycles
    waiting for the release of the critical section. In the case of I²C transmission,
    this blockage could last a considerable amount of time; the thread holding the
    critical section could be transmitting and receiving several bytes on the I²C
    bus (typically requiring 100 μmsec to 1,000 μmsec per byte, plus more if clock
    stretching occurs). The good news is that the blocked thread does not interfere
    with the current transmission taking place on the I²C bus.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个线程在等待其他线程释放临界区时，等待的线程会被挂起（阻塞），并且在等待临界区释放的过程中不会消耗任何 CPU 周期。在 I²C 传输的情况下，这种阻塞可能会持续相当长的时间；持有临界区的线程可能正在
    I²C 总线上传输和接收几个字节（通常每个字节需要 100 微秒到 1000 微秒，如果发生时钟拉伸，时间会更长）。好消息是，被阻塞的线程不会干扰当前在 I²C
    总线上进行的传输。
- en: 10.1.5 Safety Critical Systems
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 10.1.5 安全关键系统
- en: Certain RTOSs such as µC/OS or FreeRTOS have been *safety qualified*, meaning
    that they have been thoroughly tested using stringent quality-assurance programs.
    This is a major advantage, since if you’re developing medical equipment, nuclear
    instrumentation, or automotive applications, industry regulators will probably
    require that you use either a safety-qualified operating system or provide appropriate
    documentation and testing that makes the case for the system you’ve chosen before
    they allow you to deploy your system. For example, I’ve used µC/OS (running on
    a NetBurner) in the development of instrumentation for nuclear reactors.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 某些 RTOS，如 µC/OS 或 FreeRTOS，已经*获得安全认证*，意味着它们经过严格的质量保证测试。这是一个重要的优势，因为如果你在开发医疗设备、核仪器或汽车应用时，行业监管机构可能会要求你使用安全认证的操作系统，或者提供适当的文档和测试，证明你选择的系统是合适的，才会允许你部署系统。例如，我在为核反应堆开发仪器时使用过
    µC/OS（运行在 NetBurner 上）。
- en: Of course, if you’re not developing mission-critical applications, you might
    not need a safety-qualified RTOS. Obviously, the choice is very application dependent,
    but be aware that quality assurance issues may restrict your choice of real-time
    OSs.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果你不是在开发任务关键型应用，你可能不需要一个安全认证的 RTOS。显然，选择的操作系统非常依赖于具体的应用，但需要注意的是，质量保证问题可能会限制你选择实时操作系统的范围。
- en: 10.2 Real-Time Operating System I²C Programming
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.2 实时操作系统 I²C 编程
- en: 'This chapter focuses on four RTOSs: µC/OS, FreeRTOS, Teensy Threads (not really
    an RTOS, just a multithreading package), and Mbed.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要讨论四种 RTOS：µC/OS、FreeRTOS、Teensy Threads（其实不算真正的 RTOS，只是一个多线程包）和 Mbed。
- en: FreeRTOS and Teensy Threads are really just thread scheduling packages that
    provide basic multitasking and thread synchronization functions. They do not provide
    any other library code, such as I²C communication functions; you’re expected to
    provide that code yourself. In particular, you are responsible for synchronizing
    access to shared resources like the I²C bus.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: FreeRTOS 和 Teensy Threads 其实只是线程调度包，提供基本的多任务和线程同步功能。它们不提供任何其他库代码，例如 I²C 通信功能；你需要自己提供这些代码。特别是，你需要负责同步对共享资源（如
    I²C 总线）的访问。
- en: The second two RTOSs, µC/OS and Mbed, are full-featured RTOSs that include library
    support for many activities, such as I²C communication. These fancier RTOSs provide
    synchronized access to the resources they use.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种 RTOS，µC/OS 和 Mbed，是功能齐全的 RTOS，提供了许多活动的库支持，例如 I²C 通信。这些更复杂的 RTOS 提供了对它们所使用资源的同步访问。
- en: The following subsections provide a brief discussion of each of these RTOSs.
    Where applicable, they also describe how to protect access to shared resources,
    such as the I²C bus.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下小节将简要讨论这些 RTOS 的每个特点。在适用的情况下，还会描述如何保护对共享资源（如 I²C 总线）的访问。
- en: 10.2.1 µC/OS
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 10.2.1 µC/OS
- en: In this chapter, I’m going to use the NBRTOS variant of µC/OS provided by NetBurner,
    Inc., running on their NetBurner MOD54415 SBC. NBRTOS is a variant of µC/OS I
    that includes several additional libraries to support the MOD54415, including
    a couple of I²C libraries.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我将使用由 NetBurner, Inc. 提供的 NBRTOS 变体，它运行在 NetBurner MOD54415 SBC 上。NBRTOS
    是 µC/OS I 的一个变体，包含了几个额外的库来支持 MOD54415，其中包括一些 I²C 库。
- en: The original µC/OS I RTOS was a purely priority-based RTOS with 64 different
    priority levels. It had the onerous restriction that each task (the µC/OS name
    for thread) had to run at a different priority so that you could not have two
    tasks running at the same priority while using round-robin/time multiplexed scheduling
    for those tasks at the same priority. Later versions of µC/OS, such as µC/OS III,
    introduced more priority levels (up to 256) and allowed multiple tasks to run
    at the same priority by using time multiplexing to switch between tasks of equal
    priority. However, as NBRTOS uses a version of µC/OS I, this book will stick with
    priority-based scheduling for µC/OS. Most of the other RTOSs in this book use
    time slicing (time multiplexing) rather than a priority-based scheme, so µC/OS
    is unusual in this respect.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 原始的 µC/OS I RTOS 是一个完全基于优先级的 RTOS，有 64 个不同的优先级等级。它有一个严格的限制，即每个任务（µC/OS 中对线程的称呼）必须运行在不同的优先级上，因此在使用轮转/时间复用调度时，你不能有两个任务在相同优先级下运行。µC/OS
    的后续版本，如 µC/OS III，引入了更多的优先级等级（最多 256 个），并允许多个任务在相同优先级下运行，使用时间复用切换任务。然而，由于 NBRTOS
    使用的是 µC/OS I 的版本，本书将坚持使用基于优先级的调度方式。书中的大多数其他 RTOS 使用的是时间切片（时间复用）而不是基于优先级的方案，因此
    µC/OS 在这方面显得有些不同。
- en: 'The MOD54415 SBC supports up to four different I²C ports. A special library,
    `MultiChannel_I2C`, provides support in a multithreaded environment for these
    four channels. This library provides several different I²C functions you can call,
    though this chapter will use only two of them, `MultiChannel_I2CInit()` and `MultiChannel_I2CSendBuf()`,
    to demonstrate writing to the MCP4725 DAC:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: MOD54415 SBC 支持最多四个不同的 I²C 端口。一个名为 `MultiChannel_I2C` 的特殊库，在多线程环境中为这四个通道提供支持。这个库提供了几个不同的
    I²C 函数，虽然本章只会使用其中的两个函数，`MultiChannel_I2CInit()` 和 `MultiChannel_I2CSendBuf()`，来演示如何向
    MCP4725 DAC 写数据：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first function, `MultiChannel_I2CInit()`, initializes the I²C port you’re
    going to use. This is usually a small integer in the range 0 to 3 (for ports i2c-0
    through i2c-3). The second parameter specifies a peripheral address for the port;
    you specify this only if you’re using the I²C port in peripheral mode. If you’re
    using the port in controller mode, you can ignore this argument (the default of
    `0x08` is fine). The last argument specifies the frequency divisor for the I²C
    bus. The default of `0x3C` is fine for 100-kHz operation; see the NetBurner documentation
    if you want to operate at a different clock frequency.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个函数 `MultiChannel_I2CInit()` 初始化你将使用的 I²C 端口。这个端口通常是一个小整数，范围从 0 到 3（对应 i2c-0
    到 i2c-3 端口）。第二个参数指定了该端口的外设地址；如果你使用的是外设模式，则需要指定这个地址。如果你使用的是控制器模式，可以忽略这个参数（默认值 `0x08`
    就可以）。最后一个参数指定了 I²C 总线的频率除数。`0x3C` 的默认值适用于 100 kHz 的操作；如果你想在其他时钟频率下运行，可以参考 NetBurner
    的文档。
- en: The second function, `MultiChannel_I2CSendBuf()`, writes data to the I²C bus.
    The first argument is the I²C port number (for example, `0` for i2c-0), the second
    argument is the I²C address of the device, the third argument is an array of bytes
    containing the data to be written, the fourth argument specifies the number of
    bytes to write, and the last argument specifies whether a stop condition is written
    to the I²C bus after the transmission (the default is `true``, which means to
    send the stop condition).`
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个函数`MultiChannel_I2CSendBuf()`将数据写入I²C总线。第一个参数是I²C端口号（例如，`0`表示i2c-0），第二个参数是设备的I²C地址，第三个参数是一个包含要写入数据的字节数组，第四个参数指定要写入的字节数，最后一个参数指定在传输后是否向I²C总线写入停止条件（默认值为`true`，即发送停止条件）。
- en: '[PRE1]*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE1]*'
