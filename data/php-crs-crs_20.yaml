- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 16 AUTHENTICATION AND AUTHORIZATION
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16 认证与授权
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: 'Many websites implement security measures to safeguard private content or sensitive
    data. In this chapter, we’ll use PHP sessions to develop an application with one
    such measure, a login form. In the process, you’ll learn how to implement two
    related security concepts: authentication and authorization.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 许多网站采取安全措施来保护私密内容或敏感数据。在本章中，我们将使用 PHP 会话来开发一个应用程序，采用其中一种安全措施——登录表单。在这个过程中，你将学习如何实现两个相关的安全概念：认证和授权。
- en: '*Authentication* determines the identity of the person using the computer system—that
    is, *who* is the user? Our application will harness the username- and-password
    login method of authentication to identify the user. Meanwhile, *authorization*
    determines whether the user is permitted to access a particular part of the computer
    system (*what* is the user permitted to do?). Our application will use data stored
    in a PHP session, combined with access control logic, to authorize certain aspects
    of the web application that a user can access.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*认证*确定使用计算机系统的人的身份——也就是，*谁*是用户？我们的应用程序将利用用户名和密码登录的认证方法来识别用户。与此同时，*授权*确定用户是否被允许访问计算机系统的特定部分（*用户被允许做什么*）。我们的应用程序将使用存储在
    PHP 会话中的数据，并结合访问控制逻辑，来授权用户可以访问的网页应用程序的某些部分。'
- en: '### A Simple Login Form'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '### 一个简单的登录表单'
- en: At its heart, a login page is an HTML form usually consisting of a text field
    for the unique user identifier (such as a username or email address), a password
    text field, and a Submit button. That’s it! The difference between a regular text
    field and a password text field is that for the latter, the browser displays a
    placeholder symbol like an asterisk (*) for each character typed so that the actual
    password isn’t displayed onscreen for a snooper to read. [Figure 16-1](#fig16-1)
    shows a bare-bones login form.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上来说，登录页面是一个 HTML 表单，通常包含一个用于唯一用户标识符（如用户名或电子邮件地址）的文本字段，一个密码文本字段，以及一个提交按钮。就这样！常规文本字段和密码文本字段的区别在于，后者浏览器会将每个输入的字符显示为像星号（*）这样的占位符符号，以便实际的密码不会显示在屏幕上，让窥探者看到。[图
    16-1](#fig16-1)展示了一个简单的登录表单。
- en: '![](../images/figure16-1.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure16-1.jpg)'
- en: 'Figure 16-1: A simple login form'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16-1：一个简单的登录表单
- en: 'The form has the three elements we’ve described: a Username field, a Password
    field, and a Submit button. [Listing 16-1](#lis16-1) shows the HTML code needed
    to display this login form.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表单包含了我们之前描述的三个元素：用户名字段、密码字段和提交按钮。[清单 16-1](#lis16-1)展示了显示这个登录表单所需的 HTML 代码。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 16-1: The code for a basic login form'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 16-1：基本登录表单的代码
- en: This code creates our labeled input boxes for a username and password, along
    with a submit input button. We specify type="password" for the Password field
    so that the input will display as placeholder characters ❷. The login form submits
    via the POST HTTP method ❶. Almost all login forms use the POST method so that
    the user’s password won’t be displayed as a query-string variable in the browser
    address bar, as would happen with the GET method. A second reason to use POST
    is that we don’t want the login data to be cached. Instead, we want the server
    to process each username and password at the time the login form is submitted.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码创建了我们的用户名和密码标签输入框，以及一个提交按钮。我们为密码字段指定了type="password"，这样输入的内容将以占位符字符的形式显示❷。登录表单通过
    POST HTTP 方法提交❶。几乎所有的登录表单都使用 POST 方法，这样用户的密码就不会像使用 GET 方法时那样，作为查询字符串变量显示在浏览器地址栏中。使用
    POST 的第二个原因是我们不希望登录数据被缓存。相反，我们希望服务器在登录表单提交时处理每个用户名和密码。
- en: '*Caching* occurs when a computer system or application, such as a web browser,
    stores copies of files locally (on the desktop, laptop, or phone) in order to
    retrieve them faster the next time they’re requested. Although this works well
    for website logos and unchanging page content like home pages, you usually wouldn’t
    want a web browser to store a local copy of submitted forms, such as login forms.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*缓存*是指当计算机系统或应用程序（如网页浏览器）将文件的副本本地存储（存储在桌面、笔记本或手机中），以便下次请求时能更快地检索它们。虽然这种方式对网站标志和不会改变的页面内容（如首页）效果很好，但通常不希望网页浏览器存储已提交表单的本地副本，例如登录表单。'
- en: Web browser applications often cache web pages requested with the GET HTTP method,
    but they don’t cache the content of web pages received after a POST HTTP request.
    Remember, GET requests simply retrieve information (without changing content on
    the server), so there is no problem with caching such requests. However, POST
    requests often involve form data submission (including login forms), and such
    requests can result in changes to the server contents such as deleting or changing
    database contents, so it would be dangerous, and perhaps insecure, to cache and
    repeat such POST requests.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 网络浏览器应用程序通常会缓存通过GET HTTP方法请求的网页，但它们不会缓存在POST HTTP请求之后接收的网页内容。请记住，GET请求只是检索信息（不会更改服务器上的内容），因此缓存此类请求是没有问题的。然而，POST请求通常涉及表单数据提交（包括登录表单），此类请求可能会导致服务器内容的变化，如删除或更改数据库内容，因此缓存并重复这些POST请求可能是危险的，甚至可能不安全。
- en: Creating a Site with a Login Form
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个带有登录表单的网站
- en: 'Now that you know how to create a basic login form, let’s build a website that
    includes a functional, professional-looking login page. We’ll secure one of the
    pages of the website by requiring users to log in to view it. The website will
    have the following pages:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何创建一个基本的登录表单了，让我们来构建一个包含功能性、专业外观的登录页面的网站。我们将通过要求用户登录才能查看网站的某一页面，从而保护该页面。该网站将包括以下页面：
- en: A home page
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个主页
- en: A Contact Us page
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个联系我们页面
- en: A login form
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个登录表单
- en: An error message page
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误信息页面
- en: A Secure Banking page (with Swiss bank account details!)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个安全银行页面（包含瑞士银行账户详细信息！）
- en: While we’re happy for any user (whether logged in or not) to see the home page,
    Contact Us page, and login page, we need to authenticate users via the form on
    the login page in order to allow only authorized users to view the secured Swiss
    bank account page.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们很高兴让任何用户（无论是否登录）都能访问主页、联系我们页面和登录页面，但我们需要通过登录页面上的表单验证用户身份，以便只允许授权用户查看受保护的瑞士银行账户页面。
- en: All the pages of the website will have the same structure and look. For example,
    [Figure 16-2](#fig16-2) shows the home page.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 网站的所有页面将具有相同的结构和外观。例如，[图16-2](#fig16-2)展示了主页。
- en: '![](../images/figure16-2.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure16-2.jpg)'
- en: 'Figure 16-2: The home page of our website'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图16-2：我们网站的主页
- en: Every page will have a Bootstrap-styled header featuring a custom logo and a
    navigation bar. Where appropriate, the navigation link relating to the page currently
    being displayed will be highlighted in white, while the other links will be gray.
    Below the navigation bar is a banner with a website tagline on the left and a
    greeting on the right. The bottom part of each page contains the individual page
    content (in this case, the heading and text telling users that this is the home
    page).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 每个页面都会有一个采用Bootstrap样式的页头，页头包括自定义徽标和导航栏。在适当的情况下，当前页面相关的导航链接将用白色高亮显示，而其他链接则为灰色。导航栏下方是一个横幅，左侧是网站标语，右侧是问候语。每个页面的底部包含该页面的内容（在此例中，是一个标题和告知用户这是主页的文本）。
- en: To build the website, we’ll first create the individual pages. Then we’ll create
    the login form and login-processing logic, and add the code to authorize only
    successfully logged-in users to view the secured Swiss bank account page.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建这个网站，我们将首先创建各个页面。然后，我们将创建登录表单和登录处理逻辑，并添加代码，确保只有成功登录的用户才能查看受保护的瑞士银行账户页面。
- en: Defining the File Structure
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义文件结构
- en: 'Create a folder for the project. Inside, it will have the following structure:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为项目创建一个文件夹。在文件夹内，结构如下：
- en: '![](../images/pg304.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/pg304.jpg)'
- en: Creating the Shared Page Content
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建共享页面内容
- en: Now we’ll create a *_header.php* file defining the header content shared by
    all the page templates. Using a shared header file will give a consistent look
    and feel to the site and avoid unnecessary code duplication. Additionally, if
    we ever want to change the site style or navigation bar contents, we’ll need to
    change only the contents of this one header file.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建一个*_header.php*文件，定义所有页面模板共享的页头内容。使用共享的页头文件将使网站保持一致的外观，并避免不必要的代码重复。此外，如果我们想更改网站样式或导航栏内容，只需要更改这个单独的页头文件的内容。
- en: Add the *_header.php* file to the *templates* subfolder*.* The file will contain
    quite a few lines of code (mostly Bootstrap classes and HTML <div> elements),
    so we’ll look at it in three parts, starting with [Listing 16-2](#lis16-2).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将*_header.php*文件添加到*templates*子文件夹中。该文件将包含不少行代码（主要是Bootstrap类和HTML <div>元素），所以我们将分三部分来看它，从[列表示例16-2](#lis16-2)开始。
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 16-2: The first part of _header.php'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 列表示例16-2：_header.php的第一部分
- en: 'We start with a PHP code block declaring three variables to help control the
    display of the navigation links at the top of the page: $homeLink, $contactLink,
    and $loginLink, corresponding to the Home, Contact Us, and Login page links. Later,
    when we write the individual templates for each of these pages, we’ll add code
    setting that page’s variable to the ''active'' string, which corresponds to a
    CSS style selector that will make the page’s navigation link appear white. Here
    in the *_header* template, we use the null-coalescing operator ?? (see [Chapter
    4](chapter4.xhtml)) to set all three variables to empty strings if they don’t
    already have a value. An empty string will make the navigation link appear gray.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个PHP代码块开始，声明了三个变量来帮助控制页面顶部导航链接的显示：$homeLink、$contactLink和$loginLink，分别对应首页、联系我们和登录页面链接。稍后，当我们编写这些页面的单独模板时，我们将添加代码，将该页面的变量设置为'active'字符串，这与一个CSS样式选择器对应，该选择器将使页面的导航链接以白色显示。在这个*_header*模板中，我们使用空合并操作符??（见[第4章](chapter4.xhtml)）来设置所有三个变量为空字符串，如果它们尚未有值的话。空字符串会使导航链接显示为灰色。
- en: Thus, when we load the login page, for example, $loginLink will be set to 'active',
    and the Login navigation link will appear white, while $homeLink and $contactLink,
    not having any prior value, will be set to empty strings and their links will
    appear gray. This use of PHP variables to fill in CSS style values is an effective
    way to highlight the current page in a navigation bar and gray out the others.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们加载登录页面时，例如，$loginLink将被设置为'active'，而登录导航链接将以白色显示，而$homeLink和$contactLink由于没有预设值，将被设置为空字符串，它们的链接将显示为灰色。这种使用PHP变量填充CSS样式值的方法是高亮显示导航栏中当前页面并将其他页面链接灰化的有效方式。
- en: NOTE
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注
- en: '*If you aren’t confident using the null-coalescing operator, you can always
    write an* if *statement using the* isset() *function to provide the same functionality,
    such as* if (!isset($homeLink)) $homeLink = ''''*.*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你不熟悉空合并操作符（null-coalescing operator），你可以始终使用isset()函数编写一个if语句，以提供相同的功能，例如*
    if (!isset($homeLink)) $homeLink = ''''*。'
- en: We next use another null-coalescing operator to set the $pageTitle variable
    to an empty string in case it hasn’t been set. Then we use the value of $pageTitle
    to form an HTML <title> element for the page ❶. This way, each function that includes
    our *_header.php* file can define a value for the PHP variable $pageTitle, giving
    each page a meaningful title that most browsers will use for the bookmark text.
    We then read in the Bootstrap stylesheet as well as our own CSS stylesheet file
    from */public/css/login.css*. This stylesheet, which we’ll create later, will
    have a few styles for the login page. The final line in this listing starts a
    <body> element, styled with the Bootstrap container class.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用另一个空合并操作符将$pageTitle变量设置为空字符串，以防它尚未设置。然后我们使用$pageTitle的值来形成页面的HTML <title>元素❶。通过这种方式，包含我们*_header.php*文件的每个函数都可以为PHP变量$pageTitle定义一个值，从而为每个页面提供一个有意义的标题，浏览器大多数情况下会使用这个标题作为书签文本。然后我们读取了Bootstrap样式表以及我们自己的CSS样式表文件*/public/css/login.css*。这个样式表文件稍后我们会创建，包含一些登录页面的样式。该清单中的最后一行开始了一个<body>元素，使用了Bootstrap的容器类样式。
- en: The code for our header template continues in [Listing 16-3](#lis16-3).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的头部模板代码继续在[清单16-3](#lis16-3)中。
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 16-3: The second part of _header.php'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 清单16-3：_header.php的第二部分
- en: We declare a header element that will contain the logo image and navigation
    links ❶. Within it, we declare the navigation bar link for the home page, styling
    this link with class="nav-link <?= $homeLink ?>" ❷. Here’s where we continue implementing
    the navigation link styling mechanism we set in motion at the start of [Listing
    16-2](#lis16-2). The link will be styled as a Bootstrap navigation link (nav-link),
    but also as active (highlighted in white) if we’ve set the $homeLink variable
    to 'active'. Otherwise, if $homeLink is an empty string, the navigation bar link
    won’t be highlighted in white as the active page link. We style the Contact Us
    ❸ and Login ❹ links in a similar way, again making them active only if their corresponding
    link variable ($contactLink or $loginLink) contains the string 'active'.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明了一个头部元素，该元素将包含logo图片和导航链接❶。在其中，我们声明了主页的导航链接，使用class="nav-link <?= $homeLink
    ?>"来为这个链接设置样式❷。这里是我们继续实现[清单16-2](#lis16-2)开始时设置的导航链接样式机制的地方。该链接将被样式化为Bootstrap的导航链接（nav-link），但是如果我们将$homeLink变量设置为'active'，它也会被高亮显示（以白色显示）。否则，如果$homeLink为空字符串，导航栏链接将不会作为活动页面链接以白色高亮显示。我们以类似的方式为“联系我们”❸和“登录”❹链接设置样式，只有当它们相应的链接变量（$contactLink或$loginLink）包含字符串'active'时，才会将它们设置为活动状态。
- en: Listing 16-4 is the final part of our common page-header code.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-4 是我们公共 page-header 代码的最后部分。
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 16-4: The third part of _header.php'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-4：_header.php 的第三部分
- en: Here we declare a Bootstrap row <div> with the standard content for every page
    on the website. This <div> is styled with a light gray background and some padding.
    It contains two <div> elements styled as columns, one with the website tagline
    and the other with a greeting touting the site’s login feature.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们声明一个带有标准内容的 Bootstrap 行 <div>，该内容适用于网站上的每一页。此 <div> 被设置为浅灰色背景并添加了一些内边距。它包含两个样式化为列的
    <div> 元素，一个显示网站的标语，另一个显示带有网站登录功能的问候语。
- en: Designing the Page Templates
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设计页面模板
- en: Next, we’ll create the templates for the home, Contact Us, and Secure Banking
    pages. With much of the work being done by the common page-header template, the
    template scripts for these three pages are straightforward. [Listing 16-5](#lis16-5)
    shows our Home page template script. Save this script in the *templates* subfolder
    as *homepage.php*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建首页、联系我们和安全银行页面的模板。由于大部分工作由公共的 page-header 模板完成，这三个页面的模板脚本非常简单。[列表 16-5](#lis16-5)
    显示了我们的首页模板脚本。将此脚本保存在 *templates* 子文件夹中，命名为 *homepage.php*。
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 16-5: The homepage.php template'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-5：homepage.php 模板
- en: We first assign the $pageTitle variable a value, heading off the null-coalescing
    operator in [Listing 16-2](#lis16-2). Additionally, since we want the Home link
    highlighted in the navigation bar, we assign the string 'active' to the $homeLink
    variable. Then we read in and execute the *_header.php* template. Next, we display
    the value in $pageTitle as a level 1 heading in the body of the HTML page ❶. This
    is followed by a paragraph of page content, then tags to close the <body> and
    <html> elements of the page.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先为 $pageTitle 变量赋值，避免[列表 16-2](#lis16-2) 中的空合并运算符。除此之外，由于我们希望导航栏中的首页链接被高亮显示，因此将字符串
    'active' 赋值给 $homeLink 变量。然后我们读取并执行 *_header.php* 模板。接下来，我们在 HTML 页面的正文部分以一级标题显示
    $pageTitle 的值 ❶。接着是页面内容的段落，最后是关闭 <body> 和 <html> 元素的标签。
- en: Listing 16-6 shows the code for the Contact Us page in *templates/ contact.php*.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-6 展示了 *templates/contact.php* 中的联系我们页面代码。
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 16-6: The contact.php template'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-6：contact.php 模板
- en: The Contact Us template is similar to the Home page template, differing only
    in the value of $pageTitle ❶, the variable set to 'active' to highlight the Contact
    Us navigation link ❷, and the page content paragraph and definition list details
    ❸.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 联系我们模板与首页模板类似，唯一的不同是 $pageTitle 的值 ❶、用于高亮显示联系我们导航链接的变量 ❷ 以及页面内容段落和定义列表的详细信息
    ❸。
- en: Next, we’ll create the Secure Banking page, which is shown in [Figure 16-3](#fig16-3).
    We’ll add authorization logic later so that only logged-in users can view this
    page.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建安全银行页面，见[图 16-3](#fig16-3)。稍后我们将添加授权逻辑，以确保只有已登录的用户才能查看此页面。
- en: '![](../images/figure16-3.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure16-3.jpg)'
- en: 'Figure 16-3: The Secure Banking page of our website'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16-3：我们网站的安全银行页面
- en: Listing 16-7 creates the Secure Banking page. Save this code in *templates/
    secureBanking.php*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-7 创建了安全银行页面。将此代码保存在 *templates/secureBanking.php* 中。
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 16-7: The secureBanking.php template'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-7：secureBanking.php 模板
- en: Once again, this template is similar to those for the home page and Contact
    Us page. It differs only in the value of $pageTitle ❶ and the page content paragraph
    ❷. Since we don’t currently link to this page in the navigation bar, we don’t
    bother setting a variable to 'active'.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，这个模板与首页和联系我们页面的模板类似。唯一的不同是 $pageTitle 的值 ❶ 和页面内容段落 ❷。由于我们当前在导航栏中没有链接到此页面，因此无需设置变量为
    'active'。
- en: Developing the Login Form
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 开发登录表单
- en: Now we’ll create a login form for our website ([Figure 16-4](#fig16-4)). Though
    we’ll use some extra HTML and CSS to make the form look more professional, at
    its core it’ll be the same as the basic login form we created at the start of
    the chapter, with a Username field, a Password field, and a Log In submit button.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将为我们的网站创建一个登录表单（见[图 16-4](#fig16-4)）。虽然我们将使用一些额外的 HTML 和 CSS 使表单看起来更加专业，但其核心与我们在本章开始时创建的基本登录表单相同，包含用户名字段、密码字段和登录提交按钮。
- en: '![](../images/figure16-4.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure16-4.jpg)'
- en: 'Figure 16-4: The login page of our website'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16-4：我们网站的登录页面
- en: Listing 16-8 shows the code used to create the login form, saved in *templates/login.php*.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-8 展示了用于创建登录表单的代码，保存在 *templates/login.php* 中。
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Listing 16-8: The login.php template'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-8：login.php 模板
- en: 'The script starts much like our other templates: we assign a value to $pageTitle,
    set $loginLink to the string ''active'' so the Login link will be highlighted
    in the navigation bar, and read in and execute the *_header.php* template. Then
    we define a <div> to encapsulate the login form, styled with a custom formLogin
    CSS class (which we’ll create shortly). The login form itself is declared with
    the POST method and the /?action=login action ❶.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的启动方式与其他模板类似：我们为 $pageTitle 赋值，将 $loginLink 设置为字符串 'active'，以便登录链接在导航栏中被高亮显示，并读取和执行
    *_header.php* 模板。然后我们定义一个 <div> 元素来封装登录表单，并使用一个自定义的 formLogin CSS 类（我们稍后会创建）。登录表单本身声明为使用
    POST 方法并带有 /?action=login 动作 ❶。
- en: 'We’ll use this same action value (login) to both request the display of the
    login form and process the submitted form data, distinguishing between the requests
    by their HTTP method: GET will request the form be displayed, and POST will request
    processing of submitted login form data by the web application. We’ll implement
    this logic later in the chapter.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用相同的动作值（login）来请求显示登录表单并处理提交的表单数据，通过 HTTP 方法来区分请求：GET 请求显示表单，POST 请求处理提交的登录表单数据。我们将在本章后面实现这个逻辑。
- en: Our form is structured as three Bootstrap rows for the Username ❷, Password
    ❸, and Log In ❹ inputs, each represented with a <div> element. The Username and
    Password rows contain <label> and <input> elements. Notice that the inputs have
    a placeholder attribute whose value will appear as faint gray filler text, and
    that we specify type="password" as an attribute of the Password input box to obscure
    the password while it’s being typed in.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的表单结构由三个 Bootstrap 行组成，分别用于用户名 ❷、密码 ❸ 和登录 ❹ 输入，每个输入都由一个 <div> 元素表示。用户名和密码行包含
    <label> 和 <input> 元素。请注意，输入框有一个 placeholder 属性，其值将显示为淡灰色的填充文本，并且我们为密码输入框指定了 type="password"
    属性，以便在输入密码时进行隐藏。
- en: To finish up the login page, we’ll create the CSS stylesheet *public/css/ login.css*,
    shown in [Listing 16-9](#lis16-9). It adds custom styling to the login form. Recall
    that the common *_header.php* template reads in this stylesheet for every page.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成登录页面，我们将创建 CSS 样式表 *public/css/login.css*，如 [清单 16-9](#lis16-9) 所示。它为登录表单添加了自定义样式。回想一下，通用的
    *_header.php* 模板会为每个页面读取这个样式表。
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Listing 16-9: The CSS code in login.css'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 16-9：login.css 中的 CSS 代码
- en: The stylesheet defines the formLogin class referenced in [Listing 16-8](#lis16-8).
    This style sets the form background to light gray, adds padding, and sets a maximum
    width of 30 characters.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 样式表定义了 [清单 16-8](#lis16-8) 中引用的 formLogin 类。此样式将表单背景设置为浅灰色，添加填充，并设置最大宽度为 30
    个字符。
- en: Writing the Front Controller
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写前端控制器
- en: As usual, we’ll create a single front controller through which every request
    to our web application must arrive. Create *public/index.php* containing the code
    in [Listing 16-10](#lis16-10).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如同往常一样，我们将创建一个单一的前端控制器，所有对我们 Web 应用的请求都必须通过它。创建 *public/index.php*，其中包含 [清单
    16-10](#lis16-10) 中的代码。
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Listing 16-10: The index.php front-controller script'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 16-10：index.php 前端控制器脚本
- en: The script follows the usual pattern of reading in the function-declaration
    file, extracting the value of the action query-string parameter (if found in the
    request), and passing it to a switch statement that decides what to do. If the
    value is contact ❶, we invoke contact(), which reads in the template to display
    the Contact Us page. If the value is 'login' ❷, we test whether the HTTP request
    used the POST method, indicating the user has submitted username and password
    values through the login form, and invoke the processLogin() function if so. Otherwise,
    we invoke the loginForm() function to display the login page. Finally, the default
    case ❸ displays the home page by invoking the home() function.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本遵循通常的模式，读取函数声明文件，提取动作查询字符串参数的值（如果请求中存在），并将其传递给一个 `switch` 语句来决定执行的操作。如果值是
    contact ❶，我们调用 contact()，它会读取模板并显示联系我们页面。如果值是 'login' ❷，我们测试 HTTP 请求是否使用了 POST
    方法，表明用户已通过登录表单提交了用户名和密码，如果是这样，则调用 processLogin() 函数。否则，我们调用 loginForm() 函数显示登录页面。最后，默认情况
    ❸ 调用 home() 函数显示首页。
- en: Implementing the Logic Functions
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实现逻辑函数
- en: 'Next, we need to create the functions for implementing the logic of the website,
    saved in *src/functions.php*. Five of the functions are straightforward: they
    simply display the four main pages of the site (home page, Contact Us, login page,
    Secure Banking), plus an error message page. We’ll look at these functions first,
    shown in [Listing 16-11](#lis16-11).'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建实现网站逻辑的函数，这些函数保存在*src/functions.php*中。五个函数非常简单：它们只是显示网站的四个主要页面（主页、联系我们、登录页面、银行安全页面），以及一个错误信息页面。我们将首先查看这些函数，如[清单
    16-11](#lis16-11)所示。
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Listing 16-11: The display functions in functions.php'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 16-11：functions.php中的显示函数
- en: 'The first four functions all perform the same task: they use a require_once
    statement to read in and display one of the template scripts. Next, the showError()
    function expects a $message string as a parameter. It too uses a require_once
    statement to read in and display one of the template scripts. In this case, since
    $message is a parameter, it has scope when the *error.php* template is read in
    and executed, so the template can display the contents of the string inside $message.
    (We’ll create the *error.php* template shortly.)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 前四个函数都执行相同的任务：它们使用require_once语句读取并显示其中一个模板脚本。接下来，showError()函数期望一个$message字符串作为参数。它也使用require_once语句读取并显示其中一个模板脚本。在这种情况下，由于$message是一个参数，它在读取并执行*error.php*模板时具有作用域，因此模板可以显示$message字符串中的内容。（我们将很快创建*error.php*模板。）
- en: The second part of the *functions.php* script, shown in [Listing 16-12](#lis16-12),
    declares three functions for processing submitted usernames and passwords from
    the login form.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*functions.php*脚本的第二部分，如[清单 16-12](#lis16-12)所示，声明了三个用于处理从登录表单提交的用户名和密码的函数。'
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Listing 16-12: The second part of functions.php'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 16-12：functions.php的第二部分
- en: In this part of the script, we declare the getUsers() function ❶, which returns
    an array called $users whose keys are usernames and whose values are passwords.
    This is the list of users who can be authenticated through our website’s login
    system (by providing a valid username and its corresponding password). Although
    we’re using an array here, a real-world website would usually get username and
    password data from a database, and the passwords would be hashed for security
    reasons. We’ll look at how to do this in [Chapter 30](chapter30.xhtml).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分脚本中，我们声明了getUsers()函数❶，它返回一个名为$users的数组，数组的键是用户名，值是密码。这是可以通过我们网站的登录系统进行身份验证的用户列表（通过提供有效的用户名及其对应的密码）。虽然这里使用的是数组，但在实际网站中，通常会从数据库中获取用户名和密码数据，并且密码会出于安全原因进行哈希处理。我们将在[第30章](chapter30.xhtml)中学习如何实现这一点。
- en: Next, we define the processLogin() function ❷. In it, we use filter_input()
    to attempt to retrieve the username and password submitted via the login form,
    storing the values in the $username and $password variables. Then we pass these
    values to the validLoginCredentials() function ❸. If the function returns true,
    we’ve successfully authenticated the user, since they were able to provide a matching
    username-password pair. Therefore, we display the secure bank page to the user
    by invoking the secureBanking() function. Otherwise, if validLoginCredentials()
    returns false, we invoke the showError() function to display the error page, passing
    an error message stating the login credentials are invalid.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义了processLogin()函数❷。在这个函数中，我们使用filter_input()尝试获取通过登录表单提交的用户名和密码，并将这些值存储在$username和$password变量中。然后，我们将这些值传递给validLoginCredentials()函数❸。如果该函数返回true，我们就成功验证了用户，因为他们能够提供匹配的用户名-密码组合。因此，我们通过调用secureBanking()函数来显示银行安全页面。如果validLoginCredentials()返回false，则调用showError()函数显示错误页面，并传递一个错误信息，说明登录凭据无效。
- en: Notice that the error message doesn’t tell the user whether the problem is with
    the username or password. This follows the common security practice of *minimum
    information disclosure*. We shouldn’t inform the user (or hacker-bot or whatever
    is trying to log in) when they’ve found a valid username. Armed with that information,
    an attacker could repeatedly use the valid username with different passwords in
    an attempt to gain access to the system, which would be easier than needing to
    guess the username *and* the password each time.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，错误信息并没有告诉用户问题出在用户名还是密码。这遵循了*最小信息披露*的常见安全做法。我们不应该告诉用户（或黑客机器人或任何尝试登录的程序）他们是否已经找到了有效的用户名。有了这个信息，攻击者可以反复使用有效的用户名，搭配不同的密码尝试访问系统，这比每次都需要猜测用户名*和*密码要容易。
- en: The final function is validLoginCredentials() ❹, which expects two parameters,
    $username and $password. This is where we perform the all-important task of authenticating
    the user attempting to log in. We first retrieve the array of passwords indexed
    by the username from getUsers(), storing the array in the $users variable.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的函数是validLoginCredentials() ❹，它期望两个参数，$username和$password。这是我们执行至关重要的任务——验证尝试登录的用户的地方。我们首先从getUsers()获取以用户名为索引的密码数组，并将其存储在$users变量中。
- en: Then we test whether an element can be found in $users with the key $username.
    If no such key is found (isset($users[$username]) is false), we exit the if statement
    and the function will return false ❺, indicating the submitted username and password
    aren’t valid. However, if $username can be found in $users, its corresponding
    value is stored in the $storedPassword variable. Then we test whether the password
    received from the login form ($password) matches the retrieved password from the
    array ($storedPassword). If the two passwords match, we have valid credentials,
    so we return true. Otherwise, the script will drop out of the if statement and
    return false.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们测试是否可以在$users中找到键$username对应的元素。如果没有找到这样的键（isset($users[$username])为false），我们将退出if语句，函数返回false
    ❺，表示提交的用户名和密码无效。然而，如果$users中可以找到$username，相关的值将存储在$storedPassword变量中。然后我们测试从登录表单接收到的密码($password)是否与从数组中获取的密码($storedPassword)匹配。如果两个密码匹配，我们就拥有有效的凭证，因此返回true。否则，脚本将退出if语句并返回false。
- en: Creating the Error Page Template
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建错误页面模板
- en: Now we’ll create the template for the error page ([Figure 16-5](#fig16-5)).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建错误页面的模板（[图16-5](#fig16-5)）。
- en: '![](../images/figure16-5.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure16-5.jpg)'
- en: 'Figure 16-5: The error message page after invalid login credentials'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图16-5：无效登录凭证后的错误信息页面
- en: This template, saved in *templates/error.php*, is similar to the other page
    templates we’ve created, as shown in [Listing 16-13](#lis16-13).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模板保存在*templates/error.php*中，类似于我们之前创建的其他页面模板，如[清单16-13](#lis16-13)所示。
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Listing 16-13: The error.php template'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 清单16-13：error.php模板
- en: 'We set the value of $pageTitle to ''Error page'', then read in and execute
    the common *_header.php* template. In a pink Bootstrap alert–styled <div>, we
    output the string inside the $message variable ❶. All scripts that include this
    error page template should have first assigned a string to this variable (as we
    did, for example, in [Listing 16-12](#lis16-12) when we called showError() with
    the string ''invalid login credentials - try again'').  ### Storing Login Data
    with Sessions'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将$pageTitle的值设置为“错误页面”，然后读取并执行公共的*header.php*模板。在一个粉色的Bootstrap警告样式的<div>中，我们输出$message变量中的字符串
    ❶。所有包含此错误页面模板的脚本，应该首先将一个字符串赋值给此变量（正如我们在[清单16-12](#lis16-12)中所做的那样，当我们调用showError()并传递字符串“无效的登录凭证
    - 请再试一次”时）。 ### 使用会话存储登录数据'
- en: While our website at present allows a user to authenticate through the login
    form and visit the Secure Banking page, the site doesn’t remember the successful
    login credentials. Once the user clicks away from the bank details page, they’ll
    have to return to the login form and resubmit their credentials to view it again.
    To make the site more user-friendly, we can use PHP sessions to remember successful
    logins.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们的网站目前允许用户通过登录表单进行身份验证并访问安全银行页面，但该网站并不记住成功的登录凭证。一旦用户离开银行详细信息页面，他们将需要返回登录表单并重新提交凭证才能再次查看。为了使网站更加用户友好，我们可以使用PHP会话来记住成功的登录。
- en: If all logged-in users should have the same level of access, we can simply store
    the username to the session after a successful login, as we’ll do in this section.
    If different users have roles that come with different levels of authorization
    (for example, sales, supervisor, manager, administrator), we could store both
    the username and the corresponding role in the session. Then we would write logic
    so logged-in users can access only pages appropriate to their role. We’ll talk
    through this second approach in Exercise 3 at the end of the chapter.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有登录用户应该具有相同级别的访问权限，我们可以在成功登录后简单地将用户名存储到会话中，正如我们将在本节中所做的那样。如果不同的用户有不同的角色，并且每个角色对应不同的授权级别（例如销售、主管、经理、管理员），我们可以将用户名和相应的角色都存储在会话中。然后我们会编写逻辑，使已登录的用户只能访问适合其角色的页面。我们将在本章末的练习3中讨论第二种方法。
- en: Let’s add some code to save login data to the session. We’ll also add a link
    to the Secure Banking page for the navigation bar, but we’ll let the user visit
    that page only if they’ve logged in. Otherwise, we’ll display an authentication
    error message.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一些代码，将登录数据保存到会话中。我们还将为导航栏添加一个指向安全银行页面的链接，但只有在用户登录后才能访问该页面。否则，我们将显示身份验证错误信息。
- en: Updating the Front Controller
  id: totrans-109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新前端控制器
- en: We first need to edit our *index.php* front controller to handle navigation
    to the Secure Banking details page. Since we now plan to use sessions to remember
    login data, we also need to (re)start a PHP session at the beginning of the front-controller
    script. [Listing 16-14](#lis16-14) shows the updated script, with new code highlighted.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要编辑我们的*index.php*前端控制器，以处理导航到安全银行详情页面。由于我们现在计划使用会话来记住登录数据，因此我们还需要在前端控制器脚本的开始部分（重新）启动
    PHP 会话。[列表 16-14](#lis16-14) 显示了更新后的脚本，并突出显示了新增的代码。
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Listing 16-14: The updated index.php front-controller script'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-14：更新后的 index.php 前端控制器脚本
- en: At the start of the script, we (re)start a session. Then we add a new case to
    the switch statement for when the value of $action is 'secured' ❶. In this case,
    we call the isLoggedIn() function, which we’ll write shortly. If it returns true,
    we invoke secureBanking() to display the Secure Banking page. Otherwise, we display
    the error page with the message 'invalid login credentials - try again'.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本开始时，我们（重新）启动会话。然后我们为当 $action 的值为 'secured' 时，向 switch 语句添加一个新的 case❶。在这种情况下，我们调用
    isLoggedIn() 函数，稍后我们将编写该函数。如果返回 true，则调用 secureBanking() 显示安全银行页面。否则，我们显示错误页面，并提示“无效的登录凭据
    - 请重试”。
- en: Writing the Login Function
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写登录功能
- en: Now we need to write a new isLoggedIn() function to check whether a username
    is stored in the $_SESSION array, indicating a user has successfully logged in.
    We also need to update our processLogin() function so that when valid login credentials
    are processed, we store the username in $_SESSION. First, add isLoggedIn() to
    the end *src/functions.php*, as shown in [Listing 16-15](#lis16-15).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要编写一个新的 isLoggedIn() 函数，用来检查 $_SESSION 数组中是否存储了用户名，从而表明用户已成功登录。我们还需要更新我们的
    processLogin() 函数，以便在处理有效的登录凭据时，将用户名存储到 $_SESSION 中。首先，按照 [列表 16-15](#lis16-15)
    中所示，将 isLoggedIn() 添加到 *src/functions.php* 的末尾。
- en: '[PRE14]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Listing 16-15: The isLoggedIn() function'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-15：isLoggedIn() 函数
- en: The function uses a simple if...else statement based on whether a value can
    be found in the $_SESSION array for the string key 'username'. If so, we return
    true; if not, we return false. Notice that we don’t need to test the actual value
    stored in the session under the 'username' key. We simply test whether *any* value
    is stored for this key. We don’t care what the username is of the user who’s logged
    in, as long as they’ve successfully logged in.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数使用简单的 if...else 语句，基于是否可以在 $_SESSION 数组中找到 'username' 字符串键的值。如果找到了，我们返回 true；如果没有找到，我们返回
    false。请注意，我们不需要测试会话中 'username' 键下存储的实际值。我们只测试该键是否存储了*任何*值。我们并不关心已登录用户的用户名是什么，只要他们已经成功登录。
- en: Now edit the processLogin() function in *src/functions.php* as shown in [Listing
    16-16](#lis16-16) to store the username in the session after a successful login.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照 [列表 16-16](#lis16-16) 中所示，编辑 *src/functions.php* 中的 processLogin() 函数，以便在成功登录后将用户名存储到会话中。
- en: '[PRE15]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Listing 16-16: Updating the processLogin() function'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-16：更新 processLogin() 函数
- en: In the if branch of the function’s conditional logic, we store the submitted
    username in the $_SESSION array under the 'username' key. This way, the test in
    isLoggedIn() will pass after a successful login.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数条件逻辑的 if 分支中，我们将提交的用户名存储在 $_SESSION 数组的 'username' 键下。这样，isLoggedIn() 的测试将在成功登录后通过。
- en: Updating the Header Template
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新头部模板
- en: Let’s now edit the common *templates/_header.php* file to add a navigation bar
    link to the secured bank page, along with its associated CSS style variable. We’ll
    use an if statement so that this link will appear only while the user is logged
    in. We need to add this conditional nav-item after the navigation bar items for
    the home and Contact Us pages, as shown in [Listing 16-17](#lis16-17).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们编辑公共的 *templates/_header.php* 文件，添加一个指向安全银行页面的导航栏链接，并包含其相关的 CSS 样式变量。我们将使用
    if 语句，使得此链接仅在用户登录时才会出现。我们需要将这个条件导航项添加到主页和联系我们页面的导航栏项之后，如 [列表 16-17](#lis16-17)
    所示。
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Listing 16-17: Adding a conditional navigation link for the Secure Banking
    page in _header.php'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-17：在 _header.php 中为安全银行页面添加条件导航链接
- en: We use the null-coalescing operator to set the $securedLink variable to an empty
    string if it has no value already ❶. Then we add an if statement that uses our
    isLoggedIn() function to test whether the user is logged in ❷. If so, the navigation
    link in the body of the if statement will be displayed. The link adds an action=secured
    variable to the query string ❸. Notice also that the value of the $securedLink
    variable is part of the CSS class for this link. As with our other navigation
    links, if this variable contains the string 'active', the link will be highlighted.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用空合并操作符，如果$securedLink变量尚无值，则将其设置为空字符串 ❶。然后，我们添加一个if语句，使用isLoggedIn()函数测试用户是否已登录
    ❷。如果是，那么if语句中的导航链接将会显示。该链接会将action=secured变量添加到查询字符串中 ❸。还需要注意，$securedLink变量的值是该链接的CSS类的一部分。与其他导航链接一样，如果该变量包含字符串'active'，则该链接会被高亮显示。
- en: Updating the Banking Page Template
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新银行页面模板
- en: Now that we’ve added a navigation link for the Secure Banking page, we need
    to update the *templates/secureBanking.php* script to set the $securedLink variable
    to 'active'. This will highlight the page’s navigation link when the page is being
    viewed. Update the template as shown in [Listing 16-18](#lis16-18).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经为安全银行页面添加了一个导航链接，我们需要更新*templates/secureBanking.php*脚本，将$securedLink变量设置为'active'。这将在查看页面时高亮显示页面的导航链接。按[Listing
    16-18](#lis16-18)所示更新模板。
- en: '[PRE17]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Listing 16-18: Updating the secureBanking.php template'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 16-18：更新secureBanking.php模板
- en: The only change we need to make here is to add the statement that sets the $securedLink
    variable before we read in the shared header template.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要做的唯一更改是，在读取共享的头部模板之前，添加设置$securedLink变量的语句。
- en: Offering a Logout Feature
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提供登出功能
- en: If we offer the user a way to log in and have their login information remembered,
    we should also offer a way to log out. Logging out a user means setting the $_SESSION
    array to be empty so it no longer contains an element with the string key 'username'.
    To put this into practice, we need to add a new function, update the front controller,
    and create a logout link in the navigation bar.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们提供了用户登录并记住其登录信息的方式，我们也应该提供登出的方式。登出用户意味着将$_SESSION数组设置为空，这样它就不再包含字符串键'username'的元素。为了实现这一点，我们需要添加一个新函数，更新前端控制器，并在导航栏中创建一个登出链接。
- en: '#### Adding the Logout Function'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 添加登出功能'
- en: First, let’s write a logout() function in *src/functions.php* that clears the
    user’s data from the session. Add the code shown in [Listing 16-19](#lis16-19)
    to the end of the file.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们在*src/functions.php*中编写一个logout()函数，清除会话中的用户数据。将[Listing 16-19](#lis16-19)中的代码添加到文件末尾。
- en: '[PRE18]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Listing 16-19: The logout() function'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 16-19：logout()函数
- en: We set $_SESSION to an empty array, erasing the stored username from the session.
    Then we invoke the home() function to display the home page to the user after
    they’ve logged out.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将$_SESSION设置为空数组，清除会话中的存储用户名。然后，我们调用home()函数，在用户登出后显示主页。
- en: Updating the Front Controller
  id: totrans-140
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新前端控制器
- en: Now we need to add a new logout case to the switch statement in our *index.php*
    front controller. Update the file as shown in [Listing 16-20](#lis16-20).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在*index.php*前端控制器的switch语句中添加一个新的登出案例。按[Listing 16-20](#lis16-20)所示更新文件。
- en: '[PRE19]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Listing 16-20: The logout case in index.php'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 16-20：index.php中的登出案例
- en: We add a case that invokes that logout() function when the $action variable
    has the value 'logout' ❶.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个案例，当$action变量的值为'logout'时调用logout()函数 ❶。
- en: Displaying the Logout Link
  id: totrans-145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 显示登出链接
- en: Finally, we need to conditionally decide whether to offer the user a Login link
    or a Logout link, depending on whether the user is currently logged in. We therefore
    need to add an if statement to the common *templates/_header.php* file, as shown
    in [Listing 16-21](#lis16-21).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要根据用户是否已登录来有条件地决定是提供登录链接还是登出链接。因此，我们需要在公共的*templates/_header.php*文件中添加一个if语句，如[Listing
    16-21](#lis16-21)所示。
- en: '[PRE20]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Listing 16-21: The conditional Login/Logout navigation bar link in _header.php'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 16-21：_header.php中条件性登录/登出导航栏链接
- en: Inside the declaration of an HTML list item with the nav-item class, we use
    an if...else statement to test the value returned by the isLoggedIn() function.
    If the user is logged in ❶, we display the /?action=logout link. Otherwise, if
    the user isn’t logged in ❷, we display the /?action=login link as before.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明具有nav-item类的HTML列表项内部，我们使用if...else语句来测试isLoggedIn()函数返回的值。如果用户已登录 ❶，我们显示/?action=logout链接。否则，如果用户未登录
    ❷，我们像以前一样显示/?action=login链接。
- en: '[Figure 16-6](#fig16-6) shows the navigation bar when the user has successfully
    logged in and is visiting the secured bank details page.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[图16-6](#fig16-6) 显示了用户成功登录并访问安全银行详细信息页面时的导航栏。'
- en: '![](../images/figure16-6.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure16-6.jpg)'
- en: 'Figure 16-6: The navigation bar showing the Secure Banking and Logout links'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图16-6：显示“安全银行”和“注销”链接的导航栏
- en: Notice that the Logout link appears on the right instead of the Login link.
    Additionally, the Secure Banking link in the middle is highlighted, since that’s
    the page the user is currently viewing.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，注销链接出现在右侧，而不是登录链接。此外，中间的“安全银行”链接被突出显示，因为这是用户当前查看的页面。
- en: Displaying the Logged-in Username
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示已登录的用户名
- en: The final feature we’ll add to our website is to display the username of the
    logged-in user in the navigation bar, above the Logout link. To do this, we need
    a function to return the username stored in the $_SESSION array. We’ll also need
    to update the shared header template and add extra code to our CSS stylesheet.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为网站添加的最后一个功能是，在导航栏中显示已登录用户的用户名，位于注销链接的上方。为此，我们需要一个函数来返回存储在 $_SESSION 数组中的用户名。我们还需要更新共享的头部模板并向我们的
    CSS 样式表中添加额外的代码。
- en: Retrieving the Username
  id: totrans-156
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检索用户名
- en: To look up the current user’s username, add the function in [Listing 16-22](#lis16-22)
    to the end of the *src/functions.php* file.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找当前用户的用户名，请将 [列表 16-22](#lis16-22) 中的函数添加到 *src/functions.php* 文件的末尾。
- en: '[PRE21]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Listing 16-22: The usernameFromSession() function'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-22：usernameFromSession() 函数
- en: Here we define the usernameFromSession() function. Using isset(), we check whether
    a value can be found in the $_SESSION array under the 'username' key. If a value
    exists, it’s returned. Otherwise, the function returns an empty string.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了 usernameFromSession() 函数。使用 isset()，我们检查 $_SESSION 数组中是否可以在 'username'
    键下找到值。如果存在值，它将被返回。否则，函数将返回一个空字符串。
- en: Updating the Navigation Bar
  id: totrans-161
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新导航栏
- en: Listing 16-23 shows what we need to add to the navigation bar in the common
    *templates/_header.php* file to display the current username as well as the Logout
    link.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-23 显示了我们需要在公共 *templates/_header.php* 文件中添加什么，以显示当前用户名以及注销链接。
- en: '[PRE22]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Listing 16-23: Displaying the username in _header.php'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-23：在 _header.php 中显示用户名
- en: 'We declare an HTML <span> element, styled with the CSS username class (which
    we’ll create next). This displays the text You are logged in as: followed by the
    value returned from the usernameFromSession() function. Since we should display
    this text only when the user is logged in, there will always be a stored username,
    so usernameFromSession() should never return an empty string.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明一个 HTML <span> 元素，并使用 CSS username 类（我们接下来将创建）进行样式设置。它显示文本“您已登录为：”，后跟从 usernameFromSession()
    函数返回的值。由于我们应该仅在用户登录时显示此文本，因此始终会有存储的用户名，因此 usernameFromSession() 永远不应返回空字符串。
- en: Updating the CSS
  id: totrans-166
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新 CSS
- en: Finally, we need to add a CSS rule for the username class to *public/css/login.css*,
    as shown in [Listing 16-24](#lis16-24). This style rule colors the username text
    yellow (in contrast with the dark background of the navigation bar)..username
    {
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要为用户名类添加一个 CSS 规则到 *public/css/login.css*，如 [列表 16-24](#lis16-24) 中所示。此样式规则将用户名文本的颜色设置为黄色（与导航栏的深色背景形成对比）。username
    {
- en: '[PRE23]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Listing 16-24: The username CSS class in login.css'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-24：login.css 中的用户名 CSS 类
- en: '[Figure 16-7](#fig16-7) shows how the username is displayed in the navigation
    bar as a result of this CSS declaration.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '[图16-7](#fig16-7) 显示了由于此 CSS 声明，用户名是如何在导航栏中显示的。'
- en: '![](../images/figure16-7.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure16-7.jpg)'
- en: 'Figure 16-7: The username and Logout link in the navigation bar'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图16-7：导航栏中的用户名和注销链接
- en: The text showing the username appears above the Logout link. In this example,
    I’ve logged in with the username matt. This username was successfully stored in
    the $_SESSION array and then retrieved for display.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 显示用户名的文本出现在注销链接的上方。在此示例中，我使用用户名 matt 登录。这个用户名已成功存储在 $_SESSION 数组中，并随后被检索并显示出来。
- en: Summary
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we created a front controller–driven website that uses the
    login form method of authenticating a user’s identity. Although this is a small
    website with only a few pages, its basic architecture and approach to security
    mirror the way real-world, secure websites operate. We wrote functions to search
    for a match between submitted username and password credentials and a stored array
    of username and password pairs.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们创建了一个前端控制器驱动的网站，使用登录表单方法来验证用户身份。虽然这是一个只有几页的小网站，但其基本架构和安全性方法与现实世界中安全网站的运作方式类似。我们编写了函数来检查提交的用户名和密码是否与存储的用户名和密码对匹配。
- en: We stored details of a successfully authenticated user in a PHP session to remember
    when a user has logged in. Then we wrote program logic such as the isLoggedIn()
    function to allow our website to decide whether a user is authorized to view bank
    details. We used the same logic to decide whether to display a Login or a Logout
    link in the navigation bar.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将成功认证的用户的详细信息存储在 PHP 会话中，以便记住用户何时已登录。然后，我们编写了程序逻辑，例如 isLoggedIn() 函数，使我们的网站能够决定用户是否有权查看银行详情。我们使用相同的逻辑来决定是否在导航栏中显示登录或注销链接。
- en: Exercises
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习
- en: 1.   Add a second secured page to the website for this chapter that displays
    the solution to a math question (answer = -2!). In the navigation bar, add a link
    to the secured page that displays only when a user has successfully logged in.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 1.   为本章的网站添加第二个受保护的页面，显示一个数学问题的解答（答案 = -2!）。在导航栏中，添加一个链接到该受保护页面的链接，只有在用户成功登录时才会显示。
- en: 'Hint: You’ll need to add a new case to the *index.php* front controller and
    a new function to display the page in *functions.php*.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：你需要在 *index.php* 前端控制器中添加一个新的情况，并在 *functions.php* 中添加一个新的函数来显示页面。
- en: 2.   Add two additional authorized users to the system, one with a username
    of fred and a password of flintstone, and the other with a username of teddy and
    a password of cuddly.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 2.   为系统添加两个额外的授权用户，一个用户名为 fred，密码为 flintstone，另一个用户名为 teddy，密码为 cuddly。
- en: '3.   Try adding another layer of security to the website by having two user-authentication
    roles: ''USER'' and ''BANKER''. Any logged-in user can view the math solution
    page, but only those with the ''BANKER'' role can view the bank details page.
    Add two more authorized banker user credentials to the system, one with a username
    of banker1 and a password of rich, and the other with a username of banker2 and
    a password of veryrich.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 3.   通过为网站添加两个用户认证角色：'USER' 和 'BANKER'，尝试为网站添加另一层安全保护。任何已登录的用户都可以查看数学解题页面，但只有具有
    'BANKER' 角色的用户才能查看银行详情页面。为系统添加两个更多的授权银行用户凭据，一个用户名为 banker1，密码为 rich，另一个用户名为 banker2，密码为
    veryrich。
- en: 'Hint: Try the following:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：尝试以下方法：
- en: a.   Just as you have a getUsers() function, add a getBankers() function.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: a.   就像你有 getUsers() 函数一样，添加一个 getBankers() 函数。
- en: b.   Rename the validLoginCredentials() function to validUSERLoginCredentials().
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: b.   将 validLoginCredentials() 函数重命名为 validUSERLoginCredentials()。
- en: c.   Write a second version of this function as validBANKERLoginCredentials().
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: c.   编写该函数的第二个版本，命名为 validBANKERLoginCredentials()。
- en: 'd.   Change the logic in the processLogin() function to do the following: If
    a valid user logs in, store their username in the session and display the home
    page. If a valid banker logs in, store their username in the session, store their
    role in the session ($_SESSION[''role''] = ''BANKER''), and display the home page.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: d.   更改 processLogin() 函数中的逻辑，执行以下操作：如果一个有效用户登录，存储其用户名到会话中并显示主页。如果一个有效银行用户登录，存储其用户名到会话中，将其角色存储到会话中
    ($_SESSION['role'] = 'BANKER')，并显示主页。
- en: e.   Add a new getRoleFromSession() function that returns the role found in
    the session. If a value is found for $_SESSION['role'], that string is returned;
    otherwise, an empty string is returned.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: e.   添加一个新的 getRoleFromSession() 函数，用于返回会话中找到的角色。如果 $_SESSION['role'] 中有值，则返回该字符串；否则，返回一个空字符串。
- en: 'f.   Change the logic in the *index.php* front controller as follows: For the
    math solution, check whether a user is logged in. For the bank page, check whether
    the role of the logged-in user is ''BANKER''. You could write something like getRoleFromSession()
    == ''BANKER''.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: f.   更改 *index.php* 前端控制器中的逻辑如下：对于数学解题页面，检查用户是否已登录；对于银行页面，检查已登录用户的角色是否为 'BANKER'。你可以写类似
    `getRoleFromSession() == 'BANKER'` 的代码。
