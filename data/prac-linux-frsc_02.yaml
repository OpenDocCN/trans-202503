- en: '**2'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2'
- en: LINUX OVERVIEW**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: LINUX 概述
- en: '![Image](Images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common01.jpg)'
- en: This chapter provides an overview of Linux for digital forensic investigators.
    It describes the history of Linux, including the significance and influence of
    Unix, and establishes the definition of “modern Linux” used throughout this book.
    I explain the role of the Linux kernel, devices, systemd, and the command line
    shell. I also provide examples of shell and command line basics, followed by a
    tour of various desktop environments and an overview of the birth and evolution
    of popular Linux distributions. The chapter concludes with a focus on digital
    forensics applied to Linux systems, especially in comparison to forensic analysis
    of other operating systems such as Windows or macOS.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为数字取证调查员提供 Linux 的概述。它描述了 Linux 的历史，包括 Unix 的重要性和影响，并确立了本书中使用的“现代 Linux”定义。我将解释
    Linux 内核、设备、systemd 和命令行 shell 的作用。还将提供 shell 和命令行基础的示例，并对各种桌面环境进行简要介绍，回顾流行 Linux
    发行版的诞生与演变。本章最后重点讨论应用于 Linux 系统的数字取证，特别是与其他操作系统（如 Windows 或 macOS）的取证分析的比较。
- en: '**History of Linux**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Linux 的历史**'
- en: Understanding the historical roots of operating systems helps to explain the
    rationale and design decisions leading up to modern Linux systems. Software development,
    including operating system software, is largely an evolutionary process. Linux
    has been evolving since Linus Torvalds first announced it, but the core ideas
    and philosophy behind Linux started a few decades earlier.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 理解操作系统的历史根源有助于解释导致现代 Linux 系统的设计决策和原理。软件开发，包括操作系统软件，基本上是一个渐进的过程。自从 Linus Torvalds
    首次宣布 Linux 以来，Linux 一直在不断发展，但 Linux 背后的核心思想和哲学早在几十年前就已经开始。
- en: '***Unix Roots***'
  id: totrans-6
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Unix 根源***'
- en: The creation and development of Linux and the associated GNU tools were heavily
    influenced by Unix, and many Linux concepts and philosophies are taken directly
    from Unix. To appreciate the Unix roots and similarities to Linux, a section on
    Unix history is helpful.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 的创建与发展以及相关的 GNU 工具深受 Unix 的影响，许多 Linux 的概念和哲学直接来源于 Unix。为了理解 Unix 的根源及其与
    Linux 的相似性，了解 Unix 历史非常有帮助。
- en: The early ideas for Unix were born out of a joint research project in the United
    States between MIT, General Electric, and Bell Telephone Labs. The group was developing
    the Multics (Multiplexed Information and Computing Service) time-share operating
    system, but in the spring of 1969, Bell withdrew involvement, leaving its researchers
    in search of other projects. A Digital Equipment Corporation (DEC) PDP-7 minicomputer
    was available at the time, and Ken Thompson spent the summer of 1969 developing
    the basic system components that included a filesystem, the kernel, shell, editor,
    and assembler. This initial implementation (not yet named) was written in assembly
    language and intended to be less complex than Multics. Dennis Ritchie and several
    others joined in the early development effort to create a functioning system.
    In 1970, the name *Unix* was coined, jokingly referring to an “emasculated Multics.”
    Interest in the system had grown within Bell Labs, and a proposal to create a
    text processing system helped justify the purchase of a PDP-11 in the summer of
    1970.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Unix 的早期构思源于美国麻省理工学院（MIT）、通用电气公司（General Electric）和贝尔电话实验室（Bell Telephone Labs）之间的联合研究项目。该小组原本正在开发
    Multics（多路复用信息和计算服务）时分操作系统，但在 1969 年春季，贝尔电话实验室撤回了参与，导致其研究人员开始寻找其他项目。那时正好有一台数字设备公司（DEC）生产的
    PDP-7 小型计算机可用，Ken Thompson 在 1969 年夏天开发了包括文件系统、内核、shell、编辑器和汇编器在内的基本系统组件。这个初步实现（还未命名）是用汇编语言编写的，旨在比
    Multics 更简单。Dennis Ritchie 和其他几位开发者加入了早期的开发工作，创建了一个可运行的系统。1970 年，“Unix”这个名字被创造出来，戏谑地指代一个“阉割版的
    Multics”。Unix 系统在贝尔实验室内的兴趣逐渐增长，1970 年夏季提出的创建文本处理系统的提案为购买一台 PDP-11 计算机提供了理由。
- en: The earliest Unix editions were written in assembly language, which was difficult
    to understand and ran only on hardware for which the code was intended. Dennis
    Ritchie created the C programming language, a high-level language that was easier
    to program and could be compiled into machine code for any hardware architecture.
    The kernel and tools were rewritten in C, which made Unix “portable,” meaning
    it could be compiled and run on any machine with a C compiler. In 1974, Ken Thompson
    and Dennis Ritchie submitted a paper to the Association for Computing Machinery
    (ACM) describing the Unix system.^([1](footnotes.xhtml#ch02foot_01)) The paper
    was only 11 pages long and described the basic design principles and operation
    of Unix. The filesystem was a central component of Unix, and everything, including
    hardware devices, was accessible as a file in a hierarchical tree. The paper described
    the shell, file redirection and the concept of pipes, and the execution of binary
    files and shell scripts.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最早的 Unix 版本是用汇编语言编写的，这种语言难以理解，且仅能在特定硬件上运行。Dennis Ritchie 创造了 C 编程语言，这是一种更易于编程的高级语言，可以被编译成适用于任何硬件架构的机器代码。内核和工具被重写为
    C 语言，这使得 Unix 变得“可移植”，意味着它可以被编译并运行在任何具有 C 编译器的机器上。1974 年，Ken Thompson 和 Dennis
    Ritchie 向计算机协会（ACM）提交了一篇描述 Unix 系统的论文^([1](footnotes.xhtml#ch02foot_01))。这篇论文只有
    11 页，描述了 Unix 的基本设计原则和操作方式。文件系统是 Unix 的核心组件，所有东西，包括硬件设备，都可以作为一个文件在层级树中访问。论文描述了
    shell、文件重定向、管道概念、以及二进制文件和 shell 脚本的执行。
- en: Publishing the Unix paper attracted the attention of academia, and free copies
    of Unix, including source code, were given to universities for research purposes
    (paying only for shipping and distribution media—much like Linux distributions
    later on). Further research and development by academic researchers grew, and
    Bill Joy at the University of California at Berkeley released a version of Unix
    called the Berkeley Software Distribution, or BSD. Over time, BSD grew to include
    extensive network hardware support and TCP/IP protocols for the ARPANET (which
    would become the internet as we know it today). Interest in network connectivity
    and BSD’s free implementation of TCP/IP was important to universities who wanted
    to connect to the early internet. BSD started to become a community-driven operating
    system with contributions from researchers and students from across academia and
    from around the world. One of the original BSD developers, Kirk McKusick, has
    a talk titled “A Narrative History of BSD” (multiple versions are available on
    YouTube).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 发布 Unix 论文引起了学术界的关注，并且包括源代码在内的 Unix 免费副本被提供给大学用于研究目的（只需支付运费和分发介质费用——类似于后来的 Linux
    发行版）。学术研究人员进一步的研究与开发推动了 Unix 的发展，伯克利加利福尼亚大学的 Bill Joy 发布了一个版本的 Unix，称为伯克利软件发行版（Berkeley
    Software Distribution，简称 BSD）。随着时间的推移，BSD 增加了广泛的网络硬件支持和 ARPANET（后来成为我们今天所知的互联网）的
    TCP/IP 协议。网络连接和 BSD 对 TCP/IP 的免费实现引起了大学的兴趣，尤其是那些希望连接到早期互联网的学校。BSD 开始成为一个由全球学术界和世界各地的研究人员与学生共同驱动的操作系统。原始的
    BSD 开发者之一，Kirk McKusick，曾发表过一个名为《BSD 的叙事历史》（多个版本可在 YouTube 上观看）的演讲。
- en: Before Unix, selling computer products involved the development of hardware
    and writing an operating system (both proprietary). As Unix popularity grew, companies
    building proprietary computers began using Unix as the operating system.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unix 之前，销售计算机产品需要开发硬件并编写操作系统（两者都是专有的）。随着 Unix 的普及，构建专有计算机的公司开始使用 Unix 作为操作系统。
- en: An explosion of Unix systems hit the marketplace, including Silicon Graphics
    Irix, DEC Ultrix, Sun Microsystems SunOS and Solaris, IBM AIX, HP UX, and others.
    Versions of Unix software for commodity PCs were also available, including Microsoft’s
    Xenix, Santa Cruz Operation (SCO) Unix, Univel Unixware, and others. This commercialization
    led to the issue of Unix licensing and several decades-long legal sagas, first
    with BSD and AT&T and later between SCO, Novell, and IBM.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一大波 Unix 系统涌入市场，包括 Silicon Graphics 的 Irix、DEC 的 Ultrix、Sun Microsystems 的 SunOS
    和 Solaris、IBM 的 AIX、HP 的 UX 等等。针对普通 PC 的 Unix 软件版本也已推出，包括微软的 Xenix、Santa Cruz
    Operation（SCO）Unix、Univel Unixware 等等。这种商业化导致了 Unix 许可问题，并引发了数十年的法律纷争，首先是 BSD
    与 AT&T 之间的纠纷，后来是 SCO、Novell 和 IBM 之间的纠纷。
- en: The commercial proliferation led to many different Unix “flavors,” as each company
    introduced proprietary modifications for competitive advantage. Unix started to
    become fragmented and incompatible, leading to the creation of standards like
    POSIX, The Open Group’s Single Unix Specification, the Common Desktop Environment
    (CDE), and others.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 商业化的普及导致了许多不同的Unix“版本”，因为每个公司都推出了专有的修改以获得竞争优势。Unix开始变得碎片化和不兼容，促使了POSIX、The Open
    Group的单一Unix规范、通用桌面环境（CDE）等标准的诞生。
- en: Today, Unix is still found in enterprise computing environments. Steve Jobs
    made the decision to use Unix for NeXT computers, and this was adopted as the
    basis for Apple’s OS X Macintosh operating system and later for Apple’s iOS mobile
    devices.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，Unix仍然出现在企业计算环境中。史蒂夫·乔布斯决定在NeXT计算机上使用Unix，并且这一决策被作为Apple OS X Macintosh操作系统的基础，后来也被用于Apple的iOS移动设备。
- en: The cost of commercial Unix led to the creation of free alternatives for hobbyists,
    students, researchers, and others. Two popular alternatives for a free Unix-like
    system were 386BSD and Minix. A series of articles in *Dr. Dobb’s Journal* described
    the 386BSD system, which was based on one of the last free releases of BSD Unix.
    Two user communities were writing patches for 386BSD and eventually formed FreeBSD
    and NetBSD, both of which are actively developed today.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 商业Unix的高昂成本促使了为爱好者、学生、研究人员等创造免费的替代方案。两个流行的免费Unix类系统替代品是386BSD和Minix。一系列文章在*《Dr.
    Dobb’s Journal》*中描述了基于BSD Unix最后一次免费发布版本的386BSD系统。两个用户社区为386BSD编写补丁，并最终形成了FreeBSD和NetBSD，这两个系统至今仍在积极开发中。
- en: Minix was a Unix clone developed by Andrew Tanenbaum for university teaching
    and research. It was initially intended to replace AT&T Unix, which Tanenbaum
    had used to teach an operating systems class. Minix is still actively developed
    today, and it played a key role in the creation of Linux.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Minix是由安德鲁·塔南鲍姆开发的Unix克隆系统，用于大学的教学和研究。最初它旨在取代AT&T Unix，塔南鲍姆曾用它来教授操作系统课程。Minix至今仍在积极开发中，并且在Linux的创建过程中发挥了重要作用。
- en: In 1983, Richard Stallman created the GNU project, and named it using the recursive
    acronym “GNU’s Not Unix!". The goal of GNU was to create a free Unix-like operating
    system complete with a kernel and userspace. By the early 1990s, the userspace
    utilities were largely complete and only the kernel was missing. This missing
    piece was about to be completed by a young student in Finland.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 1983年，理查德·斯托曼创建了GNU项目，并使用递归缩写“GNU’s Not Unix！”命名该项目。GNU的目标是创建一个完整的类Unix自由操作系统，包括内核和用户空间。到了1990年代初，用户空间工具基本完成，唯一缺失的就是内核。这个缺失的部分即将由芬兰的一名年轻学生完成。
- en: The different Unix systems, Unix clones, and other Unix-like systems all share
    the same underlying *Unix philosophy*. In essence, this philosophy encourages
    programmers to create small programs that do one thing well and can interact with
    one another. Free and open source software has a tendency to follow this philosophy,
    and this philosophy can (or should) be applied to writing digital forensics software,
    as well. For example, The Sleuth Kit (TSK) is a forensics toolkit consisting of
    many small tools, each one performing a specific task, with the output from one
    tool being usable as input for another. Commercial software has a tendency to
    be the opposite, which often means massive monolithic tools that try to do everything
    and avoid interoperability for competitive reasons (although APIs are becoming
    more common).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的Unix系统、Unix克隆和其他类Unix系统都共享相同的*Unix哲学*。从本质上讲，这种哲学鼓励程序员创建能够做一件事且做得很好的小程序，并且这些程序能够相互作用。自由和开源软件往往遵循这一哲学，而这一哲学同样可以（或应该）应用于编写数字取证软件。例如，The
    Sleuth Kit（TSK）是一个由许多小工具组成的取证工具包，每个工具执行一个特定任务，一个工具的输出可以作为另一个工具的输入。商业软件往往是相反的，通常意味着庞大的单体工具，这些工具试图做所有事情，并出于竞争原因避免互操作性（尽管API正在变得越来越普遍）。
- en: '***Early Linux Systems***'
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***早期的Linux系统***'
- en: Linus Torvalds created Linux while studying at the University of Helsinki. He
    wanted an alternative to Minix that had a different license, and he preferred
    a monolithic kernel design (in contrast to Tanenbaum who favored a microkernel).
    He started writing his own kernel in 1991, using Minix as a development platform.
    After several months, he mentioned it in a Minix news group and asked for feedback.
    Some weeks later, he posted an announcement with an FTP site containing the code
    and a call to contribute:^([2](footnotes.xhtml#ch02foot_02))
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Linus Torvalds 在赫尔辛基大学学习时创建了 Linux。他希望有一个与 Minix 不同许可的替代品，并且他更倾向于单体内核设计（与偏好微内核的
    Tanenbaum 相对）。他于 1991 年开始编写自己的内核，使用 Minix 作为开发平台。几个月后，他在 Minix 新闻组中提到这一项目并请求反馈。几周后，他发布了一份公告，提供了一个包含代码的
    FTP 网站，并呼吁大家参与贡献：^([2](footnotes.xhtml#ch02foot_02))
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Linus Torvalds created the Linux kernel, which adopted the concepts and philosophy
    of Unix. GNU tools, like the C compiler, were required to build it. Other GNU
    tools, like the shell, were necessary to actually use the operating system. A
    community of curious and excited developers grew around this project, contributing
    patches and testing the code on different hardware. By 1994, the first kernel
    considered mature enough for general use was released as version 1.0\. Linux kernel
    development evolved to include multiprocessor support and was ported to other
    CPU architectures. Developers were implementing support for every hardware device
    possible (proprietary undocumented hardware was a challenge and still is). This
    enthusiastic community under the direction of Linus Torvalds continues to develop
    and improve the Linux kernel we have today.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Linus Torvalds 创建了 Linux 内核，该内核采纳了 Unix 的概念和哲学。构建 Linux 需要 GNU 工具，如 C 编译器。其他
    GNU 工具，如 shell，则是实际使用操作系统所必需的。围绕这一项目，形成了一个充满好奇和兴奋的开发者社区，他们为项目贡献补丁并在不同硬件上测试代码。到
    1994 年，第一个被认为足够成熟的内核版本 1.0 发布。Linux 内核的开发不断演变，支持多处理器并移植到其他 CPU 架构。开发者们在为各种硬件设备提供支持（专有且未记录的硬件仍然是一个挑战）方面不断努力。这个充满热情的社区在
    Linus Torvalds 的指导下，持续开发并改进我们今天使用的 Linux 内核。
- en: '***Early Desktop Environments***'
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***早期桌面环境***'
- en: In the early days of Unix, graphics terminals (like the Tektronix 4010 series)
    were separate devices used by graphics programs like computer-aided design (CAD).
    Graphical terminals were not part of the user interface like graphical user interfaces
    (GUIs) today. Many experimental and proprietary windowing and desktop systems
    were available by the mid-1980s, but the introduction of the X Window System changed
    how users interfaced with computers.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unix 的早期，图形终端（如 Tektronix 4010 系列）是由计算机辅助设计（CAD）等图形程序使用的独立设备。图形终端不像今天的图形用户界面（GUI）那样是用户界面的一部分。到了
    1980 年代中期，许多实验性和专有的窗口系统和桌面系统已可使用，但 X 窗口系统的引入改变了用户与计算机交互的方式。
- en: In 1984, MIT introduced the open standard X, and after several years of rapid
    development (11 versions), X11 was released in 1987\. This provided a standard
    protocol for graphical programs (the X11 client) to be displayed on a screen (the
    X11 server). The X11 protocol could be built into an application and could display
    windows on any X11 server, even over a network. X11 became generally adopted among
    commercial Unix vendors producing graphical workstations. Because building workstations
    included developing graphics hardware, the X11 server was often a proprietary
    component of the operating system.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 1984 年，麻省理工学院（MIT）推出了开放标准 X，经过几年快速发展（发布了 11 个版本），X11 于 1987 年发布。它为图形程序（X11 客户端）提供了一个标准协议，使其能够在屏幕上显示（X11
    服务器）。X11 协议可以集成到应用程序中，并能够在任何 X11 服务器上显示窗口，甚至通过网络进行显示。X11 在生产图形工作站的商业 Unix 供应商中得到了广泛采用。由于工作站的构建涉及到图形硬件的开发，X11
    服务器通常是操作系统的专有组件。
- en: Free Unix-like operating systems needed a free X11 server for commodity PC graphic
    cards. In 1992, the XFree86 project was created to fill this gap and allow the
    development of free X11 desktops on PCs running BSDs and Linux. In 2004, the [X.Org](http://X.Org)
    Foundation (*[https://x.org/](https://x.org/)*) was created and forked a version
    of XFree86 as an X11 reference implementation. A change in license and disagreement
    among XFree86 developers caused [X.Org](http://X.Org) to become the de facto standard
    Linux X11 implementation.^([3](footnotes.xhtml#ch02foot_03))
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 自由的类 Unix 操作系统需要一个免费的 X11 服务器来支持普通的 PC 图形卡。在 1992 年，XFree86 项目应运而生，填补了这一空白，使得在运行
    BSD 和 Linux 的 PC 上开发自由的 X11 桌面成为可能。2004 年，[X.Org](http://X.Org) 基金会（* [https://x.org/](https://x.org/)*）成立，并从
    XFree86 中分叉出了一个 X11 的参考实现。XFree86 开发者之间的许可更改和分歧导致 [X.Org](http://X.Org) 成为事实上的
    Linux X11 实现标准。^([3](footnotes.xhtml#ch02foot_03))
- en: X11 is simply a protocol standard. It does not provide window management or
    a desktop environment. To manage X11 windows, a separate window manager is needed.
    A *window manager* (just another X11 client application) speaks the X11 protocol
    and is responsible for basic window functions such as resizing, moving, and minimizing.
    Window managers also provided window decorations, title bars, buttons, and other
    GUI features. Multiple window managers became available to offer choice in Linux
    distributions. Popular window managers in the first Linux distributions, commonly
    referred to as distros, were TWM and FVWM. For more information about classic
    window managers, see *[http://www.xwinman.org/](http://www.xwinman.org/)*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: X11 仅仅是一个协议标准，它并不提供窗口管理或桌面环境。为了管理 X11 窗口，需要一个单独的窗口管理器。*窗口管理器*（只是另一个 X11 客户端应用程序）使用
    X11 协议，并负责基本的窗口功能，如调整大小、移动和最小化。窗口管理器还提供窗口装饰、标题栏、按钮和其他图形界面功能。多个窗口管理器的出现为 Linux
    发行版提供了选择。在最早的 Linux 发行版中，常用的窗口管理器是 TWM 和 FVWM。如需了解经典窗口管理器的更多信息，请参阅 *[http://www.xwinman.org/](http://www.xwinman.org/)*。
- en: X11 applications are built with graphical *widgets* to create menus, buttons,
    scroll bars, toolbars, and so on. These widgets give the application a unique
    look and feel. Developers are free to create their own widgets, but most use the
    libraries included with a system. Early examples of widget toolkits include Athena,
    OPEN LOOK, and Motif. X11 desktop applications can use any style of graphical
    widget they want; no system-wide standard is enforced, which can lead to an inconsistent
    desktop appearance when every application uses a different toolkit. The two most
    common toolkits used with Linux today are GTK (used with GNOME) and Qt (used with
    KDE).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: X11 应用程序使用图形 *小部件* 构建菜单、按钮、滚动条、工具栏等。这些小部件赋予应用程序独特的外观和感觉。开发者可以自由创建自己的小部件，但大多数开发者使用系统自带的库。早期的小部件工具包包括
    Athena、OPEN LOOK 和 Motif。X11 桌面应用程序可以使用任何图形小部件的风格；没有强制的系统级标准，这可能导致每个应用程序使用不同工具包时，桌面外观不一致。如今，Linux
    上最常用的两个工具包是 GTK（用于 GNOME）和 Qt（用于 KDE）。
- en: However, having window managers and widget toolkits was not enough to provide
    the full desktop experience that users expected. Functionality was needed for
    application launchers, trash cans, wallpaper, themes, panels, and other typical
    elements you’d expect in a modern computer desktop. The Unix community created
    CDE to provide a standard full-featured desktop that was vendor independent. This
    was (initially) not open, so the free and open source community developed its
    own desktop standards (XDG and *[freedesktop.org](http://freedesktop.org)*).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，单单拥有窗口管理器和小部件工具包还不足以提供用户所期待的完整桌面体验。还需要为应用启动器、回收站、壁纸、主题、面板以及其他现代计算机桌面中常见的元素提供功能。Unix
    社区创建了 CDE，提供一个标准的、功能齐全的桌面环境，且不依赖于厂商。这最初并不是开放的，因此自由和开源社区开发了自己的桌面标准（XDG 和 *[freedesktop.org](http://freedesktop.org)*）。
- en: '**Modern Linux Systems**'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**现代 Linux 系统**'
- en: The Linux kernel and Linux distributions have advanced beyond being basic Unix
    clones. Many new technologies have been independently developed for Linux that
    are not derived from Unix. Many legacy technologies also have been replaced in
    newer versions of Linux. These technological advancements help differentiate traditional
    Linux from modern Linux.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 内核和 Linux 发行版已经不再仅仅是基础的 Unix 克隆。许多新技术已独立于 Unix 为 Linux 开发。许多传统的技术也在较新的
    Linux 版本中被替代。这些技术进步帮助区分了传统 Linux 和现代 Linux。
- en: Rather than covering forensic analysis topics involving traditional Unix and
    early Linux systems, this book focuses on the forensic analysis of modern Linux
    system components. The rest of this section provides an overview of these new
    or different components for those who are less familiar with modern Linux.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不涉及传统 Unix 和早期 Linux 系统的取证分析话题，而是集中在现代 Linux 系统组件的取证分析。接下来的部分为那些不太熟悉现代 Linux
    系统的人提供这些新或不同组件的概述。
- en: '***Hardware***'
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***硬件***'
- en: To analyze a Linux system in a forensic context, you want to determine (as accurately
    as possible) what hardware has been physically installed or attached to the system
    since it was installed. The kernel manages hardware devices and leaves traces
    of added or removed hardware in the logs.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在取证环境下分析 Linux 系统时，你需要尽可能准确地确定自系统安装以来，系统中物理安装或连接了哪些硬件。内核管理硬件设备，并在日志中留下已添加或移除硬件的痕迹。
- en: 'Internal devices might be integrated on the mainboard (onboard), plugged in
    to PCI Express slots (including M.2 slots), plugged in to SATA ports, or attached
    to other pin-blocks on the mainboard. Examples of internal hardware components
    to identify may include:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 内部设备可能集成在主板上（板载），插入 PCI Express 插槽（包括 M.2 插槽），插入 SATA 接口，或连接到主板上的其他针脚块。需要识别的内部硬件组件示例可能包括：
- en: Mainboard (describing the board itself)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主板（描述主板本身）
- en: Onboard devices (integrated into mainboard)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 板载设备（集成到主板）
- en: PCI Express devices (graphic cards and other PCIe cards)
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PCI Express 设备（显卡和其他 PCIe 卡）
- en: Internal drives (SATA or NVMe)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部驱动器（SATA 或 NVMe）
- en: Network devices (wireless or wired)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络设备（无线或有线）
- en: Linux does not require a reinstallation when a mainboard is replaced (upgraded)
    with another one, so more than one mainboard might be identified. Physical examination
    of the mainboard may also include reading out the NVRAM to analyze the UEFI variables
    and other BIOS information.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 在主板更换（升级）为另一块主板时不需要重新安装，因此可能会识别到不止一块主板。主板的物理检查还可能包括读取 NVRAM 来分析 UEFI 变量和其他
    BIOS 信息。
- en: Another internal interface is the Advanced Configuration and Power Interface
    (ACPI), which was developed so that operating systems could control various aspects
    of power management to the system and components. Linux supports the ACPI interface
    and typically manages events through systemd or the acpid daemon.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个内部接口是高级配置和电源接口（ACPI），该接口的开发目的是使操作系统能够控制系统和组件的各种电源管理方面。Linux 支持 ACPI 接口，并通常通过
    systemd 或 acpid 守护进程管理事件。
- en: 'External hardware components are typically attached by USB, Thunderbolt, DisplayPort,
    HDMI, or other external connectors. Examples of external hardware components or
    peripherals to identify may include:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 外部硬件组件通常通过 USB、Thunderbolt、DisplayPort、HDMI 或其他外部连接器连接。需要识别的外部硬件组件或外设示例可能包括：
- en: External storage media
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部存储介质
- en: Mouse and keyboard
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼠标和键盘
- en: Video monitors
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示器
- en: Printers and scanners
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印机和扫描仪
- en: Webcams, cameras, and video equipment
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络摄像头、相机和视频设备
- en: Audio devices
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音频设备
- en: Mobile devices
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动设备
- en: Any other external peripheral devices
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何其他外部外设
- en: The identification of hardware from a forensically acquired disk image will
    rely on traces in the logs, configuration files, and other persistent data. Physical
    examination of seized hardware should correlate with traces found on the forensic
    image.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 从取证获取的磁盘镜像中识别硬件将依赖于日志、配置文件和其他持久数据中的痕迹。对扣押硬件的物理检查应与取证镜像中发现的痕迹相符。
- en: '***The Kernel***'
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***内核***'
- en: 'The kernel is the heart of a Linux system. It provides the interface between
    the user programs (called *userspace* or *userland*) and the hardware. The kernel
    detects when hardware is attached or removed from a system and makes those changes
    visible to the rest of the system. Overall, the kernel is responsible for many
    tasks, including the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 内核是 Linux 系统的核心。它提供用户程序（称为 *用户空间* 或 *用户域*）与硬件之间的接口。内核能够检测何时有硬件被连接或移除，并使这些变化对系统的其他部分可见。总体而言，内核负责许多任务，包括以下内容：
- en: Memory, CPU, and process management
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存、CPU 和进程管理
- en: Hardware device drivers
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件设备驱动程序
- en: Filesystems and storage
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件系统和存储
- en: Network hardware and protocols
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络硬件和协议
- en: Security policy enforcement
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全策略执行
- en: Human interface and peripheral devices
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人机接口和外设
- en: '[Figure 2-1](ch02.xhtml#ch02fig01) shows an architectural overview of the Linux
    kernel and its subsystems.^([4](footnotes.xhtml#ch02foot_04))'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2-1](ch02.xhtml#ch02fig01) 显示了 Linux 内核及其子系统的架构概览。^([4](footnotes.xhtml#ch02foot_04))'
- en: '![Image](Images/ch02fig01.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/ch02fig01.jpg)'
- en: '*Figure 2-1: Linux kernel architecture (modified from* [https://github.com/makelinux/linux_kernel_map/](https://github.com/makelinux/linux_kernel_map/)*)*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-1：Linux 内核架构（修改自* [https://github.com/makelinux/linux_kernel_map/](https://github.com/makelinux/linux_kernel_map/)*)*'
- en: The kernel has gained many new features over the years. The ability to perform
    advanced isolation of processes using cgroups and namespaces forms the basis for
    containers. New filesystems such as btrfs were designed specifically for Linux
    systems. The btrfs filesystem merges storage features previously found in separate
    components (like RAID or LVM) to provide snapshots, subvolumes, and other volume
    management capabilities. New firewall technology like nftables is replacing the
    traditional iptables with a faster, more efficient operation and cleaner rulesets.
    New VPN technology like WireGuard is a simpler alternative to the aging IPsec
    and OpenVPN standards.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，内核已经获得了许多新功能。使用 cgroups 和 namespaces 执行进程高级隔离的能力为容器奠定了基础。像 btrfs 这样的新文件系统专门为
    Linux 系统设计。btrfs 文件系统将以前在单独组件（如 RAID 或 LVM）中找到的存储功能合并，提供快照、子卷和其他卷管理功能。像 nftables
    这样的新防火墙技术正在以更快、更高效的操作和更简洁的规则集取代传统的 iptables。像 WireGuard 这样的新 VPN 技术是对老化的 IPsec
    和 OpenVPN 标准的更简单替代方案。
- en: The kernel is executed by a bootloader when a system is started. The bootloader
    technology has transitioned from the traditional MBR (BIOS execution of sector
    zero) to the more advanced UEFI (firmware using GPT partitions, UEFI binaries,
    and EFI variables). During operation, the kernel can be dynamically changed and
    configured, and more functionality can be added with loadable kernel modules.
    When a system is shut down, the kernel is the last thing to stop running.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 内核由引导加载程序在系统启动时执行。引导加载程序技术已经从传统的 MBR（BIOS 执行零扇区）过渡到更先进的 UEFI（固件使用 GPT 分区、UEFI
    二进制文件和 EFI 变量）。在运行过程中，内核可以动态地更改和配置，并且可以通过可加载内核模块添加更多功能。当系统关闭时，内核是最后停止运行的部分。
- en: This book will cover all of these newer technologies from a digital forensic
    investigation perspective.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将从数字取证调查的角度，覆盖所有这些新的技术。
- en: '***Devices***'
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***设备***'
- en: A Linux device is a special file, typically located in */dev/*, that provides
    access to device drivers in the kernel. The device drivers in the kernel interface
    with physical hardware components or create pseudo-devices. Device files are created
    as either a *block* or *character* device type. Block devices move data in chunks
    (buffered blocks), and character devices move data in a continuous stream (unbuffered).
    Linux storage devices (hard disks, SSDs, and so forth) are typically block devices.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 设备是一个特殊文件，通常位于 */dev/* 目录下，提供对内核中设备驱动程序的访问。内核中的设备驱动程序与物理硬件组件接口，或创建伪设备。设备文件可以创建为
    *块设备* 或 *字符设备* 类型。块设备以块（缓冲区块）的形式传输数据，字符设备以连续流（无缓冲区）的形式传输数据。Linux 存储设备（硬盘、SSD 等）通常是块设备。
- en: Most Linux forensic tools are designed to operate directly on forensically acquired
    image files. However, many useful troubleshooting, debugging, and diagnostic tools
    operate only on Linux device files. In those situations, the suspect drive either
    needs to be attached to the analysis system with a write blocker, or a loop device
    can be used. Linux is able to associate a regular file with a special loop device
    that behaves like a physically attached drive, which makes it possible to access
    forensic image files with tools that normally operate only on devices.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Linux 法医工具设计用于直接在法医获取的镜像文件上操作。然而，许多有用的故障排除、调试和诊断工具仅在 Linux 设备文件上操作。在这些情况下，嫌疑驱动器需要连接到分析系统，并使用写保护器，或者可以使用循环设备。Linux
    可以将常规文件与特殊的循环设备关联，该设备表现得像一个物理连接的驱动器，从而使得可以使用通常只在设备上操作的工具访问法医镜像文件。
- en: 'You can use the `losetup` tool to create loop devices. In this example, a loop
    device is created for a forensically acquired image file named *image.raw*:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `losetup` 工具来创建循环设备。在这个例子中，为一个法医获取的图像文件命名为 *image.raw* 的文件创建了一个循环设备：
- en: '[PRE1]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `sudo` command executes `losetup` as a privileged user (root). The first
    two flags tell `losetup` to map the image file to the next available loop device
    it finds (*/dev/loop0*) in a read-only manner. The last two flags instruct the
    kernel to scan the image’s partition table and show the loop device’s name on
    completion (*/dev/loop0*).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo`命令以特权用户（root）身份执行`losetup`。前两个标志告诉`losetup`将镜像文件映射到下一个可用的环回设备（*/dev/loop0*），并且是只读方式。最后两个标志指示内核扫描镜像的分区表，并在完成时显示环回设备的名称（*/dev/loop0*）。'
- en: 'The following `ls` command shows the partition loop devices that were created
    (`loop0p1` and `loop0p2`). You can view the partition table on */dev/loop0* with
    regular forensic tools, as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的`ls`命令显示了创建的分区环回设备（`loop0p1`和`loop0p2`）。你可以使用常规的取证工具查看*/dev/loop0*上的分区表，具体如下：
- en: '[PRE2]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here the `fdisk`^([5](footnotes.xhtml#ch02foot_05)) command reads the device
    like a normal attached drive and displays the partition table of the image file.
    Any tool that works with block devices should also be able to access image files
    in this manner.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的`fdisk`^([5](footnotes.xhtml#ch02foot_05))命令像正常连接的驱动器一样读取设备，并显示镜像文件的分区表。任何可以操作块设备的工具也应能以这种方式访问镜像文件。
- en: 'The examples shown in this book use a variety of tools and techniques. Each
    tool may require a different form of access to a drive, forensic image file, or
    even a mounted filesystem. To help avoid confusion, I’ll use the following naming
    scheme in subsequent examples:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中展示的示例使用了多种工具和技术。每个工具可能需要以不同的方式访问驱动器、取证镜像文件，甚至是挂载的文件系统。为了避免混淆，接下来的示例中我将使用以下命名方案：
- en: '***image.raw*** A forensically acquired raw image file (using sector offsets
    for the filesystem)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '***image.raw*** 一个通过取证方式获取的原始镜像文件（使用扇区偏移量来表示文件系统）'
- en: '***partimageX.raw*** A separately extracted partition image file(s) containing
    only the partition contents (usually the filesystem)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '***partimageX.raw*** 单独提取的分区镜像文件，仅包含分区内容（通常是文件系统）'
- en: '***/dev/sda*** A block device (in */dev/*) physically attached or using a loopback
    (`losetup`)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '***/dev/sda*** 一个块设备（在*/dev/*中），物理连接或使用环回（`losetup`）'
- en: '***/dev/loopX*** A block device associated with a forensic image file'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '***/dev/loopX*** 与取证镜像文件相关联的块设备'
- en: '***/evidence/*** A path to a mounted filesystem of a suspect/victim drive'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '***/evidence/*** 一个路径，指向嫌疑人/受害者驱动器的挂载文件系统'
- en: If there is no leading forward slash (/), the paths to files and directories
    are relative to the current working directory.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果路径前没有斜杠（/），文件和目录的路径是相对于当前工作目录的。
- en: '***Systemd***'
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Systemd***'
- en: Throughout this book you will find many references to systemd. *Systemd* is
    an initialization system (called *init*), a system manager, and a service manager.
    Among popular Linux distros, systemd has become the de facto system layer between
    the kernel and userland. There are systemd commands to start and stop background
    programs (called daemons or services), power off and reboot the system, view logs,
    and check the status of services and the overall state of the system. You can
    edit different systemd text files (unit files and configuration files) to customize
    system behavior. Systemd basically manages the overall system running outside
    the kernel from initial startup to shutdown.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中你会发现很多关于systemd的内容。*Systemd* 是一个初始化系统（称为*init*）、系统管理器和服务管理器。在流行的Linux发行版中，systemd已成为内核和用户空间之间的事实上的系统层。systemd有命令用于启动和停止后台程序（称为守护进程或服务）、关机和重启系统、查看日志、检查服务状态以及系统的整体状态。你可以编辑不同的systemd文本文件（单元文件和配置文件）来自定义系统行为。systemd基本上管理着从初始启动到关闭的整个系统运行，位于内核之外。
- en: The introduction of systemd to the Linux community was not without debate, and
    involved a transition away from the traditional Unix sysvinit initialization system.
    This book contains significant coverage of systemd because it has been adopted
    by all the major Linux distributions. From a digital forensics perspective, systemd
    provides many forensic artifacts and evidence traces that could be interesting
    for an investigation.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: systemd引入Linux社区时并非没有争议，它涉及从传统的Unix sysvinit初始化系统过渡。本书详细介绍了systemd，因为它已经被所有主要的Linux发行版采用。从数字取证的角度来看，systemd提供了许多取证证据和痕迹，可能对调查有兴趣。
- en: The systemd project is well documented and man pages are available for nearly
    everything in systemd. As a starting point, see the systemd(1) man page or type
    apropos systemd at a Linux command line.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: systemd项目有详细的文档，并且几乎所有systemd相关的内容都有man页面。作为起点，可以查看systemd(1)的man页面，或者在Linux命令行中输入apropos
    systemd。
- en: The introduction of systemd has caused a fundamental shift toward starting daemons
    using on-demand activation rather than explicitly starting daemons at boot. This
    is done both at the system level and user level. At the user level, it becomes
    unnecessary to start many background programs from login shell scripts because
    those programs are now started automatically as needed. This was done mainly for
    performance reasons, but the additional log entries generated from starting and
    stopping programs can be useful in the forensic reconstruction of past activity.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: systemd 的引入引起了一个根本性的变化，转向使用按需激活来启动守护进程，而不是在启动时显式启动守护进程。这既发生在系统层面，也发生在用户层面。在用户层面，许多后台程序不再需要通过登录
    Shell 脚本启动，因为这些程序现在会在需要时自动启动。这主要是出于性能考虑，但启动和停止程序时产生的附加日志条目在法医重建过去的活动时可能非常有用。
- en: '***The Command Line***'
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***命令行***'
- en: The shell is a program that provides a command line interpreter used to interface
    with people (typing commands) or shell scripts (running commands from a file).
    The shell runs in userspace and is executed by either the system or a logged-in
    user. This is different from the graphical shell that is part of the desktop environment.
    The shell and associated concepts are taken directly from Unix.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Shell 是一个程序，提供命令行解释器，用于与用户（输入命令）或 Shell 脚本（从文件运行命令）交互。Shell 在用户空间中运行，由系统或已登录的用户执行。这与桌面环境中图形化的
    Shell 是不同的。Shell 和相关概念直接源自 Unix。
- en: The most common shell on Linux is *Bash (Bourne-again shell)*.^([6](footnotes.xhtml#ch02foot_06))
    Users can change their default shell, and many shells are available to choose
    from. Two popular alternatives today are zsh and fish. The zsh shell is highly
    customizable and a favorite of some power users. The fish shell is designed more
    for comfortable human interaction. Shells are just normal programs that can be
    executed (you can even run another shell from your current shell).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 中最常见的 Shell 是 *Bash（Bourne-again shell）*。^([6](footnotes.xhtml#ch02foot_06))
    用户可以更改默认的 Shell，且有许多可供选择的 Shell。今天，zsh 和 fish 是两个受欢迎的选择。zsh Shell 高度可定制，是一些高级用户的最爱。fish
    Shell 则更多地为舒适的人机交互设计。Shell 只是一个可以执行的普通程序（您甚至可以从当前的 Shell 中运行另一个 Shell）。
- en: Modern desktop users may never need to use a shell prompt. To interact with
    a shell, you need to log in to the console (locally or remotely with SSH) or open
    a terminal emulator in your desktop environment. Once you have a shell (typically
    a dollar sign followed by a cursor), you can enter commands.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现代桌面用户可能永远不需要使用 Shell 提示符。要与 Shell 交互，您需要登录到控制台（本地或通过 SSH 远程）或在桌面环境中打开终端模拟器。一旦您有了一个
    Shell（通常是一个美元符号后跟一个光标），就可以输入命令。
- en: Shell commands may be part of the shell program itself (built-in commands),
    or they can be the names of programs you want to run. You can specify configuration
    information by adding flags or parameters after a command and you can set environment
    variables to configure a shell.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Shell 命令可以是 Shell 程序本身的一部分（内建命令），也可以是您想要运行的程序的名称。您可以通过在命令后添加标志或参数来指定配置信息，还可以设置环境变量来配置
    Shell。
- en: The most powerful shell concepts are piping and redirection. Piping allows the
    output from one program to be sent directly to the input of another program. Redirection
    allows programs to take input from files and send output to files. The shell provides
    all of this functionality; it doesn’t need to be built in to each program (this
    is all part of the Unix philosophy mentioned earlier).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最强大的 Shell 概念是管道和重定向。管道允许将一个程序的输出直接发送到另一个程序的输入。重定向允许程序从文件获取输入并将输出发送到文件。Shell
    提供了所有这些功能；它不需要集成到每个程序中（这也是前面提到的 Unix 哲学的一部分）。
- en: 'The command line symbols used to connect programs and files together are as
    follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 将程序和文件连接在一起的命令行符号如下：
- en: '>     Sends data from a program to a file (creates file if needed)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '>     将程序的数据发送到文件中（如果需要则创建文件）'
- en: '>>    Appends data from a program to a file (creates file if needed)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '>>    将程序的数据附加到文件中（如果需要则创建文件）'
- en: <     Sends data from a file to a program
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: <     将文件中的数据发送到程序
- en: '|     Sends data from one program to another program'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '|     将一个程序的数据发送到另一个程序'
- en: 'Here are some examples to illustrate piping and redirection with programs and
    files on the command line:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些示例，展示了在命令行中使用程序和文件进行管道和重定向的操作：
- en: '[PRE3]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first three examples show a program run using input and output from a file.
    The next two examples show a program sending output to another program (or programs).
    You can also use multiple pipes and redirects in series on the command line. In
    the last example, data from file1 is redirected into program1, output from program1
    is piped into program2, output from program2 is piped into program3, and, lastly,
    output from program3 is redirected into file2.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个示例展示了一个程序使用文件的输入和输出运行。接下来的两个示例展示了一个程序将输出发送到另一个程序（或多个程序）。你也可以在命令行中使用多个管道和重定向进行串联。在最后一个示例中，文件1中的数据被重定向到程序1，程序1的输出被传输到程序2，程序2的输出传输到程序3，最后，程序3的输出被重定向到文件2。
- en: From a digital forensics perspective, the shell is interesting because it can
    save a history of the commands that a user entered. The forensic analysis of shell
    history is covered in a later section.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 从数字取证的角度来看，shell（命令行界面）非常有趣，因为它可以保存用户输入的命令历史。shell历史的取证分析将在后面的章节中讨论。
- en: '***Modern Desktop Environments***'
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***现代桌面环境***'
- en: Modern Linux desktop environments are either built on top of X11 and a window
    manager (discussed in an earlier section) or integrated with a Wayland compositor.
    Desktop environments (sometimes called DEs or desktop shells) provide functionality
    like application launchers, trash cans, wallpaper, themes, panels, and other features.
    The most common desktop environments in use today are GNOME and KDE. Other popular
    desktops include MATE, Cinnamon, Xfce, LXDE, and Enlightenment. Each of these
    environments provides a different look and feel.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现代Linux桌面环境要么建立在X11及窗口管理器之上（如前面章节所讨论），要么与Wayland合成器集成。桌面环境（有时称为DEs或桌面外壳）提供应用程序启动器、垃圾桶、壁纸、主题、面板等功能。当前最常用的桌面环境是GNOME和KDE。其他流行的桌面环境包括MATE、Cinnamon、Xfce、LXDE和Enlightenment。每个环境提供不同的外观和体验。
- en: A set of community standards was formed to provide underlying interoperability
    between desktop environments. These are known as the *Cross-Desktop Group (XDG)
    specifications*. See the specifications page at *[https://www.freedesktop.org/](https://www.freedesktop.org/)*
    for more details.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供桌面环境之间的基础互操作性，形成了一套社区标准。这些标准被称为*跨桌面组（XDG）规范*。更多详细信息，请参阅* [https://www.freedesktop.org/](https://www.freedesktop.org/)*上的规范页面。
- en: 'Some features with documented specifications that standardize interoperability
    across desktop environments include the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一些具有文档化规范的功能，通过标准化桌面环境间的互操作性，包含以下内容：
- en: Autostart applications
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动启动应用程序
- en: Default applications
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认应用程序
- en: Trash cans or recycle bins
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垃圾桶或回收站
- en: Desktop bookmarks or recent files
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 桌面书签或最近文件
- en: Clipboard management
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 剪贴板管理
- en: Thumbnails
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩略图
- en: Desktop trays
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 桌面托盘
- en: Status notifications
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态通知
- en: Password managers
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码管理器
- en: Clearly this list is also interesting for digital forensic examiners and will
    be covered in a later section.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这个列表对于数字取证检查员也很有意义，后续章节会讨论。
- en: To ease the learning curve for new users, the original computer desktops attempted
    to replicate physical desktops, which is referred to as the *desktop metaphor*.
    This included overlapping windows (like overlapping sheets of paper), folder icons
    (like paper folders), and so on. In recent years, the trend is moving away from
    the traditional desktop metaphor toward desktop shells that behave differently,
    using features such as tiling, tabbing, or fullscreen windows.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减轻新用户的学习曲线，最初的计算机桌面试图复制物理桌面，这种方法被称为*桌面隐喻*。这包括重叠窗口（像重叠的纸张）、文件夹图标（像纸文件夹）等。近年来，趋势是逐步摆脱传统的桌面隐喻，转向具有不同表现的桌面外壳，使用如平铺、标签页或全屏窗口等功能。
- en: The current trend is to replace X11-based desktops with Wayland. The Wayland
    protocol was developed from scratch and is intended to modernize Linux graphics,
    eliminate unused functionality, and take better advantage of local hardware.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的趋势是用Wayland取代基于X11的桌面环境。Wayland协议是从零开始开发的，旨在现代化Linux图形，消除未使用的功能，并更好地利用本地硬件。
- en: One of X11’s design goals was networking. If a site had a powerful central Unix
    server and distributed X11 terminals (called thin clients today), users could
    run programs on the central machine but display them on the screen of the terminal.
    This feature of X11 is largely obsolete today due to powerful client machines,
    client/server applications, and remote desktop protocols. Wayland drops support
    for integrated networking of individual windows.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: X11 的设计目标之一是网络化。如果一个站点有一个强大的中央 Unix 服务器和分布式 X11 终端（今天称为瘦客户端），用户可以在中央机器上运行程序，但将其显示在终端的屏幕上。由于强大的客户端机器、客户端/服务器应用程序和远程桌面协议，X11
    的这一功能今天基本上已经过时。Wayland 放弃了对单个窗口集成网络支持的功能。
- en: X11 has security issues. Once a client application is able to use the X11 server,
    it is considered trusted. The client is then authorized to snoop around the rest
    of the desktop, observing the contents of other windows and intercepting keystrokes.
    This is how screenshot programs, remote screen sharing, and programmable hotkey
    programs work. Wayland was developed with security in mind and doesn’t trust applications.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: X11 存在安全问题。一旦客户端应用程序能够使用 X11 服务器，它就被认为是可信的。客户端随后被授权浏览桌面的其余部分，观察其他窗口的内容并截取键盘输入。这就是屏幕截图程序、远程屏幕共享和可编程快捷键程序的工作原理。Wayland
    在设计时考虑了安全性，并且不信任应用程序。
- en: Installing a graphical desktop environment is optional for Linux servers. Servers
    can operate with a monitor and text-based console for shell access. Even the monitor
    is optional, in which case the server is operating in *headless* mode, and logins
    must be done over a network.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 安装图形化桌面环境对于 Linux 服务器来说是可选的。服务器可以使用显示器和基于文本的控制台进行 Shell 访问。甚至显示器也是可选的，在这种情况下，服务器处于
    *headless* 模式，登录必须通过网络进行。
- en: '**Linux Distributions**'
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Linux 发行版**'
- en: Strictly speaking, only the Linux kernel is the actual operating system. The
    rest of the system, such as the shell, tools, GUI, software packages, and so on,
    are not Linux. Those things may be part of a Linux distribution, but Linux technically
    refers only to the kernel.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 严格来说，只有 Linux 内核才是实际的操作系统。系统的其余部分，如 Shell、工具、GUI、软件包等，并不是 Linux。那些内容可能是 Linux
    发行版的一部分，但 Linux 技术上仅指内核。
- en: However, practically speaking, people use the term *Linux* to refer to more
    than just the kernel and think about Linux in terms of distributions (or “distros").
    This section describes the rise of the Linux distribution.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，从实际角度来看，人们用 *Linux* 这个术语来指代的不仅仅是内核，更多的是将 Linux 视为一种发行版（或称“distro”）。本节描述了
    Linux 发行版的崛起。
- en: '***The Evolution of Linux Distributions***'
  id: totrans-125
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Linux 发行版的演变***'
- en: Originally, building a system based on a Linux kernel required a significant
    amount of technical knowledge. It meant downloading the sources (for the kernel
    and other programs) from FTP sites, unpacking, compiling on a Minix system, and
    manually copying the files to the target filesystem. Configuration was done by
    hand using text editors (like vi). Updates and patches were also done by hand
    (a repeat of the just-described process). This arrangement was fine for developers
    and hackers, but it wasn’t okay for regular users.^([7](footnotes.xhtml#ch02foot_07))
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，基于 Linux 内核构建系统需要大量的技术知识。这意味着需要从 FTP 站点下载源代码（包括内核和其他程序），解压、在 Minix 系统上编译，并手动将文件复制到目标文件系统。配置是通过文本编辑器（如
    vi）手动完成的。更新和补丁也是手动完成的（重复上述过程）。这种安排对开发者和黑客来说没问题，但对普通用户来说并不合适。^([7](footnotes.xhtml#ch02foot_07))
- en: The first Linux systems required a significant amount of manual technical work
    to install and maintain. Before the proliferation of Linux distributions, nearly
    everything was a manual process. Linux distros were needed to fill this gap. Distributions
    were invented to make it easier for people to install, configure, and maintain
    their Linux-based systems. By the end of 1992, two complete and functional Linux
    distros were available. Peter MacDonald of Canada created the Softlanding Linux
    System (SLS), and Adam Richter of Berkeley, California, created Yggdrasil Linux.
    Once distributions made Linux easier for people to install, it started to become
    more popular outside the kernel developer community. Over time, the features offered
    by distros became significant enough to be commercially profitable.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最早的 Linux 系统需要大量手动的技术工作来安装和维护。在 Linux 发行版普及之前，几乎一切都是手动过程。为了填补这一空白，Linux 发行版应运而生。发行版的发明使得人们可以更容易地安装、配置和维护基于
    Linux 的系统。到 1992 年底，已经有了两个完整且功能齐全的 Linux 发行版。加拿大的 Peter MacDonald 创建了 Softlanding
    Linux System（SLS），加利福尼亚州伯克利的 Adam Richter 创建了 Yggdrasil Linux。一旦发行版让 Linux 更容易安装，它就开始在内核开发者社区之外变得更受欢迎。随着时间的推移，发行版提供的功能变得足够重要，能够实现商业盈利。
- en: 'The typical components that make up a distro today include:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 目前组成一个发行版的典型组件包括：
- en: Boot media (ISO images for CD, DVD, or USB stick)
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动介质（用于 CD、DVD 或 USB 闪存驱动器的 ISO 镜像）
- en: Installer scripts and tools
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装脚本和工具
- en: Package management system
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件包管理系统
- en: Precompiled packages (compiling from source optional)
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预编译的软件包（从源代码编译是可选的）
- en: Configuration management
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置管理
- en: Preconfigured desktop environments
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预配置的桌面环境
- en: Documentation (online or in print)
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档（在线或印刷版）
- en: Updates and security advisories
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新和安全公告
- en: Support forums and user mailing lists
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持论坛和用户邮件列表
- en: Distro philosophy, vision, mission, or style
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发行版的哲学、愿景、使命或风格
- en: Distros may have periodic release dates that follow a traditional software life-cycle
    model. However, a more recent model is the *rolling release*, which simply means
    there are no fixed versions or release dates. The packages are constantly updated
    and the release version is associated with the last time you updated. This system
    can introduce instability risks, but users don’t have to wait to get the latest
    software.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 发行版可能有定期的发布日期，遵循传统的软件生命周期模型。然而，更新的模型是*滚动发布*，这意味着没有固定的版本或发布日期。软件包不断更新，发布版本与您上次更新的时间相关联。这个系统可能带来不稳定的风险，但用户无需等待即可获取最新的软件。
- en: Linux distros can be non-profit or commercial. Non-profit distros like Debian,
    Arch, Slackware, or Gentoo are typically free and open source, and are maintained
    by volunteers. However, money is still needed for server hardware, network infrastructure,
    and network bandwidth, so project teams typically raise money from donations or
    selling swag (T-shirts, coffee mugs, stickers, and so on).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 发行版可以是非盈利或商业性质。像 Debian、Arch、Slackware 或 Gentoo 这样的非盈利发行版通常是免费和开源的，由志愿者维护。然而，服务器硬件、网络基础设施和网络带宽仍然需要资金，因此项目团队通常通过募捐或销售周边产品（T
    恤、咖啡杯、贴纸等）来筹集资金。
- en: Commercial distros like SUSE, Red Hat, or Ubuntu (Canonical) have staff employed
    and are regular for-profit companies. Due to the GPL license, commercial companies
    are not permitted to sell Linux software; however, they are allowed to make money
    from distribution media, subscriptions, services, and support. Many commercial
    distros also have separate free distros (openSUSE and Fedora, for example), which
    are used as a testing ground for upcoming commercial releases.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 商业发行版如 SUSE、Red Hat 或 Ubuntu（Canonical）有员工并且是正规的盈利公司。根据 GPL 许可证，商业公司不能销售 Linux
    软件；然而，它们可以通过发行介质、订阅、服务和支持来赚钱。许多商业发行版也有独立的免费发行版（例如 openSUSE 和 Fedora），它们作为即将发布的商业版本的测试平台。
- en: A number of distros are based on other distros and simply add additional software,
    customization, and configuration. For example, Ubuntu is based on Debian, CentOS
    Stream is based on Red Hat Enterprise Linux, and Manjaro is based on Arch Linux.
    Some distros even are based on distros that are themselves based on another distro.
    For example, Linux Mint is based on Ubuntu, which is based on Debian.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 许多发行版是基于其他发行版的，并仅仅增加了额外的软件、定制和配置。例如，Ubuntu 基于 Debian，CentOS Stream 基于 Red Hat
    Enterprise Linux，Manjaro 基于 Arch Linux。某些发行版甚至是基于其他发行版的发行版。例如，Linux Mint 基于 Ubuntu，而
    Ubuntu 又基于 Debian。
- en: There are also many specialty distributions that are typically based on another
    distro but built for a specific purpose. For example, Raspian is a distro for
    Raspberry Pi hardware, Kali Linux is designed for pentesting and forensics, Tails
    is designed for privacy and anonymity, and Android is designed for mobile devices.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多特种发行版，通常基于其他发行版，但为特定用途构建。例如，Raspian是为Raspberry Pi硬件设计的发行版，Kali Linux用于渗透测试和法医分析，Tails专为隐私和匿名性设计，Android专为移动设备设计。
- en: Knowing which distro you’re analyzing is important because each one has slightly
    different forensic artifacts. The most common distributions are described in the
    following sections. See Distrowatch for a current list of popular Linux distributions
    (*[https://distrowatch.com/](https://distrowatch.com/)*).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 知道你正在分析的是哪个发行版非常重要，因为每个发行版的法医痕迹略有不同。以下章节描述了最常见的发行版。请参阅Distrowatch获取当前流行Linux发行版的列表
    (*[https://distrowatch.com/](https://distrowatch.com/)*).
- en: '***Debian-Based Distributions***'
  id: totrans-145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***基于Debian的发行版***'
- en: Ian Murdock started Debian Linux in 1993 while a student at Purdue University.
    Debian was initially created out of Murdock’s dissatisfaction with SLS Linux,
    and grew to be one of the most popular distributions available.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Ian Murdock在1993年作为普渡大学的学生时启动了Debian Linux。Debian最初是由于Murdock对SLS Linux的不满而创建的，并发展成了最受欢迎的发行版之一。
- en: 'The Debian distribution maintains three releases:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Debian分发版维护三个版本：
- en: '**Stable** The latest production release, which is recommended for general
    use'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**Stable** 最新的生产版本，推荐用于一般用途'
- en: '**Testing** The next upcoming release candidate being tested and matured'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**Testing** 下一个正在测试和完善的发行候选版本'
- en: '**Unstable** The current development snapshot (always has the code name *Sid*)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**Unstable** 当前的开发快照（始终使用代号*Sid*）'
- en: Debian release code names are taken from characters in the Disney *Toy Story*
    movies and are assigned to major release numbers. New major versions are released
    roughly every two years. Minor updates or *point releases* happen every few months
    and contain security and bug fixes.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Debian的发布代号取自《玩具总动员》电影中的角色，并分配给主要版本号。新的主要版本大约每两年发布一次。小版本更新或*点发布*每几个月进行一次，包含安全性和错误修复。
- en: Debian is focused on freedom and is closely aligned with the GNU project (the
    documentation even refers to Debian as “GNU/Linux”). Debian has well-documented
    policies, standards, guidelines, and a social contract outlining the project philosophy.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Debian注重自由，并与GNU项目紧密对接（文档甚至将Debian称为“GNU/Linux”）。Debian有着完善的文档政策、标准、指南和一份社会契约，阐明了项目的哲学。
- en: Many Debian-based distributions have been developed for non-technical end users.
    These distros are easy to install and use and have desktop environments on par
    with Windows and macOS (I present some of these in the lists that follow).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 许多基于Debian的发行版是为非技术用户开发的。这些发行版易于安装和使用，桌面环境与Windows和macOS相当（我将在以下列表中介绍其中的一些）。
- en: 'Ubuntu has been one of the more popular Debian-based distributions for Linux
    newcomers. It has a server version and a desktop version. Ubuntu has several flavors
    depending on the desktop environment used:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu一直是Linux新手使用的较为流行的基于Debian的发行版。它有服务器版和桌面版。Ubuntu根据使用的桌面环境有多个版本：
- en: '**Ubuntu** Uses the GNOME desktop environment (the main distro)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ubuntu** 使用GNOME桌面环境（主要发行版）'
- en: '**Kubuntu** Uses the KDE desktop environment'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kubuntu** 使用KDE桌面环境'
- en: '**Xubuntu** Uses the Xfce desktop environment'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**Xubuntu** 使用Xfce桌面环境'
- en: '**Lubuntu** Uses the LXDE desktop environment'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**Lubuntu** 使用LXDE桌面环境'
- en: The underlying operating system is still Ubuntu (and is based on Debian), but
    the graphical interface varies with each flavor.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 底层操作系统仍然是Ubuntu（并基于Debian），但每种版本的图形界面有所不同。
- en: 'Linux Mint, also based on Ubuntu (with one release based on Debian), was designed
    to look elegant and be comfortable to use, and it uses the traditional desktop
    metaphor. It comes in several flavors:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Linux Mint也基于Ubuntu（其中一个版本基于Debian），旨在看起来优雅并且易于使用，采用传统的桌面隐喻。它有几个版本：
- en: '**Mint Cinnamon** Based on Ubuntu with GNOME 3'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**Mint Cinnamon** 基于Ubuntu，使用GNOME 3'
- en: '**Mint MATE** Based on Ubuntu with GNOME 2'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**Mint MATE** 基于Ubuntu，使用GNOME 2'
- en: '**Mint Xfce** Based on Ubuntu with Xfce'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**Mint Xfce** 基于Ubuntu，使用Xfce'
- en: '**Linux Mint Debian Edition (LMDE)** Based on Debian with GNOME 3'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**Linux Mint Debian Edition (LMDE)** 基于Debian，使用GNOME 3'
- en: The Raspberry Pi ships with a version of Debian called Raspian. It is designed
    to be lightweight and integrates with Raspberry Pi hardware.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi配备了名为Raspian的Debian版本。它设计得非常轻量，并与Raspberry Pi硬件集成。
- en: '***SUSE-Based Distributions***'
  id: totrans-166
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***基于 SUSE 的发行版***'
- en: In 1992, Roland Dyroff, Thomas Fehr, Burchard Steinbild, and Hubert Mantel formed
    the German company SUSE. SUSE was an abbreviation for *Software und System-Entwicklung*,
    which translates to “software and systems development.” SUSE initially sold a
    German version of SLS Linux, but produced its own SUSE Linux distribution for
    the German market in 1994\. Several years later, it expanded to other parts of
    Europe and then internationally. Today, it’s called SUSE Software Solutions Germany
    GmbH and is an independent company. OpenSUSE is a free community version of SUSE
    Linux and is sponsored by SUSE and others.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 1992 年，Roland Dyroff、Thomas Fehr、Burchard Steinbild 和 Hubert Mantel 成立了德国公司
    SUSE。SUSE 是 *Software und System-Entwicklung* 的缩写，意为“软件与系统开发”。SUSE 最初销售 SLS Linux
    的德文版，但在 1994 年为德国市场推出了自己的 SUSE Linux 发行版。几年后，它扩展到欧洲其他地区，随后向全球推广。如今，它被称为 SUSE Software
    Solutions Germany GmbH，已成为一家独立公司。OpenSUSE 是 SUSE Linux 的免费社区版，由 SUSE 和其他组织提供赞助。
- en: 'The commercial and community releases of SUSE Linux are as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: SUSE Linux 的商业版和社区版如下：
- en: '**SUSE Linux Enterprise Server (SLES)** Commercial product'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**SUSE Linux Enterprise Server (SLES)** 商业产品'
- en: '**SUSE Linux Enterprise Desktop (SLED)** Commercial product'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**SUSE Linux Enterprise Desktop (SLED)** 商业产品'
- en: '**openSUSE Leap** Regular release version'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**openSUSE Leap** 定期发布版本'
- en: '**openSUSE Tumbleweed** Regular release version'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**openSUSE Tumbleweed** 定期发布版本'
- en: Although SUSE has traditionally focused on the KDE desktop, it also has GNOME
    and other desktop versions. SUSE has a strong presence in German-speaking as well
    as other regions throughout Europe.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 SUSE 传统上专注于 KDE 桌面，但它也提供 GNOME 和其他桌面版本。SUSE 在德语地区以及欧洲其他地区具有强大的影响力。
- en: '***Red Hat–Based Distributions***'
  id: totrans-174
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***基于 Red Hat 的发行版***'
- en: Red Hat Linux (both a company and a Linux distribution) was created by Marc
    Ewing in 1994\. It had its own package manager (called *pm*) and installer. Another
    small company run by Canadian Bob Young managed the product distribution. The
    two companies merged, and later became the Red Hat as we know it today. Red Hat
    is a popular name known to the public (largely due to press surrounding the stock
    market IPO), but it is actually based on the Fedora distribution. Fedora is Red
    Hat’s community distribution, and Fedora releases become part of Red Hat’s commercial
    products.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Red Hat Linux（既是公司也是 Linux 发行版）由 Marc Ewing 于 1994 年创建。它有自己的软件包管理器（称为 *pm*）和安装程序。另一个由加拿大人
    Bob Young 经营的小公司管理产品的分发。两家公司合并，后来成为我们今天所知的 Red Hat。Red Hat 是一个广为人知的品牌（主要是因为其股票市场
    IPO 的媒体报道），但实际上它是基于 Fedora 发行版的。Fedora 是 Red Hat 的社区发行版，Fedora 的发布版本成为 Red Hat
    商业产品的一部分。
- en: 'Several Linux distributions are associated with Red Hat:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 有多个 Linux 发行版与 Red Hat 相关联：
- en: '**Fedora** Workstation and server editions'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**Fedora** 工作站和服务器版本'
- en: '**Fedora Spins** Fedora workstation with alternative desktops'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**Fedora Spins** 带有替代桌面的 Fedora 工作站'
- en: '**Fedora Rawhide** Rolling release development version'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**Fedora Rawhide** 滚动发布开发版本'
- en: '**Red Hat Enterprise Linux (RHEL)** Commercial product built from Fedora'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '**Red Hat 企业 Linux (RHEL)** 从 Fedora 构建的商业产品'
- en: '**CentOS Stream** A community rolling-release distro based on RHEL'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**CentOS Stream** 基于 RHEL 的社区滚动发布发行版'
- en: The default Fedora and RHEL desktops use GNOME. Red Hat’s developers have taken
    a lead in developing various standards that other distros use, such as systemd,
    PulseAudio, and various GNOME components.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的 Fedora 和 RHEL 桌面使用 GNOME。Red Hat 的开发者在开发其他发行版使用的各种标准方面处于领先地位，例如 systemd、PulseAudio
    和各种 GNOME 组件。
- en: '***Arch-Based Distributions***'
  id: totrans-183
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***基于 Arch 的发行版***'
- en: Arch Linux was developed by Canadian Judd Vinet in 2001, with the first release
    in 2002\. Arch is a non-commercial Linux distribution.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Arch Linux 由加拿大人 Judd Vinet 于 2001 年开发，首个版本于 2002 年发布。Arch 是一个非商业的 Linux 发行版。
- en: Arch is one of the first rolling-release distributions. The installation and
    configuration of Arch Linux is based on the command line (the install ISO boots
    to a root shell and waits for commands), and users are expected to follow instructions
    on the Arch wiki to install various components. Each component must be individually
    installed.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Arch 是最早的滚动发布发行版之一。Arch Linux 的安装和配置基于命令行（安装 ISO 引导到根 shell，并等待命令），用户需要按照 Arch
    Wiki 上的指引安装各种组件。每个组件必须单独安装。
- en: The terse installation process of Arch was difficult for new Linux users, but
    there was a demand for a rolling release. Manjaro Linux addresses both
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Arch 的简洁安装过程对于新手 Linux 用户来说较为困难，但市场上对滚动发布的需求很大。Manjaro Linux 解决了这两个问题。
- en: needs, as it’s based on Arch and has a friendly graphical installation process.
    Manjaro Linux installs as a fully operational system.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 需要，因为它基于 Arch 并且有一个友好的图形化安装过程。Manjaro Linux 安装后就是一个完全可操作的系统。
- en: '***Other Distributions***'
  id: totrans-188
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***其他发行版***'
- en: This book largely covers the forensic analysis of Debian-, Fedora-, SUSE-, and
    Arch-based distributions. These four distros are the foundation for the vast majority
    of Linux installations.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 本书主要涵盖了基于 Debian、Fedora、SUSE 和 Arch 的发行版的取证分析。这四个发行版是大多数 Linux 安装的基础。
- en: 'Other independent Linux distributions also have active communities of users
    and developers; for example:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 其他独立的 Linux 发行版也有活跃的用户和开发者社区；例如：
- en: '**Gentoo** A distro built with scripts that compile packages from source'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**Gentoo** 一个使用脚本从源代码编译包的发行版'
- en: '**Devuan** A fork of Debian that doesn’t use systemd'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**Devuan** 是一个不使用 systemd 的 Debian 分支'
- en: '**Solus** A distro designed for an aesthetic appearance and that uses the Budgie
    desktop'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**Solus** 是一个注重美学外观并使用 Budgie 桌面的发行版'
- en: '**Slackware** A distro started in 1993 that aims to be “Unix-like”'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**Slackware** 一个始于 1993 年的发行版，旨在做到“类 Unix”'
- en: You can forensically analyze all of these distros by employing the methods described
    in this book. The only differences will be with the distribution-specific areas,
    in particular the installers and package managers. In addition, the initialization
    process may be different on some distros and may use the traditional Unix sysvinit.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过本书中描述的方法对所有这些发行版进行取证分析。唯一的差异将在于特定发行版的区域，特别是安装程序和包管理器。此外，一些发行版的初始化过程可能有所不同，可能使用传统的
    Unix sysvinit。
- en: '**NOTE**'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*As an aside, I’d like to highlight Linux From Scratch (LFS). LFS is not a
    traditional distro, but rather a book or instruction manual. The book describes
    the process of downloading packages directly from different developers, compiling
    and installing the source, and manually configuring the system. Anyone planning
    a technical career in Linux should install an LFS system once, as doing so provides
    a rich learning experience. You can find more information at* [https://linuxfromscratch.org/](https://linuxfromscratch.org/)*.*'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '*顺便提一下，我想强调一下 Linux From Scratch（LFS）。LFS 不是一个传统的发行版，而是一本书或操作手册。该书描述了直接从不同开发者处下载包、编译并安装源代码以及手动配置系统的过程。任何计划从事
    Linux 技术工作的人员都应当至少安装一次 LFS 系统，因为这样可以获得丰富的学习体验。更多信息可以在* [https://linuxfromscratch.org/](https://linuxfromscratch.org/)*.* '
- en: '**Forensic Analysis of Linux Systems**'
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Linux 系统的取证分析**'
- en: 'Performing a forensic examination of a Linux system has many similarities to
    Windows or macOS systems. Some examples of forensic tasks common to all three
    include:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 对 Linux 系统进行取证检查与对 Windows 或 macOS 系统的检查有很多相似之处。所有三者中常见的一些取证任务包括：
- en: Partition table analysis (DOS or GPT)
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分区表分析（DOS 或 GPT）
- en: Reconstructing the boot process
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重建启动过程
- en: Understanding user desktop activity
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解用户的桌面活动
- en: Looking for photo and video directories
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 寻找照片和视频目录
- en: Looking for recent documents
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 寻找最近的文档
- en: Attempting to recover deleted files from the filesystem or trash/recycle bins
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试从文件系统或垃圾箱/回收站恢复已删除的文件
- en: Building timelines to reconstruct events
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建时间轴以重建事件
- en: Analyzing thumbnail images, clipboard data, and desktop information
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析缩略图图像、剪贴板数据和桌面信息
- en: Identifying applications used
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别使用的应用程序
- en: Finding configuration files, logs, and cache
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找配置文件、日志和缓存
- en: Analyzing installed software
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析已安装的软件
- en: The main operating system differences are the locations and formats of the forensic
    artifacts on the drive image. Linux filesystems are different, file locations
    are different, and file formats can be different.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的操作系统差异在于硬盘镜像中取证痕迹的位置和格式。Linux 文件系统不同，文件位置不同，文件格式也可能不同。
- en: '**NOTE**'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*When performing digital forensic examinations on Linux systems, it’s possible
    to mount suspect filesystems directly on a forensic analysis workstation. However,
    any symbolic links existing on a suspect system may point to files and directories
    on the investigator’s own system.*'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '*在对 Linux 系统进行数字取证检查时，可以直接在取证分析工作站上挂载可疑的文件系统。然而，任何存在于可疑系统上的符号链接可能指向调查人员自己系统上的文件和目录。*'
- en: There are also several advantages when examining Linux systems compared to Windows
    or macOS. Linux distros use fewer proprietary tools and have a tendency to use
    open file formats and, in many cases, use plaintext files. Additionally, many
    free and open source tools are available for performing analysis. Many of these
    tools are included with the operating system and are intended for troubleshooting,
    debugging, data conversion, or data recovery.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Windows 或 macOS 相比，检查 Linux 系统也有几个优势。Linux 发行版使用的专有工具较少，且倾向于使用开放文件格式，并且在许多情况下使用纯文本文件。此外，许多免费的开源工具可用于执行分析。许多这些工具都包含在操作系统中，旨在用于故障排除、调试、数据转换或数据恢复。
- en: I wrote this book with the expectation that many forensic examiners will be
    using commercial forensic tools under Windows or possibly macOS. Unfortunately,
    commercial forensic tools are lacking in some areas of Linux analysis. In those
    cases, using a Linux analysis system is advantageous and recommended.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我写这本书是希望许多法医检查员会在 Windows 或可能是 macOS 上使用商业法医工具。不幸的是，商业法医工具在某些 Linux 分析领域存在不足。在这些情况下，使用
    Linux 分析系统具有优势且值得推荐。
- en: The examples shown in this book use Linux tools, but only to illustrate the
    forensic artifacts that exist. You can extract or discover these same artifacts
    with other forensic tools, including commercial tools used by most forensic labs.
    The use of Linux tools here is not meant to imply that they are better or recommended
    (although sometimes no equivalent commercial tools exist). They are just different.
    All forensic examiners or forensic labs have their choice of tools and platforms
    that work best for them.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的示例使用 Linux 工具，但仅用于说明存在的法医证据。你也可以使用其他法医工具，包括大多数法医实验室使用的商业工具，提取或发现这些相同的证据。本书中使用
    Linux 工具并不意味着它们更好或值得推荐（尽管有时确实没有等效的商业工具）。它们只是不同而已。所有法医检查员或法医实验室都有自己的工具和平台选择，选择最适合他们的工具。
- en: The forensic processes outlined in the rest of this book are conceptually the
    same as those on Windows or macOS. The details are different, but explaining those
    details is the intention of this book.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 本书其余部分概述的法医过程在概念上与 Windows 或 macOS 上的相同。细节不同，但解释这些细节正是本书的目的。
