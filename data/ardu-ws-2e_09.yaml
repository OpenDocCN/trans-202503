- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Creating Your Own Arduino Libraries
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 创建你自己的 Arduino 库
- en: In this chapter you will
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中你将
- en: Learn the components of an Arduino library
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 Arduino 库的组成部分
- en: Create a simple library for a repetitive task
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为重复任务创建一个简单的库
- en: Learn how to install your library in the Arduino IDE
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何在 Arduino IDE 中安装库
- en: Create a library that accepts values to perform a function
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个接受值并执行功能的库
- en: Create a library that processes data from a sensor and returns values in an
    easy-to-use form
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个处理传感器数据并以易于使用的形式返回值的库
- en: Recall Project 22, described in Chapter 7, where you installed an Arduino library
    that included the functions needed to save data to an SD card. Using the library
    reduced the amount of time needed to write a sketch, as the library provides the
    functions related to the card module.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下第七章中描述的第22个项目，你安装了一个 Arduino 库，该库包括将数据保存到 SD 卡所需的函数。使用这个库减少了编写草图所需的时间，因为该库提供了与卡模块相关的函数。
- en: In the future, as you write sketches to solve your own problems and perform
    your own tasks, you may find yourself repeatedly using certain functions that
    you have created. At that point, it will be sensible to create your own Arduino
    library, which you can easily install and use in your sketches.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 将来，当你编写草图来解决自己的问题和执行自己的任务时，你可能会发现自己重复使用某些已创建的函数。此时，创建自己的 Arduino 库将是明智之举，你可以轻松地在草图中安装和使用它。
- en: In this chapter, you will learn how to convert functions into an Arduino library.
    By following the examples presented here, you’ll learn what you need to know to
    make your own custom libraries. Let’s do this now.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何将函数转换为 Arduino 库。通过这里提供的示例，你将了解创建自定义库所需的知识。现在让我们开始吧。
- en: Creating Your First Arduino Library
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建你的第一个 Arduino 库
- en: For our first example, consider [Listing 10-1](#listing10-1). It contains two
    functions, `blinkSlow()` and `blinkFast()`, which are used to blink the Arduino’s
    onboard LED at a slow or fast rate, respectively.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第一个示例中，参考[清单 10-1](#listing10-1)。它包含两个函数，`blinkSlow()` 和 `blinkFast()`，分别用于以慢速或快速的速度闪烁
    Arduino 的板载 LED。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 10-1: Blinking the Arduino’s onboard LED'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 10-1：闪烁 Arduino 板载 LED
- en: Without a library, every time you wrote a new sketch and wanted to use the `blinkSlow()`
    and `blinkFast()`functions, you would have to enter them manually. On the other
    hand, if you put the code for your functions in a library, from then on, you’ll
    be able to call the library using just one line of code at the start of your sketch.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有库，每次你编写新的草图并想使用 `blinkSlow()` 和 `blinkFast()` 函数时，都必须手动输入它们。另一方面，如果你将这些函数的代码放入一个库，从那时起，你只需要在草图的开始处调用该库，只用一行代码。
- en: Anatomy of an Arduino Library
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Arduino 库的构成
- en: 'An Arduino library consists of three files, as well as some optional example
    sketches that demonstrate how the library could be used. The three requisite files
    for every Arduino library are these:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Arduino 库由三个文件组成，此外还可以包含一些可选的示例草图，展示如何使用该库。每个 Arduino 库必备的三个文件如下：
- en: '***<library>.h*** The header file'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***<library>.h*** 头文件'
- en: '***<library>.cpp*** The source file'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***<library>.cpp*** 源文件'
- en: '***KEYWORDS.TXT*** The keyword definitions'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***KEYWORDS.TXT*** 关键字定义'
- en: In the first two filenames, you’ll replace *<library>* with the actual name
    of your library. For our first example, we will call our Arduino library blinko.
    Thus, our two files will be *blinko.h* and *blinko.cpp*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两个文件名中，你将用库的实际名称替换 *<library>*。对于我们的第一个示例，我们将把 Arduino 库命名为 blinko。因此，我们的两个文件将是
    *blinko.h* 和 *blinko.cpp*。
- en: The Header File
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 头文件
- en: The *blinko.h* file is known as a *header file*, because it contains the definitions
    of functions, variables, and so on used inside the library. The header file for
    the blinko library is shown in [Listing 10-2](#listing10-2).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*blinko.h* 文件被称为*头文件*，因为它包含了库内部使用的函数、变量等的定义。blinko 库的头文件见于[清单 10-2](#listing10-2)。'
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 10-2: The blinko library header file'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 10-2：blinko 库头文件
- en: The header file shares some similarities with a typical Arduino sketch, but
    there are also some differences. At 1, there’s a useful comment about the purpose
    of the library. While such comments are not necessary, they should be included
    to make the library easier for others to use.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 头文件与典型的 Arduino 草图有一些相似之处，但也有一些区别。在第1行，有一个关于库用途的有用注释。虽然这样的注释不是必需的，但它们应该包含在内，以便让别人更容易使用这个库。
- en: At 2, the code checks whether the library has been declared in the host sketch.
    At 3, the standard Arduino library is included to allow our blinko library access
    to the standard Arduino sketch functions, types, and constants.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 2 行，代码检查库是否已经在主草图中声明。在第 3 行，包含了标准 Arduino 库，以便我们的 blinko 库可以访问标准 Arduino
    草图函数、类型和常量。
- en: Then, at 4, we create a class. You can think of a *class* as a collection in
    one spot of all the variables and functions required for the library, including
    the name of the library. Within the class, there can be public variables and functions,
    which can be accessed by the sketch that needs to use the library; there can also
    be private variables and functions, which can be used only from inside the class.
    Finally, each class has a *constructor* with the same name as the class, which
    is used to create an instance of the class. This may sound complex. However, after
    reviewing the examples in this chapter and making a few libraries of your own,
    you’ll be confident in these constructions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在第 4 行，我们创建了一个类。你可以将 *类* 理解为一个地方，集中包含了库所需的所有变量和函数，包括库的名称。在类中，可以有公共变量和函数，草图需要使用库时可以访问这些；也可以有私有变量和函数，这些只能在类内部使用。最后，每个类都有一个与类同名的
    *构造函数*，用于创建类的实例。这个概念可能听起来有点复杂。然而，在本章中的示例进行复习并自己制作几个库后，你会对这些结构有信心。
- en: 'Inside our class, you can see we have the constructor for our library, `blinko()`,
    and two functions that will be in the library: `slow()` and `fast()`. They follow
    the `public:` statement, which means they can be used by anyone (“any member of
    the public”) who accesses the blinko library.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的类中，你可以看到我们有库的构造函数 `blinko()` 和两个库中的函数：`slow()` 和 `fast()`。它们位于 `public:`
    声明之后，意味着任何访问 blinko 库的用户（“任何公众成员”）都可以使用这些函数。
- en: Finally, at 5, we end the header definition. By wrapping the header definition
    inside an `if` statement, we ensure that the header isn’t loaded twice.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在第 5 行，我们结束了头文件的定义。通过将头文件定义包裹在 `if` 语句中，我们确保头文件不会被加载两次。
- en: The Source File
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 源文件
- en: Next, let’s take a look at the *blinko.cpp* file. The *.cpp* file is known as
    a *source file*, because it contains the code that will be run when the library
    is used. The source file for the blinko library is given in [Listing 10-3](#listing10-3).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看一下 *blinko.cpp* 文件。*.cpp* 文件被称为 *源文件*，因为它包含了在使用库时会运行的代码。blinko 库的源文件见
    [清单 10-3](#listing10-3)。
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 10-3: The blinko library source file'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 10-3：blinko 库源文件
- en: The source file contains the functions we’ve written that we’ll want available
    to reuse. In addition, some new structural elements are required here. At 2, we
    give our library access to both the standard Arduino functions, types, and constants
    and our own library header file.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 源文件包含了我们编写的函数，这些函数我们希望可以重复使用。此外，这里还需要一些新的结构元素。在第 2 行，我们让库访问标准的 Arduino 函数、类型和常量，以及我们自己的库头文件。
- en: At 3 we have the definition of the constructor function. The constructor contains
    things that should happen when the library is used. In our example, we have set
    digital pin 13 as an output, as we are using the Arduino’s onboard LED.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 3 行，我们有构造函数的定义。构造函数包含了在使用库时应该发生的事情。在我们的例子中，我们已将数字引脚 13 设置为输出，因为我们正在使用 Arduino
    的板载 LED。
- en: 'Starting at 4, we list the functions we want to include in this library. They
    are just like the functions that you would create in a stand-alone sketch, with
    one important difference: their definition starts with the library class name
    and two colons. For example, instead of typing `void fast()`, you type `void blinko::fast()`.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 从第 4 行开始，我们列出了想要包含在此库中的函数。它们就像你在独立的草图中创建的函数，只不过有一个重要的区别：它们的定义以库类名和两个冒号开头。例如，不是输入
    `void fast()`，而是输入 `void blinko::fast()`。
- en: The KEYWORDS.TXT File
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: KEYWORDS.TXT 文件
- en: Finally, we need to create the *KEYWORDS.TXT* file. The Arduino IDE uses this
    file to determine the keywords in the library, then highlights those words in
    the IDE. [Listing 10-4](#listing10-4) is the *KEYWORDS.TXT* file for our blinko
    library.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要创建 *KEYWORDS.TXT* 文件。Arduino IDE 使用该文件来确定库中的关键字，并在 IDE 中高亮显示这些词。[清单 10-4](#listing10-4)
    是我们 blinko 库的 *KEYWORDS.TXT* 文件。
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 10-4: The blinko library keywords file'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 10-4：blinko 库关键字文件
- en: The first line is the name of the library and is referred to as `KEYWORD1`.
    The library’s functions are both called `KEYWORD2`. Note that the space between
    the keywords and their definitions must be created by pressing tab, not by pressing
    the spacebar.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行是库的名称，称为`KEYWORD1`。库的函数被称为`KEYWORD2`。请注意，关键字与其定义之间的空格必须通过按下Tab键而非空格键来创建。
- en: At this point, you have the three files needed for a working library. It’s a
    great idea to also include an example sketch so users can understand what the
    functions do. [Listing 10-5](#listing10-5) is our example sketch for the blinko
    library.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你已经拥有了工作库所需的三个文件。包含一个示例草图是个不错的主意，这样用户可以理解函数的功能。[列表10-5](#listing10-5)是我们的blinko库的示例草图。
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 10-5: An example sketch for our blinko library'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 列表10-5：我们的blinko库的示例草图
- en: As you can see, the sketch is basic. It just shows the use of both the `slow()`
    and `fast()`functions in our library. All the end user needs to do after installing
    the library is to include the library 1, create an instance 2, and then call either
    function when required as shown at 3 and 4.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，草图是基础的。它仅展示了我们库中`slow()`和`fast()`两个函数的使用。最终用户在安装库之后所需做的，就是包含库1，创建实例2，然后在需要时调用这两个函数，如3和4所示。
- en: Installing Your New Arduino Library
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装你的新Arduino库
- en: Now that you’ve created a new Arduino library, an easy way to store and distribute
    it is to make a ZIP file. Future users who obtain the ZIP file can easily install
    the library, as demonstrated earlier in Chapter 7.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了一个新的Arduino库，一个简便的存储和分发方式是创建一个ZIP文件。未来的用户获得ZIP文件后，可以像第7章中演示的那样轻松安装库。
- en: Creating a ZIP File Using Windows 7 and Later
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Windows 7及更高版本创建ZIP文件
- en: To create a ZIP file with Windows, follow these instructions.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Windows创建ZIP文件，请按照以下说明操作。
- en: First, place the three library files and the example sketch (stored in its own
    folder, as are all sketches) into one location. [Figure 10-1](#figure10-1) shows
    an example.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将三个库文件和示例草图（存储在自己的文件夹中，就像所有草图一样）放置在同一个位置。[图10-1](#figure10-1)展示了一个示例。
- en: '![f10001](image_fi/500587c10/f10001.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![f10001](image_fi/500587c10/f10001.png)'
- en: 'Figure 10-1: Our Arduino library files in one folder'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-1：我们的Arduino库文件在一个文件夹中
- en: Select all the files, right-click anywhere over the highlighted files, and select
    **Send To**▶**Compressed (Zipped) Folder**, as shown in [Figure 10-2](#figure10-2).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 选择所有文件，右键点击高亮显示的文件中的任意位置，选择**发送到**▶**压缩（ZIP）文件夹**，如[图10-2](#figure10-2)所示。
- en: A new file will appear in the folder, with a *.zip* extension and name editing
    enabled. For our library, change the name to *blinko* and then press enter, as
    shown in [Figure 10-3](#figure10-3).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 文件夹中会出现一个新文件，扩展名为*.zip*，且启用了文件名编辑。对于我们的库，将名称更改为*blinko*，然后按回车键，如[图10-3](#figure10-3)所示。
- en: Now you can move on to “Installing Your New Library” on page 193.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以继续阅读第193页的“安装你的新库”部分。
- en: '![f10002](image_fi/500587c10/f10002.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![f10002](image_fi/500587c10/f10002.png)'
- en: 'Figure 10-2: Compressing the library files'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-2：压缩库文件
- en: '![f10003](image_fi/500587c10/f10003.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![f10003](image_fi/500587c10/f10003.png)'
- en: 'Figure 10-3: Changing the name of the library ZIP file'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-3：更改库ZIP文件名称
- en: Creating a ZIP File Using Mac OS X or Later
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Mac OS X或更高版本创建ZIP文件
- en: To create a ZIP file with Mac OS X, gather the three library files and the example
    sketch (stored in its own folder, as are all sketches) into one location. [Figure
    10-4](#figure10-4) shows an example.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Mac OS X创建ZIP文件，请将三个库文件和示例草图（存储在自己的文件夹中，就像所有草图一样）放置在同一个位置。[图10-4](#figure10-4)展示了一个示例。
- en: '![f10004](image_fi/500587c10/f10004.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![f10004](image_fi/500587c10/f10004.png)'
- en: 'Figure 10-4: Our Arduino library files'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-4：我们的Arduino库文件
- en: Select all the files, right-click anywhere over the files, and select **Compress
    4 Items**, as shown in [Figure 10-5](#figure10-5).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 选择所有文件，右键点击文件中的任意位置，选择**压缩4个项目**，如[图10-5](#figure10-5)所示。
- en: '![f10005](image_fi/500587c10/f10005.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![f10005](image_fi/500587c10/f10005.png)'
- en: 'Figure 10-5: Compressing the library files'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-5：压缩库文件
- en: After a moment, a new file called *Archive.zip* will appear in the folder, as
    shown in [Figure 10-6](#figure10-6).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一会儿后，名为*Archive.zip*的新文件将出现在文件夹中，如[图10-6](#figure10-6)所示。
- en: '![f10006](image_fi/500587c10/f10006.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![f10006](image_fi/500587c10/f10006.png)'
- en: 'Figure 10-6: The files have been compressed.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-6：文件已经被压缩。
- en: Click on the *Archive.zip* folder and change the name to *blinko.zip*, as shown
    in [Figure 10-7](#figure10-7).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 点击*Archive.zip*文件夹并将其名称更改为*blinko.zip*，如[图10-7](#figure10-7)所示。
- en: '![f10007](image_fi/500587c10/f10007.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![f10007](image_fi/500587c10/f10007.png)'
- en: 'Figure 10-7: Our Arduino library installation ZIP file'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-7：我们的Arduino库安装ZIP文件
- en: You now have a library ZIP file that you can easily distribute to others or
    install yourself.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经拥有一个库ZIP文件，您可以轻松地将其分发给他人或自己安装。
- en: Installing Your New Library
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装您的新库
- en: At this point you can install your library using the ZIP file method detailed
    in “Downloading an Arduino Library as a ZIP File” on page 134 in Chapter 7. Once
    the file has been installed and you have restarted the Arduino IDE, select **Sketch**▶**Include
    Library** to see your library listed, as shown in [Figure 10-8](#figure10-8).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，您可以使用ZIP文件方法安装您的库，该方法在第7章第134页的《下载Arduino库作为ZIP文件》一节中有详细介绍。安装文件后，重新启动Arduino
    IDE，选择**草图**▶**包含库**，即可看到您的库列出，如[图10-8](#figure10-8)所示。
- en: '![f10008](image_fi/500587c10/f10008.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![f10008](image_fi/500587c10/f10008.png)'
- en: 'Figure 10-8: Our Arduino library, now available in the IDE'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-8：我们的Arduino库，现在可以在IDE中使用
- en: Furthermore, you can now easily access the example sketch; select **File**▶**Examples**▶**blinko**,
    as shown in [Figure 10-9](#figure10-9).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您现在可以轻松访问示例草图；选择**文件**▶**示例**▶**blinko**，如[图10-9](#figure10-9)所示。
- en: '![f10009](image_fi/500587c10/f10009.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![f10009](image_fi/500587c10/f10009.png)'
- en: 'Figure 10-9: Our Arduino library example sketch is installed.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-9：我们的Arduino库示例草图已经安装。
- en: Creating a Library That Accepts Values to Perform a Function
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个接受值以执行功能的库
- en: 'Now that you have the knowledge to create a basic Arduino library, you can
    move on to the next level: creating a library that can accept values and act on
    them. Once again, we will look an at example function within a sketch and convert
    it into a more useful library.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经掌握了创建基本Arduino库的知识，可以进入下一个层次：创建一个能够接受值并对此进行操作的库。我们将再次查看草图中的示例函数，并将其转换为一个更有用的库。
- en: Consider the sketch shown in [Listing 10-6](#listing10-6). It uses the function
    `void blinkType()`, which tells the Arduino how many times to blink its onboard
    LED and the on/off period.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考[Listing 10-6](#listing10-6)中的草图。它使用了函数`void blinkType()`，该函数告诉Arduino需要多少次闪烁板载LED，并设置开/关周期。
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 10-6: Demonstration sketch for the `blinkType()` function'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 10-6：`blinkType()`函数的演示草图
- en: As you can see, the function `void blinkType()`accepts two values and then acts
    on them. The first value is the number of times to turn the onboard LED on and
    off, and the second value is the delay time in milliseconds for each blink.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，函数`void blinkType()`接受两个值，并据此执行操作。第一个值是打开和关闭板载LED的次数，第二个值是每次闪烁的延迟时间（以毫秒为单位）。
- en: Let’s turn this function into an Arduino library named blinko2\. [Listing 10-7](#listing10-7)
    shows the header file for this library.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这个函数转换为一个名为blinko2的Arduino库。[Listing 10-7](#listing10-7)显示了这个库的头文件。
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 10-7: The blinko2 library header file'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 10-7：blinko2库的头文件
- en: The header file maintains the same structure as the header file for the original
    blinko library. However, there is a new section at 1 called `private`. The variables
    declared in the `private` section are for internal use within the library and
    cannot be used by the greater Arduino sketch. You can see these variables in use
    within the library source file shown in [Listing 10-8](#listing10-8).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 头文件与原始blinko库的头文件结构相同。然而，在第1行有一个新的部分叫做`private`。在`private`部分声明的变量仅供库内部使用，不能被更大的Arduino草图使用。您可以在[Listing
    10-8](#listing10-8)所示的库源文件中看到这些变量的使用。
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Listing 10-8: The blinko2 library source file'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 10-8：blinko2库源文件
- en: The source file for blinko2 maintains the same structure as the source file
    for the original blinko library.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: blinko2的源文件保持与原始blinko库源文件相同的结构。
- en: We set digital pin 13 to an output at 1. At 2, we declare the function `blinkType()`,
    which accepts the number of times to blink at 3 and the delay time at 4. You can
    see this in operation via the example sketch for our library in [Listing 10-9](#listing10-9).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将数字引脚13设置为输出（见1）。在2处，我们声明了函数`blinkType()`，它接受三次闪烁的次数（见3）和延迟时间（见4）。您可以通过我们库的示例草图在[Listing
    10-9](#listing10-9)中看到这一操作。
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Listing 10-9: An example sketch for our blinko2 library'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 10-9：我们blinko2库的示例草图
- en: 'Next, we need to create the keywords file for our new blinko2library. Don’t
    forget to use a tab and not spaces between the words. Here is our *KEYWORDS.TXT*
    file:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要为新的blinko2库创建关键词文件。不要忘记在单词之间使用制表符，而不是空格。以下是我们的*KEYWORDS.TXT*文件：
- en: '[PRE9]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now create your ZIP file and install the library using the methods described
    earlier in this chapter. Then open and run the blinko2 example sketch to experience
    how it works.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建你的ZIP文件，并使用本章前面描述的方法安装库。然后打开并运行blinko2示例草图，体验它的工作方式。
- en: Creating a Library That Processes and Displays Sensor Values
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个处理和显示传感器值的库
- en: For our final example of an Arduino library, we’ll revisit the Analog Devices
    TMP36 temperature sensor used in several of our earlier projects. Our ArduinoTMP36
    example library will take the raw value from the TMP36 and display the temperature
    in both Celsius and Fahrenheit via the Serial Monitor.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Arduino库最终示例中，我们将重新回顾多个早期项目中使用的模拟设备TMP36温度传感器。我们的ArduinoTMP36示例库将从TMP36获取原始值，并通过串口监视器显示摄氏度和华氏度的温度。
- en: First, connect your TMP36 to the Arduino by following the schematic shown in
    [Figure 10-10](#figure10-10).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过连接你的TMP36与Arduino，按照[图10-10](#figure10-10)中的示意图进行连接。
- en: '![f10010](image_fi/500587c10/f10010.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![f10010](image_fi/500587c10/f10010.png)'
- en: 'Figure 10-10: Schematic for use with the ArduinoTMP36 library'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-10：ArduinoTMP36库使用示意图
- en: '[Listing 10-10](#listing10-10) is a sketch that we wish to turn into a library.
    It uses two functions, `readC()` and `readF()`, totake the raw reading from the
    TMP36 sensor via analog pin 0, convert it to degrees Celsius and Fahrenheit, and
    return the results.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单10-10](#listing10-10)是我们希望将其转换为库的一个草图。它使用两个函数，`readC()`和`readF()`，从TMP36传感器通过模拟引脚0获取原始读数，将其转换为摄氏度和华氏度，并返回结果。'
- en: '[PRE10]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Listing 10-10: TMP36 demonstration sketch'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 清单10-10：TMP36演示草图
- en: The functions for temperature conversion are ideal candidates for inclusion
    in a library, which we will call ArduinoTMP36\. The header file is shown in [Listing
    10-11](#listing10-11).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 温度转换函数是包括在库中的理想候选项，我们将其命名为ArduinoTMP36。头文件如[清单10-11](#listing10-11)所示。
- en: '[PRE11]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Listing 10-11: The ArduinoTMP36 library header file'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 清单10-11：ArduinoTMP36库头文件
- en: At this point, you probably recognize the structure of the header file. We set
    up the definitions at 1. Inside the `class` at 2, we declare the public items,
    which include the constructor and the `readC()` and `readF()` functions. We also
    declare the private items at 3; these include the two variables used within the
    library.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可能已经认识到头文件的结构。我们在第1部分设置了定义。在第2部分的`class`内部，我们声明了公共项，包括构造函数以及`readC()`和`readF()`函数。我们还在第3部分声明了私有项；这些包括库中使用的两个变量。
- en: Next we have the library source file, shown in [Listing 10-12](#listing10-12).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是库源文件，见[清单10-12](#listing10-12)。
- en: '[PRE12]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Listing 10-12: The ArduinoTMP36 library source file'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 清单10-12：ArduinoTMP36库源文件
- en: The source file contains the two functions used to calculate the temperatures.
    They are defined as `float`because they return a floating-point value. The temperatures
    are determined using the same formulas as in Project 8 in Chapter 4.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 源文件包含用于计算温度的两个函数。它们被定义为`float`类型，因为它们返回浮动值。温度是使用与第4章第8个项目相同的公式计算的。
- en: 'Finally, we need to create the keywords file for our new ArduinoTMP36 library.
    Don’t forget to use a tab and not spaces between the words. Our *KEYWORDS.TXT*
    file is shown here:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要为新的ArduinoTMP36库创建关键词文件。不要忘记在单词之间使用制表符，而不是空格。我们的*KEYWORDS.TXT*文件如下所示：
- en: '[PRE13]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now create your ZIP file and install the library using the methods described
    earlier in this chapter. Then open and run the ArduinoTMP36 example sketch, shown
    in [Listing 10-13](#listing10-13).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建你的ZIP文件，并使用本章前面描述的方法安装库。然后打开并运行ArduinoTMP36示例草图，见[清单10-13](#listing10-13)。
- en: '[PRE14]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Listing 10-13: An example sketch for the ArduinoTMP36 library'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 清单10-13：ArduinoTMP36库示例草图
- en: Simply include the library and create the instance at 1. Then declare a variable
    to accept the output from the library at 2. After that, the temperature is requested
    and returned in Celsius and Fahrenheit at points 3 and 4, respectively.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 只需包含库并在第1步创建实例。然后，在第2步声明一个变量来接收来自库的输出。之后，温度会在第3和第4步分别以摄氏度和华氏度返回。
- en: Open the Serial Monitor window and set the data speed to 9,600 baud, and you
    should be presented with a scrolling updated list of the current temperature in
    Celsius and Fahrenheit, like that shown in [Figure 10-11](#figure10-11).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 打开串口监视器窗口，并将数据传输速度设置为9600波特率，你应该会看到一个滚动更新的当前温度列表，显示的温度单位为摄氏度和华氏度，如[图10-11](#figure10-11)所示。
- en: '![f10011](image_fi/500587c10/f10011.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![f10011](image_fi/500587c10/f10011.png)'
- en: 'Figure 10-11: Example of output from the ArduinoTMP36 library'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-11：ArduinoTMP36库输出示例
- en: Now you can appreciate how much time and sketch size is saved by using a library
    instead of including the functions every time you create a new sketch.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以体会到，通过使用库而不是每次创建新草图时都包含函数，节省了多少时间和草图大小。
- en: Looking Ahead
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展望未来
- en: Now that you have experience with writing Arduino libraries, you can create
    your own. This will help you to gain a deeper understanding of the libraries provided
    by other sources. You can also practice by creating libraries for the projects
    in this book you’ve already completed.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经有了编写Arduino库的经验，你可以创建自己的库。这将帮助你更深入地理解其他来源提供的库。你也可以通过为你已经完成的书中的项目创建库来进行练习。
- en: In the next chapter, you will learn how to work with user input entered via
    numeric keypads, so turn the page to get started.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将学习如何处理通过数字键盘输入的用户输入，所以翻到下一页开始吧。
