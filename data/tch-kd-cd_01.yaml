- en: 'Chapter 1. Python Basics: Get to Know Your Environment'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 Python基础：认识你的开发环境
- en: Just about anything could have a computer in it—a phone, a car, a watch, a video
    game console, an exercise machine, a medical device, industrial equipment, a greeting
    card, or a robot. Computer programming, or *coding*, is how we tell a computer
    to perform a task, and understanding how to code puts the power of computers at
    your fingertips.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎任何东西都有可能内置计算机——手机、汽车、手表、视频游戏机、健身器材、医疗设备、工业设备、贺卡或机器人。计算机编程，或者说是*编码*，就是我们告诉计算机如何执行任务的方式，理解如何编写代码能让你充分利用计算机的强大功能。
- en: Computer programs—also called *applications*, or [*apps*](apd.html#gloss01_003)—tell
    computers what to do. A web app can tell the computer how to keep track of your
    favorite music; a game app can tell the computer how to display an epic battlefield
    with realistic graphics; a simple app can tell the computer to draw a beautiful
    spiral like the hexagon in [Figure 1-1](ch01.html#colorful_spiral_graphic "Figure 1-1. A
    colorful spiral graphic").
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机程序——也称为*应用程序*，或[*应用*](apd.html#gloss01_003)——告诉计算机做什么。一个网页应用程序可以告诉计算机如何跟踪你喜欢的音乐；一个游戏应用程序可以告诉计算机如何显示一个史诗般的战场和逼真的图像；一个简单的应用程序可以告诉计算机如何绘制像[图1-1](ch01.html#colorful_spiral_graphic
    "图1-1. 一幅色彩斑斓的螺旋图")中的六边形那样的美丽螺旋图。
- en: '![A colorful spiral graphic](httpatomoreillycomsourcenostarchimages2188686.png.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![一幅色彩斑斓的螺旋图](httpatomoreillycomsourcenostarchimages2188686.png.jpg)'
- en: Figure 1-1. A colorful spiral graphic
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-1. 一幅色彩斑斓的螺旋图
- en: Some apps are composed of thousands of lines of code, while others may be just
    a few lines long, like the program *NiceHexSpiral.py* in [Figure 1-2](ch01.html#nicehexspiraldotpycomma_a_short_python_p
    "Figure 1-2. NiceHexSpiral.py, a short Python program that draws the spiral in
    Figure 1-1").
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有些应用由成千上万行代码组成，而有些应用则可能只有几行代码，比如[图1-2](ch01.html#nicehexspiraldotpycomma_a_short_python_p
    "图1-2. NiceHexSpiral.py，一段短小的Python程序，用于绘制图1-1中的螺旋")中的程序*NiceHexSpiral.py*。
- en: '![NiceHexSpiral.py, a short Python program that draws the spiral in](httpatomoreillycomsourcenostarchimages2188690.png.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![NiceHexSpiral.py，一段短小的Python程序，用于绘制螺旋图](httpatomoreillycomsourcenostarchimages2188690.png.jpg)'
- en: Figure 1-2. *NiceHexSpiral.py*, a short Python program that draws the spiral
    in [Figure 1-1](ch01.html#colorful_spiral_graphic "Figure 1-1. A colorful spiral
    graphic")
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-2. *NiceHexSpiral.py*，一段短小的Python程序，用于绘制[图1-1](ch01.html#colorful_spiral_graphic
    "图1-1. 一幅色彩斑斓的螺旋图")中的螺旋
- en: This short program draws the colorful spiral shown in [Figure 1-1](ch01.html#colorful_spiral_graphic
    "Figure 1-1. A colorful spiral graphic"). I wanted a pretty picture to use as
    an example in this book, so I decided to solve that problem using a computer program.
    First I sketched out an idea, and then I started coding.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这个短小的程序绘制了[图1-1](ch01.html#colorful_spiral_graphic "图1-1. 一幅色彩斑斓的螺旋图")中展示的色彩螺旋。我想要一幅漂亮的图像作为本书中的示例，所以我决定通过计算机程序来解决这个问题。首先，我草拟了一个想法，然后开始编写代码。
- en: In this chapter, we’ll download, install, and learn to use the programs that
    will help us write code to build any kind of app you can imagine.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将下载、安装并学习使用帮助我们编写代码的程序，以便构建任何你能想象的应用。
- en: Getting Started with Python
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python入门
- en: To begin coding, we have to speak the computer’s language. Computers need step-by-step
    instructions, and they can only understand certain languages. Just like a person
    from Russia might not be able to understand English, computers only understand
    languages made for them. Computer code is written in programming languages like
    Python, C++, Ruby, or JavaScript. These languages allow us to “talk” to our computer
    and give it commands. Think about when you teach a dog to do tricks—when you give
    the “sit” command, he sits; when you say “speak,” he barks. The dog understands
    those simple commands, but not much else you say.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始编写代码，我们必须学习计算机的语言。计算机需要逐步的指令，并且只能理解某些特定的语言。就像一个俄罗斯人可能听不懂英语一样，计算机只懂为它们设计的语言。计算机代码是用像Python、C++、Ruby或JavaScript这样的编程语言编写的。这些语言允许我们与计算机“对话”并向它发出命令。想想看，当你教狗狗做一些把戏时——当你给它下“坐下”的命令时，它就坐下；当你说“说话”时，它就叫。这只狗理解这些简单的命令，但你说的其他话它听不懂。
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2188694.png.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](httpatomoreillycomsourcenostarchimages2188694.png.jpg)'
- en: Likewise, computers have their own limitations, but they can do whatever you
    tell them to do in their language. The language we’ll use in this book is *Python*,
    a simple, powerful programming language. Python is taught in introductory computer
    science courses in high school and college, and it’s used to run some of the most
    powerful apps in the world, including Gmail, Google Maps, and YouTube.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，计算机也有自己的局限性，但它们可以用它们的语言做你告诉它做的任何事情。我们在本书中使用的语言是 *Python*，一种简单而强大的编程语言。Python
    在高中和大学的计算机科学入门课程中教授，它被用于运行一些世界上最强大的应用程序，包括 Gmail、Google Maps 和 YouTube。
- en: 'To get you started using Python on your computer, we’ll go through these three
    steps together:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你开始在计算机上使用 Python，我们将一起完成这三个步骤：
- en: Download Python.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 Python。
- en: Install Python on your computer.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的计算机上安装 Python。
- en: Test Python with a simple program or two.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用一个简单的程序来测试 Python。
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2188698.png.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](httpatomoreillycomsourcenostarchimages2188698.png.jpg)'
- en: 1\. Download Python
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 下载 Python
- en: Python is free and easy to get from the Python website, shown in [Figure 1-3](ch01.html#python_website_makes_it_easy_to_download
    "Figure 1-3. The Python website makes it easy to download Python.").
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是免费的，可以从 Python 官网轻松下载，如[图 1-3](ch01.html#python_website_makes_it_easy_to_download
    "图 1-3. Python 官网让下载 Python 变得简单")所示。
- en: '![The Python website makes it easy to download Python.](httpatomoreillycomsourcenostarchimages2188700.png.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Python 官网让下载 Python 变得简单。](httpatomoreillycomsourcenostarchimages2188700.png.jpg)'
- en: Figure 1-3. The Python website makes it easy to download Python.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-3. Python 官网让下载 Python 变得简单。
- en: In your web browser, go to *[https://www.python.org/](https://www.python.org/)*.
    Hover your mouse over the **Downloads** menu button near the top and click the
    button that begins with **Python 3**.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中，访问 *[https://www.python.org/](https://www.python.org/)*。将鼠标悬停在顶部的
    **Downloads** 菜单按钮上，然后点击以 **Python 3** 开头的按钮。
- en: 2\. Install Python
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 安装 Python
- en: Find the file you just downloaded (it’s probably in your *Downloads* folder)
    and double-click it to run and install Python and the IDLE editor. IDLE is the
    program we’ll use to type and run our Python programs. For detailed installation
    instructions, see [Appendix A](apa.html "Appendix A. Python Setup for Windows,
    Mac, and Linux").
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 找到你刚下载的文件（它可能在你的 *Downloads* 文件夹中），双击它来运行并安装 Python 和 IDLE 编辑器。IDLE 是我们用来编写和运行
    Python 程序的程序。有关详细的安装说明，请参见[附录 A](apa.html "附录 A. Windows、Mac 和 Linux 上的 Python
    设置")。
- en: 3\. Test Python with a Program
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 使用程序测试 Python
- en: In your Start menu or *Applications* folder, find the IDLE program and run it.
    You’ll see a text-based command window like the one shown in [Figure 1-4](ch01.html#idle_python_shellem_dashour_command_cent
    "Figure 1-4. The IDLE Python shell—our command center for learning Python"). This
    is called the Python shell. A [*shell*](apd.html#gloss01_044) is a window or screen
    that lets the user enter commands or lines of code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的开始菜单或 *Applications* 文件夹中，找到 IDLE 程序并运行它。你将看到一个基于文本的命令窗口，如[图 1-4](ch01.html#idle_python_shellem_dashour_command_cent
    "图 1-4. IDLE Python 终端—我们学习 Python 的指挥中心")所示。这就是 Python 终端。[*终端*](apd.html#gloss01_044)是一个窗口或屏幕，允许用户输入命令或代码行。
- en: '![The IDLE Python shell—our command center for learning Python](httpatomoreillycomsourcenostarchimages2188705.png.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![IDLE Python 终端—我们学习 Python 的指挥中心](httpatomoreillycomsourcenostarchimages2188705.png.jpg)'
- en: Figure 1-4. The IDLE Python shell—our command center for learning Python
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-4. IDLE Python 终端—我们学习 Python 的指挥中心
- en: The `>>>` is called a *prompt*, and it means that the computer is ready to accept
    your first command. The computer is asking you to tell it what to do. Type
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`>>>` 被称为 *提示符*，意味着计算机已经准备好接受你的第一个命令。计算机在请求你告诉它该做什么。请输入'
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'and press ENTER or RETURN on your keyboard. You should see the Python shell
    respond by printing the text in quotes that you entered inside the parentheses:
    `Hello, world!`. That’s it—you’ve written your first program!'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后按键盘上的 ENTER 或 RETURN 键。你应该会看到 Python 终端通过打印你在括号中输入的文本来响应：`Hello, world!`。就这样——你已经写好了你的第一个程序！
- en: Writing Programs in Python
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用 Python 编写程序
- en: You’ll usually want to write programs that are longer than a single line, so
    Python comes with an *editor* for writing longer programs. In IDLE, go to the
    [*File*](apd.html#gloss01_020) menu and select **File**▸**New Window** or **File**▸**New
    File**. A blank screen will pop up, with *Untitled* at the top.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通常你会想写一些比一行更长的程序，因此 Python 配备了一个 *编辑器* 用于编写更长的程序。在 IDLE 中，进入 [*文件*](apd.html#gloss01_020)菜单，选择
    **File**▸**New Window** 或 **File**▸**New File**。一个空白屏幕将弹出，顶部写着 *Untitled*。
- en: 'Let’s write a slightly longer program in Python. In the new, blank window,
    type the following three lines of code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个稍微长一点的 Python 程序。在新的空白窗口中，输入以下三行代码：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first line is called a *comment*. Comments, which begin with a hash mark
    (`#`), are programming notes or reminders that the computer ignores. In this example,
    the comment is just a note to remind us of the program’s name. The second line
    asks the user to input their name and remembers it as `name`. The third line prints
    `"Hi, "` followed by the user’s name. Notice that there’s a comma (`,`) separating
    the quoted text `"Hi, "` from the name.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行叫做 *注释*。注释以井号 (`#`) 开头，是程序的备注或提醒，计算机会忽略它们。在这个例子中，注释只是一个提醒，提醒我们程序的名称。第二行要求用户输入他们的名字并将其存储为
    `name`。第三行打印 `"Hi, "`，后面跟着用户的名字。注意，逗号（`,`）将引号中的文本 `"Hi, "` 与名字分开。
- en: Running Programs in Python
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 中运行程序
- en: Go to the **Run** option on the menu above your program and select **Run**▸**Run
    Module**. This will *run*, or carry out, the instructions in your program. It
    will first ask you to save the program. Let’s call our file *YourName.py*. This
    tells your computer to save the program as a file called *YourName.py*, and the
    *.py* part means this is a Python program.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 进入程序上方菜单中的 **Run** 选项，选择 **Run**▸**Run Module**。这将 *运行*，或执行，你程序中的指令。它会首先要求你保存程序。我们将文件命名为
    *YourName.py*。这告诉计算机将程序保存为名为 *YourName.py* 的文件，*.py* 部分表示这是一个 Python 程序。
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2188709.png.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![没有说明的图片](httpatomoreillycomsourcenostarchimages2188709.png.jpg)'
- en: When you save the file and run it, you’ll see your Python shell window start
    the program by showing the question `What is your name?`. Type your name on the
    next line and press ENTER. The program will print `Hi,` followed by the name you
    typed. Since this is all that you asked your program to do, the program will end,
    and you’ll see the `>>>` prompt again, as shown in [Figure 1-5](ch01.html#computer_knows_my_nameexclamation_mark
    "Figure 1-5. The computer knows my name!").
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当你保存文件并运行时，你会看到你的 Python Shell 窗口启动程序，显示问题 `What is your name?`。在下一行输入你的名字并按回车键。程序将打印
    `Hi,`，后面跟上你输入的名字。由于这是你要求程序执行的唯一操作，程序会结束，你将再次看到 `>>>` 提示符，如 [图 1-5](ch01.html#computer_knows_my_nameexclamation_mark
    "图 1-5. 计算机知道我的名字！") 所示。
- en: '![The computer knows my name!](httpatomoreillycomsourcenostarchimages2188712.png.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![计算机知道我的名字！](httpatomoreillycomsourcenostarchimages2188712.png.jpg)'
- en: Figure 1-5. The computer knows my name!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-5. 计算机知道我的名字！
- en: For younger learners, like my three-year-old son, it’s fun to explain that the
    program is asking them to type their name. Max knows the letters in his name,
    so he types *m*-*a*-*x* on the keyboard, and he loves it when I tell him the program
    said `Hi, max` back to him. Ask your young learner if she’d like the program to
    say something different. Max said “Hello,” so I edited the earlier program on
    the third line to say `Hello,` instead of `Hi,`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于年轻的学习者，比如我三岁的儿子，他很喜欢知道程序要求他们输入自己的名字。Max 知道自己名字中的字母，所以他在键盘上输入 *m*-*a*-*x*，当我告诉他程序说
    `Hi, max` 时，他很喜欢。问问你的年轻学习者是否希望程序说些不同的话。Max 说了“Hello”，所以我在第三行修改了之前的程序，改成 `Hello,`
    而不是 `Hi,`。
- en: 'Then I changed the third line to read:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我将第三行改为：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Max loved it when the program replied to him with `Hello, max max max max max`.
    Try experimenting with the second and third lines of the program to have the computer
    ask different questions and print different answers.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Max 很喜欢程序回应他 `Hello, max max max max max`。尝试修改程序的第二行和第三行，让计算机问不同的问题并打印不同的答案。
- en: What You Learned
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你学到了什么
- en: Learning to code is like learning to solve puzzles, riddles, or brainteasers.
    You start with a problem, apply what you know, and learn new things along the
    way. By the time you finish, you’ve exercised your mind, and you’ve answered a
    question. Hopefully, you’ve also had fun.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 学习编程就像学习解决谜题、谜语或脑筋急转弯。你从一个问题开始，运用你所知道的，途中学到新的东西。当你完成时，你不仅锻炼了大脑，还解答了一个问题。希望你也玩得开心。
- en: 'In this chapter, we solved our first major problem: we installed the Python
    programming language on our computers so that we could start coding. It was as
    easy as downloading a file, installing it, and running it.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们解决了第一个重大问题：我们在电脑上安装了 Python 编程语言，这样我们就可以开始编程了。这个过程就像下载文件、安装并运行一样简单。
- en: In the chapters that follow, you’ll learn how to solve problems using code.
    You’ll start with simple visual puzzles, like drawing shapes on the computer screen
    (or a tablet or phone), and then find out how to create simple games like Guess
    a Number, Rock-Paper-Scissors, and Pong.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，你将学习如何使用代码解决问题。你将从简单的视觉谜题开始，比如在计算机屏幕（或平板电脑或手机）上绘制图形，然后学会如何创建简单的游戏，如猜数字、石头剪子布和乒乓游戏。
- en: From the foundation you’ll build in these first programs, you can go on to code
    games, mobile apps, web apps, and more.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些初始程序，你将打下坚实的基础，之后你可以编写游戏、移动应用、网页应用等更多内容。
- en: At this point, you should . . .
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该...
- en: Have a fully functional Python programming environment and text editor.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有一个功能完备的Python编程环境和文本编辑器。
- en: Be able to enter programming commands directly into the Python shell.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够直接在Python shell中输入编程命令。
- en: Be able to write, save, run, and modify short programs in IDLE.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够在IDLE中编写、保存、运行和修改短小程序。
- en: 'Be ready to try more advanced, fun programs in [Chapter 2](ch02.html "Chapter 2. Turtle
    Graphics: Drawing with Python").'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备好在[第2章](ch02.html "第2章. 海龟图形：使用Python绘图")中尝试更高级、更有趣的程序。
- en: Programming challenges
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 编程挑战
- en: At the end of each chapter, you can practice what you’ve learned—and make even
    cooler programs!—by trying a couple of challenges. (If you get stuck, go to *[http://www.nostarch.com/teachkids/](http://www.nostarch.com/teachkids/)*
    for sample answers.)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在每一章的结尾，你可以通过尝试几个挑战来练习所学内容——并制作更酷的程序！（如果你卡住了，可以访问* [http://www.nostarch.com/teachkids/](http://www.nostarch.com/teachkids/)*查看样例答案。）
- en: '**#1: MAD LIBS**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**#1: 疯狂填字游戏**'
- en: The simple *YourName.py* app has all the necessary components for us to build
    a much more interesting program, like the old-fashioned Mad Libs word games (go
    to *[http://www.madlibs.com/](http://www.madlibs.com/)* if you’ve never tried
    one before).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的*YourName.py*应用程序包含了构建一个更有趣程序所需的所有必要组件，比如老式的疯狂填字游戏（如果你以前从未尝试过，可以访问* [http://www.madlibs.com/](http://www.madlibs.com/)*）。
- en: Let’s modify the program *YourName.py* and save it as *MadLib.py*. Instead of
    asking for the user’s name, we’ll ask for an adjective, a noun, and a past-tense
    verb and store them in three different variables, just as we did for `name` in
    the original program. Then, we’ll print out a sentence like “The *adjective noun
    verb* over the lazy brown dog.” Here’s what the code should look like after these
    changes.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改程序*YourName.py*并将其保存为*MadLib.py*。我们将不再询问用户的名字，而是询问形容词、名词和过去式动词，并将它们存储在三个不同的变量中，正如我们在原程序中处理`name`一样。然后，我们将打印出类似“*adjective
    noun verb* over the lazy brown dog.”的句子。这里是修改后的代码应该是什么样的。
- en: '***MadLib.py***'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '***MadLib.py***'
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can enter any adjective, noun, and verb you wish. Here’s what you should
    see when you save and run *MadLib.py* (I’ve entered `smart`, `teacher`, and `sneezed`):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以输入任何形容词、名词和动词。保存并运行*MadLib.py*后，你应该看到这样的内容（我输入了`smart`、`teacher`和`sneezed`）：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**#2: MORE MAD LIBS!**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**#2: 更多的疯狂填字游戏！**'
- en: Let’s make our Mad Lib game a little more interesting. Start a new version of
    *MadLib.py* by saving it as *MadLib2.py*. Add another input line that asks for
    a type of animal. Then, change the `print` statement by removing the word `dog`
    and adding the new `animal` variable after the end of the quoted sentence (add
    a comma before your new variable inside the `print` statement). You can change
    the sentence more, if you’d like. You could wind up with `The funny chalkboard
    burped over the lazy brown gecko`—or something even funnier!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们让疯狂填字游戏变得更加有趣。通过将其保存为*MadLib2.py*，开始一个新的*MadLib.py*版本。添加另一行输入，询问一种动物类型。然后，修改`print`语句，去掉单词`dog`，在引号句子的末尾添加新的`animal`变量（在`print`语句内的新变量前加一个逗号）。你也可以进一步修改这个句子。你可能最终得到类似于`The
    funny chalkboard burped over the lazy brown gecko`的句子——或者更搞笑的内容！
