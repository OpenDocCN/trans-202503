- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">15</samp> <samp class="SANS_Dogma_OT_Bold_B_11">ENERGY
    EFFICIENCY FOR PORTABLE PROJECTS</samp>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">15</samp> <samp class="SANS_Dogma_OT_Bold_B_11">便携项目的能效</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: Arduino-based projects are generally powered by AC mains adapters or USB power
    sources without much thought about power consumption. For portable projects, however,
    it’s important to reduce energy consumption to increase the battery life for a
    longer runtime. This includes projects such as portable games or sensor and data-logging
    projects that don’t have access to external power.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Arduino的项目通常由交流电适配器或USB电源供电，而不太考虑功耗。然而，对于便携式项目来说，减少能量消耗以延长电池寿命非常重要，从而获得更长的运行时间。这包括便携游戏或没有外部电源的传感器和数据记录项目。
- en: 'This chapter covers various methods of improving your Arduino project’s power
    efficiency. You’ll learn to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了提高你Arduino项目电源效率的各种方法。你将学习如何：
- en: Measure the power consumption of your Arduino projects
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测量你的Arduino项目的功耗
- en: Estimate project battery life
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 估算项目电池寿命
- en: Reduce Arduino power consumption with software- and hardware-based methods
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过软件和硬件方法减少Arduino功耗
- en: Build low-power data-logging devices
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建低功耗的数据记录设备
- en: You’ll also learn some useful tools and methods to work with your Arduino such
    as the Arduino library for the DS3231-type clock IC module, sound sensor modules,
    and a USBasp device to upload sketches to Arduino boards and compatible circuits.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将学习一些与Arduino配合使用的有用工具和方法，如适用于DS3231型时钟IC模块的Arduino库、声音传感器模块以及用于将程序上传到Arduino板和兼容电路的USBasp设备。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Basic Principles of Electricity</samp>
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">电学基本原理</samp>
- en: Portable projects are always, in some form, battery powered. The less power
    you use, the longer your project will last between battery charges or replacements.
    This chapter aims to teach you various ways to enable your projects to last longer
    when away from wired power. Before moving forward, let’s review some basic principles
    of electricity to be sure you have the conceptual foundation to measure power
    consumption and determine battery life later in this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 便携项目通常都以某种形式由电池供电。你使用的电量越少，项目在电池充电或更换之间的持续时间就越长。本章旨在教你多种方法，以使你的项目在没有有线电源的情况下能更长时间运行。在继续之前，让我们回顾一些基本的电学原理，确保你具备测量功耗和确定电池寿命的概念基础，便于后续章节的学习。
- en: 'In simple terms, *electricity* is a form of energy that we can harness and
    convert into heat, light, movement, and power. Electricity has three main properties:
    current, voltage, and power.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，*电力*是一种我们可以利用并转化为热能、光能、运动和功率的能量形式。电力有三个主要特性：电流、电压和功率。
- en: '**Current**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**电流**'
- en: The flow of electrical energy through a circuit is called the *current*. Electrical
    current flows through a *circuit* from the positive side of a power source, such
    as a battery, to the negative side of the power source. This is known as *direct
    current (DC)*. For the purposes of this book, we will not deal with *alternating
    current (AC)*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 电能通过电路的流动被称为*电流*。电流从电源的正极流向负极，例如从电池的正极到负极。这被称为*直流 (DC)*。在本书中，我们不会涉及*交流电 (AC)*。
- en: In some circuits, the negative side is called *ground (GND)*. Current is measured
    in *amperes (A)*, also known as *amps*. Smaller amounts of current are measured
    in *milliamps (mA)*, where 1,000 milliamps is equal to 1 amp.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些电路中，负极称为*接地 (GND)*。电流以*安培 (A)*为单位测量，也叫做*安*。较小的电流以*毫安 (mA)*为单位测量，1,000毫安等于1安培。
- en: '**Voltage**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**电压**'
- en: '*Voltage* is a measure of the difference in potential energy between a circuit’s
    positive and negative ends. It is measured in *volts (V)*. The greater the voltage,
    the faster the current moves through a circuit.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*电压*是电路正负端之间潜在能量差的度量。它以*伏特 (V)*为单位进行测量。电压越大，电流通过电路的速度就越快。'
- en: '**Power**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**功率**'
- en: '*Power* is a measurement of the rate at which an electrical device converts
    energy from one form to another. Power is measured in *watts (W)*. For example,
    a 100 W incandescent light bulb is much brighter than a 60 W bulb because the
    higher-wattage bulb converts more electrical energy into light.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*功率*是电气设备将能量从一种形式转换为另一种形式的速率的度量。功率以*瓦特 (W)*为单位进行测量。例如，100瓦的白炽灯比60瓦的灯更亮，因为更高瓦数的灯泡将更多的电能转化为光能。'
- en: 'A simple mathematical relationship exists among voltage, current, and power:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 电压、电流和功率之间存在简单的数学关系：
- en: Power (*W*) = Voltage (*V*) × Current (*A*)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 功率 (*W*) = 电压 (*V*) × 电流 (*A*)
- en: You’ll use this formula in calculations completed later in this chapter. Next,
    I’ll introduce you to types of power consumption and how that power is measured.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在本章稍后的计算中使用此公式。接下来，我将向您介绍功耗的类型及如何测量这些功率。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Measuring Power Consumption</samp>
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">测量功耗</samp>
- en: The appropriate method of determining how much power your Arduino project is
    using at a given moment depends on how the power is connected to your Arduino.
    To calculate power consumption in the examples and projects later in this chapter,
    you’ll need to be able to pick an appropriate method of measuring power consumption
    for the project at hand. In this section, I’ll show you various methods of measuring
    your Arduino project’s power consumption.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 确定您的 Arduino 项目在特定时刻使用多少功率的方法取决于电源如何连接到您的 Arduino。为了计算本章后面示例和项目中的功耗，您需要能够选择一种适合当前项目的功率测量方法。在本节中，我将向您展示各种测量
    Arduino 项目功耗的方法。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">USB-Sourced Power</samp>
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">USB 电源</samp>
- en: If your project is powered via a USB-based power supply, the easiest way to
    measure power consumption is to use an inline device such as a USB Doctor, shown
    in [Figure 15-1](chapter15.xhtml#fig15-1). The USB Doctor is a small device that
    measures voltage and current passing through a USB cable.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的项目通过 USB 电源供电，最简单的测量功耗的方法是使用诸如 USB Doctor 这样的在线设备，如[图 15-1](chapter15.xhtml#fig15-1)所示。USB
    Doctor 是一个小型设备，可以测量通过 USB 电缆传输的电压和电流。
- en: '![A PHOTO OF THE USB VOLTAGE AND CURRENT MEASUREMENT DEVICE](../images/fig15-1.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![USB 电压和电流测量设备的照片](../images/fig15-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-1: A USB Doctor,
    an inline power measurement device</samp>'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 15-1：USB Doctor，一种在线电源测量设备</samp>
- en: USB Doctors are connected inline between the Arduino and the power source (such
    as a PC, wall wart, or battery bank) and will alternate between showing you the
    current and voltage being used on the digital display. The main value of interest
    is the current, as you use this in the calculation to determine battery life.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: USB Doctor 设备在线连接在 Arduino 与电源（例如 PC、墙壁适配器或电池组）之间，它会在数字显示屏上交替显示当前使用的电流和电压。主要关注的值是电流，因为您将使用它来计算电池寿命。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Wired Power</samp>
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">有线电源</samp>
- en: If a project has *wired power consumption*, that means it connects to a power
    source via the Arduino’s DC socket or directly into the 5V and GND pins on the
    board or in your circuit. To measure power consumption for such projects, use
    a multimeter with a current setting.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个项目有*有线功耗*，那意味着它通过 Arduino 的 DC 插座或直接连接到电路板上的 5V 和 GND 引脚来连接电源。要测量此类项目的功耗，可以使用具有电流设置的万用表。
- en: Unlike measuring voltage, where you can just probe across two points, measuring
    current requires the power to enter the multimeter via the current socket and
    exit via the COM socket. To quickly determine if your multimeter has this capacity
    (most do), check whether it has a socket labeled mA or A.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 与测量电压不同，测量电流需要电源通过电流插孔进入万用表，并通过 COM 插孔退出。要快速确定您的万用表是否具有此功能（大多数都有），请检查它是否有标有
    mA 或 A 的插孔。
- en: For example, consider the multimeters in [Figure 15-2](chapter15.xhtml#fig15-2).
    Starting with the leftmost multimeter and moving right, you’d use the A mA and
    COM sockets; the 10A and COM sockets; the 20A and COM sockets; and the 10A mA
    and COM sockets.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑[图 15-2](chapter15.xhtml#fig15-2)中的万用表。从最左边的万用表开始，依次使用 A mA 和 COM 插孔；10A
    和 COM 插孔；20A 和 COM 插孔；以及 10A mA 和 COM 插孔。
- en: '![A PICTURE OF DIFFERENT MULTIMETERS WITH THE CURRENT-MEASURING ABILITY](../images/fig15-2.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![不同万用表的图片，具有电流测量能力](../images/fig15-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-2: Multimeters with
    current-measuring capability</samp>'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 15-2：具有电流测量能力的万用表</samp>
- en: If you’re presented with both an A-style and an mA-style socket, use the amps
    socket (A) first. If the value displayed falls within the range of the mA setting,
    you can then use that socket and range to get a more precise measurement.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到 A 型插座和 mA 型插座，首先使用安培（A）插座。如果显示的值在毫安（mA）设置范围内，你可以改用那个插座和范围来获得更精确的测量。
- en: Don’t forget to set your multimeter to the current mode that matches the socket
    being used. If in doubt, review the instruction manual with your multimeter. Once
    you set your multimeter to the current range, the probes need to be connected
    into the power circuit.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了将万用表设置为与你使用的插座相匹配的电流模式。如果有疑问，请查看万用表的说明书。一旦将万用表设置为电流范围，探针需要连接到电源电路中。
- en: If you’re using the DC socket power supply, an easy way to measure is to use
    a pair of DC terminal connectors such as PMD Way parts 116101M and 116101F, examples
    of which are shown in [Figure 15-3](chapter15.xhtml#fig15-3). You can then run
    wires between the two units and tap in with your meter probes. If your multimeter
    returns a negative value, swap the probes across to change the polarity.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是直流插座电源，测量的简单方法是使用一对直流端子连接器，例如 PMD Way 部件 116101M 和 116101F，图示见[图 15-3](chapter15.xhtml#fig15-3)。然后，你可以在两个单元之间接入电线，并用你的表笔进行测量。如果万用表返回负值，交换表笔以改变极性。
- en: '![A PICTURE OF THE DC PLUG AND SOCKET TERMINAL BLOCKS](../images/fig15-3.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![直流插头和插座端子块的图片](../images/fig15-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-3: DC terminal connectors</samp>'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 15-3：直流端子连接器</samp>
- en: However, if you’re using direct connection to the Arduino’s 5V and GND pins,
    you can easily probe between the power supply positive end and the Arduino’s 5V
    pin.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你直接连接到 Arduino 的 5V 和 GND 引脚，你可以很容易地在电源正端和 Arduino 的 5V 引脚之间进行探测。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Arduino Power Consumption</samp>
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">Arduino 电源消耗</samp>
- en: Now that you have an understanding of the types of measurement tools available,
    I’ll give you a baseline idea of consumption. Let’s examine the current consumption
    values I measured with a multimeter from a standard Arduino Uno R3 board with
    the onboard D13 LED turned on. You can then follow along and determine consumption
    for your own project.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了可用的测量工具类型，我将给你一个关于消耗的基准概念。我们来看看我用万用表从标准的 Arduino Uno R3 板上测量的电流消耗值，板上
    D13 LED 已开启。然后你可以跟着做，确定你自己项目的电流消耗。
- en: '[Table 15-1](chapter15.xhtml#tab15-1) lists the current in milliamps along
    with the power source used to power the Arduino. When you measure the current
    draw for your own projects using the methods described in the previous section,
    your measurements may differ from mine a little depending on the brand of Arduino
    or compatible board you’re using.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 15-1](chapter15.xhtml#tab15-1)列出了以毫安为单位的电流及用于为 Arduino 提供电力的电源。当你使用前面描述的方法测量你自己项目的电流消耗时，根据你使用的
    Arduino 或兼容板的品牌，测量值可能会与你的略有不同。'
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 15-1:</samp> <samp class="SANS_Futura_Std_Book_11">Arduino
    Current Draw at Various Supply Voltages</samp>
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 15-1：</samp> <samp class="SANS_Futura_Std_Book_11">不同供电电压下的
    Arduino 电流消耗</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Power source</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Current
    draw (mA)</samp> |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">电源</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">电流消耗（毫安）</samp>
    |'
- en: '| --- | --- |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| <samp class="SANS_Futura_Std_Book_11">12 V via the DC socket</samp> | <samp
    class="SANS_Futura_Std_Book_11">47.9</samp> |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">12 V 通过直流插座</samp> | <samp class="SANS_Futura_Std_Book_11">47.9</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">9 V via the DC socket</samp> | <samp
    class="SANS_Futura_Std_Book_11">47.9</samp> |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">9 V 通过直流插座</samp> | <samp class="SANS_Futura_Std_Book_11">47.9</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">5 V via the 5V pin or USB socket</samp>
    | <samp class="SANS_Futura_Std_Book_11">44.5</samp> |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">5 V 通过 5V 引脚或 USB 插座</samp> | <samp
    class="SANS_Futura_Std_Book_11">44.5</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">4.8 V via the 5V pin</samp> | <samp
    class="SANS_Futura_Std_Book_11">42.5</samp> |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">4.8 V 通过 5V 引脚</samp> | <samp class="SANS_Futura_Std_Book_11">42.5</samp>
    |'
- en: Bear in mind these values are for the Arduino alone. Whatever you add to the
    project will increase the current draw. I’ve measured the current at 4.8 V for
    this example because this is a common voltage when using four AA rechargeable
    cells (as they are 1.2 V, not 1.5 V) or four AA disposable cells that are almost
    at the end of their life span.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这些数值仅适用于Arduino本身。无论你在项目中添加什么，都将增加电流消耗。我在这个示例中测量的是4.8V下的电流，因为这是使用四个AA充电电池（它们是1.2V，而不是1.5V）或四个几乎耗尽寿命的AA一次性电池时常见的电压。
- en: The Arduino can happily operate on these lower voltages. However, if you’re
    using the microcontroller’s internal ADC to measure analog signals, you’ll need
    to take the reduced operating voltage into account, as the ADC’s reference voltage
    is assumed to be 5 V and not the actual operating voltage. Instead, use the external
    reference voltage pin and the <samp class="SANS_TheSansMonoCd_W5Regular_11">analogReference()</samp>
    function. If you’re not familiar with this process, you can learn more about this
    in Chapter 4 of *Arduino Workshop*, 2nd edition.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino可以在这些较低的电压下正常工作。然而，如果你使用微控制器的内置ADC来测量模拟信号，你需要考虑降低的工作电压，因为ADC的参考电压假设为5V，而不是实际的工作电压。相反，使用外部参考电压引脚和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">analogReference()</samp>函数。如果你不熟悉这个过程，你可以在《Arduino工作坊》第二版的第4章中学习更多。
- en: Now that you have an idea of an Arduino’s usual power consumption when running
    without any external parts, I’ll show you how to calculate approximate battery
    life based on your battery capacity and project current draw.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你对Arduino在没有任何外部部件情况下的常规功耗有所了解，我将向你展示如何根据电池容量和项目电流消耗来估算电池寿命。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Estimating Battery Life</samp>
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">估算电池寿命</samp>
- en: To determine the battery life for your project, you need to determine how much
    current over time (measured in milliamp hours) is used by the project. To do this,
    first measure the current your project draws for a moment from the connected power
    supply. Once you have a current figure for consumption, such as 65 mA, your project
    should draw that amount of current for one hour. This becomes the consumption
    in milliamp hours, or mAh. You can then consider the consumption to be 65 mAh.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定你项目的电池寿命，你需要确定项目在一段时间内（以毫安时为单位）消耗的电流。首先，测量你的项目从连接的电源吸取的电流。一旦你得到了电流消耗值，例如65
    mA，你的项目应该在一小时内消耗这个电流。这样，你的消耗就是毫安时（mAh）。然后，你可以认为消耗是65 mAh。
- en: If the Arduino activates external devices such as a motor or servo, don’t forget
    to take that extra current into account. If your project runs a motor for, say,
    1 minute every hour, measure the current when the motor is both on and off and
    then determine the total current used for one hour. For example, if the project
    ran a motor at a constant speed for 10 minutes, if the current was measured at
    100 mA, and if the project ran for 50 minutes at 60 mAh, then the consumption
    would be 100 mA × (10 / 60 minutes) + 60 mA × (50 / 60 minutes) = 66.6 mAh.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Arduino激活外部设备，例如电机或伺服电机，别忘了考虑额外的电流消耗。例如，如果你的项目每小时运行1分钟的电机，测量电机开启和关闭时的电流，然后确定一小时内总共消耗的电流。例如，如果项目以恒定速度运行电机10分钟，电流测量为100
    mA，而项目运行了50分钟，电流为60 mAh，那么消耗量为100 mA × (10 / 60分钟) + 60 mA × (50 / 60分钟) = 66.6
    mAh。
- en: Next, consider the battery type your project uses. For example, if you have
    a 20 Ah (Amp hours, more often advertised as 20,000 mAh) USB battery bank, as
    shown in [Figure 15-4](chapter15.xhtml#fig15-4), your project should last for
    about 300 hours, since 20,000 / 66.6 = 300.3003\. If your battery is rated in
    Ah, multiply that value by 1,000 to convert to mAh.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，考虑你的项目使用的电池类型。例如，如果你有一个20 Ah（安培时，通常标示为20,000 mAh）的USB电池银行，如[图15-4](chapter15.xhtml#fig15-4)所示，你的项目应该能持续大约300小时，因为20,000
    / 66.6 = 300.3003。如果你的电池的额定值是Ah，将该值乘以1000即可转换为mAh。
- en: '![A PICTURE OF A TYPICAL USB POWER BANK RECHARGEABLE BATTERY](../images/fig15-4.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![典型USB电源银行充电电池的图片](../images/fig15-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-4: A typical USB
    battery bank</samp>'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图15-4：典型的USB电池银行</samp>
- en: Some battery banks will turn off if there isn’t enough current draw, as part
    of a power-saving measure. Shop for units that have an always-on mode so they
    don’t turn off if your Arduino’s power consumption drops to a very low level.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有些电池组在电流消耗不足时会关闭，以节省电能。选择那些具有常开模式的电池组，这样它们就不会在 Arduino 的功耗降到非常低时自动关闭。
- en: Aside from battery banks, another popular and simple method of powering portable
    projects is to use nickel–metal hydride (NiMH) AA rechargeable cells in groups
    of four. This gives a supply voltage of 4.8 V DC, which, again, works fine to
    power an Arduino. You would use a four-AA cell holder to hold the cells, as shown
    in [Figure 15-5](chapter15.xhtml#fig15-5), and then directly wire this to the
    Arduino’s 5V and GND pins.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 除了电池组，另一种常见且简单的为便携项目供电的方法是使用镍氢 (NiMH) AA 可充电电池，通常是四颗一组。这提供了 4.8 V DC 的电压，同样可以很好地为
    Arduino 供电。你可以使用四节 AA 电池座来固定这些电池，如图 [Figure 15-5](chapter15.xhtml#fig15-5) 所示，然后将电池座直接接线到
    Arduino 的 5V 和 GND 引脚。
- en: The individual NiMH cells should be marked with their capacity, such as 2,000
    mAh. With a fully charged set of 4 cells in new condition, your 66.6 mA project
    would run for about 30 hours.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 NiMH 电池应标明其容量，如 2000 mAh。使用四颗全新并充满电的电池，在 66.6 mA 的功耗下，你的项目大约可以运行 30 小时。
- en: If you only have disposable AA cells available, place a diode such as a common
    1N4001 in series between the positive on the battery pack and the 5V pin on the
    Arduino. The anode connects to the battery pack positive output, and the cathode
    connects to the 5V pin on the Arduino. This should drop the voltage of a new pack
    of cells from around 6 V DC down to around 5.3 V DC, which your Arduino can comfortably
    use.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只能使用一次性 AA 电池，可以将一个像常见的 1N4001 二极管串联在电池组的正极和 Arduino 的 5V 引脚之间。阳极连接到电池组的正极输出，阴极连接到
    Arduino 的 5V 引脚。这样应该能将新电池组的电压从约 6 V DC 降到约 5.3 V DC，这是 Arduino 可以正常使用的电压。
- en: '![A PICTURE OF A FOUR-AA-CELL HOLDER](../images/fig15-5.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![A PICTURE OF A FOUR-AA-CELL HOLDER](../images/fig15-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-5: A holder for four
    AA-cell batteries</samp>'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-5：四节 AA 电池座</samp>
- en: Batteries such as NiMH rechargeable units and disposable cells don’t offer a
    constant voltage throughout their life—rather, the voltage will drop toward the
    end of their discharging cycle. Just to make things more complex, disposable battery
    life can vary depending on the amount of current being drawn at any one time.
    For example, the graph shown in [Figure 15-6](chapter15.xhtml#fig15-6) shows that
    the more current is discharged from an Energizer-brand alkaline-type AA cell,
    the less capacity there is for use.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 像 NiMH 可充电电池和一次性电池这样的电池在整个生命周期内并不提供恒定的电压——相反，电压会在放电周期的末期下降。为了让事情更复杂，一次性电池的使用寿命可能会根据每次所用的电流量有所不同。例如，图
    [Figure 15-6](chapter15.xhtml#fig15-6) 显示了从 Energizer 品牌的碱性 AA 电池放出的电流越多，其可用容量就越小。
- en: '![](../images/fig15-6.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig15-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-6: Capacity versus
    discharge rate for a disposable Energizer-brand alkaline AA-cell battery</samp>'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-6：一次性 Energizer 品牌碱性
    AA 电池的容量与放电率关系图</samp>
- en: To get the most accurate battery life estimate possible for your project, locate
    and review the data sheets of the battery type you’re interested in. They will
    offer discharge-rate graphs, performance at various temperatures, and more interesting
    information that helps you make an informed decision.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得最准确的电池寿命估算，找到并查看你感兴趣的电池类型的数据表。这些数据表提供了放电率图、不同温度下的表现以及更多有趣的信息，帮助你做出明智的决策。
- en: Now that you know how to measure your project’s power consumption and can choose
    between various portable power options, I’ll explain various methods of reducing
    power consumption. You’ll put these methods into use in the following projects.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何测量项目的功耗，并能在多种便携电源选项中做出选择，我将解释一些减少功耗的方法。你将在接下来的项目中运用这些方法。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Software-Based Methods to Reduce Power
    Consumption</samp>
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">基于软件的方法来减少功耗</samp>
- en: To use low-power functions with your Arduino, you’ll need to install a library.
    Open the IDE’s library manager and search for **low-power rocket**; then install
    the Low-Power library by Rocket Scream Electronics, as shown in [Figure 15-7](chapter15.xhtml#fig15-7).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要在你的 Arduino 上使用低功耗功能，你需要安装一个库。打开 IDE 的库管理器并搜索 **low-power rocket**，然后安装 Rocket
    Scream Electronics 提供的 Low-Power 库，如 [图 15-7](chapter15.xhtml#fig15-7) 所示。
- en: '![A SCREENSHOT OF THE LOW-POWER LIBRARY FOR ARDUINO SEARCH RESULT](../images/fig15-7.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![Arduino 低功耗库搜索结果截图](../images/fig15-7.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-7: Low-Power library
    installation</samp>'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 15-7：低功耗库安装</samp>
- en: In the following sections, I’ll show you two ways to use this library to reduce
    power consumption. You’ll first practice programming Power Down/Wake mode in the
    following homework and then move on to testing Wake on Interrupt mode. The examples
    and projects in this chapter use the Arduino Uno or compatible board with an ATmega328
    microcontroller.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我将向你展示两种使用该库来减少功耗的方法。你将首先在以下作业中练习编程电源关闭/唤醒模式，然后继续测试中断唤醒模式。本章中的示例和项目使用的是
    Arduino Uno 或兼容的 ATmega328 微控制器板。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Power Down/Wake Periodic
    Mode</samp>
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">电源关闭/唤醒周期模式</samp>
- en: 'The Power Down/Wake Periodic mode is useful when you need your Arduino to perform
    a certain task on a regular basis and then stop drawing current once the task
    is complete—for example, to wake up and check the status of something or to log
    data and then go back to sleep. To use this mode, include the library in your
    sketch using the following statement:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 电源关闭/唤醒周期模式在你需要让 Arduino 定期执行某个任务，并在任务完成后停止耗电时非常有用——例如，唤醒并检查某个状态，或记录数据然后返回休眠状态。要使用此模式，请在你的草图中包含以下库：
- en: '[PRE0]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can use this function to turn off the ADC and the microcontroller’s brown-out
    detector with the <samp class="SANS_TheSansMonoCd_W5Regular_11">ADC_OFF</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">BOD_OFF</samp> parameters as
    shown next. When you want the Arduino to go to sleep with all power-saving features
    turned on, use the following function in your sketch:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用此函数通过 <samp class="SANS_TheSansMonoCd_W5Regular_11">ADC_OFF</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">BOD_OFF</samp> 参数来关闭 ADC 和微控制器的欠压检测，如下所示。当你希望
    Arduino 在启用所有省电功能的情况下进入睡眠状态时，请在你的草图中使用以下函数：
- en: '[PRE1]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'There are several parameters in that function, the first being the duration
    of idle. In this example, I’ve set the duration to eight seconds with <samp class="SANS_TheSansMonoCd_W5Regular_11">SLEEP_8S</samp>.
    However, you can also use one of the alternative delays:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数有几个参数，第一个是空闲的持续时间。在这个示例中，我将持续时间设置为八秒，使用了 <samp class="SANS_TheSansMonoCd_W5Regular_11">SLEEP_8S</samp>。然而，你也可以使用其他延迟选项之一：
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_15MS</samp>    15 milliseconds
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_15MS</samp>    15 毫秒
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_30MS</samp>    30 milliseconds
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_30MS</samp>    30 毫秒
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_60MS</samp>    60 milliseconds
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_60MS</samp>    60 毫秒
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_120MS</samp>    120 milliseconds
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_120MS</samp>    120 毫秒
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_250MS</samp>    250 milliseconds
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_250MS</samp>    250 毫秒
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_500MS</samp>    500 milliseconds
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_500MS</samp>    500 毫秒
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_1S</samp>    1 second
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_1S</samp>    1 秒
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_2S</samp>    2 seconds
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_2S</samp>    2 秒
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_4S</samp>    4 seconds
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_4S</samp>    4 秒
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_8S</samp>    8 seconds
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SLEEP_8S</samp>    8 秒
- en: The following simple sketch uses this function to shut down the Arduino for
    8 seconds, then repeats the shutdown again, and then runs at full power for 16
    seconds. This allows you to quickly check power consumption at both full power
    and while operating in power-saving mode with a multimeter.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下简单的草图使用此函数使 Arduino 休眠 8 秒，然后重复再次休眠，然后以满功率运行 16 秒。这让你能够快速检查在满功率和省电模式下的功耗，使用万用表进行测量。
- en: Connect your Arduino Uno to your PC and upload [Listing 15-1](#LiT-15-1). Once
    it’s uploaded, connect your USB power monitor or multimeter as described earlier
    in the chapter to watch the power consumption change.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的Arduino Uno连接到PC，并上传[列表 15-1](#LiT-15-1)。上传完成后，如前面章节所述，连接你的USB电源监视器或万用表，以观察功耗变化。
- en: '[PRE2]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-1: Testing the Power
    Down/Wake Periodic mode</samp>'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 15-1：测试断电/唤醒周期模式</samp>
- en: The sketch includes the library ❶ and then runs the idle function twice with
    all parameters set to <samp class="SANS_TheSansMonoCd_W5Regular_11">OFF</samp>,
    with an eight-second delay ❷. Next, the sketch introduces another delay, in which
    the Arduino runs at full power ❸.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 草图包含了库❶，然后运行空闲函数两次，所有参数设置为<samp class="SANS_TheSansMonoCd_W5Regular_11">OFF</samp>，并有八秒的延迟❷。接下来，草图引入另一个延迟，在此期间，Arduino以全功率运行❸。
- en: If you measure the current of this circuit, the consumption should drop from
    around 42 mA on full power to around 30 mA when in power-down mode, a consumption
    drop of around 12 mA. That’s a 28 percent reduction in power use when your project
    is in power-down mode.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你测量这个电路的电流，功耗应该从全功率下的大约42 mA下降到省电模式下的大约30 mA，功耗下降约12 mA。这意味着，当你的项目处于省电模式时，功耗减少了28%。
- en: I quote the figures for this example as “around 42 mA” and so on because consumption
    will vary within a range of 1 or 2 mA lower or higher than the figures quoted,
    depending on the brand of Arduino or compatible board you are using. It may also
    vary depending on your own test equipment. To keep things simple, I’ve stuck to
    whole numbers and average consumption.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这个例子中引用这些数值为“大约42 mA”等等，因为实际功耗会在引用的数值上下波动1到2 mA，具体取决于你使用的Arduino或兼容板的品牌。它也可能因你使用的测试设备不同而有所变化。为了简化，我使用了整数和平均功耗。
- en: Before putting power saving to use in a practical example, I’ll introduce a
    convenient library for the DS3231 real-time clock IC as you’ll use it in a following
    project.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际示例中使用省电功能之前，我将介绍一个方便的库用于DS3231实时钟IC，后续项目中你将会使用到它。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The DS3231 Real-Time
    Clock Library</samp>
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">DS3231实时钟库</samp>
- en: The DS3231 real-time clock modules provide a convenient and accurate way to
    track time and date information, though using them does require a lot of code.
    In this section, I’ll show you how to write and read time and date data to and
    from the DS3231 in an easier way using a DS3231 library.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: DS3231实时钟模块提供了一种方便且准确的方式来追踪时间和日期信息，尽管使用它们确实需要编写大量代码。在本节中，我将向你展示如何通过使用DS3231库以更简单的方式读写时间和日期数据。
- en: First, open the Arduino IDE, enter the Library Manager, and search for **DS3231
    by Andrew Wickert**.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开Arduino IDE，进入库管理器，搜索**Andrew Wickert的DS3231**库。
- en: Connect the real-time clock module to your Arduino Uno, as shown in [Figure
    15-8](chapter15.xhtml#fig15-8), and then connect your Uno to your PC with the
    USB cable.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 将实时钟模块连接到你的Arduino Uno，如[图 15-8](chapter15.xhtml#fig15-8)所示，然后使用USB线将Uno连接到PC。
- en: '![THE CONNECTION BETWEEN THE ARDUINO UNO AND DS3231 RTC.](../images/fig15-8.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![Arduino Uno与DS3231 RTC之间的连接](../images/fig15-8.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-8: Connections between
    the DS3231 and Arduino Uno</samp>'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 15-8：DS3231与Arduino Uno之间的连接</samp>
- en: Next, enter but don’t upload [Listing 15-2](#LiT-15-2).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，输入但不要上传[列表 15-2](#LiT-15-2)。
- en: '[PRE3]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-2: Testing the DS3231
    library</samp>'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 15-2：测试DS3231库</samp>
- en: The sketch includes and initializes the required libraries ❶ and then declares
    the required global variables ❷. These variables are used for storing RTC data
    and settings. The <samp class="SANS_TheSansMonoCd_W5Regular_11">setTime()</samp>function
    is used to set the time and date to the RTC. The sketch uses <samp class="SANS_TheSansMonoCd_W5Regular_11">false</samp>
    ❸ for 24-hour time, but you can also enter <samp class="SANS_TheSansMonoCd_W5Regular_11">true</samp>
    for 12-hour time. Otherwise, enter all the time and date data in one- or two-digit
    format. The value for <samp class="SANS_TheSansMonoCd_W5Regular_11">setDoW</samp>
    is for the numerical day of the week, with 1 being Sunday and 7 being Saturday.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '该草图包含并初始化了所需的库 ❶，然后声明了所需的全局变量 ❷。这些变量用于存储 RTC 数据和设置。<samp class="SANS_TheSansMonoCd_W5Regular_11">setTime()</samp>
    函数用于设置时间和日期到 RTC。该草图使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">false</samp>
    ❸ 表示 24 小时制，但你也可以输入 <samp class="SANS_TheSansMonoCd_W5Regular_11">true</samp>
    来使用 12 小时制。否则，输入时间和日期数据时使用一位或两位数字格式。<samp class="SANS_TheSansMonoCd_W5Regular_11">setDoW</samp>
    的值代表星期几的数字，1 表示星期日，7 表示星期六。  '
- en: To retrieve the data from the RTC and display it on the Serial Monitor, the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">showTime()</samp>function stores
    the data in turn from the RTC into variables ❹ and then starts displaying it on
    the Serial Monitor ❺, starting with a <samp class="SANS_TheSansMonoCd_W5Regular_11">switch…case</samp>
    function to show the day of the week.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '为了从 RTC 获取数据并在串口监视器上显示，<samp class="SANS_TheSansMonoCd_W5Regular_11">showTime()</samp>
    函数依次将 RTC 中的数据存入变量 ❹，然后开始在串口监视器上显示这些数据 ❺，首先使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">switch…case</samp>
    函数来显示星期几。  '
- en: Set the time by uncommenting the function at ❻ and updating the data in the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">setTime()</samp> function to match
    the current time and date when you upload the sketch. After uploading the sketch,
    comment this line out again so the time isn’t reset on every reset of the Arduino.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '通过取消注释 ❻ 处的函数并更新 <samp class="SANS_TheSansMonoCd_W5Regular_11">setTime()</samp>
    函数中的数据，以匹配你上传草图时的当前时间和日期来设置时间。上传草图后，再次注释掉这一行，以免每次重置 Arduino 时都重置时间。  '
- en: Finally, … normal clock display. The Serial Monitor will output your current
    time and date.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '最后，… 常规的时钟显示。串口监视器将输出你当前的时间和日期。  '
- en: You’ll use the DS3231 library in the upcoming project.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '在接下来的项目中，你将使用 DS3231 库。  '
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #44: Creating a Low-Power
    Periodic Data Logger</samp>'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #44：创建低功耗周期性数据记录器</samp>'
- en: In this project, you’ll create a data logger that records temperature, humidity,
    and the time and date to an SD card around once per minute. Between these times
    the Arduino will go into idle mode to conserve power. This type of project is
    useful for long-term data logging—for example, charting the weather data over
    a season or several months.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '在这个项目中，你将创建一个数据记录器，它每分钟左右将温度、湿度以及时间和日期记录到 SD 卡中。在这些时间段之间，Arduino 将进入空闲模式以节省电源。这种类型的项目适用于长期数据记录，例如，记录一季或几个月的天气数据。  '
- en: 'For this project, you’ll need the following hardware:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '对于此项目，你将需要以下硬件：  '
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '一块 Arduino Uno 或兼容的开发板和 USB 数据线  '
- en: A solderless breadboard
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '一块免焊面包板  '
- en: Various jumper wires
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '各种跳线  '
- en: A BMP180 temperature and air pressure sensor board
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '一块 BMP180 温度和气压传感器模块  '
- en: A DS3231 real-time clock module
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '一块 DS3231 实时时钟模块  '
- en: An SD or microSD card module and matching memory card
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '一块 SD 或 microSD 卡模块和匹配的内存卡  '
- en: Assemble the circuit as shown in [Figure 15-9](chapter15.xhtml#fig15-9).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '按照 [图 15-9](chapter15.xhtml#fig15-9) 中的示意图组装电路。  '
- en: '![THE CIRCUIT SCHEMATIC FOR PROJECT #44](../images/fig15-9.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #44 的电路原理图](../images/fig15-9.png)  '
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-9: The circuit schematic
    for Project #44</samp>'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 15-9：项目 #44 的电路原理图</samp>  '
- en: 'Next, enter and upload the following sketch:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，输入并上传以下草图：  '
- en: '[PRE4]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Once again, the sketch includes and initializes the required libraries ❶ and
    declares the required global variables that are used to store RTC data and settings
    ❷. It initializes and tests the SD memory card reader ❸ and then uses the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">setTime()</samp>function to set the time
    and date to the RTC. As in [Listing 15-2](#LiT-15-2), the sketch uses <samp class="SANS_TheSansMonoCd_W5Regular_11">false</samp>
    for 24-hour time, but you can change this to <samp class="SANS_TheSansMonoCd_W5Regular_11">true</samp>
    for 12-hour time. Be sure to replace the values in the <samp class="SANS_TheSansMonoCd_W5Regular_11">RTCmodule</samp>
    functions to match the current time in your location.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，草图包含并初始化了所需的库 ❶，并声明了用于存储RTC数据和设置的全局变量 ❷。它初始化并测试了SD存储卡读取器 ❸，然后使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">setTime()</samp>
    函数将时间和日期设置到RTC中。如同 [Listing 15-2](#LiT-15-2) 所示，草图使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">false</samp>
    来表示24小时制，但你可以将其更改为 <samp class="SANS_TheSansMonoCd_W5Regular_11">true</samp> 来使用12小时制。务必在
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RTCmodule</samp> 函数中替换为当前你所在位置的时间。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">logData()</samp>function writes
    the date, time, temperature, and pressure to the SD memory card when called. Set
    the time and date in the DS3231 by uncommenting the function at ❹ so that the
    changes you’ve made to the <samp class="SANS_TheSansMonoCd_W5Regular_11">setTime()</samp>
    function take effect. After uploading the sketch, comment this line again so the
    time isn’t reset every time the Arduino resets.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">logData()</samp> 函数在调用时会将日期、时间、温度和压力写入SD存储卡。通过取消注释❹处的函数来设置DS3231中的时间和日期，以便你在
    <samp class="SANS_TheSansMonoCd_W5Regular_11">setTime()</samp> 函数中所做的更改生效。上传草图后，再次注释这一行，以避免每次Arduino重启时时间被重置。
- en: Finally, a <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> loop runs
    the 8-second power-down 8 times for a total of 64 seconds; then the Arduino wakes
    up and logs the data ❺. At this point, the sketch loops again, putting the Arduino
    back into a powered-down state.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，<samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> 循环将执行8秒关机操作8次，总计64秒；然后Arduino会醒来并记录数据
    ❺。此时，草图会再次循环，将Arduino置于关机状态。
- en: '[Figure 15-10](chapter15.xhtml#fig15-10) shows an example of the output text
    file. Your date and time will of course be different.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[图15-10](chapter15.xhtml#fig15-10)展示了输出文本文件的示例。你的日期和时间当然会有所不同。'
- en: '![A SCREENSHOT OF THE OUTPUT FROM PROJECT #44](../images/fig15-10.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![项目#44输出的截图](../images/fig15-10.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-10: Example output
    from Project #44</samp>'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图15-10：项目#44的示例输出</samp>
- en: If you measure the current of this circuit, the consumption should drop from
    around 51 mA on full power to around 38 mA when the project is powered down. There
    is a brief jump in consumption when the Arduino is writing data to the SD card.
    Setting this aside, the power used by the entire project drops by about 10 mA.
    (The Arduino’s own power consumption drops without affecting the devices to which
    it is connected.)
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你测量这个电路的电流，功率全开时消耗应为大约51 mA，而当项目关闭电源时，消耗大约降至38 mA。在Arduino写入数据到SD卡时，消耗会出现短暂的跳跃。撇开这一点不谈，整个项目的功率消耗大约减少了10
    mA。（Arduino本身的功率消耗减少，但不会影响其连接的设备。）
- en: This may not seem like significant savings, but consider that this amounts to
    a 20 percent reduction in power consumption when in power-down mode, which takes
    between 97 to 98 percent of operation time. Moreover, when you’re running from
    a battery, any saving is a good saving.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来节省不多，但考虑到在关机模式下，这相当于节省了20%的功耗，而关机模式占据了97%到98%的工作时间。此外，当你从电池供电时，任何节省都是值得的。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Wake on Interrupt Mode</samp>
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">中断唤醒模式</samp>
- en: 'There’s a second software-based way to save power on your Arduino: Wake on
    Interrupt mode. Using this mode puts your Arduino to sleep until an interrupt
    is triggered, causing the Arduino to wake up and continue to run the sketch. After
    it completes the required tasks, it goes back to sleep, awaiting another interrupt.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种基于软件的节能方式：中断唤醒模式。使用这种模式会让Arduino进入睡眠状态，直到触发中断，导致Arduino醒来并继续运行草图。完成必要任务后，它会再次进入睡眠状态，等待另一个中断。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-138
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*For more information about interrupts, review Chapter 7 of* Arduino Workshop*,
    2nd edition.*'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '*有关中断的更多信息，请查看《Arduino工作坊》第二版的第7章。*'
- en: 'To use this mode, include the library in your sketch with the following line
    of code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此模式，在草图中包含以下代码行来引用库：
- en: '[PRE5]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As each Arduino interrupt calls a function, you need to define a function to
    allow the sketch to compile. However, as you don’t need to call any specific code
    when an interrupt is triggered, leave the function empty:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个Arduino中断都会调用一个函数，因此你需要定义一个函数以使草图能够编译。然而，由于在中断触发时不需要调用任何特定代码，可以将该函数留空：
- en: '[PRE6]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You must also declare the hardware interrupt pin as an input in <samp class="SANS_TheSansMonoCd_W5Regular_11">void
    setup()</samp>, using pins D2 or D3.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你还必须在<samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp>中将硬件中断引脚声明为输入，使用D2或D3引脚。
- en: 'In the main section of the sketch, attach the interrupt using the following:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在草图的主部分，使用以下代码附加中断：
- en: '[PRE7]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Replace <samp class="SANS_TheSansMonoCd_W5Regular_11">pinNumber</samp> with
    0 to attach to digital pin D2 or with 1 to attach to digital pin D3.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 将<samp class="SANS_TheSansMonoCd_W5Regular_11">pinNumber</samp>替换为0以连接到数字引脚D2，或者替换为1以连接到数字引脚D3。
- en: 'In the <samp class="SANS_TheSansMonoCd_W5Regular_11">attachInterrupt()</samp>
    function, substitute <samp class="SANS_TheSansMonoCd_W5Regular_11">mode</samp>
    with one of the following four interrupt types:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在<samp class="SANS_TheSansMonoCd_W5Regular_11">attachInterrupt()</samp>函数中，将<samp
    class="SANS_TheSansMonoCd_W5Regular_11">mode</samp>替换为以下四种中断类型之一：
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">LOW</samp>    No current is applied
    to the interrupt pin.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">LOW</samp>    没有电流施加到中断引脚。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">CHANGE</samp>    The current changes,
    either between on and off or between off and on.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">CHANGE</samp>    电流发生变化，无论是从打开到关闭，还是从关闭到打开。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">RISING</samp>    The current changes
    from off to on at 5 V.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">RISING</samp>    电流从关闭变为打开，电压为5V。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">FALLING</samp>    The current changes
    from on at 5 V to off.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">FALLING</samp>    电流从5V的打开状态变为关闭状态。
- en: 'The Arduino interrupt functions need a function to call once the interrupt
    has been triggered, but running code directly from a function attached to an interrupt
    will cause a recursive loop. To avoid this, we use a blank (also known as a *stub*)
    custom function—that is, a function without any code. For example, you could use
    this:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino中断函数需要一个在中断触发后调用的函数，但直接从附加到中断的函数中运行代码会导致递归循环。为了避免这种情况，我们使用一个空白的（也叫做*占位*）自定义函数——即一个没有任何代码的函数。例如，你可以使用以下代码：
- en: '[PRE8]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, when you want to put the Arduino to sleep, use the following line:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，当你想让Arduino进入睡眠状态时，使用以下代码行：
- en: '[PRE9]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After the interrupt triggers the Arduino to wake up, detach the interrupt from
    the digital pin with the following function:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在中断触发Arduino唤醒后，使用以下函数将中断从数字引脚分离：
- en: '[PRE10]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Next, run the code or call the required function to operate. After this operation
    is complete, the Arduino will go back to sleep.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行代码或调用所需的函数进行操作。此操作完成后，Arduino将返回睡眠状态。
- en: I’ll demonstrate this in the following simple example in which the signal at
    D2 changes from HIGH to LOW, the Arduino’s onboard LED blinks once, and then the
    Arduino goes back to sleep. Connect your Arduino Uno to your PC, run a jumper
    wire from the 5V pin to the D2 pin, and upload [Listing 15-3](#LiT-15-3). Connect
    your USB power monitor or multimeter to watch the power consumption change.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在以下简单示例中演示这一点，其中D2引脚的信号从HIGH变为LOW，Arduino的板载LED闪烁一次，然后Arduino返回睡眠状态。将你的Arduino
    Uno连接到PC，从5V引脚跳线连接到D2引脚，并上传[清单15-3](#LiT-15-3)。连接你的USB功率监视器或万用表观察功耗变化。
- en: '[PRE11]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 15-3: Waking up on
    interrupt mode</samp>'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 15-3：在中断模式下唤醒</samp>
- en: The sketch includes the low-power library ❶, followed by a blank function, as
    required by the interrupt functions ❷. It then sets the digital pin used for interrupts
    as an input ❸ and configures the Arduino’s built-in LED ❹.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 草图包含了低功耗库❶，接着是一个空的函数，正如中断函数❷所要求的。然后，它将用于中断的数字引脚设置为输入❸，并配置了Arduino的内建LED❹。
- en: The sketch also configures the interrupt type ❺ on to pin D2 with the name of
    the blank interrupt function and the type of event to call the interrupt. In this
    case, the event type is <samp class="SANS_TheSansMonoCd_W5Regular_11">FALLING</samp>,
    which means a change of signal from 5 V to 0 V at D2.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 程序还将中断类型❺配置到D2引脚，并定义空白中断函数和触发中断的事件类型。在这种情况下，事件类型为<samp class="SANS_TheSansMonoCd_W5Regular_11">FALLING</samp>，意味着D2引脚的信号从5V变化为0V。
- en: Once the interrupt is configured, the sketch puts the Arduino to sleep ❻. Nothing
    else happens until the interrupt is triggered and the Arduino goes into full-power
    mode. At this point, the sketch disables the interrupt so that it won’t be called
    again while the rest of the sketch is operating ❼.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦中断被配置，程序就会让Arduino进入休眠状态❻。在中断被触发之前，什么也不会发生，直到Arduino进入全功率模式。这时，程序会禁用中断，以避免在程序其余部分运行时再次触发中断❼。
- en: At this point, the sketch turns the onboard LED on and off to demonstrate that
    the Arduino is operating normally ❽, but you could substitute another function
    here, if you like. Once the code has been executed, <samp class="SANS_TheSansMonoCd_W5Regular_11">void
    loop()</samp> returns to the start, reactivating interrupts ❺ and putting the
    Arduino back to sleep ❻.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在此时，程序会打开和关闭板载LED，演示Arduino正常运行❽，但如果你愿意，也可以在这里替换为其他功能。一旦代码执行完毕，<samp class="SANS_TheSansMonoCd_W5Regular_11">void
    loop()</samp>会返回到起始位置，重新激活中断❺，并将Arduino重新置于休眠状态❻。
- en: You can test this project by removing the jumper wire from the 5V pin to D2,
    which triggers the interrupt and brings the Arduino back to full-power mode. Then
    restore the jumper wire, and after the LED is activated and turned off, the Arduino
    should go back to sleep. In this example, power consumption drops from around
    42 mA when the Arduino is awake to 28 mA when in sleep mode, a reduction of around
    59 percent.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将跳线从5V引脚移除到D2来测试这个项目，这将触发中断并将Arduino恢复到全功率模式。然后恢复跳线，LED激活并关闭后，Arduino应该会重新进入休眠模式。在这个例子中，功耗从Arduino唤醒时约42
    mA降到休眠模式时的28 mA，减少了大约59%。
- en: In the next project, you’ll use this technique for a more serious application
    by logging noisy events detected by a sound sensor.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个项目中，你将使用这种技术进行更严肃的应用，通过记录由声音传感器检测到的噪声事件。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Inexpensive Sound Sensors</samp>
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">廉价的声音传感器</samp>
- en: When building a project that must detect when a loud noise occurs, you can use
    adjustable sound level sensor, such as PMD Way part 596692, as shown in [Figure
    15-11](chapter15.xhtml#fig15-11).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 当你构建一个必须检测响声的项目时，可以使用可调声音级传感器，例如PMD Way部件596692，如[图15-11](chapter15.xhtml#fig15-11)所示。
- en: '![A PHOTO OF AN ADJUSTABLE SOUND SENSOR MODULE](../images/fig15-11.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![可调声音传感器模块的照片](../images/fig15-11.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-11: An adjustable
    sound level sensor</samp>'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图15-11：一个可调声音传感器</samp>
- en: 'These sensors, which can be found at most retailers, have two types of output:
    analog and digital. In the following project, you’ll use this sensor in digital
    mode. After you connect 5V and GND to the sensor’s + and − (or G) pins, respectively,
    a 5 V signal will be sent to the digital output (DO) pin when the ambient sound
    reaches a certain level. An LED turns on when the sound reaches the threshold
    level, which you can adjust using the trimpot on the sensor.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这些传感器可以在大多数零售商处找到，具有两种输出类型：模拟和数字。在下面的项目中，你将使用该传感器的数字模式。将5V和GND分别连接到传感器的+和−（或G）引脚时，当环境声音达到某一水平时，数字输出（DO）引脚会发送5V信号。当声音达到阈值时，LED会亮起，你可以使用传感器上的可调电位器来调整此阈值。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #45: Logging Interrupt Triggers</samp>'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_21">项目#45：记录中断触发</samp>
- en: The goal of this project is to log the date and time of a sound event, such
    as a noisy neighbor or strong vibration in the surrounding environment. It uses
    a sound sensor module to trigger an interrupt, bringing the Arduino out of low-power
    mode, logging the date and time to an SD memory card, and then putting the Arduino
    to sleep until the next event. If you’re not interested in logging sound events,
    you can use any type of sensor or switch that has a digital output.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目的目标是记录声音事件的日期和时间，例如嘈杂的邻居或周围环境中的强烈震动。它使用声音传感器模块触发中断，将Arduino从低功耗模式唤醒，记录日期和时间到SD卡中，然后再次让Arduino休眠，直到下一个事件。如果你不想记录声音事件，你可以使用任何具有数字输出的传感器或开关。
- en: 'For this project, you’ll need the following hardware:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，你将需要以下硬件：
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Arduino Uno 或兼容板以及 USB 数据线
- en: A solderless breadboard
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个无焊接面包板
- en: Various jumper wires
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种跳线
- en: A sound sensor module
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个声音传感器模块
- en: A DS3231 real-time clock module
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 DS3231 实时时钟模块
- en: An SD or microSD card module and matching memory card
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 SD 或 microSD 卡模块和匹配的存储卡
- en: Assemble the circuit as shown in [Figure 15-12](chapter15.xhtml#fig15-12).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 按照 [图 15-12](chapter15.xhtml#fig15-12) 中的示意图组装电路。
- en: '![THE SCHEMATIC FOR PROJECT #45](../images/fig15-12.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #45 的原理图](../images/fig15-12.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-12: The circuit schematic
    for Project #45</samp>'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 15-12：项目 #45 的电路原理图</samp>'
- en: 'Next, enter and upload the following sketch:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，输入并上传以下草图：
- en: '[PRE12]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: By now you should understand the initial code in this sketch that sets up the
    low-power library, real-time clock, and SD memory card. The final lines of code
    configure the interrupt to <samp class="SANS_TheSansMonoCd_W5Regular_11">RISING</samp>
    ❶, so when the voltage at the Arduino’s D2 pin rises from 0 V to 5 V (the digital
    output from the sound sensor), the sketch tells the Arduino to power down ❷. Once
    the sensor has been triggered, the sketch cancels low-power mode and disables
    the interrupt ❸ to prevent recursive interrupts. Finally, the sketch logs the
    time and date of the sound event to the SD card ❹, and the sketch repeats by activating
    interrupts ❶ and powering down the Arduino again in preparation for the next round
    ❷.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你应该理解了这个草图中的初始代码，这些代码用于设置低功耗库、实时时钟和 SD 存储卡。代码的最后几行配置了中断为 <samp class="SANS_TheSansMonoCd_W5Regular_11">RISING</samp>
    ❶，因此当 Arduino 的 D2 引脚的电压从 0 V 升高到 5 V（声音传感器的数字输出）时，草图会告诉 Arduino 关闭电源 ❷。一旦传感器被触发，草图就会取消低功耗模式并禁用中断
    ❸，以防止递归中断。最后，草图将声音事件的时间和日期记录到 SD 卡 ❹，然后草图会再次激活中断 ❶ 并关闭 Arduino 的电源，为下一轮做准备 ❷。
- en: The power consumption for this project is around 28 mA when the Arduino is asleep
    and around 60 mA during the brief period in which the project is logging data
    to the SD card. That means this project is saving around 50 percent of power consumption
    when in sleep mode.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目的功耗大约是当 Arduino 处于休眠状态时为 28 mA，而在项目向 SD 卡记录数据的短暂期间，功耗大约为 60 mA。这意味着该项目在休眠模式下节省了约
    50% 的功耗。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Hardware-Based Methods to Reduce Power</samp>
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">基于硬件的方法来减少功耗</samp>
- en: You can also reduce power consumption by making hardware modifications to your
    Arduino. The Arduino development platform was originally designed to be easy to
    use. While the standard Arduino Uno–type circuit serves that purpose well, more
    advanced users can improve power efficiency by removing several components that
    are unnecessary for many projects.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过对 Arduino 进行硬件修改来减少功耗。Arduino 开发平台最初设计时考虑到了易用性。虽然标准的 Arduino Uno 型电路很好地实现了这个目的，但更高级的用户可以通过移除许多对于许多项目来说不必要的组件来提高功效。
- en: 'You can remove the following pieces of an Arduino or compatible circuit if
    they won’t be used:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果以下部分的元件在你的项目中不会被使用，可以将其移除：
- en: Four LEDs (power, D13, TX, and RX)
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四个 LED（电源、D13、TX 和 RX）
- en: Linear voltage regulator circuits for the onboard 5 V and 3.3 V power supplies
    (if you are powering your Arduino with 5 V DC)
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于板载 5 V 和 3.3 V 电源的线性电压调节器电路（如果你用 5 V DC 给 Arduino 供电）
- en: A comparator circuit that decides whether to use USB or DC socket power (if
    you are powering your Arduino with 5 V DC)
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个比较器电路，用于决定是否使用 USB 或 DC 插座电源（如果你用 5 V DC 给 Arduino 供电）
- en: A USB-to-serial interface microcontroller and circuit
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 USB 到串口接口的微控制器和电路
- en: A reset button, if unnecessary
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不需要，可以移除重置按钮
- en: If you’re prepared to make your own Arduino-compatible circuit and provide a
    suitable power supply, then it’s easy to have your project use a lot less energy
    than a standard Arduino Uno. To demonstrate this, I’ll show you how to make two
    versions of a bare minimalist Arduino-compatible circuit, one that operates on
    5 V and the other on 3.3 V. You can build these circuits on a solderless or prototyping
    board and then build projects around them.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你准备制作自己的 Arduino 兼容电路并提供合适的电源，那么让你的项目比标准的 Arduino Uno 消耗更少的能量是很容易的。为了演示这一点，我将向你展示如何制作两种版本的极简主义
    Arduino 兼容电路，一种在 5 V 下工作，另一种在 3.3 V 下工作。你可以在无焊接的面包板或原型板上构建这些电路，然后围绕它们构建项目。
- en: To build these projects, you’ll first need to know how to upload sketches to
    your Arduino and minimalist circuits with the ICSP pins, rather than the USB interface.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建这些项目，你首先需要知道如何使用 ICSP 引脚（而非 USB 接口）将程序上传到 Arduino 和极简电路。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Uploading Sketches with the ICSP Pins</samp>
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">使用 ICSP 引脚上传程序</samp>
- en: Until now, you’ve most likely been uploading your sketches using the USB connection
    on your Arduino or compatible board. However, you can reduce the amount of circuitry
    you’re using—and thereby make your projects more power efficient—by using the
    in-circuit serial programmer (ICSP) connection to the microcontroller instead.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你很可能一直在使用 Arduino 或兼容板上的 USB 连接上传程序。然而，你可以通过使用内电路串行编程器（ICSP）连接到微控制器来减少电路的使用，从而使你的项目更节能。
- en: The ICSP is the six-pin connector on the right side of your Arduino board, shown
    in [Figure 15-13](chapter15.xhtml#fig15-13). When you’re not uploading sketches,
    you can also use it as another connection to the SPI data bus.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: ICSP 是你 Arduino 板右侧的六针连接器，如[图 15-13](chapter15.xhtml#fig15-13)所示。在不上传程序时，你还可以将其作为连接
    SPI 数据总线的另一种方式。
- en: '![A PHOTO OF THE ARDUINO UNO ICSP HEADER PINS](../images/fig15-13.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![Arduino Uno ICSP 接头引脚的照片](../images/fig15-13.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-13: ICSP header pins
    on the Arduino Uno</samp>'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 15-13: Arduino Uno 上的 ICSP
    接头引脚</samp>'
- en: These six pins are arranged in a set configuration, as shown in [Figure 15-14](chapter15.xhtml#fig15-14).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这六个引脚按固定的配置排列，如[图 15-14](chapter15.xhtml#fig15-14)所示。
- en: '![THE SCHEMATIC CONNECTION FOR ICSP HEADER PINS](../images/fig15-14.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![ICSP 接头引脚的电路连接图](../images/fig15-14.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-14: ICSP header pins
    layout</samp>'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 15-14: ICSP 接头引脚布局</samp>'
- en: Pin 1 is usually marked on the PCB with a number 1 or a small dot close to the
    top-left pin, as you can see in [Figure 15-13](chapter15.xhtml#fig15-13). To upload
    sketches to your circuit, you’ll need an external programmer that connects to
    these pins, called a USBasp device. These open source devices were created by
    Thomas Fischl and require USB drivers only when used with a Windows-based PC.
    In addition to allowing you to reduce power usage, USBasps also allow you to upload
    sketches to your Arduino Uno or compatible board if its USB interface has been
    damaged or destroyed.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 引脚 1 通常在 PCB 上标记为数字 1 或靠近左上角引脚的小点，正如你在[图 15-13](chapter15.xhtml#fig15-13)中看到的那样。要将程序上传到电路中，你需要一个外部编程器，它连接到这些引脚，称为
    USBasp 设备。这些开源设备由 Thomas Fischl 创建，仅在与 Windows 系统的 PC 一起使用时才需要 USB 驱动程序。除了帮助你降低功耗外，USBasp
    还允许你在 Arduino Uno 或兼容板的 USB 接口损坏或被破坏的情况下上传程序。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-209
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*USBasps also come in handy if you’re interested in programming AVR microcontrollers
    without the Arduino environment, as described in my book* AVR Workshop *(No Starch
    Press, 2022).*'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你有兴趣在没有 Arduino 环境的情况下编程 AVR 微控制器，USBasp 也很有用，正如我在我的书《AVR 工作坊》(No Starch
    Press, 2022)中所描述的那样。*'
- en: USBasps vary cosmetically, but all have the same function. [Figure 15-15](chapter15.xhtml#fig15-15)
    shows two examples. The programmer at the top of the figure is a generic unit
    from the supplier PMD Way listed in the book parts list, and the lower programmer
    is from Freetronics in Australia.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: USBasp 在外观上有所不同，但功能相同。[图 15-15](chapter15.xhtml#fig15-15)展示了两个例子。图中上方的编程器是来自供应商
    PMD Way 的通用设备，位于书中的配件清单上，而下方的编程器则来自澳大利亚的 Freetronics。
- en: '![A PHOTO OF EXAMPLE USBASP PROGRAMMERS](../images/fig15-15.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![USBasp 编程器示例照片](../images/fig15-15.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-15: Example USBasp
    programmers</samp>'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 15-15: USBasp 编程器示例</samp>'
- en: When shopping for your USBasp programmer, be sure you buy one that comes with
    a 6-pin (rather than 10-pin) ribbon cable. Windows users should consult the supplier
    for information on how to install the programmer. Linux and Mac users can simply
    insert into a USB socket and the USBasp should be ready for use in a few moments.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在购买 USBasp 编程器时，确保购买带有 6 针（而非 10 针）排线的型号。Windows 用户应咨询供应商，了解如何安装编程器。Linux 和
    Mac 用户只需将其插入 USB 插口，USBasp 很快就能准备好使用。
- en: Quickly test your USBasp to ensure it works before moving on to the minimalist
    circuits that you’ll build in the next section. Start by connecting it to your
    Arduino Uno or compatible board, as shown in [Figure 15-16](chapter15.xhtml#fig15-16).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 快速测试你的 USBasp，确保它工作正常，然后再继续构建下一节中你将搭建的简约电路。首先将它连接到你的 Arduino Uno 或兼容板，如[图 15-16](chapter15.xhtml#fig15-16)所示。
- en: '![A PHOTO OF THE USBASP PROGRAMMER CONNECTED TO THE ARDUINO UNO](../images/fig15-16.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![USBasp 编程器连接到 Arduino Uno 的照片](../images/fig15-16.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-16: A USBasp programmer
    connected to an Arduino Uno</samp>'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 15-16：USBasp 编程器连接到 Arduino
    Uno</samp>
- en: The USBasp provides power to the Arduino, so you don’t need to connect any other
    power source. Next, connect the USBasp to your PCB via the included USB cable.
    Open the Blink sketch in the Arduino IDE and then select **Tools** ![](../images/arr.png)
    **Programmer** ![](../images/arr.png) **USBasp**.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: USBasp 为 Arduino 提供电源，因此你不需要连接其他电源。接下来，通过附带的 USB 数据线将 USBasp 连接到你的 PCB。打开 Arduino
    IDE 中的 Blink 示例程序，然后选择 **工具** ![](../images/arr.png) **编程器** ![](../images/arr.png)
    **USBasp**。
- en: Finally, to upload the sketch, select **Sketch** ![](../images/arr.png) **Upload
    Using Programmer**.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要上传程序，选择 **程序** ![](../images/arr.png) **通过编程器上传**。
- en: The sketch should finish uploading to the Arduino, and the onboard LED should
    blink on and off, confirming that your USBasp is working correctly. If so, you’re
    ready to build a minimalist low-power 5 V Arduino circuit.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 代码应该上传完成，板载 LED 应该按预期闪烁，确认你的 USBasp 工作正常。如果是这样，你就准备好构建一个简约的低功耗 5 V Arduino 电路了。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #46: Building a Minimalist
    5 V Arduino Circuit</samp>'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #46：构建一个简约的 5 V Arduino 电路</samp>'
- en: In this project, you’ll build the most minimalist Arduino-compatible circuit
    possible that can operate from around 5 V DC. You can expand on this template
    to build your own future low-power Arduino-compatible projects.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将构建一个尽可能简约的 Arduino 兼容电路，能够以大约 5 V DC 的电压运行。你可以在此模板的基础上扩展，构建你未来的低功耗
    Arduino 兼容项目。
- en: 'You’ll need the following hardware:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要以下硬件：
- en: A USBasp programmer and matching USB cable
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 USBasp 编程器和匹配的 USB 数据线
- en: A solderless breadboard
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个无焊接面包板
- en: Various jumper wires
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种跳线
- en: An ATmega328P-PU microcontroller
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 ATmega328P-PU 微控制器
- en: One 0.1 µF polyester capacitor (C1)
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 0.1 µF 聚酯电容器（C1）
- en: Two 22 pF ceramic capacitors (C2, C3)
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个 22 pF 陶瓷电容（C2，C3）
- en: One 16 MHz HC49S crystal
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 16 MHz 的 HC49S 晶体
- en: An ICSP breadboard adapter
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 ICSP 面包板适配器
- en: One 560 Ω, 0.25 W, 1 percent resistor
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 560 Ω，0.25 W，1% 的电阻
- en: One LED
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 LED
- en: Assemble the circuit as shown in [Figure 15-17](chapter15.xhtml#fig15-17). Try
    to keep the crystal, C2, and C3 as close as possible to the microcontroller.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图 15-17](chapter15.xhtml#fig15-17)所示的电路进行组装。尽量将晶体、C2 和 C3 放得尽可能靠近微控制器。
- en: '![THE SCHEMATIC FOR PROJECT #46](../images/fig15-17.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #46 的原理图](../images/fig15-17.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-17: The schematic
    for Project #46</samp>'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 15-17：项目 #46 的原理图</samp>'
- en: 'Now upload the following sketch:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 现在上传以下代码：
- en: '[PRE13]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The LED connected to the microcontroller’s pin 13 should blink as expected,
    on and off every second. You now have a working example of a minimalist Arduino
    circuit, which you can use for experimenting; if you want to permanently include
    it in your projects, you can solder it to the stripboard or on your own customized
    PCB. The resistor and LED are just for demonstration purposes, so of course you
    can remove them if not required for future projects.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到微控制器第 13 引脚的 LED 应该按预期每秒闪烁一次，开与关交替。你现在已经有了一个工作正常的简约 Arduino 电路示例，可以用于实验；如果你想将其永久纳入项目中，可以将其焊接到条形板或自定义的
    PCB 上。电阻和 LED 仅用于演示目的，因此如果未来的项目中不需要它们，当然可以将其去除。
- en: The goal of this circuit is to reduce power consumption. After removing the
    LED and resistor, I measured a current draw of around 22 mA—much better than the
    standard Uno board, which usually draws around 44 mA.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这个电路的目的是减少功耗。在去除 LED 和电阻后，我测得电流大约为 22 mA，比标准的 Uno 板要好得多，后者通常需要大约 44 mA。
- en: This is a great start, but it’s possible to lower power consumption even further
    using the software-based methods you learned earlier in the chapter. You’ll need
    a multimeter capable of measuring current down to microamps to measure the consumption
    levels when the project is running. When I pair this circuit with the Power Down/Wake
    Periodic mode sketch in [Listing 15-1](#LiT-15-1), the current measures around
    3 μA (microamps, each equal to 1,000 milliamps) when the Arduino is powered down.
    Trying out [Listing 15-3](#LiT-15-3) with this circuit also returned around 3
    μA. Battery-powered projects that combine hardware- and software-based methods
    of saving power can last for an incredibly long time.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的开始，但你可以通过前面章节中学到的基于软件的方法进一步降低功耗。你需要一台能够测量微安级电流的万用表来测量项目运行时的功耗。当我将这个电路与[Listing
    15-1](#LiT-15-1)中的Power Down/Wake Periodic模式草图配对使用时，当Arduino关闭电源时，电流大约为3 μA（微安，每个微安等于1,000毫安）。在使用这个电路试验[Listing
    15-3](#LiT-15-3)时，也返回了大约3 μA的测量值。结合硬件和软件方法的电池供电项目可以持续非常长的时间。
- en: For future projects that use this type of minimalist circuit, you’ll need to
    know which pin on the microcontroller relates to which pin in the Arduino sketches,
    since the pin numbers on an Arduino board don’t match the pins on the microcontroller.
    All the analog, digital, and other pins available on the normal Arduino board
    are also available in the breadboard version; you simply need to connect directly
    to the microcontroller.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 对于将来使用这种简约电路的项目，你需要知道微控制器的哪个引脚与Arduino草图中的哪个引脚相关联，因为Arduino板上的引脚编号与微控制器上的引脚编号并不匹配。正常的Arduino板上的所有模拟、数字及其他引脚在面包板版本中也可用；你只需直接连接到微控制器。
- en: The R2 and LED2 are on digital pin 13 in your breadboard Arduino. [Table 15-2](chapter15.xhtml#tab15-2)
    lists the Arduino pins on the left and the matching ATmega328P-PU pins on the
    right.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: R2 和 LED2 在你的面包板Arduino的数字引脚13上。[表 15-2](chapter15.xhtml#tab15-2)列出了左侧为Arduino引脚，右侧为匹配的ATmega328P-PU引脚。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 15-2:</samp> <samp class="SANS_Futura_Std_Book_11">Pins
    for ATmega328P-PU</samp>
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 15-2：</samp> <samp class="SANS_Futura_Std_Book_11">ATmega328P-PU
    引脚</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Arduino pin name</samp> | <samp
    class="SANS_Futura_Std_Heavy_B_11">ATmega328P-PU pin</samp> |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">Arduino 引脚名称</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">ATmega328P-PU
    引脚</samp> |'
- en: '| --- | --- |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| <samp class="SANS_Futura_Std_Book_11">RST</samp> | <samp class="SANS_Futura_Std_Book_11">1</samp>
    |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">RST</samp> | <samp class="SANS_Futura_Std_Book_11">1</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">RX/D0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">RX/D0</samp> | <samp class="SANS_Futura_Std_Book_11">2</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">TX/D1</samp> | <samp class="SANS_Futura_Std_Book_11">3</samp>
    |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">TX/D1</samp> | <samp class="SANS_Futura_Std_Book_11">3</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">D2</samp> | <samp class="SANS_Futura_Std_Book_11">4</samp>
    |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">D2</samp> | <samp class="SANS_Futura_Std_Book_11">4</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">D3</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">D3</samp> | <samp class="SANS_Futura_Std_Book_11">5</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">D4</samp> | <samp class="SANS_Futura_Std_Book_11">6</samp>
    |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">D4</samp> | <samp class="SANS_Futura_Std_Book_11">6</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">(5 V only)</samp> | <samp class="SANS_Futura_Std_Book_11">7</samp>
    |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">(仅5V)</samp> | <samp class="SANS_Futura_Std_Book_11">7</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">GND</samp> | <samp class="SANS_Futura_Std_Book_11">8</samp>
    |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">GND</samp> | <samp class="SANS_Futura_Std_Book_11">8</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">D5</samp> | <samp class="SANS_Futura_Std_Book_11">11</samp>
    |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">D5</samp> | <samp class="SANS_Futura_Std_Book_11">11</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">D6</samp> | <samp class="SANS_Futura_Std_Book_11">12</samp>
    |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">D6</samp> | <samp class="SANS_Futura_Std_Book_11">12</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">D7</samp> | <samp class="SANS_Futura_Std_Book_11">13</samp>
    |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">D7</samp> | <samp class="SANS_Futura_Std_Book_11">13</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">D8</samp> | <samp class="SANS_Futura_Std_Book_11">14</samp>
    |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">D8</samp> | <samp class="SANS_Futura_Std_Book_11">14</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">D9</samp> | <samp class="SANS_Futura_Std_Book_11">15</samp>
    |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">D9</samp> | <samp class="SANS_Futura_Std_Book_11">15</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">D10</samp> | <samp class="SANS_Futura_Std_Book_11">16</samp>
    |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">D10</samp> | <samp class="SANS_Futura_Std_Book_11">16</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">D11</samp> | <samp class="SANS_Futura_Std_Book_11">17</samp>
    |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">D11</samp> | <samp class="SANS_Futura_Std_Book_11">17</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">D12</samp> | <samp class="SANS_Futura_Std_Book_11">18</samp>
    |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">D12</samp> | <samp class="SANS_Futura_Std_Book_11">18</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">D13</samp> | <samp class="SANS_Futura_Std_Book_11">19</samp>
    |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">D13</samp> | <samp class="SANS_Futura_Std_Book_11">19</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">(5 V only)</samp> | <samp class="SANS_Futura_Std_Book_11">20</samp>
    |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">(仅限5 V)</samp> | <samp class="SANS_Futura_Std_Book_11">20</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">AREF</samp> | <samp class="SANS_Futura_Std_Book_11">21</samp>
    |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">AREF</samp> | <samp class="SANS_Futura_Std_Book_11">21</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">GND</samp> | <samp class="SANS_Futura_Std_Book_11">22</samp>
    |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">GND</samp> | <samp class="SANS_Futura_Std_Book_11">22</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">A0</samp> | <samp class="SANS_Futura_Std_Book_11">23</samp>
    |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">A0</samp> | <samp class="SANS_Futura_Std_Book_11">23</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">A1</samp> | <samp class="SANS_Futura_Std_Book_11">24</samp>
    |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">A1</samp> | <samp class="SANS_Futura_Std_Book_11">24</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">A2</samp> | <samp class="SANS_Futura_Std_Book_11">25</samp>
    |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">A2</samp> | <samp class="SANS_Futura_Std_Book_11">25</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">A3</samp> | <samp class="SANS_Futura_Std_Book_11">26</samp>
    |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">A3</samp> | <samp class="SANS_Futura_Std_Book_11">26</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">A4</samp> | <samp class="SANS_Futura_Std_Book_11">27</samp>
    |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">A4</samp> | <samp class="SANS_Futura_Std_Book_11">27</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">A5</samp> | <samp class="SANS_Futura_Std_Book_11">28</samp>
    |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">A5</samp> | <samp class="SANS_Futura_Std_Book_11">28</samp>
    |'
- en: To avoid confusion, retailers such as Freetronics sell adhesive labels to place
    over the microcontroller, like those shown in [Figure 15-18](chapter15.xhtml#fig15-18)
    (visit the Freetronics home page and search for *labels*).
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 为避免混淆，像 Freetronics 这样的零售商提供可粘贴标签，可以贴在微控制器上，如[图 15-18](chapter15.xhtml#fig15-18)所示（访问
    Freetronics 首页并搜索 *labels*）。
- en: '![A PHOTO OF A MICROCONTROLLER WITH PINOUT LABEL AFFIXED](../images/fig15-18.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![带有引脚标签的微控制器照片](../images/fig15-18.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 15-18: Arduino pin labels,
    recommended for fast prototyping</samp>'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 15-18：Arduino 引脚标签，适用于快速原型制作</samp>
- en: Using the labels is a great way to ensure you don’t mix up the pinouts when
    you’re in a rush.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些标签是确保在匆忙时不会搞错引脚布局的好方法。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">继续前进</samp>
- en: In this chapter, you learned to measure how much power your Arduino uses and
    how you can minimize power consumption using a variety of hardware- and software-based
    methods, allowing you to make battery-powered projects that will last much longer
    than they otherwise would. You’ve also learned to use some new sensor and timing
    modules and the USBasp programmer. You can now create projects that can operate
    from batteries for an extended period of time, such as monitoring weather data
    over a season in a remote location or detecting nearby movements in an area without
    mains AC power.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何测量你的 Arduino 使用多少电量，以及如何使用各种硬件和软件方法来最小化功耗，从而使得电池供电的项目比原本可以持续的时间更长。你还学习了如何使用一些新的传感器和定时模块，以及
    USBasp 编程器。你现在可以创建一些可以长时间从电池中获取电力的项目，例如在远程地区监测季节性天气数据，或者在没有市电的区域检测附近的运动。
- en: In the next chapter, I’ll show you how to interface your car with the Arduino
    using the automotive CAN data bus to monitor and record vehicle engine data and
    more.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我将向你展示如何使用汽车的 CAN 数据总线将你的汽车与 Arduino 连接，以监控和记录车辆引擎数据等信息。
