- en: '**8**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**8**'
- en: '**TRANSPORT LAYER PROTOCOLS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**传输层协议**'
- en: '![image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common.jpg)'
- en: In this chapter, we’ll continue to examine individual protocols and how they
    appear at the packet level. Moving up the OSI model, we’ll look at the transport
    layer and the two most common transport protocols, TCP and UDP.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续研究各个协议及其在数据包级别的表现。向上走到 OSI 模型，我们将讨论传输层和两种最常见的传输协议，TCP 和 UDP。
- en: '**Transmission Control Protocol (TCP)**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**传输控制协议（TCP）**'
- en: The ultimate goal of the *Transmission Control Protocol (TCP)* is to provide
    endto-end reliability for the delivery of data. TCP, which is defined in RFC 793,
    handles data sequencing and error recovery, and ultimately ensures that data gets
    where it’s supposed to go. TCP is considered a *connection-oriented protocol*
    because it establishes a formal connection before transmitting data, tracks packet
    delivery, and usually attempts to formally close communication channels when transmission
    is complete. Many commonly used application-layer protocols rely on TCP and IP
    to deliver packets to their final destination.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*传输控制协议（TCP）* 的最终目标是提供端到端的数据传输可靠性。TCP 在 RFC 793 中定义，负责数据排序和错误恢复，并最终确保数据能够到达预定目标。TCP
    被认为是 *面向连接的协议*，因为它在传输数据之前会建立正式的连接，跟踪数据包的传递，通常还会在传输完成后正式关闭通信通道。许多常用的应用层协议依赖于 TCP
    和 IP 来将数据包传递到最终目的地。'
- en: '***TCP Packet Structure***'
  id: totrans-6
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***TCP 数据包结构***'
- en: 'TCP provides a great deal of functionality, as reflected in the complexity
    of its header. As shown in [Figure 8-1](ch08.xhtml#ch08fig1), the following are
    the TCP header fields:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: TCP 提供了大量功能，正如其头部的复杂性所反映的那样。如 [图 8-1](ch08.xhtml#ch08fig1) 所示，以下是 TCP 头部字段：
- en: '**Source Port**   The port used to transmit the packet.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**源端口**   用于传输数据包的端口。'
- en: '**Destination Port**   The port to which the packet will be transmitted.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标端口**   数据包将传输到的端口。'
- en: '**Sequence Number**   The number used to identify a TCP segment. This field
    is used to ensure that parts of a data stream are not missing.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**序列号**   用于标识 TCP 段的编号。该字段用于确保数据流的部分数据不丢失。'
- en: '**Acknowledgment Number**   The sequence number that is to be expected in the
    next packet from the other device taking part in the communication.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**确认号**   在通信的另一方预计会在下一个数据包中发送的序列号。'
- en: '**Flags**   The URG, ACK, PSH, RST, SYN, and FIN flags for identifying the
    type of TCP packet being transmitted.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**标志**   用于标识正在传输的 TCP 数据包类型的 URG、ACK、PSH、RST、SYN 和 FIN 标志。'
- en: '**Window Size**   The size of the TCP receiver buffer in bytes.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**窗口大小**   TCP 接收缓冲区的大小（以字节为单位）。'
- en: '**Checksum**   Used to ensure the contents of the TCP header and data are intact
    upon arrival.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**校验和**   用于确保到达时 TCP 头部和数据的内容完整无误。'
- en: '**Urgent Pointer**   If the URG flag is set, this field is examined for additional
    instructions for where the CPU should begin reading the data within the packet.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**紧急指针**   如果设置了 URG 标志，则检查此字段以获取额外的指令，告诉 CPU 从数据包中的何处开始读取数据。'
- en: '**Options**   Various optional fields that can be specified in a TCP packet.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项**   可以在 TCP 数据包中指定的各种可选字段。'
- en: '![image](../images/f152-01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f152-01.jpg)'
- en: '*Figure 8-1: The TCP header*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-1：TCP 头部*'
- en: '***TCP Ports***'
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***TCP 端口***'
- en: '*tcp_ports.pcapng*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*tcp_ports.pcapng*'
- en: All TCP communication takes place using source and destination *ports*, which
    can be found in every TCP header. A port is like the jack on an old telephone
    switchboard. A switchboard operator would monitor a board of lights and plugs.
    When a light lit up, he would connect with the caller, ask who she wanted to talk
    to, and then connect her to the other party by plugging in a cable. Every call
    needed to have a source port (the caller) and a destination port (the recipient).
    TCP ports work in much the same fashion.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 TCP 通信都使用源端口和目标端口，这可以在每个 TCP 头部中找到。端口就像旧电话交换机上的插孔。交换机操作员会监视一板灯光和插孔。当灯亮起时，他会接通来电者，询问她想联系谁，然后通过插入电缆将她连接到另一方。每个电话都需要有源端口（来电者）和目标端口（接收者）。TCP
    端口的工作方式非常相似。
- en: To transmit data to a particular application on a remote server or device, a
    TCP packet must know the port the remote service is listening on. If you try to
    access an application on a port other than the one configured for use, the communication
    will fail.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将数据传输到远程服务器或设备上的特定应用程序，TCP 数据包必须知道远程服务正在监听的端口。如果尝试访问未配置用于访问的端口上的应用程序，通信将失败。
- en: The source port in this sequence isn’t incredibly important and can be selected
    randomly. The remote server will simply determine the port to communicate with
    from the original packet it’s sent (see [Figure 8-2](ch08.xhtml#ch08fig2)).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个序列中的源端口并不是非常重要，可以随机选择。远程服务器会从发送的原始数据包中确定与之通信的端口（参见[图8-2](ch08.xhtml#ch08fig2)）。
- en: '![image](../images/f153-01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f153-01.jpg)'
- en: '*Figure 8-2: TCP uses ports to transmit data.*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-2：TCP使用端口传输数据。*'
- en: 'There are 65,535 ports available for use when communicating with TCP. We typically
    divide these into two groups:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在与TCP通信时，有65,535个端口可供使用。我们通常将这些端口分为两组：
- en: •     The *system port group* (also known as the standard port or well-known
    port group) is from 1 through 1023 (ignoring 0 because it’s reserved). Well-known,
    established services generally use ports that lie within the system port grouping.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*系统端口组*（也称为标准端口或知名端口组）的范围从1到1023（忽略0，因为它是保留的）。知名的、已建立的服务通常使用位于系统端口组内的端口。'
- en: •     The *ephemeral port group* is from 1024 through 65535 (although some operating
    systems have different definitions for this). Only one service can communicate
    on a port at any given time, so modern operating systems select source ports randomly
    in an effort to make communications unique. These source ports are typically located
    in the ephemeral range.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*临时端口组*的范围从1024到65535（尽管一些操作系统对这一范围有不同的定义）。在任何给定时刻，只有一个服务可以在某个端口上进行通信，因此现代操作系统会随机选择源端口，以便使通信具有唯一性。这些源端口通常位于临时端口范围内。'
- en: Let’s examine a couple of TCP packets and identify the port numbers they are
    using by opening the file *tcp_ports.pcapng*. In this file, we have the HTTP communication
    of a client browsing to two websites. As mentioned previously, HTTP uses TCP for
    communication, making it a great example of standard TCP traffic.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查几个TCP数据包，并通过打开文件*tcp_ports.pcapng*来识别它们使用的端口号。在这个文件中，我们有一个客户端浏览两个网站的HTTP通信。如前所述，HTTP使用TCP进行通信，这使它成为标准TCP流量的一个很好的示例。
- en: In the first packet in this file (see [Figure 8-3](ch08.xhtml#ch08fig3)), the
    first two values represent the packet’s source port and destination port. This
    packet is being sent from 172.16.16.128 to 212.58.226.142\. The source port is
    2826 ➊, an ephemeral port. (Remember that source ports are chosen at random by
    the operating system, although they can increment from that random selection.)
    The destination port is a system port, port 80 ➋, the standard port used for web
    servers using HTTP.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文件中的第一个数据包中（参见[图8-3](ch08.xhtml#ch08fig3)），前两个值表示数据包的源端口和目标端口。该数据包正从172.16.16.128发送到212.58.226.142。源端口是2826
    ➊，一个临时端口。（请记住，源端口是由操作系统随机选择的，尽管它们可以从该随机选择中递增。）目标端口是一个系统端口，端口80 ➋，这是用于使用HTTP的Web服务器的标准端口。
- en: '![image](../images/f154-01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f154-01.jpg)'
- en: '*Figure 8-3: The source and destination ports can be found in the TCP header.*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-3：源端口和目标端口可以在TCP头部找到。*'
- en: Notice that Wireshark labels these ports as slc-systemlog (2826) and http (80).
    Wireshark maintains a list of ports and their most common uses. Although system
    ports are primarily the ones with labeled common uses, many ephemeral ports have
    commonly used services associated with them. The labeling of these ports can be
    confusing, so it’s typically best to disable it by turning off transport name
    resolution. To do this, go to **Edit** ▶ **Preferences** ▶ **Name Resolution**
    and uncheck Enable Transport Name Resolution. If you wish to leave this option
    enabled but want to change how Wireshark identifies a certain port, you can do
    so by modifying the *services* file located in the Wireshark system directory.
    The contents of this file are based on the IANA common ports listing (see “Using
    a Custom hosts File” on [page 86](ch05.xhtml#page_86) for an example of how to
    edit a name resolution file).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Wireshark将这些端口标记为slc-systemlog（2826）和http（80）。Wireshark维护着一份端口及其最常见用途的列表。尽管系统端口是主要具有常见用途标签的端口，但许多临时端口也与常用服务相关联。由于这些端口的标签可能会让人困惑，因此通常最好通过关闭传输名称解析来禁用它。操作方法是：进入**编辑**
    ▶ **首选项** ▶ **名称解析**，然后取消选中启用传输名称解析。如果你希望保留此选项，但想要更改Wireshark如何识别某个端口，可以通过修改位于Wireshark系统目录中的*services*文件来实现。该文件的内容基于IANA的常见端口列表（参见[第86页](ch05.xhtml#page_86)的“使用自定义主机文件”部分，了解如何编辑名称解析文件的示例）。
- en: The second packet is sent back from 212.58.226.142 to 172.16.16.128 (see [Figure
    8-4](ch08.xhtml#ch08fig4)). As with the IP addresses, the source and destination
    ports are now also switched ➊.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个数据包从 212.58.226.142 发送回 172.16.16.128（见[图 8-4](ch08.xhtml#ch08fig4)）。与 IP
    地址一样，源端口和目标端口现在也被切换 ➊。
- en: 'In most cases, TCP-based communication works the same way: a random source
    port is chosen to communicate to a known destination port. Once this initial packet
    is sent, the remote device communicates with the source device using the established
    ports.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，基于 TCP 的通信工作方式相同：选择一个随机的源端口与已知的目标端口进行通信。发送此初始数据包后，远程设备将使用已建立的端口与源设备进行通信。
- en: This sample capture file includes one more communication stream. See if you
    can locate the port numbers it uses for communication.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例捕获文件包含了一个额外的通信流。看看你能否找到它在通信中使用的端口号。
- en: '![image](../images/f155-01.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f155-01.jpg)'
- en: '*Figure 8-4: Switching the source and destination port numbers for reverse
    communication*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-4：切换源端口和目标端口号以实现反向通信*'
- en: '**NOTE**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*As we progress through this book, you’ll learn more about the ports associated
    with common protocols and services. Eventually, you’ll be able to profile services
    and devices by the ports they use. For a comprehensive list of common ports, look
    at the* services *file located in the Wireshark system directory.*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*随着本书的深入，你将了解更多关于常见协议和服务相关的端口。最终，你将能够通过它们使用的端口来对服务和设备进行分析。有关常见端口的完整列表，请查看位于
    Wireshark 系统目录中的* services *文件。*'
- en: '***The TCP Three-Way Handshake***'
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***TCP 三次握手***'
- en: 'All TCP-based communication must begin with a *handshake* between two hosts.
    This handshake process serves several purposes:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所有基于 TCP 的通信都必须从两台主机之间的 *握手* 开始。此握手过程有几个目的：
- en: •     It allows the transmitting host to ensure that the recipient host is up
    and able to communicate.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: •     它允许发送方主机确保接收方主机处于运行状态并能够进行通信。
- en: •     It lets the transmitting host check that the recipient is listening on
    the port the transmitting host is attempting to communicate on.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: •     它让发送方主机检查接收方是否在发送方尝试通信的端口上监听。
- en: '*tcp_handshake.pcapng*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*tcp_handshake.pcapng*'
- en: •     It allows the transmitting host to send its starting sequence number to
    the recipient so that both hosts can keep the stream of packets in proper sequence.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: •     它允许发送方主机将其起始序列号发送给接收方，以便两台主机能够保持数据包流的正确顺序。
- en: The TCP handshake occurs in three steps, as shown in [Figure 8-5](ch08.xhtml#ch08fig5).
    In the first step, the device that wants to communicate (host A) sends a TCP packet
    to its target (host B). This initial packet contains no data other than the lower-layer
    protocol headers. The TCP header in this packet has the SYN flag set and includes
    the initial sequence number and maximum segment size (MSS) that will be used for
    the communication process. Host B responds to this packet by sending a similar
    packet with the SYN and ACK flags set, along with its initial sequence number.
    Finally, host A sends one last packet to host B with only the ACK flag set. Once
    this process is completed, both devices should have all of the information they
    need to begin communicating properly.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: TCP 握手过程分为三个步骤，如[图 8-5](ch08.xhtml#ch08fig5)所示。在第一步，想要进行通信的设备（主机 A）向其目标（主机 B）发送一个
    TCP 数据包。这个初始数据包除了底层协议头部外不包含其他数据。该数据包中的 TCP 头部设置了 SYN 标志，并包括将用于通信过程中的初始序列号和最大报文段大小（MSS）。主机
    B 对此数据包做出响应，发送一个类似的数据包，设置 SYN 和 ACK 标志，并带有其初始序列号。最后，主机 A 向主机 B 发送最后一个数据包，仅设置 ACK
    标志。一旦这个过程完成，两个设备应该就拥有开始正常通信所需的所有信息。
- en: '**NOTE**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*TCP packets are often referred to by the flags they have set. For example,
    rather than refer to a packet as a TCP packet with the SYN flag set, we call that
    packet a SYN packet. As such, the packets used in the TCP handshake process are
    referred to as SYN, SYN/ACK, and ACK.*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*TCP 数据包通常通过其设置的标志来命名。例如，我们不说“设置了 SYN 标志的 TCP 数据包”，而是称其为 SYN 数据包。因此，在 TCP 握手过程中使用的数据包分别称为
    SYN、SYN/ACK 和 ACK。*'
- en: To see this process in action, open *tcp_handshake.pcapng*. Wireshark includes
    a feature that replaces the sequence numbers of TCP packets with relative numbers
    for easier analysis. For our purposes, we’ll disable this feature in order to
    see the actual sequence numbers. To disable this, choose **Edit** ▶ **Preferences**,
    expand the **Protocols** heading, and choose **TCP**. In the window, uncheck the
    box next to **Relative Sequence Numbers** and click **OK**.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看这个过程的实际操作，请打开*tcp_handshake.pcapng*。Wireshark 提供了一个功能，可以将 TCP 数据包的序列号替换为相对序列号，以便更轻松地进行分析。为了我们的目的，我们将禁用此功能，以查看实际的序列号。要禁用此功能，请选择**编辑**
    ▶ **首选项**，展开**协议**部分，然后选择**TCP**。在窗口中，取消勾选**相对序列号**旁边的框，并点击**确定**。
- en: '![image](../images/f156-01.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f156-01.jpg)'
- en: '*Figure 8-5: The TCP three-way handshake*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-5：TCP 三次握手*'
- en: The first packet in this capture represents our initial SYN packet ➋ (see [Figure
    8-6](ch08.xhtml#ch08fig6)). The packet is transmitted from 172.16.16.128 on port
    2826 to 212.58.226.142 on port 80\. We can see here that the sequence number transmitted
    is 3691127924 ➊.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 该捕获中的第一个数据包代表我们的初始 SYN 数据包 ➋（参见[图 8-6](ch08.xhtml#ch08fig6)）。该数据包从 172.16.16.128
    的 2826 端口发送到 212.58.226.142 的 80 端口。我们可以看到这里传输的序列号是 3691127924 ➊。
- en: The second packet in the handshake is the SYN/ACK response ➌ from 212.58.226.142
    (see [Figure 8-7](ch08.xhtml#ch08fig7)). This packet also contains this host’s
    initial sequence number (233779340) ➊ and an acknowledgment number (3691127925)
    ➋. The acknowledgment number shown here is 1 more than the sequence number included
    in the previous packet, because this field is used to specify the next sequence
    number the host expects to receive.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 握手中的第二个数据包是来自 212.58.226.142 的 SYN/ACK 响应 ➌（参见[图 8-7](ch08.xhtml#ch08fig7)）。该数据包还包含此主机的初始序列号（233779340）
    ➊ 和一个确认号（3691127925） ➋。这里显示的确认号比前一个数据包中的序列号大 1，因为该字段用于指定主机预计接收到的下一个序列号。
- en: The final packet is the ACK ➋ packet sent from 172.16.16.128 (see [Figure 8-8](ch08.xhtml#ch08fig8)).
    This packet, as expected, contains the sequence number 3691127925 ➊ as defined
    in the previous packet’s Acknowledgment number field.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的数据包是从 172.16.16.128 发送的 ACK ➋ 数据包（参见[图 8-8](ch08.xhtml#ch08fig8)）。这个数据包，正如预期的那样，包含了序列号
    3691127925 ➊，该序列号如前一个数据包的确认号字段所定义。
- en: A handshake occurs before every TCP communication sequence. When you are sorting
    through a busy capture file in search of the beginning of a communication sequence,
    the sequence SYN-SYN/ACK-ACK is a great marker.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 每次 TCP 通信序列开始前都会发生握手。当你在忙碌的捕获文件中查找通信序列的开始时，序列 SYN-SYN/ACK-ACK 是一个很好的标记。
- en: '![image](../images/f157-01.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f157-01.jpg)'
- en: '*Figure 8-6: The initial SYN packet*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-6：初始 SYN 数据包*'
- en: '![image](../images/f157-02.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f157-02.jpg)'
- en: '*Figure 8-7: The SYN/ACK response*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-7：SYN/ACK 响应*'
- en: '![image](../images/f158-01.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f158-01.jpg)'
- en: '*Figure 8-8: The final ACK*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-8：最终的 ACK*'
- en: '***TCP Teardown***'
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***TCP 拆除***'
- en: '*tcp_teardown.pcapng*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*tcp_teardown.pcapng*'
- en: Most greetings eventually have a good-bye and, in the case of TCP, every handshake
    has a teardown. The *TCP teardown* is used to gracefully end a connection between
    two devices after they have finished communicating. This process involves four
    packets, and it utilizes the FIN flag to signify the end of a connection.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数问候语最终都会有告别，TCP 的情况也是如此，每次握手后都有拆除过程。*TCP 拆除*用于在两个设备完成通信后，优雅地结束它们之间的连接。这个过程涉及四个数据包，并利用
    FIN 标志来表示连接的结束。
- en: In a teardown sequence, host A tells host B that it is finished communicating
    by sending a TCP packet with the FIN and ACK flags set. Host B responds with an
    ACK packet and transmits its own FIN/ACK packet. Host A responds with an ACK packet,
    ending the communication. This process is illustrated in [Figure 8-9](ch08.xhtml#ch08fig9).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在拆除序列中，主机 A 通过发送一个设置了 FIN 和 ACK 标志的 TCP 数据包，告诉主机 B 它已完成通信。主机 B 用一个 ACK 数据包响应，并发送它自己的
    FIN/ACK 数据包。主机 A 以一个 ACK 数据包作出响应，结束通信。这个过程在[图 8-9](ch08.xhtml#ch08fig9)中进行了说明。
- en: '![image](../images/f158-02.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f158-02.jpg)'
- en: '*Figure 8-9: The TCP teardown process*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-9：TCP 拆除过程*'
- en: To view this process in Wireshark, open the file *tcp_teardown.pcapng*. Beginning
    with the first packet in the sequence (see [Figure 8-10](ch08.xhtml#ch08fig10)),
    you can see that the device at 67.228.110.120 initiates teardown by sending a
    packet with the FIN and ACK flags set ➊.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Wireshark 中查看此过程，请打开文件 *tcp_teardown.pcapng*。从序列中的第一个数据包开始（参见[图 8-10](ch08.xhtml#ch08fig10)），你可以看到位于
    67.228.110.120 的设备通过发送一个设置了 FIN 和 ACK 标志的数据包 ➊ 来启动拆除过程。
- en: '![image](../images/f159-01.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f159-01.jpg)'
- en: '*Figure 8-10: The FIN/ACK packet initiates the teardown process.*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-10：FIN/ACK 数据包启动了断开连接的过程。*'
- en: Once this packet is sent, 172.16.16.128 responds with an ACK packet to acknowledge
    receipt of the first packet, and it sends a FIN/ACK packet. The process is complete
    when 67.228.110.120 sends a final ACK. At this point, the communication between
    the two devices ends. If they need to begin communicating again, they will have
    to complete a new TCP handshake.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦发送了这个数据包，172.16.16.128 将通过 ACK 数据包响应，以确认收到第一个数据包，并发送一个 FIN/ACK 数据包。当 67.228.110.120
    发送最终的 ACK 数据包时，过程完成。此时，两个设备之间的通信结束。如果它们需要再次开始通信，则必须完成新的 TCP 握手过程。
- en: '***TCP Resets***'
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***TCP 重置***'
- en: '*tcp_refuseconnection.pcapng*'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*tcp_refuseconnection.pcapng*'
- en: In an ideal world, every connection would end gracefully with a TCP tear-down.
    In reality, connections often end abruptly. For example, a host may be misconfigured,
    or a potential attacker may perform a port scan. In these cases, when a packet
    is sent to a device that is not willing to accept it, a TCP packet with the RST
    flag set may be sent. The RST flag is used to indicate that a connection was closed
    abruptly or to refuse a connection attempt.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在理想的世界中，每个连接都会优雅地以 TCP 断开过程结束。实际上，连接往往会突然终止。例如，主机可能配置错误，或者潜在的攻击者可能进行端口扫描。在这些情况下，当数据包被发送到一个不愿意接收它的设备时，可能会发送一个带有
    RST 标志的 TCP 数据包。RST 标志用于表示连接被突然关闭或拒绝连接请求。
- en: The file *tcp_refuseconnection.pcapng* displays an example of network traffic
    that includes an RST packet. The first packet in this file is from the host at
    192.168.100.138, which is attempting to communicate with 192.168.100.1 on port
    80\. What this host doesn’t know is that 192.168.100.1 isn’t listening on port
    80 because it’s a Cisco router with no web interface configured. There is no service
    configured to accept connections on that port. In response to this attempted communication,
    192.168.100.1 sends a packet to 192.168.100.138 telling it that communication
    won’t be possible over port 80\. [Figure 8-11](ch08.xhtml#ch08fig11) shows the
    abrupt end to this attempted communication in the TCP header of the second packet.
    The RST packet contains nothing other than RST and ACK flags ➊, and no further
    communication follows.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 *tcp_refuseconnection.pcapng* 显示了一个包含 RST 数据包的网络流量示例。该文件中的第一个数据包来自 IP 地址为
    192.168.100.138 的主机，它正在尝试与 192.168.100.1 的端口 80 通信。这个主机并不知道的是，192.168.100.1 并没有在端口
    80 上监听，因为它是一个没有配置 Web 界面的 Cisco 路由器，该端口没有配置任何接受连接的服务。作为对这种尝试通信的响应，192.168.100.1
    向 192.168.100.138 发送了一个数据包，告知它无法通过端口 80 进行通信。[图 8-11](ch08.xhtml#ch08fig11) 显示了这种通信尝试在第二个数据包的
    TCP 头部中的突然结束。该 RST 数据包仅包含 RST 和 ACK 标志 ➊，且没有进一步的通信。
- en: '![image](../images/f160-01.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f160-01.jpg)'
- en: '*Figure 8-11: The RST and ACK flags signify the end of communication.*'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-11：RST 和 ACK 标志表示通信结束。*'
- en: An RST packet ends communication whether it arrives at the beginning of an attempted
    communication sequence, as in this example, or is sent in the middle of the communication
    between hosts.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 无论 RST 数据包是在尝试通信序列的开始时到达（如本例所示），还是在主机之间的通信中间发送，它都能结束通信。
- en: '**User Datagram Protocol (UDP)**'
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**用户数据报协议（UDP）**'
- en: '*udp_dnsrequest.pcapng*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*udp_dnsrequest.pcapng*'
- en: The *User Datagram Protocol (UDP)* is the other layer 4 protocol commonly used
    on modern networks. While TCP is designed for reliable data delivery with built-in
    error checking, UDP aims to provide speedy transmission. For this reason, UDP
    is a best-effort service, commonly referred to as a *connectionless protocol*.
    A connectionless protocol doesn’t formally establish and terminate a connection
    between hosts, unlike TCP with its handshake and teardown processes.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*用户数据报协议（UDP）* 是现代网络中常用的另一种第四层协议。虽然 TCP 设计用于可靠的数据传输并内建错误检测，但 UDP 旨在提供快速传输。因此，UDP
    是一种尽力而为的服务，通常被称为 *无连接协议*。无连接协议不像 TCP 那样正式地建立和终止主机之间的连接，它没有握手和断开连接的过程。'
- en: With a connectionless protocol, which doesn’t provide reliable services, it
    would seem that UDP traffic would be flaky at best. That would be true, except
    that the protocols that rely on UDP typically have their own built-in reliability
    services or use certain features of ICMP to make the connection somewhat more
    reliable. For example, the application-layer protocols DNS and DHCP, which are
    highly dependent on the speed of packet transmission across a network, use UDP
    as their transport layer protocol, but they handle error checking and retransmission
    timers themselves.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用无连接协议的情况下，UDP 流量看起来最多也只是零散的。然而，这种情况并不完全准确，因为依赖 UDP 的协议通常具有内置的可靠性服务，或利用 ICMP
    的某些特性使连接更加可靠。例如，应用层协议 DNS 和 DHCP，高度依赖于数据包在网络中传输的速度，使用 UDP 作为它们的传输层协议，但它们自行处理错误检查和重传定时器。
- en: '***UDP Packet Structure***'
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***UDP 数据包结构***'
- en: '*udp_dnsrequest.pcapng*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*udp_dnsrequest.pcapng*'
- en: 'The UDP header is much smaller and simpler than the TCP header. As shown in
    [Figure 8-12](ch08.xhtml#ch08fig12), the following are the UDP header fields:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: UDP 头部比 TCP 头部小得多，也更简单。如[图8-12](ch08.xhtml#ch08fig12)所示，以下是 UDP 头部字段：
- en: '**Source Port**   The port used to transmit the packet'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**源端口**   用于传输数据包的端口'
- en: '**Destination Port**   The port to which the packet will be transmitted'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标端口**   数据包将被传输到的端口'
- en: '**Packet Length**   The length of the packet in bytes'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据包长度**   数据包的字节长度'
- en: '**Checksum**   Used to ensure that the contents of the UDP header and data
    are intact upon arrival'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**校验和**   用于确保 UDP 头部和数据内容到达时未被损坏'
- en: '![image](../images/f161-01.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f161-01.jpg)'
- en: '*Figure 8-12: The UDP header*'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-12：UDP 头部*'
- en: The file *udp_dnsrequest.pcapng* contains one packet. This packet represents
    a DNS request, which uses UDP. When you expand the packet’s UDP header, you’ll
    see four fields (see [Figure 8-13](ch08.xhtml#ch08fig13)).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 *udp_dnsrequest.pcapng* 包含一个数据包。该数据包表示一个 DNS 请求，使用 UDP 协议。当你展开该数据包的 UDP 头部时，你会看到四个字段（见[图8-13](ch08.xhtml#ch08fig13)）。
- en: '![image](../images/f161-02.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f161-02.jpg)'
- en: '*Figure 8-13: The contents of a UDP packet are very simple.*'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-13：UDP 数据包的内容非常简单。*'
- en: The key point to remember is that UDP does not care about reliable delivery.
    Therefore, any application that uses UDP must take special steps to ensure reliable
    delivery, if it is necessary. This is in contrast to TCP, which utilizes a formal
    connection setup and teardown, and has features in place to validate that packets
    were transmitted successfully.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的关键点是，UDP 不关心可靠交付。因此，任何使用 UDP 的应用程序如果需要可靠交付，必须采取特殊步骤确保这一点。这与 TCP 相反，TCP
    使用正式的连接建立和拆除过程，并具备验证数据包是否成功传输的功能。
- en: This chapter has introduced you to the transport layer protocols TCP and UDP.
    Not unlike network protocols, TCP and UDP are at the core of most of your daily
    communication, and the ability to analyze them effectively is critical to becoming
    an effective packet analyst. In [Chapter 9](ch09.xhtml#ch09), we will look at
    common application-layer protocols.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了传输层协议 TCP 和 UDP。与网络协议类似，TCP 和 UDP 是大多数日常通信的核心，能够有效分析它们对于成为一个高效的数据包分析员至关重要。在[第9章](ch09.xhtml#ch09)，我们将介绍常见的应用层协议。
