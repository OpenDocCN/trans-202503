- en: '**23  Game Boy Via ROM**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**23  Game Boy通过ROM**'
- en: Nintendo’s Game Boy, internally known as the Dot Matrix Game (DMG), did not
    feature the CIC protection chip that we’ll discuss in [Chapter 25](ch25.xhtml#ch25).
    Instead of a lockout chip, the game cartridge is required to contain Nintendo’s
    logo.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 任天堂的Game Boy，内部被称为点阵图形游戏（DMG），并未配备我们将在[第25章](ch25.xhtml#ch25)中讨论的CIC保护芯片。游戏卡带需要包含任天堂的logo，而不是一个锁定芯片。
- en: This is enforced by a first-stage boot ROM that compares its own copy of the
    logo to one in the cartridge. If the logos match, a short animation and sound
    are presented before the ROM disables itself and jumps into the game cartridge.
    In this chapter, we’ll take the last chapter’s theory and use it to rip out the
    ROM contents and make our own disassembly.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这一过程由第一阶段启动ROM强制执行，它将自己的logo与卡带中的logo进行比较。如果两个logo匹配，则会播放一个简短的动画和声音，随后ROM会禁用自己并跳转到游戏卡带。在本章中，我们将以上一章的理论为基础，提取ROM内容并进行反汇编。
- en: Perhaps you’ve already realized that anyone can put any logo into a cartridge,
    and that the logo comparison is not a technical challenge when making an unlicensed
    game. The enforcement mechanism was not technical; rather, it was Nintendo’s legal
    counsel, who would gleefully sue the living hell out of anyone who used their
    trademark without permission. And if you, dear reader, happen to be one of Nintendo’s
    lawyers, please don’t sue me.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 或许你已经意识到，任何人都可以将任何logo放入卡带中，而且在制作非授权游戏时，logo比较并不是一个技术挑战。这个强制执行机制并不是技术性的；相反，是任天堂的法律顾问，他们会愉快地将任何未经许可使用其商标的人告得一塌糊涂。如果你，亲爱的读者，恰好是任天堂的律师，请不要起诉我。
- en: Neviksti (2005) describes an extraction of the ROM. I repeated this in my own
    lab to produce the ROM photograph in [Figure 23.5](ch23.xhtml#ch23fig5). Bits
    are clearly visible in surface photographs of the die, without any delayering
    or staining, making this an excellent first target.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Neviksti（2005年）描述了ROM的提取过程。我在自己的实验室中重复了这个过程，并制作了[图23.5](ch23.xhtml#ch23fig5)中的ROM照片。位元在芯片的表面照片中清晰可见，没有任何去层或染色，使其成为一个极好的首次目标。
- en: As with any chemistry, please be careful not to get yourself hurt. The hassles
    of doing this slowly and safely are worth keeping your eyes and your fingers.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如同任何化学实验，请小心不要伤到自己。慢慢而安全地做这些麻烦事，是值得保住你的眼睛和手指的。
- en: '![Image](../images/f0218-01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0218-01.jpg)'
- en: 'Figure 23.1: End of the Game Boy ROM from Neviksti (2005)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图23.1：来自Neviksti（2005年）的Game Boy ROM末端
- en: '**Decapsulation**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**去封装**'
- en: To get the ROM, we first need to sacrifice a Game Boy. The CPU is labeled `DMG-CPU
    B`, and you can find it on the board that is closer to the back of the device,
    away from the LCD.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取ROM，我们首先需要牺牲一台Game Boy。CPU标记为`DMG-CPU B`，可以在靠近设备背部、远离LCD的板子上找到它。
- en: (ROMs of the Game Boy Color and the Super Game Boy are not clearly visible from
    the surface. See [Chapter E.4](app05.xhtml#app05_4) for a glitching attack that
    keeps the ROM visible while executing code from cartridge memory.)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: （Game Boy Color和Super Game Boy的ROM从表面上并不清晰可见。请参见[第E.4章](app05.xhtml#app05_4)，了解一种在执行来自卡带内存的代码时，使ROM保持可见的故障攻击。）
- en: Decapsulation is performed with the HNO[3] bath method from [Chapter 18](ch18.xhtml#ch18).
    Bits are surface visible, so there’s no need for the delayering procedures that
    require more dangerous chemicals. We pretty much just boil the whole QFP package
    in 65% nitric acid until the packaging falls away, then clean it in acetone and
    isopropyl alcohol for photography.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 去封装是通过使用[第18章](ch18.xhtml#ch18)中的HNO[3]浴法进行的。位元是表面可见的，因此不需要涉及更危险化学品的去层程序。我们基本上只是将整个QFP封装浸泡在65%的硝酸中，直到包装脱落，然后用丙酮和异丙醇清洗，以便拍摄。
- en: '**Photography**'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**摄影**'
- en: The ROM that we’re after is in the CPU, whose surface die photograph is shown
    in [Figure 23.2](ch23.xhtml#ch23fig2). Bits are impossible to see at that magnification,
    so see [Figure 23.3](ch23.xhtml#ch23fig3) for a closeup.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要寻找的ROM在CPU中，其表面芯片的照片展示在[图23.2](ch23.xhtml#ch23fig2)中。在这种放大倍率下，位元是无法看到的，因此请查看[图23.3](ch23.xhtml#ch23fig3)以获得更近的特写。
- en: To locate the ROM, first find the memory bus, which is the horizontal nest of
    wires roughly in the middle of the chip. Starting from the western edge, follow
    the bus toward the east until it dead-ends at the eastern sea of gates. The ROM
    is the thin horizontal structure just north of that bus and just west of the sea
    of gates. At a decent magnification, the bits will pop out at you, looking almost
    like foreign writing at a distance just too far to resolve.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到 ROM，首先需要找到内存总线，它是位于芯片大约中间的水平电缆。 从西边缘开始，沿着总线向东走，直到它在东侧的门海处终止。ROM 是位于总线正北方、门海正西的薄型水平结构。在适当的放大倍数下，位会显现出来，远距离看几乎像是无法辨认的外文。
- en: The dark spots are via wires that connect layers vertically, while the bright
    spots are the absence of a via. This makes the color of the spot imply the value
    of the bit. Not all vias are bits, of course, but in [Figure 23.3](ch23.xhtml#ch23fig3)
    you should see two columns of eight bits and the first six rows. The vias in the
    longer metal lines, those that reach the power rail at the top of the image, are
    not bits and should not be extracted. To be sure that you understand what is and
    is not a bit, please take a moment to produce the ASCII art table from the photograph.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 黑色点是连接各层垂直的通孔，而亮点则是没有通孔的位置。这使得点的颜色暗示了位的值。当然，并非所有的通孔都是位，但在[图 23.3](ch23.xhtml#ch23fig3)中，您应该能看到两列八个位和前六行。位于较长金属线中的通孔，那些到达图像顶部电源轨的通孔，不是位，不应该被提取。为了确保您理解什么是位，什么不是位，请花点时间从照片中制作
    ASCII 艺术表。
- en: '![Image](../images/f0220-01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0220-01.jpg)'
- en: 'Figure 23.2: Nintendo DMG-01-CPU from a Game Boy'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 23.2：来自 Game Boy 的 Nintendo DMG-01-CPU
- en: '![Image](../images/f0221-01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0221-01.jpg)'
- en: 'Figure 23.3: Close-up of DMG-01-CPU Bits'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 23.3：DMG-01-CPU 位的特写
- en: '![Image](../images/f0221-01a.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0221-01a.jpg)'
- en: 'Figure 23.4: Nintendo Logo at `0xA8` (ROM) and `0x104` (Cart).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 23.4：位于 `0xA8`（ROM）和 `0x104`（卡带）的 Nintendo 标志
- en: After locating the ROM and its bits, I photographed it as a panorama of twenty-two
    images at 50x magnification through a metallurgical microscope. These images were
    stitched together with Hugin and Panotools to form a panorama that is 9,000 pixels
    wide and 2,249 pixels tall. You can find it in reduced resolution as [Figure 23.5](ch23.xhtml#ch23fig5),
    or as a digital file.^([1](footnotes.xhtml#ch23fn1))
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在找到 ROM 及其位之后，我通过冶金显微镜以 50x 放大倍数拍摄了它的全景，拍摄了 22 张图像。这些图像通过 Hugin 和 Panotools
    拼接在一起，形成了一张宽 9000 像素，高 2249 像素的全景图。您可以在[图 23.5](ch23.xhtml#ch23fig5)中查看低分辨率版本，或者查看数字文件^([1](footnotes.xhtml#ch23fn1))。
- en: '**Bit Extraction**'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**位提取**'
- en: Having a photograph of the chip, the next step is to extract the bits into a
    textfile.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 拿到芯片的照片后，下一步是将位提取到文本文件中。
- en: I used Mask ROM Tool for this, drawing lines for each column and row. This ROM
    is rather small and the stitched image was quite well aligned, so I could place
    row and column lines that span the entire length of the ROM.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了 Mask ROM Tool 来完成这项工作，为每一列和每一行画了线。这个 ROM 相对较小，拼接的图像对齐得很好，因此我可以绘制贯穿 ROM
    整个长度的行列线。
- en: The software marks a bit wherever a row and column intersect, and it helpfully
    draws a histogram of the bits for me to choose a threshold color between ones
    and zeroes. Both the red and green colors channels have a clear separation between
    ones and zeroes, but I found that green had a wider gap, so that’s the best channel
    for sampling. The color I used was that of the pixel at the center of the bit;
    there was no need for more complicated sampling strategies.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 软件会在每一行和每一列交点处标记一个位，它还会帮我绘制一个位的直方图，供我选择一个零和一之间的阈值颜色。红色和绿色两个色彩通道之间对零和一有明显的分离，但我发现绿色的间隔更宽，因此绿色是最适合采样的通道。我使用的颜色是位中心像素的颜色，不需要更复杂的采样策略。
- en: '![Image](../images/f0223-01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0223-01.jpg)'
- en: 'Figure 23.5: ASCII Art of the DMG-01-CPU Bits'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 23.5：DMG-01-CPU 位的 ASCII 艺术
- en: '![Image](../images/f0224-01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0224-01.jpg)'
- en: 'Figure 23.6: Game Boy Memory Map'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 23.6：Game Boy 内存映射
- en: '**Bit Decoding**'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**位解码**'
- en: After extracting the physically ordered ASCII art bits in [Figure 23.5](ch23.xhtml#ch23fig5),
    the next challenge is to decode it. Let’s look at three ways to do that.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在提取了[图 23.5](ch23.xhtml#ch23fig5)中的物理顺序 ASCII 艺术位之后，接下来的挑战是解码它。我们来看看三种解码方法。
- en: McMaster (2018) uses this chip as an example for automatically solving bit decoding
    given known plaintext. The Game Boy uses a Sharp LR35902 CPU, which is roughly
    like a Z80\. Like the Z80, LR35902 code usually sets the stack pointer in the
    very first instruction with the `0x31` opcode. McMaster therefore searches with
    his Zorrom tool for all decodings in which the first byte comes out as `0x31`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: McMaster（2018）以此芯片为例，自动解决已知明文下的位解码问题。Game Boy 使用一款 Sharp LR35902 CPU，类似于 Z80。与
    Z80 一样，LR35902 代码通常在第一条指令中使用`0x31`操作码来设置堆栈指针。因此，McMaster 使用他的 Zorrom 工具搜索所有在其中第一个字节为
    `0x31` 的解码。
- en: '![Image](../images/f0225-01.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0225-01.jpg)'
- en: These filenames contain the decoding parameters, in which both are rotated 180
    ^°C and flipped on the X axis. Bits are inverted, and the only difference is that
    one uses the `cols-left` strategy while the other uses the `cols-downr` strategy.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件名包含了解码参数，其中两个参数都被旋转了 180 ^°C 并沿 X 轴翻转。位被反转，唯一的区别是一个使用 `cols-left` 策略，而另一个使用
    `cols-downr` 策略。
- en: He then uses the `unidasm` disassembler from MAME to examine each file’s first
    instruction. The `cols-left` variant begins with `31 11 47`, setting the stack
    pointer to `0x4711`, while the `cols-downr` variant begins with `31 fe ff`, setting
    the stack pointer to `0xfffe`. From the memory map in [Figure 23.6](ch23.xhtml#ch23fig6),
    we can see that the latter is a much more reasonable value, at the tail end of
    high RAM rather than a random address in the middle of the banked cartridge ROM.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，他使用 MAME 的 `unidasm` 反汇编器检查每个文件的第一条指令。`cols-left` 变体以 `31 11 47` 开头，设置堆栈指针为
    `0x4711`，而 `cols-downr` 变体以 `31 fe ff` 开头，设置堆栈指针为 `0xfffe`。从 [图 23.6](ch23.xhtml#ch23fig6)
    中的内存映射可以看出，后者是一个更合理的值，位于高 RAM 的尾部，而不是在卡带 ROM 的中间一个随机地址。
- en: We can also perform the same solution with GatoROM.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用 GatoROM 执行相同的解决方案。
- en: '![Image](../images/f0225-02.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0225-02.jpg)'
- en: Automated tools are great when they work, but we should always be suspicious
    of tools that we don’t understand. The `cols-downr` mode is not very complex;
    it just means that bytes are encoded in 16-bit logical columns made of two 8-bit
    physical columns. The leftmost column contains the most significant bits, and
    the first byte of the row is in the leftmost position. To get the next byte, first
    work downward and then move everything one step to the right.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化工具在工作时非常棒，但我们应该始终对我们不理解的工具保持怀疑。`cols-downr` 模式并不复杂；它意味着字节被编码成由两个 8 位物理列组成的
    16 位逻辑列。最左侧的列包含最重要的位，行的第一个字节位于最左侧。要获得下一个字节，首先向下移动，然后将所有内容向右移动一步。
- en: The tail end of the ROM, shown in disassembly in [Figure 23.1](ch23.xhtml#ch23fig1),
    disables read access at `0x00fe` by writing 1 into the register at `0xff50` before
    continuing into cartridge memory at `0x0100`. This is why dumping the ROM is not
    as simple as building a cartridge to display it on the screen, export it through
    the link port, or beep it through the speaker.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: ROM 的尾部，如 [图 23.1](ch23.xhtml#ch23fig1) 中的反汇编所示，在 `0x00fe` 通过向 `0xff50` 寄存器写入
    1 禁用了读取访问，然后继续进入 `0x0100` 的卡带内存。这就是为什么直接通过构建一个卡带来显示 ROM、通过链接端口导出或通过扬声器发出哔声来倾倒
    ROM 并不那么简单。
