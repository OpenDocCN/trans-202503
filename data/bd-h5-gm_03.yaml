- en: Chapter 2. Sprite Animation Using jQuery and CSS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章. 使用jQuery和CSS实现精灵动画
- en: In this chapter we’ll dive into moving sprites around the screen. Animation
    is one of the most common tasks in game development, and the principles you’ll
    learn in animating a simple game apply to most game types.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨如何在屏幕上移动精灵。动画是游戏开发中最常见的任务之一，你将在动画一个简单游戏时学到的原理适用于大多数游戏类型。
- en: Although much of the buzz around HTML5 games focuses on the `canvas` element,
    you can implement many games just as well using more traditional HTML, CSS, and
    JavaScript techniques, which are the focus of this chapter. They’re useful game
    development lessons in their own right, and they’ll be advantageous when we look
    into using the `canvas` element later. Games developed using HTML, JavaScript,
    and CSS techniques, often referred to as *DOM-based games*, also have much wider
    browser compatibility. Some older browsers still in use have no `canvas` support
    and also are unlikely to support CSS3 transformations and transitions; therefore,
    we’ll use older CSS features.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管关于HTML5游戏的讨论大多集中在`canvas`元素上，但你完全可以使用更传统的HTML、CSS和JavaScript技术来实现许多游戏，这也是本章的重点。这些技术本身就是有用的游戏开发经验，而且当我们后面深入研究`canvas`元素时，它们也会带来好处。使用HTML、JavaScript和CSS技术开发的游戏，通常被称为*基于DOM的游戏*，它们具有更广泛的浏览器兼容性。一些仍在使用的旧版浏览器不支持`canvas`，也很可能不支持CSS3的变换和过渡效果；因此，我们将使用较旧的CSS特性。
- en: The key mechanic of the *Bubble Shooter* game is, of course, shooting bubbles,
    and the bubble that the player fires triggers every bubble-popping effect. We’ll
    start by moving a fired bubble based on user input (a mouse click).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*泡泡射手*游戏的核心机制当然是射击气泡，而玩家发射的每个气泡都会触发气泡爆破效果。我们将从根据用户输入（鼠标点击）来移动已发射的气泡开始。'
- en: First, we need a way to move a bubble from a starting point A to an ending point
    B, and that bubble needs to move in a straight line at a constant velocity. Second,
    we need to determine exactly where points A and B are located. Because the player
    always fires bubbles from the same position, the starting coordinates (point A)
    will be the same for each new bubble. Point B will be the coordinates of the user’s
    mouse click when they fire the bubble, so we must retrieve those coordinates.
    To start, we’ll implement that movement from A to B.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一种方法将气泡从起始点A移动到终点B，并且气泡需要沿直线以恒定的速度移动。其次，我们需要准确确定点A和点B的位置。因为玩家总是从相同的位置发射气泡，起始坐标（点A）对于每个新气泡都是相同的。点B则是用户在发射气泡时鼠标点击的坐标，因此我们必须获取这些坐标。首先，我们将实现从A到B的移动。
- en: In the final game, the bubble won’t stop when it reaches the click coordinates
    but rather will continue until it collides with another bubble or moves off the
    edge of the screen. We’ll deal with collisions later when we more fully develop
    the game display.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在最终的游戏中，气泡不会在到达点击坐标时停止，而是会继续移动，直到与另一个气泡发生碰撞或移出屏幕边缘。碰撞的处理将在稍后，当我们更全面地开发游戏展示时再进行。
- en: When we have movement from point to point, we can then extrapolate a bubble’s
    path past the user’s click and continue to move the bubble forward in the same
    direction. To find that path, we need to calculate a firing angle based on the
    relative positions of point A and point B, as shown in [Figure 2-1](ch02.html#moving_the_bubble_along_a_vector
    "Figure 2-1. Moving the bubble along a vector").
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从一个点移动到另一个点时，就可以推算气泡的路径，超出用户点击的位置，并继续沿相同方向推动气泡。为了找到这条路径，我们需要根据点A和点B的相对位置计算发射角度，如[图2-1](ch02.html#moving_the_bubble_along_a_vector
    "图2-1. 沿向量移动气泡")所示。
- en: '![Moving the bubble along a vector](httpatomoreillycomsourcenostarchimages2184501.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![沿向量移动气泡](httpatomoreillycomsourcenostarchimages2184501.png)'
- en: Figure 2-1. Moving the bubble along a vector
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-1. 沿向量移动气泡
- en: Given that firing angle, we can send a bubble in a particular direction as far
    as needed. Later, we can calculate how far it needs to move by determining any
    collisions. For now, we’ll just define *as far as needed* as a point sufficiently
    far away to move the bubble off the screen.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 给定这个发射角度，我们可以将气泡发射到一个特定的方向，直到所需的距离。之后，我们可以通过确定碰撞来计算气泡需要移动多远。现在，我们暂时将*所需的距离*定义为足够远的一个点，使得气泡能够移出屏幕。
- en: Principles of CSS Sprites
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS精灵原理
- en: A *sprite* is a two-dimensional game element that is part of a larger scene
    but can move around without affecting the background data. At the moment, the
    bubble at point A is the only sprite.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*精灵*是一个二维的游戏元素，它是更大场景的一部分，但可以独立移动，而不影响背景数据。目前，点A的气泡是唯一的精灵。'
- en: At its simplest, in this DOM-based approach, a sprite is an HTML block (often
    a set of `div` tags) with CSS styling applied. Due to the way a browser renders
    HTML, moving a sprite without altering the rest of the screen is easy to do. An
    HTML element that is absolutely positioned with CSS is rendered independently
    of the surrounding HTML elements. The browser paints all the objects to the screen
    and handles layering and overlaps. If we remove an object, the browser knows it
    needs to display whatever is underneath. This HTML and CSS sprite manipulation
    property isn’t free with `canvas` development, but as you’ll see when we learn
    more about the `canvas` element in [Chapter 6](ch06.html "Chapter 6. Rendering
    Canvas Sprites"), it’s one of the features that makes DOM game development an
    ideal place to start and a great tool for rapidly prototyping games.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种基于 DOM 的方法中，最简单的情况下，精灵是一个带有 CSS 样式的 HTML 块（通常是一组 `div` 标签）。由于浏览器渲染 HTML 的方式，移动精灵而不改变屏幕上的其他部分是非常容易的。使用
    CSS 进行绝对定位的 HTML 元素会独立于周围的 HTML 元素进行渲染。浏览器将所有对象绘制到屏幕上并处理图层和重叠。如果我们移除一个对象，浏览器知道它需要显示下面的内容。这个
    HTML 和 CSS 精灵操作的特性，在 `canvas` 开发中并不完全适用，但正如我们在 [第 6 章](ch06.html "第 6 章 渲染 Canvas
    精灵")中学习 `canvas` 元素时看到的那样，它是使 DOM 游戏开发成为理想起点并成为快速原型制作游戏的一个极好工具的功能之一。
- en: Creating the Game Board
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建游戏板
- en: 'In the *Bubble Shooter* game, the bubbles will all be sprites so we can move
    them around the screen as self-contained elements. We’ll create the first sprite
    soon by creating one of the bubbles that will sit in the display. But first we
    need a container for the game board within the area where all the bubble action
    happens. We’ll put this container in a `div` called `"board"`, so add the new
    `div` to *index.html*:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *Bubble Shooter* 游戏中，所有气泡都将是精灵，这样我们就可以将它们作为自包含的元素移动到屏幕上。我们将很快通过创建一个气泡来创建第一个精灵，这个气泡将放置在显示区域内。但首先，我们需要为游戏板创建一个容器，在所有气泡动作发生的区域内。我们将这个容器放在一个名为
    `"board"` 的 `div` 中，因此在 *index.html* 中添加这个新的 `div`：
- en: '*index.html*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*index.html*'
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we’ll position the board with CSS. The game board will be centered within
    the fixed-width display, so we’ll make a 760-pixel-wide board and position it
    120 pixels from the left edge of the `game div`, which is positioned to the left
    of the window. Add the definition for `#board` to *main.css* after the definition
    for `#game`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用 CSS 来定位游戏板。游戏板将位于固定宽度的显示区域的中央，因此我们将创建一个宽度为 760 像素的板，并将其从 `game div`
    的左边缘定位 120 像素，`game div` 被定位在窗口的左侧。在 *main.css* 中添加 `#board` 的定义，位于 `#game` 的定义之后：
- en: '*main.css*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*main.css*'
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We also need some CSS to describe a bubble’s starting position, width, and height.
    The player’s current bubble will be placed in the bottom center of the play area
    and will be 50 pixels square. We’ll assign the user’s current ready-to-fire bubble
    the CSS class of `cur_bubble` and define its positioning and appearance in a style
    sheet. We’ll put game elements in their own CSS file so we can easily distinguish
    them from the various user interface elements, such as dialog boxes and buttons.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一些 CSS 来描述气泡的起始位置、宽度和高度。玩家当前的气泡将位于游戏区域的底部中央，并且会是 50 像素的正方形。我们将为玩家当前准备发射的气泡分配
    CSS 类 `cur_bubble`，并在样式表中定义其定位和外观。我们会将游戏元素放在自己的 CSS 文件中，这样我们就能轻松区分它们与各种用户界面元素，如对话框和按钮。
- en: 'Create a new file in the *_css* directory, call it *game.css*, and put the
    following code in it:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *_css* 目录下创建一个新文件，命名为 *game.css*，并将以下代码放入其中：
- en: '*game.css*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*game.css*'
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Each bubble will sit inside a 50-pixel square. We could just fill the game area
    completely with bubbles, but the trick is to provide a large playing board without
    making the game too long lasting. After some trial and error, I chose to use 16
    bubbles, which should fit in the game area width and still leave a bit of border.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 每个气泡将放置在一个 50 像素的正方形内。我们可以将整个游戏区域完全填充气泡，但诀窍是提供一个大面积的游戏板，同时又不让游戏持续时间过长。经过一些试验和错误后，我选择使用
    16 个气泡，这样应该能适应游戏区域的宽度，并且仍留有一些边距。
- en: 'We also need to link *game.css* to the style sheet file in the HTML header,
    so add that link to *index.html* after the link to *main.css*:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要将 *game.css* 链接到 HTML 页头中的样式表文件，因此在链接到 *main.css* 之后，添加该链接到 *index.html*
    中：
- en: '*index.html*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*index.html*'
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The bubble we want to fire doesn’t yet display on the screen, so let’s add an
    image to the filesystem and then use some CSS to display it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要发射的气泡尚未显示在屏幕上，因此我们需要将一张图片添加到文件系统中，然后使用一些 CSS 来显示它。
- en: Adding Sprites
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加精灵
- en: '[Figure 2-2](ch02.html#our_first_bubble_sprite_graphic "Figure 2-2. Our first
    bubble sprite graphic") shows how a single bubble will appear (without coloring).
    The appearance of the bubble will be rendered as a background image within the
    board `div` element.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[图2-2](ch02.html#our_first_bubble_sprite_graphic "图2-2. 我们的第一个气泡精灵图")展示了一个气泡的外观（未上色）。气泡的外观将作为背景图像渲染在板
    `div` 元素中。'
- en: '![Our first bubble sprite graphic](httpatomoreillycomsourcenostarchimages2184503.png.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![我们的第一个气泡精灵图](httpatomoreillycomsourcenostarchimages2184503.png.jpg)'
- en: Figure 2-2. Our first bubble sprite graphic
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-2. 我们的第一个气泡精灵图
- en: We’ll use four different bubble colors, so let’s make all four colors of bubbles
    at the same time. Any four colors will do, as long as they’re sufficiently distinct.
    As with other assets, which are generally images and sound files, we’ll store
    the colored bubbles in an underscored folder. Let’s call this one *_img*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用四种不同的气泡颜色，所以让我们同时制作所有四种颜色的气泡。任何四种颜色都可以，只要它们足够显眼。和其他资源一样，通常是图像和声音文件，我们会将有颜色的气泡存储在一个带下划线的文件夹中。我们将这个文件夹命名为*
    _img*。
- en: To speed up loading time and keep file management simple, we’ll put the images
    for all four bubble types into a single PNG file. You can see the complete image
    in [Figure 2-3](ch02.html#single_image_file_containing_all_animati "Figure 2-3. A
    single image file containing all animation states for four bubble types").
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加快加载时间并简化文件管理，我们将把所有四种气泡类型的图像放入一个单独的PNG文件中。你可以在[图2-3](ch02.html#single_image_file_containing_all_animati
    "图2-3. 包含四种气泡类型所有动画状态的单一图像文件")中看到完整的图像。
- en: '![A single image file containing all animation states for four bubble types](httpatomoreillycomsourcenostarchimages2184505.png.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![包含四种气泡类型所有动画状态的单一图像文件](httpatomoreillycomsourcenostarchimages2184505.png.jpg)'
- en: Figure 2-3. A single image file containing all animation states for four bubble
    types
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-3. 包含四种气泡类型所有动画状态的单一图像文件
- en: The PNG file (*bubble_sprite_sheet.png*) contains not only the base state for
    the four bubbles but also animations of the popping process that we’ll use later.
    The standard bubble image is shown in the left column; the three popping animation
    stages are shown in the second, third, and fourth columns. Because we have four
    different bubbles, we’ll create CSS definitions that let us display whichever
    color we want by shifting the position of the background image up or down. The
    ability to use a single image to render multiple sprites is the reason we’re using
    a CSS background image rather than placing `<img>` tags directly into the DOM;
    as a result, the browser needs to download only one image file, which speeds up
    initialization time. Also, the animation frames for popping are preloaded, so
    we shouldn’t have any nasty pauses while loading images later in the game.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: PNG文件（*bubble_sprite_sheet.png*）不仅包含四种气泡的基本状态，还包含我们稍后会用到的气泡爆炸动画过程。标准的气泡图像显示在左列；三个爆炸动画阶段显示在第二列、第三列和第四列。由于我们有四种不同的气泡，我们将创建CSS定义，使我们通过上下移动背景图像的位置来显示我们想要的颜色。使用单一图像渲染多个精灵是我们使用CSS背景图像的原因，而不是直接将`<img>`标签放入DOM中；因此，浏览器只需要下载一个图像文件，这可以加快初始化时间。此外，爆炸的动画帧已经预加载，所以在游戏后续加载图像时，我们不应该遇到任何卡顿。
- en: Although we’re using four bubble colors, the game doesn’t need to know the colors—we
    might even change the color choices later—but it does need a way to reference
    them. We’ll number the bubble types from zero to three to represent the four colors.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们使用了四种气泡颜色，但游戏并不需要知道具体的颜色——我们甚至可能以后改变颜色选择——但它确实需要一种方法来引用这些颜色。我们将把气泡类型编号从零到三来表示四种颜色。
- en: 'We can use the base CSS class of `.bubble` for properties that are common to
    all bubbles and add an additional class to the HTML elements when we need to specify
    the bubble’s type (which sets its color). Modify *game.css* as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`.bubble`的基础CSS类来设置所有气泡共有的属性，并在需要指定气泡类型（即设置颜色）时，向HTML元素添加额外的类。请按照以下方式修改*game.css*：
- en: '*game.css*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*game.css*'
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, when we want to render the four bubbles, we can just add the correct classes
    to a `div` element, and the `background-position` property should display the
    appropriate image. If we want to hard-code a bubble of the last type into the
    DOM, we’d add the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们想渲染四个气泡时，我们只需要向`div`元素添加正确的类，`background-position`属性应该会显示出适当的图像。如果我们想将最后一种类型的气泡硬编码到DOM中，可以添加以下内容：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A bubble of the first type would be
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种类型的气泡将是
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Although we currently have a definition for the bubble in CSS, we have no HTML
    to display it on the screen. Instead of hard-coding the bubbles, we’ll generate
    them through JavaScript. But before we start animating a bubble, we need to create
    and render one, which is the focus of the next section.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们目前已经在CSS中定义了气泡，但我们没有HTML来将其显示在屏幕上。我们不会将气泡硬编码，而是通过JavaScript生成它们。但在开始为气泡添加动画之前，我们需要先创建并渲染一个气泡，这是下一部分的重点。
- en: Animation and the Bubble Class
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画与气泡类
- en: Because the bubble is one of the main elements of the game, we’ll create a separate
    JavaScript class for it. We don’t yet know all the properties this class might
    need, but for every bubble object we need to manipulate in code, an onscreen element
    will display; therefore, we’ll create a property to reference that. We’ll call
    it the `sprite` property, and it will store a reference to the jQuery object that
    we use to manipulate the DOM element.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于气泡是游戏中的主要元素之一，我们将为其创建一个单独的JavaScript类。我们目前还不知道该类可能需要哪些所有属性，但对于每个需要在代码中操作的气泡对象，都将有一个屏幕上的元素进行显示；因此，我们将创建一个属性来引用它。我们将其命名为`sprite`属性，它将存储我们用来操作DOM元素的jQuery对象的引用。
- en: 'Put the following in a separate file called *bubble.js* in the *_js* folder,
    and add the new file to the `Modernizr.load` call in *index.html* just after *ui.js*:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容放在一个单独的文件中，命名为*bubble.js*，并将新文件添加到*index.html*中的`Modernizr.load`调用中，位于*ui.js*之后：
- en: '*bubble.js*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*bubble.js*'
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We have only one argument to pass into the constructor, which is a reference
    to the jQuery `sprite` object that will be created within a call to the `Bubble.create`
    function ➋. This function currently creates only one type of sprite due to the
    assigning of the `bubble_0` CSS class. Currently, only one method is in the class
    definition ➊, and it returns the `sprite` object. When we want to create a bubble,
    rather than invoking `BubbleShoot.Bubble` directly, we’ll call `BubbleShoot.Bubble.create`.
    As a result, we can ensure that all components of a bubble are instantiated correctly
    and minimize code duplication.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只有一个参数传递给构造函数，那就是引用将在`Bubble.create`函数 ➋调用中创建的jQuery `sprite`对象。由于分配了`bubble_0`
    CSS类，该函数目前只创建一种类型的精灵。当前，类定义中只有一个方法 ➊，它返回`sprite`对象。当我们想要创建一个气泡时，我们不会直接调用`BubbleShoot.Bubble`，而是会调用`BubbleShoot.Bubble.create`。因此，我们可以确保气泡的所有组件都正确实例化，并最小化代码重复。
- en: Now we can create `Bubble` objects, and the document element is created at the
    same time. However, the bubble still won’t be part of the visible DOM because
    it hasn’t been inserted into the document. To handle this, we’ll make a function
    inside `Game` to create new bubbles and add the CSS class of `cur_bubble` to the
    newly created DOM element.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建`Bubble`对象，且文档元素会同时创建。然而，气泡仍然不会成为可见的DOM的一部分，因为它尚未插入文档。为了处理这个问题，我们将在`Game`内部创建一个函数，用于创建新气泡并将CSS类`cur_bubble`添加到新创建的DOM元素中。
- en: 'At any time in the game, only a single bubble is on the screen that’s ready
    for the player to fire, so we’ll keep a reference to it, called `curBubble`, in
    a variable within `Game`. To finish this step of bubble creation, add the lines
    in bold to *game.js*:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏中的任何时刻，屏幕上只有一个准备好供玩家发射的气泡，因此我们将在`Game`内的一个变量中保留对它的引用，命名为`curBubble`。为了完成这一步气泡创建的工作，请将加粗的行添加到*game.js*中：
- en: '*game.js*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*game.js*'
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: At the top of the `Game` definition, we define `curBubble` ➊, which will exist
    only within the scope of the `Game` object. This empty variable is declared here
    and is set when the user clicks the New Game button, which calls `startGame`.
    Here, `curBubble` is set to the value returned by `getNextBubble` ➋. The function
    `getNextBubble` ➌ calls `BubbleShoot.Bubble.create` ➍, which returns an instance
    of the `Bubble` class and then adds the CSS class `cur_bubble` ➎ to the DOM element.
    Finally, the DOM element is appended to the board `div` element ➏.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Game`定义的顶部，我们定义了`curBubble` ➊，它只会在`Game`对象的作用域内存在。这个空的变量在此声明，并在用户点击“新游戏”按钮时设置，该按钮会调用`startGame`。在这里，`curBubble`被设置为`getNextBubble`
    ➋返回的值。`getNextBubble` ➌调用`BubbleShoot.Bubble.create` ➍，该函数返回一个`Bubble`类的实例，并将CSS类`cur_bubble`
    ➎添加到DOM元素中。最后，DOM元素被追加到板块`div`元素中 ➏。
- en: Reload the page and click **New Game**. At the bottom center of the screen you
    should see a bubble appear. The bubble can’t move anywhere yet, but we’ll change
    that in the next section when we add some simple animation.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 重新加载页面并点击**新游戏**。在屏幕的底部中央，你应该看到一个气泡出现。这个气泡现在还不能移动，但我们将在下一部分通过添加一些简单的动画来改变这一点。
- en: Calculating Angle and Direction
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算角度和方向
- en: 'To determine which direction to fire the bubble in, we need to find out where
    the mouse is at the moment the user clicks. We can do this by interrogating the
    event object that will fire in response to the `click` event. The `Game` controller
    needs to know the angle to fire the bubble and what the results of the game display
    should be. To avoid adding interface code to the controller, the `ui` object will
    handle the movement process, which will follow these steps:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定气泡发射的方向，我们需要找出用户点击时鼠标的位置。我们可以通过检查响应 `click` 事件的事件对象来做到这一点。`Game` 控制器需要知道发射气泡的角度以及游戏结果显示的内容。为了避免在控制器中添加界面代码，`ui`
    对象将处理运动过程，步骤如下：
- en: Find the coordinates of the mouse click.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找鼠标点击的坐标。
- en: Calculate a vector from the bubble’s starting point to the click point.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算从气泡的起始点到点击点的向量。
- en: Extend that vector by a sufficient length to move the bubble off the game screen.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 延长该向量足够的长度，将气泡移动出游戏屏幕。
- en: Move the bubble to the end of the vector.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将气泡移动到向量的末端。
- en: An example of a bubble’s trajectory was shown in [Figure 2-1](ch02.html#moving_the_bubble_along_a_vector
    "Figure 2-1. Moving the bubble along a vector").
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 气泡轨迹的示例见于 [图 2-1](ch02.html#moving_the_bubble_along_a_vector "图 2-1. 沿向量移动气泡")。
- en: At this point, the movement process assumes that the bubble won’t collide with
    anything, which is the feature we’ll tackle first.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，运动过程假设气泡不会与任何东西碰撞，这是我们首先要解决的特性。
- en: 'In the `Game` function definition, create the `clickGameScreen` function (right
    after the `getNextBubble` function) and add an event binding to `startGame`, as
    shown here:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Game` 函数定义中，创建 `clickGameScreen` 函数（紧跟在 `getNextBubble` 函数之后），并为 `startGame`
    添加事件绑定，如下所示：
- en: '*game.js*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*game.js*'
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The function `clickGameScreen` ➊ will be called in response to the user clicking
    the screen. As part of the jQuery event handling, it will receive an event object
    `e` that contains useful data about the clicked object, including the coordinates
    of the click. This function also has a call to `BubbleShoot.ui.getBubbleAngle`,
    which will calculate a firing angle for the bubble using the event object’s click
    coordinates. The value returned will be an angle, in radians, either to the left
    or right of the vertical center line of the bubble. Let’s write that code now.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `clickGameScreen` ➊ 会响应用户点击屏幕时被调用。作为 jQuery 事件处理的一部分，它将接收一个事件对象 `e`，其中包含关于点击对象的有用数据，包括点击的坐标。此函数还会调用
    `BubbleShoot.ui.getBubbleAngle`，该方法将使用事件对象的点击坐标计算气泡的发射角度。返回的值将是一个角度，单位为弧度，表示气泡相对于其垂直中心线的左侧或右侧。现在我们来编写这段代码。
- en: 'In *ui.js*, add the following constant at the top of the `ui` object and new
    methods after `hideDialog`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *ui.js* 中，在 `ui` 对象的顶部添加以下常量，并在 `hideDialog` 之后添加新的方法：
- en: '*ui.js*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*ui.js*'
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`BUBBLE_DIMS` ➊ is the width (and height) of a bubble sprite in the DOM. This
    constant allows us to calculate the offset to the center of the element, which
    means we can translate to the (top, left) coordinates that CSS uses. In game programming,
    you’ll often want to work with the center coordinates of an object when you change
    its position, whereas when rendering, you’ll use the (top, left) coordinates.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`BUBBLE_DIMS` ➊ 是气泡精灵在 DOM 中的宽度（和高度）。这个常量使我们能够计算出元素中心的偏移量，这意味着我们可以转换为 CSS 使用的（top,
    left）坐标。在游戏编程中，当你改变一个物体的位置时，通常需要使用物体的中心坐标，而在渲染时，你将使用（top, left）坐标。'
- en: This new code fetches the coordinates of the player’s mouse click ➋ by retrieving
    two properties that jQuery passes us with the event object `e`. We also need the
    starting bubble’s coordinates, so the next method ➌ will do that job using another
    jQuery method. When we have the two coordinate pairs, we can calculate the relative
    *x*/*y* offset between them ➍. Now, we can use the tangent trigonometry function
    ➎ to calculate the angle based on the *x*/*y* offset. Then, if the click is below
    the center line of the bubble ➏, we add pi (which is 180 degrees, but JavaScript
    trigonometry is always in radians) to the angle so we can describe a full circle.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这段新代码通过从 jQuery 事件对象 `e` 中获取两个属性，来获取玩家鼠标点击的坐标 ➋。我们还需要起始气泡的坐标，所以接下来的方法 ➌ 将通过另一个
    jQuery 方法来完成这个任务。得到这两个坐标对后，我们可以计算它们之间的相对 *x*/*y* 偏移量 ➍。接着，我们可以使用正切三角函数 ➎ 根据 *x*/*y*
    偏移量来计算角度。如果点击发生在气泡的中心线下方 ➏，我们将角度加上 pi（即 180 度，但 JavaScript 的三角函数总是以弧度为单位），以便描述一个完整的圆。
- en: To calculate the angle, we’ve used some trigonometry, which you’ll become more
    familiar with as you build games, if you’re not already. The `Math.atan` method
    retrieves angles offset from the vertical with positive numbers to the right and
    negative numbers to the left of vertical. The returned angle will be a value in
    radians ranging from negative to positive pi.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算角度，我们使用了一些三角函数，随着你制作游戏的过程，你会变得更加熟悉这些函数（如果你还不熟悉的话）。`Math.atan`方法检索相对于垂直方向的角度，正数表示右侧，负数表示左侧。返回的角度是一个弧度值，范围从负π到正π。
- en: Firing and Animating Bubbles
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发射和动画化气泡
- en: Now that we know the angle at which to fire a bubble, we can send it off the
    screen. Let’s assume we’ll fire it at 1000 pixels—which is enough to move it outside
    the game area—and then see the results in action.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了发射气泡的角度，我们可以将其发射出屏幕。假设我们将气泡发射到1000像素远——这足以将其移出游戏区域——然后查看实际效果。
- en: A Quick Trigonometry Refresher
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 快速的三角函数复习
- en: We can calculate the angle we want to fire the bubble with some trigonometry
    using the inverse tangent function. In [Figure 2-4](ch02.html#calculating_the_firing_angle_manually
    "Figure 2-4. Calculating the firing angle manually"), we calculate the angle by
    taking the inverse tangent of the vector’s x and y components.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过一些三角函数使用反正切函数来计算发射气泡的角度。在[图2-4](ch02.html#calculating_the_firing_angle_manually
    "图2-4. 手动计算发射角度")中，我们通过计算向量的x和y分量的反正切来得到角度。
- en: '![Calculating the firing angle manually](httpatomoreillycomsourcenostarchimages2184507.png.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![手动计算发射角度](httpatomoreillycomsourcenostarchimages2184507.png.jpg)'
- en: Figure 2-4. Calculating the firing angle manually
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-4. 手动计算发射角度
- en: 'Add the following lines of code to `clickGameScreen` in *game.js*:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到*game.js*中的`clickGameScreen`：
- en: '*game.js*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*game.js*'
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The new code sets a duration and total distance, and then calculates the distance
    along the *x*- and *y*-axes to give coordinates (`coords`) that are 1000 pixels
    from its starting point in the direction of the mouse click.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 新的代码设置了持续时间和总距离，然后计算沿着*x*轴和*y*轴的距离，从而给出距离起始点1000像素的坐标（`coords`），朝着鼠标点击的方向。
- en: Next, we need to write the `fireBubble` function ➊ that takes the `bubble` object
    ➋, a coordinate to fire at ➌, and a duration ➍ as arguments. We’ll put that in
    the `ui` class, because it handles just onscreen movement and won’t affect the
    game state.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要编写`fireBubble`函数➊，该函数接受`bubble`对象➋、一个目标坐标➌和一个持续时间➍作为参数。我们将其放入`ui`类中，因为它只处理屏幕上的运动，不会影响游戏状态。
- en: 'Add a new method right after `getBubbleAngle` in *ui.js*:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在*ui.js*中，紧接着`getBubbleAngle`方法后添加一个新方法：
- en: '*ui.js*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*ui.js*'
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `fireBubble` method is a jQuery call that moves a bubble with jQuery’s `animate`
    method. The coordinates passed into the function represent the center point of
    where the bubble needs to stop. To make sure the bubble reaches the correct (top,
    left) coordinates, `fireBubble` first translates the coordinates it receives to
    the top left of the object ➊, which is how CSS positions elements.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`fireBubble`方法是一个jQuery调用，它通过jQuery的`animate`方法移动气泡。传递给该函数的坐标表示气泡需要停止的中心点。为了确保气泡到达正确的(top,
    left)坐标，`fireBubble`首先将接收到的坐标转换为对象的左上角坐标➊，这是CSS定位元素的方式。'
- en: 'The simplest form of animation for moving a sprite around the screen requires
    two steps: ➊ place the sprite at a fixed position and ➋ move it to a new position
    a short time later. Repeat the second step until the sprite reaches its destination.
    With DOM manipulation, we just need to change the top and left CSS properties
    of the element for each movement and can let the browser take it from there.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的动画方式是将精灵移动到屏幕上，分为两个步骤：➊将精灵放置在一个固定位置，➋在一段短时间后将其移动到新的位置。重复第二步，直到精灵到达目标位置。使用DOM操作时，我们只需要在每次移动时更改元素的top和left
    CSS属性，浏览器会自动处理其余部分。
- en: We can achieve this animation in two ways. We can use JavaScript animation,
    which requires us to move the sprite along each step of its path manually, or
    we can use CSS3 transitions to move the sprite without input from our code each
    frame. In this chapter, we’re focusing on the JavaScript approach; later we’ll
    demonstrate a CSS3 implementation.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过两种方式实现这个动画。我们可以使用JavaScript动画，这需要我们手动在路径的每一步中移动精灵，或者我们可以使用CSS3过渡效果，在每帧中无需我们代码的参与来移动精灵。本章我们将重点介绍JavaScript方法，稍后我们会展示CSS3的实现方式。
- en: As with many of the effects we want to achieve in JavaScript and CSS, we can
    let jQuery do much of the work for us. The `animate` method provides a way to
    animate numerical CSS properties, such as left and top coordinates. It calculates
    the difference between the start and end values, and it changes the property’s
    values from start to end over a number of steps.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们希望在 JavaScript 和 CSS 中实现的许多效果一样，我们可以让 jQuery 为我们做大部分工作。`animate` 方法提供了一种动画化数字
    CSS 属性的方法，如 left 和 top 坐标。它计算起始值和结束值之间的差距，并在若干步中将属性的值从起始值变化到结束值。
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*This method doesn’t work with non-numerical CSS properties because the way
    to get from start to end can’t be calculated easily. For example, you couldn’t
    use `animate` to transition a background color with start and end values that
    are hexadecimal pairs because interpolating between two colors is not as simple
    a calculation.*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*此方法不适用于非数字 CSS 属性，因为从起始值到结束值的转换无法轻松计算。例如，你不能使用 `animate` 来过渡背景颜色，起始值和结束值是十六进制对，因为在两种颜色之间插值并不是一个简单的计算。*'
- en: 'The `animate` method takes a number of arguments, including these:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`animate` 方法接受多个参数，包括以下内容：'
- en: '****CSS properties ➋****. Specifies the properties to animate. Most often,
    these are positioning properties, such as *top* and *left*, but they could be
    anything that can be defined by a single-integer dimension in pixels, including
    `font-size`, width, height, or even `border-width` or `margin-left`. (Note that
    the shorthand definition for margin, such as `margin: 0 10px 20px 10px`, contains
    four different values, so it won’t work with `animate` without being split into
    the four constituent parts of `margin-top`, `margin-right`, `margin-bottom`, and
    `margin-left`.)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****CSS 属性 ➋****。指定要动画化的属性。通常，这些是定位属性，如 *top* 和 *left*，但它们也可以是任何可以用像素单一整数维度定义的属性，包括
    `font-size`、宽度、高度，甚至 `border-width` 或 `margin-left`。（注意，像 `margin: 0 10px 20px
    10px` 这样的简写定义包含了四个不同的值，因此它不能直接与 `animate` 配合使用，需要将其拆分成 `margin-top`、`margin-right`、`margin-bottom`
    和 `margin-left` 四个部分。）'
- en: '****Duration ➌****. Defines the length in milliseconds of the animation duration.
    The duration here is fixed at 1 second (1000 milliseconds) for a velocity of 1000
    pixels per second. The distance the bubble moves will depend on the game state
    and, specifically, anything the bubble might collide with. But the duration that
    we have now should be correct for bubbles that are fired off the screen.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****持续时间 ➌****。定义动画持续时间的长度，以毫秒为单位。此处的持续时间固定为 1 秒（1000 毫秒），以每秒 1000 像素的速度进行动画。气泡的移动距离将取决于游戏状态，特别是气泡可能与什么碰撞。但是，目前的持续时间应该适合那些被发射出屏幕的气泡。'
- en: '****Easing ➍****. Defines how an object transitions from its start state to
    its end state. Easing is usually used to vary acceleration and deceleration along
    a movement path. For movement, `linear` results in a constant velocity from start
    to end, whereas `swing` adds some starting acceleration and ending deceleration.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****缓动 ➍****。定义物体从起始状态到结束状态的过渡方式。缓动通常用于改变沿运动路径的加速和减速。例如，对于运动，`linear` 表示从起点到终点的速度是恒定的，而
    `swing` 则在开始时有加速，结束时有减速。'
- en: You can pass other options to `animate` as well, and it’s worth referring to
    the jQuery documentation to get an idea of the full potential of the function.
    To fire the bubble, we need only the preceding parameters.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将其他选项传递给`animate`，并且参考 jQuery 文档可以了解该函数的全部潜力。要触发气泡，我们只需要前面的参数。
- en: Reload the page and click in a location above the bubble. The bubble should
    fly off in that direction. This will work only once. You’ll need to refresh the
    page to see it again, but it’s certainly a start.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 重新加载页面并点击气泡上方的某个位置，气泡应该会朝那个方向飞去。这只会发生一次。你需要刷新页面才能再次看到它，但这无疑是一个开始。
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you’ve learned how to perform simple animations with jQuery,
    HTML, and CSS techniques. Now that we have the basic code in place to move a bubble
    across the screen in response to a mouse click, it’s time to start fleshing out
    the game.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已经学会了如何使用 jQuery、HTML 和 CSS 技术进行简单的动画效果。现在，我们已经具备了基本的代码，可以在鼠标点击时使气泡在屏幕上移动，是时候开始完善这个游戏了。
- en: In [Chapter 3](ch03.html "Chapter 3. Game Logic"), we’ll focus on drawing the
    game board, detecting collisions, and popping bubble groups.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 3 章](ch03.html "第 3 章. 游戏逻辑")，我们将专注于绘制游戏棋盘、检测碰撞和消除气泡组。
- en: Further Practice
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步练习
- en: If you click in the game area a second time, the bubble appears back on the
    screen. How would you disable this click event to prevent it?
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在游戏区域再次点击，气泡会重新出现在屏幕上。你如何禁用这个点击事件以防止它发生？
- en: 'In the `.animate` call, we specify `easing : "linear"`. Try using `"swing"`
    and think about why this may not be appropriate for *Bubble Shooter* but may be
    a better animation method for other games. Then look at more easing settings at
    *[http://api.jqueryui.com/easings/](http://api.jqueryui.com/easings/)* and see
    if you can incorporate any of them into the code.'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在`.animate`调用中，我们指定了`easing : "linear"`。试着使用`"swing"`，并思考为什么这对*Bubble Shooter*来说可能不合适，但对于其他游戏可能是更好的动画方法。然后查看更多的easing设置，访问
    *[http://api.jqueryui.com/easings/](http://api.jqueryui.com/easings/)*，看看你是否可以将其中的任何设置融入到代码中。'
