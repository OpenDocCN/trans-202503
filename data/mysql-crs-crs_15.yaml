- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Creating Triggers
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 创建触发器
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: In this chapter, you’ll create triggers, database objects that automatically
    *fire*, or execute, before or after a row is inserted, updated, or deleted from
    a table, and perform the functionality you’ve defined. Every trigger is associated
    with one table.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将创建触发器，数据库对象，它们会在一行被插入、更新或删除之前或之后自动*触发*，执行你定义的功能。每个触发器都与一个表关联。
- en: Triggers are most often used to track changes made to a table or to enhance
    the data’s quality before it’s saved to the database.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 触发器最常用于跟踪对表的更改，或在数据被保存到数据库之前增强数据质量。
- en: Like functions and procedures, triggers are saved in the database in which you
    create them.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 像函数和存储过程一样，触发器会保存在你创建它们的数据库中。
- en: Triggers That Audit Data
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据审计触发器
- en: You’ll first use triggers to track changes to a database table by creating a
    second *audit table* that logs which user changed which piece of data and saves
    the date and time of the change.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你将首先使用触发器来跟踪对数据库表的更改，方法是创建一个第二个*审计表*，记录哪个用户更改了哪条数据，并保存更改的日期和时间。
- en: Take a look at the following `payable` table in a company’s `accounting` database.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 请看一下公司`accounting`数据库中的`payable`表。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To create an audit table that tracks any changes made to the `payable` table,
    enter the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个审计表来跟踪对`payable`表进行的任何更改，可以输入如下内容：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You’ll create triggers so that when changes are made to the `payable` table,
    a record of the changes is saved to the `payable_audit` table. You’ll save the
    date and time of the change to the `audit_datetime` column; the user who made
    the change to the `audit_user` column; and a text description of what changed
    to the `audit_change` column.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你将创建触发器，以便在对`payable`表进行更改时，将更改的记录保存到`payable_audit`表中。你将保存更改的日期和时间到`audit_datetime`列；保存进行更改的用户到`audit_user`列；以及将更改内容的文本描述保存到`audit_change`列。
- en: Triggers can be set to fire either before or after rows are changed. The first
    set of triggers you’ll create are *after* triggers. You’ll set three triggers
    to fire after changes are made to data in the `payable` table.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 触发器可以设置在行数据更改之前或之后触发。你将创建的第一组触发器是*after*触发器。你将设置三个触发器，在`payable`表的数据发生更改后触发。
- en: After Insert Triggers
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插入后的触发器
- en: An *after insert* trigger (indicated in the code by the suffix `_ai`) fires
    after a row is inserted. [Listing 12-1](#listing12-1) shows how to create an after
    insert trigger for the `payable` table.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*插入后*触发器（在代码中通过后缀`_ai`表示）会在一行被插入后触发。[示例 12-1](#listing12-1)展示了如何为`payable`表创建一个插入后触发器。
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 12-1: Creating an after insert trigger'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 12-1：创建一个插入后触发器
- en: First you create your trigger and call it `tr_payable_ai` ❶. Next, you specify
    the `after` keyword to indicate when the trigger should fire ❷. In this example,
    a row will be inserted into the `payable` table and *then* the trigger will fire,
    writing the audit row to the `payable_audit` table.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你创建触发器并命名为`tr_payable_ai` ❶。接着，你指定`after`关键字来表示触发器应当在何时触发 ❷。在这个例子中，一行将被插入到`payable`表中，*然后*触发器将触发，将审计记录写入`payable_audit`表。
- en: In the trigger, for each row ❸ that gets inserted into the `payable` table,
    MySQL will run the code between the `begin` and `end` statements. All triggers
    will include the `for each row` syntax.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在触发器中，对于每一行 ❸ 被插入到`payable`表中时，MySQL会执行`begin`和`end`语句之间的代码。所有触发器都会包含`for each
    row`语法。
- en: 'You insert a row into the `payable_audit` table with an `insert` statement
    that calls three functions: `now()` to get the current date and time; `user()`
    to get the username of the user who inserted the row; and `concat()` to build
    a string describing the data that was inserted into the `payable` table ❹.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过一个`insert`语句插入一行数据到`payable_audit`表中，该语句调用了三个函数：`now()`用于获取当前日期和时间；`user()`用于获取插入该行的用户的用户名；`concat()`用于构建一个描述插入到`payable`表中数据的字符串
    ❹。
- en: When writing triggers, you use the `new` keyword to access the new values being
    inserted into the table ❺. For example, you got the new `payable_id` value by
    referencing `new.payable_id`, and the new `company` value by referencing `new.company`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写触发器时，你使用`new`关键字来访问插入到表中的新值 ❺。例如，你可以通过引用`new.payable_id`来获取新的`payable_id`值，通过引用`new.company`来获取新的`company`值。
- en: 'Now that you have the trigger in place, try inserting a row into the `payable`
    table to see if the new row automatically gets tracked in the `payable_audit`
    table:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经设置了触发器，尝试向`payable`表中插入一行数据，看看新的行是否会自动在`payable_audit`表中被跟踪：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The results show that your trigger worked. Inserting a new row into the `payable`
    table caused your `tr_payable_ai` trigger to fire, which inserted a row into your
    `payable_audit` audit table:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示触发器生效了。向 `payable` 表插入新行导致你的 `tr_payable_ai` 触发器被触发，从而向你的 `payable_audit`
    审计表插入了一行：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `audit_datetime` column shows the date and time that the row was inserted.
    The `audit_user` column shows the username and the host of the user who inserted
    the row (the *host* is the server where the MySQL database resides). The `audit_change`
    column contains a description of the added row you built with the `concat()` function.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`audit_datetime` 列显示了行被插入的日期和时间。`audit_user` 列显示了插入该行的用户的用户名和主机（*主机* 是 MySQL
    数据库所在的服务器）。`audit_change` 列包含了使用 `concat()` 函数构建的新增行的描述。'
- en: After Delete Triggers
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除后触发器
- en: Now you’ll write an *after delete* trigger (specified in code with the suffix
    `_ad`) that will log any rows that are deleted from the `payable` table to the
    `payable_audit` table ([Listing 12-2](#listing12-2)).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将编写一个 *删除后* 触发器（在代码中以 `_ad` 后缀表示），它会将从 `payable` 表中删除的任何行记录到 `payable_audit`
    表中（[列表 12-2](#listing12-2)）。
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 12-2: Creating an after delete trigger'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 12-2：创建一个删除后触发器
- en: The `delete` trigger looks similar to the `insert` trigger except for a few
    differences; namely, you used the `old` keyword ❶ instead of `new`. Since this
    trigger fires when a row is deleted, there are only `old` values for the columns.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`delete` 触发器看起来与 `insert` 触发器类似，但有一些不同之处；即你使用了 `old` 关键字 ❶ 而不是 `new`。由于该触发器在行被删除时触发，因此列只有
    `old` 值。'
- en: 'With your after delete trigger in place, delete a row from the `payable` table
    and see if the deletion gets logged in the `payable_audit` table:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在你设置好删除触发器后，从 `payable` 表中删除一行，看看删除是否会记录到 `payable_audit` 表中：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The results are:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The trigger worked! The `payable_audit` table still contains the row you inserted
    into the `payable` table, but you also have a row that tracked the deletion.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 触发器工作了！`payable_audit` 表仍然包含你插入到 `payable` 表中的行，但你也有一行记录了删除操作。
- en: Regardless of whether rows get inserted or deleted, you’re logging the changes
    to the same `payable_audit` table. You included the text `New row` or `Deleted
    row` as part of your `audit_change` column value to clarify the action taken.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是插入行还是删除行，你都将更改记录到同一个 `payable_audit` 表中。你将文本 `New row` 或 `Deleted row` 作为
    `audit_change` 列值的一部分，以明确所执行的操作。
- en: After Update Triggers
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新后触发器
- en: To write an *after* *update* trigger (`_au`) that will log any rows that are
    updated in the `payable` table to the `payable_audit` table, enter the code in
    [Listing 12-3](#listing12-3).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写一个 *更新后* 触发器（`_au`），它将记录在 `payable` 表中更新的任何行到 `payable_audit` 表中，请在 [列表 12-3](#listing12-3)
    中输入代码。
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Listing 12-3: Creating an after update trigger'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 12-3：创建一个更新后的触发器
- en: You declare this trigger to fire after an update to the `payable` table. When
    you update a row in a table, you can update one or more of its columns. You design
    your after update trigger to show only the column values that changed in the `payable`
    table. For example, if you didn’t change the `service` column, you won’t include
    any text about the `service` column in the `payable_audit` table.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你声明此触发器在 `payable` 表更新后触发。当你更新表中的一行时，你可以更新其中一个或多个列。你设计的更新后触发器仅显示 `payable` 表中发生变化的列值。例如，如果你没有更改
    `service` 列，你就不会在 `payable_audit` 表中包含任何关于 `service` 列的文本。
- en: You create a user variable called `@change_msg` ❶ (for *change message*) that
    you use to build a string that contains a list of every updated column. You check
    whether each column in the `payable` table has changed. If the old `company` column
    value is different from the new `company` column value, you add the text `Company
    changed from` `old value` `to` `new value` to the `@change_msg` variable ❷. You
    then do the same thing with the `amount` and `service` columns, adjusting the
    message text accordingly. When you’re done, the value of `@change_msg` is inserted
    into the `audit_change` column of the `payable_audit` table ❸.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建了一个名为 `@change_msg` 的用户变量 ❶（用于 *更改消息*），它用来构建一个包含每个更新列的列表的字符串。你检查 `payable`
    表中的每个列是否发生了变化。如果旧的 `company` 列值与新的 `company` 列值不同，你会将文本 `Company changed from`
    `old value` `to` `new value` 添加到 `@change_msg` 变量 ❷。然后，你对 `amount` 和 `service`
    列做同样的处理，调整消息文本。完成后，`@change_msg` 的值被插入到 `payable_audit` 表的 `audit_change` 列中 ❸。
- en: 'With your after update trigger in place, see what happens when a user updates
    a row in the `payable` table:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好更新后触发器后，看看当用户更新 `payable` 表中的一行时会发生什么：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The first two rows in the `payable_audit` table are still in the results, along
    with a new row that tracked the `update` statement:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`payable_audit`表中的前两行数据仍然出现在结果中，同时还新增了一行，记录了`update`语句的操作：'
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It seems that a user named `larry@localhost` updated a row, changed the `amount`
    to $100,000, and changed the `company` that will be paid to `House of Larry`.
    Hmmm . . .
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来有一个名为`larry@localhost`的用户更新了一行数据，将`amount`更改为$100,000，并将将支付对象的`company`更改为`House
    of Larry`。嗯……
- en: Triggers That Affect Data
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 影响数据的触发器
- en: You can also write triggers that fire *before* rows are changed in a table,
    to change the data that gets written to tables or prevent rows from being inserted
    or deleted. This can help improve the quality of your data before you save it
    to the database.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以编写触发器，在行被更改之前触发，以更改写入表中的数据或防止插入或删除行。这有助于在将数据保存到数据库之前提高数据的质量。
- en: 'Create a `credit` table in the `bank` database that will store customers and
    their credit scores:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在`bank`数据库中创建一个`credit`表，用来存储客户及其信用分数：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As with after triggers, there are three before triggers that will fire before
    a row is inserted, deleted, or updated.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 和后触发器一样，插入前、删除前和更新前的三个触发器会在行被插入、删除或更新之前触发。
- en: Before Insert Triggers
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插入前触发器
- en: The *before insert* trigger (`_bi`) fires before a new row is inserted. [Listing
    12-4](#listing12-4) shows how to write a before insert trigger to make sure no
    scores outside of the 300–850 range (the lowest possible credit score and the
    highest) get inserted into the `credit` table.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*插入前*触发器（`_bi`）在插入新行之前触发。[列表 12-4](#listing12-4)展示了如何编写一个插入前触发器，以确保不会有低于300或高于850的信用分数（即最低信用分数和最高信用分数）被插入到`credit`表中。'
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Listing 12-4: Creating a before insert trigger'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 12-4：创建插入前触发器
- en: First, you name the trigger `tr_credit_bi` ❶ and define it as a `before insert`
    trigger ❷ so that it will fire before rows are inserted into the `credit` table.
    Because this is an insert trigger, you can take advantage of the `new` keyword
    by checking if `new.credit_score`—the value about to be inserted into the `credit`
    table—is less than 300\. If so, you set it to exactly `300` ❸. You do a similar
    check for credit scores over 850, changing their value to exactly `850` ❹.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将触发器命名为`tr_credit_bi` ❶，并定义为`插入前`触发器 ❷，这样它将在行插入到`credit`表之前触发。由于这是一个插入触发器，你可以利用`new`关键字检查即将插入`credit`表中的`new.credit_score`值是否小于300。如果是这样，你将其设置为`300`
    ❸。对于超过850的信用分数，你也会做类似的检查，将其值更改为`850` ❹。
- en: 'Insert some data into the `credit` table and see what effect your trigger has:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 向`credit`表插入一些数据，看看你的触发器有什么效果：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now take a look at the data in the `credit` table:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在查看`credit`表中的数据：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The result is:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Your trigger worked. It changed the credit score for Milton Megabucks from `987`
    to `850` and the credit score for Patti Po from `145` to `300` just before those
    values were inserted into the `credit` table.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你的触发器起作用了。它将Milton Megabucks的信用分数从`987`改为`850`，并将Patti Po的信用分数从`145`改为`300`，这两个值在它们被插入到`credit`表之前就已发生变化。
- en: Before Update Triggers
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新前触发器
- en: The *before update* trigger (`_bu`) fires before a table is updated. You already
    wrote a trigger that prevents an `insert` statement from setting a credit score
    outside of the 300–850 range, but it’s possible that an `update` statement could
    update a credit score value outside of that range too. [Listing 12-5](#listing12-5)
    shows how to create a `before` `update` trigger to solve this.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*更新前*触发器（`_bu`）在表更新之前触发。你已经编写了一个触发器，防止`insert`语句将信用分数设置为低于300或高于850的值，但有可能`update`语句也会将信用分数更新到这个范围之外。[列表
    12-5](#listing12-5)展示了如何创建一个`before` `update`触发器来解决这个问题。'
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Listing 12-5: Creating a before update trigger'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 12-5：创建更新前触发器
- en: 'Update a row to test your trigger:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 更新一行以测试你的触发器：
- en: '[PRE17]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now take a look at the data in the `credit` table:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在查看`credit`表中的数据：
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The result is:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: It worked. The trigger would not let you update the credit score for `Vinny
    Middle-Class` to `1111`. Instead, it set the value to `850` before updating the
    row in the table.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 它起作用了。触发器不允许你将`Vinny Middle-Class`的信用分数更新为`1111`。相反，在更新该行数据之前，它将值设置为`850`。
- en: Before Delete Triggers
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除前触发器
- en: Lastly, a *before delete* trigger (`_bd`) will fire before a row is deleted
    from a table. You can use a before delete trigger as a check before you allow
    the row to be deleted.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一个*删除前*触发器（`_bd`）会在行被从表中删除之前触发。你可以使用删除前触发器作为检查，在允许删除行之前进行验证。
- en: Say your bank manager asked you to write a trigger that prevents users from
    deleting any customers from the `credit` table that have a credit score over 750\.
    You can achieve this by writing a before delete trigger as shown in [Listing 12-6](#listing12-6).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的银行经理要求你编写一个触发器，防止用户删除`credit`表中信用评分超过750的客户。你可以通过编写一个删除前触发器来实现这一点，如[列表12-6](#listing12-6)所示。
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Listing 12-6: Creating a before delete trigger'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 列表12-6：创建一个删除前触发器
- en: If the credit score of the row you’re about to delete is over 750, the trigger
    returns an error ❶. You use a `signal` statement, which handles returning an error,
    followed by the `sqlstate` keyword and code. A *sqlstate code* is a five-character
    code that identifies a particular error or a warning. Since you’re creating your
    own error, you use `45000`, which represents a user-defined error. Then, you define
    the `message_text` to display your error message.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你即将删除的行的信用评分超过750，触发器会返回错误❶。你使用`signal`语句来处理错误返回，后面跟着`sqlstate`关键字和代码。*sqlstate代码*是一个五个字符的代码，用于标识特定的错误或警告。由于你正在创建自己的错误，你使用`45000`，它代表一个用户定义的错误。然后，你定义`message_text`来显示你的错误信息。
- en: 'Test your trigger by deleting some rows from the `credit` table:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从`credit`表中删除一些行来测试你的触发器：
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Since customer `1` has a credit score of 850, the result is:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 由于客户`1`的信用评分为850，因此结果是：
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Your trigger worked. It prevented the deletion of the row because the credit
    score was over 750.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你的触发器起作用了。它阻止了删除该行，因为信用评分超过了750。
- en: 'Now delete the row for customer `2`, who has a credit score of 300:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在删除客户`2`的行，他的信用评分为300：
- en: '[PRE23]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You get a message back informing you that the row was deleted:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你会收到一条消息，告知你该行已被删除：
- en: '[PRE24]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Your trigger is working as you intended. It allowed you to delete the row for
    customer `2` because their credit score was not more than 750, but prevented you
    from deleting customer `1` because their credit score was over 750.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你的触发器按预期工作。它允许你删除客户`2`的行，因为他们的信用评分不超过750，但阻止你删除客户`1`的行，因为他们的信用评分超过了750。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you created triggers that automatically fire and perform tasks
    you define. You learned the differences between before and after triggers, and
    the three types of each. You used triggers to track changes to tables, prevent
    particular rows from being deleted, and control ranges of allowed values.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你创建了触发器，这些触发器会自动触发并执行你定义的任务。你了解了前触发器和后触发器之间的区别，以及每种触发器的三种类型。你使用触发器来跟踪表的变化，防止特定行被删除，并控制允许值的范围。
- en: In the next chapter, you’ll learn how to use MySQL events to schedule tasks.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用MySQL事件来调度任务。
