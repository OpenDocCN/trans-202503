- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Introduction to SQL
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: SQL简介
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: To select data from a MySQL database, you’ll use *Structured Query Language*
    *(SQL)*. SQL is the standard language for querying and managing data in an RDBMS
    like MySQL.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要从MySQL数据库中选择数据，你将使用*结构化查询语言*（*SQL*）。SQL是查询和管理像MySQL这样的关系数据库管理系统（RDBMS）中的数据的标准语言。
- en: SQL commands can be categorized into *Data Definition Language* *(DDL)* statements
    and *Data Manipulation Language* *(DML)* statements. So far, you’ve been using
    DDL commands like `create database`, `create table`, and `drop table` to *define*
    your databases and tables.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: SQL命令可以分为*数据定义语言*（*DDL*）语句和*数据操作语言*（*DML*）语句。到目前为止，你一直在使用DDL命令，如 `create database`、`create
    table` 和 `drop table` 来*定义*你的数据库和表格。
- en: DML commands, on the other hand, are used to *manipulate* the data in your existing
    databases and tables. In this chapter, you’ll use the DML `select` command to
    retrieve data from a table. You’ll also learn how to specify an order for MySQL
    to sort your results and how to deal with null values in your table columns.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: DML命令则用于*操作*现有数据库和表中的数据。在本章中，你将使用DML `select` 命令从表中检索数据。你还将学习如何为MySQL指定排序顺序，以及如何处理表列中的空值。
- en: Querying Data from a Table
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从表中查询数据
- en: A *query* is a request for information from a database table or group of tables.
    To specify the information you want to retrieve from the table, use the `select`
    command, as shown in [Listing 3-1](#listing3-1).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*查询*是从数据库表或一组表中请求信息。要指定你希望从表中检索的信息，使用 `select` 命令，如 [列表 3-1](#listing3-1) 中所示。'
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 3-1: Using `select` to display data from the `continent` table'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '列表 3-1: 使用 `select` 显示 `continent` 表中的数据'
- en: Here you’re querying the `continent` table (as indicated by the `from` keyword),
    which contains information about each continent’s name and population. Using the
    `select` command, you specify that you want to return data from the `continent_id`,
    `continent_name`, and `population` columns. This is known as a `select` statement.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你正在查询 `continent` 表（由 `from` 关键字指示），该表包含每个洲的名称和人口信息。通过使用 `select` 命令，你指定了要从
    `continent_id`、`continent_name` 和 `population` 列返回数据。这被称为 `select` 语句。
- en: '[Listing 3-2](#listing3-2) shows the results of running the `select` statement.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 3-2](#listing3-2) 显示了执行 `select` 语句的结果。'
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 3-2: Results of running the `select` statement'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '列表 3-2: 执行 `select` 语句的结果'
- en: The query returned a list of all seven continents, displaying each continent’s
    ID, name, and population.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 查询返回了所有七大洲的列表，显示了每个洲的ID、名称和人口。
- en: 'In order to show the data from only one continent—Asia, for example—you can
    add a `where` clause to the end of your previous code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了只显示一个洲的数据——例如亚洲，你可以在之前的代码末尾添加一个 `where` 子句：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A `where` clause filters the results by applying conditions to the `select`
    statement. This query finds the only row in the table where the value of the `continent_name`
    column equals `Asia` and displays the following result:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`where` 子句通过对 `select` 语句应用条件来过滤结果。此查询查找表中 `continent_name` 列的值等于 `Asia` 的唯一一行，并显示以下结果：'
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now change the `select` statement to select only the `population` column:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将 `select` 语句更改为仅选择 `population` 列：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The query now returns one column (`population`) for one row (`Asia`):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 查询现在返回一列（`population`）和一行（`Asia`）：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `continent_id` and `continent_name` values don’t appear in your result set
    because you didn’t select them in the SQL query.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`continent_id` 和 `continent_name` 的值未出现在你的结果集中，因为你在SQL查询中没有选择它们。'
- en: Using the Wildcard Character
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用通配符字符
- en: 'The asterisk wildcard character (`*`) in SQL allows you to select all of the
    columns in a table without having to type all of their names in your query:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: SQL中的星号通配符字符（`*`）允许你选择表中的所有列，而不必在查询中输入所有列名：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This query returns all three columns from the `continent` table. The results
    are the same as those for [Listing 3-1](#listing3-1), where you individually listed
    the three column names.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询返回 `continent` 表中的所有三列。结果与 [列表 3-1](#listing3-1) 相同，其中你单独列出了三列名称。
- en: Ordering Rows
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排序行
- en: 'When you query data from your database, you’ll often want to see the results
    in a particular order. To do that, add an `order by` clause to your SQL query:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从数据库查询数据时，通常希望按特定顺序查看结果。为此，在SQL查询中添加 `order by` 子句：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here you select all of the columns in the `continent` table and order the results
    alphabetically by the values in the `continent_name` column.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你选择了`continent`表中的所有列，并根据`continent_name`列中的值按字母顺序排列结果。
- en: 'The results are as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Adding `order by` `continent_name` results in an alphabetized list, regardless
    of the values of the `continent_id` or `population` columns. MySQL ordered the
    rows alphabetically because `continent_name` is defined as a column that stores
    alphanumeric characters.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`order by` `continent_name`将按字母顺序列出结果，而不管`continent_id`或`population`列的值是什么。MySQL按字母顺序排序行，因为`continent_name`被定义为存储字母数字字符的列。
- en: 'MySQL can also order columns with integer data types. You can specify whether
    you want your results sorted in ascending (lowest to highest) or descending (highest
    to lowest) order using the `asc` and `desc` keywords:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL也可以对整数数据类型的列进行排序。你可以通过`asc`和`desc`关键字指定结果是按升序（从低到高）还是降序（从高到低）排序：
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this example, you have MySQL order the results by `population` and sort the
    values in descending order (`desc`) order.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你让MySQL根据`population`排序，并按降序（`desc`）排列值。
- en: 'The results are as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The query returns all seven rows because you didn’t filter the results with
    a `where` clause. Now the data is displayed in descending order based on the `population`
    column instead of alphabetically based on the `continent_name` column.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 查询返回所有七行数据，因为你没有使用`where`子句来过滤结果。现在数据按`population`列的降序排列，而不是按`continent_name`列的字母顺序排列。
- en: Formatting SQL Code
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL代码格式化
- en: 'So far, the SQL you’ve seen has been in a nice, readable format:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你看到的SQL格式很好，容易阅读：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Notice how the column names and the table name all align vertically. It’s a
    good idea to write SQL statements in a neat, maintainable format like this, but
    MySQL will also allow you to write SQL statements in less organized ways. For
    example, you can write the code from [Listing 3-1](#listing3-1) on only one line:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意列名和表名是如何垂直对齐的。像这样以整洁、可维护的格式编写SQL语句是个好主意，但MySQL也允许你以不太规范的方式编写SQL语句。例如，你可以将[示例
    3-1](#listing3-1)中的代码写成一行：
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Or you can separate the `select` and `from` statements, like so:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你也可以将`select`和`from`语句分开写，如下所示：
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Both options return the same results as [Listing 3-1](#listing3-1), though your
    SQL might be a little harder for people to understand.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 两种选项返回与[示例 3-1](#listing3-1)相同的结果，尽管你的SQL可能对于其他人来说稍微难以理解。
- en: Readable code is important for the maintainability of your codebase, even though
    MySQL will run less readable code without issue. It might be tempting to just
    get the code working and then move on to the next task, but writing the code is
    only the first part of your job. Take the time to make your code readable, and
    your future self (or whoever will be maintaining the code) will thank you.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 可读的代码对于代码库的可维护性非常重要，即使MySQL会正常运行不太可读的代码。虽然可能会有诱惑，只是让代码运行起来然后继续做下一个任务，但编写代码仅仅是你的工作的一部分。花时间让代码更易读，你的未来自己（或将来会维护代码的人）会感谢你。
- en: Let’s look at some other SQL code conventions you might see.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下你可能会遇到的其他SQL代码约定。
- en: Uppercase Keywords
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 大写关键字
- en: 'Some developers use uppercase for MySQL keywords. For example, they might write
    [Listing 3-1](#listing3-1) like this, with the words `select` and `from` in uppercase:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一些开发者使用大写字母书写MySQL关键字。例如，他们可能会像这样将[示例 3-1](#listing3-1)中的`select`和`from`写成大写：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Similarly, some developers might format a `create table` statement with multiple
    phrases in uppercase:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，一些开发者可能会将`create table`语句中的多个词组写成大写：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, `create` `table`, `unique`, `primary` `key`, `foreign` `key`, and `references`
    have all been capitalized for readability. Some MySQL developers would capitalize
    the data types `int` and `varchar` as well. If you find using uppercase for keywords
    is beneficial, feel free to do so.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`create` `table`、`unique`、`primary` `key`、`foreign` `key`和`references`都已被大写化以提高可读性。一些MySQL开发者也会将数据类型`int`和`varchar`大写。如果你觉得使用大写字母对关键字有帮助，可以随意这样做。
- en: If you are working with an existing codebase, it’s best to be consistent and
    follow the coding style precedent that has been set. If you work at a company
    that has formal style conventions, you should follow them. Otherwise, choose what
    works best for you. You’ll get the same results either way.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在处理现有的代码库，最好保持一致，并遵循已有的编码风格。如果你在一家公司工作，且公司有正式的编码风格规范，你应当遵循这些规范。否则，选择最适合你的方式。无论如何，你都会得到相同的结果。
- en: Backticks
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 反引号
- en: 'If you maintain SQL that other developers have written, you may encounter SQL
    statements that use backticks (`` ` ``):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你维护其他开发者编写的SQL代码，你可能会遇到使用反引号（`` ` ``）的SQL语句：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This query selects all of the columns in the `continent` table, surrounding
    the column names and the table name with backticks. In this example, the statement
    runs just as well without the backticks.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询选择了`continent`表中的所有列，并将列名和表名用反引号括起来。在这个例子中，即使没有反引号，语句也可以正常运行。
- en: Backticks allow you to get around some of MySQL’s rules for naming tables and
    columns. For example, you might have noticed that when column names consist of
    more than one word, I’ve used an underscore between the words instead of a space,
    like `continent_id`. If you wrap column names in backticks, however, you don’t
    need to use underscores; you can name a column `continent id` rather than `continent_id`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 反引号允许你绕过MySQL在命名表和列时的一些规则。例如，你可能注意到，当列名包含多个单词时，我使用了下划线连接这些单词，而不是空格，比如`continent_id`。然而，如果你将列名用反引号括起来，你就不需要使用下划线了；你可以将列命名为`continent
    id`，而不是`continent_id`。
- en: 'Normally, if you were to name a table or column `select`, you’d receive an
    error message because `select` is a MySQL *reserved word*; that is, it has a dedicated
    meaning in SQL. However, if you wrap `select` in backticks, the query will run
    without error:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，如果你将一个表或列命名为`select`，你会收到一个错误信息，因为`select`是MySQL的*保留字*；也就是说，它在SQL中有一个专门的含义。然而，如果你将`select`用反引号括起来，查询将不会报错：
- en: '[PRE17]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this `select * from` statement, you’re selecting all columns within the `select`
    table.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`select * from`语句中，你正在选择`select`表中的所有列。
- en: Although MySQL will run code like this, I recommend avoiding backticks, as your
    code will be more maintainable and easier to type without them. In the future,
    another developer who needs to make a change to this query might be confused by
    a table named `select` or a table with spaces in its name. Your goal should always
    be to write code that is simple and well organized.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管MySQL会运行像这样的代码，但我建议避免使用反引号，因为没有它们你的代码会更易于维护且更易于输入。未来，其他需要更改此查询的开发者可能会被名为`select`的表或表名中带有空格的名称所困惑。你的目标应该始终是编写简单且结构良好的代码。
- en: Code Comments
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码注释
- en: Comments are lines of explanatory text that you can add to your code to make
    it easier to understand. They can help you or other developers maintain the code
    in the future. Oftentimes, comments clarify complex SQL statements or point out
    anything about the table or data that’s out of the ordinary.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注释是你可以添加到代码中的解释性文本，以帮助理解代码。它们能帮助你或其他开发者在未来维护代码。通常，注释用于阐明复杂的SQL语句，或者指出表或数据中异常的部分。
- en: To add single-line comments, use two hyphens followed by a space (`--` ). This
    syntax tells MySQL that the rest of the line is a comment.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加单行注释，请使用两个连字符后跟一个空格（`--`）。这种语法告诉MySQL该行的其余部分是注释。
- en: 'This SQL query includes a one-line comment at the top:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个SQL查询在顶部包含了一条单行注释：
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can use the same syntax to add a comment at the end of a line of SQL:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用相同的语法在SQL语句的末尾添加注释：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this code, the comment for the `continent_name` column lets developers know
    that the names are displayed in English.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，`continent_name`列的注释让开发者知道列中的名称是用英语显示的。
- en: 'To add multiline comments, use `/*` at the beginning of the comment and `*/`
    at the end:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加多行注释，请在注释的开头使用`/*`，在结尾使用`*/`：
- en: '[PRE20]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This two-line comment explains the query and says how often the table is updated.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个两行的注释解释了查询并说明了表的更新频率。
- en: 'The syntax for inline comments is similar:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 内联注释的语法类似：
- en: '[PRE21]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'There are some special uses for inline comments. For example, if you maintain
    code that has been written by others, you might notice what looks like cryptic
    inline comments:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 内联注释有一些特殊用途。例如，如果你维护由他人编写的代码，你可能会注意到看起来像是神秘的内联注释：
- en: '[PRE22]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `/*+ no_index(employee idx1) */` in the first line is an *optimizer hint*,
    which uses the inline comment syntax with a plus sign after the `/*`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行中的`/*+ no_index(employee idx1) */`是一个*优化器提示*，它使用了带加号的内联注释语法`/*`。
- en: When you run a query, MySQL’s query optimizer tries to determine the fastest
    way to execute it. For example, if there are indexes on the `employee` table,
    would it be faster to use the indexes to access the data, or do the tables have
    so few rows that using the indexes would actually be slower?
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行查询时，MySQL的查询优化器会尝试确定执行查询的最快方法。例如，如果`employee`表上有索引，使用索引来访问数据会更快，还是因为表中行数太少，使用索引反而会变得更慢？
- en: The query optimizer usually does a good job of coming up with query plans, comparing
    them, and then executing the fastest plan. But there are times when you’ll want
    to give your own instructions—hints—about the most efficient way to execute the
    query.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 查询优化器通常能很好地生成查询计划，比较它们，然后执行最快的计划。但有时你可能希望给出自己的指示——提示——来指定执行查询的最有效方法。
- en: The hint in the preceding example tells the optimizer not to use the `idx1`
    index on the `employee` table.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例中的提示告诉优化器不要在`employee`表上使用`idx1`索引。
- en: Query optimization is a vast topic and we’ve barely scratched the surface, but
    if you encounter the `/*+` . . . `*/` syntax, just know that it allows you to
    provide hints to MySQL.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 查询优化是一个庞大的话题，我们仅仅触及了表面，但如果你遇到`/*+` . . . `*/`语法，只需要知道它允许你向MySQL提供提示。
- en: As you can see, a well-placed, descriptive comment will save time and aggravation.
    A quick explanation about why you used a particular approach can spare another
    developer from having to research the same issue, or jog your own memory if you’ll
    be the one maintaining the code. However, avoid the temptation to add comments
    that state the obvious; if a comment won’t make the SQL more understandable, you
    shouldn’t add it. Also, it’s important to update comments as you update your code.
    Comments that aren’t up to date and are no longer relevant don’t serve a purpose,
    and might confuse other developers or your future self.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，一个恰当的位置、描述性的注释将节省时间并减少烦恼。对你为什么使用某种方法的简短解释，可以避免其他开发者重复研究相同的问题，或者在你自己维护代码时帮助你回忆起相关内容。然而，要避免添加显而易见的注释；如果某个注释不会让SQL更加易懂，就不应该添加它。同时，随着代码的更新，也要更新注释。不再相关且未更新的注释没有任何作用，可能会让其他开发者或将来的你产生困惑。
- en: Null Values
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空值
- en: As discussed in [Chapter 2](c02.xhtml), `null` represents a missing or unknown
    value. MySQL has special syntax, including `is null` and `is not null`, to help
    handle null values in your data.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第2章](c02.xhtml)中所讨论的，`null`表示缺失或未知的值。MySQL有特殊的语法，包括`is null`和`is not null`，用于处理数据中的null值。
- en: 'Consider a table called `unemployed` that has two columns: `region_id` and
    `unemployed`. Each row represents a region and tells you how many people are unemployed
    in that region. Look at the full table using `select * from`, like so:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一个名为`unemployed`的表，它有两列：`region_id`和`unemployed`。每一行表示一个地区，告诉你该地区有多少人失业。使用`select
    * from`查看完整表格，如下所示：
- en: '[PRE23]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The results are as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE24]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Regions 1 and 2 have reported their number of unemployed people, but region
    3 hasn’t done so yet, so the `unemployed` column for region 3 is set to the `null`
    value. You wouldn’t want to use `0` here, because that would mean there are no
    unemployed people in region 3.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 区域1和区域2已报告其失业人数，但区域3尚未报告，因此区域3的`unemployed`列被设置为`null`值。你不会想在这里使用`0`，因为那样意味着区域3没有失业的人。
- en: 'To show only the rows for regions that have an `unemployed` value of `null`,
    use the `where` clause with `is null`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅显示那些`unemployed`值为`null`的地区的行，可以在`where`子句中使用`is null`：
- en: '[PRE25]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The result is:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE26]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'On the other hand, if you wanted to *exclude* rows that have an `unemployed`
    value of `null` in order to see only the data that has already been reported,
    replace `is null` with `is not null` in the `where` clause, like so:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果你想要*排除*那些`unemployed`值为`null`的行，只查看已经报告的数据，可以在`where`子句中将`is null`替换为`is
    not null`，如下面所示：
- en: '[PRE27]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The results are as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE28]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Using this syntax with null values can help you filter your table data so that
    MySQL returns only the most meaningful results.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此语法与null值结合，可以帮助你筛选表格数据，从而让MySQL仅返回最有意义的结果。
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to use the `select` statement and the wildcard
    character to retrieve data from a table, and you saw that MySQL can return results
    in an order you specify. You also looked at ways to format your code for readability
    and clarity, including adding comments to your SQL statements to make maintaining
    the code easier. Finally, you saw how you might handle null values in your data.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用`select`语句和通配符来从表格中检索数据，并且你看到MySQL可以按照你指定的顺序返回结果。你还学习了如何格式化代码以提高可读性和清晰度，包括在SQL语句中添加注释以便于代码的维护。最后，你还了解了如何处理数据中的null值。
- en: '[Chapter 4](c04.xhtml) is all about MySQL data types. So far, the tables you’ve
    created have mainly used `int` to accept integer data or `varchar` to accept character
    data. Next, you’ll learn more about other MySQL data types for numeric and character
    data, as well as data types for dates and very large values.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[第4章](c04.xhtml)讲述的是MySQL数据类型。到目前为止，你创建的表主要使用`int`来接受整数数据，或者使用`varchar`来接受字符数据。接下来，你将学习更多关于MySQL数据类型的内容，包括数值型和字符型数据类型，以及日期类型和非常大的值类型。'
