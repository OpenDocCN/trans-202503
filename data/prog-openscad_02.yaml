- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: More Ways to Transform Shapes
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 更多的形状变换方式
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: This chapter introduces a collection of transformation operations that allow
    you to have more control when creating complex shapes. You’ll learn how to rotate,
    reflect, and scale shapes; combine them with a shared hull; and round out their
    edges. These transformation operations will expand your modeling toolbox and allow
    you to create even more complex designs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了一系列变换操作，帮助你在创建复杂形状时拥有更多控制权。你将学习如何旋转、反射和缩放形状；如何将它们与共享的外壳结合；以及如何圆化它们的边缘。这些变换操作将扩展你的建模工具箱，使你能够创造出更加复杂的设计。
- en: OpenSCAD Shape Transformations
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenSCAD 形状变换
- en: 'First, you’ll learn how to use three transformation operations: `rotate`, `mirror`,
    and `resize`. A *transformation operation* is a bit of code that comes immediately
    before a shape to alter the shape’s position, size, or orientation. For illustrative
    purposes, we include a transparent gray outline in this chapter’s examples to
    indicate where the original, untransformed shape would have appeared.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将学习如何使用三种变换操作：`rotate`、`mirror` 和 `resize`。*变换操作*是一段紧接在形状之前的代码，用来改变形状的位置、大小或方向。为了说明目的，在本章的示例中，我们包括了一个透明的灰色轮廓，以指示原始的、未变换的形状应该出现的位置。
- en: Rotating Shapes with rotate
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 rotate 旋转形状
- en: By default, OpenSCAD draws shapes so they’re oriented in a certain way. It draws
    sphere shapes centered at (0, 0, 0), for example, and cube shapes with a single
    corner at (0, 0, 0). Sometimes, though, you’ll want your shape to have a different
    orientation.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，OpenSCAD 绘制的形状都是按某种特定方式定向的。例如，它绘制的球形是以 (0, 0, 0) 为中心，立方体的一个角落位于 (0, 0,
    0)。但是有时，你可能希望你的形状有不同的方向。
- en: One way to alter a shape’s default position is to *rotate* it. To rotate a shape,
    specify the angle of rotation around each of the three axes, and express the angles
    of rotation in degrees, which can be positive or negative.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 改变形状的默认位置的一种方法是*旋转*它。要旋转形状，需要指定围绕三个轴的旋转角度，并且这些旋转角度可以是正数也可以是负数，单位是度。
- en: 'The following code snippet rotates a cuboid 90 degrees around the x-axis ([Figure
    2-1](#figure2-1)):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将一个长方体围绕 x 轴旋转 90 度（[图 2-1](#figure2-1)）：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![f02001](image_fi/279547c02/f02001.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![f02001](image_fi/279547c02/f02001.png)'
- en: 'Figure 2-1: A cuboid rotated 90 degrees around the x-axis'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-1：一个围绕 x 轴旋转 90 度的长方体
- en: First, write the name of the transformation, and then inside the parentheses,
    provide `rotate` with a vector in square brackets (`[ ]`) to group together the
    three axes of rotation. The first element in the vector is the degree of rotation
    around the x-axis, the second is the degree of rotation around the y-axis, and
    the third is the degree of rotation around the z-axis. Next, write the code for
    the shape you want to rotate. As always, use a semicolon (`;`) to end the entire
    statement.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，写下变换的名称，然后在括号内，给 `rotate` 提供一个用方括号（`[ ]`）括起来的向量，以将三个旋转轴组合在一起。向量中的第一个元素是围绕
    x 轴的旋转角度，第二个是围绕 y 轴的旋转角度，第三个是围绕 z 轴的旋转角度。接着，编写你想要旋转的形状的代码。像往常一样，使用分号（`;`）结束整个语句。
- en: Because you’re rotating the shape 90 degrees around the x-axis, its position
    the x-axis stays fixed, and it gets a new position on the yz-plane.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你将形状围绕 x 轴旋转了 90 度，所以其在 x 轴上的位置保持不变，而它在 yz 平面上的位置发生了变化。
- en: 'The following code snippet rotates the same cuboid around the y-axis ([Figure
    2-2](#figure2-2)):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将相同的长方体围绕 y 轴旋转（[图 2-2](#figure2-2)）：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![f02002](image_fi/279547c02/f02002.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![f02002](image_fi/279547c02/f02002.png)'
- en: 'Figure 2-2: A cuboid rotated 180 degrees around the y-axis'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-2：一个围绕 y 轴旋转 180 度的长方体
- en: In this case, the shape’s position relative to the y-axis stays fixed, and its
    position on the xz-plane moves by 180 degrees.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，形状相对于 y 轴的位置保持不变，它在 xz 平面上的位置旋转了 180 度。
- en: 'You can also rotate a shape around two axes with a single operation, as in
    the following snippet ([Figure 2-3](#figure2-3)):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过一个操作围绕两个轴旋转形状，如下示例所示（[图 2-3](#figure2-3)）：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![f02003](image_fi/279547c02/f02003.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![f02003](image_fi/279547c02/f02003.png)'
- en: 'Figure 2-3: A cuboid rotated 90 degrees around the x-axis and 90 degrees around
    the z-axis'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-3：一个围绕 x 轴旋转 90 度，围绕 z 轴旋转 90 度的长方体
- en: 'This cuboid is rotated around both the x- and z-axes. You might find it easier
    to imagine this operation as two separate transformations: one that rotates the
    shape around the x-axis and one that rotates it around the z-axis. To rotate the
    shape counterclockwise by 90 degrees in both directions, set the angle of rotation
    for those axes to –90\.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个长方体绕x轴和z轴进行了旋转。你可以更容易地将这个操作想象成两个独立的变换：一个是绕x轴旋转，另一个是绕z轴旋转。要使形状在两个方向上逆时针旋转90度，设置这两个轴的旋转角度为–90\。
- en: 'Even though rotation around multiple axes is possible with the application
    of only one rotation operation, it’s best to separate the various rotations into
    individual, repeated transformations. This is because it is sometimes hard to
    predict which rotation will be applied first. Consider the difference in the location
    of the cuboid when the rotation around the z-axis is applied before the rotation
    around the x-axis ([Figure 2-4](#figure2-4)):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管通过只应用一次旋转操作可以实现绕多个轴的旋转，但最好将不同的旋转分成单独的、重复的变换。这是因为有时很难预测哪个旋转会首先应用。考虑一下，当绕z轴的旋转在绕x轴旋转之前应用时，长方体的位置差异（[图
    2-4](#figure2-4)）：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![f02004](image_fi/279547c02/f02004.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![f02004](image_fi/279547c02/f02004.png)'
- en: 'Figure 2-4: A cuboid rotated –90 degrees around the z-axis, then rotated –90
    degrees around the x-axis'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-4：一个绕z轴旋转–90度，然后绕x轴旋转–90度的长方体
- en: Explicitly applying multiple rotations in their intended order will result in
    shapes ending up exactly where you’d like them to be after the rotations are applied.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 按照预期顺序显式地应用多个旋转操作，将导致形状在旋转应用后精确地出现在你想要的位置。
- en: Reflecting Shapes with mirror
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用镜面反射形状
- en: 'Another way to change a shape’s default position is to *reflect* it across
    an imaginary 2D plane with the `mirror` transformation. As you might expect from
    the name of the operation, `mirror` creates a mirror-like reflection of your shape.
    The following statement reflects a truncated cone across the yz-plane ([Figure
    2-5](#figure2-5)):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 改变形状的默认位置的另一种方式是通过`mirror`变换将其*反射*到一个虚拟的二维平面上。正如你从操作名称中可以预期的那样，`mirror`会创建一个形状的镜像反射。以下语句将在yz平面上反射一个截头圆锥（[图
    2-5](#figure2-5)）：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![f02005](image_fi/279547c02/f02005.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![f02005](image_fi/279547c02/f02005.png)'
- en: 'Figure 2-5: A truncated cone reflected across the yz-plane via the vector [10,
    0, 0]'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-5：通过向量[10, 0, 0]在yz平面上反射的截头圆锥
- en: The vector you pass to `mirror` contains the x, y, and z coordinates that define
    an imaginary point. OpenSCAD then draws an imaginary line from the origin to that
    point and uses the 2D plane that is perpendicular to that line at the origin as
    the *mirror*, or plane of reflection.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你传递给`mirror`的向量包含了定义一个虚拟点的x、y、z坐标。OpenSCAD然后从原点画一条到该点的虚拟线，并使用与该线在原点处垂直的2D平面作为*镜面*或反射平面。
- en: To clarify this, [Figure 2-6](#figure2-6) shows the “mirror” as a semitransparent
    plane.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清楚地说明，[图 2-6](#figure2-6)将“镜面”显示为半透明的平面。
- en: '![f02006](image_fi/279547c02/f02006.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![f02006](image_fi/279547c02/f02006.png)'
- en: 'Figure 2-6: A truncated cone reflected across the yz-plane via the vector [10,
    0, 0]'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-6：通过向量[10, 0, 0]在yz平面上反射的截头圆锥
- en: The “mirror” is perpendicular to the vector, shown in green, drawn from (0,
    0, 0) to (10, 0, 0). Notice that you don’t have to use 10 as the x-axis value
    to create this mirror; any nonzero x-axis value would cause the mirror operation
    to behave the same way, as your goal is only to specify a vector that is perpendicular
    to the mirror. The *mirror plane* always contains the origin (0, 0, 0). In effect,
    the vector parameter of the `mirror` operation describes how the mirror is rotated.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: “镜面”与向量垂直，如绿色所示，连接从(0, 0, 0)到(10, 0, 0)的线。注意，创建这个镜面时并不需要使用10作为x轴的值；任何非零的x轴值都能使镜面操作表现相同，因为你的目标只是指定一个与镜面垂直的向量。*镜面平面*始终包含原点(0,
    0, 0)。实际上，`mirror`操作的向量参数描述了镜面是如何旋转的。
- en: 'The next statement reflects a cylinder across the xy-plane ([Figure 2-7](#figure2-7)):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下一条语句将圆柱体通过xy平面反射（[图 2-7](#figure2-7)）：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![f02007](image_fi/279547c02/f02007.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![f02007](image_fi/279547c02/f02007.png)'
- en: 'Figure 2-7: A cone reflected across the xy-plane via the vector [0, 0, 10]'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-7：通过向量[0, 0, 10]在xy平面上反射的圆锥体
- en: This example defines a point at (0, 0, 10), and the line from the defined point
    to the origin is perpendicular to the xy-plane. The `mirror` operation is particularly
    useful for quickly creating complex shapes that involve symmetry. Using the `mirror`
    operation in such cases may save you time, as you can focus on designing only
    one half of the object, and then use `mirror` to create the second half.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例定义了一个位于(0, 0, 10)的点，从定义的点到原点的直线垂直于xy平面。`mirror`操作特别适用于快速创建涉及对称的复杂形状。在这种情况下使用`mirror`操作可能会节省时间，因为你只需要设计对象的一半，然后使用`mirror`创建第二半。
- en: Note that the `mirror` operation does not copy the shape; it moves the shape
    into the mirrored position. If you want a fully symmetrical shape, first create
    the shape, and then repeat it with the `mirror` operation in front of it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`mirror`操作并不会复制形状；它将形状移动到镜像位置。如果你想要一个完全对称的形状，首先创建形状，然后在它前面使用`mirror`操作重复它。
- en: Scaling Shapes with resize
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`resize`缩放形状
- en: The `resize` operation allows you to stretch or shrink specific dimensions of
    individual shapes. When you resize a shape, you can specify its exact dimension
    along each axis. By stretching a sphere across a single axis, for example, you
    can turn it into an ellipsoid (an elongated sphere).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`resize`操作允许你拉伸或缩小单个形状的特定维度。当你调整形状的大小时，你可以指定每个轴上的确切尺寸。例如，通过将球体沿单一轴方向拉伸，你可以将它变成一个椭球体（一个被拉长的球体）。'
- en: 'The following code snippet uses `resize` to scale a sphere with a radius of
    1 into an ellipsoid ([Figure 2-8](#figure2-8)):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段使用`resize`将一个半径为1的球体缩放成椭球体（[图2-8](#figure2-8)）：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![f02008](image_fi/279547c02/f02008.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![f02008](image_fi/279547c02/f02008.png)'
- en: 'Figure 2-8: A sphere resized into an ellipsoid'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-8：一个被调整尺寸的球体
- en: Before writing the shape command, pass a vector to the `resize` operation to
    group together the new dimensions of the sphere along the x-, y-, and z-axes.
    As with all transformations, use a semicolon to end the entire statement.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写形状命令之前，将一个向量传递给`resize`操作，将球体在x、y和z轴上的新维度组合起来。与所有变换一样，使用分号结束整个语句。
- en: The new ellipsoid stretches 5 units on either side of the origin along the x-axis,
    5 units on either side of the origin along the y-axis, and 10 units on either
    side of the origin along the z-axis.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 新的椭球体沿x轴、y轴和z轴两侧分别拉伸5单位、5单位和10单位。
- en: 'You could also use `resize` to transform a basic cylinder ([Figure 2-9](#figure2-9)):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`resize`来转换一个基本圆柱体（[图2-9](#figure2-9)）：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![f02009](image_fi/279547c02/f02009.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![f02009](image_fi/279547c02/f02009.png)'
- en: 'Figure 2-9: A resized cylinder'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-9：一个调整尺寸的圆柱体
- en: This statement resizes a basic cylinder with a height and two radii of 5 units
    so that the transformed cylinder stretches 10 units along the x-axis (through
    the origin), 5 units along the y-axis (also through the origin), and 20 units
    along the z-axis (from the origin).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 该语句调整了一个基本圆柱体的尺寸，圆柱体的高度和两个半径为5单位，使得变换后的圆柱体沿x轴（通过原点）拉伸10单位，沿y轴（同样通过原点）拉伸5单位，沿z轴（从原点开始）拉伸20单位。
- en: More Ways to Combine 3D Shapes
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多合并3D形状的方法
- en: 'In Chapter 1, you learned about three Boolean operations that allow you to
    combine multiple 3D shapes: `union`, `difference`, and `intersection`. You can
    also combine two shapes into one with the `hull` and `minkowski` operations.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章中，你学习了三种布尔操作，它们允许你合并多个3D形状：`union`、`difference`和`intersection`。你也可以使用`hull`和`minkowski`操作将两个形状合并成一个。
- en: Combining Shapes with hull
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`hull`合并形状
- en: 'The `hull` operation creates a convex *hull* (or skin) around two shapes. To
    understand this, imagine stretching a balloon tightly around two or more shapes
    in order to create a single shape. For example, the following code creates a balloon
    surrounding both a sphere and a cube ([Figure 2-10](#figure2-10)):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`hull`操作会在两个形状周围创建一个凸包（或外壳）。为了理解这一点，可以想象将气球紧紧地包围住两个或更多的形状，形成一个单一的形状。例如，以下代码创建了一个包围球体和立方体的气球（[图2-10](#figure2-10)）：'
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![f02010](image_fi/279547c02/f02010.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![f02010](image_fi/279547c02/f02010.png)'
- en: 'Figure 2-10: A hull stretched around a small cube and a big sphere'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-10：一个包围小立方体和大球体的凸包
- en: The `hull` operation has the same syntax as the Boolean operations described
    in Chapter 1. It can combine two or more shapes, and as with the `union` operation,
    the order of shapes does not matter.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`hull`操作与第一章中描述的布尔操作语法相同。它可以合并两个或更多的形状，与`union`操作一样，形状的顺序并不重要。'
- en: Combining Shapes with minkowski
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Minkowski 合并形状
- en: 'The `minkowski` operation creates a *Minkowski sum* of a collection of shapes.
    This means it wraps the edges of one shape with the characteristic of a second
    shape. The following example wraps a sphere around the edges of a cylinder to
    create rounded edges ([Figure 2-11](#figure2-11)):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`minkowski`操作创建了一种*Minkowski和*，即它将一个形状的边缘与第二个形状的特征相结合。以下示例将一个球体包裹在圆柱体的边缘，以创建圆角（[图
    2-11](#figure2-11)）：'
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![f02011](image_fi/279547c02/f02011.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![f02011](image_fi/279547c02/f02011.png)'
- en: 'Figure 2-11: A sphere used to smooth the corners of a cylinder'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-11：用球体平滑圆柱体的角落
- en: The `minkowski` operation also has the same syntax as the Boolean operations
    described in Chapter 1\. In this example, the edges of the cylinder become rounded
    edges because the smaller sphere has been embossed along the edges of the cylinder.
    It’s important to note that the `minkowski` operation produces a larger shape
    than the original cylinder, because wrapping the sphere around the original cylinder
    adds volume.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`minkowski`操作的语法与第1章描述的布尔操作相同。在这个例子中，由于较小的球体已经沿着圆柱体的边缘进行了浮雕处理，圆柱体的边缘变成了圆角。需要注意的是，`minkowski`操作会生成比原始圆柱体更大的形状，因为将球体包裹在原始圆柱体周围会增加体积。'
- en: Combining Transformations
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组合变换
- en: 'You can combine transformation operations by writing one operation in front
    of another. For example, the following code snippet applies the `rotate` operation
    before `translate` on each of three cylinders ([Figure 2-12](#figure2-12)):'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将一个操作写在另一个操作前面来组合变换操作。例如，以下代码片段在三个圆柱体上分别先应用`rotate`操作，再应用`translate`操作（[图
    2-12](#figure2-12)）：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![f02012](image_fi/279547c02/f02012.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![f02012](image_fi/279547c02/f02012.png)'
- en: 'Figure 2-12: Three cylinders, rotated and then translated'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-12：三个圆柱体，先旋转后平移
- en: 'OpenSCAD first executes the innermost transformation (the operation directly
    to the left of a shape), then applies the outermost transformation. If you applied
    the transformations in the reverse order, you’d get a different result. The next
    snippet applies the `translate` operation before the `rotate` operation ([Figure
    2-13](#figure2-13)):'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSCAD首先执行最内层的变换（直接位于形状左侧的操作），然后应用最外层的变换。如果您按相反顺序应用变换，结果将不同。以下代码片段在`rotate`操作之前应用了`translate`操作（[图
    2-13](#figure2-13)）：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![f02013](image_fi/279547c02/f02013.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![f02013](image_fi/279547c02/f02013.png)'
- en: 'Figure 2-13: Three cylinders, translated and then rotated'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-13：三个圆柱体，先平移后旋转
- en: You get different results because OpenSCAD applies operations in order, starting
    with the transformation operation closest to the shape.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 由于OpenSCAD按照顺序执行操作，从最接近形状的变换操作开始，您会得到不同的结果。
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter introduced several important operations for transforming shapes.
    You can now move, rotate, reflect, and resize shapes. You can also combine two
    shapes by forming a hull around them or by smoothing the corners of one shape
    with another.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了几种用于变换形状的重要操作。现在，您可以移动、旋转、反射和调整形状的大小。您还可以通过围绕两个形状形成外壳或通过用另一个形状平滑一个形状的角落来组合两个形状。
- en: 'Here are some important points to remember:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些需要记住的重要点：
- en: You can apply transformation operations to single shapes and combined shapes.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以对单个形状和组合形状应用变换操作。
- en: Combining shapes with the `union` operation can reduce the number of transformation
    operations that you need to apply to a complex design.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`union`操作组合形状可以减少您在复杂设计中需要应用的变换操作次数。
- en: Applying a series of `rotate` operations is often easier to manage than combining
    rotations into one `rotate` operation.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用一系列`rotate`操作通常比将多个旋转合并为一个`rotate`操作更容易管理。
- en: Reflecting combined shapes with `mirror` can save you time when you’re building
    symmetrical designs.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`mirror`反射组合形状可以节省时间，特别是在构建对称设计时。
- en: When you’re applying multiple transformation operations, order matters.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用多个变换操作时，顺序很重要。
- en: The transformation operation closest to the shape is applied first.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最接近形状的变换操作会首先被应用。
- en: In the next chapter, you’ll learn how to convert 2D shapes into 3D shapes, apply
    transformation operations to 2D shapes, and create surprisingly complex 3D shapes
    by combining and operating on basic 2D shapes.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何将2D形状转换为3D形状，如何对2D形状应用变换操作，以及通过组合和操作基本的2D形状创建出令人惊讶的复杂3D形状。
