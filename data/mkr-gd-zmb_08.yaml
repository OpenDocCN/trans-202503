- en: '**8**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**8**'
- en: '**BUILDING A CONTROL CENTER FOR YOUR BASE**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**为你的基地构建一个控制中心**'
- en: '![image](graphics/f0001-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f0001-01.jpg)'
- en: In this chapter, you’ll learn how to make an integrated control center using
    a Raspberry Pi computer interfaced with earlier projects from this book. The control
    center will allow you to monitor all of your alarm and surveillance devices on
    one screen so you’ll know instantly if a zombie has breached your compound ([Figure
    8-1](ch08.html#ch08fig1)). As an extra feature, you’ll learn how to add wireless
    connectivity to your control center.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何使用树莓派计算机与本书中早期的项目连接，制作一个集成控制中心。该控制中心将允许你在一个屏幕上监控所有警报和监控设备，这样你就能立即知道僵尸是否突破了你的防线（[图
    8-1](ch08.html#ch08fig1)）。作为额外功能，你将学习如何为控制中心添加无线连接功能。
- en: '![image](graphics/f08-01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f08-01.jpg)'
- en: 'Figure 8-1: A quiet night at the security desk'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-1：安全桌旁的宁静夜晚
- en: '**PROJECT 13: A RASPBERRY PI CONTROL CENTER**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**项目 13：树莓派控制中心**'
- en: 'In this project, you’ll connect the Raspberry Pi system of [Chapter 5](ch05.html#ch05)
    with the following Arduino monitoring devices developed earlier in the book:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将把 [第5章](ch05.html#ch05)的树莓派系统与本书前面开发的以下 Arduino 监控设备连接：
- en: '• “[Project 4: Battery Monitor](ch03.html#ch00lev1sec63)” on [page 53](ch03.html#page_53)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: • “[项目 4：电池监控器](ch03.html#ch00lev1sec63)” 在 [第53页](ch03.html#page_53)
- en: '• “[Project 6: PIR Zombie Detector](ch04.html#ch00lev1sec81)” on [page 72](ch04.html#page_72)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: • “[项目 6：PIR 僵尸探测器](ch04.html#ch00lev1sec81)” 在 [第72页](ch04.html#page_72)
- en: '• “[Project 10: Door Sensor](ch06.html#ch00lev1sec116)” on [page 112](ch06.html#page_112)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: • “[项目 10：门传感器](ch06.html#ch00lev1sec116)” 在 [第112页](ch06.html#page_112)
- en: '• “[Project 11: Quiet Fire Alarm](ch07.html#ch00lev1sec121)” on [page 120](ch07.html#page_120)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: • “[项目 11：静音火灾报警器](ch07.html#ch00lev1sec121)” 在 [第120页](ch07.html#page_120)
- en: '• “[Project 12: Temperature Alarm](ch07.html#ch00lev1sec130)” on [page 131](ch07.html#page_131)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: • “[项目 12：温度警报器](ch07.html#ch00lev1sec130)” 在 [第131页](ch07.html#page_131)
- en: We’ll link the two boards with USB cables, which we can later replace in Project
    14 with a wireless Bluetooth link. The Arduino will still be able to work without
    the Raspberry Pi after this wireless modification, but linking it to the Raspberry
    Pi will allow you to show the status of your sensors and alarms in a window on
    the Raspberry Pi. [Figure 8-2](ch08.html#ch08fig2) shows the setup; you can see
    the sensor status window in the center of the screen.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 USB 电缆连接这两个板，之后在第 14 项目中用无线蓝牙连接替代。无线改造后，Arduino 仍然可以在没有树莓派的情况下工作，但将其与树莓派连接可以让你在树莓派上显示传感器和警报的状态。
    [图 8-2](ch08.html#ch08fig2) 展示了这个设置，你可以看到屏幕中央的传感器状态窗口。
- en: '![image](graphics/f08-02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f08-02.jpg)'
- en: 'Figure 8-2: Raspberry Pi and Arduino working together'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-2：树莓派与 Arduino 协同工作
- en: '**WHAT YOU WILL NEED**'
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**你将需要的材料**'
- en: 'This project brings together the Raspberry Pi system of [Chapter 5](ch05.html#ch05)
    and most of the Arduino projects described in the book thus far. As such, all
    you will need is the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目将第 5 章的树莓派系统与本书至今为止描述的大多数 Arduino 项目结合起来。因此，你将需要以下材料：
- en: '![image](graphics/square.jpg) One or more of the previous Arduino projects'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](graphics/square.jpg) 一个或多个之前的 Arduino 项目'
- en: '![image](graphics/square.jpg) The Raspberry Pi system from [Chapter 5](ch05.html#ch05)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/square.jpg) 来自 [第5章](ch05.html#ch05)的树莓派系统'
- en: '![image](graphics/square.jpg) A USB lead/cable (of the same type used to program
    your Arduino project)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/square.jpg) 一个 USB 电缆（与用于编程 Arduino 项目的电缆相同类型）'
- en: '**CONSTRUCTION**'
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**构建**'
- en: Assuming that you have been slowly adding projects to your Arduino, the Arduino
    now has five projects attached to it. If you’re really prepared, you probably
    built these ages ago and have them stashed in your go bag, ready for the apocalypse.
    Either way, you should at least have the sensors you are interested in using.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经逐步为你的 Arduino 添加了项目，那么它现在连接了五个项目。如果你真的做好了准备，你可能早就把这些项目搭建好了，并将它们存放在你的求生包里，准备迎接末日。不管怎样，你至少应该有你感兴趣的传感器。
- en: If your Arduino projects and Raspberry Pi are already set up, you won’t need
    to do much construction to link them. You connect an Arduino project to the Raspberry
    Pi by plugging one end of the USB lead into the Pi and the other end into the
    Arduino. If your Raspberry Pi does not have any free USB ports, then you will
    need to add a USB hub to provide more ports.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的Arduino项目和树莓派已经设置好，那么连接它们时不需要做太多构建。你只需将USB线的一端插入树莓派，另一端插入Arduino，即可将Arduino项目连接到树莓派。如果你的树莓派没有空闲的USB端口，则需要添加一个USB集线器以提供更多端口。
- en: Now that you have linked your Arduino and your Raspberry Pi, you’ll need to
    program them. It’s best to program the Arduino from your regular computer before
    swapping the USB cable over to the Raspberry Pi, as programming the Arduino from
    the Raspberry Pi’s small screen can be frustrating.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经将Arduino和树莓派连接起来，你需要编程它们。最好先在你的常规计算机上编程Arduino，然后再将USB线换到树莓派上，因为从树莓派的小屏幕上编程Arduino可能会令人沮丧。
- en: '[Figure 8-3](ch08.html#ch08fig3) shows the arrangement of the various system
    components.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[图8-3](ch08.html#ch08fig3)展示了各个系统组件的布置。'
- en: '![image](graphics/f08-03.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f08-03.jpg)'
- en: 'Figure 8-3: A schematic of the control center'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-3：控制中心的原理图
- en: This arrangement plays to the strengths of both the Arduino and Raspberry Pi.
    The Raspberry Pi cannot directly use many of the sensors that are connected to
    the Arduino, while the Arduino can. At the same time, the Arduino does not have
    a screen, while the Raspberry Pi does.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这种安排发挥了Arduino和树莓派各自的优势。树莓派无法直接使用许多连接到Arduino的传感器，而Arduino可以。同时，Arduino没有显示屏，而树莓派有。
- en: '**SOFTWARE**'
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**软件**'
- en: 'There are two parts to the software for this project: a modified version of
    the *All_Sensors* Arduino sketch and a Python program run on the Raspberry Pi
    to allow it to communicate with the Arduino.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目的软件分为两部分：修改过的*All_Sensors* Arduino草图和在树莓派上运行的Python程序，用于使其能够与Arduino通信。
- en: Before the apocalypse, make sure you’ve downloaded the source code for this
    book; go to *[http://www.nostarch.com/zombies/](http://www.nostarch.com/zombies/)*
    to get started.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在末日来临之前，确保你已经下载了本书的源代码；前往*[http://www.nostarch.com/zombies/](http://www.nostarch.com/zombies/)*开始下载。
- en: '**ARDUINO SOFTWARE**'
  id: totrans-32
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**ARDUINO软件**'
- en: The Arduino sketch you will use for this project, *Project_13_Control_Center_
    USB*, is based on the *All_Sensors* sketch that runs all of the other Arduino
    projects in this book. *Project_13_Control_Center_USB* just adds code to allow
    your Arduino to communicate with other devices over a serial connection (in this
    case, USB).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你将用于此项目的Arduino草图*Project_13_Control_Center_USB*是基于*All_Sensors*草图的，该草图运行本书中的所有其他Arduino项目。*Project_13_Control_Center_USB*只是添加了代码，使你的Arduino能够通过串行连接（在这种情况下是USB）与其他设备通信。
- en: '**NOTE**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: For instructions on loading sketches onto your Arduino, see [Appendix C](app03.html#app03).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有关将草图加载到Arduino的说明，请参见[附录C](app03.html#app03)。
- en: It’s best to test each part of this fairly complex system in isolation on your
    regular desktop or laptop computer before connecting it to the Raspberry Pi. You
    can power the Arduino from the USB connection to your laptop while testing, so
    you don’t need to use your postapocalyptic car battery power supply for preapocalyptic
    testing.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最好在将系统连接到树莓派之前，先在你的常规台式机或笔记本电脑上单独测试该系统的每个部分。你可以通过USB连接为Arduino供电进行测试，这样就不需要在末日之前使用你的车载电池进行测试。
- en: To begin testing, load the *Project_13_Control_Center_USB* sketch onto the Arduino
    and click the magnifying glass in the Arduino IDE to open the serial monitor ([Figure
    8-4](ch08.html#ch08fig4)).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始测试，将*Project_13_Control_Center_USB*草图加载到Arduino中，然后点击Arduino IDE中的放大镜图标打开串行监视器（[图8-4](ch08.html#ch08fig4)）。
- en: '![image](graphics/f08-04.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f08-04.jpg)'
- en: 'Figure 8-4: The serial monitor'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-4：串行监视器
- en: Make sure that “9600 baud” is selected in the drop-down list at the bottom right
    of the serial monitor. This is the baud rate, the speed at which data is sent
    (measured in bits per second), and it must match the speed set in the sketch.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在串行监视器右下角的下拉菜单中选择了“9600波特率”。这是波特率，即数据传输的速度（以每秒比特为单位），它必须与草图中设置的速度匹配。
- en: In the text entry area at the top of the serial monitor, enter the ? command
    and click **Send**. The Arduino should display a line of numbers like the `4.27
    26.10 1 0 0` shown in [Figure 8-4](ch08.html#ch08fig4) (your numbers will not
    match these, exactly). These numbers are the battery voltage, temperature, door
    status, PIR status, and smoke alarm status, respectively. For the three status
    values, `0` means everything is okay and `1` indicates an alarm. These are the
    values that will later be displayed on the control center. By simulating how the
    Raspberry Pi will fetch the values, you are testing that the Arduino part of the
    project is working.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在串口监视器顶部的文本输入区域，输入 `?` 命令并点击 **发送**。Arduino 应该会显示一行数字，如 [图 8-4](ch08.html#ch08fig4)
    中所示的 `4.27 26.10 1 0 0`（你的数字不会完全相同）。这些数字分别表示电池电压、温度、门状态、PIR 状态和烟雾报警状态。对于这三个状态值，`0`
    表示一切正常，`1` 表示报警。这些值将稍后在控制中心显示。通过模拟树莓派获取这些值的方式，你正在测试 Arduino 部分的功能是否正常。
- en: If you’re currently holding any zombies captive for research, try putting the
    temperature sensor up against a zombie’s skin and enter the `?` command again.
    If you’re lacking in test subjects (or feeling less adventurous), just hold the
    sensor between your fingers. Either way, you should see the temperature part of
    the message change.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你目前正在研究某些被捕获的僵尸，试着将温度传感器贴近僵尸的皮肤，再次输入 `?` 命令。如果你没有足够的测试对象（或者不太想冒险），只需将传感器夹在手指之间。不管怎样，你应该能看到消息中的温度部分发生变化。
- en: If the responses in the serial monitor indicate that the Arduino side of your
    control center is working properly, you can unplug the Arduino from the regular
    computer and attach it to a USB port of the Raspberry Pi.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果串口监视器中的响应表明控制中心的 Arduino 部分正常工作，你可以将 Arduino 从常规计算机中拔出，并将其连接到树莓派的 USB 端口。
- en: If the numbers do not appear, then check that the sketch uploaded properly onto
    the Arduino. If the numbers reported are not what you would expect for one of
    the projects, then check the wiring for that particular project.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数字没有显示出来，请检查草图是否已经正确上传到 Arduino。如果报告的数字与你预期的某个项目不一致，请检查该项目的接线。
- en: 'Look at the Arduino code in *Project_13_Control_Center_USB*, and you will see
    that unlike in *All_Sensors*, the setup function includes the following line at
    the end:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 *Project_13_Control_Center_USB* 中的 Arduino 代码，你会发现与 *All_Sensors* 不同，setup
    函数的末尾包括了以下这行代码：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This line tells the Arduino to open a serial connection, via its USB-serial
    interface, at a baud rate of 9600\. The value passed to `begin` must match the
    value you set in the serial monitor’s baud rate drop-down list.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码告诉 Arduino 通过其 USB-串口接口以 9600 波特率打开串口连接。传递给 `begin` 的值必须与串口监视器的波特率下拉列表中设置的值匹配。
- en: 'This sketch also has a change at the top of the loop function:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图在循环函数的顶部也做了一个改动：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'These lines check whether any serial communication over USB is waiting to be
    processed. If so, when you send the `?` message, the `reportStatus` function is
    called:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行代码检查是否有待处理的 USB 串口通信。如果有，当你发送 `?` 消息时，将调用 `reportStatus` 函数：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `reportStatus` function formats the response from earlier, separating the
    parts of the message with a space character. The final `println` command adds
    a newline character to the end of the response.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`reportStatus` 函数格式化之前的响应，通过空格字符将消息的各个部分分隔开。最后的 `println` 命令在响应的末尾添加了换行符。'
- en: '**RASPBERRY PI SOFTWARE**'
  id: totrans-53
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**树莓派软件**'
- en: 'The program for this project can be found in the *Raspberry Pi/control_center_usb*
    folder. To download all the Raspberry Pi programs used in this book in one go,
    you could also use the following commands from a terminal window on the Raspberry
    Pi:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目的程序可以在 *Raspberry Pi/control_center_usb* 文件夹中找到。要一次性下载本书中使用的所有树莓派程序，你还可以使用以下命令从树莓派的终端窗口中下载：
- en: $ cd /home/pi
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: $ cd /home/pi
- en: $ git clone https://github.com/simonmonk/zombies.git
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: $ git clone https://github.com/simonmonk/zombies.git
- en: These commands should fetch all of the code for the book, including the Arduino
    code used in other projects.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令应该会获取本书中的所有代码，包括其他项目中使用的 Arduino 代码。
- en: '**NOTE**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: For these commands to work, you will need to have the Pi connected to your network
    with an Ethernet cable, and your Internet connection needs to be up and running.
    Therefore, this is definitely something to do when you sense the apocalypse looming.
    Don’t wait until afterward!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这些命令正常工作，你需要将树莓派通过以太网电缆连接到你的网络，并确保互联网连接正常。因此，这是在你感到末日临近时需要做的事情。不要等到之后才做！
- en: 'To start the control center, you need to run the Python program *control.py*.
    Enter the following commands in a terminal window on your Raspberry Pi:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动控制中心，你需要运行Python程序*control.py*。在你的Raspberry Pi终端窗口中输入以下命令：
- en: $ cd "zombies/Raspberry Pi/control_center_usb"
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: $ cd "zombies/Raspberry Pi/control_center_usb"
- en: $ python control.py
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: $ python control.py
- en: When the program has started up, the window in [Figure 8-5](ch08.html#ch08fig5)
    should appear.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序启动时，应该会出现[图8-5](ch08.html#ch08fig5)中的窗口。
- en: The program displays the readings from the Arduino in a human-readable way,
    and any readings that require your immediate attention will be highlighted in
    red. When there is no cause for alarm, the readings will be green. In this example,
    my door is open, which means zombies may be breaking into my compound as I write!
    While I go check on that, you can open the *control_center_ usb.py* file in a
    text editor and take a look.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 程序以人类可读的方式显示来自Arduino的读数，任何需要你立即关注的读数都会以红色高亮显示。当没有警报时，读数将显示为绿色。在这个例子中，我的门是开着的，这意味着僵尸可能正在闯入我的基地！在我去检查的同时，你可以在文本编辑器中打开*control_center_usb.py*文件并查看。
- en: '![image](graphics/f08-05.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f08-05.jpg)'
- en: 'Figure 8-5: The control center'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-5：控制中心
- en: '**NOTE**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: 'This is the first time we have looked at Python code since [Chapter 5](ch05.html#ch05),
    so the syntax may look unfamiliar after so much Arduino code. If you get confused
    about which is which, just keep in mind the main differences: in Python code,
    there aren’t any semicolons at the end of lines, and indentation is used to group
    code into blocks instead of curly braces as in Arduino code.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们自[第5章](ch05.html#ch05)以来第一次查看Python代码，因此在大量Arduino代码之后，语法可能显得不熟悉。如果你对哪些是Python代码、哪些是Arduino代码感到困惑，只需记住主要的区别：在Python代码中，行末没有分号，且使用缩进来将代码分组为块，而不是像Arduino代码那样使用大括号。
- en: I haven’t listed the full code for the control center here as it is almost 100
    lines, but in the following paragraphs, I’ll highlight a few key features. It
    is useful to know how the code works in case you decide you’d like to modify it.
    You might, for instance, want to improve the display window so it has an extra
    column for the units used in the measurements. You could even have it display
    more explicit warnings about fires, detected zombies, and so on to tell you when
    you need to get out of your base in a hurry. Visit *[http://effbot.org/tkinterbook/tkinter-index.htm](http://effbot.org/tkinterbook/tkinter-index.htm)*
    to find out more about making fancy user interfaces in Tkinter.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有在这里列出完整的控制中心代码，因为它几乎有100行，但在接下来的段落中，我会重点介绍一些关键特性。了解代码如何工作很有用，以防你决定修改它。例如，你可能希望改进显示窗口，增加一列显示测量使用的单位。你甚至可以让它显示关于火灾、检测到的僵尸等更明确的警告，以告诉你何时需要迅速离开你的基地。访问*[http://effbot.org/tkinterbook/tkinter-index.htm](http://effbot.org/tkinterbook/tkinter-index.htm)*了解更多关于在Tkinter中制作花哨用户界面的信息。
- en: '**THRESHOLD VALUES**'
  id: totrans-70
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**阈值**'
- en: 'At the top of the file are three constants that may need to be changed:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 文件顶部有三个常量，可能需要修改：
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'These constants specify the value limits that determine when the results turn
    red in the control window. In this example, if the voltage drops under 11V, that
    row will turn from green to red. The same happens if the temperature drops below
    –10 or rises above 45 degrees Celsius. The units of temperature used in `TEMP_MAX`
    and `TEMP_MIN` come from the units you used in the Arduino sketch. For details
    on how to switch between degrees Celsius and Fahrenheit, refer to “[Project 12:
    Temperature Alarm](ch07.html#ch00lev1sec130)” on [page 131](ch07.html#page_131).'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这些常量指定了决定控制窗口中结果何时变红的值限制。在本例中，如果电压低于11V，该行将从绿色变为红色。如果温度低于-10度或高于45度摄氏度，同样会发生这种情况。`TEMP_MAX`和`TEMP_MIN`中使用的温度单位来自你在Arduino草图中使用的单位。关于如何在摄氏度和华氏度之间切换的详细信息，请参见“[第12项目：温度报警](ch07.html#ch00lev1sec130)”在[第131页](ch07.html#page_131)。
- en: Set your thresholds to appropriate values for your base, taking into account
    how much advance warning you want if your battery level gets low or the temperature
    rises.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的基站设置适当的阈值，考虑当电池电量低或温度升高时，你希望获得多少提前警告。
- en: '**STATUS LABELS**'
  id: totrans-75
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**状态标签**'
- en: The following code shows how the labels and results in the user interface are
    coded, using battery voltage as an example. The code is contained within a class
    named `App`, and the user interface is defined in the `__init__` initialize method
    of this `App` class.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何在用户界面中编码标签和结果，以电池电压为例。代码包含在一个名为`App`的类中，用户界面在该`App`类的`__init__`初始化方法中定义。
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The first line creates the label `Volts` and positions it using a grid layout
    at row 0, column 0\. The `sticky` attribute indicates that the field should “stick”
    to the “east” wall of the layout cell—in other words, be right justified.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行创建了标签`Volts`并使用网格布局将其放置在第0行、第0列。`sticky`属性表示该字段应该“粘附”在布局单元格的“东”墙上——换句话说，就是右对齐。
- en: The second line defines a special type of variable (`StringVar`) used by the
    Tk graphics library that provides the user interface for the program. This variable
    is assigned to a member variable called `volts_var`, which is then referenced
    in the third line when the label for the voltage value is defined. When the value
    of the `volts_var` variable changes, the label field will automatically display
    the new value of `volts_var`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行定义了Tk图形库使用的特殊类型变量（`StringVar`），该库为程序提供用户界面。这个变量被分配给一个名为`volts_var`的成员变量，当定义电压值的标签时，第三行会引用它。当`volts_var`变量的值发生变化时，标签字段会自动显示`volts_var`的新值。
- en: Grid layouts divide the window up rather like table cells and allow you to specify
    the positions of user interface items without having to provide exact coordinates.
    The grid is arranged as rows numbered from top to bottom, with the topmost row
    being 0, and as columns numbered from left to right, with the leftmost column
    being 0\. The last line of code for the volts display positions the label on the
    grid layout at row 0 and column 1 to put it alongside the label `Volts`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 网格布局将窗口分成类似表格单元格的区域，并允许你在不提供精确坐标的情况下指定用户界面项的位置。网格按从上到下的行编号，最上面的行为0；按从左到右的列编号，最左边的列为0。电压显示的最后一行代码将标签放置在网格布局的第0行、第1列，以便将其与`Volts`标签并排显示。
- en: The code for the other fields displayed in the window is defined in the same
    way.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口中显示的其他字段的代码也以相同的方式定义。
- en: Of course, you may want to use more—or less—descriptive labels, so change them
    to anything you like. For more information on formatting with the Tk graphics
    library, see *[http://tkinter.unpythonic.net/wiki/](http://tkinter.unpythonic.net/wiki/)*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可能希望使用更具描述性的标签，或者更简洁的标签，所以可以根据需要修改它们。有关使用Tk图形库格式化的更多信息，请参阅 *[http://tkinter.unpythonic.net/wiki/](http://tkinter.unpythonic.net/wiki/)*。
- en: '**COMMUNICATING WITH THE ARDUINO**'
  id: totrans-83
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**与Arduino通信**'
- en: 'At the end of the `__init__` method you will find these two lines:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在`__init__`方法的末尾，你会看到这两行：
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The first of these lines opens serial communication with the Arduino. The second
    pauses for two seconds to allow the Arduino time to start up before any messages
    are sent to it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行中的第一行开启了与Arduino的串行通信。第二行暂停了两秒钟，以便Arduino有时间启动，然后才会向其发送任何消息。
- en: '**KEEPING YOUR CONTROL CENTER UPDATED**'
  id: totrans-87
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**保持你的控制中心更新**'
- en: If the displayed values don’t automatically update, your control center is pretty
    useless. Updating is accomplished with the `read_arduino` method.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果显示的值没有自动更新，那么你的控制中心基本上是无用的。更新是通过`read_arduino`方法完成的。
- en: 'Here is the first part:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第一部分：
- en: '[PRE6]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `read_arduino` method first sends the `?` command to the Arduino, which
    responds with a line of values separated by spaces, as you saw when trying out
    the Arduino code in the serial monitor. The returned string of values is then
    split up, using the spaces as a delimiter (this is the default delimiter for the
    `.split()` function). `StringVars` associated with each field in the window are
    then updated in the display.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`read_arduino`方法首先向Arduino发送`?`命令，Arduino会返回一行由空格分隔的值，就像你在串行监视器中尝试Arduino代码时看到的那样。返回的值字符串随后会被拆分，空格作为分隔符（这是`.split()`函数的默认分隔符）。与窗口中每个字段关联的`StringVar`将随后在显示中更新。'
- en: After the values are updated, the remainder of the `read_arduino` method sets
    the color of the fields to red or green as appropriate.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 值更新后，`read_arduino`方法的其余部分会根据需要将字段的颜色设置为红色或绿色。
- en: 'To ensure that the `read_arduino` method is called at regular intervals, it
    is necessary to schedule a call to it from the Tk user interface object:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为确保`read_arduino`方法按定期间隔调用，需要从Tk用户界面对象安排一次调用：
- en: '[PRE7]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This code ensures that after 100 milliseconds (1/10 second), the function update
    will be called. The function update first calls `read_arduino` and then schedules
    itself to run again in 500 milliseconds (half a second), meaning that our control
    center checks all of our sensors every half second. If you’re in danger, whether
    from zombies or environmental hazards, you’ll know quickly!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码确保在100毫秒（1/10秒）后调用update函数。该函数首先调用`read_arduino`，然后计划在500毫秒（半秒）后再次执行，这意味着我们的控制中心每半秒检查一次所有传感器。如果你处于危险之中，无论是僵尸攻击还是环境危害，你都会迅速得知！
- en: 'You can run this program at the same time as you run the USB webcam of “[Project
    7: Monitor Zombies with a USB Webcam](ch05.html#ch00lev1sec95)” on [page 87](ch05.html#page_87)
    by opening two LXTerminal windows and running one program in each terminal window.
    That way, you can see instantly what might have triggered your alarms.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以同时运行这个程序和“[项目7：使用USB摄像头监控僵尸](ch05.html#ch00lev1sec95)”中的USB摄像头，在[第87页](ch05.html#page_87)打开两个LXTerminal窗口，并在每个窗口中运行一个程序。这样，你可以立即看到是什么触发了你的警报。
- en: '**USING THE CONTROL CENTER**'
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**使用控制中心**'
- en: Now, you have a screen that will give you continuous updates on all of the safeguards
    of your stronghold. Place your control center somewhere you can easily see it,
    and if you’ve included all of the components from [Figure 8-3](ch08.html#ch08fig3),
    you’ll know instantly if your supplies are in danger, if your power supply is
    running low, and if zombies have breached your perimeter.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你有一个屏幕，可以不断更新你防御堡垒的所有安全状态。将控制中心放置在一个你能轻松看到的地方，如果你已经包括了[图8-3](ch08.html#ch08fig3)中的所有组件，你将能立即知道你的物资是否处于危险之中，电力供应是否紧张，以及僵尸是否突破了你的防线。
- en: If you find that the user interface values do not update, then go back to “[Arduino
    Software](ch08.html#ch00lev1sec141)” on [page 143](ch08.html#page_143) and again
    test the Arduino using the serial monitor by sending the `?` command to look for
    a status response in the serial monitor.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现用户界面的数值没有更新，可以返回到“[Arduino软件](ch08.html#ch00lev1sec141)”在[第143页](ch08.html#page_143)，并通过串口监视器再次测试Arduino，发送`?`命令以查看串口监视器中是否有状态响应。
- en: '**PROJECT 14: GOING WIRELESS WITH BLUETOOTH**'
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**项目14：使用蓝牙无线连接**'
- en: The control center of Project 13 is bogged down in wires right now, and you
    have to keep the Arduino and the Raspberry Pi together. That also means that you’ll
    probably only know that, say, your base has caught on fire once the flames have
    reached you—and then it will be too late. You can make your control center much
    more effective by connecting the Raspberry Pi and the Arduino wirelessly over
    Bluetooth, as we’ll do in this project, so your sensors can detect danger before
    it reaches you and your monitor.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 项目13中的控制中心现在被电线缠绕，你必须将Arduino和Raspberry Pi放在一起。这也意味着你可能只会在火焰已经蔓延到你身边时才知道，比如说，你的基地着火了——那时就已经太晚了。通过蓝牙无线连接Raspberry
    Pi和Arduino，你可以使控制中心更加高效，正如我们在这个项目中所做的那样，这样你的传感器可以在危险到达你和监视器之前就发现它。
- en: The Raspberry Pi does not have Bluetooth built in, but it will accept a wide
    range of Bluetooth USB dongles. We’ll add Bluetooth to the Arduino using a Bluetooth
    serial module, shown sticking out at the right in [Figure 8-6](ch08.html#ch08fig6).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi本身没有内置蓝牙，但它支持多种蓝牙USB适配器。我们将使用蓝牙串口模块为Arduino添加蓝牙，模块在[图8-6](ch08.html#ch08fig6)的右侧突出显示。
- en: '![image](graphics/f08-06.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f08-06.jpg)'
- en: 'Figure 8-6: Adding Bluetooth to an Arduino'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-6：为Arduino添加蓝牙
- en: 'To make this project, first complete “[Project 13: A Raspberry Pi Control Center](ch08.html#ch00lev1sec137)”
    on [page 140](ch08.html#page_140) and make sure that everything else is working
    properly. Then you’ll be ready to add the wireless link.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要制作这个项目，首先完成“[项目13：Raspberry Pi控制中心](ch08.html#ch00lev1sec137)”在[第140页](ch08.html#page_140)的内容，并确保其他一切正常。然后，你就准备好添加无线链接了。
- en: '**WHAT YOU WILL NEED**'
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**你需要的材料**'
- en: 'To make this project, you are going to need everything from Project 13 plus
    the following parts:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了制作这个项目，你需要所有来自项目13的组件，再加上以下部件：
- en: '| **ITEMS** | **NOTES** | **SOURCE** |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| **物品** | **备注** | **来源** |'
- en: '| --- | --- | --- |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| ![image](graphics/square.jpg) USB Bluetooth dongle | Compatible with Raspberry
    Pi | Computer store, eBay |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) USB蓝牙适配器 | 与Raspberry Pi兼容 | 计算机商店，eBay |'
- en: '| ![image](graphics/square.jpg) Bluetooth module | HC-06 Bluetooth serial module
    | eBay |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) 蓝牙模块 | HC-06蓝牙串口模块 | eBay |'
- en: '| ![image](graphics/square.jpg) 270 Ω resistor |  | Mouser (293-270-RC) |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) 270 Ω电阻 |  | Mouser (293-270-RC) |'
- en: '| ![image](graphics/square.jpg) 470 Ω resistor |  | Mouser (293-470-RC) |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) 470 Ω 电阻 |  | Mouser (293-470-RC) |'
- en: '| ![image](graphics/square.jpg) Connecting wire |  |  |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) 连接线 |  |  |'
- en: '| ![image](graphics/square.jpg) Header pins | 4-way | Adafruit (392), eBay
    |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) 引脚 | 4-pin | Adafruit (392), eBay |'
- en: '| ![image](graphics/square.jpg) Screwshield |  | Adafruit (196) |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) 螺钉保护板 |  | Adafruit (196) |'
- en: '| ![image](graphics/square.jpg) Multistranded or solid-core hookup wire | For
    making connections on the prototyping area of the screwshield | Adafruit (1311),
    scavenge |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) 多股或实心核心连接线 | 用于在螺钉保护板的原型区域进行连接 | Adafruit (1311),
    可回收 |'
- en: '| ![image](graphics/square.jpg) Female-female jumper wires (×4) | (Optional)
    Would replace header pins | Adafruit (266) |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| ![image](graphics/square.jpg) 母对母跳线（×4） | （可选）替代引脚 | Adafruit (266) |'
- en: The hardware for this project can be built onto the screwshield that you have
    used while building up the various sensor projects (4, 6, 10, 11, and 12) that
    use a screwshield. The Bluetooth module I used is a Cambridge Silicon Radio (CSR)
    device. For a list of Bluetooth dongles compatible with the Raspberry Pi, visit
    *[http://elinux.org/RPi_USB_Bluetooth_adapters/](http://elinux.org/RPi_USB_Bluetooth_adapters/)*.
    If you are worried about soldering the Bluetooth module directly to the header
    pins, then you may prefer to use four female-to-female jumper wires to link the
    header pins to the Bluetooth module.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目的硬件可以构建在你在构建其他使用螺钉保护板的传感器项目（4、6、10、11 和 12）时使用的螺钉保护板上。我使用的蓝牙模块是剑桥硅无线电（CSR）设备。有关与
    Raspberry Pi 兼容的蓝牙适配器的列表，请访问 *[http://elinux.org/RPi_USB_Bluetooth_adapters/](http://elinux.org/RPi_USB_Bluetooth_adapters/)*。如果你担心将蓝牙模块直接焊接到引脚上，你也可以使用四根母对母跳线将引脚与蓝牙模块连接。
- en: '**NOTE**'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: You can save yourself some tricky soldering by looking for a module and adapter
    pair that already has the module soldered into place.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过寻找一个已经将模块焊接到位的模块和适配器配对，你可以省去一些复杂的焊接工作。
- en: A lot of the Bluetooth HC-06 modules have six rather than four pins. The pins
    you will be using are +5V, GND, TXD, and RXD, so you can ignore the other two.
    These are usually the outside pins, but do check the pinout names as occasionally
    some designs swap the pin positions around.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 许多蓝牙 HC-06 模块有六个引脚，而不是四个。你需要使用的引脚是 +5V、GND、TXD 和 RXD，因此可以忽略其他两个引脚。这些通常是外部引脚，但请检查引脚图，因为有时一些设计会交换引脚位置。
- en: '**CONSTRUCTION**'
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**构建**'
- en: To enable Bluetooth connectivity for your Raspberry Pi, you only need to attach
    a USB dongle to your system.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使你的 Raspberry Pi 能够支持蓝牙连接，你只需要将一个 USB 蓝牙适配器连接到系统中。
- en: The Arduino requires the aforementioned Bluetooth module and a pair of resistors
    to divide the 5V signal level of the Arduino to the 3V level expected by the Bluetooth
    module. Mount the module and resistors to the side of the screwshield’s prototyping
    area not already being used by the fire alarm interface from Project 11.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino 需要上述的蓝牙模块和一对电阻器，用于将 Arduino 的 5V 信号电平降到蓝牙模块所需的 3V 电平。将模块和电阻器安装到螺钉保护板的原型区域，避免与项目
    11 的火灾警报接口区域重叠。
- en: '[Figure 8-7](ch08.html#ch08fig7) shows the wiring layout for the project. To
    avoid confusion, [Figure 8-7](ch08.html#ch08fig7) shows the Bluetooth module attached
    to a screwshield without any other projects built on it.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 8-7](ch08.html#ch08fig7) 显示了该项目的布线布局。为了避免混淆，[图 8-7](ch08.html#ch08fig7)
    展示了蓝牙模块连接到一个螺钉保护板上，且没有其他项目在其上构建。'
- en: '![image](graphics/f08-07.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f08-07.jpg)'
- en: 'Figure 8-7: Wiring layout for adding Bluetooth to an Arduino'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-7：为 Arduino 添加蓝牙的布线布局
- en: The Bluetooth module needs to lie flat to keep it out of the way of the LCD
    shield. For this, you need to solder a row of four 0.1-inch header pins and then
    solder the Bluetooth module perpendicular to the pins, lying flat over the screwshield.
    If you prefer, you may also use female-to-female jumper wires to connect the Bluetooth
    module to the header pins.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝牙模块需要平放，以避免与 LCD 保护板发生冲突。为此，你需要焊接一排四个 0.1 英寸的引脚，并将蓝牙模块垂直焊接在引脚上，平放在螺钉保护板上。如果你愿意，也可以使用母对母跳线将蓝牙模块连接到引脚。
- en: '**STEP 1: SOLDER THE HEADER PINS**'
  id: totrans-130
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**步骤 1：焊接引脚**'
- en: Solder the strip of header pins into place. You can see in [Figure 8-8](ch08.html#ch08fig8)
    that the +5V and GND pin connections neatly line up with the two power rows at
    the top of the screwshield.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 将引脚条焊接到位。你可以在[图 8-8](ch08.html#ch08fig8)中看到，+5V 和 GND 引脚的连接整齐地与螺钉保护板顶部的两个电源排对齐。
- en: '![image](graphics/f08-08.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f08-08.jpg)'
- en: 'Figure 8-8: The header pins soldered in place'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-8：焊接到位的引脚排
- en: Note that the wire shown leading to pin 3 of the Arduino is part of the fire
    alarm from Project 11, not this project.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，图中连接到 Arduino 引脚 3 的电线属于第 11 项项目中的火灾报警器，而非本项目。
- en: '**STEP 2: SOLDERING THE RESISTORS AND LINKING WIRE**'
  id: totrans-135
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**步骤 2：焊接电阻和连接线**'
- en: 'Solder the resistors and linking wire to the screwshield in the positions shown
    in [Figure 8-9](ch08.html#ch08fig9): the 470 Ω resistor goes from GND at Arduino
    column 7 to the bottom header at column 4; the 270 Ω resistor goes from the bottom
    pin of the header at row 3 to Arduino pin 1\. The connecting wire runs from Arduino
    pin 0 to the third header pin down.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图 8-9](ch08.html#ch08fig9)所示的位置，将电阻和连接线焊接到螺钉保护板上：470 Ω 电阻从 Arduino 的 GND
    引脚（第 7 列）连接到底部引脚排（第 4 列）；270 Ω 电阻从引脚排底部的第 3 行引脚连接到 Arduino 的第 1 引脚。连接线则从 Arduino
    引脚 0 连接到第 3 个引脚排引脚。
- en: '![image](graphics/f08-09.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f08-09.jpg)'
- en: 'Figure 8-9: Soldering the resistors and connecting wire'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-9：焊接电阻和连接线
- en: When you’ve soldered the resistors and connecting wire in place, flip the screwshield
    over to solder the underside of the board.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将电阻和连接线焊接到位后，翻转螺钉保护板，焊接板的底面。
- en: '[Figure 8-10](ch08.html#ch08fig10) shows a close-up of the underside of the
    screwshield. To make it easier to identify what is connected to what, the resistors
    and linking wire are shown as if they were visible through the board.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 8-10](ch08.html#ch08fig10)显示了螺钉保护板底面的特写。为了便于识别连接情况，电阻和连接线显示为仿佛通过电路板可见。'
- en: '![image](graphics/f08-10.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f08-10.jpg)'
- en: 'Figure 8-10: Connecting the underside of the screwshield'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-10：连接螺钉保护板底面
- en: First, bend the bottom lead of the 270 Ω resistor over toward the bottom pin
    header ➊. Solder this to the bottom pin header’s pad and snip off the remaining
    lead. Bend the remaining lead from the bottom end of the 470 Ω resistor to meet
    the pad one position to its left ➋. Solder the lead to that pad and snip off the
    excess lead. You have now made a continuous connection from the bottom of the
    header pins to the bottoms of the 270 Ω resistor and the 470 Ω resistor.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将 270 Ω 电阻的底部引脚弯向底部引脚排 ➊。将其焊接到底部引脚排的焊盘上，然后剪去剩余的引脚。将 470 Ω 电阻底部的剩余引脚弯曲，连接到其左边一个位置的焊盘
    ➋。将引脚焊接到该焊盘上，然后剪去多余的引脚。现在，你已从引脚排的底部连接到底部的 270 Ω 电阻和 470 Ω 电阻之间，形成了连续的连接。
- en: The final connection on the underside ➌ uses the spare wire from soldering the
    lead from the jumper wire to the header pin to its immediate left.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 底面的最后一个连接 ➌ 使用焊接引脚排左侧相邻引脚的跳线引脚剩余部分。
- en: '**STEP 3: SOLDERING THE BLUETOOTH MODULE**'
  id: totrans-145
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**步骤 3：焊接蓝牙模块**'
- en: The final step is to solder the Bluetooth module to the header pins. Solder
    one pad on the module to one of the header pins, and while keeping the solder
    molten, position the Bluetooth module so that it is resting against the 1 kΩ resistor
    that came attached to the screwshield. Then attach the first prong of the module
    to the first pin. You can see this resistor on the bottom right of [Figure 8-9](ch08.html#ch08fig9).
    Once the first prong is soldered, all the other prongs should be lined up and
    easy to solder. If you prefer, you could use female-to-female jumper wires to
    link the screwshield to the Bluetooth module. [Figure 8-11](ch08.html#ch08fig11)
    shows the Bluetooth module in position.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将蓝牙模块焊接到引脚排上。将模块的一个焊盘焊接到引脚排上的一个引脚，同时保持焊料融化状态，将蓝牙模块定位，使其与螺钉保护板上附带的 1 kΩ
    电阻接触。然后，将模块的第一个引脚固定在第一个引脚上。你可以在[图 8-9](ch08.html#ch08fig9)的右下角看到这个电阻。焊接好第一个引脚后，其他引脚应该能够对准并轻松焊接。如果你愿意，你也可以使用母对母跳线将螺钉保护板与蓝牙模块连接。[图
    8-11](ch08.html#ch08fig11)显示了蓝牙模块就位的样子。
- en: '![image](graphics/f08-11.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f08-11.jpg)'
- en: 'Figure 8-11: The Bluetooth module soldered in position'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-11：蓝牙模块焊接到位
- en: '**SOFTWARE**'
  id: totrans-149
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**软件**'
- en: Since your sensors aren’t changing, you’ll use the same Arduino software as
    in “[Arduino Software](ch08.html#ch00lev1sec141)” on [page 143](ch08.html#page_143).
    The Bluetooth module replaces the USB interface.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 由于传感器没有变化，你将使用与“[Arduino 软件](ch08.html#ch00lev1sec141)”相同的 Arduino 软件，具体内容见
    [第 143 页](ch08.html#page_143)。蓝牙模块替代了 USB 接口。
- en: Note that this hardware communicates with the Bluetooth module using the serial
    port, which on an Arduino Uno is shared with the USB interface. This means that
    you need to unplug the shield (or just the Bluetooth module if you used jumper
    wires) before you program the Arduino.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个硬件通过串口与蓝牙模块进行通信，在Arduino Uno上，串口与USB接口共享。这意味着在你编程Arduino之前，你需要拔掉扩展板（或者如果你使用了跳线，只需拔掉蓝牙模块）。
- en: 'The Raspberry Pi software, however, does need a couple of minor changes, and
    getting the Raspberry Pi to use Bluetooth does require you to install a whole
    load of software. Remember: You’ll need to install this software before the Internet
    fails!'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，树莓派的软件确实需要进行一些小的修改，而且要让树莓派使用蓝牙，你需要安装一堆软件。记住：你需要在网络断开之前安装这些软件！
- en: 'Plug the Bluetooth USB adapter into a free USB slot on your Raspberry Pi and
    then run the following commands in an LXTerminal window:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 将蓝牙USB适配器插入树莓派的一个空闲USB端口，然后在LXTerminal窗口中运行以下命令：
- en: $ sudo apt-get update
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: $ sudo apt-get update
- en: $ sudo apt-get install bluetooth
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: $ sudo apt-get install bluetooth
- en: $ sudo apt-get install bluez-utils
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: $ sudo apt-get install bluez-utils
- en: $ sudo apt-get install blueman
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: $ sudo apt-get install blueman
- en: Installing the software will take a considerable amount of time, so you might
    want to practice your martial arts skills on any willing humans or unwilling zombies
    available.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 安装软件将花费相当长的时间，所以你可能想要在任何愿意的或不愿意的僵尸上练习你的武术技能。
- en: 'When the software is installed and you’ve worked up a good sweat, reboot the
    Raspberry Pi with this command:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 软件安装完成并且你已经流了一些汗水后，使用以下命令重启树莓派：
- en: $ sudo reboot
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: $ sudo reboot
- en: 'Once the Raspberry Pi has rebooted, open a terminal and run the following command
    to ascertain the ID of the BT interface:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦树莓派重新启动，打开终端并运行以下命令以确定BT接口的ID：
- en: $ hciconfig
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: $ hciconfig
- en: '➊  hci0: Type: BR/EDR Bus: USB'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ hci0：类型：BR/EDR 总线：USB
- en: 'BD Address: 00:15:83:0C:BF:EB ACL MTU: 339:8 SCO MTU: 128:2'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: BD地址：00:15:83:0C:BF:EB ACL MTU：339:8 SCO MTU：128:2
- en: UP RUNNING PSCAN
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: UP RUNNING PSCAN
- en: RX bytes:419213 acl:19939 sco:0 events:7407 errors:0
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: RX字节：419213 acl：19939 sco：0 事件：7407 错误：0
- en: TX bytes:95875 acl:7321 sco:0 commands:57 errors:0
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: TX字节：95875 acl：7321 sco：0 命令：57 错误：0
- en: The information we want here is the name of the interface, which in this case
    is `hci0` at ➊. When you run this, if the number after `hci` above is not `0`,
    then make a note of the number; you will need it later.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的信息是接口的名称，在本例中为`hci0`，位于➊处。当你运行此命令时，如果`hci`后面的数字不是`0`，请记下该数字；稍后会用到它。
- en: 'Every Bluetooth device has a unique ID called a *MAC address*. We need to find
    the MAC address for our new Arduino Bluetooth module to pair it with the Raspberry
    Pi. When you power up the Arduino, you should see an LED blinking on the Bluetooth
    module. The LED is blinking because it has not yet been paired up with the Raspberry
    Pi; once it has been paired, the LED will go on and stay on. Run the following
    command to find the ID of the Bluetooth module:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 每个蓝牙设备都有一个唯一的ID，称为*MAC地址*。我们需要找到新Arduino蓝牙模块的MAC地址，以便将其与树莓派配对。当你为Arduino供电时，你应该看到蓝牙模块上的LED灯在闪烁。LED灯闪烁是因为它还没有与树莓派配对；一旦配对成功，LED灯会亮起并保持亮着。运行以下命令来查找蓝牙模块的ID：
- en: $ hcitool scan
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: $ hcitool scan
- en: 'The output from the `hcitool` command should look like this:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`hcitool`命令的输出应该如下所示：'
- en: '[PRE8]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The ID is the six-part number. Copy this into the copy-and-paste buffer (Copy
    and Paste are on the right-click menu). Then enter the following command to link
    the Raspberry Pi and the Bluetooth module (remember to change the Bluetooth ID
    to match your Bluetooth module’s ID):'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: ID是六部分的数字。将其复制到剪贴板（复制和粘贴可以通过右键菜单进行）。然后输入以下命令将树莓派与蓝牙模块连接（记得更改蓝牙ID以匹配你自己的蓝牙模块ID）：
- en: $ sudo hcitool cc 00:11:04:08:04:76
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: $ sudo hcitool cc 00:11:04:08:04:76
- en: If you have not already done so, follow the instructions in “[Raspberry Pi Software](ch08.html#ch00lev1sec142)”
    on [page 145](ch08.html#page_145) for downloading the Raspberry Pi software. You
    will find the Bluetooth version of *control.py* in the folder *Raspberry Pi/control_center_bt*.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有这样做，请按照“[树莓派软件](ch08.html#ch00lev1sec142)”中的说明，在[第145页](ch08.html#page_145)下载树莓派软件。你会在文件夹*Raspberry
    Pi/control_center_bt*中找到蓝牙版本的*control.py*。
- en: 'When you have the program, run the following `sudo` command, again replacing
    the Bluetooth ID with your own:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 当你安装好程序后，运行以下`sudo`命令，再次用你自己的蓝牙ID替换：
- en: $ sudo rfcomm connect 0 00:11:04:08:04:76 1 &
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: $ sudo rfcomm connect 0 00:11:04:08:04:76 1 &
- en: '[1] 2625'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 2625'
- en: $ Connected /dev/rfcomm0 to 00:11:04:08:04:76 on channel 1
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: $ 已连接 /dev/rfcomm0 到 00:11:04:08:04:76，频道1
- en: Press CTRL-C for hangup
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 按CTRL-C退出
- en: $
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: $
- en: You’ll need to run this command before you run the program each time your Raspberry
    Pi reboots. The `&` on the end of the command runs it in the background so that
    you can use the terminal window to run the program itself. Hit ENTER to get the
    `$` command prompt back.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 每次树莓派重启后，你需要在运行程序之前运行这个命令。命令末尾的`&`会将命令放到后台运行，这样你就可以在终端窗口中运行程序本身。按ENTER键返回`$`命令提示符。
- en: If your Bluetooth interface name did not have a `0` after `hci` when you ran
    the `hciconfig` command earlier, change the first `0` after `connect` to match
    the number on the end of `hci`. Remember when I asked you to make a note of this
    number?
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在之前运行`hciconfig`命令时，蓝牙接口名称后面没有`0`，请将`connect`命令中的第一个`0`更改为与`hci`后面的数字相匹配。还记得我让你记录这个数字吗？
- en: 'Finally, move to the project directory and run the program:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，进入项目目录并运行程序：
- en: $ cd ~/zombies/control_center_bt/
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: $ cd ~/zombies/control_center_bt/
- en: $ python control.py
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: $ python control.py
- en: If you look at the *control.py* files from this project and Project 13, you
    can see that the only difference is the port. In this version of *control.py*,
    we set the port to */dev/rfcomm0* rather than */dev/ttyACM0* so that it uses the
    Bluetooth connection rather than the USB connection.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看这个项目和第13号项目中的*control.py*文件，你会发现唯一的区别是端口。在这个版本的*control.py*中，我们将端口设置为*/dev/rfcomm0*，而不是*/dev/ttyACM0*，以便它使用蓝牙连接而不是USB连接。
- en: '**USING THE BLUETOOTH-ENABLED COMMAND CENTER**'
  id: totrans-188
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**使用蓝牙支持的指挥中心**'
- en: The project works in exactly the same way as the USB version in Project 13,
    with the window displaying the same information, only now it’s a little more portable
    as long as your webcam is wireless. If zombies get into your compound, just grab
    the Raspberry Pi, monitor, and power source and barricade yourself inside a closet
    until they lose interest.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目的工作方式与第13号项目中的USB版本完全相同，窗口显示相同的信息，只不过现在它稍微更便携，只要你的摄像头是无线的。如果僵尸闯入了你的基地，只需拿起树莓派、显示器和电源，躲进衣柜里，直到它们失去兴趣。
- en: In the next chapter, we’ll work on ways to distract zombies in a pinch, because
    the undead are usually much easier to run from than they are to actually kill.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将研究如何在紧急情况下分散僵尸的注意力，因为亡灵通常比起真正杀死它们，更容易被逃跑。
