- en: '**12**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**12**'
- en: '**INFORMATION LEAKS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**信息泄露**'
- en: '![image](Images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common01.jpg)'
- en: Hackers frequently use publicized security vulnerabilities, especially *zero-day
    vulnerabilities*—security flaws that have been made public in the last 24 hours.
    When someone publishes a zero-day vulnerability for a software component, hackers
    will immediately scan for web servers running the vulnerable software in order
    to exploit the security hole. To protect yourself from such threats, you should
    ensure that your web server doesn’t leak information about the type of software
    stack you’re running on. If you inadvertently advertise your server technology,
    you’re making yourself a target.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客经常利用公开的安全漏洞，尤其是 *零日漏洞*——那些在过去 24 小时内被公开的安全缺陷。当某人发布了一个软件组件的零日漏洞后，黑客会立即扫描运行该漏洞软件的
    web 服务器，以便利用这一安全漏洞。为了保护自己免受此类威胁，你应该确保 web 服务器不会泄露关于你所运行的软件栈的信息。如果你无意中暴露了服务器技术，你就是在给自己做靶子。
- en: In this chapter, you’ll learn some common ways web servers leak information
    about your technology choices and how to mitigate each of these risks.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍 web 服务器泄露关于你技术选择的一些常见方式，并提供如何缓解这些风险的方法。
- en: '**Mitigation 1: Disable Telltale Server Headers**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**缓解措施 1：禁用明显的服务器响应头**'
- en: Make sure to disable any HTTP response headers in your web server configuration
    that reveal the server technology, language, and version you’re running. By default,
    web servers usually send a `Server` header back with each response, describing
    which software is running on the server side. This is great advertising for the
    web server vendor, but the browser doesn’t use it. It simply tells an attacker
    which vulnerabilities they can probe for. Make sure your web server configuration
    disables this `Server` header. (Or if you’re feeling mischievous, have it report
    the wrong web server technology!)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 确保禁用 web 服务器配置中任何会暴露服务器技术、语言和版本的 HTTP 响应头。默认情况下，web 服务器通常会在每个响应中返回一个 `Server`
    响应头，描述服务器端正在运行的软件。这对 web 服务器供应商来说是很好的广告，但浏览器并不会使用它。它只是告诉攻击者可以探测哪些漏洞。确保你的 web 服务器配置禁用此
    `Server` 响应头。（或者，如果你想捉弄一下，可以让它报告错误的 web 服务器技术！）
- en: '**Mitigation 2: Use Clean URLs**'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**缓解措施 2：使用干净的 URL**'
- en: When you design your website, avoid telltale file suffixes in URLs, such as
    *.php*, *.asp*, and *.jsp*. Implement *clean URLs* instead—URLs that do not give
    away implementation details. URLs with file extensions are common in older web
    servers, which explicitly reference template filenames. Make sure to avoid such
    extensions.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计网站时，避免 URL 中出现明显的文件后缀，比如 *.php*、*.asp* 和 *.jsp*。实现 *干净的 URL* ——不会泄露实现细节的
    URL。带有文件扩展名的 URL 在旧版 web 服务器中比较常见，它们会明确引用模板文件名。确保避免使用这些扩展名。
- en: '**Mitigation 3: Use Generic Cookie Parameters**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**缓解措施 3：使用通用的 Cookie 参数**'
- en: The name of the cookie your web server uses to store session state frequently
    reveals your server-side technology. For instance, Java web servers usually store
    the session ID under a cookie named `JSESSIONID`. Attackers can check these kinds
    of session cookie names to identify servers, as shown in [Listing 12-1](ch12.xhtml#ch12list1).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: web 服务器用来存储会话状态的 cookie 名称通常会泄露你的服务器端技术。例如，Java web 服务器通常将会话 ID 存储在一个名为 `JSESSIONID`
    的 cookie 中。攻击者可以检查这些类型的会话 cookie 名称来识别服务器，如 [列表 12-1](ch12.xhtml#ch12list1) 所示。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 12-1: The hacking tool Metasploit attempting to detect and compromise
    an Apache Tomcat server*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 12-1：黑客工具 Metasploit 尝试检测并入侵 Apache Tomcat 服务器*'
- en: Note that the Metasploit code checks the name of the session cookie ❶.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Metasploit 代码检查了会话 cookie 的名称 ❶。
- en: Make sure that your web server sends nothing back in cookies that give clues
    about your technology stack. Change your configuration to use generic names for
    the session cookie (for example, `session`).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的 web 服务器在 cookies 中不返回任何关于你技术栈的线索。修改配置，使用通用的会话 cookie 名称（例如，`session`）。
- en: '**Mitigation 4: Disable Client-Side Error Reporting**'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**缓解措施 4：禁用客户端错误报告**'
- en: Most web servers support *client-side error reporting*, which allows the server
    to print stack traces and routing information in the HTML of the error page. Client-side
    error reporting is really useful when debugging errors in test environments. However,
    stack traces and error logs also tell an attacker which modules or libraries you’re
    using, helping them pick out security vulnerabilities to target. Errors occurring
    in your data access layer can even reveal details about the structure of your
    database, which is a major security hazard!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 web 服务器支持*客户端错误报告*，这允许服务器在错误页面的 HTML 中打印堆栈跟踪和路由信息。客户端错误报告在调试测试环境中的错误时非常有用。然而，堆栈跟踪和错误日志也会告诉攻击者你正在使用哪些模块或库，帮助他们挑选出可能的安全漏洞作为攻击目标。发生在数据访问层的错误甚至可能暴露数据库结构的细节，这会带来严重的安全隐患！
- en: You *must* disable error reporting on the client side in your production environment.
    You should keep the error page your users see completely generic. At most, users
    should know that an unexpected error occurred and that someone is looking into
    the problem. Detailed error reports should be kept in production logs and error
    reporting tools, which only administrators can access.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你*必须*在生产环境中禁用客户端错误报告。你应该保持用户看到的错误页面完全通用。最多，用户应该知道发生了一个意外错误，并且有人正在处理这个问题。详细的错误报告应保存在生产日志和错误报告工具中，这些工具只有管理员可以访问。
- en: Consult your web server’s documentation on how to disable client-side error
    reporting. [Listing 12-2](ch12.xhtml#ch12list2) illustrates how you would disable
    this functionality in a Rails config file.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 查阅你 web 服务器的文档，了解如何禁用客户端错误报告。[列表 12-2](ch12.xhtml#ch12list2)展示了如何在 Rails 配置文件中禁用此功能。
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 12-2: Make sure your production configuration file (typically stored
    at* config/environments/production.rb *in Ruby on Rails) disables client-side
    error reporting.*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 12-2：确保你的生产配置文件（通常存储在* config/environments/production.rb *中，适用于 Ruby on
    Rails）禁用客户端错误报告。*'
- en: '**Mitigation 5: Minify or Obfuscate Your JavaScript Files**'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**缓解措施 5：压缩或混淆你的 JavaScript 文件**'
- en: Many web developers preprocess their JavaScript code before deploying it by
    using a *minifier*, which takes JavaScript code and outputs a functionally equivalent
    but highly compressed JavaScript file. Minifiers remove all extraneous characters
    (such as whitespace) and replace some code statements with shorter, semantically
    identical statements. A related tool is an *obfuscator*, which replaces method
    and function names with short, meaningless tokens without changing any behavior
    in the code, deliberately making the code less readable. The popular UglifyJS
    utility has both capabilities, and can be invoked directly from the command line
    with the syntax `uglifyjs [input files`], which makes it straightforward to plug
    into your build process.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 web 开发者在部署 JavaScript 代码之前使用*压缩工具*对其进行预处理，这种工具可以将 JavaScript 代码转换为功能等效但高度压缩的
    JavaScript 文件。压缩工具会删除所有多余的字符（如空格），并将一些代码语句替换为更短的语义相同的语句。相关的工具是*混淆器*，它将方法和函数名替换为简短且无意义的标记，而不改变代码的行为，从而故意使代码变得不易读。流行的
    UglifyJS 工具集成了这两种功能，可以通过命令行直接调用，语法为`uglifyjs [输入文件]`，使其轻松融入到构建过程中。
- en: Developers usually minify or obfuscate JavaScript code for performance, because
    smaller JavaScript files load faster in the browser. This preprocessing also has
    the positive side effect of making it harder for an attacker to detect which JavaScript
    libraries you’re using. Researchers or attackers periodically discover security
    vulnerabilities in popular JavaScript libraries that permit cross-site scripting
    attacks. Making it harder to detect the libraries you’re using will give you more
    breathing room when exploits are discovered.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者通常出于性能考虑，对 JavaScript 代码进行压缩或混淆，因为较小的 JavaScript 文件可以更快地加载到浏览器中。这种预处理还具有一个积极的副作用，即使攻击者更难检测出你正在使用哪些
    JavaScript 库。研究人员或攻击者定期发现流行的 JavaScript 库中存在安全漏洞，这些漏洞可能允许跨站脚本攻击。让攻击者更难发现你使用的库，将为你争取更多的喘息空间，尤其是在漏洞被发现时。
- en: '**Mitigation 6: Sanitize Your Client-Side Files**'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**缓解措施 6：清理你的客户端文件**'
- en: It’s important that you conduct code reviews and use static analysis tools to
    make sure sensitive data doesn’t end up in comments or that dead code doesn’t
    get passed to the client. It’s easy for developers to leave comments in HTML files,
    template files, or JavaScript files that share a little too much information,
    since we forget that these files get shipped to the browser. Minifying JavaScript
    might strip comments, but you need to spot sensitive comments in template files
    and hand-coded HTML files during code reviews and remove them.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 进行代码审查并使用静态分析工具以确保敏感数据不会出现在评论中，或者死代码不会被传递到客户端，这是非常重要的。开发者容易在HTML文件、模板文件或JavaScript文件中留下过多的信息，因为我们常常忘记这些文件最终会被传送到浏览器。虽然压缩JavaScript代码可能会去除注释，但你需要在代码审查时在模板文件和手写的HTML文件中找到敏感注释并将其删除。
- en: Hacking tools make it easy for an attacker to crawl your site and extract any
    comments that you’ve accidentally left behind—hackers often use this technique
    to scan for private IP addresses accidentally left in comments. This is often
    a first port of call when a hacker is attempting to compromise your website.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客工具使得攻击者能够轻松爬取你的网站，提取你不小心留下的任何评论——黑客常常使用这种技术扫描评论中不小心泄露的私密IP地址。当黑客试图攻击你的网站时，这通常是他们的第一步。
- en: '**Stay on Top of Security Advisories**'
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保持对安全公告的关注**'
- en: 'Even with all your security settings locked down, a sophisticated hacker can
    still make a good guess about the technology you’re running. Web servers have
    telltale behaviors in the way they respond to specific edge cases: deliberately
    corrupted HTTP requests or requests with unusual HTTP verbs, for example. Hackers
    can use these unique server-technology fingerprints to identify the server-side
    technology stack. Even when you follow best practices regarding information leakage,
    it’s important to stay on top of security advisories for the technology you use
    and deploy patches in a prompt manner.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你已经锁定了所有的安全设置，经验丰富的黑客仍然能够根据你所使用的技术做出合理的猜测。Web服务器在响应特定边缘情况时有一些明显的行为，例如故意损坏的HTTP请求或带有不寻常HTTP动词的请求。黑客可以利用这些独特的服务器技术指纹来识别服务器端的技术栈。即使你在防止信息泄漏方面遵循了最佳实践，仍然需要保持对你使用的技术的安全公告的关注，并及时部署补丁。
- en: '**Summary**'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: You should ensure that your web server doesn’t leak information about the type
    of software stack you’re running on, because hackers will use this information
    against you when trying to figure out how to compromise your website. Make sure
    your configuration disables telltale headers and uses a generic session cookie
    name in the HTTP response. Use clean URLs that don’t contain filename extensions.
    Minify or obfuscate your JavaScript so it’s harder to tell which third-party libraries
    you’re using. Turn off verbose client-side error reporting in your production
    site. Make sure to sanitize your template files and HTML for comments that give
    out too much information. Finally, stay on top of security advisories so you can
    deploy patches in a timely manner.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该确保你的Web服务器不会泄露关于你使用的软件堆栈的信息，因为黑客会利用这些信息来寻找攻击你网站的方法。确保你的配置禁用明显的头部信息，并在HTTP响应中使用通用的会话cookie名称。使用干净的URL，避免包含文件名扩展名。压缩或混淆JavaScript代码，这样就更难判断你使用了哪些第三方库。在生产站点中关闭详细的客户端错误报告。确保清理你的模板文件和HTML中的评论，避免泄露过多信息。最后，保持对安全公告的关注，以便及时部署补丁。
- en: In the next chapter, you will take a look at how to secure traffic to your website
    by using encryption.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将学习如何通过加密来保护你网站的流量。
