- en: '## **23'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '## **23**'
- en: BINARY DIFFERENCING AND VERSION TRACKING**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**二进制差异和版本跟踪**'
- en: '![Image](Images/com.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/com.jpg)'
- en: We have spent the previous chapters introducing you to ways that Ghidra can
    assist your reverse engineering analysis efforts. Throughout this journey, we
    have introduced many ways to transform and annotate your work to document and
    facilitate understanding of the binary.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前几章中向你介绍了Ghidra如何帮助你进行逆向工程分析的方式。在这个过程中，我们介绍了许多方法，帮助你转化和注释你的工作，以便记录并便于理解二进制文件。
- en: 'In this chapter, we introduce binary differencing and Ghidra’s Version Tracking
    tool to help you identify similarities and differences between files and functions
    and facilitate the application of previous analysis results to new files. We also
    discuss file differences from three perspectives: binary differencing, function
    comparison, and version tracking.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了二进制差异和Ghidra的版本跟踪工具，帮助你识别文件和函数之间的相似性和差异，并促进将以前的分析结果应用到新文件中。我们还从三个角度讨论了文件差异：二进制差异、函数比较和版本跟踪。
- en: '**Binary Differencing**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**二进制差异**'
- en: 'In the preceding chapter, we patched a binary to modify the flow of a function
    to bypass a call to `exit` by changing a single byte in a single instruction:
    `JZ` (74) to `JNZ` (75). To confirm the change and document exactly what was changed,
    we could use an external tool such as `VBinDiff` or `WinDiff` to compare the two
    files at the byte level. However, to compare files at the instruction level, we
    need a much more sophisticated tool: the Program Diff tool available in Ghidra’s
    Listing window. Once the differences have been computed, they can be viewed using
    custom displays designed to emphasize the differences, facilitate understanding
    of each change, and provide opportunities to take action based on the type of
    difference.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们打补丁修改了一个二进制文件，改变了函数的流程，绕过了对`exit`的调用，通过修改一条指令中的一个字节：`JZ`（74）改为`JNZ`（75）。为了确认更改并准确记录修改的内容，我们可以使用外部工具如`VBinDiff`或`WinDiff`，在字节级别比较这两个文件。然而，要在指令级别进行文件比较，我们需要一个更为复杂的工具：Ghidra的“程序差异”工具，这个工具可以在列表窗口中使用。一旦计算出差异，它们可以通过定制显示来查看，这些显示旨在突出差异，帮助理解每个更改，并提供根据差异类型采取行动的机会。
- en: To compare two files that have been imported to a project and are in the same
    state (for example, both analyzed or neither analyzed), open one of the files
    in the CodeBrowser and then choose **Tools** ▸ **Program Differences** and select
    another file within the current project for comparison. Alternatively, you can
    use the Listing window tool icon shown in [Figure 23-1](ch23.xhtml#fig23_1). This
    icon serves as a toggle to open or close the Program Diff tool.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 若要比较已导入项目并处于相同状态（例如，两个文件都已分析或两个文件都未分析）的两个文件，打开其中一个文件在CodeBrowser中，然后选择**工具**
    ▸ **程序差异**，并选择项目中的另一个文件进行比较。或者，你可以使用[图23-1](ch23.xhtml#fig23_1)中所示的列表窗口工具图标。这个图标作为切换按钮，打开或关闭程序差异工具。
- en: '![image](Images/fig23-1.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig23-1.jpg)'
- en: '*Figure 23-1: CodeBrowser Diff View toggle icon*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*图23-1：CodeBrowser差异视图切换图标*'
- en: For this example, we will start by opening the unpatched version of the file,
    selecting the Diff View icon, and choosing the patched version of the file. This
    opens the Determine Program Differences dialog shown in [Figure 23-2](ch23.xhtml#fig23_2).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将从打开未打补丁的文件版本开始，选择“差异视图”图标，并选择打补丁后的文件版本。这将打开[图23-2](ch23.xhtml#fig23_2)中所示的“确定程序差异”对话框。
- en: '![image](Images/fig23-2.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig23-2.jpg)'
- en: '*Figure 23-2: The Diff tool’s Determine Program Differences dialog*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*图23-2：差异工具的确定程序差异对话框*'
- en: While all available differences fields will be selected by default, in this
    case Bytes is the appropriate choice to confirm that the patch worked correctly,
    so it is the only difference option selected. When you click OK, you can see the
    two binaries in the Listing window, which has been split into side-by-side listings,
    with one file displayed in each. By default, the listings are synchronized, so
    navigating in one also navigates the other. There are several ways to navigate
    the detected differences within this tool, which we present later in the chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然所有可用的差异字段默认都会被选中，但在这种情况下，选择“字节”是确认补丁是否正确工作的适当选择，因此它是唯一被选中的差异选项。当你点击“确定”时，你可以在列表窗口中看到这两个二进制文件，窗口被分为左右两栏，每个文件显示在其中一栏。默认情况下，列表是同步的，因此在一个栏中导航时，另一个栏也会同步导航。本工具提供了多种方式来浏览检测到的差异，我们将在本章后面介绍这些方法。
- en: When you open two files for diffing, Ghidra initially positions the Listing
    view at the beginning of each file. The down arrow tool on the Listing window
    toolbar (or CTRL-ALT-N) may be used to navigate to the first difference between
    the two files. To call your attention to the differing code, changes are indicated
    with color-highlighted disassembly lines in each file’s Listing window as well
    as in the Decompiler window if the difference is within a function. (The Decompiler
    window is synchronized with the first of the two files.) Navigating to the first
    detected difference reveals the single byte that is `JZ` (74) in the original
    listing and `JNZ` (75) in the second listing.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打开两个文件进行差异比较时，Ghidra最初将列表视图定位在每个文件的开头。你可以使用列表窗口工具栏上的向下箭头工具（或CTRL-ALT-N）导航到两个文件之间的第一个差异。为了引起你对不同代码的注意，变化会通过颜色高亮的反汇编行在每个文件的列表窗口中显示，如果差异位于某个函数内，反汇编结果也会在反编译器窗口中显示。（反编译器窗口与两个文件中的第一个文件同步。）导航到第一个检测到的差异时，会显示原始列表中的单字节`JZ`（74）和第二个列表中的`JNZ`（75）。
- en: 'To view more details, choose **Window** ▸ **Diff** ▸ **Diff Details**. You
    will see the following report in the Diff Details window at the bottom of the
    CodeBrowser window:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看更多细节，请选择**窗口** ▸ **差异** ▸ **差异详情**。你将在CodeBrowser窗口底部的差异详情窗口中看到以下报告：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first line indicates the number of address ranges that contain differences.
    In this case, only one range in the file contains differences, so you can be confident
    that the two programs differ by only a single byte. This simple example barely
    scratches the surface of the capabilities associated with Ghidra’s Program Diff
    tool, so let’s take some time to investigate other capabilities that this tool
    provides.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行显示包含差异的地址范围的数量。在这个例子中，文件中只有一个范围包含差异，因此你可以确定这两个程序仅在一个字节上有所不同。这个简单的例子只是触及了Ghidra程序差异工具的能力表面，因此让我们花一些时间来探讨这个工具提供的其他功能。
- en: '***Program Diff Tool***'
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***程序差异工具***'
- en: The nine options at the top of [Figure 23-2](ch23.xhtml#fig23_2) form the basis
    of your comparison, and you can select any or all of them. By default, the Program
    Diff tool operates on the entire program for each file. If you wish to limit your
    comparison to a specific address range, you must highlight the range in the first
    file before opening the tool. Once you have made your selections and clicked OK,
    the split Listing window you see is called a Program Diff.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[图23-2](ch23.xhtml#fig23_2)顶部的九个选项构成了你的比较基础，你可以选择其中的任何一个或全部。默认情况下，程序差异工具对每个文件的整个程序进行操作。如果你希望将比较限制在特定的地址范围内，你必须在打开工具之前先在第一个文件中高亮选择该范围。一旦你做出了选择并点击“确定”，你看到的分屏列表窗口就叫做程序差异。'
- en: '##### **Program Diff**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '##### **程序差异**'
- en: Program Diff View lets you view both files simultaneously. Basically, the Listing
    window now has two listings, one on the left side and one on the right. When you
    open the Diff Details window, it opens at the bottom of the CodeBrowser window.
    Within the Diff Details window, the left file is considered Program1 (the file
    you opened originally), while the right file is considered Program2 (the file
    you chose to compare to Program1). The Decompiler window reflects the contents
    of Program1\. When you are comparing two files, Ghidra can compute the differences
    in either direction. It is up to you to remember which file is which as you use
    the Program Diff tool.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 程序差异视图让你同时查看两个文件。基本上，列表窗口现在有两个列表，左侧一个，右侧一个。当你打开差异详情窗口时，它会出现在CodeBrowser窗口的底部。在差异详情窗口中，左侧文件被视为程序1（你最初打开的文件），而右侧文件被视为程序2（你选择与程序1进行比较的文件）。反编译器窗口反映的是程序1的内容。当你比较两个文件时，Ghidra可以计算两个文件之间的差异，可以是任意方向。你需要记住哪个文件是哪个，使用程序差异工具时自行区分。
- en: A common workflow is to begin analyzing a file and then realize that some or
    all of the code looks familiar, which may prompt you to open a file you have previously
    analyzed in order to begin diffing. Fortunately, Program Diff maintains alignment
    between the two files by inserting blank lines when necessary. Differences are
    highlighted, and the Program Diff toolbar provides you navigational capability
    and the means to determine how you wish to handle the differences.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的工作流程是开始分析一个文件后，发现部分或全部代码看起来很熟悉，这可能会促使你打开一个之前分析过的文件来开始进行差异比较。幸运的是，程序差异会通过必要时插入空行来保持两个文件之间的对齐。差异会被高亮显示，程序差异工具栏为你提供了导航功能，并帮助你确定如何处理这些差异。
- en: '**Program Diff Toolbar**'
  id: totrans-23
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**程序差异工具栏**'
- en: The Program Diff toolbar extends the Listing window toolbar options by adding
    the tools shown in [Figure 23-3](ch23.xhtml#fig23_3).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 程序差异工具栏通过添加[图23-3](ch23.xhtml#fig23_3)中显示的工具，扩展了列表窗口的工具栏选项。
- en: '![image](Images/fig23-3.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig23-3.jpg)'
- en: '*Figure 23-3: Program Diff toolbar options*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*图23-3：程序差异工具栏选项*'
- en: '##### **Diff Apply Settings**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '##### **差异应用设置**'
- en: The Diff Apply Settings define the actions that you would like to take when
    there is a difference between the two files. Choosing the Display Diff Apply Settings
    option displays the window shown in [Figure 23-4](ch23.xhtml#fig23_4).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 差异应用设置定义了当两个文件之间存在差异时，你希望采取的操作。选择“显示差异应用设置”选项，将显示[图23-4](ch23.xhtml#fig23_4)中显示的窗口。
- en: '![image](Images/fig23-4.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig23-4.jpg)'
- en: '*Figure 23-4: Diff Apply Settings window*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*图23-4：差异应用设置窗口*'
- en: 'Each setting specifies a default action you would like to apply from the second
    program to the first program you opened and how you would like that option applied.
    The following four options are available from each drop-down:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每个设置指定了你希望如何将第二个程序的操作应用于你打开的第一个程序，并且如何应用该选项。以下四个选项可以从每个下拉菜单中选择：
- en: '**Ignore** Do not change the first program (available for all cases).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**忽略** 不更改第一个程序（适用于所有情况）。'
- en: '**Replace** Change the first program’s content to match the second program’s
    content (available for all cases).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**替换** 将第一个程序的内容更改为与第二个程序的内容匹配（适用于所有情况）。'
- en: '**Merge** Add the difference from the second program to the first program.
    If applied to a label, this will not change which label is set to primary (available
    for only Comments and Labels).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**合并** 将第二个程序中的差异添加到第一个程序中。如果应用于标签，这将不会改变哪个标签被设置为主标签（仅适用于评论和标签）。'
- en: '**Merge & Set Primary** The action is the same as Merge, but the primary label
    is set to the second program label if that is possible (available for only Labels).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**合并并设置为主标签** 该操作与“合并”相同，但如果可能，主标签将设置为第二个程序的标签（仅适用于标签）。'
- en: At the top of [Figure 23-4](ch23.xhtml#fig23_4), there are two toolbar icons.
    The Save as Default icon saves the current Diff Apply Settings. The arrow opens
    a menu that allows you to make changes to all of the settings at one time by choosing
    one of the options shown in [Figure 23-5](ch23.xhtml#fig23_5).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图23-4](ch23.xhtml#fig23_4)的顶部，有两个工具栏图标。保存为默认图标保存当前的差异应用设置。箭头图标打开一个菜单，允许你通过选择[图23-5](ch23.xhtml#fig23_5)中显示的选项，一次性更改所有设置。
- en: '![image](Images/fig23-5.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig23-5.jpg)'
- en: '*Figure 23-5: Diff Apply Settings pull-down menu*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*图23-5：差异应用设置下拉菜单*'
- en: If you select the Set Merge option and Merge is not a valid choice for a particular
    setting, it will be changed to Set Replace. For labels, it will be changed to
    Merge & Set Primary.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择“设置合并”选项，并且“合并”不是特定设置的有效选项，则该选项将更改为“设置替换”。对于标签，将更改为“合并并设置为主标签”。
- en: Choose Apply Differences from the toolbar if you wish to apply all of the default
    changes. When you have finished with the Program Diff tool, toggle the Diff View
    icon in the Listing window and you will see the dialog displayed in [Figure 23-6](ch23.xhtml#fig23_6).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望应用所有默认更改，请从工具栏中选择“应用差异”。完成程序差异工具后，切换列表窗口中的差异视图图标，你将看到[图23-6](ch23.xhtml#fig23_6)中显示的对话框。
- en: '![image](Images/fig23-6.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig23-6.jpg)'
- en: '*Figure 23-6: Close Diff Session confirmation dialog*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*图23-6：关闭差异会话确认对话框*'
- en: Confirming that you wish to close the current diff session will close the display
    of the second file and return you to a normal Listing window with the first file
    (and all of the changes that you have selected from the diff analysis) displayed.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 确认你希望关闭当前差异会话后，将关闭第二个文件的显示，并返回到正常的列表窗口，显示第一个文件（以及你从差异分析中选择的所有更改）。
- en: 'The Program Diff tool was designed for two primary use cases: first, to compare
    files analyzed by two different users who don’t share a Ghidra Server instance;
    second, to compare code generated from different versions of the same source code
    base (for example, unpatched and patched versions of a shared library). In the
    following example, we walk through the process of using this tool to reconcile
    two copies of the same binary, each of which was analyzed independently.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 程序差异工具设计了两个主要用例：首先，用于比较由两个不同用户分析的文件，这些用户没有共享Ghidra服务器实例；其次，用于比较由同一个源代码库的不同版本生成的代码（例如，未修补和修补的共享库版本）。在以下示例中，我们将演示如何使用此工具来协调两份相同二进制文件的差异，每个文件都是独立分析的。
- en: '***Example: Merging Two Analyzed Files***'
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***示例：合并两个已分析的文件***'
- en: Assume that you are analyzing a binary that contains a crypto routine. A colleague
    mentions that she is midway through analyzing a binary that also appears to have
    a crypto routine and is likely from the same malware family. She agrees to provide
    you with her project so that you can compare the two files. When you look at the
    files in Diff View, you immediately notice that the two of you appear to be analyzing
    the same binary.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在分析一个包含加密例程的二进制文件。一位同事提到她正在分析一个似乎也包含加密例程的二进制文件，且很可能来自同一家恶意软件家族。她同意将她的项目提供给你，以便你可以比较这两个文件。当你在“差异视图”中查看这些文件时，你立刻注意到你们似乎正在分析相同的二进制文件。
- en: The challenge is that you have each made progress and have modified the contents
    of the file based on your individual analysis. You need to merge the two analyzed
    files so that you can each benefit from the other’s analysis. You have agreed
    to take on this responsibility and have opened your binary in the CodeBrowser
    and initiated a Program Diff session, adding your colleague’s binary for comparison.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 挑战在于，你们各自根据个人分析进展并修改了文件内容。你们需要合并两个已分析的文件，以便互相受益。你们已同意承担这一责任，并在CodeBrowser中打开了你的二进制文件，启动了程序差异会话，并添加了同事的二进制文件进行比较。
- en: 'Choosing the down arrow on the Program Diff toolbar takes you to the first
    difference in this file. At this point, you can open the Diff Details window by
    choosing the option from the Program Diff toolbar (or hotkey F5). This provides
    you with the following listing (broken into two sections to facilitate discussion).
    In the first section at the top of the Diff Details, you see the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在“程序差异”工具栏上选择向下箭头将带你到此文件中的第一个差异。在此时，你可以通过选择“程序差异”工具栏中的选项（或快捷键F5）打开“差异详情”窗口。此窗口会为你提供以下列表（分为两部分以便讨论）。在“差异详情”顶部的第一部分，你将看到以下内容：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first of four identified difference address ranges ➊ in this file is being
    displayed and is associated with the current address, `0010075a` ➋. The listing
    begins by detailing a difference in the function headers of the two binaries ➌.
    For your binary, you have provided a meaningful name for the function and the
    parameters in the function signature ➍. Further, each parameter has an appropriately
    defined type ➎. Likewise, the local variables have been given meaningful names
    and types ➏. In the second program ➐, the analyst did not make any changes to
    the default Ghidra header for the corresponding function.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件中识别出的四个差异地址范围中的第一个➊正在显示，并与当前地址`0010075a` ➋相关联。列表首先详细描述了两个二进制文件的函数头部差异➌。对于你的二进制文件，你已经为函数及其签名中的参数提供了有意义的名称
    ➍。此外，每个参数都有适当定义的类型 ➎。类似地，本地变量也赋予了有意义的名称和类型 ➏。在第二个程序中 ➐，分析师没有对相应函数的默认Ghidra头部进行任何修改。
- en: You want to retain your version of the changes for the function definition and
    local variables. You could use the toolbar icon to reject the change, but this
    would reject all of the differences associated with this address. Since you have
    not yet reviewed all of the differences, just scroll down to the next difference
    in the Diff Details window.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望保留你对函数定义和本地变量所做的更改版本。你可以使用工具栏图标来拒绝此更改，但这将拒绝与该地址相关的所有差异。由于你还没有审查所有差异，因此只需向下滚动到“差异详情”窗口中的下一个差异即可。
- en: The next section of the differences associated with the first address range
    contains the label and comment differences.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 与第一个地址范围相关的下一个差异部分包含标签和注释的差异。
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Within the label differences ➊, the only difference is the name of the function
    ➋ ➌, which has already been discussed. In the `Plate-Comment` section ➍, your
    file has a detailed comment ➎, but the other file has no plate comments. In the
    `EOL-Comment` section ➏, there is a brief comment by the other analyst ➐ but none
    in your file. When you examine the comment, you see that it is a `TODO` action
    item that you have already done in your file.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在标签差异中 ➊，唯一的差异是函数的名称 ➋ ➌，这一点已经讨论过。在`Plate-Comment`部分 ➍，你的文件有详细的注释 ➎，而另一个文件没有板注释。在`EOL-Comment`部分
    ➏，另一位分析师有一个简短的注释 ➐，而你的文件中没有。在查看该注释时，你会发现它是一个`TODO`操作项，而你在文件中已经完成了该操作。
- en: 'After evaluating all of the differences between the two files, your decision
    is to retain your content and not accept any new content from the other binary.
    You accomplish this by choosing the Ignore Differences and Move icon. This takes
    you to the next difference. Since you already have the Diff Details window open,
    its contents are updated as soon as you navigate, and you see the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在评估了两个文件之间的所有差异后，你决定保留你的内容，并不接受来自另一个二进制文件的任何新内容。你通过选择“忽略差异并移动”图标来完成这个操作。这将带你到下一个差异。由于你已经打开了差异详情窗口，一旦你导航，它的内容会立即更新，你会看到以下内容：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You have decreased the number of ranges containing differences by rejecting
    the previous difference ➊. Once again, your file has more information than the
    second file. This time you will navigate to the next difference by clicking the
    down arrow. This takes you to the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过拒绝之前的差异➊，减少了包含差异的范围数量。再次强调，你的文件比第二个文件包含更多信息。这一次，你将通过点击下箭头来导航到下一个差异。这将带你到以下内容：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice that the number of ranges has not changed ➊. You have just been moved
    to the next difference range without impacting the total number of difference
    ranges. Evaluating this new difference shows that the second file contains information
    provided by the other analyst that is not available in your file. The function
    signature has a return type, and a parameter has been added to the function signature
    ➋. You can include this in your binary by right-clicking the difference in the
    right-hand Listing window and choosing Apply Selection (hotkey F3), or by clicking
    the Apply Differences icon on the toolbar.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到差异范围的数量没有变化➊。你只是被移动到下一个差异范围，而没有影响总的差异范围数量。评估这个新的差异显示第二个文件包含了由另一个分析员提供的信息，而这些信息在你的文件中并不存在。函数签名有一个返回类型，并且已经在函数签名中添加了一个参数➋。你可以通过右键点击右侧列表窗口中的差异，并选择“应用选择”（快捷键
    F3），或者点击工具栏上的“应用差异”图标，将其包含到你的二进制文件中。
- en: 'Navigating to the next difference, you see the following details:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到下一个差异后，你会看到以下详细信息：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The number of difference ranges has decreased because you applied the differences
    in the previous range ➊. In this final difference, you see an interesting entry
    in the `Pre-Comment` section ➋ in the other file. The analyst has detected a potential
    vulnerability. To be sure this information is included in your file, you choose
    **Apply Differences**.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 差异范围的数量减少了，因为你在之前的范围中应用了差异➊。在这个最终的差异中，你看到另一个文件的`预注释`部分➋中有一个有趣的条目。分析员发现了一个潜在的漏洞。为了确保这个信息被包含到你的文件中，你选择**应用差异**。
- en: Now that you have completed the comparison of the two files, you can click the
    Diff View icon and confirm that you want to close the current Program Diff session.
    Your listing view now reflects the combined analysis from both binaries, and you
    can save and close your file.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经完成了两个文件的比较，你可以点击“差异视图”图标，并确认你要关闭当前的程序差异会话。你的列表视图现在反映了来自两个二进制文件的综合分析，你可以保存并关闭文件。
- en: The Ghidra Program Diff tool provides the ability to investigate the differences
    between two versions of the same file. While it will attempt to diff two unrelated
    files, any results are likely to reflect only coincidental similarities. Let’s
    shift our focus to a different tool that facilitates comparisons between selected
    functions within the same or different programs.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Ghidra 程序差异工具提供了调查同一文件两个版本之间差异的功能。尽管它会尝试对比两个无关的文件，但任何结果很可能仅反映出巧合的相似性。让我们将注意力转向另一个工具，它便于在相同或不同程序之间比较选定的函数。
- en: '**Comparing Functions**'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**比较函数**'
- en: If you see a function that is reminiscent of a function you have analyzed in
    the past, it can be helpful to directly compare the two functions so the outcome
    of your initial analysis can be applied to the current function when appropriate.
    Ghidra provides this capability through its Function Comparison window which allows
    you to view two functions at the same time as shown in [Figure 23-7](ch23.xhtml#fig23_7).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到一个函数，它让你想起你以前分析过的某个函数，那么直接比较这两个函数会很有帮助，这样你就能在适当的时候将你初步分析的结果应用到当前函数上。Ghidra
    提供了这个功能，通过其函数比较窗口，你可以同时查看两个函数，如[图 23-7](ch23.xhtml#fig23_7)所示。
- en: '![image](Images/fig23-7.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig23-7.jpg)'
- en: '*Figure 23-7: Listing view in Function Comparison window*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 23-7：函数比较窗口中的列表视图*'
- en: '***Function Comparison Window***'
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***函数比较窗口***'
- en: To use the Function Comparison window, open the one or more binaries that contain
    the functions in the CodeBrowser, load an initial function by highlighting a function
    in the active CodeBrowser tab, and select Compare Selected Functions (hotkey SHIFT-C)
    from the right-click context menu. The Function Comparison window shows two functions
    side by side with potential differences highlighted, as shown in [Figure 23-7](ch23.xhtml#fig23_7).
    (If you have selected only one function, it will be displayed in both windows
    until you load more functions.)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用函数比较窗口，请在代码浏览器中打开包含函数的一个或多个二进制文件，通过在活动代码浏览器标签中突出显示一个函数来加载初始函数，然后从右键上下文菜单中选择“比较选定函数”（快捷键
    SHIFT-C）。函数比较窗口将并排显示两个函数，并突出显示潜在的差异，如[图 23-7](ch23.xhtml#fig23_7)所示。（如果您只选择了一个函数，它将在两个窗口中显示，直到您加载更多函数。）
- en: To add additional functions to compare, choose the Add Functions icon ➊. This
    will display a list of all functions in the active program in the CodeBrowser.
    You can select a function from the list or switch to the CodeBrowser window to
    change the active program by selecting another program tab in the Listing window.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加更多函数进行比较，请选择添加函数图标 ➊。这将显示活动程序中所有函数的列表，您可以从列表中选择一个函数，或切换到代码浏览器窗口，通过选择列表窗口中的其他程序标签来更改活动程序。
- en: To the left of the active listing (indicated by a box around the listing ➏)
    is a cursor arrow ➐. If the functions match, the arrow will also appear at the
    same location in the other window. In [Figure 23-7](ch23.xhtml#fig23_7), the instruction
    in the primary window does not match the instruction in the other window, so the
    cursor arrow is not shown in both windows.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在活动列表的左侧（由框住的列表 ➏ 表示）是一个光标箭头 ➐。若函数匹配，箭头也将在另一个窗口的相同位置出现。在[图 23-7](ch23.xhtml#fig23_7)中，主窗口中的指令与另一个窗口中的指令不匹配，因此光标箭头在两个窗口中都没有显示。
- en: The Function Comparison window provides the opportunity to load more than two
    functions from more than two binaries. You can add and remove functions from each
    panel when needed. A helpful pull-down menu lets you choose the function to be
    displayed in the associated window ➋ ➌.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 函数比较窗口提供了加载多个二进制文件中的多个函数的机会。您可以根据需要从每个面板中添加或删除函数。一个有用的下拉菜单让您选择在关联窗口 ➋ ➌ 中显示的函数。
- en: This window lets you easily switch between Decompile View ➍ and Listing View
    ➎ for the two functions and change the function displayed in either window. The
    Decompile View for this example is shown in [Figure 23-8](ch23.xhtml#fig23_8).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 该窗口让您轻松在反编译视图 ➍ 和列表视图 ➎ 之间切换，並可以更改每个窗口中显示的函数。该示例的反编译视图如[图 23-8](ch23.xhtml#fig23_8)所示。
- en: '![image](Images/fig23-8.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig23-8.jpg)'
- en: '*Figure 23-8: Decompile view in the Function Comparison window*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 23-8：函数比较窗口中的反编译视图*'
- en: The exploratory capabilities available in this window overlap significantly
    with the Program Diff tool, except you are comparing only two functions at a time
    and you can easily switch between the decompiled code and the listing. The toolbar
    menu for this window is shown in [Figure 23-9](ch23.xhtml#fig23_9).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 该窗口中可用的探索功能与程序差异工具有很大的重叠，唯一的区别是您一次只比较两个函数，并且可以轻松在反编译代码和列表之间切换。该窗口的工具栏菜单如[图 23-9](ch23.xhtml#fig23_9)所示。
- en: '![image](Images/fig23-9.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig23-9.jpg)'
- en: '*Figure 23-9: Function Comparison toolbar options*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 23-9：函数比较工具栏选项*'
- en: Let’s walk through an example that demonstrates some additional Function Comparison
    tool capabilities.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个示例来演示一些额外的函数比较工具功能。
- en: '#### ***Example: Comparing Crypto Routines***'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '#### ***示例：比较加密例程***'
- en: Congratulations on your promotion! Based on your successful analysis and use
    of the Program Diff tool for crypto routines, you have now been labeled the crypto
    expert in your shop. Every time one of your colleagues suspects that they have
    a crypto routine, they send you the binary to see if it is a crypto routine you
    recognize.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜晋升！基于您在加密例程分析和使用程序差异工具方面的成功，您现在已经被标记为您所在工作组的加密专家。每次同事怀疑他们有加密例程时，他们都会将二进制文件发给您，看看是否是您认出的加密例程。
- en: 'You now have a new file from a colleague and wish to determine whether the
    crypto routine used in this file is something new or is a routine you have identified
    in the past. Rather than loading and comparing each crypto routine against the
    new function, you have set up a special Ghidra project that contains all of your
    previously analyzed and documented crypto routines. Your goal is to load your
    crypto routines on one side of the Function Comparison window and then import
    the new file on the other side to compare against the existing crypto routines.
    (To simplify this example, you currently have only one analyzed crypto routine
    in your collection: the ROT13 routine that you merged in the previous example.)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你有了一个同事发来的新文件，想要确定这个文件中使用的加密例程是新例程还是你之前已经识别过的例程。与其加载并将每个加密例程与新函数进行比较，你设置了一个特别的
    Ghidra 项目，其中包含了你之前分析和记录的所有加密例程。你的目标是将你的加密例程加载到函数比较窗口的一侧，然后将新文件导入到另一侧进行比较。（为了简化此示例，你目前的收藏中只有一个已分析的加密例程：你在之前示例中合并的
    ROT13 例程。）
- en: After you load your complete collection of analyzed crypto files into the CodeBrowser
    and have loaded your function, `encrypt_rot13`, in the Function Comparison window,
    you need to load the new file into the same CodeBrowser instance (File ▸ Open)
    and make it the active file. At this point, you can explore the file, but it isn’t
    necessary. You can always switch back to the CodeBrowser window if you can’t find
    the function you need. In this case, choosing the Add Functions option from the
    Function Comparison toolbar, you see the complete list of functions in the new
    binary, and halfway down the list is a function with a name that intrigues you,
    `encrypt`, as shown in [Figure 23-10](ch23.xhtml#fig23_10).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在你将完整的已分析加密文件集加载到 CodeBrowser 并在函数比较窗口中加载了你的函数`encrypt_rot13`之后，你需要将新文件加载到同一个
    CodeBrowser 实例中（文件 ▸ 打开）并将其设置为活动文件。此时，你可以探索文件，但并不是必须的。如果你找不到需要的函数，你始终可以切换回 CodeBrowser
    窗口。在这种情况下，选择函数比较工具栏中的“添加函数”选项，你会看到新二进制文件中完整的函数列表，在列表中间有一个名字引起你兴趣的函数`encrypt`，如[图
    23-10](ch23.xhtml#fig23_10)所示。
- en: '![image](Images/fig23-10.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig23-10.jpg)'
- en: '*Figure 23-10: Select Functions window with the* encrypt *function selected*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 23-10：选定* encrypt *函数的选择函数窗口*'
- en: A cursory glance at the loaded files in the Decompile View of the functions,
    shown in [Figure 23-11](ch23.xhtml#fig23_11), suggests that these two functions
    are quite different.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 从[图 23-11](ch23.xhtml#fig23_11)中显示的已加载函数的反编译视图中，粗略一看，这两个函数似乎非常不同。
- en: '![image](Images/fig23-11.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig23-11.jpg)'
- en: '*Figure 23-11: Decompile View of Function Comparison window for two crypto
    routines*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 23-11：两个加密例程的反编译视图的函数比较窗口*'
- en: The Listing View, shown in [Figure 23-12](ch23.xhtml#fig23_12), confirms that
    these two functions have significant differences.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 23-12](ch23.xhtml#fig23_12)中显示的列表视图确认了这两个函数有显著的差异。
- en: '![image](Images/fig23-12.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig23-12.jpg)'
- en: '*Figure 23-12: Listing View of Function Comparison window for two crypto routines
    with differences highlighted*'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 23-12：显示差异的两个加密例程的函数比较窗口的列表视图*'
- en: On further analysis, you discover that the new routine XORs each byte with the
    constant value `0xa5`. This is definitely different from the current crypto routine
    that you have, so you name and document this new function and add it to your collection
    (which will then have two members!). Returning to the CodeBrowser, you update
    the function signature and add comments to document the new crypto routine. The
    changes you make are reflected in the Function Comparison window as well.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步分析后，你发现新例程将每个字节与常数值`0xa5`进行异或。这与当前的加密例程明显不同，因此你为这个新函数命名并进行文档记录，并将其添加到你的收藏中（这样你的收藏将有两个成员！）。回到
    CodeBrowser，你更新了函数签名并添加了注释，以文档化这个新的加密例程。你所做的更改也会在函数比较窗口中反映出来。
- en: As you are documenting, you notice the new binary has a function called `display_message`,
    as does the binary you are comparing it against. You recall that this function
    was identified as having a vulnerability in your current binary, so you decide
    to compare these two functions. You load them into the Function Comparison window
    to see if they have similarities beyond the common name. They seem different in
    both the Decompile and Listing Views, as shown in [Figure 23-13](ch23.xhtml#fig23_13).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在记录时，你注意到新二进制文件中有一个名为`display_message`的函数，与你正在比较的二进制文件中的函数相同。你回忆起在当前二进制文件中这个函数被识别为存在漏洞，因此你决定比较这两个函数。你将它们加载到功能比较窗口中，看看它们是否在常见名称之外还有相似之处。在反编译视图和列表视图中，它们似乎是不同的，如[图23-13](ch23.xhtml#fig23_13)所示。
- en: '![image](Images/fig23-13.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig23-13.jpg)'
- en: '*Figure 23-13: Decompile and Listing views for* display_message *functions*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*图23-13：`display_message`函数的反编译和列表视图*'
- en: In the second example, `param_1` is being passed to `puts` for output, which
    fixes the vulnerability.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个示例中，`param_1`被传递给`puts`进行输出，从而修复了漏洞。
- en: 'Now that you have documented this crypto routine, you see that you have received
    yet another binary from your colleagues. To reset to the start of your crypto
    comparison process, you can use the Function Comparison toolbar icon to remove
    the `display_message` functions from the window, leaving you with your crypto
    routine collection, which now has two distinct members: `encrypt_rot13` and `encrypt_XOR_a5`.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经记录了这个加密例程，你发现又收到了来自同事的另一个二进制文件。为了重新开始你的加密比较过程，你可以使用功能比较工具栏图标，移除窗口中的`display_message`函数，留下你的加密例程集合，现在它有两个不同的成员：`encrypt_rot13`和`encrypt_XOR_a5`。
- en: 'An initial exploration of this new file indicates that three functions seem
    to involve encryption: `encrypt`, `encrypt_strong`, and `encrypt_super_strong`.
    You load these into the Function Comparison window so you can compare them to
    your existing crypto routines. After comparing `encrypt_rot13` against each of
    the new functions, you notice the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个新文件的初步探索表明，三个函数似乎涉及加密：`encrypt`、`encrypt_strong`和`encrypt_super_strong`。你将它们加载到功能比较窗口中，以便将它们与你现有的加密例程进行比较。比较`encrypt_rot13`与每个新函数后，你注意到以下几点：
- en: encrypt_rot13 **vs.** encrypt Almost entirely different. The `encrypt` routine
    is just a test that may call one of the other two encryption routines.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: encrypt_rot13 **vs.** encrypt 几乎完全不同。`encrypt`例程只是一个测试，可能会调用另外两个加密例程中的一个。
- en: encrypt_rot13 **vs.** encrypt_strong Almost entirely the same.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: encrypt_rot13 **vs.** encrypt_strong 几乎完全相同。
- en: encrypt_rot13 **vs.** encrypt_super_strong Very different. A closer look at
    the differences between these two functions leads you to believe that they are
    not the same function.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: encrypt_rot13 **vs.** encrypt_super_strong 非常不同。更仔细地看这两个函数之间的差异后，你认为它们不是同一个函数。
- en: A closer look at the differences shows that the instructions in `encrypt_rot13`
    and `encrypt_strong` are identical—the differences primarily consist of address
    labels, as shown in [Figure 23-14](ch23.xhtml#fig23_14).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 更仔细地看差异后发现，`encrypt_rot13`和`encrypt_strong`中的指令是完全相同的——差异主要是地址标签，如[图23-14](ch23.xhtml#fig23_14)所示。
- en: '![image](Images/fig23-14.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig23-14.jpg)'
- en: '*Figure 23-14: Function Comparison window with address label differences*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*图23-14：功能比较窗口中的地址标签差异*'
- en: You would not expect address labels to match perfectly in this case, as the
    locations of the functions within the binaries are different. The locations are
    consistent relative to the current address, so we are likely dealing with the
    same function. The only other difference is 1 byte associated with the call to
    `strlen`, as shown in [Figure 23-15](ch23.xhtml#fig23_15). This is a similar issue
    and can be explained by the difference in the relative positions of the encryption
    function and `strlen` in each binary.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你不期望地址标签在这种情况下完全匹配，因为函数在二进制文件中的位置不同。位置是相对于当前地址保持一致的，所以我们可能正在处理相同的函数。唯一的其他差异是与调用`strlen`相关的1个字节，如[图23-15](ch23.xhtml#fig23_15)所示。这是一个类似的问题，可以通过加密函数和`strlen`在每个二进制文件中的相对位置差异来解释。
- en: '![image](Images/fig23-15.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig23-15.jpg)'
- en: '*Figure 23-15: Function Comparison window with byte difference in call to*
    strlen'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*图23-15：功能比较窗口中调用`strlen`时的字节差异*'
- en: After determining that these are the same function, you can right-click the
    previously analyzed function and choose Apply Function Signature To Other Side
    from the right-click context window. This will update the function signature in
    all needed locations, including the Listing window and Symbol Tree. Note that
    the Function Comparison window does not provide all of the capabilities available
    in the Diff View. To copy additional information (such as the detailed comments
    associated with the function), use the Program Diff tool.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 确定这两个是相同的函数后，你可以右键点击之前分析的函数，并从右键菜单中选择“将函数签名应用于另一边”。这将更新所有需要的地方的函数签名，包括列表窗口和符号树。请注意，函数比较窗口并没有提供
    Diff View 中所有可用的功能。要复制更多的信息（如与函数相关的详细评论），请使用程序差异工具。
- en: 'Having completed your comparative analysis of `encrypt_rot13`, you turn your
    attention to `encrypt_XOR_a5` and observe the following relationships with each
    of the new functions:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成 `encrypt_rot13` 的比较分析后，你将注意力转向 `encrypt_XOR_a5`，并观察到与每个新函数之间的以下关系：
- en: encrypt_XOR_a5 **vs.** encrypt Almost entirely different.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: encrypt_XOR_a5 **与** encrypt 完全不同。
- en: encrypt_XOR_a5 **vs.** encrypt_strong Very different. A closer look at the differences
    between these two functions also leads you to believe that they are not the same
    function.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: encrypt_XOR_a5 **与** encrypt_strong 非常不同。更仔细地观察这两个函数之间的差异，也使你相信它们不是同一个函数。
- en: encrypt_XOR_a5 **vs.** encrypt_super_strong Almost entirely the same.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: encrypt_XOR_a5 **与** encrypt_super_strong 几乎完全相同。
- en: The identified differences between `encrypt_XOR_a5` and `encrypt_super_strong`
    are also just address labels and some bytes in the call to `strlen`. You can handle
    this situation the same way you did the previous matching functions.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`encrypt_XOR_a5` 和 `encrypt_super_strong` 之间的差异仅仅是地址标签和在调用 `strlen` 时的一些字节。你可以像处理之前匹配的函数一样处理这个情况。'
- en: While this is a trivial example (and not likely consistent with the actual crypto
    routines you might see in the wild), it does demonstrate how Function Comparison
    can be used to minimize the duplication of analysis effort when you encounter
    familiar routines in new binaries.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这是一个微不足道的例子（并且不太可能与实际中你可能遇到的加密例程一致），但它展示了如何使用函数比较来减少分析工作的重复性，当你在新二进制文件中遇到熟悉的例程时。
- en: 'The final tool for investigating two files is the most complex: the Version
    Tracking tool.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 调查两个文件的最终工具是最复杂的：版本跟踪工具。
- en: '**Version Tracking**'
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**版本跟踪**'
- en: Imagine that you have spent months analyzing a very large binary. The binary
    has hundreds or thousands of functions and no symbols. As part of your effort,
    you have provided meaningful names to the majority of the functions; renamed data,
    local variables, and function parameters; and added a mountain of comments that
    would take days or longer to re-create.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你已经花了几个月的时间分析一个非常大的二进制文件。这个二进制文件包含了数百或数千个函数，并且没有符号。在你的分析过程中，你已经为大多数函数提供了有意义的名称；重新命名了数据、局部变量和函数参数；并且添加了大量评论，这些评论需要几天甚至更长的时间才能重新创建。
- en: Now imagine that a new version of the binary is released, and the world stops
    using the version you know so much about. You could continue to analyze the old
    version to learn more about it under the assumption that the new version behaves
    similarly, but you would fail to learn about any new or modified behaviors in
    the updated binary. Instead, you decide to begin working on the newer version
    of the binary and quickly realize that you spend significant amounts of time reading
    the markup in the older binary to help guide you through the new binary.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在想象一下，一个新版本的二进制文件发布了，而全世界不再使用你所熟悉的版本。你可以继续分析旧版本，假设新版本的行为类似，从中获取更多的信息，但你将无法了解新版本中新增或修改的行为。相反，你决定开始处理新版本的二进制文件，并迅速意识到，你花费了大量时间阅读旧版本中的标记，以帮助你理解新版本的内容。
- en: Alternating back and forth between two CodeBrowser windows is not an optimal
    use of your time. It’s time to switch from the CodeBrowser to the other default
    tool that Ghidra provides in the Project Tool Chest, as shown in [Figure 23-16](ch23.xhtml#fig23_16).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个 CodeBrowser 窗口之间来回切换并不是时间的最佳利用方式。是时候从 CodeBrowser 切换到 Ghidra 在项目工具箱中提供的另一个默认工具，如
    [图 23-16](ch23.xhtml#fig23_16) 所示。
- en: '![image](Images/fig23-16.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig23-16.jpg)'
- en: '*Figure 23-16: The Version Tracking tool (footprints) in the Project Tool Chest*'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 23-16：项目工具箱中的版本跟踪工具（痕迹）*'
- en: Ghidra’s Version Tracking tool is designed to help you with precisely this situation.
    Through the use of various correlators, Ghidra attempts to match items, such as
    functions or data, in a source binary with their corresponding versions in a destination
    binary. Once functions have been matched between the two binaries, Ghidra can
    automatically migrate information, including your labels and comments, from the
    source binary to the destination binary. In addition to rapidly migrating your
    existing analysis, the Version Tracking tool makes it easy to identify which things
    haven’t changed, which things have only minor changes (detected by diffing), and
    which things are entirely new.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Ghidra的版本追踪工具旨在帮助您处理这种情况。通过使用各种关联器，Ghidra尝试将源二进制文件中的项目（如函数或数据）与目标二进制文件中的相应版本进行匹配。一旦在两个二进制文件之间匹配了函数，Ghidra可以自动将信息（包括标签和注释）从源二进制文件迁移到目标二进制文件。除了快速迁移现有分析外，版本追踪工具还使得您能够轻松识别哪些内容没有改变，哪些内容仅有轻微变化（通过差异化检测），以及哪些内容是全新的。
- en: The Version Tracking tool is one of the most configurable tools in Ghidra, which
    makes it easy to adapt to a particular line of inquiry. It is also a challenging
    tool to present in its entirety. In the following sections, we walk you through
    the version tracking process at a very high level and point you to resources that
    can help you discover the correct settings and components to use when using the
    Version Tracking tool to assist you in discovering the relationship between two
    files.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 版本追踪工具是Ghidra中最具可配置性的工具之一，这使得它可以轻松适应特定的调查方向。它也是一个具有挑战性的工具，难以完整呈现。在接下来的章节中，我们将为您简要介绍版本追踪过程，并指引您使用资源来发现正确的设置和组件，帮助您利用版本追踪工具发现两个文件之间的关系。
- en: '***Version Tracking Concepts***'
  id: totrans-125
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***版本追踪概念***'
- en: 'While Function Comparison and Program Diff tools answered specific questions
    about the atomic differences between two files or functions, the Version Tracking
    tool provides you with functionality to answer a more holistic question: how similar
    are these two binaries, and can you highlight and provide insight about the similarities
    between them? The foundational work unit is called a *session*, and each session
    is configured to identify and handle *correlations* between two files.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然函数比较和程序差异工具回答了有关两个文件或函数之间原子差异的具体问题，但版本追踪工具为您提供了一个更全面的问题答案：这两个二进制文件有多相似？您能否突出显示并提供它们之间相似性的洞察？基础工作单元称为*会话*，每个会话都配置为识别和处理两个文件之间的*关联*。
- en: '**Correlators**'
  id: totrans-127
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**关联器**'
- en: 'At a high level, the Version Tracking tool is looking for correlations between
    two files. There are seven types of correlators that generate matches between
    two binaries:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 从高层次看，版本追踪工具在寻找两个文件之间的关联。有七种类型的关联器可以在两个二进制文件之间生成匹配：
- en: Data Match correlators
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据匹配关联器
- en: Function Match correlators
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数匹配关联器
- en: Legacy Import correlators
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传统导入关联器
- en: Implied correlators
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐含关联器
- en: Manual Match correlators
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动匹配关联器
- en: Symbol Name Match correlators
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符号名称匹配关联器
- en: Reference correlators
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用关联器
- en: 'Rather than just counting and compiling a list of specific differences in each
    of the categories, the Version Tracking tool extends correlations between the
    two files to identify matches with varying levels of exactness:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 与其仅仅列出每个类别中的具体差异，版本追踪工具通过扩展两个文件之间的关联，识别不同精确度级别的匹配项：
- en: '**Exact matches** These are one-to-one matches between the two files and can
    match data, function bytes, function instructions, or function mnemonics (for
    example, when two binaries contain the exact same function).'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**完全匹配** 这是两个文件之间的一对一匹配，可以匹配数据、函数字节、函数指令或函数助记符（例如，当两个二进制文件包含完全相同的函数时）。'
- en: '**Duplicate data match** These are exact matches that are not one-to-one matches
    (for example, when a string appears once in one file and seven times in the other
    file).'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**重复数据匹配** 这些是精确匹配，但并非一对一匹配（例如，当一个字符串在一个文件中出现一次，而在另一个文件中出现七次时）。'
- en: '**Similar matches** These are matches that pass a user-controlled similarity
    threshold. The matching is similar to the approach used for word models described
    in [Chapter 13](ch13.xhtml#ch13), but uses 4-grams as well as trigrams.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**相似匹配** 这些是通过用户控制的相似度阈值的匹配。该匹配方法类似于[第13章](ch13.xhtml#ch13)中描述的词模型方法，但使用的是四元组和三元组。'
- en: With the ability to introduce thresholds, and accept and reject matches, this
    tool offers a powerful capability to migrate your previous analysis to new versions
    of a binary. Further, the information associated with each session provides an
    effective analysis audit trail that can help capture the incremental changes of
    a binary or the evolution of a malware family.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置阈值以及接受和拒绝匹配，这个工具提供了一个强大的功能，可以将你之前的分析迁移到新版本的二进制文件。此外，与每个会话相关的信息提供了有效的分析审计跟踪，可以帮助捕捉二进制文件的增量变化或恶意软件家族的演变。
- en: '**Sessions**'
  id: totrans-141
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**会话**'
- en: 'While an in-depth walk-through of a complete session would take a significant
    amount of time, a basic version tracking session might include the following steps:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管全面介绍完整会话需要相当长的时间，但一个基本的版本追踪会话可能包括以下步骤：
- en: Open Ghidra's Version Tracking tool.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Ghidra 的版本追踪工具。
- en: Create a new session by choosing a source file and a destination file.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择源文件和目标文件来创建一个新会话。
- en: 'For all appropriate correlators: add to the existing session, choose the correlator,
    select all resulting matches, and accept all matches and apply their markup items.'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于所有适用的相关工具：添加到现有会话中，选择相关工具，选择所有匹配结果，接受所有匹配项并应用其标记项。
- en: Save the session.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存会话。
- en: Close the session.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭会话。
- en: The preceding workflow provides a very general overview, and the combinatorial
    potential associated with the correlator step is extensive. The potential of and
    the nuances associated with this tool cannot be covered in a single chapter. The
    Ghidra team has provided sample workflows (as well as significant documentation
    about the Version Tracking tool) in Ghidra Help. It is up to you to determine
    how best to apply the capabilities of this tool in your reverse engineering workflow.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 上述工作流提供了一个非常概括的概述，与相关步骤相关的组合潜力非常广泛。这个工具的潜力及其细微差别无法在一个章节中全面涵盖。Ghidra 团队已经在 Ghidra
    帮助文档中提供了示例工作流（以及关于版本追踪工具的重要文档）。如何在反向工程工作流中最有效地应用此工具的功能，取决于你自己。
- en: '**Summary**'
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter, we stepped away from a single binary to begin looking at ways
    to identify differences and similarities between binaries by using the Program
    Diff, Function Comparison, and Version Tracking tools. These tools are valuable
    time-savers for porting existing work to new binaries, merging annotations from
    your colleagues, and rapidly identifying exactly what has changed between two
    versions of the same program.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从单个二进制文件转向使用程序差异、函数比较和版本追踪工具来识别二进制文件之间的差异和相似之处。这些工具是将现有工作移植到新二进制文件、合并同事的注释以及快速识别两个版本之间的变化的宝贵节省时间的工具。
- en: As we wrap up our tour of Ghidra’s vast landscape of features, know that we
    have only scratched the surface of Ghidra’s capabilities. You should now have
    a deeper understanding of Ghidra and how it can be applied to the reverse engineering
    challenges you face. When you have questions, the Ghidra community is there to
    help through resources like GitHub, Stack Exchange, Reddit, YouTube, and many
    other forums.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们结束对 Ghidra 丰富功能的探索时，请知道我们仅仅触及了 Ghidra 能力的表面。你现在应该对 Ghidra 有了更深入的了解，知道如何将其应用于你所面临的反向工程挑战。当你有疑问时，Ghidra
    社区可以通过 GitHub、Stack Exchange、Reddit、YouTube 和许多其他论坛为你提供帮助。
- en: More importantly, you should now be in a position to contribute by answering
    questions and providing help to others. Ghidra is community-supported software
    and continually evolving. We hope you participate by posting tutorials, writing
    and publishing Ghidra scripts and modules, identifying and addressing issues,
    or perhaps even developing new functionality for Ghidra itself. The future of
    Ghidra will be determined by the community, and that now includes you. Welcome,
    and happy reversing!
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，你现在应该能够通过回答问题并为他人提供帮助来作出贡献。Ghidra 是一个由社区支持的软件，且在不断发展。我们希望你能参与其中，发布教程、编写和发布
    Ghidra 脚本和模块、识别并解决问题，甚至为 Ghidra 本身开发新功能。Ghidra 的未来将由社区决定，而现在你也是其中的一员。欢迎加入，祝你反向工程愉快！
