- en: '**5**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**5**'
- en: '**LISTS AND DATA FRAMES**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表和数据框**'
- en: '![image](../images/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common-01.jpg)'
- en: 'Vectors, matrices, and arrays are efficient and convenient data storage structures
    in R, but they have one distinct limitation: they can store only one type of data.
    In this chapter, you’ll explore two more data structures, lists and data frames,
    which can store multiple types of values at once.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 向量、矩阵和数组是R中高效且方便的数据存储结构，但它们有一个明显的限制：它们只能存储一种类型的数据。在本章中，你将探讨另外两种数据结构，列表和数据框，它们可以同时存储多种类型的值。
- en: '**5.1 Lists of Objects**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**5.1 对象的列表**'
- en: The *list* is an incredibly useful data structure. It can be used to group together
    any mix of R structures and objects. A single list could contain a numeric matrix,
    a logical array, a single character string, and a factor object. You can even
    have a list as a component of another list. In this section, you’ll see how to
    create, modify, and access components of these flexible structures.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表*是一种非常有用的数据结构。它可以用来将任何类型的R结构和对象组合在一起。一个单一的列表可以包含一个数值矩阵、一个逻辑数组、一个单一的字符字符串和一个因子对象。你甚至可以将一个列表作为另一个列表的组件。在本节中，你将学习如何创建、修改和访问这些灵活结构的组件。'
- en: '***5.1.1 Definition and Component Access***'
  id: totrans-6
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***5.1.1 定义和组件访问***'
- en: Creating a list is much like creating a vector. You supply the elements that
    you want to include to the `list` function, separated by commas.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个列表与创建一个向量非常类似。你将想要包含的元素提供给`list`函数，并用逗号分隔。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the list `foo`, you’ve stored a 2 × 2 numeric matrix, a logical vector, and
    a character string. These are printed in the order they were supplied to `list`.
    Just as with vectors, you can use the `length` function to check the number of
    components in a list.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表`foo`中，你存储了一个2 × 2的数值矩阵，一个逻辑向量和一个字符字符串。这些元素会按它们提供给`list`函数的顺序打印出来。与向量一样，你可以使用`length`函数检查列表中的组件数量。
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can retrieve components from a list using indexes, which are entered in
    double square brackets.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用索引来从列表中获取组件，索引是通过双中括号输入的。
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This action is known as a *member reference*. When you’ve retrieved a component
    this way, you can treat it just like a stand-alone object in the workspace; there’s
    nothing special that needs to be done.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作被称为*成员引用*。当你通过这种方式获取组件时，可以像对待工作区中的独立对象一样对待它；不需要做任何特殊处理。
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To overwrite a member of `foo`, you use the assignment operator.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要覆盖`foo`的某个成员，你可以使用赋值运算符。
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Suppose now you want to access the second and third components of `foo` and
    store them as one object. Your first instinct might be to try something like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 假设现在你想访问`foo`的第二和第三个组件，并将它们存储为一个对象。你可能的第一个直觉是尝试如下操作：
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: But R hasn’t done what you wanted. Instead, it returned the third element of
    the second component. This is because using double square brackets on a list is
    always interpreted with respect to a single member. Fortunately, member referencing
    with the double square brackets is not the only way to access components of a
    list. You can also use single square bracket notation. This is referred to as
    *list slicing*, and it lets you select multiple list items at once.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 但是R没有按你想要的方式工作。相反，它返回了第二个组件的第三个元素。这是因为在列表上使用双中括号总是按单个成员来解释的。幸运的是，使用双中括号进行成员引用并不是访问列表组件的唯一方式。你也可以使用单中括号表示法，这被称为*列表切片*，它允许你一次选择多个列表项。
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that the result `bar` is itself a list with the two components stored in
    the order in which they were requested.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，结果`bar`本身就是一个列表，其中包含按请求顺序存储的两个组件。
- en: '***5.1.2 Naming***'
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***5.1.2 命名***'
- en: You can *name* list components to make the elements more recognizable and easy
    to work with. Just like the information stored about factor levels (as you saw
    in [Section 4.3.1](ch04.xhtml#ch04lev2sec46)), a name is an R *attribute*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以*命名*列表组件，以便让元素更易于识别和操作。就像你在[第4.3.1节](ch04.xhtml#ch04lev2sec46)中看到的因子水平的信息一样，名称是R的*属性*。
- en: Let’s start by adding names to the list `foo` from earlier.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从之前的列表`foo`开始，给它添加名称。
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This has changed how the object is printed to the console. Where earlier it
    printed `[[1]]`, `[[2]]`, and `[[3]]` before each component, now it prints the
    names you specified: `$mymatrix`, `$mylogicals`, and `$mystring`. You can now
    perform member referencing using these names and the dollar operator, rather than
    the double square brackets.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这改变了对象在控制台上的打印方式。之前它在每个组件前打印`[[1]]`、`[[2]]`和`[[3]]`，现在它打印你指定的名称：`$mymatrix`、`$mylogicals`和`$mystring`。现在，你可以使用这些名称和美元符号运算符来进行成员引用，而不是使用双中括号。
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is the same as calling `foo[[1]]`. In fact, even when an object is named,
    you can still use the numeric index to obtain a member.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这与调用`foo[[1]]`是一样的。实际上，即使一个对象已命名，你仍然可以使用数字索引来获取一个成员。
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Subsetting named members also works the same way.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 子集化命名成员的工作方式也是相同的。
- en: '[PRE10]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This confirms (using the `all` function you saw in [Section 4.1.2](ch04.xhtml#ch04lev2sec38))
    that these two ways of extracting the second column of the matrix in `foo` provide
    an identical result.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这确认了（使用你在[第4.1.2节](ch04.xhtml#ch04lev2sec38)中看到的`all`函数）这两种提取`foo`中矩阵第二列的方法，提供了相同的结果。
- en: To name the components of a list as it’s being created, assign a label to each
    component in the `list` command. Using some components of `foo`, create a new,
    named list.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要在创建列表时命名其组件，可以在`list`命令中为每个组件分配一个标签。使用`foo`的一些组件，创建一个新的命名列表。
- en: '[PRE11]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The object `baz` now contains the three named components `tom`, `dick`, and
    `harry`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`baz`对象包含了三个命名组件`tom`、`dick`和`harry`。
- en: '[PRE12]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you want to rename these members, you can simply assign a character vector
    of length 3 to `names(baz)`, the same way you did for `foo` earlier.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想重命名这些成员，可以像之前为`foo`所做的那样，简单地将一个长度为3的字符向量赋值给`names(baz)`。
- en: '**NOTE**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*When using the* `names` *function, the component names are always provided
    and returned as character strings in double quotes. However, if you’re specifying
    names when a list is created (inside the* `list` *function) or using names to
    extract members with the dollar operator, the names are entered without quotes
    (in other words, they are* not *given as strings).*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*当使用* `names` *函数时，组件名称总是以双引号中的字符字符串形式提供和返回。然而，如果在创建列表时指定名称（在* `list` *函数内部），或者使用名称通过美元操作符提取成员时，名称则不带引号（换句话说，它们*不是*以字符串形式给出）。*'
- en: '***5.1.3 Nesting***'
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***5.1.3 嵌套***'
- en: As noted earlier, a member of a list can itself be a list. When nesting lists
    like this, it’s important to keep track of the depth of any member for subsetting
    or extraction later.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，列表的一个成员本身可以是一个列表。当像这样嵌套列表时，重要的是要跟踪任何成员的深度，以便稍后进行子集提取或提取。
- en: 'Note that you can add components to any existing list by using the dollar operator
    and a *new* name. Here’s an example using `foo` and `baz` from earlier:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你可以通过使用美元操作符和一个*新*名称，向任何现有列表添加组件。这里是一个使用之前的`foo`和`baz`的示例：
- en: '[PRE13]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here you’ve defined a fourth component to the list `baz` called `bobby`. The
    member `bobby` is assigned the entire list `foo`. As you can see by printing the
    new `baz`, there are now three components in `bobby`. Naming and indexes are now
    both layered, and you can use either (or combine them) to retrieve members of
    the inner list.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，你定义了一个名为`bobby`的第四个组件，属于列表`baz`。成员`bobby`被赋予整个列表`foo`。如你所见，通过打印新的`baz`，`bobby`现在有三个组件。名称和索引现在都是分层的，你可以使用任意一个（或结合使用）来提取内部列表的成员。
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: These all instruct R to return the first three elements of the logical vector
    stored as the second component (`[[2]]`, also named `mylogicals`) of the list
    `bobby`, which in turn is the fourth component of the list `baz`. As long as you’re
    aware of what is returned at each layer of a subset, you can continue to subset
    as needed using names and numeric indexes. Consider the third line in this example.
    The first layer of the subset is `baz[[4]]`, which is a list with three components.
    The second layer of subsetting extracts the component `mylogicals` from that list
    by calling `baz[[4]]$mylogicals`. This component represents a vector of length
    4, so the third layer of subsetting retrieves the first three elements of that
    vector with the line `baz[[4]]$mylogicals[1:3]`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指令告诉R返回存储为列表`bobby`的第二个组件（`[[2]]`，也名为`mylogicals`）中的逻辑向量的前三个元素，而`bobby`又是列表`baz`的第四个组件。只要你了解每一层子集返回的内容，就可以继续根据需要使用名称和数字索引进行子集化。考虑此示例中的第三行。子集的第一层是`baz[[4]]`，它是一个包含三个组件的列表。第二层子集通过调用`baz[[4]]$mylogicals`从该列表中提取组件`mylogicals`。这个组件代表一个长度为4的向量，所以第三层子集通过`baz[[4]]$mylogicals[1:3]`提取该向量的前三个元素。
- en: Lists are often used to return output from various R functions. But they can
    quickly become rather large objects in terms of system resources to store. It’s
    generally recommended that when you have only one type of data, you should stick
    to using basic vector, matrix, or array structures to record and store the observations.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 列表通常用于返回各种R函数的输出。但它们在系统资源上可能迅速变成相当大的对象。通常建议，当只有一种类型的数据时，应坚持使用基本的向量、矩阵或数组结构来记录和存储观察值。
- en: '**Exercise 5.1**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 5.1**'
- en: 'Create a list that contains, in this order, a sequence of 20 evenly spaced
    numbers between −4 and 4; a 3 × 3 matrix of the logical vector `c(F,T,T,T,F,T,T,F,F)`
    filled column-wise; a character vector with the two strings `"don"` and `"quixote"`;
    and a factor vector containing the observations `c("LOW","MED","LOW","MED","MED","HIGH")`.
    Then, do the following:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个列表，其中包含以下内容：按顺序排列的 20 个均匀分布的数字，介于 −4 和 4 之间；按列填充的 3 × 3 逻辑向量矩阵 `c(F,T,T,T,F,T,T,F,F)`；包含两个字符串
    `"don"` 和 `"quixote"` 的字符向量；以及包含观察值 `c("LOW","MED","LOW","MED","MED","HIGH")`
    的因子向量。然后执行以下操作：
- en: Extract row elements `2` and `1` of columns `2` and `3`, in that order, of the
    logical matrix.
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取逻辑矩阵中第 2 行、第 1 行的第 2 列和第 3 列元素，按此顺序。
- en: 'Use `sub` to overwrite `"quixote"` with `"Quixote"` and `"don"` with `"Don"`
    inside the list. Then, using the newly overwritten list member, concatenate to
    the console screen the following statement exactly:'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `sub` 将 `"quixote"` 替换为 `"Quixote"`，将 `"don"` 替换为 `"Don"`，并在列表中进行修改。然后，使用修改后的列表成员，精确地将以下语句连接到控制台屏幕上：
- en: '[PRE15]'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Obtain all values from the sequence between −4 and 4 that are greater than 1.
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取序列中介于 −4 和 4 之间且大于 1 的所有值。
- en: Using `which`, determine which indexes in the factor vector are assigned the
    `"MED"` level.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `which` 确定因子向量中哪些索引被分配为 `"MED"` 级别。
- en: 'Create a new list with the factor vector from (a) as a component named `"facs"`;
    the numeric vector `c(3,2.1,3.3,4,1.5,4.9)` as a component named `"nums"`; and
    a nested list comprised of the first three members of the list from (a) (use list
    slicing to obtain this), named `"oldlist"`. Then, do the following:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新列表，其中包含从 (a) 中获取的因子向量作为名为 `"facs"` 的组件；数值向量 `c(3,2.1,3.3,4,1.5,4.9)` 作为名为
    `"nums"` 的组件；以及由 (a) 中列表的前三个成员组成的嵌套列表，命名为 `"oldlist"`。然后执行以下操作：
- en: Extract the elements of `"facs"` that correspond to elements of `"nums"` that
    are greater than or equal to 3.
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取 `"facs"` 中对应于 `"nums"` 中大于或等于 3 的元素的项。
- en: Add a new member to the list named `"flags"`. This member should be a logical
    vector of length 6, obtained as a twofold repetition of the third column of the
    logical matrix in the `"oldlist"` component.
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向列表中添加一个新成员 `"flags"`。该成员应为长度为 6 的逻辑向量，获取方式是将 `"oldlist"` 组件中的逻辑矩阵的第三列重复两次。
- en: Use `"flags"` and the logical negation operator `!` to extract the entries of
    `"num"` corresponding to `FALSE`.
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `"flags"` 和逻辑非运算符 `!` 提取与 `FALSE` 对应的 `"num"` 项。
- en: Overwrite the character string vector component of `"oldlist"` with the single
    character string `"Don Quixote"`.
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用单一字符字符串 `"Don Quixote"` 替换 `"oldlist"` 中的字符字符串向量组件。
- en: '**5.2 Data Frames**'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**5.2 数据框**'
- en: A *data frame* is R’s most natural way of presenting a data set with a collection
    of recorded observations for one or more variables. Like lists, data frames have
    no restriction on the data types of the variables; you can store numeric data,
    factor data, and so on. The R data frame can be thought of as a list with some
    extra rules attached. The most important distinction is that in a data frame (unlike
    a list), the members must all be vectors of equal length.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*数据框* 是 R 中呈现数据集的最自然方式，它包含一个或多个变量的记录观察集合。与列表一样，数据框对变量的数据类型没有限制；你可以存储数值数据、因子数据等等。R
    数据框可以被视为具有一些额外规则的列表。最重要的区别在于，在数据框中（与列表不同），成员必须是相同长度的向量。'
- en: The data frame is one of the most important and frequently used tools in R for
    statistical data analysis. In this section, you’ll look at how to create data
    frames and learn about their general characteristics.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 数据框是 R 中最重要且最常用的统计数据分析工具之一。在本节中，你将学习如何创建数据框并了解其一般特征。
- en: '***5.2.1 Construction***'
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***5.2.1 构建***'
- en: 'To create a data frame from scratch, use the `data.frame` function. You supply
    your data, grouped by variable, as vectors of the same length—the same way you
    would construct a named list. Consider the following example data set:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要从头创建数据框，使用 `data.frame` 函数。你提供按变量分组的数据，这些数据作为相同长度的向量——就像你构造命名列表一样。考虑以下示例数据集：
- en: '[PRE16]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here, you’ve constructed a data frame with the first name, age in years, and
    sex of five individuals. The returned object should make it clear why vectors
    passed to `data.frame` must be of equal length: vectors of differing lengths wouldn’t
    make sense in this context. If you pass vectors of unequal length to `data.frame`,
    then R will attempt to recycle any shorter vectors to match the longest, throwing
    your data off and potentially allocating observations to the wrong variable. Notice
    that data frames are printed to the console in rows and columns—they look more
    like a matrix than a named list. This natural spreadsheet style makes it easy
    to read and manipulate data sets. Each row in a data frame is called a *record*,
    and each column is a *variable*.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你已经构建了一个包含五个个体的名字、年龄（以年为单位）和性别的数据框。返回的对象应该清楚地说明为什么传递给 `data.frame` 的向量必须具有相同的长度：长度不同的向量在这个上下文中没有意义。如果你将长度不等的向量传递给
    `data.frame`，那么 R 将尝试回收任何较短的向量，以匹配最长的向量，这会破坏你的数据，并可能将观察值分配到错误的变量中。请注意，数据框会以行和列的形式打印到控制台——它们看起来更像是矩阵而非命名列表。这种自然的电子表格样式使得读取和操作数据集变得更加容易。数据框中的每一行叫做
    *记录*，每一列叫做 *变量*。
- en: 'You can extract portions of the data by specifying row and column index positions
    (much as with a matrix). Here’s an example:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过指定行和列的索引位置来提取数据的部分内容（就像操作矩阵一样）。下面是一个示例：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This gives you the element at row 2, column 2—the age of Lois. Now extract
    the third, fourth, and fifth elements of the third column:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这会给你第二行第二列的元素——Lois 的年龄。现在提取第三列的第三、第四和第五个元素：
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This returns a factor vector with the sex of Meg, Chris, and Stewie. The following
    extracts the entire third and first columns (in that order):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个因子向量，包含 Meg、Chris 和 Stewie 的性别。以下代码提取了第三列和第一列的整个数据（顺序为这样）：
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This results in another data frame giving the sex and then the name of each
    person.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成另一个数据框，显示每个人的性别和姓名。
- en: You can also use the names of the vectors that were passed to `data.frame` to
    access variables even if you don’t know their column index positions, which can
    be useful for large data sets. You use the same dollar operator you used for member-referencing
    named lists.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用传递给 `data.frame` 的向量名称来访问变量，即使你不知道它们的列索引位置，这对于大数据集来说非常有用。你使用的是和引用命名列表成员时相同的美元符号操作符。
- en: '[PRE20]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can subset this returned vector, too:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以对这个返回的向量进行子集操作：
- en: '[PRE21]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This returns the same thing as the earlier call of `mydata[2,2]`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回与之前调用 `mydata[2,2]` 相同的结果。
- en: You can report the size of a data frame—the number of records and variables—just
    as you’ve seen for the dimensions of a matrix (first shown in [Section 3.1.3](ch03.xhtml#ch03lev2sec26)).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以报告数据框的大小——记录数和变量数——就像你在矩阵的维度中看到的那样（首次展示于 [第 3.1.3 节](ch03.xhtml#ch03lev2sec26)）。
- en: '[PRE22]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `nrow` function retrieves the number of rows (records), `ncol` retrieves
    the number of columns (variables), and `dim` retrieves both.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`nrow` 函数获取行数（记录数），`ncol` 获取列数（变量数），`dim` 则返回两者。'
- en: 'R’s default behavior for character vectors passed to `data.frame` is to convert
    each variable into a factor object. Observe the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: R 在传递给 `data.frame` 的字符向量中的默认行为是将每个变量转换为因子对象。观察以下内容：
- en: '[PRE23]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Notice that this variable has levels, which shows it’s being treated as a factor.
    But this isn’t what you intended when you defined `mydata` earlier—you explicitly
    defined `sex` to be a factor but left `person` as a vector of character strings.
    To prevent this automatic conversion of character strings to factors when using
    `data.frame`, set the optional argument `stringsAsFactors` to `FALSE` (otherwise,
    it defaults to `TRUE`). Reconstructing `mydata` with this in place looks like
    this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这个变量有层级，这表明它被视为一个因子。但是这不是你在之前定义 `mydata` 时的初衷——你明确地将 `sex` 定义为因子，但将 `person`
    留作字符向量。为了防止在使用 `data.frame` 时字符字符串自动转换为因子，可以将可选参数 `stringsAsFactors` 设置为 `FALSE`（否则，它默认为
    `TRUE`）。使用这种方式重新构建 `mydata` 如下所示：
- en: '[PRE24]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You now have `person` in the desired, nonfactor form.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经得到了期望的、非因子的 `person`。
- en: '***5.2.2 Adding Data Columns and Combining Data Frames***'
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***5.2.2 添加数据列和合并数据框***'
- en: Say you want to add data to an existing data frame. This could be a set of observations
    for a new variable (adding to the number of columns), or it could be more records
    (adding to the number of rows). Once again, you can use some of the functions
    you’ve already seen applied to matrices.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要向现有的数据框添加数据。这可以是新增变量的观察值（增加列数），或者是更多的记录（增加行数）。同样，你可以使用一些之前已经应用于矩阵的函数。
- en: 'Recall the `rbind` and `cbind` functions from [Section 3.1.2](ch03.xhtml#ch03lev2sec25),
    which let you append rows and columns, respectively. These same functions can
    be used to extend data frames intuitively. For example, suppose you had another
    record to include in `mydata`: the age and sex of another individual, Brian. The
    first step is to create a new data frame that contains Brian’s information.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下[第3.1.2节](ch03.xhtml#ch03lev2sec25)中的`rbind`和`cbind`函数，它们分别让你追加行和列。这些相同的函数可以直观地用于扩展数据框。例如，假设你有另一个记录需要包含在`mydata`中：另一个人的年龄和性别，Brian。第一步是创建一个包含Brian信息的新数据框。
- en: '[PRE25]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: To avoid any confusion, it’s important to make sure the variable names and the
    data types match the data frame you’re planning to add this to. Note that for
    a factor, you can extract the levels of the existing factor variable using `levels`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免任何混淆，确保变量名和数据类型与你打算添加到的那个数据框匹配是非常重要的。请注意，对于因子，你可以使用`levels`提取现有因子变量的水平。
- en: 'Now, you can simply call the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以简单地调用以下内容：
- en: '[PRE26]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Using `rbind`, you combined `mydata` with the new record and overwrote `mydata`
    with the result.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`rbind`，你将`mydata`与新记录合并，并用结果覆盖了`mydata`。
- en: 'Adding a variable to a data frame is also quite straightforward. Let’s say
    you’re now given data on the classification of how funny these six individuals
    are, defined as a “degree of funniness.” The degree of funniness can take three
    possible values: `Low`, `Med` (medium), and `High`. Suppose Peter, Lois, and Stewie
    have a high degree of funniness, Chris and Brian have a medium degree of funniness,
    and Meg has a low degree of funniness. In R, you’d have a factor vector like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 向数据框添加变量也非常简单。假设现在你获得了关于这六个人的幽默程度分类数据，定义为“幽默度”。幽默度可以有三个可能的值：`Low`（低），`Med`（中），和`High`（高）。假设Peter、Lois和Stewie的幽默度很高，Chris和Brian的幽默度为中等，而Meg的幽默度较低。在R中，你会有一个这样的因子向量：
- en: '[PRE27]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The first line creates the basic character vector as `funny`, and the second
    line overwrites `funny` by turning it into a factor. The order of these elements
    must correspond to the records in your data frame. Now, you can simply use `cbind`
    to append this factor vector as a column to the existing `mydata`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行创建了基本的字符向量`funny`，第二行通过将其转换为因子来覆盖`funny`。这些元素的顺序必须与数据框中的记录相对应。现在，你可以简单地使用`cbind`将这个因子向量作为一列附加到现有的`mydata`中。
- en: '[PRE28]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `rbind` and `cbind` functions aren’t the only ways to extend a data frame.
    One useful alternative for adding a variable is to use the dollar operator, much
    like adding a new member to a named list, as in [Section 5.1.3](ch05.xhtml#ch05lev2sec51).
    Suppose now you want to add another variable to `mydata` by including a column
    with the age of the individuals in months, not years, calling this new variable
    `age.mon`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`rbind`和`cbind`函数并不是扩展数据框的唯一方式。添加变量的一个有用替代方法是使用美元符号运算符，类似于[第5.1.3节](ch05.xhtml#ch05lev2sec51)中添加命名列表成员的方式。假设现在你想通过包含个体年龄（以月为单位，而不是年）来为`mydata`添加另一个变量，将此新变量命名为`age.mon`。'
- en: '[PRE29]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This creates a new `age.mon` column with the dollar operator and at the same
    time assigns it the vector of ages in years (already stored as `age`) multiplied
    by 12.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用美元符号运算符创建了一个新的`age.mon`列，并同时将其赋值为年龄（已经以年为单位存储在`age`中）乘以12的向量。
- en: '***5.2.3 Logical Record Subsets***'
  id: totrans-102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***5.2.3 逻辑记录子集***'
- en: In [Section 4.1.5](ch04.xhtml#ch04lev2sec41), you saw how to use logical flag
    vectors to subset data structures. This is a particularly useful technique with
    data frames, where you’ll often want to examine a subset of entries that meet
    certain criteria. For example, when working with data from a clinical drug trial,
    a researcher might want to examine the results for just male participants and
    compare them to the results for females. Or the researcher might want to look
    at the characteristics of individuals who responded most positively to the drug.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4.1.5节](ch04.xhtml#ch04lev2sec41)中，你学习了如何使用逻辑标志向量来对子集数据结构进行筛选。这在数据框中尤其有用，因为你通常会想查看满足特定条件的记录子集。例如，在处理临床药物试验数据时，研究人员可能想查看仅男性参与者的结果，并将其与女性的结果进行比较。或者，研究人员可能想查看对药物反应最积极的个体的特征。
- en: 'Let’s continue to work with `mydata`. Say you want to examine all records corresponding
    to males. From [Section 4.3.1](ch04.xhtml#ch04lev2sec46), you know that the following
    line will identify the relevant positions in the `sex` factor vector:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续处理`mydata`。假设你想查看所有与男性相关的记录。从[第4.3.1节](ch04.xhtml#ch04lev2sec46)中，你知道以下这一行可以识别`sex`因子向量中相关的位置：
- en: '[PRE30]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This flags the male records. You can use this with the matrix-like syntax you
    saw in [Section 5.2.1](ch05.xhtml#ch05lev2sec52) to get the male-only subset.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这标记了男性记录。你可以结合[第5.2.1节](ch05.xhtml#ch05lev2sec52)中看到的类似矩阵的语法来获取仅限男性的子集。
- en: '[PRE31]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This returns data for all variables for only the male participants. You can
    use the same behavior to pick and choose which variables to return in the subset.
    For example, since you know you are selecting the males only, you could omit `sex`
    from the result using a negative numeric index in the column dimension.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回所有变量的数据，但仅限于男性参与者。你可以使用相同的行为来选择哪些变量返回在子集中。例如，由于你知道你只选择男性，你可以使用负数的列索引来从结果中省略`sex`。
- en: '[PRE32]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: If you don’t have the column number or if you want to have more control over
    the returned columns, you can use a character vector of variable names instead.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有列号，或者你想对返回的列有更多控制，可以改为使用一个包含变量名的字符向量。
- en: '[PRE33]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The logical conditions you use to subset a data frame can be as simple or as
    complicated as you need them to be. The logical flag vector you place in the square
    brackets just has to match the number of records in the data frame. Let’s extract
    from `mydata` the full records for individuals who are more than 10 years old
    OR have a high degree of funniness.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你用于子集数据框的逻辑条件可以简单或复杂，取决于需要。你放入方括号中的逻辑标志向量必须与数据框中的记录数相匹配。让我们从`mydata`中提取所有年龄大于10岁或有很高幽默感的个体的完整记录。
- en: '[PRE34]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Sometimes, asking for a subset will yield no records. In this case, R returns
    a data frame with zero rows, which looks like this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，要求一个子集时可能不会返回任何记录。在这种情况下，R会返回一个行数为零的数据框，如下所示：
- en: '[PRE35]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In this example, no records are returned from `mydata` because there are no
    individuals older than 45\. To check whether a subset will contain any records,
    you can use `nrow` on the result—if this is equal to zero, then no records have
    satisfied the specified condition(s).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，由于没有个体年龄超过45岁，`mydata`没有返回任何记录。要检查子集是否包含任何记录，你可以对结果使用`nrow`，如果其结果为零，则表示没有记录满足指定的条件。
- en: '**Exercise 5.2**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 5.2**'
- en: 'Create and store this data frame as `dframe` in your R workspace:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的R工作空间中创建并存储这个数据框作为`dframe`：
- en: '| `person` | `sex` | `funny` |'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `person` | `sex` | `funny` |'
- en: '| --- | --- | --- |'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `Stan` | `M` | `High` |'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `Stan` | `M` | `High` |'
- en: '| `Francine` | `F` | `Med` |'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `Francine` | `F` | `Med` |'
- en: '| `Steve` | `M` | `Low` |'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `Steve` | `M` | `Low` |'
- en: '| `Roger` | `M` | `High` |'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `Roger` | `M` | `High` |'
- en: '| `Hayley` | `F` | `Med` |'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `Hayley` | `F` | `Med` |'
- en: '| `Klaus` | `M` | `Med` |'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `Klaus` | `M` | `Med` |'
- en: The variables `person`, `sex`, and `funny` should be identical in nature to
    the variables in the `mydata` object studied throughout [Section 5.2](ch05.xhtml#ch05lev1sec20).
    That is, `person` should be a character vector, `sex` should be a factor with
    levels `F` and `M`, and `funny` should be a factor with levels `Low`, `Med`, and
    `High`.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 变量`person`、`sex`和`funny`应与[第5.2节](ch05.xhtml#ch05lev1sec20)中研究的`mydata`对象的变量本质上相同。也就是说，`person`应是字符向量，`sex`应是一个具有`F`和`M`级别的因子，`funny`应是一个具有`Low`、`Med`和`High`级别的因子。
- en: Stan and Francine are 41 years old, Steve is 15, Hayley is 21, and Klaus is
    60\. Roger is extremely old—1,600 years. Append these data as a new numeric column
    variable in `dframe` called `age`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Stan和Francine分别41岁，Steve15岁，Hayley21岁，Klaus60岁，Roger非常老—1600岁。将这些数据作为新的数值列变量`age`添加到`dframe`中。
- en: Use your knowledge of reordering the column variables based on column index
    positions to overwrite `dframe`, bringing it in line with `mydata`. That is, the
    first column should be `person`, the second column `age`, the third column `sex`,
    and the fourth column `funny`.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 利用你关于按列索引位置重新排序列变量的知识来覆盖`dframe`，使其与`mydata`保持一致。也就是说，第一列应为`person`，第二列为`age`，第三列为`sex`，第四列为`funny`。
- en: Turn your attention to `mydata` as it was left after you included the `age.mon`
    variable in [Section 5.2.2](ch05.xhtml#ch05lev2sec53). Create a new version of
    `mydata` called `mydata2` by deleting the `age.mon` column.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将注意力集中到在[第5.2.2节](ch05.xhtml#ch05lev2sec53)中包含`age.mon`变量后留下的`mydata`上。通过删除`age.mon`列，创建一个名为`mydata2`的新版本。
- en: Now, combine `mydata2` with `dframe`, naming the resulting object `mydataframe`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将`mydata2`与`dframe`合并，并将结果对象命名为`mydataframe`。
- en: Write a single line of code that will extract from `mydataframe` just the names
    and ages of any records where the individual is female and has a level of funniness
    equal to `Med` OR `High`.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一行代码，从`mydataframe`中提取仅限女性且幽默感水平为`Med`或`High`的记录的姓名和年龄。
- en: 'Use your knowledge of handling character strings in R to extract all records
    from `mydataframe` that correspond to people whose names start with *S*. Hint:
    Recall `substr` from [Section 4.2.4](ch04.xhtml#ch04lev2sec45) (note that `substr`
    can be applied to a vector of multiple character strings).'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你在R中处理字符字符串的知识，从`mydataframe`中提取所有名字以*S*开头的人的记录。提示：回忆一下[第4.2.4节](ch04.xhtml#ch04lev2sec45)中的`substr`（注意，`substr`可以应用于多个字符字符串的向量）。
- en: '**Important Code in This Chapter**'
  id: totrans-134
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**本章重要代码**'
- en: '| **Function/operator** | **Brief description** | **First occurrence** |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| **函数/操作符** | **简要描述** | **首次出现** |'
- en: '| --- | --- | --- |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `list` | Create a list | [Section 5.1.1](ch05.xhtml#ch05lev2sec49), [p. 89](ch05.xhtml#page_89)
    |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `list` | 创建一个列表 | [第5.1.1节](ch05.xhtml#ch05lev2sec49)，[第89页](ch05.xhtml#page_89)
    |'
- en: '| `[[ ]]` | Unnamed member reference | [Section 5.1.1](ch05.xhtml#ch05lev2sec49),
    [p. 90](ch05.xhtml#page_90) |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `[[ ]]` | 无名成员引用 | [第5.1.1节](ch05.xhtml#ch05lev2sec49)，[第90页](ch05.xhtml#page_90)
    |'
- en: '| `[ ]` | List slicing (multiple members) | [Section 5.1.1](ch05.xhtml#ch05lev2sec49),
    [p. 91](ch05.xhtml#page_91) |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `[ ]` | 列表切片（多个成员） | [第5.1.1节](ch05.xhtml#ch05lev2sec49)，[第91页](ch05.xhtml#page_91)
    |'
- en: '| `$` | Get named member/variable | [Section 5.1.2](ch05.xhtml#ch05lev2sec50),
    [p. 92](ch05.xhtml#page_92) |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `$` | 获取命名成员/变量 | [第5.1.2节](ch05.xhtml#ch05lev2sec50)，[第92页](ch05.xhtml#page_92)
    |'
- en: '| `data.frame` | Create a data frame | [Section 5.2.1](ch05.xhtml#ch05lev2sec52),
    [p. 96](ch05.xhtml#page_96) |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `data.frame` | 创建一个数据框 | [第5.2.1节](ch05.xhtml#ch05lev2sec52)，[第96页](ch05.xhtml#page_96)
    |'
- en: '| `[ , ]` | Extract data frame row/columns | [Section 5.2.1](ch05.xhtml#ch05lev2sec52),
    [p. 96](ch05.xhtml#page_96) |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `[ , ]` | 提取数据框的行/列 | [第5.2.1节](ch05.xhtml#ch05lev2sec52)，[第96页](ch05.xhtml#page_96)
    |'
