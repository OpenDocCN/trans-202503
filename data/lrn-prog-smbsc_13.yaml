- en: '**13**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**13**'
- en: '**REPEATING FOR LOOPS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**重复的 For 循环**'
- en: '![image](graphics/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/common01.jpg)'
- en: Have you ever noticed that no matter how many times you take out the trash,
    clean dirty dishes, and do laundry, you always have to do it again? What if you
    only had to do each task once, and then you created a robot version of yourself
    to do it every time after that? That would be amazing!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你有没有注意到，无论你多少次倒垃圾、洗脏碗和做洗衣，最后总是要再做一次？如果每个任务只需要做一次，然后你创建一个机器人版本的自己来每次代替做呢？那会很棒！
- en: In the Small Basic universe, automating repetitive tasks is a breeze. You only
    have to write code for a repetitive task once, and then you can use a loop to
    repeat that task as many times as you need.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在Small Basic宇宙中，自动化重复性任务轻而易举。你只需要为一个重复性任务编写一次代码，然后就可以使用循环重复执行该任务，无论你需要多少次。
- en: 'Small Basic uses two types of loop statements: `For` *loops* and `While` *loops*.
    In this chapter, you’ll learn about `For` loops, explore nested `For` loops in
    depth, and create some programs that take advantage of your computer’s passion
    for repetition. You’ll learn how to use `For` loops in a wide range of practical
    applications. Let’s get loopy!'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Small Basic使用两种类型的循环语句：`For` *循环* 和 `While` *循环*。在本章中，你将学习`For`循环，深入探索嵌套`For`循环，并创建一些利用你计算机对重复任务的热情的程序。你将学会在各种实际应用中使用`For`循环。让我们开始循环吧！
- en: '**The For Loop**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**For 循环**'
- en: 'Let’s say you want to make a program that displays the multiplication table
    for nine: 1 *×* 9, 2 *×* 9, 3 *×* 9, through 10 *×* 9\. Your first attempt might
    look like this:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想写一个程序，显示九的乘法表：1 *×* 9，2 *×* 9，3 *×* 9，一直到 10 *×* 9。你第一次尝试可能是这样的：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Phew! Look at that wall-o-code! Although Small Basic lets you easily copy and
    paste selected statements, this program repeats a lot of code. What if you want
    to display the multiplication table up to 100 or 1000? Clearly, this isn’t the
    best way to write your program. Here’s a version of this program that uses a `For`
    loop to get the same result:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 呼！看看这段代码墙！虽然Small Basic让你轻松地复制和粘贴选定的语句，但这个程序重复了很多代码。如果你想显示乘法表直到100或1000呢？显然，这不是编写程序的最佳方式。这里是一个使用`For`循环来实现相同结果的程序版本：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Run this program and check out what happens. Wasn’t that easier than writing
    out every line? Now you’ve seen the power of loops!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个程序，看看会发生什么。难道这不是比写出每一行代码更简单吗？现在你已经看到了循环的威力！
- en: The loop runs the same statement but with a different value of `N` each time.
    First, the code sets the value of `N` to 1, which is the value we want to start
    creating the multiplication table from. Next, it runs all the statements between
    the `For` and the `EndFor` keywords. In this case, it runs the `WriteLine()` method,
    replacing `N` with its current value. This is called an *iteration* of the loop.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 循环每次运行相同的语句，但`N`的值不同。首先，代码将`N`的值设置为1，这是我们希望从中开始创建乘法表的值。接下来，它运行`For`和`EndFor`关键字之间的所有语句。在这种情况下，它运行`WriteLine()`方法，将`N`替换为当前值。这称为循环的*迭代*。
- en: Then it sets `N` to 2\. The value of `N` is compared with the ending value (or
    *terminal value*) of the loop, which is 10 in this case. If `N` is less than 10,
    the statements in the body of the `For` loop run again, completing another iteration
    of the loop. Note that the `For` loop automatically increases `N` by 1 during
    each iteration. This process continues, using `N = 3`, then `N = 4`, all the way
    to `N = 10`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它将`N`设置为2。`N`的值与循环的结束值（或*终止值*）进行比较，在这个例子中为10。如果`N`小于10，`For`循环体内的语句将再次执行，完成下一次循环迭代。请注意，`For`循环会在每次迭代时自动将`N`增加1。这个过程会继续，使用`N
    = 3`，然后是`N = 4`，直到`N = 10`。
- en: After the program runs the tenth iteration, it moves to the statement after
    the `EndFor` keyword (if there is one), and the loop is complete.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序执行第十次迭代后，它会跳转到`EndFor`关键字后的语句（如果有的话），并且循环完成。
- en: Now that you’ve seen a basic `For` loop in action, look at the syntax in [Figure
    13-1](ch13.html#ch13fig1).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到了基本的`For`循环的实际操作，看看[图13-1](ch13.html#ch13fig1)中的语法吧。
- en: '![image](graphics/f13-01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f13-01.jpg)'
- en: '*Figure 13-1: Syntax of a basic* `For` *loop*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*图13-1：基本* `For` *循环的语法*'
- en: Each `For` loop starts with the keyword `For`. The statements contained between
    the `For` and `EndFor` keywords are called the *body* of the `For` loop. The variable,
    `N`, is the *loop control variable* (or *loop counter*). It controls the number
    of times the loop runs, and it’s treated like any other variable in the program.
    The `1 To 10` part of the statement determines how many times the loop runs.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`For`循环以关键字`For`开始。`For`和`EndFor`之间的语句被称为`For`循环的*主体*。变量`N`是*循环控制变量*（或*循环计数器*）。它控制循环执行的次数，并且像程序中的其他变量一样使用。`1
    To 10`部分决定了循环运行的次数。
- en: 'It’s important to note that the condition to check whether or not the loop
    runs is tested at the top of the loop. For example, the following code sets `N`
    to 1 and then compares it to a terminal value of –10\. Because 1 is greater than
    –10, the code won’t run even once:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，检查循环是否执行的条件是在循环顶部进行的。例如，下面的代码将`N`设置为1，然后将其与终止值-10进行比较。因为1大于-10，所以代码根本不会执行：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let’s look at some fun examples that show you how to use a `For` loop.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看一些有趣的例子，向你展示如何使用`For`循环。
- en: '**TRY IT OUT 13-1**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**动手试一试 13-1**'
- en: Think about some other repetitive tasks that you could automate with a loop.
    Describe a program you’d build with a `For` loop.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 思考一些你可以通过循环自动化的其他重复性任务。描述一个你会用`For`循环构建的程序。
- en: '***Magical Moving Text***'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***神奇的移动文字***'
- en: In this example, you’ll create a program that moves a word or sentence across
    the text window from left to right. [Figure 13-2](ch13.html#ch13fig2) shows that
    with each iteration, the word displayed in the last iteration disappears, so the
    text appears to be animated, moving across the screen to the right.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你将创建一个程序，使一个单词或句子从文本窗口的左侧移动到右侧。[图 13-2](ch13.html#ch13fig2)显示了每次迭代中，上一轮显示的单词消失，因此文字看起来像是动画效果，正向屏幕右侧移动。
- en: '![image](graphics/f13-02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f13-02.jpg)'
- en: '*Figure 13-2: Using the* `Write()` *method to move a word across the text window*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13-2：使用* `Write()` *方法将一个单词移动到文本窗口*'
- en: Recall that in [Chapter 2](ch02.html#ch02) you used the `CursorLeft` property
    to display text in different places inside the text window. In this example, you’ll
    set `CursorLeft` to 0 and use the `Write()` method to write the word. After a
    short delay, you’ll change `CursorLeft` to 1 and write the word again. You’ll
    then change `CursorLeft` to 2, then 3, and so on. Using a `For` loop, you’ll automate
    this process to make it look like the word is moving across the text window. Enter
    the program in [Listing 13-1](ch13.html#ch13ex1).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下在[第2章](ch02.html#ch02)中，你使用`CursorLeft`属性将文本显示在文本窗口的不同位置。在这个例子中，你将`CursorLeft`设置为0，并使用`Write()`方法写出单词。稍作延迟后，你将`CursorLeft`改为1，再次写出单词。接着，你将`CursorLeft`改为2，再到3，依此类推。通过`For`循环，你将自动化这一过程，使得单词看起来像是从左到右在文本窗口中移动。请输入程序代码，[见列表
    13-1](ch13.html#ch13ex1)。
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 13-1: Moving a word across the text window*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13-1：将一个单词移动到文本窗口*'
- en: The program starts a loop that runs from `N = 0 To 40` (line 2). During each
    iteration, it sets the `CursorLeft` property equal to the loop counter `N` (line
    3) and then uses the `Write()` method to write the word (line 4). The space before
    the text `Moving` helps to erase the previous word. The `Program.Delay(250)` call
    at line 5 causes the program to wait for 250 milliseconds before it starts the
    next iteration of the loop. When the loop ends, the program writes an empty line
    (line 7).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序启动一个从`N = 0 To 40`的循环（第2行）。在每次迭代中，它将`CursorLeft`属性设置为循环计数器`N`（第3行），然后使用`Write()`方法写出单词（第4行）。`Moving`前面的空格有助于擦除之前的单词。第5行的`Program.Delay(250)`调用使程序在开始下一次迭代之前等待250毫秒。当循环结束时，程序会写出一个空行（第7行）。
- en: Let’s move on to another example.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进入另一个例子。
- en: '**TIP**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: '*Although it isn’t required, indenting the statements in the body of a* `For`
    *loop makes your code easier to read.*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*虽然不是必需的，但将`For`循环主体中的语句进行缩进能使代码更易读。*'
- en: '**TRY IT OUT 13-2**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**动手试一试 13-2**'
- en: Change [Listing 13-1](ch13.html#ch13ex1) to animate your own message to your
    friends or family members and share it with them. Mine is “I Like Tacos!”
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 修改[列表 13-1](ch13.html#ch13ex1)来为你自己创建动画，发送给你的朋友或家人，并与他们分享。我的例子是“我喜欢塔可饼！”
- en: '***Adding ’em Up***'
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***加起来***'
- en: In programming, loops are used in different ways. One important use of loops
    is called an *accumulator loop*, which accumulates (or adds up) a value during
    each iteration of the loop. Accumulator loops are commonly used to keep count
    of values in programs.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中，循环有不同的使用方式。循环的一个重要用途被称为*累加器循环*，它在每次迭代时累加（或加总）一个值。累加器循环常用于程序中记录数值。
- en: 'Let’s say you need to find the sum of all integers from 1 to 10: 1 + 2 + 3
    + ... + 10\. That’s what the program in [Listing 13-2](ch13.html#ch13ex2) does.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你需要计算从1到10的所有整数的和：1 + 2 + 3 + ... + 10。这正是[清单 13-2](ch13.html#ch13ex2)中的程序所做的。
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 13-2: Using a* `For` *loop to add numbers*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 13-2：使用* `For` *循环添加数字*'
- en: 'The program uses a variable named `sum` to hold the running total (this variable
    is usually called an *accumulator*). The program starts by initializing `sum`
    to 0 (line 2). Then a `For` loop with a loop counter named `N` runs from 1 to
    10 (line 3). During each iteration, the program adds the value of `N` to the accumulator
    by using the statement at line 4\. This statement adds the current value of `N`
    to the current value of `sum` and stores the result back into `sum`. After the
    first iteration, `sum` is 1 (0 + 1); after the second iteration, `sum` is 3 (1
    + 2); after the third iteration, `sum` is 6 (3 + 3); and so on. When the loop
    ends, the program displays the value of the `sum` variable on line 6: `sum = 55`.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序使用一个名为`sum`的变量来保存累计值（这个变量通常被称为*累加器*）。程序首先将`sum`初始化为0（第2行）。然后，一个名为`N`的循环计数器在`For`循环中从1运行到10（第3行）。在每次迭代中，程序使用第4行的语句将`N`的值加到累加器中。该语句将`N`的当前值加到`sum`的当前值，并将结果重新存储回`sum`中。第一次迭代后，`sum`为1（0
    + 1）；第二次迭代后，`sum`为3（1 + 2）；第三次迭代后，`sum`为6（3 + 3）；以此类推。当循环结束时，程序在第6行显示`sum`变量的值：`sum
    = 55`。
- en: '**TRY IT OUT 13-3**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试 13-3**'
- en: When the great mathematician Carl Gauss first went to school, his teacher asked
    the class to find the sum of all the numbers between 1 and 100, that is, 1 + 2
    + 3 + 4 + ... + 100\. Gauss took one look at the problem and immediately put his
    answer on the teacher’s desk. The teacher was amazed—Gauss was right! Write a
    program to find the answer that Gauss worked out in his head. Of course, Gauss
    didn’t use Small Basic, but he did find a shortcut. Can you figure out his secret
    method?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当伟大的数学家卡尔·高斯首次上学时，他的老师要求全班同学计算1到100之间所有数字的和，即1 + 2 + 3 + 4 + ... + 100。高斯看了一眼题目，立即把答案放在了老师的桌子上。老师惊讶了——高斯是对的！写一个程序来找出高斯脑海中算出来的答案。当然，高斯当时并没有使用Small
    Basic，但他确实找到了一个捷径。你能找出他的方法吗？
- en: '***Formatting Your Output***'
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***格式化输出***'
- en: The way you display the output of a program is often just as important as the
    information you display. If the output is difficult to read, people won’t be able
    to understand what the information means. A well-laid-out display is an essential
    part of your program design, but getting the formatting right can be tedious.
    To make it easier, you can use `For` loops. For example, let’s use a `For` loop
    to write a program that outputs the squares of 1 to 5 in a table format (see [Figure
    13-3](ch13.html#ch13fig3)).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 显示程序输出的方式通常与显示的信息本身同样重要。如果输出难以阅读，人们就无法理解信息的含义。良好的显示布局是程序设计的重要部分，但正确的格式化可能会很繁琐。为了简化这一过程，你可以使用`For`循环。例如，使用`For`循环编写一个程序，以表格格式输出1到5的平方（见[图
    13-3](ch13.html#ch13fig3)）。
- en: '![image](graphics/f13-03.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f13-03.jpg)'
- en: '*Figure 13-3: The output of* SquareTable.sb'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13-3：* SquareTable.sb *的输出*'
- en: Enter and run the program in [Listing 13-3](ch13.html#ch13ex3).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并运行[清单 13-3](ch13.html#ch13ex3)中的程序。
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 13-3: Using a* `For` *loop to display tabular data*'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 13-3：使用* `For` *循环显示表格数据*'
- en: Lines 3–4 write the headers for the two table columns. The loop at line 6 writes
    the five numbers and their squares. The `TextWindow.CursorLeft` property sets
    the desired position under each column (lines 7 and 9). Each time the code loops,
    it displays the correct value in its proper spot.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 第3至4行编写了两列表格的标题。第6行的循环写入五个数字及其平方。`TextWindow.CursorLeft` 属性设置了每列下方的期望位置（第7行和第9行）。每次代码循环时，它会将正确的值显示在适当的位置。
- en: '**TRY IT OUT 13-4**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试 13-4**'
- en: 'The famous song *Twelve Days of Christmas* goes like this: “On the first day
    of Christmas my true love gave to me a partridge in a pear tree. On the second
    day of Christmas my true love gave to me two turtle doves and a partridge in a
    pear tree. On the third day of…” and so on for 12 days. On the twelfth day, the
    singer received 12 + 11 + ... + 2 + 1 gifts. Write a program that shows the total
    gifts received on each of the 12 days. Include two columns in your output: the
    day number and the total gifts received on that day.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 那首著名的歌曲《圣诞十二日》是这样的：“在圣诞节的第一天，我的真爱给了我一只停在梨树上的鹧鸪。在圣诞节的第二天，我的真爱给了我两只海鸽和一只停在梨树上的鹧鸪……”如此继续，直到第
    12 天。到了第十二天，歌手收到了 12 + 11 + … + 2 + 1 份礼物。编写一个程序，显示每一天收到的总礼物数。输出结果应包括两列：天数和当天收到的总礼物数。
- en: '***Drawing All Kinds of Lines***'
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***绘制各种线条***'
- en: You can use `For` loops to change all kinds of values, including visual displays.
    [Listing 13-4](ch13.html#ch13ex4) draws 10 lines of increasing width in the graphics
    window.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `For` 循环来改变各种值，包括视觉显示。[示例 13-4](ch13.html#ch13ex4) 在图形窗口中绘制了 10 条逐渐加宽的线条。
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 13-4: Increasing the line width with each iteration*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 13-4：每次迭代增加线条宽度*'
- en: After setting the window’s title and the pen’s color (lines 2–3), the program
    starts a `For` loop with a loop counter named `N` that runs from 1 to 10 (line
    4). In each iteration, the program sets the pen’s width to the current value of
    `N` (line 5), sets the vertical position of the line (line 6), and then draws
    a line that is 200 pixels long (line 7). The output is shown in [Figure 13-4](ch13.html#ch13fig4).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置窗口标题和画笔颜色（第 2–3 行）之后，程序开始执行一个名为 `N` 的 `For` 循环，该循环的计数器从 1 运行到 10（第 4 行）。在每次迭代中，程序将画笔的宽度设置为当前的
    `N` 值（第 5 行），设置线条的垂直位置（第 6 行），然后绘制一条 200 像素长的线（第 7 行）。输出结果如[图 13-4](ch13.html#ch13fig4)所示。
- en: '![image](graphics/f13-04.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f13-04.jpg)'
- en: '*Figure 13-4: The output of* Lines.sb'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13-4：* Lines.sb的输出'
- en: '**TRY IT OUT 13-5**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试示例 13-5**'
- en: What does the following program do? Run the program to check your answer.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序做了什么？运行程序检查你的答案。
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Changing the Step Size**'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**更改步长**'
- en: 'The previous section showed you the syntax of the `For` loop that automatically
    increases the loop counter by one after each iteration. But `For` loops have a
    general form that lets you control the `Step` size of the loop’s control variable
    to increase it or decrease it by however much you want. Here’s the general form
    of the `For` loop:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 上一部分向你展示了 `For` 循环的语法，该语法在每次迭代后自动将循环计数器增加 1。但 `For` 循环有一个通用形式，它允许你控制循环控制变量的
    `Step` 大小，从而按照你想要的任何幅度增加或减少它。这里是 `For` 循环的一般形式：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It works like the simplified loop you saw earlier. But instead of incrementing
    the loop counter `N` by one, you can decide how much to change `N`. You do this
    by setting the amount in the `Step` size, `C`, which can be a positive or negative
    number or any Small Basic expression. Let’s look at some examples that show you
    how to use this general form of the `For` loop.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作方式类似于你之前看到的简化循环。但与每次递增循环计数器 `N` 1 的情况不同，你可以决定如何改变 `N`。你通过设置 `Step` 大小中的值
    `C` 来实现这一点，`C` 可以是正数、负数或任何 Small Basic 表达式。让我们看看一些示例，展示如何使用这种通用的 `For` 循环形式。
- en: '***Counting Down by Twos***'
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***按二递减计数***'
- en: In this example, the program counts from a starting value (10 in this case)
    down to 0, subtracting 2 at a time so the program writes the numbers 10, 8, 6,
    4, 2, 0 in the text window. Enter and run the program in [Listing 13-5](ch13.html#ch13ex5).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，程序从一个起始值（此处为 10）开始倒计时到 0，每次减去 2，因此程序在文本窗口中写出数字 10、8、6、4、2、0。输入并运行[示例
    13-5](ch13.html#ch13ex5)中的程序。
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 13-5: Counting down with* `Step`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 13-5：用`Step` 进行倒计数*'
- en: A negative value was used for the `Step` size (line 2) to reduce the value of
    the loop counter by 2 after each iteration.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Step` 大小（第 2 行）使用了负值，以便在每次迭代后将循环计数器的值减少 2。
- en: 'Here’s the output:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '***Making a Fractional Step***'
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***制作分数步长***'
- en: The `Step` size doesn’t have to be an integer value. You can also use a decimal
    value, as shown in [Listing 13-6](ch13.html#ch13ex6).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`Step` 大小不一定非得是整数值。你也可以使用小数值，如在[示例 13-6](ch13.html#ch13ex6)中所示。'
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 13-6: Making a design with text*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 13-6：用文本做设计*'
- en: The loop counter in this example is an angle (in radians) that uses the values
    from 0 to 2π in increments of 0.3 (line 6). In each iteration, the sine of the
    angle is computed, and the answer is used to set the horizontal position of the
    cursor (line 7). The word `Hello` is then displayed at that position (line 8),
    and the variable `yPos` is adjusted to set the vertical position for the next
    output text (line 9). Experimenting with different `Step` sizes can create some
    very cool stuff, like the wavy design shown in [Figure 13-5](ch13.html#ch13fig5).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，循环计数器是一个角度（以弧度为单位），它使用从0到2π的值，步进为0.3（第6行）。在每次迭代中，计算该角度的正弦值，并使用该值设置光标的水平位置（第7行）。然后在该位置显示单词`Hello`（第8行），并调整变量`yPos`来设置下一个输出文本的垂直位置（第9行）。尝试不同的`Step`大小可以创造出一些非常酷的效果，比如[图13-5](ch13.html#ch13fig5)中展示的波浪设计。
- en: '![image](graphics/f13-05.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f13-05.jpg)'
- en: '*Figure 13-5: The output of* DecimalStep.sb'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*图13-5：* DecimalStep.sb *的输出*'
- en: '**TRY IT OUT 13-6**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**试一试 13-6**'
- en: Write a program that finds the sum of all odd numbers from 5 to 25.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，计算从5到25所有奇数的和。
- en: '**Nested Loops**'
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**嵌套循环**'
- en: The statements in the body of a `For` loop can be any Small Basic statement,
    including another `For` loop. *Nesting* is when you put one `For` loop inside
    another `For` loop (no birds are involved). Using nested loops allows you to create
    iterations in two or more dimensions. This technique is important, and you can
    use it to solve a wide range of programming problems.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`For`循环体中的语句可以是任何Small Basic语句，包括另一个`For`循环。*嵌套*是指将一个`For`循环放在另一个`For`循环内部（不涉及鸟类）。使用嵌套循环可以创建二维或更多维度的迭代。这种技巧很重要，可以用来解决广泛的编程问题。'
- en: To understand the idea of nested `For` loops, you’ll examine a program that
    causes your computer to “jump” four times and “clap” three times after each jump.
    Because the program needs to count two actions (jumps and claps), it needs to
    use two loops, as shown in [Listing 13-7](ch13.html#ch13ex7). The counter for
    the outer loop, `j`, runs from 1 to 4\. The counter for the inner loop, `c`, runs
    from 1 to 3.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解嵌套`For`循环的概念，你将查看一个程序，它使得计算机“跳”四次，每跳一次后“拍手”三次。因为程序需要计算两个动作（跳跃和拍手），所以需要使用两个循环，如[示例13-7](ch13.html#ch13ex7)所示。外部循环的计数器`j`从1到4，内部循环的计数器`c`从1到3。
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 13-7: Nesting* `For` *loops*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例13-7：* 嵌套`For` *循环*'
- en: 'In the first iteration of the outer loop (where `j = 1`), the inner loop repeats
    three times (for the three values of `c`); each time, it writes the word `Clap`
    followed by a space, the current value of `c`, and another space (line 5). When
    you nest `For` loops like this, the inner loop goes through all its iterations
    for each iteration of the outer loop. So the first iteration of the outer loop
    makes the program display `Jump 1: Clap 1 Clap 2 Clap 3`. When the inner loop
    ends, the program outputs an empty line (line 7) to move the cursor to the beginning
    of the next line, and the second iteration of the outer loop starts with `j =
    2`. The inner loop runs again for `c = 1`, `2`, and `3`. This causes the program
    to display `Jump 2: Clap 1 Clap 2 Clap 3`. This continues, so the program displays
    `Jump 3: Clap 1 Clap 2 Clap 3` and then `Jump 4: Clap 1 Clap 2 Clap 3`. Then the
    program ends. Perhaps your computer wants to be a cheerleader!'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '在外循环的第一次迭代中（即`j = 1`），内循环重复三次（对应`c`的三个值）；每次迭代时，它都会写出单词`Clap`，后面跟着一个空格，当前`c`的值，再加上一个空格（第5行）。当你像这样嵌套`For`循环时，内循环会在外循环的每次迭代中执行所有迭代。因此，外循环的第一次迭代会使程序显示`Jump
    1: Clap 1 Clap 2 Clap 3`。当内循环结束时，程序输出一个空行（第7行），将光标移到下一行的开头，然后第二次外循环以`j = 2`开始。内循环再次运行，`c
    = 1`、`c = 2`和`c = 3`，这会导致程序显示`Jump 2: Clap 1 Clap 2 Clap 3`。如此继续，程序依次显示`Jump 3:
    Clap 1 Clap 2 Clap 3`，然后是`Jump 4: Clap 1 Clap 2 Clap 3`，最后程序结束。也许你的电脑想成为啦啦队员！'
- en: '[Figure 13-6](ch13.html#ch13fig6) helps to explain how the program works. The
    outer circle represents each time the outer loop runs: for example, at the top
    of the outer circle, when `j = 1` in the outer loop, the inner loop runs three
    times, where `c = 1`, `c = 2`, and `c = 3`. Follow the outer loop and think through
    each inner loop. Continue until you get all the way around the outer circle.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[图13-6](ch13.html#ch13fig6)有助于解释程序的工作原理。外圈表示外部循环每次运行的情况：例如，在外圈的顶部，当外循环中的`j
    = 1`时，内循环运行三次，`c`的值依次为1、2和3。跟随外循环并思考每一次内循环。继续直到走完外圈一圈。'
- en: '![image](graphics/f13-06.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f13-06.jpg)'
- en: '*Figure 13-6: How* NestedLoops.sb *works*'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*图13-6：* 嵌套循环.sb *的工作原理*'
- en: 'The output should look like this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now let’s look at other problems where nested `For` loops come in handy!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一些需要嵌套 `For` 循环的其他问题吧！
- en: '***Tessellating for Fun***'
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***为了乐趣进行镶嵌***'
- en: In this example, an application covers the graphics window by stamping a small
    image over it. The complete program is shown in [Listing 13-8](ch13.html#ch13ex8).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，应用程序通过在图形窗口上盖上一个小图像来覆盖窗口。完整的程序显示在 [列表 13-8](ch13.html#ch13ex8) 中。
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*Listing 13-8: Stamping a pattern across the graphics window*'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13-8：在图形窗口中盖上图案*'
- en: Copy the *Trophy.ico* file from this chapter’s folder to your application’s
    folder, and then run this program to see the result. Your screen should look like
    [Figure 13-7](ch13.html#ch13fig7). Way to go, champ!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 将本章文件夹中的 *Trophy.ico* 文件复制到你的应用程序文件夹中，然后运行这个程序查看结果。你的屏幕应该像 [图 13-7](ch13.html#ch13fig7)
    一样。干得好，冠军！
- en: '![image](graphics/f13-07.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f13-07.jpg)'
- en: '*Figure 13-7: The output of* Stamp.sb'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13-7：* Stamp.sb 的输出'
- en: The program loads an image file (*Trophy.ico*) from your application’s folder
    and saves the image’s identifier in a variable named `img` (line 5). This is done
    by calling the `ImageList` object’s `LoadImage()` method. The program then uses
    the `ImageList` object’s methods to tell you the width and height of the loaded
    image in pixels (lines 7–8). The image’s identifier (the `img` variable) is passed
    as an argument to the called methods. In lines 10–11, the program resizes the
    graphics window to hold eight horizontal and three vertical copies of the image.
    The program then uses a nested loop to stamp the image at different positions
    in the graphics window. The outer loop runs for three rows, and the inner loop
    runs for eight columns, for a total of 24 (3 *×* 8) iterations (lines 13–14).
    In each iteration, the x- and y-positions of the image are computed based on the
    dimensions of the image, and the image is drawn at that location (line 15). Now
    your trophy collection is bigger than Michael Jordan’s is!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 程序从你的应用程序文件夹加载一个图像文件 (*Trophy.ico*) 并将图像的标识符保存到名为 `img` 的变量中（第 5 行）。这是通过调用 `ImageList`
    对象的 `LoadImage()` 方法完成的。程序然后使用 `ImageList` 对象的方法来告诉你加载图像的宽度和高度（以像素为单位）（第 7–8 行）。图像的标识符（即
    `img` 变量）作为参数传递给调用的方法。在第 10–11 行，程序调整图形窗口的大小，使其可以容纳八列和三行图像的副本。接着，程序使用一个嵌套循环在不同的位置盖上图像。外层循环运行三行，内层循环运行八列，总共进行
    24 次迭代（3 *×* 8）（第 13–14 行）。在每次迭代中，图像的 x 和 y 位置根据图像的尺寸进行计算，并在该位置绘制图像（第 15 行）。现在，你的奖杯收藏比迈克尔·乔丹的还要大！
- en: '**TRY IT OUT 13-7**'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试一下 13-7**'
- en: Update [Listing 13-8](ch13.html#ch13ex8) to stamp a different image instead
    of a trophy. Then show your friends and family!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 [列表 13-8](ch13.html#ch13ex8)，用不同的图像替代奖杯图标。然后展示给你的朋友和家人看！
- en: '***Multiple Nesting Levels***'
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***多重嵌套层级***'
- en: You can have more than two levels of nesting. [Listing 13-9](ch13.html#ch13ex9)
    displays all possible combinations of quarters, dimes, and nickels that add up
    to 50 cents.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以有超过两个嵌套层级。[列表 13-9](ch13.html#ch13ex9) 显示所有可能的 25 分、10 分和 5 分硬币的组合，总和为 50
    分。
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*Listing 13-9: Listing the combinations of coins that add up to 50 cents*'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13-9：列出所有加起来为 50 分的硬币组合*'
- en: 'The first loop initially keeps track of quarters by setting `Q = 0`. The second
    loop runs six times and counts all the dimes: `For D = 0 To 5`. For each pass
    of the second loop, the third loop runs 11 times, keeping track of the nickels:
    `For N = 0 To 10`. That means the `If` condition in line 8 is checked 198 times
    (3 *×* 6 × 11)! If the coin values total 50, that combination is displayed (lines
    9–13). While looping through, the code uses the `CursorLeft` property to line
    up the columns and rows properly. Here’s the output:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个循环最初通过设置 `Q = 0` 来跟踪 25 分硬币。第二个循环运行六次，计数所有的 10 分硬币：`For D = 0 To 5`。对于第二个循环的每次执行，第三个循环运行
    11 次，跟踪 5 分硬币：`For N = 0 To 10`。这意味着第 8 行的 `If` 条件会被检查 198 次（3 *×* 6 × 11）！如果硬币的总和为
    50 分，就会显示该组合（第 9–13 行）。在循环过程中，代码使用 `CursorLeft` 属性来正确对齐列和行。以下是输出：
- en: '[PRE16]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**TRY IT OUT 13-8**'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试一下 13-8**'
- en: Write a program that finds all the sets of three integers that are less than
    20 and can be the sides of a right triangle.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，找出所有小于 20 的三整数集合，这些整数可以作为直角三角形的三边。
- en: '**Programming Challenges**'
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程挑战**'
- en: If you get stuck, check out *[http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)*
    for the solutions and for more resources and review questions for teachers and
    students.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你卡住了，可以访问 *[http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)*
    查找解决方案和更多的资源、教师和学生的复习问题。
- en: 'Write a `For` loop that displays this output:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个 `For` 循环，显示以下输出：
- en: '[PRE17]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Although the pizza in the previous exercise is very yummy, it’s not grammatically
    correct, because the program outputs `1 slices of pizza`. Fix the program so that
    its output is grammatically correct (and you won’t embarrass your English teacher).
    (Hint: use an `If` statement inside the `For` loop.)'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽管在上一个练习中的比萨看起来很好吃，但它在语法上并不正确，因为程序输出的是 `1 slices of pizza`。修正程序，使其输出符合语法规则（这样你就不会让你的英语老师尴尬了）。(提示：在
    `For` 循环中使用 `If` 语句。)
- en: 'We built a game for you to quiz Alice on her multiplication so she’ll be ready
    for the queen’s questions. The program generates 10 random multiplication questions
    and asks Alice to enter the answer for each question. Alice earns one point for
    each correct answer. If she enters a wrong answer, show her the correct answer.
    The program ends by showing her total score. Re-create the program, run it, and
    explain how it works:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为你设计了一个游戏，来考察 Alice 的乘法能力，这样她就能准备好应对女王的提问。程序会生成 10 道随机乘法题，并要求 Alice 输入每道题的答案。每答对一道题，Alice
    得一分。如果她输入错误的答案，程序会显示正确答案。程序最后会显示她的总得分。重新创建这个程序，运行它，并解释它是如何工作的：
- en: '[PRE18]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Write a program that draws the following image. (Hint: use a `For` loop to
    draw the line pattern for each of the four corners.)'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，绘制以下图像。（提示：使用 `For` 循环绘制每个角落的线条模式。）
- en: '![image](graphics/f0193-01.jpg)'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f0193-01.jpg)'
