- en: '18'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '18'
- en: Remote Code Execution
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 远程代码执行
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: '*Remote code execution (**RCE)* occurs when an attacker can execute arbitrary
    code on a target machine because of a vulnerability or misconfiguration. RCEs
    are extremely dangerous, as attackers can often ultimately compromise the web
    application or even the underlying web server.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*远程代码执行（**RCE**）*发生在攻击者能够因漏洞或配置错误在目标机器上执行任意代码时。RCE非常危险，因为攻击者往往最终会危及到网页应用程序，甚至是底层的网页服务器。'
- en: 'There is no singular technique for achieving RCE. In previous chapters, I noted
    that attackers can achieve it via SQL injection, insecure deserialization, and
    template injection. In this chapter, we’ll discuss two more strategies that may
    allow you to execute code on a target system: code injection and file inclusion
    vulnerabilities.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 实现RCE并没有单一的技术。在前面的章节中，我提到过攻击者可以通过SQL注入、不安全的反序列化和模板注入等方式来实现RCE。在本章中，我们将讨论另外两种可能让你在目标系统上执行代码的策略：代码注入和文件包含漏洞。
- en: Before we go on, keep in mind that developing RCE exploits often requires a
    deeper understanding of programming, Linux commands, and web application development.
    You can begin to work toward this once you get the hang of finding simpler vulnerabilities.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请记住，开发RCE漏洞通常需要更深入的编程知识、Linux命令和Web应用开发技能。一旦你掌握了发现更简单漏洞的方法，你就可以开始朝这个方向努力了。
- en: Mechanisms
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机制
- en: Sometimes attackers can achieve RCE by injecting malicious code directly into
    executed code. These are *code injection vulnerabilities*. Attackers can also
    achieve RCE by putting malicious code into a file executed or included by the
    victim application, vulnerabilities called *file inclusions*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有时攻击者可以通过将恶意代码直接注入到执行的代码中来实现RCE。这些是*代码注入漏洞*。攻击者还可以通过将恶意代码放入受害者应用程序执行或包含的文件中来实现RCE，这些漏洞被称为*文件包含漏洞*。
- en: Code Injection
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码注入
- en: Code injection vulnerabilities happen when applications allow user input to
    be confused with executable code. Sometimes this happens unintentionally, when
    applications pass unsanitized data into executed code; other times, this is built
    into the application as an intentional feature.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 代码注入漏洞发生在应用程序允许用户输入与可执行代码混淆时。有时这是无意中发生的，当应用程序将未经处理的数据传递到执行代码时；其他时候，这是作为一个有意的特性嵌入到应用程序中的。
- en: 'For example, let’s say you’re a developer trying to build an online calculator.
    Python’s `eval()` function accepts a string and executes it as Python code: `eval("1+1")`
    would return `2`, and `eval("1*3")` would return `3`. Because of its flexibility
    in evaluating a wide variety of user-submitted expressions, `eval()` is a convenient
    way of implementing your calculator. As a result, say you wrote the following
    Python code to perform the functionality. This program will take a user-input
    string, pass it through `eval()`, and return the results:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你是一个开发者，正在构建一个在线计算器。Python的`eval()`函数接受一个字符串并将其作为Python代码执行：`eval("1+1")`会返回`2`，而`eval("1*3")`会返回`3`。由于它能够灵活地评估各种用户提交的表达式，`eval()`是实现计算器的便捷方式。因此，假设你写了如下的Python代码来实现此功能。该程序将接受一个用户输入的字符串，传递给`eval()`并返回结果：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Users can send operations to the calculator by using the following GET request.
    When operating as expected, the following user input would output the string `The
    result is 3`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以通过以下GET请求向计算器发送操作。当按预期操作时，以下用户输入将输出字符串`结果是3`：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'But since `eval()` in this case takes user-provided input and executes it as
    Python code, an attacker could provide the application with something more malicious
    instead. Remember Python’s `os.system()` command from Chapter 16, which executes
    its input string as a system command? Imagine an attacker submitted the following
    HTTP request to the `calculate()` function:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但由于在此情况下`eval()`接收用户提供的输入并将其作为Python代码执行，攻击者可能会提供更具恶意性的内容。记得第16章中Python的`os.system()`命令吗？它执行输入字符串作为系统命令。假设攻击者向`calculate()`函数提交了以下HTTP请求：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As a result, the program would execute `eval("__import__('os').system('ls')")`
    and return the results of the system command `ls`. Since `eval()` can be used
    to execute arbitrary code on the system, if you pass unsanitized user-input into
    the `eval()` function, you have introduced a code injection vulnerability to your
    application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，程序将执行`eval("__import__('os').system('ls')")`并返回系统命令`ls`的结果。由于`eval()`可以用来执行系统上的任意代码，如果你将未经处理的用户输入传入`eval()`函数，那么你就引入了一个代码注入漏洞到你的应用程序中。
- en: 'The attacker could also do something far more damaging, like the following.
    This input would cause the application to call `os.system()` and spawn a reverse
    shell back to the IP 10.0.0.1 on port 8080:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者还可以做更具破坏性的事情，像以下内容。此输入会导致应用程序调用 `os.system()` 并在端口 8080 上向 IP 10.0.0.1 发起反向
    shell 连接：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A *reverse shell* makes the target server communicate with the attacker’s machine
    and establish a remotely accessible connection allowing attackers to execute system
    commands.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*反向 shell* 使得目标服务器与攻击者的机器进行通信，并建立一个远程可访问的连接，允许攻击者执行系统命令。'
- en: Another variant of code injection occurs when user input is concatenated directly
    into a system command. This is also called a *command injection vulnerability*.
    Aside from happening in web applications, command injections are also incredibly
    prevalent in embedded web applications because of their dependency on shell commands
    and frameworks using wrappers that execute shell commands.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种代码注入的变体发生在用户输入直接与系统命令连接时。这也叫做*命令注入漏洞*。除了在 Web 应用程序中出现，命令注入在嵌入式 Web 应用程序中也非常普遍，因为它们依赖于
    shell 命令和使用外壳命令执行的框架。
- en: 'Let’s say *example.com* also has a functionality that allows you to download
    a remote file and view it on the website. To achieve this functionality, the application
    uses the system command `wget` to download the remote file:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 *example.com* 还具有允许你下载远程文件并在网站上查看的功能。为了实现这个功能，应用程序使用系统命令 `wget` 来下载远程文件：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `wget` command is a tool that downloads web pages given a URL, and the
    `-O-` option makes `wget` download the file and display it in standard output.
    Put together, this program takes a URL from user input and passes it into the
    `wget` command executed using `os.system()`. For example, if you submit the following
    request, the application would download the source code of Google’s home page
    and display it to you:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`wget` 命令是一个根据 URL 下载网页的工具，`-O-` 选项使得 `wget` 下载文件并将其显示在标准输出中。综合起来，这个程序接收用户输入的
    URL，并将其传递给通过 `os.system()` 执行的 `wget` 命令。例如，如果提交以下请求，应用程序将下载 Google 首页的源代码并显示给你：'
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Since the user input is passed into a system command directly, attackers could
    inject system commands without even using a Python function. That’s because, on
    the Linux command line, the semicolon (`;`) character separates individual commands,
    so an attacker could execute arbitrary commands after the `wget` command by submitting
    whatever command they want after a semicolon. For instance, the following input
    would cause the application to spawn a reverse shell back to the IP 10.0.0.1 on
    port 8080:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用户输入直接传递给系统命令，攻击者可以在不使用 Python 函数的情况下注入系统命令。这是因为在 Linux 命令行中，分号（`;`）字符用于分隔单个命令，因此攻击者可以通过在分号后提交任意命令，执行
    `wget` 命令之后的任意命令。例如，以下输入会导致应用程序在端口 8080 上向 IP 10.0.0.1 发起反向 shell 连接：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: File Inclusion
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件包含
- en: Most programming languages have functionality that allows developers to *include*
    external files to evaluate the code contained within it. This is useful when developers
    want to incorporate external asset files like images into their applications,
    make use of external code libraries, or reuse code that is written for a different
    purpose.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数编程语言都具有允许开发者*包含*外部文件以评估其中代码的功能。当开发者想将外部资产文件（如图片）集成到应用程序中，使用外部代码库，或者复用为不同目的编写的代码时，这个功能非常有用。
- en: 'Another way attackers can achieve RCE is by making the target server include
    a file containing malicious code. This *file inclusion vulnerability* has two
    subtypes: remote file inclusion and local file inclusion.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者实现远程代码执行（RCE）的一种方式是让目标服务器包含包含恶意代码的文件。这个*文件包含漏洞*有两种子类型：远程文件包含和本地文件包含。
- en: '*Remote file inclusion* vulnerabilities occur when the application allows arbitrary
    files from a remote server to be included. This happens when applications dynamically
    include external files and scripts on their pages and use user input to determine
    the location of the included file.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*远程文件包含*漏洞发生在应用程序允许从远程服务器包含任意文件时。这通常发生在应用程序动态地在其页面上包含外部文件和脚本，并且使用用户输入来确定包含文件的位置。'
- en: 'To see how this works, let’s look at a vulnerable application. The following
    PHP program calls the PHP `include` function on the value of the user-submitted
    HTTP GET parameter `page`. The `include` function then includes and evaluates
    the specified file:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解这个是如何工作的，我们来看看一个易受攻击的应用程序。以下PHP程序调用PHP的`include`函数，并使用用户提交的HTTP GET参数`page`的值。然后，`include`函数会包含并执行指定的文件：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This code allows users to access the various pages of the website by changing
    the `page` parameter. For example, to view the site’s Index and About pages, the
    user can visit *http://example.com/?page=index.php* and *http://example.com/?page=about.php*,
    respectively.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码允许用户通过更改`page`参数来访问网站的不同页面。例如，要查看网站的首页和关于页面，用户可以访问*http://example.com/?page=index.php*和*http://example.com/?page=about.php*。
- en: But if the application doesn’t limit which file the user includes with the `page`
    parameter, an attacker can include a malicious PHP file hosted on their server
    and get that executed by the target server.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果应用程序没有限制用户通过`page`参数包含的文件，攻击者可以包含托管在他们服务器上的恶意PHP文件，并让目标服务器执行该文件。
- en: 'In this case, let’s host a PHP page named *malicious.php* that will execute
    the string contained in the URL GET parameter `cmd` as a system command. The `system()`
    command in PHP is similar to `os.system()` in Python. They both execute a system
    command and display the output. Here is the content of our malicious PHP file:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以托管一个名为*malicious.php*的PHP页面，它会将URL GET参数`cmd`中的字符串作为系统命令执行。PHP中的`system()`命令类似于Python中的`os.system()`。它们都会执行系统命令并显示输出。以下是我们恶意PHP文件的内容：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If the attacker loads this page on *example.com*, the site will evaluate the
    code contained in *malicious.php* located on the attacker’s server. The malicious
    script will then make the target server execute the system command `ls`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果攻击者在*example.com*上加载此页面，网站将执行位于攻击者服务器上的*malicious.php*中包含的代码。恶意脚本将使目标服务器执行系统命令`ls`：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice that this same feature is vulnerable to SSRF and XSS too. This endpoint
    is vulnerable to SSRF because the page could load info about the local system
    and network. Attackers could also make the page load a malicious JavaScript file
    and trick the user into clicking it to execute a reflected XSS attack.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这个功能同样也容易受到SSRF和XSS攻击的影响。该端点容易受到SSRF攻击，因为页面可以加载本地系统和网络的信息。攻击者还可以使页面加载恶意的JavaScript文件，并诱使用户点击以执行反射型XSS攻击。
- en: 'On the other hand, *local file inclusions* happen when applications include
    files in an unsafe way, but the inclusion of remote files isn’t allowed. In this
    case, attackers need to first upload a malicious file to the local machine, and
    then execute it by using local file inclusion. Let’s modify our previous example
    a bit. The following PHP file first gets the HTTP GET parameter `page` and then
    calls the PHP `include` function after concatenating `page` with a directory name
    containing the files users can load:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，*本地文件包含*发生在应用程序以不安全的方式包含文件时，但不允许包含远程文件。在这种情况下，攻击者需要首先将恶意文件上传到本地机器，然后通过使用本地文件包含来执行它。我们可以稍微修改之前的例子。以下PHP文件首先获取HTTP
    GET参数`page`，然后在将`page`与包含用户可以加载的文件的目录名称拼接后，调用PHP的`include`函数：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The site’s *lang* directory contains its home page in multiple languages. For
    example, users can visit *http://example.com/?page=de-index.php* and *http://example.com/?page=en-index.php*
    to visit the German and English home pages, respectively. These URLs will cause
    the website to load the page */var/www/html/lang/de-index.php* and */var/www/html/lang/en-index.php*
    to display the German and English home pages.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 该网站的*lang*目录包含多个语言版本的首页。例如，用户可以访问*http://example.com/?page=de-index.php*和*http://example.com/?page=en-index.php*来分别访问德语和英语首页。这些网址将导致网站加载页面*/var/www/html/lang/de-index.php*和*/var/www/html/lang/en-index.php*，以显示德语和英语的首页。
- en: 'In this case, if the application doesn’t place any restrictions on the possible
    values of the `page` parameter, attackers can load a page of their own by exploiting
    an upload feature. Let’s say that *example.com* allows users to upload files of
    all file types, then stores them in the */var/www/html/uploads/USERNAME* directory.
    The attacker could upload a malicious PHP file to the *uploads* folder. Then they
    could use the sequence `../` to escape out of the *lang* directory and execute
    the malicious uploaded file on the target server:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，如果应用程序没有对`page`参数的可能值施加任何限制，攻击者可以通过利用上传功能加载他们自己的页面。假设*example.com*允许用户上传所有类型的文件，并将它们存储在*/var/www/html/uploads/USERNAME*目录下。攻击者可以将一个恶意的PHP文件上传到*uploads*文件夹中。然后，他们可以使用`../`序列跳出*lang*目录，并在目标服务器上执行恶意上传的文件：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If the attacker loads this URL, the website will include the file */var/www/html/lang/../uploads/USERNAME/malicious.php*,
    which points to */var/www/html/uploads/USERNAME/malicious.php*.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果攻击者加载此URL，网站将包含文件*/var/www/html/lang/../uploads/USERNAME/malicious.php*，该文件指向*/var/www/html/uploads/USERNAME/malicious.php*。
- en: Prevention
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防护
- en: To prevent code injections, you should avoid inserting user input into code
    that gets evaluated. Also, since user input can be passed into evaluated code
    through files that are parsed by the application, you should treat user-uploaded
    files as untrusted, as well as protect the integrity of existing system files
    that your programs execute, parse, or include.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止代码注入，你应该避免将用户输入插入到需要执行的代码中。而且，由于用户输入可以通过应用程序解析的文件传入已评估的代码，你应该将用户上传的文件视为不可信的，并保护程序执行、解析或包含的现有系统文件的完整性。
- en: And to prevent file inclusion vulnerabilities, you should avoid including files
    based on user input. If that isn’t possible, disallow the inclusion of remote
    files and create an allowlist of local files that your programs can include. You
    can also limit file uploads to certain safe file types and host uploaded files
    in a separate environment than the application’s source code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止文件包含漏洞，你应该避免基于用户输入来包含文件。如果这不可避免，请禁止包含远程文件，并创建一个允许的本地文件白名单，供程序包含。你还可以限制文件上传类型为某些安全文件类型，并将上传的文件托管在与应用程序源代码分开的环境中。
- en: Also avoid calling system commands directly and use the programming language’s
    system APIs instead. Most programming languages have built-in functions that allow
    you to run system commands without risking command injection. For instance, PHP
    has a function named `mkdir(``DIRECTORY_NAME``)`. You can use it to create new
    directories instead of calling `system("mkdir` `DIRECTORY_NAME``")`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，避免直接调用系统命令，改用编程语言的系统API。大多数编程语言都有内置函数，允许你在不冒命令注入风险的情况下执行系统命令。例如，PHP有一个名为`mkdir(``DIRECTORY_NAME``)`的函数，你可以使用它来创建新目录，而不是调用`system("mkdir`
    `DIRECTORY_NAME``")`。
- en: You should implement strong input validation for input passed into dangerous
    functions like `eval()` or `include()`. But this technique cannot be relied on
    as the only form of protection, because attackers are constantly coming up with
    inventive methods to bypass input validation.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该为传入危险函数（如`eval()`或`include()`）的输入实现强大的输入验证。但这种技术不能作为唯一的保护措施，因为攻击者不断想出创新的方法绕过输入验证。
- en: Finally, staying up-to-date with patches will prevent your application’s dependencies
    from introducing RCE vulnerabilities. An application’s dependencies, such as open
    source packages and components, often introduce vulnerabilities into an application.
    This is also called a *software supply chain attack*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，保持更新补丁将防止应用程序的依赖关系引入RCE漏洞。应用程序的依赖关系，如开源包和组件，常常会将漏洞引入应用程序。这也被称为*软件供应链攻击*。
- en: You can also deploy a *web application firewall* *(**WAF)* to block suspicious
    attacks. Besides preventing RCEs, this could also help prevent some of the vulnerabilities
    I’ve discussed earlier in this book, such as SQL injection and XSS.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以部署一个*Web应用防火墙* *(**WAF**)*来阻止可疑的攻击。除了防止远程代码执行（RCE）外，这还可以帮助防止我在本书中早些时候讨论的一些漏洞，如SQL注入和XSS。
- en: If an attacker does achieve RCE on a machine, how could you minimize the harm
    they can cause? The *principle of least privilege* states that applications and
    processes should be granted only the privileges required to complete their tasks.
    It is a best practice that lowers the risk of system compromise during an attack
    because attackers won’t be able to gain access to sensitive files and operations
    even if they compromise a low-privileged user or process. For example, when a
    web application requires only read access to a file, it shouldn’t be granted any
    writing or execution permissions. That’s because, if an attacker hijacks an application
    that runs with high privilege, the attacker can gain its permissions.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果攻击者确实在一台机器上成功实现了 RCE，你如何减少他们造成的危害？*最小权限原则* 规定，应用程序和进程应仅授予完成任务所需的最小权限。这是一种最佳实践，可以降低系统在遭受攻击时被危害的风险，因为即使攻击者攻破了一个低权限的用户或进程，他们也无法访问敏感文件和执行敏感操作。例如，当一个
    Web 应用只需要对文件进行读取访问时，不应授予任何写入或执行权限。这是因为，如果攻击者劫持了一个以高权限运行的应用程序，攻击者就能够获得其权限。
- en: Hunting for RCEs
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 寻找 RCE 漏洞
- en: 'Like many of the attacks we’ve covered thus far, RCEs have two types: classic
    and blind. *Classic RCEs* are the ones in which you can read the results of the
    code execution in a subsequent HTTP response, whereas *blind RCEs* occur when
    the malicious code is executed but the returned values of the execution do not
    appear in any HTTP response. Although attackers cannot witness the results of
    their executions, blind RCEs are just as dangerous as classic RCEs because they
    can enable attackers to spawn reverse shells or exfiltrate data to a remote server.
    Hunting for these two types of RCE is a similar process, but the commands or code
    snippets you’ll need to use to verify these vulnerabilities will differ.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 像我们至今所讨论的许多攻击一样，RCE 有两种类型：经典型和盲注型。*经典 RCE* 是指你可以在随后的 HTTP 响应中看到代码执行的结果，而 *盲注型
    RCE* 则是指恶意代码被执行，但执行的返回值不会出现在任何 HTTP 响应中。尽管攻击者无法看到执行结果，但盲注型 RCE 和经典型 RCE 一样危险，因为它们能够使攻击者生成反向
    shell 或将数据外泄到远程服务器。寻找这两种类型的 RCE 是一个类似的过程，但验证这些漏洞所需使用的命令或代码片段会有所不同。
- en: Here are some commands you can use when attacking Linux servers. When hunting
    for a classic RCE vulnerability, all you need to do to verify the vulnerability
    is to execute a command such as `whoami`, which outputs the username of the current
    user. If the response contains the web server’s username, such as `www-data`,
    you’ve confirmed the RCE, as the command has successfully run. On the other hand,
    to validate a blind RCE, you’ll need to execute a command that influences system
    behavior, like `sleep 5`, which delays the response by five seconds. Then if you
    experience a five-second delay before receiving a response, you can confirm the
    vulnerability. Similar to the blind techniques we used to exploit other vulnerabilities,
    you can also set up a listener and attempt to trigger out-of-band interaction
    from the target server.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些你可以用来攻击 Linux 服务器的命令。在寻找经典型 RCE 漏洞时，验证漏洞所需做的就是执行诸如 `whoami` 这样的命令，它会输出当前用户的用户名。如果响应中包含了
    Web 服务器的用户名，比如 `www-data`，那你就确认了 RCE，因为命令已经成功执行。另一方面，要验证盲注型 RCE，你需要执行一个会影响系统行为的命令，比如
    `sleep 5`，它会延迟 5 秒钟的响应。然后，如果你在收到响应之前经历了 5 秒的延迟，你就能确认这个漏洞。与我们用来利用其他漏洞的盲注技术类似，你还可以设置监听器，并尝试从目标服务器触发带外交互。
- en: 'Step 1: Gather Information About the Target'
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 1：收集目标的信息
- en: The first step to finding any vulnerability is to gather information about the
    target. When hunting for RCEs, this step is especially important because the route
    to achieving an RCE is extremely dependent on the way the target is built. You
    should find out information about the web server, programming language, and other
    technologies used by your current target. Use the recon steps outlined in Chapter
    5 to do this.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找任何漏洞的第一步是收集目标的信息。在寻找 RCE（远程代码执行）漏洞时，这一步尤为重要，因为实现 RCE 的路径极大地依赖于目标的构建方式。你应该了解关于当前目标的
    Web 服务器、编程语言以及其他技术的信息。使用第 5 章中概述的侦察步骤来完成这项工作。
- en: 'Step 2: Identify Suspicious User Input Locations'
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 2：识别可疑的用户输入位置
- en: As with finding many other vulnerabilities, the next step to finding any RCE
    is to identify the locations where users can submit input to the application.
    When hunting for code injections, take note of every direct user-input location,
    including URL parameters, HTTP headers, body parameters, and file uploads. Sometimes
    applications parse user-supplied files and concatenate their contents unsafely
    into executed code, so any input that is eventually passed into commands is something
    you should look out for.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 与发现许多其他漏洞一样，找到任何 RCE 的下一步是识别用户可以提交输入到应用程序的位置。在寻找代码注入时，要注意每一个直接的用户输入位置，包括 URL
    参数、HTTP 头部、正文参数和文件上传。有时候，应用程序会不安全地解析用户提供的文件，并将其内容连接到执行的代码中，因此任何最终传递到命令中的输入都是你应该留意的。
- en: To find potential file inclusion vulnerabilities, check for input locations
    being used to determine filenames or paths, as well as any file-upload functionalities
    in the application.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了查找潜在的文件包含漏洞，请检查用于确定文件名或路径的输入位置，以及应用程序中的任何文件上传功能。
- en: 'Step 3: Submit Test Payloads'
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 3 步：提交测试载荷
- en: 'The next thing you should do is to submit test payloads to the application.
    For code injection vulnerabilities, try payloads that are meant to be interpreted
    by the server as code and see if they get executed. For example, here’s a list
    of payloads you could use:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你应该向应用程序提交测试载荷。对于代码注入漏洞，尝试提交那些服务器会作为代码解释执行的载荷，看看它们是否被执行。例如，以下是你可以使用的载荷列表：
- en: '**Python payloads**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python 载荷**'
- en: 'This command is designed to print the string `RCE test!` if Python execution
    succeeds:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令旨在打印字符串`RCE test!`，如果 Python 执行成功：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This command prints the result of the system command `ls`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令打印系统命令`ls`的结果：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This command delays the response for 10 seconds:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将响应延迟 10 秒：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**PHP payloads**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**PHP 载荷**'
- en: 'This command is designed to print the local PHP configuration information if
    execution succeeds:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令旨在打印本地 PHP 配置信息，如果执行成功：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This command prints the result of the system command `ls`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令打印系统命令`ls`的结果：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This command delays the response for 10 seconds:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将响应延迟 10 秒：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Unix payloads**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**Unix 载荷**'
- en: 'This command prints the result of the system command `ls`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令打印系统命令`ls`的结果：
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'These commands delay the response for 10 seconds:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将响应延迟 10 秒：
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'For file inclusion vulnerabilities, you should try to make the endpoint include
    either a remote file or a local file that you can control. For example, for remote
    file inclusion, you could try several forms of a URL that points to your malicious
    file hosted offsite:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对于文件包含漏洞，你应该尝试让端点包含一个你可以控制的远程文件或本地文件。例如，对于远程文件包含，你可以尝试多个指向你托管的恶意文件的 URL 形式：
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'And for local file inclusion vulnerabilities, try different URLs pointing to
    local files that you control:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本地文件包含漏洞，尝试使用指向你控制的本地文件的不同 URL：
- en: '[PRE21]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You can use the protection-bypass techniques you learned in Chapter 13 to construct
    different forms of the same URL.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用第 13 章中学到的保护绕过技巧来构造相同 URL 的不同形式。
- en: 'Step 4: Confirm the Vulnerability'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 4 步：确认漏洞
- en: Finally, confirm the vulnerability by executing harmless commands like `whoami`,
    `ls`, and `sleep 5`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过执行像`whoami`、`ls`和`sleep 5`这样的无害命令来确认漏洞。
- en: Escalating the Attack
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提升攻击
- en: Be extra cautious when escalating RCE vulnerabilities. Most companies would
    prefer that you don’t try to escalate them at all because they don’t want someone
    poking around systems that contain confidential data. During a typical penetration
    test, a hacker will often try to figure out the privileges of the current user
    and attempt privilege-escalation attacks after they gain RCE. But in a bug bounty
    context, this isn’t appropriate. You might accidentally read sensitive information
    about customers or cause damage to the systems by modifying a critical file. It’s
    important that you carefully read the bounty program rules so you don’t cross
    the lines.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在提升 RCE 漏洞时要格外小心。大多数公司更倾向于你不要尝试提升 RCE，因为他们不希望有人在包含机密数据的系统中乱搞。在一次典型的渗透测试中，黑客通常会试图弄清楚当前用户的权限，并在获得
    RCE 后尝试进行权限提升攻击。但在漏洞悬赏的背景下，这样做是不合适的。你可能会意外地读取到关于客户的敏感信息，或者通过修改关键文件造成系统损坏。务必仔细阅读漏洞悬赏程序的规则，以免越界。
- en: 'For classic RCEs, create a proof of concept that executes a harmless command
    like `whoami` or `ls`. You can also prove you’ve found an RCE by reading a common
    system file such as */etc/passwd*. You can use the `cat` command to read a system
    file:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于经典的RCE，创建一个执行无害命令（如`whoami`或`ls`）的概念证明。你也可以通过读取一个常见的系统文件（如*/etc/passwd*）来证明你找到了RCE漏洞。你可以使用`cat`命令来读取系统文件：
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: On Linux systems, the */etc/passwd* file contains a list of the system’s accounts
    and their user IDs, group IDs, home directories, and default shells. This file
    is usually readable without special privileges, so it’s a good file to try to
    access first.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux系统中，*/etc/passwd*文件包含系统的账户及其用户ID、组ID、主目录和默认shell。这些文件通常无需特殊权限即可读取，因此这是一个首先尝试访问的好文件。
- en: 'Finally, you can create a file with a distinct filename on the system, such
    as *rce_by_YOUR_NAME.txt* so it’s clear that this file is a part of your POC.
    You can use the `touch` command to create a file with the specified name in the
    current directory:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以在系统中创建一个具有独特文件名的文件，如*rce_by_YOUR_NAME.txt*，这样就清楚地表明该文件是你POC的一部分。你可以使用`touch`命令在当前目录中创建一个具有指定名称的文件：
- en: '[PRE23]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: For blind RCEs, create a POC that executes the `sleep` command. You can also
    create a reverse shell on the target machine that connects back to your system
    for a more impactful POC. However, this is often against program rules, so be
    sure to check with the program beforehand.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 对于盲目RCE，创建一个执行`sleep`命令的POC。你还可以在目标机器上创建一个反向shell，连接回你的系统，来创建一个更具影响力的POC。然而，这通常违反程序规则，所以在进行之前一定要确认。
- en: It’s easy to step over the bounds of the bounty policy and cause unintended
    damage to the target site when creating POCs for RCE vulnerabilities. When you
    create your POC, make sure that your payload executes a harmless command and that
    your report describes the steps needed to achieve RCE. Often, reading a nonsensitive
    file or creating a file under a random path is enough to prove your findings.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在为RCE漏洞创建POC时，很容易超出赏金政策的范围，导致对目标站点造成意外损害。创建POC时，请确保你的有效载荷执行的是一个无害命令，并且报告中描述了实现RCE所需的步骤。通常，读取一个非敏感文件或在随机路径下创建一个文件就足以证明你的发现。
- en: Bypassing RCE Protection
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绕过RCE保护
- en: Many applications have caught on to the dangers of RCE and employ either input
    validation or a firewall to stop potentially malicious requests. But programming
    languages are often quite flexible, and that enables us to work within the bounds
    of the input validation rules to make our attack work! Here are some basic input
    validation bypasses you can try in case the application is blocking your payloads.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 许多应用程序已经意识到RCE的危险，并采用了输入验证或防火墙来阻止潜在的恶意请求。但编程语言通常非常灵活，这使得我们能够在输入验证规则的范围内工作，从而让我们的攻击得以实现！以下是一些基本的输入验证绕过方法，可以在应用程序阻止你的有效载荷时尝试。
- en: 'For Unix system commands, you can insert quotes and double quotes without changing
    the command’s behavior. You can also use wildcards to substitute for arbitrary
    characters if the system is filtering out certain strings. Finally, any empty
    command substitution results can be inserted into the string without changing
    the results. For example, the following commands will all print the contents of
    */etc/shadow*:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Unix系统命令，你可以插入引号和双引号，而不改变命令的行为。如果系统在过滤某些字符串时，你还可以使用通配符来替代任意字符。最后，任何空的命令替换结果都可以插入字符串中，而不会改变结果。例如，以下命令都会打印*/etc/shadow*的内容：
- en: '[PRE24]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can also vary the way you write the same command in PHP. For example, PHP
    allows you to concatenate function names as strings. You can even hex-encode function
    names, or insert PHP comments in commands without changing their outcome:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以变换PHP中编写相同命令的方式。例如，PHP允许你将函数名作为字符串进行拼接。你甚至可以对函数名进行十六进制编码，或在命令中插入PHP注释，而不改变其结果：
- en: '[PRE25]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'For example, say you want to execute this system command in PHP:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你想在PHP中执行这个系统命令：
- en: '[PRE26]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The following example executes a `system` command by concatenating the strings
    `sys` and `tem`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例通过将字符串`sys`和`tem`连接来执行一个`system`命令：
- en: '[PRE27]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following example does the same thing but inserts a blank comment in the
    middle of the command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例做了相同的事情，但在命令中间插入了一个空白注释：
- en: '[PRE28]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'And this line of code is a hex-encoded version of the `system` command:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码是`system`命令的十六进制编码版本：
- en: '[PRE29]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Similar behavior exists in Python. The following are all equivalent in Python
    syntax:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中也存在类似的行为。以下在Python语法中是等价的：
- en: '[PRE30]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Additionally, some servers concatenate the values of multiple parameters that
    have the same name into a single value. In this case, you can split malicious
    code into chunks to bypass input validation. For example, if the firewall blocks
    requests that contain the string `system`, you can split your RCE payload into
    chunks, like so:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，一些服务器会将多个同名参数的值连接成一个单一的值。在这种情况下，你可以将恶意代码拆分成多个部分，以绕过输入验证。例如，如果防火墙阻止包含`system`字符串的请求，你可以将你的RCE负载拆分成多个部分，像这样：
- en: '[PRE31]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The parameters will get through the firewall without issue, since the request
    technically doesn’t contain the string `system`. But when the server processes
    the request, the parameter values will be concatenated into a single string that
    forms our RCE payload: `"__import__(''os'').system(''ls'')"`.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这些参数将顺利通过防火墙，因为请求在技术上并不包含`system`字符串。但当服务器处理请求时，参数值将被连接成一个单一的字符串，形成我们的RCE负载：`"__import__('os').system('ls')"`。
- en: This is only a tiny subset of filter bypasses you can try; many more exist.
    For example, you can hex-encode, URL-encode, double-URL-encode, and vary the cases
    (uppercase or lowercase characters) of your payloads. You can also try to insert
    special characters such as null bytes, newline characters, escape characters `(\)`,
    and other special or non-ASCII characters into the payload. Then, observe which
    payloads are blocked and which ones succeed, and craft exploits that will bypass
    the filter to accomplish your desired results. If you’re interested in this topic,
    search online for *RCE filter bypass* or *WAF bypass* to learn more. Additionally,
    the principles mentioned in this section can be used to bypass input validation
    for other vulnerabilities as well, such as SQL injection and XSS.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是你可以尝试的过滤器绕过的一个小子集；还有很多其他方法。例如，你可以进行十六进制编码、URL编码、双重URL编码，并且改变负载的大小写（大写或小写字符）。你还可以尝试将特殊字符插入到负载中，如空字节、换行符、转义字符`(\)`以及其他特殊或非ASCII字符。然后，观察哪些负载被阻止，哪些成功，并创建可以绕过过滤器的漏洞利用，达到你的预期结果。如果你对这个话题感兴趣，可以在线搜索*RCE
    过滤器绕过*或*WAF 绕过*来了解更多。此外，本节中提到的原理也可以用于绕过其他漏洞的输入验证，例如SQL注入和XSS。
- en: Finding Your First RCE!
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 寻找你的第一个RCE！
- en: It’s time to find your first RCE by using the tips and tricks you’ve learned
    in this chapter.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候通过使用你在本章学到的技巧和窍门来找到你的第一个RCE了。
- en: Identify suspicious user-input locations. For code injections, take note of
    every user-input location, including URL parameters, HTTP headers, body parameters,
    and file uploads. To find potential file inclusion vulnerabilities, check for
    input locations being used to determine or construct filenames and for file-upload
    functions.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 识别可疑的用户输入位置。对于代码注入，要注意每一个用户输入位置，包括URL参数、HTTP头、请求体参数和文件上传位置。要查找潜在的文件包含漏洞，检查用于确定或构造文件名的输入位置，以及文件上传功能。
- en: Submit test payloads to the input locations in order to detect potential vulnerabilities.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交测试负载到输入位置，以检测潜在的漏洞。
- en: If your requests are blocked, try protection-bypass techniques and see if your
    payload succeeds.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的请求被阻止，尝试使用保护绕过技术，看看你的负载是否成功。
- en: Finally, confirm the vulnerability by trying to execute harmless commands such
    as `whoami`, `ls`, and `sleep 5`.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过尝试执行无害命令如`whoami`、`ls`和`sleep 5`来确认漏洞。
- en: Avoid reading sensitive system files or altering any files with the vulnerability
    you’ve found.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 避免读取敏感的系统文件或修改你发现漏洞的任何文件。
- en: Submit your first RCE report to the program!
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向项目提交你的第一个RCE报告！
