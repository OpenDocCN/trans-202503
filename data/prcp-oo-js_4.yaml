- en: Chapter 4. Constructors and Prototypes
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 4 章 构造函数与原型
- en: You might be able to get pretty far in JavaScript without understanding constructors
    and prototypes, but you won’t truly appreciate the language without a good grasp
    of them. Because JavaScript lacks classes, it turns to constructors and prototypes
    to bring a similar order to objects. But just because some of the patterns resemble
    classes doesn’t mean they behave the same way. In this chapter, you’ll explore
    constructors and prototypes in detail to see how JavaScript uses them to create
    objects.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能在不理解构造函数和原型的情况下，在 JavaScript 中走得相当远，但如果没有对它们的良好理解，你就无法真正理解这门语言。因为 JavaScript
    缺乏类，它依赖构造函数和原型来为对象提供类似的结构。但仅仅因为一些模式类似于类，并不意味着它们的行为相同。在本章中，你将详细探讨构造函数和原型，了解 JavaScript
    如何利用它们创建对象。
- en: Constructors
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构造函数
- en: A *constructor* is simply a function that is used with `new` to create an object.
    Up to this point, you’ve seen several of the built-in JavaScript constructors,
    such as `Object`, `Array`, and `Function`. The advantage of constructors is that
    objects created with the same constructor contain the same properties and methods.
    If you want to create multiple similar objects, you can create your own constructors
    and therefore your own reference types.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*构造函数* 只是一个与 `new` 一起使用来创建对象的函数。到目前为止，你已经见过几个内建的 JavaScript 构造函数，例如 `Object`、`Array`
    和 `Function`。构造函数的优点在于，通过相同构造函数创建的对象包含相同的属性和方法。如果你想创建多个相似的对象，你可以创建自己的构造函数，从而创建自己的引用类型。'
- en: 'Because a constructor is just a function, you define it in the same way. The
    only difference is that constructor names should begin with a capital letter,
    to distinguish them from other functions. For example, look at the following empty
    `Person` function:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因为构造函数只是一个函数，所以你可以用相同的方式来定义它。唯一的区别是，构造函数的名称应以大写字母开头，以便与其他函数区分开来。例如，看看下面这个空的
    `Person` 函数：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This function is a constructor, but there is absolutely no syntactic difference
    between this and any other function. The clue that `Person` is a constructor is
    in the name—the first letter is capitalized.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数是一个构造函数，但它与其他任何函数在语法上没有区别。`Person` 是构造函数的线索就在于它的名称——第一个字母大写。
- en: 'After the constructor is defined, you can start creating instances, like the
    following two `Person` objects:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数定义后，你可以开始创建实例，如下面这两个 `Person` 对象：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When you have no parameters to pass into your constructor, you can even omit
    the parentheses:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的构造函数没有参数需要传入时，甚至可以省略括号：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Even though the `Person` constructor doesn’t explicitly return anything, both
    `person1` and `person2` are considered instances of the new `Person` type. The
    `new` operator automatically creates an object of the given type and returns it.
    That also means you can use the `instanceof` operator to deduce an object’s type.
    The following code shows `instanceof` in action with the newly created objects:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 即使 `Person` 构造函数没有显式地返回任何东西，`person1` 和 `person2` 仍然被认为是新 `Person` 类型的实例。`new`
    操作符会自动创建给定类型的对象并返回它。这也意味着你可以使用 `instanceof` 操作符推断对象的类型。以下代码展示了 `instanceof` 在新创建的对象上的应用：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Because `person1` and `person2` were created with the `Person` constructor,
    `instanceof` returns `true` when it checks whether these objects are instances
    of the `Person` type.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 `person1` 和 `person2` 是通过 `Person` 构造函数创建的，所以当检查这些对象是否是 `Person` 类型的实例时，`instanceof`
    返回 `true`。
- en: 'You can also check the type of an instance using the `constructor` property.
    Every object instance is automatically created with a `constructor` property that
    contains a reference to the constructor function that created it. For *generic*
    objects (those created via an object literal or the `Object` constructor), `constructor`
    is set to `Object`; for objects created with a custom constructor, `constructor`
    points back to that constructor function instead. For example, `Person` is the
    `constructor` property for `person1` and `person2`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 `constructor` 属性来检查实例的类型。每个对象实例都会自动创建一个 `constructor` 属性，其中包含一个指向创建该实例的构造函数的引用。对于
    *通用* 对象（通过对象字面量或 `Object` 构造函数创建的对象），`constructor` 设置为 `Object`；对于使用自定义构造函数创建的对象，`constructor`
    指向那个构造函数。例如，`Person` 是 `person1` 和 `person2` 的 `constructor` 属性：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `console.log` function outputs `true` in both cases, because both objects
    were created with the `Person` constructor.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.log` 函数在两种情况下都会输出`true`，因为这两个对象都是使用`Person`构造函数创建的。'
- en: Even though this relationship exists between an instance and its constructor,
    you are still advised to use `instanceof` to check the type of an instance. This
    is because the `constructor` property can be overwritten and therefore may not
    be completely accurate.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 即使实例与其构造函数之间存在这种关系，仍然建议使用 `instanceof` 来检查实例的类型。这是因为 `constructor` 属性可以被覆盖，因此可能并不完全准确。
- en: 'Of course, an empty constructor function isn’t very useful. The whole point
    of a constructor is to make it easy to create more objects with the same properties
    and methods. To do that, simply add any properties you want to `this` inside of
    the constructor, as in the following example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，一个空的构造函数并不太有用。构造函数的主要目的是让你能够轻松创建具有相同属性和方法的多个对象。为此，只需在构造函数内部将任何你想要的属性添加到 `this`
    中，如下例所示：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This version of the `Person` constructor accepts a single named parameter, `name`,
    and assigns it to the `name` property of the `this` object ❶. The constructor
    also adds a `sayName()` method to the object ❷. The `this` object is automatically
    created by `new` when you call the constructor, and it is an instance of the constructor’s
    type. (In this case, `this` is an instance of `Person`.) There’s no need to return
    a value from the function because the `new` operator produces the return value.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本的 `Person` 构造函数接受一个名为 `name` 的单一参数，并将其分配给 `this` 对象的 `name` 属性 ❶。构造函数还为对象添加了一个
    `sayName()` 方法 ❷。当你调用构造函数时，`this` 对象会由 `new` 自动创建，它是构造函数类型的一个实例（在此情况下，`this` 是
    `Person` 的一个实例）。由于 `new` 运算符会生成返回值，因此不需要从函数中返回值。
- en: 'Now you can use the `Person` constructor to create objects with an initialized
    `name` property:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以使用 `Person` 构造函数创建具有初始化 `name` 属性的对象：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Each object has its own `name` property, so `sayName()` should return different
    values depending on the object on which you use it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 每个对象都有自己的 `name` 属性，因此 `sayName()` 方法应该根据调用它的对象返回不同的值。
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*You can also explicitly call return inside of a constructor. If the returned
    value is an object, it will be returned instead of the newly created object instance.
    If the returned value is a primitive, the newly created object is used and the
    returned value is ignored.*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*你也可以在构造函数内部显式地调用 return。如果返回值是一个对象，它将被返回，而不是新创建的对象实例。如果返回值是一个原始值，则会使用新创建的对象，返回值会被忽略。*'
- en: 'Constructors allow you to initialize an instance of a type in a consistent
    way, performing all of the property setup that is necessary before the object
    can be used. For example, you could also use `Object.defineProperty()` inside
    of a constructor to help initialize the instance:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数允许你以一致的方式初始化一个类型的实例，执行所有必要的属性设置，以便对象可以被使用。例如，你也可以在构造函数内部使用 `Object.defineProperty()`
    来帮助初始化实例：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this version of the `Person` constructor, the `name` property is an accessor
    property that uses the `name` parameter for storing the actual name. This is possible
    because named parameters act like local variables.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个版本的 `Person` 构造函数中，`name` 属性是一个访问器属性，它使用 `name` 参数来存储实际的名称。这是可能的，因为命名参数像局部变量一样起作用。
- en: 'Make sure to always call constructors with `new`; otherwise, you risk changing
    the global object instead of the newly created object. Consider what happens in
    the following code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 确保始终使用 `new` 来调用构造函数；否则，你可能会更改全局对象，而不是新创建的对象。考虑以下代码中的情况：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When `Person` is called as a function without `new`, the value of `this` inside
    of the constructor is equal to the global `this` object. The variable `person1`
    doesn’t contain a value because the `Person` constructor relies on `new` to supply
    a return value. Without `new`, `Person` is just a function without a `return`
    statement. The assignment to `this.name` actually creates a global variable called
    `name`, which is where the name passed to `Person` is stored. [Chapter 6](ch06.html
    "Chapter 6. Object Patterns") describes a solution to both this problem and more
    complex object composition patterns.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `Person` 作为函数被调用且没有使用 `new` 时，构造函数内部的 `this` 值将等于全局的 `this` 对象。变量 `person1`
    不包含任何值，因为 `Person` 构造函数依赖 `new` 来提供返回值。如果没有 `new`，`Person` 就只是一个没有 `return` 语句的函数。对
    `this.name` 的赋值实际上会创建一个全局变量 `name`，其中存储了传递给 `Person` 的名称。[第 6 章](ch06.html "第
    6 章 对象模式") 介绍了针对这个问题以及更复杂的对象组合模式的解决方案。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*An error occurs if you call the Person constructor in strict mode without
    using new. This is because strict mode doesn’t assign this to the global object.
    Instead, this remains undefined, and an error occurs whenever you attempt to create
    a property on undefined.*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果在严格模式下调用Person构造函数而不使用new，则会发生错误。这是因为严格模式不会将this分配给全局对象，而是保持this为undefined，每当你尝试在undefined上创建属性时，就会发生错误。*'
- en: Constructors allow you to configure object instances with the same properties,
    but constructors alone don’t eliminate code redundancy. In the example code thus
    far, each instance has had its own `sayName()` method even though `sayName()`
    doesn’t change. That means if you have 100 instances of an object, then there
    are 100 copies of a function that do the exact same thing, just with different
    data.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数允许你为对象实例配置相同的属性，但单靠构造函数并不能消除代码冗余。在到目前为止的示例代码中，每个实例都有自己的`sayName()`方法，尽管`sayName()`方法没有变化。这意味着如果你有100个对象实例，那么就会有100个做完全相同事情的函数副本，只是使用不同的数据。
- en: It would be much more efficient if all of the instances shared one method, and
    then that method could use `this.name` to retrieve the appropriate data. This
    is where prototypes come in.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有实例共享一个方法，并且该方法可以使用`this.name`来获取适当的数据，那么效率会更高。这就是原型的作用。
- en: Prototypes
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原型
- en: 'You can think of a *prototype* as a recipe for an object. Almost every function
    (with the exception of some built-in functions) has a `prototype` property that
    is used during the creation of new instances. That prototype is shared among all
    of the object instances, and those instances can access properties of the prototype.
    For example, the `hasOwnProperty()` method is defined on the generic `Object`
    prototype, but it can be accessed from any object as if it were an own property,
    as shown in this example:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以把*原型*看作是一个对象的“食谱”。几乎每个函数（除了某些内置函数）都有一个`prototype`属性，它在创建新实例时会被使用。这个原型在所有对象实例之间共享，且这些实例可以访问原型的属性。例如，`hasOwnProperty()`方法是在通用的`Object`原型上定义的，但它可以像访问自身属性一样从任何对象访问，就像这个例子所示：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Even though there is no definition for `hasOwnProperty()` on `book`, that method
    can still be accessed as `book.hasOwnProperty()` because the definition does exist
    on `Object.prototype`. Remember that the `in` operator returns `true` for both
    prototype properties *and* own properties.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 即使`book`上没有定义`hasOwnProperty()`，该方法仍然可以通过`book.hasOwnProperty()`访问，因为这个定义确实存在于`Object.prototype`上。记住，`in`运算符对于原型属性*和*自身属性都会返回`true`。
- en: Identifying a Prototype Property
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 识别原型属性
- en: 'You can determine whether a property is on the prototype by using a function
    such as:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用一个函数来判断一个属性是否在原型上，例如：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If the property is `in` an object but `hasOwnProperty()` returns `false`, then
    the property is on the prototype.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个属性位于一个对象的`in`中，但`hasOwnProperty()`返回`false`，那么这个属性就在原型上。
- en: The [[Prototype]] Property
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[[Prototype]]属性'
- en: An instance keeps track of its prototype through an internal property called
    `[[Prototype]]`. This property is a pointer back to the prototype object that
    the instance is using. When you create a new object using `new`, the constructor’s
    `prototype` property is assigned to the `[[Prototype]]` property of that new object.
    [Figure 4-1](ch04.html#left_square_bracketleft_square_br "Figure 4-1. The [[Prototype]]
    properties for person1 and person2 point to the same prototype.") shows how the
    `[[Prototype]]` property lets multiple instances of an object type refer to the
    same prototype, which can reduce code duplication.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一个实例通过一个名为`[[Prototype]]`的内部属性来跟踪它的原型。这个属性是指向该实例所使用的原型对象的指针。当你使用`new`创建一个新对象时，构造函数的`prototype`属性会被分配给新对象的`[[Prototype]]`属性。[图4-1](ch04.html#left_square_bracketleft_square_br
    "图4-1. person1和person2的[[Prototype]]属性指向相同的原型.")展示了`[[Prototype]]`属性如何让多个对象实例指向相同的原型，从而减少代码重复。
- en: '![The [[Prototype]] properties for person1 and person2 point to the same prototype.](figs/web/oojs04_01.png)Figure 4-1. The
    `[[Prototype]]` properties for `person1` and `person2` point to the same prototype.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![person1和person2的[[Prototype]]属性指向相同的原型。](figs/web/oojs04_01.png)图4-1. `person1`和`person2`的`[[Prototype]]`属性指向相同的原型。'
- en: You can read the value of the `[[Prototype]]` property by using the `Object.getPrototypeOf()`
    method on an object. For example, the following code checks the `[[Prototype]]`
    of a generic, empty object.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在对象上使用`Object.getPrototypeOf()`方法来读取`[[Prototype]]`属性的值。例如，以下代码检查一个通用空对象的`[[Prototype]]`。
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: For any generic object like this one ❶, `[[Prototype]]` is always a reference
    to `Object.prototype`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像这个这样的通用对象❶，`[[Prototype]]`总是指向`Object.prototype`。
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*Some JavaScript engines also support a property called __proto__ on all objects.
    This property allows you to both read from and write to the [[Prototype]] property.
    Firefox, Safari, Chrome, and Node.js all support this property, and __proto__
    is on the path for standardization in ECMAScript 6.*'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*一些 JavaScript 引擎还支持在所有对象上使用一个名为__proto__的属性。这个属性允许你既可以读取，也可以写入`[[Prototype]]`属性。Firefox、Safari、Chrome
    和 Node.js 都支持这个属性，__proto__正在朝着 ECMAScript 6 标准化的方向发展。*'
- en: 'You can also test to see if one object is a prototype for another by using
    the `isPrototypeOf()` method, which is included on all objects:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过使用`isPrototypeOf()`方法来测试一个对象是否是另一个对象的原型，这个方法在所有对象上都可以使用：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Because `object` is just a generic object, its prototype should be `Object.prototype`,
    meaning `isPrototypeOf()` should return `true`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`object`只是一个通用对象，它的原型应该是`Object.prototype`，这意味着`isPrototypeOf()`应该返回`true`。
- en: When a property is read on an object, the JavaScript engine first looks for
    an own property with that name. If the engine finds a correctly named own property,
    it returns that value. If no own property with that name exists on the target
    object, JavaScript searches the `[[Prototype]]` object instead. If a prototype
    property with that name exists, the value of that property is returned. If the
    search concludes without finding a property with the correct name, `undefined`
    is returned.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当读取一个对象的属性时，JavaScript 引擎首先会查找该名称的自有属性。如果引擎找到了一个名称正确的自有属性，它会返回该值。如果目标对象上没有该名称的自有属性，JavaScript
    会搜索`[[Prototype]]`对象。如果原型属性存在，它会返回该属性的值。如果搜索结束后没有找到正确名称的属性，则返回`undefined`。
- en: 'Consider the following, in which an object is first created without any own
    properties:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑以下示例，其中对象首先被创建时没有任何自有属性：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this example, the `toString()` method comes from the prototype and returns
    `"[object Object]"` ❶ by default. If you then define an own property called `toString()`,
    that own property is used whenever `toString()` is called on the object again
    ❷. The own property *shadows* the prototype property, so the prototype property
    of the same name is no longer used. The prototype property is used again only
    if the own property is deleted from the object ❸. (Keep in mind that you can’t
    delete a prototype property from an instance because the `delete` operator acts
    only on own properties.) [Figure 4-2](ch04.html#object_with_no_own_properties_left_paren
    "Figure 4-2. An object with no own properties (top) has only the methods of its
    prototype. Adding a toString() property to the object (middle) replaces the prototype
    property until you delete it (bottom).") shows what is happening in this example.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`toString()`方法来自原型，并且默认返回`"[object Object]"` ❶。如果你定义了一个名为`toString()`的自有属性，那么每次调用`toString()`时都会使用这个自有属性
    ❷。自有属性*覆盖*了原型属性，因此同名的原型属性不再被使用。只有在删除了自有属性之后，原型属性才会再次被使用 ❸。（请记住，你不能从实例中删除原型属性，因为`delete`操作符仅对自有属性起作用。）[图
    4-2](ch04.html#object_with_no_own_properties_left_paren "图 4-2：没有自有属性的对象（上方）只有其原型的方法。向对象添加`toString()`属性（中间）会替换原型属性，直到你删除它（下方）。")显示了这个示例中的具体情况。
- en: 'This example also highlights an important concept: You cannot assign a value
    to a prototype property from an instance. As you can see in the middle section
    of [Figure 4-2](ch04.html#object_with_no_own_properties_left_paren "Figure 4-2. An
    object with no own properties (top) has only the methods of its prototype. Adding
    a toString() property to the object (middle) replaces the prototype property until
    you delete it (bottom)."), assigning a value to `toString` creates a new own property
    on the instance, leaving the property on the prototype untouched.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例还突出了一个重要的概念：你不能通过实例给原型属性赋值。如[图 4-2](ch04.html#object_with_no_own_properties_left_paren
    "图 4-2：没有自有属性的对象（上方）只有其原型的方法。向对象添加`toString()`属性（中间）会替换原型属性，直到你删除它（下方）。")的中间部分所示，给`toString`赋值会在实例上创建一个新的自有属性，原型上的属性保持不变。
- en: '![An object with no own properties (top) has only the methods of its prototype.
    Adding a toString() property to the object (middle) replaces the prototype property
    until you delete it (bottom).](figs/web/oojs04_02.png.jpg)Figure 4-2. An object
    with no own properties (top) has only the methods of its prototype. Adding a `toString()`
    property to the object (middle) replaces the prototype property until you delete
    it (bottom).'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![没有自有属性的对象（顶部）只有原型的方法。向对象添加 `toString()` 属性（中间）会替换原型属性，直到你删除它（底部）。](figs/web/oojs04_02.png.jpg)图4-2.
    没有自有属性的对象（顶部）只有原型的方法。向对象添加 `toString()` 属性（中间）会替换原型属性，直到你删除它（底部）。'
- en: Using Prototypes with Constructors
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用构造函数中的原型
- en: The shared nature of prototypes makes them ideal for defining methods once for
    all objects of a given type. Because methods tend to do the same thing for all
    instances, there’s no reason each instance needs its own set of methods.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 原型的共享特性使其非常适合为给定类型的所有对象一次性定义方法。因为方法通常对所有实例执行相同的操作，所以没有必要为每个实例定义一组单独的方法。
- en: 'It’s much more efficient to put the methods on the prototype and then use `this`
    to access the current instance. For example, consider the following new `Person`
    constructor:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 将方法放在原型上，然后使用 `this` 访问当前实例，要高效得多。例如，考虑以下新的 `Person` 构造函数：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this version of the `Person` constructor, `sayName()` is defined on the prototype
    ❶ instead of in the constructor. The object instances work exactly the same as
    the example from earlier in this chapter, even though `sayName()` is now a prototype
    property instead of an own property. Because `person1` and `person2` are each
    base references for their calls to `sayName()`, the `this` value is assigned to
    `person1` and `person2`, respectively.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个版本的 `Person` 构造函数中，`sayName()` 被定义在原型上 ❶，而不是在构造函数中。尽管 `sayName()` 现在是一个原型属性，而不是自有属性，两个对象实例的行为和本章早些时候的例子完全相同。因为
    `person1` 和 `person2` 是它们各自调用 `sayName()` 的基本引用，`this` 值分别被分配给 `person1` 和 `person2`。
- en: 'You can also store other types of data on the prototype, but be careful when
    using reference values. Because these values are shared across instances, you
    might not expect one instance to be able to change values that another instance
    will access. This example shows what can happen when you don’t watch where your
    reference values are pointing:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在原型上存储其他类型的数据，但在使用引用值时要小心。因为这些值是跨实例共享的，你可能没有预料到一个实例可以更改另一个实例访问的值。这个例子展示了当你没有注意引用值的指向时可能发生的情况：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `favorites` property ❶ is defined on the prototype, which means `person1.favorites`
    and `person2.favorites` point to the *same array*. Any values you add to either
    person’s `favorites` will be elements in that array on the prototype. That may
    not be the behavior that you actually want, so it’s important to be very careful
    about what you define on the prototype.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`favorites` 属性 ❶ 定义在原型上，这意味着 `person1.favorites` 和 `person2.favorites` 指向*相同的数组*。你添加到任一人的
    `favorites` 中的值，将会成为原型上该数组的元素。这可能不是你想要的行为，因此在定义原型上的内容时，必须非常小心。'
- en: 'Even though you can add properties to the prototype one by one, many developers
    use a more succinct pattern that involves replacing the prototype with an object
    literal:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你可以逐个添加属性到原型，许多开发者使用一种更简洁的模式，即用对象字面量替换原型：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This code defines two methods on the prototype, `sayName()` ❶ and `toString()`
    ❷. This pattern has become quite popular because it eliminates the need to type
    `Person.prototype` multiple times. There is, however, one side effect to be aware
    of:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码在原型上定义了两个方法，`sayName()` ❶ 和 `toString()` ❷。这个模式变得非常流行，因为它避免了多次输入 `Person.prototype`。然而，需要注意的是，有一个副作用：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Using the object literal notation to overwrite the prototype changed the `constructor`
    property so that it now points to `Object` ❶ instead of `Person`. This happened
    because the `constructor` property exists on the prototype, not on the object
    instance. When a function is created, its `prototype` property is created with
    a `constructor` property equal to the function. This pattern completely overwrites
    the prototype object, which means that `constructor` will come from the newly
    created (generic) object that was assigned to `Person.prototype`. To avoid this,
    restore the `constructor` property to a proper value when overwriting the prototype:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用对象字面量语法覆盖原型更改了 `constructor` 属性，使其现在指向 `Object` ❶ 而不是 `Person`。之所以会发生这种情况，是因为
    `constructor` 属性存在于原型上，而不是对象实例上。当创建一个函数时，它的 `prototype` 属性会创建一个 `constructor`
    属性，值等于该函数。这种模式完全覆盖了原型对象，意味着 `constructor` 将来自于新创建的（通用的）对象，这个对象被分配给 `Person.prototype`。为避免这种情况，在覆盖原型时，应恢复
    `constructor` 属性为正确的值：
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this example, the `constructor` property is specifically assigned on the
    prototype ❶. It’s good practice to make this the first property on the prototype
    so you don’t forget to include it.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`constructor` 属性被专门分配到原型上 ❶。将其作为原型上的第一个属性是一个好习惯，这样就不会忘记包括它。
- en: Perhaps the most interesting aspect of the relationships among constructors,
    prototypes, and instances is that there is no direct link between the instance
    and the constructor. There is, however, a direct link between the instance and
    the prototype and between the prototype and the constructor. [Figure 4-3](ch04.html#instance_and_its_constructor_are_linked
    "Figure 4-3. An instance and its constructor are linked via the prototype.") illustrates
    this relationship.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数、原型和实例之间关系中最有趣的方面之一是，实例与构造函数之间没有直接链接。然而，实例与原型之间以及原型与构造函数之间有直接的链接。[图 4-3](ch04.html#instance_and_its_constructor_are_linked
    "图 4-3：实例和它的构造函数通过原型相连接") 展示了这种关系。
- en: '![An instance and its constructor are linked via the prototype.](figs/web/oojs04_03.png.jpg)Figure 4-3. An
    instance and its constructor are linked via the prototype.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![实例和它的构造函数通过原型相连接。](figs/web/oojs04_03.png.jpg)图 4-3：实例和它的构造函数通过原型相连接。'
- en: This nature of this relationship means that any disruption between the instance
    and the prototype will also create a disruption between the instance and the constructor.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这种关系的特点意味着，实例与原型之间的任何中断，也会导致实例与构造函数之间的中断。
- en: Changing Prototypes
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改原型
- en: 'Because all instances of a particular type reference a shared prototype, you
    can augment all of those objects together at any time. Remember, the `[[Prototype]]`
    property just contains a pointer to the prototype, and any changes to the prototype
    are immediately available on any instance referencing it. That means you can literally
    add new members to a prototype at any point and have those changes reflected on
    existing instances, as in this example:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有特定类型的实例都引用一个共享的原型，你可以在任何时候一起增强这些对象。记住，`[[Prototype]]` 属性仅包含指向原型的指针，对原型的任何更改会立即在所有引用它的实例中生效。这意味着，你可以在任何时候向原型中添加新的成员，并且这些更改会在现有实例中反映出来，正如下面这个例子所示：
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this code, the `Person` type starts out with only two methods, `sayName()`
    ❶ and `toString()` ❷. Two instances of `Person` are created ❸, and then the `sayHi()`
    ❹ method is added to the prototype. After that point, both instances can now access
    `sayHi()` ❺. The search for a named property happens each time that property is
    accessed, so the experience is seamless.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，`Person` 类型最初只有两个方法，`sayName()` ❶ 和 `toString()` ❷。创建了两个 `Person` 实例
    ❸，然后将 `sayHi()` ❹ 方法添加到原型上。此后，两个实例都可以访问 `sayHi()` ❺ 方法。每次访问属性时，都会进行属性查找，因此体验是无缝的。
- en: The ability to modify the prototype at any time has some interesting repercussions
    for sealed and frozen objects. When you use `Object.seal()` or `Object.freeze()`
    on an object, you are acting *solely* on the object instance and the own properties.
    You can’t add new own properties or change existing own properties on frozen objects,
    but you can certainly still add properties on the prototype and continue extending
    those objects, as demonstrated in the following listing.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何时候都能修改原型，这对密封和冻结的对象有一些有趣的影响。当你在对象上使用 `Object.seal()` 或 `Object.freeze()`
    时，你只是在操作对象实例和它的自有属性。你不能在冻结的对象上添加新的自有属性或修改现有的自有属性，但你当然仍然可以在原型上添加属性，并继续扩展这些对象，正如下面的代码示例所示。
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this example, there are two instances of `Person`. The first (`person1`)
    is frozen ❶, while the second is a normal object. When you add `sayHi()` to the
    prototype ❷, both `person1` and `person2` attain a new method, seemingly contradicting
    `person1`’s frozen status. The `[[Prototype]]` property is considered an own property
    of the instance, and while the property itself is frozen, the value (an object)
    is not.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，有两个 `Person` 实例。第一个（`person1`）是被冻结的❶，而第二个是普通对象。当你将 `sayHi()` 添加到原型❷时，`person1`
    和 `person2` 都获得了这个新方法，似乎与 `person1` 被冻结的状态相矛盾。`[[Prototype]]` 属性被视为实例的自身属性，虽然该属性本身被冻结，但其值（一个对象）并未被冻结。
- en: Note
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*In practice, you probably won’t use prototypes this way very often when developing
    in JavaScript. However, it’s important to understand the relationships that exist
    between objects and their prototype, and strange examples like this help to illuminate
    the concepts.*'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*实际上，在开发 JavaScript 时，你可能并不会经常以这种方式使用原型。然而，理解对象与其原型之间的关系是很重要的，像这样的奇特示例有助于阐明这些概念。*'
- en: Built-in Object Prototypes
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内建对象原型
- en: At this point, you might wonder if prototypes also allow you to modify the built-in
    objects that come standard in the JavaScript engine. The answer is yes. All built-in
    objects have constructors, and therefore, they have prototypes that you can change.
    For instance, adding a new method for use on all arrays is as simple as modifying
    `Array.prototype`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 到这个点，你可能会想，原型是否也允许你修改 JavaScript 引擎中标准自带的内建对象。答案是肯定的。所有内建对象都有构造函数，因此它们有原型，你可以修改。例如，想要为所有数组添加一个新方法，只需修改
    `Array.prototype`。
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This example creates a method called `sum()` on `Array.prototype` that simply
    adds up all of the items in the array and returns the result. The `numbers` array
    automatically has access to that method through the prototype. Inside of `sum()`,
    `this` refers to `numbers`, which is an instance of `Array`, so the method is
    free to use other array methods such as `reduce()`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例在 `Array.prototype` 上创建了一个名为 `sum()` 的方法，它会将数组中的所有项加起来并返回结果。`numbers` 数组通过原型自动获得了该方法。在
    `sum()` 内部，`this` 指向的是 `numbers`，它是 `Array` 的一个实例，因此该方法可以自由使用其他数组方法，如 `reduce()`。
- en: 'You may recall that strings, numbers, and Booleans all have built-in primitive
    wrapper types that are used to access primitive values as if they were objects.
    If you modify the primitive wrapper type prototype as in this example, you can
    actually add more functionality to those primitive values:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得，字符串、数字和布尔值都有内建的原始包装类型，这些类型用于像操作对象一样访问原始值。如果你修改原始包装类型原型，如本示例所示，你实际上可以为这些原始值添加更多功能：
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This code creates a new method called `capitalize()` for strings. The `String`
    type is the primitive wrapper for strings, and modifying its prototype means that
    all strings automatically get those changes.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码为字符串创建了一个名为 `capitalize()` 的新方法。`String` 类型是字符串的原始包装类型，修改其原型意味着所有字符串都会自动应用这些更改。
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*While it may be fun and interesting to modify built-in objects to experiment
    with functionality, it’s not a good idea to do so in a production environment.
    Developers expect built-in objects to behave a certain way and have certain methods.
    Deliberately altering built-in objects violates those expectations and makes other
    developers unsure how the objects should work.*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*虽然修改内建对象以实验功能可能既有趣又令人兴奋，但在生产环境中这样做并不是一个好主意。开发者期望内建对象表现出某种特定方式并具备某些方法。故意修改内建对象会违反这些期望，且会让其他开发者不确定这些对象应该如何工作。*'
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Constructors are just normal functions that are called with the `new` operator.
    You can define your own constructors anytime you want to create multiple objects
    with the same properties. You can identify objects created from constructors using
    `instanceof` or by accessing their `constructor` property directly.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数只是正常的函数，通过 `new` 操作符调用时使用。你可以随时定义自己的构造函数，用来创建多个具有相同属性的对象。你可以通过 `instanceof`
    或直接访问它们的 `constructor` 属性来识别由构造函数创建的对象。
- en: Every function has a `prototype` property that defines any properties shared
    by objects created with a particular constructor. Shared methods and primitive
    value properties are typically defined on prototypes, while all other properties
    are defined within the constructor. The `constructor` property is actually defined
    on the prototype because it is shared among object instances.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 每个函数都有一个`prototype`属性，用来定义通过特定构造函数创建的对象共享的属性。共享的方法和原始值属性通常在原型上定义，而所有其他属性则在构造函数内部定义。`constructor`属性实际上是在原型上定义的，因为它是所有对象实例共享的。
- en: The prototype of an object is stored internally in the `[[Prototype]]` property.
    This property is a reference, not a copy. If you change the prototype at any point
    in time, those changes will occur on all instances because of the way JavaScript
    looks up properties. When you try to access a property on an object, that object
    is searched for any own property with the name you specify. If an own property
    is not found, the prototype is searched. This searching mechanism means the prototype
    can continue to change, and object instances referencing that prototype will reflect
    those changes immediately.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对象的原型存储在`[[Prototype]]`属性中。这个属性是一个引用，而不是副本。如果在任何时刻更改原型，这些更改会影响所有实例，因为 JavaScript
    查找属性的方式。当你尝试访问对象上的一个属性时，会在该对象上查找是否有你指定名称的自有属性。如果没有找到自有属性，则会继续查找原型。这个查找机制意味着原型可以继续变化，而引用该原型的对象实例会立即反映这些变化。
- en: Built-in objects also have prototypes that can be modified. While it’s not recommended
    to do this in production, it can be helpful for experimentation and proofs of
    concept for new functionality.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 内建对象也有可以修改的原型。虽然不建议在生产环境中进行此操作，但它对于实验和验证新功能的概念证明非常有帮助。
