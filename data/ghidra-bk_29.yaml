- en: '## **GHIDRA FOR IDA USERS**'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '## **GHIDRA对于IDA用户**'
- en: '![Image](Images/com.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/com.jpg)'
- en: If you are an experienced IDA Pro user interested in giving Ghidra a test run,
    either as a curiosity or as a more permanent transition, you may be familiar with
    many of the concepts presented in this book. This appendix is intended to map
    IDA terminology and usage to similar functionality in Ghidra, without providing
    instruction on Ghidra functionality. For specific usage of any Ghidra feature
    mentioned here, please refer to the relevant chapters in this book that discuss
    the features in far more detail.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一个有经验的IDA Pro用户，想要尝试Ghidra，无论是出于好奇心还是更永久的过渡，你可能已经熟悉本书中介绍的许多概念。本附录旨在将IDA的术语和用法映射到Ghidra中的类似功能，而不提供Ghidra功能的使用指导。对于本书中提到的任何Ghidra特性的具体使用，请参考相关章节，这些章节将详细讨论这些特性。
- en: We make no attempt to compare the performance of the two tools, nor do we argue
    for the superiority of one over the other. Your choice of which to use might be
    motivated by price or a specific feature offered by one and not the other. What
    follows is a whirlwind tour through the topics of the book from the perspective
    of an IDA user.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会试图比较这两款工具的性能，也不会主张某一款工具优于另一款。你选择使用哪一款可能受价格或某一款工具提供的特定功能的影响，而另一款工具没有相同功能。接下来将从IDA用户的角度，带你快速浏览本书中的主题。
- en: '### **The Basics**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '### **基础知识**'
- en: As you begin your journey, you may find it useful to bring along a guide to
    help you learn an entirely new set of hotkeys. The *Ghidra Cheat Sheet* (*[https://ghidra-sre.org/CheatSheet.html](https://ghidra-sre.org/CheatSheet.html)*)
    is a useful trifold that lists common user actions and their associated hotkeys
    and/or tool buttons. Shortly, we’ll cover how to remap hotkeys in the event that
    you miss your trusted IDA favorites.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始这段旅程时，你可能会发现携带一本指南来帮助你学习一整套新的快捷键非常有用。*Ghidra备忘单*（*[https://ghidra-sre.org/CheatSheet.html](https://ghidra-sre.org/CheatSheet.html)）是一本有用的三折页，列出了常见的用户操作及其相关的快捷键和/或工具按钮。不久后，我们将介绍如何重新映射快捷键，以防你怀念你信赖的IDA常用功能。
- en: '***Database Creation***'
  id: totrans-6
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***数据库创建***'
- en: 'Whereas IDA imports one binary into one database and is inherently single user,
    Ghidra is project oriented, can contain multiple files per project, and can support
    collaborative reversing by many users working together on the same project. The
    concept of an IDA database most closely maps to a single *program* within a Ghidra
    project. Ghidra’s user interface is split into two main components: *Project*
    and *CodeBrowser*.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 而IDA将一个二进制文件导入到一个数据库中，且天生是单用户的，Ghidra则是面向项目的，可以在一个项目中包含多个文件，并支持多个用户协作反向工程，共同在同一个项目上工作。IDA数据库的概念最接近Ghidra项目中的单个*程序*。Ghidra的用户界面分为两个主要部分：*项目*和*CodeBrowser*。
- en: 'Your first interaction with Ghidra is to create projects (shared or non-shared)
    and import “programs” (binaries) into those projects through the Project window.
    When you use IDA to open a new binary, and ultimately create a new database, you
    and IDA perform the following actions:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你与Ghidra的首次互动是创建项目（共享或非共享），并通过项目窗口将“程序”（二进制文件）导入这些项目。当你使用IDA打开一个新二进制文件，并最终创建一个新数据库时，你和IDA将执行以下操作：
- en: (IDA) Query every available loader to learn which loaders recognize the newly
    selected file.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (IDA) 查询所有可用的加载器，以了解哪些加载器识别新选择的文件。
- en: (IDA) Display the load file dialog, presenting a list of acceptable loaders,
    processor modules, and analysis options.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (IDA) 显示加载文件对话框，列出可接受的加载器、处理器模块和分析选项。
- en: (User) Choose the loader module that should be used to load file content into
    the new database, or accept IDA’s default choice.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (用户) 选择应当用于将文件内容加载到新数据库中的加载器模块，或接受IDA的默认选择。
- en: (User) Choose the processor module that should be used when disassembling database
    content, or accept IDA’s default choice (which may be dictated by a loader module).
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (用户) 选择应当在反汇编数据库内容时使用的处理器模块，或接受IDA的默认选择（该选择可能由加载器模块决定）。
- en: (User) Choose any analysis options that should be used when creating the initial
    database, or accept IDA’s default choices. You may also elect to disable analysis
    altogether at this point.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (用户) 选择在创建初始数据库时应使用的任何分析选项，或接受IDA的默认选择。你也可以选择在此时完全禁用分析。
- en: (User) Confirm your choices by clicking **OK**.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (用户) 点击**确定**确认你的选择。
- en: (IDA) The selected loader module populates the database with byte content taken
    from the original file. IDA loaders generally do not load the entire file into
    the database, and it is generally not possible to re-create the original file
    from content available in the new database.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (IDA) 所选的加载器模块将使用来自原始文件的字节内容填充数据库。IDA 加载器通常不会将整个文件加载到数据库中，并且通常无法从新数据库中的内容重新创建原始文件。
- en: (IDA) If analysis is enabled, the selected processor module is used to disassemble
    code identified by the loader and any selected analyzers (IDA calls analyzers
    *kernel options*).
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (IDA) 如果启用了分析，所选的处理器模块将用于将加载器识别的代码以及任何选定的分析器进行反汇编（IDA 将分析器称为 *内核选项*）。
- en: (IDA) The resulting database is displayed in IDA’s user interface.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (IDA) 结果数据库将在 IDA 的用户界面中显示。
- en: 'Ghidra has analogues for each of the listed steps; however, the process is
    broken into two distinct phases: import and analysis. The Ghidra import process
    is generally initiated from the Project window and includes the following steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Ghidra 有类似的步骤；然而，该过程分为两个不同的阶段：导入和分析。Ghidra 的导入过程通常从项目窗口开始，包括以下步骤：
- en: (Ghidra) Query every available loader to learn which loaders recognize the newly
    selected file.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (Ghidra) 查询所有可用的加载器，了解哪些加载器识别新选择的文件。
- en: (Ghidra) Display the import dialog, presenting a list of acceptable formats
    (roughly loaders) and languages (roughly processor modules).
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (Ghidra) 显示导入对话框，呈现可接受的格式（大致是加载器）和语言（大致是处理器模块）列表。
- en: (User) Choose the format for importing the file into the current project, or
    accept Ghidra’s default choice.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (User) 选择将文件导入当前项目的格式，或接受 Ghidra 的默认选择。
- en: (User) Choose the language for disassembling program content, or accept Ghidra’s
    default choice.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (User) 选择用于反汇编程序内容的语言，或接受 Ghidra 的默认选择。
- en: (User) Confirm your choices by clicking **OK**.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (User) 通过点击 **确定** 来确认您的选择。
- en: (Ghidra) The loader associated with the selected format loads byte content taken
    from the original file into a new “program” in the current project. The loader
    creates program sections and processes the binary’s symbol, import, and export
    tables, but performs no analysis involving disassembly. Ghidra loaders generally
    load the entire file into your Ghidra project, though some portions of the file
    may not be displayed by the CodeBrowser.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (Ghidra) 与所选格式关联的加载器将来自原始文件的字节内容加载到当前项目中的新“程序”中。加载器创建程序段并处理二进制文件的符号、导入和导出表，但不会执行任何涉及反汇编的分析。Ghidra
    加载器通常将整个文件加载到您的 Ghidra 项目中，尽管文件的某些部分可能不会在 CodeBrowser 中显示。
- en: 'Though this process is similar to IDA database creation, some steps are missing.
    With Ghidra, analysis takes place in the CodeBrowser. Once you have successfully
    imported a file, double-clicking that file in the Project view opens the file
    in Ghidra’s CodeBrowser. When you open a program for the first time, Ghidra performs
    the following steps:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管此过程与 IDA 数据库创建类似，但缺少一些步骤。使用 Ghidra 时，分析发生在 CodeBrowser 中。一旦成功导入文件，双击项目视图中的该文件即可在
    Ghidra 的 CodeBrowser 中打开该文件。首次打开程序时，Ghidra 执行以下步骤：
- en: (Ghidra) Open the CodeBrowser and display the results of the import process,
    asking whether you would like to analyze the file.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (Ghidra) 打开 CodeBrowser 并显示导入过程的结果，询问您是否希望分析该文件。
- en: (User) Decide whether to analyze the file. If you elect not to analyze the file,
    you are dropped into the CodeBrowser, where you can scroll through byte content
    but will have no disassembly. In this case, you may choose Analysis ▸ Auto Analyze
    to analyze the file at any time. In either case, when you decide to analyze the
    file, Ghidra displays a list of “analyzers” compatible with the current file format
    and language setting. You may choose which analyzers to run and then modify any
    options the analyzer utilizes before allowing Ghidra to perform its initial analysis.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (User) 决定是否分析该文件。如果您选择不分析该文件，您将进入 CodeBrowser，可以浏览字节内容，但不会有反汇编。在这种情况下，您可以随时选择
    **分析** ▸ **自动分析** 来分析该文件。无论哪种情况，当您决定分析文件时，Ghidra 会显示与当前文件格式和语言设置兼容的“分析器”列表。您可以选择要运行的分析器，然后在允许
    Ghidra 执行初始分析之前修改分析器使用的任何选项。
- en: (Ghidra) Execute all selected analyzers and drop the user into the CodeBrowser
    to begin working with the fully analyzed program.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (Ghidra) 执行所有选定的分析器，并将用户带入 CodeBrowser，以便开始处理已完全分析的程序。
- en: For more information about the import and analysis stages, refer to the appropriate
    chapters in this book. IDA has neither an analogy for Project view nor any collaborative
    reversing capabilities other than the shared Lumina database. Project view is
    introduced in [Chapter 4](ch04.xhtml#ch04). Shared projects and support for collaborative
    reverse engineering are discussed in [Chapter 11](ch11.xhtml#ch11). The CodeBrowser
    is introduced in [Chapter 4](ch04.xhtml#ch04), with more depth beginning in [Chapter
    5](ch05.xhtml#ch05) and continuing through the remainder of the book.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有关导入和分析阶段的更多信息，请参阅本书中的相关章节。IDA 没有类似于 Project view 的功能，也没有任何协作反向分析功能，除了共享的 Lumina
    数据库之外。Project view 在[第 4 章](ch04.xhtml#ch04)中介绍。共享项目和对协作反向工程的支持在[第 11 章](ch11.xhtml#ch11)中讨论。CodeBrowser
    在[第 4 章](ch04.xhtml#ch04)中介绍，更多深入内容从[第 5 章](ch05.xhtml#ch05)开始，直到本书的其余部分。
- en: The CodeBrowser is a Ghidra *tool* and is your primary interface for analyzing
    programs. As such, it is the Ghidra component most similar to IDA’s user interface,
    so we will spend some time relating IDA user-interface elements to their CodeBrowser
    equivalents.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: CodeBrowser 是 Ghidra 的*工具*，是你分析程序的主要界面。因此，它是最类似于 IDA 用户界面的 Ghidra 组件，因此我们将花一些时间将
    IDA 的用户界面元素与它们在 CodeBrowser 中的等效项进行比较。
- en: '***Basic Windows and Navigation***'
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***基础窗口和导航***'
- en: In its default configuration, the CodeBrowser is a container for multiple specialty
    windows that display information about features of a program. Detailed discussion
    about the CodeBrowser begins in [Chapter 5](ch05.xhtml#ch05) and continues, with
    coverage of related data displays, through [Chapter 10](ch10.xhtml#ch10).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认配置中，CodeBrowser 是一个容器，包含多个显示程序功能信息的特殊窗口。关于 CodeBrowser 的详细讨论从[第 5 章](ch05.xhtml#ch05)开始，并继续涵盖相关数据展示，直到[第
    10 章](ch10.xhtml#ch10)。
- en: '**Listing View**'
  id: totrans-33
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**列表视图**'
- en: At the center of the CodeBrowser is the Ghidra Listing window, which provides
    a classic disassembly similar to your IDA View in text mode. To customize the
    format of your listings, the Browser Field Formatter enables you to modify, rearrange,
    and delete individual listing elements. As in IDA, navigation within the Listing
    windows is primarily accomplished by double-clicking *labels* (IDA names) to navigate
    to the address associated with a label. Right-click, context-sensitive menus provide
    access to common operations associated with labels, including renaming and retyping.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: CodeBrowser 的核心是 Ghidra 列表窗口，它提供了类似于 IDA 文本模式的经典反汇编。要自定义列表的格式，浏览器字段格式化器允许你修改、重新排列和删除单个列表元素。与
    IDA 一样，在列表窗口中的导航主要通过双击*标签*（IDA 名称）来实现，跳转到与标签关联的地址。右键点击时，上下文敏感菜单提供了与标签相关的常用操作，包括重命名和重新输入。
- en: Similar to IDA, each function in the listing has a header comment that lists
    the function’s prototype, provides a summary of the function’s local variables,
    and displays cross-references that target the function. The Ghidra equivalent
    of IDA’s Stack view is accessible only by right-clicking in a function’s header
    and selecting Function ▸ Edit Stack Frame.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 与 IDA 类似，列表中的每个函数都有一个头部注释，列出了函数的原型，提供了函数局部变量的摘要，并显示了指向该函数的交叉引用。Ghidra 相当于 IDA
    的堆栈视图的功能只能通过右键点击函数头部并选择 函数 ▸ 编辑堆栈帧 来访问。
- en: If you enjoy IDA highlighting all occurrences of a string that you click (such
    as a register name or instruction mnemonic), you may be disappointed to learn
    that this is not a default behavior in Ghidra. To enable this behavior, visit
    Edit ▸ Tool Options ▸ Listing Fields ▸ Cursor Text Highlight and change Mouse
    Button to Activate from MIDDLE to LEFT. Another feature you may love or hate is
    Markup Register Variable References, which causes Ghidra to automatically rename
    registers that are used to hold a function’s incoming parameters. To disable this
    behavior and have Ghidra use register name instruction operands, navigate to Edit
    ▸ Tool Options ▸ Listing Fields ▸ Operands Fields and uncheck Markup Register
    Variable References.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢 IDA 高亮显示你点击的字符串的所有出现位置（如寄存器名称或指令助记符），你可能会失望地发现这在 Ghidra 中不是默认行为。要启用此功能，请访问
    编辑 ▸ 工具选项 ▸ 列表字段 ▸ 光标文本高亮，并将鼠标按钮从中键更改为左键。另一个你可能喜欢或讨厌的功能是标记寄存器变量引用，它会使 Ghidra 自动重命名用于存放函数传入参数的寄存器。要禁用此功能并让
    Ghidra 使用寄存器名称指令操作数，请导航到 编辑 ▸ 工具选项 ▸ 列表字段 ▸ 操作数字段，并取消选中标记寄存器变量引用。
- en: Finally, if you are longing for Ghidra to “do the right thing” when muscle memory
    causes you to use your favorite IDA hotkey sequences, you’ll want to spend some
    time in Edit ▸ Tool Options ▸ Key Bindings to reassign default Ghidra hotkeys
    to match those that you use in IDA. This is such a common task for IDA users that
    third-party key binding files have been published to automate reassignment of
    all your favorite hotkey sequences.^([1](footnotes.xhtml#app01fn1))
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你希望 Ghidra 在肌肉记忆让你使用最喜欢的 IDA 快捷键序列时能够“做正确的事”，你将需要花时间在 编辑 ▸ 工具选项 ▸ 键绑定 中重新分配默认的
    Ghidra 快捷键，以匹配你在 IDA 中使用的快捷键序列。对于 IDA 用户来说，这是一个非常常见的任务，第三方键绑定文件已被发布，用于自动重新分配你最喜爱的快捷键序列。^([1](footnotes.xhtml#app01fn1))
- en: '##### **Graph View**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '##### **图形视图**'
- en: Ghidra’s Listing window is a text-only view. If you prefer working in IDA’s
    graph view, you’ll need to open a separate Function Graph window in Ghidra. Like
    IDA’s graph view, Ghidra’s Function Graph window can display a single function
    at any one time, and you can manipulate the items in the Function Graph window
    just as you would in the Listing window.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Ghidra 的列表窗口是一个仅显示文本的视图。如果你更喜欢在 IDA 的图形视图中工作，你将需要在 Ghidra 中打开一个单独的函数图窗口。像 IDA
    的图形视图一样，Ghidra 的函数图窗口每次只能显示一个函数，并且你可以像在列表窗口中一样操作函数图窗口中的项目。
- en: By default, Ghidra’s graph layout algorithm may route edges behind basic block
    nodes, which may make tracing the edge more difficult. You can disable this behavior
    by visiting Edit ▸ Tool Options ▸ Function Graph ▸ Nested Code Layout and checking
    Route Edges Around Vertices.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Ghidra 的图形布局算法可能会将边缘路由到基本块节点后面，这可能会使追踪边缘变得更加困难。你可以通过访问 编辑 ▸ 工具选项 ▸ 函数图
    ▸ 嵌套代码布局 并勾选 "绕过顶点路由边缘" 来禁用此行为。
- en: '**The Decompiler**'
  id: totrans-41
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**反编译器**'
- en: Ghidra includes decompilation capability for all supported processors. By default,
    the Decompiler window appears to the right of the Listing window and will display
    decompiled C source code whenever your cursor is positioned within a function
    in the Listing view. If you like to add and view end-of-line comments in the generated
    C source, you’ll need to enable them at Edit ▸ Tool Options ▸ Decompiler ▸ Display
    by checking Display EOL comments. On the same options tab, you’ll also find Disable
    printing of type casts, which can improve readability in some cases by dramatically
    decluttering the resulting code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Ghidra 为所有受支持的处理器提供反编译功能。默认情况下，反编译窗口会显示在列表窗口的右侧，并且每当你的光标位于列表视图中的某个函数时，它将显示反编译后的
    C 源代码。如果你想在生成的 C 源代码中添加并查看行尾注释，你需要在 编辑 ▸ 工具选项 ▸ 反编译器 ▸ 显示 中勾选 "显示行尾注释"。在同一选项卡中，你还会找到
    "禁用类型转换打印"，这可以通过显著减少结果代码的杂乱程度来提高可读性。
- en: The decompiler also has a tendency to aggressively optimize the code it generates.
    If you find yourself reading the disassembled version of a function and feel like
    behaviors are missing in the decompiled version, the decompiler may have eliminated
    what it believes to be dead code within the function. To display that code in
    the Decompiler window, navigate to Edit ▸ Tool Options ▸ Decompiler ▸ Analysis
    and deselect Eliminate dead code. The decompiler is discussed further in [Chapter
    19](ch19.xhtml#ch19).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 反编译器也倾向于对它生成的代码进行积极优化。如果你发现自己在阅读某个函数的反汇编版本时，感觉反编译版本中缺少了某些行为，反编译器可能已删除它认为是无用代码的部分。要在反编译器窗口中显示这些代码，请导航至
    编辑 ▸ 工具选项 ▸ 反编译器 ▸ 分析，并取消选择 "消除死代码"。反编译器将在 [第19章](ch19.xhtml#ch19) 中进一步讨论。
- en: '**The Symbol Tree**'
  id: totrans-44
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**符号树**'
- en: 'The CodeBrowser’s Symbol Tree window provides a hierarchical view of all symbols
    contained in a program. The Symbol Tree contains six top-level folders representing
    six classes of symbols that may exist within a program. Clicking a name in any
    Symbol Tree folder will navigate the Listing window to the corresponding address:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: CodeBrowser 的符号树窗口提供了程序中所有符号的层次视图。符号树包含六个顶级文件夹，代表程序中可能存在的六种符号类。点击任何符号树文件夹中的名称将使列表窗口导航到相应的地址：
- en: '**Imports** The *Imports* folder is relevant for dynamically linked binaries
    and provides a listing of external functions and libraries referenced by the program.
    This most closely correlates to IDA’s Imports tab.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**导入** *导入* 文件夹适用于动态链接的二进制文件，并提供程序引用的外部函数和库的列表。这与 IDA 的导入标签最为相似。'
- en: '**Exports** The *Exports* folder lists any symbols in the program that are
    publicly visible outside the program. The symbols in this folder are often similar
    to those output by the `nm` utility.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**导出** *导出* 文件夹列出了程序中任何对外可见的符号。这些符号通常与 `nm` 工具输出的符号类似。'
- en: '**Functions** This folder contains an entry for each function in the program
    listing.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**函数** 该文件夹包含程序列表中每个函数的条目。'
- en: '**Labels** This folder contains entries for any additional nonlocal labels
    within the program.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**标签** 该文件夹包含程序中任何附加的非本地标签的条目。'
- en: '**Classes** This folder contains the names of any C++ classes for which Ghidra
    has located Runtime Type Identification (RTTI).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**类** 该文件夹包含 Ghidra 找到运行时类型识别（RTTI）的任何 C++ 类的名称。'
- en: '**Namespaces** This folder contains an entry for each namespace created by
    Ghidra during program analysis. Refer to Ghidra Help for more information on Ghidra
    namespaces.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**命名空间** 该文件夹包含 Ghidra 在程序分析过程中创建的每个命名空间的条目。有关 Ghidra 命名空间的更多信息，请参见 Ghidra
    帮助。'
- en: '**Data Type Manager**'
  id: totrans-52
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**数据类型管理器**'
- en: The Data Type Manager maintains all of Ghidra’s knowledge about data structures
    and function prototypes. Each folder in the Data Type Manager is the rough equivalent
    of an IDA type library (*.til*). The Data Type Manager fills the role of IDA’s
    Structures, Enums, Local Types, and Type Libraries windows and is discussed in
    detail in [Chapter 8](ch08.xhtml#ch08).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类型管理器维护着 Ghidra 关于数据结构和函数原型的所有知识。数据类型管理器中的每个文件夹大致相当于 IDA 类型库 (*.til*)。数据类型管理器承担了
    IDA 的结构体、枚举、局部类型和类型库窗口的角色，详细内容请参见[第 8 章](ch08.xhtml#ch08)。
- en: '**Scripting**'
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**脚本**'
- en: Ghidra is implemented in Java, and its natural scripting language is Java. In
    addition to routine scripts, the primary Java extensions to Ghidra include analyzers,
    plugins, and loaders. Ghidra analyzers and plugins together take on the role that
    IDA’s plugins fill, while Ghidra loaders perform essentially the same role as
    IDA loaders. Ghidra supports the concept of processor modules; however, Ghidra
    processors are defined using a specification language known as SLEIGH.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Ghidra 是用 Java 实现的，其本地脚本语言是 Java。除了常规脚本外，Ghidra 的主要 Java 扩展包括分析器、插件和加载器。Ghidra
    的分析器和插件共同承担了 IDA 插件的角色，而 Ghidra 的加载器则基本上与 IDA 的加载器承担相同的角色。Ghidra 支持处理器模块的概念；然而，Ghidra
    的处理器是使用一种名为 SLEIGH 的规范语言定义的。
- en: Ghidra includes a basic script editor for routine scripting tasks as well as
    an Eclipse plugin to facilitate the creation of more complex Ghidra scripts and
    extensions. The use of Python is supported via Jython. The Ghidra API is implemented
    as a class hierarchy that represents the features of a binary as Java objects,
    and convenience classes are provided for easy access to some of the most commonly
    used API classes. Ghidra scripts are discussed in [Chapters 14](ch14.xhtml#ch14)
    and [15](ch15.xhtml#ch15) and extensions are discussed in [Chapters 15](ch15.xhtml#ch15),
    [17](ch17.xhtml#ch17), and [18](ch18.xhtml#ch18).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Ghidra 包含一个用于常规脚本任务的基础脚本编辑器，以及一个 Eclipse 插件，以方便创建更复杂的 Ghidra 脚本和扩展。通过 Jython
    支持使用 Python。Ghidra API 实现为一个类层次结构，表示二进制文件的特性作为 Java 对象，并提供了方便的类以便轻松访问一些最常用的 API
    类。Ghidra 脚本在[第 14 章](ch14.xhtml#ch14)和[第 15 章](ch15.xhtml#ch15)中进行了讨论，扩展内容则在[第
    15 章](ch15.xhtml#ch15)、[第 17 章](ch17.xhtml#ch17)和[第 18 章](ch18.xhtml#ch18)中进行讨论。
- en: '**Summary**'
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**摘要**'
- en: Ghidra’s capabilities are quite clearly similar to those of IDA. In some cases,
    Ghidra’s displays are similar enough to IDA’s that the only things that will slow
    you down are new hotkeys, tool buttons, and menus. In other cases, information
    is presented in a different manner than in IDA, and your learning curve will be
    steeper. In either case, whether you take advantage of Ghidra’s customization
    capabilities to make it drive like IDA or you take the time to learn a new way
    of doing things, you’re likely to find that Ghidra meets most of your reverse
    engineering needs and in some cases opens up entirely new ways of getting things
    done.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Ghidra 的功能显然与 IDA 非常相似。在某些情况下，Ghidra 的显示方式与 IDA 相似，以至于唯一可能让你慢下来的是新的热键、工具按钮和菜单。在其他情况下，信息的呈现方式与
    IDA 有所不同，你的学习曲线将更陡峭。无论如何，无论你是利用 Ghidra 的自定义功能使其像 IDA 一样工作，还是花时间学习一种新的工作方式，你可能会发现
    Ghidra 能够满足你大部分的逆向工程需求，甚至在某些情况下打开了全新的工作方式。
