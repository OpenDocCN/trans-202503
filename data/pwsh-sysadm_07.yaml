- en: '6'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '6'
- en: WRITING FUNCTIONS
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 编写函数
- en: '![Images](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common.jpg)'
- en: 'So far, the code you’ve written has been fairly one-dimensional: your scripts
    had a single task. And while there’s nothing wrong with a script that can only
    access files in a folder, you’ll want code that can do more than one thing as
    you write more-robust PowerShell tools. There’s nothing stopping you from packing
    more and more into a script. You could write a thousand lines of code that do
    hundreds of tasks, all in a single, uninterrupted block of code. But that script
    would be a mess to read and a mess to work with. You could break each task into
    its own script, but that would be a mess to use. You want one tool that can do
    many things, not a hundred that can each do a single thing.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你编写的代码相对单一：你的脚本只有单一的任务。虽然仅仅是一个能访问文件夹中文件的脚本并没有错，但当你编写更强大的 PowerShell 工具时，你会希望代码能做更多事情。没有什么能阻止你把更多内容塞进一个脚本中。你可以编写一千行代码，做数百个任务，所有这些都写在一个不间断的代码块中。但那个脚本将会是一个混乱，既难以阅读也难以操作。你可以将每个任务拆分成独立的脚本，但那样使用起来也会很混乱。你想要的是一个能够做很多事情的工具，而不是一百个只能做单一任务的工具。
- en: To do this, you’ll break each task into its own *function*, a labeled piece
    of code that performs a single task. A function is defined once. You write the
    code to solve a certain problem once, store it in a function, and anytime you
    run into that problem, you just use—or *call*—the function that solves it. Functions
    dramatically increase the usability and readability of your code, making it much
    easier to work with. In this chapter, you’ll learn to write functions, add and
    manage your functions’ parameters, and set up functions to accept pipeline input.
    But first, let’s look at a bit of terminology.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，你将把每个任务分解为其自己的*函数*，一个标记的代码块，执行单一任务。函数只需要定义一次。你只需要编写代码来解决某个问题一次，将其存储在函数中，遇到这个问题时，你只需使用——或*调用*——解决问题的函数。函数显著提高了代码的可用性和可读性，使得代码更易于操作。在本章中，你将学习如何编写函数，添加和管理函数的参数，并设置函数以接受管道输入。但首先，让我们先了解一些术语。
- en: Functions vs. Cmdlets
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数与 cmdlet
- en: If the idea of a function sounds familiar, it is probably because it sounds
    a bit like the cmdlets you’ve been using throughout this book, such as `Start-Service`
    and `Write-Host`. These are also named pieces of code that solve a single problem.
    The difference between a function and a cmdlet is *how* each of these constructs
    is made. A cmdlet isn’t written with PowerShell. It’s written in another language,
    typically something like C#, and then it’s compiled and made available inside
    PowerShell. Functions, on the other hand, are written in PowerShell’s simple scripting
    language.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数的概念听起来很熟悉，那可能是因为它听起来有点像你在本书中一直使用的 cmdlet，例如`Start-Service`和`Write-Host`。这些也是被命名的代码块，用来解决单一问题。函数和
    cmdlet 之间的区别在于*如何*创建这些构造。cmdlet 并不是用 PowerShell 编写的。它通常是用另一种语言编写的，通常像 C#，然后编译后在
    PowerShell 中提供。另一方面，函数是用 PowerShell 简单的脚本语言编写的。
- en: You can see which commands are cmdlets and which are functions by using the
    `Get-Command` cmdlet and its `CommandType` parameter, as in [Listing 6-1](ch06.xhtml#ch6list1).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`Get-Command` cmdlet 和它的`CommandType`参数查看哪些命令是 cmdlet，哪些是函数，如[清单 6-1](ch06.xhtml#ch6list1)所示。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 6-1: Displaying the available functions*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 6-1：显示可用的函数*'
- en: This command will display all the functions currently loaded into your PowerShell
    session, or inside modules that are available to PowerShell ([Chapter 7](ch07.xhtml#ch7)
    covers modules). To see other functions, you have to copy and paste them into
    the console, add them to an available module, or *dot source* them (which we’ll
    also cover later).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将显示当前加载到 PowerShell 会话中的所有函数，或显示 PowerShell 可用的模块中的函数（[第 7 章](ch07.xhtml#ch7)介绍了模块）。要查看其他函数，你必须将它们复制粘贴到控制台中，或将它们添加到可用模块中，或者*点源*它们（稍后我们也会讨论）。
- en: With that out of the way, let’s start writing functions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 既然这些问题已经解决，让我们开始编写函数吧。
- en: Defining a Function
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义一个函数
- en: Before you can use a function, you need to define it. To define a function,
    you use the `function` keyword, followed by a descriptive, user-defined name,
    followed by a set of curly brackets. Inside the curly brackets is a scriptblock
    that you want PowerShell to execute. [Listing 6-2](ch06.xhtml#ch6list2) defines
    a basic function in the console and executes it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用函数之前，你需要先定义它。定义函数时，使用`function`关键字，后跟一个描述性的用户定义名称，再后跟一对大括号。在大括号内是你希望 PowerShell
    执行的脚本块。[清单 6-2](ch06.xhtml#ch6list2)定义了一个基本的函数，并在控制台中执行它。
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 6-2: Writing a message to the console with a simple function*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 6-2：通过一个简单的函数向控制台输出消息*'
- en: The function you’ve defined, `Install-Software`, uses `Write-Host` to display
    a message in the console. Once it’s defined, you can use this function’s name
    to execute the code inside its scriptblock.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你定义的函数`Install-Software`使用`Write-Host`在控制台显示一条消息。一旦定义，你可以使用这个函数的名称来执行其脚本块中的代码。
- en: A function’s name is important. You can name your functions whatever you want,
    but the name should always describe what the function does. Function-naming convention
    in PowerShell follows the Verb-Noun syntax, and it’s considered best practice
    to always use this syntax unless absolutely necessary. You can use the `Get-Verb`
    command to see a list of recommended verbs. The noun is typically the singular
    name of whatever entity you’re working with—in this case, software.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的名称很重要。你可以给你的函数起任何名字，但这个名字应当描述函数的功能。PowerShell中的函数命名遵循动词-名词的语法，最佳实践是除非必要，否则始终使用这种语法。你可以使用`Get-Verb`命令查看推荐的动词列表。名词通常是你所处理的实体的单数形式——在这个例子中是软件。
- en: If you want to change the behavior of a function, you can redefine it, as in
    [Listing 6-3](ch06.xhtml#ch6list3).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想改变函数的行为，你可以重新定义它，正如在[示例 6-3](ch06.xhtml#ch6list3)中所示。
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 6-3: Redefining the Install-Software function to change its behavior*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 6-3：重新定义Install-Software函数以改变其行为*'
- en: Now that you’ve redefined `Install-Software`, it will display a slightly different
    message.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你重新定义了`Install-Software`，它会显示一个稍微不同的消息。
- en: Functions can be defined in a script or typed directly into the console. In
    [Listing 6-2](ch06.xhtml#ch6list2), you had a small function, so defining it in
    the console wasn’t a problem. Most of the time, you’ll have bigger functions,
    and it’ll be easier to define those functions in a script or a module, and then
    call that script or module in order to load the function into memory. As you might
    imagine from [Listing 6-3](ch06.xhtml#ch6list3), retyping a hundred-line function
    every time you want to tweak its functionality could get a little frustrating.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可以在脚本中定义，或者直接输入到控制台中。在[示例 6-2](ch06.xhtml#ch6list2)中，你定义了一个小函数，所以在控制台中定义它并没有问题。大多数情况下，你会有更大的函数，最好将这些函数定义在脚本或模块中，然后调用这个脚本或模块以将函数加载到内存中。正如你从[示例
    6-3](ch06.xhtml#ch6list3)中可能想象到的，每次都要重新输入一个百行函数以调整其功能，可能会让人感到有些沮丧。
- en: For the rest of this chapter, you’ll expand our `Install-Software` function
    to accept parameters and accept pipeline input. I suggest you open your favorite
    editor and store the function in a *.ps1* file as you’re working through the chapter.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的其余部分，你将扩展我们的`Install-Software`函数，使其接受参数并接受管道输入。我建议你在使用你最喜欢的编辑器时，将函数存储为*.ps1*文件，一边阅读本章内容一边操作。
- en: Adding Parameters to Functions
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向函数添加参数
- en: PowerShell functions can have any number of parameters. When you create your
    own functions, you’ll have the option to include parameters and decide how those
    parameters work. The parameters can be mandatory or optional, and they can either
    accept anything or be forced to accept one of a limited list of possible arguments.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell函数可以有任意数量的参数。当你创建自己的函数时，你将有机会添加参数，并决定这些参数如何工作。参数可以是必需的，也可以是可选的，它们可以接受任何值，或者被限制只能接受一个有限列表中的某些参数。
- en: For example, the fictional software you’re installing via the `Install-Software`
    function might have many versions, but currently, the `Install-Software` function
    offers a user no way to specify which version they want to install. If you were
    the only one using the function, you could redefine the function each time you
    wanted a specific version—but that would be a waste of time and would be prone
    to potential errors, not to mention that you want others to be able to use your
    code.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你通过`Install-Software`函数安装的软件可能有多个版本，但当前，`Install-Software`函数并没有提供让用户指定想要安装的版本的方式。如果只有你一个人在使用这个函数，你可以每次想要特定版本时重新定义这个函数——但那样会浪费时间，而且容易出错，更不用说你希望其他人也能使用你的代码了。
- en: Introducing parameters into your function allows it to have variability. Just
    as variables allowed you to write scripts that could handle many versions of the
    same situation, parameters allow you to write a single function that does one
    thing many ways. In this case, you want it to install multiple versions of the
    same piece of software, and do so on many computers.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 向函数引入参数使其具有变动性。就像变量让你能够编写处理同一情况多种版本的脚本一样，参数允许你编写一个函数，以多种方式完成同一任务。在本例中，你希望它能够安装同一软件的多个版本，并且在多台计算机上执行此操作。
- en: Let’s first add a parameter to the function that enables you or a user to specify
    the version to install.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先为函数添加一个参数，使你或用户能够指定要安装的版本。
- en: Creating a Simple Parameter
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建一个简单的参数
- en: Creating a parameter on a function requires a `param` block, which will hold
    all the parameters for the function. You can define a `param` block with the `param`
    keyword followed by parentheses, as in [Listing 6-4](ch06.xhtml#ch6list4).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数上创建一个参数需要一个`param`块，这个块将包含所有函数的参数。你可以通过`param`关键字后跟圆括号来定义一个`param`块，如在[示例
    6-4](ch06.xhtml#ch6list4)中所示。
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 6-4: Defining a param block*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 6-4：定义一个param块*'
- en: At this point, your function’s actual functionality hasn’t changed. You’ve just
    installed the plumbing, preparing the function for a parameter. You’ll use a `Write-Host`
    command to simulate the software installation so you can focus on writing the
    function.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，你的函数的实际功能并没有改变。你只是在安装管道，为函数准备了一个参数。你将使用`Write-Host`命令来模拟软件安装，以便专注于编写函数。
- en: '**NOTE**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*In the demos this for book, you’ll build only* advanced *functions. There
    are also* basic *functions, but nowadays, they’re typically used in only small,
    niche situations. The differences are too nuanced to go into detail, but if you
    see a [CmdletBinding()] reference under the function name, or a parameter defined
    as [Parameter()], you know you’re working with an advanced function.*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*在这本书的演示中，你将只构建*高级*函数。也有*基础*函数，但如今它们通常仅在一些小的、特定的场景中使用。两者的区别非常微妙，不便于详细讨论，但如果你在函数名下看到[CmdletBinding()]引用，或者看到一个参数被定义为[Parameter()]，你就知道你在使用的是高级函数。*'
- en: Once you’ve added the `param` block, you can create the parameter by putting
    it within the `param` block’s parentheses, as in [Listing 6-5](ch06.xhtml#ch6list5).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你添加了`param`块，就可以通过将参数放入`param`块的圆括号内来创建参数，正如在[示例 6-5](ch06.xhtml#ch6list5)中所示。
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 6-5: Creating a parameter*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 6-5：创建一个参数*'
- en: Inside the `param` block, you first define the `Parameter` block ❶. An empty
    `Parameter` block like the one here does nothing but is required (I’ll explain
    how to use it in the next section).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在`param`块内，你首先定义了`Parameter`块❶。像这里这样的空`Parameter`块什么都不做，但它是必需的（我将在下一节中解释如何使用它）。
- en: Let’s focus instead on the `[string]` type ❷ in front of the parameter name.
    By putting the parameter’s type between square brackets before the parameter variable
    name, you can cast the parameter so PowerShell will always try to convert any
    value that’s passed to this parameter into a string—if it isn’t one already. Here,
    anything passed in as `$Version` will always be treated as a string. Casting your
    parameter to a type isn’t mandatory, but I highly encourage it, because explicitly
    defining the type will significantly reduce errors down the road.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重点关注参数名称前的`[string]`类型❷。通过将参数类型放在方括号中，放置在参数变量名称之前，你可以将该参数转换为指定类型，这样PowerShell将始终尝试将传递给此参数的任何值转换为字符串——如果它还不是字符串的话。在这里，传递给`$Version`的任何内容都将始终被当作字符串处理。将参数转换为类型不是强制性的，但我强烈推荐这样做，因为明确地定义类型会显著减少未来的错误。
- en: You also add `$Version` into your print statement ❸, which means that when you
    run the `Install-Software` command with the `Version` parameter and pass it a
    version number, you should get a statement saying so, as in [Listing 6-6](ch06.xhtml#ch6list6).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将`$Version`添加到打印语句❸中，这意味着当你运行带有`Version`参数的`Install-Software`命令并传递一个版本号时，你应该看到一条说明信息，如在[示例
    6-6](ch06.xhtml#ch6list6)中所示。
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 6-6: Passing a parameter to your function*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 6-6：将参数传递给你的函数*'
- en: You’ve now defined a working parameter to your function. Let’s see what you
    can do with that parameter.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经为函数定义了一个有效的参数。让我们看看你可以如何使用这个参数。
- en: The Mandatory Parameter Attribute
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 强制参数属性
- en: You can use the `Parameter` block to control various *parameter attributes*,
    which will allow you to change the behavior of the parameter. For example, if
    you want to make sure anyone calling the function has to pass in a given parameter,
    you could define that parameter as `Mandatory`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`Parameter`块来控制各种*参数属性*，这将允许你改变参数的行为。例如，如果你希望确保任何调用该函数的人都必须传入特定的参数，你可以将该参数定义为`Mandatory`。
- en: By default, parameters are optional. Let’s force the user to pass in a version
    by using the `Mandatory` keyword inside the `Parameter` block, as in [Listing
    6-7](ch06.xhtml#ch6list7).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，参数是可选的。让我们通过在`Parameter`块中使用`Mandatory`关键字来强制用户传入版本，如[Listing 6-7](ch06.xhtml#ch6list7)所示。
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 6-7: Using a mandatory parameter*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 6-7：使用强制参数*'
- en: 'If you run this, you should get the following prompt:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行这个，你应该会看到以下提示：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once you’ve set the `Mandatory` attribute, executing the function without the
    parameter will halt execution until the user inputs a value. The function will
    wait until the user specifies a value for the `Version` parameter, and once they
    enter it, PowerShell will execute the function and move on. To avoid this prompt,
    simply pass the value as a parameter when you call the function with the -ParameterName
    syntax—for example, `Install-Software -Version 2`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置了`Mandatory`属性，在没有传入参数的情况下执行该函数将停止执行，直到用户输入一个值。该函数将等待直到用户为`Version`参数指定一个值，一旦他们输入了值，PowerShell将执行该函数并继续执行。为了避免这个提示，只需在调用该函数时使用-ParameterName语法传递该值——例如，`Install-Software
    -Version 2`。
- en: Default Parameter Values
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 默认参数值
- en: You can also assign a parameter a default value when the parameter is defined.
    This is useful when you expect a certain value for a parameter most of the time.
    For example, if you want to install version 2 of this software 90 percent of the
    time, and you’d rather not have to set the value every time you run this function,
    you could assign a default value of `2` to the `$Version` parameter, as in [Listing
    6-8](ch06.xhtml#ch6list8).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在定义参数时为其指定默认值。当你预计某个参数的大多数时候都会有特定值时，这非常有用。例如，如果你希望在90%的情况下安装该软件的版本2，并且不想每次运行该函数时都设置该值，你可以为`$Version`参数指定默认值`2`，如[Listing
    6-8](ch06.xhtml#ch6list8)所示。
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 6-8: Using a default parameter value*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 6-8：使用默认参数值*'
- en: Having a default parameter doesn’t prevent you from passing one in. Your passed-in
    value will override the default value.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有默认参数并不阻止你传入值。你传入的值将覆盖默认值。
- en: Adding Parameter Validation Attributes
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加参数验证属性
- en: In addition to making parameters mandatory and giving them default values, you
    can restrict them to certain values by using *parameter validation attributes*.
    When possible, limiting the information that users (or even you!) can pass to
    your functions or scripts will eliminate unnecessary code inside your function.
    For example, say you pass the value 3 to your `Install-Software` function, knowing
    that version 3 is an existing version. Your function assumes that every user knows
    which versions exist, so it doesn’t account for what happens when you try to specify
    version 4\. In that case, the function will fail to find the version’s folder
    because it doesn’t exist.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 除了让参数变为强制项并赋予默认值外，你还可以通过使用*参数验证属性*来限制它们的可选值。当可能时，限制用户（甚至你自己！）传递给函数或脚本的信息，将消除函数内部不必要的代码。例如，假设你向`Install-Software`函数传递了值3，知道版本3是一个存在的版本。你的函数假设每个用户都知道哪些版本是存在的，因此它没有考虑当你尝试指定版本4时会发生什么。在这种情况下，函数将无法找到该版本的文件夹，因为它不存在。
- en: In [Listing 6-9](ch06.xhtml#ch6list9), you use the `$Version` string in a file
    path. If someone passes a value that doesn’t complete an existing folder name
    (for example, SoftwareV3 or SoftwareV4), the code will fail.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在[Listing 6-9](ch06.xhtml#ch6list9)中，你在文件路径中使用了`$Version`字符串。如果有人传入的值不能完整匹配现有的文件夹名称（例如，SoftwareV3或SoftwareV4），代码将会失败。
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 6-9: Assuming parameter values*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 6-9：假设参数值*'
- en: 'This gives the following error:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致以下错误：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You could write error-handling code to account for this problem, or you could
    nip the problem in the bud by requiring the user pass only an existing version
    of the software. To limit the user’s input, you’ll add parameter validation.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以编写错误处理代码来解决这个问题，或者通过要求用户仅传入已存在的软件版本来从根本上解决问题。为了限制用户的输入，你将添加参数验证。
- en: Various kinds of parameter validation exist, but with respect to your `Install-Software`
    function, the `ValidateSet` attribute works best. The `ValidateSet` attribute
    enables you to specify a list of values allowed for the parameter. If you’re accounting
    for only the string 1 or 2, you’d ensure that the user can specify only these
    values; otherwise, the function will fail immediately and notify the user why.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 存在多种类型的参数验证，但就你的 `Install-Software` 函数而言，`ValidateSet` 属性是最合适的。`ValidateSet`
    属性允许你指定允许用于该参数的值列表。如果你只考虑字符串 1 或 2，你会确保用户只能指定这些值；否则，函数将立即失败并通知用户原因。
- en: Let’s add parameter validation attributes inside the `param` block, right under
    the original `Parameter` block, as in [Listing 6-10](ch06.xhtml#ch6list10).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `param` 块内添加参数验证属性，紧接在原始 `Parameter` 块下面，如[列表 6-10](ch06.xhtml#ch6list10)所示。
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 6-10: Using the ValidateSet parameter validation attribute*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 6-10：使用 ValidateSet 参数验证属性*'
- en: You add the set of items 1 and 2 inside the `ValidateSet` attribute’s trailing
    parentheses, which tells PowerShell that the only values valid for `Version` are
    1 or 2\. If a user tries to pass something besides what’s in the set, they will
    receive an error message (see [Listing 6-11](ch06.xhtml#ch6list11)) notifying
    them that they have only a specific number of options available.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你将项 1 和 2 的集合添加到 `ValidateSet` 属性的尾部括号内，这告诉 PowerShell，`Version` 的有效值只能是 1 或
    2。如果用户尝试传递集合中没有的值，他们将收到错误信息（请参阅[列表 6-11](ch06.xhtml#ch6list11)），通知他们只有特定数量的选项可用。
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 6-11: Passing a parameter value that’s not in the ValidateSet block*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 6-11：传递一个不在 ValidateSet 块中的参数值*'
- en: The `ValidateSet` attribute is a common validation attribute, but others are
    available. For a complete breakdown of all the ways parameter values can be restricted,
    check out the `Functions_Advanced_Parameters` help topic by running `Get-Help
    about_Functions_Advanced_Parameters`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`ValidateSet` 属性是一个常见的验证属性，但还有其他属性可用。要了解有关参数值如何受限的完整说明，请运行 `Get-Help about_Functions_Advanced_Parameters`，查看
    `Functions_Advanced_Parameters` 帮助主题。'
- en: Accepting Pipeline Input
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接受管道输入
- en: So far, you’ve created a function with a parameter that can be passed only by
    using the typical -ParameterName <Value> syntax. But in [Chapter 3](ch03.xhtml#ch3),
    you learned that PowerShell has a pipeline that allows you to seamlessly pass
    objects from one command to another. Recall that some functions didn’t have pipeline
    capability—when working with your own functions, that’s something you control.
    Let’s add pipeline capabilities to our `Install-Software` function.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经创建了一个函数，该函数的参数只能通过典型的 `-ParameterName <Value>` 语法传递。但是在[第 3 章](ch03.xhtml#ch3)，你学到了
    PowerShell 有一个管道，允许你无缝地将对象从一个命令传递到另一个命令。回想一下，一些函数没有管道功能——在使用自己的函数时，这是你可以控制的。让我们给
    `Install-Software` 函数添加管道功能。
- en: Adding Another Parameter
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加另一个参数
- en: 'First, you’ll add another parameter to your code that specifies the computer
    on which you want to install the software. You’ll also add that parameter to your
    `Write-Host` command to simulate the installation. [Listing 6-12](ch06.xhtml#ch6list12)
    adds the new parameter:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要向代码中添加另一个参数，用于指定你想要安装软件的计算机。你还需要将该参数添加到 `Write-Host` 命令中，以模拟安装。[列表 6-12](ch06.xhtml#ch6list12)
    添加了新参数：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 6-12: Adding the ComputerName parameter*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 6-12：添加 ComputerName 参数*'
- en: Just as with `$Version`, you’ve added the `ComputerName` parameter to the `param`
    block.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 `$Version` 一样，你已经将 `ComputerName` 参数添加到 `param` 块中。
- en: 'Once you’ve added the `ComputerName` parameter to the function, you could iterate
    over a list of computer names and pass the values for the computer name and the
    version to the `Install-Software` function, like so:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将 `ComputerName` 参数添加到函数中，你就可以遍历计算机名称列表，并将计算机名称和版本的值传递给 `Install-Software`
    函数，如下所示：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: But as you’ve seen a few times already, you should forgo `foreach` loops like
    this and use the pipeline instead.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 但正如你已经看到的几次，你应该避免使用像这样的 `foreach` 循环，而是应该使用管道。
- en: Making the Function Pipeline Compatible
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使函数支持管道
- en: 'Unfortunately, if you try to use the pipeline straightaway, you’ll get errors.
    Before you add pipeline support to the function, you should decide which type
    of pipeline input you want the function to accept. As you learned in [Chapter
    3](ch03.xhtml#ch3), a PowerShell function uses two kinds of pipeline input: `ByValue`
    (entire object) and `ByPropertyName` (a single object property). Here, because
    our `$computers` list contains only strings, you’ll pass those strings via `ByValue`.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，如果你直接尝试使用管道，将会出现错误。在向函数添加管道支持之前，你应该决定希望函数接受哪种类型的管道输入。正如你在[第 3 章](ch03.xhtml#ch3)中学到的，PowerShell
    函数使用两种类型的管道输入：`ByValue`（整个对象）和`ByPropertyName`（单个对象属性）。在这里，由于我们的`$computers`列表只包含字符串，因此你将通过`ByValue`传递这些字符串。
- en: 'To add pipeline support, you add a parameter attribute to the parameter you
    want by using one of two keywords: `ValueFromPipeline` or `ValueFromPipelineByPropertyName`,
    as in [Listing 6-13](ch06.xhtml#ch6list13).'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加管道支持，你需要为你想要支持管道输入的参数添加一个参数属性，使用两个关键字之一：`ValueFromPipeline` 或 `ValueFromPipelineByPropertyName`，如[示例
    6-13](ch06.xhtml#ch6list13)所示。
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*Listing 6-13: Adding pipeline support*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 6-13：添加管道支持*'
- en: 'Run the script again, and you should get something like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行脚本，你应该得到如下结果：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Notice that `Install-Software` executes for only the last string in the array.
    You’ll see how to fix this in the next section.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`Install-Software`仅对数组中的最后一个字符串执行。你将在下一节中看到如何解决这个问题。
- en: Adding a process Block
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加一个 process 块
- en: To tell PowerShell to execute this function for every object coming in, you
    must include a `process` block. Inside the `process` block, you put the code you
    want to execute each time the function receives pipeline input. Add a `process`
    block to your script, as shown in [Listing 6-14](ch06.xhtml#ch6list14).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要告诉 PowerShell 对每个传入的对象执行此函数，必须包含一个`process`块。在`process`块内，放入你希望每次函数接收管道输入时执行的代码。按照[示例
    6-14](ch06.xhtml#ch6list14)中的方式，向你的脚本添加一个`process`块。
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '*Listing 6-14: Adding a process block*'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 6-14：添加一个 process 块*'
- en: Notice that the `process` keyword is followed by a set of curly brackets, which
    contain the code your function executes.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`process`关键字后跟一对花括号，花括号内包含你的函数要执行的代码。
- en: 'With the `process` block, you should see output for all three servers in `$computers`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`process`块后，你应该能看到`$computers`中所有三台服务器的输出：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `process` block should contain the main code you want to execute. You can
    also use `begin` and `end` blocks for code that will execute at the beginning
    and end of the function call. For more information about building advanced functions
    including the `begin`, `process`, and `end` blocks, check out the `about``_Functions_Advanced`
    help topic by running `Get-Help about_Functions_Advanced`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`process`块应该包含你希望执行的主要代码。你还可以使用`begin`和`end`块来执行在函数调用开始和结束时运行的代码。有关构建高级函数的信息，包括`begin`、`process`和`end`块，请通过运行`Get-Help
    about_Functions_Advanced`查看`about_Functions_Advanced`帮助主题。'
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: Functions allow you to compartmentalize code into discrete building blocks.
    They not only help you break your work into smaller, more manageable chunks, but
    also force you to write readable and testable code. When you use descriptive names
    for your functions, your code becomes self-documenting, and anyone reading it
    can intuitively understand what it’s doing.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 函数允许你将代码模块化成独立的构建块。它们不仅帮助你将工作拆分成更小、更易于管理的部分，还迫使你编写可读和可测试的代码。当你为函数使用描述性名称时，代码变得自文档化，任何阅读它的人都能直观地理解它在做什么。
- en: 'In this chapter, you learned the basics of functions: how to define them, how
    to specify parameters and their attributes, and how to accept pipeline input.
    In the next chapter, you’ll see how to bundle many functions together by using
    modules.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了函数的基础知识：如何定义它们，如何指定参数及其属性，以及如何接收管道输入。在下一章中，你将看到如何通过使用模块将多个函数打包在一起。
