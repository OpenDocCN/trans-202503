- en: '10'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '10'
- en: MAGIC MUSIC BOX
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 魔法音乐盒
- en: 'IN THIS CHAPTER, YOU’LL CREATE A PERSONALIZED MP3 PLAYER THAT WE’LL CALL THE
    MAGIC MUSIC BOX. YOU’LL USE YOUR RASPBERRY PI’S PYGAME TO BUILD AN MP3 PLAYER
    THAT CAN PLAY PRELOADED MUSIC TO A SPEAKER AND THEN ADD FOUR INTERACTIVE BUTTONS:
    ONE TO SKIP SONGS, TWO TO ADJUST THE VOLUME, AND A POWER SWITCH TO TURN OFF THE
    PLAYER.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你将创建一个个性化的MP3播放器，我们称之为魔法音乐盒。你将使用树莓派的PyGame库来构建一个可以播放预加载音乐的MP3播放器，并通过扬声器播放，然后添加四个互动按钮：一个用来跳过歌曲，两个用来调节音量，还有一个电源开关来关闭播放器。
- en: You’ll combine all the hardware into a fancy box to create your MP3 music system
    ([Figure 10-1](ch10.xhtml#ch10fig01)). The program code uses PyGame, the Python
    library for creating games that you used in [Chapter 5](ch05.xhtml#ch05). PyGame
    allows you to add and control sounds, images, and videos by using Python code.
    In this project, you’ll use PyGame to control the MP3 files, start and stop them,
    and adjust the music’s volume.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你将把所有硬件组合成一个精美的盒子，打造你的MP3音乐系统（[图10-1](ch10.xhtml#ch10fig01)）。程序代码使用了PyGame，这是你在[第5章](ch05.xhtml#ch05)中使用的用于创建游戏的Python库。PyGame允许你通过Python代码来添加和控制声音、图像和视频。在这个项目中，你将使用PyGame来控制MP3文件，启动和停止它们，并调整音乐的音量。
- en: '![Image](../images/10fig01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/10fig01.jpg)'
- en: '**FIGURE 10-1** The finished MP3 magic music box and its speaker'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**图10-1** 完成的MP3魔法音乐盒及其扬声器'
- en: WHAT YOU’LL NEED
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 所需物品
- en: 'Here are a few items you’ll need to complete the project:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你完成项目所需的一些物品：
- en: Raspberry Pi
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派
- en: 4 push buttons
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4个按钮
- en: 8 sets of female-to-male jumper wires
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 8组母对公跳线
- en: Bluetooth speaker or audio jack speaker
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝牙扬声器或音频插孔扬声器
- en: Solder and a soldering iron or conductive paint
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 焊接工具和电烙铁或导电漆
- en: Small box (lunchbox, wooden, cardboard, or other)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小盒子（午餐盒、木盒、纸板盒或其他）
- en: Drill or screwdriver (to make holes)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电钻或螺丝刀（用来打孔）
- en: USB battery (optional)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB电池（可选）
- en: CHOOSING A SPEAKER TYPE
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择扬声器类型
- en: Depending on the Raspberry Pi model you’re using, you’ll first need to decide
    which method you’ll use to output the audio. The low-cost option is to use a small
    speaker attached to the headphone jack and hide that speaker inside the music
    box. You might search an online retailer or your local shops for a portable speaker
    with a 3.5 mm audio jack; all 3.5 mm models will work.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你使用的树莓派型号，你首先需要决定使用哪种方法来输出音频。低成本的选择是使用一个小型扬声器，连接到耳机插孔，并将扬声器隐藏在音乐盒内部。你可以在网上零售商或者本地商店寻找带有3.5mm音频插孔的便携式扬声器；所有3.5mm型号的扬声器都可以使用。
- en: The downside to using small speakers is that they produce low-quality sound,
    and only the Raspberry Pi 2, 3, 4, and A+ models have audio ports to support them.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用小型扬声器的缺点是它们会产生低质量的声音，只有树莓派2、3、4和A+型号才有音频端口来支持它们。
- en: The other, slightly pricier, option is to use a Bluetooth speaker. This speaker
    usually has a high-quality sound and is portable, so you can place the speaker
    wherever you want it. The Raspberry Pi 3, 4, and Zero W models have onboard Bluetooth
    capabilities. Another advantage of the Pi Zero W is that it’s small, which makes
    it the easiest model to embed in the music box. If you’re using an older Raspberry
    Pi model that has spare USB ports, you can add Bluetooth functionality by purchasing
    a standard USB Bluetooth dongle (which supports Bluetooth 4 and audio) and attaching
    it to one of the ports.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种稍微贵一点的选择是使用蓝牙扬声器。这个扬声器通常具有高质量的声音，并且便携，所以你可以将扬声器放置在任何你想要的位置。树莓派3、4和Zero W型号具有内建的蓝牙功能。Pi
    Zero W的另一个优势是它非常小巧，使得它成为最容易嵌入音乐盒的型号。如果你使用的是较老的树莓派型号，且有空余的USB端口，你可以通过购买一个支持蓝牙4和音频的标准USB蓝牙适配器，并将其连接到一个端口来增加蓝牙功能。
- en: The following table shows the speaker options suitable for the various Pi models.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 下表展示了适合各种Pi型号的扬声器选项。
- en: '| **MODEL** | **HEADPHONE JACK** | **BLUETOOTH** | **PROS** | **CONS** |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| **型号** | **耳机插孔** | **蓝牙** | **优点** | **缺点** |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| A+ | Yes | No | Small board; can support Bluetooth dongle via USB port |
    Slower model |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| A+ | 是 | 否 | 小型板；可通过USB端口支持蓝牙适配器 | 性能较慢 |'
- en: '| Pi 2 | Yes | No | Several USB ports | Large board |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| Pi 2 | 是 | 否 | 多个USB端口 | 板子较大 |'
- en: '| Pi 3B+ | Yes | Yes | Good specs; cheaper than the Pi 4 | Large board |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| Pi 3B+ | 是 | 是 | 良好的规格；比Pi 4便宜 | 板子较大 |'
- en: '| Pi 4 | Yes | Yes | Fastest processor | More expensive than other models |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| Pi 4 | 是 | 是 | 最快的处理器 | 比其他型号贵 |'
- en: '| Pi Zero W | No | Yes | Smallest board; onboard Wi-Fi; can upload MP3 files
    remotely; inexpensive | Slower model |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| Pi Zero W | 否 | 是 | 最小的板；内建Wi-Fi；可以远程上传MP3文件；价格便宜 | 性能较慢 |'
- en: BUILDING THE MAGIC MUSIC BOX
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建魔法音乐盒
- en: Once you’ve selected a speaker for your board, you can build your music box.
    You can use anything for the music box enclosure—for example, a wooden pencil
    case, a plastic lunchbox, or an old cereal box. Be aware that you’ll have to make
    holes in the material; so if you don’t have tools to drill through wood, for example,
    perhaps choose a cardboard enclosure.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你为电路板选择了扬声器，你就可以开始制作音乐盒了。你可以使用任何材料作为音乐盒的外壳——例如木质铅笔盒、塑料午餐盒或旧的麦片盒。要注意，你需要在材料上打孔；因此，如果你没有工具钻孔（例如木材），可以选择纸板外壳。
- en: Before beginning the project, you should spend time arranging the buttons, speaker,
    and Raspberry Pi inside the box to figure out a suitable setup. You can customize
    the setup, but use common sense. For example, on most music players, the volume-control
    buttons are located next to each other.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始项目之前，你应该花时间安排按钮、扬声器和树莓派在盒子内的位置，以找出合适的设置。你可以自定义设置，但要用常识。例如，在大多数音乐播放器中，音量控制按钮是并排放置的。
- en: Wiring the Buttons
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 按钮接线
- en: 'Let’s make the buttons! Here are the steps:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 来制作按钮吧！以下是步骤：
- en: '**Attach wires:** Select one of your push buttons and two male-to-female jumper
    wires, and locate the male ends. Using a little solder or conductive paint, attach
    a male end to each leg of the button ([Figure 10-2](ch10.xhtml#ch10fig02)). I
    recommend you use a black wire for one of the legs to indicate that it’s the ground
    (GND) wire. Follow this process for the other three buttons.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**连接电线：** 选择一个按键和两根公对母的跳线，并找到公端。使用一些焊锡或导电漆，将公端连接到按钮的每个引脚上（[图10-2](ch10.xhtml#ch10fig02)）。我建议你使用一根黑色电线连接其中一个引脚，以表示它是地线（GND）。按照这个方法连接其余三个按钮。'
- en: These buttons will form the main controls of the MP3 player that you’ll connect
    to the Raspberry Pi.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些按钮将构成你将连接到树莓派的MP3播放器的主要控制。
- en: '![Image](../images/10fig02.jpg)'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Image](../images/10fig02.jpg)'
- en: '**FIGURE 10-2** Attaching wires to each button'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图10-2** 连接每个按钮的电线'
- en: '**Wire the buttons:** For each button, attach the black wire (the ground wire)
    to any GND pin on your Raspberry Pi, and attach the other wire to the GPIO pin
    indicated in the following table.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**接线按钮：** 对于每个按钮，将黑色电线（地线）连接到树莓派的任一GND引脚，然后将另一根电线连接到下表所示的GPIO引脚。'
- en: '| **PIN** | **BUTTON** |'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **引脚** | **按钮** |'
- en: '| --- | --- |'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| GPIO 7 | Next Song (`play_skip`) |'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| GPIO 7 | 下一首歌（`play_skip`） |'
- en: '| GPIO 25 | Volume Up |'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| GPIO 25 | 音量增大 |'
- en: '| GPIO 8 | Volume Down |'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| GPIO 8 | 音量减小 |'
- en: '| GPIO 17 | Power Off |'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| GPIO 17 | 关机 |'
- en: You can use any of the GND pins located on the physical pins 6, 9, 14, 20, 25,
    30, 34, and 39 ([Figure 10-3](ch10.xhtml#ch10fig03)). Some might be easier for
    the wires to reach or make neater layouts inside the box.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以使用位于物理引脚6、9、14、20、25、30、34和39的任意一个GND引脚（[图10-3](ch10.xhtml#ch10fig03)）。有些引脚可能更容易让电线接触到，或者在盒子内部布线时能保持更整洁的布局。
- en: '![Image](../images/10fig03.jpg)'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Image](../images/10fig03.jpg)'
- en: '**FIGURE 10-3** Wiring each button to the Raspberry Pi'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图10-3** 将每个按钮接线到树莓派'
- en: '**Make holes:** If you’re using a wooden or plastic box, you’ll need to drill
    holes to house the buttons. The size of the hole depends on the size of the button
    ([Figure 10-4](ch10.xhtml#ch10fig04)). Start with a small hole and try fitting
    the button before resizing the hole. If you’re using a wooden box, you can ask
    an adult to drill the holes for you. If you’re using a cardboard box, use a sharp
    pencil or a pen to make holes. Decide where you want to locate the buttons, and
    then drill or poke four holes big enough to accommodate each button.![Image](../images/10fig04.jpg)'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**打孔：** 如果你使用的是木质或塑料盒子，你需要钻孔以安装按钮。孔的大小取决于按钮的尺寸（[图10-4](ch10.xhtml#ch10fig04)）。首先打一个小孔，试着安装按钮，然后再调整孔的大小。如果你使用的是木盒，可以请成人帮忙钻孔。如果你使用的是纸板盒，可以用锋利的铅笔或钢笔戳孔。决定按钮的放置位置后，钻或戳四个足够大的孔，以容纳每个按钮。![Image](../images/10fig04.jpg)'
- en: '**FIGURE 10-4** Drilling the holes in the box'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图10-4** 在盒子上打孔'
- en: '**Attach the buttons:** The way you do this depends on the type of buttons
    and box that you’re using. Many buttons have a small circular lip around the top
    that rests on the outside of the hole in your box and two flexible clips that
    secure the main housing of the button in place. These types of buttons are often
    referred to as *arcade buttons*. For other types of buttons, you can glue or use
    double-sided tape to stick the buttons in place, *but do so only after you know
    that the program and hardware work*.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装按钮：** 你这样做的方式取决于你使用的按钮和盒子的类型。许多按钮的顶部有一个小圆形边缘，放置在盒子孔的外侧，两个灵活的夹子固定按钮的主体。这种类型的按钮通常被称为*街机按钮*。对于其他类型的按钮，你可以使用胶水或双面胶带将按钮固定在适当位置，*但只有在你确认程序和硬件工作正常后再进行此操作*。'
- en: Before securing your Raspberry Pi to the inside of the box, play around with
    the layout of the Pi so that the wires and the buttons fit. [Figure 10-5](ch10.xhtml#ch10fig05)
    shows an example layout, and you may be able to hide the battery inside the box
    too. Notice that you still have access to the Raspberry Pi, as it’s best to write
    the program and test it before securing it and the other parts in place. That
    way, you can still access the buttons and wires if you need to make adjustments.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在将树莓派固定到盒子内部之前，先玩一下树莓派的布局，以确保电线和按钮能够适合。 [图 10-5](ch10.xhtml#ch10fig05)展示了一个布局示例，你也可以把电池隐藏在盒子里。注意，你仍然可以访问树莓派，因为最好在固定树莓派和其他部件之前编写和测试程序。这样，如果需要调整，你仍然可以访问按钮和电线。
- en: '**Decorate the box:** Decorate and personalize the outside of the box. You
    can add color, stickers, instructions for using the music player, or anything
    else you like.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**装饰盒子：** 装饰并个性化盒子的外观。你可以添加颜色、贴纸、音乐播放器的使用说明或任何你喜欢的东西。'
- en: '![Image](../images/10fig05.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/10fig05.jpg)'
- en: '**FIGURE 10-5** Preparing the internal hardware layout'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 10-5** 准备内部硬件布局'
- en: Connecting the Speaker
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 连接扬声器
- en: To hear sound from the MP3 files, you need to set up the audio output. There
    are different ways of doing this, depending on whether you’re using a headphone
    jack or Bluetooth speaker. Start your Raspberry Pi and attach the monitor, keyboard,
    and mouse.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要听MP3文件的声音，你需要设置音频输出。根据你使用的是耳机插孔还是蓝牙扬声器，设置方法不同。启动树莓派并连接显示器、键盘和鼠标。
- en: Using a Speaker via the Headphone Jack
  id: totrans-56
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用耳机插孔连接扬声器
- en: If you’re using the audio jack, connect your speaker via a standard 3.5 mm jack
    cable to the black headphone jack on the Raspberry Pi, which is located next to
    the HDMI port. Plug in your Raspberry Pi and boot it up; load the Pi desktop.
    Locate and click the audio icon ![](../images/Speaker_1.jpg) at the top of the
    desktop. Select **Analog** from the audio output drop-down menu. Now all audio
    will be played through your speaker.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是音频插孔，通过标准的3.5毫米插孔电缆将扬声器连接到树莓派的黑色耳机插孔，该插孔位于HDMI端口旁边。插入树莓派并启动它；加载Pi桌面。找到并点击桌面顶部的音频图标
    ![](../images/Speaker_1.jpg)。从音频输出下拉菜单中选择**模拟**。现在，所有音频将通过你的扬声器播放。
- en: Using a Bluetooth Speaker
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用蓝牙扬声器
- en: If you’re using a Bluetooth speaker, turn on the Bluetooth software on your
    Pi by clicking the Bluetooth icon at the top right of the screen. Then turn on
    your Bluetooth speaker. You’ll need to enable the settings on your speaker to
    make it discoverable. Click the Bluetooth icon again and select **Add a Device**
    from the drop-down menu. The Raspberry Pi will attempt to locate all Bluetooth-enabled
    devices, including your speaker.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用蓝牙扬声器，请通过点击屏幕右上角的蓝牙图标来开启树莓派上的蓝牙软件。然后打开你的蓝牙扬声器。你需要在扬声器上启用设置，使其可以被发现。再次点击蓝牙图标，从下拉菜单中选择**添加设备**。树莓派将尝试查找所有支持蓝牙的设备，包括你的扬声器。
- en: When your Pi finds the speaker, it will appear in the pop-up window. Select
    it from the list, and click the **Pair** button to establish a connection between
    your Raspberry Pi and the Bluetooth speaker.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的树莓派找到扬声器时，它将出现在弹出窗口中。从列表中选择它，然后点击**配对**按钮，以建立树莓派与蓝牙扬声器之间的连接。
- en: Once the connection is confirmed, click the audio icon ![](../images/Speaker_1.jpg)
    and select your Bluetooth speaker from the drop-down menu. The two devices will
    attempt to pair and establish a connection again. Once the speaker has been set
    up, your Raspberry Pi will always automatically locate and connect to this speaker.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦连接确认，点击音频图标 ![](../images/Speaker_1.jpg)，从下拉菜单中选择你的蓝牙扬声器。两个设备将再次尝试配对并建立连接。扬声器设置完成后，你的树莓派将始终自动找到并连接到该扬声器。
- en: Coding the Magic Music Box
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写魔法音乐盒代码
- en: Let’s write the code that will play the music and set up the button functions.
    You’ll use PyGame’s audio mixer tool to control playback of the MP3 files and
    the volume level. The button functions are controlled via the `gpiozero` library,
    which offers simple code to trigger events.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写代码来播放音乐并设置按钮功能。你将使用PyGame的音频混音工具来控制MP3文件的播放和音量。按钮功能通过`gpiozero`库来控制，该库提供了简单的代码来触发事件。
- en: Creating a New Folder
  id: totrans-64
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 创建新文件夹
- en: 'First, you’ll create a folder to store the program code and the MP3 music files
    that you want to listen to. In the terminal, enter the following command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要创建一个文件夹，用来存储程序代码和你想要播放的MP3音乐文件。在终端中，输入以下命令：
- en: '[PRE0]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then change to the *MP3* folder by entering this command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然后通过输入以下命令切换到*MP3*文件夹：
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Transfer and save all your MP3 music files to the *MP3* folder. Then open a
    new Python file, and save it to the *MP3* folder as *music_box.py*.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有MP3音乐文件传输并保存到*MP3*文件夹中。然后打开一个新的Python文件，并将其保存到*MP3*文件夹中，命名为*music_box.py*。
- en: Importing the Modules and Libraries
  id: totrans-70
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 导入模块和库
- en: Now you need to import all the modules and libraries you’ll use in the program.
    Enter the code in [Listing 10-1](ch10.xhtml#ch10ex01) to start.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你需要导入程序中将要使用的所有模块和库。输入[Listing 10-1](ch10.xhtml#ch10ex01)中的代码开始。
- en: '[PRE2]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**LISTING 10-1** Setting up the imports and global variables'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 10-1** 设置导入和全局变量'
- en: Import `glob`, `time`, and `pygame` ❶. You’re already familiar with the `time`
    module. You’ll use the `glob` module to search for the MP3 filenames, and you’ll
    use the `pygame` library to control the playback and volume of the MP3 files.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 导入`glob`、`time`和`pygame`❶。你已经熟悉了`time`模块。你将使用`glob`模块来搜索MP3文件名，并且将使用`pygame`库来控制MP3文件的播放和音量。
- en: Then import the `Button` class from the `gpiozero` library, which allows you
    to trigger events when each button is pressed. Next, import the `check_call()`
    function ❷, which you’ll use to call the `shutdown()` command to turn off the
    music player.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后从`gpiozero`库中导入`Button`类，它允许你在每个按钮按下时触发事件。接下来，导入`check_call()`函数❷，你将用它来调用`shutdown()`命令以关闭音乐播放器。
- en: PyGame files run in a separate window, and although you won’t use the window,
    you still need to initialize it with `pygame.init()` ❸ to be able to use PyGame.
    Then you need to define the size of that window. Because you’re not interacting
    with it, you can make it very small–let’s say, 100 × 100 pixels ❹.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: PyGame文件运行在一个独立的窗口中，尽管你不会使用该窗口，但你仍然需要通过`pygame.init()`❸来初始化它，以便使用PyGame。然后你需要定义该窗口的大小。因为你不会与它交互，所以可以将其设置为非常小——比如100
    × 100像素❹。
- en: 'Next, create four variables ❺: `the_song` holds the name of the MP3 file that’s
    currently being played, `level` holds the volume level, `songs_found` holds the
    filenames of the MP3 songs, and `number_of_songs` holds the total number of songs.
    These variables are *global* variables. Global variables are declared outside
    a function, which means that the Python program can pull the data stored in a
    global variable and use it elsewhere in the program.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建四个变量❺：`the_song`保存当前播放的MP3文件名，`level`保存音量级别，`songs_found`保存MP3歌曲的文件名，`number_of_songs`保存歌曲的总数。这些变量是*全局*变量。全局变量是在函数外部声明的，这意味着Python程序可以提取存储在全局变量中的数据，并在程序的其他地方使用。
- en: Assigning the Buttons to the GPIO Pins
  id: totrans-78
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 将按钮分配到GPIO引脚
- en: Next, add the code in [Listing 10-2](ch10.xhtml#ch10ex02), which sets up the
    `shutdown()` function and assigns each button to a GPIO pin.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加[Listing 10-2](ch10.xhtml#ch10ex02)中的代码，设置`shutdown()`函数，并将每个按钮分配到一个GPIO引脚。
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**LISTING 10-2** Defining buttons and pins'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 10-2** 定义按钮和引脚'
- en: Define the `shutdown()` ❶ function to use the `check_call()` function to call
    the Python program that will power off the Pi ❷. This function lets you switch
    off your music box without needing a screen!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 定义`shutdown()`❶函数，使用`check_call()`函数调用将关闭Pi的Python程序❷。这个函数让你在没有显示屏的情况下也能关闭音乐盒！
- en: Next, set up the buttons by creating a variable for each one, `play_skip`, `volume_up`,
    `volume_down`, and `shutdown_btn`. Then assign each variable to the GPIO pin number
    wired to that button ❸. If you used different pin numbers than those in this example,
    make sure you change the values in the parentheses.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，创建每个按钮的变量，分别是`play_skip`、`volume_up`、`volume_down`和`shutdown_btn`。然后将每个变量分配给连接到该按钮的GPIO引脚编号❸。如果你使用了与本示例中不同的引脚编号，确保更改括号中的值。
- en: Notice that after assigning `shutdown_btn` to its GPIO number, you specify the
    hold time, which is the number of seconds the button needs to be held down before
    the `shutdown()` function ❷ is triggered. (In this example, the hold time is 2
    seconds.) Adding a hold time makes it more difficult to accidentally shut off
    the MP3 player if you press the button by mistake.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在将 `shutdown_btn` 分配给其 GPIO 编号后，你指定了按住时间，即在触发 `shutdown()` 函数之前，按钮需要按住的秒数❷。（在此示例中，按住时间为
    2 秒。）添加按住时间可以减少误操作，当你不小心按下按钮时，MP3 播放器不会被意外关机。
- en: Next, create two more variables. The `the_song` variable ❹ contains the position
    of the song currently playing in the list of songs. The list starts with the song
    held at the first position, 0\. The `playing_songs` variable specifies whether
    a song is playing ❺. The program uses this variable to search for and play the
    MP3 files. Set it to `True`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建两个变量。`the_song` 变量❹ 包含当前播放歌曲在歌曲列表中的位置。列表从第一个位置的歌曲（位置 0）开始。`playing_songs`
    变量指定是否有歌曲在播放❺。程序使用此变量来搜索并播放 MP3 文件。将其设置为 `True`。
- en: Building a Playlist of Songs
  id: totrans-86
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 构建歌曲播放列表
- en: The next part of the program finds the MP3 music files you saved to the *MP3*
    folder by using the `glob()` function you imported earlier. This code, shown in
    [Listing 10-3](ch10.xhtml#ch10ex03), builds a list of all the song titles, which
    the program uses to load and play each song. Remember that the files must be stored
    in the same folder as the Python program file.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的下一部分使用你之前导入的 `glob()` 函数查找你保存在 *MP3* 文件夹中的 MP3 音乐文件。此代码，见 [Listing 10-3](ch10.xhtml#ch10ex03)，构建了一个包含所有歌曲标题的列表，程序使用这个列表来加载并播放每首歌曲。记住，文件必须保存在与
    Python 程序文件相同的文件夹中。
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**LISTING 10-3** Finding the songs'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 10-3** 查找歌曲'
- en: The first line defines the `find_mp3_files()` function that contains the code
    to find each MP3 file and store the filenames ❶. Because you’ll need to use the
    information gathered by this function later in the program, you import two global
    variables from earlier. These variables allow you to transfer the song details
    and number of songs data to the next function.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行定义了 `find_mp3_files()` 函数，该函数包含查找每个 MP3 文件并存储文件名的代码❶。因为你稍后需要在程序中使用此函数收集的信息，所以从之前导入了两个全局变量。这些变量允许你将歌曲详细信息和歌曲数量的数据传递到下一个函数。
- en: Then create another variable, `mp3_files_playlist`, that uses the `glob()` function
    to search for all files ending with the extension *.mp3* ❷ and store them in the
    variable.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建另一个变量 `mp3_files_playlist`，它使用 `glob()` 函数搜索所有以 *.mp3* 扩展名结尾的文件❷ 并将它们存储在该变量中。
- en: Next, copy the list of MP3 filenames to a new variable named `songs_found` ❸.
    This keeps the original list stored in the `mp3_files_playlist` variable and enables
    you to edit the new list without affecting the old one. If you add new music to
    your *MP3* folder, it’s recognized and added to the song list each time the program
    runs.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将 MP3 文件名的列表复制到一个新变量 `songs_found` ❸ 中。这样，原始列表会保存在 `mp3_files_playlist`
    变量中，并且你可以编辑新列表而不影响旧列表。如果你将新音乐添加到 *MP3* 文件夹，每次运行程序时，它都会被识别并添加到歌曲列表中。
- en: Printing all the names of the MP3 files ❹ allows you to have a list of song
    titles. This works only if the filename is the same as the song name. For example,
    if the song is called “Life On Mars,” you need to save the MP3 file as *life_on_mars.mp3*.
    Once you detach the MP3 player from a screen and run it headless, you won’t see
    the printout of MP3 files, but executing this step is useful for testing.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 打印所有 MP3 文件的名称❹ 让你拥有歌曲标题列表。仅当文件名与歌曲名称相同才有效。例如，如果歌曲名为“Life On Mars”，你需要将 MP3
    文件保存为 *life_on_mars.mp3*。一旦你将 MP3 播放器与屏幕断开并以无头模式运行，你将看不到 MP3 文件的打印输出，但执行此步骤对测试很有帮助。
- en: Because you want the MP3 player to play through all the songs in the list, you
    need to figure out how many songs there are ❺ and see the number printed out ❻.
    You must do this step anytime you add or remove songs from the playlist, because
    that changes the length of the list.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你希望 MP3 播放器播放列表中的所有歌曲，所以你需要计算歌曲的数量❺ 并查看打印出来的数字❻。每次你添加或删除播放列表中的歌曲时，都必须执行此步骤，因为这会改变列表的长度。
- en: You also need to set the initial volume level for the volume-control buttons.
    This value is between 0 and 1, where 0 represents no sound and 1 represents the
    maximum volume. The volume range depends on the type of speaker you’re using.
    Set the initial level at 0.10, a tenth of the full volume, for now ❼; you can
    change it later if it’s too loud or too quiet. The final line of code tells `pygame`
    to set the volume ❽.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要为音量控制按钮设置初始音量级别。该值在0到1之间，0表示无声，1表示最大音量。音量范围取决于你使用的扬声器类型。暂时将初始音量设置为0.10，即最大音量的十分之一❼；如果音量太大或太小，你可以稍后调整。代码的最后一行指示`pygame`设置音量❽。
- en: Creating the Code for Playing Songs
  id: totrans-96
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 创建播放歌曲的代码
- en: '[Listing 10-4](ch10.xhtml#ch10ex04) creates the main function, which controls
    the magic music box buttons.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单10-4](ch10.xhtml#ch10ex04)创建了主函数，控制神奇音乐盒的按钮。'
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**LISTING 10-4** The magic music box playing code'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单10-4** 神奇音乐盒播放代码'
- en: It’s important to keep an eye on the indentation levels because most of the
    rest of the code is inside the `play_mp3_songs()` function. Remember that you
    can download the code from *[https://www.nostarch.com/raspiforkids/](https://www.nostarch.com/raspiforkids/)*
    if you get stuck.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意缩进级别，因为接下来的大部分代码都在`play_mp3_songs()`函数内。记住，如果你遇到困难，可以从*[https://www.nostarch.com/raspiforkids/](https://www.nostarch.com/raspiforkids/)*下载代码。
- en: 'Define a new function called `play_mp3_songs()` ❶ that holds the main program
    code. Next, you add the four global variables you created earlier: `the_song`
    to control which MP3 file is playing, `level` to adjust the volume level, `songs_found`
    to allow access to the list of MP3 filenames, and `number_of_songs`.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个新函数`play_mp3_songs()`❶，该函数包含主程序代码。接下来，添加你之前创建的四个全局变量：`the_song`用于控制正在播放的MP3文件，`level`用于调节音量，`songs_found`用于访问MP3文件名列表，`number_of_songs`。
- en: Create a `while` loop ❷ that tells the magic music box to keep playing songs
    until it reaches the last one in the list.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`while`循环❷，让神奇音乐盒继续播放歌曲，直到播放列表中的最后一首歌。
- en: Then make sure the music player stops playing music when it reaches the last
    track ❸. If song number 4 of 20 is playing, the playlist will keep going, because
    4 is less than the total number of songs. Once the playlist reaches song 20 of
    20, it will loop back to the beginning. Later, you’ll use this part of the program
    to skip songs and control the volume.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，确保当播放器播放到最后一首曲目时停止播放❸。如果正在播放的是20首歌中的第4首，播放列表会继续播放，因为4小于歌曲总数。一旦播放列表播放到第20首，它将从头开始循环。稍后，你将使用程序的这一部分跳过歌曲并控制音量。
- en: The code then loads the MP3 file about to be played ❹. Because you previously
    set `the_song` to 0, PyGame will load the first song in the list of MP3 files
    at index 0\. When loaded, the program plays the file by using the code `pygame.mixer.music.play()`
    ❺. Print the current song to see what it is and test that the name of the song
    matches the song that is playing.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 代码加载即将播放的MP3文件❹。因为你之前将`the_song`设置为0，所以PyGame会加载MP3文件列表中索引为0的第一首歌曲。加载后，程序使用代码`pygame.mixer.music.play()`❺来播放该文件。打印当前播放的歌曲名称，确保它与正在播放的歌曲一致。
- en: Next, increment the value of `the_song` by 1 ❻. This tells the program to select
    the next song on the list each time the program loops.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将`the_song`的值增加1❻。这告诉程序每次循环时选择列表中的下一首歌。
- en: To recap, the program selects the first song and starts playing it. It then
    chooses the next song to play when the current song ends (or if you press the
    physical Next Song button on your box). Until then, it continues to play the current
    song by checking that the PyGame music mixer is busy ❼. You use the PyGame clock
    ❽ to stop PyGame from playing the next song until the current song has stopped
    playing. This is used instead of the Python `wait()` or `sleep()` function because
    each song will have a different duration.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，程序选择第一首歌并开始播放。当当前歌曲播放结束后，程序会选择下一首歌播放（或者如果你按下盒子上的物理“下一首歌”按钮）。在此之前，程序会继续播放当前歌曲，并检查PyGame音乐混音器是否正在忙碌❼。你使用PyGame时钟❽来阻止PyGame播放下一首歌，直到当前歌曲播放完毕。这是使用`wait()`或`sleep()`函数的替代方法，因为每首歌的时长不同。
- en: Programming the Next Song Button
  id: totrans-107
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 编写“下一首歌”按钮的程序
- en: Now, add the code in [Listing 10-5](ch10.xhtml#ch10ex05), which lets you skip
    to the next song. This code continues from the previous listing, with the top
    line at the same indentation level as the last line of [Listing 10-4](ch10.xhtml#ch10ex04).
    Use this level as a guide for indenting the rest of this code.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，添加[Listing 10-5](ch10.xhtml#ch10ex05)中的代码，这让你能够跳到下一首歌曲。这段代码从前一段代码继续，顶部行与[Listing
    10-4](ch10.xhtml#ch10ex04)最后一行的缩进相同。以此缩进为指导来缩进其余的代码。
- en: '[PRE6]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**LISTING 10-5** Skipping songs'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 10-5** 跳过歌曲'
- en: The code checks whether someone has pressed the Next Song button ❶, which was
    named `play_skip` earlier. You also add a short delay ❷, so PyGame can register
    the button press. Otherwise, the program might crash.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 代码检查是否有人按下了下一首歌曲按钮❶，这个按钮之前命名为`play_skip`。你还添加了一个短暂的延迟❷，以便PyGame可以注册按钮按下事件。否则，程序可能会崩溃。
- en: If someone has pressed the button, PyGame uses the function `pygame.mixer.music.stop()`
    ❸ to stop playing the music.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人按下了按钮，PyGame使用`pygame.mixer.music.stop()`❸函数来停止播放音乐。
- en: Once you’ve stopped the current song, you want the program to loop back to the
    beginning, where the `while the_song < number_of_songs` condition checks whether
    songs are still in the list to be played. To do this, you break out of the loop
    so the PyGame mixer is no longer busy ❹. PyGame will then play the next song,
    if there is one.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你停止了当前的歌曲，你希望程序返回到开始的地方，在那里`while the_song < number_of_songs`条件检查是否还有歌曲待播放。为此，你可以跳出循环，这样PyGame混音器就不再忙碌❹。如果还有歌曲，PyGame将播放下一首。
- en: Increasing the Volume
  id: totrans-114
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 增加音量
- en: Add the code in [Listing 10-6](ch10.xhtml#ch10ex06) for the volume-control buttons.
    You start with the button to increase the volume, which you called `volume_up`
    earlier.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 添加[Listing 10-6](ch10.xhtml#ch10ex06)中的音量控制按钮代码。你从增加音量的按钮开始，这个按钮之前命名为`volume_up`。
- en: '[PRE7]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**LISTING 10-6** Increasing the volume'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 10-6** 增加音量'
- en: As with [Listing 10-5](ch10.xhtml#ch10ex05), begin by checking whether the button
    (`volume_up`) has been pressed ❶. If it has, the program needs to check that the
    current volume isn’t at its maximum. It does this by checking whether the current
    level is less than or equal to 1 ❷, which is the maximum volume. If the level
    is less than 1, you allow the program to increase the volume by adding 0.10 to
    the current level ❸.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如同在[Listing 10-5](ch10.xhtml#ch10ex05)中所示，首先检查按钮（`volume_up`）是否被按下❶。如果按下了，程序需要检查当前音量是否已达到最大值。它通过检查当前音量是否小于或等于1❷来实现，1是最大音量。如果音量小于1，你可以让程序通过增加0.10来提高音量❸。
- en: If the program has just started, the level will be 0.10\. Pressing `volume_up`
    once will add 0.10, which increases the volume to 0.20 ❹.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果程序刚开始，音量为0.10。按一次`volume_up`会增加0.10，将音量提高到0.20❹。
- en: You code a response for when the condition “less than one” isn’t met, which
    is when the volume is at its maximum. Use an `else` statement ❺, and then enter
    `pass` to keep the volume at the maximum level.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你为条件“不满足‘小于一’”时编写了响应代码，这个条件是在音量达到最大时。使用`else`语句❺，然后输入`pass`，以保持音量处于最大水平。
- en: Decreasing the Volume
  id: totrans-121
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 降低音量
- en: Add the code in [Listing 10-7](ch10.xhtml#ch10ex07) to decrease the volume by
    using `volume_down`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 添加[Listing 10-7](ch10.xhtml#ch10ex07)中的代码，使用`volume_down`来降低音量。
- en: '[PRE8]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**LISTING 10-7** Decreasing the volume'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 10-7** 降低音量'
- en: This code is similar to the code for increasing the volume. You check whether
    `volume_down` has been pressed ❶. If it has, check the current volume level and,
    if the volume level is greater than 0 ❷, subtract 0.10 from the current level
    ❸.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码类似于增加音量的代码。你检查是否按下了`volume_down`按钮❶。如果按下了，检查当前音量水平，如果音量水平大于0❷，则从当前音量减去0.10❸。
- en: Again, use an `else` statement ❹ to `pass` the button press if the level is
    0, because in that case, you can’t turn it down any lower.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用`else`语句❹来`pass`按钮按下事件，如果音量为0，因为在这种情况下，无法将其调低。
- en: Turning Off the Magic Music Box
  id: totrans-127
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 关闭魔法音乐盒
- en: The code in [Listing 10-8](ch10.xhtml#ch10ex08) allows you to turn off the music
    box. You’ll program the music box to stop playing when you press the Power Off
    button or finish playing all the songs.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 10-8](ch10.xhtml#ch10ex08)中的代码允许你关闭音乐盒。当你按下电源按钮或播放完所有歌曲时，音乐盒将停止播放。'
- en: '[PRE9]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**LISTING 10-8** Shutting down the music box'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 10-8** 关闭音乐盒'
- en: Add the code for the Power Off button ❶. Then use an `else` statement ❷ that
    will also shut down the music box if all the songs have been played, and print
    `end of playlist` ❸.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 添加电源按钮的代码❶。然后使用`else`语句❷，当所有歌曲播放完毕时，也会关闭音乐盒，并打印`end of playlist`❸。
- en: Ending the Program
  id: totrans-132
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 结束程序
- en: You’ve defined the three functions that do all the work. Now finish the program
    by using [Listing 10-9](ch10.xhtml#ch10ex09) to call each of these functions.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经定义了执行所有工作的三个函数。现在通过使用[清单10-9](ch10.xhtml#ch10ex09)来调用这些函数，完成程序的编写。
- en: '[PRE10]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**LISTING 10-9** Calling the magic music box’s three functions'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 10-9** 调用魔法音乐盒的三个函数'
- en: The `find_mp3_files()` ❶ function locates all the MP3 files whenever the program
    is running. So if you add new MP3 files, the function will find them and add them
    to the playlist.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`find_mp3_files()` ❶ 函数在程序运行时会定位所有的MP3文件。所以，如果你添加了新的MP3文件，函数将会找到它们并将它们添加到播放列表中。'
- en: The `button.wait_for_press()` ❷ function adds the user interaction to the buttons
    so the box reacts accordingly when you press a button.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`button.wait_for_press()` ❷ 函数为按钮添加了用户交互功能，当你按下按钮时，魔法盒会做出相应反应。'
- en: The `play_mp3_songs()` ❸ function runs the main program loop, which checks whether
    there are MP3 files to play and then plays each one. It also checks whether any
    button has been pressed and responds if it has.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`play_mp3_songs()` ❸ 函数运行主程序循环，检查是否有MP3文件可以播放，然后播放每一首。它还会检查是否有按钮被按下，并作出响应。'
- en: Running Your Program
  id: totrans-139
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运行你的程序
- en: It’s time to test your program! If you’re using a Bluetooth speaker, check that
    it’s paired with your Raspberry Pi. If you’re using a speaker via the audio jack,
    make sure it’s properly connected. Then save the program and press **F5** to run
    it.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候测试你的程序了！如果你使用的是蓝牙扬声器，请检查它是否与树莓派配对。如果你使用的是通过音频插孔连接的扬声器，请确保它已正确连接。然后保存程序并按**F5**运行它。
- en: The program should locate all the MP3 files in the folder and build a list of
    songs. It will then play the first song in the list. Press the **Next Song** button
    to change the song. Then try the volume buttons. Press the **Power Off** button
    to stop the music playing and shut down your Raspberry Pi.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 程序应该定位到文件夹中的所有MP3文件并建立歌曲列表。然后，它会播放列表中的第一首歌。按下**下一首**按钮切换歌曲。接着，试试音量按钮。按下**关机**按钮停止音乐播放并关闭你的树莓派。
- en: 'If your MP3 player doesn’t work correctly, check for the following errors:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的MP3播放器无法正常工作，检查以下错误：
- en: Is the volume low or muted?
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音量是否过低或静音？
- en: Is the audio set to either Bluetooth or the headphone jack?
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音频设置是蓝牙还是耳机插孔？
- en: Is the Bluetooth speaker paired?
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝牙扬声器是否已配对？
- en: Are the MP3 files saved in the same folder as the Python code?
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MP3文件是否保存在与Python代码相同的文件夹中？
- en: Do the sound files end in the extension *.mp3*?
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声音文件是否以*.mp3*扩展名结尾？
- en: Are the buttons wired to the GPIO pin numbers used in the program code?
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮是否连接到程序代码中使用的GPIO引脚号？
- en: AUTOMATICALLY STARTING THE MP3 PLAYER ON BOOT-UP
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动启动MP3播放器
- en: As a finishing touch, let’s make your magic music box turn on and start playing
    songs anytime you plug it into a power supply. You can do this in two ways, depending
    on whether you’re using the headphone jack or a Bluetooth speaker.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后的点睛之笔，让我们设置你的魔法音乐盒在每次连接电源时自动启动并播放音乐。根据你使用的是耳机插孔还是蓝牙扬声器，你可以通过两种方式来实现。
- en: Headphone Jack Option
  id: totrans-151
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 耳机插孔选项
- en: If you’re using the headphone jack, you’ll use cron, the time-based job-scheduling
    tool you used in [Chapter 9](ch09.xhtml#ch09). The cron program enables you to
    run a particular program automatically at a specific time.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用耳机插孔，你需要使用cron，这是你在[第9章](ch09.xhtml#ch09)中使用的基于时间的任务调度工具。cron程序使你能够在特定的时间自动运行某个程序。
- en: To use cron, you need to create instructions about which event you want to run
    and when you want to run it. You do this in the *crontab* file, which holds instructions
    for which programs or events to run and, most important, when to run these events.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 使用cron时，你需要创建指令来说明你希望在哪个事件发生时运行，以及何时运行这些事件。你在*crontab*文件中执行此操作，该文件包含要运行的程序或事件的指令，最重要的是，何时运行这些事件。
- en: 'Open the terminal and enter the following command to open the cron console:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并输入以下命令以打开cron控制台：
- en: '[PRE11]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The console will present you with three methods of editing the cron file. Select
    option 2 and press ENTER to open the crontab file with the nano text editor. Scroll
    to the bottom of the text in the crontab file and locate the blank space. Then
    add the following line of code:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台会提供三种编辑cron文件的方法。选择选项2并按ENTER键使用nano文本编辑器打开crontab文件。滚动到crontab文件的底部，找到空白处。然后添加以下代码行：
- en: '[PRE12]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The command states that every time the Raspberry Pi reboots, it should run Python
    in super user mode (which grants permission to run anything, just like administrative
    mode), open the */home/pi/MP3* folder, and execute the program called *music_box.py*.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令表示每次树莓派重新启动时，它应以超级用户模式运行Python（这允许运行任何程序，就像管理员模式一样），打开*/home/pi/MP3*文件夹，并执行名为*music_box.py*的程序。
- en: If you named your code file something else, replace *music_box.py* with the
    name you gave it. Also check that the folder path is correct by opening the folder
    where your *music_box.py* program is stored and noting the file path.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你为代码文件命名为其他名称，替换*music_box.py*为你给它命名的文件名。还要通过打开存储*music_box.py*程序的文件夹并查看文件路径，来检查文件夹路径是否正确。
- en: The `&` at the end of the code line tells your program to run in the background,
    so you can do other tasks with your Raspberry Pi at the same time.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 代码行末的`&`符号告诉你的程序在后台运行，这样你就可以同时使用树莓派进行其他任务。
- en: Once you have checked the command details and are confident that they’re correct,
    press CTRL-X to save and exit the crontab file. Now, each time you turn on or
    reboot your Raspberry Pi, the crontab file will run, starting the magic music
    box.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你检查过命令详情并确信它们正确，按CTRL-X保存并退出crontab文件。现在，每次你打开或重启树莓派时，crontab文件都会运行，启动魔法音乐盒。
- en: 'If you want to stop the program from running automatically, open the crontab
    file again from the terminal by entering this command:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想停止程序自动运行，可以再次从终端打开crontab文件，输入以下命令：
- en: '[PRE13]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Then delete the line of code that you added earlier. Save the file and reboot.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 然后删除你之前添加的代码行。保存文件并重启。
- en: 'Because the MP3 player is designed to run headless, you don’t need the Raspberry
    Pi to boot to the desktop and display the background screen and icons. You also
    don’t need to use the mouse. Booting to the desktop takes longer because of these
    unnecessary items, and the process uses more memory and processing power. You
    won’t see the desktop, so it’s pointless to load it. Instead, you’ll configure
    the Pi to boot from the command line. Open the terminal window and enter this
    command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 由于MP3播放器设计为无头模式运行，你不需要让树莓派启动到桌面并显示背景屏幕和图标，也不需要使用鼠标。启动到桌面会因为这些不必要的项目而变得更慢，同时占用更多的内存和处理能力。你看不到桌面，所以加载它是没有意义的。相反，你将配置树莓派从命令行启动。打开终端窗口并输入以下命令：
- en: '[PRE14]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Next, select the third option, **Boot Options**, and press ENTER. Then select
    the **B1 Desktop / CLI** option, select the **B2 Console Autologin** option, select
    **<OK>**, and press ENTER ([Figure 10-6](ch10.xhtml#ch10fig06)). You’ll need to
    restart your Raspberry Pi.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，选择第三个选项，**启动选项**，按ENTER键。然后选择**B1 桌面 / CLI**选项，选择**B2 控制台自动登录**选项，选择**<OK>**，并按ENTER键
    ([图10-6](ch10.xhtml#ch10fig06))。你需要重新启动你的树莓派。
- en: '![Image](../images/10fig06.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/10fig06.jpg)'
- en: '**FIGURE 10-6** Booting to the command line with auto login'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**图10-6** 启动到命令行并自动登录'
- en: Select the **Finish** option, and you’ll be prompted to save the config file
    and reboot. Select **Yes**, and your Pi will restart. As your Raspberry Pi boots,
    the magic music box will load.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**完成**选项，系统会提示你保存配置文件并重启。选择**是**，树莓派将重新启动。随着树莓派的启动，魔法音乐盒也会加载。
- en: Bluetooth Option
  id: totrans-171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 蓝牙选项
- en: If you’re using a Bluetooth speaker, you can still automatically start the program
    on boot-up, but it’s slightly more challenging because you need to configure numerous
    settings.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是蓝牙音响，仍然可以在启动时自动启动程序，但这稍微有些复杂，因为你需要配置多个设置。
- en: You’ll also need to add a line of text that triggers Python to run your program,
    to the *.bashrc* file, which is a shell script that runs whenever the Raspberry
    Pi boots up.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要向*.bashrc*文件中添加一行文本，以触发Python运行你的程序。*.bashrc*文件是一个每次树莓派启动时都会运行的shell脚本。
- en: Before you make a change to this file, make sure the Bluetooth speaker is paired
    with your Raspberry Pi. To give the Python program access to the speaker, you
    need to boot to the GUI desktop, not the command line. However, when PyGame runs,
    it turns the screen blank. This is fine, because the magic music box doesn’t require
    a screen. But it makes solving any issue in the code difficult because you can’t
    see or access the program code.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在你更改这个文件之前，确保蓝牙音响已经与树莓派配对。为了让Python程序访问音响，你需要先启动到图形界面（GUI）桌面，而不是命令行模式。但是，当PyGame运行时，它会让屏幕变成空白。这没问题，因为魔法音乐盒不需要屏幕。但是，这也让解决程序中的任何问题变得困难，因为你看不到或无法访问程序代码。
- en: To remedy this, open the Python MP3 player program and add `time.sleep(30)`
    after the lines importing the libraries to add a 30-second delay to the start
    of the program. This gives you time to edit or adjust the setup code if it’s not
    working correctly. Just remember when you’re testing the program that you’ve added
    the delay, so you don’t think the program isn’t working!
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，打开Python MP3播放器程序，并在导入库的代码行后添加`time.sleep(30)`，为程序启动添加一个30秒的延迟。这给了你时间编辑或调整设置代码，如果它没有正常工作。只要记得在测试程序时你已经添加了延迟，这样就不会误以为程序没有运行！
- en: If, after adding the 30-second delay, Python has loaded PyGame, and you still
    need to access the Raspberry Pi, you’ll need to access it remotely using SSH.
    But before you add the automatic startup script, enable SSH in the configuration
    settings. For a reminder on how to do this, refer to “Accessing the Raspberry
    Pi via SSH” on [page 25](ch01.xhtml#page_25).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在添加了30秒延迟后，Python已经加载了PyGame，并且你仍然需要访问树莓派，你需要通过SSH远程访问它。但是在添加自动启动脚本之前，请在配置设置中启用SSH。有关如何操作的提醒，请参阅[第25页](ch01.xhtml#page_25)的“通过SSH访问树莓派”。
- en: 'Now you’re ready to create the boot-up script. Open the terminal window and
    enter the following command to open the *.bashrc* file:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你准备好创建启动脚本了。打开终端窗口，输入以下命令打开*.bashrc*文件：
- en: '[PRE15]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Scroll down to the bottom of the file and enter python3 followed by the file
    path of your MP3 program—for example, python3 /home/pi/MP3/MP3_Player_BT.py ([Figure
    10-7](ch10.xhtml#ch10fig07)).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动到文件底部，输入python3，后跟MP3程序的文件路径——例如，python3 /home/pi/MP3/MP3_Player_BT.py（见[图10-7](ch10.xhtml#ch10fig07)）。
- en: '![Image](../images/10fig07.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/10fig07.jpg)'
- en: '**FIGURE 10-7** The boot-up script'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**图10-7** 启动脚本'
- en: Remember to replace the example file path with the filename and location of
    your program. Save the file, and then reboot the Raspberry Pi. It should load
    your MP3 Python code. Remember to wait 30 seconds and ensure that your Bluetooth
    speaker is still paired. After the delay, the screen will turn black. Press the
    **Next Song** button for the first song.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 记得将示例文件路径替换为你程序的文件名和位置。保存文件，然后重启树莓派。它应该会加载你的MP3 Python代码。记得等待30秒，并确保你的蓝牙音响仍然配对连接。延迟结束后，屏幕会变黑。按下**下一首歌**按钮播放第一首歌。
- en: If you can’t hear the music but suspect the code is working, try plugging a
    speaker or a pair of headphones into the headphone jack. If you can hear the music,
    you know the program is working correctly and that there’s an issue with the Bluetooth
    pairing.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你听不到音乐，但怀疑代码正常工作，尝试将扬声器或耳机插入耳机插孔。如果能听到音乐，就说明程序正常工作，问题出在蓝牙配对上。
- en: If you encounter any other issues and you need to edit the code, you can either
    reboot your Raspberry Pi or open the terminal window and press CTRL-X or CTRL-Z
    to halt the code. Then check the various settings. If this doesn’t work, use SSH
    to access the Raspberry Pi and open, edit, or comment out the *.bashrc* file;
    then reboot. Continue testing your music box until you’re confident that the hardware
    and program code are functioning correctly.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到其他问题并需要编辑代码，你可以重启树莓派，或打开终端窗口并按CTRL-X或CTRL-Z暂停代码。然后检查各种设置。如果这不起作用，可以使用SSH访问树莓派并打开、编辑或注释掉*.bashrc*文件；然后重启。继续测试你的音乐盒，直到你确信硬件和程序代码正常运行。
- en: PUTTING IT ALL TOGETHER
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 汇总
- en: Once you’ve completed the program code and tested that it’s working correctly,
    you can begin to secure the hardware into your box. It might look something like
    [Figure 10-8](ch10.xhtml#ch10fig08).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了程序代码并确认它正常工作，你可以开始将硬件固定到你的盒子里。它可能看起来像[图10-8](ch10.xhtml#ch10fig08)所示。
- en: '![Image](../images/10fig08.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/10fig08.jpg)'
- en: '**FIGURE 10-8** The finished magic music box'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**图10-8** 完成的魔术音乐盒'
- en: If you’re using a simple container, like a lunch box, place the Raspberry Pi
    and battery into the box and secure the lid. If you’re using a wooden box, like
    the one shown in [Figure 10-8](ch10.xhtml#ch10fig08), you can mount the Raspberry
    Pi by using double-sided tape, mounting putty, or a small nylon screw.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是简单的容器，比如午餐盒，将树莓派和电池放入盒子中并固定好盖子。如果你使用的是木盒，像[图10-8](ch10.xhtml#ch10fig08)所示，你可以使用双面胶带、固定膏或小尼龙螺丝将树莓派固定。
- en: Then you can tuck away and hide the wires from outside view. You can also make
    additional holes to house any power or USB cables that you need. If the program
    code fails, the best solution is to remove the SD card and put it into another
    Pi. Once you’ve resolved the problem, return the SD card to the original MP3 player
    Pi.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以将电线收纳起来，避免外界看到。你还可以开额外的孔来安置需要的电源或USB线。如果程序代码出错，最好的解决办法是取出SD卡，并将其插入另一台Pi设备。当问题解决后，再将SD卡放回原来的MP3播放器Pi中。
- en: WRAPPING UP
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: 'Congratulations! You’ve built your own stand-alone magic music box. You can
    now add features to your magic music box, such as the following:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经建好了自己的独立魔法音乐盒。现在你可以为你的魔法音乐盒添加更多功能，比如以下这些：
- en: More MP3 files
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多的MP3文件
- en: An LED that flashes when the music player has loaded
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个音乐播放器加载时闪烁的LED灯
- en: LEDs that flash as the music is playing
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着音乐播放闪烁的LED灯
- en: A button to mute the volume
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个静音按钮
- en: Additional buttons to play the previous song, an excerpt of the playlist, or
    a secret Easter egg song
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 额外的按钮，用于播放上一首歌曲、播放列表的片段，或者一个隐藏的彩蛋歌曲
- en: A small LCD screen that displays the name of the current song
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个小型LCD屏幕，显示当前歌曲的名称
