- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">4</samp> <samp class="SANS_Dogma_OT_Bold_B_11">EXPLORING
    DATASETS IN THE TERMINAL</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">4</samp> <samp class="SANS_Dogma_OT_Bold_B_11">在终端中探索数据集</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: In this chapter, you’ll build on the command line skills you’ve learned so far
    and begin investigating real datasets. You’ll use <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loops to unzip the BlueLeaks files, then search the files to determine which fusion
    centers have the most data and which documents contain the keywords *antifa* and
    *Black Lives Matter*. I’ll also give an overview of the mysterious encrypted data
    in the dataset and describe my hypothesis of how the hacker collected the data.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将继续发展你在命令行中的技能，开始研究真实的数据集。你将使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    循环来解压 BlueLeaks 文件，然后搜索文件以确定哪些融合中心拥有最多的数据，哪些文档包含关键词 *antifa* 和 *Black Lives Matter*。我还将概述数据集中神秘的加密数据，并描述我对黑客如何收集这些数据的假设。
- en: You’ll also learn to create Linux cloud servers and connect to them securely
    for faster internet and extra disk space. As practice, you’ll use a remote server
    to download and briefly examine hacked data from the Oath Keepers militia, a far-right
    extremist group that participated in the January 6, 2021, US Capitol insurrection.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将学习如何创建 Linux 云服务器并安全连接到它们，以获得更快的网络速度和额外的磁盘空间。作为练习，你将使用远程服务器下载并简要检查来自极右翼恐怖组织“誓言守卫者”（Oath
    Keepers）的被黑数据，该组织参与了 2021 年 1 月 6 日的美国国会骚乱。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Introducing for Loops</samp>
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">介绍 for 循环</samp>
- en: The BlueLeaks torrent you downloaded in Exercise 2-1 is 269GB and contains 168
    different ZIP files ranging from 49GB to half a kilobyte each. In theory, you
    could manually unzip these 168 files one at a time to access the data. However,
    this slow, tedious process becomes impractical with even larger datasets (imagine
    individually extracting 10,000 ZIP files). In this section, you’ll learn to speed
    up this task by automating it with <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loops.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你在练习 2-1 中下载的 BlueLeaks 种子文件大小为 269GB，包含 168 个不同的 ZIP 文件，大小从 49GB 到半个千字节不等。理论上，你可以手动逐个解压这
    168 个文件来访问数据。然而，这一缓慢且繁琐的过程在处理更大的数据集时就变得不切实际（想象一下逐个提取 10,000 个 ZIP 文件）。在本节中，你将学习如何通过使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> 循环自动化这一任务，从而加快速度。
- en: A <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> loop is a type of
    command that runs a piece of code once for every item in a list. Each time the
    code loops, it stores the current item in a *variable*, which you can think of
    as a placeholder for some value. Code variables are similar to those in math,
    where the value of *x* might be different for different problems, but in shell
    scripting, the values can be text or numbers. Even though each loop runs the same
    code, the results may be different, because the value of the variable changes
    with each loop.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> 循环是一种命令，它会针对列表中的每一项运行一次代码。每次循环时，代码会将当前项存储在一个*变量*中，你可以将其视为某个值的占位符。代码变量类似于数学中的变量，*x*
    的值可能因不同问题而不同，但在 shell 脚本中，变量的值可以是文本或数字。尽管每次循环都会运行相同的代码，结果可能会有所不同，因为每次循环时变量的值都会变化。
- en: 'For example, the following <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop displays the numbers 1, 2, and 3:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下 <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> 循环显示数字 1、2 和
    3：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> loop starts with
    the syntax <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">variable_name</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">in</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">list_of_items</samp>,
    followed by <samp class="SANS_TheSansMonoCd_W5Regular_11">do</samp>, followed
    by the commands to run for each item in the list, followed by <samp class="SANS_TheSansMonoCd_W5Regular_11">done</samp>.
    In this case, <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">variable_name</samp>
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">NUMBER</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">list_of_items</samp>
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">1 2 3</samp>. The value of the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">NUMBER</samp> variable will be <samp
    class="SANS_TheSansMonoCd_W5Regular_11">1</samp> the first time the code loops,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> during the second loop,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> during the third loop.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> 循环的语法以 <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">variable_name</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">in</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">list_of_items</samp>
    开始，接着是 <samp class="SANS_TheSansMonoCd_W5Regular_11">do</samp>，然后是针对列表中每个项目执行的命令，最后以
    <samp class="SANS_TheSansMonoCd_W5Regular_11">done</samp> 结束。在这个例子中，<samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">variable_name</samp>
    是 <samp class="SANS_TheSansMonoCd_W5Regular_11">NUMBER</samp>，而 <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">list_of_items</samp>
    是 <samp class="SANS_TheSansMonoCd_W5Regular_11">1 2 3</samp>。当代码第一次循环时，<samp class="SANS_TheSansMonoCd_W5Regular_11">NUMBER</samp>
    变量的值是 <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>，第二次循环时是 <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>，第三次循环时是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">echo</samp> command displays
    something, in this case <samp class="SANS_TheSansMonoCd_W5Regular_11">$NUMBER</samp>,
    to the terminal. The dollar sign (<samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp>)
    means the code should display the value of the <samp class="SANS_TheSansMonoCd_W5Regular_11">NUMBER</samp>
    variable, rather than the word <samp class="SANS_TheSansMonoCd_W5Regular_11">NUMBER</samp>.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">echo</samp> 命令将某些内容显示到终端，在这个例子中是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">$NUMBER</samp>。美元符号 (<samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp>)
    表示代码应显示 <samp class="SANS_TheSansMonoCd_W5Regular_11">NUMBER</samp> 变量的值，而不是单纯显示单词
    <samp class="SANS_TheSansMonoCd_W5Regular_11">NUMBER</samp>。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*Using all caps is a common convention for variable names, but it’s not required.
    For example, you could call the variable <samp class="mono">number</samp> instead
    of <samp class="mono">NUMBER</samp> and display it with <samp class="mono">echo
    $number</samp> instead of <samp class="mono">echo $NUMBER</samp>. Variable names
    are case sensitive.*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用全大写字母来命名变量是一种常见的约定，但并不是强制要求。例如，你可以将变量命名为 <samp class="mono">number</samp>
    而不是 <samp class="mono">NUMBER</samp>，并用 <samp class="mono">echo $number</samp>
    来显示，而不是 <samp class="mono">echo $NUMBER</samp>。变量名是区分大小写的。*'
- en: 'When you run the previous <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop in your terminal, you should see the following output:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在终端运行上面的 <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> 循环时，应该会看到以下输出：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can also use a <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop to loop through the output of another shell command, as shown in the following
    code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> 循环来遍历另一个 shell
    命令的输出，如下所示：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The variable name in this code is <samp class="SANS_TheSansMonoCd_W5Regular_11">FILENAME</samp>.
    Next, <samp class="SANS_TheSansMonoCd_W5Regular_11">$(ls *.zip)</samp> tells your
    machine to run the <samp class="SANS_TheSansMonoCd_W5Regular_11">ls *.zip</samp>
    command. This command outputs a list of all of the ZIP files in the current folder,
    producing a list of filenames. The <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop cycles through that list and runs the code between <samp class="SANS_TheSansMonoCd_W5Regular_11">do</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">done</samp> for each filename.
    In this case, the <samp class="SANS_TheSansMonoCd_W5Regular_11">echo</samp> command
    prints the filenames to the terminal in <samp class="SANS_TheSansMonoCd_W5Regular_11">ZIP
    filename:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">filename</samp>
    format.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码中的变量名是 <samp class="SANS_TheSansMonoCd_W5Regular_11">FILENAME</samp>。接下来，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">$(ls *.zip)</samp> 告诉你的计算机运行 <samp class="SANS_TheSansMonoCd_W5Regular_11">ls
    *.zip</samp> 命令。此命令输出当前文件夹中所有 ZIP 文件的列表，生成文件名列表。<samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    循环遍历该列表，并为每个文件名运行 <samp class="SANS_TheSansMonoCd_W5Regular_11">do</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">done</samp> 之间的代码。在这种情况下，<samp class="SANS_TheSansMonoCd_W5Regular_11">echo</samp>
    命令将文件名以 <samp class="SANS_TheSansMonoCd_W5Regular_11">ZIP 文件名:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">filename</samp>
    的格式打印到终端。
- en: 'For example, here’s what it looks like when I run this code in the *BlueLeaks*
    folder in my terminal on macOS:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下面是我在 macOS 上的终端中运行此代码时的样子：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Each time the code loops, the value of <samp class="SANS_TheSansMonoCd_W5Regular_11">FILENAME</samp>
    is the name of one of the ZIP files. When the <samp class="SANS_TheSansMonoCd_W5Regular_11">echo</samp>
    command runs, it displays those filenames, one after another.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 每次代码循环时，<samp class="SANS_TheSansMonoCd_W5Regular_11">FILENAME</samp> 的值是其中一个
    ZIP 文件的名称。当 <samp class="SANS_TheSansMonoCd_W5Regular_11">echo</samp> 命令运行时，它会依次显示这些文件名。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Exercise 4-1: Unzip the BlueLeaks
    Dataset</samp>'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_21">练习 4-1：解压 BlueLeaks 数据集</samp>
- en: In this exercise, you’ll write a script to unzip all the ZIP files in BlueLeaks
    so you can work with the data they contain. Once unzipped, the files will take
    271GB of additional space on your *datasets* USB.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将编写一个脚本来解压 BlueLeaks 中的所有 ZIP 文件，这样你就可以处理它们包含的数据。解压后，这些文件会占用你的 *datasets*
    USB 上 271GB 的额外空间。
- en: If you’re using macOS or Linux, follow the instructions in “Unzip Files on macOS
    or Linux” next. If you’re using Windows, read that subsection to learn how to
    write <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> loops in bash since
    you’ll need that skill later in the book, but you won’t need to follow along until
    “Unzip Files on Windows” on page 92.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 macOS 或 Linux，接下来按照“在 macOS 或 Linux 上解压文件”的指示操作。如果你使用的是 Windows，阅读该小节了解如何在
    bash 中编写 <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> 循环，因为你稍后在书中会用到这个技能，但直到“在
    Windows 上解压文件”（第 92 页）之前不需要跟着做。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Unzip Files on macOS
    or Linux</samp>
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">在 macOS 或 Linux 上解压文件</samp>
- en: 'Open a terminal and navigate to your *BlueLeaks* folder by running the following
    command, replacing <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">blueleaks_path</samp>
    with your own folder path:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并通过运行以下命令导航到你的 *BlueLeaks* 文件夹，替换 <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">blueleaks_path</samp>
    为你自己的文件夹路径：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'On Linux, I’d use this command (your path will be different):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上，我会使用这个命令（你的路径会不同）：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'On macOS, I’d use the following (again, your path will vary):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上，我会使用以下命令（同样，你的路径会有所不同）：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Run <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ls</samp> to see the list of
    files in this folder and <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ls -lh</samp>
    to see detailed information about these files, like their sizes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ls</samp> 查看此文件夹中的文件列表，运行 <samp
    class="SANS_TheSansMonoCd_W7Bold_B_11">ls -lh</samp> 查看这些文件的详细信息，例如它们的大小。
- en: 'To unzip single files, you use the following syntax:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要解压单个文件，你使用以下语法：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For example, run this command to unzip the first file in BlueLeaks:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，运行此命令解压 BlueLeaks 中的第一个文件：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This should extract the 2.6GB *211sfbay.zip* file into the folder called *211sfbay*.
    Run <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ls</samp> again and you should
    see the new folder containing all of the hacked data from one of the BlueLeaks
    sites.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该将 2.6GB 的 *211sfbay.zip* 文件解压到名为 *211sfbay* 的文件夹中。再次运行 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ls</samp>，你应该能看到包含来自其中一个
    BlueLeaks 网站的所有被盗数据的新文件夹。
- en: 'However, you want to unzip *all* of the BlueLeaks files. Delete the *211sfbay*
    folder:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你想要解压所有的BlueLeaks文件。删除*211sfbay*文件夹：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">rm</samp> command on its own
    deletes files; to delete entire folders, you include <samp class="SANS_TheSansMonoCd_W5Regular_11">-r</samp>
    (short for <samp class="SANS_TheSansMonoCd_W5Regular_11">--recursive</samp>).
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">-r</samp> option deletes all
    the files in that folder, and all the files in folders in that folder, and so
    on, before finally deleting the target folder.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">rm</samp>命令本身可以删除文件；要删除整个文件夹，你需要加上<samp
    class="SANS_TheSansMonoCd_W5Regular_11">-r</samp>（即<samp class="SANS_TheSansMonoCd_W5Regular_11">--recursive</samp>）。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">-r</samp>选项会删除文件夹中的所有文件，以及该文件夹中子文件夹中的所有文件，依此类推，最后删除目标文件夹。
- en: 'Navigate to your text editor, create a new folder in your *exercises* folder
    called *chapter-4*, and create a new file in the *chapter-4* folder called *exercise
    -4-1-unzip.sh*. (Storing your script in a separate folder prevents you from polluting
    the dataset with your own files.) In your new file, enter the following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 打开文本编辑器，在你的*exercises*文件夹中创建一个名为*chapter-4*的新文件夹，并在*chapter-4*文件夹内创建一个名为*exercise-4-1-unzip.sh*的新文件。（将脚本存放在单独的文件夹中可以防止你自己的文件污染数据集。）在新文件中，输入以下代码：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Since *exercise-4-1-unzip.sh* is a shell script, it begins with the same <samp
    class="SANS_TheSansMonoCd_W5Regular_11">#!/bin/bash</samp> shebang as the script
    in [Chapter 3](chapter3.xhtml). After you define this <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop, the script starts it with <samp class="SANS_TheSansMonoCd_W5Regular_11">do</samp>
    and ends it with <samp class="SANS_TheSansMonoCd_W5Regular_11">done</samp>, running
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">echo "Unzipping $FILENAME…"</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">unzip -o $FILENAME</samp> commands
    over and over. The <samp class="SANS_TheSansMonoCd_W5Regular_11">echo</samp> command
    displays the value of the <samp class="SANS_TheSansMonoCd_W5Regular_11">FILENAME</samp>
    variable, which changes to a new filename with each loop, and the <samp class="SANS_TheSansMonoCd_W5Regular_11">unzip</samp>
    command unzips that file. The <samp class="SANS_TheSansMonoCd_W5Regular_11">-o</samp>
    argument tells <samp class="SANS_TheSansMonoCd_W5Regular_11">unzip</samp> to *overwrite*
    files if necessary, meaning that if any file being unzipped already exists, the
    script will replace it with the newer version.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于*exercise-4-1-unzip.sh*是一个Shell脚本，它以与[第3章](chapter3.xhtml)中的脚本相同的<samp class="SANS_TheSansMonoCd_W5Regular_11">#!/bin/bash</samp>
    shebang开始。定义完这个<samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>循环后，脚本通过<samp
    class="SANS_TheSansMonoCd_W5Regular_11">do</samp>开始，使用<samp class="SANS_TheSansMonoCd_W5Regular_11">done</samp>结束，反复执行<samp
    class="SANS_TheSansMonoCd_W5Regular_11">echo "Unzipping $FILENAME…"</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">unzip -o $FILENAME</samp>命令。<samp class="SANS_TheSansMonoCd_W5Regular_11">echo</samp>命令显示<FILENAME</samp>变量的值，这个值在每次循环时都会变化，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">unzip</samp>命令则解压该文件。<samp class="SANS_TheSansMonoCd_W5Regular_11">-o</samp>参数告诉<samp
    class="SANS_TheSansMonoCd_W5Regular_11">unzip</samp>在必要时*覆盖*文件，也就是说，如果某个被解压的文件已经存在，脚本将用更新的版本替换它。
- en: 'For example, when you run this code on BlueLeaks, the value of <samp class="SANS_TheSansMonoCd_W5Regular_11">FILENAME</samp>
    during the first loop is <samp class="SANS_TheSansMonoCd_W5Regular_11">211sfbay.zip</samp>.
    The code that runs in this loop is equivalent to the following commands:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当你在BlueLeaks上运行这段代码时，在第一次循环中，<samp class="SANS_TheSansMonoCd_W5Regular_11">FILENAME</samp>的值是<samp
    class="SANS_TheSansMonoCd_W5Regular_11">211sfbay.zip</samp>。在这个循环中运行的代码等同于以下命令：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The second time the code loops, it runs the same code with <samp class="SANS_TheSansMonoCd_W5Regular_11">acprlea.zip</samp>
    as the <samp class="SANS_TheSansMonoCd_W5Regular_11">FILENAME</samp> value, and
    so on.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 第二次代码循环时，它以<samp class="SANS_TheSansMonoCd_W5Regular_11">acprlea.zip</samp>作为<FILENAME</samp>的值，依此类推。
- en: 'Change to your *BlueLeaks* folder. On my Mac, I do this by running the following
    command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到你的*BlueLeaks*文件夹。在我的Mac上，我通过运行以下命令来完成此操作：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, make this shell script executable and run it as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使这个Shell脚本具有可执行权限并运行它，方法如下：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: These commands assume that your *exercises* folder is in the same folder as
    the *BlueLeaks* folder. The relative path to your *exercises* folder is *../exercises*,
    and the relative path to the shell script you just saved is *../exercises/chapter-4/exercise-4-1-unzip.sh*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令假设你的 *exercises* 文件夹与 *BlueLeaks* 文件夹位于同一目录下。你 *exercises* 文件夹的相对路径是 *../exercises*，而你刚刚保存的
    shell 脚本的相对路径是 *../exercises/chapter-4/exercise-4-1-unzip.sh*。
- en: After you run these commands, your script should begin unzipping all 168 BlueLeaks
    files. Sit back, relax, and perhaps enjoy a beverage while you wait for it to
    finish, which could take hours.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这些命令后，你的脚本应该会开始解压所有 168 个 BlueLeaks 文件。坐下来，放松一下，或许喝点饮料，等待它完成，可能需要几个小时。
- en: If you’re not using Windows, skip ahead to the “Organize Your Files” section
    on page 93. Otherwise, read on.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不是使用 Windows，请跳过并直接查看第93页的“整理你的文件”部分。否则，请继续阅读。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Unzip Files on Windows</samp>
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">在 Windows 上解压文件</samp>
- en: Unzipping files in WSL from a USB disk formatted for Windows might be *very*
    slow, due to WSL performance problems. Fortunately, there’s a much faster way
    to unzip all 168 files in BlueLeaks, using PowerShell and a program called 7-Zip.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 从为 Windows 格式化的 USB 磁盘在 WSL 中解压文件可能会*非常*慢，因为 WSL 存在性能问题。幸运的是，有一种更快速的方法可以使用 PowerShell
    和一个叫做 7-Zip 的程序来解压 BlueLeaks 中的全部 168 个文件。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Install 7-Zip</samp>
  id: totrans-56
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">安装 7-Zip</samp>
- en: The open source Windows archiving program 7-Zip lets you extract various types
    of compressed files*.* Download and install 7-Zip from [*https://<wbr>www<wbr>.7<wbr>-zip<wbr>.org*](https://www.7-zip.org).
    You’ll receive a warning saying that the program is made by an unknown publisher,
    but it’s safe to install as long as you’ve downloaded it from the official website.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 开源 Windows 压缩程序 7-Zip 允许你解压各种类型的压缩文件*.* 从[*https://<wbr>www<wbr>.7<wbr>-zip<wbr>.org*](https://www.7-zip.org)
    下载并安装 7-Zip。你会收到一个警告，提示该程序来自一个未知的发布者，但只要你是从官方网站下载的，安装是安全的。
- en: After you install 7-Zip, you can use its *7z.exe* program to extract files directly
    from PowerShell. By default, *7z.exe* should be located in *C:\Program Files\7-Zip\7z.exe*.
    However, to run the program from any directory, add *C:\Program Files\7-Zip* to
    your <samp class="SANS_TheSansMonoCd_W5Regular_11">Path</samp> environment variable.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 7-Zip 后，你可以直接通过 PowerShell 使用其*7z.exe*程序来解压文件。默认情况下，*7z.exe* 应该位于 *C:\Program
    Files\7-Zip\7z.exe*。然而，为了能够在任何目录下运行该程序，你需要将 *C:\Program Files\7-Zip* 添加到你的 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Path</samp> 环境变量中。
- en: '*Environment variables* are variables that already exist when you open your
    shell, as opposed to ones that you create in a <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop or by other methods. The <samp class="SANS_TheSansMonoCd_W5Regular_11">Path</samp>
    environment variable is a list of folders that contain programs. It contains some
    folders by default, but you can also add your own. When you run <samp class="SANS_TheSansMonoCd_W5Regular_11">7z</samp>,
    PowerShell looks in each folder listed in <samp class="SANS_TheSansMonoCd_W5Regular_11">Path</samp>
    and checks for a file called *7z.exe*, then runs that program for you.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*环境变量* 是你打开 shell 时已经存在的变量，不同于你在 <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    循环中或其他方式创建的变量。<samp class="SANS_TheSansMonoCd_W5Regular_11">Path</samp> 环境变量是包含程序的文件夹列表。默认情况下，它包含一些文件夹，但你也可以添加自己的文件夹。当你运行
    <samp class="SANS_TheSansMonoCd_W5Regular_11">7z</samp> 时，PowerShell 会检查 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Path</samp> 列表中的每个文件夹，并寻找一个名为 *7z.exe*
    的文件，然后运行该程序。'
- en: To add *7z.exe* to <samp class="SANS_TheSansMonoCd_W5Regular_11">Path</samp>,
    click **Start**, search for **environment variables**, and click **Edit the System
    Environment Variables**. In the window that opens, click **Environment Variables**,
    and you should see a window with lists of user variables and system variables.
    Double-click **Path** in the User Variables box, which should show you all of
    the folders stored in <samp class="SANS_TheSansMonoCd_W5Regular_11">Path</samp>.
    Click **New**, add *C:\Program Files\7-Zip*, and click **OK** to save. If you
    have a PowerShell window open, close PowerShell and open it again, forcing the
    shell to use the new changes to the <samp class="SANS_TheSansMonoCd_W5Regular_11">Path</samp>
    environment variable.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要将*7z.exe*添加到<samp class="SANS_TheSansMonoCd_W5Regular_11">Path</samp>，点击**开始**，搜索**环境变量**，然后点击**编辑系统环境变量**。在打开的窗口中，点击**环境变量**，你应该会看到一个包含用户变量和系统变量的窗口。双击**Path**（用户变量框中的Path），你将看到所有存储在<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Path</samp>中的文件夹。点击**新建**，添加*C:\Program
    Files\7-Zip*，然后点击**确定**保存。如果你有一个PowerShell窗口打开，关闭PowerShell并重新打开它，强制Shell使用更新后的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Path</samp>环境变量。
- en: You can now use the <samp class="SANS_TheSansMonoCd_W5Regular_11">7z</samp>
    command to run 7-Zip.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以使用<samp class="SANS_TheSansMonoCd_W5Regular_11">7z</samp>命令来运行7-Zip。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Unzip in PowerShell with 7-Zip</samp>
  id: totrans-62
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">在PowerShell中使用7-Zip解压</samp>
- en: 'In a PowerShell terminal, change to the *BlueLeaks* folder on your *datasets*
    USB disk. For example, on my computer, I run:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在PowerShell终端中，切换到你*datasets* USB磁盘上的*BlueLeaks*文件夹。例如，在我的电脑上，我运行：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, run the following PowerShell commands (this is the PowerShell version
    of the *exercise-4-1-unzip.sh* shell script in the previous subsection):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行以下PowerShell命令（这是前一小节中*exercise-4-1-unzip.sh* Shell脚本的PowerShell版本）：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The first line sets the PowerShell variable <samp class="SANS_TheSansMonoCd_W5Regular_11">$ZipFiles</samp>
    to the list of ZIP files it finds in the current folder, represented by the dot
    (<samp class="SANS_TheSansMonoCd_W5Regular_11">.</samp>). This is followed by
    a <samp class="SANS_TheSansMonoCd_W5Regular_11">foreach</samp> loop, which loops
    through this list, setting the variable <samp class="SANS_TheSansMonoCd_W5Regular_11">$ZipFile</samp>
    to the name of each file. The <samp class="SANS_TheSansMonoCd_W5Regular_11">7z</samp>
    command runs over and over again for each different filename, unzipping each file.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行将PowerShell变量<samp class="SANS_TheSansMonoCd_W5Regular_11">$ZipFiles</samp>设置为当前文件夹中找到的ZIP文件列表，由点（<samp
    class="SANS_TheSansMonoCd_W5Regular_11">.</samp>）表示。接下来是一个<samp class="SANS_TheSansMonoCd_W5Regular_11">foreach</samp>循环，它遍历此列表，将变量<samp
    class="SANS_TheSansMonoCd_W5Regular_11">$ZipFile</samp>设置为每个文件的名称。对于每个不同的文件名，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">7z</samp>命令会反复执行，解压每个文件。
- en: 'When I run these commands in my PowerShell terminal, I get the following output:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在PowerShell终端中运行这些命令时，我得到了以下输出：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Your PowerShell window should likewise begin unzipping all 168 BlueLeaks files.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你的PowerShell窗口应该同样开始解压所有168个BlueLeaks文件。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*Once you’re finished with this chapter, read [Appendix A](appendixA.xhtml)
    and implement one of the solutions it describes for avoiding WSL performance problems
    to make it easier to work with big datasets like BlueLeaks in Windows going forward.
    You’ll use WSL for the remainder of the book, so you’ll need a plan to resolve
    any issues you encounter.*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*完成本章后，阅读[附录A](appendixA.xhtml)，并实施其中描述的避免WSL性能问题的解决方案，以便将来在Windows中更容易处理像BlueLeaks这样的大型数据集。你将在本书剩余部分使用WSL，因此你需要一个解决遇到的任何问题的计划。*'
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Organize Your Files</samp>
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">组织你的文件</samp>
- en: Your *BlueLeaks* folder should now be full of both ZIP files and extracted folders.
    Now you’ll make a separate *BlueLeaks-extracted* folder for the extracted data
    and keep the ZIP files themselves in the *BlueLeaks* folder so that you can continue
    to seed the torrent with them if you like.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的*BlueLeaks*文件夹应该充满了ZIP文件和已解压的文件夹。现在你将创建一个单独的*BlueLeaks-extracted*文件夹用于存放已解压的数据，并将ZIP文件本身保存在*BlueLeaks*文件夹中，这样如果你愿意，可以继续用它们做种。
- en: 'Open a terminal (if you’re in Windows, switch to a WSL Ubuntu terminal again),
    change folders to your *datasets* USB disk, and run the following commands:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端（如果你在Windows中，重新切换到WSL Ubuntu终端），更改到你的*datasets* USB磁盘，并运行以下命令：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">mv</samp> command moves or
    renames files. On the first line, it renames the *BlueLeaks* folder *BlueLeaks-extracted*.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">mkdir</samp> command, which
    you used in [Chapter 3](chapter3.xhtml), creates a new empty folder called *BlueLeaks*.
    The third command moves all of the ZIP files in the *BlueLeaks-extracted* folder
    into the newly created *BlueLeaks* folder.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">mv</samp>命令用于移动或重命名文件。在第一行中，它将*BlueLeaks*文件夹重命名为*BlueLeaks-extracted*。你在[第3章](chapter3.xhtml)中使用过的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">mkdir</samp>命令创建了一个名为*BlueLeaks*的新空文件夹。第三个命令将所有ZIP文件从*BlueLeaks-extracted*文件夹移动到新创建的*BlueLeaks*文件夹中。
- en: Your *datasets* USB disk should now contain a folder called *BlueLeaks* with
    250GB of ZIP files, along with another folder called *BlueLeaks-extracted* with
    269GB of extracted hacked police data.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你的*数据集*USB磁盘现在应该包含一个名为*BlueLeaks*的文件夹，其中有250GB的ZIP文件，以及另一个名为*BlueLeaks-extracted*的文件夹，里面有269GB的提取出的被黑警察数据。
- en: <samp class="SANS_Futura_Std_Bold_B_11">How the Hacker Obtained the BlueLeaks
    Data</samp>
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">黑客是如何获取BlueLeaks数据的</samp>
- en: We don’t know how the hacker hacked and leaked the BlueLeaks files, but we can
    make an educated guess based on clues from the dataset.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不知道黑客是如何入侵并泄露BlueLeaks文件的，但我们可以根据数据集中的线索做出一个合理的猜测。
- en: Imagine that it’s June 6, 2020, less than two weeks after Minneapolis cop Derek
    Chauvin murdered George Floyd by kneeling on his neck for over nine minutes while
    Floyd struggled to breathe, triggering the summer’s Black Lives Matter uprising
    against police violence. Millions of people took to the streets to demand police
    accountability and the end of racist police violence in what was “the largest
    movement in the country’s history,” according to the *New York Times*.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 假设现在是2020年6月6日，也就是明尼阿波利斯的警察德里克·肖文跪压乔治·弗洛伊德脖子超过九分钟，导致弗洛伊德窒息而死，引发了夏季的黑人的命也是命运动（Black
    Lives Matter）对抗警察暴力的浪潮的不到两周时间。根据*纽约时报*的报道，数百万的人走上街头，要求警方负责，结束种族主义警察暴力，成为了“美国历史上最大的一次运动”。
- en: Now imagine you’re a hacktivist. In addition to confronting police in the streets,
    you’re confronting them on the internet. Using OSINT, you’ve discovered that hundreds
    of police websites use the same shoddy web application developed by the Texas
    web development firm Netsential. All these sites run on Windows, use Microsoft’s
    Internet Information Services (IIS) web server software, and are programmed using
    Microsoft’s web framework ASP.NET. They’re also all hosted from IP addresses in
    the same data center in Texas.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设你是一个黑客活动分子（hacktivist）。除了在街头与警察对抗外，你还在互联网上与他们对抗。通过使用开放源情报（OSINT），你发现成百上千的警察网站使用了由德州的网络开发公司Netsential开发的同一个劣质Web应用程序。这些网站都运行在Windows上，使用微软的Internet
    Information Services（IIS）Web服务器软件，并采用微软的Web框架ASP.NET进行编程。它们也都托管在德州同一数据中心的IP地址上。
- en: 'After you spend some time poking around one of these sites, the Arizona High
    Intensity Drug Trafficking Area (AZHIDTA), you find what you were looking for:
    a *remote code execution vulnerability*, a type of bug that lets you run commands
    on a remote server, like the Windows server running the AZHIDTA website. (My guess
    is that the vulnerability started with SQL injection, a technology beyond the
    scope of this book.)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在你花了一些时间浏览其中一个网站后，发现了你在找的东西：一个*远程代码执行漏洞*，这是一种让你可以在远程服务器上运行命令的漏洞，比如运行AZHIDTA网站的Windows服务器。（我的猜测是，这个漏洞最初是通过SQL注入攻击的，这种技术超出了本书的范围。）
- en: <samp class="SANS_Dogma_OT_Bold_B_21">WARNING</samp>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">警告</samp>
- en: '*I’m about to tell you about a potential URL for a hacking tool left behind
    by the hacker, but don’t actually try loading it in your browser because it might
    be illegal. Attempting to access someone else’s hacking tools is definitely a
    legal gray area.*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*我现在要告诉你一个潜在的黑客工具URL，它是由黑客遗留的，但不要实际在浏览器中加载它，因为它可能是非法的。尝试访问他人的黑客工具绝对是一个法律灰色地带。*'
- en: To open a shell on this web server, you use a *web shell*, a web page that,
    when you submit a form with a command in it, runs that command on the web server
    and responds with its output. Using the vulnerability you discovered, you save
    a web shell into a file called *blug.aspx* on the web server’s disk. Loading */blug.aspx*
    on the [*https://<wbr>www<wbr>.azhidta<wbr>.org*](https://www.azhidta.org) website
    in your browser allows you to run whatever commands you want on the server.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要在此 Web 服务器上打开外壳，你需要使用 *Web 外壳*，即一个 Web 页面，当你提交包含命令的表单时，它会在 Web 服务器上运行该命令并返回其输出。通过利用你发现的漏洞，你将
    Web 外壳保存到服务器磁盘上的 *blug.aspx* 文件中。在浏览器中加载 */blug.aspx*，访问 [*https://<wbr>www<wbr>.azhidta<wbr>.org*](https://www.azhidta.org)
    网站，你就能在服务器上运行任何你想要的命令。
- en: The web shell *blug.aspx* is included in the BlueLeaks dataset. In order to
    understand how this web shell works, I set up a Windows virtual machine with an
    IIS server to test it, as shown in [Figure 4-1](#fig4-1). The left side of the
    screenshot is the shell (in which I ran the command <samp class="SANS_TheSansMonoCd_W5Regular_11">dir
    c:\</samp>). The right side let me browse the server’s filesystem and upload new
    files.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Web 外壳 *blug.aspx* 被包含在 BlueLeaks 数据集中。为了了解该 Web 外壳的工作原理，我设置了一台带有 IIS 服务器的 Windows
    虚拟机进行测试，如 [图 4-1](#fig4-1) 所示。截图的左侧是外壳（我在其中运行了命令 <samp class="SANS_TheSansMonoCd_W5Regular_11">dir
    c:\</samp>）。右侧则允许我浏览服务器的文件系统并上传新文件。
- en: '![This screenshot shows the “ASPX Shell” web shell from BlueLeaks, loaded in
    a web browser in Windows.](Images/Figure4-1.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![此截图展示了 BlueLeaks 中的 “ASPX Shell” Web 外壳，已在 Windows 的 Web 浏览器中加载。](Images/Figure4-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-1: Testing the</samp>
    <samp class="SANS_Futura_Std_Book_11">blug.aspx</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">web
    shell in a Windows VM</samp>'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-1：在 Windows 虚拟机中测试</samp>
    <samp class="SANS_Futura_Std_Book_11">blug.aspx</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">Web
    外壳</samp>
- en: 'I don’t know for sure if this is how the BlueLeaks hack happened, but I think
    it’s very likely. While researching BlueLeaks, I found the following web shell
    files, all timestamped late on June 6, 2020, making them among the most recently
    created files in the dataset:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我不确定 BlueLeaks 被黑的具体方式，但我认为它很有可能是通过这种方式发生的。在研究 BlueLeaks 时，我发现了以下 Web 外壳文件，所有文件的时间戳都显示在
    2020 年 6 月 6 日晚些时候，成为数据集中最近创建的文件之一：
- en: '***azhidta/ntdaddy.aspx*** The Classic ASP web shell NTDaddy, developed around
    2001 by a hacker named obzerve'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '***azhidta/ntdaddy.aspx*** Classic ASP Web 外壳 NTDaddy，由一位名叫 obzerve 的黑客于 2001
    年左右开发'
- en: '***azhidta/blug.aspx*** The ASP.NET web shell called ASPX Shell, developed
    in 2007 by a hacker named LT'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '***azhidta/blug.aspx*** ASP.NET 网络外壳，名为 ASPX Shell，由一位名叫 LT 的黑客于 2007 年开发'
- en: '***azhidta/pscp64.exe*** A program that comes with PuTTY, a popular Windows
    tool for securely copying files to and from remote servers'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '***azhidta/pscp64.exe*** 一个与 PuTTY 一同提供的程序，PuTTY 是一款流行的 Windows 工具，用于安全地将文件从远程服务器上传和下载'
- en: '***icefishx/7z.exe*** A copy of the 7-Zip compression and extraction program'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '***icefishx/7z.exe*** 7-Zip 压缩与解压程序的一个副本'
- en: My guess is that the hacktivist first tried to create a *ntdaddy.aspx* web shell,
    but found that it didn’t work because it was developed using an earlier version
    of ASP called Classic ASP, while the BlueLeaks site used the modern version, ASP.NET.
    They then created the *blug.aspx* web shell instead, used that shell to upload
    *pscp64.exe* and *7z.exe*, used *7z.exe* to compress all of the files for a given
    police website, and uploaded that data to their own server with *pscp64.exe*.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我的猜测是，黑客活动者首先尝试创建一个 *ntdaddy.aspx* Web 外壳，但发现它无法工作，因为该外壳是使用较早版本的 ASP（即 Classic
    ASP）开发的，而 BlueLeaks 网站使用的是现代版 ASP.NET。于是，他们创建了 *blug.aspx* Web 外壳，使用该外壳上传了 *pscp64.exe*
    和 *7z.exe*，然后用 *7z.exe* 压缩了某个警察网站的所有文件，最后通过 *pscp64.exe* 将这些数据上传到他们自己的服务器。
- en: After manually hacking one of the BlueLeaks sites, the hacker likely automated
    the process for the rest of the BlueLeaks sites. Perhaps they created a shell
    script that used cURL instead of a web browser to perform the same steps. They
    could have run that script in a <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop targeting all 251 websites, uploading hundreds of gigabytes of data to themselves,
    in a single Saturday evening. They then likely forgot to delete the *blug.aspx*,
    *pscp64.exe*, *7z.exe*, and *ntdaddy.aspx* files before submitting the dataset
    to DDoSecrets.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在手动攻破一个 BlueLeaks 网站后，黑客可能为其余的 BlueLeaks 网站自动化了这一过程。也许他们创建了一个使用 cURL 而非 web
    浏览器来执行相同步骤的 shell 脚本。他们可能在一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    循环中运行该脚本，针对所有 251 个网站，在一个周六晚上向自己上传了数百 GB 的数据。然后他们可能忘记删除 *blug.aspx*、*pscp64.exe*、*7z.exe*
    和 *ntdaddy.aspx* 文件，就将数据集提交给 DDoSecrets。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Exercise 4-2: Explore BlueLeaks on
    the Command Line</samp>'
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_21">练习 4-2：在命令行中探索 BlueLeaks</samp>
- en: In this exercise, you’ll start exploring the contents of your unzipped BlueLeaks
    files, using commands and advanced shell features that let you quickly measure
    file and folder size and sort and count lines of output.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，你将开始探索解压后的 BlueLeaks 文件内容，使用命令和高级 shell 功能，可以快速测量文件和文件夹的大小，并对输出的行进行排序和计数。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Calculate How Much
    Disk Space Folders Use</samp>
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">计算文件夹占用的磁盘空间</samp>
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">du</samp> command (short for
    “disk usage”) is a powerful tool for assessing a new dataset. Linux and macOS
    come with slightly different versions of <samp class="SANS_TheSansMonoCd_W5Regular_11">du</samp>.
    The Linux version, which is part of a software package called GNU coreutils, is
    better and more up to date at the time of writing, so you’ll use it for this exercise.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">du</samp> 命令（"disk usage" 的缩写）是一个强大的工具，用于评估新的数据集。Linux
    和 macOS 上的 <samp class="SANS_TheSansMonoCd_W5Regular_11">du</samp> 命令版本略有不同。Linux
    版本是一个名为 GNU coreutils 的软件包的一部分，它在撰写本文时更新且更好，因此本练习中将使用该版本。
- en: Users of Linux and Windows with WSL should already have the correct built-in
    <samp class="SANS_TheSansMonoCd_W5Regular_11">du</samp> tool. If you’re using
    macOS, run <samp class="SANS_TheSansMonoCd_W7Bold_B_11">brew install coreutils</samp>
    in the terminal to install coreutils. After this, the <samp class="SANS_TheSansMonoCd_W5Regular_11">du</samp>
    command will run the macOS version of the tool, while the <samp class="SANS_TheSansMonoCd_W5Regular_11">gdu</samp>
    command will run the coreutils version that you just installed. In the following
    commands, macOS users should replace <samp class="SANS_TheSansMonoCd_W5Regular_11">du</samp>
    with <samp class="SANS_TheSansMonoCd_W5Regular_11">gdu</samp>.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Linux 和 Windows 的 WSL 用户应该已经拥有正确的内置 <samp class="SANS_TheSansMonoCd_W5Regular_11">du</samp>
    工具。如果你使用的是 macOS，请在终端中运行 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">brew install
    coreutils</samp> 来安装 coreutils。安装后，<samp class="SANS_TheSansMonoCd_W5Regular_11">du</samp>
    命令将运行 macOS 版本的工具，而 <samp class="SANS_TheSansMonoCd_W5Regular_11">gdu</samp> 命令将运行你刚安装的
    coreutils 版本。在接下来的命令中，macOS 用户应将 <samp class="SANS_TheSansMonoCd_W5Regular_11">du</samp>
    替换为 <samp class="SANS_TheSansMonoCd_W5Regular_11">gdu</samp>。
- en: 'To find out how much space the extracted BlueLeaks dataset takes, open your
    terminal and run this command, using the path to the *BlueLeaks-extracted* folder
    on your computer:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解提取后的 BlueLeaks 数据集占用了多少空间，请打开终端并运行以下命令，使用你计算机上 *BlueLeaks-extracted* 文件夹的路径：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">-s</samp> argument in this
    command (short for <samp class="SANS_TheSansMonoCd_W5Regular_11">--summarize</samp>)
    displays the total disk space of a folder rather than how much space each file
    inside it takes up. The <samp class="SANS_TheSansMonoCd_W5Regular_11">-h</samp>
    argument (short for <samp class="SANS_TheSansMonoCd_W5Regular_11">--human-readable</samp>)
    shows file sizes in units like kilobytes, megabytes, or gigabytes, rather than
    in terms of system blocks (a unit that changes depending on how your disk is set
    up). Finally, the <samp class="SANS_TheSansMonoCd_W5Regular_11">--apparent-size</samp>
    argument shows you how big the files actually are, as opposed to how much space
    they take up on your disk.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令中的 <samp class="SANS_TheSansMonoCd_W5Regular_11">-s</samp> 参数（即 <samp class="SANS_TheSansMonoCd_W5Regular_11">--summarize</samp>
    的缩写）显示的是文件夹的总磁盘空间，而不是每个文件所占的空间。<samp class="SANS_TheSansMonoCd_W5Regular_11">-h</samp>
    参数（即 <samp class="SANS_TheSansMonoCd_W5Regular_11">--human-readable</samp> 的缩写）以千字节、兆字节或千兆字节等单位显示文件大小，而不是以系统块为单位（系统块的大小取决于磁盘的设置）。最后，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">--apparent-size</samp> 参数显示的是文件的实际大小，而不是它们在磁盘上占用的空间。
- en: The command checks the size of every file in BlueLeaks and adds them all together,
    so it takes a while to run. When it’s done, it should tell you that the *BlueLeaks-extracted*
    folder takes up 269GB.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令会检查 BlueLeaks 中每个文件的大小，并将它们加在一起，因此执行需要一些时间。当它完成时，它应该会告诉你 *BlueLeaks-extracted*
    文件夹占用了 269GB 的空间。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-106
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*In addition to using <samp class="mono">-h</samp> to generate human-readable
    units, you can specify which units you want to use. The <samp class="mono">-b</samp>
    argument, short for <samp class="mono">--bytes</samp>, shows file sizes in bytes,
    <samp class="mono">-k</samp> shows them in kilobytes, and <samp class="mono">-m</samp>
    shows them in megabytes.*'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '*除了使用 <samp class="mono">-h</samp> 来生成易读的单位外，你还可以指定想要使用的单位。<samp class="mono">-b</samp>
    参数是 <samp class="mono">--bytes</samp> 的缩写，它以字节为单位显示文件大小，<samp class="mono">-k</samp>
    以千字节显示，<samp class="mono">-m</samp> 以兆字节显示。*'
- en: 'Next, you’ll measure the size of an individual folder in BlueLeaks. Change
    to your *BlueLeaks-extracted* folder; for example, I’d run <samp class="SANS_TheSansMonoCd_W5Regular_11">cd
    /media/micah/datasets/BlueLeaks-extracted</samp> on my Linux computer. From there,
    run the following command to measure the size of the *ncric* folder, which contains
    documents from the Northern California Regional Intelligence Center (NCRIC), the
    fusion center I’ve spent the most time researching:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将测量 BlueLeaks 中某个文件夹的大小。切换到你的 *BlueLeaks-extracted* 文件夹；例如，在我的 Linux 电脑上，我会运行
    <samp class="SANS_TheSansMonoCd_W5Regular_11">cd /media/micah/datasets/BlueLeaks-extracted</samp>。然后，运行以下命令来测量
    *ncric* 文件夹的大小，该文件夹包含来自北加州地区情报中心（NCRIC）的文档，这是我花费最多时间研究的融合中心：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The output should tell you that the *ncric* folder takes 19GB.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该会告诉你 *ncric* 文件夹占用了 19GB 的空间。
- en: 'To find out the size of each folder in BlueLeaks, you could run the <samp class="SANS_TheSansMonoCd_W5Regular_11">du
    -sh --apparent-size</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">path</samp>
    command for each folder, but it’s quicker to use another <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop. Run the following code in the terminal:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要找出 BlueLeaks 中每个文件夹的大小，你可以为每个文件夹运行 <samp class="SANS_TheSansMonoCd_W5Regular_11">du
    -sh --apparent-size</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">path</samp>
    命令，但使用另一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> 循环会更快。运行以下代码：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As shown here, you can run multiple commands on the same line by separating
    them with semicolons (<samp class="SANS_TheSansMonoCd_W5Regular_11">;</samp>).
    This one-liner loops through the output of the <samp class="SANS_TheSansMonoCd_W5Regular_11">ls</samp>
    command, which, since you’re currently in the *BlueLeaks-extracted* folder, is
    the name of each BlueLeaks folder. The code stores these names in the <samp class="SANS_TheSansMonoCd_W5Regular_11">FOLDER</samp>
    variable and then, inside each iteration of the loop, runs the <samp class="SANS_TheSansMonoCd_W5Regular_11">du
    -sh --apparent-size $FOLDER</samp> command.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如这里所示，你可以通过使用分号 (<samp class="SANS_TheSansMonoCd_W5Regular_11">;</samp>) 将多个命令放在同一行上执行。这个单行命令会循环执行
    <samp class="SANS_TheSansMonoCd_W5Regular_11">ls</samp> 命令的输出，因为你当前在 *BlueLeaks-extracted*
    文件夹中，所以输出的是每个 BlueLeaks 文件夹的名称。代码将这些名称存储在 <samp class="SANS_TheSansMonoCd_W5Regular_11">FOLDER</samp>
    变量中，然后在循环的每次迭代中，运行 <samp class="SANS_TheSansMonoCd_W5Regular_11">du -sh --apparent-size
    $FOLDER</samp> 命令。
- en: 'Here are the first few lines of output:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出的前几行：
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This shows you how much disk space each folder uses.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示每个文件夹使用的磁盘空间。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Use Pipes and Sort
    Output</samp>
  id: totrans-117
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">使用管道并排序输出</samp>
- en: You now know the size of each folder in the BlueLeaks dataset. Next, you’ll
    sort the 168 folders in order of disk space. By determining which folders are
    the largest, you can quickly tell which fusion centers have the most data and
    therefore are probably the biggest or most active.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在知道了 BlueLeaks 数据集中每个文件夹的大小。接下来，你将按磁盘空间对 168 个文件夹进行排序。通过确定哪些文件夹最大，你可以快速判断出哪些融合中心拥有最多的数据，因此它们可能是最大或最活跃的。
- en: 'To sort this list of folders by the smallest file size to the largest, use
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">sort</samp> command, which takes
    a list of text lines and, by default, sorts them *alphanumerically*; that is,
    text is sorted alphabetically and numbers are sorted by their first numeral. For
    example, the list <samp class="SANS_TheSansMonoCd_W5Regular_11">file1</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">file10</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">file2</samp>,
    …, <samp class="SANS_TheSansMonoCd_W5Regular_11">file9</samp> is sorted alphanumerically:
    since text lines are sorted one character at a time, and since <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    is less than <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">file10</samp>
    comes before <samp class="SANS_TheSansMonoCd_W5Regular_11">file2</samp>.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要按文件大小从小到大排序文件夹列表，可以使用 `<samp class="SANS_TheSansMonoCd_W5Regular_11">sort</samp>`
    命令，它会接受一系列文本行，并默认按*字母数字*顺序对它们进行排序；也就是说，文本按字母顺序排序，数字按它们的首个数字排序。例如，列表 `<samp class="SANS_TheSansMonoCd_W5Regular_11">file1</samp>`、`<samp
    class="SANS_TheSansMonoCd_W5Regular_11">file10</samp>`、`<samp class="SANS_TheSansMonoCd_W5Regular_11">file2</samp>`
    等等，将按字母数字顺序排序：由于文本行是逐字符排序的，并且因为 `<samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>`
    小于 `<samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>`，所以 `<samp class="SANS_TheSansMonoCd_W5Regular_11">file10</samp>`
    排在 `<samp class="SANS_TheSansMonoCd_W5Regular_11">file2</samp>` 之前。
- en: To sort your BlueLeaks files by file size, modify the command with the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">-h</samp> (<samp class="SANS_TheSansMonoCd_W5Regular_11">--human-numeric-sort</samp>)
    argument. This argument pays attention to the *value* of numbers, not just characters,
    so it correctly places smaller numerical values before larger ones. It also takes
    file size units into account, meaning it will place 2MB before 1GB, even though
    2 is numerically greater than 1.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要按文件大小对 BlueLeaks 文件进行排序，可以通过 `<samp class="SANS_TheSansMonoCd_W5Regular_11">-h</samp>`
    (`<samp class="SANS_TheSansMonoCd_W5Regular_11">--human-numeric-sort</samp>`)
    参数来修改命令。此参数会考虑数字的*值*，而不仅仅是字符，从而正确地将较小的数值排在较大的数值之前。它还会考虑文件大小单位，这意味着它会将 2MB 排在 1GB
    之前，尽管 2 在数值上大于 1。
- en: 'In shell scripting, the *pipe* operator (<samp class="SANS_TheSansMonoCd_W5Regular_11">|</samp>)
    lets you take the output of a command to the left of the operator and pipe it
    into the command on the right. When you pipe input into the <samp class="SANS_TheSansMonoCd_W5Regular_11">sort</samp>
    command, it outputs a sorted version of that input. Run the <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop from the previous subsection, this time piping the output into <samp class="SANS_TheSansMonoCd_W5Regular_11">sort</samp>:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在 shell 脚本中，*管道* 操作符 (`<samp class="SANS_TheSansMonoCd_W5Regular_11">|</samp>`)
    让你将位于操作符左侧的命令输出传递给右侧的命令。当你将输入通过管道传递给 `<samp class="SANS_TheSansMonoCd_W5Regular_11">sort</samp>`
    命令时，它会输出排序后的输入版本。运行上一节中的 `<samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>`
    循环，这次将输出通过管道传递给 `<samp class="SANS_TheSansMonoCd_W5Regular_11">sort</samp>`：
- en: '[PRE22]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This line first runs the <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop that measures the space each BlueLeaks folder takes up. The output of this
    code is a list of lines of text, where each line starts with the human-readable
    size of a folder. Piping those lines of text as input into the <samp class="SANS_TheSansMonoCd_W5Regular_11">sort
    -h</samp> command sorts those lines numerically while paying attention to the
    file size units.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行首先运行 `<samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>` 循环，测量每个 BlueLeaks
    文件夹所占用的空间。此代码的输出是一个文本行的列表，其中每行以文件夹的人类可读大小开始。将这些文本行作为输入传递给 `<samp class="SANS_TheSansMonoCd_W5Regular_11">sort
    -h</samp>` 命令后，它会按数字顺序对这些行进行排序，同时考虑文件大小单位。
- en: 'Your output should look like this:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你的输出应如下所示：
- en: '[PRE23]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The folders that have the least data should be at the top: *miacxold*, *ncric-history-good*,
    and *ncricSteveBackup* contain only empty subfolders. The *repo* folder, the largest
    folder in BlueLeaks, should appear at the bottom of the list, right after *miacx*,
    the second-largest folder.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 数据最少的文件夹应该排在最前面：*miacxold*、*ncric-history-good* 和 *ncricSteveBackup* 仅包含空的子文件夹。*repo*
    文件夹是 BlueLeaks 中最大的文件夹，应该排在列表的最后，紧跟在 *miacx* 之后，*miacx* 是第二大文件夹。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Create an Inventory
    of Filenames in a Dataset</samp>
  id: totrans-127
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">创建数据集中文件名的清单</samp>
- en: When you’re working with an enormous dataset like BlueLeaks, it’s helpful to
    create an inventory of all of the files it contains by listing them in a text
    file. This way you can easily count the number of files in the dataset or search
    for filenames without having to go through the much slower process of looping
    through the dataset itself.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当你处理像 BlueLeaks 这样庞大的数据集时，创建一个包含所有文件的清单是非常有帮助的，可以将文件列出在一个文本文件中。这样，你就可以轻松地计算数据集中的文件数量，或者在不必经过更慢的循环处理数据集过程的情况下搜索文件名。
- en: 'You can create this inventory with the <samp class="SANS_TheSansMonoCd_W5Regular_11">find</samp>
    command, which outputs a list of files and folders in a folder. From within the
    *BlueLeaks-extracted* folder, run the following command to list all of the files
    in BlueLeaks:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">find</samp> 命令来创建此清单，它会输出文件夹中所有文件和文件夹的列表。在
    *BlueLeaks-extracted* 文件夹中，运行以下命令来列出 BlueLeaks 中的所有文件：
- en: '[PRE24]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The first argument after <samp class="SANS_TheSansMonoCd_W5Regular_11">find</samp>
    is the folder whose contents you want to list. This command uses a dot to find
    files in the current folder, but you could use any relative or absolute path.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">-type f</samp> arguments filters
    the list so it includes only files. (To include only folders, add the <samp class="SANS_TheSansMonoCd_W5Regular_11">-type
    d</samp> arguments.)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">find</samp> 后的第一个参数是你想要列出其内容的文件夹。此命令使用点号来查找当前文件夹中的文件，但你也可以使用任何相对或绝对路径。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">-type f</samp> 参数会筛选列表，使其只包括文件。（要只包括文件夹，请添加
    <samp class="SANS_TheSansMonoCd_W5Regular_11">-type d</samp> 参数。）
- en: 'When you run this command, the names of the many files in BlueLeaks should
    start rapidly scrolling across your terminal. To make the output more manageable,
    run the command again, this time redirecting the output into the file *../BlueLeaks-filenames.txt*:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个命令时，BlueLeaks 中的众多文件名应该会开始迅速滚动显示在你的终端上。为了让输出更易于管理，再次运行该命令，这次将输出重定向到 *../BlueLeaks-filenames.txt*
    文件：
- en: '[PRE25]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As discussed in [Chapter 3](chapter3.xhtml), redirection tells your shell to
    take the output from the left side of the redirection operator (<samp class="SANS_TheSansMonoCd_W5Regular_11">></samp>)
    and save it into the file at the path you specify on the right. In this case,
    the shell sends the list of filenames from the <samp class="SANS_TheSansMonoCd_W5Regular_11">find</samp>
    command to the *BlueLeaks-filenames.txt* file on your *datasets* USB disk, rather
    than displaying the filenames across your terminal.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在[第3章](chapter3.xhtml)中讨论的，重定向指示你的 shell 将重定向操作符左侧的输出（<samp class="SANS_TheSansMonoCd_W5Regular_11">></samp>）保存到你在右侧指定的文件路径中。在这种情况下，shell
    将 <samp class="SANS_TheSansMonoCd_W5Regular_11">find</samp> 命令返回的文件名列表发送到你 *datasets*
    USB 磁盘上的 *BlueLeaks-filenames.txt* 文件中，而不是将文件名显示在终端上。
- en: 'To read through these filenames at your leisure, open *BlueLeaks-filenames.txt*
    in VS Code by running this command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要随时阅读这些文件名，请通过运行以下命令在 VS Code 中打开 *BlueLeaks-filenames.txt*：
- en: '[PRE26]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: It’s easier to slowly scroll through these files in your text editor, but there
    are too many to count with the naked eye.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑器中缓慢滚动这些文件更容易，但文件太多，无法用肉眼计数。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Count the Files in
    a Dataset</samp>
  id: totrans-138
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">计算数据集中的文件数量</samp>
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">wc</samp> command takes some
    input and tells you how many characters, words, or lines it contains. When used
    with the <samp class="SANS_TheSansMonoCd_W5Regular_11">-l</samp> (or <samp class="SANS_TheSansMonoCd_W5Regular_11">--lines</samp>)
    argument, it counts the number of lines. To count the lines in the *BlueLeaks-filenames.txt*
    file you created, and by extension count the number of files in BlueLeaks, run
    the following command:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">wc</samp> 命令接受输入并告诉你包含多少字符、单词或行。当与
    <samp class="SANS_TheSansMonoCd_W5Regular_11">-l</samp>（或 <samp class="SANS_TheSansMonoCd_W5Regular_11">--lines</samp>）参数一起使用时，它会计算行数。要计算你创建的
    *BlueLeaks-filenames.txt* 文件中的行数，从而间接得出 BlueLeaks 中的文件数量，可以运行以下命令：
- en: '[PRE27]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">cat</samp> command outputs
    the contents of a file—in this case, *BlueLeaks-filenames.txt*. Instead of displaying
    it, the command pipes the output into <samp class="SANS_TheSansMonoCd_W5Regular_11">wc</samp>
    to count the number of lines that it contains. It should tell you that there are
    just over *one million* files in BlueLeaks.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">cat</samp> 命令输出文件内容——在本例中是 *BlueLeaks-filenames.txt*。它不会直接显示文件内容，而是将输出传递给
    <samp class="SANS_TheSansMonoCd_W5Regular_11">wc</samp>，以计算其中的行数。它应该会告诉你，BlueLeaks
    中大约有 *一百万* 个文件。
- en: 'Another way to get the same result is to run the <samp class="SANS_TheSansMonoCd_W5Regular_11">find</samp>
    command from the previous section again, and pipe its output into <samp class="SANS_TheSansMonoCd_W5Regular_11">wc</samp>,
    like this:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 获取相同结果的另一种方法是再次运行前一节中的 <samp class="SANS_TheSansMonoCd_W5Regular_11">find</samp>
    命令，并将其输出传递给 <samp class="SANS_TheSansMonoCd_W5Regular_11">wc</samp>，像这样：
- en: '[PRE28]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: That command takes longer to run, though, since it searches through the whole
    dataset again (press CTRL-C to cancel this command before it finishes).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个命令需要更长的时间来运行，因为它会再次搜索整个数据集（在命令完成之前，按 CTRL-C 取消该命令）。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Exercise 4-3: Find Revelations in
    BlueLeaks with grep</samp>'
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_21">练习 4-3：使用 grep 在 BlueLeaks 中查找揭露信息</samp>
- en: 'In the summer of 2020, while American society was going through a long-due
    reckoning about the scale of racist police killings, right-wing media (and police)
    instead focused on the dangers of the protesters themselves. They lumped the modern
    civil rights movement into two categories: “Black Lives Matter” and “antifa,”
    the latter a label used by antifascist activists since the 1930s. The modern American
    antifa movement grew in response to the 2016 election of Donald Trump and the
    mainstreaming of white supremacy in the US.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 2020 年夏天，当美国社会正在经历对种族主义警察杀戮规模的长期反思时，右翼媒体（和警察）却将焦点放在了抗议者本身的危险上。他们将现代民权运动分为两个类别：“黑人的命也是命”和“antifa”，后者是反法西斯主义者自
    1930 年代以来使用的标签。现代美国 antifa 运动是对 2016 年唐纳德·特朗普当选和美国白人至上主义主流化的反应。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp> command will filter
    input for keywords, letting you search the content of datasets for newsworthy
    information. In this exercise, you’ll use <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp>
    to find out what police had to say about antifa during the protests.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp> 命令将根据关键字过滤输入，帮助你搜索数据集中的新闻信息。在本练习中，你将使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp> 来了解警察在抗议活动中如何看待 antifa。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Filter for Documents
    Mentioning Antifa</samp>
  id: totrans-148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">筛选提到 Antifa 的文档</samp>
- en: 'You’ll start by grepping your list of filenames to find any that include the
    word *antifa*. From the *BlueLeaks-extracted* folder, search the *BlueLeaks-filenames.txt*
    file that you created in Exercise 4-2 by running the following command:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你将从 grepping 文件名列表开始，查找包含 *antifa* 一词的文件。从 *BlueLeaks-extracted* 文件夹中，运行以下命令来搜索你在练习
    4-2 中创建的 *BlueLeaks-filenames.txt* 文件：
- en: '[PRE29]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This command pipes the output of <samp class="SANS_TheSansMonoCd_W5Regular_11">cat
    ../BlueLeaks-filenames.txt</samp>, which is a list of a million filenames, into
    <samp class="SANS_TheSansMonoCd_W5Regular_11">grep antifa</samp>. This should
    filter the huge list of filenames to show you only those that include the word
    *antifa*. However, it returns no results.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将 <samp class="SANS_TheSansMonoCd_W5Regular_11">cat ../BlueLeaks-filenames.txt</samp>
    的输出，也就是包含一百万个文件名的列表，传递给 <samp class="SANS_TheSansMonoCd_W5Regular_11">grep antifa</samp>。这应该会过滤出仅包含
    *antifa* 一词的文件名。然而，它没有返回任何结果。
- en: 'Since the <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp> command
    is case sensitive, try again using the <samp class="SANS_TheSansMonoCd_W5Regular_11">-i</samp>
    (or <samp class="SANS_TheSansMonoCd_W5Regular_11">--ignore-case</samp>) argument:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp> 命令区分大小写，可以再次尝试，使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">-i</samp>（或 <samp class="SANS_TheSansMonoCd_W5Regular_11">--ignore-case</samp>）参数：
- en: '[PRE30]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'When I run this command, I get the following output:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当我运行这个命令时，我得到以下输出：
- en: '[PRE31]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This command returns 12 results, all files that have the term *antifa* in their
    filenames. The <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp> command
    might highlight your search terms in each line of output by coloring them differently;
    I’ve highlighted them here in bold. Open a few of the documents in this list to
    see what they contain.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令返回了 12 个结果，所有文件名中都包含 *antifa*（反法西斯）一词。<samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp>
    命令可能会通过改变颜色来突出显示输出中的搜索词；我在这里用粗体标记了它们。你可以打开列表中的几个文档，查看它们的内容。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-157
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*You can run BlueLeaks documents through Dangerzone if you like, but the risks
    are low with this dataset. These documents are now all public, so if any have
    tracking technology that lets the original file owner know someone is looking
    at the document, it doesn’t matter much. Given that these are hacked documents
    from police fusion centers, not attachments on phishing email messages or something
    similar, they’re also unlikely to be malicious.*'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你愿意，可以将 BlueLeaks 文档通过 Dangerzone 进行处理，但这个数据集的风险很低。这些文档现在都是公开的，因此如果其中有任何追踪技术能够让原始文件所有者知道有人在查看该文档，那也没有太大关系。鉴于这些文档是从警察融合中心被黑客窃取的，而不是钓鱼邮件的附件或类似的东西，它们也不太可能是恶意的。*'
- en: I often combine <samp class="SANS_TheSansMonoCd_W5Regular_11">find</samp> and
    <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp> to make lists of filenames
    and filter those lists down, which allows me to locate files on my computer more
    quickly and precisely than with my operating system’s graphical file search tools.
    For example, suppose you’re looking into the *azhidta* folder for the Arizona
    High Intensity Drug Trafficking Area site. To quickly find any documents that
    have the word *marijuana* in their filename, you could run <samp class="SANS_TheSansMonoCd_W5Regular_11">find
    azhidta | grep -i marijuana</samp>. To count the number of files with *marijuana*
    in the filenames, you could pipe all of that into the <samp class="SANS_TheSansMonoCd_W5Regular_11">wc
    -l</samp> command.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常将 <samp class="SANS_TheSansMonoCd_W5Regular_11">find</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp>
    结合使用，制作文件名列表并对其进行筛选，这样可以比操作系统的图形化文件搜索工具更快速、精确地在计算机上定位文件。例如，假设你正在查看 *azhidta* 文件夹中的亚利桑那州高强度毒品走私区站点。为了快速找到文件名中包含
    *marijuana*（大麻）一词的任何文档，你可以运行 <samp class="SANS_TheSansMonoCd_W5Regular_11">find
    azhidta | grep -i marijuana</samp>。要统计文件名中包含 *marijuana* 的文件数量，你可以将所有结果通过管道传递给
    <samp class="SANS_TheSansMonoCd_W5Regular_11">wc -l</samp> 命令。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Filter for Certain
    Types of Files</samp>
  id: totrans-160
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">筛选特定类型的文件</samp>
- en: 'In addition to searching for keywords like *antifa* or *marijuana*, <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp>
    can help you filter a list of filenames to include only certain file types. Grep
    for Microsoft Word documents, filenames that end in *.docx*, by running the following
    command:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 除了搜索像 *antifa* 或 *marijuana* 这样的关键字外，<samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp>
    还可以帮助你筛选文件名列表，仅包含特定的文件类型。要通过运行以下命令筛选 Microsoft Word 文档，即文件名以 *.docx* 结尾的文件，可以使用
    grep：
- en: '[PRE32]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This command uses <samp class="SANS_TheSansMonoCd_W5Regular_11">cat</samp>
    to display the list of filenames in BlueLeaks, then filters it down for those
    that contain *.docx*. You should see thousands of filenames scroll by. To learn
    exactly how many, run the command again, this time piping the output into <samp
    class="SANS_TheSansMonoCd_W5Regular_11">wc -l</samp>:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">cat</samp> 显示 BlueLeaks
    中文件名的列表，然后筛选出包含 *.docx* 的文件。你应该能看到成千上万个文件名滚动过去。若想精确了解数量，可以再次运行该命令，这次将输出通过管道传递给
    <samp class="SANS_TheSansMonoCd_W5Regular_11">wc -l</samp>：
- en: '[PRE33]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">wc</samp> command should tell
    you that the previous command had 8,861 results.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">wc</samp> 命令应告诉你，前一个命令有 8,861
    个结果。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Use grep with Regular
    Expressions</samp>
  id: totrans-166
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">使用带正则表达式的 grep</samp>
- en: If you scroll through the *.docx* filenames you just found, you’ll see that
    a few of them aren’t actually Word documents. For example, the filename *./arictexas/files/DDF/2014
    Austin City Limits Festival - APD Threat Overview.docx.pdf* contains *.docx* but
    is actually a PDF.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你浏览刚找到的*.docx*文件名，你会发现其中一些文件其实并不是Word文档。例如，文件名*./arictexas/files/DDF/2014
    Austin City Limits Festival - APD Threat Overview.docx.pdf*包含*.docx*，但实际上是一个PDF文件。
- en: When you use <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp>, you
    can pass a regular expression (regex for short) into it as an argument. A *regex*
    is a character or sequence of characters that defines a search pattern. For example,
    the caret character (<samp class="SANS_TheSansMonoCd_W5Regular_11">^</samp>) represents
    the beginning of a line, and the dollar sign character (<samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp>)
    represents the end of a line. Grepping for <samp class="SANS_TheSansMonoCd_W5Regular_11">something$</samp>
    will show you only results that end with *something*. Grepping for <samp class="SANS_TheSansMonoCd_W5Regular_11">^something</samp>
    will show you only results that begin with *something*.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用<samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp>时，可以传递一个正则表达式（简称regex）作为参数。*正则表达式*是一个字符或字符序列，用于定义搜索模式。例如，插入符号（<samp
    class="SANS_TheSansMonoCd_W5Regular_11">^</samp>）代表行的开头，美元符号（<samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp>）代表行的结尾。使用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">something$</samp>进行grep会显示所有以*something*结尾的结果。使用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">^something</samp>进行grep会显示所有以*something*开头的结果。
- en: 'To search just for filenames that end with *.docx*, add a dollar sign (<samp
    class="SANS_TheSansMonoCd_W5Regular_11">$</samp>) to the end of the text you’re
    grepping for. For example, try running the following command:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想搜索以*.docx*结尾的文件名，可以在你grep的文本末尾加上一个美元符号（<samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp>）。例如，尝试运行以下命令：
- en: '[PRE34]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The output should tell you that there are 8,737 results, 124 less than the previous
    command. That means there are 8,737 Word docs in this dataset.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该会告诉你有8,737个结果，比之前的命令少了124个。这意味着数据集中有8,737个Word文档。
- en: 'Run the following command to find out how many Word docs are in the *ncric*
    folder:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令，查看*ncric*文件夹中有多少个Word文档：
- en: '[PRE35]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">cat</samp> command outputs
    the list of filenames in BlueLeaks, which is then piped into the first <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp>
    command, which in turn filters your output down to files that begin with *./ncric*,
    using <samp class="SANS_TheSansMonoCd_W5Regular_11">^</samp>. Next, that output
    is piped into the second <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp>
    command, which further filters the output to files that end with *.docx*, using
    <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp>. Finally, the remaining
    output is piped into the <samp class="SANS_TheSansMonoCd_W5Regular_11">wc -l</samp>
    command, which tells you how many lines are left. The output of the full command
    should tell you that there are 600 Word docs in the *ncric* folder.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">cat</samp>命令输出BlueLeaks中文件名的列表，然后通过管道传递给第一个<samp
    class="SANS_TheSansMonoCd_W5Regular_11">grep</samp>命令，进而过滤出以*./ncric*开头的文件，使用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">^</samp>。接下来，输出会通过管道传递给第二个<samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp>命令，进一步过滤出以*.docx*结尾的文件，使用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">$</samp>。最后，剩余的输出会通过管道传递给<samp class="SANS_TheSansMonoCd_W5Regular_11">wc
    -l</samp>命令，告诉你剩下多少行。完整命令的输出应该告诉你*ncric*文件夹中有600个Word文档。
- en: On your own, try using <samp class="SANS_TheSansMonoCd_W5Regular_11">find</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">wc</samp>
    to find out how many PDFs (*.pdf*) and Excel documents (*.xlsx*) are in the dataset.
    You can also experiment with other file types.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以尝试使用<samp class="SANS_TheSansMonoCd_W5Regular_11">find</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">wc</samp> 来查找数据集中有多少PDF（*.pdf*）和Excel文档（*.xlsx*）。你也可以尝试其他文件类型。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Search Files in Bulk
    with grep</samp>
  id: totrans-176
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">使用grep批量搜索文件</samp>
- en: 'In addition to piping output from other commands into <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp>,
    you can use <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp> to search
    directly within text files by using the following syntax:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 除了将其他命令的输出通过管道传递给<samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp>，你还可以使用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">grep</samp>直接在文本文件中进行搜索，语法如下：
- en: '[PRE36]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'For example, Linux comes with a file called */etc/passwd*, which includes a
    list of users on the system. To find just the line about my own user in that file,
    I can use one of the following commands:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Linux 附带了一个名为 */etc/passwd* 的文件，里面包含了系统中所有用户的列表。要查找有关我自己的用户的那一行，我可以使用以下命令之一：
- en: '[PRE37]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp> command opens
    the */etc/passwd* file and then searches it, while the <samp class="SANS_TheSansMonoCd_W5Regular_11">cat</samp>
    command opens that file and then pipes its contents into <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp>,
    which searches it. Both of these commands output the following result:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp> 命令打开 */etc/passwd*
    文件并进行搜索，而 <samp class="SANS_TheSansMonoCd_W5Regular_11">cat</samp> 命令则打开该文件并将其内容传递给
    <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp>，然后由 <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp>
    来进行搜索。这两个命令的输出结果如下：
- en: '[PRE38]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: You can use <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp> to search
    multiple files, or even folders full of files, for hits all at once. As noted
    earlier, to search a folder, you use the <samp class="SANS_TheSansMonoCd_W5Regular_11">-r</samp>
    (or <samp class="SANS_TheSansMonoCd_W5Regular_11">--recursive</samp>) argument
    and specify the name of a folder. To specify multiple files at once, use an asterisk
    (<samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp>) as a wildcard character.
    For example, you can use <samp class="SANS_TheSansMonoCd_W5Regular_11">*.txt</samp>
    as the filename to search all text files in your current folder.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp> 一次性搜索多个文件，甚至是包含文件的文件夹。如前所述，要搜索一个文件夹，你需要使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">-r</samp>（或 <samp class="SANS_TheSansMonoCd_W5Regular_11">--recursive</samp>）参数，并指定文件夹名称。要一次指定多个文件，可以使用星号（<samp
    class="SANS_TheSansMonoCd_W5Regular_11">*</samp>）作为通配符。例如，你可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">*.txt</samp>
    作为文件名，来搜索当前文件夹中的所有文本文件。
- en: 'There are CSV spreadsheets in every BlueLeaks folder that contain the contents
    of the websites’ databases. Now that you’ve grepped for filenames that contain
    the keyword *antifa*, use the following command to bulk-search the term *Black
    Lives Matter* in the contents of the files, not just in their filenames:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 BlueLeaks 文件夹中都有 CSV 电子表格，包含网站数据库的内容。现在你已经通过 grep 搜索了包含 *antifa* 关键词的文件名，接下来可以使用以下命令批量搜索文件内容中是否包含
    *Black Lives Matter* 这个词，而不仅仅是搜索文件名：
- en: '[PRE39]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">-i</samp> argument in this
    command makes the search case insensitive. The <samp class="SANS_TheSansMonoCd_W5Regular_11">black
    lives matter</samp> argument is the search term (in quotation marks, because it
    has spaces). The <samp class="SANS_TheSansMonoCd_W5Regular_11">*/*.csv</samp>
    argument is the path to search, which uses two wildcard characters. These arguments
    tell <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp> to open every folder,
    then each file within those folders that ends in *.csv*, and search for the *black
    lives matter* keyword.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令中的 <samp class="SANS_TheSansMonoCd_W5Regular_11">-i</samp> 参数使搜索不区分大小写。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">black lives matter</samp> 参数是搜索的关键词（因为它有空格，所以需要用引号括起来）。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">*/*.csv</samp> 参数是搜索路径，它使用了两个通配符。这些参数告诉
    <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp> 打开每个文件夹，然后在这些文件夹中的每个以
    *.csv* 结尾的文件中搜索 *black lives matter* 这个关键词。
- en: 'This command takes some time to run because it’s searching all 158,232 CSV
    files in BlueLeaks. When it’s finished, it should show you the lines from CSV
    files that mention *black lives matter* and tell you in which files it found those
    lines. For example, here are snippets from a few of the lines of the output from
    that command:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令需要一些时间来执行，因为它要搜索 BlueLeaks 中的 158,232 个 CSV 文件。完成后，它应该会显示出包含 *black lives
    matter* 的 CSV 文件中的行，并告诉你在哪些文件中找到了这些行。例如，以下是该命令输出的几行片段：
- en: '[PRE40]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The command finds a total of 178 lines in BlueLeaks CSVs that contain the term
    *black lives matter*. Each is a potential lead for further investigative research.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令在 BlueLeaks 的 CSV 文件中总共找到了 178 行包含 *black lives matter* 的内容。每一行都是进一步调查研究的潜在线索。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-190
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*The <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">grep</samp> command
    is a great tool for searching the content of text files, but it doesn’t work with
    binary files, like Microsoft Office documents or PDFs. To search those in bulk,
    you’ll need more sophisticated tools, which you’ll learn about in [Chapter 5](chapter5.xhtml).*'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '*<samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">grep</samp> 命令是一个用于搜索文本文件内容的强大工具，但它无法处理二进制文件，比如
    Microsoft Office 文档或 PDF 文件。要批量搜索这些文件，你需要使用更复杂的工具，你将在 [第 5 章](chapter5.xhtml)
    中学习这些工具。*'
- en: On your own, try using <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp>
    to filter the list of BlueLeaks filenames for specific words or bulk-search terms
    within the CSV files. If you find any interesting documents, read them to see
    if they’re newsworthy. Consider narrowing your searches once you find a lead by
    looking for other related documents. You might focus on a single fusion center
    or a topic like antifa that spans different centers. Individual documents may
    contain law enforcement lingo you can use as search terms for related documents.
    Take detailed notes on what’s most revealing in each document, then rely on these
    notes if you decide to write about your findings.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 试着自己使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp> 命令来筛选 BlueLeaks
    文件名列表中的特定词汇或在 CSV 文件中批量搜索关键字。如果你发现了任何有趣的文档，阅读它们看看是否具有新闻价值。找到线索后，可以通过查找其他相关文档来进一步缩小搜索范围。你可以聚焦于某一个单独的融合中心，或者像反法西斯组织（antifa）这样的跨不同中心的主题。单个文档可能包含执法术语，你可以用这些术语来搜索相关文档。在每个文档中详细记录最具揭示性的信息，如果你决定撰写发现报告时，可以依赖这些笔记。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Encrypted Data in the BlueLeaks Dataset</samp>
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">BlueLeaks 数据集中的加密数据</samp>
- en: As you dig around in the BlueLeaks dataset, you’ll notice some patterns. Most
    folders contain many CSVs, as well as.*aspx* files, the source code of the hacked
    websites. They also contain *files* subfolders containing the bulk of the files
    and folders uploaded to each site, including PDFs and Microsoft Office documents.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在你深入挖掘 BlueLeaks 数据集时，你会注意到一些模式。大多数文件夹包含许多 CSV 文件，以及 *aspx* 文件，这是被黑客攻击网站的源代码。它们还包含名为
    *files* 的子文件夹，里面存储了上传到每个网站的大部分文件和文件夹，包括 PDF 文件和 Microsoft Office 文档。
- en: However, one folder, *repo*, contains just a *config* file and *data*, *index*,
    *keys*, *locks*, and *snapshots* subfolders. Inside those subfolders are other
    subfolders and files with apparently random names. There are no documents that
    can be opened—no spreadsheets or similar files. As you discovered in Exercise
    4-2, the *repo* folder is the largest folder in BlueLeaks, at 46GB. Its timestamps
    are from June 8, 2020, although the latest timestamps for most of the rest of
    the dataset are from June 6\. Without more information, it’s not clear what these
    files mean or how to access them.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一个文件夹，*repo*，只包含一个 *config* 文件和 *data*、*index*、*keys*、*locks* 和 *snapshots*
    子文件夹。在这些子文件夹中，还有其他的子文件夹和看似随机命名的文件。没有可以打开的文档——没有电子表格或类似的文件。如你在练习 4-2 中发现的那样，*repo*
    文件夹是 BlueLeaks 中最大的文件夹，大小为 46GB。它的时间戳来自 2020 年 6 月 8 日，尽管大多数数据集的其他部分的最新时间戳是 6
    月 6 日。没有更多的信息，这些文件的含义和如何访问它们仍不清楚。
- en: When I discover a mystery like this in a dataset, I search the internet. In
    this case, I searched for the names of the files and folders within the *repo*
    folder by entering *config data index keys locks snapshots* into a search engine,
    and found documentation for a CLI program called restic. A restic repository,
    according to the documentation I found at [*https://<wbr>restic<wbr>.readthedocs<wbr>.io<wbr>/en<wbr>/latest<wbr>/100<wbr>_references<wbr>.html*](https://restic.readthedocs.io/en/latest/100_references.html),
    is a folder that holds backup data. Restic repositories contain a *config* file
    and folders called *data*, *index*, *keys*, *locks*, and *snapshots*, as shown
    in [Figure 4-2](#fig4-2).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在数据集中发现这样的谜团时，我会上网搜索。这一次，我通过在搜索引擎中输入 *config data index keys locks snapshots*
    来查找 *repo* 文件夹内的文件和文件夹名称，找到了一个名为 restic 的 CLI 程序的文档。根据我在 [*https://<wbr>restic<wbr>.readthedocs<wbr>.io<wbr>/en<wbr>/latest<wbr>/100<wbr>_references<wbr>.html*](https://restic.readthedocs.io/en/latest/100_references.html)
    找到的文档，restic 仓库是一个存储备份数据的文件夹。Restic 仓库包含一个 *config* 文件以及名为 *data*、*index*、*keys*、*locks*
    和 *snapshots* 的文件夹，如 [图 4-2](#fig4-2) 所示。
- en: '![Documentation for the CLI program restic. This describes the “Repository
    Layout” of a restic repository, which has the same folder names as in the repo
    folder.](Images/Figure4-2.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![restic CLI 程序的文档。这里描述了 restic 仓库的“仓库布局”，该布局与仓库文件夹中的文件夹名称相同。](Images/Figure4-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-2: The layout of a
    restic respository</samp>'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-2：restic 仓库的布局</samp>
- en: 'This suggests that the *repo* folder in BlueLeaks contains backup data in restic
    format. To find out what’s inside this backup, I installed the <samp class="SANS_TheSansMonoCd_W5Regular_11">restic</samp>
    package. Users of Linux or Windows with WSL can install <samp class="SANS_TheSansMonoCd_W5Regular_11">restic</samp>
    using apt:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明 BlueLeaks 中的 *repo* 文件夹包含以 restic 格式备份的数据。为了查看这个备份的内容，我安装了 <samp class="SANS_TheSansMonoCd_W5Regular_11">restic</samp>
    包。使用 Linux 或 Windows（带 WSL）用户可以使用 apt 安装 <samp class="SANS_TheSansMonoCd_W5Regular_11">restic</samp>：
- en: '[PRE41]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Mac users can install <samp class="SANS_TheSansMonoCd_W5Regular_11">restic</samp>
    from Homebrew with the following command:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: Mac 用户可以通过以下命令从 Homebrew 安装 <samp class="SANS_TheSansMonoCd_W5Regular_11">restic</samp>：
- en: '[PRE42]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'I ran <samp class="SANS_TheSansMonoCd_W5Regular_11">restic --help</samp> and
    found that I could view the snapshots in a repository with the <samp class="SANS_TheSansMonoCd_W5Regular_11">restic
    snapshots</samp> command, which I then used to try to view the snapshots in the
    *repo* folder like so:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我运行了 <samp class="SANS_TheSansMonoCd_W5Regular_11">restic --help</samp>，发现我可以使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">restic snapshots</samp> 命令查看仓库中的快照，然后我用它尝试查看
    *repo* 文件夹中的快照，像这样：
- en: '[PRE43]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'I was then confronted with a password prompt:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我随后遇到了一个密码提示：
- en: '[PRE44]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This prompt indicates that the backup is encrypted. The only way to proceed
    is to guess the password, which I haven’t been able to do.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这个提示表示备份已加密。继续操作的唯一方法是猜测密码，但我一直没能猜到。
- en: While a 46GB folder full of encrypted data in a public leak is rare, it’s not
    uncommon to stumble upon other encrypted files in datasets like Office documents
    or ZIP files. I can’t help but imagine that the most interesting details in any
    dataset might be the encrypted parts. Password-cracking is outside the scope of
    this book, but if you can figure out the password for *repo*, please let me know.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管公共泄露中的 46GB 加密数据夹非常罕见，但在像 Office 文档或 ZIP 文件这样的数据集中，偶尔会发现其他加密文件。我不禁想象，任何数据集中最有趣的部分可能正是那些加密的内容。密码破解超出了本书的范围，但如果你能破解
    *repo* 的密码，请告诉我。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Data Analysis with Servers in the Cloud</samp>
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">云中服务器的数据分析</samp>
- en: So far, you’ve used the CLI *locally* on your own computer, but you can also
    use it *remotely* via servers to which you connect through a cloud network. DigitalOcean,
    AWS, Microsoft Azure, and countless other cloud hosting companies rent virtual
    private servers (VPSes) to the public, usually for a few dollars a month or a
    few cents an hour. All the command line skills you’ve learned so far apply to
    remote servers, too.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经在自己的计算机上*本地*使用了命令行工具，但你也可以通过云网络连接的远程服务器*远程*使用它。DigitalOcean、AWS、Microsoft
    Azure 和无数其他云主机公司向公众出租虚拟私人服务器（VPS），通常是每月几美元或每小时几美分。你迄今学到的所有命令行技能同样适用于远程服务器。
- en: 'There are many advantages to working with massive datasets in the cloud:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在云中处理海量数据集有许多优势：
- en: Instead of dealing with USB hard disks, you can attach virtual hard disks to
    your virtual servers, increasing their size if you’re running low on disk space.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以将虚拟硬盘连接到虚拟服务器上，而不是使用 USB 硬盘，如果磁盘空间不足时，还可以增加硬盘的大小。
- en: VPS bandwidth is generally much better than residential or commercial internet
    service, speeding up large dataset downloads.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VPS 的带宽通常比住宅或商业互联网服务要好得多，加速大数据集的下载。
- en: You can also pay for more powerful VPSes for scripts that require significant
    computational resources, so they no longer take hours or days to finish running.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还可以为需要大量计算资源的脚本支付更强大的 VPS，这样它们就不会再花费几个小时或几天才能完成。
- en: Rather than being forced to wait while a script runs on your local machine,
    you can do whatever you want on your computer, even suspending it or shutting
    it down, while your remote server is crunching data.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不再需要在本地计算机上等待脚本运行，而是可以在计算机上做任何事情，甚至暂停或关机，同时远程服务器正在处理数据。
- en: If your source has the required technical skills, you can ask them to upload
    data to a VPS with a large hard disk, as discussed in [Chapter 2](chapter2.xhtml).
    They can even do this anonymously using Tor. You can then download the dataset
    or choose to analyze it remotely on the VPS.
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的来源具备所需的技术技能，你可以让他们将数据上传到拥有大硬盘的 VPS，就像在[第 2 章](chapter2.xhtml)中讨论的那样。他们甚至可以使用
    Tor 匿名上传数据。然后你可以下载数据集，或选择在 VPS 上远程分析它。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">WARNING</samp>
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">警告</samp>
- en: '*Avoid working on cloud servers with high- or medium-sensitivity datasets.
    The cloud hosting provider has total access over your VPS and the data on it and
    can even give copies of that data to law enforcement or other parties in response
    to legal requests.*'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '*避免在云服务器上处理高敏感度或中敏感度的数据集。云托管服务提供商对你的 VPS 以及其中的数据拥有完全访问权限，并且可能根据法律要求将这些数据副本提供给执法机关或其他方。*'
- en: 'This section will go into more detail on *SSH (Secure Shell)* software (introduced
    in [Chapter 2](chapter2.xhtml)), which allows you to securely get a shell on a
    VPS, as well as two tools that are essential for working remotely on the command
    line: text-based window managers and CLI text editors. This should prepare you
    to set up a VPS in the next exercise.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将更详细地介绍 *SSH（安全外壳）* 软件（在 [第 2 章](chapter2.xhtml) 中介绍），它允许你在 VPS 上安全地获得一个 shell，此外，还会介绍两种在命令行上远程工作时必不可少的工具：基于文本的窗口管理器和
    CLI 文本编辑器。掌握这些内容应该能帮助你在下一节练习中设置一个 VPS。
- en: 'The SSH protocol is a method for securely logging in to another computer remotely.
    You can connect to a VPS remotely by running the <samp class="SANS_TheSansMonoCd_W5Regular_11">ssh</samp>
    command with a username and the IP address or domain name of the server to which
    you want to connect. For example, to log in as the root user to the server with
    the hostname *example.com*, you run:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: SSH 协议是一种安全地远程登录到另一台计算机的方法。你可以通过运行 <samp class="SANS_TheSansMonoCd_W5Regular_11">ssh</samp>
    命令，并提供用户名以及你想连接的服务器的 IP 地址或域名，来远程连接到 VPS。例如，要以 root 用户身份登录到主机名为 *example.com*
    的服务器，你可以运行：
- en: '[PRE45]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'You then need to *authenticate* to the server, or prove that you have permission
    to log in, by typing the user password or using *SSH keys*. Similar to PGP keys
    (discussed in [Chapter 2](chapter2.xhtml)), generating an SSH key on your computer
    gives you two files: a public key and a secret key. Once you put your public key
    on the remote server, only people with your secret key on their computer (hopefully
    just you) can remotely log in to that server using SSH. If someone spies on your
    internet, they can’t see anything you’re doing in your SSH session—they’ll just
    see garbled encrypted data. Every SSH key also has a *fingerprint*, a unique string
    of characters that identifies that specific key. SSH keys are more secure than
    passwords, so cloud providers often require that you use them. Once you SSH into
    a remote server, you’ll be dropped into a shell just like the one on your own
    computer, but running on a computer across the internet.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你需要对服务器进行 *身份验证*，或者通过输入用户密码或使用 *SSH 密钥* 来证明你有权限登录。类似于 PGP 密钥（在 [第 2 章](chapter2.xhtml)
    中讨论过），在你的计算机上生成一个 SSH 密钥会得到两个文件：一个公钥和一个私钥。将公钥放到远程服务器上后，只有在其计算机上拥有你的私钥的人（希望只是你自己）才能通过
    SSH 远程登录到该服务器。如果有人监视你的互联网连接，他们无法看到你在 SSH 会话中的任何操作—他们只会看到乱码的加密数据。每个 SSH 密钥还有一个
    *指纹*，它是一个唯一的字符串，用于标识该密钥。SSH 密钥比密码更安全，因此云服务提供商通常要求你使用它们。一旦你通过 SSH 连接到远程服务器，你将进入一个
    shell，就像在自己计算机上操作一样，不过它是运行在互联网上的另一台计算机上。
- en: A *text-based window manager* is software that lets you open and switch between
    separate shells in the same terminal window, all in the same SSH session. Text-based
    window managers also allow you to keep programs running in the background even
    if you disconnect from SSH, by maintaining an active shell session on your VPS.
    This protects your work if, for example, your laptop dies, you lose internet access,
    or you close your terminal window by mistake.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '*基于文本的窗口管理器* 是一种软件，允许你在同一终端窗口中打开并切换不同的 shell，所有这些都在同一个 SSH 会话中。基于文本的窗口管理器还允许你即使断开
    SSH 连接，也能在后台保持程序运行，通过保持 VPS 上的活动 shell 会话来保护你的工作。例如，如果你的笔记本死机、丢失了网络连接或不小心关闭了终端窗口，这些程序仍然会继续运行。'
- en: For example, say you want to download BlueLeaks on your VPS and then unzip it
    with a <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> loop. If you close
    your terminal window before the loop is done, you’ll quit the remote shell, which
    will close the <samp class="SANS_TheSansMonoCd_W5Regular_11">unzip</samp> program,
    and your remote work will stop. However, if you SSH to your VPS, connect to a
    window manager session, and then start unzipping BlueLeaks files, you can safely
    close the terminal window without stopping your work. If you open a new terminal
    later, SSH back into your server, and open your window manager again, your previous
    session with all your running programs should reappear. In the upcoming exercise,
    you’ll use the Byobu window manager, which comes with Ubuntu.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你想在 VPS 上下载 BlueLeaks，然后通过 <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    循环解压它。如果你在循环完成之前关闭终端窗口，你将退出远程 shell，这会关闭 <samp class="SANS_TheSansMonoCd_W5Regular_11">unzip</samp>
    程序，导致远程工作停止。然而，如果你通过 SSH 连接到 VPS，进入窗口管理会话，然后开始解压 BlueLeaks 文件，你可以安全地关闭终端窗口而不会停止工作。如果稍后打开新终端，再次通过
    SSH 连接到服务器，并重新打开窗口管理器，之前的会话和所有正在运行的程序应该会重新出现。在接下来的练习中，你将使用 Ubuntu 附带的 Byobu 窗口管理器。
- en: When you SSH into a remote server, you don’t have easy access to a graphical
    text editor like VS Code. To edit files—to modify a shell script, for example—you’ll
    need to use a CLI text editor instead. Two popular CLI text editors are nano and
    vim. The nano text editor is relatively easy to use but doesn’t have advanced
    features, while vim is more powerful but has a steeper learning curve. For simplicity’s
    sake, in the following exercise you’ll use nano.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 当你通过 SSH 连接到远程服务器时，你无法轻松访问像 VS Code 这样的图形化文本编辑器。要编辑文件——例如修改一个 shell 脚本——你需要使用命令行文本编辑器。两种常见的命令行文本编辑器是
    nano 和 vim。nano 编辑器相对易于使用，但没有高级功能，而 vim 更强大，但学习曲线较陡。为了简单起见，在接下来的练习中，你将使用 nano。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-226
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*Technically, you can use VS Code to edit files remotely over SSH, but there
    are some limitations. See* [https://<wbr>code<wbr>.visualstudio<wbr>.com<wbr>/docs<wbr>/remote<wbr>/ssh](https://code.visualstudio.com/docs/remote/ssh)
    *for more information on VS Code’s support for editing files over SSH.*'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '*从技术上讲，你可以通过 SSH 使用 VS Code 远程编辑文件，但也有一些限制。有关 VS Code 支持通过 SSH 编辑文件的更多信息，请参见*
    [https://<wbr>code<wbr>.visualstudio<wbr>.com<wbr>/docs<wbr>/remote<wbr>/ssh](https://code.visualstudio.com/docs/remote/ssh)
    *。*'
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Exercise 4-4: Set Up a VPS</samp>'
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_21">练习 4-4：设置 VPS</samp>
- en: In this exercise, you’ll create an account on a cloud hosting provider, generate
    an SSH key, create a VPS on your cloud provider, SSH into it, start a Byobu session,
    and install updates. To follow along you’ll need to spend a small amount of money.
    I provide detailed instructions for using DigitalOcean in this exercise, but use
    whatever cloud hosting provider you prefer, keeping in mind that the initial steps
    will likely be slightly different.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，你将创建一个云主机服务商的帐户，生成 SSH 密钥，创建一个 VPS，并通过 SSH 连接到它，启动 Byobu 会话并安装更新。为了跟着操作，你需要花费一些小额费用。我为本练习提供了详细的
    DigitalOcean 使用指南，但你也可以使用任何你喜欢的云服务商，只需注意初始步骤可能会有所不同。
- en: Go to [*https://<wbr>www<wbr>.digitalocean<wbr>.com*](https://www.digitalocean.com)
    and create an account, providing a credit card number while signing up. Use a
    strong password, store it in your password manager, and turn on two-factor authentication.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 [*https://<wbr>www<wbr>.digitalocean<wbr>.com*](https://www.digitalocean.com)，创建帐户，并在注册时提供信用卡号。使用强密码，将其存储在密码管理器中，并启用双因素认证。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Generate an SSH Key</samp>
  id: totrans-231
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">生成 SSH 密钥</samp>
- en: 'To generate an SSH key, open a terminal on your local computer (if you’re using
    Windows, use a WSL terminal) and run:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成 SSH 密钥，请在本地计算机上打开终端（如果你使用的是 Windows，请使用 WSL 终端）并运行：
- en: '[PRE46]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">ssh-keygen</samp> command
    generates an SSH key, while the options specify the type of encryption key you
    want to generate—in this case, <samp class="SANS_TheSansMonoCd_W5Regular_11">ed25519</samp>,
    which uses modern elliptic curve encryption and is the most secure option.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">ssh-keygen</samp> 命令生成一个 SSH 密钥，而选项指定你想要生成的加密密钥类型——在这种情况下是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">ed25519</samp>，它使用现代椭圆曲线加密，是最安全的选项。
- en: 'After you run this command, the program will ask you a few questions, starting
    with where you want to save your key. For example, I get the following output
    on my Mac:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，程序会询问你一些问题，首先是你希望将密钥保存到哪里。例如，我在 Mac 上得到如下输出：
- en: '[PRE47]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Press ENTER to use the default location for the key, *~/.ssh/id_ed25519*. Next,
    the program should ask you for a passphrase:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 按 ENTER 键使用密钥的默认位置 *~/.ssh/id_ed25519*。接下来，程序应该会要求你输入密码短语：
- en: '[PRE48]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: I recommend generating a random passphrase in your password manager, saving
    it as *SSH key passphrase*, then copying and pasting the passphrase into your
    terminal. After pressing ENTER, re-enter your passphrase and press ENTER again.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议在你的密码管理器中生成一个随机密码短语，将其保存为 *SSH 密钥密码短语*，然后将密码短语复制并粘贴到终端中。按下 ENTER 键后，重新输入密码短语并再次按
    ENTER 键。
- en: 'When you’re done, the <samp class="SANS_TheSansMonoCd_W5Regular_11">ssh-keygen</samp>
    command should have created two new files: your SSH secret key in *~/.ssh/id_ed25519*
    and your SSH public key in *~/.ssh/id_ed25519.pub*.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，<samp class="SANS_TheSansMonoCd_W5Regular_11">ssh-keygen</samp> 命令应该会创建两个新文件：你的
    SSH 私钥在 *~/.ssh/id_ed25519*，你的 SSH 公钥在 *~/.ssh/id_ed25519.pub*。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-241
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*If you’re using Windows and prefer to SSH from PowerShell, you can install
    the OpenSSH client directly in Windows. Open a PowerShell window as an administrator
    and run* <samp class="SANS_TheSansMonoCd_W7Bold_Italic_BI_11">Add-WindowsCapability
    -Online -Name OpenSSH.Client~~~~0.0.1.0</samp> *to enable using the ssh command
    from PowerShell.*'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你使用的是 Windows，并且希望从 PowerShell 使用 SSH，你可以直接在 Windows 中安装 OpenSSH 客户端。以管理员身份打开
    PowerShell 窗口并运行* <samp class="SANS_TheSansMonoCd_W7Bold_Italic_BI_11">Add-WindowsCapability
    -Online -Name OpenSSH.Client~~~~0.0.1.0</samp> *以启用从 PowerShell 使用 ssh 命令。*'
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Add Your Public Key
    to the Cloud Provider</samp>
  id: totrans-243
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">将你的公钥添加到云服务提供商</samp>
- en: Next, add your public key to your new DigitalOcean account. After logging in
    to the web console, go to the Settings page and switch to the Security tab. Click
    **Add SSH Key**, then copy and paste your SSH public key into the form.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将你的公钥添加到新的 DigitalOcean 账户中。登录到 Web 控制台后，进入设置页面并切换到安全标签。点击 **添加 SSH 密钥**，然后将你的
    SSH 公钥复制并粘贴到表单中。
- en: 'Back in your terminal, display the content of your public key by running this
    command:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 返回终端，运行此命令显示公钥的内容：
- en: '[PRE49]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Here’s the output I get:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我得到的输出：
- en: '[PRE50]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Your output should look similar, with the last word being your username and
    the hostname of your own computer. Copy this whole string, starting with <samp
    class="SANS_TheSansMonoCd_W5Regular_11">ssh-ed25519</samp>, and paste it into
    DigitalOcean, then give it a name, as shown in [Figure 4-3](#fig4-3).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 你的输出应该类似于此，最后一个单词是你的用户名和你计算机的主机名。复制整个字符串，从 <samp class="SANS_TheSansMonoCd_W5Regular_11">ssh-ed25519</samp>
    开始，并将其粘贴到 DigitalOcean 中，然后为它命名，如 [图 4-3](#fig4-3) 所示。
- en: '![A screenshot of the DigitalOcean console, where you can copy and paste the
    SSH public key to add it to your account.](Images/Figure4-3.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![DigitalOcean 控制台的截图，你可以在这里复制并粘贴 SSH 公钥将其添加到你的账户中。](Images/Figure4-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-3: The form for adding
    a new SSH key to a DigitalOcean account</samp>'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-3：向 DigitalOcean 账户添加新 SSH
    密钥的表单</samp>
- en: Name your SSH keys after the computer on which you generated them, since they’re
    allowing this specific computer to access remote computers. For example, I’ve
    called my key *trapdoor*, the name of my Mac.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的 SSH 密钥命名为生成它们的计算机的名称，因为它们允许这台特定计算机访问远程计算机。例如，我将我的密钥命名为 *trapdoor*，这是我的 Mac
    的名称。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Create a VPS</samp>
  id: totrans-253
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">创建 VPS</samp>
- en: 'Now that DigitalOcean has your SSH public key, you can create a new VPS. Click
    **Create** at the top of the DigitalOcean console and follow the instructions
    to create a new *droplet*, DigitalOcean’s term for a VPS. Choose the following
    settings for your VPS:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，DigitalOcean 已经获取了你的 SSH 公钥，你可以创建一个新的 VPS。在 DigitalOcean 控制台顶部点击 **创建**，然后按照提示创建一个新的
    *droplet*，这是 DigitalOcean 对 VPS 的称呼。为你的 VPS 选择以下设置：
- en: For Choose an Image, pick **Ubuntu**.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 "选择镜像" 选项中，选择 **Ubuntu**。
- en: For Choose a Plan, pick **Shared CPU**▸**Basic** and choose how much memory,
    CPU power, hard disk space, and internet bandwidth you want. Less powerful machines
    are cheaper; more powerful ones are more expensive. For this exercise, choose
    a relatively cheap option like 1GB of RAM, 1 CPU, 25GB of disk space, and 1TB
    of bandwidth for $7 per month.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择计划时，选择**共享 CPU**▸**基础**，然后选择所需的内存、CPU 功率、硬盘空间和互联网带宽。性能较低的机器价格较便宜；性能较强的机器价格较贵。对于本练习，选择一个相对便宜的选项，比如
    1GB 内存、1 个 CPU、25GB 硬盘空间和 1TB 带宽，每月 7 美元。
- en: For Add Block Storage, you can choose to attach an additional hard disk to your
    droplet. You don’t need to do this now, but in the future, to work with a large
    dataset like BlueLeaks, you can add more disk space.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于添加块存储，你可以选择为你的 Droplet 附加一个额外的硬盘。现在不需要这么做，但将来为了处理像 BlueLeaks 这样的大数据集时，你可以增加更多的磁盘空间。
- en: For Choose a Datacenter Region, choose the host city for your VPS. File transfers
    between your computer and your server will be fastest if you choose a nearby location,
    but feel free to create your VPS anywhere you’d like.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择数据中心区域时，选择你的 VPS 所在城市。如果选择一个较近的地点，文件传输速度会更快，但你也可以在任何地方创建你的 VPS。
- en: For Authentication, choose **SSH Keys** and select the SSH key that you just
    added to your DigitalOcean account.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在认证部分，选择**SSH 密钥**，并选择你刚刚添加到 DigitalOcean 账户的 SSH 密钥。
- en: For Select Additional Options, check the box beside Monitoring to see statistics
    about how much memory and processor power the VPS is using over time from the
    DigitalOcean console.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择附加选项时，勾选“监控”框，以便从 DigitalOcean 控制台查看 VPS 使用的内存和处理器功率的统计信息。
- en: For Finalize and Create, choose one droplet and give it the hostname *test-vps*.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在完成并创建部分，选择一个 Droplet，并给它命名为主机名 *test-vps*。
- en: Click **Create Droplet** and wait a minute or two for DigitalOcean to provision
    your new VPS, then find its IP address. [Figure 4-4](#fig4-4) shows the Droplets
    page of my DigitalOcean account with my new server’s IP address, 178.128.22.151.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**创建 Droplet**，然后等待一两分钟，直到 DigitalOcean 配置你的新 VPS，接着找到它的 IP 地址。[图 4-4](#fig4-4)
    显示了我 DigitalOcean 账户中的 Droplets 页面和新服务器的 IP 地址 178.128.22.151。
- en: '![Screenshot from the DigitalOcean console that lists my VPS and its IP address.](Images/Figure4-4.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![来自 DigitalOcean 控制台的截图，列出了我的 VPS 及其 IP 地址。](Images/Figure4-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-4: My test-vps IP
    address</samp>'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-4：我的 test-vps IP 地址</samp>
- en: Click the IP address to copy it to your clipboard.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 IP 地址将其复制到剪贴板。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">SSH into Your Server</samp>
  id: totrans-266
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">SSH 连接到你的服务器</samp>
- en: 'Run the following command to SSH into your server:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以 SSH 连接到你的服务器：
- en: '[PRE51]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Here, <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">username</samp>
    is the user you want to connect to on the remote server, and <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">hostname</samp>
    is either the hostname or IP address of the remote server. With DigitalOcean,
    the username is <samp class="SANS_TheSansMonoCd_W5Regular_11">root</samp> and
    the hostname is the IP address of your server.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，<samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">username</samp> 是你想要连接的远程服务器的用户名，而
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">hostname</samp> 是远程服务器的主机名或
    IP 地址。在 DigitalOcean 上，用户名是 <samp class="SANS_TheSansMonoCd_W5Regular_11">root</samp>，主机名是你的服务器的
    IP 地址。
- en: 'Here’s what it looks like when I SSH into my server for the first time:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我第一次通过 SSH 连接到服务器时的界面：
- en: '[PRE52]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: A remote server has its own SSH key, a *server key.* This output shows you the
    server key’s fingerprint and asks whether you want to trust it. If you enter <samp
    class="SANS_TheSansMonoCd_W5Regular_11">yes</samp>, your SSH software will store
    this fingerprint in the *~/.ssh/known_hosts* file containing all the fingerprints
    for the SSH servers to which you’ve connected in the past, so that when you SSH
    into your server in the future, it shouldn’t prompt you again. You can also enter
    <samp class="SANS_TheSansMonoCd_W5Regular_11">no</samp> to cancel, or copy and
    paste the fingerprint of the server key that you’re expecting.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 远程服务器有自己的 SSH 密钥，称为*服务器密钥*。此输出会显示服务器密钥的指纹，并询问是否信任该密钥。如果你输入 <samp class="SANS_TheSansMonoCd_W5Regular_11">yes</samp>，你的
    SSH 软件将把该指纹存储在 *~/.ssh/known_hosts* 文件中，该文件包含你过去连接的所有 SSH 服务器的指纹，以便下次 SSH 连接时不再提示。你也可以输入
    <samp class="SANS_TheSansMonoCd_W5Regular_11">no</samp> 来取消，或者复制并粘贴你期望的服务器密钥指纹。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-273
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*If you SSH into a server and the fingerprint isn’t what your software expects
    it to be, SSH will show you a warning message, which could mean that the server
    key has changed or that your SSH connection is being attacked. This authentication
    scheme is known as* trust on first use (TOFU)*: you trust the first fingerprint
    you see and deny all other fingerprints for that server in the future.*'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你通过 SSH 连接到服务器，而指纹与软件预期的不一致，SSH 会显示警告信息，这可能意味着服务器密钥已更改，或者你的 SSH 连接正在遭受攻击。这种认证机制被称为*
    信任首次使用 (TOFU)*：你信任第一次看到的指纹，并在未来拒绝该服务器的所有其他指纹。*'
- en: 'Enter <samp class="SANS_TheSansMonoCd_W7Bold_B_11">yes</samp> and press ENTER
    to continue. You should be dropped into a root shell on your remote server:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 输入 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">yes</samp> 并按回车键继续。你应该会进入远程服务器的
    root shell：
- en: '[PRE53]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Since you provided DigitalOcean with your SSH public key, you don’t need to
    enter a password to log in. If anyone else tries SSHing to your server, they’ll
    get the <samp class="SANS_TheSansMonoCd_W5Regular_11">Permission denied (publickey)</samp>
    error.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你已经向 DigitalOcean 提供了 SSH 公钥，你无需输入密码即可登录。如果其他人尝试通过 SSH 连接到你的服务器，他们会收到 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Permission denied (publickey)</samp> 错误。
- en: Take a look around your new cloud-based system. Run <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ls</samp>
    to list files, <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ls -al</samp> to see
    hidden files, and <samp class="SANS_TheSansMonoCd_W7Bold_B_11">cd</samp> to change
    to folders.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 环顾你的新云端系统。运行 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ls</samp> 来列出文件，运行
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ls -al</samp> 来查看隐藏文件，运行 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">cd</samp>
    来切换目录。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Start a Byobu Session</samp>
  id: totrans-279
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">启动 Byobu 会话</samp>
- en: If you used the Ubuntu image to set up your droplet, the Byobu window manager
    should be installed. Run the <samp class="SANS_TheSansMonoCd_W7Bold_B_11">byobu</samp>
    command to start a Byobu session. (If you’re using a different operating system,
    or if for some reason Byobu isn’t installed, you’ll get a <samp class="SANS_TheSansMonoCd_W5Regular_11">Command
    'byobu' not found</samp> error message. Run <samp class="SANS_TheSansMonoCd_W7Bold_B_11">apt
    update</samp>, followed by <samp class="SANS_TheSansMonoCd_W7Bold_B_11">apt install
    byobu</samp>, to install the program.)
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 Ubuntu 镜像来设置你的 droplet，Byobu 窗口管理器应该已经安装。运行 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">byobu</samp>
    命令来启动 Byobu 会话。（如果你使用的是其他操作系统，或者由于某种原因 Byobu 没有安装，你会看到 <samp class="SANS_TheSansMonoCd_W5Regular_11">Command
    'byobu' not found</samp> 错误信息。运行 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">apt
    update</samp>，然后运行 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">apt install byobu</samp>
    来安装该程序。）
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">byobu</samp> command should
    drop you into a shell inside of your new session. A line at the bottom of your
    terminal shows which window you’ve opened, along with information like the date
    and time. Each Byobu window is like its own separate shell in the same Byobu session,
    and you can open as many windows as you want.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">byobu</samp> 命令会让你进入新的会话中的一个 shell。在终端底部会显示你打开的窗口，以及日期和时间等信息。每个
    Byobu 窗口就像是在同一 Byobu 会话中的一个独立的 shell，你可以根据需要打开任意数量的窗口。
- en: 'To demonstrate how Byobu works, run <samp class="SANS_TheSansMonoCd_W7Bold_B_11">whoami</samp>
    (which should tell you that you’re the root user) and <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ls
    -l /</samp> (which should show you a list of files in your server’s root folder).
    Now press CTRL-A. Byobu will ask you how you want this keyboard command to operate:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示 Byobu 的工作方式，运行 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">whoami</samp>（它应该告诉你你是
    root 用户）和 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ls -l /</samp>（它应该显示服务器根目录中的文件列表）。现在按下
    CTRL-A，Byobu 会询问你如何操作这个键盘命令：
- en: '[PRE54]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Enter <samp class="SANS_TheSansMonoCd_W7Bold_B_11">1</samp> and press ENTER.
    This allows you to open a new window in Byobu by pressing CTRL-A, followed by
    C (for “create”). Try that now to open a new empty shell. Press CTRL-A followed
    by N (for “next”) to switch back to your first window. To exit a Byobu window,
    you run the <samp class="SANS_TheSansMonoCd_W5Regular_11">exit</samp> command
    in that shell.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 输入 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">1</samp> 并按回车键。这将允许你通过按 CTRL-A
    后接 C（表示“创建”）来打开一个新的窗口。现在尝试打开一个新的空 shell。按下 CTRL-A 后接 N（表示“下一个”）来切换回第一个窗口。要退出 Byobu
    窗口，可以在该 shell 中运行 <samp class="SANS_TheSansMonoCd_W5Regular_11">exit</samp> 命令。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-285
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*See* [https://<wbr>www<wbr>.byobu<wbr>.org](https://www.byobu.org) *for more
    complete documentation about this program, including a video tutorial.*'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '*请访问* [https://<wbr>www<wbr>.byobu<wbr>.org](https://www.byobu.org) *以获取关于此程序的更完整文档，包括视频教程。*'
- en: Completely close your terminal window and click through any warnings saying
    that your active programs will close if you do this. Open a new terminal window
    and SSH back into your server using the <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ssh</samp>
    <samp class="SANS_TheSansMonoCd_W7Bold_Italic_BI_11">username@hostname</samp>
    command. Then run <samp class="SANS_TheSansMonoCd_W7Bold_B_11">byobu</samp> again
    to attach your previous session. Any programs you run inside this Byobu session
    won’t quit when you disconnect from SSH.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 完全关闭你的终端窗口，并点击任何警告，告知你如果继续操作，当前的活动程序将会关闭。打开一个新的终端窗口，并使用 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ssh</samp>
    <samp class="SANS_TheSansMonoCd_W7Bold_Italic_BI_11">username@hostname</samp>
    命令重新连接到你的服务器。然后再次运行 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">byobu</samp>
    以附加到之前的会话。在此 Byobu 会话中运行的任何程序，在你断开 SSH 连接时不会退出。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Install Updates</samp>
  id: totrans-288
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">安装更新</samp>
- en: 'Always install updates when you set up a new server to keep it secure. Run
    the following commands (you don’t need to use <samp class="SANS_TheSansMonoCd_W5Regular_11">sudo</samp>,
    since you’re the root user):'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置新服务器时，始终安装更新以保持其安全。运行以下命令（你不需要使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">sudo</samp>，因为你是
    root 用户）：
- en: '[PRE55]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Follow the instructions to finish installing updates.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 按照指示完成更新安装。
- en: If you ever need to reboot your server (such as after updating the Linux kernel),
    run the <samp class="SANS_TheSansMonoCd_W5Regular_11">reboot</samp> command. You’ll
    get kicked out of your SSH session, but you should be able to SSH back in shortly
    when the reboot completes. You can also reboot your VPS from DigitalOcean’s web
    console—for example, if the entire server crashed and you can’t SSH into it.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要重新启动服务器（例如，在更新 Linux 内核后），运行 <samp class="SANS_TheSansMonoCd_W5Regular_11">reboot</samp>
    命令。你将被踢出 SSH 会话，但当重启完成后，你应该能够很快重新通过 SSH 连接。你也可以通过 DigitalOcean 的 web 控制台重新启动 VPS——例如，如果整个服务器崩溃且无法通过
    SSH 连接。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Exercise 4-5: Explore the Oath Keepers
    Dataset Remotely</samp>'
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_21">练习 4-5：远程探索 Oath Keepers 数据集</samp>
- en: In this exercise, you’ll use BitTorrent to download the Oath Keepers dataset
    to your cloud server and explore it using the skills you’ve gained in this chapter.
    You’ll also learn to copy data from your remote server to your laptop using the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">rsync</samp> command. Finally, you’ll
    delete your VPS to avoid getting charged for time when you’re not using it.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，你将使用 BitTorrent 下载 Oath Keepers 数据集到云服务器，并使用本章中学到的技能进行探索。你还将学习如何使用 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">rsync</samp> 命令将数据从远程服务器复制到笔记本电脑。最后，你将删除
    VPS，以避免在不使用时被收取费用。
- en: The Oath Keepers dataset contains data from the far-right extremist group that
    participated in the January 6, 2021, US Capitol insurrection. In September 2021,
    a hacktivist broke into the Oath Keepers servers and made off with the group’s
    email messages, chat logs, membership lists, and other data, and then leaked it
    to DDoSecrets. You’ll continue working with this dataset when you learn to analyze
    email dumps in [Chapter 6](chapter6.xhtml).
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: Oath Keepers 数据集包含来自极右翼激进组织的数据，该组织参与了 2021 年 1 月 6 日美国国会大厦的暴乱。2021 年 9 月，一名黑客活动分子闯入
    Oath Keepers 的服务器，盗取了该组织的电子邮件消息、聊天记录、会员名单和其他数据，并将其泄露给 DDoSecrets。在你学习如何分析电子邮件数据时，你将继续使用该数据集，内容见[第
    6 章](chapter6.xhtml)。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-296
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*This book works only with the publicly available part of the Oath Keepers
    dataset, which contains email messages and chat logs. To access content like the
    Oath Keepers’ donor and membership lists, which contain PII, contact DDoSecrets.*'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '*本书仅适用于 Oath Keepers 数据集的公开部分，该部分包含电子邮件消息和聊天记录。要访问诸如 Oath Keepers 的捐赠者和会员名单等包含个人身份信息（PII）的内容，请联系
    DDoSecrets。*'
- en: 'Because your home or office internet connection is likely significantly slower
    than a cloud provider’s, it’s inefficient to download a dataset to your laptop
    and then upload it to your remote server. To download the dataset directly to
    your VPS, you’ll use <samp class="SANS_TheSansMonoCd_W5Regular_11">transmission-cli</samp>,
    the command line version of the BitTorrent client you used to download BlueLeaks
    in [Chapter 2](chapter2.xhtml). In your VPS, run the following command to install
    <samp class="SANS_TheSansMonoCd_W5Regular_11">transmission-cli</samp>:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你的家庭或办公室网络连接可能比云服务提供商的网络连接慢得多，将数据集下载到笔记本电脑然后上传到远程服务器效率较低。为了直接将数据集下载到你的 VPS，你将使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">transmission-cli</samp>，这是你在 [第
    2 章](chapter2.xhtml) 中用来下载 BlueLeaks 的 BitTorrent 客户端的命令行版本。在你的 VPS 上运行以下命令来安装
    <samp class="SANS_TheSansMonoCd_W5Regular_11">transmission-cli</samp>：
- en: '[PRE56]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: You can now use the <samp class="SANS_TheSansMonoCd_W5Regular_11">transmission-cli</samp>
    command to download files. You must pass in either the path to a *.torrent* file
    or a magnet link as an argument. In this exercise, you’ll use the torrent file
    available at [*https://<wbr>ddosecrets<wbr>.com<wbr>/wiki<wbr>/Oath<wbr>_Keepers*](https://ddosecrets.com/wiki/Oath_Keepers).
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">transmission-cli</samp>
    命令下载文件。你必须传入 *.torrent* 文件的路径或磁力链接作为参数。在本练习中，你将使用来自 [*https://<wbr>ddosecrets<wbr>.com<wbr>/wiki<wbr>/Oath<wbr>_Keepers*](https://ddosecrets.com/wiki/Oath_Keepers)
    的 torrent 文件。
- en: 'Run the following commands:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE57]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'This creates a new folder called *datasets* on your server, then changes to
    it. Download the torrent file from the link on the DDoSecrets page and load it
    into your BitTorrent client with the following commands:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在你的服务器上创建一个名为 *datasets* 的新文件夹，然后切换到该文件夹。从 DDoSecrets 页面下载 torrent 文件，并通过以下命令将其加载到
    BitTorrent 客户端中：
- en: '[PRE58]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">wget</samp> command downloads
    files—in this case, *Oath_Keepers.torrent*—and saves them in the current folder.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">transmission-cli</samp> command
    downloads the 3.9GB torrent to your server from the BitTorrent swarm and uploads
    parts of it to other parts of the swarm. The <samp class="SANS_TheSansMonoCd_W5Regular_11">-w
    .</samp> arguments tell <samp class="SANS_TheSansMonoCd_W5Regular_11">transmission-cli</samp>
    to download the torrent into the current working folder. (You could change that
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">-w ~/Downloads</samp>, for example,
    if you wanted to download it into the *~/Downloads* folder instead.)
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">wget</samp> 命令下载文件——在这种情况下是 *Oath_Keepers.torrent*——并将其保存在当前文件夹中。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">transmission-cli</samp> 命令将 3.9GB 的 torrent
    文件从 BitTorrent 群组下载到你的服务器，并将其中的一部分上传到群组的其他节点。<samp class="SANS_TheSansMonoCd_W5Regular_11">-w
    .</samp> 参数告诉 <samp class="SANS_TheSansMonoCd_W5Regular_11">transmission-cli</samp>
    将 torrent 文件下载到当前工作文件夹。（如果你想将文件下载到 *~/Downloads* 文件夹，你可以将其改为 <samp class="SANS_TheSansMonoCd_W5Regular_11">-w
    ~/Downloads</samp>。）
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-306
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*If no torrent file is available for a dataset, you can replace the torrent
    filename with a magnet link in double quotes as an argument in the <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">transmission-cli</samp>
    command.*'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果没有可用的 torrent 文件，你可以将 torrent 文件名替换为双引号中的磁力链接，并作为参数传递给 <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">transmission-cli</samp>
    命令。*'
- en: When you’ve finished downloading the torrent, your server will be a seed until
    you quit the program by pressing CTRL-C. While you’re waiting for the dataset
    to finish downloading, or if you’ve finished but want to continue seeding the
    torrent, you can work on your VPS in a separate Byobu shell.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成 torrent 下载后，服务器将成为一个种子，直到你按 CTRL-C 退出程序。等待数据集下载完成时，或者如果你已下载完毕但想继续做种，你可以在另一个
    Byobu shell 中操作你的 VPS。
- en: 'To check how much free space your server has left, run the following command
    after the download is complete:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查服务器剩余的空闲空间，下载完成后运行以下命令：
- en: '[PRE59]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp> command tells you
    how much disk space is free on each connected drive, and the <samp class="SANS_TheSansMonoCd_W5Regular_11">-h</samp>
    argument displays these numbers in human-readable units. After downloading the
    Oath Keepers dataset, I got the following output from these commands on my server:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp> 命令告诉你每个连接的磁盘上剩余的空间，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">-h</samp> 参数以人类可读的单位显示这些数字。在我的服务器上下载 Oath
    Keepers 数据集后，我得到了以下命令输出：
- en: '[PRE60]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: As shown in bold, my root partition mounted on <samp class="SANS_TheSansMonoCd_W5Regular_11">/</samp>
    has 25GB of space, has used 5.8GB, and has 19GB free.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 如粗体所示，我的根分区挂载在<samp class="SANS_TheSansMonoCd_W5Regular_11">/</samp>上，空间为25GB，已使用5.8GB，剩余19GB。
- en: 'Change your working directory to *~/datasets/Oath Keepers*, remembering to
    put the filepath in quotes or escape the space in the path. For example, you could
    run this command from the *~/datasets* folder:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 将工作目录更改为*~/datasets/Oath Keepers*，记得将文件路径放入引号中，或者对路径中的空格进行转义。例如，你可以在*~/datasets*文件夹中运行此命令：
- en: '[PRE61]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Run the following command to find that the Oath Keepers dataset takes up 3.9GB
    of space:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令查找Oath Keepers数据集占用了3.9GB的空间：
- en: '[PRE62]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Next, run the <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ls</samp> command
    to list the files in the *Oath Keepers* folder:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行<samp class="SANS_TheSansMonoCd_W7Bold_B_11">ls</samp>命令列出*Oath Keepers*文件夹中的文件：
- en: '[PRE63]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The output shows that this folder contains a folder called *Oath Keepers.sbd*,
    a 12MB file called *messages.json*, and a 1.4MB file called *messages_old.json*.
    These JSON files are chat logs.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示，这个文件夹包含一个名为*Oath Keepers.sbd*的文件夹，一个12MB的文件*messages.json*，以及一个1.4MB的文件*messages_old.json*。这些JSON文件是聊天记录。
- en: 'Switch to the *Oath Keepers.sbd* folder and run <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ls</samp>
    again:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到*Oath Keepers.sbd*文件夹并再次运行<samp class="SANS_TheSansMonoCd_W7Bold_B_11">ls</samp>：
- en: '[PRE64]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: The output shows that this folder contains 100 files, each representing a different
    inbox full of email.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示，这个文件夹包含100个文件，每个文件代表一个不同的邮箱。
- en: Since you’ll use the Oath Keepers dataset later in the book, next you’ll copy
    it from your VPS to your *datasets* USB disk with the <samp class="SANS_TheSansMonoCd_W5Regular_11">rsync</samp>
    program, which synchronizes local folders and remote folders using SSH.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你将在本书中后续使用Oath Keepers数据集，接下来你将使用<samp class="SANS_TheSansMonoCd_W5Regular_11">rsync</samp>程序将其从VPS复制到*datasets*
    USB磁盘，<samp class="SANS_TheSansMonoCd_W5Regular_11">rsync</samp>程序通过SSH同步本地文件夹和远程文件夹。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-325
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*The* *<samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">scp</samp> command
    (short for “secure copy”) also copies files and folders from your computer to
    a remote server, or vice versa, over SSH. The BlueLeaks hacker likely used a Windows
    version of <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">scp</samp>,*
    pscp64.exe*, to exfiltrate data from the hacked police web servers to a server
    they controlled. For very large folders, however, <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">rsync</samp>
    is often a better choice than <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">scp</samp>,
    since if it fails halfway through, you can rerun the command and it will start
    where it left off.*'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '*<samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">scp</samp>命令（“secure
    copy”的缩写）也可以通过SSH从你的计算机向远程服务器复制文件和文件夹，反之亦然。BlueLeaks黑客很可能使用了Windows版本的<samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">scp</samp>，*
    pscp64.exe*，将数据从被黑的警察网站服务器转移到他们控制的服务器上。然而，对于非常大的文件夹，<samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">rsync</samp>通常比<samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">scp</samp>更合适，因为如果中途失败，你可以重新运行命令，它会从上次停止的地方继续。*'
- en: 'Open a terminal running locally on your computer (not SSHed to your VPS) and
    run <samp class="SANS_TheSansMonoCd_W7Bold_B_11">which rsync</samp> to check whether
    <samp class="SANS_TheSansMonoCd_W5Regular_11">rsync</samp> is installed. If so,
    the command returns the path to the program, something like */usr/bin/rsync*.
    If not, you’ll see no output. Windows with WSL and Linux users can install <samp
    class="SANS_TheSansMonoCd_W5Regular_11">rsync</samp> with the following command:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个本地计算机上的终端（而不是SSH到你的VPS），并运行<samp class="SANS_TheSansMonoCd_W7Bold_B_11">which
    rsync</samp>检查是否已安装<samp class="SANS_TheSansMonoCd_W5Regular_11">rsync</samp>。如果已安装，命令会返回程序的路径，例如*/usr/bin/rsync*。如果没有，则不会有任何输出。Windows（带WSL）和Linux用户可以通过以下命令安装<samp
    class="SANS_TheSansMonoCd_W5Regular_11">rsync</samp>：
- en: '[PRE65]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'macOS users can install it with the following command:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: macOS用户可以通过以下命令安装它：
- en: '[PRE66]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'To copy a file from a remote server to your local computer, run the following
    command:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 要从远程服务器复制文件到本地计算机，请运行以下命令：
- en: '[PRE67]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">-av</samp> argument is a combination
    of <samp class="SANS_TheSansMonoCd_W5Regular_11">-a</samp> (short for <samp class="SANS_TheSansMonoCd_W5Regular_11">--archive</samp>),
    which preserves the file permissions in the copy you’re making, and <samp class="SANS_TheSansMonoCd_W5Regular_11">-v</samp>
    (short for - -<samp class="SANS_TheSansMonoCd_W5Regular_11">verbose</samp>), which
    outputs each filename as it copies the files. The <samp class="SANS_TheSansMonoCd_W5Regular_11">--progress</samp>
    argument displays progress bars for each file as it’s copying. The <samp class="SANS_TheSansMonoCd_W5Regular_11">rsync</samp>
    command will SSH into the server <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">remote_host</samp>
    with the username <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">remote_user</samp>.
    If it authenticates successfully, it will download the file or folder at <samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">remote_path</samp> and save it
    on your computer at <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">local_path</samp>.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">-av</samp>参数是<­samp class="SANS_TheSansMonoCd_W5Regular_11">-a</samp>（即<­samp
    class="SANS_TheSansMonoCd_W5Regular_11">--archive</samp>的缩写），它可以在复制时保留文件权限，和<­samp
    class="SANS_TheSansMonoCd_W5Regular_11">-v</samp>（即<­samp class="SANS_TheSansMonoCd_W5Regular_11">--verbose</samp>的缩写），它会在复制文件时输出每个文件的文件名。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">--progress</samp>参数会显示每个文件的进度条。<samp class="SANS_TheSansMonoCd_W5Regular_11">rsync</samp>命令会通过SSH连接到服务器<samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">remote_host</samp>，使用用户名<samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">remote_user</samp>。如果认证成功，它会下载<samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">remote_path</samp>路径下的文件或文件夹，并将其保存到你电脑上的<samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">local_path</samp>路径。
- en: 'For example, here’s how I’d download the Oath Keepers dataset from my VPS to
    my *datasets* USB disk:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下面是我如何将Oath Keepers数据集从我的VPS下载到我的*datasets* USB磁盘：
- en: '[PRE68]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: In this case, <samp class="SANS_TheSansMonoCd_W5Regular_11">root@178.128.22.151:"~/datasets/Oath\
    Keepers"</samp> is the <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">remote
    _user</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">@</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">remote_host</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">:</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">remote_path</samp>
    argument, since the *Oath Keepers* folder is in the *datasets* folder in the root
    user’s home folder on my VPS. I put the remote path in quotes and escape the space
    in the filename, telling my local shell that <samp class="SANS_TheSansMonoCd_W5Regular_11">root@178.128.22.151:"~/datasets/Oath\
    Keepers"</samp> is a single argument. The <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">local_path</samp>
    argument is the <samp class="SANS_TheSansMonoCd_W5Regular_11">/media/micah/datasets/</samp>
    path to my *datasets* USB disk.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，<samp class="SANS_TheSansMonoCd_W5Regular_11">root@178.128.22.151:"~/datasets/Oath\
    Keepers"</samp>是<samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">remote_user</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">@</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">remote_host</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">:</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">remote_path</samp>参数，因为*Oath
    Keepers*文件夹位于我的VPS的根用户主目录下的*datasets*文件夹中。我将远程路径放在引号中，并用反斜杠转义文件名中的空格，这样可以告诉本地shell，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">root@178.128.22.151:"~/datasets/Oath\
    Keepers"</samp>是一个单独的参数。<samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">local_path</samp>参数是指向我的*datasets*
    USB磁盘的<samp class="SANS_TheSansMonoCd_W5Regular_11">/media/micah/datasets/</samp>路径。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-337
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*You can also use <samp class="mono">rsync</samp> to upload files from your
    computer to a remote server—just put the <samp class="mono">local_path</samp>
    argument first, as the source, and put the <samp class="mono">remote_user@remote_host:remote_path</samp>
    argument second, as the destination.*'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '*你也可以使用<samp class="mono">rsync</samp>将文件从你的计算机上传到远程服务器——只需将<samp class="mono">local_path</samp>参数放在前面作为源，<samp
    class="mono">remote_user@remote_host:remote_path</samp>放在后面作为目标。*'
- en: 'Here’s the output I get when I run this command:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我运行这个命令时获得的输出：
- en: '[PRE69]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">rsync</samp> command copies
    every file, one at a time, from the remote folder to the local folder over SSH,
    displaying a line after each filename that shows the file’s download speed and
    progress. You can press CTRL-C to cancel the command, then rerun that command,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">rsync</samp> should continue
    where it left off. This is especially useful when you need to copy gigabytes or
    terabytes of data spread across millions of files—if the file transfer fails,
    you can pick up where you left off.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">rsync</samp> 命令通过 SSH 从远程文件夹一个个复制文件到本地文件夹，并在每个文件名后显示该文件的下载速度和进度。你可以按
    CTRL-C 取消该命令，然后重新运行，<samp class="SANS_TheSansMonoCd_W5Regular_11">rsync</samp>
    将从中断处继续。这在需要复制数千兆或数太字节的数据并且数据分布在数百万个文件中的时候尤其有用——如果文件传输失败，你可以从中断点继续。
- en: Once <samp class="SANS_TheSansMonoCd_W5Regular_11">rsync</samp> finishes running,
    you’ll have downloaded a local copy of the Oath Keepers dataset to your *datasets*
    USB disk. You’ll use this dataset again in [Chapter 6](chapter6.xhtml), when you
    learn techniques for researching email dumps.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 <samp class="SANS_TheSansMonoCd_W5Regular_11">rsync</samp> 完成运行，你将把 Oath
    Keepers 数据集的本地副本下载到你的 *datasets* USB 硬盘中。你将在[第六章](chapter6.xhtml)中再次使用这个数据集，学习研究电子邮件泄露数据的技巧。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">WARNING</samp>
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">警告</samp>
- en: '*Destroy your VPS from the DigitalOcean web console when you’re done with it.
    Using it for an hour or two should cost you only a few cents, but the bill can
    get expensive if you don’t pay attention.*'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '*在你用完数字海洋的 VPS 后，可以通过数字海洋的 Web 控制台销毁它。使用一两个小时只会花费几分钱，但如果不注意，账单可能会变得很昂贵。*'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">总结</samp>
- en: In this chapter, you’ve put your command line skills to the test, unzipping
    the compressed files in BlueLeaks and learning to quickly search and sort datasets.
    You also worked with servers in the cloud and briefly explored the Oath Keepers
    dataset.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已经通过命令行技巧进行了实践，解压了 BlueLeaks 中的压缩文件，并学会了如何快速搜索和排序数据集。你还与云服务器进行了操作，并简要探索了
    Oath Keepers 数据集。
- en: 'In the next chapter, you’ll continue expanding your command line skills and
    learn two new tools: Docker, which allows you to run Linux software on any operating
    system, and Aleph, which allows you to search datasets by keyword.'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将继续扩展你的命令行技能，并学习两个新工具：Docker，它允许你在任何操作系统上运行 Linux 软件；Aleph，它允许你通过关键字搜索数据集。
