- en: '[10](nsp-boxall502581-0008.xhtml#rch10)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[10](nsp-boxall502581-0008.xhtml#rch10)'
- en: Writing Your Own AVR Libraries
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写你自己的 AVR 库
- en: '![](images/nsp-boxall502581-ct.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-boxall502581-ct.jpg)'
- en: Cast your mind back to [Project 15](nsp-boxall502581-0013.xhtml#pro15) in [Chapter
    3](nsp-boxall502581-0013.xhtml#ch03) , which required us to convert the voltage
    measured by the TMP36 temperature sensor to degrees Celsius. To complete those
    calculations, we called the math library and used the functions within it to perform
    operations on floating-point numbers. Using this library meant we didn’t have
    to create our own mathematical functions or include their code in the project,
    saving time and effort.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下[项目 15](nsp-boxall502581-0013.xhtml#pro15)中的内容，它要求我们将 TMP36 温度传感器测量的电压转换为摄氏度。在完成这些计算时，我们调用了数学库，并使用了其中的函数对浮点数进行操作。使用这个库意味着我们不必自己编写数学函数或将其代码包含在项目中，从而节省了时间和精力。
- en: In this chapter, you’ll learn to create your own libraries, allowing you to
    reuse tested functions in multiple projects to increase your efficiency. You’ll
    build a simple library for a repetitive task, a library that accepts values to
    perform a function, and a library that processes data from a sensor and returns
    values in an easy-to-use form. These examples will equip you with the skills required
    to make your own custom libraries.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何创建自己的库，从而在多个项目中复用已测试的函数，提高工作效率。你将构建一个用于重复任务的简单库，一个接受值以执行功能的库，以及一个处理来自传感器的数据并以易于使用的形式返回值的库。这些示例将帮助你掌握制作自定义库所需的技能。
- en: '[Creating Your First Library](nsp-boxall502581-0008.xhtml#rah1201)'
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[创建你的第一个库](nsp-boxall502581-0008.xhtml#rah1201)'
- en: In this section you’ll create your first library, which you’ll then use in [Project
    41](nsp-boxall502581-0020.xhtml#pro41) . First, consider the functions defined
    in [Listing 10-1](nsp-boxall502581-0020.xhtml#list1001) , `blinkSlow()` and `blinkFast()`
    . These two functions blink an LED (connected via a resistor between PORTB0 and
    GND) at a slow or fast rate, respectively.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，你将创建你的第一个库，随后你将在[项目 41](nsp-boxall502581-0020.xhtml#pro41)中使用它。首先，考虑[列表
    10-1](nsp-boxall502581-0020.xhtml#list1001)中定义的函数，`blinkSlow()` 和 `blinkFast()`。这两个函数分别以慢速或快速的频率使LED（通过一个电阻连接在PORTB0和GND之间）闪烁。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 10-1: Example code that demonstrates two functions that blink LEDs
    slow and fast'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 10-1：示例代码，展示了两个函数，分别使LED以慢速和快速闪烁
- en: The custom functions to blink the LED slowly or rapidly are convenient, but
    it’s not very efficient to enter them into your project code every time you want
    to use them. However, if you offload the code that describes the functions into
    a library, you can simply call the library with one line in future projects, then
    use the functions as needed without rewriting them. Let’s create such a library
    now.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 用于缓慢或快速闪烁LED的自定义函数很方便，但每次想要使用时都将它们输入到项目代码中并不高效。然而，如果将描述这些函数的代码转移到库中，你可以在未来的项目中通过一行代码调用该库，然后根据需要使用这些函数，而无需重新编写它们。现在让我们创建一个这样的库。
- en: '[Anatomy of a Library](nsp-boxall502581-0008.xhtml#rbh1201)'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[库的构成](nsp-boxall502581-0008.xhtml#rbh1201)'
- en: 'A library consists of two files: *library.h* , the header file, and *library.c*
    , the source file, where “library” is a placeholder for an individual library’s
    name. We’ll call our first example library the *blinko* library, so our two files
    will be *blinko.h* and *blinko.c* .'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一个库由两个文件组成：*library.h*，头文件，和 *library.c*，源文件，其中“library”是个占位符，代表某个具体库的名称。我们将第一个示例库称为
    *blinko* 库，因此我们的两个文件将是 *blinko.h* 和 *blinko.c*。
- en: 'A header file contains the definitions of the functions, variables, or other
    components the library contains. The following is our header file:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 头文件包含库中函数、变量或其他组件的定义。以下是我们的头文件：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The file declares the names of the two functions inside the library, `void blinkSlow()`
    and `void blinkFast()` . Each of these lines is followed by a comment describing
    the function’s purpose. Get into the habit of including comments like these about
    the custom functions in your library.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件声明了库中两个函数的名称，`void blinkSlow()` 和 `void blinkFast()`。每行后面都有一个注释，描述了函数的目的。养成在库中的自定义函数旁边加上类似注释的习惯。
- en: 'Our source file contains the code that will be made available to the main code
    in [Project 41](nsp-boxall502581-0020.xhtml#pro41) when we include this library:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的源文件包含了代码，当我们包含这个库时，它将提供给[项目 41](nsp-boxall502581-0020.xhtml#pro41)中的主代码：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The *blinko.c* file is identical to the first section of [Listing 10-1](nsp-boxall502581-0020.xhtml#list1001)
    . We first include the other libraries required by the code in our own library
    ❶—this allows us to use the functions for I/O and `_delay_ms()` . We then add
    the `blinkSlow()` ❷ and `blinkFast()` ❸ custom functions we want to include in
    the library.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*blinko.c* 文件与 [清单 10-1](nsp-boxall502581-0020.xhtml#list1001) 中的第一部分相同。我们首先在我们自己的库中包含代码所需的其他库
    ❶——这使得我们能够使用 I/O 函数和 `_delay_ms()`。然后，我们添加了自定义函数 `blinkSlow()` ❷ 和 `blinkFast()`
    ❸，它们将包含在库中。'
- en: '[Installing the Library](nsp-boxall502581-0008.xhtml#rbh1202)'
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[安装库](nsp-boxall502581-0008.xhtml#rbh1202)'
- en: To make the library available to the main code for [Project 41](nsp-boxall502581-0020.xhtml#pro41)
    , we have to do two things. First, we copy the header and source files into the
    same project directory as the *main.c* file and Makefile, as shown in the directory
    listing screen capture in [Figure 10-1](nsp-boxall502581-0020.xhtml#f10001) .
    You can find these in the *Project 41* subfolder of this book’s *Chapter 10* folder.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让库可以在 [项目 41](nsp-boxall502581-0020.xhtml#pro41) 的主代码中使用，我们需要做两件事。首先，我们将头文件和源文件复制到与
    *main.c* 文件和 Makefile 位于同一项目目录中，如 [图 10-1](nsp-boxall502581-0020.xhtml#f10001)
    中的目录列表所示。你可以在本书 *第 10 章* 文件夹的 *项目 41* 子文件夹中找到这些文件。
- en: '![Contents of the Project 41 subfolder (Makefile, blinko.c, blinko.h, main.c)](images/nsp-boxall502581-f10001.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![项目 41 子文件夹的内容（Makefile、blinko.c、blinko.h、main.c）](images/nsp-boxall502581-f10001.jpg)'
- en: 'Figure 10-1: Place the library files in the same directory as the project files.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-1：将库文件放置在与项目文件相同的目录中。
- en: Second, we edit the project’s Makefile so that the toolchain knows to look for
    the library when compiling the code to upload to the microcontroller. To do so,
    we add `blinko.c` after `main.o` in the Makefile’s `OBJECTS` line, as shown in
    [Figure 10-2](nsp-boxall502581-0020.xhtml#f10002) .
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第二，我们编辑项目的 Makefile，使得工具链知道在编译代码并上传到微控制器时需要查找库。为此，我们将 `blinko.c` 添加到 Makefile
    中 `OBJECTS` 行的 `main.o` 后，如 [图 10-2](nsp-boxall502581-0020.xhtml#f10002) 所示。
- en: '![Line 22 of the Makefile for Project 41: OBJECTS = main.o blinko.c](images/nsp-boxall502581-f10002.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![项目 41 的 Makefile 第 22 行：OBJECTS = main.o blinko.c](images/nsp-boxall502581-f10002.jpg)'
- en: 'Figure 10-2: Adding the *blinko.c* library to the Makefile for [Project 41](nsp-boxall502581-0020.xhtml#pro41)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-2：将 *blinko.c* 库添加到 [项目 41](nsp-boxall502581-0020.xhtml#pro41) 的 Makefile
    中
- en: Now that we’ve installed the library, let’s put it to the test by using it to
    program a simple circuit.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了库，让我们通过用它来编程一个简单的电路来测试它。
- en: '[Project 41: Your First Library](nsp-boxall502581-0008.xhtml#rpro41)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目 41：你的第一个库](nsp-boxall502581-0008.xhtml#rpro41)'
- en: 'You will need the following hardware for this project:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下硬件来完成这个项目：
- en: • USBasp programmer
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • USBasp 编程器
- en: • Solderless breadboard
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 无焊面包板
- en: • ATmega328P-PU microcontroller
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • ATmega328P-PU 微控制器
- en: • One LED
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 一个 LED
- en: • One 560 Ω resistor
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 一个 560 Ω 电阻
- en: Assemble the circuit shown in [Figure 10-3](nsp-boxall502581-0020.xhtml#f10003)
    on your breadboard.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 按照 [图 10-3](nsp-boxall502581-0020.xhtml#f10003) 中的电路图，在面包板上组装电路。
- en: '![Schematic diagram for Project 41](images/nsp-boxall502581-f10003.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![项目 41 的原理图](images/nsp-boxall502581-f10003.jpg)'
- en: 'Figure 10-3: Schematic for [Project 41](nsp-boxall502581-0020.xhtml#pro41)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-3：[项目 41](nsp-boxall502581-0020.xhtml#pro41)的原理图
- en: Keep this circuit together, as you’ll use it again in the [following project](nsp-boxall502581-0020.xhtml#pro42)
    .
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 保持这个电路完整，因为你将在 [下一个项目](nsp-boxall502581-0020.xhtml#pro42) 中再次使用它。
- en: Next, open a terminal window, navigate to the *Project 41* subfolder of this
    book’s *Chapter 10* folder, and enter the command `make flash` . The LED should
    blink rapidly five times, then blink slowly five times, then repeat.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开终端窗口，导航到本书 *第 10 章* 文件夹中的 *项目 41* 子文件夹，然后输入命令 `make flash`。LED 应该快速闪烁五次，然后慢慢闪烁五次，之后重复。
- en: 'The code for this project is quite simple:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目的代码相当简单：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: First, we include our new library ❶. (Note that the custom library name is surrounded
    by quotes, not left and right angle brackets.) We then take advantage of our library
    functions to blink the LED ❷.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们包含我们的新库 ❶。（注意，自定义库名称需要用引号括起来，而不是左右尖括号。）然后，我们利用库函数来让 LED 闪烁 ❷。
- en: Although this project is a somewhat minimal demonstration, it illustrates the
    basic process for creating and using your own AVR libraries. Next, we’ll look
    at some more complex examples.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个项目是一个相对简洁的演示，但它展示了创建和使用自定义 AVR 库的基本过程。接下来，我们将看一些更复杂的示例。
- en: '[Creating a Library That Accepts Values to Perform a Function](nsp-boxall502581-0008.xhtml#rah1202)'
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[创建一个接受值并执行功能的库](nsp-boxall502581-0008.xhtml#rah1202)'
- en: 'Now that you know how to create a basic library, you’re ready for the next
    level: creating a library that can accept values and act on them. Again, we’ll
    begin with an example function and convert that into a library.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何创建一个基础库，接下来你可以进入下一个阶段：创建一个能够接受值并对其进行操作的库。我们将再次从一个示例函数开始，并将其转换为一个库。
- en: Consider the code in [Listing 10-2](nsp-boxall502581-0020.xhtml#list1002) ,
    which uses the `blinkType()` function to set the number of times to blink the
    LED connected to PORTB0, as well as the on/off period.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下 [列表 10-2](nsp-boxall502581-0020.xhtml#list1002) 中的代码，它使用 `blinkType()`
    函数来设置连接到 PORTB0 的 LED 闪烁的次数，以及开关的时间间隔。
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 10-2: An example sketch that demonstrates our LED blinking function,
    which will be converted into a library'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 10-2：一个示例代码，展示了我们的 LED 闪烁函数，它将被转换为一个库
- en: As you can see, `blinkType()` accepts two values and then acts on them. The
    `blinks` value is the number of times you’d like to turn the onboard LED on and
    off, and the `duration` value is the delay in milliseconds for each blink. Let’s
    turn this into a library named *blinko2* .
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`blinkType()` 接受两个值并对其进行操作。`blinks` 值是你希望开启和关闭板载 LED 的次数，而 `duration` 值是每次闪烁的延迟时间（以毫秒为单位）。让我们将其转化为一个名为
    *blinko2* 的库。
- en: 'First we need to create the *blinko2.h* header file, which contains the definitions
    of the functions and variables used inside the library:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建 *blinko2.h* 头文件，该文件包含库中使用的函数和变量的定义：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As before, we declare the name of the function inside the library, followed
    by a comment describing its purpose. In this case, we provide comments describing
    the function’s parameters.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们在库中声明函数的名称，并随后添加注释描述其用途。在本例中，我们提供了描述函数参数的注释。
- en: 'Next, we build our *blinko2.c* source file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们构建我们的 *blinko2.c* 源文件：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The source file includes the necessary libraries for operating our library ❶,
    then our library’s function ❸, as usual. The line at ❷ is required for those of
    you using Apple computers, as the version of the compiler is slightly different.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 源文件包括操作我们库所需的库 ❶，然后是我们库的函数 ❸，与以往一样。❷ 行是为那些使用 Apple 电脑的用户准备的，因为编译器的版本稍有不同。
- en: The next step is to edit the Makefile of the project in which we’ll use this
    library, which you can find in the *Project 42* subfolder of the book’s *Chapter
    10* folder. Add the library name `blinko2.c` after `main.o` in the `OBJECTS` line,
    as shown in [Figure 10-4](nsp-boxall502581-0020.xhtml#f10004) .
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是编辑我们将使用此库的项目的 Makefile，你可以在本书的 *第 10 章* 文件夹的 *Project 42* 子文件夹中找到它。在 `OBJECTS`
    行的 `main.o` 后面添加库名 `blinko2.c`，如 [图 10-4](nsp-boxall502581-0020.xhtml#f10004)
    所示。
- en: '![Line 22 of the Makefile for Project 42: OBJECTS = main.o blinko2.c](images/nsp-boxall502581-f10004.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![项目 42 的 Makefile 第 22 行：OBJECTS = main.o blinko2.c](images/nsp-boxall502581-f10004.jpg)'
- en: 'Figure 10-4: Adding the *blinko2.c* library to the Makefile for [Project 42](nsp-boxall502581-0020.xhtml#pro42)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-4：将 *blinko2.c* 库添加到 [项目 42](nsp-boxall502581-0020.xhtml#pro42) 的 Makefile
    中
- en: Now that you have the library set up, let’s test it out.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经设置好了库，让我们来测试一下。
- en: '[Project 42: Using the blinko2.c Library](nsp-boxall502581-0008.xhtml#rpro42)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目 42：使用 blinko2.c 库](nsp-boxall502581-0008.xhtml#rpro42)'
- en: You can use the hardware you assembled for [Project 41](nsp-boxall502581-0020.xhtml#pro41)
    for this project as well. Open a terminal window, navigate to the *Project 42*
    subfolder of this book’s *Chapter 10* folder, and enter the command `make flash`
    . The LED should blink rapidly 10 times, then blink slowly 5 times, then repeat.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用你为 [项目 41](nsp-boxall502581-0020.xhtml#pro41) 组装的硬件来完成这个项目。打开终端窗口，进入本书
    *第 10 章* 文件夹的 *Project 42* 子文件夹，并输入命令 `make flash`。LED 应该快速闪烁 10 次，然后慢速闪烁 5 次，之后重复。
- en: 'Let’s see how this works:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这是如何实现的：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As before, we include our new library ❶, then use that library’s function to
    blink the LED rapidly with the short duration ❷, then slowly with a longer duration
    ❸. Again, this is intended as a simple demonstration that gives you the framework
    for creating your own AVR libraries with functions that can accept values. If
    you’d like a challenge, you can try creating your own PWM library based on the
    example code from [Chapter 7](nsp-boxall502581-0017.xhtml#ch07) .
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，我们包含了新的库 ❶，然后使用该库的函数，以短时间间隔快速闪烁LED ❷，再以较长时间间隔慢速闪烁 ❸。同样，这只是一个简单的示范，给你提供了创建自己AVR库的框架，函数可以接受值。如果你想挑战自己，可以尝试基于[第7章](nsp-boxall502581-0017.xhtml#ch07)的示例代码，创建你自己的PWM库。
- en: '[Creating a Library That Processes Data and Returns Values](nsp-boxall502581-0008.xhtml#rah1203)'
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[创建一个处理数据并返回值的库](nsp-boxall502581-0008.xhtml#rah1203)'
- en: For this chapter’s [final project](nsp-boxall502581-0020.xhtml#pro43) , you’ll
    learn how to create a library that can return values back to the main code. We’ll
    create a “thermometer” library that not only returns values from an Analog Devices
    TMP36 temperature sensor but also has a function to simplify displaying numbers
    on a seven-segment LED display.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的[最终项目](nsp-boxall502581-0020.xhtml#pro43)中，你将学习如何创建一个可以将值返回到主代码的库。我们将创建一个“温度计”库，不仅能从模拟设备的TMP36温度传感器返回值，还包含一个简化在七段显示器上显示数字的函数。
- en: 'Our library source code, which you’ll find in the *Project 43* subfolder of
    this book’s *Chapter 10* folder, contains two functions: one to return the value
    in degrees Celsius from the temperature sensor as a float variable, and another
    that accepts an integer between 0 and 99 to display on the single-digit LED display
    from [Project 15](nsp-boxall502581-0013.xhtml#pro15) . Let’s take a look at the
    *temperature.h* header file defining the functions and variables used inside the
    library:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的库源代码，你可以在本书*第10章*文件夹下的*项目43*子文件夹中找到，包含两个函数：一个返回温度传感器中的摄氏度值作为浮动变量，另一个接受0到99之间的整数，在[项目
    15](nsp-boxall502581-0013.xhtml#pro15)的单数字LED显示器上显示。我们来看看*temperature.h*头文件，定义了库中使用的函数和变量：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As usual, we declare the names of the functions inside the library and provide
    comments describing their use. Note that the type of the `readTMP36()` function
    is `float` , not `void` , as this function will return a floating-point value
    for the temperature to our project’s main code.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，我们声明了库内函数的名称，并提供了描述其用途的注释。请注意，`readTMP36()`函数的类型是`float`，而不是`void`，因为该函数会返回一个浮动的温度值给我们项目的主代码。
- en: 'Next, let’s examine our *thermometer.c* source file:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们查看一下我们的*thermometer.c*源文件：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: All the code in the library should be familiar to you by now. First, we include
    the required libraries for use in our library ❶. The `readTMP36()` function ❷
    sends the temperature back in degrees Celsius, using the `return` function ❸ in
    the same way as the custom function explained in [Project 11](nsp-boxall502581-0013.xhtml#pro11)
    in [Chapter 3](nsp-boxall502581-0013.xhtml#ch03) . The `displayNumber(uint8_t
    value)` function displays an integer between 0 and 99 on the single-digit LED
    display ❹.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 库中的所有代码现在对你应该都很熟悉了。首先，我们包含了用于我们库的必要库 ❶。`readTMP36()`函数 ❷返回摄氏度的温度，使用`return`函数
    ❸，与[项目11](nsp-boxall502581-0013.xhtml#pro11)中解释的自定义函数类似，位于[第3章](nsp-boxall502581-0013.xhtml#ch03)
    。`displayNumber(uint8_t value)`函数则在单数字LED显示器上显示0到99之间的整数 ❹。
- en: As before, to make this library available for use in [Project 43](nsp-boxall502581-0020.xhtml#pro43)
    , we add it to line 22 in the Makefile, as shown in [Figure 10-5](nsp-boxall502581-0020.xhtml#f10005)
    .
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如之前所示，为了使这个库可以在[项目 43](nsp-boxall502581-0020.xhtml#pro43)中使用，我们将其添加到Makefile的第22行，如[图10-5](nsp-boxall502581-0020.xhtml#f10005)所示。
- en: '![Line 22 of the Makefile for Project 43: OBJECTS = main.o thermometer.c](images/nsp-boxall502581-f10005.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![项目43的Makefile第22行：OBJECTS = main.o thermometer.c](images/nsp-boxall502581-f10005.jpg)'
- en: 'Figure 10-5: Adding the *thermometer.c* library to the Makefile for [Project
    43](nsp-boxall502581-0020.xhtml#pro43)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-5：将*thermometer.c*库添加到[项目 43](nsp-boxall502581-0020.xhtml#pro43)的Makefile中
- en: You’re now ready to build your digital thermometer using this library.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经准备好使用这个库来构建你的数字温度计。
- en: '[Project 43: Creating a Digital Thermometer with the thermometer.c Library](nsp-boxall502581-0008.xhtml#rpro43)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目 43：使用thermometer.c库创建数字温度计](nsp-boxall502581-0008.xhtml#rpro43)'
- en: In this project, you’ll read an analog temperature sensor (the TMP36) with your
    microcontroller, which will use the seven-segment LED from [Project 15](nsp-boxall502581-0013.xhtml#pro15)
    to display the temperature one digit at a time.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用微控制器读取模拟温度传感器（TMP36），并利用 [项目 15](nsp-boxall502581-0013.xhtml#pro15)
    的七段 LED 显示器一次显示一个数字的温度。
- en: 'You’ll need the following hardware:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下硬件：
- en: • USBasp programmer
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • USBasp 编程器
- en: • Solderless breadboard
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 无焊接面包板
- en: • 5 V breadboard power supply
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 5V 面包板电源
- en: • ATmega328P-PU microcontroller
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • ATmega328P-PU 微控制器
- en: • One TMP36 temperature sensor
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 一个 TMP36 温度传感器
- en: • One common-cathode seven-segment LED display
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 一个共阴极七段 LED 显示器
- en: • Seven 560 Ω resistors (R1–R7)
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 七个 560 Ω 电阻（R1–R7）
- en: • 0.1 μF ceramic capacitor
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 0.1 μF 陶瓷电容
- en: • Jumper wires
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 跳线
- en: Assemble your circuit as shown in [Figure 10-6](nsp-boxall502581-0020.xhtml#f10006)
    .
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 按照 [图 10-6](nsp-boxall502581-0020.xhtml#f10006) 所示组装你的电路。
- en: '![Schematic diagram for Project 43](images/nsp-boxall502581-f10006.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![项目 43 的电路图](images/nsp-boxall502581-f10006.jpg)'
- en: 'Figure 10-6: Schematic for [Project 43](nsp-boxall502581-0020.xhtml#pro43)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '图 10-6: [项目 43](nsp-boxall502581-0020.xhtml#pro43)的电路图'
- en: Note that the power supply to the project must be as close to 5 V as possible,
    since the TMP36 is an analog sensor whose output is a function of the supply voltage
    and the temperature.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，项目的电源必须尽可能接近 5V，因为 TMP36 是一个模拟传感器，其输出与电源电压和温度有关。
- en: Now open a terminal window, navigate to the *Project 43* subfolder in the *Chapter
    10* folder, and upload the code for [Project 43](nsp-boxall502581-0020.xhtml#pro43)
    as usual. Once you’ve completed this, you should be presented with the temperature
    in degrees Celsius on the LED display—first the left-hand digit, then the right.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开终端窗口，导航到 *第 10 章* 文件夹中的 *项目 43* 子文件夹，并像往常一样上传 [项目 43](nsp-boxall502581-0020.xhtml#pro43)
    的代码。完成后，你应该能在 LED 显示器上看到摄氏度温度——先显示左侧数字，再显示右侧数字。
- en: 'Let’s see how this works:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下这是如何工作的：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now that we have placed the measurement and calculation code in the thermometer
    library, you can see how simple the main code can be. We first include the required
    libraries ❶ and define the function to start the ADC ❷. In the main section of
    the code we declare two variables ❸, to store the value from the temperature library
    and to pass to the `displayNumber()` function. We start the ADC for the TMP36
    temperature sensor ❹, then set the pins on PORTB to outputs for the LED display
    ❺.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经将测量和计算代码放入温度计库，你可以看到主代码是多么简单。我们首先包含所需的库 ❶，并定义启动 ADC 的函数 ❷。在代码的主要部分，我们声明了两个变量
    ❸，用于存储温度库中的值并传递给 `displayNumber()` 函数。我们为 TMP36 温度传感器启动 ADC ❹，然后设置 PORTB 上的引脚为
    LED 显示器的输出 ❺。
- en: Finally, we retrieve the temperature from the sensor via the `readTMP36()` function
    from our thermometer library ❻, convert it to an integer, and show it on the LED
    display ❼.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过温度计库中的 `readTMP36()` 函数从传感器获取温度，将其转换为整数，并显示在 LED 显示器上 ❼。
- en: For another challenge, see if you can modify `readTMP36()` so that it can return
    temperatures in either Celsius or Fahrenheit, or make your own ADC initialization
    or PWM library, or simplify the numerical display code in `displayNumber(uint8_t
    value)` . Whichever you choose, I hope you see how easy it is to rework your own
    custom functions into a convenient library. This is a key tool in your box of
    programming tricks.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 作为另一个挑战，看看你能否修改 `readTMP36()`，使其能够返回摄氏度或华氏度的温度，或者自己制作一个 ADC 初始化或 PWM 库，或者简化
    `displayNumber(uint8_t value)` 中的数字显示代码。不管你选择哪个，我希望你能看到将自己的自定义函数转化为便捷库是多么容易。这是你编程工具箱中的一个关键工具。
- en: In the [next chapter](nsp-boxall502581-0021.xhtml#ch11) , you’ll learn how to
    use many more interesting and useful parts via the SPI data bus, including LED
    display drivers, shift registers, and analog-to-digital converters.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [下一章](nsp-boxall502581-0021.xhtml#ch11) 中，你将学习如何通过 SPI 数据总线使用更多有趣且实用的组件，包括
    LED 显示驱动器、移位寄存器和模拟到数字转换器。
