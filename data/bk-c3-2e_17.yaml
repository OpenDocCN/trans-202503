- en: '**17**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**17**'
- en: '**GRIDLAYOUT**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**GRIDLAYOUT**'
- en: '![Image](graphics/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/common-01.jpg)'
- en: Grids are a fundamental design technique. Simple grids have been used by calligraphers
    since medieval times, and the modern typographic grid has been in use since the
    second half of the 20th century. For a few years now, efforts have been made to
    bring grid-based design to the Web, with a number of frameworks using floats,
    padding, and margins to emulate the possibilities of print, although these efforts
    have always felt like somewhat of a fragile hack.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 网格是一个基本的设计技巧。自中世纪以来，书法家就使用简单的网格，而现代排版网格自 20 世纪下半叶开始使用。近年来，已经有一些努力将基于网格的设计引入到网页中，许多框架使用浮动、内边距和外边距来模拟印刷的可能性，尽管这些努力总是显得有些脆弱的临时解决方案。
- en: Recently, however, browsers have begun to implement a native CSS grid layout
    system, as detailed in the Grid Layout Module (*[http://www.w3.org/TR/css-grid-1/](http://www.w3.org/TR/css-grid-1/)*).
    This module provides a series of properties designed specifically to create grids
    on screen, meaning the developer no longer has to hack them together from existing
    properties and behaviors.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最近浏览器开始实现原生的 CSS 网格布局系统，具体内容可以参考网格布局模块 (*[http://www.w3.org/TR/css-grid-1/](http://www.w3.org/TR/css-grid-1/)*)。该模块提供了一系列专门设计用于在屏幕上创建网格的属性，这意味着开发者不再需要将它们从现有的属性和行为中拼凑出来。
- en: The full range of properties in the Grid Layout Module is quite extensive, so
    I’ll focus on the most immediately useful aspects and not get too bogged down
    in detail that could be potentially confusing. When appropriate, I’ll flag spots
    where I’ve omitted some detail.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 网格布局模块中的属性范围非常广泛，因此我将重点讲解最直接有用的部分，而不会陷入那些可能会造成混淆的细节中。在合适的地方，我会标明我省略了一些细节。
- en: '**Grid Terminology**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**网格术语**'
- en: Before introducing the new CSS grid syntax, I’ll explain some of the terminology
    used in the Grid Layout Module. Even if you think you’re familiar with typographic
    grids, take time to read through these definitions as the terminology used in
    CSS grids is quite distinct.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍新的 CSS 网格语法之前，我将解释一下在网格布局模块中使用的一些术语。即使你认为自己对排版网格已经很熟悉，也请花时间阅读这些定义，因为 CSS
    网格中使用的术语与传统排版网格有很大不同。
- en: 'The following are the key terms used in the Grid Layout Module:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是网格布局模块中使用的关键术语：
- en: '**Grid container** The container element that acts as the boundary and sets
    the dimensions of the grid.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**网格容器** 作为边界的容器元素，定义网格的维度。'
- en: '**Grid lines** The dividing lines between rows and columns. These lines are
    notional, not actual.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**网格线** 行和列之间的分隔线。这些线是概念性的，而非实际存在的。'
- en: '**Grid tracks** A shorthand name for both rows and columns. Each column or
    row created in the grid is referred to as a *track*. Tracks are the spaces between
    lines.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**网格轨道** 行和列的简写名称。网格中创建的每一列或行都被称为 *轨道*。轨道是线条之间的空间。'
- en: '**Grid cells** Each intersection of a column and a row creates a *cell*. These
    are like cells in a table.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**网格单元格** 每一列和行的交点都创建一个 *单元格*，它们就像表格中的单元格一样。'
- en: '**Grid areas** A cell or multiple cells that mark the space in which a *grid
    item* will be placed.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**网格区域** 一个单元格或多个单元格，标记了 *网格项* 将要放置的区域。'
- en: '**Grid items** Each child element placed in the grid.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**网格项** 每一个放置在网格中的子元素。'
- en: A grid is created by first setting a number of lines on the grid container to
    create a series of tracks. Grid items are then positioned on the tracks using
    lines as coordinates to create areas, as shown in [Figure 17-1](ch17.html#ch17fig1).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 网格是通过首先在网格容器上设置若干线条来创建的一系列轨道。然后，网格项通过将线条作为坐标来定位在轨道上，从而创建区域，具体如 [图 17-1](ch17.html#ch17fig1)
    所示。
- en: '![Image](graphics/f17-01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f17-01.jpg)'
- en: '*Figure 17-1: A simple 3×3 grid showing the core terms used in the CSS Grid
    Layout syntax*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17-1：一个简单的 3×3 网格，展示了 CSS 网格布局语法中使用的核心术语*'
- en: The grid lines are the lines between cells. They define a series of rows and
    columns, which are numbered for coordinate placement. (I’ll explain this concept
    in stages as I proceed through this chapter.)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 网格线是单元格之间的线条。它们定义了一系列行和列，并为坐标定位编号。（我会在本章中逐步解释这个概念。）
- en: '**Declaring and Defining the Grid**'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**声明和定义网格**'
- en: 'The first step in creating a grid is to declare the *grid container,* the element
    used as the grid’s foundation. The dimensions of the grid container are the limits
    of the grid, and all of the grid’s properties are applied to it. To declare the
    grid container, use the `display` property with the new value `grid` like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 创建网格的第一步是声明 *网格容器*，即作为网格基础的元素。网格容器的尺寸是网格的边界，网格的所有属性都应用于它。要声明网格容器，可以使用 `display`
    属性，并将新值设置为 `grid`，如下所示：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This declaration creates a block-level grid container. The next step is to define
    its tracks (rows and columns). You can define tracks on an *explicit grid*, with
    a precise number of columns and rows, or on an *implicit grid,* which is created
    relative to its content. You can also combine both explicit and implicit grids,
    and I’ll explain each in turn.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这条声明创建了一个块级的网格容器。下一步是定义其轨道（行和列）。你可以在 *显式网格* 中定义轨道，设置精确数量的列和行，或者在 *隐式网格* 中定义轨道，这个网格是根据其内容自动生成的。你也可以将显式网格和隐式网格结合使用，我将依次解释这两者。
- en: '***Creating Explicit Grids by Setting Track Size***'
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***通过设置轨道大小来创建显式网格***'
- en: 'In an explicit grid, you can define a specific number of grid tracks by setting
    their size using a pair of properties: `grid-template-columns` and `grid-template-rows`.
    The value for each property is a space-separated list of lengths, which sets the
    width of the column or the height of the row. For example, the following code
    snippet creates a three-column grid, where the first and last columns are set
    to 20 percent of the width of the grid container and the second to 60 percent
    of the width:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在显式网格中，你可以通过设置一对属性：`grid-template-columns` 和 `grid-template-rows` 来定义特定数量的网格轨道及其大小。每个属性的值是一个由空格分隔的长度列表，用于设置列的宽度或行的高度。例如，以下代码片段创建了一个三列的网格，其中第一列和最后一列设置为网格容器宽度的
    20%，第二列设置为 60% 的宽度：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can use percentages or any unit of length, including the specialized grid
    unit of length called a *fraction (fr)*. One fr is equivalent to one equal share
    of any unassigned length in a grid. I’ll explain what I mean. Take a look at this
    code, where the grid container has a width value of 600px, and three columns each
    have a defined width:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用百分比或任何长度单位，包括称为 *分数（fr）* 的特殊网格长度单位。1fr 等于网格中任何未分配长度的等份。让我来解释一下我的意思。看看这段代码，其中网格容器的宽度为
    600px，三个列的宽度各自已定义：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The total width of the columns is 400px, which is 200px less than the width
    of the container. In this case, adding an extra column of 1fr width makes that
    column as wide as all of the remaining space, or 200px:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 列的总宽度是 400px，比容器的宽度少了 200px。在这种情况下，添加一个宽度为 1fr 的列将使该列的宽度与剩余空间相等，即 200px：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Adding another column of the same width makes both columns 100px in width:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 再添加一个相同宽度的列，使得两个列的宽度各自为 100px：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And making one of those columns 3fr in width means the remaining width is divided
    into four equal portions of 50px each, making 1fr equal to 50px and 3fr equal
    150px:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 将其中一列设置为 3fr 的宽度意味着剩余的宽度将被分为四等份，每份 50px，这样 1fr 等于 50px，3fr 等于 150px：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Returning to the first example in this section, you could replace the percentages
    with the fr unit to achieve the same result:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 回到本节的第一个示例，你可以将百分比替换为 fr 单位，以实现相同的效果：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**NOTE**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*See “Fractions vs. Percentages” on [page 213](ch17.html#page_213) for an explanation
    of the advantages of using fractions for laying out grids.*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*关于使用分数布局网格的优势，请参见 [第213页](ch17.html#page_213)的“分数与百分比”部分。*'
- en: This code actually defines three grid lines, with an additional one automatically
    created at the start of the writing direction (which is left, in languages written
    from left to right). These lines create three vertical grid tracks, or columns,
    as shown in [Figure 17-2](ch17.html#ch17fig2).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码实际上定义了三个网格线，另外一个网格线会自动在书写方向的开始位置（对于从左到右书写的语言来说就是左边）创建。这些网格线创建了三个垂直的网格轨道或列，如
    [图17-2](ch17.html#ch17fig2) 所示。
- en: '![Image](graphics/f17-02.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f17-02.jpg)'
- en: '*Figure 17-2: A simple three-column grid in the ratio 1:3:1 (grid lines and
    numbers added for clarity)*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*图17-2：一个简单的三列网格，比例为 1:3:1（为清晰起见添加了网格线和编号）*'
- en: 'You add rows in the same way. For example, to create three rows with the first
    one 60px high, the second with the value of `auto` so it’s as high as its content,
    and the third 5em high, you could use this code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 添加行的方式与此相同。例如，要创建三个行，第一行高度为 60px，第二行的值为 `auto`，使其根据内容高度自动调整，第三行高度为 5em，你可以使用以下代码：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Combining these properties lets you fully define your grid. For example, this
    code creates a basic grid of three columns and three rows, for a total of nine
    cells:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 结合这些属性可以让你完全定义你的网格。例如，这段代码创建了一个基本的 3 列 3 行的网格，共计九个单元格：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The columns of this grid are distributed in the ratio 1:3:1, and the rows are
    60px at the top, 5em at the bottom, with a central row set to automatic height
    to accommodate its content. The resulting grid looks something like [Figure 17-3](ch17.html#ch17fig3).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个网格的列按 1:3:1 的比例分布，行的高度是：顶部为 60px，底部为 5em，中间行的高度设置为自动，以适应其内容。最终生成的网格大致如[图 17-3](ch17.html#ch17fig3)所示。
- en: '![Image](graphics/f17-03.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f17-03.jpg)'
- en: '*Figure 17-3: A 3×3 explicit grid (lines and numbers added for clarity)*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17-3：一个 3×3 的显式网格（为清晰起见添加了线条和数字）*'
- en: '**FRACTIONS VS. PERCENTAGES**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**分数与百分比**'
- en: 'When used on their own, percentages and fractions are interchangeable. For
    example, in this code, the two rules have the same result:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当单独使用时，百分比和分数是可以互换的。例如，在这段代码中，这两个规则产生相同的结果：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Where they differ is when they are mixed with length units such as `px` or
    `em`. Say you have a grid with one 15em column and you want to fill the remaining
    space with two equally sized columns. With percentages, you can’t really do this,
    unless you know the width of the container and are happy to perform some complex
    calculations. You might think you could use `calc()` (see [Chapter 16](ch16.html#ch16))
    to do this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 它们的区别在于，当与 `px` 或 `em` 等长度单位混合使用时。假设你有一个包含 15em 列的网格，并且你希望用两个相同大小的列填充剩余的空间。使用百分比，你实际上无法做到这一点，除非你知道容器的宽度，并且愿意进行一些复杂的计算。你可能会想使用
    `calc()`（参见[第 16 章](ch16.html#ch16)）来实现这一点：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: But the spec isn’t clear if `calc()` is permitted, and no current grid implementations
    (at the time of writing) allow you to do this.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 但规范并未明确 `calc()` 是否被允许，而且当前的网格实现（截至本文编写时）并不允许这样做。
- en: 'In these cases, fractions prove more useful than percentages. When you recall
    that a grid fraction, or fr, sets aside an equal share of any space yet to be
    distributed, the fraction-based code you would use for this example becomes clear:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，分数比百分比更有用。回想一下，网格的分数（fr）会为任何尚未分配的空间留出一个相等的份额，因此你为这个示例编写的基于分数的代码就清晰了：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, any undistributed width in the grid will be divided into two equally sized
    columns.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，网格中任何未分配的宽度将被平分成两个相同大小的列。
- en: Although, at times, you may be able to use percentages easily in your grids,
    fractions keep things simple.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，尽管你有时可能能在网格中轻松使用百分比，但分数更简单。
- en: '***Placing Items in an Explicit Grid***'
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***在显式网格中放置项目***'
- en: Every immediate child of a grid container becomes a grid item and should be
    placed in the grid. To do so, you assign the item a cell coordinate using a set
    of placement properties. The first of these are `grid-column-start` and `grid-row-start`,
    and each takes a single whole number as a value. This number refers to the line
    at the start of a grid track (whether a column or a row), and the combined track
    references create the coordinate of a cell.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 每个网格容器的直接子元素都会成为一个网格项，并应当放置在网格中。为此，你需要通过一组放置属性来为该项目分配一个单元格坐标。其中第一个属性是 `grid-column-start`
    和 `grid-row-start`，每个属性的值都是一个整数。这个数字指代网格轨道的起始线（无论是列还是行），多个轨道引用组合起来就形成了单元格的坐标。
- en: 'For example, to place an item in the cell in the second row of the second column,
    you use this code ([Figure 17-4](ch17.html#ch17fig4) shows the result):'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要将一个项目放置在第二行第二列的单元格中，你可以使用这段代码（[图 17-4](ch17.html#ch17fig4)显示了结果）：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![Image](graphics/f17-04.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f17-04.jpg)'
- en: '*Figure 17-4: An item placed on the grid in the second row of the second column
    (lines added for clarity)*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17-4：一个项目被放置在网格中的第二行第二列（为清晰起见添加了线条）*'
- en: 'The default value of both the `grid-column-start` and `grid-row-start` properties
    is 1, so omitting either value places the item in the first row or column. For
    example, the following code places the item in the cell in the second column of
    the first row, as shown in [Figure 17-5](ch17.html#ch17fig5):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid-column-start` 和 `grid-row-start` 属性的默认值都是 1，因此省略其中一个值会将项目放置在第一行或第一列。例如，以下代码将项目放置在第一行第二列的单元格中，如[图
    17-5](ch17.html#ch17fig5)所示：'
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![Image](graphics/f17-05.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f17-05.jpg)'
- en: '*Figure 17-5: A second item placed on the grid in the second column, first
    row (lines added for clarity)*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17-5：第二个项目被放置在网格中的第一行第二列（为清晰起见添加了线条）*'
- en: 'By default, the item is fitted into the designated cell only, with any content
    that doesn’t fit overflowing the cell vertically. You can make an item expand
    in size to create an area that covers multiple cells in rows or columns by using
    the `grid-column-end` and `grid-row-end` properties. Just like their counterparts,
    these properties take a single whole number value, which designates the line that
    the cell should end in. For example, to have an item span three rows, starting
    at line 1 and ending at 4, here’s the code you use:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，项目只会适配到指定的单元格，如果内容超出单元格，则会垂直溢出。你可以通过使用`grid-column-end`和`grid-row-end`属性，让项目扩大尺寸，创建一个覆盖多行或多列的区域。就像它们的对等属性一样，这些属性接受一个单一的整数值，指定单元格应结束的线条。例如，要让项目跨越三行，从第1行开始，到第4行结束，代码如下：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The item is placed in the first column by default; it starts at line 1 and ends
    at line 4, meaning it spans three rows, as shown in [Figure 17-6](ch17.html#ch17fig6).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，项目会放置在第一列；它从第1行开始，到第4行结束，意味着它跨越三行，如[图 17-6](ch17.html#ch17fig6)所示。
- en: '![Image](graphics/f17-06.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f17-06.jpg)'
- en: '*Figure 17-6: An item on the grid spanning three rows of the first column (lines
    added for clarity)*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17-6：一个位于网格中，跨越第一列三行的项目（为清晰起见添加了线条）*'
- en: 'As an alternative to the method just shown, you can, instead, use the `span`
    keyword, followed by the number of tracks the item spans. The rewritten rule looks
    like this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 作为刚才展示方法的替代方案，你可以使用`span`关键字，后面跟着项目跨越的轨道数量。重写后的规则如下：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `span` keyword becomes quite useful when you want to remain agnostic about
    the line at which a grid item will start, but you always want it to span the same
    number of columns.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想对网格项目的起始行保持不确定性，但始终希望它跨越相同数量的列时，`span`关键字就变得非常有用。
- en: '***Grid Placement Shorthand Properties***'
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***网格放置简写属性***'
- en: Writing four individual properties to place an element in a grid seems somewhat
    verbose, and, indeed, shorthand properties will make your code more terse. The
    properties in question are `grid-column` and `grid-row`, and each has the same
    syntax. The first, `grid-column`, is short for `grid-column-start` and `grid-column-end`,
    divided by a slash; and the same goes for `grid-row` being short for `grid-row-start`
    and `grid-row-end`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 写四个单独的属性来将元素放置在网格中似乎有些冗长，实际上，简写属性将使你的代码更加简洁。相关的属性是`grid-column`和`grid-row`，每个属性的语法相同。第一个，`grid-column`是`grid-column-start`和`grid-column-end`的简写，中间用斜杠分隔；`grid-row`同理，它是`grid-row-start`和`grid-row-end`的简写。
- en: 'I’ll illustrate how to use them. Take a look at all of the individual properties
    applied to the same element:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我将演示如何使用它们。看一下应用于同一元素的所有单独属性：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Using the shorthand properties, you can write these in a much more manageable
    way:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用简写属性，你可以用更简洁的方式编写这些规则：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If even two properties are too much for you, you can actually combine all of
    these instructions in a single shorthand rule, `grid-area`, which covers all four
    properties. Here’s the basic syntax:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果即使是两个属性对你来说也太复杂了，实际上你可以将所有这些指令合并为一个简写规则`grid-area`，它涵盖了所有四个属性。基本语法如下：
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Inserting the appropriate values gives us this very terse—although, arguably,
    harder to read—rule:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 插入适当的值会得到这个非常简洁——尽管可以说，阅读起来可能更难——的规则：
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '***Repeating Grid Lines***'
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***重复网格线***'
- en: 'Although simple grids are fine for some real-world situations, more complex
    grids give you finer control over content. Having upward of 12 columns in large
    typographic grids is quite common, and each column usually has a *gutter* (empty
    space) between it and its neighbor. Defining a grid of 12 columns could be repetitive
    using the Grid Layout syntax, as you can see in this example code where I’ve mapped
    out 12 columns of 1fr each, with a gutter of 10px between them:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管简单的网格适用于一些实际情况，但更复杂的网格能够提供对内容的更精细控制。在大型排版网格中，拥有超过12列是很常见的，每列之间通常有一个*空隙*（空白区域）。使用网格布局语法定义12列网格可能会显得重复，正如你在这段代码中看到的，我已经映射出了12列，每列宽度为1fr，它们之间有10px的空隙：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can use the `repeat()` function to avoid this type of repetition when using
    larger grids. This function takes two arguments: an integer that sets the number
    of repetitions, followed by a comma separator, and the grid line values to be
    repeated. For example, the following rule creates the same grid as in the previous
    example, but much more concisely; it defines one track that is 1fr wide and then
    uses `repeat()` to create a pattern of a 10px gutter followed by a 1fr column
    eleven times, for a total of 12 columns of 1fr each.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`repeat()`函数来避免在使用更大网格时重复这种类型的操作。该函数接受两个参数：一个整数，用于设置重复的次数，后跟一个逗号分隔符，以及要重复的网格线值。例如，以下规则创建了与前一个示例相同的网格，但更简洁；它定义了一个1fr宽的轨道，然后使用`repeat()`创建一个模式，其中包含一个10px的间隙，后跟一个1fr列，重复十一次，总共创建了12列，每列宽度为1fr。
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '***Named Grid Areas***'
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***命名的网格区域***'
- en: 'In addition to placing items in a grid based on coordinates, you can also place
    items in *named areas* with the `grid-template-areas` property. With this property,
    you can give grid areas specific names using a series of unique identifiers in
    strings of text. Here, I’ll show you what I mean:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基于坐标将项目放置到网格中外，你还可以使用`grid-template-areas`属性将项目放置到*命名区域*中。使用此属性，你可以通过一系列唯一的标识符在文本字符串中为网格区域命名。这里，我将展示我的意思：
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Two of these rules should be familiar now: line ➊ sets the element to act as
    a grid container, and line ➌ creates three columns of 1fr each. Line ➋ uses the
    `grid-template-areas` property to name each of the columns: each identifier in
    the space-separated string (*a*, *b*, and *c*) is matched to the columns, in turn.
    This output is shown in [Figure 17-7](ch17.html#ch17fig7).'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这两条规则现在应该很熟悉了：第➊行将元素设置为网格容器，第➌行创建三个宽度为1fr的列。第➋行使用`grid-template-areas`属性为每一列命名：在这个由空格分隔的字符串中，每个标识符（*a*，*b*，*c*）依次与列匹配。该输出如[图17-7](ch17.html#ch17fig7)所示。
- en: '![Image](graphics/f17-07.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f17-07.jpg)'
- en: '*Figure 17-7: Three columns made with named areas*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*图17-7：用命名区域制作的三列*'
- en: 'To place an item using a named area, you use the area’s identifier as a value
    for the `grid-area` property. For example, to place an item in the middle (*b*)
    column of my example grid, I use this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用命名区域放置项目，你需要将该区域的标识符作为`grid-area`属性的值。例如，要将项目放置到我的示例网格的中间(*b*)列，我使用以下代码：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You don’t have to use single characters to name areas, as I’ve done here; you
    can use any string of characters, as long as they don’t contain a space. For example,
    to make your content more human-readable, you may want to describe the purpose
    of each area. Here’s an example:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你不必像我在这里所做的那样使用单个字符来命名区域；你可以使用任何字符串，只要它们不包含空格。例如，为了让你的内容更加易读，你可能希望描述每个区域的用途。下面是一个例子：
- en: '[PRE24]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Each string of identifiers represents a grid row, so to add a new row, you
    just add a new string. If you use the same identifier multiple times in the same
    string, the area will span that number of columns. If you use the same identifier
    in the same position in different rows, the area will span that number of rows.
    You can see what I mean in the following code; in the first row, one column is
    called *nav* and two are called *head*, so the *head* area will span two columns;
    the second row also has a first column called *nav*, so the *nav* area will span
    two rows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 每一串标识符代表一个网格的行，因此要添加新的一行，只需添加一个新字符串。如果你在同一字符串中多次使用相同的标识符，该区域将跨越相应数量的列。如果你在不同的行的相同位置使用相同的标识符，该区域将跨越相应数量的行。你可以通过以下代码理解我的意思；在第一行中，有一列被称为*nav*，两列被称为*head*，所以*head*区域将跨越两列；第二行也有一个名为*nav*的第一列，因此*nav*区域将跨越第一列的两行：
- en: '[PRE25]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Using this code, you can place grid items into areas that span multiple tracks.
    In the following snippet, element `*F*` is placed into the *head* area, meaning
    it spans the second and third columns of the first row, and element `*G*` will
    be placed into the *nav* area, making it span the first and second row in the
    first column. This is shown in [Figure 17-8](ch17.html#ch17fig8).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此代码，你可以将网格项放置到跨越多个轨道的区域中。在以下代码片段中，元素`*F*`被放置到*head*区域，这意味着它跨越第一行的第二列和第三列，而元素`*G*`将被放置到*nav*区域，使其跨越第一列的第一行和第二行。这在[图17-8](ch17.html#ch17fig8)中有所展示。
- en: '[PRE26]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![Image](graphics/f17-08.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f17-08.jpg)'
- en: '*Figure 17-8: Items placed on the grid in named areas (lines added for clarity)*'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*图17-8：放置在命名区域中的网格项（为清晰起见添加了线条）*'
- en: '**WARNING**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*If you use multiple string identifiers, you must use the same number of columns
    in each grid; otherwise, the rule will be declared invalid and be ignored.*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你使用多个字符串标识符，必须在每个网格中使用相同数量的列；否则，规则将被声明为无效并被忽略。*'
- en: '***The grid-template Shorthand***'
  id: totrans-109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***grid-template 简写***'
- en: 'To avoid having to write three separate rules to define a grid (`grid-template-columns`,
    `grid-template-rows`, and `grid-template-areas`), you can use the `grid-template`
    shorthand. This shorthand makes defining your columns and rows, without named
    areas, simple. Here’s an example:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免写三个单独的规则来定义网格（`grid-template-columns`、`grid-template-rows` 和 `grid-template-areas`），你可以使用
    `grid-template` 简写。这个简写让你在没有命名区域的情况下定义列和行变得简单。以下是一个示例：
- en: '[PRE27]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To use the property with named grid areas, you add the identifiers after the
    slash, as in this example:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要与命名网格区域一起使用该属性，你需要在斜杠后添加标识符，如这个示例所示：
- en: '[PRE28]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'And if you also want to define heights for the rows, you can add the length
    value of the row after each identifier string. Let’s look back at the full grid
    defined in the previous section:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还想为行定义高度，可以在每个标识符字符串后面添加行的长度值。让我们回顾一下上一节中定义的完整网格：
- en: '[PRE29]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Here’s how that grid looks if written using the `grid-template` shorthand:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用 `grid-template` 简写书写，这个网格的样子如下：
- en: '[PRE30]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '**NOTE**'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*I don’t declare the row height after the second named area string because
    it defaults to* `*auto*`.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '*我没有在第二个命名区域字符串后声明行高，因为它默认为* `*auto*`。'
- en: '***Implicit Grids***'
  id: totrans-120
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***隐式网格***'
- en: 'Implicit grids are defined by their contents, rather than the specified length
    values of explicit grids. When you don’t care how many rows or columns there are
    in your grid, only that each item in the grid has a place, you can use the `grid-auto-columns`
    and `grid-auto-rows` properties. Each property takes a single value to specify
    the width of the row or column. For example, this code says that any created columns
    should be 1fr wide, and that any new rows should be 80px:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 隐式网格是由其内容定义的，而不是由显式网格的指定长度值定义。当你不关心网格中有多少行或列，只关心网格中的每个项目都有位置时，你可以使用 `grid-auto-columns`
    和 `grid-auto-rows` 属性。每个属性接受一个单一的值来指定行或列的宽度。例如，这段代码表示任何创建的列应该宽 1fr，任何新行应该高 80px：
- en: '[PRE31]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now any item with a `grid-column` or `grid-row` value will be placed in the
    grid, and the grid will automatically adjust its size to accommodate the items,
    keeping all columns and rows at the set size. For example, the following code
    shows a grid item set to start in the second column of the first row, and to span
    two rows and two columns. The grid will expand to fit this item, as you can see
    in [Figure 17-9](ch17.html#ch17fig9).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在任何具有 `grid-column` 或 `grid-row` 值的项目都将被放置到网格中，网格会自动调整其大小以适应这些项目，同时保持所有列和行的固定大小。例如，以下代码显示了一个网格项目，它被设置为从第一行的第二列开始，并跨越两行两列。网格将扩展以适应这个项目，正如你在[图17-9](ch17.html#ch17fig9)中看到的那样。
- en: '[PRE32]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '![Image](graphics/f17-09.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f17-09.jpg)'
- en: '*Figure 17-9: An implicit grid created by the item it contains (lines added
    for clarity)*'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17-9：由其中包含的项目创建的隐式网格（添加了线条以便更清晰）*'
- en: '***Grid Items Without a Declared Place***'
  id: totrans-127
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***没有声明位置的网格项目***'
- en: What happens to children of the grid container that have no declared place in
    the grid because they don’t have either `grid-column` or `grid-row` values? They
    fall back to the default values of 1 and are stacked into the same cell at row
    one, column one.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果网格容器中的子元素没有声明 `grid-column` 或 `grid-row` 值，它们将会发生什么？它们会回退到默认值 1，并堆叠在第一行、第一列的同一单元格中。
- en: 'You can alter this default behavior with the `grid-auto-flow` property, which
    ensures that any items without an assigned place are inserted into the grid where
    space is available. You can also add a level of control over where they’re placed.
    Here is the basic form of this rule:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过 `grid-auto-flow` 属性改变这种默认行为，它确保没有指定位置的项目会被插入到网格中有空余位置的地方。你还可以控制它们的放置位置。以下是这个规则的基本形式：
- en: '[PRE33]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The keyword can be `column` or `row`. If you use `column`, items will fill empty
    cells in columns, moving down the column; if you use use `row`, the items will
    fill empty rows, moving across the row. For example, in [Figure 17-10](ch17.html#ch17fig10),
    the container on the left has a `grid-auto-flow` value of `column`, so the items
    that haven’t been placed fill the cells of each row down the current column and
    then skip up to the next column when the first column is filled. On the other
    hand, the container on the right has the value of `row`, so the items are placed
    across the row until the row is filled, at which point the items move to the second
    row.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字可以是`column`或`row`。如果使用`column`，项目将填充列中的空白单元格，向下移动；如果使用`row`，项目将填充行中的空白单元格，横向移动。例如，在[图17-10](ch17.html#ch17fig10)中，左侧的容器的`grid-auto-flow`值为`column`，因此未被放置的项目将填充每列中的空白单元格，直到当前列填满，然后跳到下一列。而右侧的容器的值为`row`，因此项目将横向填充行，直到该行填满，然后移动到第二行。
- en: '![Image](graphics/f17-10.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f17-10.jpg)'
- en: '*Figure 17-10: Comparing automatic flow: (left) items flowed into columns and
    (right) items flowed into rows*'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '*图17-10：比较自动流动：（左）项目流入列，（右）项目流入行*'
- en: '**Combining Explicit and Implicit Grids**'
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**显式网格与隐式网格的结合**'
- en: 'When you create explicit grids, you may find that the number of available grid
    tracks is fewer than you need for your items. Say you have a three-column grid,
    but a grid item is supposed to span four columns:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建显式网格时，可能会发现可用的网格轨道数量少于你所需的项目数。假设你有一个三列的网格，但某个网格项应该跨越四列：
- en: '[PRE34]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In this case, the grid will expand to contain the tracks created by the item;
    an extra column will be added to the grid, making four in total. You can set the
    size of these extra tracks with the `grid-auto-columns` and `grid-auto-rows` properties.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，网格将扩展以容纳项目创建的轨道；一个额外的列将被添加到网格中，总共有四列。你可以通过`grid-auto-columns`和`grid-auto-rows`属性来设置这些额外轨道的大小。
- en: 'The following code creates an explicit grid of three columns and two rows and
    allows for any items exceeding this explicit grid by adding an implicit grid.
    The extra columns in the implicit grid are defined as 1fr wide, with extra rows
    being 80px high:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码创建了一个三列两行的显式网格，并通过添加隐式网格来允许任何超出该显式网格的项目。隐式网格中的额外列被定义为宽度为1fr，额外行的高度为80px：
- en: '[PRE35]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Now any items placed in this grid will fill an area that matches the dimensions
    of the explicit grid.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，任何放置在该网格中的项目将填充一个与显式网格的维度匹配的区域。
- en: '***The grid Shorthand***'
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***网格简写***'
- en: 'Defining a grid with both explicit and implicit properties can lead to a large
    list of rules. For example, the following code shows an element with rules to
    create an explicit grid with named areas, as well as implicit grid properties
    to allow for any items that might extend the grid, giving you a total of six rules:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个同时具有显式和隐式属性的网格可能会导致规则列表非常庞大。例如，以下代码显示了一个元素，规则创建了一个带有命名区域的显式网格，并且添加了隐式网格属性，以便容纳可能扩展网格的任何项目，总共有六条规则：
- en: '[PRE36]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Fortunately, a shorthand property is available for this list of rules. The
    shorthand is called `grid`—however, you can only use it to set either explicit
    or implicit grids, not both. To use it to set implicit grids, use this syntax:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，针对这一系列规则，有一个简写属性可以使用。这个简写叫做`grid`——然而，你只能使用它来设置显式网格或隐式网格，而不能同时设置两者。要用它来设置隐式网格，可以使用以下语法：
- en: '[PRE37]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'So here is the shorthand for the implicit grid rules shown in the previous
    code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，以下是之前代码中显示的隐式网格规则的简写：
- en: '[PRE38]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The `grid` syntax for setting explicit grids is exactly the same as for the
    `grid-template` property you saw earlier in this chapter. That being the case,
    here is the shorthand for the explicit grid rules shown at the start of this section:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 设置显式网格的`grid`语法与本章之前看到的`grid-template`属性完全相同。既然如此，以下是该节开始时所示的显式网格规则的简写：
- en: '[PRE39]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: You might find it strange that two shorthand properties do exactly the same
    thing. I can only agree with you.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会觉得奇怪，两个简写属性竟然做的是完全一样的事情。我只能同意你的看法。
- en: '**Grid Item Stacking Order**'
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**网格项堆叠顺序**'
- en: When placing items on a grid, areas will sometimes overlap. To handle such an
    eventuality, you can create a stacking order to define the way that items are
    stacked in the grid. For example, you could say that items that start in the third
    row should be stacked on top of items that start in the first row, regardless
    of their order in the DOM.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在将项目放置到网格中时，区域有时会发生重叠。为了处理这种情况，你可以创建堆叠顺序来定义项目在网格中的堆叠方式。例如，你可以指定，第三行开始的项目应该堆叠在第一行开始的项目之上，无论它们在DOM中的顺序如何。
- en: 'You can change the stacking order with the `z-index` property. The items with
    the highest `z-index` value will be stacked above all others. For example, the
    following markup shows two `div` elements that will become grid items:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`z-index`属性来改变堆叠顺序。`z-index`值最高的项目将堆叠在所有其他项目之上。例如，下面的标记显示了两个将成为网格项的`div`元素：
- en: '[PRE40]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'I’ll place both items in the grid, but by adding the following code I ensure
    that `*item-one*` will be stacked on top of `*item-two*` by making its starting
    column and row greater than those of `*item-two*`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我将两个项目都放入网格中，但通过添加以下代码，我确保`*item-one*`会堆叠在`*item-two*`之上，因为它的起始列和行比`*item-two*`的更大：
- en: '[PRE41]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You can see the result in the example on the left of [Figure 17-11](ch17.html#ch17fig11):
    `*item-one*` is stacked above `*item-two*`. But if you increase the `z-index`
    of `*item-two*` like so:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图17-11](ch17.html#ch17fig11)左侧的示例中看到结果：`*item-one*`堆叠在`*item-two*`上方。但如果你像这样增加`*item-two*`的`z-index`值：
- en: '[PRE42]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: you’ll see that `*item-two*` is now stacked above `*item-one*`, as shown on
    the right of [Figure 17-11](ch17.html#ch17fig11).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到`*item-two*`现在堆叠在`*item-one*`上方，如[图17-11](ch17.html#ch17fig11)右侧所示。
- en: '![Image](graphics/f17-11.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f17-11.jpg)'
- en: '*Figure 17-11: Comparing stacking order: (left) stacking follows placement,
    (right) stacking set by* `*z-index*`'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '*图17-11：比较堆叠顺序：（左）堆叠跟随位置，（右）通过`*z-index*`设置堆叠顺序*'
- en: An alternative approach uses the `order` property, introduced as part of the
    Flexbox Module (see [Chapter 15](ch15.html#ch15)). In explicit grids, this property
    acts exactly like `z-index`, changing the stacking order; in implicit grids, however,
    it also changes the order in which items are placed in the grid.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是使用`order`属性，它作为Flexbox模块的一部分被引入（参见[第15章](ch15.html#ch15)）。在显式网格中，这个属性的作用与`z-index`完全相同，改变堆叠顺序；然而，在隐式网格中，它也改变了项目在网格中的放置顺序。
- en: You can see this in action in [Figure 17-12](ch17.html#ch17fig12), where I’ve
    flowed three grid items (`*item-one*`, `*item-two*`, and `*item-three*`) into
    a grid with a `grid-auto-flow` value of `column`. In the left grid, the items
    are flowed into the grid in the order in which they appear in the DOM, but in
    the right grid, the order of two of the items is changed, as shown in [Figure
    17-12](ch17.html#ch17fig12).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图17-12](ch17.html#ch17fig12)中看到这个效果，在这里我将三个网格项（`*item-one*`、`*item-two*`和`*item-three*`）放入一个`grid-auto-flow`值为`column`的网格中。在左边的网格中，项目按它们在DOM中的出现顺序流入网格，但在右边的网格中，两个项目的顺序发生了变化，如[图17-12](ch17.html#ch17fig12)所示。
- en: '[PRE43]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '![Image](graphics/f17-12.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f17-12.jpg)'
- en: '*Figure 17-12: Stacking with the* `*order*` *property in implicit grids: (left)
    in DOM order and (right) order set with the* `*order*` *property*'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '*图17-12：在隐式网格中使用`*order*`属性进行堆叠：（左）按照DOM顺序，（右）通过`*order*`属性设置顺序*'
- en: '**Internet Explorer’s Grid Layout Syntax**'
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Internet Explorer的Grid Layout语法**'
- en: Internet Explorer 10 was the first browser to implement the Grid Layout properties,
    although with a syntax that has since become outdated. So you can replicate certain
    grid layouts in IE10 and IE11 if you use caution, but with very strict limits—the
    most notable being that you can only create explicit grids.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Internet Explorer 10是第一个实现Grid Layout属性的浏览器，尽管它使用的语法已经过时。所以，如果你小心使用，仍然可以在IE10和IE11中复制某些网格布局，但有非常严格的限制——最显著的是你只能创建显式网格。
- en: 'All of the IE grid properties use the `-ms-` prefix, as does the value of the
    `display` property:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 所有IE网格属性都使用`-ms-`前缀，`display`属性的值也是如此：
- en: '[PRE44]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You create tracks with the `-ms-grid-columns` and `-ms-grid-rows` properties,
    which are analogous to `grid-template-columns` and `grid-template-rows`. The difference
    is in the way you repeat track lines: When designing for IE, you put the width
    values in parentheses, followed by the number of repetitions in square brackets:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`-ms-grid-columns`和`-ms-grid-rows`属性来创建轨道，这些属性类似于`grid-template-columns`和`grid-template-rows`。区别在于重复轨道线的方式：在为IE设计时，你需要将宽度值放在括号中，并在后面加上方括号中的重复次数：
- en: '[PRE45]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Grid items are placed with the `-ms-grid-column` and `-ms-grid-row` properties,
    which function like `grid-column` and `grid-row`, but only allow a single numeric
    value. To span items across multiple cells, you must use `-ms-grid-column-span`
    and `-ms-grid-row-span` to set the number of tracks an item should span (like
    the `span` keyword.)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 网格项目通过 `-ms-grid-column` 和 `-ms-grid-row` 属性进行定位，这些属性类似于 `grid-column` 和 `grid-row`，但仅允许使用单一的数值。要跨多个单元格放置项目，必须使用
    `-ms-grid-column-span` 和 `-ms-grid-row-span` 来设置项目应跨越的轨道数量（类似于 `span` 关键字）。
- en: 'That being the case, the rules applied to elements `*E*` and `*F*` in this
    code block are identical in function:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，代码块中应用于元素 `*E*` 和 `*F*` 的规则在功能上是相同的：
- en: '[PRE46]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: As of this writing, the IE syntax has no named areas, nor does it have anything
    equivalent to `grid-column-end` or `grid-row-end`.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 截至本文写作时，IE 的语法没有命名区域，也没有与 `grid-column-end` 或 `grid-row-end` 等效的属性。
- en: '**Summary**'
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Grids are the first step toward a whole new way of laying out content on the
    Web. The combination of Grid Layout, Flexbox positioning, and Media Queries makes
    possible rich layouts that you can adapt to many different devices and viewports,
    ushering in a whole new world of web design, free from the constraints of float
    hacks and restrictive markup.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 网格布局是迈向全新网页内容布局方式的第一步。网格布局、弹性盒子布局（Flexbox）和媒体查询的结合，使得可以实现丰富的布局，并能够适应不同的设备和视口，开创了一个摆脱浮动技巧和限制性标记的新网页设计世界。
- en: '**Grid Layout: Browser Support**'
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**网格布局：浏览器支持**'
- en: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
- en: '| Grid layout | No^([*](ch17.html#footnote39a)) | No | No | IE10^([†](ch17.html#footnote40a))
    |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| 网格布局 | 不支持^([*](ch17.html#footnote39a)) | 不支持 | 不支持 | IE10^([†](ch17.html#footnote40a))
    |'
- en: '[*](ch17.html#footnote_39a) Implemented but off by default'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '[*](ch17.html#footnote_39a) 已实现，但默认关闭'
- en: '[†](ch17.html#footnote_40a) Syntax different from the spec; with vendor prefix'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '[†](ch17.html#footnote_40a) 语法与规范不同；带有厂商前缀'
