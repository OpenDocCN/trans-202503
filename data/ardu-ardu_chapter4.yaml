- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">4</samp> <samp class="SANS_Dogma_OT_Bold_B_11">BUILDING
    WATCHDOG TIMERS</samp>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">4</samp> <samp class="SANS_Dogma_OT_Bold_B_11">构建看门狗定时器</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: Projects that sit unattended for some time may lock up or stop working because
    of accidents, suboptimal design, or power issues. To solve these problems, you
    can use a *watchdog timer*, a small circuit that sits dormant while the project
    is operating normally but hard resets the microcontroller to a restart operation
    if it doesn’t receive a normal signal. These timers can help you build more advanced,
    professional, and reliable projects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 长时间无人看管的项目可能会因为事故、设计不佳或电力问题而停止工作或死机。为了解决这些问题，你可以使用*看门狗定时器*，这是一种小型电路，当项目正常运行时它保持静止，但如果未收到正常信号，它会强制重置微控制器，重新启动操作。这些定时器可以帮助你构建更加先进、专业且可靠的项目。
- en: 'In this chapter, you’ll learn to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习：
- en: Configure the 555 timer IC as an astable timer
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置555定时器IC为不稳定定时器
- en: Use the formulas to calculate 555 timer IC delay periods
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用公式计算555定时器IC的延迟周期
- en: Build your own watchdog timer using a PCB
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PCB构建自己的看门狗定时器
- en: <samp class="SANS_Futura_Std_Bold_B_11">Ensuring Constant and Reliable Operation</samp>
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">确保恒定且可靠的运行</samp>
- en: As you gain microcontroller expertise, you may find yourself building projects
    or products operating without your constant attention over long periods of time.
    This could be a weather-monitoring system, a data-logging device, a hardware web
    host that allows remote reviews of current data, or some other device whose physical
    location is hard to access (buried in a basement or an attic).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你掌握更多的微控制器知识，你可能会发现自己在构建一些长时间无需你持续关注的项目或产品。这些项目可以是天气监测系统、数据记录设备、硬件网页主机（允许远程查看当前数据），或者其他一些位置难以接触到的设备（如埋在地下室或阁楼中的设备）。
- en: When the final project is out of your hands, how can you ensure constant and
    reliable operation? Even when your hardware and sketch or code seems foolproof,
    unexpected situations can cause your Arduino to stop operating. A temporary power
    brownout could freeze the microcontroller (that is, halt the sketch). An unexpected
    temperature extreme could also cause issues. Or your sketch may have unanticipated
    bugs. For these reasons and more, you’ll need a watchdog.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当最终的项目交到你手中时，如何确保其恒定且可靠的运行？即使你的硬件和草图或代码看似万无一失，意外情况仍可能导致你的Arduino停止运行。短暂的电源电压下降可能会使微控制器死机（即停止草图运行）。极端的温度变化也可能引发问题，或者你的草图可能有未预料的错误。由于这些原因及更多问题，你将需要一个看门狗定时器。
- en: In this section, I’ll explain the theory behind watchdog timers and then show
    you how to build your own watchdog timer circuit.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我将解释看门狗定时器背后的理论，并展示如何构建自己的看门狗定时器电路。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Watchdog Timer Theory</samp>
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">看门狗定时器理论</samp>
- en: A watchdog timer circuit is an external timer connected to the RESET pin on
    the Arduino board. The watchdog circuit begins with a HIGH signal set to change
    to LOW after a predetermined length of time, which will cause the Arduino to reset
    and start again. However, the Arduino can prevent this reset by sending a regular
    signal, or *heartbeat*, via a digital output pin connected to the watchdog circuit.
    The heartbeat resets the timer circuit before the watchdog timer can reset the
    Arduino.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 看门狗定时器电路是一个外部定时器，连接到Arduino板上的RESET引脚。看门狗电路开始时发送一个高电平信号，该信号会在预定的时间后变为低电平，这将导致Arduino重置并重新启动。然而，Arduino可以通过向看门狗电路连接的数字输出引脚发送定期信号或*心跳*来防止这种重置。心跳信号会在看门狗定时器重置Arduino之前重置定时器电路。
- en: Consider the timing diagram in [Figure 4-1](chapter4.xhtml#fig4-1).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考[图4-1](chapter4.xhtml#fig4-1)中的时序图。
- en: '![A TIMING DIAGRAM EXPLAINING THE ARDUINO HEARTBEAT CAUSING RESET BY THE WATCHDOG
    TIMER CIRCUIT](../images/fig4-1.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![看门狗定时器电路通过Arduino心跳信号导致重置的时序图](../images/fig4-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-1: A timing diagram
    of a watchdog timer output and Arduino heartbeat output</samp>'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图4-1：看门狗定时器输出与Arduino心跳输出的时序图</samp>
- en: The top signal is the output from a watchdog timer, continually oscillating
    between HIGH and LOW. The period for the HIGH signal is much longer than that
    for LOW. The watchdog output is connected to the Arduino’s RESET pin. When the
    watchdog timer resets, the output starts at HIGH, meaning the Arduino must keep
    resetting the watchdog timer to stop the watchdog timer resetting the Arduino.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 上方的信号是来自看门狗定时器的输出，持续在高电平（HIGH）和低电平（LOW）之间振荡。高电平信号的周期远长于低电平信号的周期。看门狗的输出连接到 Arduino
    的重置（RESET）引脚。当看门狗定时器重置时，输出从高电平开始，这意味着 Arduino 必须不断重置看门狗定时器，以防止看门狗定时器重置 Arduino。
- en: To enable this, an Arduino digital output pin connected to the watchdog timer
    sends a quick pulse (HIGH and then LOW) to the timer ❶, resetting the timer and
    stopping the timer output from going LOW. If the Arduino has a problem and stops
    pulsing the heartbeat signal to the watchdog timer ❷, the watchdog timer oscillations
    continue and its signal will go LOW ❸, resetting the Arduino. After this reset,
    the Arduino should recover and begin sending out the heartbeat signal again ❹.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一功能，连接到看门狗定时器的 Arduino 数字输出引脚会向定时器发送一个快速脉冲（高电平然后低电平）❶，重置定时器并阻止定时器输出变为低电平（LOW）。如果
    Arduino 出现问题并停止向看门狗定时器发送心跳信号❷，看门狗定时器将继续振荡，并且其信号将变为低电平❸，从而重置 Arduino。重置后，Arduino
    应该恢复并再次开始发送心跳信号❹。
- en: The watchdog timer is a hardware-based solution, making it less error-prone
    than a software-based function. If the reset doesn’t get the Arduino going again,
    there’s a major fault in the project that will require you to physically examine
    the hardware or code.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 看门狗定时器是一种硬件解决方案，较软件实现更不易出错。如果重置无法让 Arduino 重新启动，说明项目中存在重大故障，需要你物理检查硬件或代码。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Watchdog Timer Circuit
    Configuration</samp>
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">看门狗定时器电路配置</samp>
- en: The heart of the watchdog timer circuit is the 555 timer IC shown in [Figure
    4-2](chapter4.xhtml#fig4-2). This compact part contains a customizable timing
    circuit you can use in several ways.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 看门狗定时器电路的核心是 [图 4-2](chapter4.xhtml#fig4-2) 所示的 555 定时器 IC。这个紧凑的部件包含了一个可定制的定时电路，可以通过多种方式使用。
- en: '![A PHOTO OF A TEXAS INSTRUMENTS 555 TIMER IC](../images/fig4-2.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![德州仪器 555 定时器 IC 的照片](../images/fig4-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-2: A 555 timer IC</samp>'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-2：555 定时器 IC</samp>
- en: To use the 555 as a watchdog timer, you’ll configure it as an *astable timer*,
    one that generates a continuous signal output with a longer HIGH than LOW, as
    shown in [Figure 4-3](chapter4.xhtml#fig4-3).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 555 用作看门狗定时器，你需要将其配置为*非稳态定时器*，即生成一个持续的信号输出，高电平周期比低电平周期更长，如 [图 4-3](chapter4.xhtml#fig4-3)
    所示。
- en: '![A BASIC SCHEMATIC FOR A555 ASTABLE TIMER CIRCUIT](../images/fig4-3.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![555 非稳态定时器电路的基本原理图](../images/fig4-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-3: A basic astable
    timer circuit</samp>'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 4-3：一个基本的非稳态定时器电路</samp>
- en: The astable timer circuit is fairly simple. Inside the 555 are a voltage comparator
    circuit and a flip-flop, which changes state between LOW and HIGH to drive the
    output pin. When power is applied, the voltage at pin 2 (the trigger pin) is less
    than one-third V[CC], meaning the flip-flop switches to set the 555 output to
    HIGH. C then charges via R[A] and R[B].
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 非稳态定时器电路相当简单。在 555 内部有一个电压比较器电路和一个触发器，它在低电平和高电平之间切换，以驱动输出引脚。当电源接入时，管脚 2（触发引脚）的电压低于
    V[CC] 的三分之一，这意味着触发器切换并将 555 的输出设置为高电平。然后，电容 C 通过电阻 R[A] 和 R[B] 充电。
- en: After a period with output at HIGH, the voltage at pin 6 (the threshold pin)
    goes above two-thirds V[CC]. The flip-flop switches to set the 555 output to LOW.
    This also enables the discharge function so that C discharges via R[B].
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出为高电平（HIGH）一段时间后，管脚 6（阈值引脚）的电压超过 V[CC] 的三分之二。触发器切换并将 555 的输出设置为低电平（LOW）。这也启用了放电功能，使得电容
    C 通过电阻 R[B] 放电。
- en: After a period with the output at LOW, the voltage at pin 2 is less than one-third
    V[CC], so the flip-flop switches to set the 555 output to HIGH … and the cycle
    repeats. The output is sourced from pin 3, which operates as an open collector—that
    is, when LOW, it can sink current to GND.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出为低电平（LOW）一段时间后，管脚 2 的电压低于 V[CC] 的三分之一，因此触发器会切换，将 555 的输出设置为高电平（HIGH）……然后循环重复。输出来自管脚
    3，它作为一个开路集电极工作——也就是说，当为低电平（LOW）时，它可以将电流吸入地（GND）。
- en: The duty cycle of the output signal and the HIGH and LOW periods are determined
    by the values of resistors R[1] and R[2] and the capacitor C. The R[L] parts are
    the loads, or the circuitry controlled by the output. Current can flow from V[CC]
    through the higher R[L] when the output is off, and from the output through the
    lower R[L] to GND when the output is on. Up to 200 mA of current can flow in or
    out of the 555’s output pin.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 输出信号的占空比及高低电平周期由电阻R[1]、R[2]和电容C的值决定。R[L]部分是负载，或者说是由输出控制的电路。当输出关闭时，电流可以从V[CC]通过较高的R[L]流动；当输出开启时，电流则从输出通过较低的R[L]流向GND。555的输出脚最多可以流入或流出200
    mA的电流。
- en: 'To determine the HIGH and LOW period times for the output—and if you are curious,
    the frequency of the output signal (which we don’t use but might as well set!)—we
    use the following three formulas:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定输出的高低电平周期时间——如果你有兴趣的话，输出信号的频率（虽然我们不使用它，但也可以设置！）——我们使用以下三个公式：
- en: '![](../images/pg50-1.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/pg50-1.png)'
- en: 'T[low] is the length of time the astable output from the 555 timer is LOW,
    and T[high] is the length of time the output is HIGH. For example, with a value
    of 100 kΩ for R[1], a value of 4.7 kΩ for R[2], and a capacitor C of 100 uF, the
    calculations are as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: T[low]是555定时器输出为低电平的时间长度，T[high]是输出为高电平的时间长度。例如，若R[1]的值为100 kΩ，R[2]的值为4.7 kΩ，电容C的值为100
    uF，则计算如下：
- en: T[high] = 0.693 (4,700) 0.0001 = 7.255 s
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: T[high] = 0.693 (4,700) 0.0001 = 7.255 s
- en: T[low] = 0.693 (100,000 + 4,700) 0.0001 = 0.3257 s
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: T[low] = 0.693 (100,000 + 4,700) 0.0001 = 0.3257 s
- en: A spreadsheet with these formulas is available in the sketch download from [*https://<wbr>nostarch<wbr>.com<wbr>/arduino<wbr>-arduinians*](https://nostarch.com/arduino-arduinians).
    Use these formulas to easily calculate the values of resistors and the capacitor
    needed for your required HIGH and LOW times. The value of R[2] generally remains
    constant, as R[1] has more effect on the final values.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含这些公式的电子表格可以在[*https://<wbr>nostarch<wbr>.com<wbr>/arduino<wbr>-arduinians*](https://nostarch.com/arduino-arduinians)下载。使用这些公式可以轻松计算所需的电阻和电容值，以获得所需的高低电平时间。R[2]的值通常保持不变，因为R[1]对最终结果的影响较大。
- en: When building a 555 timer circuit, use 1 percent tolerance resistors. Larger
    capacitors can have a very large tolerance, especially during temperature fluctuations—sometimes
    up to +/−20 percent—so try to keep the capacitor value as small as possible.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建555定时器电路时，请使用1%公差的电阻。较大的电容可能会有很大的公差，尤其是在温度波动时—有时高达+/-20%的误差—因此尽量保持电容的值尽可能小。
- en: Now that you know how to operate a 555 timer, let’s build a watchdog timer circuit
    for our Arduino.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何操作555定时器，让我们为Arduino构建一个看门狗定时器电路。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #14: Building a Watchdog Timer</samp>'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_21">项目#14：构建看门狗定时器</samp>
- en: In this project, you’ll build a convenient and adjustable watchdog timer for
    your Arduino Uno or other microcontroller that utilizes the type of reset circuit
    discussed. You can build the circuit on a solderless breadboard for a more temporary
    setup or download the PCB files for this project and have your own PCB manufactured
    to create a permanent watchdog timer.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将为Arduino Uno或其他微控制器构建一个便捷且可调的看门狗定时器，使用了所讨论的复位电路类型。你可以在无焊接面包板上搭建电路，作为一个临时设置，或者下载该项目的PCB文件，制作自己的PCB，创建一个永久性的看门狗定时器。
- en: 'You’ll need the following parts:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下部件：
- en: 'The Project #14 PCB or solderless breadboard'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目#14的PCB或无焊接面包板
- en: An NE555 timer IC (not the CMOS 7555 version!)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一只NE555定时器IC（不是CMOS 7555版本！）
- en: An eight-pin IC socket
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个八针IC插座
- en: A 1N4001 diode
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一只1N4001二极管
- en: A 5 mm LED
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一只5 mm的LED
- en: 1 × 40 2.54 mm inline header pins (if using PCB)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 × 40个2.54 mm的直插针（如果使用PCB）
- en: Various jumper wires
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种跳线
- en: A 2N7000 N-MOSFET
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一只2N7000 N型MOSFET
- en: Two 1 kΩ, 0.25 W, 1 percent resistors
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两只1 kΩ，0.25 W，1%精度的电阻
- en: A 10 kΩ, 0.25 W, 1 percent resistor
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一只10 kΩ，0.25 W，1%精度的电阻
- en: A 100 Ω, 0.25 W, 1 percent resistor
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一只100 Ω，0.25 W，1%精度的电阻
- en: Other resistors (see the following section)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他电阻（请参见以下部分）
- en: A 0.01 µF ceramic capacitor
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一只0.01 µF的陶瓷电容
- en: A 0.1 µF ceramic capacitor
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一只0.1 µF的陶瓷电容
- en: A 100 µF, 16 V electrolytic capacitor
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一只100 µF，16 V的电解电容
- en: '[Figure 4-4](chapter4.xhtml#fig4-4) shows the schematic for this project.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[图4-4](chapter4.xhtml#fig4-4)展示了该项目的原理图。'
- en: '![SCHEMATIC FOR PROJECT #14](../images/fig4-4.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![项目#14的原理图](../images/fig4-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-4: The schematic for
    Project #14</samp>'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图4-4：项目#14的原理图</samp>
- en: Before assembling the circuit, determine which values to use for R[1] and R[2]
    to control the length of the HIGH and LOW periods of the output, using the formulas
    provided in the previous section. The results will differ depending on whether
    you’re using a PCB or solderless breadboard, as the contacts inside a breadboard
    also have their own resistance value.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在组装电路之前，根据前一节提供的公式确定用于控制输出 HIGH 和 LOW 时段长度的 R[1] 和 R[2] 值。结果将根据你使用的是 PCB 还是无焊面包板而有所不同，因为面包板内部的接触点也有其自身的电阻值。
- en: 'For those of you building with a PCB, the schematic shows three resistors for
    R[e]: R[1A], R[1B], and R[1C]. I have left space for up to three resistors to
    be used as a combined value for R[1] so that you can change resistor values if
    required by adding new resistors in the R[1B] or R[1C] spaces and cutting out
    the unwanted values. Alternately, you may need to use two or three resistors in
    parallel to get your exact required value.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些使用 PCB 构建的用户，原理图显示了三个电阻器用于 R[e]：R[1A]、R[1B] 和 R[1C]。我为最多使用三个电阻器作为 R[1] 的组合值留出了空间，这样你可以根据需要通过在
    R[1B] 或 R[1C] 空间添加新的电阻器并切除不需要的值来更改电阻值。或者，你可能需要使用两个或三个电阻器并联以获得精确的所需值。
- en: 'To calculate the value of resistors in parallel, use the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 计算并联电阻值时，使用以下公式：
- en: R[T] = 1 / (1 / R[1A] + 1 / R[1B] + 1 / R[1C] + …)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: R[T] = 1 / (1 / R[1A] + 1 / R[1B] + 1 / R[1C] + …)
- en: If you just need to use one resistor for R[1], insert it into the R[1A] space
    on the PCB.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只需要使用一个电阻器用于 R[1]，将其插入 PCB 上的 R[1A] 空间。
- en: If you’re not sure what values to use for this project, a good default option
    is to use around 100 kΩ for R[1] and 4.7 kΩ for R[2]. This will create a HIGH
    delay of just over 57 seconds, close to a minute. With this delay, your Arduino
    must reset the timer more often than once every 7 seconds to avoid being reset
    by the timer itself.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不确定该为此项目使用哪些电阻值，一个不错的默认选项是将 R[1] 设置为大约 100 kΩ，R[2] 设置为 4.7 kΩ。这样可以创建一个大约
    57 秒的 HIGH 延迟，接近一分钟。通过这个延迟，你的 Arduino 必须比每 7 秒重置一次计时器更频繁地重置，以避免被计时器本身重置。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The 555 Circuit’s
    Inner Workings</samp>
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">555 电路的内部工作原理</samp>
- en: Let’s take a closer look at the 555 circuit’s inner workings. When you apply
    power to the circuit, the 555 should start operating as described earlier, with
    the output signal connected to the Arduino’s RESET pin and starting as HIGH. The
    Arduino should operate as normal. Diode D[1], connected between the 555’s output
    pin and the Arduino RESET pin, ensures no stray signals can reset the Arduino.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地了解 555 电路的内部工作原理。当你为电路供电时，555 应该按照前面描述的那样开始工作，输出信号连接到 Arduino 的 RESET
    引脚，并以 HIGH 开始。Arduino 应该正常工作。二极管 D[1]，连接在 555 的输出引脚和 Arduino RESET 引脚之间，确保没有杂散信号能够重置
    Arduino。
- en: Over time, as determined by your R[1] values, capacitor C[1] should start charging
    via the 555’s trigger pin. When the Arduino sends a HIGH signal via the heartbeat
    pin, it should turn on the N-MOSFET Q[1]. Doing so not only blinks LED D[3] (a
    visual indication of the Arduino heartbeat signal) but also shorts the capacitor
    C[1] to GND via R[6], emptying the capacitor. The capacitor C[1] then starts charging
    again, resetting the amount of time before the 555 can reset the Arduino.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，根据你的 R[1] 值，电容器 C[1] 应该开始通过 555 的触发引脚充电。当 Arduino 通过心跳引脚发送 HIGH 信号时，它应该打开
    N-MOSFET Q[1]。这样做不仅会闪烁 LED D[3]（作为 Arduino 心跳信号的视觉指示），还会通过 R[6] 将电容器 C[1] 短接到地（GND），从而放电。电容器
    C[1] 然后重新开始充电，重置 555 重新设置 Arduino 的时间。
- en: If the Arduino keeps sending heartbeat pulses, the 555 timer never has a chance
    to change the output state to LOW and reset the Arduino, as discussed. However,
    if the Arduino stops sending heartbeat signals, capacitor C[1] will continue to
    charge until the 555’s threshold pin voltage reaches two-thirds of 5 V. At that
    point, the 555’s output changes state to LOW for a short period (determined by
    R[2]). This resets the Arduino and blinks LED D[2] (a visual indication that the
    reset circuit has been activated). When the 555’s output pin is LOW, current can
    flow from 5V, through R[3] and the LED, and into the 555 output pin. When the
    output pin is LOW, current can flow into the pin, as opposed to current flowing
    out from the output pin when it is HIGH. The output then changes back to HIGH,
    and the process starts again.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Arduino持续发送心跳脉冲，555定时器将无法有机会将输出状态改变为低电平（LOW）并重置Arduino，如前所述。然而，如果Arduino停止发送心跳信号，电容C[1]将继续充电，直到555的阈值引脚电压达到5V的三分之二。此时，555的输出将短暂改变为低电平（由R[2]决定）。这会重置Arduino并使LED
    D[2]闪烁（这表示复位电路已被激活）。当555的输出引脚为低电平时，电流可以从5V流过电阻R[3]和LED，进入555的输出引脚。当输出引脚为低电平时，电流可以流入该引脚，而当其为高电平时，电流则流出。输出随后会恢复为高电平，过程重新开始。
- en: Resistors R[3] and R[4] limit current to the LEDs, while resistor R[5] pulls
    down the N-MOSFET until activated, avoiding unplanned activation. Resistor R[6]
    protects C[1] while the capacitor is discharging, avoiding a dead short when a
    heartbeat signal is received. C[2] smooths the power supply over the circuit.
    Finally, the 555 requires C[3] for normal operation.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 电阻R[3]和R[4]限制LED的电流，而电阻R[5]在N-MOSFET未激活时将其拉低，避免了不必要的激活。电阻R[6]在电容C[1]放电时保护电容，避免接收到心跳信号时发生短路。电容C[2]在电路中平滑电源。最后，555定时器需要电容C[3]以确保正常运行。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Circuit Assembly</samp>
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">电路组装</samp>
- en: 'Assemble the project using the PCB shown in [Figure 4-5](chapter4.xhtml#fig4-5)
    as usual: start with the lowest-profile parts, such as the resistors, and then
    work your way to the tallest parts (the capacitors and inline header pins).'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 按照通常的方式使用[图4-5](chapter4.xhtml#fig4-5)所示的PCB组装项目：从最矮的元件开始，如电阻，然后逐步安装更高的元件（如电容和直插头针）。
- en: '![A PHOTO OF AN UNPOPULATED PRINTER CIRCUIT BOARD FOR PROJECT #14](../images/fig4-5.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![项目#14的未装配打印电路板照片](../images/fig4-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-5: The PCB for Project
    #14</samp>'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图4-5：项目#14的PCB</samp>
- en: Don’t forget to use an IC socket for the 555 and match the notch at the end
    of the IC with the notch on the PCB. You may need to trim your inline header pins
    to get one strip of four pins.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了给555使用一个IC插座，并将IC端的缺口与PCB上的缺口对准。你可能需要修剪直插头针，使其变成一条四针排。
- en: Once assembled, your watchdog timer should resemble the one shown in [Figure
    4-6](chapter4.xhtml#fig4-6).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦组装完成，你的看门狗定时器应该类似于[图4-6](chapter4.xhtml#fig4-6)中所示的样子。
- en: '![THE COMPLETED PRINTED CIRCUIT BOARD FOR PROJECT #14](../images/fig4-6.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![项目#14的完成打印电路板](../images/fig4-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 4-6: The completed watchdog
    timer board</samp>'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图4-6：完成的看门狗定时器板</samp>
- en: Connect the 5V, RESET, and GND pins to the matching Arduino pins and connect
    the heartbeat pin to an unused digital pin on your Arduino. To make your sketch
    send a pulse at a frequency faster than the operation of the watchdog timer, consider
    the following example of using the watchdog timer. Upload the sketch after connecting
    the watchdog timer to your Arduino.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 将5V、RESET和GND引脚连接到Arduino的相应引脚，并将心跳引脚连接到Arduino上未使用的数字引脚。为了使你的草图发送一个比看门狗定时器操作更快的脉冲频率，请参考以下使用看门狗定时器的示例。在将看门狗定时器连接到Arduino后，上传草图。
- en: '[PRE0]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This sketch defines digital pin 5 as the heartbeat connection to the watchdog
    timer circuit ❶. The <samp class="SANS_TheSansMonoCd_W5Regular_11">heartBeat()</samp>
    function generates the heartbeat pulse ❷, which simply flips the pin on and off
    for a moment—long enough to reset the watchdog timer circuit. The <samp class="SANS_TheSansMonoCd_W5Regular_11">void
    setup()</samp> function ❸ sends the heartbeat to reset the watchdog as soon as
    possible after the Arduino is reset or powered up. Finally, the main loop ❹ sends
    the heartbeat regularly.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将数字引脚5定义为与看门狗定时器电路的心跳连接 ❶。<samp class="SANS_TheSansMonoCd_W5Regular_11">heartBeat()</samp>
    函数生成心跳脉冲 ❷，它只是瞬间将引脚切换开和关——足够长时间以复位看门狗定时器电路。<samp class="SANS_TheSansMonoCd_W5Regular_11">void
    setup()</samp> 函数 ❸ 在Arduino复位或上电后尽快发送心跳信号以复位看门狗。最后，主循环 ❹ 定期发送心跳信号。
- en: Placing the <samp class="SANS_TheSansMonoCd_W5Regular_11">heartbeat()</samp>
    function in <samp class="SANS_TheSansMonoCd_W5Regular_11">void loop()</samp> is
    an ideal spot, assuming the time taken by a single run of the code in the loop
    is less than the timeout period of the watchdog. You can always insert more calls
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">heartBeat()</samp> in your other
    functions as well if you want to increase the number of watchdog-initiated resets
    of your project.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 将 <samp class="SANS_TheSansMonoCd_W5Regular_11">heartbeat()</samp> 函数放入 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">void loop()</samp> 是一个理想的位置，前提是循环中单次代码执行的时间小于看门狗的超时周期。如果你想增加看门狗触发的复位次数，你也可以在其他函数中插入更多对
    <samp class="SANS_TheSansMonoCd_W5Regular_11">heartBeat()</samp> 的调用。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">继续前进</samp>
- en: This chapter covered why you’d want to use a watchdog timer, along with the
    theory of operating and building your own circuit. You learned how to use the
    watchdog timer method in order to maintain the reliability of future Arduino-based
    projects, as well as how to use other microcontrollers such as the ATtiny or with
    other electronic devices that have an output and reset on LOW input.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讲解了为什么你需要使用看门狗定时器，以及如何操作和构建自己的电路的理论。你学会了如何使用看门狗定时器方法，以保持未来基于Arduino的项目的可靠性，同时也学会了如何使用其他微控制器，如ATtiny，或者与其他具有输出和低电平输入复位功能的电子设备一起使用。
- en: In the next chapter, you’ll learn to control multiple LEDs with a minimal number
    of digital output pins.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将学习如何用最少的数字输出引脚控制多个LED灯。
