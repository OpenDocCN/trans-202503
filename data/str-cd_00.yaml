- en: '**INTRODUCTION**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**介绍**'
- en: '![Image](Images/common01.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/common01.jpg)'
- en: My first exposure to programming came in the summer of 1980\. It involved an
    Apple II+ computer. As principal of the local high school, my father was able
    to bring it home for us to play with over the summer. It was the only personal
    computer in the school. I already knew about video games and had an Atari 2600
    game console. But the idea of being able to make the machine do whatever I wanted
    it to was amazing and seductive.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我第一次接触编程是在1980年夏天。那时使用的是一台Apple II+计算机。作为当地高中校长，我的父亲能够把它带回家，让我们在夏天玩耍。这是学校里唯一的一台个人计算机。我已经了解了视频游戏，并且拥有一台Atari
    2600游戏机。但能够让计算机按照我的意愿执行任务的想法，既令人惊讶又充满诱惑。
- en: The Apple II+ included a version of unstructured BASIC in ROM called Applesoft.
    As far as BASIC programming languages go, it was somewhat limited. However, it
    opened a new world to me, and I ran with it, writing small program after small
    program as I explored what the Apple II+ was and could do. It could ask questions,
    interpret answers, calculate formulas, plot pictures, and make sounds. And all
    of that power was at the tips of my 14-year-old fingers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Apple II+内置了一个名为Applesoft的无结构BASIC版本。就BASIC编程语言而言，它有些局限。然而，它为我打开了一个全新的世界，我沉迷其中，不停地编写一个个小程序，探索Apple
    II+的功能和潜力。它能够提问、解释回答、计算公式、绘制图形、发出声音。这一切强大的功能都掌握在我14岁的小手指下。
- en: Of course, I wanted one of these godlike machines for my own. My father, likely
    thinking it would put me off, told my younger brother, Bob, and me we could have
    one if we learned how to program it. Challenge accepted!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我也想拥有一台属于自己的这类神奇机器。我父亲大概是想让我们却步，他告诉我和我弟弟Bob，我们可以得到一台这样的计算机，前提是我们学会如何编程。挑战接受！
- en: Months later, we did just that, and for Christmas in 1981, we got our own Apple
    II+. I still have it; it’s sitting on a shelf some five feet from me as I type
    this. And it still works.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 几个月后，我们如愿以偿，1981年圣诞节时我们得到了自己的Apple II+。我至今还保留着它；它就放在离我大约五英尺远的书架上，至今仍能使用。
- en: My brother and I both ended up in computer science. During high school, I taught
    myself BASIC, 6502 assembly, Pascal, and FORTRAN, all on the Apple II+. I fell
    in love with programming languages and became a programming language junkie. A
    high school friend showed me a cryptic and small but powerful language he had
    for his TRS-80 color computer. He said its name was “Forth.” I kept that in the
    back of my mind for years until I encountered it again in the 1990s. Forth is
    one of the languages we’ll explore in this book, and it was my go-to language
    for most of the 1990s, on a Macintosh no less. My other language at the time was
    Modula-2, a successor of Pascal.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我和我的兄弟都进入了计算机科学领域。高中时，我自学了BASIC、6502汇编语言、Pascal和FORTRAN，都是在Apple II+上学的。我爱上了编程语言，成为了一名编程语言的狂热爱好者。一个高中朋友向我展示了一种既神秘又小巧但功能强大的语言，他用的是TRS-80彩色计算机。他告诉我，这种语言叫做“Forth”。我将这个名字记在心里，直到1990年代再次遇到它。Forth是我们将在本书中探索的一种语言，也是我在1990年代大部分时间使用的编程语言，而且还是在Macintosh电脑上使用的。那时，我的另一种编程语言是Modula-2，它是Pascal的继任者。
- en: 'Thousands of programming languages have been developed over the years. I suspect
    a thorough history of programming languages would occupy several volumes. However,
    the purpose of this book is not history. The purpose of this book is:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，成千上万种编程语言已经被开发出来。我猜想，要详细讲述编程语言的历史可能会需要几卷书。然而，本书的目的并不是讲历史。本书的目的是：
- en: To give you a sense of where programming languages came from and provide some
    context for the languages we use today and the structures they contain.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让你了解编程语言的起源，并为我们今天使用的编程语言及其包含的结构提供一些背景。
- en: To explain some of the essential elements of programming languages, so you become
    familiar with terms like *Turing machine* and *Turing complete*.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释一些编程语言的基本元素，让你熟悉像*Turing 机*和*Turing 完备*这样的术语。
- en: To expand your thinking about what a programming language can be and how it
    can express thought and process in creative and elegant ways. We’ll do this by
    exploring various programming languages ranging from the unusual to the downright
    bizarre.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展你对编程语言的理解，探索它如何以富有创意和优雅的方式表达思想和过程。我们将通过探索各种编程语言，从不寻常到极其奇特的语言，来实现这一目标。
- en: '*To have fun!* We’ll create our own programming languages, and see how we can
    use them to implement some algorithms. We’ll even put one on a small computer
    for standalone projects (the BBC micro:bit).'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为了好玩！* 我们将创建我们自己的编程语言，看看如何用它们来实现一些算法。我们甚至会将其中一种编程语言应用到小型计算机上，用于独立项目（如BBC micro:bit）。'
- en: The “unusual to downright bizarre” programming languages have a name. They’re
    called *esoteric languages* or *esolangs*. Playing with and developing esolangs
    is a hobby for many, and even a serious pursuit for some. Most esolangs are not
    intended for actual work (whatever that might be). However, some languages that
    might be considered on the fringe of the esolang world *are* used for serious
    work. For example, Forth has been used for spacecraft control on several NASA
    missions, and NASA developed a language called CLIPS for expert system development.
    I consider languages like Forth and CLIPS to be “atypical” programming languages,
    with everyday languages like Python, Java, and C/C++ being typical languages.
    Naturally, these labels are subjective and open to debate.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: “不寻常到完全怪异”的编程语言有一个名字。它们被称为*异构语言*或*esolangs*。玩弄和开发异构语言是许多人的兴趣爱好，甚至是某些人的严肃追求。大多数异构语言并不用于实际工作（无论什么是“实际工作”）。然而，一些被认为是异构语言世界边缘的语言*确实*用于严肃的工作。例如，Forth曾在多个NASA任务中用于航天器控制，NASA还开发了一种叫做CLIPS的语言，用于专家系统开发。我认为像Forth和CLIPS这样的语言是“非典型”的编程语言，而像Python、Java和C/C++这样的语言是典型语言。自然，这些标签是主观的，值得辩论。
- en: '**Who Is This Book For?**'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**这本书适合谁？**'
- en: This book is for all fans of programming languages. It’s for people enamored
    with the idea of encoding thought in a form usable by a machine.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书适合所有编程语言的爱好者。它是献给那些迷恋将思想编码成机器可用形式的人们的。
- en: I hope anyone who codes finds something of value in this book. My primary goal
    is to help you expand your conception of what it means to code, what programming
    actually is, and how coding might be expressed.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望任何编程的人都能在这本书中找到有价值的内容。我的主要目标是帮助你拓展对编程的理解，了解编程到底是什么，以及如何表达编程。
- en: This book is truly for anyone who does more than use a computer. If you are
    a professional developer, you’ll appreciate the freedom that comes from thinking
    about your craft in unusual ways. If you are a student, you’ll hopefully see that
    programming can be more than what you may perceive it to be based on your introductory
    programming courses, as necessary as they are. If you’re a hobbyist, you’re likely
    already somewhat familiar with esolangs and are looking to feed your passion.
    Come on in, the water’s fine.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书适合任何比单纯使用计算机更多的人。如果你是专业开发人员，你会欣赏以不寻常的方式思考你的技艺所带来的自由。如果你是学生，希望你能看到编程其实可以比你在入门编程课程中所学到的更多，尽管这些课程是必要的。如果你是爱好者，你可能已经对异构语言有所了解，并希望能进一步激发你的兴趣。快进来，水很适宜。
- en: '**What Can You Expect to Learn?**'
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你可以期待学到什么？**'
- en: You can expect to learn about where the programming languages you use—perhaps
    daily—came from. You can expect to learn about alternate ways to think about programming
    and, by extension, see your everyday programming in a new light.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以期待了解你所使用的编程语言——也许是每天都在使用——的来源。你可以期待学习关于编程的其他思维方式，从而以新的视角看待你日常编程的工作。
- en: You can also expect to learn about the essential elements of a programming language,
    something about what makes a programming language complete (that is, capable of
    expressing any program), and something about how we can even know such a thing.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以期待学习编程语言的基本要素，了解是什么使得编程语言能够完备（即能够表达任何程序），以及我们如何知道这类事物的存在。
- en: You can expect to learn a little about a lot of programming languages, with
    a focus on esolangs and other “atypical” languages. As I indicated above, I used
    Forth almost exclusively for a decade to write everything from web CGI frameworks
    to scientific analysis tools for functional brain imaging (see [Figure 1](ch00.xhtml#ch00fig1)).
    I (not so) secretly hope a bright mind out there can see how to merge the rule-based
    expert system power of CLIPS with the power of modern deep learning. I suspect
    there’s a case to be made about why the two should work together.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以期待学习一些关于多种编程语言的内容，重点关注异构语言（esolangs）和其他“非典型”语言。正如我上面所说，我几乎整整十年都专门使用Forth来编写各种程序，从Web
    CGI框架到功能性脑成像的科学分析工具（见[图1](ch00.xhtml#ch00fig1)）。我（并不那么）秘密地希望某个聪明的头脑能够看到如何将CLIPS的基于规则的专家系统与现代深度学习的强大能力结合起来。我怀疑确实有理由认为这两者应该一起工作。
- en: '![Image](Images/00fig01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/00fig01.jpg)'
- en: '*Figure 1: A functional brain imaging analysis program written in Forth (circa
    1998)*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1：用Forth编写的功能性脑成像分析程序（约1998年）*'
- en: It’s my belief you’ll learn that developing a programming language is fun, even
    if the language itself is not overly useful. The Filska and Firefly languages
    we’ll create have different potential uses, but if nothing else, Filska can crunch
    numbers, and Firefly can make pretty pictures on a BBC micro:bit. The appendix
    demonstrates that even simple languages like Firefly can be useful for more “advanced”
    pursuits, like genetic programming.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信你会发现，开发一门编程语言其实是很有趣的，哪怕这门语言本身用处不大。我们将创建的Filska和Firefly语言有不同的潜在用途，但即使没有别的用途，Filska也能做一些数值计算，Firefly可以在BBC
    micro:bit上画漂亮的图像。附录演示了即便是像Firefly这样简单的语言，也可以用于更“高级”的应用，比如遗传编程。
- en: I also expect you’ll take what we do here and expand on it yourself. For example,
    the micro:bit has two pushbuttons. Why not enhance Firefly to use them? Or make
    additions to the ABC implementation beyond what we’ll add in the book, as it’s
    so simplistic that it’s begging for additions. If you do, please share your results
    to *[rkneuselbooks@gmail.com](mailto:rkneuselbooks@gmail.com)*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我也希望你能在这里所做的基础上进一步扩展。例如，micro:bit有两个按钮，为什么不增强Firefly使其能使用这两个按钮呢？或者在我们书中提供的ABC实现的基础上进行扩展，因为它非常简化，完全可以添加更多功能。如果你这么做了，请分享你的成果给*
    [rkneuselbooks@gmail.com](mailto:rkneuselbooks@gmail.com) *。
- en: '**What I Expect You to Know Already**'
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**我希望你已经具备的知识**'
- en: I expect you are already familiar with programming at some level. We’ll use
    Python to implement several esolangs, so it will help if you know something about
    Python. Beyond that, I don’t have any expectation of prior knowledge. The most
    important thing you can bring to this book is curiosity.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我预期你已经在某种程度上熟悉编程了。我们将使用Python来实现几种esolangs，所以如果你对Python有所了解会有帮助。除此之外，我对你是否具备其他背景没有任何期望。你能带给本书最重要的就是好奇心。
- en: It’s said curiosity killed the cat, but you’re not a cat. For us, curiosity
    is what made humans conquer fire, and develop stone tools, civilizations, art,
    music, mathematics, science, and ultimately, a car-sized robot wandering the surface
    of Mars—a robot we named “Curiosity.”
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有人说好奇心害死猫，但你不是猫。对我们来说，好奇心让人类征服了火，发展了石器工具、文明、艺术、音乐、数学、科学，最终，还制造出了一辆大小如车的机器人，漫游在火星表面——我们给它取名为“好奇号”。
- en: If you’re curious, if you wonder “why?”, then you’ve got all the background
    you need to engage with the material in this book.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你充满好奇，常常问“为什么？”那么你已经具备了阅读本书所需的所有背景知识。
- en: '**What This Book Is Not**'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**本书不是关于什么的**'
- en: Many books tell you what they are. Few tell you what they are not. I think this
    one should clarify itself, at least a little.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 许多书会告诉你它们是什么，但很少有书告诉你它们不是啥。我认为这本书至少应该稍微澄清一下这一点。
- en: There are university courses and textbooks with titles like “Principles of Programming
    Languages” or just “Programming Languages.” These courses and books are highly
    mathematical treatments of what programming languages are. They are fascinating,
    but very technical, and involve a lot of math and logic. I put them in the category
    of theoretical computer science. This book is not one of these texts. You won’t
    find any deep mathematics here. The logic is implicit in the code, not formal.
    This book is about programming languages from a historical, practical, and, of
    paramount importance, fun perspective—with additional emphasis on the fun.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有些大学课程和教材的标题是“编程语言原理”或简称“编程语言”。这些课程和书籍对编程语言进行了高度数学化的阐述。它们很有趣，但也非常技术性，涉及大量的数学和逻辑。我把它们归类为理论计算机科学的范畴。而本书并非这类书籍，你不会在这里找到深奥的数学知识。其逻辑是隐含在代码中的，而非形式化的。这本书是从历史、实践和最重要的角度——乐趣——来讨论编程语言的，尤其注重乐趣。
- en: The end of the book points you toward more academic treatments of programming
    languages. Please do investigate. However, please don’t put this book down believing
    you need to be a computer science graduate student to follow it. You don’t. If
    you happen to be a computer science graduate student, please don’t put the book
    down, either. I promise you’ll have fun with it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的结尾会引导你深入了解编程语言的更多学术性研究，务必进行探讨。不过，请不要读完本书后觉得你需要成为计算机科学的研究生才能理解它。你不需要。如果你恰好是计算机科学的研究生，请也不要放下这本书。我保证你会从中获得乐趣。
- en: '**About This Book**'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**关于本书**'
- en: The book reads well straight through. However, after [Chapter 3](ch03.xhtml#ch03),
    you can pretty much hop around as you wish. The first three chapters provide background
    and context. After that come three chapters on atypical programming languages
    (Forth, SNOBOL, and CLIPS) followed by five on esolangs (ABC, FRACTRAN, Piet,
    Brainfuck, and Befunge).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的连续阅读效果很好。但是，在[第三章](ch03.xhtml#ch03)之后，您可以根据自己的意愿随意跳跃。前三章提供背景和上下文。之后是三章关于非典型编程语言（Forth、SNOBOL和CLIPS），然后是五章关于异语言（ABC、FRACTRAN、Piet、Brainfuck和Befunge）。
- en: In the two chapters after those, we define, implement, and experiment with our
    first homegrown esolang, Filska. The two chapters after that do the same for Firefly.
    Lastly, the book ends by pointing you to more—there’s always more to know.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两章之后，我们定义、实现并对我们的第一个自制异语言Filska进行实验。接下来的两章则为Firefly做同样的事情。最后，本书指引你深入了解更多。
- en: The appendix explores genetic programming with Firefly. Genetic programming
    evolves programs instead of writing them by hand. The simplicity of Firefly makes
    it well-suited to such experiments—take a look and see.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 附录探讨了使用Firefly进行遗传编程。遗传编程是程序演化而非手工编写。Firefly的简单性使其非常适合这类实验—来看看吧。
- en: '**Operating Environment**'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**操作环境**'
- en: We assume Linux as our operating system. Specifically, we assume an Ubuntu distribution,
    at least version 20.04\. None of the languages we’ll explore require much in the
    way of external libraries, so it’s highly likely future versions of Ubuntu will
    work without much effort.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设Linux作为我们的操作系统。具体来说，我们假设一个Ubuntu发行版，至少是20.04版。我们将探索的语言中没有一种需要大量外部库，因此未来版本的Ubuntu很可能不需要太多努力就能运行。
- en: We won’t give explicit instructions here, but many macOS users will be able
    to install the languages as well. Windows users might need to work in a Unix-like
    environment like Cygwin, and will have to expend more effort to find some of the
    language tarballs and work through the installation process. Other options are
    using the Windows Subsystem for Linux or simply running Ubuntu in a virtual machine,
    both of which are easier than using Cygwin.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里不会给出明确的说明，但许多macOS用户也能安装这些语言。Windows用户可能需要在类Unix环境（如Cygwin）中工作，并且需要更多努力找到一些语言的tarball并完成安装过程。其他选项包括使用Windows子系统Linux或在虚拟机中运行Ubuntu，这两种方法都比使用Cygwin更容易。
- en: We need a C compiler to build some of the languages. Ubuntu usually comes with
    the gcc compiler suite for C and C++. You can test it with
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个C编译器来构建某些语言。Ubuntu通常自带用于C和C++的gcc编译器套件。您可以使用以下命令测试：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Almost any version of gcc will work.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎任何版本的gcc都可以使用。
- en: If gcc is not installed, and you get an error from the command above, the simplest
    way to install it is
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果gcc未安装，并且您从上述命令中收到错误消息，则安装它的最简单方法是
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once you’ve done this, repeat the command above to verify that gcc is now present.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，请重复以上命令以验证gcc现在是否存在。
- en: We’ll also implement some of the languages ourselves using Python 3\. The exact
    version of Python 3 is not critical. Ubuntu 20.04 comes with version 3.8.5,
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用Python 3自己实现一些语言。Python 3的确切版本并不重要。Ubuntu 20.04自带版本3.8.5，
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: so version 3.8.5 or later will suffice.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所以版本3.8.5或更高版本就足够了。
- en: Now, in the immortal words of Ms. Frizzle, “Take chances, make mistakes, and
    get messy!” Ready? Let’s go.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，引用Ms. Frizzle的不朽之言：“冒险，犯错，搞得一团糟！” 准备好了吗？出发吧。
