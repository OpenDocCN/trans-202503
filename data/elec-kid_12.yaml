- en: '![image](../images/common01.jpg)'
  id: totrans-0
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: '9'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '9'
- en: HOW CIRCUITS UNDERSTAND ONES AND ZEROS
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**电路如何理解一和零**'
- en: 'Mobile phones, computers, TVs, video game consoles, and almost all the other
    technology you see around you is built with digital electronics. If you’ve ever
    looked inside a computer, the circuits might seem complex, but when you break
    that hardware down into small pieces, it’s actually quite simple: every action
    a computer takes is based on whether some circuit sees a high or low voltage.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 手机、电脑、电视、视频游戏主机以及你周围几乎所有的其他科技产品都采用了数字电子技术。如果你曾经打开过电脑，你可能会觉得电路非常复杂，但当你将硬件分解成小块时，其实它非常简单：计算机的每个操作都基于某些电路是否看到高电压或低电压。
- en: You’ve used transistors to make circuits that control things, and in this chapter,
    you’ll learn the basics of using digital electronics to make even smarter circuits.
    You’re going to learn a new number system, what bits and bytes are, and how you
    can use bits and bytes to create messages with electricity.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经使用晶体管来制作控制电路，在这一章中，你将学习如何使用数字电子技术来制作更智能的电路。你将学习一种新的数字系统，什么是位（bit）和字节（byte），以及如何利用位和字节用电来创建信息。
- en: ONES AND ZEROS AS VOLTAGES
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**一和零作为电压**'
- en: When I was in school, my teacher told me that computers used ones and zeros
    to communicate, but he didn’t explain it any further. I wanted to know more, so
    I decided to ask my dad. Because computers are complex machines, I assumed the
    way they use ones and zeros was going to be complex, too, but my dad told me,
    “In a computer, a one is just a wire with voltage, and a zero is a wire without
    voltage.” (By “without voltage,” my dad meant the voltage was zero.)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在学校时，老师告诉我计算机通过一和零进行通信，但他没有进一步解释。我想知道更多，于是我决定去问我爸爸。因为计算机是复杂的机器，我以为它们使用一和零的方式也会很复杂，但我爸爸告诉我：“在计算机中，1只是一个带电压的电线，0是一个没有电压的电线。”（我爸爸所说的“没有电压”是指电压为零。）
- en: 'In “[How to Set the Output Speed of the 555 Timer](ch08.xhtml#ch08lev2sec02)”
    on [page 166](ch08.xhtml#page_166), I mentioned briefly that the pins of the 555
    timer could be either high or low. The pins on the ICs in a computer work the
    same way: high is one, and low is zero. Digital circuits work by flipping the
    voltages on different wires between high and low.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在《[如何设置555定时器的输出速度](ch08.xhtml#ch08lev2sec02)》的[第166页](ch08.xhtml#page_166)中，我简要提到过555定时器的引脚可以是高电平或低电平。计算机中集成电路的引脚工作原理也一样：高电平是1，低电平是0。数字电路通过在不同的导线上切换高低电压来工作。
- en: MEET THE BINARY NUMBER SYSTEM
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**认识二进制数字系统**'
- en: 'Normally, when you talk about numbers, you use *decimal numbers*, which are
    in the *base-10* number system. In base-10 numbers, a digit can have one of 10
    possible values, from 0 to 9\. But digital circuits can work with only two voltages
    (high and low), so they can understand only *binary numbers*. Binary is also called
    the *base-2* number system, and a binary number’s digits have only two possible
    values: 0 and 1.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当你谈论数字时，你使用的是*十进制数字*，它属于*基数为10*的数字系统。在十进制中，一个数字可以有10个可能的值，从0到9。但数字电路只能处理两种电压（高电压和低电压），因此它们只能理解*二进制数字*。二进制也叫做*基数为2*的数字系统，二进制数字的位只有两个可能的值：0和1。
- en: 'Here’s how you’d count to 10 in both decimal and binary:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你如何用十进制和二进制分别计数到10：
- en: '| **Decimal number** | **Binary number** |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| **十进制数字** | **二进制数字** |'
- en: '| --- | --- |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 0 | 0 |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 0 |'
- en: '| 1 | 1 |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 |'
- en: '| 2 | 10 |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 10 |'
- en: '| 3 | 11 |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 11 |'
- en: '| 4 | 100 |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 100 |'
- en: '| 5 | 101 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 101 |'
- en: '| 6 | 110 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 110 |'
- en: '| 7 | 111 |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 111 |'
- en: '| 8 | 1000 |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 1000 |'
- en: '| 9 | 1001 |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 9 | 1001 |'
- en: '| 10 | 1010 |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 10 | 1010 |'
- en: What’s going on here? The number 2 in decimal is 10 in binary, and 4 in decimal
    is 100 in binary!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了什么？十进制的数字2在二进制中是10，十进制的数字4在二进制中是100！
- en: 'You can figure out the value of any number in any system using the digits and
    their position. The rightmost digit always gets multiplied by 1\. Going left from
    there, each position’s value equals the base times the value of the previous position.
    In decimal, the base is 10, so the second position’s value is 10, or 10 × 1; the
    third position’s value is 100, or 10 × 10; the fourth position’s value is 1000,
    or 10 × 100; and so on. Here’s an example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过数字及其位置来推算任何系统中数字的值。最右边的数字始终乘以1。从右往左，每个位置的值等于基数乘以前一位置的值。在十进制中，基数是10，因此第二位的值是10，或者10
    × 1；第三位的值是100，或者10 × 10；第四位的值是1000，或者10 × 100；依此类推。这里有一个例子：
- en: '![image](../images/f0189-01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0189-01.jpg)'
- en: In the number 181, the first digit is 1, the second digit is 8, and the third
    digit is 1\. Once you multiply those digits by their position values, you can
    add the resulting values to get 181\. You don’t need to use this method to figure
    out decimal numbers, though. It’s pretty clear that 181 equals 181! But this method
    is very useful for finding the value of binary numbers. Binary follows the same
    rules, but it uses a base of 2 instead.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在数字181中，第一位是1，第二位是8，第三位是1。将这些数字与它们的位置值相乘，然后将得到的结果相加，即可得出181。尽管如此，你不需要使用这种方法来算出十进制数字，毕竟181显然等于181！但这种方法对找出二进制数的值非常有用。二进制遵循相同的规则，只是它使用的是2为基数。
- en: 'PROJECT #18: CONVERT FROM BINARY TO DECIMAL'
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 项目#18：从二进制转换到十进制
- en: In this project, you’re going to *convert* a binary number into its decimal
    form. Converting a number to a different base just means calculating that number’s
    value and writing it using digits in the new base.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将*转换*一个二进制数字为十进制形式。将数字转换为不同的进制意味着计算该数字的值并用新进制的数字表示它。
- en: Tools
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 工具
- en: '![image](../images/common-01.jpg) **A pen or pencil** to write with.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一支钢笔或铅笔**用来写字。'
- en: '![image](../images/common-01.jpg) **Paper** to write on.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **纸张**用来写字。'
- en: '![image](../images/common-01.jpg) **A calculator** to add numbers. If you’re
    good at doing math in your head, try this project without one.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一台计算器**用来加数字。如果你擅长心算，可以尝试不使用计算器进行此项目。'
- en: 'Step 1: Write It Down on Paper'
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第1步：写在纸上
- en: 'First, write an eight-digit binary number on paper, leaving space between the
    digits, both above and below the number. I’m going to convert the binary number
    1011 0101, and I wrote it out like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在纸上写下一个八位二进制数字，在数字上方和下方留出空格。我将转换二进制数字1011 0101，并像这样写出来：
- en: '![image](../images/f0190-01.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0190-01.jpg)'
- en: 'Step 2: Write the Position Values'
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第2步：写下位置值
- en: 'Next, write the value of each position above each digit. Binary works the same
    way as the decimal example, but the base is 2\. That means the value for the rightmost
    position is 1, and to find the next position to the left, you’d multiply the previous
    position’s value by 2\. For example, the second position’s value is 2 × 1 = 2;
    the third position’s value is 2 × 2 = 4; the fourth value is 4 × 2 = 8; and so
    on. Use a calculator if you don’t want to calculate it all in your head. When
    you write those values down, you should have something like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在每一位数字上方写出每个位置的值。二进制与十进制的工作方式相同，只是基数是2。这意味着最右边位置的值为1，要找到左边的位置，只需将前一个位置的值乘以2。例如，第二位的值是2
    × 1 = 2；第三位的值是2 × 2 = 4；第四位的值是4 × 2 = 8；以此类推。如果你不想在脑中计算这些，可以使用计算器。当你写下这些值时，你应该得到类似这样的结果：
- en: '![image](../images/f0191-01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0191-01.jpg)'
- en: 'Step 3: Find the Value of Each Digit'
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第3步：找出每个数字的值
- en: Look at each digit of the binary number you wrote down. If a digit is 0, write
    0 below it. If the digit is 1, write the value of that position below it. Those
    are the values you’ll add together to get your final decimal number.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 查看你写下的二进制数字的每一位。如果某位是0，就在它下方写0。如果该位是1，就在它下方写出该位置的值。这些值将会相加，得出最终的十进制数字。
- en: '![image](../images/f0191-02.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0191-02.jpg)'
- en: 'Step 4: Add the Numbers'
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第4步：添加数字
- en: You should now have three rows of numbers. Add the numbers in the bottom row
    (you might find it helpful to write a + sign between each pair of numbers) to
    get the sum, which is the decimal value of your binary number.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该已经有了三行数字。将底部行中的数字相加（你可以在每对数字之间写一个加号，以便于加法），得到和，即为二进制数字的十进制值。
- en: '![image](../images/f0192-01.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0192-01.jpg)'
- en: The binary number 1011 0101 is 181 in decimal. If you’ve been following along
    with that number and your answer is different, go through the steps again and
    check your results against mine to find out where the error is.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制数字1011 0101转换为十进制是181。如果你跟着这个数字做，并且结果不同，请重新检查步骤，并将你的结果与我的答案进行对比，以找出错误所在。
- en: '**TRY IT OUT: TRANSFORM MORE BINARY NUMBERS**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**动手试试：转换更多二进制数字**'
- en: To get more practice with ones and zeros, let’s bring some more binary numbers
    into the decimal world. Here are a few to try:[*](ch09.xhtml#fn01a)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地练习零和一，我们将一些二进制数字带入十进制世界。这里有几个可以尝试的数字：[ *](ch09.xhtml#fn01a)
- en: '1010'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '1010'
- en: 0011 1111
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 0011 1111
- en: 1000 0000
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 1000 0000
- en: 0011 1011 0101
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 0011 1011 0101
- en: '[*](ch09.xhtml#fn_01a) In decimal, these binary numbers are 10, 63, 128, and
    949.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[*](ch09.xhtml#fn_01a) 在十进制中，这些二进制数字分别是10、63、128和949。'
- en: BITS AND BYTES
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 位和字节
- en: Each digit in a binary number is called a *bit* (that’s short for *binary digit*),
    and computers handle numbers in blocks of eight bits called a *byte*. The binary
    number 1011 0101 has eight bits, so it’s a byte. You can interact with a computer
    in many ways, but all your mouse clicks, key presses, webcam videos, and so on
    need to be translated into bits and bytes before the computer can understand them.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制数中的每一位数字叫做*比特*（*binary digit*的缩写），计算机以八个比特为一组处理数字，这组比特叫做*字节*。二进制数1011 0101有八个比特，因此它是一个字节。你可以通过多种方式与计算机互动，但所有的鼠标点击、按键、摄像头视频等都需要被转换成比特和字节，计算机才能理解。
- en: 'In fact, when working with computers and other digital gadgets, you usually
    see much, much larger numbers than just 1 byte. All the files on a computer are
    collections of bytes, but if you tried to describe their size in bytes alone,
    those numbers would be huge! That’s why files are usually described in larger
    units, like kilobytes[*](footnote.xhtml#fn02) (kB), megabytes (MB), gigabytes
    (GB), terabytes (TB), and so on. Here’s what those units mean:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，在使用计算机和其他数字设备时，你通常会看到比1字节大得多的数字。计算机上的所有文件都是字节的集合，但如果你单纯用字节来描述它们的大小，这些数字会非常庞大！因此，文件通常用更大的单位来描述，比如千字节[*](footnote.xhtml#fn02)（kB）、兆字节（MB）、千兆字节（GB）、太字节（TB）等。以下是这些单位的含义：
- en: '| 1 kB | = 1,000 bytes |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 1 kB | = 1,000 字节 |'
- en: '| 1 MB | = 1,000 kB = 1,000,000 bytes |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 1 MB | = 1,000 kB = 1,000,000 字节 |'
- en: '| 1 GB | = 1,000 MB = 1,000,000 kB = 1,000,000,000 bytes |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 1 GB | = 1,000 MB = 1,000,000 kB = 1,000,000,000 字节 |'
- en: '| 1 TB | = 1,000 GB = 1,000,000 MB = 1,000,000,000 kB = 1,000,000,000,000 bytes
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 1 TB | = 1,000 GB = 1,000,000 MB = 1,000,000,000 kB = 1,000,000,000,000 字节
    |'
- en: If a computer’s hard disk can hold 1 TB of data, then it can hold one trillion
    bytes, which is eight trillion ones and zeros!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果计算机的硬盘可以容纳1 TB的数据，那么它就可以容纳一万亿字节，也就是八万亿个一和零！
- en: NUMBERS CAN BE ANYTHING
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数字可以代表任何事物
- en: Now you might be thinking, “Why on Earth would I ever need eight trillion ones
    and zeros in my computer?” The fact is, whether you use a computer to write stories,
    draw pictures, talk to your friends, play video games, or anything else, you’re
    actually using those ones and zeros.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能会想，“为什么我需要计算机里有八万亿个一和零？”事实上，无论你是用计算机写故事、画画、和朋友聊天、玩游戏还是做其他任何事，你都在使用那些一和零。
- en: For example, how does a computer show an image on a screen? A computer screen
    is made of a lot of small points called *pixels*, and each pixel can be set to
    a color that is a mix of red, green, and blue light. If you want a pixel to be
    the brightest yellow possible, you’d use numbers to tell the computer to turn
    that pixel’s red and green settings to full intensity and its blue setting to
    zero (because mixed red and green light looks like yellow). This way you can translate
    numbers into an image on the screen.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，计算机是如何在屏幕上显示图像的？计算机屏幕由许多小点组成，叫做*像素*，每个像素可以设置为一种红色、绿色和蓝色光混合的颜色。如果你希望一个像素呈现最亮的黄色，你会用数字告诉计算机将该像素的红色和绿色设置为全强度，蓝色设置为零（因为混合红色和绿色光看起来像黄色）。通过这种方式，你可以将数字转化为屏幕上的图像。
- en: 'PROJECT #19: COLOR GUESSING GAME'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '项目 #19：颜色猜测游戏'
- en: In this project, you’ll build a pixel-color guessing game using binary values.
    It’s a two-player game where you and a friend take turns being “the computer”
    and “the user.”
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本项目中，你将使用二进制值来构建一个像素颜色猜测游戏。它是一个两人游戏，你和朋友轮流扮演“计算机”和“用户”的角色。
- en: The person who is the computer sets the color of the pixel by pushing a combination
    of three buttons. When the computer is ready, the user must try to guess which
    color the pixel is. When the user is ready to make the guess, they should say
    the chosen color out loud and then push the color revealer button to show the
    actual color. If the user guesses correctly, they get one point and get to guess
    again. If the guess is wrong, you switch roles. The first one to reach three points
    wins the round.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机的“人类”通过按下三个按钮的组合来设置像素的颜色。当计算机准备好后，用户必须猜测像素的颜色是什么。当用户准备好猜测时，他们应该大声说出所选颜色，然后按下颜色显示按钮来展示实际颜色。如果用户猜对了，他们得一分并且可以继续猜。如果猜错了，就交换角色。第一个得三分的人赢得这一回合。
- en: '![image](../images/f0194-01.jpg)![image](../images/f0195-01.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0194-01.jpg)![image](../images/f0195-01.jpg)'
- en: Meet the RGB LED
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 认识RGB LED
- en: To create the pixel for this project, you’re going to use a *red-green-blue
    (RGB) LED*, which combines a red LED, a green LED, and a blue LED into one component.
    By turning on and off each of these LEDs, you can create different colors. For
    example, turning on only the red and green LEDs would give you yellow.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要为此项目创建像素，您将使用*红绿蓝（RGB）LED*，它将红色LED、绿色LED和蓝色LED组合为一个组件。通过打开和关闭这些LED中的每一个，您可以创建不同的颜色。例如，仅打开红色和绿色LED会产生黄色。
- en: 'There are two types of RGB LEDs: *common anode* and *common cathode*. This
    is what a common anode RGB LED looks like, along with its symbol:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的RGB LED：*共阳极*和*共阴极*。这就是一个共阳极RGB LED的外观及其符号：
- en: '![image](../images/f0195-02.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0195-02.jpg)'
- en: RGB LEDs have four legs. You’ll use three legs to set the color, and the fourth
    leg is the *common* leg. In common anode RGB LEDs, the positive (anode) sides
    of the three LEDs are combined into one pin; common cathode RGBs combine the negative
    (cathode) sides into one pin.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: RGB LED有四个引脚。您将使用三个引脚来设置颜色，第四个引脚是*共用*引脚。在共阳极RGB LED中，三个LED的正极（阳极）合并为一个引脚；共阴极RGB
    LED将三个LED的负极（阴极）合并为一个引脚。
- en: In this project, you’re going to build the following circuit, which uses a common
    anode RGB LED and some buttons.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，您将构建以下电路，使用一个共阳极RGB LED和一些按钮。
- en: Shopping List
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 购物清单
- en: '![image](../images/f0196-01.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0196-01.jpg)'
- en: '![image](../images/common-01.jpg) **A standard 9 V battery** to power the circuit.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一个标准的9 V电池**为电路供电。'
- en: '![image](../images/common-01.jpg) **A 9 V battery clip** (Jameco #11280, Bitsbox
    #BAT033) to connect the battery to the circuit.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一个9 V电池夹**（Jameco #11280, Bitsbox #BAT033）用于将电池连接到电路。'
- en: '![image](../images/common-01.jpg) **A breadboard** (Jameco #20601, Bitsbox
    #CN329) with at least 30 rows.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一个面包板**（Jameco #20601, Bitsbox #CN329），至少包含30行。'
- en: '![image](../images/common-01.jpg) **Breadboard jumper wires** (Jameco #2237044,
    Bitsbox #CN236) to easily connect parts. (Standard hookup wire works, too.)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common-01.jpg) **面包板跳线**（Jameco #2237044, Bitsbox #CN236）用于方便地连接部件。（标准连接线也可以使用。）'
- en: '![image](../images/common-01.jpg) **Three 330 Ω resistors** (Jameco #661386,
    Bitsbox #CR25330R) for limiting the current to the LED.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **三只330 Ω电阻**（Jameco #661386, Bitsbox #CR25330R）用于限制LED的电流。'
- en: '![image](../images/common-01.jpg) **RGB LED with common anode** (Jameco #2219567,
    Bitsbox #OP100) to create colors.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **共阳极RGB LED**（Jameco #2219567, Bitsbox #OP100）用于创建颜色。'
- en: '![image](../images/common-01.jpg) **Four push buttons** (Jameco #119011, Bitsbox
    #SW087) to set and reveal colors.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **四个按钮**（Jameco #119011, Bitsbox #SW087）用于设置和显示颜色。'
- en: 'Step 1: Place the Color Chooser’s Push Buttons'
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第1步：放置颜色选择按钮
- en: Orient your breadboard so that the notch down the middle runs from top to bottom.
    Then, place three push buttons at the bottom of your breadboard; each should have
    one pair of legs on the left side of the notch and one pair on the right. This
    should leave you plenty of room to connect components on both sides of the buttons,
    and you’ll be able to separate the computer’s buttons from the user’s button more
    easily. With your buttons in position, connect three jumper wires from the bottom-right
    pin of each push button to the negative supply column.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 将面包板放置，使中间的缺口从顶部到底部延伸。然后，将三个按钮放在面包板的底部；每个按钮的一对引脚应该位于缺口的左侧，另一对引脚位于右侧。这样，您将有足够的空间在按钮的两侧连接其他组件，并且能够更容易地将计算机的按钮与用户的按钮区分开来。按钮放置好后，从每个按钮的右下方引脚连接三根跳线到负电源列。
- en: '![image](../images/f0197-01.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0197-01.jpg)'
- en: 'Step 2: Connect the RGB LED'
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第2步：连接RGB LED
- en: In the middle of the board on the left, connect your RGB LED. The longest leg
    of the RGB LED is the common anode leg. Leave this unconnected for now. Connect
    a 330 Ω resistor from each of the remaining LED legs to an empty row on the right
    side of the breadboard. From each of these three rows, connect a jumper wire to
    the top-left pin of each push button.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在板子左侧的中间位置，连接您的RGB LED。RGB LED的最长引脚是共阳极引脚，暂时不连接它。从RGB LED剩余的每个引脚连接一只330 Ω电阻到面包板右侧的空白行。然后，从这三行中的每一行，连接一根跳线到每个按钮的左上方引脚。
- en: '![image](../images/f0198-01.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0198-01.jpg)'
- en: 'Step 3: Connect the Color Revealer Button'
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第3步：连接颜色显示按钮
- en: Next, add the button that reveals the computer’s chosen color to the user. Place
    a fourth push button all the way at the top of the breadboard, across the middle
    notch. Connect a jumper wire from the common anode leg of the RGB LED to the top-left
    pin of the fourth push button. Then, connect one jumper wire from the bottom-right
    pin of this push button to the positive supply column on the right.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加一个按钮，让用户能够看到计算机选择的颜色。将第四个按钮放在面包板的最顶部，横跨中间的凹槽。将一根跳线从RGB LED的共阳极引脚连接到第四个按钮的左上角引脚。然后，再将一根跳线从这个按钮的右下角引脚连接到右侧的正电源列。
- en: '![image](../images/f0199-01.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0199-01.jpg)'
- en: 'Step 4: Test the Colors'
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 步骤 4：测试颜色
- en: Connect the battery clip to the supply columns on the right, connect a battery,
    and try it out! Push some of the buttons on the bottom and then push the color
    revealer button to see the color. In this photo, I set my RGB LED to green.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 将电池夹连接到右侧的电源列，连接电池并试试看！按下底部的一些按钮，然后按下颜色揭示按钮查看颜色。在这张照片中，我将我的RGB LED设置为绿色。
- en: '![image](../images/f0199-02.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0199-02.jpg)'
- en: 'You should be able to see the following seven colors, depending on which buttons
    you push:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到以下七种颜色，具体取决于你按下了哪些按钮：
- en: '| **Color** | **Top button** | **Middle button** | **Lower button** |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| **颜色** | **上按钮** | **中按钮** | **下按钮** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Red | Pushed (1) | Not pushed (0) | Not pushed (0) |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 红色 | 按下 (1) | 未按下 (0) | 未按下 (0) |'
- en: '| Green | Not pushed (0) | Pushed (1) | Not pushed (0) |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 绿色 | 未按下 (0) | 按下 (1) | 未按下 (0) |'
- en: '| Blue | Not pushed (0) | Not pushed (0) | Pushed (1) |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| 蓝色 | 未按下 (0) | 未按下 (0) | 按下 (1) |'
- en: '| Yellow | Pushed (1) | Pushed (1) | Not pushed (0) |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 黄色 | 按下 (1) | 按下 (1) | 未按下 (0) |'
- en: '| Cyan | Not pushed (0) | Pushed (1) | Pushed (1) |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 青色 | 未按下 (0) | 按下 (1) | 按下 (1) |'
- en: '| Magenta | Pushed (1) | Not pushed (0) | Pushed (1) |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 品红 | 按下 (1) | 未按下 (0) | 按下 (1) |'
- en: '| White | Pushed (1) | Pushed (1) | Pushed (1) |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| 白色 | 按下 (1) | 按下 (1) | 按下 (1) |'
- en: If your buttons do not match these colors, switch the wires between the three
    resistors to the buttons so that they match.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的按钮颜色不匹配，请交换三只电阻器与按钮之间的连接，直到它们匹配为止。
- en: 'Step 5: What If the Game Doesn’t Work?'
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 步骤 5：如果游戏不工作怎么办？
- en: If you see no colors at all, check that your connections match the circuit diagram.
    If the connections are correct and you still can’t see any colors when pushing
    the color revealer button, you may have a common cathode LED instead of a common
    anode. To check for this, simply switch the positive and negative connections
    from the battery.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你完全看不见颜色，请检查你的连接是否与电路图匹配。如果连接正确，但按下颜色揭示按钮后仍然看不见任何颜色，可能是你使用了共阴极LED而不是共阳极。检查这一点的方法很简单，只需交换电池的正负连接。
- en: When you’ve verified that all the colors work, invite a friend to play!
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当你确认所有颜色都能正常工作时，邀请朋友一起来玩吧！
- en: '**TRY IT OUT: SOLDER THE COLOR GUESSING GAME**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试一下：焊接颜色猜谜游戏**'
- en: This is a perfect circuit to practice your soldering skills on. Get a prototyping
    board and solder the circuit onto it so that you have a permanent Color Guessing
    Game to bring with you on a long car ride.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个完美的电路，可以用来练习你的焊接技能。拿一块原型板，将电路焊接到板上，这样你就有了一个永久的颜色猜谜游戏，可以带着它去长途旅行。
- en: HOW BINARY NUMBERS CAN CREATE WORDS
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何用二进制数字创建单词
- en: Images aren’t the only things that can be stored as binary numbers; you can
    represent letters as numbers, too. One way to do this is to use the *ASCII code*,
    which is a standard set of bytes that computers understand as upper- and lowercase
    letters, numbers, punctuation marks, and so on. The numbers in this table represent
    the lowercase letters in the English alphabet.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图像并不是唯一能用二进制数字存储的东西；字母也可以用数字表示。实现这一点的一种方法是使用*ASCII码*，它是计算机能够理解的标准字节集，用于表示大写字母、小写字母、数字、标点符号等。此表中的数字代表英文字母的小写字母。
- en: '| **Decimal ASCII code** | **Binary value** | **Lowercase letter** |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| **十进制ASCII代码** | **二进制值** | **小写字母** |'
- en: '| --- | --- | --- |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 97 | 0110 0001 | a |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| 97 | 0110 0001 | a |'
- en: '| 98 | 0110 0010 | b |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 98 | 0110 0010 | b |'
- en: '| 99 | 0110 0011 | c |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| 99 | 0110 0011 | c |'
- en: '| 100 | 0110 0100 | d |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| 100 | 0110 0100 | d |'
- en: '| 101 | 0110 0101 | e |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 101 | 0110 0101 | e |'
- en: '| 102 | 0110 0110 | f |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| 102 | 0110 0110 | f |'
- en: '| 103 | 0110 0111 | g |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| 103 | 0110 0111 | g |'
- en: '| 104 | 0110 1000 | h |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 104 | 0110 1000 | h |'
- en: '| 105 | 0110 1001 | i |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 105 | 0110 1001 | i |'
- en: '| 106 | 0110 1010 | j |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 106 | 0110 1010 | j |'
- en: '| 107 | 0110 1011 | k |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 107 | 0110 1011 | k |'
- en: '| 108 | 0110 1100 | l |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| 108 | 0110 1100 | l |'
- en: '| 109 | 0110 1101 | m |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 109 | 0110 1101 | m |'
- en: '| 110 | 0110 1110 | n |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 110 | 0110 1110 | n |'
- en: '| 111 | 0110 1111 | o |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 111 | 0110 1111 | o |'
- en: '| 112 | 0111 0000 | p |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| 112 | 0111 0000 | p |'
- en: '| 113 | 0111 0001 | q |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 113 | 0111 0001 | q |'
- en: '| 114 | 0111 0010 | r |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 114 | 0111 0010 | r |'
- en: '| 115 | 0111 0011 | s |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 115 | 0111 0011 | s |'
- en: '| 116 | 0111 0100 | t |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 116 | 0111 0100 | t |'
- en: '| 117 | 0111 0101 | u |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| 117 | 0111 0101 | u |'
- en: '| 118 | 0111 0110 | v |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| 118 | 0111 0110 | v |'
- en: '| 119 | 0111 0111 | w |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| 119 | 0111 0111 | w |'
- en: '| 120 | 0111 1000 | x |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| 120 | 0111 1000 | x |'
- en: '| 121 | 0111 1001 | y |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| 121 | 0111 1001 | y |'
- en: '| 122 | 0111 1010 | z |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 122 | 0111 1010 | z |'
- en: For example, the letter *a* can be represented by the decimal number 97, which
    is the binary number 0110 0001\. You can use this table to encode and decode secret
    messages written with only ones and zeros.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，字母 *a* 可以用十进制数字97表示，即二进制数字0110 0001。你可以使用这个表格来编码和解码由零和一组成的秘密消息。
- en: 'PROJECT #20: THE SECRET MESSAGE MACHINE'
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 项目#20：秘密消息机
- en: This project is a circuit that shows eight-bit binary numbers with LEDs. An
    LED that is lit is a 1, and an LED that is off is a 0\. You’ll use switches to
    set the binary number and a push button to show the binary number on the LEDs.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目是一个电路，通过LED显示八位二进制数字。点亮的LED代表1，熄灭的LED代表0。你将使用开关来设置二进制数字，并用一个按键将二进制数字显示在LED上。
- en: Eight bits are enough to represent an ASCII character, so you can use this project
    to generate secret messages that can only be decoded by someone who knows binary!
    This finished Secret Message Machine shows the letter *w*, or 0111 0111.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 八位二进制足以表示一个ASCII字符，因此你可以使用这个项目生成只有懂二进制的人才能解码的秘密消息！这个完成的秘密消息机展示了字母 *w*，即 0111
    0111。
- en: '![image](../images/f0202-01.jpg)![image](../images/f0203-01.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0202-01.jpg)![image](../images/f0203-01.jpg)'
- en: Meet the DIP Switch
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 认识DIP开关
- en: This circuit uses eight switches to set the binary value, but it would be a
    pain to plug that many individual buttons into your breadboard. Fortunately, you
    can just use a *DIP switch*, which is a component with a row of one or more mini
    switches.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这个电路使用八个开关来设置二进制值，但把这么多独立的按钮插到面包板上会很麻烦。幸运的是，你可以使用一个 *DIP开关*，它是一个带有一排或多排微型开关的元件。
- en: '![image](../images/f0204-01.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0204-01.jpg)'
- en: '**NOTE**'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*DIP stands for* dual in-line package, *which is how the pins are arranged.
    A component with “DIP” in its name has two rows of pins that you can plug into
    a breadboard. The DIP switch in this project has eight individual switches. This
    is perfect for creating a binary value input to a row of LEDs.*'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '*DIP代表*双列直插封装，*指的是引脚的排列方式。名称中带有“DIP”的元件有两排引脚，你可以将其插入面包板中。这个项目中的DIP开关有八个独立的开关，非常适合为一排LED创建二进制输入。*'
- en: Shopping List
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 购物清单
- en: '![image](../images/common-01.jpg) **A standard 9 V battery** to power the circuit.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一块标准的9 V电池**为电路提供电力。'
- en: '![image](../images/common-01.jpg) **A 9 V battery clip** (Jameco #11280, Bitsbox
    #BAT033) to connect the battery to the circuit.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一个9 V电池夹**（Jameco #11280, Bitsbox #BAT033），用来将电池与电路连接。'
- en: '![image](../images/common-01.jpg) **A breadboard** (Jameco #20601, Bitsbox
    #CN329) with at least 30 rows.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一个面包板**（Jameco #20601, Bitsbox #CN329），至少有30行。'
- en: '![image](../images/common-01.jpg) **Breadboard jumper wires** (Jameco #2237044,
    Bitsbox #CN236) to easily connect parts. (Standard hookup wire works, too.)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common-01.jpg) **面包板跳线**（Jameco #2237044, Bitsbox #CN236），用于方便地连接部件。（标准连接线也可以使用。）'
- en: '![image](../images/common-01.jpg) **Eight 330 Ω resistors** (Jameco #661386,
    Bitsbox #CR25330R) for limiting the current to the LEDs. Any value between 270
    Ω and 470 Ω works well.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **八个330 Ω电阻**（Jameco #661386, Bitsbox #CR25330R），用于限制流向LED的电流。270
    Ω到470 Ω之间的任何值都能很好工作。'
- en: '![image](../images/common-01.jpg) **Eight blue LEDs** (Jameco #2193889, Bitsbox
    #OP033) to show the binary number.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **八个蓝色LED**（Jameco #2193889, Bitsbox #OP033），用来显示二进制数字。'
- en: '![image](../images/common-01.jpg) **One 8-position DIP switch** (Jameco #696984,
    Bitsbox #SW098) to set the binary number.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一个8位DIP开关**（Jameco #696984, Bitsbox #SW098），用来设置二进制数字。'
- en: '![image](../images/common-01.jpg) **A push button** (Jameco #119011, Bitsbox
    #SW087) to turn on the LEDs.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../images/common-01.jpg) **一个按钮**（Jameco #119011, Bitsbox #SW087），用来打开LED。'
- en: '![image](../images/f0205-01.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0205-01.jpg)'
- en: 'Step 1: Connect the Push Button'
  id: totrans-162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第一步：连接按钮
- en: Plug the push button into the top of your breadboard. This project will take
    up a lot of space on your breadboard, so from here on, try to keep your components
    as close together as possible.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 将按钮插入面包板的顶部。这个项目将在面包板上占用大量空间，因此从现在开始，尽量将各个组件放置得尽可能紧凑。
- en: Connect a jumper wire from the top-right breadboard row, which should be connected
    to the upper pin of the push button, to the positive supply rail on the right
    side. Then, connect a jumper wire from the lower pin to the positive supply column
    on the left.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 从面包板右上角的行连接一根跳线，这一行应该连接到按键的上引脚，再连接一根跳线从按键下引脚到左侧的正电源列。
- en: 'Your breadboard should look something like this:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你的面包板应该看起来像这样：
- en: '![image](../images/f0206-01.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0206-01.jpg)'
- en: This push button controls the connection from the battery’s positive terminal
    to the rest of the circuit. When the button is not pushed, there’s no closed loop
    for the current to flow through, and the circuit doesn’t have power.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这个按键控制着电池正极与电路其余部分的连接。当按键未被按下时，电流无法形成闭合回路，电路没有电源。
- en: 'Step 2: Connect the DIP Switch'
  id: totrans-168
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 步骤2：连接DIP开关
- en: Next, connect the DIP switch to your breadboard just below the push button,
    with the numbers on the right side of the middle notch. Run one jumper wire from
    each of the eight rows to the positive supply column on the left, for a total
    of eight wires. You’ll need to be able to set the switches on and off, so connect
    the wires as far away from the switch as possible to leave room for your fingers.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将DIP开关连接到面包板上，位置在按键下方，且中间缺口右侧有数字。将每一排的跳线连接到左侧的正电源列，总共需要八条线。为了能方便地设置开关的开和关，请将线连接到尽可能远离开关的位置，以便为你的手指留出空间。
- en: '![image](../images/f0207-01.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0207-01.jpg)'
- en: 'Step 3: Connect the LEDs'
  id: totrans-171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 步骤3：连接LED
- en: Now, connect one LED’s short leg to the negative supply column on the right,
    and connect its long leg to the last row at the bottom of your breadboard. Follow
    the same pattern upward to plug the rest of the LEDs into the breadboard on rows
    of their own, leaving one empty row between LEDs. (If you want to make it easier
    to read the LEDs, put your LEDs in two groups of four by leaving a couple of extra
    rows after the fourth LED.) Then, connect a resistor from each row with an LED
    to the same row on the left side of the notch in the middle of the breadboard.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将一个LED的短脚连接到右侧的负电源列，将长脚连接到面包板底部的最后一排。按照相同的方式，向上插入其余的LED，每个LED占一排，LED之间留一个空排。（如果你想让LED更易读，可以将LED分为两组，每组四个，在第四个LED之后多留几排。）然后，从每排有LED的行连接一根电阻线到面包板缺口中间左侧的相应行。
- en: '![image](../images/f0208-01.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0208-01.jpg)'
- en: It will be best to connect the LEDs and switches so that you and your friend
    can sit on opposite sides of the board and see the bits in the same order, so
    pay careful attention to these connections. With your resistors in place, connect
    a jumper wire from each resistor row on the left side of the breadboard notch
    to a DIP-switch pin on the right side of the notch. Connect the resistor closest
    to the bottom of the breadboard to Switch 1, the next LED to Switch 2, and so
    on; you should end by connecting the top resistor to Switch 8.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 最好将LED和开关连接，以便你和你的朋友可以坐在面包板的两侧，按照相同的顺序查看各个位置，所以在连接时要特别小心。将电阻放好后，从面包板缺口左侧的每一排电阻连接一根跳线，连接到右侧缺口的DIP开关引脚。将最接近面包板底部的电阻连接到开关1，接下来的LED连接到开关2，以此类推；最后，将最上方的电阻连接到开关8。
- en: '![image](../images/f0208-02.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0208-02.jpg)'
- en: 'Step 4: Send a Secret Message!'
  id: totrans-176
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 步骤4：发送秘密信息！
- en: Connect the negative side of the battery clip to the negative supply column,
    and then connect the positive side to the positive supply column, as shown.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 将电池夹的负极连接到负电源列，然后将正极连接到正电源列，如图所示。
- en: '![image](../images/f0209-01.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0209-01.jpg)'
- en: Then, push all the switches in the “on” direction, press and hold the button
    to see whether all the lights light up, and turn off each LED one by one.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将所有开关推到“开”的位置，按住按钮，观察所有的灯是否都亮起来，并逐个关闭每个LED灯。
- en: If all the LEDs work, it’s time to play! Invite a friend over and use this circuit
    to “talk” to them without speaking. Sit on opposite sides of a table, write down
    a word on a piece of paper for your own reference, and keep it hidden from your
    friend. Look at the ASCII code table and set the switches to the binary values
    for the first letter in your word. For example, the switch in the next photo is
    set to display a lowercase letter *a*.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有的LED灯都工作正常，那就可以开始玩了！邀请一个朋友过来，利用这个电路与他们“对话”而不出声。坐在桌子的两边，在纸上写下一个单词作为参考并保密。查看ASCII代码表，并将开关设置为单词第一个字母的二进制值。例如，下图中的开关设置为显示小写字母*a*。
- en: '![image](../images/f0210-01.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0210-01.jpg)'
- en: When your switch bank is ready to show a letter, push the button so that the
    LEDs light up. Hold the push button while your friend writes down the binary value.
    Then, release the push button and set the binary value for the next character.
    Keep doing this until you’ve shown all the characters in your word. When you’re
    done, show the ASCII code table to your friend so they can try to figure out your
    word.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的开关组准备好显示一个字母时，按下按钮让LED灯亮起。按住按钮的同时，让你的朋友记录下二进制值。然后，松开按钮并设置下一个字符的二进制值。一直这样做，直到你显示完单词中的所有字符。完成后，给你的朋友展示ASCII代码表，让他们试着猜出你的单词。
- en: 'Step 5: What If the Secret Message Machine Doesn’t Work?'
  id: totrans-183
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第五步：如果秘密信息机没有工作怎么办？
- en: If you’ve been following along for the whole book, you’ve connected a lot of
    LED circuits, but this one does have a lot of components. It’s easy to make a
    wrong connection somewhere, so if your circuit doesn’t work right away, check
    each connection carefully against this project’s circuit diagram.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从头到尾跟着本书进行操作，你已经连接了许多LED电路，但这个电路包含了很多组件。在某些地方接错连接很容易，所以如果你的电路没有立即工作，请仔细对照项目的电路图检查每个连接。
- en: If none of the lights work, first check that the battery’s positive and negative
    terminals are connected correctly. Next, check that the LEDs are oriented the
    right way and that the resistors are the right values. If some lights work while
    others don’t, then some of the LED or resistor legs may be touching when they
    shouldn’t. Inspect them closely to find the error.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果灯光都不亮，首先检查电池的正负极是否正确连接。接下来，检查LED灯的方向是否正确，电阻器的数值是否合适。如果有些灯亮了而有些灯不亮，可能是某些LED灯或电阻器的引脚不小心接触了不该接触的地方。仔细检查它们，找出错误。
- en: '**WHY COMPUTERS USE ONES AND ZEROS**'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么计算机使用1和0**'
- en: Computers use ones and zeros instead of the decimal numbers from 0 to 9 because
    when you have only two values, it makes constructing electronic circuits to do
    calculations and store the values much easier.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机使用1和0而不是0到9的十进制数字，因为当只有两个值时，构建电子电路进行计算和存储这些值会容易得多。
- en: 'For example, because each digit has only two possible values, one or zero,
    it’s easy to create a simple memory block to store binary numbers using switches,
    as you did with the DIP switch in Project #20.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，由于每个数字只有两种可能的值，1或0，所以使用开关创建一个简单的存储二进制数字的内存块非常容易，就像你在第20个项目中使用DIP开关时一样。
- en: It’s possible to save ones and zeros in many different ways, thereby creating
    *memory*. In the early days of computing, it was common to save sets of ones and
    zeros as physical cards with holes in them. Today, many hard disks save ones and
    zeros on magnetic disks, or even via electrons stored inside an integrated circuit.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的方式可以存储1和0，从而创造出*记忆*。在计算机发展的早期，常常将1和0以有孔的物理卡片形式保存。如今，许多硬盘通过磁盘存储1和0，甚至通过集成电路内存储的电子来保存。
- en: '**WHAT’S NEXT?**'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**接下来做什么？**'
- en: In this chapter, you learned how binary numbers work. You’ve seen how ones and
    zeros can be used to show images on your computer screen and how to decode a bunch
    of seemingly random ones and zeros into readable text. To explore binary numbers
    a bit more, come up with your own binary codes for the letters in the alphabet.
    There are 26 letters from *a* to *z*. How many digits do you need to represent
    all 26 letters? To figure this out, you can start by saying that the binary number
    1 means *a*. The next binary number, 10, is *b*. Next, 11, is *c*. Write this
    down and keep increasing until you reach *z*. Then, count the number of digits
    you needed for the *z*. This is the minimum number of digits you need.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学习了二进制数字的工作原理。你已经看到了如何利用 1 和 0 在计算机屏幕上显示图像，以及如何将一串看似随机的 1 和 0 解码成可读的文本。为了更深入地了解二进制数字，尝试为字母表中的字母创建自己的二进制代码。从
    *a* 到 *z* 一共有 26 个字母。你需要多少位来表示所有 26 个字母？要解决这个问题，你可以从假设二进制数 1 代表 *a* 开始。下一个二进制数
    10 代表 *b*，再接着是 11 代表 *c*。把这些写下来，继续增加，直到到达 *z*。然后，数一数表示 *z* 需要多少位。这就是你所需要的最小位数。
- en: Here’s another thing to try. Normally, if you count with your fingers, you can
    count to 10, right? If you don’t use your thumbs, you can only count to 8\. But
    what if you count in binary instead? A straight finger is 1, and a bent finger
    is 0\. How high can you count with eight fingers now?
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一个可以尝试的练习。通常情况下，如果你用手指计数，你可以数到 10，对吧？如果你不使用大拇指，你最多只能数到 8。但是如果你改用二进制计数呢？伸直的手指代表
    1，弯曲的手指代表 0。现在，利用八根手指，你能数到多高呢？
- en: 'Digital values have another very important use: they allow you to create *logic
    circuits*, which make decisions based on whether certain wires see a high voltage
    or a low voltage. High is typically considered “true,” and low is typically “false.”
    If those wires are associated with simple true-or-false questions and the voltages
    are the answers, then you can think of the output from a logic circuit as a conclusion
    reached after asking a series of questions.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 数字值还有一个非常重要的用途：它们可以让你创建*逻辑电路*，这些电路根据某些电线是否承受高电压或低电压来做出决策。高电压通常被认为是“真”，低电压通常被认为是“假”。如果这些电线与简单的真或假问题相关，并且电压就是这些问题的答案，那么你可以将逻辑电路的输出看作是经过一系列提问后得出的结论。
- en: With logic, you can make circuits that do math, like adding two numbers, or
    circuits that do something only under a certain condition, like a door lock that
    opens only if you input the right combination of numbers. In [Chapter 10](ch10.xhtml#ch10),
    I’ll show you some of the building blocks of digital logic and how you can make
    smart circuits with them.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 利用逻辑，你可以制作执行数学运算的电路，比如加法运算，或者制作只有在特定条件下才会执行的电路，比如只有在输入正确的数字组合时才会打开的门锁。在[第10章](ch10.xhtml#ch10)中，我将向你展示一些数字逻辑的基本构建块，以及如何利用它们制作智能电路。
