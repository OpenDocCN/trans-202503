- en: Chapter 2. Rails Fundamentals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章. Rails 基础
- en: '*Ruby on Rails* is an open source web framework. Like the Ruby language, it
    emphasizes programmer happiness and productivity. As you’ll see, it includes sensible
    defaults that allow you to spend less time dealing with configuration and more
    time writing code. It also creates a directory structure for your application
    with a place for every file you need.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*Ruby on Rails* 是一个开源的 web 框架。像 Ruby 语言一样，它强调程序员的幸福感和生产力。正如你将看到的，它包括了合理的默认设置，帮助你减少配置的时间，让你有更多时间写代码。它还为你的应用程序创建了一个目录结构，为你所需要的每个文件提供了合适的位置。'
- en: Rails was created by David Heinemeier Hansson. He extracted the framework from
    the project management application Basecamp that he built for 37signals. It was
    first released as open source in July 2004.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 由 David Heinemeier Hansson 创建。他将其从他为 37signals 构建的项目管理应用 Basecamp 中提取出来，并于
    2004 年 7 月首次作为开源发布。
- en: Rails is also a *full-stack* web framework. This means it contains everything
    you need to build web applications that accept user requests, query databases,
    and respond with data rendered in templates.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 还是一个 *全栈* web 框架。这意味着它包含了构建 web 应用程序所需的一切，能够接受用户请求、查询数据库并使用模板呈现数据来响应。
- en: 'Enter the following command in a terminal to ensure that Rails is installed:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中输入以下命令，确保已经安装了 Rails：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This should display Rails 4.0.0 or greater. If not, check the installation instructions
    for Rails in [Ruby, Rails, and Git](pr03.html#rubycomma_railscomma_and_git "Ruby,
    Rails, and Git").
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会显示 Rails 4.0.0 或更高版本。如果没有，请查看 [Ruby、Rails 和 Git](pr03.html#rubycomma_railscomma_and_git
    "Ruby、Rails 和 Git") 中的 Rails 安装说明。
- en: Your First Rails Application
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您的第一个 Rails 应用程序
- en: Rails makes getting started easy, so let’s dive right in. You’re only five commands
    away from having a running Rails web application.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 让入门变得简单，所以让我们马上开始吧。你只需要输入五个命令，就可以运行一个 Rails web 应用程序了。
- en: Just like Jedi Knights build their own lightsabers, I think web developers should
    build their own personal websites, so that’s where we’ll start. I use my website
    as a playground for testing new ideas. In the fast-moving world of Ruby on Rails,
    keeping your own site up-to-date also helps you learn to use new features as they
    are released.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 就像绝地武士自己制造光剑一样，我认为 web 开发者应该自己建造个人网站，因此我们将从这里开始。我把我的网站当作一个测试新想法的游乐场。在快速发展的 Ruby
    on Rails 世界中，保持自己的网站最新，也有助于你学习如何使用新发布的特性。
- en: Open a terminal window and create a directory for your Rails projects. I call
    mine *code*, but you can use any name you like.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个终端窗口，并为你的 Rails 项目创建一个目录。我称之为 *code*，但你可以使用任何你喜欢的名称。
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now use the `rails new` command to create a new application. Our first application
    will be a simple weblog, so let’s just call it *blog*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用 `rails new` 命令创建一个新应用程序。我们的第一个应用程序将是一个简单的博客，因此我们就称它为 *blog*。
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This command creates all of the files your new application needs and then runs
    the `bundle install` command to download and install any other gems needed by
    Rails. (*Gems* are packaged Ruby applications or libraries.) Depending on your
    connection speed, this may take a few minutes. When the install is complete, use
    the `cd` command to move to the newly created *blog* directory:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令会创建你新应用所需的所有文件，并运行 `bundle install` 命令来下载并安装 Rails 所需的其他 gems。（*Gems* 是打包的
    Ruby 应用程序或库。）根据你的网络速度，这可能需要几分钟。当安装完成后，使用 `cd` 命令进入新创建的 *blog* 目录：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Finally, use the `rails server` command to launch a server so you can see your
    new application. When you created this application, a directory called *bin* was
    also created inside *blog*. The *bin* directory is where you’ll find `rails` and
    other commands you’ll need later.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用 `rails server` 命令启动服务器，这样你就能看到你新的应用程序。当你创建这个应用程序时，*blog* 目录中也会创建一个名为 *bin*
    的目录。*bin* 目录是你将来找到 `rails` 和其他命令的地方。
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This command starts the WEBrick server that is built in to Ruby. Once the server
    has started, open your web browser and go to this address: *http://localhost:3000*.
    If everything worked correctly, you should see a web page like the one in [Figure 2-1](ch02.html#your_first_rails_application-id00001
    "Figure 2-1. Your first Rails application").'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令启动了内置于 Ruby 中的 WEBrick 服务器。服务器启动后，打开您的网页浏览器并访问这个地址：*http://localhost:3000*。如果一切正常，您应该能看到像
    [图 2-1](ch02.html#your_first_rails_application-id00001 "图 2-1. 您的第一个 Rails 应用程序")
    中那样的网页。
- en: '![Your first Rails application](httpatomoreillycomsourcenostarchimages2169060.png.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![您的第一个 Rails 应用程序](httpatomoreillycomsourcenostarchimages2169060.png.jpg)'
- en: Figure 2-1. Your first Rails application
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-1. 您的第一个 Rails 应用程序
- en: Congratulations! You’re officially a Ruby on Rails developer. The page you just
    created includes some tips for getting started with your application, but before
    we get into that, let’s learn a little more about Rails.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你！你正式成为了一名 Ruby on Rails 开发者。你刚刚创建的页面包含了一些关于如何开始使用你的应用程序的提示，但在我们深入了解之前，让我们先了解一下
    Rails。
- en: Rails Principles
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rails 原则
- en: The Rails framework is based on two well-known software engineering principles.
    Understanding these principles will help you understand the “Rails way” of building
    applications.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 框架基于两个广为人知的软件工程原则。理解这些原则将帮助你理解构建应用程序的 “Rails 方式”。
- en: Convention over Configuration
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 约定优于配置
- en: You didn’t have to configure anything to get a basic Rails application up and
    running. In Rails, this concept is known as *convention over configuration*. As
    long as you follow the Rails conventions, everything should just work.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你无需配置任何内容就能让基本的 Rails 应用程序启动并运行。在 Rails 中，这个概念被称为 *约定优于配置*。只要遵循 Rails 的约定，一切都会按预期工作。
- en: Rails makes many choices for you when you create an application. Those choices
    include which web server and database server to run in development mode and which
    JavaScript library and testing library your application will use. Even the names
    of your application’s database tables and models are chosen automatically based
    on convention. You can certainly break convention and change those settings if
    you’d like, but then you’ll have to configure some things for yourself.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用时，Rails 会为你做出许多选择。这些选择包括开发模式下使用哪个 Web 服务器和数据库服务器，应用将使用哪个 JavaScript
    库和测试库。甚至应用数据库表和模型的名称也是根据约定自动选择的。当然，你可以打破约定，改变这些设置，但那样你就需要自己配置一些内容。
- en: Don’t Repeat Yourself
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不重复自己
- en: The other key principle in Rails is *don’t repeat yourself*, often abbreviated
    *DRY*. In Rails, you avoid duplicating knowledge within your application. Specifying
    the same information in more than one place can lead to errors when you change
    one instance and not the other.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 中的另一个关键原则是 *不重复自己*，通常缩写为 *DRY*。在 Rails 中，你避免在应用程序中重复相同的知识。在多个地方指定相同的信息，可能会导致在修改一个实例时忘记更新另一个，从而引发错误。
- en: You’ll see several examples of the DRY principle as we work our way through
    the Rails architecture and directory structure. There is a single, specific place
    for each part of a Rails application. Things that can be inferred from another
    source, such as the names of columns in a database table, don’t need to be specified
    anywhere.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解 Rails 架构和目录结构的过程中，你会看到 DRY 原则的几个示例。Rails 应用的每个部分都有一个单一的、特定的位置。那些可以从其他来源推断出来的内容，例如数据库表中的列名，便不需要在任何地方重复指定。
- en: Rails Architecture
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rails 架构
- en: Rails applications are structured around the *model-view-controller (MVC)* software
    engineering pattern. The MVC pattern is designed to separate an application’s
    data from a user’s interaction with it. This separation of concerns usually results
    in an application that is easier to understand and maintain.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 应用程序围绕 *模型-视图-控制器（MVC）* 软件工程模式构建。MVC 模式旨在将应用程序的数据与用户的交互分离。这种关注点分离通常会导致一个更易于理解和维护的应用程序。
- en: Model
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型
- en: The *model* represents your application’s data and the rules for manipulating
    that data. The application’s data is sometimes referred to as the application’s
    *state*. The rules for manipulating this data are also known as *business logic*.
    All changes to your application’s state must pass through the model layer.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*模型* 表示应用程序的数据以及操作这些数据的规则。应用程序的数据有时被称为应用程序的 *状态*。操作这些数据的规则也被称为 *业务逻辑*。所有对应用程序状态的更改必须通过模型层。'
- en: Rails models contain code for data validation and associations between models.
    Most of the code you write will be inside of a Rails model, unless it is directly
    involved with the user’s view of the data.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 模型包含数据验证和模型间关联的代码。你写的大部分代码都会位于 Rails 模型内部，除非它直接与用户看到的数据视图相关。
- en: View
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图
- en: The *view* is the user interface for your application. Because we are building
    web applications, the view will consist mainly of HTML. Rails uses a template
    system called *Embedded Ruby (ERB)* by default.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*视图* 是你应用程序的用户界面。因为我们正在构建 Web 应用程序，所以视图主要由 HTML 组成。Rails 默认使用一种名为 *嵌入式 Ruby（ERB）*
    的模板系统。'
- en: Embedded Ruby allows you to include Ruby code for accessing data within an HTML
    template. When the user requests a page, the Ruby code in the template is evaluated
    by the server, and the resulting HTML page is sent to the user.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式 Ruby 允许你在 HTML 模板中包含 Ruby 代码以访问数据。当用户请求页面时，模板中的 Ruby 代码会被服务器评估，结果生成的 HTML
    页面会被发送给用户。
- en: The ability to embed Ruby code inside a view can sometimes lead programmers
    to include too much code inside a view. Doing this is problematic because if you
    add another view, then that code will need to be duplicated. Code used only by
    the view can be moved to a *helper*, which is a method meant specifically for
    use in the view. In general, a view should never contain code more complex than
    a simple conditional statement.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图中嵌入 Ruby 代码有时会导致程序员在视图中包含过多的代码。这样做是有问题的，因为如果你添加了另一个视图，代码就需要被重复使用。只在视图中使用的代码可以移动到*helper*中，*helper*是专门用于视图中的方法。一般来说，视图中不应包含比简单条件语句更复杂的代码。
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*In addition to HTML pages, Rails can also generate JSON and XML. Ruby has
    built-in support for generating CSV files, and gems are available for generating
    other types of output, such as PDF documents and Excel spreadsheets.*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*除了 HTML 页面，Rails 还可以生成 JSON 和 XML。Ruby 内置支持生成 CSV 文件，并且有很多 gem 可以用来生成其他类型的输出，例如
    PDF 文档和 Excel 表格。*'
- en: Controller
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器
- en: The *controller* is like the glue that holds together the model and the view.
    The controller is responsible for accepting a request from the user, gathering
    the necessary data from the model, and rendering the correct view. This sounds
    like a lot of work, but thanks to the conventions used in Rails applications,
    the process happens almost automatically.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*controller* 就像是将模型和视图连接在一起的“粘合剂”。控制器负责接受来自用户的请求，从模型中收集必要的数据，并渲染正确的视图。听起来像是很多工作，但得益于
    Rails 应用程序中使用的约定，这个过程几乎是自动完成的。'
- en: In Rails, the controller is simply a Ruby class with methods that correspond
    to the various actions in your application. For example, in your blog application,
    you have a method named `show` for displaying a blog post and a method named `new`
    for adding a new post.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Rails 中，控制器只是一个 Ruby 类，其中的方法与应用程序中的各种操作相对应。例如，在你的博客应用程序中，你可能有一个名为 `show` 的方法用来显示博客文章，还有一个名为
    `new` 的方法用来添加新文章。
- en: Rails Application Structure
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rails 应用程序结构
- en: Now that you’re familiar with the principles and architecture used by Rails,
    let’s see where these pieces live within the directory structure created by the
    `rails new` command. Inside the blog directory, you should find 10 subdirectories.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了 Rails 使用的原则和架构，让我们看看这些部分在 `rails new` 命令创建的目录结构中位于哪里。在博客目录中，你应该会找到
    10 个子目录。
- en: The app Directory
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: app 目录
- en: The *app* directory is where you’ll spend most of your time while building your
    application. It contains subdirectories for each part of the MVC architecture
    discussed previously, as well as *assets*, *helpers*, and *mailers*.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*app* 目录是你在构建应用程序时会花费大部分时间的地方。它包含了之前讨论过的 MVC 架构的各个部分的子目录，以及*assets*、*helpers*
    和 *mailers*。'
- en: The *assets* directory holds the images, JavaScript files, and CSS style-sheets
    used by your application. The *helpers* directory contains Ruby files with methods
    used by your views. The *mailers* directory is for Ruby classes used to send email.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*assets* 目录保存着应用程序使用的图片、JavaScript 文件和 CSS 样式表。*helpers* 目录包含着视图使用的 Ruby 文件和方法。*mailers*
    目录用于存放发送电子邮件的 Ruby 类。'
- en: The bin Directory
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: bin 目录
- en: The *bin* directory holds simple Ruby scripts for accessing the *bundle*, *rails*,
    and *rake* command-line programs used while building your application. These scripts
    ensure that the three programs run in the context of the current Rails application.
    You can have multiple versions of these programs installed at the same time, which
    can lead to errors if you don’t use the scripts in *bin* to access them.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*bin* 目录包含了用于访问 *bundle*、*rails* 和 *rake* 命令行程序的简单 Ruby 脚本，这些程序用于构建你的应用程序。这些脚本确保这三个程序在当前
    Rails 应用程序的上下文中运行。你可以同时安装多个版本的这些程序，如果不使用 *bin* 中的脚本来访问它们，可能会导致错误。'
- en: The config Directory
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: config 目录
- en: Rails makes heavy use of convention over configuration, but sometimes configuration
    is unavoidable. In those cases, look to the *config* directory.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 强烈依赖“约定优于配置”，但有时配置是不可避免的。在这些情况下，可以查找 *config* 目录。
- en: The *environments* subdirectory contains configuration files for the three different
    environments created automatically by Rails. An environment is a collection of
    settings used for a specific purpose such as development or testing. These settings
    are stored in *development.rb* (used while developing your application), *test.rb*
    (used while running automated tests), and *production.rb* (used after your application
    is deployed and running in production).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*environments* 子目录包含 Rails 自动创建的三个不同环境的配置文件。环境是为特定用途（如开发或测试）使用的一组设置。这些设置存储在
    *development.rb*（用于开发应用程序时）、*test.rb*（用于运行自动化测试时）和 *production.rb*（应用程序部署并在生产环境中运行时使用）中。'
- en: The file *application.rb* contains the settings for all environments. Information
    in one of the specific environment files just mentioned will, however, take precedence
    over settings here.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 *application.rb* 包含所有环境的设置。然而，刚才提到的某个特定环境文件中的信息将优先于此处的设置。
- en: The file *database.yml* holds database configuration for each of the three environments.
    Rails creates a SQLite database, by default, when you run `rails new`, so the
    default settings in *database.yml* are for that SQLite database. This database
    is a single file that you will use during development. You usually want to specify
    a different database server to use in production.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 *database.yml* 存储每个环境的数据库配置。默认情况下，Rails 在你运行 `rails new` 时会创建一个 SQLite 数据库，因此
    *database.yml* 中的默认设置适用于该 SQLite 数据库。这个数据库是一个单一的文件，你将在开发期间使用它。通常，在生产环境中，你会指定一个不同的数据库服务器。
- en: The file *routes.rb* maps the web address entered by the user to a specific
    controller and action in your application. As you add resources and actions to
    your application, you need to update this file to reflect the changes. I cover
    resource-based routing during the discussion of controllers in [Chapter 4](ch04.html
    "Chapter 4. Controllers").
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 *routes.rb* 将用户输入的网页地址映射到应用程序中的特定控制器和操作。随着你向应用程序添加资源和操作，你需要更新此文件以反映这些变化。在讨论控制器时，我会在[第
    4 章](ch04.html "第 4 章. 控制器")中讲解基于资源的路由。
- en: The db Directory
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: db 目录
- en: The *db* directory initially contains only a single file called *seeds.rb*.
    Use this file to create your application’s default data. For example, in an application
    with user accounts, you may want to include a special “admin” user here.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*db* 目录初始时只包含一个名为 *seeds.rb* 的文件。你可以使用这个文件创建应用程序的默认数据。例如，在一个包含用户帐户的应用程序中，你可能希望在这里添加一个特殊的“管理员”用户。'
- en: As you build your application, you will create *database migrations*, Ruby scripts
    that create and modify the tables in your database. A directory named *migrate*
    is created to hold these database migration files. The file *schema.rb*, which
    shows the current state of your application’s database, is created as well. If
    you use the default SQLite database in your application, the database itself is
    also placed in this folder.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建应用程序时，你会创建 *数据库迁移*，即用于创建和修改数据库中表的 Ruby 脚本。会创建一个名为 *migrate* 的目录，用来存放这些数据库迁移文件。文件
    *schema.rb* 会显示应用程序数据库的当前状态。如果你在应用程序中使用默认的 SQLite 数据库，数据库本身也会被放在这个文件夹中。
- en: The lib Directory
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: lib 目录
- en: 'The *lib* directory is the place to put any reusable library code you write.
    This directory is initially empty except for two subdirectories: assets and tasks.
    *Assets* are images, CSS stylesheets, and JavaScript files. *Tasks* are Ruby scripts
    used to automate actions such as managing your application’s database, clearing
    log and temporary files, and running tests. These tasks are executed using the
    `rake` command.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*lib* 目录是你放置任何可重用库代码的地方。除了两个子目录：assets 和 tasks 之外，初始时该目录为空。*Assets* 是图像、CSS
    样式表和 JavaScript 文件。*Tasks* 是 Ruby 脚本，用于自动化操作，如管理应用程序的数据库、清除日志和临时文件、以及运行测试。这些任务使用
    `rake` 命令执行。'
- en: The log Directory
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: log 目录
- en: As your application runs, data is written to a file in the *log* directory.
    When you run your code in the development environment, this file is named *development.log*.
    Separate files will be created for the test and production environments.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的应用程序运行时，数据会写入 *log* 目录中的一个文件。当你在开发环境中运行代码时，这个文件名为 *development.log*。针对测试和生产环境，将创建单独的文件。
- en: The public Directory
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: public 目录
- en: Files in the *public* directory are sent to users as if the files were in the
    root directory of your application. For example, three files in this directory
    are for error messages—*404.html*, *422.html*, and *500.html*. You can see one
    of these files in your browser by adding its name to your address bar. If you
    visit *http://localhost:3000/404.html*, for example, you should see the default
    “page does not exist” error page.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*public* 目录中的文件会像在应用程序根目录中的文件一样发送给用户。例如，目录中的三个文件用于错误信息——*404.html*、*422.html*
    和 *500.html*。你可以通过将这些文件的名称添加到地址栏中来查看其中一个文件。例如，如果访问 *http://localhost:3000/404.html*，你应该会看到默认的“页面不存在”错误页面。'
- en: This directory also holds a default *favicon.ico*, the image that appears in
    the address bar of most browsers, and a *robots.txt* file that controls how search
    engines index your application. You can modify all of these files for your application.
    You’ll probably want to customize the error pages with your own branding and add
    a custom favicon for your site.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个目录还包含一个默认的*favicon.ico*，这是大多数浏览器地址栏中显示的图标，还有一个*robots.txt*文件，控制搜索引擎如何索引你的应用。你可以修改这些文件以适应你的应用。你可能想要自定义错误页面，加入自己的品牌标识，并为你的站点添加自定义的
    favicon。
- en: The test Directory
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试目录
- en: The *test* directory contains subdirectories with automated tests for each part
    of your application. It also holds the script *test_helper.rb*, which loads the
    test environment settings in *config/environments/test.rb* and adds helper methods
    used in your tests.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*test* 目录包含自动化测试的子目录，每个子目录用于你的应用的不同部分。它还包含脚本 *test_helper.rb*，该脚本加载 *config/environments/test.rb*
    中的测试环境设置，并添加在测试中使用的辅助方法。'
- en: Some Rails developers practice *test-driven development (TDD)*. In TDD, you
    first write an automated test describing a new feature; then you add just enough
    code to make the test pass; and finally you *refactor*, or restructure, the code
    as needed to improve readability and reduce complexity.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 Rails 开发者实践*测试驱动开发（TDD）*。在 TDD 中，你首先编写一个自动化测试，描述一个新特性；然后你编写足够的代码让测试通过；最后，你*重构*或重组代码，以提高可读性并减少复杂性。
- en: The tmp Directory
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: tmp 目录
- en: The *tmp* directory contains ephemeral files. Here, you find cached copies of
    your application’s assets, process id files (pids) for running programs (such
    as your web server), user sessions, and files representing sockets being used
    by your application.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*tmp* 目录包含临时文件。在这里，你可以找到应用程序资源的缓存副本、运行程序（如 Web 服务器）的进程 ID 文件（pid）、用户会话以及表示应用正在使用的套接字的文件。'
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*Because these files usually do not need to be saved, version control systems
    ignore them.*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*因为这些文件通常不需要保存，所以版本控制系统会忽略它们。*'
- en: The vendor Directory
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: vendor 目录
- en: Finally, the *vendor* directory holds assets needed by third-party gems that
    you add to your application. Its purpose is similar to the *lib* directory, except
    it is used by libraries that you did not write yourself.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，*vendor* 目录保存第三方 gems 所需的资源。它的作用类似于 *lib* 目录，只不过它用于你没有自己编写的库。
- en: Rails Commands
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rails 命令
- en: You use four different command-line programs when building Rails applications.
    These can sometimes be confusing to new Rails developers.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建 Rails 应用时，你会使用四个不同的命令行程序。对于新的 Rails 开发者来说，这些程序有时会让人感到困惑。
- en: The gem Command
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: gem 命令
- en: The `gem` command installs Ruby gems. The Rails framework is actually distributed
    as a collection of gem files.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`gem` 命令用于安装 Ruby gems。Rails 框架实际上是作为一组 gem 文件发布的。'
- en: Your newly created Rails application is made up of over 40 gems. Maintaining
    the correct versions of these gems and dependencies between them can get complicated.
    For this reason, you rarely use the `gem` command directly; instead, you usually
    rely on a tool called Bundler to manage gems and keep your dependencies up to
    date. You interact with Bundler using the `bundle` command.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你新创建的 Rails 应用由超过 40 个 gems 组成。维护这些 gems 的正确版本及其依赖关系可能变得复杂。因此，你很少直接使用 `gem`
    命令；相反，你通常依赖一个名为 Bundler 的工具来管理 gems，并保持依赖关系的更新。你通过 `bundle` 命令与 Bundler 进行交互。
- en: The bundle Command
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: bundle 命令
- en: The `bundle` command is used to install and update the gems needed by your application.
    It installs gems by reading the *Gemfile* that was automatically created by the
    `rails new` command in the root directory of your Rails application. It stores
    the version numbers of gems you’re using and their dependencies in the file *Gemfile.lock*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`bundle` 命令用于安装和更新应用所需的 gems。它通过读取在 `rails new` 命令自动创建的位于 Rails 应用根目录的 *Gemfile*
    来安装 gems。它将你所使用的 gems 及其依赖的版本号存储在 *Gemfile.lock* 文件中。'
- en: 'The `bundle list` command displays the names and versions of all gems currently
    being used by your application:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`bundle list`命令会显示当前应用程序使用的所有 gems 的名称和版本：'
- en: '[PRE5]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As mentioned earlier, we are using the copy of `bundle` inside the *bin* directory.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们使用的是*bin*目录中的`bundle`副本。
- en: The rake Command
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`rake`命令'
- en: 'The `rake` command is an automated build tool used to run tasks related to
    your application. (If you are familiar with the `make` command, `rake` is the
    Ruby version.) Enter this command to obtain a list of the available tasks for
    your application:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`rake`命令是一个自动化构建工具，用于执行与应用程序相关的任务。（如果您熟悉`make`命令，`rake`是其 Ruby 版本。）输入此命令以获取应用程序的可用任务列表：'
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This command prints a list of tasks your application can use along with a short
    description of each to your terminal. Some gems add tasks to your application,
    and you can also add your own tasks by writing Ruby scripts and saving them in
    the *lib/tasks* directory.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令会将您应用程序可以使用的任务列表以及每个任务的简短描述打印到终端。有些 gems 会为您的应用程序添加任务，您也可以通过编写 Ruby 脚本并将其保存在*lib/tasks*目录中来添加您自己的任务。
- en: The rails Command
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`rails`命令'
- en: 'You used the `rails` command earlier to create an application and start the
    server. You can also use this command to generate new code and launch the console.
    Enter the `rails` command by itself to list the available options:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您之前使用`rails`命令来创建应用程序并启动服务器。您还可以使用此命令来生成新代码并启动控制台。单独输入`rails`命令以列出可用选项：
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In addition to the `new` command that you used to build your application and
    the `server` command that starts a web server, Rails also provides several other
    helpful commands. These include the `generate` command (generates new code), the
    `console` command (starts an interactive Ruby console with your Rails application
    preloaded), and the `dbconsole` command (starts a command-line interface for the
    currently configured database).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 除了您用来构建应用程序的`new`命令和启动 web 服务器的`server`命令外，Rails 还提供了其他一些有用的命令。这些包括`generate`命令（生成新代码）、`console`命令（启动一个交互式
    Ruby 控制台，并预加载您的 Rails 应用程序）以及`dbconsole`命令（启动当前配置数据库的命令行界面）。
- en: Now that you’ve seen some Rails command-line tools, let’s use a few of them
    to add some functionality to the blog application we created.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经看到了几个 Rails 命令行工具，让我们使用其中一些来为我们创建的博客应用程序添加一些功能。
- en: Rails Scaffold
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rails 脚手架
- en: We’re going to use a Rails feature known as *scaffolding*. Rails scaffolding
    is a sometimes-controversial feature that generates application code for you.
    This single command creates a model, a set of views, and a controller automatically.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Rails 中的一个功能，称为*脚手架*。Rails 脚手架是一个有时会引发争议的功能，它会为您生成应用程序代码。这个单一命令会自动创建模型、一组视图和控制器。
- en: Many developers believe that you should write all of your own code. I agree
    with them, but Rails scaffolding is helpful for bootstrapping an application,
    especially for developers new to Ruby on Rails. We will explore the generated
    code over the next few chapters. By the end, you will understand each file and
    be able to write those files by hand.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发者认为您应该编写所有自己的代码。我同意他们的观点，但 Rails 脚手架对于启动一个应用程序非常有用，尤其是对于新接触 Ruby on Rails
    的开发者。接下来的几章我们将探讨生成的代码。到最后，您将理解每个文件，并能够手动编写这些文件。
- en: 'Open a new terminal window (or a new tab in your current one). Change to your
    *code/blog* directory if necessary. Then, use the `rails generate` command to
    add posts to the blog:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新的终端窗口（或在当前窗口中新建一个标签页）。如果需要，切换到*code/blog*目录。然后，使用`rails generate`命令为博客添加帖子：
- en: '[PRE8]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, we’ve asked Rails to generate a scaffold for a blog Post. We specified
    that a Post should have a title ➊ and a body ➋.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们要求 Rails 为博客文章生成一个脚手架。我们指定了文章应该包含标题 ➊ 和正文 ➋。
- en: The title will be a string, and the body will be a text field in the database.
    As this command runs, you should see a flurry of activity in your terminal as
    files are generated and placed in the correct folders.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 标题将是一个字符串，正文将是数据库中的一个文本字段。当此命令运行时，您应该能在终端看到一阵活动，文件会被生成并放入正确的文件夹中。
- en: 'The previous command should have generated a database migration. Use the `rake`
    command to run that migration:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令应该已经生成了数据库迁移。使用`rake`命令来运行该迁移：
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This command should create a table named *posts* with fields named `id`, `title`,
    `body`, `created_at`, and `updated_at`. The `title` and `body` fields will store
    data entered by the user. Rails adds the `id`, `created_at`, and `updated_at`
    fields automatically. The `id` field is a unique, auto-incrementing integer that
    represents each row in the database. The `created_at` and `updated_at` fields
    are timestamps representing when the row was created and when it was last updated.
    Rails keeps track of these values automatically.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令应该会创建一个名为 *posts* 的表，字段包括 `id`、`title`、`body`、`created_at` 和 `updated_at`。`title`
    和 `body` 字段将存储用户输入的数据。Rails 会自动添加 `id`、`created_at` 和 `updated_at` 字段。`id` 字段是一个唯一的、自增的整数，代表数据库中的每一行。`created_at`
    和 `updated_at` 字段是时间戳，表示该行数据创建的时间和最后一次更新的时间。Rails 会自动跟踪这些值。
- en: To see the results, go to *http://localhost:3000/posts* in your web browser.
    You should see a page like the one in [Figure 2-2](ch02.html#rails_post_scaffolding
    "Figure 2-2. The Rails Post scaffolding").
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看结果，请在浏览器中访问 *http://localhost:3000/posts*。你应该能看到类似于[图 2-2](ch02.html#rails_post_scaffolding
    "图 2-2. Rails Post 脚手架")的页面。
- en: '![The Rails Post scaffolding](httpatomoreillycomsourcenostarchimages2169062.png.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![Rails Post 脚手架](httpatomoreillycomsourcenostarchimages2169062.png.jpg)'
- en: Figure 2-2. The Rails Post scaffolding
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-2. Rails Post 脚手架
- en: This page certainly won’t win any awards for design, but it is functional. Click
    the *New Post* link to see a form for adding a new blog post. After you add a
    post, click the *Back* link to return to the home page.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面的设计可能不会赢得任何奖项，但它是实用的。点击*新建帖子*链接，查看添加新博客帖子的表单。添加帖子后，点击*返回*链接返回主页。
- en: By default, Rails shows your data in a table with links for *Show*, *Edit*,
    and *Destroy*. Feel free to try these links and verify that the application is
    working.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Rails 会以表格的形式显示数据，并提供*查看*、*编辑*和*删除*链接。随意尝试这些链接，并验证应用程序是否正常工作。
- en: As you play with the application, be sure to look at the output in the terminal
    window where the server is running. This is a copy of the development log generated
    by your application. You’ll find a wealth of information here, such as the URL
    requested, the Ruby method being run, and the SQL commands being executed.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在你玩应用程序时，记得查看运行服务器的终端窗口中的输出。这是应用程序生成的开发日志副本。你将在这里找到大量信息，例如请求的 URL、正在运行的 Ruby
    方法和正在执行的 SQL 命令。
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter covered the basic principles, architecture, directory structure,
    and commands used to build Rails applications. In the next chapter, we’ll dig
    in to the Rails code we just generated, starting with models, and you’ll learn
    to write your own code.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了构建 Rails 应用程序的基本原理、架构、目录结构和命令。在下一章中，我们将深入探讨刚刚生成的 Rails 代码，从模型开始，你将学习如何编写自己的代码。
- en: Exercises
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: '| Q: | 1\. Explore the functionality of your new blog. Create, edit, and destroy
    posts. View the list of posts and individual posts. Note how the URL in the address
    bar changes as you move around the application. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 问题： | 1\. 探索你新博客的功能。创建、编辑和删除帖子。查看帖子列表和单个帖子。注意当你在应用程序中浏览时，地址栏中的 URL 是如何变化的。
    |'
- en: '| Q: | 2\. Get used to moving around the various files in the blog application
    in your editor of choice. If you’re using Sublime Text 2, you can open the blog
    directory itself and then use the sidebar to open individual files. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 问题： | 2\. 习惯在你选择的编辑器中浏览博客应用程序中的各种文件。如果你使用的是 Sublime Text 2，你可以直接打开博客目录，然后使用侧边栏打开单个文件。
    |'
