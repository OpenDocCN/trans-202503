- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16  '
- en: Floating-Point Numbers
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '浮点数  '
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)  '
- en: In this part of the book, we work through some C features that aren’t typically
    useful in embedded programming but that you may encounter in mainframe programming.
    Floating-point numbers aren’t common in embedded programming because a lot of
    low-end processor chips can’t handle them. Even when you have a CPU that does
    work with them, floating-point arithmetic is slow, inexact, and tricky to use.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的这一部分，我们将讨论一些通常在嵌入式编程中不常用的 C 特性，但你可能会在大型机编程中遇到。浮点数在嵌入式编程中并不常见，因为许多低端处理器芯片无法处理它们。即使你使用的
    CPU 支持浮点数，浮点运算依然很慢、不精确，而且使用起来比较复杂。
- en: However, because you will occasionally encounter these numbers in scientific
    or 3D graphic programs, you should be prepared. This chapter covers the basics
    of floating point, why floating-point operations are so expensive to compute,
    and some of the errors that can occur while using them.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '然而，由于你在科学或 3D 图形程序中偶尔会遇到这些数字，因此你应该有所准备。本章涵盖了浮点数的基础知识，为什么浮点运算如此昂贵，以及在使用它们时可能出现的一些错误。  '
- en: What Is a Floating-Point Number?
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '什么是浮点数？  '
- en: A *floating-point number* is one in which the decimal point floats. It can occur
    in different places in the number, such as `1.0`, `0.1`, `0.0001`, or `1000.0`.
    Strictly speaking, having a digit after the decimal point isn’t required. For
    example, `1.0` and `1.` are the same number. However, floating-point numbers are
    easier to read and more obvious if they have digits on both sides of the decimal
    point.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*浮点数* 是小数点可以浮动的数字。它可以出现在数字的不同位置，例如 `1.0`、`0.1`、`0.0001` 或 `1000.0`。严格来说，小数点后面有数字并不是必须的。例如，`1.0`
    和 `1.` 是相同的数字。然而，如果浮点数在小数点两侧都有数字，它更容易阅读和理解。  '
- en: We can also write floating-point numbers using exponent notation, such as `1.0e33`,
    which represents the number 1.0 × 10^(33). (You can use an uppercase `E` or lowercase
    `e`, but the lowercase version is more readable.)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '我们也可以使用指数表示法来书写浮点数，例如 `1.0e33`，表示数字 1.0 × 10^(33)。 （你可以使用大写的 `E` 或小写的 `e`，但小写版本更易于阅读。）  '
- en: Floating-Point Types
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '浮点类型  '
- en: In C, the floating-point types are `float`, `double`, and `long double`. The
    `double` type is supposed to have twice the precision and range of the `float`
    (single-precision) type. The `long double` has a greater precision and range than
    the other two types.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '在 C 中，浮点类型有 `float`、`double` 和 `long double`。`double` 类型的精度和范围是 `float`（单精度）类型的两倍。`long
    double` 的精度和范围比其他两种类型更大。  '
- en: All floating-point constants are of the `double` type unless you tell C differently.
    Adding an `F` suffix to the end of a number makes it a single-precision `float`,
    and adding an `L` at the end makes it a `long double`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '所有浮点常量默认都是 `double` 类型，除非你明确告诉 C 其他类型。在数字末尾添加 `F` 后缀将其变为单精度 `float`，而在末尾添加
    `L` 会将其变为 `long double`。  '
- en: 'The decimal point is required for floating-point numbers. Consider the following
    code:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '浮点数需要小数点。考虑以下代码：  '
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first assignment does not assign `f1` the value 0.3333\. Instead, it assigns
    it the value 0.0, because 1 and 3 are integers. C performs an *integer divide*
    (which results in integer 0), promotes it to floating point, and makes the assignment.
    The second line does what we want and assigns the value 0.3333.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '第一行赋值并不会将 `f1` 的值赋为 0.3333\。相反，它将其赋值为 0.0，因为 1 和 3 是整数。C 执行了一个 *整数除法*（结果为整数
    0），将其提升为浮点数后再进行赋值。第二行则按我们希望的方式，赋值为 0.3333。  '
- en: Automatic Conversions
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '自动转换  '
- en: 'C does some automatic conversions behind your back. If one operand of an expression
    is a floating-point number, C automatically converts the other to a float. Here’s
    an example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 'C 会在你不注意的情况下进行一些自动转换。如果表达式的一个操作数是浮点数，C 会自动将另一个操作数转换为浮点数。下面是一个例子：  '
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this case, the 3 will be turned into 3.0 before the division operation. This
    example is considered bad form because you don’t want to mix integers and floating-point
    constants if you can help it. Also, if you assign a floating-point number to an
    integer, it is converted to an integer.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '在这种情况下，数字 3 会在除法操作之前被转换为 3.0。这个例子被认为是不好的一种写法，因为如果可以的话，你不应该混合整数和浮点常量。而且，如果你将浮点数赋给一个整数，它会被转换为整数。  '
- en: Problems with Floating-Point Numbers
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '浮点数的问题  '
- en: One of the problems with floating-point numbers is that they’re not exact. For
    example, 1/3 in decimal floating point is 0.333333\. No matter how many digits
    you use, it still is not exact. Rather than show what happens with binary floating
    point (used by a computer), we’re going to use a decimal floating point (familiar
    to humans). Everything that can go wrong with our decimal floating point can go
    wrong with the binary version. The only difference is that with decimal floating
    point, the examples are easier to understand.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数的一个问题是它们不精确。例如，1/3在十进制浮点数中是0.333333。无论你使用多少位数，它仍然不精确。我们这里不展示二进制浮点数（计算机使用的），而是使用十进制浮点数（人类熟悉的）。所有在十进制浮点数中可能出错的地方，也会在二进制版本中出错。唯一的区别是，十进制浮点数的例子更容易理解。
- en: 'Decimal floating point is a limited version of scientific notation. Here’s
    an example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 十进制浮点数是科学记数法的一种简化版本。下面是一个例子：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This number has a sign (+), a fraction (four digits), and an exponent. This
    is not a problem for humans, but representing numbers like this in a computer
    is tricky.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数字有符号（+）、一个小数部分（四位）和一个指数。对人类来说这不是问题，但在计算机中表示这样的数字是有难度的。
- en: Computers use a similar format, except the exponent and fraction are in binary.
    Also, they mix up the order and store the components in the order sign, exponent,
    and then fraction. For more details, see the IEEE-754 floating-point specification,
    which is used by almost all computers currently.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机使用类似的格式，只不过指数和小数部分是二进制的。此外，它们还会将顺序混淆，存储的顺序是符号、指数和小数部分。有关更多细节，请参阅几乎所有计算机当前使用的IEEE-754浮点数规范。
- en: Rounding Errors
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 四舍五入误差
- en: 'You know that 1 + 1 is 2, but 1/3 + 1/3 is not 2/3\. Let’s take look at how
    this works. First, let’s add the numbers:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道1 + 1是2，但1/3 + 1/3并不是2/3。让我们来看看这是如何工作的。首先，我们来加上这两个数字：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'However, 2/3 is the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，2/3是以下这个：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is an example of a rounding error. There is a small error between `+3.333e-01`
    and 1/3\. Because of the standard rounding rules we are using, we round down.
    When we compute 2/3, we get `6.67e-1`. In this case, the rounding rules cause
    us to round up, so although 1 + 1 = 2 (integer), 1/3 + 1/3 != 2/3 (floating point).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个四舍五入误差的例子。`+3.333e-01`和1/3之间有一个小误差。由于我们使用的标准四舍五入规则，我们将结果向下取整。当我们计算2/3时，得到`6.67e-1`。在这种情况下，四舍五入规则使我们向上取整，因此虽然1
    + 1 = 2（整数），但1/3 + 1/3 != 2/3（浮点数）。
- en: We can use some tricks to minimize rounding errors here. One trick most computers
    use is to add guard digits during calculations. A *guard digit* is an extra digit
    added to the number while the calculations are being done. When the result is
    computed, the guard digit is dropped.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一些技巧来最小化四舍五入误差。大多数计算机使用的一个技巧是在计算过程中加入保护位。*保护位*是在进行计算时，给数字加上的一个额外位数。当计算结果出来后，保护位会被丢弃。
- en: Digits of Precision
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 精度位数
- en: Single-precision floating point (`float`) should give you about 6.5 digits of
    precision, but that’s not always true. How many digits can you trust? In the previous
    example, we might be tempted to say that the first three digits of our decimal
    floating point are accurate, but we can’t rely on that.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 单精度浮点数（`float`）应该能提供大约6.5位的精度，但这并不总是准确的。你能信任多少位呢？在前面的例子中，我们可能会倾向于认为我们的十进制浮点数的前三位是准确的，但我们不能依赖这一点。
- en: 'Let’s compute 2/3 – 1/3 – 1/3:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们计算 2/3 – 1/3 – 1/3：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How many digits are correct? The first digit of our result is 1\. (*Normalization*
    means that we change the number so that there is a digit in the first location.
    All floating-point numbers are stored normalized, except for a few edge cases
    that we’ll cover later.) The correct first digit should be 0.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有多少位是正确的？我们结果的第一个数字是1（*规范化*意味着我们将数字改变为使得第一个位置有一个数字。除了少数边缘情况外，所有浮点数都存储为规范化形式，我们稍后会讲解这些边缘情况）。正确的第一个数字应该是0。
- en: A number of problems are inherent in the design of floating-point arithmetic.
    Mainly they boil down to the fact that most numbers are inexact, which can result
    in computational errors and problems with exact comparisons.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点运算的设计中固有许多问题。主要归结为大多数数字都是不精确的，这可能导致计算错误和精确比较时的问题。
- en: If you are doing a limited amount of floating-point operations, they probably
    won’t bite you, but you should be aware of them. If you are doing a lot of floating-point
    operations, you should check out the branch of computer science called *numerical
    analysis* that’s devoted to dealing with floating-point issues and how to get
    stable results out of them, but that’s beyond the scope of this book.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只进行了有限量的浮点数运算，它们可能不会咬你，但你应该意识到它们。如果你进行了大量的浮点数运算，你应该查阅计算机科学的一个分支，称为*数值分析*，专门处理浮点数问题以及如何从中获得稳定的结果，但这超出了本书的范围。
- en: Infinity, NaN, and Subnormal Numbers
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无穷大、NaN和子规范数
- en: The IEEE floating-point format has a few bit patterns that make no sense as
    numbers. For example, consider the number 0*10⁵. Since 0 times anything is 0,
    we can use the exponent in this case to indicate a special value. In this section,
    we’ll look at a few of these, as well as the edge cases of the floating-point
    format.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: IEEE浮点格式有一些位模式是没有意义的数字。例如，考虑数字0*10⁵。由于0乘以任何东西都是0，我们可以在这种情况下使用指数来表示特殊值。在本节中，我们将查看其中的一些以及浮点格式的边缘情况。
- en: 'Let’s consider the following expression:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下表达式：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If this were an integer, dividing it by zero would abort your program. However,
    because it’s floating point, the result is that `f` is assigned the value `INFINITY`
    (this constant is defined in the `#include <math.h>` header file).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是一个整数，将其除以零会中止你的程序。然而，因为它是浮点数，结果是`f`被赋予了值`INFINITY`（这个常量在`#include <math.h>`头文件中定义）。
- en: 'Similarly, the statement:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，该语句：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: assigns `f` the value `-INFINITY`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 分配`f`值为`-INFINITY`。
- en: The numbers `INFINITY` and `-INFINITY` are not floating-point numbers (they
    have no digits and no decimal point), but the IEEE floating-point specification
    has defined several of these special numbers. Since you are likely to encounter
    these types of numbers (especially if your program contains bugs), it’s important
    to know what they are.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 数字`INFINITY`和`-INFINITY`不是浮点数（它们没有数字和小数点），但IEEE浮点规范已定义了几种这样的特殊数字。由于你可能会遇到这些类型的数字（特别是如果你的程序包含错误），知道它们是什么很重要。
- en: 'You also may encounter a `NaN` (for Not a Number), which is generated when
    an operation cannot produce a result. Here’s an example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可能遇到`NaN`（不是一个数字），当一个操作无法产生结果时生成。这里是一个例子：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Newer versions of the C standard include complex numbers, but the `sqrt` function
    always returns a `double`, so `sqrt(-1.0)` always returns `NaN`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: C标准的新版本包括复数，但`sqrt`函数始终返回`double`，因此`sqrt(-1.0)`始终返回`NaN`。
- en: 'Now, what’s the tiniest number we can represent in our floating-point scheme?
    You might be tempted to say it’s the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们能在我们的浮点方案中表示的最小数字是多少？你可能会说它是以下内容：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The fraction 1.0000 is the smallest fraction we can create. (If we used 0.5000,
    it would get normalized to 5.0000.) And –99 is the smallest exponent we can get
    with two digits.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 分数1.0000是我们可以创建的最小分数。（如果我们使用0.5000，它将被规范化为5.0000。）而且，-99是我们可以得到的最小指数，只用了两位数字。
- en: 'However, we can get smaller:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以变得更小：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And smaller still:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 而且还要更小：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Up to this point, the numbers we’ve been discussing have been normalized, which
    means a digit is always in the first position. Those numbers are considered to
    be *subnormal*. We’ve also lost some significant digits. We have five significant
    digits with the number `+1.2345e-99`, but only one for `+0.0001e-99`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们讨论的数字都是规范化的，这意味着一个数字始终位于第一位。这些数字被认为是*子规范的*。我们还失去了一些有效位数。我们有五个有效位数的数字`+1.2345e-99`，但只有一个有效位数的`+0.0001e-99`。
- en: In C, the `isnormal` macro returns true if a number is normalized, and the `issubnormal`
    macro returns true if the number is subnormalized.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在C中，`isnormal`宏在数字规范化时返回true，并且`issubnormal`宏在数字是子规范化时返回true。
- en: If you encounter subnormalized numbers, you’ve reached into the darkest corners
    of the C floating point. So far, I’ve not seen any real program that’s made use
    of them, but they exist and you should be aware of them.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到了子规范化的数字，你已经进入了C浮点的最黑暗的角落。到目前为止，我还没有看到任何真正使用它们的程序，但它们确实存在，你应该意识到它们。
- en: Implementation
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施
- en: 'Floating points can be implemented in a variety of ways. Let’s start with the
    STM chip we’ve been using. Implementation is simple: you can’t have floating point.
    The hardware doesn’t do it, and the machine doesn’t have enough power to do it
    in software.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数可以用多种方式实现。让我们从我们一直在使用的STM芯片开始。实现很简单：你不能有浮点数。硬件不支持，而且机器没有足够的能力在软件中实现它。
- en: Lower-end chips generally have no floating-point unit. As a result, floating-point
    operations are done through the use of a software library, which comes with a
    cost. Floating-point operations in general take about 1,000 times longer than
    their integer counterparts.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 低端芯片通常没有浮点单元。因此，浮点运算是通过使用软件库来实现的，这会带来一定的代价。通常，浮点运算的时间大约是整数运算的1,000倍。
- en: Once you get into the better chips, you’ll find native floating-point support.
    The operations are still expensive; a floating-point operation will take roughly
    10 times longer than an integer operation.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你使用了更高端的芯片，你会发现有原生的浮点数支持。虽然这些运算依然昂贵；一个浮点运算大约需要比整数运算长10倍的时间。
- en: Alternatives
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替代方案
- en: One of the best ways to deal with floating point is to not use it. As mentioned
    previously, one example is when working with money. If you store money as a float,
    rounding errors will eventually cause you to generate incorrect totals. If instead
    you store money as an integer number of cents, you’ll avoid floating point and
    all its ills.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 处理浮点数的最佳方法之一是根本不使用它。如前所述，举个例子，当处理货币时。如果你将货币存储为浮点数，四舍五入误差最终会导致你得出错误的总额。如果你将货币存储为整数形式的分数，你就能避免浮点数及其所有问题。
- en: 'Let’s define a simple fixed-point number with the number of digits after the
    decimal fixed at 2\. Here are some examples and an integer implementation:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个简单的定点数，规定小数点后有2位数字。以下是一些示例和整数实现：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To add or subtract fixed point, just add or subtract the underlying implementation:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要加减定点数，只需加减底层实现即可：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To multiply fixed-point numbers, multiply the two numbers and divide by 100
    to correct for the placement of the decimal point:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要乘以定点数，先将两个数相乘，然后除以100以修正小数点的位置：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To divide, you do the opposite: divide the underlying numbers and multiply
    by a correction.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行除法，你需要做相反的操作：除以底层数字，并乘以一个修正值。
- en: Listing 15-1 contains a program demonstrating the use of fixed-point numbers.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 列表15-1包含了一个演示定点数使用的程序。
- en: '**fixed.c**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**fixed.c**'
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Listing 16-1: Using fixed-point numbers'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 列表16-1：使用定点数
- en: This is not a perfect implementation. Rounding errors occur in some places,
    such as the multiply and divide operations, but if you’re really into fixed point,
    you should be able to spot them easily.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个完美的实现。在某些地方，例如乘法和除法运算，可能会出现四舍五入误差，但如果你真的精通定点数，你应该能够轻松发现它们。
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Understanding the underlying implementation and the limitations of floating-point
    numbers is important. As mentioned previously, you should never use floating point
    for money. Accountants like exact numbers, and rounding errors can result in incorrect
    answers. The numerical analysis branch of computer science deals with analyzing
    how computations are made and figuring out how to minimize errors. This chapter
    shows you the basics. If you’re going to use floating-point numbers extensively,
    you should have a working knowledge of numerical analysis. However, the best way
    of using floating point is to avoid it altogether, so make sure you understand
    that alternatives to floating point, such as fixed point, exist.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 理解浮点数的底层实现和限制非常重要。正如之前提到的，你永远不应该将浮点数用于货币。会计人员需要精确的数字，而四舍五入误差可能导致错误的结果。计算机科学中的数值分析分支负责分析如何进行计算，并找出如何最小化误差。本章向你展示了基础知识。如果你要广泛使用浮点数，你应该具备一定的数值分析知识。然而，使用浮点数的最佳方式是完全避免使用它，因此请确保你理解，浮点数有替代方案，例如定点数。
- en: 'Wikipedia has a good article on the IEEE floating-point standard with links
    to lots of online reference material: [https://en.wikipedia.org/wiki/IEEE_754](https://en.wikipedia.org/wiki/IEEE_754).'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 维基百科有一篇关于IEEE浮点标准的好文章，并提供了大量在线参考材料：[https://en.wikipedia.org/wiki/IEEE_754](https://en.wikipedia.org/wiki/IEEE_754)。
- en: Programming Problems
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程问题
- en: Write a function that computes the `sin` of an angle. How many factors do you
    need to compute to get an accurate answer?
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个计算角度`sin`值的函数。为了得到准确的结果，你需要计算多少个因子？
- en: Using a `float`, compute pi to as many digits as possible. How many digits more
    will you get if you change the data type to `double`? How many for `long double`?
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`float`类型，计算π的尽可能多的数字。如果你将数据类型改为`double`，你能得到多少位数字？`long double`呢？
- en: Say you want to find the number of bits in the fraction part of a floating-point
    number. Write a program that starts with *x* = 1 and keeps dividing *x* by 2 until
    (1.0 + *x* = 1.0). The number of times you divided by 2 is the number of bits
    in your floating-point calculations.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设你想找出浮点数小数部分的位数。编写一个程序，从*x* = 1开始，并不断将*x*除以2，直到(1.0 + *x* = 1.0)。你除以2的次数就是浮点计算中位数的数量。
