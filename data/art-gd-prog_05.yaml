- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Creating User Interfaces and Widgets
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 创建用户界面和小部件
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: 'Sketch 42: A Button'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图42：一个按钮
- en: 'After text from the console or a file and basic mouse gestures, the simple
    button is the third most popular user input method. It is ubiquitous on web pages,
    game screens, and any system that requires on/off or yes/no choices from a user.
    It is, of course, based on the old-fashioned push button that has existed for
    a long time as an electrical device, and it works in a natural way: push the button
    and something happens.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台或文件中的文本和基本鼠标手势之后，简单的按钮是第三大最常见的用户输入方式。它在网页、游戏屏幕以及任何需要用户做出开/关或是/否选择的系统中无处不在。它当然是基于传统的按键，作为一种电气设备已经存在很久了，而且它的工作方式非常自然：按下按钮后，某些事情就会发生。
- en: Graphically, a button is really just a rectangle. It is usually filled with
    a color and has a text label or image to indicate its function. When the user
    clicks the mouse button while the cursor is within the button, the task assigned
    to the button is executed, usually by calling some function. Properties that a
    button has include its *position* (the x- and y-coordinates of the upper left
    corner of the button), *size* (the width and height of the button), *label* (the
    string that is written in the button), and a *color* or *image* that will appear
    in the button.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 从图形上看，按钮其实就是一个矩形。它通常会填充一种颜色，并且有一个文本标签或图像来表示它的功能。当用户点击鼠标按钮并且光标位于按钮内部时，按钮分配的任务会被执行，通常是通过调用某个函数来实现。按钮的属性包括它的*位置*（按钮左上角的x和y坐标）、*大小*（按钮的宽度和高度）、*标签*（按钮中写的文本字符串），以及一个*颜色*或*图像*，该颜色或图像会出现在按钮上。
- en: A button is said to be armed when the mouse cursor lies within it. When armed,
    a mouse click will execute the function of the button. Sometimes the button is
    drawn with a different color or font when it is armed to indicate the activation
    to the user.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标光标位于按钮内时，按钮被称为被激活。激活时，点击鼠标会执行按钮的功能。有时，按钮在激活时会用不同的颜色或字体来绘制，以向用户指示激活状态。
- en: 'The button implemented in this sketch causes the background color of the sketch
    window to change. It is armed when the mouse enters the rectangle 3:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本草图中实现的按钮会导致草图窗口的背景颜色发生变化。当鼠标进入矩形区域3时，按钮被激活。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: where (`bx`, `by`) is the position and (`bw`, `bh`) is the size of the button.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 其中（`bx`，`by`）是按钮的位置，(`bw`，`bh`) 是按钮的大小。
- en: The `buttonArmed()` function returns true when this `if` condition is true.
    The `drawButton()` function draws and fills the rectangle and draws the text 1.
    When the button is armed, `drawButton()` also changes the fill color to green
    from red. And, of course, the `mousePressed()` function determines whether the
    button was armed when the mouse button was pressed and changes the background
    color if so 4.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`buttonArmed()`函数在`if`条件为真时返回true。`drawButton()`函数绘制并填充矩形，并绘制文本1。当按钮被激活时，`drawButton()`还会将填充颜色从红色更改为绿色。当然，`mousePressed()`函数确定在鼠标按下时按钮是否被激活，如果是，它会改变背景颜色4。'
- en: Because this sketch only implements a single button, it doesn’t use much code.
    It is common for an application to have many buttons, as you’ll see in the next
    sketch.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因为本草图只实现了一个按钮，所以它使用的代码并不多。通常，一个应用会有很多按钮，正如你在下一个草图中将看到的那样。
- en: 'Sketch 43: The Class Object—Multiple Buttons'
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图43：类对象——多个按钮
- en: 'This sketch will create and display three buttons, one for each color component:
    red, green, and blue. When a button is clicked, the corresponding components of
    the background color will change randomly.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本草图将创建并显示三个按钮，每个按钮代表一个颜色组件：红色、绿色和蓝色。当按钮被点击时，相应的背景颜色组件将随机变化。
- en: If an application needs many buttons, the scheme presented in Sketch 42 becomes
    awkward. What we want is a type, like `PImage` or `PFont`, that represents a button,
    so we can declare button variables or an array of buttons. The new `button` type
    should contain within it all of the properties of a button along with all of the
    code, written as functions, that performs the legal button operations.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个应用需要很多按钮，那么在草图42中呈现的方案就会显得笨拙。我们想要的是一种类型，像`PImage`或`PFont`那样，代表一个按钮，这样我们就可以声明按钮变量或按钮数组。新的`button`类型应该包含按钮的所有属性以及执行合法按钮操作的代码，这些代码作为函数来编写。
- en: 'Making a custom type with associated functions is done using a feature called
    a class. A class is a way to enclose some variables and functions and give them
    a name. The `button` class would look like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用名为类（class）的特性来创建带有关联函数的自定义类型。类是一种封装某些变量和函数并给它们命名的方式。`button`类应如下所示：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Inside the braces, we declare the variables used by the button: `x`, `y`, `width`,
    `height`, `label`, and so on. The functions `drawButton()` and `buttonArmed()`
    go inside the class too, along with something called a constructor: a function
    that is called automatically each time a new button (or, in general, a class object)
    is created. The `class` statement and what follows inside the braces declares
    the class as a custom type, and when you declare a variable of that class, you
    create an instance, one specific object that has the class variables and functions
    within it.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在大括号内，我们声明按钮使用的变量：`x`、`y`、`width`、`height`、`label`等。`drawButton()`和`buttonArmed()`函数也在类内定义，还有一个叫做构造函数的东西：每次创建新按钮（或者一般来说，类对象）时，构造函数会自动被调用。`class`语句及其后面的大括号内的内容将类声明为自定义类型，当你声明该类的变量时，你就创建了一个实例，即一个具体的对象，它包含类中的变量和函数。
- en: 'A variable of class `button` is declared just like a `PImage` variable:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`button`类的变量声明方式与`PImage`变量相同：'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The next step, as with a `PImage` or `PFont`, is to create an instance of the
    `button` class using `new` and assign it to a variable:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步，和`PImage`或`PFont`一样，是使用`new`创建`button`类的实例并将其赋值给一个变量：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When you use `new`, Processing calls the constructor for the class. The constructor
    accepts parameters, such as position or size, and saves them for later use in
    drawing the button. The constructor function has the same name as does the class
    2 (in this case, `button`), and it has no function type—it is not preceded by
    `void` or a type name. The constructor itself has no return value, but the `new`
    operator will return a new instance of the class. If you define more than one
    constructor, Processing calls the one that matches the type and number of parameters
    given in the `new` statement. The constructor then returns a new instance of the
    class. You can create as many instances as your computer memory allows.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用`new`时，Processing会调用类的构造函数。构造函数接受参数，如位置或大小，并将这些参数保存起来，供之后绘制按钮时使用。构造函数的名称与类名相同（在这里是`button`），并且没有返回类型——它前面不会有`void`或类型名称。构造函数本身没有返回值，但`new`操作符会返回该类的新实例。如果你定义了多个构造函数，Processing会调用与`new`语句中提供的参数类型和数量匹配的那个构造函数。构造函数随后会返回该类的新实例。你可以创建尽可能多的实例，只要你的计算机内存允许。
- en: You access variables and functions in a class variable using dot notation. For
    the `button` class instance `bred` 1, the *x* position is `bred.bx`, and to draw
    it, you’d call `bred.draw()`. The main draw function must call `draw()` for each
    of the buttons, or they won’t be displayed, and the `mousePressed()` function
    in the main program must check each button to see if it was clicked (that is,
    if the mouse cursor is inside the button) using the `armed()` function in each
    button.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过点符号（dot notation）来访问类变量和函数。对于`button`类的实例`bred` 1，*x* 位置是`bred.bx`，要绘制它，你需要调用`bred.draw()`。主绘制函数必须为每个按钮调用`draw()`，否则它们不会显示，而主程序中的`mousePressed()`函数必须检查每个按钮，看它是否被点击（即鼠标光标是否在按钮内部），这可以通过每个按钮中的`armed()`函数来完成。
- en: 'Sketch 44: A Slider'
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '草图 44: 滑块'
- en: A slider is a user interface widget that allows the user to move a small object
    (a cursor) along a linear path, either horizontally or vertically. The relative
    position of the cursor along the path represents a number. The cursor in one extreme
    position corresponds to the minimum value, and the cursor in the other extreme
    position represents the maximum. If the cursor is halfway between the min and
    max positions, the value associated with the slider is halfway between the min
    and max values.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 滑块是一个用户界面控件，允许用户沿着线性路径（水平或垂直）移动一个小物体（光标）。光标在路径上的相对位置代表一个数字。光标在一端的位置对应最小值，而在另一端的位置代表最大值。如果光标位于最小值和最大值之间的中点，那么与滑块相关联的值就是最小值和最大值之间的中间值。
- en: 'This widget can be used to position a large image in a small window or a lot
    of text within a smaller area, and we call it a scroll bar in those cases. The
    purpose of a slider is, more generally, to allow the user to select a number geometrically
    by sliding a cursor between two limits, rather than typing it. It is a natural
    idea to choose a number as a fraction of a total, or as a part of a range of values.
    If we define `sliderPos` as the position of the cursor in pixels from the start
    of the slider, `sliderWidth` as the width of the slider in pixels, and `sliderMax`
    and `sliderMin` as the numerical values associated with the min and max cursor
    positions, this is the selected value 3:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这种控件可以用于在小窗口中定位大图像或在较小区域内定位大量文本，我们在这些情况下称其为滚动条。更一般来说，滑块的目的是让用户通过在两个限制之间滑动光标来几何地选择一个数字，而不是通过输入它。这是一个自然的想法：选择一个作为总数的分数或作为一个值范围的一部分。如果我们将`sliderPos`定义为光标从滑块起始位置开始的像素位置，将`sliderWidth`定义为滑块的宽度（以像素为单位），将`sliderMax`和`sliderMin`定义为与最小和最大光标位置相关联的数值，那么这是所选的值3：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This expression is based on the fact that the slider position is a fraction
    of the total possible set of positions, and this represents the same fraction
    of the range between the `sliderMin` and `sliderMax`values (see [Figure 44-1](#figure44-1)).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表达式基于滑块位置是总可选位置集的一个分数的事实，这代表了从`sliderMin`到`sliderMax`值之间范围的相同分数（见[图 44-1](#figure44-1)）。
- en: '![f044001](Images/f044001.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![f044001](Images/f044001.png)'
- en: 'Figure 44-1: A slider'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 44-1：一个滑块
- en: A slider can be represented graphically in many different ways. In this sketch,
    the widget is a horizontal rectangle with a circular cursor, and the current numerical
    value is drawn to the right. However, the cursor can be rectangular, elliptical,
    triangular, a pointer, or other shapes.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 滑块可以通过多种方式图形化表示。在这张草图中，控件是一个水平矩形，带有一个圆形光标，当前的数值显示在右侧。然而，光标可以是矩形的、椭圆形的、三角形的、指针形的或其他形状。
- en: The `drawSlider()` function 1 draws the rectangle and positions the cursor using
    the `sliderPos` variable, which is set when the user selects the cursor with the
    mouse and then moves (slides) it between the ends of the rectangle. To build a
    slider class, you would make class variables for the position, size, current cursor
    position and value, and class functions to draw the slider and position the cursor
    (which you’d then call as, for example, `slider.drawSlider()` or `slider.draw()`).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`drawSlider()`函数1绘制矩形并使用`sliderPos`变量定位光标，当用户通过鼠标选择光标并将其移动（滑动）到矩形的两端时，该变量会被设置。要构建一个滑块类，你需要为位置、大小、当前光标位置和值创建类变量，并为绘制滑块和定位光标创建类函数（然后你可以像`slider.drawSlider()`或`slider.draw()`这样调用它们）。'
- en: A common use for sliders is as a way to display an image. Often an image will
    not fit into a particular window, or into any window; some images are very large.
    Rather than resize the image, it is common to have a slider at the bottom and
    the right side of the window, and to use the cursor to position the window over
    the image so that various parts can be seen. The values selected with the sliders
    represent the (*x*, *y*) location of the window over top of the larger image.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 滑块的常见用途之一是作为显示图像的一种方式。通常，图像可能无法适应某个特定窗口，或者根本无法适应任何窗口；有些图像非常大。与其调整图像大小，通常会在窗口的底部和右侧设置一个滑块，使用光标将窗口定位在图像上，这样就能看到图像的不同部分。通过滑块选择的值代表窗口在更大图像上方的(*x*,
    *y*)位置。
- en: 'Sketch 45: A Gauge Display'
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图 45：仪表显示
- en: The obvious way for a computer to display a numeric result is to simply display
    the number, but sometimes a more analog approach is easier for people to deal
    with. Some people like digital clocks, and some prefer the old kind with hands.
    The analog display can be faster for a human to process. A common kind of display
    is a gauge, where a pointer of some kind rotates and points to a number. Most
    older speedometers are displays of this type, for example. [Figure 45-1](#figure45-1)
    illustrates a gauge as a graphic and shows a simple abstraction of the situation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机显示数值结果的显而易见方式是直接显示数字，但有时更类比的方式更容易为人们所接受。有些人喜欢数字时钟，而有些人则偏爱带指针的旧款时钟。类比显示可以让人类更快地处理信息。一种常见的显示方式是仪表，其中某种指针旋转并指向一个数字。比如，大多数老式的车速计就是这种类型的显示。[图
    45-1](#figure45-1)以图形方式展示了一个仪表，并简要抽象了这种情况。
- en: '![f045001](Images/f045001.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![f045001](Images/f045001.png)'
- en: 'Figure 45-1: A gauge showing a value near 0 (left), and the angles that are
    involved in the display (right)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 45-1：一个显示接近 0 值的仪表（左），以及显示涉及的角度（右）
- en: A gauge can display values between a minimum and a maximum numeric value. The
    minimum value corresponds to the minimum angle the pointer can have (labeled α
    in the figure), and the maximum value corresponds to the maximum angle the pointer
    can have (labeled β). In this sketch, angles map directly onto values so that
    a difference of one degree always represents the same amount of change. To display
    a value, we calculate the angle that corresponds to that value, named `theta`
    1 in the sketch, and draw the pointer at that angle.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表可以显示介于最小值和最大值之间的数值。最小值对应指针能达到的最小角度（图中标记为α），最大值对应指针能达到的最大角度（图中标记为β）。在这个草图中，角度直接映射到数值，因此每一个度数的变化始终代表相同的变化量。为了显示一个值，我们计算出与该值对应的角度，草图中将其命名为`theta`
    1，并在该角度绘制指针。
- en: One way to look at this is as a *slider* that is shaped like a curve. Although
    the *gauge* is only a display, the mathematics of where to place the pointer is
    the same as for a slider, except we use angles instead of straight-line distances,
    and it is reorganized to provide a value for the position. [Figure 45-2](#figure45-2)
    shows how the slider situation converts into what we need for a gauge, and shows
    the formula for finding where to draw the pointer. This formula is really the
    same as the one used for the slider.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一种看待这个问题的方法是将其视为一个形状像曲线的*滑块*。虽然*仪表*仅仅是一个显示工具，但确定指针位置的数学原理与滑块相同，只是我们使用的是角度而不是直线距离，并且它经过重新组织以提供位置值。[图
    45-2](#figure45-2)展示了滑块情况如何转换为我们需要的仪表，并展示了用于确定绘制指针位置的公式。这个公式实际上与我们为滑块使用的公式相同。
- en: '![f045002](Images/f045002.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![f045002](Images/f045002.png)'
- en: 'Figure 45-2: The gauge is like a bent slider. The equation shown here determines
    a position value (angle) given a numerical value, but it is otherwise the same
    as the one we used for the slider.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 45-2：仪表就像一个弯曲的滑块。这里展示的方程根据数值确定一个位置值（角度），但它与我们为滑块使用的方程基本相同。
- en: We do need to understand that 0 degrees is horizontal, and we convert the starting
    (α) and ending (β) angles so they are relative to 0\. Starting at α, we decrease
    the angle of the pointer as the value increases toward the maximum. If α is 140,
    then β should be −45 rather than the equivalent angle, 315, so that β < α.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确实需要理解0度是水平的，并且我们将起始角度（α）和结束角度（β）转换为相对于0的角度。从α开始，当数值增加到最大值时，指针的角度逐渐减小。如果α是140度，那么β应该是−45度，而不是等效的角度315度，这样β
    < α。
- en: The `gauge()` function draws the pointer at the angle specified by the equation
    in [Figure 45-2](#figure45-2) given a data value, `v`. Don’t forget that angles
    in Processing need to be given as radians, so `pos` has to be converted from degrees.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`gauge()`函数根据[图 45-2](#figure45-2)中的方程，在给定数据值`v`的情况下，绘制出指针的位置。别忘了，Processing中的角度需要以弧度表示，因此`pos`必须从度数转换过来。'
- en: 'Sketch 46: A Likert Scale'
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图 46：Likert量表
- en: A Likert scale is a rating scale for answering questions, commonly used in questionnaires.
    The person being asked the question selects one of the answers from a set of choices
    (often five) ranging from “Strongly Disagree” to “Strongly Agree.” The idea is
    to collect standard answers upon which statistics can be computed.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Likert量表是一种用于回答问题的评分量表，通常用于问卷调查中。被问者从一组选项中选择一个答案（通常是五个选项），这些选项从“强烈不同意”到“强烈同意”不等。其目的是收集标准答案，以便进行统计计算。
- en: This sketch poses a question by drawing it near the top of the screen 2. The
    possible answers are numbered from 1 (Strongly Disagree) to 5 (Strongly Agree),
    and each answer corresponds to a circle. To select an answer, the user clicks
    on a circle, and the circle gets filled in 3. When the user has answered to their
    satisfaction, then they type any key and the sketch asks another question.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图通过将问题绘制在屏幕顶部附近提出问题 2。可能的答案从1（强烈不同意）到5（强烈同意）编号，每个答案对应一个圆圈。用户通过点击一个圆圈来选择答案，圆圈会被填充
    3。当用户对自己的回答满意后，按下任意键，草图会提问下一个问题。
- en: The questions reside in a text file named *questions.txt* that is opened within
    `setup()`. We assume that there are multiple questions, and each is one line of
    text in the file. The `loadStrings()` 1 function reads them all into an array
    named `question`, the length of which is the number of questions. Each question
    is asked (displayed) according to its index variable, `questionNo`, which iterates
    from 0 to the number of questions. The user selects an answer, one of five possible,
    by clicking the mouse within one of the five circles. That answer is chosen as
    the current selection (using a variable named `select`) in the `mouseReleased()`
    function.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 问题存储在名为*questions.txt*的文本文件中，该文件在`setup()`中打开。我们假设文件中有多个问题，每个问题占一行。`loadStrings()`函数将它们全部读取到一个名为`question`的数组中，数组的长度就是问题的数量。每个问题根据其索引变量`questionNo`被逐一显示，`questionNo`从0开始，直到问题数量。用户通过点击五个圆圈中的一个来选择答案。所选的答案会作为当前选择（使用名为`select`的变量）保存在`mouseReleased()`函数中。
- en: When the user types a key, `keyPressed()` is called, and the selection will
    be written to a file named *save.txt* 4. Then the `questionNo` variable will be
    incremented, resulting in the next question being displayed. When all questions
    have been asked (that is, when `questionNo > question.length`), the file is closed
    and the program ends. The answers chosen by the user to all questions are now
    stored in the *save.txt* file.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按下一个键时，`keyPressed()`函数会被调用，所选答案将被写入一个名为*save.txt*的文件中。然后，`questionNo`变量会增加，显示下一个问题。当所有问题都被问完（即当`questionNo
    > question.length`时），文件将被关闭，程序结束。用户选择的所有问题答案现在都存储在*save.txt*文件中。
- en: 'Sketch 47: A Thermometer'
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图 47：一个温度计
- en: The original thermometer, made of glass with a colored fluid inside, had a design
    imposed by its function, but it was also an excellent way to display numeric data.
    It represents a number as the height of a colored line or rectangle. It is easy
    to see how tall a rectangle is and easy to compare it to others. This idea has
    been used in many places, most noticeably on sound equipment to show volume.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 原始的温度计，由玻璃制成，内部有彩色液体，设计上受到功能的限制，但它也是展示数字数据的一个绝佳方式。它通过彩色线条或矩形的高度来表示一个数字。很容易看出一个矩形有多高，并且容易与其他矩形进行比较。这个理念已被广泛应用，最显著的是在音响设备上用来显示音量。
- en: The representation on a computer is straightforward. A colored rectangle grows
    and shrinks as a function of how large a numeric variable is. Such a variable
    has a minimum and maximum value, and the rectangle has a minimum (usually 0) and
    maximum height. The mapping between the number and the height can be done as it
    was for the slider (Sketch 44) and the dial gauge (Sketch 45). In this sketch,
    it is implemented a bit differently, but it is computed in the same way.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机上进行表示非常直接。一个彩色矩形的大小根据数字变量的大小变化。这样的变量有最小值和最大值，而矩形也有最小（通常为0）和最大高度。数字与高度之间的映射可以像在滑块（草图
    44）和指针仪表（草图 45）中一样进行。在这个草图中，它的实现方式稍有不同，但计算方式是相同的。
- en: 'This sketch computes how much taller the rectangle gets for each increase in
    the variable 1. If the rectangle’s height can go from `ystart` to `yend`, and
    the range of data values is from `dataMin` to `dataMax`, then the change in rectangle
    height for each data increment is as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图计算了每次变量1增加时，矩形高度增加的量。如果矩形的高度可以从`ystart`变化到`yend`，而数据值的范围是从`dataMin`到`dataMax`，那么每次数据增加时，矩形高度的变化如下：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then for any data value, `data`, the height of the rectangle relative to `ystart`
    is the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，对于任何数据值`data`，矩形相对于`ystart`的高度如下：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This process only draws a rectangle, which is not very exciting, so we’ll add
    a background image (created specifically for this program) that contains an image
    of a glass thermometer and gradations that allow the user to interpret the height
    as a number. The coordinates of the rectangle have to be mapped specifically onto
    the image so that the rectangle aligns with the thermometer column, using a similar
    process as in Sketch 45.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程只绘制一个矩形，虽然不算太有趣，但我们会添加一张背景图像（专门为这个程序制作），其中包含一个玻璃温度计的图像以及刻度线，允许用户将矩形的高度解读为数字。矩形的坐标必须特别映射到图像上，以便矩形与温度计柱对齐，使用的过程与草图
    45 中类似。
- en: This example generates a random numeric value for display. After starting arbitrarily
    at `data = 15`, the value changes by a small random amount each frame.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子生成一个随机数字进行展示。从`data = 15`开始，这个值在每一帧中会按一个小的随机量变化。
