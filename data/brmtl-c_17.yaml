- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Command Line Arguments and Raw I/O
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行参数和原始 I/O
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: 'In this chapter, we explore how command line arguments allow the operating
    system to pass information to a program when the program is invoked. We also take
    a look at another feature that’s close to the operating system: the raw input/output
    (I/O) system. This system lets us precisely control how a program performs I/O.
    Done right, it can be a tremendous asset to a program.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了命令行参数如何允许操作系统在程序被调用时将信息传递给程序。我们还将了解一个与操作系统紧密相关的功能：原始输入/输出（I/O）系统。这个系统使我们能够精确控制程序如何执行
    I/O 操作。如果正确使用，它可以成为程序的一项巨大资产。
- en: We’ll use the raw I/O system to perform a high-speed file copy. This program
    will also use command line arguments to specify the source and destination files,
    so we don’t need to hardcode them into the program.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用原始 I/O 系统执行高速文件复制。这个程序还将使用命令行参数来指定源文件和目标文件，这样我们就不需要将它们硬编码到程序中了。
- en: Command Line Arguments
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令行参数
- en: 'Operating systems give the user the ability to provide a program with a number
    of command line options when the program is run:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统允许用户在程序运行时通过命令行选项向程序提供多个参数：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'C passes in these arguments through two parameters, `argc` and `argv`, to `main`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: C 通过两个参数 `argc` 和 `argv` 将这些参数传递给 `main`：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first parameter, `argc`, contains the number of arguments. For historical
    reasons, it is an integer and not an unsigned integer. The second parameter, `argv`,
    is an array of strings representing the actual arguments.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数 `argc` 包含参数的数量。由于历史原因，它是一个整数，而不是无符号整数。第二个参数 `argv` 是一个字符串数组，表示实际的参数。
- en: 'If you run a program with an invocation like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行一个像这样的程序：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'the `argv` and `argc` parameters will contain the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`argv` 和 `argc` 参数将包含以下内容：'
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first argument is the name of the program. The next argument is the `first`
    parameter on the command line, and so on.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是程序的名称。下一个参数是命令行上的 `first` 参数，依此类推。
- en: '[Listing 15-1](#listing15-1) contains a short program designed to print the
    command line arguments.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 15-1](#listing15-1) 包含了一个简短的程序，旨在打印命令行参数。'
- en: '**echo.c**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**echo.c**'
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 15-1: Printing command line arguments'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 15-1：打印命令行参数
- en: You don’t have to name the argument count `argc` and the argument vector `argv`,
    nor do you have to declare `argv` and `argc const`, but it’s conventional to do
    so.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你不一定需要将参数数量命名为 `argc`，将参数向量命名为 `argv`，也不需要声明 `argv` 和 `argc const`，但这样做是惯例。
- en: Raw I/O
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原始 I/O
- en: 'The two major file I/O systems available to C programmers are *buffered I/O*
    and *unbuffered I/O*. The standard I/O system (`printf`), which we discussed in
    Chapter 14, uses buffers. In this chapter, we’ll work with unbuffered I/O. To
    show the differences between the two, let’s consider an example. Say you want
    to clean out your closet, and you have 500 old power cords to throw away. You
    could do the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: C 程序员可以使用的两种主要文件 I/O 系统是*缓冲 I/O*和*无缓冲 I/O*。我们在第 14 章讨论的标准 I/O 系统（`printf`）使用了缓冲区。在本章中，我们将使用无缓冲
    I/O。为了展示这两者之间的区别，我们来考虑一个例子。假设你想整理衣橱，并且有 500 根旧电源线需要丢弃。你可以这样做：
- en: Pick up a power cord.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拿起一根电源线。
- en: Walk outside to the trash can.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 走到户外的垃圾桶旁。
- en: Throw it away.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 丢掉它。
- en: Repeat 500 times.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复 500 次。
- en: This method would be like using unbuffered I/O to get rid of the power cords.
    The *throughput* (speed at which you are doing the work) is terrible.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法就像使用无缓冲 I/O 丢弃电源线一样，*吞吐量*（你完成工作的速度）非常低。
- en: 'Let’s add a buffer—in this case, a garbage bag. The procedure now looks like
    this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个缓冲区——在这个例子中，就是一个垃圾袋。现在程序的步骤如下：
- en: Put a power cord in bag.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 把电源线放进袋子里。
- en: Keep putting cords in the bag until it is full. (It holds 100 cords.)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一直往袋子里放电源线，直到它满了。（它能装下 100 根电源线。）
- en: Walk outside to the trash can.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 走到户外的垃圾桶旁。
- en: Throw the bag away.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 丢掉袋子。
- en: Repeat five times.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复五次。
- en: Buffering makes the repetitive process more efficient, so when would you want
    to use unbuffered I/O? You would use it in cases where it would be more efficient
    to walk out to the trash can for each item. Say you had to throw away five refrigerators.
    You wouldn’t want to put five refrigerators in a trash bag and then throw them
    away. Instead, you’d throw away each one individually.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲会使重复的过程更高效，那么什么时候你会选择使用无缓冲 I/O 呢？你会在某些情况下使用它，这些情况下单独丢弃每个物品会更高效。假设你要丢掉五台冰箱。你不会把五台冰箱放进垃圾袋然后一起丢掉。相反，你会把每一台冰箱单独丢掉。
- en: Using Raw I/O
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用原始 I/O
- en: If we wanted to copy a file, we could use the buffered I/O system to do it,
    but that would mean we would need to let the buffered I/O system choose the size
    of the buffer. Instead, we want to set our own buffer size. In this case, we know
    that a size of 1,024 bytes is optimal for the device we are using, so we create
    the program shown in [Listing 15-2](#listing15-2) to use raw I/O to copy a file
    using a 1,024-byte buffer.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想复制一个文件，可以使用缓冲 I/O 系统来实现，但那样的话，我们需要让缓冲 I/O 系统选择缓冲区的大小。相反，我们希望设置自己的缓冲区大小。在这种情况下，我们知道
    1,024 字节的大小是适用于我们设备的最佳大小，因此我们创建了在 [Listing 15-2](#listing15-2) 中显示的程序，使用原始 I/O
    来复制文件，缓冲区大小为 1,024 字节。
- en: '**copy.c**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**copy.c**'
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 15-2: A program to copy one file to another using raw I/O'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 15-2：使用原始 I/O 复制一个文件到另一个文件的程序
- en: 'To use the program in [Listing 15-2](#listing15-2), we must specify an input
    file and an output file:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 [Listing 15-2](#listing15-2) 中的程序，我们必须指定一个输入文件和一个输出文件：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The program first checks to see that the proper number of arguments is supplied
    1. Next, it opens the input file 2. The general form of the `open` function is
    `file-descriptor` `= open(``filename``,` `flags``)`. The flags indicate how the
    file is to be opened. The `O_RDONLY` flag opens the file read-only, and the `O_BINARY`
    flag indicates that the file is binary. The `O_BINARY` flag is a funny one (I’ll
    explain it in the next section).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 程序首先检查是否提供了正确数量的参数 1。接着，它打开输入文件 2。`open` 函数的一般形式是 `file-descriptor` `= open(``filename``,`
    `flags``)`。标志指示文件如何打开。`O_RDONLY` 标志表示文件以只读模式打开，`O_BINARY` 标志表示文件是二进制的。`O_BINARY`
    标志是一个有趣的标志（我将在下一节中解释）。
- en: The `open` command returns a number called a *file descriptor*. If there is
    an error, it returns a negative number, which means the next step in the program
    is to check for errors 3.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`open` 命令返回一个称为 *文件描述符* 的数字。如果发生错误，它返回一个负数，这意味着程序的下一步是检查错误 3。'
- en: Then we open the output file using the `O_WRONLY` (write only) and `O_CREAT`
    (create the file if needed) flags 4.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用 `O_WRONLY`（仅写模式）和 `O_CREAT`（如果需要则创建文件）标志打开输出文件 4。
- en: 'The additional `0666` parameter means that if the file is created, it’s in
    protection mode. It’s an octal number, with each digit representing a protection
    user set and each bit representing a protection type:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 额外的 `0666` 参数表示如果文件被创建，它会处于保护模式。这是一个八进制数字，每一位代表一个保护用户集，每一位代表一种保护类型：
- en: 4 Read
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4 读取
- en: 2 Write
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2 写入
- en: 1 Execute
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1 执行
- en: 'The digits are in the following order: *<user>*, *<group>*, *<other>*. The
    `0666` parameter tells the system to create the file so that the user can read
    and write it (`6`), so that accounts in the same group as the user get read/write
    access (`6`), and so that anyone else gets the same read/write permission (`6`).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 数字的顺序如下：*<user>*、*<group>*、*<other>*。`0666` 参数告诉系统创建文件，使得用户可以读取和写入它（`6`），使得与用户同组的账户可以读写（`6`），并且其他任何人也拥有相同的读写权限（`6`）。
- en: 'Once the files are open, we do the copy 5. The `read` function has the general
    form:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦文件被打开，我们就进行复制 5。`read` 函数的一般形式是：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: where `fd` is the file descriptor, `buffer` is the buffer that receives the
    data, and `size` is the maximum number of characters read. The function returns
    the number of bytes read (`bytes read`), `0` to indicate the end of the file (EOF),
    or a negative number indicating an error.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `fd` 是文件描述符，`buffer` 是接收数据的缓冲区，`size` 是读取的最大字符数。该函数返回读取的字节数（`bytes read`），`0`
    表示文件结束（EOF），或者返回负数表示发生错误。
- en: After reading, we check for an error 6. Then we check to see whether we have
    reached the end of the file 7. If so, we’re done transferring data.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 读取后，我们检查是否有错误 6。然后我们检查是否已到达文件末尾 7。如果是，我们就完成了数据传输。
- en: 'At this point we’re sure to have some data, so we write it 8. The `write` function
    has the general form:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们肯定已经有一些数据了，因此我们开始写入 8。`write` 函数的一般形式是：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: where `fd` is the file descriptor, `buffer` is the buffer that has the data,
    and `size` is the number of characters to write. This function returns the number
    of bytes written or a negative number to indicate an error. Once the write is
    completed, we close the file descriptors 9.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `fd` 是文件描述符，`buffer` 是包含数据的缓冲区，`size` 是要写入的字符数。该函数返回写入的字节数或返回负数表示发生错误。一旦写入完成，我们关闭文件描述符
    9。
- en: Using Binary Mode
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用二进制模式
- en: Unfortunately, text files are not portable across operating systems because
    different operating systems use different characters to indicate the end of a
    line. C was originally written for Unix, which inspired Linux. Both operating
    systems use line feed (character number `0x0a`) as the line ending.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，文本文件在操作系统之间不可移植，因为不同的操作系统使用不同的字符来表示行结束。C最初是为Unix编写的，而Unix又启发了Linux。这两个操作系统都使用换行符（字符编号`0x0a`）作为行结束符。
- en: 'Say you open a text file with no `O_BINARY` flag and want to write to it. If
    you write out a string to a file using:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你打开一个没有`O_BINARY`标志的文本文件，并且想向其中写入数据。如果你使用以下方式将字符串写入文件：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'on Linux, you’ll get a file with three characters in it:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上，你将得到一个包含三个字符的文件：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Other operating systems have to translate the end-of-line sequence into their
    native line ending. Table 14-1 lists the various line endings.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 其他操作系统必须将行尾序列转换为其本地的行结束符。表14-1列出了各种行结束符。
- en: 'Table 15-1: File Line Endings'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 表15-1：文件行结束符
- en: '| **OS** | **Line ending** | **Characters** | **Translation** |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| **操作系统** | **行结束符** | **字符** | **转换** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Linux | Line feed | `\n` | None |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| Linux | 换行符 | `\n` | 无 |'
- en: '| macOS | Carriage return | `\r` | Replace `\n` with `\r` on output |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| macOS | 回车符 | `\r` | 在输出时将`\n`替换为`\r` |'
- en: '| Windows | Carriage return, line feed | `\r\n` | Insert `\r` before each `\n`
    |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| Windows | 回车符、换行符 | `\r\n` | 在每个`\n`前插入`\r` |'
- en: 'If you are running a C program on Windows and execute this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在Windows上运行C程序并执行以下操作：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'which is the same code as before, four characters are written:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这与之前的代码相同，写入了四个字符：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: There will be times, however, when you’re writing a binary file and want byte
    `0a` to be written as `0a` without translation. On Linux, that’s easy, because
    Linux never does translation. However, other operating systems do, so they added
    a new `O_BINARY` flag to tell the library that a binary file is being used and
    to skip the file translation.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时你会在写入二进制文件时，希望字节`0a`以`0a`的形式原样写入，而不做任何转换。在Linux上，这很简单，因为Linux永远不会进行转换。然而，其他操作系统会进行转换，因此它们添加了一个新的`O_BINARY`标志，告诉库正在使用二进制文件，并跳过文件转换。
- en: Linux does not have the `O_BINARY` flag since it makes no distinction between
    binary and text files. In fact, you can have a half-binary/half-text file. (I
    don’t know why you’d want to do that, but Linux will let you.)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Linux没有`O_BINARY`标志，因为它不区分二进制文件和文本文件。实际上，你可以拥有一个半二进制/半文本的文件。（我不知道为什么你会想这么做，但Linux会允许你这么做。）
- en: I included the `O_BINARY` flag in [Listing 15-2](#listing15-2) because I wanted
    the copy program to be portable. We need to supply an `O_BINARY` mode when using
    Apple and Microsoft systems, but if we compile the program on a Linux system,
    `O_BINARY` is undefined.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我在[清单15-2](#listing15-2)中包含了`O_BINARY`标志，因为我希望复制程序具有可移植性。我们需要在使用Apple和Microsoft系统时提供`O_BINARY`模式，但如果我们在Linux系统上编译程序，则`O_BINARY`未定义。
- en: 'Thus, the hack is to define it if it is not already defined by the operating
    system in the header files:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，解决方法是如果操作系统的头文件中没有定义该标志，则自己定义它：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If the operating system has an `O_BINARY` defined, the `#define` will not be
    compiled. If we are using a Linux-like operating system with no `O_BINARY`, `#define
    O_BINARY 0` will be compiled, and `O_BINARY` will be assigned the value of `0`,
    which does nothing—and doing nothing is exactly what we need on Linux.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果操作系统已经定义了`O_BINARY`，则`#define`将不会被编译。如果我们使用的是没有`O_BINARY`的类Linux操作系统，`#define
    O_BINARY 0`将被编译，并且`O_BINARY`将被赋值为`0`，这样就什么都不做——而在Linux上，正是“不做任何事情”是我们需要的。
- en: ioctl
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ioctl
- en: 'In addition to reading and writing, the raw I/O system provides a function
    called `ioctl` that performs I/O control. Its general form is:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 除了读取和写入之外，原始I/O系统还提供了一个名为`ioctl`的函数，用于执行I/O控制。它的一般形式是：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: where `fd` is the file descriptor, `request` is the device-specific control
    request, and `parameter` is the parameter to the request. For most requests, the
    function returns `0` if the request worked and a nonzero value otherwise (some
    `ioctl` calls return something different).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`fd`是文件描述符，`request`是设备特定的控制请求，`parameter`是请求的参数。对于大多数请求，如果请求成功，函数返回`0`，否则返回非零值（某些`ioctl`调用返回不同的值）。
- en: You can use `ioctl` to eject removable media, rewind or fast-forward tape drives,
    set the speed and other parameters of a serial device, and set the address information
    for a network device. Because the `ioctl` specification is open-ended, a lot of
    functionality has been crammed into this interface.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`ioctl`来弹出可移动媒体、倒带或快进磁带驱动器、设置串口设备的速度和其他参数，以及设置网络设备的地址信息。由于`ioctl`规范是开放式的，许多功能已经被压缩到这个接口中。
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: The raw I/O system provides the best control over what your I/O operations actually
    do. There is minimal editing or interference from the operating system, but this
    control comes with a price. The buffered I/O system helps limit your mistakes,
    whereas the raw I/O system does not. Still, if you know what you’re doing, it
    can be a tremendous asset.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 原始I/O系统提供了对I/O操作的最佳控制。操作系统的编辑或干预最小，但这种控制是有代价的。缓冲I/O系统有助于限制你的错误，而原始I/O系统则没有。不过，如果你知道自己在做什么，它可以成为一个巨大的资产。
- en: Programming Problems
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程问题
- en: 'Write a program that takes one argument: the name of the person running the
    program. It then says `Hello` `<name>`. Here’s an example:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，接受一个参数：运行该程序的人的名字。然后打印`Hello` `<name>`。例如：
- en: '[PRE15]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Write a program that scans the argument list and, if `-d` is an argument, prints
    `Debug mode`. If the `-d` is missing, it prints `Release mode`. Add other options
    as well.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，扫描参数列表，如果`-d`是一个参数，则打印`调试模式`。如果`-d`缺失，则打印`发布模式`。还可以添加其他选项。
- en: 'Time how long it takes the copy program in [Listing 15-2](#listing15-2) to
    copy a large file. Now change the buffer size to 1\. See how fast the program
    is. Change the buffer size to 16384\. See how fast it runs. Try 17000\. Note:
    almost every disk reads and writes in 512-byte blocks. How does this fact explain
    the timings you are seeing?'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测量[列表 15-2](#listing15-2)中的复制程序复制大文件所花费的时间。现在将缓冲区大小更改为1。查看程序运行速度。将缓冲区大小更改为16384。查看程序运行速度。尝试17000。注意：几乎每个磁盘都是以512字节块进行读写的。这个事实如何解释你所看到的时间？
- en: Research the `getopt` function and use it to parse the command line arguments
    you invented for problem 1.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 研究`getopt`函数并使用它解析你为问题1发明的命令行参数。
