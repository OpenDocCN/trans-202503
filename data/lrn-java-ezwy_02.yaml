- en: '**2**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2**'
- en: BUILD A HI-LO GUESSING GAME APP!
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建一个 HI-LO 猜数字游戏应用！
- en: '![Image](../images/circle.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/circle.jpg)'
- en: 'Let’s begin by coding a fun, playable game in Java: the Hi-Lo guessing game.
    We’ll program this game as a *command line application*, which is just a fancy
    way of saying it’s text based (see [Figure 2-1](ch2.xhtml#ch2fig1)). When the
    program runs, the prompt will ask the user to guess a number between 1 and 100\.
    Each time they guess, the program will tell them whether the guess is too high,
    too low, or correct.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始编写一个有趣的可玩游戏：Hi-Lo 猜数字游戏。我们将把这个游戏编写成一个*命令行应用程序*，这只是一个复杂的说法，意味着它是基于文本的（见[图2-1](ch2.xhtml#ch2fig1)）。当程序运行时，提示将要求用户猜测一个1到100之间的数字。每次猜测后，程序会告诉他们猜测是否太高、太低或正确。
- en: '![Image](../images/f0020-01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0020-01.jpg)'
- en: '*Figure 2-1: A text-based Hi-Lo guessing game*'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-1：基于文本的Hi-Lo猜数字游戏*'
- en: Now that you know how the game works, all you have to do is code the steps to
    play it. We’ll start by mapping out the app at a high level and then code a very
    simple version of the game. By starting out with a goal in mind and understanding
    how to play the game, you’ll be able to pick up coding skills more easily, and
    you’ll learn them with a purpose. You can also enjoy the game immediately after
    you finish coding it.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了游戏的基本玩法，接下来你只需要编写代码来实现这些步骤。我们将从高层次上规划应用程序，然后编写一个非常简单的游戏版本。通过一开始就设定目标并了解游戏规则，你将能够更轻松地掌握编程技能，并且在有目的的情况下学习它们。你也可以在完成编码后立刻享受游戏的乐趣。
- en: Planning the Game Step-by-Step
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 逐步规划游戏
- en: 'Let’s think about all the steps we’ll need to code in order to get the Hi-Lo
    guessing game to work. A basic version of the game will need to do the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们思考一下为了让Hi-Lo猜数字游戏能够正常运行，我们需要编写哪些步骤。游戏的基本版本需要做以下几件事：
- en: 1\. Generate a random number between 1 and 100 for the user to guess.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 为用户生成一个1到100之间的随机数，让用户猜测。
- en: 2\. Display a *prompt*, or a line of text, asking the user to guess a number
    in that range.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 显示一个*提示*，或一行文本，要求用户猜测这个范围内的数字。
- en: 3\. Accept the user’s guess as input.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 接受用户的猜测作为输入。
- en: 4\. Compare the user’s guess to the computer’s number to see if the guess is
    too high, too low, or correct.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 将用户的猜测与计算机的数字进行比较，看看猜测是太高、太低，还是正确。
- en: 5\. Display the results on the screen.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 在屏幕上显示结果。
- en: 6\. Prompt the user to guess another number until they guess correctly.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 提示用户继续猜测，直到他们猜对为止。
- en: 7\. Ask the user if they’d like to play again.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 问用户是否想再次玩这个游戏。
- en: 'We’ll start with this basic structure. In Programming Challenge #2 on [page
    40](ch2.xhtml#page_40), you’ll try adding an extra feature, to tell the user how
    many tries it took to guess the number correctly.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个基本结构开始。在 [第40页](ch2.xhtml#page_40)的编程挑战#2中，你将尝试添加一个额外的功能，告诉用户他们猜对数字所花的尝试次数。
- en: Creating a New Java Project
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个新的 Java 项目
- en: The first step in coding a new Java app in Eclipse is creating a project. On
    the menu bar in Eclipse, go to **File** ▸ **New** ▸ **Java Project** (or select
    **File** ▸ **New** ▸ **Project**, then **Java** ▸ **Java Project** in the New
    Project wizard). The New Java Project dialog should pop up, as shown in [Figure
    2-2](ch2.xhtml#ch2fig2).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Eclipse中编写一个新的Java应用程序的第一步是创建一个项目。在Eclipse的菜单栏中，选择**文件** ▸ **新建** ▸ **Java
    项目**（或者选择**文件** ▸ **新建** ▸ **项目**，然后在新建项目向导中选择**Java** ▸ **Java 项目**）。如[图2-2](ch2.xhtml#ch2fig2)所示，新建Java项目对话框应该会弹出。
- en: '![Image](../images/f0021-01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0021-01.jpg)'
- en: '*Figure 2-2: The New Java Project dialog for the Hi-Lo guessing game app*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-2：Hi-Lo猜数字游戏应用的新建Java项目对话框*'
- en: 'Type `HiLo` into the Project name field. Note that uppercase and lowercase
    letters are important in Java, and we’ll get in the habit of using uppercase letters
    to start all of our project, file, and class names, which is a common Java practice.
    And we’ll use camel case, as *Hi* and *Lo* are two words: *HiLo*. Leave all the
    other settings unchanged and click **Finish**. Depending on your version of Eclipse,
    you may be asked if you want to open the project using the Java Perspective. A
    *perspective* in Eclipse is a workspace set up for coding in a specific language.
    Click **Yes** to tell Eclipse you’d like the workspace set up for convenient coding
    in Java.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目名称字段中输入`HiLo`。请注意，Java中大小写字母是区分的，我们将养成使用大写字母来开始所有项目、文件和类名的习惯，这是Java的常见做法。而且我们将使用驼峰命名法，因为*Hi*和*Lo*是两个词：*HiLo*。保持其他设置不变，点击**完成**。根据你使用的Eclipse版本，可能会问你是否要用Java视图打开项目。Eclipse中的*视图*是为在特定语言中编程而设置的工作空间。点击**是**，告诉Eclipse你希望设置一个方便进行Java编程的工作空间。
- en: Creating the HiLo Class
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建HiLo类
- en: Java is an *object-oriented programming language*. Object-oriented programming
    languages use *classes* to design reusable pieces of programming code. Classes
    are like templates that make it easier to create *objects*, or instances of that
    class. If you think of a class as a cookie cutter, objects are the cookies. And,
    just like a cookie cutter, classes are reusable, so once we’ve built a useful
    class, we can reuse it over and over to create as many objects as we want.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Java是一种*面向对象的编程语言*。面向对象的编程语言使用*类*来设计可重用的编程代码。类就像是模板，使得创建*对象*，或者说是类的实例，更加容易。如果你把类看作饼干模具，那么对象就是饼干。而且，就像饼干模具一样，类是可重用的，所以一旦我们构建了一个有用的类，就可以重复使用它，创造出我们想要的任意多的对象。
- en: The Hi-Lo guessing game will have a single class file that creates a guessing
    game object with all the code needed to play the game. We’ll call our new class
    `HiLo`. The capitalization matters, and naming the class `HiLo` follows several
    Java naming conventions. It’s common practice to start all class names with an
    uppercase letter, so we use a capital `H` in `HiLo`. Also, there should be no
    spaces, hyphens, or special characters between words in a class name. Finally,
    we use camel case for class names with multiple words, beginning each new word
    with a capital letter, as in `HiLo`, `GuessingGame`, and `BubbleDrawApp`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Hi-Lo猜数字游戏将有一个单一的类文件，它创建一个猜数字游戏对象，包含进行游戏所需的所有代码。我们将把新类命名为`HiLo`。大小写很重要，命名类为`HiLo`遵循了Java的几条命名约定。常见的做法是所有类名的首字母都大写，因此我们在`HiLo`中使用了大写的`H`。此外，类名中的单词之间不应有空格、连字符或特殊字符。最后，多个单词的类名应使用驼峰命名法，每个新单词的首字母大写，像`HiLo`、`GuessingGame`和`BubbleDrawApp`一样。
- en: To create the new `HiLo` class, first find your *HiLo* project folder under
    the Package Explorer pane on the left side of the Eclipse workspace. Expand the
    folder by clicking the small arrow to the left of it. You should see a subfolder
    called *src*, short for *source code*. All the text files containing your Java
    programs will go in this *src* folder.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建新的`HiLo`类，首先在Eclipse工作区的左侧包资源管理器面板中找到你的*HiLo*项目文件夹。点击它左边的小箭头以展开文件夹。你应该能看到一个名为*src*的子文件夹，*src*是*源代码*的缩写。所有包含Java程序的文本文件将存放在这个*src*文件夹中。
- en: Right-click the *src* folder and select **New** ▸ **Class**, as shown in [Figure
    2-3](ch2.xhtml#ch2fig3).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 右键点击*src*文件夹，选择**新建** ▸ **类**，如[图2-3](ch2.xhtml#ch2fig3)所示。
- en: '![Image](../images/f0022-01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0022-01.jpg)'
- en: '*Figure 2-3: Creating a new class file for the Hi-Lo guessing game app*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-3：为Hi-Lo猜数字游戏应用创建一个新的类文件*'
- en: The New Java Class dialog will appear, as shown in [Figure 2-4](ch2.xhtml#ch2fig4).
    Type `HiLo` into the Name field. Then, under *Which method stubs would you like
    to create?*, check the box for **public static void main(String[] args)**. This
    tells Eclipse that we’re planning to write a `main()` program method, so Eclipse
    will include a *stub*, or skeleton, for the `main()` method that we can fill in
    with our own code. *Methods* are the functions in an object or class. The `main()`
    method is required any time you want to run an app as a stand-alone program.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: “新建Java类”对话框将会弹出，如[图2-4](ch2.xhtml#ch2fig4)所示。在“名称”字段中输入`HiLo`。然后，在*您希望创建哪些方法存根？*下，勾选**public
    static void main(String[] args)**。这告诉Eclipse我们计划编写一个`main()`程序方法，因此Eclipse将包含一个*存根*，即`main()`方法的框架，我们可以在其中填入自己的代码。*方法*是对象或类中的函数。每当你想将应用程序作为独立程序运行时，`main()`方法是必需的。
- en: '![Image](../images/f0022-02.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0022-02.jpg)'
- en: '*Figure 2-4: Name the new Java class* HiLo *and select the checkbox to create
    a main() method.*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-4：命名新的Java类* HiLo *并选择复选框以创建main()方法*'
- en: Click **Finish** in the New Java Class dialog, and you should see a new file
    named *HiLo.java* that contains the code shown in [Listing 2-1](ch2.xhtml#ch2list1).
    This Java file will be the outline of the Hi-Lo guessing game. We’ll write the
    guessing game program by editing this file and adding code inside it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在“新建Java类”对话框中点击**完成**，你应该会看到一个名为*HiLo.java*的新文件，文件中包含[清单2-1](ch2.xhtml#ch2list1)中显示的代码。这个Java文件将是Hi-Lo猜数字游戏的框架。我们将通过编辑这个文件并在其中添加代码来编写猜数字游戏程序。
- en: ➊ public class HiLo {
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ public class HiLo {
- en: ➋ public static void main(String[] args) {
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: ➋ public static void main(String[] args) {
- en: // TODO Auto-generated method stub
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: // TODO 自动生成的方法存根
- en: '}'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '*Listing 2-1: The stub code for the HiLo guessing game class, generated by
    Eclipse*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单2-1：由Eclipse生成的HiLo猜数字游戏类的存根代码*'
- en: Eclipse creates this code all on its own. The class `HiLo` is `public` ➊, meaning
    we can run it from the command line or terminal.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse会自动生成这段代码。`HiLo`类是`public` ➊，意味着我们可以通过命令行或终端来运行它。
- en: Java groups statements with braces, `{` and `}`. The opening brace, `{`, begins
    a block of statements that will form the body of the `HiLo` class. The closing
    brace, `}`, ends the block of statements. Inside the class is the `main()` method
    ➋, which is the method that will run when the class is executed.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Java使用大括号`{`和`}`来分组语句。开括号`{`开始一个语句块，这些语句将构成`HiLo`类的主体。闭括号`}`结束这个语句块。在类内部是`main()`方法
    ➋，这是类执行时将运行的方法。
- en: Inside the opening brace for the `main()` method is a comment line that starts
    with two forward slashes, `//`. Comments are for us (the humans) to read. They’re
    ignored by the computer, so we can use them to help us remember what a section
    of code does or to leave notes for future use. You can delete the `TODO` comment
    in [Listing 2-1](ch2.xhtml#ch2list1).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main()`方法的开括号内有一行以两个斜杠`//`开头的注释。注释是供我们（人类）阅读的。计算机会忽略它们，所以我们可以使用注释帮助我们记住代码段的作用或留下未来使用的备注。你可以删除[清单2-1](ch2.xhtml#ch2list1)中的`TODO`注释。
- en: '*Generating a Random Number*'
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*生成一个随机数*'
- en: The first programming task for our game is to generate a random number. We’ll
    use the `Math` class, which contains a method for generating a random floating-point
    (decimal) number between 0.0 and 1.0\. Then, we’ll convert that decimal value
    to an *integer* (a whole number) between 1 and 100\. The `Math` class is a built-in
    class that contains many useful math functions like the ones you might find on
    a nice scientific calculator.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们游戏的第一个编程任务是生成一个随机数。我们将使用`Math`类，它包含一个方法用于生成一个0.0到1.0之间的随机浮点数（小数）。然后，我们将把这个小数值转换为一个1到100之间的*整数*（一个整数）。`Math`类是一个内置类，包含许多有用的数学函数，类似于你在科学计算器上找到的那些函数。
- en: Inside the `main()` method, add the comment and line of code shown in [Listing
    2-2](ch2.xhtml#ch2list2). (The new code is shown in black and the existing code
    is shown in gray.)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main()`方法内，添加[清单2-2](ch2.xhtml#ch2list2)中显示的注释和代码行。（新代码以黑色显示，现有代码以灰色显示。）
- en: public class HiLo {
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: public class HiLo {
- en: public static void main(String[] args) {
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: public static void main(String[] args) {
- en: // Create a random number for the user to guess
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: // 为用户生成一个随机数以供猜测
- en: int theNumber = (int)(Math.random() * 100 + 1);
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: int theNumber = (int)(Math.random() * 100 + 1);
- en: '}'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '*Listing 2-2: The code to create a random number between 1 and 100*'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单2-2：创建一个1到100之间随机数的代码*'
- en: First, we need to create a variable to hold the random number the user will
    be trying to guess in the app. Since the app will ask the user to guess a whole
    number between 1 and 100, we’ll use the `int` type, short for *integer*. We name
    our variable `theNumber`. The equal sign, `=`, assigns a value to our new `theNumber`
    variable. We use the built-in `Math.random()` function to generate a random number
    between 0.0 and just under 1.0 (0.99999). Because `Math.random()` generates numbers
    only in that specific range, we need to multiply the random number we get by 100
    to stretch the range from 0.0 to just under 100.0 (99.99999 or so). Then we add
    1 to that value to ensure the number runs from 1.0 (0.0 + 1) to 100.99999.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个变量来保存用户在应用程序中尝试猜测的随机数。由于应用程序将要求用户猜测一个1到100之间的整数，我们将使用`int`类型，即*整数*的缩写。我们将变量命名为`theNumber`。等号`=`将一个值赋给我们新的`theNumber`变量。我们使用内置的`Math.random()`函数生成一个介于0.0和1.0之间的随机数（不包括1.0）。由于`Math.random()`生成的数字只在这个特定范围内，我们需要将随机数乘以100，从而将范围扩展到从0.0到接近100.0（大约99.99999）。然后，我们将1加到这个值上，以确保数字从1.0（0.0
    + 1）到100.99999之间。
- en: The `(int)` part is called a *type cast*, or just *cast* for short. Casting
    changes the *type* of the number from a decimal number to an integer. In this
    case, everything after the decimal point is removed, resulting in a whole number
    between 1 and 100\. Java then stores that number in the variable `theNumber`,
    the number the user is trying to guess in the game. Finally, we add a semicolon
    (`;`) to indicate the end of the instruction.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`(int)`部分称为*类型转换*，简称*转换*。类型转换将数字的*类型*从小数转换为整数。在这种情况下，小数点后的部分被去除，结果是一个1到100之间的整数。然后，Java将该数字存储在变量`theNumber`中，这是用户在游戏中尝试猜测的数字。最后，我们添加一个分号（`;`）来表示语句的结束。'
- en: 'Now, you can add a `System.out.println()` statement to print the number you’ve
    generated:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以添加一个`System.out.println()`语句来打印你生成的数字：
- en: int theNumber = (int)(Math.random() * 100 + 1);
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: int theNumber = (int)(Math.random() * 100 + 1);
- en: System.out.println( theNumber );
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println( theNumber );
- en: '}'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: After we add this line of code, we can run the program to see it generate and
    print a random number. Click the green run button in the top menu bar to compile
    and run the program, as shown in [Figure 2-5](ch2.xhtml#ch2fig5). You can also
    go to the **Run** menu and select **Run**.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们添加了这行代码之后，就可以运行程序，查看它生成并打印一个随机数字了。点击顶部菜单栏中的绿色运行按钮来编译并运行程序，如[图2-5](ch2.xhtml#ch2fig5)所示。你也可以点击**运行**菜单并选择**运行**。
- en: '![Image](../images/f0024-01.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0024-01.jpg)'
- en: '*Figure 2-5: Printing a random number to the screen*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-5：将随机数字打印到屏幕上*'
- en: Your random number will appear in the small console window at the bottom of
    the screen, as shown in [Figure 2-5](ch2.xhtml#ch2fig5). If you run your program
    again, you’ll see a different number between 1 and 100.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你的随机数字会出现在屏幕底部的小控制台窗口中，如[图2-5](ch2.xhtml#ch2fig5)所示。如果你再次运行程序，你会看到一个1到100之间的不同数字。
- en: 'This would be a great time to play with the program a bit. Try generating a
    number between 1 and 10, or 1 and 1,000—even 1 to 1,000,000\. Java will accept
    numbers all the way to a billion or so. Just remember to write your numbers without
    commas: 1,000 becomes `1000` in Java, and 1,000,000 is written `1000000`. You
    probably don’t want to guess a number between 1 and 1,000,000 the first time you
    play the game, though, so remember to change this line back before you move ahead.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的时机来尝试一下程序。试着生成一个介于1到10，或者1到1,000之间的数字——甚至1到1,000,000。Java可以接受直到十亿的数字。只需要记得写数字时不要加逗号：1,000在Java中写作`1000`，而1,000,000则写作`1000000`。不过，第一次玩这个游戏时，你可能不想猜1到1,000,000之间的数字，所以在继续之前记得把这一行改回去。
- en: '**NOTE**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Remember to save your code often. Eclipse will save for you automatically
    every time you run a program, but it’s a good idea to save after every few lines
    of code. In fact, pressing CTRL-S (or* ![Image](../images/symbol.jpg)*-S) to save
    after each line of code isn’t a bad habit to get into. I’ve never heard a coder
    say they wish they hadn’t saved so often, but I’ve experienced losing unsaved
    code a few times myself, and it’s not fun. Save often, and remember that you can
    use* ***Edit*** ▸ ***Undo*** *if you ever type something incorrectly or accidentally
    delete a section of code.*'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*记得经常保存你的代码。Eclipse每次运行程序时会自动保存，但最好在每写完几行代码后手动保存。实际上，按CTRL-S（或* ![Image](../images/symbol.jpg)*-S）每写完一行代码保存一下并不是一个坏习惯。我从未听过程序员说他们希望自己保存得不那么频繁，但我自己也曾几次丢失未保存的代码，这可不好受。经常保存，并且记住，如果你不小心输入错误或删除了某段代码，可以使用*
    ***编辑*** ▸ ***撤销*** *功能。*'
- en: '*Getting User Input from the Keyboard*'
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*从键盘获取用户输入*'
- en: Now let’s add the code that allows the user to guess a number. To do this, we’ll
    need to *import* some additional Java capabilities. Java comes with many libraries
    and packages that we can use in our own projects. Libraries and packages are sets
    of code that someone else has created. When we import them, we get new features
    that make creating our own programs even easier. We can access packages and libraries
    whenever we need them using the `import` statement.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加让用户猜数字的代码。为了做到这一点，我们需要*导入*一些额外的Java功能。Java带有许多我们可以在自己项目中使用的库和包。库和包是别人已经创建的一组代码。当我们导入它们时，我们能获得新的功能，这使得我们创建自己的程序变得更加容易。我们可以通过`import`语句在任何需要时访问这些包和库。
- en: 'For the guessing game program, we need to be able to accept keyboard input
    from the user. The `Scanner` class, contained in the `java.util` utilities package,
    provides several useful functions for working with keyboard input. Let’s import
    the `Scanner` class into our program. Add the following statement at the top of
    the *HiLo.java* file, before the line `public class HiLo`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于猜数字游戏程序，我们需要能够接受用户的键盘输入。`Scanner`类位于`java.util`实用程序包中，提供了多个用于处理键盘输入的有用功能。让我们将`Scanner`类导入到程序中。在*HiLo.java*文件的顶部，在`public
    class HiLo`这一行之前，添加以下语句：
- en: import java.util.Scanner;
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: import java.util.Scanner;
- en: public class HiLo {
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: public class HiLo {
- en: This line imports the `Scanner` class and all its functionality from the main
    Java utilities package. The `Scanner` class includes functions like `nextLine()`
    to accept a line of input from the keyboard and `nextInt()` to turn text input
    from the keyboard into an integer number that can be compared or used in calculations.
    To use the `Scanner` class for keyboard input, we have to tell it to use the keyboard
    as its source.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行从Java的主工具包中导入了`Scanner`类及其所有功能。`Scanner`类包括像`nextLine()`这样的函数，用于接受来自键盘的输入行，以及`nextInt()`，它可以将来自键盘的文本输入转换为整数，以便与其他数据进行比较或用于计算。要使用`Scanner`类进行键盘输入，我们必须告诉它将键盘作为输入源。
- en: 'We want to do this before anything else in the program, so add this line of
    code inside the top of the `main()` method:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在程序的其他任何操作之前完成这一部分，所以请将此代码行放在`main()`方法的顶部：
- en: public class HiLo {
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: public class HiLo {
- en: public static void main(String[] args) {
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: public static void main(String[] args) {
- en: Scanner scan = new Scanner(System.*in*);
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Scanner scan = new Scanner(System.*in*);
- en: // Create a random number for the user to guess
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: // 为用户创建一个随机数进行猜测
- en: int theNumber = (int)(Math.*random*() * 100 + 1);
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: int theNumber = (int)(Math.*random*() * 100 + 1);
- en: This line creates a `Scanner` object called `scan` that pulls input from the
    computer’s keyboard, `System.in`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行创建了一个名为`scan`的`Scanner`对象，它从计算机的键盘输入中获取数据，来源是`System.in`。
- en: 'Although this new line of code sets up the `scan` object, it doesn’t actually
    ask for input yet. To get the user to type in a guess, we’ll need to prompt them
    by asking them to enter a number. Then, we’ll take the number they enter from
    the keyboard and store it in a variable that we can compare against `theNumber`,
    the computer’s original random number. Let’s call the variable that will store
    the user’s guess something easy to remember, like `guess`. Add the following line
    next:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这一新代码行设置了`scan`对象，但它尚未实际要求输入。为了让用户输入一个猜测，我们需要通过提示用户输入一个数字来引导他们。然后，我们将他们从键盘输入的数字存储在一个变量中，这样就可以与`theNumber`（计算机生成的原始随机数）进行比较。我们可以将存储用户猜测的变量命名为一个易于记住的名字，比如`guess`。接下来添加以下代码：
- en: public static void main(String[] args) {
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: public static void main(String[] args) {
- en: Scanner scan = new Scanner(System.*in*);
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Scanner scan = new Scanner(System.*in*);
- en: // Create a random number for the user to guess
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: // 为用户创建一个随机数进行猜测
- en: int theNumber = (int)(Math.*random*() * 100 + 1);
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: int theNumber = (int)(Math.*random*() * 100 + 1);
- en: System.*out*.println( theNumber );
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: System.*out*.println( theNumber );
- en: int guess = 0;
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: int guess = 0;
- en: This statement both *declares* a variable called `guess` of type `int` (an integer
    in Java), and it *initializes* the `guess` variable to a starting value of `0`.
    Some programming languages require a variable to be declared and then initialized
    in separate lines of code, but Java allows programmers to include both the declaration
    and initialization of variables in a single line. Java requires every variable
    to be declared with a specific *type*, or kind of information it should store.
    The user’s guess will be a whole number, so we’ve declared `guess` as an `int`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这条语句既*声明*了一个名为`guess`的`int`类型变量（Java中的整数），又*初始化*了`guess`变量，赋初值为`0`。某些编程语言要求变量必须在不同的代码行中声明和初始化，但Java允许程序员在同一行中同时完成变量的声明和初始化。Java要求每个变量都必须声明一个特定的*类型*，即它应该存储的信息种类。用户的猜测将是一个整数，所以我们将`guess`声明为`int`类型。
- en: 'Next, we need to prompt the user to enter a guess. We can let the user know
    the program is ready for input by printing a line of text to the console window
    (or command line). We access this text-based screen as a part of our computer
    system through the `System` class, just like we did for keyboard input. But this
    time, we want to *output* information for the user to read. The object that lets
    us access the command line console for output is `System.out`. Similar to the
    `System.in` object that allows us to receive text input from the keyboard, `System.out`
    gives us the ability to output text to the screen. The specific function to print
    a line of text is the `println()` command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要提示用户输入一个猜测。我们可以通过打印一行文本到控制台（或命令行）来告诉用户程序已准备好接收输入。我们通过`System`类访问这个文本屏幕，就像我们在接收键盘输入时做的那样。但这一次，我们要*输出*信息供用户阅读。让我们访问命令行控制台进行输出的对象是`System.out`。与允许我们从键盘接收文本输入的`System.in`对象类似，`System.out`使我们能够将文本输出到屏幕上。打印一行文本的具体函数是`println()`命令：
- en: int guess = 0;
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: int guess = 0;
- en: System.*out*.println("Guess a number between 1 and 100:");
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: System.*out*.println("猜一个介于1和100之间的数字：");
- en: Here we are using *dot notation*, which lists a class or object, followed by
    a dot and then a method or an attribute of that class or object. Methods need
    to be called with dot notation to tell Java which object or class they belong
    to; for example, `Math.random()`. *Attributes* are the values stored in an object
    or class.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们使用*点表示法*，列出一个类或对象，后跟一个点，然后是该类或对象的方法或属性。方法需要使用点表示法调用，以告诉Java它们属于哪个对象或类；例如，`Math.random()`。*属性*是存储在对象或类中的值。
- en: For example, `System` is a class representing your computer system. `System.out`
    is the command line screen object contained in the `System` class, because your
    computer monitor is part of your overall computer system. `System.out.println()`
    is a method to print a line of text using the `System.out` object. We’ll get more
    practice using dot notation as we continue.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`System`是代表您计算机系统的类。`System.out`是包含在`System`类中的命令行屏幕对象，因为您的计算机显示器是整个计算机系统的一部分。`System.out.println()`是使用`System.out`对象打印一行文本的方法。随着我们继续学习，我们会更多地练习使用点表示法。
- en: 'Now that the user knows what kind of input the program is expecting from them,
    it’s time to check the keyboard for their guess. We’ll use the `Scanner` object
    called `scan` that we created earlier. Scanners have a method called `nextInt()`
    that looks for the next `int` value the user inputs from the keyboard. We’ll store
    the user’s guess in the variable `guess` that we created earlier:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用户知道程序希望他们输入什么样的输入，是时候检查键盘获取他们的猜测了。我们将使用之前创建的名为`scan`的`Scanner`对象。扫描仪有一个名为`nextInt()`的方法，用于查找用户从键盘输入的下一个`int`值。我们将用户的猜测存储在之前创建的变量`guess`中：
- en: System.out.println("Guess a number between 1 and 100:");
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println("Guess a number between 1 and 100:");
- en: guess = scan.nextInt();
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: guess = scan.nextInt();
- en: This statement will wait for the user to type something into the console window
    (hopefully a whole number between 1 and 100—we’ll see how to make sure the user
    enters a valid number in [Chapter 3](ch3.xhtml#ch3)) and press ENTER. The `nextInt()`
    method will take the string of text characters the user entered (`"50"`, for example),
    turn it into the correct numeric value (`50`), and then store that number in the
    variable `guess`. Take a moment to save the changes you’ve made so far.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句将等待用户在控制台窗口中键入一些内容（希望是1到100之间的整数——我们将看到如何确保用户输入有效数字的方法在[第3章](ch3.xhtml#ch3)）。`nextInt()`方法将获取用户输入的文本字符串（例如`"50"`），将其转换为正确的数值（`50`），然后将该数字存储在变量`guess`中。请花一点时间保存您迄今为止所做的更改。
- en: '*Making the Program Print Output*'
  id: totrans-96
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*使程序打印输出*'
- en: 'We can also check to make sure our program is working so far by adding another
    `println()` statement:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过添加另一个`println()`语句来检查我们的程序是否到目前为止正在工作：
- en: guess = scan.nextInt();
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: guess = scan.nextInt();
- en: System.*out*.println("You entered " + guess + ".");
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: System.*out*.println("You entered " + guess + ".");
- en: This line uses the `System.out.println()` method again, but now we’re combining
    text and numeric output. If the user guesses `50`, we want the output to read,
    `"You entered 50."` To make this happen, we form a `println()` statement that
    mixes text with the number stored in the variable `guess`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此行再次使用了`System.out.println()`方法，但现在我们结合了文本和数字输出。如果用户猜测`50`，我们希望输出显示为`"You entered
    50."` 为了实现这一点，我们形成一个混合文本和存储在变量`guess`中的数字的`println()`语句。
- en: Java allows us to concatenate strings of text using the `+` operator. We use
    double quotation marks to specify the text we want to output first (`"You entered
    "`). Note the space before the closing quotation marks—this tells th program that
    we want a space to appear in the printed output after the last word. Java ignores
    most spacing, but when a space is included inside the quotation marks of a string
    of text, it becomes part of that text.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Java 允许我们使用`+`运算符连接文本字符串。我们使用双引号来指定我们想要首先输出的文本（`"You entered "`）。请注意在闭引号前的空格——这告诉程序我们希望在输出的最后一个单词后显示一个空格。Java
    忽略大多数空格，但当空格包含在文本字符串的引号内时，它会成为该文本的一部分。
- en: We also want to print the number the user guessed. We’ve stored this value in
    the variable called `guess`, so we just have to use the `println()` statement
    to output that value. Fortunately, in Java, when you include a variable in a `println()`
    statement, Java prints the value contained in that variable. So, immediately after
    the text `"You entered "`, we add the concatenation operator (`+`) followed by
    the variable name `guess`. Finally, we want to end the sentence with a period,
    so we use another concatenation operator followed by the text we want, contained
    in double quotation marks, so it looks like `"."`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还想打印出用户猜的数字。我们将这个值存储在名为`guess`的变量中，所以我们只需要使用`println()`语句来输出该值。幸运的是，在Java中，当你在`println()`语句中包含一个变量时，Java会打印出该变量中包含的值。因此，在文本`"You
    entered "`之后，我们添加连接运算符（`+`）并紧跟变量名`guess`。最后，我们希望句子以句号结束，所以再使用一个连接运算符，并跟上我们想要的文本，包含在双引号中，像这样`"."`。
- en: '[Listing 2-3](ch2.xhtml#ch2list3) puts together all of our lines of code so
    far.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 2-3](ch2.xhtml#ch2list3)将我们目前的所有代码行结合在一起。'
- en: import java.util.Scanner;
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: import java.util.Scanner;
- en: public class HiLo {
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: public class HiLo {
- en: public static void main(String[] args) {
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: public static void main(String[] args) {
- en: Scanner scan = new Scanner(System.in); // Create a random number for the user
    to guess
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Scanner scan = new Scanner(System.in); // 为用户生成一个随机数字以供猜测
- en: int theNumber = (int)(Math.random() * 100 + 1);
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: int theNumber = (int)(Math.random() * 100 + 1);
- en: ➊ // System.out.println( theNumber );
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ // System.out.println( theNumber );
- en: int guess = 0;
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: int guess = 0;
- en: System.out.println("Guess a number between 1 and 100:");
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println("猜一个介于1和100之间的数字：");
- en: guess = scan.nextInt();
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: guess = scan.nextInt();
- en: System.out.println("You entered " + guess + ".");
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println("你输入了 " + guess + ".");
- en: '}'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '*Listing 2-3: The code to this point generates a random number and allows the
    user to guess once.*'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 2-3：截至目前的代码生成一个随机数字，并允许用户猜一次。*'
- en: At ➊, note that I turned `System.out.println( theNumber );` into a comment by
    adding a pair of forward slashes to the start of that line. This is called *commenting
    out*, and it’s a useful technique for *debugging*—finding and fixing bugs or errors
    in programs. We used this `println()` statement earlier to show the value of the
    variable `theNumber` while we were writing and testing the program. Now, rather
    than deleting the line entirely, we can turn it into a comment so it’s ignored
    by the computer. If we want to use that line again, we can just remove the `//`
    to include it in the program.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，请注意我通过在该行的开头添加一对斜杠将`System.out.println( theNumber );`变成了注释。这叫做*注释掉*，它是一个有用的*调试*技术——在程序中查找并修复错误或问题。我们在编写和测试程序时，曾使用过这个`println()`语句来显示变量`theNumber`的值。现在，我们不删除这行，而是将它转化为注释，让计算机忽略它。如果我们想再次使用那行代码，只需去掉`//`即可将它包含在程序中。
- en: Now let’s save our program and run it to see how it works so far. To run it,
    press the green run button or go to **Run** ▸ **Run**. Right now, the user can
    guess only once and the program doesn’t check whether they guessed correctly.
    So next, we’ll add some code so that the user can guess more than one time, and
    then we’ll learn how to test each guess against `theNumber`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们保存程序并运行它，看看到目前为止它是如何工作的。要运行它，按下绿色的运行按钮或前往**运行** ▸ **运行**。现在，用户只能猜一次，而且程序不会检查他们是否猜对了。所以接下来，我们将添加一些代码，让用户可以猜多次，然后我们将学习如何将每次猜测与`theNumber`进行比较。
- en: 'Loops: Ask, Check, Repeat'
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 循环：询问、检查、重复
- en: To give the user more than one chance to guess the number, we need to learn
    how to build a loop! In the guessing game program, we need to ask the user for
    a guess until they guess correctly. *Loops* give us the ability to repeat a set
    of steps over and over. In this section, we’ll build a loop for the steps that
    prompt the user for a guess and accept the keyboard input.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让用户有更多机会猜测数字，我们需要学习如何构建一个循环！在猜数字游戏程序中，我们需要不断询问用户，直到他们猜对为止。*循环*使我们能够反复执行一组步骤。在本节中，我们将构建一个循环，用于提示用户输入猜测并接受键盘输入。
- en: Loops are very powerful programming tools, and they’re one of the reasons computers
    are so valuable in our daily lives and in the business world—computers are really
    good at repeating the same task predictably. And, if they’re programmed correctly,
    they can do this all day, every day, without making mistakes. You or I might get
    tired of telling someone their guess is too high or too low, but the computer
    never does. It will also never forget the number or tell the player their guess
    is too low or too high when it’s actually not.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 循环是非常强大的编程工具，它们也是计算机在我们日常生活和商业世界中如此有价值的原因之一——计算机非常擅长按可预测的方式重复同样的任务。而且，如果它们被正确编程，它们可以每天、全天候地完成这些任务，且不会出错。你我可能会厌倦告诉别人他们的猜测太高或太低，但计算机永远不会厌倦。它也永远不会忘记数字，或者在数字实际上不高或不低时，告诉玩家他们的猜测太低或太高。
- en: Let’s tap into the power of loops with a `while` loop. A `while` loop repeats
    a set of statements as long as some *condition* is true. A condition is just something
    we can test. For example, in this program, we want to know whether the user correctly
    guessed the secret number. If they didn’t guess correctly, we want to keep giving
    them a chance to guess again until they get it right.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过`while`循环来发挥循环的强大功能。`while`循环只要某个*条件*为真，就会重复执行一组语句。条件就是我们可以测试的内容。例如，在这个程序中，我们想知道用户是否正确猜中了秘密数字。如果他们没有猜对，我们希望给他们继续猜的机会，直到他们猜对为止。
- en: To write a `while` loop, we need to know what condition we want to test for
    before repeating the loop each time. In the guessing game, we want the user to
    guess again as long as their `guess` isn’t equal to the secret number `theNumber`.
    When the user’s guess is equal to the secret number, the user wins and the game
    is over, so the loop should stop.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写一个`while`循环，我们需要知道在每次重复循环之前想要测试的条件是什么。在猜数字游戏中，我们希望用户只要猜错了，就能继续猜，直到他们猜对为止。当用户猜对了数字时，游戏结束，因此循环应该停止。
- en: 'To create a `while` loop, we need to insert a `while` statement before the
    last three lines of code and then wrap the three lines for guessing inside a new
    pair of braces, as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个`while`循环，我们需要在最后三行代码之前插入一个`while`语句，然后将猜数字的三行代码用一对新的大括号括起来，如下所示：
- en: int guess = 0;
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: int guess = 0;
- en: while (guess != theNumber) {
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: while (guess != theNumber) {
- en: System.out.println("Guess a number between 1 and 100:");
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println("猜一个介于 1 和 100 之间的数字：");
- en: guess = scan.nextInt();
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: guess = scan.nextInt();
- en: System.out.println("You entered " + guess + ".");
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println("你输入了 " + guess + "。");
- en: '}'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: We use the keyword `while` to let Java know we’re building a `while` loop, and
    then we put the appropriate condition inside parentheses. The part inside the
    parentheses, `guess != theNumber`, means that while the value stored in `guess`
    is not equal to (`!=`) the value stored in `theNumber`, the loop should repeat
    whatever statement or set of statements immediately follow this line of code.
    The `!=` operator is a *comparison operator*—in this case, it compares `guess`
    and `theNumber` and evaluates whether they’re different, or *not equal*. You’ll
    learn about other comparison operators in the next section, but this is the one
    we need for the guessing `while` loop.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用关键字`while`来让 Java 知道我们正在构建一个`while`循环，然后将适当的条件放在括号内。括号内的部分`guess != theNumber`表示，当`guess`的值不等于（`!=`）`theNumber`的值时，循环应该重复紧接在这行代码后的语句。`!=`运算符是一个*比较运算符*——在这种情况下，它比较`guess`和`theNumber`，并评估它们是否不同，或*不相等*。你将在下一节中学习到其他比较运算符，但这是我们在猜数字`while`循环中需要的运算符。
- en: We need to tell Java what statements to repeat in the `while` loop, so I’ve
    added an opening brace, `{`, after the `while` statement. In the same way that
    braces group all the statements together in the `main()` method, these braces
    group statements together inside the `while` loop.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要告诉 Java 在`while`循环中重复哪些语句，因此在`while`语句后面添加了一个左大括号`{`。就像大括号将所有语句组合在`main()`方法中一样，这些大括号将语句组合在`while`循环内部。
- en: There are three statements that we want to include inside the loop. First we
    need the `println()` statement that prompts the user to guess a number. Then we
    need the statement that scans the keyboard and records the guess with the `nextInt()`
    method. Finally, we need the `println()` statement that tells the user what they
    entered. To turn this set of statements into a block of code that will be run
    repeatedly in the `while` statement, we write the `while` statement and condition
    first, then an opening brace, then all three statements, and finally, a closing
    brace. Don’t forget the closing brace! Your program won’t run if it’s missing.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在循环中包括三条语句。首先，我们需要一个 `println()` 语句来提示用户猜一个数字。然后，我们需要一个语句来扫描键盘并通过 `nextInt()`
    方法记录猜测。最后，我们需要一个 `println()` 语句来告诉用户他们输入的是什么。为了将这组语句转换成在 `while` 语句中反复执行的代码块，我们首先编写
    `while` 语句和条件，然后加上一个左大括号，接着是所有三条语句，最后加上右大括号。不要忘记右大括号！如果缺少，程序将无法运行。
- en: One good programming practice that will help you keep your code organized and
    readable is using tab spacing correctly. Highlight the three statements inside
    the braces for the `while` statement and then press the TAB key to indent them.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的编程习惯是正确使用制表符缩进，这有助于你保持代码的组织性和可读性。选中 `while` 语句中大括号内的三条语句，然后按下 TAB 键进行缩进。
- en: 'The result should look like the following code:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应该像下面的代码一样：
- en: int guess = 0;
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: int guess = 0;
- en: while (guess != theNumber) {
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: while (guess != theNumber) {
- en: System.out.println("Guess a number between 1 and 100:");
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println("猜一个介于 1 到 100 之间的数字：");
- en: guess = scan.nextInt();
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: guess = scan.nextInt();
- en: System.out.println("You entered " + guess + ".");
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println("你输入的数字是 " + guess + "。");
- en: '} }'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '} }'
- en: '}'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: Correct indentation will help you remember to match up your opening and closing
    braces, and it will help you quickly see which statements are inside a loop or
    other block of code, as well as which statements are outside the loop. Indentation
    doesn’t affect how your program runs, but if done well, it makes your program
    much easier to read and maintain.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的缩进将帮助你记住匹配开括号和闭括号，同时也能帮助你快速看到哪些语句在循环或其他代码块中，哪些语句在循环外。缩进不会影响程序的运行，但如果做得好，它会使你的程序更易读和易于维护。
- en: Save your program now and run it to check that it works. The game is almost
    playable now, but we still need to tell the program to check if the user’s guess
    is too high, too low, or just right. Time for (drum roll, please . . .) `if` statements!
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在保存程序并运行它，检查它是否能正常工作。游戏差不多可以玩了，但我们仍然需要告诉程序检查用户的猜测是太高、太低还是正好。是时候使用（鼓声请…）`if`
    语句了！
- en: '*if Statements: Testing for the Right Conditions*'
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*if 语句：测试正确的条件*'
- en: Now that the user is able to guess until they are correct, we need to check
    the guess to let them know whether they were too high or too low. The statement
    that allows us to do this is the `if` statement.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用户可以一直猜，直到猜对为止，我们需要检查猜测，以便告诉他们是否太高或太低。让我们实现这一功能的语句是 `if` 语句。
- en: An `if` statement will select whether to run a block of statements once or not
    at all based on a condition, or a *conditional expression*.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`if` 语句将根据条件或*条件表达式*选择是否运行一组语句一次或完全不运行。'
- en: 'We used a conditional expression before in the guessing loop: `(guess != theNumber)`.
    To check whether a guess is too high or too low, we just need a few more comparison
    operators: less than (`<`), greater than (`>`), and equal to (`==`).'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前在猜测循环中使用了一个条件表达式：`(guess != theNumber)`。为了检查猜测是太高还是太低，我们只需要一些额外的比较运算符：小于（`<`）、大于（`>`）和等于（`==`）。
- en: 'First, instead of just telling the user what their guess was, let’s write some
    code to check whether their guess was too low. Replace the last line of the `while`
    statement with the following two-line `if` statement:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们不只是告诉用户他们的猜测是什么，而是编写一些代码来检查他们的猜测是否太低。用以下两行 `if` 语句替换 `while` 语句的最后一行：
- en: while (guess != theNumber) {
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: while (guess != theNumber) {
- en: System.out.println("Guess a number between 1 and 100:");
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println("猜一个介于 1 到 100 之间的数字：");
- en: guess = scan.nextInt();
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: guess = scan.nextInt();
- en: if (guess < theNumber)
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: if (guess < theNumber)
- en: System.out.println(guess + " is too low. Try again.");
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(guess + " 太低了。请再试一次。");
- en: '}'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: The `if` statement begins with the keyword `if`, followed by a conditional expression
    in parentheses. In this case, the condition is `guess < theNumber`, which means
    the value of the user’s guess is less than the value of the random secret number.
    Notice there’s no semicolon after the parentheses, because the `println()` statement
    that follows is actually part of the `if` statement. The whole statement tells
    the program that if the condition is true, it should print the user’s guess and
    let them know they guessed too low. We use the concatenation operator (`+`) between
    the user’s guess and the string of text telling them the guess was too low. Note
    the space after the first double quote and before `is`. This separates the user’s
    guess from the word `is`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句以关键字`if`开始，后面跟着括号中的条件表达式。在这种情况下，条件是`guess < theNumber`，这意味着用户猜测的值小于随机生成的目标数字。请注意，括号后面没有分号，因为后面的`println()`语句实际上是`if`语句的一部分。整个语句告诉程序，如果条件为真，它应该打印用户的猜测并告知他们猜测太低了。我们在用户的猜测和告诉他们猜测太低的文本字符串之间使用了连接运算符（`+`）。注意在第一个双引号后和`is`前的空格。这将用户的猜测与单词`is`分开。'
- en: If you run the program now and enter a low guess, like `1`, the `if` statement
    should tell the program to say your guess is too low. That’s a good start, but
    what if we guess a number that’s too high instead? In that case, we need an `else`
    statement.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在运行程序并输入一个低的猜测，比如`1`，那么`if`语句应该告诉程序输出你的猜测太低了。这是一个好的开始，但如果我们猜的数字太高怎么办呢？在这种情况下，我们需要一个`else`语句。
- en: 'The `else` statement gives the program a way to choose an alternative path,
    or set of steps, if the condition in the `if` statement is not true. We can test
    for guesses that are too high or too low with an `if-else` statement pair. Let’s
    add an `else` statement right after the `if` statement:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`else`语句给程序提供了一种选择替代路径或步骤的方式，如果`if`语句中的条件不成立。我们可以通过一对`if-else`语句来测试猜测是否太高或太低。让我们在`if`语句之后添加一个`else`语句：'
- en: ➊ if (guess < theNumber)
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ if (guess < theNumber)
- en: System.out.println(guess + " is too low. Try again.");
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(guess + " 太低了。请再试一次。");
- en: ➋ else if (guess > theNumber)
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: ➋ else if (guess > theNumber)
- en: System.out.println(guess + " is too high. Try again.");
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(guess + " 太高了。请再试一次。");
- en: Notice that the code at ➋ looks similar to the code at ➊. Often when we’re using
    `if-else` statements, we need to check for multiple conditions in a row, instead
    of just one. Here, we need to check for a guess that’s too low, too high, or just
    right. In cases like this, we can chain `if-else` conditions together by placing
    the next `if` statement inside the `else` portion of the previous `if-else` statement.
    At ➋ we’ve begun the next `if` statement immediately after the `else` from the
    previous condition. If the guess is higher than the number, the program tells
    the user their guess is too high. Now that the program can tell the user if their
    guess is too high or too low, we just need to tell them if they guessed correctly
    and won!
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，➋的代码与➊的代码非常相似。通常当我们使用`if-else`语句时，我们需要检查多个条件，而不仅仅是一个条件。在这里，我们需要检查猜测是否太低、太高或刚好正确。在这种情况下，我们可以通过将下一个`if`语句放入前一个`if-else`语句的`else`部分，将`if-else`条件连接起来。在➋处，我们紧接着前一个条件的`else`开始了下一个`if`语句。如果猜测高于目标数字，程序会告诉用户他们的猜测太高了。现在，程序可以告诉用户他们的猜测是太高还是太低，我们只需要告诉他们是否猜对了并赢了！
- en: 'If neither of the previous conditions is true—the user’s guess is not too high
    and not too low—then they must have guessed the number. So we add one final `else`
    statement:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面的条件都不成立——即用户的猜测既不太高也不太低——那么他们一定猜对了。所以我们添加了最后一个`else`语句：
- en: ➊ if (guess < theNumber)
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ if (guess < theNumber)
- en: System.out.println(guess + " is too low. Try again.");
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(guess + " 太低了。请再试一次。");
- en: ➋ else if (guess > theNumber)
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: ➋ else if (guess > theNumber)
- en: System.out.println(guess + " is too high. Try again.");
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(guess + " 太高了。请再试一次。");
- en: ➌ else
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: ➌ else
- en: System.out.println(guess + " is correct. You win!");
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(guess + " 是正确的。你赢了！");
- en: Notice that we don’t need a conditional expression for this final `else` statement
    ➌. A correct guess is the only remaining option if the number is neither too high
    nor too low. In the case of a winning guess, we provide the statement to let the
    user know they’ve won. The full program up to this point is shown in [Listing
    2-4](ch2.xhtml#ch2list4). Save your *HiLo.java* file and run the program to check
    that it works. It should prompt you to enter guesses until you guess the correct
    number.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到我们在最后的 `else` 语句中不需要条件表达式 ➌。如果数字既不太高也不太低，那么猜对就是唯一的选项。在猜对的情况下，我们提供一条语句告诉用户他们赢了。到目前为止的完整程序显示在[列表
    2-4](ch2.xhtml#ch2list4)中。保存你的 *HiLo.java* 文件并运行程序，检查它是否正常工作。它应该会提示你输入猜测，直到你猜出正确的数字。
- en: import java.util.Scanner;
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: import java.util.Scanner;
- en: public class HiLo {
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: public class HiLo {
- en: public static void main(String[] args) {
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: public static void main(String[] args) {
- en: Scanner scan = new Scanner(System.in);
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: Scanner scan = new Scanner(System.in);
- en: // Create a random number for the user to guess
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: // 为用户创建一个随机数字来猜测
- en: int theNumber = (int)(Math.random() * 100 + 1); // System.out.println( theNumber
    );
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: int theNumber = (int)(Math.random() * 100 + 1); // System.out.println( theNumber
    );
- en: int guess = 0;
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: int guess = 0;
- en: while (guess != theNumber) {
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: while (guess != theNumber) {
- en: System.out.println("Guess a number between 1 and 100:");
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println("猜一个 1 到 100 之间的数字：");
- en: guess = scan.nextInt();
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: guess = scan.nextInt();
- en: if (guess < theNumber)
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: if (guess < theNumber)
- en: System.out.println(guess + " is too low. Try again.");
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(guess + " 太低了，再试一次。");
- en: else if (guess > theNumber)
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: else if (guess > theNumber)
- en: System.out.println(guess + " is too high. Try again.");
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(guess + " 太高了，再试一次。");
- en: else
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: else
- en: System.out.println(guess + " is correct. You win!");
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(guess + " 是正确的，你赢了！");
- en: '}  // End of while loop for guessing'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '}  // 猜数字的 while 循环结束'
- en: '}'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '*Listing 2-4: The Hi-Lo guessing game is complete for a single full round of
    play.*'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 2-4：Hi-Lo 猜数字游戏完成了一轮完整的游戏。*'
- en: The full program is now a completely playable guessing game! After the user
    wins, the program tells them that they guessed correctly and won, and then it
    ends, as shown in [Figure 2-6](ch2.xhtml#ch2fig6).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的程序现在已经是一个完全可玩的猜数字游戏！当用户猜对时，程序会告诉他们猜对了并且获胜，然后结束，如[图 2-6](ch2.xhtml#ch2fig6)所示。
- en: '![Image](../images/f0032-01.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0032-01.jpg)'
- en: '*Figure 2-6: One full play-through of the Hi-Lo guessing game—the program ends
    when the user guesses the secret number.*'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-6：Hi-Lo 猜数字游戏的一次完整游戏过程——程序在用户猜出秘密数字时结束。*'
- en: Give yourself a hand! You’ve built a program in Java from scratch, and if this
    is your first program ever in Java, you deserve some kudos. Enjoy the game for
    a few rounds and see if you can guess the number in fewer tries each time. Test
    your program to make sure it works the way you want, and we’ll add some improvements
    in the next section.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 给自己鼓掌！你已经从零开始编写了一个 Java 程序，如果这是你第一次编写 Java 程序，你值得一些赞扬。玩几轮游戏，看看你是否能每次用更少的尝试猜出数字。测试你的程序，确保它按照你希望的方式工作，我们将在下一节中添加一些改进。
- en: '*Adding a Play Again Loop*'
  id: totrans-198
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*添加一个重新开始游戏的循环*'
- en: Right now, the only way to play the guessing game again is to rerun the program
    in Eclipse. Fortunately, we already know there’s a way to make our program do
    something over and over again—we need another loop!
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，重新玩猜数字游戏的唯一方法是重新运行 Eclipse 中的程序。幸运的是，我们已经知道有一种方法可以让程序重复执行某些操作——我们需要另一个循环！
- en: 'The guessing game program ends when the user guesses the right number because
    there’s nothing after the `while` loop. The `while` loop ends when the condition
    `(guess != theNumber)` is no longer true. A user might want to play over and over
    once they get the hang of the game. For this play again loop, we’ll learn a new
    keyword and a new kind of loop: the `do-while` loop.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 猜数字游戏程序在用户猜对数字时结束，因为 `while` 循环后没有任何代码。如果条件 `(guess != theNumber)` 不再为真，`while`
    循环就会结束。一旦用户掌握了游戏，他们可能会想反复玩。为了实现这个重新玩的循环，我们将学习一个新关键字和一种新的循环方式：`do-while` 循环。
- en: Like the `while` loop, a `do-while` loop repeats a block of statements as long
    as a condition is true. Unlike the `while` loop, however, the block of code inside
    a `do-while` loop is guaranteed to run at least once. There are times when the
    condition at the top of a `while` loop may be false before the loop even starts,
    so the entire loop and all the lines of code inside it are ignored. Think of the
    condition of a `while` loop as being like a thermostat on a heater. If the temperature
    of the room is already warm enough and the condition for the heater to turn on
    isn’t met, the heater may not turn on at all.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 与`while`循环一样，`do-while`循环会在条件为真时重复执行一段语句块。然而与`while`循环不同的是，`do-while`循环内的代码块保证至少执行一次。有时，`while`循环顶部的条件可能在循环开始之前就已经为假，因此整个循环及其内的所有代码行都会被忽略。可以把`while`循环的条件想象成暖气的恒温器。如果房间的温度已经足够温暖，而启动暖气的条件没有被满足，暖气可能根本不会开启。
- en: For our guessing game, or almost any game program in general, we choose a `do-while`
    loop (we sometimes call this the *game loop*), because the user probably wants
    to play the game at least once. We also usually want to ask the user if they would
    like to play again, and the user typically responds yes or no (or `y` or `n` in
    a text-based game like this one). The game will continue to play through the game
    loop as long as the user responds with a yes.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的猜数字游戏，或者一般来说，几乎任何游戏程序，我们选择使用`do-while`循环（我们有时称之为*游戏循环*），因为用户可能至少想玩一次游戏。我们通常还希望询问用户是否想再玩一次，而用户通常会回答是或否（在像这样基于文本的游戏中，也可能是`y`或`n`）。只要用户回应“是”，游戏就会继续在游戏循环中进行。
- en: 'To check the user’s response, we’ll need a new type of variable: a `String`.
    Strings are objects that hold text within double quotation marks, like `"y"`,
    or `"yes"`, or `"My name is Bryson! I hope you like my game!"`. Earlier we used
    an integer variable, or `int` type, to hold the numbers the user was guessing,
    but now we need to hold text, so we’ll use a `String` instead. We can add a `String`
    variable to the top of the program, right after the `Scanner` setup:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查用户的回应，我们需要一个新的变量类型：`String`。字符串是一个对象，用来存储被双引号包围的文本，例如`"y"`、`"yes"`或`"My
    name is Bryson! I hope you like my game!"`。之前我们使用了一个整数变量，或者`int`类型，来存储用户猜的数字，但现在我们需要存储文本，所以我们将使用`String`类型。我们可以在程序的顶部，紧接着`Scanner`设置后，添加一个`String`变量：
- en: Scanner scan = new Scanner(System.in);
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Scanner scan = new Scanner(System.in);
- en: String playAgain = "";
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: String playAgain = "";
- en: Notice the `String` type begins with an uppercase `S`. This is because the `String`
    type is actually a class, complete with several useful functions for working with
    strings of text. I’ve named the variable `playAgain`, using camel case with a
    capital `A` to start the second word. Remember, no spaces are allowed in variable
    names. And, just like how we gave an initial value of `0` to the `guess` variable
    with `int guess = 0`, here we’ve given an initial value to the `playAgain` variable
    with `playAgain = ""`. The two double quotes, with no space between, indicate
    an empty string, or a `String` variable with no text in it. We’ll assign a different
    text value to the variable later, when the user enters `y` or `n`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`String`类型的首字母是大写的`S`。这是因为`String`类型实际上是一个类，里面包含了许多用于处理文本字符串的有用函数。我将变量命名为`playAgain`，采用了驼峰命名法，即第二个单词的首字母大写。记住，变量名中不能有空格。而且，就像我们用`int
    guess = 0`给`guess`变量初始化值一样，这里我们给`playAgain`变量赋了初始值`playAgain = ""`。两个双引号之间没有空格，表示一个空字符串，或者是一个没有文本内容的`String`变量。稍后，当用户输入`y`或`n`时，我们将给这个变量赋不同的文本值。
- en: Just as we did with the `while` loop, we’ll need to figure out which statements
    should be repeated in the `do-while` loop. The `do-while` loop will be our main
    loop, so almost all of the statements in the program will go inside it. In fact,
    all the remaining statements after the `Scanner` and `String playAgain` statements
    will be contained in the `do-while` loop. Those steps describe one full round
    of play, so for each round, the game repeats all of those steps again, from choosing
    a new random number to declaring a winning guess and asking the user to play again.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在`while`循环中做的那样，我们需要弄清楚在`do-while`循环中哪些语句应该被重复执行。`do-while`循环将是我们的主循环，因此几乎所有的语句都将放入其中。事实上，在`Scanner`和`String
    playAgain`语句之后的所有剩余语句都将包含在`do-while`循环中。这些步骤描述了一轮完整的游戏过程，因此每一轮游戏都会重复这些步骤，从选择一个新的随机数到宣布正确猜测并询问用户是否再玩一次。
- en: 'So, we can add the `do` keyword and an opening brace immediately after these
    two lines and before the code that creates the secret number:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以在这两行代码后立即添加 `do` 关键字和一个开括号，并在创建秘密数字的代码之前。
- en: Scanner scan = new Scanner(System.in);
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Scanner scan = new Scanner(System.in);
- en: String playAgain = "";
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: String playAgain = "";
- en: do {
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: do {
- en: // Create a random number for the user to guess
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: // 为用户生成一个随机数进行猜测
- en: int theNumber = (int)(Math.random() * 100 + 1);
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: int theNumber = (int)(Math.random() * 100 + 1);
- en: // System.out.println( theNumber );
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: // System.out.println( theNumber );
- en: int guess = 0;
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: int guess = 0;
- en: while (guess != theNumber) {
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: while (guess != theNumber) {
- en: Then, after the closing brace for the `while` loop for guessing and the brace
    following our last `else` statement, we’ll ask the user if they would like to
    play again and get their response from the keyboard.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在猜测的 `while` 循环的闭括号后面，以及最后一个 `else` 语句后的闭括号后，我们会询问用户是否想再次玩，并从键盘获取他们的回复。
- en: 'Then we need to close the `do-while` loop with a `while` condition to check
    whether the user replied with a yes:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要通过 `while` 条件来关闭 `do-while` 循环，以检查用户是否回复了 "yes"：
- en: '}   // End of while loop for guessing'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '}   // 猜测的 while 循环结束'
- en: ➊ System.out.println("Would you like to play again (y/n)?");
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ System.out.println("你想再玩一次吗（y/n）？");
- en: ➋ playAgain = scan.next();
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: ➋ playAgain = scan.next();
- en: ➌ } while (playAgain.equalsIgnoreCase("y"));
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: ➌ } while (playAgain.equalsIgnoreCase("y"));
- en: ➍ }
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: ➍ }
- en: ➎ }
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: ➎ }
- en: The prompt asks the user `"Would you like to play again (y/n)?"` ➊, to which
    they can reply with a single letter, `y` for yes or `n` for no. At ➋, the `scan.next()`
    function scans the keyboard for input, but instead of looking for the next integer
    as `nextInt()` does, it looks for the next character or group of characters that
    the user types on the keyboard. Whatever the user types will get stored in the
    variable `playAgain`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 提示会询问用户 "你想再玩一次吗（y/n）？" ➊，他们可以回复一个字母，`y` 表示是，`n` 表示否。在 ➋，`scan.next()` 函数扫描键盘输入，但与
    `nextInt()` 方法不同，它不是寻找下一个整数，而是寻找用户键盘上输入的下一个字符或字符组。无论用户输入什么，都将存储在变量 `playAgain`
    中。
- en: The line at ➌ closes the block of code that repeats the game with a brace, and
    it contains the `while` condition that determines whether the code will run again.
    Within the `while` condition, you can see an example of the `equals()` method
    of a `String` object. The `equals()` method tells you whether a string variable
    is exactly the same as another string of characters, and the `equalsIgnoreCase()`
    method tells you whether the strings are equal even if their capitalization is
    different. In our game, if the user wants to play again, they are asked to type
    `y`. However, if we just test for a lowercase `y`, we might miss an uppercase
    `Y` response. In this case, we want to be flexible by checking for the letter
    `y`, whether it is uppercase or lowercase, so we use the string method `equalsIgnoreCase()`.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➌ 这一行，代码块结束了，它包含了决定是否重新运行代码的 `while` 条件。在 `while` 条件中，你可以看到 `String` 对象的 `equals()`
    方法示例。`equals()` 方法告诉你一个字符串变量是否与另一个字符串完全相同，而 `equalsIgnoreCase()` 方法则会告诉你，即使字符串的大小写不同，两个字符串是否相等。在我们的游戏中，如果用户想再次玩，他们会被要求输入
    `y`。然而，如果我们只检测小写的 `y`，可能会忽略大写的 `Y` 响应。在这种情况下，我们希望通过检查字母 `y` 来提高灵活性，无论它是大写还是小写，所以我们使用了
    `equalsIgnoreCase()` 字符串方法。
- en: The final `while` statement tells Java to continue to do the game loop while
    the string variable `playAgain` is either an uppercase or lowercase `y`. The final
    two closing braces at ➍ and ➎ are the ones that were already in the program. The
    one at ➍ closes the `main()` method, and the one at ➎ closes the entire `HiLo`
    class. I’ve included them just to show where lines ➊ through ➌ should be inserted.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的 `while` 语句告诉 Java 只要字符串变量 `playAgain` 是大写或小写的 `y`，就继续执行游戏循环。位于 ➍ 和 ➎ 的最后两个闭括号就是程序中已经存在的那两个。
    ➊ 到 ➌ 的代码应该被插入到这两个括号之间。
- en: The complete game to this point is shown in [Listing 2-5](ch2.xhtml#ch2list5).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的游戏到此为止可以在[列表 2-5](ch2.xhtml#ch2list5)中查看。
- en: import java.util.Scanner;
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: import java.util.Scanner;
- en: public class HiLo {
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: public class HiLo {
- en: public static void main(String[] args) {
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: public static void main(String[] args) {
- en: Scanner scan = new Scanner(System.in);
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: Scanner scan = new Scanner(System.in);
- en: String playAgain = "";
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: String playAgain = "";
- en: do {
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: do {
- en: // Create a random number for the user to guess
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: // 为用户生成一个随机数进行猜测
- en: int theNumber = (int)(Math.random() * 100 + 1);
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: int theNumber = (int)(Math.random() * 100 + 1);
- en: // System.out.println( theNumber );
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: // System.out.println( theNumber );
- en: int guess = 0;
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: int guess = 0;
- en: while (guess != theNumber) {
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: while (guess != theNumber) {
- en: System.out.println("Guess a number between 1 and 100:");
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println("猜一个 1 到 100 之间的数字：");
- en: guess = scan.nextInt();
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: guess = scan.nextInt();
- en: if (guess < theNumber)
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 (guess < theNumber)
- en: System.out.println(guess + " is too low. Try again.");
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(guess + " 太低了。再试一次。");
- en: else if (guess > theNumber)
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 否则如果 (guess > theNumber)
- en: System.out.println(guess + " is too high. Try again.");
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(guess + " 太高了。再试一次。");
- en: else
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 否则
- en: System.out.println(guess + " is correct. You win!");
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(guess + " 是正确的。你赢了！");
- en: '}   // End of while loop for guessing'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '}   // 猜测循环结束'
- en: System.out.println("Would you like to play again (y/n)?");
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println("你想再玩一局吗（y/n）？");
- en: playAgain = scan.next();
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: playAgain = scan.next();
- en: '} while (playAgain.equalsIgnoreCase("y"));'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '} 直到 (playAgain.equalsIgnoreCase("y"));'
- en: '}'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '*Listing 2-5: The Hi-Lo guessing game is ready to play over and over again.*'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 2-5：Hi-Lo 猜数字游戏准备好可以反复进行。*'
- en: Review your code to make sure you’ve added everything in the correct place,
    check your braces and semicolons, and take a moment to save your file. We’ll test
    the game in the next section.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 检查你的代码，确保你已将所有内容放在正确的位置，检查大括号和分号，并花一点时间保存你的文件。我们将在下一节测试游戏。
- en: '**NOTE**'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Your indentation, which is the tab spacing at the beginning of each line,
    may not look exactly like the last code snippet because we’ve added braces in
    a couple of new places. Fortunately, adding new features, including loops and
    other blocks of code, is so common in Java that Eclipse has a menu option to clean
    up indentation automatically. First, select (highlight) all the text in your*
    HiLo.java *file on the screen. Then, go to* ***Source*** ▸ ***Correct Indentation***.
    *Eclipse will correctly indent each line of code to show which statements are
    meant to be grouped together. As I mentioned before, the indentation doesn’t matter
    to the computer (the program will run just fine even with* no *tabs or extra spaces),
    but good indentation and spacing help make the program easier to read.*'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '*你的缩进，即每行开头的制表符空格，可能看起来和最后一段代码不完全一样，因为我们在几个新位置添加了大括号。幸运的是，在 Java 中，添加新功能，包括循环和其他代码块，非常常见，Eclipse
    提供了一个菜单选项可以自动整理缩进。首先，选择（高亮）屏幕上所有的* HiLo.java *文件中的文本。然后，转到* ***Source*** ▸ ***Correct
    Indentation***。*Eclipse 会正确地缩进每一行代码，显示哪些语句应该被归为一组。如我之前提到的，缩进对计算机来说并不重要（即使没有制表符或额外的空格，程序仍然可以正常运行），但是良好的缩进和空格有助于提高程序的可读性。*'
- en: Testing the Game
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试游戏
- en: Now that the play again loop is in place, the game should run perfectly. First,
    save your *HiLo.java* file and choose **Run** ▸ **Run** to test the program. After
    you guess the first random number correctly, the program should ask you if you’d
    like to play again. As long as you respond `y` (or `Y`) and press ENTER, the program
    should keep giving you new random numbers to guess. In the screenshot in [Figure
    2-7](ch2.xhtml#ch2fig7), notice that the game starts over when I respond `y` to
    the prompt to play again.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，既然“再次游戏”循环已经设置好，游戏应该可以完美运行。首先，保存你的*HiLo.java*文件，并选择 **Run** ▸ **Run** 来测试程序。在你第一次正确猜出随机数后，程序应该会问你是否想再次游戏。只要你回答`y`（或`Y`）并按下
    ENTER，程序应该会继续给你新的随机数进行猜测。在[图 2-7](ch2.xhtml#ch2fig7)的截图中，注意到当我回答`y`时，游戏会重新开始。
- en: '![Image](../images/f0036-01.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0036-01.jpg)'
- en: '*Figure 2-7: The guessing game is fully playable for multiple rounds as long
    as the user answers y or Y*.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-7：只要用户回答 y 或 Y，猜数字游戏就可以进行多轮游戏。* '
- en: 'When the user finishes playing and responds to the play again question with
    `n`, or anything other than `y` or `Y`, the game will end. However, we might want
    to thank them for playing after they’ve finished the game. Add the following line
    after the final `while` statement, before the final two closing braces:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户玩完并用 `n` 或任何其他非 `y` 或 `Y` 的回答响应“再玩一次”问题时，游戏将结束。然而，我们可能想要在游戏结束后感谢他们参与。请在最后一个
    `while` 语句后，最后两个闭合大括号之前添加以下行：
- en: '} while (playAgain.equalsIgnoreCase("y"));'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '} 直到 (playAgain.equalsIgnoreCase("y"));'
- en: System.out.println("Thank you for playing! Goodbye.");
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println("感谢你的参与！再见。");
- en: '}'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: Finally, the last line we’ll add to the guessing game app is to address a warning
    you may have noticed in Eclipse. This warning appears as a faint yellow line under
    the declaration of the `scan` object, as well as a yellow triangle with an exclamation
    point to the left of that line. Eclipse is bringing to our attention that we’ve
    opened a resource that we haven’t closed. In programming, this can create what’s
    known as a *resource leak*. This doesn’t usually matter if we just open one `Scanner`
    object for keyboard input, but if we leave multiple `Scanner` objects open without
    closing them, the program could fill up memory, slowing or even crashing the user’s
    system. We use the `close()` method of the `Scanner` class to tell our program
    to close the connection to the keyboard.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将在猜数字游戏应用中添加最后一行代码，以处理你可能在 Eclipse 中看到的警告。这个警告会以一条淡黄色的线出现在 `scan` 对象声明的下方，并且该行左侧会有一个黄色的三角形和感叹号。Eclipse
    提醒我们，我们打开了一个资源，却没有关闭它。在编程中，这种情况可能会导致*资源泄漏*。如果我们只是打开一个 `Scanner` 对象来接收键盘输入，这通常没有问题，但如果我们打开了多个
    `Scanner` 对象而没有关闭它们，程序可能会填满内存，从而导致性能下降甚至崩溃。我们使用 `Scanner` 类的 `close()` 方法来告诉程序关闭与键盘的连接。
- en: 'Add the following line after the `println()` statement thanking the user for
    playing, before the final two closing braces:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `println()` 语句后，感谢用户参与游戏的输出语句之前，添加以下一行：
- en: System.out.println("Thank you for playing! Goodbye.");
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println("感谢你参与游戏！再见。");
- en: scan.close();
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: scan.close();
- en: '}'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: You’ll notice that the yellow warning disappears from the Eclipse editor window
    when we add this line. Eclipse helps with common programming errors like misspellings
    or missing punctuation, and it even warns us about problems that *could* occur
    like resource leaks and unused variables. As you build bigger, more complex applications
    in Java, these features of the IDE will become even more valuable. You can find
    more information on using Eclipse to debug your programs in the appendix.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，当我们添加这行代码后，Eclipse 编辑器窗口中的黄色警告消失了。Eclipse 能帮助我们发现常见的编程错误，比如拼写错误或缺少标点符号，甚至会警告我们可能会发生的问题，如资源泄漏和未使用的变量。在你构建更大、更复杂的
    Java 应用程序时，IDE 的这些功能将变得更加有价值。你可以在附录中找到更多使用 Eclipse 调试程序的信息。
- en: The finished program, shown in [Listing 2-6](ch2.xhtml#ch2list6), is a fully
    playable guessing game, complete with the option to play again and guess a new
    random number every game.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的程序，如[列表 2-6](ch2.xhtml#ch2list6)所示，是一个完全可玩的猜数字游戏，包含了重新开始并每次都猜一个新随机数字的选项。
- en: import java.util.Scanner;
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: import java.util.Scanner;
- en: public class HiLo {
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: public class HiLo {
- en: public static void main(String[] args) {
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: public static void main(String[] args) {
- en: Scanner scan = new Scanner(System.in);
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: Scanner scan = new Scanner(System.in);
- en: String playAgain = "";
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: String playAgain = "";
- en: do {
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: do {
- en: // Create a random number for the user to guess
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个随机数供用户猜测
- en: int theNumber = (int)(Math.random() * 100 + 1);
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: int theNumber = (int)(Math.random() * 100 + 1);
- en: // System.out.println( theNumber );
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: // System.out.println( theNumber );
- en: int guess = 0;
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: int guess = 0;
- en: while (guess != theNumber) {
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: while (guess != theNumber) {
- en: System.out.println("Guess a number between 1 and 100:");
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println("猜一个介于 1 到 100 之间的数字：");
- en: guess = scan.nextInt();
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: guess = scan.nextInt();
- en: if (guess < theNumber)
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: if (guess < theNumber)
- en: System.out.println(guess + " is too low. Try again.");
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(guess + " 太低了。再试一次。");
- en: else if (guess > theNumber)
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: else if (guess > theNumber)
- en: System.out.println(guess + " is too high. Try again.");
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(guess + " 太高了。再试一次。");
- en: else
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: else
- en: System.out.println(guess + " is correct. You win!");
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(guess + " 正确。你赢了！");
- en: '}  // End of while loop for guessing System.out.println("Would you like to
    play again (y/n)?");'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '}  // 猜测的 while 循环结束 System.out.println("你想再玩一次吗 (y/n)？");'
- en: playAgain = scan.next();
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: playAgain = scan.next();
- en: '} while (playAgain.equalsIgnoreCase("y"));'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '} while (playAgain.equalsIgnoreCase("y"));'
- en: System.out.println("Thank you for playing! Goodbye.");
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println("感谢你参与游戏！再见。");
- en: scan.close();
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: scan.close();
- en: '}'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '*Listing 2-6: The finished text-based, command line guessing game*'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 2-6：完成的基于文本的命令行猜数字游戏*'
- en: There are a few things worth noting about the finished Hi-Lo guessing game program.
    First, despite all the work in writing it, the code is relatively short—fewer
    than 30 lines long. Nevertheless, you could play it forever if you wanted to.
    Second, this program not only demonstrates conditions and looping, it also makes
    use of a loop inside another loop. This is called a *nested loop*, because the
    guessing loop is contained in, or nested inside, the play again loop. The indentation
    helps us see where the `do-while` loop begins and ends, and we can see the smaller
    `while` loop and its `if` statements tabbed over and nested inside the bigger
    `do-while` loop. Finally, we end the program neatly—both for the user, by thanking
    them for playing, and for the computer, by closing the scanner resource.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 有几点值得注意，关于完成的Hi-Lo猜数字游戏程序。首先，尽管编写了很多代码，但程序代码相对简短——不到30行。然而，如果你愿意，你可以一直玩下去。其次，这个程序不仅展示了条件判断和循环，它还使用了循环嵌套循环。这叫做*嵌套循环*，因为猜数字的循环被包含在另一个循环内，即重新开始游戏的循环。缩进帮助我们看到`do-while`循环的开始和结束，并且可以看到更小的`while`循环及其`if`语句被缩进并嵌套在更大的`do-while`循环内。最后，我们整洁地结束了程序——既为用户感谢他们的参与，也为计算机通过关闭扫描器资源来结束。
- en: What You Learned
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你所学到的
- en: While building a simple, fun, playable game, we’ve picked up several valuable
    programming concepts along the way. That’s the way I first learned how to code
    as a kid—I would find a fun game or graphical app, program it, then change it,
    take it apart, and try new things. Play and exploration are an important part
    of learning anything new, and I hope you’ll take a little time to try new things
    with each program. The programming challenges at the end of each chapter will
    also give you an opportunity to try a few new things.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建一个简单、有趣、可玩的游戏的过程中，我们学到了几个有价值的编程概念。这也是我小时候第一次学习编程的方式——我会找到一个有趣的游戏或图形应用程序，编写它，然后修改它，拆解它，尝试新的东西。玩耍和探索是学习任何新事物的重要部分，我希望你能花些时间在每个程序中尝试新事物。每章末尾的编程挑战也会给你提供一个尝试新事物的机会。
- en: 'In building this guessing game, we’ve developed a wide range of skills in Java:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建这个猜数字游戏的过程中，我们发展了许多Java技能：
- en: • Creating a new class, `HiLo`
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: • 创建一个新的类，`HiLo`
- en: • Importing an existing Java package, `java.util.Scanner`
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: • 导入现有的Java包，`java.util.Scanner`
- en: • Using a `Scanner` object to accept keyboard input
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: • 使用`Scanner`对象接收键盘输入
- en: • Declaring and initializing integer and string variables
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: • 声明和初始化整数和字符串变量
- en: • Generating a random number with `Math.random()` and casting it to an integer
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: • 使用`Math.random()`生成随机数并将其转换为整数
- en: • Using `while` and `do-while` loops to repeat a set of steps while a condition
    is true
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: • 使用`while`和`do-while`循环在条件为真时重复一组步骤
- en: • Printing text strings and variable values to the command line console
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: • 将文本字符串和变量值输出到命令行控制台
- en: • Scanning integers and strings from the keyboard and storing them in variables
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: • 从键盘扫描整数和字符串并将其存储到变量中
- en: • Testing various conditional expressions in `if` and `if-else` statements
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: • 测试`if`和`if-else`语句中的各种条件表达式
- en: • Using `String` methods to compare string values with `equalsIgnoreCase()`
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: • 使用`String`方法通过`equalsIgnoreCase()`比较字符串值
- en: • Closing input resources like `Scanner` objects with the `close()` method
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: • 使用`close()`方法关闭输入资源，如`Scanner`对象
- en: • Running a command line program from inside Eclipse
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: • 在Eclipse中运行命令行程序
- en: 'In addition to practical skills, you’ve also developed a working knowledge
    of several important programming concepts in Java:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 除了实际技能，你还掌握了Java中几个重要的编程概念：
- en: '**Variables** `theNumber` is an integer variable, or `int`, and so is `guess`.
    `playAgain` is a string variable, or `String`. We change the values of these variables
    as we play the game by entering new number guesses or answering `y` or `n`.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '**变量** `theNumber`是一个整数变量，或称`int`，`guess`也是一个`int`类型的变量。`playAgain`是一个字符串变量，或称`String`类型。我们通过输入新的数字猜测或回答`y`或`n`来改变这些变量的值，直到游戏结束。'
- en: '**Methods** Methods are what we call functions inside a class in Java. `Math.random()`
    is a method for generating random numbers between 0.0 and 1.0\. The `scan.nextInt()`
    method accepts numeric input from the user. `System.out.println()` is a function
    for displaying text to the console or terminal window.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '**方法** 方法是我们在Java类中称为函数的东西。`Math.random()`是一个生成介于0.0和1.0之间的随机数的方法。`scan.nextInt()`方法接受用户输入的数字。`System.out.println()`是一个用于将文本显示到控制台或终端窗口的函数。'
- en: '**Conditionals** The `if-else` statements allow us to test whether a condition,
    like `guess < theNumber`, is true and run a different block of code depending
    on the outcome of that test. We also use conditional expressions to determine
    whether to perform a loop again, as in the statement `while (guess != theNumber)`.
    This statement will loop as long as `guess` is not equal to `theNumber`. Remember
    the test for “is equal to” is the double equal sign: `==`.'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '**条件语句** `if-else` 语句允许我们测试某个条件，如 `guess < theNumber`，并根据测试结果运行不同的代码块。我们还使用条件表达式来判断是否再次执行循环，例如
    `while (guess != theNumber)` 语句。只要 `guess` 不等于 `theNumber`，这个语句就会继续循环。记住，测试“是否相等”的符号是双等号：`==`。'
- en: '**Loops** A `while` loop lets us repeat a block of code as long as a condition
    is true. We used a `while` loop in the guessing game to keep asking the user for
    another guess until they got the right number. A `do-while` loop always runs at
    least once, and we used one to ask the user if they wanted to play again.'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '**循环语句** `while` 循环让我们在条件为真时重复执行一段代码。在猜数字游戏中，我们使用了一个 `while` 循环，持续让用户猜测，直到猜中正确的数字。`do-while`
    循环至少会执行一次，我们用它来询问用户是否愿意再玩一次。'
- en: '**Classes** The whole HiLo app is a Java class, `public class HiLo`. A class
    is a template. Now that we’ve built a class template for the HiLo guessing game,
    we can reuse it to play the guessing game across many different computers. We
    also imported the `Scanner` and `Math` classes in this app to accept user input
    and generate random numbers. We’ll write our own classes to do something new,
    and we’ll take advantage of the classes already included in Java to do everyday
    tasks like input, math, and more.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '**类** 整个HiLo应用程序是一个Java类，`public class HiLo`。类是一个模板。现在我们已经为HiLo猜数字游戏构建了一个类模板，我们可以在不同的计算机上重用它来玩这个游戏。我们还在这个应用程序中导入了
    `Scanner` 和 `Math` 类来接受用户输入并生成随机数字。我们将编写自己的类来实现新的功能，并利用Java中已经包含的类来处理日常任务，如输入、数学运算等。'
- en: Programming Challenges
  id: totrans-324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编程挑战
- en: Try these programming challenges to review and practice what you’ve learned
    and to expand your programming skills. If you get stuck, you can visit the book’s
    website at *[https://www.nostarch.com/learnjava/](https://www.nostarch.com/learnjava/)*
    to download sample solutions, or you can watch this lesson in the video course
    online at *[http://www.udemy.com/java-the-easy-way/](http://www.udemy.com/java-the-easy-way/)*
    for step-by-step solutions. [Chapter 2](ch2.xhtml#ch2) is free to preview, and
    you can use the coupon code BOOKHALFOFF to save 50 percent when you buy the full
    course.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试这些编程挑战来复习和实践你所学的内容，并扩展你的编程技能。如果你遇到困难，可以访问本书的网站 *[https://www.nostarch.com/learnjava/](https://www.nostarch.com/learnjava/)*
    下载示例解答，或者可以在 *[http://www.udemy.com/java-the-easy-way/](http://www.udemy.com/java-the-easy-way/)*
    在线视频课程中观看本课，获取逐步解决方案。[第2章](ch2.xhtml#ch2)可以免费预览，你还可以使用优惠码 BOOKHALFOFF 在购买完整课程时节省50%的费用。
- en: '*#1: Expanding Your Range*'
  id: totrans-326
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*#1：扩展你的范围*'
- en: For this first programming challenge, change the guessing game to use a bigger
    range of numbers. Instead of 1 to 100, try having the user guess between −100
    and 100!
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个第一次编程挑战，将猜数字游戏的数字范围扩大。将范围从1到100改为从−100到100，让用户猜测这个范围内的数字！
- en: '**HINT**'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: '*Multiply Math.random() by 200 and subtract 100 from the result.*'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '*将 Math.random() 乘以200，然后从结果中减去100。*'
- en: Remember to change *both* the programming statement that generates the random
    number *and* the prompt that tells the user the range they should guess between.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 记得同时更改生成随机数字的*编程语句*和提示用户猜测范围的*提示语*。
- en: If you want an easier game, you can change the range from 1 to 10 and wow your
    friends when you can guess the secret number in just four tries. Try other ranges,
    like 1 to 1,000, or even 1 to 1,000,000, or use negative ranges if you want! (Remember
    that you can’t use commas when writing the number in Java.) You’ll not only get
    better at programming but also improve your math skills. Change the program however
    you’d like and have fun with it!
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想玩一个更简单的游戏，可以将范围改为1到10，并在仅用四次尝试就猜出秘密数字时，给朋友们留下深刻印象。试试其他范围，如1到1,000，甚至1到1,000,000，或者如果你愿意的话，使用负数范围！(记住，在Java中编写数字时不能使用逗号。)
    你不仅能提高编程技能，还能提升你的数学能力。随心所欲地修改程序，享受其中的乐趣！
- en: '**STRATEGIZE YOUR GUESSES**'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '**制定你的猜测策略**'
- en: You may discover that the more you play the guessing game, the faster you’ll
    be able to guess the secret number. You might even stumble onto the fact that
    you can guess the number fastest by guessing in the middle of a range with each
    new guess. This technique is called a *binary search*. Guessing a number in the
    middle of the possible range cuts the number of possibilities in half each time.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现，玩得越多，猜数字的速度就越快。你甚至可能意识到，通过每次猜测在一个范围的中间位置进行猜测，你能最快猜到那个秘密数字。这种技巧叫做*二分查找*。每次在可能的范围中间猜一个数字，就能将可能性数量减少一半。
- en: Here’s how it works. For a number from 1 to 100, guess 50\. If that’s too low,
    you know the secret number must be between 51 and 100, so guess 75, right in the
    middle of this range. If that’s too low, try a number halfway between 76 and 100,
    which would be 87\. One reason the binary search is so valuable is that we can
    reduce the number of guesses to just seven tries (or fewer) to find a secret number
    between 1 and 100, every time. Try it out!
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 它是这样工作的。对于1到100之间的数字，猜50。如果它太小，你就知道秘密数字必须在51到100之间，那么猜75，就在这个范围的中间。如果它仍然太小，试试76到100之间的中间数字，即87。二分查找之所以如此有价值的一个原因是，我们可以将猜测次数减少到七次（或更少），每次都能找出1到100之间的秘密数字。试试看！
- en: When you get the hang of guessing a number between 1 and 100 in seven tries
    or less, try guessing a number from 1 to 1,000 in just 10 tries. If you’re really
    brave (and have a pencil nearby), try guessing a number from 1 to 1,000,000\.
    Believe it or not, it should take you just 20 guesses.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 当你习惯于在七次或更少的尝试中猜出一个介于1到100之间的数字时，试着在仅10次尝试内猜一个介于1到1,000之间的数字。如果你真的很勇敢（并且手边有一支铅笔），尝试猜一个介于1到1,000,000之间的数字。信不信由你，你只需要20次尝试。
- en: '*#2: Counting Tries*'
  id: totrans-336
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*#2: 计算尝试次数*'
- en: 'We’ve already built a pretty cool guessing game app, but let’s try adding one
    more feature to the game. Your challenge is to count and report how many tries
    it takes the user to guess the secret number. It could look something like the
    following:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经构建了一个相当酷的猜数字游戏应用程序，但让我们试着为游戏添加一个新功能。你的挑战是统计并报告用户猜中秘密数字需要多少次尝试。它看起来可能是这样的：
- en: 62 is correct! You win!
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 62 是正确的！你赢了！
- en: It only took you 7 tries! Good work!
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 你只用了7次尝试！做得好！
- en: To accomplish this task, you’ll need to create a new variable (you might add
    a line like `int numberOfTries = 0;`), and you’ll have to add to the number of
    tries every time the guessing loop executes. You can do this by increasing the
    variable `numberOfTries` by one for each new loop using `numberOfTries = numberOfTries
    + 1`. Be sure to include text to let the user know the number of tries.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个任务，你需要创建一个新的变量（你可以添加像 `int numberOfTries = 0;` 这样的代码行），并且每次猜测循环执行时，你都需要增加尝试次数。你可以通过每次新的循环使用
    `numberOfTries = numberOfTries + 1` 来增加 `numberOfTries` 的值。务必包括一些文本，让用户知道尝试的次数。
- en: It may take a few tries to get all the code working in the right order at the
    right time, but it’s worth the effort and will help you practice your new skills.
    In [Chapter 3](ch3.xhtml#ch3), we’ll build this feature into a different version
    of the guessing game. In the meantime, I hope you’ll come up with even more ideas
    for improving and changing the game. Playing with your programs, taking them apart,
    and rebuilding them can be the best way to learn.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 可能需要几次尝试才能将所有代码按正确的顺序和时间顺利运行，但这是值得的努力，也有助于你练习新学到的技能。在[第3章](ch3.xhtml#ch3)，我们会将这个功能添加到猜数字游戏的另一个版本中。与此同时，我希望你能想出更多改进和修改游戏的创意。玩你的程序，拆解它们，再重新构建它们，可能是学习的最佳方式。
- en: '*#3: Playing MadLibs*'
  id: totrans-342
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*#3: 玩疯狂填词游戏（MadLibs）*'
- en: For your final challenge in this chapter, let’s write a completely new program.
    We’ve learned how to ask a user for input and store it in a variable. We’ve also
    learned how to print out both text and variable values to the screen. With those
    skills, you can build even more interesting and fun programs.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最终挑战中，让我们编写一个全新的程序。我们已经学会了如何请求用户输入并将其存储在变量中。我们还学会了如何将文本和变量的值打印到屏幕上。掌握了这些技能，你可以构建更有趣、更好玩的程序。
- en: Have you ever played MadLibs? Let’s try to use our new skills to build a program
    in that same style. MadLibs asks a player for various words or parts of speech,
    such as a color, a past-tense verb, or an adjective, and then inserts the words
    the player chose into a template, usually resulting in a funny story. For example,
    if a player gave a color of “pink,” a past-tense verb of “burped,” and an adjective
    of “silly” and then inserted them into the template “The ____ dragon ____ at the
    ____ knight,” they would get the result “The *pink* dragon *burped* at the *silly*
    knight.”
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 你玩过 MadLibs 吗？让我们尝试用我们新学的技能构建一个相同风格的程序。MadLibs 会要求玩家提供各种单词或词性，例如颜色、过去式动词或形容词，然后将玩家选择的单词插入到模板中，通常会得到一个有趣的故事。例如，如果玩家提供的颜色是“粉红色”，过去式动词是“打嗝”，形容词是“傻乎乎”，然后将它们插入到模板“The
    ____ dragon ____ at the ____ knight”中，最终结果会是“The *pink* dragon *burped* at the
    *silly* knight”。
- en: 'Now, the challenge is to write a new program, *MadLibs.java*, with a class
    called `MadLibs` and a `main()` method that prompts the user for several words.
    Those words should each be stored in a different `String` variable, like `color`,
    `pastTenseVerb`, `adjective`, and `noun`, which you initialize as empty strings.
    Then, after the user has entered their last word, the program should print a completed
    sentence or story by replacing the empty strings with the words the user provided,
    like this:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，挑战是编写一个新的程序，*MadLibs.java*，创建一个名为 `MadLibs` 的类，并且有一个 `main()` 方法，提示用户输入几个单词。这些单词应该分别存储在不同的
    `String` 变量中，比如 `color`、`pastTenseVerb`、`adjective` 和 `noun`，并将它们初始化为空字符串。然后，在用户输入最后一个单词后，程序应该通过用用户提供的单词替换空字符串，来打印一个完整的句子或故事，像这样：
- en: System.out.print("The " + color + " dragon " + pastTenseVerb + " at the " +
    adjective);
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.print("这只 " + color + " 龙 " + pastTenseVerb + " 在 " + adjective);
- en: System.out.println(" knight, who rode in on a sturdy, giant " + noun + ".");
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(" 骑士，骑着一匹坚固的巨型 " + noun + "。");
- en: Note that the first statement is a `print()` statement instead of a `println()`.
    The `print()` statement continues printing at the end of the same line, allowing
    us to build a longer paragraph or story. The `println()` statement, however, always
    skips a line after printing, like when you press ENTER at the end of the line.
    You can write a longer MadLibs story by using different variable names like `noun1`,
    `noun2`, and `noun3`. Give it a try, and get ready to laugh at the funny stories
    you create! Try to personalize each program you create by adding new features
    and making it your own.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，第一个语句是 `print()` 语句，而不是 `println()`。`print()` 语句会在同一行继续打印，允许我们构建更长的段落或故事。而
    `println()` 语句每次打印后总会跳到下一行，就像你按下回车键一样。你可以通过使用不同的变量名，如 `noun1`、`noun2` 和 `noun3`，来编写更长的
    MadLibs 故事。试试看，准备好大笑你创作的有趣故事吧！尝试通过添加新功能来个性化每个你创建的程序，让它成为你自己的作品。
