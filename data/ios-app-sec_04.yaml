- en: '**3**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**3**'
- en: '**IOS APPLICATION ANATOMY**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**iOS 应用程序解剖**'
- en: To understand some of the problems iOS applications face, it’s useful to get
    an idea of how different types of data are stored and manipulated within an application’s
    private directory, where all of its configuration, assets, binaries, and documents
    are stored. This is where you can discover all manner of information leakage,
    as well as dig in to the guts of the program that you’re examining.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解 iOS 应用程序面临的一些问题，了解不同类型的数据是如何存储和操作的非常有用，这些数据存储在应用程序的私人目录中，该目录存储着所有的配置、资源、二进制文件和文档。在这里，你可以发现各种信息泄露问题，并深入探究你正在检查的程序的内部结构。
- en: The quickest way find out what data your application stores locally on an iOS
    device is to check out *~Library/Developer/CoreSimulator/Devices*. Starting with
    Xcode 6, each combination of device type and OS version you’ve ever deployed into
    the Simulator application is assigned a UUID. Your particular application’s data
    will be stored in two places under this directory. Your application binary and
    assets, including *.nib* user interface files and graphic files included with
    the application, are in *<device ID>/data/Containers/Bundle/Application/<app bundle
    id>*. The more dynamic data that your application stores is in *~<device ID>/data/Containers/Data/Application/<app
    bundle id>*. Systemwide data such as global configurations will be stored in the
    remainder of the *<device ID>* directory.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 找出你的应用程序在 iOS 设备上本地存储了哪些数据的最快方式是查看 *~Library/Developer/CoreSimulator/Devices*。从
    Xcode 6 开始，每个设备类型和操作系统版本的组合都会被分配一个 UUID。你的特定应用程序的数据将存储在该目录下的两个位置。你的应用程序的二进制文件和资源，包括
    *.nib* 用户界面文件和随应用程序附带的图形文件，存储在 *<设备 ID>/data/Containers/Bundle/Application/<应用包
    ID>* 中。你的应用程序存储的更多动态数据则存储在 *~<设备 ID>/data/Containers/Data/Application/<应用包 ID>*
    中。系统范围的数据，如全局配置，将存储在 *<设备 ID>* 目录的其余部分。
- en: Exploring this directory structure, which is sketched out in simplified form
    in [Figure 3-1](ch03.html#ch3fig1), also reveals which types of data are handled
    by OS services rather than your application.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 探索这个目录结构，简化版本见[图 3-1](ch03.html#ch3fig1)，还可以揭示哪些类型的数据由操作系统服务而非你的应用程序处理。
- en: '![image](graphics/f03-01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-01.jpg)'
- en: '*Figure 3-1: Layout of an application directory*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-1：应用程序目录的布局*'
- en: If you’re on a jailbroken device, you can use SSH to connect to the device and
    explore the directory structure; I’ll talk about jailbreaking and connecting to
    test devices in [Chapter 6](ch06.html#ch06). Whether or not your device is jailbroken,
    you can use a tool such as iExplorer^([1](footnote.html#fn17)) to examine the
    directory structure of your installed applications, as shown in [Figure 3-2](ch03.html#ch3fig2).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是越狱设备，你可以通过 SSH 连接到设备并探索目录结构；我将在[第 6 章](ch06.html#ch06)中讨论越狱以及如何连接测试设备。无论你的设备是否越狱，你都可以使用像
    iExplorer 这样的工具^([1](footnote.html#fn17))，来检查你安装的应用程序的目录结构，如[图 3-2](ch03.html#ch3fig2)所示。
- en: In the rest of this chapter, I’ll cover some of the common directories and data
    stores used by iOS applications, as well as how to interact with them programmatically
    and what data can leak from them.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的其余部分，我将介绍一些 iOS 应用程序常用的目录和数据存储，以及如何通过编程方式与它们交互以及可能从中泄露的哪些数据。
- en: '![image](graphics/f03-02.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-02.jpg)'
- en: '*Figure 3-2: Examining an application bundle with iExplorer*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-2：使用 iExplorer 检查应用程序包*'
- en: '**Dealing with plist Files**'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**处理 plist 文件**'
- en: Before you start examining the directory structure, you need to know how to
    read some of the stuff you’ll find there. iOS stores app configuration data inside
    *property list (plist)* files, which hold this information in Core Foundation
    data types such as `CFArray`, `CFString`, and so forth. From a security standpoint,
    you want to examine plists for things that shouldn’t be stored in plaintext, such
    as credentials, and then potentially manipulate them to change the application’s
    behavior. For instance, you could enable a paid feature that’s disabled.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始检查目录结构之前，你需要了解如何读取你将会发现的一些内容。iOS 将应用程序配置数据存储在 *属性列表（plist）* 文件中，这些文件使用 Core
    Foundation 数据类型（如 `CFArray`、`CFString` 等）存储信息。从安全角度来看，你需要检查 plist 文件，查看其中是否包含不应以明文存储的内容，比如凭证，并可能对其进行修改，从而改变应用程序的行为。例如，你可以启用一个被禁用的付费功能。
- en: 'There are two types of plist formats: binary and XML. As you can see in the
    following example, the XML format is easily readable by humans.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: plist 格式有两种类型：二进制和 XML。如以下示例所示，XML 格式易于人类读取。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is simply a dictionary containing hierarchical keys and values, which provides
    information about the app—the platforms it can run on, the code signature, and
    so forth (the signature is not present here because the app is deployed in the
    Simulator application).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个包含层级键值对的字典，提供了有关应用的信息——它可以运行的平台、代码签名等等（此处没有签名，因为该应用部署在模拟器应用中）。
- en: But when examining files from the command line or working with plists programmatically,
    you’ll frequently encounter plists in binary format, which is not particularly
    human readable (or writable). You can convert these plists to XML using the `plutil(1)`
    command.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在从命令行检查文件或编程操作plist时，你经常会遇到二进制格式的plist，它并不是特别适合人类读取（或写入）。你可以使用`plutil(1)`命令将这些plist转换为XML格式。
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first command converts a binary plist to XML and outputs it to stdout, where
    you can pipe it to `less(1)` or similar commands. You can also output directly
    to a file with `-o *filename*`, as in the second command. In the third command,
    the `binary1` conversion type turns an XML-formatted plist to binary; but since
    the formats are interchangeable, you shouldn’t really need to do this.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令将二进制的plist转换为XML格式并输出到标准输出（stdout），你可以将其传递给`less(1)`或类似的命令。你也可以使用`-o *filename*`直接输出到文件，就像第二个命令中那样。在第三个命令中，`binary1`转换类型将XML格式的plist转换为二进制；但由于格式是可互换的，你实际上不需要这么做。
- en: 'To make reading and editing plists more seamless, you can also configure your
    text editor to automatically convert plist files so that if you need to read or
    write to one, you can do so smoothly from a familiar environment. For example,
    if you happen to use Vim, you might add a configuration like this to your *.vimrc*
    file:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让读取和编辑plist文件更无缝，你还可以配置你的文本编辑器，自动将plist文件转换格式，这样如果你需要读取或写入文件时，可以在一个熟悉的环境中顺畅地进行。例如，如果你使用Vim，你可以在你的*.vimrc*文件中添加如下配置：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This configuration will use the `:PlistXML` command to automatically convert
    any binary plist that you edit to XML format, allowing you to make changes in
    a human-readable format. Before actually writing those changes to the file, the
    configuration will convert the file to binary again using the `:Plistbin` command.
    Note that the file will still be successfully consumed by applications regardless
    of whether it is in binary or XML format.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 该配置将使用`:PlistXML`命令，自动将你编辑的任何二进制plist转换为XML格式，这样你就可以以人类可读的格式进行更改。在实际写入这些更改之前，配置会再次使用`:Plistbin`命令将文件转换回二进制格式。请注意，无论文件是二进制格式还是XML格式，应用程序都能成功读取它。
- en: You can view plists of either format within Xcode, as in [Figure 3-3](ch03.html#ch3fig3).
    The advantage of using Xcode is that you’ll have some additional help and dropdown
    menus that show you what potential values you might be able to use for the various
    keys. It’s good to know how to work with plists from the command line, though,
    because this lets you directly interact with them via SSH sessions to jailbroken
    devices.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Xcode中查看任意格式的plist，如[图 3-3](ch03.html#ch3fig3)所示。使用Xcode的优点是你将得到一些额外的帮助和下拉菜单，显示你可能用于各种键的潜在值。然而，了解如何在命令行中处理plist文件也很重要，因为这样你就能通过SSH会话直接与越狱设备上的plist文件交互。
- en: '![image](graphics/f03-03.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-03.jpg)'
- en: '*Figure 3-3: Viewing a plist within Xcode*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-3：在Xcode中查看plist*'
- en: See the man pages `plist(5)` and `plutil(1)` for more information about viewing
    and editing plists. If you’re working on a jailbroken device, you can use the
    `plutil` command included with Erica Sadun’s Erica Utilities^([2](footnote.html#fn18))
    (available in Cydia) to work with plists locally.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅手册页`plist(5)`和`plutil(1)`，以获取有关查看和编辑plist文件的更多信息。如果你在越狱设备上工作，可以使用Erica Sadun的Erica
    Utilities^([2](footnote.html#fn18))（可通过Cydia获取）中的`plutil`命令，直接在本地操作plist文件。
- en: '**Device Directories**'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**设备目录**'
- en: 'Starting with iOS 8, Simulator platforms such as iPhone, iPad, and their variations
    are stored in directories named with unique identifiers. These identifiers correspond
    with the type of device you choose when launching the Simulator from Xcode, in
    combination with the requested OS version. Each of these directories has a plist
    file that describes the device. Here’s an example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从iOS 8开始，模拟器平台（如iPhone、iPad及其变种）存储在以唯一标识符命名的目录中。这些标识符与启动模拟器时在Xcode中选择的设备类型相对应，并结合请求的操作系统版本。每个目录中都有一个plist文件，描述了该设备。以下是一个示例：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this plist file, it’s not immediately obvious which directory is for which
    device. To figure that out, either you can look at the *.default_created.plist*
    file in the *Devices* directory, or you can just grep all of the *device.plist*
    files, as shown in [Listing 3-1](ch03.html#ch3ex1).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个plist文件中，哪一个目录对应哪个设备并不立即显现。为了弄清楚这一点，你可以查看*Devices*目录中的*.default_created.plist*文件，或者你也可以通过grep搜索所有的*device.plist*文件，如[示例
    3-1](ch03.html#ch3ex1)所示。
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 3-1: Grepping to determine which identifier maps to which model of
    iOS device*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 3-1：通过grep命令确定标识符与iOS设备模型的对应关系*'
- en: 'After entering the appropriate directory for the device you’ve been testing
    your application on, you’ll see a *data* directory that contains all of the Simulator
    files, including those specific to your application. Your application data is
    split into three main directories under *data/Containers*: *Bundle*, *Data*, and
    *Shared*.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 进入你在其上测试应用程序的设备相应目录后，你会看到一个名为*data*的目录，其中包含所有模拟器文件，包括与应用程序相关的文件。你的应用程序数据被分为三个主要目录，位于*data/Containers*下：*Bundle*、*Data*和*Shared*。
- en: '**The Bundle Directory**'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Bundle目录**'
- en: The *Bundle* directory contains an *Applications* directory, which in turn contains
    a directory for each of the applications stored on the device, represented by
    that application’s bundle ID. In each application’s directory, the *.app* folder
    is where the application’s core binary is stored, along with image assets, localization
    information, and the *Info.plist* file that contains the core configuration information
    for your application. *Info.plist* includes the bundle identifier and main executable,
    along with information about your application’s UI and which device capabilities
    an application requires to be able to run.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*Bundle*目录包含一个*Applications*目录，后者包含每个存储在设备上的应用程序的目录，这些目录由应用程序的bundle ID表示。在每个应用程序的目录中，*.app*文件夹存储着应用程序的核心二进制文件，以及图像资源、本地化信息和包含应用程序核心配置信息的*Info.plist*文件。*Info.plist*包含bundle标识符和主可执行文件，以及有关应用程序UI和应用程序运行所需设备功能的信息。'
- en: On the filesystem, these plists are stored in either XML or binary format, with
    the latter being the default. You can retrieve the information in *Info.plist*
    programmatically by referencing dictionary attributes of `[NSBundle mainBundle]`;^([3](footnote.html#fn19))
    this is commonly used for loading styling or localization information.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件系统中，这些plist文件以XML或二进制格式存储，后者为默认格式。你可以通过引用`[NSBundle mainBundle]`的字典属性以编程方式获取*Info.plist*中的信息；^([3](footnote.html#fn19))这通常用于加载样式或本地化信息。
- en: 'One thing that will potentially be of interest in the *Info.plist* file is
    the `UIRequiredDeviceCapabilities` entry, which looks something like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在*Info.plist*文件中，可能会引起你关注的一个条目是`UIRequiredDeviceCapabilities`，它的内容大致如下：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `UIRequiredDeviceCapabilities` entry describes which system resources an
    app requires. While not an enforcement mechanism, this can give you some clues
    as to what type of activities the application will engage in.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIRequiredDeviceCapabilities`条目描述了一个应用程序所需的系统资源。虽然这不是一个强制性机制，但它可以给你一些线索，帮助你了解应用程序将进行何种活动。'
- en: '**The Data Directory**'
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**数据目录**'
- en: 'The primary area of interest in the *Data* directory is the *Applications*
    subdirectory. The *Data/Applications* directory contains the rest of the data
    an application uses to run: preferences, caches, cookies, and so on. This is also
    the primary location you’ll want to inspect for most types of data leakage. Now,
    let’s go over the various subdirectories and the types of data that they may end
    up holding.^([4](footnote.html#fn20))'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*Data*目录中最主要的关注点是*Applications*子目录。*Data/Applications*目录包含应用程序运行所需的其他数据：首选项、缓存、Cookies等。这也是你检查大多数数据泄露类型的主要位置。现在，让我们来回顾一下各个子目录以及它们可能包含的数据类型。^([4](footnote.html#fn20))'
- en: '***The Documents and Inbox Directories***'
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***文档和收件箱目录***'
- en: The *Documents* directory is intended to store your nontransient application
    data, such as user-created content or local information allowing the app to run
    in offline mode. If `UIFileSharingEnabled` is set in your application’s *Info.plist*
    file, files here will be accessible via iTunes.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*Documents*目录用于存储你的非临时应用程序数据，例如用户创建的内容或允许应用在离线模式下运行的本地信息。如果在应用程序的*Info.plist*文件中设置了`UIFileSharingEnabled`，这里的文件将可以通过iTunes访问。'
- en: Data files that other applications ask your app to open are stored in your application’s
    *Documents/Inbox* directory. These will be invoked by the calling application
    using the `UIDocumentInteractionController` class.^([5](footnote.html#fn21))
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 其他应用程序要求您的应用程序打开的数据文件存储在您的应用程序的*Documents/Inbox*目录中。这些文件将通过调用应用程序使用`UIDocumentInteractionController`类来调用。^([5](footnote.html#fn21))
- en: You can only read or delete files stored in the *Inbox* directory. These files
    come from another application that can’t write to your app directory, so they’re
    put there by a higher-privileged system process. You may want to consider deleting
    these files periodically or giving the user the option to delete them because
    it will not be apparent to the user what documents are stored here and whether
    they contain sensitive information.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您只能读取或删除存储在*收件箱*目录中的文件。这些文件来自无法写入您的应用目录的其他应用程序，因此它们由具有更高权限的系统进程放置在此处。您可能需要定期删除这些文件，或者让用户选择删除它们，因为用户无法明确知道此处存储了哪些文档，以及它们是否包含敏感信息。
- en: If you’re writing an application with the goal of ensuring sensitive information
    doesn’t remain on disk, copy documents out of the *Inbox* directory to a separate
    location where you can apply Data Protection and then remove those files from
    the *Inbox* directory.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在编写一个应用程序，目标是确保敏感信息不会长时间保留在磁盘上，请将文档从*收件箱*目录复制到可以应用数据保护的单独位置，然后将这些文件从*收件箱*目录中删除。
- en: It’s also worth remembering that under certain circumstances, any file your
    application asks to open may persist on the disk *forever*. If you attempt to
    open a file type that your program isn’t a handler for, then that file will be
    passed off to a third-party app, and who knows when the other app will delete
    it? It may get stored indefinitely. In other words, the cleanup of any file that
    you ask another app to open is beyond your control, even if you simply preview
    the contents using the Quick Look API. If having *Inbox* files kick around for
    a long time is problematic, consider giving your application the ability to view
    such data on its own (rather than relying on a helper) and then make sure to dispose
    of the files properly.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 还值得记住，在某些情况下，您的应用程序请求打开的任何文件可能会在磁盘上*永远*存在。如果您尝试打开一个您的程序没有处理的文件类型，那么该文件将被传递给第三方应用程序，而谁知道其他应用程序什么时候会删除它呢？它可能会被无限期地存储。换句话说，您请求其他应用程序打开的任何文件的清理工作超出了您的控制范围，即使您仅仅使用Quick
    Look API预览文件内容。如果让*收件箱*文件长时间存在是一个问题，考虑让您的应用程序自己查看这些数据（而不是依赖辅助程序），然后确保妥善处理这些文件。
- en: '***The Library Directory***'
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***库目录***'
- en: The *Library* directory contains the majority of your application’s files, including
    data cached by the application or by particular networking constructs. It will
    be backed up via iTunes and to iCloud, with the exception of the *Caches* directory.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*库*目录包含您应用程序的大多数文件，包括由应用程序或特定网络构造缓存的数据。除了*缓存*目录外，这些文件会通过iTunes和iCloud进行备份。'
- en: '**The Application Support Directory**'
  id: totrans-49
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**应用支持目录**'
- en: The *Application Support* directory is not for storing files created or received
    by the user but rather for storing additional data files that will be used by
    your application. Examples would be additional purchased downloadable content,
    configuration files, high scores, and so on—as the name implies, things that support
    the running and operation of the application. Either these files can be deployed
    when the application is first installed or they can be downloaded or created by
    your application later.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*应用支持*目录不是用来存储用户创建或接收的文件，而是用来存储将由您的应用程序使用的附加数据文件。例如，可能包括额外购买的可下载内容、配置文件、高分记录等——正如名称所示，这些是支持应用程序运行和操作的内容。这些文件可以在应用程序首次安装时部署，或者可以由您的应用程序稍后下载或创建。'
- en: By default, iTunes backs up the data in this directory to your computer and
    to iCloud. However, if you have privacy or security concerns about this data being
    stored in Apple’s cloud environment, you can explicitly disallow this by setting
    the `NSURLIsExcludedFromBackupKey` attribute on newly created files. I’ll discuss
    preventing data from syncing to iCloud further in [Chapter 10](ch10.html#ch10).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，iTunes会将该目录中的数据备份到您的计算机和iCloud中。但是，如果您对这些数据存储在Apple云环境中存在隐私或安全担忧，您可以通过为新创建的文件设置`NSURLIsExcludedFromBackupKey`属性来明确禁止此操作。我将在[第10章](ch10.html#ch10)进一步讨论如何防止数据同步到iCloud。
- en: Note that Apple requires that applications back up only user data to iCloud
    (including documents they’ve created, configuration files, and so forth), never
    application data. Applications that allow application content, such as downloadable
    app content, to be backed up to iCloud can be rejected from the App Store.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，苹果要求应用程序仅将用户数据（包括他们创建的文档、配置文件等）备份到 iCloud，而不是应用程序数据。允许应用程序内容（例如可下载的应用内容）备份到
    iCloud 的应用程序可能会被 App Store 拒绝。
- en: '**The Caches and Snapshots Directories**'
  id: totrans-53
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**缓存和快照目录**'
- en: 'The *Caches* directory is similar in function to a web browser’s cache: it’s
    intended for data that your application will keep around for performance reasons
    but not for data that is crucial for the application to function. As such, this
    directory won’t be backed up by iTunes.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*Caches* 目录的功能类似于网页浏览器的缓存：它用于存储为了性能原因而保留的数据，但不用于存储对应用程序功能至关重要的数据。因此，这个目录不会被
    iTunes 备份。'
- en: While Apple states that your application is responsible for managing the *Caches*
    directory, the OS does actually manipulate the directory’s contents and that of
    its subfolder, *Snapshots*. Always consider the contents of the *Caches* directory
    to be transient, and expect it to disappear between program launches. iOS will
    cull these cache directories automatically if the system starts running low on
    space, though it won’t do this while the application is running.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然苹果声明你的应用程序负责管理 *Caches* 目录，但操作系统实际上会操作该目录及其子文件夹 *Snapshots* 的内容。始终将 *Caches*
    目录的内容视为临时的，并且预计它会在程序启动之间消失。如果系统开始空间不足，iOS 会自动清理这些缓存目录，但在应用程序运行时不会进行此操作。
- en: The *Caches* directory also sometimes stores web cache content in a subdirectory
    such as *Caches/com.mycompany.myapp*. This is one place where sensitive data can
    leak because iOS can cache information delivered over HTTPS for quite a long time.
    If the developer hasn’t made special effort to prevent data from being cached
    or to expire cached data quickly, you can often find some goodies in here.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*Caches* 目录有时也会在一个子目录中存储网页缓存内容，例如 *Caches/com.mycompany.myapp*。这是一个敏感数据泄露的地方，因为
    iOS 可以将通过 HTTPS 传输的信息缓存很长时间。如果开发者没有特别努力去防止数据被缓存或迅速过期，你通常可以在这里找到一些“好东西”。'
- en: 'Finally, when an application is put into the background, the OS also automatically
    stores screenshots of the application in the *Snapshots* subdirectory, potentially
    leaving sensitive information on local storage. This is done for one reason: so
    that the OS can use the current screen state to create the “whooshing” animation
    that happens when you bring an application to the foreground. Unfortunately, a
    side effect I frequently see in iOS applications is that the disk stores images
    of people’s Social Security numbers, user details, and so on. I’ll discuss mitigation
    strategies for this (and many other caching problems) in [Chapter 10](ch10.html#ch10).'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当一个应用被放到后台时，操作系统还会自动将该应用的截图存储在 *Snapshots* 子目录中，这可能会在本地存储中留下敏感信息。这样做的原因是：操作系统需要当前屏幕状态来创建当你将应用带到前台时的“嗖”动画。不幸的是，我经常看到一个副作用：iOS
    应用的磁盘上存储了人们的社会安全号码、用户详情等信息。我将在[第10章](ch10.html#ch10)讨论如何缓解这个问题（以及许多其他缓存问题）。
- en: '**The Cookies Directory**'
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**Cookies 目录**'
- en: The *Cookies* directory stores cookies set by the URL loading system. When you
    make an `NSURLRequest`, any cookies will be set according to either the default
    system cookie policy or one that you’ve specified. Unlike on OS X, cookies on
    iOS are not shared between applications; each application will have its own cookie
    store in this directory.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*Cookies* 目录存储由 URL 加载系统设置的 cookies。当你发出一个 `NSURLRequest` 请求时，任何 cookies 都会根据默认的系统
    cookie 策略或你指定的策略进行设置。与 OS X 不同，iOS 上的 cookies 不会在应用之间共享；每个应用都会在这个目录中拥有自己的 cookie
    存储。'
- en: '**The Preferences Directory**'
  id: totrans-60
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**偏好设置目录**'
- en: iOS stores application preferences in the *Preferences* directory, but it doesn’t
    allow applications to write directly to the files there. Instead, files in this
    directory are created, read, and manipulated by either the `NSUserDefaults` or
    `CFPreferences` API.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: iOS 将应用程序的偏好设置存储在 *Preferences* 目录中，但不允许应用程序直接写入该目录中的文件。相反，目录中的文件是通过 `NSUserDefaults`
    或 `CFPreferences` API 创建、读取和操作的。
- en: These APIs store application preference files in plaintext; therefore, you most
    definitely should *not* use them to store sensitive user information or credentials.
    When examining an application to see what information it’s storing locally, be
    sure to examine the plist files in the *Preferences* directory. You’ll sometimes
    find usernames and passwords, API access keys, or security controls that are not
    meant to be changed by users.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 API 以明文形式存储应用程序的首选项文件；因此，你绝对不应该使用它们来存储敏感的用户信息或凭证。当检查应用程序以查看它存储了哪些信息时，务必检查
    *Preferences* 目录中的 plist 文件。你有时会发现用户名和密码、API 访问密钥或不应由用户更改的安全控制。
- en: '**The Saved Application State Directory**'
  id: totrans-63
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**已保存的应用程序状态目录**'
- en: Users expect apps to remember what they enter into text fields, which settings
    they’ve enabled, and so on. If a user switches to another application and then
    restores the original application at a later time, the application may have actually
    been killed by the operating system during the interval. To make it so that the
    UI remains consistent between program launches, recent versions of iOS store object
    state information in the *Saved Application State* directory by the State Preservation
    API.^([6](footnote.html#fn22)) Developers can tag specific parts of their UI to
    be included in State Preservation.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 用户期望应用程序能够记住他们在文本字段中输入的内容、启用了哪些设置等。如果用户切换到另一个应用程序，然后稍后恢复原来的应用程序，应用程序可能在这段时间内被操作系统终止。为了使得在程序启动之间
    UI 一致，iOS 的最新版本通过状态保存 API 将对象状态信息存储在 *Saved Application State* 目录中。^([6](footnote.html#fn22))
    开发者可以标记 UI 中的特定部分，以便在状态保存中包含它们。
- en: If you’re not careful about what you store as part of the application state,
    this is one place you can wind up with data leaks. I’ll discuss how to avoid those
    in depth in [Chapter 10](ch10.html#ch10).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不小心存储了应用程序状态的一部分，这里可能会导致数据泄漏。我将在[第10章](ch10.html#ch10)中详细讨论如何避免这种情况。
- en: '***The tmp Directory***'
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***tmp 目录***'
- en: As you might surmise, *tmp* is where you store transient files. Like the *Caches*
    directory, the files contained in this directory may be automatically removed
    by the OS while your application isn’t running. The usage of this directory is
    fairly similar to that of the *Caches* directory; the difference is that *Caches*
    is meant to be used for files that might need to be retrieved again or recreated.
    For example, if you download certain application data from a remote server and
    want to keep it around for performance reasons, you’d store that in *Caches* and
    redownload it if it disappears. On the other hand, *tmp* is for strictly temporary
    files generated by the application—in other words, files that you won’t miss if
    they’re deleted before you can revisit them. Also, like the *Caches* directory,
    *tmp* is not backed up to iTunes or iCloud.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所料，*tmp* 目录用于存储临时文件。与 *Caches* 目录类似，存储在该目录中的文件可能会在应用程序未运行时被操作系统自动删除。这个目录的使用方式与
    *Caches* 目录相似；不同之处在于，*Caches* 目录用于存放可能需要再次检索或重新创建的文件。例如，如果你从远程服务器下载某些应用数据并希望出于性能原因将其保留，你会将其存储在
    *Caches* 目录中，并在数据丢失时重新下载它。另一方面，*tmp* 目录用于存放应用程序生成的严格临时文件——换句话说，就是那些如果在你再次访问之前被删除，你也不会在意的文件。此外，像
    *Caches* 目录一样，*tmp* 目录不会备份到 iTunes 或 iCloud。
- en: '**The Shared Directory**'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**共享目录**'
- en: 'The *Shared* directory is a bit of a special case. It’s for applications that
    share a particular app group (introduced in iOS 8 to support extensions), such
    as those that modify the behavior of the Today screen or keyboard. Apple requires
    all extensions to have a container application, which receives its own app ID.
    The *Shared* directory is the way that the extension and its containing app share
    data. For example, apps can access databases of shared user defaults by specifying
    a suite name during initialization of `NSUserDefaults`, like this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*Shared* 目录是一个特殊情况。它用于共享特定应用组的应用程序（在 iOS 8 中引入，以支持扩展），例如那些修改今日视图或键盘行为的应用。苹果要求所有扩展必须有一个容器应用程序，并且该容器应用程序会接收自己的应用
    ID。*Shared* 目录是扩展与其容器应用程序共享数据的方式。例如，应用程序可以通过在初始化 `NSUserDefaults` 时指定一个套件名称来访问共享的用户默认设置数据库，示例如下：'
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: While the *Shared* directory isn’t commonly used at the time of writing, it’s
    prudent to check this directory when looking for any sensitive information potentially
    stored in preferences or other private data.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 *Shared* 目录在撰写时并不常用，但在查找可能存储在首选项或其他私人数据中的敏感信息时，检查该目录是明智的。
- en: '**Closing Thoughts**'
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结思考**'
- en: 'With a basic understanding of the iOS security model, the Cocoa API, and how
    iOS applications are laid out, you’re now ready to move on to the fun stuff: tearing
    apart applications and finding their flaws. In [Part II](part02.html#part02),
    I’ll show you how to build your testing platform, debug and profile applications,
    and deal with testing third-party apps for which source code is available.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对 iOS 安全模型、Cocoa API 以及 iOS 应用程序布局的基本了解，你现在可以开始进入有趣的部分：剖析应用程序并发现它们的漏洞。在[第二部分](part02.html#part02)，我将向你展示如何构建你的测试平台、调试和分析应用程序，以及如何测试那些源代码可用的第三方应用程序。
