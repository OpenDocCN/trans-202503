- en: Appendix B. Using Perl One-Liners On Windows
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录B：在Windows上使用Perl单行命令
- en: 'In this appendix, I’ll show you how to run Perl on Windows, install a bash
    port on Windows, and use Perl one-liners in three different ways: from the Windows
    bash port, the Windows command prompt (*cmd.exe*), and PowerShell.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我将向你展示如何在Windows上运行Perl，如何在Windows上安装bash移植版本，并展示如何通过三种不同的方式使用Perl单行命令：通过Windows的bash移植版本、Windows命令提示符（*cmd.exe*）以及PowerShell。
- en: B.1 Perl on Windows
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: B.1 Windows上的Perl
- en: Before you can run Perl on Windows, you need to install Perl for Windows. My
    favorite Windows Perl port is Strawberry Perl (*[http://strawberryperl.com/](http://strawberryperl.com/)*),
    a Perl environment with everything you need to run and develop Perl applications
    on Windows. Strawberry Perl is designed to function as much as possible like the
    Perl environment on UNIX systems. It includes Perl binaries, the gcc compiler
    and related build tools, and many external libraries.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上运行Perl之前，你需要安装适用于Windows的Perl。我最喜欢的Windows Perl移植版本是Strawberry Perl（*[http://strawberryperl.com/](http://strawberryperl.com/)*），这是一个包含你在Windows上运行和开发Perl应用所需的一切的Perl环境。Strawberry
    Perl的设计尽可能像UNIX系统上的Perl环境。它包括Perl二进制文件、gcc编译器及相关构建工具，以及许多外部库。
- en: To install Strawberry Perl, download and run the installer, click through a
    bunch of menus a few times, and you’re done. My choice for the installation directory
    is *c:\strawberryperl*. (Installing any UNIX software for Windows in a directory
    with no spaces in it is always a good idea.) Once the installation is done, the
    installer should put the installation directory in your path environment variable
    so you can run Perl from the command line right away.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Strawberry Perl，下载并运行安装程序，点击几次菜单就可以完成安装。我的安装目录选择是*c:\strawberryperl*。（将任何UNIX软件安装到没有空格的目录中是个好主意。）安装完成后，安装程序应该会将安装目录添加到你的路径环境变量中，这样你就可以直接在命令行运行Perl了。
- en: Unfortunately, the Windows command line is really basic compared to the command
    line on UNIX systems. A UNIX system runs a real shell with well-defined command-line
    parsing rules, but Windows doesn’t really have anything like that. The Windows
    command line has weird rules about how it treats certain symbols, the quoting
    rules aren’t well defined, and the escaping rules are strange, all of which makes
    it difficult to run Perl one-liners. Therefore, the preferred way to run one-liners
    on Windows is to use a UNIX shell (such as bash) for Windows, as you’ll learn
    in the next section.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，与UNIX系统的命令行相比，Windows命令行非常基础。UNIX系统运行的是一个真正的shell，具有明确的命令行解析规则，而Windows并没有类似的东西。Windows命令行对于某些符号的处理有奇怪的规则，引用规则不明确，转义规则也很奇怪，这一切都使得运行Perl单行命令变得困难。因此，在Windows上运行单行命令的首选方法是使用UNIX
    shell（如bash），正如你将在下一节中学到的那样。
- en: B.2 Bash on Windows
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: B.2 Windows上的Bash
- en: Getting a bash shell to run on Windows is simple. I recommend win-bash (*[http://win-bash.sourceforge.net/](http://win-bash.sourceforge.net/)*),
    a stand-alone bash port for Windows that doesn’t need a special environment or
    additional DLLs. The download is a single zip file that contains the bash shell
    (*bash.exe*) and a bunch of UNIX utilities (such as awk, cat, cp, diff, find,
    grep, sed, vi, wc, and about 100 others).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上运行bash shell非常简单。我推荐win-bash（*[http://win-bash.sourceforge.net/](http://win-bash.sourceforge.net/)*），这是一个适用于Windows的独立bash移植版本，无需特殊环境或额外的DLL文件。下载包是一个包含bash
    shell（*bash.exe*）和一堆UNIX工具（如awk、cat、cp、diff、find、grep、sed、vi、wc等大约100个工具）的zip文件。
- en: To install bash and all the utilities, simply unzip the file and you’re done.
    My choice for the installation directory is *c:\winbash*, again with no spaces
    in the directory. Run *bash.exe* from *c:\winbash* to start the bash shell.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装bash和所有相关工具，只需解压文件即可完成安装。我的安装目录选择是*c:\winbash*，同样是没有空格的目录。从*c:\winbash*运行*bash.exe*以启动bash
    shell。
- en: 'If you start *bash.exe* after you install Strawberry Perl, Perl should be available
    for use right away because the Strawberry Perl installer should have updated the
    path with the installation directory. To confirm, run `perl --version`. It should
    output the version of the installed Perl. If you get an error saying that `perl`
    was not found, manually append the *C:\strawberryperl\perl\bin* directory to the
    `PATH` environment variable by entering this in the command line:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在安装了Strawberry Perl之后启动*bash.exe*，Perl应该可以立即使用，因为Strawberry Perl的安装程序应该已经将安装目录添加到了路径中。要确认这一点，请运行`perl
    --version`。它应该输出已安装Perl的版本。如果你收到“找不到`perl`”的错误，手动将*C:\strawberryperl\perl\bin*目录添加到`PATH`环境变量中，可以在命令行输入以下内容：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Bash uses the `PATH` variable to find executables to run. By appending Strawberry
    Perl’s binary directory to the `PATH` variable, you tell bash where to look for
    the `perl` executable.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Bash 使用 `PATH` 变量来查找可执行文件并运行它们。通过将 Strawberry Perl 的二进制目录添加到 `PATH` 变量中，你告诉
    bash 去哪里查找 `perl` 可执行文件。
- en: B.3 Perl One-Liners in Windows Bash
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: B.3 在 Windows Bash 中的 Perl 一行命令
- en: There are some important differences between bash on Windows and UNIX. The first
    difference pertains to file paths. Win-bash supports both UNIX-style and Windows-style
    paths.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上的 bash 和 UNIX 之间有一些重要的区别。第一个区别与文件路径有关。Win-bash 支持 UNIX 风格和 Windows
    风格的路径。
- en: 'Say you install win-bash in *C:\winbash*. When you start *bash.exe*, it should
    map the root directory */* to the current C: drive. To change the root directory
    to another drive, such as D:, enter `cd d:` in the bash shell. To change back
    to C:, enter `cd c:` in the shell. Now you can access a file such as *C:\work\report.txt*
    via */work/report.txt, c:/work/report.txt*, or *c:\\work\\report.txt*.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '假设你将 win-bash 安装在 *C:\winbash*。当你启动 *bash.exe* 时，它应该会将根目录 */* 映射到当前的 C: 驱动器。要将根目录切换到另一个驱动器，比如
    D:，在 bash shell 中输入 `cd d:`。要切换回 C:，在 shell 中输入 `cd c:`。现在，你可以通过 */work/report.txt*、c:/work/report.txt
    或 *c:\\work\\report.txt* 访问像 *C:\work\report.txt* 这样的文件。'
- en: 'The best thing about using win-bash is that all of the one-liners in this book
    should work because you’re running a real shell just like in a UNIX environment!
    For example, to number the lines in the *C:\work\report.txt* file (one-liner 3.1
    on page 17), you can run:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 win-bash 的最大优势是本书中的所有一行命令都应该能够正常工作，因为你正在运行一个真正的 shell，就像在 UNIX 环境中一样！例如，要给
    *C:\work\report.txt* 文件的每一行加上行号（第 17 页的单行命令 3.1），你可以运行：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Or you can refer to the file as if you were in UNIX:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以像在 UNIX 中一样引用该文件：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Or you can use Windows-style paths:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你也可以使用 Windows 风格的路径：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To avoid using double backslashes, you can single-quote the file path:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免使用双反斜杠，你可以用单引号引用文件路径：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If the filename has spaces in it, then you always have to quote it. For example,
    to work with *C:\Documents and Settings\Peter\My Documents\report.txt*, quote
    the entire path when passing it to a one-liner:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件名中有空格，你必须始终引用它。例如，要操作 *C:\Documents and Settings\Peter\My Documents\report.txt*，在传递给一行命令时，需要引用整个路径：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Or use the UNIX-style path to the file:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用 UNIX 风格的文件路径：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Quoting the filename is necessary here because without it Perl thinks you’re
    passing it a bunch of files rather than a single file with spaces in it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里引用文件名是必要的，因为如果不引用，Perl 会认为你传递的是一堆文件，而不是一个带空格的单一文件。
- en: B.4 Perl One-Liners in the Windows Command Prompt
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: B.4 在 Windows 命令提示符中的 Perl 一行命令
- en: If, for some reason, you can’t use win-bash as recommended, you can run one-liners
    through the Windows command prompt (*cmd.exe*). You will need to change the one-liners
    in this book a bit if you’re running them in the Windows command prompt because
    of the way Windows parses and treats the command-line arguments. Here’s what to
    do.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因你无法按推荐的方式使用 win-bash，你可以通过 Windows 命令提示符 (*cmd.exe*) 运行一行命令。如果你在 Windows
    命令提示符中运行这些一行命令，你需要稍微修改一下本书中的命令，因为 Windows 解析和处理命令行参数的方式不同。下面是你需要做的。
- en: 'First, verify that Perl is available from the command prompt. Start *cmd.exe*
    and enter `perl --version` in the command line. If you do this after having installed
    Strawberry Perl, the command should output the Perl version, and you’re good to
    go. Otherwise, you’ll have to update the `PATH` environment variable with the
    path to Strawberry Perl’s binary directory:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，验证 Perl 是否可以通过命令提示符使用。启动 *cmd.exe* 并在命令行中输入 `perl --version`。如果你在安装 Strawberry
    Perl 后执行此操作，命令应该会输出 Perl 版本信息，这样就可以正常使用了。否则，你需要通过更新 `PATH` 环境变量来添加 Strawberry
    Perl 的二进制目录路径：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As in UNIX, the `PATH` variable tells the command prompt where to look for executables.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 和 UNIX 一样，`PATH` 变量告诉命令提示符在哪里查找可执行文件。
- en: Converting One-Liners in the Windows Command Prompt
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Windows 命令提示符中转换单行命令
- en: 'Now let’s see how to convert one-liners for the command prompt, beginning with
    one-liner 2.1 (page 7), which double-spaces a file. In UNIX, you simply run:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看如何为命令提示符转换一行命令，从一行命令 2.1（第 7 页），它将文件内容双倍间距开始。在 UNIX 中，你只需运行：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you’re running this one-liner in the Windows command prompt, however, you
    have to make sure that it’s always wrapped in double quotes from the outside and
    that you’ve escaped any double quotes and special characters inside it. With those
    changes, the one-liner looks like this on Windows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你在 Windows 命令提示符中运行这个一行命令，你必须确保它总是用外部的双引号括起来，并且你已经转义了其中的双引号和特殊字符。做了这些更改后，这个一行命令在
    Windows 上应该是这样的：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This one-liner is getting ugly quickly, but you can employ a couple of Perl
    tricks to make it look a little nicer. First, replace double quotes inside the
    one-liner with the `qq/.../` operator, which double-quotes anything between the
    slashes. Writing `qq/text/` in Perl is the same as writing `"text"`. Now you rewrite
    this one-liner like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这行命令变得很乱，但你可以用一些 Perl 技巧使它看起来稍微整洁一些。首先，用 `qq/.../` 操作符将一行命令中的双引号替换掉，它会将斜杠之间的任何内容加上双引号。在
    Perl 中写 `qq/text/` 等价于写 `"text"`。现在你可以这样重写这行命令：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'That’s a little nicer. You can also change the character that the `qq` operator
    uses to separate its content. For example, the syntax `qq|...|` double-quotes
    anything between the pipes:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这要好一些。你还可以改变 `qq` 操作符用于分隔内容的字符。例如，语法 `qq|...|` 会将管道符 `|` 之间的内容加上双引号：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You could even use matching parentheses or curly brackets, like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以使用匹配的圆括号或大括号，如下所示：
- en: '[PRE12]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'or this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 或者是这样：
- en: '[PRE13]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let’s see how to convert several more one-liners to Windows. How about converting
    an IP address to an integer (one-liner 4.27 on page 45)? In UNIX you run:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何将更多的一行命令转换到 Windows。比如将一个 IP 地址转换为整数（第 45 页上的一行命令 4.27）？在 UNIX 中你可以运行：
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'On Windows, you need to change the quotes outside the one-liner to double quotes
    and escape the double quotes inside the one-liner:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，你需要将一行命令外部的引号改为双引号，并且转义一行命令内部的双引号：
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Or you can use the `qq|...|` operator to avoid escaping double quotes inside
    the one-liner:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以使用 `qq|...|` 操作符，避免在一行命令中转义双引号：
- en: '[PRE16]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'For things that don’t need interpolation, such as the format string `N` and
    the IP address `127.0.0.1`, you can also use single quotes instead of double quotes:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不需要插值的内容，如格式字符串 `N` 和 IP 地址 `127.0.0.1`，你也可以使用单引号而不是双引号：
- en: '[PRE17]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Another trick is to use the `q/.../` operator, which single-quotes any text
    between the slashes:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个技巧是使用 `q/.../` 操作符，它会将斜杠之间的文本单引号化：
- en: '[PRE18]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Writing `q/N/` and `q/127.0.0.1/` is the same as writing `'N'` and `'127.0.0.1'`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 写 `q/N/` 和 `q/127.0.0.1/` 与写 `'N'` 和 `'127.0.0.1'` 是一样的。
- en: 'Let’s convert another one-liner from UNIX to Windows. I’ve expanded it to multiple
    lines for clarity:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将另一个 UNIX 的一行命令转换为 Windows。我已将它扩展为多行以便清晰展示：
- en: '[PRE19]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Unfortunately, to convert this to Windows, you have to join all of the lines
    together (making the result less readable), and apply the new quoting rules:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，要将其转换为 Windows，你需要将所有行连接起来（这样结果就不太易读了），并应用新的引用规则：
- en: '[PRE20]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can increase the readability a little by using the `qq` operator:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过使用 `qq` 操作符稍微提高可读性：
- en: '[PRE21]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'or by using single quotes:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 或者通过使用单引号：
- en: '[PRE22]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Symbol Challenges
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 符号挑战
- en: 'You might also run into issues with the caret (`^`) symbol in one-liners because
    the Windows command prompt uses the caret as the escape symbol. To tell Windows
    to treat the caret symbol literally, you *usually* have to replace each caret
    with two carets: `^^`.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可能会遇到一行命令中 `^` 符号的问题，因为 Windows 命令提示符将 `^` 作为转义符。为了让 Windows 字面上处理 `^` 符号，你*通常*需要将每个
    `^` 替换为两个 `^^`：
- en: 'Let’s look at several examples that simply try to print the `^` character.
    Here’s my first attempt:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看几个简单的例子，看看如何打印 `^` 符号。下面是我的第一次尝试：
- en: '[PRE23]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'No output! The `^` symbol disappeared. Let’s try `^` twice:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 没有输出！`^` 符号消失了。我们再试试输入 `^` 两次：
- en: '[PRE24]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This worked! It printed the `^` symbol. Now let’s try using single quotes:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 成功了！它打印了 `^` 符号。现在让我们尝试使用单引号：
- en: '[PRE25]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This also worked and printed `^`, and I didn’t need to enter `^` twice. Using
    `qq/^/` also works:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这也成功了，打印了 `^`，而且我不需要输入两次 `^`。使用 `qq/^/` 也能成功：
- en: '[PRE26]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: As you can see, running one-liners on Windows can be tricky because there are
    no uniform parsing rules for the command-line arguments. You may run into similar
    issues when writing one-liners with the `%`, `&`, `<`, `>`, and `|` symbols. If
    so, try preceding them with the `^` escape character so that `%` becomes `^%`,
    `&` becomes `^&`, `<` becomes `^<`, `>` becomes `^>`, and `|` becomes `^|`. Or
    try wrapping them in the `qq` operator, as I discussed previously. (Better yet,
    install win-bash and use the one-liners through it to avoid all these issues.)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，在 Windows 上运行一行命令可能会有些棘手，因为没有统一的命令行参数解析规则。编写包含 `%`、`&`、`<`、`>` 和 `|` 符号的一行命令时，你可能会遇到类似的问题。如果是这样，可以尝试在这些符号前加上
    `^` 转义字符，使 `%` 变成 `^%`，`&` 变成 `^&`，`<` 变成 `^<`，`>` 变成 `^>`，`|` 变成 `^|`。或者，可以尝试将它们包裹在
    `qq` 操作符中，正如我之前讨论的那样。（更好的方法是安装 win-bash 并通过它来运行一行命令，以避免所有这些问题。）
- en: Windows File Paths
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows 文件路径
- en: 'When using the Windows command prompt, you can pass filenames to one-liners
    in several different ways. For example, to access the file *C:\work\wrong-spacing.txt*,
    you can enter:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Windows 命令提示符时，你可以通过多种方式将文件名传递给单行命令。例如，要访问文件 *C:\work\wrong-spacing.txt*，你可以输入：
- en: '[PRE27]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Or you can reverse the slashes:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你也可以反转斜杠：
- en: '[PRE28]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If the filename contains spaces, you have to quote the path:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件名包含空格，你必须对路径进行引号处理：
- en: '[PRE29]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: For more Windows Perl usage hints, see the Win32 Perl documentation at *[http://perldoc.perl.org/perlwin32.html](http://perldoc.perl.org/perlwin32.html)*.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 更多 Windows Perl 使用技巧，请参见 Win32 Perl 文档：[http://perldoc.perl.org/perlwin32.html](http://perldoc.perl.org/perlwin32.html)。
- en: B.5 Perl One-Liners in PowerShell
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: B.5 PowerShell 中的 Perl 单行命令
- en: Running one-liners in PowerShell is a bit different than running them in the
    command prompt (*cmd.exe*). The main difference is that PowerShell is a modern
    shell implementation with different parsing rules than the command prompt. In
    this section, I’ll show you how to run Perl one-liners in PowerShell.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PowerShell 中运行单行命令与在命令提示符 (*cmd.exe*) 中运行略有不同。主要区别在于 PowerShell 是一种现代的 Shell
    实现，其解析规则与命令提示符不同。在本节中，我将展示如何在 PowerShell 中运行 Perl 单行命令。
- en: 'First, you need to verify that Perl works in the PowerShell environment. Run
    `perl --version` in the PowerShell. If the command outputs the Perl version, then
    Perl is available, and you should be able to run the one-liners. Otherwise, update
    the `Path` environment variable and append Strawberry Perl’s binary directory
    to it by running the following command in PowerShell:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要验证 Perl 是否在 PowerShell 环境中工作。你可以在 PowerShell 中运行 `perl --version`。如果命令输出了
    Perl 的版本信息，则表示 Perl 可用，你应该能够运行单行命令。否则，更新 `Path` 环境变量，并通过以下命令将 Strawberry Perl
    的二进制目录添加到其中：
- en: '[PRE30]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `Path` variable tells PowerShell where to look for executables, so when
    you run `perl`, it searches all the directories (separated by the `;` character)
    for *perl.exe*.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`Path` 变量告诉 PowerShell 去哪里查找可执行文件，因此当你运行 `perl` 时，它会搜索所有的目录（通过 `;` 字符分隔），找到
    *perl.exe*。'
- en: Converting One-Liners in PowerShell
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 PowerShell 中转换单行命令
- en: 'Consider one-liner 2.1 (page 7), which double-spaces a file. In UNIX, the one-liner
    looks like this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 参考单行命令 2.1（第 7 页），它将文件进行双倍空格处理。在 UNIX 中，单行命令看起来是这样的：
- en: '[PRE31]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To make this one-liner work in PowerShell, you have to change three things:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要使这个单行命令在 PowerShell 中运行，你需要改动三个地方：
- en: 'Escape the `$` symbol, which PowerShell uses for variables, by adding the ``
    ` `` character (backtick) before it: `` `$ ``.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在 `$` 符号前添加 `` ` ``（反引号）字符来转义 PowerShell 中用于变量的 `$` 符号：`` `$ ``。
- en: As with the *cmd.exe* command prompt, make sure double quotes are used on the
    outside of the one-liner.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 *cmd.exe* 命令提示符一样，请确保单行命令的外部使用双引号。
- en: Use the `qq/.../` operator for the double quotes inside the one-liner, as explained
    in “Converting One-Liners in the Windows Command Prompt” on page 108\. You can’t
    just escape the double quotes with a backslash as with the command prompt, however;
    you must use the `qq/.../` operator.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `qq/.../` 运算符来处理单行命令中的双引号，如第 108 页“在 Windows 命令提示符中转换单行命令”一节所述。然而，你不能像在命令提示符中那样使用反斜杠转义双引号；你必须使用
    `qq/.../` 运算符。
- en: 'When you put it all together, the PowerShell version of this one-liner becomes:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将所有这些内容组合起来时，这个单行命令在 PowerShell 中的版本将变为：
- en: '[PRE32]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To specify full paths to files, use Windows-style paths. For example, to reference
    a file at *C:\work\wrong-spacing.txt*, enter that path directly after the one-liner:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定文件的完整路径，请使用 Windows 风格的路径。例如，要引用位于 *C:\work\wrong-spacing.txt* 的文件，可以直接在单行命令后输入该路径：
- en: '[PRE33]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If the filename or file path contains spaces, enter it like this, with double
    quotes around it:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件名或文件路径包含空格，请这样输入，路径周围加上双引号：
- en: '[PRE34]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now for another version of the same one-liner. In UNIX the one-liner looks
    like this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来看这个相同单行命令的另一个版本。在 UNIX 中，单行命令看起来是这样的：
- en: '[PRE35]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'But in PowerShell you have to change the outer single quotes to double quotes,
    escape the `$` symbol, and change double quotes to `qq/.../` inside the one-liner:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在 PowerShell 中，你必须将外部的单引号改为双引号，转义 `$` 符号，并将单行命令中的双引号改为 `qq/.../`：
- en: '[PRE36]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now let’s look at the one-liner that numbers the non-empty lines in a file
    (one-liner 3.2 on page 18):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看用于给文件中非空行编号的单行命令（第 18 页的单行命令 3.2）：
- en: '[PRE37]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'When converted to PowerShell, the one-liner looks like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 转换为 PowerShell 时，单行命令看起来像这样：
- en: '[PRE38]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: How about the artistic one-liner that checks if a number is prime (one-liner
    4.1 on page 29)?
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 那么检查一个数字是否是质数的艺术性单行命令（第 29 页的单行命令 4.1）怎么样？
- en: '[PRE39]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In PowerShell, the one-liner looks like this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PowerShell 中，单行命令看起来是这样的：
- en: '[PRE40]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Remember the one-liner on page 46 that converts IPs to integers? Here’s how
    it looks in UNIX:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 记得第 46 页提到的将 IP 转换为整数的一行命令吗？这是它在 UNIX 中的写法：
- en: '[PRE41]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'And here’s the same one-liner for PowerShell:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 PowerShell 中相同的一行命令：
- en: '[PRE42]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: One-Liners in PowerShell 3.0+
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PowerShell 3.0+ 中的一行命令
- en: If you’re running PowerShell version 3.0 or later, you can use the `--%` escape
    sequence to prevent PowerShell from doing any additional parsing.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行的是 PowerShell 3.0 或更高版本，你可以使用 `--%` 转义序列来防止 PowerShell 进行额外的解析。
- en: 'To find out which PowerShell version you’re running, enter `$PSVersionTable.PSVersion`
    in the shell. It should output a table like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看你正在运行的 PowerShell 版本，在命令行输入 `$PSVersionTable.PSVersion`。它应该输出如下表格：
- en: '[PRE43]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This table shows that you’re running PowerShell version 3.0, which has the `--%`
    escape sequence. (Older versions of PowerShell don’t have this sequence, in which
    case you have to use the tricks I described earlier.)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 该表格显示你正在运行 PowerShell 3.0 版本，支持 `--%` 转义序列。（旧版本的 PowerShell 不支持此序列，这种情况下你必须使用我之前描述的技巧。）
- en: 'When using the `--%` escape sequence, you don’t have to escape the `$` symbol.
    It also lets you escape the double quotes with backslashes inside the one-liner.
    For example, here’s how the one-liner that double-spaces lines looks with the
    `--%` escape sequence:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `--%` 转义序列时，你不需要转义 `$` 符号。它还允许你在一行命令中使用反斜杠转义双引号。例如，以下是使用 `--%` 转义序列的双倍行间距命令：
- en: '[PRE44]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You can also use the `qq/.../` operator to avoid escaping double quotes inside
    the one-liner:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 `qq/.../` 运算符来避免在一行命令中转义双引号：
- en: '[PRE45]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Here’s how you can write the other version of the same one-liner in PowerShell
    3.0 and later:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你在 PowerShell 3.0 或更高版本中编写相同一行命令的另一种方式：
- en: '[PRE46]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'And this is how the one-liner that numbers the lines looks:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这是给行编号的一行命令的写法：
- en: '[PRE47]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Here’s the one-liner that uses a regular expression to see if a number is prime:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用正则表达式判断一个数是否为质数的一行命令：
- en: '[PRE48]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'And here’s the one-liner that converts IPs to integers:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将 IP 转换为整数的一行命令：
- en: '[PRE49]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: As you can see, running one-liners in PowerShell is quite tricky and requires
    several workarounds. Again, I recommend that you install win-bash as described
    in “Bash on Windows” on page 106 to avoid having to implement these workarounds.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在 PowerShell 中运行一行命令相当棘手，并且需要一些变通方法。再次推荐你按照第 106 页的“Windows 上的 Bash”部分安装
    win-bash，以避免必须实现这些变通方法。
