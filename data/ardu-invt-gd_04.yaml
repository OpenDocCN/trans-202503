- en: 3 The Nine-Pixel Animation Machine
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3 九像素动画机
- en: We use monitors every day, on our phones, computers, tablets, and TVs. The displays
    on most present-day monitors are composed of millions of pixels, short for picture
    elements. Pixels are tiny points that the computer can light up in different colors;
    all the pixels together make up the text, images, and videos on the screen.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们每天都在使用显示器，无论是在手机、电脑、平板还是电视上。大多数现代显示器的显示屏由数百万个像素（即图像元素）组成。像素是计算机可以用不同颜色点亮的微小点；所有像素共同组成了屏幕上的文字、图像和视频。
- en: In this project, you’re going to build a simple monitor using LEDs. You’ll expand
    on your work with blinking LEDs and learn to use custom functions in Arduino.
    Finally, you’ll learn how to display secret characters on your very own Nine-Pixel
    Animation Machine. You can see ours in [Figure 3-1](ch03.xhtml#ch03fig01).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用LED构建一个简单的显示器。你将扩展之前关于闪烁LED的工作，并学习在Arduino中使用自定义函数。最后，你将学习如何在你自己的九像素动画机上显示秘密字符。你可以在[图3-1](ch03.xhtml#ch03fig01)中看到我们的设备。
- en: '**FIGURE 3-1:** A completed Nine-Pixel Animation Machine'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**图3-1：** 完成的九像素动画机'
- en: '![Image](../images/fig3_1.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig3_1.jpg)'
- en: You can use the Nine-Pixel Animation Machine to show letters and numbers, draw
    basic geometric shapes, and make plenty of other fun pixel art.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用九像素动画机显示字母和数字，绘制基本的几何图形，制作其他有趣的像素艺术。
- en: '**MATERIALS TO GATHER**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**需要准备的材料**'
- en: For this project, you’ll need a few more electronic components than you used
    in [Project 2](ch02.xhtml#ch02), specifically more LEDs. This project is simpler
    in terms of enclosure construction, however. The materials you’ll need are shown
    in [Figures 3-2](ch03.xhtml#ch03fig02) and [3-3](ch03.xhtml#ch03fig03).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你需要比[项目2](ch02.xhtml#ch02)更多的电子元件，尤其是更多的LED。然而，这个项目在外壳构建方面更简单。你需要的材料如[图3-2](ch03.xhtml#ch03fig02)和[图3-3](ch03.xhtml#ch03fig03)所示。
- en: '**NOTE**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*In our project all the LEDs are the same color so the patterns are easier
    to see, but if you don’t have nine LEDs of the same color, you can mix them up.*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*在我们的项目中，所有LED的颜色相同，因此图案更容易看清。如果你没有九个相同颜色的LED，可以混合使用它们。*'
- en: '**Electronic Parts**'
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**电子元件**'
- en: • One SparkFun RedBoard (DEV-13975), Arduino Uno (DEV-11021), or any other Arduino-compatible
    board
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: • 一块SparkFun RedBoard（DEV-13975）、Arduino Uno（DEV-11021）或任何其他兼容Arduino的板子
- en: • One USB Mini-B cable (CAB-11301 or your board’s USB cable; not shown)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: • 一条USB Mini-B电缆（CAB-11301或你的板子自带的USB电缆；未显示）
- en: • One solderless breadboard (PRT-12002)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: • 一块无焊接面包板（PRT-12002）
- en: • Nine LEDs, preferably of the same color (COM-10049 for a pack of 20 red and
    yellow LEDs)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: • 九个LED，最好是相同颜色的（COM-10049，一包20个红色和黄色LED）
- en: • Nine 330 Ω resistors (COM-11507 for a pack of 20)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: • 九个330Ω电阻（COM-11507，一包20个）
- en: • Male-to-male jumper wires (PRT-11026)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: • 公对公跳线（PRT-11026）
- en: • Male-to-female jumper wires (PRT-09140*)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: • 公对母跳线（PRT-09140*）
- en: • (Optional) One 4 AA battery holder (PRT-09835*; not shown)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: • （可选）一个4个AA电池的电池架（PRT-09835*；未显示）
- en: '**NOTE**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The parts marked with an asterisk (*) do not come with the standard SparkFun
    Inventor’s Kit but are available in the separate add-on kit.*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*带有星号（*）标记的部分不包含在标准的SparkFun发明者套件中，但可以通过单独的附加套件获得。*'
- en: '**FIGURE 3-2:** Components for the Nine-Pixel Animation Machine'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**图3-2：** 九像素动画机的组件'
- en: '![Image](../images/fig3_2.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig3_2.jpg)'
- en: '**Other Materials and Tools**'
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**其他材料和工具**'
- en: • Pencil
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: • 铅笔
- en: • Craft knife
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: • 工艺刀
- en: • Metal ruler
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: • 金属直尺
- en: • Wire cutters
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: • 剪线钳
- en: • Glue (hot glue gun or craft glue)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: • 胶水（热熔胶枪或工艺胶水）
- en: • Graph paper (not shown)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: • 方格纸（未显示）
- en: • (Optional) Drill and a 3/16-inch drill bit
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: • （可选）电钻和3/16英寸的钻头
- en: • (Optional) Soldering iron
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: • （可选）电烙铁
- en: • (Optional) Solder
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: • （可选）焊锡
- en: • (Optional) Helping hands (not shown)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: • （可选）辅助工具（未显示）
- en: • Cardboard sheet (roughly 8 × 11 inches, or 20.5 × 30 cm; not shown)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: • 一张纸板（大约8 × 11英寸，或20.5 × 30厘米；未显示）
- en: • Enclosure template (see [Figure 3-13](ch03.xhtml#ch03fig13) on page [83](ch03.xhtml#page_83))
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: • 外壳模板（请参见[图3-13](ch03.xhtml#ch03fig13)在[83页](ch03.xhtml#page_83)）
- en: '**FIGURE 3-3:** Recommended tools'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**图3-3：** 推荐工具'
- en: '![Image](../images/fig3_3.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig3_3.jpg)'
- en: '**BUILD THE NINE-PIXEL ANIMATION MACHINE PROTOTYPE**'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建九像素动画机原型**'
- en: This simple pixel art display will teach you to manage lots of wires in one
    circuit, which is important as your circuits grow larger. First, you’ll use the
    breadboard to make sure the circuit works, test a sketch, and get comfortable
    with all of the jumper wires. (We’ll show you how to transfer the LEDs to a display
    housing in “[Cardboard Construction](ch03.xhtml#ch03lev2sec6)” on page [83](ch03.xhtml#page_83).)
    Notice that the circuit diagram in [Figure 3-4](ch03.xhtml#ch03fig04) looks a
    lot like [Figure 2-6](ch02.xhtml#ch02fig06) on page [43](ch02.xhtml#page_43).
    That’s because this project uses the same LED circuit, but instead of just three
    LEDs, it uses nine LEDs, each of which is independently controlled by a pin on
    the Arduino.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的像素艺术显示器将教你如何在一个电路中管理大量的电线，这对于电路变得越来越复杂时非常重要。首先，你将使用面包板确保电路正常工作，测试一个草图，并熟悉所有的跳线。（我们将在
    “[纸板结构](ch03.xhtml#ch03lev2sec6)” 第 [83](ch03.xhtml#page_83) 页中向你展示如何将 LED 转移到显示外壳中。）请注意，[图
    3-4](ch03.xhtml#ch03fig04) 中的电路图与第 [43](ch02.xhtml#page_43) 页的 [图 2-6](ch02.xhtml#ch02fig06)
    非常相似。原因是这个项目使用的是相同的 LED 电路，不过它不仅仅使用三个 LED，而是使用九个 LED，每个 LED 都由 Arduino 的一个引脚独立控制。
- en: '**FIGURE 3-4:** Schematic diagram for the Nine-Pixel Animation Machine'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-4：** 九像素动画机的原理图'
- en: '![Image](../images/fig3_4.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig3_4.jpg)'
- en: In this section, you’ll use the breadboard to connect all nine LEDs to pins
    on the Arduino. With your components and jumper wires in hand, build the circuit
    in [Figure 3-5](ch03.xhtml#ch03fig05) on your breadboard. If you want to practice
    building smaller LED circuits first, flip back to “[Connect the Red LED to the
    Breadboard](ch02.xhtml#ch02lev2sec3)” on page [44](ch02.xhtml#page_44) for a refresher.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将使用面包板将所有九个 LED 连接到 Arduino 的引脚上。准备好你的元件和跳线后，在面包板上搭建 [图 3-5](ch03.xhtml#ch03fig05)
    中的电路。如果你想先练习搭建更小的 LED 电路，可以翻回 “[将红色 LED 连接到面包板](ch02.xhtml#ch02lev2sec3)” 第 [44](ch02.xhtml#page_44)
    页，复习一下。
- en: '**FIGURE 3-5:** Nine LEDs connected to the Arduino, with the pin 13 LED at
    the top and the pin 5 LED at the bottom'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-5：** 九个 LED 灯连接到 Arduino，其中引脚 13 的 LED 位于顶部，引脚 5 的 LED 位于底部'
- en: '![Image](../images/fig3_5.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig3_5.jpg)'
- en: 'Wiring up nine LEDs can make for a cluttered breadboard. To keep your breadboard
    organized, connect the ground rail (–) on the left side of your breadboard to
    the GND pin on the Arduino first. That’s the black wire in [Figure 3-5](ch03.xhtml#ch03fig05).
    Then, connect your first LED’s negative leg (the shorter one) to this ground rail
    through a 330 Ω resistor. In [Figure 3-5](ch03.xhtml#ch03fig05), the long leg
    of the LED is in row 1, and the shorter leg is in row 2\. Finally, connect the
    long leg of the LED to pin 13 with a jumper wire from pin 13 of the Arduino to
    row 1 of the breadboard. Connect the other eight LEDs to pins 12 through 5 in
    the same way. And remember: the LED’s short leg is its negative leg. As you’re
    building this circuit, make sure that the shorter leg of each LED is connected
    to the ground rail of the breadboard through a resistor. When you’re done, your
    circuit should resemble the circuit in [Figure 3-6](ch03.xhtml#ch03fig06).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接线九个 LED 可能会让面包板显得杂乱无章。为了保持面包板的整洁，首先将面包板左侧的地线（–）连接到 Arduino 的 GND 引脚。这就是 [图
    3-5](ch03.xhtml#ch03fig05) 中的黑色线。然后，将第一个 LED 的负极（较短的一端）通过一个 330 Ω 电阻连接到这个地线。在
    [图 3-5](ch03.xhtml#ch03fig05) 中，LED 的长腿位于第 1 行，短腿位于第 2 行。最后，将 LED 的长腿用一根跳线从 Arduino
    的引脚 13 连接到面包板的第 1 行。以相同的方式，将其他八个 LED 连接到引脚 12 到引脚 5。记住：LED 的短腿是负极。在搭建电路时，确保每个
    LED 的短腿通过电阻连接到面包板的地线。当你完成后，你的电路应该像 [图 3-6](ch03.xhtml#ch03fig06) 中的电路一样。
- en: '**FIGURE 3-6:** Final prototype circuit of nine LEDs connected to the Arduino,
    with the pin 13 LED at the top and the pin 5 LED at the bottom'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-6：** 最终原型电路，九个 LED 灯连接到 Arduino，其中引脚 13 的 LED 位于顶部，引脚 5 的 LED 位于底部'
- en: '![Image](../images/fig3_6.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig3_6.jpg)'
- en: Once you’ve wired the nine LEDs, open the Arduino IDE and plug the Arduino into
    your computer with the USB cable. If you uploaded a sketch to the Arduino in a
    previous project, you might see the LEDs light up as it runs the last sketch you
    uploaded. Now let’s take a look at how you’ll code up all nine of these LEDs.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你接好九个 LED，打开 Arduino IDE，并使用 USB 数据线将 Arduino 连接到计算机。如果你在之前的项目中已经将草图上传到 Arduino，你可能会看到
    LED 灯亮起，因为它在运行你最后上传的草图。现在，让我们来看看如何编写代码控制这九个 LED。
- en: '**PROGRAM THE NINE-PIXEL ANIMATION MACHINE**'
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程九像素动画机**'
- en: In previous projects, it’s been simple enough to use a bunch of `digitalWrite()`
    functions and `delay()` functions to control LEDs. But with nine LEDs, you’d have
    a really messy `loop()` function! Instead, you can write your own *custom function*
    to blink a single LED, and then use this function to control all the LEDs.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前的项目中，使用一堆`digitalWrite()`函数和`delay()`函数来控制 LED 是相对简单的。但如果有九个 LED，你的`loop()`函数就会变得非常混乱！相反，你可以编写自己的*自定义函数*来闪烁一个
    LED，然后使用这个函数来控制所有的 LED。
- en: '**What Are Custom Functions?**'
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**什么是自定义函数？**'
- en: The Arduino language has 60 or so *built-in* (or predefined) functions that
    make it easier for you to interact with hardware using simple, single-line instructions.
    The `digitalWrite()` and `delay()` functions are two examples. Behind the scenes,
    the `digitalWrite()` function consists of more than 20 lines of code. Most of
    that code is complex, but the `digitalWrite()` function is easy to understand.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino 语言大约有 60 个 *内置*（或预定义）函数，它们通过简单的单行指令使你更容易与硬件进行交互。`digitalWrite()`和`delay()`函数就是两个例子。在幕后，`digitalWrite()`函数由
    20 多行代码组成。尽管大部分代码比较复杂，但`digitalWrite()`函数本身很容易理解。
- en: Even when you understand a big sketch, typing 20 or more lines of code each
    time you want to turn an LED on or off is tedious and error prone. Arduino’s built-in
    functions cover common tasks, but when you need to do something specific to your
    sketch, you’ll want to write custom functions. Custom functions allow you to easily
    reuse code in other sketches, and they’ll make your `loop()` functions easier
    to read.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你理解了一个大型草图，每次想要打开或关闭一个 LED 时，输入 20 行或更多的代码仍然是繁琐且容易出错的。Arduino 内置的函数可以处理常见任务，但当你需要对草图进行特定操作时，你会希望编写自定义函数。自定义函数可以让你轻松地在其他草图中重用代码，并且它们能让你的`loop()`函数更易于阅读。
- en: '**Write a Custom Function**'
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**编写自定义函数**'
- en: You can use custom functions to teach the Arduino new commands. Your first test
    function will blink an LED on and then off again, using a modified version of
    the code in [Listing 3-1](ch03.xhtml#ch03ex01).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用自定义函数来教 Arduino 新的命令。你的第一个测试函数将使一个 LED 闪烁，先点亮再熄灭，使用修改版的[清单 3-1](ch03.xhtml#ch03ex01)中的代码。
- en: '**LISTING 3-1:** A simple sketch that blinks an LED'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 3-1：** 一个简单的草图，用于闪烁 LED'
- en: '[PRE0]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code should look similar to the Blink example from [Project 1](ch01.xhtml#ch01)
    ([Listing 1-1](ch01.xhtml#ch01ex01) on page [28](ch01.xhtml#page_28)). However,
    here we are using pin 13 explicitly instead of using the `LED_BUILTIN` system
    constant. This code turns the LED on, waits for a second, turns the LED off again,
    and then waits for another second before repeating. You’ll need to do this a lot
    in later projects, so we’ll show you how to put this code in a custom `blink()`
    function. To make your custom function as useful as possible, you’ll write it
    in a way that allows you to use any pin for any delay time.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码应该与[项目 1](ch01.xhtml#ch01)中的 Blink 示例类似（[清单 1-1](ch01.xhtml#ch01ex01)在第[28](ch01.xhtml#page_28)页）。然而，在这里我们明确使用引脚
    13，而不是使用`LED_BUILTIN`系统常量。这段代码将 LED 点亮，等待一秒钟，再将 LED 熄灭，然后等待另一秒钟后再次执行。你将在以后的项目中频繁使用此代码，因此我们将展示如何将这段代码放入自定义的`blink()`函数中。为了使你的自定义函数尽可能有用，你将以一种允许你为任何引脚和任何延迟时间使用该函数的方式来编写它。
- en: First, open a new sketch, copy the code from [Listing 3-1](ch03.xhtml#ch03ex01)
    into it, and save it. Then, define the `blink()` function below your `setup()`
    and `loop()` functions, as shown in [Listing 3-2](ch03.xhtml#ch03ex02).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开一个新的草图，将[清单 3-1](ch03.xhtml#ch03ex01)中的代码复制进去并保存。然后，在`setup()`和`loop()`函数下方定义`blink()`函数，如[清单
    3-2](ch03.xhtml#ch03ex02)所示。
- en: '**LISTING 3-2:** A skeleton for a custom `blink()` function'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 3-2：** 自定义`blink()`函数的框架'
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is just the skeleton of the function. Function definitions always specify
    the data type that the function will return first ➊. The `blink()` function asks
    the Arduino to perform a task without expecting any data back, so, just like the
    `setup()` and `loop()` functions, its data type is `void`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是函数的框架。函数定义总是首先指定函数将返回的数据类型➊。`blink()`函数要求 Arduino 执行一个任务而不期待任何数据返回，因此，和`setup()`与`loop()`函数一样，它的数据类型是`void`。
- en: Next comes the function’s name ➋, which in this case is `blink`. You can name
    Arduino functions almost anything you want, but they can’t start with a number
    or include any spaces or special characters. Also, to make sure the function’s
    purpose is clear when you’re reading over your sketch, we recommend using a name
    that’s descriptive and easy to remember.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是函数的名称 ➋，在这个例子中是`blink`。你几乎可以随意给Arduino函数命名，但它们不能以数字开头，也不能包含空格或特殊字符。此外，为了确保在阅读草图时函数的用途清晰明了，我们建议使用一个既具有描述性又容易记住的名称。
- en: After naming the function, define any parameters the function needs to work
    in parentheses ➌. To make `blink()` as reusable as possible, provide a pin number
    and a delay time as parameters. These allow you to specify which LED to blink
    and for how long. Each of the `blink()` function’s parameters is an `int`. Notice
    that defining parameters is similar to declaring variables. That’s because parameters
    are basically variables that can only be used inside the function.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 命名函数后，在括号中定义函数所需的参数 ➌。为了使`blink()`函数尽可能多次使用，提供一个引脚号和延迟时间作为参数。这样你就可以指定哪个LED要闪烁，以及闪烁的时长。每个`blink()`函数的参数都是`int`类型。注意，定义参数类似于声明变量。因为参数本质上是只能在函数内使用的变量。
- en: Finally, a custom function has its own set of curly brackets, which enclose
    all of the code you want a call to the function to represent. For the `blink()`
    function, this is the set of `digitalWrite()` and `delay()` functions from [Listing
    3-1](ch03.xhtml#ch03ex01), as shown in [Listing 3-3](ch03.xhtml#ch03ex03). Add
    the code inside the curly brackets to your `blink()` function now.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，自定义函数有自己的一组花括号，它们包含了你希望函数调用代表的所有代码。对于`blink()`函数来说，这就是[示例 3-1](ch03.xhtml#ch03ex01)中的`digitalWrite()`和`delay()`函数，如[示例
    3-3](ch03.xhtml#ch03ex03)所示。现在把代码加到`blink()`函数的花括号内吧。
- en: '**LISTING 3-3:** Custom `blink()` function'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 3-3：** 自定义`blink()`函数'
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice that in the `digitalWrite()` and `delay()` function calls, the `blink()`
    function replaces the pin number `13` and the delay of `1000` ms with the `pinNumber`
    and `delayTime` parameters, respectively.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在`digitalWrite()`和`delay()`函数调用中，`blink()`函数分别用`pinNumber`和`delayTime`参数替代了引脚号`13`和延迟`1000`毫秒。
- en: '**Use a Custom Function**'
  id: totrans-69
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**使用自定义函数**'
- en: Now you can use your custom function in place of the code in your `loop()` function,
    as in [Listing 3-4](ch03.xhtml#ch03ex04).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在`loop()`函数中使用你的自定义函数，像在[示例 3-4](ch03.xhtml#ch03ex04)中那样。
- en: '**LISTING 3-4:** Complete sketch using the new custom `blink()` function'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 3-4：** 使用新自定义的`blink()`函数完成的草图'
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The modified `loop()` function calls the `blink()` function and passes it the
    pin number of the LED to blink (`13`) and the amount of time the light should
    stay on or off, in milliseconds (we suggest using `1000`, for 1 second). That’s
    it! Doesn’t this code look a lot cleaner and clearer?
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的`loop()`函数调用了`blink()`函数，并传入了要闪烁的LED的引脚号（`13`）以及灯光应该保持开启或关闭的时间，单位为毫秒（建议使用`1000`，即1秒）。就是这样！这个代码是不是看起来更简洁、清晰？
- en: Upload this sketch to your Arduino, and the LED on pin 13 should blink. Congratulations!
    You just “taught” the Arduino what `blink()` means, and you condensed four lines
    of code into a single instruction.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个草图上传到你的Arduino，13号引脚上的LED应该会开始闪烁。恭喜！你刚刚“教会”了Arduino什么是`blink()`，并将四行代码浓缩成了一条指令。
- en: But custom functions are just one key to this project. You’ll also want to plan
    some nine-pixel patterns ahead of time to make them easier to program, so let’s
    do that now.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，自定义函数只是这个项目的一个关键。你还需要提前规划一些九像素的图案，以便更容易编程，现在就让我们来做这件事。
- en: '**TRY IT OUT: PLAY WITH PATTERNS**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**试试看：玩转图案**'
- en: 'Before you finish the Nine-Pixel Animation Machine, spend some quality time
    with your more powerful `blink()` sketch. For example, change your `loop()` function
    as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成九像素动画机之前，花些时间好好玩玩你更强大的`blink()`草图。例如，将你的`loop()`函数修改如下：
- en: '[PRE4]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This makes the LED blink for 100 ms, followed by a longer blink of 2,000 ms.
    Try blinking the other LEDs to create your own patterns and sequences!
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使LED闪烁100毫秒，然后进行一次较长的闪烁，时间为2000毫秒。试着闪烁其他LED，创造属于你自己的图案和序列！
- en: '**Design Your Artwork**'
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设计你的艺术作品**'
- en: Grab colored pencils and graph paper, and put on your artist’s hat! You’re going
    to make some pixel art to display on the Nine-Pixel Animation Machine.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 拿出彩色铅笔和方格纸，戴上你的艺术家帽子！你将要制作一些像素艺术，展示在九像素动画机上。
- en: Start by drawing several 3 × 3 grids, or print out a copy of the template shown
    in [Figure 3-7](ch03.xhtml#ch03fig07), which you’ll find in this book’s resource
    files. These drawings don’t have to be perfect; you’re just sketching out a few
    ideas.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 首先画几个3 × 3的网格，或者打印出[图 3-7](ch03.xhtml#ch03fig07)中显示的模板，你可以在本书的资源文件中找到该模板。这些图形不必完美；你只是在草绘一些想法。
- en: '**FIGURE 3-7:** Blank grid planning template'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-7：** 空白网格规划模板'
- en: '![Image](../images/fig3_7.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig3_7.jpg)'
- en: 'We numbered the pixels with 13 in the upper-left corner and 5 in the lower-right
    corner. These numbers correspond to the LED pin numbers on the Arduino; this is
    how you’ll control the LEDs in the Nine-Pixel Animation Machine. When your canvas
    is ready, get creative: fill in the pixels to make your own patterns. [Figure
    3-8](ch03.xhtml#ch03fig08) shows some examples that we came up with during a department
    meeting . . . don’t tell our boss!'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在左上角标记了13号像素，在右下角标记了5号像素。这些数字对应Arduino上的LED引脚编号；这就是你如何控制九像素动画机中的LED。当你的画布准备好后，发挥创造力：填充像素以制作自己的图案。[图
    3-8](ch03.xhtml#ch03fig08)展示了我们在部门会议中想出的几个例子……别告诉我们老板！
- en: '**FIGURE 3-8:** Some pixel pattern examples'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-8：** 一些像素图案示例'
- en: '![Image](../images/fig3_8.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig3_8.jpg)'
- en: When you show these patterns and shapes in sequence, you can create animations!
    First, we’ll teach you to program two simple shapes, and then we’ll tackle a complete
    animation.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当你按顺序显示这些图案和形状时，就可以创建动画了！首先，我们将教你编程两个简单的形状，然后我们将处理一个完整的动画。
- en: '**The Test Sketch**'
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**测试草图**'
- en: Create a new sketch in the Arduino IDE, and add the `setup()` and `loop()` functions
    in [Listing 3-5](ch03.xhtml#ch03ex05).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在Arduino IDE中创建一个新的草图，并添加[清单 3-5](ch03.xhtml#ch03ex05)中的`setup()`和`loop()`函数。
- en: '**LISTING 3-5:** `setup()` function for the Nine-Pixel Animation Machine'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 3-5：** 九像素动画机的`setup()`函数'
- en: '[PRE5]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**NOTE**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We also suggest adding a comment with a diagram of the LED placement. Describing
    the circuit you’re writing code for in the sketch will help others re-create it
    and will remind you of the structure you’re working with as you develop your code.*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们还建议添加一段带有LED布置图的注释。在草图中描述你正在编写代码的电路，将帮助其他人重现它，并且在你开发代码时，也能提醒你自己结构。*'
- en: This project uses nine LEDs on nine digital GPIO pins (13 through 5), so this
    `setup()` function has nine `pinMode()` functions. They’re all set as `OUTPUT`
    since they’re controlling LEDs.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目使用九个LED，连接到九个数字GPIO引脚（从13到5），因此`setup()`函数中有九个`pinMode()`函数。它们都被设置为`OUTPUT`，因为它们控制LED。
- en: '**Write a Function to Draw an X**'
  id: totrans-96
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**编写一个绘制 X 的函数**'
- en: With the `pinMode()` functions in place, look at the shapes you drew by hand
    and pay attention to the numbers; they’ll help you write your custom function.
    [Figure 3-9](ch03.xhtml#ch03fig09) shows an example to test with—a simple *X*
    pattern.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好`pinMode()`函数后，看看你手绘的图形并注意数字；它们会帮助你编写自定义函数。[图 3-9](ch03.xhtml#ch03fig09)展示了一个可以测试的例子——一个简单的*X*图案。
- en: '**FIGURE 3-9:** A nine-pixel *X*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-9：** 九像素*X*'
- en: '![Image](../images/fig3_9.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig3_9.jpg)'
- en: The *X* pattern in [Figure 3-9](ch03.xhtml#ch03fig09) translates to the set
    of `digitalWrite()` functions in [Listing 3-6](ch03.xhtml#ch03ex06).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 3-9](ch03.xhtml#ch03fig09)中的*X*图案对应清单 3-6 中的`digitalWrite()`函数集合。'
- en: '**LISTING 3-6:** Code for displaying an *X* on the nine LEDs'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 3-6：** 在九个LED上显示*X*的代码'
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These `digitalWrite()` function calls turn on only the LEDs on the grid’s diagonals
    and turn off the rest. But drawing a single *X* takes nine lines of code! Instead
    of writing all of this out by hand every time, you can create a custom function
    to execute all of these calls with just one line of code.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这些`digitalWrite()`函数调用仅打开网格对角线上的LED，并关闭其余的LED。但绘制一个单独的*X*图案需要九行代码！每次手动编写这些代码太麻烦，你可以创建一个自定义函数，用一行代码执行所有这些调用。
- en: Below the curly brackets of the `loop()` function, create a custom function
    named `xChar()` with the code in [Listing 3-7](ch03.xhtml#ch03ex07).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在`loop()`函数的花括号下面，创建一个名为`xChar()`的自定义函数，并使用[清单 3-7](ch03.xhtml#ch03ex07)中的代码。
- en: '**LISTING 3-7:** The `xChar()` custom function'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 3-7：** `xChar()` 自定义函数'
- en: '[PRE7]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We named this custom function `xChar()` because it displays an *X* character.
    This function won’t return anything, so its data type is `void`. Since the `digitalWrite()`
    calls from [Listing 3-6](ch03.xhtml#ch03ex06) are inside this single custom function,
    you can keep your `loop()` code simple. Call the function `xChar()` inside your
    existing `loop()`, as shown in Listing 3-8.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这个自定义函数命名为`xChar()`，因为它显示了一个*X*字符。这个函数不会返回任何内容，所以它的数据类型是`void`。由于[列表3-6](ch03.xhtml#ch03ex06)中的`digitalWrite()`调用都在这个自定义函数内，你可以保持`loop()`代码简洁。在现有的`loop()`中调用`xChar()`函数，如列表3-8所示。
- en: '**LISTING 3-8:** `loop()` function with `xChar()` function call'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表3-8：** 包含`xChar()`函数调用的`loop()`函数'
- en: '[PRE8]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is a small step, but it’s very important. If you forget to actually call
    your custom function, its code will never run, and you’ll never display your *X*.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个小步骤，但非常重要。如果你忘记调用自定义函数，它的代码将永远不会运行，你的*X*字符也无法显示。
- en: Upload this sketch to your Arduino now. Your LEDs are still in a vertical line
    rather than a grid, but your sketch can still help you test that you’ve got everything
    wired and coded correctly. Instead of an *X*, you should see every other LED turn
    on, starting at the top, as shown in [Figure 3-10](ch03.xhtml#ch03fig10). If the
    LEDs don’t light up as expected, double-check your wiring against the diagram
    in [Figure 3-5](ch03.xhtml#ch03fig05) on page [71](ch03.xhtml#page_71), and check
    your `digitalWrite()` functions to make sure they’re all correct as well.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将这个草图上传到你的Arduino中。虽然你的LED依然排列成垂直线，而不是网格，但这个草图仍然可以帮助你测试电路和代码是否正确。你应该看到每隔一个LED点亮，从顶部开始，如[图3-10](ch03.xhtml#ch03fig10)所示。如果LED没有按预期点亮，请再次检查与[图3-5](ch03.xhtml#ch03fig05)中的电路图（第71页）对比你的接线，并确保所有的`digitalWrite()`函数都正确。
- en: When you can see the right pattern, read on to create a second character.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当你看到正确的图案时，继续创建第二个字符。
- en: '**FIGURE 3-10:** Prototype and correct sequence for an *X*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**图3-10：** *X*字符的原型和正确的顺序'
- en: '![Image](../images/fig3_10.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig3_10.jpg)'
- en: '**Write a Function to Draw an O**'
  id: totrans-115
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**编写一个绘制O字符的函数**'
- en: Next, you’ll create an *O* like the one in [Figure 3-11](ch03.xhtml#ch03fig11)
    to go with the *X*.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将创建一个像[图3-11](ch03.xhtml#ch03fig11)中的*O*，以配合*X*字符。
- en: '**FIGURE 3-11:** A nine-pixel *O*'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**图3-11：** 九像素的*O*'
- en: '![Image](../images/fig3_11.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig3_11.jpg)'
- en: 'Pro tip: you can work smarter rather than harder here. Copy the entire `xChar()`
    function, paste the copy after the last curly bracket in `xChar()`, change its
    name to `oChar()`, and tweak it to look like Listing 3-9.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 专业提示：你可以通过更聪明的方式工作，而不是更辛苦。复制整个`xChar()`函数，将副本粘贴到`xChar()`的最后一个大括号之后，将其名称改为`oChar()`，并调整其使之像列表3-9中的样子。
- en: '**LISTING 3-9:** The `oChar()` custom function'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表3-9：** `oChar()`自定义函数'
- en: '[PRE9]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The only difference between `xChar()` and `oChar()` is which LEDs are turned
    on and which are turned off. Whereas `xChar()` turns on alternating LEDs, `oChar()`
    turns on every LED except the center one.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`xChar()`和`oChar()`之间唯一的区别在于哪些LED被点亮，哪些LED熄灭。`xChar()`会点亮交替的LED，而`oChar()`则点亮除了中心LED以外的所有LED。'
- en: '**TRY IT OUT: WRITE A CUSTOM FUNCTION FOR YOUR OWN IMAGE**'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**动手尝试：为你的图像编写一个自定义函数**'
- en: We showed you how to write functions to draw an *X* and an *O*, but we’re sure
    you have your own lovely pixel art images in mind. Create a function that will
    blink out the patterns you made, and hang on to it for when you’re done building
    the Nine-Pixel Animation Machine.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向你展示了如何编写绘制*X*和*O*的函数，但我们相信你脑海中一定有自己喜欢的像素艺术图案。创建一个函数来展示你制作的图案，并将其保存，以便在完成九像素动画机时使用。
- en: '**Display the X and the O**'
  id: totrans-125
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**显示X和O字符**'
- en: The goal now is to show an *X* character for a bit, then show an *O* character,
    and finally go back to the *X*. To show each character for a set time, you can
    add the `oChar()` function to your existing loop and slow the loop down with `delay()`
    calls. Update your sketch so that it looks like [Listing 3-10](ch03.xhtml#ch03ex010).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的目标是先显示一个*X*字符，然后显示一个*O*字符，最后再返回到*X*。为了在固定的时间内显示每个字符，你可以将`oChar()`函数添加到现有的循环中，并使用`delay()`函数减慢循环速度。更新你的草图，使其像[列表3-10](ch03.xhtml#ch03ex010)一样。
- en: '**LISTING 3-10:** The `loop()` looks similar to the one in the Blink sketch
    but uses `xChar()` and `oChar()` instead of `digitalWrite()`.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表3-10：** `loop()`函数看起来类似于Blink示例中的函数，但使用了`xChar()`和`oChar()`代替了`digitalWrite()`。'
- en: '[PRE10]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This loop displays an *X* for 500 ms and then switches to an *O* for 500 ms.
    Upload the updated sketch to your Arduino, and run it to see how it works. Every
    LED except the middle one lights up when `oChar()` is called. [Figure 3-12](ch03.xhtml#ch03fig12)
    shows what you’ll see as the LEDs blink.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这个循环会显示一个*X*，持续500毫秒，然后切换为一个*O*，也持续500毫秒。将更新后的草图上传到你的Arduino，并运行它，看看它是如何工作的。每个LED灯（除了中间的那个）都会在调用`oChar()`时亮起。[图3-12](ch03.xhtml#ch03fig12)展示了当LED灯闪烁时你会看到的效果。
- en: '**FIGURE 3-12:** Switching between two patterns'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**图3-12：** 在两种图案之间切换'
- en: '![Image](../images/fig3_12.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig3_12.jpg)'
- en: Save your sketch now, because you’ll build on it later. But as long as the LEDs
    in this circuit are on the breadboard, they won’t display any recognizable picture.
    So next, we’ll show you how to make the display to see the Nine-Pixel Animation
    Machine in all its tiny glory.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在保存你的草图，因为稍后你会在其基础上进行扩展。但只要这个电路中的LED灯仍然在面包板上，它们就不会显示任何可识别的图像。所以接下来，我们将向你展示如何制作显示器，让你能够看到九像素动画机的微小辉煌。
- en: '**BUILD THE NINE-PIXEL ANIMATION MACHINE ENCLOSURE**'
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建九像素动画机外壳**'
- en: The enclosure for this project is simply a cardboard display with holes for
    LEDs. There’s wiring to do as well, but once that’s done, you’ll be able to make
    all kinds of pixel art.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目的外壳只是一个带有LED灯孔的硬纸板显示器。还需要进行一些接线，但一旦完成，你就可以制作各种像素艺术了。
- en: '**Cardboard Construction**'
  id: totrans-135
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**硬纸板构建**'
- en: Find a sheet of cardboard that is clean and free of creases and bends. Our designs
    are based around cardboard about 1/8 inch thick, but you can use any similar board
    or panel materials. Some materials will be easier to cut than others, so pick
    yours based on the tools you have.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 找一张干净且没有折痕和弯曲的硬纸板。我们的设计是基于大约1/8英寸厚的硬纸板，但你也可以使用任何类似的板材或面板材料。有些材料比其他材料更容易切割，因此可以根据你拥有的工具选择适合的材料。
- en: '**Cut Out the Parts**'
  id: totrans-137
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**切割零件**'
- en: Open the template shown in [Figure 3-13](ch03.xhtml#ch03fig13) in this book’s
    resource files (*[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*)
    and trace it onto your cardboard. Try to line your templates up with the edge
    of the cardboard to make cutting easier.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 打开本书资源文件中显示的[图3-13](ch03.xhtml#ch03fig13)模板，并将其描绘到你的硬纸板上。尽量将模板与硬纸板的边缘对齐，以便更容易切割。
- en: '**FIGURE 3-13:** Enclosure template for the Nine-Pixel Animation Machine (not
    full size)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**图3-13：** 九像素动画机外壳模板（非实际尺寸）'
- en: '![Image](../images/fig3_13.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig3_13.jpg)'
- en: 'Once you’ve traced your pieces, cut them out. We highly recommend using a sharp
    craft knife and a metal ruler to get clean edges for your project. Remember craft
    knife safety: always pull (don’t push) the blade, and make multiple passes rather
    than digging in deeply on your first go.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你描绘好了零件，开始切割它们。我们强烈推荐使用锋利的手工刀和金属尺，以确保切割边缘整齐。记住手工刀的安全：总是拉刀（不要推），并且多次轻轻切割，而不是第一次就用力深切。
- en: After cutting your cardboard parts, make the LED holes in the front piece. You
    can drill them as shown in [Figure 3-14](ch03.xhtml#ch03fig14), punch them with
    a hole punch, or even poke them out with a pencil. Just be sure to have a free
    LED on hand to test the size of each hole for a snug fit. If the holes are a little
    too large and you don’t mind making the LEDs a permanent feature of the project,
    you can hot glue them in.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 切割好硬纸板零件后，在前面板上打上LED灯孔。你可以按照[图3-14](ch03.xhtml#ch03fig14)中的示意图进行钻孔，使用孔打孔器，甚至用铅笔戳出来。只需确保手边有一个LED灯来测试每个孔的大小，确保它们能合适地安装。如果孔稍微大了一点，而且你不介意将LED灯固定在项目上，你可以使用热胶将它们固定。
- en: '**FIGURE 3-14:** Drilling holes for LEDs. Use caution when drilling or ask
    an adult for help.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**图3-14：** 为LED灯钻孔。钻孔时请小心，或寻求成人的帮助。'
- en: '![Image](../images/fig3_14.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig3_14.jpg)'
- en: You should have four pieces cut out, as shown in [Figure 3-15](ch03.xhtml#ch03fig15).
    The base has the big hole in the middle; use its center piece to cut out two triangles
    to use as support braces. These triangles have tabs that fit into slots connecting
    the bottom piece to the front. Before assembling the parts, however, add labels
    so that you can keep your LEDs straight when you wire up your circuit.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经切割出了四个零件，如[图3-15](ch03.xhtml#ch03fig15)所示。底座中间有一个大孔；使用其中心部件剪切出两个三角形，作为支撑支架。这些三角形有卡槽，可以将底部零件和前部零件连接起来。然而，在组装零件之前，请添加标签，以便在连接电路时能保持LED灯的位置正确。
- en: '**FIGURE 3-15:** Cardboard pieces for the enclosure'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**图3-15：** 外壳的硬纸板零件'
- en: '![Image](../images/fig3_15.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig3_15.jpg)'
- en: '**Label the LED Holes**'
  id: totrans-148
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**标记LED灯孔**'
- en: Flip the front cardboard piece over, and number the LEDs so you have a connection
    guide. Start with pin 13 in the top right and count down as you go left, as shown
    in [Figure 3-16](ch03.xhtml#ch03fig16). You should finish with 5 in the lower-left
    corner.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 翻转前面板纸板，并为每个 LED 编号，以便有一个连接指南。从右上角的 13 引脚开始，然后依次向左数，如 [图 3-16](ch03.xhtml#ch03fig16)
    所示。你应该在左下角完成编号，最终编号为 5。
- en: '**FIGURE 3-16:** Labeling the back side of the LED grid'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-16：** 标记 LED 网格的背面'
- en: '![Image](../images/fig3_16.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig3_16.jpg)'
- en: '**Add the LEDs**'
  id: totrans-152
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**添加 LED**'
- en: With the cardboard flat, insert the nine LEDs through from the back side. You
    can reuse the LEDs from your breadboard prototype or grab new ones. As you insert
    the LEDs, keep them aligned with the long leg on the right side to make things
    easier when you start wiring them to the Arduino again. You want the LEDs to fit
    snugly, as shown in [Figure 3-17](ch03.xhtml#ch03fig17). If the hole is too big,
    you can add a dab of hot glue to secure it (but, again, keep in mind that you
    won’t be able to reuse the LEDs afterward).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 将纸板平放，从背面插入九个 LED。你可以重用面包板原型中的 LED，或者使用新的 LED。当插入 LED 时，确保它们的长脚对齐到右侧，这样在稍后将它们重新接到
    Arduino 时会更方便。你希望 LED 紧密地装入孔中，如 [图 3-17](ch03.xhtml#ch03fig17) 所示。如果孔太大，你可以加一点热熔胶将其固定（但请记住，之后你将无法再次使用这些
    LED）。
- en: '**FIGURE 3-17:** Inserting the LEDs'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-17：** 插入 LED'
- en: '![Image](../images/fig3_17.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig3_17.jpg)'
- en: '**Assemble the Parts**'
  id: totrans-156
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**组装零件**'
- en: Now, gather the four pieces of cardboard to be assembled. You’ll probably need
    craft glue or a hot glue gun to secure all of the pieces together.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，收集待组装的四个纸板部件。你可能需要使用工艺胶水或热熔胶枪将所有部件粘合在一起。
- en: First, glue one of the triangles to the base to support the front plate, as
    shown in [Figure 3-18](ch03.xhtml#ch03fig18). See [Figure 3-19](ch03.xhtml#ch03fig19)
    for the orientation of the support triangles. Repeat this process for the other
    triangle piece. Give the glue some time to dry before moving on.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将一个三角形粘到基座上，以支撑前面板，如 [图 3-18](ch03.xhtml#ch03fig18) 所示。请参见 [图 3-19](ch03.xhtml#ch03fig19)
    了解支撑三角形的方向。对另一个三角形部件重复此过程。请给胶水一些时间干燥后再继续下一步。
- en: '**FIGURE 3-18:** Adding support triangles to the base'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-18：** 将支撑三角形添加到基座上'
- en: '![Image](../images/fig3_18.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig3_18.jpg)'
- en: With the support triangles in place, glue the front to the base. The front should
    fit snugly onto the tabs of the support triangles and sit on top of the base cardboard,
    as shown in [Figure 3-19](ch03.xhtml#ch03fig19). For extra strength, you may also
    want to add hot glue along the inside edges where the front plate connects to
    the base and support triangles.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 将支撑三角形放置好后，使用胶水将前面板粘到基座上。前面板应紧密地贴合支撑三角形的卡口，并安放在基座纸板的上方，如 [图 3-19](ch03.xhtml#ch03fig19)
    所示。为了增强强度，你还可以在前面板连接基座和支撑三角形的内侧边缘处加上热熔胶。
- en: '**FIGURE 3-19:** Adding the final piece of the project—the front'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-19：** 添加项目的最后一块——前面板'
- en: '![Image](../images/fig3_19.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig3_19.jpg)'
- en: With the cardboard construction part of this project done, it’s time to wire
    the circuit.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成纸板构建部分后，现在是时候接线了。
- en: '**Connect the Electronics**'
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接电子元件**'
- en: There are a lot of wires in this project, so we’ll take it one step at a time.
    You’ll reuse the breadboard prototype circuit you built earlier in this chapter
    and simply use jumper wires to connect the nine LEDs to the Arduino.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目有很多接线，我们将一步一步来。你将重用本章早些时候构建的面包板原型电路，只需使用跳线将九个 LED 连接到 Arduino 上。
- en: 'There are two ways to approach this part of the project: the nonpermanent way,
    which uses male-to-female jumper wires, and the permanent way, which involves
    soldering. We’ll cover the nonpermanent approach, but if you do want to solder
    the LEDs to jumper wires, refer to “[How to Solder](app01.xhtml#app01lev1sec2)”
    on page [302](app01.xhtml#page_302) for a brief lesson before you attempt that.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这个部分有两种方式来进行：非永久方式，使用公对母跳线，和永久方式，涉及到焊接。我们将介绍非永久方式，但如果你确实想把 LED 焊接到跳线，可以参考 “[如何焊接](app01.xhtml#app01lev1sec2)”
    页码 [302](app01.xhtml#page_302) 上的简短教程，再尝试焊接。
- en: If the LED legs are too long, you can snip them before attaching the jumper
    wires, but pay attention to which leg is positive (the long leg) and which is
    negative. Leave the positive leg a little longer so that you can still tell which
    leg is which; you could also draw a dot on the back of the box. Be sure to wear
    eye protection, too—when you’re trimming the legs, the little wire pieces can
    fly up in the air and toward your eyes!
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果LED的引脚太长，你可以在连接跳线之前将它们剪短，但要注意哪个引脚是正极（较长的引脚）哪个是负极。把正极引脚剪得稍长一点，这样你还能辨别正负引脚；你也可以在盒子背面画个点。记得佩戴护目镜——修剪引脚时，小的金属片可能会飞起来，向你的眼睛飞来！
- en: Connect the female end of each jumper wire to one of the nine LEDs on the front
    plate. To keep things organized, use black wires to designate the negative side,
    and connect these to the shorter leg of the LED, as shown in [Figure 3-20](ch03.xhtml#ch03fig20).
    You can use any color for the positive side of each LED.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 将每根跳线的母头连接到前面板上的九个LED之一。为了保持组织性，使用黑色导线指定负极，并将其连接到LED的较短腿，如[图 3-20](ch03.xhtml#ch03fig20)所示。每个LED的正极可以使用任何颜色的导线。
- en: '**FIGURE 3-20:** Connecting the LEDs with male-to-female jumper wires'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-20：** 使用公对母跳线连接LED'
- en: '![Image](../images/fig3_20.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig3_20.jpg)'
- en: Once all nine LEDs are connected to male-to-female wires, connect the other
    end of each jumper wire to the breadboard, following the pin labels on the back
    side of your project. If you left the LEDs in the breadboard, remove those first,
    and simply plug the jumper wires into them as shown in [Figure 3-21](ch03.xhtml#ch03fig21).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有九个LED连接到公对母跳线后，将每根跳线的另一端连接到面包板，按照项目背面标注的引脚标签进行连接。如果你之前已经把LED插入了面包板，先把它们取下来，然后像[图
    3-21](ch03.xhtml#ch03fig21)中所示的那样插入跳线。
- en: '**FIGURE 3-21:** Nine LEDs connected to the breadboard with male-to-female
    jumper wires'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-21：** 使用公对母跳线将九个LED连接到面包板'
- en: '![Image](../images/fig3_21.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig3_21.jpg)'
- en: Each wire connected to the negative leg of an LED (each black wire) connects
    to a resistor that is connected to the ground rail. Each positive wire connects
    to the Arduino pin written on the back of your LED array.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 每条连接到LED负极腿的导线（每条黑色导线）连接到一个与接地轨道相连的电阻器。每条正极导线连接到LED阵列背面标注的Arduino引脚。
- en: Once you’ve added all nine LEDs to the front of your display and completed your
    wiring, plug your Arduino into your computer with a USB cable. If everything is
    wired correctly, your display will show an alternating *X* and *O* pattern. If
    you have a battery pack, you can connect it as shown in [Figure 3-22](ch03.xhtml#ch03fig22).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你把所有九个LED添加到显示器的前面并完成接线，将Arduino通过USB电缆连接到电脑。如果所有的接线正确，你的显示器将显示交替的*X*和*O*图案。如果你有电池组，可以按照[图
    3-22](ch03.xhtml#ch03fig22)中的示意图连接它。
- en: If the test images don’t show properly, double-check that the LEDs are plugged
    into the correct Arduino pins. When you see the correct patterns, take a moment
    to bask in the glory of your new pixel art display, but don’t stop here! When
    you’re ready, try making a more complicated animation.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试图像显示不正常，检查LED是否插入到正确的Arduino引脚。当你看到正确的图案时，稍作停留，享受你新像素艺术显示器的辉煌，但不要停在这里！当你准备好时，试着制作一个更复杂的动画。
- en: '**FIGURE 3-22:** The final display with cycling *X* and *O* characters'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-22：** 显示交替的*X*和*O*字符的最终显示效果'
- en: '![Image](../images/fig3_22.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig3_22.jpg)'
- en: '**CREATE AN LED ANIMATION**'
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**创建一个LED动画**'
- en: Your monitor can display any image you can draw on a 3×3 grid. An animation
    is just a series of images shown sequentially, so if you show a bunch of 3×3 images
    in a row, you’ll have a pixel art animation. We’ll show you how to design and
    display a spinning line.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 你的显示器可以显示任何你能在3×3网格上绘制的图像。动画其实就是一系列按顺序显示的图像，所以如果你连续显示一堆3×3的图像，你就会得到一个像素艺术动画。我们将教你如何设计和显示一个旋转的线条。
- en: '**Plan the Animation Sequence**'
  id: totrans-182
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**规划动画序列**'
- en: Let’s begin by translating a spinning line into a series of images. We started
    with a vertical line and rotated it around the display in four separate images,
    as shown in [Figure 3-23](ch03.xhtml#ch03fig23).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从将一个旋转的线条转化为一系列图像开始。我们从一条垂直线开始，并将其在显示器上旋转，分成四个独立的图像，如[图 3-23](ch03.xhtml#ch03fig23)所示。
- en: '**FIGURE 3-23:** Image progression of a spinning line'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-23：** 旋转线条的图像进展'
- en: '![Image](../images/fig3_23.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig3_23.jpg)'
- en: Save your program from [Listing 3-10](ch03.xhtml#ch03ex010), and then create
    a new sketch. Add the `setup()` and `loop()` functions in [Listing 3-11](ch03.xhtml#ch03ex011).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 保存 [Listing 3-10](ch03.xhtml#ch03ex010) 中的程序，然后创建一个新的草图。将 [Listing 3-11](ch03.xhtml#ch03ex011)
    中的 `setup()` 和 `loop()` 函数添加到新的草图中。
- en: '**LISTING 3-11:** The `setup()` code for all nine LEDs'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 3-11：** 所有九个 LED 的 `setup()` 代码'
- en: '[PRE11]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Since you’re using the same LEDs you were in the *X* and *O* sketch, you can
    just copy the code from there into your new sketch.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你使用的是之前在 *X* 和 *O* 草图中使用的相同 LED，你可以将那里代码复制到新的草图中。
- en: '**Write Custom Functions**'
  id: totrans-190
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写自定义函数**'
- en: Now, create a custom function for each image of your animation. This animation
    has four frames, so you’ll need four functions. Add the functions in [Listing
    3-12](ch03.xhtml#ch03ex012) to your sketch, after the closing bracket in the `loop()`
    function.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为你的动画中的每一帧创建一个自定义函数。这个动画有四帧，因此你需要四个函数。在 `loop()` 函数的闭括号之后，将 [Listing 3-12](ch03.xhtml#ch03ex012)
    中的函数添加到你的草图中。
- en: '**LISTING 3-12:** Custom functions to draw a spinning line'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 3-12：** 用于绘制旋转线的自定义函数'
- en: '[PRE12]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `verticalLine()` function ➊ shows the first image in [Figure 3-23](ch03.xhtml#ch03fig23),
    the `topLeftDiagonal()` function ➋ shows the second image, the `horizontalLine()`
    function ➌ shows the third, and the `topRightDiagonal()` function ➍ shows the
    last. As with your previous custom function, these custom functions have the `void`
    data type, since they won’t return a value.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`verticalLine()` 函数 ➊ 显示 [图 3-23](ch03.xhtml#ch03fig23) 中的第一张图，`topLeftDiagonal()`
    函数 ➋ 显示第二张图，`horizontalLine()` 函数 ➌ 显示第三张图，`topRightDiagonal()` 函数 ➍ 显示最后一张。和你之前的自定义函数一样，这些自定义函数的返回类型是
    `void`，因为它们不会返回值。'
- en: Custom functions can call other custom functions, too, so let’s call the four
    line functions inside a single `spinningLine()` function. Add the following code
    to your sketch, after the closing bracket in the `topRightDiagonal()` function.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义函数也可以调用其他自定义函数，所以我们可以在一个 `spinningLine()` 函数中调用四个线条函数。将以下代码添加到你的草图中，放在 `topRightDiagonal()`
    函数的闭括号后面。
- en: '[PRE13]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This code shows a vertical line, a diagonal line, a horizontal line, and another
    diagonal line, with a delay after each line. Now, all you have to do is call `spinningLine()`
    inside the `loop()` function.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码展示了垂直线、对角线、水平线和另一条对角线，每条线之间都有延迟。现在，你只需在 `loop()` 函数内调用 `spinningLine()`
    即可。
- en: '**NOTE**'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*You’ll find a complete listing of this code in the resource files at* [https://nostarch.com/arduinoinventor/](https://nostarch.com/arduinoinventor/)*.*'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可以在资源文件中找到完整的代码列表，访问地址为* [https://nostarch.com/arduinoinventor/](https://nostarch.com/arduinoinventor/)*。*'
- en: '**Tweak Your loop() Function**'
  id: totrans-200
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**调整你的 loop() 函数**'
- en: Add a call to your custom function inside your `loop()` function, as in [Listing
    3-13](ch03.xhtml#ch03ex013). Remember that you still need to have all of those
    `pinMode()` commands in your `setup()` function.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `loop()` 函数内添加一个对自定义函数的调用，如 [Listing 3-13](ch03.xhtml#ch03ex013) 中所示。记住，你仍然需要在
    `setup()` 函数中包含所有的 `pinMode()` 命令。
- en: '**LISTING 3-13:** Completed `loop()` function with the new custom function
    call `spinningLine(200)`;'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 3-13：** 完整的 `loop()` 函数，带有新的自定义函数调用 `spinningLine(200)`；'
- en: '[PRE14]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Once you add the function and pass it a delay time parameter (the code uses
    `200`), upload your sketch to your Arduino. You’ll see a rotating line on your
    display. With this knowledge of sequencing LEDs and custom functions, you can
    make your own nine-pixel animation!
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你添加了函数并传递了延迟时间参数（代码使用的是 `200`），将你的草图上传到 Arduino。你将看到显示器上旋转的线条。通过了解如何按顺序控制
    LED 和使用自定义函数，你可以制作自己的九像素动画！
- en: '**GOING FURTHER**'
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**深入了解**'
- en: Custom functions will be useful when you want to reuse code later or organize
    your code. To take this project further, try designing more elaborate animations;
    you could even come up with your own alphabet and use your monitor to display
    a secret message.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义函数将在你以后需要重用代码或组织代码时非常有用。要进一步推进这个项目，尝试设计更复杂的动画；你甚至可以设计自己的字母表，并利用显示器展示一个秘密信息。
- en: '**Hack**'
  id: totrans-207
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**技巧**'
- en: To take this project further, start by creating more elaborate animations. As
    you work through the next few projects, look for ways to incorporate your monitor—for
    example, maybe you could use a sensor to control an animation speed or display
    a sensor value in some interesting ways. Download a blank design template at *[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 要进一步推进这个项目，首先创建更复杂的动画。在接下来的几个项目中，尝试寻找将显示器整合到项目中的方法——例如，或许你可以使用传感器来控制动画速度，或者以有趣的方式显示传感器值。你可以在
    *[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*
    下载一个空白设计模板。
- en: '**Modify**'
  id: totrans-209
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**修改**'
- en: You’ve learned how to control a number of electronic components by using digital
    pins and custom functions. Try replacing your individual LEDs with different components.
    We suggest a *seven-segment display*, as shown in [Figure 3-24](ch03.xhtml#ch03fig24).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学会了如何通过使用数字引脚和自定义函数来控制多个电子元件。试着将你的单独LED灯换成不同的组件。我们建议使用*七段显示器*，如[图 3-24](ch03.xhtml#ch03fig24)所示。
- en: '**FIGURE 3-24:** A single seven-segment display'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-24：** 单个七段显示器'
- en: '![Image](../images/fig3_24.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig3_24.jpg)'
- en: Each segment is an LED that you can control. There are seven individual segments
    (plus the decimal points), as shown in [Figure 3-25](ch03.xhtml#ch03fig25), and
    by turning specific segments on and off, you can make numbers and most letters
    of the English language.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 每个段都是一个你可以控制的LED灯。有七个独立段（加上小数点），如[图 3-25](ch03.xhtml#ch03fig25)所示，通过打开和关闭特定的段，你可以显示数字和大多数英文字母。
- en: '**FIGURE 3-25:** Illustration of the seven individual segments and the decimal
    point with a corresponding wiring diagram'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-25：** 七个独立段和小数点的示意图及相应的接线图'
- en: '![Image](../images/fig3_25.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig3_25.jpg)'
- en: 'You can control one of these displays the same way you control the Nine-Pixel
    Animation Machine: just create custom functions for each number. For a challenge,
    create a single function that lets you pass a number to display to it.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像控制九像素动画机一样控制这些显示器：只需为每个数字创建自定义函数。为了挑战自己，创建一个函数，允许你传递一个数字并显示它。
