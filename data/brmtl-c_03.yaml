- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Introduction to the Integrated Development Environment
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 集成开发环境简介
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: So far, we’ve used individual tools such as GCC, `make`, and a text editor to
    build our program. This has allowed you to see what each tool does and learn about
    the details of software development. Now you’ll learn about using an integrated
    development environment (IDE). The IDE is a program designed to take all those
    tools (and some others) and hide them behind one integrated interface.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用了GCC、`make`和文本编辑器等单独的工具来构建我们的程序。这使你能够看到每个工具的作用，并了解软件开发的细节。现在，你将学习如何使用集成开发环境（IDE）。IDE是一个旨在将所有这些工具（以及其他一些工具）隐藏在一个集成界面后的程序。
- en: The main advantage of this approach is that you can use one GUI-based tool to
    do everything. The major disadvantage is that it works well only if you behave
    the way the IDE expects you to behave. Also, it hides a great deal from you. For
    example, to get a linker map, you have to go through several layers of GUI and
    enter the map option in an obscure customization box.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的主要优点是你可以使用一个基于图形界面的工具来完成所有事情。主要的缺点是，只有当你按照IDE预期的方式操作时，它才会工作得很好。此外，它还隐藏了很多东西。例如，要获取链接器映射，你必须通过多个GUI层并在一个隐蔽的定制框中输入映射选项。
- en: The IDE we’ll use in this book is the System Workbench for STM32 IDE. From its
    name, you can tell it was created for the STM32 microprocessors. An enhancement
    to a very popular IDE called Eclipse, it includes an editor, debugger, and compiler.
    It is especially powerful when it comes to debugging, because remotely debugging
    on a microcontroller involves a lot of tools, and the IDE makes them work together
    seamlessly.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中我们将使用的集成开发环境（IDE）是STM32的System Workbench IDE。从它的名字可以看出，它是为STM32微处理器创建的。作为一种非常流行的IDE——Eclipse的增强版本，它包括了编辑器、调试器和编译器。在调试方面，它特别强大，因为在微控制器上进行远程调试涉及许多工具，而IDE使这些工具能够无缝地协同工作。
- en: 'To practice using the IDE, you’ll write the same “Hello World” program you
    wrote in Chapter 1, only this time you will wrap every step of the process in
    a unified GUI. In one respect, the IDE makes things simpler by hiding the compiler
    and other tools from you. In other ways, it makes things more complex, because
    accessing those tools to tune them is more difficult. For example, if I want to
    add the flag `-Wextra` to the compiler command line without an IDE, all I do is
    edit the makefile. When using an IDE, I have to find the magic box in which I
    can enter this value (spoiler: it’s Project▶Properties and then C/C++ Build▶Settings▶Tool
    Settings▶GCC Compiler▶All Options).'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了练习使用IDE，你将编写和第一章中相同的“Hello World”程序，只不过这次你将把过程的每一步都封装在一个统一的GUI中。在某种程度上，IDE通过将编译器和其他工具隐藏起来使事情变得更简单。在其他方面，它又使事情变得更加复杂，因为访问这些工具并进行调整变得更困难。例如，如果我想在没有IDE的情况下将`-Wextra`标志添加到编译器命令行，我只需编辑makefile。但使用IDE时，我必须找到可以输入此值的神秘框（剧透：它是Project▶Properties，然后是C/C++
    Build▶Settings▶Tool Settings▶GCC Compiler▶All Options）。
- en: Using System Workbench for STM32
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用System Workbench for STM32
- en: So far, we’ve used a text editor, a compiler called GCC,and a program called
    `make` to run the compiler. As we get into more complex programs, we’ll need a
    debugger as well.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用了一个文本编辑器、一个名为GCC的编译器和一个叫做`make`的程序来运行编译器。当我们处理更复杂的程序时，我们还需要一个调试器。
- en: The STM32 Workbench bundles all these tools into one integrated development
    environment that is built on the Eclipse IDE. In fact, it *is* Eclipse, with lots
    of special STM32 stuff added, and I’ll refer to it as such in the following discussion.
    We’ll get deeper into the STM32 side of things in Chapter 3. For now, let’s explore
    the IDE by writing a “Hello World” program.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: STM32 Workbench将所有这些工具打包成一个集成开发环境，基于Eclipse IDE构建。事实上，它*就是*Eclipse，只是在其中添加了许多特定于STM32的内容，接下来的讨论中我会这样称呼它。我们将在第三章更深入地探讨STM32的相关内容。现在，让我们通过编写一个“Hello
    World”程序来探索IDE。
- en: Starting the IDE
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动IDE
- en: If you followed the advice at the beginning of Chapter 1, you’ve already downloaded
    System Workbench for STM32\. Install it using the instructions from the website.
    The standard installation creates a desktop icon and a startup menu item, so you
    should be able to start the IDE in the same way as any other program.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遵循了第一章开头的建议，应该已经下载了System Workbench for STM32。按照网站上的说明安装它。标准安装会创建一个桌面图标和一个启动菜单项，因此你应该可以像启动其他程序一样启动IDE。
- en: When first started, Eclipse asks for the location of your workspace. Enter the
    directory that will contain all the projects for this book. Next, Eclipse should
    display the Welcome screen. Dismiss the screen by clicking the close icon (the
    little X next to the tab).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 初次启动时，Eclipse会询问你的工作空间位置。请输入将包含本书所有项目的目录。接下来，Eclipse应该会显示欢迎屏幕。点击关闭图标（标签旁边的小X）来关闭该屏幕。
- en: A window should pop up indicating that the system is downloading additional
    tools for the ARM processor. When the system finishes, you should get a C/C++
    view of an empty project, as shown [Figure 2-1](#figure2-1).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 系统应该会弹出一个窗口，提示系统正在下载ARM处理器的附加工具。下载完成后，你应该会看到一个C/C++视图的空项目，如[图 2-1](#figure2-1)所示。
- en: '![f02001](image_fi/501621c02/f02001.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![f02001](image_fi/501621c02/f02001.png)'
- en: 'Figure 2-1: An empty project screen'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-1：空项目界面
- en: Eclipse is the frontend for a *lot* of tools. Displaying them in an organized
    manner is quite a challenge. To cope with this, Eclipse uses the concept of views.
    A *view* is a window layout that is designed for a particular task. For example,
    a Java programmer might have a different view than that of a C programmer. Likewise,
    debugging requires a different view than coding.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse是*很多*工具的前端。如何有条理地展示它们是一个相当大的挑战。为了解决这个问题，Eclipse使用了视图的概念。*视图*是为特定任务设计的窗口布局。例如，Java程序员可能会有与C程序员不同的视图。同样，调试需要不同于编程的视图。
- en: 'The default view in this version of Eclipse is that of a C/C++ project. (You
    can change the view at any time by using the Window▶View menu.) On the left of
    the view is the Project Explorer (currently empty), which allows you to view your
    projects and their details. In the upper middle, you have a text editor. On the
    right is a window with three tabs: Outline, Build Targets, and Task List. We’ll
    go into them when we get to more complex projects.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本的Eclipse默认视图是C/C++项目视图。（你可以随时通过使用窗口▶视图菜单来更改视图。）视图的左侧是Project Explorer（当前为空），它允许你查看项目及其详细信息。视图的中上方是文本编辑器。右侧是一个有三个标签的窗口：Outline、Build
    Targets和Task List。我们会在涉及更复杂的项目时再讨论这些标签。
- en: At the bottom is a small, wide window with the tabs Problems, Tasks, Console,
    Properties, and Call Graph. The Problems window contains a list of the errors
    and warnings generated by the code in your current project. The Console window
    contains the output of the build process. The other tabs we’ll worry about when
    we start generating more complex programs.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 底部有一个小的宽窗口，包含标签页：Problems、Tasks、Console、Properties和Call Graph。Problems窗口列出了当前项目中代码生成的错误和警告。Console窗口显示构建过程的输出。其他标签页我们会在开始生成更复杂的程序时再讨论。
- en: Creating Hello World
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Hello World
- en: We will now create another “Hello World” project. You must take certain steps
    whenever you create a native C project (*native* means the program runs on the
    machine on which it was compiled; if you compile it on one machine and run it
    on another, that’s called *cross-compilation*), and this chapter goes through
    them in detail. You will be going through these steps a lot; so that you don’t
    have to remember them all, refer to the checklist in the appendix.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建另一个“Hello World”项目。每次创建一个本地C项目时，你必须按照特定步骤操作（*本地*指的是程序运行在编译它的机器上；如果你在一台机器上编译并在另一台机器上运行，那就叫做*交叉编译*），本章将详细讲解这些步骤。你将频繁地执行这些步骤；为了避免你记不住所有的步骤，请参见附录中的检查清单。
- en: Start a new project by selecting **File**▶**New**▶**C Project** from the menu
    bar. This brings up the C Project dialog.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择**File**▶**New**▶**C Project**来启动一个新项目，这将弹出C Project对话框。
- en: I’ve chosen the name *02.hello-ide* for our project, as it’s unique and descriptive.
    Project names can contain any character except spaces and special characters such
    as a forward slash (/), backslash (\), colon (:), and other characters that have
    special meaning for your filesystem. Letters, digits, dashes, dots, and underscores
    are okay.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我为我们的项目选择了名称*02.hello-ide*，因为它既独特又具有描述性。项目名称可以包含任何字符，但不能包含空格和特殊字符，如正斜杠（/）、反斜杠（\）、冒号（:）等文件系统中有特殊含义的字符。字母、数字、连字符、点和下划线是可以使用的。
- en: For the project type, select **Hello World ANSI C Project**. For toolchains,
    select the toolchain for your operating system, as shown in [Figure 2-2](#figure2-2).
    Click **Next**.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于项目类型，选择**Hello World ANSI C Project**。对于工具链，选择与你操作系统匹配的工具链，如[图 2-2](#figure2-2)所示。点击**Next**。
- en: '![f02002](image_fi/501621c02/f02002.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![f02002](image_fi/501621c02/f02002.png)'
- en: 'Figure 2-2: The project creation dialog'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-2：项目创建对话框
- en: We now see the Basic Settings dialog. Leave these settings alone and click **Next**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在看到基本设置对话框。保持这些设置不变，点击**下一步**。
- en: The next dialog is Select Configurations (see [Figure 2-3](#figure2-3)).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个对话框是选择配置（见[图 2-3](#figure2-3)）。
- en: '![f02003](image_fi/501621c02/f02003.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![f02003](image_fi/501621c02/f02003.png)'
- en: 'Figure 2-3: The Select Configurations dialog'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-3：选择配置对话框
- en: You have a lot of different options for building your project. Eclipse groups
    these into project configurations. The two defined by default are Release and
    Debug. Release produces highly optimized code that is difficult if not impossible
    to debug. Debug produces unoptimized, easy-to-debug code and generates debug symbols.
    Since you are learning, we’ll stick with the Debug configuration. Deselect the
    **Release** configuration, leaving only **Debug** selected, and click **Finish**.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你有很多不同的选项来构建你的项目。Eclipse 将这些选项分为项目配置。默认定义的两个配置是 Release 和 Debug。Release 生成高度优化的代码，调试几乎不可能，甚至不可能。Debug
    生成未优化的、易于调试的代码并生成调试符号。因为你在学习，我们将坚持使用 Debug 配置。取消选择**Release**配置，只选择**Debug**配置，然后点击**完成**。
- en: The IDE creates our project and generates a number of files. One of these is
    our source code, already filled in with its version of a “Hello World” program
    (see [Figure 2-4](#figure2-4)).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: IDE 创建了我们的项目并生成了一些文件。其中一个文件是我们的源代码，已经填写了它的“Hello World”程序版本（见[图 2-4](#figure2-4)）。
- en: '![f02004](image_fi/501621c02/f02004.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![f02004](image_fi/501621c02/f02004.png)'
- en: 'Figure 2-4: The result of creating our “Hello World” project'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-4：创建我们的“Hello World”项目的结果
- en: If you enter any code yourself, note that the Eclipse editor uses a tab size
    of 4 by default, which means that when you use a tab to indent a line in source
    code, the tab will have a width of four spaces. Practically every other editor
    and tool uses eight spaces. You can fix this with one of the configuration items
    in Window▶Preferences. (Telling you how to further customize Eclipse would take
    a whole book, and this is not that book.)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你自己输入任何代码，请注意，Eclipse 编辑器默认使用 4 的制表符大小，这意味着当你使用制表符来缩进源代码中的一行时，制表符的宽度为四个空格。几乎所有其他编辑器和工具都使用八个空格。你可以通过窗口▶首选项中的一个配置项来修复此问题。（告诉你如何进一步自定义
    Eclipse 需要一本完整的书，而这本书不是这本书。）
- en: At this point we would be done—if we were writing in Java. Eclipse was designed
    for Java. C is an add-on that *almost* completely works. We have to do one more
    fix-up.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止我们就完成了——如果我们是在写 Java 的话。Eclipse 是为 Java 设计的。C 是一个附加功能，*几乎*完全适用。我们还需要做最后一个修复。
- en: First, compile the project by choosing **Project**▶**Build Project**. Then select
    **Run**▶**Run Configurations**, which should bring up the Run Configurations dialog.
    Next, click **C/C++ Application** on the left side, and then click the small icon
    on the left of the icon row to create a new configuration. Finally, under C/C++
    Application, click **Browse**, as shown in [Figure 2-5](#figure2-5).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过选择**项目**▶**构建项目**来编译项目。然后选择**运行**▶**运行配置**，这将弹出运行配置对话框。接下来，点击左侧的**C/C++
    应用程序**，然后点击图标行左侧的小图标来创建一个新配置。最后，在 C/C++ 应用程序下，点击**浏览**，如[图 2-5](#figure2-5)所示。
- en: Use the file browser to find your executable in the *Debug* directory. The IDE
    has created a project directory for you in your workspace (the location of which
    is system-dependent) that has the same name as your project. All the files for
    your project are in this directory. Within the project directory, a *Debug* directory
    contains all the files built as part of the Debug build (the only type of build
    we are doing). Within that directory, you’ll find *02.hello-ide* on macOS and
    Linux or *02.hello-ide.exe* on Windows. Select this file, as shown [Figure 2-6](#figure2-6),
    and then click **OK**.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用文件浏览器在*Debug*目录中找到你的可执行文件。IDE 已经为你在工作区创建了一个项目目录（该目录的位置取决于系统），其名称与你的项目相同。所有项目文件都在这个目录中。在项目目录中，一个*Debug*目录包含所有作为
    Debug 构建的一部分构建的文件（这是我们正在进行的唯一构建类型）。在该目录中，你会找到 macOS 和 Linux 上的*02.hello-ide*或
    Windows 上的*02.hello-ide.exe*。选择这个文件，如[图 2-6](#figure2-6)所示，然后点击**确定**。
- en: '![f02005](image_fi/501621c02/f02005.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![f02005](image_fi/501621c02/f02005.png)'
- en: 'Figure 2-5: The Run Configurations dialog'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-5：运行配置对话框
- en: '![f02006](image_fi/501621c02/f02006.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![f02006](image_fi/501621c02/f02006.png)'
- en: 'Figure 2-6: The Application Selection dialog'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-6：应用程序选择对话框
- en: Next, click **Apply** and **Close** to finish the run configuration. This setup
    tells the IDE where your program is actually located. (Since it decided where
    to put it, you’d think it would know where it went, but for some reason it doesn’t.)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击**应用**和**关闭**以完成运行配置。此设置告诉IDE你的程序实际所在的位置。（既然它已经决定了放置的位置，你可能会认为它会知道文件的去向，但不知为何它并不知道。）
- en: Now let’s actually run the program. Select **Run**▶**Run**. The results should
    appear in the Console window, as shown in [Figure 2-7](#figure2-7).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们实际运行程序。选择**运行**▶**运行**。结果应该会出现在控制台窗口中，如[图2-7](#figure2-7)所示。
- en: '![f02007](image_fi/501621c02/f02007.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![f02007](image_fi/501621c02/f02007.png)'
- en: 'Figure 2-7: The results of our program'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-7：我们程序的结果
- en: Debugging the Program
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调试程序
- en: Now for a quick introduction to the *debugger*, which watches our program execute
    and lets us see what’s going on inside it. First, let’s generate a little more
    code to debug by duplicating line 15 (`puts("!!!Hello World!!!");`) and then save
    the project by choosing **File**▶**Save All**.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来简单介绍一下*调试器*，它可以监控我们的程序执行并让我们看到程序内部发生了什么。首先，让我们通过复制第15行（`puts("!!!Hello World!!!");`）来生成一些更多的代码进行调试，然后选择**文件**▶**全部保存**来保存项目。
- en: It is important to choose File▶Save All after each edit. If you were to run
    the program now, before saving all files, the compiler would see the old, unsaved
    file on disk and compile it. The resulting program would print `!!!Hello World!!!`
    only once instead of twice, which could get very confusing. The code we have in
    front of us is correct; the code we are running is not. Until you choose File▶Save
    All, the files are not the same. (End of soapbox mode.)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑后每次都选择**文件▶全部保存**是非常重要的。如果此时你运行程序，未保存所有文件，编译器会看到磁盘上的旧文件并编译它。生成的程序将只会打印一次`!!!Hello
    World!!!`，而不是两次，这可能会造成很大的困扰。我们面前的代码是正确的；我们正在运行的代码则不是。直到选择**文件▶全部保存**，文件才是相同的。（结束说教模式。）
- en: Now let’s start the debugger with **Run**▶**Debug** (see [Figure 2-8](#figure2-8)).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过**运行**▶**调试**来启动调试器（见[图2-8](#figure2-8)）。
- en: '![f02008](image_fi/501621c02/f02008.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![f02008](image_fi/501621c02/f02008.png)'
- en: 'Figure 2-8: Starting the debugger'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-8：启动调试器
- en: The IDE is about to switch into debugging mode, which changes the perspective
    from development to debugging. This means a whole new window arrangement. The
    system warns you that this is about to happen, as shown in [Figure 2-9](#figure2-9).
    (Remember that you can always switch perspectives with the command Window▶Perspective▶C/C++
    or Window▶Perspective▶Debug.)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: IDE即将切换到调试模式，这会将视角从开发模式切换到调试模式。这意味着窗口布局会发生变化。系统会提醒你即将发生这种变化，如[图2-9](#figure2-9)所示。（记住，你总是可以通过命令**窗口▶视角▶C/C++**或**窗口▶视角▶调试**来切换视角。）
- en: '![f02009](image_fi/501621c02/f02009.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![f02009](image_fi/501621c02/f02009.png)'
- en: 'Figure 2-9: The debug perspective warning'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-9：调试视角警告
- en: Click **Yes** in the warning. The debug perspective should open, as shown in
    [Figure 2-10](#figure2-10).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在警告中点击**是**。调试视角应该打开，如[图2-10](#figure2-10)所示。
- en: '![f02010](image_fi/501621c02/f02010.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![f02010](image_fi/501621c02/f02010.png)'
- en: 'Figure 2-10: The debug perspective'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-10：调试视角
- en: In the upper left is the Stack Tracewindow, which shows the program being executed
    and how far into it you are. This information will become more useful when we
    discuss stack usage in Chapter 7.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 左上方是堆栈跟踪窗口，它显示正在执行的程序及其执行的进度。这个信息在第7章讨论堆栈使用时会变得更有用。
- en: 'Next to that is the Variables/Breakpoints/Registers/I/O Registers/Modules window,
    which contains the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 紧挨着的是变量/断点/寄存器/输入输出寄存器/模块窗口，其中包含以下内容：
- en: '**Variables **Information about the program’s variables. (More on this starting
    with Chapter 4.)'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**变量** 程序变量的信息。（从第4章开始将进一步介绍。）'
- en: '**Breakpoints **A *breakpoint* is a location in your program at which the program
    stops and lets the debugger examine it. You can set a breakpoint by double-clicking
    the line number of an executable line in your program. We’ll start using them
    in Chapter 3.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**断点** *断点*是程序中的一个位置，程序在此处停下来，调试器可以检查它。你可以通过双击程序中可执行行的行号来设置断点。我们将在第3章开始使用它们。'
- en: '**Registers **Information about the current state of the processor’s registers.
    (Discussed in Chapter 10.)'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**寄存器** 当前处理器寄存器状态的信息。（在第10章讨论。）'
- en: '**Modules **The dynamically linked modules. Since this feature is not available
    to embedded programmers, we won’t be discussing it.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**模块** 动态链接模块。由于嵌入式程序员无法使用此功能，我们将不讨论它。'
- en: In the middle of the screen, the Source window displays our program. The highlighted
    line of code indicates that the debugger has run the program up to this line and
    stopped.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕中间的源窗口显示了我们的程序。高亮的代码行表示调试器已经运行到这行并暂停了。
- en: Next to the Source window is the Outline panel. This is like a table of contents
    indicating which files go into our program. I’ve included the files *stdio.h*
    and *stdlib.h* so that they show up here.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 源窗口旁边是大纲面板。它类似于目录，指示哪些文件包含在我们的程序中。我已将文件*stdio.h*和*stdlib.h*包括在内，因此它们会显示在这里。
- en: Across the bottom is the Console/Tasks/Problems/Executables/Memory window. The
    Console window displays the output from the program. All the other tabs contain
    information we’re not interested in.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 底部是控制台/任务/问题/可执行文件/内存窗口。控制台窗口显示了程序的输出，其他标签包含我们不感兴趣的信息。
- en: Now we’ll *step through* the program, meaning we will execute one statement
    at a time using the debugger. Click the Step Over icon at the top of the screen
    (see [Figure 2-11](#figure2-11)) or press F6 to step over the current line.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将*单步调试*程序，意味着我们将使用调试器逐行执行语句。点击屏幕顶部的步过图标（见[图2-11](#figure2-11)），或者按F6键来跳过当前行。
- en: '![f02011](image_fi/501621c02/f02011.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![f02011](image_fi/501621c02/f02011.png)'
- en: 'Figure 2-11: Step Over (F6)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-11：步过（F6）
- en: The highlighted line in the Source window advances one line, and `!!!Hello World!!!`
    appears in the Console window (see [Figure 2-12](#figure2-12)).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 源窗口中高亮的行向前推进了一行，`!!!Hello World!!!`出现在控制台窗口中（见[图2-12](#figure2-12)）。
- en: '![f02012](image_fi/501621c02/f02012.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![f02012](image_fi/501621c02/f02012.png)'
- en: 'Figure 2-12: Single-step results'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-12：单步执行结果
- en: If you keep stepping, you’ll see the second `puts` executed, followed by the
    `return`statement. After that, the program goes into the system library to do
    cleanup work. Since we don’t have the source code for this library, the debugger
    can display no information about it.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你继续逐步调试，你将看到第二个`puts`被执行，随后是`return`语句。之后，程序进入系统库进行清理工作。由于我们没有该库的源代码，调试器无法显示任何关于它的信息。
- en: There are two other significant icons on the toolbar (see [Figure 2-13](#figure2-13)).
    The Resume icon (or F8 key) runs the program until it finishes or hits a breakpoint.
    The Debug icon restarts debugging.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏上还有两个重要的图标（见[图2-13](#figure2-13)）。恢复图标（或F8键）运行程序直到结束或遇到断点。调试图标重新启动调试。
- en: '![f02013](image_fi/501621c02/f02013.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![f02013](image_fi/501621c02/f02013.png)'
- en: 'Figure 2-13: Debugging commands'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-13：调试命令
- en: We’ll make use of the debugger a lot in coming chapters. It will provide a very
    useful way of getting information out of our running program and seeing what’s
    going on. To return to the original C/C++ perspective, select **Window**▶ **Perspective**▶**Open
    Perspective**▶**C++**.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将大量使用调试器。它将为我们提供从正在运行的程序中获取信息并查看发生了什么的非常有用的方式。为了回到原始的C/C++视角，请选择**窗口**▶**视角**▶**打开视角**▶**C++**。
- en: What the IDE Did for Us
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IDE为我们做了什么
- en: The IDE generated the C source file, including the `puts` functions, to print
    “Hello World.” It also generated a file called *Debug/makefile*, which is used
    as input to the `make` program. [Listing 2-1](#listing2-1) contains an excerpt
    from this file.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: IDE生成了C源文件，其中包括`puts`函数，用于打印“Hello World”。它还生成了一个名为*Debug/makefile*的文件，该文件作为`make`程序的输入。[清单
    2-1](#listing2-1)包含了该文件的摘录。
- en: '[PRE0]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 2-1: An excerpt from *Debug/makefile*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 2-1：*Debug/makefile*的摘录
- en: This makefile is located in the *Debug* directory. The IDE supports multiple
    build configurations and generates a makefile in a different directory for each
    of them. (For this project, we created only a Debug configuration. Other projects
    may also use a Release configuration.)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个makefile位于*Debug*目录中。IDE支持多种构建配置，并为每种配置生成不同目录中的makefile。（对于本项目，我们仅创建了一个Debug配置，其他项目可能还会使用Release配置。）
- en: The makefile is more complex than the one we generated ourselves in Chapter
    1 because the IDE uses lots and lots of advanced `make` syntax. The IDE also generated
    the files *sources.mk* 1 and *objects.mk* 2, which are included in the makefile.
    What we can see from these files is that computer-generated stuff is designed
    to be very flexible at the cost of making the thing nearly impossible to read.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个makefile比我们在第1章中自己生成的更加复杂，因为IDE使用了大量高级的`make`语法。IDE还生成了文件*sources.mk* 1和*objects.mk*
    2，并将它们包含在makefile中。我们从这些文件中看到，计算机生成的内容设计得非常灵活，但代价是几乎无法阅读。
- en: As it stands now, the IDE does not generate or download a lot of data. But when
    we start to do embedded programming, this will change dramatically.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 就目前而言，IDE不会生成或下载大量数据。但当我们开始进行嵌入式编程时，这种情况将发生剧变。
- en: Importing the Book’s Programming Examples
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入本书的编程示例
- en: 'The programming examples used in this book can be downloaded at [https://nostarch.com/bare-metal-c.](https://nostarch.com/bare-metal-c.)
    To use the downloaded programming examples, you’ll need to import them. (You can’t
    just stick the files in your workspace; that would be too easy.) To perform an
    import, use the following steps:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中使用的编程示例可以从[https://nostarch.com/bare-metal-c.](https://nostarch.com/bare-metal-c.)下载。要使用下载的编程示例，你需要将它们导入。
    （你不能仅仅将文件放入工作区；那样太简单了。）要执行导入，请按照以下步骤操作：
- en: Select **File**▶**Import**.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**文件**▶**导入**。
- en: In the Import dialog, select **General**▶**Existing Projects into Workspace**.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导入对话框中，选择**常规**▶**将现有项目导入工作区**。
- en: Click **Next**.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**。
- en: Select the radio button **Select Archive File** and then click **Browse** after
    the blank space to select the file containing the project (the one you downloaded
    from the website).
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择单选按钮**选择归档文件**，然后点击空白处后的**浏览**，选择包含项目的文件（即你从网站下载的文件）。
- en: Click **Finish**.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**完成**。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: The IDE is a mixed blessing. On the one hand, you don’t have to worry about
    all the tools that it takes to create a program. You didn’t have to create the
    makefile, manually perform the build, or run the debugger.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: IDE是一个双刃剑。一方面，你不需要担心创建程序所需的所有工具。你不必自己创建makefile、手动执行构建或运行调试器。
- en: But this hands-off approach comes with a price. To add a compile-time flag to
    your program from Chapter 1, you just add the flag to the makefile. With the IDE,
    you can’t do this, because the IDE generates the makefile on its own. You have
    to find the right configuration item to do it in the IDE, and, as we will discover,
    the IDE has a lot of options.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 但这种放手的方式是有代价的。要在第1章的程序中添加一个编译时标志，你只需将标志添加到makefile中。在IDE中，你无法这样做，因为IDE会自动生成makefile。你必须在IDE中找到正确的配置项来完成这个操作，而正如我们将要发现的那样，IDE有很多选项。
- en: In this book I try to keep things as simple as possible through the use of checklists
    (like the one in the appendix) and standard procedures. Eclipse tries to take
    care of everything, but you will occasionally need to tweak things under the hood.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中，我尽力通过使用清单（如附录中的清单）和标准程序将内容保持尽可能简单。Eclipse尽量处理所有事情，但你偶尔还是需要在幕后进行一些调整。
- en: Programming Problems
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程问题
- en: Find out what happens when you put `\t` in a string to be printed.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找将`\t`放入打印字符串中时会发生什么。
- en: In Chapter 1, we used `printf` to print the message. In this chapter, Eclipse
    uses `puts`. Look up the documentation of these functions to see how they are
    different.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第1章中，我们使用了`printf`来打印消息。在本章中，Eclipse使用`puts`。查阅这些函数的文档，了解它们的不同之处。
- en: Questions
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: What is an IDE?
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是IDE？
- en: What are the files generated by our IDE, and what do they contain?
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的IDE生成了哪些文件，它们包含了什么？
- en: Where can you get help with using C and Eclipse?
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以从哪里获得关于使用C语言和Eclipse的帮助？
