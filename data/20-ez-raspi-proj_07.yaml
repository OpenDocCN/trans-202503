- en: Games and Toys
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 游戏与玩具
- en: '**18'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**18'
- en: Digital Drum Set**
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 数字鼓组**
- en: In this project you’ll create a button-controlled digital drum set with just
    a breadboard circuit and a few buttons. Pressing different buttons will produce
    different drum sounds, including two drumbeat loops.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将创建一个由面包板电路和几个按钮控制的数字鼓组。按下不同的按钮将产生不同的鼓声，包括两个鼓点循环。
- en: '![image](../images/f0225-01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0225-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需部件**'
- en: Raspberry Pi
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派
- en: Breadboard
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板
- en: Eight pushbuttons
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 八个按键
- en: Headphones, or monitor with speakers connected to the Pi via HDMI
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 耳机，或通过HDMI连接到树莓派的显示器带扬声器
- en: Jumper wires
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线
- en: '**SOFTWARE REQUIRED**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需软件**'
- en: avconv
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: avconv
- en: This project uses samples from the Sonic Pi sample library, but you’re free
    to adapt it to use any sounds you want.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目使用来自Sonic Pi样本库的样本，但你可以根据需要适配它，使用任何你喜欢的声音。
- en: '**PREPARING THE AUDIO**'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**准备音频**'
- en: First you’ll need to configure the Raspberry Pi audio properly and get set up
    to use audio samples from Sonic Pi.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要正确配置树莓派的音频设置，并准备好使用Sonic Pi的音频样本。
- en: '**Configuring the Audio**'
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**配置音频**'
- en: First, plug your headphones or speakers into the Raspberry Pi audio jack. If
    your monitor has built-in speakers and is connected to the Pi with an HDMI cable,
    you don’t need to connect anything to the audio jack—you can listen to the sound
    through the monitor speakers.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将耳机或扬声器插入树莓派音频插孔。如果你的显示器内建扬声器，并且通过HDMI电缆连接到树莓派，则不需要连接任何东西到音频插孔——你可以通过显示器扬声器来听音频。
- en: On the top-right corner of your desktop environment, right-click the audio symbol
    and select the audio source as shown in [Figure 18-1](ch18.xhtml#ch18fig1). Select
    Analog if you’re using headphones, or HDMI if you’re using a monitor with speakers.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在桌面环境的右上角，右键单击音频符号并选择音频源，如[图18-1](ch18.xhtml#ch18fig1)所示。如果你使用耳机，选择模拟（Analog），如果你使用带扬声器的显示器，选择HDMI。
- en: '![image](../images/f0226-01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0226-01.jpg)'
- en: '**FIGURE 18-1:** Selecting the audio source'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**图18-1：** 选择音频源'
- en: '**Getting the Audio Sample Files**'
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**获取音频样本文件**'
- en: '**NOTE**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We won’t be covering Sonic Pi in this book, but if you want to explore it
    on your own, go to **Programming*** ▸ ***Sonic Pi** in the taskbar main menu to
    open the software and take a look around.*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们在本书中不会介绍Sonic Pi，但如果你想自己探索它，可以通过任务栏主菜单中的**编程*** ▸ ***Sonic Pi**来打开软件并浏览。*'
- en: The Sonic Pi software comes installed in the Pi’s operating system and allows
    you to create your own digital music using code, but in this project you’ll just
    be using the Sonic Pi’s sample audio files.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Sonic Pi软件已预装在树莓派的操作系统中，允许你使用代码创作数字音乐，但在这个项目中，你只会使用Sonic Pi的示例音频文件。
- en: In the terminal, enter the following commands to create a new folder called
    *Games_and_Toys* inside the *Projects* folder, and move into the new folder. You’ll
    save the samples here.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中，输入以下命令，在*Projects*文件夹内创建一个名为*Games_and_Toys*的新文件夹，并进入该文件夹。你将在这里保存样本。
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then enter the following to copy the Sonic Pi’s *samples* folder to the *Games_and_Toys*
    folder (note that there is a space between the final `/` and the period at the
    end):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后输入以下命令，将Sonic Pi的*sample*文件夹复制到*Games_and_Toys*文件夹中（注意，最后的`/`和句点之间有一个空格）：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, enter these commands to list the contents of the *samples* folder to
    check that they transferred correctly:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，输入以下命令列出*sample*文件夹中的内容，检查它们是否正确转移：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If all went as planned, you should see a list of files like so:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你应该看到如下的文件列表：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You may notice these files have the unusual extension *.flac*. This format
    is used in Sonic Pi, but to use them with Python you need to convert them to *.wav*
    files. For that, you’ll use the avconv software. Enter the following command to
    install avconv:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到这些文件具有不常见的扩展名*.flac*。这种格式在Sonic Pi中使用，但要在Python中使用它们，你需要将它们转换为*.wav*文件。为此，你将使用avconv软件。输入以下命令来安装avconv：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then enter the following command, which will go through all the files in the
    *samples* folder and convert each *.flac* file into a *.wav* file:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后输入以下命令，这将遍历*sample*文件夹中的所有文件，并将每个*.flac*文件转换为*.wav*文件：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, use the `ls` command to list the items in your *samples* folder and check
    that you now have *.wav* files to work with:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用`ls`命令列出*sample*文件夹中的项目，并检查是否已准备好*.wav*文件：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should have both a *.wav* and a *.flac* file for each sample. To remove
    the *.flac* files from your *samples* folder, enter the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 每个样本应该同时拥有*.wav*和*.flac*文件。要从*sample*文件夹中删除*.flac*文件，请输入以下命令：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can double-check that you have the correct files with the `ls` command again
    if you like.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，可以通过再次使用 `ls` 命令来核对文件是否正确。
- en: 'You can play the sounds with the *omxplayer* software that’s installed on your
    operating system by default. To listen to the sample called *drum_snare_soft.wav*,
    enter the following at your command line:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用操作系统默认安装的 *omxplayer* 软件来播放这些声音。要播放名为 *drum_snare_soft.wav* 的示例音频，请在命令行中输入以下内容：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you explore the samples files, you’ll see a wide variety of sounds, from
    guitar sounds to cow bell and drums. Choose eight different drum sounds to include
    in your drum set (or any other sounds that strike your fancy).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你浏览示例文件，你会看到各种各样的声音，从吉他声到牛铃声和鼓声。选择八种不同的鼓声加入你的鼓组（或任何其他你喜欢的声音）。
- en: 'The sounds we’ve chosen are as follows; the last two are drum beats, while
    the others refer to single drum sounds:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择的声音如下；最后两个是鼓点，而其他的是单个鼓声：
- en: '*drum_cymbal_open.wav*'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*drum_cymbal_open.wav*'
- en: '*drum_heavy_kick.wav*'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*drum_heavy_kick.wav*'
- en: '*drum_snare_hard.wav*'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*drum_snare_hard.wav*'
- en: '*drum_cymbal_closed.wav*'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*drum_cymbal_closed.wav*'
- en: '*drum_roll.wav*'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*drum_roll.wav*'
- en: '*perc_snap.wav*'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*perc_snap.wav*'
- en: '*loop_amen_full.wav*'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*loop_amen_full.wav*'
- en: '*loop_mika.wav*'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*loop_mika.wav*'
- en: '**WIRING THE CIRCUIT**'
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**电路连接**'
- en: The circuitry for this project simply involves wiring eight pushbuttons to the
    Pi. Each pushbutton is associated with a different sound.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目的电路仅涉及将八个按键连接到树莓派。每个按键都与不同的声音相关联。
- en: To wire the circuit, follow these instructions, using [Figure 18-2](ch18.xhtml#ch18fig2)
    as a reference.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接电路，请按照这些说明进行操作，并参考 [图 18-2](ch18.xhtml#ch18fig2)。
- en: '![image](../images/f0228-01.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0228-01.jpg)'
- en: '**FIGURE 18-2:** The digital drum set circuit'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 18-2：** 数字鼓电路'
- en: Connect the GND pin to the breadboard GND rail.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 GND 引脚连接到面包板的 GND 导轨。
- en: Insert eight pushbuttons into the breadboard at equal distances over the center
    divide.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将八个按键均匀地插入面包板，并沿着中间分隔线排列。
- en: 'Connect the bottom-left pushbutton leads to GND and the bottom-right leads
    to one of the following GPIO pins in turn: GPIO 2, 3, 14, 15, 17, 18, 22, and
    27.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将底部左侧的按键引脚连接到 GND，将底部右侧的引脚依次连接到以下 GPIO 引脚之一：GPIO 2、3、14、15、17、18、22 和 27。
- en: '| **PUSHBUTTON** | **RASPBERRY PI** |'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **PUSHBUTTON** | **树莓派** |'
- en: '| --- | --- |'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 1 | GPIO 2 |'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 1 | GPIO 2 |'
- en: '| 2 | GPIO 3 |'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 2 | GPIO 3 |'
- en: '| 3 | GPIO 14 |'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 3 | GPIO 14 |'
- en: '| 4 | GPIO 15 |'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 4 | GPIO 15 |'
- en: '| 5 | GPIO 17 |'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 5 | GPIO 17 |'
- en: '| 6 | GPIO 18 |'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 6 | GPIO 18 |'
- en: '| 7 | GPIO 22 |'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 7 | GPIO 22 |'
- en: '| 8 | GPIO 27 |'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 8 | GPIO 27 |'
- en: '**WRITING THE SCRIPT**'
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写脚本**'
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Copy the following code into the Python Editor and save the script as
    *digital_drum_set.py* inside the *Games_and_Toys* folder (remember that you can
    download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 **Python 3 (IDLE)**，然后点击 **文件** ▸ **新建文件** 来创建一个新脚本。将以下代码复制到 Python 编辑器中，并将脚本保存为
    *digital_drum_set.py*，存放在 *Games_and_Toys* 文件夹内（记得你可以从 *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*
    下载所有脚本）：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As usual, you start your script by importing the necessary libraries ➊. The
    new library here is the `pygame.mixer`, used for loading and playing sounds. From
    `pygame.mixer` you also import the `Sound` module, used to create sound objects.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，你首先通过导入必要的库来开始你的脚本 ➊。这里的新库是 `pygame.mixer`，用于加载和播放声音。从 `pygame.mixer`
    中，你还导入了 `Sound` 模块，用于创建声音对象。
- en: 'Then you initialize the Pygame mixer ➋ and create a dictionary that holds sounds
    ➌. In Python, a *dictionary* is a data structure used to store relationships between
    items. In this case, you’re associating a button with a specific sound. The basic
    structure of a dictionary is as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后初始化 Pygame mixer ➋ 并创建一个字典，用于存储声音 ➌。在 Python 中，*字典* 是一种用于存储项目间关系的数据结构。在本例中，你将每个按钮与特定的声音关联。字典的基本结构如下：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The dictionary is enclosed by curly brackets, `{}`, and is composed of key/value
    pairs. You use a colon (`:`) to assign each key to its corresponding value, and
    you use commas (`,`) to separate each key/value pair.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 字典用花括号 `{}` 括起来，并由键/值对组成。你使用冒号 (`:`) 将每个键与其对应的值关联，并使用逗号 (`,`) 分隔每个键/值对。
- en: In this project, the keys are the buttons, and the values are the sounds. To
    create a sound object, you pass the sound file path as a string to the `Sound()`
    function. In this case, since the *samples* folder is inside the *Games_and_Toys*
    folder, you don’t need to provide an entire path, just the folder name followed
    by the sound filename. You’ll need to change the sound filenames in this script,
    highlighted in bold, to your chosen sound files.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，键是按钮，值是声音。要创建一个声音对象，你需要将声音文件路径作为字符串传递给`Sound()`函数。在这种情况下，由于*sample*文件夹位于*Games_and_Toys*文件夹内，你不需要提供完整的路径，只需要提供文件夹名称，然后跟上声音文件名。你需要将此脚本中以粗体突出显示的声音文件名更改为你选择的声音文件。
- en: Next, assign each button to a sound effect ➍; this means that, when a pushbutton
    is pressed, the corresponding sound will play. Finally, the `pause()` function
    ➎ at the end of the script keeps the program running, so events can be detected.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将每个按钮分配到一个声音效果 ➍；这意味着，当按下按钮时，相应的声音会播放。最后，脚本末尾的`pause()`函数 ➎ 保持程序运行，以便能够检测事件。
- en: To run the script, press **F5** or go to **Run** ▸ **Run Module**.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行脚本，按**F5**或转到**运行** ▸ **运行模块**。
- en: Congratulations—you’ve just built your own digital drum set! Now, press the
    pushbuttons and compose your own music clips.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你——你刚刚完成了自己的数字鼓组！现在，按下按钮，创作你自己的音乐片段。
- en: '**TAKING IT FURTHER**'
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步探索**'
- en: 'This was a cool project and so simple to build. We encourage you to extend
    this project by trying the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很酷的项目，而且非常简单。我们鼓励你通过尝试以下内容来扩展这个项目：
- en: Adding other sounds to your digital drum set
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向你的数字鼓组添加其他声音
- en: Recording your own sounds or searching the web for free sounds
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 录制你自己的声音或在网上搜索免费的声音
- en: Building a digital piano, a digital guitar, or a hybrid music box with mixed
    sounds
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建造一个数字钢琴、数字吉他或一个混合音效的混合音乐盒
- en: '**19'
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**19'
- en: 'Make a Game in Scratch: Hungry Monkey**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scratch中制作一个游戏：饥饿的猴子**
- en: In this project you’ll use the block-based programming language Scratch to create
    a game that can be controlled with two pushbuttons and your Pi.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用基于块的编程语言Scratch来创建一个可以通过两个按钮和你的Pi进行控制的游戏。
- en: '![image](../images/f0233-01.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0233-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需零件**'
- en: Raspberry Pi
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派
- en: Two pushbuttons
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 两个按钮
- en: Breadboard
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板
- en: Jumper wires
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线
- en: In this project, you’ll create your own game called Hungry Monkey. The object
    of the game is for the monkey to catch as many ripe bananas as possible in 30
    seconds, while avoiding the rotten ones. You’ll be able to move the monkey left
    and right with two pushbuttons that you’ll wire to your Raspberry Pi.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将创建自己的游戏《饥饿的猴子》。游戏的目标是让猴子在30秒内尽可能多地抓住成熟的香蕉，同时避免腐烂的香蕉。你可以通过两个按钮控制猴子左右移动，这些按钮将连接到你的树莓派。
- en: '**INTRODUCING SCRATCH 2**'
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍Scratch 2**'
- en: '**NOTE**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*To find out more about Scratch, visit the official Scratch website at* [http://scratch.mit.edu/](http://scratch.mit.edu/).'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*要了解更多关于Scratch的信息，请访问官方Scratch网站* [http://scratch.mit.edu/](http://scratch.mit.edu/)。'
- en: Scratch is a visual programming language you can use to create animations, stories,
    and games using drag-and-drop code blocks. Although Scratch was developed to teach
    kids how to program, it’s suitable for anyone who wants to learn some fundamental
    programming concepts or just wants to have fun building their own games.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Scratch是一种可视化编程语言，你可以使用它通过拖拽代码块来创建动画、故事和游戏。虽然Scratch是为了教孩子如何编程而开发的，但它适合任何想要学习一些基本编程概念或只是想通过制作自己的游戏来娱乐的人。
- en: Scratch 2 is installed on Raspbian by default. You can open it from the desktop
    main menu by going to **Programming** ▸ **Scratch 2**. When you open Scratch 2,
    you should see a window like the one in [Figure 19-1](ch19.xhtml#ch19fig1).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Scratch 2在Raspbian上默认安装。你可以通过桌面主菜单中的**编程** ▸ **Scratch 2**来打开它。当你打开Scratch 2时，你应该会看到像[图19-1](ch19.xhtml#ch19fig1)中的窗口。
- en: '![image](../images/f0234-01.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0234-01.jpg)'
- en: '**FIGURE 19-1:** The Scratch 2 window'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**图19-1：** Scratch 2窗口'
- en: The Scratch window divides the screen into four main sections. The Stage ➊ is
    where your game or animations will play out. At the top right, you’ll see a green
    flag and a stop sign; you can use these icons to start and stop the game, respectively.
    When you first open Scratch, you should see a cat on your stage by default.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Scratch窗口将屏幕分为四个主要部分。舞台 ➊ 是你的游戏或动画播放的地方。在右上角，你会看到一个绿色旗帜和一个停止标志；你可以使用这些图标分别开始和停止游戏。当你第一次打开Scratch时，默认情况下，你应该会在舞台上看到一只猫。
- en: 'The Sprite List ➋ shows all of your *sprites*, which are your game characters
    or any object that performs an action in your project. In the middle of the window
    is the Blocks Area ➌, which has three tabs: Scripts, Costumes, and Sounds. The
    Scripts tab contains programming blocks you use to build your program. Each block
    is a different programming instruction that you can drag and drop into place in
    your program. You’ll see different categories of blocks organized according to
    what they do. Each category has a specific color; for example, blocks from the
    **Motion** category, which tell your sprites how to move around, are dark blue.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Sprite列表➋显示了所有的*精灵*，这些精灵是你游戏中的角色或任何在项目中执行动作的物体。窗口中间是代码区➌，它有三个标签：脚本、服装和声音。脚本标签包含了你用来构建程序的编程块。每个块代表一种编程指令，你可以将它们拖放到程序中。你会看到按照功能分类的不同块，每个分类都有特定的颜色；例如，**运动**类别的块，用来控制精灵如何移动，颜色是深蓝色的。
- en: The Costumes tab ➍ shows options for customizing and creating new costumes for
    your sprites, and the Sounds tab ➎ allows you to add sounds to your sprites. The
    Scripts Area ➏ is where you drag the blocks and put them together to create a
    script.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 服装标签➍显示了用于自定义和创建新服装的选项，声音标签➎允许你为精灵添加声音。脚本区➏是你拖动块并将它们组合在一起创建脚本的地方。
- en: The menu bar ➐ at the top shows the File and Edit main menus at the left side.
    The icons at the center allow you to duplicate, delete, grow, and shrink your
    sprites, and also get help from Scratch.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 顶部的菜单栏➐显示了左侧的“文件”和“编辑”主菜单。中央的图标允许你复制、删除、放大和缩小精灵，也可以从Scratch获取帮助。
- en: '**WIRING THE CIRCUIT**'
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**连接电路**'
- en: The circuit for this project consists of two pushbuttons and the Raspberry Pi.
    Follow these instructions to wire them, using [Figure 19-2](ch19.xhtml#ch19fig2)
    as a reference.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目的电路由两个按钮和树莓派组成。按照这些指示连接它们，并使用[图19-2](ch19.xhtml#ch19fig2)作为参考。
- en: Connect a GND pin to your breadboard’s GND rail.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个GND引脚连接到面包板的GND轨道。
- en: Insert two pushbuttons into the breadboard.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个按钮插入面包板中。
- en: Connect the bottom-right pushbutton pins to the GND rail.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将右下角按钮的引脚连接到GND轨道。
- en: Connect the bottom-left pin of one pushbutton to GPIO 2 and the other to GPIO
    3.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个按钮的左下角引脚连接到GPIO 2，另一个连接到GPIO 3。
- en: '![image](../images/f0235-01.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0235-01.jpg)'
- en: '**FIGURE 19-2:** Wiring two pushbuttons to the Raspberry Pi'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**图19-2：** 将两个按钮连接到树莓派'
- en: That’s it! You’re ready to code the game.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些！你已经准备好编写游戏代码了。
- en: '**BUILDING THE SCRIPT**'
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建脚本**'
- en: Before creating a game, it’s useful to outline the features you want your game
    to have so you know exactly what you need to do.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建游戏之前，列出你希望游戏具备的功能是有用的，这样你就能明确需要做什么。
- en: 'In the Hungry Monkey game, the player controls a monkey who needs to catch
    as many ripe bananas as possible while avoiding rotten bananas. For each good
    banana caught, the player gets a point; if the player catches a rotten banana,
    the game deducts a point. Here’s a list of the main steps to build the Hungry
    Monkey game:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在《饥饿的猴子》游戏中，玩家控制一只猴子，需要尽量抓住熟香蕉，同时避开坏香蕉。每抓到一个好香蕉，玩家得一分；如果抓到一个坏香蕉，游戏会扣一分。以下是构建《饥饿的猴子》游戏的主要步骤：
- en: 'Create the main character, the monkey, and allow the player to control its
    movement using two pushbuttons: one moves the monkey right and the other moves
    the monkey left. Also allow the player to move the monkey with keyboard keys.'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建主要角色——猴子，并允许玩家使用两个按钮控制它的移动：一个按钮向右移动猴子，另一个向左移动猴子。也允许玩家使用键盘按键控制猴子的移动。
- en: Create the good and rotten banana sprites and make them fall from the sky.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建好香蕉和坏香蕉的精灵并让它们从天空中掉下来。
- en: Program the monkey so that it catches the bananas when it touches them.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写代码让猴子在接触到香蕉时抓住它们。
- en: Create a score system that adds one point when the monkey catches a good banana
    and subtracts a point when it catches a rotten one.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个得分系统，当猴子抓到一个好香蕉时加一分，抓到一个坏香蕉时扣一分。
- en: Create a timer and end the game when the timer hits 0.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个计时器，当计时器归零时结束游戏。
- en: Display the player’s score when the game is over.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 游戏结束时显示玩家的得分。
- en: The Scratch file for this project is available at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*.
    To upload a saved program to Scratch, go to **File ▸ Load Project**. To build
    the script, follow the next few sections.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目的 Scratch 文件可以在 *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*
    获取。要将保存的程序上传到 Scratch，请选择 **文件 ▸ 加载项目**。要构建脚本，请按照接下来的几个部分进行操作。
- en: '**Creating the Sprites and Choosing the Stage Background**'
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建角色并选择舞台背景**'
- en: '**NOTE**'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*You can also create a sprite from scratch using the paintbrush icon, upload
    your own sprite by clicking the folder icon, or take a photo with a webcam for
    your sprite with the camera icon.*'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '*你也可以使用画笔图标从零创建角色，点击文件夹图标上传你自己的角色，或使用摄像头图标拍照创建你的角色。*'
- en: In the Hungry Monkey Game, you’ll use a monkey sprite, and a banana sprite from
    the Sprite Library. You won’t need to use the cat sprite that appears on the Stage
    by default, so you can delete it by right-clicking the sprite and selecting **Delete**
    to delete this sprite.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在《饥饿猴子游戏》中，你将使用猴子角色和来自角色库的香蕉角色。你不需要使用默认出现在舞台上的猫角色，所以你可以通过右键点击该角色并选择 **删除** 来删除它。
- en: Go to the Sprite List and click the leftmost icon that looks like a character
    (see [Figure 19-3](ch19.xhtml#ch19fig3)) to open the Sprite Library.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 转到角色列表，点击最左侧的图标（看起来像一个人物图标，见[图 19-3](ch19.xhtml#ch19fig3)），以打开角色库。
- en: '![image](../images/f0237-01.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0237-01.jpg)'
- en: '**FIGURE 19-3:** Icons to create new sprites'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 19-3：** 创建新角色的图标'
- en: From the Animals category, choose the `Monkey2` sprite and click **OK**. Then,
    open the Sprite Library again, select the `Bananas` sprite from the Things category,
    and then click **OK**.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 从动物类别中选择 `Monkey2` 角色，并点击 **确定**。然后，再次打开角色库，从物品类别中选择 `Bananas` 角色，点击 **确定**。
- en: You can choose a background for your game from the leftmost side of the Sprite
    List. There you’ll find a set of icons for the background. Click the first icon—highlighted
    in [Figure 19-4](ch19.xhtml#ch19fig4)—to choose a background from the backdrop
    library. We’ve chosen the one called *blue sky*.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从角色列表的最左侧选择游戏的背景。在那里，你会找到一组背景图标。点击第一个图标——在[图 19-4](ch19.xhtml#ch19fig4)中突出显示——从背景库中选择一个背景。我们选择了叫做*蓝天*的背景。
- en: '![image](../images/f0237-02.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0237-02.jpg)'
- en: '**FIGURE 19-4:** Selecting the background from the backdrop library'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 19-4：** 从背景库中选择背景'
- en: Now your sprites section should look like [Figure 19-5](ch19.xhtml#ch19fig5).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的角色部分应该像[图 19-5](ch19.xhtml#ch19fig5)所示。
- en: '![image](../images/f0237-03.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0237-03.jpg)'
- en: '**FIGURE 19-5:** Sprite List with the selected sprites and background'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 19-5：** 选定角色和背景的角色列表'
- en: '**Editing the Sprites**'
  id: totrans-142
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编辑角色**'
- en: Scratch allows you to increase or decrease the size of a sprite, change its
    color, or edit it as you would do in an image-editing program. Scratch built-in
    image editor is called *Paint Editor*. Here you’ll make some changes to your sprites’
    appearance.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Scratch 允许你增加或减少角色的大小，改变其颜色，或像在图像编辑程序中一样编辑它。Scratch 内置的图像编辑器叫做*绘图编辑器*。在这里，你将对角色的外观进行一些修改。
- en: Select the `Monkey2` sprite in the Sprite List; if a sprite is selected, it
    will be outlined in blue, as shown in [Figure 19-5](ch19.xhtml#ch19fig5). Next,
    click the `Monkey2` sprite in the Costumes tab, and edit the first costume, called
    `monkey2-a`. With the mouse pointer drag a corner of the sprite until its size
    matches 98×138 pixels, or use the shrink tool until you get the desired size;
    the sprite size is displayed below the `monkey2-a` costume. Also change the `Bananas`
    sprite’s size to 28×28 pixels.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在角色列表中选择 `Monkey2` 角色；如果某个角色被选中，它会被蓝色轮廓框住，如[图 19-5](ch19.xhtml#ch19fig5)所示。接下来，点击
    `Monkey2` 角色的造型标签，并编辑第一个造型，名为 `monkey2-a`。使用鼠标指针拖动角色的一个角，直到它的大小为 98×138 像素，或者使用缩小工具调整到所需大小；角色的大小会显示在
    `monkey2-a` 造型下方。同时，将 `Bananas` 角色的大小调整为 28×28 像素。
- en: When adjusting the sprites’ size, make sure they’re at the center of the canvas
    in order to keep the sprite’s reference point.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在调整角色大小时，确保它们位于画布的中心，以保持角色的参考点。
- en: '**Adding Controls to the Monkey Sprite**'
  id: totrans-146
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**为猴子角色添加控制功能**'
- en: Now you’ll add controls to the monkey so you can make it go left or right by
    pressing the pushbuttons or the left and right arrows on the keyboard.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将为猴子添加控制功能，这样你就可以通过按下按钮或键盘上的左右箭头让它向左或向右移动。
- en: To allow the Raspberry Pi GPIOs to interface with Scratch so the program will
    react when a pushbutton is pressed, you need to add an extension library to Scratch.
    Select the `Monkey2` sprite in the Scripts tab, select **More Blocks**, and click
    **Add an Extension**. Next select the Pi GPIO icon, as shown in [Figure 19-6](ch19.xhtml#ch19fig6),
    and click **OK**.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让树莓派 GPIO 与 Scratch 接口，这样程序在按下按钮时能够响应，你需要将一个扩展库添加到 Scratch 中。选择“脚本”标签下的 `Monkey2`
    精灵，选择 **更多积木**，然后点击 **添加扩展**。接下来选择 Pi GPIO 图标，如 [图19-6](ch19.xhtml#ch19fig6) 所示，然后点击
    **确定**。
- en: '![image](../images/f0238-01.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0238-01.jpg)'
- en: '**FIGURE 19-6:** Adding the Pi GPIO extension'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**图19-6：** 添加 Pi GPIO 扩展'
- en: The extension library adds new blocks to control the Pi GPIOs, which should
    appear in the More Blocks category.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展库添加了新的积木来控制 Pi GPIO，这些积木应出现在“更多积木”类别中。
- en: There are many different ways to make your sprite move in Scratch. You’ll use
    the (x,y) coordinate system, in which the (0,0) position is the middle of the
    Stage. Increasing the x-coordinate moves your sprites to the right, and decreasing
    it moves your sprites to the left. Increasing the y-coordinate moves your sprites
    up, and decreasing it moves your sprites down. The blocks that control movement
    are in the dark blue **Motion** category.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Scratch 中，有许多不同的方法可以让你的精灵移动。你将使用 (x,y) 坐标系统，其中 (0,0) 位置是舞台的中央。增加 x 坐标会将精灵向右移动，减少
    x 坐标会将精灵向左移动。增加 y 坐标会将精灵向上移动，减少 y 坐标会将精灵向下移动。控制移动的积木位于深蓝色的 **动作** 类别中。
- en: To control the monkey, select the `Monkey2` sprite and drag the blocks in [Figure
    19-7](ch19.xhtml#ch19fig7) into the Script Area. Then change the settings in the
    blocks to match [Figure 19-7](ch19.xhtml#ch19fig7).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 为了控制猴子，选择 `Monkey2` 精灵并将 [图19-7](ch19.xhtml#ch19fig7) 中的积木拖入脚本区域。然后修改积木中的设置，使其与
    [图19-7](ch19.xhtml#ch19fig7) 中的设置一致。
- en: '![image](../images/f0239-01.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0239-01.jpg)'
- en: '**FIGURE 19-7:** Blocks for controlling the monkey'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**图19-7：** 控制猴子的积木'
- en: You first set the `Monkey2` sprite’s x-position to 0 and y-position to –110\.
    Setting x to 0 centers your sprite horizontally, and setting y to –110 moves your
    sprite to the floor. This way the sprite is always in this position every time
    you start the game.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先将 `Monkey2` 精灵的 x 位置设置为 0，y 位置设置为 –110。将 x 设置为 0 会将精灵水平居中，而将 y 设置为 –110 会将精灵移到地面。这样，每次开始游戏时，精灵都会处于这个位置。
- en: The next two blocks set GPIO 2 and GPIO 3 to inputs, so the program will be
    able to tell if the pushbuttons have been pressed.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个积木将 GPIO 2 和 GPIO 3 设置为输入，这样程序就能判断按钮是否被按下。
- en: '**NOTE**'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Finding the blocks is easy. Remember that each blocks category has a specific
    color and each block within it is colored accordingly.*'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '*找到这些积木很容易。记住，每个积木类别都有特定的颜色，每个类别中的积木也会相应地着色。*'
- en: Then you add a forever loop that continuously checks if the player is pressing
    the pushbuttons or the left and right arrow keys. If the player presses the pushbutton
    connected to GPIO 3, or the right arrow key, the sprite’s x-position is changed
    by 30, moving it to the right; if the player presses the pushbutton connected
    to GPIO 2, or the left arrow key, the sprite’s x-position is changed by –30, moving
    it to the left. You can increase this number to make your monkey move faster,
    or decrease it to make the monkey move slower.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你需要添加一个永远循环，不断检查玩家是否按下按钮或左右箭头键。如果玩家按下连接到 GPIO 3 的按钮，或按下右箭头键，精灵的 x 位置将增加 30，向右移动；如果玩家按下连接到
    GPIO 2 的按钮，或按下左箭头键，精灵的 x 位置将减少 30，向左移动。你可以增加这个数值来让猴子移动得更快，或者减少它让猴子移动得更慢。
- en: Once you’ve added the blocks, double-check them against [Figure 19-7](ch19.xhtml#ch19fig7),
    and then you can test it out.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你添加了这些积木，双重检查它们是否与 [图19-7](ch19.xhtml#ch19fig7) 相符，然后你就可以进行测试了。
- en: '**Testing Your Script**'
  id: totrans-162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**测试你的脚本**'
- en: To start a script in Scratch, you use the green flag block, ![image](../images/f0239-02.jpg).
    This block will start your game and synchronize all the scripts in your sprites.
    When you click the green flag icon at the top right of the stage section, Scratch
    starts all the scripts that are under this block.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Scratch 中启动脚本时，你使用绿色旗帜积木， ![image](../images/f0239-02.jpg)。这个积木会启动你的游戏并同步所有精灵中的脚本。当你点击舞台右上角的绿色旗帜图标时，Scratch
    会启动所有位于这个积木下方的脚本。
- en: Click the green flag icon ![image](../images/f0239-03.jpg) at the upper-right
    corner of the stage now. Test that the sprite moves appropriately by pressing
    the pushbuttons and arrow keys. When you have everything working, move on to the
    timer.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在点击舞台右上角的绿色旗帜图标！[image](../images/f0239-03.jpg)。按下按钮和箭头键，测试精灵是否按预期移动。当一切正常时，继续进行计时器部分。
- en: '**Creating the Countdown Timer**'
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建倒计时器**'
- en: The player needs to know how much time they have left to catch bananas, so next
    you’ll create a countdown timer.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家需要知道他们剩下多少时间来抓住香蕉，因此接下来你将创建一个倒计时器。
- en: To add the timer to your game, select the `Monkey2` sprite, and then add the
    blocks in [Figure 19-8](ch19.xhtml#ch19fig8) to the Script Area. You may notice
    you can’t find the show variable block. That’s because you need to create the
    variable to hold the time. To create variables, navigate to the **Data** blocks
    category, and click the **Make a Variable** button. Call the new variable time
    and make it available for all sprites by checking the **For all sprites** box.
    Now drag that block into the Script Area.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要将计时器添加到游戏中，选择`Monkey2`精灵，然后将[图19-8](ch19.xhtml#ch19fig8)中的块添加到脚本区域。你可能会注意到找不到显示变量块。这是因为你需要创建一个变量来保存时间。要创建变量，请进入**数据**块类别，然后点击**创建变量**按钮。将新变量命名为time，并通过勾选**对所有精灵可用**框，使其对所有精灵可用。现在将该块拖到脚本区域。
- en: '![image](../images/f0240-01.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0240-01.jpg)'
- en: '**FIGURE 19-8:** Blocks to create a countdown timer'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**图19-8：** 创建倒计时器的块'
- en: To create the countdown timer, you’ll use a block called timer. This block counts
    the time that has passed since the script started. When you click the green flag
    icon, the script resets the timer, so it starts counting from 0 every time you
    start the game. Next you include a block that shows the `time` variable on the
    stage. You can position the `time` variable by dragging it across the stage section;
    move it to the stage’s top-right corner.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建倒计时器，你将使用一个叫做计时器的块。这个块会计数从脚本开始到现在已经过去的时间。当你点击绿色旗帜图标时，脚本会重置计时器，因此每次开始游戏时，计时器都会从0开始计数。接下来，你将包括一个显示`time`变量的块，并可以通过将其拖动到舞台区域来定位它；将其移动到舞台的右上角。
- en: Next, the forever loop keeps updating the `time` variable so that it starts
    at 30 and decreases by one every second. You use the round block so the countdown
    time is shown only in integer numbers. If you want to change your game duration,
    you can adjust the number in the round block.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，永远循环将不断更新`time`变量，使其从30开始，每秒减少1。你可以使用四舍五入块，这样倒计时的时间只会以整数显示。如果你想更改游戏的持续时间，可以调整四舍五入块中的数字。
- en: Pay careful attention to the nesting here (see [Figure 19-9](ch19.xhtml#ch19fig9));
    you’ll notice that the set time to block comes first, then the round block. Then,
    on top of that, you need to drop the green - block with two empty circles. Inside
    the first empty circle, enter 30, and inside the second empty circle, drop a timer
    block from the **Sensing** category.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 请特别注意这里的嵌套结构（见[图19-9](ch19.xhtml#ch19fig9)）；你会注意到设置时间块首先出现，然后是四舍五入块。接着，在它之上，你需要放置一个绿色块，里面有两个空圆圈。在第一个空圆圈内输入30，在第二个空圆圈内，从**传感器**类别中拖入计时器块。
- en: '![image](../images/f0241-01.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0241-01.jpg)'
- en: '**FIGURE 19-9:** The nested if block'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**图19-9：** 嵌套的if块'
- en: The if block at the end (see [Figure 19-8](ch19.xhtml#ch19fig8)) hides the `time`
    variable from the stage when `time` hits 0\. Now try it out!
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 末尾的if块（见[图19-8](ch19.xhtml#ch19fig8)）隐藏了`time`变量，直到`time`达到0。现在试试看吧！
- en: '**Counting and Displaying the Score**'
  id: totrans-176
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**计数和显示得分**'
- en: To create the score system, first you need to create a variable to keep track
    of the score. In the **Data** blocks category, create a new variable called `score`
    and make it available for all sprites. Select the `Monkey2` sprite, and then add
    the blocks in [Figure 19-10](ch19.xhtml#ch19fig10) to the scripts area.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建得分系统，首先需要创建一个变量来跟踪得分。在**数据**块类别中，创建一个新变量，命名为`score`，并使其对所有精灵可用。选择`Monkey2`精灵，然后将[图19-10](ch19.xhtml#ch19fig10)中的块添加到脚本区域。
- en: '![image](../images/f0241-02.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0241-02.jpg)'
- en: '**FIGURE 19-10:** Blocks to display the score and stop the game'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**图19-10：** 显示得分并停止游戏的块'
- en: Set the set score to block to `0` so your score will restart when the game starts.
    Then add the show variable block to display the score on the stage.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 将设置得分块设为`0`，这样游戏开始时得分就会重置。然后添加显示变量块，将得分显示在舞台上。
- en: At the end of the game, when the time hits 0, the monkey should say the score
    in a speech bubble and all the scripts will stop, ending the game. To make the
    monkey talk, add some purple **Looks** blocks to show a speech bubble—you can
    enter whatever text you want your monkey to say here.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏结束时，当时间归零时，猴子应在对话框中说出得分，所有脚本将停止，游戏结束。为了让猴子说话，添加一些紫色的**外观**积木来显示对话框——你可以在此输入任何你希望猴子说的话。
- en: Again, be careful with the nesting here, and look at [Figure 19-10](ch19.xhtml#ch19fig10)
    carefully.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，注意积木的嵌套结构，并仔细查看[图19-10](ch19.xhtml#ch19fig10)。
- en: '**Making the Bananas Fall from the Sky**'
  id: totrans-183
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**让香蕉从天而降**'
- en: 'Now that you’ve created all the `Monkey2` animations and controls, you need
    to set the `Bananas` sprite to fall from the sky. Here’s the to-do list for the
    `Bananas` sprite:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了所有的`Monkey2`动画和控制，你需要让`Bananas`角色从天而降。以下是`Bananas`角色的待办事项：
- en: The bananas should fall from the sky, starting from a random x-position and
    then decreasing in y-position until they hit the floor.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 香蕉应该从天而降，从一个随机的x位置开始，随后y位置逐渐下降，直到它们碰到地面。
- en: The bananas should disappear when they hit the floor.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当香蕉碰到地面时，它们应该消失。
- en: When the bananas touch the monkey, a sound should play, one point should be
    added to the score, and the bananas should disappear.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当香蕉碰到猴子时，应该播放一个声音，得分加一，香蕉应该消失。
- en: All the bananas should be deleted when the time hits 0, so they don’t continue
    to fall after the game is over.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当时间归零时，所有香蕉应被删除，以防它们在游戏结束后继续掉落。
- en: First you need to add a sound from the Sound Library to the blocks section.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要从声音库中添加一个声音到积木区。
- en: '**Adding a Sound from the Sound Library**'
  id: totrans-190
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**从声音库添加声音**'
- en: You’ll add a pop sound to the `Bananas` sprite to play when it hits the `Monkey2`
    sprite. For that, select the `Bananas` sprite, and in the blocks section select
    the **Sounds** tab. Then click the ![image](../images/f0242-01.jpg) icon to choose
    a sound from the Sound Library and choose `pop`. Select the **Scripts** tab to
    add your action blocks.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 你将为`Bananas`角色添加一个"砰"的声音，当它与`Monkey2`角色碰撞时播放。为此，选择`Bananas`角色，在积木区选择**声音**选项卡。然后点击![image](../images/f0242-01.jpg)图标，从声音库中选择一个声音并选择`pop`。选择**脚本**选项卡以添加你的动作积木。
- en: '**Making the Bananas Fall**'
  id: totrans-192
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**让香蕉掉落**'
- en: To accomplish everything in the to-do list, select the `Bananas` sprite, and
    then add the blocks in [Figure 19-11](ch19.xhtml#ch19fig11) to its scripts area.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成待办事项，选择`Bananas`角色，然后将[图19-11](ch19.xhtml#ch19fig11)中的积木添加到其脚本区。
- en: '![image](../images/f0242-02.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0242-02.jpg)'
- en: '**FIGURE 19-11:** Blocks for creating and controlling the `Bananas` sprite'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**图19-11：** 创建和控制`Bananas`角色的积木'
- en: With the upper-left set of blocks ➊ in [Figure 19-11](ch19.xhtml#ch19fig11),
    you create a clone of the `Bananas` sprite every second. In other words, you make
    a new `Bananas` sprite appear every second.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图19-11](ch19.xhtml#ch19fig11)中，使用左上方的一组积木➊，每秒创建一个`Bananas`角色的克隆。换句话说，每秒都会让一个新的`Bananas`角色出现。
- en: In the set of blocks to the right ➌, you initialize the values for the `Bananas`
    clones. The show block ensures that the bananas appear on the screen. You set
    the bananas’ y-position to 170, which corresponds to the top of the Stage, and
    set the x-position to a random number between –230 and 230, which is the horizontal
    Stage space from left to right.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧的积木组➌中，你初始化了`Bananas`克隆的值。show积木确保香蕉出现在屏幕上。你将香蕉的y位置设置为170，对应舞台的顶部，并将x位置设置为-230到230之间的随机数，这是舞台的水平空间，从左到右。
- en: Then you initialize a repeat until block, which is like a `while` loop that
    is active until the `time` variable hits 0\. The change y by block inside the
    repeat until block decreases the y-position of the bananas so they look like they’re
    falling from the sky. In this case, we’re decreasing the y-position by 5\. If
    you want to make them fall faster, increase the y-value; if you want them to fall
    more slowly, decrease it.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你初始化了一个`repeat until`积木，这就像一个`while`循环，直到`time`变量为0时才停止。在`repeat until`积木内部的`change
    y by`积木使香蕉的y位置减少，看起来像是从天而降。在这个例子中，我们将y位置减少了5。如果你想让它们掉得更快，可以增加y值；如果你想让它们掉得更慢，可以减少y值。
- en: The first if block inside the repeat until block makes the bananas disappear
    when they reach the bottom of the stage, at y < –160\. The second if block adds
    one point to the `score` variable and plays the `pop` sound when the bananas hit
    the monkey, and makes the bananas disappear. Finally, when the repeat until block
    is over, the `Bananas` clones are hidden from the stage.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在`repeat until`块内的第一个`if`块会在香蕉到达舞台底部时（y < -160）让香蕉消失。第二个`if`块会在香蕉碰到猴子时给`score`变量加一分并播放`pop`声音，同时让香蕉消失。最后，当`repeat
    until`块结束时，`Bananas`克隆体会从舞台上消失。
- en: The blocks in the lower left ➋ of [Figure 19-11](ch19.xhtml#ch19fig11) stop
    the creation of new `Bananas` clones when the `time` variable hits 0.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 19-11](ch19.xhtml#ch19fig11) 中左下角的模块➋会在`time`变量为0时停止创建新的`Bananas`克隆体。'
- en: '**Adding the Rotten Bananas**'
  id: totrans-201
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**添加烂香蕉**'
- en: 'You now have the monkey, the good bananas, the timer, and the score. You’re
    just missing the rotten bananas. The script for the rotten bananas is really similar
    to the script in [Figure 19-11](ch19.xhtml#ch19fig11); you just need to make these
    changes:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了猴子、好的香蕉、计时器和分数。你只缺少烂香蕉。烂香蕉的脚本和[图 19-11](ch19.xhtml#ch19fig11)中的脚本非常相似；你只需要做以下更改：
- en: Create rotten bananas every 2 seconds instead of 1.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每2秒生成一次烂香蕉，而不是每秒一次。
- en: Decrease the score by one when the rotten bananas touch the monkey.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当烂香蕉碰到猴子时，减少一分。
- en: Play a different sound when the monkey touches the rotten bananas. We’ve chosen
    the sound called `F elec bass`.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当猴子碰到烂香蕉时播放不同的声音。我们选择了`F elec bass`的声音。
- en: Change how the rotten bananas look.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改烂香蕉的外观。
- en: Because this script is so similar to the previous one, you’re going to duplicate
    the good bananas and then make the changes. Right-click the `Bananas` sprite and
    select **duplicate**. The sprite and its script should be duplicated and automatically
    named `Bananas2`. Right-click the `Bananas2` sprite and select **info**; a menu
    should appear that allows you to change the sprite’s name. Enter `Rotten` as the
    new name. The changes you need to make to the script are highlighted in [Figure
    19-12](ch19.xhtml#ch19fig12).
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这个脚本和之前的非常相似，所以你将复制好的香蕉精灵并进行更改。右键点击`Bananas`精灵并选择**复制**。精灵及其脚本会被复制，并自动命名为`Bananas2`。右键点击`Bananas2`精灵并选择**信息**；将会出现一个菜单，允许你更改精灵的名称。将新名称输入为`Rotten`。你需要对脚本进行的更改在[图
    19-12](ch19.xhtml#ch19fig12)中已标出。
- en: '![image](../images/f0244-01.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0244-01.jpg)'
- en: '**FIGURE 19-12:** Blocks for controlling the rotten bananas'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 19-12：** 控制烂香蕉的模块'
- en: Change the wait block value to `2` ➊, so a new `Rotten` clone will fall every
    2 seconds, instead of every second. Also change the sound block to play `F elec
    bass` ➋, and in the set score to block, reduce the score by `1` ➌. Remember that
    you have to add this sound from the library in the Sounds tab first.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 将等待模块的值改为`2` ➊，这样每隔2秒就会生成一个新的`Rotten`克隆体，而不是每秒生成一个。同时，将声音模块改为播放`F elec bass`
    ➋，并在设置分数的模块中将分数减少`1` ➌。记住，你需要先在“声音”选项卡中从库中添加这个声音。
- en: With the script for rotten bananas complete, next you’ll change the `Rotten`
    sprite colors so that the bananas look rotten. Select the `Rotten` sprite and
    click the **Costumes** tab. The Paint Editor screen should appear (see [Figure
    19-13](ch19.xhtml#ch19fig13)).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 完成烂香蕉的脚本后，接下来你需要更改`Rotten`精灵的颜色，使香蕉看起来像是烂掉了。选择`Rotten`精灵并点击**造型**选项卡。应出现绘画编辑器屏幕（见[图
    19-13](ch19.xhtml#ch19fig13)）。
- en: On the right side of the window, select the bucket icon ➊; then, at the bottom,
    select different colors ➋ to fill each individual banana with a different color.
    Choose colors like brown, olive green, and dark green to show that they’re rotten.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在窗口的右侧，选择桶图标➊；然后，在底部选择不同的颜色➋来为每根香蕉填充不同的颜色。选择棕色、橄榄绿色和深绿色等颜色，表示它们已经烂了。
- en: '![image](../images/f0245-01.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0245-01.jpg)'
- en: '**FIGURE 19-13:** Editing the **Rotten** sprite colors'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 19-13：** 编辑**Rotten**精灵颜色'
- en: '**PLAYING THE GAME**'
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**玩游戏**'
- en: Congratulations! Your game is ready. To play the game in fullscreen, click the
    fullscreen icon at the top-left corner of the stage, and then click the green
    flag icon. Playing the game in fullscreen makes it run smoother and quicker.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你的游戏已经准备好了。要在全屏模式下玩游戏，点击舞台左上角的全屏图标，然后点击绿色旗帜图标。在全屏模式下玩游戏会让它运行得更流畅、更快速。
- en: Remember that you can use either the pushbuttons or the keyboard keys to play
    the game. When the game is over, just click the green flag icon to restart.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你可以使用推按钮或键盘键来玩游戏。当游戏结束时，只需点击绿色旗帜图标重新开始。
- en: '**TAKING IT FURTHER**'
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步发展**'
- en: 'This project was just a glimpse of what you can do with Scratch. Here are some
    ideas to improve this game:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目只是展示了你可以用Scratch做的一小部分内容。以下是一些改进这个游戏的想法：
- en: Increase the bananas’ falling speed as the game progresses.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着游戏的进行，增加香蕉掉落的速度。
- en: Increase the number of rotten bananas as the game progresses.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着游戏的进行，增加腐烂香蕉的数量。
- en: Make this game multiplayer by creating another sprite with different controls.
    (You’ll need to add another `score` variable to hold player 2’s score.)
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过创建另一个具有不同控制的角色精灵，使这个游戏支持多人游戏。（你需要添加一个`score`变量来保存玩家2的分数。）
- en: Add other electronics to your circuit that you can interface with Scratch, like
    buttons, buzzers, or sensors.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的电路中添加可以与Scratch接口的其他电子元件，例如按钮、蜂鸣器或传感器。
- en: Have fun and create your own games!
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 玩得开心，创造你自己的游戏！
- en: '**20'
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**20**'
- en: Wi-Fi Remote-Controlled Robot**
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '**Wi-Fi远程控制机器人**'
- en: In this project you’re going to build a two-wheel, battery-powered robot with
    a Raspberry Pi Zero W and the MotoZero add-on. You can control it over Wi-Fi using
    a web app you’ll make with Node-RED.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将构建一个两轮电池供电的机器人，使用Raspberry Pi Zero W和MotoZero附加板。你可以通过Wi-Fi使用你用Node-RED制作的网页应用程序来控制它。
- en: '![image](../images/f0248-01.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0248-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需部件**'
- en: Raspberry Pi Zero W (or other 40 GPIO Raspberry Pi)
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi Zero W（或其他40个GPIO的Raspberry Pi）
- en: Smart robot car chassis kit
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 智能机器人车底盘套件
- en: MotoZero add-on board (or other motor controller add-on)
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: MotoZero附加板（或其他电机控制器附加板）
- en: Four AA batteries
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 四个AA电池
- en: Portable charger
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 便携充电器
- en: Jumper wires
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线
- en: '**SOFTWARE REQUIRED**'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需软件**'
- en: Node-RED dashboard
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED仪表板
- en: '**PROJECT OUTLINE**'
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**项目概要**'
- en: Rather than going straight into the project, we’ll highlight the most important
    parts of the robot to give you an idea of how it will all work.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会直接进入项目，而是会先介绍机器人的最重要部分，给你一个整体的了解。
- en: '**Wi-Fi**'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '**Wi-Fi**'
- en: You’ll control the robot with a Node-RED application, so your Raspberry Pi needs
    to have Wi-Fi. Raspberry Pi models 3 and Zero W have built-in Wi-Fi, but if your
    board doesn’t, you can use a Wi-Fi dongle compatible with the Pi.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用Node-RED应用程序控制机器人，因此你的Raspberry Pi需要具备Wi-Fi功能。Raspberry Pi 3和Zero W型号内置了Wi-Fi，如果你的板子没有，你可以使用兼容Pi的Wi-Fi加密狗。
- en: '**Raspberry Pi Board**'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '**Raspberry Pi主板**'
- en: We’re using the Raspberry Pi Zero W because its small size makes it perfect
    for the small robot chassis. But any Raspberry Pi version with 40 GPIOs is compatible
    with this project as long as it has Wi-Fi.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的是Raspberry Pi Zero W，因为它的体积小，非常适合用于小型机器人底盘。但是，只要具有Wi-Fi功能，任何带有40个GPIO的Raspberry
    Pi版本都可以与本项目兼容。
- en: '**Robot Chassis Kit**'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '**机器人底盘套件**'
- en: We’re using a robot chassis kit that comes with everything you need to build
    the robot, including wheels, motors, and screws. You can find the kit in online
    marketplaces like Amazon or eBay by searching for *Smart Car Robot Chassis Kit*.
    You need the kit with two DC motors.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的是一个机器人底盘套件，里面包含了构建机器人所需的所有部件，包括车轮、电机和螺丝。你可以通过在亚马逊或eBay等在线市场上搜索*智能车机器人底盘套件*来找到这个套件。你需要的是带有两个直流电机的套件。
- en: '**MotoZero Add-on**'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '**MotoZero附加板**'
- en: The DC motors will make the robot move, and you’ll control them using an add-on
    board called MotoZero. One place to find the board is online at The Pi Hut (*[https://thepihut.com/motozero/](https://thepihut.com/motozero/)*).
    You can also use any other Raspberry Pi–compatible motor driver add-on for this
    project or build a circuit with the LC293D IC chip. We won’t cover how to build
    that circuit here, but there are plenty of tutorials online if you want to make
    your own.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 直流电机将使机器人移动，你将通过名为MotoZero的附加板来控制它们。一个可以找到这个附加板的地方是The Pi Hut网站 (*[https://thepihut.com/motozero/](https://thepihut.com/motozero/)*)。你也可以使用任何其他与Raspberry
    Pi兼容的电机驱动附加板，或者使用LC293D芯片构建电路。我们不会在这里详细介绍如何构建这个电路，但如果你想自己制作，可以在网上找到很多教程。
- en: '**Power**'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '**电源**'
- en: We don’t want to connect the Pi robot to a wall socket, because we want it to
    be portable, so we need to power the robot with a portable charger, or *power
    bank*. The power bank must be capable of outputting 5 V and 2 A. We tested this
    project with a power bank that has 2,200 mAh capacity and it worked fine; incorporating
    a power bank with more capacity will make the robot run for longer.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不想将Pi机器人连接到墙壁插座，因为我们希望它具有便携性，因此需要使用便携充电器或*移动电源*为机器人供电。移动电源必须能够输出5V和2A。我们使用一款容量为2200mAh的移动电源进行了测试，效果良好；如果使用容量更大的电源，机器人可以运行更长时间。
- en: The DC motors need to be powered independently from the Pi, meaning you need
    two independent power sources. To power up the motors, we’re using the battery
    holder that comes with the chassis kit along with four AA batteries, not included
    in the kit.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 直流电动机需要独立于树莓派供电，这意味着你需要两个独立的电源。为了为电动机供电，我们使用了底盘套件中附带的电池盒和四个AA电池（套件中不包含电池）。
- en: '**Node-RED Application**'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '**Node-RED应用程序**'
- en: The Node-RED application you’ll use to control your robot should be able to
    make the robot go forward and backward, move right and left, and stop. Since you’re
    not running the Pi as a desktop computer, the Pi needs to automatically start
    Node-RED when it boots. You’ll also add an off button to the application so you
    can turn the Raspberry Pi off remotely.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 你将用来控制机器人Node-RED应用程序应该能够让机器人前进和后退、左右移动和停止。由于你并没有将树莓派作为桌面计算机使用，树莓派需要在启动时自动启动Node-RED。你还将为应用程序添加一个关机按钮，以便你可以远程关闭树莓派。
- en: '[Figure 20-1](ch20.xhtml#ch20fig1) shows a high-level overview of how your
    robot will work.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '[图20-1](ch20.xhtml#ch20fig1)显示了机器人如何工作的高层概览。'
- en: '![image](../images/f0250-01.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0250-01.jpg)'
- en: '**FIGURE 20-1:** The robot structure'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '**图20-1：** 机器人结构'
- en: '**PREPARING THE RASPBERRY PI**'
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**准备树莓派**'
- en: We’re using the Raspberry Pi Zero W board, shown in [Figure 20-2](ch20.xhtml#ch20fig2),
    which is a variant of Raspberry Pi Zero that has built-in wireless LAN and Bluetooth,
    but remember that you can use another Wi-Fi compatible board or a Wi-Fi dongle.
    The Raspberry Pi Zero W measures only 2.56 inches × 1.18 inches × 0.20 inches
    (65 mm × 30 mm × 5 mm) and costs around $10.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的是树莓派Zero W板，如[图20-2](ch20.xhtml#ch20fig2)所示，这是一款带有内置无线局域网和蓝牙的树莓派Zero变体，但请记住，你可以使用其他兼容Wi-Fi的板子或Wi-Fi加密狗。树莓派Zero
    W的尺寸仅为2.56英寸 × 1.18英寸 × 0.20英寸（65 mm × 30 mm × 5 mm），价格约为10美元。
- en: The Pi Zero has 40 GPIO pins with the same pinout as the Pi 3\. As you can see
    in [Figure 20-2](ch20.xhtml#ch20fig2), it features a mini HDMI connector and two
    micro USB connectors, one of which is used exclusively for power. To use the Pi
    Zero as a desktop computer, you need a few extra accessories like a USB hub, a
    USB-to-micro-USB adapter, and an HDMI-to-mini-HDMI adapter to connect the peripherals.
    To save you some money, we’ll prepare everything on our regular Raspberry Pi 3
    and then switch the micro SD card to the Pi Zero W.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派Zero具有40个GPIO引脚，排列与树莓派3相同。如[图20-2](ch20.xhtml#ch20fig2)所示，它配备了一个迷你HDMI接口和两个Micro
    USB接口，其中一个专用于电源。如果你打算将树莓派Zero作为桌面计算机使用，你需要一些额外的配件，例如USB集线器、USB转Micro USB适配器和HDMI转迷你HDMI适配器来连接外设。为了节省一些费用，我们将在常规的树莓派3上准备好所有内容，然后将Micro
    SD卡切换到树莓派Zero W上。
- en: '![image](../images/f0251-01.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0251-01.jpg)'
- en: '**FIGURE 20-2:** Raspberry Pi Zero W'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '**图20-2：** 树莓派Zero W'
- en: We recommend using a new micro SD card for this project. Refer to [“Uploading
    the Operating System”](ch00.xhtml#lev10) on [page 10](ch00.xhtml#page_10) to see
    how to install the latest Raspbian release on your new micro SD card.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议为此项目使用一张新的Micro SD卡。请参考[“上传操作系统”](ch00.xhtml#lev10)章节，了解如何在新的Micro SD卡上安装最新版本的Raspbian。
- en: After installing the operating system, insert the micro SD card on your regular
    Pi. Power up the Pi and wait a few seconds for the system to start. Then configure
    the Wi-Fi from the desktop’s top-right corner by clicking **Wi-Fi**. Next, enter
    your Wi-Fi password, and wait a few seconds for the Wi-Fi connection to successfully
    establish.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 安装操作系统后，将Micro SD卡插入你的常规树莓派。启动树莓派，并等待几秒钟，直到系统启动。然后，从桌面右上角点击**Wi-Fi**配置Wi-Fi。接下来，输入你的Wi-Fi密码，并等待几秒钟，直到Wi-Fi连接成功建立。
- en: 'The Node-RED software is preinstalled on the Pi’s operating system, but you
    still need to install the Node-RED dashboard. For that, first update the library
    repositories, and then install npm (Node Package Management) by entering the following
    at your command line:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED软件已经预装在树莓派的操作系统中，但你仍然需要安装Node-RED仪表板。为此，首先更新库源，然后通过在命令行中输入以下命令安装npm（Node包管理器）：
- en: '[PRE11]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When prompted, type Y and press ENTER. The installation may take a few minutes.
    Then enter the following commands to upgrade npm to the latest 3.x version, which
    is the version recommended for use with Node-RED:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 当系统提示时，键入Y并按回车键。安装过程可能需要几分钟。然后输入以下命令，将npm升级到最新的3.x版本，这是推荐与Node-RED一起使用的版本：
- en: '[PRE12]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, enter the following to install the Node-RED dashboard:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，输入以下命令以安装Node-RED仪表板：
- en: '[PRE13]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Again, Node-RED needs to start automatically when the Pi boots. For that, enter
    the following command in the terminal.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，Node-RED 需要在 Pi 启动时自动启动。为此，请在终端中输入以下命令。
- en: '[PRE14]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: With that done, shut down your Pi and switch the micro SD card to the Raspberry
    Pi Zero W.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，关闭树莓派并将 micro SD 卡换到树莓派 Zero W 上。
- en: '**WIRING THE CIRCUIT**'
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**接线电路**'
- en: To build the robot structure you need a chassis for the robot, two DC motors
    with corresponding wheels, the MotoZero add-on, jumper wires, and your Pi (with
    Wi-Fi). Use [Figure 20-1](ch20.xhtml#ch20fig1) as a reference. We’ll start by
    mounting the MotoZero at the top of the Raspberry Pi and then wire the motors
    to MotoZero.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建机器人结构，您需要一个机器人底盘、两个带相应车轮的直流电机、MotoZero 附加板、跳线和您的树莓派（带 Wi-Fi）。使用 [图 20-1](ch20.xhtml#ch20fig1)
    作为参考。我们将从将 MotoZero 安装在树莓派的顶部开始，然后再将电机接到 MotoZero 上。
- en: '**Wiring the DC Motors to MotoZero**'
  id: totrans-274
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将直流电机接线到 MotoZero**'
- en: MotoZero allows you to control four motors independently, but you need to control
    just two DC motors. The MotoZero will come unassembled, so you need to solder
    its parts. The Pi Hut provides an assembly manual on the product’s page, so go
    to *[https://thepihut.com/motozero/](https://thepihut.com/motozero/)* and follow
    the instructions there before continuing. Your MotoZero should look like [Figure
    20-3](ch20.xhtml#ch20fig3) after assembly.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: MotoZero 允许您独立控制四个电机，但您只需要控制两个直流电机。MotoZero 将以未组装的形式提供，因此您需要焊接它的零件。Pi Hut 在产品页面上提供了组装手册，因此请访问
    *[https://thepihut.com/motozero/](https://thepihut.com/motozero/)* 并在继续之前按照说明进行操作。组装完成后，您的
    MotoZero 应该看起来像 [图 20-3](ch20.xhtml#ch20fig3) 一样。
- en: '![image](../images/f0252-01.jpg)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0252-01.jpg)'
- en: '**FIGURE 20-3:** Assembled MotoZero add-on'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 20-3：** 组装好的 MotoZero 附加板'
- en: '[Figure 20-3](ch20.xhtml#ch20fig3) shows the connections you can make to MotoZero:
    positive (+) and negative (–) connections for four DC motors, and a positive (+)
    and negative (–) connection for the power supply. You need an external power source
    for driving the motors. The motors require a big jump in current to move, so using
    a separate power source prevents the Pi from suddenly losing power when this jump
    occurs.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 20-3](ch20.xhtml#ch20fig3) 显示了可以连接到 MotoZero 的接线方式：四个直流电机的正极 (+) 和负极 (–)
    接口，以及电源的正极 (+) 和负极 (–) 接口。您需要一个外部电源来驱动电机。电机需要较大的电流跳跃才能运转，因此使用外部电源可以防止当这种电流跳跃发生时，树莓派突然失去电源。'
- en: Follow these instructions and refer to [Figure 20-1](ch20.xhtml#ch20fig1) to
    wire the motors and battery holder.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这些说明并参考 [图 20-1](ch20.xhtml#ch20fig1) 来连接电机和电池座。
- en: Connect the right DC motor’s red wire to the Motor 1 positive (+) pin on the
    MotoZero, and its black wire to the Motor 1 negative (–) pin. You’ll need to loosen
    the screws, place the wires in the pin slot, and then tighten the screws again.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将右侧直流电机的红线连接到 MotoZero 上的电机 1 正极 (+) 引脚，黑线连接到电机 1 负极 (–) 引脚。您需要松开螺丝，将线放入引脚槽中，然后再重新拧紧螺丝。
- en: Repeat the previous instruction for the left motor, connecting the power wires
    to the MotoZero Motor 2 connections.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对左侧电机执行相同操作，将电源线连接到 MotoZero 的电机 2 接口。
- en: Without inserting the batteries, connect the battery holder’s red wire to the
    positive (+) pin on the MotoZero power connector and its black wire to the negative
    (–) pin, shown at the bottom of the board in [Figure 20-3](ch20.xhtml#ch20fig3).
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在没有插入电池的情况下，将电池座的红线连接到 MotoZero 电源连接器上的正极 (+) 引脚，黑线连接到负极 (–) 引脚，如 [图 20-3](ch20.xhtml#ch20fig3)
    所示的电路底部。
- en: '**NOTE**'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you find the robot’s wheels are spinning in the opposite direction of what
    you intended, you may have to switch the DC motors’ red wires with the black wires
    on the positive (+) and negative (–) Motor 1 or Motor 2 terminals. You’ll know
    if you need to do this when you test the application at the end of the project.*'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果您发现机器人的车轮旋转方向与您预期的相反，您可能需要交换直流电机的红线和黑线，分别连接到电机 1 或电机 2 的正极 (+) 和负极 (–) 端子。当您在项目结束时测试应用程序时，您就会知道是否需要进行此更改。*'
- en: '**Controlling the Motors with MotoZero**'
  id: totrans-285
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**使用 MotoZero 控制电机**'
- en: Each DC motor has three GPIO pins associated with it. One pin, known as the
    *enable* pin, enables the motor and is like an on and off switch. The other two
    pins control the power to the positive and negative motor wires. Applying power
    to one wire and GND to the other makes the motor turn in one direction, while
    applying power and GND to the opposite motor wires moves the motor in the opposite
    direction.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 每个直流电动机都有三个与之相关的GPIO引脚。一个引脚，称为*使能*引脚，用于启动电动机，类似于开关。另两个引脚控制正负电动机线的电源。将电源连接到一根线，GND连接到另一根线时，电动机会向一个方向旋转；而将电源和GND接到相反的电动机线时，电动机会向相反方向旋转。
- en: '**NOTE**'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*For information about the Motor 3 and Motor 4 GPIOs, you can check the MotoZero
    manual at The Pi Hut’s product page* ([https://thepihut.com/motozero/](https://thepihut.com/motozero/)).'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '*有关电动机 3 和电动机 4 的GPIO信息，可以查阅MotoZero手册，访问The Pi Hut的产品页面* ([https://thepihut.com/motozero/](https://thepihut.com/motozero/))。'
- en: We’re just using the Motor 1 and Motor 2 terminals, which are controlled by
    the GPIOs shown in the following table, when you mount the MotoZero on the top
    of the Pi.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将MotoZero安装在树莓派顶部时，我们只使用电动机 1 和电动机 2 的端子，它们由下表中显示的GPIO控制。
- en: '| **MOTOR 1** | **MOTOR 2** |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| **电动机 1** | **电动机 2** |'
- en: '| --- | --- |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| enable: GPIO 5 | enable: GPIO 6 |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| 使能：GPIO 5 | 使能：GPIO 6 |'
- en: '| Motor 1 (+): GPIO 27 | Motor 2 (+): GPIO 22 |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| 电动机 1 (+)：GPIO 27 | 电动机 2 (+)：GPIO 22 |'
- en: '| Motor 1 (–): GPIO 24 | Motor 2 (–): GPIO 17 |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| 电动机 1 (–)：GPIO 24 | 电动机 2 (–)：GPIO 17 |'
- en: 'To make a motor spin, the enable pin must be HIGH to turn the motor on, and
    one—and only one—of the positive or negative pins should be HIGH. For example,
    if you want Motor 1 to spin in one direction, use the following setup:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 要使电动机旋转，使能引脚必须为HIGH才能启动电动机，且正负引脚之一（且仅有一个）应为HIGH。例如，如果你想让电动机 1 向一个方向旋转，可以使用以下设置：
- en: 'GPIO 5: HIGH'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPIO 5：HIGH
- en: 'GPIO 27: HIGH'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPIO 27：HIGH
- en: 'GPIO 24: LOW'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPIO 24：LOW
- en: 'To make the same motor spin in the opposite direction, use this:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 要让同一个电动机向相反方向旋转，请使用以下设置：
- en: 'GPIO 5: HIGH'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPIO 5：HIGH
- en: 'GPIO 27: LOW'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPIO 27：LOW
- en: 'GPIO 24: HIGH'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPIO 24：HIGH
- en: To turn off the motor, you’d send a LOW signal to all the GPIOs. The same logic
    applies to the other motors.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 要关闭电动机，你需要向所有GPIO发送一个LOW信号。其他电动机也适用相同的逻辑。
- en: '**WRITING THE APPLICATION**'
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写应用程序**'
- en: Once you’ve built your hardware, it’s time to create the Node-RED application.
    As your Pi is already in your robot chassis, the most practical way to create
    the robot Node-RED application is to use your regular desktop or laptop computer
    and control it from there.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你组装好硬件，就可以开始创建Node-RED应用程序了。由于树莓派已经安装在你的机器人底盘中，最实用的方法是使用你常用的台式机或笔记本电脑，从那里控制它。
- en: First you’ll need to find your Raspberry Pi Zero W IP address; you’ll use it
    to access the Pi’s Node-RED application dashboard, where you can create a robot
    application.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要找到树莓派 Zero W 的IP地址；你将使用它来访问树莓派的Node-RED应用程序仪表盘，在那里你可以创建机器人应用程序。
- en: You need to make sure the Raspberry Pi is turned on and that your computer and
    Pi are connected to the same network before continuing.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，确保树莓派已开启，并且你的计算机和树莓派连接到同一网络。
- en: '**Finding the Raspberry Pi IP Address**'
  id: totrans-308
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**查找树莓派的IP地址**'
- en: '**WARNING**'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*The Raspberry Pi Zero W has two mini USB ports, and one of them, labeled*
    PWR IN, *is designated for powering up the Pi.*'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '*树莓派 Zero W 有两个迷你 USB 端口，其中一个标有* PWR IN，*用于为树莓派供电。*'
- en: Power up the Raspberry Pi by connecting the 5 V power adapter to a wall socket.
    You’ll only use this power source while creating the Node-RED application; once
    it’s ready, you should change to the portable power source.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将5V电源适配器连接到墙壁插座，为树莓派供电。在创建Node-RED应用程序时，你只使用这个电源；一旦完成，你应该切换到便携电源。
- en: You’ll find the Pi’s IP address using Angry IP Scanner software. Download it
    onto your regular desktop or laptop computer for free from *[http://angryip.org/download/](http://angryip.org/download/)*,
    and then follow the prompts to install it.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用Angry IP Scanner软件来查找树莓派的IP地址。免费从* [http://angryip.org/download/](http://angryip.org/download/)*下载到你的常用台式机或笔记本电脑，并按照提示安装。
- en: Once the installation is complete, open Angry IP Scanner and click the **Start**
    button. Wait a few seconds until it shows the available IP addresses. Your Pi
    IP address should have *raspberrypi.lan* as a hostname, so jot down the corresponding
    IP address. [Figure 20-4](ch20.xhtml#ch20fig4) highlights our Raspberry Pi IP
    address, which is 192.168.1.122.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，打开 Angry IP Scanner 并点击 **开始** 按钮。等待几秒钟，直到它显示可用的 IP 地址。你的 Pi IP 地址应该显示为
    *raspberrypi.lan* 的主机名，因此记下对应的 IP 地址。[图 20-4](ch20.xhtml#ch20fig4) 高亮显示了我们的 Raspberry
    Pi IP 地址，即 192.168.1.122。
- en: '![image](../images/f0254-01.jpg)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0254-01.jpg)'
- en: '**FIGURE 20-4:** Finding the Raspberry Pi IP address with the Angry IP Scanner
    software'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 20-4：** 使用 Angry IP Scanner 软件查找 Raspberry Pi IP 地址'
- en: '**Creating the Node-RED Flow**'
  id: totrans-316
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建 Node-RED 流程**'
- en: '**NOTE**'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*For an introduction to Node-RED, see [Project 17](ch17.xhtml#ch17).*'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '*关于 Node-RED 的介绍，请参见 [项目 17](ch17.xhtml#ch17)。*'
- en: On your regular computer, making sure it’s on the same network as your Pi, open
    a web browser tab and go to *http://<Pi IP address>:1880*, replacing *<Pi IP address>*
    with the Raspberry Pi IP address you noted earlier. In our case, we navigated
    to *http://192.168.1.122:1880*. Your Raspberry Pi Node-RED web server should open.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的常规计算机上，确保它与 Raspberry Pi 在同一网络下，打开一个网页浏览器标签并访问 *http://<Pi IP 地址>:1880*，将
    *<Pi IP 地址>* 替换为你之前记录的 Raspberry Pi IP 地址。在我们的例子中，我们访问了 *http://192.168.1.122:1880*。你的
    Raspberry Pi Node-RED 网络服务器应该会打开。
- en: In the top-right corner of the window, select the **dashboard** tab and, inside
    the **Layout** tab, create a tab called **Robot**. Next, create two groups inside
    that Robot tab, called **Main** and **Poweroff**. The Main group is where you’ll
    organize the buttons that control the robot, and the Poweroff group is where you’ll
    add the button to remotely turn off your Raspberry Pi. Once you’ve completed these
    tabs and groups, your layout should look like [Figure 20-5](ch20.xhtml#ch20fig5).
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在窗口的右上角，选择 **仪表盘** 标签，在 **布局** 标签内创建一个名为 **机器人** 的标签。接下来，在该机器人标签内创建两个组，分别为 **主**
    和 **关闭电源**。主组是你将组织控制机器人按钮的地方，而关闭电源组是你将添加远程关闭 Raspberry Pi 按钮的地方。完成这些标签和组之后，你的布局应当与
    [图 20-5](ch20.xhtml#ch20fig5) 相似。
- en: '![image](../images/f0255-01.jpg)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0255-01.jpg)'
- en: '**FIGURE 20-5:** Node-RED application dashboard layout'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 20-5：** Node-RED 应用程序仪表盘布局'
- en: Add five buttons, a function, six rpi gpio output nodes, and an exec node to
    the flow. Wire the nodes and edit their names to match the ones in [Figure 20-6](ch20.xhtml#ch20fig6).
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 向流程中添加五个按钮、一个函数、六个 RPI GPIO 输出节点以及一个执行节点。连接节点并编辑它们的名称，使其与 [图 20-6](ch20.xhtml#ch20fig6)
    中的名称一致。
- en: '![image](../images/f0255-02.jpg)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0255-02.jpg)'
- en: '**FIGURE 20-6:** Node-RED application nodes'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 20-6：** Node-RED 应用程序节点'
- en: Edit the function’s properties so that it has six outputs, assigning all of
    the nodes’ properties as shown in [Table 20-1](ch20.xhtml#ch20tab1).
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑函数的属性，使其具有六个输出，并根据 [表 20-1](ch20.xhtml#ch20tab1) 显示的内容分配所有节点的属性。
- en: '**TABLE 20-1:** Properties assigned to each node'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 20-1：** 分配给每个节点的属性'
- en: '| **NODE** | **PROPERTIES** |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| **节点** | **属性** |'
- en: '| --- | --- |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Forward | Group: Main [Robot] Size: auto'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '| 前进 | 分组：主 [机器人] 大小：自动'
- en: 'Icon: fa-arrow-up'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 图标：fa-arrow-up
- en: 'Label: Forward'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 标签：前进
- en: 'Payload: forward |'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 有效载荷：前进 |
- en: '| Left | Group: Main [Robot] Size: auto'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '| 左 | 分组：主 [机器人] 大小：自动'
- en: 'Icon: fa-arrow-left'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 图标：fa-arrow-left
- en: 'Label: Left'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 标签：左
- en: 'Payload: left |'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 有效载荷：左 |
- en: '| Right | Group: Main [Robot] Size: auto'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '| 右 | 分组：主 [机器人] 大小：自动'
- en: 'Icon: fa-arrow-right'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 图标：fa-arrow-right
- en: 'Label: Right'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 标签：右
- en: 'Payload: right |'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 有效载荷：右 |
- en: '| Reverse | Group: Main [Robot] Size: auto'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '| 反向 | 分组：主 [机器人] 大小：自动'
- en: 'Icon: fa-arrow-down'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 图标：fa-arrow-down
- en: 'Label: Reverse'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 标签：反向
- en: 'Payload: reverse |'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 有效载荷：反向 |
- en: '| Stop | Group: Main [Robot] Size: auto'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '| 停止 | 分组：主 [机器人] 大小：自动'
- en: 'Icon: fa-hand-paper-o'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 图标：fa-hand-paper-o
- en: 'Label: Stop'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 标签：停止
- en: 'Payload: stop |'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 有效载荷：停止 |
- en: '| f | Function: enter the code in [Listing 20-1](ch20.xhtml#ch20list1) Outputs:
    6 |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
  zh: '| f | 函数：在 [清单 20-1](ch20.xhtml#ch20list1) 中输入代码 输出：6 |'
- en: '| Enable M1 | GPIO: GPIO5 – 29 Type: Digital output |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
  zh: '| 启用 M1 | GPIO: GPIO5 – 29 类型：数字输出 |'
- en: '| + M1 | GPIO: GPIO27 – 13 Type: Digital output |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| + M1 | GPIO: GPIO27 – 13 类型：数字输出 |'
- en: '| – M1 | GPIO: 18 – GPIO24 Type: Digital output |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| – M1 | GPIO: 18 – GPIO24 类型：数字输出 |'
- en: '| Enable M2 | GPIO: GPIO17 – 11 Type: Digital output |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
  zh: '| 启用 M2 | GPIO: GPIO17 – 11 类型：数字输出 |'
- en: '| + M2 | GPIO: GPIO6 – 31 Type: Digital output |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '| + M2 | GPIO: GPIO6 – 31 类型：数字输出 |'
- en: '| – M2 | GPIO: GPIO22 – 15 Type: Digital output |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| – M2 | GPIO: GPIO22 – 15 类型：数字输出 |'
- en: '| Poweroff | Group: Poweroff [Robot] Size: auto'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '| 关闭电源 | 分组：关闭电源 [机器人] 大小：自动'
- en: 'Icon: fa-power-off'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 图标：fa-power-off
- en: 'Label: Poweroff'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 标签：关闭电源
- en: 'Background: red |'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 背景：红色 |
- en: '| exec | Command: `/usr/bin/sudo` + Append: not checked'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '| exec | 命令：`/usr/bin/sudo` + 附加：未选中'
- en: poweroff
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 关机
- en: 'Name: Poweroff |'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 名称：关机 |
- en: '[Figure 20-7](ch20.xhtml#ch20fig7) shows how the exec node is set up.'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 20-7](ch20.xhtml#ch20fig7) 展示了 exec 节点的设置方式。'
- en: '![image](../images/f0257-01.jpg)'
  id: totrans-365
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0257-01.jpg)'
- en: '**FIGURE 20-7:** exec node properties'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 20-7：** exec 节点属性'
- en: All nodes should be in the Main group, except the Poweroff button, which should
    be part of the Poweroff group.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 所有节点应当在主组中，除了关机按钮，应该属于关机组。
- en: '**Entering the Script**'
  id: totrans-368
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**输入脚本**'
- en: 'Insert the JavaScript code in [Listing 20-1](ch20.xhtml#ch20list1) (also available
    for download from *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*)
    into the function node:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 将 JavaScript 代码插入到[清单 20-1](ch20.xhtml#ch20list1)中（也可以从 *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*
    下载）：
- en: '**LISTING 20-1:** The remote-controlled robot script'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 20-1：** 遥控机器人脚本'
- en: '[PRE15]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This function sends messages to the connected rpi gpio output nodes in the order
    they’re connected to the function node. This means that `msg1` is sent to the
    Enable M1 node, `msg2` to + M1, `msg3` to – M1, and so on (see [Figure 20-6](ch20.xhtml#ch20fig6)).
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数会按照它们连接到函数节点的顺序，将消息发送到连接的 rpi gpio 输出节点。这意味着 `msg1` 会发送到启用 M1 节点，`msg2`
    会发送到 + M1，`msg3` 会发送到 – M1，依此类推（参见 [图 20-6](ch20.xhtml#ch20fig6)）。
- en: First you initialize all the payload message variable values to `0` ➊. Then
    the series of `if` and `else if` statements checks which button was pressed ➋,
    depending on the payload received by the function, and sets the message values
    according to the action the robot should take. For example, if you press the Forward
    button, the payload received by the function node is `forward`, so the condition
    at ➋ is met and the code changes the `msg1`, `msg2`, `msg4`, and `msg5` payload
    values to `1`, while `msg3` and `msg6` remain `0`.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将所有负载消息变量值初始化为 `0` ➊。然后，一系列的 `if` 和 `else if` 语句检查按下了哪个按钮 ➋，根据函数收到的负载设置消息值，以决定机器人应执行的动作。例如，如果你按下前进按钮，函数节点接收到的负载是
    `forward`，因此 ➋ 处的条件被满足，代码会将 `msg1`、`msg2`、`msg4` 和 `msg5` 的负载值设置为 `1`，而 `msg3`
    和 `msg6` 保持为 `0`。
- en: 'Then, the function node sends the `msg.payload` values to the corresponding
    nodes ➌. For the robot to go forward, the payloads would need to be:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，函数节点将`msg.payload`的值发送到相应的节点➌。为了让机器人前进，负载需要是：
- en: 'Enable M1: `1`'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '启用 M1: `1`'
- en: '+ M1: `1`'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '+ M1: `1`'
- en: '– M2: `0`'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '– M2: `0`'
- en: 'Enable M2: `1`'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '启用 M2: `1`'
- en: '+ M2: `1`'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '+ M2: `1`'
- en: '– M2: `0`'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '– M2: `0`'
- en: Here, both motors are enabled and moving in the same direction—forward. The
    following table shows the messages the function should send to each node for each
    action.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，两个电机都已启用并朝相同方向转动——前进。下表显示了函数应发送给每个节点的消息，以实现每个动作。
- en: '| **ACTION** | **ENABLE M1** | **+ M1** | **– M1** | **ENABLE M2** | **+ M2**
    | **– M2** |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| **动作** | **启用 M1** | **+ M1** | **– M1** | **启用 M2** | **+ M2** | **– M2**
    |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: '| Forward | 1 | 1 | 0 | 1 | 1 | 0 |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '| 前进 | 1 | 1 | 0 | 1 | 1 | 0 |'
- en: '| Left | 1 | 1 | 0 | 0 | 0 | 0 |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| 左 | 1 | 1 | 0 | 0 | 0 | 0 |'
- en: '| Right | 0 | 0 | 0 | 1 | 1 | 0 |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| 右 | 0 | 0 | 0 | 1 | 1 | 0 |'
- en: '| Reverse | 1 | 0 | 1 | 1 | 0 | 1 |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| 反向 | 1 | 0 | 1 | 1 | 0 | 1 |'
- en: '| Stop | 0 | 0 | 0 | 0 | 0 | 0 |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
  zh: '| 停止 | 0 | 0 | 0 | 0 | 0 | 0 |'
- en: When the Stop button is clicked, none of the conditions set in the code is met,
    and the function sends the values initialized at the start ➊.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击停止按钮时，代码中设置的条件没有一个被满足，函数会发送在开始时初始化的值➊。
- en: Outside the function node, when the Poweroff button is clicked, the exec node
    executes the `poweroff` command to turn off the Pi. Remember that you’ve filled
    the `exec` command property with */usr/bin/sudo/poweroff*—see [Table 20-1](ch20.xhtml#ch20tab1).
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数节点外部，当点击关机按钮时，exec 节点会执行`poweroff`命令以关闭 Pi。记住你已经在`exec`命令属性中填写了*/usr/bin/sudo/poweroff*——参见[表
    20-1](ch20.xhtml#ch20tab1)。
- en: Once everything is in place, click the **Deploy** button at the top-right corner
    to save the changes and run the flow.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 一切就绪后，点击右上角的**部署**按钮，保存更改并运行流程。
- en: '**Running the Application**'
  id: totrans-392
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**运行应用**'
- en: Now your Node-RED application is ready. Go to *http://<Pi IP address>:1880/ui*
    (replacing *<Pi IP address>* with your own) to see your application dashboard.
    It should look something like [Figure 20-8](ch20.xhtml#ch20fig8).
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的 Node-RED 应用已经准备好了。访问 *http://<Pi IP 地址>:1880/ui* （将 *<Pi IP 地址>* 替换为你自己的地址）来查看你的应用仪表盘。它应该像
    [图 20-8](ch20.xhtml#ch20fig8) 那样。
- en: Test the controls to see if the wheels are moving in the right direction, and
    don’t forget that you need to insert the four AA batteries into the battery holder
    in order to power the motors.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 测试控制，看看轮子是否朝正确方向转动，别忘了你需要将四节AA电池插入电池座，以便为电机提供电源。
- en: If one or both motors are spinning in the wrong direction, switch the black
    and red wires on the MotoZero for that motor terminal, or change the payload messages
    to match the required directions.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个或两个电机转动方向错误，请交换该电机终端上的黑色和红色电线，或者更改负载消息以匹配所需的方向。
- en: '![image](../images/f0260-01.jpg)'
  id: totrans-396
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0260-01.jpg)'
- en: '**FIGURE 20-8:** Node-RED application to remotely control the robot'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 20-8：** Node-RED 应用程序远程控制机器人'
- en: '**POWERING UP THE ROBOT**'
  id: totrans-398
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**启动机器人**'
- en: Now that the application is ready, click the **Poweroff** button to shut down
    the Pi. Then wait a few seconds for it to shut down.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应用程序已经准备好，点击 **关机** 按钮关闭树莓派。然后等待几秒钟，直到它关闭。
- en: Change the Pi’s power source from the wall socket to the power bank. Wait a
    few minutes for the Pi to power up and autostart Node-RED. On a smartphone or
    other device that’s on the same network as your Pi, open a new browser tab and
    go to *http://<Pi IP address>:1880/ui*. Then click on the buttons to remotely
    control your robot.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 将树莓派的电源从墙壁插座切换到移动电源。等待几分钟，直到树莓派启动并自动启动 Node-RED。在与树莓派处于同一网络的智能手机或其他设备上，打开一个新的浏览器标签页，访问
    *http://<Pi IP address>:1880/ui*。然后点击按钮来远程控制你的机器人。
- en: Congratulations—you now have a Wi-Fi-controlled robot!
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜——你现在拥有了一台Wi-Fi控制的机器人！
- en: '**TAKING IT FURTHER**'
  id: totrans-402
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步操作**'
- en: 'There’s a lot of room for upgrades on your robot. Here are some ideas for upgrades
    that will need both hardware and software changes. You’ll need to experiment a
    bit with Node-RED to get these working:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 你的机器人有很多升级空间。以下是一些需要硬件和软件更改的升级思路。你需要在 Node-RED 中做一些实验，以使这些功能正常工作：
- en: Get a robot chassis with four wheels and control four motors instead of two.
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取一个四轮的机器人底盘，控制四个电机而不是两个。
- en: Add LEDs and buzzers to the robot to make it more interactive.
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给机器人添加LED灯和蜂鸣器，使其更具互动性。
- en: Add sensors, like an ultrasonic sensor, so the robot can avoid obstacles by
    itself.
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加传感器，例如超声波传感器，让机器人能够自主避开障碍物。
