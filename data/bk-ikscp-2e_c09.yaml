- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: 'Style: Stroke and Markers'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 样式：描边和标记
- en: While not very common in artistic drawings, stroked paths—outlines, frames,
    arrows, connectors, and so on—are very common in technical drawings such as plans
    or flowcharts. A sizable share of all SVG style properties control the appearance
    of stroke, so it deserves a chapter of its own.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在艺术绘图中不常见，但描边路径——轮廓、框架、箭头、连接线等——在技术绘图中非常常见，例如平面图或流程图。大部分SVG样式属性控制着描边的外观，因此它值得单独成章讨论。
- en: While stroke in SVG is quite rich and can serve a lot of purposes, you may want
    some features that are not supported or are available only via workarounds. In
    particular, SVG stroke always has *constant width* (it cannot get wider or narrower
    along the path); to emulate variable-width stroke, use the Calligraphic pen ([14.2](c14.xhtml#section14.2))
    or path effects ([Chapter 13](c13.xhtml#ch13)). Also, while stroke can have a
    dash pattern ([9.4](#section9.4)) and markers attached to its nodes ([9.5](#section9.5)),
    you cannot stroke a path with a brush or repeated pattern that would follow the
    bends of the stroke—although, again, this is possible via path effects ([13.3.2](c13.xhtml#section13.3.2)).
    You can always use a standard SVG rectangular pattern ([10.8.1](c10.xhtml#section10.8.1))
    to paint a stroke exactly as you would a fill, but the pattern in this case is
    simply superimposed—it is not distorted to follow the trajectory of the stroke.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管SVG中的描边功能非常丰富，并可以用于多种目的，但你可能会遇到一些不被支持或仅能通过变通方法实现的功能。特别是，SVG描边总是具有*恒定宽度*（它不能沿路径变宽或变窄）；要模拟可变宽度的描边，可以使用书法笔（[14.2](c14.xhtml#section14.2)）或路径效果（[第13章](c13.xhtml#ch13)）。此外，虽然描边可以有虚线模式（[9.4](#section9.4)）和附加到其节点的标记（[9.5](#section9.5)），但你不能用画笔或重复模式描绘路径，这种模式会跟随描边的弯曲——不过，同样的功能可以通过路径效果（[13.3.2](c13.xhtml#section13.3.2)）实现。你始终可以使用标准的SVG矩形图案（[10.8.1](c10.xhtml#section10.8.1)）来精确绘制描边，就像填充一样，但在这种情况下，图案只是叠加上去——它不会被扭曲以跟随描边的轨迹。
- en: 9.1 Stroke Width
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9.1 描边宽度
- en: 'The most important property of the stroke is its *width*. Like any other length
    in Inkscape, width can be measured in a number of different units. There are currently
    two places in the UI where you can see and change the stroke width of the selected
    objects: the selected style indicator in the status bar (bottom left of the window,
    to the right end of the stroke swatch) and the Stroke style tab of the Fill and
    Stroke dialog ([Figure 9-1](#fig9-1)).'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 描边最重要的属性是其*宽度*。像Inkscape中的任何其他长度一样，宽度可以用多种不同的单位进行测量。目前，在用户界面中有两个地方可以查看和更改选中对象的描边宽度：状态栏中的所选样式指示器（窗口左下角，描边色板的右端）和填充与描边对话框的描边样式标签（[图
    9-1](#fig9-1)）。
- en: '![](10/strokewidth.svg.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](10/strokewidth.svg.png)'
- en: 'Figure 9-1: Stroke width in the selected style indicator''s right-click menu
    (left) and the Fill and Stroke dialog (right)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9-1：所选样式指示器右键菜单中的描边宽度（左）和填充与描边对话框（右）
- en: In the selected style indicator, one way you can change the stroke width is
    by right-clicking directly on the number next to the stroke swatch and choosing
    a value from the menu that pops up. In the same menu, you can choose the unit
    to be used for stroke width; by default it's `px` (SVG pixel).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在所选样式指示器中，你可以通过直接右键点击描边色板旁边的数字，并从弹出菜单中选择一个值来更改描边宽度。在同一菜单中，你还可以选择描边宽度的单位；默认单位是`px`（SVG像素）。
- en: Similar to editing fill or stroke colors with color gestures ([8.7](c08.xhtml#section8.7)),
    you can also drag off the stroke width value into the canvas to change the stroke
    width of the selection interactively. Dragging above and to the left of the 45-degree
    no-change axis (from the point where you started dragging) makes the stroke in
    selected objects wider (up to 50 times the original width); dragging below and
    to the right makes it narrower (down to zero). For example, if you start with
    a 1 px stroke, dragging up and to the left will give you 50 px, and dragging to
    the right and down will reduce it to zero. This way, you can adjust stroke width
    very quickly without opening any dialogs or menus.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于使用颜色手势编辑填充或描边颜色（[8.7](c08.xhtml#section8.7)），你也可以通过将描边宽度值拖动到画布上，来交互式地更改选区的描边宽度。沿45度无变化轴（从你开始拖动的点出发）向上和向左拖动，会使选中对象的描边变宽（最多达到原始宽度的50倍）；向下和向右拖动会使其变窄（最小为零）。例如，如果你从1
    px的描边开始，向上和向左拖动会变成50 px，而向右和向下拖动则会将其缩小到零。通过这种方式，你可以非常快速地调整描边宽度，而无需打开任何对话框或菜单。
- en: In the Fill and Stroke dialog, there's a regular editable field where you can
    type any value, as well as a unit selector.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在填充和描边对话框中，有一个常规的可编辑字段，你可以输入任何值，以及一个单位选择器。
- en: When you choose the Hairline option in the units drop-down for the Width value,
    the Width value itself is disabled. The selected objects' strokes will always
    look like they're a constant 1 px wide *regardless of zoom*. The object itself
    will zoom in and out as usual, but its stroke will never appear thinner or thicker.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在单位下拉菜单中选择发丝选项作为宽度值时，宽度值本身会被禁用。所选对象的描边将始终看起来像是常规的 1 像素宽度，*无论缩放如何*。对象本身会像往常一样进行缩放，但其描边永远不会变得更薄或更厚。
- en: Outline mode ([3.14](c03.xhtml#section3.14)) shows *all* objects in the document
    as if they had a hairline stroke that remains 1 px wide regardless of zoom. Visible
    Hairlines mode ([3.14](c03.xhtml#section3.14)) allows you to scale the stroke
    up but not down, so it is always *at least* one screen pixel wide no matter how
    far you zoom out. Unlike the Hairline setting in the Fill and Stroke dialog, however,
    these modes are just an Inkscape-specific editing convenience and do not affect
    the SVG code of the document.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 大纲模式 ([3.14](c03.xhtml#section3.14)) 将文档中的*所有*对象显示为好像它们有一条发丝宽的描边，无论缩放如何，该描边始终保持
    1 像素宽。可见发丝模式 ([3.14](c03.xhtml#section3.14)) 允许你放大描边，但不能缩小，因此无论你如何缩小，描边始终*至少*为一个屏幕像素宽。然而，与填充和描边对话框中的发丝设置不同，这些模式只是
    Inkscape 特定的编辑便利功能，不会影响文档的 SVG 代码。
- en: 9.1.1 Stroke Width in Multiple Objects
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 9.1.1 多个对象中的描边宽度
- en: When the selection contains multiple objects with different strokes, the selected
    style indicator *averages* the stroke widths of those objects that have any stroke.
    For example, if one of the two selected objects has 3 px stroke and the other
    has 1 px, the indicator will show 2 (and the tool tip will say that this is an
    averaged value).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择包含多个具有不同描边的对象时，所选样式指示器会*平均*这些对象中所有具有描边的对象的描边宽度。例如，如果两个所选对象中一个有 3 像素的描边，另一个有
    1 像素的描边，则指示器会显示 2（工具提示会显示这是一个平均值）。
- en: Now, if you set any width via the right-click menu or by dragging, the same
    width will be assigned to all selected objects that had any stroke in the first
    place. For example, if one of the objects has 3 px stroke and the other has no
    stroke, it will display 3 as stroke width and Different in the stroke paint swatch,
    but any new width you set will be assigned *only* to the object that had 3 px
    stroke.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你通过右键菜单或拖动设置任何宽度，相同的宽度将分配给所有最初有描边的所选对象。例如，如果其中一个对象有 3 像素的描边，而另一个没有描边，则它会显示
    3 作为描边宽度，并在描边涂料选框中显示不同，但你设置的任何新宽度将*仅*分配给最初有 3 像素描边的对象。
- en: The Fill and Stroke dialog behaves differently. When different stroke widths
    are detected in the selection, the stroke width unit switches to the percent unit
    (%) and the displayed value is 100%. If you change it, for example, to 200% and
    press Enter, each stroke width in the selection will get two times wider than
    it was before. All stroke widths that were different will remain different, and
    the displayed value will again be 100%.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 填充和描边对话框表现不同。当在选择中检测到不同的描边宽度时，描边宽度单位会切换到百分比单位（%），并且显示值为 100%。例如，如果你将其更改为 200%
    并按回车键，选择中的每个描边宽度将变为原来的两倍宽。所有原本不同的描边宽度将继续保持不同，显示值会再次变为 100%。
- en: In the same dialog, you can just as well switch the unit selector from % to
    any absolute unit and assign the same stroke width to any number of selected objects.
    On the other hand, even if you have a single object selected, you can still switch
    to the percent unit and specify a new width as a percentage of the old.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一个对话框中，你同样可以将单位选择器从百分比（%）切换为任何绝对单位，并为任意数量的所选对象分配相同的描边宽度。另一方面，即使只选择了一个对象，你仍然可以切换到百分比单位，并指定新宽度作为原始宽度的百分比。
- en: 9.2 Join
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9.2 连接
- en: 'Stroke always follows a path, and a path can have sharp turns, called*cusps*.
    Typically, a cusp is a node ([12.5.5](c12.xhtml#section12.5.5)) where two path
    segments join at an angle, but you don''t need a node to make a cusp: a sharp
    cusp can be created even in the middle of a Bézier curve (see [Figure 12-6](c12.xhtml#fig12-6),
    bottom left).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 描边始终跟随路径，而路径可以有尖锐的转折点，称为*尖点*。通常，尖点是两个路径段在一个角度处连接的节点 ([12.5.5](c12.xhtml#section12.5.5))，但你不需要节点就能创建尖点：即使在贝塞尔曲线的中间，也能创建一个尖锐的尖点（见
    [图12-6](c12.xhtml#fig12-6)，左下角）。
- en: The way the stroke behaves at the cusps is determined by the two style properties:*join
    type* and *miter limit*, editable on the Stroke style tab of the Fill and Stroke
    dialog, as shown in [Figure 9-2](#fig9-2). The three possible join types, represented
    by the three toggle buttons, are Round join, Bevel join, and Miter join (default).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 描边在角尖处的表现由两个样式属性决定：*连接类型*和*锐角限制*，可以在填充和描边对话框的描边样式选项卡上进行编辑，如[图 9-2](#fig9-2)所示。三种可能的连接类型，通过三个切换按钮表示，分别是圆形连接、斜切连接和锐角连接（默认）。
- en: Round join
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 圆形连接
- en: This simulates the effect of tracing the join with a perfectly round pen. The
    outer shape is a smooth circular arc whose center is on the path centerline at
    the cusp point. This option is the most natural for largely curvilinear paths
    where occasional cusps might look out of character if not rounded.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这模拟了用完全圆形的笔描绘连接的效果。外部形状是一个平滑的圆弧，其中心位于角尖处的路径中心线。这种选项最适用于主要是曲线的路径，偶尔的角尖如果不圆化可能会显得不协调。
- en: Bevel join
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 斜切连接
- en: This join is basically the same as a Miter join (see below) but with the miter
    limit set to 0\. This means that for *any* angle, the corner is cut off by a *bevel*—a
    straight line perpendicular to the bisector of the cusp angle.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这种连接基本上与锐角连接相同（见下文），但将锐角限制设置为 0\。这意味着对于*任何*角度，角落都会被*斜切*——一条垂直于角尖二等分线的直线。
- en: Miter join
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 锐角连接
- en: In this join type, the way it looks depends on how sharp the cusp angle is.
    For angles that are not too sharp, the outer outline of the stroke at the cusp
    point is continued by two straight line fragments, tangential to the stroke on
    both sides of the joint, until these straight lines cross. As a result, the joint
    is adorned by a sharp peak, called a *miter*, which becomes longer and sharper
    as the angle at the joint decreases, possibly reaching far beyond the position
    of the cusp node.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种连接类型中，它的外观取决于角尖角度的尖锐程度。对于那些角度不是太尖锐的情况，描边在角尖处的外轮廓将由两条直线段延续，这两条直线段在连接的两侧与描边切线相切，直到这些直线交叉。因此，连接处被装饰上一个尖锐的峰值，称为*锐角*，随着连接处角度的减小，锐角变得越来越长和尖锐，可能会超出角尖节点的位置。
- en: This leads to a problem, however. How long can the miter become? Obviously,
    when the angle at the joint becomes zero (which is perfectly legal), the miter
    will be *infinitely* long. To prevent this, the Miter limit control sets the *maximum
    length* of a miter in units of stroke width. For example, with the default miter
    limit of 4, any miter shorter than 4 stroke widths remains sharp-tipped, but as
    soon as you decrease the angle to make the miter longer than that, it will be
    cut—*beveled*—at the distance of 4 stroke widths from the joint.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这会导致一个问题。锐角可以多长？显然，当连接处的角度变为零时（这是完全合法的），锐角将会是*无限*长的。为了防止这种情况，锐角限制控制设置了锐角的*最大长度*，单位为描边宽度。例如，默认的锐角限制为
    4，当锐角短于 4 个描边宽度时，它仍然保持尖锐，但一旦你减少角度使得锐角长于这个长度，它将在距离连接 4 个描边宽度的地方被切割——*斜切*。
- en: '![](10/strokejoin.svg.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](10/strokejoin.svg.png)'
- en: 'Figure 9-2: Stroke join controls in the Fill and Stroke dialog'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9-2：填充和描边对话框中的描边连接控制
- en: Stroked text objects are where the artistic effect of different stroke join
    settings is perhaps the most obvious, as [Figure 9-3](#fig9-3) demonstrates.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在描边文本对象中，描边连接设置的艺术效果可能是最明显的，正如[图 9-3](#fig9-3)所示。
- en: '![](10/strokejoin-text.svg.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](10/strokejoin-text.svg.png)'
- en: 'Figure 9-3: The effect of join settings on stroked text'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9-3：描边文本的连接设置效果
- en: 9.3 Caps
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9.3 端点
- en: 'An open path needs to know how to draw the ends of the stroke. Here, too, there
    are three options, somewhat similar to the three join types: stroke caps can be
    *butt*, *round*, or *square* ([Figure 9-4](#fig9-4)).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 开放路径需要知道如何绘制描边的端点。在这里，也有三个选项，类似于三种连接类型：描边端点可以是*平头*、*圆形*或*方形*（[图 9-4](#fig9-4)）。
- en: Butt cap
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 平头端点
- en: Bluntly cuts the stroke, perpendicular to the stroke direction, right at the
    end node of the path.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 粗暴地在路径的末端节点处，垂直于描边方向切断描边。
- en: Round cap
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 圆形端点
- en: Adds a semicircular blob that smoothly rounds the end of the stroke.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个半圆形的突起，平滑地圆化描边的末端。
- en: Square cap
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 方形端点
- en: Adds a half-square blob to the end of the stroke.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 向描边末端添加一个半方形的突起。
- en: '![](10/strokecaps.svg.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](10/strokecaps.svg.png)'
- en: 'Figure 9-4: Stroke cap options in the Fill and Stroke dialog'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9-4：填充和描边对话框中的描边端点选项
- en: Both round and square caps make an open path longer by its full width, with
    a half-stroke-width cap added to each end. Only with butt caps (which essentially
    means no caps), the path is exactly as long as the distance between its end nodes.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 圆形和方形端点都会使一个开放路径的长度增加其整个宽度，并在每个端点处添加一个半描边宽度的端点。只有使用平头端点（本质上意味着没有端点），路径的长度才正好等于其端节点之间的距离。
- en: The effect of join and cap options is visible only on wide enough strokes or
    when zoomed in; for strokes that render at just two or three screen pixels, they
    make very little visual difference (except possibly for long miters).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 连接和端点选项的效果仅在描边足够宽或者放大时可见；对于仅渲染为两到三个屏幕像素的描边，它们几乎不会产生视觉差异（除非是长的斜接）。
- en: 9.4 Dash Patterns
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9.4 虚线模式
- en: A stroke does not need to run solidly from end to end of a path. SVG allows
    you to stroke a path with a regular pattern of dashes separated by empty intervals
    of any length. If you know the corresponding CSS syntax, you can even create new
    dash patterns for your own use (use the **Selectors and CSS** dialog, [16.3](c16.xhtml#section16.3)).
    Otherwise, choose one of the many predefined patterns provided by the Fill and
    Stroke dialog, as shown in [Figure 9-5](#fig9-5).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 描边不需要从路径的起点到终点连续。如果你使用 SVG，可以通过常规的虚线模式，以任意长度的间隔分隔虚线，来描绘路径。如果你知道相应的 CSS 语法，你甚至可以为自己的使用创建新的虚线模式（使用**选择器和
    CSS**对话框，[16.3](c16.xhtml#section16.3)）。否则，请选择填充和描边对话框提供的许多预定义模式之一，如[图 9-5](#fig9-5)所示。
- en: '![](10/strokedash.svg.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](10/strokedash.svg.png)'
- en: 'Figure 9-5: Dash patterns in the Fill and Stroke dialog'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9-5：填充和描边对话框中的虚线模式
- en: 'All dash patterns are defined in terms of stroke width, which means the pattern
    scales up or down proportionally when you make your stroke wider or narrower.
    Ordered roughly from the most common to the most exotic, the predefined patterns
    include:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 所有虚线模式都以描边宽度为基准定义，这意味着当你调节描边的宽度时，模式会按比例放大或缩小。按照从最常见到最独特的顺序，预定义的模式包括：
- en: Dotted patterns that consist of dots (that is, stroked segments whose length
    is equal to the stroke width) with intervals of 1, 2, 3, 4, 6, and so on up to
    48 stroke widths.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由点组成的虚线模式（即描边段的长度等于描边宽度），间隔为 1、2、3、4、6 等，直到 48 描边宽度。
- en: Patterns with long dashes (1, 2, 3, and so on up to 24 stroke widths) and single-stroke
    width intervals.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有长虚线（1、2、3，依此类推，直到 24 描边宽度）和单一描边宽度间隔的模式。
- en: Patterns with equal dash and interval lengths, from 2 to 24 stroke widths.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有相等的虚线和间隔长度的模式，范围从 2 到 24 描边宽度。
- en: 'Patterns with varying dash and interval widths: 2 and 4, 4 and 2, 2 and 6,
    6 and 2, 2 and 8, 8 and 2.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有不同虚线和间隔宽度的模式：2 和 4，4 和 2，2 和 6，6 和 2，2 和 8，8 和 2。
- en: Patterns where a long dash is followed by a short one.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 先是长虚线，后是短虚线的模式。
- en: Patterns with equal dash and interval lengths that are shorter than the stroke
    width, from 0.5 down to 0.1 stroke widths (for example, a "square" path that is
    as long as it is wide will have five repetitions of the 0.1,0.1 pattern).
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚线和间隔长度相等，且短于描边宽度，从 0.5 到 0.1 描边宽度（例如，一个“方形”路径，其长宽相等，将有五个 0.1,0.1 的重复模式）。
- en: Contrary to what you might expect, the Custom option does not allow you to edit
    a pattern in a nice visual way—it's just some seemingly random pattern that you
    can still only edit in the CSS editor.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与你预期的相反，**自定义**选项并不允许你以一种直观的方式编辑模式——它只是一个看似随机的模式，你仍然只能在 CSS 编辑器中进行编辑。
- en: The Pattern offset field next to the dash pattern selector allows you to *shift*
    the chosen pattern along the path by a given distance (again, in units of stroke
    width). For example, if you use a two-dash, two-interval pattern but want your
    path to start with an interval, shift it by 2.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 虚线模式选择器旁边的“模式偏移”字段允许你通过给定的距离（仍然以描边宽度为单位）*偏移*所选模式。例如，如果你使用一个由两个虚线和两个间隔组成的模式，但希望路径从一个间隔开始，可以将其偏移
    2。
- en: Note that the stroke caps ([9.3](#section9.3)) affect dashes, too. If you set
    a path to use round or square caps, they will be added to both ends of each dash.
    As a result, each dash will become longer by one full stroke width compared to
    its length when using the default butt caps. For example, the 1,1 dash pattern
    with round caps loses all its intervals; the round caps of adjacent dashes, each
    0.5 stroke widths in length, now touch each other, as [Figure 9-6](#fig9-6) demonstrates.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，笔画端点（[9.3](#section9.3)）也会影响破折号。如果你设置路径使用圆形或方形端点，它们将被添加到每个破折号的两端。因此，每个破折号的长度将比使用默认的平头端点时长一个完整的笔画宽度。例如，1,1的破折号模式在使用圆形端点时会失去所有间隔；相邻破折号的圆形端点，每个长0.5个笔画宽度，现在会相互接触，如[图9-6](#fig9-6)所示。
- en: '![](10/strokedash-caps.svg.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](10/strokedash-caps.svg.png)'
- en: 'Figure 9-6: The effect of stroke caps on dashes'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-6：笔画端点对破折号的影响
- en: As a consequence, to create a pattern of round dots following a path, you need
    to use a dash pattern with *zero-length* dashes and round caps. Inkscape does
    not list such a pattern in the Fill and Stroke dialog, so you will need to create
    it manually. First, assign to your path a pattern with the *interval length* you
    need, and then edit the `stroke-dasharray` property of your path in the Selectors
    and CSS dialog to set its *dash length* (first value) to 0\. Of course, without
    round or square caps, such a pattern will render the path completely invisible
    (which is the reason it is not included in the standard patterns—remember that
    the default caps setting is butt).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要创建一个沿路径排列的圆点图案，你需要使用具有*零长度*破折号和圆形端点的破折号模式。Inkscape 在填充和笔画对话框中没有列出这种模式，所以你需要手动创建它。首先，为你的路径分配一个具有所需*间隔长度*的图案，然后在选择器和
    CSS 对话框中编辑路径的 `stroke-dasharray` 属性，将其*破折号长度*（第一个值）设置为0。当然，如果没有圆形或方形端点，这样的图案将使路径完全不可见（这也是它没有包含在标准图案中的原因——记住默认的端点设置是平头端点）。
- en: One interesting use of dot patterns with very wide intervals (such as 1,48)
    is quickly creating a random scattering of dots. Draw a spiral-like doodle with
    the Pencil tool ([14.1.2](c14.xhtml#section14.1.2)) and assign a 1,48 dash pattern
    to it to turn it into a cloud of seemingly unconnected dots, as shown in [Figure 9-7](#fig9-7).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用间隔非常宽的点模式（如1,48）的一种有趣用途是快速创建随机散布的点。使用钢笔工具（[14.1.2](c14.xhtml#section14.1.2)）绘制一个类似螺旋的涂鸦，并为其分配一个1,48的破折号模式，将其变成一团看似不相连的点，如[图9-7](#fig9-7)所示。
- en: '![](10/strokedash-random.svg.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](10/strokedash-random.svg.png)'
- en: 'Figure 9-7: Using a dash array with large intervals to imitate a random scattering
    of dots'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-7：使用间隔较大的破折号数组模拟随机散布的点
- en: Also, the regularity of dash patterns plays nicely with spirals—a shape that
    is also regular but consists of progressively longer and longer turns ([11.6](c11.xhtml#section11.6)).
    An interplay of the equidistant dashes and gradually devolving paths can produce
    enchanting patterns ([Figure 9-8](#fig9-8)).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，破折号模式的规律性与螺旋形相得益彰——螺旋也是一种规则的形状，但由逐渐变长的弯曲组成（[11.6](c11.xhtml#section11.6)）。等距破折号与逐渐变化的路径的相互作用可以产生迷人的图案（[图9-8](#fig9-8)）。
- en: '![](10/strokedash-spiral.svg.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](10/strokedash-spiral.svg.png)'
- en: 'Figure 9-8: Dashed spirals are a form of art.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-8：破折号螺旋是一种艺术形式。
- en: 9.5 Markers
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9.5 标记
- en: '*Markers* are arbitrary objects (or even groups of objects) attached to a path
    and displayed as part of that path at (some of) its nodes ([12.1](c12.xhtml#section12.1)).
    The most common use of markers is for creating arrowheads in diagrams and flowcharts.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*标记* 是附加到路径上的任意对象（或甚至是对象组），并显示为该路径在（某些）节点处的组成部分（[12.1](c12.xhtml#section12.1)）。标记最常见的用途是用于在图表和流程图中创建箭头。'
- en: 'A path can have three different types of markers: on its start node, intermediate
    (mid) nodes, and the end node. Each copy of the marker is positioned at the node
    and rotated so as to follow the direction of the path at this node. The size of
    markers is proportional to stroke width; simply make your stroke narrower or wider
    to scale all markers on a path.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一条路径可以有三种不同类型的标记：起始节点、中间（中）节点和结束节点。每个标记的副本都被放置在节点处，并旋转以跟随该节点处路径的方向。标记的大小与笔画宽度成比例；只需将笔画调整得更窄或更宽，即可缩放路径上的所有标记。
- en: The Stroke style tab in the Fill and Stroke dialog contains three drop-down
    lists where you can select start, mid, and end markers for the selected paths
    ([Figure 9-9](#fig9-9)).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 填充和笔画对话框中的笔画样式标签包含三个下拉列表，你可以在其中选择选定路径的起始、中间和结束标记（[图9-9](#fig9-9)）。
- en: '![](10/markers.svg.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](10/markers.svg.png)'
- en: 'Figure 9-9: Choosing markers for a path'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-9：为路径选择标记
- en: These three lists show all the same markers (in other words, you can use any
    marker in any position), but the preview thumbnails show them applied to the start,
    mid, and end of a horizontal straight line path, so you can get an idea of how
    the marker will look on the actual path.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这三组列表显示了相同的标记（换句话说，你可以在任何位置使用任何标记），但预览缩略图将它们应用于水平直线路径的起点、中点和终点，因此你可以大致了解标记在实际路径上的外观。
- en: Let's look at what markers are in Inkscape's stock list.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下 Inkscape 的默认标记列表中包含了哪些标记。
- en: Arrowheads
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头
- en: 'There are two types of arrowheads: one is dart-like with two straight lines
    at the back; the other is delta-shaped with a concave circular arc at the back
    of the arrow. Each type of arrowhead comes in three *sizes*: large, medium, and
    small (these are not absolute sizes but relative to the stroke width). Also, each
    size has two *orientations*: start and end.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头有两种类型：一种是像飞镖一样的，背面有两条直线；另一种是三角形的，箭头背面有一个凹形的圆弧。每种箭头都有三种*尺寸*：大、中、小（这些不是绝对尺寸，而是相对于描边宽度的相对尺寸）。此外，每种尺寸还有两种*方向*：起始和结束。
- en: For example, if you want your arrowheads to point *outward* from the path, choose
    one with a start orientation as the start marker and one with end orientation
    as the end marker. If you mix this up, your arrowheads will point *inward* from
    the ends of the path. Or you can choose the same end-orientation arrowhead for
    all three positions (start, mid, and end) to have all arrowheads on your path
    point in one direction toward the end of the path. Use **Path ▶ Reverse** from
    the menu to reverse a path if necessary (see [12.1.1](c12.xhtml#section12.1.1)
    for details).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你希望箭头指向路径的*外部*，请在起点选择一个起始方向的箭头标记，在终点选择一个结束方向的箭头标记。如果弄错了，箭头将指向路径的*内部*。或者，你可以选择相同的结束方向箭头标记，用于路径的所有三个位置（起点、中点和终点），这样路径上的所有箭头都会指向路径的终点。如有需要，可以使用**路径 ▶ 反转**菜单项来反转路径（详细信息请参见[12.1.1](c12.xhtml#section12.1.1)）。
- en: Arrow tails
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 箭尾
- en: An arrow tail marker is available only in one size (matching the large arrowheads)
    and one orientation (making sense as an end marker—that is, oriented toward the
    path start).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 箭尾标记仅提供一个尺寸（与大号箭头匹配）和一个方向（作为结束标记很有意义，即指向路径的起点）。
- en: Distance measurement markers
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 距离测量标记
- en: Distance measurement markers are just arrowheads with added perpendicular straight
    lines at the tips. There are two orientations, one for a start marker and the
    other for an end marker.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 距离测量标记只是箭头标记，在箭头尖端添加了垂直的直线。它们有两个方向，一个是起始标记，另一个是结束标记。
- en: Geometric shapes
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 几何形状
- en: 'There is a collection of geometric shape markers: round dots, squares, diamonds
    (squares rotated by 45 degrees), equilateral triangles, straight line stops, and
    filled and empty half-circle marks. Most of them have solid black and hollow variants.
    Just as with arrowheads, these markers come in three sizes (large, medium, and
    small); some also have start and end orientations (although for symmetric markers
    such as diamonds, the orientations differ only in the position of the marker relative
    to its node). The start and end variants of triangle markers can be used as just
    another arrowhead shape.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有一组几何形状标记：圆点、方形、菱形（旋转45度的方形）、等边三角形、直线停止符号、填充和空心半圆标记。大多数都有实心和空心变体。与箭头一样，这些标记也有三种尺寸（大、中、小）；有些标记还具有起点和终点方向（尽管对于对称标记，如菱形，方向仅在标记相对于其节点的位置上有所不同）。三角形标记的起点和终点变体可以作为另一种箭头形状使用。
- en: Misc markers
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 杂项标记
- en: There are several fancy markers, notably Scissors (assign it to mid markers
    to create a typical "cut-off line") and the "infinite line" ellipsis endings.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个花哨的标记，特别是剪刀标记（将其分配给中间标记以创建典型的“断开线”）和“无限线”省略号结尾。
- en: If your document already uses some markers of its own, these markers will be
    added to the top of the drop-down marker menus, separated from the stock Inkscape
    markers below. To remove markers from a path, select the topmost empty line in
    the list.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文档中已经使用了一些自定义标记，这些标记将添加到下拉标记菜单的顶部，与下面的默认 Inkscape 标记分开。要从路径中移除标记，请选择列表中最上面的空行。
- en: 9.5.1 Mid Markers and Nodes
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 9.5.1 中间标记和节点
- en: 'Start and end markers are simple in that their position on the path is never
    a surprise (although their orientation may sometimes be, if the end node has a
    very short Bézier handle that has little effect on the shape of the curve but
    may rotate the marker at this node in an unexpected direction). Mid markers are
    more interesting: they are located at the middle nodes ([12.1](c12.xhtml#section12.1))
    of a path, and the positions of these nodes may not be what you need or expect.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 起始和结束标记比较简单，因为它们在路径上的位置永远不会令人意外（尽管有时它们的方向可能会令人意外，如果结束节点有一个非常短的贝塞尔控制柄，对曲线形状影响不大，但可能会导致该节点的标记朝一个意想不到的方向旋转）。中间标记则更有趣：它们位于路径的中间节点([12.1](c12.xhtml#section12.1))，这些节点的位置可能不是你需要或预期的。
- en: A simple use case is a path consisting of straight line segments (with no Bézier
    curves). On such a path, mid markers will be displayed at the corners. Use markers
    that don't have end or start variants and are thus positioned symmetrically around
    the node—for example, dots or squares ([Figure 9-10](#fig9-10)).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的使用案例是由直线段组成的路径（没有贝塞尔曲线）。在这样的路径上，拐角处将显示中间标记。使用没有起始或结束变体的标记，它们在节点周围对称地定位——例如，点或方形标记([Figure 9-10](#fig9-10))。
- en: '![](10/mid-markers.svg.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](10/mid-markers.svg.png)'
- en: 'Figure 9-10: Mid markers at the path joints'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-10：路径连接处的中间标记
- en: 'You may want to fill a path evenly with mid markers, similar to the way the
    dash pattern is regularly repeated along the path. This is easy for a straight
    line path where you can add or remove as many mid nodes as needed without affecting
    the straight line shape. In a more complex path, however, some nodes may be necessary
    to give the path its shape, and you cannot move those nodes along the path without
    distorting that shape. You also cannot choose *not* to apply markers to these
    nodes: in SVG, mid markers apply to all mid nodes without exception. As a result,
    it may be impossible to distribute markers along a path perfectly evenly; however,
    the shorter your desired interval between markers and the simpler the path, the
    less noticeable this unevenness can be.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望像虚线模式那样均匀地填充路径中的中间标记，虚线模式会沿路径定期重复。这对于直线路径来说很容易，只需根据需要添加或移除任何数量的中间节点而不改变直线形状。然而，在更复杂的路径中，某些节点可能是为了保持路径的形状而必需的，而你无法在不扭曲形状的情况下沿路径移动这些节点。你也不能选择*不*在这些节点上应用标记：在SVG中，中间标记适用于所有中间节点，无一例外。因此，可能无法在路径上完美地均匀分布标记；然而，期望的标记间隔越短，路径越简单，这种不均匀性就越不明显。
- en: 'How can you add nodes to a path without changing its shape? A single new node
    can be added in the Node tool ([12.5.3](c12.xhtml#section12.5.3)) by double-clicking
    or Ctrl-Alt-clicking anywhere on the path. For an even distribution of nodes,
    however, another shortcut is more useful: Insert creates a new node in the middle
    of each segment between selected nodes (and adds the new node to the node selection
    so you can keep multiplying nodes by pressing Insert repeatedly).'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如何在不改变路径形状的情况下添加节点？可以通过在路径上双击或按住Ctrl-Alt键点击路径的任意位置来使用节点工具([12.5.3](c12.xhtml#section12.5.3))添加一个新节点。然而，为了使节点分布均匀，另一个快捷键更为实用：按Insert键将在选定节点之间的每个段落中间创建一个新节点（并将新节点添加到节点选择中，因此你可以通过反复按Insert键来不断添加节点）。
- en: For example, selecting both nodes of a two-node path and pressing Insert adds
    one new node in the middle. Now, you have three nodes selected with two segments
    between them, so pressing Insert again adds two more nodes; another Insert adds
    four more nodes, and so on. In this simple case, all nodes will be distributed
    evenly at all times. However, if your path already had some mid nodes, selecting
    all nodes and pressing Insert repeatedly will add nodes more profusely in areas
    that had more nodes to begin with, as shown in [Figure 9-11](#fig9-11).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，选择一个由两个节点组成的路径并按Insert键，会在中间添加一个新节点。现在，你有三个已选择的节点，两个节点之间有两个段，因此再次按Insert键会添加两个新节点；再按一次Insert键，会添加四个新节点，依此类推。在这种简单的情况下，所有节点将始终均匀分布。然而，如果路径中已经有一些中间节点，选择所有节点并反复按Insert键时，将会在最初节点较多的区域添加更多的节点，如[Figure 9-11](#fig9-11)所示。
- en: '![](10/mid-markers-add.svg.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](10/mid-markers-add.svg.png)'
- en: 'Figure 9-11: Adding mid nodes by pressing Insert repeatedly (left) and by using
    the Add Nodes extension (right)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-11：通过反复按Insert键添加中间节点（左）和使用Add Nodes扩展（右）
- en: A better approach to creating evenly distributed nodes is the Extensions ▶ Modify
    Path ▶ Add Nodes extension ([13.4.2.1](c13.xhtml#section13.4.2.1)). In it, you
    can specify either the maximum segment length (in `px` units) or the exact number
    of segments you need, and the algorithm will add nodes (without moving or deleting
    any existing nodes) to produce an even node spacing satisfying these constraints.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 创建均匀分布节点的更好方法是使用扩展功能“扩展”▶“修改路径”▶“添加节点”扩展（[13.4.2.1](c13.xhtml#section13.4.2.1)）。在这个扩展中，你可以指定最大段长度（以`px`为单位）或所需的精确段数，算法将添加节点（不会移动或删除任何现有节点）以满足这些约束，从而生成均匀的节点间距。
- en: To delete an individual node in the Node tool, Ctrl-Alt-click it, or select
    it and press Delete ([12.5.3](c12.xhtml#section12.5.3)). A good method for deleting
    multiple nonessential nodes (those that were added only for the sake of markers
    and do not affect theshape of the path) is the Simplify command ([12.3](c12.xhtml#section12.3)).
    Of course,Simplify cannot really *know* which nodes are essential and which are
    not; it tries to guess—and usually performs acceptably, although undesired nodes
    and small shape distortions are likely to happen.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在节点工具中删除单个节点的方法是按住Ctrl-Alt并点击该节点，或者选择该节点并按Delete键（[12.5.3](c12.xhtml#section12.5.3)）。删除多个非关键节点（那些仅仅是为了标记而添加的，不影响路径形状的节点）的好方法是使用“简化”命令（[12.3](c12.xhtml#section12.3)）。当然，“简化”命令并不能真正*知道*哪些节点是必需的，哪些不是；它会尝试猜测——通常效果还不错，尽管可能会出现不需要的节点和轻微的形状扭曲。
- en: 9.5.2 Coloring Markers
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 9.5.2 上色标记
- en: 'Typically, connector lines in diagrams and flowcharts are black, so the stock
    markers offered by Inkscape are either solid black or black with white filling.
    However, if you have a blue or red connector line, normally you would want the
    arrowhead on that line to be blue or red too. That''s what Inkscape does by default:
    when assigning a marker to a path, it re-colors it to match the color of the path''s
    stroke. When you change the stroke color of a path with markers, its markers get
    updated too.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，图表和流程图中的连接线是黑色的，因此Inkscape提供的默认标记是纯黑色或黑色带白色填充。然而，如果你有蓝色或红色的连接线，通常你也希望该线上的箭头头部是蓝色或红色的。这正是Inkscape默认的做法：当将标记分配到路径时，它会重新上色以匹配路径的描边颜色。当你更改带有标记路径的描边颜色时，标记也会被更新。
- en: This color-matching is not the standard behavior in SVG—it's just what Inkscape
    does to be helpful. Behind the scenes, whenever you change stroke color, Inkscape
    creates a copy of each assigned marker, re-paints it with the new color, and re-assigns
    it back to the path. That's why you will see the different-color copies of the
    markers you have used at the top of the lists in Fill and Stroke (which, as you
    remember, list the document's custom markers first before the standard ones).
    The good news is that if you don't like this behavior, you can disable it in Preferences ▶ Behavior ▶ Markers,
    as shown in [Figure 9-12](#fig9-12).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这种颜色匹配并不是SVG中的标准行为——这只是Inkscape为了方便用户所做的处理。在幕后，每当你更改描边颜色时，Inkscape会创建每个已分配标记的副本，使用新的颜色重新绘制它，并重新将其分配回路径。这就是为什么你会在“填充与描边”面板的顶部看到不同颜色的标记副本（正如你所记得的，它会将文档的自定义标记列在标准标记之前）。好消息是，如果你不喜欢这种行为，你可以在“首选项”▶“行为”▶“标记”中禁用它，具体如[图9-12](#fig9-12)所示。
- en: '![](10/prefs-markers.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](10/prefs-markers.png)'
- en: 'Figure 9-12: Marker behavior preferences'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-12：标记行为偏好设置
- en: 'One reason to disable automatic marker coloring is if you want to use a path
    only as an invisible string for a rosary of markers—in other words, you want to
    see the markers but hide the stroke itself. For this, first assign the markers
    to a stroked path and then remove the stroke (for example, by middle-clicking
    the stroke swatch in the selected style indicator,[8.6](c08.xhtml#section8.6)).
    If you had set Update marker color when object color changes to off, this will
    give you what you need: visible markers on an invisible path.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用自动标记上色的一个原因是，如果你只想将路径用作标记的隐形串线——换句话说，你希望看到标记但隐藏描边本身。为此，首先将标记分配到有描边的路径上，然后移除描边（例如，通过在所选样式指示器中中键点击描边样本，[8.6](c08.xhtml#section8.6)）。如果你将“对象颜色变化时更新标记颜色”设置为关闭，这将满足你的需求：在隐形路径上显示标记。
- en: When markers and their stroke have different colors, one more thing to take
    into account is the order of rendering ([9.6](#section9.6)). By default, stroke
    is painted first, so if it is different from its markers, it will only show through
    from underneath the markers if they are transparent.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当标记和其描边有不同颜色时，还需要考虑的是渲染顺序（[9.6](#section9.6)）。默认情况下，描边先被绘制，因此如果它与标记的颜色不同，只有当标记是透明的时，描边才会从标记下方显示出来。
- en: '[1.1]'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.1]'
- en: Automatic coloring of markers is a relatively recent Inkscape innovation; before
    it was available, the only way to do this was by Extensions ▶ Modify Path ▶ Color
    Markers. This extension is still available and is sometimes useful because it
    has some additional options. With it, you can not only paint markers to match
    the object but also swap fill and stroke colors, optionally include alpha, or
    just provide your own colors for fill and stroke. (If you want a more complex
    paint job for your markers, see the next section on how to turn a marker into
    a regular editable object and back.)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 标记的自动着色是 Inkscape 最近的一个创新；在该功能推出之前，唯一的实现方法是通过扩展功能 ▶ 修改路径 ▶ 颜色标记。这个扩展仍然可用，并且有时很有用，因为它提供了一些额外的选项。使用它，你不仅可以为标记上色使其与对象匹配，还可以交换填充和描边颜色，选择性地包含透明度，或者为填充和描边提供你自己的颜色。（如果你希望为标记做更复杂的涂装，请参阅下一节，了解如何将标记转换为常规可编辑对象并再转回。）
- en: 9.5.3 Creating New Markers
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 9.5.3 创建新标记
- en: A marker does not have to be a single object painted with a solid color. It
    can consist of any number of objects, grouped or not, with any paint, opacity,
    or even blur properties—in other words, anything Inkscape can draw can be a marker
    on a path. Applying such complex markers to paths with many added nodes ([9.5.1](#section9.5.1))
    can produce amazing compositions. Let's look at how to create markers out of arbitrary
    objects.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 标记不必是一个用纯色填充的单一对象。它可以由任意数量的对象组成，这些对象可以是分组的或未分组的，具有任意的填充、透明度甚至模糊属性——换句话说，Inkscape
    能绘制的任何内容都可以作为路径上的标记。将这种复杂的标记应用到有很多附加节点的路径上（[9.5.1](#section9.5.1)）可以产生惊人的组合效果。让我们看看如何从任意对象创建标记。
- en: Generally, it's as easy as selecting the object or objects and choosingObjects
    to Marker from the Object menu. Selected objects disappear, but in the Stroke
    style tab of Fill and Stroke, you will see your new marker in the top part of
    the list of markers (just before the stock markers). You may need to close and
    reopen the Fill and Stroke dialog to refresh the marker list.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这只需要选择对象或对象们，然后从对象菜单中选择“对象转为标记”。所选对象将消失，但在“填充与描边”对话框的“描边样式”标签中，你会看到新的标记出现在标记列表的顶部（就在默认标记之前）。你可能需要关闭并重新打开“填充与描边”对话框，以刷新标记列表。
- en: When creating a new marker, Inkscape assumes that the original objects are oriented
    as they should be on a horizontal path that goes from left to right. For example,
    if you have a new arrowhead that you want to use as an end marker, make it point
    horizontally to the right before converting it to a marker.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建新标记时，Inkscape 假设原始对象的方向应该是水平的，并且沿从左到右的路径排列。例如，如果你有一个新的箭头头部，想将其用作结束标记，在将其转换为标记之前，请确保它水平指向右侧。
- en: Similar to standard markers, the user-created marker will scale up and down
    as you change the stroke width. Its initial size (the size of the object that
    you have turned into a marker) will correspond to the stroke width of 1 px.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于标准标记，用户创建的标记会随着描边宽度的变化而缩放。它的初始大小（你将对象转变为标记时的大小）将与 1 像素的描边宽度相对应。
- en: Each marker has an *anchor point*—the point that will be placed on the node
    to which that marker is attached. When you create a new marker, Inkscape uses
    the transformation fixed point ([6.4](c06.xhtml#section6.4)) of the (first) selected
    object as that anchor point ([Figure 9-13](#fig9-13)). By default, the fixed point
    is in the center of the object's bounding box ([4.3](c04.xhtml#section4.3)), which
    means the newly created marker will be centered around its node. If you move the
    fixed point to one of the corners of the object, the new marker will touch its
    node by that corner.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 每个标记都有一个 *锚点*——这个点将被放置到该标记附着的节点上。当你创建一个新的标记时，Inkscape 会使用所选对象（第一个对象）的变换固定点（[6.4](c06.xhtml#section6.4)）作为锚点（[图
    9-13](#fig9-13)）。默认情况下，固定点位于对象边界框的中心（[4.3](c04.xhtml#section4.3)），这意味着新创建的标记将围绕其节点居中。如果你将固定点移动到对象的一个角落，新标记将通过该角与节点接触。
- en: '![](10/create-marker.svg.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](10/create-marker.svg.png)'
- en: 'Figure 9-13: Creating a new marker from a selected object'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9-13：从选定对象创建新标记
- en: Can you do the opposite and convert a path marker to an object (for example,
    to edit it and make it into a marker again)? Yes, although this involves destroying
    the path that the marker was applied to (so you may want to make a copy of the
    path first). Use the Path ▶ Stroke to Path command. It turns the stroke into a
    filled path ([12.1.3](c12.xhtml#section12.1.3)), but also, if the original path
    had markers, it groups the converted path with objects that represent former markers.
    Ungroup, choose one of the former markers, rotate it into the default orientation,
    and edit as necessary.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你能做到相反的操作，将路径标记转换为对象（例如，编辑它并重新制作成标记）吗？可以，尽管这涉及销毁应用标记的路径（因此你可能希望首先复制路径）。使用路径▶描边到路径命令。它将描边转换为填充路径（[12.1.3](c12.xhtml#section12.1.3)），但如果原始路径有标记，它还会将转换后的路径与表示以前标记的对象分组。取消分组，选择一个以前的标记，将其旋转到默认方向，并根据需要进行编辑。
- en: 9.5.4 Advanced Markers
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 9.5.4 高级标记
- en: 'SVG markers have a few other useful options that are not yet available via
    the Inkscape UI. To change them, you need to use the Selectors and CSS dialog
    ([16.3](c16.xhtml#section16.3)) and Inkscape''s XML Editor ([4.10](c04.xhtml#section4.10))
    together. Open them both. Select an object with markers, in Selectors and CSS
    find the marker property you''re interested in (`marker-start`, `marker-mid`,
    or `marker-end`), and click the green arrow at the right end of that line. This
    will scroll the XML Editor to the `svg:marker` element used by your object. Here''s
    what you can change via this element''s attributes:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: SVG标记有一些其他有用的选项，这些选项目前在Inkscape的用户界面中不可用。要更改这些选项，你需要同时使用选择器和CSS对话框（[16.3](c16.xhtml#section16.3)）以及Inkscape的XML编辑器（[4.10](c04.xhtml#section4.10)）。打开它们。选择一个带有标记的对象，在选择器和CSS中找到你感兴趣的标记属性（`marker-start`，`marker-mid`，或`marker-end`），然后点击该行右侧的绿色箭头。这将使XML编辑器滚动到你对象所使用的`svg:marker`元素。以下是你可以通过该元素的属性更改的内容：
- en: By default, markers rotate to orient themselves along the path direction. If
    you want your marker always to have the same orientation regardless of how the
    path goes at this point, remove the `orient="auto"` attribute.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，标记会旋转以使其与路径方向对齐。如果你希望标记始终保持相同的方向，无论路径在该点的走向如何，请移除`orient="auto"`属性。
- en: If you don't want the marker to scale up and down when the stroke width is changed,
    add the attribute `markerUnits` with the value`userSpaceOnUse`.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你不希望标记在描边宽度变化时进行缩放，请添加属性`markerUnits`，值为`userSpaceOnUse`。
- en: 9.6 Rendering Order [1.1]
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9.6 渲染顺序 [1.1]
- en: 'As you have seen, a single solid object—not a group—can still have up to three
    distinct components: its fill, its stroke, and its markers. The only unresolved
    question is in which order to render these intrinsic components. Since you cannot
    simply rearrange them (as you would with separate objects in a group), SVG governs
    this with a style property of its own. This property, editable in theStroke style
    tab of Fill and Stroke ([Figure 9-14](#fig9-14)), can have one of the six values
    that represent all possible orderings (bottom to top) of the three components:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，一个单一的实心对象——不是一个组——仍然可以有最多三个不同的组件：它的填充、描边和标记。唯一未解决的问题是这些固有组件的渲染顺序。由于不能像处理组中的单独对象那样简单地重新排列它们，SVG通过它自己的样式属性来控制这一点。这个属性可以在“填充与描边”面板的描边样式选项卡中编辑（[图
    9-14](#fig9-14)），它可以拥有六个值，代表三种组件（从下到上的所有可能顺序）的所有排列：
- en: fill, stroke, markers (the default)
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 填充，描边，标记（默认值）
- en: stroke, fill, markers
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描边，填充，标记
- en: fill, markers, stroke
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 填充，标记，描边
- en: markers, fill, stroke
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记，填充，描边
- en: stroke, markers, fill
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描边，标记，填充
- en: markers, stroke, fill
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记，描边，填充
- en: '![](10/render-order.svg.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](10/render-order.svg.png)'
- en: 'Figure 9-14: Rendering order buttons on the Stroke style tab of Fill and Stroke'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9-14：填充与描边面板中的描边样式选项卡上的渲染顺序按钮
- en: Whenever fill is on top of stroke, it goes up to the line of the path on which
    the stroke is centered. Thus, if the fill is opaque ([8.3](c08.xhtml#section8.3)),
    the visible result of putting it on top of the stroke is almost exactly as if
    the stroke were half its width.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 每当填充位于描边之上时，它会升至描边所围绕的路径线。因此，如果填充是不透明的（[8.3](c08.xhtml#section8.3)），将填充置于描边之上，视觉效果几乎和描边宽度减半时一样。
