- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引言
- en: From the beginning, one of the promises of the .NET Framework has been *language
    interoperability*; that is, developers targeting the platform could write code
    in one language and interact with code written in another language through the
    *Common Language Infrastructure (CLI)*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 从一开始，.NET 框架的一个承诺就是*语言互操作性*；也就是说，面向该平台的开发者可以用一种语言编写代码，并通过*公共语言基础结构（CLI）*与另一种语言编写的代码进行交互。
- en: Early examples often included a library written in C# utilizing a library written
    in Visual Basic, or vice versa. Ideally, this would allow developers to solve
    different problems using the best language for the job. In practice, things didn’t
    really work out that way, as developers tended to adopt either C# or Visual Basic
    and build entire solutions with that language. This is hardly surprising given
    that, with few exceptions, the differences between the languages have historically
    been purely syntactic (and the languages have only grown closer as the platform
    has matured).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的示例通常包括一个用 C# 编写的库，利用了一个用 Visual Basic 编写的库，反之亦然。理想情况下，这样可以让开发者使用最适合解决问题的语言来解决不同的问题。但实际上，事情并非如此，因为开发者往往会选择
    C# 或 Visual Basic 并用它来构建整个解决方案。这一点并不奇怪，因为历史上，除少数例外，语言之间的差异主要是语法上的（而且随着平台的成熟，这些语言之间的差异也越来越小）。
- en: Now, after more than a decade, F# has emerged as the third major language in
    the .NET ecosystem. But what does F# offer that the traditional .NET languages
    do not, and why should you care?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，经过十多年，F# 已经成为 .NET 生态系统中的第三大主要语言。但 F# 提供了什么是传统 .NET 语言所没有的，为什么你应该关心它？
- en: F# brings functional programming to .NET development. While both C# and Visual
    Basic have some functional aspects, they are, first and foremost, object-oriented
    languages; they’re concerned primarily with behavior and managing an ever-changing
    system state. In contrast, F# is a functional-first language, concerned with the
    application of functions to data. This difference has a dramatic impact not only
    on how you write code, but also on how you think about it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: F# 将函数式编程引入了 .NET 开发。虽然 C# 和 Visual Basic 都具备一些函数式特性，但它们首先是面向对象的语言；它们主要关注行为和管理不断变化的系统状态。相比之下，F#
    是一种函数式优先的语言，关注的是将函数应用于数据。这种差异不仅会对你编写代码的方式产生深远影响，还会影响你如何思考代码。
- en: As you read through this book, you’ll learn how F#’s functional nature enforces
    a variety of constraints that may seem limiting at first, but once you embrace
    them you’ll likely find that your code is smaller, more correct, and more predictable.
    Furthermore, you’ll discover how F#’s many unique constructs simplify common development
    tasks, thus allowing you to focus on the problem you’re trying to solve rather
    than the plumbing required by the compiler. These aspects make F# a perfect complement
    to C# and Visual Basic, often paving the way toward realizing .NET’s goal of mixed-language
    solutions.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当你阅读本书时，你将会了解 F# 的函数式特性如何强制实施各种限制，虽然这些限制一开始可能显得很局限，但一旦你接受了它们，你会发现你的代码更小、更正确、更可预测。此外，你还会发现
    F# 的许多独特构造如何简化常见的开发任务，从而让你能够专注于解决你正在尝试解决的问题，而不是编译器要求的复杂设置。这些特点使得 F# 成为 C# 和 Visual
    Basic 的完美补充，常常为实现 .NET 的混合语言解决方案目标铺平道路。
- en: Whom Is This Book For?
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本书适合谁阅读？
- en: 'I have been developing software professionally with C# on the .NET platform
    since its earliest public releases back in 2002 and 2003\. Thus, I wrote this
    book for people like me: experienced .NET developers looking to break into functional
    programming while retaining the safety net of the tools and libraries they’re
    already using.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2002 和 2003 年 .NET 平台的早期公开发布以来，我一直在使用 C# 专业开发软件。因此，我写这本书是为了像我一样的人：那些有经验的 .NET
    开发者，希望在保留已用工具和库的安全网的同时，开始接触函数式编程。
- en: While this book is written with an emphasis on .NET development, experienced
    developers approaching F# from other backgrounds should still find plenty of value
    within these pages, as the principles covered aren’t typically platform specific.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本书虽然侧重于 .NET 开发，但经验丰富的开发者如果是从其他背景转向 F#，依然能在这些页面中找到大量有价值的内容，因为书中讨论的原则通常并不特定于某个平台。
- en: How Is This Book Organized?
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本书如何组织？
- en: '*The Book of F#* is divided into 12 chapters intended to introduce you to each
    of the major language features. I recommend that you read this book from beginning
    to end rather than skipping around, as each chapter builds upon the concepts introduced
    by its predecessors.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*《F#书籍》*分为12章，旨在介绍F#的各个主要语言特性。我建议你从头到尾阅读本书，而不是跳读，因为每一章都会建立在前一章介绍的概念之上。'
- en: '****[Chapter 1](ch01.html "Chapter 1. Meet F#")****. Provides your first glimpse
    of F# and describes its place within the .NET ecosystem. In this chapter, you’ll
    learn what you need to begin coding in F#, how projects are structured, and some
    of the nuances that can catch newcomers to the language off guard.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****[第1章](ch01.html "第1章. 认识F#")****。为你提供了对F#的初步了解，并描述了它在.NET生态系统中的位置。在本章中，你将学到开始使用F#编码所需的知识，项目的结构，以及一些可能让新手感到困惑的细节。'
- en: '****[Chapter 2](ch02.html "Chapter 2. F# Interactive")****. Covers the F# Interactive
    environment, an indispensable *read-evaluate-print loop (REPL)* tool that ships
    with F#. Here you’ll see how F# Interactive can help you explore a problem domain
    and even let you use F# as a scripting language backed by the full power of the
    .NET Framework.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****[第2章](ch02.html "第2章. F#交互式")****。介绍了F#交互式环境，这是一个不可或缺的*读取-评估-打印循环（REPL）*工具，随F#一起提供。在这里，你将看到F#交互式如何帮助你探索问题领域，甚至让你利用.NET框架的全部功能将F#作为脚本语言使用。'
- en: '****[Chapter 3](ch03.html "Chapter 3. Fundamentals")****. Teaches you about
    the fundamentals of F#. Topics covered in this chapter include default immutability,
    bindings, core data types, type inference, imperative flow control, and generics.
    Even though many of the concepts addressed in this chapter will be familiar to
    experienced developers, I encourage you to read through it because F# often allows
    you to use them in unexpected ways.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****[第3章](ch03.html "第3章. 基础知识")****。讲解了F#的基础知识。本章涉及的主题包括默认不可变性、绑定、核心数据类型、类型推断、命令式流程控制和泛型。尽管本章讨论的许多概念对于有经验的开发者来说可能比较熟悉，但我仍然鼓励你阅读，因为F#经常允许你以意想不到的方式使用它们。'
- en: '****[Chapter 4](ch04.html "Chapter 4. Staying Objective")****. Provides an
    in-depth look at F#’s object-oriented capabilities. In this chapter, you’ll see
    how to develop rich object models every bit as robust as those developed in more
    established object-oriented languages like C# or Visual Basic.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****[第4章](ch04.html "第4章. 保持面向对象")****。深入探讨了F#的面向对象功能。本章中，你将看到如何开发出与C#或Visual
    Basic等更成熟的面向对象语言一样强大的对象模型。'
- en: '****[Chapter 5](ch05.html "Chapter 5. Let’s Get Functional")****. Takes you
    on a journey into managed functional programming by introducing you to concepts
    like functions as data, currying, partial application, and delegation. Additionally,
    you’ll learn about several of the F# data structures typically associated with
    functional programming.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****[第5章](ch05.html "第5章. 让我们开始函数式编程")****。带你进入托管函数式编程的旅程，介绍了函数作为数据、柯里化、部分应用和委托等概念。此外，你还将了解一些典型的与函数式编程相关的F#数据结构。'
- en: '****[Chapter 6](ch06.html "Chapter 6. Going to Collections")****. Explores
    how the various .NET collection types, like arrays and sequences, are represented
    in F#. You’ll also be introduced to several new collection types, including F#’s
    lists, sets, and maps.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****[第6章](ch06.html "第6章. 走进集合")****。探讨了各种.NET集合类型，如数组和序列，在F#中的表示方式。你还将接触到几种新的集合类型，包括F#的列表、集合和映射。'
- en: '****[Chapter 7](ch07.html "Chapter 7. Patterns, Patterns, Everywhere")****. Introduces
    one of F#’s most powerful constructs: the match expression. Here you’ll uncover
    the various ways you can decompose complex types and branch your code, all within
    a single expression.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****[第7章](ch07.html "第7章. 到处都是模式")****。介绍了F#最强大的构造之一：匹配表达式。在这一章，你将揭示如何在一个表达式内分解复杂类型并分支代码。'
- en: '****[Chapter 8](ch08.html "Chapter 8. Measuring Up")****. Shows you how to
    add another degree of safety to your code by enforcing units of measure (such
    as inches, feet, meters, and so on) on your numeric types.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****[第8章](ch08.html "第8章. 衡量标准")****。展示了如何通过对数字类型强制使用度量单位（如英寸、英尺、米等）为代码增加额外的安全性。'
- en: '****[Chapter 9](ch09.html "Chapter 9. Can I Quote You on that?")****. Explains
    quoted expressions—F#’s version of LINQ’s expression trees. Here you’ll see how
    to compose, decompose, and apply quoted expressions.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****[第9章](ch09.html "第9章. 我可以引用你说的话吗？")****。解释了引号表达式——F#版的LINQ表达式树。在这里，你将看到如何组合、拆解和应用引号表达式。'
- en: '****[Chapter 10](ch10.html "Chapter 10. Show Me the Data")****. Explores some
    F#-specific ways to access data, including query expressions and one of F#’s most
    exciting features: type providers.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****[第10章](ch10.html "第10章. 给我数据")****。探索一些 F# 特有的访问数据方式，包括查询表达式和 F# 最令人兴奋的特性之一：类型提供器。'
- en: '****[Chapter 11](ch11.html "Chapter 11. Asynchronous and Parallel Programming")****. Provides
    a brief introduction to asynchronous and parallel programming with F#. Topics
    include consuming the Task Parallel Library from F#, asynchronous workflows, and
    agent-based programming using `MailboxProcessor<''T>`.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****[第11章](ch11.html "第11章. 异步与并行编程")****。简要介绍了使用 F# 进行异步和并行编程。主题包括如何从 F# 中使用任务并行库、异步工作流以及基于代理的编程，使用
    `MailboxProcessor<''T>`。'
- en: '****[Chapter 12](ch12.html "Chapter 12. Computation Expressions")****. Discusses
    how to create computation expressions (often called *monads* in other functional
    languages) to control how data flows from expression to expression.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****[第12章](ch12.html "第12章. 计算表达式")****。讨论如何创建计算表达式（在其他函数式语言中通常称为 *单子*）以控制数据从一个表达式流向另一个表达式。'
- en: Additional Resources
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附加资源
- en: As an open source language managed by the F# Software Foundation, F# is backed
    by a welcoming community of developers around the world, covering a wide range
    of disciplines. Although I’ve tried to provide comprehensive explanations and
    examples throughout the book, if you would like to explore a topic in more detail,
    you may find these resources helpful.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作为由 F# 软件基金会管理的开源语言，F# 得到了全球各领域开发者的支持，涵盖了广泛的学科。虽然我在整本书中尽力提供了全面的解释和示例，但如果你希望更深入地探索某个主题，以下资源可能对你有所帮助。
- en: '*****The Book of F#* companion page *([http://nostarch.com/f_sharp](http://nostarch.com/f_sharp))*****. This
    is your source for content updates and the code examples used within this book.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*****The Book of F#* 陪伴页面 *([http://nostarch.com/f_sharp](http://nostarch.com/f_sharp))*****。这是你获取内容更新和本书中使用的代码示例的来源。'
- en: '****The F# Software Foundation** ***([http://fsharp.org/](http://fsharp.org/))*****. This
    should be your first stop. Here you’ll find links to all of the language documentation,
    including the language reference, the language specification, component design
    guidelines, and more.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****F# 软件基金会** ***([http://fsharp.org/](http://fsharp.org/))*****。这里应该是你的第一站。在这里，你可以找到所有语言文档的链接，包括语言参考、语言规范、组件设计指南等。'
- en: '****F# for Fun and Profit** ***([http://fsharpforfunandprofit.com/](http://fsharpforfunandprofit.com/))*****. Here
    you’ll find a plethora of examples covering virtually every aspect of the language.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****F# for Fun and Profit** ***([http://fsharpforfunandprofit.com/](http://fsharpforfunandprofit.com/))*****。在这里，你会找到涵盖几乎所有语言方面的大量示例。'
- en: '****Try F#** ***([http://www.tryfsharp.org/](http://www.tryfsharp.org/))*****. This
    browser-based tool lets you experiment with the language and learn it through
    guided tutorials.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****Try F#** ***([http://www.tryfsharp.org/](http://www.tryfsharp.org/))*****。这个基于浏览器的工具让你通过引导教程实验语言并学习它。'
