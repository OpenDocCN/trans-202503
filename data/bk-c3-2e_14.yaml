- en: '**14**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**14**'
- en: '**TRANSITIONS AND ANIMATIONS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**过渡与动画（TRANSITIONS AND ANIMATIONS）**'
- en: '![Image](graphics/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/common-01.jpg)'
- en: 'We often think of web pages as having three layers: content (HTML), presentation
    (CSS), and behavior (JavaScript), and the general understanding is that these
    layers should all be kept absolutely separate—don’t use presentational or behavioral
    rules in the content layer (in other words, no CSS or JavaScript inline in the
    markup). This separation is not quite as clear cut as it seems, however—for a
    start, CSS has always included some behavioral aspects (the `:hover` pseudo-class
    being a prime example).'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常认为网页有三个层次：内容（HTML）、展示（CSS）和行为（JavaScript），通常理解是这三层应当完全分开——也就是说，不要在内容层使用展示或行为规则（换句话说，HTML标记中不能有内联CSS或JavaScript）。然而，这种分离并不像看起来那么明确——首先，CSS一直包含一些行为方面的内容（例如，`:hover`伪类就是一个典型的例子）。
- en: 'This line between presentation and behavior was blurred even further when the
    WebKit developers introduced two new behavioral modules that have been adopted
    as CSS3 components: Transitions and Animations. These modules allow for the animation
    of element properties, adding movement to otherwise static pages even when JavaScript
    is not available.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当WebKit开发者引入了两个新的行为模块并将其作为CSS3组件采纳时，展示和行为之间的界限变得更加模糊了：过渡和动画。这些模块允许对元素的属性进行动画处理，为原本静态的页面增添了动态效果，即使在没有JavaScript的情况下也能实现。
- en: Some have argued—and perhaps still do—about whether the Transitions and Animations
    Modules should be included in CSS, as they fall firmly in the behavioral layer.
    But, as the W3C has decided to offer them for discussion as an “official” part
    of CSS3, we no longer need to debate the ethics of them—we can just have fun with
    them, instead!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人曾经争论过——也许现在仍然在争论——过渡和动画模块是否应当纳入CSS，因为它们完全属于行为层。但由于W3C决定将它们作为CSS3的“官方”部分进行讨论，我们不再需要辩论它们的伦理问题——我们可以直接享受它们带来的乐趣了！
- en: The difference between transitions and animations is that the former are *implicit*
    and the latter are *declared*. That means transitions only take effect when the
    property they are applied to changes value, whereas animations are explicitly
    executed when applied to an element.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡（transitions）和动画（animations）之间的区别在于，前者是*隐式的*，而后者是*显式声明的*。这意味着过渡只有在应用的属性值发生变化时才会生效，而动画则是在应用于元素时显式执行。
- en: I’ll start this chapter with a look at the Transitions Module, as it is the
    simpler of the two modules; however, both modules have a lot of syntax in common,
    so much of what you learn from one can be directly applied to the other.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我将从过渡模块开始讲解，因为它是两个模块中更简单的一个；然而，这两个模块有许多相似的语法，因此从一个模块学到的很多内容可以直接应用到另一个模块上。
- en: '**Transitions**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**过渡（Transitions）**'
- en: 'CSS2.1 has no in-between states: When the value of a property changes, the
    change is abrupt. Consider an element with a width of 10em, which changes to a
    width of 20em when you hover your mouse over it. You’ll notice the element does
    not progress smoothly between the two states but jumps instantly between them.
    CSS3 changes this behavior with the introduction of the Transitions Module (*[http://www.w3.org/TR/css3-transitions/](http://www.w3.org/TR/css3-transitions/)*).
    In CSS, a *transition* is an animation that moves a property between two states.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: CSS2.1没有中间状态：当属性值变化时，变化是突然发生的。考虑一个宽度为10em的元素，当你将鼠标悬停在其上时，宽度变为20em。你会注意到元素在这两种状态之间并没有平滑过渡，而是直接跳跃过去。CSS3通过引入过渡模块（*[http://www.w3.org/TR/css3-transitions/](http://www.w3.org/TR/css3-transitions/)*）改变了这一行为。在CSS中，*过渡*是一种将属性在两种状态之间平滑过渡的动画效果。
- en: 'As I mentioned in the introduction to this chapter, transitions are an *implicit*
    animation, which means they are triggered only when a new value is set for a CSS
    property—this could be when new values are applied on hover or through JavaScript
    manipulation. For a transition to occur, four conditions must be in place: an
    initial value, an end value, the transition itself, and a trigger.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在本章开头提到的，过渡是一种*隐式*动画，这意味着它们只有在为CSS属性设置新值时才会触发——这可以是在鼠标悬停时应用新值或通过JavaScript进行操作时触发。为了使过渡发生，必须满足四个条件：初始值、结束值、过渡本身以及触发条件。
- en: 'Here’s an example of those four conditions in a simple transition (don’t worry
    about the properties I’ve used just yet; I’ll explain everything in due course):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个简单过渡中那四个条件的示例（暂时不用担心我使用的属性；稍后我会逐一解释）：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `div` element provides the initial value (`background-color: black`) and
    the transition (`background-color 2s`). The trigger is the `:hover` pseudo-class,
    which sets the end value (`silver`) for the `background-color` property.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`div` 元素提供了初始值（`background-color: black`）和过渡效果（`background-color 2s`）。触发条件是
    `:hover` 伪类，它为 `background-color` 属性设置了结束值（`silver`）。'
- en: So here we have a `div` element with a black background that, when the mouse
    is passed over it, transitions smoothly to silver. All transitions act in reverse
    when the trigger is no longer active, so when the mouse is moved off of the `div`,
    the background smoothly transitions back to black.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这里有一个 `div` 元素，初始背景为黑色，当鼠标悬停时，它的背景平滑过渡为银色。当触发条件不再活跃时，所有的过渡效果都会反向执行，因此当鼠标移开
    `div` 时，背景将平滑过渡回黑色。
- en: Now that you have a general idea of how transitions work, I’ll explore each
    of the transition properties in turn.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经大致了解了过渡效果如何工作，我将依次介绍每个过渡属性。
- en: '**NOTE**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The transition properties are implemented in all modern browsers, including
    mobile, without vendor prefix. To cater to older versions of WebKit-based browsers,
    however—especially Safari and versions previous to 4.4 of Android—you should also
    duplicate your rules with the* `*-webkit-*` *prefix.*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*过渡属性在所有现代浏览器中都已实现，包括移动设备浏览器，无需厂商前缀。然而，为了兼容较老版本的基于 WebKit 的浏览器——特别是 Safari
    和 Android 4.4 之前的版本——你应当在规则中添加带有 `*-webkit-*` 前缀的复制版本。*'
- en: '***transition-property***'
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***过渡属性***'
- en: 'The first new property, `transition-property`, specifies which property (or
    properties) of an element will be animated (that’s the most number of times I’ve
    ever said *property* in a single sentence). Here’s the syntax:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个新属性，`transition-property`，指定了元素的哪个属性（或哪些属性）将会被动画化（这是我在一句话中提到的最多次的 *属性*）。以下是其语法：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: An acceptable keyword value is either `all` or `none` or a valid CSS property.
    The default value is `all`, which means every valid property will be animated.
    I stress *valid* CSS property because not every property can be transitioned;
    the specification has a full list of the ones that can at *[http://www.w3.org/TR/css3-transitions/#properties-from-css-/](http://www.w3.org/TR/css3-transitions/#properties-from-css-/)*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可接受的关键字值是 `all`、`none` 或有效的 CSS 属性。默认值是 `all`，这意味着所有有效的属性都会被动画化。我强调 *有效* 的
    CSS 属性，因为并不是所有属性都可以进行过渡；规范中列出了可以过渡的属性，详见 *[http://www.w3.org/TR/css3-transitions/#properties-from-css-/](http://www.w3.org/TR/css3-transitions/#properties-from-css-/)*。
- en: 'Here’s an example of `transition-property`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 `transition-property` 的示例：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This code sets an initial value of `150%` on the `font-size` property and declares
    this is the property that will be transitioned when the (not yet specified) trigger
    is activated. Note that I will add properties to this example throughout the rest
    of this section before showing the completed example in action in “[The Complete
    Transition Example](ch14.html#ch14leve1sec172)” on [page 173](ch14.html#page_173).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码为 `font-size` 属性设置了初始值 `150%`，并声明该属性将在触发条件（尚未指定）激活时发生过渡。请注意，在本节剩余部分我将逐步添加更多的属性，在
    “[完整过渡示例](ch14.html#ch14leve1sec172)” 中展示完整的例子，见 [第173页](ch14.html#page_173)。
- en: '***transition-duration***'
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***过渡持续时间***'
- en: 'The next property is `transition-duration`, which defines the length of time
    that the transition takes to complete. Here’s the syntax:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个属性是 `transition-duration`，它定义了过渡完成所需的时间。以下是其语法：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `*time*` value is a number with a unit of *ms* (*milliseconds*) or *s* (*seconds*).
    Because 1000 milliseconds equals 1 second, a value of `1.25s` is the same as `1250ms`.
    The default value is `0` (zero), meaning this property is the only one required
    to create a transition. A transition can occur if you declare a `transition-duration`
    without a `transition-property` (as that defaults to `all`, so all valid properties
    will animate) but not vice versa.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`*时间*` 值是一个带有单位 *ms*（*毫秒*）或 *s*（*秒*）的数字。因为 1000 毫秒等于 1 秒，所以 `1.25s` 等同于 `1250ms`。默认值是
    `0`（零），意味着这是创建过渡所需的唯一属性。如果你声明了 `transition-duration` 而没有声明 `transition-property`（因为默认值是
    `all`，因此所有有效属性都会被动画化），则过渡仍然可以发生，但反之则不行。'
- en: 'To make the example transition from the previous section happen over a period
    of two seconds, you add this code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使前一节中的示例过渡在两秒钟内完成，你需要添加以下代码：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Although you can supply negative values to this property, they will be interpreted
    as the default `0`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你可以为此属性提供负值，但它们会被解释为默认值 `0`。
- en: '***transition-timing-function***'
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***过渡计时函数***'
- en: 'To control the manner in which an element transitions between states, you use
    the `transition-timing-function` property. This property allows for variations
    in speed along the duration of the transition, which gives you control over the
    animation’s pace. This property has three different value types: a keyword, the
    `cubic-bezier()` function, or the `steps()` function. I’ll discuss those two functions
    in detail, but to begin, I’ll focus on the keywords.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了控制元素在状态之间过渡的方式，你可以使用`transition-timing-function`属性。这个属性允许你在过渡的持续时间内调整速度，从而控制动画的节奏。该属性有三种不同的值类型：关键字、`cubic-bezier()`函数或者`steps()`函数。我会详细讨论这两个函数，但首先，我将重点讲解关键字。
- en: '**Timing Function Keywords**'
  id: totrans-34
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**时间函数关键字**'
- en: 'The syntax of the `transition-timing-function` property when used with a keyword
    is quite straightforward:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用关键字时，`transition-timing-function`属性的语法相当简单明了：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The possible keyword values are `ease`, `linear`, `ease-in`, `ease-out`, and
    `ease-in-out`. The default value is `ease`, which starts slowly, accelerates quickly,
    and slows down again at the end. The `linear` value progresses steadily from the
    start of the transition to the end, with no variation in speed. With the `ease-in`
    value, the animation begins slowly and then speeds up toward the end, and the
    `ease-out` value acts in reverse. Finally, `ease-in-out` starts slowly, speeds
    up through the middle, and then slows down again at the end, similar to—but less
    dramatic than—the `ease` value.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的关键字值有`ease`、`linear`、`ease-in`、`ease-out`和`ease-in-out`。默认值是`ease`，它开始时较慢，加速较快，最后再慢下来。`linear`值则是从过渡开始到结束的过程中，速度均匀，没有变化。`ease-in`值使动画开始时较慢，接着加速，直到结束，而`ease-out`值则正好相反。最后，`ease-in-out`从开始时较慢，经过中间加速，再到结束时减速，类似于——但比`ease`值不那么戏剧性的——`ease`值。
- en: 'With that explained, let’s add a simple timing function to the example transition:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 解释完这一点后，让我们为示例过渡添加一个简单的时间函数：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**The Cubic Bézier Curve**'
  id: totrans-40
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**三次贝塞尔曲线**'
- en: 'If you want finer control over the `transition-timing-function` property, you
    should use the `cubic-bezier()` function. In case you’re not familiar with cubic
    Bézier curves—and indeed, why would you be?—allow me to explain. First, here’s
    the syntax:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想对`transition-timing-function`属性进行更精细的控制，应该使用`cubic-bezier()`函数。如果你对三次贝塞尔曲线不太熟悉——其实，为什么会熟悉呢？——让我来为你解释。首先，这里是语法：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'A cubic Bézier curve is a smooth, continuous curve that passes through four
    points plotted on a grid that goes from 0 to 1 along both axes. The four points
    are known as *P[0]*, *P[1]*, *P[2]*, and *P[3]*. They define curvature and are
    plotted with pairs of (*x*, *y*) coordinates, where the first (*P[0]*) is always
    at (0, 0) and the last (*P[3]*) is always at (1, 1). The other two points are
    defined in the function: (*x1*, *y1*) and (*x2*, *y2*). An example, shown in [Figure
    14-1](ch14.html#ch14fig1), illustrates this best.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 三次贝塞尔曲线是一条平滑的连续曲线，它穿过四个点，这些点在一个从0到1的网格上绘制，横纵坐标轴都是从0到1。四个点分别叫做*P[0]*、*P[1]*、*P[2]*和*P[3]*。它们定义了曲线的弯曲度，并通过一对对的(*x*,
    *y*)坐标绘制，其中第一个点(*P[0]*)总是在(0, 0)，最后一个点(*P[3]*)总是在(1, 1)。另外两个点在函数中定义：(*x1*, *y1*)
    和 (*x2*, *y2*)。一个例子，如[图 14-1](ch14.html#ch14fig1)所示，能最好地说明这一点。
- en: '![Image](graphics/f14-01.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f14-01.jpg)'
- en: '*Figure 14-1: An example of a cubic Bézier curve*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 14-1：三次贝塞尔曲线的示例*'
- en: '[Figure 14-1](ch14.html#ch14fig1) shows the four points mapped onto the grid
    to create a Bézier curve. The coordinates of each point are shown in [Table 14-1](ch14.html#ch14table1).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 14-1](ch14.html#ch14fig1)展示了这四个点如何映射到网格上，从而绘制出贝塞尔曲线。每个点的坐标列在[表 14-1](ch14.html#ch14table1)中。'
- en: '**Table 14-1:** The Coordinate Points Used to Plot a Bézier Curve'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 14-1：用于绘制贝塞尔曲线的坐标点**'
- en: '| **Point** | **Coordinates (x, y)** |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| **点** | **坐标 (x, y)** |'
- en: '| *P[0]* | (0, 0) |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| *P[0]* | (0, 0) |'
- en: '| *P[1]* | (0.6, 0.1) |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| *P[1]* | (0.6, 0.1) |'
- en: '| *P[2]* | (0.15, 0.7) |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| *P[2]* | (0.15, 0.7) |'
- en: '| *P[3]* | (1.0, 1.0) |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| *P[3]* | (1.0, 1.0) |'
- en: 'You would use the following CSS to represent this curve (remember, you don’t
    need to define *P[0]* and *P[3]* because they always have the same values):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下CSS来表示这条曲线（记住，你不需要定义*P[0]*和*P[3]*，因为它们的值始终是固定的）：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: A linear animation progresses in a straight line from (0, 0) to (1, 1), but
    this example animation follows the progression of the curve toward the final point
    over the set duration. If you imagine the duration to be 1 second, you can see
    the speed gradually increases at the start, between 0 and (roughly) 0.5 seconds,
    and then increases sharply to about 0.7 seconds, and then assumes a slower rate
    until the end of the animation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 线性动画从 (0, 0) 到 (1, 1) 按直线进展，但这个示例动画是在设定的持续时间内，遵循曲线的进展，直到达到最终点。如果你想象持续时间为 1 秒，你可以看到开始时速度逐渐增加，在
    0 到（大约）0.5 秒之间，然后在 0.7 秒左右急剧加速，接着直到动画结束时，速度逐渐变慢。
- en: All of the `transition-timing-function` keywords described earlier are produced
    with cubic Bézier curves. [Table 14-2](ch14.html#ch14table2) shows each of the
    keywords and their corresponding values for the `cubic-bezier()` function.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 之前描述的所有 `transition-timing-function` 关键字都是通过立方贝塞尔曲线生成的。[表14-2](ch14.html#ch14table2)显示了每个关键字及其对应的
    `cubic-bezier()` 函数值。
- en: '**Table 14-2:** Comparing `transition-timing-function` Keywords with Their
    Equivalent Cubic Bézier Values'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**表14-2：** 比较 `transition-timing-function` 关键字与其对应的立方贝塞尔值'
- en: '| **Keyword Value** | **Cubic Bézier Value** |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| **关键字值** | **立方贝塞尔值** |'
- en: '| `ease` | 0.25, 0.1, 0.25, 1 |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `ease` | 0.25, 0.1, 0.25, 1 |'
- en: '| `linear` | 0, 0, 1, 1 |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `linear` | 0, 0, 1, 1 |'
- en: '| `ease-in` | 0.42, 0, 1, 1 |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `ease-in` | 0.42, 0, 1, 1 |'
- en: '| `ease-out` | 0, 0, 0.58, 1 |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `ease-out` | 0, 0, 0.58, 1 |'
- en: '| `ease-in-out` | 0.42, 0, 0.58, 1 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `ease-in-out` | 0.42, 0, 0.58, 1 |'
- en: As with the transformation matrices I introduced in [Chapter 13](ch13.html#ch13),
    `cubic-bezier()` functions can be quite daunting if you’re not used to math. But
    don’t worry—you can always use the keyword values, which will be more than sufficient
    in most cases.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我在[第13章](ch13.html#ch13)中介绍的变换矩阵一样，`cubic-bezier()` 函数如果你不习惯数学，可能会让人感觉有些棘手。但别担心——你总是可以使用关键字值，这在大多数情况下已经足够了。
- en: A great tool to make cubic Bézier curves a little easier is Lea Verou’s *[http://cubic-bezier.com/](http://cubic-bezier.com/)*.
    This tool allows you to create your own curves using a visual interface, see them
    run in real time compared to the keyword aliases, and export them as `cubic-bezier()`
    functions—a really useful aid to understanding.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一个使立方贝塞尔曲线稍微容易理解的好工具是 Lea Verou 的 *[http://cubic-bezier.com/](http://cubic-bezier.com/)*。这个工具允许你使用可视化界面创建自己的曲线，将其与关键字别名实时比较，并将它们导出为
    `cubic-bezier()` 函数——这是理解曲线的一个非常有用的辅助工具。
- en: '**The steps() Function**'
  id: totrans-66
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**steps() 函数**'
- en: 'An alternative to smooth, eased transitions is to use the `steps()` function,
    which runs the animation in a series of staggered intervals. The syntax of the
    function looks like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`steps()` 函数是平滑过渡的替代方案，它通过一系列错开的间隔来运行动画。该函数的语法如下所示：'
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `*count*` value is an integer that states how many intervals the animation
    should run through, and the optional `*direction*` is one of two keywords—`start`
    or `end` (the default)—that sets the point at which the change happens in each
    interval. That probably doesn’t make a lot of sense right now, but bear with me.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`*count*` 值是一个整数，表示动画应该运行的间隔次数，且可选的 `*direction*` 是两个关键字之一——`start` 或 `end`（默认为
    `end`），它设置每个间隔中变化发生的点。现在这可能还不太容易理解，但请耐心等待。'
- en: 'Let’s see a very simple example of how the `steps()` works. Take a look at
    the following rule, in which the `steps()` function has a step count argument
    of `4` and uses the simple form of the function by omitting the optional direction
    keyword:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个 `steps()` 如何工作的简单例子。看看下面的规则，其中 `steps()` 函数的步数参数为 `4`，并通过省略可选的方向关键字，使用该函数的简单形式：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Visualized on the timing function grid used for the `cubic-bezier()` function,
    it would look like [Figure 14-2](ch14.html#ch14fig2). So rather than a single
    line of transition, steps are like seeing snapshots of the animation in action.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在用于 `cubic-bezier()` 函数的定时功能网格上，它看起来像 [图14-2](ch14.html#ch14fig2)。因此，`steps`
    并不像单一的过渡线，而是像是在看到动画的每一帧快照。
- en: '![Image](graphics/f14-02.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f14-02.jpg)'
- en: '*Figure 14-2: A transition over four stepped intervals*'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14-2：四个步进间隔的过渡*'
- en: 'When an animation is displayed in steps, use the `*direction*` keyword to select
    when the change of each step occurs: the default `end` keyword means the change
    happens at the end of the step (pause, then change), and the alternative `start`
    means the change happens at the start of the step (change, then pause).'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当动画以步进方式显示时，使用 `*direction*` 关键字来选择每个步进变化发生的时机：默认的 `end` 关键字表示变化发生在步进的结束时（暂停，然后变化），而替代的
    `start` 则表示变化发生在步进的开始时（变化，然后暂停）。
- en: 'This process is also easier to visualize on the timing function grid; in the
    following code, the same step count is shown with differing direction keywords:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程在时间函数网格上也更容易可视化；在下面的代码中，同样的步骤数显示了不同的方向关键字：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can see the difference in [Figure 14-3](ch14.html#ch14fig3), and I strongly
    urge you to take a look, if you can, at the accompanying example file (available
    from *[http://thebookofcss3.com/](http://thebookofcss3.com/)*)—seeing the two
    in action is the best way to understand the difference.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图14-3](ch14.html#ch14fig3)中看到它们之间的区别，如果可以的话，我强烈建议你查看随附的示例文件（可以从 *[http://thebookofcss3.com/](http://thebookofcss3.com/)*
    获得）——看到这两者的实际效果是理解区别的最佳方式。
- en: '![Image](graphics/f14-03.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f14-03.jpg)'
- en: '*Figure 14-3: Comparing direction keywords:* `*start*` *(left) and* `*end*`
    *(right)*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14-3：比较方向关键字：* `*start*` *(左边) 和* `*end*` *(右边)*'
- en: '***transition-delay***'
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***transition-delay***'
- en: 'The final property in the `transition-*` family is `transition-delay`, which
    sets the time when the transition starts. Here’s the syntax:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition-*` 系列中的最后一个属性是 `transition-delay`，它设置过渡开始的时间。以下是语法：'
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As with `transition-duration`, the `*time*` value is a number with a unit of
    either milliseconds (`ms`) or seconds (`s`). The default value is `0` (zero),
    meaning the transition happens as soon as the trigger is … well, triggered. Any
    other positive value starts the transition after the specified length of time
    has passed.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 和 `transition-duration` 一样，`*time*` 值是一个带单位的数字，单位可以是毫秒（`ms`）或秒（`s`）。默认值为 `0`（零），意味着过渡会在触发时立即发生。任何其他正值则会在指定时间过后开始过渡。
- en: 'For example, if you wanted to set a delay of a quarter of a second at the start
    of the example transition, here’s the code you would use:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你想在示例过渡的开始处设置一个四分之一秒的延迟，以下是你会使用的代码：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can also use negative values for `transition-delay`, which has an interesting
    effect: The transition begins immediately but skips ahead by the amount of the
    negative value. To illustrate what I mean, let’s consider a transition with a
    duration of `4s` but a delay of `-2s`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以为 `transition-delay` 使用负值，这会产生一个有趣的效果：过渡立即开始，但会跳过负值的时间量。为了说明我的意思，我们考虑一个持续时间为
    `4s` 的过渡，但延迟为 `-2s`：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: When triggered, the transition starts immediately, but as if two seconds had
    already passed (two seconds being the duration minus the delay). In this case,
    the animation would start halfway through the transition.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当触发时，过渡立即开始，但就像两秒钟已经过去一样（两秒钟为持续时间减去延迟）。在这种情况下，动画会从过渡的中途开始。
- en: '***The transition Shorthand Property***'
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***过渡简写属性***'
- en: 'Throughout this section, I’ve built an example transition property by property.
    So far, the code looks like this:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，我通过一个属性一个属性地构建了一个示例过渡。目前，代码看起来是这样的：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This code seems like quite a lot to write for each transition. But, as with
    all of the other CSS properties that are part of a “family” (`background-*`, `border-*`,
    and so on), the `transition-*` family has a shorthand. Here’s the syntax:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码似乎每个过渡都需要写很多。但和所有其他属于同一“系列”的CSS属性一样（例如`background-*`、`border-*`等等），`transition-*`系列也有简写方式。以下是语法：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'One important thing to be aware of here is that there are two time values:
    `transition-duration` and `transition-delay`, which must be declared in that order.
    If only one is declared, the syntax presumes it is `transition-duration`, and
    the `transition-delay` will be set at the default (or inherited) value.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个重要的注意事项，那就是有两个时间值：`transition-duration` 和 `transition-delay`，它们必须按此顺序声明。如果只声明了其中一个，语法会假定它是
    `transition-duration`，而 `transition-delay` 会被设置为默认值（或继承值）。
- en: 'If you use the values from the example transition with the shorthand property,
    here’s the result:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用来自示例过渡的值并应用简写属性，结果如下：
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: It’s quite apparent that this is a lot less code to write.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，编写的代码少了很多。
- en: '***The Complete Transition Example***'
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***完整的过渡示例***'
- en: 'Now that I’ve explained all of the component properties, let’s take a look
    at the example transition in action. The full code is shown here:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我已经解释了所有组件属性，让我们看看实际的示例过渡效果。完整的代码如下：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[Figure 14-4](ch14.html#ch14fig4) shows what happens when I pass my mouse over
    the `h1` element.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[图14-4](ch14.html#ch14fig4) 显示了当我将鼠标移到 `h1` 元素上时发生的情况。'
- en: '![Image](graphics/f14-04.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f14-04.jpg)'
- en: '*Figure 14-4: Three stages of an animated transition on the* `*font-size*`
    *property*'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14-4：`*font-size*` 属性上动画过渡的三个阶段*'
- en: 'Obviously, I can’t show the full animation on the printed page, but the illustration
    shows three stages of the transition: the initial, pre-transition stage (left)
    with a font size of 150 percent; an intermediate, mid-transition stage (center),
    which is just under two seconds into the animation when the font size has increased;
    and the final, post-transition stage (right) where the font size is 600 percent.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我无法在打印页面上展示完整的动画，但插图展示了过渡的三个阶段：初始的过渡前阶段（左侧），字体大小为 150%；中间的过渡中阶段（中间），动画进行到不到两秒时字体大小已增大；以及最后的过渡后阶段（右侧），字体大小为
    600%。
- en: As I’ve already mentioned, transitions act in reverse when the condition that
    acts as a trigger is no longer being met, so when you remove your mouse from over
    the `h1` element, you can read this example from right to left to see what will
    happen.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前所提到的，当触发条件不再满足时，过渡会反向执行，因此当你把鼠标从 `h1` 元素上移开时，可以从右到左阅读此示例，查看会发生什么。
- en: '***Multiple Transitions***'
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***多个过渡***'
- en: 'You can easily add multiple transitions to an element by providing a list of
    comma-separated values to the individual or shorthand properties. That being the
    case, both of the following code examples are valid:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过为单个或缩写属性提供逗号分隔的值列表，轻松地为一个元素添加多个过渡。这样的话，以下两个代码示例都是有效的：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Note that if a property has fewer values than the others, that list of values
    will be looped. With that in mind, you could rewrite this code example slightly:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果某个属性的值比其他属性少，那么该值列表会被循环使用。考虑到这一点，您可以稍微修改这个代码示例：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, `transition-property` has three values, whereas `transition-duration`
    has only two. This means the third value of the former (`padding`) is matched
    with the first value of the latter (`4s`), matching what was supplied in the first
    example.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`transition-property` 有三个值，而 `transition-duration` 只有两个值。这意味着前者的第三个值（`padding`）与后者的第一个值（`4s`）匹配，符合第一个示例中提供的内容。
- en: 'Here’s a practical example:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个实际示例：
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here, I’ve used the `transition` shorthand to apply three transitions. The first
    transition changes the `background-color` from `black` to `silver` in a `linear`
    timing function, and the next two change the `left` and `top` properties with
    `ease-in-out` timing functions. The `background-color` transition takes place
    over four seconds, and the others, over two.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我使用了 `transition` 缩写来应用三个过渡。第一个过渡将 `background-color` 从 `black` 变为 `silver`，采用
    `linear` 时间函数，接下来的两个过渡分别使用 `ease-in-out` 时间函数改变 `left` 和 `top` 属性。`background-color`
    过渡的持续时间为四秒，其他两个过渡则是两秒。
- en: '[Figure 14-5](ch14.html#ch14fig5) shows three stages of the transition: The
    first stage (left) shows the element pre-transition, with a black background and
    positioned at the bottom left of its parent element; the next stage (center) is
    mid-transition, as the element is changing color and moving to the top right of
    its parent; and the final stage (right) shows the element post-transition, with
    a silver background and in its final position.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 14-5](ch14.html#ch14fig5) 展示了过渡的三个阶段：第一阶段（左侧）显示元素在过渡前，背景为黑色，位于父元素的左下角；接下来的阶段（中间）是过渡中的阶段，元素正在改变颜色并移动到父元素的右上角；最后的阶段（右侧）显示元素在过渡后，背景为银色，并处于最终位置。'
- en: '![Image](graphics/f14-05.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f14-05.jpg)'
- en: '*Figure 14-5: Three stages of an animated transition on the* `*background-color*`,
    `*left*`*, and* `*top*` *properties*'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 14-5：关于* `*background-color*`、`*left*` *和* `*top*` *属性的动画过渡三个阶段*'
- en: '**Animations**'
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**动画**'
- en: 'Transitions are good but naturally limited; they are only applied when a property
    value changes. The CSS3 Animations Module (*[http://www.w3.org/TR/css3-animations/](http://www.w3.org/TR/css3-animations/)*)
    goes beyond what is possible with transitions, allowing animations to be applied
    directly to elements with a syntax that is more flexible and permits more granular
    control. Animations and transitions have quite a lot of syntax in common, but
    the process for creating animations is very different: First, you define the properties
    and timings, and then you add the animation controls to the elements that will
    be animated.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡效果很好，但自然是有限的；它们仅在属性值发生变化时应用。CSS3 动画模块 (*[http://www.w3.org/TR/css3-animations/](http://www.w3.org/TR/css3-animations/)*)
    超越了过渡的可能性，允许直接对元素应用动画，语法更加灵活，并且提供了更精细的控制。动画和过渡有很多相似的语法，但创建动画的过程非常不同：首先，定义属性和时间设置，然后将动画控制应用于将要动画化的元素。
- en: '**NOTE**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*CSS animations are implemented in IE10+ and all other modern browsers, but,
    as of the time of writing, you’ll still need to use the* `*-webkit-*` *vendor
    prefix for Chrome and Safari, on both desktop and mobile.*'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*CSS动画在IE10及以上版本和所有其他现代浏览器中得到实现，但截至撰写时，你仍然需要为Chrome和Safari（包括桌面和移动端）使用`*-webkit-*`供应商前缀。*'
- en: '***Keyframes***'
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***关键帧***'
- en: You can think of CSS animations as a series of transitions, chained into a sequence.
    The first step in creating your own animations is to define your *keyframes*,
    which are the points that set the start and end of a transition. The most simple
    animation has two keyframes—one at the start and one at the end—whereas more complex
    ones have multiple keyframes in between. [Figure 14-6](ch14.html#ch14fig6) illustrates
    how an animation with three keyframes would appear.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以把CSS动画看作是一系列过渡，串联成一个序列。创建你自己的动画的第一步是定义你的*关键帧*，这些关键帧是设置过渡的开始和结束的节点。最简单的动画有两个关键帧——一个在开始，一个在结束——而更复杂的动画则有多个中间关键帧。[图14-6](ch14.html#ch14fig6)展示了一个包含三个关键帧的动画效果。
- en: 'In CSS, keyframes are declared in the `@keyframes` rule, which has the following
    syntax:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中，关键帧是在`@keyframes`规则中声明的，其语法如下：
- en: '[PRE22]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![Image](graphics/f14-06.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f14-06.jpg)'
- en: '*Figure 14-6: An animation with three keyframes and transitions between each*'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14-6：一个包含三个关键帧的动画及其之间的过渡*'
- en: '**NOTE**'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Remember you’ll also have to duplicate your keyframe ruleset to accommodate
    WebKit-based browsers. Use the WebKit prefix:* `*@-webkit-keyframes*`.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '*记住，你还需要重复你的关键帧规则集，以适应基于WebKit的浏览器。使用WebKit前缀：* `*@-webkit-keyframes*`。'
- en: The first value for the `@keyframes` rule is `*name*`; this unique identifier
    is used to call the animation, which I’ll discuss later. You can use pretty much
    any value here (use hyphen separation, not spaces, if you want a name with multiple
    words), although I suggest using a word or term that is relevant to the animation
    it describes—your stylesheets will be much easier to follow if you do.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`@keyframes`规则的第一个值是`*name*`；这个唯一的标识符用于调用动画，我将在后面讨论。你可以在这里使用几乎任何值（如果你想要一个包含多个单词的名称，使用连字符分隔而不是空格），但我建议使用与动画描述内容相关的单词或术语——如果这样做，你的样式表会更容易理解。'
- en: The next value, `*selector*`, sets the position along the duration of the animation
    that the keyframe will occur. The usual value here is a percentage value; for
    example, if you want the keyframe to occur halfway through your animation, use
    `50%`. You can also use one of the keywords, `from` or `to`, which are analogous
    to 0 percent and 100 percent, respectively.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个值`*selector*`设置了关键帧发生的动画时间点。通常这里使用百分比值；例如，如果你希望关键帧发生在动画的中间，可以使用`50%`。你也可以使用关键字`from`或`to`，它们分别相当于0%和100%。
- en: 'Within each keyframe selector is a CSS declaration or series of declarations
    that are applied to a selected element at the specified stage of the animation.
    If this is all blowing your mind, let me clarify with an example. The following
    code describes a simple animation, which I’ve named *expand*, with three keyframes:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个关键帧选择器中，都有一个CSS声明或一系列声明，这些声明会在动画的指定阶段应用于选定的元素。如果这让你感到困惑，让我通过一个例子来解释。以下代码描述了一个简单的动画，我将其命名为*expand*，并包含三个关键帧：
- en: '[PRE23]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: At the beginning of the animation (➊), the selected element has a border that
    is `4px` wide; halfway through the animation (➋), the border is increased to a
    width of `12px`; and at the end of the animation(➌), the border is back to `4px`
    wide, and the height and width are both `100%`. Between each of the keyframes,
    the elements are animated gradually, so between the start and halfway through
    the animation, the border is animated to change width smoothly from `4px` to `12px`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在动画开始时（➊），选定的元素有一个宽度为`4px`的边框；在动画进行到一半时（➋），边框的宽度增加到`12px`；在动画结束时（➌），边框宽度恢复为`4px`，并且高度和宽度都为`100%`。在每个关键帧之间，元素会逐渐过渡，所以在开始和中途的动画之间，边框的宽度会平滑地从`4px`变化为`12px`。
- en: Note that inheritance operates on individual keyframes, so if you want a change
    to persist between frames, you need to specify it in each frame. If I hadn’t specified
    `border-width` again in the `to` keyframe (➍), it would default to the inherited
    value of the element the animation was applied to, meaning the animation would
    be quite different.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，继承在单个关键帧上起作用，因此如果你希望某个变化在帧之间持续存在，你需要在每一帧中都指定它。如果我没有在`to`关键帧（➍）中再次指定`border-width`，它将默认为应用于动画的元素的继承值，这样动画的效果就会有所不同。
- en: 'Keyframe selectors can be chained just like other CSS selectors, so I could
    write the previous code example like this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 关键帧选择器可以像其他CSS选择器一样链式使用，因此我可以像这样编写之前的代码示例：
- en: '[PRE24]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Likewise, you are not required to list the keyframe selectors in time order;
    putting `to` before `from` is perfectly acceptable (although harder to maintain,
    I bet), and any declaration conflicts are resolved by using the cascade: Rules
    declared later take preference. For example, take a look at the following keyframe
    ruleset where two keyframes have been defined at the same point:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你并不需要按时间顺序列出关键帧选择器；将`to`放在`from`之前也是完全可以接受的（尽管我敢打赌这样会更难维护），任何声明冲突都通过使用级联来解决：后声明的规则优先。例如，看看以下关键帧规则集，其中两个关键帧在同一时间点定义：
- en: '[PRE25]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: When the animation is applied, the element’s background color will be `green`
    at the `10%` point, as the rule declared later would apply.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当动画应用时，元素的背景色将在`10%`的时刻变为`green`，因为后面声明的规则将会生效。
- en: Once you’ve defined the keyframes, the next step is to apply animation control
    properties to the elements you want to animate. As I mentioned in the introduction
    to this section, many of the animation properties share syntax with their counterparts
    in the `transition-*` family, so you should already be pretty familiar with them.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你定义了关键帧，下一步就是将动画控制属性应用到你想要动画化的元素上。正如我在本节的介绍中提到的，许多动画属性与`transition-*`系列中的相应属性共享相同的语法，因此你应该已经非常熟悉它们了。
- en: '***animation-name***'
  id: totrans-143
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***animation-name***'
- en: 'The `animation-name` property refers to an animation that’s been defined with
    the `@keyframes` rule, and, as such, the syntax is quite straightforward:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`animation-name`属性指的是通过`@keyframes`规则定义的动画，因此，语法相当简单：'
- en: '[PRE26]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You can see it requires only a single value, which is the name of an already
    defined animation. To call the animation created in the previous section, you
    use this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，它只需要一个值，这个值是已经定义好的动画的名称。要调用在上一节中创建的动画，你可以使用以下代码：
- en: '[PRE27]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The only other permissible value (and the default) is `none`, which prevents
    any animations from occurring on this element.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一允许的其他值（也是默认值）是`none`，它会阻止该元素上发生任何动画。
- en: '***animation-duration***'
  id: totrans-149
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***animation-duration***'
- en: 'The duration of an animation is set by the `animation-duration` property, which
    is functionally identical to the `transition-duration` property introduced earlier
    in this chapter:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 动画的持续时间由`animation-duration`属性设置，它的功能与本章前面介绍的`transition-duration`属性完全相同：
- en: '[PRE28]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'As with `transition-duration`, the `*time*` value is a number with a unit of
    either ms or s, or a `0` (zero), which prevents the animation from running. (Negative
    values are also implemented as `0`.) To extend the example animation so it’s six
    seconds in duration, you add this line:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 和`transition-duration`一样，`*time*`值是一个带单位的数字，可以是ms或s，或者是`0`（零），它会阻止动画运行。（负值也会被实现为`0`。）为了将示例动画的持续时间延长为六秒，你需要添加这一行：
- en: '[PRE29]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '***animation-timing-function***'
  id: totrans-154
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***animation-timing-function***'
- en: 'Another property that should be familiar is `animation-timing-function`, which
    again is functionally identical to its counterpart `transition-timing-function`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个应该很熟悉的属性是`animation-timing-function`，它的功能上与对应的`transition-timing-function`属性完全相同：
- en: '[PRE30]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Permitted values are the timing function keywords (`ease`, `linear`, `ease-in`,
    `ease-out`, and `ease-in-out`), the `cubic-bezier()` function (explained in “[The
    Cubic Bézier Curve](ch14.html#ch14leve1sec168)” on [page 168](ch14.html#page_168)),
    or the `steps()` function (explained in “[The `steps()` Function](ch14.html#ch14leve1sec169)”
    on [page 170](ch14.html#page_170)). Therefore, if you want to make your animation
    “ease in” at the start, you add this code:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 允许的值包括计时函数关键字（`ease`，`linear`，`ease-in`，`ease-out`和`ease-in-out`），`cubic-bezier()`函数（在[第168页](ch14.html#page_168)的“[Cubic
    Bézier曲线](ch14.html#ch14leve1sec168)”中解释）或`steps()`函数（在[第170页](ch14.html#page_170)的“[steps()函数](ch14.html#ch14leve1sec169)”中解释）。因此，如果你希望动画在开始时“缓入”，你可以添加以下代码：
- en: '[PRE31]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '***animation-delay***'
  id: totrans-159
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***animation-delay***'
- en: 'Yet another familiar property is `animation-delay`, which is identical in function
    to its counterpart, the `transition-delay` property:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个熟悉的属性是`animation-delay`，它的功能与其对应的`transition-delay`属性完全相同：
- en: '[PRE32]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Like `animation-duration` (and the two corresponding `transition-*` properties),
    the time value is a number with a unit of either ms or s, which sets the delay
    before an animation begins. A `0` (zero) means no delay. As with `transition-duration`,
    negative values cause the animation to “skip” by that amount.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 和 `animation-duration`（以及两个对应的 `transition-*` 属性）一样，时间值是一个带有单位的数字，可以是 ms 或 s，它设置动画开始之前的延迟时间。`0`（零）意味着没有延迟。与
    `transition-duration` 类似，负值会导致动画按该值“跳过”。
- en: 'To delay the example animation by two seconds, you include this code:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要让示例动画延迟两秒钟，可以包含以下代码：
- en: '[PRE33]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '***animation-iteration-count***'
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***animation-iteration-count***'
- en: 'Unlike a transition, which only happens once (or twice, if you want to count
    the reverse), an animation can be repeated any number of times. The number of
    repetitions is set by the `animation-iteration-count` property, which has this
    syntax:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 与只会发生一次的过渡不同（如果算上反向，可能会有两次），动画可以重复任意次数。重复次数由 `animation-iteration-count` 属性设置，语法如下：
- en: '[PRE34]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `*count*` value in this syntax is either a whole number or the keyword `infinite`.
    A number value sets how many times the animation repeats. The default value is
    `1` (one), meaning the animation plays from start to end once and then stops.
    The `infinite` value means the animation loops indefinitely or at least until
    another condition is met that changes this value. A value of `0` (zero) or any
    negative number prevents the animation from playing.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 该语法中的 `*count*` 值可以是一个整数或者关键字 `infinite`。数字值设置动画重复的次数。默认值是 `1`（一次），意味着动画从头到尾播放一次，然后停止。`infinite`
    值意味着动画无限循环，或者至少直到满足另一个条件来改变该值。`0`（零）或任何负数会阻止动画播放。
- en: 'To continue with the example I’ve built throughout this section, if I want
    the animation to repeat 10 times, I need to add the following declaration:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要继续我在本节中构建的示例，如果我想让动画重复 10 次，我需要添加以下声明：
- en: '[PRE35]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '***animation-direction***'
  id: totrans-171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***animation-direction***'
- en: 'Animations play from start to finish, but they can also play in reverse. You
    can set whether your animation always plays in one direction or alternates playing
    forward and backward. To do this, use the `animation-direction` property:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 动画从开始播放到结束，但它也可以反向播放。你可以设置动画是否始终在一个方向播放，或者交替正向和反向播放。要做到这一点，可以使用 `animation-direction`
    属性：
- en: '[PRE36]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The keyword value has two options: `normal` or `alternate`. The default is
    `normal`, which always plays the animation forward: The animation plays through
    from start to finish, and then, if it is set to repeat, it plays again from the
    start. If the `alternate` value is used, the animation plays from start to finish
    and then plays in reverse before starting over again. If you consider each iteration
    of the animation as a “cycle,” the odd-numbered cycles play forward and the even-numbered
    play backward. You can see the difference in [Figure 14-7](ch14.html#ch14fig7).'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字值有两个选项：`normal` 或 `alternate`。默认值是 `normal`，表示动画始终向前播放：动画从开始到结束播放，然后，如果设置为重复，它将从头开始重新播放。如果使用
    `alternate` 值，动画先正向播放，再反向播放，然后重新开始。如果将每次动画的循环视为一个“周期”，奇数周期正向播放，偶数周期反向播放。你可以在 [图
    14-7](ch14.html#ch14fig7) 中看到这种差异。
- en: 'To complete the example animation, let’s set the animation to `alternate` forward
    and backward:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成示例动画，让我们设置动画为 `alternate` 正向和反向播放：
- en: '[PRE37]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '![Image](graphics/f14-07.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f14-07.jpg)'
- en: '*Figure 14-7: An animation played in the* `*normal*` *direction repeats itself
    from start to finish; when played using* `*alternate*`*, each second cycle plays
    finish to start.*'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 14-7：一个以* `*normal*` *方向播放的动画从头到尾重复；使用* `*alternate*` *播放时，每个第二个周期从结束到开始播放。*'
- en: '***animation-fill-mode***'
  id: totrans-179
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***animation-fill-mode***'
- en: 'If your animation is finite—that is, if it doesn’t have an infinite value for
    the `animation-iteration-count` property—then you use the `animation-fill-mode`
    property to set how the element appears outside of the animation cycle. To show
    you what I mean by that, let’s consider the following style rules:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的动画是有限的——也就是说，如果它的 `animation-iteration-count` 属性没有设置为无限值——那么你可以使用 `animation-fill-mode`
    属性来设置元素在动画周期之外的显示方式。为了向你展示我的意思，让我们来看以下样式规则：
- en: '[PRE38]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In this rule, element `*E*` will be `green` for the `1s` delay before the animation
    is triggered, then instantly change to `red`, then transition to `blue`, iterating
    twice (`2`), and then at the end revert back to the initial `green`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个规则中，元素 `*E*` 在动画触发之前延迟 `1s`，然后立即变为 `red`，接着过渡到 `blue`，重复两次（`2`），最后恢复到初始的
    `green`。
- en: 'You can change this behavior with `animation-fill-mode`. The syntax looks like
    this:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`animation-fill-mode`来更改这种行为。语法如下所示：
- en: '[PRE39]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The permitted keywords are `none` (the default), `backwards`, `forwards`, or
    `both`. If you use `backwards`, the declarations specified in the `0%` (or `from`)
    keyframe will be applied to the element before the animation begins; if you use
    `forwards`, the declarations in the `100%` (or `to`) keyframe will be applied
    when the animation ends; or if you use `both`, the `0%` declarations will apply
    before the animation and the `100%`, after.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 允许的关键字有`none`（默认值）、`backwards`、`forwards`或`both`。如果使用`backwards`，在动画开始之前，`0%`（或`from`）关键帧中指定的声明将应用于元素；如果使用`forwards`，在动画结束时，`100%`（或`to`）关键帧中的声明将应用；如果使用`both`，`0%`的声明将在动画之前应用，`100%`的声明将在动画之后应用。
- en: 'So returning to the previous example code, if you add the following rule:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 所以回到之前的示例代码，如果你添加以下规则：
- en: '[PRE40]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: then element `*E*` would begin `red`, before transitioning to `blue` and staying
    that color at the end of the animation; its original `green` wouldn’t be applied
    at any point.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 然后元素`*E*`将从`red`开始，过渡到`blue`，并在动画结束时保持这个颜色；它原本的`green`颜色在任何时候都不会被应用。
- en: '***animation-play-state***'
  id: totrans-189
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***animation-play-state***'
- en: 'The `animation-play-state` property sets whether an animation is active. Here’s
    the syntax:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`animation-play-state`属性设置动画是否处于活动状态。语法如下：'
- en: '[PRE41]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The keyword value has two options: `running` means the animation is playing,
    and `paused` means it isn’t. You can use this property to perform a play/pause
    action:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字值有两个选项：`running`表示动画正在播放，`paused`表示动画没有播放。你可以使用这个属性来执行播放/暂停操作：
- en: '[PRE42]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: In this example, if you presume that element `*E*` has an animation applied,
    passing the mouse over the element pauses the animation until the mouse is moved
    off, at which time the animation continues.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，如果假设元素`*E*`应用了动画，鼠标悬停在元素上时，动画会暂停，直到鼠标移开，动画才会继续。
- en: '***The animation Shorthand***'
  id: totrans-195
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***动画简写***'
- en: 'Throughout this section, I’ve assembled an example animation one property at
    a time. Here’s how all the properties combined appear:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我一次一个属性地组装了一个动画示例。以下是所有属性结合在一起后的效果：
- en: '[PRE43]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'That’s a lot of properties to declare for each animation. Once again, however,
    you can take advantage of a shorthand property called `animation`, and here’s
    the syntax:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个动画来说，声明这么多属性有点繁琐。然而，你可以利用一个叫做`animation`的简写属性，语法如下：
- en: '[PRE44]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: As with the `transition` shorthand, `animation-duration` and `animation-delay`
    must be specified in order. If either is left out, the syntax presumes it is `animation-delay`,
    which receives a default value of `0`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 和`transition`简写一样，`animation-duration`和`animation-delay`必须按顺序指定。如果漏掉其中一个，语法默认认为是`animation-delay`，并给它一个默认值`0`。
- en: 'To make the example I’ve been building in this chapter somewhat more compact,
    I can use this shorthand code:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我在本章中构建的示例更加简洁，我可以使用这段简写代码：
- en: '[PRE45]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'That may still seem verbose, but at its most simple, only two values are required
    for the `animation` property to function: the name of the keyframe and a duration:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来可能仍然比较冗长，但在最简单的情况下，`animation`属性只需要两个值：关键帧的名称和持续时间：
- en: '[PRE46]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '***The Complete Animations Example***'
  id: totrans-205
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***完整的动画示例***'
- en: 'With all of the properties explained, let’s take a look at the full example
    animation in action. Here’s the CSS (some rules have been omitted for brevity;
    see the example files for the complete code):'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 解释了所有属性之后，让我们来看一下完整的动画示例实际效果。以下是CSS代码（为了简洁起见，部分规则已被省略；完整代码请参见示例文件）：
- en: '[PRE47]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Unfortunately, I can’t show animation in this book, so I’ll settle for describing
    it. [Figure 14-8](ch14.html#ch14fig8) shows the state of the element at three
    of the animation’s keyframes: The keyframe at `0%` (➊) shows the element with
    a `border-width` of `4px` and the inherited `height` and `width` (`100px` each,
    not shown here); in the `50%` keyframe (➋), the `border-width` is increased to
    `12px`; and in the final, `100%` keyframe (➌), the `border-width` returns to `4px`
    and both height and width have changed to `100%`.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我无法在这本书中展示动画，所以我将用文字描述它。[图14-8](ch14.html#ch14fig8)展示了元素在动画的三个关键帧状态：`0%`（➊）关键帧显示元素的`border-width`为`4px`，并且继承了`height`和`width`（每个是`100px`，这里未显示）；在`50%`关键帧（➋）中，`border-width`增加到`12px`；在最终的`100%`关键帧（➌）中，`border-width`恢复为`4px`，`height`和`width`都变化为`100%`。
- en: '![Image](graphics/f14-08.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f14-08.jpg)'
- en: '*Figure 14-8: Three stages of an animation affecting the* `*border-width*`,
    `*height*`*, and* `*width*` *properties*'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14-8：影响`*border-width*`、`*height*`和`*width*`属性的动画的三个阶段*'
- en: Because my `animation-direction` value is `alternate`, the animation would then
    play in reverse, shrinking back to its original dimensions, and then continue
    growing and shrinking infinitely because of the value of `animation-iteration-count`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我的 `animation-direction` 值是 `alternate`，所以动画会反向播放，缩回到原始尺寸，然后由于 `animation-iteration-count`
    的值，它会继续无限地增长和缩小。
- en: '***Multiple Animations***'
  id: totrans-212
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***多重动画***'
- en: 'You can add multiple animations to an element using a comma-separated list.
    This method works for each of the subproperties and the shorthand property, so
    both of these examples are valid:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用逗号分隔的列表向一个元素添加多个动画。这种方法适用于每个子属性和简写属性，因此这两个例子都是有效的：
- en: '[PRE48]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Here, lists of values are looped through to ensure that all properties have
    the same number of values applied, in exactly the same way as described in “[Multiple
    Transitions](ch14.html#ch14leve1sec173)” on [page 174](ch14.html#page_174).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，通过循环值列表来确保所有属性应用相同数量的值，方式与[《多重过渡》](ch14.html#ch14leve1sec173)一节中[第174页](ch14.html#page_174)所描述的完全一致。
- en: '**Summary**'
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Adding animations to CSS was originally considered a contentious move, but I
    think the syntax used by the writers of these modules is pretty graceful and adds
    a lot of flexibility without being overwhelmingly complicated.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 向 CSS 中添加动画最初被认为是一个有争议的举动，但我认为这些模块编写者使用的语法相当优雅，增加了许多灵活性而不显得过于复杂。
- en: Developers expressed concern that transitions and animations would be misused
    and that we’d end up with a lot of garish, unusable websites. Although a genuine
    concern, one really can’t stop people from doing that now with the existing CSS
    properties (and, indeed, many do!). But used sparingly and appropriately, these
    powerful new tools can add vibrancy to web pages.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者曾担心过渡和动画会被滥用，导致我们看到大量华而不实、无法使用的网站。尽管这是一个真实的担忧，但现在已有的 CSS 属性其实也无法阻止人们这样做（实际上，许多人就是这么做的！）。不过，若能适度且恰当地使用，这些强大的新工具确实能够为网页增添活力。
- en: '**Transitions and Animations: Browser Support**'
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**过渡和动画：浏览器支持**'
- en: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
- en: '| Transitions | Yes | Yes | Yes | IE10 |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| 过渡 | 是 | 是 | 是 | IE10 |'
- en: '| Animations | Yes^([*](ch14.html#footnote32a)) | Yes | Yes^([*](ch14.html#footnote32a))
    | IE10 |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| 动画 | 是^([*](ch14.html#footnote32a)) | 是 | 是^([*](ch14.html#footnote32a))
    | IE10 |'
- en: '[*](ch14.html#footnote_32a) With vendor prefix'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '[*](ch14.html#footnote_32a) 带供应商前缀'
