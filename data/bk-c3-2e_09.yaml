- en: '**9**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**9**'
- en: '**BORDER AND BOX EFFECTS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**边框和盒子效果**'
- en: '![Image](graphics/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/common-01.jpg)'
- en: The ability to add borders to page elements has been around, almost unchanged,
    since the days of CSS1\. What developers *wanted* to do with borders, however,
    outstripped what they *could* do with them years ago. Adding border effects like
    rounded corners or shadows has probably been responsible for more extraneous empty
    markup elements than almost anything else in the web development world. Things
    that should have been simple often involved some incredibly complex workarounds.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 自CSS1时代以来，向页面元素添加边框的功能几乎没有变化。然而，开发者*想要*在边框上做的事，早在多年前就超出了他们*能够*做到的范围。添加像圆角或阴影这样的边框效果，可能已经导致了比几乎任何其他东西更多不必要的空白标记元素。这些本应简单的事情，往往需要一些非常复杂的解决方案。
- en: The second part of our look at the Backgrounds and Borders Module explores new
    methods of decorating elements without extra markup. You’ll learn how to make
    rounded corners, use images for borders, and add drop shadows.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对背景和边框模块的第二部分探索了不需要额外标记的新方法来装饰元素。你将学习如何制作圆角，使用图片作为边框，以及添加阴影。
- en: '**Giving Your Borders Rounded Corners**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**给元素的边框添加圆角**'
- en: Since the earliest days of the Web, designers have been putting rounded corners
    on page elements. That they’ve had no way to create them without using images
    seems crazy. To create a box of flexible width with four rounded corners has meant
    creating four images and adding at least two extra nonsemantic elements, which
    made maintaining a website much harder than it needed to be.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 自互联网诞生以来，设计师们一直在为页面元素添加圆角。没有办法不使用图片就创建圆角，简直是不可思议。要创建一个具有四个圆角的灵活宽度框，需要制作四张图片并添加至少两个额外的非语义元素，这使得维护一个网站变得比必要的要困难得多。
- en: But no more. The Backgrounds and Borders Module introduces a way to round the
    corners of your elements using CSS alone. Each corner is treated as a quarter
    ellipse, which is defined by a curve that is drawn between a point on the *x*-axis
    and a point on the *y*-axis (you may remember those from [Chapter 6](ch06.html#ch06)).
    [Figure 9-1](ch09.html#ch09fig1) illustrates this more clearly.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在不需要再这样做了。背景和边框模块引入了一种仅使用CSS就能给元素的角落添加圆角的方法。每个角落都被视为四分之一椭圆，其曲线是通过* x *轴上的一个点和*
    y *轴上的一个点之间画出来的（你可能记得这些来自[第 6 章](ch06.html#ch06)）。[图 9-1](ch09.html#ch09fig1)更清楚地说明了这一点。
- en: A quarter ellipse can be *regular*, which means the length along both axes is
    the same, or *irregular*, which means the length along each axis is different.
    [Figure 9-2](ch09.html#ch09fig2) shows examples of both.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 四分之一椭圆可以是*规则的*，即两个轴的长度相同；也可以是*不规则的*，即每个轴上的长度不同。[图 9-2](ch09.html#ch09fig2)展示了两者的例子。
- en: '![Image](graphics/f09-01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f09-01.jpg)'
- en: '*Figure 9-1: A quarter ellipse made by the curve between lengths on the* x-*and*
    y*-axes*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-1：由* x-*轴和* y-*轴之间的曲线形成的四分之一椭圆*'
- en: '![Image](graphics/f09-02.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f09-02.jpg)'
- en: '*Figure 9-2: A regular curve (left) has identical values on both axes; an irregular
    curve has different values on each axis.*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-2：一个规则的曲线（左）在两个轴上的值相同；一个不规则的曲线在每个轴上的值不同。*'
- en: 'CSS3 defines these curves using the `border-radius` property. With this property,
    you can define the radius of the quarter ellipse simply, using the following syntax:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3 使用 `border-radius` 属性定义这些曲线。使用此属性，你可以通过以下语法简单地定义四分之一椭圆的半径：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this syntax, `*v*` is a keyword value of `top` or `bottom`; `*h*` is a keyword
    value of `left` or `right`; and the `*x*` and `*y*` values are lengths along the
    axes that define the curve of the quarter ellipse. That sounds like a mouthful,
    but here’s an example that should make it clearer:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个语法中，`*v*` 是 `top` 或 `bottom` 的关键字值；`*h*` 是 `left` 或 `right` 的关键字值；`*x*` 和
    `*y*` 值是定义四分之一椭圆曲线的轴向长度。这听起来有点复杂，但下面的示例应该能让你更清楚：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This syntax will round the top-right corner of a `div` element with a radius
    of 20px horizontally and vertically, which is a regular curve.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语法会将 `div` 元素的右上角圆角半径设置为20px，水平和垂直方向上都是规则曲线。
- en: 'In fact, for regular curves, `border-radius` lets you simplify even further
    by leaving out either the `*x*` or the `*y*` value; if one value is not specified,
    both are assumed to be equal. So if you want to apply that radius to each corner
    of your element, you use this code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，对于规则的曲线，`border-radius` 让你可以进一步简化，省略 `*x*` 或 `*y*` 的值；如果没有指定一个值，默认两个值相等。所以，如果你想将这个半径应用到元素的每个角落，你可以使用以下代码：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To create a shape with irregular rounded corners, you just use different values
    on the individual properties:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建具有不规则圆角的形状，你只需对各个属性使用不同的值：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can compare the two different code examples in [Figure 9-3](ch09.html#ch09fig3):
    the shape on the left uses the first snippet and has four regular curved corners,
    and on the right is the result of the second snippet with four (equal) irregular
    corners.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图 9-3](ch09.html#ch09fig3)中比较这两个不同的代码示例：左边的形状使用第一个代码片段，具有四个常规圆角，而右边则是第二个代码片段的结果，具有四个（相等的）不规则圆角。
- en: '![Image](graphics/f09-03.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f09-03.jpg)'
- en: '*Figure 9-3: Two elements, one with regular rounded corners (left) and one
    with irregular corners (right)*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-3：两个元素，一个具有常规圆角（左），一个具有不规则圆角（右）*'
- en: '***The border-radius Shorthand***'
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***border-radius 简写***'
- en: 'If having to write a different property for each corner strikes you as quite
    repetitive, you’ll be happy to learn that a shorthand property is available. As
    with `border-width`, `margin`, and `padding`, you can specify one, two, three,
    or four values. Where those values refer to sides, however, the `border-radius`
    values refer to corners, starting at the top left:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果每个角都写不同的属性让你觉得很重复，你会很高兴地发现有一种简写属性可用。像`border-width`、`margin`和`padding`一样，你可以指定一个、两个、三个或四个值。不过，虽然这些值在边缘上有特定的指代，但`border-radius`的值是指角，顺序从左上角开始：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'So if I want to apply a value of 20px to the top-left and top-right corners
    of a `div`, and 10px to the bottom-right and bottom-left corners, here’s the code
    I use:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果我想对一个`div`的左上角和右上角应用20px的值，对右下角和左下角应用10px的值，以下是我使用的代码：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**NOTE**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Using the shorthand syntax like this only creates regular rounded corners;
    I’ll cover the shorthand for irregular corners momentarily.*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用这种简写语法只会创建常规的圆角；稍后我会介绍不规则圆角的简写方式。*'
- en: 'To illustrate the shorthand property in action, I’ll apply rules to three elements,
    each time with a different set of values:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示简写属性的实际应用，我将对三个元素应用规则，每次使用不同的一组值：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can see the results in [Figure 9-4](ch09.html#ch09fig4). The first (left)
    box has two values for `border-radius`: The top-left and bottom-right corners
    have a value of 0, so are square, but the top-right and bottom-left are rounded
    with a radius of 20px. The second (middle) box has three values: The top-left
    corner is once again square, but now the top-right and bottom-left corners have
    a 10px radius, and the bottom-right corner has a value of 20px. Finally, the third
    (right) box has four values: The top-left and top-right corners have a value of
    0, so are squared, whereas the bottom-right and bottom-left have radii of 20px.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图 9-4](ch09.html#ch09fig4)中查看结果。第一个（左）框有两个`border-radius`值：左上角和右下角的值为0，因此是方形的，而右上角和左下角则有20px的圆角。第二个（中）框有三个值：左上角依然是方形的，但现在右上角和左下角有10px的圆角，而右下角的半径为20px。最后，第三个（右）框有四个值：左上角和右上角的值为0，因此是方形的，而右下角和左下角有20px的圆角。
- en: '![Image](graphics/f09-04.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f09-04.jpg)'
- en: '*Figure 9-4: Effects of different values for the* `*border-radius*` *shorthand
    property*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-4：不同值对* `*border-radius*` *简写属性的影响*'
- en: 'You can also use the shorthand syntax with irregular curves. To achieve this
    effect, you list the values separated by a slash (`/`):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用简写语法来处理不规则的曲线。为了实现这一效果，你需要用斜杠（`/`）分隔不同的值：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Each side of the slash can contain between one and four values, as with the
    shorthand for regular curves. This means, for example, you could have one value
    for the horizontal radius and four separate values for the vertical radii. Again,
    I’ll illustrate what this looks like with some examples:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 每个斜杠的两侧可以包含一个到四个值，就像常规圆角的简写一样。这意味着，举例来说，你可以为水平半径指定一个值，并为垂直半径指定四个不同的值。接下来，我将通过一些示例来展示这是什么样子：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[Figure 9-5](ch09.html#ch09fig5) shows the results. The first (left) box has
    four equal corners of 20px horizontal and a 10px vertical radius. The second (middle)
    box has two corners of 20px/10px and two of 20px/20px. The third (right) box has
    a top-left corner of 10px/20px, a top-right and a bottom-left corner of 20px/10px,
    and a bottom-right corner of 20px/20px.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 9-5](ch09.html#ch09fig5)显示了结果。第一个（左）框有四个相等的角，水平半径为20px，垂直半径为10px。第二个（中）框有两个角的半径为20px/10px，另外两个角的半径为20px/20px。第三个（右）框的左上角为10px/20px，右上角和左下角为20px/10px，右下角为20px/20px。'
- en: '![Image](graphics/f09-05.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f09-05.jpg)'
- en: '*Figure 9-5: Irregular rounded corners produced with the* `*border-radius*`
    *shorthand property*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-5：通过`*border-radius*`简写属性生成的不规则圆角*'
- en: '***Using Percentage Values***'
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用百分比值***'
- en: 'The examples so far in this chapter use length units, but you can also define
    `border-radius` using a percentage value, which is the percentage of the length
    of the side of the element it’s applied to. You’ll find this especially handy
    if you want to make a perfect circle in CSS: A square element with four equal
    curves of half of each side creates a perfectly round element.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的示例使用了长度单位，但你也可以使用百分比值来定义`border-radius`，即它应用于元素一边的长度百分比。如果你想在CSS中制作一个完美的圆形，这将特别有用：一个具有四个相等曲率的正方形元素，每个曲率都是边长的一半，能创造一个完美的圆形元素。
- en: 'The next example shows two elements with the same percentage `borderradius`
    value (50%) applied to each corner. Both have the same height, but one is twice
    as wide as the other:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例展示了两个元素，它们在每个角上都应用了相同的百分比`borderradius`值（50%）。这两个元素的高度相同，但一个的宽度是另一个的两倍：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The result is shown in [Figure 9-6](ch09.html#ch09fig6). The element on the
    left has the wider length, so the rounding of the corners creates an ellipse.
    On the right, the element has equal height and width, resulting in a perfect sphere.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如[图 9-6](ch09.html#ch09fig6)所示。左边的元素长度较宽，因此角落的圆角形成了一个椭圆。右边的元素具有相等的高度和宽度，结果是一个完美的球形。
- en: '![Image](graphics/f09-06.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f09-06.jpg)'
- en: '*Figure 9-6: Percentage values on* `*border-radius*` *create an ellipse (left)
    and a circle (right).*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-6：在`*border-radius*`上使用百分比值生成椭圆（左）和圆形（右）。*'
- en: '**Using Images for Borders**'
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用图像作为边框**'
- en: Another common way to style elements is to use background images as decorative
    borders. With CSS2, however, you had no way to achieve this, and you had to use
    a lot of extra markup to get the desired effect, with a subsequent penalty on
    semantics and maintainability. CSS3 introduces a series of properties that provide
    a simple syntax to apply decorative borders.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种常见的元素样式化方法是使用背景图像作为装饰性边框。然而，在CSS2中，你无法实现这一点，你不得不使用大量额外的标记来实现期望的效果，导致语义和可维护性方面的损失。CSS3引入了一系列属性，提供了一种简洁的语法来应用装饰性边框。
- en: '***border-image-source***'
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***border-image-source***'
- en: 'The first property, `border-image-source`, sets the source of the image that
    will be used for the border—but you probably guessed that. It takes a single value,
    which is an image data type; for most browsers that’s only the `url()` function.
    Here’s an example of `border-image-source`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个属性`border-image-source`设置将用于边框的图像来源——不过你可能已经猜到了。它接受一个值，该值是图像数据类型；对于大多数浏览器，这个值通常是`url()`函数。以下是`border-image-source`的一个示例：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**NOTE**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*This property should also accept gradient functions (see [Chapter 11](ch11.html#ch11))
    as values, but currently only Chrome and Firefox support that use.*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*该属性还应该接受渐变函数（参见[第11章](ch11.html#ch11)）作为值，但目前只有Chrome和Firefox支持这种用法。*'
- en: '***border-image-slice***'
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***border-image-slice***'
- en: Once you have the source of the image for the border, you need to slice it.
    The `border-image-slice` property accepts between one and four values, each of
    which maps to a side of an element, similar to `margin`, `padding`, `border-radius`,
    and so on. These values are used to set a distance from each edge of the image,
    marking the area used to “frame” the element.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你确定了用于边框的图像来源，你就需要对其进行切片。`border-image-slice`属性接受一个到四个值，每个值对应元素的一个边，类似于`margin`、`padding`、`border-radius`等。这些值用于设置从图像每个边缘到“框住”元素的距离。
- en: 'I’m aware that’s probably a little confusing, so I’ll explain with an example.
    Take a look at this code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道这可能有点让人困惑，所以我会用一个示例来解释。看看这段代码：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Note here that no units are used on the number value. The number serves two
    purposes: for bitmap images (such as JPG or PNG), the units are pixel values;
    but for vector images (such as SVG), they are coordinate values. You could also
    use percentage values as an alternative.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这里没有使用单位值。这个数字有两个用途：对于位图图像（如JPG或PNG），单位是像素值；但对于矢量图像（如SVG），它们是坐标值。你也可以使用百分比值作为替代。
- en: 'In my example code, I provided only a single value, which sets the area I want
    to slice: 34px from the top, right, bottom, and left. Take a look at [Figure 9-7](ch09.html#ch09fig7),
    which shows how this value is used to divide the source image into nine segments:
    four corners (c1, c2, and so on), four sides (known as *slices*—slice1, slice2,
    and so on), and the central fill. Each of these slices will be placed onto the
    border of a target element in the equivalent positions.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的示例代码中，我只提供了一个单一的值，设置了我想要切割的区域：顶部、右侧、底部和左侧各34px。请看[图 9-7](ch09.html#ch09fig7)，它展示了这个值如何将源图像分成九个部分：四个角落（c1、c2等），四个边（称为*切片*—slice1、slice2等），以及中央的填充部分。每个切片将被放置到目标元素的边框上，位于相应的位置。
- en: With the source image and slices defined, now I just have to set a border on
    the element to apply a border image. The image will be applied to the area created
    by the border, so in the following code example, I define a 34px border on the
    top and bottom, and 10px on the left and right.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了源图像和切片之后，现在我只需要给元素设置一个边框来应用边框图像。图像将应用于边框所创建的区域，因此在下面的代码示例中，我定义了上下边框为34px，左右边框为10px。
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![Image](graphics/f09-07.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f09-07.jpg)'
- en: '*Figure 9-7: Where the specified values in* `*border-image*` *will slice the
    image*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-7：在`*border-image*`中指定的值将如何切割图像*'
- en: 'You can see in [Figure 9-8](ch09.html#ch09fig8) how this code is applied: the
    top and bottom image slices have the same height as the top and bottom borders,
    so the image is applied at its natural height, whereas the left and right slices
    are applied to borders that are less than half their width, so the image is squashed
    to fit. The corner slices are distorted to fit the two different dimensions.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图 9-8](ch09.html#ch09fig8)中看到这段代码是如何应用的：上下的图像切片与上下边框的高度相同，因此图像按其自然高度应用，而左右切片则应用于宽度不到其一半的边框，因此图像会被压缩以适应。角落的切片则会扭曲以适应两个不同的尺寸。
- en: '![Image](graphics/f09-08.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f09-08.jpg)'
- en: '*Figure 9-8: Here, 34px image slices are applied to a border of 34px horizontally
    and 10px vertically.*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-8：这里，34px的图像切片应用于34px宽、10px高的边框。*'
- en: The default behavior of border images is to use only the slices and corners
    on the border, leaving the center of the element blank for its own background
    properties to be shown. The `border-image-slice` property has an optional keyword
    value of `fill`, however; if the `fill` keyword is included, the area of the image
    inside the slices will be applied over the background of the element in the appropriate
    place.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 边框图像的默认行为是仅使用边框上的切片和角落，将元素的中心留空，显示其背景属性。`border-image-slice`属性有一个可选的关键字值`fill`，如果包含`fill`关键字，图像切片内的区域将应用于元素背景的适当位置。
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[Figure 9-9](ch09.html#ch09fig9) shows a comparison of an element with a border
    image, with and without the `fill` keyword.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 9-9](ch09.html#ch09fig9)展示了一个带有边框图像的元素的比较，分别是带有和不带有`fill`关键字的情况。'
- en: '**NOTE**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Filling the element with* `*border-image-slice*` *means you have no control
    over the fill sizing and can leave it quite distorted, so consider carefully if
    you want to use this rather than* `*background-image*`.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用`*border-image-slice*`填充元素意味着你无法控制填充的大小，可能会导致其被严重扭曲，因此在选择使用这种方式而不是`*background-image*`时，需要仔细考虑。*'
- en: '![Image](graphics/f09-09.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f09-09.jpg)'
- en: '*Figure 9-9: Left to right: the source image, applied as a border image, and
    with the* `*fill*` *keyword value*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-9：从左到右：源图像，作为边框图像应用，及带有*`*fill*`*关键字值的效果*'
- en: '***border-image-width***'
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***border-image-width***'
- en: 'As you saw in [Figure 9-8](ch09.html#ch09fig8), border image slices are stretched
    or condensed to fit the width of the element’s border; for example, if the element
    has a border that’s 10px wide but your slices are 40px wide, each slice will be
    condensed to a quarter of its height or width in order to fit. You can control
    this by using the `border-image-width` property:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在[图 9-8](ch09.html#ch09fig8)中看到的，边框图像的切片会根据元素边框的宽度进行拉伸或压缩；例如，如果元素的边框宽度为10px，但你的切片宽度为40px，每个切片将被压缩到其高度或宽度的四分之一，以适应。你可以通过使用`border-image-width`属性来控制这一点：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Like `border-width` or `border-image-slice`, the *value* here can actually be
    up to four values, to match the sides of the element, and each can be a length,
    a percentage, or a unitless number.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 像`border-width`或`border-image-slice`一样，这里的*值*实际上可以有最多四个值，以匹配元素的四个边，每个值可以是长度、百分比或无单位的数字。
- en: 'The `*value*` creates a “virtual” border on the element, by which I mean it
    has no impact on page layout or flow; unlike `border-width`, the border that `*value*`
    creates is visual only and has no effect on the box model. To illustrate the difference,
    take a look at this code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`*value*`创建了一个“虚拟”边框，意思是它对页面布局或流动没有影响；与`border-width`不同，`*value*`创建的边框仅仅是视觉效果，对盒子模型没有影响。为了说明区别，请看这段代码：'
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can see how this compares in [Figure 9-10](ch09.html#ch09fig10): The element
    on the left has a border of 34px on each side and no explicit `border-image-width`
    value, so the text content starts inside the border as you’d expect; the element
    on the right, however, has only a 1px border but a `border-image-width` value
    of 34px. Although the image slices are applied in the same way, the text content
    sits over the top of the “virtual” border in the element on the right.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图9-10](ch09.html#ch09fig10)中看到这个比较：左侧的元素每边有34px的边框，并且没有显式的`border-image-width`值，因此文本内容从边框内侧开始显示；然而右侧的元素只有1px的边框，但其`border-image-width`值为34px。尽管图像片段的应用方式相同，右侧的文本内容却位于“虚拟”边框的顶部。
- en: '![Image](graphics/f09-10.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f09-10.jpg)'
- en: '*Figure 9-10: Comparing a* `*border-width*` *value of 34px (left) with a* `*border-image-width*`
    *value of 34px (right)*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-10：比较`*border-width*`值为34px（左）与`*border-image-width*`值为34px（右）的情况*'
- en: 'If you use a unitless number it acts as a multiplier of an existing `border-width`
    value; in the following code, the `border-image-width` will be equivalent to 20px:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用一个无单位的数字，它会作为现有`border-width`值的乘数；在以下代码中，`border-image-width`将等于20px：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '***border-image-outset***'
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***border-image-outset***'
- en: 'By default, a border image starts displaying from the outside of the border
    box, moving in toward the content box; but you can change this default behavior
    by outsetting the image to start from outside the border box. You do this with
    the `border-image-outset` property, which takes (the by now customary) four possible
    length values, one for each side. For example, to outset the border image by 10px
    from the top and bottom and 5px from the left and right, you use this rule:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，边框图像从边框盒子的外侧开始显示，逐渐向内容盒子内部移动；但是你可以通过外扩图像，让它从边框盒子的外部开始。你可以使用`border-image-outset`属性来改变这种默认行为，它接受（现在通常使用的）四个可能的长度值，每个值对应边的一个方向。例如，要将边框图像从上下各外扩10px，从左右各外扩5px，你可以使用以下规则：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You can see a comparison of this in [Figure 9-11](ch09.html#ch09fig11); the
    element on the left has the default `border-image-outset` value of 0, whereas
    the element on the right has the value shown in the code example; although each
    has an identical box size, the border image on the right is greatly outset from
    the content (and even overlaps the element on the left).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图9-11](ch09.html#ch09fig11)中看到这个比较；左侧的元素使用了默认的`border-image-outset`值0，而右侧的元素使用了代码示例中显示的值；尽管它们的盒子大小相同，右侧的边框图像明显外扩，甚至覆盖了左侧的元素。
- en: '![Image](graphics/f09-11.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f09-11.jpg)'
- en: '*Figure 9-11: The element on the right has an outset border image.*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-11：右侧的元素有一个外扩的边框图像。*'
- en: '***border-image-repeat***'
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***border-image-repeat***'
- en: 'One more property is related to border images: `border-image-repeat`. This
    property controls how the image fits the length of each side between the corners:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个与边框图像相关的属性是：`border-image-repeat`。此属性控制图像如何适配每个边框的长度：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'It accepts one of three keyword values: `stretch` (the default), `repeat`,
    and `round`. All of the example illustrations so far in this chapter used the
    default value (`stretch`), where the image slice is stretched to fill the length
    of the border. Using `repeat` applies the slice at its natural length, repeating
    the slice until it fills the length of the border it is applied to; so the slice
    could be cut off if it didn’t fit into the length a whole number of times. The
    final value, `round`, behaves like `repeat` except it scales the slice up or down
    to best fit the length of the border, without being cut off.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 它接受三种关键字值中的一个：`stretch`（默认值）、`repeat`和`round`。本章迄今为止所有的示例插图都使用了默认值（`stretch`），即图像片段被拉伸以填满边框的长度。使用`repeat`时，图像片段按其自然长度进行应用，并重复直到填满所应用的边框的长度；因此，如果图像片段不能正好适配边框的长度，可能会被切掉。最后一个值`round`，表现得像`repeat`，只不过它会根据需要将图像片段缩放，以最适合边框的长度，而不会被切掉。
- en: That’s easier done than said, so you can see the difference in these three values
    in [Figure 9-12](ch09.html#ch09fig12). These three elements have the same values
    applied to all of the `border-image` properties, except for `border-image-repeat`.
    For this property, the first element has the default value, `stretch`; the second,
    `repeat`; and the final element, `round`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这比说起来更容易理解，所以你可以在[图9-12](ch09.html#ch09fig12)中看到这三个值的不同。这三个元素应用了所有`border-image`属性相同的值，除了`border-image-repeat`。对于这个属性，第一个元素使用默认值`stretch`，第二个元素使用`repeat`，最后一个元素使用`round`。
- en: '![Image](graphics/f09-12.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图像](graphics/f09-12.jpg)'
- en: '*Figure 9-12: Different* `*border-image-repeat*` *values: (from left to right)*
    `*stretch*`, `*repeat*`, `*round*`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-12：不同的* `*border-image-repeat*` *值：（从左到右）* `*stretch*`，`*repeat*`，`*round*`'
- en: 'I said a few paragraphs ago that `border-image-repeat` accepts one of three
    keyword values, but that’s not actually correct; I only said it to make the subsequent
    explanation a little clearer. I hope you can forgive me for misleading you. In
    fact, you can use two of the three keyword values on the property; the first controls
    horizontal repetition, the second, vertical. So if you want to stretch your element
    along the top and bottom borders and round it along the left and right, you use
    this rule:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我在前几段中提到过，`border-image-repeat`接受三种关键字值之一，但那并不完全准确；我只是为了让后续的解释更清晰才这么说的。希望你能原谅我误导了你。事实上，你可以在这个属性上使用三个关键字值中的两个；第一个控制水平重复，第二个控制垂直重复。所以，如果你希望在上下边框上拉伸元素，并在左右边框上使其圆角，你可以使用如下规则：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '***The border-image Shorthand Property***'
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***border-image 简写属性***'
- en: 'To save time and keystrokes, you can use the `border-image` shorthand for all
    of the properties just described. The syntax looks like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了节省时间和减少键入，你可以使用`border-image`简写来设置前面描述的所有属性。语法如下所示：
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following code example shows all of the individual properties applied to
    an element and then the same properties applied to another element using the shorthand
    property:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例展示了所有单独的属性应用于一个元素的效果，然后使用简写属性将相同的属性应用于另一个元素：
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: That’s quite the space saver.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以节省不少空间。
- en: '***Browser Support***'
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***浏览器支持***'
- en: All of the `border-image` properties in this section are supported in Chrome,
    Firefox, Safari 6+, and Internet Explorer 11+. Some older browsers—notably mobile
    Safari 5.1 and below, and the stock browser in Android 4.3 and below—do support
    border images, but only using the `border-image` shorthand and, even then, without
    the `border-image-width` and `border-image-outset` properties.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的所有`border-image`属性在Chrome、Firefox、Safari 6+和Internet Explorer 11+中都得到支持。一些较老的浏览器——特别是移动版Safari
    5.1及以下版本，以及Android 4.3及以下版本的默认浏览器——支持边框图像，但仅支持使用`border-image`简写，并且在这种情况下，`border-image-width`和`border-image-outset`属性不被支持。
- en: '**Drop Shadows**'
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**投影阴影**'
- en: 'In [Chapter 6](ch06.html#ch06), we looked at a way to add drop shadows to text
    with the `text-shadow` property, but CSS3 also has a method for adding shadows
    to box elements. You use the `box-shadow` property; the syntax is similar to that
    of `text-shadow`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](ch06.html#ch06)中，我们探讨了使用`text-shadow`属性为文本添加投影阴影的方法，但CSS3也有一种为盒子元素添加阴影的方法。你可以使用`box-shadow`属性；其语法与`text-shadow`类似：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The first value, `inset`, is an optional keyword that sets whether the shadow
    sits inside or outside of the element. I explain this in more detail in the next
    section; for now, all you need to know is that if `inset` is not specified, the
    shadow sits outside the element. The next two values are, just as with `text-shadow`,
    lengths that set the `*horizontal*` and `*vertical*` distance of the shadow from
    the box; if you want to have a shadow, these values are required.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个值，`inset`，是一个可选的关键字，用于设置阴影是在元素内部还是外部。我会在下一节中更详细地解释这个概念；目前你只需要知道，如果没有指定`inset`，阴影将位于元素的外部。接下来的两个值，与`text-shadow`一样，是设置阴影相对于盒子在`*水平*`和`*垂直*`方向上的距离；如果你希望有阴影，这些值是必需的。
- en: The next value sets the `*blur-radius*` and is another length value and, again,
    works exactly as in `text-shadow`. Then you have `*spread*`, yet another length
    value, which sets the distance the shadow spreads. A positive length makes the
    shadow larger than its element, and a negative length makes it smaller. Both `*blur-radius*`
    and `*spread*` are optional.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个值设置`*模糊半径*`，它是另一个长度值，同样，和`text-shadow`的作用完全相同。接下来是`*扩展*`，它是另一个长度值，用于设置阴影的扩展距离。正的长度使阴影比元素本身更大，而负的长度则使阴影更小。`*模糊半径*`和`*扩展*`都是可选的。
- en: Finally you have the `*color*` value, also optional, which, if left unspecified,
    defaults to the inherited color (usually black).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你有`*color*`值，这也是可选的，如果未指定，则默认继承颜色（通常为黑色）。
- en: 'Now I’ll put these together in an example. The next code snippet creates a
    dark-gray shadow outside of the element, positioned at a distance of 4px, both
    horizontally and vertically, with a blur radius of 3px:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我将通过一个示例将这些内容结合起来。接下来的代码片段创建了一个深灰色的阴影，位于元素的外部，水平和垂直距离为 4px，模糊半径为 3px：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the next code snippet, I demonstrate further examples of the effects of different
    values on the `box-shadow` property. The results are shown in [Figure 9-13](ch09.html#ch09fig13).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个代码片段中，我将演示不同值对`box-shadow`属性的进一步影响。效果显示在[图 9-13](ch09.html#ch09fig13)中。
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![Image](graphics/f09-13.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f09-13.jpg)'
- en: '*Figure 9-13: The effects of using different values for the* `*box-shadow*`
    *property*'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-13：使用不同的`*box-shadow*`属性值的效果*'
- en: The elements in the code correspond to the boxes in [Figure 9-13](ch09.html#ch09fig13),
    moving from left to right. The first is the simplest shadow, simply distanced
    4px both horizontally and vertically from the element, using the inherited color.
    The second has the same distance values as the first but also adds a blur radius
    of 3px to soften the shadow’s edges. The third has a distance of 12px along both
    axes but a negative spread value (−6px), which makes the shadow smaller than its
    box. The fourth example has a medium gray–colored shadow with a negative vertical
    distance, meaning the shadow falls above the element instead of below it.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中的元素对应于[图 9-13](ch09.html#ch09fig13)中的框，按从左到右的顺序排列。第一个是最简单的阴影，距离元素水平和垂直 4px，使用继承的颜色。第二个与第一个的距离值相同，但还添加了
    3px 的模糊半径，以柔化阴影的边缘。第三个的水平和垂直距离为 12px，但具有负的扩展值（-6px），使得阴影比框体小。第四个示例具有中等灰色的阴影，并且垂直距离为负值，这意味着阴影出现在元素的上方，而不是下方。
- en: The fifth box has two shadows applied to it, with each set of values separated
    by a comma. The first value set is the same as in the fourth box, and the second
    makes a black (or inherited color) shadow with a negative horizontal distance,
    causing the shadow to fall to the left of the box.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 第五个框应用了两个阴影，每组值用逗号分隔。第一组值与第四个框相同，第二组值创建了一个黑色（或继承的颜色）阴影，水平距离为负值，导致阴影出现在框的左侧。
- en: '**Inset Shadows**'
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**内凹阴影**'
- en: I briefly mentioned the optional `inset` keyword at the beginning of the previous
    section. If present, this keyword draws a shadow on the interior of the box, but
    it also has the effect of “flipping” the shadow to the other side of the box.
    What I mean is that where a regular—that is, *outset*—shadow with positive *x*
    and *y* values would appear at the bottom right of the box, an inset shadow would
    appear at the top left.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我在前一节开始时简要提到了可选的`inset`关键字。如果存在该关键字，它会在框的内部绘制阴影，但它也会产生“翻转”阴影到框的另一侧的效果。我的意思是，常规的—即
    *外部*—阴影，具有正的 *x* 和 *y* 值时，会出现在框的右下角，而内凹阴影则会出现在框的左上角。
- en: 'To illustrate, I’ll use the same code as for the previous example but add the
    `inset` keyword to each one:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一点，我将使用与之前示例相同的代码，但在每个例子中都添加`inset`关键字：
- en: '[PRE25]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The result is shown in [Figure 9-14](ch09.html#ch09fig14), and as you can see,
    it’s almost the inverse of [Figure 9-13](ch09.html#ch09fig13); all offset, blur
    radius, and color values are the same, but the shadows now appear on the interior
    of the boxes, and in the opposite corners.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示在[图 9-14](ch09.html#ch09fig14)中，正如你所看到的，它几乎是[图 9-13](ch09.html#ch09fig13)的反向效果；所有的偏移、模糊半径和颜色值都相同，但阴影现在出现在框的内部，并且位于相反的角落。
- en: '![Image](graphics/f09-14.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f09-14.jpg)'
- en: '*Figure 9-14: Inset shadows*'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-14：内凹阴影*'
- en: The `box-shadow` property is broadly implemented, with unprefixed support in
    IE9+ and all other modern browsers. The `-webkit-` prefix is required for older
    versions of Safari for iOS and the stock Android browser.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`box-shadow`属性得到了广泛实现，在 IE9+ 及所有其他现代浏览器中无需前缀支持。旧版本的 iOS Safari 和 Android 默认浏览器需要使用`-webkit-`前缀。'
- en: '**Summary**'
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: I mentioned at the beginning of the previous chapter that the Backgrounds and
    Borders Module became a priority for the W3C because of the clamor from web developers.
    The new properties it introduces are extremely handy for removing extraneous elements
    used as containers for purely visual styling from markup, giving developers finer
    control over the way pages are presented. With a multitude of new background and
    border properties at our disposal, creating websites that can be viewed at many
    different sizes and resolutions is going to be much easier, and our sites will
    be more suited to the cross-platform ideal of the age.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我在前一章的开头提到，背景和边框模块之所以成为 W3C 的优先事项，是因为网页开发者的强烈呼声。它引入的新属性对于移除仅用于视觉样式的容器元素非常有用，这些容器元素通常在标记中多余，给开发者提供了更精细的页面呈现控制。随着我们可以使用许多新的背景和边框属性，创建能够在多种尺寸和分辨率下查看的网站将变得更加容易，我们的网站也将更加符合跨平台的理想。
- en: In the next chapter, I continue with the theme of page decoration, as we take
    a look at the new color and opacity controls that CSS3 provides.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我将继续讲解页面装饰主题，重点介绍 CSS3 提供的新颜色和透明度控制。
- en: '**Border and Box Effects: Browser Support**'
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**边框和盒子效果：浏览器支持**'
- en: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
- en: '| `border-radius` | Yes | Yes | Yes | Yes |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `border-radius` | 是 | 是 | 是 | 是 |'
- en: '| `border-image` | Yes | Yes | Yes | IE11 |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `border-image` | 是 | 是 | 是 | IE11 |'
- en: '| `box-shadow` | Yes | Yes | Yes | Yes |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `box-shadow` | 是 | 是 | 是 | 是 |'
