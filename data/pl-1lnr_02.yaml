- en: Chapter 3. Numbering
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3章 编号
- en: In this chapter, we’ll look at various one-liners for numbering lines and words,
    and you’ll get to know the `$.` special variable. You’ll also learn about Perl
    golfing, a “sport” that involves writing the shortest Perl program to get a task
    done.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍各种用于为行和单词编号的单行命令，你还将了解`$.`这个特殊变量。你还会学习到Perl高尔夫，一种“运动”，它要求编写最短的Perl程序来完成任务。
- en: 3.1 Number all lines in a file
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.1 在文件中为所有行编号
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As I explained in one-liner 2.1 (page 7), `-p` tells Perl to assume a loop around
    the program (specified by `-e`) that reads each line of input into the `$_` variable,
    executes the program, and then prints the contents of the `$_` variable.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在单行命令 2.1（第7页）中解释的那样，`-p`告诉Perl假设程序（由`-e`指定）周围有一个循环，它读取输入的每一行到`$_`变量中，执行程序，然后打印`$_`变量的内容。
- en: This one-liner simply modifies `$_` by prepending the `$.` variable to it. The
    special variable `$.` contains the current line number of the input. The result
    is that each line has its line number prepended.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令仅通过将`$.`变量附加到`$_`上来修改`$_`。特殊变量`$.`包含输入的当前行号。结果是，每一行的行号都会被添加到行首。
- en: 'Similarly, you can also use the `-n` argument and print the string `"$. $_"`,
    which is the current line number followed by the line:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你也可以使用`-n`参数并打印字符串`"$. $_"`，即当前行号后跟该行内容：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Say a file contains three lines:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个文件包含三行：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Running this one-liner numbers them:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个单行命令会为它们编号：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 3.2 Number only non-empty lines in a file
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.2 在文件中仅为非空行编号
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here you employ an “action if condition” statement that executes an action only
    if the condition is true. In this case, the condition is the regular expression
    `/./`, which matches all characters other than newline (that is, it matches a
    non-empty line). The action `$_ = ++$x." $_"` prepends the variable `$x` incremented
    by one to the current line. Because you’re not using the `strict` pragma, `$x`
    is created automatically the first time it’s incremented.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你使用了“条件成立时执行操作”语句，该语句只有在条件为真时才会执行操作。在这种情况下，条件是正则表达式`/./`，它匹配所有非换行符的字符（即，匹配非空行）。操作`$_
    = ++$x." $_"`将变量`$x`（递增后）附加到当前行的前面。由于没有使用`strict` pragma，变量`$x`在第一次递增时会自动创建。
- en: The result is that at each non-empty line `$x` is incremented by one and prepended
    to that line. Nothing is modified at the empty lines, and they are printed as
    is.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，在每个非空行上，变量`$x`会递增，并被添加到该行的前面。空行不会被修改，且原样打印。
- en: 'One-liner 2.2 (page 11) shows another way to match non-empty lines through
    the `\S` regular expression:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 单行命令 2.2（第11页）展示了通过正则表达式`\S`匹配非空行的另一种方法：
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Say a file contains four lines, two of which are empty:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个文件包含四行，其中两行是空的：
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Running this one-liner numbers only lines one and four:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个单行命令只为第一行和第四行编号：
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 3.3 Number and print only non-empty lines in a file (drop empty lines)
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.3 在文件中为非空行编号并打印（删除空行）
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This one-liner uses the `-n` program argument, which places the line in the
    `$_` variable and then executes the program specified by `-e`. Unlike `-p`, `-n`
    does not print the line after executing the code in `-e`, so you have to call
    `print` explicitly to print the contents of the `$_` variable.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令使用了`-n`程序参数，它将行放入`$_`变量中，然后执行由`-e`指定的程序。与`-p`不同，`-n`在执行完`-e`中的代码后不会自动打印行，因此你需要显式调用`print`来打印`$_`变量的内容。
- en: The one-liner calls `print` only on lines with at least one character, and as
    in the previous one-liner, it increments the line number in the variable `$x`
    by one for each non-empty line. The empty lines are ignored and never printed.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令只在含有至少一个字符的行上调用`print`，与前一个单行命令一样，它会为每个非空行将行号保存在变量`$x`中并递增。空行会被忽略，不会被打印。
- en: 'Say a file contains the same four lines as in one-liner 3.2:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个文件包含和单行命令 3.2 相同的四行：
- en: '[PRE9]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Running this one-liner drops the empty lines and numbers lines one and four:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个单行命令会删除空行，并为第一行和第四行编号：
- en: '[PRE10]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 3.4 Number all lines but print line numbers only for non-empty lines
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.4 为所有行编号，但仅为非空行打印行号
- en: '[PRE11]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This one-liner is similar to one-liner 3.2\. Here, you modify the `$_` variable
    that holds the entire line only if the line has at least one character. All other
    empty lines are printed as is, without line numbers.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令与单行命令 3.2 类似。在这里，只有当行中至少包含一个字符时，才会修改保存整行的`$_`变量。所有其他空行会原样打印，不带行号。
- en: 'Say a file contains four lines:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个文件包含四行：
- en: '[PRE12]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Running this one-liner numbers all the lines but prints the line numbers only
    for lines one and four:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个单行命令会为所有行编号，但只打印第一行和第四行的行号：
- en: '[PRE13]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 3.5 Number only lines that match a pattern; print others unmodified
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.5 仅编号匹配模式的行；打印其余行原样
- en: '[PRE14]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here, again, you use an “action if condition” statement, and again the condition
    is a pattern (a regular expression): `/regex/`. The action is the same as in one-liner
    3.2.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，依然使用了“条件下的动作”语句，条件仍然是一个模式（正则表达式）：`/regex/`。动作与单行命令3.2中的相同。
- en: 'Say a file contains these lines:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个文件包含以下行：
- en: '[PRE15]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'and you want to number the lines that contain the word *record*. You can replace
    `/regex/` in the one-liner with `/record/`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想为包含*record*一词的行编号，可以将单行命令中的`/regex/`替换为`/record/`：
- en: '[PRE16]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'When you run this one-liner, it gives you the following output:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个单行命令时，它会给你以下输出：
- en: '[PRE17]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 3.6 Number and print only lines that match a pattern
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.6 只编号并打印匹配模式的行
- en: '[PRE18]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This one-liner is almost exactly like one-liner 3.3, except it only numbers
    and prints lines that match `/regex/`. It doesn’t print nonmatching lines.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令几乎与单行命令3.3完全相同，只是它仅编号并打印匹配`/regex/`的行。它不会打印不匹配的行。
- en: 'For example, a file contains the same lines as in one-liner 3.5:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个文件包含与单行命令3.5中相同的行：
- en: '[PRE19]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'And let’s say you want to number and print only the lines that contain the
    word *record*. In this case, changing `/regex/` to `/record/` and running the
    one-liner gives you this result:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你只想编号并打印包含*record*一词的行。在这种情况下，改变`/regex/`为`/record/`并运行单行命令将得到如下结果：
- en: '[PRE20]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 3.7 Number all lines but print line numbers only for lines that match a pattern
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.7 为所有行编号，但只对匹配特定模式的行打印行号
- en: '[PRE21]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This one-liner is similar to one-liners 3.4 and 3.6\. Here, the line number
    is prepended to the line if the line matches a `/regex/`; otherwise, it’s simply
    printed without a line number.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令类似于单行命令3.4和3.6。在这里，如果某一行匹配`/regex/`，则在该行前面加上行号；否则，该行将不带行号直接打印。
- en: 'Replacing `/regex/` with `/record/` and running this one-liner on the same
    example file shown in one-liner 3.6 gives you this output:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 将`/regex/`替换为`/record/`并在与单行命令3.6相同的示例文件上运行此单行命令将给出如下输出：
- en: '[PRE22]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 3.8 Number all lines in a file using a custom format
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.8 使用自定义格式为文件中的所有行编号
- en: '[PRE23]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This one-liner uses `printf` to print the line number together with the line
    contents. `printf` does formatted printing. You specify the format and send it
    the data to print, and it formats and prints the data accordingly. Here, the format
    for the line numbers is `%-5d`, which aligns the line numbers five positions to
    the left.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令使用`printf`打印行号和行内容。`printf`进行格式化输出。你指定格式并将数据传递给它，然后它会根据格式打印数据。这里，行号的格式是`%-5d`，它将行号左对齐，占据五个字符的位置。
- en: Here’s an example. Say the input to this one-liner is
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例。假设这个单行命令的输入是
- en: '[PRE24]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Then the output is
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然后输出如下：
- en: '[PRE25]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Other format strings include `%5d`, which aligns the line numbers five positions
    to the right, and `%05d`, which zero-fills and right-justifies the line numbers.
    Here’s the output you get with the `%5d` format string for line numbers:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 其他格式字符串包括`%5d`，它将行号右对齐，位置宽度为五个字符，以及`%05d`，它用零填充并右对齐行号。以下是使用`%5d`格式字符串打印行号的输出：
- en: '[PRE26]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'And this is what you get with the `%05d` format string:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用`%05d`格式字符串得到的输出：
- en: '[PRE27]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: To learn more about the various formats that are available, run `perldoc -f
    sprintf` at the command line.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于可用的各种格式，请在命令行运行`perldoc -f sprintf`。
- en: 3.9 Print the total number of lines in a file (emulate wc -l)
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.9 打印文件的总行数（模拟`wc -l`）
- en: '[PRE28]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This one-liner uses the `END` block that Perl took as a feature from the Awk
    language. The `END` block is executed once the Perl program has executed. Here,
    the Perl program is the hidden loop over the input created by the `-n` argument.
    Once it loops over the input, the special variable `$.` contains the number of
    lines in the input, and the `END` block prints this variable. The `-l` parameter
    sets the output record separator for `print` to a newline, so you don’t have to
    print the newline yourself, like this: `print "$.\n"`.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令使用了Perl从Awk语言中借来的`END`块。`END`块在Perl程序执行完毕后执行。在这里，Perl程序是由`-n`参数创建的对输入的隐式循环。一旦它遍历完输入，特殊变量`$.`就包含了输入中的行数，`END`块将打印这个变量。`-l`参数设置了`print`的输出记录分隔符为换行符，因此你无需手动打印换行符，像这样：`print
    "$.\n"`。
- en: 'You can do the same thing with this one-liner:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以用这个单行命令做相同的事情：
- en: '[PRE29]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This one-liner is easy to grasp if you understand Perl contexts well. The `()
    = <>` part tells Perl to evaluate the `<>` operator (the *diamond operator*) in
    the list context, which makes the diamond operator read the whole file as a list
    of lines. Next, you assign this list to `$n`. Because `$n` is scalar, this list
    assignment is evaluated in the scalar context.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对 Perl 上下文理解得很透彻，这个单行代码很容易理解。`() = <>` 这一部分告诉 Perl 在列表上下文中评估 `<>` 操作符（即*钻石操作符*），这使得钻石操作符将整个文件作为行的列表读取。接下来，您将这个列表赋值给
    `$n`。因为 `$n` 是标量，所以这个列表赋值是在标量上下文中评估的。
- en: 'What’s really happening here is the `=` operator is right-associative, meaning
    the `=` on the right is done first and the `=` on the left is done second:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这里真正发生的事情是 `=` 操作符是右结合的，这意味着右边的 `=` 会先执行，左边的 `=` 会后执行：
- en: '[PRE30]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Evaluating a list assignment in the scalar context returns the number of elements
    in the list; thus, the `$n = () = <>` construction is equal to the number of lines
    in the input, that is, the number of lines in the file. The `print` statement
    prints this number. The `-l` argument ensures a newline is added after printing
    this number.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在标量上下文中评估列表赋值会返回列表中的元素个数；因此，`$n = () = <>` 构造等同于输入中的行数，也就是文件中的行数。`print` 语句会打印这个数字。`-l`
    参数确保在打印数字后添加一个换行符。
- en: 'You can also drop the variable `$n` from this one-liner and force the scalar
    context through the `scalar` operator:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以从这个单行代码中省略变量 `$n`，并通过 `scalar` 操作符强制标量上下文：
- en: '[PRE31]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Here, instead of evaluating a list assignment in the scalar context by assigning
    it again to another scalar, you simply evaluate the list assignment in the scalar
    context using the `scalar` operator.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您不需要通过再次将其赋值给另一个标量来在标量上下文中评估列表赋值，您只需要使用 `scalar` 操作符在标量上下文中评估列表赋值。
- en: 'And now for a more obvious version:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来看一个更明显的版本：
- en: '[PRE32]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Here, instead of using an empty list `()` to force the list context on `<>`,
    you use the variable `@foo` to achieve the same effect.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您不使用空列表 `()` 来强制 `<>` 处于列表上下文中，而是使用变量 `@foo` 来实现相同的效果。
- en: 'And here’s another way to do it:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有另一种方法：
- en: '[PRE33]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This one-liner uses the so-called *eskimo operator* `}{` (actually a clever
    construct) in conjunction with the `-n` command-line argument. As I explained
    earlier, the `-n` argument forces Perl to assume a `while(<>) { }` loop around
    the program. The eskimo operator forces Perl to escape the loop, and the one-liner
    expands to
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行代码使用了所谓的*Eskimo 操作符* `}{`（实际上是一个巧妙的构造）与 `-n` 命令行参数配合使用。正如我之前解释的，`-n` 参数强制
    Perl 在程序周围假设一个 `while(<>) { }` 循环。Eskimo 操作符强制 Perl 跳出这个循环，这样单行代码就扩展成了：
- en: '[PRE34]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'As you can see, this program just loops over all the input, and once it’s finished,
    it prints the `$.`, which is the number of lines in the input. It becomes even
    more obvious if you change the formatting a little:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这个程序只是循环遍历所有输入，并在完成后打印 `$.`，即输入中的行数。如果您稍微调整一下格式，这一点就会更加明显：
- en: '[PRE35]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: As you can see, this is just an empty loop that loops over all the input, followed
    by the `print` statement wrapped in curly brackets.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这只是一段空循环，它循环遍历所有输入，然后是一个用大括号包裹的 `print` 语句。
- en: 3.10 Print the number of non-empty lines in a file
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.10 打印文件中非空行的数量
- en: '[PRE36]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This one-liner uses Perl’s `grep` function, which is similar to the `grep` UNIX
    command. Given a list of values, `grep { condition } list` returns only those
    values in the `list` that make the `condition` true. In this case, the condition
    is a regular expression that matches at least one character, so the input is filtered
    and `grep{ /./ }` returns all non-empty lines. To get the number of lines, you
    evaluate `grep` in the scalar context and print the result.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行代码使用了 Perl 的 `grep` 函数，它类似于 UNIX 的 `grep` 命令。给定一个值列表，`grep { condition }
    list` 只返回那些使得 `condition` 为真的值。在这个例子中，条件是一个正则表达式，用来匹配至少一个字符，因此输入会被过滤，`grep{ /./
    }` 返回所有非空行。为了得到行数，您需要在标量上下文中评估 `grep` 并打印结果。
- en: 'Some Perl programmers like to create the shortest Perl program that does some
    particular task—an exercise called *Perl golfing*. A golfer’s version of this
    one-liner would replace `scalar()` with `~~` (double bitwise negate) and drop
    the spaces, shortening it like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 Perl 程序员喜欢创建最短的 Perl 程序来完成某个特定的任务——这项练习叫做*Perl 高尔夫*。这个单行代码的高尔夫版将 `scalar()`
    替换为 `~~`（双重按位取反）并去掉空格，将其缩短成这样：
- en: '[PRE37]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This double bitwise negate trick is effectively a synonym for `scalar` because
    the bitwise negation works on scalar values, so `grep` is evaluated in the scalar
    context.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这个双重按位取反技巧实际上是`scalar`的同义词，因为按位取反作用于标量值，因此`grep`在标量上下文中执行。
- en: 'You can make this even shorter by dropping the space after `print` and getting
    rid of the curly brackets:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过去掉`print`后的空格并去除大括号，使这段代码更简洁：
- en: '[PRE38]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If you have Perl 5.10 or later, you can also use the `-E` command-line switch
    and the `say` operator:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Perl 5.10或更高版本，你还可以使用`-E`命令行开关和`say`操作符：
- en: '[PRE39]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: A true golfer’s masterpiece!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的高尔夫大师之作！
- en: 3.11 Print the number of empty lines in a file
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.11 打印文件中空行的数量
- en: '[PRE40]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Here, you use the variable `$x` to count the number of empty lines encountered.
    Once you’ve looped over all the lines, you print the value of `$x` in the `END`
    block. You use the `$x+0` construction to ensure that `0` is output if no lines
    are empty. (Otherwise `$x` is never created and is undefined. Adding `+0` to the
    undefined value produces `0`.) An alternative to `$x+0` is the `int` operator:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你使用变量`$x`来计数遇到的空行数量。一旦遍历完所有行，你在`END`块中打印`$x`的值。你使用`$x+0`的构造来确保如果没有空行，输出`0`。（否则`$x`将没有被创建并且是未定义的，给未定义的值加上`+0`会输出`0`。）`$x+0`的替代方法是`int`运算符：
- en: '[PRE41]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You could also modify the previous one-liner by doing this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过以下方式修改之前的一行代码：
- en: '[PRE42]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Or write it with `~~`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 或者用`~~`来写：
- en: '[PRE43]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The `~~` does bitwise negation twice, which makes `grep` execute in the scalar
    context and return the number of empty lines.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`~~`进行了两次按位取反操作，这使得`grep`在标量上下文中执行，并返回空行的数量。'
- en: These last two versions are not as effective as the one-liner with the `END`
    block because they read the whole file into memory, whereas the one-liner with
    the `END` block does it line by line and, therefore, keeps only one line of input
    in memory.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这最后两个版本不如带有`END`块的一行代码高效，因为它们将整个文件读入内存，而带有`END`块的一行代码是逐行处理的，因此只在内存中保留一行输入。
- en: 3.12 Print the number of lines in a file that match a pattern (emulate grep
    -c)
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.12 打印文件中匹配模式的行数（模拟`grep -c`）
- en: '[PRE44]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This one-liner is basically the same as 3.11, except it increments the line
    counter `$x` by one when a line matches the regular expression `/regex/`. The
    `$x+0` trick makes sure `0` is printed when no lines match `/regex/`. (See one-liner
    3.11 for a more detailed explanation of the `$x+0` trick.)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这段一行代码基本上与3.11相同，只是当某行匹配正则表达式`/regex/`时，它会将行计数器`$x`递增1。`$x+0`的技巧确保在没有行匹配`/regex/`时，输出`0`。（详见3.11中的`$x+0`技巧的详细解释。）
- en: 3.13 Number words across all lines
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.13 为所有行中的单词编号
- en: '[PRE45]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: This one-liner uses the `/e` flag, which makes Perl evaluate the `replace` part
    of the `s/regex/replace/` expression as code!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这个一行代码使用了`/e`标志，使得Perl将`replace`部分的`s/regex/replace/`表达式作为代码来执行！
- en: 'The code here is `++$i.".$1"`, which means “increment variable `$i` by one
    and then add it in front of the string `".$1"` (that is, a dot followed by the
    contents of the matched group `$1`).” The matched group here is each word: `(\w+)`.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的代码是`++$i.".$1"`，意思是“将变量`$i`递增1，然后将其加到字符串`".$1"`前面（即一个点和匹配组`$1`的内容）。”这里的匹配组是每个单词：`(\w+)`。
- en: In one sentence, this one-liner matches a word `(\w+)`, puts it in `$1`, and
    then executes the `++$i.".$1"` code that numbers the word globally (`/g` flag).
    There—all words are numbered.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一句话来说，这段一行代码匹配一个单词`(\w+)`，将其放入`$1`，然后执行`++$i.".$1"`代码，为单词全球编号（`/g`标志）。完成了—所有单词都被编号。
- en: 'For example, if you have a file with the following three lines:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你有一个文件，包含以下三行：
- en: '[PRE46]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'running this one-liner numbers each word in the file and produces the following
    output:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这段一行代码会为文件中的每个单词编号，并生成以下输出：
- en: '[PRE47]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 3.14 Number words on each individual line
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.14 为每一行中的单词编号
- en: '[PRE48]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This is similar to one-liner 3.13, except that you reset the `$i` variable
    to `0` on each line. Here’s the result of running this one-liner on the example
    from one-liner 3.13:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于一行代码3.13，只是你在每行开始时将变量`$i`重置为`0`。以下是运行这段一行代码在3.13中的例子时的结果：
- en: '[PRE49]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: As you can see, in each line the words are numbered independently of other lines.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，每一行中的单词编号是独立于其他行的。
- en: 3.15 Replace all words with their numeric positions
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.15 用数字位置替换所有单词
- en: '[PRE50]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'This one-liner is almost the same as one-liner 3.13\. Here, you simply replace
    each word with its numeric position, which is kept in the variable `$i`. For example,
    if you run this one-liner on the file from one-liners 3.13 and 3.14, it replaces
    the words in the file with their numeric positions to produce this output:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令几乎与单行命令 3.13 相同。在这里，你只需用每个单词的数字位置来替换它，而这个数字位置保存在变量`$i`中。例如，如果你在单行命令 3.13
    和 3.14 中的文件上运行这个单行命令，它会将文件中的单词替换为它们的数字位置，输出如下：
- en: '[PRE51]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Fun!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 好玩！
