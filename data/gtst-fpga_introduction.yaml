- en: <samp class="SANS_Dogma_OT_Bold_B_11">INTRODUCTION</samp>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_11">介绍</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: 'In my first job out of college as an entry-level electrical engineer, I once
    worked on an old design that had a timer circuit on it. Using a simple resistor
    and capacitor, the circuit would wait for 50 milliseconds (ms) to elapse, then
    trigger an action. We needed to change that 50 ms timer to 60 ms, but this small
    change required a monumental effort: we would have to physically remove the capacitors
    and resistors from hundreds of circuit boards and replace them with new ones.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在大学毕业后的第一份工作中，作为一名初级电气工程师，我曾参与一个旧设计的工作，那个设计上有一个定时器电路。利用一个简单的电阻和电容，这个电路会等待50毫秒（ms）后触发一个动作。我们需要将这个50毫秒定时器改为60毫秒，但这个小小的改变却需要巨大的努力：我们必须将数百块电路板上的电容和电阻拆除并更换为新的。
- en: Fortunately, we had a team of field programmable gate array (FPGA) designers
    who came to the rescue. With their help, we were able to implement the same functionality
    inside an FPGA. Then, in a matter of minutes, we could change code to set the
    timer to any arbitrary value we wanted, without having to touch a soldering iron.
    This faster pace of progress excited me, and I quickly got hooked on FPGAs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们有一支现场可编程门阵列（FPGA）设计师团队，他们挺身而出，提供了帮助。在他们的帮助下，我们能够在FPGA内部实现相同的功能。然后，在几分钟之内，我们就能修改代码，将定时器设置为任何我们想要的值，而无需触碰烙铁。这种更快的进展速度让我兴奋不已，我很快就迷上了FPGA。
- en: Eventually I transitioned to working with FPGAs full-time, and it was around
    then that I started reading and responding to FPGA-related questions on Stack
    Overflow. Often these questions came from FPGA beginners who were confused about
    basic concepts. I saw the same types of questions asked again and again, and realized
    there wasn’t a single place where people could learn about FPGAs in a simple,
    easy-to-understand way. Sure, there were many online references for Verilog and
    VHDL, the two most popular FPGA programming languages, but there was relatively
    little information on what those languages were actually *doing*. What components
    are really being created within your FPGA when you write a certain line of code?
    How are things being wired up? What does it mean to run operations in parallel
    versus serially?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我转向了全职从事FPGA的工作，并且大约在那个时候，我开始在Stack Overflow上阅读和回答与FPGA相关的问题。通常这些问题来自FPGA初学者，他们对基本概念感到困惑。我发现同样类型的问题反复出现，并意识到没有一个地方可以让人们以简单、易懂的方式学习FPGA。当然，网上有很多关于Verilog和VHDL的参考资料，这两种是最流行的FPGA编程语言，但关于这些语言究竟在做什么的资料相对较少。当你编写某一行代码时，FPGA内部到底创建了哪些组件？各个部分是如何连接的？并行操作与串行操作有何区别？
- en: Rather than continuing to answer the same questions over and over, I started
    my own website, [*https://<wbr>nandland<wbr>.com*](https://nandland.com), where
    I began writing longer articles about FPGAs. As traffic grew, I started making
    YouTube videos as well. I even created my own FPGA development board to provide
    hands-on experience for beginners. In all these endeavors, my goal has been to
    demystify FPGAs while making the information approachable and engaging for those
    just starting out. Writing this book has allowed me to delve even deeper into
    the subject, to build a solid foundation for anyone interested in exploring the
    exciting world of FPGA design.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我不再重复回答同样的问题，而是创建了自己的网站，[*https://<wbr>nandland<wbr>.com*](https://nandland.com)，开始撰写关于FPGA的长篇文章。随着流量的增长，我还开始制作YouTube视频。我甚至创建了自己的FPGA开发板，为初学者提供实践经验。在这些努力中，我的目标是揭开FPGA的神秘面纱，同时让信息变得容易接近并引人入胜，尤其是对于刚开始接触的人来说。写这本书让我能够更深入地研究这个主题，为那些有兴趣探索FPGA设计这个激动人心的世界的人打下坚实的基础。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Who Is This Book For?</samp>
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">这本书适合谁？</samp>
- en: I’ve tried to make this book as accessible as possible so that a broad range
    of people will be able to read and understand the material. The intended audience
    is anyone who is curious about how digital programmable logic works and how FPGAs
    can be used to solve a wide variety of problems. Maybe you’re a college student
    who encountered FPGAs in a class and was left intrigued but confused, or someone
    in the electronics industry who has been exposed to FPGAs at work. Perhaps you’re
    a tinkerer or hardware hacker, or a software developer interested in programming
    at a much lower level than you’re used to. This book is very approachable for
    all of these groups.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我尽力让本书尽可能容易理解，以便广泛的读者都能阅读和理解这些内容。本书的目标读者是那些对数字可编程逻辑的工作原理以及 FPGA 如何用于解决各种问题感兴趣的人。也许你是一个大学生，在课程中接触到
    FPGA，产生了兴趣但又感到困惑，或者是电子行业的人，在工作中接触过 FPGA。也许你是一个爱动手的创客或硬件黑客，或者是一个对在比平时更低层次上进行编程感兴趣的软件开发者。本书对于所有这些群体来说都非常易于接近。
- en: I’m assuming you’ve had at least some exposure to a conventional programming
    language, like Python, C, or JavaScript. It will be helpful if you understand
    concepts like functions, conditional statements (<samp class="SANS_TheSansMonoCd_W5Regular_11">if…else</samp>),
    loops, and other basic programming techniques. You don’t need any prior experience
    with Verilog or VHDL, however; this book will introduce the basics of these languages.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设你至少接触过一种传统的编程语言，比如 Python、C 或 JavaScript。如果你了解函数、条件语句（<samp class="SANS_TheSansMonoCd_W5Regular_11">if…else</samp>）、循环和其他基本编程技巧，这将会对你有帮助。不过，你不需要具备
    Verilog 或 VHDL 的任何先验经验；本书将介绍这些语言的基础知识。
- en: FPGAs lie at the intersection of hardware and software, so having some interest
    in electronics is helpful. We’ll sometimes discuss concepts like voltage and current
    within the FPGA. Here again, it will be useful if you’ve had some basic introduction
    to these terms, but it won’t be required to get value out of those sections.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: FPGA 位于硬件和软件的交集处，因此对电子学有所兴趣会有所帮助。我们有时会讨论一些如电压和电流等与 FPGA 内部相关的概念。在这一点上，如果你对这些术语有所基本了解会更有帮助，但并不要求必须掌握，才能从这些部分中获得价值。
- en: <samp class="SANS_Futura_Std_Bold_B_11">What This Book Isn’t</samp>
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">本书的内容不包括哪些</samp>
- en: This book isn’t intended to teach you every facet of Verilog or VHDL. As I said
    earlier, there are many online resources if that’s your goal. Instead, my aim
    is to teach you how FPGAs work so you can understand what your Verilog or VHDL
    is doing, and thus make more intelligent choices about your designs. That said,
    we *will* look at a large amount of code throughout the book. All of it is thoroughly
    explained, so you won’t need prior experience with these programming languages
    to follow along. You’ll gain a strong base of Verilog and VHDL knowledge as you
    read, and the confidence to augment that knowledge through independent study.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本书并不旨在教授你 Verilog 或 VHDL 的每个方面。正如我之前所说，如果你的目标是深入了解这些语言，网上有很多资源可以参考。相反，我的目标是让你理解
    FPGA 的工作原理，这样你就能明白 Verilog 或 VHDL 在做什么，从而能做出更智能的设计选择。话虽如此，我们*将*在本书中查看大量代码。所有的代码都会得到充分的解释，因此你不需要有这些编程语言的先前经验就能跟得上。随着阅读的深入，你将获得扎实的
    Verilog 和 VHDL 知识基础，并且能够通过独立学习提升这些知识。
- en: The book includes various projects that you’ll be able to carry out on real
    hardware using the iCE40 line of FPGAs from Lattice Semiconductor. I’ve focused
    on these comparatively cheap, simple FPGAs to make the hands-on parts of the book
    as accessible as possible. More expensive FPGAs have many extra bells and whistles;
    they’re very cool, but they can be overwhelming for beginners. iCE40 FPGAs are
    still highly capable, but with fewer of these high-end features available. As
    such, this book won’t explore sophisticated features like SerDes and hard-core
    processors in a hands-on way, nor will we dwell on the more complicated FPGA tools
    required to use them. We *will* discuss some of these features at a high level,
    however, so you’ll gain the background knowledge to work with them if you choose
    to upgrade to a fancier FPGA.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本书包括一些项目，你可以在实际硬件上使用 Lattice Semiconductor 的 iCE40 系列 FPGA 来完成。我专注于这些相对便宜、简单的
    FPGA，以便使本书的实践部分尽可能易于接触。更昂贵的 FPGA 拥有许多额外的功能；它们非常酷，但对于初学者来说可能会有些压倒性。iCE40 FPGA 仍然非常强大，但可用的高端功能较少。因此，本书不会以实践方式探讨诸如
    SerDes 和硬核处理器等复杂特性，也不会深入讨论使用这些特性所需的更复杂的 FPGA 工具。不过，我们*会*从高层次讨论一些这些特性，这样你就能在选择升级到更高级的
    FPGA 时，掌握必要的背景知识来使用它们。
- en: <samp class="SANS_Futura_Std_Bold_B_11">What’s in the Book?</samp>
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">书中内容有哪些？</samp>
- en: 'This book combines high-level discussion, detailed code examples, and hands-on
    projects. Each code listing is shown in both Verilog and VHDL, so whichever language
    you want to use for FPGA development, you’ll be able to follow along. There’s
    also an extensive glossary at the end of the book for your reference. Here’s what
    you’ll find in each chapter:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本书结合了高层次的讨论、详细的代码示例和实际项目。每个代码示例都同时展示了Verilog和VHDL，因此无论你选择哪种语言进行FPGA开发，都能跟得上。书的末尾还有一个详尽的术语表供参考。以下是每章内容的概述：
- en: '**[Chapter 1](chapter1.xhtml): Meet the FPGA**   Introduces FPGAs and talks
    about their strengths and weaknesses. Being an engineer is about knowing which
    tool to use in which scenario. Understanding when to use an FPGA—and when not
    to—is crucial.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第1章](chapter1.xhtml): 认识FPGA**   介绍了FPGA，并讨论了它们的优缺点。作为一名工程师，知道在什么场景下使用哪种工具非常重要。理解何时使用FPGA——以及何时不使用——是至关重要的。'
- en: '**[Chapter 2](chapter2.xhtml): Setting Up Your Hardware and Tools**   Gets
    you set up with the Lattice iCE40 series of FPGAs. You’ll download and install
    the FPGA tools and learn how to run them to program your FPGA.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第2章](chapter2.xhtml): 设置你的硬件和工具**   帮助你设置Lattice iCE40系列FPGA。你将下载并安装FPGA工具，并学习如何运行这些工具来编程你的FPGA。'
- en: '**[Chapter 3](chapter3.xhtml): Boolean Algebra and the Look-Up Table**   Explores
    one of the two most fundamental FPGA components: the look-up table (LUT). You’ll
    learn how LUTs perform Boolean algebra and take the place of dedicated logic gates.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第3章](chapter3.xhtml): 布尔代数与查找表**   探讨了FPGA的两个最基础组件之一：查找表（LUT）。你将学习LUT如何执行布尔代数，并代替专用逻辑门。'
- en: '**[Chapter 4](chapter4.xhtml): Storing State with the Flip-Flop**   Introduces
    the second fundamental FPGA component: the flip-flop. You’ll see how flip-flops
    store state within an FPGA, giving the device memory of what happened previously.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第4章](chapter4.xhtml): 使用触发器存储状态**   介绍了第二个基础FPGA组件：触发器。你将看到触发器如何在FPGA中存储状态，赋予设备记忆之前发生的事件。'
- en: '**[Chapter 5](chapter5.xhtml): Testing Your Code with Simulation**   Discusses
    how to write testbenches to simulate your FPGA designs and make sure they work
    correctly. It’s hard to see what’s going on inside a real physical FPGA, but simulations
    let you investigate how your code is behaving, find bugs, and understand strange
    behaviors.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第5章](chapter5.xhtml): 使用仿真测试你的代码**   讨论了如何编写测试平台来模拟你的FPGA设计，并确保它们正常工作。在真实的物理FPGA中很难看到内部的运行情况，但仿真可以让你检查代码的行为，发现漏洞，并理解一些奇怪的现象。'
- en: '**[Chapter 6](chapter6.xhtml): Common FPGA Modules**   Shows how to create
    some basic building blocks common to most FPGA designs, including multiplexers,
    demultiplexers, shift registers, and first in, first out (FIFO) and other memory
    structures. You’ll learn how they work and how to combine them to solve complex
    problems.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第6章](chapter6.xhtml): 常见FPGA模块**   展示了如何创建大多数FPGA设计中常见的一些基础构建块，包括多路复用器、解复用器、移位寄存器以及先进先出（FIFO）和其他存储结构。你将学习它们如何工作，以及如何将它们组合起来解决复杂问题。'
- en: '**[Chapter 7](chapter7.xhtml): Synthesis, Place and Route, and Crossing Clock
    Domains**    Expands on the FPGA build process, with details about synthesis and
    the place and route stage. You’ll learn about timing errors and how to avoid them,
    and how to safely cross between clock domains within your FPGA design.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第7章](chapter7.xhtml): 综合、布局与布线以及时钟域跨越**   扩展了FPGA构建过程的内容，详细介绍了综合以及布局与布线阶段。你将学习时序错误及其避免方法，并了解如何安全地跨越FPGA设计中的时钟域。'
- en: '**[Chapter 8](chapter8.xhtml): The State Machine**   Introduces the state machine,
    a common model for keeping track of the logical flow through a sequence of events
    in an FPGA. You’ll use a state machine to implement an interactive memory game.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第8章](chapter8.xhtml): 状态机**   介绍了状态机，这是一个常见的模型，用于跟踪FPGA中事件序列的逻辑流程。你将使用状态机来实现一个互动记忆游戏。'
- en: '**[Chapter 9](chapter9.xhtml): Useful FPGA Primitives**   Discusses other important
    FPGA components besides the LUT and the flip-flop, including the block RAM, the
    DSP block, and the phase-locked loop (PLL). You’ll learn different strategies
    for harnessing these components and see how they solve common problems.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第9章](chapter9.xhtml): 有用的FPGA原语**   讨论了除了LUT和触发器之外的其他重要FPGA组件，包括块RAM、DSP模块和相位锁定环（PLL）。你将学习如何利用这些组件的不同策略，并看到它们如何解决常见问题。'
- en: '**[Chapter 10](chapter10.xhtml): Numbers and Math**   Outlines simple rules
    for working with numbers and implementing math operations in an FPGA. You’ll learn
    the difference between signed and unsigned numbers, fixed-point and floating-point
    operations, and more.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第10章](chapter10.xhtml): 数字与数学**   概述了在FPGA中处理数字和实施数学运算的简单规则。你将学习有符号与无符号数字、定点与浮点运算的区别，以及更多内容。'
- en: '**[Chapter 11](chapter11.xhtml): Getting Data In and Out with I/O and SerDes**   Examines
    the input/output (I/O) capabilities of an FPGA. You’ll learn the pros and cons
    of different types of interfaces and be introduced to SerDes, a powerful FPGA
    feature for high-speed data transmission.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第11章](chapter11.xhtml): 使用I/O和SerDes进行数据输入输出**   探讨FPGA的输入/输出（I/O）能力。你将了解不同接口类型的优缺点，并接触到SerDes，一种用于高速数据传输的强大FPGA功能。'
- en: '**[Appendix A](appendix_A.xhtml): FPGA Development Boards**   Suggests some
    FPGA development boards that you can use for this book’s projects.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**[附录A](appendix_A.xhtml): FPGA开发板**   推荐一些可以用于本书项目的FPGA开发板。'
- en: '**[Appendix B](appendix_B.xhtml): Tips for a Career in FPGA Engineering**   Outlines
    strategies for finding an FPGA-related job, in case you want to pursue FPGA design
    professionally. I’ll make suggestions on how to build a good resume, prepare for
    interviews, and negotiate for the best-possible job offer.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**[附录B](appendix_B.xhtml): FPGA工程职业建议**   概述了寻找FPGA相关工作的策略，适合那些希望专业从事FPGA设计的人。我会提出如何构建一份优秀的简历、准备面试以及谈判获得最佳工作机会的建议。'
- en: <samp class="SANS_Futura_Std_Bold_B_11">What You’ll Need</samp>
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">你需要的工具</samp>
- en: Although not strictly required, I recommend having a development board with
    a Lattice iCE40 FPGA so you can complete the book’s hands-on projects. There’s
    nothing more satisfying than learning about a concept and then being able to implement
    that concept on real hardware. [Chapter 2](chapter2.xhtml) discusses what to look
    for in a development board and exactly what you’ll need for the book’s projects
    in more detail. Briefly, the development board should have a USB connection and
    peripherals like LEDs, push-button switches, and a seven-segment display. [Appendix
    A](appendix_A.xhtml) describes some development boards that will work.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不是严格要求，但我建议拥有一个配备Lattice iCE40 FPGA的开发板，这样你就可以完成本书中的动手项目。没有什么比学习一个概念然后能够在真实硬件上实现它更令人满足的了。[第2章](chapter2.xhtml)详细讨论了选择开发板时需要注意的事项以及完成本书项目所需的具体内容。简而言之，开发板应具备USB连接和像LED、按键开关、七段显示器等外设。[附录A](appendix_A.xhtml)描述了一些适用的开发板。
- en: The software tools for working with iCE40 FPGAs run best on Windows. If you
    don’t have a Windows computer, I recommend running the tools inside a Windows
    virtual machine. We’ll discuss installing these tools in [Chapter 2](chapter2.xhtml).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 处理iCE40 FPGA的软件工具在Windows上运行效果最佳。如果你没有Windows计算机，我建议在Windows虚拟机中运行这些工具。我们将在[第2章](chapter2.xhtml)中讨论如何安装这些工具。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Online Resources</samp>
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">在线资源</samp>
- en: The code presented in this book is available online via a GitHub repository.
    You can access it at [*https://<wbr>github<wbr>.com<wbr>/nandland<wbr>/getting<wbr>-started<wbr>-with<wbr>-fpgas*](https://github.com/nandland/getting-started-with-fpgas).
    You’ll also find more information and FPGA project ideas online at [*https://<wbr>nandland<wbr>.com*](https://nandland.com).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中介绍的代码可以通过GitHub仓库在线获取。你可以在[*https://<wbr>github<wbr>.com<wbr>/nandland<wbr>/getting<wbr>-started<wbr>-with<wbr>-fpgas*](https://github.com/nandland/getting-started-with-fpgas)访问它。你还可以在[*https://<wbr>nandland<wbr>.com*](https://nandland.com)找到更多信息和FPGA项目的创意。
