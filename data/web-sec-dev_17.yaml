- en: '**15**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**15**'
- en: '**XML ATTACKS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**XML 攻击**'
- en: '![image](Images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common01.jpg)'
- en: With the explosive growth of the internet in the ’90s, organizations began sharing
    data with each other over the web. Sharing data between computers meant agreeing
    on a shared data format. Human-readable documents on the web were being marked
    up with HyperText Markup Language (HTML). Machine-readable files were often stored
    in an analogous data format called *Extensible Markup Language (XML)*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 90 年代互联网的爆炸式增长，各组织开始通过 Web 共享数据。计算机之间共享数据意味着必须达成一个共享的数据格式。在 Web 上的人类可读文档使用超文本标记语言（HTML）进行标记。机器可读的文件通常存储在一种类似的数据格式中，称为
    *可扩展标记语言（XML）*。
- en: 'XML can be thought of as a more general implementation of HTML: in this form
    of markup, the tag and attribute names can be chosen by the document author rather
    than being fixed, as they are in the HTML specification. In [Listing 15-1](ch15.xhtml#ch15list1),
    you can see an XML file describing a catalog of books, using tags like `<catalog>`,
    `<book>`, and `<author>`.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: XML 可以被看作是 HTML 的一种更通用的实现：在这种标记方式中，标签和属性名称可以由文档作者选择，而不是像 HTML 规范中那样固定。在 [列表
    15-1](ch15.xhtml#ch15list1) 中，你可以看到一个 XML 文件，描述了一本书的目录，使用了 `<catalog>`、`<book>`
    和 `<author>` 等标签。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 15-1: An XML document describing a catalog of books*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 15-1：描述书籍目录的 XML 文档*'
- en: The popularity of this data format, especially in the early days of the web,
    means that XML *parsing*—the process of turning an XML file into in-memory code
    objects—has been implemented in every browser and web server of the past few decades.
    Unfortunately, XML parsers are a common target for hackers. Even if your site
    doesn’t handle XML by design, your web server may parse the data format by default.
    This chapter shows how XML parsers can be attacked and how to defuse these attacks.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这种数据格式的流行，尤其是在 Web 初期，意味着 XML *解析*——将 XML 文件转换为内存中的代码对象的过程——在过去几十年的每个浏览器和 Web
    服务器中都有实现。不幸的是，XML 解析器是黑客攻击的常见目标。即使你的网站设计上不处理 XML，Web 服务器也可能默认解析该数据格式。本章将展示 XML
    解析器如何受到攻击以及如何化解这些攻击。
- en: '**The Uses of XML**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**XML 的应用**'
- en: Much like HTML, XML encloses data items between tags and allows tags to be embedded
    within one another. The author of an XML document can choose semantically meaningful
    tag names so that the XML document is self-describing. Because XML is very readable,
    the data format was widely adopted to encode data for consumption by other applications.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与 HTML 类似，XML 将数据项封装在标签之间，并允许标签嵌套在彼此之间。XML 文档的作者可以选择具有语义意义的标签名称，使得 XML 文档自描述。由于
    XML 非常易读，这种数据格式被广泛采用，用于编码供其他应用程序使用的数据。
- en: The uses of XML are many. Application programming interfaces (APIs) that allow
    client software to call functions over the internet frequently accept and respond
    using XML. JavaScript code in web pages that communicates asynchronously back
    to the server often uses XML. Many types of applications—web servers included—use
    XML-based configuration files.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: XML 的应用非常广泛。允许客户端软件通过互联网调用函数的应用程序接口（API）通常使用 XML 来接收和响应数据。网页中的 JavaScript 代码在与服务器进行异步通信时，常常使用
    XML。许多类型的应用程序——包括 Web 服务器——都使用基于 XML 的配置文件。
- en: In the past decade, some of these applications have started using better-suited,
    less verbose data formats than XML. For example, JSON is a more natural method
    of encoding data in JavaScript and other scripting languages. The YAML language
    uses meaningful indentation, making it a simpler format for configuration files.
    Nevertheless, every web server implements XML parsing in some fashion and needs
    to be secured against XML attacks.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的十年中，一些应用开始使用比 XML 更适合、更简洁的数据格式。例如，JSON 是在 JavaScript 和其他脚本语言中编码数据的更自然方法。YAML
    语言通过有意义的缩进，使其成为配置文件的更简单格式。尽管如此，每个 Web 服务器都以某种方式实现了 XML 解析，并且需要防范 XML 攻击。
- en: XML vulnerabilities generally occur during the validation process. Let’s take
    a minute to discuss what validation means in the context of parsing an XML document.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: XML 漏洞通常发生在验证过程中。让我们花一点时间讨论在解析 XML 文档的上下文中，验证的含义。
- en: '**Validating XML**'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**验证 XML**'
- en: Since the author of an XML file is able to choose which tag names are used in
    the document, any application reading the data needs to know which tags to expect
    and in what order they will appear. The expected structure of an XML document
    is often described by a formal grammar against which the document can be *validated*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于XML文件的作者能够选择文档中使用的标签名称，任何读取数据的应用程序都需要知道预期的标签名称及其出现顺序。XML文档的预期结构通常通过正式语法来描述，文档可以根据该语法进行*验证*。
- en: A *grammar* file dictates to a parser which sequences of characters are valid
    expressions within the language. A programming language grammar might specify,
    for instance, that variable names can contain only alphanumeric characters, and
    that certain operators like `+` require two inputs.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*语法*文件规定了哪些字符序列是语言中有效的表达式。例如，编程语言的语法可能会规定，变量名只能包含字母数字字符，而某些运算符如`+`需要两个输入。'
- en: XML has two major ways of describing the expected structure of an XML document.
    A *document type definition (DTD)* file resembles the *Bachus–Naur Form (BNF)*
    notation often used to describe programming language grammars. An *XML Schema
    Definition (XSD)* file is a more modern, more expressive alternative, capable
    of describing a wider set of XML documents; in this case, the grammar itself is
    described in an XML file. Both methods of XML validation are widely supported
    by XML parsers. However, DTDs contain a couple of features that can expose the
    parser to attack, so that’s what we’ll focus on.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: XML有两种主要方式来描述XML文档的预期结构。*文档类型定义（DTD）*文件类似于*巴科斯–诺尔范式（BNF）*符号，经常用于描述编程语言的语法。*XML
    Schema定义（XSD）*文件是更现代、更具表现力的替代方案，能够描述更广泛的XML文档；在这种情况下，语法本身是通过XML文件来描述的。这两种XML验证方法都被XML解析器广泛支持。然而，DTD包含一些可能暴露解析器于攻击的特性，因此我们将重点讨论这一点。
- en: '***Document Type Definitions***'
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***文档类型定义***'
- en: A DTD file describes the structure of an XML file by specifying the tags, subtags,
    and types of data expected in a document. [Listing 15-2](ch15.xhtml#ch15list2)
    shows a DTD file describing the expected structure of the `<catalog>` and `<book>`
    tags in [Listing 15-1](ch15.xhtml#ch15list1).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: DTD文件通过指定预期文档中标签、子标签和数据类型来描述XML文件的结构。[列表 15-2](ch15.xhtml#ch15list2)展示了一个DTD文件，描述了[列表
    15-1](ch15.xhtml#ch15list1)中`<catalog>`和`<book>`标签的预期结构。
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 15-2: A DTD file describing the format of the XML in [Listing 15-1](ch15.xhtml#ch15list1)*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 15-2：描述[列表 15-1](ch15.xhtml#ch15list1)中XML格式的DTD文件*'
- en: This DTD describes that the top-level `<catalog>` tag is expected to contain
    zero or more `<book>` tags (the quantity is denoted by the `+` sign), and that
    each `<book>` tag is expected to contain tags describing the `author`, `title`,
    `genre`, and `description`, plus an `id` attribute. The tags and attribute are
    expected to contain parsed character data (`#PCDATA`) or character data (`CDATA`)—that
    is, text rather than tags.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个DTD描述了顶层的`<catalog>`标签预计包含零个或多个`<book>`标签（数量由`+`符号表示），并且每个`<book>`标签预计包含描述`author`、`title`、`genre`和`description`的标签，以及一个`id`属性。标签和属性预计包含解析后的字符数据（`#PCDATA`）或字符数据（`CDATA`）——即文本而非标签。
- en: DTDs can be included within an XML document to make the document self-validating.
    However, a parser that supports such *inline* DTDs is vulnerable to attack—because
    a malicious user uploading such an XML document has control over the contents
    of the DTD, rather than it being supplied by the parser itself. Hackers have used
    inline DTDs to exponentially increase the amount of server memory a document consumes
    during parsing (an XML bomb), and access to other files on the server (an XML
    external entity attack). Let’s see how these attacks work.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: DTD可以包含在XML文档中，使文档自我验证。然而，支持这种*内联* DTD的解析器容易受到攻击——因为上传此类XML文档的恶意用户可以控制DTD的内容，而不是由解析器本身提供。黑客利用内联DTD使文档在解析过程中消耗的服务器内存成倍增加（XML炸弹），并访问服务器上的其他文件（XML外部实体攻击）。让我们看看这些攻击是如何工作的。
- en: '**XML Bombs**'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**XML炸弹**'
- en: An *XML bomb* uses an inline DTD to explode the memory usage of an XML parser.
    This will take a web server offline by exhausting all the memory available to
    the server and causing it to crash.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*XML炸弹*使用内联DTD来爆炸XML解析器的内存使用量。这会通过耗尽服务器可用的所有内存，导致其崩溃，从而使Web服务器停机。'
- en: XML bombs take advantage of the fact that DTDs can specify simple string substitution
    macros that are expanded at parse time, called *internal entity declarations*.
    If a snippet of text is frequently used in an XML file, you can declare it in
    the DTD as an internal entity. That way, you don’t have to type it out every time
    you need it in the document—you just type the entity name as a shorthand. In [Listing
    15-3](ch15.xhtml#ch15list3), an XML file containing employee records specifies
    the company name in the DTD by using an internal entity declaration.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: XML 炸弹利用了 DTD 可以指定简单的字符串替换宏，并在解析时展开，这些宏被称为*内部实体声明*。如果一段文本在 XML 文件中经常使用，你可以在
    DTD 中将其声明为内部实体。这样，你就不必每次都输入它，只需在文档中键入实体名称作为简写。在[列表 15-3](ch15.xhtml#ch15list3)中，包含员工记录的
    XML 文件通过使用内部实体声明在 DTD 中指定公司名称。
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 15-3: An internal entity declaration*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 15-3：内部实体声明*'
- en: The string `&company;` ❷ ❸ acts as a placeholder for the value `Rock and Gravel
    Company` ❶. When the document is parsed, the parser replaces all instances of
    `&company;` with `Rock and Gravel Company` and produces the final document shown
    in [Listing 15-4](ch15.xhtml#ch15list4).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串 `&company;` ❷ ❸ 充当 `Rock and Gravel Company` ❶ 的占位符。当文档被解析时，解析器将所有 `&company;`
    的实例替换为 `Rock and Gravel Company`，并生成最终的文档，如[列表 15-4](ch15.xhtml#ch15list4)所示。
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 15-4: The XML document after the parser processes the DTD*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 15-4：解析器处理 DTD 后的 XML 文档*'
- en: Internal entity declarations are useful, if seldom used. Problems occur when
    internal entity declarations refer to other internal entity declarations. [Listing
    15-5](ch15.xhtml#ch15list5) shows a nested series of entity declarations that
    constitute an XML bomb.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 内部实体声明有其用途，尽管很少使用。问题出现在内部实体声明引用其他内部实体声明时。[列表 15-5](ch15.xhtml#ch15list5) 显示了一系列嵌套的实体声明，构成了一个
    XML 炸弹。
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 15-5: A type of XML bomb known as* the billion laughs attack'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 15-5：一种 XML 炸弹，被称为* 十亿笑声攻击'
- en: When this XML file is parsed, the `&lol9;` string is replaced with 10 occurrences
    of the string `&lol8;`. Then *each* occurrence of `&lol8;` is replaced with 10
    occurrences of the string `&lol7;`. The final form of the XML file consists of
    a `<lolz>` tag containing over a *billion* occurrences of the string `lol`. This
    simple XML file will take up over 3GB of memory when the DTD is fully expanded,
    enough to crash the XML parser!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当此 XML 文件被解析时，`&lol9;` 字符串将被替换为 10 次 `&lol8;` 字符串。然后，*每一个* `&lol8;` 实例将被替换为
    10 次 `&lol7;` 字符串。XML 文件的最终形式包含一个 `<lolz>` 标签，其中有超过 *十亿* 次 `lol` 字符串的出现。这个简单的
    XML 文件在 DTD 完全展开后将占用超过 3GB 的内存，足以使 XML 解析器崩溃！
- en: Exhausting the memory available to the XML parser will take your web server
    offline, which makes XML bombs an effective way for a hacker to launch a denial-of-service
    attack. All an attacker needs to do is to find a URL on your site that accepts
    XML uploads, and they can take you offline with a click of a button.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 消耗 XML 解析器的可用内存将使你的 Web 服务器离线，这使得 XML 炸弹成为黑客发起拒绝服务攻击的有效手段。攻击者所需要做的就是找到一个接受 XML
    上传的 URL，他们只需点击一下按钮就能让你的网站离线。
- en: XML parsers that accept inline DTDs are also vulnerable to a sneakier type of
    attack that takes advantage of entity definitions in a different manner.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接受内联 DTD 的 XML 解析器也容易受到一种更隐蔽类型攻击的威胁，这种攻击以不同的方式利用实体定义。
- en: '**XML External Entity Attacks**'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**XML 外部实体攻击**'
- en: DTDs can include content from external files. If an XML parser is configured
    to process inline DTDs, an attacker can use these *external entity declarations*
    to explore the local filesystem or to trigger network requests from the web server
    itself.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: DTD 可以包含来自外部文件的内容。如果 XML 解析器配置为处理内联 DTD，攻击者可以利用这些*外部实体声明*来探索本地文件系统或触发来自 Web
    服务器本身的网络请求。
- en: A typical external entity looks like [Listing 15-6](ch15.xhtml#ch15list6).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的外部实体如[列表 15-6](ch15.xhtml#ch15list6)所示。
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 15-6: Using an external entity to include boilerplate copyright text
    in an XML file*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 15-6：使用外部实体在 XML 文件中包含标准版权文本*'
- en: According to the XML 1.0 specification, a parser is expected to read the contents
    of the file specified in the external entity and insert that data into the XML
    document wherever the entity is referenced. In this example, the data hosted at
    *http://www.w3.org/xmlspec/copyright.xml* ❶ would be inserted into the XML document
    wherever the text `&copy;` ❷ appears.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 XML 1.0 规范，解析器应读取外部实体中指定文件的内容，并在 XML 文档中每次引用该实体时插入该数据。在这个例子中，托管在 *http://www.w3.org/xmlspec/copyright.xml*
    ❶ 上的数据将被插入到 XML 文档中，每当文本 `&copy;` ❷ 出现时。
- en: The URL referenced by the external entity declaration can use various network
    protocols, depending on the prefix. Our example DTD uses the *http://* prefix,
    which will cause the parser to make an HTTP request. The XML specification also
    supports reading local files on disk, using the *file://* prefix. For this reason,
    external entity definitions are a security *disaster*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 外部实体声明所引用的 URL 可以使用不同的网络协议，具体取决于前缀。我们示例中的 DTD 使用 *http://* 前缀，这将导致解析器发起 HTTP
    请求。XML 规范还支持使用 *file://* 前缀读取本地磁盘文件。因此，外部实体定义是一个安全的 *灾难*。
- en: '***How Hackers Exploit External Entities***'
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***黑客如何利用外部实体***'
- en: When an XML parser throws an error, the error message will often include the
    contents of the XML document being parsed. Knowing this, hackers use external
    entity declarations to read files on a server. A maliciously crafted XML file
    might include a reference to a file such as *file://etc/passwd* on a Linux system,
    for instance. When this external file is inserted into the XML document by the
    parser, the XML becomes malformed—so parsing fails. The parser then dutifully
    includes the contents of the file in the error response, allowing the hacker to
    view the sensitive data within the referenced file. Using this technique, hackers
    can read sensitive files on a vulnerable web server that contain passwords and
    other confidential information.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当 XML 解析器抛出错误时，错误信息通常会包括正在解析的 XML 文档的内容。黑客正是利用这一点，通过外部实体声明来读取服务器上的文件。例如，一个恶意构造的
    XML 文件可能会包含对 Linux 系统中类似 *file://etc/passwd* 文件的引用。当这个外部文件被解析器插入到 XML 文档中时，XML
    就会变得不合法——因此解析失败。解析器会忠实地将文件内容包含在错误响应中，允许黑客查看引用文件中的敏感数据。通过这种技术，黑客可以读取易受攻击的 web 服务器上的敏感文件，这些文件包含密码和其他机密信息。
- en: External entities can also be used to commit *server-side request forgery (SSRF)*
    attacks, whereby an attacker triggers malicious HTTP requests from your server.
    A naïvely configured XML parser will make a network request whenever it encounters
    an external entity URL with a network protocol prefix. Being able to trick your
    web server into making a network request on a URL of their choosing is a boon
    for an attacker! Hackers have used this feature to probe internal networks, to
    launch denial-of-service attacks on third parties, and to disguise malicious URL
    calls. You will learn more about the risks around SSRF attacks in the next chapter.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 外部实体也可以用于发起 *服务器端请求伪造（SSRF）* 攻击，攻击者通过这种方式从你的服务器触发恶意 HTTP 请求。一个配置不当的 XML 解析器会在遇到带有网络协议前缀的外部实体
    URL 时发起网络请求。能够将你的 web 服务器欺骗成根据攻击者选择的 URL 发起网络请求，对攻击者来说无疑是一个巨大的好处！黑客已经利用这一特性来探测内部网络、发起针对第三方的拒绝服务攻击，并伪装恶意的
    URL 请求。你将在下一章中了解更多关于 SSRF 攻击的风险。
- en: '**Securing Your XML Parser**'
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保护你的 XML 解析器**'
- en: 'This is a simple fix to protect your parser from XML attacks: disable the processing
    of inline DTDs in your configuration. DTDs are a legacy technology, and inline
    DTDs are a bad idea, period. In fact, many modern XML parsers are hardened by
    default, meaning out of the box they disable features that allow the parser to
    be attacked, so you might be protected already. If you are unsure, you should
    check what (if any) XML parsing technology you are using.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的修复，能够保护你的解析器免受 XML 攻击：在你的配置中禁用内联 DTD 的处理。DTD 是一种过时的技术，内联 DTD 本身就是一个糟糕的主意。事实上，许多现代
    XML 解析器默认已经经过硬化，这意味着它们在开箱即用时会禁用那些可能使解析器受到攻击的功能，所以你可能已经得到保护。如果你不确定，应该检查你使用的 XML
    解析技术（如果有的话）。
- en: The following sections describe how to secure your XML parser in some of the
    major web programming languages. Even if you think your code doesn’t parse XML,
    the third-party dependencies you use likely use XML in some form. Make sure you
    analyze your entire dependency tree to see what libraries are loaded into memory
    when your web server starts up.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分描述了如何在一些主要的 Web 编程语言中保护你的 XML 解析器。即使你认为你的代码并不解析 XML，你使用的第三方依赖项很可能以某种形式使用
    XML。确保你分析整个依赖树，以查看当你的 web 服务器启动时，哪些库被加载到内存中。
- en: '***Python***'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Python***'
- en: The `defusedxml` library explicitly rejects inline DTDs and is a drop-in replacement
    for Python’s standard XML parsing library. Use this module in place of Python’s
    standard library.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`defusedxml` 库明确拒绝内联 DTD，并且是 Python 标准 XML 解析库的直接替代品。使用此模块来替代 Python 的标准库。'
- en: '***Ruby***'
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Ruby***'
- en: The de facto standard for parsing XML in Ruby is the `Nokogiri` library. This
    library has been hardened to XML attacks since version 1.5.4, so make sure your
    code uses that version or higher for parsing.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby 中解析 XML 的事实标准是 `Nokogiri` 库。自版本 1.5.4 以来，该库已经加固了 XML 攻击的防护，因此请确保你的代码使用该版本或更高版本进行解析。
- en: '***Node.js***'
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Node.js***'
- en: Node.js has a variety of modules for parsing XML, including `xml2js`, `parse-xml`,
    and `node-xml`. Most of them omit processing of DTDs by design, so make sure to
    consult the documentation for the parser you use.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 有多种解析 XML 的模块，包括 `xml2js`、`parse-xml` 和 `node-xml`。大多数模块默认省略 DTD 的处理，因此请确保查阅你所使用的解析器的文档。
- en: '***Java***'
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Java***'
- en: Java has a variety of methods of parsing XML. Parsers that adhere to Java specifications
    typically initiate parsing via the class `javax.xml.parsers.DocumentBuilderFactory`.
    [Listing 15-7](ch15.xhtml#ch15list7) illustrates how to configure secure XML parsing
    in this class wherever it is instantiated, using the `XMLConstants.FEATURE_SECURE_PROCESSING`
    feature.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Java 有多种解析 XML 的方法。符合 Java 规范的解析器通常通过 `javax.xml.parsers.DocumentBuilderFactory`
    类启动解析。[Listing 15-7](ch15.xhtml#ch15list7) 说明了如何在该类的任何实例化位置配置安全的 XML 解析，使用 `XMLConstants.FEATURE_SECURE_PROCESSING`
    特性。
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 15-7: Securing a Java XML parsing library*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 15-7: 安全配置 Java XML 解析库*'
- en: '***.NET***'
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***.NET***'
- en: .NET has a variety of methods of parsing XML, all contained in the `System.Xml`
    namespace. `XmlDictionaryReader`, `XmlNodeReader`, and `XmlReader` are safe by
    default, as are `System.Xml.Linq.XElement` and `System.Xml.Linq.XDocument`. `System.Xml.XmlDocument`,
    `System.Xml.XmlTextReader`, and `System.Xml.XPath.XPathNavigator` have been secured
    since .NET version 4.5.2\. If you are using an earlier version of .NET, you should
    switch to a secure parser, or disable the processing of inline DTDs. [Listing
    15-8](ch15.xhtml#ch15list8) shows how to do this by setting the `ProhibitDtd`
    attribute flag.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 有多种解析 XML 的方法，所有这些方法都包含在 `System.Xml` 命名空间中。`XmlDictionaryReader`、`XmlNodeReader`
    和 `XmlReader` 默认是安全的，`System.Xml.Linq.XElement` 和 `System.Xml.Linq.XDocument`
    也是如此。`System.Xml.XmlDocument`、`System.Xml.XmlTextReader` 和 `System.Xml.XPath.XPathNavigator`
    从 .NET 版本 4.5.2 起已被加固。如果你使用的是早期版本的 .NET，应该切换到安全的解析器，或禁用内联 DTD 的处理。[Listing 15-8](ch15.xhtml#ch15list8)
    展示了如何通过设置 `ProhibitDtd` 属性标志来实现这一点。
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 15-8: Disabling processing of inline DTDs in .NET*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 15-8: 禁用 .NET 中的内联 DTD 处理*'
- en: '**Other Considerations**'
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**其他考虑事项**'
- en: 'The threat of external entity attacks illustrates the importance of following
    the *principle of least privilege*, which states that software components and
    processes should be granted the minimal set of permissions required to perform
    their tasks. There is rarely a good reason for an XML parser to make outbound
    network requests: consider locking down outbound network requests for your web
    server as a whole. If you do need outbound network access—for example, if your
    server code calls third-party APIs—you should whitelist the domains of those APIs
    in your firewall rules.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 外部实体攻击的威胁说明了遵循 *最小权限原则* 的重要性，该原则指出，软件组件和进程应该仅获得执行其任务所需的最小权限。XML 解析器几乎没有正当理由进行外发网络请求：考虑将
    Web 服务器的外发网络请求限制到最小。如果确实需要外发网络访问——例如，如果你的服务器代码调用了第三方 API——你应该在防火墙规则中白名单这些 API
    的域名。
- en: Similarly, it’s important to restrict the directories on disk that your web
    server can access. On the Linux operating system, this can be achieved by running
    your web server process in a `chroot` jail that ignores any attempts by the running
    process to change its root directory. On the Windows operating system, you should
    manually whitelist the directories that the web server can access.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，限制 Web 服务器可以访问的磁盘目录也很重要。在 Linux 操作系统中，可以通过将 Web 服务器进程运行在 `chroot` 监狱中来实现，这样可以忽略运行进程尝试更改根目录的任何操作。在
    Windows 操作系统中，应该手动白名单 Web 服务器可以访问的目录。
- en: '**Summary**'
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Extensible Markup Language (XML) is a flexible data format widely used to exchange
    machine-readable data on the internet. Your XML parser may be vulnerable to attack
    if it is configured to accept and process inline document type definitions (DTDs).
    XML bombs use inline DTDs to explode the parser’s memory use, potentially crashing
    your web server. XML external entity attacks reference local files or network
    addresses, and can be used to trick the parser into revealing sensitive information
    or make malicious network requests. Make sure you use a hardened XML parser that
    disables inline DTD parsing.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展标记语言（XML）是一种灵活的数据格式，广泛用于在互联网上交换机器可读的数据。如果你的 XML 解析器配置为接受并处理内联文档类型定义（DTD），它可能会受到攻击。XML
    爆炸文件使用内联 DTD 来爆炸解析器的内存使用，可能导致你的 Web 服务器崩溃。XML 外部实体攻击引用本地文件或网络地址，并可以用于欺骗解析器泄露敏感信息或发起恶意网络请求。确保你使用一个加强版的
    XML 解析器，该解析器禁用了内联 DTD 解析。
- en: 'The next chapter expands on a concept touched on in this chapter: how security
    flaws in your web server can be leveraged by hackers to launch attacks on third
    parties. Even when you aren’t the victim directly, it’s important to be a good
    internet citizen and stop attacks that use your system.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将扩展本章提到的一个概念：黑客如何利用你 Web 服务器中的安全漏洞，对第三方发起攻击。即使你不是直接受害者，作为一个合格的互联网公民，阻止利用你的系统进行的攻击也是非常重要的。
