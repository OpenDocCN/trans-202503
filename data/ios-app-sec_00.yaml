- en: '**INTRODUCTION**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**介绍**'
- en: 'Much has been written regarding iOS’s security model, jailbreaking, finding
    code execution vulnerabilities in the base OS, and other security-related characteristics.
    Other work has focused on examining iOS from a forensic perspective, including
    how to extract data from physical devices or backups as part of criminal investigations.
    That information is all useful, but this book aims to fill the biggest gaps in
    the iOS literature: applications.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 有关iOS安全模型、越狱、在基础操作系统中寻找代码执行漏洞及其他安全相关特性的文献已经有很多。其他研究则侧重于从法医角度审视iOS，包括如何从物理设备或备份中提取数据作为刑事调查的一部分。这些信息都很有用，但本书的目标是填补iOS文献中最大的空白：应用程序。
- en: Little public attention has been given to actually writing secure applications
    for iOS or for performing security evaluations of iOS applications. As a consequence,
    embarrassing security flaws in iOS applications have allowed for exposure of sensitive
    data, circumvention of authentication mechanisms, and abuse of user privacy (both
    intentional and accidental). People are using iOS applications for more and more
    crucial tasks and entrusting them with a lot of sensitive information, and iOS
    application security needs to mature in response.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 公众对编写iOS安全应用程序或对iOS应用程序进行安全评估的关注较少。因此，iOS应用程序中的尴尬安全漏洞导致了敏感数据的暴露、身份验证机制的绕过以及用户隐私的滥用（无论是故意的还是偶然的）。人们正在使用iOS应用程序处理越来越重要的任务，并将大量敏感信息托付给它们，iOS应用程序的安全性也需要随之成熟。
- en: As such, my goal is for this book is to be as close as possible to the canonical
    work on the secure development of iOS applications in particular. iOS is a rapidly
    moving target, of course, but I’ve tried to make things as accurate as possible
    and give you the tools to inspect and adapt to future API changes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我的目标是使本书尽可能接近于iOS应用程序安全开发的权威著作。iOS的变化速度很快，但我尽力使内容尽可能准确，并提供工具帮助你检查和适应未来API的变化。
- en: Different versions of iOS also have different flaws. Since Apple has “end-of-lifed”
    certain devices that developers may still want their applications to run on (like
    the iPad 1), this book covers flaws present in iOS versions 5.*x* to 9.0 (the
    latest at the time of writing) and, where applicable, discusses risks and mitigations
    specific to each version.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 不同版本的iOS也有不同的漏洞。由于苹果已“停止支持”某些设备（例如iPad 1），开发者可能仍希望其应用程序能够在这些设备上运行，因此本书涵盖了iOS
    5.*x*到9.0（在撰写时的最新版本）中存在的漏洞，并在适用的情况下，讨论了每个版本特有的风险和缓解措施。
- en: '**Who This Book Is For**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**本书的读者**'
- en: First, this is a book about security. If you’re a developer or security specialist
    looking for a guide to the common ways iOS applications fail at protecting their
    users (and the options available to you or a client for patching those holes),
    you’re in the right place.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，这是一本关于安全的书。如果你是一个开发者或安全专家，正在寻找一本关于iOS应用程序如何在保护用户方面失败的常见方式（以及你或客户修补这些漏洞的选项）的指南，那么你来对地方了。
- en: You’ll get the most out of this book if you have at least a little experience
    with iOS development or a passing familiarity with how iOS applications work under
    the hood. But even without that knowledge, as long as you’re an experienced programmer
    or penetration tester who’s not afraid to dig in to Apple’s documentation as needed,
    you should be fine. I give a whirlwind tour of Objective-C and its most commonly
    used API, Cocoa Touch, in [Chapter 2](ch02.html#ch02), so if you need some high-level
    basics or a refresher on the language, start there.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你至少有一点iOS开发经验，或者对iOS应用程序如何在幕后运作有一些了解，那么你能从本书中获得最大的收益。但即便没有这些知识，只要你是一个经验丰富的程序员或渗透测试员，不怕根据需要深入研究苹果的文档，你也应该能够应付。我在[第2章](ch02.html#ch02)中提供了一个关于Objective-C及其最常用API
    Cocoa Touch的快速导览，如果你需要一些高层次的基础知识或对语言的回顾，可以从这里开始。
- en: '**What’s in This Book**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**本书内容**'
- en: I’ve been performing a wide variety of iOS application security reviews and
    penetration tests since about 2008, and I’ve collected a lot of knowledge on the
    pitfalls and mistakes real-world developers encounter when writing iOS applications.
    This book boils down that knowledge to appeal both to iOS developers looking to
    learn the practice of secure development and to security specialists wanting to
    learn how to spot problems in iOS security.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 自2008年以来，我一直在进行各种iOS应用程序的安全评审和渗透测试，并积累了大量关于现实世界开发者在编写iOS应用程序时遇到的陷阱和错误的知识。本书将这些知识提炼出来，旨在同时吸引那些希望学习安全开发实践的iOS开发者和希望学习如何识别iOS安全问题的安全专家。
- en: '***How This Book Is Structured***'
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***本书结构概述***'
- en: 'In **[Part I: iOS Fundamentals](part01.html#part01)**, you’ll dig in to the
    background of iOS, its security history, and its basic application structure.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **[第一部分：iOS 基础知识](part01.html#part01)** 中，你将深入了解 iOS 的背景、其安全历史以及基本的应用程序结构。
- en: '• **[Chapter 1: The iOS Security Model](ch01.html#ch01)** briefly examines
    the iOS security model to give you an idea of the platform’s fundamental security
    protections and what they can and cannot provide.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: • **[第一章：iOS 安全模型](ch01.html#ch01)** 简要介绍了 iOS 安全模型，让你了解该平台的基本安全保护措施，以及它们能提供什么和不能提供什么。
- en: '• **[Chapter 2: Objective-C for the Lazy](ch02.html#ch02)** explains how Objective-C
    differs from other programming languages and gives a quick overview of its terminology
    and design patterns. For seasoned Objective-C programmers, this may not be new
    information, but it should be valuable to beginners and others dabbling in iOS
    for the first time.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: • **[第二章：懒人版 Objective-C](ch02.html#ch02)** 讲解了 Objective-C 与其他编程语言的不同之处，并简要介绍了其术语和设计模式。对于有经验的
    Objective-C 程序员来说，这可能并不是什么新知识，但对初学者以及第一次接触 iOS 的人来说，这些内容应该会非常有价值。
- en: '• **[Chapter 3: iOS Application Anatomy](ch03.html#ch03)** outlines how iOS
    applications are structured and bundled and investigates the local storage mechanisms
    that can leak sensitive information.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: • **[第三章：iOS 应用结构](ch03.html#ch03)** 概述了 iOS 应用的结构和打包方式，并探讨了可能泄露敏感信息的本地存储机制。
- en: 'In **[Part II: Security Testing](part02.html#part02)**, you’ll see how to set
    up your security testing environment, for use either in development or in penetration
    testing. I’ll also share some tips for setting up your Xcode projects to get the
    most out of the available security mechanisms.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **[第二部分：安全测试](part02.html#part02)** 中，你将学习如何设置你的安全测试环境，无论是在开发还是渗透测试中使用。我还会分享一些设置
    Xcode 项目的小技巧，帮助你充分利用可用的安全机制。
- en: '• **[Chapter 4: Building Your Test Platform](ch04.html#ch04)** gives you all
    the information that you need to get started with tools and configurations to
    help you audit and test iOS applications. This includes information on using the
    Simulator, configuring proxies, bypassing TLS validation, and analyzing application
    behavior.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: • **[第四章：构建你的测试平台](ch04.html#ch04)** 提供了开始使用工具和配置所需的所有信息，以帮助你审核和测试 iOS 应用程序。这包括关于使用模拟器、配置代理、绕过
    TLS 验证以及分析应用行为的信息。
- en: '• **[Chapter 5: Debugging with lldb and Friends](ch05.html#ch05)** goes deeper
    into monitoring application behavior and bending it to your will using lldb and
    Xcode’s built-in tools. This will help you analyze more complex problems in your
    code, as well as give you a test harness to do things like fault injection.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: • **[第五章：使用 lldb 和工具进行调试](ch05.html#ch05)** 更深入地讲解了如何使用 lldb 和 Xcode 内建工具监控应用程序行为，并将其调整为符合你需求的方式。这将帮助你分析代码中的更复杂问题，同时为你提供一个测试工具，可以进行故障注入等操作。
- en: '• **[Chapter 6: Black-Box Testing](ch06.html#ch06)** delves into the tools
    and techniques that you’ll need to successfully analyze applications that you
    don’t have source code for. This includes basic reverse engineering, binary modification,
    copying programs around, and debugging on the device with a remote instance of
    lldb.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: • **[第六章：黑盒测试](ch06.html#ch06)** 深入探讨了你需要的工具和技术，以成功分析没有源代码的应用程序。这包括基本的逆向工程、二进制修改、程序复制以及使用
    lldb 的远程实例在设备上进行调试。
- en: 'In **[Part III: Security Quirks of the Cocoa API](part03.html#part03)**, you’ll
    look at common security pitfalls in the Cocoa Touch API.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **[第三部分：Cocoa API 的安全问题](part03.html#part03)** 中，你将了解 Cocoa Touch API 中常见的安全陷阱。
- en: '• **[Chapter 7: iOS Networking](ch07.html#ch07)** discusses how networking
    and Transport Layer Security work in iOS, including information on authentication,
    certificate pinning, and mistakes in TLS connection handling.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: • **[第七章：iOS 网络](ch07.html#ch07)** 讨论了 iOS 中网络和传输层安全（TLS）的工作原理，包括认证、证书固定以及 TLS
    连接处理中的常见错误。
- en: '• **[Chapter 8: Interprocess Communication](ch08.html#ch08)** covers interprocess
    communication mechanisms, including URL schemes and the newer Universal Links
    mechanism.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: • **[第八章：进程间通信](ch08.html#ch08)** 介绍了进程间通信机制，包括 URL 方案和较新的 Universal Links 机制。
- en: '• **[Chapter 9: iOS-Targeted Web Apps](ch09.html#ch09)** covers how web applications
    are integrated with iOS native apps, including working with web views or using
    JavaScript/Cocoa bridges such as Cordova.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: • **[第九章：面向 iOS 的 Web 应用](ch09.html#ch09)** 介绍了 Web 应用如何与 iOS 原生应用集成，包括与 Web
    视图的配合使用或利用 JavaScript/Cocoa 桥接，如 Cordova。
- en: '• **[Chapter 10: Data Leakage](ch10.html#ch10)** discusses the myriad ways
    that sensitive data can unintentionally leak onto local storage, to other applications,
    or over the network.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: • **[第10章：数据泄露](ch10.html#ch10)** 讨论了敏感数据如何以各种方式不小心泄露到本地存储、其他应用程序或通过网络传播。
- en: '• **[Chapter 11: Legacy Issues and Baggage from C](ch11.html#ch11)** gives
    an overview of C flaws that persist in iOS applications: stack and heap corruption,
    format string flaws, use-after-free, and some Objective-C variants of these classic
    flaws.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: • **[第11章：C语言遗留问题与负担](ch11.html#ch11)** 概述了在 iOS 应用中仍然存在的 C 语言缺陷：栈和堆损坏、格式化字符串缺陷、使用已释放内存以及这些经典缺陷在
    Objective-C 中的变体。
- en: '• **[Chapter 12: Injection Attacks](ch12.html#ch12)** covers attacks such as
    SQL injection, cross-site scripting, XML injection, and predicate injection, as
    they relate to iOS applications.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: • **[第12章：注入攻击](ch12.html#ch12)** 涵盖了诸如 SQL 注入、跨站脚本攻击、XML 注入和谓词注入等攻击方式，特别是它们在
    iOS 应用中的表现。
- en: 'Finally, **[Part IV: Keeping Data Safe](part04.html#part04)** covers issues
    relating to privacy and encryption.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，**[第IV部分：保护数据安全](part04.html#part04)** 涵盖了与隐私和加密相关的问题。
- en: '• **[Chapter 13: Encryption and Authentication](ch13.html#ch13)** looks at
    encryption best practices, including how to properly use the Keychain, the Data
    Protection API, and other cryptographic primitives provided by the CommonCrypto
    framework.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: • **[第13章：加密与认证](ch13.html#ch13)** 讨论了加密最佳实践，包括如何正确使用钥匙串、数据保护 API 和 CommonCrypto
    框架提供的其他加密原语。
- en: '• **[Chapter 14: Mobile Privacy Concerns](ch14.html#ch14)** ends the book with
    a discussion of user privacy, including what collecting more data than needed
    can mean for both application creators and users.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: • **[第14章：移动隐私问题](ch14.html#ch14)** 通过讨论用户隐私问题结束本书，包括收集超出需求的数据对应用程序创建者和用户的影响。
- en: By the end of this book, you should be well equipped to grab an application,
    with or without source code, and quickly pinpoint security bugs. You should also
    be able to write safe and secure applications for use in the wider world.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 到本书结束时，你应该能够快速抓取一个应用程序，无论是否有源代码，并迅速找出安全漏洞。你还应该能够编写安全可靠的应用程序，在更广泛的世界中使用。
- en: '***Conventions This Book Follows***'
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***本书遵循的规范***'
- en: Because Objective-C is a rather verbose language with many extremely long class
    and method names, I’ve wrapped lines in source code listings to maximize clarity.
    This may not reflect the way you’d actually want to format your code. In some
    cases, the results are unavoidably ugly—if wrapping makes the code seem less clear,
    try pasting it into Xcode and allowing Xcode to reformat it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Objective-C 是一种相当冗长的语言，拥有许多极长的类和方法名称，我在源代码列表中对行进行了换行，以最大程度地提高可读性。这可能并不代表你实际希望格式化代码的方式。在某些情况下，换行不可避免地让代码看起来不太美观——如果换行让代码看起来不清晰，可以尝试将其粘贴到
    Xcode 中，让 Xcode 自动重新格式化。
- en: 'As I will detail in [Chapter 2](ch02.html#ch02), I favor the traditional Objective-C
    infix notation instead of dot notation. I also put curly braces on the same line
    as method declarations for similar reasons: I’m old.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在[第2章](ch02.html#ch02)中详细说明的，我更倾向于使用传统的 Objective-C 中缀表示法，而不是点表示法。我还将大括号放在与方法声明同一行，原因类似：我年纪大了。
- en: Objective-C class and method names will appear in `monospaced` font. C functions
    will appear in `monospaced` font as well. For brevity and cleanliness, the path
    */Users/<your username>/Library/Developer/CoreSimulator/* will be referred to
    as *$SIMPATH*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Objective-C 类和方法名称将以`等宽字体`显示。C 函数也将以`等宽字体`显示。为了简洁和清晰，路径 */Users/<your username>/Library/Developer/CoreSimulator/*
    将被称作 *$SIMPATH*。
- en: '***A Note on Swift***'
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***关于 Swift 的说明***'
- en: There’s been much interest in the relatively new Swift language, but you’ll
    find I don’t cover it in this book. There are a few reasons why.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管相对较新的 Swift 语言引起了很多关注，但你会发现我在本书中没有涵盖它。背后有几个原因。
- en: First, I have yet to actually come across a production application written in
    Swift. Objective-C is still far and away the most popular language for iOS applications,
    and we’ll be dealing with code written in it for many years to come.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我还没有实际遇到过用 Swift 编写的生产环境应用程序。Objective-C 仍然是 iOS 应用程序中最流行的语言，我们将在未来多年继续处理用它编写的代码。
- en: Second, Swift just has fewer problems. Since it’s not based on C, it’s easier
    to write safer code, and it doesn’t introduce any new security flaws (as far as
    anyone knows).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，Swift 确实存在更少的问题。由于它不是基于 C 的，编写更安全的代码更容易，而且它不会引入新的安全漏洞（至少目前没有发现）。
- en: Third, because Swift uses the same APIs as Objective-C, the security pitfalls
    in the Cocoa Touch API that you may run into will be basically the same in either
    language. The things you learn in this book will almost all apply to both Objective-C
    and Swift.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，由于 Swift 使用与 Objective-C 相同的 API，您可能遇到的 Cocoa Touch API 中的安全陷阱，在这两种语言中基本上是相同的。本书中讲解的大部分内容都适用于
    Objective-C 和 Swift。
- en: Also, Swift doesn’t use infix notation and square brackets, which makes me sad
    and confused.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Swift 不使用中缀表示法和方括号，这让我既伤心又困惑。
- en: '**Mobile Security Promises and Threats**'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**移动安全承诺与威胁**'
- en: 'When I first started working with mobile applications, I honestly questioned
    the need for a separate mobile application security category. I considered mobile
    applications to be the same as desktop applications when it came to bugs: stack
    and heap overflows, format string bugs, use-after-free, and other code execution
    issues. While these are still possible in iOS, the security focus for mobile devices
    has expanded to include privacy, data theft, and malicious interprocess communication.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当我第一次开始接触移动应用程序时，我诚实地质疑是否需要一个独立的移动应用程序安全类别。在我看来，移动应用程序在漏洞方面和桌面应用程序是一样的：堆栈和堆溢出、格式字符串漏洞、使用后释放（use-after-free）和其他代码执行问题。尽管在iOS中这些问题依然可能发生，但移动设备的安全焦点已扩展到隐私、数据盗窃和恶意进程间通信等方面。
- en: As you read about the iOS security specifics I cover in this book, keep in mind
    that users expect apps to avoid doing certain things that will put their security
    at risk. Even if an app avoids overtly risky behaviors, there are still several
    threats to consider as you fortify that app’s defenses. This section discusses
    both security promises an app makes to its users and the types of attacks that
    can force an app to break them.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本书中我所涵盖的iOS安全细节时，请记住，用户希望应用程序避免做出某些会危及其安全的行为。即使一个应用程序避免了明显的风险行为，仍然有许多威胁需要考虑，在加强应用程序防御时要特别留意。这一部分讨论了应用程序对用户做出的安全承诺以及可能迫使应用程序违背这些承诺的攻击类型。
- en: '***What Mobile Apps Shouldn’t Be Able to Do***'
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***移动应用程序不应该能够做的事情***'
- en: Learning from the design mistakes of earlier desktop operating systems, the
    major mobile operating systems were designed with application segregation in mind.
    This is different from desktop applications, where any application a user runs
    more or less has access to all that user’s data, if not control of the entire
    machine.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从早期桌面操作系统的设计错误中汲取经验，主要的移动操作系统在设计时就考虑了应用程序隔离。这与桌面应用程序不同，后者用户运行的任何应用程序或多或少都可以访问该用户的所有数据，甚至控制整个机器。
- en: As a result of increased focus on segregation and general improvements in the
    mobile OS arena, user expectations have expanded. In general, mobile applications
    (including yours) should be unable to do a few key things.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在进程隔离和移动操作系统领域的改进，用户的期望也发生了变化。一般来说，移动应用程序（包括您的应用程序）不应该做几件关键的事情。
- en: '**Cause Another Application to Misbehave**'
  id: totrans-46
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**导致其他应用程序出现不当行为**'
- en: Applications shouldn’t be able to crash or meddle with other applications. In
    the bad old days, not only could other applications generally read, modify, or
    destroy data, they could take down the entire OS with that data. As time went
    on, desktop process segregation improved but primarily with the goal of increasing
    stability, rather than addressing security or privacy concerns.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序不应能够崩溃或干扰其他应用程序。在过去的年代，不仅其他应用程序通常可以读取、修改或销毁数据，它们还可以通过这些数据使整个操作系统崩溃。随着时间的推移，桌面进程隔离有所改进，但主要目标是增加系统稳定性，而不是解决安全或隐私问题。
- en: Mobile operating systems improve upon this, but total process segregation is
    not possible while fulfilling users’ interoperability needs. The boundary between
    applications will always be somewhat porous. It’s up to developers to ensure that
    their applications don’t misbehave and to take all prudent measures to safeguard
    data and prevent interference from malicious applications.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 移动操作系统在此基础上有所改进，但在满足用户互操作性需求的同时，完全的进程隔离仍然不可能。应用程序之间的边界总是会有些许漏洞。开发者需要确保他们的应用程序不会出现不当行为，并采取一切谨慎措施来保护数据，防止恶意应用程序的干扰。
- en: '**Deny Service to a User**'
  id: totrans-49
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**拒绝为用户提供服务**'
- en: Given that iOS has historically been used primarily on phones, it’s crucial
    that an application not be able to do something that would prevent the user from
    making an emergency call. In many places, this is a legal requirement, and it’s
    the reason for protective measures that keep attackers (and users) from tampering
    with the underlying OS.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于iOS历史上主要用于手机，因此确保应用程序不能做出阻止用户进行紧急呼叫的行为至关重要。在许多地方，这是法律要求，也是防止攻击者（以及用户）篡改底层操作系统的原因。
- en: '**Steal a User’s Data**'
  id: totrans-51
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**窃取用户数据**'
- en: An application should not be able to read data from other applications or the
    base OS and deliver it to a third party. It should also not be able to access
    sensitive user data without the permission of the user. The OS should keep applications
    from reading data directly from other application’s data stores, but preventing
    theft via other channels requires developers to pay attention to what IPC mechanisms
    an application sends or receives data on.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序不应能够读取其他应用程序或基础操作系统的数据并将其传递给第三方。它也不应在未经用户允许的情况下访问敏感的用户数据。操作系统应防止应用程序直接读取其他应用程序的数据存储，但要防止通过其他渠道窃取数据，开发人员需要注意应用程序通过哪些进程间通信（IPC）机制发送或接收数据。
- en: '**Cost the User Unexpected Money**'
  id: totrans-53
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**让用户不期望的费用**'
- en: Apps shouldn’t be able to incur charges without the user’s approval. Much of
    the mobile malware that has been found in the wild has used the ability to send
    SMS messages to subscribe the user to third-party services, which pass charges
    through to the user’s phone provider. Purchases made within the application should
    be clear to the user and require explicit approval.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序不应在未经用户批准的情况下产生费用。在野外发现的许多移动恶意软件利用发送短信的功能，将用户订阅到第三方服务，从而将费用通过用户的手机运营商转嫁给用户。应用内购买应清晰告知用户，并要求明确批准。
- en: '***Classifying Mobile Security Threats in This Book***'
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***本书中的移动安全威胁分类***'
- en: To help understand mobile device security threats and their mitigations, it’s
    also useful to keep a few attack types in mind. This keeps our analysis of threats
    realistic and helps to analyze the true impact of various attacks and their defenses.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助理解移动设备的安全威胁及其防范措施，记住一些攻击类型也是非常有用的。这有助于我们现实地分析威胁，并帮助分析各种攻击及其防御的真正影响。
- en: '**Forensic Attacks**'
  id: totrans-57
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**取证攻击**'
- en: Forensic attackers come into possession of a device or its backups, intending
    to extract its secrets. Most often, this involves examination of the physical
    storage on the device. Because phone or tablet theft is relatively easy and common
    compared to stealing other computing devices, much more attention is placed on
    forensics.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 取证攻击者通常会获取一个设备或其备份，意图提取其中的机密数据。大多数情况下，这涉及到对设备上物理存储的检查。由于手机或平板电脑的盗窃相对容易，且比偷窃其他计算设备更常见，因此更多的关注集中在取证领域。
- en: Forensic attacks can be performed by either an opportunistic attacker or a skilled
    attacker targeting a specific individual. For opportunistic attackers, extracting
    information can be as simple as stealing a phone without any PIN protection; this
    allows them to steal images, notes, and any other data normally accessible on
    the phone. It can also assist an attacker in compromising services that use two-factor
    authentication in conjunction with a phonebased token or SMS.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 取证攻击可以由机会主义攻击者或有技能的攻击者对特定个人发起。对于机会主义攻击者，提取信息可能像偷走一部没有PIN码保护的手机那样简单；这使得他们可以窃取图片、笔记和手机上正常可以访问的其他数据。它也可能帮助攻击者突破使用手机令牌或短信配合两步验证的服务。
- en: A skilled forensic attacker could be a rogue employee, corporation, government,
    law enforcement official, or perhaps really motivated extortionist. This kind
    of attacker knows the techniques to perform a temporary jailbreak, crack simple
    PINs, and examine data throughout the device’s filesystem, including system-level
    and application-level data. This can provide an attacker with not just data presented
    through the UI but the underlying cache information, which can include screenshots,
    keystrokes, sensitive information cached in web requests, and so forth.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一名技术娴熟的取证攻击者可能是一个不法员工、公司、政府机构、执法人员，或者是一个动机强烈的敲诈者。这类攻击者掌握了执行临时越狱、破解简单密码、并检查设备文件系统中数据的技巧，包括系统级别和应用级别的数据。这能让攻击者不仅获取通过用户界面呈现的数据，还能获取底层缓存信息，其中可能包括截图、按键记录、网页请求中缓存的敏感信息等。
- en: I’ll cover much of the data of interest to forensic attackers in [Chapter 10](ch10.html#ch10),
    as well as some further protective measures in [Chapter 13](ch13.html#ch13).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在[第10章](ch10.html#ch10)中介绍很多对取证攻击者有用的数据，并在[第13章](ch13.html#ch13)中讨论一些进一步的防护措施。
- en: '**Code Execution Attacks**'
  id: totrans-62
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**代码执行攻击**'
- en: 'Remote code execution attacks involve compromising the device or its data by
    execution of code on the device, without having physical possession of the device.
    This can happen via many different channels: the network, QR codes or NFC, parsing
    of maliciously crafted files, or even hostile hardware peripherals. Note that
    after gaining code execution on a device, many of the forensic attacks used to
    expose user secrets are now possible. There are a few basic subtypes of code execution
    attacks that frequently result from lower-level programming flaws, which I’ll
    discuss in [Chapter 11](ch11.html#ch11).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 远程代码执行攻击涉及通过在设备上执行代码来妥协设备或其数据，而无需物理接触设备。这可以通过多种渠道发生：网络、二维码或NFC、解析恶意构造的文件，甚至是敌对硬件外设。需要注意的是，在设备上获得代码执行权限后，许多用于暴露用户秘密的取证攻击就变得可能。我将在[第11章](ch11.html#ch11)中讨论几种常见的低级编程缺陷导致的代码执行攻击子类型。
- en: '**Web-Based Attacks**'
  id: totrans-64
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**基于Web的攻击**'
- en: Web-based remote code execution attacks primarily use maliciously crafted HTML
    and JavaScript to mislead the user or steal data. A remote attacker either operates
    a malicious website, has taken over a legitimate website, or simply posts maliciously
    crafted content to a public forum.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Web的远程代码执行攻击主要使用恶意构造的HTML和JavaScript来误导用户或窃取数据。远程攻击者要么操作一个恶意网站，要么接管一个合法网站，或者简单地向公共论坛发布恶意构造的内容。
- en: These attacks can be used to steal data from local data stores such as HTML5
    database storage or localStorage, alter or steal data stored in SQLite databases,
    read session cookies, or plant a fake login form to steal a user’s credentials.
    I’ll talk more about web application–related issues in [Chapter 9](ch09.html#ch09)
    and [Chapter 12](ch12.html#ch12).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些攻击可以用来窃取本地数据存储中的数据，例如HTML5数据库存储或localStorage，修改或窃取存储在SQLite数据库中的数据，读取会话cookie，或植入伪造的登录表单以窃取用户凭证。我将在[第9章](ch09.html#ch09)和[第12章](ch12.html#ch12)中讨论更多关于Web应用相关的问题。
- en: '**Network-Based Attacks**'
  id: totrans-67
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**基于网络的攻击**'
- en: Network-based code execution attacks attempt to gain control over an application
    or the entire system by injecting executable code of some type over the network.
    This can be either modification of network traffic coming into the device or exploitation
    of a system service or the kernel with a code execution exploit. If the exploit
    targets a process with a high degree of privilege, the attacker can gain access
    not only to the data of a specific application but to data all over the device’s
    storage. They can also monitor the device’s activity and plant backdoors that
    will allow later access. I’ll talk specifically about network-related APIs in
    [Chapter 7](ch07.html#ch07).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 基于网络的代码执行攻击试图通过在网络上注入某种类型的可执行代码来控制应用程序或整个系统。这可以是修改进入设备的网络流量，或通过代码执行漏洞利用系统服务或内核。如果漏洞攻击的是具有较高权限的进程，攻击者不仅可以访问特定应用的数据，还可以访问设备存储中的所有数据。攻击者还可以监控设备活动并植入后门以便后续访问。我将在[第7章](ch07.html#ch07)中专门讨论与网络相关的API。
- en: '**Attacks That Rely on Physical Proximity**'
  id: totrans-69
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**依赖物理接近的攻击**'
- en: Physical code execution attacks tend to be exploits that target devices using
    communications such as NFC or the USB interface. These types of attacks have been
    used for jailbreaking in the past but can also be used to compromise the device
    using brief physical interaction. Many of these attacks are on the OS itself,
    but I’ll discuss some issues relating to physical proximity in [Chapter 14](ch14.html#ch14).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 物理代码执行攻击通常是利用NFC或USB接口等通信方式对设备进行攻击的漏洞。这些类型的攻击曾用于越狱，但也可以通过短暂的物理交互来妥协设备。这些攻击中的许多是针对操作系统本身的，但我将在[第14章](ch14.html#ch14)中讨论一些与物理接近相关的问题。
- en: '**Some Notes for iOS Security Testers**'
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**iOS 安全测试员的注意事项**'
- en: It’s my strong belief that penetration tests should be performed with source
    code if at all possible. While this is not representative of the position of most
    external attackers, it does maximize the ability to find important bugs within
    a limited time frame. Real-world attackers have as much time as they care to spend
    on analyzing your application, and Objective-C lends well to reverse engineering.
    They’ll figure it out, given the time. However, most penetration tests are limited
    by time and money, so simulating a real-world attacker should not usually be the
    goal.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我坚信，渗透测试应该尽可能在源代码的帮助下进行。尽管这并不代表大多数外部攻击者的立场，但它能最大限度地提高在有限时间内发现重要漏洞的能力。现实中的攻击者有足够的时间来分析你的应用程序，且Objective-C非常适合逆向工程。只要有时间，他们能弄清楚如何做。然而，大多数渗透测试受到时间和资金的限制，因此通常不应以模拟真实攻击者为目标。
- en: I cover both white-box (that is, source-assisted) and black-box methodologies
    in this book, but the focus will be on source-assisted penetration tests because
    this finds more bugs faster and helps with learning the standard Cocoa library.
    Many techniques I describe in this book lend well to either approach.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本书涵盖了白盒（即源代码辅助）和黑盒方法，但重点将放在源代码辅助渗透测试上，因为这种方法能更快地发现更多的漏洞，并帮助学习标准的Cocoa库。我在本书中描述的许多技术都适用于这两种方法。
- en: All that said, iOS developers come from many different disciplines, and each
    person’s skill set affects the types of security issues that slip into an app
    unnoticed. Whether you’re testing someone else’s application or trying to poke
    holes in your own, keep in mind a few different development backgrounds as you
    test.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，iOS开发人员来自不同的学科，每个人的技能背景都会影响到应用程序中那些未被注意到的安全问题。无论你是在测试别人的应用程序，还是试图在自己的应用程序中发现漏洞，在测试过程中都要考虑不同的开发背景。
- en: Some iOS developers come from a C or C++ background, and since we all tend to
    use what we know, you’ll find their codebases often use C/C++ APIs rather than
    Cocoa equivalents. If you know an application under test was created by former
    C/C++ programmers, you may find [Chapter 11](ch11.html#ch11) to be useful reading
    because it discusses issues commonly found in straight C/C++ code.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一些iOS开发人员来自C或C++背景，既然我们都倾向于使用自己熟悉的东西，你会发现他们的代码库通常使用C/C++ API，而非Cocoa等价的API。如果你知道被测试的应用程序是由前C/C++程序员创建的，你可能会发现[第11章](ch11.html#ch11)是一本有用的参考书，因为它讨论了在纯C/C++代码中常见的问题。
- en: For some new programmers, Objective-C is actually their first programming language.
    They often haven’t learned that many vanilla C APIs, so ideally, you’ll find fewer
    of those issues. There’s also the rare wizened NeXTStep programmer who’s made
    the move to OS X or iOS, with a library of collected wisdom regarding NeXTStep/Cocoa
    APIs but less mobile experience. If either sounds like you or your client, you’ll
    find the chapters in [Part III](part03.html#part03) most helpful.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些新程序员来说，Objective-C实际上是他们的第一门编程语言。他们通常没有学过那么多原生C API，因此理想情况下，你会发现这类问题较少。此外，还有一些经验丰富的NeXTStep程序员，他们已经转到OS
    X或iOS开发，拥有一套关于NeXTStep/Cocoa API的智慧库，但在移动开发方面经验较少。如果你或你的客户是这种情况，你会发现[第三部分](part03.html#part03)的章节最有帮助。
- en: Programmers with Java backgrounds might try to force Java design patterns onto
    an application, endlessly abstracting functionality. Web developers who have been
    drafted into writing a mobile application, on the other hand, may try to wrap
    as much code as possible into a web app, writing minimal applications that rely
    on WebKit to view application content. Check out [Chapter 9](ch09.html#ch09) for
    some WebKit-related pitfalls.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 具有Java背景的程序员可能会试图将Java设计模式强行应用到一个应用程序中，不断地抽象功能。另一方面，被征召来编写移动应用程序的Web开发者，可能会试图将尽可能多的代码包装到一个Web应用程序中，编写依赖WebKit查看应用内容的最小应用程序。你可以查看[第9章](ch09.html#ch09)，其中讲解了一些与WebKit相关的陷阱。
- en: Developers with the last few skill sets I mentioned are less likely to use low-level
    APIs, which can prevent classic C flaws. They are, however, unlikely to spot mistakes
    when using those low-level APIs, so you’ll want to pay close attention if they
    use them.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有我提到的最后几种技能的开发人员不太可能使用低级API，而这有助于防止经典的C语言缺陷。然而，他们在使用这些低级API时往往不容易发现错误，因此，如果他们使用了这些API，你需要特别留意。
- en: Of course, none of these backgrounds is necessarily better suited to secure
    development than the others—both high-level and low-level APIs can be abused.
    But when you know how existing skills can affect the writing of iOS applications,
    you’re a step closer to finding and solving security issues.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这些背景没有哪个一定比其他背景更适合安全开发——高层次和低层次的API都可能被滥用。但当你了解现有技能如何影响iOS应用的编写时，你就更接近发现并解决安全问题的第一步。
- en: 'My own background is that of a penetration tester, which I consider akin to
    being an art critic: I *can* write code, but the vast majority of my time is spent
    looking at other people’s code and telling them what’s wrong with it. And like
    in the art world, the majority of that code is rather crap. Unlike the art world,
    however, code problems can often be fixed with a patch. My hope is that at the
    end of this book, you’ll be able to spot bad iOS code and know how to start plugging
    the holes.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我的背景是渗透测试员，我觉得这和做艺术评论家很相似：我*能*写代码，但大部分时间都在查看别人写的代码，并告诉他们哪里有问题。就像在艺术界一样，大部分代码其实都挺糟糕的。然而，与艺术界不同的是，代码问题通常可以通过修补程序解决。我的希望是，在读完本书后，你能识别出糟糕的iOS代码，并知道如何开始修补漏洞。
