- en: Appendix A. Solutions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A. 解决方案
- en: Chapter 1
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章
- en: 'Exercise 1 is about learning to read a file and exploring the array methods
    using the contents of the file. I’d expect to see something like this in the console
    after completing the exercise:'
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 练习 1 是学习如何读取文件，并使用文件内容探索数组方法。我期望在完成练习后，控制台会显示类似以下内容：
- en: '[PRE0]'
  id: totrans-3
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The output depends on the text you used.
  id: totrans-4
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出取决于你使用的文本。
- en: 'The second exercise requires writing a little code. The following sample solves
    the problem using only methods covered so far:'
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个练习需要写一些代码。以下示例仅使用到目前为止介绍的方法来解决问题：
- en: '[PRE1]'
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This solution should print something like this:'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个解决方案应该打印类似以下内容：
- en: '[PRE2]'
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The word “Call” appears once in the paragraph; the word “me” appears three times;
    and so on.
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 词语 “Call” 在段落中出现了一次；词语 “me” 出现了三次；以此类推。
- en: 'Using the sample code provided in Exercise 3, the complete solution looks like
    this:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用练习 3 中提供的示例代码，完整的解决方案如下所示：
- en: '[PRE3]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This combines the solutions to the first two exercises, wrapping them in a Ruby
    class.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这将前两个练习的解决方案结合起来，并将它们封装在一个 Ruby 类中。
- en: Chapter 2
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章
- en: The first exercise is about familiarizing yourself with a simple Rails application
    and the functionality provided by default. The address of the home page is *http://localhost:3000/posts*.
    As you move around the application, that address changes. The new post form is
    at */posts/new*; the first post is at */posts/1*; and the form for editing the
    first post is at */posts/1/edit*. These paths and their meaning are covered in
    [Chapter 4](ch04.html "Chapter 4. Controllers").
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个练习是熟悉一个简单的 Rails 应用程序以及默认提供的功能。主页的地址是*http://localhost:3000/posts*。随着你在应用中移动，这个地址会发生变化。新帖子的表单在
    */posts/new*；第一篇帖子在 */posts/1*；编辑第一篇帖子的表单在 */posts/1/edit*。这些路径及其含义在[第 4 章](ch04.html
    "第 4 章. 控制器")中讲解。
- en: If you’ve never worked on a large application before, the number of files in
    a typical Rails application can seem daunting. Most editors contain some type
    of project list for opening files, as well as keyboard shortcuts for quickly searching
    for files by name. These features are invaluable when working on larger projects.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你以前从未在大型应用程序上工作过，那么典型的 Rails 应用程序中的文件数量可能会让你感到畏惧。大多数编辑器都包含某种类型的项目列表用于打开文件，并且提供快捷键来快速通过文件名搜索文件。这些功能在处理较大项目时非常宝贵。
- en: Chapter 3
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章
- en: 'The following commands generate and run the migration to add an email address
    to comments:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下命令生成并运行迁移，以向评论添加电子邮件地址：
- en: '[PRE4]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can then launch a Rails console with `bin/rails console` and create a new
    comment with an email address.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后你可以启动一个 Rails 控制台，使用 `bin/rails console` 并创建一个带有电子邮件地址的新评论。
- en: 'Open *app/models/comment.rb* and add the validation as shown here:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开*app/models/comment.rb*并添加如下所示的验证：
- en: '[PRE5]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that I added the validation for both fields on a single line. You could
    do this, however, with two separate calls to the `validates` method.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，我将两个字段的验证合并在一行中。你也可以通过对 `validates` 方法进行两次调用来完成此操作。
- en: 'You can’t write a single query to determine the number of comments for each
    post, but you can iterate over all posts and count the comments. Enter something
    like this in the Rails console:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你不能写一个查询来确定每个帖子的评论数量，但你可以遍历所有帖子并计算评论数量。在 Rails 控制台输入类似以下内容：
- en: '[PRE6]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This code first finds all of the posts and then makes a count query on the comments
    table for each one.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码首先找到所有的帖子，然后对每个帖子在评论表上执行一个计数查询。
- en: Chapter 4
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章
- en: Open the file *app/controllers/comments_controller.rb*, and find the `create`
    method.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文件*app/controllers/comments_controller.rb*，找到 `create` 方法。
- en: '[PRE7]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Note that it currently uses @post.comments.create(comment_params) ➊ to initialize
    and save the new comment as part of the if statement. You need to store the new
    comment in a variable so you can use the errors method to get a list of errors
    when the save fails. Update the create method as shown here:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，目前它使用 @post.comments.create(comment_params) ➊ 来初始化并保存新评论，作为 if 语句的一部分。你需要将新评论存储在一个变量中，这样当保存失败时，你可以使用
    errors 方法获取错误列表。根据下面的示例更新 create 方法：
- en: '[PRE8]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This code adds the errors to the existing alert. Notice I used the to_sentence
    method ➊ to convert the array of error messages to a sentence like this: “Author
    can’t be blank and Body can’t be blank.”'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码将错误添加到现有的警告中。注意，我使用了 `to_sentence` 方法 ➊ 将错误消息的数组转换为类似这样的句子：“Author can’t
    be blank 和 Body can’t be blank”。
- en: 'Edit *app/controllers/comments_controller.rb*, and find the comment_params
    method. Add :email to the call to the permit method:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑*app/controllers/comments_controller.rb*，找到 comment_params 方法。将 :email 添加到对
    permit 方法的调用中：
- en: '[PRE9]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now if a user enters an email address when adding a new comment, the address
    should be stored in the database. Without this change, the `email` field is simply
    ignored.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果用户在添加新评论时输入电子邮件地址，地址应该被存储到数据库中。如果没有这个更改，`email`字段将被忽略。
- en: Chapter 5
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章
- en: 'Remove the `h1` element from *app/views/posts/index.html.erb* and update *app/views/layouts/application.html.erb,*
    as shown here:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从*app/views/posts/index.html.erb*中删除`h1`元素，并更新*app/views/layouts/application.html.erb*，如这里所示：
- en: '[PRE10]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Also change the headings in *app/views/posts/new.html.erb* and *app/ views/posts/edit.html.erb*
    to `h2` headings:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还需要将*app/views/posts/new.html.erb*和*app/views/posts/edit.html.erb*中的标题更改为`h2`标题：
- en: '[PRE11]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'First, add a label and text field for `:author` to the *app/views/posts/ _form.html.erb*
    partial:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在*app/views/posts/_form.html.erb*部分中添加`：author`的标签和文本字段：
- en: '[PRE12]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then add `:author` to the list of permitted parameters in the `post_ params`
    method at the bottom of *app/controllers/posts_controller.rb*:'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，在*app/controllers/posts_controller.rb*底部的`post_params`方法中，将`：author`添加到允许的参数列表中：
- en: '[PRE13]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Make the changes to *config/routes.rb* and *app/views/comments/_comment.html.erb*
    as described in the question. Here is how I would write the `destroy` action in
    *app/controllers/comments_controller.rb*:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照问题中描述的内容，修改*config/routes.rb*和*app/views/comments/_comment.html.erb*。这是我在*app/controllers/comments_controller.rb*中编写`destroy`操作的方法：
- en: '[PRE14]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Chapter 6
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章
- en: After editing files in your application, stage your changes in Git with **`git
    add .`**, then commit these changes with **`git commit -m "`** ***`Commit Message"`***,
    and finally push the changes to Heroku with **`git push heroku master`**.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序中编辑文件后，使用**`git add .`**暂存你的更改，然后使用**`git commit -m "`** ***`提交信息"`***提交这些更改，最后使用**`git
    push heroku master`**将更改推送到Heroku。
- en: If you don’t already have a GitHub account, go to *[https://github.com/](https://github.com/)*
    and complete the sign-up form. Next you’ll need to choose a plan. The free plan
    includes unlimited public repositories. Once you finish the sign-up process, you
    should see the GitHub Bootcamp screen. Follow the instructions there to create
    a repository and upload your application.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有 GitHub 账号，访问* [https://github.com/](https://github.com/)*并填写注册表单。接下来，你需要选择一个计划。免费计划包括无限的公共仓库。一旦完成注册过程，你应该会看到
    GitHub Bootcamp 屏幕。按照屏幕上的说明创建一个仓库并上传你的应用程序。
- en: 'Create your new application in the *code* directory you created in [Chapter 2](ch02.html
    "Chapter 2. Rails Fundamentals"), not inside the *blog* directory. Use the `rails
    new` command followed by the name of your new application. For example, to create
    an application to track your record collection, type this command:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[第二章](ch02.html "第二章：Rails 基础")中创建你新的应用程序，而不是在*blog*目录内。使用`rails new`命令，后面跟上你新应用程序的名称。例如，要创建一个跟踪你的唱片收藏的应用程序，输入以下命令：
- en: '[PRE15]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next think about the models your application needs. In this case, you probably
    need a `Record` or `Album` model. The model needs fields such as `title`, `artist`,
    and `release_date`. Move to the *vinyl* directory, and use the `rails scaffold`
    command to generate some code to get started:'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，考虑一下应用程序所需的模型。在这种情况下，你可能需要一个`Record`或`Album`模型。模型需要如`title`、`artist`和`release_date`等字段。进入*vinyl*目录，并使用`rails
    scaffold`命令生成一些代码以开始：
- en: '[PRE16]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now start the Rails server and work with your new application.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在启动 Rails 服务器，并开始使用你的新应用程序。
- en: Chapter 7
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章
- en: In my version of Rails, the `Post` class has 58 ancestors.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我的 Rails 版本中，`Post`类有58个祖先。
- en: '[PRE17]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Using the Ruby pretty-print method (`pp)`, you can list each ancestor on a
    separate line:'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 Ruby 的漂亮打印方法（`pp`），你可以将每个祖先列出在单独的行中：
- en: '[PRE18]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you scroll through the list of ancestors, you should see some names you recognize,
    such as `ActiveRecord::Associations` and `ActiveRecord::Validations`. Also, notice
    that `Post` inherits from `BasicObject`, just like every other class in Ruby.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你浏览祖先列表时，应该会看到一些你熟悉的名字，比如`ActiveRecord::Associations`和`ActiveRecord::Validations`。同时，注意到`Post`类继承自`BasicObject`，就像
    Ruby 中的其他所有类一样。
- en: The `cannot_`*`feature`*`!` method should be the same as the `can_`*`feature`*`!`
    method except it assigns `false` to the `@features[f]` instead of `true`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`cannot_`*`feature`*`!`方法应该与`can_`*`feature`*`!`方法相同，唯一的区别是它将`false`赋值给`@features[f]`，而不是`true`。'
- en: '[PRE19]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After adding this method, create another instance of the `User` class and make
    sure the new method works as expected:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加这个方法后，创建另一个`User`类的实例，并确保新方法按预期工作：
- en: '[PRE20]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'First, look at the instance methods defined by the `Element` class:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，查看`Element`类定义的实例方法：
- en: '[PRE21]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The methods `name` and `name=` are defined as expected. Now reopen the `Element`
    class and add a call to `accessor :symbol:`
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`name`和`name=`方法如预期所定义。现在重新打开`Element`类并添加对`accessor :symbol:`的调用。'
- en: '[PRE22]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This should create two new methods named `symbol` and `symbol=`. You can verify
    that the methods were created by calling `instance_methods` again:'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该创建两个新方法，分别命名为`symbol`和`symbol=`。你可以通过再次调用`instance_methods`来验证方法是否已创建：
- en: '[PRE23]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You can verify that the methods work as expected by creating an instance of
    the `Element` class and assigning a symbol with `e.symbol = "Au"`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过创建`Element`类的实例并使用`e.symbol = "Au"`来验证方法是否按预期工作。
- en: Chapter 8
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章
- en: 'Specifying `dependent: :destroy` on the `belongs_to` side of the association
    causes the parent model to be destroyed when any child model is destroyed. In
    this example, destroying any `Post` also destroys the associated `User`. This
    mistake is fairly common.'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在`belongs_to`关联的一方指定`dependent: :destroy`会导致父模型在任何子模型被销毁时一并销毁。在这个例子中，销毁任何`Post`也会销毁关联的`User`。这个错误比较常见。'
- en: 'The completed `Comment` model should look like this:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完整的`Comment`模型应该是这样的：
- en: '[PRE24]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The Rails generator adds `belongs_to` associations automatically, but it does
    not add validations.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Rails生成器会自动添加`belongs_to`关联，但不会添加验证。
- en: Launch the Rails console with **`bin/rails console`**. Create a new `User`,
    `TextPost`, and `Comment`. Verify that all of the models were created. Then call
    `destroy` on the new `User` and verify that the associated `TextPost` and `Comment`
    records are also destroyed.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**`bin/rails console`**启动Rails控制台。创建一个新的`User`、`TextPost`和`Comment`。验证所有模型是否已创建。然后对新创建的`User`调用`destroy`，并验证关联的`TextPost`和`Comment`记录是否也被销毁。
- en: '[PRE25]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note that calling `destroy` on the model does not remove it from memory ➊. The
    variable `carol` still refers to the model even though it has been deleted from
    the database. Attempting to reload the model from the database raises an `ActiveRecord::RecordNotFound`
    exception because the record for carol has been deleted ➋.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，调用`destroy`方法并不会从内存中删除模型➊。即使模型已经从数据库中删除，变量`carol`仍然引用该模型。尝试从数据库重新加载模型时，会抛出`ActiveRecord::RecordNotFound`异常，因为carol的记录已被删除➋。
- en: Chapter 9
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章
- en: 'First, edit the text post partial at *app/views/text_posts/_text_post.html.erb,*
    as shown here:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，编辑位于*app/views/text_posts/_text_post.html.erb*的文本帖子部分， 如下所示：
- en: '[PRE26]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This creates a link to the text_post with the time in words such as “5 days
    ago.” Edit the image post partial at *app/views/image_posts/ _image_post.html.erb*
    with a similar change.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这会创建一个指向text_post的链接，链接中显示类似“5天前”之类的时间。按照类似的修改方式编辑位于*app/views/image_posts/_image_post.html.erb*的图片帖子部分。
- en: '[PRE27]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The only difference here is the word text_post is replaced with image_post.
    Now load the posts index page and make sure the links work correctly.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 唯一的区别在于单词text_post被替换为image_post。现在加载帖子索引页面，确保链接正常工作。
- en: 'The most important part of this exercise is restricting access to the controller
    to authenticated users. Add `before_action :authenticate_user!` in *app/controllers/comments_controller.rb,*
    as shown here:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个练习最重要的部分是限制控制器访问仅限认证用户。在*app/controllers/comments_controller.rb*中添加`before_action
    :authenticate_user!`，如下所示：
- en: '[PRE28]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The comment partial at *app/views/comments/_comment.html.erb* shows the `name`
    of the user that created the comment and the `body` of the comment.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 位于*app/views/comments/_comment.html.erb*的评论部分展示了创建评论的用户的`name`和评论的`body`。
- en: '[PRE29]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This partial is rendered once for each comment by `render @post.comments` in
    the post `show` view.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个部分模板在`post`的`show`视图中通过`render @post.comments`为每个评论渲染一次。
- en: First, start a Rails console with **`bin/rails console`** to see the **`password_digest`**
    for a user.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用**`bin/rails console`**启动Rails控制台，查看用户的**`password_digest`**。
- en: '[PRE30]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The value of `alice.password_digest` that you see will be different. Bcrypt
    automatically adds a salt to the password before generating the hash digest. I
    can’t tell the password for `alice` by looking at that value. Bcrypt seems pretty
    secure!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到的`alice.password_digest`的值会有所不同。Bcrypt在生成哈希摘要之前会自动为密码添加盐。通过查看该值，我无法知道`alice`的密码。Bcrypt看起来相当安全！
- en: You can see the cookies for a site by looking at resources in your browser’s
    Developer Tools or Page Info. According to the Chrome developer tools, my current
    `_social_session` cookie is 465 bytes of alphanumeric digits like this `"M2xkVmNTaGpVaFd..."`.
    Again, I’m not able to decipher that information.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过查看浏览器开发者工具或页面信息中的资源来看到网站的cookie。根据Chrome开发者工具，我当前的`_social_session` cookie是465字节的字母数字字符串，类似于这个`"M2xkVmNTaGpVaFd..."`。不过，我无法解读这些信息。
- en: Chapter 10
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章
- en: 'Open the `TextPost` partial at *app/views/text_posts/_text_post.html.erb*.
    It already displays the user’s `name`. Add a call to the `link_to` helper method
    before the `text_post.user.name` and also pass the `text_post.user` to the helper:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开*app/views/text_posts/_text_post.html.erb*中的`TextPost`部分。它已经显示了用户的`name`。在`text_post.user.name`之前添加对`link_to`帮助方法的调用，并将`text_post.user`传递给该帮助方法：
- en: '[PRE31]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then update the `ImagePost` partial at *app/views/image_posts/_image _post.html.erb*:'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后更新*app/views/image_posts/_image_post.html.erb*中的`ImagePost`部分：
- en: '[PRE32]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Finally, update the application layout at *app/views/layouts/application.html.erb*:'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，更新*app/views/layouts/application.html.erb*中的应用程序布局：
- en: '[PRE33]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The application layout already has a check for `current_user`. Add the *Profile*
    link inside this conditional.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用程序布局中已经有对`current_user`的检查。将*Profile*链接放在这个条件语句内。
- en: Open `UsersController` at *app/controllers/users_controller.rb*. Requiring authentication
    before the follow action is a one-line change using the authenticate_user! method
    you wrote in [Chapter 9](ch09.html "Chapter 9. Authentication").
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`UsersController`位于*app/controllers/users_controller.rb*。在follow操作之前要求认证是通过使用你在[第9章](ch09.html
    "第9章. 认证")中编写的`authenticate_user!`方法进行的一行代码修改。
- en: '[PRE34]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The only: `:follow` option means anonymous users can still access the `show,
    new`, and `create` actions. Now update the user `show` view at *app/ views/users/show.html.erb*.
    I used two if statements to first verify that `current_user` is not nil, and then
    to verify that `current_user` is not equal to or already following the user being
    displayed.'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 唯一的`:follow`选项意味着匿名用户仍然可以访问`show`、`new`和`create`操作。现在更新*app/views/users/show.html.erb*中的用户`show`视图。我使用了两个if语句，首先验证`current_user`不是nil，然后验证`current_user`不等于或尚未关注正在显示的用户。
- en: '[PRE35]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: You could have also done this with a single if combining all three of the conditional
    statements.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也可以通过结合所有三个条件语句来使用单个if语句完成此操作。
- en: First, open *app/controllers/image_posts_controller.rb*, and add methods for
    the new and create actions and the private image_post_params method. These are
    similar to the corresponding methods in TextPostsController.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开*app/controllers/image_posts_controller.rb*，并为新建和创建操作以及私有的image_post_params方法添加方法。这些方法类似于TextPostsController中的相应方法。
- en: '[PRE36]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Next, add the new view at *app/views/image_posts/new.html.erb*:'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，在*app/views/image_posts/new.html.erb*中添加新的视图：
- en: '[PRE37]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Then add the form partial at *app/views/image_posts/_form.html.erb*:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后在*app/views/image_posts/_form.html.erb*中添加表单部分：
- en: '[PRE38]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Finally, add a button to the home page at *app/views/posts/index.html. erb*
    that links to the New Image Post form:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，在*app/views/posts/index.html.erb*的主页上添加一个按钮，链接到新的图片帖子表单：
- en: '[PRE39]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Refer back to [Create Post](ch10.html#create_post "Create Post") if you have
    any questions about these actions or views.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这些操作或视图有任何问题，请回顾[创建帖子](ch10.html#create_post "创建帖子")。
- en: Chapter 11
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章
- en: 'First, add methods for the `edit` and `update` actions to the `ImagePostsController`
    at *app/controllers/image_posts_controller.rb,* as shown here:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在*app/controllers/image_posts_controller.rb*中为`edit`和`update`操作添加方法，如下所示：
- en: '[PRE40]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Next, create the `edit` view at *app/views/image_posts/edit.html.erb*:'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，在*app/views/image_posts/edit.html.erb*中创建`edit`视图：
- en: '[PRE41]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This view uses the form partial you created in [Chapter 10](ch10.html "Chapter 10. Testing").
    Finally, add a link to the `edit` action in the `ImagePost` partial at *app/views/image
    _posts/_image_post.html.erb*:'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个视图使用你在[第10章](ch10.html "第10章. 测试")中创建的表单部分。最后，在*app/views/image_posts/_image_post.html.erb*中的`ImagePost`部分添加指向`edit`操作的链接：
- en: '[PRE42]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This link is wrapped in a conditional so it only appears if this image post
    was created by the current user.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个链接被包装在一个条件语句中，只有当该图片帖子是当前用户创建时才会显示。
- en: Update the `PostsController` at *app/controllers/posts_controller.rb,* as shown
    in the question.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新*app/controllers/posts_controller.rb*中的`PostsController`，如问题所示。
- en: '[PRE43]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now edit the comment partial at *app/views/comments/_comment.html.erb* and
    add a link to destroy the comment when the `@can_moderate` instance variable is
    `true`:'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在编辑*app/views/comments/_comment.html.erb*中的评论部分，并在`@can_moderate`实例变量为`true`时添加删除评论的链接：
- en: '[PRE44]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Be sure to add `method: :delete` to the link so the `destroy` action is called.
    Finally, add the `destroy` action to the `CommentsController` at *app/ controllers/comments_controller.rb*:'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '确保在链接中添加`method: :delete`，以便调用`destroy`操作。最后，在*app/controllers/comments_controller.rb*中添加`destroy`操作：'
- en: '[PRE45]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: This method finds the comment, calls `destroy`, and redirects back to the post
    with a message indicating success or failure.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个方法查找评论，调用`destroy`，并重定向回帖子，显示成功或失败的消息。
- en: 'Open the routes file at *config/routes.rb* and edit at the `logout` route:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开*config/routes.rb*中的路由文件，并编辑`logout`路由：
- en: '[PRE46]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Edit the application layout at *app/views/layouts/application.html.erb* and
    add `method: :delete` to the *Log Out* link.'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '编辑位于*app/views/layouts/application.html.erb*的应用布局，并向*Log Out*链接添加`method: :delete`。'
- en: '[PRE47]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Now the link issues a DELETE request to log out of the application.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在该链接会发出DELETE请求以注销应用。
- en: Chapter 12
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章
- en: 'The show page loads the collection of comments to render and then loads the
    owner of each comment individually as the comments are rendered. You can eager
    load the comments and the owners for a post by adding `includes(comments: [:user])`
    in the `show` method in the `PostsController` at *app/controllers/posts_controller.rb:*'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '显示页面加载评论集合以进行渲染，然后在渲染评论时逐个加载每个评论的所有者。您可以通过在`PostsController`中的`show`方法里添加`includes(comments:
    [:user])`来预加载一个帖子的评论和所有者，位置在*app/controllers/posts_controller.rb*：'
- en: '[PRE48]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Adding `includes(comments: [:user])` tells Rails to eager load the comments
    for this post and all users associated with those comments.'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '添加`includes(comments: [:user])`会告诉Rails预加载该帖子的所有评论及其关联的所有用户。'
- en: 'Open the `Comment` partial at *app/views/comments/_comment.html.erb* and add
    the cache block:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开位于*app/views/comments/_comment.html.erb*的`Comment`部分，并添加缓存块：
- en: '[PRE49]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Passing an array to the `cache` method creates a cache key that combines the
    elements in the array ➊. In this case, the cache key contains the values of the
    comment’s `id` and `updated_at` fields and the value of `@can_moderate`, either
    true or false.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将一个数组传递给`cache`方法会创建一个缓存键，该键结合了数组中的元素➊。在这种情况下，缓存键包含了评论的`id`和`updated_at`字段的值，以及`@can_moderate`的值，可能为true或false。
- en: Open the show page at *app/views/posts/show.html.erb* and add the `cache` block.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开位于*app/views/posts/show.html.erb*的显示页面，并添加`cache`块。
- en: '[PRE50]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: This creates a cache key that is a combination of the cache key for `@post`,
    the word “comments,” and the value of `@can_moderate` ➊. Now the comments collection
    is displayed after a single read from the cache.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这会创建一个缓存键，它是`@post`的缓存键、单词“comments”和`@can_moderate`的值的组合➊。现在，评论集合在从缓存中读取一次后就会显示出来。
- en: Chapter 13
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章
- en: 'You need to update the view partials for both types of posts for this exercise.
    First, edit the file *app/views/text_posts/_text_post.html.erb* and add a `debug`
    call near the bottom, as shown here:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要更新此练习中两种类型帖子的视图部分。首先，编辑文件*app/views/text_posts/_text_post.html.erb*并在底部附近添加一个`debug`调用，如下所示：
- en: '[PRE51]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Then edit *app/views/link_posts/_link_post.html.erb* and add a `debug` call
    near the bottom:'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后编辑*app/views/link_posts/_link_post.html.erb*并在底部附近添加一个`debug`调用：
- en: '[PRE52]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The easiest way to add the id and type of each post to the log is by iterating
    over the contents of the `@posts` instance variable. Edit *app/controllers/ posts_controller.rb*
    and update the `index` action.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每个帖子的id和类型添加到日志的最简单方法是遍历`@posts`实例变量的内容。编辑*app/controllers/posts_controller.rb*并更新`index`动作。
- en: '[PRE53]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Now when you refresh the posts index page, you should see five lines similar
    to “Post 5 is a TextPost” in the log.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在当您刷新帖子索引页面时，应该能在日志中看到类似于“Post 5 is a TextPost”的五行记录。
- en: 'To debug what happens when a user logs in to the application, you need to add
    a `debugger` call to the create action in *app/controllers/ sessions_controller.rb*:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了调试用户登录应用时发生的情况，您需要在*app/controllers/sessions_controller.rb*中的create动作里添加一个`debugger`调用：
- en: '[PRE54]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: With this line in place, you can examine the `params` sent to this action, the
    current contents of the `session`, and the value of `user` as you move through
    this action.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这行代码后，您可以检查发送到此动作的`params`，当前`session`的内容，以及在此动作中执行时`user`的值。
- en: Chapter 14
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章
- en: This `curl` command is the same one you used earlier to create a new post, except
    I replaced the *token* with the word `fake`.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个`curl`命令与您之前用来创建新帖子的命令相同，只是我将*token*替换成了`fake`。
- en: '[PRE55]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Note that the status code is *401 Unauthorized* and the body contains the text
    `"HTTP Token: Access denied."`'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '请注意，状态码是*401 Unauthorized*，且响应体包含文本`"HTTP Token: Access denied."`'
- en: Text posts validate the presence of a body, so use `curl` to attempt to create
    a text post without specifying a body.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文本帖子验证正文是否存在，因此使用`curl`尝试创建一个没有指定正文的文本帖子。
- en: '[PRE56]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Note that the status code is *422 Unprocessable Entity* and the body contains
    a JSON representation of the errors.
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，状态码是*422 Unprocessable Entity*，且响应体包含错误的JSON表示。
- en: 'Add the `show` method to *app/controllers/api/posts_controller.rb*:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向*app/controllers/api/posts_controller.rb*添加`show`方法：
- en: '[PRE57]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'This method finds the requested post and assigns it to the `@post` instance
    variable and then responds with that post. The following `curl` command verifies
    that this action is working:'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该方法查找请求的帖子，并将其分配给`@post`实例变量，然后返回该帖子。以下`curl`命令验证此动作是否有效：
- en: '[PRE58]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Because you didn’t create a jbuilder view for this action, the default JSON
    representation for posts is returned.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你没有为此操作创建 jbuilder 视图，所以返回的是帖子默认的 JSON 表示形式。
- en: Chapter 15
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第15章
- en: 'Edit the file *app/views/layouts/application.html.erb* to change the title
    of each page:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑文件 *app/views/layouts/application.html.erb* 以更改每个页面的标题：
- en: '[PRE59]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: After you save this change, add it to your local Git repositories staging area,
    and then commit the change with an appropriate `commit` message.
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在保存此更改后，将其添加到本地 Git 仓库的暂存区，然后使用合适的 `commit` 消息提交更改。
- en: '[PRE60]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Now deploy your change by entering **`bin/cap production deploy`** in your terminal.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，通过在终端中输入 **`bin/cap production deploy`** 来部署你的更改。
- en: The Ruby Toolbox at *[https://www.ruby-toolbox.com/](https://www.ruby-toolbox.com/)*
    lists hundreds of gems you can use to add features to your application. For example,
    you can let users upload files to your application. Check the Rails File Uploads
    category to find several choices, including Paperclip and CarrierWave. From there,
    you can visit the website, read the documentation, and see the source code for
    each project.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ruby 工具箱在 *[https://www.ruby-toolbox.com/](https://www.ruby-toolbox.com/)* 上列出了数百个宝石，你可以用来为你的应用添加功能。例如，你可以让用户向你的应用上传文件。查看
    Rails 文件上传类别，找到多个选项，包括 Paperclip 和 CarrierWave。在这里，你可以访问网站，阅读文档，并查看每个项目的源代码。
- en: Go to *[https://github.com/rails/rails/](https://github.com/rails/rails/)* to
    join the discussion on open issues and pull requests, and see previous commits.
    Ruby on Rails has a page at *[http://rubyonrails.org/community/](http://rubyonrails.org/community/)*
    for those looking to get involved online. You can learn about upcoming Ruby and
    Rails conferences at *[http://rubyconf.org/](http://rubyconf.org/)* and *[http://railsconf.com,/](http://railsconf.com,/)*
    respectively. I hope to see you there!
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 *[https://github.com/rails/rails/](https://github.com/rails/rails/)* 参与讨论开放问题和拉取请求，并查看以前的提交记录。Ruby
    on Rails 也有一个页面 *[http://rubyonrails.org/community/](http://rubyonrails.org/community/)*，供那些希望在线参与的人。你可以在
    *[http://rubyconf.org/](http://rubyconf.org/)* 和 *[http://railsconf.com,/](http://railsconf.com,/)*
    分别了解即将举行的 Ruby 和 Rails 大会。希望在那里见到你！
