- en: Chapter 5. Inheritance
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第5章：继承
- en: Learning how to create objects is the first step to understanding object-oriented
    programming. The second step is to understand inheritance. In traditional object-oriented
    languages, classes inherit properties from other classes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何创建对象是理解面向对象编程的第一步。第二步是理解继承。在传统的面向对象语言中，类从其他类继承属性。
- en: 'In JavaScript, however, inheritance can occur between objects with no classlike
    structure defining the relationship. The mechanism for this inheritance is one
    with which you are already familiar: prototypes.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在 JavaScript 中，继承可以发生在没有类结构来定义关系的对象之间。实现这种继承的机制是你已经熟悉的：原型。
- en: Prototype Chaining and Object.prototype
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原型链和`Object.prototype`
- en: 'JavaScript’s built-in approach for inheritance is called *prototype chaining*,
    or *prototypal inheritance*. As you learned in [Chapter 4](ch04.html "Chapter 4. Constructors
    and Prototypes"), prototype properties are automatically available on object instances,
    which is a form of inheritance. The object instances inherit properties from the
    prototype. Because the prototype is also an object, it has its own prototype and
    inherits properties from that. This is the *prototype chain*: An object inherits
    from its prototype, while that prototype in turn inherits from its prototype,
    and so on.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的内置继承方式叫做*原型链*，或者*原型继承*。正如你在[第4章](ch04.html "第4章：构造函数与原型")中学到的，原型属性会自动在对象实例上可用，这是一种继承形式。对象实例从原型中继承属性。因为原型本身也是一个对象，它有自己的原型，并从那个原型中继承属性。这就是*原型链*：一个对象从它的原型继承，而那个原型又从它的原型继承，以此类推。
- en: 'All objects, including those you define yourself, automatically inherit from
    `Object` unless you specify otherwise (discussed later in this chapter). More
    specifically, all objects inherit from `Object.prototype`. Any object defined
    via an object literal has its `[[Prototype]]` set to `Object.prototype`, meaning
    that it inherits properties from `Object.prototype`, just like `book` in this
    example:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所有对象，包括你自己定义的对象，默认都继承自`Object`，除非你另行指定（稍后在本章讨论）。更具体地说，所有对象都继承自`Object.prototype`。通过对象字面量定义的任何对象，其`[[Prototype]]`会被设置为`Object.prototype`，这意味着它继承自`Object.prototype`的属性，就像这个示例中的`book`一样：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, `book` has a prototype equal to `Object.prototype`. No additional code
    was necessary to make this happen, as this is the default behavior when new objects
    are created. This relationship means that `book` automatically receives methods
    from `Object.prototype`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`book`的原型等于`Object.prototype`。为了实现这一点，并不需要额外的代码，因为这是创建新对象时的默认行为。这种关系意味着`book`自动从`Object.prototype`继承方法。
- en: Methods Inherited from Object.prototype
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从`Object.prototype`继承的方法
- en: 'Several of the methods used in the past couple of chapters are actually defined
    on `Object.prototype` and are therefore inherited by all other objects. Those
    methods are:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几章中使用的几个方法实际上是在`Object.prototype`上定义的，因此被所有其他对象继承。这些方法包括：
- en: '****`hasOwnProperty()`****. Determines whether an own property with the given
    name exists'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****`hasOwnProperty()`****。确定给定名称的自有属性是否存在'
- en: '****`propertyIsEnumerable()`****. Determines whether an own property is enumerable'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****`propertyIsEnumerable()`****。确定自有属性是否可枚举'
- en: '****`isPrototypeOf()`****. Determines whether the object is the prototype of
    another'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****`isPrototypeOf()`****。确定对象是否是另一个对象的原型'
- en: '****`valueOf()`****. Returns the value representation of the object'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****`valueOf()`****。返回对象的值表示'
- en: '****`toString()`****. Returns a string representation of the object'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****`toString()`****。返回对象的字符串表示'
- en: These five methods appear on all objects through inheritance. The last two are
    important when you need to make objects work consistently in JavaScript, and sometimes
    you might want to define them yourself.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这五个方法通过继承出现在所有对象上。最后两个方法在需要使对象在 JavaScript 中始终如一地工作时很重要，有时你可能想要自己定义这些方法。
- en: valueOf()
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: valueOf()
- en: 'The `valueOf()` method gets called whenever an operator is used on an object.
    By default, `valueOf()` simply returns the object instance. The primitive wrapper
    types override `valueOf()` so that it returns a string for `String`, a Boolean
    for `Boolean`, and a number for `Number`. Likewise, the `Date` object’s `valueOf()`
    method returns the epoch time in milliseconds (just as `Date.prototype.getTime()`
    does). This is what allows you to write code that compares dates such as:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`valueOf()` 方法会在对对象使用操作符时被调用。默认情况下，`valueOf()` 仅返回对象实例。原始包装类型会重写 `valueOf()`，使其分别返回
    `String` 的字符串、`Boolean` 的布尔值和 `Number` 的数字。同样，`Date` 对象的 `valueOf()` 方法返回纪元时间的毫秒数（就像
    `Date.prototype.getTime()` 所做的那样）。这使得你能够编写比较日期的代码，例如：'
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, `now` is a `Date` representing the current time, and `earlier`
    is a fixed date in the past. When the greater-than operator (`>`) is used ❶, the
    `valueOf()` method is called on both objects before the comparison is performed.
    You can even subtract one date from another and get the difference in epoch time
    because of `valueOf()`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`now` 是表示当前时间的 `Date` 对象，`earlier` 是过去某个固定的日期。当使用大于操作符（`>`）时❶，会在进行比较前分别对两个对象调用
    `valueOf()` 方法。你甚至可以将一个日期从另一个日期中减去，得到纪元时间的差值，因为 `valueOf()` 的存在。
- en: You can always define your own `valueOf()` method if your objects are intended
    to be used with operators. If you do define a `valueOf()` method, keep in mind
    that you’re not changing how the operator works, only what value is used with
    the operator’s default behavior.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的对象需要与操作符一起使用，你可以随时定义你自己的 `valueOf()` 方法。如果你定义了 `valueOf()` 方法，请记住，你并没有改变操作符的工作方式，而只是改变了操作符默认行为时所使用的值。
- en: toString()
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: toString()
- en: 'The `toString()` method is called as a fallback whenever `valueOf()` returns
    a reference value instead of a primitive value. It is also implicitly called on
    primitive values whenever JavaScript is expecting a string. For example, when
    a string is used as one operand for the plus operator, the other operand is automatically
    converted to a string. If the other operand is a primitive value, it is converted
    into a string representation (for example, `true` becomes `"true"`), but if it
    is a reference value, then `valueOf()` is called. If `valueOf()` returns a reference
    value, `toString()` is called and the returned value is used. For example:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `valueOf()` 返回引用值而不是原始值时，`toString()` 方法会作为备用方法被调用。当 JavaScript 期望字符串时，它也会隐式调用原始值的
    `toString()` 方法。例如，当字符串作为加法操作符的一个操作数时，另一个操作数会自动转换为字符串。如果另一个操作数是原始值，它会被转换为字符串表示（例如，`true`
    变为 `"true"`），但如果它是引用值，则会调用 `valueOf()`。如果 `valueOf()` 返回引用值，则会调用 `toString()`，并使用返回的值。例如：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This code constructs the string by combining `"Book = "` with `book`. Since
    `book` is an object, its `toString()` method is called. That method is inherited
    from `Object.prototype` and returns the default value of `"[object Object]"` in
    most JavaScript engines. If you are happy with that value, there’s no need to
    change your object’s `toString()` method. Sometimes, however, it’s useful to define
    your own `toString()` method so that string conversions return a value that gives
    more information. Suppose, for example, that you want the previous script to log
    the book’s title:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码通过将 `"Book = "` 与 `book` 结合来构造字符串。由于 `book` 是一个对象，它的 `toString()` 方法会被调用。这个方法是从
    `Object.prototype` 继承来的，并且在大多数 JavaScript 引擎中会返回默认值 `"[object Object]"`。如果你对这个值感到满意，就无需更改对象的
    `toString()` 方法。然而，有时定义你自己的 `toString()` 方法是有用的，这样字符串转换时返回的值可以提供更多信息。例如，假设你希望前面的脚本输出书籍的标题：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This code defines a custom `toString()` method for `book` that returns a more
    useful value ❶ than the inherited version. You don’t usually need to worry about
    defining a custom `toString()` method, but it’s good to know that it’s possible
    to do so if necessary.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码为 `book` 定义了一个自定义的 `toString()` 方法，返回一个比继承版本更有用的值❶。你通常不需要担心定义自定义的 `toString()`
    方法，但知道如果需要的话可以这么做还是挺好的。
- en: Modifying Object.prototype
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改 Object.prototype
- en: 'All objects inherit from `Object.prototype` by default, so changes to `Object.prototype`
    affect all objects. That’s a very dangerous situation. You were advised in [Chapter 4](ch04.html
    "Chapter 4. Constructors and Prototypes") not to modify built-in object prototypes,
    and that advice goes double for `Object.prototype`. Take a look at what can happen:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所有对象默认都继承自 `Object.prototype`，因此对 `Object.prototype` 的修改会影响所有对象。这是一个非常危险的情况。你在[第4章](ch04.html
    "第4章 构造函数和原型")中被建议不要修改内建对象的原型，而这个建议对于 `Object.prototype` 来说尤为重要。看看会发生什么：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Adding `Object.prototype.add()` causes all objects to have an `add()` method,
    whether or not it actually makes sense. This problem has been an issue not just
    for developers but also for the committee that works on the JavaScript language:
    It has had to put new methods in different locations because adding methods to
    `Object.prototype` can have unforeseen consequences.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`Object.prototype.add()`会导致所有对象都有一个`add()`方法，无论它是否真正有意义。这个问题不仅对开发者来说是一个难题，也对参与JavaScript语言标准化的委员会构成挑战：他们不得不将新方法放置在不同的位置，因为向`Object.prototype`添加方法可能会带来无法预见的后果。
- en: 'Another aspect of this problem involves adding enumerable properties to `Object.prototype`.
    In the previous example, `Object.prototype.add()` is an enumerable property, which
    means it will show up when you use a `for-in` loop, such as:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的另一个方面涉及向`Object.prototype`添加可枚举属性。在之前的示例中，`Object.prototype.add()`是一个可枚举属性，这意味着它会在使用`for-in`循环时出现，如下所示：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, an empty object will still output `"add"` as a property because it exists
    on the prototype and is enumerable. Given how often the `for-in` construct is
    used in JavaScript, modifying `Object.prototype` with enumerable properties has
    the potential to affect a lot of code. For this reason, Douglas Crockford recommends
    using `hasOwnProperty()` in `for-in` loops all the time,^([[1](#ftn.ch05fn01)])
    such as:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，一个空对象仍然会输出`"add"`作为属性，因为它存在于原型中并且是可枚举的。考虑到在JavaScript中`for-in`语法的使用频率，修改`Object.prototype`并添加可枚举属性可能会影响大量代码。因此，道格拉斯·克罗克福德建议在`for-in`循环中始终使用`hasOwnProperty()`，例如：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: While this approach is effective against possible unwanted prototype properties,
    it also limits the use of `for-in` to only own properties, which may or may not
    be want you want. Your best bet for the most flexibility is to not modify `Object.prototype`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种方法有效地避免了不必要的原型属性，但它也将`for-in`的使用限制为仅限对象的自有属性，这可能并非你所希望的。为了获得最大的灵活性，最好的做法是不要修改`Object.prototype`。
- en: Object Inheritance
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象继承
- en: The simplest type of inheritance is between objects. All you have to do is specify
    what object should be the new object’s `[[Prototype]]`. Object literals have `Object.prototype`
    set as their `[[Prototype]]` implicitly, but you can also explicitly specify `[[Prototype]]`
    with the `Object.create()` method.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的继承类型是在对象之间。你需要做的就是指定哪个对象应该作为新对象的`[[Prototype]]`。对象字面量默认将`Object.prototype`设置为其`[[Prototype]]`，但你也可以通过`Object.create()`方法显式指定`[[Prototype]]`。
- en: 'The `Object.create()` method accepts two arguments. The first argument is the
    object to use for `[[Prototype]]` in the new object. The optional second argument
    is an object of property descriptors in the same format used by `Object.defineProperties()`
    (see [Chapter 3](ch03.html "Chapter 3. Understanding Objects")). Consider the
    following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object.create()`方法接受两个参数。第一个参数是新对象的`[[Prototype]]`所使用的对象。可选的第二个参数是一个属性描述符对象，格式与`Object.defineProperties()`中使用的相同（请参见[第3章](ch03.html
    "第3章：理解对象")）。请考虑以下示例：'
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The two declarations in this code are effectively the same. The first declaration
    uses an object literal to define an object with a single property called `title`.
    That object automatically inherits from `Object.prototype`, and the property is
    set to be configurable, enumerable, and writable by default. The second declaration
    takes the same steps but does so explicitly using `Object.create()`. The resulting
    `book` object from each declaration behaves the exact same way. But you’ll probably
    never write code that inherits from `Object.prototype` directly, because you get
    that by default. Inheriting from other objects is much more interesting:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码中的两个声明实际上是相同的。第一个声明使用对象字面量定义一个具有单一属性`title`的对象。该对象自动继承自`Object.prototype`，并且默认情况下该属性是可配置的、可枚举的和可写的。第二个声明采取相同的步骤，但使用`Object.create()`显式完成。每个声明所得到的`book`对象行为完全相同。但你可能永远不会编写直接从`Object.prototype`继承的代码，因为默认情况下你已经获得了它。从其他对象继承才更有趣：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This code creates an object, `person1`, with a `name` property and a `sayName()`
    method. The `person2` object inherits from `person1`, so it inherits both `name`
    and `sayName()`. However, `person2` is defined via `Object.create()`, which also
    defines an own `name` property for `person2`. This own property shadows the prototype
    property of the same name and is used in its place. So, `person1.sayName()` outputs
    `"Nicholas"`, while `person2.sayName()` outputs `"Greg"`. Keep in mind that `sayName()`
    still exists only on `person1` and is being inherited by `person2`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码创建了一个对象`person1`，它有一个`name`属性和一个`sayName()`方法。`person2`对象继承自`person1`，因此它继承了`name`和`sayName()`。然而，`person2`是通过`Object.create()`定义的，这也为`person2`定义了一个自己的`name`属性。这个自己的属性遮蔽了同名的原型属性，并被用作替代。所以，`person1.sayName()`输出`"Nicholas"`，而`person2.sayName()`输出`"Greg"`。请记住，`sayName()`仍然只存在于`person1`上，并由`person2`继承。
- en: The inheritance chain in this example is longer for `person2` than it is for
    `person1`. The `person2` object inherits from the `person1` object, and the `person1`
    object inherits from `Object.prototype`. See [Figure 5-1](ch05.html#prototype_chain_for_person2_includes_per
    "Figure 5-1. The prototype chain for person2 includes person1 and Object.prototype.").
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`person2`的继承链比`person1`更长。`person2`对象继承自`person1`对象，而`person1`对象继承自`Object.prototype`。参见[图5-1](ch05.html#prototype_chain_for_person2_includes_per
    "图5-1：`person2`的原型链包括`person1`和`Object.prototype`)。
- en: '![The prototype chain for person2 includes person1 and Object.prototype.](figs/web/oojs05_01.png.jpg)Figure 5-1. The
    prototype chain for `person2` includes `person1` and `Object.prototype`.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '![person2的原型链包括person1和Object.prototype](figs/web/oojs05_01.png.jpg)图5-1：`person2`的原型链包括`person1`和`Object.prototype`。'
- en: When a property is accessed on an object, the JavaScript engine goes through
    a search process. If the property is found on the instance (that is, if it’s an
    own property), that property value is used. If the property is not found on the
    instance, the search continues on `[[Prototype]]`. If the property is still not
    found, the search continues to that object’s `[[Prototype]]`, and so on until
    the end of the chain is reached. That chain usually ends with `Object.prototype`,
    whose `[[Prototype]]` is set to `null`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问对象的属性时，JavaScript引擎会进行搜索。如果属性在实例上找到（即它是一个自己的属性），则使用该属性的值。如果在实例上找不到该属性，搜索将继续在`[[Prototype]]`上进行。如果仍然没有找到属性，搜索会继续到该对象的`[[Prototype]]`，以此类推，直到链条的末端。通常，这条链会以`Object.prototype`结束，而它的`[[Prototype]]`被设置为`null`。
- en: 'You can also create objects with a `null [[Prototype]]` via `Object.create()`,
    such as:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过`Object.create()`创建一个`null [[Prototype]]`的对象，例如：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `nakedObject` in this example is an object with no prototype chain. That
    means built-in methods such as `toString()` and `valueOf()` aren’t present on
    the object. In effect, this object is a completely blank slate with no predefined
    properties, which makes it perfect for creating a lookup hash without potential
    naming collisions with inherited property names. There aren’t many other uses
    for an object like this, and you can’t use it as if it were inheriting from `Object.prototype`.
    For example, any time you use an operator on `nakedObject`, you’ll just get an
    error along the lines of “Cannot convert object to primitive value.” Still, it’s
    an interesting quirk of the JavaScript language that you can create a prototype-less
    object.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例中的`nakedObject`是一个没有原型链的对象。这意味着像`toString()`和`valueOf()`这样的内建方法不再该对象上。实际上，这个对象是一个完全空白的模板，没有任何预定义的属性，因此它非常适合用来创建查找哈希表，而不会与继承的属性名称发生潜在的命名冲突。这样的对象用途并不多，而且你不能将其当作是继承自`Object.prototype`来使用。例如，每当你对`nakedObject`使用操作符时，你只会收到类似“无法将对象转换为原始值”的错误信息。不过，这是JavaScript语言中的一个有趣特点，你可以创建一个没有原型的对象。
- en: Constructor Inheritance
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构造函数继承
- en: 'Object inheritance in JavaScript is also the basis of constructor inheritance.
    Recall from [Chapter 4](ch04.html "Chapter 4. Constructors and Prototypes") that
    almost every function has a `prototype` property that can be modified or replaced.
    That `prototype` property is automatically assigned to be a new generic object
    that inherits from `Object.prototype` and has a single own property called `constructor`.
    In effect, the JavaScript engine does the following for you:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的对象继承也是构造函数继承的基础。回顾[第4章](ch04.html "第4章：构造函数与原型")，几乎每个函数都有一个可以修改或替换的`prototype`属性。该`prototype`属性会自动被赋值为一个新的通用对象，这个对象继承自`Object.prototype`，并有一个名为`constructor`的自身属性。实际上，JavaScript引擎为你做了以下操作：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: So without doing anything extra, this code sets the constructor’s `prototype`
    property to an object that inherits from `Object.prototype`, which means any instances
    of `YourConstructor` also inherit from `Object.prototype`. `YourConstructor` is
    a *subtype* of `Object`, and `Object` is a *supertype* of `YourConstructor`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在不做任何额外操作的情况下，这段代码将构造函数的 `prototype` 属性设置为一个从 `Object.prototype` 继承的对象，这意味着任何
    `YourConstructor` 的实例也会继承自 `Object.prototype`。`YourConstructor` 是 `Object` 的*子类型*，而
    `Object` 是 `YourConstructor` 的*超类型*。
- en: 'Because the `prototype` property is writable, you can change the prototype
    chain by overwriting it. Consider the following example:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `prototype` 属性是可写的，你可以通过覆盖它来改变原型链。请考虑以下示例：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In this code, there are two constructors: `Rectangle` ❶ and `Square` ❷. The
    `Square` constructor has its `prototype` property overwritten with an instance
    of `Rectangle`. No arguments are passed into `Rectangle` at this point because
    they don’t need to be used, and if they were, all instances of `Square` would
    share the same dimensions. To change the prototype chain this way, you always
    need to make sure that the constructor won’t throw an error if the arguments aren’t
    supplied (many constructors contain initialization logic that may require the
    arguments) and that the constructor isn’t altering any sort of global state, such
    as keeping track of how many instances have been created. The `constructor` property
    is restored on `Square.prototype` after the original value is overwritten.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，有两个构造函数：`Rectangle` ❶ 和 `Square` ❷。`Square` 构造函数的 `prototype` 属性被覆盖为
    `Rectangle` 的一个实例。在这一点上，`Rectangle` 并没有传入任何参数，因为这些参数不需要使用，如果传入参数，所有 `Square` 的实例将共享相同的维度。为了以这种方式改变原型链，你需要确保构造函数在没有传入参数时不会抛出错误（许多构造函数包含可能需要参数的初始化逻辑），并且构造函数不会修改任何全局状态，比如跟踪已创建的实例数量。在原始值被覆盖后，`constructor`
    属性会被恢复到 `Square.prototype` 上。
- en: After that, `rect` is created as an instance of `Rectangle`, and `square` is
    created as an instance of `Square`. Both objects have the `getArea()` method because
    it is inherited from `Rectangle.prototype`. The `square` variable is considered
    an instance of `Square` as well as `Rectangle` and `Object` because `instanceof`
    uses the prototype chain to determine the object type. See [Figure 5-2](ch05.html#prototype_chains_for_square_and_rect_sho
    "Figure 5-2. The prototype chains for square and rect show that both inherit from
    Rectangle.prototype and Object.prototype, but only square inherits from Square.prototype.").
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，`rect` 被创建为 `Rectangle` 的一个实例，`square` 被创建为 `Square` 的一个实例。两个对象都有 `getArea()`
    方法，因为它是从 `Rectangle.prototype` 继承来的。`square` 变量被视为 `Square`、`Rectangle` 和 `Object`
    的实例，因为 `instanceof` 使用原型链来确定对象类型。参见 [图 5-2](ch05.html#prototype_chains_for_square_and_rect_sho
    "图 5-2. square 和 rect 的原型链显示它们都继承自 Rectangle.prototype 和 Object.prototype，但只有
    square 继承自 Square.prototype。")。
- en: '![The prototype chains for square and rect show that both inherit from Rectangle.prototype
    and Object.prototype, but only square inherits from Square.prototype.](figs/web/oojs05_02.png.jpg)Figure 5-2. The
    prototype chains for `square` and `rect` show that both inherit from `Rectangle.prototype`
    and `Object.prototype`, but only `square` inherits from `Square.prototype`.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![square 和 rect 的原型链显示它们都继承自 Rectangle.prototype 和 Object.prototype，但只有 square
    继承自 Square.prototype。](figs/web/oojs05_02.png.jpg)图 5-2. `square` 和 `rect` 的原型链显示它们都继承自
    `Rectangle.prototype` 和 `Object.prototype`，但只有 `square` 继承自 `Square.prototype`。'
- en: '`Square.prototype` doesn’t actually need to be overwritten with a `Rectangle`
    object, though; the `Rectangle` constructor isn’t doing anything that is necessary
    for `Square`. In fact, the only relevant part is that `Square.prototype` needs
    to somehow link to `Rectangle.prototype` in order for inheritance to happen. That
    means you can simplify this example by using `Object.create()` once again.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，`Square.prototype` 并不需要用一个 `Rectangle` 对象来覆盖；`Rectangle` 构造函数并没有做任何 `Square`
    所需要的事情。实际上，唯一相关的部分是，`Square.prototype` 需要以某种方式链接到 `Rectangle.prototype`，以便发生继承。这意味着你可以通过再次使用
    `Object.create()` 来简化这个示例。
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this version of the code, `Square.prototype` is overwritten with a new object
    that inherits from `Rectangle.prototype`, and the `Rectangle` constructor is never
    called. That means you don’t need to worry about causing an error by calling the
    constructor without arguments anymore. Otherwise, this code behaves exactly the
    same as the previous code. The prototype chain remains intact, so all instances
    of `Square` inherit from `Rectangle.prototype` and the constructor is restored
    in the same step.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个版本的代码中，`Square.prototype` 被一个新的对象覆盖，该对象继承自 `Rectangle.prototype`，并且 `Rectangle`
    构造函数从未被调用。这意味着你不需要再担心因为没有参数调用构造函数而导致错误。否则，这段代码的行为与之前的代码完全相同。原型链保持完整，因此所有 `Square`
    的实例都继承自 `Rectangle.prototype`，且构造函数在同一步骤中被恢复。
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*Always make sure that you overwrite the prototype* before *adding properties
    to it, or you will lose the added methods when the overwrite happens.*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*请始终确保在*添加属性之前*覆盖原型，否则当覆盖发生时，你将丢失已添加的方法。*'
- en: Constructor Stealing
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构造函数偷窃
- en: Because inheritance is accomplished through prototype chains in JavaScript,
    you don’t need to call an object’s supertype constructor. If you do want to call
    the supertype constructor from the subtype constructor, then you need to take
    advantage of how JavaScript functions work.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 JavaScript 中的继承是通过原型链实现的，你不需要调用对象的超类构造函数。如果你确实希望从子类构造函数中调用超类构造函数，那么你需要利用
    JavaScript 函数的工作原理。
- en: 'In [Chapter 2](ch02.html "Chapter 2. Functions"), you learned about the `call()`
    and `apply()` methods, which allow functions to be called with a different `this`
    value. That’s exactly how *constructor stealing* works. You simply call the supertype
    constructor from the subtype constructor using either `call()` or `apply()` to
    pass in the newly created object. In effect, you’re stealing the supertype constructor
    for your own object, as in this example:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 2 章](ch02.html "第 2 章. 函数")中，你学习了 `call()` 和 `apply()` 方法，它们允许函数使用不同的 `this`
    值被调用。这正是*构造函数偷窃*的实现方式。你只需要使用 `call()` 或 `apply()` 来从子类构造函数中调用超类构造函数，并传入新创建的对象。实际上，你是在为自己的对象偷用超类构造函数，就像这个例子一样：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The ❶ `Square` constructor calls the `Rectangle` constructor and passes in `this`
    as well as `size` two times (once for `length` and once for `width`). Doing so
    creates the `length` and `width` properties on the new object and makes each equal
    to `size`. This is the way to avoid redefining properties from a constructor from
    which you want to inherit. You can add new properties or override existing ones
    after applying the super type constructor.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`Square` 构造函数调用了 `Rectangle` 构造函数，并将 `this` 以及 `size` 两次传入（一次用于 `length`，一次用于
    `width`）。这样做会在新对象上创建 `length` 和 `width` 属性，并将它们的值设为 `size`。这是避免重新定义继承自父类构造函数的属性的一种方式。在调用超类构造函数后，你可以添加新的属性或覆盖现有的属性。'
- en: This two-step process is useful when you need to accomplish inheritance between
    custom types. You’ll always need to modify a constructor’s prototype, and you
    may also need to call the supertype constructor from within the subtype constructor.
    Generally, you’ll modify the prototype for method inheritance and use constructor
    stealing for properties. This approach is typically referred to as *pseudoclassical
    inheritance* because it mimics classical inheritance from class-based languages.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个两步过程在你需要实现自定义类型之间的继承时非常有用。你总是需要修改构造函数的原型，并且可能还需要从子类构造函数内部调用超类构造函数。通常，你会修改原型以进行方法继承，并使用构造函数偷窃来继承属性。这个方法通常被称为*伪经典继承*，因为它模仿了基于类的语言中的经典继承方式。
- en: Accessing Supertype Methods
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问超类方法
- en: 'In the previous example, the `Square` type has its own `toString()` method
    that shadows `toString()` on the prototype. It is fairly common to override supertype
    methods with new functionality in the subtype, but what if you still want to access
    the supertype method? In other languages, you might be able to say `super.toString()`,
    but JavaScript doesn’t have anything similar. Instead, you can directly access
    the method on the supertype’s prototype and use either `call()` or `apply()` to
    execute the method on the subtype object. For example:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的例子中，`Square` 类型有自己的 `toString()` 方法，这会覆盖原型上的 `toString()`。在子类中用新功能覆盖超类方法是比较常见的做法，但如果你仍然想访问超类方法怎么办呢？在其他语言中，你可能可以使用
    `super.toString()`，但 JavaScript 没有类似的东西。相反，你可以直接访问超类原型上的方法，并使用 `call()` 或 `apply()`
    在子类对象上执行该方法。例如：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this version of the code, ❶ `Square.prototype.toString()` calls `Rectangle.prototype.toString()`
    by using `call()`. The method just needs to replace `"Rectangle"` with `"Square"`
    before returning the resulting text. This approach may seem a bit verbose for
    such a simple operation, but it is the only way to access a supertype’s method.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在此版本的代码中，❶ `Square.prototype.toString()` 通过使用 `call()` 调用 `Rectangle.prototype.toString()`。该方法只需在返回结果文本之前将
    `"Rectangle"` 替换为 `"Square"`。对于这样一个简单的操作，这种方法可能看起来有点冗长，但它是访问超类型方法的唯一方式。
- en: Summary
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: JavaScript supports inheritance through prototype chaining. A prototype chain
    is created between objects when the `[[Prototype]]` of one object is set equal
    to another. All generic objects automatically inherit from `Object.prototype`.
    If you want to create an object that inherits from something else, you can use
    `Object.create()` to specify the value of `[[Prototype]]` for a new object.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript通过原型链支持继承。当一个对象的`[[Prototype]]`被设置为另一个对象时，会在对象之间创建原型链。所有通用对象自动继承自`Object.prototype`。如果你想创建一个继承自其他对象的对象，可以使用`Object.create()`来指定新对象的`[[Prototype]]`值。
- en: You accomplish inheritance between custom types by creating a prototype chain
    on the constructor. By setting the constructor’s `prototype` property to another
    value, you create inheritance between instances of the custom type and the prototype
    of that other value. All instances of that constructor share the same prototype,
    so they all inherit from the same object. This technique works very well for inheriting
    methods from other objects, but you cannot inherit own properties using prototypes.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过在构造函数上创建原型链来实现自定义类型之间的继承。通过将构造函数的`prototype`属性设置为另一个值，你在自定义类型的实例与该另一个值的原型之间创建了继承关系。该构造函数的所有实例共享相同的原型，因此它们都从同一个对象继承。这种技术非常适合从其他对象继承方法，但你不能通过原型继承自身的属性。
- en: To inherit own properties correctly, you can use constructor stealing, which
    is simply calling a constructor function using `call()` or `apply()` so that any
    initialization is done on the subtype object. Combining constructor stealing and
    prototype chaining is the most common way to achieve inheritance between custom
    types in JavaScript. This combination is frequently called pseudoclassical inheritance
    because of its similarity to inheritance in class-based languages.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要正确继承自身属性，可以使用构造函数窃取技术，即使用`call()`或`apply()`调用构造函数，这样可以确保任何初始化都在子类型对象上进行。结合构造函数窃取和原型链是实现JavaScript中自定义类型之间继承的最常见方法。这种组合通常被称为伪经典继承，因为它类似于基于类的语言中的继承。
- en: You can access methods on a supertype by directly accessing the supertype’s
    prototype. In doing so, you must use `call()` or `apply()` to execute the supertype
    method on the subtype object.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过直接访问超类型的原型来访问超类型的方法。在这样做时，必须使用`call()`或`apply()`在子类型对象上执行超类型方法。
- en: '* * *'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: ^([[1](#ch05fn01)]) See Douglas Crockford’s “Code Conventions for the JavaScript
    Programming Language” (*[http://javascript.crockford.com/code.html](http://javascript.crockford.com/code.html)*).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: ^([[1](#ch05fn01)]) 参见Douglas Crockford的《JavaScript 编程语言代码规范》 (*[http://javascript.crockford.com/code.html](http://javascript.crockford.com/code.html)*).
