- en: Chapter 16. Extended Attributes
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第16章. 扩展属性
- en: This chapter describes extended attributes (EAs), which allow arbitrary metadata,
    in the form of name-value pairs, to be associated with file i-nodes. EAs were
    added to Linux in version 2.6.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述了扩展属性（EA），它允许将任意的元数据（以名称-值对的形式）与文件i节点关联。EA是在Linux 2.6版本中加入的。
- en: Overview
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: EAs are used to implement access control lists ([Chapter 17](ch17.html "Chapter 17. Access
    Control Lists")) and file capabilities ([Chapter 39](ch39.html "Chapter 39. Capabilities")).
    However, the design of EAs is general enough to allow them to be used for other
    purposes as well. For example, EAs could be used to record a file version number,
    information about the MIME type or character set for the file, or (a pointer to)
    a graphical icon.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: EA用于实现访问控制列表（[第17章](ch17.html "第17章. 访问控制列表")）和文件能力（[第39章](ch39.html "第39章.
    能力")）。然而，EA的设计足够通用，也允许它们用于其他目的。例如，EA可以用来记录文件版本号、文件的MIME类型或字符集信息，或者（指向）一个图标。
- en: EAs are not specified in SUSv3\. However, a similar feature is provided on a
    few other UNIX implementations, notably the modern BSDs (see *extattr(2)*) and
    Solaris 9 and later (see *fsattr(5)*).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: EA在SUSv3中没有被规范化。然而，类似的功能在一些其他UNIX实现中提供，特别是现代BSD系统（参见*extattr(2)*)和Solaris 9及以后版本（参见*fsattr(5)*）。
- en: EAs require support from the underlying file system. This support is provided
    in *Btrfs*, *ext2*, *ext3*, *ext4*, *JFS*, *Reiserfs*, and *XFS*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: EA需要底层文件系统的支持。*Btrfs*、*ext2*、*ext3*、*ext4*、*JFS*、*Reiserfs*和*XFS*都提供了这种支持。
- en: Note
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Support for EAs is optional for each file system, and is controlled by kernel
    configuration options under the *File systems* menu. EAs are supported on *Reiserfs*
    since Linux 2.6.7.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个文件系统，EA的支持是可选的，且由*文件系统*菜单下的内核配置选项控制。从Linux 2.6.7开始，*Reiserfs*支持EA。
- en: EA namespaces
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: EA命名空间
- en: EAs have names of the form *namespace.name*. The *namespace* component serves
    to separate EAs into functionally distinct classes. The *name* component uniquely
    identifies an EA within the given *namespace*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: EA的名称形式为*命名空间.名称*。*命名空间*组件用于将EA划分为不同功能的类别。*名称*组件在给定的*命名空间*内唯一标识一个EA。
- en: 'Four values are supported for *namespace*: *user*, *trusted*, *system*, and
    *security*. These four types of EAs are used as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 支持四种*命名空间*的值：*user*、*trusted*、*system*和*security*。这四种EA类型的使用方式如下：
- en: '*User* EAs may be manipulated by unprivileged processes, subject to file permission
    checks: to retrieve the value of a *user* EA requires read permission on the file;
    to change the value of a *user* EA requires write permission. (Lack of the required
    permission results in an `EACCES` error.) In order to associate *user* EAs with
    a file on *ext2*, *ext3*, *ext4*, or *Reiserfs* file systems, the underlying file
    system must be mounted with the *user_xattr* option:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*User* EA可以被非特权进程操作，但需要进行文件权限检查：检索*user* EA的值需要对文件具有读取权限；更改*user* EA的值需要对文件具有写入权限。（缺少所需权限会导致`EACCES`错误。）为了将*user*
    EA与*ext2*、*ext3*、*ext4*或*Reiserfs*文件系统中的文件关联，必须使用*user_xattr*选项挂载底层文件系统：'
- en: '[PRE0]'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Trusted* EAs are like *user* EAs in that they can be manipulated by user processes.
    The difference is that a process must be privileged (`CAP_SYS_ADMIN`) in order
    to manipulate *trusted* EAs.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Trusted* EA与*user* EA类似，可以被用户进程操作。不同之处在于，进程必须具备特权（`CAP_SYS_ADMIN`）才能操作*trusted*
    EA。'
- en: '*System* EAs are used by the kernel to associate system objects with a file.
    Currently, the only supported object type is an access control list ([Chapter 17](ch17.html
    "Chapter 17. Access Control Lists")).'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*System* EA由内核使用，用于将系统对象与文件关联。目前，唯一受支持的对象类型是访问控制列表（[第17章](ch17.html "第17章.
    访问控制列表")）。'
- en: '*Security* EAs are used to store file security labels for operating system
    security modules, and to associate capabilities with executable files ([File Capabilities](ch39.html#file_capabilities
    "File Capabilities")). *Security* EAs were initially devised to support Security-Enhanced
    Linux (SELinux, [http://www.nsa.gov/research/selinux/](http://www.nsa.gov/research/selinux/)).'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Security* EA用于存储操作系统安全模块的文件安全标签，并将能力与可执行文件关联（[文件能力](ch39.html#file_capabilities
    "文件能力")）。*Security* EA最初是为了支持安全增强Linux（SELinux，[http://www.nsa.gov/research/selinux/](http://www.nsa.gov/research/selinux/)）而设计的。'
- en: An i-node may have multiple associated EAs, in the same namespace or in different
    namespaces. The EA names within each namespace are distinct sets. In the *user*
    and *trusted* namespaces, EA names can be arbitrary strings. In the *system* namespace,
    only names explicitly permitted by the kernel (e.g., those used for access control
    lists) are allowed.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 i-node 可能有多个关联的 EA，可能在同一命名空间内，也可能在不同命名空间内。每个命名空间中的 EA 名称是独立的集合。在 *user* 和
    *trusted* 命名空间中，EA 名称可以是任意字符串。在 *system* 命名空间中，仅允许内核明确允许的名称（例如，用于访问控制列表的名称）。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*JFS* supports another namespace, *os2*, that is not implemented in other file
    systems. The *os2* namespace is provided to support legacy OS/2 file-system EAs.
    A process doesn’t need to be privileged in order to create *os2* EAs.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*JFS* 支持另一个命名空间 *os2*，该命名空间在其他文件系统中未实现。*os2* 命名空间用于支持旧版 OS/2 文件系统的 EA。进程不需要具有特权就能创建
    *os2* EA。'
- en: Creating and viewing EAs from the shell
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从 shell 创建和查看 EA
- en: 'From the shell, we can use the *setfattr(1)* and *getfattr(1)* commands to
    set and view the EAs on a file:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从 shell 中，我们可以使用 *setfattr(1)* 和 *getfattr(1)* 命令来设置和查看文件上的 EA：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: One of the points that the preceding shell session demonstrates is that the
    value of an EA may be an empty string, which is not the same as an EA that is
    undefined. (At the end of the shell session, the value of *user.x* is an empty
    string and *user.y* is undefined.)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 前面 shell 会话所展示的一点是，EA（扩展属性）的值可以是空字符串，这与未定义的 EA 不同。（在 shell 会话结束时，*user.x* 的值是空字符串，而
    *user.y* 是未定义的。）
- en: 'By default, *getfattr* lists only the values of *user* EAs. The *-m* option
    can be used to specify a regular expression pattern that selects the EA names
    that are to be displayed:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，*getfattr* 只列出 *user* EA 的值。可以使用 *-m* 选项指定一个正则表达式模式，选择要显示的 EA 名称：
- en: '[PRE2]*`pattern`*[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE2]*`pattern`*[PRE3]'
- en: 'The default value for *pattern* is `^user\.`. We can list all EAs on a file
    using the following command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*pattern* 的默认值是 `^user\.`。我们可以使用以下命令列出文件上的所有 EA：'
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Extended Attribute Implementation Details
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展属性实现细节
- en: In this section, we extend the overview of the preceding section to fill in
    a few details of the implementation of EAs.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们扩展了前面一节的概述，填补了一些扩展属性实现的细节。
- en: Restrictions on *user* extended attributes
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*user* 扩展属性的限制'
- en: 'It is only possible to place *user* EAs on files and directories. Other file
    types are excluded for the following reasons:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 只能将 *user* EA 放置在文件和目录上。其他文件类型因以下原因被排除：
- en: For a symbolic link, all permissions are enabled for all users, and these permissions
    can’t be changed. (Symbolic link permissions have no meaning on Linux, as detailed
    in Section 18.2.) This means that permissions can’t be used to prevent arbitrary
    users from placing *user* EAs on a symbolic link. The resolution of this problem
    is to prevent all users from creating *user* EAs on the symbolic link.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于符号链接，所有用户的权限都被启用，并且这些权限无法更改。（符号链接的权限在 Linux 上没有意义，详见第 18.2 节。）这意味着权限无法用来防止任意用户在符号链接上放置
    *user* EA。解决该问题的方法是禁止所有用户在符号链接上创建 *user* EA。
- en: For device files, sockets, and FIFOs, the permissions control the access that
    users are granted for the purpose of performing I/O on the underlying object.
    Manipulating these permissions to control the creation of *user* EAs would conflict
    with this purpose.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于设备文件、套接字和 FIFO，权限控制用户在执行 I/O 操作时对底层对象的访问。修改这些权限以控制 *user* EA 的创建将与该目的相冲突。
- en: Furthermore, it is not possible for an unprivileged process to place a *user*
    EA on a directory owned by another user if the sticky bit ([Set-User-ID, Set-Group-ID,
    and Sticky Bits](ch15.html#set-user-id_comma_set-group-id_comma_and "Set-User-ID,
    Set-Group-ID, and Sticky Bits")) is set on the directory. This prevents arbitrary
    users from attaching EAs to directories such as `/tmp`, which are publicly writable
    (and so would allow arbitrary users to manipulate EAs on the directory), but which
    have the sticky bit set to prevent users from deleting files owned by other users
    in the directory.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果目录上设置了粘滞位（[Set-User-ID, Set-Group-ID, and Sticky Bits](ch15.html#set-user-id_comma_set-group-id_comma_and
    "Set-User-ID, Set-Group-ID, and Sticky Bits")），则无特权进程无法将 *user* EA 放置在其他用户拥有的目录上。这防止了任意用户将
    EA 附加到像 `/tmp` 这样的公共可写目录（这样可能允许任意用户操控该目录上的 EA），但该目录已设置粘滞位，防止用户删除其他用户拥有的文件。
- en: Implementation limits
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实现限制
- en: 'The Linux VFS imposes the following limits on EAs on all file systems:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Linux VFS 对所有文件系统中的 EA 施加了以下限制：
- en: The length of an EA name is limited to 255 characters.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EA 名称的长度限制为 255 个字符。
- en: An EA value is limited to 64 kB.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EA 值的大小限制为 64 KB。
- en: 'In addition, some file systems impose more restrictive limits on the size and
    number of EAs that can be associated with a file:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，一些文件系统对与文件关联的 EA 的大小和数量施加了更严格的限制：
- en: 'On *ext2, ext3*, and *ext4*, the total bytes used by the names and values of
    all EAs on a file is limited to the size of a single logical disk block ([File
    Systems](ch14.html#file_systems-id1 "File Systems")): 1024, 2048, or 4096 bytes.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 *ext2, ext3* 和 *ext4* 上，文件上所有 EA 的名称和值的总字节数限制为单个逻辑磁盘块的大小（[文件系统](ch14.html#file_systems-id1
    "File Systems")）：1024、2048 或 4096 字节。
- en: On *JFS*, there is an upper limit of 128 kB on the total bytes used by the names
    and values of all EAs on a file.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 *JFS* 上，所有 EA 的名称和值在文件上的总字节数有 128 KB 的上限。
- en: System Calls for Manipulating Extended Attributes
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作扩展属性的系统调用
- en: In this section, we look at the system calls used to update, retrieve, and remove
    EAs.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看用于更新、检索和删除 EA 的系统调用。
- en: Creating and modifying EAs
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建和修改扩展属性
- en: The *setxattr(), lsetxattr()*, and *fsetxattr()* system calls set the value
    of one of a file’s EAs.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*setxattr(), lsetxattr()* 和 *fsetxattr()* 系统调用用于设置文件某个扩展属性的值。'
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All return 0 on success, or -1 on error
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所有成功时返回 0，失败时返回 -1
- en: 'The differences between these three calls are analogous to those between *stat()*,
    *lstat()*, and *fstat()* ([Retrieving File Information: *stat()*](ch15.html#retrieving_file_information_colon_stat_o
    "Retrieving File Information: stat()")):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '这三者之间的区别类似于 *stat()*、*lstat()* 和 *fstat()* 之间的区别（[获取文件信息：*stat()*](ch15.html#retrieving_file_information_colon_stat_o
    "Retrieving File Information: stat()")）：'
- en: '*setxattr()* identifies a file by *pathname*, and dereferences the filename
    if it is a symbolic link;'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*setxattr()* 通过 *pathname* 来识别文件，并在文件是符号链接时解引用文件名；'
- en: '*lsetxattr()* identifies a file by *pathname*, but doesn’t dereference symbolic
    links; and'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*lsetxattr()* 通过 *pathname* 来识别文件，但不解引用符号链接；'
- en: '*fsetxattr()* identifies a file by the open file descriptor *fd*.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*fsetxattr()* 通过打开的文件描述符 *fd* 来识别文件。'
- en: The same distinction applies to the other groups of system calls described in
    the remainder of this section.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的区别适用于本节剩余部分中描述的其他系统调用组。
- en: The *name* argument is a null-terminated string that defines the name of the
    EA. The *value* argument is a pointer to a buffer that defines the new value for
    the EA. The *size* argument specifies the length of this buffer.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*name* 参数是一个以空字符结尾的字符串，定义了 EA 的名称。*value* 参数是一个指向缓冲区的指针，定义了 EA 的新值。*size* 参数指定了该缓冲区的长度。'
- en: 'By default, these system calls create a new EA if one with the given *name*
    doesn’t already exist, or replace the value of an EA if it does already exist.
    The *flags* argument provides finer control over this behavior. It may be specified
    as 0 to obtain the default behavior, or as one of the following constants:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这些系统调用会创建一个新的 EA，如果给定的 *name* 对应的 EA 不存在，或者如果已经存在，则替换该 EA 的值。*flags* 参数提供了对这种行为的更精细控制。可以指定为
    0 来获取默认行为，或者指定为以下常量之一：
- en: '`XATTR_CREATE`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`XATTR_CREATE`'
- en: Fail (`EEXIST`) if an EA with the given *name* already exists.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定的 *name* 对应的 EA 已经存在，则失败（`EEXIST`）。
- en: '`XATTR_REPLACE`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`XATTR_REPLACE`'
- en: Fail (`ENODATA`) if an EA with the given *name* doesn’t already exist.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定的 *name* 对应的 EA 不存在，则失败（`ENODATA`）。
- en: 'Here is an example of the use of *setxattr()* to create a *user* EA:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用 *setxattr()* 创建 *user* EA 的示例：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Retrieving the value of an EA
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 获取 EA 的值
- en: The *getxattr()*, *lgetxattr()*, and *fgetxattr()* system calls retrieve the
    value of an EA.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*getxattr()*、*lgetxattr()* 和 *fgetxattr()* 系统调用用于获取 EA 的值。'
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All return (nonnegative) size of EA value on success, or -1 on error
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 所有返回（非负）EA 值的大小，成功时返回，失败时返回 -1
- en: The *name* argument is a null-terminated string that identifies the EA whose
    value we want to retrieve. The EA value is returned in the buffer pointed to by
    *value*. This buffer must be allocated by the caller, and its length must be specified
    in *size*. On success, these system calls return the number of bytes copied into
    *value*.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*name* 参数是一个以空字符结尾的字符串，用于标识我们想要获取值的扩展属性（EA）。EA 的值将保存在 *value* 所指向的缓冲区中。这个缓冲区必须由调用者分配，并且其长度必须在
    *size* 中指定。成功时，这些系统调用返回复制到 *value* 中的字节数。'
- en: If the file doesn’t have an attribute with the given *name*, these system calls
    fail with the error `ENODATA`. If *size* is too small, these system calls fail
    with the error `ERANGE`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件没有给定 *name* 的属性，这些系统调用将失败并返回错误 `ENODATA`。如果 *size* 太小，这些系统调用将失败并返回错误 `ERANGE`。
- en: It is possible to specify *size* as 0, in which case *value* is ignored but
    the system call still returns the size of the EA value. This provides a mechanism
    to determine the size of the *value* buffer required for a subsequent call to
    actually retrieve the EA value. Note, however, that we still have no guarantee
    that the returned size will be big enough when subsequently trying to retrieve
    the value. Another process may have assigned a bigger value to the attribute in
    the meantime, or removed the attribute altogether.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将*size*指定为0，在这种情况下，*value*会被忽略，但系统调用仍会返回EA值的大小。这提供了一种机制，用于确定为后续调用实际检索EA值所需的*value*缓冲区的大小。然而，请注意，我们不能保证返回的大小在后续尝试检索值时足够大。另一个进程可能在此期间为该属性分配了更大的值，或完全删除了该属性。
- en: Removing an EA
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 删除EA
- en: The *removexattr()*, *lremovexattr()*, and *fremovexattr()* system calls remove
    an EA from a file.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*removexattr()*、*lremovexattr()*和*fremovexattr()*系统调用从文件中删除EA。'
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All return 0 on success, or -1 on error
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 成功时返回0，错误时返回-1。
- en: The null-terminated string given in *name* identifies the EA that is to be removed.
    An attempt to remove an EA that doesn’t exist fails with the error `ENODATA`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在*name*中给定的以空字符终止的字符串标识要删除的EA。尝试删除一个不存在的EA会失败，并返回错误`ENODATA`。
- en: Retrieving the names of all EAs associated with a file
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检索与文件关联的所有EA名称。
- en: The *listxattr()*, *llistxattr()*, and *flistxattr()* system calls return a
    list containing the names of all of the EAs associated with a file.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*listxattr()*、*llistxattr()*和*flistxattr()*系统调用返回包含所有与文件关联的EA名称的列表。'
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All return number of bytes copied into list on success, or -1 on error
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 成功时返回复制到list中的字节数，错误时返回-1。
- en: The list of EA names is returned as a series of null-terminated strings in the
    buffer pointed to by *list*. The size of this buffer must be specified in *size*.
    On success, these system calls return the number of bytes copied into *list*.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: EA名称列表以一系列以空字符终止的字符串形式返回，这些字符串存储在由*list*指向的缓冲区中。此缓冲区的大小必须在*size*中指定。成功时，这些系统调用返回复制到*list*中的字节数。
- en: As with *getxattr()*, it is possible to specify *size* as 0, in which case *list*
    is ignored, but the system call returns the size of the buffer that would be required
    for a subsequent call to actually retrieve the EA name list (assuming it remains
    unchanged).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 与*getxattr()*类似，可以将*size*指定为0，在这种情况下，*list*会被忽略，但系统调用仍会返回为后续调用实际检索EA名称列表所需的缓冲区大小（假设列表未改变）。
- en: To retrieve a list of the EA names associated with a file requires only that
    the file be accessible (i.e., that we have execute access to all of the directories
    included in *pathname*). No permissions are required on the file itself.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索与文件关联的EA名称列表，只需要确保文件可访问（即，我们对*pathname*中包含的所有目录具有执行权限）。文件本身不需要任何权限。
- en: For security reasons, the EA names returned in *list* may exclude attributes
    to which the calling process doesn’t have access. For example, most file systems
    omit *trusted* attributes from the list returned by a call to *listxattr()* in
    an unprivileged process. But note the “may” in the earlier sentence, indicating
    that a file-system implementation is not obliged to do this. Therefore, we need
    to allow for the possibility that a subsequent call to *getxattr()* using an EA
    name returned in *list* may fail because the process doesn’t have the privilege
    required to obtain the value of that EA. (A similar failure could also happen
    if another process deleted an attribute between the calls to *listxattr()* and
    *getxattr()*.)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 出于安全原因，*list*中返回的EA名称可能会排除调用进程没有访问权限的属性。例如，大多数文件系统会在无特权进程调用*listxattr()*时省略*trusted*属性。但请注意前面句子中的“可能”，表明文件系统实现并不强制要求这样做。因此，我们需要考虑到使用*list*中返回的EA名称后续调用*getxattr()*时，可能由于进程没有获取该EA值所需的权限而失败。（如果另一个进程在*listxattr()*和*getxattr()*之间删除了一个属性，也可能发生类似的失败。）
- en: Example program
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例程序
- en: 'The program in [Example 16-1](ch16.html#display_file_extended_attributes "Example 16-1. Display
    file extended attributes") retrieves and displays the names and values of all
    EAs of the files listed on its command line. For each file, the program uses *listxattr()*
    to retrieve the names of all EAs associated with the file, and then executes a
    loop calling *getxattr()* once for each name, to retrieve the corresponding value.
    By default, attribute values are displayed as plain text. If the *-x* option is
    supplied, then the attribute values are displayed as hexadecimal strings. The
    following shell session log demonstrates the use of this program:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例16-1](ch16.html#display_file_extended_attributes "示例16-1. 显示文件扩展属性")中的程序检索并显示命令行中列出文件的所有EA的名称和值。对于每个文件，程序使用*listxattr()*来检索与文件关联的所有EA名称，然后执行一个循环，每次调用*getxattr()*来检索相应的值。默认情况下，属性值以纯文本形式显示。如果提供了*-x*选项，则属性值将以十六进制字符串显示。以下是该程序使用的Shell会话日志：'
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Example 16-1. Display file extended attributes
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 示例16-1. 显示文件扩展属性
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: From version 2.6 onward, Linux supports extended attributes, which allow arbitrary
    metadata to be associated with a file, in the form of name-value pairs.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.6开始，Linux支持扩展属性，允许将任意元数据与文件关联，形式为名称-值对。
- en: Exercise
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: Write a program that can be used to create or modify a *user* EA for a file
    (i.e., a simple version of *setfattr(1)*). The filename and the EA name and value
    should be supplied as command-line arguments to the program.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，用于创建或修改文件的*用户*EA（即，*setfattr(1)*的简单版本）。文件名、EA名称和值应作为命令行参数传递给程序。
