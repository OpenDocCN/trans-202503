- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 10 QUARTO
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10 QUARTO
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: Quarto, the next-generation version of R Markdown, offers a few advantages over
    its predecessor. First, the syntax Quarto uses across output types is more consistent.
    As you’ve seen in this book, R Markdown documents might use a variety of conventions;
    for example, xaringan indicates new slides using three dashes, which would create
    a horizontal line in other output formats, and the distill package likewise has
    layout options that don’t work in xaringan.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Quarto，作为 R Markdown 的下一代版本，提供了一些相较于其前身的优势。首先，Quarto 在不同输出类型之间的语法更加一致。如你在本书中所看到的，R
    Markdown 文档可能使用各种不同的约定；例如，xaringan 使用三个破折号表示新的一页，这在其他输出格式中会生成一条水平线，而 distill 包则有一些布局选项，在
    xaringan 中无法使用。
- en: Quarto also supports more languages than R Markdown does, as well as multiple
    code editors. While R Markdown is designed to work specifically in the RStudio
    IDE, Quarto works not only in RStudio but also in code editors such as Visual
    Studio (VS) Code and JupyterLab, making it easy to use with multiple languages.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Quarto 还支持比 R Markdown 更多的语言，并且支持多个代码编辑器。虽然 R Markdown 专为 RStudio IDE 设计，但 Quarto
    不仅可以在 RStudio 中使用，还可以在 Visual Studio (VS) Code 和 JupyterLab 等代码编辑器中使用，使其能够轻松支持多种语言。
- en: This chapter focuses on the benefits of using Quarto as an R user. It explains
    how to set up Quarto, then covers some of the most important differences between
    Quarto and R Markdown. Finally, you’ll learn how to use Quarto to make the parameterized
    reports, presentations, and websites covered in previous chapters.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了作为 R 用户使用 Quarto 的好处。它解释了如何设置 Quarto，然后讲解了 Quarto 和 R Markdown 之间的一些最重要的区别。最后，你将学习如何使用
    Quarto 来生成前几章中涉及的参数化报告、演示文稿和网站。
- en: Creating a Quarto Document
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 Quarto 文档
- en: Versions of RStudio starting with 2022.07.1 come with Quarto installed. To check
    your RStudio version, click **RStudio****About RStudio** in the top menu bar.
    If you have an older version of RStudio, update it now by reinstalling it, as
    outlined in [Chapter 1](chapter1.xhtml). Quarto should then be installed for you.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从 2022.07.1 开始的 RStudio 版本已预装 Quarto。要检查你的 RStudio 版本，点击顶部菜单栏中的**RStudio****关于
    RStudio**。如果你的 RStudio 版本较旧，请按照[第 1 章](chapter1.xhtml)中的步骤重新安装以进行更新，这样 Quarto
    应该就会被安装了。
- en: Once you’ve installed Quarto, create a document by clicking **File****New File****Quarto
    Document**. You should see a menu, shown in [Figure 10-1](chapter10.xhtml#fig10-1),
    that looks like the one used to create an R Markdown document.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Quarto 后，点击**文件****新建文件****Quarto 文档**来创建文档。你应该看到一个菜单，如[图 10-1](chapter10.xhtml#fig10-1)所示，类似于创建
    R Markdown 文档时使用的菜单。
- en: '![](../images/fig10-1.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig10-1.jpg)'
- en: 'Figure 10-1: The RStudio menu for creating a new Quarto document'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-1：用于创建新 Quarto 文档的 RStudio 菜单
- en: Give your document a title and choose an output format. The Engine option allows
    you to select a different way to render documents. By default, it uses Knitr,
    the same rendering tool used by R Markdown. The Use Visual Markdown Editor option
    provides an interface that looks more like Microsoft Word, but it can be finicky,
    so I won’t cover it here.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 给文档指定一个标题，并选择输出格式。Engine 选项允许你选择不同的文档渲染方式。默认情况下，它使用 Knitr，这是 R Markdown 使用的相同渲染工具。Use
    Visual Markdown Editor 选项提供了一个更像 Microsoft Word 的界面，但它可能会有些问题，因此我在这里不会详细介绍。
- en: 'The resulting Quarto document should contain default content, just as R Markdown
    documents do:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的 Quarto 文档应包含默认内容，就像 R Markdown 文档一样：
- en: '[PRE0]{r}'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE0]{r}'
- en: 1 + 1
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 1 + 1
- en: '[PRE1]{r}'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE1]{r}'
- en: '#| echo: false'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '#| echo: false'
- en: 2 * 2
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 2 * 2
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Although R Markdown and Quarto have many features in common, they also have
    some differences to be aware of.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 R Markdown 和 Quarto 有许多相似的功能，但它们也有一些需要注意的差异。
- en: Comparing R Markdown and Quarto
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较 R Markdown 和 Quarto
- en: Quarto and R Markdown documents have the same basic structure—YAML metadata,
    followed by a combination of Markdown text and code chunks—but they have some
    variations in syntax.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Quarto 和 R Markdown 文档有相同的基本结构——YAML 元数据，后面跟着 Markdown 文本和代码块的组合——但它们在语法上有一些差异。
- en: The format and execute YAML Fields
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 格式和执行 YAML 字段
- en: 'Quarto uses slightly different options in its YAML. It replaces the output
    field with the format field and uses the value html instead of html_document:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Quarto 在其 YAML 中使用了稍微不同的选项。它将 output 字段替换为 format 字段，并使用 html 代替 html_document：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Other Quarto formats also use different names than their R Markdown counterparts:
    docx instead of word_document and pdf instead of pdf_document, for example. All
    of the possible formats can be found at *[https://quarto.org/docs/guide/](https://quarto.org/docs/guide/)*.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 其他 Quarto 格式与它们的 R Markdown 对应格式使用了不同的名称，例如，使用 docx 代替 word_document，使用 pdf
    代替 pdf_document。所有可能的格式可以在*[https://quarto.org/docs/guide/](https://quarto.org/docs/guide/)*找到。
- en: 'A second difference between R Markdown and Quarto syntax is that Quarto doesn’t
    use a setup code chunk to set default options for showing code, charts, and other
    elements in the rendered versions of the document. In Quarto, these options are
    set in the execute field of the YAML. For example, the following would hide code,
    as well as all warnings and messages, from the rendered document:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: R Markdown 和 Quarto 语法之间的第二个区别是，Quarto 不使用一个 setup 代码块来设置显示代码、图表和其他元素的默认选项。在
    Quarto 中，这些选项是在 YAML 的 execute 字段中设置的。例如，以下代码会隐藏代码，以及所有警告和信息，从渲染后的文档中去除：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Quarto also allows you to write true and false in lowercase.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Quarto 还允许你将 true 和 false 写成小写字母。
- en: Individual Code Chunk Options
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单个代码块选项
- en: 'In R Markdown, you override options at the individual code chunk level by adding
    the new option within the curly brackets that start a code chunk. For example,
    the following would show both the code 2 * 2 and its output:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R Markdown 中，你可以通过在代码块开始的花括号内添加新的选项来覆盖单个代码块级别的选项。例如，以下代码会显示 2 * 2 和它的输出：
- en: '[PRE5]{r echo = TRUE}'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE5]{r echo = TRUE}'
- en: 2 * 2
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 2 * 2
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Quarto instead uses this syntax to set individual code chunk–level options:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Quarto 则使用这种语法来设置单个代码块级别的选项：
- en: '[PRE7]{r}'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE7]{r}'
- en: '#| echo: false'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '#| echo: false'
- en: 2 * 2
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 2 * 2
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The option is set within the code chunk itself. The characters #| (known as
    a *hash pipe*) at the start of a line indicate that you are setting options.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '该选项是在代码块本身内设置的。行首的字符 #|（称为 *hash pipe*）表示你正在设置选项。'
- en: Dashes in Option Names
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 选项名称中的连字符
- en: 'Another difference you’re likely to see if you switch from R Markdown to Quarto
    is that option names consisting of two words are separated by a dash rather than
    a period. R Markdown, for example, uses the code chunk option fig.height to specify
    the height of plots. In contrast, Quarto uses fig-height, as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 从 R Markdown 切换到 Quarto 时，你可能会看到的另一个区别是，包含两个单词的选项名称用连字符而不是句点分隔。例如，R Markdown
    使用代码块选项 fig.height 来指定图形的高度。而 Quarto 使用 fig-height，如下所示：
- en: '[PRE9]{r}'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE9]{r}'
- en: '#| fig-height: 10'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '#| fig-height: 10'
- en: library(palmerpenguins)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: library(palmerpenguins)
- en: library(tidyverse)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: library(tidyverse)
- en: ggplot(
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: ggplot(
- en: penguins,
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: penguins,
- en: aes(
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: aes(
- en: x = bill_length_mm,
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: x = bill_length_mm,
- en: y = bill_depth_mm
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: y = bill_depth_mm
- en: )
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ) +
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: ) +
- en: geom_point()
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: geom_point()
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Helpfully for anyone coming from R Markdown, fig.height and similar options
    containing periods will continue to work if you forget to make the switch. A list
    of all code chunk options can be found on the Quarto website at *[https://quarto.org/docs/reference/cells/cells-knitr.xhtml](https://quarto.org/docs/reference/cells/cells-knitr.xhtml)*.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于从 R Markdown 转过来的人来说，fig.height 和类似的包含句点的选项仍然会继续有效，即使你忘记进行转换。所有代码块选项的列表可以在
    Quarto 网站上找到，链接为 *[https://quarto.org/docs/reference/cells/cells-knitr.xhtml](https://quarto.org/docs/reference/cells/cells-knitr.xhtml)*。
- en: The Render Button
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 渲染按钮
- en: You can follow the same process to render your Quarto document as in R Markdown,
    but in Quarto the button is called Render rather than Knit. Clicking Render will
    turn the Quarto document into an HTML file, Word document, or any other output
    format you select.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按照与 R Markdown 相同的过程来渲染 Quarto 文档，但在 Quarto 中，按钮被称为 Render，而不是 Knit。点击 Render
    会将 Quarto 文档转换为 HTML 文件、Word 文档或任何其他你选择的输出格式。
- en: Parameterized Reporting
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数化报告
- en: 'Now that you’ve learned a bit about how Quarto works, you’ll make a few different
    documents with it, starting with a parameterized report. The process of making
    parameterized reports with Quarto is nearly identical to doing so with R Markdown.
    In fact, you can adapt the R Markdown document you used to make the Urban Institute
    COVID report in [Chapter 7](chapter7.xhtml) for Quarto simply by copying the *.Rmd*
    file, changing its extension to *.qmd*, and then making a few other changes:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了 Quarto 的一些基本操作，接下来你将使用它制作几个不同的文档，从参数化报告开始。用 Quarto 制作参数化报告的过程几乎与用 R
    Markdown 完成相同。事实上，你可以通过复制 *.Rmd* 文件，将其扩展名改为 *.qmd*，然后做一些其他调整，将你用来制作 Urban Institute
    COVID 报告的 R Markdown 文档直接适配到 Quarto：[第 7 章](chapter7.xhtml)中提到的文档。
- en: '[PRE11]{r}'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE11]{r}'
- en: library(tidyverse)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: library(tidyverse)
- en: library(urbnthemes)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: library(urbnthemes)
- en: library(scales)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: library(scales)
- en: '[PRE12]{r}'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE12]{r}'
- en: cases <- tibble(state.name) %>%
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: cases <- tibble(state.name) %>%
- en: rbind(state.name = "District of Columbia") %>%
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: rbind(state.name = "District of Columbia") %>%
- en: left_join(
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: left_join(
- en: read_csv("https://data.rfortherestofus.com/united_states_covid19_cases_deaths
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: read_csv("https://data.rfortherestofus.com/united_states_covid19_cases_deaths
- en: _and_testing_by_state.csv", skip = 2),
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _and_testing_by_state.csv", skip = 2),
- en: by = c("state.name" = "State/Territory")
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: by = c("state.name" = "State/Territory")
- en: ) %>%
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: ) %>%
- en: select(
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: select(
- en: total_cases = `Total Cases`,
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: total_cases = `总病例数`,
- en: state.name,
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: state.name,
- en: cases_per_100000 = `Case Rate per 100000`
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cases_per_100000 = `每 10 万人病例率`
- en: ) %>%
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: ) %>%
- en: mutate(cases_per_100000 = parse_number(cases_per_100000)) %>%
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: mutate(cases_per_100000 = parse_number(cases_per_100000)) %>%
- en: mutate(case_rank = rank(-cases_per_100000, ties.method = "min"))
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: mutate(case_rank = rank(-cases_per_100000, ties.method = "min"))
- en: '[PRE13]{r}'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE13]{r}'
- en: state_text <- if_else(params$state == "District of Columbia", str_glue("the
    District of
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: state_text <- if_else(params$state == "District of Columbia", str_glue("the
    District of
- en: Columbia"), str_glue("state of {params$state}"))
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Columbia"), str_glue("state of {params$state}"))
- en: state_cases_per_100000 <- cases %>%
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: state_cases_per_100000 <- cases %>%
- en: filter(state.name == params$state) %>%
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: filter(state.name == params$state) %>%
- en: pull(cases_per_100000) %>%
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: pull(cases_per_100000) %>%
- en: comma()
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: comma()
- en: state_cases_rank <- cases %>%
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: state_cases_rank <- cases %>%
- en: filter(state.name == params$state) %>%
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: filter(state.name == params$state) %>%
- en: pull(case_rank)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: pull(case_rank)
- en: '[PRE14]{r}'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE14]{r}'
- en: '#| fig-height: 8 ❸'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '#| fig-height: 8 ❸'
- en: set_urbn_defaults(style = "print")
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: set_urbn_defaults(style = "print")
- en: cases %>%
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: cases %>%
- en: mutate(highlight_state = if_else(state.name == params$state, "Y", "N")) %>%
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: mutate(highlight_state = if_else(state.name == params$state, "Y", "N")) %>%
- en: mutate(state.name = fct_reorder(state.name, cases_per_100000)) %>%
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: mutate(state.name = fct_reorder(state.name, cases_per_100000)) %>%
- en: ggplot(aes(
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: ggplot(aes(
- en: x = cases_per_100000,
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: x = cases_per_100000,
- en: y = state.name,
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: y = state.name,
- en: fill = highlight_state
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: fill = highlight_state
- en: )) +
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: )) +
- en: geom_col() +
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: geom_col() +
- en: scale_x_continuous(labels = comma_format()) +
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: scale_x_continuous(labels = comma_format()) +
- en: theme(legend.position = "none") +
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: theme(legend.position = "none") +
- en: labs(
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: labs(
- en: y = NULL,
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: y = NULL,
- en: x = "Cases per 100,000"
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: x = "每 10 万人病例数"
- en: )
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This code switches output: html_document to format: html in the YAML ❶, then
    removes the setup code chunk and sets those options in the YAML’s execute field
    ❷. Finally, the fig.height option in the last code chunk is replaced with fig-height
    and labeled as an option with the hash pipe ❸.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '这段代码将输出格式从: html_document 切换为格式: html ❶，然后移除设置代码块，并在 YAML 的 execute 字段中设置这些选项
    ❷。最后，最后一个代码块中的 fig.height 选项被替换为 fig-height，并用哈希管道符标记为选项 ❸。'
- en: 'Next, to create one report for each state, you must tweak the *render.R* script
    file you used to make parameterized reports in [Chapter 7](chapter7.xhtml):'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，要为每个州创建一个报告，你需要调整在[第 7 章](chapter7.xhtml)中用于生成参数化报告的 *render.R* 脚本文件：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This updated *render.R* file loads the quarto package instead of the rmarkdown
    package ❶ and changes the input file to *urban-covid-budget-report.qmd* ❷. The
    reports tibble uses execute_params instead of params ❸ because this is the argument
    that the quarto_render() function expects. To render the reports, the quarto_render()
    function replaces the render() function from the markdown package ❹. As in [Chapter
    7](chapter7.xhtml), running this code should produce a report for each state.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这个更新后的 *render.R* 文件加载了 quarto 包，而不是 rmarkdown 包 ❶，并将输入文件更改为 *urban-covid-budget-report.qmd*
    ❷。报告的数据框使用 execute_params 代替 params ❸，因为这是 quarto_render() 函数期望的参数。为了生成报告，quarto_render()
    函数替代了 markdown 包中的 render() 函数 ❹。如同[第 7 章](chapter7.xhtml)中的方法，运行这段代码应该会为每个州生成报告。
- en: Making Presentations
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 制作演示文稿
- en: Quarto can also produce slideshow presentations like those you made in [Chapter
    8](chapter8.xhtml) with the xaringan package. To make a presentation with Quarto,
    click **File****New File****Quarto Presentation**. Choose **Reveal JS** to make
    your slides and leave the Engine and Editor options untouched.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Quarto 还可以生成类似于你在[第 8 章](chapter8.xhtml)中使用 xaringan 包制作的幻灯片演示文稿。要使用 Quarto
    创建演示文稿，请点击**文件****新建文件****Quarto 演示文稿**。选择 **Reveal JS** 来制作幻灯片，并保持引擎和编辑器选项不变。
- en: 'The slides you’ll make use the reveal.js JavaScript library under the hood,
    a technique similar to making slides with xaringan. The following code updates
    the presentation you made in [Chapter 8](chapter8.xhtml) so that it works with
    Quarto:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你将制作的幻灯片使用了 reveal.js JavaScript 库，这与使用 xaringan 制作幻灯片的方法类似。以下代码更新了你在[第 8 章](chapter8.xhtml)中制作的演示文稿，使其可以与
    Quarto 一起使用：
- en: '[PRE17]{r}'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE17]{r}'
- en: library(tidyverse)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: library(tidyverse)
- en: '[PRE18]{r}'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE18]{r}'
- en: penguins <- read_csv("https://raw.githubusercontent.com/rfortherestofus/r-without-statistics/
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: penguins <- read_csv("https://raw.githubusercontent.com/rfortherestofus/r-without-statistics/
- en: main/data/penguins-2008.csv")
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: main/data/penguins-2008.csv")
- en: '[PRE19]{r}'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE19]{r}'
- en: penguins %>%
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: penguins %>%
- en: ggplot(aes(x = bill_length_mm)) +
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: ggplot(aes(x = bill_length_mm)) +
- en: geom_histogram() +
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: geom_histogram() +
- en: theme_minimal()
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: theme_minimal()
- en: '[PRE20]{r}'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE20]{r}'
- en: average_bill_length <- penguins %>%
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: average_bill_length <- penguins %>%
- en: summarize(avg_bill_length = mean(
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: summarize(avg_bill_length = mean(
- en: bill_length_mm,
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: bill_length_mm,
- en: na.rm = TRUE
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: na.rm = TRUE
- en: )) %>%
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: )) %>%
- en: pull(avg_bill_length)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: pull(avg_bill_length)
- en: '[PRE21]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This code sets format: revealjs in the YAML to make a presentation and adds
    several global code chunk options in the execute section. It then removes the
    three dashes used to make slide breaks because first- or second-level headings
    make new slides in Quarto (though you could still use three dashes to manually
    add slide breaks). When you render this code, you should get an HTML file with
    your slides. The output should look similar to the default xaringan slides from
    [Chapter 8](chapter8.xhtml).'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '这段代码在YAML中设置了format: revealjs来制作演示文稿，并在执行部分添加了多个全局代码块选项。然后，它移除了用于制作幻灯片分隔的三个破折号，因为在Quarto中，一级或二级标题会自动生成新的幻灯片（尽管你仍然可以使用三个破折号手动添加幻灯片分隔）。渲染这段代码后，你应该会得到一个包含幻灯片的HTML文件。输出应类似于[第8章](chapter8.xhtml)中默认的xaringan幻灯片。'
- en: Revealing Content Incrementally
  id: totrans-135
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 逐步显示内容
- en: 'Quarto slides can incrementally reveal content. To reveal bulleted and numbered
    lists one item at a time by default, add incremental: true to the document’s YAML
    like so:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 'Quarto幻灯片可以逐步显示内容。要让项目符号和编号列表默认逐项显示，可以将incremental: true添加到文档的YAML部分，如下所示：'
- en: '[PRE22]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As a result of this code, the content in all lists in the presentation should
    appear on the slide one item at a time.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这段代码，演示文稿中的所有列表内容应会逐项出现在幻灯片上。
- en: 'You can also set just some lists to incrementally reveal using this format:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用这种格式，仅让某些列表项逐步显示：
- en: '[PRE23]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Using ::: to start and end a segment of the document creates a section in the
    resulting HTML file known as a *div*. The HTML <div> tag allows you to define
    properties within that section. In this code, adding {.incremental} sets a custom
    CSS class that displays the list incrementally.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用:::来开始和结束文档的一个部分，会在生成的HTML文件中创建一个称为*div*的部分。HTML中的<div>标签允许你在该部分内定义属性。在这段代码中，添加{.incremental}设置了一个自定义CSS类，能让列表逐步显示。
- en: Aligning Content and Adding Background Images
  id: totrans-142
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 对齐内容并添加背景图片
- en: You can use a <div> tag to create columns in Quarto slides, too. Say you want
    to create a slide with content in two columns, as in [Figure 10-2](chapter10.xhtml#fig10-2).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用<div>标签在Quarto幻灯片中创建列。例如，假设你想要创建一个包含两列内容的幻灯片，如[图10-2](chapter10.xhtml#fig10-2)所示。
- en: '![](../images/fig10-2.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig10-2.jpg)'
- en: 'Figure 10-2: Creating two columns with a <div> tag'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-2：使用<div>标签创建两列
- en: 'The following code creates this two-column slide:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码创建了这张两列幻灯片：
- en: '[PRE24]{r}'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE24]{r}'
- en: penguins %>%
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: penguins %>%
- en: ggplot(aes(x = bill_length_mm)) +
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: ggplot(aes(x = bill_length_mm)) +
- en: geom_histogram() +
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: geom_histogram() +
- en: theme_minimal()
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: theme_minimal()
- en: '[PRE25]{r}'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE25]{r}'
- en: penguins %>%
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: penguins %>%
- en: ggplot(aes(x = bill_depth_mm)) +
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: ggplot(aes(x = bill_depth_mm)) +
- en: geom_histogram() +
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: geom_histogram() +
- en: theme_minimal()
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: theme_minimal()
- en: '[PRE26]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Notice the :::, as well as ::::, which creates nested <div> sections. The columns
    class tells the HTML that all content within the :::: should be laid out as columns.
    Then, ::: {.column width="50%"} starts a <div> that takes up half the width of
    the slide. The closing ::: and :::: indicate the end of the section.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '注意:::以及::::，它们创建了嵌套的<div>部分。columns类告诉HTML，所有位于::::内的内容应按列布局。接着，::: {.column
    width="50%"}开始了一个占据幻灯片一半宽度的<div>。闭合的:::和::::表示该部分的结束。'
- en: 'When using xaringan, you easily centered content on a slide by surrounding
    it with .center[]. Alignment in Quarto is slightly more complicated. Quarto has
    no built-in CSS class to center content, so you’ll need to create one yourself.
    Begin a CSS code chunk and a custom class called center-slide:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用xaringan时，你可以通过将内容包围在.center[]中轻松地将其居中显示在幻灯片上。而在Quarto中，居中稍微复杂一些。Quarto没有内建的CSS类来居中内容，因此你需要自己创建一个。首先开始一个CSS代码块，并创建一个名为center-slide的自定义类：
- en: '[PRE27]{css}'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE27]{css}'
- en: .center-slide {
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: .center-slide {
- en: 'text-align: center;'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'text-align: center;'
- en: '}'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE28]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This CSS center-aligns all content. (The text-align property aligns images,
    too, not just text.)
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这个CSS会将所有内容居中对齐。（text-align属性也会对图片进行对齐，而不仅仅是文本。）
- en: 'To apply the new center-slide class, put it next to the title of the slide,
    as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用新的center-slide类，请将其放置在幻灯片标题旁，如下所示：
- en: '[PRE29]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: With the custom CSS applied, the slide should now center all content.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 应用自定义CSS后，幻灯片现在应该能将所有内容居中显示。
- en: 'Finally, when working in xaringan, you added a background image to a slide.
    To do the same thing in Quarto, apply the background-image attribute to a slide,
    like so:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在xaringan中工作时，你可以给幻灯片添加背景图片。要在Quarto中做同样的事，可以将background-image属性应用到幻灯片中，如下所示：
- en: '[PRE30]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This should add a slide with the text *Penguins* in front of the selected image.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这应当在选定的图片前添加一个包含文本 *Penguins* 的幻灯片。
- en: Customizing Your Slides with Themes and CSS
  id: totrans-172
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用主题和 CSS 自定义你的幻灯片
- en: 'You’ve started making some changes to the look and feel of the Quarto slides,
    but you can add even more customization to your design. As with xaringan, there
    are two main ways to further customize your slides in Quarto: using existing themes
    and changing the CSS.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经开始对 Quarto 幻灯片的外观和感觉进行一些更改，但你可以在设计中加入更多自定义内容。与 xaringan 类似，有两种主要方法可以进一步自定义
    Quarto 幻灯片：使用现有主题和更改 CSS。
- en: 'Themes are the easiest way to change your slide design. To apply a theme in
    Quarto, simply add its name to your YAML:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 主题是更改幻灯片设计的最简单方法。在 Quarto 中应用主题，只需将其名称添加到你的 YAML 中：
- en: '[PRE31]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Using this option should change the theme from light (the default) to dark.
    You can see the title slide with the dark theme applied in [Figure 10-3](chapter10.xhtml#fig10-3).
    To see the full list of available themes, go to *[https://quarto.org/docs/presentations/revealjs/themes.xhtml](https://quarto.org/docs/presentations/revealjs/themes.xhtml)*.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此选项应将主题从浅色（默认）切换为深色。你可以在[图 10-3](chapter10.xhtml#fig10-3)中看到应用了深色主题的标题幻灯片。要查看所有可用主题的完整列表，请访问
    *[https://quarto.org/docs/presentations/revealjs/themes.xhtml](https://quarto.org/docs/presentations/revealjs/themes.xhtml)*。
- en: '![](../images/fig10-3.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig10-3.jpg)'
- en: 'Figure 10-3: A slide with the dark theme applied'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-3：应用了深色主题的幻灯片
- en: The second option to change your slide design further is to write custom CSS.
    Quarto uses a type of CSS called Sass that lets you include variables in the CSS.
    These variables resemble those from the xaringanthemer package, which allowed
    you to set values for header formatting using header_h2_font_size and header_color.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 更改幻灯片设计的第二个选项是编写自定义 CSS。Quarto 使用一种名为 Sass 的 CSS 类型，允许你在 CSS 中包含变量。这些变量与 xaringanthemer
    包中的变量类似，后者允许你使用 header_h2_font_size 和 header_color 来设置标题格式的值。
- en: 'Go to **File****New File****New Text File**, create a Sass file called *theme.scss*,
    and add the following two mandatory sections:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 转到**文件****新建文件****新建文本文件**，创建一个名为 *theme.scss* 的 Sass 文件，并添加以下两个必填部分：
- en: '[PRE32]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The scss:defaults section is where you use the Quarto Sass variables. For example,
    to change the color and size of first-level headers, add this code:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: scss:defaults 部分是你使用 Quarto Sass 变量的地方。例如，要更改一级标题的颜色和大小，可以添加以下代码：
- en: '[PRE33]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'All Quarto Sass variables start with a dollar sign, followed by a name. To
    apply these tweaks to your slides, adjust your YAML to tell Quarto to use the
    custom *theme.scss* file:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 Quarto Sass 变量都以美元符号开始，后跟变量名称。要将这些调整应用到幻灯片中，可以调整 YAML 告诉 Quarto 使用自定义的 *theme.scss*
    文件：
- en: '[PRE34]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[Figure 10-4](chapter10.xhtml#fig10-4) shows the changes applied to the rendered
    slides.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 10-4](chapter10.xhtml#fig10-4)展示了应用于渲染幻灯片的更改。'
- en: '![](../images/fig10-4.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig10-4.jpg)'
- en: 'Figure 10-4: A slide modified using custom CSS'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-4：使用自定义 CSS 修改的幻灯片
- en: All predefined variables should go in the scss:defaults section. You can find
    the full list of these variables at *[https://quarto.org/docs/presentations/revealjs/themes.xhtml#sass-variables](https://quarto.org/docs/presentations/revealjs/themes.xhtml#sass-variables)*.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 所有预定义的变量应放在 scss:defaults 部分。你可以在*[https://quarto.org/docs/presentations/revealjs/themes.xhtml#sass-variables](https://quarto.org/docs/presentations/revealjs/themes.xhtml#sass-variables)*找到这些变量的完整列表。
- en: 'The scss:rules section is where you can add CSS tweaks for which there are
    no existing variables. For example, you could place the code you wrote to center
    the slide’s content in this section:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: scss:rules 部分是你可以添加没有现成变量的 CSS 调整的地方。例如，你可以将编写的使幻灯片内容居中的代码放在该部分：
- en: '[PRE35]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Because rendered Quarto slides are HTML documents, you can tweak them however
    you’d like with custom CSS. What’s more, because the slides use reveal.js under
    the hood, any features built into that JavaScript library work in Quarto. This
    library includes easy ways to add transitions, animations, interactive content,
    and much more. The demo Quarto presentation available at *[https://quarto.org/docs/presentations/revealjs/demo/](https://quarto.org/docs/presentations/revealjs/demo/)*
    shows many of these features in action.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 因为渲染后的 Quarto 幻灯片是 HTML 文档，你可以通过自定义 CSS 对其进行调整。更重要的是，由于幻灯片使用 reveal.js 作为底层技术，任何嵌入该
    JavaScript 库的功能在 Quarto 中都能使用。这个库包括了添加过渡效果、动画、互动内容等许多简便的方式。位于*[https://quarto.org/docs/presentations/revealjs/demo/](https://quarto.org/docs/presentations/revealjs/demo/)*的
    Quarto 演示展示了这些功能的实际应用。
- en: Making Websites
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 制作网站
- en: Quarto can make websites without requiring the use of an external package like
    distill. To create a Quarto website, go to **File****New Project**. Select **New
    Directory**, then **Quarto Website**. You’ll be prompted to choose a directory
    in which to place your project. Keep the default engine (Knitr), check **Create
    a Git Repository** (which should show up only if you’ve already installed Git),
    and leave everything else unchecked.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: Quarto 可以在不使用 distill 等外部包的情况下创建网站。要创建 Quarto 网站，请进入**File****New Project**，选择**New
    Directory**，然后选择**Quarto Website**。系统会提示你选择一个目录来存放你的项目。保持默认的引擎（Knitr），勾选**Create
    a Git Repository**（仅在你已经安装了 Git 时才会显示），并保持其他选项不选中。
- en: 'Click **Create Project**, which should create a series of files: *index.qmd*,
    *about.qmd*, *_quarto.yml*, and *styles.css*. These files resemble those created
    by the distill package. The *.qmd* files are where you’ll add content, the *_quarto.yml*
    file is where you’ll set options for the entire website, and the *styles.css*
    file is where you’ll add CSS to customize the website’s appearance.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**Create Project**，这将创建一系列文件：*index.qmd*、*about.qmd*、*._quarto.yml* 和 *styles.css*。这些文件与
    distill 包创建的文件类似。*.qmd* 文件是你添加内容的地方，*._quarto.yml* 文件是你设置整个网站选项的地方，而 *styles.css*
    文件是你添加 CSS 来自定义网站外观的地方。
- en: Building the Website
  id: totrans-196
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 构建网站
- en: You’ll start by modifying the *.qmd* files. Open the home page file (*index.qmd*),
    delete the default content after the YAML, and replace it with the content from
    the website you made in [Chapter 9](chapter9.xhtml). Remove the layout = "l-page"
    element, which you used to widen the layout. I’ll discuss how to change the page’s
    layout in Quarto later in this section.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 你将从修改*.qmd*文件开始。打开首页文件（*index.qmd*），删除 YAML 后的默认内容，并用你在[第9章](chapter9.xhtml)中制作的网站内容替换它。删除
    layout = "l-page" 元素，这是你用来扩展布局的。我将在本节稍后讨论如何在 Quarto 中更改页面布局。
- en: To render a Quarto website, look for the Build tab in the top right of RStudio
    and click **Render Website**. The rendered website should now appear in the Viewer
    pane on the bottom-right pane of RStudio. If you navigate to the Files pane on
    the same panel, you should also see that a *_site* folder has been created to
    hold the content of the rendered site. Try opening the *index.xhtml* file in your
    web browser. You should see the website in [Figure 10-5](chapter10.xhtml#fig10-5).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要渲染一个 Quarto 网站，请在 RStudio 的右上角查找“Build”选项卡并点击**Render Website**。渲染后的网页现在应出现在
    RStudio 右下角的“Viewer”窗格中。如果你切换到同一面板上的“Files”窗格，你应该也能看到一个*._site* 文件夹已被创建，用来存放渲染网站的内容。试着在你的浏览器中打开*index.xhtml*文件，你应该能看到网站，参考[图10-5](chapter10.xhtml#fig10-5)。
- en: '![](../images/fig10-5.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig10-5.jpg)'
- en: 'Figure 10-5: The Quarto website with warnings and messages'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-5：带有警告和消息的 Quarto 网站
- en: 'As you can see, the web page includes many warnings and messages that you don’t
    want to show. In R Markdown, you removed these in the setup code chunk; in Quarto,
    you can do so in the YAML. Add the following code to the *index.qmd* YAML to remove
    all code, warnings, and messages from the output:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，网页中包含了许多你不希望显示的警告和消息。在 R Markdown 中，你可以在设置代码块中移除这些内容；在 Quarto 中，你可以在 YAML
    中进行设置。将以下代码添加到*index.qmd*的 YAML 中，以移除输出中的所有代码、警告和消息：
- en: '[PRE36]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Note, however, that these options will make changes to only one file. Next,
    you’ll see how to set these options for the entire website.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请注意，这些选项只会影响单个文件。接下来，你将看到如何为整个网站设置这些选项。
- en: Setting Options
  id: totrans-204
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置选项
- en: 'When using distill, you modified the *_site.yml* file to make changes to all
    files in the website. In Quarto, you use the *_quarto.yml* file for the same purpose.
    If you open it, you should see three sections:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 distill 时，你修改了*._site.yml*文件来更改网站中的所有文件。在 Quarto 中，你使用*._quarto.yml*文件来达到同样的目的。如果你打开它，你应该能看到三个部分：
- en: '[PRE37]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The top section sets the project type (in this case, a website). The middle
    section defines the website’s title and determines the options for its navigation
    bar. The bottom section modifies the site’s appearance.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 顶部部分设置了项目类型（在此案例中是网站）。中间部分定义了网站的标题并确定其导航栏的选项。底部部分则修改了网站的外观。
- en: 'You’ll start from the bottom. To remove code, warnings, and messages for every
    page in the website, add the portion of the YAML you wrote earlier to the *_quarto.yml*
    file. The bottom section should now look like this:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 你将从底部开始。为了移除网站中每一页的代码、警告和消息，将你之前写的那部分 YAML 添加到*._quarto.yml*文件中。底部部分现在应该像这样：
- en: '[PRE38]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: If you build the website again, you should now see just the content, as in [Figure
    10-6](chapter10.xhtml#fig10-6).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你再次构建网站，现在你应该只看到内容，参考[图10-6](chapter10.xhtml#fig10-6)。
- en: '![](../images/fig10-6.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig10-6.jpg)'
- en: 'Figure 10-6: The website with warnings and messages removed'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-6：移除警告和消息后的网站
- en: In this section of the _*quarto.yml* file, you can add any options you would
    otherwise place in a single *.qmd* file to apply them across all the pages of
    your website.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *_quarto.yml* 文件的这一部分，你可以添加任何原本应放在单个 *.qmd* 文件中的选项，使它们应用到网站的所有页面。
- en: Changing the Website’s Appearance
  id: totrans-214
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更改网站外观
- en: 'The format section of the *_quarto.yml* file determines the appearance of rendered
    files. By default, Quarto applies a theme called cosmo, but there are many themes
    available. (You can see the full list at *[https://quarto.org/docs/output-formats/html-themes.xhtml](https://quarto.org/docs/output-formats/html-themes.xhtml)*.)
    To see how a different theme affects the output, make the following change:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '*_quarto.yml* 文件中的格式部分决定了渲染文件的外观。默认情况下，Quarto 应用名为 cosmo 的主题，但有许多其他主题可供选择。（你可以在
    *[https://quarto.org/docs/output-formats/html-themes.xhtml](https://quarto.org/docs/output-formats/html-themes.xhtml)*
    查看完整列表。）要查看不同主题对输出的影响，可以进行如下更改：'
- en: '[PRE39]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The minty theme changes the website’s fonts and updates the color scheme to
    gray and light green.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: minty 主题会更改网站的字体，并将配色方案更新为灰色和浅绿色。
- en: 'In addition to using prebuilt themes, you can customize your website with CSS.
    The css: styles.css section in the *_quarto.yml* file indicates that Quarto will
    use any CSS in the *styles.css* file when rendering. Try adding the following
    CSS to *styles.css* to make first-level headers red and 50 pixels large:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '除了使用预构建的主题外，你还可以通过 CSS 自定义你的网站。*_quarto.yml* 文件中的 css: styles.css 部分表示 Quarto
    在渲染时将使用 *styles.css* 文件中的任何 CSS。尝试将以下 CSS 添加到 *styles.css* 中，使一级标题为红色并且字体大小为 50
    像素：'
- en: '[PRE40]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The re-rendered *index.xhtml* now has large red headings (shown in grayscale
    in [Figure 10-7](chapter10.xhtml#fig10-7)).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 重新渲染的 *index.xhtml* 现在有了大号红色标题（在 [图 10-7](chapter10.xhtml#fig10-7) 中以灰度显示）。
- en: '![](../images/fig10-7.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig10-7.jpg)'
- en: 'Figure 10-7: The website with custom CSS applied'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-7：应用自定义 CSS 后的网站
- en: 'An alternative approach to customizing your website is to use Sass variables
    in a *.scss* file, as you did in your presentation. For example, create a file
    called *styles.scss* and add a line like this one to make the body background
    bright yellow:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义网站的另一种方法是使用 *.scss* 文件中的 Sass 变量，正如你在演示中所做的那样。例如，创建一个名为 *styles.scss* 的文件，并添加如下代码行，将页面背景设置为明亮的黄色：
- en: '[PRE41]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'To get Quarto to use the *styles.scss* file, adjust the theme line as follows:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 要让 Quarto 使用 *styles.scss* 文件，请按如下方式调整主题行：
- en: '[PRE42]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This syntax tells Quarto to use the minty theme, then make additional tweaks
    based on the *styles.scss* file. If you render the website again, you should see
    the bright yellow background throughout ([Figure 10-8](chapter10.xhtml#fig10-8),
    again in grayscale for print).
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 该语法告诉 Quarto 使用 minty 主题，然后根据 *styles.scss* 文件进行额外调整。如果你重新渲染网站，你应该会看到整个页面都有明亮的黄色背景（[图
    10-8](chapter10.xhtml#fig10-8)，在打印版中为灰度）。
- en: '![](../images/fig10-8.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig10-8.jpg)'
- en: 'Figure 10-8: The website with custom CSS applied through styles.scss'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-8：通过 styles.scss 应用自定义 CSS 后的网站
- en: Note that when you add a *.scss* file, the tweaks made in *styles.css* no longer
    apply. If you wanted to use those, you’d need to add them to the *styles.scss*
    file.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当你添加 *.scss* 文件时，*styles.css* 文件中所做的调整将不再适用。如果你想使用那些调整，需要将它们添加到 *styles.scss*
    文件中。
- en: 'The line toc: true creates a table of contents on the right side of the web
    pages (which you can see in [Figures 10-5](chapter10.xhtml#fig10-5) through [10-7](chapter10.xhtml#fig10-7),
    labeled On This Page). You can remove the table of contents by changing true to
    false. Add any further options, such as figure height, to the bottom section of
    the *_quarto.yml* file.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 'toc: true 这一行会在网页的右侧创建一个目录（你可以在 [图 10-5](chapter10.xhtml#fig10-5) 到 [10-7](chapter10.xhtml#fig10-7)
    中看到，标记为“本页内容”）。你可以通过将 true 改为 false 来移除目录。在 *_quarto.yml* 文件的底部部分添加任何其他选项，例如图像高度。'
- en: Adjusting the Title and Navigation Bar
  id: totrans-232
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 调整标题和导航栏
- en: 'The middle section of the *_quarto.yml* file sets the website’s title and navigation.
    Change the title and the text for the About page link as follows:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '*_quarto.yml* 文件的中间部分设置了网站的标题和导航。按如下方式更改标题和关于页面链接的文本：'
- en: '[PRE43]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Changing the title requires adjusting the title line. The navbar section functions
    nearly identically to how it does with distill. The href line lists the files
    the navigation bar should link to. The optional text line specifies the text that
    should show up for that link. [Figure 10-9](chapter10.xhtml#fig10-9) shows these
    changes applied to the website.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 更改标题需要调整标题行。导航栏部分的功能几乎与 distill 中相同。href 行列出了导航栏应该链接的文件。可选的文本行指定该链接应显示的文本。[图
    10-9](chapter10.xhtml#fig10-9)展示了这些更改应用到网站的情况。
- en: '![](../images/fig10-9.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig10-9.jpg)'
- en: 'Figure 10-9: The changes to the navigation bar'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-9：导航栏的更改
- en: The title on the home page is still covid-website-quarto, but you could change
    this in the *index.qmd* file.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 首页的标题仍然是 covid-website-quarto，但你可以在*index.qmd*文件中修改它。
- en: Creating Wider Layouts
  id: totrans-239
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建更宽的布局
- en: 'When you created a website with distill, you used the line layout = "l-page"
    to widen the map on the web page. You can accomplish the same result with Quarto
    by using the ::: syntax to add HTML <div> tags:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '当你使用 distill 创建网站时，你使用了 layout = "l-page" 来使地图在网页上变得更宽。你可以通过使用 ::: 语法添加 HTML
    <div> 标签来在 Quarto 中实现相同的效果：'
- en: '[PRE44]{r}'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE44]{r}'
- en: '#| out-width: 100%'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '#| out-width: 100%'
- en: Make map
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建地图
- en: most_recent <- us_states %>%
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: most_recent <- us_states %>%
- en: left_join(covid_data, by = "state") %>%
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: left_join(covid_data, by = "state") %>%
- en: slice_max(
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: slice_max(
- en: order_by = date,
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: order_by = date,
- en: n = 1
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: n = 1
- en: )
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: most_recent %>%
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: most_recent %>%
- en: ggplot(aes(fill = deaths_avg_per_100k)) +
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: ggplot(aes(fill = deaths_avg_per_100k)) +
- en: geom_sf() +
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: geom_sf() +
- en: scale_fill_viridis_c(option = "rocket") +
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: scale_fill_viridis_c(option = "rocket") +
- en: labs(fill = "Deaths per\n100,000 people") +
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: labs(fill = "每10万人死亡数") +
- en: theme_void()
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: theme_void()
- en: '[PRE45]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'This code adds :::{.column-screen-inset} to the beginning of the mapmaking
    code chunk and ::: to the end of it. This code chunk now also includes the line
    #| out-width: 100% to specify that the map should take up all of the available
    width. Without this line, the map would take up only a portion of the window.
    There are a number of different output widths you can use; see the full list at
    *[https://quarto.org/docs/authoring/article-layout.xhtml](https://quarto.org/docs/authoring/article-layout.xhtml)*.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '这段代码在地图生成代码块的开始处添加了 :::{.column-screen-inset}，并在结束处添加了 :::。这个代码块现在还包含了行 #|
    out-width: 100%，用于指定地图应占据所有可用宽度。如果没有这一行，地图只会占据窗口的一部分。你可以使用许多不同的输出宽度；完整的列表可以查看
    *[https://quarto.org/docs/authoring/article-layout.xhtml](https://quarto.org/docs/authoring/article-layout.xhtml)*。'
- en: Hosting Your Website on GitHub Pages and Quarto Pub
  id: totrans-258
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 托管网站到 GitHub Pages 和 Quarto Pub
- en: 'You can host your Quarto website using GitHub Pages, just as you did with your
    distill website. Recall that GitHub Pages requires you to save the website’s files
    in the *docs* folder. Change the *_quarto.yml* file so that the site outputs to
    this folder:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像托管 distill 网站一样，使用 GitHub Pages 托管你的 Quarto 网站。回顾一下，GitHub Pages 要求你将网站的文件保存在*docs*文件夹中。修改*_quarto.yml*文件，使得网站输出到该文件夹：
- en: '[PRE46]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Now, when you render the site, the HTML and other files should show up in the
    *docs* directory. At this point, you can push your repository to GitHub, adjust
    the GitHub Pages settings as you did in [Chapter 9](chapter9.xhtml), and see the
    URL at which your Quarto website will live.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你渲染网站时，HTML 和其他文件应出现在*docs*目录中。此时，你可以将仓库推送到 GitHub，像在[第 9 章](chapter9.xhtml)中一样调整
    GitHub Pages 设置，并查看你 Quarto 网站的 URL。
- en: As an alternative to GitHub Pages, Quarto has a free service called Quarto Pub
    that makes it easy to get your materials online. If you’re not a GitHub user,
    this is a great way to publish your work. To see how it works, you’ll publish
    the website you just made to it. Click the **Terminal** tab on the bottom-left
    pane of RStudio. At the prompt, enter quarto publish. This should bring up a list
    of ways you can publish your website, as shown in [Figure 10-10](chapter10.xhtml#fig10-10).
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 GitHub Pages 的替代方案，Quarto 提供了一个免费的服务叫做 Quarto Pub，它使得将你的资料发布到网上变得非常容易。如果你不是
    GitHub 用户，这是发布你作品的一个不错选择。为了查看它是如何工作的，你将把刚刚创建的网站发布到它上面。在 RStudio 的左下角面板中点击**Terminal**标签页。在提示符下，输入
    quarto publish。这样会显示出一些发布你网站的方式，如[图 10-10](chapter10.xhtml#fig10-10)所示。
- en: '![](../images/fig10-10.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig10-10.jpg)'
- en: 'Figure 10-10: The list of providers to publish your Quarto website'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-10：发布 Quarto 网站的提供者列表
- en: Press **Enter** to select Quarto Pub. You’ll then be asked to authorize RStudio
    to publish to Quarto Pub. Enter **Y** to do so, which should take you to *[https://quartopub.com](https://quartopub.com)*.
    Sign up for an account (or sign in if you already have one). You should see a
    screen indicating that you have successfully signed in and authorized RStudio
    to connect with Quarto Pub. From there, you can return to RStudio, which should
    prompt you to select a name for your website. The easiest option is to use your
    project’s name. Once you enter the name, Quarto Pub should publish the site and
    take you to it, as shown in [Figure 10-11](chapter10.xhtml#fig10-11).
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 按 **Enter** 键选择 Quarto Pub。系统会提示你授权 RStudio 发布到 Quarto Pub。输入 **Y** 进行授权，这将带你到
    *[https://quartopub.com](https://quartopub.com)*。注册一个账户（如果已经有账户则直接登录）。你应该看到一个屏幕，显示你已成功登录并授权
    RStudio 连接到 Quarto Pub。从那里，你可以返回 RStudio，系统将提示你为网站选择一个名称。最简单的选项是使用你的项目名称。一旦输入名称，Quarto
    Pub 应该会发布该网站并带你到网站，正如在[图 10-11](chapter10.xhtml#fig10-11)中所示。
- en: '![](../images/fig10-11.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig10-11.jpg)'
- en: 'Figure 10-11: The website published on Quarto Pub'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-11：发布在 Quarto Pub 上的网站
- en: When you make updates to your site, you can republish it to Quarto Pub using
    the same steps. Quarto Pub is probably the easiest way to publish HTML files made
    with Quarto.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 当你更新网站时，可以使用相同的步骤将其重新发布到 Quarto Pub。Quarto Pub 可能是发布 Quarto 制作的 HTML 文件的最简单方法。
- en: Summary
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: As you’ve seen in this chapter, you can do everything you did in R Markdown
    using Quarto, without loading any external packages. In addition, Quarto’s different
    output formats use a more consistent syntax. For example, because you can make
    new slides in Quarto by adding first- or second-level headers, the Quarto documents
    you use to create reports should translate easily to presentations.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在本章中所看到的，你可以使用 Quarto 做所有在 R Markdown 中做的事情，而不需要加载任何外部包。此外，Quarto 的不同输出格式使用更一致的语法。例如，因为你可以通过添加一级或二级标题在
    Quarto 中制作新幻灯片，所以你用来创建报告的 Quarto 文档应该能够轻松转化为演示文稿。
- en: You’re probably wondering at this point whether you should use R Markdown or
    Quarto. It’s a good question, and one many in the R community are thinking about.
    R Markdown isn’t going away, so if you already use it, you don’t need to switch.
    If you’re new to R, however, you may be a good candidate for Quarto, as its future
    features may not be backported to R Markdown.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可能在想，究竟应该使用 R Markdown 还是 Quarto？这是一个好问题，也是许多 R 社区成员在思考的问题。R Markdown 不会消失，所以如果你已经在使用它，完全不需要切换。然而，如果你是
    R 的新手，你可能是使用 Quarto 的理想人选，因为其未来的功能可能不会回溯到 R Markdown。
- en: Ultimately, the differences between R Markdown and Quarto are relatively small,
    and the impact of switching between tools should be minor. Both R Markdown and
    Quarto can help you become more efficient, avoid manual errors, and share results
    in a wide variety of formats.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，R Markdown 和 Quarto 之间的差异相对较小，切换工具的影响应该是微乎其微的。R Markdown 和 Quarto 都可以帮助你提高效率，避免手动错误，并以各种格式分享结果。
- en: Additional Resources
  id: totrans-273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他资源
- en: Andrew Bray, Rebecca Barter, Silvia Canelón, Christophe Dervieu, Devin Pastor,
    and Tatsu Shigeta, “From R Markdown to Quarto,” workshop materials from rstudio::conf
    2022, Washington, DC, July 25–26, 2022, *[https://rstudio-conf-2022.github.io/rmd-to-quarto/](https://rstudio-conf-2022.github.io/rmd-to-quarto/)*.
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Andrew Bray，Rebecca Barter，Silvia Canelón，Christophe Dervieu，Devin Pastor 和
    Tatsu Shigeta，“从 R Markdown 到 Quarto”，来自 rstudio::conf 2022 的研讨会材料，华盛顿特区，2022年7月25-26日，*
    [https://rstudio-conf-2022.github.io/rmd-to-quarto/](https://rstudio-conf-2022.github.io/rmd-to-quarto/)*。
- en: Tom Mock, “Getting Started with Quarto,” online course, accessed December 1,
    2023, *[https://jthomasmock.github.io/quarto-in-two-hours/](https://jthomasmock.github.io/quarto-in-two-hours/)*.
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tom Mock，“Quarto入门”，在线课程，访问日期：2023年12月1日，* [https://jthomasmock.github.io/quarto-in-two-hours/](https://jthomasmock.github.io/quarto-in-two-hours/)*。
