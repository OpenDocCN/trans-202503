- en: Chapter 3. Looks and Sound
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3章 外观与声音
- en: 'In the last chapter, you learned to move sprites on the Stage using the motion
    commands and how to use the pen to draw patterns. In this chapter, you’ll learn
    about the various commands in the *Looks* and *Sounds* palettes. Along the way,
    you’ll do the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章，你学会了如何使用运动命令让精灵在舞台上移动，以及如何使用画笔命令绘制图案。在本章，你将学习*外观*和*声音*面板中的各种命令。在这个过程中，你将完成以下内容：
- en: Create animations and image effects
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建动画和图像效果
- en: Learn how layers work in Scratch
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习 Scratch 中的图层如何工作
- en: Play sound files and compose music
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放音频文件并编排音乐
- en: Make complete animated scenes of your own
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自己制作完整的动画场景
- en: The commands in the *Looks* palette will let you create animations and apply
    graphic effects like whirl, fisheye, ghost, and so on to costumes and backgrounds.
    The commands in the *Sounds* palette are handy when you want to add sounds, voices,
    or music to your applications. Let’s jump right in with some animation!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*外观*面板中的命令将帮助你创建动画，并为造型和背景应用图形效果，如旋转、鱼眼、鬼影等。*声音*面板中的命令在你需要为应用添加声音、配音或音乐时非常有用。让我们从一些动画开始吧！'
- en: The Looks Palette
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 外观面板
- en: You can draw images directly on the Stage using the pen commands, but costumes
    provide another powerful, and sometimes much easier, way to add graphics to your
    programs. The commands in the *Looks* palette will let you manipulate costumes
    to create animations, add thought bubbles, apply graphic effects, and change a
    sprite’s visibility. We’ll explore those command blocks in this section.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用画笔命令直接在舞台上绘制图像，但造型提供了另一种强大且有时更简单的方法，来为程序添加图形。*外观*面板中的命令将帮助你操控造型来创建动画、添加思维气泡、应用图形效果，并改变精灵的可见性。我们将在本节中探讨这些命令块。
- en: Changing Costumes to Animate
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改变造型以实现动画效果
- en: '*Animation.sb2*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*Animation.sb2*'
- en: You know how to send a sprite from one point to another on the Stage, but static
    sprites don’t look very lifelike as they jump around. If you use different costumes
    and switch between them fast enough, you can make a sprite appear as if it were
    really moving! Open the file *Animation.sb2* to try out the animation in [Figure 3-1](ch03.html#you_can_create_the_illusion_of_animation
    "Figure 3-1. You can create the illusion of animation by switching among different
    costumes.").
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道如何让精灵从舞台上的一个点移动到另一个点，但静态的精灵跳动时并不像活生生的样子。如果你使用不同的造型并快速切换它们，你可以让精灵看起来像是真的在移动！打开文件*Animation.sb2*，在[图3-1](ch03.html#you_can_create_the_illusion_of_animation
    "图3-1. 你可以通过在不同造型之间切换，创造动画的错觉。")中试试这个动画效果。
- en: '![You can create the illusion of animation by switching among different costumes.](httpatomoreillycomsourcenostarchimages2134425.png.jpg)Figure 3-1. You
    can create the illusion of animation by switching among different costumes.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '![你可以通过在不同造型之间切换，创造动画的错觉。](httpatomoreillycomsourcenostarchimages2134425.png.jpg)图3-1.
    你可以通过在不同造型之间切换，创造动画的错觉。'
- en: This application contains one sprite with seven costumes along with one script.
    You can see the seven costumes in the *Costumes* tab and the script in the *Scripts*
    tab of the sprite. When you run the application by clicking the green flag, the
    stick figure will appear to walk on the Stage. The key to its motion is the **next
    costume** command, which tells the sprite to put on the next costume in its list.
    If the sprite is wearing the last costume in the list, it will roll over to its
    first costume.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用包含一个精灵和七个造型，还有一个脚本。你可以在*造型*标签中看到七个造型，在*脚本*标签中看到精灵的脚本。当你点击绿色旗帜运行应用时，纸人会看起来在舞台上行走。它运动的关键是**下一个造型**命令，它告诉精灵切换到列表中的下一个造型。如果精灵穿着列表中的最后一个造型，它会回到第一个造型。
- en: When the green flag is clicked, the script starts a **forever** loop with a
    **wait** block at the end to create a delay of 0.1 seconds after each costume
    change. If you remove this delay from the script, the stick figure will appear
    to run instead of walk. Experiment with different values for the **move** and
    the **wait** blocks and see how they affect the animation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击绿色旗帜时，脚本会启动一个**永久**循环，并在末尾添加一个**等待**块，用来在每次更换造型后创建 0.1 秒的延迟。如果你从脚本中移除这个延迟，纸人看起来就会跑步而不是走路。尝试调整**移动**和**等待**块的不同数值，看看它们如何影响动画效果。
- en: Although you could draw this walking stick figure with the pen commands, you
    would need to write a long script. On the other hand, once you draw these costumes,
    programming the animation is a breeze. Remember that you can create images using
    your favorite paint program or with Scratch’s Paint Editor.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你可以使用画笔命令绘制这个走路的小人，但你需要编写一个长脚本。另一方面，一旦绘制了这些服装，编程动画就变得轻松了。记住，你可以使用你喜欢的绘画程序，或使用
    Scratch 的画图编辑器创建图像。
- en: '*ClickOnFace.sb2*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*ClickOnFace.sb2*'
- en: If you want people to interact with a sprite, you could change its costume in
    response to a mouse click, as in the Click on Face application. This application
    contains a single sprite, named `Face`, which has the five costumes shown in [Figure 3-2](ch03.html#smiley_face_and_the_backdrop_change_when
    "Figure 3-2. The smiley face and the backdrop change whenever the sprite is clicked.").
    It uses the **when this sprite clicked** block (from the *Events* palette) to
    tell the sprite when to switch costumes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望用户与精灵互动，可以在鼠标点击时更改其服装，如“点击面孔”应用所示。此应用包含一个名为 `Face` 的精灵，具有[图 3-2](ch03.html#smiley_face_and_the_backdrop_change_when
    "图 3-2. 每当精灵被点击时，笑脸和背景都会发生变化。")中显示的五种服装。它使用 **when this sprite clicked** 块（来自
    *事件* 调色板）来告诉精灵何时切换服装。
- en: '![The smiley face and the backdrop change whenever the sprite is clicked.](httpatomoreillycomsourcenostarchimages2134427.png.jpg)Figure 3-2. The
    smiley face and the backdrop change whenever the sprite is clicked.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '![每当精灵被点击时，笑脸和背景都会发生变化。](httpatomoreillycomsourcenostarchimages2134427.png.jpg)图
    3-2. 每当精灵被点击时，笑脸和背景都会发生变化。'
- en: When you run this application, every time you click the mouse on the face image,
    the image will change to the next one in the list. The script also uses the **switch
    backdrop to** block to command the Stage to switch randomly to one of its four
    backdrops. When the Stage switches to its `Stage4` image, the `Face` sprite detects
    this event (using the **when backdrop switches to** trigger block from the *Events*
    palette). In this case, the face makes a trip to the upper-right corner of the
    Stage and then returns to the center.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行此应用时，每次点击面部图像时，图像会变为列表中的下一个。该脚本还使用 **switch backdrop to** 块来命令舞台随机切换到其中一个四种背景图像。当舞台切换到
    `Stage4` 图像时，`Face` 精灵检测到此事件（使用 **when backdrop switches to** 触发块，来自 *事件* 调色板）。在这种情况下，面部图像会移动到舞台的右上角，然后返回中心。
- en: Try It Out 3-1
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 试试看 3-1
- en: '*TrafficLight.sb2*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*TrafficLight.sb2*'
- en: The file *TrafficLight.sb2* contains one sprite that has three costumes (named
    `red`, `orange`, and `green`) and an incomplete script, as shown below. Complete
    the application by adding the necessary **wait** blocks to create a realistic
    traffic light animation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 *TrafficLight.sb2* 包含一个精灵，具有三种服装（分别命名为 `red`、`orange` 和 `green`）以及一个不完整的脚本，如下所示。通过添加必要的
    **wait** 块来完成该应用，从而创建一个逼真的交通灯动画。
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2134429.png.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](httpatomoreillycomsourcenostarchimages2134429.png.jpg)'
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*You can use the* **switch backdrop to** *command to change scenes in a story,
    switch levels in a game, and so on. Any sprite in your project can use the* **when
    backdrop switches to** *block to detect when the Stage has switched to a certain
    costume and act accordingly. See the Tips window in the Scratch interface for
    more details.*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可以使用* **switch backdrop to** *命令来更改故事中的场景、游戏中的关卡等。你项目中的任何精灵都可以使用* **when
    backdrop switches to** *块来检测舞台何时切换到某个背景，并相应地做出反应。有关更多详细信息，请参见 Scratch 界面中的提示窗口。*'
- en: Sprites That Speak and Think
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 说话和思考的精灵
- en: You can use the **say** and **think** commands to make your sprite speak or
    think like a character in a comic strip, as illustrated in [Figure 3-3](ch03.html#use_the_say_or_think_commands_to_show_a
    "Figure 3-3. Use the say or think commands to show a message in a speech or a
    thought bubble.") (left).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 **say** 和 **think** 命令，让你的精灵像漫画中的角色一样说话或思考，如[图 3-3](ch03.html#use_the_say_or_think_commands_to_show_a
    "图 3-3. 使用 say 或 think 命令在对话框或思考框中显示消息。")（左侧）所示。
- en: '![Use the say or think commands to show a message in a speech or a thought
    bubble.](httpatomoreillycomsourcenostarchimages2134431.png.jpg)Figure 3-3. Use
    the *say* or *think* commands to show a message in a speech or a thought bubble.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '![使用 *say* 或 *think* 命令在对话框或思考框中显示消息。](httpatomoreillycomsourcenostarchimages2134431.png.jpg)图
    3-3. 使用 *say* 或 *think* 命令在对话框或思考框中显示消息。'
- en: Any phrase you type into these commands will appear above the sprite, and the
    message is displayed permanently. If you want to clear the message, use a **say**
    or **think** block with no text. You could also display a message for a fixed
    time instead with the **say for secs** (or the **think for secs**) command, as
    illustrated in [Figure 3-3](ch03.html#use_the_say_or_think_commands_to_show_a
    "Figure 3-3. Use the say or think commands to show a message in a speech or a
    thought bubble.") (right).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你在这些命令中输入的任何短语都会出现在精灵上方，且消息会永久显示。如果你想清除消息，使用没有文本的 **说** 或 **思考** 块。你也可以使用 **说（秒）**（或
    **思考（秒）**）命令来在固定时间内显示消息，如 [图 3-3](ch03.html#use_the_say_or_think_commands_to_show_a
    "图 3-3。使用说话或思考命令在对话框中显示消息。")（右图）所示。
- en: Try It Out 3-2
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试 3-2
- en: '*Argue.sb2*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*Argue.sb2*'
- en: To see the **Say** and **Think** commands in action, open the file *Argue.sb2*
    and run it. This application simulates an endless argument between two characters,
    as illustrated below. Study the scripts to understand how they use accurate timing
    to synchronize the actions of the two characters.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看**说话**和**思考**命令的效果，打开文件 *Argue.sb2* 并运行它。这个应用模拟了两个角色之间的无休止争论，如下所示。研究脚本，了解它们如何使用精确的时机来同步两个角色的动作。
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2134433.png.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![无标题的图像](httpatomoreillycomsourcenostarchimages2134433.png.jpg)'
- en: Image Effects
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图像效果
- en: '*GraphicEffects.sb2*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*GraphicEffects.sb2*'
- en: The **set effect to** command allows you to apply different graphic effects
    to costumes and backdrops. Scratch gives these effects names like fisheye, whirl,
    mosaic, and so on. [Figure 3-4](ch03.html#this_figure_shows_what_happens_to_the_ca
    "Figure 3-4. This figure shows what happens to the cat when you apply Scratch’s
    graphic effects.") shows exactly what they do.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**设置效果为** 命令允许你对服装和背景应用不同的图形效果。Scratch 给这些效果命名，如鱼眼、旋涡、马赛克等。[图 3-4](ch03.html#this_figure_shows_what_happens_to_the_ca
    "图 3-4。此图展示了当你应用 Scratch 的图形效果时猫咪会发生什么。") 精确展示了它们的效果。'
- en: '![This figure shows what happens to the cat when you apply Scratch’s graphic
    effects.](httpatomoreillycomsourcenostarchimages2134435.png.jpg)Figure 3-4. This
    figure shows what happens to the cat when you apply Scratch’s graphic effects.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![此图展示了当你应用 Scratch 的图形效果时猫咪会发生什么。](httpatomoreillycomsourcenostarchimages2134435.png.jpg)图
    3-4。此图展示了当你应用 Scratch 的图形效果时猫咪会发生什么。'
- en: Click the down arrow in the **set effect to** block to choose the effect you
    want from the drop-down menu. You can also use the **change effect by** command
    to adjust an effect instead of setting it directly. For example, if the current
    ghost effect is set to 40, changing it by 60 would set the ghost effect to 100,
    causing the sprite to disappear (like a ghost). When you want to return an image
    to its original state, use the **clear graphic effects** block.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **设置效果为** 块中的下箭头，从下拉菜单中选择你想要的效果。你也可以使用 **通过改变效果** 命令来调整效果，而不是直接设置它。例如，如果当前的幽灵效果设置为
    40，通过改变 60 会将幽灵效果设置为 100，导致精灵消失（像幽灵一样）。当你想让图像恢复到原始状态时，使用 **清除图形效果** 块。
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*You can apply multiple effects to a sprite at once by using several graphic
    effect commands in sequence.*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可以通过按顺序使用多个图形效果命令，同时对精灵应用多个效果。*'
- en: Size and Visibility
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 大小和可见性
- en: '*SneezingCat.sb2*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*SneezingCat.sb2*'
- en: Sometimes you may need to change the size of a sprite or control when it appears
    in your program. For example, you may want to have closer objects in a scene look
    larger, or you may want to show an “instructions” sprite only at the beginning
    of a game.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能需要改变精灵的大小或控制它在程序中何时出现。例如，你可能希望场景中的近物看起来更大，或者你可能只希望在游戏开始时显示一个“指令”精灵。
- en: If you need to shrink or grow a sprite, the **set size to %** and **change size
    by** commands can help. The first sets a sprite’s size to a percentage of its
    original size, and the second modifies a sprite’s size by a specified amount relative
    to its current size. When you need to make a sprite appear or disappear, use the
    **show** block or the **hide** block, respectively.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要缩小或放大精灵，**设置大小为 %** 和 **改变大小为** 命令可以帮忙。第一个命令将精灵的大小设置为原始大小的百分比，第二个命令相对于当前大小修改精灵的大小。当你需要让精灵出现或消失时，分别使用
    **显示** 块或 **隐藏** 块。
- en: To see these commands in action, open *SneezingCat.sb2*. In this application,
    we’ll have the cat sneeze like a cartoon character by changing its size, as shown
    in [Figure 3-5](ch03.html#this_script_makes_the_cat_sprite_sneezed "Figure 3-5. This
    script makes the Cat sprite sneeze.").
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看这些命令的实际效果，请打开 *SneezingCat.sb2*。在这个应用中，我们将通过改变猫的大小，让它像卡通人物一样打喷嚏，如 [图 3-5](ch03.html#this_script_makes_the_cat_sprite_sneezed
    "图 3-5. 这个脚本让猫精灵打喷嚏。") 所示。
- en: '![This script makes the Cat sprite sneeze.](httpatomoreillycomsourcenostarchimages2134437.png.jpg)Figure 3-5. This
    script makes the *`Cat`* sprite sneeze.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![这个脚本让猫精灵打喷嚏。](httpatomoreillycomsourcenostarchimages2134437.png.jpg)图 3-5.
    这个脚本让 *`Cat`* 精灵打喷嚏。'
- en: The size of the sprite increases as it gets ready to sneeze, and after it sneezes,
    it returns slowly to its original size. Run the program and watch what happens
    to get a feel for these commands.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当精灵准备打喷嚏时，大小会增大，喷嚏打完后，它会慢慢恢复到原来的大小。运行程序并观察发生了什么，体验这些命令的效果。
- en: Try It Out 3-3
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 试试 3-3
- en: Add a block to the end of the script in [Figure 3-5](ch03.html#this_script_makes_the_cat_sprite_sneezed
    "Figure 3-5. This script makes the Cat sprite sneeze.") to have the `Cat` sprite
    finish its dramatic sneeze by vanishing afterward. Add another block to show the
    sprite at the beginning of the script.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [图 3-5](ch03.html#this_script_makes_the_cat_sprite_sneezed "图 3-5. 这个脚本让猫精灵打喷嚏。")
    中，将一个积木添加到脚本的末尾，使 `Cat` 精灵在打完喷嚏后消失。再添加一个积木，在脚本开始时显示这个精灵。
- en: Layers
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 层
- en: The last two commands in the *Looks* palette affect the order in which sprites
    are drawn on the Stage. This order determines which sprites are visible when they
    overlap. For example, let’s say that you want to create a scene of a girl standing
    behind a big rock. There are two layering possibilities, shown in [Figure 3-6](ch03.html#sprite_in_the_front_layer_is_completely
    "Figure 3-6. The sprite in the front layer is completely visible and can cover
    parts of overlapping sprites.") (left).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*Looks* 调色板中的最后两个命令影响精灵在舞台上绘制的顺序。这个顺序决定了当精灵重叠时哪些精灵是可见的。例如，假设你想创建一个女孩站在大岩石后面的场景。有两种层叠的可能性，如
    [图 3-6](ch03.html#sprite_in_the_front_layer_is_completely "图 3-6. 前层的精灵完全可见，并且可以覆盖部分重叠的精灵。")（左图）所示。'
- en: '![The sprite in the front layer is completely visible and can cover parts of
    overlapping sprites.](httpatomoreillycomsourcenostarchimages2134439.png.jpg)Figure 3-6. The
    sprite in the front layer is completely visible and can cover parts of overlapping
    sprites.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![前层的精灵完全可见，并且可以覆盖部分重叠的精灵。](httpatomoreillycomsourcenostarchimages2134439.png.jpg)图
    3-6. 前层的精灵完全可见，并且可以覆盖部分重叠的精灵。'
- en: If you want the girl to be behind the rock, you must bring the rock to the front
    drawing layer or send the girl to the back drawing layer. Scratch provides two
    commands that allow you to reorder the drawing layers, **go to front** and **go
    back layers** (also shown in the figure). The first tells Scratch to always draw
    a sprite on top, while the second sends a sprite back as many layers as you specify.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让女孩站在岩石后面，你必须把岩石移到前面的绘图层，或者把女孩发送到后面的绘图层。Scratch 提供了两个命令，可以让你重新排列绘图层，**go
    to front** 和 **go back layers**（如图所示）。第一个命令让 Scratch 始终将一个精灵绘制在最上面，而第二个命令则将精灵按你指定的层数向后移动。
- en: Try It Out 3-4
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 试试 3-4
- en: '*Layers.sb2*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*Layers.sb2*'
- en: The *Layers.sb2* application has four objects that move on the Stage. You can
    bring an object to the top by pressing the first letter of its color. Run the
    application to explore the effect of the **go to front** command.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*Layers.sb2* 应用中有四个在舞台上移动的物体。你可以通过按下物体颜色的首字母将其移动到最上面。运行应用程序，查看 **go to front**
    命令的效果。'
- en: We’ve covered animation with the *Looks* palette, but there’s another thing
    that can liven up our applications. In the next section, we’ll explore the *Sound*
    palette and its rich set of commands.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了使用 *Looks* 调色板进行动画，但还有另一种可以让我们的应用程序更加生动的方式。在下一节中，我们将探索 *Sound* 调色板及其丰富的命令集。
- en: The Sound Palette
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声音调色板
- en: Games and other applications use sound effects and background music to add excitement.
    In this section, you’ll learn to use Scratch’s sound-related blocks, starting
    with how to incorporate audio files and control their playback. You’ll then look
    at command blocks for playing drums and other musical instruments. After that,
    you’ll find out how to control the volume and change the speed (or tempo) at which
    musical notes and drums are played.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏和其他应用通过音效和背景音乐来增加兴奋感。在本节中，你将学习如何使用Scratch的与声音相关的积木，首先是如何加入音频文件并控制它们的播放。接着，你将学习演奏鼓和其他乐器的命令积木。之后，你会学习如何控制音量并改变音乐音符和鼓点的播放速度（或节奏）。
- en: Playing Audio Files
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 播放音频文件
- en: 'You can save audio files on your computer in many formats, but Scratch only
    recognizes two: WAV and MP3\. There are three command blocks that allow you to
    use these sound files in your applications: **play sound**, **play sound until
    done**, and **stop all sounds**. Both of the first two blocks play a given sound.
    The **play sound** command lets the next command start before the sound finishes
    playing, while **play sound until done** won’t move on to the next command until
    the end of the sound. The **stop all sounds** command immediately turns off any
    sound that is playing.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将音频文件以多种格式保存在计算机上，但Scratch只识别两种格式：WAV和MP3。有三个命令积木可以让你在应用中使用这些音频文件：**播放声音**、**播放声音直到完成**和**停止所有声音**。前两个积木都用于播放指定的声音。**播放声音**命令允许下一个命令在声音未播放完时就开始，而**播放声音直到完成**命令则会等待声音播放结束后才会继续执行下一个命令。**停止所有声音**命令会立即关闭正在播放的所有声音。
- en: 'You can add background music to your application by playing an audio file repeatedly.
    The easiest way to do this is to use **play sound until done** to let the file
    to play completely, and then restart it, as shown in [Figure 3-7](ch03.html#two_ways_to_create_background_music_repe
    "Figure 3-7. Two ways to create background music: Repeat the sound after it finishes
    (left) or start the sound over after playing it for a certain amount of time (right).")
    (left).'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过反复播放音频文件来为你的应用添加背景音乐。最简单的方式是使用**播放声音直到完成**，让文件完全播放完毕，然后重新开始，如[图3-7](ch03.html#two_ways_to_create_background_music_repe
    "图3-7. 创建背景音乐的两种方式：播放完后重复声音（左）或在播放一定时间后重新开始声音（右）")（左）所示。
- en: '![Two ways to create background music: Repeat the sound after it finishes (left)
    or start the sound over after playing it for a certain amount of time (right).](httpatomoreillycomsourcenostarchimages2134441.png.jpg)Figure 3-7. Two
    ways to create background music: Repeat the sound after it finishes (left) or
    start the sound over after playing it for a certain amount of time (right).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![创建背景音乐的两种方式：播放完后重复声音（左）或在播放一定时间后重新开始声音（右）。](httpatomoreillycomsourcenostarchimages2134441.png.jpg)图3-7.
    创建背景音乐的两种方式：播放完后重复声音（左）或在播放一定时间后重新开始声音（右）。'
- en: 'Depending on the audio file, this approach may produce a very short, but sometimes
    noticeable, pause between the consecutive restarts. You could also use the **play
    sound** command with a **wait** command to give yourself more control over the
    play duration, as shown in [Figure 3-7](ch03.html#two_ways_to_create_background_music_repe
    "Figure 3-7. Two ways to create background music: Repeat the sound after it finishes
    (left) or start the sound over after playing it for a certain amount of time (right).")
    (right). By experimenting with the wait time, you may be able to shorten the pause
    to produce a smoother transition between the end of the current playback and the
    beginning of the next.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 根据音频文件的不同，这种方法可能会在连续重启之间产生一个非常短暂但有时会注意到的暂停。你也可以使用**播放声音**命令配合**等待**命令，这样可以更好地控制播放时长，如[图3-7](ch03.html#two_ways_to_create_background_music_repe
    "图3-7. 创建背景音乐的两种方式：播放完后重复声音（左）或在播放一定时间后重新开始声音（右）")（右）所示。通过调整等待时间，你或许能缩短暂停时间，从而使当前播放结束和下一次播放开始之间的过渡更加平滑。
- en: Playing Drums and Other Sounds
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 演奏鼓声和其他声音
- en: '*BeatsDemo.sb2*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*BeatsDemo.sb2*'
- en: If you’re developing games, you’ll probably want to play a short sound effect
    when the player hits a target, finishes a level, and so on. It’s easy to create
    these sounds with the **play drum for beats** command, which plays your choice
    of 18 drum sounds for a certain number of beats. You can also add pauses with
    the **rest for beats** command. The *BeatsDemo.sb2* application, shown in [Figure 3-8](ch03.html#illustration_of_beats_in_scratch
    "Figure 3-8. An illustration of beats in Scratch"), demonstrates the effect of
    the beats parameter.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在开发游戏，可能希望在玩家击中目标、完成关卡等时播放一个短暂的音效。你可以使用**play drum for beats**命令轻松创建这些音效，它可以根据你选择的18种鼓声之一播放指定数量的拍子。你还可以使用**rest
    for beats**命令添加暂停。图[Figure 3-8](ch03.html#illustration_of_beats_in_scratch "Figure
    3-8. An illustration of beats in Scratch")中的*BeatsDemo.sb2*应用演示了beats参数的效果。
- en: '![An illustration of beats in Scratch](httpatomoreillycomsourcenostarchimages2134443.png.jpg)Figure 3-8. An
    illustration of beats in Scratch'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![Scratch中的beats示意图](httpatomoreillycomsourcenostarchimages2134443.png.jpg)图3-8.
    Scratch中的beats示意图'
- en: The script contains three **repeat** blocks with repeat counts of two, four,
    and eight, respectively. Each **repeat** block plays the same drum sound using
    a different number of beats. If you think of the time axis as being divided into
    intervals of 0.2 units, the first loop will play two drum sounds that are 0.8
    units of time apart. The second loop will play four drum sounds that are 0.4 units
    apart, and the third loop plays eight drum sounds that are 0.2 units apart. Each
    loop takes the same amount of time to complete; we’re just hitting the drum a
    different number of times in the same time interval.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本包含三个**repeat**块，重复次数分别为二、四和八。每个**repeat**块使用不同数量的拍子演奏相同的鼓声。如果把时间轴看作被划分为0.2单位的时间间隔，第一个循环将播放两个鼓声，它们之间相隔0.8单位的时间。第二个循环将播放四个鼓声，它们之间相隔0.4单位的时间，而第三个循环则播放八个鼓声，它们之间相隔0.2单位的时间。每个循环完成的时间是相同的；我们只是在同样的时间间隔内敲打鼓的次数不同。
- en: I said “units of time” instead of seconds because the actual time to finish
    each loop depends on the *tempo*, which you can set with the **set tempo to**
    command. Using the default tempo of 60 beats per minute (bpm), each loop in the
    above example will take 1.6 seconds to complete. If you set the tempo to 120 bpm,
    each loop will take 0.8 seconds to complete, while at 30 bpm, each takes 3.2 seconds,
    and so on.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我说“时间单位”而不是秒，因为完成每个循环的实际时间取决于*tempo*，这个值可以通过**set tempo to**命令来设置。使用默认的60拍每分钟（bpm）速度，上述示例中的每个循环将花费1.6秒完成。如果将速度设置为120
    bpm，每个循环将花费0.8秒完成；如果设置为30 bpm，则每个循环花费3.2秒，以此类推。
- en: Composing Music
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作曲
- en: '*FrereJacques.sb2*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*FrereJacques.sb2*'
- en: Scratch also contains two commands that allow you to play musical notes and
    compose your own music. The **play note for beats** command plays the note you
    choose, from 0 to 127, for a number of beats you specify. The **set instrument
    to** block tells Scratch which instrument the note should sound like. Let’s use
    these commands to create a complete song. The script shown in [Figure 3-9](ch03.html#script_that_plays_quotation_markfregrave
    "Figure 3-9. A script that plays “Frère Jacques”") plays the French children’s
    song “Frère Jacques.”
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Scratch还包含两个命令，可以让你演奏音符并创作自己的音乐。**play note for beats**命令会播放你选择的音符，范围从0到127，并持续你指定的拍子数。**set
    instrument to**块告诉Scratch音符应该像什么样的乐器。我们可以使用这些命令创作一首完整的歌曲。图[Figure 3-9](ch03.html#script_that_plays_quotation_markfregrave
    "Figure 3-9. A script that plays “Frère Jacques”")中的脚本演奏了法国儿童歌曲“Frère Jacques”。
- en: '![A script that plays “Frère Jacques”](httpatomoreillycomsourcenostarchimages2134445.png.jpg)Figure 3-9. A
    script that plays “Frère Jacques”'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![演奏“Frère Jacques”的脚本](httpatomoreillycomsourcenostarchimages2134445.png.jpg)图3-9.
    演奏“Frère Jacques”的脚本'
- en: Open this application, named *FrereJacques.sb2*, and experiment with different
    values for the **set instrument to** command to change the instrument that plays
    this song.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 打开这个名为*FrereJacques.sb2*的应用程序，并尝试不同的**set instrument to**命令值，以更改演奏这首歌曲的乐器。
- en: Controlling Sound Volume
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制音量
- en: Let’s say that you want to make a sound fade in response to some event in your
    application. If you are launching a rocket into space, for example, you might
    want the rocket to sound loud when it takes off and become quieter as it moves
    farther away.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你希望在应用程序中的某些事件发生时让声音逐渐减弱。例如，如果你正在发射一枚火箭进入太空，你可能希望火箭起飞时声音很响，然后随着它越来越远，声音变得越来越小。
- en: Scratch contains a set of commands to control the volume, or loudness, of audio
    files, drum sounds, and musical notes. The **set volume to %** command sets a
    sprite’s loudness to a percentage of the speaker’s volume. However, it affects
    only the sprite that uses it (or the Stage), so if you want sounds to play at
    the same time with different volumes, you’ll have to use multiple sprites. The
    **change volume by** block reduces or increases the volume by the number you enter.
    Negative numbers make sounds softer, while positive numbers make them louder.
    You can even show a sprite’s volume on the Stage by checking the box next to the
    **volume** block. These blocks are handy if you want to change the volume based
    on how close a sprite is to a target (as in a treasure-hunt game) or make parts
    of a song louder than others. You can also use these blocks to simulate an orchestra
    by playing different instruments (with different loudness levels) simultaneously.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Scratch包含了一组命令来控制音频文件、鼓声和音符的音量或响度。**设置音量为%**命令将精灵的响度设置为扬声器音量的百分比。然而，它只影响使用它的精灵（或舞台），所以如果你想让不同音量的声音同时播放，你需要使用多个精灵。**更改音量为**块会根据你输入的数字增加或减少音量。负数会让声音更轻，正数则会让声音更响。你甚至可以通过勾选**音量**块旁边的框来显示精灵的音量。这些块非常方便，如果你想根据精灵与目标的距离来改变音量（例如在寻宝游戏中），或者让歌曲的某些部分比其他部分更响亮。你还可以使用这些块通过同时播放不同音量的不同乐器来模拟一个交响乐团。
- en: Try It Out 3-5
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 试一试 3-5
- en: '*VolumeDemo.sb2*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*VolumeDemo.sb2*'
- en: The file *VolumeDemo.sb2* simulates a cat walking into a forest. The application
    uses the **change volume by** command to make the cat’s sound fade away as it
    goes deeper into the woods. Come up with some ideas to make this simulation more
    real and try to implement them.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 文件*VolumeDemo.sb2*模拟了一只猫走进森林的情景。这个应用程序使用**更改音量为**命令来让猫的声音在它走得更深进入树林时逐渐变小。想出一些方法让这个模拟更加真实，并尝试实现它们。
- en: Setting the Tempo
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置节奏
- en: The last three blocks in the *Sound* palette are related to the tempo, or speed,
    at which drums and notes are played. Tempo is measured in beats per minute (bpm).
    The higher the tempo, the faster the notes and drums will play.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*声音*面板中的最后三个块与节奏或鼓和音符的演奏速度相关。节奏以每分钟拍数（bpm）来衡量。节奏越高，音符和鼓声的播放速度越快。'
- en: Scratch lets you choose a specific tempo with the **set tempo to bpm** command.
    You can also tell a sprite to speed up or slow down the tempo by a certain amount
    with the **change tempo by** command. If you want to see a sprite’s tempo on the
    Stage, check the box next to the **tempo** block.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Scratch允许你使用**设置节奏为bpm**命令选择特定的节奏。你也可以使用**更改节奏为**命令来让精灵以某个特定的速率加速或减速。如果你想在舞台上看到精灵的节奏，可以勾选**节奏**块旁边的框。
- en: Try It Out 3-6
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 试一试 3-6
- en: '*TempoDemo.sb2*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*TempoDemo.sb2*'
- en: Open the file *TempoDemo.sb2* and run it to see the **set tempo to bpm** and
    **change tempo by** commands in action.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 打开文件*TempoDemo.sb2*并运行它，观察**设置节奏为bpm**和**更改节奏为**命令的效果。
- en: Scratch Projects
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Scratch项目
- en: The commands in the *Looks* and *Sound* palettes will help you add lots of nifty
    effects to your applications. In this section, we’ll put everything we’ve learned
    so far in this chapter together to create animated scenes of a person dancing
    and some fireworks. This should help you review some of the new command blocks
    and give you more practice with creating a complete Scratch project.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*外观*和*声音*面板中的命令将帮助你为应用程序添加许多有趣的效果。在这一部分，我们将把本章到目前为止学到的所有内容结合起来，创建一个包含跳舞人物和烟花的动画场景。这将帮助你复习一些新的命令块，并让你有更多的机会练习创建一个完整的Scratch项目。'
- en: Dancing on Stage
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 舞台上的舞蹈
- en: '*DanceOnStage.sb2*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*DanceOnStage.sb2*'
- en: In this section, you’ll animate a `Dancer` sprite on the Stage. This application
    is illustrated in [Figure 3-10](ch03.html#dance_party_application_in_action "Figure 3-10. The
    Dance Party application in action."), and the complete script is saved as *DanceOnStage.sb2*.
    We’ll build the whole scene right here—follow along to see how it works!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，你将为舞台上的`舞者`精灵制作动画。这个应用程序在[图3-10](ch03.html#dance_party_application_in_action
    "图3-10。舞会应用程序演示")中进行了说明，完整的脚本保存在*DanceOnStage.sb2*中。我们将在这里一起构建整个场景——跟着一起做，看看它是如何工作的！
- en: '![The Dance Party application in action.](httpatomoreillycomsourcenostarchimages2134447.png.jpg)Figure 3-10. The
    Dance Party application in action.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![舞会应用程序演示](httpatomoreillycomsourcenostarchimages2134447.png.jpg)图3-10。舞会应用程序演示。'
- en: First, start a new project. If Scratch is not already running, all you have
    to do is start it—this will automatically create a new project for you. Otherwise,
    select **New** from the **File** menu. In both cases, you’ll have a new project
    that contains the default `Cat` sprite.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，启动一个新项目。如果 Scratch 尚未运行，只需启动它——这会自动为你创建一个新项目。否则，从**文件**菜单中选择**新建**。无论哪种情况，你都会有一个包含默认`Cat`精灵的新项目。
- en: The backdrop that you’ll use in this application is the `party room` from the
    *Indoors* category. Import this backdrop and delete the default white backdrop,
    which you won’t need. The Stage should now look like [Figure 3-11](ch03.html#weapostrophell_turn_some_sections_of_the
    "Figure 3-11. We’ll turn some sections of the party-room backdrop into sprites
    later.").
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在此应用程序中使用的背景是来自*室内*类别的`party room`。导入这个背景并删除默认的白色背景，因为你不需要它。现在舞台应该看起来像[图 3-11](ch03.html#weapostrophell_turn_some_sections_of_the
    "图 3-11。我们稍后会将派对房间背景的一些部分转换成精灵.")。
- en: '![We’ll turn some sections of the party-room backdrop into sprites later.](httpatomoreillycomsourcenostarchimages2134449.png.jpg)Figure 3-11. We’ll
    turn some sections of the party-room backdrop into sprites later.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![我们稍后会将派对房间背景的一些部分转换成精灵。](httpatomoreillycomsourcenostarchimages2134449.png.jpg)图
    3-11。我们稍后会将派对房间背景的一些部分转换成精灵。'
- en: Examine [Figure 3-10](ch03.html#dance_party_application_in_action "Figure 3-10. The
    Dance Party application in action.") and [Figure 3-11](ch03.html#weapostrophell_turn_some_sections_of_the
    "Figure 3-11. We’ll turn some sections of the party-room backdrop into sprites
    later.") carefully and notice how the `Ball` and `Board` sprites look like parts
    of the backdrop. As you’ll see in a moment, these two sprites were actually created
    from that image and placed on the Stage to cover the sections they came from.
    Creating the two sprites this way lets us change their color and make the Stage
    more realistic.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细查看[图 3-10](ch03.html#dance_party_application_in_action "图 3-10。舞蹈派对应用程序运行中的状态")和[图
    3-11](ch03.html#weapostrophell_turn_some_sections_of_the "图 3-11。我们稍后会将派对房间背景的一些部分转换成精灵.")，注意`Ball`和`Board`精灵看起来像是背景的一部分。正如你接下来会看到的，这两个精灵实际上是从那张图像中创建出来的，并被放置在舞台上以覆盖它们所来自的区域。通过这种方式创建这两个精灵，让我们可以改变它们的颜色，使舞台看起来更真实。
- en: Now we need some background music. Let’s use the *medieval1* file from the *Music
    Loops* category. Import this file to the Stage and then delete the default “pop”
    sound. Next, add the script in [Figure 3-12](ch03.html#stage_plays_our_background_music
    "Figure 3-12. The Stage plays our background music.") to the Stage. It uses the
    **play sound** command along with a wait time that lets the audio file restart
    smoothly. The wait time of 9.5 seconds was selected by experimentation.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要一些背景音乐。让我们使用*Music Loops*类别中的*medieval1*文件。将该文件导入舞台，然后删除默认的“pop”音效。接着，将[图
    3-12](ch03.html#stage_plays_our_background_music "图 3-12。舞台播放我们的背景音乐.")中的脚本添加到舞台。它使用**播放声音**命令并加上一个等待时间，使音频文件可以平滑地重新启动。9.5秒的等待时间是通过实验得出的。
- en: '![The Stage plays our background music.](httpatomoreillycomsourcenostarchimages2134451.png.jpg)Figure 3-12. The
    Stage plays our background music.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![舞台播放我们的背景音乐。](httpatomoreillycomsourcenostarchimages2134451.png.jpg)图 3-12。舞台播放我们的背景音乐。'
- en: Click the green flag to test what you’ve created so far. You should hear an
    audio clip repeating continuously. Stop the script when you’re ready, and we’ll
    add our dancer.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 点击绿色旗帜测试你目前创建的内容。你应该听到一个音频片段不断重复播放。准备好后停止脚本，我们将添加我们的舞者。
- en: Replace the costumes of the `Cat` sprite with those of the `Dancer`. Import
    the `dan-a` and `dan-b` costumes from the *People* category, delete the two `Cat`
    costumes, and change the `Cat` sprite’s name to `Dancer`. The script for the `Dancer`
    is shown in [Figure 3-13](ch03.html#this_script_tells_the_dancer_sprite_how "Figure 3-13. This
    script tells the Dancer sprite how to boogie.").
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 将`Cat`精灵的服装替换为`Dancer`的服装。从*People*类别中导入`dan-a`和`dan-b`服装，删除两个`Cat`服装，并将`Cat`精灵的名称改为`Dancer`。`Dancer`的脚本如[图
    3-13](ch03.html#this_script_tells_the_dancer_sprite_how "图 3-13。这个脚本告诉`Dancer`精灵如何跳舞.")所示。
- en: '![This script tells the Dancer sprite how to boogie.](httpatomoreillycomsourcenostarchimages2134453.png.jpg)Figure 3-13. This
    script tells the *`Dancer`* sprite how to boogie.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![这个脚本告诉`Dancer`精灵如何跳舞。](httpatomoreillycomsourcenostarchimages2134453.png.jpg)图
    3-13。这个脚本告诉*`Dancer`*精灵如何跳舞。'
- en: The `Dancer` moves 20 steps to the right, changes its costume, moves 20 steps
    to the left, and changes its costume again. These steps are repeated forever to
    make him look like he’s really dancing. The script also changes the fisheye effect
    slightly with every step for some variety. Click the green flag to test this new
    addition to the program. You should hear the background music and see the `Dancer`
    moving left and right on the Stage.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`Dancer`精灵向右移动20步，改变服装，向左移动20步，再次改变服装。这些步骤将永远重复，模拟他在跳舞。该脚本还会在每一步改变一些鱼眼效果，增加一些变化。点击绿色旗帜测试程序的新功能。你应该能听到背景音乐，并看到`Dancer`精灵在舞台上左右移动。'
- en: Now that you have a dancer for your party, let’s add some colorful lights with
    the `Ball`, `Board`, and `SpotLight` sprites. To create the `Ball` sprite, click
    the thumbnail of the Stage to select it and then select the **Backdrops** tab.
    Right-click the thumbnail of the `party room` backdrop and select **save to local
    file** from the pop-up menu. This brings up a dialog that allows you to save the
    backdrop image locally. Remember where you saved this image because you’ll import
    it back in a moment.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经为派对准备好了一个舞者，接下来让我们通过`Ball`、`Board`和`SpotLight`精灵加入一些彩色灯光。为了创建`Ball`精灵，点击舞台缩略图选择它，然后选择**背景**标签。右键点击`party
    room`背景的缩略图，并从弹出菜单中选择**保存到本地文件**。这会弹出一个对话框，允许你将背景图像保存到本地。记住你保存图像的位置，因为稍后你需要导入它。
- en: Click the **Upload sprite from file** button (above the Sprite List) and select
    the image you just saved. This creates a new sprite whose costume is the same
    as the backdrop image. Name this sprite `Ball` and edit its costume in the Paint
    Editor to remove everything but the colorful ball depicted in [Figure 3-14](ch03.html#costume_for_the_ball_sprite_as_it_appear
    "Figure 3-14. The costume for the Ball sprite as it appears in the Paint Editor
    and its script") (left). Be sure to paint the space around the ball with transparent
    color. Next, place the `Ball` sprite on the Stage exactly over the spot in the
    backdrop where you took it from so that it looks like part of the image (see [Figure 3-11](ch03.html#weapostrophell_turn_some_sections_of_the
    "Figure 3-11. We’ll turn some sections of the party-room backdrop into sprites
    later.")).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**从文件上传精灵**按钮（位于精灵列表上方），然后选择你刚刚保存的图像。这会创建一个新精灵，服装与背景图像相同。将该精灵命名为`Ball`，并在绘图编辑器中编辑其服装，去除除[图3-14](ch03.html#costume_for_the_ball_sprite_as_it_appear
    "图3-14。Ball精灵在绘图编辑器中的服装及其脚本")（左侧）所描绘的五彩球以外的所有内容。确保将球周围的空间涂上透明颜色。接下来，将`Ball`精灵放置在舞台上，准确地覆盖背景中你取图的地方，这样它看起来就像是图像的一部分（参见[图3-11](ch03.html#weapostrophell_turn_some_sections_of_the
    "图3-11。稍后我们将把派对房间背景的一些部分转换为精灵。")）。
- en: '![The costume for the Ball sprite as it appears in the Paint Editor and its
    script](httpatomoreillycomsourcenostarchimages2134455.png.jpg)Figure 3-14. The
    costume for the *`Ball`* sprite as it appears in the Paint Editor and its script'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![舞蹈精灵在绘图编辑器中的服装及其脚本](httpatomoreillycomsourcenostarchimages2134455.png.jpg)图3-14。*`Ball`*精灵在绘图编辑器中的服装及其脚本'
- en: '[Figure 3-14](ch03.html#costume_for_the_ball_sprite_as_it_appear "Figure 3-14. The
    costume for the Ball sprite as it appears in the Paint Editor and its script")
    also shows the script you should add to the `Ball` sprite. It changes the sprite’s
    color effect continuously to give the illusion that the small circles are actually
    changing color.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[图3-14](ch03.html#costume_for_the_ball_sprite_as_it_appear "图3-14。Ball精灵在绘图编辑器中的服装及其脚本")还展示了你应该为`Ball`精灵添加的脚本。该脚本持续改变精灵的颜色效果，给人一种小圆圈不断变色的错觉。'
- en: Create the `Board` sprite the same way you created the `Ball` sprite. [Figure 3-15](ch03.html#board_sprite_and_its_script
    "Figure 3-15. The Board sprite and its script") shows how this sprite should appear
    in the Paint Editor (left) and the script you’ll need to animate it (right). I’ve
    added some colors to the costume (compare to [Figure 3-11](ch03.html#weapostrophell_turn_some_sections_of_the
    "Figure 3-11. We’ll turn some sections of the party-room backdrop into sprites
    later.")) to make the **change color effect** command effective.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`Board`精灵的方式与创建`Ball`精灵相同。[图3-15](ch03.html#board_sprite_and_its_script "图3-15。Board精灵及其脚本")展示了该精灵在绘图编辑器中的样子（左侧）以及你需要的动画脚本（右侧）。我为服装添加了一些颜色（与[图3-11](ch03.html#weapostrophell_turn_some_sections_of_the
    "图3-11。稍后我们将把派对房间背景的一些部分转换为精灵。")）进行对比），以使**改变颜色效果**命令生效。
- en: '![The Board sprite and its script](httpatomoreillycomsourcenostarchimages2134457.png.jpg)Figure 3-15. The
    *`Board`* sprite and its script'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![棋盘精灵及其脚本](httpatomoreillycomsourcenostarchimages2134457.png.jpg)图3-15。*`Board`*
    精灵及其脚本'
- en: Because the `Board` sprite overlaps with the `Dancer`, the script sends the
    `Board` two layers to the back so the `Dancer` will always be in the front. You
    can do the same thing by selecting the `Dancer` sprite and clicking the **go to
    front** block from the *Looks* palette.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`Board`精灵与`Dancer`精灵重叠，脚本将`Board`精灵移至后两层，使得`Dancer`始终位于前方。你也可以通过选择`Dancer`精灵并点击*外观*面板中的**移至前面**积木来实现同样的效果。
- en: The last sprite in this application is the `SpotLight` sprite. [Figure 3-16](ch03.html#spotlight_sprite_and_its_script
    "Figure 3-16. The SpotLight sprite and its script") shows how this sprite appears
    in the Paint Editor, as well as the script you need to create. The center of the
    image is at the tip of the cone shape, which represents a light beam.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 本应用中的最后一个精灵是`SpotLight`精灵。[图3-16](ch03.html#spotlight_sprite_and_its_script
    "图3-16。SpotLight精灵及其脚本")展示了该精灵在绘图编辑器中的外观，以及你需要创建的脚本。图像的中心位于锥形的尖端，代表一束光。
- en: '![The SpotLight sprite and its script](httpatomoreillycomsourcenostarchimages2134459.png.jpg)Figure 3-16. The
    *`SpotLight`* sprite and its script'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![SpotLight精灵及其脚本](httpatomoreillycomsourcenostarchimages2134459.png.jpg)图3-16。*`SpotLight`*
    精灵及其脚本'
- en: The script first sets the sprite’s ghost effect to 30 to make it transparent
    so that it won’t obscure the backdrop. The script then sends this sprite one layer
    back, which places the light beam behind the dancer. The sprite is then positioned
    so that the light beam appears to be emanating from the spotlight (see [Figure 3-10](ch03.html#dance_party_application_in_action
    "Figure 3-10. The Dance Party application in action.")). You’ll have to choose
    the *x*- and *y*-coordinates based on your drawing. After that, the script commands
    the light beam to follow the dancer (using the **point towards** command) and
    change its color forever.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本首先将精灵的鬼影效果设置为30，使其透明，以免遮挡背景。接着，脚本将该精灵移后一层，使光束位于舞者后面。然后，精灵的位置调整，使光束看起来是从聚光灯发出的（见[图3-10](ch03.html#dance_party_application_in_action
    "图3-10。舞会应用效果")）。你需要根据你的图形选择* x *和* y *坐标。之后，脚本命令光束跟随舞者（使用**指向**命令）并永久改变其颜色。
- en: Once you’re done adding the spotlight, the application should be complete. Click
    the green flag to watch your dance party in action! In addition to the music and
    the dancing, you should also see the `Ball`, `Board`, and `SpotLight` sprites
    changing color as though real disco lights are in action.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 完成聚光灯添加后，应用程序应该完成了。点击绿旗观看你的舞会效果！除了音乐和舞蹈外，你还应该看到`Ball`、`Board`和`SpotLight`精灵随着灯光变化，仿佛真实的迪斯科灯光正在作用。
- en: In the next section, we’ll look at a different application that highlights many
    of the graphic effects we studied in this chapter.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论一个不同的应用，突出展示我们在本章中学习的许多图形效果。
- en: Fireworks
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 烟花
- en: '*Fireworks_NoCode.sb2*'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '*Fireworks_NoCode.sb2*'
- en: Another application that lends itself naturally to the graphics blocks and other
    concepts discussed in this chapter is an animated fireworks scene. In this section,
    you’ll make a simple firework animation that floods the sky with colorful sparks.
    The firework rockets will explode at random times, producing sparks that fall
    as though acted upon by gravity and fade slowly with time, as illustrated in [Figure 3-17](ch03.html#fireworks_animation_in_action
    "Figure 3-17. The fireworks animation in action").
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个与本章讨论的图形积木和其他概念自然契合的应用是一个动画烟花场景。在这一节中，你将制作一个简单的烟花动画，带着五光十色的火花充满天空。烟花火箭将随机爆炸，产生如同受重力作用般的掉落火花，并随着时间慢慢消失，如[图3-17](ch03.html#fireworks_animation_in_action
    "图3-17。烟花动画效果")所示。
- en: '![The fireworks animation in action](httpatomoreillycomsourcenostarchimages2134461.png.jpg)Figure 3-17. The
    fireworks animation in action'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![烟花动画效果](httpatomoreillycomsourcenostarchimages2134461.png.jpg)图3-17。烟花动画效果'
- en: 'Start by opening the file *Fireworks_NoCode.sb2*, which contains the initial
    setup of the application without any scripts. As shown in [Figure 3-17](ch03.html#fireworks_animation_in_action
    "Figure 3-17. The fireworks animation in action"), the application contains two
    sprites: the `City` sprite and the `Rocket` sprite. The `City` sprite shows an
    image of tall buildings that you can animate in any way you like. The `Rocket`
    sprite will continuously create clones that explode in the dark sky, producing
    the fireworks.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先打开文件*Fireworks_NoCode.sb2*，该文件包含了没有任何脚本的应用程序初始设置。如[图 3-17](ch03.html#fireworks_animation_in_action
    "图 3-17. 烟花动画的实际效果")所示，应用程序包含两个精灵：`City` 精灵和 `Rocket` 精灵。`City` 精灵展示了一幅高楼大厦的图像，您可以根据自己的喜好进行动画处理。`Rocket`
    精灵将不断创建克隆，在黑暗的天空中爆炸，产生烟花效果。
- en: The `Rocket` sprite has the eight costumes shown in [Figure 3-18](ch03.html#eight_costumes_of_the_rocket_sprite
    "Figure 3-18. The eight costumes of the Rocket sprite."). The first costume, `C1`,
    is just a small dot that we’ll launch into the sky. When this dot reaches its
    destination, which is selected at random, it will switch to one of the other costumes
    (also at random) to simulate the initial explosion. We’ll then use an appropriate
    graphic effect to make this explosion look more realistic.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`Rocket` 精灵有八个服装，如[图 3-18](ch03.html#eight_costumes_of_the_rocket_sprite "图
    3-18. 火箭精灵的八个服装")所示。第一个服装，`C1`，只是一个小点，我们将把它发射到空中。当这个小点到达它的目标位置（随机选择）时，它将切换到其他服装之一（也是随机选择）以模拟最初的爆炸。然后我们将使用适当的图形效果让这个爆炸看起来更真实。'
- en: '![The eight costumes of the Rocket sprite.](httpatomoreillycomsourcenostarchimages2134463.png.jpg)Figure 3-18. The
    eight costumes of the *`Rocket`* sprite.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '![火箭精灵的八个服装](httpatomoreillycomsourcenostarchimages2134463.png.jpg)图 3-18.
    *`Rocket`* 精灵的八个服装。'
- en: With this plan in mind, add the script shown in [Figure 3-19](ch03.html#first_script_of_the_rocket_sprite
    "Figure 3-19. The first script of the Rocket sprite") to the `Rocket` sprite.
    The script runs when the user clicks the green flag. After hiding the `Rocket`
    sprite, it starts a **forever** loop to create clones of itself at random times.
    Since the clones inherit the visibility state of the `Rocket` sprite, all created
    clones will be hidden at first.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 牢记这个计划后，将[图 3-19](ch03.html#first_script_of_the_rocket_sprite "图 3-19. 火箭精灵的第一个脚本")中显示的脚本添加到
    `Rocket` 精灵中。此脚本会在用户点击绿旗时运行。在隐藏 `Rocket` 精灵后，它开始一个**永远**循环，在随机时间创建自己的克隆。由于克隆继承了
    `Rocket` 精灵的可见性状态，所有创建的克隆一开始都会是隐藏的。
- en: '![The first script of the Rocket sprite](httpatomoreillycomsourcenostarchimages2134465.png.jpg)Figure 3-19. The
    first script of the *`Rocket`* sprite'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '![火箭精灵的第一个脚本](httpatomoreillycomsourcenostarchimages2134465.png.jpg)图 3-19.
    *`Rocket`* 精灵的第一个脚本'
- en: We now need to tell the cloned rockets what to do. This script is shown in [Figure 3-20](ch03.html#start-up_script_of_the_cloned_sprites
    "Figure 3-20. The start-up script of the cloned sprites").
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要告诉克隆的火箭该做什么。这个脚本见于[图 3-20](ch03.html#start-up_script_of_the_cloned_sprites
    "图 3-20. 克隆精灵的启动脚本")。
- en: '![The start-up script of the cloned sprites](httpatomoreillycomsourcenostarchimages2134467.png.jpg)Figure 3-20. The
    start-up script of the cloned sprites'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![克隆精灵的启动脚本](httpatomoreillycomsourcenostarchimages2134467.png.jpg)图 3-20.
    克隆精灵的启动脚本'
- en: The cloned rocket starts by putting on its first costume ① (the small red dot).
    It then moves to a random horizontal position at the bottom of the Stage ②, shows
    itself ③, and glides to a random position ④ in the upper part of the Stage (somewhere
    above the buildings). This part of the script simulates the launch of the rocket,
    and if you run it, you will see a red dot moving from the ground to the sky. When
    the dot reaches its final point in the sky, it explodes due to instructions in
    the second part of the script. First, the clone plays a short drum sound ⑤ (to
    simulate the sound of an explosion). Fireworks explosions start small and expand,
    so the clone sets its initial size to 20%and picks one of its other costumes randomly
    ⑥. It then starts a **repeat** loop ⑦ to grow the firework. Every pass through
    the loop, the clone increases its size by 4\. At the end of the loop, the clone
    deletes itself ⑧.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆的火箭首先穿上它的第一个服装①（小红点）。然后，它移动到舞台底部的一个随机水平位置②，展示自己③，并滑动到舞台上方的一个随机位置④（某个建筑物上方的位置）。这部分脚本模拟了火箭的发射，运行后，你将看到一个红点从地面飞向天空。当这个点到达天空中的最终位置时，它会因为脚本第二部分的指令而爆炸。首先，克隆会播放一个短促的鼓声⑤（模拟爆炸声）。烟花爆炸开始时较小，然后扩展，所以克隆将其初始大小设置为20%，并随机选择另一个服装⑥。接着，它开始一个**重复**循环⑦来增长烟花的大小。每次通过循环时，克隆的大小增加4。循环结束时，克隆会自我删除⑧。
- en: That wraps up this fireworks festival! You should now be able to run the animation
    and show off the scene you created. With just a couple of scripts, we made a relatively
    complex animation.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是本次烟花节的全部内容！现在你应该能够运行动画并展示你创建的场景了。通过仅仅几个脚本，我们就制作了一个相对复杂的动画。
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced many new programming blocks that can be used
    to add some pizzazz to our applications. With these blocks, we can add color,
    animation, graphic effects, music, and more.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了许多新的编程积木，可以用来为我们的应用程序增添一些亮点。有了这些积木，我们可以添加颜色、动画、图形效果、音乐等等。
- en: We explained the blocks in the *Looks* palette and gave several examples of
    how to use them. You animated sprites by switching costumes, learned about drawing
    layers, and saw how layers affect the appearance of overlapping sprites.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们解释了*外观*调色板中的积木，并举了几个如何使用它们的例子。你通过切换服装为角色制作了动画，了解了绘图层，并看到了层级如何影响重叠角色的外观。
- en: We then covered the commands in the *Sound* palette and explained how to play
    audio files, drum sounds, and musical notes. You created a complete dance scene
    with commands from both the *Looks* and the *Sound* palettes, and you finished
    with a bang by making a fireworks animation application.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们介绍了*声音*调色板中的指令，并解释了如何播放音频文件、鼓声和音符。你通过使用*外观*和*声音*调色板中的指令，创建了一个完整的舞蹈场景，并通过制作烟花动画应用程序来完美收尾。
- en: In the next chapter, you’ll learn how to coordinate the work among different
    sprites using message broadcasting and receiving. You’ll also learn how to break
    up a large program into smaller and more manageable pieces, called procedures.
    This concept is the key to writing more complex applications.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用消息广播和接收来协调不同角色之间的工作。你还将学习如何将一个大型程序拆分成更小、更易管理的部分，这些部分称为过程。这个概念是编写更复杂应用程序的关键。
- en: Problems
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: '| **Q:** | 1\. Open the application *Zebra.sb2*, shown below. The application
    contains a single sprite (the `Zebra`), which has three costumes. Write a script
    that makes the `Zebra` move across the Stage and switch among its costumes to
    create the illusion of running.*Zebra.sb2*![image with no caption](httpatomoreillycomsourcenostarchimages2134469.png.jpg)
    |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| **问：** | 1. 打开应用程序*Zebra.sb2*，如下所示。该应用程序包含一个角色（`Zebra`），它有三套服装。编写一个脚本，使`Zebra`在舞台上移动，并切换服装，创造奔跑的错觉。*Zebra.sb2*![无标题的图片](httpatomoreillycomsourcenostarchimages2134469.png.jpg)
    |'
- en: '| **Q:** | 2\. Open the application *Wolf.sb2*, shown below. When you click
    the green flag, the `Wolf` will play the `WolfHowl` sound, which takes about 4
    seconds. Create a script that changes the `Wolf`’s costumes in sync with the sound.
    (Hint: Insert a **wait** block with an appropriate time delay after each costume
    switch.)*Wolf.sb2*![image with no caption](httpatomoreillycomsourcenostarchimages2134471.png.jpg)
    |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| **问：** | 2. 打开应用程序*Wolf.sb2*，如下所示。当你点击绿色旗帜时，`Wolf`会播放`WolfHowl`声音，持续约4秒钟。创建一个脚本，使`Wolf`的服装与声音同步变化。（提示：在每次切换服装后插入一个适当时间延迟的**等待**积木。）*Wolf.sb2*![无标题的图片](httpatomoreillycomsourcenostarchimages2134471.png.jpg)
    |'
- en: '| **Q:** | 3\. Open the application *ChangingHat.sb2*, shown below. The hat
    in this application is a sprite that has five costumes. Create a script to switch
    the `Hat`’s costume when it is clicked. Then create a game in which the player
    dresses characters by clicking on different pieces of clothing.*ChangingHat.sb2*![image
    with no caption](httpatomoreillycomsourcenostarchimages2134473.png.jpg) |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| **问:** | 3\. 打开应用程序*ChangingHat.sb2*，如下所示。这个应用中的帽子是一个精灵，具有五个服装。创建一个脚本，使得点击帽子时切换其服装。然后创建一个游戏，玩家通过点击不同的衣物来为角色穿衣。*ChangingHat.sb2*![无标题图片](httpatomoreillycomsourcenostarchimages2134473.png.jpg)
    |'
- en: '| **Q:** | 4\. Open *Aquarium.sb2*. The application contains six sprites, as
    illustrated below. Try out different graphic effects to animate the aquarium.
    Here are some suggestions:*Aquarium.sb2*'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '| **问:** | 4\. 打开*Aquarium.sb2*。该应用包含六个精灵，如下图所示。尝试不同的图形效果来动画化水族馆。以下是一些建议：*Aquarium.sb2*'
- en: Use the whirl effect on the Stage. Start with a large number like 1,000 to give
    the figure a wavy appearance.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在舞台上使用旋转效果。从较大的数字开始，比如1,000，使角色呈现波浪状外观。
- en: Change the costumes for the `Bubble1` and `Bubble2` sprites at an appropriate
    rate.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以合适的速率改变`Bubble1`和`Bubble2`精灵的服装。
- en: Move the `Fish` across the Stage while changing its costume.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在舞台上移动`Fish`并改变其服装。
- en: Apply the ghost effect to the `Tree` sprite.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`Tree`精灵应用幽灵效果。
- en: Use the color effect on the `Coral` and `Bubble3` sprites.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`Coral`和`Bubble3`精灵使用颜色效果。
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2134475.png.jpg)'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![无标题图片](httpatomoreillycomsourcenostarchimages2134475.png.jpg)'
- en: '|'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **Q:** | 5\. Open the application *Words.sb2* (shown on the next page) and
    animate the words using size and rotation. Create the two scripts shown in the
    figure and run the application to see the result.*Words.sb2*![image with no caption](httpatomoreillycomsourcenostarchimages2134477.png.jpg)
    |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| **问:** | 5\. 打开应用程序*Words.sb2*（见下一页）并使用大小和旋转来动画化文字。创建图中显示的两个脚本并运行应用查看效果。*Words.sb2*![无标题图片](httpatomoreillycomsourcenostarchimages2134477.png.jpg)
    |'
- en: '| **Q:** | 6\. Open the application *Joke.sb2*, shown below. Finish the scripts
    for the `Boy` and the `Girl` sprites to tell any joke you want.*Joke.sb2*![image
    with no caption](httpatomoreillycomsourcenostarchimages2134479.png.jpg) |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| **问:** | 6\. 打开应用程序*Joke.sb2*，如下所示。完成`Boy`和`Girl`精灵的脚本，讲述任何你想要的笑话。*Joke.sb2*![无标题图片](httpatomoreillycomsourcenostarchimages2134479.png.jpg)
    |'
- en: '| **Q:** | 7\. Open *Nature.sb2*. The application contains three sprites, as
    illustrated below. Animate the scene using both motion and sound. Here are some
    suggestions:*Nature.sb2*'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '| **问:** | 7\. 打开*Nature.sb2*。该应用包含三个精灵，如下所示。使用运动和声音来动画化这个场景。以下是一些建议：*Nature.sb2*'
- en: The `Bird` sprite has two costumes that create a flying effect. Create a script
    to fly the `Bird` across the Stage and play the `Bird` sound at random times.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Bird`精灵有两个服装，能够呈现飞行效果。创建一个脚本，让`Bird`在舞台上飞行，并在随机时间播放`Bird`的声音。'
- en: The `Duck` sprite has 12 costumes that show the `Duck` plucking a fish out of
    the water and eating it. Create a script to move the `Duck` across the Stage and
    play the `Duck` sound at random times.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Duck`精灵有12个服装，展示了`Duck`从水中抓鱼并吃掉的场景。创建一个脚本，让`Duck`在舞台上移动，并在随机时间播放`Duck`的声音。'
- en: The `Seal` sprite has four costumes that show the `Seal` playing with the ball.
    Create a script to have the `Seal` play around and make the `SeaLion` sound at
    random times.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Seal`精灵有四个服装，展示了`Seal`和球一起玩的场景。创建一个脚本，让`Seal`四处玩耍，并在随机时间发出`SeaLion`的声音。'
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2134481.png.jpg)'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![无标题图片](httpatomoreillycomsourcenostarchimages2134481.png.jpg)'
- en: '|'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
