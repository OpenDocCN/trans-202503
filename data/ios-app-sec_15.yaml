- en: '**12**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**12**'
- en: '**INJECTION ATTACKS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**注入攻击**'
- en: In this chapter, I’ll discuss types of injection attacks, many of which apply
    both to iOS client applications and to their remote endpoints or APIs. While a
    thorough examination of all potential server-side flaws is outside the scope of
    this book, this chapter will give you an idea of how an iOS app and its complementary
    endpoint or web app can work together to prevent security flaws.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将讨论各种注入攻击，其中许多攻击同时适用于 iOS 客户端应用程序及其远程端点或 API。虽然对所有潜在的服务器端缺陷进行彻底检查超出了本书的范围，但本章将为你提供一个思路，了解
    iOS 应用程序及其配套的端点或 Web 应用程序如何协作来防止安全漏洞。
- en: Injection attacks are standard for web applications, but client-side injection
    attacks are less common and go largely unnoticed by developers and security engineers.
    Client-side injection attacks happen when remotely supplied data is parsed by
    the program running on the device. The most notable examples of this are cross-site
    scripting, SQL injection, predicate injection, and XML injection.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 注入攻击是 Web 应用程序的常见问题，但客户端注入攻击则较为罕见，开发人员和安全工程师往往未予以注意。客户端注入攻击发生在远程提供的数据被设备上运行的程序解析时。最著名的例子包括跨站脚本攻击、SQL
    注入、谓词注入和 XML 注入。
- en: '**Client-Side Cross-Site Scripting**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**客户端跨站脚本攻击**'
- en: '*Cross-site scripting (XSS)* is an issue most often found in web applications,
    but JavaScript can be injected into the content used by iOS applications, too.
    One prominent app reported to have an XSS vulnerability was the Skype mobile application.
    As security researcher Phil Purviance described on his Superevr blog, at the time,
    the app used a `UIWebView` to render content.^([1](footnote.html#fn105)) The full
    name of the remote user was not sanitized before display, which allowed an attacker
    to insert a malicious script into a remote user’s application by embedding the
    script in their username. In this case, the attack could steal sensitive data
    (the contents of the Address Book) from the device. Such attacks can also be used
    to, say, insert a fake login page that submits credentials to an attacker-controlled
    domain.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*跨站脚本攻击（XSS）* 是一种通常出现在 web 应用程序中的问题，但 JavaScript 也可以被注入到 iOS 应用程序使用的内容中。一款著名的存在
    XSS 漏洞的应用是 Skype 移动应用程序。正如安全研究员 Phil Purviance 在他的 Superevr 博客中所描述的，当时该应用使用了 `UIWebView`
    来渲染内容。^([1](footnote.html#fn105)) 在显示远程用户的全名时没有进行消毒，这使得攻击者能够通过将恶意脚本嵌入到用户名中，进而将脚本注入到远程用户的应用程序中。在这种情况下，攻击者可以窃取设备上的敏感数据（如通讯录内容）。这种攻击还可以用来插入一个虚假的登录页面，将凭据提交给攻击者控制的域名。'
- en: If your application uses a `UIWebView`, then to avoid XSS vulnerability, be
    particularly vigilant that you don’t take any unsanitized user-supplied data from
    the server or other external sources and integrate it into the user interface.
    You can do this most effectively with a two-part approach, using both *input sanitization*
    and *output encoding*.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用使用了 `UIWebView`，为了避免 XSS 漏洞，特别需要注意不要从服务器或其他外部源获取未经消毒的用户提供的数据，并将其集成到用户界面中。你可以通过两部分的方法来最有效地做到这一点，既使用
    *输入消毒*，又使用 *输出编码*。
- en: '***Input Sanitization***'
  id: totrans-7
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***输入消毒***'
- en: Input sanitization involves stripping potentially harmful characters from external
    inputs, using either a *blacklist* or *whitelist* approach.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 输入消毒涉及从外部输入中去除潜在的有害字符，可以采用 *黑名单* 或 *白名单* 方法。
- en: '**Blacklisting Bad Input**'
  id: totrans-9
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**黑名单恶意输入**'
- en: In a blacklist, you try to list every character that could cause a security
    problem if accepted as input and give that list to your application. Then, you
    write your application to either remove unacceptable characters or throw an error
    when they appear.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在黑名单中，你会尝试列出所有可能导致安全问题的字符，并将这个列表交给你的应用程序。然后，你编写应用程序，要么删除不接受的字符，要么当这些字符出现时抛出错误。
- en: Blacklisting is a fragile approach, and it’s rarely effective. You need to know
    every conceivable way data could cause trouble, including every type of character
    encoding, every JavaScript event handler or SQL special character, and so on.
    For example, you might simply add `<` and `>` to a blacklist in hopes of preventing
    XSS via `<script>` tags, but you’re ignoring attacks that can be accomplished
    with only double quotes, parentheses, and an equal sign.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 黑名单是一种脆弱的方法，且很少有效。你需要知道每一种可能导致问题的数据形式，包括每种字符编码、每个 JavaScript 事件处理程序或 SQL 特殊字符等等。例如，你可能仅仅将
    `<` 和 `>` 添加到黑名单中，指望通过 `<script>` 标签来防止 XSS 攻击，但你忽略了可以仅通过双引号、括号和等号等字符来完成的攻击。
- en: In general, if your app or an app you’re testing relies on blacklisting characters,
    investigate whether the blacklist might be masking an underlying flaw. Such filters
    can be easily bypassed, and an app that relies on this technique probably also
    lacks effective output encoding, which I’ll discuss in “[Output Encoding](ch12.html#ch12lev2sec02)”
    on [page 201](ch12.html#page_201).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，如果您的应用程序或您正在测试的应用程序依赖于黑名单字符，请调查该黑名单是否掩盖了潜在的缺陷。这类过滤器很容易被绕过，而依赖这种技术的应用程序可能也缺乏有效的输出编码，这点我将在
    “[输出编码](ch12.html#ch12lev2sec02)” 中于[第201页](ch12.html#page_201)讨论。
- en: '**Whitelisting Allowable Input**'
  id: totrans-13
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**允许输入的白名单**'
- en: 'In a whitelist approach, you instead explicitly define the characters that
    are acceptable for a particular user input. Whitelisting is preferable to blacklisting
    because comprehensively specifying what characters should be allowed is easier
    than speculating about what might be bad. In a whitelist approach, you might define
    the characters that a phone number field should allow: 0 through 9 and possibly
    dashes and parentheses. Not only does this preclude most any malicious input,
    but it also keeps data clean in your database.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在白名单方法中，您需要明确地定义哪些字符对特定用户输入是可接受的。白名单优于黑名单，因为全面指定应该允许哪些字符比推测哪些字符可能是坏的要容易得多。在白名单方法中，您可能会定义电话号码字段应允许的字符：0到9，以及可能的破折号和括号。这不仅能排除几乎所有恶意输入，还能保持数据库中的数据清洁。
- en: '**Finding Balance**'
  id: totrans-15
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**找到平衡**'
- en: It’s possible to be misguidedly zealous about input sanitization with either
    blacklisting or whitelisting. Some programs and websites actually disallow legitimate
    characters in some inputs (most notably, user passwords). You may have run across
    an app or site that refuses to accept a password containing special characters
    (such as `!`, `<`, `>`, `'`, or `;`). This is often an indication that the programmers
    are handling data on the backend in a remarkably incompetent way.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在黑名单或白名单的输入清理中，可能会出现过度热衷的情况。一些程序和网站实际上不允许某些输入中的合法字符（最显著的是用户密码）。您可能遇到过拒绝接受包含特殊字符的密码的应用程序或网站（例如`!`、`<`、`>`、`'`
    或 `;`）。这通常是程序员在后端处理数据时表现出极端不胜任的迹象。
- en: For example, if an application strips apostrophes or semicolons, the developers
    may not be using parameterized SQL statements, instead relying on removing “bad”
    special characters to prevent SQL injection. But this blacklisting of suspected
    bad characters just reduces user password complexity, and it’s unlikely to solve
    the problem of SQL injection in any comprehensive fashion.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果一个应用程序去除撇号或分号，开发者可能没有使用参数化的SQL语句，而是依赖于去除“坏”的特殊字符来防止SQL注入。但这种针对可疑坏字符的黑名单仅仅是降低了用户密码的复杂性，并且不太可能以任何全面的方式解决SQL注入问题。
- en: For input sanitization to work correctly, it also needs to happen as close as
    possible to the point before the data is processed or stored. For example, when
    an iOS application talks to a remote API, the application can certainly try to
    strip out harmful characters or restrict input to a certain character range. This
    is fine, but it *only* results in increased usability for the user. The user can
    see immediately that their input won’t be accepted, rather than waiting until
    they fill out all the form data and try to submit it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保输入清理正确工作，它还需要尽可能接近数据处理或存储之前的那一刻。例如，当一个iOS应用程序与远程API通信时，应用程序当然可以尝试去除有害字符或将输入限制在某个字符范围内。这是可以的，但它*仅仅*会提高用户的可用性。用户可以立即看到他们的输入不会被接受，而不需要等到填写完所有表单数据并尝试提交时才发现问题。
- en: 'Your typical users may appreciate that side effect, but there’s a problem here:
    the user controls the device and, ultimately, how your program behaves. If your
    UI won’t allow certain values as input, all an attacker needs to do is route the
    device’s traffic through a proxy, as I described in “[Network and Proxy Setup](ch04.html#ch04lev1sec04)”
    on [page 43](ch04.html#page_43). The user can then modify data after it leaves
    the app but before it reaches the server and add the harmful characters back.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您的典型用户可能会欣赏这种副作用，但这里有一个问题：用户控制设备，并最终控制程序的行为。如果您的用户界面不允许某些值作为输入，攻击者所需要做的就是通过代理路由设备的流量，正如我在
    “[网络和代理设置](ch04.html#ch04lev1sec04)” 中于[第43页](ch04.html#page_43)描述的那样。用户可以在数据离开应用程序但尚未到达服务器时修改数据，并将有害字符重新添加回去。
- en: To counter this possibility, never trust a mobile app to supply good data. In
    a client-server app, always ensure that sanitization happens on the server.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应对这种可能性，永远不要信任移动应用提供正确的数据。在客户端-服务器应用程序中，始终确保消毒工作在服务器端完成。
- en: With sane input sanitization in place, you should move on to encoding your output.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入消毒得当的情况下，你应该继续进行输出编码。
- en: '***Output Encoding***'
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***输出编码***'
- en: Output encoding, sometimes known as HTML entity encoding, is the process of
    taking user input and replacing characters with their HTML representations. This
    process is necessary for any potentially untrusted data that might end up rendered
    in a WebView. For example, the characters `<` and `>` would be translated to `&lt;`
    and `&gt;`, respectively. When data is displayed to the user, those characters
    should appear in the UI as `<` and `>`, but because they’ve been encoded, the
    HTML engine doesn’t process them as metacharacters, which might be used in a `<script>`
    tag.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 输出编码，有时也称为 HTML 实体编码，是将用户输入中的字符替换为其 HTML 表示的过程。对于任何可能未被信任的数据，这个过程是必要的，这些数据可能最终会在
    WebView 中呈现。例如，字符 `<` 和 `>` 会分别转换为 `&lt;` 和 `&gt;`。当数据显示给用户时，这些字符应该在 UI 中显示为 `<`
    和 `>`，但由于它们已被编码，HTML 引擎不会将它们处理为元字符，后者可能在 `<script>` 标签中使用。
- en: Output encoding is the last and most potent line of defense before delivering
    HTML that contains third-party input to a client. Even if you totally neglected
    to strip potentially harmful metacharacters during input sanitization, as long
    as you encode your output, you don’t have to worry about whether the data you
    send will be executed by the browser rather than just displayed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 输出编码是交付包含第三方输入的 HTML 给客户端之前的最后一道且最强有力的防线。即使你在输入消毒过程中完全忽略了潜在的有害元字符，只要你对输出进行编码，就不必担心你发送的数据是否会被浏览器执行，而只是显示出来。
- en: '**Displaying Untrusted Data**'
  id: totrans-25
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**显示不可信的数据**'
- en: Like input sanitization, output encoding is usually a process you should perform
    on the server side, not the client. But if you have to display data from domains
    outside your control that contain untrusted data, you’ll want to perform HTML
    entity encoding before displaying content to the user.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 与输入消毒一样，输出编码通常应该在服务器端执行，而不是在客户端。但如果你必须展示来自你无法控制的域的数据，并且这些数据不可信，那么你需要在显示内容给用户之前进行
    HTML 实体编码。
- en: 'Google Toolbox for Mac includes two category methods of `NSString` that you
    could use to encode HTML entities on the client side: `gtm_string-ByEscapingForHTML`
    and `gtm_stringByEscapingForAsciiHTML`.^([2](footnote.html#fn106)) Including Google’s
    category for `NSString` in your project makes it so you can simply call a method
    on any `NSString` object to have it return an encoded representation:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Google Toolbox for Mac 包含两个 `NSString` 类的类别方法，你可以用来在客户端编码 HTML 实体：`gtm_string-ByEscapingForHTML`
    和 `gtm_stringByEscapingForAsciiHTML`。^([2](footnote.html#fn106)) 在你的项目中包括 Google
    的 `NSString` 类别，使得你可以简单地调用任何 `NSString` 对象的方法，返回一个编码后的表示：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After this escaping, `escaped` should contain the `NSString Meet &amp; greet`,
    which should be safe to render within HTML.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行转义之后，`escaped` 应该包含 `NSString Meet &amp; greet`，它应该可以安全地在 HTML 中渲染。
- en: '**Don’t Over-Encode**'
  id: totrans-30
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**不要过度编码**'
- en: As with input sanitization, be careful not to get carried away with output encoding.
    Some applications entity-encode received characters before sending them to a server
    or storing them in a database and then end up reencoding the encoded data. You
    may have seen the results in mobile apps or web apps.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 与输入消毒一样，输出编码也需要小心，避免过度处理。一些应用程序在将接收到的字符发送到服务器或存储到数据库之前，会先进行实体编码，然后又重新编码已经编码的数据。你可能在移动应用程序或
    Web 应用程序中看到过这种情况。
- en: 'For example, I once saw an application display a banner inviting me to “Meet
    &amp; greet.” In the underlying HTML source, this data would appear as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我曾经看到一个应用程序显示一个横幅，邀请我参加“Meet &amp; greet”。在底层的 HTML 源代码中，这些数据将如下所示：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The original input was already encoded (to `&amp;`) and would have rendered
    fine as `&` in the browser. Encoding it again causes it to show up as `&amp;`
    to the user. This doesn’t create a security problem, but it can cause your data
    to become messy and hard to deal with. Just remember that there’s a reason the
    technique is called *output encoding*: it needs to be done just before output.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 原始输入已经被编码（为 `&amp;`），在浏览器中会正确显示为 `&`。如果再次进行编码，它就会显示为 `&amp;`。这样并不会引发安全问题，但可能导致数据变得混乱，难以处理。只需记住，这项技术被称为
    *输出编码*，原因在于它需要在输出之前进行。
- en: '**SQL Injection**'
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**SQL 注入**'
- en: Client-side SQL injection results from parsing externally supplied data that
    injects valid SQL into a badly formed SQL statement. Statements that are constructed
    dynamically on execution, using unsanitized, externally supplied input, are vulnerable
    to SQL injection. Malicious input will contain SQL metacharacters and statements
    that subvert the intent of the original query.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端 SQL 注入是由于解析外部提供的数据，将有效的 SQL 注入到格式错误的 SQL 语句中。动态构建的语句，如果使用了未经清理的外部输入，就容易受到
    SQL 注入攻击。恶意输入会包含 SQL 元字符和语句，破坏原始查询的意图。
- en: For example, imagine a simple status message is posted to a website by a user.
    It then gets downloaded and added to a local data store. If the user posting the
    original content has basic security knowledge and malicious intent, the user could
    embed SQL into the message, which will be executed when parsed by the SQL engine.
    This malicious SQL could destroy or modify existing data in the data store.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设一个用户将简单的状态信息发布到网站上。然后该信息被下载并添加到本地数据存储中。如果发布原始内容的用户具有基本的安全知识和恶意意图，用户可能会将
    SQL 嵌入到信息中，当 SQL 引擎解析时就会执行这些恶意 SQL。此类恶意 SQL 可能会破坏或修改数据存储中的现有数据。
- en: On iOS, the most commonly used SQL API is SQLite. [Listing 12-1](ch12.html#ch12ex1)
    shows an example of an incorrectly formed, dynamically constructed SQL statement
    for SQLite.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 iOS 上，最常用的 SQL API 是 SQLite。[清单 12-1](ch12.html#ch12ex1) 显示了一个格式错误的、动态构建的
    SQLite SQL 语句示例。
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 12-1: An unparameterized SQL statement vulnerable to SQL injection*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 12-1：一个易受 SQL 注入攻击的未参数化 SQL 语句*'
- en: The problem here is that the `uid` value is being taken from user-supplied input
    and inserted as is into a SQL statement using a format string. Any SQL in the
    user-supplied parameter will then become part of that statement when it ultimately
    gets executed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题是 `uid` 的值来自用户提供的输入，并且直接插入到 SQL 语句中，采用了格式化字符串的方式。任何用户提供的 SQL 都会在最终执行时成为该语句的一部分。
- en: To prevent SQL injection, simply use parameterized statements to avoid the dynamic
    construction of SQL statements in the first place. Instead of constructing the
    statement dynamically and passing it to the SQL parser, a parameterized statement
    causes the statement to be evaluated and compiled independently of the parameters.
    The parameters themselves are supplied to the compiled statement upon execution.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止 SQL 注入，只需使用参数化语句来避免首先动态构建 SQL 语句。与其动态构建语句并将其传递给 SQL 解析器，不如使用参数化语句，这样 SQL
    语句就会独立于参数进行评估和编译。在执行时，参数会被传递给已编译的语句。
- en: Using parameterized statements, the correct way to structure the query in [Listing
    12-1](ch12.html#ch12ex1) is to use `?` as a placeholder character for the supplied
    parameter, as in [Listing 12-2](ch12.html#ch12ex2).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用参数化语句，正确的查询构造方式是将 `?` 作为占位符，用于表示提供的参数，如 [清单 12-2](ch12.html#ch12ex2) 所示，而不是像
    [清单 12-1](ch12.html#ch12ex1) 那样动态构建 SQL。
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 12-2: A properly parameterized SQL statement*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 12-2：一个正确参数化的 SQL 语句*'
- en: The SQL statement is constructed with the `?` placeholder at ➊. The code then
    compiles the SQL statement with `sqlite3_prepare_v2` at ➋ and lastly binds the
    user-supplied `uid` using `sqlite3_bind_int` at ➌. Since the SQL statement has
    already been constructed, no additional SQL provided in the `uid` parameter will
    be added to the SQL itself; it’s simply passed in by value.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 语句在 ➊ 处使用 `?` 占位符构建。然后，代码使用 `sqlite3_prepare_v2` 在 ➋ 处编译 SQL 语句，最后通过 `sqlite3_bind_int`
    在 ➌ 处绑定用户提供的 `uid`。由于 SQL 语句已经构建完成，`uid` 参数中提供的任何额外 SQL 都不会被添加到 SQL 中，它仅通过值传递。
- en: In addition to preventing SQL injection, using parameterized, prepared statements
    will improve application performance under most circumstances. You should use
    them for all SQL statements, even if a statement isn’t taking input from untrusted
    sources.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 除了防止 SQL 注入，使用参数化的预处理语句在大多数情况下还会提高应用程序的性能。即使某个语句没有接受来自不信任源的输入，您也应当为所有 SQL 语句使用它们。
- en: '**Predicate Injection**'
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**谓词注入**'
- en: '*Predicates* let you perform logical comparisons between data using a basic
    query language not dissimilar to SQL. In a basic `NSPredicate`, values are compared
    or filtered using format strings.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*谓词* 让你使用类似 SQL 的基本查询语言，在数据之间执行逻辑比较。在基本的 `NSPredicate` 中，值是通过格式化字符串进行比较或过滤的。'
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: At ➊, an array of various types of fruit is created; this array will be the
    data source to evaluate against an expression. When creating a predicate at ➋,
    a query is created that checks whether the string `"Grape"` is contained in the
    item the predicate is being compared to. (The `[c]` makes this comparison case
    insensitive.) When a new array is instantiated at ➌ to contain the results of
    this comparison, the `filteredArrayUsingPredicate` method of the `fruit` array
    is used to pass in the predicate. The resulting `grapethings` array should now
    contain both `"Grape"` and `"grapefruit"`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊，创建了一个包含各种水果类型的数组；这个数组将作为数据源，用来与表达式进行比较。在➋创建谓词时，生成了一个查询，检查字符串`"Grape"`是否包含在谓词正在比较的项中。（`[c]`使得这个比较不区分大小写。）当在➌实例化一个新数组以包含这个比较的结果时，`fruit`数组的`filteredArrayUsingPredicate`方法被用来传入谓词。结果，`grapethings`数组现在应该包含`"Grape"`和`"grapefruit"`。
- en: So far, so good! But a few things can go wrong when you build a predicate query
    using externally supplied data. First, consider the case where a predicate is
    built using SQL’s `LIKE` operator, as follows.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切顺利！但是在使用外部提供的数据构建谓词查询时，可能会出现一些问题。首先，考虑使用SQL的`LIKE`操作符构建谓词的情况，如下所示。
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This example evaluates a PIN, perhaps a secondary form of authentication for
    my application. But the `LIKE` operator performs the evaluation, which means a
    simple entry of the wildcard character ([*]) from a user will cause the predicate
    to evaluate to true, effectively bypassing PIN protection.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例评估一个PIN码，可能是我应用程序的二级身份验证方式。但`LIKE`操作符执行了这个评估，这意味着用户输入简单的通配符字符（[*]）会导致谓词评估为真，从而有效地绕过了PIN保护。
- en: 'This result may seem obvious to those familiar with SQL injection (since SQL
    also has a `LIKE` operator), but consider the more subtle case where you’re examining
    code that uses the predicate `MATCHES` operator, as shown here:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于熟悉SQL注入的人来说，这个结果可能是显而易见的（因为SQL也有`LIKE`操作符），但请考虑更微妙的情况，比如你正在检查使用谓词`MATCHES`操作符的代码，如下所示：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This code has the same issue as the `LIKE` example, but rather than just accepting
    wildcards, `MATCHES` expects a regular expression. Therefore, using `.*` as your
    PIN will be enough to bypass validation.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码与`LIKE`示例存在相同的问题，但与仅接受通配符不同，`MATCHES`期望一个正则表达式。因此，使用`.*`作为你的PIN码就足以绕过验证。
- en: To prevent predicate injection attacks, examine all uses of `NSPredicate` in
    your code and make sure that the operators being used make sense for the application.
    It’s also probably a good idea to limit the characters that are allowed in user-supplied
    data that gets passed to a predicate to ensure that characters like wildcards
    don’t get plugged in. Or, simply don’t use a predicate for security-sensitive
    operations.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止谓词注入攻击，检查你代码中所有`NSPredicate`的使用，确保所用的操作符对应用程序而言是合理的。还应该限制用户提供的数据中可以传递给谓词的字符，以确保像通配符这样的字符不会被插入。或者，干脆不要在安全敏感操作中使用谓词。
- en: '**XML Injection**'
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**XML注入**'
- en: XML injection occurs when malicious XML is parsed by an XML parser instance.
    Typically, this type of attack is used to force an application to load external
    resources over the network or consume system resources. In the iOS world, the
    most commonly used XML parser is the Foundation `NSXMLParser` class.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: XML注入发生在恶意XML被XML解析器实例解析时。通常，这种类型的攻击被用来迫使应用程序通过网络加载外部资源或消耗系统资源。在iOS环境中，最常用的XML解析器是Foundation的`NSXMLParser`类。
- en: '***Injection Through XML External Entities***'
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***通过XML外部实体注入***'
- en: 'One basic function of an XML parser is to handle XML entities. You can basically
    think of these as shortcuts or euphemisms. For example, say you have a simple
    string like this one:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: XML解析器的一个基本功能是处理XML实体。你可以把这些当作快捷方式或委婉说法。例如，假设你有这样一个简单的字符串：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You could then reference the entity in other parts of an XML document, and
    the parser would insert the contents of the entity at that placeholder. To reference
    your defined entity, simply use this syntax:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以在XML文档的其他部分引用这个实体，解析器会在该占位符处插入实体的内容。要引用你定义的实体，只需使用以下语法：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`NSXMLParser` instances have several configurable parameters that can be set
    after instantiation. If `shouldResolveExternalEntities` is set to `YES` on an
    `NSXMLParser` instance, the parser will honor *Document Type Definitions (DTDs)*,
    which can define entities fetched from external URLs. (That’s why these are called
    *external* entities.) When a defined entity is encountered later in the parsed
    XML, the URL will be requested, and the results of the query will be used to populate
    the XML, as in this example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`NSXMLParser`实例有多个可配置的参数，这些参数可以在实例化后进行设置。如果`shouldResolveExternalEntities`在`NSXMLParser`实例上设置为`YES`，则解析器将遵循*文档类型定义（DTD）*，该定义可以从外部URL获取实体。（这就是这些被称为*外部*实体的原因。）当解析的XML中遇到已定义的实体时，URL将被请求，并且查询结果将用于填充XML，如下例所示：'
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, an XML parser is instantiated that reads data from an `NSURL` passed to
    the `initWithContentsOfURL` argument. But if the remote server decides to return
    huge amounts of data, or to simply hang, the client application may crash or hang
    in response.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，实例化了一个XML解析器，它从传递给`initWithContentsOfURL`参数的`NSURL`读取数据。但如果远程服务器决定返回大量数据，或只是简单地挂起，客户端应用程序可能会崩溃或响应挂起。
- en: Remember, however, that an external entity can also refer to a local file, meaning
    the file’s contents could be included in your parsed XML. If that XML is stored
    and then later delivered to the server or another third party, the contents of
    the file will be disclosed along with the rest of the XML. To avoid such scenarios,
    ensure that any URL or filename passed to the XML parser is thoroughly sanitized,
    ideally by a using whitelisting approach, as I discussed in relation to cross-site
    scripting in “[Whitelisting Allowable Input](ch12.html#ch12lev3sec02)” on [page
    12](ch01.html#page_12).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请记住，外部实体也可以引用本地文件，这意味着文件的内容可能会被包含在解析的XML中。如果该XML被存储并在以后发送到服务器或其他第三方，则该文件的内容将与其余的XML一起披露。为了避免这种情况，确保任何传递给XML解析器的URL或文件名都经过彻底清理，理想的做法是使用白名单方法，就像我在"[允许输入的白名单](ch12.html#ch12lev3sec02)"中讨论的跨站脚本一样，详见[第12页](ch01.html#page_12)。
- en: Note that in iOS 7.0 and 7.1 the default behavior of the XML parser is to resolve
    external entities (the opposite of the parser’s intended behavior), and using
    `setShouldResolveExternalEntities:NO` doesn’t actually work.^([3](footnote.html#fn107))
    Unfortunately, there is no workaround to secure the XML parser for older versions
    of iOS, short of using an alternative XML parser. The issue was resolved in iOS
    8.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在iOS 7.0和7.1中，XML解析器的默认行为是解析外部实体（与解析器的预期行为相反），并且使用`setShouldResolveExternalEntities:NO`实际上不起作用。^([3](footnote.html#fn107))
    不幸的是，除了使用替代的XML解析器外，没有办法修复iOS旧版本中的XML解析器安全问题。该问题在iOS 8中已得到解决。
- en: '**NOTE**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Contrary to what some have claimed,* `*NSXMLParser*` *is* not *vulnerable
    to recursive entity attacks, a type of denial of service otherwise known as the*
    billion laughs *attack. Vulnerable parsers will resolve recursive entities (entities
    that reference other entities) and chew up tons of system resources. However,
    if recursive entity declarations are given to* `*NSXMLParser*`*, an* `*NSXMLParserEntityRefLoopError*`
    *is thrown.*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*与某些人所声称的相反，* `*NSXMLParser*` *并不* *易受递归实体攻击的影响，递归实体攻击是一种拒绝服务攻击，通常被称为*十亿笑声*攻击。易受攻击的解析器会解析递归实体（引用其他实体的实体），并消耗大量系统资源。然而，如果递归实体声明传递给*
    `*NSXMLParser*`*，会抛出一个* `*NSXMLParserEntityRefLoopError*`* 错误。'
- en: Misuse of official external entities isn’t the only element of XML injection
    to watch for in iOS code, however. Some apps incorporate third-party XML libraries,
    which bring their own set of problems.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，滥用官方外部实体并不是iOS代码中XML注入的唯一需要注意的因素。一些应用程序会集成第三方XML库，这些库带来了自己的一系列问题。
- en: '***Issues with Alternative XML Libraries***'
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***关于替代XML库的问题***'
- en: You may encounter alternative XML libraries in various iOS projects, generally
    chosen for their improved performance characteristics over `NSXMLParser` and their
    support for features such as XPath. (Ray Wenderlich offers a good tutorial on
    choosing an XML parser on his blog.^([4](footnote.html#fn108))) When examining
    code that uses an alternate XML library, first ensure that external entity expansion
    is disabled using that library’s standard methods. Then, confirm that any XPath
    queries that integrate externally supplied input sanitize the input first, as
    you would when preventing cross-site scripting. XPath queries should also be parameterized
    in a manner similar to that of SQL queries (see “[SQL Injection](ch12.html#ch12lev1sec02)”
    on [page 203](ch12.html#page_203)), but the methods for doing this may vary depending
    on which third-party libraries are involved.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会在各种 iOS 项目中遇到替代的 XML 库，这些库通常因其比 `NSXMLParser` 更好的性能特性以及对 XPath 等功能的支持而被选用。（Ray
    Wenderlich 在他的博客上提供了一篇关于选择 XML 解析器的好教程。^([4](footnote.html#fn108))) 在查看使用替代 XML
    库的代码时，首先确保通过该库的标准方法禁用外部实体扩展。然后，确认任何集成外部输入的 XPath 查询首先对输入进行清理，就像防止跨站脚本攻击时一样。XPath
    查询还应该以类似 SQL 查询的方式进行参数化（见 [第 203 页](ch12.html#page_203)的“[SQL 注入](ch12.html#ch12lev1sec02)”部分），但具体方法可能会根据涉及的第三方库有所不同。
- en: '**Closing Thoughts**'
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**结束思考**'
- en: 'Ultimately, handling most of the attacks in this chapter comes down to treating
    all external input as hostile: remove potentially malicious content and encode
    or prepare it, if possible, to prevent code execution. It’s a good idea to be
    specific about the content that is allowed for each parameter fetched from the
    UI or from a remote user-manipulated source and enforce this in your program.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，本章大多数攻击的处理方法都归结为将所有外部输入视为敌对：去除潜在的恶意内容，并尽可能地对其进行编码或处理，以防止代码执行。明确允许的每个参数的内容是个好主意，尤其是从
    UI 或远程用户操作的来源获取的内容，并在程序中强制执行这一点。
- en: Now I’ll turn away from shielding against malicious data and toward protecting
    good data with appropriate cryptography.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我将不再讨论防范恶意数据攻击，而是转向使用适当的加密技术保护良好数据。
