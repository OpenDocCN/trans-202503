- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Exploring the Arduino Board and the IDE
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 探索Arduino开发板和IDE
- en: In this chapter, you’ll explore the Arduino board as well as the IDE software
    that you’ll use to create and upload Arduino *sketches* (Arduino’s name for its
    programs) to the board itself. You’ll learn the basic framework of a sketch and
    some basic functions that you can implement in a sketch, and you’ll create and
    upload your first sketch.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将探索Arduino开发板以及你将用于创建和上传Arduino *草图*（Arduino对其程序的称呼）的IDE软件。你将学习草图的基本框架和一些可以在草图中实现的基本功能，并且你将创建并上传你的第一个草图。
- en: The Arduino Board
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Arduino开发板
- en: 'What exactly is Arduino? According to the Arduino website ([http://www.arduino.cc/](http://www.arduino.cc/)),
    it is:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino究竟是什么？根据Arduino官网 ([http://www.arduino.cc/](http://www.arduino.cc/))
    的定义，它是：
- en: An open-source electronics platform based on easy-to-use hardware and software.
    It’s intended for anyone making interactive projects.
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 基于易于使用的硬件和软件的开源电子平台。它适用于任何制作互动项目的人。
- en: In simple terms, the Arduino is a tiny computer system that can be programmed
    with your instructions to interact with various forms of input and output. The
    current Arduino board model, the Uno, is quite small compared to the adult human
    hand, as you can see in [Figure 2-1](#figure2-1).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，Arduino是一个微型计算机系统，可以通过编程来与各种输入和输出设备进行交互。当前的Arduino开发板型号——Uno，相对于成人的手来说非常小，正如你在[图2-1](#figure2-1)中所看到的那样。
- en: '![f02001](image_fi/500587c02/f02001.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![f02001](image_fi/500587c02/f02001.png)'
- en: 'Figure 2-1: An Arduino Uno is quite small.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-1：Arduino Uno相当小。
- en: Although it might not look like much to the uninitiated, the Arduino system
    allows you to create devices that can interact with the world around you. With
    an almost unlimited range of input and output devices, such as sensors, indicators,
    displays, motors, and more, you can program the exact interactions you need to
    create a functional device. For example, artists have created installations with
    patterns of blinking lights that respond to the movements of passers-by, high
    school students have built autonomous robots that can detect an open flame and
    extinguish it, and geographers have designed systems that monitor temperature
    and humidity and transmit this data back to their offices via text message. In
    fact, a quick internet search will turn up an almost infinite number of examples
    of Arduino-based devices.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管对于初学者来说，它看起来可能不太起眼，但Arduino系统允许你创造能够与周围世界互动的设备。借助几乎无限范围的输入和输出设备，如传感器、指示灯、显示器、电动机等，你可以编程实现所需的精确交互，创造一个功能齐全的设备。例如，艺术家创造了响应路人动作的闪烁灯光装置，高中生制作了能够检测火焰并熄灭它的自动化机器人，地理学家设计了监测温度和湿度的系统，并通过短信将数据传输回办公室。实际上，快速的互联网搜索将会出现几乎无限数量的基于Arduino的设备示例。
- en: Let’s explore our Arduino Uno *hardware* (in other words, the “physical part”)
    in more detail and see what we have. Don’t worry too much about understanding
    what you see here, because all these things will be discussed in greater detail
    in later chapters.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地探索一下我们的Arduino Uno *硬件*（换句话说，"物理部分"），看看它有什么。不要太担心理解你在这里看到的内容，因为所有这些内容将在后续章节中详细讨论。
- en: Starting at the left side of the board, you’ll see two connectors, as shown
    in [Figure 2-2](#figure2-2).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从开发板的左侧开始，你会看到两个连接器，如[图2-2](#figure2-2)所示。
- en: '![f02002](image_fi/500587c02/f02002.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![f02002](image_fi/500587c02/f02002.png)'
- en: 'Figure 2-2: The USB and power connectors'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-2：USB和电源连接器
- en: 'On the left is the Universal Serial Bus (USB) connector. This connects the
    board to your computer, for three reasons: to supply power to the board, to upload
    your instructions to the Arduino, and to send data to and receive it from a computer.
    On the right is the power connector. Through this connector, you can power the
    Arduino with a standard wall power adapter (stepped down to 5 volts, of course).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧是通用串行总线（USB）连接器。这个连接器将板子与电脑连接，原因有三：为板子提供电源，上传指令到Arduino，以及向电脑发送和接收数据。右侧是电源连接器。通过这个连接器，你可以用标准的墙壁电源适配器为Arduino供电（当然是降压至5伏）。
- en: 'At the lower middle is the heart of the board: the microcontroller, as shown
    in [Figure 2-3](#figure2-3).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在板子的中下部是板子的核心：微控制器，如[图2-3](#figure2-3)所示。
- en: '![f02003](image_fi/500587c02/f02003.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![f02003](image_fi/500587c02/f02003.png)'
- en: 'Figure 2-3: The microcontroller'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-3：微控制器
- en: The *microcontroller* is the “brains” of the Arduino. It is a tiny computer
    that contains a processor to execute instructions, includes various types of memory
    to hold data and instructions from our sketches, and provides various avenues
    for sending and receiving data. Just below the microcontroller are two groups
    of small sockets, as shown in [Figure 2-4](#figure2-4).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*微控制器*是Arduino的“大脑”。它是一个微型计算机，包含执行指令的处理器，具有各种类型的内存来存储我们的程序中的数据和指令，并提供多种途径来发送和接收数据。微控制器下方是两组小插座，如[图2-4](#figure2-4)所示。'
- en: '![f02004](image_fi/500587c02/f02004.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![f02004](image_fi/500587c02/f02004.png)'
- en: 'Figure 2-4: The power and analog sockets'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-4：电源和模拟插座
- en: The group on the left offers power connections and the ability to use an external
    RESET button. The group on the right offers six analog inputs that are used to
    measure electrical signals that vary in voltage. Furthermore, pins A4 and A5 can
    also be used for sending data to and receiving it from other devices.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧的那组提供了电源连接和使用外部RESET按钮的能力。右侧的那组提供了六个模拟输入，用于测量电压变化的电信号。此外，A4和A5引脚也可用于与其他设备发送和接收数据。
- en: Along the top of the board are two more groups of sockets, as shown in [Figure
    2-5](#figure2-5).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 板子顶部还有另外两组插座，如[图2-5](#figure2-5)所示。
- en: '![f02005](image_fi/500587c02/f02005.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![f02005](image_fi/500587c02/f02005.png)'
- en: 'Figure 2-5: The digital input/output pins'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-5：数字输入/输出引脚
- en: The sockets (or *pins*) numbered 0 to 13 are digital input/output (I/O) pins.
    They can either detect whether or not an electrical signal is present or generate
    a signal on command. Pins 0 and 1 are also known as the *serial port*, which is
    used to exchange data with other devices, such as a computer via the USB connector
    circuitry. The pins labeled with a tilde (~) can also generate a varying electrical
    signal (which looks like an ocean wave on an oscilloscope—thus the wavy tilde).
    This can be useful for such things as creating lighting effects or controlling
    electric motors.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 编号为0到13的插座（或*引脚*）是数字输入/输出（I/O）引脚。它们可以检测电信号是否存在，或根据命令生成信号。0号和1号引脚也被称为*串口*，用于与其他设备交换数据，例如通过USB连接电路与计算机连接。标有波浪号（~）的引脚也可以生成变化的电信号（在示波器上看起来像海浪—因此使用波浪号）。这对于创建灯光效果或控制电动机等用途非常有用。
- en: 'The Arduino has some very useful devices called *light-emitting diodes (LEDs)*;
    these very tiny devices light up when a current passes through them. The Arduino
    board has four LEDs: one on the far right labeled ON, which indicates when the
    board has power, and three in another group, as shown in [Figure 2-6](#figure2-6).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino有一些非常有用的设备，叫做*发光二极管（LED）*；这些非常小的设备在电流通过时会发光。Arduino板上有四个LED灯：一个位于最右边，标有ON，用于指示板子是否有电，另外三个在另一组中，如[图2-6](#figure2-6)所示。
- en: The LEDs labeled *TX* and *RX* light up when data is being transmitted or received,
    respectively, between the Arduino and attached devices via the serial port and
    USB. The *L* LED is for your own use (it is connected to the digital I/O pin number
    13). The little black square to the left of the LEDs is a tiny microcontroller
    that controls the USB interface that allows your Arduino to send data to and receive
    it from a computer, but you don’t generally have to concern yourself with it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 标有*TX*和*RX*的LED分别在数据通过串口和USB在Arduino与附加设备之间传输或接收时亮起。*L* LED供你自己使用（它连接到数字I/O引脚13号）。LED左侧的小黑色方块是一个微型控制器，控制着USB接口，允许你的Arduino与计算机之间传输数据，但你通常无需关心它。
- en: '![f02006](image_fi/500587c02/f02006.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![f02006](image_fi/500587c02/f02006.png)'
- en: 'Figure 2-6: The onboard LEDs'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-6：板载LED
- en: '![f02007](image_fi/500587c02/f02007.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![f02007](image_fi/500587c02/f02007.png)'
- en: 'Figure 2-7: The RESET button'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-7：RESET按钮
- en: Finally, the RESET button is shown in [Figure 2-7](#figure2-7).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，RESET按钮如[图2-7](#figure2-7)所示。
- en: As with a normal computer, sometimes things can go wrong with the Arduino. When
    all else fails, you might need to reset the system and restart your Arduino. The
    simple RESET button on the board is used to restart the system to resolve these
    problems.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 与普通计算机一样，Arduino有时也可能出现问题。当其他方法都失败时，你可能需要重置系统并重新启动Arduino。板上的简单RESET按钮用于重启系统，解决这些问题。
- en: One of the great advantages of the Arduino system is its ease of expandability—that
    is, it’s easy to add more hardware functions. The two rows of sockets along each
    side of the Arduino allow the connection of a *shield*, another circuit board
    with pins that allow it to plug into the Arduino. For example, the shield shown
    in [Figure 2-8](#figure2-8) contains an Ethernet interface that allows the Arduino
    to communicate over networks and the internet.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino系统的一个巨大优势是其易于扩展——也就是说，添加更多硬件功能非常简单。Arduino两侧的两排插座允许连接*扩展板*，这是一块带有引脚的电路板，可以将其插入到Arduino中。例如，[图
    2-8](#figure2-8)中显示的扩展板包含一个以太网接口，使Arduino能够通过网络和互联网进行通信。
- en: '![f02008](image_fi/500587c02/f02008.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![f02008](image_fi/500587c02/f02008.png)'
- en: 'Figure 2-8: Arduino Ethernet interface shield'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-8：Arduino以太网接口扩展板
- en: Notice that the Ethernet shield also has rows of sockets. These enable you to
    insert one or more shields on top. For example, [Figure 2-9](#figure2-9) shows
    that another shield with a large numeric display, a temperature sensor, extra
    data storage space, and a large LED has been inserted.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，以太网扩展板也有一排排插座。这些插座允许你在上面插入一个或多个扩展板。例如，[图 2-9](#figure2-9)显示了一个包含大型数字显示器、温度传感器、额外数据存储空间和大LED的扩展板。
- en: If you use Arduino shields in your devices, you will need to remember which
    shield uses which individual inputs and outputs to ensure that “clashes” do not
    occur. You can also purchase completely blank shields that allow you to add your
    own circuitry. This will be explained further in Chapter 7.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在设备中使用Arduino扩展板，你需要记住哪个扩展板使用哪个单独的输入和输出，以确保不会发生“冲突”。你还可以购买完全空白的扩展板，允许你添加自己的电路。有关详细内容将在第七章进一步说明。
- en: '![f02009](image_fi/500587c02/f02009.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![f02009](image_fi/500587c02/f02009.png)'
- en: 'Figure 2-9: Numeric display and temperature shield'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-9：数字显示和温度扩展板
- en: The companion to the Arduino hardware is the *software*, a collection of instructions
    that tell the hardware what to do and how to do it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino硬件的伴侣是*软件*，一组指令告诉硬件该做什么以及如何做。
- en: Back in Chapter 1, you installed the IDE software on your personal computer
    and configured it for your Arduino. Now you’re going to look more closely at the
    IDE and then write a simple program—known as a *sketch*—for the Arduino.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章中，你已将IDE软件安装到个人计算机上，并将其配置为你的Arduino使用。现在，你将更仔细地查看IDE，然后编写一个简单的程序——称为*草图*——来为Arduino编程。
- en: Taking a Look Around the IDE
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览IDE
- en: 'As shown in [Figure 2-10](#figure2-10), the Arduino IDE resembles a simple
    word processor. The IDE is divided into three main areas: the command area, the
    text area, and the message window area.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图 2-10](#figure2-10)所示，Arduino IDE类似于一个简单的文字处理器。IDE分为三个主要区域：命令区、文本区和消息窗口区。
- en: The Command Area
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命令区
- en: The command area, shown at the top of [Figure 2-10](#figure2-10), includes the
    title bar, menu items, and icons. The title bar displays the sketch’s filename
    (such as *Blink*), as well as the version of the IDE (such as *Arduino 2.0.0-beta.4*).
    Below this is a series of menu items (File, Edit, Sketch, Tools, and Help) and
    icons, as described next.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 命令区，如[图 2-10](#figure2-10)所示，包含标题栏、菜单项和图标。标题栏显示草图的文件名（例如*Blink*），以及IDE的版本（例如*Arduino
    2.0.0-beta.4*）。下面是一系列菜单项（文件、编辑、草图、工具和帮助）和图标，具体描述如下。
- en: '![f02010](image_fi/500587c02/f02010.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![f02010](image_fi/500587c02/f02010.png)'
- en: 'Figure 2-10: The Arduino IDE'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-10：Arduino IDE
- en: Menu Items
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 菜单项
- en: 'As with any word processor or text editor, you can click one of the menu items
    to display its various options:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何文字处理器或文本编辑器一样，你可以点击某个菜单项来显示其各种选项：
- en: '**File** Contains options to save, load, and print sketches; a thorough set
    of example sketches to open; and the Preferences submenu'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**文件** 包含保存、加载和打印草图的选项；一套完整的示例草图供打开使用；以及首选项子菜单'
- en: '**Edit** Contains the usual copy, paste, and search functions common to any
    word processor'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**编辑** 包含任何文字处理器常见的复制、粘贴和搜索功能'
- en: '**Sketch** Contains a function to verify your sketch before uploading it to
    a board, as well as some sketch folder and import options'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**草图** 包含在上传草图到板子之前验证草图的功能，以及一些草图文件夹和导入选项'
- en: '**Tools** Contains a variety of functions as well as the commands to select
    the Arduino board type and USB port'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**工具** 包含各种功能以及选择Arduino板类型和USB端口的命令'
- en: '**Help** Contains links to various topics of interest and the version of the
    IDE'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**帮助** 包含指向各种相关主题的链接以及IDE的版本信息'
- en: The Icons
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 图标
- en: 'Below the menu toolbar are six icons. Mouse over each icon to display its name.
    The icons, from left to right, are as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单工具栏下方是六个图标。将鼠标悬停在每个图标上可显示其名称。图标从左到右依次如下：
- en: '**Verify** Click this to check that the Arduino sketch is valid and doesn’t
    contain any programming mistakes.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**验证** 点击此处检查Arduino草图是否有效，并且没有任何编程错误。'
- en: '**Upload** Click this to verify and then upload your sketch to the Arduino
    board.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**上传** 点击此处验证并上传您的草图到Arduino板。'
- en: '**New** Click this to open a new blank sketch in a new window.'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**新建** 点击此处以在新窗口中打开一个新的空白草图。'
- en: '**Debug** Used with more complex Arduino boards for real-time debugging.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**调试** 用于更复杂的Arduino板进行实时调试。'
- en: Open Click this to open a saved sketch.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 点击此处打开一个已保存的草图。
- en: Save Click this to save the open sketch. If the sketch doesn’t have a name,
    you will be prompted to create one.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存 点击此处保存打开的草图。如果草图没有名称，您将被提示创建一个名称。
- en: '**Serial Monitor** Click this to open a new window for use in sending and receiving
    data between your Arduino and the IDE.'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**串行监视器** 点击此处以打开一个新窗口，用于在Arduino和IDE之间发送和接收数据。'
- en: The Text Area
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本区域
- en: The text area is shown in the middle of [Figure 2-10](#figure2-10). This is
    where you’ll create your sketches. The name of the current sketch is displayed
    in the tab at the upper left of the text area. (The default name is the current
    date.) You’ll enter the contents of your sketch here as you would in any text
    editor.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 文本区域显示在[图2-10](#figure2-10)的中央。这是您将创建草图的地方。当前草图的名称显示在文本区域左上角的标签中。（默认名称为当前日期。）您将在这里输入草图内容，像在任何文本编辑器中一样。
- en: The Output Window
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输出窗口
- en: The output window is shown at the bottom of [Figure 2-10](#figure2-10). Messages
    from the IDE appear in the black area. The messages you see will vary and will
    include messages about verifying sketches, status updates, and so on.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 输出窗口显示在[图2-10](#figure2-10)的底部。来自IDE的消息出现在黑色区域。您看到的消息会有所不同，包括验证草图、状态更新等信息。
- en: At the bottom right of the output window, you should see the name of your Arduino
    board type as well as its connected USB port—*Arduino/Genuino Uno on COM4* in
    this case.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出窗口的右下角，您应该能够看到您的Arduino板类型及其连接的USB端口——此案例中为*Arduino/Genuino Uno，COM4*。
- en: Creating Your First Sketch in the IDE
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在IDE中创建您的第一个草图
- en: An Arduino sketch is a set of instructions that you create to accomplish a particular
    task; in other words, a sketch is a *program*. In this section, you’ll create
    and upload a simple sketch that will cause the Arduino’s LED (shown in [Figure
    2-11](#figure2-11)) to blink repeatedly, by turning it on and then off at one
    second intervals.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino草图是一组指令，用来完成特定的任务；换句话说，草图就是一个*程序*。在本节中，您将创建并上传一个简单的草图，使Arduino的LED（见[图2-11](#figure2-11)）反复闪烁，通过每秒开启一次然后关闭来实现。
- en: '![f02011](image_fi/500587c02/f02011.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![f02011](image_fi/500587c02/f02011.png)'
- en: 'Figure 2-11: The LED on the Arduino board, next to the capital *L*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-11：Arduino板上的LED灯，位于大写字母*L*旁边
- en: To begin, connect your Arduino to your computer with the USB cable. Then open
    the IDE and select your board (Arduino Uno) and USB port type from the drop-down
    menu, as shown in [Figure 2-12](#figure2-12). This ensures that the Arduino board
    is properly connected.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，用USB线将Arduino连接到计算机。然后打开IDE并从下拉菜单中选择您的板类型（Arduino Uno）和USB端口类型，如[图2-12](#figure2-12)所示。这样可以确保Arduino板正确连接。
- en: '![f02012](image_fi/500587c02/f02012.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![f02012](image_fi/500587c02/f02012.png)'
- en: 'Figure 2-12: Selecting the Arduino Uno board'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-12：选择Arduino Uno板
- en: Comments
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: First, enter a comment as a reminder of what your sketch will be used for. A
    *comment* in a sketch is a note written for the user’s benefit. Comments can be
    notes to yourself or others, and they can include instructions or any other details.
    When creating sketches for your Arduino, it’s a good idea to add comments about
    your intentions for the code; these comments can prove useful later when you’re
    revisiting a sketch.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，输入一条注释，以提醒您的草图将用于什么目的。草图中的*注释*是为用户提供的备注。注释可以是给自己或他人的提示，也可以包含说明或任何其他细节。当为您的Arduino创建草图时，最好添加一些关于代码意图的注释；这些注释在以后查看草图时会非常有用。
- en: 'To add a comment on a single line, enter two forward slashes and then the comment,
    like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要在单行上添加注释，请输入两个斜杠，然后是注释，如下所示：
- en: '[PRE0]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The two forward slashes tell the IDE to ignore that line of text when *verifying*
    a sketch, or checking that everything is written properly with no errors.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 两个斜杠告诉IDE在*验证*草图时忽略该行文本，验证是指检查是否一切编写正确，没有错误。
- en: 'To enter a comment that spans two or more lines, enter the characters `/*`
    on a line before the comment and end the comment with the characters `*/` on the
    following line, like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 若要输入跨越两行或更多行的注释，请在注释前的行中输入字符`/*`，并在下一行的末尾使用字符`*/`结束注释，如下所示：
- en: '[PRE1]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `/*` and `*/` tell the IDE to ignore the text that they bracket.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`/*` 和 `*/`告诉IDE忽略它们括起来的文本。'
- en: Enter a comment describing your Arduino sketch using one of these methods. Then
    save your sketch by choosing **File**▶**Save As**. Enter a short name for your
    sketch (such as *blinky*) and click **OK**.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下方法之一输入描述您Arduino草图的注释。然后通过选择**文件**▶**另存为**来保存草图。为您的草图输入一个简短的名称（例如*blinky*），然后点击**确定**。
- en: The default filename extension for Arduino sketches is *.ino*, and the IDE should
    add this automatically. The name for your sketch should be, in this case, *blinky.ino*,
    and you should be able to see it in your Sketchbook.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino草图的默认文件扩展名是*.ino*，并且IDE应自动添加此扩展名。您草图的名称应该是*blinky.ino*，并且应该能够在您的草图本中看到它。
- en: The setup() Function
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: setup()函数
- en: 'The next stage in creating any sketch is to fill in the `void setup()` function.
    This function contains a set of instructions for the Arduino to execute once only,
    each time it is reset or turned on. To create the `setup()` function, add the
    following lines to your sketch, after the comments:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 创建任何草图的下一阶段是填写`void setup()`函数。该函数包含一组指令，供Arduino在每次重置或开机时仅执行一次。要创建`setup()`函数，请在注释后将以下几行添加到您的草图中：
- en: '[PRE2]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Controlling the Hardware
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制硬件
- en: Our program will blink the user LED on the Arduino. The user LED is connected
    to the Arduino’s digital pin 13\. A digital pin can either detect an electrical
    signal or generate one on command. In this project, we’ll generate an electrical
    signal that will light the LED.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的程序将使Arduino上的用户LED闪烁。用户LED连接到Arduino的数字引脚13。数字引脚可以检测电信号，也可以按命令生成电信号。在这个项目中，我们将生成一个电信号来点亮LED。
- en: 'Enter the following into your sketch between the braces (`{` and `}`):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容输入到您的草图中的大括号（`{` 和 `}`）之间：
- en: '[PRE3]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The number `13` in the listing represents the digital pin you’re addressing.
    You’re setting this pin to `OUTPUT`, which means it will generate an electrical
    signal. If you wanted it to detect an incoming electrical signal, then you would
    set the pin’s mode to `INPUT` instead. Notice that the `pinMode()` line ends with
    a semicolon (`;`). Every instruction line in your Arduino sketches will end with
    a semicolon.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 清单中的数字`13`表示您正在操作的数字引脚。您将此引脚设置为`OUTPUT`，这意味着它将生成一个电信号。如果您希望它检测输入的电信号，则应将引脚的模式设置为`INPUT`。请注意，`pinMode()`行的末尾有一个分号（`;`）。在您的Arduino草图中的每一行指令后面都将有一个分号。
- en: Save your sketch at this point to make sure that you don’t lose any of your
    work.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此时保存您的草图，以确保不会丢失任何工作。
- en: The loop() Function
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: loop()函数
- en: Remember that our goal is to make the LED blink repeatedly. To do this, we’ll
    create a `loop()` function to tell the Arduino to execute an instruction over
    and over until the power is shut off or someone presses the RESET button.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们的目标是让LED反复闪烁。为此，我们将创建一个`loop()`函数，告诉Arduino重复执行一条指令，直到断电或有人按下RESET按钮。
- en: 'Enter the code shown in boldface after the `void setup()` section in the following
    listing to create an empty `loop()` function. Be sure to end this new section
    with another brace (`}`), and then save your sketch again:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码清单中，将加粗显示的代码输入到`void setup()`部分，以创建一个空的`loop()`函数。确保在此新部分的末尾添加另一个大括号（`}`），然后再次保存您的草图：
- en: '[PRE4]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Next, enter the actual functions into `void loop()` for the Arduino to execute.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将实际的函数输入到`void loop()`中，供Arduino执行。
- en: 'Enter the following between the `loop()` function’s braces. Then click **Verify**
    to make sure that you’ve entered everything correctly:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容输入到`loop()`函数的大括号之间。然后点击**验证**以确保您输入的内容正确：
- en: '[PRE5]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let’s take this apart. The `digitalWrite()` function controls the voltage that
    is output from a digital pin: in this case, pin 13, connected to the LED. By setting
    the second parameter of this function to `HIGH`, we tell the pin to output a “high”
    digital voltage; current will flow from the pin, and the LED will turn on.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来逐步分析。`digitalWrite()`函数控制从数字引脚输出的电压：在这种情况下，引脚13与LED连接。通过将此函数的第二个参数设置为`HIGH`，我们告诉引脚输出一个“高”数字电压；电流将从引脚流出，LED将点亮。
- en: The `delay()` function causes the sketch to do nothing for a period of time—in
    this case, with the LED turned on, `delay(1000)` causes it to remain lit for 1,000
    milliseconds, or 1 second.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`delay()`函数使草图在一段时间内不执行任何操作——在这种情况下，LED 被点亮，`delay(1000)`使其保持亮灯 1,000 毫秒，或
    1 秒。'
- en: Next, we turn off the voltage to the LED with `digitalWrite(13, LOW);`. The
    current flowing through the LED stops, and the light turns off. Finally, we pause
    again for 1 second while the LED is off, with `delay(1000);`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们通过`digitalWrite(13, LOW);`关闭 LED 的电压。电流停止流过 LED，灯光熄灭。最后，我们再次暂停 1 秒钟，当
    LED 关闭时，使用`delay(1000);`。
- en: 'The completed sketch should look like this:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的草图应该是这样的：
- en: '[PRE6]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Before you do anything further, save your sketch!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，保存你的草图！
- en: Verifying Your Sketch
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证你的草图
- en: When you verify your sketch, you ensure that it has been written correctly in
    a way that the Arduino can understand. To verify your complete sketch, click **Verify**
    in the IDE and wait a moment. Once the sketch has been verified, a note should
    appear in the output window, as shown in [Figure 2-13](#figure2-13).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当你验证你的草图时，你确保它已经正确编写，以便 Arduino 能理解。要验证你的完整草图，在 IDE 中点击**验证**并稍等片刻。草图验证完成后，输出窗口应该会显示一条注释，如[图
    2-13](#figure2-13)所示。
- en: '![f02013](image_fi/500587c02/f02013.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![f02013](image_fi/500587c02/f02013.png)'
- en: 'Figure 2-13: The sketch has been verified.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-13：草图已被验证。
- en: This “Done compiling” message tells you that the sketch is okay to upload to
    your Arduino. It also shows how much memory it will use (924 bytes in this case)
    of the total available on the Arduino (32,256 bytes).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这个“编译完成”消息告诉你草图可以上传到你的 Arduino 上。它还显示了草图将使用的内存量（在这种情况下是 924 字节），以及 Arduino 上可用的总内存（32,256
    字节）。
- en: But what if your sketch isn’t okay? Say, for example, you forgot to add a semicolon
    at the end of the second `delay(1000)` function. If something is broken in your
    sketch, then when you click **Verify**, the message window should display a verification
    error message similar to the one shown in [Figure 2-14](#figure2-14).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果你的草图有问题呢？例如，你忘记在第二个`delay(1000)`函数的末尾加上分号。如果草图有问题，那么当你点击**验证**时，消息窗口应该显示类似于[图
    2-14](#figure2-14)所示的验证错误信息。
- en: '![f02014](image_fi/500587c02/f02014.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![f02014](image_fi/500587c02/f02014.png)'
- en: 'Figure 2-14: The message window with a verification error'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-14：带有验证错误的消息窗口
- en: 'The IDE displays the error itself (the missing semicolon, described by `error:
    expected '';'' before''}'' token`). It should also highlight the location of the
    error, or a spot just after it. This helps you easily locate and rectify the mistake.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 'IDE 会自动显示错误（例如`error: expected '';'' before''}'' token`描述的缺少分号）。它还会突出显示错误的位置，或者就在其之后的位置。这可以帮助你轻松找到并修正错误。'
- en: Uploading and Running Your Sketch
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 上传并运行你的草图
- en: Once you’re satisfied that your sketch has been entered correctly, save it.
    Then make sure that your Arduino board is connected to your computer and click
    **Upload** in the IDE. The IDE verifies your sketch again and then uploads it
    to your Arduino board. During this process, the TX/RX LEDs on your board (shown
    in [Figure 2-6](#figure2-6)) should blink, indicating that information is traveling
    between the Arduino and your computer.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你确认草图正确输入，保存它。然后确保你的 Arduino 板与计算机连接，并在 IDE 中点击**上传**。IDE 将再次验证你的草图，然后将其上传到
    Arduino 板。在此过程中，你的板子上的 TX/RX LED（如[图 2-6](#figure2-6)所示）应该会闪烁，表示信息正在 Arduino 和计算机之间传输。
- en: 'Now for the moment of truth: your Arduino should start running the sketch.
    If you’ve done everything correctly, the LED should blink on and off once every
    second!'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是决定性时刻：你的 Arduino 应该开始运行草图。如果你做对了，LED 应该每秒闪烁一次！
- en: Congratulations. You now know the basics of how to enter, verify, and upload
    an Arduino sketch.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你。现在你已经掌握了如何输入、验证和上传 Arduino 草图的基本操作。
- en: Modifying Your Sketch
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改你的草图
- en: 'After running your sketch, you may want to change how it operates by, for example,
    adjusting the on or off delay time for the LED. Because the IDE is a lot like
    a word processor, you can open your saved sketch, adjust the values, and then
    save your sketch again and upload it to the Arduino. For example, to increase
    the rate of blinking, change both `delay` functions to make the LEDs blink for
    one-quarter of a second by adjusting the delay to `250`, like this:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行你的草图之后，你可能想要通过调整LED的开关延迟时间等方式改变它的操作方式。因为IDE很像一个文字处理器，你可以打开保存的草图，调整数值，然后再次保存草图并上传到Arduino。例如，要提高闪烁的速度，可以更改两个`delay`函数，将LED的闪烁时间调整为四分之一秒，通过将延迟时间调整为`250`，像这样：
- en: '[PRE7]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Then upload the sketch again. The LED should now blink faster, for one-quarter
    of a second each time.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 然后再次上传草图。LED现在应该会更快地闪烁，每次闪烁持续四分之一秒。
- en: Looking Ahead
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展望未来
- en: Armed with your newfound knowledge of how to enter, edit, save, and upload Arduino
    sketches, you’re ready for the next chapter, where you’ll learn how to use more
    functions, implement good project design, construct basic electronic circuits,
    and do much more.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有了如何输入、编辑、保存和上传Arduino草图的新知识后，你已经准备好进入下一章节，在那里你将学习如何使用更多功能，实施良好的项目设计，构建基本的电子电路，以及做更多的事情。
