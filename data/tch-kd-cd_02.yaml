- en: 'Chapter 2. Turtle Graphics: Drawing with Python'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章. 海龟图形：用 Python 绘图
- en: In this chapter, we’ll write short, simple programs to create beautifully complex
    visuals. To do this, we’ll use *turtle graphics*. In turtle graphics, you write
    instructions that tell a virtual, or imaginary, turtle to move around the screen.
    The turtle carries a pen, and you can instruct the turtle to use its pen to draw
    lines wherever it goes. By writing code to move the turtle around in cool patterns,
    you can make it draw amazing pictures.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将编写简短、简单的程序来创建美丽而复杂的视觉效果。为此，我们将使用 *海龟图形*。在海龟图形中，你编写指令告诉一个虚拟的或想象中的海龟在屏幕上移动。海龟带着一支笔，你可以指示海龟在它走到的地方用笔画线。通过编写代码使海龟按照酷炫的模式移动，你可以让它画出惊人的图画。
- en: Using turtle graphics, not only can you create impressive visuals with a few
    lines of code, but you can also follow along with the turtle and see how each
    line of code affects its movement. This will help you understand the *logic* of
    your code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用海龟图形，你不仅可以用几行代码创建令人印象深刻的视觉效果，还可以跟随海龟观察每一行代码如何影响它的运动。这将帮助你理解代码的*逻辑*。
- en: Our First Turtle Program
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第一个海龟程序
- en: Let’s write our first program using turtle graphics. Type the following code
    into a new window in IDLE and save it as *SquareSpiral1.py*. (You can also download
    this program, and all the others in the book, at *[http://www.nostarch.com/teachkids/](http://www.nostarch.com/teachkids/)*.)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用海龟图形写下我们的第一个程序。在 IDLE 中的新窗口中输入以下代码，并将其保存为 *SquareSpiral1.py*。（你也可以在*[http://www.nostarch.com/teachkids/](http://www.nostarch.com/teachkids/)*下载本书中的所有程序。）
- en: SquareSpiral1.py
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SquareSpiral1.py
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When we run this code, we get a pretty neat picture ([Figure 2-1](ch02.html#hypnotic_square_spiralcomma_created_with
    "Figure 2-1. A hypnotic square spiral, created with the short program SquareSpiral1.py")).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行这段代码时，我们会得到一个相当不错的图像（[图 2-1](ch02.html#hypnotic_square_spiralcomma_created_with
    "图 2-1. 一个催眠的方形螺旋，由短程序 SquareSpiral1.py 创建")）。
- en: '![A hypnotic square spiral, created with the short program SquareSpiral1.py](httpatomoreillycomsourcenostarchimages2188716.png.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![一个催眠的方形螺旋，由短程序 SquareSpiral1.py 创建](httpatomoreillycomsourcenostarchimages2188716.png.jpg)'
- en: Figure 2-1. A hypnotic square spiral, created with the short program SquareSpiral1.py
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-1. 一个催眠的方形螺旋，由短程序 SquareSpiral1.py 创建
- en: How It Works
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: Let’s break the program down line by line to see how it works.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐行分析这个程序，看看它是如何工作的。
- en: 'The first line of *SquareSpiral1.py* is a comment. As you learned in [Chapter 1](ch01.html
    "Chapter 1. Python Basics: Get to Know Your Environment"), a comment begins with
    a hash mark (`#`). Comments allow us to write notes in our programs to ourselves
    or to other humans who might read the program later. The computer doesn’t read
    or try to understand anything after the hash mark; the comment is just for us
    to write something about what the program is doing. In this case, I’ve put the
    name of the program in the comment, as well as a brief description of what it
    does.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*SquareSpiral1.py* 的第一行是注释。正如你在[第1章](ch01.html "第1章. Python 基础：了解你的环境")中学到的，注释以井号（`#`）开始。注释让我们可以在程序中写下给自己或其他可能阅读程序的人的备注。计算机不会读取或尝试理解井号后的任何内容；注释只是用来写下关于程序正在做什么的说明。在这个例子中，我在注释中写了程序的名称，并简要描述了它的功能。'
- en: The second line [*imports*](apd.html#gloss01_025) the ability to draw turtle
    graphics. Importing code that’s already been written is one of the coolest things
    about programming. If you program something interesting and useful, you can share
    it with other people and even reuse it yourself. Some cool Python programmers
    built a *library*—a reusable set of code—to help other programmers use turtle
    graphics in Python, even though turtle graphics are originally from the Logo programming
    language of the 1960s.^([[1](#ftn.ch02fn01)]) When you type `import turtle`, you’re
    saying that you want your program to be able to use the code that those Python
    programmers wrote. The little black arrow in [Figure 2-1](ch02.html#hypnotic_square_spiralcomma_created_with
    "Figure 2-1. A hypnotic square spiral, created with the short program SquareSpiral1.py")
    represents the turtle, drawing with its pen as it moves around the screen.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行 [*导入*](apd.html#gloss01_025)了绘制海龟图形的功能。导入已经编写好的代码是编程中最酷的事情之一。如果你编写了有趣且有用的东西，你可以与他人共享，甚至自己重复使用。有些酷炫的
    Python 程序员开发了一个 *库*——一个可重用的代码集合——来帮助其他程序员在 Python 中使用海龟图形，尽管海龟图形最初来自 1960 年代的
    Logo 编程语言。^([[1](#ftn.ch02fn01)]) 当你输入 `import turtle` 时，实际上是告诉程序你希望使用这些 Python
    程序员编写的代码。图 [2-1](ch02.html#hypnotic_square_spiralcomma_created_with "图2-1：由短程序
    SquareSpiral1.py 创建的迷幻方形螺旋") 中的小黑箭头代表了海龟，随着海龟在屏幕上移动，海龟用它的笔进行绘图。
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2188720.png.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![没有说明文字的图片](httpatomoreillycomsourcenostarchimages2188720.png.jpg)'
- en: The third line of our program, `t = turtle.Pen()`, tells the computer that we’ll
    use the letter `t` to stand for the turtle’s pen. This will allow us to draw with
    the turtle’s pen as the turtle moves around the screen just by typing `t.forward()`
    instead of writing out `turtle.Pen().forward()`. The letter `t` is our shortcut
    for telling the turtle what to do.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们程序的第三行，`t = turtle.Pen()`，告诉计算机我们将使用字母 `t` 来代表海龟的笔。这将使得我们可以通过输入 `t.forward()`
    来使用海龟的笔进行绘图，而无需每次都写出 `turtle.Pen().forward()`。字母 `t` 是我们告诉海龟做什么的快捷方式。
- en: The fourth line is the most complex. Here we’re creating a [*loop*](apd.html#gloss01_032),
    which repeats a set of instructions a number of times (it *loops* through those
    lines of code over and over again). This particular loop sets up a `range`, or
    list, of 100 numbers from 0 to 99\. (Computers almost always start counting at
    0, not 1 like we usually do.) The loop then steps the letter `x` through each
    of the numbers in that range. So `x` starts as 0, and then it becomes 1, then
    2, and so on as it counts all the way up to 99, for a total of 100 steps.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第四行是最复杂的一行。在这里我们创建了一个 [*循环*](apd.html#gloss01_032)，它会将一组指令重复执行若干次（它 *循环* 这些代码行，反复执行）。这个特定的循环设置了一个从
    0 到 99 的 `range`（范围），也就是一个包含 100 个数字的列表。（计算机几乎总是从 0 开始计数，而不是像我们通常那样从 1 开始。）然后，循环将字母
    `x` 依次遍历这些数字。因此，`x` 从 0 开始，然后变为 1，接着是 2，依此类推，直到 99，总共执行 100 步。
- en: 'This `x` is called a [*variable*](apd.html#gloss01_049).^([[2](#ftn.ch02fn02)])
    (In the program *YourName.py* in [Chapter 1](ch01.html "Chapter 1. Python Basics:
    Get to Know Your Environment"), `name` was a variable.) A variable stores a value
    that can change, or vary, as we move through our program. We’ll be using variables
    in almost every program we write, so it’s good to get to know them early.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `x` 被称为一个 [*变量*](apd.html#gloss01_049)。^([[2](#ftn.ch02fn02)])（在 [第1章](ch01.html
    "第1章. Python基础：了解你的环境") 的程序 *YourName.py* 中，`name` 是一个变量。）变量存储的是一个可以改变或变化的值，我们在程序执行过程中会不断改变它。几乎在我们编写的每一个程序中都会使用变量，所以早点熟悉它们是很有帮助的。
- en: The next two lines are indented, or spaced over from the left. That means that
    they are *in the loop* and go with the line above, so they’ll be repeated each
    time `x` gets a new number in the range from 0 to 99, or 100 times.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两行是缩进的，或者说是从左边空出的位置。这意味着它们是 *在循环中* 的，并且与上面那行一起执行，因此它们会在 `x` 每次得到从 0 到 99
    的新数字时被重复执行，总共执行 100 次。
- en: What Happens
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发生了什么
- en: Let’s see what happens the first time Python reads this set of instructions.
    The command `t.forward(x)` tells the turtle pen to move forward `x` dots on the
    screen. Because `x` is 0, the pen doesn’t move at all. The last line, `t.left(90)`,
    tells the turtle to turn left by 90 degrees, or a quarter turn.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下 Python 第一次读取这组指令时会发生什么。命令 `t.forward(x)` 告诉海龟笔在屏幕上向前移动 `x` 个点。因为 `x`
    为 0，所以笔根本没有移动。最后一行 `t.left(90)` 告诉海龟左转 90 度，也就是四分之一圈。
- en: Because of that `for` loop, the program continues to run, and it goes back to
    the starting position of our loop. The computer adds 1 to move `x` to the next
    value in the range, and since 1 is still in the range from 0 to 99, the loop continues.
    Now `x` is 1, so the pen moves forward 1 dot. The pen then moves again to the
    left by 90, because of `t.left(90)`. This continues again and again. By the time
    `x` gets to 99, the last time through the loop, the pen is drawing the long lines
    around the outside of the square spiral.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`for`循环的存在，程序会继续运行，并返回到我们循环的起始位置。计算机会加1，将`x`移动到范围内的下一个值，并且由于1仍在0到99的范围内，循环继续进行。现在`x`为1，所以画笔向前移动1个像素。然后，由于`t.left(90)`，画笔再次向左移动90度。这一过程会不断重复。当`x`达到99时，最后一次执行循环，画笔开始绘制外面长长的方形螺旋线条。
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2188724.png.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![image with no caption](httpatomoreillycomsourcenostarchimages2188724.png.jpg)'
- en: 'Here is a step-by-step visual of the loop as `x` grows from 0 toward 100:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是当`x`从0增长到100时，循环的逐步可视化过程：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '| ![](httpatomoreillycomsourcenostarchimages2188728.png.jpg) | *Loops 0 to
    4: The first four lines are drawn (after x = 4).* |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| ![](httpatomoreillycomsourcenostarchimages2188728.png.jpg) | *循环0到4：绘制了前四条线（当x
    = 4时）。* |'
- en: '| ![](httpatomoreillycomsourcenostarchimages2188732.png.jpg) | *Loops 5 to
    8: Another four lines are drawn; our square emerges.* |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| ![](httpatomoreillycomsourcenostarchimages2188732.png.jpg) | *循环5到8：又绘制了四条线；我们的方形开始出现。*
    |'
- en: '| ![](httpatomoreillycomsourcenostarchimages2188736.png.jpg) | *Loops 9 to
    12: Our square spiral grows to 12 lines (three squares).* |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| ![](httpatomoreillycomsourcenostarchimages2188736.png.jpg) | *循环9到12：我们的方形螺旋增长到12条线（三个方形）。*
    |'
- en: The dots, or *pixels*, on your computer screen are probably too tiny for you
    to see them very well. But, as `x` gets closer to 100, the turtle draws lines
    consisting of more and more pixels. In other words, as `x` gets bigger, `t.forward(x)`
    draws longer and longer lines.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕上的点，或者说是*像素*，可能太小了，以至于你很难看清楚它们。但是，当`x`接近100时，海龟绘制的线条会由越来越多的像素组成。换句话说，随着`x`的增大，`t.forward(x)`绘制的线条会越来越长。
- en: The turtle arrow on the screen draws for a while, then turns left, draws some
    more, turns left, and draws again and again, with longer lines each time.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕上的海龟箭头绘制了一会儿，然后转向左边，继续绘制，转向左边，再次绘制，每次画的线都越来越长。
- en: By the end, we have a hypnotizing square shape. Turning left 90 degrees four
    times gives us a square, just like turning left four times around a building will
    take you around the building and back where you started.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 到最后，我们得到了一个催眠般的方形图案。向左转90度四次就能得到一个方形，就像围绕一栋建筑物转四圈，你就能绕一圈回到起点一样。
- en: The reason we have a spiral in this example is that every time we turn left,
    we go a little farther. The first line that’s drawn is just 1 step long (when
    `x` = 1), then 2 (the next time through the loop), then 3, then 4, and so on,
    all the way through 100 steps, when the line is 99 pixels long. Again, the pixels
    are probably so tiny on your screen that you can’t easily see the individual dots,
    but they’re there, and you can see the lines get longer as they contain more pixels.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 之所以在这个例子中会有螺旋，是因为每次转左时，我们都会走得更远。绘制的第一条线只有1步长（当`x` = 1时），然后是2步（下一次进入循环时），接着是3步、4步，以此类推，一直到100步，当时这条线有99个像素长。同样，屏幕上的像素可能太小，导致你无法轻易看到每个单独的点，但它们确实存在，而且你可以看到线条变得越来越长，包含的像素也越来越多。
- en: By making all the turns 90-degree angles, we get the perfect square shape.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将所有转角设为90度，我们得到了完美的方形。
- en: Turtle on a Roll
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Turtle on a Roll
- en: Let’s see what happens when we change one of the numbers in the program. One
    way to learn new things about a program is to see what happens when you change
    one part of it. You won’t always get a pretty result, but you can learn even when
    something goes wrong.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当我们改变程序中的一个数字时会发生什么。了解程序的新方法之一就是观察当你改变程序的某一部分时会发生什么。你不总是能得到一个漂亮的结果，但即使出现问题，你也可以从中学习。
- en: Change just the last line of the program to `t.left(91)` and save it as *SquareSpiral2.py*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 只需将程序的最后一行改为`t.left(91)`并将其保存为*SquareSpiral2.py*。
- en: SquareSpiral2.py
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SquareSpiral2.py
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: I mentioned that a 90-degree left turn creates a perfect square. Turning just
    a little more than 90 degrees—in this case, 91 degrees every turn—throws the square
    off just a bit. And because it’s already off a bit when it makes the next turn,
    our new shape looks less and less like a square as the program continues. In fact,
    it makes a nice spiral shape that starts to swirl to the left like a staircase,
    as you can see in [Figure 2-2](ch02.html#square_spiral_program_with_one_tiny_chan
    "Figure 2-2. The square spiral program with one tiny change becomes a spiral staircase.").
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我提到过，90度左转可以画出完美的正方形。只转过90度多一点——在这个例子中，每次转动91度——会使正方形稍微偏离一点。因为在下次转弯时已经偏离了一点，我们的新形状在程序继续执行时会越来越不像正方形。实际上，它形成了一个漂亮的螺旋形状，开始像楼梯一样向左旋转，就像你在[图2-2](ch02.html#square_spiral_program_with_one_tiny_chan
    "图2-2。只需一个小小的改变，方形螺旋程序就变成了螺旋楼梯。")中看到的那样。
- en: '![The square spiral program with one tiny change becomes a spiral staircase.](httpatomoreillycomsourcenostarchimages2188740.png.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![方形螺旋程序只需一个小小的改变，就变成了螺旋楼梯。](httpatomoreillycomsourcenostarchimages2188740.png.jpg)'
- en: Figure 2-2. The square spiral program with one tiny change becomes a spiral
    staircase.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-2。只需一个小小的改变，方形螺旋程序就变成了螺旋楼梯。
- en: This is also a nice visual to help you understand how being off by just one
    number can drastically change the result of your program. One degree doesn’t seem
    like a big deal, unless you’re off by one degree 100 times (which adds up to 100
    degrees), or 1,000 times, or if you’re using a program to land an airplane . .
    .
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是一个很好的视觉效果，帮助你理解仅仅偏差一个数字是如何极大地改变程序结果的。一个度数看起来似乎不算什么大事，除非你偏差了一度100次（加起来就是100度），或者1,000次，或者你正在使用程序来着陆一架飞机……
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2188744.png.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](httpatomoreillycomsourcenostarchimages2188744.png.jpg)'
- en: If you don’t know how degrees work yet, don’t worry about it for now. Just play
    with the numbers and see what happens. Change the number of lines the program
    draws to 200, or 500, or 50, by changing the value in parentheses after `range`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还不理解度数是如何运作的，不用担心。现在只需玩一下数字，看看会发生什么。通过改变`range`后括号内的数字，可以将程序绘制的线条数量更改为200、500或50。
- en: Also try changing the angle in the last line to 91, 46, 61, or 121, and so on.
    Remember to save the program each time. Then run it to see how your changes affect
    what the program draws. Older readers who know a bit of geometry will see some
    familiar shapes based on the angles used and may even be able to predict the shape
    based on the angle before the program runs. Younger readers can just enjoy changing
    things up a bit, and this exercise might come back to them when they’re in a geometry
    class someday.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以尝试将最后一行的角度改为91、46、61或121等等。记得每次都保存程序。然后运行它，看看你的更改如何影响程序绘制的内容。年长的读者可能对使用的角度看到一些熟悉的形状，甚至在程序运行之前就能预测出形状。年轻的读者可以尽情地玩玩这个，等到有一天上几何课时，这个练习可能会帮助他们。
- en: Turtle Roundup
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 海龟汇总
- en: Speaking of geometry, turtle graphics can draw lots more interesting shapes
    than just straight lines. We’ll come back to the square shape again in the next
    section, but let’s take a short detour to check out more of the Python Turtle
    library.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 说到几何学，海龟图形不仅可以绘制直线，还能绘制更多有趣的形状。我们将在下一节中再次回到正方形，但现在让我们稍作偏离，探索更多Python Turtle库的内容。
- en: 'Let’s change one more line of code: `t.forward(x)`. We saw earlier that this
    command, or [*function*](apd.html#gloss01_024), moves the turtle’s pen forward
    `x` pixels and draws a straight line segment; then the turtle turns and does it
    again. What if we changed that line of code to draw something more complex, like
    a circle?'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再修改一行代码：`t.forward(x)`。我们之前看到，这个命令，或者说是[*函数*](apd.html#gloss01_024)，将海龟的画笔向前移动`x`个像素并画出一段直线；然后海龟转身再来一次。如果我们修改这行代码，绘制一些更复杂的东西，比如一个圆呢？
- en: Fortunately for us, the command to draw a circle of a certain size, or *radius*,
    is as simple to code as the command to draw a straight line. Change `t.forward(x)`
    to `t.circle(x)`, as shown in the following code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，绘制一定大小或*半径*的圆的命令和绘制直线的命令一样简单。将`t.forward(x)`改为`t.circle(x)`，如下面的代码所示。
- en: CircleSpiral1.py
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CircleSpiral1.py
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Wow! Changing one command from `t.forward` to `t.circle` gave us a much more
    complex shape, as you can see in [Figure 2-3](ch02.html#just_one_more_change_gives_us_a_beautifu
    "Figure 2-3. Just one more change gives us a beautiful set of four spiraling circles.").
    The `t.circle(x)` function tells the program to draw a circle of radius `x` at
    the current position. Notice that this drawing has something in common with the
    simpler square spiral shape: there are four sets of circle spirals just like there
    were four sides to our square spiral. That’s because we’re still turning left
    just a little over 90 degrees with the `t.left(91)` command. If you’ve studied
    geometry, you know that there are 360 degrees around a point, like the four 90-degree
    corners in a square (4 × 90 = 360). The turtle draws that spiral shape by turning
    just a little more than 90 degrees each time around the block.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！仅仅将一个命令从` t.forward`改为` t.circle`就给我们带来了一个更复杂的形状，正如你在[图 2-3](ch02.html#just_one_more_change_gives_us_a_beautifu
    "图 2-3. 再加一个变化，给我们带来了四个美丽的螺旋圆形。")中看到的那样。`t.circle(x)`函数指示程序在当前的位置绘制一个半径为`x`的圆。请注意，这个图形与简单的方形螺旋形状有一些共同之处：这里有四组圆形螺旋，就像我们的方形螺旋有四个边一样。这是因为我们依然在使用`
    t.left(91)`命令，每次只向左转略多于90度。如果你学过几何，你会知道一个点周围有360度，就像方形的四个90度角（4 × 90 = 360）。海龟通过每次转过略多于90度，绘制出这个螺旋形状。
- en: '![Just one more change gives us a beautiful set of four spiraling circles.](httpatomoreillycomsourcenostarchimages2188749.png.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![再加一个变化，给我们带来了四个美丽的螺旋圆形。](httpatomoreillycomsourcenostarchimages2188749.png.jpg)'
- en: Figure 2-3. Just one more change gives us a beautiful set of four spiraling
    circles.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-3. 再加一个变化，给我们带来了四个美丽的螺旋圆形。
- en: One difference you’ll see is that the circle spiral is larger than the square
    spiral—about twice the size, in fact. This is because `t.circle(x)` is using `x`
    as the *radius* of the circle, which is the distance from the center to the edge,
    or one-half of the circle’s width.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现一个区别：圆形螺旋比方形螺旋要大——实际上大约是方形螺旋的两倍。这是因为`t.circle(x)`将`x`作为圆的*半径*，即从圆心到圆边的距离，或者是圆的宽度的一半。
- en: A radius of `x` means that the *diameter*, or total width, of the circle will
    be two times `x`. In other words, `t.circle(x)` draws a circle 2 pixels across
    when `x` is equal to 1, 4 pixels across when `x` is 2, all the way up to 198 pixels
    across when `x` is 99\. That’s almost 200 pixels across, or twice the size of
    our biggest side in the square, so the circle spiral is about double the size
    of our square spiral—and maybe twice as cool, too!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`x`的半径意味着圆的*直径*，即总宽度，将是`x`的两倍。换句话说，当`x`为1时，`t.circle(x)`绘制的圆的直径为2像素；当`x`为2时，直径为4像素；当`x`为99时，直径将达到198像素。那几乎是200像素，或是方形螺旋最大边长的两倍，因此圆形螺旋的大小大约是方形螺旋的两倍——也许它的酷度也是两倍！'
- en: Adding a Touch of Color
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增添一点色彩
- en: 'These spirals are nice shapes, but wouldn’t it be cooler if they were a bit
    more colorful? Let’s go back to our square spiral code and add one more line to
    our program, right after the `t = turtle.Pen()` line, to set the pen color to
    red:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些螺旋形状很漂亮，但如果它们再多一些色彩，不是更酷吗？让我们回到方形螺旋的代码，并在` t = turtle.Pen()`行后面添加一行代码，将笔的颜色设置为红色：
- en: SquareSpiral3.py
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SquareSpiral3.py
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Run the program, and you’ll see a more colorful version of our square spiral
    ([Figure 2-4](ch02.html#square_spiral_gets_a_little_more_colorfu "Figure 2-4. The
    square spiral gets a little more colorful.")).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序后，你将看到一个更有色彩的方形螺旋（[图 2-4](ch02.html#square_spiral_gets_a_little_more_colorfu
    "图 2-4. 方形螺旋变得更加丰富多彩。")）。
- en: '![The square spiral gets a little more colorful.](httpatomoreillycomsourcenostarchimages2188752.png.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![方形螺旋变得更加丰富多彩。](httpatomoreillycomsourcenostarchimages2188752.png.jpg)'
- en: Figure 2-4. The square spiral gets a little more colorful.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-4. 方形螺旋变得更加丰富多彩。
- en: Try replacing `"red"` with another common color, like `"blue"` or `"green"`,
    and run the program again. You can use hundreds of different colors with the Turtle
    library, including some weird ones like `"salmon"` and `"lemon chiffon"`. (Visit
    *[http://www.tcl.tk/man/tcl8.4/TkCmd/colors.htm](http://www.tcl.tk/man/tcl8.4/TkCmd/colors.htm)*
    for a full list.) Making the whole spiral a different color is a nice step, but
    what if we wanted to make each *side* a different color? That’s going to take
    a few more changes to our program.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试将`"red"`替换为另一个常见的颜色，如`"blue"`或`"green"`，然后重新运行程序。你可以使用Turtle库中的数百种不同颜色，包括一些奇怪的颜色，如`"salmon"`和`"lemon
    chiffon"`。（访问*[http://www.tcl.tk/man/tcl8.4/TkCmd/colors.htm](http://www.tcl.tk/man/tcl8.4/TkCmd/colors.htm)*查看完整列表。）将整个螺旋设置为不同的颜色是一个不错的步骤，但如果我们想让每一条*边*都使用不同的颜色呢？那将需要对程序做一些更改。
- en: A Four-Color Spiral
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 四色螺旋
- en: 'Let’s think through the [*algorithm*](apd.html#gloss01_001)—that is, the set
    of steps—that will turn our one-color spiral into a four-color spiral. Most of
    the steps are the same as in our previous spiral programs, but there are a few
    added twists:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们思考一下[*算法*](apd.html#gloss01_001)—也就是一系列步骤—将单色螺旋变成四色螺旋。大多数步骤与我们之前的螺旋程序相同，但有一些新增的变化：
- en: Import the `turtle` module and set up a turtle.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`turtle`模块并设置一只海龟。
- en: Tell the computer which colors we’d like to use.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 告诉计算机我们想使用哪些颜色。
- en: Set up a loop to draw 100 lines in our spiral.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个循环，在我们的螺旋图形中绘制100条线。
- en: Pick a different pen color for each side of the spiral.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为螺旋的每一条边选择不同的笔颜色。
- en: Move the turtle forward to draw each side.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动海龟向前绘制每一条边。
- en: Turn the turtle left to get ready to draw the next side.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将海龟转向左边，为绘制下一条边做准备。
- en: 'First, we need a [*list*](apd.html#gloss01_031) of color names instead of a
    single color, so we’re going to set up a list variable called `colors` and put
    four colors in the list, like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个[*颜色名称的列表*](apd.html#gloss01_031)，而不是单一的颜色，因此我们将设置一个名为`colors`的列表变量，并将四种颜色放入该列表，如下所示：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This list of four colors will give us one color for each side of our square.
    Notice we put the list of colors inside square brackets, `[` and `]`. Make sure
    that each color name is inside quote marks just like the words we printed out
    in [Chapter 1](ch01.html "Chapter 1. Python Basics: Get to Know Your Environment"),
    because these color names are [*strings*](apd.html#gloss01_046), or text values,
    that we will pass to the `pencolor` function shortly. As noted, we’re using a
    variable called `colors` to store our list of four colors, so whenever we want
    to get a color from the list, we’ll use the `colors` variable to stand for the
    color of the pen. Remember, variables store values that change. It’s right in
    their name: they vary!'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这四种颜色的列表将为我们的方形的每一条边提供一种颜色。注意，我们将颜色列表放在了方括号`[`和`]`内。确保每个颜色名称都在引号内，就像我们在[第1章](ch01.html
    "第1章. Python基础：了解你的环境")中打印的单词一样，因为这些颜色名称是[*字符串*](apd.html#gloss01_046)，或者说是文本值，我们稍后会将它们传递给`pencolor`函数。如上所述，我们使用一个叫做`colors`的变量来存储这四种颜色的列表，所以每当我们想从列表中获取颜色时，我们会用`colors`变量来代表笔的颜色。记住，变量存储的是会变化的值，正如它们的名字所示：它们是可变的！
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2188757.png.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图像](httpatomoreillycomsourcenostarchimages2188757.png.jpg)'
- en: The next thing we need to do is change the pen color *every time* we step through
    the drawing loop. To do this, we need to move the `t.pencolor()` function into
    the group of instructions under the `for` loop. We also need to tell the `pencolor`
    function that we want to use one of the colors from the list.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们需要做的是在每次执行绘图循环时，*每次*都更改笔的颜色。为此，我们需要将` t.pencolor()`函数移动到`for`循环下的指令组中。我们还需要告诉`pencolor`函数，我们希望使用列表中的某个颜色。
- en: Type the following code and run it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 输入以下代码并运行它。
- en: ColorSquareSpiral.py
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ColorSquareSpiral.py
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The list of four colors makes sense, and we can see them in the running example
    ([Figure 2-5](ch02.html#much_more_colorful_version_of_our_square "Figure 2-5. A
    much more colorful version of our square spiral program")). So far, so good.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 四种颜色的列表是合理的，我们可以在运行示例中看到它们（[图2-5](ch02.html#much_more_colorful_version_of_our_square
    "图2-5. 我们方形螺旋程序的更彩色版本")）。到目前为止，一切顺利。
- en: '![A much more colorful version of our square spiral program](httpatomoreillycomsourcenostarchimages2188761.png.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![我们的方形螺旋程序的一个更彩色的版本](httpatomoreillycomsourcenostarchimages2188761.png.jpg)'
- en: Figure 2-5. A much more colorful version of our square spiral program
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-5. 我们方形螺旋程序的更彩色版本
- en: The only new part is the `(colors[x%4])` in the `pencolor` function. The `x`
    inside the statement is the same variable we’re using elsewhere in the program.
    So `x` will continue to grow from 0 to 99, just like we’ve seen before. The `colors`
    variable name inside the parentheses tells Python to choose a color from the list
    of color names called `colors` that we added earlier in the program.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的新部分是 `pencolor` 函数中的 `(colors[x%4])`。语句中的 `x` 是我们在程序中其他地方使用的同一个变量。所以 `x`
    将从 0 增长到 99，就像我们之前看到的那样。括号中的 `colors` 变量名告诉 Python 从程序中我们之前添加的颜色名称列表 `colors`
    中选择一个颜色。
- en: 'The `[x%4]` part tells Python that we will use the first four colors in the
    `colors` list, numbered 0 through 3, and rotate through them every time `x` changes.
    In this case, our color list only has four colors, so we’ll rotate through these
    four colors over and over:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`[x%4]`部分告诉 Python 我们将使用 `colors` 列表中的前四个颜色，编号从 0 到 3，并且每次 `x` 改变时都会在这四个颜色中循环。在这个例子中，我们的颜色列表只有四个颜色，所以我们会一直在这四个颜色之间循环：'
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `%` symbol in `[x%4]` is called the [*modulo*](apd.html#gloss01_033), or
    *mod*, operator and represents the *remainder* in long division (5 ÷ 4 equals
    1 with a remainder of 1, because 4 goes evenly into 5 once with 1 left over; 6
    ÷ 4 has a remainder of 2; and so on). The mod operator is useful when you want
    to rotate through a certain number of items in a list, like we’re doing with our
    list of four colors.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`[x%4]`中的`%`符号称为[*取模*](apd.html#gloss01_033)运算符，也叫做*模*运算符，它表示长除法中的*余数*（例如，5
    ÷ 4 等于 1，余数为 1，因为 4 除以 5 得 1，剩下 1；6 ÷ 4 余数为 2，依此类推）。当你希望在列表中循环遍历一定数量的项时，模运算符非常有用，就像我们在操作四个颜色的列表时所做的那样。'
- en: In 100 steps, `colors[x%4]` will loop through four colors (0, 1, 2, and 3, for
    red, yellow, blue, and green) a total of 25 times. If you have the time (and a
    magnifying glass), you could count 25 red, 25 yellow, 25 blue, and 25 green segments
    in [Figure 2-5](ch02.html#much_more_colorful_version_of_our_square "Figure 2-5. A
    much more colorful version of our square spiral program"). The first time through
    the drawing loop, Python uses the first color in the list, red; the second time,
    it uses yellow; and so on. Then the fifth time through the loop, Python goes back
    to red, then yellow, and so on, and always cycles back around to red after every
    fourth pass through the loop.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在 100 步中，`colors[x%4]` 将循环遍历四种颜色（0、1、2、3，分别代表红色、黄色、蓝色和绿色），共计 25 次。如果你有时间（并且手边有放大镜），你可以在[图
    2-5](ch02.html#much_more_colorful_version_of_our_square "图 2-5. 我们的方形螺旋程序的更丰富多彩的版本")中数出
    25 个红色、25 个黄色、25 个蓝色和 25 个绿色的段落。在第一次绘制循环中，Python 使用列表中的第一个颜色——红色；第二次使用黄色；依此类推。然后，在第五次循环时，Python
    会回到红色，然后是黄色，依此类推，每四次循环后都会重新回到红色。
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2188765.png.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](httpatomoreillycomsourcenostarchimages2188765.png.jpg)'
- en: Changing Background Colors
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改背景颜色
- en: 'Let’s mix things up a bit again to see if we can create something even more
    beautiful than [Figure 2-5](ch02.html#much_more_colorful_version_of_our_square
    "Figure 2-5. A much more colorful version of our square spiral program"). For
    example, as my five-year-old son Alex pointed out, the yellow sides are hard to
    see. That’s because, just like yellow crayons on white drawing paper, the yellow
    pixels on the screen don’t show up well against the white background color. Let’s
    fix that by changing the background color to black. Type the following line of
    code anywhere after the `import` line in our program:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再来点变化，看看是否能创造出比[图 2-5](ch02.html#much_more_colorful_version_of_our_square
    "图 2-5. 我们的方形螺旋程序的更丰富多彩的版本")中更加美丽的效果。例如，正如我五岁的儿子 Alex 所指出的，黄色的边缘不容易看到。这是因为，就像在白色画纸上的黄色蜡笔一样，屏幕上的黄色像素在白色背景下不太明显。让我们通过将背景色改为黑色来解决这个问题。在程序中的
    `import` 语句之后的任何位置输入以下代码行：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Adding this one line gives us an even neater picture: all of the colors now
    stand out on the black background. Notice that we’re not changing anything about
    the turtle’s pen (represented by the variable `t` in our program). Instead, we’re
    changing something about the turtle screen, namely the background color. The `turtle.bgcolor()`
    command allows us to change the color of the entire drawing screen to any of the
    named colors in Python. In the line `turtle.bgcolor("black")`, we’ve chosen black
    as the screen color, so the bright red, yellow, blue, and green show up nicely.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 增加这一行代码后，我们得到了一个更整洁的图形：所有的颜色在黑色背景下都更加鲜明。注意，我们并没有改变海龟的笔（在程序中由变量`t`表示）。相反，我们改变了海龟屏幕的一些设置，具体来说是背景颜色。`turtle.bgcolor()`命令允许我们将整个绘图屏幕的颜色更改为Python中任何命名的颜色。在`
    turtle.bgcolor("black")`这一行中，我们选择了黑色作为背景色，因此明亮的红色、黄色、蓝色和绿色显示得非常清晰。
- en: While we’re at it, we can change the `range()` in our loop to `200`, or even
    more, to make larger squares in our spiral. See [Figure 2-6](ch02.html#our_square_spiral_has_come_a_long_way_fr
    "Figure 2-6. Our square spiral has come a long way from its simple beginnings.")
    for the new version of our picture with 200 lines on a black background.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，我们还可以将循环中的`range()`改成`200`，甚至更多，这样就能让螺旋中的方形更大。请参见[图 2-6](ch02.html#our_square_spiral_has_come_a_long_way_fr
    "图 2-6。我们的方形螺旋图形已经经历了从简单起步到如今的巨大变化。")，这张图显示了背景为黑色的200条线的新版本。
- en: '![Our square spiral has come a long way from its simple beginnings.](httpatomoreillycomsourcenostarchimages2188769.png.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![我们的方形螺旋图形已经经历了从简单起步到如今的巨大变化。](httpatomoreillycomsourcenostarchimages2188769.png.jpg)'
- en: Figure 2-6. Our square spiral has come a long way from its simple beginnings.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-6。我们的方形螺旋图形已经经历了从简单起步到如今的巨大变化。
- en: 'Always willing to help make my programs more awesome, Alex asked for one more
    change: what if we replaced the line segments with circles now? Wouldn’t that
    be the coolest picture of all? Well, yes, I have to agree—it is even cooler. Here’s
    the full code.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 总是乐于帮助让我程序更加精彩的Alex，又提出了一个改动：如果我们现在用圆形代替线段呢？那不就是最酷的图形吗？嗯，是的，我得同意——它确实更酷了。下面是完整的代码。
- en: ColorCircleSpiral.py
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ColorCircleSpiral.py
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can see the result in [Figure 2-7](ch02.html#alexapostrophes_awesome_color_circle_spi
    "Figure 2-7. Alex’s awesome color circle spiral—eight lines of code, simple and
    elegant").
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图 2-7](ch02.html#alexapostrophes_awesome_color_circle_spi "图 2-7。Alex的酷炫彩色圆形螺旋——八行代码，简洁优雅")中看到结果。
- en: '![Alex’s awesome color circle spiral—eight lines of code, simple and elegant](httpatomoreillycomsourcenostarchimages2188773.png.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![Alex的酷炫彩色圆形螺旋——八行代码，简洁优雅](httpatomoreillycomsourcenostarchimages2188773.png.jpg)'
- en: Figure 2-7. Alex’s awesome color circle spiral—eight lines of code, simple and
    elegant
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-7。Alex的酷炫彩色圆形螺旋——八行代码，简洁优雅
- en: One Variable to Rule Them All
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一种变量统治一切
- en: So far, we’ve used variables to change the color, size, and turning angle of
    our spiral shapes. Let’s add another variable, `sides`, to represent the number
    of sides in a shape. How will this new variable change our spiral? To find out,
    try this program, *ColorSpiral.py*.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经用变量来改变螺旋图形的颜色、大小和转动角度。现在，我们再加一个变量，`sides`，来表示图形的边数。这个新变量会如何改变我们的螺旋图形呢？想知道答案，就试试这个程序，*ColorSpiral.py*。
- en: ColorSpiral.py
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ColorSpiral.py
- en: '[PRE10]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can change the value of `sides` from 6 down to 2 (one side’s not very interesting,
    and you won’t be able to use bigger numbers unless you add more colors to the
    list in the sixth line of the program). Then save and run the program as many
    times as you’d like. [Figure 2-8](ch02.html#five_colorful_shapes_created_by_changing
    "Figure 2-8. Five colorful shapes created by changing the variable sides from
    6 (a) down to 2 (e)") shows the pictures created with `sides = 6`, `sides = 5`,
    all the way down to `sides = 2`, which is the weird, flat spiral shown in [Figure 2-8](ch02.html#five_colorful_shapes_created_by_changing
    "Figure 2-8. Five colorful shapes created by changing the variable sides from
    6 (a) down to 2 (e)")(e). You can change the order of the colors in the list,
    and you can use bigger or smaller numbers in any of the functions in the drawing
    loop. If you break the program, just go back to the original *ColorSpiral.py*
    and play some more.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将`sides`的值从6改为2（一个边不太有趣，除非你在程序的第六行中增加更多的颜色，否则无法使用更大的数字）。然后保存并运行程序，尽情多次尝试。[图2-8](ch02.html#five_colorful_shapes_created_by_changing
    "图2-8. 通过将变量sides从6（a）改变到2（e）创建的五个彩色形状")展示了使用`sides = 6`、`sides = 5`直到`sides =
    2`的图像，其中`sides = 2`是[图2-8](ch02.html#five_colorful_shapes_created_by_changing
    "图2-8. 通过将变量sides从6（a）改变到2（e）创建的五个彩色形状")（e）中显示的奇怪扁平螺旋形。你可以改变颜色列表中的颜色顺序，也可以在绘图循环中的任何函数中使用更大或更小的数字。如果你破坏了程序，只需返回到原始的*ColorSpiral.py*并再玩一会儿。
- en: 'The *ColorSpiral.py* program uses one new command, `t.width()`; this changes
    the width of the turtle’s pen. In our program, the pen gets wider (its lines get
    thicker) as it draws larger and larger shapes. We’ll revisit this program and
    others like it in [Chapter 3](ch03.html "Chapter 3. Numbers and Variables: Python
    Does the Math") and [Chapter 4](ch04.html "Chapter 4. Loops Are Fun (You Can Say
    That Again)") as you learn the skills needed to create programs like this from
    scratch.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '*ColorSpiral.py*程序使用了一个新命令，`t.width()`；这个命令改变了海龟画笔的宽度。在我们的程序中，画笔在绘制越来越大的形状时变得更宽（线条变厚）。我们将在[第3章](ch03.html
    "第3章. 数字与变量：Python做数学")和[第4章](ch04.html "第4章. 循环很有趣（你可以再说一遍）")中再次讨论这个程序以及类似的程序，帮助你学习从零开始创建此类程序所需的技能。'
- en: '![Five colorful shapes created by changing the variable sides from 6 (a) down
    to 2 (e)](httpatomoreillycomsourcenostarchimages2188777.png.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![通过将变量sides从6（a）改变到2（e）创建的五个彩色形状](httpatomoreillycomsourcenostarchimages2188777.png.jpg)'
- en: Figure 2-8. Five colorful shapes created by changing the variable `sides` from
    6 (a) down to 2 (e)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-8. 通过将变量`sides`从6（a）改变到2（e）创建的五个彩色形状
- en: What You Learned
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你所学到的内容
- en: In this chapter, we drew impressive, colorful shapes in Python using the Turtle
    library of tools. We brought this library into our program by using the `import`
    command, and you learned that reusing code in this way is one of the most powerful
    things about programming. Once we’ve written something useful, or borrowed code
    that someone else has been kind enough to share, we not only save time but can
    also use that imported code to do neat new things.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用Python的Turtle工具库绘制了令人印象深刻的彩色图形。我们通过使用`import`命令将该库引入到程序中，你学会了以这种方式重复使用代码是编程中最强大的特点之一。一旦我们编写了有用的代码，或者借用了别人好心分享的代码，我们不仅节省了时间，还能利用这些导入的代码做出有趣的新事情。
- en: You’ve also been introduced to variables like `x` and `sides` in our programs.
    These variables store, or remember, a number or value so that you can use it multiple
    times in a program and even change the value as you go. In the next chapter, you’ll
    learn more about the power of variables and how Python can even help you do your
    math homework!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你也已经在我们的程序中接触过像`x`和`sides`这样的变量。这些变量存储或记住一个数字或值，以便你可以在程序中多次使用它，并且在运行过程中修改其值。在下一章，你将进一步了解变量的强大功能，甚至Python还可以帮助你做数学作业！
- en: 'At this point, you should be able to do the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该能够完成以下任务：
- en: Draw simple graphics with the Turtle library.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Turtle库绘制简单的图形。
- en: Use variables to store simple number values and strings.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用变量来存储简单的数字值和字符串。
- en: Change, save, and run programs in IDLE.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在IDLE中更改、保存并运行程序。
- en: Programming challenges
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 编程挑战
- en: Try these challenges to practice what you’ve learned in this chapter. (If you
    get stuck, go to *[http://www.nostarch.com/teachkids/](http://www.nostarch.com/teachkids/)*
    for sample answers.)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试这些挑战来练习你在本章学到的内容。（如果你卡住了，可以访问*[http://www.nostarch.com/teachkids/](http://www.nostarch.com/teachkids/)*获取示例答案。）
- en: '**#1: CHANGING THE NUMBER OF SIDES**'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**#1：改变边数**'
- en: We used a variable, `sides`, in the *ColorSpiral.py* program in [One Variable
    to Rule Them All](ch02.html#one_variable_to_rule_them_all "One Variable to Rule
    Them All"), but we didn’t vary it much or change its value except for editing,
    saving, and running the program again. Try changing the value of `sides` to another
    number, say 5\. Save and run the program to see how this affects your drawing.
    Now try 4, 3, 2, and even 1! Now, add two or more colors, in quotes, separated
    by commas, to the list of colors in the sixth line of the program. Increase the
    value of `sides` to use this new number of colors—try 8 or 10 or more!
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[《一个变量控制一切》](ch02.html#one_variable_to_rule_them_all "一个变量控制一切")的*ColorSpiral.py*程序中使用了变量`sides`，但是我们并没有大幅度变化它的值，除非编辑、保存并重新运行程序。试着将`sides`的值改为另一个数字，比如5。保存并运行程序，看看这会如何影响你的绘图。现在试试4、3、2，甚至是1！现在，在程序第六行的颜色列表中添加两个或更多的颜色，用引号括起来，并用逗号隔开。增加`sides`的值，使用新的颜色数量——试试8、10或更多！
- en: '**#2: HOW MANY SIDES?**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**#2: 多少条边？**'
- en: 'What if you want to let a user decide the number of sides while the program
    runs? Using what you learned in [Chapter 1](ch01.html "Chapter 1. Python Basics:
    Get to Know Your Environment"), you can ask the user for a number of sides and
    store that input in the variable `sides`. Our only extra step is to *evaluate*
    the number the user enters. We can find out which number the user typed with the
    `eval()` function, like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望在程序运行时让用户决定边数该怎么办？利用你在[第 1 章](ch01.html "第 1 章。Python基础：了解你的环境")学到的知识，你可以让用户输入边数，并将该输入存储在变量`sides`中。我们唯一额外的步骤是*评估*用户输入的数字。我们可以使用`eval()`函数来找出用户输入的数字，像这样：
- en: '[PRE11]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Replace the line `sides = 6` in *ColorSpiral.py* with the preceding line. Your
    new program will ask how many sides the user wants to see. Then, the program will
    draw the shape the user asks for. Give it a try!
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 将 *ColorSpiral.py* 中的`sides = 6`行替换为上述行。你新的程序将询问用户想要显示多少条边。然后，程序将绘制用户要求的形状。试试看！
- en: '**#3: RUBBER-BAND BALL**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**#3: 橡皮筋球**'
- en: Try changing the *ColorSpiral.py* program into a more tangled and abstract shape
    just by adding an extra turn inside the end of the drawing loop. Add a line like
    `t.left(90)` to the bottom of the `for` loop to make the angles sharper (remember
    to indent, or space over, to keep the statement in the loop). The result, shown
    in [Figure 2-9](ch02.html#adding_an_extra_90_degrees_to_each_turn "Figure 2-9. Adding
    an extra 90 degrees to each turn in ColorSpiral.py turns it into RubberBandBall.py."),
    looks like a geometric toy or perhaps a ball made of colored rubber bands.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 试着仅通过在绘图循环的末尾添加一个额外的转动，将 *ColorSpiral.py* 程序改为一个更复杂和抽象的形状。可以在`for`循环的底部添加一行像`t.left(90)`的代码，使角度更加尖锐（记得缩进，以保持语句在循环内）。如[图
    2-9](ch02.html#adding_an_extra_90_degrees_to_each_turn "图 2-9. 在 ColorSpiral.py
    中每次转动增加 90 度，会将其转变为 RubberBandBall.py")所示，结果看起来像一个几何玩具，或者可能是一个由彩色橡皮筋制成的球。
- en: '![Adding an extra 90 degrees to each turn in ColorSpiral.py turns it into RubberBandBall.py.](httpatomoreillycomsourcenostarchimages2188780.png.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![在 ColorSpiral.py 中每次转动增加 90 度，会将其转变为 RubberBandBall.py。](httpatomoreillycomsourcenostarchimages2188780.png.jpg)'
- en: Figure 2-9. Adding an extra 90 degrees to each turn in *ColorSpiral.py* turns
    it into *RubberBandBall.py*.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-9. 在 *ColorSpiral.py* 中每次转动增加 90 度，会将其转变为 *RubberBandBall.py*。
- en: 'Save this new version as *RubberBandBall.py*, or go to *[http://www.nostarch.com/teachkids/](http://www.nostarch.com/teachkids/)*
    and find the program in the source code for [Chapter 2](ch02.html "Chapter 2. Turtle
    Graphics: Drawing with Python").'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个新版本保存为*RubberBandBall.py*，或者访问*[http://www.nostarch.com/teachkids/](http://www.nostarch.com/teachkids/)*，在[第
    2 章](ch02.html "第 2 章。海龟图形：用Python绘图")的源代码中找到该程序。
- en: '* * *'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: ^([[1](#ch02fn01)]) The Logo programming language was created in 1967 as an
    educational programming language, and five decades later, it’s still useful for
    learning the basics of coding. Cool, huh?
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: ^([[1](#ch02fn01)]) Logo 编程语言于1967年创建，是一种教育用编程语言，五十年后，它仍然是学习编程基础的有用工具。酷吧？
- en: '^([[2](#ch02fn02)]) Younger readers may recognize *x* as the *unknown*, like
    when they solve *x* + 4 = 6 to find the unknown *x*. Older readers may recognize
    *x* from an algebra class or another mathematics course; this is where early programmers
    borrowed the concept of a variable from. There’s a lot of good math in coding:
    we’ll even see some cool geometry examples as we move forward.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: ^([[2](#ch02fn02)]) 年轻的读者可能会将*x*识别为*未知数*，就像他们在解方程*x* + 4 = 6时找到未知数*x*一样。年长的读者可能会从代数课或其他数学课程中认识到*x*；这是早期程序员借用了变量的概念的地方。编程中有很多很好的数学知识：我们甚至会看到一些有趣的几何示例，随着课程的进行。
