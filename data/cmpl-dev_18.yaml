- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">16</samp> <samp class="SANS_Dogma_OT_Bold_B_11">RUNNING
    AUTOMATED TESTS IN DOCKER</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">16</samp> <samp class="SANS_Dogma_OT_Bold_B_11">在
    DOCKER 中运行自动化测试</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/Drop-image.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Drop-image.jpg)'
- en: In this short final chapter, you’ll write a couple of automated tests that verify
    the state of the Food Finder application. Then you’ll configure a Docker service
    to continuously run them.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这短短的最后一章中，您将编写几个自动化测试来验证 Food Finder 应用程序的状态。然后，您将配置一个 Docker 服务来持续运行这些测试。
- en: We’ll focus on evaluating the application’s header by using a snapshot test
    and mocking the user session. We won’t create tests for the other components or
    our middleware, services, or APIs. However, I encourage you to build these on
    your own. Try using browser-based end-to-end tests, with a specialized framework
    such as Cypress or Playwright, to test entire pages. You can find installation
    instructions and examples for both frameworks at [*https://<wbr>nextjs<wbr>.org<wbr>/docs<wbr>/testing*](https://nextjs.org/docs/testing).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重点评估应用程序的头部，使用快照测试并模拟用户会话。我们不会为其他组件、我们的中间件、服务或 API 创建测试。然而，我鼓励您自行构建这些。可以尝试使用基于浏览器的端到端测试，借助像
    Cypress 或 Playwright 这样的专用框架来测试整个页面。您可以在 [*https://<wbr>nextjs<wbr>.org<wbr>/docs<wbr>/testing*](https://nextjs.org/docs/testing)
    上找到这两个框架的安装说明和示例。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Adding Jest to the Project</samp>
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">将 Jest 添加到项目中</samp>
- en: 'Install the Jest libraries with npm:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 npm 安装 Jest 库：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, configure Jest to work with our Next.js setup by creating a new file called
    *jest.config.js* containing the code in [Listing 16-1](chapter16.xhtml#Lis16-1).
    Save the file in the application’s root folder.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过创建一个名为 *jest.config.js* 的新文件并包含[列表 16-1](chapter16.xhtml#Lis16-1)中的代码，配置
    Jest 与我们的 Next.js 设置兼容。将文件保存在应用程序的根文件夹中。
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 16-1: The jest.config.js file'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-1：jest.config.js 文件
- en: We leverage the built-in Next.js Jest configuration, so we need to configure
    the project’s base directory to load the *config* and *.env* files into the test
    environment. Then we set the location of the module directories and the global
    test environment. We use a global setting here because our snapshot tests will
    require a DOM environment.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们利用内置的 Next.js Jest 配置，因此需要将项目的基本目录配置为加载 *config* 和 *.env* 文件到测试环境中。然后设置模块目录的位置和全局测试环境。这里使用全局设置，因为我们的快照测试将需要一个
    DOM 环境。
- en: Now we want to be able to run the tests with npm commands. Therefore, add the
    two commands in [Listing 16-2](chapter16.xhtml#Lis16-2) to the <samp class="SANS_TheSansMonoCd_W5Regular_11">scripts</samp>
    property of the project’s *package.json* file.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们希望能够使用 npm 命令运行测试。因此，将[列表 16-2](chapter16.xhtml#Lis16-2)中的两个命令添加到项目的 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">scripts</samp> 属性的 *package.json* 文件中。
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 16-2: Two commands added to the package.json file’s <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">scripts</samp>
    property'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-2：添加到 package.json 文件的 <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">scripts</samp>
    属性中的两个命令
- en: The first command executes all available tests once, and the second continuously
    watches for file changes and then reruns the tests if it detects one.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令一次性执行所有可用的测试，第二个命令则持续监视文件更改，并在检测到更改时重新运行测试。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Setting Up Docker</samp>
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">设置 Docker</samp>
- en: To run the tests using Docker, add another service to *docker-compose.yml* that
    uses the Node.js image. On startup, this service will run <samp class="SANS_TheSansMonoCd_W5Regular_11">npm
    run testWatch</samp>, the command we just defined. In doing so, we’ll continuously
    run the tests and get instant feedback about the application’s state. Modify the
    file to match the code in [Listing 16-3](chapter16.xhtml#Lis16-3).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Docker 运行测试，请向 *docker-compose.yml* 中添加另一个使用 Node.js 镜像的服务。在启动时，此服务将运行 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">npm run testWatch</samp>，这是我们刚刚定义的命令。通过这种方式，我们将持续运行测试，并即时获取有关应用程序状态的反馈。修改文件以匹配[列表
    16-3](chapter16.xhtml#Lis16-3)中的代码。
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 16-3: The modified docker-compose.yml file with the jest service'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-3：包含 jest 服务的修改后的 docker-compose.yml 文件
- en: Our small service, named *jest*, uses the official Node.js Alpine image we’ve
    used previously. We set the working directory and use the <samp class="SANS_TheSansMonoCd_W5Regular_11">volumes</samp>
    property to make our code available in this container as well. Unlike our application’s
    service, however, the *jest* service sets the Node.js environment to <samp class="SANS_TheSansMonoCd_W5Regular_11">test</samp>
    and runs the <samp class="SANS_TheSansMonoCd_W5Regular_11">testWatch</samp> command.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的小服务，名为*jest*，使用了我们之前用过的官方 Node.js Alpine 镜像。我们设置了工作目录，并使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">volumes</samp>
    属性将我们的代码也提供给这个容器。与应用程序服务不同，*jest* 服务将 Node.js 环境设置为 <samp class="SANS_TheSansMonoCd_W5Regular_11">test</samp>，并运行
    <samp class="SANS_TheSansMonoCd_W5Regular_11">testWatch</samp> 命令。
- en: Restart the Docker containers; the console should indicate that Jest is watching
    our files.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 重启 Docker 容器；控制台应显示 Jest 正在监视我们的文件。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Writing Snapshot Tests for the Header
    Element</samp>
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">为 Header 元素编写快照测试</samp>
- en: As in [Chapter 8](chapter8.xhtml), create the *__tests__* folder to hold our
    test files in the application’s root directory. Then add the *header.snapshot.test.tsx*
    file containing the code in [Listing 16-4](chapter16.xhtml#Lis16-4).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如同在[第 8 章](chapter8.xhtml)中一样，在应用程序的根目录中创建 *__tests__* 文件夹来存放我们的测试文件。然后添加包含[列表
    16-4](chapter16.xhtml#Lis16-4)中代码的 *header.snapshot.test.tsx* 文件。
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 16-4: The __tests__/header.snapshot.test.tsx file'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 16-4：__tests__/header.snapshot.test.tsx 文件
- en: This test should resemble those you wrote in [Chapter 8](chapter8.xhtml). Note
    that we import the <samp class="SANS_TheSansMonoCd_W5Regular_11">useSession</samp>
    hook from *next-auth/react* and then use <samp class="SANS_TheSansMonoCd_W5Regular_11">jest.mock</samp>
    to replace it in the *arrange* step of each test. By replacing the session with
    a mocked one that returns the state, we can verify that the header component behaves
    as expected for both logged-in and logged-out users. We describe the test suite
    for the <samp class="SANS_TheSansMonoCd_W5Regular_11">Header</samp> component
    by using the arrange, act, and assert pattern and verify that the rendered component
    matches the stored snapshot.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试应该类似于你在[第 8 章](chapter8.xhtml)中编写的那些。注意，我们从*next-auth/react*导入了 <samp class="SANS_TheSansMonoCd_W5Regular_11">useSession</samp>
    钩子，然后使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">jest.mock</samp> 在每个测试的*安排*步骤中替换它。通过用返回状态的模拟会话替换原会话，我们可以验证标题组件在已登录和未登录用户状态下的行为是否符合预期。我们通过使用安排、执行和断言模式来描述
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Header</samp> 组件的测试套件，并验证渲染的组件是否与存储的快照匹配。
- en: The first test case uses an empty session and the *unauthenticated* status to
    render the header in a logged-out state. The second test case uses a session with
    minimal data and sets the user’s status to *authenticated*. This lets us verify
    that an existing session shows a different user interface than an empty session
    does.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个测试用例使用空会话和*未经验证*的状态来呈现未登录状态下的标题。第二个测试用例使用包含最少数据的会话，并将用户状态设置为*已验证*。这样我们就可以验证，现有会话显示的用户界面与空会话显示的界面不同。
- en: If you write additional tests, make sure to add them to the *__tests__* folder.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你编写了额外的测试，请确保将它们添加到*__tests__* 文件夹中。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">总结</samp>
- en: You’ve successfully added a few simple snapshot tests to verify that the Food
    Finder application works as intended. Using an additional Docker service, you
    can continuously verify that additional developments won’t break the application.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你已成功添加了一些简单的快照测试，以验证 Food Finder 应用程序按预期工作。通过添加额外的 Docker 服务，你可以持续验证后续开发不会破坏应用程序。
- en: Congratulations! You’ve successfully created your first full-stack application
    with TypeScript, React, Next.js, Mongoose, and MongoDB. You’ve used Docker to
    containerize your application and Jest to test it. With the knowledge gained in
    the book and its exercises, you’ve laid the foundation for your career as a full-stack
    developer.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经成功地创建了第一个全栈应用程序，使用了 TypeScript、React、Next.js、Mongoose 和 MongoDB。你还使用 Docker
    将应用程序容器化，并用 Jest 进行测试。通过本书及其练习，你为自己作为全栈开发者的职业生涯奠定了基础。
