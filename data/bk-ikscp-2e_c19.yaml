- en: '19'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '19'
- en: Extensions
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展
- en: Most long-lived software projects owe a large part of their success to extensibility.
    If you manage to attract and keep outside developers with their unique needs,
    perspectives, and approaches, your software product has acquired good insurance
    against oblivion. Inkscape's ecosystem of extensions is not very large, but it
    is an important part of the program's impact. Almost 200 extensions ship with
    Inkscape 1.0, and you can find many more online.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数长期存在的软件项目都将其成功的很大一部分归功于可扩展性。如果你能吸引并留住外部开发者，他们拥有独特的需求、视角和方法，你的软件产品就能获得防止遗忘的良好保障。Inkscape的扩展生态系统虽然不大，但它是程序影响力的重要组成部分。Inkscape
    1.0自带了近200个扩展，你可以在网上找到更多的扩展。
- en: In this chapter, I first look at extensions from the user perspective. I explain
    the extensions UI ([19.1](#section19.1)) and describe, with examples, the notable
    extensions included with Inkscape ([19.2](#section19.2)). After that, I put on
    my developer's hat; I explain the architecture of Inkscape extensions ([19.3](#section19.3))
    and guide you through a simple example of an extension created from scratch ([19.4](#section19.4)).
    As Inkscape is an open source application, everyone can (and is encouraged to)
    contribute to it; writing an extension may be the easiest way not only to solve
    your unique problem but also make your solution useful to others.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我首先从用户的角度介绍扩展。我将解释扩展的UI界面（[19.1](#section19.1)）并通过示例描述Inkscape自带的一些重要扩展（[19.2](#section19.2)）。接下来，我将转变为开发者的身份；我将解释Inkscape扩展的架构（[19.3](#section19.3)），并引导你完成从零开始创建一个简单扩展的示例（[19.4](#section19.4)）。由于Inkscape是一个开源应用程序，每个人都可以（并且被鼓励）为其贡献；编写扩展可能是解决你独特问题并让你的解决方案对他人有用的最简单方法。
- en: 19.1 Working with Extensions
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 19.1 使用扩展
- en: An *extension* is a piece of code you can run to perform some actions on the
    selected objects in an Inkscape document. Within Inkscape, you can access most
    extensions via commands in the Extensions submenus. Unlike path effects ([Chapter 13](c13.xhtml#ch13))
    or filters ([Chapter 17](c17.xhtml#ch17)), an extension is a one-off operation;
    it is typically destructive and changes objects without preserving the originals.
    The only way to reverse an extension run is via Edit ▶ Undo.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*扩展*是你可以运行的代码片段，用来对Inkscape文档中选定的对象执行某些操作。在Inkscape中，你可以通过扩展子菜单中的命令访问大多数扩展。与路径效果（[第13章](c13.xhtml#ch13)）或滤镜（[第17章](c17.xhtml#ch17)）不同，扩展是一次性的操作；它通常是破坏性的，修改对象时不会保留原始对象。撤销扩展操作的唯一方法是通过
    编辑 ▶ 撤销。'
- en: A typical extension has a number of parameters that you set in its dialog before
    running the extension. The dialog may have more than one tab, and some of the
    most developed ones have an About or Help tab that describes the extension and
    how to use it, as shown in [Figure 19-1](#fig19-1).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的扩展有多个参数，你需要在运行扩展之前在对话框中设置这些参数。对话框可能有多个标签页，一些功能最完善的扩展会有一个关于或帮助标签，描述扩展及其使用方法，如[图19-1](#fig19-1)所示。
- en: '![](21/ext-els.svg.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](21/ext-els.svg.png)'
- en: 'Figure 19-1: The Export Layer Slices extension: the two tabs of the parameters
    dialog'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图19-1：导出图层切片扩展：参数对话框的两个标签页
- en: Most extension dialogs have a Live preview checkbox; when checked, it shows
    your document as it would look after the extension is applied with the current
    parameters. This way, you can experiment with parameter values without having
    to undo and run the extension again. To apply the parameters as final, click **Apply**;
    to cancel without running the extension, click **Close**.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数扩展对话框都有一个实时预览复选框；选中后，它会显示应用当前参数后的文档效果。这样，你可以在不撤销并重新运行扩展的情况下，尝试不同的参数值。要将参数应用为最终值，点击**应用**；要取消并不运行扩展，点击**关闭**。
- en: When the Live preview is off, the extension dialog is not modal, so you can
    pan the canvas and select different objects; as soon as you turn Live preview
    on, the dialog locks the rest of Inkscape so you can only change the parameters
    in the dialog and see their effect. For some extensions, updating can be slow,
    especially when your document is big and complex.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当实时预览关闭时，扩展对话框不是模态的，因此你可以平移画布并选择不同的对象；一旦开启实时预览，对话框会锁定Inkscape的其余部分，这样你只能更改对话框中的参数并查看其效果。对于一些扩展，更新可能会很慢，尤其是当你的文档很大且复杂时。
- en: The Previous Extension command in the Extensions menu re-runs the last extension
    command without showing the parameters dialog. The Previous Extension Settings
    command opens last extension's parameters dialog from which you can run it again.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: “扩展”菜单中的“上一个扩展”命令可以重新运行上一个扩展命令，而无需显示参数对话框。“上一个扩展设置”命令会打开上一个扩展的参数对话框，您可以从中再次运行该扩展。
- en: 19.2 A Guide to Inkscape Extensions
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 19.2 Inkscape扩展指南
- en: 'Many extensions have already been mentioned or described throughout this book.
    In some (but far from all) cases, an extension is an alternative to some other,
    more convenient or integrated method to achieve the same result; when an extension
    duplicates functionality available in the core of the program, it''s usually because
    the extension was created first. Still, many extensions are unique and indispensable
    tools in Inkscape''s toolbox. Let''s go through the Extensions menu to review
    what is available:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 许多扩展已经在本书中提到或描述过。在某些（但远不是所有）情况下，某个扩展是实现相同结果的另一种选择，可能是某个更方便或集成的方法；当扩展重复了程序核心中的功能时，通常是因为扩展先于核心功能出现。不过，许多扩展仍然是Inkscape工具箱中独特且不可或缺的工具。让我们一起浏览“扩展”菜单，看看有哪些可用功能：
- en: The Arrange submenu has Restack for z-order manipulations ([4.4](c04.xhtml#section4.4))
    and Deep Ungroup for ungrouping multiple levels of grouping ([4.8.1](c04.xhtml#section4.8.1)).
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “排列”子菜单包含用于z轴顺序操作的“重堆叠”（Restack）功能（[4.4](c04.xhtml#section4.4)）和用于解除多层次组合的“深度解除组合”（Deep
    Ungroup）功能（[4.8.1](c04.xhtml#section4.8.1)）。
- en: Color extensions change the colors of selected vector objects (but don't work
    on bitmaps), as detailed in [8.10.1](c08.xhtml#section8.10.1).
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 颜色扩展改变所选矢量对象的颜色（但不适用于位图），如[8.10.1](c08.xhtml#section8.10.1)中详细说明。
- en: Document has two extensions that convert between the old Inkscape SVG documents
    that assume 90 dpi resolution and the new ones that are based on 96 dpi (see the
    note at the end of [4.2](c04.xhtml#section4.2) for details).
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档有两个扩展，用于在假设90 dpi分辨率的旧版Inkscape SVG文档和基于96 dpi的新文档之间转换（详细信息请参见[4.2](c04.xhtml#section4.2)末尾的注释）。
- en: Export extensions implement various ways to export a document, such as sending
    it to a plotter device (Plot) or exporting multiple slices of a web page mockup
    (Export Layer Slices, which is intended as an improvement on the standard batch
    export functionality in the Export PNG Image dialog, [18.6.1.4](c18.xhtml#section18.6.1.4)).
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导出扩展实现了多种导出文档的方法，例如将其发送到绘图仪设备（Plot）或导出网页设计稿的多个切片（Export Layer Slices，这是一种对标准批量导出功能的改进，见[18.6.1.4](c18.xhtml#section18.6.1.4)）。
- en: Gcodetools is a collection of extensions to prepare and export your document
    to the G-code language that various computerized machine tools understand, so
    that you can, for example, cut or engrave a metallic badge out of your Inkscape
    design.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gcodetools是一组扩展，用于将文档准备并导出为各种计算机化机床理解的G代码语言，您可以利用这些扩展，比如将金属徽章从Inkscape设计中切割或雕刻出来。
- en: The Generate from Path, Modify Path, and Visualize Path submenus provide a number
    of path-processing extensions described in the chapter on path effects ([13.4](c13.xhtml#section13.4)).
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “从路径生成”、“修改路径”和“可视化路径”子菜单提供了多种路径处理扩展，详见路径效果章节（[13.4](c13.xhtml#section13.4)）。
- en: The Images submenu contains utilities for embedding and extracting images ([18.2.1](c18.xhtml#section18.2.1))
    as well as for changing image attributes ([18.2.3](c18.xhtml#section18.2.3)).
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “图像”子菜单包含嵌入和提取图像的工具（[18.2.1](c18.xhtml#section18.2.1)），以及更改图像属性的工具（[18.2.3](c18.xhtml#section18.2.3)）。
- en: JessyInk extensions insert Javascript snippets into a document that turn it
    into an interactive presentation when viewed in a browser. With these snippets,
    you will be able to scroll the pages, make objects respond to clicks, use transitions,
    and even insert videos.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JessyInk扩展将Javascript代码片段插入文档中，当在浏览器中查看时，它会将文档转变为互动演示。通过这些代码片段，您可以滚动页面、让对象响应点击、使用过渡效果，甚至插入视频。
- en: Raster (bitmap-processing) extensions were reviewed in [18.7](c18.xhtml#section18.7).
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 光栅（位图处理）扩展在[18.7](c18.xhtml#section18.7)中进行了审查。
- en: Stylesheet ▶ Merge Styles into CSS is the tool to use if you have many objects
    with the same style and want to store that style in a single place so you can
    update all those objects at once. Recall that Inkscape supports selectors that
    apply a shared style to multiple objects ([8.1](c08.xhtml#section8.1)); this extension
    creates such a selector from the selected objects and then switches them from
    their inline style properties to that selector.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 样式表 ▶ 合并样式到 CSS 是当你有多个对象使用相同样式并且希望将样式存储在一个地方，以便同时更新所有对象时使用的工具。请记得，Inkscape 支持应用共享样式到多个对象的选择器（[8.1](c08.xhtml#section8.1)）；此扩展从选定的对象创建这样的选择器，然后将它们的内联样式属性切换为该选择器。
- en: Text extensions were described in the chapter on text ([15.7](c15.xhtml#section15.7)).
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本扩展在关于文本的章节中已描述（[15.7](c15.xhtml#section15.7)）。
- en: Typography is a collection of extensions that aid in creating SVG fonts ([15.8](c15.xhtml#section15.8)).
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Typography 是一组有助于创建 SVG 字体的扩展（[15.8](c15.xhtml#section15.8)）。
- en: Web extensions once again remind you that Inkscape's documents are usable as
    web pages because modern web browsers support SVG (see also JessyInk above). The
    Web ▶ JavaScript ▶ Set Attributes extension allows you to change an object’s style
    property in response to a given event—typically a click of some other element.
    The Web ▶ JavaScript ▶ Transmit Attributes is similar but copies the clicked object's
    property to another object. You need to select both objects, the click target
    first and the property-changing object second, before calling these extensions.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络扩展再次提醒你，Inkscape 的文档可以作为网页使用，因为现代网页浏览器支持 SVG（另见上面的 JessyInk）。Web ▶ JavaScript
    ▶ 设置属性扩展允许你根据给定事件（通常是点击某个其他元素）改变对象的样式属性。Web ▶ JavaScript ▶ 传输属性则类似，但会将被点击对象的属性复制到另一个对象。你需要先选择两个对象，点击目标对象为第一选项，改变属性的对象为第二选项，然后调用这些扩展。
- en: 19.2.1 The Render Submenu
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 19.2.1 渲染子菜单
- en: 'The Render submenu contains extensions that generate entirely new objects—not
    based on anything in your document. Most of them haven''t been mentioned, so here''s
    a list of the notable ones:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染子菜单包含生成全新对象的扩展—这些对象与文档中的任何内容无关。大多数扩展尚未提及，以下是一些显著的扩展：
- en: 3D Polyhedron
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 多面体
- en: Creates a projection of any of a number of three-dimensional shapes, from a
    cube to a great stellated dodecahedron; you specify the spatial angle and the
    styling of the shape's faces.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 创建任何多个三维形状的投影，从立方体到巨大星形十二面体；你可以指定形状的空间角度和面部样式。
- en: Barcode
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 条形码
- en: Extensions in this subsubmenu create a Classic linear barcode (supported formats
    include EAN8, EAN13, Code39, Code128, and others), a two-dimensional Datamatrix
    barcode, or a square QR Code with the given text.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本子菜单中的扩展创建经典的线性条形码（支持的格式包括 EAN8、EAN13、Code39、Code128 等），二维 Datamatrix 条形码，或带有指定文本的方形二维码。
- en: Calendar
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 日历
- en: In case you ever need it, this extension fills your page with a fully formatted
    calendar for a given year, with many layout, styling, and localization options.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要的话，此扩展会为你填充页面，生成一个给定年份的完整格式化日历，提供多种布局、样式和本地化选项。
- en: Draw From Triangle, Triangle
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Draw From Triangle，Triangle
- en: Similar to the path effects for geometric constructions ([13.3.15](c13.xhtml#section13.3.15)),
    Draw From Triangle draws any of a number of geometric shapes (such as the circumcircle
    or orthocenter) based on a triangle defined by the first three nodes of a selected
    path. The Triangle extension creates a triangle from any unambiguous combination
    of sides and angles.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于几何构造的路径效果（[13.3.15](c13.xhtml#section13.3.15)），Draw From Triangle 根据通过选定路径的前三个节点定义的三角形，绘制一系列几何形状（如外接圆或垂心）。Triangle
    扩展通过任何明确的边和角的组合创建一个三角形。
- en: Function Plotter, Parametric Curves
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Function Plotter，Parametric Curves
- en: These two extensions draw function graphs. The Function Plotter creates a graph
    of a single function (for example, altitude against time of a moving body), whereas
    Parametric Curves draws a curve where both X and Y coordinates vary as functions
    of an independent*parameter* variable conventionally called *t* (for example,
    X and Y may represent coordinates of a body as they change with time).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个扩展用于绘制函数图形。Function Plotter 创建单个函数的图形（例如，移动物体的高度随时间的变化），而 Parametric Curves
    则绘制一个曲线，其中 X 和 Y 坐标作为独立*参数*变量（通常称为 *t*）的函数变化（例如，X 和 Y 可能代表物体随着时间变化的坐标）。
- en: Before calling one of these extensions, draw or select a rectangle that will
    define the scale of the graph, and use the numeric parameters to define the ranges
    of the X and Y coordinates. The Multiply X range by 2*pi checkbox is convenient
    for trigonometric functions; with it, for example, the range of 0 to 2 is treated
    as 0 to 2 × π. In the Function Plotter, the Use polar coordinates checkbox transforms
    the graph into a circle whose center is in the center of the selected rectangle,
    with the X range mapped to the angle and the Y to the radius.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用这些扩展之前，绘制或选择一个矩形，定义图形的比例，并使用数字参数来定义X和Y坐标的范围。勾选“将X范围乘以2*pi”复选框对于三角函数非常方便；例如，0到2的范围将被视为0到2
    × π。在函数绘图器中，勾选“使用极坐标”复选框将图形转换为一个圆，其中心位于所选矩形的中心，X范围映射到角度，Y范围映射到半径。
- en: The Samples parameter sets the total number of times the function(s) will be
    sampled; since each sampling produces a node, this is also the total number of
    nodes in the generated path. The higher this number, the more precise the graph.
    The optimum number of samples depends on the nature of your function; for example,
    a periodic function with *n* periods in the X range would need at least several
    samples per period to reproduce with any fidelity.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: “样本”参数设置函数（们）将被采样的总次数；由于每次采样都会产生一个节点，因此这也是生成路径中节点的总数。这个数字越高，图形越精确。样本的最佳数量取决于函数的特性；例如，X范围内具有*n*个周期的周期性函数，至少需要每个周期几个样本才能准确再现。
- en: The function or functions are written in the Python programming language. You
    can use a number of built-in mathematical functions such as`sin(x)`, `log(x)`,
    or `sqrt(x)`; refer to theFunctions tab for a full list.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 函数是用Python编程语言编写的。你可以使用一些内置的数学函数，如`sin(x)`、`log(x)`或`sqrt(x)`；参阅“函数”选项卡以查看完整列表。
- en: In the Function Plotter ([Figure 19-2](#fig19-2)), you can give the *first derivative*
    of the graphed function; the value of the derivative determines the angle of the
    Bézier handles at each node. Either ask the extension to Calculate first derivative
    numerically or uncheck that checkbox and provide the derivative function analytically,
    using the same Python syntax and built-in functions—for example, the first derivative
    of `sin(x)` is `cos(x)`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数绘图器（[图 19-2](#fig19-2)）中，你可以给出绘制函数的**一阶导数**；导数的值决定了每个节点的贝塞尔手柄的角度。你可以选择让扩展程序数值计算一阶导数，或者取消勾选该复选框并提供导数函数的解析形式，使用相同的Python语法和内置函数——例如，`sin(x)`的一阶导数是`cos(x)`。
- en: '![](21/pe-funplot.svg.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](21/pe-funplot.svg.png)'
- en: 'Figure 19-2: Function Plotter examples'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19-2：函数绘图器示例
- en: Gear
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 齿轮
- en: These two extensions create a circular gear or rack gear, with a given number
    of teeth, pitch, and contact angle.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个扩展创建一个圆形齿轮或齿条齿轮，具有给定数量的齿、齿距和接触角。
- en: Grids
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 网格
- en: This family of extensions is for creating grids of lines—rectangular (Cartesian,
    such as the grid in [Figure 13-60](c13.xhtml#fig13-60)), isometric, or polar.
    The options for the number of lines and their spacing are self-explanatory; major
    and minor lines use different stroke width. Lines can be spaced logarithmically.
    Each line is a separate path object.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这一系列扩展用于创建线网格——矩形网格（笛卡尔坐标系，例如[图 13-60](c13.xhtml#fig13-60)中的网格）、等距网格或极坐标网格。线条数量和间距的选项不言而喻；主线和次线使用不同的笔画宽度。线条可以按对数间隔分布。每条线都是一个独立的路径对象。
- en: Guides Creator
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 指导线创建器
- en: This extension divides your page into any number of rows and columns by adding
    guidelines ([7.1](c07.xhtml#section7.1)).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个扩展通过添加指导线将页面划分为任意数量的行和列（[7.1](c07.xhtml#section7.1)）。
- en: L-system
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: L系统
- en: This extension implements *Lindenmeyer systems*—a simple graphic language with
    recursion that can produce complex sequential or tree-like structures ([Figure 19-3](#fig19-3)).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个扩展实现了**林登迈尔系统**——一种简单的图形语言，通过递归可以生成复杂的顺序或树状结构（[图 19-3](#fig19-3)）。
- en: Programs in this language are built out of simple commands like "draw one step
    forward" or "turn left." You start with an Axiom and apply the substitution Rules
    to it recursively, limited by the Order parameter. The rest of the parameters
    determine the length and angles of the lines produced by the primitive commands;
    you can also randomize these values to render a more natural result. For a complete
    list of the commands recognized in the axiom and rules, refer to the Help tab.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这种语言中的程序由简单的命令构成，例如“向前画一步”或“向左转”。你从一个公理开始，并递归地应用替代规则，受限于Order参数。其余参数决定了由基本命令生成的线条的长度和角度；你也可以随机化这些值，以产生更自然的结果。有关公理和规则中识别的命令的完整列表，请参见帮助标签。
- en: '![](21/pe-lsystem.svg.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](21/pe-lsystem.svg.png)'
- en: 'Figure 19-3: L-system examples'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19-3：L系统示例
- en: Mathematics ▶ LaTeX
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 数学 ▶ LaTeX
- en: This extension runs `pdflatex` (which needs to be installed on your computer)
    to convert a LaTeX string into a vector formula image inserted into your document.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个扩展运行`pdflatex`（需要在你的计算机上安装）将LaTeX字符串转换为矢量公式图像，并将其插入到你的文档中。
- en: NiceCharts
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: NiceCharts
- en: This extension can create bar charts, stacked bar charts, or pie charts based
    on data from a file or a string. Parameters determine sizes, spacings, and styling
    of the chart's elements.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个扩展可以基于文件或字符串中的数据创建条形图、堆叠条形图或饼图。参数决定了图表元素的大小、间距和样式。
- en: Random Tree
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 随机树
- en: Similar to the L-system but more primitive, this extension draws a random branching
    tree where the first segment of the trunk is Initial size long and each subsequent
    branch is progressively shorter, until the Minimum size is reached and the drawing
    terminates. The bigger the difference between the initial and minimum sizes, the
    more complex the tree.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于L系统，但更为原始，这个扩展绘制了一个随机分支树，其中树干的第一段是初始大小，并且每个后续的分支逐渐变短，直到达到最小大小，绘制停止。初始大小和最小大小之间的差距越大，树就越复杂。
- en: Spirograph
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Spirograph
- en: A spirograph is a toy where a small circle, holding the pen, rolls along the
    inner edge of a larger circular hole. This extension is an implementation of the
    same idea that you can use to produce a huge variety of smooth centrally symmetric
    curves.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Spirograph是一个玩具，其中一个小圆圈（持笔）沿着一个更大圆形孔的内边缘滚动。这个扩展实现了相同的思想，你可以用它来生成各种光滑的中央对称曲线。
- en: Wireframe Sphere
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Wireframe Sphere
- en: This is the extension to use whenever you need a geometrically correct globe
    of parallels and meridians.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个扩展，当你需要一个几何上正确的经纬度网格球体时可以使用。
- en: 19.3 Extensions Architecture
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 19.3 扩展架构
- en: The rest of this chapter is more technical. Read on if you're interested in
    learning how Inkscape's extensions are implemented, why you might want to make
    one of your own, and how to proceed if you do. Familiarity with the basics of
    programming in general and the Python language in particular is a plus.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 本章其余部分更加技术性。如果你有兴趣了解Inkscape的扩展是如何实现的，为什么你可能想自己制作一个，以及如何操作，请继续阅读。熟悉编程基础，特别是Python语言，会更有帮助。
- en: '[Figure 19-4](#fig19-4) gives an overview of Inkscape''s extension architecture.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 19-4](#fig19-4)展示了Inkscape扩展架构的概览。'
- en: '![](21/ext-arch.svg.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](21/ext-arch.svg.png)'
- en: 'Figure 19-4: Inkscape extensions: under the hood'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19-4：Inkscape扩展：幕后解析
- en: Unlike, for example, Adobe products, Inkscape does not have "first-class" plug-ins
    that would load into the main program's memory space and have the same level of
    access to the document's tree and the program's API as Inkscape itself. Instead,
    an Inkscape extension is just a script written in Python that Inkscape runs on
    a (temporary) saved copy of the current document—and then loads the script's output
    back, replacing the document with it and restoring object selection if possible.
    Inkscape's extension-running machinery compresses all this saving, processing,
    and loading back into a single undoable action that is transparent to the user.
    What's more, when you turn on the Live preview checkbox in an extension's dialog,
    every change of the parameters causes another save-process-load cycle—which is
    automatically undone if you change a parameter again or close the dialog without
    clicking Apply.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Adobe 产品不同，Inkscape 没有“一级”插件，这些插件会加载到主程序的内存空间中，并具有与 Inkscape 本身相同的访问权限，能够访问文档的树结构和程序的
    API。相反，Inkscape 扩展只是一个用 Python 编写的脚本，Inkscape 在当前文档的（临时）保存副本上运行该脚本——然后将脚本的输出重新加载进来，用它替换文档并尽可能恢复对象选择。Inkscape
    的扩展运行机制将所有这些保存、处理和重新加载的过程压缩成一个可撤销的操作，用户无需了解细节。更重要的是，当你在扩展对话框中启用实时预览复选框时，每次更改参数都会导致另一个保存-处理-加载周期——如果你再次更改参数或在未点击应用的情况下关闭对话框，这个周期会被自动撤销。
- en: It is the extension script's responsibility to not touch anything in the document
    except what it is supposed to touch. Along with the reference to the saved temporary
    copy of the document, it is passed the list of currently selected objects as well
    as, of course, the parameters the user has set in the extension's dialog. The
    script must load and parse the SVG file, find the selected objects in it, do its
    thing, and output the changed document back as serialized SVG (via the standard
    output).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展脚本的责任是不要触碰文档中不应该触碰的部分。除了对文档进行保存的临时副本引用外，它还传递了当前选定对象的列表，以及当然，还有用户在扩展对话框中设置的参数。脚本必须加载并解析
    SVG 文件，找到其中的选定对象，进行相应操作，并将修改后的文档以序列化 SVG 格式输出（通过标准输出）。
- en: If this whole approach strikes you as clumsy and inefficient, that's because
    it is. However, such a radical decoupling of extension code from the core of Inkscape
    has its advantages, too. The biggest advantage is the low barrier of entry for
    new developers. You don't need to know much about Inkscape itself in order to
    start; all you need is basic familiarity with SVG and an understanding of how
    to deal with the XML tree of the document in Python. Existing Inkscape extensions
    are very easy to study, modify, or fork for the same reason. Another advantage
    is that any extension is easy to reuse as a stand-alone script that you can run
    not only from Inkscape, but also in all kinds of automated processing scenarios.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这种方法让你觉得笨拙和低效，那是因为它确实是这样的。然而，扩展代码与 Inkscape 核心的这种彻底解耦也有其优点。最大的一点就是为新开发者提供了低门槛。你不需要深入了解
    Inkscape 本身就可以开始；你只需要基本的 SVG 熟悉度和了解如何在 Python 中处理文档的 XML 树。现有的 Inkscape 扩展也很容易学习、修改或分叉，原因正是如此。另一个优点是，任何扩展都可以很容易地作为独立脚本重用，你不仅可以在
    Inkscape 中运行它，还可以在各种自动化处理场景中使用。
- en: While you don't have any access to Inkscape's internals when you're in an extension,
    that doesn't mean you're completely on your own. Inkscape ships with a Python
    library called `inkex` (for INKscape EXtensions) that extension scripts are supposed
    to use. It has facilities for a lot of tedious and complex tasks that you don't
    need to do in your code, such as parsing the path data (the `d` attribute), parsing
    style strings and calculating an object's effective style (taking inheritance
    and CSS selectors into account), manipulating transform matrices, and so on. You
    can write much more powerful algorithms with `inkex` taking care of the low-level
    drudgery for you.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在扩展中无法访问 Inkscape 的内部，但这并不意味着你完全孤立无援。Inkscape 附带了一个名为 `inkex` 的 Python 库（用于
    INKscape EXtensions），扩展脚本应该使用它。它提供了许多繁琐且复杂的任务功能，你的代码中无需处理这些任务，例如解析路径数据（`d` 属性）、解析样式字符串并计算对象的有效样式（考虑继承和
    CSS 选择器）、操作变换矩阵等等。通过 `inkex`，你可以编写更强大的算法，让它为你处理低级的繁琐工作。
- en: Sometimes, however, even `inkex` is not enough. You may need something done
    that only Inkscape itself can do—for example, create one or more PNG exports from
    the source document. For this, you need to run Inkscape itself—a *second copy*
    of Inkscape called, possibly repeatedly, via the command line. In older versions,
    even getting the correct bounding box of an object required a command line Inkscape
    call (using the `--query` parameters, [C.5](b03.xhtml#sectionC.5)); as of this
    writing, `inkex` is capable of providing a correct bounding box for a path object,
    but it still can’t do so for text (because of the complexity of correctly rendering
    arbitrary fonts and text layouts).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时即使是 `inkex` 也不够用。你可能需要做一些只有 Inkscape 本身才能做到的事情——例如，从源文档中创建一个或多个 PNG 导出。为此，你需要运行
    Inkscape 本身——通过命令行调用，可能是多次调用一个 *第二份* Inkscape 副本。在旧版本中，甚至获取对象的正确边界框也需要通过命令行调用
    Inkscape（使用 `--query` 参数，[C.5](b03.xhtml#sectionC.5)）；截至目前，`inkex` 可以为路径对象提供正确的边界框，但对于文本仍然无法做到（因为正确渲染任意字体和文本布局的复杂性）。
- en: 19.4 Creating an Extension
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 19.4 创建扩展
- en: The remainder of this chapter walks you through creating an extremely simple—but
    still rudimentarily useful—Inkscape extension from scratch. Hopefully, seeing
    how easy and natural that is, you will feel encouraged to automate your own tedious
    and repeated manual tasks—and perhaps, eventually, share your solution so that
    others may benefit from it too.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的其余部分将引导你从头开始创建一个极其简单——但仍然基本有用——的 Inkscape 扩展。希望通过看到这一过程是多么简单和自然，你能感到鼓励去自动化你自己的繁琐和重复的手动任务——也许，最终，你会分享你的解决方案，让其他人也能受益。
- en: 'The example extension, called *Make Initial*, creates a simple initial in a
    text object by taking its first character and increasing its font size. It has
    a single parameter: the size of the initial letter, given as percent of the font
    size of the rest of the text.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例扩展，叫做 *Make Initial*，通过取文本对象的第一个字符并增大其字体大小，创建一个简单的初始字母。它有一个参数：字母的大小，作为其余文本字体大小的百分比。
- en: 19.4.1 The .inx File
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 19.4.1 .inx 文件
- en: 'Before getting to the Python code, we need to create an .inx file (from INkscape
    eXtension) for the extension. This is an XML file that describes, to Inkscape,
    what this extension is, how to run it, and how to present it to the user. Here
    is the makeinitial.inx file for the Make Initial extension:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始 Python 代码之前，我们需要为扩展创建一个 .inx 文件（来自 INkscape eXtension）。这是一个 XML 文件，它向 Inkscape
    描述这个扩展是什么，如何运行，以及如何呈现给用户。以下是 Make Initial 扩展的 makeinitial.inx 文件：
- en: '[PRE0]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The root element, `inkscape-extension`, is just a container. Note the obligatory
    `xmlns` attribute that sets the file's namespace, without which Inkscape won't
    recognize it. The `name` is the name of the extension as it will appear in the
    menu; `label` is the intro text to be displayed in the extension's dialog. The
    `id` can be any string so long as it's unique for your extension.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 根元素 `inkscape-extension` 只是一个容器。注意强制要求的 `xmlns` 属性，它设置了文件的命名空间，缺少它的话，Inkscape
    无法识别该文件。`name` 是扩展在菜单中显示的名称；`label` 是将在扩展对话框中显示的介绍文本。`id` 可以是任何字符串，只要它对你的扩展来说是唯一的。
- en: The single `param` element (there may be any number of them) describes the extension's
    parameter. Called `initialsize`, it is an integer (as this is a percentage, we
    don't need floating-point precision) in the range from 0 to 1000\. The `gui-text`
    attribute provides the label it will have in the dialog, and the content of the
    element (200) is the initial value (after the first use, Inkscape remembers and
    restores the value you last used for all parameters).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 单个 `param` 元素（可以有任意数量的它们）描述了扩展的参数。它叫做 `initialsize`，是一个整数（因为这是一个百分比，所以我们不需要浮点精度），范围从
    0 到 1000。`gui-text` 属性提供了它在对话框中的标签，而元素的内容（200）是初始值（第一次使用后，Inkscape 会记住并恢复你上次为所有参数使用的值）。
- en: The `effect` element identifies this one as an *effect extension*; other extension
    types are `input`, `output`, and `template` (see [19.4.2](#section19.4.2) for
    details). Inside, the `object-type` identifies what kind of selected objects this
    extension accepts; possible values are `all`, `path`, or `text`. The `effects-menu`
    element places this extension inside the Text submenu of the Extensions menu.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`effect` 元素将这个扩展标识为 *效果扩展*；其他扩展类型包括 `input`、`output` 和 `template`（详见 [19.4.2](#section19.4.2)）。在其中，`object-type`
    元素标识了此扩展接受的选定对象类型；可能的值有 `all`、`path` 或 `text`。`effects-menu` 元素将此扩展放置在扩展菜单中的文本子菜单下。'
- en: Finally, the `script` element tells Inkscape how to run this extension. In the
    `command` element, the `location="inx"` instructs it to look for the executable
    files in the same folder as the .inx file, and the `interpreter` attribute identifies
    Python as the interpreter to use (the version included with Inkscape 1.1 is Python
    3.8.9). The content of that element (makeinitial.py) refers to the extension’s
    main code file.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`script` 元素告诉 Inkscape 如何运行此扩展。在 `command` 元素中，`location="inx"` 指示它在与 .inx
    文件相同的文件夹中查找可执行文件，`interpreter` 属性指定 Python 作为要使用的解释器（Inkscape 1.1 中包含的版本是 Python
    3.8.9）。该元素的内容（makeinitial.py）指向扩展的主代码文件。
- en: 19.4.2 The inkex Base Classes
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 19.4.2 inkex 基类
- en: 'Gone are the days when Python was a quick-and-dirty scripting language with
    little structure. You now can—and are encouraged to—write fully object-oriented
    Python code. Inkscape''s `inkex` library is as good an example as any: the first
    thing you do after `import inkex` is create a class that will hold your extension''s
    code. Your class should extend one of the *base extension classes* of `inkex`
    so that it inherits all of the utility methods it needs for loading the SVG document,
    parsing the parameters, and outputting the changed document back.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，Python 是一种快速而粗糙的脚本语言，结构较为松散。如今，你可以—并且被鼓励—编写完全面向对象的 Python 代码。Inkscape 的 `inkex`
    库就是一个很好的例子：在 `import inkex` 后，你首先要做的就是创建一个类来容纳扩展的代码。你的类应该扩展 `inkex` 的 *基础扩展类*，以便继承加载
    SVG 文档、解析参数以及将修改后的文档输出回去所需的所有实用方法。
- en: The `inkex` library includes several base extension classes designed for various
    kinds of extensions, from general to specialized. Choose one that best fits your
    case.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`inkex` 库包含几个基础扩展类，适用于各种类型的扩展，从通用到专业化的都有。选择一个最适合你需求的类。'
- en: '`EffectExtension` is the most general type of extension that, per [Figure 19-4](#fig19-4),
    takes the input document and the list of selected objects, does something to them,
    and returns the changed document back. You need to implement the `effect` method
    that does the actual processing. This is the base class we will use for our example.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EffectExtension` 是最通用的扩展类型，如 [图19-4](#fig19-4) 所示，它接受输入文档和选定对象的列表，对它们进行处理，然后返回修改后的文档。你需要实现执行实际处理的
    `effect` 方法。这是我们将用于示例的基类。'
- en: '`GenerateExtension` is for an extension that doesn''t care about the source
    document or its selection; all it does is generate some new object(s) to be added
    to it. The base class handles adding the generated objects to the document, placing
    them by default in the center of view. You need to implement the `generate` method.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GenerateExtension` 用于一种不关心源文档或其选择的扩展；它所做的仅仅是生成一些新对象，并将其添加到文档中。基类负责将生成的对象添加到文档中，默认将它们放置在视图的中心。你需要实现
    `generate` 方法。'
- en: '`InputExtension` is an extension that is not available in the Extensions menu;
    instead, it adds a new item to the list of file formats in Open and Import dialogs.
    To support a new file format through an input extension, you need to implement
    the `load` method that reads an input file from a stream and, optionally, the
    `effect` method that transforms the result. Needless to say, you have to return
    valid SVG.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InputExtension` 是一种在扩展菜单中不可用的扩展；相反，它将一个新项添加到“打开”和“导入”对话框中的文件格式列表中。要通过输入扩展支持新文件格式，你需要实现
    `load` 方法，该方法从流中读取输入文件，并可选地实现 `effect` 方法来转换结果。不用说，你必须返回有效的 SVG。'
- en: '`OutputExtension`, similarly, is for output extensions that manifest themselves
    as file formats in the Save and Save As dialogs. You need to implement an optional
    `effect` method that transforms the document before saving and the obligatory
    `save` that performs the actual output to a stream.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OutputExtension` 类似，用于输出扩展，它表现为在“保存”和“另存为”对话框中的文件格式。你需要实现一个可选的 `effect` 方法，在保存前转换文档，以及一个强制性的
    `save` 方法，执行实际的输出到流中。'
- en: '`CallExtension` is for an extension designed to be a simple interface between
    Inkscape and some external SVG-processing application. You need to implement the
    `call` method that calls your application on an input file and produces an output
    file. For such tasks, this base class is more efficient than the generic `EffectExtension`
    because it does not even parse the SVG in the Python code.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CallExtension` 是为设计为 Inkscape 与某些外部 SVG 处理应用程序之间简单接口的扩展。你需要实现 `call` 方法，该方法在输入文件上调用你的应用程序并生成输出文件。对于此类任务，这个基类比通用的
    `EffectExtension` 更高效，因为它甚至不需要在 Python 代码中解析 SVG。'
- en: '`TemplateExtension` is an extension that provides a new document template.
    Like input and output extensions, it''s not listed in the Extensions menu; instead,
    it adds an item to the list of templates in the New from Template dialog ([Figure 3-3](c03.xhtml#fig3-3)).
    You can implement the `get_template` method that returns the template''s ready-to-use
    SVG code (for example, by reading it from a file). Alternatively, you can implement
    the `get_size` method (returns the template''s size) and/or `set_namedview` method
    (creates the `sodipodi:namedview` element where you set up guides, page borders,
    zoom, and so on).'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TemplateExtension` 是一个提供新文档模板的扩展。与输入和输出扩展一样，它不在扩展菜单中列出；相反，它会在从模板新建对话框中将一个项目添加到模板列表中（见[图
    3-3](c03.xhtml#fig3-3)）。你可以实现 `get_template` 方法，该方法返回模板的可用 SVG 代码（例如，通过从文件中读取）。或者，你可以实现
    `get_size` 方法（返回模板的大小）和/或 `set_namedview` 方法（创建 `sodipodi:namedview` 元素，在该元素中设置标尺、页面边框、缩放等）。'
- en: '`ColorExtension` is a specialized effect extension for adjusting colors in
    selected objects. All you need to do is implement the `modify_color` method that
    takes an input color and returns the output color; optionally, you can add `modify_opacity`
    that does the same for opacity. The base class does all the rest (such as parsing
    styles, tracking down clones, dealing with gradients, and so on).'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ColorExtension` 是一个专门用于调整选定对象颜色的效果扩展。你需要做的就是实现 `modify_color` 方法，该方法接受一个输入颜色并返回输出颜色；你也可以选择添加
    `modify_opacity` 方法，它对不透明度执行相同的操作。基类会处理其余的内容（例如解析样式、追踪克隆、处理渐变等等）。'
- en: '`TextExtension` is a specialized effect extension for editing a document''s
    text content. All you need to do is implement the `process_chardata` method that
    takes an input text string and returns its edited version.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextExtension` 是一个专门用于编辑文档文本内容的效果扩展。你需要做的就是实现 `process_chardata` 方法，该方法接受一个输入文本字符串并返回其编辑后的版本。'
- en: In addition to the obligatory methods for each base class (listed above), any
    extension class may also need to implement the `add_arguments` method if your
    extension has some user-adjustable parameters.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 除了每个基类的必选方法（如上所列），任何扩展类还可能需要实现 `add_arguments` 方法，前提是你的扩展有一些可供用户调整的参数。
- en: 19.4.3 The makeinitial.py File
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 19.4.3 makeinitial.py 文件
- en: 'After these preliminaries, we can finally dive into the actual Python code.
    Here''s the *makeinitial.py* file in full:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些准备工作后，我们终于可以进入实际的 Python 代码。以下是 *makeinitial.py* 文件的完整内容：
- en: '[PRE1]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Naturally, the first thing we do is `import inkex`. Since we will be manipulating
    the document's tree (to create a new `tspan` node for the initial), we also need
    to import the `etree` component of `lxml`, which is Python's library for dealing
    with XML (if you're unfamiliar with it, read the tutorial at [https://lxml.de/tutorial.html](https://lxml.de/tutorial.html)).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 自然，我们首先做的是 `import inkex`。由于我们将操作文档的树（以创建一个新的 `tspan` 节点作为初始值），因此我们还需要导入 `lxml`
    的 `etree` 组件，这是 Python 用于处理 XML 的库（如果你不熟悉它，可以阅读[https://lxml.de/tutorial.html](https://lxml.de/tutorial.html)上的教程）。
- en: We create the class for the extension by extending `inkex.EffectExtension` ([19.4.2](#section19.4.2)).
    The first obligatory method to implement in our class is `add_arguments`. In it,
    we call `pars.add_argument`; the first string argument of that method is the command
    line parameter (therefore starting with `--`) that Inkscape passes to our script,
    and it must match the name of the extension's parameter (`initialsize`) as defined
    in the .inx file. It is also the name by which we will access its value later
    on.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过扩展 `inkex.EffectExtension` 来创建扩展类（见[19.4.2](#section19.4.2)）。我们类中需要实现的第一个必选方法是
    `add_arguments`。在这个方法中，我们调用 `pars.add_argument`；该方法的第一个字符串参数是命令行参数（因此以 `--` 开头），这是
    Inkscape 传递给我们脚本的参数，必须与 .inx 文件中定义的扩展参数（`initialsize`）的名称匹配。它也是我们稍后访问该值时使用的名称。
- en: The `effect` method shown in line 9 does the actual work. The call `self.svg.get_selected(inkex.TextElement)`
    returns the list of elements that the user has selected before calling the extension,
    filtered to contain only text elements. We then go through all these elements
    and call our own method, `__makeinitial` (the double underscore in the name is
    Python's convention for private methods), on each one in turn.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 第 9 行中显示的 `effect` 方法执行实际工作。调用 `self.svg.get_selected(inkex.TextElement)` 返回用户在调用扩展之前选择的元素列表，经过筛选后只包含文本元素。然后，我们遍历这些元素，并依次调用我们自己的方法
    `__makeinitial`（方法名中的双下划线是 Python 的私有方法命名约定）来处理每个元素。
- en: In `__makeinitial` (line 14), things get a little more complicated. We need
    to get the first character of this text element's textual content. However, in
    SVG, the`text` element usually does not contain text under it; instead, it contains
    `tspan` elements for the lines that, in turn, may contain further `tspan`s for
    styling. We therefore check if this node has any text at all (`node.text != None`)
    and if its text is not all whitespace (`node.text.strip() != ""`). If that is
    not so, we call `__makeinitial` recursively on its first child, if it has one
    (lines 24-25); in `lxml`, elements are lists of children, so the check for presence
    of any children is `len(node) != 0`, and then the first child is simply `node[0]`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在`__makeinitial`（第14行）中，事情变得有些复杂。我们需要获取该文本元素的第一个字符。然而，在SVG中，`text`元素通常不包含文本；相反，它包含`tspan`元素，用于表示行，并且这些`tspan`元素可能还会包含其他`tspan`元素来进行样式设置。因此，我们检查这个节点是否有文本内容（`node.text
    != None`），并且它的文本是否不全是空白字符（`node.text.strip() != ""`）。如果不是，我们会递归地调用`__makeinitial`方法，针对它的第一个子节点（如果有的话）（第24-25行）；在`lxml`中，元素是子节点的列表，因此检查是否有子节点的方式是`len(node)
    != 0`，然后第一个子节点就是`node[0]`。
- en: 'If our current node does have text, we extract its first non-whitespace character
    via `node.text.strip()[0]` (line 16). Since it may not be the first one due to
    whitespace, we calculate its index (line 17). Then, we create the new `tspan`
    node in line 18 (note for XML geeks: don''t worry about namespaces here because
    the SVG namespace is the default one in Inkscape''s SVG documents). We retrieve
    the extension parameter''s value via `self.options.initialsize` and, in our new
    node, construct the `style` attribute that uses it in the `font-size` property
    (line 19). Per CSS rules, the percentage value in the property refers to the font
    size of the parent node (that is, the `node` we''re processing now).'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前节点确实有文本，我们通过`node.text.strip()[0]`提取它的第一个非空白字符（第16行）。由于可能存在空白字符，我们计算该字符的索引（第17行）。然后，在第18行创建新的`tspan`节点（对于XML专家：不要担心命名空间，因为SVG命名空间是Inkscape
    SVG文档中的默认命名空间）。我们通过`self.options.initialsize`获取扩展参数的值，并在新的节点中构造使用该值的`style`属性（第19行）。根据CSS规则，属性中的百分比值是指父节点的字体大小（即当前正在处理的`node`）。
- en: We now need to take care of the text. The initial character gets assigned to
    the new `tspan` node, as its `text` property, in line 20\. As for the rest of
    the text, however, we need to cull it out from the current `node` (line 22) and
    assign it to the `newNode` as its `tail` (line 21). That's because in `lxml`,
    the `text` property of a node holds only that part of its textual content that
    comes before its first child node. After that, each of the child nodes holds the
    fragment of text that comes after it, if any, in its `tail` property.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要处理文本。初始字符被分配给新的`tspan`节点的`text`属性（第20行）。至于其余的文本，我们需要从当前的`node`中提取（第22行），并将其分配给`newNode`的`tail`属性（第21行）。这是因为在`lxml`中，节点的`text`属性只包含其文本内容中位于第一个子节点之前的部分。之后，每个子节点的`tail`属性保存它之后的文本片段（如果有的话）。
- en: Finally, the `newNode` is ready, and we insert it into the current `node` (line
    23).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`newNode`已经准备好，我们将它插入到当前的`node`中（第23行）。
- en: The last two lines of the script (27-28) are a bit of black magic required for
    it to run. We check whether this script is run as a stand-alone program (as opposed
    to, for example, being imported into some other script) and, if so, run our class's
    `run` method (supplied by its `inkex` parent class).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的最后两行（27-28）包含一些运行所需的黑魔法。我们检查这个脚本是否作为独立程序运行（例如，而不是被导入到其他脚本中），如果是的话，就运行我们类的`run`方法（由其`inkex`父类提供）。
- en: 19.4.4 Deploying and Testing
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 19.4.4 部署和测试
- en: Both the .py file with the extension's code and its .inx file are placed into
    Inkscape's extensions folder. In Preferences ▶ System, you can look up the Inkscape
    extensions folder—this is where the extensions that ship with Inkscape live and
    where you search for inspiration and code to reuse. Your own extensions, however,
    should go into the User extensions folder; on my system, it's in C:\Users\dmitry\AppData\Roaming\inkscape\extensions.
    This way, your code will not be lost when you upgrade to a newer version of Inkscape.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 具有扩展代码的.py文件和其.inx文件被放置到Inkscape的扩展文件夹中。在首选项 ▶ 系统中，你可以查找Inkscape的扩展文件夹—这里是Inkscape自带扩展的位置，也是你可以寻找灵感和可重用代码的地方。然而，你自己的扩展应该放到用户扩展文件夹中；在我的系统中，它位于C:\Users\dmitry\AppData\Roaming\inkscape\extensions。这样，当你升级到新版的Inkscape时，你的代码就不会丢失。
- en: Copy your files over, restart Inkscape, and voilà! The new extension shows up
    in Extensions ▶ Text menu and can be used on any text object, as shown in [Figure 19-5](#fig19-5).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件复制过来，重新启动 Inkscape，瞧！新扩展出现在扩展 ▶ 文本菜单中，可以应用于任何文本对象，如[图19-5](#fig19-5)所示。
- en: '![](21/ext-makeinitial.svg.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](21/ext-makeinitial.svg.png)'
- en: 'Figure 19-5: The new Make Initial extension in action'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图19-5：新建 Make Initial 扩展的实际应用
