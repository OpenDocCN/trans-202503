- en: '**8'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**8'
- en: IDENTIFYING NETWORK CONFIGURATION ARTIFACTS**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**识别网络配置产物**'
- en: '![Image](Images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common01.jpg)'
- en: The forensic analysis of Linux systems includes examination of networking configuration
    and reconstruction of past network activity. This analysis can be used to understand
    a system breach or compromise, or abuse by local users on the machine. This chapter
    describes common Linux network configurations for both static systems like servers
    and dynamic clients like desktops and roaming laptops. The analysis includes network
    interfaces, assigned IP addresses, wireless networks, attached Bluetooth devices,
    and more. Security coverage includes examining evidence of VPNs, firewalls, and
    proxy settings.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对 Linux 系统的法医分析包括网络配置的检查以及过去网络活动的重建。此分析可以用于了解系统的突破或泄露，或者本地用户在机器上的滥用。本章描述了常见的
    Linux 网络配置，既包括静态系统（如服务器），也包括动态客户端（如桌面和流动笔记本电脑）。分析内容包括网络接口、分配的 IP 地址、无线网络、附加的蓝牙设备等。安全性方面的内容包括检查
    VPN、防火墙和代理设置的证据。
- en: This chapter is not about network forensics, and it does not cover network traffic
    capture or packet analysis. The focus remains on postmortem (“dead disk”) examination
    of Linux systems. However, the topics covered here should complement any independent
    network forensic analysis.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章并非关于网络取证，也不涉及网络流量捕获或数据包分析。重点仍然是对 Linux 系统的事后分析（“死磁盘”）。然而，本章内容应当补充任何独立的网络取证分析。
- en: '**Network Configuration Analysis**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**网络配置分析**'
- en: Networking has always been a fundamental part of Unix, and TCP/IP protocol support
    played a significant role in Unix popularity on the internet. Networking is also
    a core function of the Linux kernel and Linux distros. Early Unix and Linux systems
    had a simple static network configuration that was not expected to change, at
    least not frequently. The configuration could be defined at installation or edited
    in several files.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 网络一直是 Unix 的基础部分，而 TCP/IP 协议支持在 Unix 在互联网中的流行中起到了重要作用。网络同样是 Linux 内核和 Linux
    发行版的核心功能。早期的 Unix 和 Linux 系统有一个简单的静态网络配置，预期不会改变，至少不会频繁变化。配置可以在安装时定义，或通过几个文件进行编辑。
- en: Networking today is more dynamic, and Linux systems, especially mobile systems,
    use network management software to keep the network configuration updated. This
    section provides an introduction to network interfaces and addressing, followed
    by the software that manages network configuration. Artifacts that are of forensic
    interest are highlighted.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如今的网络更加动态，尤其是移动系统，Linux 系统使用网络管理软件来保持网络配置的更新。本节介绍了网络接口和地址配置，随后介绍了管理网络配置的软件。重点突出对法医分析有价值的产物。
- en: '***Linux Interfaces and Addressing***'
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Linux 接口与地址配置***'
- en: Understanding the naming of network devices and network addressing is useful
    in a forensic examination. This knowledge helps the investigator find corresponding
    references to devices and addresses in logs, configuration files, or other persistent
    data.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 理解网络设备的命名和网络地址配置对于法医检查非常有用。这些知识有助于调查人员在日志、配置文件或其他持久化数据中找到相应的设备和地址的参考。
- en: 'During a system boot, the kernel detects and initializes hardware, including
    network devices. As the Linux kernel finds physical network interfaces, it automatically
    assigns generic names (which systemd will later rename). Additional virtual interfaces
    may also be created and configured. Common generic names for interfaces include:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统启动过程中，内核会检测并初始化硬件，包括网络设备。当 Linux 内核找到物理网络接口时，它会自动分配通用名称（之后 systemd 会重命名这些接口）。还可能创建并配置额外的虚拟接口。常见的接口通用名称包括：
- en: '| eth0 | Ethernet |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| eth0 | 以太网 |'
- en: '| wlan0 | Wi-Fi |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| wlan0 | 无线局域网 |'
- en: '| wwan0 | Cellular/Mobile |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| wwan0 | 移动通信/蜂窝 |'
- en: '| ppp0 | Point-to-point protocol |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| ppp0 | 点对点协议 |'
- en: '| br0 | Bridge |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| br0 | 桥接 |'
- en: '| vmnet0 | Virtual machines |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| vmnet0 | 虚拟机 |'
- en: The first three examples here are physical hardware interfaces; the last three
    are virtual. There is a problem when a system has multiple physical interfaces
    of the same type. When the kernel boots, it assigns generic interface names to
    network devices in the order they are detected. This ordering is not always the
    same across reboots, and an Ethernet interface named `eth0` might be named `eth1`
    the next time the system boots. To solve this problem, systemd began renaming
    interfaces (via the `systemd-udevd` service) with a naming convention that is
    consistent across boots and encodes information about the device in the interface
    name.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的前三个示例是物理硬件接口；最后三个是虚拟接口。当系统有多个同类型的物理接口时会出现问题。内核启动时，它会根据设备被检测到的顺序为网络设备分配通用的接口名称。这个顺序在重启时不一定相同，一个名为`eth0`的以太网接口，下一次系统启动时可能会被命名为`eth1`。为了解决这个问题，systemd
    开始通过`systemd-udevd`服务对接口进行重命名，采用一种跨重启一致的命名规则，并且在接口名称中编码设备的信息。
- en: 'A renamed interface begins with a descriptive prefix—for example, `en` for
    Ethernet, `wl` for WLAN, or `ww` for WWAN. The PCI bus is denoted with `p`, the
    PCI slot is denoted with `s`, and the PCI device function (if not zero) is denoted
    with `f`. For example, if a running machine has interfaces `enp0s31f6` and `wlp2s0`,
    we know they are Ethernet (`en`) and Wi-Fi (`wl`), and we can match the PCI bus,
    slot, and function with the `lspci` output^([1](footnotes.xhtml#ch08foot_01))
    like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 重命名的接口以描述性前缀开头——例如，`en`表示以太网，`wl`表示 WLAN，或`ww`表示 WWAN。PCI 总线用`p`表示，PCI 插槽用`s`表示，PCI
    设备功能（如果不为零）用`f`表示。例如，如果运行中的机器有`enp0s31f6`和`wlp2s0`这两个接口，我们知道它们分别是以太网（`en`）和 Wi-Fi（`wl`），并且可以通过`lspci`输出^([1](footnotes.xhtml#ch08foot_01))来匹配
    PCI 总线、插槽和功能，如下所示：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: These are only some of the characters used to denote a device name. For a complete
    description of the systemd device names, see the systemd.net-naming-scheme(7)
    man page.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是用于表示设备名称的一些字符。有关 systemd 设备名称的完整描述，请参见 systemd.net-naming-scheme(7) 手册页。
- en: 'Often, this automatic renaming can lead to long and complex interface names
    (`wwp0s20f0u2i12`, for example); however, these names can be analyzed to understand
    more about the physical hardware. The renaming action can be observed in the kernel
    logs; for example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这种自动重命名可能会导致长且复杂的接口名称（例如`wwp0s20f0u2i12`）；然而，这些名称可以被分析以了解更多关于物理硬件的信息。可以在内核日志中观察到重命名的动作；例如：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, the Ethernet, Wi-Fi, and WWAN interfaces of a laptop have all been renamed
    by `systemd-udevd`. A system administrator can prevent the renaming of interfaces
    with a bootloader kernel flag (`net.ifnames=0`) or by using udev rules (*/etc/udev/rules.d/**).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，笔记本电脑的以太网、Wi-Fi 和 WWAN 接口都已被`systemd-udevd`重命名。系统管理员可以通过引导加载程序内核标志（`net.ifnames=0`）或使用
    udev 规则（*/etc/udev/rules.d/**）来防止接口重命名。
- en: Analyzing a MAC address can provide information about the hardware or lower-layer
    protocols used. Physical interfaces have MAC addresses to identify the machine
    at the link layer of an attached network. These MAC addresses are intended to
    be unique for each network device, and they can be used as identifiers in an investigation.
    Manufacturers define MAC addresses based on address blocks allocated by the IEEE.
    The IEEE Organizationally Unique Identifier (OUI) database (*[https://standards.ieee.org/regauth/](https://standards.ieee.org/regauth/)*)
    lists the MAC address blocks allocated to organizations. The Internet Assigned
    Numbers Authority (IANA) MAC address block (00-00-5E) lists the allocated IEEE
    802 protocol numbers (*[https://www.iana.org/assignments/ethernet-numbers/ethernet-numbers.xhtml](https://www.iana.org/assignments/ethernet-numbers/ethernet-numbers.xhtml)*).
    These are both described in RFC 7042 (*[https://tools.ietf.org/html/rfc7042/](https://tools.ietf.org/html/rfc7042/)*).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 分析 MAC 地址可以提供有关硬件或底层协议的信息。物理接口有 MAC 地址，用于在附加网络的链路层识别机器。这些 MAC 地址对于每个网络设备来说是唯一的，可以作为调查中的标识符。制造商根据
    IEEE 分配的地址块定义 MAC 地址。IEEE 组织唯一标识符（OUI）数据库（*[https://standards.ieee.org/regauth/](https://standards.ieee.org/regauth/)*)
    列出了分配给各个组织的 MAC 地址块。互联网号码分配局（IANA）MAC 地址块（00-00-5E）列出了分配的 IEEE 802 协议号（*[https://www.iana.org/assignments/ethernet-numbers/ethernet-numbers.xhtml](https://www.iana.org/assignments/ethernet-numbers/ethernet-numbers.xhtml)*）。这些都在
    RFC 7042 中进行了描述（*[https://tools.ietf.org/html/rfc7042/](https://tools.ietf.org/html/rfc7042/)*）。
- en: 'The MAC address used will typically be found in the kernel logs when the device
    was first detected. A device’s kernel module logs the MAC address, and log entries
    may look slightly different across devices. Here are a few examples:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的 MAC 地址通常可以在设备首次检测到时的内核日志中找到。设备的内核模块记录了 MAC 地址，日志条目在不同设备之间可能略有不同。以下是一些示例：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, three different kernel modules (`e1000e`, `r8169m`, and `igb`)
    produced kernel logs containing a MAC address.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，三个不同的内核模块（`e1000e`，`r8169m`，和`igb`）生成了包含 MAC 地址的内核日志。
- en: 'The MAC address can be manually modified, randomly generated, or even made
    to spoof another machine. Reasons for MAC address modification may be legitimate
    concerns for personal privacy, deliberate anti-forensic efforts to obscure identity,
    or even attempts to impersonate the identity of another device on a network. MAC
    address randomization is a systemd feature (not used by default), and it’s documented
    in the systemd.link(5) man page. The modification of a MAC address might not be
    visible in the logs, and it may be determined from configuration files (*/etc/systemd/network/*
    .link*), udev rules (*/etc/udev/rules.d/*.rules*), or manually entered commands
    (possibly found in the shell history). The following command example manually
    changes a MAC address:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: MAC 地址可以手动修改、随机生成，甚至伪装成另一台机器的地址。修改 MAC 地址的原因可能是出于个人隐私的合法考虑，故意进行反取证以掩盖身份，或是尝试在网络上冒充另一台设备的身份。MAC
    地址随机化是 systemd 的一项功能（默认未启用），并且在 systemd.link(5) 手册页中有文档说明。修改 MAC 地址可能在日志中不可见，可以通过配置文件（*/etc/systemd/network/*
    .link*）、udev 规则（*/etc/udev/rules.d/*.rules*）或手动输入的命令（可能出现在 Shell 历史记录中）来确定。以下命令示例手动更改
    MAC 地址：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: IP addresses (IPv4 or IPv6), routes, and other network configuration information
    can be statically defined in distro-specific files, dynamically configured by
    network managers, or manually specified with tools such as `ip` (the modern replacement
    for ifconfig). For more information, see the ip(8) man page.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: IP 地址（IPv4 或 IPv6）、路由和其他网络配置信息可以在特定发行版的文件中静态定义，由网络管理器动态配置，或使用如 `ip` 之类的工具手动指定（`ip`
    是 ifconfig 的现代替代品）。有关更多信息，请参阅 ip(8) 手册页。
- en: 'In the context of forensic investigations, previously used IP and MAC addresses
    can be used to reconstruct past events and activity. Places to search for IP and
    MAC addresses on the local machine include:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在法医调查的背景下，之前使用的 IP 地址和 MAC 地址可以用来重建过去的事件和活动。可以在本地机器上搜索 IP 和 MAC 地址的地方包括：
- en: Kernel logs (`dmesg`)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核日志（`dmesg`）
- en: Systemd journal and syslog
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Systemd 日志和 syslog
- en: Application logs
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序日志
- en: Firewall logs
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防火墙日志
- en: Configuration files
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件
- en: Cache and persistent data
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存和持久化数据
- en: Other files in user XDG directories
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户 XDG 目录中的其他文件
- en: Shell history of system administrators
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统管理员的 Shell 历史记录
- en: Many places to look for MAC and IP addresses are not on the local machine, but
    rather on the surrounding infrastructure or remote servers. MAC addresses are
    visible only on a local subnet, so searching for MAC addresses will be limited
    to link-layer infrastructure, such as Wi-Fi access points, DHCP servers, link-layer
    monitoring systems (arpwatch, for example), and other local network switching
    infrastructure. During an ongoing incident, other machines on the same subnet
    may have traces of a suspect machine’s MAC address in their arp caches (mostly
    from broadcast packets). Remote servers will likely retain a significant amount
    of information regarding past IP addresses. Applications and OS components sending
    telemetry data or other network traffic that contains unique identifiers may also
    be logged on the remote infrastructure.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 查找 MAC 和 IP 地址的许多地方不在本地机器上，而是在周围的基础设施或远程服务器上。MAC 地址仅在本地子网中可见，因此查找 MAC 地址将仅限于链路层基础设施，如
    Wi-Fi 接入点、DHCP 服务器、链路层监控系统（例如 arpwatch）和其他本地网络交换基础设施。在正在进行的事件中，同一子网中的其他机器可能会在其
    ARP 缓存中留下嫌疑机器的 MAC 地址痕迹（主要来自广播包）。远程服务器可能会保留大量关于过去 IP 地址的信息。发送遥测数据或包含唯一标识符的其他网络流量的应用程序和操作系统组件，也可能会在远程基础设施中记录。
- en: Within an organization, CERT/SOC/Security teams may have access to further security
    monitoring information to investigate incidents. Within a legal jurisdiction,
    law enforcement agencies may be able to make requests for this information to
    investigate criminal activity.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个组织内，CERT/SOC/安全团队可能可以访问更多的安全监控信息来调查事件。在法律管辖区内，执法机构可能会提出请求以调查犯罪活动。
- en: '***Network Managers and Distro-Specific Configuration***'
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***网络管理器和发行版特定配置***'
- en: Historically, each Linux distribution has managed the network configuration
    in its own way. On server systems, this may change in the future, as systemd provides
    a standard network configuration method using unit files. On client and desktop
    systems, the need for dynamically configured networking (roaming with Wi-Fi or
    mobile protocols) has increased, and network managers have become common.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，每个 Linux 发行版以自己的方式管理网络配置。在服务器系统上，随着 systemd 提供了使用单元文件的标准网络配置方法，未来可能会发生变化。在客户端和桌面系统上，动态配置网络（例如
    Wi-Fi 或移动协议漫游）的需求增加，网络管理器已变得越来越普遍。
- en: 'Debian-based systems configure networking in the */etc/network/interfaces*
    file. This file specifies the network configuration for each interface. An interface
    can be statically configured or use DHCP. IPv4 and IPv6 addresses can be specified
    with static routing, DNS, and more. Here’s an example taken from a */etc/network/interfaces*
    file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 Debian 的系统在 */etc/network/interfaces* 文件中配置网络。该文件指定每个接口的网络配置。接口可以静态配置或使用
    DHCP。可以指定 IPv4 和 IPv6 地址，以及静态路由、DNS 等。以下是来自 */etc/network/interfaces* 文件的示例：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, the interface is configured at boot with a static IPv4 address. The address,
    netmask, and default route are defined. The DNS server and search domain are configured.
    Files containing snippets of configuration can also be stored in the */etc/network/interfaces.d/*
    directory. Other directories in */etc/ network/* are used for pre and post scripts
    to be run when interfaces go up or down. See the interfaces(5) man page for more
    information on a Debian or Debian-based system.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，接口在启动时被配置为静态 IPv4 地址。地址、子网掩码和默认路由被定义。DNS 服务器和搜索域也被配置。包含配置片段的文件也可以存储在 */etc/network/interfaces.d/*
    目录中。*/etc/network/* 中的其他目录用于在接口启动或关闭时运行的前置和后置脚本。有关 Debian 或基于 Debian 系统的更多信息，请参见
    interfaces(5) 手册页。
- en: 'Red Hat and SUSE use the */etc/sysconfig/* directory to store configuration
    files. These files contain variables (`key=value`) and shell commands that can
    be included in other shell scripts or used by unit files during system boot or
    during system administration. The */etc/sysconfig/network-scripts/* and */etc/
    sysconfig/network/* directories contain network configuration files. The following
    example shows a configuration for an `enp2s0` interface:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Red Hat 和 SUSE 使用 */etc/sysconfig/* 目录来存储配置文件。这些文件包含变量（`key=value`）和 shell 命令，可以包含在其他
    shell 脚本中或在系统启动或系统管理过程中由单元文件使用。*/etc/sysconfig/network-scripts/* 和 */etc/ sysconfig/network/*
    目录包含网络配置文件。以下示例展示了一个 `enp2s0` 接口的配置：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this example, the configuration of the `enp2s0` interface is defined. These
    variable-based configuration files are tool independent, and different network
    management tools can use the same set of configuration files. SUSE has also introduced
    Wicked, an alternative network configuration system using a daemon (wickedd) that
    monitors network interfaces and can be controlled over the D-Bus. The */etc/sysconfig/*
    directory is still read and additional XML configuration files are created in
    the */etc/wicked/* directory.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，定义了 `enp2s0` 接口的配置。这些基于变量的配置文件与工具无关，不同的网络管理工具可以使用相同的配置文件集。SUSE 还推出了 Wicked，这是一个替代的网络配置系统，使用一个守护进程（wickedd）来监控网络接口，并可以通过
    D-Bus 控制。*/etc/sysconfig/* 目录仍然会被读取，并且在 */etc/wicked/* 目录中创建了额外的 XML 配置文件。
- en: The Arch Linux project has developed a network management system called netctl,
    which is based on systemd. Arch does not install netctl by default, but it gives
    users the choice to use it or other distro-independent network managers. Netctl
    profiles are stored by name in the */etc/netctl/* directory.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Arch Linux 项目开发了一个名为 netctl 的网络管理系统，它基于 systemd。Arch 默认没有安装 netctl，但它允许用户选择使用它或其他独立于发行版的网络管理器。Netctl
    配置文件按名称存储在 */etc/netctl/* 目录中。
- en: 'Systemd provides network management using three types of network configuration
    files that look similar to unit files. The configuration file typically references
    the network device (eth0 for example) with one of the following extensions:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Systemd 提供了使用三种类似于单元文件的网络配置文件来进行网络管理。配置文件通常引用网络设备（例如 eth0），并具有以下扩展名之一：
- en: '***.link*** Configure physical network devices; Ethernet, for example'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '***.link*** 配置物理网络设备，例如以太网'
- en: '***.netdev*** Configure virtual network devices such as VPNs and tunnels'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '***.netdev*** 配置虚拟网络设备，例如 VPN 和隧道'
- en: '***.network*** Configure the network layer (IPv4, IPv6, DHCP, and so on)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '***.network*** 配置网络层（IPv4、IPv6、DHCP等）'
- en: The systemd-udevd daemon uses *.link* files, and the systemd-networkd daemon
    uses *.netdev* and *.network* files. Default network configuration files provided
    by the distribution or installed packages are found in the */usr/lib/ systemd/network/*
    directory. System administrator custom configurations are found in the */etc/systemd/network/*
    directory. Examining these directories will provide insight into how networking
    was configured using systemd.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: systemd-udevd守护进程使用*.link*文件，systemd-networkd守护进程使用*.netdev*和*.network*文件。发行版或已安装软件包提供的默认网络配置文件位于*/usr/lib/systemd/network/*目录下。系统管理员自定义的配置位于*/etc/systemd/network/*目录下。检查这些目录将帮助你了解如何使用systemd配置网络。
- en: 'The following is an example *.link* file:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个*.link*文件的示例：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this case, the default link configuration is overridden so that interfaces
    get a randomly generated MAC address at boot.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，默认的链接配置被覆盖，因此接口在启动时会获得一个随机生成的MAC地址。
- en: 'Here’s an example *.netdev* file:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个*.netdev*文件的示例：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This simple *.netdev* file defines a bridge interface called `br0`. An interface
    can then be added to the bridge in a *.network* file, as illustrated here:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的*.netdev*文件定义了一个名为`br0`的桥接接口。然后，可以在*.network*文件中将一个接口添加到桥接中，如下所示：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, a static IP address, netmask (`/24`), and default route are defined for
    the `eth1` interface. See the systemd.link(5), systemd.netdev(5), and systemd
    .network(5) man pages for more information.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，为`eth1`接口定义了一个静态IP地址、子网掩码(`/24`)和默认路由。有关更多信息，请参见systemd.link(5)、systemd.netdev(5)和systemd.network(5)手册页。
- en: Many Linux systems use the NetworkManager daemon to manage network configuration,
    especially on desktop systems. The configuration data is located in the */etc/NetworkManager/*
    directory. The *NetworkManager.conf* file holds general configuration information,
    and the individual connections are defined by name in the */etc/NetworkManager/system-connections/*
    directory. For Wi-Fi connections, these files may contain network names and passwords.
    See the NetworkManager(8) and NetworkManager.conf(5) man pages for more details.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 许多Linux系统使用NetworkManager守护进程来管理网络配置，尤其是在桌面系统上。配置数据位于*/etc/NetworkManager/*目录中。*NetworkManager.conf*文件包含一般配置信息，单独的连接按名称定义在*/etc/NetworkManager/system-connections/*目录中。对于Wi-Fi连接，这些文件可能包含网络名称和密码。有关更多细节，请参见NetworkManager(8)和NetworkManager.conf(5)手册页。
- en: '***DNS Resolution***'
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***DNS解析***'
- en: Computer systems on the internet use the domain name system (DNS) to determine
    IP addresses from hostnames and hostnames from IP addresses.^([2](footnotes.xhtml#ch08foot_02))
    This online lookup is called DNS resolution, and Linux machines implement it using
    a mechanism called a *DNS resolver*. Unlike IP addresses and routing, DNS resolution
    is not configured in the kernel, but operates entirely in userspace. The resolver
    functionality is built into the standard C library that uses the */etc/resolv.conf*
    file to specify the local DNS configuration.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网上的计算机系统使用域名系统（DNS）从主机名确定IP地址，并从IP地址确定主机名。^([2](footnotes.xhtml#ch08foot_02))
    这种在线查找被称为DNS解析，Linux机器通过名为*DNS解析器*的机制实现这一过程。与IP地址和路由不同，DNS解析并非在内核中配置，而是在用户空间完全运行。解析器功能是内置在标准C库中的，使用*/etc/resolv.conf*文件来指定本地DNS配置。
- en: 'This configuration file contains a list of DNS name server IP addresses and
    may also contain domain names used by the local system. The IP addresses may be
    IPv4 or IPv6, and refer to DNS servers run by the local network administrators,
    internet service providers (ISPs), or DNS providers. The following is an example
    *resolv.conf* file:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 该配置文件包含DNS名称服务器的IP地址列表，并可能还包含本地系统使用的域名。IP地址可以是IPv4或IPv6，并指向由本地网络管理员、互联网服务提供商（ISP）或DNS提供商运行的DNS服务器。以下是一个*resolv.conf*文件的示例：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, the search domain is appended to simple hostnames and two name servers
    are specified (if the first one is down, the second one is tried). More recent
    resolver implementations facilitate resolution over D-Bus and local sockets.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，搜索域附加到简单的主机名，并指定了两个名称服务器（如果第一个服务器不可用，则尝试第二个）。更现代的解析器实现支持通过D-Bus和本地套接字进行解析。
- en: You can find other options in the resolv.conf(5) man page. Also, an */etc/resolv.conf.bak*
    file may exist that contains settings from previous DNS configurations. The filesystem
    timestamps of the *resolv.conf* file will indicate when the file was generated.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在resolv.conf(5)手册页中找到其他选项。另外，可能存在一个*/etc/resolv.conf.bak*文件，包含之前DNS配置的设置。*resolv.conf*文件的文件系统时间戳将指示该文件何时生成。
- en: As roaming and mobile machines made networking more dynamic, system administrators,
    network managers, daemons, and other programs all wanted to make changes to the
    *resolv.conf* file. This was problematic because one program (or person) would
    sometimes undo the changes made by another, causing confusion. Today, the *resolv.conf*
    file is typically managed using a framework called *resolvconf* .
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 随着漫游和移动设备使得网络变得更加动态，系统管理员、网络管理员、守护进程和其他程序都希望修改*resolv.conf*文件。这导致了问题，因为有时一个程序（或人员）会撤销另一个程序所做的更改，从而造成混乱。如今，*resolv.conf*文件通常通过一个名为*resolvconf*的框架进行管理。
- en: 'Depending on the Linux distribution, the resolvconf framework used may be openresolv
    or systemd’s resolvconf. The systemd-resolved daemon is configured in the */etc/systemd/resolved.conf*
    file; for example:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Linux发行版的不同，使用的resolvconf框架可能是openresolv或systemd的resolvconf。systemd-resolved守护进程在*/etc/systemd/resolved.conf*文件中进行配置；例如：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The systemd-resolved system manages the *resolv.conf* file based on parameters
    in the */etc/systemd/resolved.conf* file, and specifies DNS servers, domains,
    fallback servers, and other DNS resolver configuration. The alternative openresolv
    framework stores its configuration in the */etc/resolvconf.conf* file. See the
    resolvconf(8) man page for more details.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: systemd-resolved系统根据*/etc/systemd/resolved.conf*文件中的参数管理*resolv.conf*文件，并指定DNS服务器、域、后备服务器以及其他DNS解析器配置。替代的openresolv框架将其配置存储在*/etc/resolvconf.conf*文件中。有关更多详细信息，请参阅resolvconf(8)手册页。
- en: Some applications are able to use DNS over HTTPS (DoH) or DNS over TLS (DoT),
    where DNS queries are sent to a DNS provider over an encrypted connection. Many
    modern web browsers provide this feature, which bypasses the local DNS resolver
    system. Be sure to check the browser configuration for alternate DNS providers.
    Systemd currently supports DoT.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一些应用程序能够使用DNS over HTTPS（DoH）或DNS over TLS（DoT），其中DNS查询通过加密连接发送到DNS提供商。许多现代网页浏览器提供此功能，绕过了本地DNS解析系统。请确保检查浏览器配置，以查看是否有替代的DNS提供商。Systemd目前支持DoT。
- en: 'The resolver configuration files are interesting because they provide a link
    between a Linux system and the ISP or DNS provider. The ISP or DNS provider may
    have logs of DNS queries and timestamps available for investigators on request.
    DNS queries logged on DNS servers can provide a wealth of information about the
    activities of a machine, such as the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 解析器配置文件很有趣，因为它们提供了Linux系统与ISP或DNS提供商之间的链接。ISP或DNS提供商可能有DNS查询和时间戳的日志，供调查人员在请求时查阅。DNS服务器上记录的DNS查询可以提供大量关于机器活动的信息，如下所示：
- en: History of websites a user visited (including frequency of repeat visits)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户访问过的网站历史记录（包括重复访问的频率）
- en: Email, messaging, and social media activity (which providers are used and the
    frequency)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子邮件、消息和社交媒体活动（使用的服务提供商及其频率）
- en: Usage of any applications that check for updates or send telemetry requests
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用任何检查更新或发送遥测请求的应用程序
- en: On server systems, reverse DNS^([3](footnotes.xhtml#ch08foot_03)) lookups may
    indicate network connections *to* the Linux system under investigation (the resolved
    FQDNs may be visible in the logs)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在服务器系统上，反向DNS^([3](footnotes.xhtml#ch08foot_03))查找可能表示对正在调查的Linux系统的网络连接（已解析的FQDN可能会在日志中可见）
- en: Any other DNS resource records (MX, TXT, and so on) that have been queried
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何其他已查询的DNS资源记录（MX、TXT等）
- en: Within an organization, CERT/SOC/Security teams may have access to this information
    to investigate security incidents. Within a legal jurisdiction, law enforcement
    agencies may be able to make lawful requests for this information to investigate
    criminal activity.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个组织内，CERT/SOC/安全团队可能有权访问这些信息，以调查安全事件。在某个法律管辖区内，执法机关可能能够依法请求这些信息，以调查犯罪活动。
- en: 'The */etc/nsswitch.conf* file was developed to allow multiple sources of information
    (databases) for users, groups, host lookups, and more. The `hosts:` entry defines
    how lookups are made; for example:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*/etc/nsswitch.conf*文件的开发旨在允许为用户、组、主机查找等多个信息源（数据库）提供支持。`hosts:`条目定义了如何进行查找；例如：'
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, that entry states that the local files (*/etc/hosts*) should be queried
    first, followed by DNS. This line may define conditional statements or other databases.
    See the nsswitch.conf(5) man page for more information.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，该条目表示应该首先查询本地文件（*/etc/hosts*），然后才是 DNS。该行可能定义了条件语句或其他数据库。有关更多信息，请参阅 nsswitch.conf(5)
    手册页。
- en: The */etc/hosts* file predates DNS and is a local table of IP-to-hostname mappings.
    The system will check this file first before it attempts to resolve a hostname
    or IP address using DNS. The *hosts* file is typically used today to configure
    local hostnames and define custom IP/hostname pairs. In a forensic examination,
    this file should be checked for any changes by the system administrator or malicious
    actors.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*/etc/hosts* 文件早于 DNS，是一个本地的 IP 到主机名的映射表。系统在尝试使用 DNS 解析主机名或 IP 地址之前，会首先检查此文件。*hosts*
    文件今天通常用于配置本地主机名和定义自定义的 IP/主机名对。在取证检查中，应检查此文件是否有任何系统管理员或恶意行为者所做的更改。'
- en: Lastly, Avahi is the Linux implementation of Apple’s Zeroconf specification.
    Zeroconf (and therefore Avahi) uses multicast DNS to publish services (like file
    sharing, for example) on a local network. These services are discoverable by other
    clients on the local network. The Avahi configuration is found in */etc/avahi/*
    and the avahi daemon logs activity to the journal (search for logs from avahi-daemon).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Avahi 是 Linux 实现的 Apple Zeroconf 规范。Zeroconf（因此 Avahi）使用多播 DNS 在本地网络上发布服务（例如文件共享）。这些服务可以被本地网络上的其他客户端发现。Avahi
    配置文件位于 */etc/avahi/*，而 avahi 守护进程将活动日志记录到日志系统（搜索 avahi-daemon 的日志）。
- en: '***Network Services***'
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***网络服务***'
- en: Some Linux daemons listen on network interfaces for incoming service requests.
    At the transport layer, this is typically a listening UDP or TCP socket. UDP and
    TCP sockets bind to one or more interfaces and listen on a specified port number.
    In a forensic examination, we are interested in identifying the listening services
    started at boot time and possibly those started during the operation of the machine.
    These services may be normal legitimate services, services run by the system owner
    for abusive purposes, or services started by malicious actors (backdoors, for
    example).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 Linux 守护进程在网络接口上监听传入的服务请求。在传输层，通常是一个监听的 UDP 或 TCP 套接字。UDP 和 TCP 套接字绑定到一个或多个接口，并监听指定的端口号。在取证检查中，我们关心的是识别在启动时启动的监听服务，可能还包括在机器运行过程中启动的服务。这些服务可能是正常的合法服务，系统所有者出于恶意目的运行的服务，或者是恶意行为者启动的服务（例如后门）。
- en: 'Many network services have a daemon permanently running on the system that
    accepts connection requests from remote clients over the network. The configuration
    of these services typically includes the port and interfaces on which to listen.
    This configuration is specified by flags provided to the daemon program binary,
    a configuration file, or compiled-in defaults. Network daemon configuration files
    don’t have a standard syntax, but there are similarities. Here are a few common
    daemons and their associated configuration syntax for listening services:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 许多网络服务有一个守护进程常驻在系统上，接受来自远程客户端通过网络的连接请求。这些服务的配置通常包括监听的端口和接口。该配置由传递给守护进程程序二进制文件的标志、配置文件或编译时的默认值指定。网络守护进程的配置文件没有统一的语法，但存在一些相似之处。以下是一些常见守护进程及其关联的监听服务配置语法：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: These examples show how configuration file syntax is completely different among
    network service daemons. However, they all specify the same things, like port
    numbers (possibly more than one), the address family (IPv4, IPv6, or both), or
    the interface on which to listen (by IP address or network device name).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这些示例展示了不同网络服务守护进程之间的配置文件语法完全不同。然而，它们都指定了相同的内容，如端口号（可能不止一个）、地址族（IPv4、IPv6 或两者），或监听的接口（通过
    IP 地址或网络设备名称）。
- en: On a running system, the `ss` tool (a modern alternative to `netstat`) can show
    all the listening ports together with the name of the daemon. For example, we
    can use `ss -lntup` to show all listening numeric TCP and UDP ports with the listener
    process name. But in a postmortem forensic examination of a filesystem, we have
    only configuration files and logs to determine what was listening. This analysis
    involves examining all the enabled network daemons and individually checking their
    configuration files for listening interfaces or IP addresses (if nothing is defined,
    the compiled-in defaults are used).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行中的系统上，`ss` 工具（`netstat` 的现代替代品）可以显示所有监听端口以及守护进程的名称。例如，我们可以使用 `ss -lntup`
    显示所有监听的数值型 TCP 和 UDP 端口以及监听进程的名称。但是在文件系统的死后取证分析中，我们只有配置文件和日志来确定哪些服务在监听。此分析涉及检查所有启用的网络守护进程，并单独检查它们的配置文件以寻找监听接口或
    IP 地址（如果没有定义，则使用编译时的默认值）。
- en: 'Many services will emit log messages on startup describing how they are listening
    on the machine:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 许多服务在启动时会发出日志消息，描述它们如何在机器上监听：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In these examples, the secure shell daemon (`sshd`) and the Bind DNS server
    (`named`) both logged information about their listening configuration on startup.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些示例中，secure shell 守护进程（`sshd`）和 Bind DNS 服务器（`named`）在启动时都记录了它们的监听配置。
- en: Services bound only to localhost (127.0.0.1 or ::1) are accessible from the
    local machine, but not from attached networks (like the internet). This restricted
    listening is typically done for backend services like databases that are accessed
    by other local daemons, but never intended for remote machines over a network.
    Some incidents involve the misconfiguration of these backend services, which accidentally
    exposes them to the internet where they can be abused or compromised.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 仅绑定到本地主机（127.0.0.1 或 ::1）的服务只能从本地机器访问，而无法从附加网络（如互联网）访问。这种受限监听通常用于后端服务，如数据库，这些服务仅由其他本地守护进程访问，但绝不用于通过网络提供给远程机器。一些事件涉及这些后端服务的配置错误，导致它们意外地暴露到互联网，从而可能被滥用或遭到攻击。
- en: Hosts with more than one network interface are known as *multihomed systems*
    and typically include firewalls, proxy servers, routers, or machines with virtual
    interfaces from VPNs or tunnels. Client programs may have flags or configuration
    defining which interface (or IP) to use as the originating source. For example,
    the `ping` command has the `-I` flag to specify a source IP or interface for ping
    packets. Secure shell (SSH) clients may use the `-b` flag or `bindaddress` directive
    to specify the source IP on a machine with multiple interfaces.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有多个网络接口的主机被称为 *多网卡系统*，通常包括防火墙、代理服务器、路由器或具有虚拟接口的机器，这些接口来自 VPN 或隧道。客户端程序可能具有标志或配置，定义了使用哪个接口（或
    IP）作为来源。例如，`ping` 命令具有 `-I` 标志，用于指定源 IP 或接口。Secure shell (SSH) 客户端可以使用 `-b` 标志或
    `bindaddress` 指令来指定具有多个接口的机器上的源 IP。
- en: In a forensic examination, these flags or configurations can be important because
    they indicate the source IP of established network connections, or the interface
    from where network traffic came. The IP address may correlate with remote logs,
    intrusion detection systems (IDSs), or network forensic analysis.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在取证分析中，这些标志或配置可能很重要，因为它们指示了已建立网络连接的源 IP，或来自哪个接口的网络流量。IP 地址可能与远程日志、入侵检测系统（IDS）或网络取证分析相关联。
- en: Some network services are started on demand using a network-based activation
    mechanism. Traditional Unix-style activation for network services uses a daemon
    called inetd (or xinetd, a popular alternative) that listens on multiple incoming
    TCP and UDP ports and waits to start the appropriate daemon when a connection
    is attempted. A systemd **.socket* file performs similar socket-based activation
    for daemons that are started on demand.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一些网络服务是通过基于网络的激活机制按需启动的。传统的 Unix 风格的网络服务激活使用一个名为 inetd（或 xinetd，一个流行的替代品）的守护进程，它监听多个传入的
    TCP 和 UDP 端口，并在尝试连接时启动相应的守护进程。systemd **.socket** 文件为按需启动的守护进程执行类似的基于套接字的激活。
- en: '**Case Study: Network Backdoor**'
  id: totrans-101
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**案例研究：网络后门**'
- en: 'I’ll conclude this section with a case study of a backdoor implemented using
    systemd socket activation. In this example, two malicious unit files are written
    to a user’s systemd unit directory (*.config/systemd/user/*), providing a socket-activated
    backdoor shell:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我将通过一个使用 systemd 套接字激活实现的后门案例来结束本节。在这个例子中，两个恶意的单元文件被写入用户的 systemd 单元目录（*.config/systemd/user/*），提供了一个通过套接字激活的后门
    shell：
- en: '[PRE14]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If enabled, this *backdoor.socket* file listens on TCP port 6666 and starts
    the *backdoor.service* unit when a connection is received:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用，这个 *backdoor.socket* 文件会监听 TCP 端口 6666，并在收到连接时启动 *backdoor.service* 单元：
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This *backdoor.service* file starts a Bash shell and passes input and output
    (`stdin` and `stdout`) to the connected network client. A remote attacker can
    then access the backdoor with netcat and run shell commands (using CTRL-C to disconnect):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 *backdoor.service* 文件启动一个 Bash Shell，并将输入和输出（`stdin` 和 `stdout`）传递给连接的网络客户端。远程攻击者可以使用
    netcat 访问后门并运行 Shell 命令（使用 CTRL-C 断开连接）：
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When the user is logged in, the backdoor is available and shell commands can
    be run as that user. This backdoor is an example of unauthenticated shell access
    to a Linux machine using socket activation.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户登录时，后门可用，且可以作为该用户运行 Shell 命令。这个后门是一个未经身份验证的 Shell 访问示例，使用套接字激活来访问 Linux 机器。
- en: 'Socket activated services are visible in the journal logs:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 套接字激活服务在日志中可见：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, the first log entry is a message that the listener has started and the
    next two entries show an incoming connection from a remote IP causing the service
    to start. The last entry is the termination of the connection that includes information
    about the TCP session (source and destination ports and IP addresses).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，第一条日志记录是监听器已启动的消息，接下来的两条记录显示了来自远程 IP 的传入连接，导致服务启动。最后一条记录是连接的终止，包括有关 TCP 会话的信息（源和目标端口及
    IP 地址）。
- en: '**Wireless Network Analysis**'
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**无线网络分析**'
- en: The growth of wireless mobile devices and the convenience of wireless technologies
    have led to the implementation of wireless standards in Linux systems. The most
    prevalent include Wi-Fi, Bluetooth, and WWAN mobile technology. Each of these
    three technologies leave traces of evidence on the local system that may be of
    interest to forensic investigators. In addition, the wireless device or infrastructure
    with which the Linux machine connects may also have traces of evidence (Locard’s
    principle applied to wireless technologies).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 无线移动设备的增长和无线技术的便利性促使了无线标准在 Linux 系统中的实现。最常见的包括 Wi-Fi、蓝牙和 WWAN 移动技术。这三种技术中的每一种都会在本地系统上留下取证调查人员可能感兴趣的证据痕迹。此外，Linux
    机器连接的无线设备或基础设施也可能留下证据痕迹（洛卡尔定律适用于无线技术）。
- en: '***Wi-Fi Artifacts***'
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Wi-Fi 痕迹***'
- en: 'The 802.11x Wi-Fi standards allow client computers to connect wirelessly to
    access points (APs), also known as hotspots or base stations. From a forensics
    perspective, we are looking for various artifacts that might be found on the Linux
    system:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 802.11x Wi-Fi 标准允许客户端计算机无线连接到接入点（AP），也称为热点或基站。从取证的角度来看，我们正在寻找可能在 Linux 系统中找到的各种痕迹：
- en: SSID (Service Set IDentifier), the name of connected Wi-Fi networks
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSID（服务集标识符），已连接 Wi-Fi 网络的名称
- en: BSSID (Basic SSID), the MAC address of connected base stations
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BSSID（基本 SSID），已连接基站的 MAC 地址
- en: Passwords to connected Wi-Fi networks
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接的 Wi-Fi 网络的密码
- en: If the Linux system was an AP, the SSID and password
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 Linux 系统是一个 AP，SSID 和密码
- en: If the Linux system was an AP, which clients connected
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 Linux 系统是一个 AP，哪些客户端连接
- en: Other configuration parameters
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他配置参数
- en: We can find these artifacts in configuration files, logs, and other persistent
    cache data.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在配置文件、日志和其他持久性缓存数据中找到这些痕迹。
- en: Computers typically connect to Wi-Fi networks using various forms of authentication
    and security, with WPA2 (Wi-Fi Protected Access 2) being the most popular today.
    Managing WPA2 under Linux requires a daemon to monitor and manage key negotiation,
    authentication, and association/disassociation of the kernel’s Wi-Fi device. The
    wpa_supplicant daemon was originally developed for this purpose in 2003 and has
    been widely used since.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机通常使用各种身份验证和安全形式连接到 Wi-Fi 网络，其中 WPA2（Wi-Fi 保护访问 2）是当前最流行的。管理 Linux 上的 WPA2
    需要一个守护进程来监控和管理密钥协商、身份验证以及内核 Wi-Fi 设备的关联/去关联。wpa_supplicant 守护进程最初于 2003 年为此目的开发，并广泛使用至今。
- en: The iwd daemon was created by Intel and released in 2018 as a modern and simplified
    replacement for wpa_supplicant. Both of these implementations may have configuration
    data, logs, and cached information that can be of interest to forensic examiners.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: iwd 守护进程由英特尔创建，并于 2018 年发布，作为 wpa_supplicant 的现代化简化替代品。这两种实现可能包含配置数据、日志和缓存信息，取证检查员可能对此感兴趣。
- en: 'The `wpa_supplicant` daemon (which is part of the software package called wpa_
    supplicant or wpasupplicant) can store static configuration in */etc/wpa _supplicant.conf*,
    but it is more commonly configured by a network manager dynamically over D-Bus.
    The daemon may log information to the system log; for example:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`wpa_supplicant` 守护进程（属于名为 wpa_supplicant 或 wpasupplicant 的软件包的一部分）可以将静态配置存储在
    */etc/wpa_supplicant.conf* 中，但通常是通过网络管理器动态地通过 D-Bus 进行配置。守护进程可能会将信息记录到系统日志中，例如：'
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this example, a Linux system running `wpa_supplicant` connected to the `Free`
    network and disconnected a few minutes later.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，运行 `wpa_supplicant` 的 Linux 系统连接到了 `Free` 网络，并在几分钟后断开连接。
- en: 'The kernel may log certain activity related to the joining and disconnecting
    of Wi-Fi networks, as shown in the following example:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 内核可能会记录与加入和断开 Wi-Fi 网络相关的某些活动，如下例所示：
- en: '[PRE19]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, the access point’s MAC address is shown with timestamps of when the system
    successfully authenticated.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，接入点的 MAC 地址显示了系统成功认证的时间戳。
- en: The iwd daemon can be controlled over D-Bus by different network managers. The
    configuration file is */etc/iwd/main.conf*, which is documented in the iwd.config(5)
    man page. The */var/lib/iwd/** directory contains a file for each network configured
    using iwd.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: iwd 守护进程可以通过 D-Bus 被不同的网络管理器控制。配置文件是 */etc/iwd/main.conf*，该文件在 iwd.config(5)
    手册页中有文档说明。 */var/lib/iwd/** 目录包含每个使用 iwd 配置的网络的文件。
- en: 'For example, the following is the file for a network called *myfreewifi*:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下是一个名为 *myfreewifi* 的网络文件：
- en: '[PRE20]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The name of the network is part of the filename. The contents of the file contains
    the password to the network and other settings. The file creation timestamp is
    a possible indicator of when the network was first created and joined. The iwd.network(5)
    man page provides more information about the contents of the file.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 网络的名称是文件名的一部分。文件内容包含网络密码及其他设置。文件的创建时间戳可能是网络首次创建并加入的时间指示符。iwd.network(5) 手册页提供了有关文件内容的更多信息。
- en: 'On some distros (such as Red Hat and SUSE), configured Wi-Fi details may be
    found in the */etc/sysconfig/* directory; for example:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些发行版（如 Red Hat 和 SUSE）中，配置的 Wi-Fi 详细信息可能位于 */etc/sysconfig/* 目录中，例如：
- en: '[PRE21]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here the *myhotspot* Wi-Fi network is configured and saved to the *ifcfg-wlan0*
    file, and the password is also in plain view.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，*myhotspot* Wi-Fi 网络被配置并保存到 *ifcfg-wlan0* 文件中，密码也以明文显示。
- en: 'The NetworkManager stores connection information in the directory */etc/ NetworkManager/system-connections/*.
    A file for each connected network is made:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: NetworkManager 将连接信息存储在 */etc/ NetworkManager/system-connections/* 目录中。每个连接网络都有一个文件：
- en: '[PRE22]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This shows the Wi-Fi network details, including a timestamp of when the network
    was first configured, SSID name, BSSID MAC address, and more. Depending on the
    configuration a password may also be found.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了 Wi-Fi 网络的详细信息，包括网络首次配置的时间戳、SSID 名称、BSSID MAC 地址等。根据配置，可能还会找到密码。
- en: 'In addition, the NetworkManager saves information in the directory */var/lib/NetworkManager/*,
    where you may find DHCP lease files containing information about obtained leases
    from various interfaces, as shown here:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，NetworkManager 会将信息保存到 */var/lib/NetworkManager/* 目录，你可以在这里找到 DHCP 租约文件，里面包含从各个接口获得的租约信息，如下所示：
- en: '[PRE23]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The creation (birth) timestamp of the file indicates when the lease was given
    by the DHCP server, and the file called *timestamps* contains a list of leases
    with an identifier associated with a lease filename and a numeric timestamp:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的创建（出生）时间戳表示DHCP服务器分配租约的时间，名为 *timestamps* 的文件包含一个租约列表，其中每个租约都与一个租约文件名和一个数字时间戳相关联：
- en: '[PRE24]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Also, a list of BSSIDs (MAC addresses) that were seen is recorded in the *seen-bssids*
    files:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，记录了曾经见到的 BSSID（MAC 地址）列表，保存在 *seen-bssids* 文件中：
- en: '[PRE25]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: A Wi-Fi network (with the same SSID) may consist of multiple BSSIDs.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Wi-Fi 网络（具有相同 SSID）可能包含多个 BSSID。
- en: '**Linux Access Points**'
  id: totrans-148
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**Linux 访问点**'
- en: 'If a Linux system was used as an access point, it was most likely using the
    hostapd software package. Check whether the hostapd package is installed and whether
    it was enabled to run as a systemd service. The hostapd configuration files are
    usually located in */etc/hostapd/**, and the *hostapd.conf* file contains the
    configuration of the Wi-Fi network(s) being provided, such as in this example:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用 Linux 系统作为接入点，它最有可能使用 hostapd 软件包。检查是否安装了 hostapd 包，以及它是否被启用作为 systemd
    服务运行。hostapd 配置文件通常位于 */etc/hostapd/**，而 *hostapd.conf* 文件包含提供的 Wi-Fi 网络的配置，如下所示：
- en: '[PRE26]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The Wi-Fi network name and password are shown, it’s a hidden network (broadcast
    ignored), and the region is specified (regulatory compliance). The original *hostapd.conf*
    file is well commented with further parameter examples, and more information can
    be found at *[https://w1.fi/hostapd/](https://w1.fi/hostapd/)*.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 显示了 Wi-Fi 网络名称和密码，它是一个隐藏网络（广播被忽略），并指定了区域（符合监管要求）。原始的 *hostapd.conf* 文件有详细的注释，提供了更多的参数示例，更多信息可以在
    *[https://w1.fi/hostapd/](https://w1.fi/hostapd/)* 查找。
- en: 'A password can also be stored in password-based key derivation function (PBKDF2)
    format, in which case recovery is difficult, but it can be attempted with password
    recovery tools. Pre-shared key (PSK) strings in *hostapd.conf* look like this:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 密码也可以以基于密码的密钥派生函数（PBKDF2）格式存储，在这种情况下，恢复较为困难，但可以尝试使用密码恢复工具。*hostapd.conf* 中的预共享密钥（PSK）字符串如下所示：
- en: '[PRE27]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This string does not reveal the password, but it is sufficient to gain access
    to a Wi-Fi network. The password might be found on another client device attached
    to the same network.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这个字符串并没有揭示密码，但足以访问 Wi-Fi 网络。密码可能在附加到同一网络的另一个客户端设备上找到。
- en: 'There are several places to look for MAC addresses of clients connecting to
    a hostapd access point. Hostapd writes logs to syslog by default, and the MAC
    addresses of other clients connecting and disconnecting may be found:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 有多个地方可以查找连接到 hostapd 接入点的客户端的 MAC 地址。Hostapd 默认将日志写入 syslog，连接和断开连接的其他客户端的 MAC
    地址可能会在其中找到：
- en: '[PRE28]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Another place to look for possible MAC addresses is in the accept and deny files.
    If used, the location of these files is defined with the `accept_mac_file=` and
    `deny_mac_file=` parameters in the configuration. These files contain a list of
    MAC addresses that the administrator has explicitly allowed or blocked. These
    MAC addresses could be meaningful in a forensic investigation.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可能包含 MAC 地址的地方是 accept 和 deny 文件。如果使用这些文件，它们的位置通过配置中的 `accept_mac_file=`
    和 `deny_mac_file=` 参数来定义。这些文件包含管理员明确允许或阻止的 MAC 地址列表，这些 MAC 地址在取证调查中可能具有意义。
- en: '***Bluetooth Artifacts***'
  id: totrans-158
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***蓝牙痕迹***'
- en: Bluetooth under Linux is achieved using a combination of kernel modules, daemons,
    and utilities. The Bluetooth subsystem retains multiple forensic artifacts that
    can be analyzed and associated with separate physical devices. Evidence of a Bluetooth
    device paired with a Linux system may be useful in an investigation.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 下的蓝牙是通过组合内核模块、守护进程和实用程序实现的。蓝牙子系统保留了多个取证痕迹，这些痕迹可以被分析并与不同的物理设备关联。蓝牙设备与 Linux
    系统配对的证据可能对调查有所帮助。
- en: 'Information about current and previously paired Bluetooth devices is found
    in the */var/lib/bluetooth/* directory. There is an initial subdirectory named
    after the MAC address of the locally installed Bluetooth adapter:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 关于当前和先前配对的蓝牙设备的信息可以在 */var/lib/bluetooth/* 目录中找到。这里有一个名为本地安装的蓝牙适配器的 MAC 地址的初始子目录：
- en: '[PRE29]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The creation (birth) timestamp of this directory indicates when the adapter
    was first installed. If the Bluetooth adapter is on the mainboard, it will likely
    match the time of the distro installation. If a USB Bluetooth adapter was used,
    the creation time will indicate when it was first plugged in.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 该目录的创建（出生）时间戳表明了适配器首次安装的时间。如果蓝牙适配器在主板上，它很可能与发行版安装时间匹配。如果使用了 USB 蓝牙适配器，则创建时间将显示首次插入的时间。
- en: 'This local adapter device directory contains further directories and a *settings*
    file:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这个本地适配器设备目录包含更多的子目录和一个 *settings* 文件：
- en: '[PRE30]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The *settings* file provides information about the discoverability. The MAC
    address directories are named after the currently paired devices. The *cache/*
    directory contains files named after current and previously paired device MAC
    addresses:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*settings* 文件提供关于可发现性的信息。MAC 地址目录以当前配对的设备命名。*cache/* 目录包含以当前和先前配对的设备 MAC 地址命名的文件：'
- en: '[PRE31]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: These files include Bluetooth devices that the user has deleted from the paired
    devices list in the past.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件包括用户过去从配对设备列表中删除的蓝牙设备。
- en: 'The MAC address directories contain one or more files. An *info* file provides
    more information about the paired device:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: MAC 地址目录包含一个或多个文件。*info* 文件提供关于配对设备的更多信息：
- en: '[PRE32]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This shows the device MAC address (in the directory name), a description of
    the device and its services, and more.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了设备的 MAC 地址（在目录名称中）、设备及其服务的描述等信息。
- en: 'The *cache/* directory is potentially more interesting from a historical perspective,
    as it contains both currently paired devices and previously paired devices. The
    files may have less information than the paired device *info* files, but a simple
    `grep` in the cache directory can show a list of previously used devices:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史角度来看，*cache/* 目录可能更为有趣，因为它包含了当前配对的设备和之前配对的设备。文件的信息可能不如配对设备的 *info* 文件丰富，但简单地在缓存目录中使用
    `grep` 可以列出以前使用过的设备：
- en: '[PRE33]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The creation (birth) timestamps of these files may indicate when the device
    was paired with the Linux system.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件的创建（出生）时间戳可能表明设备与 Linux 系统配对的时间。
- en: 'The reconstruction of paired devices is interesting, but so is the actual usage
    of those paired devices. Depending on the device type and Bluetooth services used,
    that usage may be revealed in the logs:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 配对设备的重建很有趣，但那些配对设备的实际使用也同样值得关注。根据设备类型和所使用的蓝牙服务，这些使用情况可能会在日志中显现出来：
- en: '[PRE34]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: These logs indicate that the previously identified `[Samsung] R3` device was
    connected for 17 minutes.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这些日志表明，之前识别的 `[Samsung] R3` 设备已连接 17 分钟。
- en: Additional device-specific fields and files (attributes) may exist for each
    MAC address. Depending on the device and the relevance to an investigation, they
    may require additional scrutiny.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 MAC 地址可能存在附加的设备特定字段和文件（属性）。根据设备和调查的相关性，可能需要额外的审查。
- en: '***WWAN Artifacts***'
  id: totrans-178
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***WWAN 遗留文件***'
- en: Many laptops today are able access mobile networks (3G/4G/5G, and so on) using
    an internal modem or plug-in USB device, together with a SIM card provided by
    the carrier. Linux supports these mobile technologies, and traces of activity
    can be found in local configuration files, databases, and logs.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在许多笔记本电脑能够通过内置调制解调器或插入式 USB 设备访问移动网络（如 3G/4G/5G 等），并使用运营商提供的 SIM 卡。Linux 支持这些移动技术，可以在本地配置文件、数据库和日志中找到活动的痕迹。
- en: 'There are several ways a Linux system interfaces with mobile modems:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 系统与移动调制解调器交互的方式有多种：
- en: 'Legacy serial devices: */dev/ttyUSB** controlled with AT commands'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传统串行设备：*/dev/ttyUSB** 通过 AT 命令进行控制
- en: 'USB communications device class (CDC) devices: */dev/cdc-wdm** controlled with
    a binary protocol^([4](footnotes.xhtml#ch08foot_04))'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB 通信设备类（CDC）设备：*/dev/cdc-wdm** 通过二进制协议进行控制^([4](footnotes.xhtml#ch08foot_04))
- en: 'PCIe devices: */dev/wwan** controlled over the modem host interface (MHI)^([5](footnotes.xhtml#ch08foot_05))'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PCIe 设备：*/dev/wwan** 通过调制解调器主机接口（MHI）进行控制^([5](footnotes.xhtml#ch08foot_05))
- en: Once the mobile connection is authenticated, authorized, and established, the
    network interface can be configured. Common network interface names include `ppp*`
    (for legacy modems), `wwan*`, `ww*` (for renamed interfaces), and `mhi*` (for
    MHI based PCIe modems). The modem device names and network interfaces can be found
    in the logs and may reveal connectivity to mobile infrastructure.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦移动连接经过认证、授权并建立，网络接口就可以进行配置。常见的网络接口名称包括 `ppp*`（用于传统调制解调器）、`wwan*`、`ww*`（用于重命名接口）和
    `mhi*`（用于基于 MHI 的 PCIe 调制解调器）。调制解调器设备名称和网络接口可以在日志中找到，并可能揭示与移动基础设施的连接。
- en: 'The next few examples show an integrated USB modem using the MBIM protocol
    to connect to a mobile network. Here, the modem device is detected by the kernel
    and a `wwan0` network device is created:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 以下几个例子展示了一个使用 MBIM 协议连接到移动网络的集成 USB 调制解调器。此时，调制解调器设备被内核检测到，并创建了一个 `wwan0` 网络设备：
- en: '[PRE35]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The ModemManager daemon then takes over the management of the device and setting
    up the mobile connection:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，ModemManager 守护进程接管设备的管理和移动连接的设置：
- en: '[PRE36]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Here, the ModemManager logs several state changes. It enables the modem, searches
    for the provider and home network, registers the device, and connects to the network.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，ModemManager 记录了几个状态变化。它启用了调制解调器，搜索提供商和家庭网络，注册设备，并连接到网络。
- en: 'After the device is connected at the modem layer, the NetworkManager takes
    over, requesting and configuring the IP network (IP addresses, routing, and DNS):'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在设备在调制解调器层连接后，NetworkManager 接管了任务，请求并配置了 IP 网络（IP 地址、路由和 DNS）：
- en: '[PRE37]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The mobile provider gives the mobile interface an IP address, default gateway,
    and DNS servers. By default, the kernel and ModemManager don’t log mobile identifier
    information such as the IMSI or IMEI. Depending on regional regulatory requirements,
    this connection information may be logged by the mobile provider.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 移动服务提供商为移动接口分配 IP 地址、默认网关和 DNS 服务器。默认情况下，内核和 ModemManager 不会记录移动标识符信息，如 IMSI
    或 IMEI。根据地区的监管要求，移动服务提供商可能会记录这些连接信息。
- en: 'Some Linux systems may have the *Modem Manager GUI* installed that can send
    and receive SMS text messages and USSD commands. The Modem Manager GUI stores
    SMS messages in a GNU database (`sms.gdbm`) in the user’s home directory with
    a unique device identifier for a directory name:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 Linux 系统可能安装了 *Modem Manager GUI*，它可以发送和接收 SMS 短信消息和 USSD 命令。Modem Manager
    GUI 将 SMS 消息存储在用户主目录下的 GNU 数据库（`sms.gdbm`）中，并使用唯一的设备标识符作为目录名：
- en: '[PRE38]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This file can be dumped with the `gdbm_dump` tool (part of the gdbm package),
    but the `strings` command will also produce readable output:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `gdbm_dump` 工具（gdbm 包的一部分）转储此文件，但 `strings` 命令也会生成可读的输出：
- en: '[PRE39]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Each SMS message is shown within the `<text>` tags. The phone numbers and times^([6](footnotes.xhtml#ch08foot_06))
    are shown, and the `<read>` tag indicates if an incoming message was read or not.
    The folder numbers represent incoming messages (`0`), sent messages (`1`), and
    draft messages (`2`). More information can be found at *[https://sourceforge.net/projects/modem-manager-gui/](https://sourceforge.net/projects/modem-manager-gui/)*.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 每条短信消息都显示在`<text>`标签内。显示了电话号码和时间^([6](footnotes.xhtml#ch08foot_06))，`<read>`标签表示消息是否已读。文件夹编号代表接收的消息（`0`）、已发送的消息（`1`）和草稿消息（`2`）。更多信息可以在*[https://sourceforge.net/projects/modem-manager-gui/](https://sourceforge.net/projects/modem-manager-gui/)*找到。
- en: '**Network Security Artifacts**'
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**网络安全工件**'
- en: The topic of network security involves protecting the perimeter of a system
    with firewalls and protecting the privacy and integrity of network traffic. The
    following sections describe common firewalls and VPNs under Linux and how to analyze
    the logs, configuration, and other persistent information that may be of interest
    in a forensic investigation. Focus will be especially given to (relatively) new
    technologies such as NFTables and WireGuard. The SSH protocol also provides a
    layer of network security (see [Chapter 10](ch10.xhtml)).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 网络安全的主题涉及通过防火墙保护系统的边界，并保护网络流量的隐私和完整性。以下部分描述了 Linux 下常见的防火墙和 VPN，以及如何分析日志、配置和其他可能在取证调查中感兴趣的持久化信息。重点将特别放在（相对较）新的技术，如
    NFTables 和 WireGuard。SSH 协议也提供了一层网络安全（见 [第 10 章](ch10.xhtml)）。
- en: '***WireGuard, IPsec, and OpenVPN***'
  id: totrans-200
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***WireGuard、IPsec 和 OpenVPN***'
- en: 'WireGuard is a relative newcomer to the VPN landscape. It was originally developed
    for Linux by Jason Donenfeld and is now a default part of the kernel. WireGuard
    was designed for simplicity, and implemented as a kernel module that creates a
    virtual interface. The interface behaves like any other network interface: it
    can be brought up or down, be firewalled, route traffic, or be queried with standard
    network interface tools. A packet sniffer like tcpdump or Wireshark can also be
    used to capture network traffic.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: WireGuard 是 VPN 领域中的相对新手。它最初由 Jason Donenfeld 为 Linux 开发，现在已成为内核的默认部分。WireGuard
    旨在简化实现，并作为一个内核模块创建一个虚拟接口。该接口像其他任何网络接口一样：可以启用或禁用、防火墙保护、路由流量，或者通过标准网络接口工具查询。像 tcpdump
    或 Wireshark 这样的包嗅探器也可以用来捕获网络流量。
- en: WireGuard is a point-to-point tunnel-mode VPN, encapsulating IP packets inside
    UDP and transmitting them to configured peers. Modern cryptographic protocols
    (such as Curve, ChaCha, and so on) are used, and the key management is in-band.
    Its ease of use, performance, and stealthy behavior are making WireGuard popular
    among hobbyists, researchers, and the hacking community.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: WireGuard 是一种点对点隧道模式的 VPN，将 IP 数据包封装在 UDP 内，并将其传输到配置好的对等方。使用了现代的加密协议（如 Curve、ChaCha
    等），且密钥管理是带内进行的。其易用性、性能和隐蔽性使 WireGuard 在爱好者、研究人员和黑客社区中非常受欢迎。
- en: WireGuard interfaces can be arbitrarily named by the system owner, but `wg0`
    is most commonly used. References to this device may be found in configuration
    files and logs wherever you would use other network interface names (like `eth0`
    and so on).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: WireGuard 接口可以由系统所有者随意命名，但`wg0`是最常用的。可以在配置文件和日志中找到对该设备的引用，就像你使用其他网络接口名称（如`eth0`）一样。
- en: 'Each WireGuard interface typically has one configuration file that contains
    a private key, public keys of all peers, IP addresses of endpoints, and allowed
    IP ranges. The WireGuard configuration information is usually found in one of
    several places:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 WireGuard 接口通常有一个配置文件，其中包含私钥、所有对等方的公钥、端点的 IP 地址以及允许的 IP 范围。WireGuard 配置信息通常可以在以下几个位置找到：
- en: The WireGuard default file, */etc/wireguard/wg0.conf*
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WireGuard 默认文件，*/etc/wireguard/wg0.conf*
- en: A systemd *.netdev* file like */etc/systemd/network/wg0.netdev*
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 systemd *.netdev* 文件，例如 */etc/systemd/network/wg0.netdev*
- en: A NetworkManager file like */etc/NetworkManager/system-connections/ Wireguard
    connection 1*
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个类似于 */etc/NetworkManager/system-connections/ Wireguard connection 1* 的 NetworkManager
    文件。
- en: 'The */etc/wireguard/* directory may have one or more configuration files named
    after the interface. The files look like this:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '*/etc/wireguard/* 目录可能包含一个或多个以接口名称命名的配置文件。文件内容如下：'
- en: '[PRE40]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The `[Interface]` section describes the local machine, and the `[Peer]` section(s)
    describe the trusted peers (there can be more than one peer).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`[Interface]` 部分描述了本地机器，`[Peer]` 部分描述了可信对等体（可能有多个对等体）。'
- en: 'Systemd supports WireGuard configuration in a .*netdev* file, as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Systemd 支持在 .*netdev* 文件中配置 WireGuard，如下所示：
- en: '[PRE41]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: An associated *.network* file may be needed to configure the IP address of the
    interface.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 可能需要一个关联的 *.network* 文件来配置接口的 IP 地址。
- en: 'The NetworkManager daemon has a VPN plug-in for WireGuard and can be configured
    alongside other VPNs:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: NetworkManager 守护进程为 WireGuard 提供了一个 VPN 插件，并且可以与其他 VPN 配置一起使用：
- en: '[PRE42]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The WireGuard configuration follows the NetworkManager file format described
    earlier in this chapter.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: WireGuard 配置遵循本章前面描述的 NetworkManager 文件格式。
- en: The software package *wireguard-tools* provides documentation, systemd unit
    files, and tools for configuring WireGuard. The `wg-quick` script was created
    for easy command line use. Forensic investigators should examine the shell history
    for evidence of manual use of the `wg` and `wg-quick` tools.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 软件包 *wireguard-tools* 提供了文档、systemd 单元文件和配置 WireGuard 的工具。`wg-quick` 脚本用于简化命令行操作。取证调查人员应检查
    shell 历史记录，以寻找手动使用 `wg` 和 `wg-quick` 工具的证据。
- en: WireGuard’s configuration provides several artifacts that may be interesting
    from a forensics perspective. The IP addresses used for the `wg0` interface may
    be found in both the local and the remote peer’s logs or configuration. The public
    keys of peers provide a cryptographic association between multiple machines (increased
    strength of evidence). The allowed IP list describes a range of IP addresses expected
    to exist behind the remote peer (possible routed networks). These IPs may also
    appear in the logs and may be of significance. All of these artifacts are helpful
    in reconstructing a VPN network setup.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: WireGuard 的配置提供了几个从取证角度可能感兴趣的痕迹。`wg0` 接口使用的 IP 地址可能出现在本地和远程对等体的日志或配置中。对等体的公钥为多个机器之间提供了加密关联（增强证据的有效性）。允许的
    IP 列表描述了预期在远程对等体后面存在的 IP 地址范围（可能是路由的网络）。这些 IP 地址也可能出现在日志中，并且可能具有重要意义。所有这些痕迹对重建
    VPN 网络设置非常有帮助。
- en: IPsec is an IETF standard, and the associated protocols are documented in dozens
    of RFCs. IPsec operates in either tunnel-mode (encrypting whole packets) or transport-mode
    (encrypting just payloads). IPsec is a standard part of the kernel that can encrypt
    and authenticate traffic, but userspace tools and daemons are needed for configuration
    and key management. Out-of-band key management is performed using Internet Key
    Exchange (IKE), a daemon provided independently by various implementations.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: IPsec 是一个 IETF 标准，相关协议在几十个 RFC 中有文档说明。IPsec 可以在隧道模式（加密整个数据包）或传输模式（仅加密负载）下运行。IPsec
    是内核的标准部分，可以加密和认证流量，但需要用户空间工具和守护进程来进行配置和密钥管理。带外密钥管理使用 Internet 密钥交换（IKE）执行，这是由各种实现独立提供的守护进程。
- en: The three most current IPsec implementations for Linux are StrongSwan (*[https://www.strongswan.org/](https://www.strongswan.org/)*),
    Openswan (*[https://www.openswan.org/](https://www.openswan.org/)*), and Libreswan
    (*[https://libreswan.org/](https://libreswan.org/)*). These implementations store
    configuration data on the local system and log various usage. Check locally installed
    packages and associated directories in */etc/* for the existence of these IPsec
    implementations. If they have been installed, the configuration and logs can be
    analyzed to understand usage and recover interesting forensic artifacts.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 当前 Linux 系统中最常用的三种 IPsec 实现是 StrongSwan (*[https://www.strongswan.org/](https://www.strongswan.org/)*),
    Openswan (*[https://www.openswan.org/](https://www.openswan.org/)*), 和 Libreswan
    (*[https://libreswan.org/](https://libreswan.org/)*)。这些实现将配置数据存储在本地系统上，并记录各种使用情况。检查本地安装的软件包和相关目录（位于
    */etc/*）以确认这些 IPsec 实现是否存在。如果已安装，可以分析配置文件和日志，以了解使用情况并恢复感兴趣的取证痕迹。
- en: OpenVPN (*[https://openvpn.net/](https://openvpn.net/)*) was originally developed
    as a TLS-based userspace competitor to IPsec. OpenVPN is the name of both the
    commercial company and the open source project. OpenVPN’s advantage is not performance,
    but ease of use. Another difference from IPsec is its focus on authenticating
    people rather than machines to allow network access to protected networks.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN (*[https://openvpn.net/](https://openvpn.net/)*) 最初作为基于TLS的用户空间竞争者开发，用于替代IPsec。OpenVPN既是商业公司的名称，也是开源项目的名称。OpenVPN的优势不在于性能，而在于易用性。与IPsec的另一个不同之处在于它侧重于认证用户而非机器，以允许访问受保护的网络。
- en: The `openvpn` program (installed as part of the openvpn package) can run as
    a client or server, depending on the startup flags used. Configuration data can
    be found in the */etc/openvpn/client/* or */etc/openvpn/server/* directories.
    See the openvpn(8) man page for more information. The NetworkManager daemon has
    an OpenVPN plug-in and may have a separate configuration file (or files) in the
    */etc/NetworkManager/* directory.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`openvpn`程序（作为openvpn软件包的一部分安装）可以作为客户端或服务器运行，具体取决于使用的启动标志。配置数据可以在*/etc/openvpn/client/*或*/etc/openvpn/server/*目录中找到。有关更多信息，请参阅openvpn(8)手册页。NetworkManager守护进程有一个OpenVPN插件，并且可能在*/etc/NetworkManager/*目录中有一个单独的配置文件（或多个文件）。'
- en: '***Linux Firewalls and IP Access Control***'
  id: totrans-223
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Linux防火墙与IP访问控制***'
- en: Linux has a long history of firewall support and has made many significant changes
    to the kernel firewall subsystem over time (nftables replaced iptables, which
    replaced ipchains, which replaced ipfwadm). The most recent major change was the
    replacement of iptables with nftables.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Linux拥有悠久的防火墙支持历史，并且随着时间的推移对内核防火墙子系统进行了许多重大更改（nftables取代了iptables，iptables取代了ipchains，ipchains取代了ipfwadm）。最近的重大变化是用nftables替换了iptables。
- en: Linux also has a basic firewall functionality called Berkeley Packet Filter
    (BPF), which is often used for filtering by process or systemd unit. Other IP
    filtering is done in the form of userspace access control lists for network-facing
    applications. Depending on the context of a forensic investigation, an examination
    of firewall controls (or lack thereof) may be important.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: Linux还具有一种基本的防火墙功能，称为伯克利数据包过滤器（BPF），通常用于按进程或systemd单元进行过滤。其他IP过滤则以面向网络应用程序的用户空间访问控制列表的形式进行。根据法医调查的背景，检查防火墙控制（或缺乏控制）可能非常重要。
- en: Linux network firewalling is done in the kernel. Userspace tools and daemons
    can manage the firewall (and other network components), but they only pass configuration
    information to the kernel. To remain persistent, the firewall rules must also
    be added to the kernel on boot. Firewall logging is done through the kernel’s
    ring buffer, as described in [Chapter 5](ch05.xhtml).
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: Linux网络防火墙功能是在内核中实现的。用户空间的工具和守护进程可以管理防火墙（以及其他网络组件），但它们只是将配置信息传递给内核。为了保持持久性，防火墙规则还必须在启动时添加到内核中。防火墙日志记录通过内核的环形缓冲区完成，如[第5章](ch05.xhtml)所述。
- en: The nftables firewall functionality is a significant upgrade to the old iptables
    system, and all distros and tools are replacing the legacy iptables with it (compatibility
    scripts make this easy). In addition, nftables combines IPv4, IPv6, and MAC address
    filtering into a single configuration file and allows multiple actions per rule.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: nftables防火墙功能是对旧的iptables系统的重大升级，所有发行版和工具都在用它替代传统的iptables（兼容脚本使这一过程变得简单）。此外，nftables将IPv4、IPv6和MAC地址过滤整合到一个配置文件中，并允许每条规则执行多个操作。
- en: 'If configured by hand (on servers, for example), the typical nftables configuration
    location is in the */etc/nftables.conf* file or an */etc/nftables/* directory.
    This file is typically loaded by a systemd unit, either automatically at boot
    or manually after changes have been made. Here is an example configuration file:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果手动配置（例如在服务器上），典型的nftables配置文件位置是在*/etc/nftables.conf*文件或*/etc/nftables/*目录中。此文件通常由systemd单元加载，可以在启动时自动加载，也可以在更改后手动加载。以下是一个配置文件示例：
- en: '[PRE43]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The kernel firewall in this example is configured to allow outgoing connections
    (including return packets), allow incoming `ping` and `ssh`, and block the rest
    (and prevent routing). The comments in the file explain the rules. See the nft(8)
    man page for more information about nftables rules.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例中的内核防火墙配置为允许传出连接（包括返回的数据包），允许传入的`ping`和`ssh`连接，并阻止其余流量（并防止路由）。文件中的注释解释了这些规则。有关nftables规则的更多信息，请参阅nft(8)手册页。
- en: Linux distros may have their own mechanism for managing firewall rules. Ubuntu
    uses Uncomplicated FireWall (UFW) to specify rules that are passed to iptables/nftables.
    Configuration and firewall rule files are located in the */etc/ufw/* directory.
    The `ENABLED=` setting in *ufw.conf* indicates whether the firewall is active.
    If logging is enabled, UFW will log to syslog, which may save logs to */var/log/ufw.log*
    (if rsyslog is configured).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 发行版可能有自己的机制来管理防火墙规则。Ubuntu 使用 Uncomplicated FireWall (UFW) 来指定传递给 iptables/nftables
    的规则。配置和防火墙规则文件位于 */etc/ufw/* 目录中。*ufw.conf* 文件中的 `ENABLED=` 设置指示防火墙是否处于活动状态。如果启用了日志记录，UFW
    会将日志记录到 syslog 中，这可能会将日志保存到 */var/log/ufw.log*（如果配置了 rsyslog）。
- en: Fedora/Red Hat and SUSE use firewalld to configure nftables (SUSE replaced its
    old SuSEfirewall2 system in SLES15). The firewalld daemon is enabled in systemd,
    and configuration is found in the */etc/firewalld/* directory. If logging is enabled,
    logs are written to */var/log/firewalld*. All these distro-specific rule management
    systems (scripts or GUIs) ultimately just add rules to nftables in the kernel.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: Fedora/Red Hat 和 SUSE 使用 firewalld 配置 nftables（SUSE 在 SLES15 中用 firewalld 替代了其旧的
    SuSEfirewall2 系统）。firewalld 守护进程在 systemd 中启用，配置文件位于 */etc/firewalld/* 目录。如果启用了日志记录，日志将写入
    */var/log/firewalld*。所有这些发行版特有的规则管理系统（脚本或 GUI）最终只是将规则添加到内核中的 nftables。
- en: Some firewall rules may be dynamically created by security software or intrusion
    prevention systems (IPSs) reacting to malicious activity. For instance, the fail2ban
    software package runs a daemon that monitors various logfiles for brute-force
    attacks. If a malicious IP address is detected, it is temporarily banned using
    iptables or nftables. Banned IP addresses from fail2ban are logged. Other similar
    IPS software (sshguard is an alternative to fail2ban) may also be running on a
    system and logging malicious activity.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 一些防火墙规则可能是由安全软件或入侵防御系统（IPS）根据恶意活动动态创建的。例如，fail2ban 软件包运行一个守护进程，监视各种日志文件以检测暴力破解攻击。如果检测到恶意的
    IP 地址，它将通过 iptables 或 nftables 临时封禁该地址。fail2ban 会记录被封禁的 IP 地址。其他类似的 IPS 软件（例如
    sshguard，是 fail2ban 的替代方案）也可能在系统上运行并记录恶意活动。
- en: Systemd unit files may contain directives that perform access IP control. Depending
    on the unit type, the directives `IPAddressAllow=` and `IPAddressDeny=` may be
    found in the `[Slice]`, `[Scope]`, `[Service]`, `[Socket]`, `[Mount]`, or `[Swap]`
    sections of a unit file. This systemd feature does not use nftables, but rather
    the extended Berkeley Packet Filter (eBPF), which is also part of the kernel.
    See the systemd.resource-control(5) man page for more information.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: Systemd 单元文件可能包含执行访问 IP 控制的指令。根据单元类型，可以在单元文件的 `[Slice]`、`[Scope]`、`[Service]`、`[Socket]`、`[Mount]`
    或 `[Swap]` 部分中找到指令 `IPAddressAllow=` 和 `IPAddressDeny=`。这个 systemd 特性并不使用 nftables，而是使用扩展的伯克利数据包过滤器（eBPF），它也是内核的一部分。有关更多信息，请参阅
    systemd.resource-control(5) 手册页。
- en: Applications may configure their own filter controls, where IP access decisions
    are made by userspace processes (not in the kernel). A traditional way of doing
    this is with */etc/hosts.allow* and */etc/hosts.deny* files. These files allow
    tailored access controls for applications that are compiled with the libwrap (TCP
    wrappers) library. See the hosts_access(5) man page for more information.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序可能会配置自己的过滤控制，由用户空间进程（而非内核）做出 IP 访问决策。一种传统的做法是使用 */etc/hosts.allow* 和 */etc/hosts.deny*
    文件。这些文件允许为使用 libwrap（TCP 包装器）库编译的应用程序提供定制的访问控制。有关更多信息，请参阅 hosts_access(5) 手册页。
- en: 'Many applications have their own IP access control mechanisms that can be specified
    in their configuration files, which often allows more flexible access control
    tied to the application. For example, the Apache web server can be configured
    to allow access to only parts of the web tree for certain IP addresses:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 许多应用程序有自己的 IP 访问控制机制，可以在其配置文件中指定，这通常允许与应用程序相关的更灵活的访问控制。例如，Apache web 服务器可以配置为只允许某些
    IP 地址访问 web 树中的某些部分：
- en: '[PRE44]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: In this example, anyone trying to access the */secretstuff* directory from outside
    the defined IP address ranges will receive an “HTTP 403 Forbidden” error.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，任何试图从定义的 IP 地址范围之外访问 */secretstuff* 目录的用户将收到“HTTP 403 Forbidden”错误。
- en: 'Here is another example where SSH allows logins only for selected users coming
    from a specified IP address:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个示例，展示了 SSH 仅允许来自指定 IP 地址的选定用户登录：
- en: '[PRE45]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: These application layer IP controls don’t need to filter based on port numbers
    if they are listening only on one port.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序仅监听一个端口，则这些应用层 IP 控制不需要基于端口号进行过滤。
- en: From a forensics perspective, any logs containing blocked packets may be interesting.
    They show attempted connections and scanning activity that may be related to a
    compromise. They also reveal information about the location or state of a machine
    (possibly a roaming laptop) at a certain time. If the source MAC addresses are
    logged, they indicate the MAC addresses of sending machines on a locally attached
    network (a router typically). In the case of DDoS attacks, scanning, or other
    blocked malicious activity, the IP addresses used can be correlated with other
    intelligence data to gather more information about threat actors (possibly attributing
    them to a particular botnet).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 从取证角度来看，任何包含被阻止数据包的日志可能都很有趣。它们显示了尝试的连接和扫描活动，这些活动可能与入侵有关。它们还揭示了某台机器在某个时间点的位置或状态（可能是一台流动的笔记本电脑）。如果源MAC地址被记录下来，它们表示在本地附加网络上的发送机器的MAC地址（通常是路由器）。在DDoS攻击、扫描或其他被阻止的恶意活动的情况下，可以将使用的IP地址与其他情报数据进行关联，以收集更多有关威胁行为者的信息（可能将其归属于某个特定的僵尸网络）。
- en: '***Proxy Settings***'
  id: totrans-243
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代理设置***'
- en: Proxy servers are a form of application layer firewall designed to provide indirect
    access to a remote service by proxy. When proxies are used, a client machine’s
    network connection terminates at the proxy server together with information about
    the remote service. The proxy server then establishes a new connection to the
    remote service on the client’s behalf. The passing of information about the remote
    connection is built in to the proxying protocol. Some protocols, like SOCKS or
    HTTP CONNECT, were specifically designed as proxies for TCP sessions. Other protocols,
    like SMTP, have an inherent proxying model in the protocol (for example, transferring
    email from host to host until it arrives at an inbox).
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 代理服务器是一种应用层防火墙，旨在通过代理提供间接访问远程服务的功能。使用代理时，客户端机器的网络连接会终止于代理服务器，同时包含远程服务的信息。然后，代理服务器代表客户端建立到远程服务的新连接。关于远程连接的信息传递是代理协议的一部分。一些协议，如SOCKS或HTTP
    CONNECT，专门设计用于TCP会话的代理。其他协议，如SMTP，则在协议中本身就包含代理模型（例如，将电子邮件从一个主机转发到另一个主机，直到到达收件箱）。
- en: On a Linux distro, proxy settings can be global for the entire system, specific
    to a user, or set individually in each application. The proxy server can be either
    a remote machine or a locally running daemon. Local proxy daemons are typically
    used for filtering local web traffic or acting as gateways to remote networks
    that are not directly accessible (like TOR, for example).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux发行版中，代理设置可以是系统范围的，特定于用户的，或在每个应用程序中单独设置。代理服务器可以是远程机器，也可以是本地运行的守护进程。本地代理守护进程通常用于过滤本地Web流量或作为无法直接访问的远程网络的网关（例如TOR）。
- en: There are several ways a Linux system can specify system-wide proxy settings.
    It is up to each application to decide how to handle those settings. Depending
    on the application, system-wide settings may be used, partially used, or ignored
    completely.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: Linux系统可以通过多种方式指定全局代理设置。每个应用程序决定如何处理这些设置。根据应用程序的不同，系统级设置可能被完全使用、部分使用或完全忽略。
- en: 'A set of environment variables can be used to specify proxies, which can be
    set in the shell startup scripts or anywhere environment variables are set. In
    some distros, the */etc/sysconfig/proxy* file, which contains proxy variables,
    is read at startup, as shown in the following example:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 一组环境变量可以用来指定代理，这些变量可以在shell启动脚本中或任何设置环境变量的地方进行设置。在一些发行版中，*/etc/sysconfig/proxy*文件会在启动时读取，该文件包含代理变量，如下所示：
- en: '[PRE46]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The `NO_PROXY` setting ignores proxy settings for defined hosts, IP ranges,
    and domains. This is interesting from a forensics perspective, as it may contain
    domain names and network addresses, explicitly configured by a system administrator,
    that are not public and are possibly relevant to an investigation.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`NO_PROXY`设置会忽略为特定主机、IP范围和域定义的代理设置。从取证角度来看，这非常有趣，因为它可能包含由系统管理员显式配置的、非公开的域名和网络地址，这些信息可能与调查相关。'
- en: A user’s dconf database also stores proxy settings that can be read by any supported
    application (like GNOME 3 or 40 applications). This information is stored in a
    *GVariant* database file in the user’s home directory (*~/.config/dconf/user/*).
    [Chapter 10](ch10.xhtml) explains how to extract and analyze dconf database contents.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 用户的dconf数据库也存储着代理设置，任何支持的应用程序（如GNOME 3或40应用程序）都可以读取这些设置。这些信息存储在用户主目录中的一个*GVariant*数据库文件中（*~/.config/dconf/user/*）。[第10章](ch10.xhtml)解释了如何提取和分析dconf数据库的内容。
- en: The NetworkManager daemon has an option to discover and configure web proxy
    settings using *proxy auto configuration (pac*) files. A *pac* file uses JavaScript
    to define if and how URLs are to be proxied. Proxy *pac* files can be local or
    fetched from remote servers, and they can be found in the `[proxy]` section of
    network profiles stored in the */etc/NetworkManager/system -connections/* directory.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: NetworkManager 守护进程有一个选项，可以使用 *代理自动配置（pac）* 文件来发现和配置 Web 代理设置。*pac* 文件使用 JavaScript
    定义是否以及如何对 URL 进行代理。代理 *pac* 文件可以是本地的，也可以从远程服务器获取，通常可以在存储在 */etc/NetworkManager/system-connections/*
    目录中的网络配置文件的 `[proxy]` 部分找到。
- en: Each installed network application may have its own proxy settings that deviate
    from the system-wide proxy settings, which, in a forensic investigation, means
    that relevant applications need to be examined individually.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 每个安装的网络应用可能有自己独立的代理设置，这些设置可能与系统级别的代理设置不同。在法医调查中，这意味着需要单独检查相关的应用程序。
- en: Command line proxies may also be used for starting applications. For example,
    `tsocks` and `socksify` are tools that allow programs to be started on the command
    line using SOCKS libraries to proxy network traffic (designed for programs with
    no proxy support). Evidence of command line proxying might be found in the shell
    history.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行代理也可以用于启动应用程序。例如，`tsocks` 和 `socksify` 是允许在命令行上启动程序并使用 SOCKS 库代理网络流量的工具（设计用于没有代理支持的程序）。命令行代理的证据可能会在
    shell 历史记录中找到。
- en: The examples above refer to clients using proxies, but Linux servers may also
    be running as proxy servers. Popular web proxies running on Linux include Squid
    and Polipo. Dante is another popular SOCKS proxy server.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例提到了客户端使用代理，但 Linux 服务器也可以作为代理服务器运行。流行的 Linux 上的 Web 代理包括 Squid 和 Polipo。Dante
    是另一个流行的 SOCKS 代理服务器。
- en: Nginx provides support for several proxy protocols and can also act as a reverse
    proxy. A reverse proxy “impersonates” a remote server, accepting connections from
    clients while establishing a separate connection to the real server. Reverse proxying
    is common in enterprise environments for load balancing and web application firewalling
    (WAF). Reverse proxying is also how some anonymizer systems function.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx 支持多种代理协议，并且也可以充当反向代理。反向代理“假装”是远程服务器，接受来自客户端的连接，同时与真实服务器建立独立的连接。反向代理在企业环境中用于负载均衡和
    Web 应用防火墙（WAF）非常常见。反向代理也是某些匿名化系统的工作方式。
- en: A malicious use of reverse proxies is real-time-phishing attacks, where the
    reverse proxy performs an application layer man-in-the-middle attack between a
    victim client and server. Botnet command-and-control servers may also use reverse
    proxies for resilience against takedowns and for anonymization.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 反向代理的恶意使用之一是实时钓鱼攻击，其中反向代理在受害者客户端和服务器之间执行应用层中间人攻击。僵尸网络的指挥与控制服务器也可能使用反向代理，以提高抗击封锁的能力并进行匿名化。
- en: Server-side proxies typically log client connections and activity, which can
    be analyzed in a forensic investigation. This is especially valuable in the case
    of seized malicious servers, because lists of client PCs (possibly infected victims
    from a botnet) can be extracted.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端代理通常会记录客户端连接和活动，这些可以在法医调查中进行分析。这在查获恶意服务器的情况下尤其有价值，因为可以提取客户端 PC 列表（可能是被僵尸网络感染的受害者）。
- en: '**Summary**'
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**摘要**'
- en: This chapter described how to analyze Linux networking, including the hardware
    layer dealing with interfaces and MAC addresses, network services, and DNS resolution.
    It also covered how to identify Wi-Fi artifacts and paired Bluetooth devices and
    analyze WWAN mobile activity. In addition, this chapter also explored Linux network
    security such as VPNs, firewalls, and proxies.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述了如何分析 Linux 网络，包括处理接口和 MAC 地址的硬件层、网络服务和 DNS 解析。还介绍了如何识别 Wi-Fi 证据、配对的蓝牙设备并分析
    WWAN 移动活动。此外，本章还探讨了 Linux 网络安全，如 VPN、防火墙和代理。
