- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">16</samp> <samp class="SANS_Dogma_OT_Bold_B_11">MONITORING
    AUTOMOTIVE ELECTRONICS WITH THE CAN BUS</samp>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">16</samp> <samp class="SANS_Dogma_OT_Bold_B_11">通过CAN总线监控汽车电子设备</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: Cars use a complex network of electronics to monitor operations and control
    various functions, including engine management, temperature measurement, and window
    and lock controls. These electronics and devices communicate with each other over
    the *controller area network data bus (CAN bus)*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 汽车使用复杂的电子网络来监控操作并控制各种功能，包括发动机管理、温度测量以及窗户和锁的控制。这些电子设备通过*控制器局域网络数据总线（CAN总线）*相互通信。
- en: In this chapter, you’ll learn to interface your Arduino with the CAN bus to
    monitor data from certain automotive electronics. You’ll set up and test an Arduino-to-CAN-bus
    data connection and then monitor and record real-time engine statistics for later
    analysis.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何将Arduino与CAN总线接口，监控来自某些汽车电子设备的数据。你将设置并测试Arduino与CAN总线的数据连接，然后监控并记录实时的发动机统计数据以便后续分析。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The CAN Bus</samp>
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">CAN总线</samp>
- en: You may be familiar with the SPI and I²C data buses. The CAN bus is a data bus
    that is used to connect the engine management computer with other devices in a
    contemporary automobile. This reduces physical wiring between devices and allows
    you to connect an external device, such as a computer, a scanning tool, or your
    Arduino, to the automobile for monitoring operations.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能熟悉SPI和I²C数据总线。CAN总线是一种用于将发动机管理计算机与现代汽车中其他设备连接的数据总线。它减少了设备之间的物理布线，并允许你将外部设备（如计算机、扫描工具或Arduino）连接到汽车进行操作监控。
- en: For example, a car’s engine management computer reads sensors in the engine
    and braking system. Using the CAN bus, it then broadcasts the speed, engine RPM,
    temperature, and other data to the computer system that controls the dashboard
    display. When you press the button on a remote control to lock your car doors,
    the radio data transceiver receives the signal from the remote control and then
    likewise instructs the central locking controller unit via the CAN bus to lock
    all the doors.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，汽车的发动机管理计算机会读取发动机和制动系统中的传感器数据。通过CAN总线，它会将速度、发动机转速、温度和其他数据广播到控制仪表盘显示的计算机系统。当你按下遥控器上的按钮锁车门时，无线电数据收发器接收到遥控器的信号，然后通过CAN总线指示中央锁定控制单元锁住所有车门。
- en: The protocol used for communication over the CAN bus is called *On-Board Diagnostic
    II (OBDII)*, the second generation of the OBD protocol. You can use an Arduino
    and matching CAN bus shield to communicate with the bus to review car statistics.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 用于CAN总线通信的协议称为*车载诊断II（OBDII）*，这是OBD协议的第二代。你可以使用Arduino和匹配的CAN总线扩展板与总线进行通信，以查看汽车统计数据。
- en: Before progressing further, if you plan to build the projects for this chapter,
    check whether your car has a CAN bus and an OBDII connector, as some older cars
    will not. To do this, look around under the dashboard of your car. The connector
    will be in an out-of-the-way position; for example, it appears above the pedals
    in my Mitsubishi Outlander Sport/ASX, as shown in [Figure 16-1](chapter16.xhtml#fig16-1).
    If you can’t initially find your OBDII connector, you may have to refer to the
    manual provided by the manufacturer or the service manual.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在进一步操作之前，如果你打算制作本章的项目，请检查你的汽车是否具备CAN总线和OBDII连接器，因为一些较老的汽车可能没有。为此，你可以在车内仪表盘下方查看连接器的位置；例如，我的三菱欧蓝德运动版/ASX的连接器位于踏板上方，如[图16-1](chapter16.xhtml#fig16-1)所示。如果你最初找不到OBDII连接器，你可能需要查阅制造商提供的手册或维修手册。
- en: '![A PHOTO OF AN OBDII CONNECTOR UNDER A CAR DASHBOARD](../images/fig16-1.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![汽车仪表盘下方的OBDII连接器照片](../images/fig16-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 16-1: An OBDII connector
    socket</samp>'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图16-1：OBDII连接器插槽</samp>
- en: When it comes time to connect a cable to the OBDII connector, hold the socket
    firmly with one hand as you insert the plug with your other hand. The socket is
    usually not mounted with much support, and if you’re not careful, you’ll risk
    breaking the support bracket.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当你准备将电缆连接到OBDII连接器时，一只手稳稳地握住插槽，另一只手将插头插入。插槽通常没有太多支撑，如果不小心，可能会破坏支架。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Required CAN Bus Hardware</samp>
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">所需的CAN总线硬件</samp>
- en: For the projects in this chapter, you’ll need an Arduino shield such as PMD
    Way part 13479987, shown in [Figure 16-2](chapter16.xhtml#fig16-2). Whichever
    shield you choose, it must use the Microchip MCP2515 CAN controller and MCP2551
    CAN transceiver ICs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的项目需要一个 Arduino 扩展板，如 [图 16-2](chapter16.xhtml#fig16-2) 所示的 PMD Way 部件 13479987。无论选择哪个扩展板，它必须使用
    Microchip MCP2515 CAN 控制器和 MCP2551 CAN 收发器芯片。
- en: '![A PHOTO OF THE CAN BUS SHIELD FOR ARDUINO](../images/fig16-2.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![Arduino 用 CAN 总线扩展板的照片](../images/fig16-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 16-2: A CAN bus shield
    for Arduino</samp>'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 16-2: 一款 Arduino 用的 CAN 总线扩展板</samp>'
- en: Next, you’ll need a matching cable that runs from the vehicle’s OBDII port to
    the nine-pin plug on the shield, such as PMD Way part 717211, shown in [Figure
    16-3](chapter16.xhtml#fig16-3).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要一根适配的电缆，将车辆的 OBDII 端口与扩展板上的九针插口连接，例如 [图 16-3](chapter16.xhtml#fig16-3)
    所示的 PMD Way 部件 717211。
- en: '![A PHOTO OF AN OBDII-TO-DB9 FEMALE CABLE](../images/fig16-3.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![OBDII 到 DB9 母头线缆的照片](../images/fig16-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 16-3: An OBDII-to-shield
    cable</samp>'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 16-3: 一根 OBDII 到扩展板的电缆</samp>'
- en: Finally, you’ll need a way to power your Arduino. If you don’t have a laptop
    computer with enough battery life to last an hour or so, consider getting a USB
    power bank, as shown in [Figure 16-4](chapter16.xhtml#fig16-4).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你需要一种方式为 Arduino 提供电源。如果你没有一台电池续航足够支持一个小时左右使用的笔记本电脑，考虑购买一个 USB 电源银行，如 [图
    16-4](chapter16.xhtml#fig16-4) 所示。
- en: '![A PHOTO OF A USB POWER BANK](../images/fig16-4.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![USB 电源银行的照片](../images/fig16-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 16-4: A USB power bank</samp>'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 16-4: 一款 USB 电源银行</samp>'
- en: Alternatively, you could power your project using a USB cable and a car USB
    adapter, as shown in [Figure 16-5](chapter16.xhtml#fig16-5).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 USB 电缆和汽车 USB 适配器为你的项目供电，如 [图 16-5](chapter16.xhtml#fig16-5) 所示。
- en: '![A PHOTO OF A CIGAR LIGHTER USB POWER ADAPTER](../images/fig16-5.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![汽车点烟器 USB 电源适配器的照片](../images/fig16-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 16-5: A car USB power
    adapter</samp>'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 16-5: 一款汽车 USB 电源适配器</samp>'
- en: The OBDII connection may differ for each brand and model of car, so it’s a good
    idea to check with enthusiast forums for more information about your car before
    purchasing the hardware required for this chapter. For example, Mitsubishi owners
    could consult the forum at [*https://<wbr>www<wbr>.mitsubishi<wbr>-forums<wbr>.com*](https://www.mitsubishi-forums.com)
    and search for OBDII posts.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: OBDII 连接可能因品牌和车型不同而有所差异，因此在购买本章所需硬件之前，建议查阅爱好者论坛，获取更多关于你车辆的信息。例如，三菱车主可以访问 [*https://<wbr>www<wbr>.mitsubishi<wbr>-forums<wbr>.com*](https://www.mitsubishi-forums.com)
    查找 OBDII 相关帖子。
- en: Once you have the required hardware, download the CAN bus library ZIP file from
    [*https://<wbr>github<wbr>.com<wbr>/sparkfun<wbr>/SparkFun<wbr>_CAN<wbr>-Bus<wbr>_Arduino<wbr>_Library<wbr>/archive<wbr>/master<wbr>.zip*](https://github.com/sparkfun/SparkFun_CAN-Bus_Arduino_Library/archive/master.zip).
    Open the Arduino IDE and select **Sketch** ![](../images/arr.png) **Include Library**
    ![](../images/arr.png) **Add ZIP Library** to install the library.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了所需的硬件，下载 CAN 总线库的 ZIP 文件，链接为 [*https://<wbr>github<wbr>.com<wbr>/sparkfun<wbr>/SparkFun<wbr>_CAN<wbr>-Bus<wbr>_Arduino<wbr>_Library<wbr>/archive<wbr>/master<wbr>.zip*](https://github.com/sparkfun/SparkFun_CAN-Bus_Arduino_Library/archive/master.zip)。打开
    Arduino IDE，选择 **Sketch** ![](../images/arr.png) **Include Library** ![](../images/arr.png)
    **Add ZIP Library** 来安装这个库。
- en: You’re now ready to test your hardware with a simple CAN bus data retrieval
    sketch.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你准备好用一个简单的 CAN 总线数据检索程序来测试你的硬件了。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #47: Monitoring Engine Data</samp>'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #47: 监控发动机数据</samp>'
- en: In this project, you’ll use the CAN bus shield to receive basic engine data
    and speed from the car’s engine control unit (ECU) and display this in the Arduino
    IDE’s Serial Monitor. This is a good way to check that the hardware is operating
    and increase familiarity with your car’s operating statistics.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用 CAN 总线扩展板从汽车的发动机控制单元（ECU）接收基本的发动机数据和速度，并在 Arduino IDE 的串口监视器中显示这些数据。这是检查硬件是否正常运行并增加对汽车操作统计数据熟悉度的好方法。
- en: 'Your project will monitor the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你的项目将监控以下内容：
- en: Car speed
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 汽车速度
- en: Engine RPM
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发动机转速（RPM）
- en: Throttle position
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 油门位置
- en: Percentage of throttle application
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 油门应用百分比
- en: Engine coolant temperature
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发动机冷却液温度
- en: Oxygen sensor voltage
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 氧气传感器电压
- en: Mass air flow (MAF) sensor values
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 质量空气流量（MAF）传感器值
- en: The ECU uses the oxygen sensor voltage to determine the amount of oxygen present
    in the engine exhaust gases, which indicates how fuel efficiently the engine is
    operating. Once your car’s MAF sensor measures the amount of air entering the
    engine, the ECU uses this value to determine the correct amount of fuel needed
    for optimal engine operation.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: ECU 使用氧传感器的电压来确定发动机排气气体中氧气的含量，这能指示发动机的燃油效率。一旦你的车的 MAF 传感器测量了进入发动机的空气量，ECU 会使用这个数值来确定发动机正常运行所需的正确燃油量。
- en: 'You’ll need the following parts for this project:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要以下部件来完成这个项目：
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块 Arduino Uno 或兼容的开发板以及 USB 电缆
- en: A CAN bus shield for Arduino
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块适用于 Arduino 的 CAN 总线扩展板
- en: An OBDII-to-shield cable
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一根 OBDII 到扩展板的电缆
- en: A laptop computer (preferable but not required)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台笔记本电脑（最好，但不是必需的）
- en: If you have a laptop computer running the Arduino IDE, you can use that to monitor
    the project’s output. Otherwise, you could set up a desktop computer in your garage.
    If neither of these is possible, skip to the next project.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一台运行 Arduino IDE 的笔记本电脑，你可以使用它来监控项目的输出。否则，你可以在车库中设置一台台式电脑。如果两者都不行，可以跳过这个项目。
- en: To assemble the project, connect the CAN bus shield to the Arduino, the Arduino
    to the computer, and the CAN bus shield to the OBDII connector in the car. If
    your Arduino board has a full-sized USB socket, such as that shown in [Figure
    16-6](chapter16.xhtml#fig16-6), it can rest against the solder joints of the CAN
    bus shield. If this is the case, place some paper between the two to insulate
    the Arduino from the shield.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要组装这个项目，将 CAN 总线扩展板连接到 Arduino，将 Arduino 连接到计算机，并将 CAN 总线扩展板连接到汽车中的 OBDII 连接器。如果你的
    Arduino 开发板有全尺寸的 USB 插座，如 [图 16-6](chapter16.xhtml#fig16-6) 所示，它可以靠在 CAN 总线扩展板的焊接点上。如果是这种情况，请在两者之间放一些纸张，以将
    Arduino 与扩展板隔离。
- en: '![A PHOTO OF A CAN BUS SHIELD CONNECTED TO AN ARDUINO WITH A USB SOCKET BRUSHING
    SHIELD](../images/fig16-6.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![连接到 Arduino 并带有 USB 插座刷到扩展板的 CAN 总线扩展板照片](../images/fig16-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 16-6: An Arduino USB
    port contacting the CAN bus shield</samp>'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 16-6：Arduino USB 端口连接到 CAN
    总线扩展板</samp>
- en: Enter and upload the sketch, and then make sure the car won’t move if you start
    the engine. Start the engine, open the Serial Monitor in the Arduino IDE, and
    set the data rate to 115,200 baud. After a few moments, the engine data should
    be displayed, as shown in [Figure 16-7](chapter16.xhtml#fig16-7).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并上传草图，然后确保在启动发动机时汽车不会移动。启动发动机，在 Arduino IDE 中打开串口监视器，将数据速率设置为 115,200 波特率。几秒钟后，发动机数据应该会显示出来，如
    [图 16-7](chapter16.xhtml#fig16-7) 所示。
- en: '![A PHOTO OF EXAMPLE ECU DATA CAPTURED WITH PROJECT #47](../images/fig16-7.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #47 捕获的 ECU 数据示例照片](../images/fig16-7.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 16-7: Example output
    from Project #47</samp>'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 16-7：项目 #47 的示例输出</samp>'
- en: 'In the figure, the speed is greater than 0 km/h. That’s because I took the
    car for a drive with a passenger, who took the screenshot using a laptop. This
    test also demonstrates the potential differences in OBDII data between different
    cars: in the results shown in [Figure 16-7](chapter16.xhtml#fig16-7), you can
    see that I didn’t get any readings for the oxygen sensor voltage from the ECU.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在图中，速度大于 0 公里/小时。这是因为我开车带着一个乘客，乘客用笔记本电脑截取了屏幕截图。这个测试还展示了不同车辆之间 OBDII 数据的潜在差异：在
    [图 16-7](chapter16.xhtml#fig16-7) 中的结果可以看到，我没有从 ECU 获取氧传感器电压的任何读数。
- en: 'Let’s see how this works:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个是如何工作的：
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The sketch first includes the CAN bus library ❶ and then creates two variables.
    The first is <samp class="SANS_TheSansMonoCd_W5Regular_11">requestDelay</samp>,
    which is used to create a delay after reading data from the CAN bus. You may need
    to alter this variable’s value depending on the car you’re using, but try 100
    first. If the data returned doesn’t match the type or you’re not seeing any data
    at all, you will need to experiment with values that are higher or lower. The
    second variable is the large character array <samp class="SANS_TheSansMonoCd_W5Regular_11">buffer</samp>,
    used to store data received over the CAN bus and then displayed in the Serial
    Monitor.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例代码首先引入 CAN 总线库 ❶，然后创建两个变量。第一个是 <samp class="SANS_TheSansMonoCd_W5Regular_11">requestDelay</samp>，用于在从
    CAN 总线读取数据后创建延迟。根据你使用的汽车，可能需要调整这个变量的值，但先尝试 100。如果返回的数据类型不匹配，或者你根本看不到数据，你需要尝试更高或更低的值。第二个变量是较大的字符数组
    <samp class="SANS_TheSansMonoCd_W5Regular_11">buffer</samp>，用于存储通过 CAN 总线接收到的数据，然后显示在串口监视器中。
- en: In <samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp>, the sketch
    initializes the serial output ❷. It then starts CAN bus communication ❸, also
    checking whether it’s possible to communicate between the Arduino and the CAN
    bus using the <samp class="SANS_TheSansMonoCd_W5Regular_11">if (Canbus.init (CANSPEED_500))</samp>
    function. The parameter <samp class="SANS_TheSansMonoCd_W5Regular_11">CANSPEED_500</samp>
    sets the CAN bus shield-to-data rate. The required speed varies depending on the
    car; the appropriate speed for my vehicle was 500 kbps.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在 <samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp> 中，示例代码初始化串口输出
    ❷。然后开始 CAN 总线通信 ❸，同时检查 Arduino 是否能够与 CAN 总线进行通信，使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">if
    (Canbus.init (CANSPEED_500))</samp> 函数。参数 <samp class="SANS_TheSansMonoCd_W5Regular_11">CANSPEED_500</samp>
    设置了 CAN 总线与数据之间的传输速率。所需的速度取决于汽车类型；对于我的车辆，合适的速度是 500 kbps。
- en: 'The sketch retrieves data using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Canbus.ecu_req()</samp>
    functions in <samp class="SANS_TheSansMonoCd_W5Regular_11">void loop()</samp>.
    These functions have two parameters: the data type and the variable in which to
    store the data. For example, the sketch retrieves and places the first piece of
    data, speed, into the <samp class="SANS_TheSansMonoCd_W5Regular_11">buffer</samp>
    variable and then displays that data on the Serial Monitor ❹. A short delay follows,
    after which the next parameters are retrieved and displayed and the process repeats.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例代码通过 <samp class="SANS_TheSansMonoCd_W5Regular_11">Canbus.ecu_req()</samp>
    函数在 <samp class="SANS_TheSansMonoCd_W5Regular_11">void loop()</samp> 中获取数据。这些函数有两个参数：数据类型和存储数据的变量。例如，示例代码获取并将第一个数据项——速度，存储到
    <samp class="SANS_TheSansMonoCd_W5Regular_11">buffer</samp> 变量中，并在串口监视器上显示该数据❹。之后会有一个短暂的延迟，接着获取下一个参数并显示，过程会重复。
- en: If the project doesn’t work, you may need to change the data rate. You can change
    the parameter to <samp class="SANS_TheSansMonoCd_W5Regular_11">CANSPEED_125</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">CANSPEED_250</samp> for 125 kbps
    or 250 kpbs, respectively, trying different speeds to see what works.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果项目无法正常工作，你可能需要更改数据传输速率。你可以将参数更改为 <samp class="SANS_TheSansMonoCd_W5Regular_11">CANSPEED_125</samp>
    或 <samp class="SANS_TheSansMonoCd_W5Regular_11">CANSPEED_250</samp>，分别对应 125 kbps
    或 250 kbps，尝试不同的速度，看哪个有效。
- en: You can learn a lot about your car using this sketch. For example, I found that
    the ECU in my Mitsubishi limited the throttle to 18 percent when the transmission
    was in park or neutral, preventing drivers from unnecessarily over-revving the
    engine.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个示例代码，你可以学到很多关于你汽车的知识。例如，我发现我的三菱汽车的 ECU 在变速杆处于停车档或空档时，将油门限制在 18%，防止驾驶员不必要地让引擎过度转速。
- en: Now that you have a basic framework to retrieve OBDII data, you’re ready to
    learn to save this data to a microSD card for later review. Keep the hardware
    for this project together, as you’ll also use it in the next project.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了一个基本框架来获取 OBDII 数据，接下来你可以学习如何将这些数据保存到 microSD 卡上，供以后查看。请将这个项目的硬件设备保存好，因为你将在下一个项目中继续使用它。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #48: Logging OBDII Car Data</samp>'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #48：记录 OBDII 汽车数据</samp>'
- en: In this project, you’ll log the data retrieved from the CAN bus to a microSD
    card, which allows you to analyze the data over time, whether the car is stationary
    or being driven. The required hardware and assembly are the same as the previous
    project, except that you’ll also need a microSD card—the type used in [Chapter
    9](chapter9.xhtml) will be fine—and a power supply for your Arduino, as described
    at the start of this chapter.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本项目中，您将把从 CAN 总线获取的数据记录到 microSD 卡上，这样可以随着时间的推移分析数据，无论汽车是静止还是行驶中。所需的硬件和组装与上一个项目相同，只是您还需要一张
    microSD 卡——使用[第 9 章](chapter9.xhtml)中所述的类型即可——以及为您的 Arduino 提供电源，如本章开始时所描述的。
- en: Enter and upload the sketch, insert the microSD card into the CAN bus shield,
    and then confirm the car won’t move if you start the engine. Connect the Arduino
    to the power supply and start the engine. The sketch should retrieve and log the
    data to a text file called *CANBUS.TXT* on the microSD card, with a new entry
    around every second.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并上传程序草图，将 microSD 卡插入 CAN 总线扩展板，然后确认如果启动发动机，汽车不会移动。将 Arduino 连接到电源并启动发动机。程序草图应该会将数据提取并记录到
    microSD 卡上的名为*CANBUS.TXT*的文本文件中，每秒生成一个新的数据条目。
- en: If you’re able, take your car for a drive. After you’ve finished, remove the
    power from the Arduino, insert the microSD card into your PC, and open it for
    viewing. It should include the *CANBUS.TXT* file containing all your logged data,
    as shown in [Figure 16-8](chapter16.xhtml#fig16-8).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可能，开车出行一段时间。完成后，断开 Arduino 的电源，将 microSD 卡插入您的 PC 中并打开查看。它应该包含记录的所有数据，存储在名为
    *CANBUS.TXT* 的文件中，如[图 16-8](chapter16.xhtml#fig16-8)所示。
- en: '![A PHOTO OF EXAMPLE ECU DATA CAPTURED BY PROJECT #48](../images/fig16-8.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #48 捕获的示例 ECU 数据照片](../images/fig16-8.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 16-8: Example data file
    contents from a microSD card</samp>'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 16-8：来自 microSD 卡的示例数据文件内容</samp>
- en: Open *CANBUS.TXT* in a spreadsheet, and during the opening process, delimit
    with a comma and a space. For example, if you’re using Microsoft Excel, you can
    do this using the Text Import Wizard that appears when you open a text file, as
    shown in [Figure 16-9](chapter16.xhtml#fig16-9).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在电子表格中打开 *CANBUS.TXT*，在打开过程中，使用逗号和空格作为分隔符。例如，如果您使用的是 Microsoft Excel，您可以通过在打开文本文件时出现的文本导入向导来完成此操作，如[图
    16-9](chapter16.xhtml#fig16-9)所示。
- en: '![OPENING THE CANBUS.TXT FILE IN EXCEL](../images/fig16-9.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![在 Excel 中打开 CANBUS.TXT 文件](../images/fig16-9.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 16-9: Opening the</samp>
    <samp class="SANS_Futura_Std_Book_11">CANBUS.TXT</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">file
    in Excel</samp>'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 16-9：在 Excel 中打开</samp> <samp
    class="SANS_Futura_Std_Book_11">CANBUS.TXT</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">文件</samp>
- en: Now that your data is in normal spreadsheet file format, you can now open it
    in spreadsheet software for further analysis, such as to find relationships between
    speed and RPM or RPM and throttle position, as shown in [Figure 16-10](chapter16.xhtml#fig16-10).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的数据已经是标准的电子表格文件格式，您可以在电子表格软件中打开它，进行进一步的分析，例如查找速度与转速（RPM）或转速与油门位置之间的关系，如[图
    16-10](chapter16.xhtml#fig16-10)所示。
- en: '![A SCREENSHOT OF THE ECU DATA DISPLAYED IN A SPREADSHEET](../images/fig16-10.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![ECU 数据在电子表格中显示的截图](../images/fig16-10.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 16-10: Working with
    example data in the spreadsheet</samp>'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 16-10：在电子表格中处理示例数据</samp>
- en: 'Let’s see how the sketch works:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个程序是如何工作的：
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The sketch includes the requisite CAN bus library and variables ❶, followed
    by the library to use the microSD card reader and the <samp class="SANS_TheSansMonoCd_W5Regular_11">chipselect</samp>
    variable. This variable indicates which CS pin the microSD card socket uses, in
    this case using a value of 9 for Arduino digital pin 9\. In <samp class="SANS_TheSansMonoCd_W5Regular_11">void
    setup()</samp>, the sketch checks that the microSD card subsection is working
    ❷ and then initializes the CAN bus interface with the required bus speed ❸. As
    in the previous project, if the sketch doesn’t log any data, try changing the
    value for <samp class="SANS_TheSansMonoCd_W5Regular_11">requestDelay</samp>.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 程序草图包含所需的 CAN 总线库和变量 ❶，接着是用于读取 microSD 卡的库以及 <samp class="SANS_TheSansMonoCd_W5Regular_11">chipselect</samp>
    变量。此变量指示 microSD 卡插槽使用的 CS 引脚，在本例中，Arduino 数字引脚 9 的值为 9。在 <samp class="SANS_TheSansMonoCd_W5Regular_11">void
    setup()</samp> 中，程序会检查 microSD 卡子系统是否正常工作 ❷，然后初始化 CAN 总线接口并设置所需的总线速度 ❸。与之前的项目一样，如果程序没有记录任何数据，请尝试更改
    <samp class="SANS_TheSansMonoCd_W5Regular_11">requestDelay</samp> 的值。
- en: If the microSD card and the CAN bus initialize successfully, the sketch moves
    on to the main loop and opens the file on the microSD card for writing ❹. If a
    file to be written to exists ❺, the sketch moves on to retrieve the first piece
    of data from the ECU ❻; then, instead of sending the data to the Serial Monitor,
    the sketch writes it to the microSD card ❼. The process then repeats for the other
    five pieces of data from the ECU. Once finished, the sketch closes the file for
    writing ❽. You can change the period between logging data using <samp class="SANS_TheSansMonoCd_W5Regular_11">delay()</samp>.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果microSD卡和CAN总线初始化成功，程序将进入主循环，并打开microSD卡上的文件进行写入❹。如果存在需要写入的文件❺，程序将继续从ECU获取第一条数据❻；然后，程序不是将数据发送到串口监视器，而是将其写入microSD卡❼。这个过程会对来自ECU的其他五条数据重复执行。一旦完成，程序将关闭文件进行写入❽。你可以使用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">delay()</samp>来调整数据记录的时间间隔。
- en: For a challenge, you could add a real-time clock IC such as the popular DS3231
    series to log time and date information along with the engine parameters. You
    could also add a GPS module to log speed from both the ECU and the GPS, allowing
    you to compare the inaccuracy of your car’s speedometer.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 作为挑战，你可以添加一个实时时钟IC，如流行的DS3231系列，用来记录时间和日期信息，以及发动机参数。你还可以添加一个GPS模块，记录来自ECU和GPS的车速，从而比较你车速表的准确性。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">继续前进</samp>
- en: This chapter gave you the tools to monitor and record various parameters of
    information made available by your vehicle’s systems such as speed, engine RPM,
    throttle position, coolant temperatures, and so on that give greater insight into
    the operation of the engine and its sensors. Each type of vehicle is different,
    so by using the projects you built in this chapter, you can find data specific
    to your own ride.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为你提供了监控和记录车辆系统提供的各种信息参数的工具，如车速、发动机转速、油门位置、冷却液温度等，这些信息可以帮助你更深入地了解发动机及其传感器的工作原理。每种车辆都有不同，因此，通过使用你在本章中构建的项目，你可以找到适合自己车辆的数据。
- en: In the next chapter, you’ll learn how to make an Arduino communicate with other
    devices using the RS232 data bus.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将学习如何使用RS232数据总线让Arduino与其他设备进行通信。
