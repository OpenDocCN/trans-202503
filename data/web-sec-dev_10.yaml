- en: '**8**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**8**'
- en: '**CROSS-SITE REQUEST FORGERY ATTACKS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨站请求伪造攻击**'
- en: '![image](Images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common01.jpg)'
- en: In the previous chapter, you saw how attackers use cross-site scripting attacks
    to inject JavaScript into a user’s web browser through page elements like comment
    sections, search results, and URLs. Now you’ll look at how attackers use malicious
    links to hack your users.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你看到攻击者如何通过跨站脚本攻击将 JavaScript 注入用户的网页浏览器，通常通过评论区、搜索结果或 URL 等页面元素。现在，你将看到攻击者如何利用恶意链接来入侵用户。
- en: No website is an island. Because your website has a public URL, other sites
    will frequently link to it, which you should generally encourage as a site owner.
    More inbound links to your site means more traffic and better search engine rankings.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 没有任何网站是孤立的。由于你的网站有一个公共 URL，其他站点会频繁地链接到它，作为站点所有者，你通常应当鼓励这种行为。更多指向你网站的外部链接意味着更多的流量和更好的搜索引擎排名。
- en: However, not everybody linking to your site has good intentions. An attacker
    can trick a user into clicking a malicious link that triggers undesirable or unexpected
    side effects. This is called *cross-site request forgery (CSRF or XSRF)*. Security
    researchers sometimes pronounce CSRF as “sea-surf.”
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并不是所有链接到你网站的行为都是出于好意。攻击者可以诱使用户点击一个恶意链接，这个链接会触发不希望发生的或意外的副作用。这就是所谓的 *跨站请求伪造
    (CSRF 或 XSRF)*。安全研究人员有时将 CSRF 发音为“海浪”。
- en: CSRF is a remarkably common vulnerability that most major websites have exhibited
    at one time or another. Attackers have used CSRF to steal Gmail contact lists,
    trigger one-click purchases on Amazon, and change router configuration. This chapter
    examines how CSRF attacks typically work and shows some coding practices that
    protect against them.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: CSRF 是一种非常常见的漏洞，几乎所有主流网站在某一时刻都曾暴露过这种问题。攻击者利用 CSRF 窃取 Gmail 联系人列表、在亚马逊上触发一键购买操作、甚至更改路由器配置。本章将探讨
    CSRF 攻击通常是如何运作的，并展示一些能防范此类攻击的编码实践。
- en: '**Anatomy of a CSRF Attack**'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**CSRF 攻击的结构**'
- en: Attackers usually launch CSRF attacks by exploiting websites that implement
    `GET` requests that change the state of a web server. A `GET` request is triggered
    when a victim clicks a link, allowing the attacker to craft misleading links into
    the target site that perform unexpected actions. `GET` requests are the only type
    of HTTP request that contain the entirety of the request’s contents in a URL,
    so they’re uniquely vulnerable to CSRF attacks.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者通常通过利用那些实现 `GET` 请求并且能够改变网站服务器状态的网站发起 CSRF 攻击。`GET` 请求在受害者点击链接时触发，允许攻击者将误导性链接嵌入目标站点，从而执行意想不到的操作。`GET`
    请求是唯一一种将请求的所有内容都包含在 URL 中的 HTTP 请求，因此它们在 CSRF 攻击中具有独特的脆弱性。
- en: 'In an early iteration of Twitter, you could create tweets via `GET` requests
    rather than the `POST` requests the site currently uses. This oversight made Twitter
    vulnerable to CSRF attacks: it made it possible to create URL links that, when
    clicked, would post on a user’s timeline. [Listing 8-1](ch08.xhtml#ch8list1) shows
    one of these URL links.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Twitter 的早期版本中，你可以通过 `GET` 请求创建推文，而不是现在网站使用的 `POST` 请求。这一疏忽使得 Twitter 易受 CSRF
    攻击：攻击者可以创建 URL 链接，当点击这些链接时，会在用户的时间线上发布内容。[列表 8-1](ch08.xhtml#ch8list1)展示了其中一个这样的
    URL 链接。
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 8-1: A link that, at one point, would have tweeted the text* in ur
    twitter CSRF-ing ur tweets *to a victim’s timeline when clicked*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 8-1：一个链接，在某一时刻，点击后会通过 Twitter 进行 CSRF 攻击，将文本* 发送到受害者的时间线 *上*'
- en: One canny hacker used this loophole to create a viral *worm* on Twitter. Because
    they could use a single `GET` request to write a tweet, they constructed a malicious
    link that, when clicked, would post a tweet containing an obscene message *and*
    the same malicious link. When readers of the tweet clicked the link that the first
    victim tweeted, they too were tricked into tweeting the same thing.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一名机智的黑客利用这个漏洞在 Twitter 上创建了一个病毒式的 *蠕虫*。由于他们可以通过一个 `GET` 请求发送推文，他们构造了一个恶意链接，点击后会发布一条包含猥亵信息的推文
    *并且* 带有相同的恶意链接。当推文的读者点击第一个受害者推文中的链接时，他们也会被欺骗并发送相同内容的推文。
- en: The hacker tricked a handful of victims into clicking the malicious link, and
    those victims tweeted unexpected posts on the timelines. As more and more users
    read the original tweets and clicked the embedded link out of curiosity, they
    too tweeted the same thing. Soon, tens of thousands of Twitter users were being
    tricked into expressing their desire to molest goats (the content of the initial
    tweet). The first Twitter worm was born, and the Twitter development team scrambled
    to close the security hole before things got out of hand.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客欺骗了一些受害者点击了恶意链接，这些受害者在时间线上发出了意外的推文。随着越来越多的用户阅读这些原始推文并出于好奇点击了其中的嵌入链接，他们也发出了相同的内容。很快，成千上万的Twitter用户被诱骗发表了他们想要骚扰山羊的愿望（最初推文的内容）。第一个Twitter蠕虫诞生了，Twitter开发团队忙于修补这个安全漏洞，以防事态失控。
- en: '**Mitigation 1: Follow REST Principles**'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**缓解措施 1：遵循REST原则**'
- en: To protect your users against CSRF attacks, make sure that your `GET` requests
    don’t change the state of the server. Your website should use `GET` requests only
    to fetch web pages or other resources. You should perform actions that change
    server state—for example, logging the user in or out, resetting passwords, writing
    posts, or closing an account—only through `PUT`, `POST`, or `DELETE` requests.
    This design philosophy, called *Representational State Transfer (REST)*, comes
    with a host of other benefits besides CSRF protection.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护你的用户免受CSRF攻击，确保你的`GET`请求不会改变服务器的状态。你的网站应该仅使用`GET`请求来获取网页或其他资源。你应该通过`PUT`、`POST`或`DELETE`请求执行那些改变服务器状态的操作——例如，用户登录或登出、重置密码、发布帖子或关闭账户。这种设计理念，被称为*表现层状态转移（REST）*，除了防范CSRF攻击外，还有许多其他好处。
- en: REST states that you should map website operations to the appropriate HTTP method
    according to their intention. You should fetch data or pages with `GET` requests,
    create new objects on the server (such as comments, uploads, or messages) with
    `PUT` requests, modify objects on the server with `POST` requests, and delete
    objects with `DELETE` requests.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: REST原则要求你根据操作的意图，将网站操作映射到适当的HTTP方法。你应该使用`GET`请求获取数据或页面，使用`PUT`请求在服务器上创建新对象（例如评论、上传或消息），使用`POST`请求修改服务器上的对象，使用`DELETE`请求删除对象。
- en: Not all actions have an obvious corresponding HTTP method. For instance, when
    a user logs in, it’s a philosophical discussion as to whether the user is creating
    a new session or modifying their status. In terms of protecting against CSRF attacks,
    though, the key thing is to avoid assigning actions that change the server state
    to `GET` requests.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 并不是所有的操作都有明显对应的HTTP方法。例如，当用户登录时，是否认为用户是在创建一个新会话还是修改他们的状态，这个问题是一个哲学讨论。然而，在防止CSRF攻击方面，关键是避免将会改变服务器状态的操作分配给`GET`请求。
- en: Protecting your `GET` requests doesn’t mean that there aren’t vulnerabilities
    in other types of requests, as you’ll see with our second mitigation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 保护你的`GET`请求并不意味着其他类型的请求就没有漏洞，正如我们在第二个缓解措施中看到的那样。
- en: '**Mitigation 2: Implement Anti-CSRF Cookies**'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**缓解措施 2：实现反CSRF Cookies**'
- en: Defusing your `GET` requests shuts the door on most CSRF attacks, but you still
    need to protect against requests using the other HTTP verbs. Attacks using those
    verbs are much less common than `GET`-based CSRF attacks, and require much more
    work, but an attacker might try them if they think the payoff is sufficient.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭你的`GET`请求可以防止大多数CSRF攻击，但你仍然需要防范使用其他HTTP方法的请求。使用这些方法的攻击比基于`GET`的CSRF攻击要少得多，且需要更多的工作，但如果攻击者认为收益足够，他们可能会尝试这些攻击。
- en: For instance, they can trick a user into initiating a `POST` request to your
    site by having the victim submit a malicious form or script hosted on a third-party
    site under the attacker’s control. If your site performs sensitive actions in
    response to `POST` requests, you need to use anti-CSRF cookies to ensure that
    these requests are initiated only from within your site. Sensitive actions should
    be triggered only from your own login forms and JavaScript, rather than malicious
    pages that may trick the user into performing unexpected actions.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，黑客可以通过让受害者提交一个托管在第三方网站上的恶意表单或脚本来欺骗用户发起一个`POST`请求。如果你的站点在响应`POST`请求时执行敏感操作，那么你需要使用反CSRF
    cookies来确保这些请求仅在你的站点内发起。敏感操作应该仅通过你自己的网站登录表单和JavaScript触发，而不是通过可能欺骗用户执行意外操作的恶意页面。
- en: 'An *anti-CSRF cookie* is a randomized string token that the web server writes
    out to a named cookie parameter. Recall that cookies are small pieces of text
    passed back and forth between the browser and web server in HTTP headers. If the
    web server returns an HTTP response containing a header value like `Set-Cookie:
    _xsrf=5978e29d4ef434a1`, the browser will send back the same information in the
    next HTTP request in a header with form `Cookie: _xsrf=5978e29d4ef434a1`.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*反-CSRF cookie* 是一个随机化的字符串 token，Web 服务器将其写入名为 cookie 参数的字段。回想一下，cookies 是通过
    HTTP 头在浏览器和 Web 服务器之间传递的小块文本。如果 Web 服务器返回一个包含头部值的 HTTP 响应，例如 `Set-Cookie: _xsrf=5978e29d4ef434a1`，则浏览器将在下一个
    HTTP 请求中以 `Cookie: _xsrf=5978e29d4ef434a1` 的形式返回相同的信息。'
- en: Secure websites use anti-CSRF cookies to verify that `POST` requests originate
    from pages hosted on the same web domain. HTML pages on the site add this same
    string token as an `<input type="hidden" name="_xsrf" value="5978e29d4ef434a1">`
    element in any HTML form used to generate `POST` requests. When a user submits
    the form to the server, and the `_xsrf` value in the returned cookie doesn’t match
    the `_xsrf` value in the request body, the server rejects the request entirely.
    This way, the server validates and ensures that the request originated from within
    the site rather than from a malicious third-party site; the browser will send
    the required cookie *only* when the web page is loaded from the same domain.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 安全的网站使用反-CSRF cookies 来验证 `POST` 请求是否来源于托管在相同 Web 域上的页面。网站上的 HTML 页面将相同的字符串
    token 作为 `<input type="hidden" name="_xsrf" value="5978e29d4ef434a1">` 元素添加到任何用于生成
    `POST` 请求的 HTML 表单中。当用户提交表单到服务器时，如果返回的 cookie 中的 `_xsrf` 值与请求体中的 `_xsrf` 值不匹配，服务器会完全拒绝该请求。通过这种方式，服务器验证并确保请求来自站点内部，而不是来自恶意的第三方网站；只有当网页从相同的域加载时，浏览器才会发送所需的
    cookie。
- en: Most modern web servers support anti-CSRF cookies. Make sure to consult the
    security documentation of your chosen web server to understand how they implement
    these cookies, since the syntax varies slightly among web servers. [Listing 8-2](ch08.xhtml#ch8list2)
    shows a template file for the Tornado web server that includes anti-CSRF protection.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代 Web 服务器都支持反-CSRF cookies。请确保查阅你所选 Web 服务器的安全文档，了解它们如何实现这些 cookies，因为不同的
    Web 服务器语法稍有不同。[清单 8-2](ch08.xhtml#ch8list2) 显示了一个包含反-CSRF 保护的 Tornado Web 服务器模板文件。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 8-2: A template file for the Tornado web server in Python that includes
    anti-CSRF protection*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 8-2：一个包含反-CSRF 保护的 Tornado Web 服务器 Python 模板文件*'
- en: 'In this example, the `xsrf_form_html()` function ❶ generates a randomized token
    and writes it out in the HTML form as an input element like so: `<input type="hidden"
    name="_xsrf" value="5978e29d4ef434a1">`. The Tornado web server then writes out
    this same token in the HTTP response headers as `Set-Cookie: _xsrf=5978e29d4ef434a1`.
    When the user submits the form, the web server validates that the token from the
    form and the token in the return `Cookie` header match. The browser security model
    will return cookies according to the *same-origin policy*, so the cookie values
    can only have been set by the web server. Hence the server can be sure that the
    `POST` request originated from the host website.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '在这个例子中，`xsrf_form_html()` 函数 ❶ 生成一个随机化的 token，并将其作为 `<input type="hidden" name="_xsrf"
    value="5978e29d4ef434a1">` 元素写入 HTML 表单中。然后，Tornado Web 服务器将在 HTTP 响应头中写出相同的 token，格式为
    `Set-Cookie: _xsrf=5978e29d4ef434a1`。当用户提交表单时，Web 服务器会验证表单中的 token 和返回的 `Cookie`
    头中的 token 是否匹配。浏览器的安全模型将根据 *同源策略* 返回 cookies，因此这些 cookie 的值只能由 Web 服务器设置。因此，服务器可以确认
    `POST` 请求是从主机网站发出的。'
- en: You should use anti-CSRF cookies to validate HTTP requests made from JavaScript,
    too, which allows you to also protect `PUT` and `DELETE` requests. The JavaScript
    needs to query out the anti-CSRF token from the HTML, and pass it back to the
    server in the HTTP request.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该使用反-CSRF cookies 来验证通过 JavaScript 发出的 HTTP 请求，这样你也可以保护 `PUT` 和 `DELETE` 请求。JavaScript
    需要从 HTML 中提取反-CSRF token，并将其传递回服务器以进行 HTTP 请求。
- en: After you’ve implemented anti-CSRF cookies, your website should be much safer.
    Now you need to close one final loophole, to make sure attackers can’t steal your
    anti-CSRF tokens and embed them in malicious code.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现反-CSRF cookies 后，你的网站应该更加安全。现在你需要关闭最后一个漏洞，确保攻击者无法窃取你的反-CSRF token 并将其嵌入恶意代码中。
- en: '**Mitigation 3: Use the SameSite Cookie Attribute**'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**缓解措施 3：使用 SameSite Cookie 属性**'
- en: The final protection against CSRF attacks you must implement is to specify a
    `SameSite` attribute when you set cookies. By default, when a browser generates
    a request to your website, it will attach to the request the last known cookies
    that the site set, regardless of the source of the request. This means that malicious
    cross-site requests will arrive at your web server with any security cookies you
    previously set. This doesn’t defeat anti-CSRF measures in and of itself, but if
    an attacker steals the security token from your HTML forms, and installs it in
    their own malicious forms, they can still launch a CSRF attack.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须实现的最终防护措施是，在设置cookie时指定`SameSite`属性。默认情况下，当浏览器向你的网站发送请求时，它会将网站上最后设置的cookie附加到请求中，无论请求的来源是什么。这意味着恶意的跨站请求仍然会携带你之前设置的任何安全cookie。单靠这一点并不能完全破坏防CSRF措施，但如果攻击者从你的HTML表单中窃取了安全令牌，并将其安装到自己的恶意表单中，他们仍然可以发起CSRF攻击。
- en: Specifying a `SameSite` attribute when you set a cookie tells the browser to
    strip cookies on a request to your site when the request is generated from an
    external domain—like a malicious website set up by an attacker. Setting a cookie
    with the `SameSite=Strict` syntax in [Listing 8-3](ch08.xhtml#ch8list3) ensures
    that the browser will send the cookie only with requests initiated from within
    your own site.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置cookie时指定`SameSite`属性，告诉浏览器当请求来自外部域（如攻击者设立的恶意网站）时，应该剥离cookie。通过在[示例8-3](ch08.xhtml#ch8list3)中设置`SameSite=Strict`语法，可以确保浏览器仅在来自你自己网站的请求中发送cookie。
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 8-3: Setting the SameSite attribute to our anti-CSRF cookie ensures
    that the cookie attaches to only requests from our site.*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例8-3：将SameSite属性设置为我们的防CSRF cookie，确保该cookie仅附加到来自我们网站的请求。*'
- en: 'It’s a good idea to set a `SameSite` attribute on all your cookies, not just
    those used for CSRF protection. There’s a caveat to this, however: if you use
    cookies for session management, setting the `SameSite` attribute to your session
    cookie strips the cookie of any requests to your site generated from other websites.
    This means that any inbound links to your site will force the user to log in again.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有的cookie上设置`SameSite`属性是个好主意，不仅仅是那些用于CSRF保护的cookie。然而有一个警告：如果你使用cookie进行会话管理，将`SameSite`属性设置到你的会话cookie上，会使得所有来自其他网站的请求无法携带该cookie。这意味着任何指向你网站的外部链接都会迫使用户重新登录。
- en: This behavior can be a little annoying for users who already have a session
    open on your site. Imagine if you had to log back into Facebook every time somebody
    shared a video. Frustrating, right? To prevent this behavior, [Listing 8-4](ch08.xhtml#ch8list4)
    shows a more useful value of the `SameSite` attribute, `Lax`, that allows only
    `GET` requests from other sites to send cookies.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于已经在你网站上打开会话的用户来说，这种行为可能会让人有些恼火。试想，如果每次有人分享视频，你都需要重新登录Facebook，那该有多烦人？为了防止这种情况，[示例8-4](ch08.xhtml#ch8list4)展示了`SameSite`属性的一个更实用的值，`Lax`，它只允许来自其他网站的`GET`请求发送cookie。
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 8-4: Setting the SameSite attribute on an HTTP cookie allows cookies
    on GET requests.*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例8-4：在HTTP cookie上设置SameSite属性可以使cookie仅在GET请求时生效。*'
- en: This allows seamless linking into your site, but strips the ability of an attacker
    to forge malicious actions such as `POST` requests. Provided your `GET` requests
    are side-effect free, this setting is no less safe.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得你的网站可以无缝链接，但剥夺了攻击者伪造恶意操作（如`POST`请求）的能力。只要你的`GET`请求没有副作用，这个设置就同样安全。
- en: '**Bonus Mitigation: Require Reauthentication for Sensitive Actions**'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**奖金缓解：要求重新认证敏感操作**'
- en: You might notice that some websites force you to reconfirm your login details
    when you perform sensitive actions, such as when you change your password or initiate
    a payment. This is known as *reauthentication*, and it’s a common way to secure
    sites against CSRF attacks, because it gives the user a clear indication that
    you’re about to do something significant and potentially dangerous.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，当你执行敏感操作时，一些网站会强制要求你重新确认登录信息，例如更改密码或发起支付。这被称为*重新认证*，它是防止CSRF攻击的一种常见方式，因为它明确地提示用户你即将执行一些重要且可能危险的操作。
- en: Reauthentication also has the positive side effect of protecting your users
    if they accidentally leave themselves logged in on shared or stolen devices. If
    your website handles financial transactions or confidential data, you should strongly
    consider forcing your users to reenter their credentials when they perform sensitive
    actions.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 重新认证还有一个积极的副作用，即保护用户免受在共享或被盗设备上不小心保持登录状态的风险。如果你的网站处理金融交易或机密数据，你应该强烈考虑在用户执行敏感操作时强制要求他们重新输入凭据。
- en: '**Summary**'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Attackers can use web requests from other sites to trick your users into performing
    undesired actions. The solution to such cross-site request forgery attacks is
    threefold.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以通过其他网站的网络请求诱使用户执行不希望的操作。解决这种跨站请求伪造（CSRF）攻击的方法有三种。
- en: First, make sure your `GET` requests are side-effect free, so the server state
    is not changed when a user clicks malicious links. Second, use anti-CSRF cookies
    to protect other types of requests. Third, set these cookies with a `SameSite`
    attribute to strip cookies from requests generated by other sites.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确保你的`GET`请求没有副作用，这样当用户点击恶意链接时，服务器状态不会发生变化。其次，使用反CSRF cookies来保护其他类型的请求。第三，设置这些cookies时，使用`SameSite`属性，以便从由其他网站生成的请求中剥离cookies。
- en: For very sensitive actions on your site, it’s a good idea to require the user
    to reauthenticate themselves when they request to perform these actions. This
    adds an additional layer of protection against CSRF attacks, and protects your
    users if they accidentally leave themselves logged in on shared or stolen devices.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你网站上的一些非常敏感的操作，要求用户在执行这些操作时重新认证自己是一个好主意。这为防御CSRF攻击增加了一层额外的保护，并且如果用户不小心在共享或被盗的设备上保持登录状态，也能保护他们。
- en: In the next chapter, you’ll look at how hackers try to exploit vulnerabilities
    during the authentication process.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习黑客如何在认证过程中利用漏洞。
