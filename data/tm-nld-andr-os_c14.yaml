- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: UI Toolkit
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: UI 工具包
- en: '![g14001](image_fi/502680c14/g14001.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![g14001](image_fi/502680c14/g14001.png)'
- en: The UI toolkit provides most of the visual elements on the screen. Buttons,
    text, animations, and the graphics that draw all of those things are all part
    of the UI toolkit on Android.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: UI 工具包提供屏幕上的大多数视觉元素。按钮、文本、动画，以及绘制这些元素的图形，都是 Android 上 UI 工具包的一部分。
- en: In late 2005, there was no UI toolkit (nor was there much of anything else,
    either). There was low-level graphics functionality that allowed some things to
    be drawn on the screen using the Skia library. And there were two conflicting
    ideas for how to build a UI toolkit on top of that graphics engine.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 2005 年底，UI 工具包尚不存在（当时几乎没有其他任何东西）。有一种低级图形功能，允许使用 Skia 库在屏幕上绘制一些东西。并且有两个关于如何在该图形引擎上构建
    UI 工具包的相互冲突的想法。
- en: On one side, Mike Reed’s Skia team had a working system which used XML to describe
    the UI and JavaScript code to provide the programming logic.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在一边，Mike Reed 的 Skia 团队有一个工作的系统，使用 XML 来描述 UI，并用 JavaScript 代码来提供编程逻辑。
- en: On the other side, the framework team preferred a more code-centric approach.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，框架团队更倾向于一种以代码为中心的方法。
- en: This decision, like so many in Android, happened through sheer effort. Andy
    Rubin had recently decided that Android would use Java as the main programming
    language. Joe Onorato decided it was time to dive in and implement the UI layer
    in Java. “It was basically a furious ‘Let’s get something done’ time. Took about
    a day, 24-hour marathon.^([1](#c14-footnote-1)) I had Views [UI elements] up on
    screen.”
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这个决定，像 Android 中的许多决策一样，是通过纯粹的努力达成的。Andy Rubin 最近决定 Android 将使用 Java 作为主要编程语言。Joe
    Onorato 决定是时候深入并用 Java 实现 UI 层了。“基本上是一个愤怒的‘让我们做点什么’时刻。花了一天时间，24 小时的马拉松。^([1](#c14-footnote-1))
    我把 Views [UI 元素] 展示到屏幕上。”
- en: Mathias Agopian said of Joe, “He didn’t tell anybody. One morning he showed
    up and said, ‘Problem solved, it’s in Java. Now we don’t have to talk about it
    anymore because it’s there.’”
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Mathias Agopian 评价 Joe 说：“他没有告诉任何人。一天早上，他出现并说，‘问题解决了，它现在是用 Java 做的了。现在我们不用再讨论这个问题，因为它已经在那里了。’”
- en: 'Mike Reed remembered the decision to go with Joe’s implementation: “Joe came
    in with very clear ideas. Especially because we were remote [the Skia team was
    in North Carolina], we just took a step back and let it work itself out.”'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Mike Reed 回忆起决定采纳 Joe 的实现方案：“Joe 来时带来了非常明确的想法。尤其是因为我们是远程的 [Skia 团队在北卡罗来纳州]，我们只是退后一步，让它自行解决。”
- en: 'Joe demoed his work to Andy, which didn’t go as well as he’d hoped. “The first
    time I showed it to Rubin, he was less than impressed. The first thing I did was
    draw a red X on the screen from the UI. Apparently, that was the thing that something
    would draw on Danger when it kernel-panicked.^([2](#c14-footnote-2)) I showed
    him what I thought was a major achievement: ‘Look, I got a View hierarchy done!’.
    But to him, it looked like the phone just crashed. He’s like, ‘Wow, you made the
    kernel panic.’”'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Joe 向 Andy 演示了他的工作，但效果不如他预期。“第一次我向 Rubin 演示时，他并不怎么印象深刻。我做的第一件事是在 UI 上画了一个红色的
    X。显然，那是 Danger 内核崩溃时会绘制的东西。^([2](#c14-footnote-2)) 我向他展示了我认为是重大成就的东西：‘看，我完成了 View
    层次结构！’。但在他看来，这就像是手机崩溃了。他说，‘哇，你让内核崩溃了。’”
- en: But Joe’s work was significant. It allowed developers on the team to start writing
    other pieces of the system that needed UI functionality.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但 Joe 的工作是重要的。它使得团队中的开发者能够开始编写其他需要 UI 功能的系统部分。
- en: Of course, many parts of the system were in flux during early development, and
    the UI toolkit was one of them. The system that Joe built was multi-threaded.^([3](#c14-footnote-3))
    This approach is unusual in UI toolkits, as it requires very careful coding to
    correctly handle requests coming in willy-nilly without regard to threading concerns.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，系统的许多部分在早期开发过程中都在变化，UI 工具包就是其中之一。Joe 构建的系统是多线程的。^([3](#c14-footnote-3)) 这种方法在
    UI 工具包中不常见，因为它需要非常小心的编码，以正确处理那些随意而来的请求，而不考虑线程问题。
- en: In March of 2006, three months after Joe wrote the initial View system, Mike
    Cleron joined Android. He saw complexities mounting in the growing code base that
    depended on Joe’s multi-threaded UI toolkit.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 2006 年 3 月，在 Joe 编写了初始的 View 系统三个月后，Mike Cleron 加入了 Android。他看到了随着代码库的不断增长，依赖
    Joe 的多线程 UI 工具包的复杂性越来越高。
- en: Mike Cleron and the UI Toolkit Rewrite
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mike Cleron 和 UI 工具包重写
- en: 'Mike Cleron never pictured himself going into computer science until he was
    in college. “I thought I was going to be an Econ major until I took Econ 1.” His
    computer science classes worked out better: “I really enjoyed my freshman year
    courses where we learned not about programming, but about data structures and
    algorithms. I thought binary tree traversal was the coolest thing ever. Big time
    nerd.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Mike Cleron从未想过自己会进入计算机科学领域，直到大学时才改变主意。“我本以为自己会成为经济学专业的学生，直到我上了经济学1课。”他的计算机科学课程反而更为顺利：“我非常喜欢大一时的课程，我们学的不是编程，而是数据结构和算法。我觉得二叉树遍历是最酷的事情。真的是个大书呆子。”
- en: “It was the only thing I could possibly have gotten a degree in, because it
    was the only thing I could do still reasonably competently when the rest of my
    brain was shut down from exhaustion. I took a bunch of political science courses,
    close to being a major, but at one o’clock in the morning, 250 pages from finishing
    a 500 page reading assignment, I’m asleep. But when I’m 16 hours into a 16 hour
    programming assignment, my reptile brain is still letting me program in Emacs
    on my VT100.^([4](#c14-footnote-4)) I thought, ‘I’d better major in this because
    I can graduate.’”
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: “这是我唯一能获得学位的专业，因为这是唯一一个当我大脑因疲劳而几乎停止工作时，我仍然能相对胜任的事。 我上过一堆政治学课程，差点成为该专业的学生，但在凌晨一点，当我还差250页就完成500页的阅读作业时，我已经睡着了。但是当我做一个16小时的编程作业时，我的爬虫大脑仍然让我在VT100上用Emacs编程。^([4](#c14-footnote-4))
    我当时想，‘我最好还是选这个专业，因为我能顺利毕业。’”
- en: He continued on in computer science, eventually getting his master’s degree,
    and stayed on at Stanford as a lecturer, developing some of the curriculum for
    undergraduates to make their on-ramp to computer science a little less severe
    than his had been (Mike’s was the first year that Stanford even offered a computer
    science degree). “My mission as a lecturer there was to try to make the people
    who followed in my footsteps have less of a difficult time than I did. They [Stanford]
    had basically taken all their graduate level courses, subtracted a hundred, and
    said ‘Now you have an undergraduate course.’ They all assumed that you’d already
    had a computer science education and now you just needed to know a little more
    about compilers or automata.”
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 他继续深造计算机科学，最终获得了硕士学位，并留在斯坦福大学担任讲师，开发一些本科课程，旨在让学生进入计算机科学的门槛不再像他当年那么高（Mike所在的那一年，斯坦福大学才首次提供计算机科学学位）。“我在斯坦福的使命就是尽量让那些跟随我脚步的人，少走一些我曾经走过的弯路。斯坦福基本上把所有研究生课程的难度减去100分，然后就说‘现在你有了一门本科课程’。他们都假设你已经接受过计算机科学教育，现在只需要学一点关于编译器或自动机的知识。”
- en: Mike worked at Apple after he left academia, then moved to WebTV in 1996, where
    he worked with many future Android engineers. WebTV was acquired by Microsoft
    in 1997, and Mike continued working there for several more years.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Mike离开学术界后曾在Apple工作，1996年加入WebTV，在那里与许多未来的Android工程师一起工作。WebTV在1997年被微软收购，Mike继续在那里工作了几年。
- en: In early 2006, Mike’s manager at Microsoft, Steve Horowitz, left to join the
    Android team at Google. “It was really Steve leaving that made me think it was
    time for me to go. I wasn’t having that much fun at Microsoft anymore, and Steve
    leaving wasn’t going to make it better.”
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 2006年初，Mike在微软的经理Steve Horowitz离开，加入了Google的Android团队。“正是Steve的离开让我觉得是时候离开了。我在微软已经不再那么开心了，而Steve的离开也不会让情况变得更好。”
- en: Steve said, “I remember having the talk with Mike Cleron, telling him before
    I had actually come to Google. I said, ‘Mike, I have to let you know that I’ve
    just accepted an offer to go lead engineering on the Android acquisition at Google.’
    Before I could finish the sentence, he was like ‘Here’s my resume!’ Mike was my
    first hire, and came on board fairly soon after I did.”
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Steve说：“我记得我和Mike Cleron谈话的时候，在我正式加入Google之前就告诉了他。我说，‘Mike，我必须告诉你，我刚刚接受了一个去Google领导Android收购工程的邀请。’我话还没说完，他就拿出了‘这是我的简历！’Mike是我在Google的第一位员工，他在我加入后不久就加入了团队。”
- en: Mike began life on Android by working on the UI toolkit, along with a host of
    other things, including the launcher^([5](#c14-footnote-5)) and the system UI.
    He eventually became the manager of what was called the “framework team,” which
    comprised the UI toolkit, the framework team,^([6](#c14-footnote-6)) and various
    parts of the system UI, like the lock screen, launcher, and the notification system.^([7](#c14-footnote-7))
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Mike 在 2006 年 3 月加入 Android 后，开始了他在 Android 上的工作，参与了 UI 工具包的开发以及其他许多工作，包括启动器^([5](#c14-footnote-5))和系统
    UI。他最终成为了被称为“框架团队”的负责人，该团队包含了 UI 工具包、框架团队^([6](#c14-footnote-6))，以及系统 UI 的多个部分，如锁屏、启动器和通知系统。^([7](#c14-footnote-7))
- en: One of Mike’s first projects after joining Android in March of 2006 was to rewrite
    the UI toolkit code that Joe Onorato had written. There was growing disagreement
    over the toolkit’s architecture; some people on the team felt that the multi-threaded
    nature of the system was causing undue complexity in both that code and in the
    apps that used it.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Mike 在 2006 年 3 月加入 Android 后的第一个项目之一是重写 Joe Onorato 编写的 UI 工具包代码。关于工具包架构的分歧不断加剧；团队中的一些人认为系统的多线程特性使得代码以及使用它的应用程序变得过于复杂。
- en: Mike figured there were three possible approaches for a UI toolkit. “The best
    outcome would be thread-safe, easy to use multi-threading. Second was single-threaded
    but at least you could wrap your head around it. Worst was multi-threaded but
    buggy, because you couldn’t reason about it. We were headed for the last thing.”
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Mike 认为 UI 工具包有三种可能的方案。“最好的结果是线程安全、易于使用的多线程。第二种是单线程，但至少能理解它。最糟的情况是多线程但有 bug，因为你无法推理它。我们当时正朝着最糟的情况前进。”
- en: Mathias Agopian talked about writing code for the multi-threaded system. “When
    you wrote a View, you couldn’t write it the traditional way, with member variables.^([8](#c14-footnote-8))
    That led to a lot of multi-threaded bugs because app developers were not used
    to it. In particular, Chris DeSalvo^([9](#c14-footnote-9)) was a fierce opponent
    to this multi-threaded thing. Joe and Chris were going at it, fighting all the
    time, Chris saying it was crap, didn’t work. Mike was trying to weigh in, see
    what could be done.”
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Mathias Agopian 讲述了为多线程系统编写代码的过程。“当你写一个 View 时，你不能像传统方式那样写它，不能使用成员变量。^([8](#c14-footnote-8))
    这导致了很多多线程的 bug，因为应用开发者不习惯这种方式。特别是，Chris DeSalvo^([9](#c14-footnote-9)) 强烈反对这种多线程方式。Joe
    和 Chris 总是争论不休，Chris 说这不行，根本无法工作。Mike 尝试着介入，看看能做些什么。”
- en: 'Steve Horowitz got involved, as the director of the engineering team: “It was
    down to me deciding which one are we going to pick, because they could not convince
    one another. Honestly, I think we would’ve been okay with either direction, but
    I had to make a call.”'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Steve Horowitz 作为工程团队的主管也参与其中：“最后是我决定我们要选哪个方向，因为他们彼此无法说服对方。老实说，我认为我们对任何方向都能接受，但我必须做出决定。”
- en: 'Mathias continued: “Joe literally dropped it: ‘Do whatever you want. It’s not
    mine anymore.’”'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Mathias 继续说道：“Joe 直接放弃了：‘你想怎么做就怎么做。它不再属于我了。’”
- en: Mike then rewrote the UI toolkit to its current single-threaded form. “That’s
    the nastiest CL^([10](#c14-footnote-10)) that I worked on, trying to make all
    that stuff work in a different way.” Mike’s code formed the basis of the UI toolkit
    that the Android system had from that moment on.^([11](#c14-footnote-11))
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，Mike 将 UI 工具包重写成现在的单线程形式。“这是我做过的最棘手的 CL^([10](#c14-footnote-10))，试图以不同的方式让所有这些东西正常工作。”
    Mike 的代码为 Android 系统从那时起的 UI 工具包奠定了基础。^([11](#c14-footnote-11))
- en: Along the way, Mike wrote, or at least inherited and enhanced, other fundamental
    pieces of Android’s UI toolkit, like View (the basic building block of every UI
    class), ViewGroup (the parent and container of views), ListView (a list of data
    that could be scrolled and flung by the user), and various Layout classes (ViewGroups
    that define how their children are sized and positioned).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，Mike 编写了或至少继承并增强了 Android UI 工具包的其他基本组成部分，如 View（每个 UI 类的基本构建块）、ViewGroup（视图的父容器）、ListView（可滚动、用户可以滑动的数据列表）和各种布局类（定义其子视图大小和位置的
    ViewGroups）。
- en: '![](image_fi/502680c14/f14001.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c14/f14001.png)'
- en: Mike Cleron, presenting at the first internal tech talk about Android at Google
    in August of 2007 (picture courtesy Brian Swetland)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Mike Cleron，在 2007 年 8 月 Google 内部首次关于 Android 的技术演讲中展示（图片由 Brian Swetland 提供）
- en: But Android’s UI toolkit is more than just views and layout classes. For example,
    the UI toolkit is responsible for handling text.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 但 Android 的 UI 工具包不仅仅是视图和布局类。例如，UI 工具包还负责处理文本。
- en: Eric Fischer and TextView
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Eric Fischer 和 TextView
- en: Mike Cleron said that when he arrived at Android, “Eric Fischer, as far as I
    could tell, just found TextView in a stone cavern in a mountain somewhere. There
    was TextView in finished form. I never saw anyone creating TextView. It’s just
    always been there.”
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Mike Cleron 说，当他到达 Android 时，“Eric Fischer，就我所知，就是在某座山的石洞里发现了 TextView。TextView
    已经是完成的版本。我从来没见过有人在创建 TextView，它一直都在那里。”
- en: A few years earlier, Eric had worked with Mike Fleming at Eazel, a startup founded
    by some members of the early Macintosh team. Both Eric and Mike went to Danger
    when Eazel fell apart in 2001.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 几年前，Eric 和 Mike Fleming 曾在 Eazel 合作，Eazel 是由一些早期 Macintosh 团队成员创办的初创公司。当 Eazel
    在 2001 年解散后，Eric 和 Mike 一起去了 Danger。
- en: One of the appeals of small companies like Danger is the ability to work on
    many different kinds of projects, compared to the opportunities available on a
    team that supports just part of a larger product. While at Danger, Eric worked
    on everything from text and internationalization to the build system to performance
    optimization. Working at Danger also gave Eric, years later, an appreciation for
    the faster development process at Android. “Android offered the promise of much
    faster and more flexible development by giving Google, and not the carriers, final
    responsibility for what went into the software.”
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 像 Danger 这样的小公司吸引人的一个原因是能够参与多种不同类型的项目，而不像只支持大产品一部分的团队那样机会有限。在 Danger 工作时，Eric
    涉及了从文本和国际化到构建系统，再到性能优化的各个方面。多年后，Eric 对 Android 更快的开发过程有了更深的理解。“Android 通过让 Google
    而不是运营商最终决定软件中包含的内容，提供了更快、更灵活的开发承诺。”
- en: Eric joined the Android team at Google in November of 2005\. “My very first
    piece of code for Android was a C++ text storage class. For the first few weeks
    I was there, we thought we were going to write the user interface elements as
    C++ classes with JavaScript bindings.” A few weeks later, Andy made the call to
    standardize on Java for Android.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Eric 于 2005 年 11 月加入 Google 的 Android 团队。“我为 Android 编写的第一段代码是一个 C++ 文本存储类。在我刚到的几周里，我们原以为我们会将用户界面元素编写成
    C++ 类，并使用 JavaScript 绑定。”几周后，Andy 决定统一使用 Java 来开发 Android。
- en: “Once we decided to use Java instead, one of the first steps toward getting
    a working system was writing a new implementation of the core classes of the Java
    standard library, and I did some of that. All of that code except for the time
    zone handling was, I believe, replaced by the Apache Commons implementation before
    the first public release.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: “一旦我们决定改用 Java，朝着建立一个可用系统的第一步就是编写 Java 标准库核心类的新实现，我做了一些这方面的工作。除了时区处理外，我相信在第一次公开发布之前，所有这些代码都被
    Apache Commons 的实现所取代。”
- en: “I touched some other parts of the software, but most of my work went into the
    text display and editing system. The earliest development hardware was candybar^([12](#c14-footnote-12))
    phones with only a 12-key numeric keypad, which is why there is a `MultiTapKeyListener`
    class for that style of agonizingly slow text entry. Fortunately, we quickly moved
    on to the Sooner development hardware with a tiny QWERTY keyboard instead.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: “我接触过一些软件的其他部分，但大部分工作都集中在文本显示和编辑系统上。最早的开发硬件是带有12键数字键盘的‘糖果条’手机，这也是为什么有了 `MultiTapKeyListener`
    类来处理那种痛苦而缓慢的文本输入方式。幸运的是，我们很快过渡到了带有迷你 QWERTY 键盘的 Sooner 开发硬件。”
- en: '![](image_fi/502680c14/f14002.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c14/f14002.png)'
- en: On the left is the early candybar phone, nicknamed Tornado, which the team used
    until the later Sooner device. The phone on the right is an HTC Excalibur, which
    was the basis for Sooner after some industrial design modifications (and replacing
    the Windows Mobile OS with Android). (Picture courtesy Eric Fischer.)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 左边是早期的“糖果条”手机，绰号“龙卷风”，团队一直使用它，直到后来的 Soonerc 设备。右边的手机是 HTC Excalibur，它在经过一些工业设计修改后（并将
    Windows Mobile 操作系统替换为 Android）成为 Soonerc 的基础。（图片来源：Eric Fischer）
- en: “I made sure to handle bidirectional text layout from the beginning, which was
    sufficient for Hebrew, but not for Arabic.”^([13](#c14-footnote-13))
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: “从一开始，我就确保处理双向文本布局，这对于希伯来语是足够的，但对阿拉伯语就不够了。”^([13](#c14-footnote-13))
- en: Software engineers tend to get emotionally attached to their code, and that
    was the case for Eric, who displayed his passion in the license plate for his
    car. “I had the California EBCDIC personalized license plate, for the 1960s IBM
    character code that competed with ASCII. Someone else in building 44 had UNICODE.”^([14](#c14-footnote-14))
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程师往往会对自己的代码产生情感依赖，Eric 就是如此，他将这种热情体现在了他的车牌上。“我有一块加州的 EBCDIC 个性化车牌，代表了 1960
    年代 IBM 的字符编码，它与 ASCII 竞争。44 楼的另一位同事则有 UNICODE 的车牌。”^([14](#c14-footnote-14))
- en: '![](image_fi/502680c14/f14003.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c14/f14003.png)'
- en: UNICODE battles EBCDIC as text standards in the Google parking lot (Eric Fischer’s
    car is the one with EBCDIC). (Picture courtesy Eric Fischer.)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Google 停车场，UNICODE 与 EBCDIC 作为文本标准进行较量（Eric Fischer 的车上使用的是 EBCDIC）。(图片由 Eric
    Fischer 提供。)
- en: Text rendering (drawing the actual pixels for the text that is seen on the screen)
    was handled at a different layer, by Skia, discussed in Chapter 11 (“Graphics”).
    Skia rendered font characters into bitmaps (images) using an open source library
    called FreeType.^([15](#c14-footnote-15))
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 文本渲染（即绘制屏幕上显示的实际文本像素）由 Skia 在不同的层级处理，这在第 11 章（“图形”）中有讨论。Skia 使用一个名为 FreeType
    的开源库将字体字符渲染成位图（图像）。^([15](#c14-footnote-15))
- en: One of the pervasive problems in the early days of Android was performance;
    the limited capabilities of the hardware at that time drove many of the decisions
    about the software design and implementation. These decisions bled over into how
    the code was written for the platform and the applications. As Eric said, “All
    my attempts at generality were undermined by the urgent performance concerns of
    running fast enough to be usable on the very slow early hardware. I had to put
    in all kinds of special fast paths to avoid memory allocation and floating point
    math when laying out and drawing plain ASCII strings with no style markup and
    no transformations like ellipsizing or password-hiding.”
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Android 初期一个普遍存在的问题是性能；当时硬件能力有限，这驱动了很多软件设计和实现的决策。这些决策影响了平台和应用的代码编写方式。正如 Eric
    所说，“我所有关于通用性的尝试都被必须足够快速以便在非常缓慢的早期硬件上运行的迫切性能问题所削弱。我不得不做出各种特殊的快速路径，以避免内存分配和浮点运算，尤其是在布局和绘制没有样式标记且没有变换（如省略或密码隐藏）的普通
    ASCII 字符串时。”
- en: Eric observed an ongoing tension on the team, with disagreements on how things
    should be built. “Sometimes it felt like it shouldn’t have succeeded. It was a
    classic ‘second system effect’ where a lot of us had done something similar before
    and thought we could do it again without all the mistakes from the first time.
    Those of us coming from Danger wanted to make another user interface toolkit based
    on Java class inheritance, but get it right this time with a real operating system
    underneath and a robust service architecture on the other side of the network.
    The people coming from PalmSource wanted to do their activity lifecycle model
    and interprocess communication model again, but get it right this time. The people
    coming from Skia wanted to do QuickDraw GX again, but get it right this time.
    We were all wrong, and wrong in ways that clashed badly with each other. It took
    years of work to straighten out the consequences of all our bad early decisions
    and the interactions between them.”
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Eric 观察到团队内部存在持续的紧张气氛，大家对如何构建系统存在分歧。“有时候感觉这个项目本不该成功。这是一个典型的‘第二系统效应’，我们中的许多人之前做过类似的事情，认为可以在没有第一次错误的情况下重新做一遍。来自
    Danger 的我们想要基于 Java 类继承构建另一个用户界面工具包，但这次要确保在真实操作系统的基础上，再加上网络另一端强大的服务架构。来自 PalmSource
    的人们则想要重新做他们的活动生命周期模型和进程间通信模型，但这次要做到完美。来自 Skia 的人们则想要再次做 QuickDraw GX，但这次要做到正确。我们都错了，而且错得彼此冲突。我们花了几年的时间才理清我们所有早期错误决策的后果以及它们之间的相互影响。”
- en: Romain Guy and UI Toolkit Performance
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Romain Guy 与 UI 工具包性能
- en: More help for the budding UI toolkit came later, in 2007, in the form of an
    intern from France, Romain Guy.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 2007 年，一位来自法国的实习生 Romain Guy 为正在成长的 UI 工具包提供了更多帮助。
- en: Romain became a tech journalist in high school, writing articles on various
    programming languages, operating systems, and coding techniques. This freelance
    job gave him experience in, and access to, many of the popular platforms and languages
    of that era. He was introduced to operating systems like Linux, AmigaOS, and BeOS,
    and he became an expert in Java.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Romain在高中时成为了一名科技记者，撰写关于各种编程语言、操作系统和编码技术的文章。这份自由职业工作让他获得了当时许多流行平台和语言的经验和接触。他接触到了像Linux、AmigaOS和BeOS这样的操作系统，并且成为了Java的专家。
- en: Romain went to a university in France and majored in computer science. But that
    school leaned more heavily on leadership and project management skills than pure
    programming, and Romain preferred the programming part of software development.
    So he came to Silicon Valley.^([16](#c14-footnote-16))
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Romain在法国的大学里攻读计算机科学专业。但那所学校更注重领导力和项目管理技能，而不是纯粹的编程，Romain更喜欢软件开发中的编程部分。因此，他来到了硅谷。^([16](#c14-footnote-16))
- en: Romain got an internship with Sun Microsystems,^([17](#c14-footnote-17)) where
    he spent a year working on Swing, the UI toolkit for the Java platform.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Romain曾在Sun Microsystems^([17](#c14-footnote-17))实习，在那里他花了一年时间工作于Swing，这是Java平台的UI工具包。
- en: The following year, in April of 2007, Romain came back to the US for an internship
    at Google. He landed on the Google Books team, where he was asked to work on a
    desktop application related to Gmail. It wasn’t a topic that excited him, and
    he only lasted a week on that project. He knew people at Google like Bob Lee (who
    transferred to Android’s core libraries team around the same time), Dick Wall
    (who worked on Android developer relations), and Cédric Beust (who was writing
    the Android Gmail app). They convinced Romain to come over to the Android team,
    and convinced management that the team needed him. Cédric asked Steve Horowitz
    to pull strings, and between Steve and Andy, they made it happen.^([18](#c14-footnote-18))
    Romain transferred to the UI toolkit team, where he helped out Mike Cleron.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 第二年，即2007年4月，Romain回到美国，在Google进行实习。他加入了Google Books团队，并被要求参与一个与Gmail相关的桌面应用程序的开发。这不是一个让他感兴趣的话题，他在那个项目上只坚持了一周。他认识Google的许多人，比如Bob
    Lee（大约在同一时间转到Android核心库团队）、Dick Wall（负责Android开发者关系）和Cédric Beust（负责编写Android
    Gmail应用程序）。他们说服Romain加入Android团队，并说服管理层认为团队需要他。Cédric让Steve Horowitz伸出援手，在Steve和Andy的帮助下，这一切得以实现。^([18](#c14-footnote-18))
    Romain转到了UI工具包团队，在那里他协助Mike Cleron工作。
- en: 'At the end of the summer, Romain flew back to France to pick up his degree
    and then returned to Google^([19](#c14-footnote-19)) to start a full-time job.
    He had gotten offers from both Sun and Google, but decided to join Google. “Sun
    had made me an offer that was much better than Google’s. I joined the Android
    team because I loved the vision, the reason why we were doing this. There were
    a lot of reasons for Google, but it was also the idea: it was a space that could
    use a good open source operating system. At that time, there was no such thing
    that was viable for consumers at scale.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 夏天结束时，Romain飞回法国拿到学位，然后回到Google^([19](#c14-footnote-19))开始了全职工作。他曾收到Sun和Google的工作邀请，但最终决定加入Google。“Sun给我的工作邀请比Google的要好得多。我加入Android团队是因为我喜欢那个愿景，喜欢我们做这件事的原因。加入Google有很多原因，但同样重要的是：这是一个可以使用一个好的开源操作系统的领域。那时，没有一个可行的东西能够大规模服务消费者。”
- en: “Linux already had something. But to me this had a better chance because it
    was focused on a particular product. It was not a spec or just an idea of an operating
    system; it was also building the product. It was clearly a challenge, and chances
    are it would not succeed, but we had a shot at it. The best way to make it happen
    was to help.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: “Linux已经有了一些东西。但对我来说，这个项目的机会更大，因为它专注于一个特定的产品。它不仅仅是一个操作系统的规范或理念；它还在构建产品。显然这是一个挑战，成功的可能性不大，但我们有机会实现它。实现这一点的最好方法就是帮助。”
- en: “It was actually part of what made the job so fun in the early days. Until probably
    Gingerbread,^([20](#c14-footnote-20)) or maybe even ICS,^([21](#c14-footnote-21))
    it wasn’t clear it was successful enough to survive. Every release was not quite
    a ‘do-or-die,’ but it was ‘do-or-maybe you should be careful about what’s going
    to happen.’”
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: “这实际上是早期工作如此有趣的一部分。直到大概Gingerbread^([20](#c14-footnote-20))，甚至可能是ICS^([21](#c14-footnote-21))，我们都不确定它是否成功到足以存活下来。每次发布并不完全是‘生死攸关’，但也有点像是‘做或者也许你应该小心接下来会发生什么’。”
- en: When Romain started as a full time employee, in October of 2007, the initial
    SDK was about to ship. There was still a lot of work to do on the platform to
    make it to 1.0\. One of the first things he worked on was making touch input functional,
    which had become a hard requirement for that first release.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Romain 于 2007 年 10 月作为全职员工加入时，初始的 SDK 就要发布了。平台上仍然有很多工作要做才能达到 1.0 版本。他开始时从使触摸输入功能化做起，这是第一个发布版本的硬性要求。
- en: He also spent significant time and effort making the toolkit code faster. “Mike
    asked me to improve performance of invalidating^([22](#c14-footnote-22)) and re-layout.^([23](#c14-footnote-23))
    Until then, `invalidate()`^([24](#c14-footnote-24)) was really dumb; it would
    just go up the hierarchy and mark everything invalid. If you did it again, it
    would go back up again. It was really slow. So I spent a lot of time adding all
    those dirty flags.^([25](#c14-footnote-25)) That made a huge difference.”
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 他还花了大量时间和精力使工具包代码更快。“Mike 要求我提高失效^([22](#c14-footnote-22)) 和重新布局^([23](#c14-footnote-23))
    的性能。直到那时，`invalidate()`^([24](#c14-footnote-24)) 是非常笨的；它会向上遍历整个层级并标记所有项为无效。如果你再调用一次，它会再次向上遍历。这个过程非常慢。所以我花了很多时间添加所有这些脏标志^([25](#c14-footnote-25))。这带来了巨大的改善。”
- en: But to do this work, he needed a tool that didn’t exist.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 但要做这些工作，他需要一个并不存在的工具。
- en: There is a grand tradition on the Android team of having many small, single-purpose
    developer tools, each of which worked a bit differently than the others, and none
    of which worked together. This has changed over time, and most of these apps are
    now incorporated into the Android Studio IDE so that developers have consistent
    tools. But in the early days, the tools were written separately, one by one, by
    the developers who needed them.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 团队有一个悠久的传统，就是开发许多小型、单一用途的开发者工具，每个工具的工作方式都有些不同，而且它们之间并不兼容。随着时间的推移，这种情况发生了变化，大多数这些应用程序现在已经并入
    Android Studio IDE 中，以便开发者能够使用一致的工具。但在早期，这些工具是由需要它们的开发者一个一个单独编写的。
- en: For the view invalidation performance work, Romain needed a new tool. “I wrote
    ‘hierarchyviewer’ because it was really hard to know what was getting invalidated.
    So I wrote this viewer that would show me the tree of views and blink them a different
    color when they were marked dirty, when they would draw, and when there was a
    `requestLayout()`.^([26](#c14-footnote-26)) As I was making optimizations, I could
    see what was happening. It would blink less!”
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行视图失效性能优化工作时，Romain 需要一个新工具。“我写了一个 ‘hierarchyviewer’，因为很难知道到底是哪个部分被标记为失效。所以我写了这个查看器，它可以显示视图树，并在视图被标记为脏时用不同的颜色闪烁，显示它们何时会被绘制，以及何时有
    `requestLayout()`。^([26](#c14-footnote-26)) 当我进行优化时，我能够看到发生了什么。它的闪烁次数减少了！”
- en: Another UI performance project that Romain took on was ListView.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个 Romain 承接的 UI 性能项目是 ListView。
- en: ListView is a container that holds (wait for it . . . ) a list of items. The
    trick with this element in particular is that it is, by its very nature, incredibly
    performance-sensitive. Its only purpose is to contain tons of data (images and
    text) and to be able to scroll through the items quickly. The key is “quickly.”
    As items are coming onto the screen, the UI toolkit has to create, size, and place
    all of these new items, which then disappear as soon as they scroll off the other
    edge of the screen. It’s a lot of effort to do all of this, and on that early
    hardware the toolkit couldn’t keep up with it, so the user experience was . .
    . not great.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: ListView 是一个容器，用于包含（等一下……）一系列项。这个元素的诀窍在于，它天生对性能非常敏感。它的唯一目的是包含大量数据（图像和文本），并能够快速地滚动浏览这些项。关键是“快速”。当项进入屏幕时，UI
    工具包必须创建、调整大小并放置这些新项，然后它们在滚动出屏幕的另一边时就会消失。做这些工作需要付出很多努力，而在早期硬件上，工具包无法跟上这些需求，因此用户体验……并不理想。
- en: When Romain inherited this widget from Mike Cleron, it was able to contain,
    render, and scroll items. But its performance was far from acceptable, so Romain
    put a huge amount of effort into optimizing it. Avoiding object and UI element
    creation was a general pattern of Android development at the time for performance
    reasons, and ListView was an easy place to see why that pattern evolved.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Romain 从 Mike Cleron 那里接手这个小部件时，它能够容纳、渲染并滚动项。但是它的性能远不能令人接受，因此 Romain 花费了大量的精力进行优化。出于性能考虑，避免创建对象和
    UI 元素在当时的 Android 开发中是一个通用的模式，而 ListView 是一个很好的例子，能够让我们理解为什么这个模式会演变。
- en: Launcher and Apps
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动器和应用
- en: Like others on the team, Romain jumped into many other projects on Android in
    those early days (and beyond). Besides his core UI toolkit responsibilities, he
    took over the launcher application from Mike (who had started to lead the framework
    team and had other responsibilities beyond code), and also helped out on the Email^([27](#c14-footnote-27))
    app when the contractor working on it left. Fortunately, Romain had relevant experience
    from his time as a tech journalist. “I had written articles on how to implement
    the IMAP protocol, so I was not completely out of my league. But that was on top
    of everything else that we were doing . . . which was a little much.”
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 和团队中的其他成员一样，Romain在那些早期（以及之后）也参与了许多其他Android项目。除了核心的UI工具包职责外，他还接管了Mike负责的启动器应用（Mike开始领导框架团队并承担了除代码之外的其他职责），并且在负责Email^([27](#c14-footnote-27))应用的承包商离开后，他也提供了帮助。幸运的是，Romain有相关的技术记者经验。“我曾写过关于如何实现IMAP协议的文章，所以我并不完全不懂。但这又是在我们做的其他所有事情之上...这有点多。”
- en: He also helped out with other apps. Since the platform was new, a lot of functionality
    was developed in response to application requirements. Applications needed new
    features from the platform, so they worked with the platform team to implement
    them.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 他还帮助了其他应用程序。由于平台是新的，许多功能是为了响应应用需求而开发的。应用程序需要平台的新功能，因此他们与平台团队合作来实现这些功能。
- en: One of the ongoing efforts for the apps teams at that time was performance.
    “Serving their needs was important, but also having them understand the cost of
    things. That’s why hierarchyviewer came to be, because apps were creating way
    too many views. View hierarchies were way too expensive for our devices. That
    was a way to show them, ‘You can see this monster tree that you’ve created, and
    this is very expensive for us.’ Despite all of the optimizations we had, that
    was very expensive. So it was a way to help them figure out how to optimize their
    code. That’s how I also came up with the `merge` tag, the `include` tag, and the
    `viewstub`,^([28](#c14-footnote-28)) to help them achieve what they need, but
    also reclaim some of that performance.”
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当时应用团队的一个持续努力是性能。“满足他们的需求很重要，但同样重要的是让他们理解事物的成本。这就是为什么HierarchyViewer出现的原因，因为应用程序创建了太多的视图。视图层次结构对于我们的设备来说太昂贵了。这是一个向他们展示‘你们创建的这个庞大树形结构，给我们带来了很高的成本’的方式。尽管我们做了所有的优化，但这依然是非常昂贵的。所以它帮助他们了解如何优化代码。这也是我想出`merge`标签、`include`标签和`viewstub`标签的原因，^([28](#c14-footnote-28))帮助他们完成需求的同时，也能重新夺回一些性能。”
- en: Manifest Density
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清单密度
- en: After 1.0 shipped, there was still plenty of work to do to get the platform
    to the state the team originally envisioned. One of the projects that had begun
    early on but which wasn’t fully realized at 1.0 was support for different screen
    densities, which is described earlier in the Resources section of Chapter 13 (“Framework”).
    After 1.0, Romain took over the work begun earlier by Dianne and finished it off
    in time for the Eclair release,^([29](#c14-footnote-29)) in the Fall of 2009.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.0版本发布后，仍然有很多工作要做，以便将平台发展到团队最初设想的状态。一个早期开始但在1.0时未完全实现的项目是对不同屏幕密度的支持，这在第13章（“框架”）的资源部分中有所描述。1.0之后，Romain接管了Dianne早期开始的工作，并在2009年秋季的Eclair版本发布时完成了它。^([29](#c14-footnote-29))
- en: Screen density has a direct impact on the quality of the images on that screen;
    a screen with higher density can represent more information in the same space,
    leading to sharper, better images. Higher-density screens have resulted in higher-quality
    phone and laptop displays over the last several years. Higher-density camera sensors
    have also led to higher-quality photos, as the megapixel count of images produced
    from those sensors has soared.^([30](#c14-footnote-30))
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕密度直接影响该屏幕上图像的质量；高密度屏幕可以在相同的空间内呈现更多信息，从而产生更清晰、更好的图像。近年来，高密度屏幕导致了手机和笔记本显示器质量的提升。高密度的摄像头传感器也带来了更高质量的照片，因为这些传感器拍摄的图像的百万像素数大幅增加。^([30](#c14-footnote-30))
- en: The initial G1 device, and all other Android devices until the Droid, had a
    density of 160 pixels per inch (PPI), which meant that there were 160 distinct
    color values (vertically and horizontally) in every inch of screen real estate.
    The Droid had a density of 265 PPI. This higher density meant that more information
    could be represented, resulting in, say, smoother curved lines and text, or images
    with more detail. But developers needed a way to define their UIs to take advantage
    of these changes in density.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最初的 G1 设备，以及直到 Droid 发布之前的所有其他 Android 设备，屏幕密度为 160 像素每英寸（PPI），这意味着每英寸的屏幕空间中，垂直和水平方向上都有
    160 个不同的颜色值。Droid 的屏幕密度为 265 PPI。更高的密度意味着可以表示更多的信息，从而带来例如更平滑的曲线和文字，或者具有更多细节的图像。但开发者需要一种方式来定义他们的
    UI，以便利用这些密度变化。
- en: The system that Dianne, and then Romain, implemented allowed developers to define
    their UIs independent of the actual size of the pixels on a device, using the
    unit *dp* (*density-independent pixel*). The system would then scale these UIs
    appropriately based on the actual density of the device that the application was
    running on. This mechanism for handling screen density, along with related capabilities
    in the resource system for serving up different assets based on the density and
    the entire UI layout system for handling UI organization independent of screen
    sizes, were critical as Android matured. Android changed from a platform running
    on top of only one kind of device (the G1 and its follow-on devices at the same
    size and density) to a world full of all kinds of screen sizes and densities as
    manufacturers started to introduce vastly different formats for their customers.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Dianne 和随后 Romain 实现的系统，允许开发者在不依赖设备上像素实际大小的情况下，使用 *dp*（*密度无关像素*）来定义他们的 UI。然后该系统会根据应用程序运行设备的实际屏幕密度适当调整这些
    UI。处理屏幕密度的这一机制，以及资源系统中基于密度提供不同资源的相关功能和整个 UI 布局系统，这些都是 Android 发展过程中至关重要的。随着制造商开始为其客户推出各种不同格式的设备，Android
    从一个仅在一种设备类型（G1 及其后续设备，具有相同的大小和密度）上运行的平台，转变为一个充满各种屏幕大小和密度的世界。
- en: Toolkit Performance
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具包性能
- en: Many pieces make up what the team calls the UI toolkit, since it’s basically
    the visual side of the entire framework. What really defined the work for the
    team at that time (Joe, Mike, Eric, Romain, and others) was coming up with the
    toolkit APIs and core functionality, and then working on performance, performance,
    and performance.^([31](#c14-footnote-31)) The UI for Android is basically everything
    that the user sees, so performance for this front line of the platform is even
    more important, because problems there are so very noticeable. So the team kept
    optimizing things . . . and to some extent, still does.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 团队所称的 UI 工具包由许多部分组成，因为它基本上是整个框架的视觉部分。真正定义那个时期团队工作（Joe、Mike、Eric、Romain 和其他人）的，是制定工具包
    API 和核心功能，然后专注于性能、性能、再性能。^([31](#c14-footnote-31)) Android 的 UI 基本上是用户所看到的一切，因此这个平台前沿部分的性能更加重要，因为那里的问题是非常明显的。所以团队不断地优化……并在某种程度上，至今仍在优化。
