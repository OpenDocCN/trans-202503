- en: '## **5'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '## **5'
- en: GHIDRA DATA DISPLAYS**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: GHIDRA 数据展示**
- en: '![Image](Images/com.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/com.jpg)'
- en: At this point, you should have some confidence creating projects, loading binaries
    into projects, and initiating auto analysis. Once Ghidra’s initial analysis phase
    is complete, it is time for you to take control. As discussed in [Chapter 4](ch04.xhtml#ch04),
    when you launch Ghidra, your adventure starts in the Ghidra Project window. When
    you open a file within one of your projects, a second window opens. This is the
    Ghidra CodeBrowser, and it’s your home base for much of your SRE efforts. You’ve
    already used the CodeBrowser to auto analyze your file; now we’ll take a deeper
    dive into the CodeBrowser menu, windows, and basic options to increase your awareness
    of Ghidra’s capabilities and allow you to create an SRE analysis environment that
    is consistent with your personal workflow. Let’s begin with the principal Ghidra
    data displays.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您应该对创建项目、将二进制文件加载到项目中以及启动自动分析有一定信心。一旦 Ghidra 的初始分析阶段完成，您就可以开始掌控分析过程。如[第 4
    章](ch04.xhtml#ch04)中所讨论的，启动 Ghidra 时，您的冒险旅程始于 Ghidra 项目窗口。当您在项目中打开一个文件时，会打开第二个窗口。这就是
    Ghidra 的 CodeBrowser，它是您进行 SRE 工作的主要基地。您已经使用 CodeBrowser 自动分析了文件；现在我们将深入了解 CodeBrowser
    菜单、窗口和基本选项，以增强您对 Ghidra 功能的认知，并帮助您创建符合个人工作流程的 SRE 分析环境。让我们从 Ghidra 的主要数据展示开始。
- en: '### **CodeBrowser**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '### **CodeBrowser**'
- en: You can open the CodeBrowser window by selecting Tools ▸ RunTool ▸ CodeBrowser
    from the Ghidra Project window. Although CodeBrowser is generally opened by selecting
    a file for analysis, we are opening an empty instance so that the functionality
    and configuration options can be demonstrated without specific file-related content
    influencing the display, as shown in [Figure 5-1](ch05.xhtml#fig5_1). In its default
    configuration, CodeBrowser has six subwindows. Before we get into the details
    associated with each of these displays, let’s spend a little time looking at the
    CodeBrowser menu and its associated functionality.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过从 Ghidra 项目窗口选择工具 ▸ 运行工具 ▸ CodeBrowser 来打开 CodeBrowser 窗口。虽然 CodeBrowser
    通常通过选择一个用于分析的文件来打开，但我们现在打开一个空实例，以便在没有特定文件相关内容影响显示的情况下演示功能和配置选项，如[图 5-1](ch05.xhtml#fig5_1)所示。在默认配置下，CodeBrowser
    有六个子窗口。在详细了解这些显示相关的内容之前，让我们先花点时间看看 CodeBrowser 菜单及其相关功能。
- en: '![image](Images/fig5-1.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-1.jpg)'
- en: '*Figure 5-1: Unpopulated CodeBrowser window*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-1：未填充的 CodeBrowser 窗口*'
- en: At the top of the CodeBrowser window is the main menu with a toolbar immediately
    below. The toolbar provides one-click shortcuts to some of the most commonly used
    menu options. As we do not currently have a file loaded, we will focus on the
    menu options that are not associated with a loaded file in this section. Other
    menu actions will be demonstrated and explained in context with their applicability
    to the SRE process.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CodeBrowser 窗口的顶部是主菜单，下方是工具栏。工具栏提供一些最常用菜单选项的一键快捷方式。由于我们目前没有加载文件，因此在本节中我们将重点介绍那些与已加载文件无关的菜单选项。其他菜单操作将在与
    SRE 过程相关的实际应用中演示和解释。
- en: '**File** Provides the basic functionality expected in most file manipulation
    menus, including options for Open/Close, Import/Export, Save, and Print. In addition,
    some options are specific to Ghidra, such as Tool options, which allow you to
    save and manipulate the CodeBrowser tool, and Parse C Source, which can aid in
    the decompilation process by extracting data type information from C header files.
    (See “[Parsing C Header Files](ch13.xhtml#ch13lev223)” on [page 269](ch13.xhtml#page_269).)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件** 提供大多数文件操作菜单中预期的基本功能，包括打开/关闭、导入/导出、保存和打印的选项。此外，还有一些专门针对 Ghidra 的选项，例如工具选项，允许您保存和操作
    CodeBrowser 工具，和解析 C 源代码，这可以通过从 C 头文件提取数据类型信息来辅助反编译过程。（参见 “[解析 C 头文件](ch13.xhtml#ch13lev223)”
    章节，第[269页](ch13.xhtml#page_269)）'
- en: '**Edit** Includes one command that is applicable outside individual subwindows:
    the Edit ▸ Tool Options command, which opens a new window that allows you to control
    parameters and options associated with the many tools available from the CodeBrowser.
    The options related to the console are shown in [Figure 5-2](ch05.xhtml#fig5_2).
    The Restore Defaults button (revert to default settings) is always available at
    the bottom right.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**编辑** 包含一个适用于所有子窗口外部的命令：编辑 ▸ 工具选项命令，该命令打开一个新窗口，允许您控制与 CodeBrowser 提供的众多工具相关的参数和选项。与控制台相关的选项显示在[图
    5-2](ch05.xhtml#fig5_2)中。恢复默认按钮（恢复到默认设置）始终可以在右下角找到。'
- en: '![image](Images/fig5-2.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-2.jpg)'
- en: '*Figure 5-2: CodeBrowser Console edit options*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-2：CodeBrowser 控制台编辑选项*'
- en: '**Analysis** Allows you to reanalyze a binary or selectively perform individual
    analysis tasks. The basic analysis options were introduced in “[Analyzing Files
    with Ghidra](ch04.xhtml#ch04lev56)” on [page 48](ch04.xhtml#page_48).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**分析** 允许您重新分析二进制文件或选择性地执行单独的分析任务。基本的分析选项在“[使用 Ghidra 分析文件](ch04.xhtml#ch04lev56)”一节中进行了介绍，见[第48页](ch04.xhtml#page_48)。'
- en: '**Navigation** Facilitates navigation within files. This menu provides the
    basic keyboard functionality supported by many applications and adds special navigation
    options for binaries. While the menu provides one method for moving through a
    file, you will likely use toolbar options or shortcuts (listed at the right of
    each menu option) after you gain experience with the many options available for
    navigation.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**导航** 方便在文件内进行导航。此菜单提供许多应用程序支持的基本键盘功能，并为二进制文件添加了特殊的导航选项。虽然该菜单提供了一种通过文件移动的方法，但在掌握了可用的多种导航选项后，您可能会更常使用工具栏选项或快捷键（列在每个菜单选项的右侧）。'
- en: '**Search** Provides search capabilities for memory, program text, strings,
    address tables, direct references, instruction patterns, and much more. Basic
    searching functionality is introduced in “[Searching](ch06.xhtml#ch06lev114)”
    on [page 114](ch06.xhtml#page_114). More specialized search concepts are presented
    in context as part of the many examples in subsequent chapters.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**搜索** 提供对内存、程序文本、字符串、地址表、直接引用、指令模式等的搜索功能。基本的搜索功能在“[搜索](ch06.xhtml#ch06lev114)”一节中进行了介绍，见[第114页](ch06.xhtml#page_114)。更专业的搜索概念会在后续章节的许多示例中进行介绍。'
- en: '**Select** Provides the capability to identify a portion of the file to consider
    for a specific task. Selections can be based on subroutines, functions, control
    flows, or simply by highlighting a desired portion of the file.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**选择** 提供了识别文件中某个部分以供特定任务处理的功能。选择可以基于子程序、函数、控制流，或仅仅是通过突出显示文件中所需的部分。'
- en: '**Tools** Includes some interesting features that allow you to place additional
    SRE resources on your desktop. One of the most useful is the Processor Manual
    option, which brings up the processer manual associated with the current file.
    If you attempt to open a missing processor manual, you will be provided with a
    method to include the manual, as shown in [Figure 5-3](ch05.xhtml#fig5_3).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**工具** 包含一些有趣的功能，允许您将额外的 SRE 资源放置在桌面上。最有用的功能之一是处理器手册选项，它会显示与当前文件关联的处理器手册。如果您尝试打开缺失的处理器手册，系统会提供一种方法来包含该手册，如[图
    5-3](ch05.xhtml#fig5_3)所示。'
- en: '![image](Images/fig5-3.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-3.jpg)'
- en: '*Figure 5-3: Missing Processor Manual message*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-3：缺失处理器手册信息*'
- en: '**Window** Allows you to configure your Ghidra work environment for your workflow.
    We spend most of this chapter introducing and investigating the default Ghidra
    windows as well as some others that you will find helpful.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**窗口** 允许您根据工作流程配置 Ghidra 的工作环境。本章大部分内容将介绍和研究默认的 Ghidra 窗口以及一些其他您会觉得有用的窗口。'
- en: '**Help** Provides rich, well-organized, and very detailed options. The Help
    window supports searching, different views, favorites, zooming in/out, as well
    as printing and page setup options.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**帮助** 提供了丰富、组织良好且非常详细的选项。帮助窗口支持搜索、不同的视图、收藏夹、缩放以及打印和页面设置选项。'
- en: '**CodeBrowser Windows**'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**CodeBrowser 窗口**'
- en: 'The expanded Window menu can be seen running down the center of [Figure 5-4](ch05.xhtml#fig5_4).
    By default, six of the available windows are opened when CodeBrowser is launched:
    Program Trees, Symbol Tree, Data Type Manager, Listing, Console, and Decompiler.
    The name of each window is displayed at the top left of the associated window.
    Each of these windows appears as an option on the Window menu, and some also have
    associated icons on the toolbar directly below the menu. (As an example, we’ve
    used arrows in [Figure 5-4](ch05.xhtml#fig5_4) to highlight the toolbar option
    and menu option for opening and accessing the Decompiler window.)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展的窗口菜单可以在[图 5-4](ch05.xhtml#fig5_4)的中央看到。默认情况下，启动 CodeBrowser 时会打开六个可用窗口：程序树、符号树、数据类型管理器、列表、控制台和反编译器。每个窗口的名称显示在关联窗口的左上角。每个窗口都作为窗口菜单中的一个选项出现，其中一些在菜单下方的工具栏上也有相应的图标。（例如，我们在[图
    5-4](ch05.xhtml#fig5_4)中使用箭头突出显示了工具栏选项和菜单选项，用于打开和访问反编译器窗口。）
- en: '**HOTKEYS AND BUTTONS AND BARS, OH MY!**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**热键、按钮和工具栏，哦，我的天！**'
- en: Almost all commonly used actions within Ghidra have an associated menu item,
    hotkey, and toolbar button. If they don’t, you have the power to create them!
    The Ghidra toolbar is highly configurable, as is the mapping of hotkeys to menu
    actions. (See CodeBrowser Edit ▸ Tool Options ▸ Key Bindings or just hover over
    a command and press F4.) As if this wasn’t enough, Ghidra also offers good, context-sensitive
    menu actions in response to right mouse clicks. While these context-sensitive
    menus do not offer an exhaustive list of permissible actions at a given location,
    they do serve as good reminders for the most common actions you will be performing.
    This flexibility allows you to perform an action using the means most comfortable
    to you *and* to customize the environment as you discover how Ghidra can work
    for you.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ghidra 中，几乎所有常用的操作都有对应的菜单项、快捷键和工具栏按钮。如果没有，你可以创建它们！Ghidra 的工具栏是高度可配置的，快捷键与菜单操作的映射也是如此。（参见
    CodeBrowser 编辑 ▸ 工具选项 ▸ 快捷键绑定，或者只需将鼠标悬停在一个命令上并按 F4。）如果这还不够，Ghidra 还提供了良好的上下文敏感菜单，以响应右键点击。这些上下文敏感菜单虽然没有提供给定位置的所有可用操作列表，但它们确实能很好地提醒你最常用的操作。这个灵活性允许你使用最适合自己的方式来执行操作*并*根据你发现
    Ghidra 如何为你工作来定制环境。
- en: '![image](Images/fig5-4.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-4.jpg)'
- en: '*Figure 5-4: CodeBrowser window with options to display Decompiler window emphasized*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-4：突出显示显示反编译器窗口的 CodeBrowser 窗口选项*'
- en: Let’s dive into the six default windows to understand their fundamental importance
    in the SRE process.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解这六个默认窗口，理解它们在 SRE 过程中的基本重要性。
- en: '**WINDOW INSIDERS AND OUTSIDERS**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**窗口内部与外部**'
- en: As you begin exploring the various Ghidra windows, you will notice that, by
    default, some windows open within the CodeBrowser desktop and others open as new
    floating windows outside the CodeBrowser desktop. Let’s take a minute to talk
    about these “insiders” and “outsiders” in the context of the Ghidra environment.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始探索 Ghidra 的各个窗口时，你会注意到，默认情况下，有些窗口会在 CodeBrowser 桌面内打开，而其他窗口则作为新的浮动窗口在 CodeBrowser
    桌面外打开。让我们花一点时间来讨论这些“内部”与“外部”窗口在 Ghidra 环境中的含义。
- en: The “outsider” windows float outside the CodeBrowser environment and may be
    connected or independent. These windows allow you to explore their contents side
    by side with CodeBrowser. Examples of these windows are Function Graph, Comments,
    and Memory Map.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: “外部”窗口漂浮在 CodeBrowser 环境外，并且可以是连接的或独立的。这些窗口允许你与 CodeBrowser 一起并排查看它们的内容。这些窗口的示例包括功能图、注释和内存映射。
- en: 'Next, there are three distinct classes of “insider” windows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，有三种不同类别的“内部”窗口：
- en: Windows that open by default in CodeBrowser (for example, Symbol Tree and Listing)
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认在 CodeBrowser 中打开的窗口（例如，符号树和列表）
- en: Windows that are stacked with a default CodeBrowser window (for example, Bytes)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与默认的 CodeBrowser 窗口叠加的窗口（例如，字节）
- en: Windows that create or share space with other CodeBrowser windows (for example,
    Equates and External Programs)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他 CodeBrowser 窗口创建或共享空间的窗口（例如，等价项和外部程序）
- en: When you open a window that shares a space with another open window, it appears
    in front of the existing window. All windows sharing the same space are tabbed
    to allow rapid navigation between windows. If you want to view two windows that
    share a space simultaneously, you can click the title bar of the window and drag
    it outside the CodeBrowser window.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打开一个与另一个打开的窗口共享空间的窗口时，它会显示在现有窗口的前面。所有共享同一空间的窗口都会被标签化，以便在窗口之间快速导航。如果你希望同时查看两个共享空间的窗口，可以单击窗口的标题栏并将其拖动到
    CodeBrowser 窗口外。
- en: But be careful! Getting windows back into the CodeBrowser window is not as easy
    as moving them out. (See “[Rearranging Windows](ch12.xhtml#ch12lev209)” on [page
    242](ch12.xhtml#page_242) for more details.)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 但要小心！将窗口移回 CodeBrowser 窗口并不像将它们移出去那么容易。（有关详细信息，请参见 “[重新排列窗口](ch12.xhtml#ch12lev209)”
    第 [242 页](ch12.xhtml#page_242)）
- en: '**WHERE’S MY WINDOW?**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**我的窗口在哪里？**'
- en: Ghidra has a lot of windows, and it can be challenging to keep track of where
    they are at any particular time. This becomes even more complicated as you open
    more windows and others disappear behind them in CodeBrowser or on your desktop.
    Ghidra has a unique feature to help you locate those missing windows. Clicking
    the associated toolbar icon or menu item will move the selected window to the
    front, but that might not be enough. If you continue clicking the toolbar icon
    for the window, your missing window will try to catch your attention by vibrating,
    changing font size or colors, zooming, spinning, and other exciting motions that
    are sure to catch your eye to help you find it. If you are bored, you can wave
    back.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Ghidra 有很多窗口，跟踪它们在任何特定时间的位置可能是一个挑战。随着你打开更多的窗口，其他窗口可能会消失在 CodeBrowser 中或桌面上，这使得定位更加复杂。Ghidra
    提供了一个独特的功能来帮助你找到那些丢失的窗口。点击相关的工具栏图标或菜单项将把选定的窗口移到最前面，但这可能还不够。如果你继续点击窗口的工具栏图标，丢失的窗口将通过振动、改变字体大小或颜色、缩放、旋转以及其他令人兴奋的动作来吸引你的注意，帮助你找到它。如果你感到无聊，你也可以向它挥挥手。
- en: '#### ***The Listing Window***'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '#### ***Listing 窗口***'
- en: Also known as the Disassembly window, the Listing window will be your primary
    tool for viewing, manipulating, and analyzing Ghidra-generated disassemblies.
    The text display presents the entire disassembly listing of a program and provides
    the primary means for viewing the data regions of a binary.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 被称为反汇编窗口的 Listing 窗口将是你查看、操作和分析 Ghidra 生成的反汇编代码的主要工具。文本显示呈现了程序的完整反汇编列表，并提供了查看二进制文件数据区域的主要方式。
- en: The CodeBrowser display for *ch5_example1.exe* is shown in its default configuration
    in [Figure 5-5](ch05.xhtml#fig5_5). The margin to the left of the Listing window
    provides important information about the file as well as your location within
    the file. There is an additional marker area on the right side of the Listing
    window (immediately to the right of the vertical scroll bar) that also provides
    important information and navigational capabilities. The scroll bar indicates
    your location within the file and can be used for navigation. To the immediate
    right of the scroll bar are some informational displays, including bookmarks,
    that provide additional insight into the file.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*ch5_example1.exe* 的 CodeBrowser 显示如 [图 5-5](ch05.xhtml#fig5_5) 所示，采用其默认配置。Listing
    窗口左侧的边距提供有关文件的重要信息，以及你在文件中的位置。Listing 窗口右侧（即垂直滚动条右边）有一个额外的标记区域，提供重要信息和导航功能。滚动条指示你在文件中的位置，可以用于导航。在滚动条的右侧是一些信息显示，包括书签，提供有关文件的额外见解。'
- en: '![image](Images/fig5-5.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-5.jpg)'
- en: '*Figure 5-5: Default CodeBrowser window with* ch5_example1.exe *loaded*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-5：加载了* ch5_example1.exe *的默认 CodeBrowser 窗口*'
- en: '**YOUR FAVORITE BARS**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**你最喜欢的边距条**'
- en: After a file is auto analyzed, you can use informational margin bars to help
    you navigate and further analyze the file. By default, only the Navigation bar
    is displayed. You can choose to add (or hide) the Overview bar and Entropy bar
    by using the Toggle Overview Margin tool button at the top right of the Listing
    window (see [Figure 5-6](ch05.xhtml#fig5_6)). Regardless of which bars are displayed,
    a navigation marker to the left of all of the bars reminds you of where you are
    in the file. Left-clicking any location in any of the bars will move you to that
    location in the file and update the contents of the Listing window.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件自动分析后，你可以使用信息边距条帮助你导航并进一步分析文件。默认情况下，只有导航栏会显示。你可以选择通过使用 Listing 窗口右上角的切换概述边距工具按钮（参见[图
    5-6](ch05.xhtml#fig5_6)）来添加（或隐藏）概述栏和熵条。不管显示了哪些边距条，所有边距条左侧的导航标记都会提醒你当前所在文件的位置。左键点击任何边距条中的位置，将把你定位到文件中的该位置，并更新
    Listing 窗口的内容。
- en: 'Now that you know how to control the appearance (and disappearance) of the
    bars, let’s investigate what each bar shows and how you might use it in your SRE
    process:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何控制边距条的显示（与隐藏），让我们来看看每个边距条显示了什么，以及你如何在 SRE 过程中使用它：
- en: '**Navigation Marker area** Allows you to move through the file, but it also
    has another very important function: if you right-click the Navigation Marker
    area, you will see the classes of markers and bookmarks that can be associated
    with your file. By selecting and deselecting marker types, you can control what
    is displayed in the Navigation bar. This allows you to easily move through particular
    types of markers (such as highlights).'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**导航标记区域** 允许您在文件中移动，但它还有另一个非常重要的功能：如果右键单击导航标记区域，您将看到可以与文件关联的标记和书签类别。通过选择和取消选择标记类型，您可以控制在导航条中显示的内容。这使您可以轻松地浏览特定类型的标记（例如高亮显示）。'
- en: '**Overview bar** Provides you with important visual information about the contents
    of a file. The horizontal bands in the Overview bar represent color-coded regions
    of the program. While Ghidra provides default colors associated with common categories,
    such as functions, external references, data, and instructions, you can control
    the color scheme through the Edit ▸ Tool Options menu. By default, if you hover
    over a region, you can view detailed information about that region, including
    the region type and an associated address, if applicable.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**概览条** 为您提供文件内容的重要视觉信息。概览条中的水平带表示程序的颜色编码区域。虽然 Ghidra 为常见类别（如函数、外部引用、数据和指令）提供默认颜色，但您可以通过“编辑
    ▸ 工具选项”菜单控制颜色方案。默认情况下，将鼠标悬停在某个区域上时，您可以查看该区域的详细信息，包括区域类型和相关地址（如果适用）。'
- en: '**Entropy bar** Provides a unique Ghidra functionality: it “stereotypes” file
    content based on the file content around it. If there is very little variation
    within a region, it is assigned a low entropy value. If there is high degree of
    randomness, the corresponding entropy value is high. Hovering your mouse over
    a horizontal band in the Entropy bar will give you the entropy value (between
    0.0 and 8.0), a type (for example, *.text*), as well as the associated address
    in the file. The highly configurable Entropy bar can be used to help determine
    the most likely content in the band. More information about this capability and
    the mathematics behind it can be discovered in the Ghidra Help menu.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**熵条** 提供了一个独特的 Ghidra 功能：它根据周围文件内容对文件内容进行“刻板化”。如果某个区域内变化很小，则分配较低的熵值。如果该区域具有较高的随机性，则相应的熵值较高。将鼠标悬停在熵条上的水平带上，可以查看该区域的熵值（介于
    0.0 到 8.0 之间）、类型（例如，*.text*），以及文件中相关的地址。高度可配置的熵条可以帮助确定该带中最可能的内容。有关此功能及其背后数学原理的更多信息，可以在
    Ghidra 帮助菜单中找到。'
- en: '[Figure 5-6](ch05.xhtml#fig5_6) provides a breakdown of tool buttons specific
    to the Listing window. In [Figure 5-7](ch05.xhtml#fig5_7), we have expanded and
    zoomed in on the Listing window to investigate what is shown. The disassembly
    is presented in linear fashion, with the leftmost column displaying virtual addresses
    by default.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 5-6](ch05.xhtml#fig5_6) 详细说明了特定于列表窗口的工具按钮。在 [图 5-7](ch05.xhtml#fig5_7) 中，我们扩展并放大了列表窗口，以便调查显示的内容。反汇编以线性方式呈现，最左列默认显示虚拟地址。'
- en: '![image](Images/fig5-6.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-6.jpg)'
- en: '*Figure 5-6: Listing window tool buttons*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-6：列表窗口工具按钮*'
- en: '![image](Images/fig5-7.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-7.jpg)'
- en: '*Figure 5-7: Listing window with labeled example artifacts*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-7：带标签的示例工件的列表窗口*'
- en: Within the Listing window are several items that merit your attention. The gray
    band at the far left of the window is the margin marker. It is used to indicate
    your current location in the file and includes point markers and area markers,
    which are described in Ghidra Help. In this example, the current file location
    (`004011b6`) is indicated in the margin marker by the small black arrow.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表窗口中，有几个项目值得您注意。窗口最左侧的灰色带是边距标记器。它用于指示您当前在文件中的位置，并包含点标记和区域标记，这些在 Ghidra 帮助中有详细描述。在此示例中，当前文件位置（`004011b6`）通过小黑箭头在边距标记器中显示。
- en: The region immediately to the right of the margin marker is used to graphically
    depict nonlinear flow within a function.^([1](footnotes.xhtml#ch05fn1)) When the
    source or target address for a control flow instruction is visible in the Listing
    window, associated flow arrows appear. Solid arrows represent unconditional jumps,
    while dashed arrows represent conditional jumps. Hovering over a flow line opens
    a tool tip that displays the start and end address of the flow along with the
    flow type. When a jump (conditional or unconditional) transfers control to an
    earlier address in the program, it is often indicative of a loop. This is demonstrated
    in [Figure 5-7](ch05.xhtml#fig5_7) by the flow arrow from address `004011cf` to
    `004011c5`. You can easily navigate to the source or destination of any jump by
    double-clicking the associated flow arrow.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在边缘标记的右侧区域用于图形化地描述函数内的非线性流动。^([1](footnotes.xhtml#ch05fn1)) 当控制流指令的源地址或目标地址在列出窗口中可见时，相关的流箭头将会出现。实心箭头表示无条件跳转，而虚线箭头表示条件跳转。将鼠标悬停在流线上的时候，会弹出一个工具提示，显示流的起始地址和结束地址以及流的类型。当跳转（无条件或条件）将控制转移到程序中较早的地址时，这通常意味着有一个循环。此行为在[图5-7](ch05.xhtml#fig5_7)中通过从地址`004011cf`到`004011c5`的流箭头进行展示。你可以通过双击相关的流箭头轻松导航到任何跳转的源地址或目标地址。
- en: The declarations at the top of [Figure 5-7](ch05.xhtml#fig5_7) show Ghidra’s
    best estimate concerning the layout of the function’s stack frame.^([2](footnotes.xhtml#ch05fn2))
    Ghidra computes the structure of a function’s stack frame (local variables) by
    performing detailed analysis of the behavior of the stack pointer and any stack
    frame pointer used within a function. Stack displays are discussed further in
    [Chapter 6](ch06.xhtml#ch06).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[图5-7](ch05.xhtml#fig5_7)顶部的声明展示了Ghidra关于函数栈帧布局的最佳估计。^([2](footnotes.xhtml#ch05fn2))
    Ghidra通过对栈指针和函数内部任何栈帧指针的行为进行详细分析，计算出函数栈帧（局部变量）的结构。栈显示将在[第6章](ch06.xhtml#ch06)中进一步讨论。'
- en: Listings generally have numerous data and code *cross-references* indicated
    by *XREF*, seen on the right side of [Figure 5-7](ch05.xhtml#fig5_7). A cross-reference
    is created anytime one location in the disassembly refers to another location
    in the disassembly. For example, an instruction at address A jumping to an instruction
    at address B would result in the creation of a cross-reference from A to B. Hovering
    over a reference address causes a reference pop-up to appear with the referencing
    location. The reference pop-up is in the same layout as the Listing window but
    has a yellow background (similar to a tool tip pop-up). The pop-up window allows
    you to view the content but does not allow you to follow the references. Cross-references
    are the subject of [Chapter 9](ch09.xhtml#ch09).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 列表通常会有许多由*XREF*标示的数据和代码*交叉引用*，这些可以在[图5-7](ch05.xhtml#fig5_7)的右侧看到。每当反汇编中的一个位置引用另一个位置时，就会创建一个交叉引用。例如，地址A的指令跳转到地址B的指令时，会在A到B之间创建一个交叉引用。将鼠标悬停在引用地址上时，会弹出一个参考提示，显示引用位置。参考提示与列出窗口的布局相同，但具有黄色背景（类似于工具提示弹出）。弹出窗口允许你查看内容，但不允许你跟踪引用。交叉引用在[第9章](ch09.xhtml#ch09)中进行详细讨论。
- en: '***Creating Additional Disassembly Windows***'
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***创建额外的反汇编窗口***'
- en: 'If you ever find yourself wanting to view a listing of two functions simultaneously,
    all you need to do is open another disassembly window by using the Snapshot icon
    in the Listing toolbar (refer to [Figure 5-6](ch05.xhtml#fig5_6)). The first disassembly
    window opened has the prefix *Listing:* before the filename. All subsequent disassembly
    windows are titled *[Listing: <filename>]* to indicate that they are disconnected
    from the primary display. The snapshots are disconnected so you can navigate freely
    through them without affecting other windows.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你希望同时查看两个函数的列出，可以通过在列出工具栏中使用快照图标来打开另一个反汇编窗口（参见[图5-6](ch05.xhtml#fig5_6)）。第一个打开的反汇编窗口在文件名之前会有前缀*Listing:*。所有随后的反汇编窗口将标题为*[Listing:
    <filename>]*，表示它们与主显示窗口是断开的。快照是断开的，因此你可以自由地在它们之间导航，而不会影响其他窗口。'
- en: '**CONFIGURING LISTING WINDOWS**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**配置列出窗口**'
- en: A disassembly listing may be decomposed into a number of component fields, including
    information such as a mnemonic field, an address field, and a comment field. The
    listings we have seen so far have been composed from a default set of fields that
    provide important information about the file. However, sometimes the default view
    does not provide the information you would like to see. Enter the Browser Field
    Formatter.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 反汇编列表可能被分解为多个组成字段，包括助记符字段、地址字段和注释字段等信息。我们迄今看到的列表是由一组默认字段组成的，这些字段提供了关于文件的重要信息。然而，有时默认视图并没有提供你希望看到的信息。这时，浏览器字段格式化器便派上用场了。
- en: The Browser Field Formatter provides you the ability to customize over 30 fields
    to ensure you have ultimate control over the appearance of your Listing windows.
    You can activate the Browser Field Formatter by clicking the button in the Listing
    toolbar (refer to [Figure 5-6](ch05.xhtml#fig5_6)). This opens a powerful submenu
    and layout editor, seen in [Figure 5-8](ch05.xhtml#fig5_8), at the top of the
    listing. The Browser Field Formatter allows you to control the appearance of address
    breaks, plate comments, functions, variables, instructions, data, structures,
    and arrays. Within each of these categories are fields that you can adjust, tune,
    and control to create the perfect listing format for you. We stick primarily with
    the default formats for listings, but you should explore the Browser Field Formatter
    to determine whether any options improve your understanding of the Listing window
    contents.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器字段格式化器为你提供了自定义超过 30 个字段的能力，确保你对列表窗口的外观拥有完全控制。你可以通过点击列表工具栏中的按钮来激活浏览器字段格式化器（参见[图
    5-6](ch05.xhtml#fig5_6)）。这将打开一个强大的子菜单和布局编辑器，如[图 5-8](ch05.xhtml#fig5_8)所示，位于列表顶部。浏览器字段格式化器允许你控制地址断点、板注释、函数、变量、指令、数据、结构和数组的外观。在这些类别中，有可以调整、调优和控制的字段，以便为你创建完美的列表格式。我们主要使用列表的默认格式，但你应该探索浏览器字段格式化器，看看是否有任何选项可以帮助你更好地理解列表窗口的内容。
- en: '![image](Images/fig5-8.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-8.jpg)'
- en: '*Figure 5-8: Listing window with Browser Field Formatter activated*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-8：激活浏览器字段格式化器后的列表窗口*'
- en: '#### ***Ghidra Function Graph View***'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '#### ***Ghidra 函数图形视图***'
- en: While assembly listings are interesting and informative, the flow of the program
    might be easier to understand by viewing a graph-based display. You can open a
    Function Graph window associated with the CodeBrowser by choosing Window ▸ Function
    Graph or clicking the associated icon in the CodeBrowser toolbar. The Function
    Graph window corresponding to the function in [Figure 5-7](ch05.xhtml#fig5_7)
    is shown in [Figure 5-9](ch05.xhtml#fig5_9). Graph views are somewhat reminiscent
    of program flowcharts in that a function is broken into basic blocks so you can
    visualize the function’s control flow from one block to another.^([3](footnotes.xhtml#ch05fn3))
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然汇编列表既有趣又富有信息，但通过查看基于图形的显示，程序的流程可能更容易理解。你可以通过选择窗口 ▸ 函数图形或点击 CodeBrowser 工具栏中的相关图标来打开与
    CodeBrowser 相关联的函数图形窗口。与[图 5-7](ch05.xhtml#fig5_7)中函数对应的函数图形窗口如[图 5-9](ch05.xhtml#fig5_9)所示。图形视图有点像程序流程图，因为函数被拆解为基本块，让你可以从一个块到另一个块可视化函数的控制流。^([3](footnotes.xhtml#ch05fn3))
- en: '![image](Images/fig5-9.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-9.jpg)'
- en: '*Figure 5-9: Graph view of listing from [Figure 5-7](ch05.xhtml#fig5_7)*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-9：来自[图 5-7](ch05.xhtml#fig5_7)的列表的图形视图*'
- en: 'Onscreen, Ghidra uses different-colored arrows to distinguish various types
    of flows between the blocks of a function. In addition, the flows become animated
    as you mouse over them to indicate direction. Basic blocks that terminate with
    a conditional jump generate two possible flows: the *Yes edge* arrow (yes, the
    tested condition was met) is green by default, and the *No edge* arrow (no, the
    tested condition was not met) is red by default. Basic blocks that terminate with
    only one potential successor block use a *Normal edge* (blue by default) to point
    to the next block to be executed. You can click any arrow to see the associated
    transition from one block to another. Since the graph and listing tools are synchronized
    by default, your file location will generally remain consistent when switching
    between and navigating within the listing view and graph view. Exceptions are
    discussed in [Chapter 10](ch10.xhtml#ch10) as well as in Ghidra Help.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕上，Ghidra 使用不同颜色的箭头来区分函数块之间的各种流动类型。此外，当你将鼠标悬停在箭头上时，箭头会变成动画，指示流动方向。以条件跳转结束的基本块会生成两种可能的流：*Yes
    edge* 箭头（即，测试条件成立）默认为绿色，而 *No edge* 箭头（即，测试条件未成立）默认为红色。以一个潜在的后继块结束的基本块使用 *Normal
    edge*（默认为蓝色）箭头指向下一个要执行的块。你可以点击任何箭头查看一个块到另一个块之间的关联转换。由于图形视图和列表视图默认是同步的，当你在列表视图和图形视图之间切换和导航时，文件位置通常会保持一致。例外情况请参见[第10章](ch10.xhtml#ch10)以及
    Ghidra 帮助。
- en: In graph mode, Ghidra displays one function at a time. Ghidra facilitates navigation
    around the graph by using traditional image interaction techniques such as pan
    and zoom. Large or complex functions may cause the graph to become extremely cluttered,
    making the graph difficult to navigate, which is where the Satellite View can
    help you. By default, the Satellite View is positioned at the bottom right of
    the graph window and can be a valuable aid to provide some situational awareness
    (see [Figure 5-9](ch05.xhtml#fig5_9)).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在图形模式下，Ghidra 一次显示一个函数。Ghidra 通过使用传统的图像交互技术，如平移和缩放，来帮助你在图形中进行导航。较大或较复杂的函数可能会导致图形变得极其杂乱，难以导航，这时卫星视图可以为你提供帮助。默认情况下，卫星视图位于图形窗口的右下角，可以作为一个有价值的工具，帮助你提供一定的情境意识（参见[图
    5-9](ch05.xhtml#fig5_9)）。
- en: '**SATELLITE NAVIGATION**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**卫星导航**'
- en: The Satellite View always displays the complete block structure of the graph
    along with a highlighted frame that indicates the region of the graph currently
    being viewed in the disassembly window. Clicking any block in the Satellite View
    centers the graph around that block. The highlighted frame acts as a lens and
    can be dragged around the overview window to rapidly reposition the graph view
    to any location on the graph. In addition to providing a means to navigate the
    Function Graph window, this magical window has other powers that can work for
    or against you as you examine files.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 卫星视图始终显示图形的完整块结构，并带有一个高亮框，表示当前在反汇编窗口中查看的图形区域。点击卫星视图中的任何块会将图形聚焦于该块。高亮框起到放大镜的作用，可以拖动它到概览窗口的任何位置，从而快速重新定位图形视图到图形上的任何位置。除了提供在函数图窗口中导航的方式外，这个神奇的窗口还有其他功能，可能在你查看文件时既能对你有所帮助，也可能会对你造成干扰。
- en: This window consumes valuable space in your Function Graph window and can hide
    important blocks and contents just when you want to see them. There are two approaches
    to remedy this situation. You can right-click the Satellite View and uncheck the
    Dock Satellite View checkbox. This will move the Satellite View and its full functionality
    outside the Function Graph window. Rechecking the option at any time will move
    it back to its original location in the Function Graph window.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个窗口会占据你函数图窗口中的宝贵空间，可能会隐藏你想要查看的重要块和内容。解决此问题有两种方法。你可以右键点击卫星视图，取消选中“停靠卫星视图”复选框。这将把卫星视图及其完整功能移出函数图窗口。任何时候重新勾选此选项，卫星视图会回到函数图窗口的原始位置。
- en: A second option is to hide the Satellite View, provided you don’t need to use
    it to navigate. This is another checkbox available in the right-click context
    menu. When you hide the Satellite View, a small icon will appear in the bottom
    right of the Function Graph window. Clicking this icon will restore the Satellite
    View.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个选项是隐藏卫星视图，前提是你不需要它来进行导航。这是右键上下文菜单中的另一个复选框。当你隐藏卫星视图时，函数图窗口的右下角会出现一个小图标。点击此图标将恢复卫星视图。
- en: When visible, the Satellite View can cause the primary view to behave more slowly
    than desired. Hiding the Satellite View can help to make it more responsive.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当卫星视图可见时，它可能会导致主视图的响应变得比预期的慢。隐藏卫星视图可以帮助提高响应速度。
- en: '**TOOLS MAKING CONNECTIONS**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**工具连接**'
- en: Tools can operate together or independently. We have seen how the Listing window
    and the Function Graph window share data and how events that occur in one window
    affect the other. If you select a particular block in the Function Graph window,
    the corresponding code will be highlighted in the Listing window. Conversely,
    navigating between functions in the Listing window will cause the Function Graph
    window to be updated. This is one of the many tool connections that happens automatically
    and is bidirectional. Ghidra also has capabilities for unidirectional connections
    as well as the ability to manually connect and disconnect tools using a producer/consumer
    model associated with tool events. In this book, we focus on the bidirectional
    automatic tool connections that Ghidra provides.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 工具可以协同工作或独立工作。我们已经看到列表窗口和功能图窗口如何共享数据，以及在一个窗口中发生的事件如何影响另一个窗口。如果在功能图窗口中选择某个块，相应的代码将在列表窗口中高亮显示。相反，在列表窗口中导航功能时，将导致功能图窗口更新。这是许多自动发生的双向工具连接之一。Ghidra
    还支持单向连接，并能够通过工具事件的生产者/消费者模型手动连接和断开工具。在本书中，我们重点介绍 Ghidra 提供的双向自动工具连接。
- en: 'In addition to navigating with the Satellite View, you can manipulate the view
    within the Function Graph window in many ways to suit your needs:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用卫星视图进行导航外，您还可以通过多种方式在功能图窗口中操作视图，以适应您的需求：
- en: '**Panning** First, in addition to using the Satellite View to rapidly reposition
    the graph, you can reposition the graph by clicking and dragging the background
    to change the graph view.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**平移** 首先，除了使用卫星视图快速重新定位图形外，您还可以通过点击并拖动背景来重新定位图形，以改变图形视图。'
- en: '**Zooming** You can zoom in and out using traditional keyboard methods such
    as CTRL/COMMAND, a mouse scroll, or associated key bindings. If you zoom out too
    far, you may pass the *painting threshold*, where the block contents are no longer
    displayed. Each block just becomes a colored rectangle. In some cases, particularly
    when working side by side with the Listing window, this might be advantageous,
    as it improves the speed at which the function graph can be rendered.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**缩放** 您可以使用传统的键盘方法，如 CTRL/COMMAND、鼠标滚轮或关联的快捷键进行缩放。如果您缩放得太远，可能会超过*绘制阈值*，此时块内容将不再显示。每个块只会变成一个彩色矩形。在某些情况下，特别是在与列表窗口并排工作时，这可能是有利的，因为它提高了渲染功能图的速度。'
- en: '**Rearranging blocks** Individual blocks within the graph can be dragged to
    new positions by clicking the title bar for the desired block and dragging it
    to a new position. All links between blocks are preserved as you move the blocks.
    If at any point you find yourself wishing to revert to the default layout for
    your graph, you can do so by selecting the Refresh icon in the Function Graph
    toolbar.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**重新排列块** 您可以通过点击目标块的标题栏并将其拖动到新位置来重新排列图形中的单个块。在移动块时，块之间的所有链接都会被保留。如果您在某个时刻希望恢复图形的默认布局，可以通过选择功能图工具栏中的刷新图标来实现。'
- en: '**Grouping and collapsing blocks** Blocks can be grouped, either individually
    or together with other blocks, and collapsed to reduce the clutter in the display.
    Grouping causes a block to collapse. Collapsing blocks is an easy method to keep
    track of the blocks you have analyzed. You can collapse any block by choosing
    the Group icon in the far right of the block toolbar. If you choose this option
    with multiple blocks selected, they will be collapsed, and the list of associated
    blocks will be displayed in the stacked window. Some nuances are associated with
    forming/unforming groups as well as performing actions on the newly formed groups
    that are explained in Ghidra Help.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**分组和折叠块** 块可以单独或与其他块一起分组，并且可以折叠以减少显示中的杂乱。分组会导致块折叠。折叠块是跟踪已分析块的一个简便方法。您可以通过选择块工具栏最右侧的分组图标来折叠任何块。如果选择多个块并使用此选项，它们将被折叠，并且相关块的列表将显示在堆叠窗口中。有关形成/解散分组以及在新形成的分组上执行操作的一些细节，请参见
    Ghidra 帮助。'
- en: '**CUSTOMIZING YOUR GRAPH DISPLAY**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义图形显示**'
- en: To help you with your analysis, Ghidra provides a menu bar at the top of each
    node in the Function Graph display that allows you to control the display for
    that particular node. You can control background/text color for the node, jump
    to an XREF, view a full window listing of the graph node, and use grouping functionality
    to combine and collapse nodes. (Note that changing the background for a block
    in the Function Graph also changes the background in the Listing window.) Some
    of these features might be unnecessary if you are actively using the Listing window
    in conjunction with the Function Graph window, but the customization options may
    be helpful and are certainly worth investigating. These options are discussed
    further in [Chapter 10](ch10.xhtml#ch10).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您的分析，Ghidra在每个函数图节点的顶部提供了一个菜单栏，允许您控制该特定节点的显示。您可以控制节点的背景/文本颜色，跳转到XREF，查看该图节点的完整窗口列表，并使用分组功能将节点合并和折叠。（请注意，更改函数图中块的背景也会更改列表窗口中的背景。）如果您同时使用列表窗口和函数图窗口，这些功能可能没有必要，但这些自定义选项可能会很有用，值得进一步探索。这些选项将在[第10章](ch10.xhtml#ch10)中进一步讨论。
- en: As the graph-based display opens in a window external to CodeBrowser, you can
    view the two displays side by side. Because the windows have a connection, changing
    locations in one of the windows moves the location marker in the other window.
    While many users tend to prefer one view over the other to visualize program flow,
    you don’t have to choose only one. Also, keep in mind that your control over the
    graph and text views extends far beyond these examples. Additional Ghidra graphing
    capabilities are covered in [Chapter 10](ch10.xhtml#ch10), while more information
    on the manipulation of Ghidra’s view options is available in Ghidra Help.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 由于基于图形的显示会在CodeBrowser外部的窗口中打开，您可以并排查看这两种显示。由于这些窗口之间有连接，在一个窗口中移动位置时，另一个窗口中的位置标记也会随之移动。虽然许多用户倾向于选择一种视图来可视化程序流程，但您并不需要只选择其中一种。同时请记住，您对图形视图和文本视图的控制远远超出了这些示例。有关Ghidra图形功能的更多内容，请参见[第10章](ch10.xhtml#ch10)，有关操作Ghidra视图选项的更多信息，请参见Ghidra帮助文档。
- en: For the next five chapters, we primarily focus on the listing display for examples,
    supplemented with the graph display in cases where it adds significant clarity.
    In [Chapter 6](ch06.xhtml#ch06) we will focus on understanding a Ghidra disassembly,
    and in [Chapter 7](ch07.xhtml#ch07), we cover the specifics of manipulating the
    listing display in order to clean up and annotate a disassembly.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的五章中，我们主要关注示例的列表显示，必要时辅以图形显示，以增强清晰度。在[第6章](ch06.xhtml#ch06)中，我们将重点介绍如何理解Ghidra反汇编，在[第7章](ch07.xhtml#ch07)中，我们将讨论如何操作列表显示，以清理和注释反汇编内容。
- en: '**MOVING AROUND**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**移动操作**'
- en: In addition to traditional means of navigating a file (up arrow, down arrow,
    page up, page down, and so on), Ghidra provides navigation tools specific to the
    SRE process. The icons in the Navigation toolbar (shown in [Figure 5-10](ch05.xhtml#fig5_10))
    make it easy to move through the program. Let’s meet the icons that serve the
    reverse engineer.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 除了传统的文件导航方式（向上箭头、向下箭头、向上翻页、向下翻页等），Ghidra还提供了针对SRE过程的特定导航工具。导航工具栏中的图标（如[图5-10](ch05.xhtml#fig5_10)所示）使您可以轻松地在程序中移动。让我们来看看这些为逆向工程师提供服务的图标。
- en: '![image](Images/fig5-10.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-10.jpg)'
- en: '*Figure 5-10: CodeBrowser Navigation toolbar*'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5-10：CodeBrowser导航工具栏*'
- en: On the far left is the Direction icon. This arrow toggles between up and down
    and controls the direction for all of the other navigation icons. The next eight
    icons advance you through the various targets shown in [Figure 5-11](ch05.xhtml#fig5_11).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最左侧是方向图标。这个箭头在向上和向下之间切换，控制其他所有导航图标的方向。接下来的八个图标将帮助您浏览[图5-11](ch05.xhtml#fig5_11)中显示的各个目标。
- en: '![image](Images/fig5-11.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-11.jpg)'
- en: '*Figure 5-11: Navigation toolbar definitions*'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5-11：导航工具栏定义*'
- en: Rather than just advancing you to the next data in the listing, choosing the
    Data option skips over adjacent data and takes you to the start of the next nonadjacent
    data. Instruction and Undefined demonstrate the same behavior.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 与仅仅将您推进到列表中的下一个数据项不同，选择数据选项会跳过相邻数据，直接带您到下一个不相邻的数据的开始位置。指令和未定义项表现出相同的行为。
- en: The drop-down arrow at the far right of the Navigation toolbar displays a list
    that allows you to select among specific bookmark types for quick navigation.
    While used primarily with the Listing window, these navigation shortcuts work
    in all windows that are connected to the Listing window. Navigating within any
    of these windows results in synchronous navigation in all connected windows.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 导航工具栏最右侧的下拉箭头显示一个列表，允许你选择特定的书签类型以便快速导航。虽然这些快捷导航主要用于列出窗口，但它们在所有与列出窗口连接的窗口中都有效。在这些窗口中进行导航时，所有连接的窗口会同步导航。
- en: '#### ***The Program Trees Window***'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '#### ***程序树窗口***'
- en: Let’s return to our discussion of the default CodeBrowser windows by taking
    a brief look at the Program Trees window, shown in [Figure 5-12](ch05.xhtml#fig5_12).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到默认 CodeBrowser 窗口的讨论，简要查看程序树窗口，如[图 5-12](ch05.xhtml#fig5_12)所示。
- en: '![image](Images/fig5-12.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-12.jpg)'
- en: '*Figure 5-12: Program Trees window*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-12：程序树窗口*'
- en: 'This window shows your program organized into folders and fragments and provides
    you with the ability to refine the organization that takes place during auto analysis.
    *Fragment* is a Ghidra term for a contiguous range of addresses. Fragments may
    not overlap one another. A more traditional name for a fragment is a *program
    section* (for example, *.text*, *.data*, and *.bss*). Program tree–related operations
    include the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 该窗口显示了你程序的文件夹和片段结构，并提供了在自动分析过程中精细调整组织结构的功能。*片段*是 Ghidra 中指代一段连续地址范围的术语。片段之间不能重叠。片段的更传统名称是*程序段*（例如，*.text*、*.data*
    和 *.bss*）。与程序树相关的操作包括以下内容：
- en: Create folder/fragment
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建文件夹/片段
- en: Expand/Collapse/Merge folders
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展开/折叠/合并文件夹
- en: Add/Remove folders/fragments
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加/删除文件夹/片段
- en: Identify content in Listing window and move to a fragment
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在列出窗口中识别内容并移动到片段
- en: Sort by name/address
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按名称/地址排序
- en: Select addresses
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择地址
- en: Copy/Cut/Paste fragment/folders
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制/剪切/粘贴片段/文件夹
- en: Reorder folders
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新排序文件夹
- en: The Program Trees window is a connected window, so clicking a fragment in the
    window navigates you to that location in the Listing window. More information
    about the Program Trees window can be found in Ghidra Help.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 程序树窗口是一个连接窗口，因此在窗口中点击某个片段会将你导航到列出窗口中的相应位置。有关程序树窗口的更多信息，请参阅 Ghidra 帮助文档。
- en: '#### ***The Symbol Tree Window***'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '#### ***符号树窗口***'
- en: When you import a file into a Ghidra project, a Ghidra loader module is selected
    to load the file content. When present in the binary, the loader is capable of
    extracting symbol table information (discussed in [Chapter 2](ch02.xhtml#ch02))
    for display in the Symbol Tree window shown in [Figure 5-13](ch05.xhtml#fig5_13).
    The Symbol Tree window includes the imports, exports, functions, labels, classes,
    and namespaces associated with a program. Each of these categories and associated
    symbol types are discussed in the sections that follow.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将文件导入 Ghidra 项目时，系统会选择一个 Ghidra 加载模块来加载文件内容。如果二进制文件中存在符号表信息，加载器能够提取该符号表信息（在[第
    2 章](ch02.xhtml#ch02)中讨论）并在符号树窗口中显示，如[图 5-13](ch05.xhtml#fig5_13)所示。符号树窗口包括与程序相关的导入、导出、函数、标签、类和命名空间。接下来的部分将讨论这些类别及相关的符号类型。
- en: '![image](Images/fig5-13.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-13.jpg)'
- en: '*Figure 5-13: CodeBrowser Symbol Tree window*'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-13：CodeBrowser 符号树窗口*'
- en: All six of the Symbol Tree folders can be controlled by the filter at the bottom
    of the Symbol Tree window. This functionality will become more valuable as you
    get to know the file that you are analyzing. In addition, you will find the Symbol
    Tree window offers functionality similar to command line tools such as `objdump`
    (`-T`), `readelf` (`-s`), and `dumpbin` (`/EXPORTS`).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 符号树窗口底部的过滤器可以控制所有六个符号树文件夹。随着你对所分析的文件越来越熟悉，这个功能会变得更加有价值。此外，你会发现符号树窗口提供了与命令行工具类似的功能，如
    `objdump` (`-T`)、`readelf` (`-s`) 和 `dumpbin` (`/EXPORTS`)。
- en: '**Imports**'
  id: totrans-117
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**导入**'
- en: The *Imports* folder in the Symbol Tree window lists all functions that are
    imported by the binary being analyzed. It is relevant only when a binary makes
    use of shared libraries—statically linked binaries have no external dependencies
    and therefore no imports. The *Imports* folder lists imported libraries with entries
    for each item (function or data) imported from that library. Clicking any symbol
    within the Symbol Tree view jumps all connected displays to the selected symbol.
    In our sample Windows binary, clicking the `GetModuleHandleA` in the *Imports*
    folder would jump the disassembly window to the import address table entry for
    `GetModuleHandleA`, which in this example resides at address `0040e108`, as shown
    in [Figure 5-14](ch05.xhtml#fig5_14).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在符号树窗口中的*Imports*文件夹列出了正在分析的二进制文件导入的所有函数。仅当二进制文件使用共享库时，此文件夹才相关——静态链接的二进制文件没有外部依赖，因此没有导入项。*Imports*文件夹列出了导入的库，每个条目表示从该库导入的项（函数或数据）。单击符号树视图中的任何符号会使所有相关显示跳转到选定的符号。在我们示例中的Windows二进制文件中，点击*Imports*文件夹中的`GetModuleHandleA`将使反汇编窗口跳转到`GetModuleHandleA`的导入地址表条目，在这个例子中它位于地址`0040e108`，如[图5-14](ch05.xhtml#fig5_14)所示。
- en: '![image](Images/fig5-14.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-14.jpg)'
- en: '*Figure 5-14: Import address table entry and associated location in Listing
    window*'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5-14：导入地址表条目及其在列表窗口中的相关位置*'
- en: An important point to remember about the Imports category is that it displays
    only the symbols named in the binary’s import table. Symbols that a binary chooses
    to load on its own using a mechanism such as `dlopen/dlsym` or `LoadLibrary/GetProcAddress`
    will not be listed in the Symbol Tree window.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的一个重要点是，Imports类别只显示二进制文件的导入表中命名的符号。二进制文件选择通过诸如`dlopen/dlsym`或`LoadLibrary/GetProcAddress`等机制自行加载的符号将不会在符号树窗口中列出。
- en: '**Exports**'
  id: totrans-122
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**导出**'
- en: 'The *Exports* folder lists the entry points into the file. These include the
    program’s execution entry point, as specified in its header section, along with
    any functions and variables that the file exports for use by other files. Exported
    functions are commonly found in shared libraries such as Windows DLL files. Exported
    entries are listed by name, and the corresponding virtual address will be highlighted
    in the Listing window when the export is selected. For executable files, the *Exports*
    folder always contains at least one entry: the program’s execution entry point.
    Ghidra may name this symbol `entry` or `_start`, depending on the binary’s type.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '*Exports*文件夹列出了文件的入口点。这些入口点包括程序的执行入口点，通常在其头部部分中指定，以及文件导出供其他文件使用的任何函数和变量。导出的函数通常出现在共享库中，例如Windows
    DLL文件。导出的条目按名称列出，当选择导出项时，相应的虚拟地址将在列表窗口中突出显示。对于可执行文件，*Exports*文件夹始终至少包含一个条目：程序的执行入口点。根据二进制文件的类型，Ghidra可能将此符号命名为`entry`或`_start`。'
- en: '**Functions**'
  id: totrans-124
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**函数**'
- en: The *Functions* folder contains a list of every function that Ghidra has identified
    in the binary. Hovering over a function name in the Symbol Tree window generates
    a pop-up with detailed information about the function, as shown in [Figure 5-15](ch05.xhtml#fig5_15).
    As part of the loading process, the loader utilizes various algorithms, including
    file structure analysis and byte sequence matching to infer the compiler that
    was used to create the file. During the analysis phase, the *Function ID* analyzer
    utilizes the compiler identification information to perform hash-based function
    body matching in order to identify the presence of library function bodies that
    may have been linked into the binary. When a hash match is made, Ghidra retrieves
    the matched function’s name from the hash database (contained in Ghidra *.fidbf*
    files) and adds the name as a function symbol. Hash matching is particularly useful
    on stripped binaries, as it provides a means of symbol recovery that is independent
    of the presence of a symbol table. This functionality is discussed in more depth
    in “[Function IDs](ch13.xhtml#ch13lev226)” on [page 272](ch13.xhtml#page_272).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*Functions* 文件夹包含了 Ghidra 在二进制文件中识别的每个函数的列表。在符号树窗口中，将鼠标悬停在函数名上会弹出一个详细信息框，显示有关该函数的详细信息，如
    [图 5-15](ch05.xhtml#fig5_15) 所示。在加载过程中，加载器利用各种算法，包括文件结构分析和字节序列匹配，以推断用于创建文件的编译器。在分析阶段，*Function
    ID* 分析器利用编译器识别信息，进行基于哈希的函数体匹配，以识别可能已经链接到二进制文件中的库函数体。当哈希匹配成功时，Ghidra 从哈希数据库（包含在
    Ghidra *.fidbf* 文件中）中获取匹配函数的名称，并将其添加为函数符号。哈希匹配对于去符号化的二进制文件特别有用，因为它提供了一种独立于符号表存在的符号恢复方式。有关此功能的更深入讨论，请参见
    “[Function IDs](ch13.xhtml#ch13lev226)” 章节中的 [第 272 页](ch13.xhtml#page_272)。'
- en: '![image](Images/fig5-15.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-15.jpg)'
- en: '*Figure 5-15: Symbol Tree Functions folder pop-up*'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-15：符号树函数文件夹弹出框*'
- en: '**Labels**'
  id: totrans-128
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**标签**'
- en: The *Labels* folder is the data equivalent of the *Functions* folder. Any data
    symbols contained in a binary’s symbol table will be listed in the *Labels* folder.
    In addition, anytime you add a new label name to a data address, that label will
    be added to the *Labels* folder.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '*Labels* 文件夹是 *Functions* 文件夹的数据等价物。任何包含在二进制符号表中的数据符号都将列在 *Labels* 文件夹中。此外，每当你将新的标签名添加到数据地址时，该标签将被添加到
    *Labels* 文件夹中。'
- en: '**Classes**'
  id: totrans-130
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**类别**'
- en: The *Classes* folder contains an entry for each class identified by Ghidra during
    its analysis phase. Under each, Ghidra lists the identified data and methods that
    may assist you in understanding the behavior of the class. C++ classes and the
    structures that Ghidra uses to populate the classes folder are discussed in more
    detail in [Chapter 8](ch08.xhtml#ch08).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '*Classes* 文件夹包含 Ghidra 在分析阶段识别的每个类的条目。在每个类下，Ghidra 列出了已识别的数据和方法，这些数据和方法有助于你理解类的行为。C++
    类及 Ghidra 用于填充类文件夹的结构在 [第 8 章](ch08.xhtml#ch08) 中有更详细的讨论。'
- en: '**Namespaces**'
  id: totrans-132
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**命名空间**'
- en: In the *Namespaces* folder, Ghidra may create new namespaces to provide organization
    and ensure that assigned names do not conflict in the binary. For example, a namespace
    may be created for each identified external library or for each switch statement
    that uses jump tables (allowing jump table labels to be reused in other switch
    statements without conflicting).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *Namespaces* 文件夹中，Ghidra 可能会创建新的命名空间以提供组织结构，并确保分配的名称在二进制文件中不会冲突。例如，可能会为每个识别到的外部库或每个使用跳转表的
    switch 语句创建命名空间（允许跳转表标签在其他 switch 语句中重复使用而不发生冲突）。
- en: '***The Data Type Manager Window***'
  id: totrans-134
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***数据类型管理器窗口***'
- en: The Data Type Manager window allows you to locate, organize, and apply data
    types to your file by using a system of data type archives. Archives represent
    Ghidra’s accumulated knowledge of predefined data types gleaned from header files
    included with most popular compilers. By processing header files, Ghidra understands
    the data types that are expected by common library functions and can annotate
    your disassembly and decompiler listings accordingly. Similarly, from these header
    files, Ghidra understands both the size and layout of complex data structures.
    All of this information is collected into archive files and applied anytime a
    binary is analyzed.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类型管理器窗口允许你通过使用数据类型档案系统来定位、组织并应用数据类型到文件中。档案代表了 Ghidra 从大多数流行编译器附带的头文件中收集的预定义数据类型的积累知识。通过处理头文件，Ghidra
    理解常见库函数所期望的数据类型，并能够相应地注释你的反汇编和反编译列表。同样，Ghidra 从这些头文件中理解复杂数据结构的大小和布局。所有这些信息都被收集到档案文件中，并在每次分析二进制文件时应用。
- en: Referring back to [Figure 5-4](ch05.xhtml#fig5_4), you can see that the root
    of the BuiltInTypes tree, which contains primitive types like `int` that cannot
    be changed, renamed, or moved within a data type archive, is displayed in the
    Data Type Manager window (bottom left of the CodeBrowser window) even without
    a program loaded. In addition to the built-in types, Ghidra supports the creation
    of user-defined data types, including structures, unions, enums, and typedefs.
    It also supports arrays and pointers as derived data types.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾[图5-4](ch05.xhtml#fig5_4)，你可以看到内建类型树的根节点，其中包含诸如`int`等无法更改、重命名或在数据类型档案中移动的原始类型，即使没有加载程序，它也会在数据类型管理器窗口（CodeBrowser窗口的左下角）中显示。除了内建类型，Ghidra还支持创建用户定义的数据类型，包括结构体、联合体、枚举和类型定义。它还支持数组和指针作为派生数据类型。
- en: Each file you open has an associated entry in the Data Type Manager window,
    as shown previously in [Figure 5-5](ch05.xhtml#fig5_5). The folder shares the
    name of the current file and entries within the folder are specific to the current
    file.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 每个你打开的文件在数据类型管理器窗口中都有一个相关条目，如前文[图5-5](ch05.xhtml#fig5_5)所示。该文件夹的名称与当前文件相同，文件夹内的条目是特定于当前文件的。
- en: The Data Type Manager window displays nodes for each of the data type archives
    that are open. Archives can be opened automatically, such as when a program references
    an archive, or manually by the user. Data types and the Data Type Manager are
    covered in more detail in [Chapters 8](ch08.xhtml#ch08) and [13](ch13.xhtml#ch13).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类型管理器窗口显示每个已打开的数据类型档案的节点。档案可以自动打开，例如当程序引用一个档案时，或者由用户手动打开。数据类型和数据类型管理器将在[第8章](ch08.xhtml#ch08)和[第13章](ch13.xhtml#ch13)中更详细地介绍。
- en: '***The Console Window***'
  id: totrans-139
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***控制台窗口***'
- en: The Console window at the bottom of the CodeBrowser window serves as Ghidra’s
    output area for plugins and scripts, including those you develop yourself, and
    is the place to look for information on tasks Ghidra is performing as you work
    with a file. Developing scripts and plugins is introduced in [Chapters 14](ch14.xhtml#ch14)
    and [15](ch15.xhtml#ch15).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 位于CodeBrowser窗口底部的控制台窗口作为Ghidra的插件和脚本输出区，包括你自己开发的插件和脚本，是查看Ghidra在处理文件时执行任务信息的地方。开发脚本和插件将在[第14章](ch14.xhtml#ch14)和[第15章](ch15.xhtml#ch15)中介绍。
- en: '***The Decompiler Window***'
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***反编译器窗口***'
- en: The Decompiler window allows you to simultaneously view and manipulate assembly
    and C representations of your binary through connected windows. The C representation
    that is generated by the Ghidra decompiler isn’t always perfect, but it can be
    very useful in helping you to understand a binary. Basic functionality provided
    by the decompiler includes recovery of expressions, variables, function parameters,
    and structure fields. The decompiler is also often capable of recovering a function’s
    block structure, which tends to get obscured in assembly language, which is not
    block structured and makes extensive use of `goto` (or equivalent) statements
    to appear block structured.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 反编译器窗口允许你通过连接的窗口同时查看和操作二进制文件的汇编和C语言表示。由Ghidra反编译器生成的C语言表示并不总是完美的，但它在帮助你理解二进制文件时非常有用。反编译器提供的基本功能包括恢复表达式、变量、函数参数和结构体字段。反编译器通常还能够恢复函数的块结构，而这个结构在汇编语言中通常会被掩盖，因为汇编语言不是块结构的，并且大量使用`goto`（或等效）语句使其看起来像是块结构。
- en: The Decompiler window displays a C representation of a function selected in
    the Listing window, as shown in [Figure 5-16](ch05.xhtml#fig5_16). Depending on
    your experience with assembly language, the decompiled code may be much easier
    to understand than the code in the Listing window. Even beginning programmers
    should be able to identify the infinite loop in the decompiled function. (The
    `while` loop condition is dependent on the value of `param_3`, which is not modified
    within the loop.)
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 反编译器窗口显示所选函数的C语言表示，如[图5-16](ch05.xhtml#fig5_16)所示。根据你对汇编语言的了解，反编译后的代码可能比在列表窗口中的代码更容易理解。即使是初学者程序员，也应能够识别出反编译函数中的无限循环。（`while`循环条件依赖于`param_3`的值，而该值在循环中没有被修改。）
- en: '![image](Images/fig5-16.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-16.jpg)'
- en: '*Figure 5-16: Listing and Decompiler windows*'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5-16：列表窗口和反编译器窗口*'
- en: The Decompiler window icons are shown in [Figure 5-17](ch05.xhtml#fig5_17).
    You can use the Snapshot icon to open additional (disconnected) Decompiler windows
    if you want to compare the decompiled version of multiple functions or continue
    viewing a particular function while moving elsewhere in the Listing window. The
    Export icon allows you to save the decompiled function to a C file.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 反汇编窗口中的图标显示在[图 5-17](ch05.xhtml#fig5_17)中。如果你想比较多个函数的反汇编版本，或者在Listing窗口中移动时继续查看特定函数，可以使用“快照”图标打开额外的（不连接的）反汇编窗口。“导出”图标允许你将反汇编的函数保存为C文件。
- en: Within the Decompiler window, context menus are available through right-clicking
    that allow you to perform actions associated with a highlighted item. The options
    associated with one of the function parameters, `param_1`, are shown in [Figure
    5-18](ch05.xhtml#fig5_18).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在反汇编窗口中，可以通过右键单击打开上下文菜单，执行与高亮项目相关的操作。与函数参数`param_1`相关的选项显示在[图 5-18](ch05.xhtml#fig5_18)中。
- en: '![image](Images/fig5-17.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-17.jpg)'
- en: '*Figure 5-17: Decompiler window toolbar*'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-17：反汇编窗口工具栏*'
- en: '![image](Images/fig5-18.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-18.jpg)'
- en: '*Figure 5-18: Decompiler window options for function parameters*'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-18：反汇编窗口中函数参数的选项*'
- en: Decompilation is an extraordinarily complicated process, and decompiler theory
    remains an active research area. Unlike disassembly, whose accuracy can be verified
    against manufacturers’ reference manuals, there are no reference manuals that
    provide canonical translations of assembly language back to C (or C to assembly
    for that matter). In fact, while Ghidra’s decompiler always generates C source
    code, it may be the case that the binary the decompiler is analyzing was originally
    written in a language other than C, and many of the decompiler’s C-oriented assumptions
    may not hold at all.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 反汇编是一个极其复杂的过程，反汇编理论仍然是一个活跃的研究领域。与能够根据制造商参考手册验证其准确性的反汇编不同，当前没有提供从汇编语言回译为C语言的规范化手册（或者C到汇编的规范化手册）。事实上，虽然Ghidra的反汇编器始终生成C源代码，但反汇编器正在分析的二进制文件可能最初并非用C语言编写，因此许多反汇编器假设的C语言相关推断可能根本不成立。
- en: As with most complex plugins, the decompiler has idiosyncrasies, and the quality
    of its output depends, to a large extent, on the quality of its input. Many of
    the issues and irregularities in the Decompiler window can be traced back to issues
    with the underlying disassembly, so if the decompiled code doesn’t make sense,
    you may need to spend time improving the quality of the disassembly. In most cases,
    this involves annotating the disassembly with more accurate data type information,
    which is discussed in [Chapters 8](ch08.xhtml#ch08) and [13](ch13.xhtml#ch13).
    We continue to explore the decompiler’s capabilities in subsequent chapters and
    discuss it in depth in [Chapter 19](ch19.xhtml#ch19).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数复杂插件一样，反汇编器有其独特性，其输出的质量在很大程度上取决于输入的质量。反汇编窗口中许多问题和不规则现象都可以追溯到底层反汇编中的问题，因此，如果反汇编的代码没有意义，你可能需要花时间改进反汇编的质量。在大多数情况下，这涉及使用更准确的数据类型信息对反汇编进行注释，相关内容将在[第8章](ch08.xhtml#ch08)和[第13章](ch13.xhtml#ch13)中讨论。我们将在后续章节继续探索反汇编器的功能，并在[第19章](ch19.xhtml#ch19)中深入讨论它。
- en: '**Other Ghidra Windows**'
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**其他 Ghidra 窗口**'
- en: In addition to the six default windows, you can open other windows to support
    your SRE process with alternate or specialized views into the file. The list of
    available windows is displayed from the Window menu, shown previously in [Figure
    5-4](ch05.xhtml#fig5_4). The utility of these displays depends on both the characteristics
    of the binary you are analyzing and your skill with Ghidra. Several of these windows
    are sufficiently specialized to require more detailed coverage in later chapters,
    but we introduce some common ones here.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 除了六个默认窗口外，你还可以打开其他窗口，以通过不同的视图来支持你的SRE过程，查看文件的其他或专业化的内容。可用窗口的列表显示在“窗口”菜单中，如前文[图
    5-4](ch05.xhtml#fig5_4)所示。这些显示的实用性取决于你分析的二进制文件的特征以及你使用Ghidra的技能。其中一些窗口足够专业，需要在后续章节中更详细地介绍，但我们在这里介绍一些常见的窗口。
- en: '***The Bytes Window***'
  id: totrans-156
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***字节窗口***'
- en: The Bytes window provides a raw look at the byte-level content of the file.
    By default, the Bytes window opens on the upper-right side of the CodeBrowser
    and provides a standard hex dump display of the program contents with 16 bytes
    per line. The window doubles as a hex editor and can be configured to display
    a variety of formats by using the Settings tool in the Bytes window toolbar. In
    many cases, it might be helpful to add the ASCII display to the Bytes window,
    as shown in [Figure 5-19](ch05.xhtml#fig5_19). The figure also shows the Byte
    Viewer Options dialog and toolbar icons for editing or snapshotting the byte view.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Bytes 窗口提供了文件字节级内容的原始视图。默认情况下，Bytes 窗口会打开在 CodeBrowser 的右上方，并以每行 16 个字节的标准十六进制转储显示程序内容。该窗口同时作为十六进制编辑器，并且可以通过使用
    Bytes 窗口工具栏中的设置工具来配置显示各种格式。在许多情况下，向 Bytes 窗口添加 ASCII 显示可能会很有帮助，如[图 5-19](ch05.xhtml#fig5_19)所示。该图还显示了字节查看器选项对话框和用于编辑或快照字节视图的工具栏图标。
- en: '![image](Images/fig5-19.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-19.jpg)'
- en: '*Figure 5-19: Synchronized hex and disassembly views with Toggle and Snapshot
    icons emphasized*'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-19：同步的十六进制和反汇编视图，突出显示了切换和快照图标*'
- en: As with the Listing window, several Bytes windows can be opened simultaneously
    using the Snapshot icon (see [Figure 5-19](ch05.xhtml#fig5_19)) in the Bytes window
    toolbar. By default, the first Bytes window has a connection to the Listing window,
    so scrolling in one window and clicking an element causes the other window to
    scroll to the same location (same virtual address). Subsequent Bytes windows are
    disconnected, which allows you to scroll through them independently. When a window
    is disconnected, the window name appears within square brackets in the window
    title bar.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 与列表窗口一样，可以使用 Bytes 窗口工具栏中的快照图标（见[图 5-19](ch05.xhtml#fig5_19)）同时打开多个 Bytes 窗口。默认情况下，第一个
    Bytes 窗口与列表窗口相连，因此在一个窗口中滚动和点击一个元素会导致另一个窗口滚动到相同的位置（相同的虚拟地址）。后续的 Bytes 窗口是断开的，这使得您可以独立滚动它们。当窗口断开连接时，窗口名称会出现在窗口标题栏的方括号内。
- en: To turn the Bytes window into a hex (or ASCII) editor, simply toggle the pencil
    icon highlighted in [Figure 5-19](ch05.xhtml#fig5_19). The cursor will turn red
    to indicate that you can edit, though you will not be able to edit at addresses
    that contain an existing code item such as an instruction. When you are finished
    editing, toggle the icon again and you will be back in read-only mode. (Note that
    any changes will not be reflected in disconnected Bytes windows.)
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 Bytes 窗口转换为十六进制（或 ASCII）编辑器，只需切换[图 5-19](ch05.xhtml#fig5_19)中高亮的铅笔图标。光标将变为红色，表示可以进行编辑，尽管您无法在包含现有代码项（如指令）的地址上进行编辑。当编辑完成后，再次切换该图标即可返回只读模式。（请注意，任何更改不会反映在断开连接的
    Bytes 窗口中。）
- en: If the Hex column displays question marks rather than hex values, Ghidra is
    telling you that it is not sure what values might occupy a given virtual address
    range. Such is the case when a program contains a *bss* section,^([4](footnotes.xhtml#ch05fn4))
    which typically occupies no space within a file but is expanded by the loader
    to accommodate the program’s static storage requirements.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果十六进制列显示问号而不是十六进制值，Ghidra 正在告诉您，它不确定给定虚拟地址范围内可能占用的值。这种情况通常出现在程序包含 *bss* 节时，^([4](footnotes.xhtml#ch05fn4))
    该节通常在文件中不占用空间，但会被加载器扩展以适应程序的静态存储需求。
- en: '#### ***The Defined Data Window***'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '#### ***定义数据窗口***'
- en: The Defined Data window displays a string representation of data defined in
    the current program, view, or selection, along with the associated address, type,
    and size, as shown in [Figure 5-20](ch05.xhtml#fig5_20). As with most of the columnar
    windows, you can sort by any column in ascending or descending order by clicking
    the column header. Double-clicking any row in the Defined Data window causes the
    Listing window to jump to the address of the selected item.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 定义数据窗口显示当前程序、视图或选择中定义的数据的字符串表示形式，以及相关的地址、类型和大小，如[图 5-20](ch05.xhtml#fig5_20)所示。与大多数列式窗口一样，您可以通过点击列标题按升序或降序对任何列进行排序。在定义数据窗口中双击任何一行会导致列表窗口跳转到所选项的地址。
- en: When used with cross-references (discussed in [Chapter 9](ch09.xhtml#ch09)),
    the Defined Data window provides the means to rapidly spot an interesting item
    and to track back to any location in the program that references that item with
    only a few clicks. For example, you might see the string `"SOFTWARE\Microsoft\Windows\Current
    Version\Run"` listed and wonder why an application is referencing this particular
    key within the Windows registry, and then discover that the program is setting
    that registry key to automatically start itself when Windows boots.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当与交叉引用一起使用时（在[第 9 章](ch09.xhtml#ch09)中讨论），已定义数据窗口可以快速识别有趣的项目，并通过几次点击追踪到程序中引用该项目的任何位置。例如，您可能会看到字符串
    `"SOFTWARE\Microsoft\Windows\Current Version\Run"` 列出，并想知道为什么某个应用程序会引用 Windows
    注册表中的这个特定键，然后发现该程序正在设置该注册表键，以便在 Windows 启动时自动启动。
- en: '![image](Images/fig5-20.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-20.jpg)'
- en: '*Figure 5-20: Defined Data window with Filter icon emphasized*'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-20：已定义数据窗口，强调显示了过滤图标*'
- en: The Defined Data window has extensive filtering capabilities. In addition to
    the Filter bar at the bottom of the window, a Filter icon at the top right (emphasized
    in [Figure 5-20](ch05.xhtml#fig5_20)) allows you to control additional data type
    filter options, as shown in [Figure 5-21](ch05.xhtml#fig5_21).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 已定义数据窗口具有强大的过滤功能。除了窗口底部的过滤栏外，右上角的过滤图标（在[图 5-20](ch05.xhtml#fig5_20)中突出显示）允许您控制额外的数据类型过滤选项，如[图
    5-21](ch05.xhtml#fig5_21)所示。
- en: '![image](Images/fig5-21.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-21.jpg)'
- en: '*Figure 5-21: Defined data type filter options*'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-21：已定义数据类型过滤选项*'
- en: Every time you close the Set Data Type Filter dialog by clicking OK, Ghidra
    will regenerate the Defined Data window contents in accordance with the new settings.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 每次通过点击确定关闭设置数据类型过滤器对话框时，Ghidra 会根据新的设置重新生成已定义数据窗口的内容。
- en: '***The Defined Strings Window***'
  id: totrans-172
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***已定义字符串窗口***'
- en: The Defined Strings window displays strings that have been defined in the binary.
    An example of this window is shown in [Figure 5-22](ch05.xhtml#fig5_22). In addition
    to the default columns displayed in the figure, you can add columns by right-clicking
    in the row of column titles. Perhaps one of the most interesting available columns
    is the Has Encoding Error flag, which can be indicative of an issue with the character
    set or misidentification of a string. In addition to this window, substantial
    string search functionality is available in Ghidra. This is discussed in [Chapter
    6](ch06.xhtml#ch06).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 已定义字符串窗口显示了在二进制文件中定义的字符串。此窗口的示例如[图 5-22](ch05.xhtml#fig5_22)所示。除了图中显示的默认列外，您还可以通过右键单击列标题的行来添加列。可能最有趣的列之一是“是否存在编码错误”标志，它可能表明字符集存在问题或字符串被误识别。除了此窗口，Ghidra
    还提供了强大的字符串搜索功能。有关此功能的讨论，请参见[第 6 章](ch06.xhtml#ch06)。
- en: '![image](Images/fig5-22.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-22.jpg)'
- en: '*Figure 5-22: Defined Strings window*'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-22：已定义字符串窗口*'
- en: '***The Symbol Table and Symbol References Windows***'
  id: totrans-176
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***符号表和符号引用窗口***'
- en: The Symbol Table window provides a summary listing of all the global names within
    a binary. Eight columns are displayed by default, as shown in [Figure 5-23](ch05.xhtml#fig5_23).
    The window is highly configurable, with the capability to add and delete columns
    in the display as well as to sort in ascending or descending order on any column.
    The first two default columns are Name and Location. A *name* is nothing more
    than a symbolic description given to a symbol defined at a *location*.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 符号表窗口提供了二进制文件中所有全局名称的汇总列表。默认显示八列，如[图 5-23](ch05.xhtml#fig5_23)所示。该窗口具有高度的可配置性，可以在显示中添加和删除列，也可以对任意列进行升序或降序排序。前两列默认是名称和位置。*名称*只是赋予在*位置*上定义的符号的一个符号性描述。
- en: The Symbol Table is connected to the Listing window but provides the capability
    to control its interaction with the Listing window. The emphasized icon on the
    right in [Figure 5-23](ch05.xhtml#fig5_23) is a toggle that determines whether
    a single click on a location in the Symbol Table window causes a related move
    in the Listing window. Regardless of the toggle selection, double-clicking any
    Symbol Table location entry will immediately jump the Listing view to display
    the selected entry. This provides a useful tool for rapidly navigating to known
    locations within a program listing.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 符号表与列表窗口连接，但提供了控制其与列表窗口交互的功能。[图 5-23](ch05.xhtml#fig5_23)中右侧的强调图标是一个切换按钮，用于决定单击符号表窗口中的某个位置是否会导致列表窗口中的相关位置移动。无论切换按钮的选择如何，双击任何符号表位置条目都会立即跳转到列表视图并显示所选条目。这为快速在程序列表中导航到已知位置提供了一个有用的工具。
- en: '![image](Images/fig5-23.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-23.jpg)'
- en: '*Figure 5-23: Symbol Table window with Display Symbol References and Navigation
    Toggle icons emphasized*'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-23：符号表窗口，突出显示显示符号引用和导航切换图标*'
- en: There is extensive filtering capability available in the Symbol Table window
    and several ways to access the filtering options. The cog icon in the toolbar
    opens the Symbol Table Filter dialog. The dialog (with the Use Advanced Filters
    box checked) is shown in [Figure 5-24](ch05.xhtml#fig5_24). In addition to this
    dialog, you can use the Filter options at the bottom of the window. Thorough discussions
    of the symbol table filtering options are available in Ghidra Help.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 符号表窗口提供了强大的过滤功能，并且有多种方式可以访问过滤选项。工具栏中的齿轮图标打开符号表过滤对话框。该对话框（选中“使用高级过滤器”框）如[图 5-24](ch05.xhtml#fig5_24)所示。除了这个对话框，你还可以使用窗口底部的过滤选项。有关符号表过滤选项的详细讨论，请参见Ghidra帮助文档。
- en: The emphasized icon on the left in [Figure 5-23](ch05.xhtml#fig5_23) is the
    Display Symbol References icon. Clicking this icon adds the Symbol References
    window to the Symbol Table window. By default, these two tables will appear side
    by side. To improve readability, you can drag the Symbol References window below
    the Symbol Table window, as shown in [Figure 5-25](ch05.xhtml#fig5_25). The connection
    between these two tables is unidirectional, with the Symbol References table being
    updated when a selection is made in the Symbol Table.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 5-23](ch05.xhtml#fig5_23)中左侧的强调图标是显示符号引用图标。点击此图标将把符号引用窗口添加到符号表窗口。默认情况下，这两个表格将并排显示。为了提高可读性，你可以将符号引用窗口拖到符号表窗口下方，如[图
    5-25](ch05.xhtml#fig5_25)所示。这两个表格之间的连接是单向的，当在符号表中进行选择时，符号引用表会更新。'
- en: '![image](Images/fig5-24.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-24.jpg)'
- en: '*Figure 5-24: Symbol Table Filter dialog*'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-24：符号表过滤对话框*'
- en: '![image](Images/fig5-25.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-25.jpg)'
- en: '*Figure 5-25: Symbol Table with Symbol References*'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-25：带有符号引用的符号表*'
- en: 'Like the Symbol Table window, the Symbol References window has the same column
    organization controls. In addition, the content of the Symbol References window
    is controlled by the three icons (S, I, and D) at the top right of the Symbol
    References toolbar. These options are mutually exclusive, meaning only one can
    be selected at a time:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 与符号表窗口一样，符号引用窗口也具有相同的列组织控制。此外，符号引用窗口的内容由符号引用工具栏右上角的三个图标（S、I和D）控制。这些选项是互斥的，意味着一次只能选择一个：
- en: '**S icon** When this icon is selected, the Symbol References window will display
    all *references to* the symbol that you have selected in the Symbol Table. [Figure
    5-25](ch05.xhtml#fig5_25) shows a Symbol References window with this option selected.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**S 图标** 当选择此图标时，符号引用窗口将显示你在符号表中选择的符号的所有*引用*。[图 5-25](ch05.xhtml#fig5_25)显示了选择此选项时的符号引用窗口。'
- en: '**I icon** When this icon is selected, the Symbol References window will display
    all instruction references from the function that you have selected in the Symbol
    Table. (This list will be empty if you did not select a function entry point.)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**I 图标** 当选择此图标时，符号引用窗口将显示你在符号表中选择的函数的所有指令引用。（如果你没有选择函数入口点，则此列表为空。）'
- en: '**D icon** When this icon is selected, the Symbol References window will display
    all data references from the function that you have selected in the Symbol Table.
    This list will be empty if you did not select a function entry point or if the
    function makes no references to any data symbols.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**D 图标** 选择此图标时，符号引用窗口将显示符号表中你所选函数的所有数据引用。如果未选择函数入口点或该函数没有引用任何数据符号，则此列表将为空。'
- en: '***The Memory Map Window***'
  id: totrans-191
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***内存映射窗口***'
- en: The Memory Map window displays a summary listing of the memory blocks present
    in the program, as shown in [Figure 5-26](ch05.xhtml#fig5_26). Note that what
    Ghidra terms *memory blocks* are frequently called *sections* when discussing
    the structure of binary files. Information presented in the window includes the
    memory block (section) name, start and end addresses, length, permission flags,
    block type, initialized flag, as well as a space for source filename and user
    comments. The start and end addresses represent the virtual address range to which
    the program sections will be mapped at runtime.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 内存映射窗口显示了程序中内存块的汇总列表，如[图 5-26](ch05.xhtml#fig5_26)所示。请注意，Ghidra所称的*内存块*在讨论二进制文件结构时通常被称为*节*。窗口中展示的信息包括内存块（节）名称、起始和结束地址、长度、权限标志、块类型、初始化标志以及源文件名和用户评论的空间。起始和结束地址表示程序节在运行时将被映射到的虚拟地址范围。
- en: '![image](Images/fig5-26.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-26.jpg)'
- en: '*Figure 5-26: Memory Map window*'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-26：内存映射窗口*'
- en: Double-clicking any start or end address in the window jumps the Listing window
    (and all other connected windows) to the specified address. The Memory Map window
    toolbar provides options to add/delete blocks, move blocks, split/merge blocks,
    edit addresses, and set a new image base. These features are particularly useful
    when reverse engineering files with nonstandard formats, as the binary’s segment
    structure may not have been detected by the Ghidra loader.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 双击窗口中的任何起始地址或结束地址，都会将列表窗口（以及所有其他连接的窗口）跳转到指定地址。内存映射窗口工具栏提供了添加/删除块、移动块、拆分/合并块、编辑地址和设置新的图像基地址等选项。这些功能在反向工程处理非标准格式的文件时尤为有用，因为Ghidra加载器可能未能检测到二进制文件的段结构。
- en: Command line counterparts to the Memory Map window include `objdump` (`-h`),
    `readelf` (`-S`), and `dumpbin` (`/HEADERS`).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行工具与内存映射窗口的对应命令包括`objdump`（`-h`）、`readelf`（`-S`）和`dumpbin`（`/HEADERS`）。
- en: '***The Function Call Graph Window***'
  id: totrans-197
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***函数调用图窗口***'
- en: In any program, a function can both call and be called by other functions. The
    Function Call Graph window shows the immediate neighbors of a given function.
    For our purposes, we will call Y a neighbor of X if Y directly calls X or if X
    directly calls Y. When you open the Function Call Graph window, Ghidra determines
    the neighbors of the function in which the cursor is positioned and generates
    the associated display. This display shows a function in the context it is used
    in the program file, but it is just a part of the big picture.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何程序中，函数既可以调用其他函数，也可以被其他函数调用。函数调用图窗口展示了给定函数的直接邻居。为了简便起见，我们将Y称为X的邻居，如果Y直接调用X，或者X直接调用Y。当你打开函数调用图窗口时，Ghidra会确定光标所在函数的邻居，并生成相应的显示。该显示展示了函数在程序文件中的使用上下文，但它只是大局中的一部分。
- en: '[Figure 5-27](ch05.xhtml#fig5_27) shows a function named `FUN_0040198c` that
    is called from `FUN_00401edc` and, in turn, makes calls to six other functions.
    Double-clicking any function in the window immediately jumps the Listing window
    and other connected windows to the selected function. Ghidra cross-references
    (XREFs) are the mechanisms that underlie the generation of the Function Call Graph
    window. XREFs are covered in more detail in [Chapter 9](ch09.xhtml#ch09).'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 5-27](ch05.xhtml#fig5_27) 显示了一个名为`FUN_0040198c`的函数，它是从`FUN_00401edc`调用的，并且依次调用了另外六个函数。在窗口中双击任何函数都会立即将列表窗口和其他连接的窗口跳转到选中的函数。Ghidra的交叉引用（XREFs）机制是生成函数调用图窗口的基础。关于XREFs的详细内容，请参见[第9章](ch09.xhtml#ch09)。'
- en: '![image](Images/fig5-27.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-27.jpg)'
- en: '*Figure 5-27: Function Call Graph window*'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-27：函数调用图窗口*'
- en: '**WHO’S CALLING?**'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**谁在调用？**'
- en: 'While the Function Call Graph window is helpful, sometimes you need the big
    picture, or at least a bigger picture. The Function Call Trees window (Window
    ▸ Function Call Trees) allows you to see all calls to and from a selected function.
    The Function Call Trees window (as shown in [Figure 5-28](ch05.xhtml#fig5_28))
    has two sections: one for incoming calls and one for outgoing calls. Both incoming
    and outgoing calls can be expanded and collapsed, as desired.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然函数调用图窗口很有帮助，但有时你需要更广泛的视角，或者至少是更大的视角。函数调用树窗口（窗口 ▸ 函数调用树）可以让你看到所有对选定函数的调用以及从选定函数的调用。函数调用树窗口（如[图
    5-28](ch05.xhtml#fig5_28)所示）分为两个部分：一个用于显示进入调用，另一个用于显示输出调用。进入调用和输出调用都可以根据需要展开或折叠。
- en: '![image](Images/fig5-28.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-28.jpg)'
- en: '*Figure 5-28: The Function Call Trees view*'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-28：函数调用树视图*'
- en: If you open the Function Call Tree window with the entry function selected,
    you can view a hierarchical representation of the program’s function calls.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在选中入口函数的情况下打开函数调用树窗口，你可以查看程序函数调用的层级表示。
- en: '**Summary**'
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: At first glance, the number of displays that Ghidra offers can seem overwhelming.
    You may find it easiest to stick with the default displays until you are comfortable
    enough to begin exploring the additional display offerings. In any case, you should
    certainly not feel obligated to use everything that Ghidra throws at you. Not
    every window will be useful in every reverse engineering scenario.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 初看之下，Ghidra 提供的显示窗口数量可能让人感到不知所措。在你足够熟悉之后，可能会发现坚持使用默认显示窗口最为简单，直到你开始探索额外的显示选项。无论如何，你绝不必觉得有义务使用
    Ghidra 提供的所有功能，并不是每个窗口在每个逆向工程场景下都能发挥作用。
- en: One of the best ways to familiarize yourself with Ghidra’s displays is simply
    to browse around the various tabbed subwindows that Ghidra populates with data
    about your binary and also open a few of the other available windows. The efficiency
    and effectiveness of your reverse engineering sessions will improve as your comfort
    level with Ghidra increases.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉 Ghidra 显示界面的最佳方法之一，就是浏览 Ghidra 为你的二进制文件填充的数据的各种标签子窗口，并且打开其他可用的窗口。当你对 Ghidra
    越来越熟悉时，你的逆向工程效率和效果也会提高。
- en: Ghidra is a very complex tool. In addition to the windows covered in this chapter,
    you may encounter additional dialogs as you endeavor to master Ghidra. We introduce
    key dialogs as they become relevant throughout the remainder of the book.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Ghidra 是一个非常复杂的工具。除了本章介绍的窗口外，你可能会遇到一些额外的对话框，当你努力掌握 Ghidra 时，我们会在书的其余部分介绍关键的对话框。
- en: At this point, you should be starting to feel more comfortable with the Ghidra
    interface and the CodeBrowser desktop. In the next chapter, we begin to focus
    on the many ways that you can manipulate a disassembly to enhance your understanding
    of its behavior and to generally make your life easier with Ghidra.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，你应该开始对 Ghidra 界面和 CodeBrowser 桌面感到更为熟悉。在下一章中，我们将开始关注你可以通过许多方式操作反汇编代码，以增强你对其行为的理解，并且一般来说帮助你更轻松地使用
    Ghidra。
