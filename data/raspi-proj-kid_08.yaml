- en: '8'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '8'
- en: THE AUTOMATIC TEXTING MACHINE
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自动短信发送机
- en: 'IN THIS CHAPTER, YOU’LL SET UP YOUR RASPBERRY PI TO SEND TEXT MESSAGES TO A
    REGISTERED MOBILE PHONE. ONCE YOU HAVE THAT BIT WORKING, YOU’LL CREATE A SIMPLE
    AUTOMATIC TEXT-REMINDER SERVICE: YOU’LL CODE A TIME AND A SHORT MESSAGE, AND WHEN
    THE SPECIFIED TIME IS REACHED, THE MESSAGE WILL BE SENT TO A NUMBER YOU INPUT.
    FOR EXAMPLE, YOU MIGHT SEND YOURSELF A MESSAGE TO REMIND YOU TO TAKE THE DOG FOR
    A WALK OR TO PICK SOMEONE UP, OR YOU MIGHT SEND A MESSAGE TO SOMEONE ELSE TO REMIND
    THEM EACH DAY THAT THEY OWE YOU $5!'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将设置你的 Raspberry Pi，以便向已注册的手机发送短信。一旦你完成了这一部分，你将创建一个简单的自动短信提醒服务：你将编写一个时间和简短的消息，当指定的时间到达时，消息将被发送到你输入的号码。例如，你可以发送一条消息提醒自己遛狗或接人，或者你也可以每天向别人发送一条消息，提醒他们欠你
    5 美元！
- en: WHAT YOU’LL NEED
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你将需要的物品
- en: 'Here are the items you’ll need for this project:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本项目所需的物品：
- en: Raspberry Pi
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raspberry Pi
- en: A basic mobile phone that can send and receive SMS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一部可以发送和接收短信的基本手机
- en: A LITTLE ABOUT SMS
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于短信的简要介绍
- en: On December 3, 1992, the first *Short Message Service (SMS)* message, more commonly
    known as a *text message*, was sent from a computer. It read *Happy Christmas*.
    This inexpensive, fast, and easy service proved an incredibly popular method of
    communication between mobile phone devices.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 1992 年 12 月 3 日，第一条*短信服务（SMS）*消息，通常被称为*文本消息*，从计算机发送出去。内容是*圣诞快乐*。这种廉价、快速、简单的服务成为了手机设备之间非常流行的通信方式。
- en: CREATING A SIMPLE TEXT SENDER
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个简单的文本发送器
- en: You’ll create a simplified text sender that will send whatever message you type
    as input to the designated number. The first step is to set up your own account
    with *Twilio*, a cloud-based communications company. Twilio allows you to write
    program code that can make and receive phone calls, send SMS texts, collect call
    duration statistics, and much more.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你将创建一个简化的文本发送器，将你输入的任何消息发送到指定的号码。第一步是设置你自己的账户，注册*Twilio*，一个基于云的通信公司。Twilio 让你编写程序代码，可以拨打和接听电话，发送短信，收集通话时长统计等。
- en: Because Twilio is a cloud-based service, it uses an *application programming
    interface (API)*. An API is a set of tools that lets you interact with web-based
    applications through code. You use the API to interact with Twilio’s web services
    to, for example, send an SMS message or check a call log. The Twilio website lets
    you create a free trial account, which is all you need for this project.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Twilio 是一个基于云的服务，它使用*应用程序编程接口（API）*。API 是一组工具，让你通过代码与基于 Web 的应用程序进行交互。你可以使用
    API 与 Twilio 的 Web 服务进行交互，例如发送短信或查看通话记录。Twilio 网站让你创建一个免费试用账户，这对于本项目来说完全足够。
- en: '**NOTE**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*You can set up the Twilio credentials on another computer and then log back
    into Twilio on your Pi if you find that easier*.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你觉得这样更方便，可以在另一台计算机上设置 Twilio 凭据，然后在 Pi 上重新登录 Twilio*。'
- en: Signing Up for a Twilio Account
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注册 Twilio 账户
- en: On your Pi, head over to the Twilio website at *[https://www.twilio.com/](https://www.twilio.com/)*.
    Click the red **Sign up and start building** button in the middle of the page,
    as shown in [Figure 8-1](ch08.xhtml#ch08fig01).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 Pi 上，前往 Twilio 网站：[https://www.twilio.com/](https://www.twilio.com/)。点击页面中间的红色**注册并开始构建**按钮，如[图
    8-1](ch08.xhtml#ch08fig01)所示。
- en: '![Image](../images/08fig01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/08fig01.jpg)'
- en: '**FIGURE 8-1** Starting at the Twilio landing page'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8-1** 从 Twilio 着陆页开始'
- en: Sign up for an account by filling in the form, which may have changed since
    the time of writing. Enter your first name, last name, an email address, and what
    you want your password to be. The password must be at least 14 characters long.
    Once you have completed these steps, click the red **Start your free trial** button.
    [Figure 8-2](ch08.xhtml#ch08fig02) shows all these options.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通过填写表格注册一个账户，该表格可能与写作时有所不同。输入你的名字、姓氏、电子邮件地址以及你希望设置的密码。密码必须至少包含 14 个字符。完成这些步骤后，点击红色的**开始免费试用**按钮。[图
    8-2](ch08.xhtml#ch08fig02)展示了所有这些选项。
- en: '![Image](../images/08fig02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/08fig02.jpg)'
- en: '**FIGURE 8-2** Signing up for a Twilio account'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8-2** 注册 Twilio 账户'
- en: You should have been sent a verification email with a hyperlink at the address
    you used to sign up. Click the link in your email to verify your email address
    and assure the site that you’re not a bot.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经收到一封验证电子邮件，里面有一个超链接，发送到你用来注册的地址。点击邮件中的链接，验证你的电子邮件地址，并向网站确认你不是机器人。
- en: Now, you’ll have to further assure the site that you’re not a bot. (Proving
    you are a human is a two-step process!) Add your mobile phone number and click
    the **Verify** button. You need to input a valid number because Twilio will send
    a verification code to the phone number you entered. You will need this code to
    continue.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要进一步确认你不是机器人。（证明你是人类是一个两步过程！）添加你的手机号码并点击**验证**按钮。你需要输入一个有效的号码，因为 Twilio
    会将验证码发送到你输入的号码。你将需要这个验证码才能继续。
- en: Your phone should then receive an SMS message with a verification number. On
    the Twilio page, enter the verification number and click **Submit**, as shown
    in [Figure 8-3](ch08.xhtml#ch08fig03).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你的手机应该会收到一条带有验证码的短信。在 Twilio 页面上，输入验证码并点击**提交**，如[图 8-3](ch08.xhtml#ch08fig03)所示。
- en: '![Image](../images/08fig03.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/08fig03.jpg)'
- en: '**FIGURE 8-3** Well done, human.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8-3** 做得好，人类。'
- en: You’re now verified as a human being; you can rest easy!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已被验证为人类；可以放心了！
- en: You will be asked a series of questions about coding, which may have changed
    since the time of writing, so I’ll guide you through the questions broadly. If
    you’re asked if you code, say yes. You should be given a list of languages to
    choose from. Choose Python.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你将会被问到一系列关于编码的问题，这些问题可能自本书写作以来有所变化，所以我会大致引导你通过这些问题。如果被问到是否会编程，回答“是”。接着你将看到一个语言列表，选择
    Python。
- en: Now you will be asked something like **What is your goal today?** Select the
    option closest to **Use Twilio in a project**. You should also be asked what you
    want to do first, in which case select the option that involves sending or receiving
    an SMS.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将被问到类似**你今天的目标是什么？** 选择最接近**在项目中使用 Twilio**的选项。你也会被问到你想要先做什么，选择涉及发送或接收短信的选项。
- en: Once that’s all done, you should be taken to your dashboard, which should look
    something like [Figure 8-4](ch08.xhtml#ch08fig04).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成所有这些步骤，你应该会看到你的仪表板，界面应该像[图 8-4](ch08.xhtml#ch08fig04)所示。
- en: '![Image](../images/08fig04.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/08fig04.jpg)'
- en: '**FIGURE 8-4** The Twilio dashboard'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8-4** Twilio 仪表板'
- en: SETTING UP A TWILIO PHONE NUMBER
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置 Twilio 电话号码
- en: The last step to set up your account is to acquire a Twilio phone number, which
    will be used to send the SMS messages from your Pi. Click the **Get a Trial Number**
    button. (If you can’t see the Get a Trial Number button in your dashboard, go
    to click the symbol with the three dots, as shown in the highlighted section of
    [Figure 8-4](ch08.xhtml#ch08fig04), in the menu to the left, and click **Programmable
    SMS**. From there, click **Get Started**, and then **Get a number**.)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 设置账户的最后一步是获取一个 Twilio 电话号码，用来从你的 Pi 发送短信。点击**获取试用号码**按钮。（如果你在仪表板中看不到“获取试用号码”按钮，点击左侧菜单中高亮部分所示的三点符号，然后点击**可编程
    SMS**。接着点击**开始使用**，然后选择**获取号码**。）
- en: Twilio will recommend a suitable phone number for you to use. Double-check that
    the number is registered to the country you reside in and that it’s SMS enabled,
    as shown in [Figure 8-5](ch08.xhtml#ch08fig05).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Twilio 会为你推荐一个合适的电话号码。请再次确认该号码注册在你所在的国家，并且已启用短信功能，如[图 8-5](ch08.xhtml#ch08fig05)所示。
- en: '![Image](../images/08fig05.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/08fig05.jpg)'
- en: '**FIGURE 8-5** Twilio will choose a number for you; make sure it is based in
    your country and can receive and send text messages.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8-5** Twilio 会为你选择一个号码；确保它是基于你所在的国家并且能够接收和发送短信。'
- en: If the number isn’t SMS enabled, you’ll have to acquire another one by clicking
    **Search for a different number**, and you might be charged a small fee. Once
    you’ve checked that the details are correct, write down the phone number for later
    and click **Choose This Number**.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果号码未启用短信功能，你需要通过点击**搜索其他号码**来获取另一个号码，可能会收取少量费用。确认信息无误后，记下该电话号码以备后用，然后点击**选择此号码**。
- en: You’ve now set up your Twilio account, and you have a new phone number to use
    in your Python program. You are now ready to create your project and write the
    program that will send SMS texts to a phone number.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经设置好 Twilio 账户，并获得了一个可以在 Python 程序中使用的新电话号码。你现在可以开始创建项目并编写发送短信到电话号码的程序。
- en: Creating a Project
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建一个项目
- en: Now it is time to set up your project and name it. At this point, Twilio will
    also show you your project’s authorization codes and credentials. Under “PROJECT
    NAME,” enter **SMS_Phone**, or any other name as long as it has SMS in it. The
    Dashboard will now display the title SMS_Phone Dashboard, as shown in [Figure
    8-6](ch08.xhtml#ch08fig06).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候设置你的项目并命名了。此时，Twilio还会显示你项目的授权代码和凭证。在“项目名称”下，输入**SMS_Phone**，或者任何其他包含SMS的名称。仪表板现在会显示标题为SMS_Phone
    Dashboard，如[图 8-6](ch08.xhtml#ch08fig06)所示。
- en: When you created your Twilio account you also created an ACCOUNT SID and authorization
    token, which you’ll need later to control communication to your verified mobile
    phone. You will see that the AUTH TOKEN is not displayed for security reasons.
    To access the token press the copy button next to it. You can now paste the token
    into your program code.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建Twilio账户时，你还创建了一个账户SID和授权令牌，这些将在稍后用于控制与你验证过的手机之间的通信。你会看到出于安全原因，授权令牌没有显示。要访问令牌，请按旁边的复制按钮。现在，你可以将令牌粘贴到你的程序代码中。
- en: '![Image](../images/08fig06.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/08fig06.jpg)'
- en: '**FIGURE 8-6** You’ll find your project credentials here.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8-6** 你将在这里找到项目凭证。'
- en: Installing Twilio
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装Twilio
- en: 'To install Twilio, open the terminal window and enter the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Twilio，打开终端窗口并输入以下内容：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The relevant Python packages will be downloaded and installed onto your Raspberry
    Pi. Then restart the Pi, and when it loads, open IDLE 3, which is located on the
    Programming menu.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的Python包将被下载并安装到你的树莓派上。然后重启树莓派，当它加载完成后，打开位于“编程”菜单中的IDLE 3。
- en: Writing the Code
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写代码
- en: Copy the code in [Listing 8-1](ch08.xhtml#ch08ex01) into the file, and save
    it as *SMS.py*.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 将[列表 8-1](ch08.xhtml#ch08ex01)中的代码复制到文件中，并将其保存为*SMS.py*。
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**LISTING 8-1** The simple text-sender code'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 8-1** 简单的短信发送代码'
- en: You begin by importing the `Client()` function from `twilio.rest` ❶. *Representational
    State Transfer (REST)* is a method of transferring information between a computer
    device (your Raspberry Pi) and a web-based service (Twilio’s cloud services).
    You import `Client()` so you can use REST from Twilio.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先通过从`twilio.rest`导入`Client()`函数 ❶。*表征状态转移（REST）*是一种在计算机设备（你的树莓派）和基于网页的服务（Twilio的云服务）之间传输信息的方法。你导入`Client()`是为了能够使用Twilio的REST服务。
- en: Next, you need to add your account security identifier (SID) ❷ and the authorization
    token ❸. You have already found both values on your dashboard on the Twilio website,
    so just copy and paste them into your code in place of the X placeholders. If
    you choose to type these codes, ensure that you use the correct letter case.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要添加你的账户安全标识符（SID） ❷和授权令牌 ❸。你已经在Twilio网站的仪表板上找到了这两个值，所以只需将它们复制并粘贴到代码中，替换掉X占位符。如果你选择手动输入这些代码，确保使用正确的字母大小写。
- en: 'You then create a variable called `message_text` ❹ and give it a phrase to
    prompt the user for input: `input("Please enter your message ")`. This code line
    prompts the user (in this example, the user is you) to type in the SMS message
    they want to send; your program can send any text you want it to rather than a
    standard preset message.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你创建一个名为`message_text` ❹的变量，并给它一个提示用户输入的短语：`input("请输入你的消息 ")`。这行代码提示用户（在这个例子中，用户是你）输入他们想要发送的SMS消息；你的程序可以发送任何你想要的文本，而不是标准的预设消息。
- en: To utilize the client to send the SMS message, you put your `account_sid` and
    your `auth_token` in a variable called `client` ❺. With that, you can create a
    line of code to combine your message, your Twilio credentials, and the relevant
    phone numbers and then transmit the SMS message.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用客户端发送SMS消息，你需要将`account_sid`和`auth_token`放入名为`client` ❺的变量中。通过这样做，你可以创建一行代码，将消息、Twilio凭证和相关电话号码结合起来，然后发送SMS消息。
- en: You create a variable called `message` and add the command `client.messages.create()`.
    When called, `message` collects the details from your `client` variable and creates
    an object to reference the Python Twilio class to create the SMS message ❻.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建一个名为`message`的变量，并添加命令`client.messages.create()`。当调用时，`message`会从你的`client`变量中收集详细信息，并创建一个对象来引用Python
    Twilio类，从而创建SMS消息 ❻。
- en: To the same `message` variable, you add the mobile number you registered and
    verified with Twilio after the `to =` code. You’ll need to replace the +999 currently
    in the code with the cell number that you’re sending the message to (but make
    sure to keep the plus sign).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一个`message`变量中，你需要在`to =`代码之后添加你在Twilio注册并验证的手机号码。你需要将代码中当前的+999替换为你发送消息的手机号码（但确保保留加号）。
- en: After `from_=`, you enter the Twilio-enabled phone number you set up in place
    of the +000 currently in the code. Next, you add the `message_text` variable,
    which contains the body of the text message. This completes the line of code to
    send the message.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `from_=` 后，你输入你设置的 Twilio 支持的手机号码，替代代码中当前的 +000。接下来，你添加 `message_text` 变量，该变量包含短信的正文内容。这就完成了发送消息的代码行。
- en: Then you add a simple confirmation line to print when the message has been sent
    ❼ and another line to act as a reminder to check the mobile phone that the message
    has been sent to, the recipient of the message ❽.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你添加一行简单的确认信息，用来打印消息是否已发送 ❼，再添加一行提醒用户检查消息已发送到哪个手机的行，消息的接收者 ❽。
- en: Let’s try it out! Save the program and run it, making sure the registered mobile
    phone is switched on. When the program runs, you’ll be prompted to enter a short
    message. Enter your message and press ENTER; you should see the message appear
    on your mobile phone, as shown in [Figure 8-7](ch08.xhtml#ch08fig07).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来试试吧！保存程序并运行，确保注册的手机已开机。当程序运行时，系统会提示你输入一条短消息。输入你的消息并按 ENTER；你应该会看到消息出现在你的手机上，如
    [图 8-7](ch08.xhtml#ch08fig07) 所示。
- en: '![Image](../images/08fig07.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/08fig07.jpg)'
- en: '**FIGURE 8-7** Receiving a Twilio message on your phone'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**FIGURE 8-7** 在手机上接收 Twilio 消息'
- en: CREATING THE AUTOMATIC SMS REMINDER MACHINE
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建自动短信提醒机
- en: Now that you have a basic SMS program set up, you can combine it with other
    Python features to create an automatic SMS reminder system, as shown in [Figure
    8-8](ch08.xhtml#ch08fig08). You’ll enter your reminder message and then enter
    the time the reminder needs to be sent.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经设置了一个基本的短信程序，你可以将其与其他 Python 功能结合，创建一个自动短信提醒系统，如 [图 8-8](ch08.xhtml#ch08fig08)
    所示。你将输入提醒消息，然后输入需要发送提醒的时间。
- en: '![Image](../images/08fig08.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/08fig08.jpg)'
- en: '**FIGURE 8-8** An automatic text reminder'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**FIGURE 8-8** 自动文本提醒'
- en: The program checks the current time on your Raspberry Pi. When it reaches the
    designated time, it sends the reminder message to your phone. Because the time
    needs to be accurate, I recommend that you connect your Pi to the internet. That
    way, the time will be updated each time the Pi is booted up, and your reminder
    program will respond at the correct time.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 程序检查树莓派上的当前时间。当时间达到指定时间时，它会将提醒消息发送到你的手机。因为时间需要准确，我建议你将树莓派连接到互联网。这样，每次树莓派启动时，时间都会更新，提醒程序也会在正确的时间做出响应。
- en: Setting Up and Validating the Format
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置和验证格式
- en: Open a new file in IDLE 3 or your Python code editor and add the first section
    of the code, as shown in [Listing 8-2](ch08.xhtml#ch08ex02). Save it as *reminder_machine.py*.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IDLE 3 或你的 Python 代码编辑器中打开一个新文件，并添加代码的第一部分，如 [LISTING 8-2](ch08.xhtml#ch08ex02)
    所示。将其保存为 *reminder_machine.py*。
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**LISTING 8-2** The first part of the reminder_machine.py code'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 8-2** 提醒机程序的第一部分代码'
- en: Again, you need to import the Twilio `Client` ❶. But you also import the `time`
    module to add short delays and the `datetime` module to access the Raspberry Pi’s
    current time. You also add the `sys` module, which lets you use command line functions
    with the program.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你需要导入 Twilio 的 `Client` ❶。但你还需要导入 `time` 模块来添加短暂的延迟，并导入 `datetime` 模块以访问树莓派的当前时间。你还需要导入
    `sys` 模块，以便在程序中使用命令行功能。
- en: As before, you need to add your Twilio account credentials to the variables
    `account_sid` and `auth_token` and then combine them into the variable named `client`
    ❷.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 和之前一样，你需要将 Twilio 账户的凭证添加到变量 `account_sid` 和 `auth_token` 中，然后将它们组合成一个名为 `client`
    ❷ 的变量。
- en: 'This next bit is new: you need to set up a simple validation to check that
    the input time is in the correct format. The user needs to input the format of
    *hours:minutes*, like this: 11:10\. If a user enters the time incorrectly as 1110
    or 111:0, the program will fail because it would never match the Pi’s time. To
    check for the correct format, you create a function called `isTimeFormat()` ❸,
    and then you use a `try` method to validate the input ❹. On the next line, you
    use the function `time.strptime()` ❺ to check that the input time is in the format
    `%H:%M`, which is *hours:minutes*, or 00:00.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下面这一部分是新的：你需要设置一个简单的验证，检查输入的时间格式是否正确。用户需要输入 *小时:分钟* 的格式，例如：11:10。如果用户输入时间格式不正确，比如
    1110 或 111:0，程序将会失败，因为这些格式无法匹配树莓派的时间。为了检查正确的格式，你创建一个名为 `isTimeFormat()` ❸ 的函数，然后使用
    `try` 方法验证输入 ❹。接下来，你使用函数 `time.strptime()` ❺ 来检查输入的时间是否符合 `%H:%M` 格式，即 *小时:分钟*，或者
    00:00。
- en: If the time entered is in the correct format, the validation check returns the
    value `True` ❻. If an error occurs ❼ or the value doesn’t match the correct formatting,
    the value `False` is returned ❽. You’ll use these values later to trigger the
    continuation of the program to the next stage or to prompt the user to reenter
    the time in the correct format.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输入的时间格式正确，验证检查返回`True`值❻。如果发生错误❼或输入的值不符合正确的格式，将返回`False`值❽。你稍后将使用这些值来触发程序继续进入下一阶段，或提示用户重新输入正确格式的时间。
- en: Coding the Reminder Message
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写提醒消息
- en: Now you’re ready to add the second code section, which introduces what the program
    does and asks the user to enter their reminder message and time. Add [Listing
    8-3](ch08.xhtml#ch08ex03) to the bottom of the *reminder_machine.py* file.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你准备添加第二段代码，这段代码介绍了程序的功能，并请求用户输入他们的提醒消息和时间。将[列表 8-3](ch08.xhtml#ch08ex03)添加到*reminder_machine.py*文件的底部。
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**LISTING 8-3** The second part of your reminder_machine.py program'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 8-3** 你的reminder_machine.py程序的第二部分'
- en: You start with a simple `print()` and a statement to notify the user that the
    reminder machine is running and ready ❶. Then you add a blank line to print between
    each statement to make them easier to read ❷ and pause for a second to allow the
    user to read the welcome message and instructions ❸.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先使用一个简单的`print()`语句，通知用户提醒机器正在运行并准备就绪❶。然后，在每条语句之间添加一个空行，使它们更容易阅读❷，并暂停一秒钟，让用户有时间阅读欢迎消息和说明❸。
- en: Next, you create a variable that prompts the user to enter their reminder message
    ❹ and then store the message.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你创建一个变量，提示用户输入提醒消息❹并存储该消息。
- en: Then you check that the `time` value is in the correct format, 00:00\. You set
    it to `False` by default ❺. You create a `while` statement that runs only while
    the `isTimeFormat()` validation check value is `False` ❻. Because you set it to
    `False` in the previous line, the `while` loop keeps looping.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你检查`time`值是否是正确的格式，00:00。默认将其设置为`False`❺。你创建一个`while`语句，它只在`isTimeFormat()`验证检查值为`False`时运行❻。因为你在上一行将其设置为`False`，所以`while`循环会不断地执行。
- en: Inside the `while` loop, you prompt the user to enter the time they want the
    reminder sent and store this in the variable `reminder_time` ❼.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在`while`循环内部，你提示用户输入希望发送提醒的时间，并将其存储在变量`reminder_time`中❼。
- en: To check that the time the user inputs matches the correct format, you call
    the `isTimeFormat()` function you created in [Listing 8-2](ch08.xhtml#ch08ex02)
    and input the value stored in the `reminder_time` variable ❽.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查用户输入的时间是否符合正确格式，你调用你在[列表 8-2](ch08.xhtml#ch08ex02)中创建的`isTimeFormat()`函数，并输入存储在`reminder_time`变量中的值❽。
- en: Depending on whether the time has been input in the correct format, the function
    will return either `True` or `False`. If the returned value is `False`, the time
    input is in an incorrect format and the `while` loop runs again, prompting the
    user to enter the time in the correct format.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 根据时间是否按正确格式输入，函数将返回`True`或`False`。如果返回值为`False`，则时间输入格式不正确，`while`循环将再次运行，提示用户按正确的格式输入时间。
- en: 'When the returned value is `True`, the time format input is correct, and the
    program continues to line ❾ and prints the validation value. This is for your
    testing purposes: you can comment out the line at ❾ after the program is operational
    by placing a `#` on the left side of the line so it looks like this: `# print
    (check)`.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当返回值为`True`时，时间格式输入正确，程序继续执行到第❾行，并打印验证值。这是为了你的测试目的：程序运行正常后，你可以通过在❾行左侧添加`#`来注释掉这一行，使其看起来像这样：`#
    print (check)`。
- en: Matching Times and Sending the Message
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 匹配时间并发送消息
- en: The final section of the program, shown in [Listing 8-4](ch08.xhtml#ch08ex04),
    compares the Raspberry Pi’s current time with the reminder time and, when they
    match, sends out the message.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的最后部分，如[列表 8-4](ch08.xhtml#ch08ex04)所示，比较树莓派的当前时间与提醒时间，并且在两者匹配时，发送消息。
- en: '[PRE4]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**LISTING 8-4** The final part of reminder_machine.py: sending the message!'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 8-4** reminder_machine.py的最后部分：发送消息！'
- en: First, you create a `while True` loop to keep this section of the program running
    continuously, checking the current time and comparing it to the reminder time
    ❶.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你创建一个`while True`循环，以便让程序的这一部分持续运行，检查当前时间并与提醒时间进行比较❶。
- en: Next, you store the current date-time reading from the Raspberry Pi operating
    system in a variable called `current_time` ❷. You’ll print this value for testing
    purposes, but once the program is functioning, comment it out. The value will
    be in the format *hours:minutes:seconds:milliseconds*, which contains more data
    than you require. So before you use the date-time value, you convert it into a
    string ❸ and then slice it down to just the first five characters ❹ to match the
    00:00 format.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将从树莓派操作系统存储当前的日期和时间到一个名为`current_time`的变量中❷。你将打印出这个值用于测试，但一旦程序正常运行，记得将其注释掉。该值的格式为*小时:分钟:秒:毫秒*，它包含了比你需要的更多数据。所以，在使用日期时间值之前，你将其转换为字符串❸，然后将其切割为仅包含前五个字符❹，以匹配00:00的格式。
- en: 'Now you can compare `reminder_time` with the current time: the next line checks
    whether, say, 11:10 equals 11:10 ❺, and if the two values match, the program prints
    a line indicating it’s reminder time ❻!'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以将`reminder_time`与当前时间进行比较：下一行检查例如11:10是否等于11:10❺，如果两个值匹配，程序会打印出一行，指示现在是提醒时间❻！
- en: To send the message, you create a variable called `message` and add the `to`
    and `from` phone numbers. Then you add the reminder message you entered and stored
    in the `reminder` variable as the body of the message ❼. The `client.messages.create()`
    function creates and sends the message to your mobile phone.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了发送消息，你需要创建一个名为`message`的变量，并添加`to`和`from`的电话号码。然后，你将你输入的提醒信息存储在`reminder`变量中，作为消息的正文❼。`client.messages.create()`函数会创建并将消息发送到你的手机。
- en: The lines of code ❷ to ❿ are placed within a `while` loop, meaning that the
    program is continuously checking the conditions and sending messages when those
    conditions are met. If you left the program code like this, it would send you
    as many messages as possible in the minute that matches the time you have set.
    To avoid this continuous messaging, you add a delay of 60 seconds before the next
    line of code runs ❽. As a result, the time will move on to, say, 11:11 and no
    longer match when the loop runs again.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 从代码行❷到❿被放置在一个`while`循环中，这意味着程序会持续检查条件，并在条件满足时发送消息。如果你将程序代码保持这样，它会在与你设定时间匹配的那一分钟发送尽可能多的消息。为了避免这种连续发送消息的情况，你需要在下一行代码运行❽之前添加一个60秒的延迟。这样，时间就会前进到例如11:11，并且不再与循环再次运行时的时间匹配。
- en: You add code to exit the program by calling the system exit command from the
    terminal ❾. In the final line of the program, you add a delay of 1 second, and
    then the whole loop will start again ❿.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过从终端调用系统退出命令❾来添加退出程序的代码。在程序的最后一行，你添加了1秒的延迟，然后整个循环将重新开始❿。
- en: That completes the program. You can now save and execute it. Keep an eye on
    the levels of indentation. If you have any trouble getting the program to run,
    first check that the lines are indented at the correct level.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这样程序就完成了。现在你可以保存并执行它。请注意缩进级别。如果你遇到运行问题，首先检查各行是否按照正确的级别缩进。
- en: Enter your reminder message and reminder time. Then leave your Raspberry Pi
    running, and you’ll be sent your text at the allocated time!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 输入你的提醒信息和提醒时间。然后让你的树莓派继续运行，系统将在指定的时间将你的文本发送给你！
- en: WRAPPING UP
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完结
- en: 'You can use your automatic texting machine for all kinds of things, especially
    now that you have a Twilio account set up. Check out the Twilio documentation
    to find out what you can do (*[www.twilio.com/docs/quickstart](http://www.twilio.com/docs/quickstart)*).
    As one tip, why not try your hand at detective work: use Twilio to trace messages
    and phone calls to and from the phone connected to Twilio. You’ll find the code
    for this hack at *[www.tecoed.co.uk/spooking-a-mobile.html](http://www.tecoed.co.uk/spooking-a-mobile.html)*.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用你的自动短信机器做各种事情，尤其是现在你已经设置了Twilio账户。查看Twilio文档，了解你可以做些什么（*[www.twilio.com/docs/quickstart](http://www.twilio.com/docs/quickstart)*）。作为一个小提示，为什么不试试侦探工作：使用Twilio追踪发送到和从连接到Twilio的手机的消息和电话。你可以在
    *[www.tecoed.co.uk/spooking-a-mobile.html](http://www.tecoed.co.uk/spooking-a-mobile.html)*
    找到这个黑客技术的代码。
