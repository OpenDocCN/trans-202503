- en: —21—
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: —21—
- en: The Binary Search Tree Property
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 二叉搜索树的特性
- en: Wait,” Frank said. “That’s wrong.”
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: “等一下，”弗兰克说道，“这不对。”
- en: Socks, who had just finished inserting a node, looked up in surprise. “What?”
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 袜子刚插入完一个节点，惊讶地抬起头。“什么？”
- en: “The node you just inserted,” said Frank. “It’s in the wrong place.”
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: “你刚刚插入的节点，”弗兰克说道，“它的位置错了。”
- en: Socks peered at the tree. “But 63 is larger than 60, so it goes in the right-hand
    subtree.”
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 袜子盯着树看。“但是63大于60，所以它应该放在右子树里。”
- en: '![image](../images/f0172-01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0172-01.jpg)'
- en: “But it’s greater than its great-grandparent 61, so it should have gone to that
    node’s right subtree. You have it down the left subtree. One of the key properties
    of a binary search tree is that *all* nodes in the left subtree are less than
    the current node, and *all* nodes in the right subtree are larger.”
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: “但它大于它的曾祖父61，所以应该进入那个节点的右子树。你把它放到了左子树。二叉搜索树的一个关键特性是，*所有*左子树中的节点都比当前节点小，*所有*右子树中的节点都比当前节点大。”
- en: “I know that,” said Socks quietly.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: “我知道，”袜子低声说道。
- en: “Then why is it in the left subtree?” Frank asked.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: “那么，为什么它在左子树中？”弗兰克问道。
- en: “I made a mistake,” said Socks.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: “我犯了个错误，”袜子说道。
- en: “How did you miss that 63 is larger than 61?” Frank asked.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: “你怎么没看出来63大于61？”弗兰克问道。
- en: “I . . . I started at 60,” Socks admitted.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: “我...我从60开始的，”袜子承认道。
- en: “What?”
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: “什么？”
- en: “Well, I had recently inserted node 60 . . . and 63 is close to 60 . . . so
    I just started at 60 and inserted it below that.”
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，我最近插入了节点60...而63离60很近...所以我从60开始，把它放到下面。”
- en: “You didn’t start at the root?” Frank snapped.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: “你没有从根节点开始？”弗兰克厉声道。
- en: “I figured this would be faster,” said Socks. “I got to skip down most of the
    tree.”
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: “我以为这样会更快，”袜子说道，“我得跳过树的大部分。”
- en: “You ended up putting it in the wrong place. How many other shortcuts have you
    taken?”
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: “你最终把它放到了错误的位置。你还采取了多少其他捷径？”
- en: “A few,” admitted Socks.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: “有几个，”袜子承认道。
- en: Frank groaned, then, for good measure, muttered a long string of curses. Socks
    stared at the ground and wisely said nothing.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 弗兰克呻吟了一声，然后，为了更有分量，他低声咒骂了一长串脏话。袜子低头看着地面，明智地什么也没说。
- en: After he had finally calmed down, Frank took a few deep breaths and surveyed
    the tree.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当他终于冷静下来后，弗兰克深吸了几口气，仔细审视着树。
- en: “We’ll have to do an exhaustive search,” he said through gritted teeth. “If
    the tree doesn’t maintain the binary search tree property, we can’t safely do
    any pruning. We’ll have to check each node.”
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: “我们必须做一次穷举搜索，”他说着咬紧牙关，“如果树没有保持二叉搜索树的特性，我们就不能安全地做任何修剪。我们必须检查每一个节点。”
- en: “Hey,” said Socks suddenly. “We had to check each node to put it in the tree.
    Why didn’t we just do an exhaustive search then?”
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: “嘿，”袜子突然说道，“我们在将每个节点放入树中时都要检查，为什么我们不直接做一次穷举搜索呢？”
- en: “Amortized cost,” Frank said. “I was hoping to use the tree for a bunch of searches
    in the future. I doubt 50 days to 70 days will be the only range we search. As
    we get more evidence, we might do different range searches. Maybe we would even
    need to do a few exact searches. The cost of building the tree would be averaged
    out over many searches, and the overall effort would be lower—possibly much lower.
    Amortized cost considers the total cost for a bunch of searches and thus spreads
    the cost of building the tree over many searches.”
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: “摊销成本，”弗兰克说道。“我希望用这棵树来进行未来的多次搜索。我怀疑50天到70天的范围不会是我们唯一要搜索的范围。随着我们得到更多的证据，可能会进行不同的范围搜索。也许我们甚至需要做一些精确的搜索。树的构建成本会在许多搜索中摊销，整体的工作量会更低——可能会低得多。摊销成本考虑的是多次搜索的总成本，因此将构建树的成本分摊到许多搜索中。”
- en: “Oh,” said Socks. “Like my magic button trees.”
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: “哦，”袜子说道，“就像我的魔法按钮树一样。”
- en: Frank fought the urge to shake the young wizard and yell, “Of course like the
    button tree! They’re both binary search trees. They both benefit from a one-time
    construction cost by making many subsequent searches faster.” Instead, he settled
    for a snarky “Of course.”
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 弗兰克强忍住摇晃年轻巫师并大声喊道“当然就像按钮树一样！它们都是二叉搜索树。通过一次性的构建成本，它们都能让后续的许多查找变得更快。”相反，他只得出了一个讽刺的回答：“当然。”
- en: “Great idea,” said Socks. “We can save lots of time in the future.”
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: “好主意，”袜子说道，“我们以后可以节省很多时间。”
- en: “Could have saved,” Frank corrected him.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: “本来可以节省的，”弗兰克纠正道。
- en: “Oh,” said Socks. “Right. I broke the tree, didn’t I?”
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: “哦，”袜子说，“对了，我弄坏了树，是吧？”
- en: '**POLICE ALGORITHMS 101: BINARY SEARCH TREES**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**警察算法 101：二叉搜索树**'
- en: '***Excerpt from Professor Drecker’s Lecture***'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '***德雷克教授讲座摘录***'
- en: As we have seen in this lecture, we can use information about the structure
    of a binary search tree to search efficiently. Not only that, but we can add and
    remove nodes from trees. However, whenever we change a data structure, it is vitally
    important to ensure that we’re not violating the properties that we use.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本讲中所见，我们可以利用二叉搜索树的结构信息进行高效搜索。不仅如此，我们还可以在树中添加和删除节点。然而，每当我们改变数据结构时，确保不违反我们使用的性质是至关重要的。
- en: For binary search trees, it is important to maintain the *binary search tree
    property*. This property states that (1) the values of the data in the left node
    (and all its children) are less than or equal to the value of the current node
    and (2) the values of the data in the right node (and all its children) are greater
    than or equal to the value of the current node. If we violate this property, we
    no longer have a binary search tree, and we can’t prune branches of the tree during
    a search.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于二叉搜索树，维护*二叉搜索树性质*非常重要。该性质规定：（1）左节点（及其所有子节点）中的数据值小于或等于当前节点的值，（2）右节点（及其所有子节点）中的数据值大于或等于当前节点的值。如果违反此性质，我们就不再拥有一个二叉搜索树，而且在搜索过程中也无法修剪树的分支。
