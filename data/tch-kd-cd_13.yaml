- en: Appendix C. Building Your Own Modules
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 C. 构建你自己的模块
- en: Throughout this book, you’ve imported modules like `turtle`, `random`, and `pygame`
    into your programs to add functions for drawing, generating a random number, and
    animating graphics without having to code them from scratch. But did you know
    that you can also write your own modules and import them into your programs? Python
    makes it easy to build modules so you can save useful code and use it in many
    programs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，你已经将像` turtle`、`random`和`pygame`这样的模块导入到你的程序中，以便添加绘图、生成随机数和动画图形的功能，而不需要从头编写它们。但你知道吗，你也可以编写自己的模块并将其导入到程序中？Python使得构建模块变得简单，你可以保存有用的代码，并在多个程序中使用它。
- en: To create a reusable module, we write the module in IDLE’s file editor window
    just like other program files we’ve built, and we save it as a new *.py* file
    with the name of the module as the filename (for example, *colorspiral.py* might
    be the filename for a module that draws color spirals). We define functions and
    variables in our module. Then, to reuse them in another program, we import the
    module into the program by typing `import` and the name of the module (for example,
    `import colorspiral` would let a program use the code in *colorspiral.py* to draw
    color spirals).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建可重用的模块，我们像编写其他程序文件一样，在IDLE的文件编辑窗口中编写模块，并将其保存为一个新的*.py*文件，文件名就是模块的名称（例如，*colorspiral.py*可能是一个用于绘制彩色螺旋的模块的文件名）。我们在模块中定义函数和变量。然后，为了在另一个程序中重用它们，我们通过键入`import`和模块名称将模块导入到程序中（例如，`import
    colorspiral`将使程序能够使用*colorspiral.py*中的代码来绘制彩色螺旋）。
- en: To practice writing our own module, let’s create an actual `colorspiral` module
    and see how it saves us from having to rewrite code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了练习编写我们自己的模块，让我们创建一个实际的`colorspiral`模块，看看它如何帮助我们避免重复编写代码。
- en: Building the colorspiral Module
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 colorspiral 模块
- en: Let’s create a `colorspiral` module to help us draw spirals quickly and easily
    in our programs just by calling `import colorspiral`. Type the following code
    into a new IDLE window and save it as *colorspiral.py*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个`colorspiral`模块，帮助我们在程序中快速轻松地绘制螺旋，只需调用`import colorspiral`。将以下代码输入到新的IDLE窗口，并将其保存为*colorspiral.py*。
- en: colorspiral.py
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: colorspiral.py
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This module imports the `turtle` module and defines a function called `cspiral()`
    for drawing colorful spirals of different shapes, sizes, and locations. Let’s
    look at differences between this module and the other programs we’ve written.
    First, at ➊, we have a special comment called a *docstring*. A docstring is a
    way of adding documentation to files that we intend to reuse or share with others;
    in Python, modules should have docstrings to help future users understand what
    the module does. The docstring will always be the first statement in a module
    or function, and each docstring starts and ends with *triple double quotes* (`"""`,
    three double quotes in a row with no spaces in between). After the docstring,
    we import the `turtle` module—yes, we can import modules into our modules!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块导入了` turtle`模块，并定义了一个名为`cspiral()`的函数，用于绘制不同形状、大小和位置的彩色螺旋。让我们看看这个模块和我们编写的其他程序之间的区别。首先，在➊处，我们有一个特殊的注释，称为*文档字符串*。文档字符串是一种向我们打算重用或与他人共享的文件添加文档的方式；在Python中，模块应该包含文档字符串，以帮助未来的用户理解该模块的功能。文档字符串总是模块或函数中的第一个语句，每个文档字符串都以*三重双引号*（`"""`，三个双引号连在一起且中间没有空格）开头和结束。文档字符串之后，我们导入`
    turtle`模块——是的，我们可以将模块导入到我们的模块中！
- en: 'At ➋, we define a function called `cspiral()` that accepts up to four arguments—`sides`,
    `size`, `x`, and `y`—for the number of sides in the spiral, the size of the spiral,
    and the (*x*, *y*) location of the spiral starting from the center of the turtle
    screen. A docstring for the `cspiral()` function begins at ➌; this multiline docstring
    provides more specific information about the function. The first line of the docstring
    begins with triple double quotes and describes the function overall. Next we leave
    a blank line, followed by a list of the arguments accepted by the function. With
    this documentation, a future user can easily read which arguments are accepted
    by the function and what each one means. The rest of the function is the code
    to draw a colorful spiral, similar to code from [Chapter 2](ch02.html "Chapter 2. Turtle
    Graphics: Drawing with Python"), [Chapter 4](ch04.html "Chapter 4. Loops Are Fun
    (You Can Say That Again)"), and [Chapter 7](ch07.html "Chapter 7. Functions: There’s
    a Name for That").'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在➋位置，我们定义了一个名为`cspiral()`的函数，该函数最多接受四个参数——`sides`、`size`、`x`和`y`——用于指定螺旋的边数、螺旋的大小，以及螺旋从海龟屏幕中心开始的（*x*，*y*）位置。`cspiral()`函数的文档字符串从➌开始；这个多行文档字符串提供了关于函数的更具体信息。文档字符串的第一行以三重双引号开始，描述了函数的总体功能。接下来，我们留空一行，随后列出了该函数接受的参数。通过这些文档，未来的用户可以轻松阅读函数接受哪些参数以及每个参数的含义。函数的其余部分是绘制彩色螺旋的代码，类似于[第2章](ch02.html
    "第2章. 海龟图形：使用Python绘制")、[第4章](ch04.html "第4章. 循环很有趣（你可以再说一次）")和[第7章](ch07.html
    "第7章. 函数：有名字了")中的代码。
- en: Using The Colorspiral Module
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Colorspiral模块
- en: Once we’ve completed *colorspiral.py* and saved it, we can use it as a module
    by importing it into another program. Create a new file in IDLE and save it as
    *MultiSpiral.py* in the same folder as *colorspiral.py*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成并保存了*colorspiral.py*，我们就可以将它作为模块导入到另一个程序中。创建一个新的文件，在IDLE中保存为*MultiSpiral.py*，并将其与*colorspiral.py*保存在同一文件夹中。
- en: MultiSpiral.py
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MultiSpiral.py
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This three-line program imports the `colorspiral` module we created and uses
    the module’s `cspiral()` function to draw two spirals on the screen, as shown
    in [Figure C-1](apc.html#two_colorful_spirals_created_with_a_thre "Figure C-1. Two
    colorful spirals created with a three-line program, thanks to the colorspiral.py
    module").
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个三行程序导入了我们创建的`colorspiral`模块，并使用该模块的`cspiral()`函数在屏幕上绘制了两个螺旋，如[图C-1](apc.html#two_colorful_spirals_created_with_a_thre
    "图C-1. 通过三行程序创建的两个彩色螺旋，感谢colorspiral.py模块")所示。
- en: '![Two colorful spirals created with a three-line program, thanks to the colorspiral.py
    module](httpatomoreillycomsourcenostarchimages2189137.png.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![通过三行程序创建的两个彩色螺旋，感谢colorspiral.py模块](httpatomoreillycomsourcenostarchimages2189137.png.jpg)'
- en: Figure C-1. Two colorful spirals created with a three-line program, thanks to
    the *colorspiral.py* module
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图C-1. 通过三行程序创建的两个彩色螺旋，感谢*colorspiral.py*模块
- en: With the `colorspiral` module, anytime a programmer wants to create colorful
    spirals, all they have to do is import the module and call `colorspiral.cspiral()`!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`colorspiral`模块，程序员想要创建彩色螺旋时，只需导入该模块并调用`colorspiral.cspiral()`即可！
- en: Reusing the Colorspiral Module
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新使用Colorspiral模块
- en: Let’s reuse the `colorspiral` module to draw 30 random, colorful spirals. To
    do that, we’ll import another module we’ve used before, `random`. Type the following
    eight lines of code into a new file in IDLE and save the file as *SuperSpiral.py*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重用`colorspiral`模块来绘制30个随机的彩色螺旋。为此，我们将导入我们之前使用过的另一个模块`random`。在IDLE中输入以下八行代码并将文件保存为*SuperSpiral.py*。
- en: SuperSpiral.py
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SuperSpiral.py
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This program begins with two `import` statements: one for the `colorspiral`
    module we created and the other for the `random` module we’ve used throughout
    the book. The `for` loop will run 30 times. The loop generates four random values
    for the number of sides (between 3 and 6), the size of the spiral (between 25
    and 75), and the x- and y-coordinates to draw the spiral on the screen, between
    (–300, –300) and (300, 300). (Remember that the turtle’s origin, (0, 0), is at
    the center of the drawing screen.) Finally, each pass through the loop calls the
    `colorspiral.cspiral()` function from our module, drawing a colorful spiral with
    the randomly generated attributes from the loop.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序以两个`import`语句开始：一个用于我们创建的`colorspiral`模块，另一个用于我们在整个书中使用的`random`模块。`for`循环将执行30次。该循环生成四个随机值，分别用于确定边数（3到6之间）、螺旋的大小（25到75之间），以及用于在屏幕上绘制螺旋的x和y坐标，坐标范围在（–300，–300）到（300，300）之间。（请记住，海龟的原点（0，0）位于绘图屏幕的中心。）最后，每次循环都会调用我们模块中的`colorspiral.cspiral()`函数，绘制一个带有随机生成属性的彩色螺旋。
- en: Although this program is only eight lines long, it produces stunning graphics
    like [Figure C-2](apc.html#colorspiral_module_allows_superspiraldot "Figure C-2. The
    colorspiral module allows SuperSpiral.py to produce a lovely multispiral collage
    with only eight lines of code.").
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个程序只有八行代码，但它可以生成令人惊艳的图形，参考 [图C-2](apc.html#colorspiral_module_allows_superspiraldot
    "图C-2. colorspiral模块使得SuperSpiral.py能够用仅八行代码生成一个美丽的多螺旋拼贴。")。
- en: '![The colorspiral module allows SuperSpiral.py to produce a lovely multispiral
    collage with only eight lines of code.](httpatomoreillycomsourcenostarchimages2189139.png.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![colorspiral模块使得SuperSpiral.py仅用八行代码就能生成一个美丽的多螺旋拼贴。](httpatomoreillycomsourcenostarchimages2189139.png.jpg)'
- en: Figure C-2. The `colorspiral` module allows *SuperSpiral.py* to produce a lovely
    multispiral collage with only eight lines of code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图C-2. `colorspiral`模块使得 *SuperSpiral.py* 仅用八行代码就能生成一个美丽的多螺旋拼贴。
- en: The ability to create reusable modules means that you can spend more time solving
    new problems and less time recoding previous solutions. Whenever you build a useful
    function or set of functions that you want to use over and over, you can create
    a module to use for yourself or share with fellow coders.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 创建可重用模块的能力意味着你可以花更多的时间解决新问题，而不是重复编写已有的解决方案。每当你构建一个有用的函数或一组函数，想要反复使用时，你可以创建一个模块来自己使用或与其他程序员分享。
- en: Additional Resources
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他资源
- en: The official documentation for Python at *[http://docs.python.org/3/](http://docs.python.org/3/)*
    includes more information on modules and the Python language. The Python Tutorial
    has a section on modules at *[http://docs.python.org/3/tutorial/modules.html](http://docs.python.org/3/tutorial/modules.html)*.
    As you learn new Python programming skills, make use of these resources to add
    to your coding tool set.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Python的官方文档中包含了关于模块和Python语言的更多信息，访问地址是 *[http://docs.python.org/3/](http://docs.python.org/3/)*。Python教程中有一个关于模块的章节，地址是
    *[http://docs.python.org/3/tutorial/modules.html](http://docs.python.org/3/tutorial/modules.html)*。在你学习新的Python编程技能时，可以利用这些资源来丰富你的编程工具集。
