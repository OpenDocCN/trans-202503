- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Buffered File I/O
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲区文件 I/O
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: 'In the first part of this book, we struggled to get even the simplest output
    to the console. But for this part of the book, we have an operating system, and
    that makes dealing with output and input a lot easier. That’s because the operating
    system hides a great deal of the complexity from you: you just write `"Hello World\n"`,
    and the operating system sends the data to the appropriate place.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的第一部分，我们连最简单的控制台输出都很困难。但在这一部分，我们有了操作系统，这让处理输入输出变得更加简单。因为操作系统隐藏了大量的复杂性：你只需写
    `"Hello World\n"`，操作系统就会将数据发送到合适的地方。
- en: In this chapter you’ll learn about C’s I/O system, which includes not only the
    `printf` function but also functions to read and write disk files in a manner
    that is both efficient and very flexible.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你将了解 C 语言的输入/输出系统，这不仅包括 `printf` 函数，还包括以高效且灵活的方式读写磁盘文件的函数。
- en: The printf Function
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: printf 函数
- en: 'We’ve already used the `printf` function a couple of times for simple output.
    The basic format of the function is:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用了几次 `printf` 函数进行简单的输出。该函数的基本格式是：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The format string tells `printf` what to print. Any character other than percent
    (`%`) is printed. The `%` character starts a field specification, which tells
    `printf` to go to the argument list and print the next argument according to the
    field specification that follows. For example:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 格式字符串告诉 `printf` 打印什么内容。除百分号（`%`）外的任何字符都会被打印。`%` 字符开始一个字段说明，告诉 `printf` 去参数列表中取下一个参数，并按照随后的字段说明进行打印。例如：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `%d` field specification can be modified with a number:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`%d` 字段说明可以通过数字进行修改：'
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In these examples, `%3d` tells `printf` to use at least three characters to
    print the number. The `%-3d` field tells `printf` to print the number with at
    least three characters and to left-justify it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些例子中，`%3d` 告诉 `printf` 至少使用三个字符来打印数字。`%-3d` 字段告诉 `printf` 至少用三个字符打印数字，并左对齐。
- en: So far we’ve discussed only the `d` conversion character, which is used to covert
    an integer argument to text for printing. [Table 14-1](#table14-1) lists the major
    conversion characters.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只讨论了 `d` 转换字符，它用于将整数参数转换为文本以进行打印。[表 14-1](#table14-1) 列出了主要的转换字符。
- en: 'Table 14-1: Major C Conversion Characters'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 表 14-1：主要的 C 语言转换字符
- en: '| **Conversion character** | **Argument type** | **Notes** |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| **转换字符** | **参数类型** | **备注** |'
- en: '| --- | --- | --- |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `%d` | Integer | The `char` and `short int` types are promoted to `int` when
    passed as parameters, so this format also works for those three types. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `%d` | 整数 | `char` 和 `short int` 类型在作为参数传递时会被提升为 `int`，因此该格式同样适用于这三种类型。 |'
- en: '| `%c` | Character | Because of promotion, this conversion character actually
    takes an integer argument and prints it as a character. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `%c` | 字符 | 由于提升，这个转换字符实际上接受一个整数参数，并将其打印为字符。 |'
- en: '| `%o` | Integer | Prints in octal. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `%o` | 整数 | 以八进制打印。 |'
- en: '| `%x` | Integer | Prints in hexadecimal. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `%x` | 整数 | 以十六进制打印。 |'
- en: '| `%f` | Double | Works for both `float` and `double` types because all `float`
    parameters are promoted to `double` when passed as an argument. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `%f` | 双精度浮点数 | 适用于 `float` 和 `double` 类型，因为所有 `float` 类型的参数在传递时会提升为 `double`。
    |'
- en: '| `%l` | Long integer | The `long int` type requires its own conversion because
    the `int` type is not automatically promoted to `long int`. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `%l` | 长整型 | `long int` 类型需要自己的转换，因为 `int` 类型不会自动提升为 `long int`。 |'
- en: Writing the ASCII Table
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写 ASCII 表
- en: Let’s write a short program to create a table containing the printable characters
    with their hex and octal values, which will provide a practical demonstration
    of the formatting strings. This program ([Listing 14-1](#listing14-1)) gives us
    a chance to express the same data four different ways and to try out different
    formats inside a `printf` statement.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们写一个简短的程序来创建一个表格，包含可打印字符及其十六进制和八进制值，这将展示格式化字符串的实际应用。这个程序（[列表 14-1](#listing14-1)）让我们有机会以四种不同的方式表达相同的数据，并在
    `printf` 语句中尝试不同的格式。
- en: '**ascii.c**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**ascii.c**'
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 14-1: A program to create an ASCII table'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 14-1：一个创建 ASCII 表的程序
- en: First, the `%c` format string prints out the character as a character. Next,
    we print out the character as a three-digit decimal number (`%3d`). To be precise,
    the type of the argument is a character, and it’s promoted to an integer. The
    number will be three characters long because of the `3` in the argument specification.
    After that, we print in hexadecimal using the `%02x` format. The zero (`0`) tells
    `printf` to pad the result with zeros if needed to match the desired width (the
    width is, of course, `2`). Finally, we print in octal with the `%03o` string.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`%c`格式字符串以字符形式打印字符。接下来，我们以三位十进制数（`%3d`）打印字符。准确地说，参数的类型是字符，它被提升为整数。由于参数规范中的`3`，这个数字将是三位的。之后，我们使用`%02x`格式以十六进制打印。零（`0`）告诉`printf`如果需要填充零以匹配所需的宽度（当然，宽度是`2`）。最后，我们使用`%03o`格式以八进制打印。
- en: '[Listing 14-2](#listing14-2) shows the output of this program.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 14-2](#listing14-2) 显示了这个程序的输出。'
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 14-2: The output of [Listing 14-1](#listing14-1) (*ascii.c*)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 14-1](#listing14-1)的输出（*ascii.c*）'
- en: The `printf` function is the workhorse of the C I/O system. It helps us get
    lots of different types of data printed to the console. But that’s not the only
    place we can write, as we’ll see in the next few sections.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`printf`函数是C语言I/O系统的核心工具。它帮助我们将各种不同类型的数据打印到控制台。但这不是我们唯一可以写入的地方，正如我们接下来几节所见。'
- en: Writing to Predefined Files
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 写入预定义文件
- en: 'When a program starts, the operating system opens three predefined files:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序启动时，操作系统会打开三个预定义文件：
- en: '`stdin` Standard in, the normal input of the program'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`stdin` 标准输入，程序的正常输入'
- en: '`stdout` Standard out, for normal program output'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`stdout` 标准输出，用于程序的正常输出'
- en: '`stderr` Standard error, for error output'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`stderr` 标准错误，用于错误输出'
- en: By default these files are connected to the console, but your command line interpreter
    can connect them to disk files, pipes, or other things.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这些文件连接到控制台，但你的命令行解释器可以将它们连接到磁盘文件、管道或其他地方。
- en: 'The `fprintf` function sends data to a given file. For example:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`fprintf`函数将数据发送到指定的文件。例如：'
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `printf` function is merely a convenience function that replaces `fprintf(stdout,
    ...)`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`printf`函数只是一个便利函数，它替代了`fprintf(stdout, ...)`。'
- en: Reading Data
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取数据
- en: 'The functions that read data are designed to be simple, but unfortunately,
    they aren’t. The `printf` function has a counterpart called `scanf` that reads
    data. For example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 读取数据的函数设计得很简单，但不幸的是，它们并非如此。`printf`函数有一个对应的函数叫做`scanf`，用于读取数据。例如：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: First, note the ampersands (`&`) in front of the arguments, which are used because
    `scanf` needs to modify the arguments; therefore, the arguments must be passed
    by address.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，注意在参数前面的符号（`&`），这是因为`scanf`需要修改参数；因此，参数必须通过地址传递。
- en: 'The format string passed to `scanf` looks a lot like the one for `printf`,
    but there is one big problem with `scanf`: unless you are an extreme expert, you
    never know how it’s going to deal with whitespace. So, we don’t use it.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给`scanf`的格式字符串看起来与`printf`的格式字符串非常相似，但`scanf`有一个大问题：除非你是一个极其专业的专家，否则你永远不知道它如何处理空白字符。所以，我们不使用它。
- en: 'Instead, we use the `fgets` function to get a single line from the input, and
    then we use `sscanf` to parse the resulting string:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们使用`fgets`函数从输入中获取一行，然后使用`sscanf`解析得到的字符串：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The general form of `fgets` is:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`fgets`的一般形式是：'
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: where `result` is a pointer to the string that was just read (`buffer`), or
    `NULL` if we’ve reached the end of the file (EOF). The `buffer` is a character
    array where the line is to be placed, and `file` is a file handle indicating which
    file to read (`stdin` is the only file we know about at this point).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，`result`是指向刚读取的字符串（`buffer`）的指针，或者当我们到达文件末尾（EOF）时是`NULL`。`buffer`是一个字符数组，用来存储读取的行，`file`是一个文件句柄，指示要读取的文件（此时我们只知道`stdin`）。
- en: The `buffer` will always be null-terminated (`\0`), so at most `size``-1` characters
    will be put in `buffer`. (An entire line will be read, even if `buffer` is not
    large enough to contain it.)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`buffer`将始终以null字符（`\0`）结尾，因此最多会将`size`-1个字符放入`buffer`中。（即使`buffer`不够大，也会读取整行。）'
- en: The `sscanf` function is much like the `scanf` function, only the first argument
    is now a string. The rest of the arguments are the same. The `sscanf` function
    returns the number of items it converted.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`sscanf`函数与`scanf`函数非常相似，不同之处在于第一个参数现在是字符串。其余的参数相同。`sscanf`函数返回它转换的项数。'
- en: 'The preceding code assumes that everything works. Let’s rewrite it, and this
    time check for errors:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码假设一切正常。让我们重写它，这次检查错误：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If the first call to `fgets` returns `NULL`, something went wrong. We then print
    an error message to the predefined file for errors (`stderr`) and return an error
    code to the caller. Next, we perform an `sscanf`, which should find two integers.
    If it doesn’t, we again print an error message and return an error code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果第一次调用`fgets`返回`NULL`，说明出了问题。然后我们会将错误信息打印到预定义的错误文件（`stderr`）并返回错误代码给调用者。接着，我们执行`sscanf`，它应该能找到两个整数。如果没有，我们再次打印错误信息并返回错误代码。
- en: The Evil gets Function
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 恶魔的`gets`函数
- en: 'The `fgets` function has a corresponding shorthand function to read data from
    `stdin`. It’s called `gets` and has this general form:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`fgets`函数有一个对应的简写函数来从`stdin`读取数据。它叫做`gets`，一般形式是：'
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `gets` function reads in a line of data and puts it in the `buffer`, *whether
    or not the* `buffer` *can hold it.*
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`gets`函数读取一行数据并将其放入`buffer`中，*无论* `buffer` *是否能容纳它。*'
- en: The current GCC compiler makes `gets` hard to use. First, *stdio.h* won’t define
    it unless you properly define a conditional compilation macro. When you compile
    the program, the compiler will warn you, and then when the program is linked,
    the linker will warn you.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的GCC编译器使得`gets`变得难以使用。首先，*stdio.h*不会定义它，除非你正确地定义一个条件编译宏。当你编译程序时，编译器会给出警告，接着当程序链接时，链接器也会给出警告。
- en: '[Listing 14-3](#listing14-3) shows what happens when you compile a program
    using `gets`.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 14-3](#listing14-3)展示了使用`gets`编译程序时发生的情况。'
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Listing 14-3: Attempting to use `gets`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 14-3: 尝试使用`gets`'
- en: From the volume of output, you can see how much trouble the GCC compiler goes
    to in order to persuade you not to use `gets`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出量可以看出，GCC编译器为了劝说你不要使用`gets`，付出了多大的努力。
- en: Now that we’ve taken a look at a few things we shouldn’t use, let’s look at
    some things we should.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看了一些不应该使用的东西，接下来让我们看一下应该使用的东西。
- en: Opening Files
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打开文件
- en: The predefined files `stdin`, `stdout`, and `stdout` are file handles. The `fopen`
    function allows you to create file handles. [Listing 14-4](#listing14-4) shows
    a simple example.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 预定义文件`stdin`、`stdout`和`stdout`是文件句柄。`fopen`函数允许你创建文件句柄。[示例 14-4](#listing14-4)展示了一个简单的例子。
- en: '**file.c**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**file.c**'
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Listing 14-4: A file version of “Hello World”'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 14-4: 一个文件版本的“Hello World”'
- en: 'First, the `FILE*` declaration 1 declares a new file handle. All file operations
    require a file handle. Next we have the `fopen` call 2, which has this general
    form:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`FILE*`声明1声明一个新的文件句柄。所有文件操作都需要文件句柄。接下来是`fopen`调用2，它的一般形式是：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `mode` can be one of the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`mode`可以是以下之一：'
- en: '`r` Read only'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`r` 只读'
- en: '`w` Write only'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`w` 仅写'
- en: '`r+` Read and write'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`r+` 读写'
- en: '`a` Append (write but start at the end of file)'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`a` 追加（写入但从文件末尾开始）'
- en: '`b` Used in combination with the other modes for binary files (discussed in
    the next section)'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`b` 与其他模式结合使用，用于二进制文件（将在下一节讨论）'
- en: 'Now that we have the files open, we can read and write to them. Text can be
    written by `fprintf` and read by `fgets`. Next, let’s take a look at the other
    type of file: binary files.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经打开文件，可以进行读写操作了。文本可以通过`fprintf`写入，通过`fgets`读取。接下来，让我们看看另一种类型的文件：二进制文件。
- en: Binary I/O
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 二进制I/O
- en: 'So far we’ve limited ourselves to text files, but the C I/O system can handle
    binary files through the use of the `fread` and `fwrite` functions. The general
    form of the `fread` function is:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只限制在文本文件，但C I/O系统可以通过使用`fread`和`fwrite`函数处理二进制文件。`fread`函数的一般形式是：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, `buffer` is a pointer to the data buffer in which the data will be placed.
    The `elementSize` is always `1` (see the following box for an explanation). The
    `size` is the size of the buffer, which is usually `sizeof(``buffer``)`, and `inFile`
    is the file to read.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`buffer`是指向数据缓冲区的指针，数据将被存放在该缓冲区中。`elementSize`始终为`1`（请参见下面的框进行解释）。`size`是缓冲区的大小，通常是`sizeof(``buffer``)`，`inFile`是要读取的文件。
- en: The function returns the number of items read, which because `elementSize` is
    `1` is the number of bytes read. It returns `0` for the end of file and a negative
    number if there is an I/O error.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数返回读取的项目数，由于`elementSize`为`1`，因此是读取的字节数。文件结束时返回`0`，如果发生I/O错误，则返回负数。
- en: 'The `fwrite` function has a similar structure:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`fwrite`函数有一个类似的结构：'
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Everything is the same, except the data is written instead of read.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都是一样的，只是写入数据而不是读取。
- en: Copying a File
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复制文件
- en: We’ll use `fread` and `fwrite` calls to copy a file. Since we don’t know how
    to pass arguments on the command line yet (see Chapter 15), the filenames are
    hardcoded to *infile.bin* and *outfile.bin*. [Listing 14-5](#listing14-5) contains
    the code.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`fread`和`fwrite`调用来复制一个文件。由于我们还不知道如何在命令行中传递参数（见第15章），文件名被硬编码为*infile.bin*和*outfile.bin*。[示例
    14-5](#listing14-5)包含了相关代码。
- en: '**copy.c**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**copy.c**'
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Listing 14-5: Copying a file'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 14-5：复制一个文件
- en: First, note the `fopen` call 1. We open the file using the `rb` mode, which
    tells the system we’re going to read the file (`r`) and that the file is binary
    (`b`).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，注意`fopen`调用 1。我们使用`rb`模式打开文件，这告诉系统我们将读取文件（`r`）并且文件是二进制的（`b`）。
- en: Next, let’s take a look at the `fread` call 2. The return value for this function
    is `ssize_t`, which is a standard type that’s big enough to hold the size of the
    largest object (structure, array, union) that can possibly exist. It also can
    hold `–1` to indicate an error condition.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来看看`fread`调用 2。这个函数的返回值是`ssize_t`，它是一个标准类型，足够大可以存储可能存在的最大对象（结构体、数组、联合体）的大小。它还可以存储`-1`来表示错误条件。
- en: If we’ve read all the data from the file, `fread` returns `0`. When that happens,
    we’re done, so we exit the main loop 3.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们已经从文件中读取了所有数据，`fread`会返回`0`。当发生这种情况时，表示我们已经完成，因此退出主循环 3。
- en: Now we come to the `fwrite` call 4, which returns a `size_t` value. This is
    an unsigned type that holds the size of the largest object you can put in a program,
    but because it’s unsigned, it cannot hold an error value. What happens when `fwrite`
    gets an error when writing something? It writes as much as it can and returns
    the number of bytes written, so it will never return an error code, just a short
    write.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看`fwrite`调用 4，它返回一个`size_t`值。这个是一个无符号类型，可以存储程序中能容纳的最大对象的大小，但由于它是无符号的，它不能存储错误值。当`fwrite`在写入时遇到错误时会发生什么？它会尽可能多地写入，并返回已写入的字节数，因此它永远不会返回错误代码，只会返回部分写入的字节数。
- en: 'Note that `fread` returns an `ssize_t` result and `fwrite` returns a `size_t`
    result. There are good reasons for this, but it means that if we check to see
    whether the number of bytes we tried to write is the same as the number we actually
    asked `fwrite` to write, we get a compiler warning:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`fread`返回一个`ssize_t`类型的结果，而`fwrite`返回一个`size_t`类型的结果。这样做有其合理的原因，但也意味着，如果我们检查试图写入的字节数是否与实际要求`fwrite`写入的字节数相同，编译器会发出警告：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To get rid of the warning, we need to insert a cast, thus telling C, “Yes,
    I know we are mixing signed and unsigned types, but we have to do it because of
    the stupid way `fread` and `fwrite` are defined”:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了消除警告，我们需要插入一个类型转换，从而告诉C语言：“是的，我知道我们正在混合有符号和无符号类型，但我们必须这么做，因为`fread`和`fwrite`的定义很笨拙”：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Also note that on the last read we probably won’t get a full 512 bytes. That’s
    why we are using `readSize` in the `fwrite` statement instead of `sizeof(``buffer``)`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 另外请注意，在最后一次读取时，我们可能不会读取到完整的512字节。这就是为什么在`fwrite`语句中我们使用了`readSize`而不是`sizeof(``buffer``)`的原因。
- en: Buffering and Flushing
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓冲区和刷新
- en: The C I/O system uses *buffered I/O*, which means that when you do a `printf`
    or `fwrite`, the data may not be sent to the output device immediately. Instead,
    it will be stored in memory until the system has enough data to make things efficient.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: C的I/O系统使用*缓冲I/O*，这意味着当你执行`printf`或`fwrite`时，数据可能不会立即发送到输出设备。相反，它将被存储在内存中，直到系统有足够的数据来提高效率。
- en: Data going to the console is *line buffered*, which means that if you print
    part of a line, it might not go out until the rest of the line is sent. Let’s
    see how this can get us into trouble with the program in [Listing 14-6](#listing14-6).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 发送到控制台的数据是*行缓冲*的，这意味着如果你只打印了一行的部分内容，它可能不会立即显示，直到该行的其他部分也发送出去。让我们看看这个程序是如何在[示例
    14-6](#listing14-6)中给我们带来麻烦的。
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Listing 14-6: Dividing by zero'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 14-6：除以零
- en: 'When running this program, you would expect to see the following output:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个程序时，你会期望看到以下输出：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'But what you actually see is this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 但你实际看到的是：
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Your first thought might be that `printf` did not execute, but it did. The data
    went into a buffer and was sitting in the buffer when the program aborted, giving
    a false indication that `printf` did not work.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你最初可能认为`printf`没有执行，但实际上它执行了。数据进入了缓冲区，并在程序中止时停留在缓冲区，导致误导性的显示`printf`没有起作用。
- en: 'To fix this problem, we need to tell the I/O system “write the buffered data
    out now,” which is done with the `fflush` function:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们需要告诉I/O系统“现在写入缓冲区数据”，这可以通过`fflush`函数来完成：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Flushing out the data ensures that we can see it. On the other hand, we don’t
    want to flush after every write, as that would defeat the purpose of buffering,
    which is to make I/O more efficient.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新数据可以确保我们能够看到它。另一方面，我们不想在每次写入后都刷新，因为那样会违背缓冲区的目的，缓冲区的目的是提高I/O效率。
- en: Closing Files
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关闭文件
- en: 'Finally, after we’re done with a file, we need to tell C that we’re finished
    with it. We do this using the `fclose` function:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们完成文件操作后，需要告诉C语言我们已经处理完该文件。我们通过使用`fclose`函数来完成：
- en: '[PRE23]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: where `file` is the `FILE*` to close and `result` is `0` if it worked or nonzero
    if it didn’t.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，`file`是要关闭的`FILE*`，`result`如果成功返回`0`，如果失败则返回非零值。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In the embedded world, I/O is difficult because you have to write code to deal
    directly with the device, and you need to write different code for every different
    type of device.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在嵌入式世界中，I/O操作比较困难，因为你必须编写代码直接与设备交互，并且需要为每种不同类型的设备编写不同的代码。
- en: The C I/O system is designed to hide all those details from you. It also provides
    a lot of nice features, such as formatting, buffering, and device independence.
    The buffered I/O system works well for most general applications.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: C语言的I/O系统设计是为了将这些细节隐藏在你背后。它还提供了许多优秀的功能，如格式化、缓冲和设备独立性。缓冲I/O系统对于大多数一般应用程序来说非常有效。
- en: Programming Problems
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程问题
- en: See what happens when you put too many or too few parameters in a `printf` statement.
    What happens when you put the wrong type (for example, `double` instead of `int`)?
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看看当你在`printf`语句中放入过多或过少的参数时会发生什么。如果你放入了错误的类型（例如，`double`而不是`int`）会怎样？
- en: Write a program that asks the user for a temperature in Centigrade and converts
    it to Fahrenheit.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，要求用户输入摄氏温度并将其转换为华氏温度。
- en: Write a program that counts the number of words in a file. Be sure you document
    the definition of “word,” as some people’s idea of a word may be different from
    yours.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，计算文件中单词的数量。请确保你对“单词”的定义进行文档说明，因为不同的人对“单词”的理解可能与你不同。
- en: Write a program that compares two files line by line and writes out the lines
    that differ.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，逐行比较两个文件，并输出不同的行。
