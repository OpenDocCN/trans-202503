- en: '**G  More ROM Photography**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**G 更多 ROM 摄影**'
- en: '**G.1 TMS320M10, C15, C25, C5x**'
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**G.1 TMS320M10, C15, C25, C5x**'
- en: Caps0ff (2020a) describes the photography and reverse engineering of TMS320M10
    chips in Eighties arcade games from Taoplan, such as Flying Shark and Kyukyoku
    Tiger. The same technique works on early successors of the M10, such as the TMS320C25.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Caps0ff (2020a) 描述了逆向工程和摄影 TMS320M10 芯片的过程，这些芯片用于 80 年代的 Taoplan 街机游戏，如《飞翔的鲨鱼》和《极限虎》。相同的技术也适用于
    M10 的早期继任者，如 TMS320C25。
- en: Caps0ff also mentions prior work into the TMS320C15, which used a contact ROM
    instead of a diffusion ROM. Bits in that chip used a different ordering scheme,
    and those in the popular BSMT2000 audio chip, a preprogrammed variant of the C15,
    have also been extracted by photography.^([1](footnotes.xhtml#app7fn1))
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Caps0ff 还提到之前对 TMS320C15 的研究，它使用了接触式 ROM，而不是扩散式 ROM。该芯片中的位使用了不同的排序方案，而在流行的 BSMT2000
    音频芯片中，这些位已通过摄影提取出来，BSMT2000 是 C15 的预编程变种。^([1](footnotes.xhtml#app7fn1))
- en: 'A TMS320’s ROM ID is usually found near the model number, such as D70015 in
    their example. “Eh,” you might ask, “why do I care about their model number so
    many years after manufacturing, when all records have surely been lost?” Well,
    Caps0ff shares a lovely trick for this: in a mask-programmed ROM that has a unique
    mask for each customer, such as high-volume TMS320 chips, the ROM serial number
    is on the same mask as the ROM bits. So if you delayer to clarify the serial number,
    you will *also* be clarifying the ROM bits. They are on the same layer at exactly
    the same depth.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: TMS320 的 ROM ID 通常位于型号编号附近，例如他们示例中的 D70015。你可能会问：“哎，为什么我要在这么多年后关心他们的型号编号，毕竟所有记录可能早已丢失？”
    好吧，Caps0ff 分享了一个非常巧妙的技巧：在一个具有独特掩模的掩模编程 ROM 中，例如高产量的 TMS320 芯片，ROM 序列号与 ROM 位在同一个掩模上。因此，如果你剥离层以明确序列号，你*也*会明确
    ROM 位。它们处于同一层，深度完全相同。
- en: In the M10, this was just the trick. Removing a few layers to clarify the serial
    number made the bits pop right out, when they had been barely visible from the
    surface.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在 M10 中，这就是技巧所在。去除几层以明确序列号时，ROM 位直接显现出来，而之前从表面几乎不可见。
- en: '![Image](../images/f0388-01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0388-01.jpg)'
- en: 'Figure G.1: BSMT2000 ROM from a TMS320C15'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图 G.1：来自 TMS320C15 的 BSMT2000 ROM
- en: Caps0ff (2020b) describes the process of reverse engineering the TMS320C50 and
    TMS320C53 ROMs. The C53 from an arcade cabinet was their real target. By first
    dumping the ROM image from a C50 development kit with a debugger, then comparing
    that file to photographs of the ROM bits, they were able to know the ordering
    of the ROM bits in the C53, leaving only the bank ordering to guess. (The C53
    has four banks, while the C50 has just one.) This ROM format is now one of many
    supported in Zorrom.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Caps0ff (2020b) 描述了逆向工程 TMS320C50 和 TMS320C53 ROM 的过程。他们的真正目标是来自街机的 C53。通过首先从
    C50 开发套件中使用调试器提取 ROM 镜像，然后将该文件与 ROM 位的照片进行比较，他们能够知道 C53 中 ROM 位的排序，只剩下银行顺序需要猜测。（C53
    有四个银行，而 C50 只有一个。）这个 ROM 格式现在是 Zorrom 支持的众多格式之一。
- en: Some of the TMS320 chips can also be dumped by abusing their microprocessor
    mode to execute external memory. Details for this trick can be found in [Chapter
    F.2](app06.xhtml#app06_2).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 TMS320 芯片也可以通过滥用其微处理器模式来执行外部存储器，从而提取数据。有关此技巧的详细信息，请参见[章节 F.2](app06.xhtml#app06_2)。
- en: '**G.2 CH340 Unknown Architecture**'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**G.2 CH340 未知架构**'
- en: Cornateanu (2021) is a general tutorial on decapsulation and delayering chips
    for photography and ROM recovery, and the CH340 USB/Serial controller is its example
    target. The top metal layer hides the bits, keeping them invisible from the surface.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Cornateanu (2021) 是关于芯片去封装和去层摄影以及 ROM 恢复的通用教程，CH340 USB/串口控制器是其示例目标。顶层金属层隐藏了位，使它们在表面上不可见。
- en: Cornateanu describes delayering the chip with HF, which removed the top metal
    layer to expose the bits. From the look of his photos it’s a diffusion ROM, but
    the dice are quite small and I’ve had considerable trouble reproducing his work
    in my own lab.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Cornateanu 描述了使用 HF 去层芯片的过程，这去除了顶层金属层以暴露 ROM 位。从他的照片来看，这是一个扩散式 ROM，但骰子非常小，我在自己实验室里复现他的工作时遇到了相当大的困难。
- en: Bit extraction was performed with Rompar, but because the CPU architecture was
    (and remains) unknown, the bits were decoded to bytes with Bitviewer, rather than
    Zorrom. Bit order was determined by looking at the address line decoder circuitry,
    then confirmed by recognizing USB descriptor tables and strings.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 位提取是使用 Rompar 执行的，但由于 CPU 架构（当时及现在）未知，位是通过 Bitviewer 解码为字节，而不是 Zorrom。位顺序是通过查看地址线解码器电路来确定的，然后通过识别
    USB 描述符表和字符串来确认。
- en: After extracting the ROM, he knew the memory contents but still not the CPU
    architecture, which is a weird one built around 14-bit words. Writing an IDA Pro
    plugin for this architecture remains a work in progress.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 提取 ROM 后，他知道了内存内容，但仍不清楚 CPU 架构是什么，它是围绕 14 位字构建的奇怪架构。为这种架构编写 IDA Pro 插件仍然在进行中。
- en: '**G.3 Intel 8271 New ISA**'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**G.3 英特尔 8271 新 ISA**'
- en: Evans (2020) describes a photographic dump of the Intel 8271 floppy controller’s
    mask ROM, which contains 864 bytes. This chip is also sold as the NEC D765.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Evans（2020年）描述了英特尔 8271 磁盘控制器掩膜 ROM 的影像转储，该 ROM 包含 864 字节。这个芯片也作为 NEC D765 销售。
- en: The order was successfully guessed as left-to-right then top-to-bottom, MSBit-first,
    with bytes built from one bit per 8-bit group. Bits were inverted. That gave the
    first few bytes as `fc 06 02 f7`. This happened to be correct, but the harder
    part was in figuring out the instruction set.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个顺序成功地猜测为从左到右然后从上到下，先 MSBit 后 LSBit，字节由每个 8 位组的一个位构成。位被反转。这使得前几个字节为 `fc 06
    02 f7`。这恰好是正确的，但更难的部分是搞清楚指令集。
- en: Reverse engineering an instruction set requires some hints as to a starting
    position. Ken Shirriff’s encyclopedic knowledge came to the rescue. He found that
    Louie, Wipfli, and Ebright (1977) is a conference presentation on the chip’s design,
    including instruction counts and a die photograph. Ken also found that Louie had
    filed a patent, US4152761A, that describes the chip’s design.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 逆向工程指令集需要一些关于起始位置的线索。Ken Shirriff 的百科全书式知识提供了帮助。他发现 Louie、Wipfli 和 Ebright（1977年）的会议演讲介绍了该芯片的设计，包括指令计数和芯片照片。Ken
    还发现 Louie 提交了一项专利 US4152761A，描述了该芯片的设计。
- en: Armed with these sources and a ton of study of the instruction PLA bits, Evans
    reverse engineered much of the instruction set and then enough of the ROM to come
    up with a way to write raw floppy disk tracks. This made it possible to clone
    BBC Micro floppy disks, only a few decades too late for it to be profitable in
    piracy.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 凭借这些资源和大量对指令 PLA 位的研究，Evans 成功地逆向工程了大部分指令集，并解析了足够多的 ROM，从而提出了一种写入原始软盘轨道的方法。这使得克隆
    BBC Micro 软盘成为可能，尽管为时已晚，无法在盗版中盈利。
- en: '![Image](../images/f0391-01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0391-01.jpg)'
- en: 'Figure G.2: Intel 8271 ROM'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 G.2：英特尔 8271 ROM
- en: '**G.4 Nintendo 64 CIC**'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**G.4 任天堂 64 CIC**'
- en: Much like the CIC chip of the Nintendo NES described in [Chapter 25](ch25.xhtml#ch25),
    the Nintendo 64 uses a 4-bit Sharp microcontroller in the SM5 family to enforce
    licensing, so third parties cannot make their own games. Unlike the original NES,
    the N64’s CIC successfully prevented the appearance of unlicensed cartridges for
    the entirety of this console’s commercial lifetime.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [第25章](ch25.xhtml#ch25) 中描述的任天堂 NES 的 CIC 芯片类似，任天堂 64 使用 SM5 系列的 4 位 Sharp
    微控制器来实施授权，因此第三方不能制作自己的游戏。与原始 NES 不同，N64 的 CIC 成功地阻止了在该主机的整个商业生命周期内出现未经授权的卡带。
- en: That is not, however, to say that the scheme lasted forever. Eighteen years
    after launch, the N64’s CIC chip was successfully broken independently by two
    teams and with two methods.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并不意味着该方案永远有效。发布十八年后，N64 的 CIC 芯片被两个团队和两种方法独立破解。
- en: Kammerstetter et al. (2014) describes a technique for reverse engineering the
    test mode of the CIC chip, allowing a sort of debugger to be attached, which can
    then read the program more or less directly out of ROM.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Kammerstetter 等人（2014年）描述了一种逆向工程 CIC 芯片测试模式的技术，允许将一种调试器连接到芯片上，从而能够直接从 ROM 中读取程序。
- en: As a parallel effort, Ryan, H, and McMaster (2015) describes a dump of the mask
    ROM by Dash etching, in which junctions are stained to indicate their doping with
    a mixture of HNO[3], HF, and HAc acids under a strong light for a few seconds.
    Because Dash etching has a frustratingly low yield, they purchased a large number
    of cheap sports cartridges and decapsulated the CIC chips from these cartridges
    in bulk.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 作为平行工作，Ryan、H 和 McMaster（2015年）描述了通过 Dash 蚀刻技术获取的掩膜 ROM 转储，在这种方法中，连接点被染色，以表明它们在强光下被
    HNO[3]、HF 和 HAc 酸混合物掺杂了几秒钟。由于 Dash 蚀刻的成功率令人沮丧地低，他们购买了大量便宜的运动游戏卡带，并批量去壳提取这些卡带中的
    CIC 芯片。
