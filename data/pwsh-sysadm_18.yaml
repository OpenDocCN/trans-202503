- en: '15'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '15'
- en: PROVISIONING A VIRTUAL ENVIRONMENT
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 配置虚拟环境
- en: '![Images](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common.jpg)'
- en: '*PowerLab* is a final, massive project using all the concepts you’ve learned
    and more. It’s a project that automates the provisioning of Hyper-V virtual machines
    (VMs) all the way up to installing and configuring services including SQL and
    IIS. Imagine being able to run a single command such as `New-PowerLabSqlServer`,
    `New-PowerLabIISServer`, or even `New-PowerLab`, wait a few minutes, and have
    a fully configured machine (or machines) pop out. That’s what you’re going to
    get if you stick with me throughout the rest of the book.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*PowerLab* 是一个最终的大型项目，涵盖了你所学的所有概念以及更多内容。它是一个自动化 Hyper-V 虚拟机（VM）配置的项目，包括安装和配置服务，如
    SQL 和 IIS。试想一下，只需运行一个命令，如 `New-PowerLabSqlServer`、`New-PowerLabIISServer`，甚至是
    `New-PowerLab`，等待几分钟，就能获得一个完全配置好的机器（或多台机器）。如果你跟着我完成本书的剩余部分，这就是你将得到的成果。'
- en: The purpose of the PowerLab project is to remove all the repetitive, time-consuming
    tasks required to bring up a test environment or a lab. When you’re done, you
    should have just a handful of commands to build an entire Active Directory forest
    from nothing but a Hyper-V host and a few ISO files.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: PowerLab 项目的目的是消除创建测试环境或实验室时所需的所有重复、耗时的任务。完成后，你只需少数几个命令就能从一个 Hyper-V 主机和几个 ISO
    文件构建一个完整的 Active Directory 林。
- en: I’ve purposefully not covered *everything* that’s going into PowerLab in Parts
    I and II. Instead, I challenge you to notice these areas and come up with unique
    solutions on your own. After all, in programming there are always lots of ways
    to accomplish the same task. If you get stuck, please feel free to reach out to
    me on Twitter at @adbertram.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我故意没有在第一部分和第二部分中涵盖 PowerLab 中的*所有*内容。相反，我挑战你注意这些领域并自行想出独特的解决方案。毕竟，在编程中，总是有很多方法可以完成同一任务。如果你遇到困难，请随时通过
    Twitter @adbertram 联系我。
- en: By building a project of this scale, you will not only cover hundreds of PowerShell
    topics, but also see just how powerful a scripting language can be and come away
    with a substantial time-saving utility.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通过构建一个如此规模的项目，你不仅可以覆盖数百个 PowerShell 主题，还能看到脚本语言的强大功能，并获得一个显著节省时间的工具。
- en: In this chapter, you’ll get PowerLab started by creating the bare-bones `PowerLab`
    module. Then you’ll add the ability to automate the creation of a virtual switch,
    VM, and virtual hard disk (VHD).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将通过创建基础的 `PowerLab` 模块来启动 PowerLab。然后，你将添加自动化创建虚拟交换机、虚拟机和虚拟硬盘（VHD）的功能。
- en: PowerLab Module Prerequisites
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PowerLab 模块先决条件
- en: To follow along with all the code examples you’ll work with in [Part III](part3.xhtml#part3),
    you need to meet a few prerequisites. Each chapter in this part has a “Prerequisites”
    section. This is to ensure that you always know what to expect.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟上[第三部分](part3.xhtml#part3)中所有的代码示例，你需要满足一些先决条件。每一章都会有一个“先决条件”部分，确保你始终知道该期待什么。
- en: 'For the project in this chapter, you need a Hyper-V host with the following
    configuration:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的项目需要一个配置如下的 Hyper-V 主机：
- en: A network adapter
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个网络适配器
- en: 'IP: 10.0.0.5 (optional, but to follow along exactly, you need this IP)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'IP: 10.0.0.5（可选，但为了完全按照示例进行，你需要此 IP）'
- en: 'Subnet mask: 255.255.255.0'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子网掩码：255.255.255.0
- en: A workgroup
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个工作组
- en: At least 100GB of available storage
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少 100GB 的可用存储
- en: Windows Server 2016 with a full GUI
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有完整图形用户界面的 Windows Server 2016
- en: To create a Hyper-V server, you need to install the Hyper-V role on the Windows
    server you intend to use. You can expedite the setup process by downloading and
    running the Hyper-V *Setup.ps1* script in the book’s resources at *[https://github.com/adbertram/PowerShellForSysadmins/](https://github.com/adbertram/PowerShellForSysadmins/)*.
    This will set up Hyper-V and create a few necessary folders.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个 Hyper-V 服务器，你需要在计划使用的 Windows 服务器上安装 Hyper-V 角色。你可以通过下载并运行书中资源中的 Hyper-V
    *Setup.ps1* 脚本来加快设置过程，网址为 *[https://github.com/adbertram/PowerShellForSysadmins/](https://github.com/adbertram/PowerShellForSysadmins/)*。这将设置
    Hyper-V 并创建一些必要的文件夹。
- en: '**NOTE**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you’re planning on following along word for word, please run the associated
    chapter’s Pester prerequisite script* (Prerequisites.Tests.ps1) *to confirm that
    your Hyper-V server is set up as expected. These tests will confirm that your
    lab environment is set up exactly as mine is. Run* Invoke-Pester*, passing it
    the prerequisite script, as in [Listing 15-1](ch15.xhtml#ch15list1). For the rest
    of the book, all code will be executed on the Hyper-V host itself.*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你打算逐字跟随，请运行关联章节的 Pester 前提脚本* (Prerequisites.Tests.ps1) *以确认你的 Hyper-V 服务器已按预期设置。这些测试将确认你的实验环境与我的设置完全一致。运行*
    Invoke-Pester*，并传递前提脚本，像 [列表 15-1](ch15.xhtml#ch15list1) 中那样。书中的其余代码将直接在 Hyper-V
    主机上执行。*'
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 15-1: Running Pester prerequisite checks for Hyper-V work*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 15-1：运行 Pester 前提检查以确保 Hyper-V 工作正常*'
- en: If you have successfully set up your environment, the output should confirm
    five passes. Once you’ve confirmed that your environment is all set up and ready
    go, you can get started on the project!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你成功设置了环境，输出应该会确认五个测试通过。确认环境已准备好后，你可以开始项目！
- en: Creating the Module
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建模块
- en: Because you know that you’ll need to automate a potentially large number of
    tasks that all relate to one another, you should create a PowerShell module. As
    you learned in [Chapter 7](ch07.xhtml#ch7), a PowerShell module is a great way
    to combine lots of like-functions into one unit; that way, you can easily manage
    all the code necessary to perform the tasks surrounding a specific purpose. PowerLab
    is no different. There’s no reason to think about everything at once, so start
    small—add functionality, test, and repeat.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你知道自己将需要自动化多个彼此相关的任务，所以你应该创建一个 PowerShell 模块。正如你在 [第 7 章](ch07.xhtml#ch7)
    中所学，PowerShell 模块是将多个相似功能合并为一个单元的好方法；这样，你可以轻松管理执行特定任务所需的所有代码。PowerLab 也不例外。没有必要一次性考虑所有内容，所以从小处着手——添加功能，测试，并重复。
- en: Creating a Blank Module
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建空模块
- en: First, you need to create a blank module. To do that, remote-desktop to your
    soon-to-be Hyper-V host and log in as the local administrator—or any account in
    the local administrators group. You’ll build this module directly on the Hyper-V
    host to ease VM creation and administration. This means you’ll use an RDP session
    to connect to your Hyper-V host’s console session. Then you’ll create the module
    folder, the module itself (the *.psm1* file), and the optional manifest (the *.psd1*
    file).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要创建一个空模块。为此，请远程桌面连接到即将成为 Hyper-V 主机的计算机，并以本地管理员身份登录——或以任何本地管理员组的帐户登录。你将直接在
    Hyper-V 主机上构建这个模块，以便简化虚拟机的创建和管理。这意味着你将使用 RDP 会话连接到 Hyper-V 主机的控制台会话。然后，你将创建模块文件夹、模块本身（*.psm1*
    文件）和可选的清单（*.psd1* 文件）。
- en: Since you’re logged in via the local administrator account and may one day allow
    others to use your PowerLab module, create the module in *C:\ProgramFiles\WindowsPowerShell\Modules*.
    This will allow you to access the module when logged in as any administrative
    user on the host.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你是通过本地管理员帐户登录，并且将来可能允许其他人使用你的 PowerLab 模块，建议将模块创建在 *C:\ProgramFiles\WindowsPowerShell\Modules*
    目录下。这样，无论何时作为任何管理员用户登录主机，你都可以访问该模块。
- en: 'Next, open a PowerShell console and choose **Run as Administrator**. Then,
    create a PowerLab module folder by using the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开 PowerShell 控制台并选择 **以管理员身份运行**。然后，使用以下命令创建 PowerLab 模块文件夹：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, create a blank text file called *PowerLab.psm1*. Use the `New-Item` command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为 *PowerLab.psm1* 的空文本文件。使用 `New-Item` 命令：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Creating a Module Manifest
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建模块清单
- en: 'Now, create a module manifest. To create a module manifest, use the handy `New-ModuleManifest`
    command. This command creates a template manifest, which you can then open in
    a text editor and tweak after the initial file is built, if necessary. Here are
    the parameters I used to build the template manifest:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个模块清单。要创建模块清单，使用便捷的 `New-ModuleManifest` 命令。此命令创建一个模板清单，你可以在初始文件构建后用文本编辑器打开并根据需要进行调整。以下是我用来构建模板清单的参数：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Feel free to modify the parameter values to suit your needs.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 随意修改参数值以满足你的需求。
- en: Using Built-In Prefixes for Function Names
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用内置前缀命名函数
- en: A function doesn’t necessarily need a specific name. However, when you’re building
    a module that is typically a group of related functions, it’s always a good idea
    to preface the noun part of the function with the same label. For example, your
    project is called *PowerLab*. In this project, you’ll build functions that all
    relate to that common theme. To differentiate the functions in PowerLab from the
    functions in other modules you may have loaded, you can add the name of the module
    before the actual noun portion of the name. This means that most functions’ nouns
    will start with the term *PowerLab*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 函数不一定需要特定的名称。然而，当你构建一个通常由相关函数组成的模块时，最好在函数名的名词部分前加上相同的标签。例如，你的项目名为*PowerLab*。在这个项目中，你将构建与该共同主题相关的函数。为了将
    PowerLab 中的函数与其他模块中的函数区分开来，你可以在函数名的实际名词部分前加上模块名。这意味着大多数函数的名词将以*PowerLab*为开头。
- en: However, not all functions will start with the name of the module. Examples
    include helper functions that only assist other functions and will never be called
    by a user.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并不是所有的函数都将以模块名开头。例如，一些仅协助其他函数且永远不会被用户调用的辅助函数。
- en: 'When you’re sure you want all function nouns to use the same prefix without
    having to explicitly define it in the function name, the module manifest has an
    option called `DefaultCommandPrefix`. This option will force PowerShell to preface
    the noun with a particular string. For example, if you define the `DefaultCommandPrefix`
    key in a manifest and create a function inside the module called `New-Switch`,
    when the module is imported, the function won’t be available for use as `New-Switch`
    but as `New-PowerLabSwitch`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当你确定要让所有函数名的名词都使用相同的前缀，而不必在函数名中明确指定时，模块清单中有一个选项叫做`DefaultCommandPrefix`。这个选项将强制
    PowerShell 在名词前加上特定的字符串。例如，如果你在清单中定义了`DefaultCommandPrefix`键，并在模块中创建了一个名为`New-Switch`的函数，那么当模块被导入时，这个函数将无法作为`New-Switch`使用，而是作为`New-PowerLabSwitch`：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: I prefer *not* to go with this approach because it forcefully prefaces *all*
    function name nouns inside the module with that string.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我倾向于*不*采用这种方式，因为它会强制在模块中的*所有*函数名的名词部分前加上这个字符串。
- en: Importing the New Module
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 导入新模块
- en: Now that you’ve built the manifest, you’re ready to see whether it imports successfully.
    Since you haven’t written any functions yet, the module won’t be able to do anything,
    but it’s important to see whether PowerShell can see the module. If you see the
    following result, you’re good to go.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经构建了清单，接下来可以检查它是否成功导入。由于你还没有编写任何函数，模块不会执行任何操作，但重要的是检查 PowerShell 是否能够识别该模块。如果你看到以下结果，那么你就可以继续了。
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If the PowerLab module doesn’t appear at the bottom of the output, return to
    the previous steps. In addition, check to ensure that you have the PowerLab folder
    created under *C:\Program Files\WindowsPowerShell\Modules* with *PowerLab.psm1*
    and *PowerLab.psd1* files inside.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 PowerLab 模块没有出现在输出的底部，请返回前面的步骤检查。此外，确保在 *C:\Program Files\WindowsPowerShell\Modules*
    下已创建 PowerLab 文件夹，并且其中包含 *PowerLab.psm1* 和 *PowerLab.psd1* 文件。
- en: Automating Virtual Environment Provisioning
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动化虚拟环境的配置
- en: Now that you have built the module’s structure, you can begin to add functionality
    to it. Since the task of creating a server, such as SQL or IIS, has various steps
    that depend on one another, you’ll first work on automating the creation of a
    virtual switch, virtual machine, and virtual disk. Then you’ll automate deploying
    the operating system to these VMs, and finally, you’ll install SQL Server and
    IIS on these VMs.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经构建了模块的结构，可以开始向其中添加功能了。由于创建一个服务器（如 SQL 或 IIS）的任务包含多个相互依赖的步骤，你将首先自动化虚拟交换机、虚拟机和虚拟磁盘的创建。接着你将自动化操作系统部署到这些虚拟机上，最后在这些虚拟机上安装
    SQL Server 和 IIS。
- en: Virtual Switches
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 虚拟交换机
- en: Before you can begin automating the creation of VMs, you need to ensure that
    a virtual switch is set up on the Hyper-V host. *Virtual switches* allow VMs to
    communicate with client machines and other VMs built on a host.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始自动化创建虚拟机之前，需要确保 Hyper-V 主机上已设置虚拟交换机。*虚拟交换机*使虚拟机能够与客户端计算机及在同一主机上创建的其他虚拟机进行通信。
- en: Creating a Virtual Switch Manually
  id: totrans-50
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 手动创建虚拟交换机
- en: Your virtual switch will be an *external* switch, called `PowerLab`. Chances
    are, a switch with this name isn’t already on the Hyper-V host, but just to be
    sure, list all the virtual switches on the host. You’ll never regret checking
    first.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你的虚拟交换机将是一个*外部*交换机，名为`PowerLab`。这个名字的交换机可能在 Hyper-V 主机上并不存在，但为了确保无误，列出主机上的所有虚拟交换机。你永远不会后悔先检查一遍。
- en: 'To see all of the switches set up on your Hyper-V host, use the Get-VmSwitch
    command. Once you confirm that the PowerLab switch doesn’t exist, create a new
    virtual switch with the `New-VmSwitch` command, specifying the name (`PowerLab`)
    and the type of switch:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看在 Hyper-V 主机上设置的所有交换机，使用 Get-VmSwitch 命令。确认 PowerLab 交换机不存在后，使用 `New-VmSwitch`
    命令创建一个新的虚拟交换机，指定名称（`PowerLab`）和交换机类型：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Since you need your VMs to be able to communicate with hosts outside Hyper-V,
    you pass the value `External` to the `SwitchType` parameter. Whoever you share
    this project with will also need to create an external switch.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你需要让虚拟机能够与 Hyper-V 外部的主机通信，因此你将值 `External` 传递给 `SwitchType` 参数。无论你与谁分享这个项目，他们也需要创建一个外部交换机。
- en: With your switch created, it’s now time to create the PowerLab module’s first
    function.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 交换机创建完成后，现在是时候创建 PowerLab 模块的第一个函数了。
- en: Automating VM Switch Creation
  id: totrans-56
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 自动化虚拟机交换机创建
- en: 'The first PowerLab function, called `New-PowerLabSwitch`, creates the Hyper-V
    switch. This function isn’t too complicated. In fact, without it, you would simply
    need to execute a single command at the prompt—that is, `New-VmSwitch`. But if
    you wrap that Hyper-V command inside a custom function, you will have the ability
    to perform other work: adding any kind of default configuration to the switch,
    for example.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 PowerLab 功能，称为 `New-PowerLabSwitch`，用于创建 Hyper-V 交换机。这个功能并不复杂。事实上，如果没有它，你只需要在命令行中执行一个简单的命令——也就是
    `New-VmSwitch`。但是，如果你将这个 Hyper-V 命令包装成一个自定义函数，你将能够执行其他工作：例如，为交换机添加任何类型的默认配置。
- en: I am a big fan of *idempotency*, which is a fancy word that means “regardless
    of the state in which the command executes, it performs the same task every time.”
    In this example, if the task of creating the switch were not idempotent, then
    running `New-VmSwitch` would result in an error if the switch already existed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我是 *幂等性* 的忠实粉丝，这个词的意思是“无论命令执行的状态如何，它每次都会执行相同的任务。”在这个例子中，如果创建交换机的任务不是幂等的，那么如果交换机已存在，运行
    `New-VmSwitch` 就会导致错误。
- en: To remove the requirement to manually check whether the switch is created before
    attempting to create a switch, you can use the `Get-VmSwitch` command. This command
    checks whether the switch has been created. Then, if—and only if—the switch doesn’t
    exist will you attempt to create a new switch. This allows you to run `New-PowerLabSwitch`
    in any environment and know that it will always create the virtual switch without
    returning an error—regardless of the state of the Hyper-V host.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了去除手动检查交换机是否创建的要求，你可以使用 `Get-VmSwitch` 命令。这个命令会检查交换机是否已创建。然后，只有当交换机不存在时，你才会尝试创建新的交换机。这使得你可以在任何环境中运行
    `New-PowerLabSwitch`，并且知道它将始终创建虚拟交换机，而不会返回错误——无论 Hyper-V 主机的状态如何。
- en: Open the *C:\Program Files\WindowsPowerShell\Modules\PowerLab\PowerLab.psm1*
    file and create the `New-PowerLabSwitch` function, as shown in [Listing 15-2](ch15.xhtml#ch15list2).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 *C:\Program Files\WindowsPowerShell\Modules\PowerLab\PowerLab.psm1* 文件并创建
    `New-PowerLabSwitch` 函数，如 [Listing 15-2](ch15.xhtml#ch15list2) 所示。
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 15-2: `New-PowerLabSwitch` function in the `PowerLab` module*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 15-2: `New-PowerLabSwitch` 函数在 `PowerLab` 模块中的实现*'
- en: This function first checks to see whether the switch is already created ❶. If
    it isn’t, the function creates it ❷. If the switch is already created, the function
    will simply return a verbose message to the console ❸.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数首先检查交换机是否已经创建 ❶。如果没有，函数会创建它 ❷。如果交换机已经创建，函数会向控制台返回一条详细信息 ❸。
- en: Save the module and then force it to import again by using Import-Module -Name
    PowerLab -Force.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 保存模块，然后通过使用 Import-Module -Name PowerLab -Force 命令强制重新导入。
- en: When you add new functions to the module, you must import the module again.
    If a module is already imported, you must use the `Force` parameter with `Import-Module`
    to force PowerShell to import it again. Otherwise, PowerShell will see that the
    module has already been imported and skip it.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当你向模块添加新功能时，必须重新导入模块。如果模块已经导入，你必须使用 `Force` 参数与 `Import-Module` 一起强制 PowerShell
    重新导入它。否则，PowerShell 会看到模块已经被导入，并跳过它。
- en: 'Once you’ve imported the module again, the `New-PowerLabSwitch` function should
    be available to you. Run this command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你重新导入该模块，`New-PowerLabSwitch` 函数应该就可以使用了。运行以下命令：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Notice that you don’t receive an error, but instead, a useful verbose message
    saying the switch has already been created. This is because you passed the optional
    `Verbose` parameter to the function. Defaults were chosen for the `SwitchName`
    and `SwitchType` parameters, since these will usually be the same.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到你没有收到错误信息，而是收到了一个有用的详细信息，说明开关已经创建。这是因为你将可选的`Verbose`参数传递给了函数。由于`SwitchName`和`SwitchType`参数的默认值通常相同，所以这两个参数选择了默认值。
- en: Creating Virtual Machines
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建虚拟机
- en: Now that you’ve set up a virtual switch, it’s time to create a VM. For this
    demo, you’ll create a generation 2 VM, called LABDC, with 2GB attached to the
    virtual switch you just built in the *C:\PowerLab\VMs* folder on the Hyper-V host.
    I’ve chosen *LABDC* as the name because this will eventually be our Active Directory
    domain controller. This VM will eventually be the domain controller you’ll use
    for your fully built lab.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经设置了虚拟交换机，接下来是创建虚拟机。对于这个演示，你将创建一个二代虚拟机，命名为LABDC，分配2GB内存，并连接到你刚刚在Hyper-V主机的*C:\PowerLab\VMs*文件夹中创建的虚拟交换机。我选择*LABDC*作为名称，因为这将最终成为我们的Active
    Directory域控制器。这个虚拟机最终将成为你完全构建的实验室中的域控制器。
- en: 'First, take a look at all the existing VMs and ensure that one doesn’t already
    exist with the same name. Since you already know the name of the VM you want to
    create, pass that value to the `Name` parameter of `Get-Vm`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，查看所有现有的虚拟机，确保没有同名的虚拟机已经存在。因为你已经知道要创建的虚拟机的名称，所以将该值传递给`Get-Vm`命令的`Name`参数：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `Get-Vm` command returns an error when it can’t find the VM with the specified
    name. Because you’re just checking whether it exists, and it doesn’t necessarily
    matter to us whether it does or doesn’t at this point, use the `ErrorAction` parameter
    with the `SilentlyContinue` value to ensure that the command returns nothing if
    the VM doesn’t exist in your automation script later. You’re not using a `try/catch`
    here for simplicity’s sake.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当`Get-Vm`命令找不到指定名称的虚拟机时，它会返回一个错误。由于你只是检查虚拟机是否存在，且此时我们并不关心它是否存在，因此可以使用`ErrorAction`参数并设置为`SilentlyContinue`，以确保命令在虚拟机不存在时返回空值。为了简化，这里没有使用`try/catch`。
- en: This technique works only if the command returns a nonterminating error. If
    the command returns a terminating error, you’ll have to either look into returning
    all the objects and filtering them with `Where-Object` or enclosing the command
    in a `try/catch` block.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此技术仅在命令返回的是非终止错误时有效。如果命令返回终止错误，你将需要查看是否能返回所有对象并使用`Where-Object`进行过滤，或将命令包含在`try/catch`块中。
- en: Creating a VM Manually
  id: totrans-75
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 手动创建虚拟机
- en: The VM doesn’t exist, which means you need to create it. To create a VM, you
    need to run the `Get-Vm` command and pass it the values that you defined at the
    start of this section.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 该虚拟机不存在，这意味着你需要创建它。要创建虚拟机，你需要运行`Get-Vm`命令，并传递在本节开始时定义的值。
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You should now have a VM, but confirm this by running Get-Vm again.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该已经有了一台虚拟机，但请通过再次运行Get-Vm来确认这一点。
- en: Automating VM Creation
  id: totrans-79
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 自动化虚拟机创建
- en: 'To automate creating a simple VM, you again need to add another function. This
    function will follow the same pattern as that used to create a new virtual switch:
    make an idempotent function that performs a task regardless of the state of the
    Hyper-V host.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要自动化创建一个简单的虚拟机，你需要再添加一个函数。这个函数将遵循与创建新虚拟交换机时相同的模式：编写一个幂等函数，无论Hyper-V主机的状态如何，都能执行任务。
- en: Enter the `New-PowerLabVm` function, as shown in [Listing 15-3](ch15.xhtml#ch15list3),
    into your *PowerLab.psm1* module.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 将`New-PowerLabVm`函数，如[清单 15-3](ch15.xhtml#ch15list3)所示，输入到你的*PowerLab.psm1*模块中。
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 15-3: `New-PowerLabVm` function in the `PowerLab` module*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 15-3：`New-PowerLabVm`函数，位于`PowerLab`模块中*'
- en: This function checks whether the VM already exists ❶. If it doesn’t, the function
    will create one ❷. If it does, the function will display a verbose message to
    the console ❸.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数检查虚拟机是否已经存在❶。如果不存在，函数将创建一个虚拟机❷。如果已存在，函数将向控制台显示一条详细信息❸。
- en: 'Save *PowerLab.psm1* and execute your new function at the prompt:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 保存*PowerLab.psm1*并在命令提示符下执行你刚创建的新函数：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Again, when you run this command, you can create a VM with the specified parameter
    values—whether that VM already exists (after you force the module to be imported
    again) or not.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行此命令时，你可以使用指定的参数值创建一个虚拟机——无论该虚拟机是否已经存在（在你强制模块重新导入之后）。
- en: Virtual Hard Disks
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 虚拟硬盘
- en: You now have a VM attached to a switch, but a VM isn’t any good without storage
    attached to it. To take care of that, you need to create a local virtual hard
    disk (VHD) and connect it to a VM.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经将虚拟机附加到交换机，但没有存储的虚拟机是没有用的。为了解决这个问题，你需要创建一个本地虚拟硬盘（VHD）并将其连接到虚拟机。
- en: '**NOTE**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*In [Chapter 16](ch16.xhtml#ch16), you’ll use a community script that converts
    an ISO file into a VHD. Therefore, you don’t need to create a VHD. But if you
    aren’t planning on automating the operating system deployment, or if you need
    to automate the VHD creation as part of another script, I still recommend that
    you complete this section.*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*在[第16章](ch16.xhtml#ch16)中，你将使用一个社区脚本将ISO文件转换为VHD。因此，你无需创建VHD。但如果你不打算自动化操作系统部署，或者你需要将VHD创建作为其他脚本的一部分自动化，我仍然建议你完成这一部分。*'
- en: Creating a VHD Manually
  id: totrans-92
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 手动创建VHD
- en: 'To create a VHD file, you need only a single command: `New-Vhd`. In this section,
    you’ll create a VHD that’s capable of growing to 50GB in size; and to save space,
    you’ll set the VHD to dynamically size.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建VHD文件，你只需要一个命令：`New-Vhd`。在本节中，你将创建一个可以增长到50GB大小的VHD；为了节省空间，你会将VHD设置为动态调整大小。
- en: You first need to create a folder on the Hyper-V host at *C:\PowerLab\VHDs*
    to place the VHD. Be sure to name your VHD with the same name as the VM you intend
    to attach it to in order to keep things simple.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先需要在Hyper-V主机的*C:\PowerLab\VHDs*路径下创建一个文件夹来存放VHD。确保为你的VHD命名时使用与你打算附加的虚拟机相同的名称，以保持简洁。
- en: 'Create the VHD with `New-Vhd`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`New-Vhd`命令创建VHD：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You pass `New-Vhd` the path ❶ and the VHD size ❷, and, finally, indicate that
    you want it to dynamically size ❸.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要传递给`New-Vhd`路径❶和VHD大小❷，最后，指定你希望它动态调整大小❸。
- en: 'Confirm that you successfully created the VHD on your Hyper-V host with the
    `Test-Path` command. If `Test-Path` returns `True`, you were successful:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Test-Path`命令确认你是否成功在Hyper-V主机上创建了VHD。如果`Test-Path`返回`True`，说明成功：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now you need to attach the VHD to the VM you created earlier. To do this, you
    use the `Add-VMHardDiskDrive` command. But because you’re *not* going to be attaching
    a VHD to LABDC—the OS deployment automation, in [Chapter 16](ch16.xhtml#ch16),
    will do that—create another VM, called MYVM, to attach to the VHD:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你需要将VHD附加到之前创建的虚拟机。为此，你需要使用`Add-VMHardDiskDrive`命令。但因为你*不会*将VHD附加到LABDC——操作系统部署自动化将在[第16章](ch16.xhtml#ch16)中完成这项工作——所以你需要创建一个名为MYVM的虚拟机来附加VHD：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `Add-VMHardDiskDrive` command accepts the object type that the `Get-VM`
    command returns for its pipeline input so you can pass the VM directly from `Get-VM`
    to `Add-VMHardDiskDrive`—specifying the path to the VHD on the Hyper-V host ❶.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`Add-VMHardDiskDrive`命令接受`Get-VM`命令为其管道输入返回的对象类型，因此你可以直接从`Get-VM`将虚拟机传递给`Add-VMHardDiskDrive`——并指定Hyper-V主机上VHD的路径❶。'
- en: Immediately after, use `Get-VMHardDiskDrive` to confirm that the VHDX was added
    successfully ❷.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 紧接着，使用`Get-VMHardDiskDrive`命令确认VHDX是否已成功添加❷。
- en: Automating VHD Creation
  id: totrans-104
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 自动化VHD创建
- en: You can add another function to your module to automate the process of creating
    a VHD and attaching it to a VM. When you create scripts or functions, accounting
    for various configurations is important.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以向模块中添加另一个函数来自动化创建VHD并将其附加到虚拟机的过程。在创建脚本或函数时，考虑各种配置非常重要。
- en: '[Listing 15-4](ch15.xhtml#ch15list4) defines the `New-PowerLabVhd` function,
    which creates a VHD and attaches a VM to it.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表15-4](ch15.xhtml#ch15list4)定义了`New-PowerLabVhd`函数，该函数创建VHD并将虚拟机附加到它上面。'
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '*Listing 15-4: `New-PowerLabVhd` function in the `PowerLab` module*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表15-4：`New-PowerLabVhd`函数在`PowerLab`模块中的实现*'
- en: 'This function supports both dynamic and fixed sizing ❷, and it accounts for
    four individual states:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数支持动态和固定大小❷，并且考虑到四种不同的状态：
- en: The VHD already exists ❶.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VHD已经存在❶。
- en: The VM to attach the VHD to doesn’t exist ❸.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要附加VHD的虚拟机不存在❸。
- en: The VM to attach the VHD to exists, but the VHD hasn’t been connected yet ❹.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要附加VHD的虚拟机已经存在，但VHD尚未连接❹。
- en: The VM to attach the VHD to exists, and the VHD has already been attached ❺.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要附加VHD的虚拟机已经存在，并且VHD已经附加❺。
- en: Function design is a whole other matter entirely. It takes years of coding and
    practice to be able to create a script or function that’s resilient across many
    scenarios. It’s an art that has never truly been perfected, but if you’re able
    to think through as many different ways a problem may occur and account for those
    up front, your function will be that much better off. However, don’t go *too*
    overboard and spend hours on a function or script making sure *every* detail is
    covered! This is just code. You can change it later.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 函数设计是一个完全不同的领域。要能够创建一个在多种场景下都能正常运行的脚本或函数，需要多年的编码和实践。这是一门艺术，至今尚未完全完善，但如果你能预想到问题可能出现的多种方式，并在一开始就考虑到这些情况，你的函数就会更好。然而，不要*过度*投入，花费几个小时在一个函数或脚本上，确保*每个*细节都被覆盖！这只是代码，你可以在以后进行修改。
- en: Executing the New-PowerLabVhd Function
  id: totrans-115
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 执行了New-PowerLabVhd函数
- en: 'You can execute this code in various states and account for each state. Let’s
    test multiple states to ensure that this automation script works in each situation:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在不同的状态下执行这段代码，并考虑每种状态。让我们测试多种状态，确保这个自动化脚本在每种情况下都能正常工作：
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, you’re not quite testing in the formal sense. Instead, you’re putting
    your new function through its paces by forcing it to run through each of the code
    paths you defined.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你并不是以正式的方式进行测试。相反，你通过强制让你的新函数运行你定义的每条代码路径，来测试它的表现。
- en: Testing the New Functions with Pester
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Pester测试新函数
- en: You should now be able to automate the creation of a Hyper-V VM, but you should
    always build Pester tests for everything you create in order to make sure everything
    works as you expect, as well as monitor your automation over time. You’ll build
    Pester tests for all the work you do in the rest of the book. You can find the
    Pester tests in this book’s resources at [*https://github.com/adbertram/PowerShellForSysadmins/*](https://github.com/adbertram/PowerShellForSysadmins/).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能够自动化创建Hyper-V虚拟机了，但你应该始终为你创建的每个功能编写Pester测试，以确保一切按预期工作，并且随着时间的推移监控你的自动化。在本书的其余部分，你将为所有工作编写Pester测试。你可以在本书的资源中找到这些Pester测试，网址是[*https://github.com/adbertram/PowerShellForSysadmins/*](https://github.com/adbertram/PowerShellForSysadmins/)。
- en: 'In this chapter, you accomplished four things:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你完成了四个任务：
- en: Created a virtual switch
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了一个虚拟交换机
- en: Created a VM
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了一个虚拟机
- en: Created a VHDX
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了一个VHDX
- en: Attached the VHDX to the VM
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将VHDX附加到虚拟机
- en: I broke the Pester tests for this chapter into sections that correspond to the
    four accomplishments. Breaking tests into stages like this helps keep your tests
    organized.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我把这一章的Pester测试分成了几个部分，每部分对应四个成果。像这样将测试分阶段有助于保持测试的条理性。
- en: Let’s run the test against the code you wrote in this chapter. To run the test
    script, make sure you downloaded the *Automating-Hyper-V.Tests.ps1* script from
    the book’s resources. In the following code, the test script is located in the
    root of *C:\*, but your path may be different depending on where you downloaded
    the resource files.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行这个测试，验证你在这一章编写的代码。要运行测试脚本，确保你已经从本书的资源中下载了*Automating-Hyper-V.Tests.ps1*脚本。在以下代码中，测试脚本位于*C:\*的根目录，但你的路径可能不同，具体取决于你下载资源文件的位置。
- en: '[PRE18]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: All four tests pass, so you’re good to move on to the next chapter.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 所有四个测试都通过了，所以你可以继续进行下一章了。
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: You created the foundation for your first real-world PowerShell automation project!
    I hope you’re already seeing just how much time you can save by automating with
    PowerShell! By using a freely available PowerShell module from Microsoft, you
    were able to run just a few commands to quickly create a virtual switch, VM, and
    disk drive. Microsoft gave you the commands, but it was up to you to build the
    logic around them to make everything flow seamlessly.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经为第一个真正的PowerShell自动化项目奠定了基础！希望你已经看到，通过PowerShell自动化可以节省多少时间！通过使用微软提供的免费PowerShell模块，你能够快速运行几个命令，轻松创建虚拟交换机、虚拟机和磁盘驱动器。微软给你了命令，但最终还是你自己搭建了周围的逻辑，使一切无缝衔接。
- en: You might now see that it’s possible to build scripts on the fly that work,
    but by thinking ahead and adding conditional logic, your scripts can account for
    more situations.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能已经意识到，可以即时编写有效的脚本，但通过提前思考并添加条件逻辑，你的脚本可以应对更多情况。
- en: In the next chapter, you’ll take the VM you just created and automate deploying
    an operating system to it with little more than an ISO file.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将使用刚刚创建的虚拟机，自动化部署操作系统，几乎只需要一个ISO文件。
