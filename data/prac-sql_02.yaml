- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Creating Your First Database and Table
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 创建你的第一个数据库和表格
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: SQL is more than just a means for extracting knowledge from data. It’s also
    a language for *defining* the structures that hold data so we can organize *relationships*
    in the data. Chief among those structures is the table.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 不仅仅是从数据中提取知识的手段。它还是一种*定义*存储数据的结构的语言，使我们能够组织数据中的*关系*。其中最重要的结构就是表格。
- en: 'A table is a grid of rows and columns that store data. Each row holds a collection
    of columns, and each column contains data of a specified type: most commonly,
    numbers, characters, and dates. We use SQL to define the structure of a table
    and how each table might relate to other tables in the database. We also use SQL
    to extract, or *query*, data from tables.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 表格是一个由行和列组成的数据网格。每一行包含一组列，每一列包含一种指定类型的数据：最常见的是数字、字符和日期。我们使用 SQL 来定义表格的结构，以及每个表格如何与数据库中的其他表格相关联。我们还使用
    SQL 从表格中提取或*查询*数据。
- en: In this chapter, you’ll create your first database, add a table, and then insert
    several rows of data into the table using SQL in the pgAdmin interface. Then,
    you’ll use pgAdmin to view the results. Let’s start with a look at tables.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将创建你的第一个数据库，添加一个表格，然后使用 SQL 在 pgAdmin 界面中插入几行数据。接着，你将使用 pgAdmin 来查看结果。让我们先从表格开始。
- en: Understanding Tables
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解表格
- en: Knowing your tables is fundamental to understanding the data in your database.
    Whenever I start working with a fresh database, the first thing I do is look at
    the tables within. I look for clues in the table names and their column structure.
    Do the tables contain text, numbers, or both? How many rows are in each table?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 了解你的表格是理解数据库中数据的基础。每当我开始使用一个新的数据库时，我做的第一件事就是查看其中的表格。我通过表格名称和列结构寻找线索。表格是包含文本、数字还是两者兼有？每个表格有多少行？
- en: Next, I look at how many tables are in the database. The simplest database might
    have a single table. A full-bore application that handles customer data or tracks
    air travel might have dozens or hundreds. The number of tables tells me not only
    how much data I’ll need to analyze, but also hints that I should explore relationships
    among the data in each table.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我会看看数据库中有多少个表。最简单的数据库可能只有一个表。一个处理客户数据或追踪航空旅行的完整应用程序可能包含几十个或上百个表。表的数量不仅告诉我需要分析多少数据，还暗示着我应该探索各表之间的数据关系。
- en: 'Before you dig into SQL, let’s look at an example of what the contents of tables
    might look like. We’ll use a hypothetical database for managing a school’s class
    enrollment; within that database are several tables that track students and their
    classes. The first table, called `student_enrollment`, shows the students that
    are signed up for each class section:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在你深入研究 SQL 之前，让我们看一个表格内容的示例。我们将使用一个假设的数据库来管理学校的班级注册；在这个数据库中，有几个表格用来追踪学生和他们的课程。第一个表格叫做
    `student_enrollment`，显示了每个班级部分注册的学生：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This table shows that two students have signed up for `COMPSCI101`, and three
    have signed up for `ENG101`. But where are the details about each student and
    class? In this example, these details are stored in separate tables called `students`
    and `classes`, and those tables relate to this one. This is where the power of
    a *relational database* begins to show itself.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 该表显示了有两个学生注册了 `COMPSCI101` 课程，三个学生注册了 `ENG101` 课程。但是，关于每个学生和每门课程的详细信息在哪里呢？在这个例子中，这些细节存储在名为
    `students` 和 `classes` 的单独表格中，而这些表格与当前表格相关联。这就是*关系型数据库*开始展现其强大功能的地方。
- en: 'The first several rows of the `students` table include the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`students` 表的前几行包括以下内容：'
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `students` table contains details on each student, using the value in the
    `student_id` column to identify each one. That value acts as a unique *key* that
    connects both tables, giving you the ability to create rows such as the following
    with the `class_id` column from `student_enrollment` and the `first_name` and
    `last_name` columns from `students`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`students` 表格包含了每个学生的详细信息，使用 `student_id` 列中的值来标识每个学生。该值充当一个唯一的*键*，将两个表格连接起来，使你能够创建如下所示的行，包含
    `student_enrollment` 表中的 `class_id` 列以及 `students` 表中的 `first_name` 和 `last_name`
    列：'
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `classes` table would work the same way, with a `class_id` column and several
    columns of detail about the class. Database builders prefer to organize data using
    separate tables for each main *entity* the database manages in order to reduce
    redundant data. In the example, we store each student’s name and date of birth
    just once. Even if the student signs up for multiple classes—as Davis Hernandez
    did—we don’t waste database space entering his name next to each class in the
    `student_enrollment` table. We just include his student ID.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`classes` 表的工作方式也类似，包含一个 `class_id` 列和几个关于课程的详细信息列。数据库开发者喜欢使用单独的表来组织数据，每个表管理数据库中的一个主要
    *实体*，以减少冗余数据。在这个示例中，我们只存储每个学生的姓名和出生日期一次。即使学生报名参加了多门课程——就像 Davis Hernandez 一样——我们也不会在
    `student_enrollment` 表中每一门课程旁边重复输入他的名字，而是只包含他的学生 ID。'
- en: Given that tables are a core building block of every database, in this chapter
    you’ll start your SQL coding adventure by creating a table inside a new database.
    Then you’ll load data into the table and view the completed table.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于表是每个数据库的核心构建块，本章你将通过在新数据库中创建表开始你的 SQL 编程冒险。然后，你将向表中加载数据并查看完成的表。
- en: Creating a Database
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数据库
- en: The PostgreSQL program you installed in Chapter 1 is a *database management
    system*, a software package that allows you to define, manage, and query data
    stored in databases. A database is a collection of objects that includes tables,
    functions, and much more. When you installed PostgreSQL, it created a *database
    server*—an instance of the application running on your computer—that includes
    a default database called `postgres`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你在第 1 章安装的 PostgreSQL 程序是一个 *数据库管理系统*，一个软件包，允许你定义、管理和查询存储在数据库中的数据。数据库是一个包含表、函数等的对象集合。当你安装
    PostgreSQL 时，它创建了一个 *数据库服务器*——运行在你计算机上的应用实例——并包括一个名为 `postgres` 的默认数据库。
- en: 'According to the PostgreSQL documentation, the default `postgres` database
    is “meant for use by users, utilities and third-party applications” (see [https://www.postgresql.org/docs/current/app-initdb.html](https://www.postgresql.org/docs/current/app-initdb.html)).
    We’ll create a new database to use for the examples in the book rather than use
    the default, so we can keep objects related to a particular topic or application
    organized together. This is good practice: it helps avoid a pileup of tables in
    a single database that have no relation to each other, and it ensures that if
    your data will be used to power an application, such as a mobile app, then the
    app database will contain only relevant information.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 PostgreSQL 文档，默认的 `postgres` 数据库是“供用户、工具和第三方应用程序使用的”（参见 [https://www.postgresql.org/docs/current/app-initdb.html](https://www.postgresql.org/docs/current/app-initdb.html)）。我们将创建一个新的数据库来用于本书中的示例，而不是使用默认数据库，这样我们可以将与特定主题或应用程序相关的对象组织在一起。这是一个好习惯：它有助于避免在单一数据库中堆积没有关系的表，并确保如果你的数据将被用于支持应用程序，比如移动应用程序，那么应用程序的数据库只会包含相关信息。
- en: To create a database, you need just one line of SQL, shown in [Listing 2-1](#listing2-1),
    which we’ll run in a moment using pgAdmin. You can find this code, along with
    all the examples in this book, in the files you downloaded from GitHub via the
    link at [https://www.nostarch.com/practical-sql-2nd-edition/](https://www.nostarch.com/practical-sql-2nd-edition/).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个数据库，你只需要一行 SQL，如 [清单 2-1](#listing2-1) 所示，我们稍后将使用 pgAdmin 运行这行代码。你可以在通过
    [https://www.nostarch.com/practical-sql-2nd-edition/](https://www.nostarch.com/practical-sql-2nd-edition/)
    链接下载的 GitHub 文件中找到这段代码以及本书中的所有示例。
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 2-1: Creating a database named `analysis`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 2-1：创建名为 `analysis` 的数据库
- en: This statement creates a database named `analysis` on your server using default
    PostgreSQL settings. Note that the code consists of two keywords—`CREATE` and
    `DATABASE`—followed by the name of the new database. You end the statement with
    a semicolon, which signals the end of the command. You must end all PostgreSQL
    statements with a semicolon, as part of the ANSI SQL standard. In some circumstances
    your queries will work even if you omit the semicolon, but not always, so using
    the semicolon is a good habit to form.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句使用默认的 PostgreSQL 设置在你的服务器上创建一个名为 `analysis` 的数据库。请注意，代码由两个关键字组成——`CREATE`
    和 `DATABASE`——后面跟着新数据库的名称。你以分号结束该语句，表示命令的结束。你必须用分号结束所有 PostgreSQL 语句，这是 ANSI SQL
    标准的一部分。在某些情况下，即使你省略分号，查询也能正常工作，但并非总是如此，所以养成使用分号的好习惯是明智的。
- en: Executing SQL in pgAdmin
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 pgAdmin 中执行 SQL
- en: In Chapter 1, you installed the graphical administrative tool pgAdmin (if you
    didn’t, go ahead and do that now). For much of our work, you’ll use pgAdmin to
    run the SQL statements you write, known as *executing* the code. Later in the
    book in Chapter 18, I’ll show you how to run SQL statements in a terminal window
    using the PostgreSQL command line program `psql`, but getting started is a bit
    easier with a graphical interface.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在第1章中，你安装了图形化管理工具pgAdmin（如果没有，请现在安装）。在我们的大部分工作中，你将使用pgAdmin来执行你编写的SQL语句，称为*执行*代码。在本书的第18章，我将向你展示如何使用PostgreSQL命令行程序`psql`在终端窗口中执行SQL语句，但通过图形界面开始更为简单。
- en: 'We’ll use pgAdmin to run the SQL statement in [Listing 2-1](#listing2-1) that
    creates the database. Then, we’ll connect to the new database and create a table.
    Follow these steps:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用pgAdmin来执行[清单2-1](#listing2-1)中创建数据库的SQL语句。然后，我们将连接到新数据库并创建表。请按照以下步骤操作：
- en: Run PostgreSQL. If you’re using Windows, the installer sets PostgreSQL to launch
    every time you boot up. On macOS, you must double-click *Postgres.app* in your
    Applications folder (if you have an elephant icon in your menu bar, it’s already
    running).
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行PostgreSQL。如果你使用的是Windows，安装程序会将PostgreSQL设置为每次启动时自动启动。在macOS上，你必须双击应用程序文件夹中的*Postgres.app*（如果你在菜单栏中看到大象图标，那么它已经在运行了）。
- en: Launch pgAdmin. You’ll be prompted to enter the master password for pgAdmin
    you set the first time you launched the application.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动pgAdmin。系统会提示你输入首次启动应用程序时设置的pgAdmin主密码。
- en: As you did in Chapter 1, in the left vertical pane (the object browser) click
    the arrow to the left of the Servers node to show the default server. Depending
    on how you installed PostgreSQL, the default server may be named *localhost* or
    *PostgreSQL x*, where *x* is the version of the application. You may receive another
    password prompt. This prompt is for PostgreSQL, not pgAdmin, so enter the password
    you set for PostgreSQL during installation. You should see a brief message that
    pgAdmin is establishing a connection.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如你在第1章中所做的，在左侧垂直窗格（对象浏览器）中，点击服务器节点左侧的箭头，显示默认服务器。根据你安装PostgreSQL的方式，默认服务器可能命名为*localhost*或*PostgreSQL
    x*，其中*x*是应用程序的版本。你可能会收到另一个密码提示。这个提示是针对PostgreSQL的，而不是pgAdmin的，所以请输入你在安装PostgreSQL时设置的密码。你应该会看到pgAdmin正在建立连接的简短信息。
- en: In pgAdmin’s object browser, expand **Databases** and click `postgres` once
    to highlight it, as shown in [Figure 2-1](#figure2-1).![f02001](Images/f02001.png)
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在pgAdmin的对象浏览器中，展开**Databases**，点击一次`postgres`以突出显示它，如[图2-1](#figure2-1)所示。![f02001](Images/f02001.png)
- en: 'Figure 2-1: The default `postgres` database'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2-1：默认的`postgres`数据库
- en: Open the Query Tool by choosing **Tools**▶**Query Tool**.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择**工具**▶**查询工具**来打开查询工具。
- en: In the Query Editor pane (the top horizontal pane), enter the code from [Listing
    2-1](#listing2-1).
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在查询编辑器窗格（顶部水平窗格）中，输入[清单2-1](#listing2-1)中的代码。
- en: Click the **Execute/Refresh** icon (shaped like a right arrow) to execute the
    statement. PostgreSQL creates the database, and in the Output pane in the Query
    Tool under Messages you’ll see a notice indicating the query returned successfully,
    as shown in [Figure 2-2](#figure2-2).![f02002](Images/f02002.png)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**执行/刷新**图标（形状像右箭头）来执行语句。PostgreSQL将创建数据库，在查询工具的输出窗格中的消息部分，你会看到一条表示查询成功执行的通知，如[图2-2](#figure2-2)所示。![f02002](Images/f02002.png)
- en: 'Figure 2-2: Creating a database named `analysis`'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2-2：创建一个名为`analysis`的数据库
- en: To see your new database, right-click **Databases** in the object browser. From
    the pop-up menu, select **Refresh**, and the `analysis` database will appear in
    the list, as shown in [Figure 2-3](#figure2-3).
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看你的新数据库，在对象浏览器中右键点击**Databases**。从弹出菜单中选择**刷新**，然后`analysis`数据库将出现在列表中，如[图2-3](#figure2-3)所示。
- en: '![f02003](Images/f02003.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![f02003](Images/f02003.png)'
- en: 'Figure 2-3: The `analysis` database displayed in the object browser'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-3：在对象浏览器中显示的`analysis`数据库
- en: Good work! You now have a database called `analysis`, which you can use for
    the majority of the exercises in this book. In your own work, it’s generally a
    best practice to create a new database for each project to keep tables with related
    data together.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 干得不错！你现在拥有一个名为`analysis`的数据库，你可以使用它来进行本书中的大多数练习。在你自己的工作中，通常的最佳实践是为每个项目创建一个新的数据库，以便将相关数据的表格放在一起。
- en: Connecting to the analysis Database
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接到analysis数据库
- en: Before you create a table, you must ensure that pgAdmin is connected to the
    `analysis` database rather than to the default `postgres` database.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建表之前，你必须确保pgAdmin连接的是`analysis`数据库，而不是默认的`postgres`数据库。
- en: 'To do that, follow these steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，请按照以下步骤操作：
- en: Close the Query Tool by clicking the **X** at the far right of the tool pane.
    You don’t need to save the file when prompted.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击工具面板最右侧的**X**关闭查询工具。出现提示时，无需保存文件。
- en: In the object browser, click **analysis** once.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对象浏览器中，点击**分析**一次。
- en: Open a new Query Tool window, this time connected to the `analysis` database,
    by choosing **Tools**▶**Query Tool**.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择**工具**▶**查询工具**，打开一个新的查询工具窗口，并连接到`analysis`数据库。
- en: You should now see the label `analysis/postgres@localhost` at the top of the
    Query Tool window. (Again, instead of `localhost`, your version may show `PostgreSQL`.)
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你应该能在查询工具窗口顶部看到`analysis/postgres@localhost`的标签。（再次提醒，可能你的版本显示的不是`localhost`，而是`PostgreSQL`。）
- en: Now, any code you execute will apply to the `analysis` database.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，任何你执行的代码都将应用于`analysis`数据库。
- en: Creating a Table
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建表格
- en: As I mentioned, tables are where data lives and its relationships are defined.
    When you create a table, you assign a name to each *column* (sometimes referred
    to as a *field* or *attribute*) and assign each column a *data type*. These are
    the values the column will accept—such as text, integers, decimals, and dates—and
    the definition of the data type is one way SQL enforces the integrity of data.
    For example, a column defined as `date` will accept data in only one of several
    standard formats, such as `YYYY-MM-DD`. If you try to enter characters not in
    a date format, for instance, the word `peach`, you’ll receive an error.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如我所提到的，表格是数据存储和定义关系的地方。当你创建一个表格时，你需要为每个*列*（有时称为*字段*或*属性*）指定一个名称，并为每列指定一个*数据类型*。这些数据类型定义了该列可以接受的值——例如文本、整数、小数和日期——并且数据类型的定义是SQL用来确保数据完整性的一种方式。例如，定义为`date`的列只能接受某几种标准格式的数据，如`YYYY-MM-DD`。如果你尝试输入不符合日期格式的字符，比如单词`peach`，系统会报错。
- en: Data stored in a table can be accessed and analyzed, or queried, with SQL statements.
    You can sort, edit, and view the data, as well as easily alter the table later
    if your needs change.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在表格中的数据可以通过SQL语句进行访问和分析，或者查询。你可以对数据进行排序、编辑和查看，并且如果需求发生变化，之后也可以轻松地修改表格。
- en: Let’s make a table in the `analysis` database.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`analysis`数据库中创建一个表格。
- en: Using the CREATE TABLE Statement
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用CREATE TABLE语句
- en: 'For this exercise, we’ll use an often-discussed piece of data: teacher salaries.
    [Listing 2-2](#listing2-2) shows the SQL statement to create a table called `teachers`.
    Let’s review the code before you enter it into pgAdmin and execute it.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用一个常常讨论的数据：教师薪资。[列表 2-2](#listing2-2)展示了创建一个名为`teachers`的表格的SQL语句。在你将代码输入pgAdmin并执行之前，我们先来回顾一下这段代码。
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 2-2: Creating a table named `teachers` with six columns'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2-2：创建一个名为`teachers`的表格，包含六个列
- en: This table definition is far from comprehensive. For example, it’s missing several
    *constraints* that would ensure that columns that must be filled do indeed have
    data or that we’re not inadvertently entering duplicate values. I cover constraints
    in detail in Chapter 8, but in these early chapters I’m omitting them to focus
    on getting you started on exploring data.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表格定义远不完整。例如，它缺少了几个*约束*，这些约束能够确保必须填写的列确实包含数据，或者确保我们不会无意中输入重复的值。关于约束的详细内容，我将在第8章中讲解，但在这些早期章节中，我将它们省略，以便专注于帮助你开始探索数据。
- en: The code begins with the two SQL keywords `CREATE` and `TABLE` 1 that, together
    with the name `teachers`, signal PostgreSQL that the next bit of code describes
    a table to add to the database. Following an opening parenthesis, the statement
    includes a comma-separated list of column names along with their data types. For
    style purposes, each new line of code is on its own line and indented four spaces,
    which isn’t required but makes the code more readable.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 代码以两个SQL关键字`CREATE`和`TABLE`开始，1这两个关键字与名称`teachers`一起，告诉PostgreSQL接下来的代码描述的是要添加到数据库中的表格。在开括号后，语句包括一系列列名称及其数据类型，列名称和数据类型之间用逗号分隔。为了更好的可读性，每行新代码单独占一行并缩进四个空格，虽然这不是必需的，但它使代码更容易阅读。
- en: Each column name represents one discrete data element defined by a data type.
    The `id` column 2 is of data type `bigserial`, a special integer type that auto-increments
    every time you add a row to the table. The first row receives the value of `1`
    in the `id` column, the second row `2`, and so on. The `bigserial` data type and
    other serial types are PostgreSQL-specific implementations, but most database
    systems have a similar feature.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 每个列名代表一个由数据类型定义的独立数据元素。`id` 列的类型为 `bigserial`，这是一个特殊的自增整数类型，每当你向表中添加一行时，它会自动递增。第一行在
    `id` 列的值为 `1`，第二行为 `2`，以此类推。`bigserial` 数据类型以及其他序列类型是 PostgreSQL 特有的实现，但大多数数据库系统都有类似的功能。
- en: Next, we create columns for the teacher’s first name and last name and for the
    school where they teach 3. Each is of the data type `varchar`, a text column with
    a maximum length specified by the number in parentheses. We’re assuming that no
    one in the database will have a last name of more than 50 characters. Although
    this is a safe assumption, you’ll discover over time that exceptions will always
    surprise you.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们为教师的名字、姓氏以及他们所教学校创建列。每列的类型为 `varchar`，这是一种文本列，最大长度由括号中的数字指定。我们假设数据库中的每个姓氏都不会超过
    50 个字符。尽管这是一个安全的假设，但你会发现随着时间的推移，例外总是会让你吃惊。
- en: The teacher’s `hire_date` 4 is set to the data type `date`, and the `salary`
    column 5 is `numeric`. I’ll cover data types more thoroughly in Chapter 4, but
    this table shows some common examples of data types. The code block wraps up 6
    with a closing parenthesis and a semicolon.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 教师表的 `hire_date` 列的类型设置为 `date`，`salary` 列的类型为 `numeric`。数据类型的详细介绍将在第 4 章中讲解，但此表展示了一些常见的数据类型示例。代码块以闭合括号和分号结束。
- en: Now that you have a sense of how SQL looks, let’s run this code in pgAdmin.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经对 SQL 有了一些了解，让我们在 pgAdmin 中运行这段代码。
- en: Making the teachers Table
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建教师表
- en: 'You have your code and you’re connected to the database, so you can make the
    table using the same steps we did when we created the database:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经有了代码，并且连接到了数据库，所以可以使用与创建数据库时相同的步骤来创建表：
- en: Open the pgAdmin Query Tool (if it’s not open, click `analysis` once in pgAdmin’s
    object browser, and then choose **Tools**▶**Query Tool**).
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 pgAdmin 查询工具（如果没有打开，点击 pgAdmin 对象浏览器中的 `analysis`，然后选择 **Tools**▶**Query
    Tool**）。
- en: Copy the `CREATE TABLE` script from [Listing 2-2](#listing2-2) into the SQL
    Editor (or highlight the listing if you’ve elected to open the *Chapter_02.sql*
    file from GitHub with the Query Tool).
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 [Listing 2-2](#listing2-2) 中的 `CREATE TABLE` 脚本复制到 SQL 编辑器中（或者，如果你选择使用查询工具打开
    GitHub 上的 *Chapter_02.sql* 文件，直接高亮列出该内容）。
- en: Execute the script by clicking the **Execute/Refresh** icon (shaped like a right
    arrow).
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Execute/Refresh** 图标（右箭头形状）执行脚本。
- en: If all goes well, you’ll see a message in the pgAdmin Query Tool’s bottom output
    pane that reads `Query returned successfully with no result in 84 msec`. Of course,
    the number of milliseconds will vary depending on your system.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你将在 pgAdmin 查询工具的底部输出窗格中看到一条消息，内容为 `Query returned successfully with
    no result in 84 msec`。当然，毫秒数会根据你的系统有所不同。
- en: Now, find the table you created. Go back to the main pgAdmin window and, in
    the object browser, right-click **analysis** and choose **Refresh**. Choose **Schemas**▶**public**▶**Tables**
    to see your new table, as shown in [Figure 2-4](#figure2-4).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，找到你创建的表。返回到主 pgAdmin 窗口，在对象浏览器中右击 **analysis** 并选择 **Refresh**。选择 **Schemas**▶**public**▶**Tables**
    查看你的新表，如[图 2-4](#figure2-4)所示。
- en: '![f02004](Images/f02004.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![f02004](Images/f02004.png)'
- en: 'Figure 2-4: The `teachers` table in the object browser'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-4：对象浏览器中的 `teachers` 表
- en: Expand the `teachers` table node by clicking the arrow to the left of its name.
    This reveals more details about the table, including the column names, as shown
    in [Figure 2-5](#figure2-5). Other information appears as well, such as indexes,
    triggers, and constraints, but I’ll cover those in later chapters. Clicking the
    table name and then selecting the **SQL** menu in the pgAdmin workspace will display
    SQL statements that would be used to re-create the `teachers` table (note that
    this display includes additional default notations that were implicitly added
    when you created the table).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 `teachers` 表名称左侧的箭头展开该表节点。这将显示更多关于该表的详细信息，包括列名称，如[图 2-5](#figure2-5)所示。还会显示其他信息，如索引、触发器和约束，但这些内容将在后续章节中讲解。点击表名称后，在
    pgAdmin 工作区选择 **SQL** 菜单，将显示用于重新创建 `teachers` 表的 SQL 语句（注意，这些显示包括在创建表时隐式添加的额外默认标记）。
- en: '![f02005](Images/f02005.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![f02005](Images/f02005.png)'
- en: 'Figure 2-5: Table details for `teachers`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-5：`teachers` 表的详细信息
- en: Congratulations! So far, you’ve built a database and added a table to it. The
    next step is to add data to the table so you can write your first query.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！到目前为止，你已经构建了一个数据库并向其中添加了一个表。下一步是向表中添加数据，以便你可以编写第一个查询。
- en: Inserting Rows into a Table
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向表中插入行
- en: You can add data to a PostgreSQL table in several ways. Often, you’ll work with
    a large number of rows, so the easiest method is to import data from a text file
    or another database directly into a table. But to get started, we’ll add a few
    rows using an `INSERT INTO ... VALUES` statement that specifies the target columns
    and the data values. Then we’ll view the data in its new home.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过多种方式将数据添加到 PostgreSQL 表中。通常，你会处理大量的行，因此最简单的方法是从文本文件或其他数据库直接将数据导入表中。但是，为了开始，我们将使用
    `INSERT INTO ... VALUES` 语句添加几行数据，该语句指定了目标列和数据值。接下来，我们将查看数据在新位置的表现。
- en: Using the INSERT Statement
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 INSERT 语句
- en: To insert some data into the table, you first need to erase the `CREATE TABLE`
    statement you just ran. Then, following the same steps you did to create the database
    and table, copy the code in [Listing 2-3](#listing2-3) into your pgAdmin Query
    Tool (or, if you opened the *Chapter_02.sql* file from GitHub in the Query Tool,
    highlight this listing).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要向表中插入数据，首先需要删除你刚刚运行的 `CREATE TABLE` 语句。然后，按照你创建数据库和表时的相同步骤，将 [列表 2-3](#listing2-3)
    中的代码复制到你的 pgAdmin 查询工具中（或者，如果你在查询工具中打开了 *Chapter_02.sql* 文件，可以选中这个列表）。
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 2-3: Inserting data into the `teachers` table'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2-3：将数据插入 `teachers` 表
- en: 'This code block inserts names and data for six teachers. Here, the PostgreSQL
    syntax follows the ANSI SQL standard: after the `INSERT INTO` keywords is the
    name of the table, and in parentheses are the columns to be filled 1. In the next
    row are the `VALUES` keyword and the data to insert into each column in each row
    2. You need to enclose the data for each row in a set of parentheses, and inside
    each set of parentheses, use a comma to separate each column value. The order
    of the values must also match the order of the columns specified after the table
    name. Each row of data ends with a comma, except the last row, which ends the
    entire statement with a semicolon 3.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码插入了六个教师的姓名和数据。这里，PostgreSQL 语法遵循 ANSI SQL 标准：在 `INSERT INTO` 关键字之后是表的名称，括号内是要填充的列
    1。在下一行是 `VALUES` 关键字以及每一行每个列的插入数据 2。你需要将每一行的数据用一对括号括起来，并在括号内使用逗号分隔每个列值。数据的顺序也必须与表名后指定的列的顺序相匹配。每行数据以逗号结尾，除了最后一行，它以分号结尾，结束整个语句
    3。
- en: 'Notice that certain values that we’re inserting are enclosed in single quotes,
    but some are not. This is a standard SQL requirement. Text and dates require quotes;
    numbers, including integers and decimals, don’t require quotes. I’ll highlight
    this requirement as it comes up in examples. Also, note the date format we’re
    using: a four-digit year is followed by the month and date, and each part is joined
    by a hyphen. This is the international standard for date formats; using it will
    help you avoid confusion. (Why is it best to use the format `YYYY-MM-DD`? Check
    out [https://xkcd.com/1179/](https://xkcd.com/1179/) to see a great comic about
    it.) PostgreSQL supports many additional date formats, and I’ll use several in
    examples.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到我们插入的某些值被单引号括起来，但有些则没有。这是 SQL 的标准要求。文本和日期需要使用引号；数字，包括整数和小数，则不需要引号。我会在示例中突出显示这一要求。另外，请注意我们使用的日期格式：四位数的年份后跟月份和日期，每个部分之间用连字符连接。这是国际标准的日期格式；使用它可以帮助你避免混淆。（为什么最好使用
    `YYYY-MM-DD` 格式？可以查看 [https://xkcd.com/1179/](https://xkcd.com/1179/) 了解更多相关漫画。）PostgreSQL
    支持许多额外的日期格式，我会在示例中使用几种。
- en: You might be wondering about the `id` column, which is the first column in the
    table. When you created the table, your script specified that column to be the
    `bigserial` data type. So as PostgreSQL inserts each row, it automatically fills
    the `id` column with an auto-incrementing integer. I’ll cover that in detail in
    Chapter 4 when I discuss data types.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会对 `id` 列感到好奇，它是表中的第一列。当你创建表时，你的脚本指定了该列为 `bigserial` 数据类型。因此，当 PostgreSQL
    插入每一行时，它会自动用自增的整数填充 `id` 列。这个问题我将在第 4 章详细讨论，当时我会讲解数据类型。
- en: 'Now, run the code. This time, the message area of the Query Tool should say
    this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行代码。这时，查询工具的消息区域应该显示如下内容：
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The last of the two numbers after the `INSERT` keyword reports the number of
    rows inserted: `6`. The first number is an unused legacy PostgreSQL value that
    is returned only to maintain wire protocol; you can safely ignore it.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`INSERT`关键字后面的两个数字中的最后一个表示插入的行数：`6`。第一个数字是一个未使用的遗留PostgreSQL值，仅为保持网络协议而返回；你可以安全地忽略它。'
- en: Viewing the Data
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看数据
- en: You can take a quick look at the data you just loaded into the `teachers` table
    using pgAdmin. In the object browser, locate the table and right-click. In the
    pop-up menu, choose **View/Edit Data**▶**All Rows**. As [Figure 2-6](#figure2-6)
    shows, you’ll see the six rows of data in the table with each column filled by
    the values in the SQL statement.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过pgAdmin快速查看刚刚加载到`teachers`表中的数据。在对象浏览器中，找到该表并右击。在弹出菜单中，选择**查看/编辑数据**▶**所有行**。正如[图
    2-6](#figure2-6)所示，你会看到表中六行数据，每列都由SQL语句中的值填充。
- en: '![f02006](Images/f02006.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![f02006](Images/f02006.png)'
- en: 'Figure 2-6: Viewing table data directly in pgAdmin'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-6：直接在pgAdmin中查看表数据
- en: Notice that even though you didn’t insert a value for the `id` column, each
    teacher has an ID number assigned. Also, each column header displays the data
    type you defined when creating the table. (Note that in this example, `varchar`,
    fully expanded in PostgreSQL, is `character varying`.) Seeing the data type in
    the results will help later when you decide how to write queries that handle data
    differently depending on its type.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，尽管你没有为`id`列插入值，但每个教师都有分配的ID号码。此外，每个列标题会显示你在创建表时定义的数据类型。（注意，在这个例子中，PostgreSQL中完全展开的`varchar`是`character
    varying`。）在查看结果时看到数据类型会帮助你在后续编写查询时，依照数据类型来处理数据。
- en: You can view data using the pgAdmin interface in a few ways, but we’ll focus
    on writing SQL to handle those tasks.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过pgAdmin界面以几种方式查看数据，但我们将重点介绍编写SQL来处理这些任务。
- en: Getting Help When Code Goes Bad
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码出错时寻求帮助
- en: 'There may be a universe where code always works, but unfortunately, we haven’t
    invented a machine capable of transporting us there. Errors happen. Whether you
    make a typo or mix up the order of operations, computer languages are unforgiving
    about syntax. For example, if you forget a comma in the code in [Listing 2-3](#listing2-3),
    PostgreSQL squawks back an error:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 也许有一个宇宙，代码总是能正常工作，但不幸的是，我们还没有发明出能够把我们带到那个地方的机器。错误是不可避免的。无论是打错字还是搞错了运算顺序，计算机语言在语法方面非常苛刻。例如，如果你忘记了在[列表
    2-3](#listing2-3)中的代码中加逗号，PostgreSQL会返回一个错误：
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Fortunately, the error message hints at what’s wrong and where: we made a syntax
    error near an open parenthesis on line 4\. But sometimes error messages can be
    more obscure. In that case, you do what the best coders do: a quick internet search
    for the error message. Most likely, someone else has experienced the same issue
    and might know the answer. I’ve found that I get the best search results by entering
    the error message verbatim in the search engine, specifying the name of my database
    manager, and limiting results to more recent items to avoid using outdated information.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，错误信息给出了问题的提示和位置：我们在第4行的左括号附近犯了一个语法错误。但有时，错误信息可能更为晦涩。在这种情况下，你可以像最优秀的程序员一样：快速在互联网上搜索错误信息。很可能其他人也遇到过同样的问题，并且可能知道答案。我发现，通过在搜索引擎中逐字输入错误信息，并指定我的数据库管理工具名称，再将结果限制为更新的项目，能获得最佳的搜索结果，从而避免使用过时的信息。
- en: Formatting SQL for Readability
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为了可读性而格式化SQL
- en: 'SQL requires no special formatting to run, so you’re free to use your own psychedelic
    style of uppercase, lowercase, and random indentations. But that won’t win you
    any friends when others need to work with your code (and sooner or later someone
    will). For the sake of readability and being a good coder, here are several generally
    accepted conventions:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: SQL执行时不需要特殊格式化，因此你可以随意使用大写、小写和随机缩进的迷幻风格。但当别人需要与你的代码合作时（迟早会有这种情况），这种风格可不会为你赢得朋友。为了可读性并成为一个好程序员，以下是几条普遍接受的约定：
- en: Uppercase SQL keywords, such as `SELECT`. Some SQL coders also uppercase the
    names of data types, such as `TEXT` and `INTEGER`. I use lowercase characters
    for data types in this book to separate them in your mind from keywords, but you
    can uppercase them if desired.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用大写字母编写SQL关键字，如`SELECT`。有些SQL程序员也将数据类型的名称写成大写，如`TEXT`和`INTEGER`。在本书中，我使用小写字母来表示数据类型，以便与你脑海中的关键字区分开来，但如果你喜欢，也可以将它们写成大写字母。
- en: Avoid camel case and instead use `lowercase_and_underscores` for object names,
    such as tables and column names (see more details about case in Chapter 8).
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用驼峰命名法，而应使用`lowercase_and_underscores`来命名对象，例如表和列名（关于大小写的更多细节将在第8章中介绍）。
- en: Indent clauses and code blocks for readability using either two or four spaces.
    Some coders prefer tabs to spaces; use whichever works best for you or your organization.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了提高可读性，使用两个或四个空格缩进子句和代码块。一些程序员偏好使用制表符而非空格；你可以根据自己的需要或你所在组织的规范来选择使用哪种方式。
- en: We’ll explore other SQL coding conventions as we go through the book, but these
    are the basics.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将探索其他SQL编码约定，但这些是基础知识。
- en: Wrapping Up
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'You accomplished quite a bit in this chapter: you created a database and a
    table and then loaded data into it. You’re on your way to adding SQL to your data
    analysis toolkit! In the next chapter, you’ll use this set of teacher data to
    learn the basics of querying a table using `SELECT`.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你完成了相当多的内容：你创建了一个数据库和一个表，并将数据加载到其中。你已经开始将SQL添加到数据分析工具包中了！在下一章中，你将使用这组教师数据来学习如何使用`SELECT`查询表的基本知识。
