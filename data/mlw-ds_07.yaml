- en: '**7**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**7**'
- en: '**EVALUATING MALWARE DETECTION SYSTEMS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**评估恶意软件检测系统**'
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: In the previous chapter, you learned how machine learning can help you build
    malware detectors. In this chapter, you learn the basic concepts necessary to
    predict how malware detection systems will perform. The ideas you learn here will
    prove crucial in improving any malware detection system you build, because without
    a way to measure your system’s performance, you will not know how to improve it.
    Please note that while this chapter is dedicated to introducing basic evaluation
    concepts, [Chapter 8](ch08.xhtml#ch08) continues this thread, introducing essential
    evaluation concepts like cross-validation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了机器学习如何帮助你构建恶意软件检测器。在本章中，你将学习预测恶意软件检测系统性能所需的基本概念。你在这里学到的概念对于改进你构建的任何恶意软件检测系统至关重要，因为如果没有衡量系统性能的方法，你将无法知道如何改进它。请注意，虽然本章致力于介绍基本的评估概念，[第八章](ch08.xhtml#ch08)将继续这一话题，介绍诸如交叉验证等重要评估概念。
- en: First, I introduce the basic ideas behind detection accuracy evaluation, and
    then I introduce more advanced ideas concerning the environment in which you deploy
    your system when evaluating its performance. To do this, I walk you through an
    evaluation of a hypothetical malware detection system.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我介绍了检测准确性评估的基本概念，然后我介绍了在评估系统性能时，关于你部署系统的环境的更高级的概念。为此，我将带你通过一个假设的恶意软件检测系统的评估。
- en: '**Four Possible Detection Outcomes**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**四种可能的检测结果**'
- en: Suppose you run a malware detection system on a software binary and get the
    system’s “opinion” about whether the binary is malicious or benign. As illustrated
    in [Figure 7-1](ch07.xhtml#ch07fig1), four possible outcomes may occur.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你在一个软件二进制文件上运行恶意软件检测系统，并得到系统关于该二进制文件是否恶意的“判断”。如[图 7-1](ch07.xhtml#ch07fig1)所示，可能出现四种结果。
- en: '![image](../images/f0120-01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0120-01.jpg)'
- en: '*Figure 7-1: The four possible detection outcomes*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-1：四种可能的检测结果*'
- en: 'These outcomes can be defined as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些结果可以定义如下：
- en: '**True positive** The binary is malware and the system says it is malware.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**真阳性** 二进制文件是恶意软件，系统说它是恶意软件。'
- en: '**False negative** The binary is malware and the system says it’s not malware.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**假阴性** 二进制文件是恶意软件，但系统说它不是恶意软件。'
- en: '**False positive** The binary is not malware and the system says it is malware.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**假阳性** 二进制文件不是恶意软件，但系统说它是恶意软件。'
- en: '**True negative** The binary is not malware and the system says it’s not malware.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**真阴性** 二进制文件不是恶意软件，系统也说它不是恶意软件。'
- en: 'As you can see, there are two scenarios in which your malware detection system
    can produce inaccurate results: false negatives and false positives. In practice,
    true positive and true negative results are what we desire, but they are often
    difficult to obtain.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，恶意软件检测系统可能产生不准确结果的两种情况：假阴性和假阳性。实际上，真阳性和真阴性结果是我们希望得到的，但通常很难获得。
- en: You’ll see these terms used throughout this chapter. In fact, most of detection
    evaluation theory is built on this simple vocabulary.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在本章中看到这些术语。事实上，大多数检测评估理论都是建立在这一简单词汇基础上的。
- en: '***True and False Positive Rates***'
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***真阳性和假阳性率***'
- en: Now suppose you want to test the detection system’s accuracy using a set of
    benignware and malware. You can run the detector on each binary and keep count
    of which of the four possible outcomes the detector gives you over the entire
    test set. At this point, you need some summary statistics to give you an overall
    sense of the system’s accuracy (that is, how likely it is that your system will
    generate false positives or false negatives).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设你想使用一组良性软件和恶意软件来测试检测系统的准确性。你可以在每个二进制文件上运行检测器，并记录整个测试集中检测器给出的四种可能结果。在这一点上，你需要一些总结统计量，以便整体了解系统的准确性（即，系统生成假阳性或假阴性的可能性有多大）。
- en: One such summary statistic is the *true positive rate* of the detection system,
    which you can calculate by dividing the number of true positives on your test
    set by the total number of malware samples in your test set. Because this calculates
    the percentage of malware samples your system is able to detect, it measures your
    system’s ability to recognize malware when it “sees” malware.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个总结统计量是检测系统的*真阳性率*，你可以通过将测试集中真阳性的数量除以测试集中恶意软件样本的总数来计算它。因为这计算了系统能够检测到的恶意软件样本的百分比，因此它衡量了系统在“看到”恶意软件时识别恶意软件的能力。
- en: However, simply knowing that your detection system will raise alarms when it
    sees malware is insufficient to evaluate its accuracy. For example, if you only
    used the true positive rate as an evaluation criterion, a simple function that
    says “yes, this is malware” on all files would yield a perfect true positive rate.
    The real test of a detection system is whether or not it says “yes, this is malware”
    when it sees malware and “no, this is not malware” when it sees benignware.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仅仅知道检测系统在看到恶意软件时会触发警报，仍然不足以评估其准确性。例如，如果你只使用真正正例率作为评估标准，一个简单的函数，针对所有文件都说“是的，这是恶意软件”，将会产生一个完美的真正正例率。检测系统的真正考验在于它是否在看到恶意软件时说“是的，这是恶意软件”，而在看到良性软件时说“不是，这不是恶意软件”。
- en: To measure a system’s ability to discern whether something is not malware, you
    also need to measure the system’s *false positive rate*, which is the rate at
    which your system issues a malware alarm when it sees benignware. You can calculate
    your system’s false positive rate by dividing the number of benign samples the
    system flags as malware by the total number of benign samples tested.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了衡量一个系统判断某个文件是否为恶意软件的能力，你还需要衡量系统的*假正例率*，即系统在看到良性软件时错误地触发恶意软件警报的频率。你可以通过将系统标记为恶意软件的良性样本数量除以测试的所有良性样本的总数来计算系统的假正例率。
- en: '***Relationship Between True and False Positive Rates***'
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***真正正例率与假正例率之间的关系***'
- en: When designing a detection system, you want to keep the false positive rate
    as low as possible while keeping the true positive rate as high as possible. Unless
    you build a truly perfect malware detection system that is always right (which
    is really an impossibility given the evolving nature of malware), there will always
    be tension between the desire for a high true positive and the desire for a low
    false positive rate.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计一个检测系统时，你希望尽可能降低假正例率，同时尽可能提高真正正例率。除非你构建一个真正完美的恶意软件检测系统，它永远不会出错（但考虑到恶意软件的不断演化，这实际上是不可能的），否则在追求高真正正例率和低假正例率之间总会存在矛盾。
- en: To see why this is the case, imagine a detection system that, before deciding
    whether or not a binary is malware, adds up all the evidence that the binary is
    malware to create a *suspiciousness score* for the binary. Let’s call this hypothetical
    suspiciousness-score-generating system MalDetect. [Figure 7-2](ch07.xhtml#ch07fig2)
    shows an example of the values that MalDetect might output for 12 sample binaries,
    where the circles represent individual software binaries. The further to the right
    a binary, the higher the suspiciousness score given by MalDetect.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解为什么会这样，假设有一个检测系统，在决定某个二进制文件是否是恶意软件之前，首先会将所有表明该二进制文件是恶意软件的证据加起来，从而为该二进制文件生成一个*可疑性评分*。我们将这个假设的可疑性评分生成系统称为MalDetect。[图
    7-2](ch07.xhtml#ch07fig2)展示了MalDetect可能为12个示例二进制文件输出的值，其中圆圈代表各个软件二进制文件。二进制文件距离右侧越远，MalDetect给出的可疑性评分越高。
- en: '![image](../images/f0121-01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0121-01.jpg)'
- en: '*Figure 7-2: Suspiciousness scores output by the hypothetical MalDetect system
    for individual software binaries*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-2：假设的MalDetect系统为个别软件二进制文件输出的可疑性评分*'
- en: Suspiciousness scores are informative, but in order to calculate MalDetect’s
    true positive rate and false positive rate on our files, we need to convert MalDetect’s
    suspiciousness scores to “yes” or “no” answers regarding whether or not a given
    software binary is malicious. To do this, we use a threshold rule. For example,
    we decide that if the suspiciousness score is greater or equal to some number,
    the binary in question raises a malware alarm. If the score is lower than the
    threshold, it doesn’t.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 可疑性评分具有信息性，但为了计算MalDetect在我们文件上的真正正例率和假正例率，我们需要将MalDetect的可疑性评分转换为关于某个软件二进制文件是否为恶意软件的“是”或“否”答案。为此，我们使用一个阈值规则。例如，我们决定，如果可疑性评分大于或等于某个数字，则该二进制文件会触发恶意软件警报。如果评分低于阈值，则不会触发。
- en: 'Such a threshold rule is the standard way to convert a suspiciousness score
    into a binary detection choice, but where should we set the threshold? The problem
    is that there is no right answer. [Figure 7-3](ch07.xhtml#ch07fig3) shows the
    conundrum: the higher we set the threshold, the less likely we are to get false
    positives, but the more likely we are to get false negatives.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这种阈值规则是将可疑性评分转换为二进制检测选择的标准方法，但我们应该将阈值设置在哪里呢？问题在于没有正确答案。[图 7-3](ch07.xhtml#ch07fig3)展示了这一困境：我们设置的阈值越高，假正例的可能性越低，但假负例的可能性则越高。
- en: '![image](../images/f0122-01.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0122-01.jpg)'
- en: '*Figure 7-3: An illustration of the relationship between false positive rate
    and true positive rate when deciding on a threshold value*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-3：决定阈值时假阳性率与真阳性率之间关系的示意图*'
- en: For example, let’s consider the leftmost threshold shown in [Figure 7-3](ch07.xhtml#ch07fig3),
    where binaries to the left of the threshold are classified as benign and binaries
    to its right are classified as malware. Because this threshold is low, we get
    a great true positive rate (classifying 100 percent of the malware samples correctly)
    but a terrible false positive rate (falsely classifying 33 percent of the benign
    samples as malicious).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们考虑[图7-3](ch07.xhtml#ch07fig3)中显示的最左侧阈值，在这个阈值左侧的二进制文件被分类为良性，而右侧的则被分类为恶意软件。由于这个阈值较低，我们得到了很高的真阳性率（正确分类了100%的恶意软件样本），但假阳性率却很差（错误地将33%的良性样本分类为恶意）。
- en: Our intuition might be to increase the threshold so that only samples with a
    higher suspiciousness score are deemed to be malware. Such a solution is given
    by the middle threshold in [Figure 7-3](ch07.xhtml#ch07fig3). Here, the false
    positive rate drops to 0.17, but unfortunately the true positive rate drops as
    well, to 0.83\. If we continue to move the threshold to the right, as shown by
    the rightmost threshold, we eliminate any false positives, but detect only 50
    percent of the malware.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的直觉可能是提高阈值，使只有具有较高可疑性得分的样本才会被认为是恶意软件。这种解决方案由[图7-3](ch07.xhtml#ch07fig3)中的中间阈值给出。在这里，假阳性率下降到0.17，但不幸的是，真阳性率也下降到0.83。如果我们继续将阈值向右移动，如最右侧的阈值所示，我们消除了所有假阳性，但只检测到50%的恶意软件。
- en: As you can see, there is no such thing as a perfect threshold. A detection threshold
    that yields a low false positive rate (good) will tend to miss more malware, yielding
    a low true positive rate (bad). Conversely, using a detection threshold that has
    a high true positive rate (good) will also increase the false positive rate (bad).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，实际上并不存在完美的阈值。一个能够产生低假阳性率（好）的检测阈值通常会漏掉更多的恶意软件，从而导致较低的真阳性率（不好）。相反，使用一个具有较高真阳性率（好）的检测阈值也会提高假阳性率（不好）。
- en: '***ROC Curves***'
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***ROC曲线***'
- en: The tradeoff between the true positive rate and false positive rate of detection
    systems is a universal problem for all detectors, not just malware detectors.
    Engineers and statisticians have thought long and hard about this phenomenon and
    come up with the *Receiver Operating Characteristic (ROC)* curve to describe and
    analyze it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 检测系统的真阳性率与假阳性率之间的权衡是所有检测器面临的普遍问题，不仅仅是恶意软件检测器。工程师和统计学家经过长时间的思考，提出了*接收器操作特性（ROC）*曲线来描述和分析这一现象。
- en: '**NOTE**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you’re confused by the phrase Receiver Operating Characteristic, don’t
    worry about it—this phrase* is *confusing and pertains to the context in which
    ROC curves were originally developed, which is radar-based detection of physical
    objects.*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你对“接收器操作特性”（Receiver Operating Characteristic）这个词感到困惑，不用担心——这个词的确令人困惑，它与ROC曲线最初被开发时的背景有关，即基于雷达的物体探测。*'
- en: ROC curves characterize a detection system by plotting false positive rates
    against their associated true positive rates at various threshold settings. This
    helps us evaluate the tradeoff between lower false positive rates and higher true
    positive rates, and in doing so determine the “best” threshold for our situation.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: ROC曲线通过绘制不同阈值设置下的假阳性率与其相关的真阳性率，来表征检测系统。这有助于我们评估假阳性率与真阳性率之间的权衡，从而确定适合我们情况的“最佳”阈值。
- en: For example, for our hypothetical MalDetect system from [Figure 7-3](ch07.xhtml#ch07fig3),
    the system’s true positive rate is 0.5 when its false positive rate is 0 (low
    threshold), and the system’s true positive rate is 1.00 when the false positive
    rate is 0.33 (high threshold).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，针对我们假设的MalDetect系统，在[图7-3](ch07.xhtml#ch07fig3)中，当假阳性率为0时（低阈值），系统的真阳性率为0.5；当假阳性率为0.33时（高阈值），系统的真阳性率为1.00。
- en: '[Figure 7-4](ch07.xhtml#ch07fig4) shows how this works in more detail.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[图7-4](ch07.xhtml#ch07fig4)展示了这个过程的更详细情况。'
- en: '![image](../images/f0123-01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0123-01.jpg)'
- en: '*Figure 7-4: An illustration of what ROC curves mean and how they are constructed*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-4：ROC曲线的含义及其构建方式的示意图*'
- en: To build the ROC curve, we start with the three thresholds used in [Figure 7-3](ch07.xhtml#ch07fig3)
    and plot their resulting false and true positive rates, shown in the left half
    of [Figure 7-3](ch07.xhtml#ch07fig3). The plot on the right of [Figure 7-4](ch07.xhtml#ch07fig4)
    shows the same thing, but for all possible thresholds. As you can see, the higher
    the false positive rates, the higher the true positive rates. Similarly, the lower
    the false positive rates, the lower the true positive rates.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建ROC曲线，我们从[图7-3](ch07.xhtml#ch07fig3)中使用的三个阈值开始，绘制它们产生的假阳性率和真阳性率，这些数据展示在[图7-3](ch07.xhtml#ch07fig3)的左半部分。[图7-4](ch07.xhtml#ch07fig4)右侧的图显示了相同的内容，但涵盖了所有可能的阈值。正如你所看到的，假阳性率越高，真阳性率也越高。同样，假阳性率越低，真阳性率也越低。
- en: The “curve” of the ROC curve is a line within the two-dimensional ROC plot that
    represents how we think our detection system will do on its true positive rate
    over all possible false positive values, and how we think our detection system
    will do on its false positive rate over all possible true positive values. There
    are multiple ways of generating such a curve, but that goes beyond the scope of
    this book.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: ROC曲线的“曲线”是二维ROC图中的一条线，表示我们认为检测系统在所有可能的假阳性值下的真阳性率表现，以及我们认为检测系统在所有可能的真阳性值下的假阳性率表现。生成这种曲线的方法有很多，但超出了本书的范围。
- en: One simple method, however, is to try many threshold values, observe the corresponding
    false and true positive rates, plot them, and connect the dots using a line. This
    connected line, shown in the right plot of [Figure 7-4](ch07.xhtml#ch07fig4),
    becomes our ROC curve.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一种简单的方法是尝试许多阈值，观察相应的假阳性率和真阳性率，绘制它们并用线连接这些点。这个连接的线，如[图7-4](ch07.xhtml#ch07fig4)右侧的图所示，便是我们的ROC曲线。
- en: '**Considering Base Rates in Your Evaluation**'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**在评估中考虑基准率**'
- en: 'As you’ve seen, ROC curves can tell you how your system will perform in terms
    of the rate at which it calls malicious binaries malicious (true positive rate)
    and the rate at which it calls benign binaries malicious (false positive rate).
    However, ROC curves will not tell you the *percentage* of your system’s alarms
    that will be true positives, which we call the *precision* of the system. The
    precision of a system is related to the percentage of binaries the system encounters
    that are actually malware, which we call the *base rate*. Here’s a breakdown of
    each term:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，ROC曲线可以告诉你系统在将恶意二进制文件判定为恶意的速率（真阳性率）和将无害二进制文件判定为恶意的速率（假阳性率）方面的表现。然而，ROC曲线并不能告诉你系统报警中有多少比例会是实际的真阳性，这就是我们所说的系统的*精确度*。系统的精确度与系统遇到的二进制文件中实际是恶意软件的比例相关，这就是我们所说的*基准率*。下面是每个术语的详细解释：
- en: '**Precision** The percentage of system detection alarms that are true positives
    (meaning that they are detections of actual malware). In other words, *precision*
    is the detection system’s number of *true positives / (true positives + false
    positives)* when tested against some set of binaries.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**精确度** 系统检测报警中真实阳性（即实际检测到的恶意软件）所占的比例。换句话说，*精确度*是检测系统的*真实阳性 /（真实阳性 + 假阳性）*，当它在一些二进制文件集上进行测试时的表现。'
- en: '**Base rate** The percentage of the data fed to the system that has the quality
    we are looking for. In our case, *base rate* refers to the percentage of binaries
    that are *actually malware*.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**基准率** 系统接收到的数据中符合我们需求的质量比例。在我们的例子中，*基准率*指的是*实际恶意软件*的二进制文件所占的百分比。'
- en: We discuss how these two metrics are related in the next section.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节讨论这两个指标之间的关系。
- en: '***How Base Rate Affects Precision***'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***基准率如何影响精确度***'
- en: Although a detection system’s true and false positive rates do not change when
    the base rate changes, the system’s precision is affected by changes in the malware
    base rate—often dramatically. To see why this is true, let’s consider the following
    two cases.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管检测系统的真阳性率和假阳性率在基准率变化时不会改变，但系统的精确度会受到恶意软件基准率变化的影响——通常影响非常显著。为了理解这一点，我们来看以下两个案例。
- en: Suppose the false positive rate of MalDetect is 1 percent and the true positive
    rate is 100 percent. Now suppose we set MalDetect loose on a network that we know
    upfront has no malware on it (perhaps the network has just been created from scratch
    in a laboratory). Because we know in advance there is no malware on the network,
    every alarm the MalDetect throws will by definition be a false positive, because
    the only binaries that MalDetect encounters will be benignware. In other words,
    precision will be 0 percent.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 假设MalDetect的假阳性率为1%，真阳性率为100%。现在假设我们将MalDetect部署在一个我们已经知道没有恶意软件的网络上（可能这个网络刚刚在实验室中创建）。因为我们事先知道网络中没有恶意软件，所以MalDetect发出的每一个警报都必定是一个假阳性，因为MalDetect遇到的唯一二进制文件将是良性软件。换句话说，精度将是0%。
- en: 'In contrast, if we run MalDetect on a dataset composed of entirely malware,
    none of its alarms will ever be false positives: there simply will never be an
    opportunity for MalDetect to generate a false positive since there is no benignware
    in the software dataset. Therefore, precision will be 100 percent.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，如果我们将MalDetect运行在一个完全由恶意软件组成的数据集上，那么它的警报将永远不会是假阳性：由于数据集中没有良性软件，MalDetect永远没有机会产生假阳性。因此，精度将是100%。
- en: In both of these extreme cases, the base rates have a huge impact on MalDetect’s
    precision, or the probability that its alarm is a false positive.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种极端情况下，基本比率对MalDetect的精度产生了巨大影响，或者说，它的警报是误报的概率。
- en: '***Estimating Precision in a Deployment Environment***'
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***在部署环境中估算精度***'
- en: 'You now know that depending on the proportion of malware in a test dataset
    (base rate), your system will yield very different precision values. What if you
    want to estimate the precision your system will have based on an estimate of the
    base rate of the environment in which you deploy it? All you have to do is use
    your deployment environment’s estimated base rate to estimate the variables in
    the precision formula: *true positives / (true positives + false positives)*.
    You’ll need three numbers:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道，根据测试数据集中恶意软件的比例（基本比率），你的系统将产生非常不同的精度值。如果你想根据你部署环境中基本比率的估计来估算系统的精度，你只需使用你部署环境的估计基本比率来估算精度公式中的变量：*真阳性
    / (真阳性 + 假阳性)*。你需要三个数字：
- en: '**True positive rate (TPR)** of the system, or the percentage of malware samples
    the system will correctly detect'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**真阳性率 (TPR)**，即系统正确检测到的恶意软件样本的比例'
- en: '**False positive rate (FPR)** of the system, or the percentage of benign samples
    the system will incorrectly alarm on'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**假阳性率 (FPR)**，即系统错误报警的良性样本的比例'
- en: '**Base rate (BR)** of the binaries against which you will use the system (for
    example, the percentage of binaries downloaded from piracy sites you expect will
    be malware, if this is what you’ll be using your system on)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**二进制文件的基本比率 (BR)**，即你将使用该系统的二进制文件的比例（例如，你预计从盗版网站下载的二进制文件中有多少比例会是恶意软件，如果这是你使用系统的场景）'
- en: The numerator of the precision equation—the number of true positives—can be
    estimates by *true positive rate × base rate*, giving you the percentage of malware
    your system will correctly detect. Similarly, the denominator of the equation—that
    is, *(true positives + false positives)*—can be estimated by *true positive rate
    × base rate + false positive rate × (1 – base rate)*, giving you the percentage
    of *all* binaries the system will alarm on by calculating the number of malware
    binaries that will be detected correctly plus the fraction of benignware binaries
    for which false positives will be issued.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 精度公式的分子——真阳性的数量——可以通过*真阳性率 × 基本比率*来估算，从而得出系统将正确检测到的恶意软件的比例。同样，公式的分母——即*(真阳性
    + 假阳性)*——可以通过*真阳性率 × 基本比率 + 假阳性率 × (1 – 基本比率)*来估算，从而得出系统将报警的*所有*二进制文件的比例，通过计算将正确检测到的恶意软件二进制文件和产生假阳性的良性软件二进制文件的比例。
- en: 'In sum, you calculate the expected precision of your system as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，你可以通过以下方式计算系统的预期精度：
- en: '![image](../images/f0125-01.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0125-01.jpg)'
- en: Let’s consider another example to see how base rate can have a profound impact
    on the performance of a detection system. For example, suppose we have a detection
    system that has an 80 percent true positive rate and a 10 percent false positive
    rate, and 50 percent of the software binaries we run it against are expected to
    be malware. This would lead to an expected precision of 89 percent. But when the
    base rate is 10 percent, our precision drops to 47 percent.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑另一个例子，看看基准率如何对检测系统的性能产生深远的影响。例如，假设我们有一个检测系统，它的真实正例率为80%，假正例率为10%，并且我们运行的50%的软件二进制文件预计是恶意软件。这将导致预期精度为89%。但是，当基准率为10%时，我们的精度降至47%。
- en: What happens if our base rate is very low? For example, in a modern enterprise
    network, very few software binaries are actually malware. Using our precision
    equation, if we assume a base rate of 1 percent (1 in 100 binaries are malware),
    we get a precision of about 7.5 percent, which means that 92.5 percent of our
    system’s alarms would be false positives! And if we assume a base rate of 0.1
    percent (1 in 1000 binaries are likely to be malware), we get a precision of 1
    percent, meaning 99 percent of our system’s alarms would be false positives! Finally,
    at a base rate of 0.01 percent (1 in 10,000 binaries are likely to be malware—probably
    the most realistic assumption on an enterprise network), our expected precision
    drops to 0.1 percent, meaning the overwhelming majority of our system’s alerts
    will be false positives.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的基准率非常低，会发生什么呢？例如，在现代企业网络中，实际上很少有软件二进制文件是恶意软件。使用我们的精度公式，如果假设基准率为1%（100个二进制文件中有1个是恶意软件），我们得到的精度大约为7.5%，这意味着我们系统的92.5%的警报将是误报！如果假设基准率为0.1%（1000个二进制文件中有1个可能是恶意软件），我们得到的精度为1%，这意味着99%的警报将是误报！最后，在基准率为0.01%（10000个二进制文件中有1个可能是恶意软件——这可能是企业网络中最现实的假设）时，我们的预期精度降至0.1%，这意味着我们系统的大部分警报将是误报。
- en: One takeaway from this analysis is that detection systems that have high false
    positive rates will almost never be useful in enterprise settings, because their
    precision will be far too low. Therefore, a key goal in building malware detection
    systems is to minimize the false positive rate such that the precision of the
    system is reasonable.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一分析中可以得出的一个结论是，具有高假正例率的检测系统在企业环境中几乎永远不会有用，因为它们的精度太低。因此，构建恶意软件检测系统的一个关键目标是最小化假正例率，使得系统的精度合理。
- en: Another related takeaway is that when you do the ROC curve analysis introduced
    earlier in this chapter, you should effectively ignore false positive rates over,
    say, 1 percent, if you are developing your system to be deployed in an enterprise
    setting, because any higher false positive rate will likely result in a system
    that has such low precision that it is rendered useless.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个相关的结论是，当你进行本章前面介绍的ROC曲线分析时，如果你正在开发一个将在企业环境中部署的系统，你应该有效地忽略假正例率超过1%的情况，因为任何更高的假正例率都可能导致系统的精度低到无法使用的程度。
- en: '**Summary**'
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter, you learned basic detection evaluation concepts, including
    true positive rate, false positive rate, ROC curves, base rates, and precision.
    You saw how maximizing the true positive rate and minimizing the false positive
    rate are both important in building a malware detection system. Because of the
    way base rate affects precision, reducing the false positive rate is particularly
    important if you want to deploy your detection system within an enterprise.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了基本的检测评估概念，包括真实正例率、假正例率、ROC曲线、基准率和精度。你了解了最大化真实正例率和最小化假正例率在构建恶意软件检测系统中的重要性。由于基准率对精度的影响，如果你想在企业环境中部署你的检测系统，减少假正例率尤其重要。
- en: If you don’t feel completely fluent in these concepts, don’t worry. You’ll get
    more practice with them in the next chapter, where you’ll build and evaluate a
    malware detection system from the ground up. In the process, you’ll learn additional
    machine learning–specific evaluation concepts that will help you improve your
    machine learning–based detectors.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这些概念还不完全熟悉，不用担心。你将在下一章中获得更多的练习，在那时你将从头开始构建和评估一个恶意软件检测系统。在这个过程中，你将学习更多与机器学习相关的评估概念，这将帮助你改进基于机器学习的检测器。
