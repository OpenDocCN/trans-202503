- en: Chapter 8. Redundancy and Resource Availability
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 8 章. 冗余与资源可用性
- en: '![Redundancy and Resource Availability](httpatomoreillycomsourcenostarchimages2127149.png.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![冗余与资源可用性](httpatomoreillycomsourcenostarchimages2127149.png.jpg)'
- en: '*High availability* and *uninterrupted service* have been both marketing buzzwords
    and coveted goals for real-world IT professionals and network administrators as
    long as most of us can remember. To meet this perceived need and solve a few related
    problems, *CARP* and *pfsync* were added as two highly anticipated features in
    OpenBSD 3.5\. With these tools, OpenBSD and the other operating systems that adopted
    them came a long way toward offering what other operating systems refer to as
    general purpose *clustering* functionality. The terminology used by OpenBSD and
    its sister BSDs differs from what other products use, but as you will see in this
    chapter, CARP, pfsync, and related tools offer high availability functionality
    equivalent to what a variety of proprietary systems tend to offer only as costly
    optional extras.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*高可用性*和*持续服务*一直以来既是市场营销的流行词，也是现实世界中 IT 专业人员和网络管理员所追求的目标。为了满足这一需求并解决一些相关问题，*CARP*
    和 *pfsync* 被作为两项备受期待的功能添加到 OpenBSD 3.5 中。借助这些工具，OpenBSD 及其他采用这些工具的操作系统在提供类似于其他操作系统所称的通用
    *集群* 功能方面迈出了重要步伐。OpenBSD 及其姐妹 BSD 系统使用的术语与其他产品不同，但正如您将在本章中看到的那样，CARP、pfsync 和相关工具提供的高可用性功能相当于许多专有系统通常仅作为昂贵的可选功能提供的功能。'
- en: This chapter covers how to use these tools as found in your base system to manage
    resource availability—or, in other words, how to use them to make sure resources
    and services in your care stay available even in adverse conditions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍如何使用基础系统中的这些工具来管理资源可用性——换句话说，如何利用它们确保在不利条件下，您负责的资源和服务保持可用。
- en: 'Redundancy and Failover: CARP and pfsync'
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 冗余与故障转移：CARP 和 pfsync
- en: The Common Address Redundancy Protocol (CARP) was developed as a non-patent-encumbered
    alternative to the Virtual Router Redundancy Protocol (VRRP), which was far along
    the track to becoming an IETF-sanctioned standard, even though possible patent
    issues haven’t been resolved.^([[42](#ftn.ch08fn01)]) One of the main purposes
    of CARP is to ensure that the network will keep functioning as usual, even when
    a firewall or other service goes down due to errors or planned maintenance activities,
    such as upgrades. Not content to just make a clone of the patent-encumbered protocol,
    the OpenBSD developers decided to go one better on several fronts. CARP features
    authenticated redundancy—it’s address-family independent and comes with state
    synchronization features. Complementing CARP, the pfsync protocol is designed
    to handle synchronization of PF states between redundant packet-filtering nodes
    or gateways. Both protocols are intended to ensure redundancy for essential network
    features with automatic failover.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通用地址冗余协议（CARP）被开发出来作为一种不受专利限制的替代方案，用于虚拟路由器冗余协议（VRRP），后者已经接近成为 IETF 批准的标准，尽管潜在的专利问题尚未解决。^([[42](#ftn.ch08fn01)])
    CARP 的主要目的是确保即使由于错误或计划中的维护活动（如升级）导致防火墙或其他服务停机，网络也能继续正常运行。OpenBSD 开发人员不仅仅满足于复制受专利限制的协议，而是决定在多个方面做得更好。CARP
    具有经过认证的冗余功能——它与地址族无关，并且配有状态同步功能。作为 CARP 的补充，pfsync 协议设计用于处理冗余数据包过滤节点或网关之间的 PF
    状态同步。这两个协议的目的是确保关键网络功能的冗余，并实现自动故障转移。
- en: CARP is based on setting up a group of machines as one *master* and one or more
    redundant *backups*, all equipped to handle a common IP address. If the master
    goes down, one of the backups will inherit the IP address. The handover from one
    CARP host to another may be authenticated, essentially by setting a shared secret
    (in practice, much like a password).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: CARP 基于将一组机器设置为一个*主机*和一个或多个冗余*备份*的方式，所有这些机器都能够处理一个公共的 IP 地址。如果主机出现故障，其中一个备份将继承该
    IP 地址。CARP 主机之间的交接可以通过认证进行，基本上是通过设置共享密钥（实际上类似于密码）来完成。
- en: In the case of PF firewalls, pfsync can be set up to handle the synchronization,
    and if the synchronization via pfsync has been properly set up, active connections
    will be handed over without noticeable interruption. In essence, pfsync is a type
    of virtual network interface specially designed to synchronize state information
    between PF firewalls. Its interfaces are assigned to physical interfaces with
    `ifconfig`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PF 防火墙的情况下，可以设置 pfsync 来处理同步。如果通过 pfsync 的同步已经正确设置，活跃连接将在不中断的情况下进行切换。本质上，pfsync
    是一种虚拟网络接口，专门设计用于在 PF 防火墙之间同步状态信息。它的接口通过 `ifconfig` 分配给物理接口。
- en: Even if it’s technically possible to lump pfsync traffic together with other
    traffic on a regular interface, it’s strongly recommended that you set up pfsync
    on a separate network, or even VLAN. pfsync does no authentication on its synchronization
    partners, so the only way to guarantee correct synchronization is to use dedicated
    interfaces for your pfsync traffic.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 即使从技术上讲，可以将 pfsync 流量与其他流量一起放在常规接口上，强烈建议你在单独的网络或甚至 VLAN 上设置 pfsync。pfsync 不对同步伙伴进行身份验证，因此保证正确同步的唯一方法是为
    pfsync 流量使用专用接口。
- en: 'The Project Specification: A Redundant Pair of Gateways'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 项目规格：一对冗余网关
- en: 'To illustrate a useful failover setup with CARP and pfsync, we’ll examine a
    network with one gateway to the world. Our goals for the reconfigured network
    are as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示使用 CARP 和 pfsync 的有效故障转移设置，我们将检查一个有一个网关连接到外部网络的网络。重新配置网络的目标如下：
- en: The network should keep functioning much the same way it did before we introduced
    redundancy.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络应该像我们引入冗余之前一样正常运行。
- en: We should have better availability without noticeable downtime.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们应该在没有明显停机时间的情况下实现更好的可用性。
- en: The network should experience graceful failover with no interruption of active
    connections.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络应该经历平滑的故障转移，活跃连接不受影响。
- en: We’ll begin with the relatively simple network from [Chapter 3](ch03.html "Chapter 3. Into
    the Real World"), as shown in [Figure 8-1](ch08.html#network_with_a_single_gateway-id00010
    "Figure 8-1. Network with a single gateway").
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从[第 3 章](ch03.html "第 3 章. 走进现实世界")中相对简单的网络开始，如[图 8-1](ch08.html#network_with_a_single_gateway-id00010
    "图 8-1. 单网关的网络")所示。
- en: '![Network with a single gateway](httpatomoreillycomsourcenostarchimages2127161.png.jpg)Figure 8-1. Network
    with a single gateway'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '![单网关的网络](httpatomoreillycomsourcenostarchimages2127161.png.jpg)图 8-1. 单网关的网络'
- en: We replace the single gateway with a redundant pair of gateways that share a
    private network for state-information updates over pfsync. The result is shown
    in [Figure 8-2](ch08.html#network_with_redundant_gateways "Figure 8-2. Network
    with redundant gateways").
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用一对冗余的网关替代了单个网关，这对网关共享一个私有网络，通过 pfsync 更新状态信息。结果如[图 8-2](ch08.html#network_with_redundant_gateways
    "图 8-2. 冗余网关的网络")所示。
- en: '![Network with redundant gateways](httpatomoreillycomsourcenostarchimages2127163.png.jpg)Figure 8-2. Network
    with redundant gateways'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![冗余网关的网络](httpatomoreillycomsourcenostarchimages2127163.png.jpg)图 8-2. 冗余网关的网络'
- en: CARP addresses are virtual addresses, and unless you have console access to
    all machines in your CARP group, you should almost always assign an IP address
    to the physical interfaces. With a unique IP address for each physical interface,
    you’ll be able to communicate with the host and be sure of which machine you’re
    interacting with. Without IP addresses assigned to physical interfaces, you could
    find yourself with a setup where the backup gateways are unable to communicate
    (except with hosts in networks where the physical interfaces have addresses assigned)
    until they become the master in the redundancy group and take over the virtual
    IP addresses.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: CARP 地址是虚拟地址，除非你能访问 CARP 群组中所有机器的控制台，否则几乎总是应该为物理接口分配 IP 地址。为每个物理接口分配唯一的 IP 地址，你将能够与主机通信，并确保知道你在与哪台机器交互。如果物理接口没有分配
    IP 地址，你可能会遇到一个问题，即备份网关无法通信（除非在物理接口已分配地址的网络中与主机通信），直到它们成为冗余组中的主机，并接管虚拟 IP 地址。
- en: It’s reasonable to assume that the IP address assigned to the physical interface
    will belong in the same subnet as the virtual, shared IP address. It’s also important
    to be aware that this is, in fact, not a requirement—it’s even possible to configure
    CARP where the physical interface hasn’t been assigned an address. If you don’t
    specify a specific physical interface for the CARP interface, the kernel will
    try to assign the CARP address to a physical interface that’s already configured
    with an address in the same subnet as the CARP address. Even if it may not be
    required in simpler configurations, it’s generally useful to make the interface
    selection explicit via the `carpdev` option in the `ifconfig` command string that
    you use to set up the CARP interface.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 合理的假设是，分配给物理接口的 IP 地址应该属于与虚拟共享 IP 地址相同的子网。同样需要注意的是，这实际上并不是一个硬性要求——甚至可以配置 CARP，其中物理接口没有分配地址。如果你没有为
    CARP 接口指定特定的物理接口，内核会尝试将 CARP 地址分配给一个已经配置有与 CARP 地址同一子网的物理接口。即使在更简单的配置中这可能不是必须的，通常还是建议通过
    `ifconfig` 命令中的 `carpdev` 选项明确选择接口来设置 CARP 接口。
- en: Warning
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 警告
- en: '*If when you reconfigure your network, the default gateway address goes from
    fixed to a specific interface and from host to a virtual address, it’s nearly
    impossible to avoid a temporary loss of connectivity.*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果在重新配置网络时，默认网关地址从固定的变为特定接口，从主机变为虚拟地址，那么几乎无法避免临时连接中断。*'
- en: Setting Up CARP
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置 CARP
- en: Most CARP setup lies in cabling (according to the schematic for your network),
    setting `sysctl` values, and issuing `ifconfig` commands. Also, on some systems,
    you’ll need to make sure that your kernel is set up with the required devices
    compiled in.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 CARP 设置工作都集中在布线（根据你的网络示意图）、设置 `sysctl` 值以及发出 `ifconfig` 命令。此外，在一些系统中，你需要确保你的内核已经编译了所需的设备。
- en: Checking Kernel Options
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查内核选项
- en: On OpenBSD, both the CARP and pfsync devices are in the default GENERIC and
    GENERIC.MP kernel configurations. Unless you’re running a custom kernel without
    these options, no kernel reconfiguration is necessary. If you’re running FreeBSD,
    make sure that the kernel has the CARP and pfsync devices compiled in because
    the default GENERIC kernel lacks these options. (See the *FreeBSD Handbook* to
    learn how to compile and install a custom kernel with these options.)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenBSD 中，CARP 和 pfsync 设备都包含在默认的 GENERIC 和 GENERIC.MP 内核配置中。除非你正在运行没有这些选项的自定义内核，否则无需进行内核重新配置。如果你正在运行
    FreeBSD，确保内核已编译 CARP 和 pfsync 设备，因为默认的 GENERIC 内核没有这些选项。（请参阅 *FreeBSD 手册* 了解如何编译和安装带有这些选项的自定义内核。）
- en: NetBSD should check that the kernel has pseudo-device CARP compiled in because
    NetBSD’s default GENERIC kernel configuration doesn’t have it. (You’ll find the
    relevant line commented out in the GENERIC configuration file.) As of this writing,
    NetBSD doesn’t support pfsync due to claimed protocol-numbering issues.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: NetBSD 应该检查内核是否已编译伪设备 CARP，因为 NetBSD 默认的 GENERIC 内核配置中没有这个设备。（你会在 GENERIC 配置文件中找到相关行被注释掉。）截至本文写作时，NetBSD
    由于协议编号问题，尚不支持 pfsync。
- en: Setting sysctl Values
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置 sysctl 值
- en: 'On all CARP-capable systems, the basic functions are governed by a handful
    of `sysctl` variables. The main one is `net.inet.carp.allow`, and it’s enabled
    by default. On a typical OpenBSD system, you’ll see:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有支持 CARP 的系统中，基本功能由一些 `sysctl` 变量控制。主要的变量是 `net.inet.carp.allow`，默认情况下它是启用的。在典型的
    OpenBSD 系统中，你会看到：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This means that your system comes equipped for CARP.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你的系统已配备 CARP。
- en: 'If your kernel isn’t configured with a CARP device, this command should produce
    something like the following on FreeBSD:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的内核没有配置 CARP 设备，在 FreeBSD 上运行此命令时应该会产生如下类似的输出：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Or it could produce something like this on NetBSD:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 或者它可能在 NetBSD 上产生类似这样的输出：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Use this `sysctl` command to view all CARP-related variables:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此 `sysctl` 命令查看所有与 CARP 相关的变量：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*On FreeBSD, you’ll also encounter the read-only status variable `net.inet.carp.suppress_preempt`,
    which indicates whether preemption is possible. On systems with CARP code based
    on OpenBSD 4.2 or earlier, you’ll also see `net.inet.carp.arpbalance`, which is
    used to enable CARP ARP balancing to offer some limited load balancing for hosts
    on a local network.*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*在 FreeBSD 中，你还会遇到只读状态变量 `net.inet.carp.suppress_preempt`，它表示是否可以进行抢占。在基于 OpenBSD
    4.2 或更早版本的 CARP 代码的系统中，你还会看到 `net.inet.carp.arpbalance`，它用于启用 CARP ARP 平衡，为本地网络上的主机提供有限的负载均衡。*'
- en: To enable the graceful failover between the gateways in our setup, we need to
    set the `net.inet.carp.preempt` variable so that on hosts with more than one network
    interface (like our gateways), all CARP interfaces will move between master and
    backup status concurrently. This setting must be identical on all hosts in the
    CARP group, and it should be repeated on all hosts during setup.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的设置中实现网关之间的优雅故障转移，我们需要设置`net.inet.carp.preempt`变量，以便在具有多个网络接口的主机（如我们的网关）上，所有CARP接口将同时在主状态和备份状态之间切换。此设置必须在CARP组中的所有主机上保持一致，并且在设置过程中应在所有主机上重复执行。
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `net.inet.carp.log` variable sets the debug level for CARP logging between
    0 and 7\. The default of 2 means only CARP state changes are logged.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`net.inet.carp.log`变量设置CARP日志的调试级别，范围为0到7。默认值为2，意味着仅记录CARP状态变化。'
- en: Setting Up Network Interfaces with ifconfig
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用ifconfig设置网络接口
- en: Notice in the network diagram shown in [Figure 8-2](ch08.html#network_with_redundant_gateways
    "Figure 8-2. Network with redundant gateways") that the local network uses addresses
    in the 192.168.12.0 network, while the Internet-facing interface is in the 192.0.2.0
    network. With these address ranges and the CARP interface’s default behavior in
    mind, the commands for setting up the virtual interfaces are actually quite straightforward.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在[图8-2](ch08.html#network_with_redundant_gateways "图8-2. 带有冗余网关的网络")中显示的网络图中，本地网络使用192.168.12.0网络中的地址，而面向互联网的接口则位于192.0.2.0网络中。考虑到这些地址范围和CARP接口的默认行为，设置虚拟接口的命令实际上非常直接。
- en: 'In addition to the usual network parameters, CARP interfaces require one additional
    parameter: the *virtual host ID (`vhid`)*, which uniquely identifies the interfaces
    that will share the virtual IP address.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 除了常规的网络参数外，CARP接口还需要一个额外的参数：*虚拟主机ID（`vhid`）*，它唯一标识将共享虚拟IP地址的接口。
- en: Warning
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 警告
- en: '*The `vhid` is an 8-bit value that must be set uniquely within the network’s
    broadcast domain. Setting the `vhid` to the wrong value can lead to network problems
    that can be hard to debug, and there’s even anecdotal evidence that ID collisions
    with otherwise unrelated systems can occur and cause disruption on redundancy
    and load-balancing systems based on VRRP, which uses a virtual node identification
    scheme similar to CARP’s.*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*`vhid`是一个8位值，必须在网络的广播域内唯一设置。将`vhid`设置为错误的值可能会导致难以调试的网络问题，甚至有传闻称，与其他无关系统的ID冲突可能会发生，并导致基于VRRP的冗余和负载均衡系统出现中断，VRRP使用的虚拟节点标识方案类似于CARP。*'
- en: 'Run these commands on the machine that will be the initial master for the group:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在将作为该组初始主机的机器上运行这些命令：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We don’t need to explicitly set the physical interface because the `carp0` and
    `carp1` virtual interfaces will bind themselves to the physical interfaces that
    are already configured with addresses in the same subnets as the assigned CARP
    address.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要显式设置物理接口，因为`carp0`和`carp1`虚拟接口将自动绑定到已配置有地址且与分配的CARP地址在同一子网中的物理接口。
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*On systems that offer the `carpdev` option to `ifconfig`, it’s recommended
    to use the `carpdev` option for all CARP interface setups, even if it isn’t strictly
    required. The `carpdev` option becomes indispensable in cases where the choice
    of physical network device for the CARP interface isn’t obvious from the existing
    network configuration, and adding a `carpdev interface` string to the `ifconfig`
    commands can make the difference between a nonfunctional setup and a working one.
    This can be particularly useful in some nonintuitive configurations and where
    the number of free IP addresses in the relevant network is severely limited. The
    FreeBSD port of CARP offers the `carpdev` option starting with FreeBSD 10.0.*'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*在提供`carpdev`选项的`ifconfig`系统上，建议对所有CARP接口设置使用`carpdev`选项，即使它并非严格要求。在某些情况下，选择物理网络设备用于CARP接口可能并不明显，向`ifconfig`命令中添加`carpdev
    interface`字符串可以使设置从无功能到正常工作之间产生差异。这在某些非直观配置和相关网络中的空闲IP地址非常有限时尤其有用。FreeBSD的CARP端口从FreeBSD
    10.0开始提供`carpdev`选项。*'
- en: 'Use `ifconfig` to make sure that each CARP interface is properly configured
    and pay particular attention to the `carp:` line, which indicates `MASTER` status,
    as shown here:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ifconfig`确保每个CARP接口已正确配置，并特别注意`carp:`这一行，它表示`MASTER`状态，如下所示：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The setup is almost identical on the backup except that you add the `advskew`
    parameter, which indicates how much *less preferred* it is for the specified machine
    to take over than the current master.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 备份上的设置几乎与主服务器相同，不同之处在于您添加了 `advskew` 参数，它表示指定机器接管的优先级相对于当前主机有多少*较低的优先级*。
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `advskew` parameter and its companion value, `advbase`, are used to calculate
    the interval between the current host’s announcements of its master status once
    it’s taken over. The default value for `advbase` is 1, and the default for `advskew`
    is 0\. In the preceding example, the master would announce every second (1 + 0/256),
    while the backup would wait for 1 + 100/256 seconds.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`advskew` 参数及其配套值 `advbase` 用于计算当前主机在接管之后宣布其主机身份的间隔时间。`advbase` 的默认值为 1，`advskew`
    的默认值为 0。在上述示例中，主机会每秒宣布一次（1 + 0/256），而备份主机会等到 1 + 100/256 秒后才会宣布。'
- en: With `net.inet.carp.preempt=1` on all hosts in the failover group, when the
    master stops announcing or announces that it isn’t available, the backups take
    over, and the new master starts announcing at its configured rate. Smaller `advskew`
    values mean shorter announcement intervals and a higher likelihood that the host
    becomes the new master. If more hosts have the same `advskew`, the one that’s
    already master will keep its master status.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有故障转移组主机上启用 `net.inet.carp.preempt=1` 后，当主服务器停止宣布或宣布自己不可用时，备份服务器会接管，新的主机开始以配置的速率进行宣布。较小的
    `advskew` 值意味着更短的宣布间隔，并且主机成为新主机的可能性更大。如果更多主机具有相同的 `advskew` 值，则已为主机的主机将保持其主机身份。
- en: On OpenBSD 4.1 and higher, one more factor in the equation determines which
    host takes over CARP master duty. The *demotion counter* is a value each CARP
    host announces for its interface group as a measure of readiness for its CARP
    interfaces. When the demotion counter value is 0, the host is in complete readiness;
    higher values indicate measures of degradation. You can set the demotion counter
    from the command line using `ifconfig -g`, but the value is usually set by the
    system itself, with higher values typically during the boot process. All other
    things being equal, the host with the lowest demotion counter will win the contest
    to take over as the CARP master.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenBSD 4.1 及更高版本中，另一个决定哪个主机接管 CARP 主职责的因素是 *降级计数器*，这是每个 CARP 主机为其接口组宣布的一个值，用来衡量其
    CARP 接口的就绪状态。当降级计数器值为 0 时，主机完全就绪；更高的值表示状态有所下降。您可以使用 `ifconfig -g` 从命令行设置降级计数器，但通常该值由系统自动设置，通常在启动过程中会有较高的值。所有其他条件相等时，降级计数器值最低的主机会赢得接管
    CARP 主机职责的竞争。
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*As of this writing, FreeBSD CARP versions earlier than FreeBSD 10 don’t support
    setting the demotion counter.*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*截至本文写作时，FreeBSD 10 之前的 CARP 版本不支持设置降级计数器。*'
- en: 'On the backup, use `ifconfig` once again to check that each CARP interface
    is properly configured:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在备份服务器上，再次使用 `ifconfig` 检查每个 CARP 接口是否正确配置：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The output here is only slightly different from what you’ve just seen on the
    master. Notice that the `carp:` line indicates `BACKUP` status along with the
    `advbase` and `advskew` parameters.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的输出与您刚刚在主服务器上看到的只有一点点不同。请注意，`carp:` 行表示 `BACKUP` 状态，并且包含 `advbase` 和 `advskew`
    参数。
- en: For actual production use, you should add a measure of security against unauthorized
    CARP activity by configuring the members of the CARP group with a shared, secret
    passphrase, such as the following:^([[43](#ftn.ch08fn02)])
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于实际生产环境，您应当通过配置 CARP 组成员使用共享的秘密密码短语，来增加防止未经授权的 CARP 活动的安全措施，例如以下内容：^([[43](#ftn.ch08fn02)])
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*As with any other password, the passphrase will become a required ingredient
    in all CARP traffic in your setup. Be sure to configure all CARP interfaces in
    a failover group with the same passphrase (or none).*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*与其他密码一样，密码短语将成为您设置中所有 CARP 流量的必需组成部分。请确保在故障转移组中配置所有 CARP 接口使用相同的密码短语（或无密码）。*'
- en: 'Once you’ve figured out the appropriate settings, preserve them through future
    system reboots by putting them in the proper files in */etc*:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确定了适当的设置，通过将它们放入 */etc* 中的正确文件，确保它们在未来的系统重启中得到保留：
- en: On OpenBSD, put the proper `ifconfig` parameters into *hostname.carp0* and *hostname.carp1*.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 OpenBSD 上，将适当的 `ifconfig` 参数放入 *hostname.carp0* 和 *hostname.carp1* 中。
- en: On FreeBSD and NetBSD, put the relevant lines in your *rc.conf* file as contents
    of the `ifconfig_carp0=` and `ifconfig_carp1=` variables.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 FreeBSD 和 NetBSD 上，将相关行放入 *rc.conf* 文件中，作为 `ifconfig_carp0=` 和 `ifconfig_carp1=`
    变量的内容。
- en: 'Keeping States Synchronized: Adding pfsync'
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保持状态同步：添加 pfsync
- en: As the final piece of configuration, set up state-table synchronization between
    the hosts in your redundancy group to prevent traffic disruption during failover.
    This feat is accomplished through a set of pfsync interfaces. (As noted earlier,
    as of this writing, NetBSD doesn’t support pfsync.)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最终的配置步骤，设置冗余组内主机之间的状态表同步，以防止故障转移期间流量中断。这个操作是通过一组 pfsync 接口实现的。（如前所述，截至本文写作时，NetBSD
    不支持 pfsync。）
- en: Configuring pfsync interfaces requires planning and a few `ifconfig` commands.
    You can set up pfsync on any configured network interface, but it’s best to set
    up a separate network for the synchronization. The sample configuration in [Figure 8-2](ch08.html#network_with_redundant_gateways
    "Figure 8-2. Network with redundant gateways") shows a tiny network set aside
    for the purpose. A crossover cable connects the two Ethernet interfaces, but in
    configurations with more than two hosts in the failover group, you may want a
    setup with a separate switch, hub, or VLAN. The interfaces to be used for the
    synchronization have been assigned the IP addresses 10.0.12.16 and 10.0.12.17,
    respectively.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 pfsync 接口需要一些规划和 `ifconfig` 命令。你可以在任何已配置的网络接口上设置 pfsync，但最好为同步设置一个独立的网络。[图
    8-2](ch08.html#network_with_redundant_gateways "图 8-2. 带有冗余网关的网络") 中的示例配置展示了一个专门为此目的设置的小型网络。交叉电缆连接了两个以太网接口，但在具有超过两个主机的故障转移组中，你可能需要一个带有独立交换机、集线器或
    VLAN 的设置。用于同步的接口分别被分配了 IP 地址 10.0.12.16 和 10.0.12.17。
- en: With the basic TCP/IP configuration in place, the complete pfsync setup for
    each synchronization partner interface is
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 完成基本的 TCP/IP 配置后，每个同步伙伴接口的完整 pfsync 设置是
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The pfsync protocol itself offers little in the way of security features: It
    has no authentication mechanism and, by default, communicates via IP multicast
    traffic. However, in cases where a physically separate network isn’t feasible,
    you can tighten up your pfsync security by setting up pfsync to synchronize only
    with a specified `syncpeer`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: pfsync 协议本身提供的安全功能有限：它没有认证机制，并且默认通过 IP 多播流量进行通信。然而，在无法实现物理独立网络的情况下，你可以通过将 pfsync
    设置为仅与指定的 `syncpeer` 同步来增强其安全性：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This produces a configured interface that shows up in `ifconfig` output like
    this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个配置的接口，在 `ifconfig` 输出中显示如下：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Another option is to set up an IPsec tunnel and use that to protect the sync
    traffic. In this case, the `ifconfig` command is
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是设置一个 IPsec 隧道，并使用它来保护同步流量。在这种情况下，`ifconfig` 命令是
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This means that the `syncdev` device becomes the `enc0` encapsulating interface
    instead of the physical interface.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着 `syncdev` 设备变成了 `enc0` 封装接口，而不是物理接口。
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*If possible, set up synchronization across a physically separate, dedicated
    network or a separate VLAN because any lost pfsync updates could lead to less
    than clean failover.*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果可能，设置物理独立的专用网络或独立 VLAN 进行同步，因为任何丢失的 pfsync 更新可能导致故障转移时状态不清晰。*'
- en: One very useful way to check that your PF state synchronization is running properly
    is to watch the state table on your synchronized hosts using **`systat states`**
    on each machine. The command gives you a live display of states, showing updates
    happening in bulk on the sync targets. Between the synchronizations, states should
    display identically on all hosts. (Traffic counters—such as the number of packets
    and bytes passed—are the exception; they display updates only on the host that
    handles the actual connection.)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 PF 状态同步是否正常运行的一个非常有用的方法是使用 **`systat states`** 在每台机器上查看同步主机的状态表。该命令为你提供一个实时显示的状态，展示同步目标上的批量更新。在同步之间，所有主机的状态应该一致显示。（流量计数器——如传输的包数和字节数——是例外；它们只在处理实际连接的主机上显示更新。）
- en: This takes us to the end of the basic network configuration for CARP-based failover.
    In the next section, we’ll discuss what to keep in mind when writing rule sets
    for redundant configurations.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着基于 CARP 的故障转移的基本网络配置的结束。在接下来的部分中，我们将讨论在编写冗余配置规则集时需要注意的事项。
- en: Putting Together a Rule Set
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建规则集
- en: After all the contortions we’ve been through in order to configure basic networking,
    you may be wondering what it will take to migrate the rules you use in your current
    *pf.conf* to the new setup. Fortunately, not much. The main change we’ve introduced
    is essentially invisible to the rest of the world, and a well-designed rule set
    for a single gateway configuration will generally work well for a redundant setup,
    too.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们经历了所有这些曲折的配置以实现基本的网络功能后，你可能会想知道，将当前*pf.conf*中的规则迁移到新设置需要做哪些工作。幸运的是，所需的修改并不多。我们引入的主要变化对外界基本上是不可见的，针对单一网关配置设计的规则集通常也能很好地适用于冗余配置。
- en: 'That said, we’ve introduced two additional protocols (CARP and pfsync), and
    you’ll probably need to make some relatively minor changes to your rule set in
    order for the failover to work properly. Basically, you need to pass the CARP
    and pfsync traffic to the appropriate interfaces. The simplest way to handle the
    CARP traffic is to introduce a macro definition for your `carpdevs` that includes
    all physical interfaces that will handle CARP traffic. You’ll also introduce an
    accompanying `pass` rule, like the following one, in order to pass CARP traffic
    on the appropriate interfaces:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我们引入了两种额外的协议（CARP和pfsync），你可能需要对规则集做一些相对较小的调整，以便故障转移能够正常工作。基本上，你需要将CARP和pfsync流量传递到合适的接口。处理CARP流量的最简单方法是为你的`carpdevs`引入一个宏定义，包含所有将处理CARP流量的物理接口。你还需要引入一个配套的`pass`规则，例如以下规则，以便在适当的接口上传递CARP流量：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Similarly, for pfsync traffic, you can introduce a macro definition for your
    `syncdev` and an accompanying `pass` rule:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，对于pfsync流量，你可以为`syncdev`引入宏定义，并添加一个配套的`pass`规则：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Skipping the pfsync interfaces entirely for filtering is cheaper performance-wise
    than filtering and passing. To take the pfsync device out of the filtering equation
    altogether, use this rule:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 完全跳过pfsync接口进行过滤，在性能上比过滤和转发要便宜。要完全把pfsync设备排除在过滤范围外，可以使用如下规则：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You should also consider the roles of the virtual CARP interface and its address
    versus the physical interface. As far as PF is concerned, all traffic will pass
    through the physical interfaces, but the traffic may have the CARP interface’s
    IP addresses as source or destination addresses.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该考虑虚拟CARP接口及其地址与物理接口的角色。就PF而言，所有流量都会通过物理接口，但流量的源地址或目标地址可能会是CARP接口的IP地址。
- en: 'You may find that you have rules in your configuration that you don’t want
    to bother to synchronize in case of a failover, such as connections to services
    that run on the gateway itself. One prime example is the typical rule to allow
    SSH in for the administrator:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现你的配置中有一些规则，你不想在故障转移时费心去同步，比如与运行在网关本身上的服务的连接。一个典型的例子是允许管理员SSH连接的规则：
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'For rules like these, you could use the state option `no-sync` to prevent synchronizing
    state changes for connections that really aren’t relevant once failover has occurred:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这样的规则，你可以使用状态选项`no-sync`来防止同步在故障转移发生后实际上并不相关的连接状态变化：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: With this configuration, you’ll be able to schedule operating system upgrades
    and formerly downtime-producing activities on members of your CARPed group of
    systems at times when they’re most convenient, with no noticeable downtime for
    the users of your services.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种配置，你将能够在CARPed系统组的成员中安排操作系统升级和以前会造成停机的活动，选择在最合适的时机进行，而不会对服务用户造成明显的停机。
- en: Ifstated, the Interface State Daemon
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Ifstated，接口状态守护进程
- en: In properly CARPed setups, basic networking functionality is well provided for,
    but your setup may include elements that need special attention when the network
    configuration changes on a host. For example, some services might need to be started
    or stopped when a specific interface goes down or restarts, or you may want to
    run specific commands or scripts in response to interface state changes. If this
    sounds familiar, `ifstated` is for you.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在正确配置的CARP环境中，基本的网络功能已经得到很好的支持，但你的设置可能包含一些在主机网络配置发生变化时需要特别关注的元素。例如，当某个特定接口停止工作或重新启动时，某些服务可能需要启动或停止，或者你可能希望在接口状态变化时运行特定的命令或脚本。如果这听起来很熟悉，那么`ifstated`就是为你准备的。
- en: The `ifstated` tool was introduced in OpenBSD 3.5 to trigger actions based on
    changes in the state of network interfaces. You’ll find it in the base system
    on OpenBSD and via the ports system as *net/ifstated* on FreeBSD. On OpenBSD,
    the file */etc/ifstated.conf* (or */usr/local/etc/ifstated.conf* if you installed
    the port on FreeBSD) contains an almost-ready-to-run configuration with a few
    pointers on how to set up `ifstated` for a CARPed environment.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`ifstated`工具是在OpenBSD 3.5中引入的，用于基于网络接口状态变化触发动作。您可以在OpenBSD的基础系统中找到它，或者在FreeBSD的端口系统中找到*net/ifstated*。在OpenBSD中，文件*/etc/ifstated.conf*（或者在FreeBSD中安装端口后的*/usr/local/etc/ifstated.conf*）包含一个几乎可以直接运行的配置文件，并提供了一些关于如何为CARP环境设置`ifstated`的提示。'
- en: The main controlling objects are interfaces and their states—for example, `carp0.link.up`
    is the state where the `carp0` interface has become master—and you perform actions
    in response to state changes.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的控制对象是接口及其状态——例如，`carp0.link.up`是`carp0`接口变为主控的状态——您将在状态变化时执行相应的操作。
- en: The states and actions to perform whenever the state of an interface changes
    are specified in a straightforward scripting language with basic features like
    variables, macros, and simple logical conditionals. (See `man ifstated` and `man
    ifstated.conf` as well as the default *ifstated.conf* sample file supplied in
    your base system install for more on this topic and on implementing CARP-based
    clustering features in your environment.)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 每当接口状态发生变化时需要执行的状态和动作都在一个直观的脚本语言中进行指定，该语言具备基本的特性，如变量、宏和简单的逻辑条件。（请参见`man ifstated`和`man
    ifstated.conf`，以及在您的基础系统安装中提供的默认*ifstated.conf*示例文件，以了解更多相关内容，以及如何在您的环境中实现基于CARP的集群功能。）
- en: CARP for Load Balancing
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CARP负载均衡
- en: Redundancy by failover is nice, but sometimes it’s less attractive to have hardware
    sitting around in case of failure and better to create a configuration that spreads
    the network load over several hosts.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过故障切换实现冗余是不错的选择，但有时候，硬件闲置以防故障并不那么吸引人，反而更好的是创建一个配置，将网络负载分散到多个主机上。
- en: In addition to ARP balancing (which works by calculating hashes based on the
    source MAC address on incoming connections), CARP in OpenBSD 4.3 and higher supports
    several varieties of IP-based load balancing, with traffic allocated based on
    hashes calculated from the connections’ source and destination IP addresses. Because
    ARP balancing is based on the source MAC address, it’ll work only for hosts in
    the directly connected network segment. On the other hand, the IP-based methods
    are appropriate for load-balancing connections to and from the Internet at large.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 除了ARP负载均衡（它通过基于传入连接的源MAC地址计算哈希来工作），OpenBSD 4.3及更高版本中的CARP支持多种基于IP的负载均衡方法，其中流量根据从连接的源和目的IP地址计算的哈希进行分配。由于ARP负载均衡是基于源MAC地址的，它仅适用于直接连接的网络段中的主机。另一方面，基于IP的方法适用于负载均衡到互联网及其访问的连接。
- en: The choice of method for your application will depend on the specifications
    of the rest of the network equipment you need to work with. The basic `ip` balancing
    mode uses a multicast MAC address to have the directly connected switch forward
    traffic to all hosts in the load-balancing cluster.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序选择方法将取决于您需要配合的其他网络设备的规格。基本的`ip`负载均衡模式使用组播MAC地址，让直接连接的交换机将流量转发到负载均衡集群中的所有主机。
- en: Unfortunately, the combination of a unicast IP address and a multicast MAC address
    isn’t supported by some systems. In those cases, you may need to configure your
    load balancing in `ip-unicast` mode, which uses a unicast MAC address, and configure
    your switch to forward to the appropriate hosts. Or you may need to configure
    your load balancing in `ip-stealth` mode, which doesn’t use the multicast MAC
    address at all. As usual, the devil is in the details, and the answers are found
    in man pages and other documentation, most likely with a bit of experimentation
    thrown in.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，一些系统不支持单播IP地址和组播MAC地址的组合。在这种情况下，您可能需要将负载均衡配置为`ip-unicast`模式，该模式使用单播MAC地址，并配置交换机将流量转发到适当的主机。或者，您可能需要将负载均衡配置为`ip-stealth`模式，该模式根本不使用组播MAC地址。像往常一样，问题出在细节上，答案可以在man页和其他文档中找到，通常还需要通过一些实验来验证。
- en: Note
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*Traditionally, `relayd` has been used to do intelligent load balancing as
    the frontend for servers that offer services to the rest of the world. In OpenBSD
    4.7, `relayd` acquired the ability to track available uplinks and alter the system’s
    routing tables based on link health, with the functionality wrapped in a bundle
    with the `router` keyword. For setups with several possible uplinks or various
    routing tables, you can set up `relayd` to choose your uplink or, with a little
    help from the `sysctl` variables `net.inet.ip.multipath` and `net.inet6.ip6.multipath`,
    perform load balancing across available routes and uplinks. The specifics will
    vary with your networking environment. The `relayd.conf` man page contains a complete
    example to get you started.*'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*传统上，`relayd`被用作智能负载均衡的前端，用于提供对外服务的服务器。在OpenBSD 4.7中，`relayd`获得了跟踪可用上行链路并根据链路健康状况修改系统路由表的能力，这一功能通过与`router`关键字捆绑在一起实现。对于具有多个可能上行链路或不同路由表的设置，可以配置`relayd`选择上行链路，或者借助`sysctl`变量`net.inet.ip.multipath`和`net.inet6.ip6.multipath`，在可用路由和上行链路之间执行负载均衡。具体的配置方式会根据网络环境的不同而有所不同。`relayd.conf`手册页提供了一个完整的示例，帮助你入门。*'
- en: CARP in Load-Balancing Mode
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: CARP负载均衡模式
- en: In load-balancing mode, the CARP concept is extended by letting each CARP interface
    be a member of multiple failover groups and as many load-balancing groups as there
    are physical hosts that will share the virtual address. In contrast with the failover
    case, where there can be only one master, each node in a load-balancing cluster
    *must* be the master of its own group so that it can receive traffic. The choice
    of group—and by extension, physical host—that ends up handling a given connection
    is determined by CARP via a hash value calculation. This calculation is based
    on the connection’s source MAC address in the ARP-balancing case and on the source
    and destination IP address in the IP-balancing case as well as actual availability.
    The downside to this scheme is that each group consumes one virtual host ID, so
    you’ll run out of these IDs quite a bit more quickly in a load-balancing configuration
    than when using failover only. In fact, there’s a hard upper limit to the number
    of CARP-based load-balancing *clusters* of 32 virtual host IDs.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在负载均衡模式下，CARP概念得到了扩展，每个CARP接口可以成为多个故障转移组的成员，并且可以成为与共享虚拟地址的物理主机数量相等的负载均衡组的成员。与故障转移模式相比，负载均衡模式下每个节点*必须*是其所在组的主节点，以便能够接收流量。哪个组（以及相应的物理主机）最终处理某个连接，由CARP通过哈希值计算决定。此计算基于连接的源MAC地址（在ARP平衡模式下）以及源和目标IP地址（在IP平衡模式下）和实际可用性。该方案的缺点是每个组会消耗一个虚拟主机ID，因此在负载均衡配置中，这些ID会比仅使用故障转移时更快地用完。实际上，基于CARP的负载均衡*集群*的数量上限是32个虚拟主机ID。
- en: The `advskew` parameter plays a similar role in load-balancing configurations
    as in the failover ones, but the `ifconfig` (and *hostname.carpN*) syntax for
    CARP load balancing is slightly different from that of the failover case.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`advskew`参数在负载均衡配置中的作用与在故障转移配置中相似，但CARP负载均衡的`ifconfig`（以及*hostname.carpN*）语法与故障转移模式下略有不同。'
- en: Setting Up CARP Load Balancing
  id: totrans-116
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置CARP负载均衡
- en: Changing the CARP failover group built over the previous sections to a load-balancing
    cluster is as simple as editing the configuration files and reloading. In the
    following example, we choose an IP load-balancing scheme. If you choose a different
    scheme, the configuration itself differs only in the keyword for mode selection.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 将前面部分中建立的CARP故障转移组更改为负载均衡集群只需编辑配置文件并重新加载。在以下示例中，我们选择一个IP负载均衡方案。如果选择其他方案，配置文件中的区别仅在于模式选择的关键字。
- en: On the first host, we change */etc/hostname.carp0* to
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一台主机上，我们将*/etc/hostname.carp0*更改为
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This says that on this host, the `carp0` interface is a member of the group
    with `vhid 5` (with an `advskew` of `100`) as well as the interface with `vhid
    6`, where it’s the prime candidate for becoming initial master (with an `advskew`
    set to `0`).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这表示在该主机上，`carp0`接口是`vhid 5`组的成员（`advskew`为`100`），并且也是`vhid 6`组的成员，在该组中它是成为初始主节点的主要候选者（`advskew`设置为`0`）。
- en: 'Next, we change */etc/hostname.carp1* to this:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将*/etc/hostname.carp1*更改为：
- en: '[PRE20]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: For `carp1`, the memberships are `vhid`s `3` and `4`, with `advskew` values
    of `100` and `0`, respectively.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`carp1`，其成员是`vhid`为`3`和`4`的虚拟主机，`advskew`值分别为`100`和`0`。
- en: 'For the other host, the `advskew` values are reversed, but the configuration
    is otherwise predictably similar. Here, */etc/hostname.carp0* reads:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 对于另一个主机，`advskew` 值是相反的，但配置其他方面大致相似。这里，*/etc/hostname.carp0* 文件内容如下：
- en: '[PRE21]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This means that the `carp0` interface is a member of `vhid 5` with `advskew
    0` and a member of `vhid 6` with `advskew 100`. Complementing this is the */etc/
    hostname.carp1* file that reads:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着 `carp0` 接口是 `vhid 5` 的成员，`advskew 0`，并且是 `vhid 6` 的成员，`advskew 100`。与之互补的是
    */etc/hostname.carp1* 文件，其内容如下：
- en: '[PRE22]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Again, `carp1` is a member of `vhid 3` and `4`, with `advskew 0` in the first
    and `100` in the other.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，`carp1` 是 `vhid 3` 和 `4` 的成员，`advskew 0` 位于第一个组，`100` 位于第二个组。
- en: 'The `ifconfig` output for the `carp` interface group on the first host looks
    like this:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个主机上 `carp` 接口组的 `ifconfig` 输出如下所示：
- en: '[PRE23]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The other host has this `ifconfig` output:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个主机的 `ifconfig` 输出如下：
- en: '[PRE24]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If we had three nodes in our load-balancing scheme, each `carp` interface would
    need to be a member of an additional group, for a total of three groups. In short,
    for each physical host you introduce in the load-balancing group, each `carp`
    interface becomes the member of an additional group.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在负载均衡方案中有三个节点，每个 `carp` 接口都需要加入一个额外的组，总共是三个组。简而言之，对于每个在负载均衡组中引入的物理主机，每个
    `carp` 接口都成为一个额外组的成员。
- en: Once you’ve set up the load-balancing cluster, check the flow of connections
    by running **`systat states`** on each of the hosts in your load-balancing cluster
    for a few minutes to make sure that the system works as expected and to see that
    all the effort you put in has been worth it.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置好负载均衡集群，运行 **`systat states`** 命令，观察每个主机的连接流量，持续几分钟，确保系统按预期运行，并验证你所做的努力是值得的。
- en: '* * *'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: ^([[42](#ch08fn01)]) VRRP is described in RFC 2281 and RFC 3768\. The patents
    involved are held by Cisco, IBM, and Nokia. See the RFCs for details.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: ^([[42](#ch08fn01)]) VRRP 在 RFC 2281 和 RFC 3768 中有详细描述。相关专利由 Cisco、IBM 和 Nokia
    持有。详情请参阅 RFC 文档。
- en: ^([[43](#ch08fn02)]) This particular passphrase has a very specific meaning.
    A Web search will reveal its significance and why it’s *de rigeur* for modern
    networking documentation. The definitive answer can be found via the *openbsd-misc*
    mailing list archives.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: ^([[43](#ch08fn02)]) 这个特定的密码短语有着非常明确的含义。通过 Web 搜索可以发现它的意义，以及为什么它是现代网络文档中*理所当然*的标准。最终的答案可以通过
    *openbsd-misc* 邮件列表的归档找到。
