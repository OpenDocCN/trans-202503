- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 14 ESCAPING
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 14 转义
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: This chapter is about a vexing problem and its Batch solution. The problem is
    that you sometimes want to use a character as simple text but that particular
    character has a specific function in the coding language. The solution is escaping.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论的是一个令人头疼的问题及其批处理解决方案。问题在于，有时你想将某个字符作为普通文本使用，但该字符在编码语言中有特定的功能。解决方案是转义。
- en: In this chapter, I’ll explain all the intricacies surrounding how to escape
    a character in Batch. A certain syntax is used the majority of the time, except
    for when it isn’t. You’ll learn about multiple rounds of escaping, the syntax,
    and why you might want to escape a character more than once. I’ll also return
    to the “continuation character,” used to continue a command on multiple lines
    of code, because when you remove its veil, it turns out to be an escape character.
    However, before getting into how to solve this problem, you must first understand
    and appreciate the problem.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将解释如何在批处理语言中转义字符的所有复杂细节。大多数时候会使用某种特定的语法，除了在需要时会有不同。你将了解多轮转义、语法，以及为什么你可能需要多次转义一个字符。我还会回到“续行符”，它用于将命令延续到多行代码，因为当你揭开它的面纱时，你会发现它原来是一个转义字符。然而，在讨论如何解决这个问题之前，你首先需要理解并欣赏这个问题的本质。
- en: The Problem Statement
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题陈述
- en: You may want to use a certain character in some code, but what happens if it’s
    a special character with a certain predefined function in the coding language?
    For instance, say you’re attempting to use the special character in a text string.
    It happens in all languages, but it happens quite frequently in Batch because
    of the language’s uniquely esoteric syntax.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望在某些代码中使用特定字符，但如果该字符是编码语言中具有某种预定义功能的特殊字符怎么办？例如，假设你尝试在文本字符串中使用该特殊字符。这种情况在所有语言中都会发生，但在批处理语言中比较常见，因为该语言具有独特的深奥语法。
- en: As you’ve seen repeatedly in this book, percent signs delimit variables; one
    on either side of a variable resolves the variable to its value. But long before
    the existence of Batch, the percent sign was used to denote a percentage—that
    is, a proportion of 100\. Hence, a text string in Batch can’t simply refer to
    50% without the percent sign being interpreted as a delimiter. The insidious aspect
    of this issue is that there’s no compiler to catch the problem and the interpreter
    might not even fail to execute the code, instead producing unexpected results.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在本书中反复看到的那样，百分号用于限定变量；百分号位于变量的两边时，变量会被解析为它的值。但是，在批处理语言出现之前，百分号被用来表示百分比——即100的比例。因此，批处理中的文本字符串不能简单地表示50%，否则百分号就会被当作分隔符来解析。这个问题的隐秘之处在于，没有编译器能捕捉到这个问题，解释器甚至可能不会失败，而是产生意外的结果。
- en: 'To demonstrate, consider this command writing what appears to be a simple statement
    to the console:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，考虑一下这个命令，它将看似简单的语句写入控制台：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The interpreter treats everything between the two percent signs—that is, the
    space followed by and 80—as a variable. Assuming that such a variable isn’t set,
    which is a virtual certainty, it (along with the percent signs) resolves to null.
    The result is this nonsensical statement written to the console:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 解释器将两个百分号之间的内容（即后面跟着80的空格）视为一个变量。假设该变量没有设置，这是几乎可以肯定的，那么它（连同百分号）会解析为空值。结果就是在控制台上写出这样一个无意义的语句：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And if this command had used only one percent sign, it alone would’ve been dropped
    from the output. By the way, what happened to the exclamation mark at the end?
    Hold that thought.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果该命令只使用了一个百分号，它本身就会被从输出中去掉。顺便问一下，结尾处的感叹号去哪了？先记住这个问题。
- en: The solution to this quandary is escaping any special characters. Escape characters
    can be tricky, but they are very useful and indispensable in many situations.
    Before long, I’ll come back to the previous echo command to show you how to make
    it write the desired text.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个难题的方法是转义任何特殊字符。转义字符可能很棘手，但在许多情况下，它们非常有用且不可或缺。很快，我会回到前面的 `echo` 命令，向你展示如何让它输出所需的文本。
- en: The Caret Escape Character
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插入符号转义字符
- en: The primary Batch escape character is the caret (^). In other contexts, it’s
    called a hat or used to indicate an exponential, but in the Batch realm, it’s
    a caret. On most keyboards, you can type it using SHIFT-6\. The upshot is that
    the interpreter treats the vast majority of characters following the caret as
    simple text.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的 Batch 转义字符是插入符号 (^)。在其他语境中，它被称为帽子符号或用来表示指数，但在 Batch 领域，它就是插入符号。在大多数键盘上，你可以通过按
    SHIFT-6 来输入它。关键是，解释器会把插入符号后面的大多数字符视为普通文本。
- en: 'The following echo command is attempting to write to the console some trite
    pablum one might expect to find on a bad motivational poster at an office run
    by people who don’t understand that *Office Space* was a comedy, but the cringeworthy
    content is only part of the problem. It simply doesn’t work:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 echo 命令试图向控制台输出一些陈词滥调，那些你可能在由不理解 *办公室空间* 是一部喜剧的办公室里的坏激励海报上看到的内容，但令人尴尬的内容只是问题的一部分。它根本无法工作：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The interpreter treats the second greater-than sign as a second redirection
    character, creating an extensionless file named You in the current directory,
    and the ampersand ends one command and starts another. Obviously, the Me command
    with the Alone argument fails outright.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 解释器将第二个大于号视为第二个重定向符号，在当前目录中创建一个名为 You 的无扩展名文件，而 & 符号则结束一个命令并开始另一个命令。显然，带有 Alone
    参数的 Me 命令会直接失败。
- en: 'The command is clearly a mess, but it’s fixable with carets. I’m inserting
    the primary Batch escape character just prior to the two characters that thwarted
    us before:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令显然很乱，但通过插入符号可以修复。我在之前被阻碍的两个字符前插入了主要的 Batch 转义字符：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can think of each caret in this command as a special messenger. The escape
    character is giving the interpreter this clear message upon its discovery:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这个命令中的每个插入符号看作一个特殊的信使。每当解释器遇到转义字符时，它就会接收到这个清晰的信号：
- en: The very next character following me is to be treated as simple text. Don’t
    interpret it as you normally would. Oh, and by the way, promptly discard me for
    I am but a digital Pheidippides, a simple messenger who expires after the completion
    of his task.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 紧接着我的下一个字符将被视为普通文本。不要像通常那样解析它。哦，顺便说一下，迅速丢弃我，因为我不过是一个数字版的斐迪比德斯，一个在完成任务后就消失的简单信使。
- en: 'The result is this maybe inspirational and motivational message written to
    the console:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是这个或许具有激励性和鼓舞人心的信息写入了控制台：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Another way to get the interpreter to treat the special characters as text
    is to enclose the string in double quotes:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种让解释器将特殊字符视为文本的方式是将字符串用双引号括起来：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It’s important to note that while this command doesn’t have escape characters,
    it also writes out the double quotes to the console.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然这个命令没有转义字符，但它也会将双引号输出到控制台。
- en: I’ll soon reveal some exceptions, but the caret is the most commonly used Batch
    escape character, and you can use it to escape the less-than symbol (<), pipe
    (|), and parentheses (()), among other special characters. But Batch doesn’t treat
    all characters equally.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我很快会揭示一些例外情况，但插入符号是最常用的 Batch 转义字符，你可以用它来转义小于符号 (<)、管道符号 (|) 和圆括号 (())，以及其他特殊字符。但
    Batch 并不平等对待所有字符。
- en: Escaping the Caret
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转义插入符号
- en: 'Since the interpreter treats the caret as an escape character and throws it
    away, you might ponder the plight of a caret wanting to be treated simply as text
    itself. For example, if you were to write the Pythagorean theorem to the console,
    I hope you aren’t surprised to learn that Batch doesn’t support superscripts:
    A2 + B2 = C2. Instead, carets indicating exponentiation will suffice if we can
    make it work: A^2 + B^2 = C^2. (The Pythagorean theorem assumes that A and B are
    the sides of a right triangle adjacent to the right angle and that C is the hypotenuse.)
    This might be a first attempt at a solution:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于解释器将插入符号视为转义字符并将其丢弃，你可能会思考一个插入符号希望仅作为文本来处理的困境。例如，如果你要在控制台上写出毕达哥拉斯定理，我希望你不会惊讶地发现
    Batch 不支持上标：A² + B² = C²。相反，如果我们能够让它起作用，插入符号表示指数运算会足够：A^2 + B^2 = C^2。（毕达哥拉斯定理假设
    A 和 B 是直角三角形的两条直角边，C 是斜边。）这可能是解决方案的第一次尝试：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Unfortunately, each caret tells the interpreter to treat the following character,
    a 2 in each instance, as simple text, which it would’ve done anyway:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，每个插入符号都会告诉解释器将随后的字符（每个实例中的 2）视为普通文本，而这本来它就会如此处理：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The interpreter simply throws away the carets as if they were never there.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 解释器只是将插入符号丢弃，好像它们从未存在过。
- en: 'The solution rests in the fact that the caret is self-escaping; a caret is
    escaped with another caret. I’ve replaced each caret in the following code with
    double carets. In each instance, the first caret is the escape character, followed
    by the text caret:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案在于插入符号是自转义的；一个插入符号用另一个插入符号进行转义。我已将以下代码中的每个插入符号替换为双插入符号。在每个实例中，第一个插入符号是转义字符，后面是文本插入符号：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now you’ll get the desired result:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你会得到期望的结果：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We still can’t manage a superscript, but the result written to the console is
    the next best thing and much to a mathematician’s liking.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然无法管理上标，但写入控制台的结果是最接近的，并且很符合数学家的喜好。
- en: Escaping Percent Signs and Exclamation Marks
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转义百分号和感叹号
- en: 'After studying the Pythagorean theorem, you might ace the math test, but this
    celebratory Batch command fails to produce the desired result as the two special
    characters are dropped from the text written to the console:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习了勾股定理后，你可能会在数学考试中获得满分，但这个庆祝性批处理命令无法产生预期的结果，因为两个特殊字符从写入控制台的文本中被丢弃了：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'D’oh! We forgot the carets. You can be forgiven for thinking this quick fix
    will show the percent sign and the exclamation mark:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！我们忘记了插入符号。你可能会认为这个快速修复会显示百分号和感叹号：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: But the output is unchanged. Unfortunately, as is often the case with Batch,
    there are batveats. The caret doesn’t work as the escape character for the percent
    sign or the exclamation mark.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但输出没有改变。不幸的是，正如批处理中的常见情况那样，存在一些限制。插入符号不能作为百分号或感叹号的转义字符。
- en: 'The escape character for the percent sign is another percent sign, and the
    escape character—actually the escape characters, plural—for the exclamation mark
    is two carets. If this doesn’t make any sense to you, you are not alone. I’ve
    never found a good justification for this anomaly, but the following command writes
    I Scored 100% on my Math Test! to the console:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 百分号的转义字符是另一个百分号，而感叹号的转义字符——实际上是转义字符（复数）——是两个插入符号。如果这对你没有任何意义，你并不孤单。我从未找到过一个合理的解释来说明这个异常，但以下命令会将“I
    Scored 100% on my Math Test!”写入控制台：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Reflect on this a moment; in comparison to the Pythagorean theorem example,
    there seems to be a contradiction in how Batch handles double carets. The text
    ^^2 resolves to ^2, but in relation to the math test, the text ^^! resolves to
    !, leaving nary a caret in sight. Yes, that’s how it works. The interpreter handles
    double carets one way if followed by an exclamation mark and another way if followed
    by anything else. Consider it a batveat of a batveat (or a meta-batveat).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 思考一下；与勾股定理示例相比，Batch如何处理双插入符号似乎存在矛盾。文本^^2会解析为^2，但与数学测试相关时，文本^^!会解析为!，完全没有留下插入符号。是的，就是这样工作。解释器处理双插入符号的方式取决于它后面跟着感叹号或其他任何字符。可以把它看作是一个限制的限制（或者是一个元限制）。
- en: 'Getting back to the problem statement from the beginning of the chapter, this
    command writes the desired text:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 回到本章开头的题目，这条命令写入了期望的文本：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The interpreter writes the appropriate text to the console thanks to each set
    of double percent signs and the two carets preceding the exclamation mark.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 解释器通过每一对百分号和前置于感叹号前的两个插入符号将适当的文本写入控制台。
- en: NOTE
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*As noted in [Chapter 3](chapter3.xhtml), I’ve written this book with the assumption
    that delayed expansion is always enabled, but if it’s disabled, Batch treats the
    exclamation mark like any other character with no particular significance in Batch
    and with no need of being escaped.*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*正如在[第3章](chapter3.xhtml)中提到的，我写这本书时假设始终启用了延迟扩展，但如果它被禁用，Batch会将感叹号当作任何其他字符来处理，在Batch中没有特殊意义，也不需要转义。*'
- en: Multilevel Escaping
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多层转义
- en: 'The previous examples demonstrate how to write hardcoded text to the console
    with single-level escaping, and the same techniques successfully set a simple
    variable, but there’s a catch. For instance, the following set command resolves
    the two escape characters and stores Together We Are > You & Me Alone into the
    variable:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的示例演示了如何通过单层转义将硬编码文本写入控制台，同样的技巧也成功地设置了一个简单的变量，但有一个陷阱。例如，以下的set命令解析了两个转义字符并将“Together
    We Are > You & Me Alone”存储到变量中：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Unfortunately, the uses for this variable are severely limited. The variable
    does in fact contain the two special characters, but if you tried writing it to
    the console or a file or tried piping it to another command, it would fail to
    work as intended. Because the escape characters were removed from the text as
    it was assigned to the variable, when that variable is later resolved, the characters
    that have special meaning to the interpreter pose the same problem that escaping
    initially solved.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这个变量的用途非常有限。该变量确实包含了两个特殊字符，但如果你尝试将它写入控制台或文件，或者尝试将它传递给另一个命令，它将无法按预期工作。因为在将该文本赋值给变量时，转义字符被移除了，所以当该变量稍后被解析时，解释器认为具有特殊意义的字符又会引发原本转义解决的问题。
- en: 'The solution is to escape the escape character—yes, double-level escaping.
    The following two lines of code write the desired text to the console, and by
    desired text I mean that it contains a greater-than sign and an ampersand with
    no escape characters:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案是转义转义字符——是的，双重转义。以下两行代码将期望的文本写入控制台，我所说的期望文本是指它包含了一个大于号和一个和号，并且没有转义字符：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: To see what’s happening, let’s focus on ^^^&. The first caret is the escape
    character for the second caret, and the third caret is the escape character for
    the ampersand. When resolved, the set command stores ^& as part of the variable’s
    value. When the echo command resolves the variable, the remaining caret—the one
    that was treated as text just a moment ago—is now the escape character for the
    ampersand, resulting in just the ampersand surviving to be written to the console.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看清发生了什么，让我们专注于`^^^&`。第一个插入符号是第二个插入符号的转义字符，第三个插入符号是和号的转义字符。解析后，set命令将`^&`作为变量值的一部分进行存储。当echo命令解析该变量时，剩下的插入符号——它刚才被当作文本处理——现在是和号的转义字符，最终只有和号被写入控制台。
- en: Let’s look at the entire text string. The first command sets pureDrivel to the
    value Together We Are ^> You ^& Me Alone; then the second command writes the text
    Together We Are > You & Me Alone to the console.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下整个文本字符串。第一个命令将`pureDrivel`设置为`Together We Are ^> You ^& Me Alone`的值；然后第二个命令将文本`Together
    We Are > You & Me Alone`写入控制台。
- en: Multilevel escaping can get a bit more complicated. For instance, if you’re
    concatenating two variables into a larger variable before writing that second
    variable to a file, you’ll need three levels of escaping.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 多级转义可能会变得更复杂。例如，如果你在将两个变量拼接成一个更大的变量后再将该第二个变量写入文件，你将需要三轮转义。
- en: 'As for the mechanics of triple-level escaping, consider this: because of the
    four escape characters in ^^^^^^^& (that’s seven carets), it resolves to ^^^&.
    A second round of escaping sees this resolve to ^&, which ultimately resolves
    to & on the third round. The number of escape characters is 2*^n* – 1, where *n*
    is the number of escapes. I said it was tricky, but it’s also pretty cool.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 至于三重转义的机制，考虑一下这个：由于`^^^^^^^&`中有四个转义字符（即七个插入符号），它解析为`^^^&`。第二轮转义将其解析为`^&`，最终在第三轮解析时变成`&`。转义字符的数量是`2*^n*
    - 1`，其中*n*是转义的次数。我说它很棘手，但它也挺酷的。
- en: The Continuation Character
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连续字符
- en: On more than one occasion, I’ve heard coders refer to the caret as the Batch
    *continuation character*, and I even introduced it as such in [Chapter 5](chapter5.xhtml)
    with an example that used it in a set command spanning four lines of code. Technically,
    that’s incorrect, but in practice, it does perform this function. Allow me to
    explain.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我不止一次听到程序员将插入符号称为批处理的*连续字符*，我甚至在[第5章](chapter5.xhtml)中介绍过这种用法，举了一个例子，展示了它在一个跨越四行代码的set命令中的应用。严格来说，这不正确，但在实践中，它确实执行了这个功能。让我来解释一下。
- en: It should be the goal of every coder to write code that does not force the reader
    to scroll right and left. (It should also be efficient, well-documented, well-organized,
    and even elegant, but maybe that’s just my opinion, so I digress.) In most compiled
    languages when a command gets too long to easily read, you simply press ENTER
    and continue typing on the next line. The compiler is smart enough to know that
    the command encompasses two, three, or even more, lines.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 每个程序员的目标都应该是写出不需要读者左右滚动的代码。（当然，它还应该是高效的、文档完善的、结构清晰的，甚至是优雅的，但这也许只是我的个人看法，所以我离题了。）在大多数编译语言中，当命令过长不容易阅读时，你只需按ENTER键，然后在下一行继续输入。编译器足够聪明，知道该命令包含了两行、三行，甚至更多行。
- en: 'The Batch interpreter isn’t that forgiving (or smart), but when you append
    a caret to the *very end* of a line of code, the statement continues on the following
    line. Even when a line isn’t particularly long, I sometimes use this technique
    to line up the arguments I’m passing to an executable for readability:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Batch解释器没有那么宽容（或聪明），但当你在代码行的*最后*添加一个插入符号时，语句会继续到下一行。即使一行代码不特别长，我有时也会使用这种技术将传递给可执行文件的参数对齐，以提高可读性：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: At the end of most lines in a text file, two bytes represent the *carriage return
    line feed*. In hex, the bytes are x'0D' x'0A', and together they are often referred
    to as the CRLF, but they are not usually visible in the text editor. (If using
    Notepad++, select **View** ▶ **Show Symbol** ▶ **Show End of Line** to make the
    CRLFs visible. Other editors have a similar feature.)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本文件的大多数行末尾，两个字节表示*回车换行符（carriage return line feed）*。在十六进制中，这两个字节是x'0D' x'0A'，它们通常合在一起称为CRLF，但在文本编辑器中通常不可见。（如果使用Notepad++，可以选择**查看**
    ▶ **显示符号** ▶ **显示行尾**，以便让CRLF可见。其他编辑器也有类似功能。）
- en: In reality, the caret is still just an escape character, and it’s escaping the
    CRLF. In keeping with what an escape character does, when the interpreter sees
    the caret, it doesn’t treat the CRLF following as it normally would—that is, as
    the end of a line. Instead, it just treats the CRLF as any other whitespace and
    ignores it, essentially wrapping the line. In this way, the caret is the “continuation
    character.” (But I still cringe.)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，插入符号仍然只是一个转义字符，它是在转义CRLF。遵循转义字符的作用，当解释器看到插入符号时，它不会像通常那样将后面的CRLF视为行末，而是将其视为其他空白字符并忽略它，实际上是“换行”了。从这个角度来看，插入符号就是“续行符”。（但我仍然感到不太舒服。）
- en: A common mistake that invalidates this text wrapping is to append the line apparently
    ending in a caret with a space or two after the caret. Since the caret escapes
    the very next character, this does nothing more than escape a space, which is
    pretty close to doing nothing at all and leaves the CRLF undisturbed. This oversight
    can be very difficult to troubleshoot for those who simply think of the caret
    as a continuation character instead of as an escape character for the CRLF. Knowledge
    is power.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的错误是，在行尾看似结束的插入符号后加上一两个空格，从而使文本包装失效。由于插入符号转义的是紧随其后的字符，这样做不过是转义了一个空格，这几乎等于什么都没做，并且不会打乱CRLF。对于那些仅将插入符号视为续行符而不是转义CRLF的用户来说，这种疏忽可能很难排查。知识就是力量。
- en: You’ve learned that single characters are escaped by a single escape character,
    except for the exclamation mark, which requires two escape characters. The CRLF
    is yet another exception, but for the opposite reason. The CRLF is actually two
    characters, the carriage return character and the line feed character, and it’s
    the only example in Batch of two characters escaped by a lone character.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学到，单个字符通过一个转义字符来转义，除了感叹号，它需要两个转义字符。CRLF是另一个例外，但原因正好相反。CRLF实际上是两个字符，回车字符和换行字符，它是Batch中唯一一个由一个字符转义的两个字符示例。
- en: Summary
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned the many ways to use the caret, and sometimes the
    percent sign, to escape special characters, but the discussion is just beginning.
    This technique is an indispensable tool, and you’ll see more than one application
    of it later in this book.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了许多使用插入符号（caret）以及有时使用百分号（percent sign）来转义特殊字符的方法，但讨论才刚刚开始。这项技术是一个不可或缺的工具，稍后在本书中你将看到它的多个应用。
- en: If nothing else, I hope this chapter has demonstrated how very tricky escaping
    can be. When I was a novice Batch coder, I received some simple, yet sage, advice
    about escaping from a more experienced co-worker. The advice was to test diligently;
    test all possible characters that the code might reasonably encounter in the data.
    With so many caveats, batveats, and exceptions, you shouldn’t assume that escaping
    will work in all contexts after seeing it work in one particular context. In your
    test plan, pepper the code doing the escaping with all of the special characters
    that could possibly come its way.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有别的，我希望本章能让你认识到转义是多么棘手。当我还是一个初学者时，我从一位更有经验的同事那里得到了一个简单却富有智慧的建议：要认真测试；测试代码可能遇到的所有字符。由于有许多警告、特殊情况和例外，你不应该在看到转义在某个特定场景下有效后，就假设它在所有环境下都会有效。在你的测试计划中，加入所有可能遇到的特殊字符，来测试那些进行转义的代码。
- en: For something completely different, the next chapter will discuss how a bat
    file can work interactively with a human, asking questions, getting responses,
    and performing conditional logic based on those answers.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完全不同的内容，下一个章节将讨论如何使批处理文件与人类进行交互，提问、获取回答，并根据这些回答执行条件逻辑。
