- en: '![image](../images/f059-01.jpg)'
  id: totrans-0
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f059-01.jpg)'
- en: '**3'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**3'
- en: 'Ghost Burgers: Adding Special Effects with Scripting**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*鬼魂汉堡：使用脚本添加特效*'
- en: In this chapter, you’ll learn more advanced Twine features and become a Twine
    virtuoso. You’ll learn *scripting*, which allows you to add special effects to
    your story’s text, and to make your game remember and respond to player choices.
    Now you can keep track of whether they went to one room or another or whether
    they’re carrying a flashlight or a hamburger. You’ll also learn how to change
    your story’s background colors, font colors, and font styles. We’ll use a Twine
    game called *Ghost Burgers* as our starting point. Play it at [*https://nostarch.com/twinegames*](https://nostarch.com/twinegames)*/.*
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你将学习更高级的Twine功能，成为一名Twine高手。你将学习*脚本编写*，它可以让你为故事的文本添加特效，并让游戏记住并响应玩家的选择。现在你可以跟踪玩家是去了某个房间，还是携带着手电筒或汉堡。你还将学习如何改变故事的背景色、字体颜色和字体样式。我们将使用一款名为*鬼魂汉堡*的Twine游戏作为起点。你可以在[*https://nostarch.com/twinegames*](https://nostarch.com/twinegames)玩它。
- en: Here is what the spooky *Ghost Burgers* start screen looks like.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这是恐怖的*鬼魂汉堡*开始画面的样子。
- en: '![image](../images/f060-01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f060-01.jpg)'
- en: In *Ghost Burgers*, you explore a spooky old house to find proof of the supernatural
    so you and your friend Astrid can become world-famous ghost hunters. As you explore
    the house, you’ll perform actions, like flipping a weird switch and exploring
    a spooky attic, to progress through the story and meet some ghosts.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在*鬼魂汉堡*中，你将探索一座恐怖的老房子，寻找超自然现象的证据，这样你和你的朋友Astrid就能成为世界著名的鬼魂猎人。随着你探索这座房子，你将进行一些行动，比如翻动一个奇怪的开关，探索一个恐怖的阁楼，来推动故事进展并遇见一些鬼魂。
- en: Take a few minutes to play *Ghost Burgers*, and then I’ll show you how to make
    it.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 花几分钟玩一下*鬼魂汉堡*，然后我会教你如何制作它。
- en: Mapping Out a Space
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘制空间布局
- en: 'Unlike *Interview with a Cat!*, which simulates a conversation, *Ghost Burgers*
    simulates a place: a mansion. The player can move from one part of the mansion
    to the other and even retrace their steps to see if anything has changed in a
    particular room.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与*与猫的访谈！*（模拟对话）不同，*鬼魂汉堡*模拟的是一个地方：一座豪宅。玩家可以从豪宅的一个部分移动到另一个部分，甚至可以返回查看某个房间是否发生了变化。
- en: But before building a mansion, it’s a good idea to map it out. For this game,
    the first step was to think about the rooms I wanted, where they were, and what
    events should happen in which rooms. For example, I decided the parlor would always
    lead to either the maintenance room or the library, and the dining room would
    always lead to the kitchen. This should make intuitive sense to most players.
    Then I drew a map like this one to help me keep track of the paths.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但在建造一座豪宅之前，最好先进行规划。对于这款游戏，第一步是思考我想要哪些房间，它们的位置以及每个房间应该发生什么事件。例如，我决定起居室总是通向维护室或图书馆，餐厅总是通向厨房。这对于大多数玩家来说应该是直观的。接着，我画了一张类似这样的地图，以帮助我跟踪路径。
- en: '![image](../images/f061-01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f061-01.jpg)'
- en: Planning Events and Controlling Play
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 规划事件和控制游戏进程
- en: 'With my map in hand and a basic idea of what the *Ghost Burgers* mansion would
    look like, I made a list of major events I wanted to happen in the game. The list
    looked something like this, in the general order in which the events would take
    place:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 拿着我的地图和对*鬼魂汉堡*豪宅的基本构想，我列出了我希望在游戏中发生的主要事件。这个列表大致是按照事件发生的顺序排列的：
- en: •Find a key under the doormat and use it to get into the mansion
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •在门垫下找到一把钥匙，使用它进入豪宅
- en: •Discover the trapdoor that leads to the attic
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •发现通往阁楼的隐藏门
- en: •Turn on the ghost switch to make ghosts appear
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •打开鬼魂开关，让鬼魂出现
- en: •Use the ghost stepladder to reach the attic trapdoor
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •使用鬼魂梯子到达阁楼的隐藏门
- en: •Meet Burger Ghost in the attic
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •在阁楼遇见汉堡鬼
- en: •Find the ghost burger in the fridge
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •在冰箱里找到鬼魂汉堡
- en: •Find a plate of ghost china for the burger
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •为汉堡找一个鬼魂餐具盘
- en: •Feed the ghost burger to Burger Ghost
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: •把鬼魂汉堡喂给汉堡鬼
- en: '*Ghost Burgers* isn’t super strict about the order in which these events happen.
    For example, the player can find the burger before meeting the Burger Ghost, or
    they can find the plate before finding the burger that goes on the plate. The
    reason to make a list of events is to have a general idea of the flow of the game.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*鬼魂汉堡*对于这些事件发生的顺序并不是特别严格。例如，玩家可以在遇到汉堡鬼之前就找到汉堡，或者在找到放汉堡的盘子之前找到盘子。列出事件的目的是为了大致了解游戏的流程。'
- en: '![image](../images/f062-01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f062-01.jpg)'
- en: To make your games a bit more challenging and interesting, you can make the
    player do things in a specific order. For example, I can make sure the player
    sees the trapdoor that leads to the attic *before* the ghost stepladder appears.
    When the player sees the trapdoor and can’t find a way up to it, they’ll have
    to keep exploring to find out how to get up there. Later, when they flip a ghost
    switch, the ghostly stepladder appears, which shows the player how to access a
    different dimension of the game.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你的游戏更具挑战性和趣味性，你可以要求玩家按照特定的顺序进行操作。例如，我可以确保玩家在幽灵梯子出现之前先看到通往阁楼的陷阱门。当玩家看到陷阱门却找不到上去的办法时，他们就必须继续探索，找出如何上去。之后，当他们翻开幽灵开关时，幽灵梯子会出现，告诉玩家如何进入游戏的另一个维度。
- en: 'To ensure that the player sees the trapdoor before the ghost switch, I made
    it impossible for the player to get to the ghost switch without passing through
    the library where the trapdoor is. As you can see on the map on [page 37](#page_37),
    the player *must* pass through the library to get to the maintenance room and
    flip the switch. This works both ways: after the player flips the switch, they
    *must* pass through the library again where they’ll see the ghostly stepladder.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保玩家在看到幽灵开关之前能够看到陷阱门，我让玩家无法绕过图书馆直接到达幽灵开关，因为陷阱门就在图书馆里。正如你在[第37页](#page_37)的地图上看到的那样，玩家*必须*通过图书馆才能到达维修室并打开开关。这是双向的：当玩家翻开开关后，他们*必须*再次经过图书馆，届时他们将看到幽灵梯子。
- en: Flipping the switch also reveals many new items for the player to explore. For
    example, the player can examine the fridge and the china cabinet before flipping
    the ghost switch, but they won’t see the burger and plate until the ghost switch
    is on. This technique adds to the experience because the player must look around
    to get a sense of what’s going on and anticipate changes to the game environment.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 翻开开关后，玩家还会发现许多新的物品可以探索。例如，玩家可以在翻开幽灵开关之前检查冰箱和餐具柜，但他们直到幽灵开关打开后才会看到汉堡和盘子。这种技巧增强了游戏体验，因为玩家必须四处查看，感知正在发生的变化，并预见游戏环境的变化。
- en: I also decided to make two of the most important moments in the game—finding
    the ghost burger and finding the plate to put it on—happen on opposite sides of
    the mansion. That way, the player has to explore the entire mansion before they
    can finish the game.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我还决定让游戏中两个最重要的时刻——找到幽灵汉堡和找到放它的盘子——发生在庄园的两个对立位置。这样，玩家必须探索整个庄园才能完成游戏。
- en: '**NOTE**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: Not all Twine games will have the kind of organization that *Ghost Burgers*
    does. Some Twine stories only move forward. But even in those stories, it’s best
    to think about the order in which the player discovers things, what they learn
    and when, and where important moments in the game are in relation to each other
    so you can space out the game’s components.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 不是所有的Twine游戏都像*幽灵汉堡*那样组织结构。有些Twine故事只是单向推进。但即便是在这些故事中，最好考虑玩家发现事物的顺序，他们学到了什么，什么时候学到，以及游戏中重要时刻彼此之间的位置，这样你可以合理分布游戏的各个部分。
- en: Adding Text Effects Using Hooks
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用钩子添加文本效果
- en: The rooms in *Ghost Burgers* change from one visit to the next, but only after
    the player flips the switch. After the player flips the ghost switch, ghosts (like
    Archibald Prancibald, the talkative gentleman ghost, or the ghostly stepladder
    or ghost burger) appear in places that were previously ghost free! And the text
    looks ghostly, too!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*幽灵汉堡*中的房间会在每次访问时发生变化，但仅限于玩家翻开开关之后。玩家翻开幽灵开关后，幽灵（比如健谈的绅士幽灵阿奇博尔德·普兰西博尔德，或者幽灵梯子、幽灵汉堡）会出现在之前没有幽灵的地方！而且文本看起来也变得幽灵般飘渺！'
- en: How do you create spooky ghost text? How do you make a passage in your story
    look different each time the player returns to it? How do you change passages
    depending on what the player has already done or seen?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如何创造诡异的幽灵文本效果？如何让故事中的某一段文字每次玩家返回时看起来都不一样？如何根据玩家已经做过的事情或看到的内容来改变段落？
- en: The answer to all these questions is to use hooks. In this chapter, I will sometimes
    refer to writing hooks as “script” or “code.” Those are just different names for
    instructions that are given to a computer.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些问题的答案就是使用钩子。在本章中，我有时会将写钩子称作“脚本”或“代码”。这些只是给予计算机的指令的不同名称。
- en: For our first hook, let’s add *s p o o k y* text to our game!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个钩子，让我们为游戏添加*诡异的*文本效果吧！
- en: Ghostly Text Style
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 幽灵文本风格
- en: Did you notice while playing *Ghost Burgers* that the names of ghostly objects
    appear ghostly, like the blurry word *stepladder* shown here?
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在玩*Ghost Burgers*时，你有没有注意到那些鬼影物品的名称看起来像鬼影一样模糊，比如这里显示的模糊单词*stepladder*？
- en: '![image](../images/f064-01.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f064-01.jpg)'
- en: 'Blurring the word makes the text stand out, which helps players notice that
    the stepladder wasn’t there the first time they traveled through this room: they
    would have remembered a blurry ladder! The blurry text identifies what has changed
    in each room.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使单词模糊可以让文字更加突出，这有助于玩家注意到，在他们第一次穿越这个房间时，梯子并不在那里：他们本应记得那是一个模糊的梯子！模糊的文字标识了每个房间中发生的变化。
- en: 'To create these effects, you can use hooks, which are built into Twine. To
    see how they work, open a new passage in Twine and enter the following line into
    the editor:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建这些效果，你可以使用Twine内建的hooks。要查看它们如何工作，请在Twine中打开一个新章节，并在编辑器中输入以下内容：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Test-play this passage, and you should see that the word *stepladder* looks
    blurry.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 测试播放这段文字，你应该会看到单词*stepladder*模糊不清。
- en: 'In this example, the text enclosed inside parentheses `(text-style: "blur")`
    is the *hook*, which is a label you can use to tell Twine how to style a passage.
    The text in square brackets `[stepladder]` is the tagged word. Here, the `text-style`
    tag changes the style of the text in the square brackets from the default to the
    `"blur"` style. You can apply a range of styles using the `text-style` tag: for
    example, you can create upside-down text with `(text-style: "upside-down")` and
    create text that casts a shadow with `(text-style: "shadow")`. As long as you
    enclose the text within the square brackets, you can apply the style change to
    as much text as you like. (A complete list of text effects is at the Twine 2 reference
    site at [*http://twine2.neocities.org/*](http://twine2.neocities.org/).)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '在这个例子中，括号内的文本`(text-style: "blur")`是*hook*，它是一个标签，可以告诉Twine如何样式化章节。方括号`[stepladder]`中的文本是被标记的单词。这里，`text-style`标签将方括号中的文字样式从默认的样式更改为`"blur"`样式。你可以使用`text-style`标签应用多种样式：例如，你可以使用`(text-style:
    "upside-down")`创建倒置文本，或者使用`(text-style: "shadow")`为文字添加阴影。只要将文字括在方括号内，你可以对任意数量的文字应用样式更改。（完整的文本效果列表可以在Twine
    2参考网站上找到：[*http://twine2.neocities.org/*](http://twine2.neocities.org/)）'
- en: Displaying Random Text with either
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用`either`显示随机文本
- en: In addition to using hooks to apply different text effects, you can also use
    them to display different text each time the player revisits a passage. For example,
    in *Ghost Burgers*, if the player looks at a book in the library more than once,
    they’ll see a different book each time.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用hooks应用不同的文本效果外，你还可以利用它们在玩家重新访问章节时显示不同的文本。例如，在*Ghost Burgers*中，如果玩家多次查看图书馆中的同一本书，他们每次看到的都会是不同的书。
- en: '![image](../images/f065-01.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f065-01.jpg)'
- en: Displaying random books creates the impression of a library full of books. Almost
    every time the player pulls a book off the shelf, they’ll see a different title.
    In fact, only 10 book title options are available, but that’s enough to make it
    seem like the library has so many books the player will never be able to look
    at them all.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 显示随机书籍会创造出图书馆中满是书籍的印象。几乎每次玩家从书架上拿下书本时，他们都会看到不同的书名。实际上，只有10个书名选项，但这已经足够让人觉得这个图书馆里有那么多书，玩家永远也看不完。
- en: '![image](../images/f066-01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f066-01.jpg)'
- en: 'You can use Twine’s `either` tag to pick from a list of options at random.
    For example, open a passage in Twine and enter the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用Twine的`either`标签从选项列表中随机选择。例如，在Twine中打开一个章节，并输入以下内容：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now test-play the passage a couple of times. The passage should read *red*,
    *blue*, or *green* each time you play it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再测试播放这段文字几次。每次播放时，这段文字应该会显示*red*、*blue*或*green*。
- en: Each option can be as long or short as you like, but you must enclose it in
    quotation marks with commas between the options.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 每个选项可以根据你的需要长短不一，但必须用引号括起来，并且选项之间用逗号分隔。
- en: 'Here’s how we use `either` in the *Library* passage:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在*Library*章节中使用`either`的方式：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The symbols `=><=` center the book titles, and `<==` moves the text back to
    the left afterward. To use these directional characters to format your text, enter
    them into Twine, and then insert the text you want to adjust on the line that
    follows. To move text to the right, use `==>`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 符号`=><=`将书名居中，而`<==`会将文字之后移回左边。要使用这些方向符号格式化文本，请将它们输入Twine，然后在接下来的行中插入你想调整的文字。要将文字向右移，使用`==>`。
- en: The asterisks (`*`) at either end of the list of book title options italicize
    the text, as you learned in [Chapter 2](ch02.xhtml). When you test-run this passage,
    you should see something like this.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 书名选项列表两端的星号(`*`)会将文本斜体化，正如你在[第2章](ch02.xhtml)中学到的。当你测试运行这段文字时，你应该会看到类似的效果。
- en: '![image](../images/f067-01.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f067-01.jpg)'
- en: Next, let’s explore how to place hooks inside other hooks.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们探索如何在其他钩子内部放置钩子。
- en: Nesting Hooks
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 嵌套钩子
- en: 'You can combine the effects of different hooks by placing one inside the other,
    which is called *nesting*. Enter the following to see how nesting works:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将一个钩子放入另一个钩子中来结合不同钩子的效果，这被称为*嵌套*。输入以下内容来查看嵌套是如何工作的：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, the words “What am I?” would randomly appear italicized, with a shadow,
    blurry, upside-down, or rumbling (shaking up and down). Each hook starts with
    text that shows what it does (`text-style`, `either`), a colon, and then a “how
    do I do it” part. The “how do I do it” part for the `text-style` tag is the `either`
    hook. We’re telling Twine to print this text using either italicized, shadowed,
    blurry, upside-down, or rumbling style. Try it! Just make sure each hook has its
    own opening parenthesis and closing parenthesis!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，"What am I?"这些词会随机出现，可能是斜体、带阴影、模糊、倒置或震动（上下摇晃）。每个钩子以显示其功能的文本开头（如`text-style`、`either`），后面跟着一个冒号，然后是“我怎么做”的部分。`text-style`标签的“我怎么做”部分就是`either`钩子。我们告诉Twine以斜体、带阴影、模糊、倒置或震动的风格打印这段文字。试试看！只要确保每个钩子都有自己的开括号和闭括号！
- en: '![image](../images/f068-01.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f068-01.jpg)'
- en: Think of nesting hooks like nesting dolls. When you open the “text-style” doll,
    you’ll find the “either” doll nested neatly inside it. As long as every doll has
    a top and a bottom—the “what do I do” and “how do I do it” with the correct punctuation—you
    can nest as many hooks inside other hooks as you like.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 可以把嵌套钩子想象成套娃。打开“text-style”套娃，你会发现“either”套娃整齐地嵌套在里面。只要每个套娃都有一个顶部和底部——“我做什么”和“我怎么做”并使用正确的标点——你就可以根据需要将任意多个钩子嵌套在其他钩子里面。
- en: 'This nested tag sends the player to a random room in the mansion:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个嵌套标签会将玩家送到大厦的一个随机房间：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Each item inside the `either` hook is the name of a passage in the game. The
    `either` hook is nested inside a `display` hook, which allows you to show the
    contents of one passage inside another. (It’s more useful than you might realize!)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`either`钩子中的每一项都是游戏中的一个段落名称。`either`钩子嵌套在`display`钩子中，这使你能够在一个段落中显示另一个段落的内容。（它比你想象的要有用！）'
- en: Using display to Avoid Retyping Text
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用`display`来避免重复输入文本
- en: 'The `display` hook can be very handy because it lets you show any passage inside
    any other passage. For example, say you want to display the same text (like a
    description of a gorgeous sunset) in a few different places. The player can see
    the sunset from any room in the house: through the bedroom windows or out the
    window in the front door. Instead of writing the description of the sunset twice,
    you write it once, save it as the *Sunset* passage, and then use `display` to
    show that passage in several rooms.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`display`钩子非常有用，因为它允许你在任何其他段落中显示任何段落。例如，假设你想在几个不同的地方显示相同的文本（比如描述一场美丽的日落）。玩家可以从房子里的任何一个房间看到日落：通过卧室的窗户或者从前门的窗户望出去。与其将日落的描述写两遍，不如写一次，将它保存为*Sunset*段落，然后使用`display`在多个房间中显示该段落。'
- en: '![image](../images/f069-01.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f069-01.jpg)'
- en: As another example, when the player talks to Archibald in *Ghost Burgers*, they’ll
    see the same list of questions no matter which order they ask them in. After they
    ask a question, Archibald will answer it. Then the player can ask another one.
    We show the same list of questions at the end of every one of Archibald’s answers,
    so the player can pick the next one.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是，当玩家在*Ghost Burgers*中与Archibald对话时，无论他们以何种顺序提问，都会看到相同的问题列表。在他们提问后，Archibald会回答，然后玩家可以继续提问。我们在每次Archibald回答之后都会显示相同的问题列表，这样玩家可以选择下一个问题。
- en: 'We *could* retype the five questions in every passage, but if we later decide
    to change one of the questions or add a new one, we’d have to make the same change
    five times. To avoid this, we just put the questions in their own passage and
    use `display` to show that passage whenever Archibald is done talking, like so:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们*可以*在每个段落中重新输入五个问题，但如果我们后来决定更改某个问题或添加一个新问题，我们就得五次都做同样的修改。为了避免这种情况，我们只需将问题放入它们自己的段落中，每当Archibald说完话时，使用`display`显示该段落，如下所示：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now the contents of the displayed passage should appear wherever you put the
    `display` hook. The text of the *Archibald-Questions* passage looks like this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，显示的段落内容应该出现在你放置`display`钩子的地方。*阿奇博尔德-提问*段落的文本如下所示：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We’re writing these questions in their own passage called *Archibald-Questions.*
    Then we’re using a hook to display the text from that passage inside another passage.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这些问题写在了一个名为*阿奇博尔德-提问*的独立段落中。然后我们通过钩子将该段落的文本显示在另一个段落中。
- en: 'The following is what the passage looks like in the editor after the player
    asks Archibald how he died:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是玩家询问阿奇博尔德他是怎么死的后，编辑器中段落的样子：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: And this is what the player sees.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是玩家看到的内容。
- en: '![image](../images/f070-01.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f070-01.jpg)'
- en: The `display` hook lets you reuse passages in more than one place so you don’t
    have to do a lot of retyping.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`display`钩子让你可以在多个地方重用段落，从而避免大量重复输入。'
- en: Using Variables to Store Information
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用变量存储信息
- en: Some rooms in *Ghost Burgers* appear differently the second time a player visits
    them. One reason is that I use `display` to skip some of the messages in *Ghost
    Burgers* the second time a player visits a room. For example, the first time the
    player climbs the ghost stepladder, they see the *Climbing the Stepladder* passage
    and a message saying how weird it is that a stepladder could be a ghost. But the
    next time they use the stepladder, I just use `display` on the *Attic* passage
    so the player can skip straight to the attic.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在*鬼汉堡*中，玩家第二次访问某些房间时，这些房间的外观会有所不同。一个原因是我使用`display`来跳过玩家第二次访问某个房间时的一些信息。例如，玩家第一次爬上鬼梯时，他们会看到*爬梯子*段落以及一条关于梯子是如何变成鬼魂的奇怪信息。但下次他们使用梯子时，我只用`display`显示*阁楼*段落，这样玩家就能直接跳到阁楼。
- en: Whether or not the player sees the *Climbing the Stepladder* passage depends
    on whether or not the player has already climbed the stepladder. To determine
    whether the player has already used the stepladder, you can use a *variable* to
    store information about the game play. Variables *vary*, which means the information
    they store can change.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家是否看到*爬梯子*段落取决于玩家是否已经爬上了梯子。要判断玩家是否已经使用了梯子，你可以使用一个*变量*来存储游戏进度信息。变量是*可变*的，这意味着它们存储的信息可以发生变化。
- en: '*Ghost Burgers* uses 12 different variables. One variable keeps track of whether
    the front door to the mansion is locked. Other variables track whether Archibald
    has introduced himself to the player, whether the player is carrying the ghost
    burger, whether they’ve cleared away the cobwebs in the attic, whether their flashlight
    is on, and so on.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*鬼汉堡*使用了12个不同的变量。一个变量用于追踪大门是否锁着。其他变量追踪阿奇博尔德是否已经自我介绍给玩家，玩家是否携带鬼汉堡，玩家是否已经清理了阁楼上的蜘蛛网，手电筒是否开着，等等。'
- en: Let's look at the flashlight variable. The first time the player enters the
    mansion, they see a couple of sentences about turning on their flashlight.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下手电筒变量。玩家第一次进入庄园时，他们会看到几句关于打开手电筒的说明。
- en: '![image](../images/f071-01.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f071-01.jpg)'
- en: But clearly they shouldn’t see this message every time they walk through the
    foyer, because after the player has entered the mansion, we can assume their flashlight
    is still on. That’s why I use the variable `$flashlight_on` to help Twine remember
    that the player’s flashlight is on. In Twine, variable names always start with
    a dollar sign (`$`), but you can include as many as you want for free.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 但显然他们不应该每次走过前厅时都看到这条信息，因为一旦玩家进入了庄园，我们可以假设他们的手电筒仍然是开着的。这就是为什么我使用变量`$flashlight_on`来帮助Twine记住玩家的手电筒是开着的。在Twine中，变量名总是以美元符号（`$`）开头，但你可以自由地添加任意多个变量。
- en: Boolean Variables
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 布尔变量
- en: There are several different variable types. For example, `$flashlight_on` is
    a *Boolean* type. (It’s named after a mathematician named George Boole.) A Boolean
    variable has a value of either `true` or `false`, like the switch on a flashlight.
    If `$flashlight_on` is `true`, the flashlight is on. If `$flashlight_on` is `false`,
    the flashlight is off.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 变量有几种不同的类型。例如，`$flashlight_on`是一个*布尔*类型的变量。（它以数学家乔治·布尔的名字命名。）布尔变量的值可以是`true`或`false`，就像手电筒开关的状态一样。如果`$flashlight_on`是`true`，则手电筒是开着的。如果`$flashlight_on`是`false`，则手电筒是关着的。
- en: After you create a Boolean variable, you can use Twine hooks to check your variables
    and display different text depending on the variable’s value or condition. For
    example, when the player enters the foyer and turns on their flashlight, they
    shouldn’t see a message about turning it on again. So, I wrote a hook to display
    a different message depending on the condition of the flashlight—whether it’s
    on or off. This is called a *conditional* statement because different conditions
    determine which message is shown.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在你创建一个布尔变量后，你可以使用Twine钩子来检查变量并根据变量的值或条件显示不同的文本。例如，当玩家进入前厅并打开手电筒时，他们不应该再看到关于再次打开手电筒的消息。因此，我编写了一个钩子，根据手电筒的状态（是否打开）显示不同的消息。这就是所谓的*条件*语句，因为不同的条件决定了显示哪条消息。
- en: 'Conditional statements use two major hooks: `set` and `if`. You use `set` to
    set a variable to a value. For example, to turn on the flashlight, you set the
    `$flashlight_on` variable to `true:`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 条件语句使用两个主要钩子：`set`和`if`。你使用`set`来将变量设置为某个值。例如，要打开手电筒，你将`$flashlight_on`变量设置为`true`：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Then you can use `if` to check the variable’s value.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以使用`if`来检查变量的值。
- en: '![image](../images/f072-01.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f072-01.jpg)'
- en: Using if to Check a Variable’s Value
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用if检查变量的值
- en: In *Ghost Burgers*, we use variables to track whether the front door to the
    mansion is locked (`true` for yes, `false` for no), whether the player is carrying
    a hamburger (`true` for hamburger, `false` for no hamburger), or whether the player
    has turned on their flashlight.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在*幽灵汉堡*中，我们使用变量来跟踪大门是否锁上（`true`表示是，`false`表示否），玩家是否携带汉堡（`true`表示有汉堡，`false`表示没有汉堡），或者玩家是否打开了手电筒。
- en: Checking Whether the Flashlight Is On
  id: totrans-97
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 检查手电筒是否打开
- en: To see if the flashlight is on, you can use `if` to check whether the `$flashlight_on`
    variable is `true` or `false:`
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查手电筒是否打开，你可以使用`if`来检查`$flashlight_on`变量是否为`true`或`false`：
- en: '[PRE9]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The following is the full code for the *Foyer* passage. It uses `set` and `if`
    to keep track of whether or not the flashlight is on.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是*前厅*章节的完整代码。它使用`set`和`if`来跟踪手电筒是否打开。
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'First, we use a Boolean to check whether the flashlight is off using `(if:
    $flashlight_on is false)`. If it’s `false`, the `if` tag displays everything in
    the square brackets after it—the part where the player turns their flashlight
    on.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '首先，我们使用布尔值来检查手电筒是否关闭，使用`(if: $flashlight_on is false)`。如果它是`false`，`if`标签会显示方括号内的内容——玩家打开手电筒的部分。'
- en: 'Then we use the conditional `set` to change the `$flashlight_on` variable from
    `false` to `true` using `(set: $flashlight_on to true)`, which keeps track of
    having shown that message. So the next time the player comes through the room,
    the message won’t display again, because `(if: $flashlight is false)` will no
    longer be true.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '然后我们使用条件`set`将`$flashlight_on`变量从`false`改为`true`，使用`(set: $flashlight_on to
    true)`，这会跟踪是否显示了该消息。因此，下次玩家进入房间时，消息将不会再显示，因为`(if: $flashlight_on is false)`将不再为真。'
- en: Triggering Different Messages Based on Flashlight Condition
  id: totrans-104
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 根据手电筒状态触发不同的消息
- en: 'But let’s say you want to show one message when the flashlight is on and a
    different message when it’s off. To do so, you can use `else`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 但是假设你想在手电筒打开时显示一条消息，而在关闭时显示另一条消息。为此，你可以使用`else`：
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: To use `else`, just add `(else:)` and text in square brackets to the end of
    an `if` statement. If the `if` statement isn’t `true`, the text inside the `else`
    statement displays.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`else`，只需在`if`语句的末尾添加`(else:)`和方括号内的文本。如果`if`语句不为`true`，则会显示`else`语句中的文本。
- en: 'Note that both hooks are on the same line because Twine detects *whitespace*—the
    empty spaces between paragraphs. In fact, sometimes you can accidentally introduce
    empty spaces into your story by pressing enter in the middle of your hooks. One
    solution to avoid accidentally adding whitespace is to use braces `{}` to tell
    Twine to display everything between the braces on one line, like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，两个钩子位于同一行，因为Twine会检测*空白*——段落之间的空格。事实上，有时你可能会在钩子中间按下回车，意外地引入空白。为了避免无意中添加空白，一个解决方案是使用大括号`{}`来告诉Twine将大括号中的所有内容显示在一行上，例如：
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, everything between `{` and `}` will display in your story as though it’s
    all on one line, even though it spans several lines of code. This syntax is particularly
    useful when you’re writing lots of hooks in your passages, because you can use
    whitespace to make the hooks easier for you to read without displaying the whitespace
    to the player.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有在`{`和`}`之间的内容会像在一行中一样显示在你的故事里，尽管它可能跨越了好几行代码。这种语法在你编写大量钩子时特别有用，因为你可以使用空格来让钩子更容易阅读，而不会将空格显示给玩家。
- en: Making Ghosts Appear Conditionally
  id: totrans-111
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 条件性地让幽灵出现
- en: 'In *Ghost Burgers*, we use `if` and `else` to determine whether ghosts should
    appear as shown in the Library code:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在*幽灵汉堡*中，我们使用`if`和`else`来决定幽灵是否应该出现，如下所示的图书馆代码：
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If ghosts aren’t visible `(if: $ghosts_visible is false)`, the player only
    sees the trapdoor. If ghosts are visible, we use `(else:)` to display the ghost
    ladder leading up to the trapdoor so the player can climb it.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '如果幽灵不可见`(if: $ghosts_visible is false)`，玩家只会看到陷阱门。如果幽灵可见，我们使用`(else:)`来显示通向陷阱门的幽灵梯子，玩家可以爬上去。'
- en: '**NOTE**'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: A link can be part of a hook, too. Just make sure you use two square brackets
    on either side of a link or one on either side of the hook.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 链接也可以是钩子的一部分。只要确保在链接的两边使用两个方括号，或者在钩子的两边使用一个方括号。
- en: Now you know how to show items based on certain conditions.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何根据特定条件显示项目了。
- en: Integer Variables
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 整数变量
- en: To keep track of more than two items or events, you can use an integer variable.
    An *integer* is a whole number that isn’t a fraction, such as 1, 10, 33, 5000,
    or 0.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟踪两个以上的项目或事件，你可以使用整数变量。*整数*是一个不是分数的整数，如1、10、33、5000或0。
- en: For example, in *Ghost Burgers*, the player can talk to their friend Astrid
    if they don’t know what to do next or can’t figure out something, and Astrid will
    give them a hint. The following figure shows an example.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在*幽灵汉堡*中，如果玩家不知道接下来该做什么或无法解决某个问题，他们可以与朋友Astrid交谈，Astrid会给他们一个提示。下图展示了一个示例。
- en: '![image](../images/f075-01.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f075-01.jpg)'
- en: If the player talks to Astrid when they’re looking for a burger, she’ll give
    them one piece of advice. If the player already has the burger and hasn’t fed
    it to the Burger Ghost, she’ll give them a different piece of advice. In fact,
    the game has eight different pieces of advice. Astrid also has something special
    to say the first time the player consults her after turning on the ghost switch.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家在寻找汉堡时与Astrid交谈，她会给他们一个建议。如果玩家已经有了汉堡，但还没有喂给汉堡幽灵，她会给他们另一个建议。实际上，游戏中有八个不同的建议。Astrid还有一些特殊的说法，当玩家第一次开启幽灵开关后与她交谈时，她会说这些话。
- en: 'We use an integer variable to keep track of which piece of advice Astrid should
    give the player. Each number in the variable matches a different piece of advice.
    Here’s a sample of what that code looks like:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个整数变量来跟踪Astrid应该给玩家什么建议。变量中的每个数字对应不同的建议。以下是这段代码的示例：
- en: '[PRE14]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The integer variable `$advice` starts at 0\. When the player discovers that
    the door is locked, the game sets `$advice` to 1\. When the player unlocks the
    door, the game sets `$advice` to 2\. If the player finds the ghost switch but
    doesn’t switch it on, `$advice` is set to 3\. When the player flips the switch,
    `$advice` is set to 4\. Whenever the player talks to Astrid, the game checks all
    possible numbers for the `$advice` variable and shows the message that matches
    the number that `$advice` is currently set to.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 整数变量`$advice`初始值为0。当玩家发现门被锁住时，游戏将`$advice`设置为1。当玩家解锁门时，游戏将`$advice`设置为2。如果玩家找到幽灵开关但没有开启，`$advice`将设置为3。当玩家翻转开关时，`$advice`将设置为4。每当玩家与Astrid交谈时，游戏会检查`$advice`变量的所有可能值，并显示与当前`$advice`值匹配的消息。
- en: 'You can set your variables to whatever you want them to start with in the first
    passage of your game; however, make sure the player can’t return to this passage,
    or the game will reset all those variables to their starting positions! I set
    up all my variables once in the starting passage of my game. Think of it like
    a title screen in a movie: once the player clicks **Start**, they’ll never come
    back to this passage.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在游戏的第一个章节中设置变量的初始值；但要确保玩家无法返回这个章节，否则游戏会重置所有变量到初始位置！我通常会在游戏的开始章节中设置好所有变量。可以把它想象成电影中的片头画面：一旦玩家点击**开始**，他们就再也不会回到这个章节了。
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: By putting this line of code in my starting passage, I make sure that the `$advice`
    variable is set to `0` when a player starts the game.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在我的起始段落中添加这一行代码，我确保玩家开始游戏时，`$advice` 变量被设置为 `0`。
- en: 'Ghost Burgers has 12 variables in total. Here’s what the entire first passage
    in *Ghost Burgers* looks like. I put braces around all the variables because otherwise
    Twine would print an entire blank line for each one:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '*Ghost Burgers* 总共有 12 个变量。以下是*Ghost Burgers*中第一个段落的完整代码。我在所有变量周围加上了大括号，因为否则
    Twine 会为每个变量打印一个完整的空行：'
- en: '[PRE16]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When the player starts the game, the door should be locked, the ladder should
    be unclimbed, the mysterious burger not yet collected. Because the player hasn’t
    done anything at the beginning of the game, most of the variables start as *false*.
    When the player clicks **START**, all the variables should be reset, and the player
    should be able to play a new game!
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家开始游戏时，门应该是锁着的，梯子应该是没有爬过的，神秘的汉堡也还没有被收集。由于玩家在游戏开始时什么也没做，大多数变量都默认为*false*。当玩家点击**START**时，所有变量都应该被重置，玩家应该能够开始新游戏！
- en: Editing Your Story’s Stylesheet
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑你故事的样式表
- en: Little changes in your story’s appearance can have a big effect on how a player
    feels while playing your game. Does *Ghost Burgers* feel spookier than *Interview
    with a Cat!* because it’s on a black background (representing nighttime) instead
    of a bright white one? Do the blurry words in the story feel ghostlier than the
    solid words around them? Experiment with changing the appearance of your story
    and see if its new style changes your perspective. Your story can be as stylish
    as you want it to be.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你故事外观的微小变化可能会对玩家在游戏中的感受产生巨大影响。*Ghost Burgers* 是否因为黑色背景（代表夜晚）而比*Interview with
    a Cat!* 更加神秘？故事中的模糊文字是否比周围的清晰文字更具鬼魅感？尝试改变你故事的外观，看看它的新风格是否改变了你的视角。你的故事可以有你想要的任何风格。
- en: Most websites use *Cascading Style Sheets (CSS)* to determine what the site
    looks like. Twine also uses CSS, and it’s easy to change Twine’s stylesheet using
    CSS. A *stylesheet* in Twine describes how elements on a web page should look.
    Twine comes with its own stylesheet that describes how Twine games should look,
    but you could change it to make the text blue and the background pink.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数网站使用*Cascading Style Sheets (CSS)*来确定网站的外观。Twine 也使用 CSS，并且可以很容易地通过 CSS 更改
    Twine 的样式表。在 Twine 中，*样式表*描述了网页上元素的显示方式。Twine 自带了一个样式表，描述了 Twine 游戏的外观，但你可以修改它，让文字变成蓝色，背景变成粉色。
- en: To find your story’s stylesheet, click the name of your story (below the blue
    story grid), and then click **Edit Story Stylesheet**, as shown here.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到你故事的样式表，请点击你故事的名称（在蓝色故事网格下方），然后点击**编辑故事样式表**，如下所示。
- en: '![image](../images/f078-01.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f078-01.jpg)'
- en: The *Ghost Burgers* stylesheet looks like this.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*Ghost Burgers* 的样式表是这样的。'
- en: '![image](../images/f078-02.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f078-02.jpg)'
- en: This is where you change your story’s appearance. If you don’t make any changes,
    Twine will just use the existing stylesheet. Let’s look at how to make some changes.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是你更改故事外观的地方。如果你不做任何更改，Twine 就会使用现有的样式表。让我们看看如何做一些更改。
- en: Changing the Background Color
  id: totrans-140
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更改背景颜色
- en: 'When you make a new Twine game, its stylesheet is blank. The first change I
    like to make is to modify the background color. Add this code to your Twine game’s
    stylesheet:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个新的 Twine 游戏时，它的样式表是空白的。我喜欢的第一个更改是修改背景颜色。将以下代码添加到你 Twine 游戏的样式表中：
- en: '[PRE17]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This code sets the page’s background color to black. The `body` refers to the
    web page itself, and `tw-story` is short for “Twine story” and affects how your
    story looks. Everything between the braces, `{ }`, describes your Twine game’s
    `body`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将页面的背景颜色设置为黑色。`body`指的是网页本身，`tw-story`是“Twine 故事”的缩写，影响你的故事外观。大括号 `{ }`
    之间的内容描述了你的 Twine 游戏的`body`。
- en: 'When you copy this code into your story’s stylesheet, make sure you enter everything
    precisely as you see it here. CSS needs to use this specific format, or it won’t
    work. The background in Twine stories is black by default, but you could change
    it to any color you want: `blue`, `green`, `purple`, `hotpink`, or `indigo`. (You’ll
    find a more extensive list of HTML color names at [*http://html-color-names.com/color-chart.php/*](http://html-color-names.com/color-chart.php/)).
    Test-play your story to see the new background color.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将此代码复制到故事的样式表中时，请确保准确地输入所有内容。CSS 需要使用这种特定格式，否则无法正常工作。Twine 故事的默认背景是黑色，但你可以将其更改为任何你想要的颜色：`blue`、`green`、`purple`、`hotpink`
    或 `indigo`。（你可以在[*http://html-color-names.com/color-chart.php/*](http://html-color-names.com/color-chart.php/)找到更详细的
    HTML 颜色名称列表。）测试并播放你的故事，查看新的背景颜色。
- en: '![image](../images/f079-01.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f079-01.jpg)'
- en: Stylizing Your Text
  id: totrans-146
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 美化你的文本
- en: 'Next, I changed the passage color in the *Ghost Burgers* stylesheet to white
    using this code:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我使用以下代码将 *Ghost Burgers* 样式表中的段落颜色更改为白色：
- en: '[PRE18]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The code `tw-passage` is short for “Twine passage,” and it contains information
    about how your story’s passages will look.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 代码`tw-passage`是“Twine 段落”的简写，包含有关你的故事段落外观的信息。
- en: 'You can change more than just the color. For example, you can change the font
    family and size by adding something like this:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你不仅可以更改颜色。例如，你可以通过添加如下代码来更改字体家族和大小：
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This code changes the font to Courier New, the font size to 40, and the color
    of all the text in all the passages to hot pink, which looks like this.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将字体更改为 Courier New，字体大小设为 40，并将所有段落中的文本颜色更改为热粉色，效果如下所示。
- en: '![image](../images/f080-01.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f080-01.jpg)'
- en: Adding Fancy Touches
  id: totrans-154
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加华丽的修饰
- en: 'You can also change the width of your text display, which is like an invisible
    box that contains your story’s words, and add a fancy border. Try adding the following
    to `tw-passage`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以更改文本显示区域的宽度，这就像是一个包含你故事文字的隐形框，并添加一个华丽的边框。尝试将以下内容添加到 `tw-passage`：
- en: '[PRE20]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Your display should show a dashed blue border 500 pixels wide.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你的显示应显示一个宽度为 500 像素的虚线蓝色边框。
- en: '![image](../images/f081-01.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f081-01.jpg)'
- en: '**NOTE**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Pixels* are the tiny dots that make up the image on your computer screen.
    The word *pixel* comes from picture elements, and it’s abbreviated as px (for
    example, 500px means 500 pixels).'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '*像素*是构成你计算机屏幕上图像的微小点。*pixel* 这个词来自于“图像元素”，缩写为 px（例如，500px 表示 500 像素）。'
- en: You can change the color of the links in your game, too. For example, if you
    wanted to make your links crimson, you would enter this code
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以更改游戏中链接的颜色。例如，如果你想将链接颜色更改为深红色，你可以输入以下代码：
- en: '[PRE21]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: To learn more about what you can change on the stylesheet, see the Twine **Help**
    page. (Click **Help** on the Twine Stories page, and then click **Change the Font,
    Colors, or Appearance**.)
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于可以在样式表中更改的内容，请查看 Twine **帮助**页面。（点击 Twine 故事页面上的**帮助**，然后点击**更改字体、颜色或外观**。）
- en: Opening Ghost Burgers’ Source Files
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打开《Ghost Burgers》的源文件
- en: If you’re not sure how I created some of the features in this game, you can
    look at the game’s *source code*. To do that, open *Ghost Burgers* in your web
    browser by navigating to [*https://nostarch.com/twinegames/*](https://nostarch.com/twinegames/),
    right-click on the background of the web page (or Control-click if you’re using
    a Mac), and click **Save as**. Make sure you right-click the actual page and then
    save it to your computer. Then, on your Twine Stories page at [*http://twinery.org/2/#!/stories/*](http://twinery.org/2/#!/stories/),
    click **Import From File** to open the *Ghost Burgers.html* file you saved in
    Twine.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不确定我如何创建游戏中的某些功能，你可以查看游戏的*源代码*。为此，打开浏览器中的*Ghost Burgers*，访问 [*https://nostarch.com/twinegames/*](https://nostarch.com/twinegames/)，右击网页背景（如果使用
    Mac，则按住 Control 键点击），然后点击**另存为**。确保右击的是实际页面，然后将其保存到你的计算机中。接着，在你的 Twine 故事页面 [*http://twinery.org/2/#!/stories/*](http://twinery.org/2/#!/stories/)
    上点击**从文件导入**，以便在 Twine 中打开你保存的 *Ghost Burgers.html* 文件。
- en: '![image](../images/f082-01.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f082-01.jpg)'
- en: Now you can look at the guts of *Ghost Burgers*, as shown here.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以查看*Ghost Burgers*的内部结构，如下所示。
- en: '![image](../images/f082-02.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f082-02.jpg)'
- en: Double-click the passages to see how I made them work and which hooks I used.
    You can do this for any of the example games in this book. In fact, you can do
    this for most Twine games. Just remember that although it’s perfectly okay to
    look inside someone’s Twine game to see how they made something, it’s not okay
    to copy someone’s work without asking them! Be respectful when you’re having a
    look-see at other peoples’ creations!
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 双击这些段落，看看我是如何使它们起作用的，以及我使用了哪些钩子。你可以对本书中的任何示例游戏进行同样的操作。事实上，你几乎可以对大多数Twine游戏这么做。只要记住，虽然查看别人Twine游戏的内部实现是完全可以的，但未经允许抄袭别人的作品可不行！在查看别人创作时，要保持尊重！
- en: As you dig through the *Ghost Burgers* code, you’ll find a few techniques I
    haven’t explained, like how I made the cobwebs in the attic. I made those using
    the `Click-replace` hook and named hooks. A *named hook* is just a name that you
    give to a specific hook so *another* hook can do something to it. For example,
    clicking a link at the bottom of the page can change a piece of text near the
    top of the page. Look inside the *Attic* passage and see if you can figure out
    how they work. (You’ll find information on named hooks and all other hooks in
    Twine at *[http://twine2.neocities.org/](http://twine2.neocities.org/))*.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 当你深入研究*Ghost Burgers*的代码时，你会发现一些我没有解释的技巧，比如我是如何制作阁楼里的蛛网的。我是通过`Click-replace`钩子和命名钩子制作的。*命名钩子*就是你给特定钩子指定的一个名称，以便*另一个*钩子能对其进行操作。例如，点击页面底部的链接可以改变页面顶部附近的某段文本。查看*阁楼*段落，看看你能不能弄明白它们是如何工作的。（你可以在*
    [http://twine2.neocities.org/](http://twine2.neocities.org/) *查找到关于命名钩子和所有其他Twine钩子的详细信息。）
- en: Don’t be afraid to try hooks in your own stories!
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 不要害怕在自己的故事中尝试使用钩子！
- en: What You Learned
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你学到的内容
- en: Now you know how to make more sophisticated Twine games. You can keep track
    of what the player has read so that you can change what the player sees, and you
    know how to change your story’s appearance. You’re a programmer now—congratulations!
    From now on, your Twine games can be as simple or complicated as you want them
    to be.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何制作更复杂的Twine游戏了。你可以跟踪玩家阅读过的内容，从而改变玩家看到的内容，你也知道如何改变故事的外观。你现在是程序员了——恭喜！从现在开始，你的Twine游戏可以简单也可以复杂，完全取决于你！
- en: In [Chapter 4](ch04.xhtml), we’ll work with more advanced techniques. If the
    information is more complicated than you’re comfortable with, feel free to skip
    to the game challenges in [Chapter 5](ch05.xhtml)! Programming is not for everyone,
    and that’s fine!
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.xhtml)中，我们将学习更多高级技巧。如果你觉得信息有些复杂，超出了你能接受的范围，可以随时跳到[第5章](ch05.xhtml)的游戏挑战部分！编程不是每个人的强项，这也没关系！
