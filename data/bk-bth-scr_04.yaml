- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 3 SCOPE AND DELAYED EXPANSION
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3 范围和延迟扩展
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: 'In the prior chapter, you learned about variables, how to set them, and how
    to resolve their values. In this chapter, I’ll focus on the setlocal command,
    which is central to some significant and disparate features of Batch and alters
    when, where, and how you can handle variables. First, it defines *scope*: where
    and when those variables can be accessed and manipulated. Second, it enables a
    feature called *delayed expansion*, which alters how variables are resolved, one
    upshot of which allows you to store one variable inside another variable.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了变量的概念、如何设置它们以及如何解析它们的值。在本章中，我将重点介绍 setlocal 命令，这是批处理的一些重要且不同特性的核心，它改变了你处理变量的时机、地点和方式。首先，它定义了*范围*：这些变量在哪里、何时可以访问和操作。其次，它启用了一个叫做*延迟扩展*的功能，它改变了变量的解析方式，其中一个结果是允许你将一个变量存储在另一个变量中。
- en: All languages handle scope in some fashion, but delayed expansion, or something
    similar, is far less common, and you’ll see some surprising uses for it. Finally,
    the setlocal command enables *command extensions*, an awkward term for a mass
    of additional functionality that’s turned on for many other Batch commands.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所有语言都以某种方式处理范围，但延迟扩展，或者类似的功能，要少得多，你会看到一些出乎意料的用途。最后，setlocal 命令启用了*命令扩展*，这是一个尴尬的术语，指的是为许多其他
    Batch 命令启用的一堆附加功能。
- en: Scope
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 范围
- en: Scope defines the life span of a variable. A *global variable* can be set, resolved,
    deleted, and modified anywhere, and that works fine for most simple bat files.
    A *local variable* is created with a limited shelf life, meant to be accessible
    in a single section of code where it’s *in scope*. Where those modifications aren’t
    recognized, the variable is *out of scope*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 范围定义了一个变量的生命周期。*全局变量*可以在任何地方设置、解析、删除和修改，这对于大多数简单的批处理文件来说是有效的。*局部变量*在一个有限的生命周期内创建，旨在仅在某个代码段中可访问，在该段中它是*在范围内*的。如果在其他地方修改变量而无法识别，那么该变量就*超出范围*了。
- en: In Batch, the setlocal command starts a section of code where variables are
    in scope, and the endlocal command ends that section, making those variables out
    of scope. Everything defined or manipulated between the two commands is active
    in that space, but after execution of the endlocal command, those variables revert
    to their prior state.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Batch 中，setlocal 命令开始了一个代码段，在该段中变量是可访问的，而 endlocal 命令结束该代码段，使这些变量超出范围。在两个命令之间定义或操作的所有内容在该空间内有效，但在执行
    endlocal 命令后，这些变量会恢复为先前的状态。
- en: 'To demonstrate, the following code writes the state of three variables to the
    console both in and out of scope of the setlocal command. One is defined only
    inside the scope of the setlocal, one only outside, and one both inside and outside.
    To the right of the echo commands, I’ve included remarks showing the results,
    in particular the resolved variables, written to the console:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，以下代码将变量的状态输出到控制台，既在 setlocal 命令的范围内，也在范围外。一个变量仅在 setlocal 的范围内定义，一个仅在范围外定义，另一个则在范围内外都定义。在
    echo 命令的右侧，我包含了备注，显示了结果，特别是解析后的变量，输出到控制台：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There’s a lot to unpack here. Let’s take the first variable defined: inAndOut
    is set to OUT ❶ before the setlocal ❷ is executed, meaning that it was set out
    of scope of the command. After the setlocal executes, the same variable is set
    to IN ❸ where it’s in scope. When inAndOut is first interrogated, it resolves
    to IN ❹ because it’s in scope. But after the endlocal ❺ executes, it’s out of
    scope and reverts to its prior state, which is OUT ❻. (As a side note, IN-N-OUT
    is always set to delicious.)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多内容需要解释。我们先来看定义的第一个变量：在 setlocal ❷ 执行之前，inAndOut 被设置为 OUT ❶，这意味着它是在命令的范围外设置的。在执行
    setlocal 后，同一个变量被设置为 IN ❸，此时它在范围内。当首次查询 inAndOut 时，它解析为 IN ❹，因为它在范围内。但在执行 endlocal
    ❺ 后，它就超出了范围并恢复为先前的状态，即 OUT ❻。（顺便提一下，IN-N-OUT 始终是美味的。）
- en: Now consider the inner variable, which is defined just once, when it’s in scope.
    That is, after the setlocal ❷ executes, it’s set to IN ❸. The variable then resolves
    to the value of IN ❹ before the endlocal ❺ is executed, but here’s where it gets
    interesting; after the endlocal ❺, it reverts to its prior state of not being
    defined at all—that is, null or empty ❻.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑一下内部变量，它只在范围内定义一次。也就是说，在执行 setlocal ❷ 后，它被设置为 IN ❸。然后在执行 endlocal ❺ 之前，该变量解析为
    IN ❹ 的值，但有趣的地方在这里；在执行 endlocal ❺ 后，它恢复为先前未定义的状态——也就是 null 或空 ❻。
- en: The final variable is outer, and it’s also defined just one time, but when it’s
    out of scope. It’s set to OUT ❶ before the setlocal ❷ executes. As you might expect,
    the variable is still OUT ❻ after the endlocal ❺ executes when it’s out of scope.
    But as you might not expect, its value is also available while in scope of the
    setlocal ❷, as its value also is OUT ❹ before the endlocal ❺ executes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的变量是 outer，它也只定义了一次，但当它超出作用域时，它在 setlocal ❷ 执行前被设置为 OUT ❶。正如你所料，在 endlocal
    ❺ 执行时，当它超出作用域时，变量的值仍然是 OUT ❻。但如你所不料，它的值在 setlocal ❷ 的作用域内也可以使用，因为它的值在 endlocal
    ❺ 执行前也是 OUT ❹。
- en: 'This example shows that the setlocal command doesn’t inhibit us from using
    variables already in scope. Everything existing up to that point is still available.
    What it does is this: *a snapshot is taken of the environment at the moment that
    the* setlocal *executes, to which it returns when the* endlocal *executes.*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子表明，setlocal 命令不会阻止我们使用已经在作用域内的变量。到目前为止存在的一切仍然可用。它的作用是：*setlocal 执行时会对环境进行快照，并在
    endlocal 执行时返回该环境快照。*
- en: 'Defining scope with the setlocal and endlocal commands has just one use, but
    it’s an important one: to hide or section off variables in a portion of code to
    prevent conflicts. By default, Batch variables are global; a variable set in one
    bat file can be resolved or reset in a called bat file and even in a called internal
    routine. By default, many other languages use the opposite methodology, limiting
    the scope of variables used inside called programs and routines. Sometimes global
    variables are perfectly fine, but in other instances, limiting the scope is the
    better option. The ability to define scope gives you the power to use what’s best
    for your application.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 setlocal 和 endlocal 命令定义作用域只有一个用途，但它非常重要：隐藏或分隔代码中的变量，以防止冲突。默认情况下，Batch 变量是全局的；在一个
    bat 文件中设置的变量可以在被调用的 bat 文件中解析或重置，甚至在被调用的内部例程中也是如此。默认情况下，许多其他编程语言使用相反的方法，限制在被调用的程序和例程内部使用的变量的作用域。有时，全局变量完全没问题，但在其他情况下，限制作用域是更好的选择。定义作用域的能力使你能够为你的应用选择最合适的方式。
- en: If you’re coding a utility bat file that’ll be called by many other processes,
    you may have no idea what variables the calling process is using. Placing a setlocal
    at the top of your bat file and an endlocal at or near the end defines and limits
    scope. The upshot is that if you happened to use a variable name in common with
    the calling bat file, you won’t step on its variable, which allows the caller
    to invoke your bat file with the assurance that there’ll be no ill side effects.
    The same is often done with called internal routines. (In [Chapter 10](chapter10.xhtml),
    we’ll look at calling internal routines and other bat files.)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在编写一个将被许多其他进程调用的工具 bat 文件，你可能不知道调用进程正在使用哪些变量。在 bat 文件的顶部放置一个 setlocal，并在末尾或接近末尾放置一个
    endlocal，可以定义并限制作用域。这样做的结果是，如果你恰好使用了与调用 bat 文件相同的变量名，你不会覆盖它的变量，这样调用者可以放心地调用你的
    bat 文件，确保没有不良副作用。对于被调用的内部例程，通常也会采取这种做法。（在[第10章](chapter10.xhtml)中，我们将研究如何调用内部例程和其他
    bat 文件。）
- en: Defining scope raises an interesting question. If a utility bat file is called
    to perform a specific task, there’s a good chance that at least part of that task
    is to set and return a certain variable. There’s a means for allowing a variable
    or variables to survive an endlocal command, and I’ll share that in [Chapter 16](chapter16.xhtml).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 定义作用域提出了一个有趣的问题。如果调用一个工具 bat 文件来执行特定任务，那么很有可能这个任务的部分内容是设置并返回某个变量。有一种方法可以让变量在执行
    endlocal 命令后仍然生效，我将在[第16章](chapter16.xhtml)中分享这个方法。
- en: Delayed Expansion
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 延迟扩展
- en: 'The setlocal command is a multipronged tool. In addition to defining scope,
    it also enables delayed expansion when used with a very descriptive argument:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: setlocal 命令是一个多功能工具。除了定义作用域外，当与非常具体的参数一起使用时，它还启用了延迟扩展：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Fittingly, the argument is spelled out without any semblance of abbreviation.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 恰如其分，参数是完全展开的，没有任何缩写的迹象。
- en: 'Delayed expansion implements two rounds of variable resolution: the initial
    resolution and a delayed resolution or expansion. When the interpreter executes
    a bat file, it processes each line of code one by one, first reading in or parsing
    a line and then executing that line. The initial resolution happens as the interpreter
    parses the line, and the delayed expansion happens as it executes the line.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 延迟扩展实现了两轮变量解析：初始解析和延迟解析或扩展。当解释器执行 bat 文件时，它会逐行处理代码，首先读取或解析一行，然后执行该行。初始解析发生在解释器解析这一行时，而延迟扩展发生在它执行这一行时。
- en: This feature allows for some interesting behavior that isn’t available in most
    languages. For instance, you can treat the value of a variable as a variable itself—or
    its value can be treated as a portion of another variable name. In [Listing 3-1](#Lis3-1),
    Toyota is a variable name as well as a value; that’s not a coincidence.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特性允许一些在大多数编程语言中无法实现的有趣行为。例如，你可以将一个变量的值视为变量本身——或者它的值可以作为另一个变量名的一部分。在 [列表 3-1](#Lis3-1)
    中，Toyota 既是变量名，也是值；这不是巧合。
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 3-1: Setting Car and Toyota with delayed expansion enabled'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 3-1：设置启用延迟扩展的 Car 和 Toyota
- en: First, we need the setlocal command with the argument to enable delayed expansion.
    Next, we set Car to the make of a car, which is a Toyota in this case. But Toyota
    produces several models, and if we want to capture a particular model, we can
    set the variable defined as Toyota to the value Prius.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要使用 setlocal 命令并提供启用延迟扩展的参数。接下来，我们将 Car 设置为汽车的品牌，这里是 Toyota。但 Toyota 生产多个车型，如果我们想捕获特定的车型，可以将定义为
    Toyota 的变量设置为 Prius 的值。
- en: Values and Variables
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 值与变量
- en: As I mentioned previously, Toyota is both a value and a variable. It’s the value
    of the Car variable and also a variable containing the Prius value. Now we can
    execute three statements to write three variables to the console, as shown in
    [Listing 3-2](#Lis3-2).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Toyota 既是一个值，也是一个变量。它是 Car 变量的值，同时也是一个包含 Prius 值的变量。现在，我们可以执行三条语句，将三个变量输出到控制台，如
    [列表 3-2](#Lis3-2) 所示。
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 3-2: Resolving Car by three different means'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 3-2：通过三种不同方式解析 Car
- en: 'Here’s the output [Listing 3-2](#Lis3-2) generates:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 [列表 3-2](#Lis3-2) 生成的输出：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The first resolution of Car is quite pedestrian by now. Surrounding the variable
    with percent signs (%) resolves it to its value of Toyota. The second command
    introduces something new: exclamation marks (!) are used as delimiters to resolve
    a variable, !Car!, instead of percent signs. The variable surrounded with exclamation
    marks also resolves to Toyota, but why have two different characters that perform
    the same function? The answer will present itself after we examine the final command.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Car 的第一次解析现在显得相当平常。将变量用百分号包围（%）会解析为它的值 Toyota。第二条命令引入了新东西：使用感叹号（!）作为分隔符来解析变量
    !Car!，而不是百分号。被感叹号包围的变量同样会解析为 Toyota，但为什么要使用两个不同的符号来完成相同的功能呢？答案将在我们查看最后一条命令后显现。
- en: 'The third resolution truly shows the power of delayed expansion. The variable
    is surrounded by percent signs, and that’s surrounded by exclamation marks. The
    interpreter first resolves %Car% to be Toyota. Make sure that you are seated for
    this next part: that value is now surrounded by exclamation marks, which causes
    it to be resolved yet again, so !Toyota! becomes Prius. Putting it all together,
    the variable is resolved like so:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种解析方法真正展示了延迟扩展的强大功能。变量被百分号包围，接着又被感叹号包围。解释器首先将 %Car% 解析为 Toyota。请确保你坐好，接下来的部分可能让你吃惊：这个值现在被感叹号包围，这导致它再次被解析，因此
    !Toyota! 变成了 Prius。将所有内容组合在一起，变量被解析如下：
- en: '!%Car%! → !Toyota! → Prius'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '!%Car%! → !Toyota! → Prius'
- en: 'To answer the question about two different characters performing the same function,
    the interpreter needs both to perform this resolution since we now have two rounds
    of it: percent signs do the inner resolution, and exclamation marks do the outer
    resolution. (Can’t we just encase the variable with two sets of double percent
    signs? No, the syntax for the for command has a specific purpose for the double
    percent signs, which you’ll learn about in [Chapter 17](chapter17.xhtml).)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了回答关于两个不同符号执行相同功能的问题，解释器需要这两个符号来完成解析，因为现在我们有了两轮解析：百分号用于内层解析，而感叹号用于外层解析。（我们能不能用两组双百分号将变量包裹起来？不行，for
    命令的语法对双百分号有特定用途，你将在 [第 17 章](chapter17.xhtml) 中学习到这个内容。）
- en: 'The best way to demonstrate exactly how delayed expansion affects the code
    is to run the same code without it enabled. If we remove the setlocal from [Listing
    3-1](#Lis3-1), the results of [Listing 3-2](#Lis3-2) are:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 演示延迟扩展如何影响代码的最佳方式是运行相同的代码，但不启用延迟扩展。如果我们从[列表 3-1](#Lis3-1)中移除 `setlocal`，则[列表
    3-2](#Lis3-2)的结果是：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Without delayed expansion, the exclamation marks are treated as simple text
    and are of no significance to Batch. The !Car! variable isn’t resolved at all;
    the interpreter doesn’t even consider those three letters to be a variable. The
    !%Car%! variable experiences one round of variable resolution, but again, the
    exclamation marks are simply along for the ride.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有延迟扩展，感叹号将被视为普通文本，对批处理没有任何意义。!Car! 变量根本没有被解析；解释器甚至不会把这三个字母当作一个变量。!%Car%!
    变量经历了一轮变量解析，但感叹号只是陪衬。
- en: In [Chapter 2](chapter2.xhtml), I adeptly sidestepped an issue by mentioning
    that a variable name shouldn’t start with a number. Technically, you can set such
    a variable, but you won’t be able to resolve it with percent signs; you can do
    it only with exclamation marks and with delayed expansion enabled. The best way
    to deal with this little oddity is never to start variable names with numbers.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第二章](chapter2.xhtml)中，我巧妙地避开了一个问题，提到过变量名不应该以数字开头。从技术上讲，你可以设置这样的变量，但你无法通过百分号解析它；只能通过感叹号，并且必须启用延迟扩展。处理这个小怪癖的最佳方法是避免让变量名以数字开头。
- en: Now we have a variable that can be resolved to a value that’s resolved a second
    time to be yet another value. That’s not typically easily done, or even done at
    all, in those fancy modern compiled languages. To be honest, as cool as an entire
    word being both a variable and a value may be, it’s not used often in the real
    world, but partial variable names have many applications.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个变量，它可以解析为一个值，这个值再次被解析为另一个值。这通常在那些现代编译语言中难以做到，或者根本做不到。说实话，尽管整个词既是变量又是值听起来很酷，但在现实世界中并不常用，但部分变量名有很多应用场景。
- en: Partial Variable Names
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 部分变量名
- en: 'This technique becomes even more interesting and useful when the resolved value
    is used as just a portion of a variable name. To demonstrate, consider these set
    commands defining the signature culinary masterpieces of five cities:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当解析值仅作为变量名的一部分使用时，这种技巧变得更加有趣和实用。为了演示，考虑以下设置命令，它们定义了五个城市的标志性美食：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Each variable name, which is the concatenation of food and a common abbreviation
    for a city, is set to the dish for which that city is famous. Only five variables
    are shown, but you could define any number.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 每个变量名是由食物和城市的常用缩写连接而成，并被设置为该城市著名的菜肴。这里只展示了五个变量，但你可以定义任意数量的变量。
- en: 'The following set of variables has the same abbreviations for the five cities,
    where each is appended with Full and assigned the full name of the city:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下一组变量使用了五个城市的相同缩写，每个缩写后附加了 "Full"，并被赋予该城市的全名：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now consider this echo command with two examples of delayed expansion:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑这个带有两种延迟扩展示例的 `echo` 命令：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If city is set to NO and delayed expansion is enabled, this command writes
    the following to the console:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 city 被设置为 NO 并启用了延迟扩展，那么这个命令会将以下内容写入控制台：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To understand how this worked, let’s first take a look at the !food%city%!
    variable. The inner variable, city, and its encasing percent signs is resolved
    to NO, revealing the foodNO variable. Next the exclamation mark delimiters resolve
    it to the most delicious sandwich ever created; no, it’s not a glorified ham and
    cheese sandwich. To summarize:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解这一过程，让我们先看看 !food%city%! 变量。内部变量 city 和它的百分号符号被解析为 NO，从而揭示了 foodNO 变量。接着，感叹号定界符将其解析为最美味的三明治；不，这不是一份华丽的火腿芝士三明治。总结一下：
- en: '!food%city%! → !foodNO! → Muffuletta Sandwich'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '!food%city%! → !foodNO! → 穆夫尔塔三明治'
- en: 'Similarly, the full name of the city is also resolved in two steps. The only
    difference here is that the hardcoded portion of the variable name comes after
    the portion to be resolved:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，城市的全名也会通过两步解析。这里唯一的区别是，变量名中的硬编码部分位于要解析的部分之后：
- en: '!%city%Full! → !NOFull! → New Orleans'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '!%city%Full! → !NOFull! → 新奥尔良'
- en: 'The echo command behaves differently for different values of city, which is
    important to note. It writes the following four sentences to the console when
    the variable is set to NYC, Nash, Chic, and STL, respectively:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo` 命令对不同的城市值表现不同，这一点很重要。它会根据变量设置为 NYC、Nash、Chic 和 STL 时，依次向控制台输出以下四句：'
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: I opened this section by suggesting that having a resolved value as just a portion
    of a variable name is more useful. This example is pedagogical, but you can easily
    extend the technique to something more practical. In the professional realm, instead
    of the realm of city-centric cuisines, you could create a set of variables to
    define the paths for the transmission of files to different facilities based on
    their location, say pathNYC, pathNash, and pathSTL. Then a single command to copy
    a file can use the same delayed expansion technique to transmit the file to one
    of many destinations. (I’ll use this technique again in [Chapter 5](chapter5.xhtml)
    when discussing substringing.)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这一节开始时提到过，将解析后的值作为变量名的一部分更为有用。这个例子是为了教学目的，但你可以很容易地将这种技术扩展到更实际的应用中。在专业领域中，与城市中心的美食领域不同，你可以创建一组变量，根据不同地点定义文件传输路径，例如
    pathNYC、pathNash 和 pathSTL。然后，一条命令就可以利用相同的延迟扩展技术，将文件传输到多个目的地中的一个。（我将在[第5章](chapter5.xhtml)中再次使用这种技术，讨论子字符串操作。）
- en: Creative coders can make a seemingly unlimited use of delayed expansion, and
    we’ll get into some of those uses when we explore arrays and hash tables in [Chapter
    29](chapter29.xhtml). The for command in [Part II](part2.xhtml) will rely greatly
    on delayed expansion, and possibly its most interesting application will come
    in [Chapter 16](chapter16.xhtml) where a variable will be able to hold two values
    simultaneously.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 创意程序员可以几乎无限制地使用延迟扩展，我们将在[第29章](chapter29.xhtml)中探讨数组和哈希表时，深入了解一些这些应用。第二部分中的
    `for` 命令（见[第II部分](part2.xhtml)）将大大依赖延迟扩展，或许它最有趣的应用将在[第16章](chapter16.xhtml)中展示，在那里一个变量将能够同时保存两个值。
- en: Command Extensions
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命令扩展
- en: 'The setlocal command also accepts an argument that turns on command extensions.
    Unlike delayed expansion, command extensions should be active by default, but
    you can turn them on explicitly with the following command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`setlocal` 命令也接受一个参数，用于开启命令扩展。与延迟扩展不同，命令扩展默认应处于激活状态，但你可以通过以下命令显式启用它们：'
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Enabling command extensions unlocks a great deal of additional functionality
    and available options for several Batch commands. For instance, the for command
    is indispensable for any Batch coder. We haven’t discussed it yet, but Batch has
    one variant of the for command when command extensions are disabled. With command
    extensions enabled, however, it becomes a turbocharged workhorse with at least
    10 forms. Even the set command discussed in [Chapter 2](chapter2.xhtml) (not often
    considered a dynamic or interesting command) has additional functionality and
    available options with this setting. The specific features vary from command to
    command, and you can retrieve their details at the command prompt via the help
    command (also covered in [Chapter 2](chapter2.xhtml)).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 启用命令扩展解锁了大量额外的功能和可用选项，适用于多个批处理命令。例如，`for` 命令对于任何批处理程序员来说都是不可或缺的。我们尚未讨论它，但批处理有一种变体，当命令扩展禁用时使用。启用命令扩展后，它变成了一匹动力十足的工作马，至少有10种形式。即使是[第2章](chapter2.xhtml)中讨论的
    `set` 命令（通常不被认为是动态或有趣的命令）也有了这个设置后，附加的功能和可用选项。具体功能因命令而异，你可以通过命令提示符上的 `help` 命令（在[第2章](chapter2.xhtml)中也有介绍）获取它们的详细信息。
- en: 'To demonstrate the additional functionality unlocked for just one command by
    enabling command extensions, return to the command prompt and enter the same command
    from the prior chapter to retrieve documentation on the set command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示通过启用命令扩展解锁的额外功能，返回命令提示符并输入上一章中的相同命令，以获取关于 `set` 命令的文档：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After a short few lines of text detailing what the command does when command
    extensions aren’t enabled, the interpreter displays the following line:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在简短的几行文字后，解释当命令扩展未启用时命令的作用，解释器将显示以下行：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'What follows is all of the expanded functionality that has been unlocked. There’s
    far too much information to show it all, but in this small sample two previously
    unavailable options are shared:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是所有已解锁的扩展功能。信息量太大，无法全部展示，但在这个小样本中，展示了两个先前无法使用的选项：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: I mentioned these options in [Chapter 2](chapter2.xhtml), but I didn’t mention
    that command extensions turn them on. The help command gives you several times
    the amount of information about the set command’s functionality with command extensions
    enabled than it does when disabled, and the same is true for many other commands.
    As I introduce more commands, I encourage you to investigate them further with
    the help command to see a larger list of uses and options and to see what’s turned
    on with command extensions.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我在[第2章](chapter2.xhtml)中提到了这些选项，但没有提到命令扩展会启用它们。帮助命令在启用命令扩展时，比在禁用时提供更多的 set 命令功能信息，许多其他命令也同样如此。随着我介绍更多的命令，我鼓励你通过帮助命令进一步调查它们，以查看更多的用途和选项，并了解命令扩展开启时会启用哪些功能。
- en: Final Thoughts on setlocal and endlocal
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于 setlocal 和 endlocal 的最终想法
- en: 'After two decades of coding bat files, I have some strong opinions on the use
    of the setlocal and endlocal commands, and I’m not shy about sharing them. Every
    high-level bat file that I write has this command at or near the very first line
    of code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写 bat 文件的二十年中，我对使用 setlocal 和 endlocal 命令有一些强烈的看法，我并不忌讳分享它们。每个我编写的高层 bat 文件，在代码的最前面或靠近最前面的位置都有这个命令：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: I’m defining a high-level bat file as a bat file that isn’t called from another
    bat file. I’ve rarely come across an instance where I didn’t want command extensions
    and delayed expansion enabled. There’s virtually no cost for all the extra features.
    It’s as if you could turn your Toyota into a Lamborghini with none of the disadvantages
    such as cost and gas mileage. But in that rare instance, you can disable these
    features with the DisableExtensions and DisableDelayedExpansion arguments.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我将高层 bat 文件定义为没有从其他 bat 文件调用的 bat 文件。我很少遇到不希望启用命令扩展和延迟扩展的情况。这些额外的功能几乎没有成本。就像你可以把一辆丰田变成一辆兰博基尼，而没有像成本和油耗这样的问题。但在那种罕见的情况下，你可以通过
    DisableExtensions 和 DisableDelayedExpansion 参数禁用这些功能。
- en: Additionally, whenever I code some logic that might adversely affect other code,
    I precede that logic with a simple setlocal command with no arguments and terminate
    it with a corresponding endlocal command. Don’t fret; delayed expansion is still
    enabled from the original setlocal command. You can even nest multiple setlocal
    and endlocal commands, creating subsections of code with a defined scope within
    subsections, but not more than 32 levels deep. I have never come close to this
    limitation, but if you do, you can nest further in a called routine or another
    bat file. (I’ll get to how those calls are performed in [Chapter 10](chapter10.xhtml).)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，每当我编写可能对其他代码产生不良影响的逻辑时，我会在该逻辑前加上一个没有参数的简单 setlocal 命令，并用相应的 endlocal 命令结束它。别担心；延迟扩展仍然是从原始的
    setlocal 命令中启用的。你甚至可以嵌套多个 setlocal 和 endlocal 命令，在子部分内创建具有定义范围的代码子区块，但不能超过32层深。我从未遇到过接近这个限制的情况，但如果你遇到，可以在被调用的例程或其他
    bat 文件中进一步嵌套。（关于这些调用是如何执行的，我会在[第10章](chapter10.xhtml)中讲到。）
- en: For the sake of completeness, it’s good form for that original setlocal to have
    a corresponding endlocal at the end of the bat file, but if omitted, the interpreter
    executes an implied endlocal before exiting the high-level bat file.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整性起见，最好让原始的 setlocal 命令在 bat 文件的末尾有一个相应的 endlocal 命令，但如果省略，解释器会在退出高层 bat
    文件前执行一个隐式的 endlocal。
- en: Crucially, this book is written with the assumption that command extensions
    and delayed expansion are enabled. In general, I won’t bore you with what functionality
    is unlocked with these settings and what isn’t. If an example from this book isn’t
    working in your testing, make sure that you’ve run this command with both of its
    enabling arguments.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是，这本书是在假设启用了命令扩展和延迟扩展的前提下编写的。通常情况下，我不会让你感到无聊去了解在这些设置下解锁了哪些功能，哪些没有。如果你在测试中发现书中的示例无法正常工作，请确保你在执行该命令时使用了两个启用参数。
- en: NOTE
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*I have just one exception to the rule about starting all high-level bat files
    with the particular setlocal command mentioned previously, and it’s in this book.
    In later chapters I’ll provide some examples of very short bat files, maybe just
    two or three lines. These simple examples might not require this command, and
    its use might pull the focus away from the topic at hand. In those instances,
    I won’t include the command, but understand that it could and should be there.*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*我只有一个例外，就是关于所有高级bat文件都以之前提到的特定setlocal命令开始的规则，这个例外出现在本书中。在后面的章节中，我将提供一些非常简短的bat文件示例，可能只有两三行。这些简单的示例可能不需要这个命令，它的使用可能会把注意力从当前话题中分散开。在这些情况下，我不会包含该命令，但请理解，它本来可以并且应该存在。*'
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: The main focus of this chapter was the setlocal command, which defines scope
    and enables command extensions. Most important, it enables delayed expansion,
    opening vast possibilities for defining and using variables.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要内容是setlocal命令，它定义作用域并启用命令扩展。最重要的是，它启用了延迟扩展，为定义和使用变量开辟了广阔的可能性。
- en: With delayed expansion enabled, you saw how you can write out one of five sentences
    based on the value of a variable defining a city with just a single command. But
    if delayed expansion had been disabled, you may have resorted to interrogating
    that variable with five if commands. In the example laid out in this chapter,
    that would’ve been an inelegant solution, but in general, the if command is an
    important workhorse in any language, and Batch is no different. In the next chapter,
    I’ll discuss it in detail—and since this is Batch—its idiosyncrasies.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 启用延迟扩展后，你看到如何仅通过一个命令，根据定义城市的变量值，输出五个句子中的一个。但如果禁用了延迟扩展，你可能不得不通过五个if命令来查询该变量。在本章中的示例中，这将是一个不优雅的解决方案，但一般来说，if命令是任何语言中重要的工作马，Batch也不例外。在下一章，我将详细讨论它——而且由于这是Batch——还会谈到它的一些特性。
