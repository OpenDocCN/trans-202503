- en: '13'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '13'
- en: DECOMPILING AND REVERSING MANAGED ASSEMBLIES
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 反编译与逆向托管程序集
- en: '![](images/00010.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00010.jpg)'
- en: Mono and .NET use a VM much as Java does to run compiled executables. The executable
    format for .NET and Mono is written using a higher-level bytecode than native
    x86 or x86_64 assembly, called managed assembly. This is in contrast to the native,
    unmanaged executables from languages like C and C++. Because managed assemblies
    are written in a higher-level bytecode, decompiling them is fairly straightforward
    if you use a few libraries that are not a part of the standard library.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Mono 和 .NET 使用虚拟机，就像 Java 一样，用来运行已编译的可执行文件。 .NET 和 Mono 的可执行文件格式使用一种比原生 x86
    或 x86_64 汇编语言更高层次的字节码，称为托管程序集。这与 C 和 C++ 等语言的原生非托管可执行文件不同。由于托管程序集是用更高层次的字节码编写的，所以如果使用一些不属于标准库的库，反编译它们是相对简单的。
- en: In this chapter, we will write a short decompiler that accepts a managed assembly
    and writes the source code back to a specified folder. This is a very useful tool
    for malware researchers, reverse engineers, or anyone needing to perform binary
    diffing (comparing two compiled binaries or libraries for differences at the byte
    level) between two .NET libraries or applications. We will then briefly cover
    a program shipped with Mono called monodis that is very useful for analyzing assemblies
    outside of source code analysis for potential backdoors and other nefarious code.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将编写一个简短的反编译器，它接受一个托管程序集并将源代码写回指定的文件夹。这个工具对恶意软件研究人员、逆向工程师，或者任何需要在两个 .NET
    库或应用程序之间执行二进制差异比较（比较两个已编译的二进制文件或库在字节级别的差异）的人来说，都是非常有用的。接下来，我们将简要介绍一个随 Mono 提供的程序，叫做
    monodis，它在分析程序集时非常有用，除了源代码分析，还可以用于发现潜在的后门和其他恶意代码。
- en: Decompiling Managed Assemblies
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 反编译托管程序集
- en: A number of easy-to-use .NET decompilers exist. However, their UIs tend to use
    toolkits like WPF (Windows Presentation Foundation) that keep them from being
    cross-platform (and mainly only running on Windows). Many security engineers,
    analysts, and pentesters run Linux or OS X, so this isn’t super useful. ILSpy
    is one example of a good Windows decompiler; it uses the cross-platform ICSharpCode.Decompiler
    and Mono.Cecil libraries for decompilation, but its UI is Windows specific, so
    it isn’t usable on Linux or OS X. Luckily, we can build a simple tool that takes
    an assembly as an argument and uses these two previously mentioned open source
    libraries to decompile a given assembly and write the resulting source code back
    to disk for later analysis.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多易于使用的 .NET 反编译器。然而，它们的用户界面通常使用像 WPF（Windows Presentation Foundation）这样的工具包，这使得它们不能跨平台使用（通常只能在
    Windows 上运行）。许多安全工程师、分析师和渗透测试人员使用 Linux 或 OS X 系统，因此这些工具对于他们来说并不十分实用。ILSpy 就是一个好的
    Windows 反编译器示例；它使用跨平台的 ICSharpCode.Decompiler 和 Mono.Cecil 库进行反编译，但它的用户界面是 Windows
    专用的，因此在 Linux 或 OS X 上无法使用。幸运的是，我们可以构建一个简单的工具，接受一个程序集作为参数，并使用这两个先前提到的开源库反编译给定的程序集，并将生成的源代码写回磁盘，以供后续分析。
- en: Both of these libraries are available in NuGet. Installation will depend on
    your IDE; if you are using Xamarin Studio or Visual Studio, you can manage NuGet
    packages in the Solution Explorer for each project in the solution. [Listing 13-1](#filepos877724)
    details the whole class, with the methods required to decompile a given assembly.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个库都可以通过 NuGet 获取。安装方式取决于你的 IDE；如果你使用 Xamarin Studio 或 Visual Studio，你可以在解决方案资源管理器中为每个项目管理
    NuGet 包。[Listing 13-1](#filepos877724) 详细列出了整个类，以及反编译给定程序集所需的方法。
- en: class MainClass
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: class MainClass
- en: '{'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: public static void ➊Main(string[] args)
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public static void ➊Main(string[] args)
- en: '{'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: if (args.Length != 2)
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: if (args.Length != 2)
- en: '{'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: Console.Error.WriteLine("Dirty C# decompiler requires two arguments.");
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Console.Error.WriteLine("Dirty C# decompiler requires two arguments.");
- en: Console.Error.WriteLine("decompiler.exe <assembly> <path to directory>");
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Console.Error.WriteLine("decompiler.exe <assembly> <path to directory>");
- en: return;
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: return;
- en: '}'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: ''
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: IEnumerable<AssemblyClass> klasses = ➋GenerateAssemblyMethodSource(args[0]);
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: IEnumerable<AssemblyClass> klasses = ➋GenerateAssemblyMethodSource(args[0]);
- en: ➌foreach (AssemblyClass klass in klasses)
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ➌foreach (AssemblyClass klass in klasses)
- en: '{'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: string outdir = Path.Combine(args[1], klass.namespase);
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: string outdir = Path.Combine(args[1], klass.namespase);
- en: if (!Directory.Exists(outdir))
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: if (!Directory.Exists(outdir))
- en: Directory.CreateDirectory(outdir);
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Directory.CreateDirectory(outdir);
- en: ''
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: string path = Path.Combine(outdir, klass.name + ".cs");
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: string path = Path.Combine(outdir, klass.name + ".cs");
- en: File.WriteAllText(path, klass.source);
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: File.WriteAllText(path, klass.source);
- en: '}'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: ''
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: private static IEnumerable<AssemblyClass> ➍GenerateAssemblyMethodSource(string
    assemblyPath)
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: private static IEnumerable<AssemblyClass> ➍GenerateAssemblyMethodSource(string
    assemblyPath)
- en: '{'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: AssemblyDefinition assemblyDefinition = AssemblyDefinition.➎ReadAssembly(assemblyPath,
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: AssemblyDefinition assemblyDefinition = AssemblyDefinition.➎ReadAssembly(assemblyPath,
- en: new ReaderParameters(ReadingMode.Deferred) { ReadSymbols = true });
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new ReaderParameters(ReadingMode.Deferred) { ReadSymbols = true });
- en: AstBuilder astBuilder = null;
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: AstBuilder astBuilder = null;
- en: foreach (var defmod in assemblyDefinition.Modules)
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: foreach (var defmod in assemblyDefinition.Modules)
- en: '{'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: ➏foreach (var typeInAssembly in defmod.Types)
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ➏foreach (var typeInAssembly in defmod.Types)
- en: '{'
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: AssemblyClass klass = new AssemblyClass();
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: AssemblyClass klass = new AssemblyClass();
- en: klass.name = typeInAssembly.Name;
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: klass.name = typeInAssembly.Name;
- en: klass.namespase = typeInAssembly.Namespace;
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: klass.namespase = typeInAssembly.Namespace;
- en: astBuilder = new AstBuilder(new DecompilerContext(assemblyDefinition.MainModule)
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: astBuilder = new AstBuilder(new DecompilerContext(assemblyDefinition.MainModule)
- en: '{ CurrentType = typeInAssembly });'
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{ CurrentType = typeInAssembly });'
- en: astBuilder.AddType(typeInAssembly);
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: astBuilder.AddType(typeInAssembly);
- en: ''
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: using (StringWriter output = new StringWriter())
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: using (StringWriter output = new StringWriter())
- en: '{'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: astBuilder.➐GenerateCode(new PlainTextOutput(output));
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: astBuilder.➐GenerateCode(new PlainTextOutput(output));
- en: klass.➑source = output.ToString();
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: klass.➑source = output.ToString();
- en: '}'
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: ➒yield return klass;
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ➒yield return klass;
- en: '}'
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: ''
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public class AssemblyClass
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public class AssemblyClass
- en: '{'
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: public string namespase;
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public string namespase;
- en: public string name;
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public string name;
- en: public string source;
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public string source;
- en: '}'
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 13-1: The dirty C# decompiler'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 'Listing 13-1: 脏C#反编译器'
- en: '[Listing 13-1](#filepos877724) is pretty dense, so let’s go through the big
    points. In the MainClass, we first create a Main() method ➊ that will be run when
    we run the program. It begins by checking how many arguments are specified. If
    only one argument is specified, it prints the usage and exits. If two arguments
    are specified in the application, we assume that the first is the path to the
    assembly we want to decompile and that the second is the folder where the resulting
    source code should be written. Finally, we pass the first argument to the application
    using the GenerateAssemblyMethodSource() method ➋, which is implemented just below
    the Main() method.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 13-1](#filepos877724) 内容比较密集，所以让我们来梳理一下关键点。在`MainClass`中，我们首先创建了一个`Main()`方法
    ➊，它将在我们运行程序时执行。方法开始时会检查指定了多少个参数。如果只指定了一个参数，它会打印使用说明并退出。如果指定了两个参数，我们假设第一个是我们要反编译的程序集的路径，第二个是生成的源代码应写入的文件夹。最后，我们使用`GenerateAssemblyMethodSource()`方法
    ➋将第一个参数传递给应用程序，该方法实现就在`Main()`方法下方。'
- en: In the GenerateAssemblyMethodSource() method ➍, we use the Mono.Cecil method
    ReadAssembly() ➎ to return an AssemblyDefinition. Basically, this is a class from
    Mono.Cecil that fully represents an assembly and allows you to programmatically
    probe it. Once we have the AssemblyDefinition for the assembly we want to decompile,
    we have what we need to generate C# source code that is functionally equivalent
    to the raw bytecode instructions in the assembly. We use Mono.Cecil to generate
    our C# code from the AssemblyDefinition by creating an abstract syntax tree (AST).
    I won’t go into ASTs (there are college courses dedicated to this subject), but
    you should know that an AST can express every potential code path within a program
    and that Mono.Cecil can be used to generate the AST of a .NET program.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在`GenerateAssemblyMethodSource()`方法➍中，我们使用Mono.Cecil的方法`ReadAssembly()` ➎来返回一个AssemblyDefinition。基本上，这是Mono.Cecil中的一个类，它完全表示一个程序集，并允许你以编程方式对其进行探查。一旦我们得到了要反编译的程序集的AssemblyDefinition，我们就得到了生成与程序集中的原始字节码指令功能上等效的C#源代码所需的所有信息。我们通过创建抽象语法树（AST）使用Mono.Cecil从AssemblyDefinition生成我们的C#代码。我不会深入讲解AST（这方面有大学课程专门讲解），但你应该知道，AST可以表达程序中的每一个潜在代码路径，而且Mono.Cecil可以用来生成.NET程序的AST。
- en: This process must be repeated for every class in the assembly. Basic assemblies
    like this one have only one or two classes, but complex applications can have
    many dozen or more. That would be a pain to code individually, so we create a
    foreach loop ➏ to do the work for us. It iterates these steps over each class
    in the assembly and creates a new AssemblyClass (which is defined below the GenerateAssemblyMethodSource()
    method) based on the current class information.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程必须对程序集中的每个类重复。像这样的基础程序集通常只有一两个类，但复杂的应用程序可能会有几十个甚至更多的类。单独为每个类编码会很麻烦，所以我们创建了一个`foreach`循环
    ➏来为我们完成这项工作。它对程序集中的每个类执行这些步骤，并根据当前类的信息创建一个新的`AssemblyClass`（它在`GenerateAssemblyMethodSource()`方法下定义）。
- en: The part to note here is that the GenerateCode() method ➐ actually does the
    heavy lifting of the whole program by taking the AST we create to give us a C#
    source code representation of the class in the assembly. Then, we assign the source
    field ➑ on the AssemblyClass with the generated C# source code, as well as the
    name of the class and the namespace. When all this is done, we return a list of
    classes and their source code to the caller of the GenerateAssemblyMethodSource()
    method—in this case, our Main() method. As we iterate over each class returned
    ➌ by GenerateAssemblyMethodSource(), we create a new file per class and write
    the source code for the class into the file. We use the yield keyword ➒ in GenerateAssemblyMethodSource()
    to return each class, one at a time, as we iterate in the foreach loop ➌ rather
    than returning a full list of all the classes and then processing them. This is
    a good performance boost for binaries with a lot of classes to process.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的部分是，GenerateCode()方法 ➐ 实际上通过获取我们创建的抽象语法树（AST），为我们提供了程序集类的C#源代码表示。然后，我们将生成的C#源代码以及类名和命名空间分配给AssemblyClass上的源代码字段
    ➑。完成这些后，我们将类和它们的源代码列表返回给调用GenerateAssemblyMethodSource()方法的地方——在这里是我们的Main()方法。在我们遍历GenerateAssemblyMethodSource()方法返回的每个类
    ➌ 时，我们为每个类创建一个新文件，并将类的源代码写入该文件。我们在GenerateAssemblyMethodSource()中使用yield关键字 ➒，在foreach循环
    ➌ 中逐个返回每个类，而不是返回所有类的完整列表然后处理它们。这对于处理包含大量类的二进制文件来说是一个很好的性能提升。
- en: Testing the Decompiler
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 测试反编译器
- en: Let’s take a time-out to test this by writing a Hello World–esque application.
    Make a new project with the simple class in [Listing 13-2](#filepos882442) and
    then compile it.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过编写一个类似Hello World的应用程序来测试这个。创建一个新项目，使用[清单13-2](#filepos882442)中的简单类，然后编译它。
- en: using System;
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用 System;
- en: namespace hello_world
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 命名空间 hello_world
- en: '{'
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: class MainClass
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: class MainClass
- en: '{'
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: public static void Main(string[] args)
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public static void Main(string[] args)
- en: '{'
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: Console.WriteLine("Hello World!");
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Console.WriteLine("Hello World!");
- en: Console.WriteLine(2 + 2);
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Console.WriteLine(2 + 2);
- en: '}'
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 13-2: A simple Hello World application before decompilation'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 清单13-2：反编译前的简单Hello World应用
- en: After compiling the project, we point our new decompiler at it to see what it
    comes out with, as shown in [Listing 13-3](#filepos883620).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 编译项目后，我们将新的反编译器指向它，看看它能生成什么，如[清单13-3](#filepos883620)所示。
- en: $ ./decompiler.exe ~/projects/hello_world/bin/Debug/hello_world.exe hello_world
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $ ./decompiler.exe ~/projects/hello_world/bin/Debug/hello_world.exe hello_world
- en: $ cat hello_world/hello_world/MainClass.cs
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $ cat hello_world/hello_world/MainClass.cs
- en: using System;
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用 System;
- en: ''
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: namespace hello_world
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 命名空间 hello_world
- en: '{'
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: internal class MainClass
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: internal class MainClass
- en: '{'
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: public static void Main(string[] args)
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public static void Main(string[] args)
- en: '{'
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: Console.WriteLine("Hello World!");
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Console.WriteLine("Hello World!");
- en: Console.WriteLine(➊4);
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Console.WriteLine(➊4);
- en: '}'
  id: totrans-97
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-98
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 13-3: The decompiled Hello World source code'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 清单13-3：反编译后的Hello World源代码
- en: Pretty close! The only real difference is the second WriteLine() method call.
    In the original code, we had 2 + 2, but the decompiled version outputs 4 ➊. This
    is not a problem. During compile time, anything that evaluates to a constant value
    is replaced with that in the binary, so 2 + 2 gets written as 4 in the assembly—something
    to keep in mind when dealing with assemblies that perform a lot of math to achieve
    a given result.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 非常接近！唯一的实际区别是第二次调用WriteLine()方法。在原始代码中，我们有2 + 2，但反编译后的版本输出的是4 ➊。这不是问题。在编译时，任何计算为常量的值都会被替换为该常量，因此2
    + 2在汇编中会写成4——在处理执行大量数学运算以达成特定结果的程序集时，需要注意这一点。
- en: Using monodis to Analyze an Assembly
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用monodis分析程序集
- en: Say we want to do some cursory investigation into a malicious binary before
    decompiling it. The monodis tool that ships with Mono gives us a lot of power
    for doing this. It has specific strings-type options (strings is a common Unix
    utility that prints any human-readable string of characters found in a given file)
    and can list and export resources compiled into the assembly such as config files
    or private keys. The monodis usage output can be cryptic and hard to read, as
    shown in [Listing 13-4](#filepos886321) (though the man page is a little better).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想在反编译恶意二进制文件之前进行一些初步调查。Mono附带的monodis工具为此提供了很多功能。它有特定的字符串类型选项（strings是一个常见的Unix工具，能打印文件中找到的任何可读字符串），并且可以列出和导出编译到程序集中的资源，如配置文件或私钥。monodis的使用输出可能会显得晦涩难懂，如[清单13-4](#filepos886321)所示（不过man页面稍微好些）。
- en: $ monodis
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $ monodis
- en: monodis -- Mono Common Intermediate Language Disassembler
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: monodis -- Mono公共中间语言反汇编器
- en: 'Usage is: monodis [--output=filename] [--filter=filename] [--help] [--mscorlib]'
  id: totrans-106
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用方法是：monodis [--output=filename] [--filter=filename] [--help] [--mscorlib]
- en: '[--assembly] [--assemblyref] [--classlayout]'
  id: totrans-107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[--assembly] [--assemblyref] [--classlayout]'
- en: '[--constant] [--customattr] [--declsec] [--event] [--exported]'
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[--constant] [--customattr] [--declsec] [--event] [--exported]'
- en: '[--fields] [--file] [--genericpar] [--interface] [--manifest]'
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[--fields] [--file] [--genericpar] [--interface] [--manifest]'
- en: '[--marshal] [--memberref] [--method] [--methodimpl] [--methodsem]'
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[--marshal] [--memberref] [--method] [--methodimpl] [--methodsem]'
- en: '[--methodspec] [--moduleref] [--module] [--mresources] [--presources]'
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[--methodspec] [--moduleref] [--module] [--mresources] [--presources]'
- en: '[--nested] [--param] [--parconst] [--property] [--propertymap]'
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[--nested] [--param] [--parconst] [--property] [--propertymap]'
- en: '[--typedef] [--typeref] [--typespec] [--implmap] [--fieldrva]'
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[--typedef] [--typeref] [--typespec] [--implmap] [--fieldrva]'
- en: '[--standalonesig] [--methodptr] [--fieldptr] [--paramptr] [--eventptr]'
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[--standalonesig] [--methodptr] [--fieldptr] [--paramptr] [--eventptr]'
- en: '[--propertyptr] [--blob] [--strings] [--userstrings] [--forward-decls] file
    ..'
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[--propertyptr] [--blob] [--strings] [--userstrings] [--forward-decls] file
    ..'
- en: 'Listing 13-4: The  monodis  usage output'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 13-4：monodis 使用输出
- en: Running monodis with no arguments prints a full disassembly of the assembly
    in the Common Intermediate Language (CIL) bytecode, or you can output the disassembly
    straight into a file. [Listing 13-5](#filepos888130) shows some of the disassembly
    output of the ICSharpCode.Decompiler.dll assembly, which is effectively analogous
    to the x86 assembly language you may see for a natively compiled application.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 monodis 不带任何参数将打印程序集的完整反汇编，这些反汇编属于通用中间语言（CIL）字节码，或者你也可以将反汇编输出到文件中。[清单 13-5](#filepos888130)
    显示了 ICSharpCode.Decompiler.dll 程序集的一些反汇编输出，这与您可能在本地编译应用程序中看到的 x86 汇编语言类似。
- en: $ monodis ICSharpCode.Decompiler.dll | tail -n30 | head -n10
  id: totrans-118
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $ monodis ICSharpCode.Decompiler.dll | tail -n30 | head -n10
- en: 'IL_000c: mul'
  id: totrans-119
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'IL_000c: mul'
- en: 'IL_000d: call class [mscorlib]System.Collections.Generic.EqualityComparer`1<!0>
    class'
  id: totrans-120
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'IL_000d: call class [mscorlib]System.Collections.Generic.EqualityComparer`1<!0>
    class'
- en: '[mscorlib]System.Collections.Generic.EqualityComparer`1<!''<expr>j__TPar''>::get_Default()'
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[mscorlib]System.Collections.Generic.EqualityComparer`1<!''<expr>j__TPar''>::get_Default()'
- en: 'IL_0012: ldarg.0'
  id: totrans-122
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'IL_0012: ldarg.0'
- en: 'IL_0013: ldfld !0 class ''<>f__AnonymousType5`2''<!0,!1>::''<expr>i__Field'''
  id: totrans-123
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'IL_0013: ldfld !0 class ''<>f__AnonymousType5`2''<!0,!1>::''<expr>i__Field'''
- en: 'IL_0018: callvirt instance int32 class [mscorlib]System.Collections.Generic.Equality'
  id: totrans-124
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'IL_0018: callvirt instance int32 class [mscorlib]System.Collections.Generic.Equality'
- en: Comparer`1<!'<expr>j__TPar'>::GetHashCode(!0)
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Comparer`1<!'<expr>j__TPar'>::GetHashCode(!0)
- en: 'IL_001d: add'
  id: totrans-126
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'IL_001d: add'
- en: 'IL_001e: stloc.0'
  id: totrans-127
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'IL_001e: stloc.0'
- en: 'IL_001f: ldc.i4 -1521134295'
  id: totrans-128
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'IL_001f: ldc.i4 -1521134295'
- en: 'IL_0024: ldloc.0'
  id: totrans-129
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'IL_0024: ldloc.0'
- en: 'IL_0025: mul $'
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'IL_0025: mul $'
- en: 'Listing 13-5: Some CIL disassembly from  ICSharpCode.Decompiler.dll'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 13-5：来自 ICSharpCode.Decompiler.dll 的一些 CIL 反汇编
- en: That’s nice, but not very useful if you don’t know what you’re looking at. Notice
    that the output code looks similar to x86 assembly. This is actually raw intermediate
    language (IL), which is kind of like Java bytecode in JAR files, and it can seem
    a bit arcane. You’ll likely find this most useful when diffing two versions of
    a library to see what was changed.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这很不错，但如果你不知道自己在看什么，那就不太有用了。请注意，输出的代码看起来类似于 x86 汇编。这实际上是原始的中间语言（IL），有点像 JAR 文件中的
    Java 字节码，看起来可能有点晦涩。你可能会发现，当比较两个版本的库，查看哪些内容发生了变化时，这个功能最有用。
- en: It has other great features that aid in reverse engineering. For instance, you
    can run the GNU strings utility on an assembly to see which strings are stored
    inside, but you always get cruft you don’t want, such as random byte sequences
    that just happen to be ASCII printable. If, on the other hand, you pass the --userstrings
    argument to monodis, it will print any strings that are stored for use in the
    code, such as variable assignments or constants, as [Listing 13-6](#filepos889947)
    shows. Since monodis actually parses the assembly to determine what strings have
    been programmatically defined, it can produce much cleaner results with higher
    signal to noise.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 它还有其他有助于逆向工程的强大功能。例如，你可以运行 GNU strings 工具在一个程序集上查看里面存储了哪些字符串，但你总是会得到一些你不想要的杂乱内容，比如随机的字节序列，恰好是
    ASCII 可打印字符。另一方面，如果你将 --userstrings 参数传递给 monodis，它将打印任何为代码使用存储的字符串，如变量赋值或常量，正如[清单
    13-6](#filepos889947)所示。由于 monodis 实际上会解析程序集以确定哪些字符串是通过编程定义的，它能生成更加干净的结果，信号与噪音的比率更高。
- en: $ monodis --userstrings ~/projects/hello_world/bin/Debug/hello_world.exe
  id: totrans-134
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $ monodis --userstrings ~/projects/hello_world/bin/Debug/hello_world.exe
- en: User Strings heap contents
  id: totrans-135
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用户字符串堆内容
- en: '00: ""'
  id: totrans-136
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '00: ""'
- en: '01: "Hello World!"'
  id: totrans-137
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '01: "Hello World!"'
- en: '1b: ""'
  id: totrans-138
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '1b: ""'
- en: $
  id: totrans-139
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $
- en: 'Listing 13-6: Using the  --userstrings  argument for  monodis'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 13-6：使用 --userstrings 参数的 monodis
- en: You can also combine --userstrings with --strings (used for metadata and other
    things), which will output all strings stored in the assembly that aren’t the
    random garbage that GNU strings picks up. This is very useful when you look for
    encryption keys or credentials hardcoded into assemblies.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将 --userstrings 和 --strings 结合使用（用于元数据和其他内容），这将输出存储在程序集中的所有字符串，而不是 GNU strings
    检测到的随机垃圾。这在你寻找加密密钥或硬编码在程序集中的凭证时非常有用。
- en: However, my favorite monodis flags are --manifest and --mresources. The first,
    --manifest, lists all the embedded resources in the assembly. These are usually
    images or configuration files, but sometimes you’ll find private keys and other
    sensitive material. The second argument, --mresources, saves each embedded resource
    to the current working directory. [Listing 13-7](#filepos891930) shows this in
    practice.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我最喜欢的 monodis 标志是 --manifest 和 --mresources。第一个，--manifest，会列出程序集中的所有嵌入式资源。这些通常是图片或配置文件，但有时你会找到私钥和其他敏感资料。第二个参数，--mresources，会将每个嵌入式资源保存到当前工作目录。[列表
    13-7](#filepos891930) 演示了这一点。
- en: $ monodis --manifest ~/projects/hello_world/bin/Debug/hello_world.exe
  id: totrans-143
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $ monodis --manifest ~/projects/hello_world/bin/Debug/hello_world.exe
- en: Manifestresource Table (1..1)
  id: totrans-144
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Manifestresource 表 (1..1)
- en: '1: public ''hello_world.til_neo.png'' at offset 0 in current module'
  id: totrans-145
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '1: public ''hello_world.til_neo.png'' 位于当前模块的偏移量 0 处'
- en: $ monodis --mresources ~/projects/hello_world/bin/Debug/hello_world.exe
  id: totrans-146
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $ monodis --mresources ~/projects/hello_world/bin/Debug/hello_world.exe
- en: $ file hello_world.til_neo.png
  id: totrans-147
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $ file hello_world.til_neo.png
- en: 'hello_world.til_neo.png: PNG image data, 1440 x 948, 8-bit/color RGBA, non-interlaced'
  id: totrans-148
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: hello_world.til_neo.png：PNG 图像数据，1440 x 948，8 位/色 RGBA，非交错
- en: $
  id: totrans-149
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $
- en: 'Listing 13-7: Saving an embedded resource to the filesystem with  monodis'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 13-7：使用 monodis 将嵌入式资源保存到文件系统
- en: Apparently, someone hid a picture of Neo in my Hello World application! To be
    sure, monodis is a favorite tool when I’m messing with an unknown assembly and
    I want to gain a little bit more information about it, such as methods or specific
    strings in the binary.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，有人把一张 Neo 的图片隐藏在了我的 Hello World 应用程序中！可以肯定的是，monodis 是我在处理未知程序集时最喜欢的工具，当我想要获取更多关于它的信息时，比如方法或二进制文件中的特定字符串。
- en: Finally, we have one of the most useful arguments to monodis, --method, which
    lists all the methods and arguments available in a library or binary (see [Listing
    13-8](#filepos893213)).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有一个非常有用的 monodis 参数，--method，它列出了库或二进制文件中所有可用的方法和参数（参见 [列表 13-8](#filepos893213)）。
- en: $ monodis --method ch1_hello_world.exe
  id: totrans-153
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $ monodis --method ch1_hello_world.exe
- en: Method Table (1..2)
  id: totrans-154
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 方法表 (1..2)
- en: '########## ch1_hello_world.MainClass'
  id: totrans-155
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '########## ch1_hello_world.MainClass'
- en: '1: ➊instance default void ''.ctor'' () (param: 1 impl_flags: cil managed )'
  id: totrans-156
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '1: ➊实例默认 void ''.ctor'' () (参数: 1 实现标志: cil 管理)'
- en: '2: ➋default void Main (string[] args) (param: 1 impl_flags: cil managed ) Listing
    13-8: Demonstrating the  --method  argument for  monodis'
  id: totrans-157
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '2: ➋默认的 void Main (string[] args) (参数: 1 实现标志: cil 管理) 列表 13-8：演示 monodis 的
    --method 参数'
- en: 'When you run monodis --method on the Hello World program from [Chapter 1](index_split_006.html#filepos69411),
    you will notice that monodis prints two method lines. The first line ➊ is the
    constructor for the MainClass class that contains the Main() method, on line 2
    ➋. So, not only does this argument list all the methods (and which class those
    methods are in), but it also prints the class constructors! This can offer great
    insight into how a program may work: method names are often good descriptions
    of what is going on internally.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 [第 1 章](index_split_006.html#filepos69411)的 Hello World 程序上运行 monodis --method
    时，你会注意到 monodis 打印了两行方法。第一行 ➊ 是包含 Main() 方法的 MainClass 类的构造函数，它位于第 2 行 ➋。所以，这个参数不仅列出了所有的方法（以及这些方法所在的类），还打印了类的构造函数！这能提供关于程序如何工作的深刻见解：方法名称通常是对内部工作原理的良好描述。
- en: Conclusion
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 结论
- en: In the first part of this chapter, we discussed how to utilize the open source
    ICSharpCode.Decompiler and Mono.Cecil libraries to decompile an arbitrary assembly
    back into C# code. By compiling a small Hello World application, we saw one difference
    between the code that results from a decompiled assembly and that of the original
    source. Other differences may occur, such as the keyword var being replaced with
    the actual type of the object being created. However, the generated code should
    still be functionally equivalent, even if it isn’t completely the same source
    code as before.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第一部分，我们讨论了如何利用开源的 ICSharpCode.Decompiler 和 Mono.Cecil 库将任意程序集反编译回 C# 代码。通过编译一个简单的
    Hello World 应用程序，我们看到了反编译后的程序集与原始源代码之间的一个区别。其他差异也可能出现，例如关键字 var 被替换为实际的对象类型。然而，生成的代码应该仍然在功能上等价，即使它不完全是与之前相同的源代码。
- en: Then, we used the monodis tool to see how to dissect and analyze assemblies
    to glean more information from a rogue application than we would easily have been
    able to do otherwise. Hopefully, these tools can decrease the time between going
    from “What happened?” to “How do we fix it?” when something goes wrong or a new
    piece of malware is found.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用 monodis 工具来查看如何解剖和分析程序集，从中提取更多的信息，以便比我们轻松获取到的方式更深入地了解一个恶意应用程序。希望这些工具能够缩短从“发生了什么？”到“我们该如何修复？”的时间，尤其是在出现问题或发现新的恶意软件时。
