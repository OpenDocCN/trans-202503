- en: '**1**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1**'
- en: '**BASIC STATIC MALWARE ANALYSIS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**基础静态恶意软件分析**'
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: In this chapter we look at the basics of static malware analysis. Static analysis
    is performed by analyzing a program file’s disassembled code, graphical images,
    printable strings, and other on-disk resources. It refers to reverse engineering
    without actually running the program. Although static analysis techniques have
    their shortcomings, they can help us understand a wide variety of malware. Through
    careful reverse engineering, you’ll be able to better understand the benefits
    that malware binaries provide attackers after they’ve taken possession of a target,
    as well as the ways attackers can hide and continue their attacks on an infected
    machine. As you’ll see, this chapter combines descriptions and examples. Each
    section introduces a static analysis technique and then illustrates its application
    in real-world analysis.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将探讨静态恶意软件分析的基础。静态分析通过分析程序文件的反汇编代码、图像、可打印字符串和其他磁盘上的资源来进行。它指的是在不实际运行程序的情况下进行逆向工程。虽然静态分析技术有其局限性，但它能帮助我们理解各种恶意软件。通过细致的逆向工程，你将能够更好地理解恶意软件二进制文件在攻击者控制目标后所带来的好处，以及攻击者如何隐藏和持续攻击已感染的机器。正如你所看到的，本章结合了描述和示例。每一节都介绍一种静态分析技术，并通过实际分析中的应用来进行说明。
- en: I begin this chapter by describing the Portable Executable (PE) file format
    used by most Windows programs, and then examine how to use the popular Python
    library `pefile` to dissect a real-world malware binary. I then describe techniques
    such as imports analysis, graphical image analysis, and strings analysis. In all
    cases, I show you how to use open source tools to apply the analysis technique
    to real-world malware. Finally, at the end of the chapter, I introduce ways malware
    can make life difficult for malware analysts and discuss some ways to mitigate
    these issues.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我将本章的开始部分用来描述大多数 Windows 程序使用的可移植执行文件（PE）格式，然后介绍如何使用流行的 Python 库 `pefile` 来解析一个真实的恶意软件二进制文件。接着我将描述如导入分析、图像分析和字符串分析等技术。在所有案例中，我都会展示如何使用开源工具将分析技术应用于实际的恶意软件。最后，在本章结束时，我会介绍恶意软件如何让恶意软件分析师感到困扰，并讨论一些缓解这些问题的方法。
- en: You’ll find the malware sample used in the examples in this chapter in this
    book’s data under the directory */ch1*. To demonstrate the techniques discussed
    in this chapter, we use *ircbot.exe*, an Internet Relay Chat (IRC) bot created
    for experimental use, as an example of the kinds of malware commonly observed
    in the wild. As such, the program is designed to stay resident on a target computer
    while connected to an IRC server. After *ircbot.exe* gets hold of a target, attackers
    can control the target computer via IRC, allowing them to take actions such as
    turning on a webcam to capture and surreptitiously extract video feeds of the
    target’s physical location, taking screenshots of the desktop, extracting files
    from the target machine, and so on. Throughout this chapter, I demonstrate how
    static analysis techniques can reveal the capabilities of this malware.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在本章示例中使用的恶意软件样本，存储在本书数据目录下的 */ch1* 文件夹中。为了演示本章讨论的技术，我们使用 *ircbot.exe*，这是一个用于实验目的的互联网中继聊天（IRC）机器人，作为常见恶意软件的示例。该程序的设计目的是在目标计算机上保持常驻，并与
    IRC 服务器连接。*ircbot.exe* 控制了目标后，攻击者可以通过 IRC 控制目标计算机，执行诸如开启摄像头捕获并偷偷提取目标物理位置的视频流、截取桌面截图、从目标计算机中提取文件等操作。在本章中，我将展示如何通过静态分析技术揭示这些恶意软件的功能。
- en: '**The Microsoft Windows Portable Executable Format**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**微软 Windows 可移植执行文件格式**'
- en: To perform static malware analysis, you need to understand the Windows PE format,
    which describes the structure of modern Windows program files such as *.exe*,
    *.dll*, and *.sys* files and defines the way they store data. PE files contain
    x86 instructions, data such as images and text, and metadata that a program needs
    in order to run.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行静态恶意软件分析，你需要了解 Windows PE 格式，该格式描述了现代 Windows 程序文件（如 *.exe*、*.dll* 和 *.sys*
    文件）的结构，并定义了它们存储数据的方式。PE 文件包含 x86 指令、如图像和文本等数据，以及程序运行所需的元数据。
- en: 'The PE format was originally designed to do the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: PE 格式最初是为了完成以下目的而设计的：
- en: '**Tell Windows how to load a program into memory** The PE format describes
    which chunks of a file should be loaded into memory, and where. It also tells
    you where in the program code Windows should start a program’s execution and which
    dynamically linked code libraries should be loaded into memory.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**告诉Windows如何将程序加载到内存中** PE格式描述了文件的哪些部分应该加载到内存中，以及它们的加载位置。它还告诉你Windows应该从程序代码的哪个位置开始执行程序，以及哪些动态链接代码库应该加载到内存中。'
- en: '**Supply media (or resources) a running program may use in the course of its
    execution** These resources can include strings of characters like the ones in
    GUI dialogs or console output, as well as images or videos.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**提供运行程序在执行过程中可能使用的媒体（或资源）** 这些资源可以包括字符字符串，如图形用户界面对话框或控制台输出中的字符，也可以是图像或视频。'
- en: '**Supply security data such as digital code signatures** Windows uses such
    security data to ensure that code comes from a trusted source.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**提供安全数据，如数字代码签名** Windows使用这些安全数据来确保代码来自受信任的来源。'
- en: The PE format accomplishes all of this by leveraging the series of constructs
    shown in [Figure 1-1](ch01.xhtml#ch01fig1).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: PE格式通过利用[图 1-1](ch01.xhtml#ch01fig1)中显示的一系列结构来实现这一切。
- en: '![image](../images/f0003-01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0003-01.jpg)'
- en: '*Figure 1-1: The PE file format*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-1：PE文件格式*'
- en: As the figure shows, the PE format includes a series of headers telling the
    operating system how to load the program into memory. It also includes a series
    of sections that contain the actual program data. Windows loads the sections into
    memory such that their memory offsets correspond to where they appear on disk.
    Let’s explore this file structure in more detail, starting with the PE header.
    We’ll skip over a discussion of the DOS header, which is a relic of the 1980s-era
    Microsoft DOS operating system and only present for compatibility reasons.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，PE格式包括一系列头部，告诉操作系统如何将程序加载到内存中。它还包括一系列包含实际程序数据的节区。Windows将这些节区加载到内存中，使得它们的内存偏移量对应于它们在磁盘上出现的位置。让我们更详细地探索这一文件结构，从PE头部开始。我们将跳过对DOS头部的讨论，因为它是1980年代微软DOS操作系统的遗物，仅仅为了兼容性而存在。
- en: '***The PE Header***'
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***PE头部***'
- en: Shown at the bottom of [Figure 1-1](ch01.xhtml#ch01fig1), above the DOS header
    ➊, is the PE header ➋, which defines a program’s general attributes such as binary
    code, images, compressed data, and other program attributes. It also tells us
    whether a program is designed for 32- or 64-bit systems. The PE header provides
    basic but useful contextual information to the malware analyst. For example, the
    header includes a timestamp field that can give away the time at which the malware
    author compiled the file. This happens when malware authors forget to replace
    this field with a bogus value, which they often do.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图 1-1](ch01.xhtml#ch01fig1)所示，在DOS头部 ➊ 之上，是PE头部 ➋，它定义了程序的一般属性，如二进制代码、图像、压缩数据和其他程序属性。它还告诉我们程序是为32位还是64位系统设计的。PE头部为恶意软件分析师提供了基本但有用的上下文信息。例如，头部包含一个时间戳字段，可以揭示恶意软件作者编译文件的时间。当恶意软件作者忘记将此字段替换为虚假值时，就会出现这种情况，而他们经常这样做。
- en: '***The Optional Header***'
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***可选头部***'
- en: The optional header ➌ is actually ubiquitous in today’s PE executable programs,
    contrary to what its name suggests. It defines the location of the program’s *entry
    point* in the PE file, which refers to the first instruction the program runs
    once loaded. It also defines the size of the data that Windows loads into memory
    as it loads the PE file, the Windows subsystem, the program targets (such as the
    Windows GUI or the Windows command line), and other high-level details about the
    program. The information in this header can prove invaluable to reverse engineers,
    because a program’s entry point tells them where to begin reverse engineering.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 可选头部 ➌ 实际上在今天的PE可执行程序中无处不在，尽管它的名字可能给人带来误解。它定义了程序在PE文件中的*入口点*的位置，指的是程序加载后首次运行的指令。它还定义了Windows加载PE文件时将加载到内存中的数据大小、Windows子系统、程序目标（如Windows
    GUI或Windows命令行）以及程序的其他高级细节。此头部中的信息对逆向工程师来说至关重要，因为程序的入口点告诉他们从哪里开始逆向工程。
- en: '***Section Headers***'
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***节区头部***'
- en: Section headers ➍ describe the data sections contained within a PE file. A *section*
    in a PE file is a chunk of data that either will be mapped into memory when the
    operating system loads a program or will contain instructions about how the program
    should be loaded into memory. In other words, a section is a sequence of bytes
    on disk that will either become a contiguous string of bytes in memory or inform
    the operating system about some aspect of the loading process.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 节头 ➍ 描述了 PE 文件中包含的数据节。PE 文件中的*节*是一个数据块，它要么在操作系统加载程序时被映射到内存中，要么包含有关如何将程序加载到内存中的指令。换句话说，节是磁盘上的字节序列，这些字节序列要么会变成内存中的连续字节串，要么会向操作系统报告加载过程中的某些方面。
- en: Section headers also tell Windows what permissions it should grant to sections,
    such as whether they should be readable, writable, or executable by the program
    when it’s executing. For example, the `.text` section containing x86 code will
    typically be marked readable and executable but not writable to prevent program
    code from accidentally modifying itself in the course of execution.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 节头还告诉 Windows 应该授予各个节哪些权限，例如它们是否在程序执行时应当是可读、可写或可执行的。例如，包含 x86 代码的`.text`节通常会被标记为可读和可执行，但不可写，以防程序代码在执行过程中意外修改自身。
- en: A number of sections, such as `.text` and `.rsrc`, are depicted in [Figure 1-1](ch01.xhtml#ch01fig1).
    These get mapped into memory when the PE file is executed. Other special sections,
    such as the `.reloc` section, aren’t mapped into memory. We’ll discuss these sections
    as well. Let’s go over the sections shown in [Figure 1-1](ch01.xhtml#ch01fig1).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一些节，如 `.text` 和 `.rsrc`，如[图 1-1](ch01.xhtml#ch01fig1)所示。这些节在执行 PE 文件时会被映射到内存中。其他特殊节，如
    `.reloc` 节，则不会被映射到内存中。我们也会讨论这些节。让我们一起回顾一下[图 1-1](ch01.xhtml#ch01fig1)中显示的各个节。
- en: '**The .text Section**'
  id: totrans-24
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**.text 节**'
- en: Each PE program contains at least one section of x86 code marked executable
    in its section header; these sections are almost always named `.text` ➎. We’ll
    disassemble the data in the `.text` section when performing program disassembly
    and reverse engineering in [Chapter 2](ch02.xhtml#ch02).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 PE 程序至少包含一个标记为可执行的 x86 代码节，这些节几乎总是命名为 `.text` ➎。我们将在[第 2 章](ch02.xhtml#ch02)进行程序反汇编和逆向工程时，反汇编
    `.text` 节中的数据。
- en: '**The .idata Section**'
  id: totrans-26
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**.idata 节**'
- en: The `.idata` section ➏, also called *imports*, contains the *Import Address
    Table (IAT)*, which lists dynamically linked libraries and their functions. The
    IAT is among the most important PE structures to inspect when initially approaching
    a PE binary for analysis because it reveals the library calls a program makes,
    which in turn can betray the malware’s high-level functionality.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`.idata`节 ➏，也叫*导入节*，包含*导入地址表（IAT）*，该表列出了动态链接的库及其函数。IAT 是在初次分析 PE 二进制文件时最重要的结构之一，因为它揭示了程序所调用的库函数，这反过来可能揭示恶意软件的高级功能。'
- en: '**The Data Sections**'
  id: totrans-28
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**数据节**'
- en: The data sections in a PE file can include sections like `.rsrc`, `.data`, and
    `.rdata`, which store items such as mouse cursor images, button skins, audio,
    and other media used by a program. For example, the `.rsrc` section ➐ in [Figure
    1-1](ch01.xhtml#ch01fig1) contains printable character strings that a program
    uses to render text as strings.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: PE 文件中的数据节可以包括 `.rsrc`、`.data` 和 `.rdata` 等节，它们存储程序使用的项目，如鼠标光标图像、按钮皮肤、音频和其他媒体。例如，[图
    1-1](ch01.xhtml#ch01fig1)中的 `.rsrc` 节 ➐ 包含程序用来渲染文本字符串的可打印字符字符串。
- en: The information in the `.rsrc` (resources) section can be vital to malware analysts
    because by examining the printable character strings, graphical images, and other
    assets in a PE file, they can gain vital clues about the file’s functionality.
    In “[Examining Malware Images](ch01.xhtml#lev16)” on [page 7](ch01.xhtml#page_7),
    you’ll learn how to use the `icoutils` toolkit (including `icotool` and `wrestool`)
    to extract graphical images from malware binaries’ resources sections. Then, in
    “[Examining Malware Strings](ch01.xhtml#lev17)” on [page 8](ch01.xhtml#page_8),
    you’ll learn how to extract printable strings from malware resources sections.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`.rsrc`（资源）节中的信息对恶意软件分析师来说至关重要，因为通过检查 PE 文件中的可打印字符字符串、图像和其他资源，他们可以获得有关文件功能的重要线索。在[第7页](ch01.xhtml#page_7)的《[检查恶意软件图像](ch01.xhtml#lev16)》中，您将学习如何使用
    `icoutils` 工具包（包括 `icotool` 和 `wrestool`）从恶意软件二进制文件的资源节中提取图像。然后，在[第8页](ch01.xhtml#page_8)的《[检查恶意软件字符串](ch01.xhtml#lev17)》中，您将学习如何从恶意软件的资源节中提取可打印字符串。'
- en: '**The .reloc Section**'
  id: totrans-31
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**.reloc 节**'
- en: A PE binary’s code is not *position independent*, which means it will not execute
    correctly if it’s moved from its intended memory location to a new memory location.
    The `.reloc` section ➑ gets around this by allowing code to be moved without breaking.
    It tells the Windows operating system to translate memory addresses in a PE file’s
    code if the code has been moved so that the code still runs correctly. These translations
    usually involve adding or subtracting an offset from a memory address.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 PE 二进制文件的代码不是 *位置无关的*，这意味着如果它从预定的内存位置移动到新的内存位置，它将无法正确执行。`.reloc` 节通过允许代码移动而不破坏其功能来解决这个问题。它告诉
    Windows 操作系统，在 PE 文件的代码被移动后，翻译内存地址，以确保代码仍能正确运行。这些翻译通常涉及对内存地址添加或减去偏移量。
- en: Although a PE file’s `.reloc` section may well contain information you’ll want
    to use in your malware analysis, we won’t discuss it further in this book because
    our focus is on applying machine learning and data analysis to malware, not doing
    the kind of hardcore reverse engineering that involves looking at relocations.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 PE 文件的 `.reloc` 节可能包含你在恶意软件分析中需要使用的信息，但本书不会进一步讨论它，因为我们的重点是将机器学习和数据分析应用于恶意软件，而不是进行涉及查看重定位的硬核逆向工程。
- en: '**Dissecting the PE Format Using pefile**'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用 pefile 剖析 PE 格式**'
- en: The `pefile` Python module, written and maintained by Ero Carerra, has become
    an industry-standard malware analysis library for dissecting PE files. In this
    section, I show you how to use `pefile` to dissect *ircbot.exe*. The *ircbot.exe*
    file can be found on the virtual machine accompanying this book in the directory
    *~/malware_data_science/ch1/data*. [Listing 1-1](ch01.xhtml#ch01list1) assumes
    that *ircbot.exe* is in your current working directory.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Ero Carerra 编写和维护的 `pefile` Python 模块，已成为业界标准的恶意软件分析库，用于剖析 PE 文件。在本节中，我将向你展示如何使用
    `pefile` 来剖析 *ircbot.exe*。*ircbot.exe* 文件可以在本书随附的虚拟机中找到，路径为 *~/malware_data_science/ch1/data*。[列表
    1-1](ch01.xhtml#ch01list1) 假设 *ircbot.exe* 位于你当前的工作目录中。
- en: 'Enter the following to install the `pefile` library so that we can import it
    within Python:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 输入以下命令来安装 `pefile` 库，以便我们可以在 Python 中导入它：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, use the commands in [Listing 1-1](ch01.xhtml#ch01list1) to start Python,
    import the `pefile` module, and open and parse the PE file *ircbot.exe* using
    `pefile`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用 [列表 1-1](ch01.xhtml#ch01list1) 中的命令启动 Python，导入 `pefile` 模块，并使用 `pefile`
    打开并解析 PE 文件 *ircbot.exe*。
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 1-1: Loading the* pefile *module and parsing a PE file* (ircbot.exe)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 1-1：加载* pefile *模块并解析 PE 文件*（ircbot.exe）'
- en: We instantiate `pefile.PE`, which is the core class implemented by the PE module.
    It parses PE files so that we can examine their attributes. By calling the PE
    constructor, we load and parse the specified PE file, which is *ircbot.exe* in
    this example. Now that we’ve loaded and parsed our file, run the code in [Listing
    1-2](ch01.xhtml#ch01list2) to pull information from *ircbot.exe*’s PE fields.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实例化了 `pefile.PE`，这是 PE 模块实现的核心类。它解析 PE 文件，以便我们检查其属性。通过调用 PE 构造函数，我们加载并解析指定的
    PE 文件，本示例中是 *ircbot.exe*。现在我们已经加载并解析了文件，运行 [列表 1-2](ch01.xhtml#ch01list2) 中的代码，提取
    *ircbot.exe* 的 PE 字段信息。
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 1-2: Iterating through the PE file’s sections and printing information
    about them*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 1-2：遍历 PE 文件的各个节并打印相关信息*'
- en: '[Listing 1-3](ch01.xhtml#ch01list3) shows the output.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 1-3](ch01.xhtml#ch01list3) 显示了输出结果。'
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 1-3: Pulling section data from* ircbot.exe *using Python’s* pefile
    *module*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 1-3：使用 Python 的* pefile *模块提取 ircbot.exe 的节数据*'
- en: 'As you can see in [Listing 1-3](ch01.xhtml#ch01list3), we’ve pulled data from
    five different sections of the PE file: `.text`, `.rdata`, `.data`, `.idata`,
    and `.reloc`. The output is given as five tuples, one for each PE section pulled.
    The first entry on each line identifies the PE section. (You can ignore the series
    of `\x00` null bytes, which are simply C-style null string terminators.) The remaining
    fields tell us what each section’s memory utilization will be once it’s loaded
    into memory and where in memory it will be found once loaded.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [列表 1-3](ch01.xhtml#ch01list3) 中所示，我们从 PE 文件的五个不同节中提取了数据：`.text`、`.rdata`、`.data`、`.idata`
    和 `.reloc`。输出结果显示为五个元组，每个元组对应一个提取的 PE 节。每行的第一个条目标识了 PE 节（你可以忽略 `\x00` 一系列的空字节，它们只是
    C 风格的空字符串终结符）。剩余的字段告诉我们每个节加载到内存后将占用的内存量以及加载后在内存中的位置。
- en: For example, `0x1000` ➊ is the *base virtual memory address* where these sections
    will be loaded. Think of this as the section’s base memory address. The `0x32830`
    ➋ in the *virtual size* field specifies the amount of memory required by the section
    once loaded. The `207360` ➌ in the third field represents the amount of data the
    section will take up within that chunk of memory.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`0x1000` ➊ 是这些部分将被加载的*基础虚拟内存地址*。可以将其视为该部分的基础内存地址。`0x32830` ➋ 在*虚拟大小*字段中指定了该部分加载后所需的内存量。`207360`
    ➌ 在第三个字段中表示该部分将在该内存块中占用的数据量。
- en: In addition to using `pefile` to parse a program’s sections, we can also use
    it to list the DLLs a binary will load, as well as the function calls it will
    request within those DLLs. We can do this by dumping a PE file’s IAT. [Listing
    1-4](ch01.xhtml#ch01list4) shows how to use `pefile` to dump the IAT for *ircbot.exe*.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用`pefile`解析程序的各个部分外，我们还可以使用它列出二进制文件将加载的 DLL，以及它将在这些 DLL 中请求的函数调用。我们可以通过转储
    PE 文件的 IAT 来实现这一点。[列表 1-4](ch01.xhtml#ch01list4)展示了如何使用`pefile`转储*ircbot.exe*的
    IAT。
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 1-4: Extracting imports from* ircbot.exe'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 1-4：提取ircbot.exe中的导入*'
- en: '[Listing 1-4](ch01.xhtml#ch01list4) should produce the output shown in [Listing
    1-5](ch01.xhtml#ch01list5) (truncated for brevity).'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 1-4](ch01.xhtml#ch01list4)应生成[列表 1-5](ch01.xhtml#ch01list5)所示的输出（为简洁起见已被截断）。'
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 1-5: Contents of the IAT of* ircbot.exe*, showing library functions
    used by this malware*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 1-5：ircbot.exe的 IAT 内容，显示了此恶意软件使用的库函数*'
- en: As you can see in [Listing 1-5](ch01.xhtml#ch01list5), this output is valuable
    for malware analysis because it lists a rich array of functions that the malware
    declares and will reference. For example, the first few lines of the output tell
    us that the malware will write to files using `WriteFile` ➊, open files using
    the `CreateFileA` call ➋, and create new processes using `CreateProcessA` ➌. Although
    this is fairly basic information about the malware, it’s a start in understanding
    the malware’s behavior in more detail.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如[列表 1-5](ch01.xhtml#ch01list5)所示，这些输出对于恶意软件分析非常有价值，因为它列出了恶意软件声明并将引用的丰富函数。例如，输出的前几行告诉我们，恶意软件将使用`WriteFile`
    ➊ 写入文件，使用`CreateFileA` 调用 ➋ 打开文件，并使用`CreateProcessA` ➌ 创建新进程。虽然这只是关于恶意软件的一些基本信息，但它为我们更详细地了解恶意软件的行为提供了一个起点。
- en: '**Examining Malware Images**'
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**检查恶意软件图像**'
- en: To understand how malware may be designed to game a target, let’s look at the
    icons contained in its `.rsrc` section. For example, malware binaries are often
    designed to trick users into clicking them by masquerading as Word documents,
    game installers, PDF files, and so on. You also find images in the malware suggesting
    programs of interest to the attackers themselves, such as network attack tools
    and programs run by attackers for the remote control of compromised machines.
    I have even seen binaries containing desktop icons of jihadists, images of evil-looking
    cyberpunk cartoon characters, and images of Kalashnikov rifles. For our sample
    image analysis, let’s consider a malware sample the security company Mandiant
    identified as having been crafted by a Chinese state-sponsored hacking group.
    You can find this sample malware in this chapter’s data directory under the name
    *fakepdfmalware.exe*. This sample uses an Adobe Acrobat icon to trick users into
    thinking it is an Adobe Acrobat document, when in fact it’s a malicious PE executable.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解恶意软件如何被设计来攻击目标，我们来看一下它在 `.rsrc` 部分中包含的图标。例如，恶意软件二进制文件常常伪装成 Word 文档、游戏安装程序、PDF
    文件等，以欺骗用户点击它们。你还会在恶意软件中发现一些图像，表明这些程序可能是攻击者感兴趣的工具，如网络攻击工具和用于远程控制被攻击机器的程序。我甚至见过一些二进制文件包含圣战分子的桌面图标、看起来邪恶的赛博朋克卡通角色图像和卡拉什尼科夫步枪的图像。为了进行样本图像分析，我们可以考虑一个由安全公司
    Mandiant 识别的恶意软件样本，它被认为是由一个中国国家支持的黑客组织制作的。你可以在本章的数据目录中找到这个恶意软件样本，文件名为*fakepdfmalware.exe*。这个样本使用
    Adobe Acrobat 图标来欺骗用户，使其误以为这是一个 Adobe Acrobat 文档，而实际上它是一个恶意的 PE 可执行文件。
- en: Before we can extract the images from the *fakepdfmalware.exe* binary using
    the Linux command line tool `wrestool`, we first need to create a directory to
    hold the images we’ll extract. [Listing 1-6](ch01.xhtml#ch01list6) shows how to
    do all this.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Linux 命令行工具`wrestool`从*fakepdfmalware.exe*二进制文件中提取图像之前，我们首先需要创建一个目录来存放我们提取的图像。[列表
    1-6](ch01.xhtml#ch01list6)展示了如何完成这一操作。
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 1-6: Shell commands that extract images from a malware sample*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 1-6：从恶意软件样本中提取图像的 shell 命令*'
- en: We first use `mkdir images` to create a directory to hold the extracted images.
    Next, we use `wrestool` to extract image resources (`-x`) from *fakepdfmalware.exe*
    to */images* and then use `icotool` to extract (`-x`) and convert (`-o`) any resources
    in the Adobe *.ico* icon format into *.png* graphics so that we can view them
    using standard image viewer tools. If you don’t have `wrestool` installed on your
    system, you can download it at *[http://www.nongnu.org/icoutils/](http://www.nongnu.org/icoutils/)*.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先使用`mkdir images`命令创建一个目录，用来存放提取出的图像。接下来，我们使用`wrestool`从*fakepdfmalware.exe*中提取图像资源（`-x`），保存到*/images*目录中，然后使用`icotool`提取（`-x`）并转换（`-o`）任何Adobe
    *.ico*图标格式的资源为*.png*图像，这样我们就可以使用标准的图像查看工具查看它们。如果你的系统中没有安装`wrestool`，你可以在*[http://www.nongnu.org/icoutils/](http://www.nongnu.org/icoutils/)*下载它。
- en: Once you’ve used `wrestool` to convert the images in the target executable to
    the PNG format, you should be able open them in your favorite image viewer and
    see the Adobe Acrobat icon at various resolutions. As my example here demonstrates,
    extracting images and icons from PE files is relatively straightforward and can
    quickly reveal interesting and useful information about malware binaries. Similarly,
    we can easily extract printable strings from malware for more information, which
    we’ll do next.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你使用`wrestool`将目标可执行文件中的图像转换为PNG格式，你应该能够在你喜欢的图像查看器中打开它们，并查看不同分辨率下的Adobe Acrobat图标。正如我这里的示例所演示的那样，从PE文件中提取图像和图标相对简单，可以迅速揭示有关恶意软件二进制文件的有趣和有用的信息。同样，我们也可以轻松地从恶意软件中提取可打印字符串以获取更多信息，接下来我们就会这样做。
- en: '**Examining Malware Strings**'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**检查恶意软件字符串**'
- en: '*Strings* are sequences of printable characters within a program binary. Malware
    analysts often rely on strings in a malicious sample to get a quick sense of what
    may be going on inside it. These strings often contain things like HTTP and FTP
    commands that download web pages and files, IP addresses and hostnames that tell
    you what addresses the malware connects to, and the like. Sometimes even the language
    used to write the strings can hint at a malware binary’s country of origin, though
    this can be faked. You may even find text in a string that explains in leetspeak
    the purpose of a malicious binary.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*字符串*是程序二进制文件中可打印字符的序列。恶意软件分析师通常依赖恶意样本中的字符串来快速了解其中可能发生的事情。这些字符串通常包含HTTP和FTP命令，用于下载网页和文件，IP地址和主机名，指示恶意软件连接的地址等等。有时，甚至用于编写字符串的语言也能提示恶意二进制文件的来源国，尽管这可以被伪造。你甚至可能会在某些字符串中找到用“黑话”解释恶意二进制文件目的的文本。'
- en: Strings can also reveal more technical information about a binary. For example,
    you may find information about the compiler used to create it, the programming
    language the binary was written in, embedded scripts or HTML, and so on. Although
    malware authors can obfuscate, encrypt, and compress all of these traces, even
    advanced malware authors often leave at least some traces exposed, making it particularly
    important to examine `strings` dumps when analyzing malware.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串还可以揭示关于二进制文件的更多技术信息。例如，你可能会找到关于用来创建该文件的编译器的信息，二进制文件使用的编程语言，嵌入的脚本或HTML等。尽管恶意软件作者可以对这些痕迹进行混淆、加密或压缩，但即使是高级恶意软件作者通常也会留下至少一些暴露的痕迹，这使得在分析恶意软件时检查`strings`转储尤为重要。
- en: '***Using the strings Program***'
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用strings程序***'
- en: 'The standard way to view all strings in a file is to use the command line tool
    `strings`, which uses the following syntax:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 查看文件中所有字符串的标准方法是使用命令行工具`strings`，其语法如下：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This command prints all strings in a file to the terminal, line by line. Adding
    `| less` at the end prevents the strings from just scrolling across the terminal.
    By default, the `strings` command finds all printable strings with a minimum length
    of 4 bytes, but you can set a different minimum length and change various other
    parameters, as listed in the commands manual page. I recommend simply using the
    default minimum string length of 4, but you can change the minimum string length
    using the `–n` option. For example, `strings –n 10` filepath would extract only
    strings with a minimum length of 10 bytes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将文件中的所有字符串逐行打印到终端。添加`| less`到命令末尾可以防止字符串直接在终端中滚动显示。默认情况下，`strings`命令会查找所有长度最短为4字节的可打印字符串，但你可以设置不同的最小长度并更改其他参数，具体内容可以参考命令手册页。我建议直接使用默认的最小字符串长度4，但你也可以使用`–n`选项来更改最小字符串长度。例如，`strings
    –n 10` filepath将只提取长度最短为10字节的字符串。
- en: '***Analyzing Your strings Dump***'
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***分析你的字符串转储***'
- en: 'Now that we dumped a malware program’s printable strings, the challenge is
    to understand what the strings mean. For example, let’s say we dump the strings
    to the *ircbotstring.txt* file for *ircbot.exe*, which we explored earlier in
    this chapter using the `pefile` library, like this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经提取了恶意软件程序的可打印字符串，挑战是理解这些字符串的含义。例如，假设我们将*ircbot.exe*的字符串转储到*ircbotstring.txt*文件中，正如我们在本章前面使用`pefile`库探索*ircbot.exe*时所做的那样，操作如下：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The contents of *ircbotstring.txt* contain thousands of lines of text, but some
    of these lines should stick out. For example, [Listing 1-7](ch01.xhtml#ch01list7)
    shows a bunch of lines extracted from the string dump that begin with the word
    `DOWNLOAD`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*ircbotstring.txt*的内容包含数千行文本，但其中一些行应该特别引人注意。例如，[列表1-7](ch01.xhtml#ch01list7)显示了一堆从字符串转储中提取出来的行，这些行以`DOWNLOAD`这个词开头。'
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 1-7: The* strings *output showing evidence that the malware can download
    files specified by the attacker onto a target machine*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表1-7：* strings *输出，显示证据表明恶意软件可以将攻击者指定的文件下载到目标机器上*'
- en: These lines indicate that *ircbot.exe* will attempt to download files specified
    by an attacker onto the target machine.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行表示*ircbot.exe*将尝试将攻击者指定的文件下载到目标机器上。
- en: Let’s try analyzing another one. The string dump shown in [Listing 1-8](ch01.xhtml#ch01list8)
    indicates that *ircbot.exe* can act as a web server that listens on the target
    machine for connections from the attacker.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试分析另一个例子。[列表1-8](ch01.xhtml#ch01list8)中的字符串转储显示*ircbot.exe*可以充当一个Web服务器，在目标机器上监听来自攻击者的连接。
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 1-8: The* strings *output showing that the malware has an HTTP server
    to which the attacker can connect*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表1-8：* strings *输出，显示恶意软件有一个HTTP服务器，攻击者可以连接到该服务器*'
- en: '[Listing 1-8](ch01.xhtml#ch01list8) shows a wide variety of HTTP boilerplates
    used by *ircbot.exe* to implement an HTTP server. It’s likely that this HTTP server
    allows the attacker to connect to a target machine via HTTP to issue commands,
    such as the command to take a screenshot of the victim’s desktop and send it back
    to the attacker. We see evidence of HTTP functionality throughout the listing.
    For example, the `GET` method ➊ requests data from an internet resource. The line
    `HTTP/1.0 200 OK` ➋ is an HTTP string that returns the status code `200`, indicating
    that all went well with an HTTP network transaction, and `Server: myBot` ➌ indicates
    that the name of the HTTP server is *myBot*, a giveaway that *ircbot.exe* has
    a built-in HTTP server.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表1-8](ch01.xhtml#ch01list8)展示了多种由*ircbot.exe*用来实现HTTP服务器的HTTP样板代码。很可能，这个HTTP服务器允许攻击者通过HTTP连接到目标机器，以发出命令，例如截取受害者桌面截图并将其发送回攻击者。我们可以在整个列表中看到HTTP功能的证据。例如，`GET`方法
    ➊ 请求从网络资源获取数据。`HTTP/1.0 200 OK` ➋ 是一个HTTP字符串，返回状态码`200`，表示HTTP网络交易正常完成，而`Server:
    myBot` ➌ 表明HTTP服务器的名称是*myBot*，这表明*ircbot.exe*内置了一个HTTP服务器。'
- en: All of this information is useful in understanding and stopping a particular
    malware sample or malicious campaign. For example, knowing that a malware sample
    has an HTTP server that outputs certain strings when you connect to it allows
    you to scan your network to identify infected hosts.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些信息对于理解和阻止特定恶意软件样本或恶意活动都非常有用。例如，知道某个恶意软件样本拥有一个HTTP服务器，当你连接到它时，它会输出某些字符串，这使你能够扫描网络并识别受感染的主机。
- en: '**Summary**'
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter, you got a high-level overview of static malware analysis, which
    involves inspecting a malware program without actually running it. You learned
    about the PE file format that defines Windows *.exe* and *.dll* files, and you
    learned how to use the Python library `pefile` to dissect a real-world malware
    *ircbot.exe* binary. You also used static analysis techniques such as image analysis
    and strings analysis to extract more information from malware samples. [Chapter
    2](ch02.xhtml#ch02) continues our discussion of static malware analysis with a
    focus on analyzing the assembly code that can be recovered from malware.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，你对静态恶意软件分析有了一个高层次的概述，这种方法涉及在不实际运行恶意软件的情况下对其进行检查。你了解了定义Windows *.exe*和*.dll*文件的PE文件格式，并且学习了如何使用Python库`pefile`来剖析真实世界的恶意软件*ircbot.exe*二进制文件。你还使用了静态分析技术，如图像分析和字符串分析，从恶意软件样本中提取更多信息。[第2章](ch02.xhtml#ch02)继续讨论静态恶意软件分析，重点分析可以从恶意软件中恢复的汇编代码。
