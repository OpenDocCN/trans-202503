- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 8 SOPHISTICATED ARRAYS
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8 高级数组
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: In this chapter, we’ll take a more sophisticated approach to PHP arrays and
    explore how to manually assign an array’s keys. This opens up the possibility
    of using meaningful strings as keys instead of PHP’s default behavior of using
    sequential integers. We’ll also discuss multidimensional arrays, where the value
    of an array element is itself another array, and we’ll look at more functions
    and operators for working with arrays. With this expanded look at PHP arrays,
    you’ll begin to see how they can store and manipulate more complex data structures.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将采用更复杂的方法来处理 PHP 数组，并探讨如何手动分配数组的键。这为使用有意义的字符串作为键提供了可能，而不是 PHP 默认的使用顺序整数的行为。我们还将讨论多维数组，其中数组元素的值本身就是另一个数组，并且我们将了解更多用于操作数组的函数和操作符。通过对
    PHP 数组的更深入了解，您将开始看到它们如何存储和处理更复杂的数据结构。
- en: '### Declaring Array Keys Explicitly'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '### 显式声明数组键'
- en: We’ve discussed how PHP will automatically assign sequential integer keys to
    array elements, starting from 0, in which case the resulting array will meet the
    definition of a *list*. Rather than relying on this default behavior, however,
    you can use the double-arrow operator (=>) when declaring an array to explicitly
    map a key to each value. Then you aren’t obligated to follow the default pattern
    for keys. For example, you can use nonsequential integers as keys, or start counting
    from a number other than 0\. Either way, the resulting array will no longer be
    considered a list, but it will be a valid array nonetheless. To illustrate, [Listing
    8-1](#lis8-1) shows a script that explicitly uses nonsequential integer keys in
    an array.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论过 PHP 如何自动为数组元素分配顺序整数键，从 0 开始，在这种情况下，生成的数组将符合*列表*的定义。然而，您也可以在声明数组时使用双箭头操作符（=>）显式地将键映射到每个值，而不是依赖于这种默认行为。这样，您就不必遵循默认的键模式。例如，您可以使用非顺序的整数作为键，或从
    0 以外的数字开始计数。无论哪种方式，生成的数组将不再被视为列表，但它仍然是一个有效的数组。为了说明，[清单 8-1](#lis8-1) 显示了一个显式使用非顺序整数键的数组脚本。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 8-1: Explicitly declaring integer array keys out of sequence'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 8-1：显式声明不按顺序排列的整数数组键
- en: Here we declare a $rainfallValues array. Inside the square brackets of the array,
    we use the => operator to explicitly assign a key to each array element. For example,
    0 => 10 adds an element to the array with a value of 10 and a key of 0. The key/value
    pairs are separated by commas, just as we separated the array values by commas
    in [Chapter 7](chapter7.xhtml) when we weren’t explicitly declaring the keys.
    In this case, we’ve also placed each key/value pair on its own indented line,
    for clarity. With the array declared, the script continues by looping through
    it and printing its key/value pairs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们声明了一个 $rainfallValues 数组。在数组的方括号内，我们使用 => 操作符显式地为每个数组元素分配键。例如，0 => 10
    会向数组中添加一个值为 10、键为 0 的元素。键/值对通过逗号分隔，就像我们在[第 7 章](chapter7.xhtml)中没有显式声明键时用逗号分隔数组值一样。在这种情况下，我们还将每个键/值对放在了单独的缩进行中，以提高清晰度。声明数组后，脚本继续通过循环遍历它并打印出键/值对。
- en: 'Notice that the array keys we’ve declared aren’t sequential. The second array
    element has a key of 4, and the third element has a key of 3. This may not be
    the most intuitive scheme for assigning keys, but if that’s what we want, PHP
    is perfectly fine with it. The array won’t meet the definition of a list (so the
    call to array_is_list() at the end of the script should return false), but the
    array is still valid. Here’s the output of running the script:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们声明的数组键不是顺序的。第二个数组元素的键是 4，第三个元素的键是 3。这可能不是分配键的最直观方式，但如果这是我们想要的，PHP 完全可以接受。数组将不再符合列表的定义（因此脚本末尾的
    array_is_list() 调用应该返回 false），但数组仍然有效。以下是运行脚本的输出：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The foreach loop works even though the array isn’t a proper list, iterating
    through the array’s key/value pairs and printing them out. Notice that the element
    with key 4 prints before key 3. What matters is the order in which the elements
    are *declared*, not the numerical order of the keys themselves. The false at the
    end of the output confirms that the array no longer meets the requirements of
    a list.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 即使数组不是一个完整的列表，foreach 循环仍然有效，它会遍历数组的键/值对并将其打印出来。请注意，键为 4 的元素在键为 3 的元素之前打印出来。关键在于元素是如何*声明*的，而不是键本身的数字顺序。输出末尾的
    false 确认了该数组不再符合列表的要求。
- en: Once you start explicitly declaring keys, you don’t necessarily have to declare
    one for *every* array element. If an element is declared without a key, PHP will
    automatically look for the most recent integer key, increment it, and use that
    as the new key. This can be useful if you want an array to have sequential keys
    that don’t start from 0.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你开始显式声明键，就不一定需要为*每一个*数组元素都声明一个键。如果一个元素没有声明键，PHP将自动查找最近的整数键，递增它，并使用该键作为新的键。如果你希望数组的键按顺序排列，但不从0开始，这种方式会非常有用。
- en: For example, say you have a class of students and want an array mapping the
    students’ IDs to their grades. Each ID is a seven-digit number, beginning with
    the year and followed by three digits that increment sequentially. In 2025, for
    instance, the first student would have a numeric ID of 2025001, the next 2025002,
    and so on. In this case, you can explicitly declare just the first array key and
    let PHP automatically assign the rest. [Listing 8-2](#lis8-2) shows how.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你有一个学生班级，并希望创建一个数组，将学生的ID映射到他们的成绩。每个ID是一个七位数的数字，开头是年份，后面跟着三个数字，按顺序递增。例如，在2025年，第一位学生的ID为2025001，下一位为2025002，依此类推。在这种情况下，你可以显式声明第一个数组键，并让PHP自动分配其余的键。[清单
    8-2](#lis8-2)展示了具体做法。
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 8-2: Declaring the first array key explicitly and the rest automatically'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 8-2：显式声明第一个数组键，其余自动分配
- en: 'Within the $studentGrades array, we explicitly give the first element a key
    of 2025001. Then, beginning with the second element ❶, we supply only the values.
    By default, PHP will map these values to the integer keys 2025002, 2025003, and
    so on. As before, we finish the script by looping through and printing the key/value
    pairs and testing whether the array counts as a list. The output is shown here:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在$studentGrades数组中，我们显式地为第一个元素指定了键2025001。然后，从第二个元素❶开始，我们只提供值。默认情况下，PHP会将这些值映射到整数键2025002、2025003等。和之前一样，我们通过循环并打印键/值对来完成脚本，并测试该数组是否算作列表。输出如下所示：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice that PHP has assigned the remaining keys sequentially, incrementing from
    the explicitly declared key of 2025001. However, even though the keys are sequential,
    they don’t start from 0\. Therefore, the array isn’t a list, as the false at the
    end of the output confirms.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，PHP已按顺序分配了其余的键，从显式声明的键2025001开始递增。然而，尽管这些键是按顺序排列的，它们并不是从0开始的。因此，该数组并不是一个列表，输出末尾的false证明了这一点。
- en: Arrays with Strings as Keys
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用字符串作为键的数组
- en: 'Let’s take our coding a step further: now that we’re assigning array keys explicitly,
    who’s to say they have to be integers? They can just as easily be strings, in
    which case each value in the array can be given a meaningful name as a key. Returning
    to the $rainfallValues array from [Listing 8-1](#lis8-1), for example, we can
    use month names as keys instead of integers. This change will better indicate
    that each value in the array is a monthly rainfall total. [Listing 8-3](#lis8-3)
    revises the script accordingly.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步扩展我们的代码：既然我们已经显式分配了数组键，谁说它们一定得是整数呢？它们同样可以是字符串，在这种情况下，数组中的每个值都可以有一个有意义的名字作为键。例如，回到[清单
    8-1](#lis8-1)中的$rainfallValues数组，我们可以使用月份名称作为键，而不是使用整数。这种修改将更好地表明数组中的每个值代表一个月的降水总量。[清单
    8-3](#lis8-3)已经相应地修正了脚本。
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 8-3: Using strings as array keys'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 8-3：将字符串用作数组键
- en: 'This time we’ve assigned the key ''jan'' to the value 10, the key ''feb'' to
    the value 8, and the key ''march'' to the value 12. We use the same => operator
    as before to pair keys with values. The only difference is that the keys are now
    strings. Here’s the script’s output:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们将键'jan'分配给值10，将键'feb'分配给值8，将键'march'分配给值12。我们使用和之前相同的=>运算符来将键与值配对。唯一的不同是，现在键是字符串。以下是脚本的输出：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The string keys clarify what the values actually represent. The false at the
    end of the output shows that this array isn’t a list. This isn’t surprising, since
    the keys aren’t even integers.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串键清晰地说明了值的实际含义。输出末尾的false显示该数组不是一个列表。这并不奇怪，因为这些键甚至不是整数。
- en: 'Accessing individual values from an array with string keys works just like
    accessing values from arrays with integer keys: provide the key in square brackets,
    after the array name. For example, here’s how to print the rainfall value for
    the month of March:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字符串键从数组中访问单个值的方式和使用整数键访问数组值一样：在数组名后面提供键，并用方括号括起来。例如，以下是如何打印三月降水量的值：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Similarly, you can also use square-bracket notation to add or update array
    elements with string keys. Here we add a new rainfall total for April:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你也可以使用方括号表示法，通过字符串键来添加或更新数组元素。在这里，我们为四月添加了新的降水总量：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is a simple example, but hopefully you can begin to see the potential power
    of PHP arrays to build meaningful collections of data. When you don’t need the
    full range of features of object-oriented programming (discussed in [Part V](part5.xhtml)),
    using arrays with string keys allows you to work with data whose values are naturally
    associated with keys that make sense for the task (such as dates or months, people’s
    names or IDs, or product names or codes).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的例子，但希望你可以开始看到PHP数组在构建有意义的数据集合方面的潜力。当你不需要面向对象编程（在[第五部分](part5.xhtml)中讨论）所提供的全部功能时，使用带有字符串键的数组可以帮助你处理那些值与任务相关联的键（如日期或月份、人名或ID、或产品名称或代码）数据。
- en: Multidimensional Arrays
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多维数组
- en: 'Up to now, the arrays we’ve been exploring have been *single-dimensional*:
    they contain a sequence of elements, and each element is a scalar (single) value
    mapped to a key. However, you can also declare arrays containing elements that
    are arrays themselves, resulting in a *multidimensional array*. For example, say
    you want to create an array of tasks and the time each task will take in minutes.
    Each element in the array could itself be an array holding the name of a task
    and its associated duration, as shown here:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所探索的数组都是*一维的*：它们包含一个元素序列，每个元素都是一个标量（单一）值，映射到一个键。然而，你也可以声明包含数组元素的数组，从而得到一个*多维数组*。例如，假设你想创建一个任务数组，每个任务需要的时间（以分钟为单位）。数组中的每个元素本身可以是一个数组，包含任务名称和其相关的持续时间，如下所示：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here $tasksAndMinutes is a multidimensional array. Its first element, ['shopping',
    30], is a two-element array holding a string task name and the integer number
    of minutes to allocate for that task. The other array elements follow this same
    format. With a multidimensional array like this, we refer to the overall $tasksAndMinutes
    as the *outer* array and its elements as the *inner* arrays.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的$tasksAndMinutes是一个多维数组。它的第一个元素，['shopping', 30]，是一个包含字符串任务名称和整数分钟数的两元素数组。其他数组元素遵循相同的格式。对于这样一个多维数组，我们把整个$tasksAndMinutes称为*外部*数组，它的元素称为*内部*数组。
- en: One way to work with a multidimensional array is to use a nested set of foreach
    loops, one to iterate over the elements of the outer array and the other to iterate
    over the elements of each inner array. In the $tasksAndMinutes array, however,
    all the inner arrays have the same structure (which won’t always be a given).
    Therefore, in cases like these, you can use your knowledge of that structure to
    extract the values from each inner array by using a single foreach loop that iterates
    over the outer array. [Listing 8-4](#lis8-4) illustrates this approach.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 处理多维数组的一种方式是使用一组嵌套的foreach循环，一个循环遍历外部数组的元素，另一个循环遍历每个内部数组的元素。然而，在$tasksAndMinutes数组中，所有的内部数组具有相同的结构（这并不总是如此）。因此，在这种情况下，你可以利用对该结构的了解，通过使用单一的foreach循环来遍历外部数组，从每个内部数组中提取值。[清单8-4](#lis8-4)展示了这一方法。
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Listing 8-4: Working with a multidimensional array'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 清单8-4：处理多维数组
- en: 'We declare the $tasksAndMinutes array as shown previously. Next, we declare
    a foreach loop that iterates through the elements of $tasksAndMinutes, using the
    $item variable to represent the current element. As we’ve seen, each element is
    itself an array containing a task name and a time in minutes. We can therefore
    extract the first element of $item (using integer index 0) into the $task variable
    and the second element (index 1) into $minutes. Then we print a message about
    the current task by using these two variables, producing the following output:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们像之前一样声明$tasksAndMinutes数组。接下来，我们声明一个foreach循环，遍历$tasksAndMinutes的元素，使用$item变量来表示当前元素。如我们所见，每个元素本身是一个包含任务名称和时间（分钟）的数组。因此，我们可以提取$item的第一个元素（使用整数索引0）到$task变量，第二个元素（索引1）到$minutes变量。然后，我们使用这两个变量打印关于当前任务的信息，输出如下：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The times and task names have successfully been extracted from each inner array
    during the foreach loop.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在foreach循环中，时间和任务名称已经成功地从每个内层数组中提取出来。
- en: In this example, the inner arrays use integer keys by default, but as you know,
    arrays can also use non-numeric keys. Pairing the values in each inner array with
    meaningful string keys like 'task' and 'minutes' will make the code much more
    readable. For example, we’ll be able to access the task from the current element
    of $tasksAndMinutes with $task = $item['task'] rather than $task = $item[0]. [Listing
    8-5](#lis8-5) shows this improvement.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，内部数组默认使用整数键，但如你所知，数组也可以使用非数字键。将每个内部数组中的值与有意义的字符串键（如 'task' 和 'minutes'）配对，会让代码更加易读。例如，我们可以通过
    $task = $item['task'] 来访问当前元素的任务，而不是 $task = $item[0]。[列表 8-5](#lis8-5) 展示了这一改进。
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Listing 8-5: Refactoring [Listing 8-4](#lis8-4) to use string keys in the inner
    arrays'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 8-5：重构[列表 8-4](#lis8-4)，在内部数组中使用字符串键
- en: 'This time we explicitly assign the string keys ''task'' and ''minutes'' to
    the values in each of the arrays inside $tasksAndMinutes. Then we use those meaningful
    keys inside the foreach loop to extract the values from the current inner array
    being processed. The result is exactly the same as before, but the code is easier
    to read. Before PHP allowed for object-oriented programming, well-labeled multidimensional
    arrays like this were an integral part of the code for the data-related features
    of many programs.  ### More Array Operations'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '这次我们显式地将字符串键 ''task'' 和 ''minutes'' 分配给 $tasksAndMinutes 中每个数组的值。然后，我们在 foreach
    循环中使用这些有意义的键来提取当前正在处理的内部数组中的值。结果和之前完全一样，但代码更容易阅读。在 PHP 支持面向对象编程之前，像这样的具有良好标签的多维数组是许多程序数据相关功能代码的核心部分。
    ### 更多数组操作'
- en: In [Chapter 7](chapter7.xhtml), we discussed array operations such as adding
    an element to and removing an element from the end of a simple array. Now that
    we’ve explored sophisticated arrays, let’s consider more array operations. We’ll
    look at how to remove an element from anywhere in an array, how to use array operators
    like union (+) and spread (...), and how to extract the elements of an array into
    separate variables.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](chapter7.xhtml)中，我们讨论了数组操作，如向简单数组的末尾添加元素和从末尾删除元素。现在我们已经探讨了复杂数组，让我们考虑更多的数组操作。我们将学习如何从数组的任意位置删除元素，如何使用数组运算符如并集（+）和展开（...），以及如何将数组元素提取到单独的变量中。
- en: Removing Any Element from an Array
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从数组中删除任何元素
- en: You can remove an element from an array by passing the element’s key to the
    unset() function. Unlike the array_pop() function covered in the previous chapter,
    which specifically removes the *last* element in an array, unset() can remove
    an element from *any* position. Also unlike array_pop(), the unset() function
    doesn’t return the deleted element; it’s simply gone.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将元素的键传递给 unset() 函数来从数组中删除元素。与上一章中介绍的 array_pop() 函数不同，array_pop() 函数专门删除数组中的*最后*一个元素，而
    unset() 可以从*任何*位置删除元素。与 array_pop() 不同，unset() 函数不会返回被删除的元素，它只是消失了。
- en: Using unset() becomes more appropriate when you start assigning strings rather
    than integers as array keys. With string keys, the order of the array elements
    often loses its significance, so it’s more meaningful to remove an element based
    on its key rather than its position in the array. [Listing 8-6](#lis8-6) revisits
    the $rainfallValues array as an example.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始使用字符串而非整数作为数组键时，使用 unset() 变得更加合适。对于字符串键，数组元素的顺序往往不再重要，因此基于键而非数组中的位置删除元素更有意义。[列表
    8-6](#lis8-6) 重新访问了 $rainfallValues 数组作为例子。
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Listing 8-6: Using unset() to remove an element from an array'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 8-6：使用 unset() 从数组中删除元素
- en: 'We use unset() to remove the element with the ''feb'' key from the $rainfallValues
    array. Then we loop through the array to print details for the remaining elements
    as before. Here’s the result:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 unset() 从 $rainfallValues 数组中删除键为 'feb' 的元素。然后，我们像之前一样遍历数组，打印剩余元素的详细信息。结果如下：
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Notice that no data is printed for an element with the key 'feb', since that
    element no longer exists within the array.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，对于键为 'feb' 的元素没有打印任何数据，因为该元素不再存在于数组中。
- en: NOTE
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*Calling* unset() *on a whole array, such as* unset($rainfallValues)*, would
    delete the entire array, just as calling* unset() *on any other variable would
    clear that variable.*  #### Combining and Comparing Arrays'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*调用* unset() *在整个数组上，例如* unset($rainfallValues)*，将删除整个数组，就像在任何其他变量上调用* unset()
    *将清空该变量一样。*  #### 合并和比较数组'
- en: You can combine or compare arrays by using some of the same addition, equality,
    and identity operators that apply to scalar (single-value) variables. [Table 8-1](#tab8-1)
    summarizes the six array operators available.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用一些相同的加法、相等性和身份操作符来组合或比较数组，这些操作符适用于标量（单值）变量。[表 8-1](#tab8-1)总结了六个可用的数组操作符。
- en: 'Table 8-1: Array Operators'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 表 8-1：数组操作符
- en: '| Name | Symbol | Example | Description |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 符号 | 示例 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Union | + | $a + $b | Returns an array with the elements of arrays $a and
    $b. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 联合 | + | $a + $b | 返回一个包含数组 $a 和 $b 元素的数组。 |'
- en: '| Spread | ... | [1, ...$a] | Returns an array that has 1 as the first element,
    followed by the elements of array $a. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 展开 | ... | [1, ...$a] | 返回一个数组，数组的第一个元素是 1，接着是数组 $a 的元素。 |'
- en: '| Equal | == | $a == $b | Returns true if arrays $a and $b have the same key/value
    pairs. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 相等 | == | $a == $b | 如果数组 $a 和 $b 拥有相同的键/值对，则返回 true。 |'
- en: '| Identical | === | $a === $b | Returns true if arrays $a and $b are identical:
    they have the same key/value pairs, and their elements are in the same order and
    of the same types. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 相同 | === | $a === $b | 如果数组 $a 和 $b 完全相同：它们具有相同的键/值对，元素的顺序和类型也相同，则返回 true。
    |'
- en: '| Not equal | != or <> | $a != $b$a <> $b | Returns true if arrays $a and $b
    do not have the same key/value pairs. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 不相等 | != 或 <> | $a != $b $a <> $b | 如果数组 $a 和 $b 没有相同的键/值对，则返回 true。 |'
- en: '| Not identical | !== | $a !== $b | Returns true if array $a is not identical
    to array $b. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 不相同 | !== | $a !== $b | 如果数组 $a 和数组 $b 不相同，则返回 true。 |'
- en: '[Listing 8-7](#lis8-7) shows some of these operators in action.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 8-7](#lis8-7)展示了这些操作符的实际应用。'
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Listing 8-7: Using array operators'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 8-7：使用数组操作符
- en: 'First, we declare some example arrays to work with: $cars1 and $cars2 have
    car makes as keys and car colors as values, while $names1 and $names2 have first
    names as keys and last names as values. (Notice that $names1 and $names2 have
    the same elements, but in the opposite order.)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们声明一些示例数组来进行操作：$cars1 和 $cars2 以汽车品牌为键，汽车颜色为值，而 $names1 和 $names2 以名字为键，姓氏为值。（注意，$names1
    和 $names2 拥有相同的元素，但顺序相反。）
- en: 'Then we apply operators to these arrays and print the results. We use the union
    (+) operator to combine $cars1 and $cars2, and we test the equal (==) and identical
    (===) operators on $names1 and $names2. We also use the array spread operator
    (...) to create a new array with a key of ''rolls royce'' mapped to a value of
    ''yellow'', as well as all the elements of the $cars1 and $names1 arrays ❶. Notice
    that we use print_r() to show the results of the operations that return arrays;
    this function displays arrays more succinctly than var_dump(). Running the script
    results in this output:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将操作符应用到这些数组，并打印结果。我们使用联合 (+) 操作符来合并 $cars1 和 $cars2，使用相等 (==) 和相同 (===)
    操作符来测试 $names1 和 $names2。我们还使用数组展开操作符 (...) 来创建一个新数组，其键为 'rolls royce'，值为 'yellow'，并包含
    $cars1 和 $names1 数组的所有元素 ❶。注意，我们使用 print_r() 来显示返回数组的操作结果；该函数比 var_dump() 更简洁地展示数组。运行脚本后，得到如下输出：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The first part of the output shows the result of $cars1 + $cars2 ❶. Both arrays
    of cars have an element with a key of 'audi', but an array can’t have two identical
    keys. As such, the union operator takes the 'audi' => 'silver' element from $cars1
    but ignores 'audi' => 'white' from $cars2, resulting in a three-element array.
    Next, the true and false outputs ❷ indicate that the $names1 and $names2 arrays
    are *equal*, since they have the same keys and values, but not *identical*, since
    the sequence of elements is different. The final array shows the result of using
    the spread operator (...) ❸. The new array has a 'rolls royce' element, followed
    by the elements from $cars1 and $names1.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的第一部分展示了 $cars1 + $cars2 ❶ 的结果。两个汽车数组都包含一个键为 'audi' 的元素，但数组不能有两个相同的键。因此，联合操作符从
    $cars1 中取出 'audi' => 'silver' 元素，但忽略了 $cars2 中的 'audi' => 'white' 元素，结果是一个包含三个元素的数组。接下来，输出中的
    true 和 false 结果 ❷ 表明 $names1 和 $names2 数组是 *相等* 的，因为它们有相同的键和值，但不是 *完全相同* 的，因为元素的顺序不同。最后的数组显示了使用展开操作符
    (...) ❸ 的结果。新数组包含一个 'rolls royce' 元素，接着是 $cars1 和 $names1 中的元素。
- en: 'It’s worth underscoring what the spread operator (...) is doing here: it extracts
    the elements from one array and inserts them, one at a time, into another array.
    Without the spread operator, the entire array would be inserted as a single element
    into the new array, thus creating a multidimensional array, rather than its individual
    elements being spread into the new array. To illustrate, say we had omitted the
    spread operator before $cars1 ❶ in [Listing 8-7](#lis8-7), like this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 值得强调的是，展开运算符 (...) 在这里的作用：它从一个数组中提取元素，并将它们一个一个地插入到另一个数组中。如果没有展开运算符，整个数组会作为单个元素插入到新数组中，从而创建一个多维数组，而不是将它的各个元素展开到新数组中。举个例子，假设我们在
    [示例 8-7](#lis8-7) 中，省略了 $cars1 前面的展开运算符 ❶，如下所示：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The resulting array would have an element containing the whole $cars1 array,
    as shown here:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 结果数组将包含一个元素，该元素包含整个 $cars1 数组，如下所示：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now the second element in the array, with key 0, is itself an array containing
    the complete contents of $cars1. This example also illustrates how an array can
    mix integer keys with non-integer keys. When the whole $cars1 array is added as
    an element to the new array, it’s automatically given the first available integer
    key, 0, since it wasn’t given a key manually. Meanwhile, the other elements in
    the new array all have explicitly assigned string keys. Arrays with mixed keys
    like this are rare; usually such an array would indicate something has gone wrong,
    such as the missing spread operator here.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在数组中的第二个元素，键值为 0，本身是一个数组，包含了完整的 $cars1 内容。这个例子也展示了数组如何将整数键与非整数键混合使用。当整个 $cars1
    数组作为元素添加到新数组时，由于没有手动指定键值，它会自动分配第一个可用的整数键 0。同时，新数组中的其他元素都显式地分配了字符串键。像这样混合键的数组是比较少见的；通常这样的数组表示某些东西出了问题，例如这里缺少了展开运算符。
- en: Destructuring an Array into Multiple Variables
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将数组解构为多个变量
- en: Sometimes it can be useful to extract the values from an array and assign them
    to separate variables, a process known as *destructuring*. If you know the number
    of elements in the array, you can destructure it in a single statement, as shown
    in [Listing 8-8](#lis8-8).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有时提取数组中的值并将它们赋值给单独的变量会很有用，这个过程叫做 *解构*。如果你知道数组中的元素数量，你可以通过一条语句解构它，如 [示例 8-8](#lis8-8)
    所示。
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Listing 8-8: Destructuring a three-element array into three separate variables'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 8-8：将一个包含三个元素的数组解构为三个单独的变量
- en: 'We declare the $rainfallValues array to have three elements. Then we destructure
    the array into the $jan, $feb, and $march variables ❶. For that, we list the target
    variables inside square brackets on the left of an assignment operator (=) and
    provide the variable containing the whole array on the right. Finally, we print
    out the values in the three variables, producing the following output:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明 $rainfallValues 数组包含三个元素。然后，我们将该数组解构到 $jan、$feb 和 $march 变量 ❶ 中。为此，我们在赋值运算符
    (=) 的左边列出目标变量，并在右边提供包含整个数组的变量。最后，我们打印出这三个变量中的值，产生如下输出：
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Notice that the values from the array are successfully assigned into, and print
    out from, the individual $jan, $feb, and $march variables.  ### Callback Functions
    and Arrays'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '注意，数组中的值已经成功地赋值到单独的 $jan、$feb 和 $march 变量中，并从这些变量中打印出来。 ### 回调函数与数组'
- en: A *callback function*, or simply a *callback*, is a function that isn’t called
    directly, but rather is passed as an argument to another function. The other function
    then calls the callback function for you. PHP has several functions that use callbacks
    in conjunction with arrays.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*回调函数*，简称 *回调*，是一种不会直接调用的函数，而是作为参数传递给另一个函数。然后，另一个函数会为你调用回调函数。PHP 中有多个函数使用回调与数组结合。'
- en: For example, array_walk() takes in an array and a callback function as arguments
    and applies the callback function to each element in the array, transforming the
    original array in the process. Similarly, array_map() takes in an array and a
    callback function, applies the callback to each array element, and returns a new
    array containing the results. Both array_walk() and array_map() are known as *higher-order
    functions*, since they take in a function as an argument.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，array_walk() 接收一个数组和一个回调函数作为参数，并对数组中的每个元素应用回调函数，从而在这个过程中改变原始数组。类似地，array_map()
    接收一个数组和一个回调函数，应用回调函数到每个数组元素，并返回一个包含结果的新数组。array_walk() 和 array_map() 都被称为 *高阶函数*，因为它们将一个函数作为参数。
- en: 'If you’ve declared a function in a separate file (as previously discussed in
    [Chapter 5](chapter5.xhtml)) or are using one of PHP’s built-in functions, you
    can use that function as a callback by passing a string containing the function’s
    name to a higher-order function. For example, say we’ve declared a function called
    my_function() and we want to apply it to every element in $my_array by using array_map().
    Here’s how to do it:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个单独的文件中声明了一个函数（如[第5章](chapter5.xhtml)所讨论的），或者使用了PHP的内置函数，你可以通过将包含函数名的字符串传递给高阶函数来使用该函数作为回调。例如，假设我们声明了一个名为my_function()的函数，并且想要通过使用array_map()将它应用到$my_array中的每个元素。下面是具体做法：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We pass the string 'my_function' (the name of the desired callback) and the
    array as arguments to array_map(), which will call my_function() for each element
    in the array. The results are returned in a new array, which we store in the $my_new_array
    variable.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将字符串'my_function'（所需回调的名称）和数组作为参数传递给array_map()，它会对数组中的每个元素调用my_function()。结果会以新数组的形式返回，我们将其存储在$my_new_array变量中。
- en: 'Rather than declare the callback function separately, another common approach
    is to define an *anonymous* (unnamed) callback function directly in the argument
    list for the higher-order function. Before we look at an anonymous function in
    the context of a higher-order function like array_map(), though, let’s consider
    an anonymous function by itself to better understand the syntax. Here’s a simple
    anonymous function that takes in a number and returns double its value:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 除了单独声明回调函数，另一种常见的做法是在高阶函数的参数列表中直接定义*匿名*（无名）回调函数。在我们在像array_map()这样的高阶函数中使用匿名函数之前，先让我们单独考虑一下匿名函数，以便更好地理解语法。以下是一个简单的匿名函数，它接收一个数字并返回其值的两倍：
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The function begins with the function keyword, followed by the function’s signature,
    (int $n): int, which indicates that the function takes a single integer parameter
    $n and returns an integer value. Notice that the function signature doesn’t include
    a name, since the function is anonymous. After the signature comes the anonymous
    function’s body, which is enclosed in curly brackets. The body returns twice the
    value of the provided $n argument.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '该函数以function关键字开始，后面是函数的签名`(int $n): int`，表示该函数接收一个整数参数$n并返回一个整数值。请注意，函数签名中没有包括名称，因为该函数是匿名的。签名后面是匿名函数的主体，主体被花括号包围。该主体返回提供的$n参数的两倍值。'
- en: 'Another option is to write the anonymous callback as an *arrow function*, using
    a more concise syntax that uses the double-arrow operator (=>) to separate the
    function’s signature and body. This syntax removes the need for the return keyword,
    the curly brackets around the body, and the semicolon to end the statement in
    the body. Here’s the arrow-function version of our doubling operation:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选择是将匿名回调函数写成*箭头函数*，使用更简洁的语法，采用双箭头操作符（=>）来分隔函数的签名和主体。这种语法省去了`return`关键字、主体周围的花括号以及结束语句的分号。以下是我们倍增操作的箭头函数版本：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Instead of function, we now begin with fn, a reserved keyword for declaring
    arrow functions. Then comes the function’s signature as before. Next, we write
    the double-arrow operator (=>), followed by an expression defining the function’s
    return value (in this case, $n * 2). Without the curly brackets, semicolon, and
    return keyword, the arrow function is extremely compact.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们不再使用function，而是以`fn`开始，这是声明箭头函数的保留关键字。接着是函数的签名，和之前一样。然后是双箭头操作符（=>），后面跟着一个定义函数返回值的表达式（在此例中为$n
    * 2）。没有了花括号、分号和return关键字，箭头函数变得非常简洁。
- en: Now let’s try using this arrow function as a callback. [Listing 8-9](#lis8-9)
    shows how to pass the arrow function to array_map() in order to double every value
    in an array.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试将这个箭头函数用作回调。[列表 8-9](#lis8-9)展示了如何将箭头函数传递给array_map()，以便将数组中的每个值都加倍。
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Listing 8-9: Passing an arrow callback function to array_map()'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 8-9：将箭头回调函数传递给array_map()
- en: 'We declare a $numbers array containing 10, 20, and 30. We then call the array_map()
    function. For the first argument, we use arrow-function syntax to declare the
    doubling callback function we just discussed ❶. Notice that the arrow function
    ends with a comma, since it’s part of the list of arguments to array_map(). The
    second argument is the $numbers array. The array_map() function will automatically
    apply the arrow function to each element in the array and return a new array containing
    the results. We store that new array in the $doubleNumbers variable. Here’s the
    output of running this script and printing the resulting array:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明了一个包含10、20和30的$numbers数组。然后，我们调用array_map()函数。对于第一个参数，我们使用箭头函数语法声明了我们刚刚讨论过的双倍回调函数❶。注意，箭头函数以逗号结束，因为它是array_map()函数参数列表的一部分。第二个参数是$numbers数组。array_map()函数会自动对数组中的每个元素应用箭头函数，并返回一个包含结果的新数组。我们将这个新数组存储在$doubleNumbers变量中。下面是运行此脚本并打印结果数组的输出：
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The $doubleNumbers array contains the values 20, 40, and 60. This indicates
    that the array_map() function successfully accessed each value in the $numbers
    array and applied the doubling arrow function to it.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: $doubleNumbers数组包含值20、40和60。这表示array_map()函数成功访问了$numbers数组中的每个值，并对其应用了双倍箭头函数。
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: Arrays are flexible data structures, especially when we begin assigning meaningful
    string keys to the values of the elements instead of using the default integer
    keys. In this chapter, you learned how to work with string-keyed arrays. You also
    saw how to embed arrays inside other arrays to create multidimensional arrays,
    and how to apply callback functions (written with arrow-function syntax) to every
    element of an array. Techniques like this are what make the array a sophisticated
    structure for representing and manipulating complex data.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 数组是灵活的数据结构，尤其当我们开始为元素的值分配有意义的字符串键，而不是使用默认的整数键时。在这一章中，你学习了如何使用字符串键的数组。你还看到如何将数组嵌套在其他数组中，创建多维数组，并且如何对数组的每个元素应用回调函数（使用箭头函数语法编写）。像这样的技巧使得数组成为一个复杂数据表示和操作的高级结构。
- en: Exercises
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习
- en: '1.   Use an array with string keys to store the following pairs of names and
    heights in meters:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 1.   使用字符串键的数组来存储以下姓名和身高（单位：米）对：
- en: '[PRE25]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Write a foreach loop to iterate through the array elements and print them out.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个foreach循环来遍历数组元素并打印它们。
- en: '2.   Create a multidimensional array to represent the following data about
    movies:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 2.   创建一个多维数组来表示以下关于电影的数据：
- en: '[PRE26]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 3.   Declare one array containing the odd numbers up to nine (1, 3, 5, 7, 9)
    and another with the even numbers (2, 4, 6, 8). Use the array spread operator
    (...) to combine the two arrays, and then sort them into numerical order with
    PHP’s built-in sort() function.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 3.   声明一个包含从1到9的奇数（1、3、5、7、9）的数组，另一个包含偶数（2、4、6、8）的数组。使用数组扩展操作符(...)将两个数组合并，然后使用PHP的内置sort()函数将它们按数字顺序排序。
