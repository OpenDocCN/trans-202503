- en: '**2**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2**'
- en: '**BUS PROTOCOLS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**总线协议**'
- en: '![image](graphics/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/common-01.jpg)'
- en: In this chapter, we’ll discuss the different bus protocols common in vehicle
    communications. Your vehicle may have only one of these, or if it was built earlier
    than 2000, it may have none.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论在车辆通信中常见的不同总线协议。你的车辆可能只使用其中一种，或者如果它是在 2000 年之前生产的，它可能根本没有使用这些协议。
- en: Bus protocols govern the transfer of packets through the network of your vehicle.
    Several networks and hundreds of sensors communicate on these bus systems, sending
    messages that control how the vehicle behaves and what information the network
    knows at any given time.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 总线协议管理着数据包在车辆网络中的传输。多个网络和成百上千的传感器在这些总线上通信，发送控制车辆行为和网络在任何特定时间了解信息的消息。
- en: 'Each manufacturer decides which bus and which protocols make the most sense
    for its vehicle. One protocol, the CAN bus, exists in a standard location on all
    vehicles: on the OBD-II connector. That said, the packets themselves that travel
    over a vehicle’s CAN bus aren’t standardized.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 每个制造商都会决定哪个总线和哪些协议最适合其车辆。一个协议，CAN 总线，在所有车辆上都有一个标准的位置：OBD-II 连接器上。也就是说，实际在车辆
    CAN 总线上传输的数据包并没有统一标准。
- en: Vehicle-critical communication, such as RPM management and braking, happens
    on high-speed bus lines, while noncritical communication, such as door lock and
    A/C control, happens on mid- to low-speed bus lines.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 关键车辆通信，如转速管理和刹车控制，发生在高速总线线路上，而非关键通信，如门锁和空调控制，发生在中速到低速总线线路上。
- en: We’ll detail the different buses and protocols you may run across on your vehicle.
    To determine the bus lines for your specific vehicle, check its OBD-II pinout
    online.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将详细介绍你可能在车辆上遇到的不同总线和协议。要确定你特定车辆的总线线路，请在线查找其 OBD-II 引脚图。
- en: '**The CAN Bus**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**CAN 总线**'
- en: CAN is a simple protocol used in manufacturing and in the automobile industry.
    Modern vehicles are full of little embedded systems and electronic control units
    (ECUs) that can communicate using the CAN protocol. CAN has been a standard on
    US cars and light trucks since 1996, but it wasn’t made mandatory until 2008 (2001
    for European vehicles). If your car is older than 1996, it still may have CAN,
    but you’ll need to check.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: CAN 是一种简单的协议，广泛应用于制造业和汽车行业。现代车辆充满了小型嵌入式系统和电子控制单元（ECU），它们可以使用 CAN 协议进行通信。自 1996
    年以来，CAN 已成为美国汽车和轻型卡车的标准，但直到 2008 年才成为强制性要求（欧洲车辆为 2001 年）。如果你的车是在 1996 年之前生产的，它仍然可能支持
    CAN，但你需要检查一下。
- en: 'CAN runs on two wires: CAN high (CANH) and CAN low (CANL). CAN uses *differential
    signaling* (with the exception of low-speed CAN, discussed in “[The GMLAN Bus](ch02.html#ch02lev2sec6)”
    on [page 20](ch02.html#page_20)), which means that when a signal comes in, CAN
    raises the voltage on one line and drops the other line an equal amount (see [Figure
    2-1](ch02.html#ch2fig1)). Differential signaling is used in environments that
    must be fault tolerant to noise, such as in automotive systems and manufacturing.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: CAN 使用两条线路：CAN 高电平（CANH）和 CAN 低电平（CANL）。CAN 使用 *差分信号*（低速 CAN 除外，详见 “[GMLAN 总线](ch02.html#ch02lev2sec6)”
    在 [第 20 页](ch02.html#page_20)），这意味着当一个信号到达时，CAN 会在一条线上的电压升高，同时另一条线的电压下降相同的幅度（见
    [图 2-1](ch02.html#ch2fig1)）。差分信号用于必须容忍噪声的环境，例如汽车系统和制造业。
- en: '![image](graphics/f02-01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-01.jpg)'
- en: '*Figure 2-1: CAN differential signaling*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-1：CAN 差分信号*'
- en: '[Figure 2-1](ch02.html#ch2fig1) shows a signal captured using a PicoScope,
    which listens to both CANH (darker lines at the top of the graph) and CANL (lighter
    lines at the bottom of the graph). Notice that when a bit is transmitted on the
    CAN bus, the signal will simultaneously broadcast both 1V higher and lower. The
    sensors and ECUs have a transceiver that checks to ensure both signals are triggered;
    if they are not, the transceiver rejects the packet as noise.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2-1](ch02.html#ch2fig1)展示了使用 PicoScope 捕获的信号，PicoScope 同时监听 CANH（图表顶部的较暗线条）和
    CANL（图表底部的较亮线条）。注意，当一个比特在 CAN 总线上传输时，信号会同时在两个方向上传播，电压分别升高和降低 1V。传感器和 ECU 有一个收发器，它检查是否同时触发了这两个信号；如果没有，收发器会将数据包拒绝为噪声。'
- en: The two twisted-pair wires make up the bus and require the bus to be terminated
    on each end. There’s a 120-ohm resistor across both wires on the termination ends.
    If the module isn’t on the end of the bus, it doesn’t have to worry about termination.
    As someone who may tap into the lines, the only time you’ll need to worry about
    termination is if you remove a terminating device in order to sniff the wires.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这两根双绞线构成总线，并要求在每端进行终端匹配。终端端口上的两根电缆之间有一个 120 欧姆的电阻。如果模块不在总线的末端，它不需要考虑终端匹配。作为可能接入线路的人，只有在你移除终端设备以进行线缆监测时，才需要担心终端匹配问题。
- en: '***The OBD-II Connector***'
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***OBD-II 连接器***'
- en: Many vehicles come equipped with an OBD-II connector, also known as the *diagnostic
    link connector (DLC)*, which communicates with the vehicle’s internal network.
    You’ll usually find this connector under the steering column or hidden elsewhere
    on the dash in a relatively accessible place. You may have to hunt around for
    it, but its outline looks similar to that in [Figure 2-2](ch02.html#ch2fig2).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 许多车辆都配备了 OBD-II 连接器，也叫做*诊断链接连接器（DLC）*，它与车辆的内部网络进行通信。你通常会在方向盘柱下方或仪表板的其他地方找到这个连接器，它通常位于一个相对容易访问的地方。你可能需要四处寻找，但它的外形类似于[图
    2-2](ch02.html#ch2fig2)中的样子。
- en: '![image](graphics/f02-02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-02.jpg)'
- en: '*Figure 2-2: Possible locations of the OBD-II connector*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-2：OBD-II 连接器的可能位置*'
- en: In some vehicles, you’ll find these connectors behind small access panels. They’ll
    typically be either black or white. Some are easy to access, and others are tucked
    up under the plastic. Search and you shall find!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些车辆中，你会在小的接入面板后面找到这些连接器。它们通常是黑色或白色的。有些连接器很容易访问，而另一些则被藏在塑料下方。只要搜索，就能找到！
- en: '***Finding CAN Connections***'
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***寻找 CAN 连接***'
- en: CAN is easy to find when hunting through cables because its resting voltage
    is 2.5V. When a signal comes in, it’ll add or subtract 1V (3.5V or 1.5V). CAN
    wires run through the vehicle and connect between the ECUs and other sensors,
    and they’re always in dual-wire pairs. If you hook up a multimeter and check the
    voltage of wires in your vehicle, you’ll find that they’ll be at rest at 2.5V
    or fluctuating by 1V. If you find a wire transmitting at 2.5V, it’s almost certainly
    CAN.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: CAN 信号在电缆中容易找到，因为其静态电压为 2.5V。当有信号输入时，它会增加或减少 1V（3.5V 或 1.5V）。CAN 电缆穿过车辆，并在 ECU
    和其他传感器之间连接，通常是双线对的形式。如果你连接一个万用表并检查车辆电缆的电压，你会发现它们在静态时为 2.5V，或者波动 1V。如果你找到一个电压为
    2.5V 的电缆，那它几乎可以肯定是 CAN 电缆。
- en: You should find the CANH and CANL connections on pins 6 and 14 of your OBD-II
    connector, as shown in [Figure 2-3](ch02.html#ch2fig3).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在 OBD-II 连接器的针脚 6 和 14 上找到 CANH 和 CANL 连接，如[图 2-3](ch02.html#ch2fig3)所示。
- en: '![image](graphics/f02-03.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-03.jpg)'
- en: '*Figure 2-3: CAN pins cable view on the OBD-II connector*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-3：OBD-II 连接器上的 CAN 引脚线缆视图*'
- en: In the figure, pins 6 and 14 are for standard high-speed CAN lines (HS-CAN).
    Mid-speed and low-speed communications happen on other pins. Some cars use CAN
    for the mid-speed (MS-CAN) and low-speed (LS-CAN), but many vehicles use different
    protocols for these communications.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在图中，针脚 6 和 14 用于标准的高速 CAN 线路（HS-CAN）。中速和低速通信发生在其他针脚上。一些汽车使用 CAN 进行中速（MS-CAN）和低速（LS-CAN）通信，但许多车辆使用不同的协议进行这些通信。
- en: You’ll find that not all buses are exposed via the OBD-II connector. You can
    use wiring diagrams to help locate additional “internal” bus lines.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现，并不是所有的总线都可以通过 OBD-II 连接器暴露出来。你可以使用接线图来帮助定位额外的“内部”总线线路。
- en: '***CAN Bus Packet Layout***'
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***CAN 总线数据包布局***'
- en: 'There are two types of CAN packets: *standard* and *extended*. Extended packets
    are like standard ones but with a larger space to hold IDs.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: CAN 数据包有两种类型：*标准型*和*扩展型*。扩展型数据包类似于标准型，但具有更大的空间来容纳 ID。
- en: '**Standard Packets**'
  id: totrans-29
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**标准数据包**'
- en: 'Each CAN bus packet contains four key elements:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 CAN 总线数据包包含四个关键元素：
- en: '**Arbitration ID** The arbitration ID is a broadcast message that identifies
    the ID of the device trying to communicate, though any one device can send multiple
    arbitration IDs. If two CAN packets are sent along the bus at the same time, the
    one with the lower arbitration ID wins.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**仲裁 ID** 仲裁 ID 是一种广播消息，标识尝试通信的设备 ID，尽管任何设备都可以发送多个仲裁 ID。如果两个 CAN 数据包同时沿着总线发送，仲裁
    ID 较低的那个数据包会赢。'
- en: '**Identifier extension (IDE)** This bit is always 0 for standard CAN.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**标识符扩展（IDE）** 对于标准 CAN，这个位始终为 0。'
- en: '**Data length code (DLC)** This is the size of the data, which ranges from
    0 to 8 bytes.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据长度代码（DLC）** 这是数据的大小，范围从 0 到 8 字节。'
- en: '**Data** This is the data itself. The maximum size of the data carried by a
    standard CAN bus packet can be up to 8 bytes, but some systems force 8 bytes by
    padding out the packet.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据** 这是数据本身。标准CAN总线数据包承载的数据最大可以达到8字节，但某些系统通过填充数据包来强制使用8字节。'
- en: '[Figure 2-4](ch02.html#ch2fig4) shows the format of standard CAN packets.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[图2-4](ch02.html#ch2fig4)展示了标准CAN数据包的格式。'
- en: '![image](graphics/f02-04.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-04.jpg)'
- en: '*Figure 2-4: Format of standard CAN packets*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-4：标准CAN数据包格式*'
- en: Because CAN bus packets are broadcast, all controllers on the same network see
    *every* packet, kind of like UDP on Ethernet networks. The packets don’t carry
    information about which controller (or attacker) sent what. Because any device
    can see and transmit packets, it’s trivial for any device on the bus to simulate
    any other device.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于CAN总线的数据包是广播的，网络上所有控制器都能看到*每个*数据包，就像以太网网络上的UDP一样。数据包不携带关于哪个控制器（或攻击者）发送了什么信息。因为任何设备都可以看到和发送数据包，所以在总线上任何设备都可以模拟其他设备。
- en: '**Extended Packets**'
  id: totrans-39
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**扩展数据包**'
- en: Extended packets are like standard ones, except that they can be chained together
    to create longer IDs. Extended packets are designed to fit inside standard CAN
    formatting in order to maintain backward compatibility. So if a sensor doesn’t
    have support for extended packets, it won’t break if another packet transmits
    extended CAN packets on the same network.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展数据包与标准数据包类似，只是它们可以链在一起，以创建更长的ID。扩展数据包被设计为适应标准CAN格式，以保持向后兼容性。所以如果某个传感器不支持扩展数据包，在同一网络上其他数据包传输扩展CAN数据包时，它也不会出错。
- en: Standard packets also differ from extended ones in their use of flags. When
    looking at extended packets in a network dump, you’ll see that unlike standard
    packets, extended packets use substitute remote request (SRR) in place of the
    remote transmission request (RTR) with SSR set to 1\. They’ll also have the IDE
    set to 1, and their packets will have an 18-bit identifier, which is the second
    part of the standard 11-bit identifier. There are additional CAN-style protocols
    that are specific to some manufacturers, and they’re also backward compatible
    with standard CAN in much the same way as extended CAN.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 标准数据包与扩展数据包的一个区别在于它们对标志的使用。通过网络转储查看扩展数据包时，你会发现与标准数据包不同，扩展数据包使用替代远程请求（SRR），代替远程传输请求（RTR），并且SSR设置为1。它们还会将IDE设置为1，并且它们的数据包会有一个18位标识符，这是标准11位标识符的第二部分。还有一些特定于某些制造商的CAN风格协议，它们与标准CAN一样，向后兼容扩展CAN。
- en: '***The ISO-TP Protocol***'
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***ISO-TP协议***'
- en: ISO 15765-2, also known as *ISO-TP*, is a standard for sending packets over
    the CAN bus that extends the 8-byte CAN limit to support up to 4095 bytes by chaining
    CAN packets together. The most common use of ISO-TP is for diagnostics (see “[Unified
    Diagnostic Services](ch04.html#ch04lev1sec2)” on [page 54](ch04.html#page_54))
    and KWP messages (an alternative protocol to CAN), but it can also be used any
    time large amounts of data need to be transferred over CAN. The `can-utils` program
    includes `isotptun`, a proof-of-concept tunneling tool for SocketCAN that allows
    two devices to tunnel IP over CAN. (For a detailed explanation of how to install
    and use `can-utils`, see “[Setting Up `can-utils` to Connect to CAN Devices](ch03.html#ch03lev1sec1)”
    on [page 36](ch03.html#page_36).)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: ISO 15765-2，也称为*ISO-TP*，是通过CAN总线发送数据包的标准，它通过将CAN数据包链在一起来扩展8字节的CAN限制，支持最多4095字节。ISO-TP最常见的用途是诊断（参见“[统一诊断服务](ch04.html#ch04lev1sec2)”第54页）和KWP消息（CAN的替代协议），但它也可以用于任何需要通过CAN传输大量数据的场合。`can-utils`程序包括`isotptun`，一个概念验证的隧道工具，适用于SocketCAN，允许两个设备通过CAN隧道传输IP。（有关如何安装和使用`can-utils`的详细说明，请参见“[设置`can-utils`连接到CAN设备](ch03.html#ch03lev1sec1)”第36页。）
- en: In order to encapsulate ISO-TP into CAN, the first byte is used for extended
    addressing, leaving only 7 bytes for data per packet. Sending lots of information
    over ISO-TP can easily flood the bus, so be careful when using this standard for
    large transfers on an active bus.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将ISO-TP封装到CAN中，第一个字节用于扩展寻址，每个数据包剩余7个字节用于数据。通过ISO-TP发送大量信息可能会轻易地淹没总线，因此在总线活跃时使用此标准进行大规模传输时需要小心。
- en: '***The CANopen Protocol***'
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***CANopen协议***'
- en: Another example of extending the CAN protocol is the CANopen protocol. CANopen
    breaks down the 11-bit identifier to a 4-bit function code and 7-bit node ID—a
    combination known as a *communication object identifier (COB-ID)*. A broadcast
    message on this system has 0x for both the function code and the node ID. CANopen
    is seen more in industrial settings than it is in automotive ones.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种扩展CAN协议的例子是CANopen协议。CANopen将11位标识符分解为4位功能代码和7位节点ID，这种组合被称为*通信对象标识符（COB-ID）*。该系统中的广播消息将功能代码和节点ID都设为0x。CANopen在工业环境中比在汽车环境中更为常见。
- en: If you see a bunch of arbitration IDs of 0x0, you’ve found a good indicator
    that the system is using CANopen for communications. CANopen is very similar to
    normal CAN but has a defined structure around the arbitration IDs. For example,
    heartbeat messages are in the format of 0x700 + node ID. CANopen networks are
    slightly easier to reverse and document than standard CAN bus.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到一堆0x0的仲裁ID，那么你发现的很可能是一个使用CANopen进行通信的系统。CANopen与普通CAN非常相似，但在仲裁ID方面有一个定义明确的结构。例如，心跳消息的格式是0x700
    + 节点ID。与标准CAN总线相比，CANopen网络更容易进行反向工程和文档化。
- en: '***The GMLAN Bus***'
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***GMLAN总线***'
- en: GMLAN is a CAN bus implementation by General Motors. It’s based on ISO 15765-2
    ISO-TP, just like UDS (see “[Unified Diagnostic Services](ch04.html#ch04lev1sec2)”
    on [page 54](ch04.html#page_54)). The GMLAN bus consists of a single-wire low-speed
    and a dual-wire high-speed bus. The low-speed bus, a single-wire CAN bus that
    operates at 33.33Kbps with a maximum of 32 nodes, was adopted in an attempt to
    lower the cost of communication and wiring. It’s used to transport noncritical
    information for things like the infotainment center, HVAC controls, door locks,
    immobilizers, and so on. In contrast, the high-speed bus runs at 500Kbps with
    a maximum of 16 nodes. Nodes in a GMLAN network relate to the sensors on that
    bus.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: GMLAN是通用汽车实现的CAN总线。它基于ISO 15765-2 ISO-TP，就像UDS（参见“[统一诊断服务](ch04.html#ch04lev1sec2)”第[54页](ch04.html#page_54)）一样。GMLAN总线包括一个单线低速总线和一个双线高速总线。低速总线是一个单线CAN总线，工作速度为33.33Kbps，最多支持32个节点，采用这种方式是为了降低通信和布线成本。它用于传输非关键性信息，如信息娱乐中心、暖通空调控制、车门锁、发动机防盗器等。相比之下，高速总线以500Kbps的速度运行，最多支持16个节点。GMLAN网络中的节点与该总线上的传感器相关联。
- en: '**The SAE J1850 Protocol**'
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**SAE J1850协议**'
- en: The SAE J1850 protocol was originally adopted in 1994 and can still be found
    in some of today’s vehicles, for example some General Motors and Chrysler vehicles.
    These bus systems are older and slower than CAN but cheaper to implement.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: SAE J1850协议最初在1994年被采用，至今仍可在一些现代车辆中找到，例如一些通用汽车和克莱斯勒的车辆。这些总线系统比CAN总线更老旧、速度更慢，但实现成本较低。
- en: 'There are two types of J1850 protocols: pulse width modulation (PWM) and variable
    pulse width (VPW). [Figure 2-5](ch02.html#ch2fig5) shows where to find PWM pins
    on the OBD-II connector. VPW uses only pin 2.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: J1850协议有两种类型：脉冲宽度调制（PWM）和可变脉冲宽度（VPW）。[图2-5](ch02.html#ch2fig5)显示了在OBD-II连接器上找到PWM引脚的位置。VPW只使用引脚2。
- en: '![image](graphics/f02-05.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-05.jpg)'
- en: '*Figure 2-5: PWM pins cable view*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-5：PWM引脚电缆视图*'
- en: 'The speed is grouped into three classes: A, B, and C. The 10.4Kbps speeds of
    PWM and VPW are considered class A, which means they’re devices marketed exclusively
    for use in business, industrial, and commercial environments. (The 10.4Kbps J1850
    VPW bus meets the automotive industry’s requirements for low-radiating emissions.)
    Class B devices are marketed for use anywhere, including residential environments
    and have a second SAE standard implementation that can communicate at 100Kbps,
    but it’s slightly more expensive. The final implementation can operate at up to
    1Mbps, and it’s used in class C devices. As you might expect, this third implementation
    is the most expensive, and it’s used primarily in real-time critical systems and
    media networks.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 速度分为三类：A类、B类和C类。PWM和VPW的10.4Kbps速度被认为是A类，这意味着它们是专门用于商业、工业和商业环境中的设备。（10.4Kbps的J1850
    VPW总线满足汽车行业对低辐射排放的要求。）B类设备可以在任何地方使用，包括住宅环境，并且有一个第二个SAE标准实现，可以以100Kbps进行通信，但价格稍贵。最终的实现可以达到1Mbps，并且用于C类设备。正如你所预料的那样，这第三种实现是最昂贵的，主要用于实时关键系统和媒体网络。
- en: '***The PWM Protocol***'
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***PWM协议***'
- en: PWM uses differential signaling on pins 2 and 10 and is mainly used by Ford.
    It operates with a high voltage of 5V and at 41.6Kbps, and it uses dual-wire differential
    signaling, like CAN.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: PWM 在引脚 2 和 10 上使用差分信号，主要由福特使用。它以 5V 的高电压和 41.6Kbps 的速度工作，并使用类似于 CAN 的双线差分信号。
- en: PMW has a fixed-bit signal, so a 1 is always a high signal and a 0 is always
    a low signal. Other than that, the communication protocol is identical to that
    of VPW. The differences are the speed, voltage, and number of wires used to make
    up the bus.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: PMW 使用固定比特信号，因此 1 始终为高信号，0 始终为低信号。除此之外，通信协议与 VPW 相同。它们的区别在于速度、电压和用于构成总线的线数。
- en: '***The VPW Protocol***'
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***VPW 协议***'
- en: VPW, a single-wire bus system, uses only pin 2 and is typically used by General
    Motors and Chrysler. VPW has a high voltage of 7V and a speed of 10.4Kbps.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: VPW 是一种单线总线系统，仅使用引脚 2，通常由通用汽车和克莱斯勒使用。VPW 的高电压为 7V，速度为 10.4Kbps。
- en: When compared with CAN, there are some key differences in the way VPW interprets
    data. For one, because VPW uses time-dependent signaling, receiving 1 bit isn’t
    determined by just a high potential on the bus. The bit must remain either high
    or low for a set amount of time in order to be considered a single 1 bit or a
    0 bit. Pulling the bus to a high position will put it at around 7V, while sending
    a low signal will put it to ground or near-ground levels. This bus also is at
    a resting, or nontransmission, stage at a near-ground level (up to 3V).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 与 CAN 相比，VPW 解读数据的方式存在一些关键差异。首先，由于 VPW 使用依赖时间的信号，接收 1 位不仅仅是由总线上的高电位决定。该位必须保持高或低一定时间才能被认为是一个
    1 位或 0 位。将总线拉高会使其达到大约 7V，而发送低信号则会将其拉至接地或接近接地电平。这个总线在非传输阶段通常处于接近接地电平（最高 3V）。
- en: VPW packets use the format in [Figure 2-6](ch02.html#ch2fig6).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: VPW 数据包采用[图 2-6](ch02.html#ch2fig6)中的格式。
- en: '![image](graphics/f02-06.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-06.jpg)'
- en: '*Figure 2-6: VPW Format*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-6：VPW 格式*'
- en: The data section is a set size—always 11 bits followed by a 1-bit CRC validity
    check. [Table 2-1](ch02.html#ch2tab1) shows the meaning of the header bits.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 数据部分是一个固定大小——始终是 11 位，后跟一个 1 位的 CRC 有效性检查。[表 2-1](ch02.html#ch2tab1) 显示了头部位的含义。
- en: '**Table 2-1:** Meaning of Header Bits'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 2-1：** 头部位的含义'
- en: '| **Header bits** | **Meaning** | **Notes** |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| **头部位** | **含义** | **备注** |'
- en: '| --- | --- | --- |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| PPP | Message priority | 000 = Highest, 111 = Lowest |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| PPP | 消息优先级 | 000 = 最高，111 = 最低 |'
- en: '| H | Header size | 0 = 3 bytes, 1 = single byte |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| H | 头部大小 | 0 = 3 字节，1 = 单字节 |'
- en: '| K | In-frame response | 0 = Required, 1 = Not allowed |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| K | 帧内响应 | 0 = 必须，1 = 不允许 |'
- en: '| Y | Addressing mode | 0 = Functional, 1 = Physical |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| Y | 地址模式 | 0 = 功能型，1 = 物理型 |'
- en: '| ZZ | Message type | Will vary based on how K and Y are set |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| ZZ | 消息类型 | 将根据 K 和 Y 的设置有所不同 |'
- en: In-frame response (IFR) data may follow immediately after this message. Normally,
    an end-of-data (EOD) signal consisting of 200μs-long low-potential signal would
    occur just after the CRC, and if IFR data is included, it’ll start immediately
    after the EOD. If IFR isn’t being used, the EOD will extend to 280μs, causing
    an end-of-frame (EOF) signal.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在帧内响应（IFR）数据可能会紧随此消息之后。通常，在 CRC 后会出现一个 200μs 长的低电位信号作为数据结束（EOD）信号，如果包含 IFR 数据，则它会在
    EOD 后立即开始。如果不使用 IFR，EOD 会延长至 280μs，形成帧结束（EOF）信号。
- en: '**The Keyword Protocol and ISO 9141-2**'
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**关键词协议与 ISO 9141-2**'
- en: The Keyword Protocol 2000 (ISO 14230), also known as *KWP2000*, uses pin 7 and
    is common in US vehicles made after 2003\. Messages sent using KWP2000 may contain
    up to 255 bytes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 关键词协议 2000（ISO 14230），也称为 *KWP2000*，使用引脚 7，常见于 2003 年后生产的美国车辆。使用 KWP2000 发送的消息可以包含最多
    255 字节。
- en: 'The KWP2000 protocol has two variations that differ mainly in baud initialization.
    The variations are:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: KWP2000 协议有两种变种，主要在波特率初始化方面有所不同。具体变种如下：
- en: • ISO 14230-4 KWP (5-baud init, 10.4 Kbaud)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: • ISO 14230-4 KWP（5 波特初始化，10.4 K波特）
- en: • ISO 14230-4 KWP (fast init, 10.4 Kbaud)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: • ISO 14230-4 KWP（快速初始化，10.4 K波特率）
- en: ISO 9141-2, or K-Line, is a variation of KWP2000 seen most often in European
    vehicles. K-Line uses pin 7 and, optionally, pin 15, as shown in [Figure 2-7](ch02.html#ch2fig7).
    K-Line is a UART protocol similar to serial. UARTs use start bits and may include
    a parity bit and a stop bit. (If you’ve ever set up a modem, you should recognize
    this terminology.)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: ISO 9141-2 或 K-Line 是 KWP2000 的一种变种，通常见于欧洲车辆。K-Line 使用引脚 7 和（可选的）引脚 15，如[图 2-7](ch02.html#ch2fig7)所示。K-Line
    是一种类似于串行的 UART 协议。UART 使用起始位，并且可能包括奇偶校验位和停止位。（如果你曾经配置过调制解调器，你应该会认识到这些术语。）
- en: '![image](graphics/f02-07.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-07.jpg)'
- en: '*Figure 2-7: KWP K-Line pins cable view*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-7：KWP K-Line引脚电缆视图*'
- en: '[Figure 2-8](ch02.html#ch2fig8) shows the protocol’s packet layout. Unlike
    CAN packets, K-Line packets have a source (transmitter) and a destination (receiver)
    address. K-Line can use the same or a similar parameter ID (PID) request structure
    as CAN. (For more on PIDs, see “[Unified Diagnostic Services](ch04.html#ch04lev1sec2)”
    on [page 54](ch04.html#page_54).)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[图2-8](ch02.html#ch2fig8)显示了协议的数据包布局。与CAN数据包不同，K-Line数据包有一个源（发送者）和一个目标（接收者）地址。K-Line可以使用与CAN相同或类似的参数ID（PID）请求结构。（关于PID的更多内容，请参见
    “[统一诊断服务](ch04.html#ch04lev1sec2)” [第54页](ch04.html#page_54)。）'
- en: '![image](graphics/f02-08.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-08.jpg)'
- en: '*Figure 2-8: KWP K-Line packet layout*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-8：KWP K-Line数据包布局*'
- en: '**The Local Interconnect Network Protocol**'
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**局部互联网络协议**'
- en: The *Local Interconnect Network (LIN)* is the cheapest of the vehicle protocols.
    It was designed to complement CAN. It has no arbitration or priority code; instead,
    a single master node does all the transmission.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*局部互联网络（LIN）*是最便宜的车辆协议。它的设计是为了补充CAN协议。它没有仲裁或优先级代码；相反，由单一的主节点负责所有的传输。'
- en: LIN can support up to 16 slave nodes that primarily just listen to the master
    node. They do need to respond on occasion, but that’s not their main function.
    Often the LIN master node is connected to a CAN bus.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: LIN最多可以支持16个从节点，它们主要只是监听主节点的信号。它们确实需要偶尔响应，但这不是它们的主要功能。通常，LIN主节点会连接到CAN总线上。
- en: The maximum speed of LIN is 20Kbps. LIN is a single-wire bus that operates at
    12V. You won’t see LIN broken out to the OBD connector, but it’s often used instead
    of direct CAN packets to handle controls to simple devices, so be aware of its
    existence.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: LIN的最大速度为20Kbps。LIN是一个单线总线，工作电压为12V。你不会看到LIN被直接连接到OBD连接器，但它常常用来替代直接的CAN数据包，以处理简单设备的控制，因此需要注意它的存在。
- en: A LIN message frame includes a header, which is always sent by the master, and
    a response section, which may be sent by master or slave (see [Figure 2-9](ch02.html#ch2fig9)).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一个LIN消息帧包括一个由主节点始终发送的头部，以及一个由主节点或从节点发送的响应部分（参见[图2-9](ch02.html#ch2fig9)）。
- en: '![image](graphics/f02-09.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-09.jpg)'
- en: '*Figure 2-9: LIN format*'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-9：LIN格式*'
- en: The SYNC field is used for clock synchroniziation. The ID represents the message
    contents—that is, the type of data being transmitted. The ID can contain up to
    64 possibilities. ID 60 and 61 are used to carry diagnostic information.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: SYNC字段用于时钟同步。ID代表消息内容——即正在传输的数据类型。ID可以包含多达64种可能性。ID 60和61用于承载诊断信息。
- en: When reading diagnostic information, the master sends with ID 60 and the slave
    responds with ID 61\. All 8 bytes are used in diagnostics. The first byte is called
    the node address for diagnostics (NAD). The first half of the byte range (that
    is, 1–127) is defined for ISO-compliant diagnostics, while 128–255 can be specific
    to that device.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在读取诊断信息时，主节点发送ID 60，而从节点则以ID 61响应。所有8个字节都用于诊断。第一个字节称为诊断节点地址（NAD）。字节范围的前一半（即1–127）被定义为符合ISO标准的诊断，而128–255则可以是特定于该设备的。
- en: '**The MOST Protocol**'
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**MOST协议**'
- en: The *Media Oriented Systems Transport (MOST) protocol* is designed for multimedia
    devices. Typically, MOST is laid out in a ring topology, or virtual star, that
    supports a maximum of 64 MOST devices. One MOST device acts as the timing master,
    which continuously feeds frames into the ring.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*媒体导向系统传输（MOST）协议*是为多媒体设备设计的。通常，MOST以环形拓扑或虚拟星型拓扑布局，支持最多64个MOST设备。一个MOST设备作为时序主节点，持续向环中输入帧。'
- en: MOST runs at approximately 23 Mbaud and supports up to 15 uncompressed CD quality
    audio or MPEG1 audio/video channels. A separate control channel runs at 768 Kbaud
    and sends configuration messages to the MOST devices.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: MOST的传输速率约为23 Mbaud，并支持最多15个未压缩的CD质量音频或MPEG1音频/视频通道。一个独立的控制通道以768 Kbaud的速率运行，并向MOST设备发送配置消息。
- en: 'MOST comes in three speeds: MOST25, MOST50, and MOST150\. Standard MOST, or
    MOST25, runs on plastic optical fiber (POF). Transmission is done through the
    red light wavelength at 650 nm using an LED. A similar protocol, MOST50, doubles
    the bandwidth and increases the frame length to 1025 bits. MOST50 traffic is usually
    transported on unshielded twisted-pair (UTP) cables instead of optical fiber.
    Finally, MOST150 implements Ethernet and increases the frame rate to 3072 bits
    or 150Mbps—approximately six times the bandwidth of MOST25.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: MOST有三种速度：MOST25、MOST50和MOST150。标准MOST或MOST25运行在塑料光纤（POF）上。传输通过650纳米的红光波长使用LED完成。一个类似的协议，MOST50，双倍了带宽并增加了帧长至1025位。MOST50流量通常通过无屏蔽双绞线（UTP）电缆传输，而非光纤。最后，MOST150实现了以太网，并将帧率提高到3072位或150Mbps——大约是MOST25带宽的六倍。
- en: 'Each MOST frame has three channels:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 每个MOST帧有三个通道：
- en: '**Synchronous** Streamed data (audio/video)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**同步** 流数据（音频/视频）'
- en: '**Asynchronous** Packet distributed data (TCP/IP)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**异步** 数据包分发数据（TCP/IP）'
- en: '**Control** Control and low-speed data (HMI)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制** 控制和低速数据（HMI）'
- en: In addition to a timing master, a MOST network master automatically assigns
    addresses to devices, which allows for a kind of plug-and-play structure. Another
    unique feature of MOST is that, unlike other buses, it routes packets through
    separate inport and outport ports.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 除了时钟主设备，MOST网络主设备还会自动为设备分配地址，这允许一种即插即用的结构。MOST的另一个独特特点是，与其他总线不同，它通过独立的输入端口和输出端口来路由数据包。
- en: '***MOST Network Layers***'
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***MOST网络层***'
- en: Unless your goal is to hack a car’s video or audio stream, the MOST protocol
    may not be all that interesting to you. That said, MOST does allow access to the
    in-vehicle microphone or cell system, as well as traffic information that’s likely
    to be of interest to malware authors.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你的目标是破解汽车的视频或音频流，否则MOST协议可能不会让你太感兴趣。不过，MOST确实允许访问车载麦克风或手机系统，以及可能对恶意软件作者感兴趣的交通信息。
- en: '[Figure 2-10](ch02.html#ch2fig10) shows how MOST is divided up amongst the
    seven layers of the Open Systems Interconnection (OSI) model that standardizes
    communication over networks. If you’re familiar with other media-based networking
    protocols, then MOST may look familiar.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2-10](ch02.html#ch2fig10)显示了MOST是如何划分到开放系统互联（OSI）模型的七层中的，OSI模型标准化了网络通信。如果你熟悉其他基于媒体的网络协议，那么MOST可能会显得熟悉。'
- en: '![image](graphics/f02-10.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-10.jpg)'
- en: '*Figure 2-10: MOST divided into the seven layers of the OSI model. The OSI
    layers are in the right column.*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-10：MOST被划分为OSI模型的七层。OSI层位于右列。*'
- en: '***MOST Control Blocks***'
  id: totrans-109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***MOST控制块***'
- en: In MOST25, a block consists of 16 frames. A frame is 512 bits and looks like
    the illustration in [Figure 2-11](ch02.html#ch2fig11).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在MOST25中，一个块由16个帧组成。一个帧是512位，形态如[图 2-11](ch02.html#ch2fig11)所示。
- en: '![image](graphics/f02-11.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-11.jpg)'
- en: '*Figure 2-11: MOST25 frame*'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-11：MOST25帧*'
- en: Synchronous data contains 6 to 15 quadlets (each quadlet is 4 bytes), and asynchronous
    data contains 0 to 9 quadlets. A control frame is 2 bytes, but after combining
    a full block, or 16 frames, you end up with 32 bytes of control data.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 同步数据包含6到15个四元组（每个四元组为4字节），异步数据包含0到9个四元组。一个控制帧为2字节，但当组合完整块（或16个帧）时，最终得到32字节的控制数据。
- en: An assembled control block is laid out as shown in [Figure 2-12](ch02.html#ch2fig12).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 组装后的控制块布局如[图 2-12](ch02.html#ch2fig12)所示。
- en: '![image](graphics/f02-12.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-12.jpg)'
- en: '*Figure 2-12: Assembled control block layout*'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-12：组装后的控制块布局*'
- en: The data area contains the FblockID, InstID, FktID, OP Type, Tel ID, Tel Len,
    and 12 bytes of data. FblockIDs are the core component IDs, or function blocks.
    For example, an FblockID of 0x52 might be the navigation system. InstID is the
    instance of the function block. There can be more than one core function, such
    as having two CD changes. InstID differentiates which core to talk to. FktID is
    used to query higher-level function blocks. For instance, a FktID of 0x0 queries
    a list of function IDs supported by the function block. OP Type is the type of
    operation to perform, get, set, increment, decrement, and so forth. The Tel ID
    and Len are the type of telegram and length, respectively. Telegram types represent
    a single transfer or a multipacket transfer and the length of the telegram itself.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 数据区域包含 FblockID、InstID、FktID、操作类型（OP Type）、Tel ID、Tel Len 和 12 字节数据。FblockID
    是核心组件 ID，也就是功能块。例如，FblockID 为 0x52 可能是导航系统。InstID 是功能块的实例。可以有多个核心功能，例如有两个 CD 更换。InstID
    用于区分要与哪个核心通信。FktID 用于查询更高级别的功能块。例如，FktID 为 0x0 时，查询功能块支持的功能 ID 列表。操作类型（OP Type）是要执行的操作类型，例如获取、设置、递增、递减等。Tel
    ID 和 Len 分别表示电报的类型和长度。电报类型表示单次传输或多包传输，电报的长度则表示电报本身的长度。
- en: 'MOST50 has a similar layout to MOST25 but with a larger data section. MOST150
    provides two additional channels: Ethernet and Isochronous. Ethernet works like
    normal TCP/IP and Appletalk setups. Isochronous has three mechanisms: burst mode,
    constant rate, and packet streaming.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: MOST50 的布局与 MOST25 相似，但数据部分更大。MOST150 提供两个额外的通道：以太网和 Isochronous。以太网像普通的 TCP/IP
    和 Appletalk 设置一样工作。Isochronous 有三种机制：突发模式、恒定速率和数据包流传输。
- en: '***Hacking MOST***'
  id: totrans-119
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***破解 MOST***'
- en: 'MOST can be hacked from a device that already supports it, such as through
    a vehicle’s infotainment unit or via an onboard MOST controller. The Linux-based
    project most4linux provides a kernel driver for MOST PCI devices and, as of this
    writing, supports Siemens CT SE 2 and OASIS Silicon Systems or SMSC PCI cards.
    The most4linux driver allows for user-space communication over the MOST network
    and links to the Advanced Linux Sound Architecture (ALSA) framework to read and
    write audio data. At the moment, most4linux should be considered alpha quality,
    but it includes some example utilities that you may be able to build upon, namely:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: MOST 可以通过已经支持 MOST 的设备进行破解，例如通过车辆的娱乐信息单元或通过车载 MOST 控制器。基于 Linux 的项目 most4linux
    提供了 MOST PCI 设备的内核驱动程序，截至目前，支持西门子 CT SE 2 和 OASIS Silicon Systems 或 SMSC PCI 卡。most4linux
    驱动程序允许通过 MOST 网络进行用户空间通信，并链接到高级 Linux 声音架构（ALSA）框架以读取和写入音频数据。目前，most4linux 应被视为
    alpha 版本，但它包含一些示例实用程序，您可以基于这些工具进行开发，具体包括：
- en: '`most_aplay` Plays a *.wav* file'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`most_aplay` 播放一个 *.wav* 文件'
- en: '`ctrl_tx` Sends a broadcast control message and checks status'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`ctrl_tx` 发送广播控制消息并检查状态'
- en: '`sync_tx` Constantly transmits'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`sync_tx` 持续发送'
- en: '`sync_rx` Constantly receives'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`sync_rx` 持续接收'
- en: The current most4linux driver was written for 2.6 Linux kernels, so you may
    have your work cut out for you if you want to make a generic sniffer. MOST is
    rather expensive to implement, so a generic sniffer won’t be cheap.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的 most4linux 驱动程序是为 2.6 Linux 内核编写的，因此如果您想要制作一个通用嗅探器，可能会遇到一些困难。MOST 实现起来相当昂贵，因此一个通用嗅探器不会便宜。
- en: '**The FlexRay Bus**'
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**FlexRay 总线**'
- en: FlexRay is a high-speed bus that can communicate at speeds of up to 10Mbps.
    It’s geared for time-sensitive communication, such as drive-by-wire, steer-by-wire,
    brake-by-wire, and so on. FlexRay is more expensive to implement than CAN, so
    most implementations use FlexRay for high-end systems, CAN for midrange, and LIN
    for low-cost devices.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: FlexRay 是一种高速总线，能够以最高 10Mbps 的速度进行通信。它适用于时间敏感的通信，例如电子节气门、电子转向、电子刹车等。FlexRay
    的实现比 CAN 更昂贵，因此大多数实现使用 FlexRay 作为高端系统的总线，使用 CAN 作为中端系统，使用 LIN 作为低成本设备。
- en: '***Hardware***'
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***硬件***'
- en: FlexRay uses twisted-pair wiring but can also support a dual-channel setup,
    which can increase fault tolerance and bandwidth. However, most FlexRay implementations
    use only a single pair of wiring similar to CAN bus implementations.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: FlexRay 使用双绞线布线，但也可以支持双通道配置，这样可以增加容错性和带宽。然而，大多数 FlexRay 实现仅使用类似于 CAN 总线实现的单对布线。
- en: '***Network Topology***'
  id: totrans-130
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***网络拓扑***'
- en: FlexRay supports a standard bus topology, like CAN bus, where many ECUs run
    off a twisted-pair bus. It also supports star topology, like Ethernet, that can
    run longer segments. When implemented in the star topology, a FlexRay hub is a
    central, active FlexRay device that talks to the other nodes. In a bus layout,
    FlexRay requires proper resistor termination, as in a standard CAN bus. The bus
    and star topologies can be combined to create a hybrid layout if desired.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: FlexRay 支持标准的总线拓扑，类似于 CAN 总线，其中许多 ECUs 通过一对双绞线总线运行。它还支持像以太网那样的星型拓扑，可以支持更长的段。当采用星型拓扑时，FlexRay
    中心节点是一个主动的 FlexRay 设备，与其他节点进行通信。在总线布局中，FlexRay 需要适当的电阻终端，类似于标准的 CAN 总线。如果需要，可以将总线和星型拓扑结合，创建混合布局。
- en: '***Implementation***'
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***实现***'
- en: When creating a FlexRay network, the manufacturer must tell the devices about
    the network setup. Recall that in a CAN network each device just needs to know
    the baud rate and which IDs it cares about (if any). In a bus layout, only one
    device can talk on the bus at a time. In the case of the CAN bus, the order of
    who talks first on a collision is determined by the arbitration ID.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 FlexRay 网络时，制造商必须告知设备有关网络设置的信息。回想一下，在 CAN 网络中，每个设备只需要知道波特率以及它关心的 ID（如果有的话）。在总线布局中，只有一个设备可以在总线上进行通信。在
    CAN 总线的情况下，谁先发言的顺序通过仲裁 ID 来决定。
- en: 'In contrast, when FlexRay is configured to talk on a bus, it uses something
    called a *time division multiple access (TDMA)* scheme to guarantee determinism:
    the rate is always the same (deterministic), and the system relies on the transmitters
    to fill in the data as the packets pass down the wire, similar to the way cellular
    networks like GSM operate. FlexRay devices don’t automatically detect the network
    or addresses on the network, so they must have that information programed in at
    manufacturing time.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，当 FlexRay 配置为在总线上通信时，它使用一种叫做 *时分多路访问（TDMA）* 的方案来保证确定性：速率始终相同（确定性），系统依赖于发射器在数据包通过电缆时填充数据，类似于
    GSM 等蜂窝网络的工作方式。FlexRay 设备不会自动检测网络或网络上的地址，因此必须在制造时将这些信息预先编程。
- en: While this static addressing approach cuts down on cost during manufacturing,
    it can be tricky for a testing device to participate on the bus without knowing
    how the network is configured, as a device added to your FlexRay network won’t
    know what data is designed to go into which slots. To address this problem, specific
    data exchange formats, such as the Field Bus Exchange Format (FIBEX), were designed
    during the development of FlexRay.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种静态寻址方式在制造过程中降低了成本，但对于测试设备来说，参与总线通信可能会比较棘手，因为设备在加入 FlexRay 网络后，不知道哪些数据应该放入哪些槽位。为了解决这个问题，像字段总线交换格式（FIBEX）这样的特定数据交换格式在
    FlexRay 开发过程中应运而生。
- en: FIBEX is an XML format used to describe FlexRay, as well as CAN, LIN, and MOST
    network setups. FIBEX topology maps record the ECUs and how they are connected
    via channels, and they can implement gateways to determine the routing behavior
    between buses. These maps can also include all the signals and how they’re meant
    to be interpreted.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: FIBEX 是一种 XML 格式，用于描述 FlexRay、CAN、LIN 和 MOST 网络的设置。FIBEX 拓扑图记录了 ECUs 以及它们如何通过通道连接，并且可以实现网关，以确定总线之间的路由行为。这些拓扑图还可以包含所有信号及其预期的解释方式。
- en: FIBEX data is used during firmware compile time and allows developers to reference
    the known network signals in their code; the compiler handles all the placement
    and configuration. To view a FIBEX, download FIBEX Explorer from *[http://sourceforge.net/projects/fibexplorer/](http://sourceforge.net/projects/fibexplorer/)*.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: FIBEX 数据在固件编译时使用，并允许开发人员在代码中引用已知的网络信号；编译器会处理所有的放置和配置。要查看 FIBEX，请从 *[http://sourceforge.net/projects/fibexplorer/](http://sourceforge.net/projects/fibexplorer/)*
    下载 FIBEX Explorer。
- en: '***FlexRay Cycles***'
  id: totrans-138
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***FlexRay 周期***'
- en: A FlexRay cycle can be viewed as a packet. The length of each cycle is determined
    at design time and should consist of four parts, as shown in [Figure 2-13](ch02.html#ch2fig13).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 FlexRay 周期可以视为一个数据包。每个周期的长度在设计时确定，应该由四个部分组成，如 [图 2-13](ch02.html#ch2fig13)
    所示。
- en: '![image](graphics/f02-13.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-13.jpg)'
- en: '*Figure 2-13: Four parts of a FlexRay cycle*'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-13：FlexRay 周期的四个部分*'
- en: The static segment contains reserved slots for data that always represent the
    same meaning. The dynamic segment slots contain data that can have different representations.
    The symbol window is used by the network for signaling, and the idle segment (quiet
    time) is used for synchronization.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 静态部分包含保留时隙，用于表示始终具有相同意义的数据。动态部分的时隙包含可能具有不同表示的数据。符号窗口用于网络信号传输，而空闲部分（安静时间）用于同步。
- en: The smallest unit of time on FlexRay is called a *macrotick*, which is typically
    one millisecond. All nodes are time synced, and they trigger their macrotick data
    at the same time.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: FlexRay上最小的时间单位被称为*宏时隙*，通常为一毫秒。所有节点都同步时间，并且它们会同时触发其宏时隙数据。
- en: The static section of a FlexRay cycle contains a set amount of slots to store
    data, kind of like empty train cars. When an ECU needs to update a static data
    unit, it fills in its defined slot or car; every ECU knows which car is defined
    for it. This system works because all of the participants on a FlexRay bus are
    time synchronized.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: FlexRay周期的静态部分包含一组固定数量的时隙来存储数据，就像空的火车车厢一样。当ECU需要更新静态数据单元时，它会填充其定义的时隙或车厢；每个ECU都知道为其定义了哪个车厢。这个系统之所以能工作，是因为FlexRay总线上的所有参与者都是时间同步的。
- en: The dynamic section is split up into minislots, typically one macrotick long.
    The dynamic section is usually used for less important, intermittent data, such
    as internal air temperature. As a minislot passes, an ECU may choose to fill the
    minislots with data. If all the minislots are full, the ECU must wait for the
    next cycle.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 动态部分被分割成微时隙，通常为一个宏时隙的长度。动态部分通常用于存储较不重要、间歇性的数据，如内部空气温度。随着微时隙的通过，ECU可能选择填充这些微时隙。如果所有微时隙都已满，ECU必须等待下一个周期。
- en: In [Figure 2-14](ch02.html#ch2fig14), the FlexRay cycles are represented as
    train cars. Transmitters responsible for filling in information for static slots
    do so when the cycle passes, but dynamic slots are filled in on a first-come,
    first-served basis. All train cars are the same size and represent the time deterministic
    properties of FlexRay.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图2-14](ch02.html#ch2fig14)中，FlexRay周期被表示为火车车厢。负责填充静态时隙信息的发送器会在周期通过时进行填充，但动态时隙是按先到先得的方式填充的。所有火车车厢的大小相同，代表FlexRay的时间确定性特性。
- en: '![image](graphics/f02-14.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-14.jpg)'
- en: '*Figure 2-14: FlexRay train representing cycles*'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-14：表示周期的FlexRay火车*'
- en: 'The symbol window isn’t normally used directly by most FlexRay devices, which
    means that when thinking like a hacker, you should definitely mess with this section.
    FlexRay clusters work in states that are controlled by the FlexRay state manager.
    According to AUTOSAR 4.2.1 Standard, these states are as follows: ready, wake-up,
    start-up, halt-req, online, online-passive, keyslot-only, and low-number-of-coldstarters.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数FlexRay设备通常不会直接使用符号窗口，这意味着从黑客的角度来看，你绝对应该对这个部分进行修改。FlexRay集群在由FlexRay状态管理器控制的状态下工作。根据AUTOSAR
    4.2.1标准，这些状态如下：准备好、唤醒、启动、停止请求、在线、在线被动、仅键槽、以及冷启动数较少。
- en: While most states are obvious, some need further explanation. Specifically,
    online is the normal communication state, while online-passive should only occur
    when there are synchronization errors. In online-passive mode, no data is sent
    or received. Keyslot-only means that data can be transmitted only in the key slots.
    Low-number-of-coldstarters means that the bus is still operating in full communication
    mode but is relying on the sync frames only. There are additional operational
    states, too, such as config, sleep, receive only, and standby.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然大多数状态是显而易见的，但有些需要进一步解释。具体来说，在线是正常的通信状态，而在线被动应该仅在同步错误时出现。在在线被动模式下，不会发送或接收数据。仅键槽意味着数据只能在键槽中传输。冷启动数较少意味着总线仍在完全通信模式下运行，但仅依赖于同步帧。还有其他操作状态，如配置、休眠、仅接收和待机。
- en: '***Packet Layout***'
  id: totrans-151
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***数据包布局***'
- en: The actual packet that FlexRay uses contains several fields and fits into the
    cycle in the static or dynamic slot (see [Figure 2-15](ch02.html#ch2fig15)).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: FlexRay使用的实际数据包包含多个字段，并根据静态或动态时隙适配到周期中（见[图2-15](ch02.html#ch2fig15)）。
- en: '![image](graphics/f02-15.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-15.jpg)'
- en: '*Figure 2-15: FlexRay packet layout*'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-15：FlexRay数据包布局*'
- en: 'The status bits are:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 状态位为：
- en: • Reserved bit
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: • 保留位
- en: • Payload preamble indicator
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: • 负载前导指示符
- en: • NULL frame indicator
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: • NULL帧指示符
- en: • Sync frame indicator
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: • 同步帧指示符
- en: • Startup frame indicator
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: • 启动帧指示符
- en: The frame ID is the slot the packet should be transmitted in when used for static
    slots. When the packet is destined for a dynamic slot (1–2047), the frame ID represents
    the priority of this packet. If two packets have the same signal, then the one
    with the highest priority wins. Payload length is the number in words (2 bytes),
    and it can be up to 127 words in length, which means that a FlexRay packet can
    carry 254 bytes of data—more than 30 times that of a CAN packet. Header CRC should
    be obvious, and the cycle count is used as a communication counter that increments
    each time a communication cycle starts.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 帧 ID 是数据包应该在静态时隙中传输的时隙。当数据包用于动态时隙（1–2047）时，帧 ID 表示该数据包的优先级。如果两个数据包具有相同的信号，则优先级最高的数据包会胜出。有效负载长度是以字（2
    字节）为单位的数字，最大可达 127 字，这意味着一个 FlexRay 数据包可以携带 254 字节的数据——是 CAN 数据包的 30 倍以上。头部 CRC
    应该是显而易见的，周期计数器作为通信计数器使用，每当一个通信周期开始时会递增。
- en: One really neat thing about static slots is that an ECU can read earlier static
    slots and output a value based on those inputs in the same cycle. For instance,
    say you have a component that needs to know the position of each wheel before
    it can output any needed adjustments. If the first four slots in a static cycle
    contain each wheel position, the calibration ECU can read them and still have
    time to fill in a later slot with any adjustments.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 静态时隙的一个非常巧妙的特点是，ECU 可以读取早期的静态时隙，并根据这些输入在同一周期内输出一个值。例如，假设你有一个组件，在输出任何必要的调整之前，需要知道每个车轮的位置。如果静态周期的前四个时隙包含每个车轮的位置，校准
    ECU 可以读取这些时隙，并且仍然有时间在后续时隙中填充任何调整。
- en: '***Sniffing a FlexRay Network***'
  id: totrans-163
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***嗅探 FlexRay 网络***'
- en: As of this writing, Linux doesn’t have official support for FlexRay, but there
    are some patches from various manufacturers that add support to certain kernels
    and architectures. (Linux has FlexCAN support, but FlexCAN is a CAN bus network
    inspired by FlexRay.)
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 截至本文撰写时，Linux 尚未官方支持 FlexRay，但一些厂商提供了补丁，添加了对某些内核和架构的支持。（Linux 支持 FlexCAN，但 FlexCAN
    是一种受 FlexRay 启发的 CAN 总线网络。）
- en: At this time, there are no standard open source tools for sniffing a FlexRay
    network. If you need a generic tool to sniff FlexRay traffic, you currently have
    to go with a proprietary product that’ll cost a lot. If you want to monitor a
    FlexRay network without a FIBEX file, you’ll at *least* need to know the baud
    rate of the bus. Ideally, you’ll also know the cycle length (in milliseconds)
    and, if possible, the size of the cluster partitioning (static-to-dynamic ratio).
    Technically, a FlexRay cluster can have up to 1048 configurations with 74 parameters.
    You’ll find the approach to identifying these parameters detailed in the paper
    “Automatic Parameter Identification in FlexRay based Automotive Communication
    Networks” (IEEE, 2006) by Eric Armengaud, Andreas Steininger, and Martin Horauer.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，没有标准的开源工具用于嗅探 FlexRay 网络。如果你需要一个通用工具来嗅探 FlexRay 流量，目前你必须选择一个专有的产品，而这些产品价格不菲。如果你想在没有
    FIBEX 文件的情况下监控 FlexRay 网络，你*至少*需要知道总线的波特率。理想情况下，你还应该知道周期长度（以毫秒为单位），并且如果可能的话，知道集群分区的大小（静态与动态的比例）。从技术上讲，FlexRay
    集群最多可以有 1048 种配置，包含 74 个参数。你可以在 Eric Armengaud、Andreas Steininger 和 Martin Horauer
    的论文《基于 FlexRay 的汽车通信网络中的自动参数识别》（IEEE，2006）中找到有关识别这些参数的方法。
- en: When spoofing packets on a FlexRay network with two channels, you need to simultaneously
    spoof both. Also, you’ll encounter FlexRay implementations called *Bus Guardian*
    that are designed to prevent flooding or monopolization of the bus by any one
    device. Bus Guardian works at the hardware level via a pin on the FlexRay chip
    typically called *Bus Guardian Enable (BGE)*. This pin is often marked as optional,
    but the Bus Guardian can drive this pin too high to disable a misbehaving device.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个有两个通道的 FlexRay 网络上进行数据包欺骗时，你需要同时欺骗两个通道。此外，你还会遇到名为 *Bus Guardian* 的 FlexRay
    实现，它旨在防止任何设备对总线的泛洪或垄断。Bus Guardian 在硬件级别通过 FlexRay 芯片上的一个引脚工作，这个引脚通常称为 *Bus Guardian
    Enable (BGE)*。这个引脚通常标记为可选，但 Bus Guardian 也可以将该引脚电平拉高，从而禁用一个行为异常的设备。
- en: '**Automotive Ethernet**'
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**汽车以太网**'
- en: Because MOST and FlexRay are expensive and losing support (the FlexRay consortium
    appears to have disbanded), most newer vehicles are moving to Ethernet. Ethernet
    implementations vary, but they’re basically the same as what you’d find in a standard
    computer network. Often, CAN packets are encapsulated as UDP, and audio is transported
    as voice over IP (VoIP). Ethernet can transmit data at speeds up to 10Gbps, using
    nonproprietary protocols and any chosen topology.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 由于MOST和FlexRay昂贵且逐渐失去支持（FlexRay联盟似乎已经解散），大多数新型车辆正在转向以太网。以太网的实现有所不同，但基本上与标准计算机网络中的以太网相同。通常，CAN数据包会被封装为UDP，音频则作为IP语音（VoIP）进行传输。以太网可以以最高10Gbps的速度传输数据，使用非专有协议和任何选择的拓扑结构。
- en: While there’s no common standard for CAN traffic, manufacturers are starting
    to use the IEEE 802.1AS Audio Video Bridging (AVB) standard. This standard supports
    quality of service (QoS) and traffic shaping, and it uses time-synchronized UDP
    packets. In order to achieve this synchronization, the nodes follow a *best master
    clock* algorithm to determine which node is to be the timing master. The master
    node will normally sync with an outside timing source, such as GPS or (worst case)
    an on-board oscillator. The master syncs with the other nodes by sending timed
    packets (10 milliseconds), the slave responds with a *delay request*, and the
    time offset is calculated from that exchange.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管CAN流量没有统一标准，制造商们已开始使用IEEE 802.1AS音视频桥接（AVB）标准。该标准支持服务质量（QoS）和流量整形，并且使用时间同步的UDP数据包。为了实现这种同步，节点们遵循*最佳主时钟*算法，以确定哪个节点将成为时间主节点。主节点通常会与外部时间源同步，例如GPS或（在最坏的情况下）车载振荡器。主节点通过发送定时数据包（10毫秒）与其他节点同步，接收节点则回应一个*延迟请求*，通过这种交换计算出时间偏差。
- en: From a researcher’s perspective, the only challenge with vehicle Ethernet lies
    in figuring out how to talk to the Ethernet. You may need to make or buy a custom
    cable to communicate with vehicle Ethernet cables because they won’t look like
    the standard twisted-pair cables that you’d find in a networking closet. Typically,
    a connector will just be wires like the ones you find connected to an ECU. Don’t
    expect the connectors to have their own plug, but if they do, it won’t look like
    an RJ-45 connector. Some exposed connectors are actually round, as shown in [Figure
    2-16](ch02.html#ch2fig16).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 从研究人员的角度来看，车辆以太网的唯一挑战在于如何与以太网进行通信。您可能需要制作或购买定制电缆与车辆以太网电缆进行通信，因为这些电缆看起来不会像您在网络机房中找到的标准双绞线。通常，连接器只会是与ECU连接的电线。不要指望连接器会有自己的插头，但如果有，它看起来不会像RJ-45连接器。有些暴露的连接器实际上是圆形的，如[图2-16](ch02.html#ch2fig16)所示。
- en: '![image](graphics/f02-16.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-16.jpg)'
- en: '*Figure 2-16: Round Ethernet connectors*'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-16：圆形以太网连接器*'
- en: '**OBD-II Connector Pinout Maps**'
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**OBD-II连接器引脚图**'
- en: The remaining pins in the OBD-II pinout are manufacturer specific. Mappings
    vary by manufacturer, and these are just guidelines. Your pinout could differ
    depending on your make and model. For example, [Figure 2-17](ch02.html#ch2fig17)
    shows a General Motors pinout.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: OBD-II接头中的其余引脚是制造商特定的。引脚映射因制造商不同而有所变化，以下是一些指导原则。您的接头可能会根据品牌和型号有所不同。例如，[图2-17](ch02.html#ch2fig17)展示的是一款通用汽车的接头引脚图。
- en: '![image](graphics/f02-17.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-17.jpg)'
- en: '*Figure 2-17: Complete OBD pinout cable view for a General Motors vehicle*'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-17：通用汽车车辆的完整OBD接头引脚视图*'
- en: Notice that the OBD connector can have more than one CAN line, such as a low-speed
    line (LS-CAN) or a mid-speed one (MS-CAN). Low-speed operates around 33Kbps, mid-speed
    is around 128Kbps, and high-speed (HS-CAN) is around 500Kbps.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，OBD连接器可能有多个CAN线路，例如低速线路（LS-CAN）或中速线路（MS-CAN）。低速线路工作在约33Kbps，中速线路约128Kbps，高速（HS-CAN）约500Kbps。
- en: Often you’ll use a DB9-to-OBDII connector when connecting your sniffer to your
    vehicle’s OBD-II connector. [Figure 2-18](ch02.html#ch2fig18) shows the plug view,
    not that of the cable.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在将嗅探器连接到车辆的OBD-II连接器时，通常会使用DB9到OBDII的连接器。[图2-18](ch02.html#ch2fig18)展示的是插头视图，而非电缆的视图。
- en: '![image](graphics/f02-18.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-18.jpg)'
- en: '*Figure 2-18: Typical DB9 connector plug view. An asterisk (*) means that the
    pin is optional. A DB9 adapter can have as few as three pins connected.*'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-18：典型的DB9连接器插头视图。带星号（*）的引脚表示该引脚是可选的。一个DB9适配器可能只有三个连接引脚。*'
- en: This pinout is a common pinout in the United Kingdom, and if you’re making a
    cable yourself, this one will be the easiest to use. However, some sniffers, such
    as many Arduino shields, expect the US-style DB9 connector (see [Figure 2-19](ch02.html#ch2fig19)).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这个针脚排列在英国是常见的，如果你自己做电缆，这个会是最容易使用的。然而，一些嗅探器，例如许多 Arduino 扩展板，预期使用美式 DB9 连接器（见
    [图 2-19](ch02.html#ch2fig19)）。
- en: '![image](graphics/f02-19.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f02-19.jpg)'
- en: '*Figure 2-19: US-style DB9 connector, plug view*'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-19：美式 DB9 连接器，插头视图*'
- en: The US version has more features and gives you more access to other OBD connectors
    besides just CAN. Luckily, power is pin 9 on both style connectors, so you shouldn’t
    fry your sniffer if you happen to grab the wrong cable. Some sniffers, such as
    CANtact, have jumpers that you can set depending on which style cable you’re using.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 美版的功能更多，除了 CAN 之外，你还可以访问其他 OBD 连接器。幸运的是，两个类型的连接器的电源都位于第 9 针，因此即使你误抓了错误的电缆，也不会损坏你的嗅探器。一些嗅探器，如
    CANtact，有跳线可以根据你使用的电缆类型进行设置。
- en: '**The OBD-III Standard**'
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**OBD-III 标准**'
- en: OBD-III is a rather controversial evolution of the OBD-II standard. OBD-II was
    originally designed to be compliant with emissions testing (at least from the
    regulators’ perspective), but now that the powertrain control module (PCM) knows
    whether a vehicle is within guidelines, we’re still left with the inconvenience
    of the vehicle owner having to go for testing every other year. The OBD-III standard
    allows the PCM to communicate its status remotely without the owner’s interaction.
    This communication is typically accomplished through a roadside transponder, but
    cell phones and satellite communications work as well.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: OBD-III 是 OBD-II 标准的一个相当有争议的演进版本。OBD-II 最初设计时是为了符合排放测试要求（至少从监管者的角度来看），但现在，动力总成控制模块（PCM）已经知道车辆是否符合规定，但车主每隔一年仍然需要去进行测试的麻烦没有解决。OBD-III
    标准允许 PCM 在无需车主干预的情况下远程传输其状态。通常，这种通信是通过路边的应答器完成的，但手机和卫星通信也能起作用。
- en: The California Air Resources Board (CARB) began testing roadside readers for
    OBD-III in 1994 and is capable of reading vehicle data from eight lanes of traffic
    traveling at 100 miles per hour. If a fault is detected in the system, it’ll transmit
    the diagnostic trouble codes (DTC) and vehicle identification numbers (VIN) to
    a nearby transponder (see “[Diagnostic Trouble Codes](ch04.html#ch04lev1sec1)”
    on [page 52](ch04.html#page_52)). The idea is to have the system report that pollutants
    are entering the atmosphere without having to wait up to two years for an emissions
    check.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 加利福尼亚州空气资源委员会（CARB）自1994年起开始测试 OBD-III 的路边读取器，并能够在时速 100 英里的交通流中读取来自八条车道的车辆数据。如果系统检测到故障，它将把诊断故障码（DTC）和车辆识别号（VIN）传输给附近的应答器（参见
    “[诊断故障码](ch04.html#ch04lev1sec1)” 第 [52 页](ch04.html#page_52)）。这个系统的目的是在无需等待最多两年的排放检查的情况下，报告污染物进入大气层。
- en: Most implementations of OBD-III are manufacturer specific. The vehicle phones
    home to the manufacturer with faults and then contacts the owner to inform them
    of the need for repairs. As you might imagine, this system has some obvious legal
    questions that still need to be answered, including the risk of mass surveillance
    of private property. Certainly, there’s lots of room for abuses by law enforcement,
    including speed traps, tracking, immobilization, and so on.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 OBD-III 的实现都是特定于制造商的。车辆会将故障信息发送回制造商，然后联系车主告知需要修理。如你所想，这种系统存在一些明显的法律问题需要解决，包括私有财产的群众监控风险。当然，执法机构也有很多滥用的空间，比如测速陷阱、追踪、锁车等。
- en: 'Some submitted request for proposals to integrate OBD-III into vehicles claim
    to use transponders to store the following information:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 一些提交的关于将 OBD-III 集成到车辆中的提案声称，使用应答器存储以下信息：
- en: • Date and time of current query
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: • 当前查询的日期和时间
- en: • Date and time of last query
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: • 上次查询的日期和时间
- en: • VIN
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: • VIN
- en: • Status, such as “OK,” “Trouble,” or “No response”
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: • 状态，例如“正常”，“故障”或“无响应”
- en: • Stored codes (DTCs)
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: • 存储的故障码（DTC）
- en: • Receiver station number
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: • 接收站号码
- en: It’s important to note that even if OBD-III sends only DTC and VIN, it’s trivial
    to add additional metadata, such as location, time, and history of the vehicle
    passing the transponder. For the most part, OBD-III is the bogeyman under the
    bed. As of this writing, it has yet to be deployed with a transponder approach,
    although phone-home systems such as OnStar are being deployed to notify the car
    dealer of various security or safety issues.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，即使OBD-III仅发送DTC和VIN，添加额外的元数据，如位置、时间和车辆通过转发器的历史记录，也是微不足道的。大多数情况下，OBD-III是床下的幽灵。截至本文写作时，它尚未与转发器方法一起部署，尽管像OnStar这样的“回家”系统正在部署，以通知汽车经销商各种安全或安全问题。
- en: '**Summary**'
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: When working on your target vehicle, you may run into a number of different
    buses and protocols. When you do, examine the pins that your OBD-II connector
    uses for your particular vehicle to help you determine what tools you’ll need
    and what to expect when reversing your vehicle’s network.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在操作目标车辆时，你可能会遇到多种不同的总线和协议。遇到这种情况时，检查你特定车辆的OBD-II连接器所使用的引脚，帮助你确定需要哪些工具，以及在逆向车辆网络时可能会遇到的情况。
- en: I’ve focused in this chapter on easily accessible buses via the OBD-II connector,
    but you should also look at your vehicle wiring diagrams to determine where to
    find other bus lines between sensors. Not all bus lines are exposed via the OBD-II
    connector, and when looking for a certain packet, it may be easier to locate the
    module and bus lines leaving a specific module in order to reverse a particular
    packet. (See [Chapter 7](ch07.html#ch07) for details on how to read wiring diagrams.)
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我重点介绍了通过OBD-II连接器轻松访问的总线，但你还应该查看你的车辆接线图，以确定在哪里可以找到传感器之间的其他总线线路。并非所有的总线线路都通过OBD-II连接器暴露出来，当你寻找某个特定数据包时，可能更容易定位模块并跟踪离开特定模块的总线线路，从而逆向工程某个特定数据包。（有关如何读取接线图的详细信息，请参见[第7章](ch07.html#ch07)）。
