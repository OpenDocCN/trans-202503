- en: '**Sound**'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**声音**'
- en: '**8'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**8**'
- en: Arduino Piano**
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Arduino 钢琴**'
- en: In this project we’ll use some momentary pushbuttons and a piezo sounder to
    create a simple piano.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将使用一些瞬时按钮和一个压电蜂鸣器来制作一个简单的钢琴。
- en: '![Image](../images/p0068-01.jpg)![Image](../images/p0069-01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/p0068-01.jpg)![Image](../images/p0069-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需组件**'
- en: '**Arduino board**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**Arduino 板**'
- en: '**Breadboard**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**面包板**'
- en: '**Jumper wires**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**跳线**'
- en: '**Piezo sounder**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**压电蜂鸣器**'
- en: '**8 momentary tactile pushbuttons**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**8 个瞬时触觉按钮**'
- en: '**8 1k-ohm resistors**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**8 个 1k 欧姆电阻**'
- en: '**HOW IT WORKS**'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**工作原理**'
- en: Each pushbutton in our project (see [Figure 8-1](ch08.xhtml#ch8fig1)) is connected
    to an Arduino pin, and when the pushbutton is pressed, the piezo sounder will
    emit one of eight notes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中，每个按钮（参见[图 8-1](ch08.xhtml#ch8fig1)）都连接到一个 Arduino 引脚，当按钮被按下时，压电蜂鸣器将发出八个音符中的一个。
- en: '**FIGURE 8-1:** A momentary pushbutton and its circuit'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8-1：** 瞬时按钮及其电路'
- en: '![Image](../images/f8-01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f8-01.jpg)'
- en: When pressed, a pushbutton completes a circuit, turning it on. As soon as the
    button is released, the connection will spring back and break that circuit, turning
    it off. The pushbutton switch is also known as a *momentary* or *normally open
    switch*, and is used in, for example, computer keyboards. This is in contrast
    to a *toggle switch*, which stays either on or off until you toggle it to the
    other position, like a light switch.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当按下按钮时，按键完成电路的闭合，使电路通电。一旦按钮释放，连接将回弹并断开电路，导致电路关闭。按键开关也叫做*瞬时开关*或*常开开关*，例如用于计算机键盘中。这与*翻转开关*不同，后者保持开或关状态，直到你将它切换到另一位置，就像灯开关一样。
- en: This type of pushbutton has four pins, but you generally use only two at a time
    for connection. We’re using the top pins in this project so it’s easier to reach
    the button and play a tune, although the two unused pins at the bottom would do
    the same job. As [Figure 8-2](ch08.xhtml#ch8fig2) shows, the pins work in a circuit.
    Pins A and C are always connected, as are pins B and D. When the button is pressed,
    the circuit is complete.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的按钮有四个引脚，但通常只使用其中的两个来连接。在这个项目中，我们使用顶部的引脚，这样更容易触摸按钮并演奏旋律，尽管底部未使用的两个引脚也能完成相同的工作。如[图
    8-2](ch08.xhtml#ch8fig2)所示，引脚在电路中起作用。引脚 A 和 C 始终连接在一起，B 和 D 也是如此。当按钮被按下时，电路就完成了。
- en: '**FIGURE 8-2:** A pushbutton’s incomplete circuit'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8-2：** 按钮的未完成电路'
- en: '![Image](../images/f8-02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f8-02.jpg)'
- en: The Arduino piano uses a piezo sounder, shown in [Figure 8-3](ch08.xhtml#ch8fig3),
    to create frequencies that resemble recognizable notes. Piezo sounders, or just
    piezos for short, are inexpensive buzzers often used in small toys. A piezo element
    without its plastic housing looks like a gold metallic disc with connected positive
    (typically red) and negative (typically black) wires. A piezo is capable only
    of making a clicking sound, which we create by applying voltage.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino 钢琴使用了一个压电蜂鸣器，如[图 8-3](ch08.xhtml#ch8fig3)所示，用来产生类似可识别音符的频率。压电蜂鸣器，简称为压电元件，是一种常见的低价蜂鸣器，通常用于小玩具中。没有塑料外壳的压电元件看起来像一个金色金属圆盘，连接着正极（通常为红色）和负极（通常为黑色）的电线。压电元件只能发出点击声，这是通过施加电压来实现的。
- en: '**FIGURE 8-3:** A piezo sounder'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8-3：** 压电蜂鸣器'
- en: '![Image](../images/f8-03.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f8-03.jpg)'
- en: We can make recognizable notes by getting the piezo to click hundreds of times
    a second at a particular frequency, so first we need to know the frequency of
    the different tones we want. [Table 8-1](ch08.xhtml#ch8tab1) shows the notes and
    their corresponding frequencies. *Period* is the duration of the cycle, in microseconds,
    at which the frequency is created. For example, to get a C note (261 Hz), we need
    the piezo to cycle at a period of 3,830 microseconds. We halve the period to get
    the `timeHigh` value, which is used in the code to create the note. (The tone
    is caused by the piezo being turned on and off very quickly, so the time that
    the piezo is on, or `HIGH`, is half the period.)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过让压电元件以特定频率每秒点击数百次来生成可识别的音符，因此首先我们需要了解我们所需不同音符的频率。[表 8-1](ch08.xhtml#ch8tab1)展示了音符及其对应的频率。*周期*是频率产生的周期时长，单位为微秒。例如，为了得到
    C 音符（261 Hz），我们需要让压电元件以 3,830 微秒的周期工作。我们将周期除以二，得到 `timeHigh` 值，这个值用于代码中来生成音符。（音符的产生是由于压电元件被快速打开和关闭，所以压电元件开启的时间，或者称为
    `HIGH`，是周期的一半。）
- en: '**TABLE 8-1:** The Musical Notes and Frequencies Used in the Code'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 8-1：** 代码中使用的音符和频率'
- en: '| **NOTE** | **FREQUENCY** | **PERIOD** | **TIMEHIGH** |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| **注意** | **频率** | **周期** | **高电平时间** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `c` | 261 Hz | 3,830 | `1915` |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `c` | 261 Hz | 3,830 | `1915` |'
- en: '| `d` | 294 Hz | 3,400 | `1700` |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `d` | 294 Hz | 3,400 | `1700` |'
- en: '| `e` | 329 Hz | 3,038 | `1519` |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `e` | 329 Hz | 3,038 | `1519` |'
- en: '| `f` | 349 Hz | 2,864 | `1432` |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `f` | 349 Hz | 2,864 | `1432` |'
- en: '| `g` | 392 Hz | 2,550 | `1275` |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `g` | 392 Hz | 2,550 | `1275` |'
- en: '| `a` | 440 Hz | 2,272 | `1136` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `a` | 440 Hz | 2,272 | `1136` |'
- en: '| `b` | 493 Hz | 2,028 | `1014` |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `b` | 493 Hz | 2,028 | `1014` |'
- en: '| `C` | 523 Hz | 1,912 | `956` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `C` | 523 Hz | 1,912 | `956` |'
- en: '**THE BUILD**'
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建**'
- en: Insert the momentary pushbuttons into the breadboard with the pins straddling
    the center break of the breadboard.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将暂时性按键插入面包板，确保引脚跨过面包板的中心断开区域。
- en: Looking at the breadboard face on, number the pushbuttons 1–8 from left to right.
    Connect the top-left pin (A) of pushbutton 1 to Arduino pin 2 using a jumper wire.
    Connect the top-left pins of the other pushbuttons to the Arduino as shown here.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 面对面包板时，从左到右为按键编号 1 到 8。使用跳线将按键 1 的左上角引脚（A）连接到 Arduino 引脚 2。将其他按键的左上角引脚依次连接到
    Arduino，如下所示。
- en: '| **PUSHBUTTON** | **NOTE** | **ARDUINO** |'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **PUSHBUTTON** | **NOTE** | **ARDUINO** |'
- en: '| --- | --- | --- |'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 1 | `c` | 2 |'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 1 | `c` | 2 |'
- en: '| 2 | `d` | 3 |'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 2 | `d` | 3 |'
- en: '| 3 | `e` | 4 |'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 3 | `e` | 4 |'
- en: '| 4 | `f` | 5 |'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 4 | `f` | 5 |'
- en: '| 5 | `g` | 6 |'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 5 | `g` | 6 |'
- en: '| 6 | `a` | 7 |'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 6 | `a` | 7 |'
- en: '| 7 | `b` | 8 |'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 7 | `b` | 8 |'
- en: '| 8 | `C` | 9 |'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 8 | `C` | 9 |'
- en: Insert a 1k-ohm resistor into the breadboard in line with the first pushbutton’s
    top-left pin, as shown in [Figure 8-4](ch08.xhtml#ch8fig4), and connect the other
    side of the resistor to the GND rail of the breadboard. Repeat this for the other
    pushbuttons. The resistor pulls the switch to GND when the button is not pressed
    to tell the Arduino that it’s not in a positive state; when the button is pressed,
    the positive power sounds the corresponding note.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在面包板上插入一个 1k 欧姆电阻，与第一个按键的左上角引脚成一行，如[图 8-4](ch08.xhtml#ch8fig4)所示，并将电阻的另一端连接到面包板的
    GND 导轨。对其他按键重复此操作。电阻在按钮未按下时将开关拉到 GND，告诉 Arduino 它处于非正状态；当按钮按下时，正电源发出相应音符的声音。
- en: '**FIGURE 8-4:** A 1k-ohm resistor connects the pushbutton pin to GND.'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 8-4：** 一个 1k 欧姆电阻连接按键引脚到 GND。'
- en: '![Image](../images/f8-04.jpg)'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Image](../images/f8-04.jpg)'
- en: Connect the top-right pin (B) of each of the pushbuttons to the positive breadboard
    power rail using jumper wire.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用跳线将每个按键的右上角引脚（B）连接到面包板的正电源导轨。
- en: Connect the piezo’s red wire to Arduino pin 13 and its black wire to the GND
    rail of the breadboard, then connect the power rails to GND and +5V on the Arduino.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将蜂鸣器的红线连接到 Arduino 引脚 13，黑线连接到面包板的 GND 导轨，然后将电源导轨连接到 Arduino 的 GND 和 +5V。
- en: Make sure that your setup matches the circuit diagram in [Figure 8-5](ch08.xhtml#ch8fig5),
    and then upload the code in “[The Sketch](ch08.xhtml#ch00lev1sec33)” on [page
    74](ch08.xhtml#page_74).
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的设置与[图 8-5](ch08.xhtml#ch8fig5)中的电路图相匹配，然后上传“[草图](ch08.xhtml#ch00lev1sec33)”中的代码，位于[第
    74 页](ch08.xhtml#page_74)。
- en: '**FIGURE 8-5:** The circuit diagram for the Arduino piano'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 8-5：** Arduino 钢琴电路图'
- en: '![Image](../images/f8-05.jpg)'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Image](../images/f8-05.jpg)'
- en: '**THE SKETCH**'
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**草图**'
- en: The sketch first defines the pin that the piezo sounder is connected to and
    the pins for the pushbuttons. A value is defined for each pushbutton, and a tone
    is assigned to correspond with that value. The pushbuttons are set as inputs and
    the piezo sounder as an output. The loop cycle checks each button, playing the
    corresponding tone for as long as the button is held down. Only one note can be
    played at a time because each note requires the loop to begin again, so when the
    button is released, the piezo sounder stops playing the tone and the loop starts
    over.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图首先定义了蜂鸣器连接的引脚以及按键的引脚。为每个按键定义了一个值，并分配了与该值对应的音调。将按键设置为输入，将蜂鸣器设置为输出。循环周期检查每个按钮，在按钮按下时播放对应的音调。每次只能播放一个音符，因为每个音符都需要循环重新开始，所以当按钮释放时，蜂鸣器停止播放音调，循环重新开始。
- en: int speakerPin = 13; // Piezo defined as pin 13
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: int speakerPin = 13; // 蜂鸣器定义为 13 引脚
- en: int key_c = 2; // Define Arduino pins for the keys
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: int key_c = 2; // 定义 Arduino 引脚用于按键
- en: int key_d = 3;
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: int key_d = 3;
- en: int key_e = 4;
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: int key_e = 4;
- en: int key_f = 5;
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: int key_f = 5;
- en: int key_g = 6;
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: int key_g = 6;
- en: int key_a = 7;
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: int key_a = 7;
- en: int key_b = 8;
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: int key_b = 8;
- en: int key_C = 9;
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: int key_C = 9;
- en: // Value for each key press
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: // 每个按键的值
- en: int keypress_c = 0; int keypress_d = 0; int keypress_e = 0;
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: int keypress_c = 0; int keypress_d = 0; int keypress_e = 0;
- en: int keypress_f = 0; int keypress_g = 0; int keypress_a = 0;
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: int keypress_f = 0; int keypress_g = 0; int keypress_a = 0;
- en: int keypress_b = 0; int keypress_C = 0;
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: int keypress_b = 0; int keypress_C = 0;
- en: // Define the frequency of each note
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: // 定义每个音符的频率
- en: int tones[] = { 1915, 1700, 1519, 1432, 1275, 1136, 1014, 956 };
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: int tones[] = { 1915, 1700, 1519, 1432, 1275, 1136, 1014, 956 };
- en: //               'c',  'd',  'e',  'f',  'g',  'a',  'b', 'C'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: //               'c',  'd',  'e',  'f',  'g',  'a',  'b', 'C'
- en: int keytone = 0; // Give a value for keytone
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: int keytone = 0; // 给keytone赋值
- en: void setup() {
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: void setup() {
- en: pinMode(key_c, INPUT); // Set up key pins as inputs
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: pinMode(key_c, INPUT); // 设置按键引脚为输入
- en: pinMode(key_d, INPUT);
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: pinMode(key_d, INPUT);
- en: pinMode(key_e, INPUT);
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: pinMode(key_e, INPUT);
- en: pinMode(key_f, INPUT);
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: pinMode(key_f, INPUT);
- en: pinMode(key_g, INPUT);
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: pinMode(key_g, INPUT);
- en: pinMode(key_a, INPUT);
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: pinMode(key_a, INPUT);
- en: pinMode(key_b, INPUT);
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: pinMode(key_b, INPUT);
- en: pinMode(key_C, INPUT);
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: pinMode(key_C, INPUT);
- en: pinMode(speakerPin, OUTPUT); // Set up piezo pin as an output
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: pinMode(speakerPin, OUTPUT); // 将蜂鸣器引脚设置为输出
- en: '}'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Start a loop to read the press of each key
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: // 开始循环读取每个按键的状态
- en: void loop() {
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: void loop() {
- en: keypress_c = digitalRead(key_c); keypress_d = digitalRead(key_d);
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: keypress_c = digitalRead(key_c); keypress_d = digitalRead(key_d);
- en: keypress_e = digitalRead(key_e); keypress_f = digitalRead(key_f);
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: keypress_e = digitalRead(key_e); keypress_f = digitalRead(key_f);
- en: keypress_g = digitalRead(key_g); keypress_a = digitalRead(key_a);
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: keypress_g = digitalRead(key_g); keypress_a = digitalRead(key_a);
- en: keypress_b = digitalRead(key_b); keypress_C = digitalRead(key_C);
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: keypress_b = digitalRead(key_b); keypress_C = digitalRead(key_C);
- en: // And if the key press is HIGH, play the corresponding tone
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: // 如果按键为HIGH，则播放相应的音调
- en: if ((keypress_c == HIGH) || (keypress_e == HIGH) ||
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: if ((keypress_c == HIGH) || (keypress_e == HIGH) ||
- en: (keypress_g == HIGH) || (keypress_d == HIGH) ||
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: (keypress_g == HIGH) || (keypress_d == HIGH) ||
- en: (keypress_f == HIGH) || (keypress_a == HIGH) ||
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: (keypress_f == HIGH) || (keypress_a == HIGH) ||
- en: (keypress_b == HIGH) || (keypress_C == HIGH))
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: (keypress_b == HIGH) || (keypress_C == HIGH))
- en: '{'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: if (keypress_c == HIGH) {
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: if (keypress_c == HIGH) {
- en: keytone = tones[0];
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: keytone = tones[0];
- en: '}'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: if (keypress_d == HIGH) {
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: if (keypress_d == HIGH) {
- en: keytone = tones[1];
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: keytone = tones[1];
- en: '}'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: if (keypress_e == HIGH) {
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: if (keypress_e == HIGH) {
- en: keytone = tones[2];
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: keytone = tones[2];
- en: '}'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: if (keypress_f == HIGH) {
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: if (keypress_f == HIGH) {
- en: keytone = tones[3];
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: keytone = tones[3];
- en: '}'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: if (keypress_g == HIGH) {
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: if (keypress_g == HIGH) {
- en: keytone = tones[4];
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: keytone = tones[4];
- en: '}'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: if (keypress_a == HIGH) {
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: if (keypress_a == HIGH) {
- en: keytone = tones[5];
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: keytone = tones[5];
- en: '}'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: if (keypress_b == HIGH) {
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: if (keypress_b == HIGH) {
- en: keytone = tones[6];
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: keytone = tones[6];
- en: '}'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: if (keypress_C == HIGH) {
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: if (keypress_C == HIGH) {
- en: keytone = tones[7];
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: keytone = tones[7];
- en: '}'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: digitalWrite(speakerPin, HIGH); // Turn on piezo to play tone
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: digitalWrite(speakerPin, HIGH); // 打开压电蜂鸣器播放音调
- en: delayMicroseconds(keytone);
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: delayMicroseconds(keytone);
- en: digitalWrite(speakerPin, LOW);  // Turn off after a short delay
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: digitalWrite(speakerPin, LOW);  // 短暂延时后关闭
- en: delayMicroseconds(keytone);
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: delayMicroseconds(keytone);
- en: '}'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else { // If no key is pressed, piezo remains silent
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: else { // 如果没有按键被按下，蜂鸣器保持静音
- en: digitalWrite(speakerPin, LOW);
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: digitalWrite(speakerPin, LOW);
- en: '}'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '**TROUBLESHOOTING**'
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**故障排除**'
- en: '**Q.** *The code compiles, but some or all of the buttons do not produce a
    tone.*'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** *代码能编译，但部分或所有按钮未发出音调。*'
- en: • If the piezo sounder makes no noise at all, check that the piezo’s red wire
    is connected to pin 13 and its black wire to GND on the breadboard. Make sure
    you have connected GND on the Arduino to the correct breadboard power rail and
    that the Arduino has power connected.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果压电蜂鸣器完全没有声音，请检查蜂鸣器的红线是否连接到引脚13，黑线是否连接到面包板的GND。确保Arduino的GND连接到正确的面包板电源轨，并且Arduino已连接电源。
- en: • If only some buttons make a sound, recheck the wiring for the pushbuttons
    that are silent. It’s easy to misalign the jumper wires in the breadboard so they
    don’t actually line up in the row with the pushbutton pins.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果只有一些按钮能发出声音，请重新检查静音按钮的接线。跳线可能在面包板上没有对齐，导致它们与按键引脚没有正确连接。
- en: • If you still have an issue, try swapping the offending pushbutton for one
    you know works; if this resolves your problem, then your original pushbutton may
    have been faulty.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果你仍然遇到问题，尝试将故障的按键换成你知道能正常工作的按键；如果这样解决了问题，可能是原来的按键有故障。
- en: '**9'
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**9'
- en: Audio LED Visualizer**
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Audio LED 可视化器**
- en: In this project we’ll use a sound sensor that will light a series of LEDs depending
    on the beat and volume of the sound it detects.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将使用一个声音传感器，根据它检测到的声音的节拍和音量来点亮一系列LED。
- en: '![Image](../images/p0077-01.jpg)![Image](../images/p0078-01.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/p0077-01.jpg)![图片](../images/p0078-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需零件**'
- en: '**Arduino board**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**Arduino 板**'
- en: '**Breadboard**'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**面包板**'
- en: '**Solid-core wires with ends stripped**'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**实心电线，末端已剥皮**'
- en: '**Jumper wires**'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**跳线**'
- en: '**2 red LEDs**'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**2 个红色LED**'
- en: '**2 yellow LEDs**'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**2 个黄色LED**'
- en: '**5 green LEDs**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**5 个绿色LED**'
- en: '**9 220-ohm resistors**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**9 个220欧姆电阻**'
- en: '**3.5 mm female headphone jack**'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**3.5 毫米女性耳机插孔**'
- en: '**HOW IT WORKS**'
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**工作原理**'
- en: In Project 2 we created an LED night-light that was controlled by a light sensor.
    This project is similar, but the LEDs will be controlled by sound. We’ll connect
    a headphone jack to the Arduino, hook the jack up to an MP3 player, and watch
    the lights “dance” to the music. The signal from the MP3 player is picked up by
    the headphone jack and received as pulses by the Arduino A0 pin. The pattern of
    the pulses depends on the beat and volume of the music. The Arduino then sends
    power to the LEDs in direct response to the pattern of the music. As an alternative
    to using the MP3 player, you could add a microphone and have your own voice visualized
    in colored lights.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目2中，我们创建了一个由光传感器控制的LED夜灯。这个项目与之相似，但LED将由声音控制。我们将耳机插孔连接到Arduino，将插孔连接到MP3播放器，然后观看灯光随着音乐“跳动”。MP3播放器的信号通过耳机插孔被Arduino
    A0引脚接收，并作为脉冲输入。脉冲的模式取决于音乐的节奏和音量。然后，Arduino根据音乐的脉冲模式向LED提供电力。作为替代，你可以添加一个麦克风，并通过彩色灯光来可视化你的声音。
- en: '**THE BUILD**'
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**搭建过程**'
- en: Place the LEDs into the breadboard with the short, negative legs in the GND
    rail. Connect the GND rail on the breadboard to Arduino GND.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将LED插入面包板，将短的负极引脚插入GND轨道。将面包板上的GND轨道连接到Arduino的GND。
- en: Insert a 220-ohm resistor for each LED, making sure the resistors straddle the
    center break, and connect one leg to each positive LED leg (see [Figure 9-1](ch09.xhtml#ch9fig1)).
    Connect the other leg of each resistor to Arduino digital pins 2 through 10 with
    jumper wires, as shown in the following table.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个LED插入220欧姆的电阻，确保电阻跨越中心断开，并将一端连接到每个正极LED的引脚（参见[图9-1](ch09.xhtml#ch9fig1)）。将每个电阻的另一端通过跳线连接到Arduino的数字引脚2到10，如下表所示。
- en: '| **LED** | **ARDUINO** |'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **LED** | **Arduino** |'
- en: '| --- | --- |'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Positive leg | Digital pins 2–10 (via resistor) |'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 正极引脚 | 数字引脚2-10（通过电阻） |'
- en: '| Negative leg | GND |'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 负极引脚 | GND |'
- en: '**FIGURE 9-1:** A resistor is required between the LEDs and power.'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图9-1：** LED与电源之间需要使用电阻。'
- en: '![Image](../images/f9-01.jpg)'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](../images/f9-01.jpg)'
- en: '**NOTE**'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*This headphone jack was reclaimed from a radio bought in a dollar store, but
    if you can find one to purchase, that will work too.* *On the headphone jack,
    the pins are GND, right channel, and left channel.*'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*这个耳机插孔是从一家美元店购买的收音机中回收来的，但如果你能找到一个购买的耳机插孔，也可以使用。* *在耳机插孔上，接脚分别是GND、右声道和左声道。*'
- en: Connect the ground pin of the headphone jack directly to GND, and the left channel
    of the jack to Arduino pin A0, as outlined in the following table. You could use
    jumper wire for this, but I’ve used solid-core wire and stripped the ends for
    connections. Stranded wire is too thin and won’t connect easily to the Arduino
    pins. (See [Figure 9-2](ch09.xhtml#ch9fig2) for the positions of the jack pins.)
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将耳机插孔的接地引脚直接连接到GND，插孔的左声道连接到Arduino的A0引脚，如下表所示。你可以使用跳线来连接，但我使用了实心导线，并剥开了端头以进行连接。细绞线太薄，不容易连接到Arduino引脚。（参见[图9-2](ch09.xhtml#ch9fig2)了解插孔引脚的位置。）
- en: '| **HEADPHONE JACK** | **ARDUINO** |'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **耳机插孔** | **Arduino** |'
- en: '| --- | --- |'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Ground | GND |'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 接地 | GND |'
- en: '| Left channel | A0 |'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 左声道 | A0 |'
- en: '**FIGURE 9-2:** 3.5 mm headphone jack with MP3 player jack plugged in'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图9-2：** 3.5毫米耳机插孔，插入了MP3播放器插头'
- en: '![Image](../images/f9-02.jpg)'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](../images/f9-02.jpg)'
- en: Check your setup against the circuit diagram in [Figure 9-3](ch09.xhtml#ch9fig3),
    and then upload the code in “[The Sketch](ch09.xhtml#ch00lev1sec37)” on [page
    81](ch09.xhtml#page_81).
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对照[图9-3](ch09.xhtml#ch9fig3)中的电路图检查你的设置，然后上传[第81页](ch09.xhtml#page_81)中的“[程序](ch09.xhtml#ch00lev1sec37)”代码。
- en: '**FIGURE 9-3:** The circuit diagram for the audio LED visualizer'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图9-3：** 音频LED可视化电路图'
- en: '![Image](../images/f9-03.jpg)'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](../images/f9-03.jpg)'
- en: Plug your MP3 player into the headphone jack for audio input. The LEDs will
    dance to the beat and volume of your music!
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 将MP3播放器插入耳机插孔以进行音频输入。LED将随着你的音乐节奏和音量舞动！
- en: '**THE SKETCH**'
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**程序**'
- en: The sketch first sets the Arduino pins connected to the LEDs, pins 2–10, as
    outputs. The input in this sketch is the signal from the MP3 player, received
    through the headphone jack, which is read by analog pin A0\. The music sent by
    the player is picked up as a series of pulses by A0, and the volume and beat of
    the music determine how the LEDs light up. The louder the music, the more LEDs
    will light; and the faster the music’s beat, the faster the LEDs will flash.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图首先将与LED连接的Arduino引脚（引脚2–10）设置为输出模式。此草图中的输入信号来自MP3播放器，通过耳机插孔接收，并由模拟引脚A0读取。播放器传送的音乐被A0作为一系列脉冲接收，音乐的音量和节奏决定了LED的点亮方式。音乐越响，点亮的LED越多；音乐的节奏越快，LED闪烁的速度就越快。
- en: // Used with kind permission from James Newbould
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: // 经James Newbould的友好许可使用
- en: int led[9] = {2, 3, 4, 5, 6, 7, 8, 9, 10}; // Pins connected to LEDs
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: int led[9] = {2, 3, 4, 5, 6, 7, 8, 9, 10}; // 与LED连接的引脚
- en: int leftChannel = A0; // Pin connected to headphone jack
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: int leftChannel = A0; // 连接到耳机插孔的引脚
- en: int left, i; // Create a variable for left and i
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: int left, i; // 创建左和i的变量
- en: void setup() {
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: void setup() {
- en: for (i = 0; i < 9; i++)
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: for (i = 0; i < 9; i++)
- en: pinMode(led[i], OUTPUT); // Set LEDs as output
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: pinMode(led[i], OUTPUT); // 将LED设置为输出模式
- en: '}'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: void loop() { // Light LEDs from left to right and back again
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: void loop() { // 从左到右依次点亮LED，再反方向点亮
- en: // depending on the value from A0
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: // 根据A0的值
- en: left = analogRead(leftChannel);  // Read left value
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: left = analogRead(leftChannel);  // 读取左声道值
- en: left = left / 10;  // Set level of sensitivity between 1 and 50
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: left = left / 10;  // 设置灵敏度等级，范围为1到50
- en: if (left == 0) {
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: if (left == 0) {
- en: for (i = 0; i < 9; i++) { // If value is low, turn off LED
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: for (i = 0; i < 9; i++) { // 如果值很低，关闭LED
- en: digitalWrite(led[i], LOW);
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: digitalWrite(led[i], LOW);
- en: '}'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else { // Or else turn on LEDs in sequence
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: else { // 否则按顺序点亮LED
- en: for (i = 0; i < left; i++) {
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: for (i = 0; i < left; i++) {
- en: digitalWrite(led[i], HIGH);
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: digitalWrite(led[i], HIGH);
- en: '}'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: for (i = i; i < 9; i++) {
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: for (i = i; i < 9; i++) {
- en: digitalWrite(led[i], LOW);
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: digitalWrite(led[i], LOW);
- en: '}'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '**TROUBLESHOOTING**'
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**故障排除**'
- en: '**Q.** *The code compiles, but some or all of the LEDs do not light up as expected.*'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** *代码能够编译，但某些或所有的LED灯无法按预期点亮。*'
- en: • If none of the LEDs light, make sure you’ve connected the GND wire from the
    Arduino to the correct breadboard power rail and that the Arduino has power connected.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果没有LED灯亮起，请确保已将Arduino的GND线连接到正确的面包板电源轨，并确保Arduino已连接电源。
- en: • If only some LEDs light, check that the LEDs are inserted the correct way,
    with the longer leg connected to the positive power and the short leg to GND.
    LEDs have polarity, so they must be connected correctly. Check that each resistor
    is inserted fully and lines up in the same row as the corresponding LED leg.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果只有部分LED点亮，请检查LED是否以正确的方向插入，长腿应连接到正电源，短腿应连接到GND。LED是有极性的，因此必须正确连接。检查每个电阻是否完全插入，并确保与对应的LED腿在同一排。
- en: • Make sure the LEDs are connected to the Arduino pins defined in the sketch
    and match the circuit diagram in [Figure 9-3](ch09.xhtml#ch9fig3); the first part
    of the sketch defines pins 2–10 as outputs, so these should be used.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: • 确保LED已连接到草图中定义的Arduino引脚，并与[图9-3](ch09.xhtml#ch9fig3)中的电路图相匹配；草图的第一部分将引脚2–10定义为输出模式，因此应该使用这些引脚。
- en: • If an LED still fails to light, it may be burned out or faulty. An easy way
    to check is to swap the LED with another in the sequence and see if that solves
    the issue. If you find that the LED works in another position, it means the resistor
    is either faulty or not inserted fully. Depending on the outcome, replace the
    LED or resistor with a functioning component.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果某个LED仍然不亮，可能是它已经损坏或者有故障。检查的方法是将该LED与序列中的另一个LED交换，看看问题是否解决。如果发现LED在另一个位置工作，说明电阻可能有故障或没有完全插入。根据结果，替换LED或电阻为正常工作元件。
