- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Dynamic Designs with if Statements
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用if语句创建动态设计
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: In this chapter, you’ll learn how to use `if` statements to create OpenSCAD
    designs that respond differently to a variety of conditions. This powerful programming
    tool gives your designs the power to choose from several options and execute only
    certain lines of code. As a result, you can create dynamic designs that adapt
    to changing circumstances. For instance, you can use `if` statements to reconfigure
    a design quickly for 3D printing.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何使用`if`语句来创建根据不同条件做出反应的OpenSCAD设计。这个强大的编程工具赋予你的设计根据不同选项选择并仅执行某些代码行的能力。因此，你可以创建适应变化情况的动态设计。例如，你可以使用`if`语句快速重新配置设计，以便进行3D打印。
- en: As an example project, here you will learn to use `if` statements to vary the
    length of tick marks on a ruler to indicate inch, half-inch, and quarter-inch
    increments depending on the position of the tick mark. You’ll also learn how to
    use random numbers to vary repeated shapes in order to create a more organic variety
    of design characteristics.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个示例项目，在这里你将学习如何使用`if`语句根据刻度线的位置来改变尺子上刻度的长度，以表示英寸、半英寸和四分之一英寸的增量。你还将学习如何使用随机数来改变重复的形状，以创建更有机的设计特征变化。
- en: Using if Statements
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用if语句
- en: An `if` statement uses a Boolean expression (an expression that evaluates to
    either `true` or `false`) to compare two values, then determines whether to execute
    code based on that comparison. If the Boolean expression in an `if` statement
    evaluates to `true`, the indicated code statements are executed. Otherwise, the
    statements are skipped entirely. The Boolean expression describes a condition
    that must be satisfied in order for the indicated statements to be added to the
    design.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句使用布尔表达式（一个计算结果为`true`或`false`的表达式）来比较两个值，然后根据该比较决定是否执行代码。如果`if`语句中的布尔表达式计算结果为`true`，则执行指定的代码语句。否则，这些语句将完全跳过。布尔表达式描述了一个条件，只有当满足该条件时，指定的语句才会被添加到设计中。'
- en: 'The following shows `if` statement syntax:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`if`语句的语法：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[Listing 6-1](#listing6-1) is a variation on the skyscraper design created
    in Chapter 4. This new version uses `if` statements to decide where to place windows
    and doors in the skyscraper ([Figure 6-1](#figure6-1)).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 6-1](#listing6-1)是第4章中创建的摩天大楼设计的一个变体。这个新版本使用`if`语句来决定将窗户和门放置在摩天大楼的哪个位置（[图6-1](#figure6-1)）。'
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 6-1: Using `if` statements to insert doors and windows depending on
    floor number'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 6-1：使用`if`语句根据楼层编号插入门和窗户
- en: '[Figure 6-1](#figure6-1) shows a skyscraper with doors on the first floor and
    windows on every subsequent floor. Two `for` loops in [Listing 6-1](#listing6-1)
    create the rows and columns of windows and doors in this design. The `z` variable
    1 controls the vertical position of each row. Next, two `if` statements use those
    `z` values to decide whether to add a window or a door to the design. If `z` equals
    1 2, a large door is added to the design 3. If `z` is greater than 1 4, a small
    window is added to the design 5.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[图6-1](#figure6-1)显示了一座摩天大楼，第一层有门，后续每一层都有窗户。在[列表6-1](#listing6-1)中的两个`for`循环创建了这个设计中的窗户和门的行列。`z`变量1控制每一行的垂直位置。接下来，两个`if`语句使用这些`z`值来决定是否将窗户或门添加到设计中。如果`z`等于1
    2，则会在设计中添加一个大门3。如果`z`大于1 4，则会在设计中添加一个小窗户5。'
- en: '![f06001](image_fi/279547c06/f06001.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![f06001](image_fi/279547c06/f06001.png)'
- en: 'Figure 6-1: A grid of windows on a skyscraper, with a row of doors'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-1：摩天大楼上的窗户网格，带有一排门
- en: We’ll evolve this skyscraper design throughout the rest of the chapter. However,
    you might feel that a skyscraper is not a skyscraper without more details, especially
    on the other sides of the building. We totally agree and leave the exercise of
    adding more detail to this simple design as a challenge to the reader.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章的其余部分中不断发展这一摩天大楼设计。然而，你可能会觉得没有更多细节的摩天大楼不算摩天大楼，尤其是建筑的其他面。我们完全同意这一点，并将添加更多细节的任务留给读者，作为对这个简单设计的挑战。
- en: Defining Complex Conditions
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义复杂条件
- en: You can use an `if` statement to evaluate many types of conditions by utilizing
    a combination of six Boolean operators and one of two logical operators. In addition,
    you can specify a default scenario (which is executed if the specified condition
    is false) by connecting an `else` statement with an `if` statement. Finally, you
    can connect several related conditions together by using an `else if` statement.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `if` 语句通过结合六个布尔运算符和两个逻辑运算符中的一个来评估多种类型的条件。此外，你还可以通过将 `else` 语句与 `if` 语句连接，指定一个默认场景（当指定的条件为假时执行）。最后，你可以通过使用
    `else if` 语句将多个相关的条件连接在一起。
- en: Choosing Boolean Operators
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择布尔运算符
- en: 'OpenSCAD uses six Boolean operators to evaluate the content of variables within
    a Boolean expression. Each of these operators will result in `true` if the comparison
    is valid, and `false` if the comparison is not valid:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSCAD 使用六个布尔运算符来评估布尔表达式中变量的内容。每个运算符如果比较有效，则返回 `true`，如果比较无效，则返回 `false`：
- en: '`<` less than'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<` 小于'
- en: '`>` greater than'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`>` 大于'
- en: '`<=` less than or equal to'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<=` 小于或等于'
- en: '`>=` greater than or equal to'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`>=` 大于或等于'
- en: '`==` equal to'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`==` 等于'
- en: '`!=` not equal to'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`!=` 不等于'
- en: The symbols used for many of these Boolean operators are probably familiar to
    you from math class. OpenSCAD (as with most other programming languages) changes
    the symbols a bit so that you can easily type them on a keyboard. For instance,
    you’re probably used to seeing the ≤ symbol to indicate less than or equal to.
    However, programming languages commonly use `<=` instead. In the same way, `>=`
    replaces ≥, and `!=` replaces ≠. Finally, be sure not to confuse `==` with `=`.
    Because the single equal sign already has a use (assigning a value to a variable),
    Boolean expressions use the double equal sign (`==`) to test whether two values
    are “equal to” each other. For example, [Listing 6-1](#listing6-1) tests for the
    equality of two values by using the equals (`==`) operator.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 许多布尔运算符的符号可能你在数学课上已经很熟悉。OpenSCAD（与大多数其他编程语言一样）稍微改变了符号，以便你可以轻松地在键盘上输入。例如，你可能习惯看到
    ≤ 符号表示“小于或等于”。然而，编程语言通常使用 `<=` 来代替。同样，`>=` 代替了 ≥，`!=` 代替了 ≠。最后，一定不要混淆 `==` 和 `=`。由于单个等号已经有了用途（为变量赋值），布尔表达式使用双等号
    (`==`) 来测试两个值是否“相等”。例如，[Listing 6-1](#listing6-1) 通过使用等号 (`==`) 运算符测试两个值的相等性。
- en: This collection of Boolean operators provides many choices for evaluating variables
    to determine whether a condition is `true` or `false`. You can now write a loop
    that generates different shapes depending on the number of times the loop has
    repeated. As you will see later, you can also specify that you’d like to draw
    a shape only if a certain condition is not true. Using Boolean operators in an
    `if` statement allows you to create dynamic designs with a relatively small number
    of statements.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这一组布尔运算符提供了许多选择，可以评估变量并确定某个条件是 `true` 还是 `false`。现在你可以编写一个循环，根据循环执行的次数生成不同的形状。如你所见，你还可以指定仅在某个条件不成立时绘制一个形状。在
    `if` 语句中使用布尔运算符使你能够用相对较少的语句创建动态设计。
- en: Using Logical Operators to Combine Boolean Expressions
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用逻辑运算符组合布尔表达式
- en: 'Additionally, you can combine multiple Boolean expressions with one of two
    logical operators: `&&` (which stands for *and*) and `||` (which means *or*).'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以使用两个逻辑运算符之一来组合多个布尔表达式：`&&`（表示 *且*）和 `||`（表示 *或*）。
- en: 'If you use the `&&` operator, all conditions need to be true in order for the
    indicated statements to execute. If you use the `||` operator, at least one of
    multiple conditions needs to be true. For a better sense of how the `&&` operator
    works, consider the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用 `&&` 运算符，所有条件必须为真，才能执行指定的语句。如果使用 `||` 运算符，多个条件中至少有一个为真即可。为了更好地理解 `&&` 运算符的工作方式，请考虑以下情况：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This code segment draws a translated cube only when `x` is greater than 10 *and*
    `y` is less than or equal to 20\.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码仅当 `x` 大于 10 *且* `y` 小于或等于 20 时绘制一个平移的立方体。
- en: 'Now consider this `if` statement that uses the `||` operator:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑这个使用 `||` 运算符的 `if` 语句：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A translated cube is drawn when *either* `x` is greater than 10 *or* `y` is
    less than or equal to 20\. Only one of the Boolean expressions connected by an
    *or* operator needs to evaluate to `true` in order for the shape to be drawn.
    The cube will also be drawn if both Boolean expressions connected by the *or*
    operator are `true`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当*任意*`x`大于10*或者*`y`小于或等于20时，会绘制一个平移的立方体。连接的*或*运算符的布尔表达式中，只有一个为`true`时，形状就会被绘制。如果连接的两个布尔表达式都为`true`，立方体也会被绘制。
- en: Following an Expanded Order of Operations
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 遵循扩展的运算顺序
- en: 'You can construct complex Boolean expressions that involve many arithmetic,
    Boolean, and logical operators. As in math class, where you learn to perform multiplication
    *before* addition, even if addition comes first in the arithmetic expression,
    OpenSCAD evaluates expressions following a well-defined order of operations:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以构造涉及许多算术、布尔和逻辑运算符的复杂布尔表达式。就像在数学课上学会在加法之前先进行乘法，即使加法在算术表达式中排在前面一样，OpenSCAD也按照一个明确的运算顺序来评估表达式：
- en: '`( )`'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`( )`'
- en: '`^`'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`^`'
- en: '`*`, `/`, `%`'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`*`, `/`, `%`'
- en: '`+`, `-`'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`+`, `-`'
- en: '`<`, `>`, `<=`, `>=`'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<`, `>`, `<=`, `>=`'
- en: '`==`, `!=`'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`==`, `!=`'
- en: '`&&`'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`&&`'
- en: '`||`'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`||`'
- en: Operators at the same level in the order of operations are performed according
    to the order of their occurrence in the expression as it is read from left to
    right. Otherwise, operators at the top of this list have a higher precedence and
    are calculated prior to operators at the bottom of the list, even if that means
    the expression is calculated from the inside out.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在运算顺序中，处于相同级别的运算符按照它们在表达式中从左到右的出现顺序执行。否则，位于该列表顶部的运算符具有更高的优先级，并在位于列表底部的运算符之前进行计算，即使这意味着从内到外计算表达式。
- en: Making Two-Way Choices with if…else Statements
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用if…else语句做出双向选择
- en: A basic `if` statement executes a section of code only when the Boolean condition
    is `true`. To execute alternate code when the Boolean condition is `false`, attach
    an `else` statement to an `if` statement. An `if...else` statement creates a two-way
    branch in your code, allowing you to execute different collections of statements
    for each truth condition.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一个基本的`if`语句仅在布尔条件为`true`时执行一段代码。若布尔条件为`false`时执行备用代码，可以在`if`语句后附加一个`else`语句。`if...else`语句在代码中创建了一个双向分支，使你能够根据不同的真值条件执行不同的语句集合。
- en: 'Consider the following `if...else` syntax:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑以下`if...else`语法：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If the Boolean expression in the `if` statement is `true`, the first group of
    statements is executed. If the Boolean expression in the `if` statement is `false`,
    the statements contained within the `else` section is executed. The `else` section
    of an `if` statement is often called the *default* condition, because it describes
    what should happen when the condition specified in the `if` statement is `false`.
    An `else` statement is an optional extension to an `if` statement and is appropriate
    for *mutually exclusive* branching scenarios, where there is no possibility that
    you want to include both sections of code in your design.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`if`语句中的布尔表达式为`true`，则执行第一组语句。如果`if`语句中的布尔表达式为`false`，则执行`else`部分中的语句。`if`语句的`else`部分通常称为*默认*条件，因为它描述了在`if`语句指定的条件为`false`时应发生的情况。`else`语句是`if`语句的可选扩展，适用于*互斥*分支场景，在这种场景中，不可能同时包含代码的两个部分。
- en: 'You could easily redesign [Listing 6-1](#listing6-1) by using an `else` statement.
    The skyscraper in [Figure 6-1](#figure6-1) has exactly one row of doors. All of
    the remaining rows will have windows. Because the `for` loop should sometimes
    draw a door and all other times draw a window, you could rewrite the `if` statement
    like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用`else`语句轻松重构[示例 6-1](#listing6-1)。[图 6-1](#figure6-1)中的摩天大楼有且仅有一行门。其余所有行都将有窗户。因为`for`循环有时需要绘制门，而其他时候需要绘制窗户，所以你可以像这样重写`if`语句：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If the Boolean expression `z == 1` 1 is `true`, OpenSCAD draws a door 2. If
    the Boolean expression is `false`, OpenSCAD draws a window 3.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果布尔表达式`z == 1`的值为`true`，OpenSCAD会绘制一个门2。如果布尔表达式为`false`，OpenSCAD会绘制一个窗户3。
- en: Using Extended if Statements
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用扩展的 if 语句
- en: An *extended* `if` *statement* attaches a condition to an `else` statement to
    create an ordered collection of related decisions. OpenSCAD evaluates the Boolean
    expressions in an extended `if` statement in order until one of the expressions
    evaluates to `true`. You can optionally include an `else` statement at the end
    of an extended `if` to provide a catchall default option in case all of the decisions
    evaluate to `false`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*扩展的*`if`*语句*将一个条件附加到`else`语句上，创建一个有序的相关决策集合。OpenSCAD会按顺序评估扩展`if`语句中的布尔表达式，直到其中一个表达式评估为`true`。你可以选择性地在扩展`if`语句的末尾包含一个`else`语句，以便在所有决策的评估结果为`false`时提供一个兜底的默认选项。
- en: 'The syntax for an extended `if` statement looks like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展`if`语句的语法如下所示：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can add as many `else if` statements as needed to describe any number of
    mutually exclusive design possibilities, which is particularly useful when you
    want to ensure that exactly one of many related outcomes should happen. Each Boolean
    expression in the extended `if` statement is evaluated in order until one is found
    that evaluates to `true`. Only the code section for that Boolean expression is
    executed, while the remaining sections are skipped. If no Boolean expressions
    are `true`, the code specified in the optional `else` section (if provided) is
    executed. Because the `else` section describes the default possibility, it must
    be included at the end of an extended `if` statement.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以根据需要添加任意数量的`else if`语句来描述任何数量的互斥设计可能性，特别是当你想确保恰好一个相关的结果发生时非常有用。扩展`if`语句中的每个布尔表达式会按顺序进行评估，直到找到一个评估为`true`的表达式。只有该布尔表达式对应的代码部分会被执行，而其他部分会被跳过。如果没有布尔表达式的评估结果为`true`，则执行可选的`else`部分（如果提供的话）中的代码。由于`else`部分描述的是默认的可能性，它必须放在扩展`if`语句的末尾。
- en: '[Listing 6-2](#listing6-2) uses an extended `if` statement to draw tick marks
    of various sizes on a ruler ([Figure 6-2](#figure6-2)). This design creates an
    inch-based ruler with tick marks at three repeating intervals: one inch, a half
    inch, and a quarter inch. Tick marks at inch intervals are the longest, followed
    by slightly shorter half-inch tick marks, and even shorter quarter-inch tick marks.
    OpenSCAD is unit-less, so this design uses basic proportionality to divide every
    inch on the ruler into four equal-sized “gaps.” It is intended to be resized to
    its exact width in your 3D-printing preparation software just prior to printing.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 6-2](#listing6-2)使用扩展的`if`语句在尺子上绘制各种大小的刻度线（[图6-2](#figure6-2)）。此设计创建了一个基于英寸的尺子，刻度线间隔为三种重复的间距：1英寸、半英寸和1/4英寸。1英寸间隔的刻度线最长，其次是略短的半英寸刻度线，最后是更短的1/4英寸刻度线。OpenSCAD没有单位，因此该设计使用基本的比例关系将尺子上的每英寸划分为四个相等大小的“间隙”。它的设计意图是在3D打印准备软件中将其调整到准确的宽度后再进行打印。'
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Listing 6-2: Using extended `if` statements to differentiate tick mark sizes
    on a ruler'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 6-2：使用扩展的`if`语句来区分尺子上的刻度线大小
- en: '![f06002](image_fi/279547c06/f06002.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![f06002](image_fi/279547c06/f06002.png)'
- en: 'Figure 6-2: A five-inch ruler'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-2：一个五英寸的尺子
- en: 'First, a collection of variables is defined to help us organize our design
    1: `gap_size` indicates that one OpenSCAD unit will represent the width taken
    by a single quarter-inch gap between tick marks, and `total_marks` keeps track
    of the total number of tick marks needed (according to the `inches` parameter
    of the `ruler` module). We’ll need four tick marks per inch as we’ll include marks
    at the inch, half-inch, and quarter-inch intervals. The other variables relate
    the proportionality of various features of the ruler to these two initial choices.
    Organizing the module variables in this manner allows you to quickly update your
    design in the future. For instance, you might decide to make a longer ruler in
    your next version. This change could easily be accomplished by making a single
    change: the calculation that determines the value of `length` variable.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，定义一组变量来帮助我们组织设计1：`gap_size`表示每一个OpenSCAD单位将代表刻度线之间单个1/4英寸间隙的宽度，`total_marks`记录需要的总刻度数（根据`ruler`模块的`inches`参数）。我们每英寸需要四个刻度，因为我们将在英寸、半英寸和1/4英寸的位置添加刻度线。其他变量则将尺子的不同特征的比例关系与这两个初始选择相关联。以这种方式组织模块变量可以让你在未来快速更新设计。例如，你可能决定在下一个版本中制作一个更长的尺子。这个变化可以通过做一个简单的更改来轻松实现：计算`length`变量值的公式。
- en: The `for` loop 2 draws something for every needed tick mark, except for the
    first and last tick marks, which are meant to be inferred (as they are the beginning
    and end of the ruler). The `t` variable in the `for` loop keeps track of the number
    of tick marks being drawn, while `mark_x` is used to keep track of the location
    of each new tick mark along the x-axis. The first Boolean expression 3 tests whether
    the `t` variable is divisible by 4 (remember, `%` calculates the remainder). If
    this condition is `true`, the longest tick mark is added to the design to indicate
    an inch interval. If the `t` variable isn’t divisible by 4, the second Boolean
    expression 4 tests whether it is divisible by 2\. And if it is, the second-longest
    tick mark is added to the design to indicate a half-inch mark. Only if the `t`
    variable isn’t divisible by either 4 or 2 will the shortest tick mark be added
    to the design 5 by the `else` statement.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 循环 2 会为每个需要的刻度线绘制相应的内容，除了第一个和最后一个刻度线，它们是需要推断的（因为它们是尺子的起始和结束位置）。`for`
    循环中的 `t` 变量跟踪绘制的刻度线数量，而 `mark_x` 用于跟踪每个新刻度线在 x 轴上的位置。第一个布尔表达式 3 检查 `t` 变量是否能被
    4 整除（记住，`%` 计算余数）。如果条件为 `true`，最长的刻度线将被添加到设计中，表示一英寸的间隔。如果 `t` 变量不能被 4 整除，第二个布尔表达式
    4 会检查它是否能被 2 整除。如果可以，则会添加第二长的刻度线，表示半英寸标记。只有当 `t` 变量既不能被 4 整除，也不能被 2 整除时，`else`
    语句才会添加最短的刻度线到设计中 5。'
- en: 'Notice the careful ordering of the decisions used in this extended `if` statement.
    The `for` loop produces a series of numbers that are each evaluated by the extended
    `if` statement: 1, 2, 3, 4, 5, 6, 7, 8, and so on. Numbers like 4, 8, and 12 are
    divisible by both 4 and 2, so which condition should be executed? Extended `if`
    statements evaluate each decision in order, executing only the code contained
    in the `if` statement with the first Boolean expression that is `true`. Even though
    some numbers are divisible by both 4 and 2, the second decision 3 is evaluated
    only if the first expression 2 is `false`. Thus, only one tick mark is drawn for
    each value of `t` in the `for` loop. This is an example of a mutually exclusive
    scenario: one, and only one, of the three tick mark lengths should be drawn for
    each value of `t`.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在这个扩展的 `if` 语句中决策的顺序。`for` 循环产生一个数字序列，每个数字都由扩展的 `if` 语句进行评估：1、2、3、4、5、6、7、8，依此类推。像
    4、8 和 12 这样的数字既能被 4 整除，也能被 2 整除，那么应该执行哪个条件呢？扩展的 `if` 语句会按顺序评估每个决策，只执行第一个布尔表达式为
    `true` 的 `if` 语句中的代码。即使一些数字能被 4 和 2 都整除，第二个决策 3 也只有在第一个表达式 2 为 `false` 时才会被评估。因此，对于
    `for` 循环中的每个 `t` 值，只会绘制一个刻度线。这是一个互斥的场景：每个 `t` 值只应该绘制三种刻度线中的一种，且仅绘制一种。
- en: Using Nested if Statements
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用嵌套 `if` 语句
- en: 'Placing an `if` statement inside another `if` statement is a way to guarantee
    that a Boolean expression should be considered only if another Boolean expression
    is `true`. At a basic level, a nested `if` statement can replace the `&&` operator:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `if` 语句放入另一个 `if` 语句中是一种保证只有当另一个布尔表达式为 `true` 时，才考虑当前布尔表达式的方式。从基本层面来看，嵌套的
    `if` 语句可以替代 `&&` 运算符：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'So you could rewrite the preceding code with a nested `if` statement:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可以用嵌套的 `if` 语句重写上面的代码：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'It’s probably easiest to use the `&&` operator for simple combinations of Boolean
    expressions that all need to be `true` for satisfying certain design conditions.
    However, using nested `if` statements can be easier when you want to test the
    outcome of multiple Boolean expressions that can either be `true` or `false`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要满足某些设计条件的简单布尔表达式组合，使用 `&&` 运算符可能是最简单的。但是，当你想测试多个布尔表达式的结果，这些表达式的值可能是 `true`
    或 `false` 时，使用嵌套的 `if` 语句会更加方便：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It’s usually possible to describe complex conditions using a variety of combinations
    of Boolean operators, logical operators, extended `if` statements, and nested
    `if` statements. Often, the best choice is the combination of conditions that
    makes the most sense to the person creating the design.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通常可以使用布尔运算符、逻辑运算符、扩展的 `if` 语句和嵌套的 `if` 语句组合来描述复杂的条件。通常，最好的选择是组合那些对于设计创建者来说最有意义的条件。
- en: Useful Applications of if Statements
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`if` 语句的有用应用'
- en: You should include an `if` statement whenever you want your OpenSCAD design
    to vary according to a specific condition. The following situations are examples
    of when you may want to use `if` statements in your projects.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你希望 OpenSCAD 设计根据特定条件变化时，你应该使用 `if` 语句。以下情况是你在项目中可能需要使用 `if` 语句的示例。
- en: Setting Up a Design Mode and Print Mode
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置设计模式和打印模式
- en: Consider the Towers of Hanoi project from Chapter 4. When designing the series
    of stacking discs, it was convenient to visualize the discs stacked vertically
    on one of the pegs. However, that configuration is not the best for 3D-printing
    the design, because the disks are resting on top of each other, and you wouldn’t
    want all the disks to be printed as one piece.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑第4章中的汉诺塔项目。在设计堆叠圆盘系列时，直观地将圆盘堆叠在某个桩子上是方便的。然而，这种配置并不适合3D打印设计，因为圆盘相互堆叠在一起，而你不希望所有的圆盘都作为一个整体打印出来。
- en: 'A useful technique is to create two versions of your design: one configuration
    for visualizing the final result and one for 3D-printing it. Use *design mode*
    to build your design in a way that is easy to visualize, and use *print mode*
    to reorganize the same design in a way that is better for 3D printing.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有用的技巧是创建设计的两个版本：一个用于可视化最终结果，另一个用于3D打印它。使用*设计模式*以便于可视化的方式构建设计，使用*打印模式*以更适合3D打印的方式重新组织相同的设计。
- en: '[Listing 6-3](#listing6-3) incorporates these two design configurations; [Figure
    6-3](#figure6-3) depicts print mode.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单6-3](#listing6-3)结合了这两种设计配置；[图6-3](#figure6-3)展示了打印模式。'
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Listing 6-3: Using `if` statements to differentiate print mode and design mode'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 清单6-3：使用`if`语句区分打印模式和设计模式
- en: '![f06003](image_fi/279547c06/f06003.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![f06003](image_fi/279547c06/f06003.png)'
- en: 'Figure 6-3: A Towers of Hanoi project set up for printing'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-3：一个用于打印的汉诺塔项目设置
- en: '[Listing 6-3](#listing6-3) uses a variable named `mode` and an extended `if`
    statement to decide whether to draw the shapes in `"print"` mode or `"design"`
    mode. If `mode == "design"` 1, the disks are displayed vertically, stacked on
    top of one another, which makes it easy to visualize and check for correctness.
    If `mode == "print"` 2, the discs are arranged in two horizontal rows, which is
    an appropriate setup for 3D printing. This differentiation allows you to quickly
    switch back and forth between the two configurations. When you are ready to print,
    all you need to do is change the value of `mode` to `"print"` to make the design
    change automatically.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单6-3](#listing6-3)使用名为`mode`的变量和扩展的`if`语句来决定是以`"print"`模式还是`"design"`模式绘制形状。如果`mode
    == "design"` 1，圆盘垂直排列，堆叠在一起，便于可视化并检查正确性。如果`mode == "print"` 2，圆盘被安排在两行水平位置，这对于3D打印来说是一个合适的设置。这种区分使得你可以在两种配置之间快速切换。当你准备好打印时，只需要将`mode`的值更改为`"print"`，设计就会自动改变。'
- en: Using Random Numbers as a Design Element
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用随机数作为设计元素
- en: Random numbers are a fun way to add unpredictable elements to your designs,
    which is convenient when a design has features that you want to be similar, but
    not exactly the same. For instance, you could easily use random numbers to generate
    an entire city of skyscrapers, all with different heights, widths, and numbers
    of windows.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 随机数是为设计增添不可预测元素的一种有趣方式，这在设计中有些特征你希望它们相似但又不完全相同时非常方便。例如，你可以轻松地使用随机数生成一座城市的摩天大楼，所有大楼的高度、宽度和窗户数都不同。
- en: When you roll a six-sided die, you can expect that one of the six values (1,
    2, 3, 4, 5, 6) on the die will be the result of the roll, but you can’t predict
    the exact outcome. A similar procedure happens with the `rands` function. You
    can be certain that a decimal value within a specified range will be picked without
    knowing exactly which value will be picked until the statement is executed.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当你掷一个六面骰子时，你可以预期其中一个值（1、2、3、4、5、6）会成为掷骰子的结果，但你无法预测具体的结果。类似的过程发生在`rands`函数中。你可以确信会在指定范围内选择一个小数值，但在语句执行之前你无法确切知道会选择哪个值。
- en: 'Use the mathematical `rands` function to generate random numbers. The following
    line of code picks two random decimal numbers between 0 and 1:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数学函数`rands`来生成随机数。以下代码行选择两个介于0和1之间的随机小数：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The first parameter you pass to `rands` specifies the lowest decimal number
    that the random number generator can choose. In this case, the lowest possible
    number is 0.0\. The second parameter specifies the highest possible number, which
    is 1.0 for this example. The third parameter, 2, specifies how many numbers will
    be picked. The variable `number_list` remembers the generated list of random numbers
    so you can use them later.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你传递给`rands`的第一个参数指定了随机数生成器可以选择的最小小数值。在这个例子中，最小值为0.0。第二个参数指定了可能的最大数值，在这个例子中是1.0。第三个参数2指定了要选择多少个数字。变量`number_list`存储了生成的随机数列表，以便稍后使用。
- en: 'The following code segment chooses three random numbers from 10 to 20, then
    stores the list of three numbers in a variable called `number_list`. Each random
    number in the list is then printed to the console window with the `number_list`
    variable, followed by the position of each number in the list within square brackets
    (`[` `]`). As with most programming languages, OpenSCAD considers the first element
    in a list to be in position `[0]`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码段从10到20之间选择三个随机数，然后将这三个数字的列表存储在一个名为`number_list`的变量中。列表中的每个随机数随后会与`number_list`变量一起打印到控制台窗口，并在每个数字的位置后面加上方括号（`[`
    `]`）。与大多数编程语言一样，OpenSCAD将列表中的第一个元素视为位置`[0]`：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Every time you preview this code, you will see a different combination of three
    randomly chosen decimal numbers from 10 to 20 printed to the console.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 每次预览这段代码时，你将看到从10到20之间随机选择的三组不同的小数数值被打印到控制台。
- en: 'The `rands` function can choose any decimal number within the range you provide,
    but sometimes it’s convenient to restrict a design to working only with integers
    (that is, numbers without decimals). If your design needs to pick a random integer
    within a certain range, the mathematical `round` function can be used to map randomly
    generated decimals to integers. The `round` function examines the decimal extension
    of a number to decide whether the decimal number should be “rounded up” or “rounded
    down” according to whether the decimal extension is >= 0.5 or < 0.5, respectively:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`rands`函数可以选择你提供的范围内的任何小数，但有时限制设计仅使用整数（即没有小数的数字）会更方便。如果你的设计需要在特定范围内选择一个随机整数，可以使用数学`round`函数将随机生成的小数映射到整数。`round`函数根据数字的小数部分决定该数字是四舍五入为上（>=0.5）还是四舍五入为下（<0.5）：'
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Every time you run this code, you will see a different combination of three
    integers from 10 to 20 printed to the console because of the use of the mathematical
    `round` function in each `echo` statement. Notice that the first two parameters
    of the `rands` function have been changed to 9.5 and 20.49 in order to ensure
    that each integer in the original range (that is, 10, 11, 12, 13, 14, 15, 16,
    17, 18, 19, or 20) is picked an approximately equally likely number of times.
    Because we wouldn’t want to allow for a random choice of 20.5 and have it rounded
    up to 21, we use 20.49 as the highest possible value that can be generated. This
    produces a slightly lower possibility of 20 being randomly generated as compared
    to the other integer values in the range, but the difference is very small.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 每次运行这段代码时，你将看到三组不同的整数，从10到20之间被打印到控制台，因为在每个`echo`语句中使用了数学`round`函数。请注意，`rands`函数的前两个参数已更改为9.5和20.49，以确保原始范围中的每个整数（即10、11、12、13、14、15、16、17、18、19或20）有大致相等的机会被选中。因为我们不希望允许随机选择20.5并将其四舍五入为21，所以我们使用20.49作为可以生成的最大值。这会导致20被随机生成的概率略低于其他整数值，但差异非常小。
- en: Random numbers are a useful way to generate design elements only a certain percentage
    of the time. For instance, you could modify your skyscraper design from the preceding
    chapter so that 50 percent of the time, the skyscraper includes a water tower
    on top of the roof.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 随机数是生成设计元素的一种有用方法，仅在特定百分比的情况下使用。例如，你可以修改前一章中的摩天大楼设计，使得50%的情况下，摩天大楼的屋顶上会有一个水塔。
- en: '[Listing 6-4](#listing6-4) draws the same simple skyscraper from [Listing 6-2](#listing6-2).
    This new version of the design sometimes includes a water tower to the top of
    the building ([Figure 6-4](#figure6-4)).'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单6-4](#listing6-4) 绘制了与[清单6-2](#listing6-2)相同的简单摩天大楼设计。这一新版本的设计有时会在建筑物顶部加上一个水塔([图6-4](#figure6-4))。'
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Listing 6-4: `if` statements and random numbers to sometimes draw a water tower'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 清单6-4：使用`if`语句和随机数有时绘制一个水塔
- en: After drawing a basic building, the design generates a list with a single random
    number between 0 and 1 1. This list is stored in the `draw_tower` variable. An
    `if` statement 2 tests the randomly generated number and draws a water tower on
    top of the skyscraper only if the number generated is less than 0.5\. That means
    the skyscraper will have a water tower approximately 50 percent of the time, and
    no water tower the other 50 percent of the time.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在绘制一个基础建筑后，设计会生成一个包含0和1之间的单个随机数的列表1。这个列表被存储在`draw_tower`变量中。一个`if`语句2测试这个随机生成的数字，只有当生成的数字小于0.5时，才会在摩天大楼顶部绘制一个水塔。这意味着摩天大楼大约50%的时间会有水塔，另外50%的时间则没有水塔。
- en: '![f06004](image_fi/279547c06/f06004.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![f06004](image_fi/279547c06/f06004.png)'
- en: 'Figure 6-4: A skyscraper with a water tower'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6-4：带有水塔的摩天大楼
- en: 'Next, let’s use random numbers to create a city block of randomly sized skyscrapers
    ([Figure 6-5](#figure6-5)):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用随机数创建一个随机大小的摩天大楼街区（[图 6-5](#figure6-5)）：
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![f06005](image_fi/279547c06/f06005.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![f06005](image_fi/279547c06/f06005.png)'
- en: 'Figure 6-5: A row of randomly sized skyscrapers, some with a water tower'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6-5：一排随机大小的摩天大楼，有些带有水塔
- en: The skyscraper module is imported from *skyscraper.scad* 1 to keep the design
    small and manageable. Next, lists of random numbers (of size `num_buildings`)
    are generated for each parameter of the skyscraper module 2. A `for` loop then
    draws a number of skyscrapers according to the value indicated by the `num_buildings`
    variable. For each new skyscraper, variables are assigned random numbers from
    the appropriate spot in each list 3. Decimals are rounded to integer values 4
    for parameters where decimal values wouldn’t make sense (you wouldn’t want half
    of a window to be drawn). Finally, this collection of randomly generated values
    specifies the various parameters 5 of each new skyscraper. Every time you preview
    or render this design, each building will be rendered differently, because the
    random values used to generate each skyscraper will be different. This technique
    is useful for making repeated computer-generated designs appear more organic and
    natural.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 摩天大楼模块是从*skyscraper.scad* 1导入的，以保持设计小巧和易于管理。接下来，为摩天大楼模块的每个参数生成一个随机数列表（大小为`num_buildings`）2。然后，使用`for`循环根据`num_buildings`变量指定的值绘制多个摩天大楼。对于每个新的摩天大楼，从每个列表中的适当位置分配随机数给变量3。对于那些小数值不合适的参数（例如你不希望画出半个窗户），小数会被四舍五入为整数值4。最后，这些随机生成的值指定了每个新摩天大楼的各种参数5。每次预览或渲染这个设计时，每栋建筑都会有所不同，因为生成每个摩天大楼所使用的随机值不同。这种技术有助于让重复生成的计算机设计看起来更自然和有机。
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter introduced the concept of creating conditional branches with `if`
    statements that allow you to create designs that adapt to changing circumstances.
    Each section of an `if` statement executes only when a specific condition is true,
    allowing you to generate designs with varying characteristics. This variety allows
    you to describe complex designs concisely.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了通过`if`语句创建条件分支的概念，这可以让你创建适应变化环境的设计。`if`语句的每个部分仅在特定条件为真时执行，从而允许你生成具有不同特征的设计。这种多样性使得你能够简洁地描述复杂的设计。
- en: 'When utilizing `if` statements to create dynamic designs, keep these concepts
    in mind:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`if`语句创建动态设计时，请记住以下概念：
- en: '`if` statements use a Boolean expression to evaluate whether a condition is
    true or false.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if`语句使用布尔表达式来评估条件是否为真或假。'
- en: '`if` statements execute only if their Boolean expression is `true`.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if`语句仅在其布尔表达式为`true`时执行。'
- en: All expressions in OpenSCAD are evaluated according to an order of operations,
    which means that a complex Boolean expression can be evaluated from the inside
    out.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenSCAD中的所有表达式都会按照运算顺序进行评估，这意味着复杂的布尔表达式可以从内到外进行评估。
- en: A nested `if` statement is an `if` statement placed inside another `if` statement.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌套的`if`语句是一个`if`语句放置在另一个`if`语句内部。
- en: To indicate what should happen when a Boolean expression is `false`, extend
    an `if` statement with an `else` statement.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要表示当布尔表达式为`false`时应该发生什么，可以用`else`语句扩展`if`语句。
- en: You can combine several mutually exclusive decisions in one extended `if` statement.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在一个扩展的`if`语句中结合多个互斥的决策。
- en: An `else` statement allows you to provide a default collection of statements
    that execute when none of the Boolean conditions in an extended `if` statement
    are true.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`else`语句允许你提供一组默认的语句，在扩展的`if`语句中的布尔条件都不为真时执行。'
- en: You can use `if` statements with random numbers to generate an organic naturalness
    to your design.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用带有随机数的`if`语句为你的设计带来自然的有机感。
- en: '`if` statements can help you organize your design into modes (like `"print"`
    or `"design"`), making it easy to change important configuration details.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if`语句可以帮助你将设计组织成不同的模式（比如`"print"`或`"design"`），使得修改重要配置细节变得更加简便。'
