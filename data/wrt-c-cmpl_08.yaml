- en: '![](../images/pg130.jpg)'
  id: totrans-0
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/pg130.jpg)'
- en: <samp class="SANS_Futura_Std_Book_Oblique_I_11">[Description](description-15.xhtml)</samp>
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">[描述](description-15.xhtml)</samp>
- en: <hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">7</samp> <samp class="SANS_Dogma_OT_Bold_B_11">COMPOUND
    STATEMENTS</samp>
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">7</samp> <samp class="SANS_Dogma_OT_Bold_B_11">复合语句</samp>
- en: </hgroup>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener-img.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.jpg)'
- en: In this chapter, you’ll implement compound statements. Compound statements serve
    two important purposes. As you saw in the two previous chapters, they group together
    other statements and declarations into a single unit that can appear in a larger
    construct, like an <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> statement.
    More interestingly, they also delineate the different *scopes* within a function.
    A variable’s scope is the part of the program where that variable can be used;
    when you declare a variable inside a compound statement, its scope extends only
    to the end of that statement.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将实现复合语句。复合语句有两个重要作用。正如你在前两章中看到的，它们将其他语句和声明组合成一个单一单元，可以出现在更大的结构中，比如< samp
    class="SANS_TheSansMonoCd_W5Regular_11">if</samp>语句中。更有趣的是，它们还划定了函数内不同的*作用域*。变量的作用域是该变量可以使用的程序部分；当你在复合语句中声明一个变量时，它的作用域仅延伸到该语句的末尾。
- en: We’ll spend a little time in this chapter extending the parser so we can group
    block items together, but our main task will be extending the variable resolution
    pass to keep track of each variable’s scope. We’ll barely change the TACKY generation
    stage, and we won’t touch the lexer or the assembly generation stage at all. Before
    starting on the parser, I’ll give a quick overview of how scoping works in C and
    define some terms that I’ll use later in the chapter.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将花一些时间扩展解析器，以便将块项组合在一起，但我们的主要任务将是扩展变量解析阶段，以跟踪每个变量的作用域。我们几乎不需要修改TACKY生成阶段，且不会接触词法分析器或汇编生成阶段。在开始解析器之前，我将简要概述C语言中作用域的工作原理，并定义一些我将在本章后续中使用的术语。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Scoop on Scopes</samp>
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">作用域的概述</samp>
- en: A language construct that can contain declarations, and that determines the
    scope of those declarations, is called a *block*. Compound statements and function
    bodies are both blocks. So are loops, which we’ll implement in [Chapter 8](chapter8.xhtml).
    (Technically, <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> statements
    are too, but that doesn’t matter for our implementation.) A local variable’s scope
    begins at the point where that variable is declared. That means a variable’s scope
    can begin in the middle of a block. Its scope extends until the end of the block
    in which it was declared. For example, in the program
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 可以包含声明并确定这些声明作用域的语言结构被称为*块*。复合语句和函数体都是块。循环也是块，我们将在[第8章](chapter8.xhtml)中实现。（从技术上讲，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">if</samp>语句也是，但这对我们的实现来说并不重要。）局部变量的作用域从该变量声明的地方开始。这意味着变量的作用域可以从块的中间开始。它的作用域一直延伸到声明它的块的结尾。例如，在程序中
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: the variable <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp>’s scope
    begins right before its initializer ❶, and extends until the very end of the function
    ❷.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 变量<samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp>的作用域从其初始化器之前的❶开始，并一直延伸到函数的最后❷。
- en: A compound statement can appear either on its own or inside another statement.
    In [Listing 7-1](chapter7.xhtml#list7-1), we use a compound statement as the body
    of an <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> statement.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 复合语句可以单独出现，也可以出现在另一个语句内部。在[示例 7-1](chapter7.xhtml#list7-1)中，我们将复合语句作为< samp
    class="SANS_TheSansMonoCd_W5Regular_11">if</samp>语句的主体。
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-1: Using a compound
    statement as an</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">if</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">statement body</samp>'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">示例 7-1：将复合语句作为</samp> <samp
    class="SANS_Futura_Std_Book_Oblique_I_11">if</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">语句体使用</samp>
- en: In this example, the variable <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp>’s
    scope runs from ❶ to the end of the compound statement ❷.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，变量<samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp>的作用域从❶开始，直到复合语句的结尾❷。
- en: 'When you enter a new block, you can still use variables from the outer scope,
    as this code fragment illustrates:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当你进入一个新的块时，你仍然可以使用来自外部作用域的变量，如以下代码片段所示：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Although <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp> is declared
    in the outer scope, we can refer to it when we initialize <samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp>
    in the inner scope. We therefore initialize <samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">4</samp>. But let’s see what
    happens in [Listing 7-2](chapter7.xhtml#list7-2), where we declare another variable
    named <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp> inside the inner
    block.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp> 是在外部作用域中声明的，但当我们在内部作用域初始化
    <samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp> 时，我们仍然可以引用它。因此，我们将 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">b</samp> 初始化为 <samp class="SANS_TheSansMonoCd_W5Regular_11">4</samp>。但让我们看看在[列表
    7-2](chapter7.xhtml#list7-2)中发生了什么，在那里我们在内部块内声明了另一个名为 <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp>
    的变量。
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-2: Declaring two
    variables with the same name but different scopes</samp>'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 7-2：声明两个同名但作用域不同的变量</samp>
- en: 'This time, when we initialize <samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp>,
    two different variables named <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp>
    are in scope: the one declared in the outer scope ❶ and the one declared in the
    inner scope ❷. In cases like this, we always use the variable declared in the
    innermost scope. As a result, we initialize <samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">5</samp>. Even though the outer
    <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp> is still in scope, we can’t
    access it; it’s *hidden* (or *shadowed*) by the inner one.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，当我们初始化 <samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp> 时，作用域中有两个名为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp> 的不同变量：一个是在外部作用域中声明的 ❶，另一个是在内部作用域中声明的
    ❷。在这种情况下，我们总是使用在最内层作用域中声明的变量。因此，我们将 <samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp>
    初始化为 <samp class="SANS_TheSansMonoCd_W5Regular_11">5</samp>。尽管外部的 <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp>
    仍然在作用域内，但我们无法访问它；它被内部的变量所*隐藏*（或*遮蔽*）。
- en: Being hidden is different from being out of scope, because a hidden variable
    can become visible again later in the program. [Listing 7-3](chapter7.xhtml#list7-3),
    which is almost identical to [Listing 7-2](chapter7.xhtml#list7-2), illustrates
    this distinction.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 被隐藏与超出作用域是不同的，因为被隐藏的变量可以在程序的后续部分再次变得可见。[列表 7-3](chapter7.xhtml#list7-3)，它几乎与[列表
    7-2](chapter7.xhtml#list7-2)相同，说明了这一区别。
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-3: A hidden variable
    becoming visible again</samp>'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 7-3：一个隐藏的变量再次变得可见</samp>
- en: As we saw in the previous example, the first declaration of <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp>
    ❶ is hidden by the second declaration ❷. But the <samp class="SANS_TheSansMonoCd_W5Regular_11">return</samp>
    statement ❸ comes after the end of the compound statement. At that point, the
    second <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp> is no longer in
    scope, so the first one is visible again. We’ll therefore use the first <samp
    class="SANS_TheSansMonoCd_W5Regular_11">a</samp> in the <samp class="SANS_TheSansMonoCd_W5Regular_11">return</samp>
    statement, returning <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的示例中所看到的，第一条声明的<samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp>
    ❶ 被第二条声明 ❷ 隐藏了。但是 <samp class="SANS_TheSansMonoCd_W5Regular_11">return</samp>
    语句 ❸ 位于复合语句的末尾。在那个时候，第二个 <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp>
    已经超出了作用域，因此第一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp> 再次可见。因此，我们将在
    <samp class="SANS_TheSansMonoCd_W5Regular_11">return</samp> 语句中使用第一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp>，返回
    <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>。
- en: 'What if we switched the order of the two statements in the inner block in [Listing
    7-2](chapter7.xhtml#list7-2)? Then we’d have:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们交换[列表 7-2](chapter7.xhtml#list7-2)中内部块内两个语句的顺序会怎样呢？那样我们就会得到：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now when we declare <samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp>,
    the inner <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp> isn’t in scope
    yet, so it doesn’t hide the outer <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp>.
    The expression <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> will refer to the first
    declaration of <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp>, so we’ll
    initialize <samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp> to <samp class="SANS_TheSansMonoCd_W5Regular_11">4</samp>.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们声明<samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp>时，内部的<samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp>还不在作用域内，因此它不会隐藏外部的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">a</samp>。表达式<samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>将引用第一个声明的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">a</samp>，因此我们会将<samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp>初始化为<samp
    class="SANS_TheSansMonoCd_W5Regular_11">4</samp>。
- en: You can have many layers of nested scopes, as [Listing 7-4](chapter7.xhtml#list7-4)
    demonstrates.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以拥有许多层嵌套作用域，正如[列表7-4](chapter7.xhtml#list7-4)所示。
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-4: Multiple nested
    scopes</samp>'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表7-4：多个嵌套作用域</samp>
- en: In this listing, we declare three variables named <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp>
    with three different scopes. We declare the first <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp>
    at ❶ and the second at ❷. We assign the value <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>
    to the second <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp> at ❸ and
    return it at ❺, so the whole program returns <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>.
    The third variable named <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp>,
    declared at ❹, is never used. We never reach the final <samp class="SANS_TheSansMonoCd_W5Regular_11">return</samp>
    statement at ❻, but if we did, it would return <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>,
    the value of the very first variable named <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp>
    that was declared back at ❶.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个列表中，我们声明了三个不同作用域的名为<samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp>的变量。我们在❶声明第一个<samp
    class="SANS_TheSansMonoCd_W5Regular_11">x</samp>，在❷声明第二个。我们在❸将值<samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>赋给第二个<samp
    class="SANS_TheSansMonoCd_W5Regular_11">x</samp>并在❺返回它，因此整个程序返回<samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>。第三个名为<samp
    class="SANS_TheSansMonoCd_W5Regular_11">x</samp>的变量，在❹声明，但从未使用。我们从未到达❻处的最后一个<samp
    class="SANS_TheSansMonoCd_W5Regular_11">return</samp>语句，但如果到了那里，它将返回<samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>，即在❶处声明的第一个变量名为<samp
    class="SANS_TheSansMonoCd_W5Regular_11">x</samp>的值。
- en: We need to handle two error cases related to variable scope. (We covered both
    of these briefly in [Chapter 5](chapter5.xhtml), but detecting them is a bit more
    complicated in programs with multiple scopes.) First, it’s illegal to use a variable
    name if no variable with that name is in scope. [Listing 7-5](chapter7.xhtml#list7-5)
    illustrates this error.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要处理与变量作用域相关的两个错误情况。（我们在[第5章](chapter5.xhtml)中简要讨论过这两个问题，但在具有多个作用域的程序中，检测这些错误要复杂一些。）首先，如果没有与该名称对应的变量在作用域内，就不能使用该变量名。[列表7-5](chapter7.xhtml#list7-5)说明了这个错误。
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-5: Using an undeclared
    variable</samp>'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表7-5：使用未声明的变量</samp>
- en: In this listing, we declare two different variables named <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp>.
    The scope of the first declaration starts at ❶ and ends at ❷. The scope of the
    second declaration starts at ❹ and extends to the end of the function ❺. Neither
    of these declarations is in scope at ❸. It’s an error to use the variable name
    <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp> at that point, because
    that name doesn’t refer to anything.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个列表中，我们声明了两个不同的变量，名为<samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp>。第一个声明的作用域从❶开始，到❷结束。第二个声明的作用域从❹开始，一直到函数的末尾❺。在❸处，这两个声明都不在作用域内。此时使用变量名<samp
    class="SANS_TheSansMonoCd_W5Regular_11">x</samp>是错误的，因为该名称没有指向任何东西。
- en: 'Second, you can’t have multiple declarations of the same variable name with
    the same scope. We say that two variables have the same scope if their scopes
    end at exactly the same point; that is, if they’re declared in the same block.
    For example, this code fragment is invalid:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，不能在同一作用域内有多个相同变量名的声明。如果两个变量的作用域在同一位置结束，我们就说它们有相同的作用域；也就是说，它们在同一个代码块内声明。例如，以下代码片段是无效的：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The second declaration of <samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp>
    is illegal because it has the same scope as the first declaration.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp>的第二次声明是非法的，因为它与第一次声明的作用域相同。
- en: Now that you understand the scoping rules you need to implement, let’s start
    on the parser.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你理解了需要实现的作用域规则，让我们开始解析器的工作。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Parser</samp>
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">解析器</samp>
- en: 'A list of statements and declarations wrapped in braces can be either a function
    body or a compound statement. Let’s define a <samp class="SANS_TheSansMonoCd_W5Regular_11">block</samp>
    AST node to represent both constructs:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 被括号包裹的语句和声明列表可以是函数体或复合语句。让我们定义一个<samp class="SANS_TheSansMonoCd_W5Regular_11">block</samp>
    AST节点来表示这两种结构：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that this AST node doesn’t represent <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp>
    statements and won’t represent loops once we implement them in [Chapter 8](chapter8.xhtml),
    even though they’re technically also blocks.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个AST节点并不代表<samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp>语句，且一旦我们在[第8章](chapter8.xhtml)中实现它们时，也不会表示循环语句，尽管它们在技术上也是块。
- en: 'Next, we’ll extend the <samp class="SANS_TheSansMonoCd_W5Regular_11">statement</samp>
    node to represent compound statements:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将扩展<samp class="SANS_TheSansMonoCd_W5Regular_11">statement</samp>节点，以表示复合语句：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And we’ll change the <samp class="SANS_TheSansMonoCd_W5Regular_11">function_definition</samp>
    node to use <samp class="SANS_TheSansMonoCd_W5Regular_11">block</samp> too:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将更改<samp class="SANS_TheSansMonoCd_W5Regular_11">function_definition</samp>节点，使用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">block</samp>：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[Listing 7-6](chapter7.xhtml#list7-6) gives the new AST definition with these
    changes bolded.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[第7-6列表](chapter7.xhtml#list7-6)给出了包含这些更改的新AST定义，已加粗显示。'
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-6: The abstract syntax
    tree with compound statements</samp>'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表7-6：带有复合语句的抽象语法树</samp>
- en: '[Listing 7-7](chapter7.xhtml#list7-7) shows the corresponding changes to the
    grammar.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[第7-7列表](chapter7.xhtml#list7-7)展示了语法的相应更改。'
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-7: The grammar with
    compound statements</samp>'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表7-7：带有复合语句的语法</samp>
- en: Remember that the <samp class="SANS_TheSansMonoCd_W5Regular_11">"{"</samp> and
    <samp class="SANS_TheSansMonoCd_W5Regular_11">"}"</samp> in the definition of
    <samp class="SANS_TheSansMonoCd_W5Regular_11"><block></samp> are literal braces,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">{</samp>and} indicate repetition.
    You can parse the updated grammar using the recursive descent techniques you’re
    already familiar with. When you’re parsing a <samp class="SANS_TheSansMonoCd_W5Regular_11"><statement></samp>
    symbol, a <samp class="SANS_TheSansMonoCd_W5Regular_11">{</samp>token will tell
    you that you’ve hit a compound statement, just like the <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp>
    keyword signals the beginning of an <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp>
    statement and <samp class="SANS_TheSansMonoCd_W5Regular_11">return</samp> signals
    the start of a <samp class="SANS_TheSansMonoCd_W5Regular_11">return</samp> statement.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在<samp class="SANS_TheSansMonoCd_W5Regular_11">"{"</samp>和<samp class="SANS_TheSansMonoCd_W5Regular_11">"}"</samp>的定义中，<samp
    class="SANS_TheSansMonoCd_W5Regular_11"><block></samp>是字面意义上的括号，而<samp class="SANS_TheSansMonoCd_W5Regular_11">{</samp>和}表示重复。你可以使用你已经熟悉的递归下降技术来解析更新后的语法。当你解析<samp
    class="SANS_TheSansMonoCd_W5Regular_11"><statement></samp>符号时，<samp class="SANS_TheSansMonoCd_W5Regular_11">{</samp>标记会告诉你已经遇到复合语句，就像<samp
    class="SANS_TheSansMonoCd_W5Regular_11">if</samp>关键字表示一个<sup class="SANS_TheSansMonoCd_W5Regular_11">if</sup>语句的开始，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">return</samp>表示<sup class="SANS_TheSansMonoCd_W5Regular_11">return</sup>语句的开始。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Variable Resolution</samp>
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">变量解析</samp>
- en: Now we’ll update the variable resolution pass to follow the scoping rules we
    talked about at the start of the chapter. Any local variables that share the same
    name in the original program will receive different names during this pass. In
    later passes, we won’t have to think about scopes at all; because every variable
    will have a unique name, we can convert each variable in the AST to a TACKY variable,
    then a pseudoregister, and finally a memory address, exactly as we’ve done in
    earlier chapters, without worrying about which object each name refers to.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将更新变量解析过程，以遵循本章开始时讨论的作用域规则。在这个过程中，任何在原始程序中具有相同名称的局部变量将会被赋予不同的名称。在后续的过程中，我们完全不需要考虑作用域；因为每个变量都会有一个独特的名称，我们可以像之前的章节中那样，将每个变量转换成
    TACKY 变量，接着是伪寄存器，最后转换成内存地址，而不必担心每个名称所指代的对象。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Resolving Variables
    in Multiple Scopes</samp>
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">在多个作用域中解析变量</samp>
- en: 'As an example, let’s take another look at the program from [Listing 7-4](chapter7.xhtml#list7-4):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，让我们再来看一遍 [列表 7-4](chapter7.xhtml#list7-4) 中的程序：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[Listing 7-8](chapter7.xhtml#list7-8) shows how this program looks after variable
    resolution.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 7-8](chapter7.xhtml#list7-8) 显示了变量解析后的程序样子。'
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-8: The program from
    [Listing 7-4](chapter7.xhtml#list7-4) after variable resolution</samp>'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 7-8：在进行变量解析后，[列表 7-4](chapter7.xhtml#list7-4)
    中的程序</samp>
- en: Now every variable has a different name. These new names make explicit which
    variable we’re using at every point. For example, it’s now clear that the variable
    declared at the start of the function (which we’ve renamed to <samp class="SANS_TheSansMonoCd_W5Regular_11">x0</samp>)
    is used only once, at the very end.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在每个变量都有了不同的名称。这些新名称清晰地标明了我们在每个时刻使用的是哪个变量。例如，现在我们可以明确知道函数开始时声明的变量（我们已将其重命名为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">x0</samp>）只在最后一次使用。
- en: Our basic approach to variable resolution is the same as in earlier chapters.
    We’ll traverse the AST, maintaining a map from user-defined names to generated
    names as we go. But now our new scoping rules will dictate how we update this
    map. [Table 7-1](chapter7.xhtml#tab7-1) shows how the variable map will look at
    each point in [Listing 7-4](chapter7.xhtml#list7-4).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的变量解析基本方法与之前章节相同。我们将遍历 AST，在此过程中维护一个从用户定义的名称到生成的名称的映射。现在，我们新的作用域规则将决定我们如何更新这个映射。[表
    7-1](chapter7.xhtml#tab7-1) 显示了在 [列表 7-4](chapter7.xhtml#list7-4) 中每个时刻变量映射的样子。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 7-1:</samp> <samp class="SANS_Futura_Std_Book_11">The
    Variable Map Throughout [Listing 7-4](chapter7.xhtml#list7-4)</samp>
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 7-1：</samp> <samp class="SANS_Futura_Std_Book_11">在
    [列表 7-4](chapter7.xhtml#list7-4) 中的变量映射</samp>
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">int main(void) {</samp> | <samp
    class="SANS_Futura_Std_Book_11">(empty map)</samp> |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">int main(void) {</samp> | <samp
    class="SANS_Futura_Std_Book_11">(空映射)</samp> |'
- en: '| --- | --- |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp> → <samp class="SANS_TheSansMonoCd_W5Regular_11">x0</samp>
    |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp> → <samp class="SANS_TheSansMonoCd_W5Regular_11">x0</samp>
    |'
- en: '|'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp> → <samp class="SANS_TheSansMonoCd_W5Regular_11">x1</samp>
    |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp> → <samp class="SANS_TheSansMonoCd_W5Regular_11">x1</samp>
    |'
- en: '|'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp> → <samp class="SANS_TheSansMonoCd_W5Regular_11">x2</samp>
    |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp> → <samp class="SANS_TheSansMonoCd_W5Regular_11">x2</samp>
    |'
- en: '|'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp> → <samp class="SANS_TheSansMonoCd_W5Regular_11">x1</samp>
    |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp> → <samp class="SANS_TheSansMonoCd_W5Regular_11">x1</samp>
    |'
- en: '|'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp> → <samp class="SANS_TheSansMonoCd_W5Regular_11">x0</samp>
    |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp> → <samp class="SANS_TheSansMonoCd_W5Regular_11">x0</samp>
    |'
- en: The state of the variable map changes in two cases. First, when a new variable
    is declared, we add it to the map, overwriting any existing variable with the
    same name. Second, when we exit a block, we revert to the same variable map we
    had before entering that block.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 变量映射的状态会在两种情况下发生变化。首先，当声明一个新变量时，我们将其添加到映射中，并覆盖任何具有相同名称的现有变量。其次，当我们退出一个代码块时，我们会恢复到进入该代码块之前的变量映射状态。
- en: 'The first case is already familiar: whenever we encounter a variable declaration,
    we’ll add a map entry. To handle the second case, we’ll make a copy of the variable
    map whenever we enter a new block. As we process that block, we’ll add new entries
    to that copy of the map, leaving the variable map for the outer scope unchanged.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个情况已经很熟悉：每当我们遇到一个变量声明时，我们就会添加一个映射条目。为了处理第二种情况，每当进入一个新块时，我们会复制一份变量映射。在处理该块时，我们会向这份复制的映射中添加新的条目，而不会改变外部作用域的变量映射。
- en: Now that you have a basic idea of how this pass will work, let’s walk through
    the pseudocode.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经对这个过程的基本原理有了了解，接下来我们一起看一下伪代码。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Updating the Variable
    Resolution Pseudocode</samp>
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">更新变量解析伪代码</samp>
- en: 'First, let’s process declarations. In earlier chapters, the compiler would
    fail if it ever saw two declarations of the same variable name:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们来处理声明。在前面的章节中，如果编译器遇到同一个变量名的两次声明，它会失败：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'But now things are a little more complicated. It’s legal to reuse the same
    variable name in multiple declarations. However, it’s illegal to declare the same
    variable name more than once *in the same block*. To enforce this rule, we’ll
    track two facts about each entry in the variable map: its new autogenerated name
    and whether it was declared in the current block. [Listing 7-9](chapter7.xhtml#list7-9)
    gives the updated pseudocode to handle a declaration. Changes from the previous
    version of this pseudocode, in [Listing 5-9](chapter5.xhtml#list5-9), are bolded.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在情况有点复杂了。重复使用相同的变量名在多个声明中是合法的。然而，在*同一块内*声明同一个变量名是非法的。为了强制执行这一规则，我们会追踪变量映射中每个条目的两个事实：它的新自动生成名称以及它是否在当前块中声明。[列表
    7-9](chapter7.xhtml#list7-9) 给出了处理声明的更新伪代码。与之前版本的 [列表 5-9](chapter5.xhtml#list5-9)
    相比，变化部分已加粗。
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-9: Resolving a variable
    declaration</samp>'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 7-9: 解析变量声明</samp>'
- en: Next, we need a function that can process block items in order (I’ll call this
    <samp class="SANS_TheSansMonoCd_W5Regular_11">resolve_block</samp> in later pseudocode
    listings). You’ve already written this code to process function bodies; now you
    just need to refactor it so you can reuse it to process compound statements too.
    Remember that changes you make while processing one block item (specifically,
    a declaration) must be visible when you process later block items.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个可以按顺序处理块项的函数（我将在后续的伪代码列表中称之为 <samp class="SANS_TheSansMonoCd_W5Regular_11">resolve_block</samp>）。你已经编写了这段代码来处理函数体；现在你只需要重构它，使其也可以用来处理复合语句。记住，在处理一个块项（特别是声明）时所做的更改，必须在处理后续块项时可见。
- en: We’ll also update <samp class="SANS_TheSansMonoCd_W5Regular_11">resolve_statement</samp>
    to handle compound statements. [Listing 7-10](chapter7.xhtml#list7-10) gives the
    updated pseudocode for <samp class="SANS_TheSansMonoCd_W5Regular_11">resolve_statement</samp>,
    with changes from the previous version in [Listing 5-10](chapter5.xhtml#list5-10)
    bolded. The important detail here is that we’ll pass a *copy* of the variable
    map when we traverse the compound statement, so any declarations we process inside
    the compound statement won’t be visible outside of it.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还会更新 <samp class="SANS_TheSansMonoCd_W5Regular_11">resolve_statement</samp>
    来处理复合语句。[列表 7-10](chapter7.xhtml#list7-10) 给出了更新后的 <samp class="SANS_TheSansMonoCd_W5Regular_11">resolve_statement</samp>
    伪代码，和之前版本的 [列表 5-10](chapter5.xhtml#list5-10) 的变化部分已加粗。这里的重要细节是：当我们遍历复合语句时，我们会传递变量映射的一个*副本*，这样在复合语句内部处理的任何声明在外部作用域不可见。
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-10: Resolving compound
    statements</samp>'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 7-10: 解析复合语句</samp>'
- en: Finally, we’ll implement <samp class="SANS_TheSansMonoCd_W5Regular_11">copy_variable_map</samp>.
    This should create a copy of the variable map with the <samp class="SANS_TheSansMonoCd_W5Regular_11">from_current_block</samp>
    flag set to <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp> for every
    entry. That way, we won’t throw an error when we process declarations in the inner
    scope that hide declarations from the outer scope.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将实现 <samp class="SANS_TheSansMonoCd_W5Regular_11">copy_variable_map</samp>。这应该创建一个变量映射的副本，并将
    <samp class="SANS_TheSansMonoCd_W5Regular_11">from_current_block</samp> 标志设置为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>，应用于每个条目。这样，在处理内部作用域中隐藏外部作用域声明的声明时，我们就不会抛出错误。
- en: 'Once you’ve made those changes, your variable resolution pass will be able
    to handle nested scopes!  ### <samp class="SANS_Futura_Std_Bold_B_11">TACKY Generation</samp>'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了这些更改，你的变量解析阶段将能够处理嵌套作用域！### <samp class="SANS_Futura_Std_Bold_B_11">TACKY
    生成</samp>
- en: 'The last step is extending the TACKY generation stage to handle compound statements.
    It’s pretty straightforward: to convert a compound statement to TACKY, just convert
    each block item inside it to TACKY. Basically, you should handle compound statements
    exactly like you’re already handling function bodies. You don’t need to touch
    later compiler stages at all; once you have TACKY generation working, you’re done
    with the chapter!'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是扩展 TACKY 生成阶段，以处理复合语句。这非常直接：要将复合语句转换为 TACKY，只需将其中的每个代码块项转换为 TACKY。基本上，你应该像处理函数体一样处理复合语句。你完全不需要接触后续的编译器阶段；一旦
    TACKY 生成工作完成，你就完成了本章的内容！
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">总结</samp>
- en: In this chapter, you implemented a new kind of statement by extending just a
    few stages in your compiler. You wrote a more sophisticated variable resolution
    pass that correctly resolves variables in multiple scopes, dramatically expanding
    the set of programs you can compile. Next, you’ll implement loops, <samp class="SANS_TheSansMonoCd_W5Regular_11">break</samp>
    statements, and <samp class="SANS_TheSansMonoCd_W5Regular_11">continue</samp>
    statements. The work you did in this chapter will be especially important when
    you add support for <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> loops,
    since a single <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> loop contains
    two distinct scopes.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你通过扩展编译器的几个阶段，实现了一种新的语句类型。你编写了一个更复杂的变量解析阶段，能够正确解析多个作用域中的变量，极大地扩展了你能够编译的程序集合。接下来，你将实现循环语句、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">break</samp> 语句和 <samp class="SANS_TheSansMonoCd_W5Regular_11">continue</samp>
    语句。本章的工作对于你添加对 <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> 循环的支持特别重要，因为一个
    <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> 循环包含了两个不同的作用域。
