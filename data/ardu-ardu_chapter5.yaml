- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">5</samp> <samp class="SANS_Dogma_OT_Bold_B_11">CONTROLLING
    LEDS WITH CHARLIEPLEXING</samp>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">5</samp> <samp class="SANS_Dogma_OT_Bold_B_11">使用CHARLIEPLEXING控制LED</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: It’s easy to control many LEDs with one Arduino board. However, you can also
    use the *Charlieplexing* method in the Arduino environment to control multiple
    LEDs one at a time without external display driver ICs. This is a great way to
    reduce part count (and expenses) in a project involving numeric or character displays.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一块Arduino板控制多个LED非常简单。然而，你也可以在Arduino环境中使用*Charlieplexing*方法一次控制多个LED，而无需外部显示驱动IC。这是减少项目中数字或字符显示所需组件数量（和费用）的一种好方法。
- en: 'In this chapter, you’ll learn to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习：
- en: Use Charlieplexing with an Arduino Uno or compatible board or an ATtiny85 microcontroller
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Arduino Uno或兼容板，或ATtiny85微控制器进行Charlieplexing
- en: Use Charlieplexing with 6 and 12 LEDs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用6个和12个LED进行Charlieplexing
- en: Simplify planning Charlieplexed circuits with the help of logic tables
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用逻辑表格简化Charlieplexing电路的规划
- en: You’ll also build a 30-LED matrix display for alphanumeric data that you can
    use for your own projects
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将构建一个30个LED的矩阵显示器，用于显示字母数字数据，可以用于你自己的项目
- en: <samp class="SANS_Futura_Std_Bold_B_11">Introduction to Charlieplexing</samp>
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">Charlieplexing简介</samp>
- en: The term *Charlieplexing* is named after Charlie Allen, who originally proposed
    the idea during his time at Maxim Integrated (now part of Analog Devices), which
    produced integrated circuits such as the popular MAX7219 LED display driver. The
    word is a portmanteau composed of “Charlie” and “multiplexing,” the latter being
    a method of controlling many LEDs with few I/O pins on a microcontroller.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*Charlieplexing*一词来源于Charlie Allen，他在Maxim Integrated（现为Analog Devices一部分）工作时最早提出了这一概念，该公司生产了如流行的MAX7219
    LED显示驱动器等集成电路。这个词是由“Charlie”和“multiplexing”（多路复用）两个词组合而成，后者是一种通过微控制器的少量I/O引脚控制多个LED的方式。'
- en: 'Charlieplexing is a type of multiplexing that relies on the *tri-state* capability
    of microcontroller I/O pins to control the required current to activate multiple
    LEDs in circuits. You can set each pin to be in one of three states:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Charlieplexing是一种多路复用方式，依赖于微控制器I/O引脚的*三态*能力来控制激活多个LED所需的电流。你可以将每个引脚设置为三种状态之一：
- en: '**High**    Current flows from an I/O pin, such as when using a <samp class="SANS_TheSansMonoCd_W5Regular_11">digitalWrite()</samp>
    function.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**高**    电流从I/O引脚流出，例如使用<samp class="SANS_TheSansMonoCd_W5Regular_11">digitalWrite()</samp>函数时。'
- en: '**Low**    Current does not flow from an I/O pin, when the pin can also sink
    (receive current).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**低**    当I/O引脚也可以接收电流时，电流不会从该引脚流出。'
- en: '**Input state (or high-Z)**    The pin is set to a digital input. In this state,
    little to no current will flow in either direction. This is also known as the
    *high impedance* or *high-Z* state.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入状态（或高阻抗）**    引脚被设置为数字输入。在此状态下，几乎没有电流流动。这也被称为*高阻抗*或*高-Z*状态。'
- en: You can set these I/O pins to different states to direct current through a circuit
    and create a controllable matrix of LEDs. Only one LED may be turned on at any
    given time, and all the LEDs used in one circuit must be the same specification—that
    is, they must all have the same forward voltage and operating current.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以设置这些I/O引脚为不同的状态，以便在电路中导电并创建一个可控的LED矩阵。每次只能点亮一个LED，并且在同一电路中使用的所有LED必须具有相同的规格——即，它们的正向电压和工作电流必须相同。
- en: To help understand Charlieplexing, let’s work through some small examples. First,
    consider the schematic in [Figure 5-1](chapter5.xhtml#fig5-1).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助理解Charlieplexing，让我们通过一些小例子来演示。首先，考虑[图5-1](chapter5.xhtml#fig5-1)中的电路图。
- en: '![THE SCHEMATIC OF TWO LEDS IN THE CHARLIEPLEXING ARRANGEMENT](../images/fig5-1.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![CHARLIEPLEXING排列中两个LED的电路图](../images/fig5-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-1: The schematic for
    two LEDs connected to the Arduino outputs</samp>'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-1：连接到Arduino输出的两个LED的电路图</samp>
- en: If pin D13 is HIGH and pin D12 is LOW, current flows from pin D13 through R[1],
    through D[2], through R[2], and into D12, meaning LED D[2] will turn on. If you
    reverse the outputs so pin D12 is HIGH and pin D13 is LOW, current flows from
    pin D12 through D[1], through R[1], and into D13, meaning LED D[1] will turn on.
    Current will always flow through both resistors, so the sum of their values should
    be suitable for running an LED from a digital output. With a 5 V output, values
    of 270 Ω through around 510 Ω would enable sufficient brightness.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 D13 引脚为 HIGH 且 D12 引脚为 LOW，电流将从 D13 引脚流经 R[1]，通过 D[2]，然后流经 R[2]，最后进入 D12，引起
    LED D[2] 点亮。如果你反转输出，使 D12 引脚为 HIGH 而 D13 引脚为 LOW，电流将从 D12 引脚流经 D[1]，通过 R[1]，并进入
    D13，引起 LED D[1] 点亮。电流始终会流经两个电阻器，因此它们的总值应适合通过数字输出驱动 LED。使用 5V 输出时，270 Ω 到约 510
    Ω 的电阻值将提供足够的亮度。
- en: To test Charlieplexing, build the circuit in [Figure 5-1](chapter5.xhtml#fig5-1);
    then run the sketch in [Listing 5-1](#LiT-5-1).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试 Charlieplexing，构建[图 5-1](chapter5.xhtml#fig5-1)中的电路；然后运行[清单 5-1](#LiT-5-1)中的草图。
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-1: Two-LED demonstration</samp>'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 5-1：两个 LED 的演示</samp>
- en: This sketch shows how to direct current to control one of two LEDs without a
    GND pin. It’s intended only as a basic introduction to the concept of Charlieplexing;
    there’s no real benefit to Charlieplexing two LEDs, as it doesn’t reduce the number
    of I/O pins used. However, the possibilities of Charlieplexing become obvious
    once you add another I/O pin to the circuit, as shown in the next project.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图展示了如何通过电流控制两个 LED 中的一个，而不需要 GND 引脚。它仅作为介绍 Charlieplexing 概念的基础示例；将两个 LED
    进行 Charlieplexing 并没有实际好处，因为它并没有减少所使用的 I/O 引脚数量。然而，一旦你在电路中增加另一个 I/O 引脚，Charlieplexing
    的潜力将变得非常明显，如下一个项目所示。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #15: Charlieplexing with Six
    LEDs</samp>'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #15：使用六个 LED 的 Charlieplexing</samp>'
- en: In this project, you’ll control six LEDs with only three digital output pins,
    demonstrating the benefits of Charlieplexing.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用仅三个数字输出引脚控制六个 LED，展示 Charlieplexing 的优势。
- en: 'You’ll need the following parts:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下部件：
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块 Arduino Uno 或兼容板和 USB 电缆
- en: Three 270 Ω, 0.25 W, 1 percent resistors
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三个270 Ω，0.25 W，1% 的电阻器
- en: Six LEDs
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 六个 LED
- en: Two solderless breadboards
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两块无焊面包板
- en: Male-to-male jumper wires
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公对公跳线
- en: Assemble the circuit as shown in [Figure 5-2](chapter5.xhtml#fig5-2).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图 5-2](chapter5.xhtml#fig5-2)所示组装电路。
- en: '![THE SCHEMATIC FOR PROJECT #15](../images/fig5-2.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #15 的电路图](../images/fig5-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-2: The schematic for
    Project #15</samp>'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-2：项目 #15 的电路图</samp>'
- en: For easy assembly, use two solderless breadboards side by side, as shown in
    [Figure 5-3](chapter5.xhtml#fig5-3).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了便于组装，使用两块并排的无焊面包板，如[图 5-3](chapter5.xhtml#fig5-3)所示。
- en: '![AN IMAGE OF PROJECT #15 ON A SOLDERLESS BREADBOARD, WITH THE UPPER RIGHT
    LIGHT IN A SET OF FOUR BEING THE ONLY ONE LIT UP](../images/fig5-3.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #15 在无焊面包板上的图像，右上角的四个 LED 中，只有一个点亮](../images/fig5-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-3: The assembled Project
    #15</samp>'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-3：已组装的项目 #15</samp>'
- en: Now enter and upload the following sketch to your Arduino. A moment after uploading
    the sketch, each LED from 1 through 6 should light in turn.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在输入并上传以下草图到你的 Arduino。上传草图后不久，每个 LED 从 1 到 6 将依次点亮。
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first few moments of operation may seem like magic if you’re accustomed
    to using one LED per digital output pin, but you can achieve these effects simply
    by carefully directing current through the appropriate pins and resistors.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你习惯于为每个数字输出引脚使用一个 LED，操作的前几秒钟可能看起来像是魔术，但你可以通过小心地引导电流通过合适的引脚和电阻来实现这些效果。
- en: 'Consider the first LED in the schematic, D[1], controlled by the function <samp
    class="SANS_TheSansMonoCd_W5Regular_11">LED1()</samp> ❷. Trace the path through
    the schematic as follows: current needs to flow from pin D12 through R[2], through
    the LED itself, then through R[1], and into pin D13\. You don’t want current to
    flow through D[4], so you set pin D11 to an input, blocking current flow. Although
    D[4] and D[5] are in the current’s path, they will not activate, as the resistor
    and their forward operating voltage reduce the current’s voltage so greatly.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以原理图中的第一个LED，D[1]为例，它由函数<samp class="SANS_TheSansMonoCd_W5Regular_11">LED1()</samp>
    ❷控制。按照原理图的路径追踪：电流需要从D12引脚流经R[2]、LED本身，再流过R[1]，最后进入D13引脚。你不希望电流流经D[4]，因此将D11引脚设置为输入，阻止电流流动。虽然D[4]和D[5]在电流路径中，但它们不会被激活，因为电阻和它们的正向工作电压极大地降低了电流的电压。
- en: Instead of using lots of <samp class="SANS_TheSansMonoCd_W5Regular_11">pinMode()</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">digitalWrite()</samp> functions,
    this sketch uses port manipulation (covered in [Chapter 2](chapter2.xhtml)) to
    control the digital pins. This greatly reduces the amount of required code, which
    also frees up more memory for the rest of your project.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这段草图使用端口操作（详见[第2章](chapter2.xhtml)）来控制数字引脚，而不是使用大量的<samp class="SANS_TheSansMonoCd_W5Regular_11">pinMode()</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">digitalWrite()</samp>函数。这大大减少了所需的代码量，同时也为项目的其余部分释放了更多内存。
- en: To turn on D[1] in the code, the sketch turns on LED D[1] and sets pin D13 to
    HIGH and D12 to LOW using port manipulation. The sketch first activates PORTB
    pin types D13 to D8 ❸, setting D13 to output, setting D12 to output, setting D11
    to input, and leaving the unused pins at 0\. It then activates the output pins
    ❹, setting D13 to LOW, setting D12 to HIGH, and leaving input as 0\. This turns
    on LED D[1].
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要在代码中开启D[1]，该草图通过端口操作开启LED D[1]，并将D13引脚设置为HIGH，D12引脚设置为LOW。草图首先激活PORTB引脚类型D13到D8
    ❸，将D13设置为输出，将D12设置为输出，将D11设置为输入，未使用的引脚保持为0。接着，草图激活输出引脚 ❹，将D13设置为LOW，将D12设置为HIGH，输入保持为0。这就点亮了LED
    D[1]。
- en: For another example in the project, consider LED D[5]. To turn it on, current
    must flow from pin D11 through R[3], D[4], and R[1], and then into D13\. The sketch
    sets pin D11 to HIGH, pin D13 to LOW, and pin D12 as an input ❺ to stop current
    flowing in that direction.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目中的另一个例子中，考虑LED D[5]。要点亮它，电流必须从D11引脚流经R[3]、D[4]和R[1]，然后进入D13引脚。草图将D11引脚设置为HIGH，将D13引脚设置为LOW，将D12引脚设置为输入
    ❺，以阻止电流向该方向流动。
- en: The sketch sets the flow of current in this way for each LED in turn, within
    a function for each LED from ❶ onward. Unlike using conventional <samp class="SANS_TheSansMonoCd_W5Regular_11">digitalWrite()</samp>
    functions where you need to first use <samp class="SANS_TheSansMonoCd_W5Regular_11">pinMode()</samp>
    functions to configure a pin as an output or input, nothing is required in <samp
    class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp>, so the code then
    lights each LED in turn from ❻.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 草图为每个LED依次设置电流流动方式，使用从❶开始的每个LED的函数。与使用传统的<samp class="SANS_TheSansMonoCd_W5Regular_11">digitalWrite()</samp>函数不同，后者需要先使用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">pinMode()</samp>函数将引脚配置为输出或输入，在<samp class="SANS_TheSansMonoCd_W5Regular_11">void
    setup()</samp>中无需任何操作，因此代码可以依次点亮每个LED，从❻开始。
- en: 'You can adjust the amount of time between each LED being switched on by changing
    the defined value of <samp class="SANS_TheSansMonoCd_W5Regular_11">d</samp> ❶.
    Although the sketch doesn’t use this option, you can also turn off all the LEDs
    at once at any point in the code with the following line of code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过更改定义的值<samp class="SANS_TheSansMonoCd_W5Regular_11">d</samp> ❶，来调整每个LED开启之间的时间间隔。尽管草图没有使用这个选项，你也可以在代码的任何位置一次性关闭所有LED，方法是使用以下代码行：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Keep this project’s hardware together to use in the following project. In the
    next section, I’ll show you a more systematic way of determining which pins to
    set as HIGH or LOW.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 将该项目的硬件保留，以便用于下一个项目。在下一部分，我将向你展示一种更系统化的方式，来确定哪些引脚需要设置为HIGH或LOW。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Larger Charlieplexing Displays</samp>
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">更大的Charlieplexing显示器</samp>
- en: 'When building larger Charlieplexing circuits, creating a logic table with the
    LEDs and their required pin types and outputs can help you plan how to write your
    code. This makes it easier to create the required <samp class="SANS_TheSansMonoCd_W5Regular_11">DDRB</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">PORTB</samp> functions to control
    the LEDs. To do this, trace the current path you require for each LED and then
    determine the pin status for each LED. For example, [Table 5-1](chapter5.xhtml#tab5-1)
    is the logic table for Project #15, where L stands for LOW, H for HIGH, and Z
    for input.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '在构建更大的 Charlieplexing 电路时，创建一个包含 LED 及其所需引脚类型和输出的逻辑表，可以帮助你规划如何编写代码。这使得创建控制
    LED 所需的 <samp class="SANS_TheSansMonoCd_W5Regular_11">DDRB</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">PORTB</samp>
    函数变得更加容易。为此，追踪每个 LED 所需的电流路径，然后确定每个 LED 的引脚状态。例如，[表 5-1](chapter5.xhtml#tab5-1)是项目
    #15 的逻辑表，其中 L 代表 LOW，H 代表 HIGH，Z 代表输入。'
- en: '<samp class="SANS_Futura_Std_Heavy_B_11">Table 5-1:</samp> <samp class="SANS_Futura_Std_Book_11">Logic
    Table for Project #15</samp>'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_11">表 5-1:</samp> <samp class="SANS_Futura_Std_Book_11">项目
    #15 的逻辑表</samp>'
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">LED#</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Pin
    D13</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Pin D12</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Pin
    D11</samp> |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">LED#</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">引脚
    D13</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">引脚 D12</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">引脚
    D11</samp> |'
- en: '| --- | --- | --- | --- |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| <samp class="SANS_Futura_Std_Book_11">1</samp> | <samp class="SANS_Futura_Std_Book_11">L</samp>
    | <samp class="SANS_Futura_Std_Book_11">H</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">1</samp> | <samp class="SANS_Futura_Std_Book_11">L</samp>
    | <samp class="SANS_Futura_Std_Book_11">H</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">2</samp> | <samp class="SANS_Futura_Std_Book_11">H</samp>
    | <samp class="SANS_Futura_Std_Book_11">L</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">2</samp> | <samp class="SANS_Futura_Std_Book_11">H</samp>
    | <samp class="SANS_Futura_Std_Book_11">L</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">3</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">L</samp> | <samp class="SANS_Futura_Std_Book_11">H</samp>
    |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">3</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">L</samp> | <samp class="SANS_Futura_Std_Book_11">H</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">H</samp> | <samp class="SANS_Futura_Std_Book_11">L</samp>
    |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">H</samp> | <samp class="SANS_Futura_Std_Book_11">L</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">5</samp> | <samp class="SANS_Futura_Std_Book_11">L</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> | <samp class="SANS_Futura_Std_Book_11">H</samp>
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">5</samp> | <samp class="SANS_Futura_Std_Book_11">L</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> | <samp class="SANS_Futura_Std_Book_11">H</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">H</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> | <samp class="SANS_Futura_Std_Book_11">L</samp>
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">H</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> | <samp class="SANS_Futura_Std_Book_11">L</samp>
    |'
- en: 'Creating such a table simplifies the process of determining the port manipulation
    commands, as you can just match each letter with its respective ones, zeros, and
    inputs. To make your own table, trace the current flow in the schematic required
    for each LED and then note the status required for each I/O pin. For example,
    to activate LED 4 in Project #15, current must flow out from pin D12 (so it’s
    HIGH) through R[2], through LED D[4], then through R[3], and back to D11 (so it’s
    LOW). You don’t want current to flow in or out of D13, so it will be Z. You can
    then use this HIGH, LOW, and Z information to create the required <samp class="SANS_TheSansMonoCd_W5Regular_11">DDR</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">PORTB</samp> functions in your
    code.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '创建这样的表格可以简化确定端口操作命令的过程，因为你可以将每个字母与其相应的 1、0 和输入对应起来。要制作你自己的表格，首先追踪每个 LED 所需的电流流向，然后标注每个
    I/O 引脚的状态。例如，要在项目 #15 中激活 LED 4，电流必须从引脚 D12（因此它是 HIGH）流出，经过 R[2]，通过 LED D[4]，然后经过
    R[3]，返回 D11（因此它是 LOW）。你不希望电流流入或流出 D13，因此它会是 Z。你可以使用这些 HIGH、LOW 和 Z 信息来创建代码中所需的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">DDR</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">PORTB</samp>
    函数。'
- en: Once you have more than two I/O pins in use, you can connect a pair of LEDs
    to each of the other I/O lines. To determine how many LEDs you can control with
    any number of available I/O pins on your Arduino, use the formula *L* = *n*² −
    *n*, where *L* is the number of LEDs and *n* is the number of I/O pins. For example,
    if you have 4 pins, you can use 12 LEDs (4² − 4 = 12).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你使用的I/O引脚超过两个，你就可以将一对LED连接到每一条I/O线上。要确定你可以用Arduino上的任意数量的I/O引脚控制多少个LED，可以使用公式
    *L* = *n*² − *n*，其中 *L* 是LED的数量，*n* 是I/O引脚的数量。例如，如果你有4个引脚，你可以使用12个LED（4² − 4 =
    12）。
- en: Let’s try this in the next project.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一个项目中尝试这个。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #16: Charlieplexing with 12
    LEDs</samp>'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_21">项目#16：使用12个LED的Charlieplexing</samp>
- en: 'In this project, you’ll practice using Charlieplexing to control an even larger
    LED display with only four digital output pins. You’ll need the following parts:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将练习使用Charlieplexing技术，仅通过四个数字输出引脚控制一个更大的LED显示器。你将需要以下零件：
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块Arduino Uno或兼容的开发板和USB电缆
- en: Four 270 Ω, 0.25 W, 1 percent resistors
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四个270 Ω，0.25 W，1% 的电阻器
- en: 12 LEDs
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12个LED
- en: Two solderless breadboards
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两块无焊接面包板
- en: Male-to-male jumper wires
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公对公跳线
- en: Assemble the circuit as shown in [Figure 5-4](chapter5.xhtml#fig5-4).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图5-4](chapter5.xhtml#fig5-4)中的示意图组装电路。
- en: '![THE SCHEMATIC FOR PROJECT #16](../images/fig5-4.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![项目#16的电路图](../images/fig5-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-4: The schematic for
    Project #16</samp>'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图5-4：项目#16的电路图</samp>
- en: 'You can build this project by expanding on the hardware setup from Project
    #15, using two solderless breadboards side by side, as shown in [Figure 5-5](chapter5.xhtml#fig5-5).'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过扩展项目#15的硬件设置来构建这个项目，使用两块并排放置的无焊接面包板，如[图5-5](chapter5.xhtml#fig5-5)所示。
- en: '![AN IMAGE OF THE ASSEMBLED PROJECT #15](../images/fig5-5.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![已组装的项目#15图像](../images/fig5-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-5: The assembled Project
    #16</samp>'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图5-5：已组装的项目#16</samp>
- en: '[Table 5-2](chapter5.xhtml#tab5-2) is Project #16’s logic table. You can compare
    this with the port manipulations in the subsequent sketch to increase your familiarity
    with controlling the LEDs. For practice, trace the current for various LEDs through
    the schematic and compare with the table.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[表5-2](chapter5.xhtml#tab5-2)是项目#16的逻辑表。你可以将此与后续草图中的端口操作进行比较，以加深你对控制LED的理解。为了练习，可以沿着电路图追踪不同LED的电流，并与表格进行对比。'
- en: '<samp class="SANS_Futura_Std_Heavy_B_11">Table 5-2:</samp> <samp class="SANS_Futura_Std_Book_11">Logic
    Table for Project #16</samp>'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表5-2：</samp> <samp class="SANS_Futura_Std_Book_11">项目#16的逻辑表</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">LED#</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Pin
    D13</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Pin D12</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Pin
    D11</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Pin D10</samp> |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">LED#</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">引脚D13</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">引脚D12</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">引脚D11</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">引脚D10</samp> |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| <samp class="SANS_Futura_Std_Book_11">1</samp> | <samp class="SANS_Futura_Std_Book_11">L</samp>
    | <samp class="SANS_Futura_Std_Book_11">H</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">1</samp> | <samp class="SANS_Futura_Std_Book_11">L</samp>
    | <samp class="SANS_Futura_Std_Book_11">H</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">2</samp> | <samp class="SANS_Futura_Std_Book_11">H</samp>
    | <samp class="SANS_Futura_Std_Book_11">L</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">2</samp> | <samp class="SANS_Futura_Std_Book_11">H</samp>
    | <samp class="SANS_Futura_Std_Book_11">L</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">3</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">L</samp> | <samp class="SANS_Futura_Std_Book_11">H</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">3</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">L</samp> | <samp class="SANS_Futura_Std_Book_11">H</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">H</samp> | <samp class="SANS_Futura_Std_Book_11">L</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">H</samp> | <samp class="SANS_Futura_Std_Book_11">L</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">5</samp> | <samp class="SANS_Futura_Std_Book_11">L</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> | <samp class="SANS_Futura_Std_Book_11">H</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">5</samp> | <samp class="SANS_Futura_Std_Book_11">L</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> | <samp class="SANS_Futura_Std_Book_11">H</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">H</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> | <samp class="SANS_Futura_Std_Book_11">L</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">H</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> | <samp class="SANS_Futura_Std_Book_11">L</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">7</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> | <samp class="SANS_Futura_Std_Book_11">L</samp>
    | <samp class="SANS_Futura_Std_Book_11">H</samp> |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">7</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> | <samp class="SANS_Futura_Std_Book_11">L</samp>
    | <samp class="SANS_Futura_Std_Book_11">H</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> | <samp class="SANS_Futura_Std_Book_11">H</samp>
    | <samp class="SANS_Futura_Std_Book_11">L</samp> |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> | <samp class="SANS_Futura_Std_Book_11">H</samp>
    | <samp class="SANS_Futura_Std_Book_11">L</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">9</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">L</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">H</samp> |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">9</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">L</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">H</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">H</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">L</samp> |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">H</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">L</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">11</samp> | <samp class="SANS_Futura_Std_Book_11">L</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">H</samp> |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">11</samp> | <samp class="SANS_Futura_Std_Book_11">L</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">H</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">12</samp> | <samp class="SANS_Futura_Std_Book_11">H</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">L</samp> |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">12</samp> | <samp class="SANS_Futura_Std_Book_11">H</samp>
    | <samp class="SANS_Futura_Std_Book_11">Z</samp> | <samp class="SANS_Futura_Std_Book_11">Z</samp>
    | <samp class="SANS_Futura_Std_Book_11">L</samp> |'
- en: 'Enter and upload the Project #16 sketch to your Arduino. Once again, a moment
    or two after uploading the sketch, each LED should illuminate in turn.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 将项目#16的草图上传到你的Arduino板。上传草图后一两秒钟，每个LED应该依次亮起。
- en: 'Let’s see how this works:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个是如何工作的：
- en: '[PRE3]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As with Project #15, each LED is activated by its own function from ❷ onward.
    After <samp class="SANS_TheSansMonoCd_W5Regular_11">void LED1()</samp>, I’ve compressed
    each function into one line of code to save space. Again, port manipulation greatly
    improves the sketch’s efficiency.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 与项目#15一样，每个LED由从❷开始的单独函数激活。在<samp class="SANS_TheSansMonoCd_W5Regular_11">void
    LED1()</samp>之后，为了节省空间，我将每个函数压缩成一行代码。再次强调，端口操作大大提高了草图的效率。
- en: You can change the delay between each LED’s turning on and off ❶. The sketch
    includes a function to turn off all the LEDs if required for other future projects
    ❸. Once again, to save space, I’ve placed multiple functions on one line ❹, where
    each LED is turned on after a preset delay.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以改变每个LED开关之间的延迟时间❶。该草图包含了一个函数，可以在需要时关闭所有LED，以便用于其他未来的项目❸。为了节省空间，我把多个函数放在了一行上❹，每个LED在预设的延迟时间后被点亮。
- en: 'The placement of the LEDs in this project may seem random, but you now have
    the skills to create more useful, complicated displays with Charlieplexing, which
    you’ll do in Project #18\. First, however, I’ll show you how to use Charlieplexing
    with an ATtiny85.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '该项目中 LED 的布局看起来可能是随机的，但你现在已经掌握了使用 Charlieplexing 创建更有用、更复杂显示的技能，这将在项目 #18 中进行。不过，首先，我将向你展示如何使用
    ATtiny85 进行 Charlieplexing。'
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #17: Charlieplexing with the
    ATtiny85</samp>'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #17：使用 ATtiny85 进行 Charlieplexing</samp>'
- en: Using Charlieplexing with an ATtiny85 microcontroller gives you a cheaper and
    smaller-circuit solution for controlling lots of LEDs without external devices.
    This project demonstrates how to control 12 LEDs using the ATtiny85.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ATtiny85 微控制器进行 Charlieplexing 可以为你提供一个更便宜、更小巧的电路方案，用于控制大量的 LED 而无需外部设备。这个项目展示了如何使用
    ATtiny85 控制 12 个 LED。
- en: 'You’ll need the assembled LED circuit from Project #16, as well as either the
    ATtiny85 programming shield from Project #13 in [Chapter 3](chapter3.xhtml) or
    the following parts:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '你将需要项目 #16 中的 LED 电路，以及项目 #13 在[第 3 章](chapter3.xhtml)中的 ATtiny85 编程扩展板，或者以下部件：'
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块 Arduino Uno 或兼容板以及 USB 电缆
- en: An ATtiny85 microcontroller
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 ATtiny85 微控制器
- en: A 10 µF electrolytic capacitor
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 10 微法的电解电容
- en: Two solderless breadboards
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两块无焊面包板
- en: Male-to-male jumper wires
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公对公跳线
- en: 'First, assemble your ATtiny85 programming setup using the instructions from
    [Chapter 3](chapter3.xhtml) (using Project #13 if you built it), using the programming
    shield or the parts listed for this project, and then upload the code. Next, connect
    your ATtiny85 to the LED circuit, as shown in [Figure 5-6](chapter5.xhtml#fig5-6).
    The LED circuit has different pin connections from those in Project #16 but is
    otherwise the same.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '首先，按照[第 3 章](chapter3.xhtml)中的说明（如果你完成了项目 #13）组装 ATtiny85 编程设置，使用编程扩展板或为该项目列出的部件，然后上传代码。接着，将
    ATtiny85 连接到 LED 电路，如[图 5-6](chapter5.xhtml#fig5-6)所示。LED 电路与项目 #16 中的引脚连接不同，但其他方面是相同的。'
- en: '![THE SCHEMATIC FOR PROJECT #17](../images/fig5-6.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #17 的电路图](../images/fig5-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-6: The schematic for
    Project #17</samp>'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-6：项目 #17 的电路图</samp>'
- en: 'Next, upload the sketch:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，上传代码：
- en: '[PRE4]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once uploaded, this sketch should operate in the same manner as Project #16,
    with each of 12 LEDs lighting up in turn. However, the code sets up the port manipulation
    differently. Since you’re using <samp class="SANS_TheSansMonoCd_W5Regular_11">PORTB</samp>
    pins 3, 2, 1, and 0 (digital D3 to D0) on the ATtiny85, your <samp class="SANS_TheSansMonoCd_W5Regular_11">DDRB</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">PORTB</samp> functions need
    to address bits 0 to 3.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '上传后，该代码应该与项目 #16 的操作方式相同，12 个 LED 将依次亮起。不过，代码对端口的操作方式有所不同。由于你使用的是 ATtiny85
    的 <samp class="SANS_TheSansMonoCd_W5Regular_11">PORTB</samp> 的 3、2、1 和 0 引脚（数字
    D3 至 D0），因此你的 <samp class="SANS_TheSansMonoCd_W5Regular_11">DDRB</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">PORTB</samp> 函数需要操作位 0 至 3。'
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #18: Building a 30-LED Matrix
    Display</samp>'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #18：构建一个 30 LED 矩阵显示器</samp>'
- en: This project takes Charlieplexing to the next level with a larger, 30-LED circuit
    you can use to display digits or characters of your own design.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目将 Charlieplexing 技术提升到下一个层次，使用一个更大的 30 LED 电路，你可以用它来显示数字或你自己设计的字符。
- en: 'It’s theoretically possible but extremely difficult to build the circuit for
    this project on a pair of solderless breadboards, so I highly recommend downloading
    the PCB files for this project and having your own PCB manufactured. You’ll need
    the following parts:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 从理论上讲，虽然可能实现，但在两块无焊面包板上搭建这个项目的电路极其困难，因此我强烈建议你下载该项目的 PCB 文件并自行制作 PCB。你将需要以下部件：
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块 Arduino Uno 或兼容板以及 USB 电缆
- en: Six 270 Ω, 0.25 W, 1 percent resistors
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 六个 270 Ω，0.25 W，1% 的电阻
- en: Thirty 5 mm LEDs
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三十个 5 毫米 LED
- en: 'Two solderless breadboards or Project #18 PCB'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '两块无焊面包板或项目 #18 的 PCB'
- en: 1 × 40 2.54 mm inline header pins (if using PCB)
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 个 40 针 2.54 毫米排针（如果使用 PCB）
- en: Various jumper wires
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种跳线
- en: Assemble the circuit as shown in [Figure 5-7](chapter5.xhtml#fig5-7).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图 5-7](chapter5.xhtml#fig5-7)所示组装电路。
- en: '![THE SCHEMATIC FOR PROJECT #18](../images/fig5-7.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #18 的电路图](../images/fig5-7.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-7: The schematic for
    Project #18</samp>'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-7：项目 #18 的电路图</samp>'
- en: If you ordered the PCB, assembly is simple. You can see from the layout on the
    board that all the LEDs have the anode pin pointing toward the top and the cathodes
    (the flat side) toward the bottom, as shown in [Figure 5-8](chapter5.xhtml#fig5-8).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经订购了 PCB，组装起来很简单。从板上的布局可以看出，所有 LED 的正极引脚指向顶部，负极（平面的一侧）指向底部，如 [图 5-8](chapter5.xhtml#fig5-8)
    所示。
- en: '![AN UNPOPULATED PCB FOR PROJECT #18](../images/fig5-8.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #18 的未安装 PCB](../images/fig5-8.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-8: The PCB for Project
    #18</samp>'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-8：项目 #18 的 PCB</samp>'
- en: Start with the resistors first, then the LEDs, followed by the inline header
    pins. Place the pins so they emerge from the rear, and then prop the PCB up with
    jumper wires to the Arduino, or just place the PCB directly into the Arduino itself,
    as shown in [Figure 5-9](chapter5.xhtml#fig5-9). The pins on the PCB are labeled
    with matching Arduino pin numbers on the rear of the PCB.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 先安装电阻器，再安装 LED，最后安装内联插头引脚。将引脚放置在后面，确保它们从背面突出出来，然后通过跳线将 PCB 支撑连接到 Arduino，或者直接将
    PCB 放入 Arduino 中，如 [图 5-9](chapter5.xhtml#fig5-9) 所示。PCB 上的引脚标有与 Arduino 引脚号匹配的标签。
- en: '![A PHOTO OF THE PROJECT #18 PCB COMPLETED AND INSERTED INTO THE ARDUINO UNO](../images/fig5-9.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #18 完成的 PCB 和已插入的 ARDUINO UNO](../images/fig5-9.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-9: The completed Project
    #18 circuit</samp>'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-9：完成的项目 #18 电路</samp>'
- en: '[Table 5-3](chapter5.xhtml#tab5-3) is the logic table for Project #18, which
    you can compare with the port manipulations in the sketches for [Listing 5-2](#LiT-5-2)
    and that for Project #18 listed shortly afterward or the schematic in [Figure
    5-7](chapter5.xhtml#fig5-7). Again, for practice, trace the current for various
    LEDs through the schematic and compare with the table to increase your familiarity
    with controlling the LEDs.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 5-3](chapter5.xhtml#tab5-3) 是项目 #18 的逻辑表，你可以将其与 [清单 5-2](#LiT-5-2) 中的端口操作进行比较，或者与稍后列出的项目
    #18 的草图或 [图 5-7](chapter5.xhtml#fig5-7) 中的原理图进行比较。同样，为了练习，可以通过原理图追踪不同 LED 的电流，并与表格对比，以增加你对控制
    LED 的熟悉度。'
- en: '![](../images/table5-3.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/table5-3.png)'
- en: Before moving on, please make sure your LEDs are working correctly by entering
    and uploading the sketch from [Listing 5-2](#LiT-5-2), which should make each
    LED turn on and off in succession.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请确保你的 LED 正常工作，通过输入并上传 [清单 5-2](#LiT-5-2) 中的草图，应该能让每个 LED 依次点亮和熄灭。
- en: '[PRE5]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-2: Testing the 30-LED
    matrix display</samp>'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 5-2：测试 30 个 LED 矩阵显示</samp>
- en: The sketch sets the delay between each LED lighting up and turning off by defining
    <samp class="SANS_TheSansMonoCd_W5Regular_11">d</samp> ❶. From ❷ onward, functions
    set the GPIO pin port to control each required pin to activate the LEDs in turn.
    The function ❸ turns all the LEDs off. After that, the main loop endlessly activates
    each LED in turn. I’ve minimized the code spacing for display efficiency.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 草图通过定义 <samp class="SANS_TheSansMonoCd_W5Regular_11">d</samp> ❶ 来设置每个 LED 点亮和熄灭之间的延迟。从
    ❷ 开始，函数设置 GPIO 引脚端口，以依次控制每个所需的引脚激活 LED。函数 ❸ 将所有 LED 关闭。之后，主循环会无限次地依次激活每个 LED。我已将代码的空格最小化，以提高显示效率。
- en: Now that you’ve tested the LEDs, you’re ready to enter and upload the project
    sketch itself. (Rather than typing the code yourself, I recommend you download
    it from the book’s web page, [*https://<wbr>nostarch<wbr>.com<wbr>/arduino<wbr>-arduinians*](https://nostarch.com/arduino-arduinians),
    if you haven’t already done so.) The digits 0 through 9 should appear on the LED
    display in succession and then start again at 0.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经测试了 LED，接下来可以进入并上传项目的草图了。（如果你还没有，建议从书籍网页 [*https://<wbr>nostarch<wbr>.com<wbr>/arduino<wbr>-arduinians*](https://nostarch.com/arduino-arduinians)
    下载代码，而不是自己输入。）数字 0 到 9 应该依次在 LED 显示屏上显示，然后从 0 开始重新显示。
- en: '[PRE6]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The two-dimensional array ❶ contains 10 arrays, one for each digit from 0 through
    9\. Each digit array has 30 elements, to match the 30 LEDs on the display board.
    The display board’s LEDs are arranged from 1 at the top left to 30 at the bottom
    right. In the arrays, each <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    represents the LEDs that need to turn on in quick succession for each number to
    be displayed.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 二维数组 ❶ 包含 10 个数组，分别对应数字 0 到 9。每个数字数组有 30 个元素，与显示板上的 30 个 LED 对应。显示板上的 LED 从左上角的
    1 到右下角的 30 排列。在数组中，每个 <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> 表示需要快速依次点亮的
    LED，以显示每个数字。
- en: The custom <samp class="SANS_TheSansMonoCd_W5Regular_11">displayDigits()</samp>
    function ❷ accepts the digit you want to display and the number of times the function
    will display the LEDs required in turn to show the digit. The greater the number
    in the second parameter, the longer the digit will appear on the display. The
    <samp class="SANS_TheSansMonoCd_W5Regular_11">displayDigits()</samp> function
    uses another custom function, <samp class="SANS_TheSansMonoCd_W5Regular_11">turnOnLED()</samp>
    ❸, to turn on the required LED. The <samp class="SANS_TheSansMonoCd_W5Regular_11">turnOnLED()</samp>
    function, in turn, uses a <samp class="SANS_TheSansMonoCd_W5Regular_11">switch…case</samp>
    ❻ to call the appropriate function from the list ❺ and turn on each individual
    LED.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义的 <samp class="SANS_TheSansMonoCd_W5Regular_11">displayDigits()</samp> 函数
    ❷ 接受你要显示的数字以及该函数显示所需 LED 的次数。第二个参数中的数字越大，数字在显示器上的显示时间就越长。<samp class="SANS_TheSansMonoCd_W5Regular_11">displayDigits()</samp>
    函数使用另一个自定义函数 <samp class="SANS_TheSansMonoCd_W5Regular_11">turnOnLED()</samp>
    ❸ 来点亮所需的 LED。<samp class="SANS_TheSansMonoCd_W5Regular_11">turnOnLED()</samp>
    函数又使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">switch…case</samp> ❻ 来调用列表
    ❺ 中的适当函数，并点亮每个单独的 LED。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">delay()</samp> function ❹
    within <samp class="SANS_TheSansMonoCd_W5Regular_11">displayDigits()</samp> is
    set to keep each LED on for 1 millisecond before the next is illuminated. Because
    the LEDs flip on and off so quickly, the human eye perceives all the LEDs required
    for a given digit as on at the same time, as shown in [Figure 5-10](chapter5.xhtml#fig5-10).
    You can alter the length of the delay to tailor the display to your own preferences.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">delay()</samp> 函数 ❹ 在 <samp class="SANS_TheSansMonoCd_W5Regular_11">displayDigits()</samp>
    内被设置为使每个 LED 在下一个点亮之前保持点亮 1 毫秒。由于 LED 亮灭非常快，人眼将所需的所有 LED 视为在同一时间亮起，如[图 5-10](chapter5.xhtml#fig5-10)所示。你可以改变延迟的长度，以调整显示效果以适应个人喜好。
- en: Finally, in <samp class="SANS_TheSansMonoCd_W5Regular_11">void loop()</samp>,
    the digits 0 through 9 are displayed in order ❼, with a short delay in between.
    Each digit is displayed using 50 refreshes of the digit ❽.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 <samp class="SANS_TheSansMonoCd_W5Regular_11">void loop()</samp> 中，数字 0
    到 9 会依次显示 ❼，并在每个数字之间有短暂的延迟。每个数字通过 50 次刷新来显示 ❽。
- en: '![EXAMPLE DISPLAYS WITH PROJECT #18, SHOWING THE NUMERALS 0, 4, AND 7](../images/fig5-10.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #18 的示例显示，显示数字 0、4 和 7](../images/fig5-10.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-10: Examples of Project
    #18</samp>'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-10：项目 #18 的示例</samp>'
- en: This sketch displays digits using the Monomin font, as shown in [Figure 5-11](chapter5.xhtml#fig5-11).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图使用 Monomin 字体显示数字，如[图 5-11](chapter5.xhtml#fig5-11)所示。
- en: '![A DEMONSTRATION OF MONOMIN 6X5 PIXEL FONT DIGITS, 0 THROUGH 9](../images/fig5-11.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![展示 Monomin 6X5 像素字体数字，从 0 到 9](../images/fig5-11.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-11: The Monomin 6×5
    font digits</samp>'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-11：Monomin 6×5 字体数字</samp>
- en: You can find more information about this font by visiting [*https://<wbr>fontstruct<wbr>.com*](https://fontstruct.com)
    and searching for the Monomin 6 × 5 font.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过访问 [*https://<wbr>fontstruct<wbr>.com*](https://fontstruct.com) 查找更多关于此字体的信息，并搜索
    Monomin 6×5 字体。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Making Custom Character Displays</samp>
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">制作自定义字符显示</samp>
- en: 'It’s possible to create display types beyond just the numbers shown in Project
    #18\. To make your own characters, first draw how you would like them to appear
    using some grid paper or a spreadsheet. For example, to create a boundary rectangle,
    draw the diagram shown in [Figure 5-12](chapter5.xhtml#fig5-12).'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '除了项目 #18 中显示的数字外，你还可以创建其他显示类型。要创建你自己的字符，首先使用一些方格纸或电子表格绘制你想要的显示样式。例如，要创建一个边界矩形，绘制[图
    5-12](chapter5.xhtml#fig5-12)所示的图示。'
- en: '![SPREADSHEET CELLS SHOWING A 5X6 RECTANGLE OF X’S](../images/fig5-12.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![电子表格单元格显示一个 5X6 的 X 矩形](../images/fig5-12.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-12: Planning the character
    to display</samp>'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-12：规划要显示的字符</samp>
- en: 'The top-left X represents LED 1, and the bottom-right X represents LED 30\.
    You then create your own array that represents the status of each LED. For this
    example, the array would look like this:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 左上角的 X 代表 LED 1，右下角的 X 代表 LED 30。然后，你创建自己的数组，表示每个 LED 的状态。对于这个示例，数组看起来会是这样的：
- en: '[PRE7]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can then add or swap this array into the sketch in the same way as for
    the other digits in Project #18 and use the <samp class="SANS_TheSansMonoCd_W5Regular_11">displayDigits()</samp>
    function to show your custom character on the display, as demonstrated in [Figure
    5-13](chapter5.xhtml#fig5-13).'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '然后，你可以像在项目 #18 中对待其他数字一样，将这个数组添加或替换到草图中，并使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">displayDigits()</samp>
    函数在显示器上显示自定义字符，如 [图 5-13](chapter5.xhtml#fig5-13) 所示。'
- en: '![THE CUSTOM CHARACTER SHOWN ON THE DISPLAY BOARD](../images/fig5-13.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![显示板上显示的自定义字符](../images/fig5-13.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-13: The custom character</samp>'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-13：自定义字符</samp>
- en: When designing your own custom characters, it can help to use a spreadsheet
    or graph paper to plan the layout of the LEDs you’d like to turn on and off.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计你自己的自定义字符时，使用电子表格或图纸来规划你想要开启和关闭的 LED 布局会有所帮助。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">继续</samp>
- en: With Charlieplexing in your toolbox, you can now control multiple LEDs with
    minimal I/O pins and without using external ICs. You learned how to control 2,
    6, 12, or 30 LEDs with a minimum of digital output pins, as well as how to use
    Charlieplexing with the compact ATtiny microcontrollers.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Charlieplexing 技术，你现在可以用最少的 I/O 引脚控制多个 LED，而无需使用外部集成电路。你已经学会了如何通过最少的数字输出引脚控制
    2、6、12 或 30 个 LED，并且了解了如何使用 Charlieplexing 控制紧凑型 ATtiny 微控制器。
- en: In the next chapter, you’ll learn to give your Arduino the power to turn itself
    off.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将学习如何使你的 Arduino 能够自动关闭电源。
