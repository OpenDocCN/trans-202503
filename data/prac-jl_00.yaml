- en: '**INTRODUCTION**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**介绍**'
- en: '*I often feel that the American programmer would profit more from learning,
    say, Latin than from learning yet another programming language.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*我常常觉得美国的程序员如果学习拉丁语，比学习另一个编程语言要更有益。*'
- en: —Edsger Dijkstra
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: —埃兹杰·迪克斯特拉
- en: '![Image](../images/common.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: 'Julia is a fairly new programming language. It emerged into the public sphere
    in 2012 after two and a half years of research by four computer scientists at
    MIT. Julia’s creators explained why they needed to create a new language: they
    were “greedy.”'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 是一种相对较新的编程语言。它在 2012 年进入公众视野，之前 MIT 的四位计算机科学家研究了两年半时间。Julia 的创造者解释了他们为何需要创建一种新语言：他们“贪心”。
- en: There were already languages that were fast, such as C and Fortran. They were
    well suited to writing programs that ran on giant supercomputers to simulate the
    weather or design airplanes. But their syntax was not the friendliest; programs
    in these languages demanded a certain amount of ceremony. And they didn’t provide
    an interactive experience; one could not improvise and explore at the terminal,
    but had to submit to an edit-compile-run discipline.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 已经有一些语言很快，比如 C 和 Fortran。这些语言非常适合用于编写在巨型超级计算机上运行的程序，用于模拟天气或设计飞机。但它们的语法并不最友好；这些语言中的程序要求一定的仪式感。并且它们并没有提供交互式体验；在终端中无法即兴创作和探索，必须遵循编辑-编译-运行的步骤。
- en: Other languages existed that dispensed with ceremony and that one could use
    as interactive calculators, such as Python and MATLAB. However, programs written
    in these languages were slow. Also, such languages often were not well suited
    to keeping large programs organized.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 也有其他语言，不需要仪式感，可以作为交互式计算器使用，比如 Python 和 MATLAB。然而，这些语言编写的程序速度较慢。而且，这些语言通常不适合保持大型程序的组织结构。
- en: 'Julia’s creators were greedy because they wanted it all: a language that was
    as easy to use as Python but was also as fast as Fortran. The solutions that people
    bolted on to Python (for example) to make it faster often involved rewriting the
    time-consuming parts of their programs in a faster language, such as C. The resulting
    chimera meant maintaining code in two languages, with the resulting organizational,
    personnel, and mental overhead issues. This is called the “two language problem,”
    and one of the motivations behind Julia was to eliminate it.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 的创造者之所以“贪心”，是因为他们想要兼得一切：一种和 Python 一样易用的语言，但同时又有 Fortran 一样的速度。人们通常通过为
    Python 等语言增加速度优化来解决这个问题，通常需要将程序中耗时的部分重写成更快的语言，比如 C。这样产生的“拼接体”意味着需要在两种语言中维护代码，这带来了组织、人员和心理上的额外负担。这就是所谓的“两语言问题”，而
    Julia 的动机之一就是要解决这个问题。
- en: Julia is now widely acclaimed as a real solution to the two-language problem.
    In fact, it’s one of only three languages that belong to the “petaflop club,”
    reaching the very top rank of performance on giant number-crunching problems (the
    other two are Fortran and C++). Uniquely, Julia combines this high level of performance
    with the ability to serve as an interactive calculator, whether with its highly
    polished read-eval-print loop (REPL), in development environments of various kinds,
    or in browser-based notebooks.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 现在被广泛誉为解决两语言问题的真正方案。事实上，它是仅有的三种属于“千万亿次俱乐部”的语言之一，在巨大的数值计算问题上达到顶级性能（另外两种是
    Fortran 和 C++）。独特的是，Julia 将这种高性能与作为交互式计算器的能力结合在一起，无论是在其精心打磨的读取-求值-打印循环（REPL）中，还是在各种开发环境或基于浏览器的笔记本中。
- en: For those who have worked with Python, Octave, MATLAB, JavaScript using Node,
    or other REPL-based language systems, the Julia experience will be familiar. You
    can simply type `julia` in a terminal, and you’ll see a brief startup message
    and a welcoming interactive prompt. Now you can type expressions and get immediate
    results printed back out on the terminal. You can define variables and functions,
    operate on arrays, import libraries of functions, read data from the disk or the
    network, and generally use the language as a sophisticated calculator. You never
    have to declare the types of variables nor spin any other boilerplate that comes
    between you and your work.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些曾使用过 Python、Octave、MATLAB、JavaScript（通过 Node）或其他基于 REPL 的语言系统的人来说，Julia
    的使用体验将会非常熟悉。你只需在终端中输入`julia`，就会看到一个简短的启动信息和一个友好的交互式提示符。现在你可以输入表达式，并立即在终端中看到结果。你可以定义变量和函数，操作数组，导入函数库，从磁盘或网络读取数据，并且可以将语言作为一个复杂的计算器来使用。你无需声明变量的类型，也不需要编写任何额外的模板代码，这些代码并不会干扰你的工作。
- en: Those are the similarities to other interpreted languages. You’ll also encounter
    some differences. You might notice occasional delays of a few seconds that usually
    don’t occur with languages like Python. This happens because Julia isn’t really
    an interpreted language, but it is doing both pre-compilation of code and just-in-time
    (JIT) compilation behind the scenes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是它与其他解释型语言的相似之处。你还会遇到一些不同之处。你可能会注意到偶尔会有几秒钟的延迟，而这种情况通常不会出现在像Python这样的语言中。这是因为Julia实际上并不是一种传统的解释型语言，它在幕后进行代码的预编译和即时编译（JIT）。
- en: As you’ll discover, this trade-off is worthwhile when your calculations get
    big. Your experience with other interactive languages may cause you to expect
    things to grind to a halt, but you will find, instead, that your code will execute
    with the speed of a compiled language like Fortran.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你将发现的，当你的计算变得庞大时，这种权衡是值得的。你对其他交互式语言的经验可能让你预期代码会变得非常缓慢，但你会发现，实际上，代码的执行速度与Fortran等编译语言一样快。
- en: As you explore further, you’ll discover that Julia is not like other languages
    you may be familiar with. At first, it seems superficially the same. You can type
    `1 + 1` and get `2` back. But you’ll learn that Julia is neither object oriented
    like Python, nor traditionally functional like Haskell, nor is it like whatever
    JavaScript is. The language is organized around a different principle, and that’s
    the source of much of its power.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 随着进一步的探索，你会发现Julia与其他你熟悉的语言不同。乍一看，它似乎与其他语言相似。你可以输入`1 + 1`并得到`2`的结果。但你会了解到，Julia既不像Python那样面向对象，也不像Haskell那样传统的函数式编程语言，更不像JavaScript那样的语言。Julia的设计基于一个不同的原理，这也是它强大之处的来源。
- en: '**Why Is Julia Popular with Scientists?**'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**为什么科学家喜欢Julia？**'
- en: 'Julia is organized around something called multiple dispatch, which is enabled
    by a powerful and flexible type system. Later, you’ll learn more about what these
    things mean and how to take advantage of them in your programs. For now, file
    this idea away for future reference: the multiple dispatch system is as important
    a reason as Julia’s famous interactivity and speed for its success in the scientific
    world. While Julia is not the first language to incorporate this feature, it’s
    the first one to combine it with the other virtues that make it genuinely useful
    for the research community.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Julia的设计围绕着一种叫做多重分派（multiple dispatch）的机制，这得益于其强大而灵活的类型系统。稍后，你会了解到这些概念的含义，以及如何在你的程序中利用它们。现在，请将这个概念记住并留作日后参考：多重分派系统是Julia在科学界取得成功的关键因素之一，与其著名的互动性和速度同样重要。虽然Julia不是第一个采用这一特性的语言，但它是第一个将此特性与其他优点结合，真正使其对科研界有用的语言。
- en: It is this design feature that enables an unprecedented level and ease of code
    reuse and recombination. This, as much as any benchmark, is what delights the
    researchers who have adopted Julia as their computational tool. Julia is taking
    off with scientists largely because it allows them to use each other’s code and
    recombine libraries to create new functionalities in ways not envisioned by the
    library’s authors. You’ll see many examples of this in later chapters, especially
    in [Part II](part2.xhtml). You’ll also see how the type system and Julia’s metaprogramming
    abilities allow you to bend the language to fit your problem perfectly, with no
    compromise in performance.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正是这个设计特性使得代码重用和重组达到了前所未有的程度和简便性。这一点，与任何基准测试一样，是吸引那些已将Julia作为计算工具的研究人员的原因。Julia在科学界的快速发展，主要是因为它使得研究人员能够相互使用代码，并将不同的库重新组合，创造出库作者未曾预见到的新功能。你将在后续章节中看到许多这样的例子，特别是在[第二部分](part2.xhtml)中。你还将看到类型系统和Julia的元编程能力如何使你能够完美地将语言与问题相匹配，而不牺牲性能。
- en: '**What Will This Book Do for You?**'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**这本书能为你做什么？**'
- en: After reading [Part I](part1.xhtml), and whatever interests you in [Part II](part2.xhtml),
    you’ll be able to take full advantage of Julia to solve any computational problem
    that confronts you. You will know how to explore and visualize data, solve equations,
    write simulations, and use and create libraries. The emphasis here is on applying
    Julia to research problems. The approach is direct and practical, with a minimum
    of theoretical computer science. I’ll teach you how to write efficient code that
    runs on a laptop or on large distributed systems. Whether your interest is in
    scientific research, mathematics, statistics, or just fun, you’ll learn how to
    make intelligent use of this tool and how to enjoy doing so.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读完[第一部分](part1.xhtml)和[第二部分](part2.xhtml)中你感兴趣的内容后，你将能够充分利用Julia解决任何遇到的计算问题。你将学会如何探索和可视化数据，解决方程式，编写仿真程序，并使用和创建库。本书的重点是将Julia应用于研究问题。方法直接且实用，理论计算机科学的内容尽量简化。我将教你如何编写高效的代码，使其能够在笔记本电脑或大型分布式系统上运行。无论你对科学研究、数学、统计学，还是仅仅为了娱乐感兴趣，你都将学会如何智能地使用这个工具，并享受使用的乐趣。
- en: This book starts at the beginning, assuming that you have never touched Julia.
    I don’t assume any particular knowledge of numerical methods or computational
    techniques, explaining everything of this sort as needed. I assume only that you’ve
    had some contact with basic programming concepts. In other words, when I describe
    how to write an `if` statement in Julia, I’ll expect that you’re familiar, in
    a general sense, with the concept of using conditions.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本书从基础开始，假设你从未接触过Julia。我不假设你已经掌握了任何特定的数值方法或计算技术，会在需要时解释这些内容。我只假设你有一些基本的编程概念接触经验。换句话说，当我描述如何在Julia中写一个`if`语句时，我会期望你在一般意义上了解使用条件的概念。
- en: '**How to Use This Book**'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**如何使用本书**'
- en: 'The material in [Part I](part1.xhtml) builds sequentially, so, ideally, you’ll
    read those chapters in order. The chapters in [Part II](part2.xhtml), by contrast,
    depend only on the material in [Part I](part1.xhtml), not on each other. You can
    successfully read the biology chapter without looking at the physics chapter.
    Of course, I encourage everyone to read every chapter! Here’s why: some particular
    techniques are developed in application chapters in which they are most likely
    to be relevant. However, due to the nature of scientific research, any bit of
    computational knowledge can potentially find application in any discipline. For
    example, a biologist may find the material in the physics chapter about differential
    equation solvers to be useful in modeling population dynamics. Since the chapters
    in [Part II](part2.xhtml) are not in any particular order, however, it will probably
    be most natural to read the chapter of immediate interest to you first, and return
    to the others at your leisure.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[第一部分](part1.xhtml)的内容是按顺序构建的，因此，理想情况下，你应该按顺序阅读这些章节。相对而言，[第二部分](part2.xhtml)的章节只依赖于[第一部分](part1.xhtml)的内容，而不相互依赖。你可以不看物理章节而直接阅读生物学章节。当然，我鼓励每个人都阅读每一章！原因如下：一些特定的技术是在最相关的应用章节中开发的。然而，由于科学研究的性质，任何计算知识都可能在任何学科中找到应用。例如，一位生物学家可能会发现物理章节中关于微分方程求解器的内容对模拟种群动态有帮助。由于[第二部分](part2.xhtml)中的章节没有固定顺序，最自然的做法可能是首先阅读你最感兴趣的章节，其他章节可以在闲暇时再回头阅读。'
- en: The book has an extensive index, which should make it easy to root out any subject,
    no matter where it is hiding.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本书有一个详细的索引，应该能帮助你轻松找到任何内容，无论它藏在哪里。
- en: In order to get the most out of a book such as this, read it with a Julia prompt
    open, so you can try things out as you encounter them in the text. The hands-on
    approach cements ideas far more effectively than simply reading. As you follow
    along, you’ll find that you want to try out variations of my sample code and learn
    how the language behaves through trial and error. You won’t break anything. If
    you get into a weird state that you don’t know how to fix, you can simply exit
    the REPL and start it up again. In addition, the Julia REPL has a well-implemented
    documentation mode, where you can access all the gruesome details about any particular
    function to supplement what’s in the text.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最大限度地利用本书，建议你一边阅读，一边在Julia提示符下进行实践，这样你可以在遇到问题时进行尝试。实践的方法比单纯阅读更能有效地巩固理解。当你跟随本书内容时，你会想尝试我的示例代码的不同变体，通过反复试验了解语言的行为。你不会弄坏任何东西。如果你进入了一个不知如何解决的奇怪状态，可以简单地退出REPL并重新启动。此外，Julia
    REPL有一个完善的文档模式，你可以在其中访问任何特定函数的详细信息，以补充书中的内容。
- en: This book has a companion website at [*https://julia.lee-phillips.org*](https://julia.lee-phillips.org)
    where you can find runnable versions of all the major code listings in the text,
    datafiles used by the programs, color versions of the illustrations, example animations,
    and videos of simulations.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本书有一个配套网站，网址为[*https://julia.lee-phillips.org*](https://julia.lee-phillips.org)，你可以在网站上找到文本中的所有主要代码示例的可运行版本、程序使用的数据文件、插图的彩色版本、示例动画以及模拟视频。
- en: '**Book Overview**'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**书籍概述**'
- en: 'In [Part I](part1.xhtml), after the preliminaries dealing with installation
    and the coding environment, we focus on learning Julia: the syntax, data types,
    concepts, and best practices. This part also contains chapters about the module
    and package system and visualization.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第一部分](part1.xhtml)中，首先处理安装和编程环境的基础知识，然后重点学习Julia：语法、数据类型、概念和最佳实践。本部分还包括有关模块和包系统以及可视化的章节。
- en: '**[Chapter 1: Getting Started](ch01.xhtml)** Introduces the hardware and experience
    needed for running Julia and benefiting from this book, and provides a guide to
    installation on various operating systems. We also review the most common coding
    environments and end with some recommendations.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第一章：入门](ch01.xhtml)** 介绍了运行Julia和从本书中受益所需的硬件和经验，并提供了在各种操作系统上安装的指南。我们还回顾了最常见的编码环境，并给出了几点建议。'
- en: '**[Chapter 2: Language Basics](ch02.xhtml)** Provides an introduction to the
    concepts, syntax, and data types of Julia that will equip you with a solid, basic
    understanding of the language.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第二章：语言基础](ch02.xhtml)** 介绍了Julia的概念、语法和数据类型，为你提供扎实的语言基础。'
- en: '**[Chapter 3: Modules and Packages](ch03.xhtml)** Describes how to organize
    your Julia programs, how to incorporate code from others into your work, and how
    you can be a part of the Julia community.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第三章：模块与包](ch03.xhtml)** 描述了如何组织你的Julia程序，如何将他人的代码整合到自己的工作中，以及如何成为Julia社区的一部分。'
- en: '**[Chapter 4: The Plotting System](ch04.xhtml)** Concentrates on Julia’s powerful
    `Plots` package. You’ll learn how to make and customize every common type of 2D
    and 3D plot and how to create interactive graphics and finished illustrations
    for publication.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第四章：绘图系统](ch04.xhtml)** 重点讲解了Julia强大的`Plots`包。你将学习如何创建和自定义每种常见的2D和3D图表，以及如何创建交互式图形和用于出版的最终插图。'
- en: '**[Chapter 5: Collections](ch05.xhtml)** Introduces data types such as sets,
    strings, arrays, dictionaries, structs, and tuples. This chapter covers comprehensions
    and generators, operators over collections, array initialization and manipulation,
    and Julia’s various types of strings.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第五章：集合](ch05.xhtml)** 介绍了数据类型，如集合、字符串、数组、字典、结构体和元组。本章涵盖了推导式和生成器、集合操作符、数组初始化和操作，以及Julia的各种字符串类型。'
- en: '**[Chapter 6: Functions, Metaprogramming, and Errors](ch06.xhtml)** Delves
    further into functions, treating different ways to define and supply arguments,
    and higher-order functions. It includes an introduction to metaprogramming, involving
    the use of symbols, expression objects, and macros to write code that manipulates
    code.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第六章：函数、元编程与错误处理](ch06.xhtml)** 进一步探讨函数，讲解了不同的定义和传递参数的方式，以及高阶函数。包括元编程的介绍，涉及使用符号、表达式对象和宏来编写操作代码的代码。'
- en: '**[Chapter 7: Diagrams and Animations](ch07.xhtml)** Shows how to use a flexible
    and powerful package for mathematical and other diagrams, and a more specialized
    tool for drawing node-and-edge graphs. We’ll explore two packages providing different
    approaches for creating animations, and we’ll use several of these packages in
    later chapters to create illustrations and videos.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第7章：图表与动画](ch07.xhtml)** 展示了如何使用一个灵活且强大的包来制作数学和其他类型的图表，以及一个更专门化的工具来绘制节点和边图。我们将探索两个提供不同动画制作方法的包，并将在后续章节中使用这些包来制作插图和视频。'
- en: '**[Chapter 8: The Type System](ch08.xhtml)** Covers more details about Julia’s
    different kinds of numbers and other objects, the type hierarchy, type assertions
    and declarations, and how to create our own types. It explains how to use the
    type system in concert with multiple dispatch to organize our programs and the
    connection between types and performance. In addition, a section on plotting recipes
    reveals the unique power of Julia’s plotting system.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第8章：类型系统](ch08.xhtml)** 详细介绍了Julia中不同种类的数字和其他对象、类型层次结构、类型断言与声明，以及如何创建我们自己的类型。它解释了如何将类型系统与多重分派相结合来组织程序，并讨论了类型与性能之间的关系。此外，关于绘图配方的部分揭示了Julia绘图系统的独特强大功能。'
- en: '[Part II](part2.xhtml) contains chapters devoted to particular fields of research,
    plus a final chapter on parallel processing. Each chapter uses one or more specialized
    packages widely used in an area of application, and tackles at least one interesting
    problem in its specialty.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[第二部分](part2.xhtml) 包含了专门研究某一特定领域的章节，以及关于并行处理的最后一章。每个章节都使用一个或多个在某一应用领域广泛使用的专业包，并探讨至少一个该领域中的有趣问题。'
- en: '**[Chapter 9: Physics](ch09.xhtml)** Shows how to enrich numbers with units
    and uncertainties, a subject of potential interest to scientists in many fields.
    A detailed example of thermal convection demonstrates how to use a powerful fluid
    dynamics package. The chapter ends with an introduction to a state-of-the-art
    package for solving differential equations.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第9章：物理学](ch09.xhtml)** 展示了如何给数字添加单位和不确定性，这是许多领域的科学家可能感兴趣的主题。一个详细的热对流示例演示了如何使用强大的流体动力学包。该章节以介绍解决微分方程的最先进包作为结尾。'
- en: '**[Chapter 10: Statistics](ch10.xhtml)** Discusses concepts in statistics and
    probability theory, such as distributions, and relates them to functions and types
    provided by relevant Julia packages. It applies these ideas to the simulation
    of the spread of an infection, and it introduces dataframes by slicing and dicing
    real data about COVID cases.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第10章：统计学](ch10.xhtml)** 讨论了统计学和概率论中的概念，如分布，并将其与相关Julia包提供的函数和类型联系起来。它将这些概念应用于模拟感染的传播，并通过对COVID病例的实际数据进行切片和切割，介绍了数据框架。'
- en: '**[Chapter 11: Biology](ch11.xhtml)** Explores agent-based modeling and shows
    how to use Julia’s `Agents` package to simulate the evolution of creatures who
    learn how to avoid being captured by predators. It builds on some ideas from the
    statistics chapter to analyze the results.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第11章：生物学](ch11.xhtml)** 探讨了基于代理的建模，并展示了如何使用Julia的`Agents`包来模拟生物进化，生物学习如何避免被捕食者捕获。该章节基于统计学章节中的一些概念来分析结果。'
- en: '**[Chapter 12: Mathematics](ch12.xhtml)** Focuses on symbolic mathematics (computer
    algebra) and linear algebra. It describes two main approaches to the first topic,
    including hybrid numerical-symbolic techniques. It covers the basic use of linear
    algebra packages to solve equations and efficiently perform matrix operations
    by taking advantage of the type system.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第12章：数学](ch12.xhtml)** 聚焦于符号数学（计算机代数）和线性代数。它描述了第一主题的两种主要方法，包括混合数值-符号技术。它涵盖了使用线性代数包来求解方程，并通过利用类型系统高效地执行矩阵运算的基本方法。'
- en: '**[Chapter 13: Scientific Machine Learning](ch13.xhtml)** Explores concepts
    and techniques in a relatively new area that exploits ideas from machine learning
    to infer properties of models. It shows how to use automatic differentiation in
    several contexts, and introduces probabilistic programming through Julia’s `Turing`
    package.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第13章：科学机器学习](ch13.xhtml)** 探讨了一个相对较新的领域，其中利用机器学习的思想推断模型的属性。它展示了如何在多个场景中使用自动微分，并通过Julia的`Turing`包介绍了概率编程。'
- en: '**[Chapter 14: Signal and Image Processing](ch14.xhtml)** Focuses on signals
    and images. The signal section covers Fourier analysis, filtering, and related
    topics, using a bird call as the working example. The image section uses feature
    recognition in the problem of counting blood cells and examines several techniques
    for image resizing, smoothing, and other manipulations. In this context it delves
    further into advanced array concepts.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第 14 章：信号与图像处理](ch14.xhtml)** 聚焦于信号和图像。信号部分涵盖傅里叶分析、滤波和相关主题，使用鸟鸣声作为工作实例。图像部分通过在计数血细胞问题中的特征识别，探讨了图像大小调整、平滑处理和其他操作的多种技术。在这一部分，还进一步深入探讨了高级数组概念。'
- en: '**[Chapter 15: Parallel Processing](ch15.xhtml)** Explains how to run our programs
    on more than one CPU core or computer. The chapter discusses the different concurrency
    paradigms and how to take advantage of multithreading and multiprocessing. We’ll
    see how to run our programs on a network with machines all over the world, with
    no change to the code.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第 15 章：并行处理](ch15.xhtml)** 解释了如何在多个 CPU 核心或计算机上运行我们的程序。本章讨论了不同的并发范式，以及如何利用多线程和多处理技术。我们将看到如何在全球各地的网络机器上运行程序，而无需更改代码。'
- en: '**FURTHER READING**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**进一步阅读**'
- en: 'For details on the inspiration for the Julia language, see “Why We Created
    Julia”: [*https://julialang.org/blog/2012/02/why-we-created-julia/*](https://julialang.org/blog/2012/02/why-we-created-julia/).'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解 Julia 语言的灵感来源，请阅读《我们为何创造 Julia》：[*https://julialang.org/blog/2012/02/why-we-created-julia/*](https://julialang.org/blog/2012/02/why-we-created-julia/)。
- en: 'My article in *Ars Technica*, “The Unreasonable Effectiveness of the Julia
    Programming Language,” explains the underlying reasons for Julia’s wide adoption
    among scientists: [*https://arstechnica.com/science/2020/10/the-unreasonable-effectiveness-of-the-julia-programming-language/*](https://arstechnica.com/science/2020/10/the-unreasonable-effectiveness-of-the-julia-programming-language/).'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的文章《*Julia 编程语言的非理性有效性*》发表于 *Ars Technica*，解释了 Julia 在科学家中广泛应用的根本原因：[*https://arstechnica.com/science/2020/10/the-unreasonable-effectiveness-of-the-julia-programming-language/*](https://arstechnica.com/science/2020/10/the-unreasonable-effectiveness-of-the-julia-programming-language/)。
- en: If you’re a Python programmer and want a very brief rundown of the differences
    in syntax, see “Julia for Python Programmers” by Dr. John D. Cook, at [*http://www.johndcook.com/blog/2015/09/15/julia-for-python-programmers/*](http://www.johndcook.com/blog/2015/09/15/julia-for-python-programmers/).
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你是 Python 程序员，并且想要简要了解语法上的差异，请查看 Dr. John D. Cook 在 [*http://www.johndcook.com/blog/2015/09/15/julia-for-python-programmers/*](http://www.johndcook.com/blog/2015/09/15/julia-for-python-programmers/)
    上的文章《Python 程序员的 Julia 入门》。
- en: If, instead, you come from Lisp, take a look at “A Lisper’s First Impression
    of Julia” by Pascal Costanza at [*https://p-cos.blogspot.com/search?q=first+impression+of+Julia*](https://p-cos.blogspot.com/search?q=first+impression+of+Julia).
    It’s from 2014, but still of interest.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你来自 Lisp，请阅读 Pascal Costanza 在 [*https://p-cos.blogspot.com/search?q=first+impression+of+Julia*](https://p-cos.blogspot.com/search?q=first+impression+of+Julia)
    上的文章《Lisper 对 Julia 的第一印象》。虽然这篇文章是 2014 年的，但仍然值得一读。
- en: 'For the original theoretical justification explaining the need of a new language
    and how Julia’s design decisions meet that need, see “Julia: A Fresh Approach
    to Numerical Computing,” authored by Julia creators Jeff Bezanson, Alan Edelman,
    Stefan Karpinski, and Viral B. Shah ([*http://arxiv.org/abs/1411.1607*](http://arxiv.org/abs/1411.1607)).'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解解释新语言需求的原始理论依据以及 Julia 设计决策如何满足这些需求，请参阅《Julia：一种全新的数值计算方法》，该文由 Julia 的创造者
    Jeff Bezanson、Alan Edelman、Stefan Karpinski 和 Viral B. Shah 合著（[*http://arxiv.org/abs/1411.1607*](http://arxiv.org/abs/1411.1607)）。
- en: 'For another version of Julia’s creation story, see Klint Finley’s “Out in the
    Open: Man Creates One Programming Language to Rule Them All” ([*https://www.wired.com/2014/02/julia/*](https://www.wired.com/2014/02/julia/)).'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想了解 Julia 创造故事的另一个版本，可以查看 Klint Finley 的文章《公开的：人类创造了一种编程语言来统治一切》（[*https://www.wired.com/2014/02/julia/*](https://www.wired.com/2014/02/julia/)）。
- en: “Julia Joins Petaflop Club” from Julia Computing is an astronomical (in both
    senses) application of Julia ([*https://cacm.acm.org/news/221003-julia-joins-petaflop-club/fulltext*](https://cacm.acm.org/news/221003-julia-joins-petaflop-club/fulltext)).
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《*Julia 加入了 Petaflop 俱乐部*》由 Julia Computing 发布，展示了 Julia 在天文（两方面）应用中的一个案例（[*https://cacm.acm.org/news/221003-julia-joins-petaflop-club/fulltext*](https://cacm.acm.org/news/221003-julia-joins-petaflop-club/fulltext)）。
- en: '“Julia Update: Adoption Keeps Climbing; Is It a Python Challenger?” by John
    Russell ([*https://www.hpcwire.com/2021/01/13/julia-update-adoption-keeps-climbing-is-it-a-python-challenger/*](https://www.hpcwire.com/2021/01/13/julia-update-adoption-keeps-climbing-is-it-a-python-challenger/))
    provides some interesting historical perspective.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: John Russell的《Julia更新：采用率持续攀升；它是Python的挑战者吗？》([*https://www.hpcwire.com/2021/01/13/julia-update-adoption-keeps-climbing-is-it-a-python-challenger/*](https://www.hpcwire.com/2021/01/13/julia-update-adoption-keeps-climbing-is-it-a-python-challenger/))提供了一些有趣的历史视角。
- en: '“Why I Switched to Julia” by Bradley Setzler is a case study of Julia used
    in econometrics that shows a 100-fold speed increase over Python with NumPy: [*https://juliaeconomics.com/2014/06/15/why-i-started-a-blog-about-programming-julia-for-economics/*](https://juliaeconomics.com/2014/06/15/why-i-started-a-blog-about-programming-julia-for-economics/).'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bradley Setzler的《为什么我转向Julia》是一个关于Julia在计量经济学中应用的案例研究，展示了在使用NumPy时，Julia比Python的速度提高了100倍：[*https://juliaeconomics.com/2014/06/15/why-i-started-a-blog-about-programming-julia-for-economics/*](https://juliaeconomics.com/2014/06/15/why-i-started-a-blog-about-programming-julia-for-economics/)。
