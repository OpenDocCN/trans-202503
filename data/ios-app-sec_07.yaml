- en: '**5**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**5**'
- en: '**DEBUGGING WITH LLDB AND FRIENDS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用LLDB调试和其他工具**'
- en: Debugging iOS applications is considered one of Xcode’s strong components. In
    addition to the useful analysis features of DTrace, Xcode has a command line debugger
    with a relatively approachable graphical interface. As part of Apple’s migration
    away from GNU utilities, the default debugger is now lldb,^([1](footnote.html#fn34))
    which provides first-class support for Objective-C. Multithreaded debugging is
    well-supported, and you can even inspect objects from the debugger. The only downside
    is that you’ll have to translate your hard-won knowledge of gdb to a new environment.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 调试iOS应用被认为是Xcode的强项之一。除了DTrace的有用分析功能外，Xcode还提供了一个带有相对易用图形界面的命令行调试器。作为苹果公司逐步放弃GNU工具的部分内容，默认的调试器现在是lldb，^([1](footnote.html#fn34))
    它为Objective-C提供了一级支持。多线程调试得到了很好的支持，你甚至可以从调试器中检查对象。唯一的缺点是，你需要将你通过gdb获得的经验知识转移到新的环境中。
- en: Debugging is a vast topic, and there are multiple books on the subject.^([2](footnote.html#fn35))
    This chapter covers the basics for people new to Xcode, along with tips relevant
    to security testing and secure development. I assume you have some familiarity
    with gdb and debuggers in general.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是一个广泛的主题，关于这一主题有许多书籍可供参考。^([2](footnote.html#fn35)) 本章涵盖了Xcode新手的基础知识，并提供了与安全测试和安全开发相关的技巧。我假设你对gdb和调试器有一定的了解。
- en: '**Useful Features in lldb**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**lldb中的有用功能**'
- en: Xcode’s built-in debugger interface is fairly powerful. It has a command line,
    but you can also use the GUI to view and interact with the current thread state,
    annotated assembly, and object details. The GUI includes a central breakpoint
    browser as well, where you can view, enable, and disable breakpoints.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode内置的调试器界面功能非常强大。它不仅有命令行界面，还可以使用GUI查看和与当前线程状态、注释的汇编代码及对象细节进行交互。GUI中还包括一个中央断点浏览器，你可以在其中查看、启用和禁用断点。
- en: '**NOTE**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you’re extremely comfortable using gdb, the LLVM project has a mapping
    of frequently used gdb commands to their lldb equivalents; see* [http://lldb.llvm.org/lldb-gdb.html](http://lldb.llvm.org/lldb-gdb.html).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你非常熟悉使用gdb，LLVM项目有一份常用gdb命令到lldb命令的映射表；请参见* [http://lldb.llvm.org/lldb-gdb.html](http://lldb.llvm.org/lldb-gdb.html)。'
- en: '***Working with Breakpoints***'
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用断点***'
- en: You can set breakpoints graphically from Xcode’s lldb interface (see [Figure
    5-1](ch05.html#ch5fig1)), or you can do so from the command line. In addition
    to breaking when the program accesses a particular memory address or C function,
    you can also break on specific Objective-C methods.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过Xcode的lldb界面（见[图 5-1](ch05.html#ch5fig1)）图形化设置断点，也可以通过命令行进行设置。除了在程序访问特定内存地址或C函数时设置断点外，你还可以在特定的Objective-C方法上设置断点。
- en: '![image](graphics/f05-01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-01.jpg)'
- en: '*Figure 5-1: Xcode’s lldb interface*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-1：Xcode的lldb界面*'
- en: 'Here are some of the ways you can set breakpoints:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是设置断点的一些方法：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The command at ➊ sets one breakpoint on multiple functions, a feature you can
    use to enable and disable groups of functions simultaneously. As shown at ➋, you
    can also break on specific Objective-C instance and class methods—these can be
    also be grouped in a manner similar to the C function calls at ➊. If you want
    to break on all calls to a particular selector/method, use the `--selector` option
    ➌, which will break on any calls to a selector of this name, regardless of what
    class they’re implemented in. Finally, to break on specific C++ methods, simply
    specify `--method` instead of `--name` when defining the breakpoint, as at ➍.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: ➊处的命令会在多个函数上设置一个断点，这个功能可以让你同时启用和禁用一组函数。正如➋所示，你也可以在特定的Objective-C实例和类方法上设置断点——这些方法也可以像➊处的C函数调用一样进行分组。如果你想在所有调用特定选择器/方法时设置断点，可以使用`--selector`选项➌，这会在任何调用该名称的选择器时断开，不管它们是在哪个类中实现的。最后，要在特定的C++方法上设置断点，只需在定义断点时指定`--method`而不是`--name`，如➍所示。
- en: 'In practice, setting a breakpoint in lldb looks like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在lldb中设置断点的操作如下所示：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After you set a breakpoint, lldb shows the code you’re breaking on. If you
    like, you can make this even simpler: like gdb, lldb recognizes keywords using
    the shortest matching text. So `*breakpoint*` can be shortened to `*break*`, or
    even `*b*`.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 设置断点后，lldb会显示你所设置的断点代码。如果你愿意，可以让它更简洁：像gdb一样，lldb会通过最短的匹配文本来识别关键字。因此，`*breakpoint*`可以缩写为`*break*`，甚至缩写为`*b*`。
- en: In the GUI, you can break on a particular line of code by clicking the number
    in the gutter to the left of the line (see [Figure 5-2](ch05.html#ch5fig2)). Clicking
    again will disable the breakpoint. Alternatively, you can break on lines from
    the lldb CLI using the `--file *filename.m* --line *66*` syntax.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GUI 中，你可以通过点击行号左侧的空白区域来在特定代码行设置断点（见[图 5-2](ch05.html#ch5fig2)）。再次点击将禁用该断点。或者，你也可以使用
    `--file *filename.m* --line *66*` 语法通过 lldb CLI 在某一行设置断点。
- en: '![image](graphics/f05-02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-02.jpg)'
- en: '*Figure 5-2: Setting breakpoints on specific lines with the mouse. Deactivated
    breakpoints are shaded a lighter gray.*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-2：使用鼠标设置特定行的断点。禁用的断点以浅灰色显示。*'
- en: 'When you want to create multiple breakpoints, it can be handy to use the `-r`
    flag at the command line to break on functions matching a particular regular expression,
    like so:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想创建多个断点时，使用命令行中的 `-r` 标志来设置匹配特定正则表达式的函数断点非常方便，例如：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will set a single breakpoint with a number of *locations*. Each location
    can be enabled and disabled, as shown here:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置一个带有多个*位置*的单一断点。每个位置可以被启用或禁用，如下所示：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice that enabling and disabling locations works just like a regular breakpoint;
    just use `break disable` and `break enable` and reference the right numeric identifier.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，启用和禁用位置的方式与常规断点相同；只需使用 `break disable` 和 `break enable` 并引用正确的数字标识符。
- en: '***Navigating Frames and Variables***'
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***浏览帧和变量***'
- en: Once you’ve arrived at a breakpoint, you can use lldb to examine the state of
    your program. You can do this via either the command line, as in the other lldb
    examples I’ve shown, or the visual lldb browser, as in [Figure 5-3](ch05.html#ch5fig3).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你到达了断点，你可以使用 lldb 来检查程序的状态。你可以通过命令行完成此操作，正如我之前展示的其他 lldb 示例，或者通过可视化的 lldb
    浏览器，如[图 5-3](ch05.html#ch5fig3)所示。
- en: '![image](graphics/f05-03.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-03.jpg)'
- en: '*Figure 5-3: Examining frame variables from the command line and the GUI*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-3：从命令行和 GUI 检查帧变量*'
- en: In addition to viewing and manipulating the variables of the current frame,
    you can navigate the program threads and frames of the call stack using the Debug
    Navigator, as shown in [Figure 5-4](ch05.html#ch5fig4).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 除了查看和操作当前帧的变量外，你还可以使用调试导航器浏览程序线程和调用堆栈中的帧，如[图 5-4](ch05.html#ch5fig4)所示。
- en: '![image](graphics/f05-04.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-04.jpg)'
- en: '*Figure 5-4: Using the Debug Navigator to switch frames and threads*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-4：使用调试导航器切换帧和线程*'
- en: Similar to using gdb, you can inspect the call stack of the current thread with
    the `bt` (short for *backtrace*) command (see [Listing 5-1](ch05.html#ch5ex1)).
    Normally, you could also navigate frames using the typical `up`, `down`, and `frame
    select` commands. In some versions of Xcode however, a bug causes the frame to
    immediately revert to the frame selected in the Debug Navigator. In that case,
    you must switch frames manually within the Debug Navigator to inspect them individually.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于使用 gdb，你可以使用 `bt`（*backtrace* 的缩写）命令检查当前线程的调用堆栈（参见[列表 5-1](ch05.html#ch5ex1)）。通常，你还可以使用典型的
    `up`、`down` 和 `frame select` 命令导航帧。然而，在某些版本的 Xcode 中，存在一个 bug，导致帧立即恢复为在调试导航器中选择的帧。在这种情况下，你必须在调试导航器中手动切换帧，以便单独检查它们。
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 5-1: Getting the current call stack with the backtrace command*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 5-1：使用 backtrace 命令获取当前调用堆栈*'
- en: To examine the variables of the current frame, you can use the `frame variable`
    command, as shown in Listing **??**.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查当前帧的变量，你可以使用 `frame variable` 命令，如在列表 **??** 中所示。
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 5-2: Using the* `frame variable` *command*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 5-2：使用 `frame variable` 命令*'
- en: This will give you variable names and arguments of the local stack frame, along
    with their types and memory addresses. You can also use the context menu in the
    graphical debugger to print or edit variable contents; see [Figure 5-5](ch05.html#ch5fig5).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示局部栈帧的变量名称和参数，以及它们的类型和内存地址。你还可以在图形调试器中使用上下文菜单打印或编辑变量内容；参见[图 5-5](ch05.html#ch5fig5)。
- en: 'If you use `frame select` on its own, you can also see the program’s location
    in the call stack, along with the relevant surrounding lines of code, as in this
    example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你单独使用 `frame select`，你还可以看到程序在调用堆栈中的位置，以及相关的周围代码行，如以下示例所示：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![image](graphics/f05-05.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-05.jpg)'
- en: '*Figure 5-5: The variable context menu, showing options for printing variable
    contents, setting watchpoints, and viewing memory contents*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-5：变量上下文菜单，显示打印变量内容、设置观察点和查看内存内容的选项*'
- en: The `frame select` command also takes a numeric argument for the stack frame
    you want to inspect, if you’d like to look further up the call stack (see [Listing
    5-3](ch05.html#ch5ex3)).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`frame select` 命令还可以接受一个数字参数，用于指定你想要检查的栈帧，如果你希望查看更上层的调用栈（见[示例 5-3](ch05.html#ch5ex3)）。'
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 5-3: Assembly shown while examining a stack frame*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 5-3：检查栈帧时显示的汇编代码*'
- en: Note that for code outside of your current project, such as other parts of the
    Cocoa API, the source will usually not be available; lldb will instead show you
    the relevant assembly instructions.^([3](footnote.html#fn36))
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于当前项目之外的代码，例如 Cocoa API 的其他部分，通常无法获得源代码；lldb 会显示相关的汇编指令。^([3](footnote.html#fn36))
- en: 'You can also inspect the values of objects using lldb’s `po` (short for *print
    object*) command. For example, consider the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 lldb 的 `po`（即 *print object* 的缩写）命令检查对象的值。例如，考虑以下内容：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Using `po` on your main window fetches the addresses and attributes of that
    window.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `po` 在主窗口中获取该窗口的地址和属性。
- en: '***Visually Inspecting Objects***'
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***可视化检查对象***'
- en: If you’re using Xcode 5 or later, you can also hover the mouse over objects
    to inspect the contents, as shown in [Figure 5-6](ch05.html#ch5fig6). If you drill
    down into individual subobjects, you can either view their memory directly ([Figure
    5-7](ch05.html#ch5fig7)) by clicking the **i** button or use the Quick Look “eye”
    button to see the contents of the object represented as a fully rendered image,
    text, or any other data type that OS X’s Quick Look API understands (see [Figure
    5-8](ch05.html#ch5fig8)). This is, in my opinion, pretty badass.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Xcode 5 或更高版本，你还可以将鼠标悬停在对象上，以检查其内容，如[图 5-6](ch05.html#ch5fig6)所示。如果你深入查看各个子对象，可以通过点击
    **i** 按钮直接查看其内存内容（如[图 5-7](ch05.html#ch5fig7)所示），或者使用快速查看“眼睛”按钮查看该对象的内容，这些内容将作为完全渲染的图像、文本或其他任何
    OS X 的 Quick Look API 支持的数据类型呈现（见[图 5-8](ch05.html#ch5fig8)）。在我看来，这相当酷。
- en: '![image](graphics/f05-06.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-06.jpg)'
- en: '*Figure 5-6: Inspecting an object while at a breakpoint*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-6：在断点处检查对象*'
- en: '![image](graphics/f05-07.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-07.jpg)'
- en: '*Figure 5-7: Inspecting an object’s contents in memory*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-7：检查对象在内存中的内容*'
- en: '![image](graphics/f05-08.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-08.jpg)'
- en: '*Figure 5-8: Examining the current state of a variable with the Quick Look
    button. In this case, you’re looking at the* `_statusBar` *of the UIApplication
    delegate window, which Xcode will display as an actual image.*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-8：使用 Quick Look 按钮检查变量当前状态。在此示例中，你查看的是* `_statusBar` *，它是 UIApplication
    委托窗口的属性，Xcode 会将其显示为实际的图像。*'
- en: '***Manipulating Variables and Properties***'
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***操作变量和属性***'
- en: You can do more than just view the contents of variables and objects from lldb.
    For example, let’s try breaking on the same line used to test the `frame variable`
    command back in [Listing 5-2](ch05.html#ch5ex2).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你不仅可以查看变量和对象的内容，还可以使用 lldb 来执行更多操作。例如，让我们尝试在[示例 5-2](ch05.html#ch5ex2)中测试 `frame
    variable` 命令时所使用的相同代码行。
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When the debugger reaches this line, imagine you want to examine the contents
    of UITextView’s *text* attribute and change its value before the program continues.
    You can do this with the `expr` command, using traditional Objective-C syntax,
    as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当调试器到达这一行时，假设你想检查 UITextView 的 *text* 属性的内容并在程序继续执行前修改其值。你可以使用 `expr` 命令，采用传统的
    Objective-C 语法来做到这一点，如下所示：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When execution resumes, the value of that text box in the UI should have changed.
    Because lldb doesn’t know the return type of a method called in this way, you
    have to specify the type using `(void)` with the `expr` command. Similarly, if
    you were calling something that returned an `int`, you’d need to explicitly cast
    to that type instead. For simple assignment operations, like `myInteger = 666`
    or similar, as opposed to method calls, simply enter `expr` and the assignment
    as one command.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行恢复时，UI 中该文本框的值应该已经改变。因为 lldb 无法知道以这种方式调用的方法的返回类型，所以你需要使用 `(void)` 指定类型并配合
    `expr` 命令来进行操作。类似地，如果你调用的是返回 `int` 的方法，也需要显式地将其转换为该类型。对于简单的赋值操作，例如 `myInteger
    = 666` 或类似操作，不同于方法调用，你只需输入 `expr` 和赋值命令即可。
- en: '**NOTE**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*When using lldb from the command line in Xcode, the GUI will autocomplete
    object method names, giving you a brief description and their return type. See
    [Figure 5-9](ch05.html#ch5fig9) for an example.*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*在 Xcode 的命令行中使用 lldb 时，图形界面会自动补全对象方法名称，并提供简要描述和返回类型。请参见[图 5-9](ch05.html#ch5fig9)中的示例。*'
- en: '![image](graphics/f05-09.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f05-09.jpg)'
- en: '*Figure 5-9: Nifty lldb method name completion in Xcode*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-9：Xcode 中巧妙的 lldb 方法名称自动补全*'
- en: Keep in mind that you’re not limited to manipulating objects that are declared
    in your code. You can also manipulate framework classes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，您不仅仅限于操作在代码中声明的对象。您还可以操作框架类。
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: For this kind of interactive manipulation and interrogation, I often find it
    useful to set a breakpoint on `didReceiveMemoryWarning` in the application delegate
    because this method will be present in every application. When I want to inspect
    the program’s state while running it in the iOS Simulator, I select Hardware →
    Simulate Memory Warning. Once I’ve done my twiddling, I simply continue the application
    with `cont`. You can also do this from the Xcode UI with the Pause Execution button.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种交互式操作和查询，我通常发现将断点设置在应用程序代理的 `didReceiveMemoryWarning` 方法上非常有用，因为这个方法在每个应用程序中都会存在。当我想在
    iOS 模拟器中运行程序时检查其状态时，我选择硬件 → 模拟内存警告。完成调整后，我只需通过 `cont` 继续应用程序。您也可以通过 Xcode 界面上的暂停执行按钮来执行此操作。
- en: '***Breakpoint Actions***'
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***断点动作***'
- en: '*Breakpoint actions* are not well-documented but are quite useful. They allow
    you to create breakpoints that trigger only under certain conditions, and they
    can perform complex actions when these breakpoints are hit. You can set them up
    to automatically resume execution after performing these actions or even have
    them trigger only after a line is hit a certain number of times. Logging and using
    speech synthesis to present program information are the simplest actions you can
    set for a breakpoint, but you can also interrogate objects, read and manipulate
    variables, and so forth. Basically, breakpoint actions can do anything you can
    do from the lldb command line, plus a few other niceties.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*断点动作* 文档不多，但非常有用。它们允许您创建仅在特定条件下触发的断点，并且在这些断点被命中时可以执行复杂的操作。您可以设置它们在执行这些操作后自动恢复执行，或者甚至在某行代码被命中特定次数后才触发。记录信息和使用语音合成展示程序信息是您可以为断点设置的最简单操作，但您还可以查询对象、读取和操作变量等。基本上，断点动作能够做任何您能通过
    lldb 命令行做的事情，并且还能做一些额外的操作。'
- en: Let’s walk through creating a breakpoint action one step at a time.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步步地演示如何创建一个断点动作。
- en: Create a breakpoint by clicking in the breakpoint gutter.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击断点区域创建一个断点。
- en: CTRL-click the breakpoint and select **Edit Breakpoint**.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按住 CTRL 键点击断点并选择**编辑断点**。
- en: Click **Add Action**.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加动作**。
- en: Check the **Automatically continue after evaluating** box.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选**评估后自动继续**框。
- en: For the simplest type of breakpoint action, simply select the **Log message**
    action. Here, you can print simple messages, along with the breakpoint name and
    hit count (see [Figure 5-10](ch05.html#ch5fig10)). You can ignore the expression
    option because it’s not terribly straightforward to use.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于最简单的断点动作类型，只需选择**记录信息**动作。在这里，您可以打印简单的消息，以及断点名称和命中次数（参见[图 5-10](ch05.html#ch5fig10)）。您可以忽略表达式选项，因为它并不特别直观。
- en: After adding a simple log message, you can click the **+** button to add another
    action. This time, select **Debugger Command**.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加了简单的日志消息后，您可以点击**+**按钮添加另一个动作。这次，选择**调试器命令**。
- en: Here, you can enter basic lldb expressions—most commonly, using the `po` command
    to print the description of an object. See [Figure 5-11](ch05.html#ch5fig11) for
    an example.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，您可以输入基本的 lldb 表达式——最常见的是使用 `po` 命令来打印对象的描述。示例请参见[图 5-11](ch05.html#ch5fig11)。
- en: '![image](graphics/f05-10.jpg)'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f05-10.jpg)'
- en: '*Figure 5-10: Using a breakpoint action to do a simple log entry. In this example,
    you’ll log a message, along with the number of times the breakpoint has been hit,
    using the* `%H` *placeholder.*'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 5-10：使用断点动作进行简单的日志记录。在此示例中，您将记录一条消息，并使用* `%H` *占位符记录断点被命中的次数。*'
- en: '![image](graphics/f05-11.jpg)'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f05-11.jpg)'
- en: '*Figure 5-11: In addition to simply logging, you can execute an arbitrary lldb
    command. In this case, you’ll use the* `po` *command to print the description
    of the object returned by the* `path` *method.*'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 5-11：除了简单的记录之外，您还可以执行任意 lldb 命令。在这种情况下，您将使用* `po` *命令打印由* `path` *方法返回的对象描述。*'
- en: Optionally, add a breakpoint condition to specify when the actions you’ve defined
    are executed ([Figure 5-12](ch05.html#ch5fig12)).
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，添加断点条件以指定何时执行您定义的动作（[图 5-12](ch05.html#ch5fig12)）。
- en: '![image](graphics/f05-12.jpg)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f05-12.jpg)'
- en: '*Figure 5-12: Two actions and a breakpoint condition. For the condition, you’ll
    ensure that the length of the path is not zero before executing the breakpoint
    action, specifying the return value* `(BOOL)`.'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 5-12：两个操作和一个断点条件。对于条件，你需要确保路径的长度不为零，然后才执行断点操作，指定返回值* `(BOOL)`。'
- en: Try following these steps until you feel comfortable using breakpoint actions,
    and then move on to the next section for some specific ways to apply lldb in a
    security context.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试按照这些步骤操作，直到你熟悉使用断点操作，然后继续下一个部分，了解如何在安全环境中应用 lldb 的一些具体方法。
- en: '**Using lldb for Security Analysis**'
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用 lldb 进行安全分析**'
- en: These are all useful tricks, but how do you put them together to find new security
    issues or test security assertions? Let’s take a look at a couple scenarios where
    using the debugger can help you nail down more concrete issues.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是有用的技巧，但如何将它们结合起来，找到新的安全问题或测试安全断言呢？让我们看几个示例，看看使用调试器如何帮助你发现更具体的问题。
- en: '***Fault Injection***'
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***故障注入***'
- en: Say you have an application that uses a custom binary network protocol to marshal
    data between the client and a remote server. This can make it difficult to intercept
    and modify data with an off-the-shelf proxy, but you’d like to determine whether
    malformed data in certain parameters could cause a program to crash. You can also
    manipulate data to make future testing easier.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个应用程序，它使用自定义二进制网络协议在客户端和远程服务器之间传输数据。这可能会使得使用现成的代理拦截和修改数据变得困难，但你想确定在某些参数中，格式错误的数据是否会导致程序崩溃。你还可以操作数据，以便将来的测试变得更容易。
- en: 'Since you can change data, you might want to replace, for example, a randomly
    generated key with one of your choosing. You can do that from within the debugger,
    as shown in [Listing 5-4](ch05.html#ch5ex4). This results in data being encrypted
    with a known key of your choosing, rather than a potentially unprintable blob.
    The following example modifies the app’s crypto key before it gets saved to the
    Keychain so that further communication uses a different key:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你可以更改数据，你可能想要替换一个随机生成的密钥，换成你选择的密钥。你可以在调试器中执行这一操作，如[清单 5-4](ch05.html#ch5ex4)所示。这样，数据就会使用你选择的已知密钥进行加密，而不是一个可能无法打印的二进制数据块。以下示例在数据保存到
    Keychain 之前修改了应用程序的加密密钥，以便后续的通信使用不同的密钥：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 5-4: Inspecting and changing object values in memory*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 5-4：检查和更改内存中的对象值*'
- en: At ➊, the code prints the variables of the current frame, noting the arguments
    sent to the `addToKeychain:forService:` selector. The key this example is interested
    in is stored in the `item` argument and added to a dictionary. Inspecting these
    (➋ and ➌) reveals the value of the key. The code then alters the Keychain dictionary
    using the `expr` command ➍. At ➎, the program verifies that the new `NSString`
    is now the current value of the key.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊，代码打印出当前帧的变量，注意到传递给`addToKeychain:forService:`选择器的参数。这个示例关注的键存储在`item`参数中，并被添加到字典中。检查这些（➋和➌）会显示键的值。然后，代码使用`expr`命令
    ➍ 修改了 Keychain 字典。在➎，程序验证新的`NSString`现在是该键的当前值。
- en: '***Tracing Data***'
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***数据跟踪***'
- en: 'If you have an application that encrypts data with a master password, it may
    be useful to examine that data before it gets encrypted. It may not always be
    immediately obvious that data will hit the encryption routine by default. Consider
    [Listing 5-5](ch05.html#ch5ex5):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个使用主密码加密数据的应用程序，可能有必要在数据被加密之前检查它。默认情况下，数据是否会进入加密例程并不总是显而易见。请参考[清单 5-5](ch05.html#ch5ex5)：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 5-5: Examining frame variables with lldb*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 5-5：使用 lldb 检查帧变量*'
- en: If you break on the `encrypt:` selector ➋, you can examine the local variables
    using the `frame variable` command ➊. Notice that the output shows both `data`
    and `encData`. The former ➌ is the interesting bit in this example, because that’s
    the data that will be encrypted and returned by the routine. This tracing technique
    can also be used to examine and manipulate data to be sent over the wire, before
    it hits the encryption routines.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在`encrypt:`选择器 ➋ 设置断点，你可以使用`frame variable`命令 ➊ 检查局部变量。注意，输出中显示了`data`和`encData`。前者
    ➌ 是这个示例中感兴趣的部分，因为它是将被加密并由例程返回的数据。这种跟踪技术还可以用于检查和修改将通过网络发送的数据，在它到达加密例程之前。
- en: '***Examining Core Frameworks***'
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***检查核心框架***'
- en: 'lldb is also useful for digging in to the weird quirks of Apple’s APIs—I recommend
    you use it when you’re confused by an API’s behavior. For instance, when looking
    into `NSURLCache`, I noticed the behavior in [Listing 5-6](ch05.html#ch5ex6):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: lldb在深入研究Apple的API的奇怪行为时也非常有用——当你对某个API的行为感到困惑时，我建议你使用它。例如，在查看`NSURLCache`时，我注意到在[清单
    5-6](ch05.html#ch5ex6)中的行为：
- en: '[PRE14]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*Listing 5-6: Some curious behavior of the* `NSURLCache` *API*'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 5-6：`NSURLCache` API的某些奇怪行为*'
- en: Here, even though I called the `removeAllCachedResponses` method ➊, the current
    disk usage is still 98304 bytes ➋. Alas, it appears that clearing the cache is
    useless. Fear not—you’ll see some solutions to this problem in [Chapter 9](ch09.html#ch09).
    In the meantime, you may want to play around with some of the internals yourself.
    This can help you figure out some of the workings of the iOS platform and give
    you deeper insight into how your application is behaving.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，尽管我调用了`removeAllCachedResponses`方法➊，当前的磁盘使用量仍然是98304字节➋。唉，似乎清除缓存是无效的。别担心——你将在[第9章](ch09.html#ch09)看到一些解决方案。与此同时，你可能想自己尝试一些内部机制。这可以帮助你了解iOS平台的一些工作原理，并对你的应用程序行为有更深入的理解。
- en: '**Closing Thoughts**'
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**结束语**'
- en: All of these debugging and inspection techniques can be useful when trying to
    debug your own application or understand a new codebase quickly. However, you
    may not always have access to the source code of the product you’re working with.
    In these cases, you’ll want to know some basic black-box testing techniques, which
    I will cover in [Chapter 6](ch06.html#ch06).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些调试和检查技巧在调试你自己的应用程序或快速了解一个新代码库时都很有用。然而，你可能并不总是能访问到你正在使用的产品的源代码。在这些情况下，你需要了解一些基本的黑箱测试技巧，我将在[第6章](ch06.html#ch06)中介绍这些技巧。
