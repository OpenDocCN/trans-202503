- en: Chapter 13. Debugging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章. 调试
- en: I’ve been told that not all developers are perfect like you and me. We never
    make mistakes in our code, but sometimes *other* developers make mistakes that
    we have to clean up. When that happens, the debugging features built into Rails
    come in handy. This chapter covers those built-in debugging features, starting
    with the `debug` helper method, which makes it easier to see the values of variables
    in your application’s views.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾听说，并不是所有的开发者像你我一样完美。我们在代码中从不犯错，但有时*其他*开发者会犯错，我们需要清理这些错误。当这种情况发生时，Rails 中内建的调试功能就派上用场了。本章将介绍这些内建的调试功能，从
    `debug` 辅助方法开始，它能帮助你更轻松地查看应用视图中的变量值。
- en: We spent some time looking at the Rails log in previous chapters. In this chapter,
    you’ll also see how to add your own messages to that log. Finally, using the debugger
    gem, you can step inside your application as it’s running to track down really
    tough bugs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们花了一些时间查看了 Rails 日志。在本章中，你还将学习如何向该日志添加自己的消息。最后，使用调试器 gem，你可以在应用运行时进入应用内部，追踪那些非常棘手的
    bug。
- en: The debug Helper
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试辅助方法
- en: Rails includes a view helper method called `debug` that you can use to display
    the value of an instance variable or method call available inside a Rails view.
    This helper wraps its output in `<pre>` tags so it’s easier to read.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 包含一个名为 `debug` 的视图辅助方法，你可以用它来显示 Rails 视图中可用的实例变量或方法调用的值。这个辅助方法会将输出包裹在
    `<pre>` 标签中，使其更容易阅读。
- en: 'For example, let’s see how the output of the `current_user` method changes
    as you move through the application. First edit *app/views/layouts/application.html.erb*
    and add a call to the `debug` helper just below the `yield` method, as shown here:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，看看随着你在应用中移动，`current_user` 方法的输出如何变化。首先编辑 *app/views/layouts/application.html.erb*
    文件，并在 `yield` 方法下方添加对 `debug` 辅助方法的调用，如下所示：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now start the Rails server, if it’s not already running, and go to *http://localhost:3000/login*
    in your browser. You should see the output from the `debug` helper just below
    the Log In button, as shown in [Figure 13-1](ch13.html#debugging_currentunderscoreuser
    "Figure 13-1. Debugging current_user").
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在启动 Rails 服务器（如果尚未启动），并在浏览器中访问 *http://localhost:3000/login*。你应该能看到 `debug`
    辅助方法的输出，显示在“登录”按钮下方，如 [图13-1](ch13.html#debugging_currentunderscoreuser "图13-1.
    调试 current_user") 所示。
- en: '![Debugging current_user](httpatomoreillycomsourcenostarchimages2169108.png.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![调试 current_user](httpatomoreillycomsourcenostarchimages2169108.png.jpg)'
- en: Figure 13-1. Debugging `current_user`
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图13-1. 调试 `current_user`
- en: At this point, the output is simply three dashes on one line followed by three
    dots on the next line. The `debug` helper is using YAML to format its output.
    YAML is a data serialization language used frequently in Rails projects. For example,
    the Rails database configuration file (*config/database.yml*) is in YAML format.
    You also used YAML in [Chapter 10](ch10.html "Chapter 10. Testing") to define
    fixtures that provide default data for tests.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，输出只是三条破折号排成一行，接着是三点省略号排成另一行。`debug` 辅助方法正在使用 YAML 格式化其输出。YAML 是一种在 Rails
    项目中常用的数据序列化语言。例如，Rails 数据库配置文件 (*config/database.yml*) 就是 YAML 格式的。你在 [第10章](ch10.html
    "第10章. 测试") 中也使用了 YAML 来定义为测试提供默认数据的夹具。
- en: In YAML, the three dashes signify the beginning of a document. Three dots indicate
    the end of a YAML document. In other words, this is an empty YAML document. On
    the Log In page `current_user` is `nil`, and the empty YAML document reflects
    that.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 YAML 中，三条破折号表示文档的开始。三点省略号表示 YAML 文档的结束。换句话说，这是一个空的 YAML 文档。在登录页面，`current_user`
    为 `nil`，空的 YAML 文档正是反映了这一点。
- en: Now log in to your application and scroll to the bottom of the posts index page
    to see how the output from `current_user` changed.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在登录到你的应用程序，滚动到帖子索引页面的底部，看看 `current_user` 的输出是如何变化的。
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now the YAML output is a little more fleshed out. The first line starts with
    three dashes followed by `!ruby/object:User` ➊, which represents the type of object
    being shown. In this case, the object is a Ruby object of class `User`. The word
    `attributes` ➋ represents the start of the object’s attributes and their values.
    Below that, you see the `User` model attributes: `id`, `name`, `email`, `created_at`,
    `updated_at`, and `password_digest`.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，YAML 输出稍微更完整了一些。第一行以三条破折号开始，接着是 `!ruby/object:User` ➊，它表示正在显示的对象类型。在这个例子中，对象是一个
    Ruby `User` 类的对象。`attributes` ➋ 代表对象属性及其值的开始。在它下面，你会看到 `User` 模型的属性：`id`、`name`、`email`、`created_at`、`updated_at`
    和 `password_digest`。
- en: Displaying this information is a great way to monitor the state of your application
    as it runs. Unfortunately, using the `debug` helper limits you to seeing values
    only for your current session, and if your application renders nothing in the
    browser window, you won’t be able to see any values at all. In those cases, you
    can rely on the Rails log to track down bugs.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 显示这些信息是监控应用程序运行状态的好方法。不幸的是，使用`debug`助手会限制你只能查看当前会话中的值，如果应用程序在浏览器窗口中没有渲染任何内容，你将无法看到任何值。在这种情况下，你可以依靠Rails日志来追踪错误。
- en: The Rails Logger
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rails日志记录器
- en: Throughout this book, I’ve talked about Rails server output. As the Rails server
    runs, it shows a copy of the development log. You can open the file *log/development.log*
    in your editor to examine that log even when the server is not running.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我谈到了Rails服务器的输出。当Rails服务器运行时，它会显示开发日志的副本。即使服务器没有运行，你也可以在编辑器中打开文件*log/development.log*来查看该日志。
- en: This file may be quite large depending on how much you’ve been using the application
    the log belongs to. You can use the `bin/rake log:clear` command to clear your
    application’s log files.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件可能会很大，具体取决于你使用应用程序的频率。你可以使用`bin/rake log:clear`命令来清除应用程序的日志文件。
- en: Log Levels
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志级别
- en: The Rails logger uses levels named `:debug`, `:info`, `:warn`, `:error`, `:fatal`,
    and `:unknown`. These levels indicate the severity of the message being logged.
    The level is assigned by the developer when a message is logged.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Rails日志记录器使用名为`:debug`、`:info`、`:warn`、`:error`、`:fatal`和`:unknown`的级别。这些级别表示日志消息的严重性。级别是由开发者在记录消息时分配的。
- en: If the level is equal to or higher than the log level configured for the current
    environment, the message is added to the corresponding log file. The default log
    level in the development and test environments is `:debug` and above, and the
    default log level in the production environment is `:info` and above.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果日志级别等于或高于当前环境配置的日志级别，则该消息会添加到相应的日志文件中。开发和测试环境中的默认日志级别是`:debug`及以上，而生产环境中的默认日志级别是`:info`及以上。
- en: Because the default log level in production does not display the `:debug` level,
    you can leave these debug messages in your code without worrying about cluttering
    up the logs when your application is deployed and running.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因为生产环境中的默认日志级别不显示`:debug`级别的消息，你可以放心地将这些调试消息留在代码中，而不必担心在应用程序部署并运行时会使日志变得杂乱。
- en: Logging
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志记录
- en: Each of the log levels has a corresponding method used to print messages. For
    example, you can call `logger.debug "`*`Message`*`"` to add a message with the
    level `:debug` to the log.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 每个日志级别都有一个相应的方法用于打印消息。例如，你可以调用`logger.debug "`*`Message`*`"`来将一个`debug`级别的消息添加到日志中。
- en: You’ve already seen how to use the `debug` helper to show values in views. Rails
    logger messages are typically used in models and controllers.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看过如何使用`debug`助手在视图中显示值。Rails的日志消息通常用于模型和控制器中。
- en: 'Let’s add the value of `current_user` to the log and compare it to what is
    shown in the browser. Open the file *app/controllers/posts_controller.rb* in your
    editor and add the logger statement shown here to the `PostsController`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`current_user`的值添加到日志中，并将其与浏览器中显示的内容进行比较。打开你的编辑器中的文件*app/controllers/posts_controller.rb*，并将这里显示的日志语句添加到`PostsController`中：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This line ➊ adds the output of `current_user` to the development log every
    time the posts `index` action is called. Refresh the page in your browser and
    examine the log output in your terminal:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行 ➊每次调用`posts`的`index`操作时，都将`current_user`的输出添加到开发日志中。刷新浏览器中的页面，并检查终端中的日志输出：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `logger.debug` converts the value of the `current_user` method to a string
    and adds it to the log as `#<User:0x007fd3c94d4e10>` ➊. Unfortunately, when a
    Ruby object like `current_user` is converted to a string, the default representation
    is the object’s `class` followed by its `object_id`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`logger.debug`将`current_user`方法的值转换为字符串，并将其作为`#<User:0x007fd3c94d4e10>` ➊添加到日志中。不幸的是，当像`current_user`这样的Ruby对象被转换为字符串时，默认的表示方式是对象的`class`后跟其`object_id`。'
- en: What you want to do is `inspect` the object. The `inspect` method displays attributes
    and values when called on a Rails model. Change the call to `current_user` that
    you just added to the `PostsController` to `current_user.inspect` and refresh
    the page in your browser again.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你要做的是`inspect`这个对象。`inspect`方法在Rails模型上调用时会显示属性和值。将你刚才添加到`PostsController`中的`current_user`调用更改为`current_user.inspect`，然后再次刷新浏览器中的页面。
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This output is much better. The value of `current_user` is shown ➊ with all
    attributes, just as it appears in the Rails console. The Rails logger displays
    any string you send to it. I sometimes label the data that I’m logging and add
    characters like stars to make the data stand out more:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输出要好得多。`current_user` 的值显示 ➊，包含所有属性，就像在 Rails 控制台中看到的一样。Rails 日志记录器会显示你发送给它的任何字符串。有时候，我会为日志中的数据加上标签，并添加像星号这样的字符，以便数据更突出：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You may have had some trouble locating the value of `current_user` in output
    before, but with human-readable labels, it is easier to spot.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你之前可能在输出中很难找到 `current_user` 的值，但现在有了人类可读的标签，找起来就容易多了。
- en: Debugger
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试器
- en: Sometimes simply seeing the values of variables after the fact is not enough
    to debug an issue. The Ruby debugger lets you step into your application as it
    runs. Inside the debugger, you can see code as it is executed, examine the values
    of variables, and even change values.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，单纯查看变量的值并不足以帮助调试问题。Ruby 调试器让你能够在应用程序运行时逐步进入。你可以在调试器中看到代码的执行过程，检查变量的值，甚至修改值。
- en: First, edit your application’s *Gemfile* to add the debugger gem. For Ruby version
    2.0 or greater, you should use the byebug gem. Older versions of Ruby should use
    the debugger gem.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，编辑你的应用程序的*Gemfile*，添加调试器 gem。对于 Ruby 版本 2.0 或更高版本，应该使用 byebug gem。对于旧版本的
    Ruby，则应使用 debugger gem。
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The correct gem for your Ruby version is commented out at the bottom of the
    *Gemfile*. Remove the `#` from the beginning of the line and save the file. The
    debugger isn’t needed in the production environment, so this line only adds it
    to the development and test groups.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于你 Ruby 版本的正确 gem 已在 *Gemfile* 底部注释掉。去掉行首的 `#` 并保存文件。生产环境不需要调试器，所以这行代码只会将其添加到开发和测试组。
- en: 'Because you changed the *Gemfile*, remember to update installed gems with the
    `bin/bundle install` command. You also need to restart the Rails server:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你修改了 *Gemfile*，记得使用 `bin/bundle install` 命令来更新已安装的 gems。你还需要重新启动 Rails 服务器：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now that you’ve installed the debugger, let’s see what it can do.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经安装了调试器，接下来让我们看看它能做什么。
- en: Entering the Debugger
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进入调试器
- en: 'If you call the `debugger` method in your code, your application stops executing
    when it reaches that call, and Rails launches the debugger. For example, remove
    the logger statements you added to the posts `index` action earlier in *app/controllers/posts_controller.rb*
    and instead use the debugger:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在代码中调用 `debugger` 方法，当应用程序执行到该调用时，它会暂停并启动调试器。例如，去掉你之前在 *app/controllers/posts_controller.rb*
    中 posts `index` 动作里添加的日志语句，改用调试器：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When the `index` action is called, execution pauses at the `debugger` statement,
    and the debugger is started. Refresh the posts index page in your browser. The
    page shouldn’t finish loading. Check the server output in your terminal, and you
    should see the debugger prompt:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用 `index` 动作时，执行会在 `debugger` 语句处暂停，调试器也会启动。刷新浏览器中的 posts 索引页面。页面应该不会加载完成。检查终端中的服务器输出，你应该能看到调试器提示符：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the normal server output, you should see a line indicating the current position
    ➊ in the source code. In this case, execution is paused at line 9 inside *app/controllers/posts_controller.rb*.
    Next, the output ➋ shows your place in the code. You should see 10 lines of code
    with line 9 in the center. Finally, the debugger prompt ➌ is waiting for your
    input.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常的服务器输出中，你应该能看到一行指示当前代码位置的提示 ➊。在这个例子中，执行暂停在 *app/controllers/posts_controller.rb*
    文件的第 9 行。接着，输出 ➋ 会显示你在代码中的位置。你应该会看到以第 9 行为中心的 10 行代码。最后，调试器提示符 ➌ 等待你的输入。
- en: Debugger Commands
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试器命令
- en: The debugger accepts a variety of commands for working with your application’s
    code. This section covers the most common commands. Unless otherwise noted, each
    of these commands can be abbreviated using the first letter of its name.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器接受多种命令来操作你的应用程序代码。本节涵盖了最常用的命令。除非另有说明，每个命令都可以使用其名称的首字母缩写。
- en: 'Start by entering the `help` command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先输入 `help` 命令：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `help` command shows a list of all available debugger commands. You can
    also follow `help` with the name of another command for information on a specific
    command.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`help` 命令会显示所有可用的调试器命令列表。你也可以在 `help` 后面跟上其他命令的名称，以获取关于特定命令的信息。'
- en: When you entered the debugger, you were shown 10 lines of code around your current
    position. The `list` command displays the next 10 lines of code inside the debugger.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当你进入调试器时，系统会显示当前位置周围的 10 行代码。`list` 命令会在调试器中显示接下来的 10 行代码。
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Each time you enter the `list` command another 10 lines of code are displayed.
    In this case, the current file has only five more lines of code, so those five
    lines are shown. Enter `list-` to see the previous 10 lines of code, and enter
    `list=` to show the code around your current position:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你输入`list`命令时，都会显示另外10行代码。在这种情况下，当前文件只剩下五行代码，因此显示这五行。输入`list-`可以查看前10行代码，输入`list=`则可以显示当前行周围的代码：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now that you know where you are in the code, you might want to examine the
    values of some variables. The `var` command displays currently defined variables
    and their contents. To see local variables, enter the `var local` command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道了自己在代码中的位置，你可能想查看一些变量的值。`var`命令会显示当前已定义的变量及其内容。要查看局部变量，输入`var local`命令：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, only two local variables are defined. The variable `self` indicates that
    you are inside the `PostsController`. The variable `user_ids` received its contents
    on line 5 in the previous code.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这里仅定义了两个局部变量。变量`self`表示你当前在`PostsController`内。变量`user_ids`在之前的代码的第5行接收了它的内容。
- en: 'List instance variables and their values with the `var instance` command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`var instance`命令列出实例变量及其值：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Quite a few instance variables are already defined at this point. The only instance
    variable set by this code is `@current_user`. This instance variable is defined
    in the `current_user` method in `ApplicationController`. The other variables are
    defined by Rails. Note that `@posts` is not defined yet. Your current position
    is line 9, which defines `@posts`, but that line has not yet been executed.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，已经定义了相当多的实例变量。这段代码唯一设置的实例变量是`@current_user`。这个实例变量是在`ApplicationController`的`current_user`方法中定义的。其他变量是由Rails定义的。请注意，`@posts`尚未定义。你当前的位置在第9行，这一行定义了`@posts`，但这一行代码尚未执行。
- en: 'The `display` command adds a variable to the display list inside the debugger.
    If you are especially interested in the value of `user_ids`, for example, enter
    the `display user_ids` command to add it to the display list, as shown here:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`display`命令将一个变量添加到调试器中的显示列表。如果你特别关心`user_ids`的值，可以输入`display user_ids`命令将其添加到显示列表，如下所示：'
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can also show the contents of the display list and their values with the
    `display` command, abbreviated `disp`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`display`命令（简写为`disp`）显示显示列表的内容及其值：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: To remove a variable from the display list, use the `undisplay` command followed
    by the number corresponding to a variable in the list. For example, `undisplay
    1` removes `user_ids` from the display list.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要从显示列表中移除一个变量，使用`undisplay`命令后跟列表中对应变量的编号。例如，`undisplay 1`会将`user_ids`从显示列表中移除。
- en: Use the `eval` command to evaluate any Ruby code you like and print its value.
    This command is abbreviated `p`, as in print. For example, you might want to print
    the length of the `user_ids` array or the output from the `current_user` method.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`eval`命令可以评估你喜欢的任何Ruby代码，并打印其值。这个命令的简写是`p`，就像print。例如，你可能想打印`user_ids`数组的长度或`current_user`方法的输出。
- en: '[PRE17]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The debugger is a Ruby shell, so you can also evaluate Ruby commands by simply
    entering them at the prompt. The `eval` command is not even necessary. For example,
    set the value of `user_ids` to an empty array by entering this statement at the
    debugger prompt:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器是一个Ruby shell，因此你也可以通过在提示符下直接输入命令来评估Ruby代码。甚至不需要使用`eval`命令。例如，通过在调试器提示符下输入以下语句，将`user_ids`的值设置为空数组：
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This prints the return value of the expression `user_ids = []` just as if you
    had typed it in the Rails console.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印表达式`user_ids = []`的返回值，就像你在Rails控制台中输入它一样。
- en: Several commands are available for executing your application’s code inside
    the debugger. The most commonly used command is `next`, which executes the next
    line of code. The `next` command executes methods on the next line of code without
    moving inside the method.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器提供了几个命令，用于在调试过程中执行应用程序的代码。最常用的命令是`next`，它执行下一行代码。`next`命令会执行下一行代码中的方法，但不会进入方法内部。
- en: The `step` command is similar, but it also shows you each line that executes
    inside method calls. The `step` command moves through your application and its
    dependencies literally one line of code at a time. You can use it to find bugs
    in the Rails framework or other gems used by your application.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`step`命令与之类似，但它还会显示每一行在方法调用内部执行的情况。`step`命令会逐行执行你的应用程序及其依赖项的代码。你可以用它来查找Rails框架或应用程序中使用的其他gem中的错误。'
- en: When you are finished moving around in your code, use the `continue` command
    to resume execution and finish the current request. If you’ve been following along
    throughout this section, you may remember you set the value of `user_ids` to an
    empty array. When you `continue` execution and the posts index page finally renders,
    no posts are displayed. Because you set `user_ids` to an empty array, the `@posts`
    instance variable is also empty, and the `render @posts` statement inside the
    `index` view renders nothing.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成了代码中的导航后，使用 `continue` 命令恢复执行并完成当前请求。如果你跟随本节内容进行操作，你可能会记得你将 `user_ids` 的值设置为空数组。当你
    `continue` 执行并且帖子索引页面最终渲染时，不会显示任何帖子。因为你将 `user_ids` 设置为空数组，`@posts` 实例变量也为空，`index`
    视图中的 `render @posts` 语句不会渲染任何内容。
- en: The Ruby debugger probably isn’t something you’ll use every day, and some developers
    never use it. But if you ever encounter a really hard-to-find bug, the debugger
    is invaluable.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby 调试器可能不是你每天都会使用的工具，某些开发者甚至从不使用它。但如果你遇到一个非常难以发现的 bug，调试器将是无价的。
- en: Summary
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter described several debugging techniques. Displaying values in your
    application’s views with the `debug` helper method or adding data to the log file
    with `logger` statements will help you track down most bugs. The interactive debugger
    provides complete control over your application, allowing you to step through
    your code and pinpoint bugs that are particularly hard to find.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述了几种调试技术。使用 `debug` 辅助方法在应用程序视图中显示值，或通过 `logger` 语句将数据添加到日志文件中，可以帮助你追踪大多数
    bug。交互式调试器提供了对应用程序的完全控制，允许你逐步执行代码并定位那些特别难以发现的 bug。
- en: The next chapter covers web application programming interfaces, or APIs. We’ll
    discuss using other application’s APIs and creating your own.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍 Web 应用程序编程接口（API）。我们将讨论如何使用其他应用程序的 API 并创建你自己的 API。
- en: Exercises
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: '| Q: | 1\. Using the `debug` helper method, display the contents of each post
    as it is rendered on the posts index page. Add a `debug` call inside the partial
    for each type of post. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 问题: | 1\. 使用 `debug` 辅助方法，在帖子索引页面渲染时显示每个帖子的内容。在每种类型的帖子部分内部添加一个 `debug` 调用。|'
- en: '| Q: | 2\. Add the `id` and `type` of each post in the `@posts` instance variable
    to the log using a call to `logger.debug` in the `index` action of *app/controllers/posts_controller.rb*.
    |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 问题: | 2\. 使用 `logger.debug` 在 *app/controllers/posts_controller.rb* 的 `index`
    动作中，将 `@posts` 实例变量中每个帖子的 `id` 和 `type` 添加到日志中。|'
- en: '| Q: | 3\. Practice using the debugger to explore your application’s code.
    Use the `next` command in the debugger to see what happens when a user logs in
    to the application. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 问题: | 3\. 练习使用调试器探索你应用程序的代码。使用调试器中的 `next` 命令查看用户登录应用程序时会发生什么。|'
