- en: Appendix B. Parsing Command-Line Options
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录 B. 解析命令行选项
- en: 'A typical UNIX command line has the following form:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的 UNIX 命令行具有以下形式：
- en: Note
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'An option takes the form of a hyphen (`-`) followed by a unique character identifying
    the option and a possible argument for the option. An option that takes an argument
    may optionally be separated from that argument by white space. Multiple options
    can be grouped after a single hyphen, and the last option in the group may be
    one that takes an argument. According to these rules, the following commands are
    all equivalent:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一个选项的形式是一个连字符（`-`）后跟一个唯一字符来标识选项，后面可能跟一个选项的参数。一个选项如果有参数，可以选择与参数之间用空格分开。多个选项可以在一个连字符后组合在一起，且组合中的最后一个选项可能是需要参数的选项。根据这些规则，以下命令都是等效的：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the above commands, the *-l* and *-i* options don’t have an argument, while
    the *-f* option takes the string *patterns* as its argument.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，*–l* 和 *–i* 选项没有参数，而 *–f* 选项将字符串 *patterns* 作为其参数。
- en: Since many programs (including some of the example programs in this book) need
    to parse options in the above format, the facility to do so is encapsulated in
    a standard library function, *getopt()*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由于许多程序（包括本书中的一些示例程序）需要按上述格式解析选项，因此提供此功能的标准库函数为 *getopt()*。
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: See main text for description of return value
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 参见正文中的描述，了解返回值的详细信息。
- en: The *getopt()* function parses the set of command-line arguments given in *argc*
    and *argv*, which would normally be taken from the arguments of the same name
    to *main()*. The *optstring* argument specifies the set of options that *getopt()*
    should look for in *argv*. This argument consists of a sequence of characters,
    each of which identifies an option. SUSv3 specifies that *getopt()* should permit
    at least the characters in the 62-character set `[a-zA-Z0-9]` as options. Most
    implementations allow other characters as well, with the exception of `:`, `?`,
    and `-`, which have special meaning to *getopt()*. Each option character may be
    followed by a colon (`:`), indicating that this option expects an argument.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*getopt()* 函数解析在 *argc* 和 *argv* 中给定的一组命令行参数，这些参数通常来自于传递给 *main()* 的同名参数。*optstring*
    参数指定了 *getopt()* 在 *argv* 中应查找的选项集合。该参数由一系列字符组成，每个字符表示一个选项。SUSv3 指定 *getopt()*
    至少应允许 `[a-zA-Z0-9]` 字符集中的字符作为选项。大多数实现还允许其他字符，除了 `:`, `?`, 和 `-`，这些字符对 *getopt()*
    有特殊意义。每个选项字符后面可以跟一个冒号（`:`），表示该选项需要一个参数。'
- en: We parse a command line by calling *getopt()* repeatedly. Each call returns
    information about the next unprocessed option. If an option was found, the option
    character is returned as the function result. If the end of the option list was
    reached, *getopt()* returns -1\. If an option has an argument, *getopt()* sets
    the global variable *optarg* to point to that argument.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过重复调用 *getopt()* 来解析命令行。每次调用返回有关下一个未处理选项的信息。如果找到了选项，则返回选项字符作为函数结果。如果已达到选项列表的末尾，*getopt()*
    返回 -1。如果选项有参数，*getopt()* 会将全局变量 *optarg* 设置为指向该参数的地址。
- en: Note that the function result of *getopt()* is *int*. We must not assign the
    result of *getopt()* to a variable of type *char*, because the comparison of the
    *char* variable with -1 won’t work on systems where *char* is unsigned.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，*getopt()* 的函数返回值是 *int* 类型。我们不能将 *getopt()* 的结果赋值给 *char* 类型的变量，因为在 *char*
    为无符号类型的系统上，*char* 变量与 -1 的比较是无效的。
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If an option doesn’t have an argument, then the *glibc getopt()* implementation
    (like most other implementations) sets *optarg* to `NULL`. However, SUSv3 doesn’t
    specify this behavior, so applications can’t portably rely on it (nor is it usually
    needed).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选项没有参数，则 *glibc getopt()* 实现（与大多数其他实现一样）将 *optarg* 设置为 `NULL`。然而，SUSv3 并未指定此行为，因此应用程序不能依赖此行为（通常也不需要）。
- en: SUSv3 specifies (and *glibc* implements) a related function, *getsubopt()*,
    that parses option arguments that consist of one or more comma-separated strings
    of the form *name[=value]*. See the *getsubopt(3)* manual page for details.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3 指定了（并且 *glibc* 实现了）一个相关函数，*getsubopt()*，该函数解析由一个或多个用逗号分隔的字符串组成的选项参数，格式为
    *name[=value]*。详细信息请参见 *getsubopt(3)* 手册页。
- en: 'On each call to *getopt()*, the global variable *optind* is updated to contain
    the index of the next unprocessed element of *argv*. (When multiple options are
    grouped in a single word, *getopt()* does some internal bookkeeping to keep track
    of which part of the word is next to be processed.) The *optind* variable is automatically
    set to 1 before the first call to *getopt()*. There are two circumstances where
    we may make use of this variable:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次调用 *getopt()* 时，全局变量 *optind* 会更新为包含 *argv* 中下一个未处理元素的索引（当多个选项在一个词中组合时，*getopt()*
    会进行一些内部记录，以跟踪下一个要处理的部分）。*optind* 变量在第一次调用 *getopt()* 之前会自动设置为 1。我们可能会在以下两种情况下使用此变量：
- en: If *getopt()* returns -1, indicating that no more options are present and *optind*
    is less than *argc*, then *argv[optind]* is the location of the next nonoption
    word from the command line.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 *getopt()* 返回 -1，表示没有更多选项，并且 *optind* 小于 *argc*，那么 *argv[optind]* 就是命令行中下一个非选项词的位置。
- en: If we are processing multiple command-line vectors or rescanning the same command
    line, then we must explicitly reset *optind* to 1.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们正在处理多个命令行向量或重新扫描相同的命令行，则必须显式地将 *optind* 重置为 1。
- en: 'The *getopt()* function returns -1, indicating the end of the option list,
    in the following circumstances:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当以下情况发生时，*getopt()* 函数返回 -1，表示选项列表的结束：
- en: The end of the list described by *argc* plus *argv* was reached (i.e., *argv[optind]*
    is `NULL`).
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 到达由 *argc* 和 *argv* 描述的列表末尾（即 *argv[optind]* 为 `NULL`）。
- en: The next unprocessed word in *argv* does not start with an option delimiter
    (i.e., *argv[optind][0]* is not a hyphen).
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*argv* 中下一个未处理的词不以选项分隔符开头（即 *argv[optind][0]* 不是一个连字符）。'
- en: The next unprocessed word in *argv* consists of a single hyphen (i.e., argv[optind]
    is -). Some commands understand such a word as an argument with a special meaning,
    as described in Section 5.11.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*argv* 中下一个未处理的词是一个单独的连字符（即 *argv[optind]* 是 -）。某些命令会将这样的词理解为具有特殊意义的参数，如第5.11节所述。'
- en: The next unprocessed word in *argv* consists of two hyphens (`--`). In this
    case, *getopt()* silently consumes the two hyphens and *optind* is adjusted to
    point to the next word after the double hyphen. This syntax enables a user to
    indicate the end of the options of a command, even when the next word on the command
    line (after the double hyphen) looks like an option (i.e., starts with a hyphen).
    For example, if we want to use *grep* to search for the string *-k* inside a file,
    then we would write *grep -- -k myfile*.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*argv* 中下一个未处理的词由两个连字符 (`--`) 组成。在这种情况下，*getopt()* 会默默地消耗这两个连字符，并且 *optind*
    会调整为指向双连字符后面的下一个词。这种语法使得用户能够指示命令的选项结束，即使命令行上的下一个词（双连字符后的词）看起来像是一个选项（即以连字符开头）。例如，如果我们想用
    *grep* 搜索文件中的字符串 *-k*，那么我们可以写作 *grep -- -k myfile*。'
- en: 'Two kinds of errors may occur as *getopt()* processes an option list. One error
    arises when an option that is not specified in *optstring* is encountered. The
    other error occurs when an argument is not supplied to an option that expects
    one (i.e., the option appears at the end of the command line). The rules about
    how *getopt()* handles and reports these errors are as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *getopt()* 处理选项列表时，可能会发生两种类型的错误。一种错误发生在遇到未在 *optstring* 中指定的选项时。另一种错误发生在期望有参数的选项没有提供参数时（即该选项出现在命令行的末尾）。*getopt()*
    处理和报告这些错误的规则如下：
- en: By default, *getopt()* prints an appropriate error message on standard error
    and returns the character `?` as its function result. In this case, the global
    variable *optopt* returns the erroneous option character (i.e., the one that is
    unrecognized or whose argument is missing).
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，*getopt()* 会在标准错误输出上打印适当的错误信息，并返回字符`?`作为其函数结果。在这种情况下，全球变量 *optopt* 返回错误的选项字符（即未识别的选项字符或缺少参数的选项字符）。
- en: The global variable *opterr* can be used to suppress the error messages printed
    by *getopt()*. By default, this variable is set to 1\. If we set it to 0, then
    *getopt()* doesn’t print error messages, but otherwise behaves as described in
    the preceding point. The program can detect the error via the `?` function result
    and display a customized error message.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局变量 *opterr* 可用于抑制 *getopt()* 打印的错误信息。默认情况下，该变量设置为 1。如果将其设置为 0，那么 *getopt()*
    不会打印错误信息，但在其他方面的行为与前述相同。程序可以通过 `?` 函数结果来检测错误，并显示自定义的错误信息。
- en: 'Alternatively, we may suppress error messages by specifying a colon (`:`) as
    the first character in *optstring* (doing so overrides the effect of setting *opterr*
    to 0). In this case, an error is reported as with setting *opterr* to 0, except
    that an option with a missing argument is reported by returning : as the function
    result. This difference in return values allows us to distinguish the two types
    of errors (unrecognized option and missing option argument), if we need to do
    so.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另外，我们可以通过在 *optstring* 中指定冒号（`:`）作为第一个字符来抑制错误信息（这样会覆盖将 *opterr* 设置为 0 的效果）。在这种情况下，错误报告的方式与将
    *opterr* 设置为 0 相同，唯一的区别是，缺少参数的选项会通过返回 `:` 作为函数结果来报告。这种返回值的差异使我们能够区分两种类型的错误（未识别的选项和缺少选项参数），如果我们需要区分它们的话。
- en: The above error-reporting alternatives are summarized in [Table B-1](apb.html#getopt_open_parenthesis_close_parenthesi
    "Table B-1. getopt() error-reporting behavior").
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 上述错误报告替代方法在 [表 B-1](apb.html#getopt_open_parenthesis_close_parenthesi "表 B-1.
    getopt() 错误报告行为") 中进行了总结。
- en: Table B-1. *getopt()* error-reporting behavior
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 表 B-1. *getopt()* 错误报告行为
- en: '| Error-reporting method | *getopt()* displays error message? | Return for
    unrecognized option | Return for missing argument |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 错误报告方法 | *getopt()* 是否显示错误信息？ | 对于未识别选项的返回值 | 对于缺少参数的返回值 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| default (*opterr == 1*) | Y | `?` | `?` |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 默认（*opterr == 1*） | Y | `?` | `?` |'
- en: '| *opterr == 0* | N | `?` | `?` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| *opterr == 0* | N | `?` | `?` |'
- en: '| `:` at start of *optstring* | N | `?` | `:` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| *optstring* 开头的 `:` | N | `?` | `:` |'
- en: Example program
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例程序
- en: '[Example B-1](apb.html#using_getopt_open_parenthesis_close_pare "Example B-1. Using
    getopt()") demonstrates the use of *getopt()* to parse the command line for two
    options: the *-x* option, which doesn’t expect an argument, and the *-p* option
    which does expect an argument. This program suppresses error messages from *getopt()*
    by specifying a colon (`:`) as the first character in *optstring*.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 B-1](apb.html#using_getopt_open_parenthesis_close_pare "示例 B-1. 使用 getopt()")
    演示了使用 *getopt()* 来解析命令行中的两个选项：* -x * 选项，不需要参数，以及 *-p* 选项，需要一个参数。该程序通过在 *optstring*
    中指定冒号（`:`）作为第一个字符，来抑制 *getopt()* 的错误信息。'
- en: 'To allow us to observe the operation of *getopt()*, we include some *printf()*
    calls to display the information returned by each *getopt()* call. On completion,
    the program prints some summary information about the specified options and also
    displays the next nonoption word on the command line, if there is one. The following
    shell session log shows the results when we run this program with different command-line
    arguments:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了观察 *getopt()* 的操作，我们在程序中加入了一些 *printf()* 调用，以显示每次 *getopt()* 调用返回的信息。程序完成后，会打印一些关于指定选项的总结信息，并且如果命令行上有下一个非选项单词，还会显示出来。以下是运行该程序时使用不同命令行参数的结果：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that in the last example above, the string *-x* was interpreted as an argument
    to the *-p* option, rather than as an option.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在上面的最后一个示例中，字符串 *-x* 被解释为 *-p* 选项的一个参数，而不是作为一个选项。
- en: Example B-1. Using *getopt()*
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 B-1. 使用 *getopt()*
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: GNU-specific behavior
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GNU 特有行为
- en: 'By default, the *glibc* implementation of *getopt()* implements a nonstandard
    feature: it allows options and nonoptions to be intermingled. Thus, for example,
    the following are equivalent:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，*glibc* 实现的 *getopt()* 实现了一个非标准功能：它允许选项和非选项交替出现。例如，以下两种方式是等效的：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In processing command lines of the second form, *getopt()* permutes the contents
    of *argv* so that all options are moved to the beginning of the array and all
    nonoptions are moved to the end of the array. (If *argv* contains an element pointing
    to the word `--`, then only the elements preceding that element are subject to
    permutation and interpretation as options.) In other words, the `const` declaration
    of *argv* in the *getopt()* prototype shown earlier is not actually true for *glibc*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理第二种形式的命令行时，*getopt()* 会重新排列 *argv* 的内容，使所有选项移到数组的开头，所有非选项移到数组的末尾。（如果 *argv*
    包含一个指向 `--` 的元素，那么只有该元素之前的元素会被重新排列并解释为选项。）换句话说，之前所示 *getopt()* 原型中 *argv* 的 `const`
    声明在 *glibc* 中并不完全成立。
- en: 'Permuting the contents of *argv* is not permitted by SUSv3 (or SUSv4). We can
    force *getopt()* to provide standards-conformant behavior (i.e., to follow the
    rules listed earlier for determining the end of the option list) by setting the
    environment variable `POSIXLY_CORRECT` to any value. This can be done in two ways:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*argv*的内容重新排列不被SUSv3（或SUSv4）允许。我们可以通过将环境变量`POSIXLY_CORRECT`设置为任何值，强制*getopt()*提供符合标准的行为（即遵循前面列出的确定选项列表结束的规则）。这可以通过两种方式完成：'
- en: From within the program, we can call *putenv()* or *setenv()*. This has the
    advantage that the user is not required to do anything. It has the disadvantages
    that it requires modifications of the program source code and that it changes
    the behavior of only that program.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在程序内部，我们可以调用*putenv()*或*setenv()*。这样做的好处是用户无需进行任何操作。其缺点是需要修改程序源代码，并且只会改变该程序的行为。
- en: 'We can define the variable from the shell before we execute the program:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在执行程序之前从 shell 中定义变量：
- en: '[PRE6]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This method has the advantage that it affects all programs that use *getopt()*.
    However, it also has some disadvantages. `POSIXLY_CORRECT` causes other changes
    in the behavior of various Linux tools. Furthermore, setting this variable requires
    explicit user intervention (most likely by setting the variable in a shell startup
    file).
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种方法的好处是它会影响所有使用*getopt()*的程序。然而，它也有一些缺点。`POSIXLY_CORRECT`会导致 Linux 工具的其他行为变化。此外，设置这个变量需要用户的明确干预（很可能是通过在
    shell 启动文件中设置该变量）。
- en: An alternative method of preventing *getopt()* from permuting command-line arguments
    is to make the first character of *optstring* a plus sign (`+`). (If we want to
    also suppress *getopt()* error messages as described above, then the first two
    characters of *optstring* should be `+:`, in that order.) As with the use of *putenv()*
    or *setenv()*, this approach has the disadvantage that it requires changes to
    the program code. See the *getopt(3)* manual page for further details.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 防止*getopt()*重新排列命令行参数的另一种方法是使*optstring*的第一个字符为加号（`+`）。(如果我们还希望抑制*getopt()*的错误信息，如上所述，那么*optstring*的前两个字符应该是`+:`，按此顺序。）与使用*putenv()*或*setenv()*一样，这种方法的缺点是需要修改程序代码。有关详细信息，请参见*getopt(3)*手册页。
- en: Note
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A future technical corrigendum of SUSv4 is likely to add a specification for
    the use of the plus sign in *optstring* to prevent permutation of command-line
    arguments.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv4 的未来技术更正很可能会添加一个规范，要求在*optstring*中使用加号来防止命令行参数的重新排列。
- en: 'Note that the *glibc getopt()* permuting behavior affects how we write shell
    scripts. (This affects developers porting shell scripts from other systems to
    Linux.) Suppose we have a shell script that performs the following command on
    all of the files in a directory:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，*glibc getopt()*的重新排列行为会影响我们编写 shell 脚本的方式。（这会影响从其他系统移植 shell 脚本到 Linux
    的开发者。）假设我们有一个 shell 脚本，它对目录中的所有文件执行以下命令：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If one of these filenames starts with a hyphen, then the *glibc getopt()* permuting
    behavior would cause that filename to be interpreted as an option to *chmod*.
    This would not happen on other UNIX implementations, where the occurrence of the
    first nonoption (`644`) ensures that *getopt()* ceases looking for options in
    the remainder of the command line. For most commands, (if we don’t set `POSIXLY_CORRECT`,
    then) the way of dealing with this possibility in shell scripts that must run
    on Linux is to place the string `--` before the first nonoption argument. Thus,
    we would rewrite the above line as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其中一个文件名以连字符开头，那么*glibc getopt()*的重新排列行为会导致该文件名被解释为*chmod*的一个选项。这在其他 UNIX 实现中不会发生，因为第一个非选项（`644`）的出现确保了*getopt()*不再继续查找命令行中的选项。对于大多数命令，（如果我们没有设置`POSIXLY_CORRECT`，那么）在必须在
    Linux 上运行的 shell 脚本中处理这种可能性的方法是，在第一个非选项参数之前放置字符串`--`。因此，我们会将上述行重写为：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In this particular example, which employs filename generation, we could alternatively
    write this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定的例子中，使用文件名生成，我们可以改为这样写：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Although we have used the example of filename pattern matching (globbing) above,
    similar scenarios can also occur as a result of other shell processing (e.g.,
    command substitution and parameter expansion), and they can be dealt with similarly,
    by using a `--` string to separate options from arguments.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们上面用了文件名模式匹配（通配符）的示例，但类似的场景也可能由于其他 shell 处理（例如命令替换和参数扩展）而发生，处理方式也可以类似，通过使用`--`字符串来分隔选项和参数。
- en: GNU extensions
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GNU 扩展
- en: 'The GNU C library provides a number of extensions to *getopt()*. We briefly
    note the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: GNU C 库提供了对*getopt()*的多个扩展。我们简要说明如下：
- en: The SUSv3 specification permits options to have only mandatory arguments. In
    the GNU version of *getopt()*, we can place two colons after an option character
    in *optstring* to indicate that its argument is optional. The argument to such
    an option must appear in the same word as the option itself (i.e., no spaces may
    appear between the option and its argument). If the argument is not present, then,
    on return from *getopt()*, *optarg* is set to `NULL`.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SUSv3 规范允许选项仅具有必需的参数。在 GNU 版本的 *getopt()* 中，我们可以在 *optstring* 中的选项字符后放置两个冒号，以表示其参数是可选的。此类选项的参数必须与选项本身在同一个单词中（即，选项与其参数之间不能有空格）。如果没有提供参数，则从
    *getopt()* 返回时，*optarg* 被设置为 `NULL`。
- en: 'Many GNU commands allow a form of long option syntax. A long option begins
    with two hyphens, and the option itself is identified using a word, rather than
    a single character, as in the following example:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多 GNU 命令支持一种长选项语法。长选项以两个连字符开头，选项本身通过一个单词而非单个字符来标识，如以下示例所示：
- en: '[PRE10]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The *glibc* function *getopt_long()* can be used to parse such options.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*glibc* 函数 *getopt_long()* 可用于解析此类选项。'
- en: The GNU C library provides an even more sophisticated (but nonportable) API
    for parsing the command-line, called *argp*. This API is described in the *glibc*
    manual.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GNU C 库提供了一个更为复杂（但不便携）的 API 来解析命令行，称为 *argp*。该 API 在 *glibc* 手册中有描述。
