- en: Chapter 2. The King and His String
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：国王与他的绳子
- en: A Short Yarn
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一根短绳
- en: The King was in a foul mood. I mean a *truly terrible*, scream-at-the-cat, throw-a-snowglobe-out-a-third-story-window
    kind of mood. If you saw him rumbling toward you down the sidewalk, you would
    quickly change sides of the street. If he were your dad, you would write letters
    to Santa year-round asking for a replacement dad. Really, it was capital-*B* Bad
    News Bears for everyone.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 国王心情极差。简直是*非常糟糕*，那种会对猫大喊大叫、把雪花球从三楼窗户扔出去的心情。如果你看到他愤怒地朝你走来，你会立刻换到街对面。如果他是你爸爸，你会一年到头给圣诞老人写信，要求换一个爸爸。真的，对每个人来说，都是资本字母*B*的坏消息。
- en: 'The thing is, the King had lost his favorite possession that morning, somewhere
    between eating his usual breakfast of parched oats and his pre-late-afternoon
    vigorous stroll. He had turned his palace upside-down (literally: the King had
    a lot of money and a lot of servants), but to no avail. When Scarlet and Ruben
    found him, he was weeping bitterly in his study, sitting in an overstuffed armchair
    of solid gold.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 事情是这样的，国王今天早晨丢失了他最心爱的物品，正好发生在他吃完平常的干燕麦后，准备进行他那次快步的午后散步之前。他翻遍了他的宫殿（字面意义上：国王有很多钱，也有很多仆人），但始终没有找到。当斯卡雷特和鲁本找到他时，他正坐在一把由纯金做成的软垫扶手椅上，悲伤得泪流满面。
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159971.png.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2159971.png.jpg)'
- en: “What did it look like?” Scarlet asked.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: “它看起来怎么样？”斯卡雷特问。
- en: “What did *what* look like?” asked the King, gargling slightly on his own salty
    tears as they flowed down his finely coiffed moustache and into his mouth.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: “*什么*看起来像什么？”国王问道，边说边让自己的咸泪顺着精心打理的胡须流到嘴里。
- en: “The thing you lost,” said Ruben.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: “你丢失的东西，”鲁本说。
- en: '“Like a string!” said the King. “Because that’s what it was: a string, with
    a knot on each end to secure my bits and trinkets. This particular string had
    several beads on it that spelled out ‘Property of His Royal Highness, the King,’
    like so:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: “像一根绳子一样！”国王说。“因为那就是它：一根绳子，两端打着结，用来固定我的小物件和装饰品。这根绳子上有几个珠子，拼出了‘国王陛下的财产’字样，就像这样：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: “A string of letters,” said Ruben.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: “一串字母，”鲁本说。
- en: “More like a string of *characters*,” said the King. “Each letter is really
    very unique. The *K*, for instance, is a crooked fellow. And don’t even get me
    started on the *p*—”
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: “更像是一串*字符*，”国王说。“每个字母都非常独特。例如，*K*是个弯曲的家伙。别让我再提*P*了——”
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159973.png.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2159973.png.jpg)'
- en: But Ruben and Scarlet weren’t listening. They were already searching high and
    low for the King’s missing string.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但鲁本和斯卡雷特并没有听。他们已经开始到处寻找国王丢失的绳子。
- en: “Could your string have fallen into this Mysterious Pipe?” Scarlet asked, gesturing
    toward a sputtering black metal pipe with the words *Mysterious Pipe* written
    on it in white chalk.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: “你的绳子会不会掉进这个神秘的管道里？”斯卡雷特问，指着一个冒着黑烟的金属管道，管道上用白色粉笔写着*神秘管道*字样。
- en: “No,” said the King. “The Mysterious Pipe is deceptively narrow at the top,
    and a string as long as mine could never fit into it.”
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: “不行，”国王说。“那神秘的管道顶部极其狭窄，像我这么长的绳子根本塞不进去。”
- en: “How long *is* your string?” Ruben asked.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: “你的绳子有多长？”鲁本问。
- en: '“I’m not sure,” said the King. “I suppose we could count all the characters,
    and then we’d know.” (Take it from me: this would be super boring.)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: “我不确定，”国王说。“我想我们可以数一数所有字符，这样就知道了。”（相信我，这会非常无聊。）
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159975.png.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2159975.png.jpg)'
- en: '“That would be boring,” said Scarlet. “I think there’s a better way.” She walked
    to a corner of the room, blew the dust off a very old Computing Contraption, and
    carefully typed the following at its little green IRB prompt:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: “那样太无聊了，”斯卡雷特说。“我觉得有更好的办法。”她走到房间的一角，吹去一台非常古老的计算装置上的灰尘，小心翼翼地在它的小绿屏幕上输入了以下内容：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: “Great coats!” said the King. “That’s right! I remember now—my string is precisely
    40 characters long. But how did you do that?”
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: “好外套！”国王说。“没错！我现在想起来了——我的绳子正好是40个字符长。可是你们怎么做到的？”
- en: “Ruby has lots of great tricks like this,” said Scarlet. “Here’s another.”
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: “露比有很多类似的好办法，”斯卡雷特说。“这是另一个。”
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The King nodded. “Yes, that’s pretty much what my string looks like in the mirror
    when I hang it up to dry after a refreshing shower.”
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 国王点了点头。“是的，差不多就是我每次洗完澡后挂起来晾干时，它在镜子里看起来的样子。”
- en: In the meantime, Ruben had been counting the number of characters in the King’s
    string using a bit of chalk he found resting near the Mysterious Pipe. “Hang on
    a second,” he said. “I’m counting 42 characters, including the quotation marks
    on each end.”
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，Ruben 正在用他在神秘管道旁找到的粉笔数国王字符串中的字符数。“等一下，”他说，“我数到 42 个字符，包括两端的引号。”
- en: The King snorted like an overweight wiener dog. “You don’t count those!” he
    said. “Those are the little knots on each end that keep the characters contained!
    You only count the characters, not the quotes.”
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 国王像只肥胖的小猎犬一样哼了一声。“你不能把那些算上！”他说，“那些是两端的小结，用来包含字符！你只计算字符，不算引号。”
- en: “And that’s exactly what Ruby does,” explained Scarlet. “But you have to put
    quotes around your strings, or Ruby will think you’re trying to use a *variable*.”
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: “这正是 Ruby 所做的，”Scarlet 解释道，“但你必须给你的字符串加上引号，否则 Ruby 会认为你在试图使用一个*变量*。”
- en: A Bit More About Variables
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于变量的更多内容
- en: Believe you me, this confused the bejeepers out of the King. Since he’s not
    nearly as bright a bulb as you are, I’ll let Ruben and Scarlet spend ages explaining
    variables to him while I take a moment to explain them to you.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 相信我，这个让国王彻底困惑了。由于他不像你那样聪明，我就让 Ruben 和 Scarlet花很长时间给他解释变量的概念，同时我给你解释一下。
- en: A Ruby variable is just a name (without quotes!) that you can give to a *value*
    (which is a piece of information, like the words that make up the King’s string).
    One kind of value is a string; another kind is a *number*, which you already saw
    when Ruby told you that the length of the King’s string was 40.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Ruby 变量只是一个名字（没有引号！），你可以将其赋给一个*值*（这是某种信息，比如构成国王字符串的单词）。一种值是字符串；另一种值是*数字*，你已经见过当
    Ruby 告诉你国王的字符串长度是 40 时使用的数字。
- en: 'You make a variable like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像这样创建一个变量：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The equal sign says to Ruby, “Hey! Take this value on the right and save it
    with the name on the left.” This means that later on, you can type the variable
    name and get the value right back:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 等号告诉 Ruby，“嘿！把右边的这个值保存到左边的这个名字下。”这意味着你以后可以输入变量名，直接得到对应的值：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This could come in handy when you’re trying to keep track of your wayward pet
    (let’s call him Smalls) and his fluctuating weight:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这在你试图追踪你那只走失的小宠物（我们叫它 Smalls）以及它不断变化的体重时，可能会派上用场：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159977.png.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2159977.png.jpg)'
- en: Don’t worry about the 22 and the 4 being repeated back to you; Ruby’s just trying
    to be helpful. Ruby always expects the variable name to be on the left and the
    value to be on the right, so make sure not to mix up the order!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 不用担心 22 和 4 被重复返回给你；Ruby 只是想帮忙。Ruby 总是期望变量名在左边，值在右边，所以一定要小心不要弄错顺序！
- en: You’ll also notice I used `_` (called an *underscore*) instead of a space in
    the variable names. Ruby doesn’t allow spaces in names, so it’s a good practice
    to use `_` instead.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会注意到我在变量名中使用了 `_`（称为*下划线*）而不是空格。Ruby 不允许名字中有空格，因此最好使用 `_` 来代替。
- en: 'It sounds like the King is still getting the hang of strings (imagine my ear
    pressed to the heavy oak door of his study), so I’ll clue you in on one more bit
    of Ruby magic. When you see code like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来国王还在适应字符串（想象一下我把耳朵贴在他书房的厚橡木门上），所以我会再给你介绍 Ruby 的另一点魔法。当你看到像这样的代码时：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'it means you’re *calling* the `reverse` *method* on the string. When we say
    we’re “calling a method,” what we mean is we’re asking Ruby to carry out a command:
    “Hey, Ruby! Reverse this string for me, please!” I’ll go on and on about methods
    later, but for now, you can think of them as commands that work on particular
    Ruby objects. For example, strings can be reversed, but numbers can’t:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 它意味着你在*调用*字符串上的 `reverse` *方法*。当我们说我们在“调用一个方法”时，我们的意思是我们在请求 Ruby 执行一个命令：“嘿，Ruby！请反转这个字符串！”我稍后会详细讲解方法，但现在你可以把它们看作是作用于特定
    Ruby 对象的命令。例如，字符串可以被反转，但数字不行：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`NoMethodError`!? That’s Ruby saying, “Whoa, whoa, *whoa*. I know how to `reverse`
    a string, but I don’t know how to `reverse` a number!” As you practice, you’ll
    get to know which methods go with which kinds of Ruby objects. Author’s honor.
    (I was never a scout.)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`NoMethodError`！？那是 Ruby 在说，“哇，哇，*哇*。我知道如何对字符串执行 `reverse`，但是我不知道如何对数字执行 `reverse`！”随着练习，你会了解到哪些方法适用于哪些
    Ruby 对象。以作者的名誉保证（我从来不是童子军）。'
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159979.png.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2159979.png.jpg)'
- en: Ruby Operators
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ruby 运算符
- en: “Let me see if I’ve got this right,” said the King. “Variables are names for
    Ruby values, like strings and numbers. They don’t have quotes around them and
    can’t have spaces in them. I can use the equal sign to set a variable equal to
    a value, and then I can use my variable’s name to get that value back.”
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: “让我看看我理解对了没有，”国王说。“变量是 Ruby 值的名字，比如字符串和数字。它们没有引号，也不能有空格。我可以用等号将一个变量赋值给一个值，然后我可以用变量的名字来取回这个值。”
- en: “That’s exactly right,” said Ruben.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: “完全正确，”鲁本说。
- en: “And when I see an object followed by a dot followed by a command, that means
    I’m using that command on that object,” said the King.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: “当我看到一个对象后面跟着一个点，再跟着一个命令时，那意味着我正在对这个对象使用这个命令，”国王说。
- en: “Precisely,” said Scarlet.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: “正是如此，”斯卡雷特说。
- en: “You mentioned that I can’t `reverse` a number,” said the King. “That makes
    sense. But what *can* I do to a number?”
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: “你提到过我不能对一个数字使用`reverse`，”国王说。“这很有道理。那么，我*能*对数字做些什么呢？”
- en: '“All sorts of things,” said Ruben. He nudged Scarlet aside and typed at the
    Computing Contraption:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: “各种各样的操作，”鲁本说。他推开斯卡雷特，走到计算设备前打字：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: “Yes, yes,” said the King. “I can add them with `+`, subtract them with `-`,
    multiply them with `*`, and divide them with `/`.”
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: “是的，是的，”国王说，“我可以用 `+` 把它们加在一起，用 `-` 减去，用 `*` 乘以，用 `/` 除以。”
- en: “You’ve probably seen ÷ for division,” Ruben continued, “but in code we can
    just use `/`. For example, 4 ÷ 2 will be `4 / 2`.”
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: “你们可能见过 ÷ 作为除法符号，”鲁本继续说，“但是在代码中我们可以直接使用 `/`。比如，4 ÷ 2 会变成 `4 / 2`。”
- en: “But what can I do that’s *interesting*?” the King complained.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: “但是我能做些什么*有趣*的事情呢？”国王抱怨道。
- en: “What about this?” asked Ruben, as he typed some more.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: “那这个呢？”鲁本问道，一边继续打字。
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: “Aha!” said the King. “*Now* you’re talking. `next` must tell Ruby to calculate
    the *next* number, and `pred` asks Ruby for its *predecessor*, which is the number
    that comes right before it.”
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: “啊哈！”国王说，“*现在*你说到点子上了。`next` 一定是告诉 Ruby 计算 *下一个* 数字，而 `pred` 是请求 Ruby 返回它的 *前驱*，即紧跟在它之前的数字。”
- en: “Right as rain,” said Ruben.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: “正如雨水一样，”鲁本说。
- en: “RAIN!” exclaimed the King, jumping up so forcefully that he knocked his solid
    gold armchair right over. He ran out of the room at what seemed an impossible
    speed for a man of his age, and Ruben and Scarlet followed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: “下雨！”国王惊呼道，猛地跳起，强劲到把他那把纯金的椅子给撞翻了。他以一个对这个年纪来说几乎不可能的速度跑出房间，鲁本和斯卡雷特紧跟其后。
- en: After running for several minutes through the horribly jumbled contents of the
    palace (the King had turned it upside-down, after all), Ruben and Scarlet caught
    up with the King in his main bathroom. He was weeping again, but this time with
    joy, and clutched in his hands was—his string!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在宫殿里穿行了好几分钟，经过一片混乱的内容（毕竟国王把整个宫殿弄得颠倒了），鲁本和斯卡雷特在国王的主浴室赶上了他。他又开始哭泣，不过这次是出于喜悦，而他手中紧紧握着的正是——他的字符串！
- en: “Rain reminded me that I took a refreshing shower after my breakfast of parched
    oats!” blubbered the King. “And here it was, hanging to dry, just as I’d left
    it. I can’t thank you enough!”
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: “下雨提醒我，我在吃完焦干燕麦早餐后洗了个清爽的澡！”国王呜咽着说。“然后它就在这里，挂着晾干，正如我离开时那样。我真是无以为报！”
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2159981.png.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2159981.png.jpg)'
- en: “Careful!” said Scarlet. “Your string’s still a bit wet; look at the beads sliding
    around on it.”
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: “小心！”斯卡雷特说，“你的字符串还是有点湿，看看上面滑动的珠子。”
- en: 'The King sniffed loudly and inspected his string, and the characters on it
    were, in fact, sliding every which way. The King thought for a moment, then double-knotted
    each end of the string to keep his characters from sliding off:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 国王大声吸了吸鼻子，检查了他的字符串，结果字符串上的字符果然在四处滑动。国王想了想，然后将字符串的两端打了双结，以防字符滑掉：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: “Double quotes!” said Scarlet. “Can you use those with Ruby strings?”
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: “双引号！”斯卡雷特说，“你能在 Ruby 字符串中使用它们吗？”
- en: '“Definitely,” said Ruben, “and single- and double-quoted strings work almost
    exactly the same way.” He pried open the King’s medicine cabinet to expose a slightly-less-old
    Computing Contraption, then typed the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: “当然，”鲁本说，“单引号和双引号字符串几乎完全相同。”他打开国王的药柜，露出一台稍微不那么旧的计算设备，然后打出以下内容：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: “See?” said Ruben. “Even when we type single quotes, Ruby repeats double quotes
    back to us. Both work!”
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: “看见了吗？”鲁本说。“即使我们输入单引号，Ruby 也会回显双引号。两者都可以用！”
- en: “Though I think I’ve heard tell,” said the King, “that you can put more complicated
    bits and trinkets in a double-quoted string than a single-quoted one.”
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: “虽然我听说过，”国王说，“你可以在双引号字符串中放入比单引号字符串更复杂的元素和小饰品。”
- en: “That’s true,” said Ruben, “but we’ll get to that in good time.” And he closed
    the King’s medicine cabinet with a gold-plated *click*.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: “那是真的，”鲁本说，“但我们会在适当的时候讲到那个。”然后他用金镶边的*咔哒*一声关上了国王的药箱。
- en: A Smallish Project for You
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的小项目
- en: 'Now that you know a bit about strings, numbers, and variables, let’s put together
    a small project: writing a program to reflect and echo the King’s string. A *reflection*
    of something is just that thing backward, so you’ve probably already guessed that
    we’ll be `reverse`-ing some strings. On the other hand, an *echo* of something
    is just that thing repeated a few times, and we’ll soon see a way to repeat a
    string very quickly and easily. You’ll weep with joy at how simple and easy it
    is. You’ll tear out the pages of this book and use them to dry your tears.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你对字符串、数字和变量有了一些了解，让我们做一个小项目：编写一个程序，反射并回显国王的字符串。*反射* 是指将某物倒过来，所以你可能已经猜到我们会对一些字符串进行
    `reverse` 操作。另一方面，*回显* 是指将某物重复几次，我们很快就会看到一种快速简便地重复字符串的方法。你会为它的简洁与易用感动得泪流满面，甚至会把这本书的页面撕下来擦干眼泪。
- en: Note
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*For some of the longer code examples, we’ll write Ruby scripts instead of
    using IRB! Whenever you see a filename in italics above the code, like* kings_string.rb
    *for the next example, that means you can write the code as a file with the given
    name and run it using the `ruby` command. Peek back at [Chapter 1](../Text/ch01.html
    "Chapter 1. What This Book’s About") if you don’t remember how to do this, or
    ask the nearest adult to help you. You can download all the scripts that appear
    in this book at* [http://nostarch.com/rubywizardry/](http://nostarch.com/rubywizardry/).
    *(But remember, if you’re learning to program, try typing things out yourself
    instead of just reading and running the code!)*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*对于一些较长的代码示例，我们将编写 Ruby 脚本，而不是使用 IRB！当你看到代码上方有文件名并用斜体显示时，比如* kings_string.rb
    *用于下一个示例，这意味着你可以将代码写入一个文件，文件名按给定名称，并使用 `ruby` 命令运行它。如果你不记得怎么做，或者需要帮助，回头看看[第1章](../Text/ch01.html
    "第1章：本书的内容")，或者请最近的成年人帮忙。你可以在* [http://nostarch.com/rubywizardry/](http://nostarch.com/rubywizardry/)
    *下载本书中所有的脚本。*（但记住，如果你在学习编程，尽量自己敲代码，而不是仅仅阅读和运行代码！）*'
- en: Go ahead and make a new file called kings_string.rb. Then, open your file and
    type the following. We’re going to make a short program that shows off the cool
    things you can do by assigning variables and how Ruby can play with strings.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来创建一个新文件，名为 kings_string.rb。然后，打开文件并输入以下内容。我们将编写一个简短的程序，展示通过赋值变量可以做的酷事，并展示
    Ruby 如何处理字符串。
- en: kings_string.rb
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: kings_string.rb
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The first four lines are assigning variables. You can tell by the equal sign.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 前四行是在赋值变量。你可以通过等号看出来。
- en: 'The second line in particular is pretty cool: it defines a variable to hold
    the `kings_string`, but because the `reverse` method makes the string backward,
    `string_reflection` will actually be `"gniK eht ,ssenhgiH layoR siH fo ytreporP"`!'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是第二行，非常酷：它定义了一个变量来保存 `kings_string`，但因为 `reverse` 方法会将字符串倒过来，所以 `string_reflection`
    实际上会是 `"gniK eht ,ssenhgiH layoR siH fo ytreporP"`！
- en: 'You might be wondering about the fourth line of code, too:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还在想第四行代码是怎么回事：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And you’re right to wonder! The `*` is the Ruby way of saying “multiply by.”
    This means `2 * 2` would equal 4, `13 * 379` would equal 4,927, and so on. *But
    wait!* you might further wonder, *How can you multiply a string (which is just
    a bunch of letters) by a number?* The answer is that Ruby is quite the clever
    robot. When it sees something like this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你想得对！`*` 是 Ruby 中表示“乘以”的符号。这意味着 `2 * 2` 等于 4，`13 * 379` 等于 4,927，依此类推。*但是等等！*你可能会进一步问，*怎么能将一个字符串（它只是一些字母）与数字相乘呢？*
    答案是 Ruby 是个非常聪明的机器人。当它看到类似这样的内容时：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'it does this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 它是这样做的：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'So this is how we produce our echo: `kings_string * times_to_echo` will become
    `"Property of His Royal Highness, the King"` repeated three times!'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是我们如何生成回显：`kings_string * times_to_echo` 会变成 `"Property of His Royal Highness,
    the King"` 重复三次！
- en: '`puts` is short for “put string,” as in “Put that string on the table where
    I can see it.” As we’ve seen, it just prints text on the screen. What do you think
    you’ll see when you run your program? Save and close your file, and then run it
    with **`ruby kings_string.rb`**. You should see the following output:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`puts` 是 “put string” 的缩写，就像是“把那个字符串放到我能看到的地方”。正如我们所见，它只是将文本打印到屏幕上。你觉得运行程序时会看到什么？保存并关闭文件，然后使用
    **`ruby kings_string.rb`** 运行它。你应该会看到如下输出：'
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Well done!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！
- en: You Know This!
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你知道这个！
- en: Let’s take a minute to review all the stuff you’ve packed into your brain over
    the last few pages.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间回顾一下你在过去几页中已经掌握的内容。
- en: 'We talked about *strings* and how they’re just words or phrases between quotes
    (single or double quotes are both fine). In fact, since the bits that make up
    a string don’t have to be just letters—they can include punctuation and even numbers,
    so long as the whole string is between quotes—we say that strings are made up
    of *characters* rather than letters. You can think of a string as a *literal*
    string of characters, with each end knotted with either single or double quotes.
    (You can pick single or double, but the ends have to match: `"string''` or `''string"`
    won’t work!)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们谈到了*字符串*，它们只是用引号括起来的单词或短语（单引号或双引号都可以）。实际上，由于组成字符串的元素不一定只能是字母——它们可以包括标点符号甚至数字，只要整个字符串都在引号之间——所以我们说字符串由*字符*组成，而不是字母。你可以把字符串看作是由字符组成的*字面*字符串，每个端点都用单引号或双引号系住。（你可以选择单引号或双引号，但两端必须匹配：`"string'`
    或 `'string"` 是不行的！）
- en: 'You also saw that strings have some handy *methods*, like `length` and `reverse`,
    which are just commands that Ruby knows how to use with strings. You always write
    the object you want to affect, followed by a dot, followed by the command, like
    this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你还看到字符串有一些方便的*方法*，比如 `length` 和 `reverse`，这些方法是 Ruby 知道如何与字符串一起使用的命令。你总是先写下你想要操作的对象，后面跟一个点，再后面是命令，就像这样：
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We talked a bit about *numbers*, which are values in Ruby that work exactly
    like you think real-life numbers would. Numbers have their very own methods, which
    include `next` (for going to the next number) and `pred` (for going to the previous
    number):'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍微谈了一下关于*数字*的内容，这些数字是 Ruby 中的值，它们的工作方式和你想象的现实生活中的数字完全一样。数字有自己独特的方法，包括 `next`（用于进入下一个数字）和
    `pred`（用于进入前一个数字）：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Last, we talked about *variables* and how you can use them to give Ruby values
    special names, like `42` or `"chunky bacon"`. You always write the variable name
    (which can’t contain spaces) on the left, followed by an equal sign, followed
    by the value:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们谈到了*变量*，以及如何使用它们为 Ruby 的值起特殊的名字，例如 `42` 或 `"chunky bacon"`。你总是将变量名（不能包含空格）写在左边，后面跟一个等号，再后面是值：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'And you can get that value back just by typing its name:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需输入名称，就可以拿回这个值：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Given what you know, how could you go further with that smallish project we
    tackled earlier? For instance, what if we changed the number of `times_to_echo`
    with `next` or `pred`? What would happen if we added a space on the end of the
    sentence we stored in `kings_string?` (Hint: It might make our output look nicer.
    But don’t put the space directly on the variable name `kings_string`—remember,
    Ruby variable names can’t have spaces!) What happens if we try to add a few different
    strings together with `+` instead of multiplying them by a number? And what in
    breakfast’s good name is chunky bacon, anyway?'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你所知道的，如何在我们之前处理的那个小项目中进一步推进？例如，如果我们用 `next` 或 `pred` 改变了 `times_to_echo` 的数值会怎样？如果我们在存储在
    `kings_string` 中的句子末尾加一个空格会发生什么？（提示：这可能会让我们的输出看起来更好。但不要直接在变量名 `kings_string` 上加空格——记住，Ruby
    变量名不能有空格！）如果我们尝试用 `+` 把几个不同的字符串拼接在一起，而不是用数字乘它们，会发生什么？至于早餐中的“chunky bacon”，到底是什么东西？
