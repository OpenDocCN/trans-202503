- en: '**9**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**9**'
- en: '**WEB AND INTERNET ADMINISTRATION**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**WEB 和 INTERNET 管理**'
- en: '![image](../images/common4.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common4.jpg)'
- en: If you’re running a web server or are responsible for a website, whether simple
    or complex, you likely find yourself performing certain tasks with great frequency,
    notably identifying broken internal and external site links. Using shell scripts,
    you can automate many of these tasks, as well as some common client/server tasks
    such as managing access information on a password-protected website directory.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在运行一个 web 服务器或负责一个网站，无论是简单还是复杂，你很可能经常需要执行某些任务，特别是识别断开的内部和外部站点链接。通过使用 shell
    脚本，你可以自动化许多这些任务，也可以自动化一些常见的客户端/服务器任务，比如管理受密码保护的网站目录的访问信息。
- en: '**#69 Identifying Broken Internal Links**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#69 识别断开的内部链接**'
- en: A few of the scripts in [Chapter 7](ch07.xhtml#ch07) highlighted the capabilities
    of the `lynx` text-only web browser, but there’s even more power hidden within
    this tremendous software application. One capability that’s particularly useful
    for a web administrator is the `traverse` function (enabled using `-traversal`),
    which causes `lynx` to try to step through all links on a site to see if any are
    broken. This feature can be harnessed in a short script, as [Listing 9-1](ch09.xhtml#ch9ex1)
    details.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 7 章](ch07.xhtml#ch07)中的几个脚本突出了 `lynx` 纯文本浏览器的功能，但这个强大的软件应用程序还隐藏着更多的功能。对于网站管理员来说，尤其有用的一项功能是
    `traverse`（通过使用 `-traversal` 启用），它使得 `lynx` 尝试遍历网站上的所有链接，以检查是否存在断开的链接。这个功能可以在一个简短的脚本中利用，就像
    [Listing 9-1](ch09.xhtml#ch9ex1) 所描述的那样。'
- en: '***The Code***'
  id: totrans-6
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 9-1: The* `*checklinks*` *script*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 9-1: `*checklinks*` 脚本*'
- en: '***How It Works***'
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***它是如何工作的***'
- en: 'The vast majority of the work in this script is done by `lynx` ➊; the script
    just fiddles with the resulting `lynx` output files to summarize and display the
    data attractively. The `lynx` output file *reject.dat* contains a list of links
    pointing to external URLs (see [Script #70](ch09.xhtml#ch09lev1sec02) on [page
    220](ch09.xhtml#page_220) for how to exploit this data), *traverse.errors* contains
    a list of invalid links (the gist of this script), *traverse.dat* contains a list
    of all pages checked, and *traverse2.dat* is identical to *traverse.dat* except
    that it also includes the title of every page visited.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '这个脚本的大部分工作是由 `lynx` ➊ 完成的；脚本只是对 `lynx` 的输出文件进行一些处理，整理并以吸引人的方式展示数据。`lynx` 输出文件
    *reject.dat* 包含指向外部 URL 的链接列表（查看 [Script #70](ch09.xhtml#ch09lev1sec02) 在 [第 220
    页](ch09.xhtml#page_220) 了解如何利用这些数据），*traverse.errors* 包含无效链接的列表（这个脚本的核心），*traverse.dat*
    包含所有检查过的页面列表，而 *traverse2.dat* 与 *traverse.dat* 相同，只是它还包括每个访问页面的标题。'
- en: The `lynx` command can take a lot of different arguments, and in this case we
    need to use `-accept_all_cookies` ➋ so that the program doesn’t stall out asking
    whether we want to accept or reject a cookie from a page. We also use `-realm`
    to ensure that the script only checks pages from that point on the site or “lower”
    in the tree, not every single link it encounters. Without `-realm`, it can dig
    up thousands and thousands of pages as it traverses like a madman. When we ran
    `-traversal` on *[http://www.intuitive.com/wicked/](http://www.intuitive.com/wicked/)*
    without `-realm`, it found over 6,500 pages after chugging along for over two
    hours. With the `-realm` flag, it identified 146 pages to examine in just a few
    minutes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`lynx` 命令可以接受很多不同的参数，在这种情况下，我们需要使用 `-accept_all_cookies` ➋，以免程序因是否接受或拒绝来自页面的
    cookie 而停滞。我们还使用 `-realm`，确保脚本仅从该网站某个点开始，或“向下”检查树中的页面，而不是遇到的每个链接。如果没有 `-realm`，它可能像个疯子一样挖掘出成千上万的页面。当我们在没有
    `-realm` 的情况下运行 `-traversal` 对 *[http://www.intuitive.com/wicked/](http://www.intuitive.com/wicked/)*
    进行检查时，它在两个小时的漫长等待后发现了超过 6500 个页面。使用 `-realm` 标志时，它仅在几分钟内识别了 146 个页面进行检查。'
- en: '***Running the Script***'
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: 'To run this script, simply specify a URL on the command line. You can traverse
    and check *any* website you want, but beware: checking something like Google or
    Yahoo! will take forever and eat up all of your disk space in the process.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行这个脚本，只需在命令行中指定一个 URL。你可以遍历并检查 *任何* 网站，但要小心：像 Google 或 Yahoo! 这样的站点检查起来会非常慢，并且在过程中会占用你所有的磁盘空间。
- en: '***The Results***'
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结果***'
- en: Let’s check a tiny website that has no errors ([Listing 9-2](ch09.xhtml#ch9ex2)).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一个没有错误的微型网站 ([Listing 9-2](ch09.xhtml#ch9ex2))。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 9-2: Running* `*checklinks*` *on a website with no errors*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 9-2: 运行* `*checklinks*` *脚本，检查没有错误的网站*'
- en: Sure enough, all is well. How about a slightly larger site? [Listing 9-3](ch09.xhtml#ch9ex3)
    shows what `checklinks` might print for a site with potentially broken links.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 果然，一切正常。那么稍大一点的网站呢？[清单 9-3](ch09.xhtml#ch9ex3) 显示了当网站存在潜在损坏链接时，`checklinks`
    可能输出的内容。
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 9-3: Running* `*checklinks*` *on a larger website with broken links*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 9-3：在有损坏链接的大型网站上运行* `*checklinks*` *命令*'
- en: 'This means that the file *BeingEarnest.shtml* contains a link to */index/*
    that cannot be resolved: the file */index/* does not exist. There are also four
    weird link errors in the *ArtofWriting.html* file.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着文件 *BeingEarnest.shtml* 包含了一个指向 */index/* 的链接，但该链接无法解析：文件 */index/* 不存在。在
    *ArtofWriting.html* 文件中也有四个奇怪的链接错误。
- en: Finally, in [Listing 9-4](ch09.xhtml#ch9ex4), let’s check Dave’s film review
    blog to see what link errors might be lurking.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 [清单 9-4](ch09.xhtml#ch9ex4) 中，让我们检查 Dave 的电影评论博客，看看可能潜藏着哪些链接错误。
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 9-4: Running the* `*checklinks*` *script with the* `*time*` *utility
    to understand how long it took*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 9-4：运行* `*checklinks*` *脚本并使用* `*time*` *工具来了解它花费的时间*'
- en: Notice that adding a call to `time` before a long command is a smart way to
    see how long running the script takes. Here you can see that checking all 982
    pages on *[http://www.daveonfilm.com/](http://www.daveonfilm.com/)* took 50 minutes
    of real time, representing 42 seconds of actual processing time. That’s a lot!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在长命令前添加对 `time` 的调用是查看脚本运行时长的聪明方法。在这里，你可以看到检查 *[http://www.daveonfilm.com/](http://www.daveonfilm.com/)*
    上的所有 982 页用了 50 分钟的实际时间，实际处理时间为 42 秒。真是很多！
- en: '***Hacking the Script***'
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***破解脚本***'
- en: The data file *traverse.dat* contains a list of all URLs encountered, while
    *reject.dat* is a list of all URLs encountered but not checked, typically because
    they’re external links. We’ll address those in the next script. The actual errors
    are found in the *traverse.errors* file at ➌ in [Listing 9-1](ch09.xhtml#ch9ex1).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 数据文件 *traverse.dat* 包含了所有遇到的 URL 列表，而 *reject.dat* 则包含所有遇到但未检查的 URL，通常是因为它们是外部链接。我们将在下一个脚本中处理这些。实际的错误会出现在
    [清单 9-1](ch09.xhtml#ch9ex1) 中的 *traverse.errors* 文件 ➌ 部分。
- en: To have this script report on image reference errors instead, use `grep` to
    dig through the *traverse.errors* file for *.gif*, *.jpeg*, or *.png* filename
    suffixes before feeding the result to the `sed` statement (which just cleans up
    the output to make it attractive).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要让这个脚本报告图像引用错误，可以使用 `grep` 从 *traverse.errors* 文件中查找 *.gif*、*.jpeg* 或 *.png*
    文件后缀，然后将结果输入到 `sed` 语句（它会清理输出，使其更美观）。
- en: '**#70 Reporting Broken External Links**'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#70 报告损坏的外部链接**'
- en: 'This partner script ([Listing 9-5](ch09.xhtml#ch9ex5)) to [Script #69](ch09.xhtml#ch09lev1sec01)
    builds on the output of that script to identify all external links from a site
    or site subdirectory analyzed, testing each to ensure that there are no “404 Not
    Found” errors. To make things easy, it assumes that the previous script has just
    been run so it can tap into the **.rejects* file for the URL list.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '这个伙伴脚本（[清单 9-5](ch09.xhtml#ch9ex5)）是 [脚本 #69](ch09.xhtml#ch09lev1sec01) 的延伸，基于该脚本的输出，识别所有外部链接并进行测试，确保没有
    “404 Not Found” 错误。为了简化操作，它假设先前的脚本已经运行完毕，因此它可以利用 **.rejects* 文件中的 URL 列表。'
- en: '***The Code***'
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 9-5: The* `*checkexternal*` *script*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 9-5：* `*checkexternal*` *脚本*'
- en: '***How It Works***'
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***它是如何工作的***'
- en: This is not the most elegant script in this book. It’s more of a brute-force
    method of checking external links. For each external link found, the `curl` command
    tests the validity of the link by trying to grab the contents of its URL and then
    discarding them as soon as they’ve arrived, done in the block of code at ➊.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是本书中最优雅的脚本。它更像是一种强力检查外部链接的方法。对于找到的每个外部链接，`curl` 命令通过尝试抓取其 URL 内容来验证链接的有效性，然后在内容到达后立即丢弃它们，这部分操作在
    ➊ 代码块中完成。
- en: 'The notation `2>&1` is worth mentioning here: it causes output device #2 to
    be redirected to whatever output device #1 is set to. With a shell, output #2
    is `stderr` (for error messages) and output #1 is `stdout` (regular output). Used
    alone, `2>&1` will cause `stderr` to go to `stdout`. In this instance, however,
    notice that prior to this redirection, `stdout` is already redirected to */dev/null*.
    This is a virtual device that can be fed an infinite amount of data without ever
    getting any bigger. Think of it as a black hole, and you’ll be on the right track.
    Therefore, this notation ensures that `stderr` is also redirected to */dev/null*.
    We’re throwing this information away because all we’re really interested in is
    whether `curl` returns a zero or nonzero return code from this command. Zero indicates
    success; nonzero indicates an error.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '这里值得提到的是 `2>&1` 的符号：它使得输出设备 #2 被重定向到输出设备 #1 设置的目标。对于 shell，输出 #2 是 `stderr`（错误信息），输出
    #1 是 `stdout`（常规输出）。单独使用 `2>&1` 会使得 `stderr` 重定向到 `stdout`。然而，在此重定向之前，请注意 `stdout`
    已经被重定向到 */dev/null*。这是一个虚拟设备，可以接收无限量的数据而不会变大。可以把它想象成一个黑洞，这样你就能理解它的作用了。因此，这个符号确保了
    `stderr` 也会被重定向到 */dev/null*。我们丢弃这些信息，因为我们真正关心的是 `curl` 是否从这个命令返回零或非零的返回码。零表示成功；非零表示错误。'
- en: The number of internal pages traversed is just the line count of the file *traverse.dat*,
    and the number of external links can be found by looking at *reject.dat*. If the
    `-a` flag is specified, the output lists all external links, whether they’re reachable
    or not. Otherwise, only failed URLs are displayed.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历的内部页面数只是文件 *traverse.dat* 的行数，外部链接的数量可以通过查看 *reject.dat* 获得。如果指定了 `-a` 标志，输出将列出所有外部链接，无论它们是否可达。否则，只会显示失败的
    URL。
- en: '***Running the Script***'
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: To run this script, simply specify the URL of a site to check as an argument
    to the script.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行此脚本，只需指定要检查的站点的 URL 作为脚本的参数。
- en: '***The Results***'
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结果***'
- en: Let’s check *[http://intuitive.com/](http://intuitive.com/)* for bad links in
    [Listing 9-6](ch09.xhtml#ch9ex6).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查 *[http://intuitive.com/](http://intuitive.com/)* 中的坏链接，参考[清单 9-6](ch09.xhtml#ch9ex6)。
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 9-6: Running the* `*checkexternal*` *script on* [http://intuitive.com/](http://intuitive.com/)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 9-6：运行* `*checkexternal*` *脚本以检查* [http://intuitive.com/](http://intuitive.com/)'
- en: Looks like it’s time to do some cleanup!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来是时候进行一些清理了！
- en: '**#71 Managing Apache Passwords**'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#71 管理 Apache 密码**'
- en: One terrific feature of the Apache web server is that it offers built-in support
    for password-protected directories, even on a shared public server. It’s a great
    way to have private, secure, and limited-access information on your website, whether
    you’re running a paid subscription service or you just want to ensure that family
    pictures are viewed only by family.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Web 服务器的一个极好的功能是它提供对密码保护目录的内置支持，即使在共享的公共服务器上也能使用。这是一个很好的方式，能够在你的网站上拥有私密、安全和有限访问的信息，无论你是运行付费订阅服务，还是仅仅希望确保家庭照片只被家人查看。
- en: Standard configurations require that in the password-protected directory you
    manage a data file called *.htaccess*. This file specifies the security “zone”
    name, and more importantly, it points to a separate data file that contains the
    account name and password pairs that are used to validate access to the directory.
    Managing this file is not a problem, except that the only tool included with Apache
    for doing so is the primitive `htpasswd` program, which is run on the command
    line. As another option, this script, `apm`, one of the most complex and sophisticated
    scripts in this book, offers a password management tool that runs in your browser
    as a CGI script and lets you easily add new accounts, change the passwords on
    existing accounts, and delete accounts from the access list.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 标准配置要求在受密码保护的目录中管理一个名为 *.htaccess* 的数据文件。该文件指定了安全“区域”的名称，更重要的是，它指向一个包含用于验证访问该目录的帐户名和密码对的单独数据文件。管理这个文件并不难，唯一的问题是，Apache
    提供的唯一工具是原始的 `htpasswd` 程序，它在命令行中运行。作为另一种选择，本书中最复杂、最精密的脚本之一 `apm` 提供了一个密码管理工具，可以在浏览器中作为
    CGI 脚本运行，允许你轻松添加新帐户、修改现有帐户的密码以及删除访问列表中的帐户。
- en: 'To get started, you will need a properly formatted *.htaccess* file to control
    access to the directory it’s located within. For demonstration purposes, this
    file might look like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用，您需要一个正确格式化的 *.htaccess* 文件来控制对所在目录的访问。为了演示，这个文件可能是这样的：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'A separate file, *.htpasswd*, contains all the account and password pairs.
    If this file doesn’t yet exist, you’ll need to create it. A blank one is fine:
    run `touch .htpasswd` and ensure that it’s writable by the user ID that runs Apache
    itself (probably user `nobody`). Then you’re ready for the script in [Listing
    9-7](ch09.xhtml#ch9ex7). This does also require, however, the CGI environment
    set up in “[Running the Scripts in This Chapter](ch08.xhtml#ch08lev1sec01)” on
    [page 201](ch08.xhtml#page_201). Make sure this shell script is saved to your
    *cgi-bin* directory.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一个单独的文件 *.htpasswd* 包含所有账户和密码对。如果这个文件还不存在，你需要创建它。一个空的文件也可以：运行 `touch .htpasswd`
    并确保它对运行 Apache 的用户 ID（通常是 `nobody` 用户）是可写的。然后，你就可以使用 [Listing 9-7](ch09.xhtml#ch9ex7)
    中的脚本了。然而，这还要求你在 [《运行本章中的脚本》](ch08.xhtml#ch08lev1sec01) 中配置 CGI 环境，具体参见 [第 201
    页](ch08.xhtml#page_201)。确保将此 Shell 脚本保存到你的 *cgi-bin* 目录中。
- en: '***The Code***'
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 9-7: The* `*apm*` *script*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 9-7: `*apm*` 脚本*'
- en: '***How It Works***'
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***它是如何工作的***'
- en: There’s a lot working together for this script to function. Not only do you
    need to have your Apache web server configuration (or equivalent) correct, but
    you need to have the correct entries in the *.htaccess* file, and you need an
    *.htpasswd* file with at least an entry for the `admin` user.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本的正常运行需要许多部分协同工作。你不仅需要正确配置 Apache Web 服务器（或等效服务器），还需要在 *.htaccess* 文件中有正确的条目，并且需要有一个包含至少
    `admin` 用户条目的 *.htpasswd* 文件。
- en: The script itself extracts the `htpasswd` filename from the *.htaccess* file
    and does a variety of tests to sidestep common `htpasswd` error situations, including
    if the script is unable to write to the file. All of this occurs before the main
    block of the script, the `case` statement.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本本身从 *.htaccess* 文件中提取 `htpasswd` 文件名，并进行各种测试，以避免常见的 `htpasswd` 错误情况，包括脚本无法写入文件的情况。所有这些都发生在脚本的主要部分，即
    `case` 语句之前。
- en: '**Processing Changes to .htpasswd**'
  id: totrans-57
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**处理 .htpasswd 文件的更改**'
- en: The `case` statement ➊ decides which of three possible actions is requested—
    `A` to add a user, `U` to update a user record, and `D` to delete a user—and invokes
    the correct segment of code accordingly. The action and the user account on which
    to perform the action are specified in the `QUERY_STRING` variable. This variable
    is sent by the web browser to the server in the URL as `a=*X*&u=*Y*`, where `*X*`
    is the action letter code and `*Y*` is the specified username. When a password
    is being changed or a user is being added, a third argument, `p`, is needed to
    specify the password value.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`case` 语句 ➊ 决定请求的三个可能操作中的哪一个——`A` 表示添加用户，`U` 表示更新用户记录，`D` 表示删除用户——并根据需要调用正确的代码段。操作和要执行操作的用户账户通过
    `QUERY_STRING` 变量指定。该变量由网页浏览器在 URL 中发送到服务器，格式为 `a=*X*&u=*Y*`，其中 `*X*` 是操作字母代码，`*Y*`
    是指定的用户名。当更改密码或添加用户时，还需要一个第三个参数 `p`，以指定密码值。'
- en: 'For example, let’s say we’re adding a new user `joe` with the password `knife`.
    This action results in the following `QUERY_STRING` being sent to the script from
    the web server:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们要添加一个新用户 `joe`，密码为 `knife`。此操作会导致以下 `QUERY_STRING` 从 Web 服务器发送到脚本：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The script unwraps this, setting the `action` variable to the value `A`, `user`
    to `joe`, and `pass` to `knife`. Then it uses the test at ➋ to ensure that the
    password contains only valid alphabetic characters.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本解包这一信息，将 `action` 变量设置为 `A`，`user` 设置为 `joe`，`pass` 设置为 `knife`。然后，它使用 ➋ 处的测试来确保密码仅包含有效的字母字符。
- en: Finally, if all is well, it invokes the `htpasswd` program to encrypt the password
    and add it to the *.htpasswd* file at ➌. In addition to processing changes to
    the *.htpasswd* file, this script also produces an HTML table that lists each
    user in the *.htpasswd* file, along with a `[delete]` link.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果一切正常，它会调用 `htpasswd` 程序来加密密码，并将其添加到 ➌ 处的 *.htpasswd* 文件中。除了处理 *.htpasswd*
    文件的更改外，脚本还生成一个 HTML 表格，列出 *.htpasswd* 文件中的每个用户，并附有一个 `[delete]` 链接。
- en: After producing three lines of HTML output for the heading of the table, the
    script continues at ➍. This `while` loop reads the name and password pairs from
    the *.htpasswd* file by using the trick of changing the *input field separator*
    (*IFS*) to a colon and changing the IFS back when it’s done.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成表格标题的三行 HTML 输出后，脚本继续执行 ➍。这个 `while` 循环通过将 *输入字段分隔符* (*IFS*) 改为冒号并在完成后将其恢复来读取
    *.htpasswd* 文件中的用户名和密码对。
- en: '**Adding a Footer of Actions to Take**'
  id: totrans-64
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**添加操作底部的操作提示**'
- en: The script also relies on the presence of an HTML file called *apm-footer.html*
    containing occurrences of the strings `--myname--` and `--options--` ➏, which
    are replaced by the current name of the CGI script and the list of users, respectively,
    as the file is output to `stdout`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本还依赖于一个名为 *apm-footer.html* 的 HTML 文件，该文件包含 `--myname--` 和 `--options--` 字符串
    ➏，这两个字符串分别在文件输出到 `stdout` 时被当前 CGI 脚本的名称和用户列表替换。
- en: The `$myname` variable is processed by the CGI engine, which replaces the variable
    with the actual name of the script. The script itself builds the `$optionstring`
    variable from the account name and password pairs in the *.htpasswd* file at ➎.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`$myname` 变量由 CGI 引擎处理，该引擎会用脚本的实际名称替换该变量。脚本本身根据 *.htpasswd* 文件中的账户名和密码对在 ➎
    处构建 `$optionstring` 变量。'
- en: The HTML footer file in [Listing 9-8](ch09.xhtml#ch9ex8) provides the ability
    to add a user, update a user’s password, and delete a user.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 9-8](ch09.xhtml#ch9ex8)中的 HTML 页脚文件提供了添加用户、更新用户密码和删除用户的功能。'
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 9-8: The* apm-footer.html *file used to add a section for creating
    new users*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 9-8：用于添加新用户创建部分的* apm-footer.html *文件*'
- en: '***Running the Script***'
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: You’ll most likely want to save this script in the same directory you want to
    protect with passwords, although you can also put it in your *cgi-bin* directory
    as we have done. Either way, make sure you tweak the `htpasswd` and directory
    values at the beginning of the script as appropriate. You’ll also need an *.htaccess*
    file that defines access permissions and an *.htpasswd* file that exists and is
    writable by the user who runs the Apache web server on your system.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你很可能希望将此脚本保存在你想要用密码保护的目录中，尽管你也可以像我们一样将其放入 *cgi-bin* 目录。不管怎样，确保在脚本开头适当调整 `htpasswd`
    和目录的值。你还需要一个*.htaccess* 文件来定义访问权限，并且一个 *.htpasswd* 文件必须存在且可被运行 Apache 网络服务器的用户写入。
- en: '**NOTE**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*When you use* `*apm*`*, make sure that the first account you create is* `*admin*`
    *so you can use the script upon subsequent invocations! There’s a special test
    in the code that allows you to create the* `*admin*` *account if* .htpasswd *is
    empty.*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用* `*apm*` *时，确保你创建的第一个账户是* `*admin*` *，这样在后续调用脚本时才能正常使用！代码中有一个特殊测试，允许你在*
    .htpasswd *为空时创建* `*admin*` *账户。*'
- en: '***The Results***'
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结果***'
- en: The result of running the `apm` script is shown in [Figure 9-1](ch09.xhtml#ch9fig1).
    Notice that it not only lists each account with a delete link but also offers
    options for adding another account, changing the password of an existing account,
    deleting an account, or listing all the accounts.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`apm`脚本的结果如[图 9-1](ch09.xhtml#ch9fig1)所示。请注意，它不仅列出了每个账户并提供删除链接，还提供了添加新账户、修改现有账户密码、删除账户或列出所有账户的选项。
- en: '![image](../images/f09-01.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f09-01.jpg)'
- en: '*Figure 9-1: A shell script–based Apache password management system*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-1：基于 shell 脚本的 Apache 密码管理系统*'
- en: '***Hacking the Script***'
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***破解脚本***'
- en: 'The Apache `htpasswd` program offers a nice command line interface for appending
    the new account and encrypted password information to the account database. But
    only one of the two commonly distributed versions of `htpasswd` supports batch
    use for scripts—that is, feeding the script both an account and password from
    the command line. It’s easy to tell whether your version does: if `htpasswd` doesn’t
    complain when you try to use the `-b` flag, you’ve got the better, more recent
    version. Chances are you will be good, though.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Apache `htpasswd` 程序提供了一个很好的命令行界面，用于将新账户和加密的密码信息追加到账户数据库中。但只有两种常见的分发版 `htpasswd`
    支持批量使用脚本——也就是说，从命令行给脚本提供账户和密码。你可以很容易地判断你的版本是否支持：如果 `htpasswd` 在你尝试使用 `-b` 标志时没有报错，那么你使用的就是更好、更现代的版本。不过，通常来说，你应该是没问题的。
- en: Be warned that if this script is incorrectly installed, anyone who gains knowledge
    of the URL can then add themselves to the access file and delete everyone else.
    That’s not good. One solution is to only allow this script to be run if the user
    is already signed in as `admin` (as the commented code in the top of the script
    mentions). Another way to secure the script is to place it in a directory that
    itself is password protected.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果此脚本安装不正确，任何知道 URL 的人都可以将自己添加到访问文件中并删除其他所有人。这是不安全的。一个解决方案是仅允许在用户已登录为 `admin`
    时运行此脚本（正如脚本顶部的注释代码所提到的）。另一种保护脚本的方法是将其放在一个本身已经密码保护的目录中。
- en: '**#72 Syncing Files with SFTP**'
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**#72 使用 SFTP 同步文件**'
- en: Though the `ftp` program is still available on most systems, it’s being replaced
    more and more by new file transfer protocols such as `rsync` and `ssh` (secure
    shell). There are a few reasons for this. Since the first edition of this book,
    FTP has begun to show some weaknesses with scaling and securing data in this new
    world of “big data,” and more efficient protocols for transferring data have become
    more mainstream. By default, FTP also transmits data in plaintext, which is generally
    fine for home or corporate networking on trusted networks, but not if you’re doing
    an FTP transfer from an open network at, for example, the library or Starbucks,
    where a lot of people are sharing the same network as you.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`ftp`程序在大多数系统上仍然可用，但它正逐渐被新的文件传输协议如`rsync`和`ssh`（安全外壳）所替代。这样做有几个原因。自本书第一版以来，FTP开始在“大数据”时代的扩展性和数据安全性方面表现出一些弱点，且更高效的数据传输协议变得越来越主流。默认情况下，FTP还会以明文方式传输数据，这对于家用或在受信任网络上的企业网络一般是可以接受的，但如果你在开放网络（例如图书馆或星巴克）中进行FTP传输，而该网络有许多人与你共享，那么就不太安全了。
- en: All modern servers should support the considerably more secure `ssh` package
    supporting end-to-end encryption. The file transfer element of the encrypted transfer
    is `sftp`, and while it’s even more primitive than `ftp`, we can still work with
    it. [Listing 9-9](ch09.xhtml#ch9ex9) shows how we can utilize `sftp` to securely
    sync our files.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现代服务器都应该支持安全性更高的`ssh`软件包，支持端到端加密。加密传输的文件传输部分是`sftp`，虽然它比`ftp`更原始，但我们仍然可以使用它。[清单
    9-9](ch09.xhtml#ch9ex9)显示了如何利用`sftp`安全地同步文件。
- en: '**NOTE**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you don’t have* `*ssh*` *on your system, complain to your vendor and administrative
    team. There’s no excuse. If you have access rights, you can also obtain the package
    at* [http://www.openssh.com/](http://www.openssh.com/) *and install it yourself.*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你的系统没有* `*ssh*` *，请向你的供应商和管理员团队投诉。没有理由不安装。如果你有访问权限，你也可以在* [http://www.openssh.com/](http://www.openssh.com/)
    *上获取该软件包并自行安装。*'
- en: '***The Code***'
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***代码***'
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 9-9: The* `*sftpsync*` *script*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 9-9：* `*sftpsync*` *脚本*'
- en: '***How It Works***'
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***工作原理***'
- en: 'The `sftp` program allows a series of commands to be fed into it as a pipe
    or input redirect. This feature makes this script rather simple: it focuses almost
    entirely on building up a sequence of commands to upload any changed files. At
    the end, these commands are fed to the `sftp` program for execution.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`sftp`程序允许将一系列命令作为管道或输入重定向传递给它。这个功能使得这个脚本非常简单：它几乎完全专注于构建一个命令序列，用于上传所有更改过的文件。最后，这些命令会被传递给`sftp`程序执行。'
- en: 'If you have a version of `sftp` that doesn’t properly return a nonzero failure
    code to the shell when a transfer fails, simply remove the conditional block at
    the end of the script ➊ and replace it with this:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的`sftp`版本在传输失败时没有正确返回非零失败代码到shell，只需删除脚本末尾的条件块➊，并用以下内容替换：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Because `sftp` requires the account to be specified as `user@host`, it’s actually
    a bit simpler than an equivalent FTP script. Also notice the `-P` flag added to
    the `put` commands: it causes FTP to retain local permissions, as well as creation
    and modification times, for all files transferred.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`sftp`需要指定账户为`user@host`，它实际上比等效的FTP脚本更简单。还要注意添加到`put`命令中的`-P`标志：它会使FTP保留传输所有文件的本地权限以及创建和修改时间。
- en: '***Running the Script***'
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行脚本***'
- en: Move into the local source directory, ensure that the target directory exists,
    and invoke the script with your username, server name, and remote directory. For
    simple situations, we have an alias called `ssync` (source sync) that moves into
    the directory we need to keep in sync and invokes `sftpsync` automatically.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 进入本地源目录，确保目标目录存在，并使用你的用户名、服务器名称和远程目录调用脚本。对于简单的情况，我们有一个别名叫做`ssync`（源同步），它会进入我们需要保持同步的目录并自动调用`sftpsync`。
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '***The Results***'
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结果***'
- en: Running `sftpsync` with a user, host, and the directory to sync as arguments
    should allow you to sync your directories, as [Listing 9-10](ch09.xhtml#ch9ex10)
    shows.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用用户、主机和要同步的目录作为参数运行`sftpsync`应该允许你同步目录，如[清单 9-10](ch09.xhtml#ch9ex10)所示。
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 9-10: Running the* `*sftpsync*` *script*'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 9-10：运行* `*sftpsync*` *脚本*'
- en: '***Hacking the Script***'
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***修改脚本***'
- en: The wrapper script that we use to invoke `sftpsync` is a tremendously useful
    script, and we’ve used it throughout the development of this book to ensure that
    the copies of the scripts in the web archive at *[http://www.intuitive.com/wicked/](http://www.intuitive.com/wicked/)*
    are exactly in sync with those on our own servers, all the while sidestepping
    the insecurities of the FTP protocol.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用来调用`sftpsync`的封装脚本是一个非常有用的脚本，在本书的开发过程中，我们一直使用它来确保网络归档中的脚本副本与我们自己服务器上的脚本完全同步，同时避免了FTP协议的不安全性，[http://www.intuitive.com/wicked/](http://www.intuitive.com/wicked/)。
- en: This wrapper in [Listing 9-11](ch09.xhtml#ch9ex11), `ssync`, contains all the
    necessary logic for moving to the correct local directory (see the variable `localsource`)
    and creating a file archive that has the latest versions of all the files in a
    so-called *tarball* (named for `tar`, the command that’s used to build it).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 9-11](ch09.xhtml#ch9ex11)中的这个封装器`ssync`包含了所有必要的逻辑，用于移动到正确的本地目录（参见变量`localsource`），并创建一个文件归档，包含所有文件的最新版本，称为*tarball*（命名来源于用于构建它的`tar`命令）。'
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*Listing 9-11: The* `*ssync*` *wrapper hack script*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 9-11：* `*ssync*` *封装脚本*'
- en: If necessary, a new archive file is created, and all files (including the new
    archive, of course) are uploaded to the server as needed, as shown in [Listing
    9-12](ch09.xhtml#ch9ex12).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如有必要，创建一个新的归档文件，所有文件（当然包括新的归档文件）根据需要上传到服务器，如[清单 9-12](ch09.xhtml#ch9ex12)所示。
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*Listing 9-12: Running the* `*ssync*` *script*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 9-12：运行* `*ssync*` *脚本*'
- en: One further tweak would be to have `ssync` be invoked from a `cron` job every
    few hours during the workday so that the files on a remote backup server are invisibly
    synchronized to your local files without any human intervention.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个改进是让`ssync`通过`cron`任务每隔几小时在工作日内自动调用，以便远程备份服务器上的文件在没有人工干预的情况下与本地文件同步。
