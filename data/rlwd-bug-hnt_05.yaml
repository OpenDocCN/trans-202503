- en: '**5'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**5**'
- en: HTML INJECTION AND CONTENT SPOOFING**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: HTML注入与内容欺骗**
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: '*Hypertext Markup Language (HTML) injection* and *content spoofing* are attacks
    that allow a malicious user to inject content into a site’s web pages. The attacker
    can inject HTML elements of their own design, most commonly as a `<form>` tag
    that mimics a legitimate login screen in order to trick targets into submitting
    sensitive information to a malicious site. Because these types of attacks rely
    on fooling targets (a practice sometimes called *social engineering*), bug bounty
    programs view content spoofing and HTML injection as less severe than other vulnerabilities
    covered in this book.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*超文本标记语言（HTML）注入*和*内容欺骗*是允许恶意用户向网站的网页中注入内容的攻击。攻击者可以注入自己设计的HTML元素，最常见的是`<form>`标签，它模仿合法的登录界面，诱骗目标将敏感信息提交到恶意网站。由于这些类型的攻击依赖于欺骗目标（这种做法有时被称为*社会工程学*），漏洞奖励计划将内容欺骗和HTML注入视为比本书中涵盖的其他漏洞更不严重。'
- en: An HTML injection vulnerability occurs when a website allows an attacker to
    submit HTML tags, typically via some form input or URL parameters, which are then
    rendered directly on the web page. This is similar to cross-site scripting attacks,
    except those injections allow for the execution of malicious JavaScript, which
    I’ll discuss in [Chapter 7](ch07.xhtml#ch07).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个网站允许攻击者提交HTML标签，通常通过某些表单输入或URL参数，然后直接在网页上渲染时，就会发生HTML注入漏洞。这类似于跨站脚本攻击，区别在于这些注入允许执行恶意JavaScript，我将在[第7章](ch07.xhtml#ch07)中讨论。
- en: HTML injection is sometimes referred to as *virtual defacement*. That’s because
    developers use the HTML language to define the structure of a web page. So if
    an attacker can inject HTML and the site renders it, the attacker can change what
    a page looks like. This technique of tricking users into submitting sensitive
    information through a fake form is referred to as *phishing*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: HTML注入有时被称为*虚拟篡改*。这是因为开发人员使用HTML语言定义网页的结构。所以如果攻击者能够注入HTML并且网站渲染它，攻击者就可以改变页面的外观。这种通过假表单诱骗用户提交敏感信息的技巧被称为*钓鱼*。
- en: 'For example, if a page renders content that you can control, you might be able
    to add a `<form>` tag to the page asking the user to reenter their username and
    password, like this:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果一个页面渲染了你可以控制的内容，你可能能够向页面添加一个`<form>`标签，要求用户重新输入他们的用户名和密码，如下所示：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When a user submits this form, the information is sent to an attacker’s website
    *http://<attacker>.com/capture.php* via an `action` attribute ➊.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户提交此表单时，信息通过`action`属性 ➊发送到攻击者的网站 *http://<attacker>.com/capture.php*。
- en: Content spoofing is very similar to HTML injection except attackers can only
    inject plaintext, not HTML tags. This limitation is typically caused by sites
    either escaping any included HTML or HTML tags being stripped when the server
    sends the HTTP response. Although attackers can’t format the web page with content
    spoofing, they might be able to insert text, such as a message, that looks as
    though it’s legitimate site content. Such messages can fool targets into performing
    an action but rely heavily on social engineering. The following examples demonstrate
    how you can explore these vulnerabilities.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 内容欺骗与HTML注入非常相似，区别在于攻击者只能注入纯文本，而不能注入HTML标签。此限制通常是由于网站要么会对包含的HTML进行转义，要么在服务器发送HTTP响应时会去除HTML标签。尽管攻击者无法通过内容欺骗格式化网页，但他们可能能够插入看似合法网站内容的文本，例如一条信息。这些信息可能会欺骗目标执行某个操作，但在很大程度上依赖于社会工程学。以下示例展示了如何发现这些漏洞。
- en: '**Coinbase Comment Injection Through Character Encoding**'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**通过字符编码的Coinbase评论注入**'
- en: '**Difficulty:** Low'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度:** 低'
- en: '**URL:** *https://coinbase.com/apps/*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**网址:** *https://coinbase.com/apps/*'
- en: '**Source:** *[https://hackerone.com/reports/104543/](https://hackerone.com/reports/104543/)*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源:** *[https://hackerone.com/reports/104543/](https://hackerone.com/reports/104543/)*'
- en: '**Date reported:** December 10, 2015'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期:** 2015年12月10日'
- en: '**Bounty paid:** $200'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖励支付:** $200'
- en: Some websites will filter out HTML tags to defend against HTML injection; however,
    you can sometimes get around this by understanding how character HTML entities
    work. For this vulnerability, the reporter identified that Coinbase was decoding
    HTML entities when rendering text in its user reviews. In HTML, some characters
    are *reserved* because they have special uses (such as angle brackets, `< >`,
    which start and end HTML tags), whereas *unreserved characters* are normal characters
    with no special meaning (such as letters of the alphabet). Reserved characters
    should be rendered using their HTML entity name; for example, the `>` character
    should be rendered by sites as `&gt;` to avoid injection vulnerabilities. But
    even an unreserved character can be rendered with its HTML encoded number; for
    example, the letter `a` can be rendered as `&#97;`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一些网站会过滤掉 HTML 标签来防御 HTML 注入攻击；然而，有时你可以通过理解 HTML 字符实体的工作原理来绕过这一限制。对于这个漏洞，报告者发现
    Coinbase 在渲染用户评论中的文本时会解码 HTML 实体。在 HTML 中，一些字符是 *保留的*，因为它们有特殊用途（比如尖括号 `< >`，用来表示
    HTML 标签的开始和结束），而 *非保留字符* 是没有特殊意义的普通字符（如字母）。保留字符应该使用它们的 HTML 实体名称渲染；例如，字符 `>` 应该被网站渲染为
    `&gt;`，以避免注入漏洞。但即使是非保留字符，也可以通过其 HTML 编码的数字来渲染；例如，字母 `a` 可以渲染为 `&#97;`。
- en: 'For this bug, the bug reporter first entered plain HTML into a text entry field
    made for user reviews:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个漏洞，报告者首先将纯 HTML 输入到一个用于用户评论的文本框中：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Coinbase would filter the HTML and render this as plaintext, so the submitted
    text would post as a normal review. It would look exactly as entered with the
    HTML tags removed. However, if the user submitted text as HTML encoded values,
    like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Coinbase 会过滤 HTML 并将其渲染为纯文本，因此提交的文本将作为正常评论发布。它会看起来和输入时一样，只是移除了 HTML 标签。然而，如果用户将文本以
    HTML 编码值的形式提交，比如这样：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Coinbase wouldn’t filter out the tags and would decode this string into the
    HTML, which would result in the website rendering the `<h1>` tags in the submitted
    review:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Coinbase 不会过滤这些标签，并且会将该字符串解码为 HTML，导致网站在提交的评论中渲染 `<h1>` 标签：
- en: '**This is a test**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**这是一个测试**'
- en: 'Using HTML-encoded values, the reporting hacker demonstrated how he could make
    Coinbase render username and password fields:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 HTML 编码值，报告的黑客展示了他是如何让 Coinbase 渲染用户名和密码字段的：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This resulted in HTML that would look like the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致HTML看起来如下所示：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This rendered as text input forms that looked like a place to enter a username
    and password login. A malicious hacker could have used the vulnerability to trick
    users into submitting an actual form to a malicious website where they could capture
    credentials. However, this vulnerability depends on users being fooled into believing
    the login is real and submitting their information, which isn’t guaranteed. Consequently,
    Coinbase rewarded a lower payout compared to a vulnerability that wouldn’t have
    required user interaction.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这渲染成了看起来像是输入用户名和密码登录的文本输入表单。恶意黑客可能利用这个漏洞欺骗用户将实际表单提交到恶意网站，从而窃取凭证。然而，这个漏洞依赖于用户被误导相信登录是假的并提交他们的信息，而这并不是必然的。因此，Coinbase
    对该漏洞给予的奖励较低，相比之下，那些不需要用户交互的漏洞奖励金额更高。
- en: '***Takeaways***'
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***总结***'
- en: When you’re testing a site, check how it handles different types of input, including
    plaintext and encoded text. Be on the lookout for sites that accept URI-encoded
    values, like `%2F`, and render their decoded values, which in this case would
    be `/`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当你测试一个网站时，检查它如何处理不同类型的输入，包括纯文本和编码文本。注意检查那些接受 URI 编码值（如 `%2F`）并渲染其解码值的网站，在这种情况下，解码值将是
    `/`。
- en: You’ll find a great Swiss army knife that includes encoding tools at *[https://gchq.github.io/CyberChef/](https://gchq.github.io/CyberChef/)*.
    Check it out and try the different types of encoding it supports.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 *[https://gchq.github.io/CyberChef/](https://gchq.github.io/CyberChef/)*
    找到一个很棒的瑞士军刀工具，其中包括编码工具。查看一下，试试它支持的各种编码类型。
- en: '**HackerOne Unintended HTML Inclusion**'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**HackerOne 意外的 HTML 插入**'
- en: '**Difficulty:** Medium'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 中等'
- en: '**URL:** *https://hackerone.com/reports/<report_id>/*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**网址：** *https://hackerone.com/reports/<report_id>/*'
- en: '**Source:** *[https://hackerone.com/reports/110578/](https://hackerone.com/reports/110578/)*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://hackerone.com/reports/110578/](https://hackerone.com/reports/110578/)*'
- en: '**Date reported:** January 13, 2016'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2016年1月13日'
- en: '**Bounty paid:** $500'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖励金额：** 500美元'
- en: This example and the following section require an understanding of Markdown,
    hanging single quotes, React, and the Document Object Model (DOM), so I’ll cover
    these topics first and then how they resulted in two related bugs.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例和接下来的部分需要了解 Markdown、悬挂单引号、React 和文档对象模型（DOM），所以我会首先介绍这些主题，然后再讨论它们如何导致两个相关的漏洞。
- en: '*Markdown* is a type of markup language that uses a specific syntax to generate
    HTML. For example, Markdown will accept and parse plaintext preceded by a hash
    symbol (`#`) to return HTML that is formatted into header tags. The markup `#
    Some Content` will generate the HTML `<h1>Some Content</h1>`. Developers often
    use Markdown in website editors because it’s an easy language to work with. In
    addition, on sites that allow users to submit input, developers don’t need to
    worry about malformed HTML because the editor handles generating the HTML for
    them.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*Markdown* 是一种标记语言，使用特定的语法生成 HTML。例如，Markdown 会接受并解析以井号符号（`#`）为前缀的纯文本，将其转换为格式化为头部标签的
    HTML。标记 `# Some Content` 会生成 HTML `<h1>Some Content</h1>`。开发人员常常在网站编辑器中使用 Markdown，因为它是一种易于使用的语言。此外，在允许用户提交输入的站点上，开发人员不需要担心
    HTML 格式错误，因为编辑器会为他们处理 HTML 的生成。'
- en: 'The bugs I’ll discuss here used Markdown syntax to generate an `<a>` anchor
    tag with a `title` attribute. Normally, the syntax for this is:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在这里讨论的 bug 利用了 Markdown 语法生成了一个带有 `title` 属性的 `<a>` 锚标签。通常，这种语法是：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The text between the brackets becomes the displayed text, and the URL to link
    to is included in parentheses along with a `title` attribute, which is contained
    in a set of double quotes. This syntax creates the following HTML:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 方括号之间的文本变成了显示文本，链接的网址包含在括号内，并带有一个 `title` 属性，该属性被包含在一对双引号中。这种语法会生成以下 HTML：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In January 2016, the bug hunter Inti De Ceukelaire noticed that HackerOne’s
    Markdown editor was misconfigured; as a result, an attacker could inject a single
    hanging quote into Markdown syntax that would be included in the generated HTML
    anywhere HackerOne used the Markdown editor. Bug bounty program administration
    pages as well as reports were vulnerable. This was significant: if an attacker
    was able to find a second vulnerability in an administration page and inject a
    second hanging quote at the beginning of the page in a `<meta>` tag (either by
    injecting the `<meta>` tag or finding an injection in a `<meta>` tag), they could
    leverage browser HTML parsing to exfiltrate page content. The reason is that `<meta>`
    tags tell browsers to refresh pages via the URL defined in the `content` attribute
    of the tag. When rendering the page, browsers will perform a `GET` request to
    the identified URL. The content in the page can be sent as a parameter of the
    `GET` request, which the attacker can use to extract the target’s data. Here is
    what a malicious `<meta>` tag with an injected single quote might look like:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 2016 年 1 月，漏洞猎人 Inti De Ceukelaire 注意到 HackerOne 的 Markdown 编辑器配置错误；因此，攻击者可以将一个悬挂的单引号注入到
    Markdown 语法中，这个引号会包含在生成的 HTML 中，任何使用 Markdown 编辑器的地方都会受到影响。漏洞赏金计划管理页面以及报告都存在漏洞。这是非常重要的：如果攻击者能够在管理页面找到第二个漏洞，并将第二个悬挂引号注入到页面开头的
    `<meta>` 标签中（无论是通过注入 `<meta>` 标签，还是找到 `<meta>` 标签中的注入点），他们就可以利用浏览器的 HTML 解析功能泄露页面内容。原因是
    `<meta>` 标签告诉浏览器通过标签的 `content` 属性中定义的 URL 刷新页面。渲染页面时，浏览器会对指定的 URL 执行 `GET` 请求。页面中的内容可以作为
    `GET` 请求的参数发送，攻击者可以利用这些信息来提取目标的数据。以下是一个带有注入单引号的恶意 `<meta>` 标签可能的样子：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `0` defines how long the browser waits before making the HTTP request to
    the URL. In this case, the browser would immediately make an HTTP request to *https://evil.com/log.php?text=*.
    The HTTP request would include all content between the single quote beginning
    with the `content` attribute and the single quote injected by the attacker using
    the Markdown parser on the web page. Here is an example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`0` 定义了浏览器在发起 HTTP 请求之前等待的时间。在这种情况下，浏览器会立即向 *https://evil.com/log.php?text=*
    发起 HTTP 请求。HTTP 请求将包含从 `content` 属性开始的单引号之间的所有内容，以及攻击者通过网页上的 Markdown 解析器注入的单引号。以下是一个示例：'
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The contents of the page from the first single quote after the `content` attribute
    at ➊ to the attacker-inputted single quote at ➋ would be sent to the attacker
    as part of the URL’s `text` parameter. Also included would be the sensitive cross-site
    request forgery (CSRF) token from the hidden input field.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `content` 属性后的第一个单引号到攻击者输入的单引号（➊ 到 ➋）之间的页面内容将作为 URL 的 `text` 参数发送给攻击者。还将包括来自隐藏输入字段的敏感跨站请求伪造（CSRF）令牌。
- en: Normally, the risk of HTML injection wouldn’t have been an issue for HackerOne
    because it uses the React JavaScript framework to render its HTML. React is a
    Facebook library developed to dynamically update web page content without having
    to reload the entire page. Another benefit of using React is that the framework
    will escape all HTML unless the JavaScript function `dangerouslySetInnerHTML`
    is used to directly update the DOM and render the HTML (the *DOM* is an API for
    HTML and XML documents that allows developers to modify the structure, style,
    and content of a web page via JavaScript). As it turns out, HackerOne was using
    `dangerouslySetInnerHTML` because it trusted the HTML it was receiving from its
    servers; therefore, it was injecting HTML directly into the DOM without escaping
    it.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，HTML注入的风险对于HackerOne来说并不会成为问题，因为它使用React JavaScript框架来渲染HTML。React是一个由Facebook开发的库，旨在动态更新网页内容，而无需重新加载整个页面。使用React的另一个好处是，框架会转义所有HTML，除非使用JavaScript函数`dangerouslySetInnerHTML`直接更新DOM并渲染HTML（*DOM*是一个用于HTML和XML文档的API，允许开发者通过JavaScript修改网页的结构、样式和内容）。事实证明，HackerOne使用了`dangerouslySetInnerHTML`，因为它信任从服务器接收到的HTML；因此，它直接将HTML注入到DOM中而没有进行转义。
- en: Although De Ceukelaire couldn’t exploit the vulnerability, he did identify pages
    where he was able to inject a single quote after HackerOne was rendering a CSRF
    token. So conceptually, if HackerOne made a future code change that allowed an
    attacker to inject another single quote in a `<meta>` tag on the same page, the
    attacker could exfiltrate a target’s CSRF token and perform a CSRF attack. HackerOne
    agreed with the potential risk, resolved the report, and awarded De Ceukelaire
    $500.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管De Ceukelaire无法利用该漏洞，他确实识别出一些页面，能够在HackerOne渲染CSRF令牌后注入单引号。因此，概念上，如果HackerOne在未来进行代码更改，允许攻击者在同一页面的`<meta>`标签中注入另一个单引号，攻击者可能会窃取目标的CSRF令牌并执行CSRF攻击。HackerOne同意了这一潜在风险，解决了报告，并奖励De
    Ceukelaire 500美元。
- en: '***Takeaways***'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***主要收获***'
- en: Understanding the nuances of how browsers render HTML and respond to certain
    HTML tags opens up a vast attack surface. Although not all programs will accept
    reports about potential theoretical attacks, this knowledge will help you find
    other vulnerabilities. FileDescriptor has a great explanation about the `<meta>`
    refresh exploit at *[https://blog.innerht.ml/csp-2015/#contentexfiltration](https://blog.innerht.ml/csp-2015/#contentexfiltration)*,
    which I highly recommend you check out.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 理解浏览器如何渲染HTML以及如何响应某些HTML标签的细微差别，能够揭示出广泛的攻击面。虽然并非所有程序都会接受关于潜在理论性攻击的报告，但这些知识将帮助你发现其他漏洞。FileDescriptor对于`<meta>`刷新漏洞有很好的解释，详细内容可以参考
    *[https://blog.innerht.ml/csp-2015/#contentexfiltration](https://blog.innerht.ml/csp-2015/#contentexfiltration)*，我强烈推荐你查看一下。
- en: '**HackerOne Unintended HTML Include Fix Bypass**'
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**HackerOne意外HTML包含修复绕过**'
- en: '**Difficulty:** Medium'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 中等'
- en: '**URL:** *https://hackerone.com/reports/<report_id>/*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL：** *https://hackerone.com/reports/<report_id>/*'
- en: '**Source:** *[https://hackerone.com/reports/112935/](https://hackerone.com/reports/112935/)*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://hackerone.com/reports/112935/](https://hackerone.com/reports/112935/)*'
- en: '**Date reported:** January 26, 2016'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2016年1月26日'
- en: '**Bounty paid:** $500'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**支付赏金：** 500美元'
- en: 'When an organization creates a fix and resolves a report, the feature won’t
    always end up bug-free. After reading De Ceukelaire’s report, I decided to test
    HackerOne’s fix to see how its Markdown editor was rendering unexpected input.
    To do so, I submitted the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个组织创建修复并解决报告时，功能并不总是能完全修复。阅读了De Ceukelaire的报告后，我决定测试HackerOne的修复，看其Markdown编辑器如何渲染意外输入。为了做到这一点，我提交了以下内容：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Recall that in order to create an anchor tag with Markdown, you normally provide
    a URL and a `title` attribute surrounded by double quotes in parentheses. To parse
    the `title` attribute, Markdown needs to keep track of the opening double quote,
    the content following it, and the closing quote.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，为了在Markdown中创建锚点标签，通常需要提供一个URL和一个用双引号括起来的`title`属性。为了解析`title`属性，Markdown需要跟踪开头的双引号、其后的内容以及结束的引号。
- en: 'I was curious as to whether I could confuse Markdown with additional random
    double quotes and attributes and whether it would mistakenly begin to track those
    as well. This is the reason I added `ismap=` (a valid HTML attribute), `yyy=`
    (an invalid HTML attribute), and extra double quotes. After submitting this input,
    the Markdown editor parsed the code into the following HTML:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我好奇是否能通过添加额外的随机双引号和属性来混淆 Markdown，看看它是否会错误地开始追踪这些内容。这就是我添加 `ismap=`（一个有效的 HTML
    属性）、`yyy=`（一个无效的 HTML 属性）和额外双引号的原因。在提交这个输入后，Markdown 编辑器将代码解析成了以下 HTML：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice that the fix from De Ceukelaire’s report resulted in an unintended bug
    that caused the Markdown parser to generate arbitrary HTML. Although I couldn’t
    immediately exploit this bug, the inclusion of unescaped HTML was enough of a
    proof of concept for HackerOne to revert its previous fix and correct the issue
    using a different solution. The fact that someone could inject arbitrary HTML
    tags could lead to vulnerabilities, so HackerOne awarded me a $500 bounty.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，De Ceukelaire 报告中的修复导致了一个意外的 bug，使得 Markdown 解析器生成了任意 HTML。虽然我不能立即利用这个 bug，但包含未经转义的
    HTML 已足够作为概念验证，HackerOne 因此撤回了之前的修复，并使用不同的解决方案来修复问题。由于有人能够注入任意 HTML 标签，这可能导致漏洞，因此
    HackerOne 向我支付了 500 美元的赏金。
- en: '***Takeaways***'
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***要点***'
- en: Just because code is updated doesn’t mean all vulnerabilities are fixed. Be
    sure to test changes—and be persistent. When a fix is deployed, it means there
    is new code, which could contain bugs.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅因为代码更新并不意味着所有漏洞都已修复。务必测试更改——并且要坚持不懈。当一个修复被部署时，意味着有了新的代码，而这些代码可能包含漏洞。
- en: '**Within Security Content Spoofing**'
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**在安全内容欺骗中**'
- en: '**Difficulty:** Low'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 低'
- en: '**URL:** *[https://withinsecurity.com/wp-login.php](https://withinsecurity.com/wp-login.php)*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL：** *[https://withinsecurity.com/wp-login.php](https://withinsecurity.com/wp-login.php)*'
- en: '**Source:** *[https://hackerone.com/reports/111094/](https://hackerone.com/reports/111094/)*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://hackerone.com/reports/111094/](https://hackerone.com/reports/111094/)*'
- en: '**Date reported:** January 16, 2016'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2016年1月16日'
- en: '**Bounty paid:** $250'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**赏金支付：** 250 美元'
- en: '*Within Security*, a HackerOne site meant to share security news, was built
    on WordPress and included a standard WordPress login path at the page *[withinsecurity.com/wp-login.php](http://withinsecurity.com/wp-login.php)*.
    A hacker noticed that during the login process, if an error occurred, *Within
    Security* would render an `access_denied` error message, which also corresponded
    to the `error` parameter in the URL:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*Within Security* 是一个用于分享安全新闻的 HackerOne 网站，建立在 WordPress 上，并在页面 *[withinsecurity.com/wp-login.php](http://withinsecurity.com/wp-login.php)*
    中包含了一个标准的 WordPress 登录路径。一位黑客注意到，在登录过程中，如果发生错误，*Within Security* 会渲染一个 `access_denied`
    错误消息，这个消息也对应于 URL 中的 `error` 参数：'
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Noticing this behavior, the hacker tried modifying the `error` parameter. As
    a result, the site rendered values passed to the parameter as part of the error
    message presented to users, and even URI-encoded characters were decoded. Here
    is the modified URL the hacker used:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 发现这个行为后，黑客尝试修改 `error` 参数。结果，网站将传递给该参数的值渲染为错误消息的一部分，甚至 URI 编码的字符也被解码。以下是黑客使用的修改后的
    URL：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The parameter rendered as an error message that displayed above the WordPress
    login fields. The message directed the user to contact an attacker-owned phone
    number and email.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 该参数作为错误消息渲染，显示在 WordPress 登录字段的上方。该消息引导用户联系一个攻击者拥有的电话号码和电子邮件。
- en: The key here was noticing that the parameter in the URL was being rendered on
    the page. Simply testing whether you could change the `access_denied` parameter
    revealed this vulnerability.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键是注意到 URL 中的参数在页面上被渲染。仅仅测试是否能够更改 `access_denied` 参数，就揭示了这个漏洞。
- en: '***Takeaways***'
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***要点***'
- en: Keep an eye on URL parameters that are passed and rendered as site content.
    They may present opportunities for text injection vulnerabilities that attackers
    can use to phish targets. Controllable URL parameters rendered on a website sometimes
    result in cross-site scripting attacks, which I’ll cover in [Chapter 7](ch07.xhtml#ch07).
    Other times this behavior allows only less impactful content spoofing and HTML
    injection attacks. It’s important to keep in mind that although this report paid
    $250, it was the minimum bounty for *Within Security*. Not all programs value
    or pay for HTML injection and content spoofing reports because, similar to social
    engineering, they depend on targets being fooled by the injected text.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 关注那些传递并作为网站内容渲染的 URL 参数。这些参数可能会成为文本注入漏洞的入口，攻击者可以利用它们来进行钓鱼攻击。网站上可控的 URL 参数有时会导致跨站脚本攻击，我将在[第七章](ch07.xhtml#ch07)中讲解这一内容。其他情况下，这种行为仅会导致影响较小的内容欺骗和
    HTML 注入攻击。需要注意的是，尽管这份报告支付了 250 美元，但这只是*Within Security*的最低悬赏金额。并不是所有的漏洞赏金计划都重视或支付
    HTML 注入和内容欺骗漏洞的报告，因为类似社交工程的攻击，依赖于目标被注入文本欺骗。
- en: '![image](../images/05fig01.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/05fig01.jpg)'
- en: '*Figure 5-1: The attacker was able to inject this “warning” into the WordPress
    admin page.*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-1：攻击者能够将这个“警告”注入到 WordPress 管理页面中。*'
- en: '**Summary**'
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: HTML injection and content spoofing allow a hacker to input information and
    have an HTML page reflect that information back to a target. Attackers can use
    these attacks to phish users and trick them into visiting or submitting sensitive
    information to malicious websites.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 注入和内容欺骗允许黑客输入信息并使 HTML 页面将这些信息反馈给目标。攻击者可以利用这些攻击手段进行钓鱼，诱使用户访问恶意网站或提交敏感信息。
- en: Discovering these types of vulnerabilities is not only about submitting plain
    HTML but also about exploring how a site might render your inputted text. Hackers
    should be on the lookout for opportunities to manipulate URL parameters that are
    directly rendered on a site.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 发现这类漏洞不仅仅是提交普通的 HTML，还涉及探索网站如何渲染你输入的文本。黑客应留意可能通过操控直接渲染在网站上的 URL 参数来寻找漏洞的机会。
