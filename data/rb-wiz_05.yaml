- en: Chapter 6. The (Chunky) Bacon to Ruby’s Hash
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章：Ruby的哈希表中的（厚切）培根
- en: Symbols!
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 符号！
- en: “That hash was amazing!” Scarlet said. Ruben nodded vigorously as he shoveled
    another helping of eggs and hash into his mouth.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: “那个哈希表真棒！”斯嘉丽说。鲁本一边点头一边猛地将另一份鸡蛋和哈希菜肴塞进嘴里。
- en: “I’m glad you liked it!” said Big Hank. “But that mid-morning rush’ll be here
    any minute, and we need to get cracking if we’re going to be ready for it.”
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: “很高兴你喜欢！”大汉克说。“不过上午的高峰期马上就要到了，我们得加紧准备了。”
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160011.png.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![没有说明的图片](../Images/httpatomoreillycomsourcenostarchimages2160011.png.jpg)'
- en: Scarlet jumped down from her stool. “We have eggs to fry up, potatoes to grate,
    sausages to cook, breakfast gravy to make, and biscuits to bake. Anything else?”
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 斯嘉丽从凳子上跳了下来。“我们有鸡蛋要煎、土豆要擦、香肠要煮、早餐肉汁要做、饼干要烤。还有别的什么吗？”
- en: Hank twirled his mustache. “I’m not sure,” he said. “Let’s have a look at that
    menu you kids and Squeaky Jim cooked up.”
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 汉克转动了他的胡子。“我不确定，”他说，“让我们看看你们和斯奎基·吉姆做的菜单吧。”
- en: '“Sure!” Scarlet said, and she called up the Hashery menu on the kitchen’s Computing
    Contraption:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: “好！”斯嘉丽说，她在厨房的计算机装置上调出了哈希餐厅的菜单：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: “This looks good—each order of food is associated with its price in a hash,”
    said Big Hank, “but we should put our breakfast beverages on there, too. Can you
    add a key with an array as a value to my menu hash?”
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: “这看起来不错——每一道菜都与它的价格在哈希表中关联，”大汉克说，“但我们也应该把我们的早餐饮料加上。你能为我的菜单哈希加一个包含数组作为值的键吗？”
- en: “Of course,” Scarlet said. “What drinks should we put in it?”
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: “当然，”斯嘉丽说。“那我们应该放哪些饮料？”
- en: “We’ve got coffee, orange juice, and tea,” said Hank.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: “我们有咖啡、橙汁和茶，”汉克说。
- en: '“Okay!” Scarlet said. She typed:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: “好！”斯嘉丽说。她输入了：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: “Aha! So that’s how you add a key to a hash,” Hank said.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: “啊哈！原来这是往哈希表里添加一个键的方法，”汉克说。
- en: “Yup!” Scarlet replied. “You just type the hash name, then the key name between
    square brackets—here, we’re using `'drinks'`—and set the whole thing equal to
    whatever value you like. See how we updated the `hashery_menu`?”
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: “没错！”斯嘉丽回答说。“你只需输入哈希表的名字，然后在方括号中输入键名——这里，我们使用的是`'drinks'`——然后将整个表达式赋值为你喜欢的任何值。看，我们是怎么更新`hashery_menu`的？”
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: “Cool!” said Ruben, who had finally finished eating his eggs and hash. “Now
    we have a list of drinks on the menu.” He leaned in close to the glowing screen
    of the Computing Contraption. “But it looks like the `drinks` hash key is a string,
    and the rest are symbols. Does that make a difference?”
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: “酷！”鲁本说，终于吃完了他的鸡蛋和哈希菜肴。“现在菜单上有了饮料的列表。”他凑近计算机装置发光的屏幕，“不过看起来`drinks`哈希键是一个字符串，而其余的都是符号。这样有区别吗？”
- en: “Oh boy, *does* it!” said Squeaky Jim, who had been opening bags of potatoes
    and cleaning the Hashery’s enormous Grate-O-Matic. He pushed his paper hat farther
    back on his head and leaned against the machine. “You see—” he began, but as he
    started to speak, his elbow pushed down the machine’s huge switch, turning it
    on. It roared to life, scaring the sweet peas out of Squeaky Jim and nearly causing
    him to fall over multiple times as he scrambled to turn it back off.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: “哦，*当然*有区别！”斯奎基·吉姆说，他正打开土豆袋并清理哈希餐厅巨大的Grate-O-Matic。他将纸帽子推得更高一点，靠在机器上。“你看——”他开始说，但在他讲话的同时，肘部不小心按下了机器的大开关，机器突然启动，发出咆哮声，吓得斯奎基·吉姆差点摔倒好几次，才拼命把它关掉。
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160013.png.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![没有说明的图片](../Images/httpatomoreillycomsourcenostarchimages2160013.png.jpg)'
- en: “You see,” Jim squeaked after he finally shut down the Grate-O-Matic, “even
    though I’m not very good at Ruby, I *have* tried to program the kitchen’s Computing
    Contraption every now and again. One morning, the Hashery was unbelievably busy—one
    of the biggest mid-morning rushes I’d ever seen!”
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: “你看，”吉姆 squeaked（发出尖锐的声音）地说，在他终于关掉Grate-O-Matic后，“尽管我在Ruby方面不太擅长，但我*确实*时不时地会尝试编程厨房的计算机装置。有一天早晨，哈希餐厅超级忙——这是我见过的最忙的上午高峰期之一！”
- en: “I remember that one,” Big Hank said, pulling an armful of sausage links out
    of a shiny red refrigerator. “Not only did we have a ton of customers, but we
    were doing a Build Your Own Menu day.”
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: “我记得那个，”大汉克说，一边从闪亮的红色冰箱里拿出一大把香肠。“我们不仅有大量顾客，而且那天还是‘自选菜单日’。”
- en: “Build Your Own Menu day?” Ruben asked, scratching his head.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: “自选菜单日？”鲁本问，一边挠着头。
- en: Big Hank nodded and began yanking sausages off the long chain of links and tossing
    them into an enormous skillet. “Yup. We let customers create their own personal
    menus, so they could order anything they wanted. We were okay at first—people
    were building their menus, ordering food, and getting served. But as the morning
    wore on, the program got slower and slower. By the peak of the rush, we could
    barely get any orders through! We had to shut down the kitchen’s Computing Contraption
    and do all the orders by hand. It was chaos.”
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 大汉克点了点头，开始把香肠从长长的链条上拉下来，丢进一个巨大的平底锅里。“没错。我们让顾客自己创建个人菜单，这样他们可以点任何自己想要的东西。开始的时候没问题——人们在做菜单、点餐、吃饭。但随着时间推移，程序变得越来越慢。在高峰期，我们几乎无法完成任何订单！我们不得不关闭厨房的计算装置，手动处理所有订单。简直是一片混乱。”
- en: Squeaky Jim nodded. “And I think I know why!”
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 吱吱作响的吉姆点了点头。“我想我知道为什么了！”
- en: Hank stopped pulling apart sausage links. “You do?”
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 汉克停下了拉香肠的动作。“你知道？”
- en: “Yup!” Jim said. “I was reading up on Ruby the other day to try to get a bit
    better at running the kitchen, and I found out that Ruby symbols use up less memory
    than strings. We were using strings for all the keys in our hashes during Build
    Your Own Menu day, and as the program went on and on, it used more and more memory
    until it didn’t have enough to do its job.”
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: “没错！”吉姆说，“我前几天在读 Ruby，试图提高一下自己在厨房里的操作技巧，发现 Ruby 符号比字符串占用更少的内存。在‘自己做菜单’那天，我们把所有哈希表的键都用了字符串，随着程序运行，内存越来越多，直到没有足够的内存去完成任务。”
- en: “Back up a bit,” said the King, who was chewing thoughtfully on a raw potato.
    “What exactly *are* these Ruby symbols? And what do you mean when you say they
    use less memory than strings?”
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: “稍微退后一点，”国王边咀嚼着一块生土豆边说，“这些 Ruby 符号到底是什么？你说它们比字符串占用更少的内存是什么意思？”
- en: The Skinny on Symbols
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 符号的简要介绍
- en: While Squeaky Jim tries to explain Ruby symbols to the group, I’ll give you
    the rundown. Basically, a Ruby symbol is just a *name*. For instance, if I’m talking
    about the King and Scarlet is talking about the King, we’re both talking about
    the very same thing—the King! When we talk about symbols (that is, names) in Ruby,
    we write them with a colon in front, like `:the_king`. You’ll often see the *underscore*
    (`_`) in symbol names because, just like variable names, they aren’t allowed to
    have spaces in them.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当吱吱作响的吉姆试图向大家解释 Ruby 符号时，我来给你简要总结一下。基本上，Ruby 符号就是一个 *名称*。例如，如果我在谈论国王，而斯卡利特也在谈论国王，那么我们讨论的就是同一个东西——国王！在
    Ruby 中，当我们谈论符号（即名称）时，会在前面加上冒号，像 `:the_king`。你经常会看到符号名称中有 *下划线* (`_`)，因为和变量名一样，符号名称中不能有空格。
- en: 'So how is a symbol different from a string, like `''The_King''`? Well, think
    back to the King’s string from [Chapter 2](../Text/ch02.html "Chapter 2. The King
    and His String"). Now imagine that the King has *two* strings with *exactly* the
    same beads and trinkets on them. While they might have the same *contents*, they
    aren’t the *exact same thing*. But when we both talk about the King, we’re not
    talking about two kings who look exactly like each other: we’re talking about
    *one and the same* king!'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，符号和字符串（比如 `'The_King'`）到底有什么不同呢？好吧，回想一下国王在[第二章](../Text/ch02.html "第二章：国王和他的字符串")的字符串。现在，假设国王有
    *两个* 上面挂着 *完全相同* 珠子和饰品的字符串。虽然它们的 *内容* 可能相同，但它们并不是 *完全相同的东西*。但是当我们谈论国王时，我们并不是在谈论两个长得一模一样的国王，而是在谈论
    *同一个* 国王！
- en: 'If you’re still a bit confused, never fear: I’ve got a couple of code examples
    that should help clear things right up. Fire up IRB and try this on for size:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还有点困惑，不用担心：我有几个代码示例可以帮助你完全搞清楚。启动 IRB，然后试试这个：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here we’re setting two *different* variables to the *same* string value of `'The
    King'`. Then, when you use the `object_id` method on these two variables, you’re
    asking Ruby to provide the unique number it uses to keep track of every object
    in a running Ruby program. It’s a kind of ID number that Ruby uses to tell objects
    apart, and no two objects have exactly the same one. On the flip side, if two
    variables have the same object ID number, they *must* be talking about the very
    same object.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们把两个 *不同* 的变量设置为相同的字符串值 `'The King'`。然后，当你对这两个变量使用 `object_id` 方法时，你是在要求
    Ruby 提供它用来跟踪每个对象的唯一编号。这是 Ruby 用来区分对象的 ID 号，并且没有两个对象的 ID 是完全相同的。相反，如果两个变量有相同的对象
    ID，它们 *必须* 指向同一个对象。
- en: The object ID numbers you see in IRB won’t be *quite* the same as mine, but
    that’s okay! Object IDs get reassigned every time you start a new Ruby program.
    The important thing is that `string_one` and `string_two`, even though they’re
    both equal to `'The King'`, are *different objects*. Their contents are exactly
    the same, but just as with our example of the King’s string, we’re talking about
    two completely different strings that just happen to have the same thing inside.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你在 IRB 中看到的对象 ID 数字可能不会和我的*完全*一样，但没关系！每次你启动一个新的 Ruby 程序时，对象 ID 都会重新分配。重要的是，`string_one`和`string_two`，尽管它们的值都等于
    `'The King'`，却是*不同的对象*。它们的内容完全相同，但就像我们之前提到的“国王的字符串”例子一样，我们讨论的是两个完全不同的字符串，只不过它们恰好包含相同的内容。
- en: 'Now check *this* out:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看看*这个*：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here we’re setting two different variables, `symbol_one` and `symbol_two`, to
    the symbol `:the_king`. Again, your object IDs won’t be exactly the numbers just
    shown, but when you compare your object IDs for `symbol_one` and `symbol_two`,
    you’ll see that they’re the exact same number! Just like how when we’re talking
    about the King, we’re talking about the very same person, both `symbol_one` and
    `symbol_two` are talking about the exact same object, `:the_king`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们设置了两个不同的变量，`symbol_one` 和 `symbol_two`，都指向符号 `:the_king`。再次强调，你的对象 ID 可能不会和刚才显示的数字完全相同，但当你比较
    `symbol_one` 和 `symbol_two` 的对象 ID 时，你会发现它们是完全相同的数字！就像我们谈论国王时，我们指的是同一个人一样，`symbol_one`
    和 `symbol_two` 也指的是同一个对象，`:the_king`。
- en: 'Because symbols are simply names you can toss around, you don’t assign values
    to them. While you can definitely say:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 因为符号仅仅是你可以随便使用的名称，所以你不需要为它们赋值。虽然你可以明确地说：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'you *can’t* say:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你*不能*说：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you try this, you’ll get a `SyntaxError`. Just as you can’t assign a different
    value to a string or a number by putting it on the left-hand side of the equal
    sign, you can’t assign a different value to a symbol, either.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你这样做，你会得到一个`SyntaxError`。就像你不能通过把字符串或数字放到等号的左边来给它们赋不同的值一样，你也不能给符号赋不同的值。
- en: 'The only time you’ll have symbols on the left-hand side is when you use them
    in hashes, like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一会把符号放在等号左边的情况，是当你在哈希中使用它们时，像这样：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Remember, we don’t need to start our `bloviate` key with a colon if we use
    the newer hash syntax. If we want to use the older hash rockets (`=>`), we start
    the symbol with a colon:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，如果我们使用更新的哈希语法，就不需要在 `bloviate` 键前加冒号。如果我们想使用旧的哈希箭头语法（`=>`），我们就需要在符号前加冒号：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'But yes! I *do* go on. What you’re probably wondering is: what are symbols
    good for? How is it that they use less memory than strings?'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 但的确！我*确实*还在继续。那么你可能会想知道：符号到底有什么用？它们为什么比字符串占用更少的内存？
- en: 'Because a symbol always has only one object ID, it gets created only one time
    in any given Ruby program. That means you could have a thousand million billion
    variables that are all set to a certain symbol, and only *one* symbol object gets
    created. If you were to do that with strings, they’d all have different object
    IDs, so you’d get *a thousand million billion different strings*. Just like you,
    Ruby has only a certain amount of memory and can keep track of only so many things
    at once. If you create a huge number of strings, Ruby will start to run out of
    memory as it tries to juggle them all, and it will slow way down. Your program
    might even crash! If you use symbols, Ruby will create fewer objects and use less
    memory, so programs that use symbols for things like hash keys can run faster
    than equivalent programs that use strings. This brings us to the thousand-million-billion-dollar
    question: when should you take advantage of the savings symbols offer?'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 因为符号总是只有一个对象 ID，它只会在每个 Ruby 程序中创建一次。这意味着你可以创建成千上万的变量，它们都指向相同的符号对象，而只有*一个*符号对象被创建。如果你用字符串做这个操作，它们的对象
    ID 会不同，这样你就会得到*成千上万的不同字符串*。就像你一样，Ruby 也只有有限的内存，不能同时跟踪太多的东西。如果你创建大量字符串，Ruby 在试图管理它们时就会耗尽内存，程序会变得非常慢，甚至崩溃！如果你使用符号，Ruby
    会创建更少的对象，使用更少的内存，因此，使用符号的程序（比如作为哈希键的符号）会比使用字符串的等效程序运行得更快。这就引出了那个“千百万亿”级的问题：你什么时候应该利用符号带来的内存节省呢？
- en: Basically, any time you need to use a name over and over but don’t want to create
    a brand-new string each time, symbols are the way to go. They’re very good for
    hash keys, and they’re also useful for referring to method names. We’ll talk about
    using symbols for method names very soon!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，每当你需要重复使用一个名称，但又不想每次都创建一个全新的字符串时，符号是最好的选择。它们非常适合用作哈希键，也可以用来引用方法名。我们很快就会讨论如何将符号用作方法名！
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160015.png.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160015.png.jpg)'
- en: Speaking of soon, I’m pretty sure Squeaky Jim is about to wrap up his explanation
    of Ruby symbols. Let’s see if Ruben, Scarlet, the King, and Big Hank have as good
    an understanding of them as you do!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 说到“马上”，我敢肯定吱吱作响的吉姆快要结束他对 Ruby 符号的解释了。让我们看看鲁本、斯嘉丽、国王和大汉是否对符号有和你一样好的理解！
- en: Symbols and Hashes, Together at Last
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 符号与哈希，终于在一起了
- en: “I think I get it,” Ruben said. “Symbols are just names that Ruby uses to refer
    to one particular object, so if we use symbols as keys in hashes, we’re really
    just referring to the same object over and over.”
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: “我想我明白了，”鲁本说。“符号只是 Ruby 用来指代特定对象的名称，所以如果我们在哈希中使用符号作为键，我们实际上是在反复引用同一个对象。”
- en: “That’s exactly right!” said Squeaky Jim. “Now you see why we had such a terrible
    time using strings instead of symbols in our Build Your Own Menu hashes.”
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: “完全正确！”吱吱作响的吉姆说。“现在你明白为什么我们在用字符串而不是符号做‘自建菜单’哈希时遇到了那么大的麻烦了。”
- en: “Of course!” Scarlet said. “Each time a customer made a new menu, it made a
    whole bunch of new strings.”
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: “当然！”斯嘉丽说。“每次顾客制作新菜单时，都会生成一堆新的字符串。”
- en: “We had hundreds of customers,” Big Hank sighed. “No wonder our Ruby program
    ran out of memory!”
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: “我们有成百上千的顾客，”大汉叹了口气。“难怪我们的 Ruby 程序内存不够用了！”
- en: '“Well, I certainly don’t want to start adding strings into the menu *now*,”
    Scarlet said. “How can we change the string key to a symbol?” She typed `hashery_menu`
    into the Computing Contraption to call up the Hashery menu’s contents:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，我当然不想现在就开始把字符串加到菜单里，”斯嘉丽说。“我们怎么才能把字符串键改成符号呢？”她在计算装置中输入`hashery_menu`来调出哈希菜单的内容：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: “Hmm,” said the King. “Can we just change the string key to a symbol key?”
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，”国王说。“我们能不能直接把字符串键改成符号键？”
- en: “I don’t think so,” said Squeaky Jim. “From what I’ve read, I think the best
    thing we can do is to delete the string key, then replace it with a symbol key.”
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: “我不这么认为，”吱吱作响的吉姆说。“根据我读到的内容，我觉得我们能做的最好的办法是删除字符串键，然后用符号键替代它。”
- en: “You may be right,” Ruben said, “but programming is all about experimenting.
    I’ve heard that Ruby has a `to_sym` method that will turn a string into a symbol.
    Should we give it a try?”
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: “你说得对，”鲁本说，“但编程就是要不断试验。我听说 Ruby 有一个`to_sym`方法，可以把字符串转换成符号。我们要不要试试？”
- en: '“Sure thing,” Scarlet said, and she typed:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: “没问题，”斯嘉丽说，她打字：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: “It looks like it worked!” Ruben said. “Can you bring up the hash again to be
    sure?”
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: “看起来成功了！”鲁本说。“你能再调出哈希看看确认一下吗？”
- en: Scarlet nodded and brought up the Hashery menu again.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 斯嘉丽点了点头，再次调出了哈希菜单。
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: “Darn!” Ruben said. “Ruby returned a symbolized version of the string `'drinks'`,
    but it didn’t actually change the key in the hash.”
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: “糟了！”鲁本说。“Ruby 返回了字符串 `'drinks'` 的符号版本，但它并没有真正改变哈希中的键。”
- en: “That’s probably just as well,” said Big Hank. “I’ve been thinking about our
    breakfast beverages, and I realized we don’t have their prices in the array at
    all!”
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: “这倒也好，”大汉说。“我一直在想我们的早餐饮品，突然意识到我们根本没在数组里放价格！”
- en: Scarlet slapped her forehead. “That’s right!” she said. “We need to have the
    drinks *and* the prices in there.” She thought for a minute. “Wait—if we’re associating
    drinks and their prices, that’s just like associating each food item with its
    price. Can we put a hash inside another hash?”
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 斯嘉丽拍了拍额头。“没错！”她说。“我们需要把饮料*和*价格都放进去。”她想了想。“等等——如果我们在关联饮料和它们的价格，那不就像是将每个食物项和它的价格关联起来吗？我们能不能把哈希放到另一个哈希里面？”
- en: “Nothing to do but experiment!” said the King. “Why don’t you go ahead and delete
    the `"drinks"` key like Jim suggested, and then try adding a symbol key with a
    hash as the value?”
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: “没别的办法了，只有实验！”国王说。“你不如按照吉姆建议的，先删除`"drinks"`键，然后试试加一个符号键，把哈希作为值放进去？”
- en: “Okay!” said Scarlet. “Jim, do you know how to delete a key from a hash?”
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: “好的！”斯嘉丽说。“吉姆，你知道怎么从哈希中删除一个键吗？”
- en: '“I think so,” Jim said, and he reached over and began typing into the Computing
    Contraption:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: “我想是的，”吉姆说，他伸手过来开始在计算装置上打字：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: “Whoa, what was that?” said Ruben. “When you deleted the key, it gave you the
    value back!”
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: “哇，那是什么？”鲁本说。“当你删除了键时，它居然把值还给你了！”
- en: 'Jim nodded. “That’s what the `delete` method does!” he said. “That way, if
    we had wanted to use the value of the deleted key for something, we could have
    saved it into a variable, like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 吉姆点点头。“那就是`delete`方法的作用！”他说。“这样，如果我们想用删除的键的值做点什么，我们就可以把它保存到变量里，像这样：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '“But,” Jim said, “we *can’t* do that now, because the `''drinks''` key is gone.
    See?” He typed again:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: “不过，”Jim 说，“现在*不能*这么做，因为`'drinks'`键已经没了。看到了吧？”他再次输入：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: “Nice work!” Scarlet said. “Now all we have to do is test whether we can put
    a hash inside a hash. Big Hank, what are the prices I should use for the drinks?”
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: “干得漂亮！”Scarlet 说。“现在我们只需要测试一下是否能将哈希放在哈希里。Big Hank，饮料的价格是多少？”
- en: '“It’s a dollar for coffee, two for orange juice, and one for tea,” Hank said.
    Scarlet typed into the Computing Contraption:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: “咖啡一美元，橙汁两美元，茶一美元。” Hank 说。Scarlet 在计算装置中输入：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: “It worked!” shouted the King. “Great work, everyone!”
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: “成功了！”国王大声喊道。“大家干得好！”
- en: '“And just in the nick of time!” boomed Big Hank. The group had been so busy
    crowding around the Computing Contraption and working on getting the Hashery menu
    just right, they hadn’t noticed a steadily growing din. Voices filled the air
    as customers crowded into the Hashery, and even Big Hank had to shout to be heard
    above them all: “Spin up the Grate-O-Matic! Attend to the skillets! Bake biscuits
    like your lives depend on it! The mid-morning rush is upon us, and they’re hungry!”'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: “就在千钧一发之际！” Big Hank 大声说道。大家都忙着围绕计算装置，致力于使 Hashery 菜单完美无缺，根本没有注意到周围愈发喧闹的声音。顾客们涌入
    Hashery，空气中充满了声音，甚至 Big Hank 都得大声喊叫，才能让大家听见：“启动 Grate-O-Matic！照看好煎锅！像你们的命运依赖一样烤饼干！上午的高峰期来了，他们饿了！”
- en: “Aye aye, Hank!” said Squeaky Jim, who not only *didn’t* squeak but spun up
    the Grate-O-Matic and began churning out hash like he’d done it all his life.
    “Let’s get that new menu out to all the customers!”
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: “是的，Hank！” Squeaky Jim 说道，他不仅*没有*发出尖锐的声音，还启动了 Grate-O-Matic，开始像做了一辈子一样翻制哈希。“把新的菜单送到所有顾客手中！”
- en: '“The menu! I almost forgot,” Hank said. “We do have one more addition to today’s
    specials.” And he typed:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: “菜单！差点忘了，”Hank 说。“今天的特别菜单上还有一个新添加。”然后他输入了：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: “Chunky bacon?” Scarlet and Ruben asked together.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: “ chunky bacon？” Scarlet 和 Ruben 一起问道。
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160017.png.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![没有说明的图片](../Images/httpatomoreillycomsourcenostarchimages2160017.png.jpg)'
- en: Hank smiled and shrugged. “Friend of mine used to come in all the time and order
    it,” he said. “Haven’t seen him in a while, so I haven’t had it on the menu. But
    who knows?” He looked out at the growing crowd of hungry Hashery customers. “Maybe
    today’s the day he’ll come back.”
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Hank 微笑着耸耸肩。“我有个朋友以前常来点这个，”他说。“有段时间没见到他了，所以我没有把它放进菜单里。但谁知道呢？”他望向越来越多的饥饿的 Hashery
    顾客。“也许今天是他回来的一天。”
- en: The Mid-morning Rush
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上午的高峰期
- en: 'Now that you know all about symbols, you can handle a mid-morning rush of any
    size and not worry about slowing down your Ruby program or running low on memory.
    In fact, you’re such a wizard with Ruby symbols that Big Hank and Squeaky Jim
    have given you a mission that they’ve so far found impossible: transforming their
    old Build Your Own Menus so that they use symbols for keys instead of strings!'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了符号，你可以应付任何规模的上午高峰期，不用担心会让 Ruby 程序变慢或内存不足。事实上，你已经成为了 Ruby 符号的高手，以至于 Big
    Hank 和 Squeaky Jim 给了你一个他们到目前为止觉得不可能完成的任务：将他们的老式“自定义菜单”转变为使用符号作为键而不是字符串！
- en: This may sound like an odd idea at first, but it’s just to help make sure you’re
    comfortable using Ruby hashes; you don’t have to change all your keys to symbols
    every time you use them. Hashes are great for storing information like our Hashery
    menu, and you’ll use them time and again whenever you write Ruby—not just for
    the code in this book.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这一想法一开始听起来可能有点奇怪，但它只是为了确保你能够舒适地使用 Ruby 哈希表；每次使用它们时，你不必每次都将所有的键都转换成符号。哈希表非常适合存储像我们
    Hashery 菜单这样的信息，你会在编写 Ruby 代码时反复使用它们——不仅仅是本书中的代码。
- en: Earlier, we saw that we couldn’t just call `to_sym` on a hash key and expect
    it to magically change; instead, we had to delete the key and replace it.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们看到不能仅仅对哈希表的键调用`to_sym`并期待它神奇地改变；相反，我们必须删除键并替换它。
- en: 'That works okay for a single string key, but Hank and Jim are talking about
    a thousand million billion strings in hundreds of customer menus—you could never
    convert them one at a time, even if you wanted to! But what if we could *automatically*
    run through a hash and do exactly that: grab each string key, delete it, save
    the key’s value, and assign that value to a new symbol key?'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于单个字符串键来说，这样的做法还行，但 Hank 和 Jim 讨论的是成千上万的字符串，遍布数百个顾客的菜单——即使你想，也不可能一个一个地转换它们！但是，如果我们能*自动*遍历一个哈希表，做精确的操作：抓取每个字符串键，删除它，保存键的值，并将该值赋给一个新的符号键呢？
- en: 'Let’s make a new file called strings_to_symbols.rb. (As always, peek back at
    [Chapter 1](../Text/ch01.html "Chapter 1. What This Book’s About") if you don’t
    remember how to do this, or ask the nearest adult to help you.) Then open your
    file with your text editor, and type the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个新文件，命名为strings_to_symbols.rb。（如果你不记得如何做，可以参考[第1章](../Text/ch01.html "第1章.
    本书内容简介")，或者向最近的成年人寻求帮助。）然后用你的文本编辑器打开文件，并输入以下内容：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, we’re creating a brand-new hash called `my_own_menu` and assigning some
    values (the prices, which are numbers) to some keys (the menu items, which are
    strings). Keep on adding to the program; we’re not done yet!
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个全新的哈希表，名为`my_own_menu`，并将一些值（价格，数值类型）分配给一些键（菜单项，字符串类型）。继续往程序中添加内容，我们还没有完成！
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Next, we’ll print out the object ID of our menu hash. This is so we can later
    confirm that although we’ve made some changes to our hash, it’s still the same
    object; after we make changes to our keys and values, if the ID is the same as
    it was before, we’re talking about the very same hash, just with some different
    information in it.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将打印出我们菜单哈希的对象ID。这是为了之后确认，尽管我们对哈希做了一些修改，但它仍然是同一个对象；在我们修改了键和值之后，如果对象ID与之前相同，那么我们就可以确定它是同一个哈希，只不过其中的信息不同了。
- en: Let’s keep adding to *strings_to_symbols.rb*. We’ve got strings for hash keys
    now, but what we really want are symbols! We’ll need to add a bit more code to
    change our string keys to symbol keys.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 继续在*strings_to_symbols.rb*中添加内容。现在我们有了哈希键的字符串，但我们真正想要的是符号！我们需要添加一点代码，将字符串键转换为符号键。
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Okay, that does it. We call the `keys` method on the `my_own_menu` hash to get
    our keys, then immediately call `each` on those keys to iterate over them. (Remember
    that from [Chapter 5](../Text/ch05.html "Chapter 5. Array of Sunshine and Hash
    on the Range")? Feel free to look back if you need a reminder.)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，就到这里。我们对`my_own_menu`哈希调用`keys`方法来获取键，然后立即对这些键调用`each`方法进行迭代。（还记得[第5章](../Text/ch05.html
    "第5章. 阳光数组与范围内的哈希")吗？如果需要提示，可以回头看看。）
- en: 'Here’s the really cool part: for each key in the hash, we call `delete` on
    the key (which removes it from the hash), but since `delete` returns the value
    associated with the key that was deleted, we immediately set this equal to calling
    `to_sym` on the key. This is an amazing double whammy: it deletes the original
    key from the hash while immediately adding the value to a *new* key, and that
    new key is just the original one turned into a symbol. The result? You change
    all the keys in your hash from strings to symbols!'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是非常酷的部分：对于哈希中的每个键，我们对键调用`delete`（它会将键从哈希中移除），但因为`delete`返回的是被删除的键所关联的值，我们立刻将其赋值为对该键调用`to_sym`。这是一个惊人的双重效果：它不仅删除了哈希中的原始键，还立刻将值添加到了一个*新的*键上，而这个新键就是原始键转换成的符号。结果是什么？你将哈希表中的所有键从字符串转换成了符号！
- en: 'We can even prove it’s the very same hash, not a copy: we `puts` the hash’s
    object ID before and after iterating over it, and you’ll see in the output that
    the object ID is the very same both times. That’s right—*every* object in Ruby
    has an object ID, including the hash itself !'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以证明这就是同一个哈希，而不是它的副本：我们在遍历哈希之前和之后打印哈希的对象ID，你会看到输出中两次显示的对象ID是完全一样的。没错——*每个*对象在Ruby中都有一个对象ID，包括哈希本身！
- en: 'Your complete code should look like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你的完整代码应该是这样的：
- en: strings_to_symbols.rb
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: strings_to_symbols.rb
- en: '[PRE20]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Go ahead and run your code—type **`ruby strings_to_symbols.rb`** and press
    ENTER. The output should look like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的代码吧——输入**`ruby strings_to_symbols.rb`**并按下ENTER键。输出应该如下所示：
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You should see the very same object ID printed twice, then a beautiful printout
    of your hash, complete with symbols for keys instead of strings.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到相同的对象ID打印两次，然后是你的哈希表的漂亮输出，键变成了符号而不是字符串。
- en: What Else Can You Do with Symbols?
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 符号还能做什么？
- en: Now that you can solve all of Big Hank and Squeaky Jim’s menu woes with ease,
    you might be wondering what else you can do. As Ruben said, experimenting is a
    huge part of programming, and there’s a lot of experimentation you can do with
    hashes and symbols. For example, what happens if you call `to_sym` on a string
    that contains a space? (You’ll still get a symbol, but it will look weird—try
    it!)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以轻松解决大汉克和吱吱吉姆的菜单问题，你可能会想知道还能做些什么。如同鲁本所说，实验是编程的一个重要部分，你可以用哈希和符号做很多实验。例如，如果你对一个包含空格的字符串调用`to_sym`，会发生什么呢？（你仍然会得到一个符号，但它看起来会很奇怪——试试看吧！）
- en: 'We can also explore hashes within hashes. Remember, we can access a value in
    a hash like this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以探索哈希嵌套哈希。记住，我们可以像这样访问哈希中的值：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'So how might you go about accessing the value of a hash *inside* a hash? Here’s
    a hint—for our original menu:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，你会如何访问嵌套哈希中的哈希值呢？这里有个提示——对于我们的原始菜单：
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: what do you think `hashery_menu[:drinks][:orange_juice]` will give us back?
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你觉得`hashery_menu[:drinks][:orange_juice]`会返回什么？
- en: Finally, strings have a `to_sym` method that turns them into symbols, but symbols
    *also* have a `to_s` method (short for “to string”) that turns them into strings.
    How might you update this program to change symbol keys to strings?
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，字符串有一个`to_sym`方法，可以将其转换为符号，但符号*也*有一个`to_s`方法（即“to string”的缩写），可以将其转换为字符串。你会如何更新这个程序，将符号键转换为字符串？
- en: You Know This!
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你知道这个！
- en: We only really talked about hashes and symbols in this chapter, but since they’re
    not as easy to understand as numbers or strings (or even arrays), they’re worth
    going over one more time. (Heck, I’ve been writing Ruby for years, and I *still*
    think symbols are weird!)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们只讨论了哈希和符号，但由于它们不像数字、字符串（甚至数组）那样容易理解，因此值得再讲一遍。（天哪，我已经写了多年的Ruby了，*仍然*觉得符号很奇怪！）
- en: 'First, we looked at how to add a key and a value to a hash, which is as easy
    as setting a key in square brackets (`[]`) equal to a value:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们看了如何往哈希中添加键值对，这就像用方括号（`[]`）将键设置为一个值一样简单：
- en: '[PRE24]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Next, we introduced symbols, which are basically just names; you don’t assign
    values to them, but you can store them in variables if you want to.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们介绍了符号，它们基本上就是名字；你不需要给它们赋值，但如果需要的话，你可以将它们存储在变量中。
- en: 'For example, this is okay:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这样是可以的：
- en: '[PRE25]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'But *this* will cause an error:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 但*这样做*会导致错误：
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The only time symbols can appear on the left-hand side is when we’re using
    them as hash keys, like so:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 符号唯一可以出现在左边的情况是当我们把它们当作哈希键使用时，如下所示：
- en: '[PRE27]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'When you’re talking about the King or your teacher or Abraham Lincoln, you’re
    always talking about *exactly* the same person; likewise, symbols always refer
    to *exactly* the same object. This means they use less memory than strings, because
    whenever you create a new string—even if it’s *all the same* letters as another
    string—it’s a separate object with its own object ID:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在谈论国王、老师或亚伯拉罕·林肯时，你说的总是*完全相同*的人；同样，符号总是指向*完全相同*的对象。这意味着它们比字符串占用更少的内存，因为每次你创建一个新的字符串——即使它和另一个字符串的*所有字符*都一样——它仍然是一个独立的对象，并拥有自己的对象ID：
- en: '[PRE28]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In general, symbols are good for when you need to use a name over and over,
    mostly for hash keys and a couple of other neat tricks (which we’ll talk more
    about in later chapters). When you care about the *content* of something, you
    want a string; when you care about the *name* of a thing, you want a symbol.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，符号适用于你需要反复使用一个名字的情况，主要用于哈希键以及其他一些巧妙的小技巧（我们将在后续章节中进一步讨论）。当你关心某个事物的*内容*时，你应该使用字符串；当你关心某个事物的*名称*时，你应该使用符号。
- en: 'If you’re ever unsure whether two objects are the same or different, you can
    always use the `object_id` method (which works on any Ruby object) to get an object’s
    ID number. Every object has its very own ID number, which is how Ruby keeps track
    of which object is which during a program:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不确定两个对象是否相同，你可以使用`object_id`方法（它适用于任何Ruby对象）来获取对象的ID号。每个对象都有一个唯一的ID号，这就是Ruby在程序中区分对象的方法：
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Remember, your object IDs won’t be exactly the same as the ones shown here,
    but they should all be different from one another on your computer.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你的对象ID不会和这里显示的完全相同，但它们应该在你的计算机上彼此不同。
- en: 'Converting between symbols and strings is a snap! You can use the `to_sym`
    method to turn a string into a symbol:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在符号和字符串之间转换非常简单！你可以使用`to_sym`方法将字符串转换为符号：
- en: '[PRE30]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'And you can use the `to_s` method to turn a symbol into a string:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`to_s`方法将符号转换为字符串：
- en: '[PRE31]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'When it comes to deleting keys from hashes, you not only saw that you can do
    it with the `delete` method, but you also learned that `delete` both removes the
    key-value pair from the hash *and* returns the value, so you can save it in a
    variable if you want:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 关于从哈希中删除键值对，你不仅知道可以通过`delete`方法来实现，还学到了`delete`不仅会从哈希中移除键值对*并且*返回该值，这样你就可以将其保存在变量中：
- en: '[PRE32]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Finally, you learned that it’s 100 percent allowed to store a hash inside another
    hash, like so:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你学到了一件事：百分之百允许将哈希存储在另一个哈希中，如下所示：
- en: '[PRE33]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You’re well into the thick of Ruby now! The good news is that it’s pretty much
    all smooth sailing from here. While there *are* a few tricky concepts ahead, once
    you’ve mastered the basic Ruby objects (like numbers, strings, arrays, and hashes),
    learned how to use a bunch of their methods, and become a whiz at topics like
    control flow (using `if`/`elsif`/`else`, loops, and iterators), you’ve covered
    most of the language. Don’t worry if you don’t feel perfectly comfortable with
    Ruby yet; while it doesn’t take long to learn the basics, you can take as much
    time as you want to explore the depths. And that’s where we’re going next: deeper
    into the heart of Ruby, where strange-sounding (but powerful!) creatures await.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经进入了 Ruby 的核心部分！好消息是，从这里开始基本上都是顺风顺水。虽然接下来*确实*有一些难度较大的概念，但一旦你掌握了基本的 Ruby
    对象（如数字、字符串、数组和哈希），学会了如何使用它们的一些方法，并且对控制流等主题（使用`if`/`elsif`/`else`、循环和迭代器）变得得心应手，你就已经涵盖了大部分语言内容。如果你还不完全熟悉
    Ruby，不用担心；虽然学习基础知识并不需要太长时间，但你可以根据自己的节奏深入探索。这也是我们接下来要做的：深入 Ruby 的核心，那里有一些听起来奇怪（但非常强大！）的“生物”在等待你。
