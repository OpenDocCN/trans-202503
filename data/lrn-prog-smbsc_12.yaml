- en: '**12**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**12**'
- en: '**BUILDING GRAPHICAL USER INTERFACES**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**构建图形用户界面**'
- en: '![image](graphics/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/common01.jpg)'
- en: Every device has a set of *interfaces*. For example, an interface could be the
    buttons on a microwave or in an elevator, the knobs on a dishwasher, or even the
    soda pop dispenser at your favorite burger joint. Computer programs have interfaces
    as well. Back in the day, programs had only text menus, but now we use different
    ways to interact with computers, such as the icons on your desktop.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每个设备都有一套*接口*。例如，接口可以是微波炉或电梯中的按钮，洗碗机上的旋钮，或者甚至是你最喜欢的汉堡店的汽水分配器。计算机程序也有接口。早期的程序只有文本菜单，但现在我们使用不同的方式与计算机交互，比如桌面上的图标。
- en: Although you’ve written some very useful programs in this book, they don’t look
    like the programs you’re used to, such as a word processor, a paint program, a
    web browser, video games, and so on.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你在本书中编写了一些非常有用的程序，但它们看起来并不像你习惯的程序，比如文字处理器、绘图程序、网页浏览器、视频游戏等。
- en: Today, most programs use a *graphical user interface*, or *GUI* (pronounced
    “gooey,” but don’t worry, it’s not sticky). GUIs can have menus, buttons, text
    boxes, and more.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，大多数程序都使用*图形用户界面*，或简称*GUI*（发音为“gooey”，但别担心，它不粘）。GUI 可以包含菜单、按钮、文本框等等。
- en: One example is the Calculator program shown in [Figure 12-1](ch12.html#ch12fig1).
    When a user clicks one of the number buttons in the program, that number appears
    in the box at the top of the window. And when the user clicks the = button, the
    program computes the result of the math operation and displays it.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子是[图 12-1](ch12.html#ch12fig1)中展示的计算器程序。当用户点击程序中的一个数字按钮时，该数字会出现在窗口顶部的文本框中。当用户点击=按钮时，程序会计算数学运算的结果并显示出来。
- en: In this chapter, you’ll learn about the `Controls` object, which lets you create
    graphical interfaces for your programs and games.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习 `Controls` 对象，它让你为程序和游戏创建图形界面。
- en: '![image](graphics/f12-01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f12-01.jpg)'
- en: '*Figure 12-1: The Calculator program’s user interface*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 12-1：计算器程序的用户界面*'
- en: '**Design a User Interface with the Controls Object**'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用 Controls 对象设计用户界面**'
- en: Let’s start with a simple program that lets users enter their first and last
    name, and then the program greets them by name with a friendly message. [Figure
    12-2](ch12.html#ch12fig2) shows you *FirstGUIApp.sb*, the GUI you’ll create. The
    gridlines and coordinate points in the figure aren’t part of the output, but they’re
    included to illustrate the x- and y-coordinates of the interface’s different components.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个简单的程序开始，让用户输入他们的名字和姓氏，然后程序通过友好的信息用名字问候他们。[图 12-2](ch12.html#ch12fig2)展示了你将要创建的*FirstGUIApp.sb*，这是你要创建的图形用户界面（GUI）。图中的网格线和坐标点不是输出的一部分，它们是用来说明界面中不同组件的
    x 和 y 坐标的。
- en: '![image](graphics/f12-02.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f12-02.jpg)'
- en: '*Figure 12-2: The* FirstGUIApp.sb *user interface*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 12-2：* FirstGUIApp.sb *用户界面*'
- en: '***Step 1: The Design Phase***'
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步骤 1：设计阶段***'
- en: In this program, a user enters their first and last name in the text boxes and
    then clicks the Show Message button. If their first name is Alpaca and their last
    name is Bag, the program shows a message like the following (in the multiline
    text box).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个程序中，用户在文本框中输入他们的名字和姓氏，然后点击显示信息按钮。如果他们的名字是 Alpaca，姓氏是 Bag，程序将在多行文本框中显示如下信息：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Start Small Basic and enter the following two lines:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 Small Basic，输入以下两行：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first statement draws the text *First name:* at position (20, 20). In the
    second statement, the `Controls` object creates a text box with its upper-left
    corner at (100, 20). The box’s identifier is saved in the variable `fnText` (first-name
    text box). You’ll need this identifier later when you want to know what the user
    entered in this text box.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条语句在位置（20，20）绘制文本*名字：*。在第二条语句中，`Controls` 对象创建了一个文本框，左上角位于（100，20）。这个文本框的标识符被保存在变量
    `fnText` 中（表示名字文本框）。当你想知道用户在这个文本框中输入了什么时，你将需要这个标识符。
- en: Click **Run**, and you’ll see the *First name:* label and a text box placed
    to its right. The size of the text box is about 160×20 (the default size).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**运行**，你将看到*名字：*标签和位于其右侧的文本框。文本框的大小大约是 160×20（默认大小）。
- en: 'Next, add the following two lines to create the *Last name:* label and its
    associated text box:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加以下两行来创建*姓氏：*标签及其关联的文本框：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, the box’s identifier is saved in `lnText` (last-name text box). Click
    **Run** again, and you should see the text boxes and their labels perfectly aligned
    in the graphics window.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，框的标识符保存在`lnText`（姓氏文本框）中。再次点击**运行**，你应该能在图形窗口中看到文本框及其标签完美对齐。
- en: 'Now you’ll create the Show Message button by calling the `Controls` object’s
    `AddButton()` method:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将通过调用`Controls`对象的`AddButton()`方法来创建“Show Message”按钮：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first argument of `AddButton()` is the button’s caption, `"Show Message"`.
    The second and the third arguments tell the `Controls` object where the upper-left
    corner of the button should go. The button’s identifier is saved in `showBtn`
    (show button). Click **Run** to see what you’ve just created. By default, the
    button’s width will be as wide as its label. Try lengthening or shortening the
    button’s label, and run the program again to see what happens.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddButton()`的第一个参数是按钮的标题，`"Show Message"`。第二个和第三个参数告诉`Controls`对象按钮的左上角应放置在哪里。按钮的标识符保存在`showBtn`（显示按钮）中。点击**运行**查看你刚刚创建的内容。默认情况下，按钮的宽度将与其标签一样宽。尝试拉长或缩短按钮的标签，然后再次运行程序，看看会发生什么。'
- en: 'Next, you need to add the last GUI element—the box that shows the output message.
    Because you can greet the user with a long message if you want to, let’s use a
    multiline text box. The multiline text box has horizontal and vertical scroll
    bars that appear automatically if needed, like Harry Potter’s Room of Requirement.
    To create a multiline text box, call the `AddMultiLineTextBox()` method:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要添加最后一个GUI元素——显示输出消息的框。因为你可以根据需要用一条长消息来问候用户，所以我们使用多行文本框。多行文本框有水平和垂直滚动条，如果需要的话会自动出现，就像哈利·波特的需求室一样。要创建一个多行文本框，调用`AddMultiLineTextBox()`方法：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Again, the two arguments specify the upper-left position of the box. The box’s
    identifier is saved in `msgText` (message text box); you’ll need it later to set
    the box’s text. Click **Run**, and you’ll see a multiline text box located at
    (100, 100). By default, the size of this box is about 200×80\. Let’s make this
    box wider by calling the `SetSize()` method. Add this line of code just after
    creating the multiline text box:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，两个参数指定了框的左上角位置。框的标识符保存在`msgText`（消息文本框）中；稍后你需要它来设置框的文本。点击**运行**，你将看到一个位于(100,
    100)的多行文本框。默认情况下，这个框的大小大约是200×80。让我们通过调用`SetSize()`方法来使这个框更宽。就在创建多行文本框后添加这一行代码：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The first argument is the identifier of the control you want to resize, in this
    case `msgText`. The second argument (`280`) is the width, and the third (`80`)
    is the height. If you run the code now, you’ll see an interface similar to the
    one shown earlier in [Figure 12-2](ch12.html#ch12fig2). Note that the upper-left
    corner of the message text box didn’t change when you called `SetSize()`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是你想要调整大小的控件标识符，在本例中是`msgText`。第二个参数（`280`）是宽度，第三个参数（`80`）是高度。如果你现在运行代码，你会看到一个与[图12-2](ch12.html#ch12fig2)类似的界面。注意，调用`SetSize()`时，消息文本框的左上角并没有发生变化。
- en: '***Step 2: Program Interactivity***'
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步骤2：程序交互性***'
- en: You’ve created all the controls you need and positioned them where you wanted
    them. Next, you’ll make these controls interactive. You need to write some code
    that responds to the button’s click. When a user clicks the button, the program
    needs to read the contents of the first name and the last name text boxes and
    then display the greeting in the multiline text box. Add lines 13–21, as shown
    in [Listing 12-1](ch12.html#ch12ex1), to complete the program (you’ve already
    written lines 2–11 to create the GUI elements).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经创建了所有需要的控件，并将它们放置在你希望的位置。接下来，你需要使这些控件具有交互性。你需要编写一些代码来响应按钮的点击。当用户点击按钮时，程序需要读取姓氏和名字文本框的内容，并在多行文本框中显示问候语。添加第13到21行，如[清单12-1](ch12.html#ch12ex1)所示，以完成程序（你已经写好了第2到11行来创建GUI元素）。
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 12-1: Creating a simple GUI program*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单12-1：创建一个简单的GUI程序*'
- en: Line 13 registers a handler for the `ButtonClicked` event. This line tells the
    `Controls` object to call the `OnButtonClicked()` subroutine whenever the user
    clicks the Show Message button.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 第13行注册了一个处理`ButtonClicked`事件的处理程序。这一行代码告诉`Controls`对象，每当用户点击“Show Message”按钮时，调用`OnButtonClicked()`子程序。
- en: In the `OnButtonClicked()` subroutine, `GetTextBoxText()` is called first to
    get the text that’s entered into the first-name text box and save it into the
    `firstName` variable (line 16). This method takes one argument—the identifier
    of the text box whose text is needed. `GetTextBoxText()` is called again, but
    with a different argument, to get the text that’s entered into the last-name text
    box and save it into `lastName` (line 17). Then the `fullName` variable is set
    by concatenating `firstName` and `lastName` with a space between them (line 18).
    At line 19 you create your greeting message and save it in the `message` variable.
    Finally, you call `SetTextBoxText()` to set the text of the message text box.
    The first argument is the control’s identifier whose text is to be set, and the
    second argument is the new text (line 20). Run the program, enter some text in
    the text boxes, and then click the button to see how the program works.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在`OnButtonClicked()`子例程中，首先调用`GetTextBoxText()`来获取输入在名字文本框中的文本，并将其保存到`firstName`变量中（第16行）。这个方法接受一个参数——需要获取文本的文本框的标识符。然后再次调用`GetTextBoxText()`，但传入不同的参数，以获取输入在姓氏文本框中的文本，并将其保存到`lastName`中（第17行）。接着，通过将`firstName`和`lastName`之间加入空格来设置`fullName`变量（第18行）。在第19行，你创建了问候语并将其保存在`message`变量中。最后，你调用`SetTextBoxText()`来设置消息文本框的文本，第一个参数是控制项的标识符，第二个参数是新文本（第20行）。运行程序，输入一些文本到文本框中，然后点击按钮查看程序是如何工作的。
- en: In the next section, you’ll learn how to make GUI programs that have more than
    one button. Now you can push Small Basic’s buttons!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，你将学习如何制作具有多个按钮的GUI程序。现在你可以按下Small Basic的按钮了！
- en: '**TRY IT OUT 12-1**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**动手试一试 12-1**'
- en: Using the code in [Listing 12-1](ch12.html#ch12ex1), take the first name and
    last name from the user, and then update the code to display a silly short story
    that includes the user’s name.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[清单 12-1](ch12.html#ch12ex1)中的代码，获取用户的名字和姓氏，然后更新代码来显示一个包含用户姓名的搞笑短故事。
- en: '**Make a Colorful Drawing Program**'
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**制作一个多彩的绘图程序**'
- en: If you create a program with several buttons, the `ButtonClicked` event handler
    gets called when a user clicks any of these buttons. To find out which button
    was clicked, you can use the `Controls.LastClickedButton` property to get the
    clicked button’s identifier; it’s like asking your friend to tell you who noticed
    your brand-new shoes.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你创建一个包含多个按钮的程序，当用户点击这些按钮中的任何一个时，`ButtonClicked`事件处理程序会被调用。为了找出点击了哪个按钮，你可以使用`Controls.LastClickedButton`属性来获取被点击按钮的标识符；这就像是请你的朋友告诉你是谁注意到了你那双全新的鞋子。
- en: To show you how to use the `ButtonClicked` event when a program has more than
    one button, let’s add to the *Scribble.sb* program you made in [Chapter 11](ch11.html#ch11)
    (see [Listing 11-4](ch11.html#ch11ex4) on page 156). The user can select the pen’s
    color by clicking a button. Check out the program’s GUI in [Figure 12-3](ch12.html#ch12fig3).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向你展示如何在一个程序有多个按钮时使用`ButtonClicked`事件，我们将继续在[第11章](ch11.html#ch11)中创建的*Scribble.sb*程序（请参见第156页的[清单
    11-4](ch11.html#ch11ex4)）。用户可以通过点击按钮来选择笔的颜色。查看程序的GUI界面，参考[图 12-3](ch12.html#ch12fig3)。
- en: '![image](graphics/f12-03.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f12-03.jpg)'
- en: '*Figure 12-3: Sample output of* Scribble2.sb'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 12-3：* Scribble2.sb 的示例输出'
- en: Try out the updated program, *Scribble2.sb*, shown in [Listing 12-2](ch12.html#ch12ex2).
    You might notice that this program uses the same `OnMouseMove` event handler as
    the one in [Listing 11-4](ch11.html#ch11ex4).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试运行更新后的程序*Scrible2.sb*，如[清单 12-2](ch12.html#ch12ex2)所示。你可能会注意到，这个程序使用了与[清单
    11-4](ch11.html#ch11ex4)中的`OnMouseMove`事件处理程序相同的事件处理程序。
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 12-2: Clicking the buttons to change the pen color*'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 12-2：点击按钮来改变笔的颜色*'
- en: Lines 2–4 create the three color selection buttons. The coordinates of the upper-left
    corner of the three buttons are (10, 30), (10, 65), and (10, 100). The statements
    in lines 5–7 set the size of each button to 60 *×* 30 (width = 60 and height =
    30). Lines 9–10 register the handlers for the `MouseMove` and `ButtonClicked`
    events.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 第2至第4行创建了三个颜色选择按钮。这三个按钮的左上角坐标分别是(10, 30)、(10, 65)和(10, 100)。第5至第7行的语句设置每个按钮的大小为60
    *×* 30（宽度 = 60，高度 = 30）。第9至第10行注册了`MouseMove`和`ButtonClicked`事件的处理程序。
- en: The program calls the `OnButtonClicked()` subroutine (line 12) when a user clicks
    any of the three buttons. To know which one was clicked, the subroutine uses an
    `If/ElseIf` ladder to compare the `LastClickedButton` property with the identifiers
    of the three buttons (lines 13–19). After identifying the clicked button, the
    subroutine sets the `PenColor` property (of `GraphicsWindow`) to the selected
    color. The `OnMouseMove()` subroutine is the same as the one in the previous version
    of the program, and it is defined on lines 22–32.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 程序在用户点击任意一个按钮时调用 `OnButtonClicked()` 子程序（第12行）。为了知道哪个按钮被点击，子程序使用 `If/ElseIf`
    语句比较 `LastClickedButton` 属性与三个按钮的标识符（第13至19行）。在识别出被点击的按钮后，子程序将 `GraphicsWindow`
    的 `PenColor` 属性设置为选定的颜色。`OnMouseMove()` 子程序与程序的前一个版本相同，它定义在第22至32行。
- en: '**TIP**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: '*You can also write the* `OnButtonClicked()` *subroutine like this:*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*你也可以这样编写* `OnButtonClicked()` *子程序：*'
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Instead of hardcoding the color of the clicked button, you get the color from
    the clicked button’s caption using the* `GetButtonCaption()` *method.*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*你不再硬编码点击按钮的颜色，而是通过* `GetButtonCaption()` *方法从被点击按钮的标题中获取颜色。*'
- en: '**TRY IT OUT 12-2**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**试试看 12-2**'
- en: You can change the color of a button’s caption by setting the `BrushColor` property
    of `GraphicsWindow` before you create the button. Change [Listing 12-2](ch12.html#ch12ex2)
    so the text color of each button matches its caption (write the text of the Blue
    button in blue, and so on).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在创建按钮之前设置 `GraphicsWindow` 的 `BrushColor` 属性来更改按钮标题的颜色。修改 [Listing 12-2](ch12.html#ch12ex2)，使每个按钮的文字颜色与其标题一致（将蓝色按钮的文字写成蓝色，依此类推）。
- en: '**Explore Circuits with Code**'
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用代码探索电路**'
- en: In this section, you’ll create a program that demonstrates an electrical series
    circuit. (Your skills are shocking!) The circuit includes a battery, three resistors,
    and a switch connected in series. A user can change the battery’s voltage and
    the values of the three resistors by entering their values in the text boxes.
    When the user enters a new value in any of the text boxes, the `Controls` object
    raises the `TextTyped` event. In response to this event, the program automatically
    calculates (and displays) the current that flows through the circuit and the voltages
    across each of the three resistors (see [Figure 12-4](ch12.html#ch12fig4)).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将创建一个演示电气串联电路的程序。（你的技能真是太震撼了！）电路包括一个电池、三个电阻和一个串联的开关。用户可以通过在文本框中输入数值来改变电池电压和三个电阻的数值。当用户在任意文本框中输入新值时，`Controls`
    对象会触发 `TextTyped` 事件。作为响应，程序会自动计算（并显示）电路中的电流以及每个电阻上的电压（参见 [图 12-4](ch12.html#ch12fig4)）。
- en: '![image](graphics/f12-04.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f12-04.jpg)'
- en: '*Figure 12-4: A program that shows you the operation of a series circuit*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 12-4：一个展示串联电路运行的程序*'
- en: 'Here are the equations that describe the science behind the program:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是描述该程序背后科学原理的方程式：
- en: '**Total resistance** *R[tot]* = *R*[1] + *R*[2] + *R*[3]'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**总电阻** *R[tot]* = *R*[1] + *R*[2] + *R*[3]'
- en: '**Current through the circuit** *I* = *V* ÷ *R[tot]*, where *V* is the battery
    voltage'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**电路中的电流** *I* = *V* ÷ *R[tot]*，其中 *V* 是电池电压'
- en: '**Voltage across *R*[1]** *V*[1] = *I* × *R*[1]'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**电压跨越 *R*[1]** *V*[1] = *I* × *R*[1]'
- en: '**Voltage across *R*[2]** *V*[2] = *I* × *R*[2]'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**电压跨越 *R*[2]** *V*[2] = *I* × *R*[2]'
- en: '**Voltage across *R*[3]** *V*[3] = *I* × *R*[3]'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**电压跨越 *R*[3]** *V*[3] = *I* × *R*[3]'
- en: Let’s look at the computations. You calculate the total resistance (*R[tot]*)
    by adding the values of the three resistors together. Next, you calculate the
    current (*I*) that flows in the circuit by dividing the battery voltage (*V*)
    by the total resistance. Then you calculate the voltage across each resistor by
    multiplying the current by the value of that resistor. (Try reading this paragraph
    aloud to your friends as if it’s super easy. It will blow their minds!)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下计算过程。你通过将三个电阻的数值相加来计算总电阻 (*R[tot]*)。接下来，你通过将电池电压 (*V*) 除以总电阻来计算电路中的电流
    (*I*)。然后，你通过将电流乘以每个电阻的数值来计算每个电阻上的电压。（试着大声读这段话给你的朋友听，仿佛它超级简单。这会让他们震惊！）
- en: The following steps guide you through creating this program. So buckle your
    seat belt, hold on tight, and get set to rocket into the exciting world of computer
    simulations.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导你创建这个程序。所以系好安全带，紧紧抓住，准备好进入激动人心的计算机模拟世界。
- en: '***Step 1: Open the Startup File***'
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步骤 1：打开启动文件***'
- en: To start creating this circuit simulator, open *SeriesCircuit_Incomplete.sb*
    from this chapter’s folder. The file contains comments that tell you where to
    add your code and empty placeholders for the subroutines you’ll write.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始创建这个电路模拟器，从本章文件夹中打开*SeriesCircuit_Incomplete.sb*。该文件包含注释，告诉你在哪里添加代码，以及你将编写的子程序的空占位符。
- en: 'The folder for this chapter also includes the two background images you’ll
    need: *bkgndOff.bmp* and *bkgndOn.bmp* (see [Figure 12-5](ch12.html#ch12fig5);
    we added the image names for clarity). The two images are the same except for
    the state of the switch: the switch is in the open position in *bkgndOff.bmp*
    but is closed in *bkgndOn.bmp*.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的文件夹中还包括了你需要的两个背景图像：*bkgndOff.bmp*和*bkgndOn.bmp*（见[图12-5](ch12.html#ch12fig5)；我们添加了图像名称以便于理解）。这两张图像除了开关状态不同外，其他完全相同：*bkgndOff.bmp*中的开关处于打开状态，而*bkgndOn.bmp*中的开关处于关闭状态。
- en: '![image](graphics/f12-05.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f12-05.jpg)'
- en: '*Figure 12-5: The two background images of* SeriesCircuit.sb'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-5：* SeriesCircuit.sb *的两个背景图像*'
- en: When you start writing the code for this program, you’ll see many hard-coded
    numbers. These numbers represent the coordinate points for the text boxes and
    labels and for checking the switch’s boundaries. To help you understand where
    these numbers come from, refer to [Figure 12-6](ch12.html#ch12fig6). In this figure,
    we added coordinate axes and gridlines on top of the background image, and we
    marked the coordinates of all the points you’ll use in the program.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始编写这个程序的代码时，你会看到许多硬编码的数字。这些数字表示文本框和标签的坐标点，以及用于检查开关边界的坐标点。为了帮助你理解这些数字的来源，请参考[图12-6](ch12.html#ch12fig6)。在这张图中，我们在背景图像上添加了坐标轴和网格线，并标出了程序中将使用的所有点的坐标。
- en: '![image](graphics/f12-06.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f12-06.jpg)'
- en: '*Figure 12-6: Illustrating the magic numbers used in* SeriesCircuit.sb'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-6：展示在* SeriesCircuit.sb *中使用的魔法数字*'
- en: '***Step 2: Add the Main Code***'
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步骤2：添加主要代码***'
- en: As in the previous examples, you’ll start by designing the user interface. You’ll
    write the code to load the background images, create and position the GUI elements
    (the text boxes), and then register the event handlers. Add the main part of the
    program, which is shown in [Listing 12-3](ch12.html#ch12ex3).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如同之前的示例，你将从设计用户界面开始。你将编写代码来加载背景图像，创建并定位GUI元素（文本框），然后注册事件处理程序。接下来，添加程序的主要部分，详见[列表12-3](ch12.html#ch12ex3)。
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 12-3: Setting up the GUI*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表12-3：设置GUI*'
- en: You start by loading the two background images and saving their identifiers
    in the `offImg` and `onImg` variables (line 2–3). The `bkgndImg` variable holds
    the current background image, which changes when a user clicks the switch. When
    the program starts, the switch is open, so the program sets `bkgndImg = offImg`
    (line 4). Lines 6–7 adjust the width and height of the graphics window to match
    the size of the background image, and line 8 draws the background image (`offImg`
    in this case) in the graphics window.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先加载两个背景图像，并将它们的标识符保存在`offImg`和`onImg`变量中（第2至3行）。`bkgndImg`变量保存当前的背景图像，用户点击开关时该图像会发生变化。当程序启动时，开关是打开的，所以程序将`bkgndImg
    = offImg`（第4行）。第6至7行调整图形窗口的宽度和高度，使其与背景图像的大小匹配，第8行在图形窗口中绘制背景图像（此时为`offImg`）。
- en: Lines 10–17 create the four text boxes (for the three resistors and the battery
    voltage) and resize them so they’re exactly on top of their positions in the background
    image. In lines 18–21, you set default values for these text boxes. In line 23,
    you register a handler for the `MouseDown` event, because you’ll want to know
    when a user clicks the switch. Line 24 registers a handler for the `TextTyped`
    event, because you’ll calculate and display the values of `I`, `V1`, `V2`, and
    `V3` automatically when the user enters a new value in any of the four text boxes.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 第10至17行创建了四个文本框（分别用于三个电阻和电池电压），并调整其大小，使它们精确地位于背景图像中的对应位置。在第18至21行，你为这些文本框设置了默认值。在第23行，你注册了一个`MouseDown`事件的处理程序，因为你需要知道用户何时点击开关。第24行注册了一个`TextTyped`事件的处理程序，因为当用户在任意四个文本框中输入新值时，你将自动计算并显示`I`、`V1`、`V2`和`V3`的值。
- en: '***Step 3: Toggle the Switch***'
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步骤3：切换开关***'
- en: When a user clicks the switch, you need to change the background image to toggle
    the switch. Add the `OnMouseDown()` subroutine in [Listing 12-4](ch12.html#ch12ex4).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击开关时，你需要更改背景图像来切换开关。在[列表12-4](ch12.html#ch12ex4)中添加`OnMouseDown()`子程序。
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 12-4: Changing the background image*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表12-4：更改背景图像*'
- en: The subroutine starts by getting the x- and y-coordinates of the point where
    the mouse was clicked and setting them to the variables `x` and `y` (lines 2–3).
    Line 4 then checks if this point lies within the rectangular region of the switch;
    if the mouse was inside the boundaries of the switch, the subroutine toggles the
    current value of the `bkgndImg` variable (from on to off or from off to on) at
    lines 5–9 and then calls the `UpdateUserInterface()` subroutine to switch the
    background image and update the calculated values (line 10). As you’ll see in
    a moment, if the user opens the switch, the program shows only the `offImg` background
    image; the values of `I`, `V1`, `V2`, and `V3` won’t show because no current’s
    flowing through the circuit when the switch is open.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 该子程序首先获取鼠标点击位置的x和y坐标，并将它们赋值给`x`和`y`变量（第2到第3行）。第4行检查该点是否位于开关的矩形区域内；如果鼠标位于开关的边界内，子程序将在第5到第9行切换`bkgndImg`变量的当前值（从开到关或从关到开），然后调用`UpdateUserInterface()`子程序来切换背景图像并更新计算值（第10行）。如你所见，如果用户打开开关，程序只会显示`offImg`背景图像；因为开关打开时电路中没有电流流动，所以`I`、`V1`、`V2`和`V3`的值不会显示。
- en: '***Step 4: Respond to Changes***'
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步骤4：响应变化***'
- en: Add the `OnTextTyped()` subroutine in [Listing 12-5](ch12.html#ch12ex5). This
    subroutine is called when the user enters a new value in any of the four text
    boxes. As you can see, this subroutine just calls `UpdateUserInterface()`, which
    updates the UI to show the current values of `V`, `R1`, `R2`, and `R3` as well
    as the state of the switch.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在[清单12-5](ch12.html#ch12ex5)中添加`OnTextTyped()`子程序。此子程序在用户在任意四个文本框中输入新值时被调用。如你所见，该子程序只是调用`UpdateUserInterface()`，该函数会更新用户界面，显示当前的`V`、`R1`、`R2`和`R3`的值以及开关的状态。
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 12-5: The* `OnTextTyped()` *subroutine*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单12-5：* `OnTextTyped()` *子程序*'
- en: '***Step 5: Update the Program’s Interface***'
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步骤5：更新程序界面***'
- en: Now add the `UpdateUserInterface()` subroutine in [Listing 12-6](ch12.html#ch12ex6).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在[清单12-6](ch12.html#ch12ex6)中添加`UpdateUserInterface()`子程序。
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 12-6: Updating the text boxes*'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单12-6：更新文本框*'
- en: The `UpdateUserInterface()` subroutine starts by redrawing the selected background
    image. If the switch is in the off position, the `If` statement on line 3 is false
    and the subroutine ends; the UI doesn’t show any of the computed values (because
    no current is flowing through the circuit). But if the switch is on (which means
    the current background image is set to `onImg`), the subroutine moves on to compute
    the values of `I`, `V1`, `V2`, and `V3`. It starts by collecting the content of
    the four text boxes (lines 4–7). It then computes the total resistance by adding
    the values `R1`, `R2`, and `R3` together (line 8). If the total resistance is
    greater than 0 (line 9), the subroutine computes the current (`I`) that flows
    through the circuit (line 10) and the values of `V1`, `V2`, and `V3`, rounding
    each value to the nearest hundredth (lines 11–14). The subroutine then shows the
    computed values at the correct locations on top of the background image (lines
    15–18).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`UpdateUserInterface()`子程序首先会重新绘制选定的背景图像。如果开关处于关闭位置，第3行的`If`语句为假，子程序结束；用户界面不会显示任何计算结果（因为电路中没有电流流动）。但是，如果开关是开启状态（这意味着当前背景图像设置为`onImg`），子程序将继续计算`I`、`V1`、`V2`和`V3`的值。它首先收集四个文本框的内容（第4到第7行）。然后，它通过将`R1`、`R2`和`R3`的值相加来计算总电阻（第8行）。如果总电阻大于0（第9行），子程序将计算电路中流过的电流（`I`）（第10行）以及`V1`、`V2`和`V3`的值，并将每个值四舍五入到最接近的百分位（第11到第14行）。然后，子程序会将计算出的值显示在背景图像的正确位置（第15到第18行）。'
- en: Most of the work in this program was designing the GUI (drawing the background
    images and positioning the text boxes on top of the background image). Then you
    had to write the code for handling the events, performing the calculations, and
    displaying the results. Congratulations; you just made a virtual electrical circuit!
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 本程序的大部分工作是设计GUI（绘制背景图像并将文本框放置在背景图像之上）。然后，你需要编写处理事件的代码，执行计算并显示结果。恭喜你，你已经创建了一个虚拟电路！
- en: In the next section, you’ll write a GUI program that explains another object
    in the Small Basic library, the `Flickr` object.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将编写一个GUI程序，解释Small Basic库中的另一个对象——`Flickr`对象。
- en: '**TRY IT OUT 12-3**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**动手试试 12-3**'
- en: Think of ways to change this simulation to something else. Use different background
    images, like architectural blueprints, a pizza, or a Google Maps photo of your
    neighborhood. Then update the placement of the text boxes and the logic/math of
    what’s entered to match your new theme. Head to *[http://tiny.cc/sharesimulation/](http://tiny.cc/sharesimulation/)*
    to show off your program and to see what others have created.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 想想办法将这个模拟程序改造成其他形式。使用不同的背景图片，例如建筑蓝图、披萨，或是你所在社区的 Google Maps 照片。然后更新文本框的位置以及输入逻辑/数学，以匹配你新的主题。前往
    *[http://tiny.cc/sharesimulation/](http://tiny.cc/sharesimulation/)* 展示你的程序，并看看其他人创建了什么。
- en: '**Program Your Own Image Viewer**'
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程自己的图像查看器**'
- en: 'In this section, you’ll create an image viewer called *ImageViewer.sb* that
    displays images from Flickr (a photo-sharing website) based on search input from
    a user. Small Basic gives you an object, appropriately named `Flickr`, which gets
    images from the Flickr website: *[http://www.flickr.com/](http://www.flickr.com/)*.
    [Figure 12-7](ch12.html#ch12fig7) shows the GUI for this program.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将创建一个名为 *ImageViewer.sb* 的图像查看器，根据用户输入的搜索内容显示来自 Flickr（一种照片分享网站）的图像。Small
    Basic 提供了一个名为 `Flickr` 的对象，它可以从 Flickr 网站获取图片：* [http://www.flickr.com/](http://www.flickr.com/)*。
    [图12-7](ch12.html#ch12fig7) 显示了该程序的 GUI。
- en: '![image](graphics/f12-07.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f12-07.jpg)'
- en: '*Figure 12-7: Sample output of* ImageViewer.sb'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-7：* ImageViewer.sb 程序的示例输出'
- en: '**NOTE**'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*You’ll need Small Basic version 1.1 or later to use the* `Flickr` *object.*'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*你需要使用 Small Basic 1.1 或更高版本才能使用 `Flickr` 对象。*'
- en: The *ImageViewer.sb* program includes a text box into which the user enters
    the search tag and a button (labeled Next). When the user clicks the button, the
    program uses the `Flickr` object to get (and display) an image that matches the
    user’s search tag. The program is shown in [Listing 12-7](ch12.html#ch12ex7).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '*ImageViewer.sb* 程序包括一个文本框，用户可以在其中输入搜索标签，以及一个按钮（标记为“下一步”）。当用户点击按钮时，程序使用 `Flickr`
    对象根据用户的搜索标签获取（并显示）一张图片。该程序在 [Listing 12-7](ch12.html#ch12ex7) 中展示。'
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 12-7: Loading images from Flickr*'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 12-7：从 Flickr 加载图片*'
- en: The program starts by designing the GUI (lines 2–5) and registering the `ButtonClicked`
    event handler (line 7). When the button is clicked, the `OnButtonClicked()` subroutine
    gets the search text from the text box and saves it in the `tag` variable (line
    10). If `tag` isn’t empty (line 11), the code searches Flickr using the given
    `tag` text for a random picture and then grabs the URL (line 12) by using `Flickr.GetRandomPicture()`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 程序从设计 GUI 开始（第 2–5 行），并注册 `ButtonClicked` 事件处理程序（第 7 行）。当按钮被点击时，`OnButtonClicked()`
    子程序从文本框中获取搜索文本，并将其保存在 `tag` 变量中（第 10 行）。如果 `tag` 不为空（第 11 行），代码会使用给定的 `tag` 文本搜索
    Flickr，寻找一张随机图片，然后通过 `Flickr.GetRandomPicture()` 获取该图片的 URL（第 12 行）。
- en: That URL is passed to `ImageList.LoadImage()`, which loads an image from a file
    or the Internet and saves it into the `img` variable (line 12). If `img` is empty,
    which means Flickr didn’t find an image with the user’s tag, you let the user
    know in a message box (line 14). If Flickr found an image, you resize the graphics
    window to the dimensions of the loaded image (lines 16–17) and draw the image
    directly below the text box and the button (line 18).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 该 URL 会传递给 `ImageList.LoadImage()`，它会从文件或互联网上加载图片，并将其保存到 `img` 变量中（第 12 行）。如果
    `img` 为空，意味着 Flickr 没有找到符合用户标签的图片，你会通过消息框通知用户（第 14 行）。如果 Flickr 找到了图片，你会调整图形窗口的大小以适应加载的图片尺寸（第
    16–17 行），并将图片绘制在文本框和按钮的正下方（第 18 行）。
- en: '**TRY IT OUT 12-4**'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试一下 12-4**'
- en: Write a program to ask the user what their favorite animal is. Then search for
    that animal using the `Flickr` object and display the returned image. Next, ask
    the user, “Like this one?” and show them two buttons labeled Yes and No. If the
    user clicks Yes, display *Hooray!* in a message box. If they click No, display
    a different random picture of that animal and ask, “How about this one?” Continue
    these steps until the user clicks Yes. You’ve just turned a simple program into
    a game!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，询问用户他们最喜欢的动物是什么。然后，使用 `Flickr` 对象搜索该动物并显示返回的图片。接下来，询问用户：“喜欢这个吗？”并显示两个按钮，分别标记为“是”和“否”。如果用户点击“是”，则在消息框中显示
    *太好了！*。如果他们点击“否”，则显示该动物的另一张随机图片，并询问：“这个怎么样？”继续这些步骤，直到用户点击“是”。你刚刚将一个简单的程序变成了一个游戏！
- en: '**Programming Challenges**'
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程挑战**'
- en: If you get stuck, check out *[http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)*
    for the solutions and for more resources and review questions for teachers and
    students.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到困难，请查看 *[http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)*，获取解决方案以及更多的资源和供教师和学生使用的复习问题。
- en: In this program, you’ll create a hidden treasure game. Open the file *HiddenTreasure_Incomplete.sb*
    from this chapter’s folder. When you run the program, you’ll see the following
    interface.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个程序中，你将创建一个隐藏宝藏游戏。打开本章文件夹中的*HiddenTreasure_Incomplete.sb*文件。当你运行程序时，你将看到以下界面。
- en: '![image](graphics/f0178-01.jpg)'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f0178-01.jpg)'
- en: The purpose of the game is to guess the location of a hidden treasure. The player
    makes a guess by pressing one of the four buttons. If they guess correctly, they
    gain $10\. Otherwise, they lose $5\. The game ends after 10 rounds. Follow the
    comments shown in the program’s source code to write the missing code and complete
    the program.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 游戏的目的是猜测隐藏宝藏的位置。玩家通过按下四个按钮之一来进行猜测。如果猜对了，他们将获得10美元。否则，他们将失去5美元。游戏在10轮后结束。按照程序源代码中的注释编写缺失的代码，完成程序。
- en: In this exercise, you’ll create a program that computes the total cost of attending
    a special show at Sea World. Open the file *SeaWorld_Incomplete.sb* from this
    chapter’s folder. When you run the program, you’ll see the following user interface.
    The user enters the number of adult, senior, student, and VIP tickets they want
    to buy and then clicks the Compute button to calculate the total charge. Complete
    the program to display the total charge when the user clicks Compute.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个练习中，你将创建一个程序来计算参加海洋世界特别表演的总费用。打开本章文件夹中的*SeaWorld_Incomplete.sb*文件。当你运行程序时，你将看到以下用户界面。用户输入他们想购买的成人票、老年票、学生票和VIP票的数量，然后点击“计算”按钮来计算总费用。完成程序，使其在用户点击“计算”时显示总费用。
- en: '![image](graphics/f0179-01.jpg)'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f0179-01.jpg)'
