- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Insecure Direct Object References
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 不安全的直接对象引用
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: Like XSS and open redirects, *insecure direct object references (**IDORs)* are
    a type of bug present in almost every web application. They happen when the application
    grants direct access to a resource based on the user’s request, without validation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 像 XSS 和开放重定向，*不安全的直接对象引用（**IDORs**）* 是几乎每个 Web 应用程序中都存在的一种漏洞。它们发生在应用程序根据用户的请求直接授予资源访问权限时，且没有进行验证。
- en: In this chapter, we’ll explore how these work. Then we’ll dive into how applications
    prevent IDORs, and how you can bypass those common protection mechanisms.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨这些是如何工作的。然后我们将深入了解应用程序如何防止 IDOR，并且如何绕过这些常见的保护机制。
- en: Mechanisms
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机制
- en: Despite its long and intimidating name, IDOR is easy to understand; it’s essentially
    a missing access control. IDORs happen when users can access resources that do
    not belong to them by directly referencing the object ID, object number, or filename.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 IDOR 这个名字又长又吓人，但其实很容易理解；它本质上是缺失的访问控制。当用户可以通过直接引用对象 ID、对象编号或文件名来访问本不属于他们的资源时，就会发生
    IDOR。
- en: 'For example, let’s say that *example.com* is a social media site that allows
    you to chat with others. When you sign up, you notice that your user ID on the
    site is *1234*. This website allows you to view all your messages with your friends
    by clicking the View Your Messages button located on the home page. When you click
    that button, you get redirected to this location, which displays all your direct
    messages: *https://example.com/messages?user_id=1234.*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设 *example.com* 是一个社交媒体网站，允许你与他人聊天。当你注册时，你会注意到你在网站上的用户 ID 是 *1234*。该网站允许你通过点击主页上的“查看您的消息”按钮来查看与朋友的所有消息。当你点击该按钮时，你会被重定向到这个位置，显示你所有的直接消息：*https://example.com/messages?user_id=1234*。
- en: Now, what if you change the URL in the URL bar to *https://example.com/messages?user_id=1233*?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果你将 URL 栏中的 URL 更改为 *https://example.com/messages?user_id=1233* 呢？
- en: 'You notice that you can now see all the private messages between another user,
    user *1233*, and their friends. At this point, you’ve found an IDOR vulnerability.
    The application does not restrict access to messages based on the user’s identity.
    Instead, it allows users to request any messages that they wish. The application
    naively trusts user input, and it directly loads resources based on the user-provided
    `user_id` value, like this piece of example code:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现现在可以看到另一个用户 *1233* 与他们的朋友之间的所有私人消息。在这一点上，你已经发现了一个 IDOR 漏洞。该应用程序没有基于用户身份限制消息的访问。相反，它允许用户请求任何他们希望的消息。该应用程序天真地信任用户输入，并根据用户提供的
    `user_id` 值直接加载资源，就像这段示例代码一样：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'IDORs are not just limited to reading other users’ information, either. You
    can also use them to edit data on another user’s behalf. For example, let’s say
    that users can submit a POST request to change their password. The POST request
    must contain that user’s ID and new password, and they must direct the request
    to the */change_password* endpoint:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: IDOR 不仅限于读取其他用户的信息。你还可以利用它来代表另一个用户编辑数据。例如，假设用户可以提交一个 POST 请求来更改密码。该 POST 请求必须包含该用户的
    ID 和新密码，并且必须将请求发送到 */change_password* 端点：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this case, if the application doesn’t validate that the submitted user ID
    corresponds to the currently logged-in user, an attacker might be able to change
    someone else’s password by sending a user ID that doesn’t belong to them, like
    this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，如果应用程序没有验证提交的用户 ID 是否对应当前登录的用户，攻击者可能会通过发送一个不属于他们的用户 ID 来更改其他人的密码，例如：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, IDORs can affect resources other than database objects. Another type
    of IDOR happens when applications reference a system file directly. For example,
    this request allows users to access a file they’ve uploaded: *https://example.com/uploads?file=user1234-01.jpeg.*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，IDOR 还可能影响数据库对象以外的资源。另一种类型的 IDOR 发生在应用程序直接引用系统文件时。例如，以下请求允许用户访问他们上传的文件：*https://example.com/uploads?file=user1234-01.jpeg*。
- en: 'Since the value of the `file` parameter is `user1234–01.jpeg`, we can easily
    deduce that user-uploaded files follow the naming convention of `USER_ID-FILE_NUMBER``.``FILE_EXTENSION`.
    Therefore, another user’s uploaded files might be named `user1233–01.jpeg`. If
    the application doesn’t restrict users’ access to files that belong to others,
    an attacker could access anyone’s uploaded files by guessing the filenames, like
    this: *https://example.com/uploads?file=user1233-01.jpeg.*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`file`参数的值是`user1234–01.jpeg`，我们可以很容易推断用户上传的文件遵循`USER_ID-FILE_NUMBER``.``FILE_EXTENSION`的命名规则。因此，另一个用户上传的文件可能被命名为`user1233–01.jpeg`。如果应用程序没有限制用户访问属于其他用户的文件，攻击者可以通过猜测文件名访问任何人的上传文件，像这样：*https://example.com/uploads?file=user1233-01.jpeg*。
- en: A malicious user might even be able to read sensitive system files through this
    endpoint! For instance, */etc/shadow* is a file on Unix systems used to keep track
    of user passwords. Because it is sensitive, it should not be exposed to regular
    users. If you can read the file this way, through a URL like *https://example.com/uploads?file=/PATH/TO/etc/shadow,*
    then you’ve found a vulnerability! Attackers being able to read files outside
    the web root folder is also known as a *path traversal attack*, or directory traversal
    attack. We will talk more about directory traversal attacks in Chapter 17.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意用户甚至可能通过这个端点读取敏感的系统文件！例如，*/etc/shadow*是Unix系统上的一个文件，用来记录用户密码。由于它是敏感的，不应暴露给普通用户。如果你能够通过像*https://example.com/uploads?file=/PATH/TO/etc/shadow*这样的URL读取文件，那么你就发现了一个漏洞！攻击者能够读取位于Web根目录之外的文件，也称为*路径遍历攻击*，或者目录遍历攻击。我们将在第17章中详细讨论目录遍历攻击。
- en: Prevention
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预防
- en: IDORs happen when an application fails at two things. First, it fails to implement
    access control based on user identity. Second, it fails to randomize object IDs
    and instead keeps references to data objects, like a file or a database entry,
    predictable.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: IDOR攻击发生在应用程序未能做到两点时。首先，它未能基于用户身份实现访问控制。其次，它未能随机化对象ID，而是保持对数据对象（如文件或数据库条目）的引用是可预测的。
- en: In this chapter’s first example, you were able to see messages belonging to
    user *1233* because the server didn’t check the logged-in user’s identity before
    sending private info. The server wasn’t verifying that you were, in fact, user
    *1233*. It simply returned the information you asked for.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第一个示例中，你能够看到属于用户*1233*的消息，因为服务器在发送私人信息之前没有检查登录用户的身份。服务器没有验证你确实是用户*1233*。它只是返回了你请求的信息。
- en: 'In this case, since user IDs are simply numbers, it’s easy to infer that you
    can also retrieve the messages for user *1232* and user *1231*, like so:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，由于用户ID仅仅是数字，因此很容易推断你也可以获取用户*1232*和用户*1231*的消息，方法如下：
- en: '*https://example.com/messages?user_id=1232*'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*https://example.com/messages?user_id=1232*'
- en: '*https://example.com/messages?user_id=1231*'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*https://example.com/messages?user_id=1231*'
- en: This is why the vulnerability is called an insecure *direct object* *reference*.
    The user’s ID is used to directly reference the user’s private messages on this
    site. If not secured by proper access control, these predictable *direct object
    references* expose the data hidden behind them, allowing anyone to grab the information
    associated with the reference.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么该漏洞被称为不安全的*直接对象* *引用*。用户的ID被用来直接引用该网站上用户的私人消息。如果没有通过适当的访问控制进行保护，这些可预测的*直接对象引用*会暴露它们背后的数据，允许任何人抓取与该引用相关的信息。
- en: Applications can prevent IDORs in two ways. First, the application can check
    the user’s identity and permissions before granting access to a resource. For
    example, the application can check if the user’s session cookies correspond to
    the `user_id` whose messages the user is requesting.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序可以通过两种方式预防IDOR攻击。首先，应用程序可以在授予访问资源的权限之前，检查用户的身份和权限。例如，应用程序可以检查用户的会话Cookie是否对应于用户请求的消息的`user_id`。
- en: 'Second, the website can use a unique, unpredictable key or a hashed identifier
    to reference each user’s resources. *Hashing* refers to the one-way process that
    transforms a value into another string. Hashing IDs with a secure algorithm and
    a secret key makes it difficult for attackers to guess the hashed ID strings.
    If *example.com* structured its requests as follows, attackers would no longer
    be able to access other users’ messages, since there would be no way for an attacker
    to guess such a long, random `user_key` value:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，网站可以使用唯一的、不可预测的密钥或哈希标识符来引用每个用户的资源。*哈希*是指将一个值转换成另一个字符串的单向过程。使用安全算法和秘密密钥对ID进行哈希处理，可以使攻击者很难猜测出哈希后的ID字符串。如果*example.com*将请求结构化为如下形式，攻击者将无法再访问其他用户的消息，因为攻击者无法猜测出如此长且随机的`user_key`值：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: But this method isn’t a complete protection against IDORs. Attackers can still
    leak user information if they can find a way to steal these URLs or `user_keys`.
    The best way to protect against IDORs is fine-grained access control, or a combination
    of access control and randomization or hashing of IDs.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这种方法并不能完全防止IDOR漏洞。攻击者仍然可以泄露用户信息，如果他们能够找到窃取这些URL或`user_keys`的方法。防止IDOR漏洞的最佳方式是精细化的访问控制，或者结合访问控制与ID随机化或哈希处理ID。
- en: Hunting for IDORs
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 寻找IDOR漏洞
- en: Let’s hunt for some IDORs! The best way to discover IDORs is through a source
    code review that checks if all direct object references are protected by access
    control. We’ll talk about how to conduct source code reviews in Chapter 22. But
    if you cannot access the application’s source code, here’s a simple and effective
    way to test for IDORs.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来寻找一些IDOR漏洞吧！发现IDOR漏洞的最佳方式是通过源代码审查，检查所有的直接对象引用是否都受到了访问控制的保护。我们将在第22章中讨论如何进行源代码审查。但如果你无法访问应用程序的源代码，这里有一种简单且有效的方式来测试IDOR漏洞。
- en: 'Step 1: Create Two Accounts'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤1：创建两个账户
- en: First, create two different accounts on the target website. If users can have
    different permissions on the site, create two accounts for each permission level.
    For example, create two admin accounts, two regular user accounts, two group member
    accounts, and two non-group-member accounts. This will help you test for access
    control issues among similar user accounts, as well as across users with different
    privileges.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在目标网站上创建两个不同的账户。如果用户可以在网站上拥有不同的权限，针对每种权限级别创建两个账户。例如，创建两个管理员账户、两个普通用户账户、两个组成员账户和两个非组成员账户。这将帮助你测试相似用户账户之间以及具有不同权限的用户之间的访问控制问题。
- en: 'Continuing the previous example, you could create two accounts on *example.com*:
    user *1235* and user *1236*. One of the accounts would serve as your attacker
    account, used to carry out the IDOR attacks. The other would be the victim account
    used to observe the effects of the attack. The message pages for the two users
    would have the following URLS:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 继续前面的例子，你可以在*example.com*上创建两个账户：用户*1235*和用户*1236*。其中一个账户将作为你的攻击者账户，用来进行IDOR攻击，另一个账户作为受害者账户，用来观察攻击的效果。这两个用户的消息页面将具有以下URL：
- en: '*https://example.com/messages?user_id=1235* (Attacker)'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*https://example.com/messages?user_id=1235*（攻击者）'
- en: '*https://example.com/messages?user_id=1236* (Victim)'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*https://example.com/messages?user_id=1236*（受害者）'
- en: If the application doesn’t allow you to create so many accounts, you could reach
    out to the company and ask for more accounts. Companies will often grant you extra
    accounts if you explain that you’re participating in their bug bounty program.
    Also, if the application has paid memberships, ask the company for a premium account
    or pay for one yourself. Quite often, paying for these memberships is worth it,
    because you gain access to new features to test.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序不允许你创建这么多账户，你可以联系公司请求更多账户。如果你解释你正在参与他们的漏洞悬赏计划，公司通常会给你额外的账户。另外，如果该应用有付费会员服务，向公司请求一个高级账户，或者你可以自己支付购买。通常来说，购买这些会员是值得的，因为你可以获得新的功能来进行测试。
- en: In addition to testing with two accounts, you should also repeat the testing
    procedure without signing in. See if you can use an unauthenticated session to
    access the information or functionalities made available to legitimate users.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用两个账户进行测试外，你还应该重复测试过程，但不登录。查看你是否能够在未认证的会话中访问合法用户所能访问的信息或功能。
- en: 'Step 2: Discover Features'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤2：发现功能
- en: Next, try to discover as many application features as possible. Use the highest-privileged
    account you own and go through the application, looking for application features
    to test.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，尽可能多地发现应用程序的功能。使用你拥有的最高权限账户，浏览应用程序，寻找需要测试的功能。
- en: 'Pay special attention to functionalities that return user information or modify
    user data. Note them for future reference. Here are some features that might have
    IDORs on *example.com*:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 特别注意那些返回用户信息或修改用户数据的功能。记录下来以备后用。以下是一些可能存在IDOR漏洞的*example.com*功能：
- en: 'This endpoint lets you read user messages:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该端点允许你读取用户消息：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This one lets you read user files:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个端点允许你读取用户文件：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This endpoint deletes user messages:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该端点删除用户消息：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This one is for accessing group files:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个端点用于访问小组文件：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This one deletes a group:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个端点删除一个小组：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Step 3: Capture Requests'
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第3步：捕获请求
- en: Browse through each application feature you mapped in the preceding step and
    capture all the requests going from your web client to the server. Inspect each
    request carefully and find the parameters that contain numbers, usernames, or
    IDs. Remember that you can trigger IDORs from different locations within a request,
    like URL parameters, form fields, filepaths, headers, and cookies.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览你在前一步中映射的每个应用功能，并捕获所有从Web客户端到服务器的请求。仔细检查每个请求，找出包含数字、用户名或ID的参数。记住，你可以通过请求中的不同位置触发IDOR漏洞，例如URL参数、表单字段、文件路径、头部和Cookies。
- en: To make testing more efficient, use two browsers, and log into a different account
    in each. Then manipulate the requests coming from one browser to see if the change
    is immediately reflected on the other account. For example, let’s say you create
    two accounts, *1235* and *1236*. Log into *1235* in Firefox and *1236* in Chrome.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高测试效率，使用两个浏览器，并在每个浏览器中登录不同的账户。然后修改来自一个浏览器的请求，看看该变更是否立即反映到另一个账户上。例如，假设你创建了两个账户，*1235*和*1236*。在Firefox中登录*1235*，在Chrome中登录*1236*。
- en: Use Burp to modify the traffic coming from Firefox. Turn on Intercept in the
    Proxy tab and edit requests in the proxy text window ([Figure 10-1](#figure10-1)).
    Check if your attack has succeeded by observing the changes reflected on the victim
    account in Chrome.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Burp修改来自Firefox的流量。在Proxy标签页中开启拦截功能，并在代理文本窗口中编辑请求（[图10-1](#figure10-1)）。通过观察Chrome中受害者账户的变化来检查你的攻击是否成功。
- en: Also, note that APIs like Representational State Transfer (REST) and GraphQL
    are often found to be vulnerable to IDOR too. We will talk more about hacking
    APIs in Chapter 24. Be on the lookout for these endpoints. You can use the recon
    techniques from Chapter 5 to discover additional endpoints. Then follow this testing
    methodology to switch out IDs found in those endpoints as well.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，请注意，像表示状态转移（REST）和GraphQL这样的API也经常容易受到IDOR攻击。我们将在第24章中详细讨论API的黑客攻击。务必留意这些端点。你可以使用第5章中的侦察技巧来发现其他端点。然后按照此测试方法替换这些端点中发现的ID。
- en: '![f10001](image_fi/501546c10/f10001.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![f10001](image_fi/501546c10/f10001.png)'
- en: 'Figure 10-1: Modify the request in Burp’s proxy window to switch out the IDs.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-1：在Burp的代理窗口中修改请求，以切换ID。
- en: 'Step 4: Change the IDs'
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第4步：更改ID
- en: Finally, switch the IDs in the sensitive requests and check if the information
    returned also changes. See if you can access the victim account’s information
    by using the attacker account. And check if you can modify the second user’s account
    from the first.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，切换敏感请求中的ID，查看返回的信息是否也发生了变化。看看你是否能通过攻击者账户访问受害者账户的信息。并检查你是否能从第一个账户修改第二个用户的账户。
- en: 'For example, in this setup, you can try to access the functionalities that
    user *1236* has access to via your Firefox browser:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在这个设置中，你可以尝试通过Firefox浏览器访问用户*1236*有权限的功能：
- en: 'This endpoint lets you read user messages:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该端点允许你读取用户消息：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This one lets you read user files:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个端点允许你读取用户文件：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This endpoint deletes user messages:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该端点删除用户消息：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This one is for accessing group files:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个端点用于访问小组文件：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This endpoint deletes a group:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该端点删除一个小组：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If any of these requests succeed in accessing or modifying user *1236*’s information,
    you’ve found an IDOR vulnerability.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些请求成功访问或修改了用户*1236*的信息，那么你就发现了一个IDOR漏洞。
- en: Bypassing IDOR Protection
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绕过IDOR保护
- en: IDORs aren’t always as simple as switching out a numeric ID. As applications
    become more functionally complex, the way they reference resources also often
    becomes more complex. Modern web applications have also begun implementing more
    protection against IDORs, and many now use more complex ID formats. This means
    that simple, numeric IDORs are becoming rarer. How do we bypass these obstacles
    and find IDORs anyway?
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: IDOR并不总是像简单地更换数字ID那么简单。随着应用程序功能的增加，它们引用资源的方式通常也变得更加复杂。现代Web应用程序已经开始实施更多的IDOR防护措施，许多现在使用更复杂的ID格式。这意味着简单的数字IDOR变得越来越少。那么，我们如何绕过这些障碍，依然发现IDOR呢？
- en: IDORs can manifest in applications in different ways. Here are a few places
    to pay attention to, beyond your plain old numeric IDs.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: IDOR在应用程序中可能以不同的方式表现出来。除了你平常使用的数字ID，以下是一些需要注意的地方。
- en: Encoded IDs and Hashed IDs
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编码的ID和哈希的ID
- en: 'First, don’t ignore encoded and hashed IDs. When faced with a seemingly random
    string, always suspect that it is encoded and try to decode it. You should also
    learn to recognize the most common encoding schemes, like base64, URL encoding,
    and base64url. For example, take a look at the IDs of this endpoint:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，不要忽视编码和哈希的ID。当遇到一个看似随机的字符串时，始终怀疑它是编码过的，并尝试解码。你还应该学会识别最常见的编码方案，如base64、URL编码和base64url。例如，看看这个端点的ID：
- en: '*https://example.com/messages?user_id=MTIzNQ*'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*https://example.com/messages?user_id=MTIzNQ*'
- en: '*https://example.com/messages?user_id=MTIzNg*'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*https://example.com/messages?user_id=MTIzNg*'
- en: These `user_id`s are just the base64url-encoded version of a user’s ID. `MTIzNQ`
    is the base64url-encoded string of *1235*, and `MTIzNg` is the encoded version
    of *1236*. Some applications use encoding schemes that you can easily reverse.
    In this case, you can simply encode your false IDs by using an online base64url
    encoder and executing the IDOR.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这些`user_id`只是用户ID的base64url编码版本。`MTIzNQ`是*1235*的base64url编码字符串，`MTIzNg`是*1236*的编码版本。一些应用程序使用容易反转的编码方案。在这种情况下，你可以通过使用在线base64url编码器编码你的假ID并执行IDOR。
- en: You might not be able to tell which encoding scheme the site is using at first.
    In this case, use the Smart Decode tool ([Figure 10-2](#figure10-2)) in Burp’s
    decoder, or simply try to decode the string with different schemes (URL encoding,
    HTML encoding, hex encoding, octal encoding, base64, base64url, and so on) to
    figure out the encoding scheme in use. Once you gain more experience reading encoded
    data, you’ll develop an intuition for knowing the encoding scheme.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始你可能无法判断网站使用的是哪种编码方案。在这种情况下，可以使用Burp解码器中的智能解码工具（[图10-2](#figure10-2)），或者简单地尝试用不同的编码方案（URL编码、HTML编码、十六进制编码、八进制编码、base64、base64url等）解码字符串，以弄清楚使用的编码方案。一旦你积累了更多解码数据的经验，你会更直觉地知道编码方案是什么。
- en: '![f10002](image_fi/501546c10/f10002.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![f10002](image_fi/501546c10/f10002.png)'
- en: 'Figure 10-2: You can try to use different methods to decode a string in Burp’s
    decoder. Or you can use the Smart Decode tool and see if Burp can detect the encoding
    scheme.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-2：你可以尝试使用Burp解码器中的不同方法来解码字符串，或者使用智能解码工具，看看Burp是否能检测到编码方案。
- en: If the application is using a hashed or randomized ID, see if the ID is predictable.
    Sometimes applications use algorithms that produce insufficient entropy. *Entropy*
    is the degree of randomness of the ID. The higher the entropy of a string, the
    harder it is to guess. Some IDs don’t have sufficient entropy and can be predicted
    after careful analysis. In this case, try creating a few accounts to analyze how
    these IDs are created. You might be able to find a pattern that will allow you
    to predict IDs belonging to other users.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序使用的是哈希或随机化的ID，看看这个ID是否可预测。有时应用程序使用生成熵值不足的算法。*熵*是ID的随机性程度。一个字符串的熵值越高，它就越难猜测。有些ID没有足够的熵值，经过仔细分析后是可以预测的。在这种情况下，尝试创建几个账户，分析这些ID是如何生成的。你可能能找到一种模式，从而预测其他用户的ID。
- en: Leaked IDs
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 泄露的ID
- en: 'It might also be possible that the application leaks IDs via another API endpoint
    or other public pages of the application, like the profile page of a user. I once
    found an API endpoint that allowed users to retrieve detailed direct messages
    through a hashed `conversation_id` value. The request looks like this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 也有可能应用程序通过另一个API端点或其他公共页面泄露ID，比如用户的个人资料页面。我曾经找到一个API端点，允许用户通过哈希的`conversation_id`值来获取详细的直接消息。请求如下所示：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This seems safe at first glance, since the `conversation_id`is a long, random,
    alphanumeric sequence. But I later found that anyone could request a list of `conversation_id`s
    for each user, just by using their public user ID! The following request would
    return a list of `conversation_id`s belonging to that user:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，这似乎是安全的，因为`conversation_id`是一个长的、随机的字母数字序列。但我后来发现，任何人只要使用公开的用户 ID，就可以请求每个用户的`conversation_id`列表！以下请求会返回该用户的`conversation_id`列表：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Since the `user_id` is publicly available on each user’s profile page, I could
    read any user’s messages by first obtaining their `user_id` on their profile page,
    retrieving a list of `conversation_id`s belonging to that user, and finally loading
    the messages via their `conversation_id`s.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个用户的个人资料页面上公开了 `user_id`，我可以通过首先获取他们的 `user_id`，然后检索属于该用户的 `conversation_id`
    列表，最后通过他们的 `conversation_id` 加载消息，从而读取任何用户的消息。
- en: Offer the Application an ID, Even If It Doesn’t Ask for One
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 即使应用没有要求，还是向应用提供一个 ID
- en: In modern web applications, you’ll commonly encounter scenarios in which the
    application uses cookies instead of IDs to identify the resources a user can access.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代 Web 应用程序中，你通常会遇到应用使用 cookies 而非 ID 来识别用户可访问的资源的场景。
- en: 'For example, when you send the following GET request to an endpoint, the application
    will deduce your identity based on your session cookie, and then send you the
    messages associated with that user:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当你向某个端点发送以下 GET 请求时，应用程序会根据你的会话 cookie 推断出你的身份，然后将与该用户相关的消息发送给你：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Since you don’t know another user’s session cookies, you cannot use those session
    cookies to read their messages. This might make it seem like the application is
    safe from IDORs. But some applications will implement an alternative way of retrieving
    resources, using object IDs. They sometimes do this for the convenience of the
    developers, for backward compatibility, or just because developers forgot to remove
    a test feature.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你不知道另一个用户的会话 cookie，因此无法使用这些会话 cookie 来读取他们的消息。这可能会让人觉得应用程序对 IDOR 攻击是安全的。但一些应用程序会实施一种替代方式来获取资源，使用对象
    ID。有时这样做是为了开发人员的方便，或为了向后兼容，或者仅仅是因为开发人员忘记移除某个测试功能。
- en: 'If no IDs exist in the application-generated request, try adding one to the
    request. Append `id`*,* `user_id`*,* `message_id`*,* or other object references
    to the URL query, or the POST body parameters, and see if it makes a difference
    to the application’s behavior. For example, say this request displays your messages:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用生成的请求中没有 ID，请尝试向请求中添加一个。将`id`*，*`user_id`*，*`message_id`*，*或其他对象引用*附加到 URL
    查询或 POST 请求体参数中，看看它是否会对应用的行为产生影响。例如，假设这个请求显示了你的消息：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then maybe this request would display another user’s messages instead:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 那么也许这个请求会显示另一个用户的消息：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Keep an Eye Out for Blind IDORs
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 留意盲目 IDOR
- en: 'Still, sometimes endpoints susceptible to IDOR don’t respond with the leaked
    information directly. They might lead the application to leak information elsewhere,
    instead: in export files, email, and maybe even in text alerts. For example, imagine
    that this endpoint on *example.com* allows users to email themselves a copy of
    a receipt:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，有时容易受到 IDOR 攻击的端点并不会直接响应泄露的信息。它们可能会导致应用程序在其他地方泄露信息：在导出文件、电子邮件中，甚至可能是文本警报中。例如，假设
    *example.com* 上的这个端点允许用户将收据副本通过电子邮件发送给自己：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This request will send a copy of receipt 3001 to the registered email of the
    current user. Now, what if you were to request a receipt that belongs to another
    user, receipt 2983?
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这个请求会将收据 3001 的副本发送到当前用户的注册电子邮件地址。那么，如果你请求一个属于其他用户的收据，收据 2983，会怎么样呢？
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: While the HTTP response does not change, you may get a copy of receipt 2983
    in your email inbox! Often a malicious request can cause an info leak sometime
    in the future. I once found an IDOR that led to an info leak one month later,
    in a monthly report.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 HTTP 响应没有变化，但你可能会在你的电子邮件收件箱收到收据 2983 的副本！恶意请求往往会导致信息泄露，可能是在未来某个时刻。我曾经发现一个
    IDOR 漏洞，导致一个月后在月度报告中发生信息泄露。
- en: Change the Request Method
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改请求方法
- en: 'If one HTTP request method doesn’t work, you can try plenty of others instead:
    GET, POST, PUT, DELETE, PATCH, and so on. Applications often enable multiple request
    methods on the same endpoint but fail to implement the same access control for
    each method. For example, if this GET request is not vulnerable to IDOR and doesn’t
    return another user’s resources'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某个 HTTP 请求方法不起作用，你可以尝试其他许多方法：GET、POST、PUT、DELETE、PATCH 等等。应用程序通常会在相同的端点上启用多种请求方法，但未能为每种方法实施相同的访问控制。例如，如果这个
    GET 请求不容易受到 IDOR 攻击，并且没有返回另一个用户的资源
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'you can try to use the DELETE method to delete the resource instead. The DELETE
    method removes the resource from the target URL:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以尝试使用 DELETE 方法来删除资源。DELETE 方法会从目标 URL 移除资源：
- en: '[PRE22]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If POST requests don’t work, you can also try to update another user’s resource
    by using the PUT method. The PUT method updates or creates the resource at the
    target URL:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 POST 请求不起作用，你还可以尝试使用 PUT 方法更新另一个用户的资源。PUT 方法会在目标 URL 上更新或创建资源：
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Another trick that often works is switching between POST and GET requests. If
    there is a POST request like this one
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常常有效的技巧是切换 POST 和 GET 请求。如果有像这样的 POST 请求
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'you can try rewriting it as a GET request, like this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以尝试将其重写为 GET 请求，如下所示：
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Change the Requested File Type
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改请求的文件类型
- en: 'Switching the file type of the requested file sometimes leads the server to
    process the authorization differently. Applications might be flexible about how
    the user can identify information: they could allow users to either use IDs to
    reference a file or use the filename directly. But applications often fail to
    implement the same access controls for each method of reference.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，切换请求文件的文件类型会导致服务器以不同的方式处理授权。应用程序在如何让用户标识信息时可能会比较灵活：它们可能允许用户使用 ID 引用文件或直接使用文件名。然而，应用程序通常未能对每种引用方式实施相同的访问控制。
- en: For example, applications commonly store information in the JSON file type.
    Try adding the *.json* extension to the end of the request URL and see what happens.
    If this request is blocked by the server
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，应用程序通常将信息存储为 JSON 文件类型。尝试在请求 URL 的末尾添加 *.json* 扩展名，看看会发生什么。如果该请求被服务器阻止
- en: '[PRE26]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'then try this one instead:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然后尝试这个：
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Escalating the Attack
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 升级攻击
- en: The impact of an IDOR depends on the affected function, so to maximize the severity
    of your bugs, you should always look for IDORs in critical functionalities first.
    Both *read-based* *IDORs* (which leak information but do not alter the database)
    and *write-based* *IDORs* (which can alter the database in an unauthorized way)
    can be of high impact.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: IDOR 的影响取决于受影响的功能，因此为了最大化漏洞的严重性，你应当首先查看关键功能中的 IDOR。*基于读取的* *IDOR*（泄露信息但不会改变数据库）和*基于写操作的*
    *IDOR*（可以以未授权的方式更改数据库）都可能具有较大影响。
- en: In terms of the state-changing, write-based IDORs, look for IDORs in password
    reset, password change, and account recovery features, as these often have the
    highest business impact. Target these over, say, a feature that changes email
    subscription settings.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 就状态变化的、基于写操作的 IDOR 来说，查看密码重置、密码更改和账户恢复功能中的 IDOR，因为这些功能通常对业务的影响最大。相比之下，像改变电子邮件订阅设置这样的功能就不那么重要了。
- en: As for the non-state-changing (read-based) IDORs, look for functionalities that
    handle the sensitive information in the application. For example, look for functionalities
    that handle direct messages, personal information, and private content. Consider
    which application functionalities make use of this information and look for IDORs
    accordingly.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非状态变化（基于读取的）IDOR，查看应用程序中处理敏感信息的功能。例如，查看处理直接消息、个人信息和私人内容的功能。考虑哪些应用功能使用了这些信息，并据此查找
    IDOR。
- en: You can also combine IDORs with other vulnerabilities to increase their impact.
    For example, a write-based IDOR can be combined with self-XSS to form a stored
    XSS. An IDOR on a password reset endpoint combined with username enumeration can
    lead to a mass account takeover. Or a write IDOR on an admin account may even
    lead to RCE! We’ll talk about RCEs in Chapter 18.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将 IDOR 与其他漏洞结合起来，以增加它们的影响。例如，基于写操作的 IDOR 可以与自我 XSS 结合，形成存储型 XSS。密码重置端点上的
    IDOR 与用户名枚举结合，可能导致大规模账户接管。或者，管理员账户上的写操作 IDOR 甚至可能导致 RCE！我们将在第 18 章讨论 RCE。
- en: Automating the Attack
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化攻击
- en: After you get the hang of hunting for IDORs, you can try to automate IDOR hunting
    by using Burp or your own scripts. For example, you can use the Burp intruder
    to iterate through IDs to find valid ones. The Burp extension Autorize ([https://github.com/Quitten/Autorize/](https://github.com/Quitten/Autorize/))
    scans for authorization issues by accessing higher-privileged accounts with lower-privileged
    accounts, whereas the Burp extensions Auto Repeater ([https://github.com/nccgroup/AutoRepeater/](https://github.com/nccgroup/AutoRepeater/))
    and AuthMatrix ([https://github.com/SecurityInnovation/AuthMatrix/](https://github.com/SecurityInnovation/AuthMatrix/))
    allow you to automate the process of switching out cookies, headers, and parameters.
    For more information on how to use these tools, go to the Extender tab of your
    Burp window, then to the BAppStore tab to find the extension you want to use.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在熟练掌握IDOR猎杀技巧后，你可以尝试使用Burp或自己的脚本来自动化IDOR猎杀。例如，你可以使用Burp的入侵者工具来遍历ID以找到有效的ID。Burp扩展工具Autorize
    ([https://github.com/Quitten/Autorize/](https://github.com/Quitten/Autorize/))
    通过低权限账户访问高权限账户来扫描授权问题，而Burp扩展工具Auto Repeater ([https://github.com/nccgroup/AutoRepeater/](https://github.com/nccgroup/AutoRepeater/))
    和AuthMatrix ([https://github.com/SecurityInnovation/AuthMatrix/](https://github.com/SecurityInnovation/AuthMatrix/))
    允许你自动化切换cookie、头信息和参数的过程。有关如何使用这些工具的更多信息，请进入Burp窗口的Extender标签页，然后到BAppStore标签页查找你想使用的扩展。
- en: Finding Your First IDOR!
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找你的第一个IDOR！
- en: 'Now that you know what IDORs are, how to bypass IDOR protection, and how to
    escalate IDORs, you’re ready to look for your first one! Hop on a bug bounty program
    and follow the steps discussed in this chapter:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了什么是IDOR，如何绕过IDOR保护以及如何提升IDOR攻击，你已经准备好寻找第一个IDOR了！加入一个漏洞悬赏计划，并按照本章讨论的步骤进行操作：
- en: Create two accounts for each application role and designate one as the attacker
    account and the other as the victim account.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个应用角色创建两个账户，并指定一个为攻击者账户，另一个为受害者账户。
- en: Discover features in the application that might lead to IDORs. Pay attention
    to features that return sensitive information or modify user data.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序中发现可能导致IDOR的功能。注意那些返回敏感信息或修改用户数据的功能。
- en: Revisit the features you discovered in step 2\. With a proxy, intercept your
    browser traffic while you browse through the sensitive functionalities.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新检查在第2步中发现的功能。使用代理在浏览敏感功能时拦截你的浏览器流量。
- en: With a proxy, intercept each sensitive request and switch out the IDs that you
    see in the requests. If switching out IDs grants you access to other users’ information
    or lets you change their data, you might have found an IDOR.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用代理拦截每个敏感请求，并切换请求中看到的ID。如果切换ID能让你访问其他用户的信息或更改他们的数据，那么你可能已经发现了一个IDOR。
- en: Don’t despair if the application seems to be immune to IDORs. Use this opportunity
    to try a protection-bypass technique! If the application uses an encoded, hashed,
    or randomized ID, you can try decoding or predicting the IDs. You can also try
    supplying the application with an ID when it does not ask for one. Finally, sometimes
    changing the request method type or file type makes all the difference.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果应用程序似乎对IDOR免疫，不要灰心！利用这个机会尝试绕过保护的技术！如果应用程序使用编码、哈希或随机化的ID，你可以尝试解码或预测这些ID。你也可以尝试在应用程序未要求提供ID时提供一个ID。最后，有时改变请求方法类型或文件类型也能起到决定性作用。
- en: Monitor for information leaks in export files, email, and text alerts. An IDOR
    now might lead to an info leak in the future.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监控导出文件、电子邮件和文本警报中的信息泄露。当前的IDOR可能会导致未来的信息泄露。
- en: Draft your first IDOR report!
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 撰写你的第一个IDOR报告！
