- en: Chapter 12. Reading, Writing, and Ruby Magic
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章：阅读、写作与Ruby魔法
- en: File Input and Output
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件输入与输出
- en: Ruben looked around him and sighed. “Why did we run all the way here if the
    freight elevator goes so *slow*?” he asked.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Ruben环顾四周，叹了口气。“如果货运电梯这么*慢*，我们为什么要跑到这里来？”他问道。
- en: “You know,” said the King, rubbing his beardy chin, “I really don’t know. But
    I imagine it’ll be here any minute!”
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: “你知道，”国王一边揉着胡须下巴，一边说道，“我真的不知道。但我想它随时都会到达！”
- en: No sooner had the King spoken than the freight elevator arrived with a great
    *clang*. The doors slid open, revealing a huge metal elevator car.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 就在国王刚开口时，货运电梯便带着一声巨大的*铿锵*声到达了。门滑开，露出一个巨大的金属电梯车厢。
- en: “All aboard!” said Rusty, and they all climbed in. Rusty punched a round red
    button labeled LOADING DOCKS, and with another *clang*, the car began to slowly
    descend into the heart of the Refactory.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: “都上车！”Rusty说道，他们纷纷爬了上去。Rusty按下一个标有“装货码头”的圆形红色按钮，随着另一声*铿锵*，电梯车开始缓慢下降，驶向Refactory的心脏。
- en: “We’ll be there in a jiffy,” Rusty said.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: “我们很快就到，”Rusty说道。
- en: “A *slow* jiffy,” Scarlet said. Ruben stifled a laugh.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: “一个*慢*的瞬间，”Scarlet说道。Ruben憋住了笑。
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160067.png.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2160067.png.jpg)'
- en: “Not to worry,” Rusty said. “Every worker in the Refactory is down there, so
    there’s no chance those villains’ll escape!”
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: “别担心，”Rusty说道。“Refactory里面的每个工人都在那儿，所以那些坏蛋根本不可能逃脱！”
- en: The King paced around the elevator car. “I can’t wait to question those scoundrels,”
    he said. “All this trouble they’ve caused! I’ll be keen to know what drove them
    to it.”
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 国王在电梯车里走来走去。“我等不及要审问那些无赖了，”他说道。“他们造成了这么多麻烦！我真想知道是什么让他们这么做的。”
- en: “I’ll bet they’re evil ninja wizards!” said Ruben.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: “我敢打赌他们是邪恶的忍者巫师！”Ruben说道。
- en: “More like evil robot pirates,” said Scarlet.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: “更像是邪恶的机器人海盗，”Scarlet说道。
- en: “Whoever they are, they’ll have a lot to answer for,” said the Queen. “But we’ll
    know soon enough. We’re close—I can feel it!”
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: “无论他们是谁，他们都得为此负责，”女王说道。“不过我们很快就会知道。我们很接近——我能感觉到！”
- en: '“That we are,” said Rusty. “Next stop: loading docks!”'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: “我们确实快到了，”Rusty说道。“下一站：装货码头！”
- en: A moment later, the freight elevator doors groaned open, and the King, the Queen,
    Scarlet, Ruben, and Rusty stepped onto the immense, bustling floor of the Refactory
    loading docks.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一会儿后，货运电梯的门发出呻吟声打开，国王、女王、Scarlet、Ruben和Rusty走上了Refactory装货码头那片巨大的繁忙的地面。
- en: “Foreman here!” Rusty yelled to the crowd of men and women in hard hats as he
    led the group up a metal walkway and onto a large platform in the center of the
    enormous room. “What’ve we got?”
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: “Foreman在这儿！”Rusty对着一群戴着安全帽的男女喊道，同时带领大家走上金属走道，走到那间巨大的房间中心一个大平台上。“我们得到了什么？”
- en: “Sir!” said Marshall, climbing up the walkway, “I rushed down here ahead of
    you to try to assess the situation. It looks like we’ve got four intruders holed
    up in one of the loading docks.”
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: “先生！”Marshall一边爬上走道，一边说道，“我赶在你们前面下来，试图评估情况。看起来我们有四个闯入者藏在其中一个装货码头里。”
- en: “Which one?” Rusty asked.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: “哪一个？”Rusty问道。
- en: Marshall shook his head. “We don’t know! They hid before we could see where
    they went. All we know is that we had the docks surrounded when they disappeared,
    so they must still be in here somewhere.”
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Marshall摇了摇头。“我们不知道！他们在我们看到他们去哪之前就藏了起来。我们只知道，当他们消失时，我们已经包围了码头，所以他们一定还在这里某个地方。”
- en: Rusty nodded and stroked his beard for a moment. “Well,” he said at last, “best
    get to finding them.” He walked to the edge of the platform and stepped on a large
    round indentation with his boot. In a hiss of steam, a column rose out of the
    platform. On the side facing the Foreman shone the unmistakable glow of a Computing
    Contraption screen.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Rusty点了点头，轻轻摸了摸胡须。 “嗯，”他终于说道，“最好还是去找他们。” 他走到平台边缘，用靴子踩上一个大圆形凹陷处。随着一阵蒸汽的喷出，一根柱子从平台上升起。面向
    Foreman 的一侧闪烁着一个计算装置屏幕特有的光辉。
- en: “Each dock is controlled by a Ruby program,” Rusty said as the King, the Queen,
    Ruben, and Scarlet gathered around him. “Ruby treats each of them as a *file*.
    If we can open each file, we’ll find our missing criminals!”
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: “每个码头都由一个Ruby程序控制，”Rusty说道，国王、女王、Ruben和Scarlet围在他身边。“Ruby把每个码头都当作一个*文件*来处理。如果我们能打开每个文件，就能找到我们失踪的罪犯！”
- en: “A file? You mean, like a regular computer file?” Scarlet asked.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: “一个文件？你是说像普通的计算机文件？”Scarlet问道。
- en: '“The very same!” said Rusty. “Ruby can open just about any file you can think
    of: Ruby programs, text files, pictures, you name it!”'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: “正是！”Rusty说道。“Ruby几乎可以打开你能想到的任何文件：Ruby程序、文本文件、图片，统统能打开！”
- en: The Queen smiled. “I know all about files!” she said. “I’d be happy to lend
    a hand opening all these docks to find our culprits.” She cracked her knuckles.
    “How many files are there?” she asked.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 女王笑了。“我对文件了如指掌！”她说道。“我很乐意帮忙打开这些档口，找到我们的罪魁祸首。”她甩了甩手指。“有多少个文件？”她问道。
- en: Rusty gestured to the far wall, which was covered in hundreds of heavy metal
    doors.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Rusty指着远处的墙，那面墙上挂满了数百个沉重的金属门。
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160069.png.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2160069.png.jpg)'
- en: “Oh my,” said the Queen. “Well, then! We’d better get started.” She turned to
    Scarlet and Ruben. “To do this, we’ll need to use Ruby’s *file I/O* methods,”
    she explained. “The I/O part stands for ‘input/output.’ *Input* is what you put
    into a file, and *output* is what comes out.”
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: “哦我的天，”女王说道。“那么！我们最好开始了。”她转向Scarlet和Ruben。“为了做这个，我们需要使用Ruby的*文件输入/输出*方法，”她解释道。“I/O部分代表‘输入/输出’。*输入*是你放入文件中的内容，*输出*是文件中出来的内容。”
- en: “Like when you write a text file or save a picture?” Scarlet asked.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: “就像你写文本文件或保存图片一样？”Scarlet问道。
- en: “Very much like that,” the Queen said. “Ruby can write input to a file, which
    is just like typing it with the keyboard and clicking Save. It can also read output
    from a file, which is just like double-clicking on the file and opening it!”
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: “非常像那个，”女王说道。“Ruby可以将输入写入文件，就像用键盘输入然后点击保存一样。它也可以从文件中读取输出，就像双击文件并打开它一样！”
- en: The Queen turned to Rusty. “Is there a test file I could use to show how it
    works?” she asked.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 女王转向Rusty。“我可以使用一个测试文件来展示它是如何工作的么？”她问道。
- en: Rusty nodded. “Try *lunch.txt*,” he said. “I think it just has the text ONE
    KAT-MAN-BLEU BURGER, PLEASE in it.”
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Rusty点点头。“试试*lunch.txt*，”他说。“我想它里面只是有‘ONE KAT-MAN-BLEU BURGER, PLEASE’这段文字。”
- en: “What’s a Kat-Man-Bleu burger?” asked Ruben.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: “什么是Kat-Man-Bleu汉堡？”鲁本问道。
- en: “It’s the Wednesday lunch special in the Refactory cafeteria!” Rusty said. “The
    food’s not as good here as the food at the Hashery, but it does all right. That
    file just has the most recent lunch order in it.”
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: “这是Refactory自助餐厅的星期三午餐特餐！”Rusty说道。“这里的食物没有Hashery的食物好，但也还行。那个文件里只是包含了最新的午餐订单。”
- en: Opening a File with Ruby
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用Ruby打开文件
- en: '“Very good!” said the Queen. “Now, if you have a file called *lunch.txt* that
    contains only the text ONE KAT-MAN-BLEU BURGER, PLEASE, you can get to it like
    this!” She began typing:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: “非常好！”女王说道。“现在，如果你有一个名为*lunch.txt*的文件，里面只包含‘ONE KAT-MAN-BLEU BURGER, PLEASE’这段文字，你可以这样访问它！”她开始输入：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: “That’s exactly the same as if you had double-clicked on *lunch.txt*, only we
    can read the file’s text right inside Ruby! The `\n` at the end of `PLEASE` is
    Ruby’s way of representing ‘newline.’ If you open the file, it’ll just be the
    text ONE KAT-MAN-BLEU BURGER, PLEASE with a blank line under it.”
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: “这完全就像你双击*lunch.txt*文件一样，只不过我们可以直接在Ruby里读取文件的内容！`PLEASE`后面的`\n`是Ruby表示‘换行’的方式。如果你打开文件，它只会是‘ONE
    KAT-MAN-BLEU BURGER, PLEASE’这段文字，下面会有一行空白。”
- en: The Queen thought for a moment. “Let me explain a bit more. `File.open` tells
    Ruby to create a file object based on a file called *lunch.txt*.”
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 女王想了想。“让我再多解释一点。`File.open`告诉Ruby根据一个名为*lunch.txt*的文件创建一个文件对象。”
- en: “What about the `'r'`?” Ruben asked.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: “‘r’是什么？”鲁本问道。
- en: “That’s called a *mode*,” said the Queen, “and it tells Ruby what *mode* it
    should open the file in. `'r'` means we’re just reading the file for now, not
    changing it.”
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: “那叫做*模式*，”女王说道，“它告诉Ruby以什么*模式*打开文件。‘r’表示我们现在只是读取文件，而不是修改它。”
- en: “Okay,” said Scarlet, “so we’ve got a file object stored in `file`. What does
    calling the `read` method do?”
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: “好的，”Scarlet说道，“那么，我们有一个存储在`file`中的文件对象。调用`read`方法会做什么？”
- en: “Exactly what you’d think!” said the Queen. “It reads the contents of the file
    and shows them to us.” She paused.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: “完全是你想的那样！”女王说道。“它读取文件的内容并展示给我们看。”她停顿了一下。
- en: '“Though usually, we open files with a block, like this.” She typed some more:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: “虽然通常我们是用一个块来打开文件，就像这样。”她继续输入：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: “Once again, we’ve got `File.open`, and we pass in the name of the file we want
    to open as a string, followed by a second string that tells us what mode to open
    the file in. In this case, we’ve used `'r'` for ‘read.’”
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: “再次，我们用`File.open`，然后传入我们要打开的文件名作为字符串，后面跟着第二个字符串，告诉我们以什么模式打开文件。在这个例子中，我们使用了‘r’表示‘读取’。”
- en: “With you so far,” said the King.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: “到目前为止明白了，”国王说道。
- en: “Instead of saving the file object to a `file` variable and calling `read` on
    it, like we did before,” the Queen continued, “we pass `File.open` a block. We
    pass `file` to the block instead and call `file.read` inside the block!”
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: “我们不再像之前那样将文件对象保存到`file`变量中，然后调用`read`，”皇后继续说道，“而是将一个代码块传递给`File.open`。我们把`file`传递给代码块，然后在代码块中调用`file.read`！”
- en: “Is there a difference between opening a file with a block and opening a file
    without one?” Scarlet asked.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: “用代码块打开文件和不使用代码块打开文件有什么区别吗？”斯卡雷特问。
- en: '“A very important difference!” said the Queen. “When you open a file with a
    block, the file is closed as soon as the block is finished. But if you open a
    file *without* a block, it won’t automatically close. See?” She typed:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: “这是一个非常重要的区别！”皇后说，“当你用代码块打开文件时，文件会在代码块执行完毕后立即关闭。但是如果你*不*使用代码块打开文件，它不会自动关闭。明白了吗？”她输入了：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: “How do you close a file if you *didn’t* open it with a block?” Ruben asked.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: “如果你*没有*用代码块打开文件，怎么关闭它呢？”鲁本问。
- en: '“By using the `close` method, like this!” the Queen said, typing:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: “通过使用`close`方法，就像这样！”皇后说，边输入：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: “That seems easy enough,” said the King, “but why do we need to close files
    in the first place?”
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: “这看起来很简单，”国王说，“但是我们为什么一开始就需要关闭文件呢？”
- en: “Ruby keeps track of all the files we open, and the computer we’re running Ruby
    on will only let us open a certain number of files at a time,” the Queen explained.
    “If we try to open too many without closing them, we could make the computer crash!”
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: “Ruby会追踪我们打开的所有文件，而我们运行Ruby的计算机只允许我们同时打开有限数量的文件，”皇后解释道，“如果我们试图打开太多文件而不关闭它们，可能会导致计算机崩溃！”
- en: “Sweet kite-flying porcupines!” said the King. “We certainly wouldn’t want *that*.”
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: “甜蜜的放风筝的豪猪！”国王说，“我们当然不想要*那样*的事情。”
- en: “Also, if you don’t close a file,” the Queen continued, “Ruby won’t know you’re
    done with it, and unexpected things can happen later if you try to use a file
    you haven’t properly closed. You might even delete everything in it by accident!”
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: “另外，如果你不关闭文件，”皇后继续说道，“Ruby就不知道你已经完成了操作，如果你在没有正确关闭文件的情况下再次使用它，可能会发生一些意外情况。你甚至可能会不小心删除文件中的所有内容！”
- en: “Okay, we’ll make sure to close any files we open,” Ruben said. “It sounds like
    opening a file with a block is the easiest way to do that.”
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: “好的，我们会确保关闭我们打开的所有文件，”鲁本说，“听起来，用代码块打开文件是最简单的方式。”
- en: “What else can we pass into the `open` method besides `'r'`?” asked the King,
    scratching under his tiny crown. “Can we do things besides just read files?”
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: “除了`'r'`，我们还能传递什么给`open`方法呢？”国王边挠着他那小小的皇冠边问。“我们除了读取文件，还能做些什么呢？”
- en: Writing and Adding to Files
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入和向文件添加内容
- en: “Of course, dear,” the Queen said. “You see, Ruby does exactly what you tell
    it, which means you must be very exact when you tell it to do anything. When you
    `open` a file, the first argument you give the `open` method is the filename,
    and the second one tells Ruby what it should expect to do with the file. You can
    do a lot with `open`—for instance, `open 'r'` tells Ruby to open a file but *only*
    to read from it, starting from the beginning of the file.”
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: “当然可以，亲爱的。”皇后说，“你看，Ruby会按照你告诉它的方式做事，这意味着你必须非常精确地告诉它你要它做什么。当你`open`一个文件时，你传给`open`方法的第一个参数是文件名，第二个参数告诉Ruby你希望它对文件做什么。你可以用`open`做很多事——比如，`open
    'r'`告诉Ruby打开一个文件，但*仅仅*是为了读取文件，从文件的开始位置读取。”
- en: “What are some of the other modes?” Scarlet asked.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: “还有哪些其他模式呢？”斯卡雷特问。
- en: “Well, you can use `open 'w'` to write to a file,” the Queen said. “Using the
    `'w'` mode will tell Ruby to create a new file with the name you give it, or it
    will completely overwrite any file that already has that name.”
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，你可以使用`open 'w'`来写入文件，”皇后说，“使用`'w'`模式会告诉Ruby创建一个你指定名称的新文件，或者完全覆盖任何已存在的同名文件。”
- en: “Overwrite!” said Scarlet. “You mean it will replace everything in the existing
    file with whatever text you give it?”
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: “覆盖！”斯卡雷特说。“你是说它会用你给定的文本替换掉已有文件中的所有内容？”
- en: “That’s right,” said the Queen.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: “没错，”皇后说。
- en: “What if you want to *add* to an existing file?” asked Ruben.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: “如果你想*添加*到现有的文件中呢？”鲁本问。
- en: “For that, you can use the `'a'` mode,” the Queen said. “That still tells Ruby
    to create a brand-new file with the name you give it if that file doesn’t already
    exist, but if that file *does* exist, Ruby will start writing at the end of the
    file, so you won’t lose anything that’s already there.”
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: “为此，你可以使用`'a'`模式，”皇后说，“这种模式仍然会告诉Ruby创建一个你指定名称的新文件（如果文件尚不存在），但如果该文件*已*存在，Ruby会从文件末尾开始写入，这样就不会丢失文件中已有的内容。”
- en: “Reading, writing, and adding,” said Scarlet. “I think that’s everything we
    want to do. But what happens if you use a mode that tells Ruby you’re going to
    do one thing, but then you try to do something else?” she asked.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: “读取、写入和添加，”Scarlet说。“我想这就是我们想做的所有操作。但如果你使用了一种模式告诉Ruby你要做一件事，但又尝试做另一件事，会发生什么呢？”她问。
- en: '“I’ll show you!” said the Queen. She typed into the Computing Contraption:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: “我来给你演示！”女王说。她在计算装置上打字：
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: “An error!” said Ruben. “We’ll have to be careful to use the right modes when
    we open files, then.”
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: “一个错误！”Ruben说。“那我们在打开文件时必须小心使用正确的模式了。”
- en: '“Precisely,” said the Queen. “Remember: Ruby does exactly what you tell it.
    If you use the `''w''` mode to tell Ruby you’re opening a file only for writing,
    then try to read from the file instead, Ruby will get confused and produce an
    error.”'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: “正是如此，”女王说。“记住：Ruby会精确地执行你告诉它的操作。如果你使用`'w'`模式告诉Ruby你只想写入文件，然后试图从文件中读取，Ruby就会迷惑并产生错误。”
- en: “What if you want to read *and* write to a file?” asked the King, who was busy
    inspecting a puff of pink lint he’d found stuck to his beard.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: “如果你既想读文件又想写文件呢？”国王问，他正在忙着检查粘在胡子上的一团粉红色的绒毛。
- en: “Then we need to pass a slightly different mode to `File.open`,” the Queen said.
    She turned to Rusty. “What’s today’s cafeteria special?” she asked.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: “那么我们需要传递一个稍微不同的模式给`File.open`，”女王说道。她转向Rusty，“今天食堂有什么特色菜？”她问。
- en: '“Grilled cheese!” said Rusty. The Queen nodded and typed into the Computing
    Contraption:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: “烤奶酪三明治！”Rusty说。女王点点头，在计算装置上打字：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: “Wow, what was that?” said Ruben. “I didn’t know you could use `puts` to write
    to a file!”
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: “哇，那是什么？”Ruben说。“我不知道你可以用`puts`来写入文件！”
- en: “Yes, you can,” said the Queen. “The only difference between `puts` and `write`
    is that `puts` adds an extra blank line after whatever you type, which Ruby represents
    with an `\n` (remember, that stands for ‘newline’). If you open the file, it’ll
    just be the text THE MELTIEST OF GRILLED CHEESES with a blank line under it!”
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: “是的，你可以这么做，”女王说。“`puts`和`write`的唯一区别是，`puts`会在你输入的文本后加上一行空白行，Ruby通过`\n`表示这一空白行（记住，这代表‘换行’）。如果你打开文件，它就会是‘THE
    MELTIEST OF GRILLED CHEESES’这段文字，下面会有一行空白行！”
- en: “Now, we’ll try to read the lunch text back,” said the Queen, “but take a look
    at what happens the first time we try!”
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: “现在，我们试着把午餐文本读回来，”女王说，“但看看第一次我们尝试时发生了什么！”
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: “Whoa!” said Scarlet. “We got nothing but an empty string the first time we
    called `file.read`, but after you called `file.rewind`, we could read the text
    in *lunch.txt*. What does `rewind` do?”
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: “哇！”Scarlet说。“第一次调用`file.read`时，我们什么也没得到，只有一个空字符串，但在你调用了`file.rewind`之后，我们就能读取到*
    lunch.txt *中的内容。`rewind`是做什么的？”
- en: “Just like you can press REWIND on a remote control and send a movie back to
    the beginning, Ruby uses the `rewind` method to send you back to the beginning
    of a file. If you don’t `rewind` and then you try to `read` right after you’ve
    written to the file, you’ll just get an empty string!” replied the Queen.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: “就像你按下遥控器上的REWIND按钮将电影送回开头一样，Ruby使用`rewind`方法将你送回文件的开头。如果你不`rewind`，然后在写入文件后试图直接读取，你只会得到一个空字符串！”女王回答。
- en: “Like trying to press PLAY when you’re already at the end of a movie!” said
    Ruben.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: “就像试图在电影已经放完时按下播放按钮！”Ruben说。
- en: “Precisely,” said the Queen.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: “正是如此，”女王说。
- en: “That all makes sense,” said Scarlet, “but we used the `'w+'` mode, which means
    we overwrote the original *lunch.txt* file!”
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: “这都说得通，”Scarlet说，“但我们用了`'w+'`模式，这意味着我们覆盖了原来的* lunch.txt *文件！”
- en: '“That we did,” said the Queen. “Let’s put it back! I’ll show you a couple of
    new tricks while we do.” She began typing:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: “我们做到了，”女王说。“让我们把它放回去！我在操作的时候会教你几个新技巧。”她开始打字：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160071.png.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2160071.png.jpg)'
- en: “First, we reopen *lunch.txt* for writing with `File.open`, using the `'a+'`
    mode,” the Queen explained. “This tells Ruby we want to add our new text to the
    end of the file instead of replacing all the text that’s already there. Next,
    we call `file.write` and pass in the new text we want to add to the end of *lunch.txt*.”
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: “首先，我们使用`File.open`重新打开* lunch.txt *文件进行写入，使用`'a+'`模式，”女王解释道。“这告诉Ruby我们想把新文本添加到文件的末尾，而不是替换文件中已有的文本。接下来，我们调用`file.write`并传入我们想要添加到*
    lunch.txt *末尾的新文本。”
- en: “Why does Ruby return `31` when we call `file.write`?” Ruben asked.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: “为什么我们调用`file.write`时Ruby会返回`31`？”Ruben问。
- en: “An excellent question!” said the Queen. “Ruby is telling us that it successfully
    added 31 characters to the end of *lunch.txt*.”
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: “一个很好的问题！”女王说道。“Ruby 正在告诉我们，它成功地将 31 个字符添加到了 *lunch.txt* 文件的末尾。”
- en: “I see,” said Ruben. “So the `'a+'` mode must mean that we add to the file—so
    we don’t get rid of what’s already there—and the `+` part means we can add to
    *and* read the file!”
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: “我明白了，”Ruben 说道。“所以 `'a+'` 模式一定意味着我们向文件中添加内容——这样我们就不会删除已经存在的内容——而 `+` 部分意味着我们既可以添加内容
    *也* 可以读取文件！”
- en: '“Correct!” said the Queen. “You’ll also see that since adding the text puts
    us all the way at the end of the file, we call `file.rewind` to ‘rewind’ our position
    to the very beginning. That’s why `file.rewind` returns `0`: we’re at the very
    start of the file!”'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: “正确！”女王说道。“你还会看到，由于添加文本让我们的位置一直到了文件的末尾，所以我们调用 `file.rewind` 将位置‘倒带’回文件的开始。这就是为什么
    `file.rewind` 返回 `0`：我们已经回到了文件的最开始！”
- en: “But what does that `readlines` method do?” Ruben asked. “Does it just give
    us back an array of lines of text from the file?”
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: “但那个 `readlines` 方法是做什么的？”Ruben 问道。“它只是给我们返回一个包含文件中所有行的数组吗？”
- en: “Right again,” said the Queen. “Because I used `puts` to add the first line,
    ONE KAT-MAN-BLEU BURGER, PLEASE was added on its own line. The `readlines` method
    just goes through and creates an array from the file, where each item in the array
    is a single line of text. So we have an array with two elements here.”
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: “说得对，”女王说道。“因为我使用 `puts` 添加了第一行，所以 ONE KAT-MAN-BLEU BURGER, PLEASE 被单独添加在了一行上。`readlines`
    方法会读取文件，创建一个数组，每个数组元素就是文件中的一行文本。所以我们这里有一个包含两项的数组。”
- en: “Astounding!” said the King, peering over his wife’s shoulder.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: “惊人！”国王说道，透过妻子的肩膀往下看。
- en: '“Isn’t it?” she asked. “There’s also a `readline` method, which just gives
    us back one line at a time. See?” She typed some more:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: “不是吗？”她问道。“还有一个 `readline` 方法，它一次只返回一行。看？”她继续输入：
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '“We can even use `readlines` with `each` to print out all the lines at once!”
    the Queen said, typing even more quickly:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: “我们甚至可以用 `readlines` 和 `each` 一次性打印出所有行！”女王说道，打字速度更快了：
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: “That’s amazing!” said Ruben.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: “太厉害了！”Ruben 说道。
- en: Avoiding Errors While Working with Files
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在处理文件时避免错误
- en: '“I think I’m starting to understand file input and output now. But what happens
    if I try to use a file that doesn’t exist?” Ruben asked as he reached over to
    the Computing Contraption’s keyboard and typed:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: “我想我现在开始理解文件输入输出了。但是，如果我尝试使用一个不存在的文件，会发生什么？”Ruben 问道，他伸手到计算机装置的键盘上，输入了：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: “An error!” Scarlet said. “That makes sense. Is there any way to find out if
    a file exists *before* we try to use it?”
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: “出错了！”Scarlet 说道。“这有道理。有没有办法在我们尝试使用文件之前先检查它是否存在 *before*？”
- en: '“Good question!” said the Queen. “If we’re not sure whether a file exists,
    we can use Ruby’s built-in `File.exist?` method to check.” She typed:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: “好问题！”女王说道。“如果我们不确定一个文件是否存在，可以使用 Ruby 内建的 `File.exist?` 方法来检查。”她输入了：
- en: '[PRE11]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: “Wonderful, wonderful!” said the King, clapping his hands together. “With all
    these magnificent Ruby tools, I have no doubt we can capture these crooks quite
    quickly.”
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: “太棒了，太棒了！”国王拍了拍手说。“有了这些精彩的 Ruby 工具，我毫不怀疑我们能很快抓住这些坏蛋。”
- en: “You’re right!” said the Queen. She turned to Rusty. “Is there anything in the
    Ruby program that represents all the loading docks?” she asked.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: “没错！”女王说道。她转向 Rusty。“Ruby 程序里有代表所有装卸港口的东西吗？”她问道。
- en: Rusty nodded. “There’s an array, `loading_docks`, which is an array of files.
    Each file represents a loading dock door, so if you open and read all the files,
    all the doors should open!”
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Rusty 点了点头。“有一个数组，`loading_docks`，它是一个文件数组。每个文件代表一个装卸港口门，所以如果你打开并读取所有文件，所有门就应该打开！”
- en: 'The Queen thought for a moment, her fingers hovering above the keyboard. Then
    she typed into the Computing Contraption:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 女王思考了一会儿，手指悬停在键盘上方。然后她在计算机装置上输入：
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: One by one, the doors to each loading dock rolled open, hung ajar for a moment,
    then slid shut. Descriptions of each dock’s contents began to fill the Computing
    Contraption’s screen.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一个接一个的，装卸港口的门缓缓打开，稍微停留了一会儿，然后滑动关上。每个港口的内容描述开始填满计算机装置的屏幕。
- en: “Ruby code . . . Ruby code . . . shipment of Key-a-ma-Jiggers . . . *there!*”
    shouted Rusty, pointing to a door in the center of the far wall.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: “Ruby 代码... Ruby 代码... Key-a-ma-Jiggers 装运... *在那儿!*”Rusty 一边喊，一边指向远墙中央的一扇门。
- en: Four shadowy figures leapt from the loading dock near the lower-left corner
    of the wall just as the doors began to slide shut again.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 四个身影从靠近墙壁左下角的装卸港口跃出，就在门开始再次滑动关闭时。
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160073.png.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2160073.png.jpg)'
- en: “Freeze!” shouted the King. “We’ve got you surrounded!”
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: “停下！”国王大喊道。“我们包围了你们！”
- en: The four figures moved with surprising speed, knocking over several Refactory
    workers as they tried to make their way to the nearest exit.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 那四个人的动作出奇地迅速，几乎把几位 Refactory 的工人撞倒，他们正试图找到最近的出口。
- en: “Stop them!” Rusty yelled as the five of them ran down the metal walkway to
    the loading dock floor.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: “阻止他们！” Rusty 大声喊道，他们五个人正沿着金属走道跑向装卸码头的地面。
- en: Several Refactory workers struggled with the intruders, but they were too fast
    and too slippery. In just a few seconds, they’d made it all the way to the exit!
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 几个 Refactory 工人同入侵者进行了搏斗，但他们太快，太灵活了。不到几秒钟，他们就一路跑到了出口！
- en: “Make way, make way!” cried the Queen, and the five of them reached the Refactory
    exit just as the shadowy villains escaped through the door. Without breaking stride,
    the King, the Queen, Ruby, Scarlet, and Rusty barreled through the doorway and
    into the narrow corridor leading back the way they’d come in.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: “让开，让开！”王后喊道，他们五个人刚好在那群身影逃出门的同时，赶到了 Refactory 的出口。国王、王后、Ruby、Scarlet 和 Rusty
    没有减速，一头冲过门口，进入了通向他们原路的小走廊。
- en: “Are they headed for the freight elevator?” Ruben panted as they ran.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: “他们朝货梯走去了吗？”Ruben 一边跑一边喘气。
- en: “Much worse!” Rusty said. “They’re headed straight for the WEBrick road!”
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: “更糟糕！”Rusty 说道。“他们正朝 WEBrick 路奔去！”
- en: The King and Queen gasped together. “The WEBrick road!” said the Queen. “That
    leads straight out of the kingdom! If they get out through the kingdom gates,
    we’ll *never* catch them!”
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 国王和王后一起倒吸了一口气。“WEBrick 路！”王后说道。“那条路直通出王国！如果他们从王国大门逃出去，我们就*永远*抓不住他们了！”
- en: '“Then we’ll just have to be sure that doesn’t happen,” Rusty said. He turned
    and called over his shoulder: “Everyone, after them!” And with that, every single
    person in the Refactory ran toward the small bright exit sign, with the King,
    the Queen, Scarlet, Ruben, and Rusty leading the pack.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: “那我们就得确保这种情况不会发生，”Rusty 说道。他转身并大声喊道：“大家，跟上他们！”说完，Refactory 的每个人都冲向小小的亮绿色出口标志，国王、王后、Scarlet、Ruben
    和 Rusty 领头。
- en: All Loading Docks, Report for Duty!
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所有装卸码头，集合！
- en: We’ve nearly caught our crooks red-handed! Oh man, the suspense is killing me.
    Who *are* they? Will the King, the Queen, Ruben, Scarlet, and Rusty catch them
    in time? What’s on the Refactory cafeteria lunch menu for tomorrow? Questions
    worth pondering until the end of time, for sure—or at least, until the end of
    this chapter. In the meantime, let’s get in just a bit more practice reading from
    and writing to a file.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们差点就抓到这些罪犯了！天啊，这种悬念快把我逼疯了。他们*到底是谁*？国王、王后、Ruben、Scarlet 和 Rusty 能及时抓住他们吗？明天
    Refactory 食堂的午餐菜单是什么？这些问题肯定值得永远思考——至少，直到本章结束。与此同时，我们再多练习一点从文件中读取和写入数据吧。
- en: Let’s start out by making a new file called loading_docks.rb and typing the
    following code. This is a simple little program that will create a text file for
    each of our loading docks, write some text into it, and then read it back to us.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从创建一个新的文件 `loading_docks.rb` 开始，输入以下代码。这是一个简单的小程序，它会为每个装卸码头创建一个文本文件，写入一些文本内容，然后再读取出来。
- en: loading_docks.rb
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: loading_docks.rb
- en: '[PRE13]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: While there are a few bits of code that are making appearances from earlier
    chapters, there’s nothing brand-new here for you to worry about. Let’s walk through
    the code line by line.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有一些来自前面章节的代码出现，但这里没有什么新鲜的内容需要担心。我们来逐行分析一下代码吧。
- en: First, we set up an empty array called `loading_docks` ➊, which we’ll use to
    store the names of all the loading dock files we’ll create (so we can read them
    later). Next, we use the `(1..docks)` range to create as many loading docks as
    the `create_loading_docks` method requires ➋ (it defaults to `3` if no number
    is passed in ➌).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个名为 `loading_docks` 的空数组 ➊，用来存储我们将要创建的所有装卸码头文件的名字（这样我们可以稍后读取它们）。接下来，我们使用
    `(1..docks)` 范围来创建和 `create_loading_docks` 方法要求的装卸码头数量一样多的文件 ➋（如果没有传递数字，默认是 `3`
    ➌）。
- en: For each number in the range, we call a block that creates a file with that
    number (such as *dock_1.txt*) and adds that filename to the `loading_docks` array
    ➍. We then open the file, write a string of text into it, and close it ➎.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 对于范围中的每个数字，我们调用一个块，这个块会创建一个包含该数字的文件（比如 *dock_1.txt*），并将该文件名添加到 `loading_docks`
    数组 ➍ 中。接着，我们打开文件，写入一串文本，再关闭文件 ➎。
- en: Finally, in the `open_loading_docks` method ➏, we simply take our array of loading
    dock names (it looks something like `["dock_1.txt", "dock_2.txt"...]`, and so
    on), and for each filename, we open the file for reading, read its contents, and
    close it ➐. So when we run this script with `all_docks = create_loading_docks(5)`
    ➑ and `open_loading_docks(all_docks)` ➒ at the bottom, we end up creating *dock_1.txt*
    through *dock_5.txt*, each of which has its individual number and the `"reporting
    for duty!"` string in it.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 `open_loading_docks` 方法 ➏ 中，我们简单地获取包含码头名称的数组（它看起来像 `["dock_1.txt", "dock_2.txt"...]`，以此类推），对于每个文件名，我们打开文件进行读取，读取其内容，然后关闭它
    ➐。所以当我们运行这个脚本时，使用 `all_docks = create_loading_docks(5)` ➑ 和 `open_loading_docks(all_docks)`
    ➒ 在最后，我们最终会创建 *dock_1.txt* 到 *dock_5.txt*，每个文件都包含其独立的编号和 `"reporting for duty!"`
    字符串。
- en: Pretty great, right?
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 相当不错吧？
- en: 'As always, you can run the finished script by typing **`ruby loading_docks.rb`**
    at the command line. When you run it, you’ll see this:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，你可以通过在命令行中输入 **`ruby loading_docks.rb`** 来运行完成的脚本。运行时，你会看到以下内容：
- en: '[PRE14]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If you look in the directory where you ran *loading_docks.rb*, you’ll also see
    a *.txt* file for each dock, containing the very text our script printed out!
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看运行了*loading_docks.rb*的目录，你还会看到每个码头的 *.txt* 文件，里面包含了我们的脚本输出的文本！
- en: But I’m sure your head is already spinning with ways to improve this humble
    little script. For instance, we could change the number of files we create from
    5 to 1, 3, 10, or any other number we choose! Just be careful—creating too many
    files will not only fill up your folder, but it could even crash your computer.
    (That’s why we defaulted to 3 and only did 5 in the example.)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 但我相信你现在已经开始思考如何改进这个简单的小脚本了。例如，我们可以将创建文件的数量从 5 个改成 1 个、3 个、10 个，或者任何我们选择的数字！不过要小心——创建太多文件不仅会填满你的文件夹，还可能会导致计算机崩溃。（这就是为什么我们默认创建
    3 个文件，并且在示例中只创建了 5 个的原因。）
- en: 'You probably noticed that we wrote to the files with the `''w+''` mode, meaning
    that if we run the script again, it will overwrite the files with the new content.
    What if we want to add to the file instead, though? (Hint: The `''a+''` mode might
    be involved.)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，我们是使用 `'w+'` 模式来写入文件的，这意味着如果我们再次运行脚本，它将用新内容覆盖文件。那么，如果我们想在文件中添加内容呢？（提示：`'a+'`
    模式可能会涉及到。）
- en: For that matter, what if we want to write something fancier than just a plain
    old text file? What if we want to write a file that writes *another Ruby file*?
    This is not only possible, but it’s a big part of what professional programmers
    do every day. Try to write a file with a small bit of Ruby in it—something as
    simple as `puts 'Written by Ruby!'`. (Make sure you write the file with *.rb*
    at the end instead of *.txt* so Ruby can run it.)
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果我们想写入比普通文本文件更复杂的内容呢？如果我们想写入一个 *另一个 Ruby 文件* 呢？这不仅是可能的，而且是专业程序员每天都会做的事情。试着写入一个包含少量
    Ruby 代码的文件——像 `puts 'Written by Ruby!'` 这样简单的内容。（确保你将文件以 *.rb* 结尾，而不是 *.txt*，这样
    Ruby 才能运行它。）
- en: Finally, how might you work in some of the file methods we saw, like `exist?`,
    `rewind`, or `puts`? Are there other file methods in the Ruby documentation at
    *[http://ruby-doc.org/core-1.9.3/File.html](http://ruby-doc.org/core-1.9.3/File.html)*
    that might be cool to use? Remember to ask your local adult before going online!
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你打算如何使用我们看到的文件方法，比如 `exist?`、`rewind` 或 `puts` 呢？Ruby 文档中的 *[http://ruby-doc.org/core-1.9.3/File.html](http://ruby-doc.org/core-1.9.3/File.html)*
    中是否还有其他可能很酷的文件方法可以使用？记得在上网前向你的本地成年人请教！
- en: You Know This!
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你知道这个！
- en: You can read! You can write! Well, okay, you already knew how to do those things,
    but now you know how to do them *with Ruby*. I don’t doubt that you’re a full-fledged
    Ruby sorcerer by now, but just to make sure there’s nothing unclear about this
    new Ruby wizardry we’ve covered, let’s take a second to review it.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以读取！你可以写入！好吧，事实上你已经知道如何做这些事情了，但现在你知道了如何 *使用 Ruby* 来做这些事。我不怀疑你现在已经是一个完整的 Ruby
    大师了，但为了确保你对我们刚才讲解的 Ruby 魔法没有任何疑问，让我们花点时间回顾一下。
- en: 'You saw that Ruby can create, read, write, and understand *files*, which are
    exactly like the computer files you already know about: text documents, pictures,
    Ruby scripts, and more. Ruby can open a file that already exists with the `open`
    method:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到，Ruby 可以创建、读取、写入并理解 *文件*，这些文件就像你已经熟悉的计算机文件：文本文件、图片、Ruby 脚本等等。Ruby 可以使用
    `open` 方法打开已经存在的文件：
- en: '[PRE15]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'It can read a file with the `read` method:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以使用 `read` 方法来读取文件：
- en: '[PRE16]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And when we’re finished using a file, we should close it using the `close`
    method:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用完文件时，应该使用 `close` 方法将其关闭：
- en: '[PRE17]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'It turns out we can accidentally crash our computer by keeping too many files
    open at once, so it’s always a good idea to close any file we’ve opened. Luckily,
    if we open a file with a block, Ruby automatically closes the file for us:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 结果我们发现，如果一次性打开太多文件，我们可能会不小心让电脑崩溃，所以打开的文件最好及时关闭。幸运的是，如果我们使用块打开文件，Ruby 会自动为我们关闭文件：
- en: '[PRE18]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Ruby is pretty picky about being told what to do, so we have to use different
    *modes* to tell Ruby which input and output *mode* it should use. When we use
    `''r''`, we tell Ruby that we expect it only to read files, and when we use `''w''`,
    we tell it we expect it only to write files. To tell Ruby it should both read
    *and* write a file, we can give it the `''w+''` mode:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby 对于被告知该做什么很挑剔，所以我们必须使用不同的*模式*来告诉 Ruby 应该使用哪种输入和输出*模式*。当我们使用`'r'`时，我们告诉 Ruby
    我们只希望它读取文件，当我们使用`'w'`时，我们告诉它我们只希望它写入文件。若我们希望 Ruby 同时读取*和*写入文件，可以使用`'w+'`模式：
- en: '[PRE19]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You found out that `''w+''` will overwrite a file—that is, it will replace
    *everything* in the existing file with whatever string we tell Ruby to put in
    there. If we just want to *add* to a file instead of replacing it completely,
    we can use the `''a''` mode (`''a+''` if we want to add to the file *and* read
    from it):'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你发现`'w+'`会覆盖一个文件——也就是说，它会将现有文件中的*所有*内容替换成我们告诉 Ruby 写入的字符串。如果我们只想*添加*内容到文件，而不是完全替换它，我们可以使用`'a'`模式（如果我们还想从文件中读取，可以使用`'a+'`模式）：
- en: '[PRE20]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Speaking of our friend `rewind`, you saw we could use it to back up to the
    start of the file and read the whole file:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 说到我们的朋友`rewind`，你看到我们可以用它将文件指针倒回到文件开头，从而读取整个文件：
- en: '[PRE21]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In that first `file.read`, the string is empty because we’re at the end of the
    file. After we `rewind`, though, we go back to the start, and when we `file.read`
    again, our text is there.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一次调用`file.read`时，字符串为空，因为我们已经到达文件的末尾。不过，当我们调用`rewind`时，我们回到了文件的开始位置，再次调用`file.read`时，文本就会显示出来。
- en: 'You discovered that if we want to add a blank line after a line of text, we
    can use a file’s `puts` method instead of `write`. When we read the file back,
    Ruby shows us the blank line as a backslash and the letter *n* (`\n`):'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你发现如果我们想在一行文本后添加一个空行，我们可以使用文件的`puts`方法而不是`write`。当我们重新读取文件时，Ruby 会把空行显示为一个反斜杠和字母*n*（`\n`）：
- en: '[PRE22]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In fact, you saw that we could use the `readline` and `readlines` methods to
    read out lines of a file one by one. `readline` reads one line from the file at
    a time, and calling it a bunch of times reads each line, one after another:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，你看到我们可以使用`readline`和`readlines`方法逐行读取文件。`readline`一次读取文件的一行，反复调用它就能一行一行地读取：
- en: '[PRE23]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If we want to read the lines of our file all at once, we can use `file.readlines`
    with a call to the `each` method and a block:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想一次性读取文件中的所有行，可以使用`file.readlines`结合`each`方法和一个代码块：
- en: '[PRE24]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, you saw that we could check whether a file exists by using the `exist?`
    method:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你看到我们可以使用`exist?`方法来检查一个文件是否存在：
- en: '[PRE25]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Files and file input/output probably don’t seem like a big deal to you now
    (especially since you know a lot about how they work), but they’re a major part
    of how computers get work done. Don’t hesitate to mess around with creating and
    changing your files on your computer, and—with permission—hunt around the Internet
    for more information on files, how they work, and any interesting bits of Ruby
    code you can run to improve your understanding. But enough out of me: our heroes
    are hot on the tails of the tricksters who have been mucking things up in the
    kingdom all day, and we’re about to find out who they are, what they want, and
    whether the King, the Queen, Ruben, Scarlet, and the crew of the Refactory can
    stop them once and for all!'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 文件和文件的输入/输出现在对你来说可能没什么大不了的（尤其是因为你已经了解了它们的工作原理），但它们是计算机完成工作的一个重要部分。不要犹豫，去尝试在你的电脑上创建和修改文件，另外——如果得到许可——在互联网上搜索更多关于文件的资料，了解它们如何工作，以及你可以运行的任何有趣的
    Ruby 代码来加深理解。但我不再啰嗦了：我们的英雄们正在紧追那些整天在王国里捣乱的骗子们，我们就快要揭开他们的面目，看看他们想要什么，以及国王、王后、鲁本、斯卡利特和重构号的船员们是否能一劳永逸地阻止他们！
