- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Comparing Values
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 比较值
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: This chapter discusses comparing values in MySQL. You’ll practice checking whether
    values are equal, whether one value is greater or less than another value, and
    whether a value falls within a specific range or matches a pattern. You’ll also
    learn how to check that at least one condition in your queries is met.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了在MySQL中比较值。你将练习检查值是否相等，某个值是否大于或小于另一个值，值是否在特定范围内，或者是否匹配模式。你还将学习如何检查查询中至少满足一个条件。
- en: Comparing values can be useful in a variety of scenarios. For example, you might
    want to check that an employee worked 40 or more hours, that a flight’s status
    is not canceled, or that the average temperature of a vacation destination is
    between 70 and 95 degrees Fahrenheit.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在多种场景下，比较值非常有用。例如，你可能想要检查员工是否工作了40小时或更多，航班状态是否未取消，或者度假目的地的平均温度是否在70到95华氏度之间。
- en: Comparison Operators
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较运算符
- en: You can use MySQL’s comparison operators, shown in [Table 7-1](#table7-1), to
    compare values in your queries.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用MySQL的比较运算符（见[表7-1](#table7-1)）来比较查询中的值。
- en: 'Table 7-1: MySQL Comparison Operators'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 表7-1：MySQL比较运算符
- en: '| **Symbol or keyword(s)** | **Description** |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| **符号或关键字** | **描述** |'
- en: '| --- | --- |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `=` | Equal |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `=` | 相等 |'
- en: '| `!=, <>` | Not equal |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `!=, <>` | 不等于 |'
- en: '| `>` | Greater than |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `>` | 大于 |'
- en: '| `>=` | Greater than or equal to |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `>=` | 大于或等于 |'
- en: '| `<` | Less than |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `<` | 小于 |'
- en: '| `<=` | Less than or equal to |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `<=` | 小于或等于 |'
- en: '| `is null` | A null value |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `is null` | 空值 |'
- en: '| `is not null` | A non-null value |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `is not null` | 非空值 |'
- en: '| `in` | Matches a value in a list |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `in` | 匹配列表中的值 |'
- en: '| `not in` | Doesn’t match a value in a list |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `not in` | 不匹配列表中的值 |'
- en: '| `between` | Within a range |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `between` | 在范围内 |'
- en: '| `not between` | Not within a range |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `not between` | 不在范围内 |'
- en: '| `like` | Matches a pattern |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `like` | 匹配模式 |'
- en: '| `not like` | Does not match a pattern |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `not like` | 不匹配模式 |'
- en: These operators let you compare values in a database to other values. You can
    choose to select data if it meets the criteria you define using these comparison
    operators. Let’s discuss them in depth, using various databases as examples.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些运算符让你能够将数据库中的值与其他值进行比较。如果某些数据符合你使用这些比较运算符定义的标准，你可以选择将其选出来。我们将深入讨论它们，并以不同的数据库为例。
- en: Equal
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相等
- en: 'The equal operator, introduced in [Chapter 5](c05.xhtml), lets you check that
    values are equal to each other to achieve specific results. For example, here
    you use `=` with the `wine` database table from [Chapter 6](c06.xhtml):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 等号运算符，在[第5章](c05.xhtml)中介绍过，可以检查值是否相等以实现特定的结果。例如，这里你使用`=`与[第6章](c06.xhtml)中的`wine`数据库表：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This query selects all countries from the `country` table that have a `country_id`
    equal to `3`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 该查询从`country`表中选择所有`country_id`等于`3`的国家。
- en: 'In the following query, you’re using `=` with a string, rather than a number:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下查询中，你使用`=`与字符串而不是数字进行比较：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This query selects all wines from the `wine_type` table with the name Merlot—that
    is, a `wine_type_name` equal to `Merlot`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 该查询从`wine_type`表中选择所有名称为Merlot的葡萄酒，即`wine_type_name`等于`Merlot`。
- en: 'The following query is similar to what you saw in [Chapter 5](c05.xhtml) when
    you were learning how to join two tables. Here you’re using `=` to compare values
    that come from two tables with a common column name:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下查询类似于你在[第5章](c05.xhtml)中学习如何连接两个表时看到的内容。这里你使用`=`来比较来自两个表的具有共同列名的值：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This query joins all equal values from the `region` and `country` tables’ `country_id`
    columns.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 该查询连接了`region`和`country`表中`country_id`列的所有相等值。
- en: 'In each of these examples, the `=` syntax checks that the value on the left
    of the operator is the same as the value on the right of it. You can also use
    `=` with a subquery that returns one row:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些例子中，`=`语法检查运算符左侧的值是否与右侧的值相同。你还可以将`=`与返回一行的子查询一起使用：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Using `=` in this way, you’re checking for rows in the outer query where the
    `country_id` column in the `region` table matches the results of an entire subquery.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式使用`=`，你在外部查询中检查`region`表的`country_id`列是否与整个子查询的结果匹配。
- en: Not Equal
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不相等
- en: Not equal is expressed by the `<>` or `!=` symbols, where the `<` symbol is
    *less than* and the `>` symbol is *greater than* (so `<>` means less than or greater
    than), and the `!` symbol means *not* (so `!=` means not equal). The `!=` and
    `<>` operators do the same thing, so it doesn’t matter which syntax you use.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 不等于使用 `<>` 或 `!=` 符号表示，其中 `<` 符号表示 *小于*，`>` 符号表示 *大于*（所以 `<>` 意味着小于或大于），而 `!`
    符号表示 *不*（所以 `!=` 意味着不等于）。`!=` 和 `<>` 操作符执行相同的操作，因此使用哪种语法都可以。
- en: 'The not equal operator is useful for excluding certain data from the results
    of your queries. For example, maybe you’re a banjo player looking for fellow musicians
    to start a band. Since you play banjo, you can eliminate it from the list of instruments
    you want to see:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 不等于操作符对于排除某些数据非常有用。例如，也许你是一个班卓琴演奏者，正在寻找志同道合的音乐人组建乐队。因为你弹奏班卓琴，你可以从你想查看的乐器列表中排除它：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here you’ve used the `not equal` operator on the `musical_instrument` table
    to exclude the banjo from the list of instruments returned.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你在 `musical_instrument` 表上使用了不等于操作符，排除了班卓琴在返回的乐器列表中。
- en: 'Say you’re planning a wedding and you have a prior commitment on February 11,
    2024, so you need to exclude that date:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在计划一场婚礼，并且在 2024 年 2 月 11 日有一个先前的安排，所以你需要排除这个日期：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now you’ve excluded 2/11/2024 from a list of potential wedding dates in your
    `possible_wedding_date` table.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经从 `possible_wedding_date` 表中排除了 2024 年 2 月 11 日作为潜在婚礼日期。
- en: Greater Than
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 大于
- en: 'The greater than operator checks that the value on the left is greater than
    the value on the right. It is expressed using the `>` symbol. Say you’re looking
    for jobs that have a `salary` greater than $100,000 and a `start_date` after 1/20/2024\.
    You can select jobs that match these requirements from the `job` table using the
    following query:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 大于操作符检查左侧的值是否大于右侧的值。它使用 `>` 符号表示。假设你正在寻找那些 `salary` 大于 100,000 美元且 `start_date`
    在 2024 年 1 月 20 日之后的工作，你可以使用以下查询从 `job` 表中选择符合这些条件的工作：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this query, only the jobs that meet both conditions will be returned.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个查询中，只有满足两个条件的工作才会被返回。
- en: Greater Than or Equal To
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 大于或等于
- en: 'Greater than or equal to is expressed using the `>=` symbol. For example, you
    can edit your previous query to select all jobs where the `salary` is $100,000
    or higher and that have a `start_date` of 1/20/2024 or later:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 大于或等于使用 `>=` 符号表示。例如，你可以编辑之前的查询，选择所有 `salary` 为 100,000 美元或更高且 `start_date`
    为 2024 年 1 月 20 日或之后的工作：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The difference between `>` and `>=` is that `>=` includes the value listed in
    its results. In the previous examples, a job with a `salary` of *exactly* $100,000
    will be returned by `>=` but not by `>`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`>` 和 `>=` 之间的区别在于，`>=` 会将列出的值包含在其结果中。在前面的示例中，`>=` 会返回 `salary` 为 *恰好* 100,000
    美元的工作，但 `>` 不会返回此类工作。'
- en: Less Than
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小于
- en: 'Less than is expressed using the `<` symbol. For example, to view all games
    starting before 10 PM, you can perform the following query:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 小于使用 `<` 符号表示。例如，要查看所有在晚上 10 点之前开始的比赛，你可以执行以下查询：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In MySQL, time is expressed in military format, which operates on a 24-hour
    clock.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MySQL 中，时间是以军用格式表示的，使用 24 小时制。
- en: Less Than or Equal To
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小于或等于
- en: '*Less than or equal to* is expressed using the `<=` symbol. You can expand
    the previous query to select all rows where the `game_time` is 10 PM or earlier:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*小于或等于* 使用 `<=` 符号表示。你可以扩展之前的查询，选择所有 `game_time` 为晚上 10 点或更早的行：'
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If the `game_time` is exactly 22:00 (10 PM), a row will be returned when you
    use `<=` but not when you use `<`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `game_time` 恰好为 22:00（晚上 10 点），当你使用 `<=` 时将返回该行，但使用 `<` 时则不会返回。
- en: is null
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: is null
- en: 'As discussed in Chapters 2 and 3, `null` is a special value indicating that
    data is not applicable or not available. The `is null` syntax allows you to specify
    that you want only null values to be returned from a table. For example, say you
    want to query the `employee` table to see a list of employees who have not retired
    or set a retirement date:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如第 2 章和第 3 章所讨论的，`null` 是一个特殊值，表示数据不可用或不适用。`is null` 语法允许你指定只返回 `null` 值的记录。例如，假设你想查询
    `employee` 表，查看那些没有退休或没有设置退休日期的员工：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now only rows with a `retirement_date` of `null` are returned:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在只返回那些 `retirement_date` 为 `null` 的行：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'It’s only possible to check null values with the `is null` comparison operator.
    For example, using `= null` won’t work:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 只有使用 `is null` 比较操作符才能检查 `null` 值。例如，使用 `= null` 是无效的：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Even though there are null values in the table, this syntax won’t return any
    rows. In this scenario, MySQL doesn’t throw an error, so you might not realize
    that the wrong data is being returned.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 即使表中有 null 值，这个语法也不会返回任何行。在这种情况下，MySQL 不会抛出错误，因此你可能没有意识到返回的是错误的数据。
- en: is not null
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: is not null
- en: 'You can use `is not null` to check for values that are *not* null. Try reversing
    the logic of the previous example to check for employees who have retired or set
    a retirement date:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `is not null` 来检查值是否*不是* null。尝试反转之前示例的逻辑，检查已经退休或设定退休日期的员工：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, the query returns rows with a `retirement_date` that is not `null`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，查询返回 `retirement_date` 不为 `null` 的行：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As with `is null`, you have to use the `is not null` syntax for this type of
    query. Using other syntax, like `!= null` or `<> null`, will not produce the correct
    results:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `is null` 一样，你必须使用 `is not null` 语法进行此类查询。使用其他语法，如 `!= null` 或 `<> null`，将不会产生正确的结果：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you saw earlier with `= null`, MySQL won’t return any rows when you try to
    use the `!= null` syntax, and won’t alert you with an error.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你之前看到的使用 `= null`，当你尝试使用 `!= null` 语法时，MySQL 不会返回任何行，也不会给出错误提示。
- en: in
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: in
- en: 'You can use the `in` keyword to specify a list of multiple values you want
    your query to return. For example, let’s revisit the `wine` database to return
    specific wines from the `wine_type` table:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `in` 关键字指定一个多个值的列表，以便查询返回这些值。例如，让我们重新查看 `wine` 数据库，返回 `wine_type` 表中特定的酒：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This will return rows where the `wine_type_name` is Chardonnay or Riesling.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回 `wine_type_name` 为 Chardonnay 或 Riesling 的行。
- en: 'You can also use `in` with a subquery to select a list of wine types that are
    in another table:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 `in` 和子查询，从另一个表中选择一组酒类类型：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Instead of providing a hardcoded list of wine types to return in your results,
    here you’re selecting all of the wine types from the `cheap_wine` table.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择不提供硬编码的酒类类型列表，而是从 `cheap_wine` 表中选择所有酒类类型。
- en: not in
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: not in
- en: 'To reverse the previous example’s logic and exclude certain wine types, you
    can use `not in`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要反转前一个示例的逻辑并排除某些酒类类型，你可以使用 `not in`：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This returns all rows where the `wine_type_name` is not Chardonnay or Riesling.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回所有 `wine_type_name` 不是 Chardonnay 或 Riesling 的行。
- en: 'To select wines that are not from the `cheap_wine` table, you can use `not
    in` within a subquery as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择不在 `cheap_wine` 表中的酒，你可以使用 `not in` 与子查询，如下所示：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This query excludes wine types from the `cheap_wine` table.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询排除了 `cheap_wine` 表中的酒类类型。
- en: between
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: between
- en: 'You can use the `between` operator to check that a value is within a specified
    range. For example, to list the millennials in a `customer` table, search for
    people who were born between 1981 and 1996:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `between` 运算符检查某个值是否在指定范围内。例如，要列出 `customer` 表中的千禧一代，可以查找出生在1981年到1996年之间的人：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `between` keyword is *inclusive*. This means it checks for every `birthyear`
    within the range, *including* the years 1981 and 1996.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`between` 关键字是*包含*的。这意味着它会检查范围内的每个 `birthyear`，*包括*1981年和1996年。'
- en: not between
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: not between
- en: 'You can check that a value is not within a range by using the `not` `between`
    operator. Use the same table from the previous example to find customers who are
    *not* millennials:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `not` `between` 运算符检查某个值是否不在范围内。使用之前示例中的相同表，找到不是千禧一代的客户：
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `not between` operator returns the opposite list of customers that `between`
    did, and is *exclusive*. Customers born in 1981 or 1996 will be *excluded* by
    this query since they are part of the `between 1981 and 1996` group.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`not between` 运算符返回的客户列表与 `between` 返回的相反，并且是*不包含*的。1981年或1996年出生的客户将被此查询*排除*，因为他们属于
    `between 1981 and 1996` 组。'
- en: like
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: like
- en: The `like` operator allows you to check if a string matches some pattern. For
    example, you can use `like` to find books from No Starch Press by checking if
    a book’s ISBN contains the No Starch publisher code, 59327.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`like` 运算符允许你检查一个字符串是否匹配某种模式。例如，你可以使用 `like` 来查找来自 No Starch Press 的书籍，检查书籍的
    ISBN 是否包含 No Starch 出版商代码 59327。'
- en: 'To specify the pattern to match, you use one of two wildcard characters with
    the `like` operator: percent (`%`) or underscore (`_`).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定匹配的模式，你可以使用两个通配符字符之一与 `like` 运算符：百分号（`%`）或下划线（`_`）。
- en: The % Character
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 百分号字符
- en: 'The percent wildcard character matches any number of characters. For example,
    to return a list of billionaires whose last name starts with the letter *M*, you
    can use the `%` wildcard character along with `like`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 百分号通配符字符可以匹配任意数量的字符。例如，要返回姓氏以字母 *M* 开头的亿万富翁列表，你可以使用 `%` 通配符字符与 `like` 一起使用：
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Your query will find billionaires whose last name starts with an *M* followed
    by zero or more other characters. This means that `like ''M%''` would match only
    the letter *M* with no characters after it, or *M* followed by a few characters,
    like `Musk`, or *M* followed by many characters, like `Melnichenko`. The results
    of your query might look like this:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你的查询将找到姓氏以*M*开头，后面跟着零个或多个其他字符的亿万富翁。这意味着`like 'M%'`只会匹配字母*M*后没有字符，或者*M*后跟着几个字符（比如`Musk`），或者*M*后跟着很多字符（比如`Melnichenko`）。你的查询结果可能如下所示：
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You can use two `%` characters to find a character located anywhere in the
    string, whether at the beginning, in the middle, or at the end. For example, the
    following query looks for billionaires whose last names contain the letter *e*:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用两个`%`字符来查找位于字符串中任何位置的字符，无论是在开头、中间还是结尾。例如，以下查询查找姓氏中包含字母*e*的亿万富翁：
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The results might look like this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 结果可能如下所示：
- en: '[PRE25]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: While the syntax `last_name like '%e%'` is handy, it can cause your query to
    run slower than normal. That’s because when you use the `%` wildcard at the beginning
    of a search pattern, MySQL can’t take advantage of any indexes on the `last_name`
    column. (Remember, indexes help MySQL optimize your queries; for a refresher,
    see the section “Indexes” in [Chapter 2](c02.xhtml).)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然语法`last_name like '%e%'`很方便，但它可能导致查询的运行速度比正常情况更慢。这是因为当你在搜索模式的开头使用`%`通配符时，MySQL无法利用`last_name`列上的任何索引。（记住，索引帮助MySQL优化查询；如果需要复习，请参阅[第2章](c02.xhtml)中的“索引”部分。）
- en: The _ Character
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: _ 字符
- en: The underscore wildcard character matches any character. For example, say you
    need to find a contact and you can’t remember if her name was Jan or Jen. You
    might write a query to select names that start with *J*, followed by the wildcard
    character, followed by *n*.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 下划线通配符字符匹配任何单个字符。例如，假设你需要找到一个联系人，但你不记得她的名字是Jan还是Jen。你可以写一个查询，选择以*J*开头，后面跟着通配符字符，再后面跟着*n*的名字。
- en: 'Here you use the underscore wildcard to return a list of three-letter terms
    that end in *at*:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你使用下划线通配符来返回以*at*结尾的三字母词汇列表：
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The results might look like this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 结果可能如下所示：
- en: '[PRE27]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: not like
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: not like
- en: 'The `not like` operator can be used to find strings that do *not* match some
    pattern. It also uses the `%` and `_` wildcard characters. For example, to reverse
    your logic for the `like` example, enter the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`not like`运算符可以用于查找不匹配某个模式的字符串。它也使用`%`和`_`通配符字符。例如，要反转`like`示例的逻辑，输入以下查询：'
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The results are words in the `three_letter_term` table that do not end in *at*:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是`three_letter_term`表中不以*at*结尾的单词：
- en: '[PRE29]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Similarly, you can find billionaires whose last names do not start with the
    letter *M* using this query:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，你可以使用以下查询找到那些姓氏不以字母*M*开头的亿万富翁：
- en: '[PRE30]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The results might look like this:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 结果可能如下所示：
- en: '[PRE31]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: exists
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: exists
- en: 'The `exists` operator checks to see if a subquery returns at least one row.
    Here you go back to the `customer` table in the `not between` example and use
    `exists` to see whether the table has at least one millennial:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`exists`运算符用于检查子查询是否返回至少一行数据。在这里，你回到`customer`表中的`not between`示例，并使用`exists`来检查该表是否至少包含一个千禧一代：'
- en: '[PRE32]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'There are millennials in the `customer` table, so your result is:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`customer`表中有千禧一代，所以你的结果是：'
- en: '[PRE33]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: If there had been no customers born between 1981 and 1996, your query wouldn’t
    have returned any rows, and the text `There is at least one millennial in this
    table` would not have been shown.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果1981年到1996年之间没有出生的客户，你的查询将不会返回任何行，并且`There is at least one millennial in this
    table`的文本也不会显示。
- en: 'You might see the same query written using `select 1` instead of `select *`
    in the subquery:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会看到同一个查询使用`select 1`代替子查询中的`select *`：
- en: '[PRE34]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In this query, it doesn’t matter if you select `*` or `1` because you’re looking
    for at least one customer that matches your description. All you really care about
    is that the inner query returned *something*.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个查询中，选择`*`还是`1`并不重要，因为你只关心至少有一个客户符合你的描述。你真正关心的是内部查询返回了*某些东西*。
- en: Checking Booleans
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查布尔值
- en: 'In [Chapter 4](c04.xhtml), you learned that booleans can have one of two values:
    `true` or `false`. You can use special syntax, `is true` or `is false`, to return
    only results with one value or the other. In this example, you return a list of
    employed bachelors in the `bachelor` table by using the `is true` syntax in the
    `employed_flag` column:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](c04.xhtml)中，你学习了布尔值只有两种可能的值：`true`或`false`。你可以使用特殊语法`is true`或`is false`，只返回符合某个值的结果。在这个例子中，你通过在`employed_flag`列中使用`is
    true`语法，返回了`bachelor`表中所有已就业的学士学位持有者：
- en: '[PRE35]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This query causes MySQL to return only rows for bachelors who are employed.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询使MySQL只返回已就业的学士学位持有者的行。
- en: 'To check bachelors whose `employed_flag` value is set to `false`, use `is false`:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查`employed_flag`值为`false`的学士学位持有者，可以使用`is false`：
- en: '[PRE36]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Now MySQL returns only rows for bachelors who are unemployed.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在MySQL只返回失业的学士学位持有者的行。
- en: 'You can check the value of boolean columns in other ways as well. These lines
    are all equivalent ways of checking for `true` values:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以用其他方式检查布尔列的值。这些行是检查`true`值的等效方式：
- en: '[PRE37]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The following lines are all equivalent ways to check for `false` values:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下几行是检查`false`值的等效方式：
- en: '[PRE38]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: As you can see here, a value of `1` is equivalent to `true` and a value of `0`
    is equivalent to `false`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`1`的值等同于`true`，而`0`的值等同于`false`。
- en: or Conditions
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 或条件
- en: You can use MySQL’s `or` keyword to check that at least one of two conditions
    has been met.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用MySQL的`or`关键字来检查是否满足两个条件中的至少一个。
- en: Consider this table called `applicant`, which contains information about job
    applicants.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下名为`applicant`的表格，它包含了关于求职者的信息。
- en: '[PRE39]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The `associates_degree_flag` and `bachelors_degree_flag` columns are booleans,
    where `0` represents `false` and `1` represents `true`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`associates_degree_flag`和`bachelors_degree_flag`列是布尔值，其中`0`表示`false`，`1`表示`true`。'
- en: 'In the following query, you select from the `applicant` table to get a list
    of qualified applicants for a job that requires a bachelor’s degree *or* two or
    more years of experience:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下查询中，你从`applicant`表中选择，得到一个符合要求的求职者名单，该工作要求有学士学位*或*两年或以上的工作经验：
- en: '[PRE40]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The results are:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE41]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Say you need to write a query with both the `and` (both conditions must be met)
    and `or` (either condition must be met) keywords. In this case, you can use parentheses
    to group your conditions so that MySQL will return the correct results.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你需要编写一个查询，包含`and`（两个条件都必须满足）和`or`（其中一个条件满足即可）关键字。在这种情况下，你可以使用括号将条件分组，以便MySQL返回正确的结果。
- en: 'Let’s see how using parentheses can be beneficial. Here you create another
    query with the `applicant` table for a new job that requires applicants to have
    two or more years’ experience *and* either an associate’s degree *or* a bachelor’s
    degree:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看使用括号如何带来好处。在这里，你为需要求职者拥有两年或以上的工作经验*并且*有副学士学位*或*学士学位的新职位创建了另一个查询，查询的是`applicant`表：
- en: '[PRE42]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The results of this query are not what you expected:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询的结果并非你预期的：
- en: '[PRE43]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Bill doesn’t have two or more years’ experience, so why did he appear in your
    result set?
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Bill没有两年或以上的工作经验，那为什么他出现在你的结果集中？
- en: 'The query uses both an `and` and an `or`. The `and` has a higher *operator
    precedence* than the `or`, which means `and` gets evaluated before `or`. This
    caused your query to find applicants that met at least one of the following two
    conditions:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 查询同时使用了`and`和`or`。`and`的*运算符优先级*高于`or`，这意味着`and`会在`or`之前进行计算。这导致你的查询找到了满足以下两个条件中至少一个的求职者：
- en: Two or more years’ experience *and* an associate’s degree
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两年或以上的工作经验*以及*副学士学位
- en: '*or*'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '*或*'
- en: A bachelor’s degree
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学士学位
- en: 'That’s not what you intended when you wrote the query. You can correct the
    problem by using parentheses to group your conditions:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是你编写查询时的意图。你可以通过使用括号将条件分组来修正问题：
- en: '[PRE44]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now the query finds applicants that meet these conditions:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在查询找到了符合这些条件的求职者：
- en: Two or more years’ experience
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两年或以上的工作经验
- en: '*and*'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '*和*'
- en: An associate’s degree *or* a bachelor’s degree
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 副学士学位*或*学士学位
- en: 'Your results should now be in line with your expectations:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的结果应该与你的预期一致：
- en: '[PRE45]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned various ways to compare values in MySQL through
    comparison operators, such as checking whether values are equal, null, or within
    a range, or if they match a pattern. You also learned how to check that at least
    one condition is met in your queries.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了通过比较运算符在MySQL中比较值的多种方式，比如检查值是否相等、是否为null、是否在某个范围内，或是否匹配某个模式。你还学习了如何在查询中检查是否满足至少一个条件。
- en: In the next chapter, you’ll take a look at using MySQL’s built-in functions,
    including those that deal with mathematics, dates, and strings. You’ll also learn
    about aggregate functions and how to use them for groups of values.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将了解如何使用 MySQL 的内置函数，包括处理数学、日期和字符串的函数。你还将学习聚合函数以及如何在一组值中使用它们。
