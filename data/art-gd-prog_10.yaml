- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Working with Video
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用视频
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: 'Sketch 80: Playing a Video'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图 80：播放视频
- en: We can use Processing to play videos but, as was the situation with audio, Processing
    does not have its own facility for doing so. Instead, we use the `Movie` class
    from the `processing.video` library, which in turn uses the underlying Java-based
    video functions. As a first example, this sketch will load and display a short
    video.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Processing来播放视频，但正如处理音频时一样，Processing本身没有提供视频播放功能。因此，我们使用`processing.video`库中的`Movie`类，它又使用了底层基于Java的视频功能。作为第一个示例，该草图将加载并显示一个短视频。
- en: 'First, we import the `processing.video` library 1 as the first line in the
    program:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在程序的第一行导入`processing.video`库1：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now we can declare an instance of the `Movie` class 2, one for each movie we
    want to play:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以声明一个`Movie`类的实例2，为每个我们想要播放的视频创建一个实例：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We load the video file when we initialize the class instance by calling its
    constructor (see Sketch 43), specifying the name of the file as a parameter 3:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在初始化类实例时通过调用其构造函数加载视频文件（见草图43），并指定文件名作为参数3：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the `setup()` function, we begin reading the video from the file by calling
    the `movie.play()` function (which doesn’t just play the video, as you’d expect).
    A video is a sequence of compressed images or frames, just like an animation,
    and each one can take some significant time to read and decode. After we call
    `play()`, the system tries to read frames from the file, and when one is ready,
    the `available()` function returns `true`. We can then acquire the frame using
    `read()`. Like a `PGraphics` object, a `Movie` object can be treated as an image
    and displayed using the `image()` function. Thus, this is the process for displaying
    a movie 4:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在`setup()`函数中，我们通过调用`movie.play()`函数开始从文件读取视频（这个函数不仅仅是播放视频，正如你所期望的那样）。视频是压缩的图像或帧的序列，就像动画一样，每一帧的读取和解码可能需要一些显著的时间。当我们调用`play()`后，系统尝试从文件中读取帧，当某一帧准备好时，`available()`函数返回`true`。然后我们可以使用`read()`获取该帧。像`PGraphics`对象一样，`Movie`对象可以作为图像进行处理，并使用`image()`函数显示。因此，显示电影的过程是这样的4：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If no new frame were available, `read()` would not be called, and the previously
    read frame would be displayed in its place. This is usually not noticeable.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有新的帧可用，`read()`将不会被调用，之前读取的帧将显示在其位置上。通常这种情况不容易察觉。
- en: The `Movie` class plays the sound with the movie.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`Movie`类会与电影一起播放声音。'
- en: The sketch also prints relevant information at the top of the window. It counts
    the number of frames read in and displays that number. It also displays the time
    count, which is the number of seconds that have been played so far, retrieved
    using the `movie.time()` function call 5. When the movie is complete, as indicated
    by `movie.time() >= movie.duration()` 6, the counters reset and the movie resumes
    playing from the first frame by calling `movie.jump(0)`. The `jump(t)` function
    call moves the current frame to the one at time `t`. Playing in a loop could also
    be accomplished by calling `movie.loop()` instead of `movie.play()`. In that case,
    the replaying of the movie from location 0 would be automatic.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图还会在窗口顶部打印相关信息。它统计已读取的帧数并显示该数字。它还显示时间计数，即已经播放的秒数，通过调用`movie.time()`函数获取5。当电影播放完成时，如`movie.time()
    >= movie.duration()`所示6，计数器会重置，电影通过调用`movie.jump(0)`从第一帧重新播放。`jump(t)`函数调用将当前帧移至时间`t`的帧。通过调用`movie.loop()`而不是`movie.play()`，也可以实现循环播放。在这种情况下，电影从位置0重新播放将是自动的。
- en: 'Sketch 81: Playing a Video with a Jog Wheel'
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图 81：使用快进拨盘播放视频
- en: A jog wheel (or shuttle dial) is a device, often circular, that allows the user
    to advance or back through a video. Turning it clockwise moves the video forward
    by individual frames, and turning it counterclockwise moves the video backward.
    Editors often use this for editing where the video needs to be positioned frame
    by frame. This sketch will implement an approximation of this jogging process.
    The video will begin to play, and the user can adjust the speed and direction
    of play using the mouse. At any point, the user can stop the video and back up
    slowly to arrive at any specific frame.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 偏移轮（或快进拨盘）是一个通常呈圆形的设备，允许用户在视频中前进或后退。顺时针转动它会将视频逐帧向前播放，逆时针转动它会将视频向后播放。编辑人员通常使用它来精确定位每一帧的视频。这个草图将实现这种快进过程的近似。视频将开始播放，用户可以使用鼠标调整播放的速度和方向。在任何时刻，用户都可以停止视频并慢慢倒回，以达到任何特定的帧。
- en: 'To do this we have to address the problem of how to play a video backward.
    The `jump()` function permits the positioning of the video at any moment in time
    2. The time of any particular frame depends on the frame rate, which is the number
    of frames played per second. Given a frame rate of `rate`, we know that each frame
    lasts 1/`rate` seconds. The final frame occurs at `duration()` seconds from the
    start, so positioning at the frame before that could be done with the following
    call:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们必须解决如何倒放视频的问题。`jump()`函数允许我们将视频定位到任何特定时刻2。任何特定帧的时间取决于帧率，即每秒播放的帧数。假设帧率为`rate`，我们知道每一帧的持续时间是1/`rate`秒。最后一帧发生在从开始算起的`duration()`秒处，因此可以使用以下调用将视频定位到该帧之前的帧：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The frame before that one is at `movie.jump (movie.duration-(1/rate)*2)` and
    so on. Simply step backward through the frames in this way, read the frame, and
    display it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 前一帧位于`movie.jump(movie.duration-(1/rate)*2)`，依此类推。通过这种方式，逐帧向后跳转，读取帧并显示它。
- en: 'In the sketch, we store the time of the current frame in a `time` variable,
    and the time between frames is in the variable `ftime`. We will use the mouse
    to control the speed with which the video will be displayed. A mouse click in
    the middle of the screen sets the speed to 0 by setting `ftime` to 0\. A click
    on the right sets `ftime` to a value in proportion to the distance from the middle,
    and it moves the video forward; a click on the left sets `ftime` to a value that
    moves the video backward. Initially `ftime = 1/rate`, but this becomes −3 times
    that for a far left click and +3 times that for a far right click. This is the
    whole calculation 3:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在该示例中，我们将当前帧的时间存储在`time`变量中，帧与帧之间的时间存储在`ftime`变量中。我们将使用鼠标来控制视频显示的速度。点击屏幕中间将通过将`ftime`设置为0来设置速度为0。点击右侧将`ftime`设置为一个与屏幕中间的距离成比例的值，从而使视频向前播放；点击左侧将`ftime`设置为一个值，使视频倒放。最初`ftime
    = 1/rate`，但当点击最左边时，这个值变为原来的负3倍，点击最右边时，变为正3倍。这就是整个计算3：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A minor problem occurs at the end of the video, which is really the beginning
    if it is playing in reverse. Time is set to 0 if the end is found while moving
    forward, and it is set to `duration()-ftime` if the beginning is found while moving
    backward.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在视频的结尾（如果倒放的话，实际上是开始）会出现一个小问题。如果在向前播放时找到结尾，时间将被设置为0；如果在倒放时找到开始，时间将被设置为`duration()-ftime`。
- en: 'The basic display process 1 occurs within `draw()` and is as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的显示过程1发生在`draw()`中，过程如下：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The sketch displays a simple calibration to allow the user to select a speed,
    and it also displays the value of `ftime`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 示例显示一个简单的校准界面，允许用户选择速度，并显示`ftime`的值。
- en: 'Sketch 82: Saving Still Frames from a Video'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 82：从视频中保存静止帧
- en: This sketch will allow the user to save a set of still image frames from a video.
    The video is played in a loop so that the user can select all of the frames they
    need. Clicking the mouse will start saving images, and clicking again will stop
    it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例允许用户从视频中保存一组静止图像帧。视频会循环播放，以便用户可以选择所需的所有帧。点击鼠标将开始保存图像，再次点击将停止保存。
- en: 'Saving frames is accomplished using the `save()` function of the `Movie` class
    object. If `movie` is a `Movie` object, the following call saves the current frame
    in the named file as the type indicated by the file extension:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 保存帧是通过使用`Movie`类对象的`save()`函数实现的。如果`movie`是一个`Movie`对象，以下调用将当前帧保存到指定文件中，并根据文件扩展名指定文件类型：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is the same way we save `PImage` pictures. In this case, we save a JPEG,
    but GIF, PNG, and other file formats work too.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们保存`PImage`图片的方式相同。在这种情况下，我们保存JPEG格式，但GIF、PNG和其他文件格式也同样适用。
- en: 'To save multiple frames without overwriting the same file each time, we might
    use the number of stills that we have already saved, stored in the variable `v`,
    in the filename, as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在不每次覆盖同一文件的情况下保存多个帧，我们可以将已经保存的静止图像的数量存储在变量`v`中，并将其加入文件名，示例如下：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This means that the filenames would be *frame1.jpg*, *frame2.jpg*, and so on.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着文件名将会是*frame1.jpg*、*frame2.jpg*，依此类推。
- en: 'With this labeling scheme, however, there’s no way to tell where one saved
    sequence ends and the next one begins. This sketch solves that problem by using
    the variable `nclicks` in conjunction with `v`. When the user clicks the mouse
    while the frames are being saved, then saving ceases, `nclicks` is incremented,
    and `v` is reset. We build a filename using the frame count and a letter that
    is relative to the `nclicks` variable: `nclicks` = 0 adds the letter “`a`” to
    the name, `nclicks` = 1 adds “`b`” to the name, and so on. The file for each frame
    is actually saved as follows 1:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用这种标签方案时，无法判断保存的一个序列何时结束，另一个序列何时开始。这个草图通过将变量`nclicks`与`v`结合使用来解决这个问题。当用户在保存帧时点击鼠标时，保存停止，`nclicks`会增加，并且`v`被重置。我们通过帧计数和相对于`nclicks`变量的字母构建文件名：`nclicks`
    = 0时在文件名中添加字母“`a`”，`nclicks` = 1时添加字母“`b`”，依此类推。每个帧的文件实际上是按以下方式保存的：
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The first sequence would be *framea1.jpg*, *framea2.jpg*, . . . and the second
    would be *frameb1.jpg* and so on.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第一组序列将是*framea1.jpg*、*framea2.jpg*，依此类推，第二组将是*frameb1.jpg*，依此类推。
- en: The sketch draws the time on the screen, but this is for the user—it will not
    appear on the saved image.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 草图会在屏幕上绘制时间，但这是为了用户查看——它不会出现在保存的图像中。
- en: Another way to save video frames is to display them in the sketch window and
    then save the sketch window as an image. If we did that in this case, the time
    drawn on the window would in fact be saved to the file with the image.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个保存视频帧的方法是将其显示在草图窗口中，然后将草图窗口保存为图像。如果我们在这种情况下这样做，窗口上绘制的时间实际上会与图像一起保存到文件中。
- en: 'Sketch 83: Processing Video in Real Time'
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图83：实时处理视频
- en: Some applications process or analyze a video frame by frame, and it is not necessary
    to see the result in real time. For example, it is possible to analyze a batter’s
    swing by capturing a video, enhancing relevant portions in each frame, and then
    putting the enhanced frames back in video form. It is even possible, when the
    analysis of each frame does not require too much computational effort, to do the
    processing as the video is playing and see the result as the action is going on.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一些应用程序逐帧处理或分析视频帧，而不需要实时查看结果。例如，可以通过捕捉视频来分析击球手的挥棒动作，增强每一帧中的相关部分，然后将增强后的帧重新组合成视频形式。甚至当每一帧的分析不需要太多计算时，也可以在视频播放时进行处理，并看到实时结果。
- en: In this sketch, the video that we used in the previous two sketches will be
    converted to grayscale and then thresholded in real time, just as we did in Sketch
    23 for a still image.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个草图中，我们之前使用的那个视频将被转换为灰度图像，并在实时中进行阈值处理，就像我们在草图23中对静态图像所做的那样。
- en: 'Recall that we can treat a `Movie` object just like a `PImage` (they have the
    same local functions). We extract each pixel `p` in the movie image using `movie.loadPixels()`
    1 and calculate a brightness or grey level by averaging the color components:
    `(red(p)+green(p)+blue(p))/3` 2. If this value is less than a threshold, the corresponding
    pixel in the display image is set to black; otherwise it is set to white. In this
    sketch, the threshold value is 100\. The result is a video that displays only
    black and white pixels.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们可以像对待`PImage`对象一样对待`Movie`对象（它们具有相同的本地功能）。我们使用`movie.loadPixels()`方法提取电影图像中的每个像素`p`，并通过计算颜色组件的平均值来得出亮度或灰度值：`(red(p)+green(p)+blue(p))/3`。如果该值小于阈值，则显示图像中的相应像素将被设置为黑色；否则，它将被设置为白色。在这个草图中，阈值为100。结果是一个只显示黑白像素的视频。
- en: The setup is the same as before, but we also create a second image the size
    of a video frame (named `display`) that will hold a processed copy of each frame
    as it is displayed. The `draw()` function reads a frame when it is ready and then
    calls a local `thresh()` function to calculate a thresholded image. After `thresh()`
    has created a thresholded version of the movie image, both are displayed, one
    above the other, and both versions play simultaneously.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 设置与之前相同，但我们还创建了一个第二个图像，其大小与视频帧相同（命名为`display`），用于保存每个显示帧的处理副本。`draw()`函数在帧准备好时读取该帧，然后调用本地的`thresh()`函数来计算阈值处理后的图像。在`thresh()`创建了一个阈值化的电影图像版本后，两个图像会一个接一个地显示，并且这两个版本同时播放。
- en: The result in this case is unimpressive, but it does give an idea of what we
    could do. For example, if we choose the threshold carefully, it might be possible
    to show only the motion of the car in the scene, removing the background clutter.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况下的结果不算令人印象深刻，但它确实提供了我们可以做什么的一个想法。例如，如果我们仔细选择阈值，可能只会显示场景中汽车的运动，去除背景的杂乱。
- en: In other videos, we could locate faces, enhance and read license plates on moving
    cars, or inspect and count apples moving past the camera on a conveyor belt. These
    are problems in computer vision, and Processing is a good tool for building computer
    vision systems because of the ease with which it deals with images.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他视频中，我们可以定位面部、增强和读取行驶中汽车的车牌，或者检查并计算传送带上经过摄像头的苹果。这些问题属于计算机视觉领域，Processing 是构建计算机视觉系统的一个好工具，因为它在处理图像方面非常简便。
- en: 'Sketch 84: Capturing Video from a Webcam'
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 84：从网络摄像头捕捉视频
- en: Webcams are present on most computers and almost all laptops. The previous sketches
    dealt with video that had already been captured, in the sense that a video file
    was available to be displayed or processed. This sketch will capture live video
    data from a webcam and display it in grayscale.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数电脑和几乎所有的笔记本电脑都有内置摄像头。之前的示例处理的是已经捕获的视频，意味着已经有一个视频文件可以展示或处理。这个示例将从网络摄像头捕获实时视频数据，并以灰度显示。
- en: 'The `Capture` class deals with cameras and image/video capture. To use it,
    first declare an instance 1:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`Capture` 类处理相机和图像/视频捕捉。要使用它，首先声明一个实例 1：'
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then initialize it using the class constructor. The class constructor may take
    only the parameter `this`, or `this` and a device specifier 2:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然后通过类构造函数初始化它。类构造函数可能只需要参数 `this`，或者 `this` 和设备说明符 2：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `myCamera` variable is a device specifier string of the following form:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`myCamera` 变量是一个设备说明符字符串，格式如下：'
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Much of the information in this string has an obvious meaning, and most is
    not absolutely necessary. If you know that the camera has a resolution of 640×480,
    the following call will open the camera:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 该字符串中的大部分信息都有明显的含义，并且大多数并非绝对必要。如果你知道摄像头的分辨率为 640×480，以下调用将打开摄像头：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Image capture begins with a call to `start()` 3:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图像捕获始于调用 `start()` 3：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As when playing a video, a frame is available when `camera.available()` returns
    `true`. The camera instance can now be treated like a `PImage` and be displayed
    with a call to `image()`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 就像播放视频时一样，当 `camera.available()` 返回 `true` 时，帧数据可用。此时，摄像头实例可以像 `PImage` 一样处理，并通过调用
    `image()` 来显示。
- en: This sketch copies the camera image into a `PImage` variable, `display` 4. The
    function `grey()` converts the color image into a grey one, which is displayed
    in place of the original. The result is a moving grayscale image of what is being
    captured by the camera. Be patient—it can take some time to open the camera device.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将摄像头图像复制到 `PImage` 变量 `display` 4 中。`grey()` 函数将彩色图像转换为灰度图像，并显示在原始图像位置。结果是一个实时的灰度图像，展示了摄像头正在捕捉的内容。请耐心等待——打开摄像头设备可能需要一些时间。
- en: The `Capture` class function `list()` looks at the camera devices available
    on the computer and returns a list of descriptors that can be used in the constructor.
    So, if this line
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`Capture` 类的 `list()` 函数查看计算机上可用的摄像头设备，并返回一个可以在构造函数中使用的描述符列表。所以，如果这一行'
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: were to be followed by this
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这将紧随其后
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'then a list of available cameras would be printed to the window. We could select
    one and use the index for it in the code to select it from the `cameras[]` array.
    For instance, you could search for a camera that is 640×480 at 130 frames per
    second and find it as camera `i` in the list. Then you could use the selector
    you want by indexing the array:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，所有可用的摄像头将被打印到窗口上。我们可以选择一个，并在代码中使用该摄像头的索引，从 `cameras[]` 数组中选择它。例如，你可以搜索分辨率为
    640×480 且帧率为 130fps 的摄像头，并在列表中找到它作为摄像头 `i`。然后你可以通过数组索引选择你想要的摄像头：
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Sketch 85: Mapping Live Video as a Texture'
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 85：将实时视频映射为纹理
- en: In the previous sketches, you saw that a `Movie` object can be treated as a
    `PImage` for display purposes and even for extracting pixels from a video frame.
    This sketch shows the use of a video as a texture for a 3D surface, again like
    a `PImage`. The idea is to paint a four-cornered plane (a quad) with a movie so
    that the video plays on a 3D plane and is foreshortened as the user’s point of
    view changes.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，你看到 `Movie` 对象可以作为 `PImage` 来处理，用于显示或从视频帧中提取像素。这个示例展示了将视频用作 3D 表面的纹理，再次像
    `PImage` 一样。其思路是用视频绘制一个四角平面（四边形），使视频在 3D 平面上播放，并随着用户视角的变化而进行缩短。
- en: The first part of the sketch sets up the webcam (as before), establishes the
    `camera` variable as a source of images, and establishes P3D as the current renderer.
    When executing, the system requires a few seconds to figure out what cameras are
    attached and which one to use. We do all of this, including starting the camera,
    by calling `start()` 1 in `setup()`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 草图的第一部分设置了网络摄像头（与之前相同），将`camera`变量作为图像源，并将P3D设置为当前的渲染器。在执行时，系统需要几秒钟来判断连接了哪些摄像头以及使用哪个摄像头。我们通过在`setup()`中调用`start()`来完成这一切，包括启动摄像头。
- en: In `draw()`, the first thing is to check if there is a new image available.
    If so, we read it; if not, then the previous image remains as the current one
    2. Then we establish a 3D environment, with a call to `camera` setting up the
    viewpoint 3. We draw a quad in the 3D space and use the webcam as a texture 4.
    The viewpoint oscillates a little bit (x between −30 and 100) 5 to show that the
    view is changing.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在`draw()`中，首先检查是否有新的图像可用。如果有，我们读取它；如果没有，则保留上一张图像作为当前图像。接下来，我们建立一个3D环境，通过调用`camera`设置视角。我们在3D空间中绘制一个四边形，并将网络摄像头作为纹理。视角会稍微摆动一下（x在−30到100之间）以显示视图正在变化。
- en: The effect is that the quad seems to continuously change location and orientation
    while the live video plays within the quad. An interesting variation on this would
    be to draw a rotating cube with the video mapped on all faces. This would show
    nothing new, but it would take more code.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 效果是，四边形似乎在不断地改变位置和方向，而实时视频在四边形内播放。这个效果的一个有趣变种是绘制一个旋转的立方体，并将视频映射到所有面上。虽然这不会展示新内容，但它需要更多的代码。
