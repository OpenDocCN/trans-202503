- en: INTRODUCTION
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引言
- en: '![Image](../images/common.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: Few open source software developers would deny that GNU Autoconf, Automake,
    and Libtool (the *Autotools*) have revolutionized the open source software world.
    However, although there are many thousands of Autotools advocates, there are also
    many software developers who *hate* the Autotools—with a passion. I believe the
    reason for this dread of the Autotools is that when you use them without understanding
    the underlying infrastructure they manage, you find yourself fighting against
    the system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 很少有开源软件开发者会否认，GNU Autoconf、Automake和Libtool（即*Autotools*）已经彻底改变了开源软件的世界。然而，尽管有成千上万的Autotools支持者，也有许多软件开发者*讨厌*Autotools，甚至怀有强烈的反感。我认为这种对Autotools的恐惧源于，当你在没有理解它们管理的底层基础设施的情况下使用它们时，你会发现自己正在与系统对抗。
- en: This book solves this problem by first providing a framework for understanding
    the underlying infrastructure of the Autotools and then building on that framework
    with a tutorial-based approach to teaching Autotools concepts in a logically ordered
    fashion.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书通过首先提供一个框架，帮助读者理解Autotools的底层基础设施，然后在此基础上采用基于教程的方式，按逻辑顺序讲解Autotools概念，从而解决了这一问题。
- en: Who Should Read This Book
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 谁应该阅读本书
- en: This book is primarily for the open source software package maintainer who wants
    to become an Autotools expert. That said, this book also provides instructions
    to end users who wish to understand what’s happening during the process of downloading,
    unpacking, and building software packages whose build processes are managed by
    the Autotools. Existing material on the subject is limited to the GNU Autotools
    manuals and a few internet-based tutorials. For years, most real-world questions
    have been answered on the Autotools mailing lists, but mailing lists are an inefficient
    form of teaching because the same answers to the same questions are given time
    and again. This book provides a cookbook-style approach, covering real problems
    found in real projects.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书主要面向那些希望成为Autotools专家的开源软件包维护者。不过，本书也为希望了解下载、解压和构建由Autotools管理的构建过程的软件包的最终用户提供了指导。现有的相关资料主要限于GNU
    Autotools手册和一些基于互联网的教程。多年来，绝大多数实际问题都通过Autotools邮件列表得到了回答，但邮件列表的教学效率较低，因为同样的问题会一遍又一遍地被回答。本书提供了一种类似食谱的方式，涵盖了在真实项目中遇到的实际问题。
- en: How This Book Is Organized
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本书的组织结构
- en: The book starts with an end-user perspective on the Autotools and then moves
    from high-level development build concepts to mid-level use cases and examples,
    finally finishing with more advanced details and examples. As though you were
    learning arithmetic, we’ll begin with some basic math—algebra and trigonometry—and
    then move on to analytic geometry and calculus.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本书从最终用户的角度介绍了Autotools，接着从高层次的开发构建概念讲解到中层的用例和示例，最后以更高级的细节和示例做总结。就像学习算术一样，我们将从一些基础数学——代数和三角学开始，然后逐步深入到解析几何和微积分。
- en: '[Chapter 1](ch01.xhtml) provides an end-user perspective on the Autotools.
    It covers topics that a Linux power user, who is not necessarily a software developer,
    needs to understand in order to take full advantage of the features of Autotools-managed
    source packages (so-called “tarballs”) downloaded from project websites containing
    perhaps the latest beta version of some software the user would like to try out.
    Often, Linux users find that the solution to a software problem involves updating
    to a version that contains the fix for that problem, only to discover that the
    version they need is so new there is no RPM or Debian package for that version
    in any of the package repositories for their Linux distribution of choice. [Chapter
    1](ch01.xhtml) provides relief to the newbie who needs to know what to do with
    that *tar.gz* file containing that `configure` script and all those *.c* source
    files.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[第1章](ch01.xhtml)提供了关于Autotools的最终用户视角。它涵盖了Linux高级用户所需了解的主题，虽然他们不一定是软件开发者，但为了充分利用Autotools管理的源包（所谓的“tarballs”）的功能，了解这些内容是必要的。这些源包可能包含用户想要尝试的软件的最新beta版本，通常从项目网站下载。Linux用户常常发现，解决软件问题的办法是更新到包含修复的版本，但结果却发现所需的版本太新，以至于他们选择的Linux发行版的任何软件包仓库中都没有该版本的RPM或Debian包。[第1章](ch01.xhtml)为需要了解如何处理包含`configure`脚本和所有*.c*源文件的*tar.gz*文件的新手提供了帮助。'
- en: '[Chapter 2](ch02.xhtml) begins the discussion of concepts of interest to software
    developers. It presents a general overview of the packages considered part of
    the GNU Autotools. This chapter describes the interaction between these packages
    and the files consumed by and generated by each one. In each case, figures depict
    the flow of data from hand-coded input to final output files.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 2 章](ch02.xhtml)开始讨论对软件开发者感兴趣的概念。它概述了被认为是 GNU Autotools 一部分的各个软件包。本章描述了这些软件包之间的交互关系，以及每个软件包所使用和生成的文件。在每个案例中，图示展示了从手工编写的输入到最终输出文件的数据流动。'
- en: '[Chapter 3](ch03.xhtml) covers open source software project structure and organization.
    This chapter also goes into some detail about the *GNU Coding Standards (GCS)*
    and the *Filesystem Hierarchy Standard (FHS)*, both of which have played vital
    roles in the design of the GNU Autotools. This chapter presents some fundamental
    tenets upon which the design of each of the Autotools is based. With these concepts,
    you’ll better understand the theory behind the architectural decisions made by
    the Autotools designers.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 3 章](ch03.xhtml)介绍了开源软件项目的结构和组织。本章还详细讨论了*GNU 编码标准 (GCS)* 和 *文件系统层次标准 (FHS)*，这两个标准在
    GNU Autotools 的设计中起到了至关重要的作用。本章展示了一些设计每个 Autotools 的基本原则。有了这些概念，你将更好地理解 Autotools
    设计师在架构决策背后的理论。'
- en: In this chapter, we’ll also design a simple project, Jupiter, from start to
    finish using hand-coded makefiles. We’ll add to Jupiter in a stepwise fashion
    as we discover functionality that we can use to simplify tasks and to provide
    features that open source software users have come to expect.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们还将从头到尾设计一个简单的项目——Jupiter，使用手工编写的 makefile。随着我们发现可以简化任务并为开源软件用户提供期望功能的功能，我们将一步步添加到
    Jupiter 项目中。
- en: '[Chapters 4](ch04.xhtml) and [5](ch05.xhtml) present the framework designed
    by the GNU Autoconf engineers to ease the burden of creating and maintaining portable,
    functional project configuration scripts. The GNU Autoconf package provides the
    basis for creating complex configuration scripts with just a few lines of information
    provided by the project maintainer.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 4 章](ch04.xhtml)和[第 5 章](ch05.xhtml)介绍了 GNU Autoconf 工程师为简化创建和维护可移植、功能性项目配置脚本所设计的框架。GNU
    Autoconf 包提供了创建复杂配置脚本的基础，项目维护者只需提供几行信息即可。'
- en: In these chapters, we’ll quickly convert our hand-coded makefiles into Autoconf
    *Makefile.in* templates and then begin adding to them in order to gain some of
    the most significant Autoconf benefits. [Chapter 4](ch04.xhtml) discusses the
    basics of generating configuration scripts, while [Chapter 5](ch05.xhtml) moves
    on to more advanced Autoconf topics, features, and uses.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些章节中，我们将快速将手工编写的 makefile 转换为 Autoconf *Makefile.in* 模板，并开始向其中添加内容，以便获得一些最重要的
    Autoconf 好处。[第 4 章](ch04.xhtml)讨论了生成配置脚本的基础知识，而[第 5 章](ch05.xhtml)则介绍了更高级的 Autoconf
    主题、特性和应用。
- en: '[Chapter 6](ch06.xhtml) begins by converting the Jupiter project *Makefile.in*
    templates into Automake *Makefile.am* files. Here, you’ll discover that Automake
    is to makefiles what Autoconf is to configuration scripts. This chapter presents
    the major features of Automake in a manner that will not become outdated as new
    versions of Automake are released.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 6 章](ch06.xhtml)从将 Jupiter 项目的 *Makefile.in* 模板转换为 Automake *Makefile.am*
    文件开始。在这里，你将发现 Automake 对于 makefile 就像 Autoconf 对于配置脚本一样。 本章介绍了 Automake 的主要特性，以一种随着
    Automake 新版本发布而不至于过时的方式呈现。'
- en: '[Chapters 7](ch07.xhtml) and [8](ch08.xhtml) explain the basic concepts behind
    shared libraries and show how to build shared libraries with Libtool—a standalone
    abstraction for shared-library functionality that can be used with the other Autotools.
    [Chapter 7](ch07.xhtml) begins with a shared-library primer and then covers some
    basic Libtool extensions that allow Libtool to be a drop-in replacement for the
    more basic library generation functionality provided by Automake. [Chapter 8](ch08.xhtml)
    covers library versioning and the runtime dynamic module management abstraction
    provided by Libtool.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 7 章](ch07.xhtml)和[第 8 章](ch08.xhtml)解释了共享库的基本概念，并展示了如何使用 Libtool 构建共享库——这是一个用于共享库功能的独立抽象，可与其他
    Autotools 一起使用。[第 7 章](ch07.xhtml)从共享库简介开始，接着介绍了一些基本的 Libtool 扩展，使得 Libtool 成为可以替代
    Automake 提供的更基础的库生成功能的现成工具。[第 8 章](ch08.xhtml)则介绍了库版本管理和 Libtool 提供的运行时动态模块管理抽象。'
- en: '[Chapter 9](ch09.xhtml) presents a relatively new addition to the Autotools—autotest.
    The autotest functionality in Autoconf allows you to easily create and manage
    integration test execution frameworks for your projects. In previous chapters,
    we will have covered unit testing in individual makefiles. Autotest provides a
    mechanism for adding more global testing that depends on multiple components in
    your project. Honestly, autotest can be used to do about any sort of testing you
    want. We’ll focus on adding autotest suites that ensure your project works the
    way you believe it should—automatically.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[第9章](ch09.xhtml)介绍了Autotools中的一个相对较新的功能——autotest。Autoconf中的autotest功能使你能够轻松创建和管理集成测试执行框架。在之前的章节中，我们已经讨论了单个makefile中的单元测试。autotest提供了一种机制，用于添加更多依赖于项目多个组件的全局测试。说实话，autotest可以用于几乎任何你想要的测试。我们将重点介绍如何添加autotest测试套件，以确保你的项目按预期自动运行。'
- en: '[Chapter 10](ch10.xhtml) discusses the concepts of finding compile- and link-time
    dependencies and adding the appropriate references to build tool command lines.
    Specifically, this chapter introduces `pkg-config`, which has become a de facto
    standard in Linux software development, providing the framework for easily finding
    and consuming components that your package depends on. This chapter shows you
    how to both consume `pkg-config` *.pc* files to find your dependencies and how
    to play nicely in the sandbox by providing *.pc* files for your projects.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[第10章](ch10.xhtml)讨论了查找编译时和链接时依赖关系的概念，并将适当的引用添加到构建工具命令行中。具体来说，本章介绍了`pkg-config`，它已成为Linux软件开发中的事实标准，提供了一个框架，便于查找和使用你的软件包依赖的组件。本章向你展示了如何使用`pkg-config`的*.pc*文件来查找依赖关系，以及如何为你的项目提供*.pc*文件，遵循良好的实践。'
- en: '[Chapters 11](ch11.xhtml) and [12](ch12.xhtml) discuss internationalization
    (abbreviated *i18n*) and localization (*l10n*), respectively—the ability to easily
    manage text strings and other locale-specific attributes (such as references to
    numbers, money, and dates) within your project that should be different for localized
    releases of your project.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[第11章](ch11.xhtml)和[第12章](ch12.xhtml)分别讨论了国际化（缩写为*i18n*）和本地化（*l10n*）——在你的项目中轻松管理文本字符串和其他与地区相关的属性（如数字、货币和日期的引用），这些内容在本地化版本的项目中应有所不同。'
- en: '[Chapter 13](ch13.xhtml) talks about obtaining maximum portability in your
    projects by using Gnulib.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[第13章](ch13.xhtml)讨论了通过使用Gnulib，在你的项目中获得最大的可移植性。'
- en: '[Chapters 14](ch14.xhtml) and [15](ch15.xhtml) illustrate the transformation
    of an existing, fairly complex open source project (FLAIM) from using a hand-built
    build system to using an Autotools build system. This example will help you to
    understand how you might *autoconfiscate* one of your own existing projects.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[第14章](ch14.xhtml)和[第15章](ch15.xhtml)展示了如何将一个已有的、相对复杂的开源项目（FLAIM）从使用手工构建系统转变为使用Autotools构建系统的过程。这个例子将帮助你理解如何将你自己的现有项目进行*autoconfiscate*（即自动配置化）。'
- en: '[Chapter 16](ch16.xhtml) provides an overview of the features of the M4 macro
    processor that are relevant to obtaining a solid understanding of Autoconf. This
    chapter also considers the process of writing your own Autoconf macros.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[第16章](ch16.xhtml)概述了与深入理解Autoconf相关的M4宏处理器的功能。本章还讨论了编写自己Autoconf宏的过程。'
- en: '[Chapter 17](ch17.xhtml) discusses using the Autotools to build software designed
    to run on Microsoft Windows platforms. I’ll show you how to cross compile on Linux
    for Windows, and how to install and use the three most popular Windows-based POSIX
    platforms—Cygwin, Msys2, and MinGW—to build Windows software using GNU tools,
    including the Autotools.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[第17章](ch17.xhtml)讨论了使用Autotools构建旨在运行在Microsoft Windows平台上的软件。我将向你展示如何在Linux上为Windows进行交叉编译，以及如何安装和使用三种最流行的基于Windows的POSIX平台——Cygwin、Msys2和MinGW——使用GNU工具，包括Autotools，来构建Windows软件。'
- en: Microsoft has a great set of free tools for building Windows software, but if
    your package is already working on Linux and being built with POSIX build tools,
    using the Autotools to build for Windows can be a great way to get you up and
    running there fast. From there, you can decide whether what you have is good enough
    for your project or if you need to provide a native build environment for Windows.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 微软提供了一套很棒的免费工具，用于构建Windows软件，但如果你的软件包已经在Linux上运行并使用POSIX构建工具进行构建，使用Autotools构建Windows软件可以让你快速启动并运行。在此基础上，你可以决定你现有的工具是否足够好，或者是否需要为Windows提供一个原生的构建环境。
- en: '[Chapter 18](ch18.xhtml) is a compilation of tips, tricks, and reusable solutions
    to Autotools problems. The solutions in this chapter are presented as a set of
    individual topics or items. Each can be understood without context from the surrounding
    items.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[第18章](ch18.xhtml)是关于Autotools问题的技巧、窍门和可重用解决方案的汇编。本章中的解决方案以一组独立的主题或条目呈现，每个条目可以在没有上下文的情况下单独理解。'
- en: '[Chapters 3](ch03.xhtml) through [9](ch09.xhtml) are built around the Jupiter
    project. [Chapters 14](ch14.xhtml) and [15](ch15.xhtml) cover the FLAIM project.
    [Chapters 11](ch11.xhtml) and [12](ch12.xhtml) cover the gettext project and [Chapter
    13](ch13.xhtml) covers the b64 project. These projects are found on the GitHub
    NSP-Autotools site at *[https://github.com/NSP-Autotools](https://github.com/NSP-Autotools)*.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[第3章](ch03.xhtml)至[第9章](ch09.xhtml)围绕Jupiter项目构建。[第14章](ch14.xhtml)和[第15章](ch15.xhtml)介绍FLAIM项目。[第11章](ch11.xhtml)和[第12章](ch12.xhtml)讨论gettext项目，[第13章](ch13.xhtml)讨论b64项目。这些项目可以在GitHub的NSP-Autotools站点找到，链接是*
    [https://github.com/NSP-Autotools](https://github.com/NSP-Autotools)*。'
- en: Except for the FLAIM project, each of these repositories are tagged at commits
    representing topic transitions. The tags are called out within the margins of
    the chapters pertaining to these projects. You can easily follow along by checking
    out the tagged commit in the repository when you see one in the book.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 除了FLAIM项目外，每个这些仓库都有标记，标记的提交表示主题的过渡。这些标签在相关章节的边缘被标出。当你在书中看到标签时，你可以通过检查仓库中的标记提交来轻松跟随。
- en: Conventions Used in This Book
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本书中使用的约定
- en: 'This book contains hundreds of program listings in roughly two categories:
    console examples and file listings. Console examples have no captions, and user
    input is bolded.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本书包含数百个程序列表，大致分为两类：控制台示例和文件列表。控制台示例没有标题，用户输入部分是加粗的。
- en: 'Often, I’ll use the Linux `ls` command with various options to show the contents
    of a directory before or after changes are made. Different Linux distributions
    often ship with an alias for `ls` enabled by default. I’m using Linux Mint 18
    with the Cinnamon desktop to write this book; my predefined alias for `ls` is:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我会使用Linux的`ls`命令并加上各种选项，在进行更改前或更改后显示目录内容。不同的Linux发行版通常默认启用`ls`的别名。我正在使用Linux
    Mint 18和Cinnamon桌面编写本书；我为`ls`定义的别名是：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You may find you have an `ls` alias on your system that provides a different
    default set of functionality that will defeat your attempts to exactly duplicate
    my console examples. Just be aware of the reasons for these possible differences.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现你的系统上有一个`ls`别名，它提供了不同的默认功能，这可能会影响你精确复制我控制台示例的尝试。只需了解这些可能差异的原因。
- en: File listings contain full or partial listings of the files discussed in the
    text. All named listings are provided in the associated git repositories. I’ve
    tried to provide enough context around modified portions of partial listings so
    that you can easily see where lines are added or changed. However, there are a
    few listings where lines are deleted. In these cases, I’ve called out the deleted
    lines in the text near the listing.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列表包含文中讨论的文件的完整或部分列表。所有命名的列表都提供在关联的git仓库中。我尽力为修改过的部分提供足够的上下文，这样你就能轻松看到哪些行被添加或更改。然而，有一些列表中删除了行。在这些情况下，我在靠近列表的文本中指出了删除的行。
- en: Listings without filenames are entirely contained in the printed listing itself,
    are meant to be considered independently without context, and are not part of
    the provided source repositories. In general, text that remains the same as a
    previously listed version of the file will be grayed out, whereas modified areas
    will be in black text.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 没有文件名的列表完全包含在打印的列表中，应该独立地看待这些内容，而不是作为提供的源代码库的一部分。一般来说，和之前列出的文件版本保持一致的文本会被灰色显示，而修改过的部分则会用黑色文本显示。
- en: For listings that do relate to the Jupiter and FLAIM projects, the caption first
    specifies the path of the file relative to the project root directory and then
    provides a description of the changes made to that file in the listing.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于与Jupiter和FLAIM项目相关的列表，标题首先指定文件相对于项目根目录的路径，然后提供该文件在列表中所做的更改描述。
- en: Throughout this book, I refer to the GNU/Linux operating system simply as *Linux*.
    It should be understood that by the use of the term *Linux*, I’m referring to
    GNU/Linux, its actual official name. I use *Linux* simply as shorthand for the
    official name.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我将 GNU/Linux 操作系统简称为 *Linux*。应理解的是，使用 *Linux* 一词时，我指的是 GNU/Linux，它的正式名称。我使用
    *Linux* 仅仅是作为该正式名称的缩写。
- en: Autotools Versions Used in This Book
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本书中使用的 Autotools 版本
- en: The Autotools are always being updated—on average, a significant update of each
    of the three most important tools, Autoconf, Automake, and Libtool, is released
    every year and a half, and minor updates are released every three to six months.
    The Autotools developers attempt to maintain a reasonable level of backward compatibility
    with each new release, but occasionally something significant is broken, and older
    documentation simply becomes out-of-date. More recently, the Autotools have been
    considered mature and complete; release cycles have slowed and major changes seldom
    happen anymore. This is good for the community and for you, the reader, as it
    means that the material you find in this book will remain relevant for a long
    time to come.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Autotools 一直在更新——平均而言，三个最重要工具（Autoconf、Automake 和 Libtool）的每次重大更新大约每一年半发布一次，且小更新每三到六个月发布一次。Autotools
    开发者会尽力保持新版本的合理向后兼容性，但偶尔会有重大内容被破坏，旧文档因此变得过时。最近，Autotools 被认为已经成熟完整；发布周期变慢，重大变化也很少发生。这对社区和你作为读者来说都是好事，因为这意味着你在本书中找到的内容将在很长一段时间内保持相关性。
- en: Although I describe new, major features of recent releases of the Autotools,
    in my efforts to make this book more evergreen, I’ve tried to stick to descriptions
    of Autotools features (Autoconf macros, for instance) that have been in widespread
    use for several years. Minor details change occasionally, but the general use
    has stayed the same through many releases.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我描述了最近发布的 Autotools 版本的新特性，但为了让本书更具长久性，我尽量坚持描述一些已经广泛使用多年的 Autotools 特性（例如
    Autoconf 宏）。细节偶尔会有所变化，但一般使用方法在多个版本中保持一致。
- en: At appropriate places in the text, I mention the versions of the Autotools I
    used for this book, but I’ll summarize here. I used version 2.69 of Autoconf,
    version 1.15 of Automake (the latest version as of this writing is actually 1.16.1),
    and version 2.4.6 of Libtool. Through the publication process, I was able to make
    minor corrections and update to new releases as they became available.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的适当位置，我提到了我使用的 Autotools 版本，但在这里我将做一个总结。我使用了版本 2.69 的 Autoconf，版本 1.15 的
    Automake（截至写作时，最新版本实际上是 1.16.1），以及版本 2.4.6 的 Libtool。在出版过程中，我能够做出一些小的修正，并随着新版本发布进行更新。
- en: Additionally, I used version 0.19.7 of GNU gettext (the latest is 0.20.1) and
    version 0.29.1 of `pkg-config` (the latest is 0.29.2). The GNU portability library,
    Gnulib, is not distributed as a package but rather as a set of code snippets that
    are downloaded directly from the GNU website ([*https://www.gnu.org/software/gnulib/*](https://www.gnu.org/software/gnulib/)).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我使用了版本 0.19.7 的 GNU gettext（最新版本为 0.20.1）和版本 0.29.1 的 `pkg-config`（最新版本为
    0.29.2）。GNU 可移植性库 Gnulib 不是以软件包形式发布，而是作为一组代码片段，直接从 GNU 网站下载（[*https://www.gnu.org/software/gnulib/*](https://www.gnu.org/software/gnulib/)）。
