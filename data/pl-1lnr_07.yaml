- en: Chapter 8. Useful Regular Expressions
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第8章 有用的正则表达式
- en: In this chapter, we’ll look at various regular expressions and how to use them
    in some handy one-liners. The regular expressions include matching IP addresses,
    HTTP headers, and email addresses; matching numbers and number ranges; and extracting
    and changing matches. I’ll also share some regular expression puzzles and best
    practices. This chapter will be a bit different from previous ones because I’ll
    start with a regular expression and then write a one-liner that uses it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论各种正则表达式，以及如何在一些方便的单行代码中使用它们。正则表达式包括匹配 IP 地址、HTTP 头和电子邮件地址；匹配数字和数字范围；提取和修改匹配项。我还将分享一些正则表达式难题和最佳实践。本章与前几章略有不同，因为我将从一个正则表达式开始，然后编写一个使用它的单行代码。
- en: 8.1 Match something that looks like an IP address
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.1 匹配看起来像 IP 地址的东西
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This regular expression doesn’t actually guarantee that the thing that matched
    is, in fact, a valid IP; it simply matches something that looks like an IP address.
    For example, it matches a valid IP such as `81.198.240.140` as well as an invalid
    IP such as `936.345.643.21`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这个正则表达式实际上并不能保证匹配的东西真的是一个有效的 IP 地址；它仅仅匹配看起来像 IP 地址的东西。例如，它可以匹配一个有效的 IP 地址，如
    `81.198.240.140`，也可以匹配一个无效的 IP 地址，如 `936.345.643.21`。
- en: Here’s how it works. The `^` at the beginning of the regular expression is an
    anchor that matches the beginning of the string. Next, `\d{1,3}` matches one,
    two, or three consecutive digits. The `\.` matches a dot. The `$` at the end is
    an anchor that matches the end of the string. (You use both `^` and `$` anchors
    to prevent strings like `foo213.3.1.2bar` from matching.)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的工作原理。正则表达式开头的 `^` 是一个锚点，用来匹配字符串的开头。接下来，`\d{1,3}` 匹配一位、两位或三位连续的数字。`\.` 匹配一个点。结尾的
    `$` 是一个锚点，用来匹配字符串的结尾。（你使用 `^` 和 `$` 锚点来防止像 `foo213.3.1.2bar` 这样的字符串匹配。）
- en: 'You can simplify this regular expression by grouping the first three repeated
    `\d{1,3}\.` expressions:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将前三个重复的 `\d{1,3}\.` 表达式分组来简化这个正则表达式：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Say you have a file with the following content and you want to extract only
    the lines that look like IP addresses:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个文件，内容如下，并且你想提取看起来像 IP 地址的行：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To extract only the matching lines, you can write this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要提取仅匹配的行，可以写成这样：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: which should print
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会输出：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: One-liner 8.3 explains how to match an IP precisely, not just something that
    looks like an IP.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 单行代码 8.3 解释了如何精确匹配一个 IP，而不仅仅是看起来像 IP 的东西。
- en: 8.2 Test whether a number is in the range 0 to 255
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.2 测试一个数字是否在 0 到 255 的范围内
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: I like to challenge people with puzzles. One of my favorites is to ask someone
    to come up with a regular expression that matches a number range. Writing one
    is actually quite tricky if you’ve never done so before.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢用难题来挑战人们。我最喜欢的一个问题是让某人编写一个匹配数字范围的正则表达式。如果你以前从未做过的话，写出一个其实是相当棘手的。
- en: Here’s how it works. A number can have one, two, or three digits. If the number
    has one digit, you allow it to be anything `[0-9]`. If it has two digits, you
    also let it be any combination of `[0-9][0-9]`. But if the number has three digits,
    it has to be either one hundred–something or two hundred–something. If the number
    is one hundred–something, `1[0-9][0-9]` matches it. If the number is two hundred–something,
    the number is either 200 to 249 (which is matched by `2[0-4][0-9]`) or it’s 250
    to 255 (which is matched by `25[0-5]`).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的工作原理。一个数字可以有一位、两位或三位。如果数字是一位，你可以让它是任何 `[0-9]`。如果它有两位，你也允许它是 `[0-9][0-9]`
    的任意组合。但是如果数字有三位，它必须是 100 到 199 之间的某个数字，或者是 200 到 249 之间的数字。如果数字是 100 到 199 之间的，那么
    `1[0-9][0-9]` 匹配它。如果数字是 200 到 249 之间的，那么这个数字要么是 200 到 249（由 `2[0-4][0-9]` 匹配），要么是
    250 到 255（由 `25[0-5]` 匹配）。
- en: 'Let’s confirm this regular expression really matches all numbers in the range
    0 to 255 and write a one-liner to do it:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确认这个正则表达式真的能匹配从 0 到 255 的所有数字，并编写一个单行代码来实现它：
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This one-liner outputs 256, the total numbers in the range 0 to 255\. It iterates
    over the range 0 to 255 and increments the `$n` variable for every number that
    matches. If the output value was less than 256, you’d know that some numbers didn’t
    match.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行代码输出 256，这是 0 到 255 范围内的总数字。它会遍历 0 到 255 的范围，并在每个匹配的数字上增加 `$n` 变量。如果输出值小于
    256，你就知道有些数字没有匹配。
- en: 'Let’s also make sure this one-liner doesn’t match numbers above 255:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们还确保这个单行代码不会匹配超过 255 的数字：
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Although there are 1001 iterations, from 0 to 1000, the final value of `$n`
    and the output should still be 256 because numbers greater than 255 should not
    match. If the value was greater than 256, you’d know that too many numbers matched
    and the regular expression was incorrect.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有1001次迭代，从0到1000，最终`$n`的值和输出应该仍然是256，因为大于255的数字不应该匹配。如果值大于256，你就会知道匹配的数字太多，正则表达式是错误的。
- en: 8.3 Match an IP address
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.3 匹配一个IP地址
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This regular expression combines the ideas from the previous two regular expressions
    (8.1 and 8.2) and introduces the `qr/.../` operator, which lets you construct
    a regular expression and save it in a variable. Here, I’m saving the regular expression
    that matches all numbers in the range 0 to 255 in the `$ip_part` variable. Next,
    the `$ip_part` matches the four parts of the IP address.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个正则表达式结合了前两个正则表达式（8.1和8.2）的思想，并引入了`qr/.../`操作符，它允许你构造一个正则表达式并将其保存在变量中。在这里，我将匹配0到255范围内所有数字的正则表达式保存在`$ip_part`变量中。接下来，`$ip_part`匹配IP地址的四个部分。
- en: 'You can simplify this by grouping the first three IP parts:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将前三个IP部分分组来简化这一点：
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let’s run this on the same file from one-liner 8.1\. If you have this file
    as input:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在与一行代码8.1相同的文件上运行这个。如果你的输入文件是：
- en: '[PRE10]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: and your one-liner is
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你的一行代码是
- en: '[PRE11]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: then the output is
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后输出是
- en: '[PRE12]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, only the valid IP addresses are printed.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，只有有效的IP地址会被打印出来。
- en: 8.4 Check whether a string looks like an email address
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.4 检查字符串是否像一个电子邮件地址
- en: '[PRE13]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This regular expression makes sure the string looks like an email address; it
    doesn’t guarantee the string is an email address, however. First, it matches something
    that’s not whitespace (`\S+`) up to the `@` symbol; then it matches as much as
    possible until it finds a dot; then it matches some more.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个正则表达式确保字符串看起来像一个电子邮件地址；然而，它并不保证字符串就是一个电子邮件地址。首先，它匹配不是空白的内容（`\S+`）直到`@`符号；然后它尽可能多地匹配，直到找到一个点；接着它再匹配一些内容。
- en: If the matches succeed, you know the string at least looks like an email address
    with the `@` symbol and a dot in it. For example, `cats@catonmat.net` matches,
    but `cats@catonmat` doesn’t because the regular expression can’t find the dot
    that’s required in a fully qualified domain name.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果匹配成功，你知道该字符串至少看起来像是一个带有`@`符号和点的电子邮件地址。例如，`cats@catonmat.net`匹配，但`cats@catonmat`不匹配，因为正则表达式无法找到一个完全合格的域名所需的点。
- en: 'Here’s a much more robust way to see whether a string is a valid email address,
    using the `Email::Valid` module:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个更加健壮的方法来判断一个字符串是否是有效的电子邮件地址，使用`Email::Valid`模块：
- en: '[PRE14]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here, you use the ternary operator `cond ? true : false`. If the `cond` is
    true, the `true` part executes; otherwise the `false` part executes. This prints
    `valid email` if the email is valid; if not, it prints `invalid email`.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '在这里，你使用了三元运算符`cond ? true : false`。如果`cond`为真，则执行`true`部分；否则执行`false`部分。如果电子邮件有效，它将打印`valid
    email`；如果无效，则打印`invalid email`。'
- en: 'So a one-liner would look like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所以一行代码可以像这样：
- en: '[PRE15]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, if the email address is valid, you simply print it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，如果电子邮件地址有效，你只需打印它。
- en: 8.5 Check whether a string is a number
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.5 检查字符串是否是数字
- en: Determining whether a string is a number is difficult with a regular expression.
    This is a derivation of a regular expression that matches decimal numbers.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用正则表达式来判断一个字符串是否是数字很困难。这是一个匹配十进制数字的正则表达式的衍生形式。
- en: 'I start with Perl’s `\d` regular expression, which matches the digits 0 through
    9:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我从Perl的`\d`正则表达式开始，它匹配数字0到9：
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This regular expression matches one or more digits `\d` from the beginning
    of the string `^` to the end at `$`. But it doesn’t match numbers such as `+3`
    and `-3`. Let’s modify the regular expression to match them:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个正则表达式从字符串的开始`^`到结束`$`匹配一个或多个数字`\d`。但它不匹配像`+3`和`-3`这样的数字。让我们修改正则表达式以匹配它们：
- en: '[PRE17]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here, the `[+-]?` means “match an optional plus or a minus before the digits.”
    This regular expression now matches `+3` and `-3` but not `-0.3`. Let’s add that:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`[+-]?`表示“匹配数字前的可选加号或减号。”这个正则表达式现在匹配`+3`和`-3`，但不匹配`-0.3`。让我们添加这个：
- en: '[PRE18]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: I’ve expanded the previous regular expression by adding `\.?\d*`, which matches
    an optional dot followed by zero or more numbers. Now we’re in business. This
    regular expression also matches numbers like `-0.3` and `0.3`, though it would
    not match numbers such as `123,456` or `.5`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我通过添加`\.?\d*`扩展了之前的正则表达式，这匹配一个可选的点后跟零个或多个数字。现在我们可以开始了。这个正则表达式也匹配像`-0.3`和`0.3`这样的数字，但不会匹配像`123,456`或`.5`这样的数字。
- en: 'A much better way to match a decimal number is to use the `Regexp::Common`
    module. For example, to match a decimal number, you can use `$RE{num}{real}` from
    `Regexp::Common`. Here’s a one-liner that filters the input and prints only the
    decimal numbers:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配十进制数字的一个更好的方法是使用`Regexp::Common`模块。例如，要匹配一个十进制数字，你可以使用`Regexp::Common`中的`$RE{num}{real}`。以下是一行代码，它过滤输入并只打印十进制数字：
- en: '[PRE19]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This one-liner also matches and prints numbers such as `123,456` and `.5`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个一行代码也匹配并打印类似`123,456`和`.5`这样的数字。
- en: 'How about matching positive hexadecimal numbers? Here’s how:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如何匹配正十六进制数字呢？方法如下：
- en: '[PRE20]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This one-liner matches the hex prefix `0x` followed by the hex number itself.
    The `/i` flag at the end ensures the match is case insensitive. For example, `0x5af`
    matches, `0X5Fa` matches, but `97` doesn’t because `97` has no hex prefix.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个一行代码匹配十六进制前缀`0x`，后面跟着十六进制数字本身。末尾的`/i`标志确保匹配时不区分大小写。例如，`0x5af`匹配，`0X5Fa`匹配，但`97`不匹配，因为`97`没有十六进制前缀。
- en: Better still, use `$RE{num}{hex}` because it supports negative numbers, decimal
    places, and number grouping.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的做法是使用`$RE{num}{hex}`，因为它支持负数、十进制数和数字分组。
- en: How about matching octals?
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如何匹配八进制数字呢？
- en: '[PRE21]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Octal numbers are prefixed by 0, which is followed by the octal digits `0-7`.
    For example, `013` matches but `09` doesn’t because it’s not a valid octal number.
    Using `$RE{num}{oct}` is better because it supports negative octal numbers, octal
    numbers with decimal places, and number grouping.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 八进制数字以0为前缀，后跟八进制数字`0-7`。例如，`013`是有效的，而`09`不是，因为它不是一个有效的八进制数字。使用`$RE{num}{oct}`更好，因为它支持负数八进制数、小数点八进制数以及数字分组。
- en: 'Finally, we come to binary matching:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们来到了二进制匹配：
- en: '[PRE22]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Binary base consists of only 0s and 1s, so `010101` matches but `210101` doesn’t
    because `2` is not a valid binary digit.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制基数只由0和1组成，因此`010101`匹配，但`210101`不匹配，因为`2`不是一个有效的二进制数字。
- en: '`Regexp::Common` also offers a better regular expression for matching binary
    numbers: `$RE{num}{bin}`.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`Regexp::Common`还提供了一个更好的正则表达式来匹配二进制数字：`$RE{num}{bin}`。'
- en: 8.6 Check whether a word appears in a string twice
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.6 检查一个单词是否在字符串中出现两次
- en: '[PRE23]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This regular expression matches a word followed by something or nothing at all,
    followed by the same word. Here, `(word)` captures the word in group 1, and `\1`
    refers to the contents of group 1, which is the same as writing `/(word).*word/`.
    For example, `silly things are silly` matches `/(silly).*\1/`, but `silly things
    are boring` doesn’t because `silly` is not repeated in the string.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个正则表达式匹配一个单词，后面跟着其他字符或什么都没有，再跟着同样的单词。这里，`(word)`将单词捕获到组1中，`\1`指代组1的内容，等同于写`/(word).*word/`。例如，`silly
    things are silly`匹配`/(silly).*\1/`，但`silly things are boring`不匹配，因为`silly`在字符串中没有重复。
- en: 8.7 Increase all integers in a string by one
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.7 将字符串中的所有整数增加1
- en: '[PRE24]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here, you use the substitution operator `s` to match all integers `(\d+)`,
    put them in capture group 1, and then replace them with their value incremented
    by one: `$1+1`. The `g` flag finds all numbers in the string, and the `e` flag
    evaluates `$1+1` as a Perl expression. For example, `this 1234 is awesome 444`
    is turned into `this 1235 is awesome 445`.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你使用替换操作符`s`来匹配所有整数`(\d+)`，将它们放入捕获组1，然后将它们替换为其值加一：`$1+1`。`g`标志表示查找字符串中的所有数字，`e`标志表示将`$1+1`作为Perl表达式求值。例如，`this
    1234 is awesome 444`会变成`this 1235 is awesome 445`。
- en: 'Note that this regular expression doesn’t increment floating-point numbers
    because it uses `\d+` to match integers. To increment floating-point numbers,
    use the `$RE{num}{real}` regular expression from one-liner 8.5\. Here’s a sample
    one-liner that uses `$RE{num}{real}`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个正则表达式不会增加浮点数，因为它使用`\d+`来匹配整数。要增加浮点数，请使用一行代码8.5中的`$RE{num}{real}`正则表达式。这里有一个使用`$RE{num}{real}`的一行代码示例：
- en: '[PRE25]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: If you pass this one-liner the input `weird 44.5 line -1.25`, it prints `weird
    45.5 line -0.25`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你传入这个一行代码的输入`weird 44.5 line -1.25`，它会打印`weird 45.5 line -0.25`。
- en: 8.8 Extract the HTTP User-Agent string from HTTP headers
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.8 从HTTP头提取HTTP用户代理字符串
- en: '[PRE26]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'HTTP headers are formatted as `Key: Value` pairs. You can easily parse such
    strings by instructing the regular expression engine to save the `Value` part
    in the `$1` group variable. For example, if the HTTP headers contain the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 'HTTP头部的格式是`Key: Value`对。你可以通过指示正则表达式引擎将`Value`部分保存在`$1`组变量中来轻松解析这样的字符串。例如，如果HTTP头包含以下内容：'
- en: '[PRE27]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: then the regular expression will extract the string `Mozilla/5.0 (Macintosh;
    U; Intel Mac OS X 10_0_0; en-US)`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，正则表达式将提取字符串`Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_0_0; en-US)`。
- en: 8.9 Match printable ASCII characters
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.9 匹配可打印的ASCII字符
- en: '[PRE28]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This regular expression is tricky and smart. To understand it, take a look at
    `man ascii`, and you’ll see that space starts at value `0x20` and the `~` character
    is `0x7e`. The expression `[ -~]` defines a range of characters from the space
    until `~`. Because all characters between the space and `~` are printable, this
    regular expression matches all printable characters. This is my favorite regular
    expression of all time because it’s quite puzzling when you first see it. What
    does it match? A space, a dash, and a tilde? No, it matches a range of characters
    from the space until the tilde!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个正则表达式既巧妙又复杂。要理解它，可以查看`man ascii`，你会看到空格的值是`0x20`，而`~`字符的值是`0x7e`。表达式`[ -~]`定义了一个从空格到`~`的字符范围。因为所有在空格和`~`之间的字符都是可打印的，所以这个正则表达式匹配所有可打印字符。这是我最喜欢的正则表达式，因为当你第一次看到它时，它让人感到困惑。它匹配什么？一个空格，一个破折号和一个波浪线？不，它匹配的是从空格到波浪线之间的所有字符！
- en: 'To invert the match, place `^` as the first character in the group:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要反转匹配，可以将`^`放在分组的第一个字符位置：
- en: '[PRE29]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This matches the opposite of `[ -~]`, that is, all nonprintable characters.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个正则表达式匹配的是与`[ -~]`相反的内容，也就是说，匹配所有不可打印字符。
- en: 8.10 Extract text between two HTML tags
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.10 提取两个HTML标签之间的文本
- en: '[PRE30]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Before I explain this regular expression, let me say that it’s okay to match
    HTML with regular expressions only for quick hacks when you need to get things
    done and move on. You should *never* use regular expressions to match and parse
    HTML in serious applications because HTML is actually a complicated language,
    and, in general, it can’t be parsed by a regular expression. Instead, use modules
    like `HTML::TreeBuilder` to accomplish the task more cleanly!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在我解释这个正则表达式之前，我想说的是，只有在快速处理并需要完成任务时，使用正则表达式匹配HTML是可以的。你*绝不*应该在正式的应用程序中使用正则表达式来匹配和解析HTML，因为HTML实际上是一个复杂的语言，通常无法通过正则表达式来解析。相反，应该使用像`HTML::TreeBuilder`这样的模块来更清晰地完成任务！
- en: This regular expression saves text between the `<strong>...</strong>` HTML tags
    in the `$1` special variable. The trickiest part of this one-liner is `([^<]*)`,
    which matches everything up to the `<` character. It’s a regular expression idiom.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这个正则表达式将`<strong>...</strong>`HTML标签之间的文本保存到`$1`特殊变量中。这个单行代码中最棘手的部分是`([^<]*)`，它匹配直到`<`字符之前的所有内容。这是一个正则表达式惯用法。
- en: For example, if the HTML you’re trying to match is `<strong>hello</strong>`,
    then this regular expression captures `hello` in the `$1` variable. However, if
    the HTML you’re trying to match is `<strong><em>hello</em> </strong>`, then this
    regular expression doesn’t match at all because there is another HTML tag between
    `<strong>` and `</strong>`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你试图匹配的HTML是`<strong>hello</strong>`，那么这个正则表达式会在`$1`变量中捕获`hello`。然而，如果你试图匹配的HTML是`<strong><em>hello</em>
    </strong>`，那么这个正则表达式就不会匹配，因为在`<strong>`和`</strong>`之间还有另一个HTML标签。
- en: 'To extract everything between two HTML tags, including other HTML tags, you
    can write:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要提取两个HTML标签之间的所有内容，包括其他HTML标签，你可以写：
- en: '[PRE31]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This regular expression saves everything between `<strong>...</strong>` in the
    `$1` variable. For example, if the HTML is `<strong><em>hello</em> </strong>`,
    this regular expression sets `$1` to `<em>hello</em>`. The `(.*?)` part of the
    regular expression matches everything between the two nearest `<strong>` and `</strong>`
    tags. The question mark `?` in this regular expression controls its greediness.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这个正则表达式将`<strong>...</strong>`之间的所有内容保存到`$1`变量中。例如，如果HTML是`<strong><em>hello</em>
    </strong>`，那么这个正则表达式将`$1`设置为`<em>hello</em>`。正则表达式中的`(.*?)`部分匹配两个最接近的`<strong>`和`</strong>`标签之间的所有内容。正则表达式中的问号`?`控制其贪婪度。
- en: 'If you want to be a good citizen and use `HTML::TreeBuilder`, then a Perl program
    that does the same thing would look like this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想成为一个好公民并使用`HTML::TreeBuilder`，那么一个执行相同操作的Perl程序应该是这样的：
- en: '[PRE32]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Here, I created a new `HTML::TreeBuilder` instance from the given string; then
    I found the `<strong>` tag and dumped all the child elements of the `<strong>`
    tag as HTML. As you can see, although writing a program like this isn’t suitable
    as a one-liner, it’s a much more robust solution.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我从给定的字符串创建了一个新的`HTML::TreeBuilder`实例；然后我找到了`<strong>`标签，并将所有`<strong>`标签的子元素以HTML格式输出。正如你所看到的，虽然像这样的程序不适合作为单行代码来写，但它是一个更加健壮的解决方案。
- en: 8.11 Replace all <b> tags with <strong>
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.11 将所有`<b>`标签替换为`<strong>`
- en: '[PRE33]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Here, I assume that the HTML is in the variable `$html`. The expression `<(/)?b>`
    matches the opening and closing `<b>` tags, captures the optional closing tag
    slash in the group `$1`, and then replaces the matched tag with either `<strong>`
    or `</strong>`, depending on whether it finds an opening or closing tag.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我假设HTML内容存储在变量`$html`中。表达式`<(/)?b>`匹配开闭的`<b>`标签，捕获可选的闭合标签斜杠到组`$1`，然后根据是否找到开闭标签，将匹配到的标签替换为`<strong>`或`</strong>`。
- en: 'Remember that the correct way to do this is to use `HTML::TreeBuilder` and
    write a proper program. You should only use this regular expression for a quick
    hack. Here’s what a program that uses `HTML::TreeBuilder` looks like:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，正确的做法是使用`HTML::TreeBuilder`并编写一个合适的程序。你应该仅在快速解决问题时使用这个正则表达式。下面是一个使用`HTML::TreeBuilder`的程序示例：
- en: '[PRE34]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Here, I’ve created the `HTML::TreeBuilder` object from the given string; next,
    I found all the `<b>` tags, stored them in the `@bs` array, and then looped over
    all `@bs` and changed their tag name to `<strong>`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我从给定的字符串中创建了`HTML::TreeBuilder`对象；接下来，我找到了所有的`<b>`标签，并将它们存储在`@bs`数组中，然后遍历`@bs`并将它们的标签名称更改为`<strong>`。
- en: 8.12 Extract all matches from a regular expression
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.12 从正则表达式中提取所有匹配项
- en: '[PRE35]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Here, the regular expression match is evaluated in the list context, which makes
    it return all matches. The matches are put in the `@matches` variable.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，正则表达式匹配的结果在列表上下文中进行评估，这使得它返回所有匹配项。匹配项被放入`@matches`变量中。
- en: 'For example, the following regular expression extracts all integers from a
    string:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下面的正则表达式从字符串中提取所有整数：
- en: '[PRE36]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'After executing this code, `@nums` contains `(10, 25, 30)`. You can also use
    parentheses to capture only part of the string. For example, here’s how to capture
    only the values from a line containing lots of key-value pairs (such as `key=value`),
    separated by semicolons:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 执行这段代码后，`@nums`包含了`(10, 25, 30)`。你还可以使用括号仅捕获字符串的一部分。例如，下面是如何捕获只包含多个键值对（如`key=value`）并用分号分隔的行中的值：
- en: '[PRE37]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This regular expression first matches the keys through `[^=]+`, then it matches
    the `=` character that separates the keys and values, and then it matches the
    values `([^;]+)`. As you can see, the value part of the regular expression is
    wrapped in parentheses so the values are captured.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个正则表达式首先通过`[^=]+`匹配键，然后匹配分隔键和值的`=`字符，接着匹配值部分`([^;]+)`。如你所见，正则表达式中的值部分被括在了括号中，因此这些值会被捕获。
- en: 'Here’s an example. Say you have a file with the following contents:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个示例。假设你有一个文件，内容如下：
- en: '[PRE38]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'and you write this one-liner:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你写下了这个一行代码：
- en: '[PRE39]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Running it outputs the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 运行后输出如下：
- en: '[PRE40]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: These are the values for the `access`, `users`, and `languages` keys!
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是`access`、`users`和`languages`键的值！
