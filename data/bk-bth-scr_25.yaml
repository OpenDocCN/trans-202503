- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 22 WRITING REPORTS
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 22 撰写报告
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: Even if squinting hard enough to provoke an aneurysm, no one will ever mistake
    Batch for Power BI or other similar report writers, but when you want a simple
    formatted text report, Batch is one tool that’s up to the challenge.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 即使用力眯眼到差点得脑动脉瘤，也没有人会把批处理程序误认为是Power BI或其他类似的报告生成工具，但当你需要一个简单的格式化文本报告时，批处理程序是一个可以胜任的工具。
- en: In this chapter, we’ll build a report with real-world data from a pipe-delimited
    input file. With two pseudo-environment variables from the previous chapter, you’ll
    learn how to build a title with the current date and time, and formatted column
    headers. You’ll also create detail records by reading the input file with a certain
    command you learned about in [Part II](part2.xhtml). I’ll share a few techniques
    for right- and left-justifying strings, integers, and floating-point data into
    nicely aligned columns when viewed in a fixed-width or monospace font. Finally,
    you’ll learn how to tally the data to create trailer records with total and average
    quantities.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个基于管道分隔输入文件的报告。通过上一章的两个伪环境变量，你将学习如何构建一个包含当前日期和时间的标题，以及格式化的列标题。你还将通过读取输入文件并使用在[第二部分](part2.xhtml)中学到的某个命令来创建详细记录。我将分享一些技术，用于将字符串、整数和浮动点数据右对齐或左对齐，并在固定宽度或等宽字体中整齐排列列。最后，你将学习如何对数据进行汇总，创建带有总量和平均量的尾部记录。
- en: And if you are looking to generate a pie graph, histogram, or scatter- plot
    ... there are other tools.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想生成饼图、直方图或散点图……还有其他工具可以选择。
- en: The Data and Report
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据和报告
- en: For this exercise, we’ll start with a simple pipe-delimited file containing
    three important health measures for a short list of selected wealthy countries
    from the year 2019\. The first token in each record is the name of a country,
    followed by the percentage of the country’s gross domestic product spent on healthcare.
    This is a great measure of how much money a country spends on healthcare out of
    its overall wealth. The third token is life expectancy, and the final is the number
    of avoidable deaths for every 100,000 residents. Avoidable deaths are defined
    as deaths resulting from a lack of access to effective and quality healthcare
    for conditions such as diabetes, hypertension, and certain cancers. These last
    two measures are very good indicators of the effectiveness of a healthcare system.
    The *HealthStats.dat* file can hold any number of records, but for brevity’s sake,
    I’m including only seven countries and their statistics, as shown in [Listing
    22-1](#Lis22-1).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本次练习中，我们将从一个简单的管道分隔文件开始，文件包含了2019年少数精选富裕国家的三项重要健康指标。每条记录的第一个标记是国家名称，后面跟着该国用于医疗保健的国内生产总值百分比。这是衡量一个国家在其总体财富中用于医疗保健开支的一个很好的指标。第三个标记是预期寿命，最后一个是每10万人中的可避免死亡人数。可避免死亡是指由于缺乏有效且高质量医疗保健而导致的死亡，例如糖尿病、高血压和某些癌症等疾病。这两个指标是衡量医疗系统效果的非常好的标志。*HealthStats.dat*
    文件可以包含任意数量的记录，但为了简便起见，我这里只包含了七个国家及其统计数据，如[清单 22-1](#Lis22-1)所示。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 22-1: The pipe-delimited HealthStats.dat file containing health statistics'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 22-1：包含健康统计数据的管道分隔HealthStats.dat文件
- en: Notice that the first two numeric tokens are floating-point values, but someone
    (me) didn’t include the .0 for a couple of entries’ values. We’ll have to take
    that into account in the code. (The data in this file is from the Commonwealth
    Fund, used with permission, at *[https://<wbr>www<wbr>.commonwealthfund<wbr>.org<wbr>/publications<wbr>/issue<wbr>-briefs<wbr>/2020<wbr>/jan<wbr>/us<wbr>-health<wbr>-care<wbr>-global<wbr>-perspective<wbr>-2019](https://www.commonwealthfund.org/publications/issue-briefs/2020/jan/us-health-care-global-perspective-2019)*.)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意前两个数字标记是浮动点值，但有人（是我）没有为某些条目的值包含.0。我们需要在代码中考虑到这一点。（该文件中的数据来自“英联邦基金会”，并经许可使用，网址是*
    [https://www.commonwealthfund.org/publications/issue-briefs/2020/jan/us-health-care-global-perspective-2019](https://www.commonwealthfund.org/publications/issue-briefs/2020/jan/us-health-care-global-perspective-2019)
    *。）
- en: It’s wonderful data, but pipe-delimited files are not known for their readability.
    Our task is to convert the data in [Listing 22-1](#Lis22-1) into the far more
    readable and descriptive report shown in [Listing 22-2](#Lis22-2).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是很棒的数据，但管道分隔文件的可读性并不出名。我们的任务是将[清单 22-1](#Lis22-1)中的数据转换成[清单 22-2](#Lis22-2)中更具可读性和描述性的报告。
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 22-2: The HealthRpt.txt bat file–generated report'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 22-2：由HealthRpt.txt批处理文件生成的报告
- en: At worst, you might call this report functional. It doesn’t have the different
    font sizes, boxes, highlighting, automatic centering, or other features you might
    find in an HTML-created report viewed in a browser, but it’s useful, informative,
    and well-formatted.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最多你也只能称这个报告为功能性报告。它没有你在浏览器中查看的HTML报告那样的不同字体大小、框架、突出显示、自动居中或其他特性，但它是有用的、信息丰富且格式良好的。
- en: 'A report such as this has three distinct parts: introduction, body, and summary,
    consisting of header, detail, and trailer records, respectively. I’ll share the
    entire bat file to build this report, but I’ll break it down into those three
    parts. At the conclusion of this chapter, you’ll be able to build your own data
    files and create your own reports.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这样一份报告有三个不同的部分：介绍、正文和总结，分别由头记录、详细记录和尾记录组成。我会分享完整的批处理文件来构建这个报告，但我会将其分解成这三部分。在本章结束时，你将能够构建自己的数据文件并生成自己的报告。
- en: Header Records
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 头记录
- en: 'The obvious place to start is with the introduction, which consists of the
    title and column headers. Here’s the first part of the bat file that creates the
    report:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 开始的明显位置是介绍部分，包括标题和列头。以下是创建报告的批处理文件的第一部分：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After the opening setlocal command, we define the rpt variable ❶ with the path
    and name of the report file. I’m keeping the variable name succinct because we’ll
    be using it every time we write a record to the report, which will be often. Next,
    we initialize four variables ❷ to 0. The cnt variable keeps a count of the number
    of detail records, and the other variables are totals for each of the three quantities
    in the report, which we’ll use in the next two sections of the bat file.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在打开的`setlocal`命令后，我们定义了rpt变量 ❶，其包含报告文件的路径和名称。我保持变量名简洁，因为我们每次写入报告记录时都会使用它，这将是非常频繁的。接下来，我们将四个变量
    ❷ 初始化为0。cnt变量用于记录详细记录的数量，其他变量则是报告中三个数量的总和，我们将在批处理文件的后两部分使用它们。
- en: 'The introduction is actually composed of two parts: the title ❸ and the column
    headers ❹. In this particular report, they account for seven header records overall,
    and we’ll create them with seven echo commands redirected to the report file.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍部分实际上由两部分组成：标题 ❸ 和列头 ❹。在这个特定报告中，它们总共占用了七个头记录，我们将通过七个`echo`命令将它们重定向到报告文件中。
- en: We start the report by redirecting the beginning of the title to the file defined
    by the rpt variable ❸; a single redirection character is used for only this command,
    so if an existing file is present, we overwrite it. We next append the remainder
    of the title, followed by the date and time and a blank line with the echo. command.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将标题的开头重定向到由rpt变量定义的文件 ❸ 来启动报告；仅对这条命令使用了一个重定向符号，所以如果文件已存在，将会覆盖它。接着，我们将标题的其余部分附加到文件中，后面跟上日期和时间，并通过`echo`命令输出一个空行。
- en: We’re populating the date and time in the third record from the aptly named
    date and time variables, respectively. These pseudo-environment variables introduced
    in [Chapter 21](chapter21.xhtml) offer an easy way of documenting when the report
    was generated. Notice I’m extracting portions of each value to remove the day
    of the week from the date and the seconds from the time. Sometimes there’s such
    a thing as too much data.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第三个记录中填充日期和时间，分别使用恰如其名的日期和时间变量。这些伪环境变量在[第21章](chapter21.xhtml)中介绍，它们提供了一种简单的方法来记录报告生成的时间。注意，我从每个值中提取部分信息，以去除日期中的星期几和时间中的秒数。有时候数据过多也是一种负担。
- en: The final three echo commands are writing out the column headers ❹. Most of
    this data is hardcoded, but notice that I’m escaping the percent sign with another
    percent so the interpreter doesn’t think that it’s the start of a very awkward
    variable name (see [Chapter 14](chapter14.xhtml)).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后三个`echo`命令用于输出列头 ❹。大部分数据是硬编码的，但注意我用另一个百分号转义了百分号符号，以防解释器认为它是一个非常尴尬的变量名的开始（参见[第14章](chapter14.xhtml)）。
- en: Some of the data in the title and the column headers appear to be off-kilter,
    but this is just a result of variable resolution and escaping. The best way to
    line up everything is to type the title, headers, and a sample data line into
    a text file using a fixed-width font and line up everything as desired—that is,
    type up a sample of the report in [Listing 22-2](#Lis22-2). When satisfied with
    the alignment, copy the resulting headings into the bat file, preceding each with
    the redirection and an echo command. Then add any escape characters and replace
    any temporary text such as the sample date and time with the variables that will
    take their place.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 标题和列头中的一些数据似乎没有对齐，但这只是由于变量解析和转义的结果。将所有内容对齐的最佳方法是使用固定宽度字体将标题、列头和一行示例数据输入到文本文件中，并按所需对齐所有内容——也就是，输入[清单22-2](#Lis22-2)中的报告示例。当对对齐结果满意后，将生成的标题复制到bat文件中，并在每个标题前加上重定向和echo命令。然后添加任何转义字符，并将任何临时文本（如示例日期和时间）替换为将要取代它们的变量。
- en: Throughout this last step, let the data shift; everything will realign in the
    final output. For instance, the record with the date and time ❸ appears to be
    shifted to the right, but that’s only because the variable name with the substringing
    syntax and the encasing percent signs is longer than the time it will eventually
    display. Likewise, the extra percent sign ❹ skews the rest of the data in the
    first column header record. Life and Avoidable don’t appear to be lined up with
    the next two lines, but after the interpreter consolidates the two percent signs
    into one, everything will again realign.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这最后一步中，允许数据发生偏移；所有内容将在最终输出中重新对齐。例如，日期和时间记录❸似乎被向右偏移，但那只是因为带有子字符串语法和包围百分号的变量名比最终显示的时间要长。同样，额外的百分号❹会使第一列头部记录中的其余数据出现偏差。Life和Avoidable似乎没有与接下来的两行对齐，但当解释器将两个百分号合并为一个时，所有内容将再次对齐。
- en: Detail Records
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 详细记录
- en: 'There’s much to unpack, but the following code writes one formatted detail
    record for each record in the input file and keeps track of the record count and
    the running totals of the three fields:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多内容需要解释，但以下代码会为输入文件中的每一条记录写入一个格式化的详细记录，并跟踪记录数以及三个字段的累计总和：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The for /F command ❶ introduced in [Chapter 19](chapter19.xhtml) is the obvious
    solution to pull out the four tokens (tokens=1-4) from each record of the pipe-delimited
    data file (delims=|). This logic assigns the country from the data file to the
    for variable %%a, which implies that the percent of GDP is %%b, the life expectancy
    is %%c, and the number of avoidable deaths is %%d.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第19章](chapter19.xhtml)中介绍的for /F命令❶是提取管道分隔数据文件（delims=|）中每条记录的四个标记（tokens=1-4）的明显解决方案。这个逻辑将数据文件中的国家分配给for变量%%a，这意味着GDP百分比是%%b，预期寿命是%%c，避免死亡人数是%%d。
- en: Aligning Columns with Justified Data
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用对齐数据的方式对齐列
- en: I’m padding the ctry variable ❷, which contains string data, with a number of
    spaces and ultimately the text eol that doesn’t appear in the report. To make
    the columns line up, I’ll make this a left-justified field and ultimately substring
    out just its first 15 bytes, but for this to work, the field must be at least
    15 bytes in length—hence, the space padding.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在填充ctry变量❷，它包含字符串数据，填充一些空格，并最终加上不会出现在报告中的文本eol。为了让列对齐，我将使这个字段左对齐，并最终截取它的前15个字节，但为了让这个方法奏效，字段的长度必须至少是15个字节——因此，使用了空格填充。
- en: The eol tag at the end is simply there to demonstrate to the reader that the
    field has trailing spaces. I’ll strip it off before writing the record, so any
    text would work, but it does stand for *end of line*. (If you are really proud
    of the report, you can sign your work by entering your name instead.) Without
    some sort of a marker, a future coder might someday remove the trailing spaces,
    especially if they’re more familiar with languages that ignore trailing spaces,
    which is almost any language not named Batch.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 结尾的eol标签仅仅是为了向读者展示该字段有尾随空格。在写入记录之前我会去掉它，因此任何文本都可以，但它代表了*行尾*。（如果你对报告特别自豪，可以通过输入你的名字来标记你的作品。）如果没有某种标记，未来的开发者可能会删除尾随空格，尤其是在他们更熟悉忽略尾随空格的编程语言时，而几乎所有语言都不包括Batch语言。
- en: WARNING
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '*In [Chapter 2](chapter2.xhtml), I mentioned that you can place an ampersand,
    or the command separator, after trailing spaces, but due to a frustrating batveat,
    that doesn’t work in a code block, or at least not the same way. The interpreter
    balks when you use the ampersand in a code block without an actual command after
    it, which means you could replace eol with &rem. In what’s even more of an oddity,
    if escaped, the ampersand works in a code block without a second command, so you
    can also replace eol with ^&.*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*在[第2章](chapter2.xhtml)中，我提到过，你可以在后导空格后放置一个和符号（&）或命令分隔符，但由于一个令人沮丧的限制，这在代码块中不起作用，或者至少不像在其他地方那样工作。当你在代码块中使用和符号而没有后续命令时，解释器会停止工作，这意味着你可以用&rem替代eol。在更奇怪的情况下，如果进行了转义，和符号可以在没有第二个命令的代码块中工作，所以你也可以用^&替代eol。*'
- en: Contrast the country variable with the variable corresponding to the last column
    detailing avoidable deaths per 100,000 people. Instead of trailing spaces, I’m
    adding 15 *leading* spaces to deaths ❺. This is an integer and unlike the string
    data items that we should line up by the first character, we should line up avoidable
    deaths by its final character, or the ones digit.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 将国家变量与对应于最后一列的变量进行对比，后者详细描述了每10万人中可避免的死亡人数。与其使用后导空格，我在死亡人数 ❺ 后添加了15个*前导*空格。这个值是整数，并且与我们应该按第一个字符对齐的字符串数据项不同，我们应该按可避免死亡人数的最后一个字符或个位数对齐。
- en: To right-justify a number, I do the opposite of what I did for a string. I *prepend*
    the value with a number of spaces so that I can later extract the desired text
    from the end of the field. To maintain the spaces needed for the report, I’ll
    extract 15 total bytes from this field, so if this field isn’t at least 15 bytes
    long, the resulting data will be askew.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了右对齐一个数字，我做的是与处理字符串时相反的操作。我*在前面加上*一些空格，以便后来能从字段的末尾提取所需的文本。为了保持报告所需的空格数量，我将从这个字段提取15个字节，所以如果这个字段的长度不足15个字节，生成的数据将会偏斜。
- en: Working with Floating-Point Data
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 处理浮点数据
- en: Decimal or floating-point values represent the two middle columns, and since
    we’ll be treating both the same way, I’ll focus on just one. The data in the input
    file expresses life expectancy ❹ as a decimal with a tenths place for all values
    except for Canada, which happens to be an integer, but we want a decimal place
    for each value in the report, and we want to line up the numbers on that decimal
    place.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 十进制或浮点值代表中间的两列，因为我们将以相同的方式处理它们，所以我只关注其中一列。输入文件中的数据表示预期寿命 ❹ 以十进制形式，所有值都包含十分位，除了加拿大，它恰好是一个整数，但我们希望报告中的每个值都有小数位，并且我们希望这些数字的小数点对齐。
- en: I’m resolving life expectancy from the third token, %%c, of the outer for command
    ❶ and using it as the input string to one of the inner for commands ❹. Delimiting
    on the dot breaks the value up into the whole number before the decimal and the
    decimal part after the decimal point. I’m assigning the latter value to the dcml
    or decimal variable while appending 0. Batch syntax can be so esoteric it’s easy
    to miss, but in the four bytes %%n0, the first three are the second token of the
    inner for loop, and the last is a hardcoded number.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在从外层`for`命令的第三个标记%%c ❶ 中解析预期寿命，并将其作为输入字符串传递给一个内层`for`命令 ❹。通过点号分隔后，值被分为小数点前的整数部分和小数点后的十进制部分。我将后者赋值给dcml或十进制变量，同时附加0。批处理语法可以非常深奥，容易忽视，但在四个字节%%n0中，前三个是内层`for`循环的第二个标记，最后一个是硬编码的数字。
- en: 'In the second and final command inside the code block of the inner for command,
    I’m extracting the first byte of the decimal: !dcml:~0,1!. For most countries,
    we append 0 to the decimal value and immediately strip it off. That seems pointless
    until Canada is considered. Since its life expectancy is 82 with no decimal value
    present, the 0 tacked onto the end becomes the sole decimal byte. Finally, I string
    together the whole number, %%m, a dot, and the first digit of the decimal value.
    Lest we forget, this must all follow a number of leading spaces for right-justification.
    If we had wanted to format numbers with two decimal points, such as dollar amounts,
    we could have appended two zeros and extracted the first two bytes.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在内层`for`命令的代码块中的第二个也是最后一个命令里，我提取了十进制的第一个字节：!dcml:~0,1!。对于大多数国家，我们将0附加到十进制值后面，然后立即将其去掉。这似乎毫无意义，直到考虑到加拿大。由于加拿大的预期寿命为82且没有十进制值，所以附加到末尾的0成为唯一的十进制字节。最后，我将整个数字%%m、一个点和十进制值的第一个数字拼接在一起。为了避免遗忘，所有这些都必须跟随一些前导空格以进行右对齐。如果我们想格式化带有两位小数的数字，比如美元金额，我们本可以附加两个零并提取前两个字节。
- en: '(In this example, %%n0 represents a for variable followed by the hardcoded
    0, but changing just one byte produces something quite different: %~n0. The n
    now turns into a modifier for the hidden parameter, %~0. Hence, %~n0 resolves
    to the extensionless name the bat file. Oh, the vagaries of Batch.)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: （在这个示例中，%%n0代表一个变量后跟硬编码的0，但只改变一个字节会产生完全不同的结果：%~n0。此时，n变成了隐藏参数%~0的修饰符。因此，%~n0解析为bat文件的无扩展名的名称。哦，批处理的奇妙之处。）
- en: The logic for the percentage of each country’s GDP spent on healthcare ❸ is
    nearly identical to the logic for life expectancy. Because of how the columns
    line up, the only difference is the number of leading spaces we attach to each
    value.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 每个国家GDP中用于医疗保健的百分比的逻辑❸几乎与预期寿命的逻辑相同。由于列的对齐方式，唯一的区别是我们为每个值附加的前导空格数量。
- en: Writing a Detail Record
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写详细记录
- en: These four variables culminate in the line that actually writes the formatted
    text string to the report file ❻. This is a redirection of an echo command similar
    to what we’ve seen earlier in this chapter, resolving the four variables and extracting
    portions via substringing, each separated by a space.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这四个变量最终会在实际将格式化文本字符串写入报告文件的那一行中合并❻。这是类似于我们在本章前面看到的回显命令重定向，通过解析这四个变量并通过子字符串提取每个部分，每个部分之间用空格分隔。
- en: To left-justify the ctry variable, I use an offset of 0 and length of 15, thus
    extracting the first 15 bytes and dropping everything else (including the eol
    marker). The next three values, perGDP, lifeExp, and deaths, are to be right-justified
    numbers, so I substring with negative offsets to grab the last 5, 14, and 15 bytes,
    respectively.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了左对齐ctry变量，我使用了偏移量0和长度15，从而提取前15个字节并丢弃其他所有内容（包括行尾标记）。接下来的三个值，perGDP、lifeExp和deaths，是右对齐的数字，因此我使用负偏移量来获取最后的5、14和15个字节。
- en: The various lengths are dependent on the layout. The best way to format the
    detail record and determine the proper layout is to type up the same type of sample
    line I suggested for the header records. Figure out the lengths of each justified
    field, experiment, and expect the need for some tweaking. Just be careful to make
    sure there are at least *n* bytes in a string if you plan to extract *n* bytes
    from it. Put more plainly, the country is 15 bytes, so make sure you append 15
    spaces to ensure perfect alignment.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 各种长度依赖于布局。格式化详细记录并确定合适布局的最佳方法是输入我为头部记录建议的相同类型的示例行。找出每个对齐字段的长度，进行实验，并预期可能需要一些调整。只需小心确保如果你打算提取*n*字节，那么字符串中至少有*n*字节。更直白地说，国家字段是15个字节，因此确保添加15个空格以确保完美对齐。
- en: Working with Counters and Totals
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用计数器和总和
- en: The last four lines of the code block ❼ all perform some arithmetic with the
    augmented assignment operators from [Chapter 6](chapter6.xhtml). The first is
    a simple counter, cnt, keeping track of the number of entries. The last three,
    totPerGDP, totLifeExp, and totDeaths, are cumulative totals of the three quantities
    in the report. I’ve named these variable names with tot, for *total*, prepending
    a familiar variable name.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块的最后四行❼都使用[第6章](chapter6.xhtml)中的增量赋值运算符进行一些算术运算。第一个是简单的计数器cnt，用来追踪条目的数量。最后三个，totPerGDP、totLifeExp和totDeaths，是报告中三个量的累计总和。我为这些变量命名时使用了tot，代表*总计*，并在常见的变量名之前加上了这一前缀。
- en: The logic is straightforwardly incrementing the variable for total deaths by
    the number of deaths in each record. The other two are decimals, and as you learned
    in [Chapter 6](chapter6.xhtml), floating-point arithmetic requires a little ingenuity.
    The text replacement syntax removes the decimal point before adding each to the
    total—for example, !perGDP:.=!. This effectively multiples the total by 10, so
    we’ll need to address this discrepancy when calculating the averages and writing
    out the trailer records.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑是通过每条记录中的死亡人数来递增死亡总数的变量。其他两个是小数，如你在[第6章](chapter6.xhtml)中学到的，浮点数运算需要一些技巧。文本替换语法会在将每个值加到总数之前去掉小数点——例如，!perGDP:.=!。这实际上是将总数乘以10，因此我们在计算平均值并写出尾部记录时需要解决这个不一致性。
- en: I didn’t do it in this report, but you may want to create a page break after
    a certain number of detail records. Typically, you might want a page number at
    the bottom followed by a few blank lines before reproducing the headers followed
    by another page of detail lines. To do this after every 25 detail lines, interrogate
    cnt %% 25 at the end of the loop. If equal to 0, the record count is a multiple
    of 25, so you can initiate a page break. You can also create another counter for
    the page number and write it as part of the page trailer information and move
    the header logic to a callable routine so that you can invoke it one to many times.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这个报告中没有做，但是你可能想在一定数量的详细记录后插入分页符。通常，你可能希望在底部显示页码，然后是几行空白，之后再复制表头，接着显示另一页的详细记录。要在每25行详细记录后进行分页检查，可以在循环结束时检查cnt
    %% 25。如果等于0，表示记录数是25的倍数，那么你就可以插入分页符。你还可以创建另一个计数器用于页码，并将其作为页面尾部信息的一部分进行写入，同时将表头逻辑移到一个可调用的程序中，这样你就可以多次调用它。
- en: Trailer Records
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结束记录
- en: 'The third and final section of the bat file finds and formats the averages
    before writing them to the report:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: bat文件的第三个也是最后一部分查找并格式化平均值，然后将其写入报告：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To find the averages, we could simply divide the totals by the number of detail
    records, but since Batch truncates the decimal part of the solution, everything
    is in effect rounded down. To compensate, each set /A command ❶ first multiplies
    the value by 10 and divides by cnt. Adding 5 to this number corrects for the rounding
    so that dividing by 10 produces the rounded average. For example, 77.4 deaths
    should round down: 77.4 + 0.5 = 77.9, which is 77 when the decimal is truncated.
    Then 77.6 should round up: 77.6 + 0.5 = 78.1, which becomes 78\. Because we can’t
    add the decimal 0.5, we are instead multiplying by 10, adding 5, and dividing
    by 10.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算平均值，我们可以简单地将总计除以详细记录的数量，但由于Batch会截断解决方案的小数部分，实际上所有的值都会被向下舍入。为了弥补这一点，每个set
    /A命令❶首先将值乘以10再除以cnt。将5加到这个数值上可以修正舍入，使得除以10时可以得到正确的平均值。例如，77.4的死亡人数应该向下舍入：77.4
    + 0.5 = 77.9，在截断小数后变为77。而77.6应该向上舍入：77.6 + 0.5 = 78.1，最终变为78。因为我们不能直接加上小数0.5，所以我们通过先乘以10，加5，再除以10来实现。
- en: The next section of code ❷ appends leading spaces to each of the three averages
    in anticipation of the substringing for data alignment. The final section of the
    code ❸ writes the trailer records to the report with two echo commands. The first
    writes hardcoded dashes identical to a header record. The second command replaces
    the name of a country with the hardcoded text, Averages, and the remainder of
    the command displays the three averages with such dense substringing that I’ve
    had to continue the command on the next line.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的下一个部分❷为每个平均值添加前导空格，为数据对齐的子字符串做准备。代码的最后一部分❸通过两个echo命令将尾部记录写入报告。第一个命令写入与表头记录相同的硬编码破折号。第二个命令将国家名称替换为硬编码的文本“Averages”，其余命令显示三个平均值，经过如此密集的子字符串处理，以至于我不得不在下一行继续命令。
- en: I’m extracting the last 15 bytes from the avgDeaths variable, but since the
    other two totals are actually 10 times greater than their actual values, it follows
    that their corresponding averages, avePerGDP and aveLifeExp, are also increased
    by a factor of 10\. We can’t correct this by dividing these by 10, because that
    would lose the decimal parts. However, by inserting a decimal point into the number
    as it’s being written, we are presenting the number as it should be, effectively
    dividing by 10 while also showing the decimal part, which is a win-win. Notice
    that !avePerGDP:~-5,-1!.!avePerGDP:~-1! resolves to the four bytes prior to the
    last byte, a hardcoded dot, and that last byte.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在从avgDeaths变量中提取最后15个字节，但由于其他两个总计值实际上是其实际值的10倍，因此它们对应的平均值avePerGDP和aveLifeExp也增加了10倍。我们不能通过除以10来纠正这个问题，因为那样会丢失小数部分。然而，通过在写入数字时插入一个小数点，我们能够正确显示数字，实际上是通过除以10同时保留小数部分，这样两全其美。注意，!avePerGDP:~-5,-1!.!avePerGDP:~-1!解析为倒数第二个字节之前的四个字节，一个硬编码的小数点和最后一个字节。
- en: Other datasets may lend themselves to simply displaying totals instead of averages,
    meaning that the floating-point arithmetic will be lessened or nonexistent. Even
    with this example using averages, we were able to create a fairly impressive report
    without a great deal of code.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 其他数据集可能适合仅显示总计而非平均值，这意味着浮动点算术运算将减少或消失。即使在这个例子中使用了平均值，我们也能够创建一个相当令人印象深刻的报告，而不需要大量的代码。
- en: Summary
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, I stepped through the three sections of a typical text report
    formatted with Batch. If you were expecting a nifty routine to automatically line
    up columns with ease, I’m sure I’ve disappointed you, but with a little attention
    to the details, you can create a quality report. You learned how to build a title,
    headers, any number of detail records, and a trailer record with totals and averages.
    Along the way, I demonstrated techniques for aligning columns with justified data
    items and tips for handling floating-point data. This isn’t a heavy-duty utility,
    and I’m sure that no one is making a living solely producing Batch reports, but
    when a simple text report is needed, a compiled program is not.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我介绍了使用Batch格式化的典型文本报告的三个部分。如果你期待一个能轻松自动对齐列的巧妙程序，我敢肯定我让你失望了，但只要稍微注意细节，你就能创建出高质量的报告。你学会了如何构建标题、头部、任意数量的详细记录，以及包含总数和平均值的尾部记录。在此过程中，我展示了如何对齐列并处理数据项对齐的技巧，还分享了处理浮动小数点数据的建议。这并不是一个重型工具，我相信没有人仅仅靠制作Batch报告谋生，但当需要一个简单的文本报告时，编译程序就显得不必要了。
- en: 'The next chapter changes gears and delves into a subject that’s dear to my
    heart: recursion. You''ll learn how to build Batch code that calls itself, along
    with some interesting applications.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将转变话题，深入探讨一个对我来说非常重要的主题：递归。你将学习如何编写调用自身的Batch代码，并探索一些有趣的应用。
