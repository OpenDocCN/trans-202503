- en: '**5 Ledger Nano S, 0xF00DBABE**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**5 Ledger Nano S, 0xF00DBABE**'
- en: The Ledger Nano S is an electronic wallet for cryptocurrencies, powered by an
    STM32F042 microcontroller and an ST31H320 secure element. Holding one of the buttons
    at startup triggers a bootloader implemented in the STM32F0’s flash memory, speaking
    the APDU protocol over USB. Most of the STM32 firmware is open source, while the
    ST31 runs applets inside of a closed source supervisor.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Ledger Nano S 是一款电子加密货币钱包，由 STM32F042 微控制器和 ST31H320 安全元素提供支持。在启动时按住一个按钮，会触发
    STM32F0 闪存中的引导加载程序，通过 USB 采用 APDU 协议进行通信。大部分 STM32 固件是开源的，而 ST31 在封闭源代码的监督程序内运行
    applets。
- en: In this chapter we’ll discuss a vulnerability, first published in Roth (2018),
    in which the dual mapping of flash memory allows a sanity check to be bypassed
    in writing firmware, so that the bootloader will mistakenly believe the code signature
    has already been validated.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论一个漏洞，最早由 Roth (2018) 发布，该漏洞通过双重映射闪存使得在写入固件时可以绕过一致性检查，从而让引导加载程序错误地认为代码签名已经被验证。
- en: We will also briefly cover a technique from Rashid (2018), in which the device’s
    cryptographic firmware attestation can be tricked. By replacing compiler intrinsic
    functions with branches back to their bootloader equivalents, we can hollow out
    some space for a patch. This allows the STM32 to lie to the ST31 about its code,
    sneaking small patches past the validation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将简要介绍 Rashid (2018) 中的一个技术，利用该技术可以欺骗设备的加密固件认证。通过用跳转回引导加载程序等效功能的分支替换编译器内建函数，我们可以为补丁腾出一些空间。这使得
    STM32 能够向 ST31 撒谎其代码，悄悄通过验证进行小补丁。
- en: The Ledger Nano S divides its code between an STM32F042 and an ST31H320\. Instead
    of using sticker seals to protect against tampering, the device features a case
    that is easy to open and software attestation. The ST31 smartcard verifies the
    firmware of the STM32 by reading it with strict timing requirements.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Ledger Nano S 将其代码分布在 STM32F042 和 ST31H320 之间。该设备并没有使用贴纸封条来防止篡改，而是采用了一个易于打开的外壳和软件认证。ST31
    智能卡通过严格的时序要求读取 STM32 的固件来验证其合法性。
- en: From an attacker’s perspective, a successful attack requires both flashing new
    code into the STM32 chip and faking the attestation so that the host GUI software
    believes the firmware to be genuine. We’ll cover tricks for both, but first let’s
    take a brief tour of the platform so that we know what we’re working with.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 从攻击者的角度来看，一次成功的攻击需要同时将新代码写入 STM32 芯片，并伪造证明过程，使得主机 GUI 软件相信固件是正版的。我们将涵盖两者的技巧，但首先让我们简要了解一下平台，以便知道我们正在使用的是什么。
- en: '![Image](../images/f0054-01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0054-01.jpg)'
- en: 'Figure 5.1: Disassembled Ledger Nano S'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1：反汇编的 Ledger Nano S
- en: '![Image](../images/f0055-01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0055-01.jpg)'
- en: 'Figure 5.2: STM32F042 Memory Map'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2：STM32F042 内存映射
- en: While the ST31 firmware is held secret, the STM32 firmware is open source, with
    documentation and a development kit. To prevent malicious patching, the host software
    validates the ST31’s attestation of the STM32 firmware, and to prevent malicious
    applications, a pin number is required to approve applications and signing keys
    that might be flashed into the unit.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 ST31 固件保持机密，但 STM32 固件是开源的，包含文档和开发套件。为了防止恶意修补，主机软件会验证 ST31 对 STM32 固件的证明，且为了防止恶意应用程序，需要输入密码来批准可能被闪存写入设备的应用程序和签名密钥。
- en: Third party applications are written in C, and they run in a protected mode
    of the ST31\. Most examples are cryptocurrency wallet applications, but a few
    games exist, such as a port of *Snake* by Parker Hoyes.^([1](footnotes.xhtml#ch5fn1))
    Applet firmware is verified by the ST31 at installation time, and the GUI must
    be invoked to run applets signed by an untrusted authority. The STM32 firmware
    is now verified, but it was not in early versions of the device.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方应用程序采用 C 语言编写，并在 ST31 的受保护模式下运行。大多数例子是加密货币钱包应用，但也有少数游戏，例如 Parker Hoyes 移植的
    *Snake*。^([1](footnotes.xhtml#ch5fn1)) 在安装时，Applet 固件会由 ST31 进行验证，并且 GUI 必须调用才能运行由不受信任的机构签名的
    applet。STM32 固件现在已经被验证，但在设备的早期版本中并没有进行验证。
- en: Communication with the Nano S is performed by USB-wrapped APDU commands, and
    client examples are freely provided in Python as part of the `ledgerblue` package.
    An example from that package is shown in [Figure 5.3](ch05.xhtml#ch5fig3).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Nano S 的通信通过 USB 封装的 APDU 命令进行，客户端示例在 `ledgerblue` 包中免费提供。该包中的一个示例显示在 [图 5.3](ch05.xhtml#ch5fig3)
    中。
- en: Having a full development kit, accurate source code for most of the firmware,
    and legal support for third-party applications allows many degrees of freedom
    to the attacker. In Saleem Rashid’s example, knowing the expected bytes of the
    official application allows it to be compressed, patched, and replayed to fake
    out the secure element’s attestation. As we’ll see in Thomas Roth’s example, bugs
    can be found in the bootloader after dumping it from an application in development
    mode.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有完整的开发套件、准确的固件源代码以及对第三方应用程序的合法支持，给攻击者提供了许多自由度。在Saleem Rashid的例子中，知道官方应用程序的预期字节允许它被压缩、打补丁并重放，从而伪造安全元件的认证。正如我们将在Thomas
    Roth的例子中看到的那样，错误可以在从开发模式下的应用程序转储引导加载程序后找到。
- en: '**Rashid’s Attestation Exploit**'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Rashid的认证漏洞**'
- en: In early versions of the Ledger Nano S, the STM32 firmware and its bootloader
    were both open source. The host software would ask the ST31 to authenticate the
    STM32 firmware by quickly transferring the STM32 code over an internal UART bus.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ledger Nano S的早期版本中，STM32固件及其引导加载程序都是开源的。主机软件会要求ST31通过快速通过内部UART总线传输STM32代码来认证STM32固件。
- en: Rashid first created a malicious firmware patch by changing the onboarding screen
    so that `memset` will be called instead of the `cs_rng` function when the wallet
    is creating a recovery key. So the customer will always get the same key, and
    that key can be externally known.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Rashid首先通过更改启动屏幕创建了一个恶意固件补丁，使得在钱包创建恢复密钥时，`memset`会被调用，而不是`cs_rng`函数。这样，客户将总是得到相同的密钥，而这个密钥可以被外部知晓。
- en: This was far from a sneaky backdoor, so he next faked out the attestation by
    hiding his code inside of the application copies of functions that also exist
    in the bootloader. For example, `memset` existed both at application address `0x08006310`
    and at boot-loader address `0x08002a9c`. He could free up 124 bytes by redirecting
    function calls from one to the other.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这远不是一个隐蔽的后门，因此他接下来通过将他的代码隐藏在也存在于引导加载程序中的应用程序函数副本中，伪造了认证。例如，`memset`既存在于应用程序地址`0x08006310`，也存在于引导加载程序地址`0x08002a9c`。他可以通过将函数调用从一个重定向到另一个来释放124字节。
- en: '![Image](../images/f0057-01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0057-01.jpg)'
- en: 'Figure 5.3: Example Client Script in Python'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3：Python示例客户端脚本
- en: He can then fill these bytes with a patched wrapper for the function that sends
    chunks of memory to the ST31 for validation, taking care to send fake bytes to
    hide his hooking and patching.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 他接着可以用一个修补过的包装函数填充这些字节，该函数将内存块发送到ST31进行验证，注意发送伪造字节来隐藏他的钩取和打补丁操作。
- en: '**Roth’s Bootloader Exploit**'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Roth的引导加载程序漏洞**'
- en: After Rashid’s publication, Ledger closed their STM32 boot-loader’s source code
    and patched it to validate the application region immediately, before booting.
    They left the STM32 JTAG open, however, so Roth opened the case, wired a unit
    up, and dumped a copy of flash memory. He then reverse engineered it with the
    aim of finding a bug that would allow him to flash and execute unauthenticated
    code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在Rashid发布后，Ledger关闭了其STM32引导加载程序的源代码，并修补了它，在启动之前立即验证应用程序区域。然而，他们保留了STM32 JTAG端口，因此Roth打开了设备，接线并转储了闪存的副本。然后他进行了逆向工程，目的是找到一个漏洞，允许他刷写并执行未经认证的代码。
- en: Ledger’s bootloader for the Nano S operates over the APDU protocol. Commands
    are described in [Figure 5.4](ch05.xhtml#ch5fig4), where you first use Select
    Segment to choose a base address, then use Load to accept data into the working
    segment, and finally Flush each block back into flash memory. When the full update
    is installed, you can either call Boot or power cycle the device to execute the
    image.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Ledger Nano S的引导加载程序通过APDU协议进行操作。命令在[图5.4](ch05.xhtml#ch5fig4)中描述，首先使用选择段选择一个基本地址，然后使用加载将数据接受到工作段，最后将每个块刷新回闪存。当完整的更新安装完成后，你可以调用引导命令或重新启动设备来执行映像。
- en: All of that is fairly standard for a bootloader. The tricky part is that this
    bootloader verifies an application image’s signature, rather than implementing
    a lockout. So you can call all of these commands on a locked production device,
    but you shouldn’t be able to execute the Boot command or launch your image if
    the image hasn’t been signed with the manufacturer’s production key.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些对于引导加载程序来说都相当标准。棘手的部分在于，这个引导加载程序会验证应用程序映像的签名，而不是实现锁定。因此，你可以在锁定的生产设备上调用所有这些命令，但如果映像没有使用制造商的生产密钥签名，你不应该能够执行引导命令或启动你的映像。
- en: By reading a dump of the bootloader, Roth learned that it places `0xf00dbabe`
    in little endian (`be ba 0d f0`) at `0x0800-3000` after the signature has been
    validated. It doesn’t bother to repeat a validation if this tag is found. So writing
    that value to that location would be enough to inject foreign, unauthenticated
    code through the bootloader.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过读取引导加载程序的转储，Roth 了解到，它在验证签名后，将 `0xf00dbabe`（以小端字节序表示为 `be ba 0d f0`）放置在 `0x0800-3000`
    处。如果发现这个标签，它不会重复验证。所以，将该值写入该位置就足以通过引导加载程序注入外部的、未经认证的代码。
- en: '![Image](../images/f0059-01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0059-01.jpg)'
- en: 'Figure 5.4: APDU Bootloader Commands'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4：APDU 引导加载程序命令
- en: '![Image](../images/f0059-02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0059-02.jpg)'
- en: 'Figure 5.5: APDU Load Handler Pseudocode from Roth (2018)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5：Roth（2018）提供的 APDU 加载处理程序伪代码
- en: '![Image](../images/f0060-01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0060-01.jpg)'
- en: 'Figure 5.6: APDU Bootloader Exploit PoC'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6：APDU 引导加载程序漏洞概念验证
- en: From his pseudocode of the decompiled handler in [Figure 5.5](ch05.xhtml#ch5fig5),
    it might look as if you could begin a segment just before the magic word and overwrite
    it, but flash writes on an STM32 have strict page alignment rules that thwart
    such an attack. Similarly, they check for writes to the forbidden page and clear
    four bytes of the buffer just to frustrate us.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从他在[图 5.5](ch05.xhtml#ch5fig5)中反编译的处理程序伪代码来看，似乎可以在魔术字之前开始一个段并覆盖它，但在 STM32 上进行闪存写入时有严格的页面对齐规则，这会阻止此类攻击。同样，它们会检查是否对禁止写入的页面进行了写操作，并清除缓冲区中的四个字节，以防止我们绕过限制。
- en: What makes this exploitable is that in many STM32 microcontrollers, including
    this one, flash memory is mapped not just to its default location of `0x08000000`.
    There is also a second location mirrored or ghosted at `0x00000000`, which happens
    to be flash because it defaults to the boot memory. Roth observed that while there’s
    an explicit check to prevent a write to `0x0800C000`, there is nothing preventing
    a write to `0x0000C000`. Because of the mirroring, these two addresses are the
    same place!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使这一漏洞得以利用的原因在于，在许多 STM32 微控制器中，包括本例中的这一款，闪存不仅映射到其默认位置 `0x08000000`。此外，在 `0x00000000`
    处还有一个第二个位置，这是一个镜像或幽灵地址，因为它默认映射到引导内存。Roth 观察到，虽然有一个明确的检查来防止写入 `0x0800C000`，但没有任何机制来阻止写入
    `0x0000C000`。由于镜像的存在，这两个地址实际上指向同一个位置！
- en: '**Roth’s Payload**'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Roth 的有效载荷**'
- en: A proof-of-concept exploit is shown in [Figure 5.6](ch05.xhtml#ch5fig6). This
    proves the bug, but let’s disassemble his payload and see exactly what it does.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 概念验证漏洞的示例显示在[图 5.6](ch05.xhtml#ch5fig6)中。这证明了该漏洞的存在，但让我们反汇编他的有效载荷，看看它到底做了什么。
- en: The write occurs to `0x3000`, but we know that’s a mirror for `0x08003000`,
    so let’s work around that target location for consistency. In Radare2, we would
    open it like this.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 写入操作发生在 `0x3000`，但我们知道这是 `0x08003000` 的镜像地址，因此为了保持一致性，我们绕过这个目标位置进行操作。在 Radare2
    中，我们会像这样打开它。
- en: '![Image](../images/f0061-01.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0061-01.jpg)'
- en: The file begins with two 32-bit words. `0xf00dbabe` is the boot-loader password,
    and `0x080030c1` is the reset vector at which code is executed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 文件开始时包含两个 32 位字。`0xf00dbabe` 是引导加载程序密码，`0x080030c1` 是代码执行的复位向量。
- en: '![Image](../images/f0061-02.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0061-02.jpg)'
- en: Remembering to drop the least significant bit, we can disassemble that target
    word to find the infinite loop.^([2](footnotes.xhtml#ch5fn2))
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 记住要丢掉最低有效位，我们可以反汇编目标字以找到无限循环。^([2](footnotes.xhtml#ch5fn2))
- en: '![Image](../images/f0061-03.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0061-03.jpg)'
- en: But what’s all the rest of the code? Why not just have ten bytes (`0xf00dbabe`,
    `0x08003009`, and `b 0x08003009`) to loop forever on the first instruction? Well,
    Roth seems to have included a nearly functional exploit as an Easter egg, neutered
    into an infinite loop at the last minute by changing the entry point.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 但其余的代码是做什么的呢？为什么不直接使用十个字节（`0xf00dbabe`、`0x08003009` 和 `b 0x08003009`）在第一条指令上循环永远运行呢？嗯，Roth
    似乎在最后一刻把一个几乎可用的漏洞当作彩蛋插入，通过改变入口点将其转变为无限循环。
