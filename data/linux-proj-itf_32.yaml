- en: 'Chapter 32. Threads: Thread Cancellation'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第32章。线程：线程取消
- en: Typically, multiple threads execute in parallel, with each thread performing
    its task until it decides to terminate by calling *pthread_exit()* or returning
    from the thread’s start function.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，多个线程并行执行，每个线程执行任务，直到决定通过调用 *pthread_exit()* 或从线程的启动函数返回来终止。
- en: Sometimes, it can be useful to *cancel* a thread; that is, to send it a request
    asking it to terminate now. This could be useful, for example, if a group of threads
    is performing a calculation, and one thread detects an error condition that requires
    the other threads to terminate. Alternatively, a GUI-driven application may provide
    a cancel button to allow the user to terminate a task that is being performed
    by a thread in the background; in this case, the main thread (controlling the
    GUI) needs to tell the background thread to terminate.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，取消线程是有用的；即，向它发送请求，要求它立即终止。例如，如果一组线程正在执行计算，而其中一个线程检测到需要其他线程终止的错误条件，那么就很有用。或者，图形界面驱动的应用程序可能会提供一个取消按钮，允许用户终止正在后台线程中执行的任务；在这种情况下，主线程（控制
    GUI）需要告诉后台线程终止。
- en: In this chapter, we describe the POSIX threads cancellation mechanism.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将描述 POSIX 线程取消机制。
- en: Canceling a Thread
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 取消线程
- en: The *pthread_cancel()* function sends a cancellation request to the specified
    *thread*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*pthread_cancel()* 函数向指定的 *thread* 发送取消请求。'
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Returns 0 on success, or a positive error number on error
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 成功时返回0，错误时返回正的错误码
- en: Having made the cancellation request, *pthread_cancel()* returns immediately;
    that is, it doesn’t wait for the target thread to terminate.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在发出取消请求后，*pthread_cancel()* 会立即返回；也就是说，它不会等待目标线程终止。
- en: Precisely what happens to the target thread, and when it happens, depends on
    that thread’s cancellation state and type, as described in the next section.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 目标线程会发生什么，以及何时发生，取决于该线程的取消状态和类型，如下一节所述。
- en: Cancellation State and Type
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 取消状态和类型
- en: The *pthread_setcancelstate()* and *pthread_setcanceltype()* functions set flags
    that allow a thread to control how it responds to a cancellation request.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*pthread_setcancelstate()* 和 *pthread_setcanceltype()* 函数设置标志，使线程能够控制如何响应取消请求。'
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Both return 0 on success, or a positive error number on error
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 成功时返回0，错误时返回正的错误码
- en: 'The *pthread_setcancelstate()* function sets the calling thread’s cancelability
    state to the value given in *state*. This argument has one of the following values:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*pthread_setcancelstate()* 函数将调用线程的取消状态设置为 *state* 中给定的值。该参数有以下值之一：'
- en: '`PTHREAD_CANCEL_DISABLE`'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`PTHREAD_CANCEL_DISABLE`'
- en: The thread is not cancelable. If a cancellation request is received, it remains
    pending until cancelability is enabled.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 该线程不可取消。如果收到取消请求，则它保持挂起，直到取消状态被启用。
- en: '`PTHREAD_CANCEL_ENABLE`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`PTHREAD_CANCEL_ENABLE`'
- en: The thread is cancelable. This is the default cancelability state in newly created
    threads.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 该线程是可取消的。这是新创建线程的默认取消状态。
- en: The thread’s previous cancelability state is returned in the location pointed
    to by *oldstate*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 线程的先前取消状态会返回到 *oldstate* 所指向的位置。
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If we are not interested in the previous cancelability state, Linux allows *oldstate*
    to be specified as `NULL`. This is the case on many other implementations as well;
    however, SUSv3 doesn’t specify this feature, so portable applications can’t rely
    on it. We should always specify a non-`NULL` value for *oldstate*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不关心之前的取消状态，Linux 允许将*oldstate*指定为 `NULL`。在许多其他实现中也是如此；然而，SUSv3 没有规定此功能，因此可移植的应用程序不能依赖它。我们应该始终为*oldstate*指定一个非
    `NULL` 的值。
- en: Temporarily disabling cancellation (`PTHREAD_CANCEL_DISABLE`) is useful if a
    thread is executing a section of code where *all* of the steps must be completed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 临时禁用取消（`PTHREAD_CANCEL_DISABLE`）在线程执行一段必须*全部*完成的代码时非常有用。
- en: 'If a thread is cancelable (`PTHREAD_CANCEL_ENABLE`), then the treatment of
    a cancellation request is determined by the thread’s cancelability type, which
    is specified by the *type* argument in a call to *pthread_setcanceltype()*. This
    argument has one of the following values:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果线程是可取消的（`PTHREAD_CANCEL_ENABLE`），则取消请求的处理由线程的取消类型决定，取消类型通过调用 *pthread_setcanceltype()*
    中的 *type* 参数指定。该参数有以下值之一：
- en: '`PTHREAD_CANCEL_ASYNCHRONOUS`'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`PTHREAD_CANCEL_ASYNCHRONOUS`'
- en: The thread may be canceled at any time (perhaps, but not necessarily, immediately).
    Asynchronous cancelability is rarely useful, and we defer discussion of it until
    Section 32.6.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 线程可以在任何时候被取消（可能，但不一定，立即）。异步取消性很少有用，我们将在第32.6节中讨论它。
- en: '`PTHREAD_CANCEL_DEFERRED`'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`PTHREAD_CANCEL_DEFERRED`'
- en: The cancellation remains pending until a cancellation point (see the next section)
    is reached. This is the default cancelability type in newly created threads. We
    say more about deferred cancelability in the following sections.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 取消保持待处理状态，直到达到取消点（请参见下一节）。这是新创建线程中的默认取消性类型。我们将在后续章节中进一步讨论延迟取消性。
- en: The thread’s previous cancelability type is returned in the location pointed
    to by *oldtype*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 线程的先前可取消性类型将被返回到*oldtype*所指向的位置。
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As with the *pthread_setcancelstate() oldstate* argument, many implementations,
    including Linux, allow *oldtype* to be specified as `NULL` if we are not interested
    in the previous cancelability type. Again, SUSv3 doesn’t specify this feature,
    and portable applications can’t rely on it We should always specify a non-`NULL`
    value for *oldtype*.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 与*pthread_setcancelstate() oldstate*参数一样，许多实现，包括Linux，允许*oldtype*指定为`NULL`，如果我们不关心先前的可取消性类型。再次强调，SUSv3并未指定此功能，因此可移植的应用程序不能依赖此功能。我们应该始终为*oldtype*指定一个非`NULL`值。
- en: When a thread calls *fork()*, the child inherits the calling thread’s cancelability
    type and state. When a thread calls *exec()*, the cancelability type and state
    of the main thread of the new program are reset to `PTHREAD_CANCEL_ENABLE` and
    `PTHREAD_CANCEL_DEFERRED`, respectively.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当线程调用*fork()*时，子线程继承调用线程的可取消性类型和状态。当线程调用*exec()*时，新程序的主线程的可取消性类型和状态会被重置为`PTHREAD_CANCEL_ENABLE`和`PTHREAD_CANCEL_DEFERRED`。
- en: Cancellation Points
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 取消点
- en: When cancelability is enabled and deferred, a cancellation request is acted
    upon only when a thread next reaches a *cancellation point*. A cancellation point
    is a call to one of a set of functions defined by the implementation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当启用并延迟取消时，取消请求仅在线程下次达到*取消点*时才会被处理。取消点是调用实现定义的一组函数之一。
- en: SUSv3 specifies that the functions shown in [Table 32-1](ch32.html#functions_required_to_be_cancellation_po
    "Table 32-1. Functions required to be cancellation points by SUSv3") *must* be
    cancellation points if they are provided by an implementation. Most of these are
    functions that are capable of blocking the thread for an indefinite period of
    time.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3规定，表[32-1](ch32.html#functions_required_to_be_cancellation_po "表32-1。SUSv3要求作为取消点的函数")中显示的函数*必须*是取消点（如果它们由实现提供）。其中大多数是能够使线程阻塞无限期的函数。
- en: Table 32-1. Functions required to be cancellation points by SUSv3
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 表32-1。SUSv3要求作为取消点的函数
- en: '| *accept()**aio_suspend()**clock_nanosleep()**close()**connect()**creat()**fcntl(F_SETLKW)**fsync()**fdatasync()**getmsg()**getpmsg()**lockf(F_LOCK)**mq_receive()**mq_send()**mq_timedreceive()**mq_timedsend()**msgrcv()**msgsnd()**msync()*
    | *nanosleep()**open()**pause()**poll()**pread()**pselect()**pthread_cond_timedwait()**pthread_cond_wait()**pthread_join()**pthread_testcancel()**putmsg()**putpmsg()**pwrite()**read()**readv()**recv()**recvfrom()**recvmsg()**select()*
    | *sem_timedwait()**sem_wait()**send()**sendmsg()**sendto()**sigpause()**sigsuspend()**sigtimedwait()**sigwait()**sigwaitinfo()**sleep()**system()**tcdrain()**usleep()**wait()**waitid()**waitpid()**write()**writev()*
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| *accept()**aio_suspend()**clock_nanosleep()**close()**connect()**creat()**fcntl(F_SETLKW)**fsync()**fdatasync()**getmsg()**getpmsg()**lockf(F_LOCK)**mq_receive()**mq_send()**mq_timedreceive()**mq_timedsend()**msgrcv()**msgsnd()**msync()*
    | *nanosleep()**open()**pause()**poll()**pread()**pselect()**pthread_cond_timedwait()**pthread_cond_wait()**pthread_join()**pthread_testcancel()**putmsg()**putpmsg()**pwrite()**read()**readv()**recv()**recvfrom()**recvmsg()**select()*
    | *sem_timedwait()**sem_wait()**send()**sendmsg()**sendto()**sigpause()**sigsuspend()**sigtimedwait()**sigwait()**sigwaitinfo()**sleep()**system()**tcdrain()**usleep()**wait()**waitid()**waitpid()**write()**writev()*
    |'
- en: In addition to the functions in [Table 32-1](ch32.html#functions_required_to_be_cancellation_po
    "Table 32-1. Functions required to be cancellation points by SUSv3"), SUSv3 specifies
    a larger group of functions that an implementation *may* define as cancellation
    points. These include the *stdio* functions, the *dlopen* API, the *syslog* API,
    *nftw()*, *popen()*, *semop()*, *unlink()*, and various functions that retrieve
    information from system files such as the *utmp* file. A portable program must
    correctly handle the possibility that a thread may be canceled when calling these
    functions.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 [表 32-1](ch32.html#functions_required_to_be_cancellation_po "表 32-1. SUSv3
    要求成为取消点的函数") 中的函数外，SUSv3 还指定了一个更大的函数组，实施可以将其定义为取消点。这些包括 *stdio* 函数、*dlopen* API、*syslog*
    API、*nftw()*、*popen()*、*semop()*、*unlink()* 和各种从系统文件（如 *utmp* 文件）中检索信息的函数。便携程序必须正确处理调用这些函数时线程可能被取消的情况。
- en: SUSv3 specifies that aside from the two lists of functions that must and may
    be cancellation points, none of the other functions in the standard may act as
    cancellation points (i.e., a portable program doesn’t need to handle the possibility
    that calling these other functions could precipitate thread cancellation).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3 指定，除了必须和可能是取消点的函数列表外，标准中其他的函数不能作为取消点（即，便携程序不需要处理调用这些其他函数时可能导致线程取消的情况）。
- en: SUSv4 adds *openat()* to the list of functions that must be cancellation points,
    and removes *sigpause()* (it moves to the list of functions that *may* be cancellation
    points) and *usleep()* (which is dropped from the standard).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv4 将 *openat()* 添加到必须作为取消点的函数列表中，并移除 *sigpause()*（它移到可以作为取消点的函数列表）和 *usleep()*（已从标准中删除）。
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: An implementation is free to mark additional functions that are not specified
    in the standard as cancellation points. Any function that might block (perhaps
    because it might access a file) is a likely candidate to be a cancellation point.
    Within *glibc*, many nonstandard functions are marked as cancellation points for
    this reason.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 实现可以标记标准中未指定的其他函数作为取消点。任何可能阻塞的函数（可能因为它可能访问文件）都可能成为取消点的候选函数。在 *glibc* 中，许多非标准函数因为这个原因被标记为取消点。
- en: 'Upon receiving a cancellation request, a thread whose cancelability is enabled
    and deferred terminates when it next reaches a cancellation point. If the thread
    was not detached, then some other thread in the process must join with it, in
    order to prevent it from becoming a zombie thread. When a canceled thread is joined,
    the value returned in the second argument to *pthread_join()* is a special thread
    return value: `PTHREAD_CANCELED`.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在接收到取消请求时，启用了取消性且取消被延迟的线程会在下次达到取消点时终止。如果线程没有被分离，则必须有其他线程在进程中与之连接，以防止它变成僵尸线程。当一个被取消的线程被连接时，*pthread_join()*
    的第二个参数返回的是一个特殊的线程返回值：`PTHREAD_CANCELED`。
- en: Example program
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例程序
- en: '[Example 32-1](ch32.html#canceling_a_thread_with_pthread_undersco "Example 32-1. Canceling
    a thread with pthread_cancel()") shows a simple example of the use of *pthread_cancel()*.
    The main program creates a thread that executes an infinite loop, sleeping for
    a second and printing the value of a loop counter. (This thread will terminate
    only if it is sent a cancellation request or if the process exits.) Meanwhile,
    the main program sleeps for 3 seconds, and then sends a cancellation request to
    the thread that it created. When we run this program, we see the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 32-1](ch32.html#canceling_a_thread_with_pthread_undersco "示例 32-1. 使用 pthread_cancel()
    取消线程")展示了一个简单的使用 *pthread_cancel()* 的例子。主程序创建一个执行无限循环的线程，该线程每秒睡眠一次并打印循环计数器的值。（该线程只有在收到取消请求或进程退出时才会终止。）与此同时，主程序睡眠
    3 秒钟，然后向它创建的线程发送取消请求。当我们运行该程序时，看到以下输出：'
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Example 32-1. Canceling a thread with *pthread_cancel()*
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 32-1. 使用*pthread_cancel()*取消线程
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Testing for Thread Cancellation
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试线程取消
- en: In [Example 32-1](ch32.html#canceling_a_thread_with_pthread_undersco "Example 32-1. Canceling
    a thread with pthread_cancel()"), the thread created by *main()* accepted the
    cancellation request because it executed a function that was a cancellation point
    (*sleep()* is a cancellation point; *printf()* may be one). However, suppose a
    thread executes a loop that contains no cancellation points (e.g., a compute-bound
    loop). In this case, the thread would never honor the cancellation request.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例32-1](ch32.html#canceling_a_thread_with_pthread_undersco "示例32-1. 使用pthread_cancel()取消线程")中，*main()*创建的线程接受了取消请求，因为它执行了一个取消点的函数（*sleep()*是一个取消点；*printf()*可能也是一个取消点）。然而，假设一个线程执行一个不包含取消点的循环（例如一个计算密集型循环）。在这种情况下，线程将永远不会响应取消请求。
- en: The purpose of *pthread_testcancel()* is simply to be a cancellation point.
    If a cancellation is pending when this function is called, then the calling thread
    is terminated.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*pthread_testcancel()*的目的是作为一个取消点。当此函数被调用时，如果有挂起的取消请求，调用线程将被终止。'
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: A thread that is executing code that does not otherwise include cancellation
    points can periodically call *pthread_testcancel()* to ensure that it responds
    in a timely fashion to a cancellation request sent by another thread.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 执行不包含取消点的代码的线程可以定期调用*pthread_testcancel()*，以确保及时响应另一个线程发送的取消请求。
- en: Cleanup Handlers
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清理处理程序
- en: If a thread with a pending cancellation were simply terminated when it reached
    a cancellation point, then shared variables and Pthreads objects (e.g., mutexes)
    might be left in an inconsistent state, perhaps causing the remaining threads
    in the process to produce incorrect results, deadlock, or crash. To get around
    this problem, a thread can establish one or more *cleanup handlers*—functions
    that are automatically executed if the thread is canceled. A cleanup handler can
    perform tasks such as modifying the values of global variables and unlocking mutexes
    before the thread is terminated.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个线程在到达取消点时被简单地终止，那么共享变量和Pthreads对象（例如互斥锁）可能会处于不一致的状态，可能会导致进程中的其余线程产生错误的结果、死锁或崩溃。为了解决这个问题，线程可以建立一个或多个*清理处理程序*——如果线程被取消，这些函数会自动执行。清理处理程序可以执行一些任务，比如在终止线程之前修改全局变量的值和解锁互斥锁。
- en: Each thread can have a stack of cleanup handlers. When a thread is canceled,
    the cleanup handlers are executed working down from the top of the stack; that
    is, the most recently established handler is called first, then the next most
    recently established, and so on. When all of the cleanup handlers have been executed,
    the thread terminates.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 每个线程可以有一个清理处理程序栈。当线程被取消时，清理处理程序按从栈顶开始的顺序执行；也就是说，最近建立的处理程序首先被调用，然后是下一个最近建立的，以此类推。当所有清理处理程序执行完毕后，线程终止。
- en: The *pthread_cleanup_push()* and *pthread_cleanup_pop()* functions respectively
    add and remove handlers on the calling thread’s stack of cleanup handlers.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*pthread_cleanup_push()*和*pthread_cleanup_pop()*函数分别在调用线程的清理处理程序栈上添加和移除处理程序。'
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The *pthread_cleanup_push()* function adds the function whose address is specified
    in *routine* to the top of the calling thread’s stack of cleanup handlers. The
    *routine* argument is a pointer to a function that has the following form:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*pthread_cleanup_push()*函数将*例程*中指定的函数地址添加到调用线程的清理处理程序栈的顶部。*例程*参数是指向具有以下形式的函数的指针：'
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The *arg* value given to *pthread_cleanup_push()* is passed as the argument
    of the cleanup handler when it is invoked. This argument is typed as *void **,
    but, using judicious casting, other data types can be passed in this argument.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 给定给*pthread_cleanup_push()*的*arg*值作为清理处理程序调用时的参数传递。这个参数被定义为*void **，但通过适当的类型转换，其他数据类型也可以传递到该参数中。
- en: Typically, a cleanup action is needed only if a thread is canceled during the
    execution of a particular section of code. If the thread reaches the end of that
    section without being canceled, then the cleanup action is no longer required.
    Thus, each call to *pthread_cleanup_push()* has an accompanying call to *pthread_cleanup_pop()*.
    This function removes the topmost function from the stack of cleanup handlers.
    If the *execute* argument is nonzero, the handler is also executed. This is convenient
    if we want to perform the cleanup action even if the thread was not canceled.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，只有在线程在执行特定代码段时被取消时，才需要清理操作。如果线程在没有被取消的情况下到达该代码段的末尾，那么清理操作就不再需要。因此，每次调用*pthread_cleanup_push()*时，都需要有相应的*pthread_cleanup_pop()*调用。此函数从清理处理程序的栈中移除最上面的函数。如果*execute*参数非零，则该处理程序也会被执行。如果我们希望执行清理操作，即使线程没有被取消，这也很方便。
- en: 'Although we have described *pthread_cleanup_push()* and *pthread_cleanup_pop()*
    as functions, SUSv3 permits them to be implemented as macros that expand to statement
    sequences that include an opening (`{`) and closing (`}`) brace, respectively.
    Not all UNIX implementations do things this way, but Linux and many others do.
    This means that each use of *pthread_cleanup_push()* must be paired with exactly
    one corresponding *pthread_cleanup_pop()* in the same lexical block. (On implementations
    that do things this way, variables declared between the *pthread_cleanup_push()*
    and *pthread_cleanup_pop()* will be limited to that lexical scope.) For example,
    it is not correct to write code such as the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们将*pthread_cleanup_push()*和*pthread_cleanup_pop()*描述为函数，但SUSv3允许它们作为宏实现，宏展开为包括打开（`{`）和关闭（`}`）大括号的语句序列。并非所有UNIX实现都是这样做的，但Linux和许多其他实现是如此。这意味着每次使用*pthread_cleanup_push()*时，必须在同一个词法块内配对一个对应的*pthread_cleanup_pop()*。（在采用这种方式的实现中，*pthread_cleanup_push()*和*pthread_cleanup_pop()*之间声明的变量将仅限于该词法范围内。）例如，写出如下代码是不正确的：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As a coding convenience, any cleanup handlers that have not been popped are
    also executed automatically if a thread terminates by calling *pthread_exit()*
    (but not if it does a simple `return`).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种编码便利性，如果线程通过调用*pthread_exit()*终止，任何未弹出的清理处理程序也会自动执行（但如果只是简单的`return`，则不会执行）。
- en: Example program
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例程序
- en: The program in [Example 32-2](ch32.html#using_cleanup_handlers "Example 32-2. Using
    cleanup handlers") provides a simple example of the use of a cleanup handler.
    The main program creates a thread ![](figs/web/U008.png) whose first actions are
    to allocate a block of memory ![](figs/web/U003.png) whose location is stored
    in *buf*, and then lock the mutex *mtx* ![](figs/web/U004.png). Since the thread
    may be canceled, it uses *pthread_cleanup_push()* ![](figs/web/U005.png) to install
    a cleanup handler that is called with the address stored in *buf*. If it is invoked,
    the cleanup handler deallocates the freed memory ![](figs/web/U001.png) and unlocks
    the mutex ![](figs/web/U002.png).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例32-2](ch32.html#using_cleanup_handlers "示例32-2. 使用清理处理程序")中的程序提供了一个简单的清理处理程序使用示例。主程序创建了一个线程
    ![](figs/web/U008.png)，该线程的第一步是分配一块内存 ![](figs/web/U003.png)，其位置存储在*buf*中，然后锁定互斥量*mtx*
    ![](figs/web/U004.png)。由于线程可能被取消，因此它使用*pthread_cleanup_push()* ![](figs/web/U005.png)安装一个清理处理程序，该处理程序在调用时会释放存储在*buf*中的内存并解锁互斥量
    ![](figs/web/U002.png)。'
- en: 'The thread then enters a loop waiting for the condition variable *cond* to
    be signaled ![](figs/web/U006.png). This loop will terminate in one of two ways,
    depending on whether the program is supplied with a command-line argument:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后线程进入一个循环，等待条件变量*cond*被信号触发 ![](figs/web/U006.png)。这个循环将在两种方式之一中终止，具体取决于程序是否提供了命令行参数：
- en: If no command-line argument is supplied, the thread is canceled by *main()*
    ![](figs/web/U009.png). In this case, cancellation will occur at the call to *pthread_cond_wait()*
    ![](figs/web/U006.png), which is one of the cancellation points shown in [Table 32-1](ch32.html#functions_required_to_be_cancellation_po
    "Table 32-1. Functions required to be cancellation points by SUSv3"). As part
    of cancellation, the cleanup handler established using *pthread_cleanup_push()*
    is invoked automatically.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有提供命令行参数，则线程会被*main()*取消 ![](figs/web/U009.png)。在这种情况下，取消将在调用*pthread_cond_wait()*时发生
    ![](figs/web/U006.png)，这是[表32-1](ch32.html#functions_required_to_be_cancellation_po
    "表32-1. 根据SUSv3要求成为取消点的函数")中列出的取消点之一。作为取消的一部分，使用*pthread_cleanup_push()*建立的清理处理程序会自动被调用。
- en: If a command-line argument is supplied, the condition variable is signaled ![](figs/web/U010.png)
    after the associated global variable, *glob*, is first set to a nonzero value.
    In this case, the thread falls through to execute *pthread_cleanup_pop()* ![](figs/web/U007.png),
    which, given a nonzero argument, also causes the cleanup handler to be invoked.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果提供了命令行参数，则条件变量在关联的全局变量*glob*首次设置为非零值后会被触发信号 ![](figs/web/U010.png)。在这种情况下，线程会继续执行*pthread_cleanup_pop()*
    ![](figs/web/U007.png)，该函数在给定非零参数时也会触发清理处理程序。
- en: The main program joins with the terminated thread ![](figs/web/U011.png), and
    reports whether the thread was canceled or terminated normally.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 主程序与已终止的线程进行连接 ![](figs/web/U011.png)，并报告线程是被取消还是正常终止。
- en: Example 32-2. Using cleanup handlers
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 32-2. 使用清理处理程序
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If we invoke the program in [Example 32-2](ch32.html#using_cleanup_handlers
    "Example 32-2. Using cleanup handlers") without any command-line arguments, then
    *main()* calls *pthread_cancel()*, the cleanup handler is invoked automatically,
    and we see the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在没有任何命令行参数的情况下调用[示例 32-2](ch32.html#using_cleanup_handlers "示例 32-2. 使用清理处理程序")中的程序，则*main()*调用*pthread_cancel()*，清理处理程序会自动被调用，我们会看到以下情况：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If we invoke the program with a command-line argument, then *main()* sets *glob*
    to 1 and signals the condition variable, the cleanup handler is invoked by *pthread_cleanup_pop()*,
    and we see the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在命令行中提供参数，则*main()*将*glob*设置为1并触发条件变量，清理处理程序由*pthread_cleanup_pop()*调用，我们可以看到以下情况：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Asynchronous Cancelability
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步取消
- en: When a thread is made asynchronously cancelable (cancelability type `PTHREAD_CANCEL_ASYNCHRONOUS`),
    it may be canceled at any time (i.e., at any machine-language instruction); delivery
    of a cancellation is not held off until the thread next reaches a cancellation
    point.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当线程被设置为异步可取消（取消类型`PTHREAD_CANCEL_ASYNCHRONOUS`）时，它可以在任何时候被取消（即在任何机器语言指令处）；取消的传递不会等到线程下次到达取消点才进行。
- en: The problem with asynchronous cancellation is that, although cleanup handlers
    are still invoked, the handlers have no way of determining the state of a thread.
    In the program in [Example 32-2](ch32.html#using_cleanup_handlers "Example 32-2. Using
    cleanup handlers"), which employs the deferred cancelability type, the thread
    can be canceled only when it executes the call to *pthread_cond_wait()*, which
    is the only cancellation point. By this time, we know that *buf* has been initialized
    to point to a block of allocated memory and that the mutex *mtx* has been locked.
    However, with asynchronous cancelability, the thread could be canceled at any
    point; for example, before the *malloc()* call, between the *malloc()* call and
    locking the mutex, or after locking the mutex. The cleanup handler has no way
    of knowing where cancellation has occurred, or precisely which cleanup steps are
    required. Furthermore, the thread might even be canceled *during* the *malloc()*
    call, after which chaos is likely to result ([Implementation of *malloc()* and
    *free()*](ch07.html#implementation_of_malloc_open_parenthesi "Implementation of
    malloc() and free()")).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 异步取消的问题在于，尽管清理处理程序仍然会被调用，但处理程序无法确定线程的状态。在[示例 32-2](ch32.html#using_cleanup_handlers
    "示例 32-2. 使用清理处理程序")中使用的是延迟取消类型，线程只能在执行调用*pthread_cond_wait()*时被取消，因为它是唯一的取消点。到那时，我们知道*buf*已经初始化并指向一块已分配的内存，且互斥锁*mtx*已被加锁。然而，对于异步取消，线程可能在任何点被取消；例如，在*malloc()*调用之前、*malloc()*调用和加锁互斥锁之间，或者在加锁互斥锁之后。清理处理程序无法知道取消发生的位置，也无法确定需要哪些清理步骤。此外，线程甚至可能在*malloc()*调用期间被取消，之后可能会导致混乱（[*malloc()*
    和 *free()* 的实现](ch07.html#implementation_of_malloc_open_parenthesi "malloc() 和
    free() 的实现")）。
- en: As a general principle, an asynchronously cancelable thread can’t allocate any
    resources or acquire any mutexes, semaphores, or locks. This precludes the use
    of a wide range of library functions, including most of the Pthreads functions.
    (SUSv3 makes exceptions for *pthread_cancel()*, *pthread_setcancelstate()*, and
    *pthread_setcanceltype()*, which are explicitly required to be *async-cancel-safe*;
    that is, an implementation must make them safe to call from a thread that is asynchronously
    cancelable.) In other words, there are few circumstances where asynchronous cancellation
    is useful. One such circumstance is canceling a thread that is in a compute-bound
    loop.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一般而言，一个可异步取消的线程不能分配任何资源，也不能获取任何互斥锁、信号量或锁。这排除了使用许多库函数，包括大多数Pthreads函数。（SUSv3对*pthread_cancel()*、*pthread_setcancelstate()*和*pthread_setcanceltype()*有例外，这些函数被明确要求是*异步取消安全*的；也就是说，必须使这些函数能够安全地从一个可异步取消的线程中调用。）换句话说，异步取消的有用场景非常少。一个这样的场景是取消一个处于计算密集型循环中的线程。
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: The *pthread_cancel()* function allows one thread to send another thread a cancellation
    request, which is a request that the target thread should terminate.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*pthread_cancel()*函数允许一个线程向另一个线程发送取消请求，这是一种请求目标线程终止的请求。'
- en: How the target thread reacts to this request is determined by its cancelability
    state and type. If the cancelability state is currently set to disabled, the request
    will remain pending until the cancelability state is set to enabled. If cancelability
    is enabled, the cancelability type determines when the target thread reacts to
    the request. If the type is deferred, the cancellation occurs when the thread
    next calls one of a number of functions specified as cancellation points by SUSv3\.
    If the type is asynchronous, cancellation may occur at any time (this is rarely
    useful).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 目标线程如何响应该请求由其取消状态和类型决定。如果取消状态当前设置为禁用，则该请求将保持挂起，直到取消状态设置为启用。如果启用了取消性，则取消类型决定目标线程何时响应该请求。如果类型是延迟的，则取消发生在线程下次调用SUSv3指定的一个或多个取消点函数时。如果类型是异步的，则可以在任何时候发生取消（但这种情况很少有用）。
- en: A thread can establish a stack of cleanup handlers, which are programmer-defined
    functions that are invoked automatically to perform cleanups (e.g., restoring
    the states of shared variables, or unlocking mutexes) if the thread is canceled.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 线程可以建立一个清理处理程序的堆栈，这些程序是程序员定义的函数，当线程被取消时，它们会自动调用以执行清理工作（例如，恢复共享变量的状态或解锁互斥锁）。
- en: Further information
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 进一步信息
- en: Refer to the sources of further information listed in [Summary](ch29.html#summary-id28
    "Summary").
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[总结](ch29.html#summary-id28 "Summary")中列出的进一步信息来源。
