- en: '18'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '18'
- en: Using PostgreSQL from the Command Line
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行使用 PostgreSQL
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: In this chapter, you’ll learn how to work with PostgreSQL from the *command
    line*, a text-based interface where you enter names of programs or other commands
    to perform tasks, such as editing files or listing the contents of a file directory.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何从*命令行*操作 PostgreSQL，这是一个文本界面，您可以输入程序名称或其他命令来执行任务，例如编辑文件或列出文件目录的内容。
- en: The command line—also called a *command line interface*, a *console*, a *shell*,
    or the *terminal*—existed long before computers had a graphical user interface
    (GUI) with menus, icons, and buttons you could click for navigation. Back in college,
    to edit a file, I had to enter commands into a terminal connected to an IBM mainframe
    computer. Working that way felt mysterious, as though I’d attained new powers—and
    I had! Today, even in a GUI world, familiarity with the command line is essential
    for a programmer moving toward expert-level skills. Perhaps that’s why when a
    movie wants to convey that a character really knows what they’re doing on a computer,
    they’re shown typing cryptic, text-only commands.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行——也称为*命令行界面*、*控制台*、*shell*或*终端*——在计算机拥有图形用户界面（GUI）之前就已存在，GUI 包含菜单、图标和按钮，供用户点击导航。在大学时代，要编辑文件，我必须在连接到
    IBM 大型机的终端中输入命令。那种工作方式让人感觉神秘，仿佛获得了新的力量——事实上也确实如此！今天，即使在 GUI 世界中，熟悉命令行对于那些希望成为专家级技能的程序员至关重要。也许这就是为什么电影中想要表达角色真正了解如何操作计算机时，会展示他们输入神秘的、纯文本的命令。
- en: 'As we learn about this text-only world, pay attention to these advantages of
    mastering working from the command line instead of a GUI, such as pgAdmin:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们学习这个纯文本世界时，请注意掌握命令行工作而不是 GUI（如 pgAdmin）的这些优点：
- en: You can often work faster by entering short commands instead of clicking through
    layers of menu items.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过输入短命令而不是点击多层菜单项来提高工作效率。
- en: You gain access to functions that only the command line provides.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以获得只有命令行才能提供的功能。
- en: If command line access is all you have to work with (for example, when you’ve
    connected to a remote computer), you can still get work done.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您只能使用命令行访问（例如连接到远程计算机时），您仍然可以完成工作。
- en: 'We’ll use `psql`, a command-line tool included with PostgreSQL that lets you
    run queries, manage database objects, and interact with the computer’s operating
    system via text command. You’ll learn how to set up and access your computer’s
    command line and then launch `psql`. Along the way, we’ll cover general command
    line syntax and additional commands for database tasks. Patience is key: even
    experienced experts often resort to documentation to recall the available command
    line options.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `psql`，这是随 PostgreSQL 一起提供的命令行工具，允许您运行查询、管理数据库对象，并通过文本命令与计算机操作系统进行交互。您将学习如何设置和访问计算机的命令行，然后启动
    `psql`。在此过程中，我们将涵盖一般命令行语法以及用于数据库任务的额外命令。耐心十分重要：即使是有经验的专家也经常需要查阅文档以回忆可用的命令行选项。
- en: Setting Up the Command Line for psql
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 psql 命令行
- en: To start, we’ll access the command line on our operating system and, if needed,
    set an environment variable called `PATH` that tells our system where to find
    `psql`. *Environment variables* hold parameters that specify system or application
    configurations, such as where to store temporary files; they also allow you to
    enable or disable options. The `PATH` environment variable stores the names of
    one or more directories containing executable programs, and in this instance will
    tell the command line interface the location of `psql`, avoiding the hassle of
    having to enter its full directory path each time you launch it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们将访问操作系统上的命令行，并在需要时设置一个名为 `PATH` 的环境变量，该变量告诉系统在哪里找到 `psql`。*环境变量*保存指定系统或应用程序配置的参数，例如临时文件存储位置；它们还允许您启用或禁用选项。`PATH`
    环境变量存储一个或多个包含可执行程序的目录名称，在这种情况下，它告诉命令行界面 `psql` 的位置，避免每次启动时输入其完整目录路径的麻烦。
- en: Windows psql Setup
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows psql 设置
- en: On Windows, you’ll run `psql` within the *Command Prompt*, the application that
    provides that system’s command line interface. Before we do that, we need to tell
    Command Prompt where to find *psql.exe*—the full name of the `psql` application
    on Windows.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，您将在*命令提示符*中运行 `psql`，这是该系统提供的命令行界面应用程序。在执行此操作之前，我们需要告诉命令提示符在哪里找到*psql.exe*——Windows
    上 `psql` 应用程序的完整名称。
- en: Adding psql and Utilities to the Windows PATH
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将 psql 和实用程序添加到 Windows PATH
- en: 'The following steps assume that you installed PostgreSQL according to the instructions
    described in “Windows Installation” in Chapter 1. (If you installed PostgreSQL
    another way, use the Windows File Explorer to search your C: drive to find the
    directory that holds *psql.exe*, and then replace *C:\Program Files\PostgreSQL\*x*\bin*
    in the following steps with your own path.)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤假设你按照第1章中的“Windows安装”部分描述的说明安装了PostgreSQL。（如果你是通过其他方式安装PostgreSQL，可以使用Windows文件资源管理器搜索C:驱动器，找到包含*psql.exe*的目录，并将以下步骤中的*C:\Program
    Files\PostgreSQL\*x*\bin*替换为你自己的路径。）
- en: Open the Windows Control Panel by clicking the **Search** icon on the Windows
    taskbar, entering **Control Panel**, and then clicking the **Control Panel** icon.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击Windows任务栏上的**搜索**图标，输入**控制面板**，然后点击**控制面板**图标，打开Windows控制面板。
- en: Inside the Control Panel app, enter **Environment** in the search box. In the
    list of search results displayed, click **Edit the System Environment Variables**.
    A System Properties dialog should appear.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制面板应用中，在搜索框中输入**环境**。在显示的搜索结果列表中，点击**编辑系统环境变量**。系统属性对话框应该会出现。
- en: 'In the System Properties dialog, on the Advanced tab, click **Environment Variables**.
    The dialog that opens should have two sections: User variables and System variables.
    In the User variables section, if you don’t see a `PATH` variable, continue to
    step a to create a new one. If you do see an existing `PATH` variable, continue
    to step b to modify it.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在系统属性对话框中，点击“高级”标签，然后点击**环境变量**。打开的对话框应该有两个部分：用户变量和系统变量。如果在用户变量部分没有看到`PATH`变量，请继续执行步骤a以创建一个新的。如果看到了现有的`PATH`变量，请继续执行步骤b以修改它。
- en: If you don’t see `PATH` in the User variables section, click **New** to open
    a New User Variable dialog, shown in [Figure 18-1](#figure18-1).![f18001](Images/f18001.png)
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在用户变量部分没有看到`PATH`，点击**新建**以打开一个新的用户变量对话框，如[图18-1](#figure18-1)所示。![f18001](Images/f18001.png)
- en: 'Figure 18-1: Creating a new `PATH` environment variable in Windows 10'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图18-1：在Windows 10中创建新的`PATH`环境变量
- en: In the Variable name box, enter **PATH**. In the Variable value box, enter **C:\Program
    Files\PostgreSQL\*****x*****\bin**, where *x* is the version of PostgreSQL you’re
    using. (Instead of typing, you can click **Browse Directory** and navigate to
    the directory in the Browse For Folder dialog.) When you’ve either entered the
    path manually or browsed to it, click **OK** in all dialogs to close them.
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在变量名框中，输入**PATH**。在变量值框中，输入**C:\Program Files\PostgreSQL\*****x*****\bin**，其中*x*是你使用的PostgreSQL版本。（你可以点击**浏览目录**，在“浏览文件夹”对话框中导航到该目录，而不是手动输入。）输入路径后，或者浏览到路径后，点击所有对话框中的**确定**以关闭它们。
- en: If you do see an existing `PATH` variable in the User variables section, highlight
    it and click **Edit**. In the list of variables that displays, click **New** and
    enter **C:\Program Files\PostgreSQL\*****x*****\bin**, where *x* is the version
    of PostgreSQL you’re using. (Instead of typing, you can click **Browse Directory**
    and navigate to the directory in the Browse For Folder dialog.) The result should
    look like the highlighted line in [Figure 18-2](#figure18-2). When you’re finished,
    click **OK** in all dialogs to close them.
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在用户变量部分看到了现有的`PATH`变量，选中它并点击**编辑**。在显示的变量列表中，点击**新建**并输入**C:\Program Files\PostgreSQL\*****x*****\bin**，其中*x*是你使用的PostgreSQL版本。（你可以点击**浏览目录**，在“浏览文件夹”对话框中导航到该目录，而不是手动输入。）结果应类似于[图18-2](#figure18-2)中的高亮部分。完成后，点击所有对话框中的**确定**以关闭它们。
- en: Now when you launch Command Prompt, the `PATH` should include the directory.
    Note that any time you make changes to the `PATH`, you must close and reopen Command
    Prompt for the changes to take effect. Next, let’s set up Command Prompt.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你启动命令提示符时，`PATH`应该包含该目录。请注意，每次你修改`PATH`时，必须关闭并重新打开命令提示符，以使更改生效。接下来，让我们设置命令提示符。
- en: '![f18002](Images/f18002.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![f18002](Images/f18002.png)'
- en: 'Figure 18-2: Editing existing `PATH` environment variables in Windows 10'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图18-2：在Windows 10中编辑现有的`PATH`环境变量
- en: Launching and Configuring Windows Command Prompt
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 启动并配置Windows命令提示符
- en: Command Prompt is an executable file named *cmd.exe*. To launch it, select **Start**▶**Windows
    System**▶**Command Prompt** or enter **cmd** into the search bar. When the application
    opens, you should see a window with a black background that displays version and
    copyright information along with a prompt showing your current directory. On my
    Windows 10 system, Command Prompt opens to my default user directory and displays
    `C:\Users\adeba>`, as shown in [Figure 18-3](#figure18-3).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 命令提示符是一个名为*cmd.exe*的可执行文件。要启动它，请选择**开始**▶**Windows系统**▶**命令提示符**或在搜索栏中输入**cmd**。当应用程序打开时，您应该看到一个具有黑色背景的窗口，显示版本和版权信息，以及显示您当前目录的提示符。在我的Windows
    10系统中，命令提示符打开到默认用户目录，并显示`C:\Users\adeba>`，如图[图18-3](#figure18-3)所示。
- en: 'This line is known as the *prompt*, and it shows the current working directory.
    For me, this is my C: drive, which is typically the main hard drive on a Windows
    system, and the `\Users\adeba` directory on that drive. The greater-than sign
    `>` indicates the area where you enter your commands.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行被称为*提示符*，它显示当前的工作目录。对我来说，这是我的C:驱动器，通常是Windows系统上的主硬盘，以及该驱动器上的`\Users\adeba`目录。大于号`>`表示您输入命令的区域。
- en: '![f18003](Images/f18003.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![f18003](Images/f18003.png)'
- en: 'Figure 18-3: My Command Prompt in Windows 10'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图18-3：我的Windows 10命令提示符
- en: You can customize the font and colors plus access other settings by clicking
    the Command Prompt icon at the left of its window bar and selecting **Properties**
    from the menu. To make Command Prompt more suited for query output, I recommend
    setting the window size (on the Layout tab) to a width of at least 80 and a height
    of 25\. For the font, the official PostgreSQL documentation recommends using Lucida
    Console to properly display all the characters.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过点击命令提示符窗口栏左侧的图标并从菜单中选择**属性**来自定义字体和颜色以及访问其他设置。为了使命令提示符更适合查询输出，我建议将窗口大小（在布局选项卡上）设置为至少宽度为80，高度为25。对于字体，官方的PostgreSQL文档建议使用Lucida
    Console以正确显示所有字符。
- en: Entering Instructions on Windows Command Prompt
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在Windows命令提示符上输入指令
- en: Now you’re ready to enter instructions in Command Prompt. Enter **help** at
    the prompt, and press enter on your keyboard to see a list of available Windows
    system commands. You can view information about a command by including its name
    after `help`. For example, enter `help time` to display information about using
    the `time` command to set or view the system time.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以在命令提示符中输入指令了。在提示符处输入**help**，然后按键盘上的回车键，以查看可用的Windows系统命令列表。您可以通过在`help`后面包含其名称来查看有关命令的信息。例如，输入`help
    time`以显示关于使用`time`命令设置或查看系统时间的信息。
- en: Exploring the full workings of Command Prompt is an enormous topic beyond the
    scope of this book; however, I encourage you to try some of the commands in [Table
    18-1](#table18-1), which contains useful frequently used commands that aren’t
    actually necessary for the exercises in this chapter.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 探索命令提示符的全部工作是一个超出本书范围的巨大主题；但是，我鼓励您尝试一些在[表18-1](#table18-1)中包含的有用且经常使用的命令，尽管这些命令实际上对本章的练习并不是必需的。
- en: 'Table 18-1: Useful Windows Commands'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 表18-1：有用的Windows命令
- en: '| **Command** | **Function** | **Example** | **Action** |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **功能** | **示例** | **操作** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `cd` | Change directory | `cd C:\my-stuff` | Changes to the *my-stuff* directory
    on the C: drive |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `cd` | 更改目录 | `cd C:\my-stuff` | 切换到C:驱动器上的*my-stuff*目录 |'
- en: '| `copy` | Copy a file | `copy C:\my-stuff\song.mp3 C:\Music\song_favorite.mp3`
    | Copies the *song.mp3* file from *my-stuff* to a new file called *song_favorite.mp3*
    in the *Music* directory |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `copy` | 复制文件 | `copy C:\my-stuff\song.mp3 C:\Music\song_favorite.mp3` |
    将*song.mp3*文件从*my-stuff*复制到*Music*目录中并命名为*song_favorite.mp3* |'
- en: '| `del` | Delete | `del *.jpg` | Deletes all files with a *.jpg* extension
    in the current directory (asterisk wildcard) |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `del` | 删除 | `del *.jpg` | 删除当前目录中所有扩展名为*.jpg*的文件（星号通配符）|'
- en: '| `dir` | List directory contents | `dir /p` | Shows directory contents one
    screen at a time (using the `/p` option) |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `dir` | 列出目录内容 | `dir /p` | 按屏幕一次显示目录内容（使用`/p`选项） |'
- en: '| `findstr` | Find strings in text files matching a regular expression | `findstr
    "peach" *.txt` | Searches for the text *peach* in all *.txt* files in the current
    directory |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `findstr` | 在文本文件中查找匹配正则表达式的字符串 | `findstr "peach" *.txt` | 在当前目录中所有*.txt*文件中搜索文本*peach*
    |'
- en: '| `mkdir` | Make a new directory | `makedir C:\my-stuff\Salad` | Creates a
    *Salad* directory inside the *my-stuff* directory |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `mkdir` | 创建新目录 | `makedir C:\my-stuff\Salad` | 在*my-stuff*目录中创建一个*Salad*目录
    |'
- en: '| `move` | Move a file | `move C:\my-stuff\song.mp3 C:\Music\` | Moves the
    file *song.mp3* to the *C:\Music* directory |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `move` | 移动文件 | `move C:\my-stuff\song.mp3 C:\Music\` | 将文件 *song.mp3* 移动到
    *C:\Music* 目录 |'
- en: With your Command Prompt open and configured, you’re ready to roll. Skip ahead
    to the section “Working with psql.”
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在打开并配置好命令提示符后，你就可以开始操作了。可以跳到“使用 psql”这一部分。
- en: macOS psql Setup
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: macOS psql 配置
- en: On macOS, you’ll run `psql` within Terminal, the application that provides access
    to that system’s command line via one of several *shell* programs such as `bash`
    or `zsh`. Shell programs on Unix- or Linux-based systems, including macOS, provide
    not only the command prompt where users enter instructions, but also their own
    programming language for automating tasks. For example, you can use `bash` commands
    to write a program to log in to a remote computer, transfer files, and log out.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上，你将在终端中运行 `psql`，终端是一个通过几种 *shell* 程序（如 `bash` 或 `zsh`）访问系统命令行的应用程序。Unix
    或 Linux 系统上的 shell 程序，包括 macOS，不仅提供了用户输入指令的命令提示符，还提供了自己的编程语言用于自动化任务。例如，你可以使用 `bash`
    命令编写程序，登录到远程计算机、传输文件并登出。
- en: If you followed the Postgres.app setup instructions for macOS in Chapter 1—including
    running the commands at your Terminal—you shouldn’t need additional configuration
    to use `psql` and associated commands. Instead, we’ll proceed to launching Terminal.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你按照第一章中的 Postgres.app macOS 安装说明进行设置——包括在终端中运行命令——你不需要额外的配置来使用 `psql` 及相关命令。接下来，我们将继续启动终端。
- en: Launching and Configuring the macOS Terminal
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 启动和配置 macOS 终端
- en: Launch Terminal by navigating to **Applications**▶**Utilities**▶**Terminal**.
    When it opens, you should see a window that displays the date and time of your
    last login followed by a prompt that includes your computer name, current working
    directory, and username. On my Mac, which is set to the `bash` shell, the prompt
    displays as `ad:~ anthony$` and ends with a dollar sign (`$`), as shown in [Figure
    18-4](#figure18-4).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过导航至 **应用程序**▶**实用工具**▶**终端**来启动终端。打开后，你应该能看到一个窗口，显示上次登录的日期和时间，随后是一个提示符，包含你的计算机名、当前工作目录和用户名。在我的
    Mac 上，它设置为 `bash` shell，提示符显示为 `ad:~ anthony$`，并以美元符号（`$`）结束，如[图 18-4](#figure18-4)所示。
- en: The tilde (`~`) represents the system’s home directory, which is `/Users/anthony`.
    Terminal doesn’t display the full directory path, but you can see that information
    at any time by entering the `pwd` command (short for *print working directory*)
    and pressing ENTER on your keyboard. The area after the dollar sign is where you
    enter commands.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 波浪号（`~`）代表系统的主目录，即 `/Users/anthony`。终端不会显示完整的目录路径，但你可以随时通过输入 `pwd` 命令（代表 *print
    working directory*）并按下回车键来查看这些信息。美元符号后面的区域就是你输入命令的地方。
- en: If your Mac is set to another shell such as `zsh`, your prompt may look different.
    With `zsh`, for example, the prompt ends with a percent sign. The particular shell
    you’re using does not make a difference for these exercises.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 Mac 设置了其他的 shell，比如 `zsh`，你的提示符可能看起来有所不同。例如，使用 `zsh` 时，提示符以百分号结束。你使用的具体
    shell 对于这些练习来说没有影响。
- en: '![f18004](Images/f18004.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![f18004](Images/f18004.png)'
- en: 'Figure 18-4: Terminal command line in macOS'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18-4：macOS 终端命令行
- en: If you’ve never used Terminal, its default black-and-white color scheme might
    seem boring. You can change fonts, colors, and other settings by selecting **Terminal**▶**Preferences**.
    To make Terminal bigger to better fit the query output display, I recommend setting
    the window size (on the Window tab under Profiles) to a width of at least 80 columns
    and a height of 25 rows. My preferred font (on the Text tab) is Monaco 14, but
    experiment to find one you like.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从未使用过终端，它默认的黑白色调可能看起来有些单调。你可以通过选择**终端**▶**偏好设置**来更改字体、颜色和其他设置。为了让终端界面更大，更适合显示查询输出，我建议将窗口大小（在配置文件下的窗口标签页中）设置为至少
    80 列宽和 25 行高。我的首选字体（在文本标签页中）是 Monaco 14，但可以尝试不同的字体，找到你喜欢的。
- en: Exploring the full workings of Terminal and related commands is an enormous
    topic beyond the scope of this book, but take some time to try several commands.
    [Table 18-2](#table18-2) lists some useful commonly used commands that aren’t
    actually necessary for the exercises in this chapter. Enter `man` (short for *manual*)
    followed by a command name to get help on any command. For example, you can use
    `man ls` to find out how to use the `ls` command to list directory contents.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 探索终端及相关命令的完整功能是一个庞大的话题，超出了本书的范围，但还是建议你花些时间尝试几个命令。[表18-2](#table18-2)列出了一些常用且实用的命令，这些命令实际上并不是本章练习所必需的。输入`man`（即*manual*的缩写）后跟命令名称，即可获得该命令的帮助。例如，使用`man
    ls`可以了解如何使用`ls`命令列出目录内容。
- en: 'Table 18-2: Useful Terminal Commands'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 表18-2：实用终端命令
- en: '| **Command** | **Function** | **Example** | **Action** |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **功能** | **示例** | **操作** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `cd` | Change directory | `cd /Users/pparker/my-stuff/`  | Changes to the
    *my-stuff* directory |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `cd` | 切换目录 | `cd /Users/pparker/my-stuff/`  | 切换到*my-stuff*目录 |'
- en: '| `cp` | Copy files | `cp song.mp3 song_backup.mp3` | Copies the file *song.mp3*
    to *song_backup.mp3* in the current directory |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `cp` | 复制文件 | `cp song.mp3 song_backup.mp3` | 将文件*song.mp3*复制为*song_backup.mp3*，并保存在当前目录
    |'
- en: '| `grep` | Find strings in a text file matching a regular expression | `grep
    ''us_counties_2010'' *.sql` | Finds all lines in files with a *.sql* extension
    that have the text *us_counties_2010* |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `grep` | 查找匹配正则表达式的文本字符串 | `grep ''us_counties_2010'' *.sql` | 查找所有扩展名为*.sql*的文件中包含*us_counties_2010*文本的行
    |'
- en: '| `ls` | List directory contents | `ls -al` | Lists all files and directories
    (including hidden) in “long” format |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `ls` | 列出目录内容 | `ls -al` | 以“长格式”列出所有文件和目录（包括隐藏文件） |'
- en: '| `mkdir` | Make a new directory | `mkdir resumes` | Makes a directory named
    *resumes* under the current working directory |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `mkdir` | 创建一个新目录 | `mkdir resumes` | 在当前工作目录下创建一个名为*resumes*的目录 |'
- en: '| `mv` | Move a file | `mv song.mp3 /Users/pparker/songs` | Moves the file
    *song.mp3* from the current directory to a */songs* directory under a user directory
    |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `mv` | 移动文件 | `mv song.mp3 /Users/pparker/songs` | 将文件*song.mp3*从当前目录移动到用户目录下的*/songs*目录
    |'
- en: '| `rm` | Remove (delete) files | `rm *.jpg` | Deletes all files with a *.jpg*
    extension in the current directory (asterisk wildcard) |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `rm` | 删除文件 | `rm *.jpg` | 删除当前目录下所有扩展名为*.jpg*的文件（使用星号通配符） |'
- en: With your Terminal open and configured, you’re ready to roll. Skip ahead to
    the section “Working with psql.”
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 打开并配置好终端后，你已经准备好开始了。直接跳到“使用psql”部分。
- en: Linux psql Setup
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linux psql 设置
- en: Recall from “Linux Installation” in Chapter 1 that methods for installing PostgreSQL
    vary according to your Linux distribution. Nevertheless, `psql` is part of the
    standard PostgreSQL install, and you probably already ran `psql` commands as part
    of the installation process via your distribution’s command line terminal application.
    Even if you didn’t, standard Linux installations of PostgreSQL will automatically
    add `psql` to your `PATH`, so you should be able to access it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾第1章中的“Linux安装”部分，安装PostgreSQL的方法因Linux发行版不同而有所差异。尽管如此，`psql`是标准PostgreSQL安装的一部分，你可能已经通过你的发行版命令行终端应用程序在安装过程中运行过`psql`命令。即使没有，标准的Linux
    PostgreSQL安装会自动将`psql`添加到`PATH`中，因此你应该能够访问它。
- en: Launch a terminal application and proceed to the next section, “Working with
    psql.” On some distributions, such as Ubuntu, you can open a terminal by pressing
    ctrl-alt-T. Also note that the Mac Terminal commands in [Table 18-2](#table18-2)
    apply to Linux as well and may be useful to you.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 启动终端应用程序并继续下一部分，“使用psql”。在某些发行版（如Ubuntu）中，你可以通过按ctrl-alt-T打开终端。另外，请注意，[表18-2](#table18-2)中的Mac终端命令同样适用于Linux，并可能对你有所帮助。
- en: Working with psql
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用psql
- en: Now that you’ve identified your command line interface and set it up to recognize
    the location of `psql`, let’s launch `psql` and connect to a database on your
    local installation of PostgreSQL. Then we’ll explore executing queries and special
    commands for retrieving database information.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经识别出命令行界面并设置好路径来识别`psql`，接下来我们启动`psql`并连接到本地安装的PostgreSQL数据库。然后，我们将探索执行查询和用于检索数据库信息的特殊命令。
- en: Launching psql and Connecting to a Database
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动psql并连接到数据库
- en: 'Regardless of the operating system you’re using, you start `psql` in the same
    way. Open your command line interface (Command Prompt on Windows, Terminal on
    macOS or Linux). To launch `psql` and connect to a database, we use the following
    pattern at the command prompt:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您使用的操作系统是什么，启动 `psql` 的方式都是相同的。打开您的命令行界面（在 Windows 上是命令提示符，在 macOS 或 Linux
    上是终端）。要启动 `psql` 并连接到数据库，您可以在命令提示符中使用以下模式：
- en: '[PRE0]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Following the `psql` application name, we provide the database name after a
    `-d` database argument and a username after the `-U` username argument.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `psql` 应用程序名称后，我们通过 `-d` 数据库参数指定数据库名称，通过 `-U` 用户名参数指定用户名。
- en: 'For the database name, we’ll use `analysis`, which is where we created our
    tables and other objects for the book’s exercises. For username, we’ll use `postgres`,
    which is the default user created during installation. So, to connect to the `analysis`
    database on your local server, enter this at the command line:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据库名称，我们将使用 `analysis`，这是我们为本书练习创建表格和其他对象的地方。对于用户名，我们将使用 `postgres`，这是安装过程中创建的默认用户。因此，要连接到本地服务器上的
    `analysis` 数据库，在命令行中输入以下内容：
- en: '[PRE1]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Note that you can connect to a database on a remote server by specifying the
    `–h` argument followed by the hostname. For example, you would use the following
    line if you were connecting to a database named `analysis` on a server called
    `example.com`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您可以通过指定 `–h` 参数后跟主机名来连接到远程服务器上的数据库。例如，如果您要连接到名为 `analysis` 的数据库，且该数据库位于名为
    `example.com` 的服务器上，可以使用以下命令：
- en: '[PRE2]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Either way, if you set a password during installation, you should receive a
    password prompt when `psql` launches. If so, enter your password. After `psql`
    connects to the database, you should then see a prompt that looks like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，如果您在安装过程中设置了密码，在启动 `psql` 时应该会看到密码提示。如果是这样，请输入您的密码。连接到数据库后，您应该会看到类似下面的提示符：
- en: '[PRE3]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, the first line lists the version number of `psql` and the server you’re
    connected to. Your version will vary depending on when you installed PostgreSQL.
    The prompt where you’ll enter commands is `analysis=#`, which refers to the name
    of the database, followed by an equal sign (`=`) and a hash mark (`#`). The hash
    mark indicates that you’re logged in with *superuser* privileges, which give you
    unlimited ability to access and create objects and set up accounts and security.
    If you’re logged in as a user without superuser privileges, the last character
    of the prompt will be a greater-than sign (`>`). As you can see, the user account
    you logged in with here (`postgres`) is a superuser.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，第一行列出了 `psql` 的版本号以及您连接的服务器。您的版本会根据您安装 PostgreSQL 的时间有所不同。您将输入命令的提示符是 `analysis=#`，它表示数据库的名称，后面跟着等号（`=`）和井号（`#`）。井号表示您以
    *超级用户* 权限登录，超级用户权限允许您无限制地访问和创建对象，并设置账户和安全性。如果您以非超级用户身份登录，提示符的最后一个字符将是大于号（`>`）。如您所见，您登录的用户账户（`postgres`）是超级用户。
- en: Finally, on Windows systems, you may see a warning message after launching `psql`
    about the console code page differing from the Windows code page. This is related
    to a mismatch in character sets between Command Prompt and the rest of the Windows
    system. For the exercises in this book, you can safely ignore that warning. If
    you prefer, you can eliminate it on a per-session basis by entering the command
    `cmd.exe /c chcp 1252` in your Windows Command Prompt before launching `psql`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 Windows 系统上，启动 `psql` 后，可能会看到一条警告消息，提示控制台代码页与 Windows 代码页不同。这与命令提示符与 Windows
    系统其余部分之间的字符集不匹配有关。对于本书中的练习，您可以安全地忽略该警告。如果您愿意，您可以在每次会话启动前通过在 Windows 命令提示符中输入命令
    `cmd.exe /c chcp 1252` 来消除该警告。
- en: Getting Help or Exiting
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 获取帮助或退出
- en: At the `psql` prompt, you can get help for both `psql` and general SQL with
    a set of *meta-commands*, detailed in [Table 18-3](#table18-3). Meta-commands,
    which begin with a backslash (`\`), go beyond offering help—we’ll cover several
    that return information about the database, let you adjust settings, or process
    data.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `psql` 提示符下，您可以通过一组 *元命令* 获取 `psql` 和通用 SQL 的帮助，详细内容见 [表 18-3](#table18-3)。元命令以反斜杠（`\`）开头，除了提供帮助之外，还可以提供有关数据库的信息、调整设置或处理数据。
- en: 'Table 18-3: Help Commands Within `psql`'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 表 18-3：`psql` 内的帮助命令
- en: '| **Command** | **Displays** |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **显示内容** |'
- en: '| --- | --- |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `\?` | Commands available within `psql`, such as `\dt` to list tables. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `\?` | `psql` 中可用的命令，例如 `\dt` 用于列出表格。 |'
- en: '| `\? options` | Options for use with the `psql` command, such as `-U` to specify
    username. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `\? options` | `psql` 命令的选项，例如 `-U` 用于指定用户名。 |'
- en: '| `\? variables` | Variables for use with `psql`, such as `VERSION` for the
    current `psql` version. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `\? variables` | 用于 `psql` 的变量，例如当前 `psql` 版本的 `VERSION`。 |'
- en: '| `\h` | List of SQL commands. Add a command name to see detailed help for
    it (for example, `\h INSERT`). |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `\h` | SQL 命令列表。添加命令名称以查看详细帮助（例如，` \h INSERT`）。 |'
- en: Even experienced users often need a refresher on commands and options, so having
    the details in the `psql` application is handy. To exit `psql`, use the meta-command
    `\q` (for *quit*).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是经验丰富的用户，通常也需要刷新命令和选项，因此在 `psql` 应用程序中查看详细信息非常方便。要退出 `psql`，请使用元命令 `\q`（用于
    *quit*）。
- en: Changing the Database Connection
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更改数据库连接
- en: When working with SQL, it’s not unusual to be working with multiple databases,
    so you need a way to switch between databases. You can do this easily at the `psql`
    prompt using the `\c` meta-command.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 SQL 时，通常需要处理多个数据库，因此您需要一种在数据库之间切换的方法。您可以在 `psql` 提示符下使用 `\c` 元命令轻松完成此操作。
- en: 'For example, while connected to your `analysis` database, at the `psql` prompt
    enter the following command to create a database named `test`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在连接到您的 `analysis` 数据库时，在 `psql` 提示符下输入以下命令以创建名为 `test` 的数据库：
- en: '[PRE4]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, to connect to the new `test` database you just created, enter `\c` followed
    by the name of the database at the `psql` prompt (and provide your PostgreSQL
    password if asked):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，要连接到您刚刚创建的 `test` 数据库，在 `psql` 提示符下输入 `\c`，后跟数据库名称（如果提示，提供您的 PostgreSQL 密码）：
- en: '[PRE5]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The application should respond with the following message:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序应以以下消息作出响应：
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The prompt will show you which database you’re connected to. To log in as a
    different user—for example, using a username the macOS installation created—you
    could add that username after the database name. On my Mac, the syntax looks like
    this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 提示符将显示您当前连接的数据库。要以不同的用户身份登录——例如，使用 macOS 安装创建的用户名——您可以在数据库名称后添加该用户名。在我的 Mac
    上，语法如下所示：
- en: '[PRE7]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The response would be as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 响应将如下所示：
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To reduce clutter, you can remove the `test` database you created. First, use
    `\c` to disconnect from `test` and connect to the `analysis` database (we can
    remove a database only if no one is connected to it). Once you’ve connected to
    `analysis`, enter `DROP DATABASE test;` at the `psql` prompt.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少杂乱，您可以删除您创建的 `test` 数据库。首先，使用 `\c` 断开与 `test` 的连接，并连接到 `analysis` 数据库（只有在没有人连接到它时，我们才能删除数据库）。一旦连接到
    `analysis`，在 `psql` 提示符下输入 `DROP DATABASE test;`。
- en: Setting Up a Password File
  id: totrans-108
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置密码文件
- en: If you’d rather not see a password prompt when starting `psql`, you can set
    up a file to store database connection information that includes the server name,
    your username, and password. On startup, `psql` will read the file and bypass
    the password prompt if the file contains an entry that matches the database connection
    and username.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不希望在启动 `psql` 时看到密码提示，您可以设置一个文件来存储包含服务器名称、用户名和密码的数据库连接信息。启动时，`psql` 将读取该文件，并在文件中包含与数据库连接和用户名匹配的条目时跳过密码提示。
- en: 'On Windows 10, the file must be named *pgpass.conf* and must reside in the
    following directory: C:\Users\YourUsername*\AppData\Roaming\postgresql\*. You
    may need to create the `postgresql` directory. On macOS and Linux, the file must
    be named *.pgpass* and must reside in your user home directory. The documentation
    at [https://www.postgresql.org/docs/current/libpq-pgpass.html](https://www.postgresql.org/docs/current/libpq-pgpass.html)
    notes that on macOS and Linux, you may need to set file permissions after creating
    the file by running `chmod 0600 ~/.pgpass` at the command line.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 10 上，文件必须命名为 *pgpass.conf*，并且必须位于以下目录中：C:\Users\YourUsername*\AppData\Roaming\postgresql\*。您可能需要创建
    `postgresql` 目录。在 macOS 和 Linux 上，文件必须命名为 *.pgpass*，并且必须位于您的用户主目录中。文档 [https://www.postgresql.org/docs/current/libpq-pgpass.html](https://www.postgresql.org/docs/current/libpq-pgpass.html)
    中指出，在 macOS 和 Linux 上，创建文件后，您可能需要通过在命令行运行 `chmod 0600 ~/.pgpass` 来设置文件权限。
- en: 'Create the file using a text editor and save it with the correct name and location
    for your system. Inside, you’ll need to add a line for each database connection
    in the following format:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用文本编辑器创建文件，并保存为适合您系统的正确名称和位置。在文件中，您需要为每个数据库连接添加一行，格式如下：
- en: '[PRE9]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For example, to set up a connection for the `analysis` database and `postgres`
    username, enter this line, substituting your password:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要为 `analysis` 数据库和 `postgres` 用户名设置连接，请输入此行，并替换您的密码：
- en: '[PRE10]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can substitute an asterisk in any of the first four parameters to serve
    as a wildcard. For example, to supply a password for any local database with the
    `postgres` username, substitute an asterisk for the database name:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在前四个参数中的任何一个位置用星号替代，作为通配符。例如，为了为任何本地数据库提供密码，使用 `postgres` 用户名时，可以用星号代替数据库名称：
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Saving your password will save you some typing, but be mindful of best practices
    regarding security. Always secure your computer with a strong password and/or
    physical security key, and don’t create a password file on any public or shared
    system.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 保存你的密码可以减少一些输入，但要注意遵循安全最佳实践。始终使用强密码和/或物理安全密钥保护你的电脑，并且不要在任何公共或共享的系统上创建密码文件。
- en: Running SQL Queries on psql
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 psql 中运行 SQL 查询
- en: We’ve configured `psql` and connected to a database, so now let’s run some SQL
    queries. We’ll start with a single-line query and then run a multiple-line query.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经配置了 `psql` 并连接到了数据库，现在让我们运行一些 SQL 查询。我们将从单行查询开始，然后运行多行查询。
- en: You enter SQL into `psql` directly at the prompt. For example, to see a few
    rows from the 2019 census table we’ve used throughout the book, enter a query
    at the prompt, as shown in [Listing 18-1](#listing18-1).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以直接在 `psql` 提示符下输入 SQL。例如，为了查看我们在整本书中使用的 2019 年人口普查表的几行数据，可以在提示符下输入查询，如[列表
    18-1](#listing18-1)所示。
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Listing 18-1: Entering a single-line query in `psql`'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 18-1：在 `psql` 中输入单行查询
- en: 'Press enter to execute the query, and `psql` should display the following results
    in your terminal in text including the number of rows returned:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 按下回车键执行查询，`psql` 应该会在终端中显示包括返回行数在内的以下结果：
- en: '[PRE13]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Below the result, you can see the `analysis=#` prompt again, ready for further
    input. You can use the up and down arrows on your keyboard to scroll through recent
    queries and press enter to execute them again, avoiding having to retype them.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在结果下方，你可以看到 `analysis=#` 提示符再次出现，准备接受进一步的输入。你可以使用键盘上的上下箭头来滚动查看最近的查询，并按回车键重新执行它们，这样就无需重新输入。
- en: Entering a Multiline Query
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 输入多行查询
- en: You’re not limited to single-line queries. If you have a query that spans multiple
    lines, you can enter lines one at a time, pressing enter after each, and `psql`
    knows not execute the query until you provide a semicolon. Let’s reenter the query
    in [Listing 18-1](#listing18-1) over multiple lines, shown in [Listing 18-2](#listing18-2).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你并不局限于单行查询。如果你的查询跨越多行，你可以一次输入一行，每输入一行按下回车键，`psql` 会知道直到你提供分号后才执行查询。让我们在[列表 18-1](#listing18-1)中的查询基础上重新输入，分成多行展示在[列表
    18-2](#listing18-2)中。
- en: '[PRE14]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Listing 18-2: Entering a multiline query in `psql`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 18-2：在 `psql` 中输入多行查询
- en: Note that when your query extends past one line, the symbol between the database
    name and the hash mark changes from an equal sign to a hyphen. This multiline
    query executes only when you press enter after the final line, which ends with
    a semicolon.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当你的查询超过一行时，数据库名称和井号之间的符号会从等号变为连字符。这个多行查询只有在你按下最后一行并以分号结尾后才会执行。
- en: Checking for Open Parentheses in the psql Prompt
  id: totrans-131
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在 psql 提示符中检查是否有开放的括号
- en: Another helpful feature of `psql` is that it shows when you haven’t closed a
    pair of parentheses. [Listing 18-3](#listing18-3) shows this in action.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`psql` 的另一个有用功能是，当你没有关闭一对括号时，它会提醒你。[列表 18-3](#listing18-3) 展示了这一功能。'
- en: '[PRE15]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Listing 18-3: Showing open parentheses in the `psql` prompt'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 18-3：在 `psql` 提示符中显示开放的括号
- en: Here, you create a simple table called `wineries` that has two columns. After
    entering the first line of the `CREATE TABLE` statement and an open parenthesis
    (`(`), the prompt then changes from `analysis=#` to `analysis(#` to include an
    open parenthesis. This reminds you an open parenthesis needs closing. The prompt
    maintains that configuration until you add the closing parenthesis.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你创建了一个简单的表 `wineries`，它有两列。在输入 `CREATE TABLE` 语句的第一行和左括号（`(`）后，提示符会从 `analysis=#`
    变为 `analysis(#`，以包括一个左括号。这提醒你左括号需要配对关闭。提示符会保持这种配置，直到你添加右括号为止。
- en: Editing Queries
  id: totrans-136
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编辑查询
- en: To modify the most recent query you’ve executed in `psql`, you can edit it using
    the `\e` or `\edit` meta-command. Enter `\e` to open the last-executed query in
    a text editor. The editor `psql` uses by default depends on your operating system.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要修改你在 `psql` 中执行的最新查询，可以使用 `\e` 或 `\edit` 元命令进行编辑。输入 `\e` 打开最后执行的查询，在文本编辑器中进行修改。`psql`
    默认使用的编辑器取决于你的操作系统。
- en: On Windows, `psql` will open Notepad, a simple GUI text editor. Edit your query,
    save it by choosing **File**▶**Save**, and then exit Notepad using **File**▶**Exit**.
    When Notepad closes, `psql` should execute your revised query.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，`psql`将打开记事本，这是一个简单的图形界面文本编辑器。编辑查询后，通过选择**文件**▶**保存**保存文件，然后使用**文件**▶**退出**退出记事本。当记事本关闭时，`psql`应该会执行你修改过的查询。
- en: 'On macOS and Linux, `psql` uses a command line application called `vim`, which
    is a favorite among programmers but can seem inscrutable for beginners. Check
    out a helpful `vim` cheat sheet at [https://vim.rtorr.com/](https://vim.rtorr.com/).
    For now, you can use the following steps to make simple edits:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS和Linux上，`psql`使用一个名为`vim`的命令行应用程序，这是程序员们最喜欢的工具之一，但对于初学者来说可能显得难以理解。可以查看一个有用的`vim`备忘单，地址是[https://vim.rtorr.com/](https://vim.rtorr.com/)。目前，你可以按照以下步骤进行简单的编辑：
- en: When `vim` opens the query in your terminal, press I to activate insert mode.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当`vim`在终端中打开查询时，按I激活插入模式。
- en: Make your edits to the query.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对查询进行编辑。
- en: 'Press esc and then SHIFT-: to display a colon command prompt at the bottom
    left of the `vim` screen, which is where you enter commands to control `vim`.'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按esc键，然后按SHIFT-:，在`vim`屏幕左下角显示冒号命令提示符，这是你输入命令以控制`vim`的地方。
- en: Enter `wq` (for *write*, *quit*) and press enter to save your changes.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`wq`（表示*写入*，*退出*），然后按回车键保存更改。
- en: Now when `vim` exits, the `psql` prompt should execute your revised query. Press
    the up-arrow key to see the revised text.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当`vim`退出时，`psql`提示符应该会执行你修改过的查询。按上箭头键可以查看修改后的文本。
- en: Navigating and Formatting Results
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导航和格式化结果
- en: The query you ran in Listings 18-1 and 18-2 returned only one column and a handful
    of rows, so its output was contained nicely in your command line interface. But
    for queries with more columns or rows, the output can fill more than one screen,
    making it difficult to navigate. Fortunately, you have several ways to customize
    the display style of the output using the `\pset` meta-command.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你在列表18-1和18-2中运行的查询只返回了一列和几行，因此它的输出很容易适应命令行界面。但对于返回更多列或更多行的查询，输出可能会填满多个屏幕，使得浏览变得困难。幸运的是，你可以使用`\pset`元命令通过几种方式自定义输出的显示样式。
- en: Setting Paging of Results
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置结果的分页
- en: One way to adjust the output format is to specify how `psql` handles scrolling
    through lengthy query results, known as *paging*. By default, if your results
    return more rows than will fit on one screen, `psql` will display the first screen’s
    worth of rows and then let you scroll through the rest. For example, [Listing
    18-4](#listing18-4) shows what happens at the `psql` prompt when we remove the
    `LIMIT` clause from the query in [Listing 18-1](#listing18-1).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 调整输出格式的一种方法是指定`psql`如何处理长查询结果的滚动，这被称为*分页*。默认情况下，如果查询结果的行数超过屏幕所能显示的行数，`psql`会显示第一屏的行，然后让你滚动查看剩余的内容。例如，[列表18-4](#listing18-4)显示了当我们从[列表18-1](#listing18-1)中的查询中移除`LIMIT`子句时，在`psql`提示符下发生的情况。
- en: '[PRE16]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Listing 18-4: A query with scrolling results'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 列表18-4：带有滚动结果的查询
- en: Recall that this table has 3,142 rows. [Listing 18-4](#listing18-4) shows only
    the first 12 on the current screen (the number of visible rows depends on your
    terminal configuration). On Windows, the indicator `-- More --` tells you that
    additional results are available, and you can press enter to scroll through them.
    On macOS and Linux, the indicator will be a colon. Scrolling through a few thousand
    rows will take a while. Press q to exit the results and return to the `psql` prompt.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这张表有3,142行。[列表18-4](#listing18-4)仅显示当前屏幕上的前12行（可见行数取决于你的终端配置）。在Windows上，指示符`--
    More --`表示有更多结果，按回车键可以滚动查看它们。在macOS和Linux上，指示符将是一个冒号。滚动浏览几千行会需要一些时间。按q退出结果并返回到`psql`提示符。
- en: 'To bypass manual scrolling and have all your results immediately display, you
    can change the `pager` setting using the `\pset pager` meta-command. Run that
    command at your `psql` prompt, and it should return the message `Pager usage is
    off`. Now when you rerun the query in [Listing 18-3](#listing18-3) with the `pager`
    setting turned off, you should see results like this:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要绕过手动滚动并立即显示所有结果，你可以通过`\pset pager`元命令更改`pager`设置。在`psql`提示符下运行该命令，它应该返回消息`Pager
    usage is off`。现在，当你在[列表18-3](#listing18-3)中重新运行查询并关闭`pager`设置时，你应该能看到类似这样的结果：
- en: '[PRE17]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You’re immediately taken to the end of the results without having to scroll.
    To turn paging back on, run `\pset pager` again.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你会立即跳到结果的末尾，而无需滚动。要重新开启分页，再次运行`\pset pager`命令。
- en: Formatting the Results Grid
  id: totrans-155
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 格式化结果网格
- en: 'You also can use `\pset` with the following options to format the results:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`\pset`结合以下选项来格式化结果：
- en: '**border int**'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**边框 int**'
- en: Use this option to specify whether the results grid has no border (`0`), internal
    lines dividing columns (`1`), or lines around all cells (`2`). For example, `\pset
    border 2` sets lines around all cells.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用此选项指定结果网格是否没有边框（`0`）、是否有内部行分隔列（`1`）或是否在所有单元格周围有线条（`2`）。例如，`\pset border 2`会在所有单元格周围设置线条。
- en: '**format unaligned**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**格式未对齐**'
- en: Use the option `\pset format unaligned` to display the results in lines separated
    by a delimiter rather than in columns, similar to what you would see in a CSV
    file. The separator defaults to a pipe symbol (`|`). You can set a different separator
    using the `fieldsep` command. For example, to set a comma as the separator, run
    `\pset fieldsep ','`. To revert to a column view, run `\pset format aligned`.
    You can use the `psql` meta-command `\a` to toggle between aligned and unaligned
    views.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用选项`\pset format unaligned`可以让结果按分隔符分隔的行来显示，而不是按列显示，这类似于CSV文件的显示方式。分隔符默认为管道符号（`|`）。你可以使用`fieldsep`命令设置不同的分隔符。例如，要设置逗号作为分隔符，可以运行`\pset
    fieldsep ','`。要恢复为列视图，可以运行`\pset format aligned`。你可以使用`psql`元命令`\a`在对齐和非对齐视图之间切换。
- en: '**footer**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**页脚**'
- en: Use this option to toggle the results footer, which displays the result row
    count, on or off.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用此选项切换结果页脚的显示与隐藏，页脚会显示结果的行数。
- en: '**null**'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**null**'
- en: Use this option to set how `psql` displays `NULL` values. By default, they show
    as blanks. You can run `\pset null '(null)'` to replace blanks with `(null)` when
    the column value is `NULL`.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用此选项设置`psql`如何显示`NULL`值。默认情况下，它们会显示为空白。你可以运行`\pset null '(null)'`，当列值为`NULL`时，空白将被替换为`(null)`。
- en: You can explore additional options in the PostgreSQL documentation at [https://www.postgresql.org/docs/current/app-psql.html](https://www.postgresql.org/docs/current/app-psql.html).
    In addition, it’s possible to set up a *.psqlrc* file on macOS or Linux or a *psqlrc.conf*
    file on Windows to hold your configuration preferences and load them each time
    `psql` starts. A good example is provided at [https://www.citusdata.com/blog/2017/07/16/customizing-my-postgres-shell-using-psqlrc/](https://www.citusdata.com/blog/2017/07/16/customizing-my-postgres-shell-using-psqlrc/).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在PostgreSQL文档中探索更多选项，网址为[https://www.postgresql.org/docs/current/app-psql.html](https://www.postgresql.org/docs/current/app-psql.html)。此外，你可以在macOS或Linux上设置*.psqlrc*文件，或在Windows上设置*psqlrc.conf*文件，来保存你的配置偏好，并在每次`psql`启动时加载它们。一个很好的示例可以参考[https://www.citusdata.com/blog/2017/07/16/customizing-my-postgres-shell-using-psqlrc/](https://www.citusdata.com/blog/2017/07/16/customizing-my-postgres-shell-using-psqlrc/)。
- en: Viewing Expanded Results
  id: totrans-166
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 查看扩展结果
- en: Sometimes, it’s helpful to view results arranged not in the typical table style
    of rows and columns, but instead in a vertical list. This is useful when the number
    of columns is too big to fit on-screen in the normal horizontal results grid and
    also for scanning values in columns row by row. In `psql`, you can switch to a
    vertical list view using the `\x` (for *expanded*) meta-command. The best way
    to understand the difference between normal and expanded view is by looking at
    an example. [Listing 18-5](#listing18-5) shows the normal display you see when
    querying the `grades` table in Chapter 17 using `psql`.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，将结果以垂直列表的方式显示比传统的行列式表格显示更为有用，尤其当列的数量太多，无法在屏幕上以常规的水平网格显示时，或者你需要逐行扫描列中的值时。在`psql`中，你可以使用`\x`（表示*扩展*）元命令切换到垂直列表视图。理解正常显示和扩展视图之间的差异的最好方法是查看一个示例。[Listing
    18-5](#listing18-5)显示的是你在第17章中查询`grades`表时看到的正常显示。
- en: '[PRE18]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Listing 18-5: Normal display of the `grades` table query'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 'Listing 18-5: `grades`表查询的正常显示'
- en: To change to the expanded view, enter `\x` at the `psql` prompt, which should
    display the message `Expanded display is on`. Then, when you run the same query
    again, you should see the expanded results, as shown in [Listing 18-6](#listing18-6).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要切换到扩展视图，在`psql`提示符下输入`\x`，此时应显示消息`Expanded display is on`。然后，当你再次运行相同的查询时，你应该能看到扩展后的结果，如[Listing
    18-6](#listing18-6)所示。
- en: '[PRE19]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Listing 18-6: Expanded display of the `grades` table query'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 'Listing 18-6: `grades`表查询的扩展显示'
- en: The results appear in vertical blocks separated by record numbers. Depending
    on your needs and the type of data you’re working with, this format might be easier
    to read. You can revert to column display by entering `\x` again at the `psql`
    prompt. In addition, setting `\x auto` will make PostgreSQL automatically display
    the results in a table or expanded view based on the size of the output.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 结果以垂直块的形式显示，每个块之间用记录号分隔。根据你的需求和处理的数据类型，这种格式可能更容易阅读。你可以通过在`psql`提示符下再次输入`\x`来恢复列显示。另外，设置`\x
    auto`会根据输出的大小自动让PostgreSQL选择以表格或扩展视图显示结果。
- en: Next, let’s explore how to use `psql` to dig into database information.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们探讨如何使用`psql`来挖掘数据库信息。
- en: Meta-Commands for Database Information
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据库信息的元命令
- en: You can have `psql` display details about databases, tables, and other objects
    via a particular set of meta-commands. To see how these work, we’ll explore the
    meta-command that displays the tables in your database, including how to append
    a plus sign (`+`) to the command to expand the output and add an optional pattern
    to filter the output.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过一组特定的元命令，让`psql`显示有关数据库、表格和其他对象的详细信息。为了演示这些命令的使用，我们将探索一个显示数据库中表格的元命令，包括如何在命令后添加加号（`+`）来扩展输出，以及如何添加一个可选的模式来过滤输出。
- en: To see a list of tables, you can enter `\dt` ``at the `psql` prompt. Here’s
    a snippet of the output on my system:``
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看表格列表，你可以在`psql`提示符下输入`\dt`。以下是我系统上输出的一个片段：
- en: '[PRE20]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
