- en: '![](Images/chapterart.png)'
  id: totrans-0
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: '13'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Tic Tac Toe
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 井字游戏
- en: '![Alphabet-I](Images/Alphabet-I.png)n the last chapter, you saw how computer
    games like *Pac-Man* have been used in ML development. Tic Tac Toe (also known
    as Noughts and Crosses, or Xs and Os) has been used to help people learn about
    ML for even longer.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '![Alphabet-I](Images/Alphabet-I.png) 在上一章中，你看到了像*吃豆人*（Pac-Man）这样的计算机游戏是如何用于机器学习发展的。井字游戏（也叫零与叉，或X与O）已经被用来帮助人们了解机器学习更长时间了。'
- en: For example, Donald Michie, a British AI researcher, designed *MENACE*, the
    *Machine Educable Noughts and Crosses Engine*, in 1960 (see [Figure 13-1](#figure13-1)).
    It was one of the first programs that was able to learn how to play Tic Tac Toe
    perfectly. MENACE was demonstrated using matchboxes and colored glass beads, and
    it is a good reminder that many of the principles behind ML have been developed
    over many decades.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，英国人工智能研究员唐纳德·米奇（Donald Michie）于1960年设计了*MENACE*，即*机器可教零与叉引擎*（Machine Educable
    Noughts and Crosses Engine）（见[图 13-1](#figure13-1)）。它是第一个能够学会完美下井字游戏的程序之一。MENACE的演示使用了火柴盒和彩色玻璃珠，这提醒我们，许多机器学习背后的原则是在几十年的时间里发展起来的。
- en: '![f13001](Images/f13001.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![f13001](Images/f13001.png)'
- en: '[Figure 13-1:](#figureanchor13-1) A re-creation of Donald Michie’s Machine
    Educable Noughts and Crosses Engine, or MENACE (source: Matthew Scroggs, [https://commons.wikimedia.org/wiki/File:Mscroggs-MENACE-cropped.jpg](https://commons.wikimedia.org/wiki/File:Mscroggs-MENACE-cropped.jpg))'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 13-1:](#figureanchor13-1) 唐纳德·米奇的机器可教零与叉引擎（MENACE）的重建（来源：Matthew Scroggs，[https://commons.wikimedia.org/wiki/File:Mscroggs-MENACE-cropped.jpg](https://commons.wikimedia.org/wiki/File:Mscroggs-MENACE-cropped.jpg)）'
- en: Tic Tac Toe is not the only game that has been used to drive AI development,
    however. Chess is another good example. In Chapter 1, I mentioned Deep Blue, the
    IBM computer that beat the chess grandmaster Garry Kasparov. This followed decades
    of work to build computers that could play chess. As early as the 1950s, mathematician
    Alan Turing wrote a paper called “Digital Computers Applied to Games” in which
    he asked, “Could one make a machine to play chess, and to improve its play, game
    by game, profiting from its experience?”
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，井字游戏并不是唯一被用于推动人工智能发展的游戏。象棋是另一个很好的例子。在第一章中，我提到了IBM的计算机深蓝（Deep Blue），它击败了国际象棋世界冠军加里·卡斯帕罗夫。这是几十年努力的结果，目的是让计算机能够下象棋。早在1950年代，数学家艾伦·图灵就写了一篇名为《数字计算机在游戏中的应用》的论文，他在其中提出了一个问题：“是否能制造出一种机器来下象棋，并且能够通过不断的游戏积累经验，逐步提高其棋艺？”
- en: In more recent years, the AI community has turned its attention to more complex
    games, like the board game *Go**. Because of the huge number of potential moves
    and strategies in *Go*, it’s impossible to rely on the “brute-force” approach
    of computers like Deep Blue (which examine all possible future moves and positions).
    Google DeepMind’s computer AlphaGo achieved a milestone in AI research in 2016,
    when it defeated *Go* world champion Lee Sedol.*
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，人工智能社区将注意力转向了更复杂的游戏，比如围棋（*Go*）。由于围棋中有极其庞大的潜在走法和策略，依靠像深蓝那样的“暴力破解”方法（计算机检查所有可能的未来走法和棋局）是行不通的。2016年，Google
    DeepMind的计算机AlphaGo在人工智能研究中取得了一个里程碑，当时它击败了围棋世界冠军李世石（*Go*）。
- en: '*The tools for creating neural networks are getting easier to use, and our
    computers are becoming faster and more powerful, moving beyond the realms of AI
    students and researchers. If you do a web search for “Super Mario neural network,”
    you’ll find dozens of examples and tutorials of training ML models to play games
    like *Super Mario World*.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*创建神经网络的工具变得越来越容易使用，而我们的计算机也变得更快更强大，超越了人工智能学生和研究人员的领域。如果你在网上搜索“超级马里奥神经网络”，你会找到数十个训练机器学习模型玩像*超级马里奥世界*这样的游戏的例子和教程。'
- en: In this chapter, though, we’ll stick to the basics. We’ll be building a simplified
    version of Donald Michie’s MENACE design in Scratch and training an ML model to
    play Tic Tac Toe (see [Figure 13-2](#figure13-2)).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在本章中，我们将专注于基础内容。我们将在Scratch中构建唐纳德·米奇的MENACE设计的简化版本，并训练一个机器学习模型来玩井字游戏（见[图
    13-2](#figure13-2)）。
- en: '![f13002](Images/f13002.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![f13002](Images/f13002.png)'
- en: '[Figure 13-2:](#figureanchor13-2) Tic Tac Toe is a great game for ML research.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 13-2:](#figureanchor13-2) 井字游戏是一个非常适合机器学习研究的游戏。'
- en: Let’s get started!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Build Your Project
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建你的项目
- en: You probably know how to play Tic Tac Toe already, but let’s quickly try it
    out in Scratch so we can plan how to introduce ML into it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经知道如何玩井字游戏，但让我们快速在Scratch中试一试，看看如何规划将机器学习引入其中。
- en: Go to [https://machinelearningforkids.co.uk/scratch3/](https://machinelearningforkids.co.uk/scratch3/)
    and click **Project templates** in the top menu bar, as shown in [Figure 13-3](#figure13-3).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[https://machinelearningforkids.co.uk/scratch3/](https://machinelearningforkids.co.uk/scratch3/)，然后点击顶部菜单栏中的**项目模板**，如[图
    13-3](#figure13-3)所示。
- en: In the list of templates, click **Noughts and Crosses**. The template loads
    a simple Tic Tac Toe game in Scratch. Click the Green Flag to give it a try.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板列表中，点击**圈圈叉叉**。该模板加载了一个简单的井字游戏在 Scratch 中。点击绿色旗帜试一试。
- en: You’re placing crosses (X) and the computer is placing noughts (O). The computer
    strategy isn’t very clever, but you’ll be making it more intelligent in this chapter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你在放置叉（X），计算机在放置圈（O）。计算机的策略并不聪明，但在这一章中，你将让它变得更智能。
- en: '![f13003](Images/f13003.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![f13003](Images/f13003.png)'
- en: '[Figure 13-3:](#figureanchor13-3) Access the project templates from the top
    menu.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 13-3:](#figureanchor13-3) 从顶部菜单访问项目模板。'
- en: Try to figure out the rules that the computer is following. The logic for where
    the computer moves next is all in the Code Area, so you can review the scripts
    there to see if you’re right.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试找出计算机遵循的规则。计算机下一步走的位置逻辑都在代码区，因此你可以查看那里的脚本，看看自己是否猜对了。
- en: 'There are many ways to represent the game board, but to start with we’ll use
    a very simple approach: numbering each of the cells on the board from 1 to 9,
    as shown in [Figure 13-4](#figure13-4).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方式可以表示游戏棋盘，但为了开始，我们将使用一种非常简单的方法：给棋盘上的每个格子编号，从 1 到 9，如[图 13-4](#figure13-4)所示。
- en: '![f13004](Images/f13004.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![f13004](Images/f13004.png)'
- en: '[Figure 13-4:](#figureanchor13-4) One approach to representing the game board
    is to number the cells.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 13-4:](#figureanchor13-4) 一种表示棋盘的方法是给格子编号。'
- en: The cells are also represented with numbers in the Scratch project template,
    as you can see in [Figure 13-5](#figure13-5).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Scratch 项目模板中，格子也通过数字表示，如[图 13-5](#figure13-5)所示。
- en: '![f13005](Images/f13005.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![f13005](Images/f13005.png)'
- en: '[Figure 13-5:](#figureanchor13-5) Game board representation defined in the
    Scratch project template'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 13-5:](#figureanchor13-5) 在 Scratch 项目模板中定义的游戏棋盘表示'
- en: We also need to describe the positions of the noughts and crosses on the board.
    We’ll want to be able to learn from whoever wins (whether it’s noughts or crosses
    who wins a game), so to keep things clear, we’ll use *player* to describe the
    winning moves and *opponent* to describe the losing moves.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要描述棋盘上圈圈和叉叉的位置。我们希望从任何一方的胜利中学习（无论是圈圈还是叉叉获胜），因此为了清晰起见，我们会用*玩家*来描述获胜方的走法，用*对手*来描述失败方的走法。
- en: For example, imagine that the board looked like [Figure 13-6](#figure13-6) early
    in a game that cross (X) ended up winning.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设棋盘在游戏早期的样子像[图 13-6](#figure13-6)，最终是叉（X）获胜。
- en: '![f13006](Images/f13006.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![f13006](Images/f13006.png)'
- en: '[Figure 13-6:](#figureanchor13-6) An example game board state'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 13-6:](#figureanchor13-6) 一个示例游戏棋盘状态'
- en: 'We can describe this board as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以这样描述这个棋盘：
- en: '| Top left | Opponent |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 左上 | 对手 |'
- en: '| Top middle | Player |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 上中 | 玩家 |'
- en: '| Top right | Opponent |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 右上 | 对手 |'
- en: '| Middle left | Empty |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 左中 | 空 |'
- en: '| Middle middle | Empty |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 中中 | 空 |'
- en: '| Middle right | Empty |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 中右 | 空 |'
- en: '| Bottom left | Empty |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 左下 | 空 |'
- en: '| Bottom middle | Empty |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 底部中间 | 空 |'
- en: '| Bottom right | Empty |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 右下 | 空 |'
- en: 'We want to train an ML model so that, given the state of a board like this,
    it can choose where to make the next move. To be able to do that, we’ll need training
    examples of decisions that led to a win. Each example will need to include:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望训练一个机器学习模型，使得给定像这样的棋盘状态时，它能够选择下一步走在哪里。为了实现这一目标，我们需要训练示例，这些示例包含了导致胜利的决策。每个示例需要包括：
- en: What the board looked like before a move
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 走棋前棋盘的样子
- en: What move was made
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪一步是走的
- en: Training examples will be recorded only for moves made by the player that won
    that game. If you (cross) win the game, you want to train the model with the cross
    (X) moves. If the computer (nought) wins the game, you want to train it with the
    nought (O) moves.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 训练示例仅会记录玩家获胜方的走法。如果你（叉）赢得了游戏，那么你希望用叉（X）的走法来训练模型。如果计算机（圈）赢得了游戏，那么你希望用圈（O）的走法来训练模型。
- en: Prepare Your Game
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备你的游戏
- en: As with the *Pac-Man*–style game in the last chapter, the best way to collect
    training examples isn’t by typing them, but by playing the game yourself.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 和上一章的*吃豆人*风格游戏一样，收集训练示例的最佳方法不是通过键入它们，而是亲自玩游戏。
- en: 'The first step is to prepare the training buckets where you’ll store examples
    of the moves you make. You will need nine training buckets: one for each possible
    choice available at any point in the game.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是准备训练数据桶，用于存储你所做的每个动作的示例。你将需要九个训练数据桶，每个桶对应游戏中的每个可能选择。
- en: Go to *https://machinelearningforkids.co.uk/*. Create a new ML project, name
    it `Tic Tac Toe`, and set it to learn to recognize numbers.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问*https://machinelearningforkids.co.uk/*，创建一个新的机器学习项目，命名为`Tic Tac Toe`，并设置为学习识别数字。
- en: 'Click **Add a value**, type `TopLeft` for the value name, and set **Type of
    value** to **multiple-choice**. Under **Choices**, add three choices: `EMPTY`,
    `PLAYER`, and `OPPONENT`. Then click **Add another value** and add eight more
    multiple-choice values with the same three choices:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加一个值**，输入`TopLeft`作为值名称，将**值类型**设置为**多选**。在**选择项**下，添加三个选择项：`EMPTY`、`PLAYER`和`OPPONENT`。然后点击**添加另一个值**，并添加八个具有相同三个选择项的多选值：
- en: '`TopMiddle`'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`TopMiddle`'
- en: '`TopRight`'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`TopRight`'
- en: '`MiddleLeft`'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MiddleLeft`'
- en: '`MiddleMiddle`'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MiddleMiddle`'
- en: '`MiddleRight`'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MiddleRight`'
- en: '`BottomLeft`'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`BottomLeft`'
- en: '`BottomMiddle`'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`BottomMiddle`'
- en: '`BottomRight`'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`BottomRight`'
- en: Make sure that you spell the choices *exactly* the same for all nine values
    so that the computer will know that the choices available are the same for every
    space on the game board. If you make a typing mistake, click the red X beside
    the choice to delete it, and then add it again.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保所有九个值的选择拼写*完全*相同，这样计算机才能知道每个游戏板上的空格所能选择的内容是相同的。如果你打错字，点击选择旁边的红色X删除它，然后重新添加。
- en: When you’ve finished, your screen should look like [Figure 13-7](#figure13-7).
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成后，你的屏幕应显示如[图 13-7](#figure13-7)所示。
- en: '![f13007](Images/f13007.png)'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![f13007](Images/f13007.png)'
- en: '[Figure 13-7:](#figureanchor13-7) Preparing the project'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[图 13-7:](#figureanchor13-7) 准备项目'
- en: Click **Create**.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**。
- en: Click **Train**, as shown in [Figure 13-8](#figure13-8).![f13008](Images/f13008.png)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**训练**，如[图 13-8](#figure13-8)所示。![f13008](Images/f13008.png)
- en: '[Figure 13-8:](#figureanchor13-8) Click **Train** to prepare the training buckets.'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[图 13-8:](#figureanchor13-8) 点击**训练**来准备训练数据桶。'
- en: Click **Add new label**, as shown in [Figure 13-9](#figure13-9), and create
    nine training buckets to represent the nine cells on the game board. Call them
    `top left`, `top middle`, `top right`, `middle left`, `middle middle`, `middle
    right`, `bottom left`, `bottom middle`, and `bottom right`. (The underscores will
    be added automatically.)![f13009](Images/f13009.png)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加新标签**，如[图 13-9](#figure13-9)所示，并创建九个训练数据桶来表示游戏板上的九个格子。命名为`top left`、`top
    middle`、`top right`、`middle left`、`middle middle`、`middle right`、`bottom left`、`bottom
    middle`和`bottom right`。（下划线将自动添加。）![f13009](Images/f13009.png)
- en: '[Figure 13-9:](#figureanchor13-9) Training buckets for Tic Tac Toe'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[图 13-9:](#figureanchor13-9) 井字游戏的训练数据桶'
- en: These buckets are where your training examples will be stored. For example,
    look back at the state of the game board shown in [Figure 13-6](#figure13-6).
    If the player’s next move (X) went in the middle_middle cell, the board’s state
    would be recorded in the training data as shown in [Figure 13-10](#figure13-10).
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些数据桶是存储你的训练示例的地方。例如，回顾[图 13-6](#figure13-6)所示的游戏板状态。如果玩家的下一步（X）落在`middle_middle`格子中，游戏板的状态将记录在训练数据中，如[图
    13-10](#figure13-10)所示。
- en: '![f13010](Images/f13010.png)'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![f13010](Images/f13010.png)'
- en: '[Figure 13-10:](#figureanchor13-10) A training example for Tic Tac Toe'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[图 13-10:](#figureanchor13-10) 井字游戏的训练示例'
- en: The next step is to collect lots and lots of examples to train an ML model.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下一步是收集大量示例来训练机器学习模型。
- en: Click **Back to project** in the top-left corner of the screen.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击屏幕左上角的**返回项目**。
- en: Click **Make**.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**制作**。
- en: Click **Scratch 3** and then click **straight into Scratch**, as shown in [Figure
    13-11](#figure13-11).![f13011](Images/f13011.png)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Scratch 3**，然后点击**直接进入 Scratch**，如[图 13-11](#figure13-11)所示。![f13011](Images/f13011.png)
- en: '[Figure 13-11:](#figureanchor13-11) Click **straight into Scratch**, even though
    we don’t have an ML model yet.'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[图 13-11:](#figureanchor13-11) 点击**直接进入 Scratch**，即使我们还没有机器学习模型。'
- en: Open the **Noughts and Crosses** project template again.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次打开**井字游戏**项目模板。
- en: The code is the same as when you opened this template before, but now you have
    extra blocks for your project in the Toolbox.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 代码与之前打开该模板时相同，但现在你在工具箱中有额外的模块用于你的项目。
- en: Click the **Stage** backdrop at the bottom right of the screen. In the Code
    Area, find the `setup model labels` script shown in [Figure 13-12](#figure13-12).
    This script sets up constants that are used throughout the project.![f13012](Images/f13012.png)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击屏幕右下角的 **舞台** 背景。在代码区域，找到 [图 13-12](#figure13-12) 中所示的 `setup model labels`
    脚本。该脚本设置了整个项目中使用的常量。![f13012](Images/f13012.png)
- en: '[Figure 13-12:](#figureanchor13-12) Find the `setup model labels` script.'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[图 13-12:](#figureanchor13-12) 找到 `setup model labels` 脚本。'
- en: In the Toolbox, click **Tic Tac Toe** and drag the blocks with the names of
    your training buckets into the `setup model labels` script as shown in [Figure
    13-13](#figure13-13). Make sure the positions match; for example, drag `top_left`
    into the `set top_left to` block.![f13013](Images/f13013.png)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工具箱中，点击 **井字游戏**，并将训练桶的名称块拖入 `setup model labels` 脚本，如 [图 13-13](#figure13-13)
    所示。确保位置匹配；例如，将 `top_left` 拖入 `set top_left to` 块中。![f13013](Images/f13013.png)
- en: '[Figure 13-13:](#figureanchor13-13) Populate the script with the training bucket
    names from your project.'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[图 13-13:](#figureanchor13-13) 使用项目中的训练桶名称填充脚本。'
- en: Scroll in the Code Area to find the `define``add cross moves to training data`
    and `define``add nought moves to training data` script blocks, as shown in [Figure
    13-14](#figure13-14).![f13014](Images/f13014.png)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码区域中滚动，找到 `define` `add cross moves to training data` 和 `define` `add nought
    moves to training data` 脚本块，如 [图 13-14](#figure13-14) 所示。![f13014](Images/f13014.png)
- en: '[Figure 13-14:](#figureanchor13-14) Find the custom `define` blocks.'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[图 13-14:](#figureanchor13-14) 找到自定义的 `define` 块。'
- en: From the **Tic Tac Toe** group in the Toolbox, drag an `add training data` block
    into both of the `define` scripts, as shown in [Figure 13-15](#figure13-15).![f13015](Images/f13015.png)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工具箱的 **井字游戏** 组中，将 `add training data` 块拖入两个 `define` 脚本中，如 [图 13-15](#figure13-15)
    所示。![f13015](Images/f13015.png)
- en: '[Figure 13-15:](#figureanchor13-15) Add training data to both of the `define`
    scripts.'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[图 13-15:](#figureanchor13-15) 向两个 `define` 脚本中添加训练数据。'
- en: Update the `add training data` blocks as shown in [Figure 13-16](#figure13-16).
    The orange blocks you need are ready for you in the project template, immediately
    below where they need to go. *Starting from the left*,drag each block into the
    space above it*.*![f13016](Images/f13016.png)
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照 [图 13-16](#figure13-16) 中所示更新 `add training data` 块。你需要的橙色块已经在项目模板中准备好，紧挨着它们应该放置的位置。*从左侧开始*，将每个块拖入它上方的空白位置。![f13016](Images/f13016.png)
- en: '[Figure 13-16:](#figureanchor13-16) Populate the training data blocks.'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[图 13-16:](#figureanchor13-16) 填充训练数据块。'
- en: Double-check the scripts. The moves from the history cross lists should appear
    in the `add cross moves to training data` script, as shown in [Figure 13-17](#figure13-17).
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仔细检查脚本。历史交叉列表中的移动应该出现在 `add cross moves to training data` 脚本中，如 [图 13-17](#figure13-17)
    所示。
- en: '![f13017](Images/f13017.png)'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![f13017](Images/f13017.png)'
- en: '[Figure 13-17:](#figureanchor13-17) Check that you’ve matched the cross blocks
    with the cross script.'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[图 13-17:](#figureanchor13-17) 检查你是否已将交叉块与交叉脚本匹配。'
- en: Likewise, the moves from the history nought lists should be used in the `add
    nought moves to training data` script.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同样，历史圈子列表中的移动应该在 `add nought moves to training data` 脚本中使用。
- en: The names for the spaces on the game board should also match. For example, the
    `top-middle` move goes into the `TopMiddle` space, as shown in [Figure 13-18](#figure13-18).
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 游戏棋盘上的位置名称也应该匹配。例如，`top-middle` 移动应该进入 `TopMiddle` 位置，如 [图 13-18](#figure13-18)
    所示。
- en: '![f13018](Images/f13018.png)'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![f13018](Images/f13018.png)'
- en: '[Figure 13-18:](#figureanchor13-18) Check that you’ve matched the names for
    the game board spaces.'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[图 13-18:](#figureanchor13-18) 检查你是否正确匹配了游戏棋盘位置的名称。'
- en: Make sure you fill all of the spaces in the blocks. You’ll need to scroll to
    the right to do this, as you can see in [Figure 13-19](#figure13-19).
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保你填充了所有块中的空白。你需要向右滚动才能完成这项操作，正如你在 [图 13-19](#figure13-19) 中看到的那样。
- en: '![f13019](Images/f13019.png)'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![f13019](Images/f13019.png)'
- en: '[Figure 13-19:](#figureanchor13-19) Make sure you fill in all of the spaces.'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[图 13-19:](#figureanchor13-19) 确保你填写了所有空白位置。'
- en: Now find the `when I receive game over` script, as shown in [Figure 13-20](#figure13-20).
    This script runs at the end of each game and is responsible for calling the `add
    moves to training data` scripts you’ve just set up.![f13020](Images/f13020.png)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在找到 `when I receive game over` 脚本，如 [图 13-20](#figure13-20) 所示。该脚本在每局游戏结束时运行，负责调用你刚设置的
    `add moves to training data` 脚本。![f13020](Images/f13020.png)
- en: '[Figure 13-20:](#figureanchor13-20) Find the `when I receive``game over` script.'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[图 13-20:](#figureanchor13-20) 找到 `when I receive` `game over` 脚本。'
- en: Add a new `train new machine learning model` block to the end of the `when I
    receive game over` script, as shown in [Figure 13-21](#figure13-21).
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`when I receive game over`脚本的末尾添加一个新的`train new machine learning model`区块，如[图
    13-21](#figure13-21)所示。
- en: '![f13021](Images/f13021.png)'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![f13021](Images/f13021.png)'
- en: '[Figure 13-21:](#figureanchor13-21) Train a new ML model after every game.'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[图 13-21:](#figureanchor13-21) 每局游戏后训练一个新的机器学习模型。'
- en: Now, at the end of every game, the winner’s moves will be added to the training
    buckets, and you’ll use that updated set of training examples to train a new ML
    model. This means that your ML model should get a little smarter, and a little
    better, after every game you play.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每局游戏结束时，获胜者的操作将被添加到训练桶中，你将使用这个更新后的训练示例集来训练一个新的机器学习模型。这意味着，经过每一局游戏后，你的机器学习模型应该变得更聪明，表现得更好。
- en: Train Your Model
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 训练你的模型
- en: It’s time to play!
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候玩游戏了！
- en: Click the full-screen icon and then the Green Flag in the controls at the top
    right of the screen. Play *one* game of Tic Tac Toe, as shown in [Figure 13-22](#figure13-22).![f13022](Images/f13022.png)
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击全屏图标，然后点击屏幕右上角的绿色旗帜。像[图 13-22](#figure13-22)所示那样，玩一局井字游戏。![f13022](Images/f13022.png)
- en: '[Figure 13-22:](#figureanchor13-22) Play a game of Tic Tac Toe.'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[图 13-22:](#figureanchor13-22) 玩一局井字游戏。'
- en: After the game, click **Back to project** and then **Train**. You should see
    all of the moves made by the winning player, as shown in [Figure 13-23](#figure13-23).![f13023](Images/f13023.png)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 游戏结束后，点击**返回项目**，然后点击**训练**。你应该能看到获胜玩家的所有操作，如[图 13-23](#figure13-23)所示。![f13023](Images/f13023.png)
- en: '[Figure 13-23:](#figureanchor13-23) Compare the training data with the game
    in [Figure 13-22](#figure13-22).'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[图 13-23:](#figureanchor13-23) 比较训练数据与[图 13-22](#figure13-22)中的游戏。'
- en: Now that you have an ML model, it’s time to update the Scratch game so that
    the computer can use the model to decide where to make its moves. Scroll through
    the Code Area to find the `define``use machine learning model` script, as shown
    in [Figure 13-24](#figure13-24).![f13024](Images/f13024.png)
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你有了一个机器学习模型，是时候更新Scratch游戏，让计算机能够使用模型来决定它的下一步行动。在代码区域滚动，找到`define``use machine
    learning model`脚本，如[图 13-24](#figure13-24)所示。![f13024](Images/f13024.png)
- en: '[Figure 13-24:](#figureanchor13-24) Find the `define use machine learning model`
    script.'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[图 13-24:](#figureanchor13-24) 找到`define use machine learning model`脚本。'
- en: Update the script as shown in [Figure 13-25](#figure13-25) so that it uses your
    ML model to recognize the best move for the computer to make.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新脚本，如[图 13-25](#figure13-25)所示，使其使用你的机器学习模型来识别计算机的最佳移动。
- en: '![f13025](Images/f13025.png)'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![f13025](Images/f13025.png)'
- en: '[Figure 13-25:](#figureanchor13-25) Add the `recognise numbers``(label)` block
    to the script.'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[图 13-25:](#figureanchor13-25) 将`recognise numbers``(label)`区块添加到脚本中。'
- en: Drag the orange blocks into the `recognise numbers``(label)` block, as shown
    in [Figure 13-26](#figure13-26). As before, these are ready for you in the template
    immediately underneath where they should go. This code block will give the game
    board’s current state to the ML model so that the model can use that information
    to recognize the best next move.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将橙色区块拖到`recognise numbers``(label)`区块中，如[图 13-26](#figure13-26)所示。如之前所述，这些区块已经在它们应该放置的位置下方的模板中准备好了。这个代码块将提供游戏板当前的状态给机器学习模型，以便模型能用这些信息识别出最佳的下一步。
- en: Make sure that you add all nine blocks, for all nine spaces on the game board,
    and work from left to right. Also be sure that the block names match up. For example,
    `current state top-middle` goes into the `TopMiddle` space.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保你添加了所有九个区块，覆盖游戏板上的所有九个空间，并从左到右进行操作。还要确保区块名称匹配。例如，`current state top-middle`应放入`TopMiddle`位置。
- en: '![f13026](Images/f13026.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![f13026](Images/f13026.png)'
- en: '[Figure 13-26:](#figureanchor13-26) Make sure that you match the block names
    correctly.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 13-26:](#figureanchor13-26) 确保正确匹配区块名称。'
- en: Test Your Game
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试你的游戏
- en: It’s time to test your project!
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候测试你的项目了！
- en: Because you’ve coded your project to learn as you play, you should see the computer
    get better at the game over time. But how can you verify if that actually happens?
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你已经编写了让计算机在游戏中学习的项目代码，你应该看到计算机随着时间的推移变得越来越擅长这个游戏。但你怎么验证这一点是否发生呢？
- en: One way is to play a lot of games, keep a count of the number of times the computer
    wins, and plot whether the number increases with the amount of training you gave
    the ML model.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一种方法是玩很多游戏，记录计算机获胜的次数，并绘制随着训练量增加，计算机获胜次数是否增加的图表。
- en: I played 300 games of Tic Tac Toe and counted the number of matches that I won,
    lost, and tied. I plotted the results in the bar chart shown in [Figure 13-27](#figure13-27).
    Each column represents 10 games of Tic Tac Toe. Green represents games that I
    won. Orange represents games that ended in a tie. Red represents games won by
    the ML system.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我玩了 300 场井字棋游戏，并统计了我赢、输、平的场次。我将结果绘制在 [图 13-27](#figure13-27) 中的柱状图中。每一列代表 10
    场井字棋游戏。绿色表示我赢得的游戏。橙色表示平局的游戏。红色表示机器学习系统赢得的游戏。
- en: The bar on the far left represents the first 10 games that I played. I won all
    10 of them.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 最左侧的柱状图代表我玩过的前 10 场游戏。我赢了所有这 10 场游戏。
- en: The next bar represents the next 10 games that I played. I won all 10 of those,
    too.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 下一根柱状图代表我接下来的 10 场游戏。我同样赢了所有 10 场。
- en: The bar on the far right represents the last 10 games that I played. I won 2
    games, tied 4 games, and lost 4 games.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最右侧的柱状图代表我玩过的最后 10 场游戏。我赢了 2 场，打平了 4 场，输了 4 场。
- en: '![f13027](Images/f13027.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![f13027](Images/f13027.png)'
- en: '[Figure 13-27:](#figureanchor13-27) The results from Tic Tac Toe games that
    I played'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 13-27：](#figureanchor13-27) 我玩过的井字棋游戏的结果'
- en: My first 10 games were very easy to win. The computer made foolish moves, and
    I didn’t have to try hard to win. By my last 10 games, however, it was harder
    to win. I had to concentrate and not make a single mistake to win a game. Although
    my feelings can’t be shown on the graph, it *felt* to me like the computer was
    getting better as I played.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我的前 10 场游戏非常容易赢。计算机做出了愚蠢的举动，我不需要费力就能获胜。然而，到我最后的 10 场游戏时，获胜变得更加困难。我必须集中精力，避免犯任何错误才能赢得比赛。虽然图表上无法显示我的感受，但我*感觉*计算机在我玩的时候变得越来越强。
- en: Every ML project will go a little differently, so try training your own model
    and measuring how your project learns and improves. Hopefully you’ll see that
    the more training examples you collect, the better your ML model performs. But
    you’ll almost certainly see some variation in that, as I did.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 每个机器学习项目的进展都会有所不同，因此尝试训练自己的模型并衡量您的项目是如何学习和改进的。希望你会发现，收集的训练样本越多，机器学习模型的表现越好。但你几乎肯定会看到一些变化，正如我所经历的那样。
- en: Review and Improve Your Project
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查并改进您的项目
- en: You created an ML system that learns to play Tic Tac Toe by competing against
    you. The biggest challenge with training the system yourself is the time it takes
    to play hundreds of training games. Are there more efficient ways to get more
    training examples?
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建了一个机器学习系统，通过与您对弈来学习玩井字棋。训练这个系统的最大挑战是需要花费大量时间玩数百场训练游戏。是否有更高效的方法来获取更多的训练样本？
- en: One common way is to get more people to help. Imagine if, instead of playing
    the 300 games myself, I had saved my Scratch project and gave the project file
    to 30 friends and asked them to play 10 games each. Dividing the work would have
    made training much easier, as playing only 10 games would be very quick for each
    person.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一种常见的方法是让更多的人帮忙。想象一下，如果不是自己玩 300 场游戏，而是保存了我的 Scratch 项目并将项目文件交给 30 个朋友，让他们每人玩
    10 场游戏。分担工作会使训练变得更加轻松，因为每个人只需要玩 10 场游戏就能很快完成。
- en: Now imagine if I could get 300 people to help, or 3,000!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在想象一下，如果我能找到 300 个人来帮忙，或者 3,000 个人！
- en: Hopefully you can see the benefits of spreading the work of training an ML model
    across a large number of people. This is sometimes described as *crowdsourcing*.
    There are some challenges with that, too, like being able to find a large group
    of people, coordinating them, explaining what you want to all of them, making
    sure they all do what you want and don’t train your ML model to do things you
    don’t want, and so on. But even so, using many people for training is still the
    best option for a lot of complicated projects.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你能看到将机器学习模型的训练工作分摊给大量人群的好处。这有时被称为 *众包*。当然，这也有一些挑战，比如如何找到一大群人，协调他们，向他们解释你想要的内容，确保他们都按照要求完成任务，并且不会让你的机器学习模型做出你不希望它做的事情，等等。但即便如此，对于很多复杂项目来说，使用大量人力进行训练仍然是最好的选择。
- en: What You Learned
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你学到了什么
- en: In this chapter, you learned that Tic Tac Toe, or Noughts and Crosses, has been
    used to help people understand ML for decades. You trained an ML model to recognize
    numbers and built a Tic Tac Toe board with numbered cells representing each move.
    This project was based on the 1960 work of British AI researcher Donald Michie,
    who used matchboxes and glass beads in his MENACE project. Each matchbox represented
    a possible state of the game board, similar to the examples that you collected
    in your training data. The number of beads in the matchboxes was like the number
    of times an example shows up in one of the training buckets.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章，你了解到井字棋（Tic Tac Toe），也叫圈圈叉叉（Noughts and Crosses），已经被用来帮助人们理解机器学习数十年了。你训练了一个机器学习模型来识别数字，并构建了一个井字棋棋盘，棋盘上的编号单元格代表每一次走法。这个项目基于1960年英国人工智能研究员唐纳德·米奇（Donald
    Michie）的工作，他在MENACE项目中使用了火柴盒和玻璃珠。每个火柴盒代表游戏棋盘的一个可能状态，类似于你在训练数据中收集的示例。火柴盒中的玻璃珠数量就像一个示例出现在训练桶中的次数。
- en: You also saw the importance of having lots of training examples to improve your
    ML model’s performance over time. Because the training set is updated with the
    winner’s moves after each game, the model gradually gets better and more difficult
    to beat. You learned that it can be useful to crowdsource, or share the work of
    training the model across a large group of people, to save yourself some time
    and effort.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你还看到了拥有大量训练示例在随着时间推移提高机器学习模型性能方面的重要性。因为每场比赛后，训练集会更新赢家的走法，所以模型逐渐变得更强大，越来越难以击败。你了解到，众包或将训练模型的工作分配给一大群人，可以节省一些时间和精力，十分有用。
- en: In the next chapter, you’ll start to learn about how ML projects can go wrong.*
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将开始学习机器学习项目可能出错的原因。*
