- en: '**1'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1**'
- en: WHAT YOU NEED TO KNOW TO WRITE GREAT CODE**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 编写伟大代码所需了解的知识**
- en: '![Image](../images/comm1.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/comm1.jpg)'
- en: The *Write Great Code (WGC)* series will teach you how to write code you can
    be proud of; code that will impress other programmers, satisfy customers, and
    prove popular with users; and code that people (customers, your boss, and so on)
    won’t mind paying top dollar to obtain. In general, the books in the *[WGC](gloss01.xhtml#gloss01_262)*
    series will discuss how to write software that achieves legendary status, eliciting
    the awe and admiration of other programmers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*写出伟大代码（WGC）*系列将教你如何编写你可以自豪的代码；那些会让其他程序员印象深刻、让客户满意、并受用户欢迎的代码；那些客户、你的老板等不会介意支付高价购买的代码。通常，*【WGC】(gloss01.xhtml#gloss01_262)*
    系列中的书籍将讨论如何编写能达到传奇地位的软件，赢得其他程序员的敬畏与钦佩。'
- en: '**1.1 The Write Great Code Series**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**1.1 写出伟大代码系列**'
- en: '*Write Great Code, Volume 1: Understanding the Machine* (*[WGC1](gloss01.xhtml#gloss01_263)*
    hereafter) is the first of six books in the *[WGC](gloss01.xhtml#gloss01_262)*
    series. Writing great code requires a combination of knowledge, experience, and
    skill that programmers usually obtain only after years of mistakes and discoveries.
    The purpose of this series is to share with both new and experienced programmers
    a few decades’ worth of observations and experience. I hope that these books will
    help reduce the time and frustration it takes to learn things “the hard way.”'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*写出伟大代码，第1卷：理解机器*（以下简称*【WGC1】(gloss01.xhtml#gloss01_263)*）是*【WGC】(gloss01.xhtml#gloss01_262)*
    系列中的第一本书。编写伟大代码需要知识、经验和技能的结合，而程序员通常只有在经过多年的错误与发现后，才能获得这些。这个系列的目的是与新手和有经验的程序员分享几几十年的观察和经验。我希望这些书能够帮助减少学习“吃苦头”的时间和挫折。'
- en: This book, *[WGC1](gloss01.xhtml#gloss01_263)*, fills in the low-level details
    that are often skimmed over in a typical computer science or engineering curriculum.
    These details are the foundation for the solutions to many problems, and you can’t
    write efficient code without this information. Though I’m attempting to keep each
    book independent, *[WGC1](gloss01.xhtml#gloss01_263)* might be considered a prerequisite
    for the subsequent volumes in the series.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本书，*【WGC1】(gloss01.xhtml#gloss01_263)*，填补了在典型计算机科学或工程课程中常常被忽略的低层次细节。这些细节是许多问题解决方案的基础，没有这些信息，你无法编写高效的代码。虽然我尽力使每本书独立成章，*【WGC1】(gloss01.xhtml#gloss01_263)*
    可能被视为后续系列卷的先决条件。
- en: '*Write Great Code, Volume 2: Thinking Low-Level, Writing High-Level* (*[WGC2](gloss01.xhtml#gloss01_264)*)
    immediately applies the knowledge from this book. *[WGC2](gloss01.xhtml#gloss01_264)*
    will teach you how to analyze code written in a high-level language to determine
    the quality of the machine code that a compiler would generate for it. Optimizing
    compilers don’t always generate the best machine code possible—the statements
    and data structures you choose in your source files can have a big impact on the
    efficiency of the compiler’s output. *[WGC2](gloss01.xhtml#gloss01_264)* will
    teach you how to write efficient code without resorting to assembly language.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*写出伟大代码，第2卷：低级思维，高级编程*（*【WGC2】(gloss01.xhtml#gloss01_264)*）立即应用本书中的知识。*【WGC2】(gloss01.xhtml#gloss01_264)*
    将教你如何分析用高级语言编写的代码，以确定编译器为其生成的机器代码的质量。优化编译器并不总是生成最好的机器代码——你在源代码文件中选择的语句和数据结构会对编译器输出的效率产生很大影响。*【WGC2】(gloss01.xhtml#gloss01_264)*
    将教你如何编写高效的代码，而无需使用汇编语言。'
- en: 'There are many attributes of great code besides efficiency, and the third book
    in this series, *Write Great Code, Volume 3: Engineering Software* (*[WGC3](gloss01.xhtml#gloss01_265)*),
    will cover some of those. *[WGC3](gloss01.xhtml#gloss01_265)* will discuss software
    development metaphors, development methologies, types of developers, system documentation,
    and the Unified Modeling Language (UML). *[WGC3](gloss01.xhtml#gloss01_265)* provides
    the basis for personal software engineering.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 伟大代码的属性不仅仅是效率，系列中的第三本书，*写出伟大代码，第3卷：工程化软件*（*【WGC3】(gloss01.xhtml#gloss01_265)*），将涵盖其中一些内容。*【WGC3】(gloss01.xhtml#gloss01_265)*
    将讨论软件开发的隐喻、开发方法论、开发人员类型、系统文档以及统一建模语言（UML）。*【WGC3】(gloss01.xhtml#gloss01_265)*
    为个人软件工程奠定了基础。
- en: 'Great code begins with a great design. *Write Great Code, Volume 4: Designing
    Great Code* (*[WGC4](gloss01.xhtml#gloss01_266)*), will describe the process of
    analysis and design (both structured and object-oriented). *[WGC4](gloss01.xhtml#gloss01_266)*
    will teach you how to translate an initial concept into a working design for your
    software systems.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 优秀的代码始于优秀的设计。*《编写伟大代码，第4卷：设计伟大代码》* (*[WGC4](gloss01.xhtml#gloss01_266)*) 将描述分析和设计的过程（包括结构化和面向对象设计）。*
    [WGC4](gloss01.xhtml#gloss01_266) * 将教你如何将初步概念转化为工作中的软件系统设计。
- en: '*Write Great Code, Volume 5: Great Coding* (*[WGC5](gloss01.xhtml#gloss01_267)*)
    will teach you how to create source code that others can easily read and maintain,
    as well as how to improve your productivity without the burden of the “busy work”
    that many software engineering books discuss.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*《编写伟大代码，第5卷：伟大的编码》* (*[WGC5](gloss01.xhtml#gloss01_267)*) 将教你如何创建其他人可以轻松阅读和维护的源代码，以及如何在没有许多软件工程书籍所讨论的“繁琐工作”负担的情况下，提高生产力。'
- en: 'Great code *works*. Therefore, I’d be remiss not to include a book on testing,
    debugging, and quality assurance. Few programmers properly test their code. This
    generally isn’t because they find testing boring or beneath them, but because
    they don’t know *how* to test their programs, eradicate defects, and ensure the
    quality of their code. To help overcome this problem, *Write Great Code, Volume
    6: Testing, Debugging, and Quality Assurance* (*[WGC6](gloss01.xhtml#gloss01_268)*)
    will describe how to efficiently test your applications without all the drudgery
    engineers normally associate with this task.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 优秀的代码*有效*。因此，我不能不包括一本关于测试、调试和质量保证的书。很少有程序员能够正确地测试他们的代码。这通常不是因为他们觉得测试无聊或不值得做，而是因为他们不知道*如何*测试他们的程序、消除缺陷并确保代码质量。为了帮助克服这个问题，*《编写伟大代码，第6卷：测试、调试和质量保证》*
    (*[WGC6](gloss01.xhtml#gloss01_268)*) 将描述如何高效地测试你的应用程序，而不需要那些工程师通常与此任务相关的繁琐工作。
- en: '**1.2 What This Book Covers**'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**1.2 本书涵盖的内容**'
- en: In order to write great code, you need to know how to write efficient code,
    and to write efficient code, you must understand how computer systems execute
    programs and how abstractions in programming languages map to the low-level hardware
    capabilities of the machine.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编写优秀的代码，你需要知道如何编写高效的代码，而要编写高效的代码，你必须理解计算机系统如何执行程序以及编程语言中的抽象如何映射到机器的低级硬件能力。
- en: 'In the past, learning great coding techniques has required learning assembly
    language. While this isn’t a bad approach, it’s overkill. Learning assembly language
    involves learning two related subjects: machine organization, and programming
    in assembly language. The real benefits of learning assembly language come from
    the machine organization component. Thus, this book focuses solely on machine
    organization so you can learn to write great code without the overhead of also
    learning assembly language.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，学习伟大的编码技术需要学习汇编语言。虽然这不是一种不好的方法，但它有些过度。学习汇编语言涉及学习两个相关的主题：机器组织和汇编语言编程。学习汇编语言的真正好处来自于机器组织部分。因此，本书仅关注机器组织部分，让你在不需要学习汇编语言的情况下，能够编写出优秀的代码。
- en: Machine organization is a subset of computer architecture that covers low-level
    data types, internal CPU organization, memory organization and access, low-level
    machine operations, mass storage organization, peripherals, and how computers
    communicate with the rest of the world. This book concentrates on those parts
    of computer architecture and machine organization that are visible to the programmer
    or are helpful for understanding why system architects chose a particular system
    design. The goal of learning machine organization, and of this book, is not to
    enable you to design your own CPU or computer system, but to equip you to make
    the most efficient use of existing computer designs. Let’s do a quick run-through
    of the specific topics we’ll cover.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 机器组织是计算机体系结构的一个子集，涉及低级数据类型、内部CPU组织、内存组织和访问、低级机器操作、大容量存储组织、外设以及计算机如何与外部世界通信。本书专注于计算机体系结构和机器组织中那些对程序员可见或有助于理解系统架构师选择特定系统设计原因的部分。学习机器组织以及本书的目标，并不是让你设计自己的CPU或计算机系统，而是让你能够高效利用现有的计算机设计。接下来，我们将快速浏览一下我们将要涵盖的具体主题。
- en: '[Chapters 2](ch02.xhtml#ch02), [4](ch04.xhtml#ch04), and [5](ch05.xhtml#ch05)
    deal with basic computer data representation—how computers represent signed and
    unsigned integer values, characters, strings, character sets, real values, fractional
    values, and other numeric and non-numeric quantities. Without a solid grasp of
    how computers represent these various data types internally, it’ll be difficult
    for you to understand why some operations that use these data types are so inefficient.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第[2章](ch02.xhtml#ch02)、[4章](ch04.xhtml#ch04)和[5章](ch05.xhtml#ch05)处理了计算机数据表示的基础——计算机如何表示有符号和无符号整数值、字符、字符串、字符集、实数值、分数值以及其他数值和非数值量。如果没有扎实地掌握计算机如何在内部表示这些不同的数据类型，理解为什么某些操作效率低下将会非常困难。
- en: '[Chapter 3](ch03.xhtml#ch03) discusses binary arithmetic and bit operations
    used by most modern computer systems. It also offers several insights into how
    you can write better code by using arithmetic and logical operations in ways not
    normally taught in beginning programming courses. Learning these kinds of standard
    “tricks” is part of how you become a great programmer.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第[3章](ch03.xhtml#ch03)讨论了二进制算术和大多数现代计算机系统使用的位操作。它还提供了若干见解，教你如何通过以通常在初学编程课程中不教授的方式使用算术和逻辑操作来编写更好的代码。学习这些标准的“技巧”是成为一名优秀程序员的过程之一。
- en: '[Chapter 6](ch06.xhtml#ch06) introduces memory, discussing how the computer
    accesses its memory and describing characteristics of memory performance. This
    chapter also covers various machine code *[addressing modes](gloss01.xhtml#gloss01_8)*,
    which CPUs use to access different types of data structures in memory. In modern
    applications, poor performance often occurs because the programmer, unaware of
    the ramifications of memory access in their programs, creates bottlenecks. [Chapter
    6](ch06.xhtml#ch06) addresses many of these ramifications.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第[6章](ch06.xhtml#ch06)介绍了内存，讨论了计算机如何访问内存，并描述了内存性能的特点。本章还涵盖了各种机器码*【寻址模式】(gloss01.xhtml#gloss01_8)*，这些模式是CPU用来访问内存中不同类型数据结构的。在现代应用中，性能不佳往往是因为程序员未意识到内存访问的后果，从而在程序中制造了瓶颈。第[6章](ch06.xhtml#ch06)解决了许多这些问题。
- en: '[Chapter 7](ch07.xhtml#ch07) returns to data types and representation by covering
    composite data types and memory objects: pointers, arrays, records, structures,
    and unions. All too often, programmers use large composite data structures without
    even considering the memory and performance impact of doing so. The low-level
    description of these high-level composite data types will make clear their inherent
    costs, so you can use them sparingly and wisely.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第[7章](ch07.xhtml#ch07)回到数据类型和表示，讨论了复合数据类型和内存对象：指针、数组、记录、结构和联合。程序员往往使用大型复合数据结构，而没有考虑到这样做的内存和性能影响。这些高级复合数据类型的低级描述将清楚地说明它们的固有成本，让你能够明智而节制地使用它们。
- en: '[Chapter 8](ch08.xhtml#ch08) discusses Boolean logic and digital design. This
    chapter provides the mathematical and logical background you’ll need to understand
    the design of CPUs and other computer system components. In particular, this chapter
    discusses how to optimize Boolean expressions, such as those found in common high-level
    programming language statements like `if` and `while`.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第[8章](ch08.xhtml#ch08)讨论了布尔逻辑和数字设计。本章提供了理解CPU及其他计算机系统组件设计所需的数学和逻辑背景。特别地，本章讨论了如何优化布尔表达式，例如常见高级编程语言中的`if`和`while`语句。
- en: Continuing the hardware discussion from [Chapter 8](ch08.xhtml#ch08), [Chapter
    9](ch09.xhtml#ch09) discusses CPU architecture. A basic understanding of CPU design
    and operation is essential if you want to write great code. By writing your code
    in a manner consistent with how a CPU will execute it, you’ll get much better
    performance using fewer system resources.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 延续第[8章](ch08.xhtml#ch08)的硬件讨论，第[9章](ch09.xhtml#ch09)讨论了CPU架构。如果你想写出高效的代码，基本理解CPU的设计和运行原理是必不可少的。通过以符合CPU执行方式的方式编写代码，你将能够在使用更少系统资源的情况下获得更好的性能。
- en: '[Chapter 10](ch10.xhtml#ch10) discusses CPU instruction set architecture. Machine
    instructions are the primitive units of execution on any CPU, and the duration
    of program execution is directly determined by the number and type of machine
    instructions the CPU must process. Learning how computer architects design machine
    instructions can provide valuable insight into why certain operations take longer
    to execute than others. Once you understand the limitations of machine instructions
    and how the CPU interprets them, you can use this information to turn mediocre
    code sequences into great ones.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[第10章](ch10.xhtml#ch10)讨论了CPU指令集架构。机器指令是任何CPU执行的基本单元，程序执行的持续时间直接由CPU必须处理的机器指令的数量和类型决定。学习计算机架构师如何设计机器指令可以为你提供有价值的见解，帮助理解为什么某些操作比其他操作执行得更慢。一旦你理解了机器指令的局限性以及CPU如何解读这些指令，你就可以利用这些信息将普通的代码序列转化为优秀的代码。'
- en: '[Chapter 11](ch11.xhtml#ch11) returns to the subject of memory, covering memory
    architecture and organization. This chapter is especially important for anyone
    wanting to write fast code. It describes the memory hierarchy and how to maximize
    the use of the cache and other fast memory components. You’ll learn about thrashing
    and how to avoid low-performance memory access in your applications.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[第11章](ch11.xhtml#ch11)回到了内存的话题，介绍了内存架构和组织。对于任何希望编写快速代码的人来说，这一章尤其重要。本章描述了内存层次结构，以及如何最大化缓存和其他高速内存组件的使用。你将学习到抖动问题以及如何避免在应用程序中发生低效的内存访问。'
- en: '[Chapters 12](ch12.xhtml#ch12) through [15](ch15.xhtml#ch15) describe how computer
    systems communicate with the outside world. Many peripheral (input/output) devices
    operate at much lower speeds than the CPU and memory. You could write the fastest-executing
    sequence of instructions possible, and your application would still run slowly
    because you didn’t understand the limitations of the I/O devices in your system.
    These four chapters discuss generic I/O ports, system buses, buffering, handshaking,
    polling, and interrupts. They also explain how to efficiently use many popular
    PC peripheral devices, including keyboards, parallel (printer) ports, serial ports,
    disk drives, tape drives, flash storage, SCSI, IDE/ATA, USB, and sound cards.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[第12章](ch12.xhtml#ch12)至[第15章](ch15.xhtml#ch15)描述了计算机系统如何与外部世界进行通信。许多外围设备（输入/输出设备）的操作速度远低于CPU和内存。你可以编写出最快执行的指令序列，但你的应用程序仍然运行缓慢，因为你没有理解系统中I/O设备的局限性。这四章讨论了通用I/O端口、系统总线、缓冲、握手、轮询和中断。它们还解释了如何高效使用许多流行的PC外围设备，包括键盘、并行（打印机）端口、串行端口、磁盘驱动器、磁带驱动器、闪存、SCSI、IDE/ATA、USB和声卡。'
- en: '**1.3 Assumptions This Book Makes**'
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**1.3 本书假设的前提**'
- en: 'This book was written with certain assumptions about your prior knowledge.
    You’ll reap the greatest benefit from this material if your skill set matches
    the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本书是基于一些关于你先前知识的假设而写的。如果你的技能与以下内容相符，你将从本书中获得最大收益：
- en: You should be reasonably competent in at least one modern programming language.
    This includes C/C++, C#, Java, Swift, Python, Pascal/Delphi (Object Pascal), BASIC,
    and assembly, as well as languages like Ada, Modula-2, and FORTRAN.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你应该在至少一种现代编程语言中具有合理的能力。这包括C/C++、C#、Java、Swift、Python、Pascal/Delphi（对象Pascal）、BASIC和汇编语言，以及像Ada、Modula-2和FORTRAN等语言。
- en: Given a small problem description, you should be capable of working through
    the design and implementation of a software solution for that problem. A typical
    semester or quarter course at a college or university (or several months’ experience
    on your own) should be sufficient background for this book.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定一个小问题描述，你应该能够通过设计和实现软件解决方案来解决该问题。一门典型的大学或学院的学期或季度课程（或几个月的自学经验）应该为你提供足够的背景知识来阅读本书。
- en: At the same time, this book is not language specific; its concepts transcend
    whatever programming language(s) you’re using. Furthermore, this book does not
    assume that you use or know any particular language. To help make the examples
    more accessible, the programming examples rotate among several languages. This
    book explains exactly how the example code operates so that even if you’re unfamiliar
    with the specific programming language, you’ll be able to understand its operation
    by reading the accompanying description.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，本书并不特定于某种语言；其概念超越了你所使用的编程语言。此外，本书并不假设你使用或了解任何特定的语言。为了让示例更易于理解，编程示例轮流使用几种不同的语言。本书详细解释了示例代码的操作方式，即使你不熟悉特定的编程语言，通过阅读附带的描述，你也能理解它的操作。
- en: 'This book uses the following languages and compilers in various examples:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 本书在不同的示例中使用了以下语言和编译器：
- en: 'C/C++: GCC, Microsoft’s Visual C++'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C/C++：GCC，微软的Visual C++
- en: 'Pascal: Embarcadero’s Delphi, Free Pascal'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pascal：Embarcadero的Delphi，Free Pascal
- en: 'Assembly language: Microsoft’s MASM, HLA (High-Level Assembly), Gas (the Gnu
    Assembler; on the PowerPC and ARM)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 汇编语言：微软的MASM、HLA（高级汇编语言）、Gas（Gnu汇编器；在PowerPC和ARM上使用）
- en: Swift 5 (Apple)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Swift 5（苹果）
- en: Java (v6 or later)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java（v6或更高版本）
- en: 'BASIC: Microsoft’s Visual Basic'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BASIC：微软的Visual Basic
- en: Often, the examples appear in multiple languages, so it’s usually safe to ignore
    a specific example if you don’t understand the syntax of the language it uses.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，示例会以多种语言出现，因此如果你不理解某种语言的语法，通常可以忽略特定示例。
- en: '**1.4 Characteristics of Great Code**'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**1.4 伟大代码的特征**'
- en: 'Different programmers will have different definitions for great code, so it’s
    impossible to provide an all-encompassing definition that will satisfy everyone.
    However, nearly everyone will agree that great code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的程序员对伟大代码有不同的定义，因此不可能提供一个能满足所有人需求的全面定义。然而，几乎每个人都会同意，伟大的代码：
- en: Uses the CPU efficiently (that is, it’s fast)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高效使用CPU（也就是说，它很快）
- en: Uses memory efficiently (that is, it’s small)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高效使用内存（也就是说，它很小）
- en: Uses system resources efficiently
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高效使用系统资源
- en: Is easy to read and maintain
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容易阅读和维护
- en: Follows a consistent set of style guidelines
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循一致的风格指南
- en: Uses an explicit design that follows established software engineering conventions
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用遵循已建立的软件工程规范的明确设计
- en: Is easy to enhance
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容易扩展
- en: Is well tested and robust (that is, it works)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经过充分测试且稳健（也就是说，它能正常工作）
- en: Is well documented
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有良好的文档记录
- en: We could easily add dozens of items to this list. Some programmers, for example,
    may feel that great code must be portable, must follow a given set of programming
    style guidelines, or must be written in a certain language (or *not* be written
    in a certain language). Some may feel that great code must be written as simply
    as possible, while others believe that it must be written quickly. Still others
    may feel that great code is created on time and under budget.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以轻松地向这个列表中添加几十个条目。例如，一些程序员可能认为，伟大的代码必须是可移植的，必须遵循特定的编程风格指南，或者必须使用某种语言编写（或者*不能*使用某种语言编写）。一些人可能认为伟大的代码必须尽可能简单地编写，而另一些人则认为它必须迅速编写。还有一些人可能认为，伟大的代码是在按时并且不超预算的情况下创建的。
- en: 'Here is the definition this book uses:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用的定义如下：
- en: Great code is software that is written using a consistent and prioritized set
    of good software characteristics. In particular, great code follows a set of rules
    that guide the decisions a programmer makes when implementing an algorithm as
    source code.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 伟大的代码是通过使用一套一致且优先级明确的良好软件特性来编写的软件。特别是，伟大的代码遵循一套规则，指导程序员在将算法实现为源代码时做出决策。
- en: Two different programs do not have to follow the same set of rules (that is,
    they need not possess the same set of characteristics) in order for both to be
    great. In one environment, the priority might be producing code that’s portable
    across different CPUs and operating systems. In a different environment, efficiency
    (speed) might be the primary goal, and portability might not be an issue. Neither
    program would qualify as great according to the rules of the other, but as long
    as the software consistently follows the guidelines established for that particular
    program, you can argue that it is an example of great code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 两个不同的程序不必遵循相同的规则（也就是说，它们不需要具备相同的特性）才能被认为是伟大的。在某些环境下，优先考虑的是编写可在不同CPU和操作系统之间移植的代码。而在另一些环境下，效率（速度）可能是首要目标，移植性则不那么重要。根据另一个环境的规则，这两个程序都无法被认为是伟大的，但只要软件始终遵循为该特定程序制定的指南，就可以认为它是伟大代码的一个例子。
- en: '**1.5 The Environment for This Book**'
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**1.5 本书的环境**'
- en: Although this book presents generic information, parts of the discussion will
    necessarily be specific to a particular system. Because the Intel Architecture
    PCs are, by far, the most common in use today, this book will use that platform
    when discussing specific system-dependent concepts.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书呈现的是通用信息，但部分讨论必然会涉及到特定系统的内容。由于Intel架构的PC目前仍是使用最广泛的，因此本书在讨论特定系统依赖的概念时将使用该平台。
- en: Most of the specific examples in this book run on a late-model Intel Architecture
    (including AMD) CPU under macOS, Windows, or Linux, with a reasonable amount of
    RAM and other system peripherals normally found on a late-model PC. This book
    attempts to stick with standard library interfaces to the operating system (OS)
    wherever possible, and it makes OS-specific calls only when the alternative is
    to write “less than great” code. The concepts, if not the software itself, will
    apply to Android, Chrome, iOS, Macs, Unix boxes, embedded systems, and even mainframes,
    though you may need to research how to apply a concept to your platform.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的大多数具体示例在现代的Intel架构（包括AMD）CPU上运行，操作系统包括macOS、Windows或Linux，并且具有合理数量的RAM和现代PC通常配备的其他系统外设。本书尽量使用标准库接口与操作系统（OS）交互，只有在替代方案会导致写出“不太优秀”的代码时，才会进行操作系统特定的调用。虽然软件可能不完全适用，但这些概念将适用于Android、Chrome、iOS、Mac、Unix系统、嵌入式系统，甚至大型机，尽管你可能需要研究如何将概念应用到你的平台上。
- en: '**1.6 Additional Tips**'
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**1.6 额外提示**'
- en: 'No single book can completely cover everything you need to know in order to
    write great code. This book, therefore, concentrates on the areas that are most
    pertinent for machine organization, providing the 90 percent solution for those
    who are interested in writing the best possible code. To get that last 10 percent
    you’ll need additional help. Here are some suggestions:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 没有一本书可以完全覆盖你写出优秀代码所需要知道的所有内容。因此，本书集中在与机器组织最相关的领域，为那些希望编写最优代码的人提供90%的解决方案。要获得最后的10%，你将需要额外的帮助。以下是一些建议：
- en: '**Learn assembly language.** Fluency in at least one assembly language will
    fill in many missing details that you just won’t get by learning machine organization
    alone. Unless you plan to use assembly language in your software systems, you
    don’t have to learn it on the platform(s) to which you’re targeting your software.
    Probably your best bet is to learn 80x86 assembly language on a PC, because there
    are lots of great software tools for learning Intel Architecture assembly language
    (for example, HLA) that simply don’t exist on other platforms. The point of learning
    assembly language here is not to write assembly code, but to learn the assembly
    paradigm. If you know 80x86 assembly language, you’ll have a good idea of how
    other CPUs (such as the ARM or the IA-64 family) operate.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**学习汇编语言。**至少精通一门汇编语言将填补你仅通过学习机器组织无法获得的许多细节。除非你计划在你的软件系统中使用汇编语言，否则不必在你为其编写软件的平台上学习它。你最好的选择可能是在PC上学习80x86汇编语言，因为有许多优秀的软件工具可以帮助你学习Intel架构汇编语言（例如HLA），这些工具在其他平台上并不存在。这里学习汇编语言的目的不是编写汇编代码，而是学习汇编的思维方式。如果你了解80x86汇编语言，你将对其他CPU（如ARM或IA-64系列）如何工作有一个很好的了解。'
- en: '**Study advanced computer architecture.** Machine organization is a subset
    of computer architecture, but space limitations prevent full coverage of both
    in this book. While you may not need to know how to design your own CPUs, studying
    computer architecture might teach you something omitted here.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**学习高级计算机架构。**机器组织是计算机架构的一个子集，但由于篇幅限制，本书未能全面覆盖这两者。虽然你可能不需要了解如何设计自己的CPU，但学习计算机架构可能会教你一些这里没有涉及的内容。'
- en: '**1.7 For More Information**'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**1.7 更多信息**'
- en: 'Hennessy, John L., and David A. Patterson. *Computer Architecture: A Quantitative
    Approach*. 5th ed. Waltham, MA: Morgan Kaufmann, 2012.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 亨内西，约翰·L 和大卫·A·帕特森。*《计算机架构：量化方法》*（第5版）。马萨诸塞州沃尔瑟姆：摩根·考夫曼，2012年。
- en: 'Hyde, Randall. *The Art of Assembly Language*. 2nd ed. San Francisco: No Starch
    Press, 2010.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 海德，兰道尔。*《汇编语言的艺术》*（第2版）。旧金山：No Starch Press，2010年。
