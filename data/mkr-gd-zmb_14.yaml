- en: '**C**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**C**'
- en: '**ARDUINO PRIMER**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**ARDUINO 入门**'
- en: '![image](graphics/f0001-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f0001-01.jpg)'
- en: Arduino microcontroller boards are perfectly suited to a postapocalyptic world.
    They’re robust, they’re reliable, and they use very little power. If you’re new
    to Arduino, this appendix will get you started with this great little board so
    you can begin to make your end-of-the-world preparations now and greatly enhance
    your chances of survival.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino微控制器板非常适合末日后的世界。它们坚固耐用、可靠，且功耗极低。如果你是Arduino的新手，本附录将帮助你入门这块出色的小板，让你可以开始为末日做准备，并大大提高生存机会。
- en: '**WHAT IS AN ARDUINO?**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**什么是Arduino？**'
- en: There are various types of Arduino board, but by far the most common is the
    Arduino Uno, and this is the one used for all the projects in this book (see [Figure
    C-1](app03.html#app03fig1)).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino有多种类型的开发板，但最常见的是Arduino Uno，它也是本书中所有项目所使用的板（见[图C-1](app03.html#app03fig1)）。
- en: '![image](graphics/f0c-01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f0c-01.jpg)'
- en: 'Figure C-1: An Arduino Uno R3'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图C-1：一块Arduino Uno R3
- en: The Arduino Uno shown in [Figure C-1](app03.html#app03fig1) is a revision 3
    (R3) board, which is the latest at the time of writing. We’ll have a look at each
    of the components and their uses.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图C-1](app03.html#app03fig1)所示，Arduino Uno是版本3（R3）板，这是写作时的最新版本。我们将逐一查看每个组件及其用途。
- en: 'Let’s start our tour with the USB socket. This serves several purposes: it
    can be used to provide power to the Arduino or to connect the Arduino to your
    computer for programming. It can also serve as a communications link to other
    computers, as in “[Project 13: A Raspberry Pi Control Center](ch08.html#ch00lev1sec137)”
    on [page 140](ch08.html#page_140) where it sends data from the Arduino to a Raspberry
    Pi. The little red button on the Arduino is the Reset button. Pressing it will
    cause the program that is installed on the Arduino to restart.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从USB插口开始。它有几个用途：可以用来为Arduino提供电源，或者将Arduino连接到计算机进行编程。它还可以作为与其他计算机的通信链接，如在[第13项目：树莓派控制中心](ch08.html#ch00lev1sec137)中，见[第140页](ch08.html#page_140)，它将数据从Arduino发送到树莓派。Arduino上的小红色按钮是复位按钮。按下它将使Arduino上安装的程序重新启动。
- en: The connection sockets along both the top and bottom edges of the Arduino are
    where you attach electronics. On the top side of [Figure C-1](app03.html#app03fig1)
    are digital input and output pins, numbered 0 to 13 and configurable as either
    inputs or outputs. Inputs read messages coming in; for example, if you connect
    a switch to a digital input, the input will detect whether the switch is pressed.
    Outputs send information or power out; if you connect an LED to a digital output,
    you can turn it on by switching the output from *low* to *high*. In fact, one
    LED, called the *L* LED, is built onto the board and connected to digital pin
    13.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino的顶部和底部边缘的连接插槽是连接电子元件的地方。在[图C-1](app03.html#app03fig1)的顶部，数字输入和输出引脚编号为0到13，可以配置为输入或输出。输入读取进入的信号；例如，如果你将一个开关连接到数字输入，输入会检测开关是否被按下。输出发送信息或电源；如果你将LED连接到数字输出，你可以通过将输出从*低*切换到*高*来打开它。实际上，一个名为*L*的LED已内置在板上，并连接到数字引脚13。
- en: On the right, the power LED indicates whether the board is powered. The ICSP
    (In-Circuit Serial Programming) header is only for advanced programming of the
    Arduino, and most casual users of Arduino will never use it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧，电源LED指示板是否通电。ICSP（In-Circuit Serial Programming）接口仅用于Arduino的高级编程，大多数Arduino的普通用户不会使用它。
- en: The ATMega328 is a microcontroller integrated circuit (IC) and the brains of
    the Arduino. The chip contains 32KB of flash memory, where you store the program
    you want the Arduino to run.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ATMega328是一个微控制器集成电路（IC），也是Arduino的大脑。该芯片包含32KB的闪存，你可以将你希望Arduino运行的程序存储在其中。
- en: 'On the bottom right of [Figure C-1](app03.html#app03fig1) is a row of analog
    input pins labeled A0 to A5\. Digital inputs can only tell whether something is
    on or off, but analog inputs can actually measure the voltage at the pin, as long
    as the voltage is between 0V and 5V. Analog input pins could be used, for example,
    to measure voltage from a temperature sensor like the one used in “[Project 12:
    Temperature Alarm](ch07.html#ch00lev1sec130)” on [page 131](ch07.html#page_131).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图C-1](app03.html#app03fig1)的右下角，有一排标记为A0到A5的模拟输入引脚。数字输入只能检测某物是开还是关，但模拟输入实际上可以测量引脚上的电压，只要电压在0V到5V之间。例如，模拟输入引脚可以用来测量温度传感器的电压，比如在[第12项目：温度报警](ch07.html#ch00lev1sec130)中使用的传感器，该项目见[第131页](ch07.html#page_131)。
- en: 'The final row of sockets provides miscellaneous power connections. In “[Project
    4: Battery Monitor](ch03.html#ch00lev1sec63)” on [page 53](ch03.html#page_53),
    we use *V[in]* (volts in) to provide power to the Arduino; 5V and GND (or ground),
    which means 0V, are also power connections that you will need when connecting
    external electronics.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一排插座提供了各种电源连接。在[第4项目：电池监视器](ch03.html#ch00lev1sec63)中，位于[第53页](ch03.html#page_53)，我们使用*V[in]*（电压输入）为Arduino提供电源；5V和GND（或地线，即0V）也是在连接外部电子设备时需要的电源连接。
- en: At the bottom left, we have a DC power jack, which is another power connection.
    This can accept anything between 7V and 12V DC. The Arduino will automatically
    accept power from the USB socket and power from the DC connector or *V[in]* socket,
    too.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在左下角，我们有一个直流电源插孔，这是另一个电源连接。它可以接受7V到12V的直流电源。Arduino会自动接受来自USB插口的电源以及来自直流连接器或*V[in]*插口的电源。
- en: '**ARDUINO SOFTWARE**'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Arduino软件**'
- en: The Arduino might not be what you would expect from a computer. It has no operating
    system and no keyboard, monitor, or mouse. This is, of course, good news for the
    survivor who needs to travel light. And while you can reprogram an Arduino as
    many times as you like, it also only ever runs a single program (called a *sketch*)
    at a time. To program the Arduino, you must have the Arduino IDE software installed
    on your normal computer, so we’ll first cover installation and then talk about
    writing programs.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino可能不像你想象的那样是计算机。它没有操作系统，也没有键盘、显示器或鼠标。当然，这对于需要轻装上阵的幸存者来说是个好消息。虽然你可以多次重新编程Arduino，但它一次只能运行一个程序（称为*草图*）。要编程Arduino，您必须在您的普通计算机上安装Arduino
    IDE软件，因此我们将首先介绍安装过程，然后再讨论编写程序。
- en: '**INSTALLING THE ARDUINO IDE**'
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**安装Arduino IDE**'
- en: The Arduino IDE is easy to use, making it one major reason for the Arduino’s
    great popularity. It is available for Windows, Mac, and Linux computers, and it
    programs the Arduino over a USB connection without any need for special programming
    hardware.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IDE易于使用，这是Arduino大受欢迎的一个重要原因。它适用于Windows、Mac和Linux计算机，并且可以通过USB连接编程Arduino，无需任何特殊的编程硬件。
- en: '**NOTE**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: You will need an Internet connection to download the Arduino IDE, so do this
    before you start hearing about zombies on the news!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个互联网连接来下载Arduino IDE，因此在开始听到新闻中的僵尸消息之前，请先完成下载！
- en: To install the Arduino IDE for your platform, download the software from the
    Arduino site at *[http://www.arduino.cc/](http://www.arduino.cc/)* (click **Download**
    at the top and install the version that’s appropriate for your system). Then follow
    the instructions from the Getting Started link. Windows and Mac users will need
    to install USB drivers for the Arduino IDE to be able to communicate with the
    Arduino.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的平台上安装Arduino IDE，请从Arduino网站下载软件，网址是*[http://www.arduino.cc/](http://www.arduino.cc/)*（点击**下载**按钮并安装适合您系统的版本）。然后按照“入门指南”中的说明进行操作。Windows和Mac用户需要安装USB驱动程序，以便Arduino
    IDE能够与Arduino通信。
- en: Once you have everything installed, run the Arduino IDE. [Figure C-2](app03.html#app03fig2)
    shows the Arduino IDE window with some code in it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有内容安装完毕，运行Arduino IDE。[图C-2](app03.html#app03fig2)显示了带有一些代码的Arduino IDE窗口。
- en: '![image](graphics/f0c-02.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f0c-02.jpg)'
- en: 'Figure C-2: The Arduino IDE window'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图C-2：Arduino IDE窗口
- en: The Upload button, as the name suggests, uploads the current sketch to the Arduino
    board. Before uploading, however, it converts the textual programming code into
    executable code for the Arduino and displays any errors in the Log area. The Verify
    button checks the code for errors without uploading the program to the board.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名称所示，上传按钮将当前的草图上传到Arduino板。然而，在上传之前，它会将文本编程代码转换为可执行代码，并在日志区域显示任何错误。验证按钮在不上传程序到板上的情况下检查代码是否有错误。
- en: 'The serial monitor button opens the serial monitor window, which is used for
    two-way communication between the Arduino and another computer, as in “[Project
    13: A Raspberry Pi Control Center](ch08.html#ch00lev1sec137)” on [page 140](ch08.html#page_140).
    You can type in text messages to send to the Arduino, and you should see any responses
    that come back in the same window. The Status area at the bottom of the screen
    gives information on the type of Arduino you’re using and the corresponding serial
    port that will be programmed when the Upload button is pressed. The Status area
    in [Figure C-2](app03.html#app03fig2) also shows the type of port you would expect
    to see when using a Mac or Linux computer (something like `/dev/cu.usbmodem411`).
    If you’re using a Windows computer, this will display `COM` followed by a number.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 串口监视器按钮打开串口监视器窗口，用于Arduino和另一台电脑之间的双向通信，如[第13个项目：树莓派控制中心](ch08.html#ch00lev1sec137)中所示，见[第140页](ch08.html#page_140)。你可以输入文本消息发送给Arduino，任何回应也会显示在同一窗口中。屏幕底部的状态区域提供你所使用的Arduino类型以及按下上传按钮时会编程的串口信息。[图C-2](app03.html#app03fig2)中的状态区域还显示了你在使用Mac或Linux电脑时应该看到的端口类型（类似于`/dev/cu.usbmodem411`）。如果你使用的是Windows电脑，这里会显示以`COM`开头，后跟一个数字。
- en: The large, white area of the IDE is the Program Area, where you type the program
    code you want uploaded to the Arduino.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: IDE的大白色区域是程序区域，你可以在这里输入要上传到Arduino的程序代码。
- en: The File menu allows you to Open and Save sketches as you would in a word processor,
    and it has an Examples submenu from which you can load example sketches.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件**菜单允许你像在文字处理器中一样打开和保存草图，并且有一个示例子菜单，你可以从中加载示例草图。'
- en: '**UPLOADING A SKETCH**'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**上传草图**'
- en: To test out your Arduino board and make sure the Arduino IDE is properly installed,
    click **File** ▸ **Examples** ▸ **01\. Basics** to open the example sketch called
    *Blink* (shown in [Figure C-2](app03.html#app03fig2)).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试你的Arduino板并确保Arduino IDE已正确安装，点击**文件** ▸ **示例** ▸ **01. 基础**打开名为*Blink*的示例草图（如[图C-2](app03.html#app03fig2)所示）。
- en: Use a USB cable to attach your Arduino to your computer. The power LED of the
    Arduino should light up as it’s plugged in, and a few other LEDs should flicker
    as well.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用USB电缆将Arduino连接到电脑。连接后，Arduino的电源LED应亮起，其他一些LED灯也应闪烁。
- en: Now that the Arduino is connected, you need to tell the IDE the type of board
    being programmed and the serial port it’s connected to. Set the board using the
    menu **Tools** ▸ **Board** and then select Arduino Uno from the list of boards.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Arduino已连接，你需要告诉IDE正在编程的板类型以及它所连接的串口。通过菜单**工具** ▸ **板子**设置板类型，然后从板子列表中选择Arduino
    Uno。
- en: Set the serial port using the menu **Tools** ▸ **Port**. If you’re using a Windows
    computer, you probably won’t have many options there; you may find only the option
    COM4\. On a Mac or Linux computer, there are generally more serial connections
    listed, many of which are internal devices, and it can be difficult to work out
    which one refers to your Arduino board.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过菜单**工具** ▸ **端口**设置串口。如果你使用的是Windows电脑，可能没有太多选项；你可能只会看到COM4\选项。在Mac或Linux电脑上，通常会列出更多的串口连接，其中很多是内部设备，可能很难确定哪个是你的Arduino板。
- en: Usually, the correct port is one that starts `dev/ttyusbmodemNNNN`, where NNNN
    is a number. In [Figure C-3](app03.html#app03fig3), the Arduino attached to my
    Mac has been selected.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，正确的端口是以`dev/ttyusbmodemNNNN`开头，其中NNNN是一个数字。在[图C-3](app03.html#app03fig3)中，连接到我的Mac的Arduino已被选中。
- en: '![image](graphics/f0c-03.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f0c-03.jpg)'
- en: 'Figure C-3: Selecting the Arduino serial port'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图C-3：选择Arduino串口
- en: If your Arduino doesn’t show up in the list, this usually means you have a problem
    with the USB drivers, so try reinstalling them. If you’re a Windows user, try
    rebooting.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的Arduino没有出现在列表中，通常意味着你遇到了USB驱动问题，试着重新安装驱动程序。如果你是Windows用户，尝试重启电脑。
- en: You should now be ready to upload the sketch to the Arduino, so press the **Upload**
    button. Messages should appear in Log area, and then the TX and RX LEDs on the
    Arduino should flicker as the program is uploaded onto the board.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该准备好将程序上传到Arduino，因此按下**上传**按钮。日志区域应显示消息，然后Arduino上的TX和RX LED灯应闪烁，表明程序正在上传到板子上。
- en: When the upload is complete, you should see a message like the one shown in
    [Figure C-4](app03.html#app03fig4).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 上传完成后，你应该看到类似[图C-4](app03.html#app03fig4)所示的消息。
- en: '![image](graphics/f0c-04.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f0c-04.jpg)'
- en: 'Figure C-4: A successful upload'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图C-4：成功上传
- en: The `Done uploading` message tells you that the sketch has uploaded, and the
    last line in the console tells you that you’ve used 1,084 bytes of the 32,256
    bytes available on your Arduino.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`Done uploading` 消息告诉你草图已经上传，控制台中的最后一行告诉你，你已经使用了 1,084 字节的 32,256 字节可用空间。'
- en: Once the sketch is uploaded, the built-in *L* LED on the Arduino should blink
    slowly on and off, which is just what the *Blink* program is expected to do.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦草图上传完成，Arduino 上内置的 *L* LED 应该会慢慢闪烁，这正是 *Blink* 程序的预期行为。
- en: '**INSTALLING THE ANTIZOMBIE SKETCHES**'
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**安装抗僵尸草图**'
- en: All the sketches for the book are available via the book’s website (*[http://www.nostarch.com/zombies/](http://www.nostarch.com/zombies/)*).
    Click on the Download Code link to download a ZIP file called *zombies-master.zip*.
    Make sure to do this *before* the apocalypse begins, because your broadband is
    likely to be a low priority once the infection has begun to spread. This folder
    will contain all the Arduino and Raspberry Pi programs for the projects in this
    book.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所有书中的草图都可以通过书的官网获取 (*[http://www.nostarch.com/zombies/](http://www.nostarch.com/zombies/)*)。点击下载代码链接，下载名为
    *zombies-master.zip* 的 ZIP 文件。确保在 *末日* 开始之前完成此操作，因为一旦感染开始蔓延，你的宽带可能会变得优先级低。该文件夹将包含书中所有与
    Arduino 和 Raspberry Pi 项目相关的程序。
- en: Install the Arduino sketches so that you can use them directly from your Arduino
    IDE by copying the subfolders from the *Arduino* folder into *Documents/Arduino*
    folder for Mac and Linux users and *My Documents\Arduino* for Windows users. Exit
    and reopen the Arduino IDE. Now when you view **File** ▸ **Sketchbook**, you should
    find all the book’s sketches listed.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Arduino 草图，以便你可以直接通过 Arduino IDE 使用它们。对于 Mac 和 Linux 用户，将 *Arduino* 文件夹中的子文件夹复制到
    *Documents/Arduino* 文件夹，Windows 用户则复制到 *My Documents\Arduino* 文件夹。退出并重新打开 Arduino
    IDE。现在，当你查看 **文件** ▸ **草图集** 时，你应该能看到所有书中的草图列表。
- en: '**ARDUINO PROGRAMMING BASICS**'
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Arduino 编程基础**'
- en: 'This section contains an overview of the main Arduino programming commands
    to help you understand the sketches used to do with zombies. If you’re interested
    in learning the Arduino C programming language, consider getting a copy of my
    book *Programming Arduino: Getting Started with Sketches* (Tab Books, 2012). The
    technical reviewer for the book you’re reading now (Jeremy Blum) has also written
    a very good book on Arduino and has produced a superb series of video tutorials.
    You can find links to all this from his website (*[http://www.jeremyblum.com/](http://www.jeremyblum.com/)*).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含了 Arduino 编程命令的概述，帮助你理解用于与僵尸互动的草图。如果你有兴趣学习 Arduino C 编程语言，考虑购买我的书 *编程 Arduino：草图入门*（Tab
    Books, 2012）。你现在正在阅读的这本书的技术审阅者（Jeremy Blum）也写了一本很好的 Arduino 书籍，并制作了一系列精彩的视频教程。你可以通过他的网站
    (*[http://www.jeremyblum.com/](http://www.jeremyblum.com/)* ) 找到所有相关链接。
- en: '**STRUCTURE OF AN ARDUINO SKETCH**'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**Arduino 草图的结构**'
- en: 'All Arduino sketches must have two basic *functions* (units of program code
    that perform a task): `setup` and `loop`. To see how they work, let’s dissect
    the *Blink* example that we looked at earlier.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 Arduino 草图必须包含两个基本的 *函数*（执行任务的程序代码单元）：`setup` 和 `loop`。为了理解它们的工作原理，让我们来分析之前提到的
    *Blink* 示例。
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Your *Blink* sketch might be slightly different if you have a newer version
    of the Arduino IDE, so for the purposes of this discussion, refer to the sketch
    printed here rather than the one loaded in your IDE.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是较新的 Arduino IDE 版本，你的 *Blink* 草图可能会有所不同，因此在此讨论中，请参考这里打印的草图，而不是在你的 IDE
    中加载的草图。
- en: The text preceded by a double slash (`//`) is called a *comment*. It’s not executable
    program code but rather a description of what’s happening at that point in the
    sketch.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以双斜杠 (`//`) 开头的文本叫做 *注释*。它不是可执行的程序代码，而是对草图中某个部分发生的事情的描述。
- en: Just after the words `setup()` and `loop()`, we have a `{` symbol. (Sometimes
    this is put on the same line as the preceding word and sometimes on the next line.
    Where it goes is just a matter of personal preference and has no effect on the
    running of the code.) The `{` symbol marks the start of a block of code, which
    ends with a corresponding `}` symbol. You’ll use curly brackets to group together
    all lines of code that belong to a particular function or other control structure.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 紧跟在 `setup()` 和 `loop()` 这两个词后面，我们会看到一个 `{` 符号。（有时它和前面的词在同一行，有时在下一行。它的位置完全是个人偏好问题，对代码的运行没有影响。）`{`
    符号标志着代码块的开始，代码块以相应的 `}` 符号结束。你将使用大括号将属于特定函数或其他控制结构的所有代码行分组在一起。
- en: The lines of code inside the `setup` function run just once, when power is applied
    to the Arduino or the Reset button is pressed. You use `setup` to perform all
    the tasks that need doing just once when the program starts. In *Blink*, the code
    inside the `setup` function just sets the LED pin as an output.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`setup` 函数中的代码只会运行一次，当 Arduino 上电或按下重置按钮时执行。你可以在 `setup` 函数中执行所有程序启动时只需要执行一次的任务。在
    *Blink* 程序中，`setup` 函数中的代码仅将 LED 引脚设置为输出。'
- en: The commands inside the `loop` function will be run over and over again; in
    other words, when the last line inside `loop` has run, the first line will start
    again.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`loop` 函数中的命令会一遍又一遍地运行；换句话说，当 `loop` 内的最后一行执行完后，第一行会重新开始。'
- en: Now, let’s parse this sketch, starting from the top line.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从第一行开始解析这个程序。
- en: '**CREATING VARIABLES AND CONSTANTS**'
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建变量和常量**'
- en: '*Variables* are a way of giving names to values; for example, the first line
    of *Blink* labels pin 13 `led`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*变量* 是为值命名的一种方式；例如，*Blink* 的第一行将 13 号引脚命名为 `led`：'
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This defines an `int` variable called `led` and gives it an initial value of
    13, because 13 is the number of the Arduino pin that the *L* LED is connected
    to. The word `int` is short for integer and means that this variable returns a
    whole number without decimals.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这定义了一个名为 `led` 的 `int` 变量，并赋予它初始值 13，因为 13 是连接 *L* LED 的 Arduino 引脚编号。`int`
    是整数（integer）的缩写，表示这个变量返回一个没有小数的整数。
- en: 'In some of the book’s other sketches, variables like this, that define a specific
    pin to be used, are preceded by a `const` keyword:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在书中的其他程序中，像这样定义特定引脚的变量，通常会在前面加上 `const` 关键字：
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `const` keyword tells the Arduino IDE that the value of `led` is never going
    to change from 13, making it a *constant*. Assigning values this way results in
    slightly smaller and quicker sketches and is generally considered a good habit.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`const` 关键字告诉 Arduino IDE `led` 的值永远不会从 13 改变，使其成为一个 *常量*。以这种方式赋值会生成稍微更小且更快速的代码，一般认为这是一个好习惯。'
- en: '**CONFIGURING DIGITAL OUTPUTS**'
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**配置数字输出**'
- en: 'The `Blink` sketch also shows a good example of a setting a pin up to be a
    *digital output*. Pin 13, having been defined as `led`, is configured as an output
    in the `setup` function by this line:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`Blink` 程序也很好地展示了如何将引脚设置为 *数字输出*。通过这行代码，在 `setup` 函数中将已经定义为 `led` 的引脚 13 配置为输出：'
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As this only needs to be done once, it is placed inside the `setup` function.
    Once the pin is set as an output, it will stay an output until we tell it to be
    something else.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这只需要执行一次，因此将其放在 `setup` 函数中。一旦引脚被设置为输出，它将一直是输出状态，直到我们告诉它变为其他类型。
- en: 'For it to blink, the LED needs to turn on and off repeatedly, so the code for
    this goes inside `loop`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 LED 闪烁，它需要反复开关，所以这部分代码放在 `loop` 函数中：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The command `digitalWrite` takes two *parameters* (pieces of data that the function
    needs to run), which are passed to the function inside parentheses and separated
    by a comma. The first parameter defines which Arduino pin to write to (in this
    case, pin 13, as specified by `led`), and the second parameter gives the value
    to be written to the pin. A value of `HIGH` sets the output to 5V, turning the
    LED on, and a value of `LOW` sets the pin to 0V, turning the LED off.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 命令 `digitalWrite` 需要两个 *参数*（即函数运行所需的数据），这些参数被传递给函数，并用逗号分隔。第一个参数定义了要写入的 Arduino
    引脚（在这个例子中是 13 号引脚，由 `led` 指定），第二个参数则给出要写入引脚的值。`HIGH` 的值将输出设置为 5V，点亮 LED，而 `LOW`
    的值将引脚设置为 0V，熄灭 LED。
- en: The `delay` function holds the parameter that defines how long the Arduino should
    continue with its current function. In this case, a value of `1000` delays the
    program for one second before changing the state of the LED.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`delay` 函数包含一个参数，用于定义 Arduino 在当前功能执行多长时间。在这个例子中，`1000` 的值会让程序延迟一秒，然后才会改变 LED
    的状态。'
- en: '**CONFIGURING DIGITAL INPUTS**'
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**配置数字输入**'
- en: 'Digital pins can also be set as input pins using the `pinMode` command. The
    *Blink* sketch doesn’t do this, so here’s an example:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 数字引脚也可以通过 `pinMode` 命令设置为输入引脚。*Blink* 程序没有这样做，以下是一个示例：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This `pinMode` function sets pin 7 as an input. Just as with an output, you’ll
    rarely need to change the mode of a pin, so define input pins in the `setup` function.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `pinMode` 函数将 7 号引脚设置为输入。就像设置输出一样，你很少需要改变引脚的模式，所以应该在 `setup` 函数中定义输入引脚。
- en: 'Having set the pin as an input, you can then `read` the voltage at that pin,
    as in this example `loop` function:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 将引脚设置为输入后，你可以使用 `read` 函数读取该引脚的电压，如以下 `loop` 函数所示：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, the LED will be turned off if the input at pin 7 is read as `HIGH` at
    the time it is tested. The Arduino decides whether to turn the LED on with an
    *if statement*, which starts with the `if` command. Immediately after the word
    `if` is a *condition*. In this case, the condition is `(digitalRead(7) == HIGH)`.
    The double equal sign (`==`) tells the machine to compare the two values on either
    side. In this case, if pin 7 is `HIGH`, then the block of code surrounded by `{`
    and `}` after the `if` will run; otherwise it won’t. We have already met the code
    to be run if the condition is true. This is the `digitalWrite` command to turn
    the LED on.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，如果在测试时引脚7的输入被读取为`HIGH`，LED将被关闭。Arduino决定是否打开LED，通过一个*if语句*来实现，这个语句以`if`命令开始。紧接着`if`后面的是一个*条件*。在这种情况下，条件是`(digitalRead(7)
    == HIGH)`。双等号（`==`）告诉计算机比较两边的两个值。在这种情况下，如果引脚7是`HIGH`，那么`if`后面的`{`和`}`之间的代码块将会执行；否则它不会执行。如果条件为真，我们已经看过要执行的代码，就是`digitalWrite`命令来打开LED。
- en: '**NOTE**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: Lining up the { and } makes it easier to see which } belongs to which {.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对齐`{`和`}`可以更容易地看出哪个`}`属于哪个`{`。
- en: '**STABILIZING DIGITAL INPUTS WITH PULL-UP RESISTORS**'
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**使用上拉电阻稳定数字输入**'
- en: The preceding example code in assumes that the digital input is definitely either
    high or low. A switch connected to a digital input can only close a connection.
    You’ll typically connect switches in such a way that when flipped, the digital
    input is connected to GND (0V). While the switch’s connection is open, the digital
    input is said to be *floating*. That means the input isn’t electrically connected
    to anything, but a floating input can still pick up electrical noise from the
    circuitry around it, causing the voltage on the pin to oscillate between high
    and low.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例代码假设数字输入一定是高电平或低电平。连接到数字输入的开关只能关闭连接。通常你会以这样一种方式连接开关：当开关翻转时，数字输入连接到GND（0V）。当开关的连接处于打开状态时，数字输入被称为*浮空*。这意味着输入没有与任何电路连接，但浮空输入仍然能从周围电路中拾取电噪声，导致引脚上的电压在高低之间震荡。
- en: 'This behavior is undesirable because the code could be activated unexpectedly.
    To prevent input pins from floating, just add a pull-up resistor ([Figure C-5](app03.html#app03fig5)).
    We use just such a resistor in “[Project 6: PIR Zombie Detector](ch04.html#ch00lev1sec81)”
    on [page 72](ch04.html#page_72).'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为是不希望的，因为代码可能会意外激活。为了防止输入引脚浮空，只需添加一个上拉电阻（[图 C-5](app03.html#app03fig5)）。在
    “[项目6：PIR僵尸探测器](ch04.html#ch00lev1sec81)” 中的[第72页](ch04.html#page_72)我们就使用了这样一个电阻。
- en: When the switch is open (as shown in [Figure C-5](app03.html#app03fig5)), the
    resistor connects the input pin to a voltage source, pulling up the voltage at
    the input pin to 5V and holding it there. Pressing the button to close the switch
    overrides the weak pulling up of the input, connecting the digital input to GND
    instead.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当开关打开时（如[图 C-5](app03.html#app03fig5)所示），电阻将输入引脚连接到电压源，将输入引脚的电压拉高至5V并保持在那里。按下按钮关闭开关时，会覆盖输入的弱上拉作用，而将数字输入连接到GND。
- en: '![image](graphics/f0c-05.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f0c-05.jpg)'
- en: 'Figure C-5: Schematic for using a pull-up resistor with a digital input'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 C-5：使用上拉电阻与数字输入连接的原理图
- en: 'Arduino inputs have built-in pull-up resistors of about 40 kΩ that you can
    enable as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino输入有内置的约40 kΩ的上拉电阻，可以通过如下方式启用：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This example shows how you would set the pin mode of a digital input to be
    used with a switch using the Arduino pull-up resistor: just set the pin mode to
    `INPUT_PULLUP` rather than `INPUT`.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了如何设置数字输入引脚的模式，使其与开关一起使用，并启用Arduino的上拉电阻：只需将引脚模式设置为`INPUT_PULLUP`，而不是`INPUT`。
- en: '**READING ANALOG INPUTS**'
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**读取模拟输入**'
- en: Analog inputs allow you to measure a voltage between 0V and 5V on any of the
    A0 to A5 analog input pins on the Arduino. Unlike with digital inputs and outputs,
    you don’t need to include the `pinMode` command in `setup` when using an analog
    input.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟输入允许你在Arduino的A0到A5模拟输入引脚之间测量0V到5V之间的电压。与数字输入和输出不同，在使用模拟输入时，你不需要在`setup`中包含`pinMode`命令。
- en: You use `analogRead` to read the value of an analog input, and you supply the
    name of the pin you want to read as a parameter. Unlike `digitalRead`, `analogRead`
    returns a number rather than just `true` or `false` values. The returned number
    will be between 0 (0V) and 1,023 (5V). To convert the number into an applicable
    voltage, multiply the value by 5 and then divide it by 1,023, which amounts to
    dividing it by 204.6.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`analogRead`来读取模拟输入的值，并提供你要读取的引脚名称作为参数。与`digitalRead`不同，`analogRead`返回一个数字，而不仅仅是`true`或`false`。返回的数字将介于0（0V）和1,023（5V）之间。要将数字转换为实际电压，请将值乘以5，然后除以1,023，相当于除以204.6。
- en: 'Here’s how you’d read an analog value and convert it in Arduino code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何在Arduino代码中读取模拟值并进行转换：
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The variable `raw` is an `int` (whole number) because the reading from an analog
    input is always a whole number. To scale the raw reading as a decimal number,
    the variable needs to be a `float` (floating point) type of variable.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 变量`raw`是`int`（整数类型），因为模拟输入的读取值始终是整数。为了将原始读取值转化为小数类型，变量需要是`float`（浮点型）类型。
- en: '**WRITING TO ANALOG OUTPUTS**'
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**写入模拟输出**'
- en: 'Digital outputs only allow you to turn a component (like an LED) on and off,
    but analog outputs allow you to control the level of power supplied to a component
    incrementally. This control allows you to, for example, control the brightness
    of an LED or the speed of a motor. This is used in “[Project 20: Silent Haptic
    Communication with Arduino](ch11.html#ch00lev1sec206)” on [page 209](ch11.html#page_209)
    to reduce the power to the motor so that it doesn’t attract zombies by making
    too much noise.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 数字输出仅允许你开关一个组件（如LED），但模拟输出可以逐步控制供给组件的功率大小。这种控制方式可以用来控制例如LED的亮度或电机的速度。在[第20个项目：使用Arduino进行静音触觉通信](ch11.html#ch00lev1sec206)中，利用此功能通过减少电机的功率，避免因噪音过大而引来僵尸。
- en: Only the pins D3, D5, D6, D9, D10, or D11 are capable of being used as analog
    outputs. These pins are marked with a little tilde (~) beside the pin number on
    the Arduino.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 只有D3、D5、D6、D9、D10或D11引脚可以用作模拟输出。这些引脚旁边会标有一个小的波浪符号（~），表示它们支持模拟输出。
- en: 'To control an analog output, use the command `analogWrite` with a number between
    0 and 255 as the parameter, as in the following line:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要控制模拟输出，使用命令`analogWrite`，并将0到255之间的数字作为参数，如下所示：
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: A value of 0 is 0V and fully off, while a value of 255 is 5V and fully on. In
    this example, we set the output of pin D3 to 127, which would be half power.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 值为0时是0V，完全关闭；值为255时是5V，完全开启。在这个例子中，我们将D3引脚的输出设置为127，这相当于半功率。
- en: '**REPEATING CODE IN CONTROL LOOPS**'
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**在控制循环中重复代码**'
- en: 'Control loops (not to be confused with the `loop` function) allow you to repeat
    an action a set number of times or until some condition changes. There are two
    commands you can use for looping: `for` and `while`. You would use the `for` command
    for repeating something a fixed number of times and `while` for repeating something
    until a condition changes.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 控制循环（与`loop`函数不同）允许你重复执行某个动作指定次数，或者直到某个条件发生变化。有两条命令可以用来创建循环：`for`和`while`。你可以使用`for`命令来重复执行某个操作固定次数，而`while`命令则用于在某个条件发生变化之前重复执行某个操作。
- en: 'The following code makes an LED blink 10 times and then stops:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码使LED闪烁10次，然后停止：
- en: '[PRE10]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**HOW ANALOG OUTPUTS GENERATE VOLTAGES**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**模拟输出如何生成电压**'
- en: It is tempting to think of an analog output as being capable of a voltage between
    0V and 5V, and if you attach a voltmeter between an analog output pin and GND,
    the voltage will indeed seem to take on values between 0V and 5V as you change
    the parameter to analogWrite. In fact, things are a little more complex than that.
    This kind of output is using pulse width modulation (PWM). [Figure C-6](app03.html#app03fig6)
    shows what is really going on.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易认为模拟输出的电压范围是0V到5V，如果你在模拟输出引脚和地之间连接一个电压表，你确实会看到电压在调整`analogWrite`参数时在0V和5V之间变化。实际上，情况比这复杂一些。这种输出使用的是脉宽调制（PWM）。[图C-6](app03.html#app03fig6)展示了实际情况。
- en: '![image](graphics/f0c-06.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f0c-06.jpg)'
- en: 'Figure C-6: Analog output’s pulse width modulation'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图C-6：模拟输出的脉宽调制
- en: An analog output pin generates 490 pulses per second with varied pulse widths.
    The larger the proportion of the time that the pulse stays high, the greater the
    power delivered to the output, and hence the brighter the LED or faster the motor.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一个模拟输出引脚每秒生成490个脉冲，且脉冲宽度各不相同。脉冲保持高电平的时间比例越大，输出的功率越大，因此LED越亮，电机转速越快。
- en: A voltmeter reports this as a change in voltage because the voltmeter cannot
    respond fast enough and therefore does a kind of averaging (integration).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一台电压表会将这个变化报告为电压变化，因为电压表响应速度不够快，因此做了某种类型的平均（积分）。
- en: In this example, we place the blinking code in `setup` rather than `loop`, because
    `loop` would repeat the blink cycle immediately so the LED would not stop after
    10 times.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将闪烁代码放在 `setup` 中，而不是放在 `loop` 中，因为 `loop` 会立即重复闪烁循环，所以 LED 在 10 次之后不会停止。
- en: 'If you wanted to keep an LED blinking as long as a button connected to a digital
    input was pressed, you would use a `while` command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让 LED 持续闪烁，直到连接到数字输入的按钮被按下，你可以使用 `while` 命令：
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This code says that while pin 9 detects that a button is being pressed ➊, the
    LED should be lit.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码表示，当引脚 9 检测到按钮被按下 ➊ 时，LED 应该点亮。
- en: '**SETTING TWO CONDITIONS WITH IF/ELSE**'
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置两个条件的 IF/ELSE**'
- en: 'In “[Configuring Digital Outputs](app03.html#ch00lev1sec245)” on [page 251](app03.html#page_251),
    we used an `if` command to tell the Arduino IDE to do something if a certain condition
    was met. You can also use `if` in conjunction with the `else` command to instruct
    the IDE to perform one set of code if the condition is true and a different set
    of commands if it is false. Here’s an example:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在 “[配置数字输出](app03.html#ch00lev1sec245)” 这部分内容的 [第 251 页](app03.html#page_251)
    中，我们使用了一个 `if` 命令来告诉 Arduino IDE 在某个条件满足时执行某个操作。你还可以将 `if` 与 `else` 命令结合使用，指示
    IDE 在条件为真时执行一组代码，在条件为假时执行另一组代码。以下是一个例子：
- en: '[PRE12]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This `if` statement turns the `led` pin on if an analog reading is greater than
    500 or off if the reading is less than or equal to 500.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `if` 语句会在模拟读数大于 500 时打开 `led` 引脚，或者在读数小于或等于 500 时关闭它。
- en: '**MAKING LOGICAL COMPARISONS**'
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**进行逻辑比较**'
- en: 'So far we have used two types of comparison: `==` (equal to) and `>` (greater
    than). Here are some more comparisons you can make:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用了两种比较类型：`==`（等于）和 `>`（大于）。下面是一些其他的比较方式：
- en: <=  less than or equal to
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: <=  小于或等于
- en: '>=  greater than or equal to'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '>=  大于或等于'
- en: '!=  not equal to'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '!=  不等于'
- en: 'You can also make more complicated comparisons using *logical operators* like
    `&&` (and) and `||` (or). For example, to turn an LED on if a reading is between
    300 and 400, you could write the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 *逻辑运算符* 进行更复杂的比较，例如 `&&`（与）和 `||`（或）。例如，为了在读数在 300 到 400 之间时打开 LED，你可以写如下代码：
- en: '[PRE13]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In English, this code might read, “If the reading is greater than or equal to
    300 *and* the reading is less than or equal to 400, then turn the LED on.” Since
    we’re using the `&&` operator to specify that both conditions must be true, if
    either condition is not met, the LED remains dark.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在英文中，这段代码可能会写成：“如果读数大于或等于 300 *并且* 读数小于或等于 400，则打开 LED。”由于我们使用了 `&&` 操作符来指定两个条件必须同时为真，如果其中任何一个条件不满足，LED
    就会保持关闭。
- en: '**GROUPING CODE INTO FUNCTIONS**'
  id: totrans-130
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码分组为函数**'
- en: Functions can be confusing if you’re new to programming. Functions are best
    thought of as ways to group together lines of code and give them a name so that
    the block of code is easy to use over and over again.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是编程新手，函数可能会让人困惑。函数最好理解为将一组代码行组合在一起并给它们一个名字，这样这块代码就可以轻松地反复使用。
- en: 'Built-in functions such as `digitalWrite` are more complicated than they first
    seem. Here is the code for the `digitalWrite` function:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 内置函数如 `digitalWrite` 比它们最初看起来的要复杂。以下是 `digitalWrite` 函数的代码：
- en: '[PRE14]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Since someone already wrote the `digitalWrite` function, we don’t have to worry
    about what all this code does; we can just be glad that we don’t have to type
    it all out every time we want to change `pin` from `high` to `low`. By giving
    that big chunk of code a name, we can just call the name to use this code.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 既然已经有人写好了 `digitalWrite` 函数，我们就不需要担心这些代码到底做了什么；我们只需要高兴的是，每次我们想把 `pin` 从 `high`
    改为 `low` 时，不用每次都输入这些代码。通过给这块代码起个名字，我们只需要调用这个名字来使用这段代码。
- en: You can create your own functions to use as shortcuts for more complicated chunks
    of code. For example, to create a function that makes an LED blink the number
    of times you specify as a parameter, with the LED pin also specified as a parameter,
    you could use the sketch below. This function is named `blink`, and you can call
    it during startup so that the Arduino *L* LED blinks five times after a reset.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以创建自己的函数，作为更复杂代码块的快捷方式。例如，要创建一个函数，使 LED 根据你指定的参数闪烁指定次数，并且 LED 引脚也作为参数指定，你可以使用下面的代码。这函数名为
    `blink`，你可以在启动时调用它，这样 Arduino *L* LED 在重置后会闪烁五次。
- en: '[PRE15]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: At ➊, we define the pin being used. The `setup` function at ➋ sets `ledPin`
    as an output and then calls the function `blink` ➌, passing it the relevant pin
    and the number of times to blink (`5`). The `loop` function is empty and does
    nothing, but the Arduino IDE insists that we include it even if it serves no purpose.
    If you don’t include it, you will get an error message when you install the program.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，我们定义了正在使用的引脚。 ➋ 处的 `setup` 函数将 `ledPin` 设置为输出，然后调用 `blink` 函数 ➌，传入相关引脚和闪烁次数（`5`）。`loop`
    函数为空，什么也不做，但Arduino IDE要求我们即使它没有任何作用也要包括这个函数。如果不包括它，安装程序时会报错。
- en: The `blink` function itself begins at ➍ with `void`. `void` indicates that the
    function does not return any value, so you cannot assign the result of calling
    that function to a variable, as you might want to do if the function performed
    some kind of calculation. Then follows the name of the function (`blink`) and
    the parameters the function takes, enclosed within parentheses and separated by
    commas. When you define a function, you must specify the type of each of the parameters
    (for example, whether they are `int` or `float`). In this case, both the pin (`pin`)
    and the number of times to blink (`n`) are `int` values. Lastly, at ➎, we have
    a `for` loop that repeats the `digitalWrite` and `delay` commands inside it `n`
    times.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`blink` 函数本身从 ➍ 开始，关键字为 `void`。`void` 表示该函数没有返回值，因此不能像进行某些计算的函数那样将调用结果赋给变量。接下来是函数的名称（`blink`）和函数接收的参数，这些参数放在括号内，并用逗号分隔。当你定义一个函数时，必须指定每个参数的类型（例如，是否是
    `int` 或 `float`）。在这个例子中，`pin`（引脚）和闪烁次数 (`n`) 都是 `int` 类型的值。最后，在 ➎ 处，我们有一个 `for`
    循环，循环执行 `digitalWrite` 和 `delay` 命令 `n` 次。'
- en: That’s it for the software crash course. If you want to learn more about programming
    for Arduinos, visit *[http://www.arduino.cc/](http://www.arduino.cc/)* before
    everyone at your Internet service provider becomes a zombie.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是软件速成课程的内容。如果你想学习更多关于Arduino编程的知识，*请访问[http://www.arduino.cc/](http://www.arduino.cc/)*，在你所在的互联网服务提供商的员工变成僵尸之前。
- en: '**ASSEMBLING A SCREWSHIELD**'
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**组装螺丝盾板**'
- en: Many of the projects in this book use a screwshield that fits over the Arduino
    sockets and allows you to connect wires to Arduino pins using screw terminals.
    Not all wires will fit into the normal Arduino sockets, but almost any thickness
    of wire will fit securely in a screw terminal and won’t come loose. There are
    various screwshields on the market, all with slightly different layouts. In this
    book, I use the popular model from Adafruit (the proto-screwshield, part number
    196), which is provided as a kit that you have to solder together. There are lots
    of connections to make, but none of them are difficult. The component parts of
    the proto-screwshield are shown in [Figure C-7](app03.html#app03fig7).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的许多项目使用了螺丝盾板，这种盾板可以安装到Arduino插槽上，并通过螺丝端子将电线连接到Arduino引脚。并非所有电线都能适配普通的Arduino插槽，但几乎任何粗细的电线都能牢固地连接到螺丝端子上，并且不会松动。市面上有多种螺丝盾板，它们的布局略有不同。在本书中，我使用的是Adafruit公司流行的型号（原型螺丝盾板，零件号196），它以套件形式提供，需自行焊接组装。尽管连接的部件很多，但没有任何一个是困难的。原型螺丝盾板的组件部分如[图
    C-7](app03.html#app03fig7)所示。
- en: '![image](graphics/f0c-07.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f0c-07.jpg)'
- en: 'Figure C-7: The parts of Adafruit’s Proto-Screwshield'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 C-7：Adafruit原型螺丝盾板的零件
- en: The screw terminals line the edge of the board and Arduino pass-through headers.
    The screwshield pass-through headers slot through the shield into the PCB. You
    can plug wires into these as you would in the Arduino Uno, and they have sockets
    on the top side so you can plug still another shield on top.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 螺丝端子排布在电路板的边缘和Arduino的通过插头处。螺丝盾板的通过插头插入到盾板中，再通过PCB插入。你可以像在Arduino Uno中一样将电线插入这些插头，并且它们的顶部也有插槽，你可以在其上再安装一个盾板。
- en: Of the two LEDs, one is a power LED that indicates when the board is powered
    up, and the other is for you to use in your build. You don’t have to solder either
    LED in place if you don’t need them. The push button is a reset switch, which
    can be useful as it’s hard to get at the Arduino’s reset button when the screwshield
    is in place. Again, it is by no means essential.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 两个LED灯中，一个是电源LED，用来指示电路板是否已通电，另一个则是供你在构建过程中使用的LED。如果你不需要这两个LED，可以不将它们焊接到电路板上。按钮是一个复位开关，这个开关很有用，因为当螺丝盾板安装时，很难接触到Arduino的复位按钮。同样，这个开关并非必须。
- en: '[Figure C-8](app03.html#app03fig8) shows the board being assembled.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 C-8](app03.html#app03fig8)展示了电路板的组装过程。'
- en: '![image](graphics/f0c-08.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f0c-08.jpg)'
- en: 'Figure C-8: Assembling the screwshield'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 C-8：组装螺丝盾板
- en: 'To assemble the screwshield, follow these steps:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 组装螺丝护罩时，按照以下步骤操作：
- en: 1\. Solder the LEDs, resistors, and switch (assuming you want them) in place
    ([Figure C-8a](app03.html#app03fig8)).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 焊接 LED、 电阻和开关（如果你需要的话）（[图 C-8a](app03.html#app03fig8)）。
- en: 2\. Put all the screw terminals in place along the outermost edges of the screwshield
    ([Figure C-8b](app03.html#app03fig8)) and flip the board over to solder them on
    the underside of the PCB. Make sure they are the right way around so that the
    openings where the wires enter are facing outward, away from the board.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 将所有螺丝端子放置在螺丝护罩的最外缘（[图 C-8b](app03.html#app03fig8)），然后翻转电路板，在 PCB 的背面焊接它们。确保它们的方向正确，使得电线进入的开口朝外，远离电路板。
- en: 3\. Push the pass-through headers through from the top of the board ([Figure
    C-8c](app03.html#app03fig8)) and solder them. Notice that there are two rows of
    holes on each side of the board where they are able to go; place them in the outer
    sets of holes. The inner sets are used to wire things up to the pins on the central
    prototyping area of the board.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 将穿透式插头从电路板的顶部插入（[图 C-8c](app03.html#app03fig8)），并进行焊接。请注意，在电路板的每一侧都有两排孔，可以插入这些插头；将它们放在外侧的孔位中。内侧的孔位用于将电线连接到电路板中央原型区域的引脚。
- en: If you need a refresher on how to solder to a PCB, review “[Soldering Basics](app02.html#ch00lev1sec227)”
    on [page 230](app02.html#page_230). With your components in place, make sure your
    solder joints look sound (also described in “[Soldering Basics](app02.html#ch00lev1sec227)”).
    You should be ready to deploy this handy shield in all of your antizombie base
    defense endeavors and conserve precious solder for devices you intend to last
    a long time.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要复习如何焊接到 PCB 上，请查看 “[焊接基础](app02.html#ch00lev1sec227)”（[第 230 页](app02.html#page_230)）。将元件放置好后，确保你的焊接点牢固（也可以在
    “[焊接基础](app02.html#ch00lev1sec227)” 中找到相关描述）。你应该已经准备好将这个便捷的护罩用于所有的反僵尸基地防御任务，并节省宝贵的焊锡用于那些你打算让它们长期使用的设备。
- en: '**FURTHER RESOURCES**'
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步资源**'
- en: 'There are many great online resources and books that will tell you more about
    how to use the Arduino in your projects. Here are a few links to get you started:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多很棒的在线资源和书籍可以帮助你了解如何在项目中使用 Arduino。以下是一些开始的链接：
- en: '• I have written a number of books on Arduino, including *Programming Arduino:
    Getting Started with Sketches* (Tab Books, 2012) and various Arduino project books.
    You can find a full list of my books at *[http://www.simonmonk.org/](http://www.simonmonk.org/).*'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: • 我写了许多关于 Arduino 的书籍，包括 *《编程 Arduino：Sketches 入门》*（Tab Books，2012）和各种 Arduino
    项目书籍。你可以在 *[http://www.simonmonk.org/](http://www.simonmonk.org/)* 找到我所有书籍的完整列表。
- en: '• Jeremy Blum, the technical editor of this book, has made a great series of
    introductory videos on the Arduino, which you can find here: *[https://www.youtube.com/playlist?list=PLA567CE235D39FA84](https://www.youtube.com/playlist?list=PLA567CE235D39FA84)*.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: • 本书的技术编辑 Jeremy Blum 制作了一系列关于 Arduino 的入门视频，你可以在这里找到它们： *[https://www.youtube.com/playlist?list=PLA567CE235D39FA84](https://www.youtube.com/playlist?list=PLA567CE235D39FA84)*。
- en: • Jeremy also has written a great book on Arduino, called *Exploring Arduino*
    (Wiley, 2013).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: • Jeremy 还写了一本关于 Arduino 的优秀书籍，名为 *《探索 Arduino》*（Wiley，2013）。
- en: '• I have written a series of online Arduino lessons, the Adafruit “Learn Arduino”
    series, which you can find here: *[https://learn.adafruit.com/series/learn-arduino/](https://learn.adafruit.com/series/learn-arduino/)*.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: • 我写了一系列在线 Arduino 课程，即 Adafruit “Learn Arduino” 系列，你可以在这里找到它们： *[https://learn.adafruit.com/series/learn-arduino/](https://learn.adafruit.com/series/learn-arduino/)*。
